[site]: datascience
[post_id]: 114550
[parent_id]: 113566
[tags]: 
I post my solution to this question in case someone else is having a similar issue. In this case the GAN was not converging because the discriminator was too good. This is a common problem: if discriminator can distinguish the real examples from the fake ones it will never give any suggestion to the generator how to improve the data generation. So the model diverges. In this case i removed one hidden layer from the net. def build_discriminator(self): model = Sequential(name = "Discriminator") model.add(Conv2D(64, kernel_size = (5, 5), strides = (2, 2), input_shape = self.image_shape, padding = "same")) model.add(BatchNormalization()) model.add(LeakyReLU(0.2)) model.add(Dropout(0.3)) model.add(Conv2D(128, kernel_size = (5, 5), strides = (2, 2), padding = "same")) model.add(BatchNormalization()) model.add(LeakyReLU(0.2)) model.add(Dropout(0.3)) model.add(Conv2D(256, kernel_size = (5, 5), strides = (2, 2), padding = "same")) model.add(BatchNormalization()) model.add(LeakyReLU(0.2)) model.add(Dropout(0.3)) model.add(Flatten()) model.add(Dense(1)) return model
