[site]: stackoverflow
[post_id]: 4513802
[parent_id]: 4457842
[tags]: 
You should start by reading and testing Zend Framework. As this is really just a framework and a collection of libraries and experiences of long-time devellopers. Somes says you should try to build your own framework before, then throw it in the basket and get back to ZF (Zend Framework). It depends how much time (years) you have. But that's right it's easier to understand good choices when you've mad bad ones before :-) Nobody in this world can build a good architecture on his own, you'll need the experience of others to make your own new errors and not the old ones. No one was smart enough in the past to prevent us from all theses CMS (phpNuke, and a lot more but I don't want to hurt some people working on big CMS which are still there today). So use ZF MVC model, do read (really) ZF documentation (even if you won't use it). Understand why some of theses tools are very important for security. Big things to note for a good PHP app: share nothing : by default PHP as no way to store data between the user requests. So mid-term storage/long-term storage/session storage things will have to be stored somewhere: cookie (like session ID) session files or session records in database or session records in a cache application levels cache (like memcached) database (and why no throwing MySQl for PostgreSQL, test the difference!) pre-application levels cache (revers proxy cache, varnish and such, browser cache) filter inputs/escape outputs : If you make a good use of Zend_Form, Zend_Filter, Zend_Validators and if you always use escape() in your views this part of the security should be ok (and this is a big big big problem in most PHP apps out there). See your database as one of the output, html page as another, json as another, etc. Your inputs as well are numerous, user inputs, cookies, maybe some other databases, external websites, etc. avoid absolute url : try to always use relative url. At least always use url helpers given by the framework to build your urls. get nice url map : if you can cut your application in different parts by simply reading the url you will help yourself for the day you'll need to build a more complex hardware platform for your application. Admins will need to set some configuration files for reverse proxy cache in front of your app. Will they be able to detect the https-needed parts? does all your static files are available via a specific path? Can we define a cache-time policy based on the url? design patterns : nobody is smart enough to understand all the consequences of his coding choices and the way this code will have to evolve. Design patterns are there to collect good pratices. If your problem have no design pattern solution, then maybe you do not understand your problem :-). To be honest there's maybe a simplier and faster way sometimes, but you should know the patterns before deciding not to use them. A lot of PHP experts have done their code without using frameworks (as most frameworks was not very good in fact). But code quality in the PHP world is bad, really, it's still so easy to make an XSS injection on a lot of websites. It's time to get something better, do not trust the hello world examples, building a good webapp is hard :-).
