[site]: stackoverflow
[post_id]: 126795
[parent_id]: 125394
[tags]: 
Interrupts indicate that something external to the processor core requires it's attention. It interrupts the normal flow of the program, executes an Interrupt Service Routine (ISR) and generally returns to where it was before the interrupt occurred. There are lots of variation on this basic theme: interrupts might be generated by software, another task might get the CPU after the ISR, etc.. The key point is that interrupts can occur at any time for a reason the code/CPU has no control over . An exception is a bit trickier to define because it has potentially three levels of meaning: Hardware Exceptions Certain processors (PowerPC for example) define exceptions to indicate that some sort of unusual condition has occurred: System Reset, Invalid Address, some virtual address translation cache miss, etc... These exceptions are also used to implement breakpoints and system calls. In this case, they act almost like interrupts. OS Exceptions Some of the hardware exceptions will the handled by the OS. For example, your program accesses invalid memory. This will cause a hardware exception. The OS has a handler for that exception, and odds are that the OS will send a signal to your application (SIGSEGV for example) denoting there is a problem. If your program has a signal handler installed, the signal handler will run and hopefully deal with the situation. If you don't have a signal handler, the program can be terminated or suspended. I would consider window's Structured Exception Handlers (SEH) to be this type of exceptions. Software Exceptions Some languages like Java, C++ and C# have the concept of software exceptions, where the language provides for the handling of unforeseen or unusual conditions related to the operation of the program . In this case, an exception is raised at some point in the code and some code higher up on the program execution stack would "catch" the exception and execute. This is what try/catch blocks do.
