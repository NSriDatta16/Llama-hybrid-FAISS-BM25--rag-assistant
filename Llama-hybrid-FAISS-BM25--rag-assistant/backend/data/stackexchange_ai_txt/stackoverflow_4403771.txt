[site]: stackoverflow
[post_id]: 4403771
[parent_id]: 4396589
[tags]: 
Simon, I tried out your example and I do not get an Access Violation. Here's my code: using namespace System; using namespace System::Runtime::InteropServices; ref class Wrapper { public: static int Net_methodX(int a, String^ key, long v); }; int methodX(int a, char * pKey, long v) { IntPtr ptr = static_cast (pKey); String ^ pString = Marshal::PtrToStringAnsi(ptr); System::Console::WriteLine(pString); return a; } int Wrapper::Net_methodX(int a, String^ pKey, long v) { IntPtr ptr = Marshal::StringToHGlobalAnsi(pKey); pin_ptr cKey = static_cast (ptr.ToPointer()); int val = methodX(a,cKey, v); // AccessViolation here Marshal::FreeHGlobal(ptr); return val; } void main() { Wrapper wrapper; String ^ p = gcnew String("Hello"); wrapper.Net_methodX(0, p, 0); } Also, I have a few comments: Read here: http://support.microsoft.com/kb/311259 You are using a pin_ptr to native memory. The StringToHGlobalAnsi method returns native memory, so I don't think using a pin_ptr makes sense here. A pin_ptr would make sense if you were using a method that gives you back a pointer to managed memory (like PtrToStringChars). Unless you are modifying the string, you probably want to go with the PtrToStringChars approach anyways--to avoid unnecessary allocation and copying. Would you post an example version of methodX that causes the problem? If I can reproduce the issue, I might be able to be more helpful.
