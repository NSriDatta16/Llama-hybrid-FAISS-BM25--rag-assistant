[site]: crossvalidated
[post_id]: 451289
[parent_id]: 451282
[tags]: 
I understand that you have real data from the financial market and you want to estimate the Hurst exponent $H$ . The estimative of $H$ is not trivial and there are several methods that can be used to achive this. Let $X$ be the data you collect from the financial market. In most methods you apply the method to the log return which is $log(X_t/X_{t-1})$ . A very small number of methods you apply the method to $log(X_t)$ (for instance DFA and some methods based on frequency) The classical method used to estimate $H$ is the so-called R/S method . However, due to the bias that it created around $H=0.5$ I believe that today it is used only to comparison purposes. In the R/S you use the log return presented above. I am not sure about the method based on wavelets, but I believe that you must introduce the $log(X_t)$ , but maybe you should check the help of this function in matlab. A long time ago, I worked in this field (mainly exploring the idea of the rolling sample approach). Some of my papers are ones of the most cited in the literature: The Hurst exponent over time: testing the assertion that emerging markets are becoming more efficient DO Cajueiro, BM Tabak Physica A: Statistical Mechanics and its Applications 336 (3-4), 521-537, 2004 (375 citations) Ranking efficiency for emerging markets DO Cajueiro, BM Tabak Chaos, Solitons & Fractals 22 (2), 349-352, 2004 (217 citations) Are the crude oil markets becoming weakly efficient over time? A test for time-varying long-range dependence in prices and volatility BM Tabak, DO Cajueiro Energy Economics 29 (1), 28-36, 2007 (187 citations) At that time, we also introduced an idea that we called V/S: Cajueiro, D. O. and Tabak, B. M. The rescaled variance statistic and the determination of the Hurst exponent. Mathematics and Computers in Simulation 70, 172 -179, 2005. (75 citations) The codes (I used) are [here][2]. I believe that most of them were implemented in Matlab. You may eventually want to use this code to compare to your results. In these codes, you only have to enter the data (put in the same directory of the code) and the code makes the necessary transformations. If you want to test the method, start with synthetic functions such as (the most common): 1) The random walk. 2) The weierstrass function. 3) ARFIMA The fractal brownian motion is too complicated to a start. About Monte Carlo, the comment provided by @mlofton is correct. Monte Carlo: 1) Choose H (a fixed value of H). 2) Fix the size of the data (for instance $n$ ) and generate $m$ samples of it. So, in the end you get $m$ time series with size $n$ . 3) Estimate H using the method of your choice for each sample of size $n$ . In the end, you have got $m$ estimates of H. 4) Now you can plot the distribution or to evaluate the mean.
