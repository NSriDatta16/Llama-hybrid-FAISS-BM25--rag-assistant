[site]: stackoverflow
[post_id]: 3937275
[parent_id]: 3930828
[tags]: 
We have encountered a similar issue when having 4 fields organized in two horizontal managers. A scroll down from the upper right field brought us to the upper left rather than the bottom right, since the movement first scrolled inside the horizontal manager. We ended up implementing our own Manager for adding and positioning the fields (instead of the horizontal managers), then overriding the Manager's navigationMovement function, like explained in this tutorial , to control which field gets the focus depending on the movement. For example: if (dx Basically dx is positive/negative depending on the move in the horizontal line and dy is positive/negative depending on the move in the vertical line. Hope this helps, if you find a better way I'd be very happy to learn about it since this is quite cumbersome... EDIT - CODE: I added some code sample, however we only have 4 buttons so navigation is different than what you are looking for. We Create the manager in the screen and add each field to it, and add the Manager to the screen. We have 2 methods we override in Manager, sublayout and navigationMovement. The sublayout function is responsible for layouting your buttons, notice you have to explicitly set the x and y position, it is a good idea to use the Display.getWidth when determining the position so it keeps the same proportions on the different screens. protected void sublayout(int width, int height) { int count = getFieldCount(); Field field; for (int i = 0; i For navigationMovement, use the value of dx and dy and the index of the field that currently has focus to determine the next field to receive focus. If there should be no focus change simply return false without changing the focus, for example when moving left from a leftmost field you probably want to stay on the same field and not wrap around. public boolean navigationMovement(int dx, int dy, int status, int time) { int focusedIndex = getFieldWithFocusIndex(); if (dx 0) { getField(focusedIndex + 1).setFocus(); } else if (dy 0) { getField(focusedIndex + 2).setFocus(); } else return false; return true; } I hope this helps :)
