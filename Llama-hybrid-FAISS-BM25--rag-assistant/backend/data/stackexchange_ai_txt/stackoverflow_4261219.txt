[site]: stackoverflow
[post_id]: 4261219
[parent_id]: 
[tags]: 
Correct OOP Structure for a Dominion AI Player

I've been tinkering around trying to make an AI player for the popular card game, Dominion (http://www.boardgamegeek.com/boardgame/36218/dominion). If you are not familiar with the game, it is basically a very streamlined cousin of Magic: The Gathering, where there is a large-ish library of cards with different rules on them. Over the course of a game, players buy these cards and incorporate them into their deck. I am interested in this game from a machine learning perspective - I want to pit bots against each other, have them play millions of games, and try to datamine insights that will make them play better. I am unsure how to separate the rules of the game (the verbatim instructions printed on each card) from the core AI decision-making logic. The obvious path that I have started down is creating a class for each Card, and putting both rules and AI stuff in the same place. This is sort of gross - but it seems like the path of least resistance. But maybe it is best for each card to support some sort of interface and then have AI components code against these? Is there a "Correct" OOP design for this? Or several reasonable possibilities?
