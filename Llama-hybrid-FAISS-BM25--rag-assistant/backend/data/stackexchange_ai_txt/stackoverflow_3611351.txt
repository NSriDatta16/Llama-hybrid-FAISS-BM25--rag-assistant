[site]: stackoverflow
[post_id]: 3611351
[parent_id]: 3610891
[tags]: 
In terms of organizing the code, if you don't want an external library like AutoMapper, you can use a mixin-like scheme to separate the code out like this: class Program { static void Main(string[] args) { var d = new Defect() { Category = "bug", Status = "open" }; var m = new DefectViewModel(); m.CopyPropertiesFrom(d); Console.WriteLine("{0}, {1}", m.Category, m.Status); } } // compositions class Defect : MPropertyGettable { public string Category { get; set; } public string Status { get; set; } // ... } class DefectViewModel : MPropertySettable { public string Category { get; set; } public string Status { get; set; } // ... } // quasi-mixins public interface MPropertyEnumerable { } public static class PropertyEnumerable { public static IEnumerable GetProperties(this MPropertyEnumerable self) { return self.GetType().GetProperties().Select(property => property.Name); } } public interface MPropertyGettable : MPropertyEnumerable { } public static class PropertyGettable { public static object GetValue(this MPropertyGettable self, string name) { return self.GetType().GetProperty(name).GetValue(self, null); } } public interface MPropertySettable : MPropertyEnumerable { } public static class PropertySettable { public static void SetValue (this MPropertySettable self, string name, T value) { self.GetType().GetProperty(name).SetValue(self, value, null); } public static void CopyPropertiesFrom(this MPropertySettable self, MPropertyGettable other) { self.GetProperties().Intersect(other.GetProperties()).ToList().ForEach( property => self.SetValue(property, other.GetValue(property))); } } This way, all the code to achieve the property-copying is separate from the classes that use it. You just need to reference the mixins in their interface list. Note that this is not as robust or flexible as AutoMapper, because you might want to copy properties with different names or just some sub-set of the properties. Or it might downright fail if the properties don't provide the necessary getters or setters or their types differ. But, it still might be enough for your purposes.
