[site]: stackoverflow
[post_id]: 2721841
[parent_id]: 2721785
[tags]: 
Where did the array originally come from? I assume it came from a database or from some other "predictable" data source? In this case you can simply pass the reference to that data (a primary key from the database for example) via the URL when linking to the second page. If you don't have enough information to do this you may need to re-think your design. Having one view access the content of another distinct view would be a bad idea. You can of course create view fragments (just a PHP file you 'include' in your other templates) to minimize code duplication. I'm not familiar with how CodeIgniter works but this is just general web development logic really. EDIT What should happen is that your form submits itself to your controller. Your controller then inspects the POST data and decides what selection the user made from the list. It then redirects to the second controller, passing a parameter in the URL so that the second controller can look up the item from the database. A rudimentary example, not using your specific use-case, just some semantic pseudo-code. I hope you can follow along here. The example is a fictional multi-language book store where the user selects a language before seeing a list of books in that language. The framework code is purely fictional. I've omitted everything including sanity checking purely for brevity so you can see only the parts that make this workflow happen: Language selection controller class LanguagesController ... { public function selectLanguage() { // If the user submitted the form, collect the language_id // and redirect to the BooksController if ($this->_request->get('language_id')) { return $this->_response->redirect(array( 'controller' => 'BooksController', 'action' => 'viewBooks', 'language_id' => $this->_request->get('language_id') )); } $languages = Language::findAllWithBooksInStock(); $this->_view->set('languages', $languages); } } Language selection form Select a language id); ?>"> name); ?> The BooksController which gets the language_id value class BooksController ... { public function viewBooks() { $language = Language::findById($this->_request->get('language_id')); $books = Book::findAllWithLanguage($language); $this->_view->set('language', $language) ->set('books', $books); } } Now the BooksController can implement a view that displays all the books in the language selected at the previous controller. All that's been done to achieve this was to pass the primary key for the language in the URL between the two controllers. PS: Don't use sessions for something like this. That's a bad habit to get into. Be RESTful.
