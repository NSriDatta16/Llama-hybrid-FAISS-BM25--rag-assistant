[site]: stackoverflow
[post_id]: 4525147
[parent_id]: 
[tags]: 
django using columns from other models without inheritance

am not entirely sure if what am about to do is programmically possible. Although if this works, It will help me a lot organize my code. class AuditColumns(models.Model): created_at=models.DateField("Created at") created_by=models.ForeignKey(User, db_column="created_by", related_name="%(app_label)s_%(class)s_y+") updated_at=models.DateTimeField("Updated at") updated_by=models.ForeignKey(User, db_column="updated_by", null=True, blank=True, related_name="%(app_label)s_%(class)s_y+") class Meta: abstract = True def return_audit_columns(self): return self.created_at, self.created_by, self.updated_at, self.updated_by class Choice(models.Model): choice=models.CharField(max_length=200) def __init__(self): self.created_at, self.created_by, self.updated_at, self.updated_by=AuditColumns.return_audit_columns(self) the code above does not work, it was my attempt or what I wish to do. Basically, I have the class AuditColumns which contain this set of columns and I wish to use them in different models across my projects. I do not want the Choice model to inherit from AuditColumns because am going to use the same technique to include other columns from other sources into my Choice class. off course what I wrote above is not practical either because I will have to repeat the column names every time I want to include the AuditColumns in one of the models across my project. Is what I want to do achievable or not?
