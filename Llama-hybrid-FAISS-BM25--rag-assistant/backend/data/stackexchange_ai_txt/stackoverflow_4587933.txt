[site]: stackoverflow
[post_id]: 4587933
[parent_id]: 4587878
[tags]: 
Calendar is a very expensive object (one of the most expensive date objects in any library I know of). Calling getInstance() is very expensive too. If you have to use Calendar you could look at caching it. It really depends on why you need it. The most efficient way to obtain and store the current time is using a long primitive. long currentDateTime = System.currentTimeMillis(); If you use GMT time internally, you can store the current day with int currentDay = (int)(System.currentTimeMillis() / 86400000); EDIT: It is worth testing on your machine, while getInstance() is relatively expensive but it is still fairly fast. On my old box it takes ~20 micro-seconds. On a fast machine currentTimeMillis() can take 140 nano-seconds. The following prints Calendar.getInstance() took on average 20088 ns. java.util.GregorianCalendar[time=1294086899359 ... deleted ...] System.currentTimeMillis() took on average 938 ns. 1294086899377 code int runs = 10000; long start = System.nanoTime(); Calendar cal = null; for(int i=0;i
