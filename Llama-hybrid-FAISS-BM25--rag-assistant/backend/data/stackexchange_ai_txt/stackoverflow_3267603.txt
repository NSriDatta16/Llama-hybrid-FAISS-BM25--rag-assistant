[site]: stackoverflow
[post_id]: 3267603
[parent_id]: 3266102
[tags]: 
Why? I cannot speak on behalf of the designers of C#, but I can make educated speculation: They wanted to see just how big of a deal it is before taking the time to add another feature and yet another rule to the language. They could not find a sufficiently elegant-looking way to do this. That said, here is how I would allow values (when a set accessor is available, of course): public string MyProp {get;set;} = "initial value"; // not valid C# Without making the language any more complex, they could write the rule so that it applies to "[all] properties with set accessors" instead of to "default properties with set accessors": // again, not valid C#: public string MyProp { get { return _MyProp;} set { _MyProp = value; } } = "initial value before being massaged or rejected by the set accessor."; The only downside I see here is that it is ugly. The benefits are that you can concisely specify an initial value for a property with that property instead of in the constructor, and that you can let the value be massaged / checked / whatever via constructor at runtime if you wish.
