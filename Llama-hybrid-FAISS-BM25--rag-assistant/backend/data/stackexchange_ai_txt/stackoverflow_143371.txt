[site]: stackoverflow
[post_id]: 143371
[parent_id]: 143084
[tags]: 
Foo and Bar inherit from FooBarImplementation I'd make a class FooBarImplementation that would implement the common features of Foo and Bar. Foo and Bar would derive from it. But in your code, never ever use the type FooBarImplementation. My Java days are somewhat behind me, but I guess there must be some kind of way to hide FooBarImplementation from the user code (making it protected, or package visible only, depending on your project organization. This way, no user code will mix Foo for a Bar (and vice versa)? class FooBarImplementation { public void doSomething() { /* etc. */ } /* etc. */ } class Foo inherits FooBarImplementation { /* etc. */ } class Bar inherits FooBarImplementation { /* etc. */ } Foo and Bar composed with FooBarImplementation Another possibility would be to make Foo and Bar forward each of their methods to an internal class (again, FooBarImplementation). This way, there's no way the user code could be Foo and Bar. class FooBarImplementation { public void doSomething() { /* etc. */ } /* etc. */ } class Foo { private FooBarImplementation fooBarImplementation = new FooBarImplementation() ; public void doSomething() { this.fooBarImplementation.doSomething() ; } /* etc. */ } class Bar { private FooBarImplementation fooBarImplementation = new FooBarImplementation() ; public void doSomething() { this.fooBarImplementation.doSomething() ; } /* etc. */ } Do NOT make Foo inherits from Bar (or vice versa) Shoudl Foo inherits from Barn, Foo would be a Bar, as far as the language is concerned. Don't do it, you'll lose the difference between the objects, and this is what you don't want. Do not use boolean, and whataver type field This is the worst idea you could come accross. Bjarne Stroustrup warned against this kind of antipattern for C++, and C++ is not all about OOP. So I guess this pattern is even more "anti" for Java... :-)
