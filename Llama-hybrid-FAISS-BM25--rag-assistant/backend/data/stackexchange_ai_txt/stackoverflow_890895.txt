[site]: stackoverflow
[post_id]: 890895
[parent_id]: 
[tags]: 
Using escaped_list_separator with boost split

I am playing around with the boost strings library and have just come across the awesome simplicity of the split method. string delimiters = ","; string str = "string, with, comma, delimited, tokens, \"and delimiters, inside a quote\""; // If we didn't care about delimiter characters within a quoted section we could us vector tokens; boost::split(tokens, str, boost::is_any_of(delimiters)); // gives the wrong result: tokens = {"string", " with", " comma", " delimited", " tokens", "\"and delimiters", " inside a quote\""} Which would be nice and concise... however it doesn't seem to work with quotes and instead I have to do something like the following string delimiters = ","; string str = "string, with, comma, delimited, tokens, \"and delimiters, inside a quote\""; vector tokens; escaped_list_separator separator("\\",delimiters, "\""); typedef tokenizer > Tokeniser; Tokeniser t(str, separator); for (Tokeniser::iterator it = t.begin(); it != t.end(); ++it) tokens.push_back(*it); // gives the correct result: tokens = {"string", " with", " comma", " delimited", " tokens", "\"and delimiters, inside a quote\""} My question is can split or another standard algorithm be used when you have quoted delimiters? Thanks to purpledog but I already have a non-deprecated way of achieving the desired outcome, I just think that it's quite cumbersome and unless I could replace it with a simpler more elegant solution I wouldn't use it in general without first wrapping it in yet another method. EDIT: Updated code to show results and clarify question.
