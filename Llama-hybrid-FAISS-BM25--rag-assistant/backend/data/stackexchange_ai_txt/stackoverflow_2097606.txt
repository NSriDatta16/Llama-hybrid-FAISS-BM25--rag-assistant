[site]: stackoverflow
[post_id]: 2097606
[parent_id]: 2097567
[tags]: 
One of the problems with Hibernate is that it injects its own Collection implementations into your domain class, causing problems if you try to send your class over the wire using serialization (e.g. from server to client). In your above example I would question the need to provide storage-specific sub-classes: Do / Should the classes really contain state pertaining to the way in which they were stored? i.e. Is this a concept central to the class and hence worthy of using up your "one shot" at inheritance (in Java that is)? I would argue that a more useful inheritance hierarchy in your example would be something like: Animal Mammal Dog Cat In addition, with the design you propose you might run into problems if, for example you wish to save a Dog instance to Hibernate but don't know whether the Dog is a HibernateDog , GAEDog , etc and have to perform checks / downcasting at this point.
