[site]: stackoverflow
[post_id]: 4901315
[parent_id]: 2394405
[tags]: 
VB.Net Code for this is available here , however since you asked for C# here is a C# translation of their Deskew class (note: Binarize (strictly not necessary, but works much better) and Rotate are exercises left to the user). public class Deskew { // Representation of a line in the image. private class HougLine { // Count of points in the line. public int Count; // Index in Matrix. public int Index; // The line is represented as all x,y that solve y*cos(alpha)-x*sin(alpha)=d public double Alpha; } // The Bitmap Bitmap _internalBmp; // The range of angles to search for lines const double ALPHA_START = -20; const double ALPHA_STEP = 0.2; const int STEPS = 40 * 5; const double STEP = 1; // Precalculation of sin and cos. double[] _sinA; double[] _cosA; // Range of d double _min; int _count; // Count of points that fit in a line. int[] _hMatrix; public Bitmap DeskewImage(Bitmap image, int type, int binarizeThreshold) { Size oldSize = image.Size; _internalBmp = BitmapFunctions.Resize(image, new Size(1000, 1000), true, image.PixelFormat); Binarize(_internalBmp, binarizeThreshold); return Rotate(image, GetSkewAngle()); } // Calculate the skew angle of the image cBmp. private double GetSkewAngle() { // Hough Transformation Calc(); // Top 20 of the detected lines in the image. HougLine[] hl = GetTop(20); // Average angle of the lines double sum = 0; int count = 0; for (int i = 0; i hl[count - 1].Count) { hl[count - 1].Count = _hMatrix[i]; hl[count - 1].Index = i; int j = count - 1; while (j > 0 && hl[j].Count > hl[j - 1].Count) { HougLine tmp = hl[j]; hl[j] = hl[j - 1]; hl[j - 1] = tmp; j -= 1; } } } for (int i = 0; i
