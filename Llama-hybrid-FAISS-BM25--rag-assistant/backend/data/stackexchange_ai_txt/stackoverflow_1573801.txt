[site]: stackoverflow
[post_id]: 1573801
[parent_id]: 1573182
[tags]: 
Part of the problem is that you're thinking of this as a four-step process with three round trips to the server required. If you really think this is a single workflow, and the thing the user is most likely to do, then the best speedup is to collect as much info in the first interaction as possible to reduce the round trips. This may include allowing the user to check a box saying she wants to follow this path, so you don't have to return to the user in between steps, or allowing her to enter a guess at the friends' names that you can process the first time around, or pre-loading the name list the first time. The way you've outlined the code works best if this is just one of many paths the user might follow; the multiple round trips are required because at each interaction, you're finding out what the user wants, and a different answer would have sent you in a different direction. This is when the loosely coupled code style you are disparaging really shines. It looks like each step is disconnected from what went before because the user's actions are driving the activity. So, the real question is whether the user has a choice at the beginning that determines the direction your code goes. If not, then you want to optimize the path you know (or strongly predict) the interaction is going to go. On the other hand, if the user interactions drive the process, then decoupling the steps and reacting to each interaction is the right thing, but you'd expect many more divergent possibilities.
