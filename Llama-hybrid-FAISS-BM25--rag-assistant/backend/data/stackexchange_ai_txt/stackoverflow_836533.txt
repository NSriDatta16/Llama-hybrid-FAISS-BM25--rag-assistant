[site]: stackoverflow
[post_id]: 836533
[parent_id]: 835665
[tags]: 
I'm in the vision business, and I simply upload the images to the GPU using OpenGL. (typically 20x 2048x2000x8bpp per second), a bmp per texture, and let the videocard scale (win32, Mike Lischke's opengl headers) Upload of such an image costs 5-10ms depending on exact videocard (if not integrated and nvidia 7300 series or newer. Very recent integrated GPUs might be doable also). Scaling and displaying costs 300us. Which means customers can pan and zoom like crazy without touching the app. I draw an overlay (which used to be a tmetafile but is now an own format) on top of it. My biggest picture is 4096x7000x8bpp which shows and scales in under 30ms. (GF 8600) A limitation of this technology is max texture size. It can be resolved by fragmenting the picture into multiple textures, but I haven't bothered yet because I deliver the systems with the software. (some typical sizes: nv6x00 series: 2k*2k but uploading is just about break even compared to GDI nv7x00 series: 4k*4k For me the baseline cards. GF7300's are like $20-40 nv8x00 series: 8k*8k ) Note that this might not be for everybody. But if you are in the lucky situation to specify hardware limits, it might work. The main problem are laptops like Thinkpads, the GPUs of which are older than the avg laptop, which are in turn often a generation behind Desktops. I chose OpenGL over DirectX because it is more static in time, and easier to find non-game related examples.
