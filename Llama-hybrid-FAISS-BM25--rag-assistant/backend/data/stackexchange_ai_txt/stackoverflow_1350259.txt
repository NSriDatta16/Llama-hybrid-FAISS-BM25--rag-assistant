[site]: stackoverflow
[post_id]: 1350259
[parent_id]: 1350231
[tags]: 
"If you could change the syntax or semantics of your programming language of choice what would you add, change, or remove to improve the "intuitiveness" of it? " Programming is hard. Really hard. Syntax changes don't matter much. IDE's are irrelevant to the fundamental challenge of programming. The thing that is often baffling is the semantics of the language. I don't know what "intuitive" means with respect to a thing as abstract as a programming language. Indeed, "intuition" is probably a bad thing. Coming to a programming language with intuition means preconceived notions, biases and intellectual junk will take over. I would never expect to "just get it" for anything on any level anywhere. Programming requires clear thinking -- not "intuition" -- not "expectation". The only thing we can ever do is read the manual and understand the unique, distinct, novel semantics of the new thing we're confronted with. I do know this: elegant simplicity is essential. Orthogonality of features. Clarity. Precision. Absence of exceptions or special cases. Above all, simplicity. Layering on language features is fundamentally bad. Covering language problems by layering in a complex IDE is worse. See http://www.cs.utexas.edu/~EWD/transcriptions/EWD08xx/EWD854.html "when faced with something new and unfamiliar we try to relate it to what we are familiar with. In the course of the process we invent the analogies that enable us to do so. It is clear that the above way of trying to understand does not work too well when we are faced with something so radically new, so without precedent, that all analogies we can come up with are too weak and too shallow to be of great help. A radically new technology can create such circumstances and the wide-spread misunderstanding about programming strongly suggests that this has happened with the advent of the automatic computer. " In short, "intuition" and "intellectual baggage" is the problem of the programmer. The best way to understand a technology is to approach it as something fresh, new and otherwise unknown. Bottom Line . The complexity is inherent. You have two choices. Develop intellectual tools (i.e., abstraction, summarization, etc.) to cope with it. Get a job in another field. Asking for the inherently complicated world of computing to morph into something any one person finds "intuitive" can't happen. Computing is too complicated to be "intuitive".
