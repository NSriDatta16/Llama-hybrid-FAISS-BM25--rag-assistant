[site]: stackoverflow
[post_id]: 2907375
[parent_id]: 2907259
[tags]: 
Looking at your code, it looks like you're just trying to create a set of objects that really just put the enum PostVotePointValue into some sort of list. I.e. you already have what you need defined in just the enum itself. I would encourage you to not define the same information in two places (this data store you are asking for and the enum). This is common mistake I see people make. They create a lookup table/list, then create an enum that mirrors the rows of the table and that means they have to modify two places for any change to the list. If PostVotePointValue isn't an enum but just some constants or if there is more info you are planning on packing in, then this isn't relevant. Here's some examples of how to work with Enums as 'lists' from http://www.csharp-station.com/Tutorials/Lesson17.aspx // iterate through Volume enum by name public void ListEnumMembersByName() { Console.WriteLine("\n---------------------------- "); Console.WriteLine("Volume Enum Members by Name:"); Console.WriteLine("----------------------------\n"); // get a list of member names from Volume enum, // figure out the numeric value, and display foreach (string volume in Enum.GetNames(typeof(Volume))) { Console.WriteLine("Volume Member: {0}\n Value: {1}", volume, (byte)Enum.Parse(typeof(Volume), volume)); } } // iterate through Volume enum by value public void ListEnumMembersByValue() { Console.WriteLine("\n----------------------------- "); Console.WriteLine("Volume Enum Members by Value:"); Console.WriteLine("-----------------------------\n"); // get all values (numeric values) from the Volume // enum type, figure out member name, and display foreach (byte val in Enum.GetValues(typeof(Volume))) { Console.WriteLine("Volume Value: {0}\n Member: {1}", val, Enum.GetName(typeof(Volume), val)); } } } You should be able to adapt the above into an approach that will give you a list that you can use for databinding if you need it.
