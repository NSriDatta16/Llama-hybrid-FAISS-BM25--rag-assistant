[site]: stackoverflow
[post_id]: 3338741
[parent_id]: 3336859
[tags]: 
I assume that you will not only be working with one object of one type here. I would lay out the data that you are working with and try to see how you can lay it out in memory in order to do data-driven programming. A good layout in memory should reflect the way that you store the data in your classes and how the classes are layed out in memory. Once you have that basic design structured (shouldn't take more than a napkin), I would begin organizing the objects into lists dependent on the operations that you plan to do on the data. If you plan to do X() on a collection of objects { Y } in the subset X, I would probably make sure to have a static array of Y that I create from the beginning. If you wish to access the entire of X occasionally, that can be arranged by collecting the lists into a dynamic list of pointers (using std::vector or your favorite choice). I hope that makes sense, but once implemented it gives simple straight solutions that are easy to understand and easy to work with.
