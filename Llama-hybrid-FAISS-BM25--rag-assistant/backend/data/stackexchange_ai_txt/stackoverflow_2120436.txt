[site]: stackoverflow
[post_id]: 2120436
[parent_id]: 2120354
[tags]: 
Although this does not answer your question (jspcal answers it correctly), a quick solution that might fit your needs would to use the Singleton design pattern . Here is an alternative: 'http://www.foo.com/', 'db_user' => 'dbname' ); /** * Options container * @var array */ private $options = array(); /** * Don't allow outside initialization */ private function __construct() { // Set options (could load from external source) $this->options = array( 'test' => 'test string', 'ip' => $_SERVER['REMOTE_ADDR'] ); } /** * Disable cloning */ private function __clone() { } /** * Get new instance of class */ public function getInstance() { if ( null === self::$instance ) { self::$instance = new self(); } return self::$instance; } /** * Retrieve value with constants being a higher priority * @param $key Key to get */ public function __get( $key ) { if ( isset( $this->constants[$key] ) ) { return $this->constants[$key]; } elseif ( isset( $this->options[$key] ) ) { return $this->options[$key]; } } /** * Set a new or update a key / value pair * @param $key Key to set * @param $value Value to set */ public function __set( $key, $value ) { $this->options[$key] = $value; } } /////////////////////////////////////////////////////// //index.php // works $config = Config::getInstance(); echo $config->url; echo $config->test; echo $config->ip; Updated: Not sure if you want the constants / options with that kind of priority. It's just an example.
