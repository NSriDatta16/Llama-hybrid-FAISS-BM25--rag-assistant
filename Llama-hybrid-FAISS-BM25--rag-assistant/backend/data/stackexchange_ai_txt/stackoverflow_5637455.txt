[site]: stackoverflow
[post_id]: 5637455
[parent_id]: 5636812
[tags]: 
If you're working with non-numerical values, there is no obvious way to do a reverse sort. Backbone makes use of the _.sortBy() and _.sortedIndex() methods from Underscore to order the models based on the comparator, and these methods automatically sort in ascending order. The naive way to do this would be to use chapters.pluck('title').reverse() , as the result of pluck will be an array. But calling reverse on some Collection methods will reverse the Collection models in place, so next time you call it, the models will be back in ascending order. You could always do something like: var results = [], titles = chapters.pluck('title'); for(var i=0, len=titles.length; i This would not affect the models array in your Backbone collection, as it would create a completely new results array in memory, but retain references to the original models, so calling things like save would still update the Collection state. But that's not very elegant, and creates a lot of extra coding throughout your project any time you want to reverse the results. I think we can do better. In order to make this work, you'll need to perform a bit of unwieldy JavaScript ninjary in your comparator method to make this work - note this is untested: chapters.comparator = function(chapter) { var alphabet = '0123456789abcdefghijklmnopqrstuvwxyz', title = chapter.get('title').toLowerCase(), inverse_title = '', index; for(var i=0, len=title.length; i This concept probably needs improving to take into account symbols, etc., but essentially it inverts the comparator string in such a way that "Z" becomes "0", "Y" becomes "1", etc., which should produce the reverse sort you're after.
