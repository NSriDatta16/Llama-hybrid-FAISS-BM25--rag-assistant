[site]: stackoverflow
[post_id]: 4703244
[parent_id]: 4702904
[tags]: 
What is better and why ? Explicit typing information is always better unless you just can't use it for some reason (see below). It allows the compiler to much more stringently validate the code and will catch many errors at compile time that would otherwise cause your app to crash at runtime. A long, long, time ago, everything in the APIs used id . This proved to be a complete pain in the butt; fragile and led to many crashes that would have been caught with specific types. So, it was changed. (This was ~1994). What is better in such situations as the class init method and usual variables in a code ? For init , you have no choice but to use the generic (id) return type. Objective-C does not support either co-variant or contra-variant declarations, nor is there a mechanism for generalizing the declaration of init while also providing support for specific type checking. Same goes for retain , objectAtIndex: , addObject: and many other methods that take or return one of many kinds of objects (or take 'em as arguments). And, no, there is absolutely no performance difference whatsoever between id and, say, NSView* . can you give an example when explicit typing will cause a problem please? If you wrote: - (MyClass *) init; And in a subclass: - (MySubclass *) init; You'd get compiler warnings out the wazoo most likely or you'd have to typecast out the wazoo.
