[site]: stackoverflow
[post_id]: 899581
[parent_id]: 899414
[tags]: 
I tend to look it more from a pragmatic and realistic standpoint: public class Test1 { private int a = 1; public static void main(String s[]) { System.out.println((new Test1()).a); System.out.println((new Test1()).getA()); System.out.println((new Test2()).getA()); } public int getA() { return a; } } class Test2 extends Test { private int a = 2; public int getA() { return a; } } What syntax would you propose Test1 use to access private member a in Test2 . When Test1 is written, Test2 may not even exist. As well, a base-class (super-class) doesn't know when it has been inherited from. To allow a base-class to know when it has been inherited, you would have to be able to modify the base-class when inheriting from it. Are you suggesting that I should somehow modify my local copy of ArrayList when I write: class MyArrayList extends ArrayList And what happens the day I decide to run my code on your computer, do you get my modified copy of ArrayList that knows about MyArrayList , or do I modify the copy on your computer somehow? Could these issues be overcome somehow? Certainly. Is there any value in allowing it? None that I can see.
