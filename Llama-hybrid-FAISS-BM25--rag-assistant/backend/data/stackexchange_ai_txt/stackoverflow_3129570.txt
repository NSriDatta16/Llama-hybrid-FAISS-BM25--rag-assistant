[site]: stackoverflow
[post_id]: 3129570
[parent_id]: 3001627
[tags]: 
I'm speaking only from experience; YMMV. My team was unsuccessful at making agile work. IMO, it was because: The very first time the dev team would hear about a project, it was in the form of a requirements document and a deadline. Stakeholders were often reluctant to take time to look at the result of a sprint's work, thus they would not take action between sprints if they thought the project was headed in the wrong direction. When we showed stakeholders our work, they generally just OK'd it. They would talk about what they would like, to which we would reply "That can be done in about X amount of time," to which they would reply, "Well no need to go over the deadline for that." The deployment process was long and complicated, discouraging frequent deployments. So in practice, we often deployed things when a 2-month project was done, not at the end of a sprint. Our sprint planning meetings were long and inefficient. It seems everyone was confused about what scrum is (and about what our process was), except for the scrum evangelists. So I'm pretty sure we were doing it all wrong. Don't you do it wrong, too. Some things that have sped us up, which we continue to use: automated builds that work on everyone's machine (HUGE help!) a formal arrangement for our code repository learning how to apply apply abstraction mechanisms to UI code refactoring unit and integration tests continuous integration I guess you could say that our code is more agile, though our methodology is less agile. Whereas before we could not keep pace with demands, now we can. (I'm not saying agile is bad; I'm just reporting my experience. Also, please understand that I do not choose what methodology we use.)
