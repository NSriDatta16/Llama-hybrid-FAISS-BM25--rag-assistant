[site]: stackoverflow
[post_id]: 2343720
[parent_id]: 1431980
[tags]: 
To evaluate Java, you need all the semantic analysis that goes along with it ("what is the scope of this identifier? What type does it have?") as well as an interpreter. To get that semantic analysis, you need more than just an AST: you need full name resolution (symbol table building) and type resolution (determination of expression types and validation that expressions are valid in the context in which they are found), as well as class lookup (which actual method does foo refer to?) With that, you can consider building an interpreter by crawling over the trees in execution order. You'll also need to build a storage manager; you might not need to do a full garbage collector, but you'll need something. You'll also need an interpreter for .class files if you really want to run something, which means you need a parser (and name/type resolution for the class files, too). I don't know if Eclipse has all this (at least the storage manager part you can get for free :). I'd sort of expect it to, given that its original design was to support Java development, but I've been sorely disappointed by lots of tools over the years. The DMS Software Reengineering Toolkit is a program analysis/transformation too that handles many languages. It has a full Java front end including parsing, AST building, symbol table construction and name resolution, type resolution, builds call graphs (needed to resolve virtual function calls), and has a .class file reader to boot with name resolution. So it would be a good foundation for building an interpreter. DMS can construct arbitrary ASTs, too, and then generate source code from them, so it would handle the code generation end, too, just fine. [The reason DMS exists is the "sorely disappointed" part].
