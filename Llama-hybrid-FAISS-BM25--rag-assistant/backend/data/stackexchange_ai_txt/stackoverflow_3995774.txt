[site]: stackoverflow
[post_id]: 3995774
[parent_id]: 3995673
[tags]: 
As you have realised there is a great deal of potential in creating a very elegant OOP application here. Your basic needs - as much as I can see from the information you have share - are: 1) A module that recognises the type of file 2) A module that can read the file and load the data into a common structure (is it going to be common structure??) this consists of handlers 3) A module that can visualise the data For the first one, I would recommend two patterns: 1a) Factory pattern: File is passed to a common factory and is parsed to the point that it can decide the handler 2a) Chain-of-responsibility: File is passed to each handler which knows if it can support the file or not. If it cannot passes to the next one. At the end either one handler picks it up or an error will occur if the last handler cannot process it. For the second one, I recommend to design a common interface and each handler implements common tasks such as load, parse... If visualisation is different and specific to handlers then you would have those set of methods as well. Without knowing more about the data structure I cannot comment on the visualisation part. Hope this helps. UPDATE This is the factory one - a very rough pseudocode: Factory f = new Factory(); ILogParser parser = f.GetParser(fileName); // pass the file name so that factory inspects the content and returns appropriate handler CommonDataStructure data = parser.Parse(fileName); // parse the file and return CommonDataStructure. Visualiser v = new Visualiser(form1); // perhaps you want to pass the refernce of your form v.Visualise(data); // draw pretty stuff now!
