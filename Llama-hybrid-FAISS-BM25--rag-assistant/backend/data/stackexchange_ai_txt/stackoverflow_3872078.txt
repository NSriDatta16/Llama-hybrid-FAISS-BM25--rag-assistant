[site]: stackoverflow
[post_id]: 3872078
[parent_id]: 3871641
[tags]: 
Action filters are the way to go First of all this will heavily depend on the storage system of your temporary saved data. Action filter should check this store and see whether step 1 data exists. If it doesn't you can always add an error to ModelState thus make it invalid. Your Step 2 code would therefore look like this: [HttpGet] [CheckExistingData] public ActionResult Step2(Stuff s) { if (!this.ModelState.IsValid) { return RedirectToAction("Step1"); } return View(s); } So. Your filter should check for existing data and either: fill up Stuff parameter or add model state error and keep parameter null Data consolidation The way that you've written redirect to action (in step 1 POST) to just provide a complex object is not a good way of doing it. You should consolidate data storage, so no matter where your user came to step 2, filter would always work the same. In your Step 1 POST you should save data to this particular storage and just redirect to Step 2. You have two scenarios of getting to Step 2: From step 1 From anywhere after data has been saved This way, your step 2 would work the same for both scenarios. And you could create an arbitrary number of steps in your wizard, and the same process would still work the same.
