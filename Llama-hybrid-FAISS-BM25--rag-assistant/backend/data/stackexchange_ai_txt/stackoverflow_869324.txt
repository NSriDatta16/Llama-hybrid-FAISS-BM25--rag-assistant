[site]: stackoverflow
[post_id]: 869324
[parent_id]: 
[tags]: 
How to adapt agile to different companies? An MBA thesis

My master's thesis is to look at how to apply agile. There is an awful lot of corporate selling of agile - lots of management consultants selling their brand as 'best'. I'm not interested whether XP , Scrum , Crystal Clear , Agile-CMMI , Six Sigma or any other brand/variant is best. I'm interested in what real, active developers (i.e. you guys) actually apply as agile. What I've investigated is how to tailor agile to different organisational requirements. From research into how different organisations apply agile I've developed the following guidelines - a recipe for what agile variations should be applied in what situations: Larger and more distributed or more flexible teams need stricter coding and testing standards, small teams can (and should) use less. Process documentation should be minimal, real-time and current. Detailed statistical control indicators are an unnecessary overhead: early release of incomplete software is a better indication of progress. Ideally developers should be close to the customer with no specialised intermediate roles. Additional roles should only be used if customers are specialised in a way that stops developers from also being users. Iterations should be flexible unless it benefits coordination of releases with other departments or other processes. Developers should be able to easily and regularly communicate but meetings should be infrequent (monthly and weekly, rather than daily). Pair programming should only be used for training and investigational tasks. These guidelines are a starting point only: continuous improvement should be used to further tailor the agile variant to the exact circumstances. These factors change when applied in an organisation with existing traditional (i.e. BDUF or waterfall ) models, where agile teams must either coexist with or be adapted from teams using non-agile methods: Process documentation with sign off and structured steps will help other teams track the project. Statistical indicators (like velocity) can help reassure non-agile teams that the process is under control. Fixed iterations will help co-ordination across teams. These additional guidelines will help agile co-exist with traditional models, but they provide additional overhead and restrictions. What I want to know is what you - the people who write software, not agile consultants - think of this framework. What do you think is accurate? What do you think is wrong? What would you change? What have I missed? Most importantly: why? I've added a bounty to this to offer an extra incentive to answer what is a rather long question. The bounty will go to whoever gets the most votes from the SO community - I realise that there's no single right answer, but I'm interested in what's closest to the community's consensus.
