[site]: stackoverflow
[post_id]: 2168565
[parent_id]: 
[tags]: 
Strongly typed object from string type name (C#)

if you take a look at the following code, you will (hopefully) see what I am trying to archieve. Basically this code does: A query for generic storag items (they store their type as string) If the item is a subclass of SearchCriteria, create the correct instance Add the instance to the list (SearchCriteria is superclass) Not very elegant is, of course, the pseudo-switch case, which I would have to update for all different criteria I create. So, my question, is there a "generic" way to create an instance which is strongly typed using a string as "source" for the type. I know I can use Reflection to create an instance, but this is of type object, so I would not be able to add it to the list. Oh, just got an idea... Create object using reflection, cast it to supertype (SearchCrit), add to list. Real type should still be the "correct subtype" I hope... Will try it, and update this post with results. Any better ideas? Chris private IList _searchCriteriaAll; public IList SearchCriteriaAll { get { if (_searchCriteriaAll == null) { _searchCriteriaAll = new List (); var tN = typeof (SearchCriteria).ToString(); foreach (var o in DataStorage.LinkedObjects) { if (tN.StartsWith(o.TypeName)) { if (o.TypeName == typeof(StringSearchCriteria).ToString()) _searchCriteriaAll.Add(new StringSearchCriteria(o)); } } } return _searchCriteriaAll; } } EDIT: Thanks for the tips, the "correct" way would definitly be the factory pattern. I will look into that. For now, I use this hack, because the subclasses are so small, I dont want a factory for each one.. (and this place is currently the only one with such a "fancy" feature) private IList _searchCriteriaAll; public IList SearchCriteriaAll { get { if (_searchCriteriaAll == null) { _searchCriteriaAll = new List (); var tN = typeof (SearchCriteria).ToString(); foreach (var o in DataStorage.LinkedObjects) { if (tN.StartsWith(o.TypeName)) { var newO = Activator.CreateInstance(typeof(SearchCriteria).Assembly.FullName, o.TypeName); var newCrit = newO.Unwrap() as SearchCriteria; newCrit.DataStorage = o; _searchCriteriaAll.Add(newCrit); } } } return _searchCriteriaAll; } }
