[site]: stackoverflow
[post_id]: 3393349
[parent_id]: 3393340
[tags]: 
1) Dynamic memory allocation is from the heap, not the stack. The stack is a per-thread block of memory that also handles local variables and return addresses during function calls. The heap is just one or more blocks of memory allocated from the OS, which the C RTL subdivides as needed to satisfy malloc calls. As for the stack, it's typically of a fixed size because, in a program free of infinite recursion, you should only need a finite amount. If you keep recursing, you'll overflow, which is a good thing in that it's a clean failure. As for growing down in memory, that's an implementation detail of CPU's. 2) Not necessarily. So long as the current allocation of memory from the OS is sufficient, malloc just uses it. Once this is gone, it may cause an additional allocation. I know you want more detail here, but I'm not sure what's useful. I could talk about how the heap is typically implemented as linked lists of free blocks with arena headers that define their size, or how some systems use fixed-size blocks for small allocations to limit fragmentation, or even how memory bubbles are coalesced when no single sufficiently large block is found. However, all of these are implementation details that may well turn out not to apply in your case, at least not exactly.
