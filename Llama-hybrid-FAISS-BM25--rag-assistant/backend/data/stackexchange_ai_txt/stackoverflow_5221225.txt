[site]: stackoverflow
[post_id]: 5221225
[parent_id]: 5215111
[tags]: 
The easiest way to handle setting your "compile path" in Clojure is to use a build tool like Leiningen or Cake to manage your project. Using these tools, you get an idiomatic project structure, all your source code automatically on the compile/class path, and nice command-line tools to handle dependency retrieval, running unit tests and building your projects. Here are some of the basic command-line tasks defined by Leiningen, and thus available to you in any project: classpath Show the classpath of the current project. clean Remove compiled artifacts and jars from project. compile Compile Clojure source into .class files. deps Download all dependencies and place them in the :library-path. help Display a list of tasks or help for a given task. install Install the current project or download the project specified. interactive Enter interactive shell for calling tasks without relaunching JVM. jar Package up all the project's files into a jar file. javac Compile Java source files. new Create a new project skeleton. plugin Manage user-level plugins. pom Write a pom.xml file to disk for Maven interop. repl Start a repl session either with the current project or standalone. run Run a -main function with optional command-line arguments. swank Launch swank server for Emacs to connect. test Run the project's tests. test! Run a project's tests after cleaning and fetching dependencies. uberjar Package up all the project's files and dependencies into a jar file. So you start a new project by running lein new , which generates a standard directory structure for a Clojure project. After you've written your code, you can run lein compile to simply compile your Clojure source, or you can go right to lein jar to package your code as a Jar file. For an executable jar that includes the Clojure language and all dependencies necessary to run your program, use lein uberjar instead. If you don't use these tools, then you need to manage the classpath manually, to include where you store your dependency jars and where your source code lives. I highly recommend using one of the above-mentioned build tools.
