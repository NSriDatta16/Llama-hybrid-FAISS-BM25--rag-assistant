[site]: stackoverflow
[post_id]: 2301561
[parent_id]: 2299082
[tags]: 
You can store your objects in a data set. (You can use memory datasets like TClientDataSet, JVCL's TjvMemoryData or any other TDataSet descendant including full-blown RDBMS) In this way you have solved the following problems: Persistence (storage) - your RDBMS will take care of that. In the case of memory datasets you have methods like Load/SaveToFile Sort - There are simple methods to do this or if you'll choose a SQL backend a simple 'SELECT * FROM PETS ORDER BY NAME' will do your job Filter - you can do any reversible filtering on any field with any operator you like. In the case of memory datasets setting the Filter property to Breed="foo" and the Filtered property to 'True' is enough. In the case of RDBMSes you can achieve it in the same way and/or using a standard SQL: 'SELECT * FROM PETS WHERE BREED='foo' ORDER BY NAME . Also you can use OnFilterRecord event for that. Of course you can clear the filter, reversing the action: Setting the Filter property to 'False' - or - issuing an SQL like: 'SELECT * FROM PETS' (without the WHERE clause) etc. Editing - you have dedicated controls for each data type (including grids for multi-row input). Eg. for the 'Age' field the input is restricted to numbers only. And, of course, you have the OnValidate event where you can do a test if 'Age' is between 0 and 33 (for example). You have all the mechanism in place. Perhaps is better to go on this path rather than to reinvent the wheel.
