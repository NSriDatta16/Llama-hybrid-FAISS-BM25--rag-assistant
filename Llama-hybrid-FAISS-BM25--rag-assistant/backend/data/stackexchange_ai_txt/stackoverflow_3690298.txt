[site]: stackoverflow
[post_id]: 3690298
[parent_id]: 3690113
[tags]: 
It looks like your existing code might work where documents.staffID = staff.ID - that is where there is just a single staffID associated with the document? You'd be better off adding a table to model the relationships between documents and staff separately from either, and removing or deprecating the staffID field in the documents table. You'd need something like CREATE TABLE document_staff ( document_id , staff_id ) You can include compound indexes with ( document_id, staff_id ) and ( staff_id, document_id ) if you have lots of data and/or you want to traverse the relationship efficiently in both directions. (You don't mention data types for your identity fields, but documents.staffID appears to be some sort of varchar based on what you say - perhaps you could use an integer type for these instead?) But you can probably achieve what you want using the existing schema and the MySQL FIND_IN_SET function: SELECT organizations.orgName, documents.docName, documents.docEntry, documents.staffID, staff.Name, staff.ID FROM documents INNER JOIN organizations ON (documents.IDorg = organizations.IDorg) INNER JOIN staff ON ( FIND_IN_SET( staff.ID, documents.staffID ) > 0 ) MySQL set types have limitations - maximum membership size of 64 for example - but may be sufficient for your needs. If it was me though, I'd change the model rather than use FIND_IN_SET .
