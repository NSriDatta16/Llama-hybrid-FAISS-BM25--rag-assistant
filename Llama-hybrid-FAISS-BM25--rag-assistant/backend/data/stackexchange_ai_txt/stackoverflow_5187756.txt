[site]: stackoverflow
[post_id]: 5187756
[parent_id]: 
[tags]: 
How to render ajax response to jsf page using springmvc as controller

I am on a project which uses Spring-MVC as a controller and JSF is responsible for rendering. I need to now implement some Ajax functionality into my page. What I am after is something like this: User clicks on button or "something" other clickable Ajax call is made to controller and until the response is returned some sort of panel with text "loading..." is rendered underneath the button The controller will process the request and returns the result as HTML. The result will be rendered into similar panel as the "loading ..." information was. Step 3 is when I am lost. So far what I found is that I have to use plain JSP and tiles ( Handling Ajax Requests with Spring MVC Controllers ) for achieving such functionality "out of the box". But I need to use JSF and one of my XHTML fragments as a "template". I already have AJAX resolver configured in my spring configuration file but that is used for returning JSON objects. Now I need to return the whole HTML. I want to use server to do the rendering rather then mocking it up from JSON object and paste the HTML to the correct place on the page. Is there a way how to "convince" org.springframework.faces.mvc.JsfView to work in AJAX request? This is my normal JSF resolver configuration: And this is my JSON Ajax resolver configuration: Here is the code in my JSON AjaxViewResolver : public class AjaxViewResolver extends AbstractCachingViewResolver { private Logger logger = Logger.getLogger(AjaxViewResolver.class); private String ajaxPrefix; private View ajaxView; @Override protected View loadView(String viewName, Locale locale) throws Exception { logger.debug("loadView - enter"); logger.debug("loadView - viewName : " + viewName); logger.debug("loadView - locale : " + locale); View view = null; if (viewName.startsWith(this.ajaxPrefix)) { view = ajaxView; } logger.debug("loadView - returns : " + view); return view; } public String getAjaxPrefix() { return ajaxPrefix; } public void setAjaxPrefix(String ajaxPrefix) { this.ajaxPrefix = ajaxPrefix; } public View getAjaxView() { return ajaxView; } public void setAjaxView(View ajaxView) { this.ajaxView = ajaxView; } } Here is my JSON AjaxView class: public class AjaxView extends AbstractView { private Logger logger = Logger.getLogger(AjaxView.class); /** * Serialises the modelMap into a JSON string and writes the string to the outputStream */ @Override protected void renderMergedOutputModel(Map map, HttpServletRequest request, HttpServletResponse response) throws Exception { logger.debug("renderMergedOutputModel - enter"); logger.debug("renderMergedOutputModel - map : " + map); logger.debug("renderMergedOutputModel - request : " + request); logger.debug("renderMergedOutputModel - response : " + response); JSONSerializer serializer = new JSONSerializer(); serializer.exclude("*.class"); String jsonString = serializer.deepSerialize(map); response.setContentType("text/plain; charset=UTF-8"); response.getOutputStream().write(jsonString.getBytes()); logger.debug("renderMergedOutputModel - response : " + response); logger.debug("renderMergedOutputModel - exit"); } } Any ideas?
