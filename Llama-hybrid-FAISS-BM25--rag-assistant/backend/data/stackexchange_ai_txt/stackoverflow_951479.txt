[site]: stackoverflow
[post_id]: 951479
[parent_id]: 951285
[tags]: 
The design should be determined by your use-case scenarios and the type of queries you anticipate. Are you going to do a lot of reads, writes or a lot of updates? Do you wish to get the entire test data for a candidate or do you wish to get only the best test or something. What query are you going to be running most frequently? Design 1 SN Test1_Max Test1_Min Test1_Mean Test2_Max Test2_Min Test2_Mean 2093 23 2 15 54 -24 45 This is the best in terms of performance. It requires no JOINs. If the number of fields is deterministic and not arbitrary (example each person has at most two test scores) then this is better albeit more rigid if you decide to associate more than two test scores to a person. Since SN is unique here for each row, the database engine can return as soon as it finds a match which is another reason why performance is better. Design 2 SN Test Max Min Mean 2093 1 23 2 15 2093 2 54 -24 45 This is useful if SN 2093 can have N tests in their profile. Similarly if the number of tests is say 10m, then too this design is better than to have 30 columns. Each query and comparison will be quite heavy. This is also useful if your application requires queries where it wants to get the best performing test for student 2093 or if wishes do some analytics and reporting around test scores. This is more flexible though slightly slower than the previous one. I prefer this because I have a hunch that you will probably be interested in test statistics and students can have more than two tests each. Design 3 SN Test Statistic Value 2093 1 Max 23 2093 1 Min 2 2093 1 Mean 15 2093 2 Max 54 2093 2 Min -24 2093 2 Mean 45 This is useful if your queries were interested in values more than anything. For example if you are interested in how many values were greater than 80 this would be fast. In your scenario this doesn't make sense. You'll end up doing too many self JOINs. Reads will be slow! However, writes will probably be faster because you can quickly UPDATE max score for SN 2093 and Test 2 (assuming that the Statistic column is an enum instead of a string because string comparisons can be costly). Design 4 SN AverageCurrent (mA) BatteryCapacity (mA) 2093 200 540 Design 5 SN mA_Measuremnt Value 2093 AverageCurrent 200 2093 BatteryCapacity 540 Same arguments apply. It really depends on whether you intend to optimize for reads or writes? For web applications for example, if you can get away with it, I prefer Design 1. For example, I will usually know that a user will only have at most 3 phone numbers so I will make them each a field within the user column and avoid JOINs. The reads are fast even though writes will require setting some fields to null.
