[site]: stackoverflow
[post_id]: 3536410
[parent_id]: 3533020
[tags]: 
What you are saying is partly correct in that the objective of prototype pattern is to reduce cost of creating an object by cloning and avoiding "new". But that does not mean you can use the pattern just to clone objects. There are other important considerations Use the prototype object as the "maker" of all other instances. Create "almost" similar instances form a given instance, the prototype To summarize, the prototype's objective is to: Reduce the cost of creating objects, by cloning a "prototype object" When objects created by prototyping will be slightly different from the prototypical object. Below is an example that uses a prototypical PageBanner instance to create different types of page banners that vary slightly import java.awt.Dimension; import java.io.Serializable; /** * This class also acts as a factory for creating prototypical objects. */ public class PageBanner implements Serializable, Cloneable { private String slogan; private String image; private String font; private Dimension dimension; // have prototype banner from which to derive all other banners private static final PageBanner PROTOTYPE = new PageBanner("", "blank.png", "Verdana", new Dimension(600, 45)); PageBanner(String slogan, String image, String font, Dimension dim) { this.slogan = slogan; this.image = image; //... other assignments } // getters and setters.. public String toString() { return new StringBuilder("PageBanner[") .append("Slogan=").append(slogan) .append("Image=").append(image) .append("Font=").append(font) .append("Dimensions=").append(dimension) .toString(); } protected Object clone() { Object cln = null; try { cln = super.clone(); }catch(CloneNotSupportedException e) { // ignore, will never happen } return cln; } /** * This is the creational method that uses the prototype banner * to create banners and changes it slightly (setting slogan and image) */ public static PageBanner createSloganBanner(String slogan, String image) { PageBanner banner = (PageBanner) PROTOTYPE.clone(); banner.slogan = slogan; banner.image = image; return banner; } /** * Another creational method that uses the prototype banner * to create banners and changes it slightly (setting image) */ public static PageBanner createImageBanner(String image) { PageBanner banner = (PageBanner) PROTOTYPE.clone(); banner.image = image; return banner; } // similarly you can have a number of creational methods with // different parameters for different types of banners that // vary slightly in their properties. // main... (for illustration) public static void main(String[] args) { // both these banners are created from same prototypical instance PageBanner slogan = PageBanner.createSloganBanner( "Stackoverflow Rocks", "stack.png"); PageBanner img = PageBanner.createImageBanner("stackBanner.png"); } } Oh and in your case, have your prototype object's class implement the Cloneable marker interface
