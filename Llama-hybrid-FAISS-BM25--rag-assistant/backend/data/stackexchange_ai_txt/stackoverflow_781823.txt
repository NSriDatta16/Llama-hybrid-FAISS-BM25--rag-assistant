[site]: stackoverflow
[post_id]: 781823
[parent_id]: 781763
[tags]: 
You have some costs to doing TDD: When you update your code you must maintain your unit tests to check for the new correct behavior. Once you have a large amount of unit tests, when you refactor, you need to rewrite the unit tests I like TDD for lots of things. Keep in mind that the above maintenance cost of keeping working unit tests might mean that although your code has become more modular, the chosen modular organization is harder to change. You can't reorganize your code without the additional cost of rewriting all your unit tests. That's really the big limit I've found with TDD. Later when you realize you've made a mistake, now you have all this overhead that you have to go through to refactor things whereas before these changes could happen much more fluidly. So to use TDD well I'd say you need to make good decisions when first developing the module. Not always easy in the changing, agile world we live in ;). Also consider: Not everything can be purely black-box tested through a classes methods. IE a method that's result is dependent on exactly how many microseconds have passed since it was last called. You need to add hooks to control how much time has passed and see if you get the correct response. Unit testing is really not appropriate for everything. Seeing if a GUI is usable by humans can really never be proven via unittest.
