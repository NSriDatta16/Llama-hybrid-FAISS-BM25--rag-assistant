[site]: crossvalidated
[post_id]: 466832
[parent_id]: 
[tags]: 
How to calculate coverage probability from binomial confidence intervals?

For a given alpha I have been calculating various confidence intervals for a binomial distribution(Wald, Wilson, Agrest-Coulla etc.): import numpy as np import scipy def walds_trial(n, alpha): X = sum(np.random.binomial(1, 1/2, size=n)) p_n_hat = X/n z_alpha_half = scipy.stats.norm.ppf(1-(alpha/2)) upper = p_n_hat + z_alpha_half * np.sqrt((p_n_hat*(1-p_n_hat))/n) lower = p_n_hat - z_alpha_half * np.sqrt((p_n_hat*(1-p_n_hat))/n) return (upper, lower) >> walds_trial(100,0.05) (0.5979981992270027, 0.4020018007729973) Basically what this statsmodels function does or this one in astropy . However, I don't need the upper/lower bounds of the confidence interval though, but a coverage probability . What do I have to calculate to obtain that? What needs to be tweaked? R version does exactly what I need - you don't get confidence intervals but coverage probability. I would like to use Python though.
