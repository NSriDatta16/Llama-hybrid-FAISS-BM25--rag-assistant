[site]: stackoverflow
[post_id]: 3542792
[parent_id]: 3542563
[tags]: 
I don't think there is a single answer to this question but here is mine. For a simple project without strong modularity requirements, I would use a single project. For the project layout itself, I follow the Maven standard directory layout . For a webapp, this typically means something like this: . └── src ├── main │ ├── java - Application/Library sources │ ├── resources - Application/Library resources │ └── webapp - Web application sources │ └── WEB-INF └── test ├── java - Test sources └── resources - Test resources And I would use java packaging naming conventions to organize classes from the various layers: com.acme. . .web.action for struts actions com.acme. . .web.forms : for struts form beans com.acme. . .service : for business services interfaces and implementations com.acme. . .bo : for the business objects com.acme. . .dao : for DAO interfaces com.acme. . .dao.hib : for Hibernate implementations of the DAOs But for a small application, I would just skip the functional subdivision. Related questions What strategy do you use for package naming in Java projects and why?
