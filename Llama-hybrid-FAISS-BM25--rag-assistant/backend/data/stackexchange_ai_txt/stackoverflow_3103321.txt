[site]: stackoverflow
[post_id]: 3103321
[parent_id]: 3103245
[tags]: 
Well, obviously the naive first step would be to simply write return items.slice(start - 1, start + 2) However this isn't going to work with the wrapping that you require. One approach that should work is a helper function that effectively makes the array circular on both edges: function getElementAtIndex(items, idx) { // Normalise the index to an element in the actual range while (idx > items.length - 1) { idx -= items.length; } while (idx Then you can simply manually return the four elements surrounding your index like so: function getBatch(items, start) { return [ getElementAtIndex(items, start - 1), getElementAtIndex(items, start), getElementAtIndex(items, start + 1), getElementAtIndex(items, start + 2)]; } This approach is shown working here . This probably isn't the most efficient or elegant approach, but it's fairly straightforward to understand and implement, so it might end up being the most practical if this code isn't in a performance hotspot.
