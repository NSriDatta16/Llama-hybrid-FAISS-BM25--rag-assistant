[site]: stackoverflow
[post_id]: 5302438
[parent_id]: 5211716
[tags]: 
Not familiar with Ragel, but, have done some custom parsers & scanners. Your question seems to relate more to detect keywords, than detect generic identifiers. You have rules telling Ragel to detect when a section the code is a number, the "return" keyword, a semicolon, the "returns" keyword, an identifier, and so on. Altought, it's possible to make a rule for each keyword, I won't recommended. What I have learn by experience, is that is better to read all keywords explicity as identifiers (assign a general "identifier" token ), and in some part of your C/C++ code, detect which identifiers are "keywords". In other words. Ragel will detect only identifiers. "myvar", "return" and "returns", will all be marked as "identifiers". Later, in the code of your semantic action ( C/C++ not Ragel ), you will check each identifier, and detect if is a keyword in C/C++. This is usually done, by having a list of keywords. I think It will be something like these: %%{ Identifier = (alpha | '_') . (alnum | '_')*; action IdentifierAction { String Keywords[] = ( "return", "if", "else" ); String MyIdentifier = te - ts; if (SearchKeywordCode(Keywords, MyIdentifier)) { std::cout So, there not be a "Return" or "Returns" rule, just "Identifier".
