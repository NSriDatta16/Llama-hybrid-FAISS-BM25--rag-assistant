[site]: stackoverflow
[post_id]: 5079395
[parent_id]: 5070102
[tags]: 
Cobol has compile time binding for variables, sometimes called static scope. Within that, Cobol supports several layers of scope within programs: "External" variables are the equivilent of a Fortran or assembler common section, they are truly global. "Global Program Scope" variables declared in working storage as global are visible to the entire program in which they are declared AND in all nested subprograms contained in that program. "Program Scope" variables declared in working storage are visible to the entire program in which they are declared. "Program Scope" variables declared in local storage are visible to the entire program in which they are declared, but are deleted and reinitialized on every invocation. Think thread scoped, sorta. "Nested Program Scope" Cobol does not distinguish between programs and functions/procedures, its equvilent of a procedure or function is called a program. An infinite number of programs can be contained within a program, and the variables of each are visible only within the scope of that individual program. You could think of this as function/procedure scope. The OO extensions that many vendors have, and the 2002 standard, defines the traditional public/protected/private object scope and method scope. "Cobol" is as old as Radar, Laser, and Scuba, can we please stop acronymizing it?
