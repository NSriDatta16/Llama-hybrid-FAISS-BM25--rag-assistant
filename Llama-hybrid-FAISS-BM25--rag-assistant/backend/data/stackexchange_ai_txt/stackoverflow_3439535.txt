[site]: stackoverflow
[post_id]: 3439535
[parent_id]: 3438247
[tags]: 
Personally, for data retrieval, I would suggest returning the POCO entity from the repository and mapping it to the ViewModel in the controller ( Automapper ). There's no need to have an intermediary object really. It is up to your design where the Total property should be implemented. Is that property used in the domain for any business logic? Could it be? If not then you might consider it merely a presentation concern and suitable for the ViewModel. For data update - return something like a CartItemUpdateViewModel in your UI which maps to a domain entity of CartItemUpdateDetails in the controller which is then passed to the repository method. As far as your question regarding the CartItemResult goes. I would personally be putting the Total logic in a ViewModel and populate that ViewModel in the contrller from a repository method returning IEnumerable . Take a look at the WhoCanHelpMe project for a good enterprise application showcasing DDD.
