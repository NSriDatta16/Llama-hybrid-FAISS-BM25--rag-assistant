[site]: crossvalidated
[post_id]: 216294
[parent_id]: 216257
[tags]: 
I assume you're trying to reverse-engineer a human-programmed formula, like in a video game, rather than trying to model a stochastic relationship in nature. If you know the hidden formula is something like a1*AGI + a2*AWR + a3*KP + a4*KA + a5*Tec + diceRoll(n) (since the example you gave is of that form; .30*((KP+KA)/2) can be rewritten as .15*KP + .15*KA ), and all you don't know is the values of a1 through a5 and the value of n , then a neural network is overkill. All you need is a multi-parameter function minimization routine like R's optim or Python's scipy.optimize.minimize . Minimize the negative sum of the logarithms of the likelihood of each observation. The likelihood of each observation is just the probability of the observed outcome (1 or 0) given the model parameters being considered by the minimization routine.
