[site]: stackoverflow
[post_id]: 4049179
[parent_id]: 
[tags]: 
No direct access to data row in clustered table - why?

[11] tells: " In a nonclustered index, the leaf level does not contain all the data. In addition to the key values, each index row in the leaf level (the lowest level of the tree) contains a bookmark that tells SQL Server where to find the data row corresponding to the key in the index. A bookmark can take one of two forms. If the table has a clustered index, the bookmark is the clustered index key for the corresponding data row . If the table is a heap (in other words, it has no clustered index), the bookmark is a row identifier (RID), which is an actual row locator in the form File#:Page#:Slot#." Is this a copy of clustered index key or nonclustered index has a pointer to it? Should all clustered index structure, i.e. b-tree with intermediate data, be traversed to get to row data through non-clustered index bookmark on clustered table? What does clustered index indtroduce that direct referencing become impossible? Update: Let me re-phrase the question. How this is done I can read myself but I want to understand why it is done this way. Would not it be much more efficient to continue referencing row data by RID from non-clustered index having (added) clustered one? Suppose a table has only non-clustered index(es) (but no clustered index). Non-clustered index leaves contains RID to real data. For direct access of row data without any need of lookup/traversals. Adding clustered index means elimination of IAM (Index Allocation Map) pages and substituting all RIDs of all non-clustered indexes by clustered index keys + necessity of additional lookup instead of direct access. What is the point in this? Update2: Was my question downvoted by Microsoft himself? Thanks again, this is an honor. It is pointless to downvote without explaining. Update3: @PerformanceDB", I could not understand the phrase in your answer: ""It also means the B-Tree is reduced by one level in index height (which is why they are tiny if you inspected them)." Can you explain it? Yes, I'd like illustrations. I started to read: Debunking myths about clustered indexes - part 4 (CIXs, TPC-C & Oracle clusters) and it, as many other sources, explicitly refer to the fact that SQL Server, in contrat to Oracle, lacks direct access features on a clustered table. Update4 (Update5 - corrected by strike-out): A few answerers referred to the fact that a bookmark CI key in NCI leaf is for address independence in case of page splits. Aren't during index reorganization or de-fragmenting in non-clustered table with CI NCI (non-clustered index) the rows relocated and corresponding RIDs in NCI change in NCI are modified? This seems to me as addressing scheme deficiency - the row should have moved with its address, should have not it? Also, Is heap completely immune to page splits? due to size increase of variable size data types in row Related questions: What do I miss in understanding the clustered index? Why/when/how is whole clustered index scan chosen rather than full table scan? Reasons not to have a clustered index in SQL Server 2005 Cited: [11] Inside Microsoft® SQL Server™ 2005: The Storage Engine By Kalen Delaney - (Solid Quality Learning) ............................................... Publisher: Microsoft Press Pub Date: October 11, 2006 Print ISBN-10: 0-7356-2105-5 Print ISBN-13: 978-0-7356-2105-3 Pages: 464 [11a] p.250 Section Index organization from Chapter 7. Index Internals and Management Here is helpful online copypaste from it http://sqlserverindexeorgnization.blogspot.com/ though without any credits to source
