[site]: stackoverflow
[post_id]: 3540200
[parent_id]: 3539549
[tags]: 
Preprocessor macros can't really do arithmetic, but they can be usefully leveraged to do math with enumerations. The general trick is to have a macro which invokes other macros, and can be repeatedly invoked using different definitions of those other macros. For example, something like: #define MY_THINGS \ a_thing(FRED,4) \ a_thing(GEORGE,6) \ a_thing(HARRY,5) \ a_thing(HERMIONE,8) \ a_thing(RON,3) \ // This line left blank #define a_thing(name,size) EN_##name}; enum {EN_SIZE_##name=(size),EN_BLAH_##name = EN_##name+(size-1), enum {EN_FIRST_THING=0, MY_THINGS EN_TOTAL_SIZE}; #undef a_thing That will allow one to 'allocate' a certain amount of space for each thing in e.g. an array. The math isn't done by the preprocessor, but the enumerations are still regarded as compile-time constants.
