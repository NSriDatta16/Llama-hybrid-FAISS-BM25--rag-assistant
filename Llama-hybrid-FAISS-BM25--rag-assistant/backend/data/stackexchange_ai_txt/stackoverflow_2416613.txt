[site]: stackoverflow
[post_id]: 2416613
[parent_id]: 2382464
[tags]: 
Yup, HWND_TOPMOST does it for me. Here is a section of code that makes full-screen work well (and quick) for me: bool enterFullscreen(HWND hwnd, int fullscreenWidth, int fullscreenHeight, int colourBits, int refreshRate) { DEVMODE fullscreenSettings; bool isChangeSuccessful; RECT windowBoundary; EnumDisplaySettings(NULL, 0, &fullscreenSettings); fullscreenSettings.dmPelsWidth = fullscreenWidth; fullscreenSettings.dmPelsHeight = fullscreenHeight; fullscreenSettings.dmBitsPerPel = colourBits; fullscreenSettings.dmDisplayFrequency = refreshRate; fullscreenSettings.dmFields = DM_PELSWIDTH | DM_PELSHEIGHT | DM_BITSPERPEL | DM_DISPLAYFREQUENCY; SetWindowLongPtr(hwnd, GWL_EXSTYLE, WS_EX_APPWINDOW | WS_EX_TOPMOST); SetWindowLongPtr(hwnd, GWL_STYLE, WS_POPUP | WS_VISIBLE); SetWindowPos(hwnd, HWND_TOPMOST, 0, 0, fullscreenWidth, fullscreenHeight, SWP_SHOWWINDOW); isChangeSuccessful = ChangeDisplaySettings(&fullscreenSettings, CDS_FULLSCREEN) == DISP_CHANGE_SUCCESSFUL; ShowWindow(hwnd, SW_MAXIMIZE); return isChangeSuccessful; } Note that this will change the resolution if you tell it the wrong settings. This is what I usually want, but if you don't like that, you can find out your resolution by using (where mainWindow is returned from something like CreateWindow() or CreateWindowEx() ): windowHDC = GetDC(mainWindow); fullscreenWidth = GetDeviceCaps(windowHDC, DESKTOPHORZRES); fullscreenHeight = GetDeviceCaps(windowHDC, DESKTOPVERTRES); colourBits = GetDeviceCaps(windowHDC, BITSPIXEL); refreshRate = GetDeviceCaps(windowHDC, VREFRESH); When you want to get out of full-screen you do something like this: bool exitFullscreen(HWND hwnd, int windowX, int windowY, int windowedWidth, int windowedHeight, int windowedPaddingX, int windowedPaddingY) { bool isChangeSuccessful; SetWindowLongPtr(hwnd, GWL_EXSTYLE, WS_EX_LEFT); SetWindowLongPtr(hwnd, GWL_STYLE, WS_OVERLAPPEDWINDOW | WS_VISIBLE); isChangeSuccessful = ChangeDisplaySettings(NULL, CDS_RESET) == DISP_CHANGE_SUCCESSFUL; SetWindowPos(hwnd, HWND_NOTOPMOST, windowX, windowY, windowedWidth + windowedPaddingX, windowedHeight + windowedPaddingY, SWP_SHOWWINDOW); ShowWindow(hwnd, SW_RESTORE); return isChangeSuccessful; } I set my code to change between full-screen and windowed mode using a hotkey, and I keep the windowed mode variables as global, so that when changing to windowed mode, it stays put. This code also has the advantage of running in the equivalent of "exclusive mode" (I'm using XP, and haven't tried it on the newer versions of windows), which means it'll be much, much faster. Let me know if I've made any mistakes from condensing the code (from my much bigger code).
