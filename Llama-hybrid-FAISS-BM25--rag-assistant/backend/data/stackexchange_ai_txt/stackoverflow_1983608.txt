[site]: stackoverflow
[post_id]: 1983608
[parent_id]: 1981526
[tags]: 
Basic Indexing I'm always shocked to see a table or an entire database with no indexes, or arbitrary/useless indexes. Even if you're not designing the database and just have to write some queries, it's still vital to understand, at a minimum: What's indexed in your database and what's not: The difference between types of scans, how they're chosen, and how the way you write a query can influence that choice; The concept of coverage (why you shouldn't just write SELECT * ); The difference between a clustered and non-clustered index; Why more/bigger indexes are not necessarily better; Why you should try to avoid wrapping filter columns in functions. Designers should also be aware of common index anti-patterns, for example: The Access anti-pattern (indexing every column, one by one) The Catch-All anti-pattern (one massive index on all or most columns, apparently created under the mistaken impression that it would speed up every conceivable query involving any of those columns). The quality of a database's indexing - and whether or not you take advantage of it with the queries you write - accounts for by far the most significant chunk of performance. 9 out of 10 questions posted on SO and other forums complaining about poor performance invariably turn out to be due to poor indexing or a non-sargable expression.
