[site]: stackoverflow
[post_id]: 145095
[parent_id]: 51783
[tags]: 
Adjacency lists and adjacency matrices are the two common ways of representing graphs in memory. The first decision you need to make when deciding between these two is what you want to optimize for. Adjacency lists are very fast if you need to, for example, get the list of a vertex's neighbors. On the other hand, if you are doing a lot of testing for edge existence or have a graph representation of a markov chain, then you'd probably favor an adjacency matrix. The next question you need to consider is how much you need to fit into memory. In most cases, where the number of edges in the graph is much much smaller than the total number of possible edges, an adjacency list is going to be more efficient, since you only need to store the edges that actually exist. A happy medium is to represent the adjacency matrix in compressed sparse row format in which you keep a vector of the non-zero entries from top left to bottom right, a corresponding vector indicating which columns the non-zero entries can be found in, and a third vector indicating the start of each row in the column-entry vector. [[0.0, 0.0, 0.3, 0.1] [0.1, 0.0, 0.0, 0.0] [0.0, 0.0, 0.0, 0.0] [0.5, 0.2, 0.0, 0.3]] can be represented as: vals: [0.3, 0.1, 0.1, 0.5, 0.2, 0.3] cols: [2, 3, 0, 0, 1, 4] rows: [0, 2, null, 4] Compressed sparse row is effectively an adjacency list (the column indices function the same way), but the format lends itself a bit more cleanly to matrix operations.
