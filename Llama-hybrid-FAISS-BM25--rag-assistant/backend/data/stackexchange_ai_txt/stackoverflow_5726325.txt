[site]: stackoverflow
[post_id]: 5726325
[parent_id]: 5700865
[tags]: 
Q1: Hierarchical UI element hiding - Optimizing your GPM to avoid hiding elements that are already hidden via a parent is not going to have much of a performance boost in my opinion. My reasons: You load permissions once when a user logs in, not all the time. Depending on how it is coded, additional processing will be needed to determine the hierarchy anyways. With adequate planning you could avoid registering dozens and dozens of components and stick to overarching containers. If you really want to keep track of hierarchical information you can always use the 'contains' method that all container components provide for checking if a DisplayObject is contained anywhere in its child list (including down the chain). This could be called up each time a component is registered to check if it already has a registered parent. A flag could then be set in a dictionary to ignore hiding on that component. This flag could get checked first while iterating over the list of registered components to determine what should be hidden. The dictionary could use keys that correspond to the registered component's UID. Furthermore this flag could be used to ignore the component when it comes time to ignore other GPM functions, like form disabling (as the form would never be seen anyways). Q2. Off the top of my head you could disable/enable components, implement state changes, or intercept events, and all alerts. This is really too broad of a question as anything could be done - really up to the designer. Q3. You could: Provide parameters when registering your components, such as to indicate what type they are (container for hiding, form for setting to read only, etc.) Check each component as it is registered to determine what is going to be done with it. You would essentially be establishing a contract with various components where the GPM is aware of their interfaces and interacts with them accordingly. Q4. You can always set a form to be disabled (enabled = false). This prevents any user interaction. Some skins will change to indicate that the components are disabled so you may want to modify their skins to prevent some of this display behavior. On that line, you could also change their skins to hide certain elements such as the TextInput box's border so as to make it look more like a 'view' than a disabled input. It would be possible to create a 'transformer' that changes TextInputs with RichText components and such. This would take a decent amount of work and should probably be built into an extended Form class instead of the GPM. I think different skins states for each component type may be a better solution, so as to avoid creation and destruction of components just to change how the form appears.
