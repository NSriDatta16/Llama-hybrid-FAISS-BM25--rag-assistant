[site]: stackoverflow
[post_id]: 4914445
[parent_id]: 4914374
[tags]: 
They have already invested a lot of work into Task and Task , which is designed to perfectly fit this situation. I find this very convenient, because I precisely know what to expect of a Task - having it used previously - and I think a lot of other developers will also feel that way. In my opinion it's a lot better than introducing something new - and I'm not even sure what could be different that would make a new type more up to the task. Do you have any concrete ideas? I think that you're missing the purpose of the async keyword. It is used to mark methods that will be (partially) executed asynchronously (when you use the await keyword). It is required for the compiler to know which methods to "perform magic on"; it doesn't "convert" a method to be executed asynchronously. For that you should use ThreadPool.QueueUserWorkItem . I can't really comment on this. What would be a more elegant solution in your opinion? I'm sure Microsoft will take your feedback into consideration if you share it with them.
