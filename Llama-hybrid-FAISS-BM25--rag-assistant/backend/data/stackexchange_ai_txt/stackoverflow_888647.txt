[site]: stackoverflow
[post_id]: 888647
[parent_id]: 
[tags]: 
Create a custom click event handler for a WPF usercontrol which contains a button?

have you ever found a problem when assigning a click event handler for your custom WPF usercontrol with a nested button control? I do. When you put such user control in a main window, let's say Main.xaml, the MouseLeftButtonDown doesn't work, but the PreviewMouseLeftButtonDown works like a charm. But imagine yourself telling each developer in your team to use this event when using your usercontrol... Some usercontrols in you library has MouseLeftButtonDown, others PreviewMouseLeftButtonDown.... It's a mess don't you agree? So I've got a solution but I want someone to see if there's some elegant way to create your custom event handler called "Click". In my usercontrol called CustomButton.xaml.cs, I have so far: public partial class CustomButton: UserControl { public CustomButton() : base() { this.InitializeComponent(); } public delegate void ClickHandler(object sender, EventArgs e); public event EventHandler Click; public void Button_Click(object sender, RoutedEventArgs e) {//execute daddy's button click (((sender as Button).Parent as Grid).Parent as CustomButton).Click(sender, e); e.Handled = false; } In my CustomButton.xaml blablabla Now in my Main.xaml, the caller, I have: Explanation: in the usercontrol, when you click the nested button, it executes its parent custom "Click" handler. Is there a elegant way to accomplish the same effect?
