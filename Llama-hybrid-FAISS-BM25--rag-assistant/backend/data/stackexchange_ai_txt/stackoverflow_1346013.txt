[site]: stackoverflow
[post_id]: 1346013
[parent_id]: 1345348
[tags]: 
You can use JAXB, already included in Java. It's quite simple. First you need to create a binding to your XML code. The binding provides a map between Java objects and the XML code. An example would be: @XmlRootElement(name = "YourRootElement", namespace ="http://someurl.org") @XmlAccessorType(XmlAccessType.FIELD) @XmlType(name = "", propOrder = { "intValue", "stringArray", "stringValue"} ) public class YourBindingClass { protected int intValue; @XmlElement(nillable = false) protected List stringArray; @XmlElement(name = "stringValue", required = true) protected String stringValue; public int getIntValue() { return intValue; } public void setIntValue(int value) { this.intValue = value; } public List getStringArray() { if (stringArray == null) { stringArray = new ArrayList (); } return this.stringArray; } public String getStringValue() { return stringValue; } public void setStringValue(String value) { this.stringValue = value; } } Then, to encode your Java objects into XML, you can use: YourBindingClass yourBindingClass = ...; JAXBContext jaxbContext = JAXBContext.newInstance(YourBindingClass.class); Marshaller marshaller = jaxbContext.createMarshaller(); marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true); marshaller.setProperty(Marshaller.JAXB_FRAGMENT, false); /** If you need to specify a schema */ SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); Schema schema = sf.newSchema(new URL("http:\\www.someurl.org")); marshaller.setSchema(schema); marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, true); ByteArrayOutputStream stream = new ByteArrayOutputStream(); marshaller.marshal(yourBindingClass, stream); System.out.println(stream); To parse your XML back to objects: InputStream resourceAsStream = ... // Your XML, File, etc. JAXBContext jaxbContext = JAXBContext.newInstance(YourBindingClass.class); Unmarshaller unmarshaller = jaxbContext.createUnmarshaller(); Object r = unmarshaller.unmarshal(resourceAsStream); if (r instanceof YourBindingClass) ... Example starting from a Java object: YourBindingClass s = new YourBindingClass(); s.setIntValue(1); s.setStringValue("a"); s.getStringArray().add("b1"); s.getStringArray().add("b2"); // marshal ... Result: 1 b1 b2 a If you don't know the input format, that means you probably don't have a XML schema. If you don't have a schema you don't have some it's benefits such as: It is easier to describe allowable document content It is easier to validate the correctness of data It is easier to define data facets (restrictions on data) It is easier to define data patterns (data formats) It is easier to convert data between different data types Anyway, the previous code also works with XML code that contains 'unknown' tags. However your XML code still have to present the required fields and follow the declared patterns. So the following XML code is also valid. The only restriction is: the tag 'stringValue' should be there. Note that 'stringArrayQ' was not previously declared. a b1
