[site]: stackoverflow
[post_id]: 2311258
[parent_id]: 2311154
[tags]: 
For your four points: See How can I improve garbage collector performance of .NET 4.0 in highly concurrent code? (1) You should dispose if your objects hold resources, especially resources to non-managed objects. Dispose gets executed immediately. A possible finalizer (~ Destructor in C++) gets only called when the GC runs and the object is removed from memory. Pinning the objects makes only sense if the object is passed to a non-managed piece of code, e.g. an unmanaged c++ dll. Othewise, leave the garbage collector to do its share in keeping the memory tidy. Pinning also can lead to memory fragmentation. Not if you don't have to. One thing to think about, is to move the allocation out of your loops - if that is possible. In many cases when you can do this, it also allows you to reuse already allocated objects, thus providing additional performance (at least that what's my experience shows) (See also How can I improve garbage collector performance of .NET 4.0 in highly concurrent code? ). The grade of parallel execution always depends on the task you are doing, in case of an computation the maximum achievable parallelism is
