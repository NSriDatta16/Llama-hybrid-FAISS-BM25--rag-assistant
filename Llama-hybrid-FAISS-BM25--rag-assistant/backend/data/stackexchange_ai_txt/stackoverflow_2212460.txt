[site]: stackoverflow
[post_id]: 2212460
[parent_id]: 2150644
[tags]: 
I think the most efficient way of calculating this is at write time. You should modify OrganizationalUnit like this: class OrganizationalUnit(models.Model): name = models.CharField(max_length=100) parent = models.ForeignKey( 'self', blank=True, null=True, related_name='children', ) checkout_number = models.IntegerField(default=0) create the functions that will update the OrganizationalUnit and its parents at write time: def pre_save_checkout(sender, instance, **kwargs): if isinstance(instance,Checkout) and instance.id and instance.department: substract_checkout(instance.department) def post_save_checkout(sender, instance, **kwargs): if isinstance(instance,Checkout) and instance.department: add_checkout(instance.department) def substract_checkout(organizational_unit): organizational_unit.checkout_number-=1 organizational_unit.save() if organizational_unit.parent: substract_checkout(organizational_unit.parent) def add_checkout(organizational_unit): organizational_unit.checkout_number+=1 organizational_unit.save() if organizational_unit.parent: add_checkout(organizational_unit.parent) now all you need is connect those functions to the pre_save, post_save and pre_delete signals: from django.db.models.signals import post_save, pre_save, pre_delete pre_save.connect(pre_save_checkout, Checkout) pre_delete.connect(pre_save_checkout, Checkout) post_save.connect(post_save_checkout, Checkout) That should do it...
