[site]: stackoverflow
[post_id]: 3260778
[parent_id]: 3260684
[tags]: 
First, as everyone has said, you've sized temp based on the sizes of two pointers, not the lengths of the strings. You've now fixed that, and report that the symptom has moved to the call to strlen() . This is showing a more subtle bug. You've initialized the array bloom->hash_salts[] from pointers returned by va_arg() . Those pointers will have a limited lifetime. They may not even outlast the call to va_end() , but they almost certainly do not outlive the call to bloom_filter_create() . Later, in bloom_filter_operation() , they point to arbitrary places and you are doomed to some kind of interesting failure. Edit: Resolving this this requires that the pointers stored in the hash_salts array have sufficient lifetime. One way to deal with that is to allocate storage for them, copying them out of the varargs array, for example: // fragment from bloom_filter_create() bloom->hash_salts = calloc(bloom->number_of_hash_salts, sizeof(hash_function_salt)); va_start(args, number_of_hash_salts); for(i = 0; i hash_salts[i] = strdup(va_arg(args, hash_function_salt)); va_end(args); Later, you would need to loop over hash_salts and call free() on each element before freeing the array of pointers itself. Another approach that would require more overhead to initialize, but less effort to free would be to allocate the array of pointers along with enough space for all of the strings in a single allocation. Then copy the strings and fill in the pointers. Its a lot of code to get right for a very small advantage.
