[site]: stackoverflow
[post_id]: 3030466
[parent_id]: 3030411
[tags]: 
Some concepts from natural language learning may be relevant here. You can distinguish between receptive language skills and productive language skills. Receptive skills involve listening and reading a language. Productive language skills involve speaking a language. If you spend a lot of time studying a language on your own, and haven't yet generated a lot of material in this language, you can find yourself good at receptive skills but not so good at the productive ones. It may be that you have thoroughly learnt all of the rules of grammar. And that when you struggle to write a sentence, and someone helps you, you find that they didn't use any principles you didn't already know. Nonetheless, it can still be hard to produce when only your receptive skills are good. This may be where you are with Objective C. Sounds like you can read the language fine, but it takes more practice to be able to write it. That said: There's also a lot unsaid in the Apple documentation. For example, most Apple Objective C function documentation doesn't tell you who owns the memory of the returned values. This is because they implicitly tell you through a naming convention. If you haven't read the documentation on this then it looks like something is missing from the individual function docs. Another difficulty, related to the receptive/productive thing, is that there are many different ways to organise an application. But the Objective C library is geared towards a model/view/controller approach. If you aren't aware of this approach, and you launch into Objective C code, then no matter how well you know the language you'll find your requirements rubbing up against what the docs expect your requirements to be. I should also add: the Apple documentation looks nicely professional and laid out but I think that there is a ton of information that is hard to get at. For example, I've had lots of trouble trying to figure out the precise order in which various stages happen during the launch of an application finding lots of ambiguous (or maybe even incorrect) statements scattered in different places. So I suggest grabbing whatever resources you can to help you. You don't learn a natural language by simply rote learning the grammar. It's hard to learn a programming language that way too.
