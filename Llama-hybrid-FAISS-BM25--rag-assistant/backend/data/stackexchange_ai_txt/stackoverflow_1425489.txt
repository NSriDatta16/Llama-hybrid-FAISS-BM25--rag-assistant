[site]: stackoverflow
[post_id]: 1425489
[parent_id]: 1425279
[tags]: 
In terms of LINQ, there are things you can do to create more versatile LINQ queries at runtime than you can purely in lambdas. I've used Expression many times as a micro-compiler, as an alternative to DynamicMethod and IL. This approach gets stronger in .NET 4.0 ( as discussed on InfoQ ), but even in 3.5 there are lots of things you can do (generally based on runtime data; configuration etc): generic operators object cloning complex initialization object comparison I also used it as part of a maths engine for some work I did with Microsoft - i.e. parse a math expression ("(x + 12) * y = z" etc) into an Expression tree, compile it and run it. Another intersting use (illustrated by Jason Bock, here ) is in genetic programming; build your candidates as Expression trees, and you have the necessary code to execute them quickly (after Compile() ), but importantly (for genetic programming), also to swap fragments around.
