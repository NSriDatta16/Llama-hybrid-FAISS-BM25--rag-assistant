[site]: crossvalidated
[post_id]: 140590
[parent_id]: 140582
[tags]: 
While permutations tests, randomization tests and bootstrapping all fall under the class of resampling procedures, they differ in some important ways. In particular, a permutation test differs in several respects from bootstrapping; you seem to think they're the same thing. Some of these differences will make it essentially impossible to use bootstrapping to do a permutation test. a "full" permutation test doesn't actually sample at all. Every data point reappears in every possible sample re-arrangement of the group labels, and it uses every one of the sample combinations that the randomization test samples from; the complete permutation distribution of the test statistc is computed. In practice that's only possible with fairly small samples - or with use of clever algorithms, often to middling sort of sample sizes (dozens of observations, even more in some cases). You could sample the permutation distribution (which some authors call a randomization test, though other authors use that term to mean something a little different). This involves a form of sampling the data without replacement , in the sense that every observation appears (in possibly some modified form) in each resample. However, these (re)arrangements of the original sample themselves are sampled with replacement from the collection of possible arrangements of the group labels that the complete permutation test uses (as described below) bootstrapping involves sampling the data with replacement . Some observations in a typical bootstrap sample will occur more than once, others will not be present. On average about 62% recur in a given sample. Bootstrapping has different assumptions and properties from this approach to randomization testing. Here's how you'd do a full permutation test of the situation you describe: a. for every possible allocation of 25 "beer" labels and 18 "water" labels to the 43 observations of the response variable, compute the beer-mean minus the water mean. b. find the proportion of such allocations (out of the $6.08\times 10^{11}$ combinations just calculated) that have the absolute value of the mean at least as far from 0 as your sample data. That's your exact p-value for the permutation test Here's how you'd do a resampled permutation test (/randomization test) of it: a. for some large number of replications, choose allocations at random from the set of possible label-rearrangements discussed in 1 and compute the difference in means (sampling with replacement). b. add your sample into the set. Find the proportion of sampled allocations that have the absolute value of the mean at least as far from 0 as your sample data. That's your simulated p-value for the randomization test. As you sample more, the uncertainty in the p-value goes down. You can estimate the standard error of the p-value estimate since it's a binomial proportion. Here's one way you could do a bootstrap test of that (glossing over some of the details in the interest of brevity): a. Repeat many times: sample with replacement from the "beer" group to get a 'beer' pseudosample. Sample with replacement from the "water" group to get a 'water' pseudosample. b. use the distribution of the difference in pseudosample means to construct a confidence interval for the difference in means (several methods are discussed in chapter 5 of Davison & Hinkley). If that CI doesn't include 0, conclude that the difference in means is different from 0. Here's another simple way: a. resample both groups as in 3a and take the difference. Subtract the difference in the original sample means. (repeated many times; this produces a resampled distribution of differences that has the "shape" as that which results from treating the ecdf like a population distribution but where the mean population difference matches the case under the null) b. Find where the sample difference in means occurs in this distribution (computing the relevant p value accordingly). (Davison & Hinkley describe better but more complicated one sample bootstrap test than this - e.g. the studentized bootstrap in Section 4.4.1 of their book. They mention several other possible bootstrap tests for this situation, including one very like a resampled permutation test, but where sampling is with replacement.) The easy way to do a resampled permutation test (/randomization) test in R isn't to use the boot function at all, but to use the sample function, since that draws without replacement. Short of reading Davison and Hinkley, you might try these resources on bootstrapping and R: Ajay Shah's introduction Quick R on the bootstrap John Fox's appendix chapter on the bootstrap Canty's discussion of the boot package Davison and Kuonen on bootstrap applications in R
