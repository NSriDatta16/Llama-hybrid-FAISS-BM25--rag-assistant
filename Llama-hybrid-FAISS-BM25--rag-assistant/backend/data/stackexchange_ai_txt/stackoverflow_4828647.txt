[site]: stackoverflow
[post_id]: 4828647
[parent_id]: 4826346
[tags]: 
I've managed to accomplish something along these lines using CakePHP 1.3, Uploadify (http://www.uploadify.com/) and Miles Johnson's Uploader plugin (http://www.milesj.me/resources/script/uploader-plugin). It took a bit of fiddling to get everything to work correctly and you'll want to read over the documentation for each of the pieces involved to get everything to work the way you need it to, but this is how I managed it: In your view: Include the necessary Javascript libs: jQuery, SWFObject, and Uploadify. Insert the element that the Uploadify script will replace with the Flash uploader. Then insert the jQuery code for specifying the Uploadify settings (details in the Uploadify docs). When setting the URL for Uploadify to post to, be sure to include the session ID as one of the arguments. In my example I've passed it as the first argument (see the Controller beforeFilter below to see what's done with it). In your controller: Include the Uploader plugin's Uploader component. Add something like this to the beforeFilter: function beforeFilter() { if ($this->action == 'upload') { $this->Session->id($this->params['pass'][0]); $this->Session->start(); } parent::beforeFilter(); } Create an action to do the uploads. Mine looks something like this: function upload(){ Configure::write('debug', 0); $this->autoRender = false; if (isset($this->params['form']['Filedata'])) { $this->data['Upload'] = $this->params['form']; $data = $this->Uploader->upload('Filedata'); } } That's the essence of it. There are a couple of gotchas, however. I pass the session ID to the controller and start a new session with that ID because Uploadify's post to the URL can be seen as coming from a different User Agent and this can cause errors. You can get around this by passing the browser's session ID to the upload action and starting a new session with that ID in the beforeFilter as shown above. Also, the Uploader component has built-in mimetype validation. However, the Flash uploader that Uploadify provides sends every file with some kind of "file-uploaded-by-flash" mimetype regardless of the mimetype of the original file. I got around this by disabling validation directly in the Uploader plugin's code. This means that if you want to validate the mimetypes of the uploaded files you'll have to add it in elsewhere. Sorry that this is so vague, but I did this a while ago and I don't remember all the details. However, I hope it helps point you in the right direction.
