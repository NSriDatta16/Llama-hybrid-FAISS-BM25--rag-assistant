[site]: crossvalidated
[post_id]: 431054
[parent_id]: 430606
[tags]: 
I don't think you can achieve what you want as you need the intercept to properly calculate the estimated probability for a given value of the covariate. predict(mymod, type = "response") will get you that. This becomes more difficult when you have additional covariates in the model if you want to look at the effect of varying covariate $x$ on the response. In that situation you need to hold the other covariates at some representative value and then predict() (on the type = "link" scale if want to compute a confidence interval from the standard error, and then back transform to the response scale). But either way, you need the intercept (constant) term. Log-odds isn't always so immediately convenient, but some pointers can make these plots easier to understand. 0 represents the overall mean, so if log-odds are positive for some values of the covariate $x$ , the probability of the event is higher that average. If the log-odds are 0, or close to it, for a some values of $x$ the probability would be unchanged, and similarly negative log-odds would indicate probability is below the average for those covariate values. But if you really want a probability value, then you would need to predict() and hold any other covariates in the model at some representative value.
