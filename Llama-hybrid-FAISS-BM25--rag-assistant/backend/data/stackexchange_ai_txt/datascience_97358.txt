[site]: datascience
[post_id]: 97358
[parent_id]: 97286
[tags]: 
Another idea would be to use matrix factorization suitable for three dimension data like Tucker_decomposition or PARAFAC Decomposition and tons of other deep learning based architecture. Basically every network/tree can be seen as a NxN binary matrix where N is the number of nodes and where ever node i is connected to node j , x_ij would be 1. If you have directionality in your network you can also consider +1 versus -1. The third dimension would be your samples. Let's say you have M samples, you will end up with a 3d tensor NxNxM . Depending on what are your samples one can decide which algorithm is more suitable. If it is time (so there is a relationship across M dimension or some other structural differences)
