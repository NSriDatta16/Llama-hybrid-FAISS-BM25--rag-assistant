[site]: stackoverflow
[post_id]: 90846
[parent_id]: 90580
[tags]: 
You'll need not one, but several nice algorithms, along the lines of the following. ignoring pronouns is done via a stoplist . preserving proper nouns? You mean, detecting named entities, like Hoover Dam and saying "it's one word" or compound nouns, like programming language ? I'll give you a hint: that's tough one, but there exist libraries for both. Look for NER (Named entitiy recognition) and lexical chunking. OpenNLP is a Java-Toolkit that does both. ignoring hyphenation? You mean, like at line breaks? Use regular expressions and verify the resulting word via dictionary lookup. handling plurals/stemming: you can look into the Snowball stemmer . It does the trick nicely. "grouping" adjectives with their nouns is generally a task of shallow parsing . But if you are looking specifically for qualitative adjectives (good, bad, shitty, amazing...) you may be interested in sentiment analysis . LingPipe does this, and a lot more. I'm sorry, I know you said you wanted to KISS, but unfortunately, your demands aren't that easy to meet. Nevertheless, there exist tools for all of this, and you should be able to just tie them together and not have to perform any task yourself, if you don't want to. If you want to perform a task yourself, I suggest you look at stemming, it's the easiest of all. If you go with Java, combine Lucene with the OpenNLP toolkit. You will get very good results, as Lucene already has a stemmer built in and a lot of tutorial. The OpenNLP toolkit on the other hand is poorly documented, but you won't need too much out of it. You might also be interested in NLTK , written in Python. I would say you drop your last requirement, as it involves shallow parsing and will definetly not impove your results. Ah, btw. the exact term of that document-term-frequency-thing you were looking for is called tf-idf . It's pretty much the best way to look for document frequency for terms. In order to do it properly, you won't get around using multidimenional vector matrices. ... Yes, I know. After taking a seminar on IR, my respect for Google was even greater. After doing some stuff in IR, my respect for them fell just as quick, though.
