[site]: stackoverflow
[post_id]: 768688
[parent_id]: 768175
[tags]: 
I am quite convinced that there is no 'pythonic' way to do this, because this is not a pattern that is pythonic. Control should not reach an undefined variable reference in elegant code. There are similar ideas that are pythonic. Most obvious: def myRange(start, stop=None): start, stop = (0, start) if stop is None else (start, stop) ... What's important is that stop is defined in scope, but the caller didn't have to pass it explicitly, only that it has taken it's default value, altering the semantics of the arguments, which in effect causes the first argument to be optional instead of the second, even where the language does not allow that without this clever trick. That being said, something like this might follow the premise without using a try-catch block. a = locals().get('x', y)
