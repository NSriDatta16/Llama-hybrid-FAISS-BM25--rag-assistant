[site]: stackoverflow
[post_id]: 5108451
[parent_id]: 5108329
[tags]: 
So my question is this: What is the best way to make the calls async. i am currently using a async task that calls the method which returns the string in the background method and parses the string via another call to a static method used for parsing which returns a POJO containing all the data which i send to the postExecute part where i present the results to ui based on the outcome. Is this a good practice or is there a better method? IMO, if AsyncTask suits your needs, you should use it--it was created specifically to help you avoid the pains of thread management for doing..er..async tasks. I was thinking of maybe introducing interfaces to provide the data for example a onSuccess listener and onFail Listener. so any suggestions on this? Not quite sure what you mean here, but certainly, you want to handle failure gracefully. One way to do this is based just on the return value of your AsyncTask , but if you have many different possible failure scenarios, separating them them with a listener/callback pattern is definitely a valid option. I'd personally make not two but one listener, like this: interface MyHttpCallListener { public void onSuccess(MyResult returnVal); public void onFailure(MyError error); } It seems cleaner to me. thank you. No problem.
