[site]: stackoverflow
[post_id]: 3221209
[parent_id]: 3221175
[tags]: 
var foo = "Hello, I am a string!"; // foo is a string, so this compiles var fooCharArray = foo.ToCharArray(); object bar = foo; // bar is not a string, so this does not compile var barCharArray = bar.ToCharArray(); In the first example, the compiler knows that foo is a string and so we can call string methods on foo . In the second example, we "upcast" the string foo to an object. Now the compiler does not know (because it shouldn't know!) that bar is actually a string, and we cannot call string methods on bar . The compiler will not allow implicit downcasting from an object (or any base type) to a derived type (such as System.String ). Its part of compile time type safety rules.
