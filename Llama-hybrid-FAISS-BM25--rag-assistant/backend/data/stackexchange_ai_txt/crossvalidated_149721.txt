[site]: crossvalidated
[post_id]: 149721
[parent_id]: 
[tags]: 
Looking for a principled/systematic procedure for discarding features

I have a collection of $M_i \times N$ matrices $X_i$ whose rows are (raw) feature vectors (from a common $N$-dimensional feature space). MATLAB reports that most of the covariance matrices $C_i := \mathrm{cov}(X_i)$ obtained from these matrices are "ill-conditioned" 1 . I would like to find a subset $J$ of the set of columns/features so that the submatrices $X_i^{\prime}$ obtained by discarding the columns 2 in $J$ from the original matrices $X_i$ are such that their covariance matrices $C_i^{\prime} := \mathrm{cov}(X_i^{\prime})$ are all "well-conditioned" (i.e. not "ill-conditioned according to MATLAB"); the set $J$ is as small as possible 3 . I'm looking for a principled/systematic (and, of course, tractable!) procedure for computing the subset $J$. Note: I'm particularly interested in procedures that are designed/optimized to find a single common subset $J$ of columns to be discarded from all the members of a collection of $M_i \times N$ matrices. 4 1 This is not terribly surprising for a number of reasons, including (a) this is raw data as it comes out of the instruments, and the features vary greatly in the quality of the data that can be collected for them; and (b) the set of features includes several clusters of closely related features, and I expect that some features in each of these clusters are almost entirely redundant. 2 I know that with principal component analysis (PCA) one can "reduce the dimensionality of the data", but at this stage I'm not interested in dimension reduction per se: I want to eliminate whole features. 3 I realize that there is no objective "bright line" separating "ill-conditioned" from "well-conditioned", and therefore that MATLAB's classification of matrices as ill conditioned or not is ultimately arbitrary, but for now I'm content with going by MATLAB's criterion, warts and all. 4 I imagine, however, that most approaches to this sort of problem are designed to work on a single matrix at a time. In this case, I'd compute $J$ as the union of the subsets $J_i$ obtained by applying the procedure separately to each matrix $X_i$.
