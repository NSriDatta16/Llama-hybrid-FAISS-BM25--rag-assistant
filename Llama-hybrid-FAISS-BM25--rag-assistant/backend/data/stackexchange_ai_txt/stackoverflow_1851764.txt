[site]: stackoverflow
[post_id]: 1851764
[parent_id]: 1848694
[tags]: 
Re-using David's SparseVector class, you could use something like this: class SparseVector[T](size: Int, default: T = 0) { private var storage = scala.collection.mutable.Map[Int, T]() def apply(i: Int) = storage.getOrElse(i, default) def update(i: Int, v: T) = storage.update(i, v) } object SparseVector { implicit def svInt2String(i: Int) = "default" implicit def svInt2Boolean(i: Int = false } You need to Import the implicits, which is a shame, but this gives you:- import SparseVector._ val v = new SparseVector[Int](100) println( v(12) ) // prints '0' val w = new SparseVector[Double](100) println( w(12) ) // prints '0.0' val x = new SparseVector[Boolean](100) println( x(85) ) // prints 'false' val y = new SparseVector[String](100) println( y(85) ) // prints 'default'
