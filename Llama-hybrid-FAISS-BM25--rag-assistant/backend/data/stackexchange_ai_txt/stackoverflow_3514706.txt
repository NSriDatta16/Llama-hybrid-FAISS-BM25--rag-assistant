[site]: stackoverflow
[post_id]: 3514706
[parent_id]: 3497216
[tags]: 
After some research I think the issue was how the return string from my HtmlHelper was formatted. Initially I had this in the HtmlHelper : public static class NotificationHelper { public static string PasswordNotification(this HtmlHelper html) { //Other code... return " Your password has been succesfully saved "; Which rendered like this in Html (note the lack of apostrophes around the class name): Your password has been succesfully saved Instead, I changed the HtmlHelper to format the string as follows: public static class NotificationHelper { public static string PasswordNotification(this HtmlHelper html) { //Other code... return String.Format(" Your password has been succesfully saved ", "feedback-complete", "notification-icon"); This then rendered Html that had ' around the class name... Your password has been succesfully saved Once I changed the above I got the fade-out effect I was looking for after a 3 second delay using the following jQuery (Hat tip to Charlino ) setTimeout("jQuery('div.feedback-complete').fadeOut()", 3000); Finally, I find it interesting that the the lack of apostrophes around the class name did not stop the CSS from rendering the Html correctly. I (naively) assumed at the outset that the fact that the html fragment rendered correctly without the apostrophes meant that this couldn't be the issue of why the jQuery fadeout effect wasn't working for me...
