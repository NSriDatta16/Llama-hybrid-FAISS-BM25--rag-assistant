[site]: stackoverflow
[post_id]: 4788077
[parent_id]: 4787892
[tags]: 
With the current program layout, there is no "clean" way to accomplish that. Here are some constructive criticism : Your main method should only be a bootstrapper You should only initialize your program in your main method. Consequently, try to have 1 method doing only 1 thing. You're design now has the game menu and game main loop inside the same method. Your game loop could look like this: while still playing read input from user if game is active process game input update game else process menu input update menu This way, you only need to swith the game is active state for the menu or the game. Etc. Do not reinvent the wheel Your GCS method is way too complicated, just replace it with : Scanner scanner = new Scanner(); // put this somewhere at the class level (so it is reusable) ... String input = scanner.nextLine(); // put this somewhere in a method reading an input Variable abuse Instead of initializing many variables, perhaps (like other have suggested) you could use arrays, or more specifically a 2-dimensional array. int grid[][] = new int[3][3]; // grid[0][0] points to the top-left cell, grid[2][2] points to the bottom right one Or you could use a single int to store everything; represent your grid as a bit array int grid = 0; // empty grid ... // set player move grid |= (1 > ((1 Why are bit arrays cool? Because to check if a player wins, you don't need fancy for..loop and other complicated algorithms, just validate against a winning pattern... : int pattern = 273; // test for diagonal from [0,0] to [2,2], or bits "100 010 001" boolean isWinning = (grid && (pattern That's it! Also, using 0 to 9 may be good to identify the grid cell, however as input value is not that intuitive for a player. Many games (chess, checkers, LOA, etc.) and applications (Excel, Calc, etc.), for example, are using the Algebraic chess notation system. Converting the notation in x and y is very simple. For example : boolean cellPlayed = false; while (!cellPlayed) { String cellStr = scanner.readLine().toLower(); // ex: "b2" for the center cell try { int gridx = cellStr.charAt(0) - 'a'; // ex: for "b2" should return 1 int gridy = cellStr.charAt(1) - '1'; // ex: for "b2" should return 1 grid(gridx][gridy] = playerValue; // 1 for "player 1" and 2 for "player 2" cellPlayed = true; } catch (Exception e) { System.out.println("Error! Invalid input"); } } Don't feel discouraged! We all start somewhere! :)
