[site]: crossvalidated
[post_id]: 220231
[parent_id]: 220184
[tags]: 
A simple approach would be to smooth the output of your first model. A Savitzky-Golay filter might work, which tries to approximate the signal using a local polynomial model. As a plus, this type of filter can also compute derivatives of a noisy signal, so it could also be used to calculate velocity (if you're interested in that). Another approach would be to use a Kalman filter , which is commonly used for position tracking with noisy signals. This treats the signal (the output of your first model) as a noisy observation of some underlying dynamical state (the position). It tries to estimate the underlying state from the data. If you want to take a similar approach in the discrete domain (i.e. pixel coordinates), you could use a hidden Markov model . A different type of strategy would be to modify your machine learning algorithm that estimates the coordinates. For example, you could imagine applying some form of regularization that encourages it to produce smooth outputs.
