[site]: stackoverflow
[post_id]: 4348324
[parent_id]: 4348011
[tags]: 
If you define a function as a property of an object, then this points to the object: var myObject = { foo: true, bar: function(){ if(this.foo){ doStuff(); }}; If this is used in a constructor function that returns an object, then this is bound to the new object that is returned. The way you're using this in the code you posted, this points to the global scope, which is one of the bad parts of Javascript. So, here's how I would approach this: function GanttChart(gContainerID) { var chart = { variable1: "lol", variable2: "hai dere", variable3: "cometishian", containerId: gContainerID, gInitBarDrag: function(){ alert(this.variable2); } } return chart; } myChart = new GanttChart("chart1"); document.getElementById(myChart.containerId).innerHTML += " Hello "; I changed the ganttChart function to be capitalized because by convention, constructor functions that return an object are capitalized.
