[site]: stackoverflow
[post_id]: 3634540
[parent_id]: 3632533
[tags]: 
I think the reason the C++ community frowns on getters and setters is that C++ offers far better alternatives. For example: template class DefaultPredicate { public: static bool CheckSetter (T value) { return true; } static void CheckGetter (T value) { } }; template > class Property { public: operator T () { Predicate::CheckGetter (m_storage); return m_storage; } Property &operator = (T rhs) { if (Predicate::CheckSetter (rhs)) { m_storage = rhs; } return *this; } private: T m_storage; }; which can then be used like this: class Test { public: Property TestData; Property MoreTestData; }; int main () { Test test; test.TestData = 42; test.MoreTestData = 24; int value = test.TestData; bool check = test.TestData == test.MoreTestData; } Notice that I added a predicate parameter to the property class. With this, we can get creative, for example, a property to hold an integer colour channel value: class NoErrorHandler { public: static void SignalError (const char *const error) { } }; class LogError { public: static void SignalError (const char *const error) { std::cout class RGBValuePredicate : public DefaultPredicate { public: static bool CheckSetter (int rhs) { bool setter_ok = true; if (rhs 255) { ErrorHandler::SignalError ("RGB value out of range."); setter_ok = false; } return setter_ok; } }; and it can be used like this: class Test { public: Property > RGBValue1; Property > RGBValue2; Property > RGBValue3; }; int main () { Test test; try { test.RGBValue1 = 4; test.RGBValue2 = 5; test.RGBValue3 = 6; test.RGBValue1 = 400; test.RGBValue2 = 500; test.RGBValue3 = -6; } catch (Exception *error) { std::cout Notice that I made the handling of bad values a template parameter as well. Using this as a starting point, it can be extended in many different ways. For example, allow the storage of the property to be different to the public type of the value - so the RGBValue above could use an unsigned char for storage but an int interface. Another example is to change the predicate so that it can alter the setter value. In the RGBValue above this could be used to clamp values to the range 0 to 255 rather than generate an error.
