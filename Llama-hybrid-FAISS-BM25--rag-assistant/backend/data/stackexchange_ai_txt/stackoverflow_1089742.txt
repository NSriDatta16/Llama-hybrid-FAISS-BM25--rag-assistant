[site]: stackoverflow
[post_id]: 1089742
[parent_id]: 1089580
[tags]: 
First, I would start by questioning why you feel that using EF entities as you business entities would necessarily be a bad thing? I've done so on a number of projects and I have yet to run into any serious issues that I can't overcome. Having said that, if you really feel you have a strong reason to separate the two, here's one option. You can use a delegate to inject the specific entity set object to query and another for the selector for the key - it could allows derivatives to only specify their storage semantics. So your code would look like: public abstract class ObjectModelBase { // ... same basic code here... // supplied by your derivatives... protected abstract Func > GetEntitySet { get; }; protected abstract Func > KeySelector { get; } public BllClass GetById(Guid id) { using (db = new DataStoreEntities1()) { EntityClass result = (EntityClass)((object) GetEntitySet() .Where( KeySelector( id ) ) .First(); return MapEntityToBLL(result); } } } public class OM_Customer : ObjectModelBase { protected abstract Func > GetEntitySet { get { return db.CustomerSet; } } protected abstract Func > KeySelector { get { return (g => (e => e.Id == g)); } } }
