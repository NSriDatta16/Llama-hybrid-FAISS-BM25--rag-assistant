[site]: stackoverflow
[post_id]: 5686427
[parent_id]: 5685883
[tags]: 
If you're on PHP 5.3 or later I'd suggest using the SPL FilesystemIterator as an elegant solution for this. One of the nice things about this approach is that you can make this recursive by swapping the iterator to RecursiveIteratorIterator and RecursiveDirectoryIterator . You can also use the fileinfo class instead of the deprecated mime_content_type() . Here's a drop-in replacement for Oliver's answer : function getFileList($dir, $recursive = false) { $finfo = new finfo(FILEINFO_MIME); $retval = array(); if ($recursive) { // Note: If RecursiveIteratorIterator::SELF_FIRST is removed it will use the default // RecursiveIteratorIterator::LEAVES_ONLY and therefore ignore directories. $iter = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir), RecursiveIteratorIterator::SELF_FIRST); } else { $iter = new FilesystemIterator($dir); } foreach ($iter as $path => $info) { $filename = $info->getFilename(); if ("." === $filename[0]) { // ignore hidden files on unix for compatability with the Oliver's function // note that the default constructor flag FilesystemIterator::SKIP_DOTS will have skipped the . and .. files anyway. continue; } $val = array("name" => $path, "type" => $info->getType(), "size" => $info->getSize(), "lastmod" => $info->getMTime()); if ($info->isFile()) { $fulltype = $finfo->file($path); // $finfo->file() returns something like "application/octet-stream; charset=binary" // the first part matches what mime_content_type() returns, ignore the rest for compatability with Oliver's function $ftypeparts = explode(";", $fulltype, 2); $val ["type"] = $ftypeparts[0]; } $retval[] = $val; } return $retval; } SPL DirectoryIterator on PHP 5.2 or later will do most of this as well, though you'll need to use mime_content_type() .
