[site]: stackoverflow
[post_id]: 576434
[parent_id]: 576397
[tags]: 
Quick code sample: public partial class DGVCheckBoxTesting : Form { private const int MAX_CHECKS = 5; public DGVCheckBoxTesting() { InitializeComponent(); this.dataGridView1.Columns.Add("IntColumn", "IntColumn"); this.dataGridView1.Columns.Add(new DataGridViewCheckBoxColumn { Name = "BoolColumn" }); for (int i = 0; i MAX_CHECKS) { this.dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex].Value = false; this.dataGridView1.EndEdit(); } } } Basically, what this code does is it adds an Integer column and a Bool column to the DataGridView. Then, on the CellContentClick event, if the checkbox column was clicked, first we commit the edit (if you don't do this, you'll have all kinds of trouble figuring out if the checkbox is checked or not). Then, we loop through the rows and count all the checked rows. Then, if the amount is greater than what we want to allow, we just set it back to false, and again re commit the edit. Test it out, it works. May not be the most elegant solution, but the DGV can be tricky with the checkboxes, so this is how I would do it. EDIT: Just a small edit, I hooked into the ContentDoubleClick event as well, as I noticed you were able to beat the validation if you quickly clicked on the cell. Should work better now.
