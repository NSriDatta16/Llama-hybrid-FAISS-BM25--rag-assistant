[site]: stackoverflow
[post_id]: 4742191
[parent_id]: 
[tags]: 
Multi-threaded Benchmark in Java

I am doing a science fair project in which I am testing how much additional processing cores increase computing speed. This is the multi-core benchmark I have programmed so far, but there are problems. The "thread#.join();" lines all throw errors. Can someone help fix this? Keep in mind I am a beginner so can you please explain in very simple terms how to fix it or show me by putting the repaired code in your response. Here is what I have: import java.util.Calendar; import java.text.SimpleDateFormat; import java.util.Scanner; import java.text.*; import java.util.concurrent.*; public class SciFair { /** * Numa Robertson * 1/13/11 * Science Fair 2011 */ public static String now(String dateFormat) { Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat(dateFormat); return sdf.format(cal.getTime()); } public static void main(String[] args) { Scanner dataIn = new Scanner(System.in); DecimalFormat timeInSeconds = new DecimalFormat("##.###"); System.out.println("Are you ready to begin the benchmark? "); String response = dataIn.nextLine(); double endNum = 0; if(response.equals("Yes") || response.equals("yes") || response.equals("Ok") || response.equals("ok")) { System.out.println("Benchmark starting at " + SciFair.now("H:mm:ss:SSS") + "."); String startTimeHours = SciFair.now("H"); String startTimeMinutes = SciFair.now("mm"); String startTimeSeconds = SciFair.now("ss"); String startTimeMilliseconds = SciFair.now("SSS"); double startTimeHoursNumFormat = Double.valueOf(startTimeHours.trim()).doubleValue(); double startTimeMinutesNumFormat = Double.valueOf(startTimeMinutes.trim()).doubleValue(); double startTimeSecondsNumFormat = Double.valueOf(startTimeSeconds.trim()).doubleValue(); double startTimeMillisecondsNumFormat = Double.valueOf(startTimeMilliseconds.trim()).doubleValue(); double startHoursInSeconds = (startTimeHoursNumFormat * 3600); double startMinutesInSeconds = (startTimeMinutesNumFormat * 60); double startMillisecondsInSeconds = (startTimeMillisecondsNumFormat / 1000); double startTotalSeconds = (startHoursInSeconds + startMinutesInSeconds + startTimeSecondsNumFormat + startMillisecondsInSeconds); Thread thread1 = new Thread() { public void run() { double endNum = 0; double num = 5832544225416546445465465465465465448412168546725.2655236355335649499923164684654345649874181221173246189579162421579584572121334216957951462175918894199993642446445548521652158975; for(double numberRun = 0; numberRun
