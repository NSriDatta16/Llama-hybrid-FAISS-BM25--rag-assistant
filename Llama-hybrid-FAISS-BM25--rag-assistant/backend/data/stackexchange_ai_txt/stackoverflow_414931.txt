[site]: stackoverflow
[post_id]: 414931
[parent_id]: 
[tags]: 
ASP.Net Mvc - Is it acceptable for the View to call functions which may cause data retrieval?

I am currently playing around with the Asp.Net mvc framework and loving it compared to the classic asp.net way. One thing I am mooting is whether or not it is acceptable for a View to cause (indirectly) access to the database? For example, I am using the controller to populate a custom data class with all the information I think the View needs to go about doing its job, however as I am passing objects to the view it also can cause database reads. A quick pseudo example. public interface IProduct { /* Some Members */ /* Some Methods */ decimal GetDiscount(); } public class Product : IProduct { public decimal GetDiscount(){ ... /* causes database access */ } } If the View has access to the Product class (it gets passed an IProduct object), it can call GetDiscount() and cause database access. I am thinking of ways to prevent this. Currently I am only coming up with multiple interface inheritance for the Product class. Instead of implementing just IProduct it would now implement IProduct and IProductView . IProductView would list the members of the class, IProduct would contain the method calls which could cause database access. The 'View' will only know about the IProductView interface onto the class and be unable to call methods which cause data access. I have other vague thoughts about 'locking' an object before it is passed to the view, but I can foresee huge scope for side effects with such a method. So, My questions: Are there any best practices regarding this issue? How do other people using MVC stop the View being naughty and doing more to objects than they should?
