[site]: crossvalidated
[post_id]: 305251
[parent_id]: 193793
[tags]: 
It's important not to confuse kernels with feature maps . The kernels are the masks used to perform convolution on your input image. The feature maps are the result of the convolution, your new filtered images. I feel like the answer by @yasin.yazici explains well how to choose the number of feature maps one would like to use at each layer of a CNN, but does not answer the original question : "So how can we calculate number of kernels?" The number of kernels is tipically the same than the number of resulting feature maps. Say we are using same-size convolutions, on images of 32x32 pixels, and 2D kernels of 3x3 elements. We can separate two different cases for more clarity. (also note that in that context, the terms feature map , representation , and channels are equivalent, just as kernel , filter and mask are also synonyms of each other) First case : 1 to X feature maps : 2D convolution on a single-channel (gray color scale) image from which we would like to build two different representations (2 feature maps) will require two different kernels. We will use two 3x3 kernels to perform convolutions from a 32x32 input image to two different 32x32 feature maps (32x32x1 to 32x32x2). Second case : Y to X feature maps : If we aim to build two representations of an RGB image (3 channels) we will still need two kernels, but each kernels will need to have as many channels as the input image. In other words we will need two (3x3x3) kernels, or equivalently we can say that we trained six different (3x3) masks. So we use two 3x3x3 kernels to perform convolutions to go from a 32x32x3 input image to two different 32x32 feature maps (32x32x3 to 32x32x2). I think this image explains it well (taken from this great gitbook ) :
