[site]: stackoverflow
[post_id]: 1616583
[parent_id]: 1616090
[tags]: 
I don't like it when people say "Practice X is never bad; if it doesn't work, you're not doing it right." Sorry, it has the same feel as any other over-zealous religious dogma. I don't buy it. I agree with those folks who say that the best solution your time and money can afford should be the goal. Anyone who objects to TDD should not automatically be accused of disregarding quality. ("So when did you stop beating your wife?") The fact is that software has bugs in it, and the cost of eliminating all of them has to be weighed against the benefit. The same holds true in manufacturing. Tolerances on dimensions and finishes on surfaces are not all the same, because sometimes a close tolerance and a mirror finish aren't warranted. Yes, I write unit tests, although not often before I write the class. I've seen the effect of tests on design. I measure and watch code coverage. If I find that my coverage isn't acceptable, I write more tests. I understand the benefit of a safety net of unit tests for refactoring. I follow those practices even when I'm working alone, because I've experienced the benefits first-hand. I get it. But I'd look askance at any teammate that started bugging me about "eating, sleeping, and breathing unit testing and TDD." My manager says that the only way that will get me a promotion is if I can get the team to TDD/BDD. Ever think that maybe this makes you sound like a suck-up? Have you found that your nagging has alienated the rest of your team? This response might lose me a few reputation points, but it had to be said. I think a better approach would be to practice it yourself and let others see the benefit. Lead by example. It'll be far more persuasive than running your mouth. Geez, Grails has test generation built-in. If you're working on a team that uses Grails, how much more selling is needed?
