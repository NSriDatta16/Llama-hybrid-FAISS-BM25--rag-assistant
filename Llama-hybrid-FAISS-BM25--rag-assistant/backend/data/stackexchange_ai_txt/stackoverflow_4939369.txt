[site]: stackoverflow
[post_id]: 4939369
[parent_id]: 4935284
[tags]: 
I would recommend making the line a seperate object that gets created once you release the mouse. To do so create a new class: class line(QtGui.QWidget): def __init__(self, point1, point2): self.p1 = point1 self.p2 = point2 def paintEvent(self,event): painter=QPainter() painter.begin(self) painter.setPen(QPen(Qt.darkGray,3)) painter.drawLine(self.p1,self.p2) painter.end() Then I would define your mouse events like follows. def mousePressEvent(self,event): self.startx=event.x() self.starty=event.y() def mouseReleaseEvent(self,event): self.endx=event.x() self.endy=event.y() newLine = line(QtCore.QPoint(self.startx, self.starty), QtCore.QPoint(self.endx, self.endy)) This should allow the user to click and drag the mouse and then upon releasing the mouse it should draw the line and not effect whatever else is drawn. I usually do things in QGraphicsScenes and it is a little bit different, but the concept should be about the same for this. If you want to have the line being drawn as the user drags the mouse I know how to do that also, but the way I know is much more complicated than this and I would recommend using a QGraphicsScene to handle that, just message me if you want me to explain how I have done it.
