[site]: stackoverflow
[post_id]: 3949112
[parent_id]: 
[tags]: 
FBOs render to texture and glReadPixels

I have set up FBOs (GL_FRAMEBUFFER_EXT, color and depth buffers) and my app is rendering a simple OpenGL 3D object (a rotating teapot) to texture with a NULL image. I am trying to capture pixel data using glReadPixels. I see the 3D object correctly on the screen. But glReadPixels gives junk data. I wonder where I am going wrong. Any help/pointers is appreciated. Code is given below (in brief) - glEnable(GL_TEXTURE_2D); // Enable texturing so we can bind our frame buffer texture glEnable(GL_DEPTH_TEST); // Enable depth testing // Initialize the FBO int WIDTH=window_width; int HEIGHT=window_height; glGenTextures(1, &fbo_texture); // Generate one texture glBindTexture(GL_TEXTURE_2D, fbo_texture); // Bind the texture fbo_texture glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, window_width, window_height, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL); // Create a standard texture with the width and height of our window // Setup the basic texture parameters glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE); glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR); ...... ...... // setup depth buffer glGenRenderbuffersEXT(1, &fbo_depth); // Generate one render buffer and store the ID in fbo_depth glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, fbo_depth); // Bind the fbo_depth render buffer glRenderbufferStorageEXT(GL_RENDERBUFFER_EXT, GL_DEPTH_COMPONENT, window_width, window_height); // Set the render buffer storage to be a depth component, with a width and height of the window glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, GL_DEPTH_ATTACHMENT_EXT, GL_RENDERBUFFER_EXT, fbo_depth); // Set the render buffer of this buffer to the depth buffer .... ..... //set up FBO glGenFramebuffersEXT(1, &fbo); // Generate one frame buffer and store the ID in fbo glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, fbo); // Bind our frame buffer glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, GL_TEXTURE_2D, fbo_texture, 0); // Attach the texture fbo_texture to the color buffer in our frame buffer glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, GL_DEPTH_ATTACHMENT_EXT, GL_RENDERBUFFER_EXT, fbo_depth); // Attach the depth buffer fbo_depth to our frame buffer GLenum status = glCheckFramebufferStatusEXT(GL_FRAMEBUFFER_EXT); // Check that status of our generated frame buffer if (status != GL_FRAMEBUFFER_COMPLETE_EXT) // If the frame buffer does not report back as complete { std::cout
