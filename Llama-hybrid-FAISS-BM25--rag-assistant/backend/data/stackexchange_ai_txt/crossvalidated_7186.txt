[site]: crossvalidated
[post_id]: 7186
[parent_id]: 3
[tags]: 
First of all let me tell you that in my opinion the best tool of all by far is R, which has tons of libraries and utilities I am not going to enumerate here. Let me expand the discussion about weka There is a library for R, which is called RWeka, which you can easily install in R, and use many of the functionalities from this great program along with the ones in R, let me give you a code example for doing a simple decision tree read from a standard database that comes with this package (it is also very easy to draw the resulting tree but I am going to let you do the research about how to do it, which is in the RWeka documentation: library(RWeka) iris There are also several python libraries for doing this (python is very very easy to learn) First let me enumerate the packages you can use, I am not going to go in detail about them; Weka (yes you have a library for python), NLKT (the most famous open source package for textmining besides datamining), statPy , sickits , and scipy. There is also orange which is excellent (I will also talk about it later), here is a code example for doing a tree from the data in the table cmpart1, that also performs 10 folds validation, you can also graph the tree import orange, orngMySQL, orngTree data = orange.ExampleTable("c:\\python26\\orange\\cmpart1.tab") domain=data.domain n=10 buck=len(data)/n l2=[] for i in range(n): tmp=[] if i==n-1: tmp=data[n*buck:] else: tmp=data[buck*i:buck*(i+1)] l2.append(tmp) train=[] test=[] di={'yy':0,'yn':0,'ny':0,'nn':0} for i in range(n): train=[] test=[] for j in range(n): if j==i: test=l2[i] else: train.extend(l2[j]) print "-----" trai=orange.Example(domain, train) tree = orngTree.TreeLearner(train) for ins in test: d1= ins.getclass() d2=tree(ins) print d1 print d2 ind=str(d1)+str(d2) di[ind]=di[ind]+1 print di To end with some other packages I used and found interesting Orange :data visualization and analysis for novice and experts. Data mining through visual programming or Python scripting. Components for machine learning. Extensions for bioinformatics and text mining. (I personally recommend this, I used it a lot integrating it in python and it was excelent) I can send you some python code if you want me to. ROSETTA : toolkit for analyzing tabular data within the framework of rough set theory. ROSETTA is designed to support the overall data mining and knowledge discovery process: From initial browsing and preprocessing of the data, via computation of minimal attribute sets and generation of if-then rules or descriptive patterns, to validation and analysis of the induced rules or patterns.(This I also enjoyed using very much) KEEL :assess evolutionary algorithms for Data Mining problems including regression, classification, clustering, pattern mining and so on. It allows us to perform a complete analysis of any learning model in comparison to existing ones, including a statistical test module for comparison. DataPlot : for scientific visualization, statistical analysis, and non-linear modeling. The target Dataplot user is the researcher and analyst engaged in the characterization, modeling, visualization, analysis, monitoring, and optimization of scientific and engineering processes. Openstats : Includes A Statistics and Measurement Primer, Descriptive Statistics, Simple Comparisons, Analyses of Variance, Correlation, Multiple Regression, Interrupted Time Series, Multivariate Statistics, Non-Parametric Statistics, Measurement, Statistical Process Control, Financial Procedures, Neural Networks, Simulation.
