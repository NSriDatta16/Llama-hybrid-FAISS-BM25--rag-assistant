[site]: stackoverflow
[post_id]: 2437028
[parent_id]: 2436984
[tags]: 
Hmmm...my idea of Design By Contract doesn't mesh well with yours. DbC is more about defining the "other" aspects of interaction beyond method signatures (which is all that most programming languages enforce). So, you define things like "invariants" (things that are always true, such as Stack.Count >= 0 ) or "pre-conditions" (things that must be true to execute a piece of code, such as Stack.Pop requires Stack.Count > 0 ), etc. That being said - I'd advise you to look into Test (or Behavior) Driven Design (TDD or BDD). It suggests writing unit tests not only to test your code, but to drive your design. As such, it addresses your 3 points: know the majority of methods you will be needing up front so well? No need to. You don't write a method until you have a test (client code) that requires it. keep yourself from resisting the urge to start coding right away? No need to. Just start coding the specifications (as unit tests) instead of the actual code. Then fill out the actual code to fulfill the specs. deal with code that comes to mind when you are designing the interfaces? Write a unit test that shows the missing functionality. You can either make it pass now, or leave the actual code for later - the failing unit test will force you to write the code at some point. I'm not an expert on TDD, nor do I even consider myself a practitioner. There are a lot of worthwhile ideas in it, however. You should research it, try it, and see if it helps you organize yourself.
