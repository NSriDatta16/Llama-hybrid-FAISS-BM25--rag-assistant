[site]: stackoverflow
[post_id]: 830706
[parent_id]: 830657
[tags]: 
You might look at the Builder pattern advocated by Joshua Bloch, and described in Effective Java . There's a presentation with the main points at http://developers.sun.com/learning/javaoneonline/2007/pdf/TS-2689.pdf ; no doubt you could dig up a better reference. Basically, you have another class, probably an inner class, which provides methods named after the properties being set, and which return the original builder so you can chain calls. It makes for quite a readable chunk of code. For example, let's suppose I have a simple Message with a few properties. The client code constructing this could use a builder to prepare a Message as follows: Message message = new Message.Builder() .sender( new User( ... ) ) .recipient( new User( ... ) ) .subject( "Hello, world!" ) .text( messageText ) .build(); A fragment of Message.Builder might look similar to the following: public class Builder { private User sender = null; // Other properties public Builder sender( User sender ) { this.sender = sender; return this; } // Methods for other properties public Message build() { Message message = new Message(); message.setSender( sender ); // Set the other properties return message; } }
