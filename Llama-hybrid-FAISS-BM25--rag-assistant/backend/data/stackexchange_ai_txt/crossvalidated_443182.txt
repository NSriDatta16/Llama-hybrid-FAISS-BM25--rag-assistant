[site]: crossvalidated
[post_id]: 443182
[parent_id]: 443117
[tags]: 
While it cannot create the table in exactly how you specified, you can calculate risk ratios (and other measures) using the zEpid library. This library supports both calculating from summary counts (details here ) and directly from pandas DataFrame objects (details here ). The library does not directly calculate p-values, but you can easily do this by a little extra code. Below is a quick example and code snippet for the pandas DataFrame object import numpy as np import pandas as pd from scipy.stats import norm from zepid import RiskRatio # creating an example data set df = pd.DataFrame() df['A'] = [1, 0, 1, 0, 1, 1] df['B'] = [1, 1, 0, 0, 0, 0] # calculating risk ratio rr = RiskRatio() rr.fit(df, exposure='A', outcome='B') # calculating p-value est= rr.results['RiskRatio'][1] std = rr.results['SD(RR)'][1] z_score = np.log(est)/std p_value = norm.sf(abs(z_score))*2 You can easily generalize this by using the following function def calculate_pvalue(data, exposure, outcome): rr = RiskRatio() rr.fit(data, exposure=exposure, outcome=outcome) # calculating p-value est = rr.results['RiskRatio'][1] std = rr.results['SD(RR)'][1] z_score = np.log(est) / std p_value = norm.sf(abs(z_score)) * 2 return est, p_value Disclosure: I am the creator of this library. I don't have p-values directly calculated to discourage the misuse of statistical significance. I would recommend reporting confidence intervals over p-values, since they provide more information than a p-value.
