[site]: stackoverflow
[post_id]: 396192
[parent_id]: 395982
[tags]: 
Here's the more pragmatic answer. It rarely matters " What is a metaclass in Python ". Bottom line, type is the metaclass of all classes. You have almost no practical use for this. class X(object): pass type(X) == type " What are your (concrete) use cases for metaclasses in Python? ". Bottom line. None. " Python's Super is nifty, but you can't use it ". Interesting note, but little practical value. You'll never have a need for resolving complex multiple inheritance networks. It's easy to prevent this problem from arising by using an explicity Strategy design instead of multiple inheritance. Here's my experience over the last 7 years of Python programming. A class has 1 or more superclasses forming a simple chain from my class to object . The concept of "class" is defined by a metaclass named type . I might want to extend the concept of "class", but so far, it's never come up in practice. Not once. type always does the right thing. Using super works out really well in practice. It allows a subclass to defer to it's superclass. It happens to show up in these metaclass examples because they're extending the built-in metaclass, type . However, in all subclass situations, you'll make use of super to extend a superclass. Metaclasses The metaclass issue is this: Every object has a reference to it's type definition, or "class". A class is, itself, also an object. Therefore a object of type class has a reference to it's type or "class". The "class" of a "class" is a metaclass. Since a "class" isn't a C++ run-time object, this doesn't happen in C++. It does happen in Java, Smalltalk and Python. A metaclass defines the behavior of a class object. 90% of your interaction with a class is to ask the class to create a new object. 10% of the time, you'll be using class methods or class variables ("static" in C++ or Java parlance.) I have found a few use cases for class-level methods. I have almost no use cases for class variables. I've never had a situation to change the way object construction works.
