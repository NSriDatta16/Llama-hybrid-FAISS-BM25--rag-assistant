[site]: stackoverflow
[post_id]: 1591704
[parent_id]: 1589730
[tags]: 
Assuming this is something like a server that's waiting for a request, could you do this? Make two classes, Server and Worker. Server only listens and launches Worker when required. If Worker has never been initialised, initialise it. After Worker has finished doing whatever it needed to do, serialize it, write it to disk, and set the Worker object to null. Wait for a request. When a request is received, read the serialized Worker object from disk and load it into memory. Perform Worker tasks, when done, serialize, write out and set Worker object to null. Rinse and repeat. This means that the memory-intensive Worker object gets unloaded from memory (when the gc next runs, and you can encourage the gc to run by calling System.gc() after setting the Worker object to null), but since you saved it's state, you have the ability to reload it from disk and let it do it's work without going through initialization again. If it needs to run every "x" hours, you can put a java.util.Timer in the Server class instead of listening on a socket. EDIT: There is also a JVM option -Xmx which sets the maximum size of the JVM's heap. This is probably not helpful in this case, but just thought I'd throw it in there.
