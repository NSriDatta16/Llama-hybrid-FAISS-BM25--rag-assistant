[site]: stackoverflow
[post_id]: 1964761
[parent_id]: 1964722
[tags]: 
I don't have specific experience with the memory manager you are considering, but here are some general guidelines that may help: If you do not expect a shortage of memory, Option 1 would be best because as you state it is fast (faster than 2?), and having separate pools will make it easier to spot allocation/deallocation/buffer issues (assuming the pool manager has decent error detection capabilities). If memory could be an issue (as in your game will take a lot of memory compared to the target platform's commonly available memory), having one large pool will provide more efficient use of memory. Also, if you cannot accurately predict the average and maximum memory requirements per pool, this is a better choice unless the memory manager can dynamically grow the memory pools (and ideally dynamically release blocks from the pool as well). The only downsides to 2 that I see are that it could be slower (is it so?), and errors in memory management could be harder to detect. You might get the best of both worlds (assuming speed is similar) by developing with multiple pools, but doing final testing and the production release with a single pool. That way, you can spot allocation/management issues during development but still benefit from the potentially more efficient single pool.
