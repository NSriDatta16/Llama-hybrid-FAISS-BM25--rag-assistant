[site]: stackoverflow
[post_id]: 3115015
[parent_id]: 3111448
[tags]: 
First, let's extend Seq with a sortWith function same as List and Array have. namespace Microsoft.FSharp.Collections module Seq = let sortWith f e = let e' = e |> Seq.toArray e' |> Array.sortInPlaceWith f e' |> Seq.readonly Next, let's extend Operators with an often useful flip function. namespace Microsoft.FSharp.Core module Operators = let flip f x y = f y x Now, we can leverage the generic compare function for generic (you can use this with any sequence of comparable elements) and safe (in regard to Brian's observation) reverse sequence sort. {0..10} |> Seq.sortWith (flip compare) |> Seq.iter (printfn "%A")
