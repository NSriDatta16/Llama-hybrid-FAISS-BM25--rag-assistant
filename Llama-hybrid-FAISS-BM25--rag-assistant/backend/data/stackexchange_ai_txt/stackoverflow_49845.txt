[site]: stackoverflow
[post_id]: 49845
[parent_id]: 49582
[tags]: 
if you want to have re-runnability in your scripts, then you can't have them as definitions... what I mean by this is that you need to focus on change scripts rather than here is my Table script. let's say you have a table Customers: create table Customers ( id int identity(1,1) primary key, first_name varchar(255) not null, last_name varchar(255) not null ) and later you want to add a status column. Don't modify your original table script, that one has already run (and can have the if(! exists) syntax to prevent it from causing errors while running again). Instead, have a new script, called add_customer_status.sql in this script you'll have something like: alter table Customers add column status varchar(50) null update Customers set status = 'Silver' where status is null alter table Customers alter column status varchar(50) not null Again you can wrap this with an if(! exists) block to allow re-running, but here we've leveraged the notion that this is a change script, and we adapt the database accordingly. If there is data already in the customers table then we're still okay, since we add the column, seed it with data, then add the not null constraint. Both of the migration frameworks mentioned above are good, I've also had excellent experience with MigratorDotNet .
