[site]: stackoverflow
[post_id]: 4374613
[parent_id]: 4373917
[tags]: 
Although this is not really an answer to your question, I have to say it: Implementing encryption algorithms yourself is a really bad idea in most cases. Let me explain: Cryptography is hard. There are few people that understand it good enough to invent their own algorithms and even they seek the help of others to verify, that it is not breakable in a second. Even when using an existing algorithm that is proven to be good enough for ones intentions, it's still a bad idea, because there are more than enough possibilities for subtle errors, that break the implementation of a otherwise safe algorithm. That has happened so many times, that I lost count of how often. And even if you are really lucky and diligent and pull a perfect implementation, it's a waste of time and resources not tu use an existing implementation that has already been developed and tested and proven. And a word about DES, although I hope you know that: Pure DES is considered really weak for todays standard. So you should implement 3DES which is better. Edit: OK, after all that talking, and after realizing that this seems to be a homework assignment (thanks for the heads up), I dug a little into DES. Here's what I got so far: DES is a block cipher, operating on 64 bit Blocks. There are several different modes of operation . They do determine how the clear text is to be devided into the 64 bit blocks. Some of the modes require padding , that means you fill the last block with data, that you can remove after decrypting the cipher text. The Padding paragraph in the Wikipedia article above contains a description about how padding was used in DES. So much for the theory, how to go about that in Java... byte[] bytesOfString = clearTextString.getBytes(); That gives you an array of byte for the string you have to encrypt. The rest is simple counting and adding... I hope this revised answer is more useful to you.
