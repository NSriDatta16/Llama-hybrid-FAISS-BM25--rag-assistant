[site]: stackoverflow
[post_id]: 1741576
[parent_id]: 1710837
[tags]: 
For general solutions you can look at the link provided by Juha. But following your question, I'd like to describe, how it is done in our project. We do not use any general solution for caches. Our cache grew eventually. Initially we had no intention to use the cache at all. But later the cache was born. As the cache was added to the system lately, it is not aware of any "database" or other "smart things". Instead, we carefully check if somebody changes the cache. So, I'd call our cache "algorithm-driven". (The only really necessary general thing is the functionality to treat the miss in the cache. And another thing worth attention is identification with clients: if you have multiple clients, one cache can be not enough... But for both problems only specific solutions were added, not general!) I know, to describe such a basic functionality may sound silly. One may say that "we had to use the normal cache in the first place". But you know, in reality sometimes some things are just out of your control and you just have to do the best you can. So to summarize: we need no general solution. Our algorithms control the cache. This keeps the cache small (both in code and in memory during run time). That is our approach.
