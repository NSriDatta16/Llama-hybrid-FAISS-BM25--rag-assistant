[site]: stackoverflow
[post_id]: 4675610
[parent_id]: 4666598
[tags]: 
Here is the C99 standard ; "self-promoting" types are those which promote to themselves when the default argument promotions (§6.5.2.2 paragraph 6, referencing the integer promotions described in §6.3.1.1) are applied. My reading of the va_arg definition (§7.15.1.1) is that this limitation is implied by the standard. The relevant part is in paragraph 2: [...] or if type is not compatible with the type of the actual next argument (as promoted according to the default argument promotions) [...] which is quite clear about the type of the actual next argument being promoted, but I read as not saying anything about type being promoted. (I think the "(as promoted...)" clause is just a reminder that default argument promotions are performed on the trailing arguments when a varargs function is called.) This item in the list of undefined behaviour in §J.2 supports this reading: — The va_arg macro is invoked when there is no actual next argument, or with a specified type that is not compatible with the promoted type of the actual next argument, with certain exceptions (7.15.1.1). (although yes, I know, Annex J is "informative" rather than "normative"...). In which case: va_arg(ap, float) (for example) cannot be valid - type in that case is float , but the promoted type of the actual next argument cannot possibly be float (a float argument would be promoted to double ).
