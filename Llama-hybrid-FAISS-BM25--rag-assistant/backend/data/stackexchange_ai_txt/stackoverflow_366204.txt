[site]: stackoverflow
[post_id]: 366204
[parent_id]: 366175
[tags]: 
You are asking to drink from a firehose. Let me encourage you to write some small programs before you tackle big ones. However, here are a few books about design and a paper which argues that a lot of design can't be learned from books: On System Design is a good short paper that articulates what a lot of experienced programmers think about the art of design. Programming Pearls by Jon Bentley presents some lovely examples of design in the small . It's a fun read and includes many classic stories. The Unix Programming Environment by Kernighan and Pike presents one of the great software-design philosophies of the 20th century. Still required reading after almost 25 years. Software Tools in Pascal is narrower and deeper but will tell you a lot about the specifics of building software tools and the design philosophy. Abstraction and Specification in Program Development by Barbara Liskov and John Guttag will teach you how to design individual modules so they can fit with other modules to form great libraries. It is out of print but your local University library may have it. C Interfaces and Implementations presents a very well designed library that gives C programmers the abstractions found in much higher-level languages. Finally, Test-Driven Development will teach you how to articulate and develop a design through the stuff that matters: what your software actually does. I learned a lot from Composite/Structured Design by Glenford Myers, but it bears a little less directly on the topics you asked about. It talks primarily about good and bad ways modules can interdepend .
