[site]: stackoverflow
[post_id]: 3375045
[parent_id]: 3372902
[tags]: 
Here is something that will work for ASP.Net. You could create an RowDataBound event and hide the label or the DropDownList ... > ... and in your code behind: protected void thingsGrid_RowDataBound(object sender, GridViewRowEventArgs e) { if (e.Row.RowType == DataControlRowType.DataRow) { var boundData = e.Row.DataItem; ... if (boundDataMeetsCondition) { e.Row.Cells[4].FindControl("editThingDropDownList").Visible = false; e.Row.Cells[4].FindControl("editThingLabel").Visible = true;//* } else { ... } } } *note this is less than ideal because it hard codes the cell index, and the ID of the controls is a string that wont be checked until runtime. There are much more elegant ways to solve this problem in asp.net mvc. the OnRowDataBound is a sledge hammer that will give you full access to your grid, page methods, and your entire application. In a very simple scenario you could also do it inline without involving the codebehind. ' Text=' '> or ' Text=' '> in the first inline approach, your data source has to expose such a property, and in the second you are hard coding your specialValue business logic into your presentation, which is also ugly and will lead to problems with maintainability.
