[site]: stackoverflow
[post_id]: 356583
[parent_id]: 
[tags]: 
can I reflectively instantiate a generic type in java?

Is it possible to reflectively instantiate a generic type in Java? Using the technique described here I get an error because class tokens cannot be generic. Take the example below. I want to instantiate some subclass of Creator that implements Creator. The actual class name is passed in as a command line argument. The idea is to be able to specify an implementation of Creator at runtime. Is there another way to accomplish what I'm trying to do here? public interface Creator { T create(); } public class StringCreator implements Creator { public String create() { return new String(); } } public class FancyStringCreator implements Creator { public String create() { return new StringBuffer().toString(); } } public static void main(String[] args) throws Exception { Class someClass = Class.forName(args[0]); /*ERROR*/Class > creatorClass = someClass.asSubclass(Creator.class); Constructor > creatorCtor = creatorClass.getConstructor((Class []) null); Creator creator = creatorCtor.newInstance((Object[]) null); } Edit: I like Marcus' approach as being the most simple and pragmatic without circumventing the whole generics thing. I can use it in my situation because I can specify that the class passed must be a subclass of StringCreator. But as Ericson pointed out the generic information is still there at the type level, just not at the runtime level so it is still possible to reflectively examine whether a given class implements the correct generic type.
