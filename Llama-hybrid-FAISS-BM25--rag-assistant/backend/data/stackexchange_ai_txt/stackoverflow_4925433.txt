[site]: stackoverflow
[post_id]: 4925433
[parent_id]: 
[tags]: 
iPhone SDK - Optimize a for loop

I'm developing an image processing application and I'm looking for an advise to tune my code. My need is to split the image into blocs (80x80), and for each blocs, calculate the average color. My first method contains the main loops where the second method is called : - (NSArray*)getRGBAsFromImage:(UIImage *)image { int width = image.size.width; int height = image.size.height; int blocPerRow = 80; int blocPerCol = 80; int pixelPerRowBloc = width / blocPerRow; int pixelPerColBloc = height / blocPerCol; int xx,yy; // Row loop for (int i=0; i My second method browses the pixel bloc and returns a ColorStruct : - (ColorStruct*)getRGBAsFromImageBloc:(UIImage*)image atX:(int)xx andY:(int)yy withPixelPerRow:(int)pixelPerRow AndPixelPerCol:(int)pixelPerCol { // First get the image into your data buffer CGImageRef imageRef = [image CGImage]; NSUInteger width = CGImageGetWidth(imageRef); NSUInteger height = CGImageGetHeight(imageRef); CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB(); unsigned char *rawData = malloc(height * width * 4); NSUInteger bytesPerPixel = 4; NSUInteger bytesPerRow = bytesPerPixel * width; NSUInteger bitsPerComponent = 8; CGContextRef context = CGBitmapContextCreate(rawData, width, height, bitsPerComponent, bytesPerRow, colorSpace, kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big); CGColorSpaceRelease(colorSpace); CGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef); CGContextRelease(context); // Now your rawData contains the image data in the RGBA8888 pixel format. int byteIndex = (bytesPerRow * yy) + xx * bytesPerPixel; int red = 0; int green = 0; int blue = 0; int alpha = 0; int currentAlpha; // bloc loop for (int i = 0 ; i ColorStruct : typedef struct { int red; int blue; int green; } ColorStruct; with constructor : ColorStruct *newColorStruct(int red, int blue, int green) { ColorStruct *ret = malloc(sizeof(ColorStruct)); ret->red = red; ret->blue = blue; ret->green = green; return ret; } As you can see, I have three level of loop : the row loop, the colon loop, and the bloc loop. I have tested my code and it takes about 5 to 6 seconds for an 320x480 pictures. Any help is welcomed. Thanks, Bahaaldine
