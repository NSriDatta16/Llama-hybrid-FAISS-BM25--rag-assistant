[site]: stackoverflow
[post_id]: 1749189
[parent_id]: 1747744
[tags]: 
This depends very much on the quality of you codebase. If you have nicely encapsulated classes/components that interact through well defined interfaces, it should not be to hard to seperate those into different projects. Also, before you start, think about what you want to achieve. Are there reusable or platform dependent components in the system that you want to isolate? In my department, we have written a set of Visual C++ 2005 Wizards that make sure, that all newly created projects comply to a certain directory structure and organisation (e.g. we can automatically create unit test projects for our libraries). We also use them to make sure that reusable components can be included via SVN externals, which really saves a lot of work. So, before you look any further, make sure you get you requirements right.
