[site]: stackoverflow
[post_id]: 4795213
[parent_id]: 4795103
[tags]: 
Kind of a chicken and egg thing going on here, when you create your arrays object you need to specify the size of the array. However you can't do that until you have looked in the directories. Running over the directory list twice would be a bad idea. I would suggest that you use a System.Collections.Generic.List object as an intermediary as this negates the need to specify the size of the initial string array, you can then convert that to your string array (in fact you may not need to do that at all depending on what you app is doing with your arrays object. For example: System.Collections.Generic.List filesList = new System.Collections.Generic.List (); string path = @"c:\my\directory\"; foreach (string directory in System.IO.Directory.GetDirectories(path)) { foreach (string file in System.IO.Directory.GetFiles(directory)) { filesList.Add(file); } } string[] filesArray = filesList.ToArray(); EDIT : Updated code sample with a defensive directory exists check and also retrieval of files from the base directory: System.Collections.Generic.List filesList = new System.Collections.Generic.List (); string path = @"c:\my\directory\"; if (System.IO.Directory.Exists(path)) { //Get files for the base path string[] baseDirectoryFiles = System.IO.Directory.GetFiles(path); filesList.AddRange(baseDirectoryFiles); // Get files in subdirectories (first level) of base path foreach (string directory in System.IO.Directory.GetDirectories(path)) { string[] directoryFiles = System.IO.Directory.GetFiles(directory); filesList.AddRange(directoryFiles); } string[] filesArray = filesList.ToArray(); } else { //Your directory was not found on the filesystem //handle as appropriate } This will get all files in the base directory and the first level of sub directories, it will not however get file names from sub directories of sub directories. To support that you should look at a recursive method. EDIT Here is a sample that show how to do this recursively, and therefore get all files from all directories regardless of depth: private void MyMethod() { List fileNames = new List (); GetFileNames(@"C:\my\base\directory", fileNames); } private void GetFileNames(string directory, List files) { files.AddRange(System.IO.Directory.GetFiles(directory)); foreach(string subDirectory in System.IO.Directory.GetDirectories(directory)) { GetFileNames(subDirectory, files); } }
