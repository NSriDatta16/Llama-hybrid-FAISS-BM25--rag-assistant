[site]: stackoverflow
[post_id]: 3424963
[parent_id]: 3411948
[tags]: 
A ViewModel is generally defined to be a View on a Model, i.e. it exists to mediate between the Model and a View. While it would be perfectly possible to have a ViewModel that is generic enough to mediate for multiple Model types, in practice the reverse is true and multiple ViewModels may exist for a single Model type, particularly in those cases where a single Model needs to be rendered in different ways in different parts of the application. Also, I normally treat the Model as being a simple data object and implement retrieval and persistence logic in a separate service which can be passed in using dependency injection. Having said that, there is nothign wrong with building persistence logic directly into the model if that fits your scenario better. I do prefer, though, to split that layer out so as to allow for easier testing via mocking.
