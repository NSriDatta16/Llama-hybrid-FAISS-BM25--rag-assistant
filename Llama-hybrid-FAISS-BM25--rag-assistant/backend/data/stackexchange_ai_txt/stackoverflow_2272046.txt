[site]: stackoverflow
[post_id]: 2272046
[parent_id]: 2271976
[tags]: 
I agree with unwind. When forced to use static allocation, I usually allocate those blocks within the scope that they are used, i.e. within the function itself. i.e. static char *createstring(char *foo, char *bar) { static char ret[size]; /* do some work, make sure you pay attention to the printf sub system when it tells you how many bytes weren't printed ... */ return ret; } .. of course, ensuring that entry into createstring() is protected by some sort of mutual exclusion and that callers don't need to modify the result. Depending on your compiler, YMMV. Do you really need to make those global?
