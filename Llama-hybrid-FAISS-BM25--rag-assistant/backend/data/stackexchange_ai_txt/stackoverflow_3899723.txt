[site]: stackoverflow
[post_id]: 3899723
[parent_id]: 3898660
[tags]: 
The mechanize page is not suggesting that you can emulate JavaScript in Python. It is saying that you can change a hidden field in a form, thus tricking the web server that a human 1 has selected the field. You still need to analyse the target yourself. There will be no Python-based solution to this problem, unless you wish to create a JavaScript interpreter in Python. My thoughts on this problem have led me to three possible solutions: create an XULRunner application browser automation attempt to interpret the client-side code Of those three, I've only really seen discussion of 2. I've seen something close to 1 in a commercial scraping application, where you basically create scripts by browsing on sites and selecting things on the pages that you would like the script to extract in the future. 1 could possibly made to work with a Python script by accepting a serialisation (JSON ?) of wsgi Request objects, getting the app to fetch the URL, then sending the processed page as a wsgi Response object. You could possibly wrap some middleware around urllib2 to achieve this. Overkill probably, but kind of fun to think about. 2 is usually achieved via Selenium RC (Remote Control), a testing-centric tool. It provides a few methods like getHtmlSource but most people that I've heard using it get don't like its API. 3 I have no idea about. node.js is very hot right now, but I haven't touched it. I've never been able to build spidermonkey on my Ubuntu machine, so I haven't touched that either. My hunch is that in order to do this, you would provide the HTML source and your details to a JS interpreter, that would need to fake being your User-Agent etc in case the JavaScript wanted to reconnect with the server. 1 well, more technically, a JavaScript compliant User-Agent, which is almost always a web browser used by a human
