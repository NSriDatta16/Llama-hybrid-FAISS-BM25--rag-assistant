[site]: stackoverflow
[post_id]: 1382356
[parent_id]: 1382294
[tags]: 
Interfaces are not about what a concrete class does. They are more about what the client needs, and what is substitutable in place of what the client needs. For example, instead of trying to extract an interface from a Man class, instead focus on one of the classes that use the Man class. What does it do? Perhaps it is a Conversation class that wants to make things talk to each other. If you gave it two Man classes, it could call talk() on them. But if you wanted it to be more flexible, you can abstract out the concept of what it does - makes things talk, and have it use a Talkable interface (for example). When you see a Talkable interface on this Conversation class, you shouldn't think "that is really a Man " but rather, "Where I see a Talkable , I can substitute anything that implements Talkable , whether it is a Man , Woman , Parrot , Robot , etc." If I am unclear, there are good resources available on the subject. Check out Robert Martin's Dependency Inversion Principle , Interface Segregation Principle , and Liskov Substitution Principle articles for starters.
