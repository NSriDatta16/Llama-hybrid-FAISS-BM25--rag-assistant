[site]: stackoverflow
[post_id]: 3453311
[parent_id]: 3453058
[tags]: 
You could use meta classes so that you would end up with code like: class DerivedAgent(Agent): __states__ = ['StateA', 'StateB', ...] for example: class AgentMeta(type): def __new__(meta, classname, bases, classdict): for clsname in classdict['__states__']: classdict[clsname] = type(clsname, (State,), {}) return type.__new__(meta, classname, bases, classdict)) then, just rewrite your Agent class so that it has the line #python3.x class Agent(Base1, Base2, ..., BaseN, metaclass=AgentMeta): #everything else unchanged # 2.2 If you don't want to change the Agent class, you can just include the approriate declaration of metaclass in each subclass of it that you create.
