[site]: stackoverflow
[post_id]: 1810603
[parent_id]: 
[tags]: 
Exception re-throwing through layers and usage of status codes

I searched for this for a long time (here too), have read many php codes, but still couldn't find a satisfying answer. It may seem a too wide topic, but it really sticks together - at last for me. Could you please help? In a php website I have PDO as DAL, what is used by BLL objects, and they are called from the UI. Now if something happens, PDO throws a PDOException. Of course the UI layer doesn't have to know anything about PDOExceptions, so the BLL object catches it. But now what? I have read that exceptions are for truly exceptional situations and one re-throws exceptions from lower layers in order not to get low-level exceptions in upper layers. Let me illustrate my problem (please don't pay attention to the function args): class User { function signUp() { try { //executes a PDO query //returns a code/flag/string hinting the status of the sign up: //success, username taken, etc. } catch (PDOException $e) { //take the appropriate measure, e.g. a rollback //DataAccessException gets all the information (e.g. message, stack //trace) of PDOException, and maybe adds some other information too //if not, it is like a "conversion" from PDOException to DAE throw new DataAccessException(); } } } //and in an upper layer $user = new User(); try { $status = $user->signUp(); //display a message regarding the outcome of the operation //if it was technically successful } catch (DataAccessException $e) { //a technical problem occurred //log it, and display a friendly error message //no other exception is thrown } Is this a right solution? When re-throwing the PDOException I don't think it would be appropriate to use exception chaining (as this would only make debugging information redundant; DataAccessException gets everything, including the full stack trace from PDOException). Thanks in advance.
