[site]: stackoverflow
[post_id]: 165959
[parent_id]: 165831
[tags]: 
Depending on what you're building, adopting an approach that defects are not allowed may not be appropriate. My personal opinion is that it rarely, if ever, is. The whole point of a defect management system is exactly that - to allow you to manage defects. If the defect is a show-stopping one then sure, you probably don't want to check it in, but if it's something minor or an edge case then it may make sense to check it in with the known defect as long as you're tracking it. Allowing defects to exist lets you focus on more important things - for example if you only have a limited amount of time in a release you may not have time to fix everything as well as to get all functionality in, so if it's a choice between fixing ten edge-case minor bugs, or creating a piece of value-adding functionality then the pragmatic choice may be to ship with known bugs. I'm not saying zero defects is a bad idea - in fact we strive for this by the end of each release cycle - but like many things in software development, pragmatism normally works better in the real world than puritanism.
