[site]: stackoverflow
[post_id]: 4808357
[parent_id]: 4808308
[tags]: 
Depending on what your specific requirements are this might work control access to changing the object to setters (i.e. use proper encapsulation) add a revisions array which is an Array of Strings everytime a setter is called, or any other method that changes the object, call toString and store the result this is very simple but might work for your needs and has the following pros: You could abstract it out into a base class for reuse. You could test string equality to not record a set that doesn't change anything. (compare the current change with the last element in the revisions array) You could get really fancy and have a property like 'recordChanges', so the recording only happens when true (which could be the default). This way if you are going to do a bunch of sets in a row you could record all the changes at once, instead of for each set. (i.e. create a startRecording and stopRecording method, and when you startRecording record the current state) it has the following extra work: You would have to implement a solid toString and hashCode though. Which you might have to do anyway It could be slow if you call a bunch of sets in a row, but you could mitigate that with suggestion 3 above. Finally, if you got really fancy, you could implement the Gang of Four Momento pattern . Which might be overkill for what you need (because it allows you to restore to a previous state), but would be awesome nonetheless.
