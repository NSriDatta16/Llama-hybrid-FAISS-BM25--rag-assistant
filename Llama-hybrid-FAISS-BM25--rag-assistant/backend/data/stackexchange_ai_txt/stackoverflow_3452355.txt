[site]: stackoverflow
[post_id]: 3452355
[parent_id]: 
[tags]: 
Weird Error in C++ Program: Removing Printout Breaks Program

This is a very strange problem... removing the cout in the function below causes it to stop printing the correct/expected results and printing garbage values. (i.e. it still RUNS the data it outputs, though, is wrong). Any ideas? bool extract_tension(std::vector &interfacial_tension_trap, std::vector &interfacial_tension_simp, const std::string data, const unsigned int num_slabs, const double z_min, const double z_max) { //start @ first number unsigned int start = 17; unsigned int end = 17; std::vector px; std::vector py; std::vector pz; std::vector pn_minus_pt; double result_simp=0.0; double result_trap=0.0; //skip timestep entry end=get_next_space(start, data); for(unsigned int counter=0; counter Apparently just touching any of vectors with a print statement allows the program to execute correctly (i.e. a printout involving px, py, OR pz) Here's the full program: /********************************* * * NAME: Interfacial Tension Calculator * VERSION: 0.1 * AUTHOR: Jason R. Mick * GROUP: Wayne State University, Potoff Group * COPYRIGHT: (c) Jason R. Mick 2010 * DATE: August 9, 2010 * * CHANGE LOG * VERSION DATE COMMENTS *---------------------------------------------------------------------- * 0.1 Aug. 9, 2010 Finished basic code, sans debugging * 0.5 Aug 10, 2010 Compiled and tested code fixed error in Simpson's * method where results were being divided rather * than multiplied. * * * FULL NOTES: *---------------------------------------------------------------------- * You can compile this program by typing: * g++ main.cc -o it_util * * You can run this program by typing: * it_util .log * * where z-min and z-max represent the z-axis boundaries of the system, * e.g.-- * it_util my_file.log 140 0.0 80.0 * * This program only works with NAMD *.log file output * The pressure profile MUST be turned on in your *.conf file * for the pressure profile info to dump to the *.log file. This * program requires that info. * * This program can handle 1,000+ slabs, but it has a limit to the * character buffer and thus VERY large slab counts may cause it to fail. * * A standard Composite Simpson numerical integration method is used, * which assumes a non-smooth data set. * * The interfacial tension is integrated at each step and then averaged * so pertinent statistics can be gathered. * * You can redirect the output to store the interfacial tension * statistics as follows: * it_util .log > .out * *******************************************/ #include #include #include #include #include #include //Turn on to enable all interfacial //tension results to be printed, pre-averaging //#define DEBUG true void start_integrations(const std::string filename, const unsigned int num_slabs, const double z_min, const double z_max); int main ( int argc, char *argv[] ) { struct stat file_info; std::string filename = argv[1]; int slab_count; double z_min; double z_max; if ( argc != 5 ) /* argc should be 3 for correct execution */ { /*Print out proper args syntax */ std::cout .log " " 2) { try { z_min = atof(argv[3]); try { z_max = atof(argv[4]); start_integrations(filename, static_cast (slab_count), z_min, z_max); } catch( char * str ) { /*invalid integer third input*/ std::cout my_values, const unsigned int num_points, const double x_min, const double x_max, double &results) { bool ret_val = false; bool is_even = true; double h; if (my_values.size() >= 2) { h = (x_max-x_min)/num_points; results+=my_values.front(); for (unsigned int counter=1; counter my_values, const unsigned int num_points, const double x_min, const double x_max, double &results) { bool ret_val = false; double x_incr = (x_max-x_min)/(num_points-1); if (my_values.size() >= 2) { for (unsigned int counter=1; counter counter && data.substr(counter,1).compare(" ") != 0) { counter++; } //if end of string, add one if ( data.length() == counter) counter++; return (counter-1); } bool extract_tension(std::vector &interfacial_tension_trap, std::vector &interfacial_tension_simp, const std::string data, const unsigned int num_slabs, const double z_min, const double z_max) { //start @ first number unsigned int start = 17; unsigned int end = 17; std::vector px; std::vector py; std::vector pz; std::vector pn_minus_pt; double result_simp=0.0; double result_trap=0.0; //skip timestep entry end=get_next_space(start, data); for(unsigned int counter=0; counter my_vector) { double average_val=0.0; for(unsigned int counter=0; counter my_vector) { double std_deviation=0.0; double average_val = average_vector(my_vector); for(unsigned int counter=0; counter interfacial_tension_trap; std::vector interfacial_tension_simp; std::string current_line; char * cstr_line; bool data_grab_success = true; in_file.open(filename.c_str(), std::ifstream::in); while (!in_file.eof() && data_grab_success) { cstr_line=(char *) malloc(sizeof(char)*65536); //get new line in_file.getline(cstr_line,65536); current_line = cstr_line; free(cstr_line); if (current_line.substr(0,15).compare("PRESSUREPROFILE")==0) { //pressure profile found! //process line to get the interfacial tension, check that it succeeded data_grab_success = extract_tension(interfacial_tension_trap, interfacial_tension_simp, current_line, num_slabs, z_min, z_max); } } in_file.close(); //print stats std::cout And here's a sample set of data: Removed... see explanation at end of post for link to data to use. Compile like so: g++ main.cc -o it_util Run using the command: it_util equil2_NVT_PP_318Slabs.log 318 0.0 318.0 > temp.out FYI before someone comments on my #ifdef "debug" statements, please note that they are for data dumping. I have used GDB before. I'm guessing had I not said this, someone will comment "Learn to use gdb." In this case the program loops through so many iterations, GDB doesn't give me useful info, where printouts dumped to a output file DO. NOTE: Actually I discovered that if you use the chopped down version of the file being parsed (in the data section above) the program also doesn't output the correct data. When I restored the original data file it worked, but the file is too large to post here (I tried...) so that is not an option.... Instead I've uploaded a full pastebin to here: http://pastebin.com/JasbSc7B
