[site]: stackoverflow
[post_id]: 194033
[parent_id]: 186507
[tags]: 
Hmmm.. I'm thinking that maybe a command pattern would be a good solution to this problem. Here's what I mean: This is your character class: Public class Character { //various character related variables and methods here... Command[] equipCommands; Command[] unequipCommands; public Character(Command[] p_equipCommands, Command[] p_unequipCommands) { equipCommands = p_equipCommands; unequipCommands = p_unEquipCommands; } public void itemEquiped(int itemID) { equipCommands[itemID].execute(this); } public void itemUnequiped(int itemID) { unequipCommands[itemID].execute(this); } } Here are some examples of commands: public class SwordOfDragonSlayingEquipCommand implements ItemCommand{ public void execute(Character p_character) { //There's probably a better way of doing this, but of the top of my head... p_character.addItemToInventory(Weapons.getIteM(Weapons.SWORD_OF_DRAGON_SLAYING)); //other methods that raise stats, give bonuses etc. here... } } public class SwordOfDragonSlayingUnequipCommand implements ItemCommand{ public void execute(Character p_character) { //There's probably a better way of doing this, but of the top of my head... p_character.removeItemFromInventory(Weapons.getIteM(Weapons.SWORD_OF_DRAGON_SLAYING)); //other methods that lower stats, remove bonuses etc. here... } } Of course, this is just a suggestion and definitely open for debate, I'm not saying that this is the best or the only way to do this...
