[site]: stackoverflow
[post_id]: 5451949
[parent_id]: 5451643
[tags]: 
There's probably a much more elegant way, but this is what I came up with: (defn f ([xs] (f xs [] [])) ([[x & xs :as all] acc a] (if (seq all) (if x (recur xs [] (conj a (conj acc x))) (recur xs (conj acc x) a)) a))) It just traverses the sequence keeping track of the current vector of falses, and a big accumulator of everything so far.
