[site]: stackoverflow
[post_id]: 1407147
[parent_id]: 1405295
[tags]: 
The good news is that you haven't stepped directly into the common Lua pessimization of concatenating strings to a buffer in a loop to build your output. I would write your sample like this: function buildTable(fileName, data) local t = {} t[#t+1] = { Type = "type1", Key = "someKey", Value = data.SomethingInteresting } --and so on ad nauseum with an occasional but of actual logic to spice things up dataWriter:open(fileName .. ".bla") dataWriter:batchWrite(t) dataWriter:close() end which has the small advantage of not using a long typo-prone name for the temporary table, and uses the t[#t+1] idiom to extend the array part which should be faster than calling table.insert() . Otherwise, the source of any structural improvements will be in the "and so on ad nauseum" part of the code. Look there for common calculations and fragments that can be collected into local functions. Remember that you can nest functions definitions, so helper functions can be constrained in scope to the place they are used. Look for too-clever logic, and rewrite them to be sensible to whoever will have to maintain it next year. wiki: Lua Design Patterns wiki: Zen Of Lua wiki: Optimisation Tips wiki: Profiling Lua Code Above all, Beware the premature optimization. Benchmark what you have now as a point of comparison, and use that as a guide for finding performance bottlenecks.
