[site]: stackoverflow
[post_id]: 5066684
[parent_id]: 
[tags]: 
Scala Constructors, Named Arguments, and Implicit Getters/Setters

Is it possible to use named arguments in a Scala constructor, and later on override getters and setters without breaking the constructor interface or making the code extremely ugly? Take the following bit of scala code class Person( var FirstName: String, var LastName: String ) Nice and clean. This would create a simple class called person, which we could use in the following way val john = new Person( FirstName="John", LastName="Doe" ) john.FirstName = "Joe" println( john.FirstName ) Later, we decide we want to add some validation to the FirstName setter. As such, we create a new private local variable and override the getter and setter methods class Person( var _FirstName: String, var _LastName: String ) { def FirstName = _FirstName def FirstName_= (value:String) = _FirstName = value } Still somewhat clean, however in order to do this, we've had to change the constructor argument names, thus breaking the external interface. The first solution to this problem I came up with was class Person { var _FirstName:String = null var LastName:String = null def FirstName = _FirstName def FirstName_= (value:String) = _FirstName = value def this( FirstName: String, LastName: String ){ this() this._FirstName = FirstName this.LastName = LastName } } Which is somewhat ugly and inelegant, and removes most of the nice reasons I was using scala in the first place. Is there a better way of doing this? tl;dr How to override getters/setters for members defined in the default constructor without making the code ugly or changing the public interface?
