[site]: stackoverflow
[post_id]: 4492565
[parent_id]: 2109451
[tags]: 
So, I've been looking at something similar to this recently, and hit upon the same issue. The solution I'm considering implementing is as follows: Upon registration, create a unique, secure (long) key for the user and use this to encrypt their data. Encrypt this key with the user's password using e.g. AES and store it in the database. At this point, you're still in the situation where if the user forgets their password, they've had it. Create a public/private key pair representing your organisation, and store the public key on the server. Split the private portion of the key into several components and give each to people (e.g. directors of your company) who have a significant stake (preferably financial) in the continued success of your company. Do this such that any two, or any three people can get together and restore the full private key when required. Encrypt each person's key with their own password. When a user registers, as well as encrypting their key with their password, encrypt it with the organisational public key and store it somewhere. Create a password reset form which records a request to reset the password of a user, along with some proof that the user is who they say they are (e.g. challenge/response). Record these reset requests (optionally encrypted using the public key again) in the database. Once per hour/day/week/month, get the requisite key-holders together, and use their combined keys to process the accrued reset requests, decrypting the keys of users who successfully proved they are who they say they are. There are lots of challenges and considerations in this. I've got a few thoughts on most of these, but would be interested in others opinions too: How to split the key safely between multiple people so that no one person can decrypt the stored keys. How to minimise the number of keys that would be exposed if the 'master keys' genuinely fell into the wrong hands. How to make sure that if (heaven forbid) your key-holders lost their keys, then (a) there's no risk of exposure of the data, and (b) there's no risk that suddenly the ability to reset passwords is lost forever. How to successfully validate that someone really is who they say they are without making this a glaring hole in your whole security approach. Anything you implement in this area WILL reduce the security of the translucent database approach, without a doubt, but this may be a worthwhile compromise depending on the nature of your data.
