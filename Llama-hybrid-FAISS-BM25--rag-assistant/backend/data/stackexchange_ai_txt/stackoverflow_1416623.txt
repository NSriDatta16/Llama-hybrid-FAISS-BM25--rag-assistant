[site]: stackoverflow
[post_id]: 1416623
[parent_id]: 1416476
[tags]: 
I never heard of OCP being that. Maybe you are refering to something else, but the OCP I know says "A module/class must be open for extension , but closed for modification , meaning that you shouldn't modify the source code of the module to enhance it, but the module or object should be easy to extend. Think of eclipse (or any other plugin based software for that matter). You don't have the source code, but anyone can write a plugin to extend the behaviour or to add another feature. You didn't modify eclipse, but you extended it. So, yes, the Open/Closed principle is indeed very valid and quite a good idea. UPDATE: I see that the main conflict here is between code that is still under development and code that is already shipped and used by someone. So I went and checked with Bertrand Meyer , the author of this principle. He says: A module is said to be closed if it is available for use by other modules. This assumes that the module has been given a well-defined, stable description (its interface in the sense of information hiding). At the implementation level, closure for a module also implies that you may compile it, perhaps store it in a library, and make it available for others (its clients) to use . So, indeed, the Open/Closed Principle refers only to stable, ready for compile and use entities.
