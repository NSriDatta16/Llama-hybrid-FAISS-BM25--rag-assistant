[site]: stackoverflow
[post_id]: 2702993
[parent_id]: 2702928
[tags]: 
If you are writing generic code and you don't know how it may be used, it's good to provide both options: int mystructm(Mystruct *storage, int num, int size) { int rv = 0; storage->num = num; storage->size = size; storage->nums = malloc(num*sizeof(size)); if (!storage->nums) return -1; return 0; } Mystruct *mystruct(int num, int size) { Mystruct *mp = (Mystruct *)malloc(sizeof(Mystruct)); if (mp) { if (mystructm(mp, num, size) == -1) { free(mp); mp = NULL; } } return mp; } The idea is that as a library writer, you shouldn't dictate policy (such as that each Mystruct must be dynamically allocated) but should let the application writer decide that.
