[site]: stackoverflow
[post_id]: 4204075
[parent_id]: 
[tags]: 
assignment in python

I know that "variable assignment" in python is in fact a binding / re-bindign of a name (the variable) to an object. This brings the question: is it possible to have proper assignment in python, eg make an object equal to another object? I guess there is no need for that in python: Inmutable objects cannot be 'assigned to' since they can't be changed Mutable objects could potentially be assigned to, since they can change, and this could be useful, since you may want to manipulate a copy of dictionary separately from the original one. However, in these cases the python philosophy is to offer a cloning method on the mutable object, so you can bind a copy rather than the original. So I guess the answer is that there is no assignment in python, the best way to mimic it would be binding to a cloned object I simply wanted to share the question in case I'm missing something important here Thanks EDIT: Both Lie Ryan and Sven Marnach answers are good, I guess the overall answer is a mix of both: For user defined types, use the idiom: a. dict = dict(b. dict ) (I guess this has problems as well if the assigned class has redefined attribute access methods, but lets not be fussy :)) For mutable built-ins (lists and dicts) use the cloning / copying methods they provide (eg slices, update) finally inmutable built-ins can't be changed so can't be assigned I'll choose Lie Ryan because it's an elegant idiom that I hadn't thought of. Thanks!
