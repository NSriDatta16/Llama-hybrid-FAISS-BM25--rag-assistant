[site]: stackoverflow
[post_id]: 4545263
[parent_id]: 4545171
[tags]: 
No, there's no keyword that allows you to do that. However, every event raised by a control passes in a sender parameter that you can use to determine which particular control raised that event. Note that this parameter is always typed as a basic Object (because it can represent any possible control), so you'll need to downcast to a more specific control class if you need to access any of the unique members that it exposes. Since you're handling an event raised by a TextBox control, you know that the sender must be of type TextBox , so you can simply use DirectCast to handle the upcasting. You don't have to worry that an InvalidCastException will be thrown. For instance, your above example would become: Private Sub TextBox1_TextChanged(ByVal sender As Object, ByVal e As EventArgs) Handles TextBox1.TextChanged Dim textBox As TextBox = DirectCast(sender, TextBox) MessageBox.Show("The text is: " & textBox.Text) End Sub That being said, there are a couple of concerning things that jump out at me in your question: Any time that your approach to solving a problem is "copy-pasting" code, you should stop, take a step back, and try to figure out if there's any better way to achieve your ultimate goal. For example, if you need every textbox on your form to react in the same way whenever a particular event is raised, you should consider subclassing the existing TextBox control and consolidating all of your code in one place. Remember that you can inherit off of most of the standard controls to add custom functionality. This is often a far better solution than copying and pasting code to multiple places in your project. If you ever need to track down a bug or modify that functionality, you'll only have to change it one place in your code, rather than several. As a somewhat cheekier benefit, you'll be able to use Me to refer to that control when you're editing its subclass. You should always prefer to concatenate (combine) strings using the & operator in VB.NET, rather than the + sign. Or perhaps even better, the String.Concat or String.Format methods. There is no reason to use MsgBox in VB.NET, as opposed to MessageBox.Show . No, this won't improve performance of your application, but it's a good practice to get into for .NET languages.
