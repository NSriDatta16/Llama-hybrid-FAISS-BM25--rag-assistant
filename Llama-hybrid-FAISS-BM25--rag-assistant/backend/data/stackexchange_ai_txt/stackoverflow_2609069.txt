[site]: stackoverflow
[post_id]: 2609069
[parent_id]: 1987054
[tags]: 
The guy over at this forum has a pretty good algorithm. It works by taking the average of all of the colors in each "block." I just used his implementation in C#/GDI+ today: using System; using System.Collections.Generic; using System.Diagnostics.CodeAnalysis; using System.Drawing; using System.Linq; using System.Text; /// /// Applies a pixelation effect to an image. /// [SuppressMessage( "Microsoft.Naming", "CA1704", Justification = "'Pixelate' is a word in my book.")] public class PixelateEffect : EffectBase { /// /// Gets or sets the block size, in pixels. /// private int blockSize = 10; /// /// Gets or sets the block size, in pixels. /// public int BlockSize { get { return this.blockSize; } set { if (value /// Applies the effect by rendering it onto the target bitmap. /// /// The source bitmap. /// The target bitmap. public override void DrawImage(Bitmap source, Bitmap target) { if (source == null) { throw new ArgumentNullException("source"); } if (target == null) { throw new ArgumentNullException("target"); } if (source.Size != target.Size) { throw new ArgumentException("The source bitmap and the target bitmap must be the same size."); } using (var graphics = Graphics.FromImage(target)) { graphics.PageUnit = GraphicsUnit.Pixel; for (int x = 0; x = source.Width || y + yy >= source.Height) { continue; } var color = source.GetPixel(x + xx, y + yy); sums.A += color.A; sums.R += color.R; sums.G += color.G; sums.B += color.B; sums.T++; } } var average = Color.FromArgb( sums.A / sums.T, sums.R / sums.T, sums.G / sums.T, sums.B / sums.T); using (var brush = new SolidBrush(average)) { graphics.FillRectangle(brush, x, y, (x + this.BlockSize), (y + this.BlockSize)); } } } } } /// /// A structure that holds sums for color averaging. /// private struct Sums { /// /// Gets or sets the alpha component. /// public int A { get; set; } /// /// Gets or sets the red component. /// public int R { get; set; } /// /// Gets or sets the blue component. /// public int B { get; set; } /// /// Gets or sets the green component. /// public int G { get; set; } /// /// Gets or sets the total count. /// public int T { get; set; } } } Caveat emptor, works on my machine, & etc.
