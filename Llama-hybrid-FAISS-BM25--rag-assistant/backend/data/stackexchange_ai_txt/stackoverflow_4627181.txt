[site]: stackoverflow
[post_id]: 4627181
[parent_id]: 4626447
[tags]: 
I currently use an n-tier environment for my development. I have a core data class that all of my data layer classes inherit from that is a single database connection. It has methods to execute my stored procs or t-sql. These methods can return sqlreader objects that my business objects use to load the variables. I'll post some examples. I hope this helps. Here is my core data class: Imports System.Data Imports System.Data.SqlClient Namespace Datalayer ''' ''' Base class to connect to a database using a single connection. ''' ''' ''' jwames - 12/20/2010 - original code ''' Public Class CoreDataClass Implements IDisposable #Region "attributes" Private _connection As SqlConnection Private _connectionString As String = My.Settings.PowerNetPricingDB() Private _disposedValue As Boolean Private _pool As Boolean #End Region #Region "constructor" ''' ''' Initialize the connection string ''' ''' ''' jwames - 12/20/2010 - original code ''' Public Sub New() _connection = New SqlConnection(_connectionString) _disposedValue = False _pool = False End Sub #End Region #Region "functions" ''' ''' IDisposable implementation ''' ''' ''' ''' jwames - 12/10/2010 - original code ''' Protected Overridable Sub Dispose(ByVal disposing As Boolean) If Not _disposedValue Then If disposing Then If _connection Is Nothing = False Then _connection.Dispose() End If _connectionString = Nothing End If _disposedValue = True End Sub ''' ''' Dispose of the database connection objects ''' ''' ''' jwames - 12/20/2010 - original code ''' Public Sub Dispose() Implements IDisposable.Dispose ' Do not change this code. Put cleanup code in Dispose(ByVal disposing As Boolean) above. Dispose(True) GC.SuppressFinalize(Me) End Sub ''' ''' Base function used to execute queries that return results ''' ''' ''' jwames - 12/20/2010 - generated by original code ''' Protected Function GetDataReader(ByRef cmd As SqlCommand) As SqlDataReader Try cmd.CommandType = CommandType.StoredProcedure If Me.Connection.State = ConnectionState.Closed Then Me.Connection.Open() If _pool Then Return cmd.ExecuteReader() Else Return cmd.ExecuteReader(CommandBehavior.CloseConnection) End If Catch ex As SqlException Throw ex End Try End Function ''' ''' Base function used to execute dynamic queries that return results ''' ''' ''' jwames - 12/20/2010 - original code ''' Protected Function GetDataReader(ByVal sql As String) As SqlDataReader Try Dim cmd As New SqlCommand(sql, Me.Connection) cmd.CommandType = CommandType.StoredProcedure If Me.Connection.State = ConnectionState.Closed Then Me.Connection.Open() If _pool Then Return cmd.ExecuteReader() Else Return cmd.ExecuteReader(CommandBehavior.CloseConnection) End If Catch ex As SqlException Throw ex End Try End Function ''' ''' Base function that will execute a procedure ''' ''' ''' jwames - 12/20/2010 - original code ''' Protected Sub ExecuteCommand(ByVal cmd As SqlCommand) Try cmd.CommandType = CommandType.StoredProcedure If Me.Connection.State = ConnectionState.Closed Then Me.Connection.Open() cmd.ExecuteNonQuery() If _pool = False Then Me.Connection.Close() Me.Connection.Dispose() End If Catch ex As SqlException Throw ex End Try End Sub ''' ''' Base function that will execute a procedure ''' ''' ''' jwames - 12/20/2010 - original code ''' Protected Sub ExecuteCommand(ByVal sql As String) Try Dim cmd As New SqlCommand(sql, Me.Connection) cmd.CommandType = CommandType.StoredProcedure If Me.Connection.State = ConnectionState.Closed Then Me.Connection.Open() cmd.ExecuteNonQuery() If _pool = False Then Me.Connection.Close() Me.Connection.Dispose() End If Catch ex As SqlException Throw ex End Try End Sub #End Region #Region "properties" Public Property Connection() As SqlConnection Get Return _connection End Get Set(ByVal value As SqlConnection) _connection = value End Set End Property ''' ''' Use the same connection to run multiple queries ''' ''' ''' ''' ''' jwames - 12/20/2010 - original code ''' Public Property PoolConnections() As Boolean Get Return _pool End Get Set(ByVal value As Boolean) _pool = value End Set End Property #End Region End Class End Namespace Here is a simple data layer class: Imports System.Data.SqlClient Namespace Datalayer ''' ''' Class that connects to the database and relays information to the business layer ''' ''' ''' jwames - 1/3/2011 - original code ''' Public Class ItemCost Inherits CoreDataClass #Region "functions" ''' ''' Function that returns all rows within the database ''' ''' ''' jwames - 1/4/2011 - original code ''' Public Function GetAllItemCost(ByVal BranchId As String, ByVal ItemNumber As String, ByVal ShipDate As DateTime) As SqlDataReader Dim cmd As New SqlCommand("spGetAllItemCostByItem", Connection) cmd.Parameters.AddWithValue("@BranchId", BranchId) cmd.Parameters.AddWithValue("@ItemNumber", ItemNumber) cmd.Parameters.AddWithValue("@ShipDate", ShipDate) Return GetDataReader(cmd) End Function ''' ''' Function that returns a single row from the database ''' ''' ''' jwames - 1/3/2011 - generated by TierCreator ''' Public Function GetItemCost(ByVal BranchId As String, ByVal ItemNumber As String, ByVal CostTypeId As String, ByVal ShipDate As DateTime) As SqlDataReader Dim cmd As New SqlCommand("spGetItemCost", MyBase.Connection) cmd.Parameters.AddWithValue("@BranchId", BranchId) cmd.Parameters.AddWithValue("@ItemNumber", ItemNumber) cmd.Parameters.AddWithValue("@CostTypeId", CostTypeId) cmd.Parameters.AddWithValue("@ShipDate", ShipDate) Return GetDataReader(cmd) End Function ''' ''' Move all of the records from the staging tables to the working tables ''' ''' ''' jwames - 1/4/2011 - original code ''' Public Sub PublishItemCost() ExecuteCommand("spPublishItemCost") End Sub ''' ''' Create/Update a row in the database ''' ''' ''' jwames - 1/3/2011 - generated by TierCreator ''' Public Sub SaveItemCost(BranchId As String, ItemNumber As String, CostTypeId As String, EffectiveDate As DateTime, Cost As Double) Dim cmd As New SqlCommand("spSaveItemCost", MyBase.Connection) cmd.Parameters.AddWithValue("@BranchId", BranchId) cmd.Parameters.AddWithValue("@ItemNumber", ItemNumber) cmd.Parameters.AddWithValue("@CostTypeId", CostTypeId) cmd.Parameters.AddWithValue("@EffectiveDate", EffectiveDate) cmd.Parameters.AddWithValue("@Cost", Cost) ExecuteCommand(cmd) End Sub #End Region End Class End Namespace Here is a business layer class that consumes this data layer class. The parts to pay attention to are the load and save methods. Mostly the load. Imports System.Text Namespace BusinessLayer ''' ''' Class representation of a row in the table in the database ''' ''' ''' jwames - 1/3/2011 - original code ''' Public Class ItemCost #Region "attributes" Private _CostType As CostType Private _EffectiveDate As DateTime Private _Cost As Double Private _exits As Boolean #End Region #Region "constructor" ''' ''' Initialize all of the module level variables ''' ''' ''' jwames - 1/5/2011 - original code ''' Public Sub New() _exits = False End Sub ''' ''' Initialize all of the module level variables and execute the load method ''' ''' ''' jwames - 1/3/2011 - original code ''' Public Sub New(ByVal BranchId As String, ByVal ItemNumber As String, ByVal CostTypeId As String, ByVal ShipDate As DateTime) Me.New() Load(BranchId, ItemNumber, CostTypeId, ShipDate) End Sub #End Region #Region "functions" ''' ''' Get a single row based on the arguments passed and set the class variables with the results ''' ''' ''' jwames - 1/5/2011 - original code ''' Public Sub Load(ByVal MyBranchId As String, ByVal MyItemNumber As String, ByVal MyCostTypeId As String, ByVal ShipDate As DateTime) ' set these vars to perform validation Dim branchId As New Branch(MyBranchId) Dim itemNum As New ItemNumber(MyItemNumber) CostType.SetCostType(MyCostTypeId) Using ic As New Datalayer.ItemCost Using rdr As Data.SqlClient.SqlDataReader = ic.GetItemCost(branchId.Abbreviation, itemNum.Number, CostType.GetCostTypeAsString(), ShipDate) If rdr.Read() Then If rdr.IsDBNull(0) = False Then CostType.SetCostType(rdr.GetString(0)) If rdr.IsDBNull(1) = False Then EffectiveDate = rdr.GetDateTime(1) If rdr.IsDBNull(2) = False Then Cost = rdr.GetDecimal(2) _exits = True Else _exits = False End If rdr.Close() End Using End Using End Sub ''' ''' Save the class information in the database ''' ''' ''' jwames - 1/5/2011 - original code ''' Public Shared Sub Save(ByVal BranchId As String, ByVal ItemNumber As String, ByVal CostTypeId As String, ByVal EffectiveDate As DateTime, _ ByVal Cost As Double) ' set these vars to perform validation Dim branch As New Branch(BranchId) Dim itemNum As New ItemNumber(ItemNumber) Dim ct As New CostType(CostTypeId) Using ic As New Datalayer.ItemCost ic.SaveItemCost(branch.Abbreviation, itemNum.Number, ct.GetCostTypeAsString(), EffectiveDate, Cost) End Using End Sub #End Region #Region "properties" Public Property CostType() As CostType Get Return _CostType End Get Set(ByVal value As CostType) _CostType = value End Set End Property Public Property EffectiveDate As DateTime Get Return _EffectiveDate End Get Set(ByVal value As DateTime) _EffectiveDate = value End Set End Property Public Property Cost() As Double Get Return _Cost End Get Set(ByVal value As Double) _Cost = value End Set End Property ''' ''' signifies if the item cost was found and loaded in the load method ''' ''' true if found ''' ''' jwames - 1/5/2011 - original code ''' Public ReadOnly Property Exists() As Boolean Get Return _exits End Get End Property #End Region End Class End Namespace
