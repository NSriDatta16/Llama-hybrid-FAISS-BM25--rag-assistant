[site]: stackoverflow
[post_id]: 5419341
[parent_id]: 
[tags]: 
WCF Data Objects Best Practice

I am in the processing of migrating from web services to WCF, and rather than trying to make old code work in WCF, I am just going to rebuild the services. As a part of this process, I have not figured out the best design to provide easy to consume services and also support future changes. My service follows the pattern below; I actually have many more methods than this so duplication of code is an issue. Public Interface IPublicApis Function RetrieveQueryDataA(ByVal req As RequestA) As ResponseA Function RetrieveQueryDataB(ByVal req As RequestB) As ResponseB Function RetrieveQueryDataC(ByVal req As RequestC) As ResponseC End Interface Following this advice, I first created the schemas for the Request and Response objects. I then used SvcUtil to create the resulting classes so that I am assured the objects are consumable by other languages, and the clients will find the schemas easy to work with (no references to other schemas). However, because the Requests and Responses have similar data, I would like to use interfaces and inheritance so that I am not implementing multiple versions of the same code. I have thought about writting my own version of the classes using interfaces and inheritance in a seperate class library, and implementing all of the logging, security, data retrieval logic there. Inside each operation I will just convert the RequestA to my InternalRequestA and call InternalRequestA's process function which will return an InternalResponseA. I will then convert that back to a ResponseA and send to the client. Is this idea crazy?!? I am having problems finding another solution that takes advantage of inheritance internally, but still gives clean schemas to the client that support future updates.
