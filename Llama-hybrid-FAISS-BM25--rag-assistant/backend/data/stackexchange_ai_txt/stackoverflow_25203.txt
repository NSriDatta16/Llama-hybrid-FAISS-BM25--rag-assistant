[site]: stackoverflow
[post_id]: 25203
[parent_id]: 24965
[tags]: 
First, it is alright and normal to feel frustrated when you first start trying to use TDD in your coding style. Just don't get discouraged and quit, you will need to give it some time. It is a major paradigm shift in how we think about solving a problem in code. I like to think of it like when we switched from procedural to object oriented programming. Secondly, I feel that test driven development is first and foremost a design activity that is used to flesh out the design of a component by creating a test that first describes the API it is going to expose and how you are going to consume it's functionality. The test will help shape and mold the System Under Test until you have been able to encapsulate enough functionality to satisfy whatever tasks you happen to be working on. Taking the above paragraph in mind, let's look at your questions: If I am using a collection in my system under test, then I will setup an expectation to make sure that the code was called to insert the item and then assert the count of the collection. I don't necessarily test the Add method on my internal list. I just make sure it was called when the method that adds the item is called. I do this by adding a mocking framework into the mix, with my testing framework. Testing strings as output can be tedious. You cannot account for every outcome. You can only test what you expect based on the functionality of the system under test. You should always break your tests down to the smallest element that it is testing. Which means you will have a lot of tests, but tests that are small and fast and only test what they should, nothing else. There are a lot of open source testing frameworks to choose from. I am not going to argue which is best. Just find one you like and start using it. MbUnit nUnit xUnit All you can do is setup your tests to account for what you want to happen. If a scenario comes up that introduces a bug in your functionality, at least you have a test around the functionality to add that scenario into the test and then change your functionality until the test passes. One way to find where we may have missed a test is to use code coverage . I introduced you to the mocking term in the answer for question one. When you introduce mocking into your arsenal for TDD, it dramatically makes testing easier to abstract away the parts that are not part of the system under test. Here are some resources on the mocking frameworks out there are: Moq : Open Source RhinoMocks : Open Source TypeMock : Commercial Product NSubstitute : Open Source One way to help in using TDD, besides reading about the process, is to watch people do it. I recommend in watching the screen casts by JP Boodhoo on DNRTV . Check these out: Jean Paul Boodhoo on Test Driven Development Part 1 Jean Paul Boodhoo on Test Driven Development Part 2 Jean Paul Boodhoo on Demystifying Design Patterns Part 1 Jean Paul Boodhoo on Demystifying Design Patterns Part 2 Jean Paul Boodhoo on Demystifying Design Patterns Part 3 Jean Paul Boodhoo on Demystifying Design Patterns Part 4 Jean Paul Boodhoo on Demystifying Design Patterns Part 5 OK, these will help you see how the terms I introduced are used. It will also introduce another tool called Resharper and how it can facilitate the TDD process. I couldn't recommend this tool enough when doing TDD. Seems like you are learning the process and you are just finding some of the problems that have already been solved with using other tools. I think I would be doing an injustice to the community, if I didn't update this by adding Kent Beck's new series on Test Driven Development on Pragmatic Programmer .
