[site]: stackoverflow
[post_id]: 1765701
[parent_id]: 1765686
[tags]: 
Well, if you want ANSI C, then by definition the standard is right. In C89/C90 the int return type is implied, so the K&R definition would be acceptable. In C99 this is no longer the case. The C90 standard has the following wording (5.1.2.2.1 Program startup), which is very similar to the C99 wording (probably most significantly it uses the less strong 'can' instead of 'shall'): The function called at program startup is named main . The implementation declares no prototype for this function. It can be defined with no parameters: int main(void) { /* ... */ } or with two parameters (referred to here as argc and argv , though any names may be used, as they are local to the function in which they are declared): int main(int argc, char *argv[]) { /* ... */ } If they are defined, the parameters to the main function shall obey the following constraints: [etc. ...] There's nothing in that section directly about the fact that leaving off the return type will result in it defaulting to int . Frankly, I have a hard time finding exactly where that behavior is specified by the standard. The closest I can come is in 6.7.1 (Functions definitions) where the grammar for function definitions indicates that the 'declaration-specifiers' are optional, and the examples say: Examples: In the following: extern int max(int a, int b) { return a > b ? a : b; } extern is the storage class specifier and int is the type specifier (each of which may be omitted as those are the defaults)...
