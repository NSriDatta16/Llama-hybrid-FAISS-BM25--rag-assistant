[site]: stackoverflow
[post_id]: 3348165
[parent_id]: 3348089
[tags]: 
The tests that you describe sound like more of an end-to-end or integration test than a unit test, strictly speaking. But that's not necessarily a bad thing! In your situation, it may be productive to work down from the end-to-end tests towards the unit tests, rather than up as you would on a new codebase. Write at least one simple test for each web service API, to ensure that you have some coverage of everything Identify the APIs that have historically been prone to failure, based on past bug reports. Write more extensive tests for those APIs. Every time that you encounter a failing test, drop down a level and write tests for the methods called on that code path. Eventually you'll find that one of those tests is failing. If the bug isn't obvious at that level, drop down a level and repeat. Rinse, wash, repeat every time you get a new bug report. The idea here is that you introduce unit-test coverage "as needed" along the code paths that are currently prone to failure. This will harden those code paths for the future, and will gradually expand your unit test coverage over the entire application.
