[site]: stackoverflow
[post_id]: 1531139
[parent_id]: 1530959
[tags]: 
An ORM, for example using JPA api ( Hibernate, EclipseLink, ... ) will probably make it very quick to implement persistence. Raw performance of the whole tree persistence tends to be tricky to achieve compared to plain JDBC. So if your only performance criteria is persisting the whole tree in one shot, that is probably not the best option. On the other hand if you also need to load the tree, synchronize changes of the tree, then JPA offer those feature built-in with (after a bit of tweaking) better performance than many manual implementation. Serialization in java tends to be quite slow and produce loads of data. Serialization is also quite brittle when you change class in your app and is completely useless if you need to synchronize tree changes. In the same category as serialization you can serialize in XML and persist it in some XML database (Oracle XDB). However those are designed more for flexibility of storage/querying than raw speed. If time is not a concern the very best way is always to involve a competent DBA and design an optimal datamodel and refactor the tree accordingly.
