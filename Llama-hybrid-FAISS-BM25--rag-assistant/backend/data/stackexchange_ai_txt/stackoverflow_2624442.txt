[site]: stackoverflow
[post_id]: 2624442
[parent_id]: 
[tags]: 
Coordinating typedefs and structs in std::multiset (C++)

I'm not a professional programmer, so please don't hesitate to state the obvious. My goal is to use a std::multiset container ( typedef EventMultiSet ) called currentEvents to organize a list of structs, of type Event , and to have members of class Host occasionally add new Event structs to currentEvents . The structs are supposed to be sorted by one of their members, time. I am not sure how much of what I am trying to do is legal; the g++ compiler reports (in "Host.h") "error: 'EventMultiSet' has not been declared." Here's what I'm doing: // Event.h struct Event { public: bool operator > EventMultiSet; EventMultiSet currentEvents; EventMultiSet * cePtr = &currentEvents; ... Major questions Where should I include the EventMultiSet typedef? Are my EventMultiSet pointers obviously problematic? Is the compare function within my Event struct (in theory) okay? Thank you very much in advance.
