[site]: stackoverflow
[post_id]: 4685018
[parent_id]: 4684901
[tags]: 
$retMode & 0777 means that you take the value of return mode (which is file permissions + file type) and Bitwise-And it with an octal-representation number of 777 (e.g. decimal 511, e.g. binary 111111111). What this does technically is removes any bits from an integer above the 9th bit, so if the mode binary representation was >9 bits, it would, after this operation, leave only the last 9 bits, representing the main permissions (read/write/execute for other/group/user). Why ? Because (as perldoc stat shows), mode() returned from stat : " contains both the file type and its permissions , you should mask off the file type portion and (s)printf using a "%o" if you want to see the real permissions". In other words, it DOES contain data above 9th bit, but only last 9 bits represent permissions data which is what the code above is after. To be more precise, the last 12 digits represent permissions (so the code should instead be doing & 07777 ) but bits 10-12 represent special permission bits unrelated to user/group/other read/write/execute perms (e.g. setuid, is_directory). $retMode & 006 has similar mechanics, but different purpose. 006 octal is 110 in binary so it basically takes the mode bit vector and leaves only bits in 2/3 positions. Since the result is used in a boolean context, it will merely check whether the resulting # is non-zero, meaning if ONE of those 2 bits was set to 1. Please note that & 006 is actually BAD coding style since it is not obvious which bits are which perms (as I tried to subtly hint at by not explaining what bits 2/3 mean in the paragraph above). Instead you should import symbolic mode constants (S_IF* ) and functions (S_IS* ) from the Fcntl module: use Fcntl ':mode'; $retMode = $retMode & 0777; # Ignoring setuid and directory bits $other_read_or_write = $retMode & (S_IWOTH || S_IROTH); # Bits 2/3 - Other read/write if ($other_read_or_write) { printf "$property|%03o|$fpath\n",$retMode; }
