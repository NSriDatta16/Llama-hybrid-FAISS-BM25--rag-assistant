[site]: stackoverflow
[post_id]: 516252
[parent_id]: 516160
[tags]: 
The ideal is to profile first, then optimize where necessary, but that doesn't work with design; by the time you've got anything executable to profile, changing the design would be very expensive. Therefore, the design has to pay attention to efficiency up front. Usually this means sketching out efficient algorithms up front, and keeping enough flexibility to change later. (This is often best done with good separation of function, keeping modules as independent as possible, and that's good design practice for other reasons.) Typically, in the design phase(s), you'll have a good idea how important performance is. If you need to, you can design for performance from the start (which does not include code-level optimizations). There's also the developing of efficient coding habits in choosing between two otherwise similar practices. For example, in C++ it's worthwhile typing ++i rather than i++ , because it's a trivial thing that can be significantly more efficient sometimes. Anything more than that should wait until (a) it's clear that improving the performance will pay off, and (b) you know where the hotspots are.
