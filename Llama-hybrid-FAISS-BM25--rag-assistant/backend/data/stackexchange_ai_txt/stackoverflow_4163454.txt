[site]: stackoverflow
[post_id]: 4163454
[parent_id]: 1504087
[tags]: 
If you are trying to have a theme approach, i.e. labels with fixed backcolor and forecolor properties create a component and change its code behind like below: using System; using System.Collections.Generic; using System.ComponentModel; using System.Diagnostics; using System.Drawing; using System.Linq; using System.Text; using System.Windows.Forms; namespace YourNameSpace { public partial class NameOfStaticColoredLabel : Label { public NameOfStaticColoredLabel() { InitializeComponent(); } public NameOfStaticColoredLabel(IContainer container) { container.Add(this); InitializeComponent(); } public override Color ForeColor { get { return Color.Black; } set { base.ForeColor = Color.Black; } } public override Color BackColor { get { return Color.Aquamarine; } set { base.BackColor = Color.Aquamarine; } } } } As you can see all you must do is overriding the related properties of label control. Then you drag and drop this labels in your application forms. When you need to change their color just do it in above class and rebuild app. This approach will create a static colored label and you can't change its color from designer or code.
