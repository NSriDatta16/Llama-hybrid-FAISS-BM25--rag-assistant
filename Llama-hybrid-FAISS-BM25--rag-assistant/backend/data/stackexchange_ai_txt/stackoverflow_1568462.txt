[site]: stackoverflow
[post_id]: 1568462
[parent_id]: 1566907
[tags]: 
BEGIN OF EDIT Since this still seems to be getting some attention I decided to update the answer with missing info and newer windows patches. In any case you should not copy / paste the code. The code is just a showcase on how the things should be done. END OF EDIT : You can check if the parent process is SCM (service control manager). If you are running as service this is always the case and never the case if running as standard application. Also I think that SCM has always the same PID. You can check it like this: type TAppType = (atUnknown, atDesktop, atService); var AppType: TAppType; function InternalIsService: Boolean; var PL: TProcessList; MyProcessId: DWORD; MyProcess: PPROCESSENTRY32; ParentProcess: PPROCESSENTRY32; GrandParentProcess: PPROCESSENTRY32; begin Result := False; PL := TProcessList.Create; try PL.CreateSnapshot; MyProcessId := GetCurrentProcessId; MyProcess := PL.FindProcess(MyProcessId); if MyProcess <> nil then begin ParentProcess := PL.FindProcess(MyProcess^.th32ParentProcessID); if ParentProcess <> nil then begin GrandParentProcess := PL.FindProcess(ParentProcess^.th32ParentProcessID); if GrandParentProcess <> nil then begin Result := SameText(string(ParentProcess^.szExeFile), 'services.exe') and (SameText(string(GrandParentProcess^.szExeFile), 'winlogon.exe') or SameText(string(GrandParentProcess^.szExeFile), 'wininit.exe')); end; end; end; finally PL.Free; end; end; function IsService: Boolean; begin if AppType = atUnknown then begin try if InternalIsService then AppType := atService else AppType := atDesktop; except AppType := atService; end; end; Result := AppType = atService; end; initialization AppType := atUnknown; The TProcessList is implemented like this (again THashTable is not included but any hash table should be fine): type TProcessEntryList = class(TList) private function Get(Index: Integer): PPROCESSENTRY32; procedure Put(Index: Integer; const Value: PPROCESSENTRY32); public property Items[Index: Integer]: PPROCESSENTRY32 read Get write Put; default; function Add(const Entry: TProcessEntry32): Integer; reintroduce; procedure Clear; override; end; TProcessList = class private ProcessIdHashTable: THashTable; ProcessEntryList: TProcessEntryList; public constructor Create; reintroduce; destructor Destroy; override; procedure CreateSnapshot; function FindProcess(const ProcessId: DWORD): PPROCESSENTRY32; end; implementation { TProcessEntryList } procedure TProcessEntryList.Clear; var i: Integer; begin i := 0; while i 0 then try ProcessEntry.dwSize := SizeOf(ProcessEntry); if Process32First(SnapShot, ProcessEntry) then repeat ItemIndex := ProcessEntryList.Add(ProcessEntry); ProcessIdHashTable.Add(IntToStr(ProcessEntry.th32ProcessID), TObject(ItemIndex)); until not Process32Next(SnapShot, ProcessEntry); finally CloseHandle(SnapShot); end; end;
