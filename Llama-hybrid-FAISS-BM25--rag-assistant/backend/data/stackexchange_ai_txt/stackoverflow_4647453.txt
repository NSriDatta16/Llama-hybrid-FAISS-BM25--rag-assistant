[site]: stackoverflow
[post_id]: 4647453
[parent_id]: 
[tags]: 
UIView not retaining subviews

I made this play/pause/stop control but it doesn't work as expected. at load time it creates three views and stores them in an array, each view represents one state of the control. In the stopped state it contains a play button that is a member of a simple class cluster I made. In the other two states it contains a UIView with two of the buttons as subviews. In the first state it works and does exactly what it's supposed to, but when it tries to go to the next state it looks in the array and finds views at the playing state and paused state positions with no subviews. In fact, if you trace it through the execution of the loadView function the array never gets a view with subviews in it even though I called addSubview:(UIView *)view which the documentation says this about: This method retains view and sets its next responder to the receiver, which is its new superview. I would really like some help trying to understand why this is happening. To be more clear, why don't the UIViews that are passed to the array have subviews when the local variables for them do. Thanks in advance, Rich Here's the source: // IMSpeechControl.h #import #import "IMSpeechEngine.h" typedef enum { IMSpeechControlStateStopped = 0, IMSpeechControlStatePlaying = 1, IMSpeechControlStatePaused = 2 } IMSpeechControlState; /* State Stopped: speech control should show a Play button. State Playing: speech control should show a Pause button and a Stop button. State Paused : speech control should show a Play button and a Stop button. */ @class IMSpeechControl; @protocol IMSpeechControlDelegate - (NSString *)speechControlNeedsText:(IMSpeechControl *)sender; @end @interface IMSpeechControl : UIViewController { IMSpeechControlState controlState; id delegate; IMSpeechEngine *speechEngine; NSMutableArray *controlButtons_; CGRect frame_; } @property (nonatomic, readonly) IMSpeechControlState controlState; @property (nonatomic, assign) id delegate; // Designated initilazer - (IMSpeechControl *)initWithFrame:(CGRect)frame; // This must be here, do not call it from outside it's control buttons - (void)changeToState:(IMSpeechControlState)controlState; - (void)play; - (void)pause; - (void)stop; @end This is the important one. // IMSpeechControl.m #import "IMSpeechControl.h" #import "IMSpeechControlButton.h" @interface IMSpeechControl () @property (nonatomic, assign) IMSpeechEngine *speechEngine; @property (nonatomic, retain) NSMutableArray *controlButtons; // Used only for initialization, do not change after calling initWithFrame // to change the view size after creation @property (nonatomic) CGRect frame; - (void)speechEngineDidFinishSpeaking:(NSNotification *)notifictation; @end @implementation IMSpeechControl @synthesize controlState, delegate, speechEngine, frame=frame_; @synthesize controlButtons=controlButtons_; /* State Stopped: speech control should show a Play button. State Playing: speech control should show a Pause button and a Stop button. State Paused : speech control should show a Play button and a Stop button. */ - (IMSpeechControl *)initWithFrame:(CGRect)aFrame { if (self = [super init]) { self.frame = aFrame; [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(speechEngineDidFinishSpeaking:) name:kDidFinishSpeakingNotificationName object:self.speechEngine]; } return self; } - (void)loadView { // Initialization code. // Create the main view. UIView *aView = [[UIView alloc] initWithFrame:self.frame]; self.view = aView; [aView release]; // Create the sub-views and store them in an array. NSMutableArray *controls = [[NSMutableArray alloc] initWithCapacity:3]; // The stopped state play button view can be used directly since it is the only button shown. IMSpeechControlButton *button = [[IMSpeechControlButton alloc] initWithFrame:self.frame forControl:self style:IMSpeechControlButtonStylePlay]; [controls insertObject:button atIndex:(NSUInteger)IMSpeechControlStateStopped]; [button release]; // The other two states require two buttons each, so the two buttons must be grouped into a UIView that can be easily switched out. // Make two frames, one for the left and one for the right. Both are half the width of the main view // The one on the left has the same origin as the main view... CGRect halfFrameLeft = CGRectMake(frame_.origin.x, frame_.origin.y, frame_.size.width / 2, frame_.size.height); // and the one on the right starts half-way across the main view CGRect halfFrameRight = CGRectMake((frame_.origin.x + (frame_.size.width / 2)), frame_.origin.y, frame_.size.width / 2, frame_.size.height); // Playing state // Pause button UIView *playingState = [[UIView alloc] initWithFrame:self.frame]; IMSpeechControlButton *plsPauseButton = [[IMSpeechControlButton alloc] initWithFrame:halfFrameLeft forControl:self style:IMSpeechControlButtonStylePause]; [playingState addSubview:plsPauseButton]; [plsPauseButton release]; // Stop button IMSpeechControlButton *plsStopButton = [[IMSpeechControlButton alloc] initWithFrame:halfFrameRight forControl:self style:IMSpeechControlButtonStyleStop]; [playingState addSubview:plsStopButton]; [plsStopButton release]; [controls insertObject:playingState atIndex:(NSUInteger)IMSpeechControlStatePlaying]; [playingState release]; // Paused state // Play button UIView *pausedState = [[UIView alloc] initWithFrame:self.frame]; IMSpeechControlButton *pasPlayButton = [[IMSpeechControlButton alloc] initWithFrame:halfFrameLeft forControl:self style:IMSpeechControlButtonStylePlay]; [pausedState addSubview:pasPlayButton]; [pasPlayButton release]; // Stop button IMSpeechControlButton *pasStopButton = [[IMSpeechControlButton alloc] initWithFrame:halfFrameRight forControl:self style:IMSpeechControlButtonStyleStop]; [pausedState addSubview:pasStopButton]; [pasStopButton release]; [controls insertObject:pausedState atIndex:(NSUInteger)IMSpeechControlStatePaused]; [pausedState release]; // store the array in an instance variable self.controlButtons = controls; [controls release]; // Set the view to it's first state (stopped) IMSpeechControlButton *stoppedState = (IMSpeechControlButton *)[self.controlButtons objectAtIndex:(NSUInteger)IMSpeechControlStateStopped]; [self.view addSubview:stoppedState]; controlState = IMSpeechControlStateStopped; } - (IMSpeechEngine *)speechEngine { if (nil == speechEngine) { self.speechEngine = [IMSpeechEngine sharedManager]; } return speechEngine; } - (void)changeToState:(IMSpeechControlState)state { // This line caused my problem // IMSpeechControlButton *currentView = [[self.view subviews] objectAtIndex:0]; // It should look like this UIView *currentView = [[self.view subviews] objectAtIndex:0]; switch (state) { case IMSpeechControlStateStopped: { UIView *stoppedState = (UIView *)[self.controlButtons objectAtIndex:(NSUInteger)IMSpeechControlStateStopped]; [self.view addSubview:stoppedState]; [UIView animateWithDuration:0.15 animations:^{ currentView.alpha = 0.5; stoppedState.alpha = 0.15; } completion:^(BOOL finished) currentView.alpha = 0.0; [currentView removeFromSuperview]; [UIView animateWithDuration:0.15 animations:^{stoppedState.alpha = 0.5;}]; }]; controlState = IMSpeechControlStateStopped; break; } case IMSpeechControlStatePlaying: { UIView *playingState = [self.controlButtons objectAtIndex:(NSUInteger)IMSpeechControlStatePlaying]; [self.view addSubview:playingState]; [UIView animateWithDuration:0.15 animations:^{ currentView.alpha = 0.5; playingState.alpha = 0.15; } completion:^(BOOL finished){ currentView.alpha = 0.0; [currentView removeFromSuperview]; [UIView animateWithDuration:0.15 animations:^{playingState.alpha = 0.5;}]; }]; controlState = IMSpeechControlStatePlaying; break; } case IMSpeechControlStatePaused: { UIView *pausedState = (UIView *)[self.controlButtons objectAtIndex:(NSUInteger)IMSpeechControlStatePaused]; [self.view addSubview:pausedState]; [UIView animateWithDuration:0.15 animations:^{ currentView.alpha = 0.5; pausedState.alpha = 0.15; } completion:^(BOOL finished){ currentView.alpha = 0.0; [currentView removeFromSuperview]; [UIView animateWithDuration:0.15 animations:^{pausedState.alpha = 0.5;}]; }]; controlState = IMSpeechControlStatePaused; break; } default: NSLog(@"Error %lu is not a recognized IMSpeechControlState", state); break; } } - (void)speechEngineDidFinishSpeaking:(NSNotification *)notifictation { // This notification is only sent if it has finished speaking and is therefore stopped. [self changeToState:IMSpeechControlStateStopped]; } - (void)play { NSString *text = [delegate speechControlNeedsText:self]; [self.speechEngine speakText:text]; [self changeToState:IMSpeechControlStatePlaying]; } - (void)pause { [self.speechEngine pauseSpeaking]; [self changeToState:IMSpeechControlStatePaused]; } - (void)stop { [self.speechEngine stopSpeaking]; [self changeToState:IMSpeechControlStateStopped]; } - (void)dealloc { [[NSNotificationCenter defaultCenter] removeObserver:self forKeyPath:kDidFinishSpeakingNotificationName]; [super dealloc]; } @end // IMSpeechControlButton.h #import "IMSpeechControl.h" typedef enum { IMSpeechControlButtonStylePlay, IMSpeechControlButtonStylePause, IMSpeechControlButtonStyleStop }IMSpeechControlButtonStyle; @interface IMSpeechControlButton: UIView { IMSpeechControl *speechControl; UIImageView *imageView; } @property (nonatomic, assign) IMSpeechControl *speechControl; @property (nonatomic, retain) UIImageView *imageView; - (IMSpeechControlButton *)initWithFrame:(CGRect)aRect forControl:(IMSpeechControl *)control style:(IMSpeechControlButtonStyle)style; @end // IMSpeechControlButton.m #import "IMSpeechControlButton.h" #import @implementation IMSpeechControlButton @synthesize speechControl; @synthesize imageView; - (IMSpeechControlButton *)initWithFrame:(CGRect)aRect forControl:(IMSpeechControl *)control style:(IMSpeechControlButtonStyle)style { NSString *str; switch (style) { case IMSpeechControlButtonStylePlay: str = @"IMSpeechControlPlay"; break; case IMSpeechControlButtonStylePause: str = @"IMSpeechControlPause"; break; case IMSpeechControlButtonStyleStop: str = @"IMSpeechControlStop"; break; default: break; } isa = NSClassFromString(str); // the speechControl must be set before calling subclass implementation of initWithFrame self.speechControl = control; return [self initWithFrame:aRect]; } /* // Only override drawRect: if you perform custom drawing. // An empty implementation adversely affects performance during animation. - (void)drawRect:(CGRect)rect { // Drawing code. } */ - (void)dealloc { [super dealloc]; } @end All the control buttons have the exact same code as the play button, except that the handleGesture method calls the appropriate play/pause/stop function on the speechControl. The only reason I created all of them was so each of them could have their own images and so they can play different animations before changing state, but I didn't get to that yet. // IMSpeechControlPlay.h #import "IMSpeechControlButton.h" @interface IMSpeechControlPlay : IMSpeechControlButton { } - (void)handleGesture:(UIGestureRecognizer *)gestureRecognizer; @end // IMSpeechControlPlay.m #import "IMSpeechControlPlay.h" @implementation IMSpeechControlPlay - (id)initWithFrame:(CGRect)frame { self = [super initWithFrame:frame]; if (self) { // Initialization code. // TODO: set the image view UITapGestureRecognizer *gestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleGesture:)]; gestureRecognizer.numberOfTapsRequired = 1; gestureRecognizer.numberOfTouchesRequired = 1; gestureRecognizer.delaysTouchesBegan = YES; [self addGestureRecognizer:gestureRecognizer]; [gestureRecognizer release]; } return self; } - (void)handleGesture:(UIGestureRecognizer *)gestureRecognizer { if (gestureRecognizer.state == UIGestureRecognizerStateEnded) { [speechControl play]; } } /* // Only override drawRect: if you perform custom drawing. // An empty implementation adversely affects performance during animation. - (void)drawRect:(CGRect)rect { // Drawing code. } */ - (void)dealloc { [super dealloc]; } @end
