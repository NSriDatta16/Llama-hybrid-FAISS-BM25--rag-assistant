[site]: stackoverflow
[post_id]: 4548544
[parent_id]: 4547181
[tags]: 
There are two ways to solve your issue: Less work - but more repetitive. More work, but drives out your preferred convention. Less Work With any ActionResult , you can simply add a second parameter to the return statement to specify the name of the master to use: return View("Gallery", "Default"); the first parameter name is the view and the second signifies a master page override...but that does mean you need to repeat it everywhere, and this isn't much better than what you had before. More Work The way that Spark locates the master page to use is via the following code in the framework: protected virtual IEnumerable PotentialDefaultMasterLocations(string controllerName, IDictionary extra) { return ApplyFilters(new[] { "Layouts\\" + controllerName + ".spark", "Shared\\" + controllerName + ".spark", "Layouts\\Application.spark", "Shared\\Application.spark" }, extra); } Notice the hardcoded Application.spark in there - that's a Spark convention. What it seems that you want to do is override this method and put something like this in instead: protected virtual IEnumerable PotentialDefaultMasterLocations(string controllerName, IDictionary extra) { return ApplyFilters(new[] { "Layouts\\" + controllerName + ".spark", "Shared\\" + controllerName + ".spark", "Layouts\\Default.spark", "Shared\\Default.spark" "Layouts\\Application.spark", "Shared\\Application.spark" }, extra); } Then it will find your Default.spark before it finds Application.spark or you could get rid of the Application.spark entirely if it doesn't ring true for you and you prefer your conventions... In order to override this, all you need to do is create a class that inherits from Spark.Web.Mvc.DefaultDescriptorBuilder and override that method mentioned above and use it when you register the view engine like so: public static void RegisterViewEngine(ICollection engines) { var services = SparkEngineStarter.CreateContainer(); services.SetServiceBuilder ( c => new MyDescriptorBuilder()); SparkEngineStarter.RegisterViewEngine(services); } This now means that you can now direct where Spark should look for the Master views and what the names will be. Hope that helps, All the best, RobertTheGrey
