[site]: stackoverflow
[post_id]: 4141915
[parent_id]: 4057681
[tags]: 
First , as pointed out PerfomanceDBA, in order to understand SQL Server internals it is better to use Sybase documentation and terminology. Second, a good explanation where, why and how intermediate level consecutive transversing is explained in [1]: "Read-Ahead in a key-ordered scan With key-ordered scans, the engine uses the information stored in the intermediate index pages 1 level above the leaf level to schedule serial read-aheads for pages that contain the keys found. If a request is made for example for all keys from 1 to 100, the engine will first read the index page above the leaf page for key 1 (on it's way to traversing to the leaf page); however, instead of simply reading each leaf page in sequence from page 1 to page 100, the engine scans the intermediate level page and builds a list of the leaf pages that must be read to get pages 1 thru 100, then schedules all reads in key order - in addition, the engine will recognize if pages are contiguous and perform a single read to retrieve the adjacent pages in a single operation as opposed to multiple, smaller operations. A similar type of operation is used to pre-fetch data from a base cluster or heap when scanning through a non-clustered index - since the leaf rows of a non-clustered index contain pointers to the data rows in the cluster/heap structure, as the storage engine reads through the leaf of the non-clustered index, it also starts scheduling asynchronous reads for the corresponding data rows whose pointers have already been retrieved. This allows the engine to fetch data efficiently from the underlying cluster/heap before it has completed the scan of the non-clustered index. The navigation for a read-ahead in a key-ordered scan would look something like the following: " [1] Chad Boyd MSSQLTips - SQL Server Blog Fragmentation Station - Stop #1 - Storage basics and Access Methods http://blogs.mssqltips.com/blogs/chadboyd/archive/2007/11/12/fragmentation-station-stop-1-storage-basics-and-access-methods.aspx
