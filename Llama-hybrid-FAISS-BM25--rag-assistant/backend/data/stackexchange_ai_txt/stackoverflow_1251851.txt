[site]: stackoverflow
[post_id]: 1251851
[parent_id]: 1251791
[tags]: 
It's hard to find objective pragmatic comparisons of static versus dynamic typing issues because it's so often such a religious war. The little summary blubs that you've quoted tend to be the same boilerplate disclaimer everone makes that seems to be 'acceptable' to everyone these days. As someone who's experience is mostly in statically-typed languages, I tried to understand some of the trade-offs in a blog series a while back. Lots of caveats, but you might check out the second half of this blog entry for some comparison that is suggestive as the answer to your question. Here's one quote that suggests a window into the trade-offs: In a sense, this tiny function captures the essence of the ongoing debate between static and dynamic typing. The programmer can create domain-specific static types to structure the program, convey intent, and rule out a class of errors and behaviors at compile-time, at the price of having to author that structure and mediate structural mismatches at module boundaries. Or the programmer can choose to compute most everything with just scalars and lists, in which case data flows easily everywhere, resulting in short code, but with the loss of compile-time checks and conveyance of intent. and the running example shows a case where the statically-typed program disallows a useful/interesting behavior by its nature.
