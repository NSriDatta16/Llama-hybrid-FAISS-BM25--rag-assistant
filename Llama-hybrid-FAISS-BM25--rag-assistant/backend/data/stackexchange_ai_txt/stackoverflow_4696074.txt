[site]: stackoverflow
[post_id]: 4696074
[parent_id]: 4695767
[tags]: 
Sort of. It is a way to organize tests, but it's more than that. It behaves like the original Rails integration tests were supposed to, but is much easier to use. The big win here being that your session is maintained transparently across the entire Scenario . Another thing that's going on with Cucumber is that you're (supposed to be) testing from the point-of-view of a browser or client using your code. If you want you can use steps to build objects and set up state, but usually you want your steps to go through the motions required to achieve that state in the first place. For example you could do this: Given /I have a user account/ do @user = Factory.create(:user) # ... more user set up end But you should probably do something like this instead: Given /I have a user account/ do visit new_user_url fill_in "user_login", :with => "some name" fill_in "user_password", :with => "foo" # ... whatever else your sign up page needs end And of course you can pass in arguments to either of those steps to give your calling code some more fine-grained control over the step's behavior. What I have generally been doing with my tests is as follows. I use shoulda, but rspec is fine too. I write my negative-auth tests (i.e. Access denied is expected) as Rails functional tests. I write my positive-auth tests (i.e. users doing what they are supposed to be doing) as Cucumber features. And, of course, I still write Rails unit tests for my models, libraries, helpers, etc.
