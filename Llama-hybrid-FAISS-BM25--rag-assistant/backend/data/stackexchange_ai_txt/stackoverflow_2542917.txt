[site]: stackoverflow
[post_id]: 2542917
[parent_id]: 2542866
[tags]: 
Go to Spring home page and download Spring (Here, i am using 2.5.x version) After installing, put the following jar in your classpath /dist/spring.jar Here goes a single bean package br.com.introducing.Hello; public class Hello { private String message; // getter's and setter's } ... Write a single xml to configure your beans as follows // app.xml Put your app.xml in root classpath And your psvm public static void main(String [] args) { ApplicationContext appContext = new ClassPathXmlApplicationContext("app.xml"); Hello hello = (Hello) appContext.getBean("hello"); hello.getMessage(); // outputs What do you want ? } UPDATE What is the role of the applicationContext.xml When using getBean method, it behaves like a Factory pattern. Something like public class ApplicationContext { Map wiredBeans = new HashMap(); public static Object getBean(String beanName) { return wiredBeans.get(beanName); } } As said by Spring in Action book It is a general-purpose factory, creating and dipensing many types of bean. But, There is more Allows you load files You can publish events It supports i18n (i18n stands for internationalization) Suppose here goes messages.properties (root of the classpath) // messages.properties messsageCode=What do you want ? To enable i18n, You must define a bean called messageSource to get advantage of our resource, as follows Now, you can use it appContext.getMessage("messsageCode", null, null); // outputs What do you want ? Usually, we do not need to define all of our beans in xml file. You can use annotations (Additional settings needed to enable component scanning) instead of xml, Something like package br.com.introducing.Hello; @Component public class Hello { private String message; // getter's and setter's } Component annotation says: Spring, i am a general-purpose bean which can be retrieved through application context A good resource about Spring is either Spring in Action book or Spring documentation Advice: read carefully
