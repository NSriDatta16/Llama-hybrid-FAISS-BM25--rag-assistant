[site]: stackoverflow
[post_id]: 2054709
[parent_id]: 2052533
[tags]: 
As already mentioned in the other answer you can make your final classes to implement interface(s) and in your tests mock the interface(s). This is one of the benefit of using Mock objects; in scenarios like this they make you to think about how the code can be better organized. If your code base has lot of reference to final classes (thus binding to concrete implementation) it violates the OO principle of "programming to an interface" and the need of better testability would help you to think of refactoring to eliminate dependency on concrete implementations. This paper on usage of Mock Objects Endo-testing: Unit Testing with Mock Objects has a section (4.4) titled Interface discovery that explains how mock objects help in discovering the interfaces.
