[site]: stackoverflow
[post_id]: 4513003
[parent_id]: 
[tags]: 
How do I get consistent rendering when scaling a JTextPane?

Possible Duplicate: Part 2 - How do I get consistent rendering when scaling a JTextPane? I would like to allow users to zoom into or out of a non-editable JTextPane. Running the example program below, I find that scaling the Graphics object results in inconsistent spacing between runs of bold text and non-bold text. If there is a single space between the bold and the non-bold, sometimes it is rendered too wide and at other zoom levels the space disappears and the adjacent characters overlap. Without rendering hints, the spacing is correct at 100%, but incorrect at other zoom levels. With the KEY_FRACTIONALMETRICS rendering hint, the results are consistent at all zoom levels, but the spacing between bold and non-bold is wrong even at 100%. I tried this with both Java 1.6.0_13 and 1.6.0_23. The results were the same. Any suggestions how I can achieve attractive scaled rendering at all zoom levels? import java.awt.BorderLayout; import java.awt.Color; import java.awt.Font; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.RenderingHints; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JTextPane; import javax.swing.SwingUtilities; import javax.swing.text.BadLocationException; import javax.swing.text.Style; import javax.swing.text.StyleConstants; import javax.swing.text.StyleContext; import javax.swing.text.StyledDocument; public class ScaledJTextPane extends JTextPane { double scale_; public ScaledJTextPane() { scale_ = 1.0; } protected void paintComponent(Graphics g) { Graphics2D g2 = (Graphics2D) g; // Try with and without the rendering hint g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON); g2.scale(scale_, scale_); super.paintComponent(g2); } public void setScale(double scale) { scale_ = scale; } private static void createAndShowGUI() { // Create and set up the window. JFrame frame = new JFrame("ScaledJTextPane"); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); final ScaledJTextPane scaledTextPane = new ScaledJTextPane(); StyledDocument doc = scaledTextPane.getStyledDocument(); Style defaultStyle = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE); Style boldStyle = doc.addStyle("bold", defaultStyle); StyleConstants.setBold(boldStyle, true); scaledTextPane.setFont(new Font("Dialog", Font.PLAIN, 14)); String boldText = "Four score and seven years ago "; String plainText = "our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal."; try { doc.insertString(doc.getLength(), boldText, boldStyle); doc.insertString(doc.getLength(), plainText, defaultStyle); } catch (BadLocationException ble) { System.err.println("Couldn't insert text into text pane."); } final JComboBox zoomCombo=new JComboBox(new String[] {"75%", "100%", "150%", "175%", "200%"}); final JPanel panel = new JPanel() { protected void paintComponent(Graphics g) { super.paintChildren(g); scaledTextPane.paint(g); } }; zoomCombo.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String s = (String) zoomCombo.getSelectedItem(); s = s.substring(0, s.length() - 1); double scale = new Double(s).doubleValue() / 100; scaledTextPane.setScale(scale); panel.invalidate(); panel.repaint(); } }); zoomCombo.setSelectedItem("100%"); // Add content to the window. scaledTextPane.setBounds(0, 0, 450, 300); panel.setOpaque(true); panel.setBackground(Color.WHITE); frame.getContentPane().add(panel, BorderLayout.CENTER); frame.getContentPane().add(zoomCombo, BorderLayout.NORTH); frame.setSize(900, 300); //Display the window. frame.setVisible(true); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); } }); } }
