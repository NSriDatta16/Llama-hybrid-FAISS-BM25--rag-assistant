[site]: stackoverflow
[post_id]: 1630853
[parent_id]: 1630320
[tags]: 
The 'code between' is an example of the Head-Tail pattern. You have an item, which is followed by a sequence of ( between, item ) pairs. You can also view this as a sequence of (item, between) pairs followed by an item. It's generally simpler to take the first element as special and all the others as the "standard" case. Further, to avoid repeating code, you have to provide a function or other object to contain the code you don't want to repeat. Embedding an if statement in a loop which is always false except one time is kind of silly. def item_processing( item ): # *the common processing* head_tail_iter = iter( someSequence ) head = next(head_tail_iter) item_processing( head ) for item in head_tail_iter: # *the between processing* item_processing( item ) This is more reliable because it's slightly easier to prove, It doesn't create an extra data structure (i.e., a copy of a list) and doesn't require a lot of wasted execution of an if condition which is always false except once.
