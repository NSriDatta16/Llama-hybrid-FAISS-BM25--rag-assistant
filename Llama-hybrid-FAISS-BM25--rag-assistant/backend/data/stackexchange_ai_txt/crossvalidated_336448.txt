[site]: crossvalidated
[post_id]: 336448
[parent_id]: 
[tags]: 
How to manage Cost Function while combining classification and regression?

I want to predict two values in a Machine learning model. The first is the direction (1 or 0 - Classification problem) and the second is magnitude (number). I want to provide more weight to classification so currently this is the cost i am using: classcost = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(labels=y[:, 0], logits=AL[:, 0])) reggcost = tf.reduce_mean(tf.square(y[:, 1] - AL[:, 1])) cost = 0.7 * classcost + 0.3 * reggcost However the regression cost decreases very fast (goes from 0.75 to 0.004 in a couple of iterations) while the classification cost does not (goes from 0.7 in couple of 100 iterations than to 0.4 and stabilizes). I think this causes issues with regression results. What would be the right way to tell my model this information?
