[site]: stackoverflow
[post_id]: 5606991
[parent_id]: 5606862
[tags]: 
From the fact that you are considering version B, which has the conditions outside of the loops, I assume that the the truth value of the conditions do not vary with the elements within the array. Otherwise, your question will not make sense. Conclusion If the conditions are complicated so that they take much time in evaluation relative to the size of the array, then version B is faster. If it is the other way around, then version A is faster. And which is faster should coincide in this case with which strategy you should take because it is more comprehensible to have a simple structure embedded within a complicated structure rather than having an embedding of a complicated structure within a simple structure. Explanation When the condition is simple enough relative to the size of the array, the cost of iteration overweighs the cost of evaluating the condition. As observed below with ruby, version B is slower. $a = (1..10000) def versionA $a.each do nil if true nil if false nil if true end end def versionB $a.each {nil} if true $a.each {nil} if false $a.each {nil} if true end require 'benchmark' n = 10000 Benchmark.bmbm do|b| b.report('A'){n.times{versionA}} b.report('B'){n.times{versionB}} end Rehearsal ------------------------------------- A 7.270000 0.010000 7.280000 ( 7.277896) B 13.510000 0.010000 13.520000 ( 13.515172) --------------------------- total: 20.800000sec user system total real A 7.200000 0.020000 7.220000 ( 7.219590) B 13.580000 0.000000 13.580000 ( 13.605983) On the other hand, if evaluating the conditions is more costly relative to iteration over the array, then the effect of the former will become more crucial than the latter, and the speed will be the other way around. $a = (1..100) def versionA $a.each do nil if (1..10).each{nil} && true nil if (1..10).each{nil} && false nil if (1..10).each{nil} && true end end def versionB $a.each {nil} if (1..10).each{nil} && true $a.each {nil} if (1..10).each{nil} && false $a.each {nil} if (1..10).each{nil} && true end require 'benchmark' n = 10000 Benchmark.bmbm do|b| b.report('A'){n.times{versionA}} b.report('B'){n.times{versionB}} end Rehearsal ------------------------------------- A 2.860000 0.000000 2.860000 ( 2.862344) B 0.160000 0.000000 0.160000 ( 0.169304) ---------------------------- total: 3.020000sec user system total real A 2.830000 0.000000 2.830000 ( 2.826170) B 0.170000 0.000000 0.170000 ( 0.168738)
