[site]: crossvalidated
[post_id]: 545799
[parent_id]: 545627
[tags]: 
If you add a maximum time step to an environment, then that does not change value calculation algorithms at all. It changes the state representation. You should add either the time step or time remaining as a new property of the state. Without considering the current time step in the state, if an agent could be in the same state, but with a different amount of time remaining, then it could not calculate a consistent value for expected future reward. The expected future reward will usually be correlated with the amount of remaining time. Without the time in the state, the environment would become non-Markov (or partially observable). Whilst there are some algorithms that may solve this - an RNN variant of DQN springs to mind because it would learn its own time step counter - value iteration is not one of them. There may be exceptions to this where the state already implies a time step. A good example is Tic Tac Toe (Noughts and Crosses), because the number of filled squares equals the current time step. An environment like this where you added a rule to stop after a certain number of turns (before the board was filled) would not need a separate turn counter.
