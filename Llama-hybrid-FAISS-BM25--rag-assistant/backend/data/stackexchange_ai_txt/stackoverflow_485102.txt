[site]: stackoverflow
[post_id]: 485102
[parent_id]: 
[tags]: 
Using multiple languages in one project

From discussions I've had about language design, it seems like a lot of people make the argument that there is not and will never be "one true language". The alternative, according to these people, is to be familiar with several languages and to pick the right tool for the job. This makes perfect sense at the level of a whole project or a large subproject that only has to interact with the rest of the project through a very narrow, well-defined interface. On the other hand, using lots of different languages seems like a very awkward thing to do when trying to solve lots of small subproblems elegantly. In other words, IMHO, general purpose languages that are decent at everything still matter. As a trivial example, let's say you need to do the following: Read a bunch of data in some arbitrary format from a file. Check it for errors, etc. (Best done in something like Perl). Load this data into matrices, do a bunch of hardcore matrix ops on it (Best done in something like Matlab). Run a custom, computationally intensive routine on it that must be fast and space-efficient (Best done in C or C++). This is a fairly simple project, other than writing the computationally intensive custom matrix processing routine, yet the only good answer about what language to use seems to be a general-purpose one that's decent at everything. What am I missing here? How does one use multiple languages effectively to take advantage of each of their strengths?
