[site]: stackoverflow
[post_id]: 240253
[parent_id]: 240152
[tags]: 
Imagine the following basic interface which defines a basic CRUD mechanism: interface Storable { function create($data); function read($id); function update($data, $id); function delete($id); } From this interface, you can tell that any object that implements it, must have functionality to create, read, update and delete data. This could by a database connection, a CSV file reader, and XML file reader, or any other kind of mechanism that might want to use CRUD operations. Thus, you could now have something like the following: class Logger { Storable storage; function Logger(Storable storage) { this.storage = storage; } function writeLogEntry() { this.storage.create("I am a log entry"); } } This logger doesn't care if you pass in a database connection, or something that manipulates files on disk. All it needs to know is that it can call create() on it, and it'll work as expected. The next question to arise from this then is, if databases and CSV files, etc, can all store data, shouldn't they be inherited from a generic Storable object and thus do away with the need for interfaces? The answer to this is no... not every database connection might implement CRUD operations, and the same applies to every file reader. Interfaces define what the object is capable of doing and how you need to use it... not what it is!
