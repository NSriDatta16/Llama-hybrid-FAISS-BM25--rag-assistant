[site]: stackoverflow
[post_id]: 1790550
[parent_id]: 
[tags]: 
Running average in Python

Is there a pythonic way to build up a list that contains a running average of some function? After reading a fun little piece about Martians, black boxes, and the Cauchy distribution , I thought it would be fun to calculate a running average of the Cauchy distribution myself: import math import random def cauchy(location, scale): p = 0.0 while p == 0.0: p = random.random() return location + scale*math.tan(math.pi*(p - 0.5)) # is this next block of code a good way to populate running_avg? sum = 0 count = 0 max = 10 running_avg = [] while count I think that this approach works, but I'm curious if there might be a more elegant approach to building up that running_avg list than using loops and counters (e.g. list comprehensions ). There are some related questions, but they address more complicated problems (small window size, exponential weighting) or aren't specific to Python: calculate exponential moving average in python How to efficiently calculate a running standard deviation? Calculating the Moving Average of a List
