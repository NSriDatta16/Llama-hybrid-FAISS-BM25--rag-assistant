[site]: stackoverflow
[post_id]: 4274770
[parent_id]: 
[tags]: 
WPF style depending on checkbox state

I am creating a settings editor where plugin writers can define their own user interface for configuring their plugins. I am implementing a feature to hide certain "advanced" elements if a checkbox is unchecked. The checkbox XAML is trivial: _Advanced Ideally (more on this later), implementors would just add a flag to advanced controls (which should be hidden when the "advanced" checkbox is unchecked) like so: My Button The problem lies in making the magic of hiding the IsAdvanced="True" elements when isAdvanced.IsChecked == false . I have the desired behaviour with this style on the window element: However, this method presents two problems: It only adds functionality to buttons and nothing else. The IsAdvanced flag can (should be able to) be added to any visual element. It replaces/overrides the styles which would otherwise be on the button. Is there some other way to produce the functionality I want? I'm not afraid of working in the code-behind, but an elegant XAML solution is ideal (as this is purely a UI change, aside from saving the state of the checkbox in the user's preferences). Some other methods of signifying advanced elements have come to mind. These include using a dynamic resource and directly binding: My Button My Button Using a resource dictionary would probably work, but it seems like a really bad solution as UI state doesn't seem like it should belong in a dictionary. Binding manually is quite the mess because the state of the checkbox has to be sent somehow to the element, and aside from hardcoding values I don't see it not becoming a mess. Both of these alternate solutions tie semantics ("this is an advanced option") to appearance ("advanced options should be collapsed"). Coming from the HTML world, I know this is a very bad thing, and I refuse to submit to these methods unless absolutely necessary.
