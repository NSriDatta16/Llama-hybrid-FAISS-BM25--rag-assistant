[site]: stackoverflow
[post_id]: 3330623
[parent_id]: 3330589
[tags]: 
rockinthesixstring - yes, you can add an http cache into that layer using an anonymous function to either pull from the repo or pull from cache. basically, you'd do it allong the following lines (this is from an app that i'm working on just now that uses subsonic, but the premise of what you're after is identical. /// /// Returns an IQueryable based on the passed-in Expression Database /// IQueryable IRepository .Find(Expression > expression) { // set up our object cacheKey string keyValue = ParseExpression(expression); if(keyValue==null) { return _repository.Find(expression); } string cacheKey = string.Format(EntityrootList, _className, "Find", keyValue, DateTime.UtcNow.Ticks.ToString(), string.Empty); // try to populate from the cache // rockinthesixstring - this is the part that is most relevant to you var result = Cache.Get(cacheKey, () => _repository.Find(expression), CacheDuration); return result; } [edit] in the controller, you'd call it like so (the controller _repository is set as: readonly IRepository _repository; in the example): [Authorize] [AcceptVerbs(HttpVerbs.Post)] public ContentResult ListBookings(int shareholderid) { Expression > exprTree = x => x.FundShareholderEntity.ShareholderID == shareholderid; var bookings = _repository.Find(exprTree).OrderByDescending(x => x.BookingDetailEntity.ActualDateFrom).OrderBy(x => x.BookingTypeID); return Content(this.RenderPartialToString("BookingListNoPaging", bookings)); } In the above example, Cache (i.e. Cache.Get()) is a class that wraps the httpcontext cache in a more user friendly way. hope this helps... jim [edit] - added cache interface to add to the 'debate' :) public interface ISessionCache { T Get (string key); T Get (string key, Func getUncachedItem, int cacheDuration); void Insert(string key, object obj, int cacheDuration, CacheDependency arg0, TimeSpan arg2); void Remove(string key); object this[string key] { get; } // default indexer IDictionaryEnumerator GetEnumerator(); } in the injectable class would be used along the lines of: public class FakeCache : ISessionCache {... all inteface members implemented here etc..} or for httpcache: public class HttpContextCache : ISessionCache {... all inteface members implemented here etc..} etc, etc.. cheers again - jim
