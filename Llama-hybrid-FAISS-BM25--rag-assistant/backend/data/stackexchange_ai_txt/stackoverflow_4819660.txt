[site]: stackoverflow
[post_id]: 4819660
[parent_id]: 4809523
[tags]: 
EDIT: I've wrote GLSL fragment shader which performs fast skeletonization on images. You can apply this shader in a loop until you get what you need. GLSL shader code: uniform sampler2D Texture0; varying vec2 texCoord; // 3x3 pixel window // (-1,+1) (0,+1) (+1,+1) // (-1,0) (0,0) (+1,0) // (-1,-1) (0,-1) (+1,-1) float dtex = 1.0 / float(textureSize(Texture0,0)); vec4 pixel(int dx, int dy) { return texture2D(Texture0,texCoord + vec2(float(dx)*dtex, float(dy)*dtex)); } int exists(int dx, int dy) { return int(pixel(dx,dy).r (0,+1) clamp(float(exists(0,+1))-float(exists(+1,+1)),0.,1.) + // (0,+1) -> (+1,+1) clamp(float(exists(+1,+1))-float(exists(+1,0)),0.,1.) + // (+1,+1) -> (+1,0) clamp(float(exists(+1,0))-float(exists(+1,-1)),0.,1.) + // (+1,0) -> (+1,-1) clamp(float(exists(+1,-1))-float(exists(0,-1)),0.,1.) + // (+1,-1) -> (0,-1) clamp(float(exists(0,-1))-float(exists(-1,-1)),0.,1.) + // (0,-1) -> (-1,-1) clamp(float(exists(-1,-1))-float(exists(-1,0)),0.,1.) + // (-1,-1) -> (-1,0) clamp(float(exists(-1,0))-float(exists(-1,+1)),0.,1.) // (-1,0) -> (-1,+1) ); } int MarkedForRemoval() { int neib = neighbors(); int tran = transitions(); if (exists(0,0)==0 // do not remove if already white || neib==0 // do not remove an isolated point || neib==1 // do not remove tip of a line || neib==7 // do not remove located in concavity || neib==8 // do not remove not a boundary point || tran>=2 // do not remove on a bridge connecting two or more edge pieces ) return 0; else return 1; } void main(void) { int remove = MarkedForRemoval(); vec4 curr = texture2D(Texture0,texCoord); vec4 col = vec4(remove,remove,remove,1.0); gl_FragColor = (remove==1)? col:((curr.r > 0.05)? vec4(1.0,1.0,1.0,1.0):curr); } Only this time code is based on this lecture (actually on first part of lecture, so algorithm has some bugs :-) ) See what happens when poor chimpanzee was constantly fed with this GLSL shader: Iteration 0 Iteration 5 Iteration 10 Iteration 15
