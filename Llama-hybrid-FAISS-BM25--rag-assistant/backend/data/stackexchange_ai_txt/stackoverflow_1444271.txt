[site]: stackoverflow
[post_id]: 1444271
[parent_id]: 1444221
[tags]: 
Some Benchmarks for modularity: How many times are you rewriting similar code for doing a particular task? How much do you have to refactor your code when you change some part of your program? Are the files small and easy to navigate through? Are the application modules performing adequately and independently as and when required? Is your code minimally disastrous ? Does all hell break lose when you delete just one function or variable? Do you get 20-odd errors upon re-naming a class? (To examine this, you can implement a stacking mechanism to keep trace of all the hops in your application) How near is the code to natural language usage? (i.e. modules and their subcomponents represent more real world objects without giving much concern to net source file size). For more ideas check out this blurb about modularity and this one on software quality As for your concern on making your code more modular first you should ask yourself the above questions, obtain specific answers for them and then have a look at this . The basic philosophy is to break down your application into as small of code fragments as possible, arranged neatly across a multitude of easily understandable and accessible directory layouts. Each method in your application must do no more than the minimum quanta of processing needed . Combining these methods into more and more macro level methods should lead you back to your application.
