[site]: stackoverflow
[post_id]: 3043741
[parent_id]: 3043451
[tags]: 
Are you asking about (1) true class replacement at run-time, or (2) facilities to transform the class when it's loaded or (3) languages which support dynamic class loading ? Java support dynamic class loading with ClassLoader , transformation with ClassFileTransformer , but no true class replacement. I'm not sure for C#, but I think you can emit code at run-time and create new class dynamically, so you can achieve (3) and probably (2). True class replacement is mostly supported only by dynamic language , e.g. Smalltalk, Ruby, I guess Python and a few others. This requires the transformation of the instances of the class to match the new shape. They usually initialize the new fields to nil if the class changes. AFAIK, dynamic languages ported to the JVM make extensive hacking of ClassLoader to support class replacement at run-time. For JRuby, see A first taste of invoke dynamic to get more pointers how they do it now, what's problematic and how the upcoming invokedynamic might help. This is not offered in statically typed languages because of the complication with the type system . If a method signature change in a class, other existing classes already loaded might not necessary comply with the new method signature which is not safe. In java you can however change a method as long as the signature is the same using the Java Platform Debugger Architecture . There have been some attempt to add this feature to Java, and/or statically typed languages: Runtime support for type-safe dynamic Java classes Supporting Unanticipated Dynamic Adaptation of Application Behaviour A Technique for Dynamic Updating of Java Software This paper provide a general overview of related problems Inï¬‚uence of type systems on dynamic software evolution Not sure exactly if that address you initial question, but these pointers might be interesting for your thesis anyway.
