[site]: stackoverflow
[post_id]: 770212
[parent_id]: 770161
[tags]: 
This answer is not in anyway intended to be "elegant", but I suppose it might fall under the "clever" category. (Note: clever solutions are not always "good" solutions) preg_match_all( "/\"name\";s:\d+:\"(.*?)\"/i", serialize( $arr ), $matches ); print_r( $matches[1] ); In all honesty, recursive iteration is the best choice for clarity, even if it's not terribly efficient or concise. $arr = array( "0" => array( "Category" => array( "id" => 49 ,"name" => Poster ) ,"Child" => array() ) ,"1" => array( "Category" => array( "id" => 48 ,"name" => Sticker ) ,"Child" => array() ) ,"2" => array( "Category" => array( "id" => 46 ,"name" => Hat ) ,"Child" => array() ) ,"3" => array( "Category" => array( "id" => 45 ,"name" => Hoodie ) ,"Child" => array( "0" => array( "id" => 49 ,"name" => Poster ) ,"1" => array( "id" => 48 ,"name" => Sticker ) ,"2" => array( "id" => 40 ,"name" => Apparel ) ) ) ); findNames( $arr, $names ); echo ' '; print_r( $names ); echo ' '; function findNames( $source, &$out ) { foreach ( $source as $value ) { if ( isset( $value['name'] ) ) { // Assumes that if $value['name'] exists, $value['id'] must also exist $out[$value['id']] = $value['name']; continue; } if ( is_array( $value ) ) { findNames( $value, &$out ); } } }
