[site]: stackoverflow
[post_id]: 5151352
[parent_id]: 5151319
[tags]: 
Simply writing int x; at either global scope or local scope, is both a declaration and definition. Typically, the declaration tells the compiler "This variable will exist, at some point, under this name, so you can use it." The definition tells the compiler to actually arrange for the variable to be created - obviously this can only happen once. Typically the way you'll use this is by putting in a header file: // Foo.h #ifndef FOO_H #define FOO_H // make sure structs aren't redefined extern int bar; // Declare a variable bar #endif And in a single source file #include "foo.h" int bar; // Define bar If you were to define bar in multiple files, you would get an error; you can't create the variable twice. But you do have to tell the compiler about it in every source file you use bar in. Hence the extern declaration. The precise semantics are defined in ยง6.9.2 of the C standard and can be summarized as follows: When a variable is declared at file scope with an initializer, it is an external definition . (ยง6.9.2/1) When a variable is declared at file scope without an initializer, and without a storage-class specifier or with the static storage-class specifier, it is a tentative definition . If the translation unit (file) has one or more tentative definitions and no external definition , the compiler automatically adds a true file scope declaration at the end of the translation unit, with a zero initializer. (ยง6.9.2/2) What this means is that, strictly speaking, int x; is not a definition; but it automatically creates a definition if and only if there is no other definition with an initializer, and no static definition (this third case is undefined behavior due to linkage disagreement per ยง6.2.2/7) Note that extern int x; is not an external definition . It is a declaration with an extern storage class specifier. As such, extern int x; alone does not cause a definition to be created, but if you have both: extern int x; int x; Then you will end up having a definition created at some point in the file. It is also, technically speaking, legal to do this: extern int x; int x; int x = 42; In this case, the int x; in the middle is superfluous and has no effect. That said, this is poor form, as it's confusing in this case where the actual definition is.
