[site]: stackoverflow
[post_id]: 1051209
[parent_id]: 1051089
[tags]: 
Overload resolution for integer types happen on two categories, which can be very roughly summarized to Promotion: This is a conversion from types smaller than int to int or unsigned int , depending on whether int can store all the values of the source type. Conversion: This is a conversion from any integer type to another integer type. Similar, conversion for floating point types happen on two categories Promotion: This is a conversion from float to double Conversion: This is a conversion from any floating point type to another floating point type And there is a conversion from integer to floating or back. This is ranked as a conversion, rather than a promotion. A promotion is ranked better than a conversion, and where only a promotion is needed, that case will be preferred. Thus, you can use the following constructors PointList( int maxVals ); PointList( unsigned int maxVals ); PointList( long maxVals ); PointList( unsigned long maxVals ); PointList( double maxDist ); PointList( long double maxDist ); For any integer type, this should select the first group of constructor. And for any floating point type, this should select the second group of constructors. Your original two constructors could easily result in an ambiguity between float and unsigned int , if you pass an int , for example. For the other, two argument constructor, you can go with your solution, if you want. That said, i would use a factory function too, because deciding on the type the meaning of the parameter is quite fragile i think. Most people would expect the following result to equal PointList p(floor(1.5)); PointList u((int)1.5); But it would result in a different state of affairs.
