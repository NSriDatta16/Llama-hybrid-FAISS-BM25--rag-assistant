[site]: stackoverflow
[post_id]: 1269640
[parent_id]: 1269585
[tags]: 
I can give you a couple of keywords you might want to research in more detail: RAII (Is pretty much the technique that ensures you don't have to worry about memory leaks. Very convenient) Generic Programming (The STL in particular. Experiment with iterators and the standard library algorithms, and see just how powerful these abstractions are. They're a key part of what I like about C++) Functors (Perhaps too simple on their own, but the way they can be used instead of function pointers with the algorithms mentioned above is interesting) And just get familiar with templates, and "mild" forms of template metaprogramming. (Traits classes, for example, and (partial) specializations. And just keep an eye on the C++ questions here on SO. A lot of interesting topics are regularly brought up. But the best advice is probably to keep it completely separate from C. Forget everything you learned about how to use C. It either doesn't apply in C++, or leads to inferior code that is harder to read and maintain. It's an interesting language in its own right, and has a number of unique features. Leverage those, and it can actually be fun to work with C++. Treat it as an overengineered Java, PHP or C, and it'll just make you want to throw up.
