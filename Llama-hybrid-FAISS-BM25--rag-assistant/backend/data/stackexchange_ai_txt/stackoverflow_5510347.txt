[site]: stackoverflow
[post_id]: 5510347
[parent_id]: 5401091
[tags]: 
I'd like to propose you a recursive solution, which make use of Node#replaceChild method to replace a node with a new tag: public static void paintAllNodes(Node node) { if (node.getNodeType() == Node.ELEMENT_NODE) { Element somethingElement = node.getOwnerDocument().createElement("something"); somethingElement.setAttribute("style", "background-color:red"); node.getParentNode().replaceChild(somethingElement, node); somethingElement.appendChild(node); NodeList nodeList = node.getChildNodes(); for (int i = 0; i This is my main: public static void main(String[] args) throws SAXException, IOException, ParserConfigurationException, TransformerException { DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder(); Document document = docBuilder.parse(new File("document.xml")); paintAllNodes(document.getDocumentElement()); TransformerFactory transformerFactory = TransformerFactory.newInstance(); Transformer transformer = transformerFactory.newTransformer(); DOMSource source = new DOMSource(document); StreamResult result = new StreamResult(System.out); transformer.transform(source, result); } I've tested it with this xml: title title test My main has printed out this new xml, which seems to be what you want: title title test Hope this helps.
