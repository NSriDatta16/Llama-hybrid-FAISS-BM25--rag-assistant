[site]: stackoverflow
[post_id]: 3834548
[parent_id]: 
[tags]: 
android code for streaming shoutcast stream breaks in 2.2

The following code works fine on Android 2.1update1 - package com.troubadorian.android.teststreaming; import android.app.Activity; import android.content.Context; import android.os.Bundle; import android.util.Log; import android.view.View; import android.view.ViewGroup; import android.view.Window; import android.view.animation.AnimationUtils; import android.widget.AdapterView; import android.widget.BaseAdapter; import android.widget.Button; import android.widget.Gallery; import android.widget.ImageButton; import android.widget.ProgressBar; import android.widget.TextView; import android.widget.Toast; import android.widget.Gallery.LayoutParams; import android.widget.ImageSwitcher; import android.widget.ImageView; import android.widget.ViewSwitcher; public class TestStreaming extends Activity { private Button streamButton; private ImageButton playButton; private TextView textStreamed; private boolean isPlaying; private StreamingMediaPlayer audioStreamer; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); // requestWindowFeature(Window.FEATURE_NO_TITLE); setContentView(R.layout.main); initControls(); } protected void onDestroy() { super.onDestroy(); Toast.makeText(TestStreaming.this, "...exiting application..." ,Toast.LENGTH_SHORT).show(); if ( audioStreamer != null) { audioStreamer.interrupt(); } } private void initControls() { textStreamed = (TextView) findViewById(R.id.text_kb_streamed); streamButton = (Button) findViewById(R.id.button_stream); streamButton.setOnClickListener(new View.OnClickListener() { public void onClick(View view) { String urlstring2 = "url to a shoutcase stream"; Toast .makeText( TestStreaming.this, "The following stream is about to start" + urlstring2, Toast.LENGTH_LONG).show(); startStreamingAudio(urlstring2); } }); playButton = (ImageButton) findViewById(R.id.button_play); playButton.setEnabled(false); playButton.setOnClickListener(new View.OnClickListener() { public void onClick(View view) { if (audioStreamer.getMediaPlayer().isPlaying()) { audioStreamer.getMediaPlayer().pause(); playButton.setImageResource(R.drawable.button_play); } else { audioStreamer.getMediaPlayer().start(); audioStreamer.startPlayProgressUpdater(); playButton.setImageResource(R.drawable.button_pause); } isPlaying = !isPlaying; } }); } private void startStreamingAudio(String urlstring) { try { final ProgressBar progressBar = (ProgressBar) findViewById(R.id.progress_bar); if ( audioStreamer != null) { audioStreamer.interrupt(); } audioStreamer = new StreamingMediaPlayer(this,textStreamed, playButton, streamButton,progressBar); audioStreamer.startStreaming(urlstring,5208, 216); streamButton.setEnabled(false); } catch (Exception e) { Log.e(getClass().getName(), "Error starting to stream audio.", e); } } public void onItemSelected(AdapterView parent, View v, int position, long id) { mSwitcher.setImageResource(mImageIds[position]); } public void onNothingSelected(AdapterView parent) { } public View makeView() { ImageView i = new ImageView(this); i.setBackgroundColor(0xFF000000); i.setScaleType(ImageView.ScaleType.FIT_CENTER); i.setLayoutParams(new ImageSwitcher.LayoutParams( LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT)); return i; } private ImageSwitcher mSwitcher; public class ImageAdapter extends BaseAdapter { public ImageAdapter(Context c) { mContext = c; } public int getCount() { return mThumbIds.length; } public Object getItem(int position) { return position; } public long getItemId(int position) { return position; } public View getView(int position, View convertView, ViewGroup parent) { ImageView i = new ImageView(mContext); i.setImageResource(mThumbIds[position]); i.setAdjustViewBounds(true); i.setLayoutParams(new Gallery.LayoutParams( LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)); i.setBackgroundResource(R.drawable.picture_frame); return i; } private Context mContext; } private Integer[] mThumbIds = { R.drawable.calculator, R.drawable.calendar, R.drawable.camera }; private Integer[] mImageIds = { R.drawable.calculator, R.drawable.calendar, R.drawable.camera }; } with the StreamingMediaPlayer class as follows - package com.troubadorian.android.teststreaming; import java.io.BufferedInputStream; import java.io.BufferedOutputStream; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.net.URL; import java.net.URLConnection; import android.content.Context; import android.media.AudioManager; import android.media.MediaPlayer; import android.os.Handler; import android.util.Log; import android.widget.Button; import android.widget.ImageButton; import android.widget.ProgressBar; import android.widget.TextView; /** * MediaPlayer does not yet support streaming from external URLs so this class * provides a pseudo-streaming function by downloading the content incrementally * & playing as soon as we get enough audio in our temporary storage. */ public class StreamingMediaPlayer { private static final int INTIAL_KB_BUFFER = 96 * 10 / 8;// assume // 96kbps*10secs/8bits // per byte private TextView textStreamed; private ImageButton playButton; private ProgressBar progressBar; // Track for display by progressBar private long mediaLengthInKb, mediaLengthInSeconds; private int totalKbRead = 0; // Create Handler to call View updates on the main UI thread. private final Handler handler = new Handler(); private MediaPlayer mediaPlayer; private File downloadingMediaFile; private boolean isInterrupted; private Context context; private int counter = 0; public StreamingMediaPlayer(Context context, TextView textStreamed, ImageButton playButton, Button streamButton, ProgressBar progressBar) { this.context = context; this.textStreamed = textStreamed; this.playButton = playButton; this.progressBar = progressBar; } /** * Progressivly download the media to a temporary location and update the * MediaPlayer as new content becomes available. */ public void startStreaming(final String mediaUrl, long mediaLengthInKb, long mediaLengthInSeconds) throws IOException { this.mediaLengthInKb = mediaLengthInKb; this.mediaLengthInSeconds = mediaLengthInSeconds; Runnable r = new Runnable() { public void run() { try { downloadAudioIncrement(mediaUrl); } catch (IOException e) { Log.e(getClass().getName(), "Unable to initialize the MediaPlayer for fileUrl=" + mediaUrl, e); return; } } }; new Thread(r).start(); } /** * Download the url stream to a temporary location and then call the * setDataSource for that local file */ public void downloadAudioIncrement(String mediaUrl) throws IOException { URLConnection cn = new URL(mediaUrl).openConnection(); cn.connect(); InputStream stream = cn.getInputStream(); if (stream == null) { Log.e(getClass().getName(), "Unable to create InputStream for mediaUrl:" + mediaUrl); } downloadingMediaFile = new File(context.getCacheDir(), "downloadingMedia.dat"); // Just in case a prior deletion failed because our code crashed or // something, we also delete any previously // downloaded file to ensure we start fresh. If you use this code, // always delete // no longer used downloads else you'll quickly fill up your hard disk // memory. Of course, you can also // store any previously downloaded file in a separate data cache for // instant replay if you wanted as well. if (downloadingMediaFile.exists()) { downloadingMediaFile.delete(); } FileOutputStream out = new FileOutputStream(downloadingMediaFile); byte buf[] = new byte[16384]; int totalBytesRead = 0, incrementalBytesRead = 0; do { int numread = stream.read(buf); if (numread = INTIAL_KB_BUFFER) { try { startMediaPlayer(); } catch (Exception e) { Log.e(getClass().getName(), "Error copying buffered conent.", e); } } } else if (mediaPlayer.getDuration() - mediaPlayer.getCurrentPosition() and the layout file as follows - But the same code does not work in Android 2.2. Can it be fixed up to run on 2.2 ? Here's the error I am getting - E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): Error initializing the MediaPlayer. E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): java.io.IOException: setDataSourceFD failed.: status=0x80000000 E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.media.MediaPlayer.setDataSource(Native Method) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.media.MediaPlayer.setDataSource(MediaPlayer.java:749) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.troubadorian.android.teststreaming.StreamingMediaPlayer.createMediaPlayer(StreamingMediaPlayer.java:272) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.troubadorian.android.teststreaming.StreamingMediaPlayer.startMediaPlayer(StreamingMediaPlayer.java:237) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.troubadorian.android.teststreaming.StreamingMediaPlayer.access$2(StreamingMediaPlayer.java:212) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.troubadorian.android.teststreaming.StreamingMediaPlayer$2.run(StreamingMediaPlayer.java:190) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.os.Handler.handleCallback(Handler.java:587) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.os.Handler.dispatchMessage(Handler.java:92) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.os.Looper.loop(Looper.java:123) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.app.ActivityThread.main(ActivityThread.java:4627) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at java.lang.reflect.Method.invokeNative(Native Method) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at java.lang.reflect.Method.invoke(Method.java:521) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:868) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:626) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at dalvik.system.NativeStart.main(Native Method) I/global ( 1423): Default buffer size used in BufferedInputStream constructor. It would be better to be explicit if an 8k buffer is required. I/global ( 1423): Default buffer size used in BufferedOutputStream constructor. It would be better to be explicit if an 8k buffer is required. E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): Buffered File path: /data/data/com.troubadorian.android.teststreaming/cache/playingMedia34.dat E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): Buffered File length: 193188 E/MediaPlayer( 1423): Unable to to create media player E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): Error initializing the MediaPlayer. E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): java.io.IOException: setDataSourceFD failed.: status=0x80000000 E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.media.MediaPlayer.setDataSource(Native Method) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.media.MediaPlayer.setDataSource(MediaPlayer.java:749) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.troubadorian.android.teststreaming.StreamingMediaPlayer.createMediaPlayer(StreamingMediaPlayer.java:272) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.troubadorian.android.teststreaming.StreamingMediaPlayer.startMediaPlayer(StreamingMediaPlayer.java:237) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.troubadorian.android.teststreaming.StreamingMediaPlayer.access$2(StreamingMediaPlayer.java:212) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.troubadorian.android.teststreaming.StreamingMediaPlayer$2.run(StreamingMediaPlayer.java:190) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.os.Handler.handleCallback(Handler.java:587) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.os.Handler.dispatchMessage(Handler.java:92) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.os.Looper.loop(Looper.java:123) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at android.app.ActivityThread.main(ActivityThread.java:4627) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at java.lang.reflect.Method.invokeNative(Native Method) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at java.lang.reflect.Method.invoke(Method.java:521) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:868) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:626) E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): at dalvik.system.NativeStart.main(Native Method) I/global ( 1423): Default buffer size used in BufferedInputStream constructor. It would be better to be explicit if an 8k buffer is required. I/global ( 1423): Default buffer size used in BufferedOutputStream constructor. It would be better to be explicit if an 8k buffer is required. E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): Buffered File path: /data/data/com.troubadorian.android.teststreaming/cache/playingMedia35.dat E/com.troubadorian.android.teststreaming.StreamingMediaPlayer( 1423): Buffered File length: 194588 E/MediaPlayer( 1423): Unable to to create media player Please help.
