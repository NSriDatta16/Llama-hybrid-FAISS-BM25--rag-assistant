[site]: stackoverflow
[post_id]: 4259887
[parent_id]: 4259792
[tags]: 
If you asking about language constructs: Use try: except: else: it ensures that you won't catch wrong exceptions. Think twice before you catch BaseException , Exception or use bare except: as you can easly catch to much: your spelling errors - NameError, ImportError user's attempt to terminate your program. KeyboardInterrupt, SystemExit errors that indicates incomplete implementation: NotImplementedError If you decide to catch generic exceptions log them using log.exception('your message', e) Keep in mind that exceptions in python are used also for regular flow control (like StopIteration exception) Use new syntax: except MyException as myex: instead of except MyException, myex: . It is easier to read for not experienced python developers. Here is an example that catches NameError: try: this_doesn_not_exisit(); except Exception: #Don't do that! pass print "But this line is still printed" Answer to the edited question: Regarding files if you read text files always use codecs.open instead of open to ensure that you can safety store unicode strings. Regarding the __init__ and state of the object. __init__ is an initializer so the object already exist when __init__ is called. If you raise an exception the flow will be interrupted and object won't get stored in any variable so it will be garbage collected. At least that is my understanding. Think that MyObject() is just a function that returns a value if you raise an exception you return nothing, the flow is interrupted and the value you were assigning to isn't modified. Check this out: >>> def throw(): raise Exception() ... >>> a=1 >>> a=throw() Traceback (most recent call last): File " ", line 1, in File " ", line 1, in throw Exception >>> a 1 Here is an example to prove that the object is created even if you raise exception in __init__ . I wasn't able to post that fragment in the comments to @S.Lott answer: >>> global_collection=[] >>> class Partial(object): ... def __init__(self): ... self.test="test" ... global_collection.append(self) ... raise Exception() ... >>> x=Partial() Traceback (most recent call last): File " ", line 1, in File " ", line 5, in __init__ Exception >>> global_collection [ ] >>> global_collection[0].test 'test' UPDATE: Included comments made by: @Paul McGuire, @martineau, @aaronasterling
