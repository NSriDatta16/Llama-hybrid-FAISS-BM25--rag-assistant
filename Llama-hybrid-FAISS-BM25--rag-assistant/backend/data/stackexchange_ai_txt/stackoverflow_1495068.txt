[site]: stackoverflow
[post_id]: 1495068
[parent_id]: 1486815
[tags]: 
You would want to store a unique ID along with the textual value in the source database (not unlike what you would do in an RDBMS). Then, only store that ID in any referencing documents, and use a computed-for-display field to lookup the display value. (There is a performance consideration here - and you could "de-normalize" the data and store the ID and text value in the referencing documents, and do some asynchronous work to keep the values in sync - eg: using a scheduled agent that runs every night or every week). If DB1 has the key values and DB2 has the documents which will reference these values, then in the form in DB2, you would still do a @DbColumn to lookup your value list. In the lookup view in DB1, concat the text value and ID with a pipe separator (textField + "|" + ID) in the first column. That will tell Notes to store only the ID value (what follows the pipe is the "alias" and is what will be stored). Note: I would avoid using @DocumentUniqueID as the unique ID for these values, as the Document Unique ID will change if the documents are copied and pasted, or the entire database is copied, etc. You can use the @unique formula function in a computed-when-composed field to generate something close to a unique ID (almost like an identity column in sql).
