[site]: stackoverflow
[post_id]: 1901827
[parent_id]: 1901725
[tags]: 
The concept of logical negation is already included in Prolog in means of failure. If your implementation doesn't supply it (it can happens) you can think not as not(P) :- call(P), !, fail. or not(P) :- (call(P) -> fail ; true) Then look at the formula, it can be simplified to have not applied just to single predicates: ~(A & ~D) & ~B & ~A = (~A | D) & ~B & ~A = ~A & ~B It's just a De Morgan law and a consideration about the fact that D isn't useful to satisfability of the predicate. then you can combine them: final_predicate :- not(B), not(A). EDIT: remember , is AND and ; is OR.
