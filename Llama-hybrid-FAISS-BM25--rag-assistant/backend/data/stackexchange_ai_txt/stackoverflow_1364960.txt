[site]: stackoverflow
[post_id]: 1364960
[parent_id]: 1364561
[tags]: 
To comment on the Principles of the Agile Manifesto from my experience at a site that tried it. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. This was a double-edged sword for my last site -- valuable was taken to mean 100% perfect and bug-free. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. I still communicate with that site and just today, their rock-hard deadline date, they were given a requirement change. That was just the way things were there; it's almost as if they wanted failure. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. The norm for many years was basically build and deploy daily, hourly, near real-time... Business people and developers must work together daily throughout the project. Some of the meetings/reviews with respect to this were hilarious. We were reprimanded for not working with the people (because they asked us not to because they were already working 9-10 hour days) and then for bothering them because they were busy. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. Ahh, here's our problem... We had top-of-the-line PCs but the business side wasn't supportive. The positive morale essentially got beaten out of you after about a year or so... This also negates your micromanagement concern (if implemented correctly). The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. This worked out well. Personally I prefer email because I hate taking notes. Working software is the primary measure of progress. No doubt here. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. I agree with this 100%; the problem with the last business team I worked with was the expectation of 30-hour days, 10-day weeks, and 400-day years was not a pace I agreed with. Continuous attention to technical excellence and good design enhances agility. This is where some developer morale & education was needed. Simplicity--the art of maximizing the amount of work not done--is essential. I love this one and it's long been one of my goals. However, there was a "if you're not typing, you're not working" attitude that was tough to overcome. The best architectures, requirements, and designs emerge from self-organizing teams. I agree with this about 90% -- my only caveat is that they must be well-educated and well-informed teams. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. We just failed here and it likely caused a lot of other problems we had. The business side was really good at saying "you need to do what we say needs to be done." To wrap it up, if you're working somewhere where everyone is informed and on board with an Agile methodology, it should be a great place to work. When the goal is great software, momentum alone will carry any project.
