[site]: stackoverflow
[post_id]: 1599613
[parent_id]: 1599587
[tags]: 
I haven't seen MS docs to be contradictory about this (MSDN is sometimes wrong, but on this specific issue, I've always seen it correct). The MSDN link you posted says: For each primitive data type in Java , the core class library provides a wrapper class that represents it as a Java object. For example, the Int32 class wraps the int data type, and the Double class wraps the double data type. On the other hand , all primitive data types in C# are objects in the System namespace. For each data type, a short name, or alias, is provided. For instance, int is the short name for System.Int32 and double is the short form of System.Double. Basically, it's saying the right thing. In Java, Integer class is a wrapper for int primitive type. In C#, int is an alias for System.Int32 structure. The first paragraph is about Java and doesn't apply to C#. In .NET, the terminology is as follows: A primitive type is a type that has IsPrimitive property set to true. Primitive types are: The primitive types are Boolean, Byte, SByte, Int16, UInt16, Int32, UInt32, Int64, UInt64, IntPtr, UIntPtr, Char, Double, and Single. All primitive types are value types but not vice versa . A value type is a type that has value semantics, as opposed to reference semantics . The whole value is copied when passed by value (not its reference). Local variables of value types are stored on stack. struct s and enum s are value types. As mentioned above, all primitive types are value types. They are struct s in the System namespace. In C#, int , double , etc., keywords are basically aliases for those struct s.
