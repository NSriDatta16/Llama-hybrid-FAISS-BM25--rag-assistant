[site]: stackoverflow
[post_id]: 2103221
[parent_id]: 2102690
[tags]: 
Unit tests should be written to evaluate the public interface of a class. Your test case should use the class as you intend it to be used in your program. The idea here is to test the behavior (either expected, unexpected, or edge conditions) of the class. Both ideas you posted are correct. In theory, you should have enough test cases (routes through your code) that all your methods in the class are run. As was mentioned, 100% test coverage is a nice goal, but not always realistic. Also, in the case of GD, be careful about writing unit tests that test GD's functionality (it's already been tested, you don't need to waste time testing it again). I would read up on using PHPUnit's mocks and stubs (and mocking the filesystem) in the PHPUnit manual. Here's what an example test might look like: public function testImageIsResized() { $image = new Image(); $image->loadFromPath('some/path'); $image->resize(200, 300); $this->assertEquals(200, $image->getWidth()); $this->assertEquals(300, $image->getHeight()); } Now, depending on the expected behavior of the image class, this test might pass without issue, or it might fail because it was expecting the new dimensions to be proportionally constrained to the original image dimensions. But we did not explicitly call the internal method that checks for that constraint in the test itself.
