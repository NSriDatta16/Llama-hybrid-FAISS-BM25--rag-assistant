[site]: stackoverflow
[post_id]: 2099360
[parent_id]: 2097822
[tags]: 
Top-level objects: "have [...] no owning object" Nix. Top-level objects are owned by the File's Owner, which is the File's Owner because it owns all the top-level objects in the file. Windows have that option to release themselves as a convenience, but I find my design cleaner (even if it's a little more work) when I either turn it off and manage its lifetime myself, just like any other object I own, or use a window controller. If you think this conflicts with the documentation you were quoting, let's go through the entire paragraph: Objects in the nib file are initially created with a retain count of 1. As it rebuilds the object hierarchy, however, AppKit autoreleases any objects that have a parent or owning object, such as views nested inside view hierarchies. Thus killing off its own ownerships. The nib loader doesn't want to own your objects. By the time the nib-loading code is done, only the top-level objects in the nib file have a positive retain count and no owning object. Your code is responsible for releasing these top-level objects. In other words, it's handing the ownership over to you. The curious artifact of that is that you'll actually leak the object if your property to it has retain semantics. The documentation says you should retain it: For both Mac OS X and UIKit, the recommended way to manage the top-level objects in a nib file is to create outlets for them in the Fileâ€™s Owner object and then define setter methods to retain and release those objects as needed. But if you do this, the object will remain alive even after you release your ownership of it. I think I'll go file a bug about this. (Edit: Done. x-radar://problem/7559755) At the very least, the nib loader shouldn't be handing off two retentions, which it does in my test app (on 10.5.8 and 10.6.1).
