[site]: stackoverflow
[post_id]: 126898
[parent_id]: 
[tags]: 
Organizing the source code base when mixing two or more languages (like Java and C++)

I ran into a problem a few days ago when I had to introduce C++ files into a Java project. It started with a need to measure the CPU usage of the Java process and it was decided that the way to go was to use JNI to call out to a native library (a shared library on a Unix machine) written in C. The problem was to find an appropriate place to put the C files in the source repository (incidentally Clearcase) which consists of only Java files. I thought of a couple of alternatives: (a) Create a separate directory for putting the C files (specifically, one .h file and one .c file) at the top of the source base like: /vobs/myproduct/javasrc /vobs/myproduct/cppsrc I didn't like this because I have only two C files and it seemed very odd to split the source base at the language level like this. Had substantial portions of the project been written more or less equally in C++ and Java, this could be okay. (b) Put the C files into the Java package that uses it. I have the calling Java classes in /vobs/myproduct/com/mycompany/myproduct/util/ and the C files also go in there. I didn't like this either because I think the C files just don't belong in the Java package. Has anybody solved a problem like this before? Generally, what's a good strategy to follow when organizing codebase that mixes two or more languages? Update: I don't have any plan to use any C or C++ in my project, some Jython perhaps, but you never know when my customers need a feature that can be solved only by using C or best solved by using C.
