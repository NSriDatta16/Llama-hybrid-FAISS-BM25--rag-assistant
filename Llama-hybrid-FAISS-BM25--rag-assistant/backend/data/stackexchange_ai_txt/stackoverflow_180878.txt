[site]: stackoverflow
[post_id]: 180878
[parent_id]: 180297
[tags]: 
A great set of advice! Let's see, what haven't I seen mentioned.. use lots of small classes. Each class should do one thing well. I've never seen too many classes, virtually always too few. read the Refactoring book--the section on Bad Code Smells lists a lot of stuff to look out for. The biggest pointers that you are doing OO wrong is lots of setters and getters, the desire to use a switch statement and a large inheritance tree, but there are many others (Your question wasn't OO, but close enough). Don't initialize local variables as a matter of habit (String s=null;), otherwise the compiler can't catch this problem: String s; if(x == 5) s="5"; if(y == 5) s.append("5"); // Compiler will tell you s might not have been assigned // UNLESS your first line was "String s=null" Learn Javadocs. Just get in the habit of using them, they're not that complicated. Use Eclipse or NetBeans. Turn up error checking. Pay attention to the errors. Some you may decide aren't important, but many will help. If you are working in Swing, learn about the event thread--grok it or your GUIs will look like crap. There are some AMAZING libraries in the SDK. Advanced threading control, Reference classes, NIO and reflection are all missed by many programmers--and that's just scratching the surface. That said, don't abuse reflection--it can make your code hard to maintain--just know it's there and what it can do. Don't "Null" out variables to free memory--it's virtually never useful and makes you look like you don't understand Garbage Collection. Even sillier to do it in a finalize method. Hmm, while we're there--don't use finalize methods. Ever. If you need to clean up an external resource, look up reference classes (WeakReference).
