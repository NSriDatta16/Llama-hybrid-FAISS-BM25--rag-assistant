[site]: stackoverflow
[post_id]: 4220228
[parent_id]: 
[tags]: 
How would I stop a thread, allow a UI event to be handled, and then "restart" the thread?

I have a form that appears as shown in the attached image. I have two parts of the form that concern this question: the TabControl, and the Panel, as shown in the image. It should be noted that the panel is NOT within the TabControl. My situation is that I have a thread that executes continuously when the button, displayed in melt-your-eyes green in the Panel, is clicked. The thread polls the device which I'm interfacing with and updates the controls in the "Status" GroupBox at the bottom of the TabControl. When the user clicks on a control in the TabControl ( tabControl_Enter event), I trigger a ManualResetEvent which lets the thread finish its iteration so that I can perform the IO required by the clicked control. The code to to suspend the thread is as follows: private void StopSynchThread() { synchWaitHandle.Reset(); //various UI changes } private void updateSynchStat() { while (true) { synchWaitHandle.WaitOne(); try { updateSynch(); } } What I would like to do is then restart the thread automatically, instead of by button press, as is currently done. What I'm trying to do is avoid having to restart the thread by conditionally calling StartSynchThread() within each of the "bazillion" UI event handlers. StartSynchThread() is defined as: private void StartSynchThread() { synchWaitHandle.Set(); } Is there a precedent or decent paradigm for handling this? Without any concept of how to do so, I was thinking that I could alter my function that performs the IO with the device to generate an event after it gets a response from the device, but that seems inelegant. Any ideas? I appreciate your insights. Thanks.
