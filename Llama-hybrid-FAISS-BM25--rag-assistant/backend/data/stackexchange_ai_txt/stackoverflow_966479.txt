[site]: stackoverflow
[post_id]: 966479
[parent_id]: 966400
[tags]: 
If you want it to be expandable in both directions then a DataTable isn't the best of choices. For the interface, you can use an indexer property: class Foo { public string this[int x, int y] { get { return GetData(x,y); } } } For the backend Storage, the best option depends a bit on expected usage, ie will there be lots of empty cells. You could define a struct Index { public readonly int X, Y; } and override the Equals() and GetHashCode() members. There have been several questions about this on SO recently. After that, use a Dictionary You'd still have to manage Row and Column limits, and maybe intercept getting of empty cells.
