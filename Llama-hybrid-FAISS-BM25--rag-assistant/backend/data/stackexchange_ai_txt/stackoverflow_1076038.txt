[site]: stackoverflow
[post_id]: 1076038
[parent_id]: 1076018
[tags]: 
There's no direct way you could do that without resorting to reflection. If you really want to do that (I encourage you to consider changing your high level design first): To get a field value: var returnValue = typeof(T).GetField("FieldName").GetValue(null); To get a property: var returnValue = typeof(T).GetProperty("PropertyName").GetValue(null, null); To invoke a method: typeof(T).InvokeMember("MethodName", BindingFlags.Static | BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.NonPublic, null, null, null);
