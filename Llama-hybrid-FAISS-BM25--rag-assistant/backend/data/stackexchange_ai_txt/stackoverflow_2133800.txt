[site]: stackoverflow
[post_id]: 2133800
[parent_id]: 2133129
[tags]: 
I've answered this already here but together with other question. Therefore I answer it again: In db4o you have normally no id. db4o uses the object-identity to distinguish the object apart. So the same object in memory is going to be the same object for the database. As long a you don't serialize object this works fine, you don't need any ID. However as soon as objects are serialized / disconnected this doesn't work anymore (Typical for web-apps). I think this three options are possible: Use the db4o internal id . You can get this id with IObjectContainer.Ext().GetID(object) . And of course you can get a object by id: IObjectContainer.Ext().GetByID(id) . However this id isn't forever. Defragmenting the database changes this id. Using db4o's UUIDs . But db4o UUIDs are quite large Creating ids by yourself. For example using a GUID. Or using a clever id-generator . Remember to index such a id-field when you use it in queries . Of course you can create a base-class which provides the id-property with any of the implementations above.
