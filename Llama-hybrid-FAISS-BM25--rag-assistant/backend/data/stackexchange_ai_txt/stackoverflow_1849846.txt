[site]: stackoverflow
[post_id]: 1849846
[parent_id]: 1849490
[tags]: 
Since many others have already provided the technical reasons for using exceptions over error codes, I will give a practical one. I work on a complex system which uses return codes instead of exceptions. Now, this is very well designed code, but I would bet that, on average, about 70% of the code in every function is error handling code. A typically function looks something like this: long Foo( ) { long retCode = MoveStage( ); if ( retCode != RetCode_OK ) { logger->LogError( __LINE__, __FILE__, "some message" ); return( retCode ); } int someConfigVar = 0; long retCode = GetConfigVar( "SomeVarName", someConfigVar ); if ( retCode != RetCode_OK ) { logger->LogError( __LINE__, __FILE__, "some message" ); return( retCode ); } long retCode = DoSomething( ); if ( retCode != RetCode_OK ) { logger->LogError( __LINE__, __FILE__, "some message" ); return( retCode ); } // and on and on and on... } The code is full of this and is hard to follow. On top of that, in many places the return code is ignored completely because we know that the call will not fail. Every function returns a ret code, so what you would normally return as the output of the function has to be returned as an out parameter. Also, all of these functions just return the retCode on error, so we just bubble that damn retCode to the top if something bad happens. You cannot centralize your error handling strategy this way, it becomes a messy headache.
