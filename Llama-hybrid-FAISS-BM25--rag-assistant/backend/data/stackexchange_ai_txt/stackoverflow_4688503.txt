[site]: stackoverflow
[post_id]: 4688503
[parent_id]: 4677083
[tags]: 
Since your computer is not joined to domain at all, we cannot use WindowsIdentity or WindowsPrincipal and then check its IsInRole() method. The IsInRole() method works only if your computer is joined to the domain and it's using your domain machine account to do S4USelf. You cannot use LogonUser approach too because your computer won't let you create a logon session from an untrusted forest. I think we can only query the Active Directory directly to get the information we want. The code in your posted Microsoft KB does not work very well as far as I can tell. It's trying to query from memberOf attribute. The group information is not always available from the memberOf attributes. I just wrote an IsInRole() function using AccountManagement. I guess this is what you want. The IsInRole() function will call a recursive function IsInGroup() to find out all the groups the user belongs to. private bool IsInRole(string domain, string username, string password, string role) { using (var context = new PrincipalContext(ContextType.Domain, domain, username, password)) { GroupPrincipal group = GroupPrincipal.FindByIdentity(context, IdentityType.SamAccountName, role); UserPrincipal user = UserPrincipal.FindByIdentity(context, IdentityType.SamAccountName, username); return IsInGroup(user, group); } } private bool IsInGroup(Principal principal, GroupPrincipal group ) { if (principal.IsMemberOf(group)) return true; foreach (var g in principal.GetGroups()) { if (IsInGroup(g, group)) return true; } return false; } To use this IsInRole() function, you need to provide your domain name and domain credentials. If the username and password provided are wrong, you will get an exception. You need .NET 3.5 SP1 to use AccountManagement API. Also, you may like to pay attention to this hotfix . The AccountManagement API got some bugs if running in some environment. You may need to apply the hotfix.
