[site]: crossvalidated
[post_id]: 577017
[parent_id]: 
[tags]: 
Hessian not listed in GAM output of some models. Does this matter for significance of smooths and comparison with AIC?

Would really appreciate some help as I don't know how to proceed given my GAM results. I haven't had much luck getting answers to my GAM questions (not sure if there is something wrong with the way I am asking questions), and don't know anyone working with GAMs. I have run two GAMs (in R/ mgcv) which I would like to compare with AIC: stime1 The GAMs use daily time series data (over 14 years, no missing data) to predict number of deaths from temperature and precipitation. The models include a distributed lag term (6 days) because deaths may occur over a period of time following (high) exposure. Lag was set up as 7 column matrices of the lagged weather variables, following the example in Simon Wood's 2017 book p. 349. Full code can be found at the bottom of the post. The data file can be accessed on Github . For stime2 , the output from gam.check does not mention anything about the Hessian whereas the output for stime1 does (for output see bottom of post). So I am assuming that the Hessian was not calculated for stime2 . I am new to GAMs though have been learning a great deal at the conceptual level from @gavinsimpson 's webinar and @noamross' Datacamp course . I also have Simon Wood's book, but am really struggling with the math notations in it. As of yet, I only understand a little about how GAMs work "under the hood". However, my understanding is that a Hessian matrix contains the partial second derivatives of the smooth functions. Since the second derivative is used to penalise wiggliness, it sounds quite serious to me when the Hessian is not computed. What's happening here? Does this matter for comparison of models with AIC and does it matter for the interpretation of the significance of smooths? Output from gam.check for stime1 : Method: REML Optimizer: outer newton full convergence after 12 iterations. Gradient range [-0.002708667,0.001061138] (score 8906.308 & scale 1). Hessian positive definite, eigenvalue range [4.623881e-07,18.40785]. Model rank = 993 / 993 Basis dimension (k) checking results. Low p-value (k-index Output from gam.check for stime2 : Method: REML Optimizer: outer newton full convergence after 10 iterations. Gradient range [-2.069522e-05,4.700218e-05] (score 8900.599 & scale 1). eigenvalue range [-6.126244e-06,20.16501]. Model rank = 1005 / 1005 Basis dimension (k) checking results. Low p-value (k-index Full code: rm(list = ls()) # start with clean environment library(readr) library(mgcv) df $deaths_total,doy=df$ doy, year = df $year, month = df$ month, weekday = df $weekday, week = df$ week, monthday = df $monthday, time = df$ time, heap=df $heap, heap_bin = df$ heap_bin, precip_hourly_dailysum = df $precip_hourly_dailysum) dat$ temp_max $temp_max) dat$ temp_min $temp_min) dat$ temp_mean $temp_mean) dat$ wbgt_max $wbgt_max) dat$ wbgt_mean $wbgt_mean) dat$ wbgt_min $wbgt_min) dat$ temp_wb_nasa_max $temp_wb_nasa_max) dat$ sh_mean $sh_mean) dat$ solar_mean $solar_mean) dat$ wind2m_mean $wind2m_mean) dat$ sh_max $sh_max) dat$ solar_max $solar_max) dat$ wind2m_max $wind2m_max) dat$ temp_wb_nasa_mean $temp_wb_nasa_mean) dat$ precip_hourly_dailysum $precip_hourly_dailysum) dat$ precip_hourly $precip_hourly) dat$ precip_daily_total $precip_daily_total) dat$ temp $temp) dat$ sh $sh) dat$ rh $rh) dat$ solar $solar) dat$ wind2m
