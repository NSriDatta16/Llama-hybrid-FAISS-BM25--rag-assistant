[site]: datascience
[post_id]: 52732
[parent_id]: 52628
[tags]: 
You may apply Wolfram Language to your project. There is a free Wolfram Engine for developers and if you are developing in Python then with the Wolfram Client Library for Python you can use these functions in Python. A good place to start is the Time Series Processing guide or the Random Processes guide; both of which contain a link to the Time Series Processes guide. Use RandomFunction with any of the processes you wish to simulate. For example, with a MAProcess SeedRandom[9] res1 = RandomFunction[MAProcess[2, {.3, -.5}, 1], {0, 100}] The returned TemporalData object is known throughout the language so further process or analysis can continue from here. For example, visualise the result with ListLinePlot ListPlot[res1, Filling -> Axis] The values can be directly viewed with the "Values" property. Using Short to limit the output. res1["Values"] // Short {2.00335, 1.15942, >, 2.7685} Multiple paths can be generated as well. For example, generate two paths with ARMAProcess SeedRandom[11] res2 = RandomFunction[ARMAProcess[0.1, {0.8, 0.1}, {-0.4}, 0.1], {0, 100}, 2] Visualise with ListLinePlot ListLinePlot[res2] "Paths" property will return the paths as list. res2["Paths"] // Short {{{0,0.275976}, >, {100, 0.766177}}, { >}} "Components" property returns TemporalData objects for each path. res2["Components"] ListLinePlot /@ res2["Components"] Hope this helps.
