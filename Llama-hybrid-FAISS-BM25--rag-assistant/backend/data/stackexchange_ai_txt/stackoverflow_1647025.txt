[site]: stackoverflow
[post_id]: 1647025
[parent_id]: 1642142
[tags]: 
I built a similar app for Android which gets periodic updates with data from a government agency. It's fairly easy to build an Android compatible db off the device using perl or similar and download it to the phone from a website; and this works rather well, plus the user gets current data whenever they download the app. It's also supposed to be possible to throw the data onto the sdcard if you want to avoid using primary data storage space, which is a bigger concern for my app which has a ~6Mb database. In order to make Android happy with the DB, I believe you have to do the following (I build my DB using perl). $st = $db->prepare( "CREATE TABLE \"android_metadata\" (\"locale\" TEXT DEFAULT 'en_US')"); $st->execute(); $st = $db->prepare( "INSERT INTO \"android_metadata\" VALUES ('en_US')"); $st->execute(); I have an update activity which checks weather updates are available and if so presents an "update now" screen. The download process looks like this and lives in a DatabaseHelperClass. public void downloadUpdate(final Handler handler, final UpdateActivity updateActivity) { URL url; try { close(); File f = new File(getDatabasePath()); if (f.exists()) { f.delete(); } getReadableDatabase(); close(); url = new URL("http://yourserver.com/" + currentDbVersion + ".sqlite"); URLConnection urlconn = url.openConnection(); final int contentLength = urlconn.getContentLength(); Log.i(TAG, String.format("Download size %d", contentLength)); handler.post(new Runnable() { public void run() { updateActivity.setProgressMax(contentLength); } }); InputStream is = urlconn.getInputStream(); // Open the empty db as the output stream OutputStream os = new FileOutputStream(f); // transfer bytes from the inputfile to the outputfile byte[] buffer = new byte[1024 * 1000]; int written = 0; int length = 0; while (written Also note that I keep a version number in the filename of the db files, and a pointer to the current one in a text file on the server.
