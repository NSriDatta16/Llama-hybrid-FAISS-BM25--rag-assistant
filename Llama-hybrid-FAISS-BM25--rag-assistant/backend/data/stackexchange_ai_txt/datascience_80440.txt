[site]: datascience
[post_id]: 80440
[parent_id]: 77863
[tags]: 
Building a model pipeline is the way to go once you are done experimenting with your model. Following is a toy example - from sklearn.svm import SVC from sklearn.preprocessing import StandardScaler from sklearn.datasets import make_classification from sklearn.model_selection import train_test_split from sklearn.pipeline import Pipeline #Generating random dataset X, y = make_classification(random_state=0) #Splitting test and tran sets X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) #Defining a pipeline with standardscaling transformer and then svc estimator pipe = Pipeline([('scaler', StandardScaler()), ('svc', SVC())]) # The pipeline can be used as any other estimator # and avoids leaking the test set into the train set pipe.fit(X_train, y_train) #During prediction on a test or on a fresh set of data, just use the pipe object to run the whole pipeline and get predictions. pipe.score(X_test, y_test) You can easily create a pipeline in Sklearn for almost every possible transform available in Sklearn. Check the user guide for more details. Another example with PCA - from sklearn.pipeline import Pipeline from sklearn.svm import SVC from sklearn.decomposition import PCA estimators = [('reduce_dim', PCA()), ('clf', SVC())] pipe = Pipeline(estimators) pipe Pipeline(steps=[('reduce_dim', PCA()), ('clf', SVC())]) #Now you can use the fit method of the pipeline object to perform feature engineering and train model, while the scoring method for predictions For Sklearn Pipelines, you can have either a single or multiple transformation paths (which are combined together with a FeatureUnion) and then it has to end with an estimator (only a single estimator is allowed) While all this is powerful enough for most purposes, sometimes, there are custom transformations that you will need for your data, and those transformations will not be a part of the Sklearn API. In that case you can actually use the base classes of sklearn to defined your own transformer which can easily become a part of the pipeline that you define. More information here .
