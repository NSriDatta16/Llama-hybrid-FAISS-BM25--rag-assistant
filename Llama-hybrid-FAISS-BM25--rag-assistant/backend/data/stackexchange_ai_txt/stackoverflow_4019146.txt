[site]: stackoverflow
[post_id]: 4019146
[parent_id]: 1570070
[tags]: 
With jQuery (or YUI/ExtJS/...) you will be able to produce sweet looking applications, with effects similar/comparable to Flex. However, IMHO, with jQuery-UI I've found it flickers when components change state. This is not just a cross-browser issue; it happens on FF sometimes and doesn't other time. (likely to get some memory issues), and your choice is 1. wait for the community to release the fix and/or 2. do it yourself Flex components on the other hand are tested for this and have better support (though Adobe can be arrogant to deal with). HTML/JS/CSS apps do not always give a pleasurable and consistent effect (depending on how many tabs your running, how much avail. mem. for your browser session). With JS,HTML,CSS your development will be easier, while Flex you need good people with architectural sense (read as expensive); otherwise you can mess up your application really bad. JS, CSS and HTML (even 5) will always have cross-browser issues that may never get abstracted away fully. With Flex, if your backend is Java or CF, you can get remote objects (AMF binary) which makes data transfer typed, native and faster. (Even php-amf, sabre-amf or WebOrb can be used for this depending on your backend.) With JS, you are left with json or XML. You can optimize deployment with Runtime Shared Libs. and employ many strategies like modular development, lazy loading, perceived and actual performance gains, etc. Harder to do with JS/HTML/CSS, where general temptation is to create widget placeholders at design-time. JS apps are harder to maintain when a new person comes along, there are no good debugging tools (IMHO, Aptana is so-so). In the end, I agree with someone here who said that hybrid solution maybe on order. Develop an application in widgets; You can employ some cool drag-drop support with Flex widgets (same with JS but easier with Flex). Your flex widgets will be decoupled and thus will require incremental compilations in case of changes, and different teams can work with different items if you APIs well designed for each other. You can communicate with HTML wrapper using external-interface and send data back and forth. Best of Luck!
