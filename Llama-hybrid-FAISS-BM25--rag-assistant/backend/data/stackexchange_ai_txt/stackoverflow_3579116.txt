[site]: stackoverflow
[post_id]: 3579116
[parent_id]: 3577626
[tags]: 
As others have pointed out, that statement is indeed a rule of thumb. It is, however, a fairly strong rule because it provides us with more than one benefit: It applies the SRP to the constructor; in other words, it keeps the constructor as clean as possible because it does only one thing. It makes unit testing easier because creating the SUT doesn't involve complex Fixture Setup . It makes design issues more apparent . This third benefit is, in my opinion, in play here. As given, this constructor screams of an SRP violation. What is the responsibility of the FallingPiece class? Right now it seems to be both creating new pieces and representing a falling piece. Why isn't FallingPiece an implementation of IPiece? All in all, IPiece sounds to me like it should be a state machine. At first it's moving and can be manipulated, but when it hits bottom it becomes locked to the other pieces until it can be removed. It would probably make sense for it to raise events as it changes state. From an object-oriented perspective I think it sounds like the game board should have a collection of IPiece instances that knows where they are and what they can do. In summary, I think the rule about not doing work in the constructor stands, as it draws our attention to design issues.
