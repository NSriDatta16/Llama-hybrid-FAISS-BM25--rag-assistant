[site]: stackoverflow
[post_id]: 2350780
[parent_id]: 2350703
[tags]: 
In C# 3, you can also use LINQ to do this kind of collection processing. Classes for working with regular expressions implement only non-generic IEnumerable , so you need to specify a couple of types, but it's still quite elegant. The following code gives you a collection of dictionaries that contain the group name as the key and the matched value as a value. It uses Marc's suggestion to use ToDictionary , except that it specifies group name as the key (I think that Marc's code uses matched value as the key and group name as the value). Regex regex = new Regex(pattern); var q = from Match mci in regex.Matches(haystack) select regex.GetGroupNames().ToDictionary( name => name, name => mci.Groups[name].Value); Then you could just assign the result to your this.matches .
