[site]: stackoverflow
[post_id]: 4213239
[parent_id]: 
[tags]: 
Inject methods into existing classes

I want to come out a way to define a new method in some existing class in scala. For example, I think the asInstanceOf[T] method has too long a name, I want to replace it with as[T]. A straight forward approach can be: class WrappedAny(val a: Any) { def as[T] = a.asInstanceOf[T] } implicit def wrappingAny(a: Any): WrappedAny = new WrappedAny(a) Is there a more natural way with less code? Also, a strange thing happens when I try this: scala> class A defined class A scala> implicit def toA(x: Any): A = x toA: (x: Any)A scala> toA(1) And the console hang. It seems that toA(Any) should not pass the type checking phase, and it can't when it's not implicit. And putting all the code into a external source code can produce the same problem. How did this happen? Is it a bug of the compiler(version 2.8.0)?
