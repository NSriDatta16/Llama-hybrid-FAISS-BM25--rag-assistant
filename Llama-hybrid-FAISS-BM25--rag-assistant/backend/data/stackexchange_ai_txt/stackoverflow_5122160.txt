[site]: stackoverflow
[post_id]: 5122160
[parent_id]: 5119687
[tags]: 
Here is an example along the lines of the data you have, as loaded into R, aggregated etc... First, some dummy data to write out to a file: stime Then we can time reading in the 2-million rows. To speed this up, we tell R the classes of the columns in the file: "POSIXct" is one way in R to store the sort of timestamps you have. ## read it in: system.time({ tsdat which, takes about 13 seconds to read in and format in internal unix times on my modest laptop. user system elapsed 13.698 5.827 19.643 Aggregation can be done in lots of ways, one is using aggregate() . Say aggregate to the hour mean/average: ## Generate some indexes that we'll use the aggregate over tsdat That (the line creating out ) takes ~16 seconds on my laptop, and gives the following output: > head(out) hours jday Timestamp DD1 DD2 DD3 DD4 1 00 001 2010-12-31 23:29:57 500.2125 491.4333 510.7181 500.4833 2 01 001 2011-01-01 00:29:57 516.0472 506.1264 519.0931 494.2847 3 02 001 2011-01-01 01:29:57 507.5653 499.4972 498.9653 509.1389 4 03 001 2011-01-01 02:29:57 520.4111 500.8708 514.1514 491.0236 5 04 001 2011-01-01 03:29:57 498.3222 500.9139 513.3194 502.6514 6 05 001 2011-01-01 04:29:57 515.5792 497.1194 510.2431 496.8056 Simple plotting can be achieved using the plot() function: plot(DD1 ~ Timestamp, data = out, type = "l") We can overlay more variables via, e.g.: ylim or via multiple panels: layout(1:2) plot(DD1 ~ Timestamp, data = out, type = "l", col = "blue") plot(DD2 ~ Timestamp, data = out, type = "l", col = "red") layout(1) This has all been done with base R functionality. Others have shown how add-on packages can make working with dates easier.
