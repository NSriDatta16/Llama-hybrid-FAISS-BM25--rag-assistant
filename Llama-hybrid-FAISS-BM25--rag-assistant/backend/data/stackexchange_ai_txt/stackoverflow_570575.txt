[site]: stackoverflow
[post_id]: 570575
[parent_id]: 569847
[tags]: 
The RegEx solution is definitely more elegant than what I've produced. However, using StringBuilder is generally a little faster and doesn't need the search term and the pre-/post-fixes to be regex-escaped. private static string Surround(string original, string head, string tail, string match, StringComparison comparisonType) { if (string.IsNullOrEmpty(original) || string.IsNullOrEmpty(match) || (string.IsNullOrEmpty(head) && string.IsNullOrEmpty(tail))) return original; var resultBuilder = new StringBuilder(); int matchLength = match.Length; int lastIdx = 0; for (;;) { int curIdx = original.IndexOf(match, lastIdx, comparisonType); if (curIdx > -1) resultBuilder .Append(original, lastIdx, curIdx - lastIdx) .Append(head) .Append(original, curIdx, matchLength) .Append(tail); else return resultBuilder.Append(original.Substring(lastIdx)).ToString(); lastIdx = curIdx + matchLength; } } I hope you can use it. Update Doing a little perf test it seems that my solution is only faster if you are searching for "short" words. If the word is long (ie. length > 7) Regex wins, but if the word is short (ie. length
