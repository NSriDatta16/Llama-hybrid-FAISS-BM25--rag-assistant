[site]: stackoverflow
[post_id]: 968524
[parent_id]: 
[tags]: 
Virtual Calls using address of pure virtual member. Is it legal?

I read sometime back (probably on c.l.c++.moderated) that virtual function calls can be templatized. I tried something on the following lines. #include template void callVirtual(T& t, FUN f){ (*t.*f)(); } struct Base{ virtual ~Base(){} virtual void sayHi()=0; }; struct Derived : public Base{ void sayHi(){ std::cout The templatized method though given the address of pure virtual base member method at compile time calls the correct method at runtime. Is it legal in standard C++ to take address of a pure virtual member? Thanks in advance EDIT-1: I removed the second part of the question 'how does it work?'. Looks like that is what is catching attention. EDIT-2: I searched c.l.c++.moderated and came across this link ( http://groups.google.com/group/comp.lang.c++.moderated/browse_thread/thread/5ddde8cf1ae59a0d ). The consensus seems like since the standard does not restrict it, it is vaild. EDIT-3: After reading the codeproject article (thanks to ovanes), i am thinking that the compilers do some magic. Since virtual functions are implemented via vtable (which is compiler specific), taking address of a virtual function always gives the offset in the vtable. Depending on the 'this' pointer used, the appropriate function (whose address is at the offset) is called. I am not sure how to vindicate this though as the standard does not say anything abt it!
