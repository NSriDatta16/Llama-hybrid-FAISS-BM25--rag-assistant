[site]: crossvalidated
[post_id]: 212427
[parent_id]: 28006
[tags]: 
I recently posted the T-SQL code below for a Kolmogorov-Smirnov Test implementation on my blog . To test it against distributions other than the normal, you'd have to replace the NormalDistributionSingleCDFFunction.sql function it references with a different CDF. The parameters allow you to run it on any column in any SQL Server database you have access to. Keep in mind that I'm an amateur at this and have only tested it on a couple small datasets, so there may be undiscovered issues with the code; it's more of an example of how it could be coded than a finished, thoroughly tested solution. One of the advantages, however, is that it can handle tens of millions of records effortlessly even on a desktop computer. There are some unsung benefits to using SQL for certain data mining/machine learning/statistical tasks...The code would have to be tinkered with to work on Oracle, MySQL or another database server platform besides SQL Server, but the principles behind it would basically be the same. If you don't have SQL Server, be aware that there are free editions that I believe can host up to 10 GB; I'm fairly certain that its competitors have free versions in the same size range. For an in-depth discussion of how the code works, including performance tests and possible "gotchas," see my blog post. I hope that helps... CREATE PROCEDURE [Calculations].[GoodnessOfFitKolomgorovSmirnovAndKuipersTestsSP] @Database1 as nvarchar(128) = NULL, @Schema1 as nvarchar(128), @Table1 as nvarchar(128),@Column1 AS nvarchar(128), @OrderByCode as tinyint AS DECLARE @SchemaAndTable1 nvarchar(400),@SQLString nvarchar(max) SET @SchemaAndTable1 = @Database1 + ‘.’ + @Schema1 + ‘.’ + @Table1 DECLARE @Mean float, @StDev float, @Count float DECLARE @EDFTable table (ID bigint IDENTITY (1,1), Value float, ValueCount bigint, EDFValue float, CDFValue decimal(38,37), EDFCDFDifference decimal(38,37)) DECLARE @ExecSQLString nvarchar(max), @MeanOUT nvarchar(200),@StDevOUT nvarchar(200),@CountOUT nvarchar(200), @ParameterDefinition nvarchar(max) SET @ParameterDefinition = ‘@MeanOUT nvarchar(200) OUTPUT,@StDevOUT nvarchar(200) OUTPUT,@CountOUT nvarchar(200) OUTPUT ‘ SET @ExecSQLString = ‘SELECT @MeanOUT = Avg(‘ + @Column1 + ‘),@StDevOUT = StDev(‘ + @Column1 + ‘),@CountOUT = Count(‘ + @Column1 + ‘) FROM ‘ + @SchemaAndTable1 + ‘ WHERE ‘ + @Column1 + ‘ IS NOT NULL’ EXEC sp_executesql @ExecSQLString,@ParameterDefinition, @MeanOUT = @Mean OUTPUT,@StDevOUT = @StDev OUTPUT,@CountOUT = @Count OUTPUT SET @SQLString = ‘SELECT Value, ValueCount, SUM(ValueCount) OVER (ORDER BY Value ASC) / CAST(‘ + CAST(@Count as nvarchar(50)) + ‘AS float) AS EDFValue FROM (SELECT DISTINCT ‘ + @Column1 + ‘ AS Value, Count(‘ + @Column1 + ‘) OVER (PARTITION BY ‘ + @Column1 + ‘ ORDER BY ‘ + @Column1 + ‘) AS ValueCount FROM ‘ + @SchemaAndTable1 + ‘ WHERE ‘ + @Column1 + ‘ IS NOT NULL) AS T1‘ INSERT INTO @EDFTable (Value, ValueCount, EDFValue) EXEC (@SQLString) UPDATE T1 SET CDFValue = T3.CDFValue, EDFCDFDifference = EDFValue – T3.CDFValue FROM @EDFTable AS T1 INNER JOIN (SELECT DistinctValue, Calculations.NormalDistributionSingleCDFFunction (DistinctValue, @Mean, @StDev) AS CDFValue FROM (SELECT DISTINCT Value AS DistinctValue FROM @EDFTable) AS T2) AS T3 ON T1.Value = T3.DistinctValue SELECT KolomgorovSmirnovSupremum AS KolomgorovSmirnovTest, KolomgorovSmirnovSupremum – KolomgorovSmirnovMinimum AS KuipersTest FROM (SELECT Max(ABS(EDFValue – CDFValue)) AS KolomgorovSmirnovSupremum, — the supremum i.e. max Min(ABS(EDFValue – CDFValue)) AS KolomgorovSmirnovMinimum FROM @EDFTable WHERE EDFCDFDifference > 0) AS T3 SELECT ID, Value, ValueCount, EDFValue, CDFValue, EDFCDFDifference FROM @EDFTable ORDER BY CASE WHEN @OrderByCode = 1 THEN ID END ASC, CASE WHEN @OrderByCode = 2 THEN ID END DESC, CASE WHEN @OrderByCode = 3 THEN Value END ASC, CASE WHEN @OrderByCode = 4 THEN Value END DESC, CASE WHEN @OrderByCode = 5 THEN ValueCount END ASC, CASE WHEN @OrderByCode = 6 THEN ValueCount END DESC, CASE WHEN @OrderByCode = 7 THEN EDFValue END ASC, CASE WHEN @OrderByCode = 8 THEN EDFValue END DESC, CASE WHEN @OrderByCode = 9 THEN CDFValue END ASC, CASE WHEN @OrderByCode = 10 THEN CDFValue END DESC, CASE WHEN @OrderByCode = 11 THEN EDFCDFDifference END ASC, CASE WHEN @OrderByCode = 12 THEN EDFCDFDifference END DESC
