[site]: stackoverflow
[post_id]: 81602
[parent_id]: 41590
[tags]: 
Vincent Robert is right in his comment How do you properly use namespaces in C++? . Using namespace Namespaces are used at the very least to help avoid name collision. In Java, this is enforced through the "org.domain" idiom (because it is supposed one won't use anything else than his/her own domain name). In C++, you could give a namespace to all the code in your module. For example, for a module MyModule.dll, you could give its code the namespace MyModule. I've see elsewhere someone using MyCompany::MyProject::MyModule. I guess this is overkill, but all in all, it seems correct to me. Using "using" Using should be used with great care because it effectively import one (or all) symbols from a namespace into your current namespace. This is evil to do it in a header file because your header will pollute every source including it (it reminds me of macros...), and even in a source file, bad style outside a function scope because it will import at global scope the symbols from the namespace. The most secure way to use "using" is to import select symbols: void doSomething() { using std::string ; // string is now "imported", at least, // until the end of the function string a("Hello World!") ; std::cout You'll see a lot of "using namespace std ;" in tutorial or example codes. The reason is to reduce the number of symbols to make the reading easier, not because it is a good idea. "using namespace std ;" is discouraged by Scott Meyers (I don't remember exactly which book, but I can find it if necessary). Namespace Composition Namespaces are more than packages. Another example can be found in Bjarne Stroustrup's "The C++ Programming Language". In the "Special Edition", at 8.2.8 Namespace Composition , he describes how you can merge two namespaces AAA and BBB into another one called CCC. Thus CCC becomes an alias for both AAA and BBB: namespace AAA { void doSomething() ; } namespace BBB { void doSomethingElse() ; } namespace CCC { using namespace AAA ; using namespace BBB ; } void doSomethingAgain() { CCC::doSomething() ; CCC::doSomethingElse() ; } You could even import select symbols from different namespaces, to build your own custom namespace interface. I have yet to find a practical use of this, but in theory, it is cool.
