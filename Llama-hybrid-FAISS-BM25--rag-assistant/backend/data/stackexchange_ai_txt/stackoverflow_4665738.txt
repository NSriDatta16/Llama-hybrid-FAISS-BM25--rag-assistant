[site]: stackoverflow
[post_id]: 4665738
[parent_id]: 4665683
[tags]: 
If you are going to be often searching on the value of a particular attribute, why not make those attributes their own columns in the table? Or if you want a more flexible structure, make a second table like: CREATE TABLE attributes ( my_id int unsigned not null default 0, attribute_key varchar(255) not null default '', attribute_value varchar(255) not null default '', KEY (my_id), KEY (attribute_key), KEY (attribute_value) ); In this case, the my_id field is the primary key of your main table. So rather than serializing a string like: __Type="2",__Material="7",Color="2",Content="MP3 Player,2 Apples, 1 book: Larry King" You would instead create some rows like: INSERT INTO attributes VALUES (1, 'Type', '2'); INSERT INTO attributes VALUES (1, 'Color', '2'); INSERT INTO attributes VALUES (1, 'Content', 'MP3 Player,2 Apples, 1 book: Larry King'); And then you would formulate your search query like: SELECT * FROM mytable LEFT JOIN attributes ON mytable.my_id = attributes.my_id WHERE attributes.attribute_key = 'Type' AND attributes.attribute_value = '2'; This does not precisely solve the second problem of your question, but it will perform far, far better than doing a full text search across thousands of rows. You can of course then add a FULLTEXT index on the attribute_value field as well to query it for text fragments like your "Larry King" example.
