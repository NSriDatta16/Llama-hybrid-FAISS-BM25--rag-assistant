[site]: stackoverflow
[post_id]: 2716842
[parent_id]: 2714224
[tags]: 
Found workaround here: http://connect.microsoft.com/SQLServer/feedback/details/532406/performance-issue-with-hierarchyid-fun-isdescendantof-in-where-clause# Just reminding that I started with a heirarchyID passed in from the application and my goal is to retrieve any and all relatives of that value (both Ancestors and Descendants). In my specific example, I had to add the following declarations before the SELECT statement: declare @topNode hierarchyid = (select @messageID.GetAncestor((@messageID.GetLevel()-1))) declare @topNodeParent hierarchyid = (select @topNode.GetAncestor(1)) declare @leftNode hierarchyid= (select @topNodeParent.GetDescendant (null, @topNode)) declare @rightNode hierarchyid= (select @topNodeParent.GetDescendant (@topNode, null)) The WHERE clause has been changed to: messageid.IsDescendantOf(@topNode)=1 AND (messageid > @leftNode ) AND (messageid The querying performance increase is very significant: For every result passed in, seek time is now 20ms on average (was from 120 to 420). When querying 25 values, it previously took 25 - 35 seconds to return all related nodes (in some cases each value had many relatives, in some there were none). It now takes only 2 seconds. Thank you very much to all who have contributed to this issue on this site and on others.
