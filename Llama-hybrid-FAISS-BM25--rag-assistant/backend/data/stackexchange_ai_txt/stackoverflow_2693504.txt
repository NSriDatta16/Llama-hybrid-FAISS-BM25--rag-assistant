[site]: stackoverflow
[post_id]: 2693504
[parent_id]: 2693427
[tags]: 
The only way I can think of would be to make an ObjectDataProvider and two separate CollectionViewSource objects in XAML. One view would have the filter applied, the other would not. Then you could bind directly to the CheckBox.IsChecked property and use a custom IValueConverter . The value converter would have 2 dependency properties- both of type CollectionViewSource. These properties might be called, " UnfilteredItems " and " FilteredItems ." In XAML, you would set the unfiltered items property to the CollectionViewSource that was unfiltered, and the filtered items property to the one with the filter. The converter logic itself would be simple- if true, return the filtered CollectionViewSource , if false, return the unfiltered one. This solution is not extremely elegant, but it would get the job done. Because Filter is not a DependencyProperty and can only be specified by an event-handler, our hands are kind of tied on this one. I don't think your solution is a bad one, though.
