[site]: stackoverflow
[post_id]: 1256114
[parent_id]: 1256086
[tags]: 
You can simply have both dropdown lists exist in your asp code with only one visible on first page load. So something like... And then when, say the "More Elements" item selected, switch the dynamicDDL's visibility to true. Then on each postback, on the Page_Load event, check what the value of mainDDL is. If it is 0, set dynamicDDL to have visible=true Edit: Okay, I took a stab at this. There is some headway in this, however, and maybe it will lead us to some clues. To start off, we DO need an array to store this. We will need a static array of DDLs and a static integer to count our elements. These can be defined as... Private Shared ddl_arr As DropDownList() = New DropDownList(100) {} 'max, 100 ddls. Private Shared ddl_count As Integer = 0 Now, we'll need a panel to store our DDLs in. This is simple asp scripting, such as... So now, on our page load we will want to load any of our dropdowns that we have saved so far. This can be coded in a way such as.. Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load Try If TypeOf ddl_arr(0) Is DropDownList Then For Each ddl As DropDownList In ddl_arr add_ddl(ddl) Next End If Catch ex As Exception ' this is a bad idea, but for brevity.. End Try End Sub Our add_ddl method will simply add our new drop down to the parentPanel. Protected Sub add_ddl(ByVal ddl As DropDownList) Try parentPanel.Controls.Add(ddl) 'add any formatting you would like after each ddl here. Catch ex As Exception End Try End Sub And finally, our method when we change the ddl. This creates a brand new ddl, gives it an id (and whatever properties you may want for it), adds it to the array, increments our counter, and adds it to the page.. Protected Sub mainDDL_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles mainDDL.SelectedIndexChanged Dim newDDL As DropDownList = New DropDownList() newDDL.ID = "ddlID" & ddl_count 'we will need to store a new ID for each one. So, dynamically generate this. 'continue to add properties to your ddl in this fashion... ddl_arr(ddl_count) = newDDL ddl_count = ddl_count + 1 add_ddl(newDDL) End Sub This method should definitely check for the end of the array (among other things), but lets keep things simple. This code will only add a new DDL whenever you change the index of the ORIGINAL DDL. You will need to set each newly created DDL to have a method called (performing the above instructions) whenever the selected index changes for all of those newly crafted DDLs. Hopefully this gets you in the right direction. This was way less organized than I'd hoped, sorry!
