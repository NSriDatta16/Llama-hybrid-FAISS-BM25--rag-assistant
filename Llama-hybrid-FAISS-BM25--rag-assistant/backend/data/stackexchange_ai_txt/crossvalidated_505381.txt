[site]: crossvalidated
[post_id]: 505381
[parent_id]: 505314
[tags]: 
As mentioned in the comment, the first n days in normalized days are disturbing to me, so I'd like to stay with discrete days. The data then becomes: data $day, data$ y) Judging from your code you want to fit Bayesian linear regression to those data. I choose a simple to perform way for that with sensible priors set automatically from the rstanarm package: library(rstanarm) model That will draw 4000 linear regression lines from the posterior distribution, the intercepts and slopes of which you find in posterior . This will plot the data and a sample of 50 of those regression lines: plot(data $day, data$ y, pch = 16) for(i in 1:50){ abline(posterior[i, 1], posterior[i, 2], col = alpha("black",.2)) } Or for all 4000 like this: plot(data $day, data$ y, xlim = c(1,10), ylim = c(-1.7, 1.7)) for(i in 1:4000){ abline(posterior[i, 1], posterior[i, 2], col = alpha("black",.01)) } points(data $day, data$ y, pch = 16, col = "red") Now, we can easily see how a linear regression is not the best way to predict data for the future and how all these regression lines will predict values that are to large, but model choice is not the topic of this question so we go on. (Probably this is because I did not use log-transformed days -- check that with the real data). We can take each of these 4000 lines or a random sample of them in order to predict the sum(y) over the next n days, like for the days 8:12 : interval = 8:12 sums So for each regression line in the posterior we computed the predicted values and get a distribution of these values.
