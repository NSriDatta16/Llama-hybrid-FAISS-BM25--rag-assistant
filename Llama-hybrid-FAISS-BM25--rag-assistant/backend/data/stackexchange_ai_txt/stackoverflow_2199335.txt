[site]: stackoverflow
[post_id]: 2199335
[parent_id]: 2197966
[tags]: 
It's natural to encapsulate "Spells" with the Command Pattern (which is basically what you've done). But you run into two problems:- 1) You've got to recompile to add more spells You can enumerate every possible action it is possible for a spell to take, then define the spells in some external format (XML, Database) which gets loaded into your application on startup. Western RPGs tend to be coded like this - a "spell" consists of "Apply spell effect #1234 with parameter 1000", "play animation #2345", etc. You can expose your gamestate to a scripting language, and script your spells (you can also combine this with the first idea so that in most cases your scripted spells are just calling pre-defined effects in code). Duel of the Planeswalkers (the M:TG game on X-Box 360) was written broadly with this approach Or you can just live with it (I do...) 2) What happens when your spell target isn't a creature? If you're exposing your gamestate to your spell scripts, this isn't a problem because your scripts can do anything they like within the context of what you're exposing. Otherwise, you'd be best making a generic type. I generally do something like the following (and not just in games either, I've been using this kind of pattern to represent behaviours in mutli-agent-systems):- public interface IEffect { public void Apply(TContext context); } public class SingleTargetContext { public Creature Target { get; set; } } public class AoEContext { public Point Target { get; set; } } // etc. The advantage of this pattern is that it's really flexible for doing those "odd" things that you'd often expect spells to be able to do that more fixed models won't be capable of. You can do things like chain them together. You can have an Effect which adds a TriggeredEffect to your target - good for doing something like a Thorns Aura. You can have an IReversibleEffect (with an extra Unapply method) good for representing buffs. That article on Duel of the Planeswalkers is really excellent reading though. So good I'll link it twice!
