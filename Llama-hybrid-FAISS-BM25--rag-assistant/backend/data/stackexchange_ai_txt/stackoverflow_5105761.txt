[site]: stackoverflow
[post_id]: 5105761
[parent_id]: 5105696
[tags]: 
It depends on what you have to do with the variable. null may or may not be a perfectly acceptable value, depending on the context (but I have to admit I have never fonud a good use for null in javascript). Probably the safest thing is to rely on exceptions to catch problems when something go wrong, instead of trying to anticipate errors by checking for existence of variables. On the other hand, if you compare something to null or undefined it is a good idea to use the === operator, which does not need type coercion. The simpler check if(variable) will check that variable is not falsy (that is, it is not null , undefined , false , 0 , NaN , -0 or the empty string). Finally the method hasOwnProperty is often useful when you want to loop over the properties of an object and exclude properties that are inherited from the prototype. EDIT Pay attention that the above refers to undefined variables, that is, variables which are declared like var variable; but are not assigned any value, or missing parameters in functions. One may also want to consider the case of dealing with variables which are undeclared at all. In this case all tests like if(variable); if(variable === null); and so on will fail, reporting an error. The only safe way I know to deal with this case is to check the type of the variable. That is, the typeof operator can gently handle variables which do not exist. if(typeof variable === 'undefined') will be true if either variable was declared but is undefined, or variable was not declared at all. In no case this last check will trigger an error.
