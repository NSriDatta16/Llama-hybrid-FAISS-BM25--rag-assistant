[site]: stackoverflow
[post_id]: 1071557
[parent_id]: 1071525
[tags]: 
This is how I would do it. I would create a foreign key relationship (and index if appropriate) between the two tables. I would create a new Linq to Sql Classes object in my project, which creates a DBML file. I'd open the DBML file to get the designer surface for my new data context and drag both tables from the Server Explorer -- after creating the connection to the DB, of course. This would create the entities matching the two tables in my data context and the association between them. This would give me an EntityRef in the Election entity corresponding to the Election_Status -- or an EntitySet depending whether it is a 1-1 or 1-Many relation. I'd use the association instead of doing a join to get the data for each election. using (var context = new ormDataContext(connStr)) { foreach (var election in context.Elections) { Console.WriteLine( "{0}: {1}", election.Name, election.Election_Status.Status ); } } If I wanted to filter by a particular status, I could do that as well. using (var context = new ormDataContext(connStr)) { var query = context.Elections .Where( e => e.Election_Status.Status == someStatus ); foreach (var election in query) { Console.WriteLine( "{0}: {1}", election.Name, election.Election_Status.Status ); } }
