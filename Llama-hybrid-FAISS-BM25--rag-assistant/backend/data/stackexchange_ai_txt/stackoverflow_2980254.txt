[site]: stackoverflow
[post_id]: 2980254
[parent_id]: 2980182
[tags]: 
When you decode the bytes into a string, and re-encodes them back into bytes, you're losing information. ASCII in particular is a very bad choice for this since ASCII will throw out a lot of information on the way, but you risk losing information when encoding and decoding regardless of the type of Encoding you pick, so you're not on the right path. What you need is one of the BaseXX routines, that encodes binary data to printable characters, typically for storage or transmission over a medium that only allows text (email and usenet comes to mind.) Ascii85 is one such algorithm, and the page contains links to different implementations. It has a ratio of 4:5 meaning that 4 bytes will be encoded as 5 characters (a 25% increase in size.) If nothing else, there's already a Base64 encoding routine built into .NET. It has a ratio of 3:4 (a 33% increase in size), here: Convert.ToBase64String Method Convert.FromBase64String Method Here's what your code can look like with these methods: string myString; using (FileStream fs = new FileStream("C:\\tvin.exe", FileMode.Open)) using (BinaryReader br = new BinaryReader(fs)) { byte[] bin = br.ReadBytes(Convert.ToInt32(fs.Length)); myString = Convert.ToBase64String(bin); } byte[] rebin = Convert.FromBase64String(myString); using (FileStream fs2 = new FileStream("C:\\tvout.exe", FileMode.Create)) using (BinaryWriter bw = new BinaryWriter(fs2)) bw.Write(rebin);
