[site]: stackoverflow
[post_id]: 3979284
[parent_id]: 3978625
[tags]: 
Some standard language: 6.5 Expressions 1 An expression is a sequence of operators and operands that specifies computation of a value, or that designates an object or a function, or that generates side effects, or that performs a combination thereof. 2 Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression. 72) Furthermore, the prior value shall be read only to determine the value to be stored. 73) 3 The grouping of operators and operands is indicated by the syntax. 74) Except as specified later (for the function-call () , && , || , ?: , and comma operators), the order of evaluation of subexpressions and the order in which side effects take place are both unspecified. Paragraph 2 explicitly renders expressions of the form a[i++] = i undefined; the prior value of i isn't just being read to determine the result of i++ . Thus, any result is allowed. Beyond that, you cannot rely on the side effect of the ++ operator to be applied immediately after the expression is evaluated. For an expression like a[i++] = j++ * ++k the only guarantee is that the result of the expression j++ * ++k is assigned to the result of the expression a[i++] ; however, each of the subexpressions a[i++] , j++ , and ++k may be evaluated in any order, and the side effects (assigning to a[i] , updating i , updating j , and updating k ) may be applied in any order.
