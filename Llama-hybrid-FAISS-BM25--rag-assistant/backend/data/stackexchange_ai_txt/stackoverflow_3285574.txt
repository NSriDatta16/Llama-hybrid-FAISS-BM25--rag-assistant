[site]: stackoverflow
[post_id]: 3285574
[parent_id]: 3285562
[tags]: 
No it won't work! Try 121 = 11 * 11 for example which obviously isn't a prime. For any number given to your function, that is a product of the prime numbers X1, X2, ..., Xn (where n >= 2 ) with all of them being greater or equal to 11, your function will return true. (And also, as already said, 9 isn't a prime). From wikipedia you can see that: In mathematics, a prime number (or a prime) is a natural number that has exactly two distinct natural number divisors: 1 and itself. so a very simple and naive algorithm on checking whether a number is prime could be: public bool CalcIsPrime(int number) { if (number == 1) return false; if (number == 2) return true; if (number % 2 == 0) return false; // Even number for (int i = 2; i For better algorithms check here: Primality Test If you want to check your code, do inlcude a test , here's a test case written in xunit . [Theory] [MemberData(nameof(PrimeNumberTestData))] public void CalcIsPrimeTest(int number, bool expected) { Assert.Equal(expected, CalcIsPrime(number)); } public static IEnumerable PrimeNumberTestData() { yield return new object[] { 0, false }; yield return new object[] { 1, false }; yield return new object[] { 2, true }; yield return new object[] { 3, true }; yield return new object[] { 4, false }; yield return new object[] { 5, true }; yield return new object[] { 6, false }; yield return new object[] { 7, true }; yield return new object[] { 8, false }; yield return new object[] { 9, false }; yield return new object[] { 10, false }; yield return new object[] { 11, true }; yield return new object[] { 23, true }; yield return new object[] { 31, true }; yield return new object[] { 571, true }; yield return new object[] { 853, true }; yield return new object[] { 854, false }; yield return new object[] { 997, true }; yield return new object[] { 999, false }; }
