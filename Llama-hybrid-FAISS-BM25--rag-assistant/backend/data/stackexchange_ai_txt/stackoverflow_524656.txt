[site]: stackoverflow
[post_id]: 524656
[parent_id]: 522919
[tags]: 
I think that sometimes the ternary are a necessary evil in initializer lists for constructors. I use them mostly for constructors where I want to allocate memory and set some pointer to point at it before the body of the constructor. An example, suppose you had an integer storage class that you wanted to have take a vector as an input but the internal representation is an array: class foo { public: foo(std::vector input); private: int* array; unsigned int size; }; foo:foo(std::vector input):size(input.size()), array( (input.size()==0)? NULL : new int[input.size]) { //code to copy elements and do other start up goes here } This is how I use the ternary operator. I don't think it is as confusing as some people do but I do think that one should limit how much they use it.
