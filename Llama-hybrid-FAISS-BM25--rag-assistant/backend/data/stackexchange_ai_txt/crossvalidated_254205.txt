[site]: crossvalidated
[post_id]: 254205
[parent_id]: 254124
[tags]: 
It isn't correct that logistic regression in itself becomes unstable when there are separation. Separation means that there are some variables which are very good predictors, which is good, or, separation may be an artifact of too few observations/too many variables. If that is the case, the solution might be to get more data. But separation itself, then, is only a symptom, and not a problem in itself. So there are really different cases to be treated. First, what is the goal of the analysis? If the final result of the analysis is some classification of cases, separation is no problem at all, it really means that there are very good variables giving very good classification. But if the goal is risk estimation, we need the parameter estimates, and with separation the usual mle (maximum likelihood) estimates do not exist. So we must change estimation method, maybe. There are several proposals in the literature, I will come back to that. Then there are (as said above) two different possible causes for separation. There might be separation in the full population, or separation might be caused by to few observed cases/too many variables. What breaks down with separation, is the maximum likelihood estimation procedure. The mle parameter estimates (or at least some of them) becomes infinite. I said in the first version of this answer that that can be solved easily, maybe with bootstrapping, but that does not work, since there will be separation in each bootstrap resample, at least with the usual cases bootstrapping procedure. But logistic regression is still a valid model, but we need some other estimation procedure. Some proposals have been: regularization, like ridge or lasso, maybe combined with bootstrap. exact conditional logistic regression permutation tests, see https://www.ncbi.nlm.nih.gov/pubmed/15515134 Firths bias-reduced estimation procedure, see Logistic regression model does not converge surely others ... If you use R, there is a package on CRAN, SafeBinaryRegression , which help with diagnosing problems with separation, using mathematical optimization methods to check for sure if there is separation or quasiseparation! In the following I will be giving a simulated example using this package, and the elrm package for approximate conditional logistic regression. First, a simple example with the safeBinaryRegression package. This package just redefines the glm function, overloading it with a test of separation, using linear programming methods. If it detects separation, it exits with an error condition, declaring that the mle does not exist. Otherwise it just runs the ordinary glm function from stats . The example is from its help pages: library(safeBinaryRegression) # Some testing of that # package, # based on its examples # complete separation: x The output from running it: > # complete separation: > x y glm(y ~ x, family=binomial) Error in glm(y ~ x, family = binomial) : The following terms are causing separation among the sample points: (Intercept), x > glm(y ~ x, family=binomial, separation="test") Error in glm(y ~ x, family = binomial, separation = "test") : Separation exists among the sample points. This model cannot be fit by maximum likelihood. > stats::glm(y ~ x, family=binomial) Call: stats::glm(formula = y ~ x, family = binomial) Coefficients: (Intercept) x -9.031e-08 2.314e+01 Degrees of Freedom: 3 Total (i.e. Null); 2 Residual Null Deviance: 5.545 Residual Deviance: 3.567e-10 AIC: 4 Warning message: glm.fit: fitted probabilities numerically 0 or 1 occurred > # Quasicomplete separation: > x y glm(y ~ x, family=binomial) Error in glm(y ~ x, family = binomial) : The following terms are causing separation among the sample points: x > glm(y ~ x, family=binomial, separation="test") Error in glm(y ~ x, family = binomial, separation = "test") : Separation exists among the sample points. This model cannot be fit by maximum likelihood. > stats::glm(y ~ x, family=binomial) Call: stats::glm(formula = y ~ x, family = binomial) Coefficients: (Intercept) x 5.009e-17 9.783e+00 Degrees of Freedom: 3 Total (i.e. Null); 2 Residual Null Deviance: 5.545 Residual Deviance: 2.773 AIC: 6.773 Now we simulate from a model which can be closely approximated by a logistic model, except that above a certain cutoff the event probability is exactly 1.0. Think about a bioassay problem, but above the cutoff the poison always kills: pl When running this code, we estimate the probability of separation as 0.759. Run the code yourself, it is fast! Then we extend this code to try different estimations procedures, mle and approximate conditional logistic regression from elrm. Running this simulation take around 40 minutes on my computer. library(elrm) # from CRAN set.seed(31415926) ### May I have a large container of # coffee replications Now we want to plot the results, but before that, note that ALL the conditional estimates are equal! That is really strange and should need an explanation ... The common value is 0.9523975. But at least we obtained finite estimates, with confidence intervals which contains the true value (not shown here). So I will only show a histogram of the mle estimates in the cases without separation: hist(cof.mle.non, prob=TRUE) [ What is remarkable is that all the estimates is lesser than the true value 1.5. That can have to do with the fact that we simulated from a modified model, needs investigation.
