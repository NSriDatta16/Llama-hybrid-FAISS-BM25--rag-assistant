[site]: stackoverflow
[post_id]: 4849021
[parent_id]: 4848965
[tags]: 
I'm not sure why adding an extra attribute is an efficiency problem - it won't affect the speed and it'll only increase the size of the object by 10 bytes or so. So unless you are dealing with millions of Agents (Missterrr Annnderssssonnn) I wouldn't worry about it. You could alternatively have a single Surface which is created in a module as a local and accessed via a module method (a bit cleaner than a global). So something like: import TheSurface class Agent: ... def Move(self,x,y): surface = TheSurface.getSurface() surface.canIMoveTo(x,y) .... TheSurface.py would have some kind of initialisation method that created the surface, which would need to be called at program start. @DesignPattern people: is this a 'singleton' pattern? Creating an Agent with a Surface and storing it as an attribute is a better way. I don't see why you'd add it to a Point though. The structure is something like: An Agent is on a Surface An Agent is at a Point Hence you can deduce that the Point is on the Surface, and there's no need to model that separately, unless perhaps you might be dealing with Points that aren't involved in some way to Agents, but then you will have the context of a Surface anyway. It'll always be "Right, now I have to put some Trees on this surface - createTree(surface,point)" etc. Anything on the surface has a surface and a point.
