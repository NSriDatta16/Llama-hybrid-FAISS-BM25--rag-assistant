[site]: stackoverflow
[post_id]: 2299858
[parent_id]: 2299764
[tags]: 
Building a large, complicated application of this sort, especially one with lots of interdependencies, state-specific conditions, and client-server divisions that may require the use of incompatible languages, is daunting no matter how you approach it. Based on my experience with other projects of this sort, you're destined to fail on your first try no matter how careful you are. The trick is to embrace failure as an inevitable step along the way to success and not fuss over every little thing as you build out the application. The first mission should be to get it "working" with as little programming as possible, to simply get the effect you're looking for, even if very roughly, so you can see how it all fits together. If you can break down the big problem into a series of smaller problems to solve, you may find success with one element and that can be motivating to tackle bigger or different problems. A useful strategy to employs is to keep the elements of the application loosely coupled, to avoid interdependency except where strictly required, so you can swap out or make improvements to portions of the whole without having a cascade of consequential changes. For instance, your networking code could be capable of transmitting state changes between client and server without caring about the nature of the states themselves, but your state management code would not have to care how the states are transmitted, only that they will be. It's also useful to have a handle on the overall architecture of the application so you don't get lost in the weeds. From a high-level perspective, you may want to be familiar with basic Design Patterns that can help you organize an otherwise impenetrable mess of code into something simple, modular, and easy to build out. On the subject of frameworks and languages, I'd say avoid switching so often. While it is educational to explore a new language to see what features may help with your particular problem, you will probably be more productive if you stick to one, even if it can be difficult to achieve some things, because you become more effective with it, improving your approach to better suit the language. While Haskell might be a better fit for some problems, even plain old PHP can be coached into doing the exactly same things with enough determination. There is a temptation to try new things, to broaden the scope of the work to have it "done right", to build in new functionality as it occurs to you, but to keep the project under control you'll have to maintain the discipline to avoid these expensive and distracting activities which are often, taken objectively, only flights of fancy or premature given the overall state of the project. To specifically answer your question, build it in the framework you're most familiar with, where your strengths are, and do it in smaller increments that produce useful results. Maybe that's the client display engine, or the networking component, or the back-end state transitions, but whatever it is, you should have it in a "good enough" state to start attaching other components to it. Solving ten little problems can be tedious and time-consuming, but it's a lot easier than solving one gigantic one.
