[site]: stackoverflow
[post_id]: 3142065
[parent_id]: 3140037
[tags]: 
Here are some observations I've made while working with OOP concepts in VBA: You cannot overload methods in VBA. However, you do have optional parameters at your disposable, for better or for worse. You have one parameterless Class_Initialize method that is called when the object is instantiated, but it cannot be overloaded to handle parameters. If you want to force your class to not be "fully functional" without having certain properties set, you'll have to write your own way to do so. The VB6 and VBA editing environment forces you to build "class files" and keep each class in a separate file, which are distinct from modules. Classes and Modules can both have public and private fields. A public field in a module is essentially a global variable. Modules are functionally similar to static classes in C#. Public code can be called from the modules anywhere within your application. The VB6/VBA paradigm envisions classes as a way to encapsulate an object's functionality and properties. In this sense, VB6/VBA's objects exist just like any other basic OOP environment and their use and design should be encouraged where appropriate. However, the lack of several key OOP features cause VB6/VBA to fall short in being able to thoroughly implement a complete OOP design pattern.
