[site]: stackoverflow
[post_id]: 4531811
[parent_id]: 
[tags]: 
Creating an AJAX Form for a Polymorphic Object in Rails

I am trying to create an AJAX form for a polymorphic associated model. I created "Comments" which have a polymorphic association with all objects you can comment on (i.e. user profiles, organization profiles, events, etc). I can currently add comments to objects using a form created by: form_for [@commentable, @comment] do |f| I am trying to make this form via Ajax but I keep getting errors. I've tried at least ten different pieces of code, using remote_form_tag, remote_form_for, etc..with all different options, and nothing works. The comment does not get inserted into the database. Specifically, I tried: comments_path(@profile)) do |f| -%> In my routes.rb, profile has many comments. And comments belongs to Profile. But when I submit the form nothing happens and the comment does not get posted to the database. Can anyone please tell me what I'm doing wrong? For your reference, here are my controllers. Comments controller: class CommentsController Comment: " + @comment.content + " " render :text => responsetext else responsetext = "error" render :text => responsetext end end def edit @comment = Comment.find(params[:id]) end def update @comment = Comment.find(params[:id]) if @comment.update_attributes(params[:comment]) flash[:notice] = "Successfully updated comment." redirect_to @comment else render :action => 'edit' end end def destroy @comment = Comment.find(params[:id]) @comment.destroy flash[:notice] = "Successfully destroyed comment." redirect_to comments_url end private def find_commentable params.each do |name, value| if name =~ /(.+)_id$/ return $1.classify.constantize.find(value) end end nil end end Profile controller: class ProfilesController @profile } end end # GET /profiles/1 # GET /profiles/1.xml def show @profile = Profile.find(params[:id]) @commentable = @profile @comment = Comment.new(:commentable => @profile) respond_to do |format| format.html # show.html.erb format.xml { render :xml => @profile } end end # GET /profiles/new # GET /profiles/new.xml def new @profile = Profile.new respond_to do |format| format.html # new.html.erb format.xml { render :xml => @profile } end end # GET /profiles/1/edit def edit #@profile = Profile.find(params[:id]) @profile = current_user.profile end # POST /profiles # POST /profiles.xml def create @profile = Profile.new(params[:profile]) respond_to do |format| if @profile.save flash[:notice] = 'Profile was successfully created.' format.html { redirect_to(@profile) } format.xml { render :xml => @profile, :status => :created, :location => @profile } else format.html { render :action => "new" } format.xml { render :xml => @profile.errors, :status => :unprocessable_entity } end end end # PUT /profiles/1 # PUT /profiles/1.xml def update @profile = Profile.find(params[:id]) respond_to do |format| if @profile.update_attributes(params[:profile]) flash[:notice] = 'Profile was successfully updated.' format.html { redirect_to(@profile) } format.xml { head :ok } else format.html { render :action => "edit" } format.xml { render :xml => @profile.errors, :status => :unprocessable_entity } end end end # DELETE /profiles/1 # DELETE /profiles/1.xml def destroy @profile = Profile.find(params[:id]) @profile.destroy respond_to do |format| format.html { redirect_to(profiles_url) } format.xml { head :ok } end end end View: '/profiles/1/comments') do |f| -%> 'Please wait...' %> Comments ago
