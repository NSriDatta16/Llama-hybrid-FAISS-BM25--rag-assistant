[site]: stackoverflow
[post_id]: 1744287
[parent_id]: 
[tags]: 
Can a scope block with the "using" keyword react to exceptions?

I have the need to do some logging within my code. I'm required to use an internal company-developed library to record some information. Here's how it works. Recorder recorder = Recorder.StartTiming(); DoSomeWork(); recorder.Stop(); // Writes some diagnostic information. To ensure that Stop() is always called, I created a wrapper class that allows a clean "using" block. using (RecorderWrapper recorderWrapper = new RecorderWrapper) // Automatically calls Recorder.StartTiming() under the covers { DoSomeWork(); } // When the recorderWrapper goes out of scope, the 'using' statement calls recorderWrapper.Dispose() automatically - which calls recorder.Stop() under the covers it's worked well so far. However, there's a change my company is requiring, that would look something like this on the original code: Recorder recorder = Recorder.StartTiming(); try { DoSomeWork(); } catch (Exception ex) { recorder.ReportFailure(ex); // Write out some exception details associated with this "transaction" } recorder.Stop(); // Writes some diagnostic information. I'd like to avoid try/catches in all my 'using' scope blocks with RecorderWrapper. Is there a way I can accomodate the "ReportFailure()" call and still leverage the 'using' scope block? Specifically, I want everyone on my team to "fall into a pit of success", i.e. make it easy to do the right thing. To me, this means making it really hard to forget to call recorder.Stop() or forget the try/catch. Thanks!
