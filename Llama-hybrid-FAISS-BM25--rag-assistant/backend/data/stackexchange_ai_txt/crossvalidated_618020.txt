[site]: crossvalidated
[post_id]: 618020
[parent_id]: 
[tags]: 
Understanding tensorflow calculation of MSE for output vector of N dimensions

Here is the code example with variable names guiding the process: const yTrue = tf.tensor2d([[0, 1], [3, 4]]); const yPred = tf.tensor2d([[0, 1], [-3, -4]]); const mse = tf.metrics.meanSquaredError(yTrue, yPred); mse.print(); // [0, 50] The whole point of the code is to show the result, which is [0, 50] and try to understand why it is so. The squared error is: $$ (Y_T -Y_P)^2 $$ squaring the differences between true values and predicted. I am assume that, if each Y is a vector instead, we could think of it as a point in space (say with 2 coordinates) and the error is an average of those errors So L would be of the length of the vector. For example, in this case, it would give $$ \frac{1}{L} (\vec{Y_T} -\vec{Y_P}) \cdot (\vec{Y_T} -\vec{Y_P}) $$ Is this idea correct? I can not find it by searches or maybe do not know the exact term for it, or it is just wrong. I still do not get how the code outputs [0,50] as the output and not 25 .
