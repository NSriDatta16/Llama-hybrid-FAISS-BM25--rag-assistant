[site]: stackoverflow
[post_id]: 3910645
[parent_id]: 3909957
[tags]: 
The examples you mention embed parser actions right inside the grammar for the sake of conciseness. This works fine for small projects. For bigger ones, you'd prefer to make an AST first and then do whatever you want with it. You can do this, hehe, by embedding actions that create the tree, but antlr provides a nicer, declarative way: http://www.antlr.org/wiki/display/ANTLR3/Tree+construction You can then use a Tree Grammar to generate code, e.g. with StringTemplate. I've used this toolchain for my thesis and it worked like a charm. But I bet I'd have suffered a lot without having the Anlr3 Reference Book ( http://pragprog.com/titles/tpantlr/the-definitive-antlr-reference ) I also found the lecture notes linked on the antlr page really useful: http://www.antlr.org/wiki/display/CS652/CS652+Home Also, make use of AntlrWorks to test your grammar. There's also a grammar unit testing suite available. Plus, the antlr mailing list is really active, and Terence Parr actively responds to most posts. Plus, it's a lot of fun.
