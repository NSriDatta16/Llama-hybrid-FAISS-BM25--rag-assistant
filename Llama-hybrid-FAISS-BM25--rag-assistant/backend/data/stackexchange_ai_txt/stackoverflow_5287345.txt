[site]: stackoverflow
[post_id]: 5287345
[parent_id]: 5287270
[tags]: 
This is probably not the best way to organize your code. I would recommend storing a user's first class as an object that performs the calculations itself. This is a more object oriented approach: class User def first_class= klass @first_class = klass.new(self) end def first_class @first_class end end class FirstClass attr_accessor :user def initialize user @user = user end def cost { :str => (user.strength_points + 1)*rate[:str], :dex => (user.dexterity_points + 1) * rate[:dex], :mag => (user.magic_points + 1) * rate[:mag], :acc => (user.accuracy_points + 1) * rate[:acc], :hp => (user.health_points + 1) * rate[:hp] } end end You can then define first class types: class Fighter 2, :dex => 3, :mag => 3, :acc => 2, :hp => 2} end end class Magician 3, :dex => 3, :mag => 2, :acc => 2, :hp => 2} end end class Ranger 3, :dex => 2, :mag => 3, :acc => 2, :hp => 2} end end Then you can adjust your function to this: user.first_class.cost Keep in mind that you'll have to set the first class as an object as well: user.first_class = Fighter But I think this looks cleaner, is more object oriented and drastically reduces the complexity of your code.
