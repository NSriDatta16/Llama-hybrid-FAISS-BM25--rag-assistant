[site]: stackoverflow
[post_id]: 433551
[parent_id]: 433475
[tags]: 
As long as you have control of your AOP I think it's efficient. We did have performance problems anyway, so by own reasoning we were not fully in control ;) This was mostly because it's important that anyone that writes aspects has full understanding of all the other aspects in the system and how they interrelate. If you start doing "smart" things you can outsmart yourself in a jiffy. Doing smart things in a large project with lots of people who only see small parts of the system can be very dangerous performance-wise. This advice probably applies without AOP too, but AOP lets you shoot yourself in the foot in some real elegant ways. Spring also uses proxying for scope-manipluations and thats an area where it's easy to get undesired performance losses. But given that you have control, the only real pain point with AOP is the effect on debugging.
