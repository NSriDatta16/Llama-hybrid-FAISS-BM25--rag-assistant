[site]: stackoverflow
[post_id]: 4681974
[parent_id]: 
[tags]: 
Why is this XPath query failing? Have I made a mistake with DOMXPath?

This question is a bit complicated, as there are alot of moving parts, but I'll try to minify and use only the most relevant snippets. I'm working on an XML/XHTML document parser based on the DOM classes in PHP, but it appears that the part that makes use of DOMXPath is failing. Given this example document: Untitled Document 300 ... ./src/ 300 ./?postId= More Â» I've created a parser that takes a DataObject object (which is essentially just a fancy tree of other DataObject objects) and loops through parsing documents using data in the tree. The document source paths are also stored in the tree. The parser constructor: public function __construct(DataObject $dataObject){ $this->_dataObject = $dataObject; } The public render method, called to return the document as a string: public function render($filename = null){ $document = new DOMDocument; $frag = $this->_build($document, $this->_dataObject); if(is_null($filename)){ return $document->saveXML($frag); }else{ //render to file } } And finally the private _build method, where the meat of the action is happening: protected function _build(DOMNode $node, DataObject $dataObject){ $ownerDocument = $node instanceof DOMDocument ? $node : $node->ownerDocument; $buffer = $ownerDocument->createDocumentFragment(); for($dataIndex = 0; $dataIndex count(); $dataIndex++){ $frag = $ownerDocument->createDocumentFragment(); if(!$dataObject->hasParent() || ($dataObject->getFilename() != $dataObject->getParent()->getFilename())){ $frag->appendXML(file_get_contents($dataObject->getFilename())); }else{ foreach($node->childNodes as $child){ $frag->appendChild($child->cloneNode(true)); } } $frag->normalize(); $xpath = new DOMXPath($ownerDocument); $xpath->registerNamespace('zuq', $ownerDocument->lookupNamespaceURI('zuq')); //THIS IS WHERE THE TROUBLES ARE $nodeList = $xpath->query('.//zuq:data[not(ancestor::zuq:region)]', $frag); for($nodeIndex = $nodeList->length - 1; $nodeIndex >= 0; $nodeIndex--){ //PERFORM REPLACEMENTS } $buffer->appendChild($frag); } return $buffer; } I understand that's quite a chunk, but if there's a problem, it has to be somewhere in there. The problem is that the XPath query is not returning any nodes . I've tested it on documents outright, and it works fine. It finds all elements that are outside of any elements, within the context of the given node (which in recursion be the regions, but I'm not there yet) which will allow parsing each region level individually. When I use $nodeList = $xpath->query('.//*', $frag); and loop through the resulting $nodeList , it has all of the document elements, from through to the most nested. Why is my $nodeList = $xpath->query('.//zuq:data[not(ancestor::zuq:region)]', $frag); query is failing? I really hope that it's a simple matter of, "Oh, you just forgot to _ _." In advance, I really appreciate any help, and if more details are necessary, I'd be happy to provide, just let me know.
