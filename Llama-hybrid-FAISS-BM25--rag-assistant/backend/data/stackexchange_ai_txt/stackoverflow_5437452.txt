[site]: stackoverflow
[post_id]: 5437452
[parent_id]: 5437311
[tags]: 
While calling an initialization function is one way to handle your problem, I thought an alternative might be in order. Here is something you can do in a .cpp file someplace: static const char * const init_ary[] = { "Fred", "Barney", "Joe" }; ::std::vector names(init_ary, init_ary+3); Then you would have this declaration in your .h file: extern ::std::vector names; But really, avoiding global variables is the best idea. They are seriously bad news for a whole host of reasons, some not immediately obvious. For example, they make your code tons harder to test. Its well worth the seeming hit to an 'elegant' design to just pass around the variable to each and every function in order to avoid having them. In fact, if you start coding that up, I bet you start seeing patterns that cause you to rethink parts of your design and you'll end up with something even nicer and more actually elegant than the false 'elegance' you get from the global variable based design.
