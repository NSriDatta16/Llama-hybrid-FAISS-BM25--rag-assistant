[site]: stackoverflow
[post_id]: 1748394
[parent_id]: 639275
[tags]: 
If you already are using Spring/Java EE, it is only natural to apply Spring Batch as a solution for your "concurrence architecture". Two benefits right of the bat: Spring Batch (starting from 2.0) implements partitioning, that means that the framework will take care of partitioning data for you in separate partition steps ( StepExecution ), and delegating the actual execution of these steps to multiple threads or other distributed systems ( PartitionHandlers , e.g. TaskExecutorPartitionHandler or to be more distributed MessageChannelPartitionHandler , etc.. ) Spring has a nice OXM package for dealing with XML + Spring Batch has a StaxEventItemReader that extracts fragments from the input XML document which would correspond to records for processing Give Spring Batch a try. Let me know if you have any questions, I'll be glad to help out. EDIT: Also look at Scala/AKKA Actors and/or Scala parallel collections . If your task is applicable to be sharded/partitioned/distributed => that what Actor model is for. If you'd like to consider a non JVM solution, take a look at Erlang OTP => simple and elegant.
