[site]: stackoverflow
[post_id]: 966671
[parent_id]: 966300
[tags]: 
That sounds doable with DXL, and I think you can use both LotusScript and Java to accomplish it. Something along the lines of this should do it in Java: public class RenderDesign extends AgentBase { public void NotesMain() { try { Session session = getSession(); AgentContext agentContext = session.getAgentContext(); DxlImporter myimporter = session.createDxlImporter(); try { myimporter.setDesignImportOption(myimporter.DXLIMPORTOPTION_REPLACE_ELSE_CREATE); myimporter.importDxl(this.getDxl(), agentContext.getCurrentDatabase()); } catch (Exception e) { System.out.println(this.getDxl()); System.out.println(myimporter.getLog()); } } catch(Exception e) { e.printStackTrace(); } } Then just construct a string with the DXL. Use Tools -> DXL Utilities -> Exporter (or Viewer ) to inspect the design element you want to add or edit: public String getDxl(String agentname, String replicaid) { return " "+ " "+/* ... */" "; } Note that the DXL importer is anything but robust and error-tolerant: You can make the Developer client crash on input that is valid XML and conformant with the DTD. For example, trying to set fieldhint="" on a field. Keep this in mind while developing.
