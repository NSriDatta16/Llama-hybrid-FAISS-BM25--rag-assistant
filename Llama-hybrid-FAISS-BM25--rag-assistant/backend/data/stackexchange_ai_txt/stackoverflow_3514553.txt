[site]: stackoverflow
[post_id]: 3514553
[parent_id]: 3514302
[tags]: 
You need to #include so the compiler will call log() correctly. Using VC10, I get the following result from printf ("log(%lf) = %lf\n", somevalue, temp ) when math.h is included: log(0.295581) = -1.218812 If math.h isn't included, I get: log(0.295581) = -1856.000000 What's probably happening is that the compiler expects the returned value from the call to log() to be int which is then converted to a double to store in temp . I don't know off the top of my head how floating point results are returned by the compiler, but I'd guess they're returned in the FP(0) register, while an int result is returned in EAX (assuming an x86 Win32 platform). So the value to compiler gets in this case might not even have any relationship with the value the log() function tries to return. If you set the warning level to /W3 you'll get a warning about the problem: C:\TEMP\test.c(10) : warning C4013: 'log' undefined; assuming extern returning int In my opinion, unless you're working with a really old codebase that doesn't take advantage of function prototypes, it might make good sense to turn that warning into an error (of course, when compiled as C++ this is already an error): #pragma warning( error : 4013) // or use the `/we4013` compiler option Here's the compilable test: #include //#include int main() { double somevalue; double temp; somevalue = 0.29558101472995091; temp = log(somevalue); printf ("log(%lf) = %lf\n", somevalue, temp); return 0; }
