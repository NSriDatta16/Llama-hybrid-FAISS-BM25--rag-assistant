[site]: stackoverflow
[post_id]: 5355053
[parent_id]: 5352685
[tags]: 
The functionality represented by pointers has been present in computer machine languages since very early on, so languages have always allowed some sort of access to the functionality, even if not always as generally as with pointers. I remember consulting on a port of some K&R C code into Fortran 66. The C code was full of pointers to structures, which didn't map nicely into any feature of Fortran 66. Say the C code has structures like so: struct datastruct { int ival; float fval; } data[100]; The Fortran mapping had a common block (not sure I have the formatting right, my Fortran 66 is extremely stale): COMMON /DATASTRUCT/ IVAL(100), FVAL(100) A function in C which takes a pointer to a structure doesn't have to know whether the structure came from the array or was malloc'ed or anything: float func(struct datastruct *sp) { return sp->ival * sp->fval; } When mapped into Fortran 66, all "structures" were just indexes into the arrays contained in the common block: FUNCTION FUNC(INDEX) COMMON /DATASTRUCT/ IVAL(100), FVAL(100) RETURN IVAL(INDEX) * FVAL(INDEX) Not nearly as elegant as pointers, but got the job done on a CDC 7600 back in the day.
