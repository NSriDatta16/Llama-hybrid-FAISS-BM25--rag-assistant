[site]: stackoverflow
[post_id]: 5277051
[parent_id]: 5275815
[tags]: 
The currency system is one I'm only passingly familiar with, so take all this with a grain of salt. (also, assuming Magento 1.4.2) One approach is the directory/currency model. This is class that all currency formatting functions and methods ultimately call. You'll see calls like this throughout the source code Mage::getModel('directory/currency') It doesn't look like there's a way to say "use this currency model/class for this currency", so you'll be stuck with a class rewrite here. The formatPrecision and formatTxt methods are the ones you're after. Also, it looks like the directory/currency class wraps calls to Magento's locale object (calls to getNumber and currency ) public function formatTxt($price, $options=array()) { if (!is_numeric($price)) { $price = Mage::app()->getLocale()->getNumber($price); } /** * Fix problem with 12 000 000, 1 200 000 * * %f - the argument is treated as a float, and presented as a floating-point number (locale aware). * %F - the argument is treated as a float, and presented as a floating-point number (non-locale aware). */ $price = sprintf("%F", $price); return Mage::app()->getLocale()->currency($this->getCode())->toCurrency($price, $options); } The locale object is a core/locale . You could also rewrite this class. if those were the methods you were after. Finally, because this is Stack Overflow, there's a number of reward points systems already implemented for Magento. Checking these out to see how they solved the problems you're running into might be worthwhile.
