[site]: stackoverflow
[post_id]: 5107592
[parent_id]: 5103329
[tags]: 
@ldmvcd Ok, excuse me, I think you are a beginner and you don't see to what fundamental notions I am refering. Objects are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects. http://docs.python.org/reference/datamodel.html#the-standard-type-hierarchy I don't understand why it is called "abstraction": for me an object is something real in the machine, a series of bits organized according certain rules to represent conceptual data or functionning. Names refer to objects. Names are introduced by name binding operations. Each occurrence of a name in the program text refers to the binding of that name established in the innermost function block containing the use. http://docs.python.org/reference/executionmodel.html#naming-and-binding . A namespace is a mapping from names to objects. Most namespaces are currently implemented as Python dictionaries , but that’s normally not noticeable in any way (except for performance), and it may change in the future. Examples of namespaces are: the set of built-in names (containing functions such as abs(), and built-in exception names); the global names in a module; and the local names in a function invocation. In a sense the set of attributes of an object also form a namespace. http://docs.python.org/tutorial/classes.html#a-word-about-names-and-objects . By the way, I use the word attribute for any name following a dot — for example, in the expression z.real, real is an attribute of the object z. Strictly speaking, references to names in modules are attribute references: in the expression modname.funcname, modname is a module object and funcname is an attribute of it. In this case there happens to be a straightforward mapping between the module’s attributes and the global names defined in the module: they share the same namespace! http://docs.python.org/tutorial/classes.html#a-word-about-names-and-objects . Namespaces are created at different moments and have different lifetimes. http://docs.python.org/tutorial/classes.html#a-word-about-names-and-objects . The namespace for a module is automatically created the first time a module is imported. The main module for a script is always called main . http://docs.python.org/reference/executionmodel.html#naming-and-binding . Well, a Python programm is a big machine that plays with objects, references to these objects , names of these objects, and namespaces in which are binded the names and the objects , namespaces being implemented as dictionaries. So, you're right: when I refer to keys , I refer to names being the keys in the diverse namespaces. Names are arbitrary or not , according if the objects they have been created to name are user's objects or built-in objects. I give advise you to read thoroughly the parts 3.1. Objects , values and types http://docs.python.org/reference/datamodel.html#the-standard-type-hierarchy and 4.1. Naming and binding http://docs.python.org/reference/executionmodel.html#naming-and-binding
