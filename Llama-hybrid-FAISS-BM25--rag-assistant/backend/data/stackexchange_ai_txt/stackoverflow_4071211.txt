[site]: stackoverflow
[post_id]: 4071211
[parent_id]: 4068579
[tags]: 
Maybe: Load resources -> ResourceLoader Map resources by an identifier -> ResourceMapper Ensure that resources are loaded only once -> CachedResourceLoader / this one uses the ResourceLoader when it doesn't already have it loaded Free unused resources (using smartpointers) -> ? / not sure about this one, but load+unload seems like highly cohesive concepts re extra info in the comment about "Free unused resources": First, let's clear that we only have 2 of the above involved: ResourceMapper and CachedResourceLoader. As the ResourceLoader instance is used from the CachedResource, it's not exposed to the rest of the code. Note that the following depends on the domain knowledge, so I'll keep it open / you'll know which of these make sense / applies to the pieces you have. I'd say there are 3 options here: ResourceMapper uses CachedResourceLoader, and you only expose the earlier to the rest of the code. In this approach it there is a single entry point through ResourceMapper, so it makes sense it controls FreeUnused(). Once it determines it can free a resource, it'll remove it from the map. If needed it'd call an Unload for specific items to the CachedResourceLoader Both CachedResourceLoader and ResourceMapper are used by the caller. If you only need to FreeUnused from the ResourceMapper, then just add it there. If it needs to be freed from both, one of: .FreeUnused in the ResourceMapper receives a cachedResourceLoader. After determining/removing the items from the map, it passes the list of resources to free to the cachedResourceLoader instance .FreeUnused in the ResourceMapper returns the list of resources freed from the map. The caller calls .Unload on the cachedResourceLoader passing the list of resources to Unload. Maybe you have a nice place in the caller these 2 calls would fit well. You do use a ResourceManager, but instead of having all the implementations in there, it uses the ResourceMapper and CachedResourceLoader. It'd be very thin, just doing calls to the others, in particular the .FreeUnused and .Unload calls in the last sub bullet above. A final note: I think it's definitely worth it to separate the responsibilities and feel strong about doing so. That said, it's the SOLID principles I follow the most, I don't memorize pattern names and don't pay that much attention to rules like Manager classes are bad.
