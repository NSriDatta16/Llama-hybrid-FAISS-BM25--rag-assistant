[site]: crossvalidated
[post_id]: 277890
[parent_id]: 223834
[tags]: 
I will address all 3 parts to the question. There are two conflated issues, first is the method you use to fit a regression model in this case. The second is how to interval estimates from your estimates to predict a new estimate. if your response variables are Binomially distributed you would typically use either a logistic regression or a probit regression (glm with normal cdf as a link function). If you do a logistic regression, take the response to be the ratio of the observed counts divided by the the known upper bound i.e. $y_i/n_i$ . Then take your predictors/covariates and put these into your R call to a glm function. The returned object has everything you need to do the rest of your calculations. x For a linear regression model the formula for a prediction interval is: $\hat{y}_i \pm t_{n-p}s_y\sqrt{1+\frac{1}{n}+\frac{(x_i-\bar{x})^2}{(n-1)s^2_x}}$ You can use the linear regression model as an approximation for the glm. To do this you would linear regression formula for the linear combination of predictors before you do the inverse link transformation to get the probabilities back on the 0-1 scale. The code to do this is baked into the predict.glm() R function. Here is some example code that will also make a nice plot. ( EDIT : This code is for confidence interval, not for prediction interval) y_hat $fit + t_np * y_hat$ se.fit lb $fit - t_np * y_hat$ se.fit point $family$ linkinv(point) p_hat_lb $family$ linkinv(lb) p_hat_ub $family$ linkinv(ub) plot(x,p_hat) points(x, p_hat_ub, col='red') points(x, p_hat_lb, col='blue') You can do the same thing for any glm, e.g. Poisson, inverse Gaussian, gamma, etc. In each case do the prediction interval on the scale of the linear combination of the predictors. After you get the two end points of the prediction interval you convert these end points via the inverse link. For each of the glms I mentioned the inverse link might be different than the logit case I wrote here. Hope this helps.
