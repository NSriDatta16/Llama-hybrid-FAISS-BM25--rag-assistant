[site]: stackoverflow
[post_id]: 3006684
[parent_id]: 3006508
[tags]: 
I very much doubt there will be any performance gains of this, except at least in a very specific scenario. In this scenario you change a, b, and c, and thus which of the three that triggers the code changes, but the code executes anyhow, then reducing the code to one if-statement might improve, since the CPU might have the code in the branch cache when it gets to it next time. If you triple the code, so that it occupies 3 times the space in the branch cache, there is a higher chance one or more of the paths will be pushed out, and thus you won't have the most performant execution. This is very low-level, so again, I doubt this will make much of an impact. As for readability, which one is easier to read: if something, do this if something else, do this if yet another something else, do this "this" is the same in all three cases or this: if something, or something else, or yet another something else, then do this Place some more code in there, other than just a simple function call, and it starts getting hard to identify that this is actually three identical pieces of code. Maintainability goes down with the 3 if-statement organization because of this. You also have duplicated code, almost always a sign of bad structure and design. Basically, I would tell the programmer that if he has problems reading the 1 if-statement way of writing it, maybe C++ is not what he should be doing. Now, let's assume that the "a", "b", and "c" parts are really big, so that the OR's in there gets lost in lots of noise with parenthesis or what not. I would still reorganize the code so that it only called the function (or executed the code in there) in one place, so perhaps this is a compromise? bool doExecute = false; if (a) doExecute = true; if (b) doExecute = true; if (c) doExecute = true; if (doExecute) { f(); } or, even better, this way to take advantage of boolean logic short circuiting to avoid evaluating things unnecessary: bool doExecute = a; doExecute = doExecute || b; doExecute = doExecute || c; if (doExecute) { f(); }
