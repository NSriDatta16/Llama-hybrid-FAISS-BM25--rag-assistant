[site]: stackoverflow
[post_id]: 923502
[parent_id]: 
[tags]: 
ORM and layers

Sorry for this point being all over the place here...but I feel like a dog chasing my tail and I'm all confused at this point. I'm trying to see the cleanest way of developing a 3 tiered solution (IL, BL, DL) where the DL is using an ORM to abstract access to a DB. Everywhere I've seen, people use either LinqToSQL or LLBLGen Pro to generate objects which represent the DB Tables, and refer to those classes in all 3 layers. Seems like 40 years of coding patterns have been ignored -- or a paradigm shift has happened, and I missed the explanaition part as to why its perfectly ok to do so. Yet, it appears that there is still some basis to desiring being data storage mechanism agnostic -- look what just happened to LinqToSQL: a lot of code was written against it -- only for MS to drop it... So I would like to isolate the ORM part as best I can, just don't know how. So, going back to absolute basics, here are the basic parts that I wish to have assembled in a very very clean way: The Assemblies I'm starting from: UL.dll BL.dll DL.dll The main classes: A Message class that has a property exposing collection (called MessageAddresses) of MessageAddress objects: class Message { public MessageAddress From {get;} public MessageAddresses To {get;} } The functions per layer: The BL exposes a Method to the UI called GetMessage (Guid id) which returns an instance of Message. The BL in turn wraps the DL. The DL has a ProviderFactory which wraps a Provider instance. The DL.ProviderFactory exposes (possibly...part of my questions) two static methods called GetMessage(Guid id), and SaveMessage(Message message) The ultimate goal would be to be able to swap out a provider that was written for Linq2SQL for one for LLBLGen Pro, or another provider that is not working against an ORM (eg VistaDB). Design Goals: I would like layer separation. I would like each layer to only have dependency on layer below it, rather than above it. I would like ORM generated classes to be in DL layer only. I would like UL to share Message class with BL. Therefore, does this mean that: a) Message is defined in BL b) The Db/Orm/Manual representation of the DB Table ('DbMessageRecord', or 'MessageEntity', or whatever else ORM calls it) is defined in DL. c) BL has dependency on DL d) Before calling DL methods, that do not have ref or know about BL, the BL has to convert them BL entities (eg: DbMessageRecord)? UL: Main() { id = 1; Message m = BL.GetMessage(id); Console.Write (string.Format("{0} to {1} recipients...", m.From, m.To.Count)); } BL: static class MessageService { public static Message GetMessage(id) { DbMessageRecord message = DLManager.GetMessage(id); DbMessageAddressRecord[] messageAddresses = DLManager.GetMessageAddresses(id); return MapMessage(message, } protected static Message MapMessage(DbMessageRecord dbMessage. DbMessageAddressRecord[] dbAddresses) { Message m = new Message(dbMessage.From); foreach(DbMessageAddressRecord dbAddressRecord in dbAddresses){ m.To.Add(new MessageAddress (dbAddressRecord.Name, dbAddressRecord.Address); } } DL: static class MessageManager { public static DbMessageRecord GetMessage(id); public static DbMessageAddressRecord GetMessageAddresses(id); } Questions: a) Obviously this is a lot of work sooner or later. b) More bugs c) Slower d) Since BL now dependency on DL, and is referencing classes in DL (eg DbMessageRecord), it seems that since these are defined by ORM, that you can't rip out one Provider, and replace it with another, ...which makes the whole exercise pointless...might as well use the classes of the ORM all through the BL. e) Or ...another assembly is needed in between the BL and DL and another mapping is required in order to leave BL independent of underlying DL classes. Wish I could ask the questions clearer...but I'm really just lost at this point. Any help would be greatly appreciated.
