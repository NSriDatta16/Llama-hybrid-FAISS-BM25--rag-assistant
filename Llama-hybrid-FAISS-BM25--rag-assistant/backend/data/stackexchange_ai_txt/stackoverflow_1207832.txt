[site]: stackoverflow
[post_id]: 1207832
[parent_id]: 
[tags]: 
WPF Dispatcher.BeginInvoke and UI/Background Threads

I think I need some clarifications regarding WPFs Dispatcher.Invoke and Dispatcher.BeginInvoke usage. Suppose I have some long running 'work' code like such that is invoked on the press of a button in a simple WPF application: longWorkTextBox.Text = "Ready For Work!"; Action workAction = delegate { Console.WriteLine("Starting Work Action"); int i = int.MaxValue; while (i > 0) i--; Console.WriteLine("Ending Work Action"); longWorkTextBox.Text = "Work Complete"; }; longWorkTextBox.Dispatcher.BeginInvoke(DispatcherPriority.Background, workAction); This code is locking up my user interface while the workAction is being performed. This is because Dispatcher invokes always run on the UI thread, right? Assuming this, what is the best practice for configuring my dispatcher to execute the workAction in a separate thread from my UI? I know I can add a BackgroundWorker to my workAction to prevent my UI from locking as such: longWorkTextBox.Text = "Ready For Work!"; Action workAction = delegate { BackgroundWorker worker = new BackgroundWorker(); worker.DoWork += delegate { Console.WriteLine("Starting Slow Work"); int i = int.MaxValue; while (i > 0) i--; Console.WriteLine("Ending Work Action"); }; worker.RunWorkerCompleted += delegate { longWorkTextBox.Text = "Work Complete"; }; worker.RunWorkerAsync(); }; longWorkTextBox.Dispatcher.BeginInvoke(DispatcherPriority.Background, workAction); Is there any more elegant ways of doing this besides using the BackgroundWorker ? I've always heard that the BackgroundWorker is quirky, so I am curious to know of some alternatives.
