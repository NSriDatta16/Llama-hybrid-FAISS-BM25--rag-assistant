[site]: stackoverflow
[post_id]: 1610662
[parent_id]: 1610395
[tags]: 
Let's see. Addresses: 22,271 Contacts: 17,906 Organizations: 8,246 addresses a LEFT JOIN contacts c gives about 20,000 * 20,000 ~ 400 million comparisons for about 20,000 results LEFT JOIN organizations gives about 10,000 * 20,000 ~ 200 million comparisons for about 20,000 results which we sort mainly on contact rows, then discard all but 24 of them. Seems the distinctness of the addresses is of minimal importance. Since we're mostly sorting by contacts, how about we do a subselect on contacts, keeping somewhat more (say, by a factor of about 4) than we need: SELECT * FROM contacts ORDER BY last_name, first_name LIMIT 100 Then Join those to their addresses keeping the top hundred or so SELECT a.* FROM (SELECT * FROM contacts ORDER BY last_name, first_name LIMIT 0, 100) AS c LEFT JOIN addresses a ON c.id = a.contact_id LIMIT 0, 100 Then join these to the organizations SELECT * FROM ( SELECT * FROM (SELECT * FROM contacts ORDER BY last_name, first_name LIMIT 0, 100) AS c LEFT JOIN addresses a ON c.id = a.contact_id LIMIT 0, 100 ) AS ca LEFT JOIN organizations o ON o.id = ca.organization_id ORDER BY ca.last_name, ca.first_name, o.name LIMIT 0, 24 I'm sure the syntax is screwed up, but I'm equally sure the principle of cutting down the results set at each stage points an instructive way. I have probably made a couple of trade offs too, such that the result closely approximates the 10 seconds answer, but gets there much quicker.
