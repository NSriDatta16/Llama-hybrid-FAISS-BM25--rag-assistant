[site]: stackoverflow
[post_id]: 3303433
[parent_id]: 
[tags]: 
C# Super fancy LINQiness

I'm trying to write a dynamic sort of command line processor where I have a dictionary with keys being possible parameters, and the member being an Action where the string is the text between the parameters passed on the command line. Want to be able to add parameters just by adding the params array, and writing the action in the dictionary. Yes I realize this is a pointless exercise in overcomplicating implementation to simplify maintenance. Mostly just trying to stress myself to learn more linq. Here's my dictionary: private static Dictionary > _commandLineParametersProcessor = new Dictionary >() { { new string[] {"-l", "--l", "-log", "--log"}, (logFile) => { _blaBla.LogFilePath = logFile; } }, { new string[] { "-s", "--s", "-server", "--server" }, (server) => { ExecuteSomething(server); _blaBla.Server = server; } } }; What's the most elegant mechanism to take string[] args and not just correlate the members that fall within any of the dictionary key arrays, but Aggregate((x,y) => string.Format("{0} {1}", x, y)) the sequence of elements (was thinking TakeWhile() fits in here somehow) inbetween the args[] members that would be Contain()ed in any of the keys arrays, and handing them into the action of the respective key's value member. We have all written these little command line processors countless times, and while obviously a simple loop and switch is always more than adequate, this is again as I said an exercise trying to stress my linq skills. So please no complaints that I'm overengineering, that part is obvious. Update: To make this maybe a little easier, here is a non-linq way of doing what I'm looking for (may be imperfect, this is just winging it): Action currentAction; string currentActionParameter; for(int i = 0; i parameterChoices.Contains(e.Args[i])); if (isParameterSwitch) { if (!string.IsNullOrEmpty(currentActionParameter) && currentAction != null) { currentAction(currentActionParameter); currentAction = null; currentActionParameter = ""; } currentAction = _commandLineParametersProcessor[_commandLineParametersProcessor.Keys.Single((parameterChoices) => parameterChoices.Contains(e.Args[i]))]; } else { currentActionParameter = string.Format("{0} {1}", currentActionParameter, e.Args[i]); } } This is not an altogether bad approach, I just wonder if anyone can maybe simplify it a little using linq or otherwise, though this may be the simplest form i guess..
