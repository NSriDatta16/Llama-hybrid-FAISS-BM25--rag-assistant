[site]: stackoverflow
[post_id]: 2204822
[parent_id]: 2204216
[tags]: 
Here's what I would do... I would start by profiling your and seeing: 1) what is slow and what the hot paths are 2) which calls are reentrant or deeply nested you can use 1) to determine where the opportunity is for speedups and where to start looking for parallelization. you can use 2) to find out where the shared state is likely to be and get a deeper sense of how much things are tangled up. I would use a good system profiler and a good sampling profiler (like the windows perforamnce toolkit or the concurrency views of the profiler in Visual Studio 2010 Beta2 - these are both 'free' right now). Then I would figure out what the goal is and how to separate things gradually to a cleaner design that is more responsive (moving work off the UI thread) and more performant (parallelizing computationally intensive portions). I would focus on the highest priority and most noticable items first. If you don't have a good refactoring tool like VisualAssist, invest in one - it's worth it. If you're not familiar with Michael Feathers or Kent Beck's refactoring books, consider borrowing them. I would ensure my refactorings are well covered by unit tests. You can't move to VS (I would recommend the products I work on the Asynchronous Agents Library & Parallel Pattern Library, you can also use TBB or OpenMP). In boost, I would look carefully at boost::thread, the asio library and the signals library. I would ask for help / guidance / a listening ear when I got stuck. -Rick
