[site]: stackoverflow
[post_id]: 551026
[parent_id]: 550919
[tags]: 
ÃŽ know where you are coming from. Some languages force you to do this. String str = getStr(); switch(str) { case "POST" : this.doPost(); break; case "GET" : this.doGet(); break; //and the other http instructions } And now what? Sure, there is a nice OOP way to do it: str.request(this); Too bad that String cannot be extended and now you're considering writing a HttpInstruction class with 8 subclasses for each HttpInstruction. Honestly, especially when talking about parsers, it is just substantially difficult. It isn't good OOP, that for sure, but good code is not always ... possible. Let me disgress for a moment. I'm writing my thesis. I personally don't like the usual setup of recursive functions. You normally have like funcRec(arg1,arg), and func(arg1):=func(funcRec(arg1,0)); so I defined it in my thesis with default arguments. Not everybody knows the concept of a default argument. My thesis uses pseudo-code, but the professor had me change the algorithm to the traditional way, because you don't come across default arguments very often, so don't use them. Don't surprise your reader unnecessarily. I think he's right. But the result is that now I'm stuck with a function whose sole purpose is to ship around default arguments - which could be prettier. So, the bottom line is: Truely beautiful programs require excellent libraries, excellent code browsers and tools, bugtrackers of the qualitiy of FogBugz, at least, better more integrated, version management of git quality, and so forth. And, umm, people around you who can use all these things and know how to handle all of these things. And most of all: a beaauuuuutiful language that allows elegant solutions to tricky problems. So, chances are, you're stuck with Java which makes it difficult to come up with a good replacement for switches in all situations. Self would have an elegant solution. But you're not using Self, and if you were, your colleagues wouldn't be able to read it, so forget that. And now find a compromise. It's sad, I know.
