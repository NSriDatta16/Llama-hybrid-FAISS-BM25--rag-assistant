[site]: stackoverflow
[post_id]: 3023866
[parent_id]: 3009608
[tags]: 
I put together a demo of how to do this... but it may not be the best method. Here are some problems I've discovered: Because this code uses the placeholder to figure out where you are moving the list, you can only drop an item inside another item if you approach it from the top. I did get a working version where you could drop an item anywhere inside the base item, but the code was just too messy and cumbersome. Sometimes when an item from the other list is dropped in an item, it becomes stuck. I'm not sure why, but it becomes unstuck when the list group is moved to the other list. I'm sure there is a better method, one that calculates the intersection of list items (just like the sortable script does). But this is a quick and dirty method. $(function() { var phTop, container, indx; $("#sortable1, #sortable2").sortable({ connectWith: '.connectedSortable', beforeStop: function(e,ui){ phTop = ui.placeholder.position().top; container = ui.placeholder.parent(); indx = ui.placeholder.index(); }, stop: function(e,ui){ var list = container.find('> li').eq(indx); // 15 is a pixel tolerance between the two items (dragging in from the top) if ( Math.abs( phTop - ui.position.top ) 1 if (ui.item.find('li').length > 0) { return; } // add ul inside of li to make subgroup if (!list.find('ul').length) { list.append(' '); } ui.item.appendTo( list.find('> ul') ); } container.find('li > ul:empty').remove(); // remove empty subgroups } }).disableSelection(); });
