[site]: stackoverflow
[post_id]: 4494617
[parent_id]: 4487099
[tags]: 
Your sense that the version with the return is more readable is probably a sign that you are still thinking imperatively rather than declaratively . Try to think of your function from the perspective of what it is (i.e. how it is defined), rather than what it does (i.e. how it is computed). Let's look at your average example, and pretend that the standard library doesn't have the features that make an elegant one-liner possible. Now in English, we would say that the average of a list of numbers is the sum of the numbers in the list divided by its length. def average(xs: List[Int]): Float = { var sum = 0 xs.foreach(sum += _) sum / xs.length.toFloat } This description is fairly close to the English version, ignoring the first two lines of the function. We can factor out the sum function to get a more declarative description: def average(xs: List[Int]): Float = { def sum(xs: List[Int]): Int = // ... sum(xs) / xs.length.toFloat } In the declarative definition, a return statement reads quite unnaturally because it explicitly puts the focus on doing something.
