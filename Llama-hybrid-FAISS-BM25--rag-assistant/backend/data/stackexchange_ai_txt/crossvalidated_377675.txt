[site]: crossvalidated
[post_id]: 377675
[parent_id]: 377595
[tags]: 
It's almost a truism to say that in any practical problem, it's not sufficient to throw neural networks at a problem and expect to strike it rich. Often, constructing better features is the harder, and most profitable, part of developing a better machine learning model. Framed a different way, how do you plan to distill all relevant market data and present it to a neural network? Historical data is only a part of the puzzle, since, as we all know, past performance is no guarantee of future returns. A price bar for a security is just part of the picture. What do you make of the Fed's plan to raise interest rates in 2019? Also, it appears that a yield-curve inversion could be on the horizon, and that often precedes recessions. The same goes for declines in microchip demand. How does your model "price in" that information? An example of using reinforcement learning for stock trades can be found in Maxim Lapan, Deep Reinforcement Learning Hands-On . The code for that chapter (and the rest of the book) is on Github. . (Full disclosure: I've made minor contributions to the repository.) Reinforcement learning is an attractive way to frame the problem, since the core task of RL is to train an agent how to make optimal decisions (profit) when interacting with an environment (the stock market). Estimating discounted future rewards is a part of reinforcement learning objectives, and is the machine learning analogue to market gurus (Jim Cramer, Warren Buffet, whoever) making guesses predictions about market moves. Additionally, RL is probably a better framework than supervised learning because labeling a financial time series and providing it to a model seems both labor-intensive and pointless. The goal isn't to build a model that reproduces a particular analyst's hindsight, but to build a model that can correctly estimate future return and act accordingly. In this scenario, we don't have the rewards data available - but by running experiments, the agent can (hopefully) learn optimal actions. Naturally, it is hard to build an RL agent that is profitable. The agent proposed and tested in the book chapter fails to generalize: when the agent is applied to new data, it quickly loses all of its money. (A piece of life advise: if you decide to actually use a model to make real trades, only give it money that you can afford to lose!) Marcos LÃ³pez de Prado's Advances in Financial Machine Learning (2018) is something of a how-to manual for the sorts of people who have a few million dollars lying around to fund a multi-year R&D effort. It outlines how using machine learning in finance is fundamentally distinct from funding active managers, and how the task requires a multi-disciplinary approach (such as high-performance computing specialists, machine learning experts, programmers, data engineers). A large portion of Prado's book focuses on the problem of understanding how to measure model generalization, which is a more technical way to say "here's how to assess the risk that you will bankrupt the firm with your newfangled computer program." It's easier to start learning about machine learning on simpler problems, or problems that we understand well. I have a political science degree; when I started doing machine learning in earnest, I would work on problems concerning elections data, because I understand the underlying material very well. Unless you consider yourself a finance expert, I'd start with a topic that's a little simpler. Or, at a minimum, I'd study the core elements of financial modeling, including ARIMA models, CAPM and Fama-French for a start. David Ruppert's Statistics and Data Analysis for Financial Engineering provides a good overview of these topics among others. I also suggest reading a few posts at https://mathinvestor.org/ to better understand the kinds of hurdles that you are likely to face in this project.
