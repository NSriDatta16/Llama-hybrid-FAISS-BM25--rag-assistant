[site]: stackoverflow
[post_id]: 3611095
[parent_id]: 
[tags]: 
The PHP language can be enhanced through the use of extensions, which provide to PHP scripts new internal functions, classes, resource types, streams (also stream wrappers and filters) and, in general, can do anything a native program would be able to do. Extensions are typically written in order to: Wrap a native library, which is typically written in C or C++. Implement PHP code in a language that offers more optimization opportunities, such as C, so that pages can be served faster and/or more pages can be served concurrently. Implement/functions classes that, being closer to PHP's core, are able to do things that would otherwise not be possible (e.g. add/remove functions from the function table dynamically, bypass open_basedir ). PHP is written in C and has a C API available for extensions, therefore these tend to be written in that language. However, the only requirement is that the resulting extension is able to interface with PHP's APIs, handle its data structures and can be loaded by PHP's extension loading mechanism. SWIG can be used to wrap native libraries in an easier fashion. See also PHP4Delphi , which allows embedding PHP in Delphi and other applications as well as writing PHP extensions in Delphi. A special type of extensions, Zend extensions, are more tightly coupled with PHP and are provided with more hooks so that they can modify PHP's behavior more extensively. They are typically used to implement debuggers (e.g. XDebug ). Unfortunately, there is no official and up-to-date reference on how to write PHP extensions. However, see this answer for several resources.
