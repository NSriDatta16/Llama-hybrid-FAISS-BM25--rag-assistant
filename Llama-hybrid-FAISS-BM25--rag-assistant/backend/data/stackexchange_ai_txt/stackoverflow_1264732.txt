[site]: stackoverflow
[post_id]: 1264732
[parent_id]: 1264568
[tags]: 
Here are some thoughts. For my answer, I will define productivity as # of lines divided by number of bugs. If applied well, on average, I think unit tests will yield higher productivity. Stuart Halloway uses the metaphor of double-ledger accounting: the test-code may seem redundant but having that other ledger is a huge payoff for getting a sense of quality. With unit tests, the developer (or pair-programmer) is the first client of the software. This is why bugs are found more quickly, as others have noted. However, the person is also the first client of the OO model, API, etc. If a senior developer is involved (doing the work, or as a pair), the quality will improve from a design standpoint. This has mid and long term benefits. (This is often overlooked.) Good unit tests will expose, and exercise, corner cases. These cases may not be reached via the vanilla tests that developers run manually. If you think about bugs found in the field: how many are due to some strange condition? In my experience, a lot . It is true that, in the wrong hands, unit tests can feel like wheels spinning in the sand. But with some experience, the payoff is worth it, even in the short term. Yes, there may be fewer lines of production code but the bug rate will be much better.
