[site]: stackoverflow
[post_id]: 1935853
[parent_id]: 1935788
[tags]: 
In your UIViewController , implement: - (MyObject *)valueForSelectedRow { MyCell *cell = (MyCell *)[self.tableView cellForRowAtIndexPath:[self.tableView indexPathForSelectedRow]]; return cell.myObject; } - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath { // Get value MyObject *object = [self valueForSelectedRow]; // Update the label, assumed that _label is a pointer to a UILabel view object. _label.text = object.myValue; } When you want to push a new view controller, you just call -valueForSelectedRow and then use that value to push the controller. This is assumed that you have a UITableViewCell subclass, with a property set to some model object. When you don't have that and just set the text property, that NSString object will be your 'model' object, although it would be easier when your cells handle custom model objects. EDIT: Thanks for editing your answer. I now have the information I need. In this line: cell.textLabel.text = psystem.system_id , you setup the cell by simply setting the textLabel 's text property. This is what I described in the paragraph above. I always create a UITableViewCell subclass, with a property set the the complete PSystem object. When you assign a PSystem object to the cell, it will handle it's contents, so you can easily manage your view in the, well, view. That's a very compelled approach since you never have to look at the controller again to alter the view's contents. However, it can be done the way you currently have it. It would look something like: - (NSString *)valueForSelectedRow { UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:[self.tableView indexPathForSelectedRow]]; return cell.textLabel.text; } - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath { // Get value NSString *value = [self valueForSelectedRow]; // Update the label, assumed that _label is a pointer to a UILabel view object. _label.text = value; } In this case, your PSystem model has been replaced with an NSString object. For this, it's enough, but it could be so much easier to have the object itself. Okay, that can also be done by selecting the PSystem object again from the p_system array by the NSIndexPath , but things will become harder once you come up with more complex tableviews.
