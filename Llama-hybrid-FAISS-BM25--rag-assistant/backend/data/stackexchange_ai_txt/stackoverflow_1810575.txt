[site]: stackoverflow
[post_id]: 1810575
[parent_id]: 1809914
[tags]: 
Do you use this kind of constructor pattern? I've used this patter earlier on when I was first learning JavaScript and stumbled on to Douglas Crockford's literature. Do you find it understandable? As long as you understand closures, this method is clear. Do you have a better one? It depends on what you are trying to accomplish. If you're trying to write a library that will be as idiot proof as possible, then I can completely understand the use of private variables. It may help prevent users from inadvertently disturbing the integrity of your object. Yes, the cost in time might be slightly larger (about 3 times as larger), but the cost of time is a moot argument until it's actually affecting your application. I noticed the test mentioned in a previous post ( test ) does not account for how long it takes to access an object's functions. I've found that the prototype/constructor method usually leads to a quicker construction time, yes, but it doesn't necessarily save time in retrieval. There is an additional cost of using the prototype chain to find a function versus having a function attached directly to the object you're using. So if you're calling a lot of prototype functions and not constructing a lot of objects, it might make more sense to use Crockford's pattern. I tend to not like to use private variables, though, if I'm not writing my code for a large audience. If I'm with a team of people who are all capable coders, I can generally, trust that they'll know how to use my code if I code and comment well myself. Then I use something akin to Crockford's pattern sans private members/methods.
