[site]: stackoverflow
[post_id]: 597265
[parent_id]: 597257
[tags]: 
It goes both ways. For example, a lot of people that started at a higher level have no idea why shifts are so much faster than multiplication and division, or the impact of branching, etc. As a result, they often write code that is slower, but easier for the average person to understand. (Note that for some applications, going faster is more important than being easy to understand) Someone that has an understanding of what's going on behind the scenes (how many clock cycles different operations take, how a CPU's pipeline works, the impact of caching, etc) can often write code that is very fast, but can be difficult for many people to understand/maintain. (This is particularly difficult in applications where the "optimization" has no perceivable benefit, and maintainability is more important) Personally I feel that knowing "what's going on below" at least gives me the ability to know the impact of the decisions I'm making. Honestly, at this point, I don't mind leaving a lot of the low level details/optimizations up to the compiler. It probably does a better job than I would anyway :]
