[site]: stackoverflow
[post_id]: 453277
[parent_id]: 
[tags]: 
Querying entity in NHibernate by average value of subentity

I've got an entity Product like this: [Class(0, Name = "Product", Table = "Products")] public class Product { private readonly ISet _productPropertyValues; private readonly ISet _productImages; private readonly ISet _productComments; private readonly IList _categories; private readonly ISet _rates; public Product() { _productPropertyValues = new HashedSet (); _productImages = new HashedSet (); _productComments = new HashedSet (); _categories = new List (); _rates = new HashedSet (); ; } [Id(0, Name = "ProductId", Type = "Int32", Column = "ProductID")] [Generator(1, Class = "native")] public virtual Int32 ProductId { get; set; } [Property(0, Name = "Description", Column = "Description", Type = "string")] public virtual String Description { get; set; } [Property(0, Name = "ShortDescription", Column = "ShortDescription", Type = "string")] public virtual String ShortDescription { get; set; } [Property(0, Name = "ProductName", Column = "ProductName", Type = "string")] public virtual String ProductName { get; set; } [Property(0, Name = "UnitPrice", Column = "UnitPrice", Type = "double")] public virtual double UnitPrice { get; set; } [Property(0, Name = "UnitsInStock", Column = "UnitsInStock", Type = "int")] public virtual int UnitsInStock { get; set; } [Property(0, Name = "MainImagePath", Column = "MainImagePath", Type = "string")] public virtual String MainImagePath { get; set; } [Property(0, Name = "NumberOfSales", Column = "NumberOfSales", Type = "int")] public virtual int NumberOfSales { get; set; } [Property(0, Name = "NumberOfViews", Column = "NumberOfViews", Type = "int")] public virtual int NumberOfViews { get; set; } [Property(0, Name = "IsSpecial", Column = "IsSpecial", Type = "boolean")] public virtual bool IsSpecial { get; set; } [Property(0, Name = "AdditionDate", Column = "AdditionDate", Type = "DateTime")] public virtual DateTime AdditionDate { get; set; } [Property(Name = "Enabled", Column = "Enabled", Type = "boolean")] public virtual bool Enabled { get; set; } [Bag(0, Name = "Categories", Lazy = true, Table = "Products_Categories", Access = "field.camelcase-underscore", Cascade = "none")] [Key(1, Column = "ProductID")] [ManyToMany(2, Class = "Category", Column = "CategoryID")] public virtual ReadOnlyCollection Categories { get { return new ReadOnlyCollection (_categories); } } [Set(0, Name = "ProductComments", Lazy = true, Access = "field.camelcase-underscore", Cascade = "save-update", Inverse = true)] [Key(1, Column = "ProductID")] [OneToMany(2, Class = "ProductComment")] public virtual ReadOnlyCollection ProductComments { get { return new ReadOnlyCollection (new List (_productComments)); } } [Set(0, Name = "ProductImages", Lazy = true, Access = "field.camelcase-underscore", Cascade = "save-update")] [Key(1, Column = "ProductID")] [OneToMany(2, Class = "ProductImage")] public virtual ReadOnlyCollection ProductImages { get { return new ReadOnlyCollection (new List (_productImages)); } } [Set(0, Name = "ProductPropertyValues", Lazy = true, Access = "field.camelcase-underscore", Cascade = "save-update")] [Key(1, Column = "ProductID")] [OneToMany(2, Class = "ProductPropertyValue")] public virtual ReadOnlyCollection ProductPropertyValues { get { return new ReadOnlyCollection (new List (_productPropertyValues)); } } [Set(0, Name = "Rates", Lazy = true, Access = "field.camelcase-underscore", Cascade = "save-update")] [Key(1, Column = "ProductID")] [OneToMany(2, Class = "Rate")] public virtual ReadOnlyCollection Rates { get { return new ReadOnlyCollection (new List (_rates)); } } /// /// Gets everage rate. /// /// The everage rate. public double AverageRate { get { if (_rates.Count != 0) { return _rates.Average(x => x.Value); } return 0; } } /// /// Gets rounded average rate. /// /// The rounded average rate. public Int32 AverageRateRounded { get { return (int)Math.Round(AverageRate); } } /// /// Gets the number of votes. /// /// The number of votes. public Int32 NumberOfVotes { get { return _rates.Count; } } /// /// Add new comment to current product /// /// Comment to add public virtual void AddComment(ProductComment commentToAdd) { if (commentToAdd != null) { if (!_productComments.Contains(commentToAdd)) { _productComments.Add(commentToAdd); } } } /// /// Delete comment from current product /// /// public virtual void DeleteComment(ProductComment commentToDelete) { if (commentToDelete != null) { if (_productComments.Contains(commentToDelete)) { _productComments.Remove(commentToDelete); } } } /// /// Add image to current product /// /// Image to add public virtual void AddImage(ProductImage imageToAdd) { if (imageToAdd != null) { if (!_productImages.Contains(imageToAdd)) { _productImages.Add(imageToAdd); } } } /// /// Delete image from current product /// /// Image to delete public virtual void DeleteImage(ProductImage imageToDelete) { if (imageToDelete != null) { if (_productImages.Contains(imageToDelete)) { _productImages.Remove(imageToDelete); } } } /// /// Add property to current product /// /// Value to add public virtual void AddProrerty(ProductPropertyValue valueToAdd) { if (valueToAdd != null) { if (!_productPropertyValues.Contains(valueToAdd)) { _productPropertyValues.Add(valueToAdd); } } } /// /// Delete property from current product /// /// Value to delete public virtual void DeleteProperty(ProductPropertyValue valueToDelete) { if (valueToDelete != null) { if (_productPropertyValues.Contains(valueToDelete)) { _productPropertyValues.Remove(valueToDelete); } } } /// /// Adds rate to current product. /// /// The rate. public virtual void AddRate(Rate rate) { if (rate != null) { if (!_rates.Contains(rate)) { _rates.Add(rate); } } } /// /// Deletes rate from product. /// /// The rate. public virtual void DeleteRate(Rate rate) { if (rate != null) { if (_rates.Contains(rate)) { _rates.Remove(rate); } } } } and a Rate entity like this: [Class(0, Name = "Rate", Table = "Rates")] public class Rate { [CompositeId(1)] [KeyManyToOne(2, Name = "Product", Class = "Product", Column = "ProductId")] [KeyManyToOne(3, Name = "User", Class = "User", Column = "UserId")] public virtual Product Product { get; set; } public virtual User User { get; set; } [Property(0, Name = "Value", Column = "Value", Type = "Int32")] public virtual Int32 Value { get; set; } } And I need to fetch all products with average rating in DESC order. Also it should be filterable by any field from Product , e.g. price: from $1000 to $5000. Thanks.
