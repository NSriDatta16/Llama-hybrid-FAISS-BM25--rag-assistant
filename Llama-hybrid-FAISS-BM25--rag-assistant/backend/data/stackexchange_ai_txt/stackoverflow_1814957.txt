[site]: stackoverflow
[post_id]: 1814957
[parent_id]: 1813794
[tags]: 
The usage of Actor is "natural" in at least two cases: When you can decompose your problem in a set of independent tasks. When you can decompose your problem in a set of tasks linked by a clear workflow (ie. dataflow programming ). For instance, if you process complex data using a series of filters, it is easy to use a pipeline of actors where each actor receives data from an upstream actor and sets data to a downstream actor. Of course, this data-flow must not be linear and if a step is slow in your pipeline, instead you can use a pool of actors doing the same job. Another way of solving the load balancing problems would be to use instead a demand-driven approach organized with a kind of virtual Kanban system. Of course, you will need synchronization between actors in almost all interesting cases, but contrary to the classic multi-thread approach, this synchronization is really "concrete". You can imagine guys in a factory, imagine possible problems (workers run out of the job to do, upstream operations is too fast and intermediate products need a huge storage place, etc.) By analogy, you can then find a solution more easily.
