[site]: stackoverflow
[post_id]: 5184494
[parent_id]: 5184216
[tags]: 
You should learn about Hibernate query cache . In simple words: it works on top of second level cache ( L2 ) and stores results of queries. But it only stores ids of the records that should be returned by the query rather than a whole list. This means that you need to have L2 working and fine tuned. In your scenario suppose you have 1M records in table T and a query that returns 1K by average. The first time you run this query it will miss the query cache and: run the SQL fetch 1K records put all of them in L2 put 1K ids in query cache The next time you execute the query it will hit the query cache and lookup all the result from L2. The interesting part comes when you modify table T . Hibernate will figure out that the results in query cache might be stale and it will invalidate the whole cache but not the L2. It will basically repeat points 1-4 but refreshing only query cache (most of entities from table T are already in L2). In some scenarios it works great, in others it introduces N+1 problems in unpredictable moments. This is just a tip of an iceberg, you should be really careful as this mechanism is very fragile and requires great understanding.
