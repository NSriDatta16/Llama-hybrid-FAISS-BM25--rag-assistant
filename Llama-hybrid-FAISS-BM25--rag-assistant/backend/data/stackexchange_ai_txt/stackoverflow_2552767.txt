[site]: stackoverflow
[post_id]: 2552767
[parent_id]: 2134411
[tags]: 
Another virtual memory viewer is VMValidator . Visual data of memory layout, plus data on memory pages and memory paragraphs. As for layout of PE files, I recommend the book Expert .Net 2.0 IL Assembler , chapter 4. Its principally aimed at a managed (.Net) PE file rather than a native one, but it does describe how its all laid out. Then if you want to see some source code (C++) that reads a PE file you should take a look at PE File Format DLL . There is also a GUI that shows you how to use the DLL. The license for the source is open source and not restricted by the GPL. EDIT: Another book recommendation would be Inside Microsoft Windows 2000 (3rd Edition) by David A Solomon and Mark E Russinovitch (the guys that wrote VMMap mentioned in a different answer). This book has sections on Memory management right from the Page Table layout through to more macro scale memory management and another chapter all about various issues to do with Process, Threads and related data structures. Regarding PE layout and Virtual Address layout, a DLL is loaded into a memory area that is on a paragraph boundary (64K on x86), allocated by VirtualAlloc(). The memory protection of the various pages (4K on x86, 8K on x64) inside this is set according to how each section is described in the PE file (read only, read/execute, read/write), etc. Thus knowing the PE file layout is useful, which is why I mentioned it. If you are planning on experimenting with modifying DLLs or performing instrumentation, having a tool to allow you to easily view the DLL contents is very useful. Hence the link to the PE File Format DLL. Its also a good base to start from for your own specific requirements.
