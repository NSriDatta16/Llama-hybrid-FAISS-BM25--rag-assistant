[site]: stackoverflow
[post_id]: 5464777
[parent_id]: 5464714
[tags]: 
An alternative is to use native queries to modify the stored entity directly. If you are using a discriminator column, you could modify the value stored in the column for Class A and change it to the value necessary for class B. You would also need to modify the existing data to match the new class. I am mentioning this as an alternate approach, but I am not saying that it is necessarily the recommended approach. Using this technique can cause issues with caching and can affect any live objects that may exist. The approach you mentioned is one of the cleaner approaches you can use within the JPA space. EDIT This approach works for all inheritance strategies. For JOINED and TABLE_PER_CLASS inheritance you would need write queries that would migrate the data between tables as well as any discriminator column changes that you may need to set based on the strategy used. In the long run, this approach could drastically affect the maintainability of your application. One benefit of the approach you mentioned is that you could leverage reflection to quickly copy over the common fields between the two objects, which simplifies future maintenance.
