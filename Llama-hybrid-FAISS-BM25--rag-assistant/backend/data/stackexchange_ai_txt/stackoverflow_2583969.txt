[site]: stackoverflow
[post_id]: 2583969
[parent_id]: 2567414
[tags]: 
To solve this problem I had to modify the generated classes: Move the XmlTextAttribute from the Text property to the Items property and add the parameter Type = typeof(string) Remove the Text property Remove the textField field As a result the generated code (modified) looks like this: /// [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")] [System.SerializableAttribute()] [System.Diagnostics.DebuggerStepThroughAttribute()] [System.ComponentModel.DesignerCategoryAttribute("code")] [System.Xml.Serialization.XmlTypeAttribute(TypeName="StrucDoc.Paragraph", Namespace="urn:hl7-org:v3")] public partial class StrucDocParagraph { private StrucDocCaption captionField; private object[] itemsField; private string idField; // ...fields for other attributes... /// public StrucDocCaption caption { get { return this.captionField; } set { this.captionField = value; } } /// [System.Xml.Serialization.XmlElementAttribute("br", typeof(StrucDocBr))] [System.Xml.Serialization.XmlElementAttribute("sub", typeof(StrucDocSub))] [System.Xml.Serialization.XmlElementAttribute("sup", typeof(StrucDocSup))] // ...other possible nodes... [System.Xml.Serialization.XmlTextAttribute(typeof(string))] public object[] Items { get { return this.itemsField; } set { this.itemsField = value; } } /// [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")] public string ID { get { return this.idField; } set { this.idField = value; } } // ...properties for other attributes... } Now if I deserialize an XML element where the paragraph node looks like this: first line third line The result is that the item array is read like this: itemsField = new object[] { "first line", new StrucDocBr(), new StrucDocBr(), "third line", }; This is exactly what I need , the order of the items and their content is correct . And if I serialize this again, the result is again correct: first line third line What pointed me in the right direction was the answer by Guillaume, I also thought that it must be possible like this. And then there was this in the MSDN documentation to XmlTextAttribute : You can apply the XmlTextAttribute to a field or property that returns an array of strings. You can also apply the attribute to an array of type Object but you must set the Type property to string. In that case, any strings inserted into the array are serialized as XML text. So the serialization and deserialization work correct now, but I don't know if there are any other side effects. Maybe it's not possible to generate a schema from these classes with xsd.exe anymore, but I don't need that anyway.
