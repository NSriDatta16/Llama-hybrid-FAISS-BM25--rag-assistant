[site]: stackoverflow
[post_id]: 1989130
[parent_id]: 1989097
[tags]: 
In your code the entire body of LoadImages is Invoked right back to the main thread. So you do not have a multi-threaded solution at all, just a complicated one. Here is my stab at it: // untested void LoadImages() { // this.Dispatcher.Invoke(DispatcherPriority.Normal, // new System.Windows.Forms.MethodInvoker(delegate() { IService1 svc = ConnectAndGetObject(); foreach (byte[] imgbytes in svc.GetImageDateWise(datePicker1.DisplayDate, DateTime.Now, "test")) { using (MemoryStream mem = new MemoryStream(imgbytes)) { BitmapImage jpgimage = new BitmapImage(); jpgimage.BeginInit(); jpgimage.CacheOption = BitmapCacheOption.OnLoad; jpgimage.StreamSource = mem; jpgimage.EndInit(); // only invoke the part actually touching the UI this.Dispatcher.Invoke(DispatcherPriority.Normal, new System.Windows.Forms.MethodInvoker(delegate() { Image wpfimage = new Image(); wpfimage.Source = jpgimage; //.Clone(); lbx.Items.Add(wpfimage); lbx.UpdateLayout(); } )); Thread.Sleep(1000); } } // })); }
