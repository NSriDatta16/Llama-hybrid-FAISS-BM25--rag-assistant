[site]: stackoverflow
[post_id]: 3326124
[parent_id]: 3325838
[tags]: 
I don't think it's possible to serialize blocks. I would encapsulate the data into a class, and implement NSCoding protocol. E.g. @interface Promotion :NSObject { // protocol might be better } -(void)calculatePromotion; @end then @interface PromotionX : Promotion { ... data needed for a promotion of type X ... } -initWithDataA: (A*)a andDataB:(B*) b @end now you need to implement various things @implementation PromotionX -initWithDataA: (A*)a and DataB:(B*)b{ ... save a and b to the ivars ... } -(void)calculatePromotion{ ... do something with a and b } #pragma mark Serialization support -initWithCoder:(NSCoder*)coder{ ... read off a and b from a coder ... } -(void)encodeWithCoder:(NSCoder*)coder{ ... write a and b to a coder ... } @end Similarly for the promotion of type Y, Z, etc. Now it can be saved into a file, or NSData , using NSKeyedArchiver . Then you can resurrect the promotion object without referring to the specific type (X,Y,Z) by NSData* data = ... somehow get the data from the file / CoreData etc... Promotion* promotion = [NSKeyedUnarchiver unarchiveObjectWithData:data]; [promotion calculatePromotion]; For serialization in general, read this Apple doc .
