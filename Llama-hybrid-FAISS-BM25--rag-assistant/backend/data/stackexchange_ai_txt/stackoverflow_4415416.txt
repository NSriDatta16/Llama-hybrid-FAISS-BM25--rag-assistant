[site]: stackoverflow
[post_id]: 4415416
[parent_id]: 4415287
[tags]: 
Why not grep from the get-go? @array = grep { !/hi/ } @array; # Or, for *referenced* array @$arrayRef = grep { !/hi/ } @$arrayRef; A small set of notes to clarify questions that arose in comments: This method (or any method using grep including original poster's code) will increase the memory usage of the script by the size of the newly resultant array. E.g. if the script (sans the first array) took up 10MB of memory, the original array took 15MB of memory, and the resulting array took 14MB of memory, then the total memory footprint of your program will increase from 25MB to 39MB while grep is running. Once the grep comlpetes, the memory used by the original array will become available for garbage collection (with some caveats irrelevant to this post). However - and this is important - even if the original 15MB of data are garbage collected, that 15MB will not be returned by Perl to operating system - e.g. the script's memory footprint will remain 39MB and won't drop to 24MB even after garbage collection. On the good side, that freed-up 15MB will be available for memory allocation throughout the rest of your program's lifetime (leaving aside memory fragmentation issues) - therefore, if your script will require allocation of additionnal 1MB, 5MB, or 15MB of memory, its memory footprint will NOT grow beyond the high-point of 39MB. And if it requires 17MB of additional memory, the resulting memory footprint will only be only 41MB, not 56MB. If this memory arithmetic is not satisfactory to you (e.g. if your original array was 500MB and you aren't willing to tolerate the program memory footprint rising to 1GB), then Dallaylaen's answer below is a great algorithm for doing the task without extra memory allocation
