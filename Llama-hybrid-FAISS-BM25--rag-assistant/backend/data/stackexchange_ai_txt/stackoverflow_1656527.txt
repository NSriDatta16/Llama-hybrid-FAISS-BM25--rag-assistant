[site]: stackoverflow
[post_id]: 1656527
[parent_id]: 1656506
[tags]: 
These kinds of questions are largely an irrelevant distraction that some people get obsessed with it. Call it the Cult of Micro-optimization or whatever you like but is it faster to loop up or down? Seriously? You use whichever is appropriate for what you're doing. You don't write your code around saving two clock cycles or whatever it is. Let the compiler do what it's for and make you intent clear (both to the compiler and the reader). Another common Java pessimization is: public final static String BLAH = new StringBuilder().append("This is ").append(3).append(' text").toString(); because excessive concatenation does result in memory fragmentation but for a constant the compiler can (and will) optimize this: public final static String BLAH = "This is a " + 3 + " test"; where it won't optimize the first and the second is easier to read. And how about (a>b)?a:b vs Math.max(a,b) ? I know I'd rather read the second so I don't really care that the first doesn't incur a function call overhead. There are a couple of useful things in this list like knowing that a finally block isn't called on System.exit() is potentially useful. Knowing that dividing a float by 0.0 doesn't throw an exception is useful. But don't bother second-guessing the compiler unless it really matters (and I bet you that 99.99% of the time it doesn't).
