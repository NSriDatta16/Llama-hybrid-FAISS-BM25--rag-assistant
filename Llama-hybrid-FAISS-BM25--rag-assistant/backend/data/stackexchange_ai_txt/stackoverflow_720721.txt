[site]: stackoverflow
[post_id]: 720721
[parent_id]: 720640
[tags]: 
An "typical" MVC implementation would have: views - renders the data for the end user to see and gives them user interface objects to interact with the data (but not to handle that interaction) controller(s) - handles the user interaction and manipulation of data traveling between the views and the model model - handles storage of data and the representation of that data for the application A frequent usage of the MVC pattern would be the HTML/CSS/browser rendering for the view portion of a web application, the PHP/scripting language application level acting as the controller, and MySQL or a similar database acting as the model (which may or may not have some sort of ORM framework in front of it). The truth is, very few people use MVC in exactly this format, and for good reason (in my opinion). Different applications have different needs and design requirements and it's beneficial to bend the patterns to what is needed. These days, "MVC" seems to describe more of the usage of a framework that isolates the layers of an application than the specific model-view-controller pattern. From an employer perspective, what is really being looked for (oftentimes) is that layer of abstraction and the experience that comes from building an n-layered application. There's a fairly sizable mental jump that happens when you move from working in an app that can be divided up not only into vertical features but into horizontal layers of features as well. As a note, skinning is really just an aspect of one particular layer, you can change the data sources at the model layer, the methods of manipulating that data (a new algorithm for instance) at the controller layer and roll them out gradually without having to change the other layers.
