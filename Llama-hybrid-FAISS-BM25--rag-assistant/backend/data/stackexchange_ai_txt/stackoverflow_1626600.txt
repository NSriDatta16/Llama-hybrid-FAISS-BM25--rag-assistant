[site]: stackoverflow
[post_id]: 1626600
[parent_id]: 1626535
[tags]: 
SQL Server has three types of storage: in-row, LOB and Row-Overflow, see Table and Index Organization . The in-row storage is fastest to access. LOB and Row-Overflow are similar to each other, both slightly slower than in-row. If you have a column of NVARCHAR(4000) it will be stored in row if possible, if not it will be stored in the row-overflow storage. Having such a column does not necesarily indicate future performance problems, but it begs the question: why nvarchar(4000)? Is your data likely to be always near 4000 characters long? Can it be 4001, how will your applicaiton handle it in this case? Why not nvarchar(max)? Have you measured performance and found that nvarchar(max) is too slow for you? My recommendation would be to either use a small nvarchar length, appropiate for the real data, or nvarchar(max) if is expected to be large. nvarchar(4000) smells like unjustified and not tested premature optimisation. Update For XML, use the XML data type . It has many advantages over varchar or nvarchar, like the fact that it supports XML indexes , it supports XML methods and can actually validate the XML for a compliance to a specific schema or at least for well-formed XML compliance. XML will be stored in the LOB storage, outside the row. Even if the data is not XML, I would still recommend LOB storage (nvarchar(max)) for something of a length of 1500. There is a cost associated with retrieving the LOB stored data, but the cost is more than compensated by macking the table narrower . The width of a table row is a primary factor of performance, because wider tables fit less rows per page, so any operation that has to scan a range of rows or the entire table needs to fetch more pages into memory, and this shows up in the query cost (is actualy the driving factor of the overall cost). A LOB stored column only expands the size of the row with the width of a 'page id', which is 8 bytes if I remember correctly, so you can get much better density of rows per page, hence faster queries.
