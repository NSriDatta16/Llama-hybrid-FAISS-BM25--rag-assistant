[site]: stackoverflow
[post_id]: 893724
[parent_id]: 891018
[tags]: 
First, to answer your question: The security system is designed to protect GOOD USERS from BAD CODE ; it is explicitly not designed to protect GOOD CODE from BAD USERS . Your access restrictions mitigate attacks on your users by partially trusted hostile code . They do not mitigate attacks on your code from hostile users . If the threat is hostile users getting your code, then you have a big problem. The security system does not mitigate that threat at all. Second, to address some of the previous answers: understanding the full relationship between reflection and security requires careful attention to detail and a good understanding of the details of the CAS system. The previously posted answers which state that there is no connection between security and access because of reflection are misleading and wrong. Yes, reflection allows you to override "visibility" restrictions (sometimes). That does not imply that there is no connection between access and security. The connection is that the right to use reflection to override access restrictions is deeply connected to the CAS system in multiple ways. First off, in order to do so arbitrarily , code must be granted private reflection permission by the CAS system. This is typically only granted to fully trusted code, which, after all, could already do anything . Second, in the new .NET security model, suppose assembly A is granted a superset of the grant set of assembly B by the CAS system. In this scenario, code in assembly A is allowed to use reflection to observe B's internals. Third, things get really quite complicated when you throw in dynamically generated code into the mix. An explanation of how "Skip Visibility" vs "Restricted Skip Visibility" works, and how they change the interactions between reflection, access control, and the security system in scenarios where code is being spit at runtime would take me more time and space than I have available. See Shawn Farkas's blog if you need details.
