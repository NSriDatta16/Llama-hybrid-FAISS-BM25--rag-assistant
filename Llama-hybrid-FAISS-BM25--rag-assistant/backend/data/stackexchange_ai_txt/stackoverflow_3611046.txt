[site]: stackoverflow
[post_id]: 3611046
[parent_id]: 3610943
[tags]: 
A cv-qualifier is a specifier, actually a type specifier. Quoting C++03 7.1: The specifiers that can be used in a declaration are decl-specifier: storage-class-specifier type-specifier function-specifier friend typedef decl-specifier-seq: decl-specifier-seq_opt decl-specifier ... while type specifiers are defined: type-specifier: simple-type-specifier class-specifier enum-specifier elaborated-type-specifier cv-qualifier As for the distinction between the word specifier and qualifier: Each type which is a cv-unqualified complete or incomplete object type or is void has three corresponding cv-qualified versions of its type: a const-qualified version, a volatile-qualified version, and a const-volatile-qualified version. The term object type includes the cv-qualifiers specified when the object is created. The presence of a const specifier in a decl-specifier-seq declares an object of const-qualified object type ; such object is called a const object. The presence of a volatile specifier in a decl-specifier-seq declares an object of volatile- qualified object type; such object is called a volatile object. The presence of both cv-qualifiers in a decl-specifier-seq declares an object of const-volatile-qualified object type; such object is called a const volatile object. The cv-qualified or cv-unqualified versions of a type are distinct types; however, they shall have the same representation and alignment requirements. While it isn't stated obviously, the above paragraph shows the difference. I admit that the definitions could be more strict however.
