[site]: stackoverflow
[post_id]: 2701462
[parent_id]: 2701182
[tags]: 
When dealing with inheritance/polymorphism in Java there are basically two types of casts that you see: Upcasting: Superclass x = new Subclass(); This is implicit and does not need a hard cast because Java knows that everything the Superclass can do, the Subclass can do as well. Downcasting Superclass x = new Subclass(); Subclass y = (Subclass) x; In this case you need to do a hard cast because Java isn't quite sure if this will work or not. You have to comfort it by telling it that you know what you're doing. The reason for this is because the subclass could have some weird methods that the superclass doesn't have. In general, if you want to instantiate a class to call something in its subclass, you should probably just instantiate the subclass to begin with -- or determine if the method should be in the superclass as well.
