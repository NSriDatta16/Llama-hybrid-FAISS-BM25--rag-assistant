[site]: stackoverflow
[post_id]: 916783
[parent_id]: 915778
[tags]: 
I've heard good things about TinyScheme . That having been said, we're using Lua here (at a game development studio, targeting embedded and hand-held systems). Things to note, though -- with Lua specifically, but I think these apply to many of these languages: A custom lightweight small object allocator can gain a lot of performance; many of these lanugages are alloc-heavy. Using pooling or a frame-based allocator may be worth your while, depending on what you can get away with. Depending on the GC strategy used (since most of these languages are garbage collected) you'll want to keep the GC scan area small -- e.g. a small lua heap size overall. Spending some time reorganizing data to get it outside of the domain of the GC (e.g. keeping it C++ side, tagging it somehow so the GC knows to avoid it, etc) can help. Similarly, incremental garbage collection can be a big win. I'd recommend experimenting -- in some cases (small heap) I've found full GC faster than incremental.
