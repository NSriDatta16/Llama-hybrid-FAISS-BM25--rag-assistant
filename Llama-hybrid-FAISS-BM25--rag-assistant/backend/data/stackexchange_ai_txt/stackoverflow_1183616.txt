[site]: stackoverflow
[post_id]: 1183616
[parent_id]: 1183520
[tags]: 
Caches are generally linked up with some sort of distributed replicated cache. For example, GAE uses a custom version of memcached to handle maintaining a shared cache of objects across a cluster, while maintaining the storage state in a consistent state. In general there are lots of solutions for this problem with lots of different tradeoffs to be made in terms of performance and cache coherence (eg, is it critical that all caches match 100% of the time, must the cache be written to disk to protect against loss, etc). Here are some sample products with distributed caching features (most have documentation describing the tradeoffs of various approaches in great detail: memcached - C with lots of client APIs and language ports Ehcache - OSS Java cache, with widespread adoption JBoss Cache - Another popular Java OSS solution Oracle Coherence (formerly Tangosol Coherence) - Probably the best known Java commercial cache. Indexus Cache - A popular .Net OSS solution NCache - Likely the most popular .Net commercial caching solution As you can see, there have been many projects that have approached this problem. One possible solution is to simply share a single cache on a single machine, however, most projects make some sort of replication and distributed failover possible.
