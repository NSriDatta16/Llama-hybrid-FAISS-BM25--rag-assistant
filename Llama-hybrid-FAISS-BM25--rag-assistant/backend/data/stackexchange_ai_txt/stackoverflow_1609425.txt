[site]: stackoverflow
[post_id]: 1609425
[parent_id]: 1602302
[tags]: 
This is similar to this question where the OP wanted to build a recommendation system. In a nutshell, we are given a set of training data consisting of users ratings to movies (1-5 star rating for example) and a set of attributes for each movie (year, genre, actors, ..). We want to build a recommender so that it will output for unseen movies a possible rating. So the inpt data looks like: user movie year genre ... | rating --------------------------------------------- 1 1 2006 action | 5 3 2 2008 drama | 3.5 ... and for an unrated movie X: 10 20 2009 drama ? we want to predict a rating. Doing this for all unseen movies then sorting by predicted movie rating and outputting the top 10 gives you a recommendation system. The simplest approach is to use a k-nearest neighbor algorithm. Among the rated movies, search for the "closest" ones to movie X, and combine their ratings to produce a prediction. This approach has the advantage of being very simple to easy implement from scratch. Other more sophisticated approaches exist. For example you can build a decision tree , fit a set of rules on the training data. You can also use Bayesian networks , artificial neural networks , support vector machines , among many others... Going through each of these wont be easy for someone without the proper background. Still I expect you would be using an external tool/library. Now you seem to be familiar with Bayesian Networks, so a simple naive bayes net, could in fact be very powerful. One advantage is that it allow for prediction under missing data. The main idea would be somewhat the same; take the input data you have, train a model, then use it to predict the class of new instances. If you want to play around with different algorithms in simple intuitive package which requires no programming, I suggest you take a look at Weka (my 1st choice), Orange , or RapidMiner . The most difficult part would be to prepare the dataset to the required format. The rest is as easy as choosing what algorithm and applying it (all in a few clicks!) I guess for someone not looking to go into too much details, I would recommend going with the nearest neighbor method as it is intuitive and easy to implement.. Still the option of using Weka (or one of the other tools) is worth looking into.
