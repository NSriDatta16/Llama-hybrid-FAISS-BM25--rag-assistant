[site]: stackoverflow
[post_id]: 3881982
[parent_id]: 3868938
[tags]: 
I doubt there's a one-to-one mapping between your arbitrary langauge and LLVM's ASTs. That means it is likely that you really want to do this in two stages: Parse your 'arbitrary language' using the best parsing tools you can get to simplify the problem of parsing your language. Use that to build an AST for your language, following standard methods for parser generators producing ASTs. LEX/YACC are OK but there are plenty of good alternatives out there. Its pretty likely you'll need to build a symbol table. Walk the AST of the your parsed langauge to build your LLVM AST. This won't be one-to-one, but the ability to look around the tree near a tree node in your AST to collect information need to generate the LLVM code will likely be extremely helpful. This is a classic style for a simple compiler. I suggest you read the Aho/Ullman Dragon book on syntax directed translation. A day's worth of education will save you months of wasted engineering time.
