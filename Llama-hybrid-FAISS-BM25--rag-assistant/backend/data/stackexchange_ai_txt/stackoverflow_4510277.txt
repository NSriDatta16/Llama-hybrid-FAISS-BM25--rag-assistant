[site]: stackoverflow
[post_id]: 4510277
[parent_id]: 
[tags]: 
"Repeated" data getting populated into Silverlight 4 Gridview when using NHibernate, Linq to NHibernate and Castle.Windsor

The problem I'm currently having is as follows: I have a Gridview in my Silverlight 4 application and it gets populated with data. However, the data is the first entry in an object collection that is brought back from the database and repeated x times in the grid view. When I put a breakpoint on the DAL and the domain service, the data being brought back is correct i.e. it brings back all the distinct objects in the collection. This is not a problem that manifests itself if I'm binding the data to a non Silverlight component. Now for some code, here is how I'm binding the data in the Silverlight application: private void BindData() { _ctx = new ManufacturingDomainContext(); _loadOp = _ctx.Load( _ctx.GetWorkCellLoadGraphDataByIdQuery( "Test", DateTime.Today, DateTime.Today.AddDays( 14 ) ), TestCallBack, null ); } private void TestCallBack(LoadOperation obj) { CustomerGrid.ItemsSource = _loadOp.Entities; } The domain service code is: public IEnumerable GetWorkCellLoadGraphDataById(string workCellId, DateTime startDate, DateTime endDate) { WorkCellLoadGraphData data = new WorkCellLoadGraphData(); var result = ManufacturingDao.Instance.GetWorkCellLoadGraphDataByIdA(workCellId, startDate, endDate); return result; } And finally the DAL code is: public IList GetWorkCellLoadGraphDataByIdA(string workCellId, DateTime startDate, DateTime endDate) { IList results = new List(); using (var session = this.GetSession()) { var criteria = session.CreateCriteria(typeof(WorkCellLoadGraphData)); criteria.SetProjection( Projections.ProjectionList() .Add(Projections.Property(WorkCellLoadGraphData.WorkCellIdPropertyName), "WorkCellId") .Add(Projections.Property(WorkCellLoadGraphData.FromTimePropertyName), "FromTime") .Add(Projections.Property(WorkCellLoadGraphData.DurationPropertyName), "DurationInMinutes") ); criteria.Add(Restrictions.InsensitiveLike(WorkCellLoadGraphData.WorkCellIdPropertyName, workCellId)); criteria.Add(Restrictions.Between(WorkCellLoadGraphData.FromTimePropertyName, startDate, endDate)); criteria.SetResultTransformer(new AliasToBeanResultTransformer(typeof(WorkCellLoadGraphData))); results = criteria.List (); } foreach (var x in results) Logger.Info(x.ToString()); return results; } As a beginner at all the technologies mentioned in the subject line, I'm not sure which area could be the problem. I've tried putting in breakpoints but with the async calls, things are not so easy to follow. Also, I must add that normally, I'd be calling the DAL code from my POCO classes, rather than bypassing the POCO completely. Can anyone help? David
