[site]: stackoverflow
[post_id]: 1734289
[parent_id]: 1734189
[tags]: 
From the Core Data Programming Guide : If the non-supported attribute is an object, then in the managed object model you specify its type as undefined, and that it is transient. When you implement the entity’s custom class, there is no need to add an instance variable for the attribute—you can use the managed object's private internal store. A point to note about the implementations described below is that they cache the transient value. This makes accessing the value more efficient—it is also necessary for change management. If you define custom instance variables, you should clean up these variables in didTurnIntoFault rather than dealloc or finalize. I take this to mean "convenience" and "keeping all your attributes defined in one place - the Managed Object Model". As for MOM versioning, the Core Data Model Versioning and Data Migration Programming Guide says: Core Data’s perspective on versioning is that it is only interested in features of the model that affect persistence. It doesn't clarify its position on transient properties, however. In fact the second bullet point elaborating that paragraph almost sounds like a contradiction. A quick test (new project with a simple "Foo" entity with a "name" attribute, save a file with several foos, add a transient property, run again, and the foos all load, add a new foo, save, close, re-open) shows transient properties in fact are not considered by the versioning system.
