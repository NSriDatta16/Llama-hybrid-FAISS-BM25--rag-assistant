[site]: crossvalidated
[post_id]: 587104
[parent_id]: 
[tags]: 
Ideas to validate predictions on timeseries data

This is no search for the one answer but for ideas, how to deal with this (my) problem in general. So I need to set up a model (e. g. with ANN or RandomForest) to value real estate properties. Since my dataset (property transactions with attributes like "year of construction", "living area", ... AND "date of transaction") is spread over the last five years (decimal date of transaction from 2017.0 to 2021.99) where the real estate prices increased constantly, it is kind of timeseries dataset (it has a clear trend). But, I neither want to predict prices in the past, nor do I want to extrapolate them into the future, since nobody knows how the market will develop. The model will be used to predict prices on date == 2022 (01-01-2022). And for these predictions I need a measure of accuracy. So my "question" is, how can I properly measure the performance of the model in my use case? How to choose or manipulate a testset? A random testset will consist of datapoints mostly in the past. On this testset the model will perform much better than on currently sold real estate property, since it will interpolate. When I train the model e.g. on train.date = 2021, it will perform much weaker than under the real circumstances, since it extrapolates over much longer period (testset from 01-01-2021 to 31-12-2021 instead of 01-01-2022). I also thought of equalizing the price increase by a simple linear regression first so that as a second step I can train and test on a constant price level. But the advantage of Machine Learning techniques is their universal approximation. With a simple linear regression before the Machine Learning, I can not model interactions between price increase and other variables like region or living area. I may lose informations on this dependencies. So can anybody think of better ways to deal with my problem? Maybe somebody knows some good sources on this topic. I hope you get my problem, which I think is also relevant to other use cases.
