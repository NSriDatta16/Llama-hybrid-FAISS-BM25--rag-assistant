[site]: stackoverflow
[post_id]: 3312272
[parent_id]: 3236029
[tags]: 
As @belugabob pointed out already, there shouldn't be any reason for conflicts with jQuery in general while using APIs like the Google Maps JavaScript API. That said, and without seeing a full example, I can only deduce the following: The two code fragments you are presenting seem to stem from two entirely different versions of the Google Maps JavaScript API, namely Google Maps JavaScript API V2 for the former and Google Maps JavaScript API V3 for the latter (see section PolylineOptions object specification there). The V2 API version has been deprecated as of may 19, 2010, but will be supported for a period of 3 years as per Googles respective deprecation policy . The V3 API version does not (yet) support encoded polylines , see Thors answer to point 5 in this migration to V3 thread (see Encoded polylines vs Polyline class for some background on this change, if desired). So in case you need to maintain using encoded polylines you have two options: Continue to use the V2 API, which implies making your first code fragment work as it should; you'll need to provide more details then for us to figure out what's wrong with your code (as jQuery is most likely not to blame here!), two points upfront though: Best guess : the API version mix and your comment regarding belugabobs question is suggesting that you might simply be missing some or including the wrong dependencies! Another observation: at least according to the Interactive Polyline Encoder Utility the encoded points and levels in your first code fragments do not match. Upgrade to the V3 API, which implies decoding your encoded polylines to an Array or MVCArray of LatLng . I'm not aware of an official example, but for a starting point you could look into Esas answer within the Encoded polylines? thread, which is pointing towards the decodeLine() function in the Google Polyline Utility source code as well as a sample decoder. Good luck!
