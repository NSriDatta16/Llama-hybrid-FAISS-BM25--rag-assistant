[site]: stackoverflow
[post_id]: 3794909
[parent_id]: 3794665
[tags]: 
SO is not the best site to ask this kind of question. There's really a large distinction between programming for a PC and programming for an embedded system, other SE sites specialize in physical computing. I got this email from Robert Cartaino on Tuesday: ...Barring any last-minute interest from [chiphacker.com], we will be launching [electronics.stackexchange.com] either tomorrow [Wednesday 9/22] or Thursday. So, go commit to electronics.stackexchange.com here , and browse chiphacker.com while you wait. Take a look at these questions on Chiphacker: How to become an embedded software developer? Steps to learning Arduino Programming PIC Programming What are the best beginner project[s] using an arduino There are a few things you should consider when planning your entry path to embedded systems programming. What do you want to do? What do you know how to do? How fast are you comfortable learning? I've outlined a few options in the following paragraphs. You tagged your question linux-device-driver , does this mean that you want to make a custom device to use in Linux? If you meant embedded-linux , then you're into a larger class of microcontrollers. I suggest that you look at the BeagleBoard , also look at this Chiphacker question for some other options. If you want to do embedded linux, and want to build your own board, you'll first need to build up some experience in simpler levels of embedded systems design. You also tagged your question avr , which is a popular microcontroller class made by Atmel (check out the avrfreaks forum for more info). I started learning embedded systems on the ATmega324p; they really have great documentation, are easy to use, and there are more sites online for the avr than most any other processor. If you want an easier learning curve, I suggest taking a look at the Arduino environment. It uses Wiring , which is very similar to C/C++, and the Arduino can be enhanced with 'shields', which are modules that can be plugged into the Arduino main board to add functionality. This is your Quick Kickstart. A good learning path would be to get familiar with the Arduino, then build your own AVR board (possibly a Linux device, like a joystick), then work with an ARM -based development kit, and finally move on to to building your own embedded linux board. You can skip a few steps if you don't mind a steep learning curve, or stop at any point along the way if a given level's capabilities satisfy your needs. You don't necessarily need a "huge amount of knowledge on electronics to run a program on a microcontroller", it's true, but you should understand some basic things like voltage and current before you try to light an LED or connect two devices. Finally, you said in your question that you've installed the Keil IDE. While this is a fine and rather popular IDE, I'd suggest that you learn using a gcc-based command line toolchain. There are a staggering number of ways in which things that can go wrong when working with embedded systems, and an IDE adds a layer of magic on top of everything that happens. While this can be nice, I'm a strong advocate of minimizing the magic when trying to learn the system. You need to understand the low-level stuff when things don't work automagically. This advice doesn't apply when using the Arduino, which is designed to (and does) make all of the automagical stuff work well.
