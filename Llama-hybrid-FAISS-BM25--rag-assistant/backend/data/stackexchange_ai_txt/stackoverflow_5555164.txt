[site]: stackoverflow
[post_id]: 5555164
[parent_id]: 5548989
[tags]: 
Been playing about and the function below seems to work, although I can't help thinking there's an easier way. This code uses the functx:index-of-string function to find the indexes of all the delimiters. It then tries each to find the first delimiter where everything to the left has an equal number of opening and closing brackets. After this is found, this is repeated with everything to the right of this delimiter. declare function local:tokenizeOutsideBrackets( $arg as xs:string?, $delimiter as xs:string) as xs:string* { if (contains($arg, $delimiter)) then (:find positions of all the delimiters:) let $delimiterPositions := ( functx:index-of-string($arg,$delimiter), string-length($arg)+1 (:Add in end of string too:) ) (:strip out all the fragments that have matching brackets to the left of each delimiter:) let $fragments := for $endPos in $delimiterPositions let $candidateString := substring($arg,1,$endPos - 1) return if (local:hasMatchedBrackets($candidateString)) then $candidateString else () let $firstFragment := $fragments[1] let $endPos := string-length($firstFragment) (:recursively return the first matching fragment, plus the fragments in the remaining string:) return ( $firstFragment, local:tokenizeOutsideBrackets( substring( $arg, $endPos+string-length($delimiter)+1, string-length($arg) - $endPos -(string-length($delimiter)) ), $delimiter ) ) else if ($arg='') then () else ($arg) }; declare function local:hasMatchedBrackets($arg as xs:string) as xs:boolean { count(tokenize($arg,'\(')) = count(tokenize($arg,'\)')) };
