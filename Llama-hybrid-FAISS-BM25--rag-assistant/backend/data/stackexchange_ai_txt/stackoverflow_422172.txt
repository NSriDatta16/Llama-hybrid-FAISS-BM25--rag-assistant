[site]: stackoverflow
[post_id]: 422172
[parent_id]: 421965
[tags]: 
More so than just naming a class, creating an appropriate package structure can be a difficult but rewarding challenge. You need to consider separating the concerns of your modules and how they relate to the vision of the application. Consider the layout of your app now: App VendorDocRequester (read from web service and provide data) VendorDocViewer (use requester to provide vendor docs) I would venture to guess that there's a lot going on inside a few classes. If you were to refactor this into a more MVC-ified approach, and allow small classes to handle individual duties, you might end up with something like: App VendorDocs Model Document (plain object that holds data) WebServiceConsumer (deal with nitty gritty in web service) Controller DatabaseAdapter (handle persistance using ORM or other method) WebServiceAdapter (utilize Consumer to grab a Document and stick it in database) View HelpViewer (use DBAdapter to spit out the documention) Then your class names rely on the namespace to provide full context. The classes themselves can be inherently related to application without needing to explicitly say so. Class names are simpler and easier to define as a result! One other very important suggestion: please do yourself a favor and pick up a copy of Head First Design Patterns. It's a fantastic, easy-reading book that will help you organize your application and write better code. Appreciating design patterns will help you to understanding that many of the problems you encounter have already been solved, and you'll be able to incorporate the solutions into your code.
