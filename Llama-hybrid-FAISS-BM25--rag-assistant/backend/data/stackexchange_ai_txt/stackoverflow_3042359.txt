[site]: stackoverflow
[post_id]: 3042359
[parent_id]: 1273525
[tags]: 
It is highly unlikely that there is a single automated classification system which could do all that you are asking. Additionally, I believe the bug finder application falls outside the scope of such a system since the methods which are being successfully used in that domain largely revolve around syntactic analysis, data flow analysis, and other algorithmic methods highly tailored to issues surrounding software errors. Although machine learning research is being done there, the classification systems in this domain are mostly being used to augment rather than replace analytical methods (so far as I know). For most non-trivial classification problems, careful selection and refinement of the problem representation is typically required in order to get useful and effective results via machine learning. Simply using the existing "raw" data object model without some sort of tailored transformation of the state space tends to lead to either incomplete coverage of the distribution of input data values and/or poor generalization of the learned classifiers. Additionally, other parameters specific to the machine learning method being used may require trial-and-error tweaking to get decent results for a given problem. Not all methods have such parameters, but many do, such as neural networks, genetic algorithms, bayesian inference methods, etc. What you are asking for is a nearly universal machine learning method, which is not something which currently exists. The most viable alternatives that I can see would be to (1) find a subset of different problems for which this would not be the level of capability/sophistication required, or (2) create a system which uses not just one classification technique but rather has a toolbox of different methods that it automatically tests out against a given problem and then uses the one which generates the best classification results under a supervising learning regime. The latter would still be quite a challenge to pull off effectively though, and it does not eliminate the problem of how to represent/transform the state space for the data model.
