[site]: stackoverflow
[post_id]: 1789163
[parent_id]: 1789126
[tags]: 
I don't think there can be a magic bullet. Beauty (or in this case quality) is in the eye of the beholder. With that said, I can give you some suggestions as to some of the ways we ensure code quality. One suggestion can be to include Code Coverage into your assessment of Software Quality. It is one thing to have unittests written for your code, but code coverage helps you identify what code is actually 'covered' by a test, which can sometimes identify use-cases/scenarios that you may not have considered. I recommend you investigate nCover . You may also wish to dig deeper and look into using nDepend ... NDepend is a tool that simplifies managing a complex .NET code base. Architects and developers can analyze code structure, specify design rules, plan massive refactoring, do effective code reviews and master evolution by comparing different versions of the code. I appreciate that these are not TFS features but you can easily 'integrate' them into your visual studio environment using TestDriven.NET This is of course not an exhaustive list of things - you need to find what suits you and gives you the confidence about your code's quality. Hope this helps,
