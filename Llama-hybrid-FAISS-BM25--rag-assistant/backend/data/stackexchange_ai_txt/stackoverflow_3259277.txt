[site]: stackoverflow
[post_id]: 3259277
[parent_id]: 3258457
[tags]: 
My personal preference is to make the bind variables character strings (VARCHAR2), and let Oracle do the conversion from character to it's own internal storage format. It's easy enough (in C) to get data values represented as null terminated strings, in an acceptable format. So, instead of writing SQL like this: SET MY_NUMBER_COL = :b1 , MY_DATE_COL = :b2 I write the SQL like this: SET MY_NUMBER_COL = TO_NUMBER( :b1 ) , MY_DATE_COL = TO_DATE( :b2 , 'YYYY-MM-DD HH24:MI:SS') and supply character strings as the bind variables. There are a couple of advantages to this approach. One is that works around the issues and bugs one encounters with binding other data types. Another advantage is that bind values are easier to decipher on an Oracle event 10046 trace. Also, an EXPLAIN PLAN (I believe) expects all bind variables to be VARCHAR2, so that means the statement being explained is slightly different than the actual statement being executed (due to the implicit data conversions when the datatypes of the bind arguments in the actual statement are not VARCHAR2.) And (less important) when I'm testing of the statement in TOAD, it's easier just to be able to type in strings in the input boxes, and not have to muck with changing the datatype in a dropdown list box. I also let the buitin TO_NUMBER and TO_DATE functions validate the data. (In earlier versions of Oracle at least, I encountered issues with binding a DATE value directly, and it bypassed (at least some of) the validity checking, and allowed invalid date values to be stored in the database. This is just a personal preference, based on past experience. I use this same approach with Perl DBD. I wonder what Tom Kyte (asktom.oracle.com) has to say about this topic?
