[site]: stackoverflow
[post_id]: 5024120
[parent_id]: 
[tags]: 
MVVM: commands vs eventhandlers

I know this has been done to death, but most answers are along the lines of "yeah, you can use eventhandlers in place of commands if you like". This still doesn't solve the problem of whether writing complicated commands is warranted vs just wiring up eventhandlers in code behind to call testable methods in your view model. I don't like commands because they produce a lot of boilerplate code and don't give me any benefit over normal methods, plus some of them (such as drag & drop) are a pain to implement. What's wrong with writing: codebehind: private void Button_Click(object sender, RoutedEventArgs e) { viewModel.LoadData(); } viewmodel: public void LoadData() { //.... } This is equally testable (if not more) as any command is. IMO, as long as UI specific stuff isn't leaking into your business logic, there's really no need to waste time on complicated patterns like that. Thoughts?
