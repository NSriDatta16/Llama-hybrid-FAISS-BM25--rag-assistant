[site]: stackoverflow
[post_id]: 5175045
[parent_id]: 5174278
[tags]: 
In regards to SQL Server: The ordering of the indexes are important depending on how you query and how the indexes are structured. If you create an index on the columns -table_user_id -table_someotherID The index is ordered by the table_user_id first. Example: 1-2 1-5 1-6 2-3 2-5 2-6 For the first record on the index, 1 being the table user id, and 2 being some other value. If you run a query with a where on table_user_id = blah, it will be very fast to use this index, since the table_user_id are indexed in order. But if you run a query that only uses table_someotherID in the WHERE clause, it might not even use this index, as instead of doing a quick seek in the index for the matching value, it will do a rough scan of the index (which is less efficient than a seek). Also SQL Server has a INCLUDE feature that associate the columns you want in the SELECT clause to the index you create on the WHERE or JOIN columns. So to answer your question, it all depends on how you create the indexes and how you query them. You're right not to think about indexing every column, as indexes take up storage and performance hit when you do inserts and updates on the table.
