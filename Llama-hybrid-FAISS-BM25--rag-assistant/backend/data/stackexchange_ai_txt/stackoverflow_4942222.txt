[site]: stackoverflow
[post_id]: 4942222
[parent_id]: 4941618
[tags]: 
What you need, does not have to be as complex as your explanation. To start with, in your model, you will not have to put list of states. So in your model you should have public String State { get; set; } Then in your view - assuming you have a strongly typed view to the AddressList, you have the below for the state Note my extension method StateDropDownList, which could be implemented as follows; this is where the Ioc/DI thing can come in: public static IEnumerable StateDropDownList(this HtmlHelper htmlHelper, HttpContextBase current) { var stateList = current.Application.Get(Constants.General.StateNames) as IEnumerable ; if (stateList == null) { var stateService = ((IIocContainer)current.Application["container"]).Resolve (); stateList = stateService.GetStates(); current.Application.Set(Constants.General.StateNames, stateList); } return stateList; } Note: IIocContainer can be replaced by wither a concrete type or the interface type for the Ioc in use. In addition, I did not use StateID, because you actually used State value (string) in your AddressList model, however, I believe using StateID, can be better and the dropdown will then change to: I believe most you queestions must have been answered by the above, but if not, let me take the questions here now: "Whose responsibility is it to populate the States list? Should the controller do this, having had a service injected into it for getting the states? If so, does this same injection and population logic go in each of my controllers needing to populate an address? Or should it go somewhere else?" -- Ideally you will have this list in your datastore as part of reference data. So, each time you need the list, you can use the StateDropDownList extension method to retrieve it, and then bind to the Dropdown as I have put above. Since the list can be used in many place, you need not put the retrieval in a particular controller.
