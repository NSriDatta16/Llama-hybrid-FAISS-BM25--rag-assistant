[site]: stackoverflow
[post_id]: 1579807
[parent_id]: 1575727
[tags]: 
Simple, slightly ugly: This is a simpler variation of my answer to your other question . I think you're still within the constraints of REST if you do the following. However, I'm curious about what others think about this situation as well, so I hope to hear from others. Your URI will be: /customer/21/credits You POST a credit resource (maybe 5 ) to the URI, the server can then take the customer's balance and += it with the provided value. Additionally, you can support negative credits (e.g. -10 ); Note that /customer/21/credits doesn't have to support all methods. Supporting POST only is perfectly acceptable. However, this gets a little weird if credits aren't a true resource within your system. The HTTP spec says: If a resource has been created on the origin server, the response SHOULD be 201 (Created) and contain an entity which describes the status of the request and refers to the new resource, and a Location header. Technically you're not creating a resource here, you're appending to the customer's balance (which is really an aggregate of all previous credits in the system). Since you're not keeping the credit around (presumably), you wouldn't really be able to return a reference to the newly "created" credit resource. You could probably return the customer's balance, or the itself, but that's a bit unintuitive to clients. This is why I think treating each credit as a new resource in the system is easier to work with (see below). My preferred solution: This is adapted from my answer in your other question. Here I'll try to approach it from the perspective of what the client/server are doing: Client: Builds a new credit resource: 5 POSTs resource to /customer/21/credits POSTing here means, "append this new I'm providing to the list of s for this customer. Server: Receives POST to /customer/21/credits Takes the amount from the request and += s it to the customer's balance Saves the credit and its information for later retrieval Sends response to client: 5 2009-10-16 12:00:23 45.03 This gives you the following advantages: Credits can be accessed at a later date by id (with GET /customer/21/credits/[id] ) You have a complete audit trail of credit history Clients can, if you support it, update or remove credits by id (with PUT or DELETE) Clients can retrieve an ordered list of credits, if you support it; e.g. GET /customer/21/credits might return: 13 ... ... ... Makes sense, since the customer's balance is really the end result of all credits applied to that customer.
