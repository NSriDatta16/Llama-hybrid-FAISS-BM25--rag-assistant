[site]: stackoverflow
[post_id]: 5453625
[parent_id]: 
[tags]: 
Fluent NHibernate automapping: How to custom subclass table name and key column name?

I think this must have been asked before, but I have googled for an hour but couldn't find the answer. Let's say I have the following 2 models: public class Organism { public virtual int Id { get; private set; } } public class Animal : Organism { } I want Fluent NHibernate to create the following tables for me: OrganismTable OrganismId AnimalTable AnimalId This can be easily achieved by using manual mapping: public class OrganismMappinig : ClassMap { public OrganismMappinig() { Table("OrganismTable"); Id(x => x.Id).Column("OrganismId"); } } public class AnimalMapping : SubclassMap { public AnimalMapping() { Table("AnimalTable"); KeyColumn("AnimalId"); } } But I can't get the same result using automapping. I tried to add the following conventions: public class TableNameConvension : IClassConvention, IClassConventionAcceptance { public void Apply(IClassInstance instance) { instance.Table(instance.EntityType.Name + "Table"); } public void Accept(IAcceptanceCriteria criteria) { criteria.Expect(x => x.TableName, Is.Not.Set); } } public class PrimaryKeyNameConvention : IIdConvention { public void Apply(IIdentityInstance instance) { instance.Column(instance.EntityType.Name + "Id"); } } It created these 2 tables: OrganismTable (correct) OrganismId (correct) Animal (wrong, should be "AnimalTable") Organism_id (wrong, should be "AnimalId") I also tried to add: public class ForeignKeyColumnNameConvention : ForeignKeyConvention { protected override string GetKeyName(Member property, Type type) { if (property == null) return type.Name + "Id"; return property.Name + "Id"; } } It created these 2 tables: OrganismTable (correct) OrganismId (correct) Animal (wrong, should be "AnimalTable") OrganismId (wrong, should be "AnimalId") I also tried to add: public class AnimalOverride : IAutoMappingOverride { public void Override(AutoMapping mapping) { mapping.Table("AnimalTable"); mapping.Id(x => x.Id).Column("AnimalId"); } } It created the following tables: OrganismTable (correct) OrganismId (correct) AnimalTable (correct) OrganismId (wrong, should be "AnimalId") This correctly set table name to "AnimalTable" (but this takes too much manual typing, would be great if there is a convention that can get the same result), but failed to set key column name to "AnimalId". Below is the rest of my code: class Program { static void Main(string[] args) { ISessionFactory sessionFactory = Fluently.Configure() .Database(MsSqlConfiguration .MsSql2008.ConnectionString(connectionString) .ShowSql()) .Mappings(m => m.AutoMappings.Add( AutoMap.Assemblies(typeof(Organism).Assembly) .Conventions.AddAssembly(typeof(Program).Assembly) .UseOverridesFromAssembly(typeof(Program).Assembly))) .ExposeConfiguration(BuildSchema) .BuildConfiguration() .BuildSessionFactory(); } static void BuildSchema(Configuration cfg) { new SchemaExport(cfg).Create(false, true); } } Any ideas? Thanks.
