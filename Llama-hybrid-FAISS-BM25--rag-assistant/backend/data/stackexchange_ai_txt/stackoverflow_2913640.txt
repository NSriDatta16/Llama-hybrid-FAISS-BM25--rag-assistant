[site]: stackoverflow
[post_id]: 2913640
[parent_id]: 2683891
[tags]: 
I extended David's approach by allowing a custom key (defaulted to Enter) to be set in an additional property: public static DependencyProperty ButtonKeyProperty = DependencyProperty.RegisterAttached( "ButtonKey", typeof(Key), typeof(Defaults), new PropertyMetadata(Key.Enter, ButtonChanged)); public static void SetButtonKey(DependencyObject dependencyObj, Key key) { dependencyObj.SetValue(ButtonKeyProperty, key); } public static Key GetButtonKey(DependencyObject dependencyObj) { return (Key)dependencyObj.GetValue(ButtonKeyProperty); } I modified the original property to then leverage this property: Key key = GetButtonKey(dependencyObj); if (button.IsEnabled && keyEvent.Key == key) ... So now, for example, I can use Escape as the key if I want (note I changed the named of the classes and properties): ... UI:Defaults.Button="{Binding ElementName=myButton}" UI:Defaults.ButtonKey="Escape" ...
