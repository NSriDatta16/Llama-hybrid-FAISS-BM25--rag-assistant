[site]: stackoverflow
[post_id]: 3363184
[parent_id]: 
[tags]: 
F#: how to elegantly select and group discriminated unions?

Say I have a list of shapes: type shape = | Circle of float | Rectangle of float * float let a = [ Circle 5.0; Rectangle (4.0, 6.0)] How can I then test e.g. a Circle exists in a? I could create a function for each shape let isCircle s = match s with | Circle -> true | _ -> false List.exists isCircle a but I feel there must be a more elegant way in F#, other than having to define such a function for each shape type. Is there? Related question is how to group a list of shapes, based on shape types: a |> seq.groupBy( )
