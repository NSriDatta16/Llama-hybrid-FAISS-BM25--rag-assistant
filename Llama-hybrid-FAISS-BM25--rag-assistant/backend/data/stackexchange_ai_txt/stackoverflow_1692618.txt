[site]: stackoverflow
[post_id]: 1692618
[parent_id]: 1691538
[tags]: 
I realize you already accepted an answer, but I think this deserves some more comments. Sorry to quote you out of order, I'm answering by what I think is important. Instead of creating a 3D engine from scratch I decided to emulate as exactly as I'm able an existing one: World of Warcraft's. However I wanted to focus on the actual 3d and rendering engine, not the interface, so I don't think I will be using it [lua] for this project. From these two snippets, I can tell you that you are not trying to emulate the game engine. Just the 3D rendering backend . It's not the same thing, and the rendering backend part is very small part compared to the full game engine. This, by the way, can help answer one of your questions: World of Warcraft appears to be using both! In fact, normally it uses DirectX, but you can use opengl by starting it with the "-opengl" switch via command line. Yep, they implemented both. The amount of work to do that is non-negligeable, but the rendering back-end, in my experience, is at most 10% of the total code, usually less. So it's not that outraging to implement multiple ones. More to the point, the programming part of a game engine today is not the biggest chunk. It's the asset production that is the bulk (and that includes most game programming. Most lua scripts are considered on that side of things, e.g.) For WoW, OSX support meant OpenGL. So they did it. They wanted to support older hardware too... So they support DX8-level hardware. That's already 3 backends. I'm not privy to how many they actually implement, but it all boils down to what customer base they wanted to reach. Multiple back-ends in a game engine is something that is more or less required to scale to all graphics cards/OSs/platforms. I have not seen a single real game engine that did not support multiple backends (even first party titles tend to support an alternate back-end for debugging purposes). ok, that was a long preface.. Now, my main question is the following: Should I use DirectX, OpenGL, wrapper libraries such as sdl, or what? Well, this depends strongly on what you want to get out of it. I might add that your option list is not quite complete: DirectX9 DirectX10 DirectX11 OpenGL OpenGL >= 3.1 OpenGL ES 1.1 (only if you need to. It's not programmable) OpenGL ES 2.0 Yep, those APIs are different enough that you need to decide which ones you want to handle. If you want to learn the very basics of 3D rendering, any of those can work. OpenGL this plug ). The DX SDKs do come with a lot of samples that help understand the basic concepts, but they also tend to use the latest and greatest features of DX when it's not necessarily required when starting (e.g. using Geometry shader to render sprites...) On the other hand, most GL tutorials tend to use features that are essentially non-performant on modern hardware (e.g. glBegin/glEnd, selection/picking, ... see the list of things that got removed from GL 3.1 or this other plug ) and tend to seed the wrong concepts for a lot of things. What's the most used one in the real world? For games, DirectX9 is the standard today in PC world. By a far margin. However, I'm expecting DirectX11 to grab more market share as it allows for some more multithreaded work. It's unfortunately significantly more complicated than DX9. nobody uses OpenGL anyway (very very few people know about the secret switch at all). Ask the Mac owners what they think. Side question, do you really think hardware vendors would spend any energy in OpenGL drivers if this was really the case (I realize I generalize your comment, sorry)? there are real world usages of it. Not much in games though. And Apple makes OpenGL more relevant through the iphone (well OpenGL ES, really). If it's something usually done, do programmers usually create their own 3d engine "wrapper", It's usually a full part of the engine design. Mind you, it's not abstracting the API at the same level, it's usually more at a "draw this with all its bells and whistles over there". Which rendering algorithm to apply on that draw tends to be back-end specific. This, however, is very game engine dependent. If you want to understand better, you could look at UE3, it just got released free (beer) for non-commercial use (I have not looked at it yet, so I don't know if they exposed the backends, but it's worth a look). To get back to my comment that game engine does not just mean 3D, look at this .
