[site]: stackoverflow
[post_id]: 189185
[parent_id]: 185080
[tags]: 
By "canonical representation" I assume you mean the following: Call programs P and Q equivalent if they "do the same thing" on the same inputs. "Doing the same thing" means that the programs have the same output, and either both programs halt after a finite time or both enter an infinite loop. This equivalence relation defines equivalence classes in the set of all programs. The "canonical representation" of a program P is a program P' belonging to the same equivalence class, and you require that all members of the same equivalence class have the same canonical representation. For Turing-complete languages, a Turing-computable canonical representation would enable you to solve the Halting Problem as follows: first write a program consisting of an infinite loop and find its canonical representation Q . Then for any input program P , first transform it mechanically into a program P 0 that does the same thing except that it produces no output, and then find the canonical representation P 0 ' of this program. If the result is Q , you know that P 0 does not halt, and therefore neither does P . Otherwise, P 0 halts, and so does P . For even more fun, read some of Gregory Chaitin's work on what he calls "elegant" programs.
