[site]: stackoverflow
[post_id]: 5484463
[parent_id]: 5484407
[tags]: 
There are a number of ways you can do this. WinInet First off Windows has a built-in API allowing you to make HTTP requests, which is reasonably simple to use. I use this simple wrapper class to download files using it: /** * Simple wrapper around the WinInet library. */ class Inet { public: explicit Inet() : m_hInet(NULL), m_hConnection(NULL) { m_hInet = ::InternetOpen( "My User Agent", INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, /*INTERNET_FLAG_ASYNC*/0); } ~Inet() { Close(); if (m_hInet) { ::InternetCloseHandle(m_hInet); m_hInet = NULL; } } /** * Attempt to open a URL for reading. * @return false if we don't have a valid internet connection, the url is null, or we fail to open the url, true otherwise. */ bool Open(LPCTSTR url) { if (m_hInet == NULL) { return false; } if (url == NULL) { return false; } m_hConnection = ::InternetOpenUrl( m_hInet, url, NULL /*headers*/, 0 /*headers length*/, INTERNET_FLAG_NO_AUTH | INTERNET_FLAG_NO_CACHE_WRITE | INTERNET_FLAG_NO_COOKIES | INTERNET_FLAG_NO_UI, reinterpret_cast (this)); return m_hConnection != NULL; } /** * Read from a connection opened with Open. * @return true if we read data. */ bool ReadFile(LPVOID lpBuffer, DWORD dwNumberOfBytesToRead, LPDWORD dwRead) { ASSERT(m_hConnection != NULL); return ::InternetReadFile(m_hConnection, lpBuffer, dwNumberOfBytesToRead, dwRead) != 0; } /** * Close any open connection. */ void Close() { if (m_hConnection != NULL) { ::InternetCloseHandle(m_hConnection); m_hConnection = NULL; } } private: HINTERNET m_hInet; HINTERNET m_hConnection; }; Usage of this is very simple: Inet inet; if (inet.Open(url)) { BYTE buffer[UPDATE_BUFFER_SIZE]; DWORD dwRead; while (inet.ReadFile(&buffer[0], UPDATE_BUFFER_SIZE, &dwRead)) { // TODO: Do Something With buffer here if (dwRead == 0) { break; } } } LibCurl If you'd rather avoid Windows-specific APIs then you could do a lot worse than use the libcurl library to get files using a variety of protocols, including HTTP. There is a good sample showing how to retrieve a URL directly into memory (avoiding downloading to disk): getinmemory sample .
