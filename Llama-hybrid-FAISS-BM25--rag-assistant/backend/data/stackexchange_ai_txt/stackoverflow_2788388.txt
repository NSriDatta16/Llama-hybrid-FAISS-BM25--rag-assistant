[site]: stackoverflow
[post_id]: 2788388
[parent_id]: 
[tags]: 
When is #include library required in C++?

According to this reference for operator new : Global dynamic storage operator functions are special in the standard library: All three versions of operator new are declared in the global namespace, not in the std namespace. The first and second versions are implicitly declared in every translation unit of a C++ program: The header does not need to be included for them to be present. This seems to me to imply that the third version of operator new (placement new ) is not implicitly declared in every translation unit of a C++ program and the header does need to be included for it to be present. Is that correct? If so, how is it that using both g++ and MS VC++ Express compilers it seems I can compile code using the third version of new without #include in my source code? Also, the MSDN Standard C++ Library reference entry on operator new gives some example code for the three forms of operator new which contains the #include statement, however the example seems to compile and run just the same for me without this include? // new_op_new.cpp // compile with: /EHsc #include #include using namespace std; class MyClass { public: MyClass( ) { cout ~MyClass(); cout Could anyone shed some light on this, and when and why you might need to #include - maybe some example code that will not compile without #include ?
