[site]: stackoverflow
[post_id]: 2491116
[parent_id]: 2478804
[tags]: 
Come in this morning, and within 10 minutes I had it working! Thanks go to this MSDN forum post Solution is to subscribe to the "DataBindingComplete" event and to then go through each row and set the data source on each ComboBoxCell. It would be nice to have a more elegant solution - but hey - it works! Below is a working version of the code sample I submitted in the original question: public partial class Form1 : Form { DataEntry[] data = new[]{ new DataEntry(){Name = "A", Entries = new []{ "1", "2", "3", "4"}}, new DataEntry(){Name = "B", Entries = new []{ "1", "2", "3"}}}; string[] cols = new[] { "col1", "col2" }; public Form1() { InitializeComponent(); dataGridView1.AutoGenerateColumns = false; var nameCol = new DataGridViewTextBoxColumn(); nameCol.DataPropertyName = "Name"; var entriesCol = new DataGridViewComboBoxColumn(); entriesCol.Name = "Entries"; dataGridView1.Columns.AddRange(new DataGridViewColumn[] { nameCol, entriesCol }); dataGridView1.DataSource = data; dataGridView1.DataBindingComplete += new DataGridViewBindingCompleteEventHandler(dataGridView1_DataBindingComplete); } void dataGridView1_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e) { for (int i = 0; i Entries { get; set; } }
