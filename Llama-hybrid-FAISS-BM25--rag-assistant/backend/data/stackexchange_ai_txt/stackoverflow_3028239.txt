[site]: stackoverflow
[post_id]: 3028239
[parent_id]: 957218
[tags]: 
Beware of Compuware's bounds checker: It is stable up to a point. It costs about 3600 dollars, and about an equal amount to maintain from year to year. But that is peanuts compared to Coverity. I haven't gotten a good test run to work right under Bounds Checker for the last 3 years. That is why I don't use it anymore, and why I don't recommend you use it, except on small, tiny projects. On big enterprise apps, it's just too slow, takes up too memory, and simply stops working. I mean really, do you want your application to take 5 minutes to boot? Do you want your test executions to take 3 times longer? Worst of all, is it's tendency to just lock up. Customer support from Compuware was pretty limited. But bounds checker was sold to another company (can't remember their name) whose website is so aniceptic, sterilized and dry, it makes financial company websites look entertaining. But the killer problem with BoundsChecker is it is 32 bit only. So if you need to profile a large application that takes lots of memory (More than 1 Gig), you are simply out of luck. Bounds Checker will eat up 2 to 3 Gigs of memory from your app. And with 32 bit apps, you well know that 4 Gigs is the tops you get. Coverity is great if you hire a person to babysit it. Seriously Coverity costs more than my house. That's not to mention the person my company would have too hire to babysit the dang thing. It takes 24 hours to do it's magic. And it doesn't do all that much more magic than simply compiling your code at warning level 4, and turning on 'Code Analysis' (In visual studio). I've tried other memory leak tools (for native code). They all SUCK big time, are too complicated, or just plain old lock up the system. I'm so disgusted with the entire field of memory profilers, that I just want to go back to using the debug CRT. That or just write my own. As for code coverage tools, Bullseye wins hands down. Why can't a memory leak detector just work as solidly as bullseye?
