[site]: stackoverflow
[post_id]: 4741628
[parent_id]: 
[tags]: 
Most performant way to inherit structs in C++?

Let's say I have the following: #pragma pack(push,1) struct HDR { unsigned short msgType; unsigned short msgLen; }; struct Msg1 { unsigned short msgType; unsigned short msgLen; char text[20]; }; struct Msg2 { unsigned short msgType; unsigned short msgLen; uint32_t c1; uint32_t c2; }; . . . I want to be able to reuse the HDR struct so I don't have to keep defining the two members: msgType and msgLen. I don't want to involve vtables for performance reasons but I do want to override operator Any ideas on how this can best be handled for pure performance
