[site]: stackoverflow
[post_id]: 1818289
[parent_id]: 1818163
[tags]: 
You can use case expressions in Erlang. The syntax is: case Expression of Pattern1 [when Guard1] -> Expr_seq1; Pattern2 [when Guard2] -> Expr_seq2; ... end To quote Pragmatic Erlang: case is evaluated as follows. First, Expression is evaluated; assume this evaluates to Value . Thereafter, Value is matched in turn against Pattern1 (with the optional guard Guard1 ), Pattern2 , and so on, until a match is found. As soon as a match is found, then the corresponding expression sequence is evaluatedâ€”the result of evaluating the expression sequence is the value of the case expression. If none of the patterns match, then an exception is raised. An example: filter(P, [H|T]) -> case P(H) of true -> [H|filter(P, T)]; false -> filter(P, T) end; filter(P, []) -> []. filter(P , L); returns a list of all those elements X in L for which P(X) is true. This can be written using pattern matching, but the case construct makes the code cleaner. Note that choosing between pattern matching and case expressions is a matter of taste, style and experience.
