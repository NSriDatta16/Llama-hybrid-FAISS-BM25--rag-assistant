[site]: crossvalidated
[post_id]: 583397
[parent_id]: 583379
[tags]: 
As you noticed, standard recommender systems that work like "other users who bought X, bought also Y" won't work for you, because the items are unique. You don't have the many-to-many relations that would enable you to learn that the products are alike based on how users interact with them. What you need to do is to find another way of judging what products are similar to each other, so if a user bought product X, you can recommend them product Y that shares similar characteristics. You can do this either based on some explicit features describing the products or by learning latent representations of the products. The first case needs you to have relevant data on the features of the products, e.g. car brand, color, technical characteristics, etc. The second case would be something like using an autoencoder, using one of the many available neural networks for NLP problems to a latent encoding, or using CNN to translate images to such representation, etc. If you have such a representation of the products (features or learned) the only thing left is using a similarity metric to find similar items to the ones already owned by the user (e.g. nearest neighbors search). Here the latent representation is not learned from the many-to-many relations (the "collaboration"), but this can be (in fact, needs to) learned from the products independently from the users. Nonetheless, you would need to validate how much the representations are useful for making the recommendations. You may also need to be able to represent users using latent vectors, like matrix factorization does, to be able to aggregate users' preferences from many bought products. This wouldn't differ from how other recommender systems work. You are worried about users not having many products bought, but this is a standard cold start problem that appears in all the recommender systems. If a user bought no items then you don't know anything about their preferences, so you can recommend the most popular products globally, or something that "average" users buy, randomize it somehow, etc which basically means that you assign some prior preference to the users that is updated when you gather more data. If they bought a single product, you can base your recommendations only on this product alone but this may backfire. For example, say that a user bought a toilet seat , this doesn't make them a toilet seat fan, you should not recommend more of them. A more reasonable strategy would be to combine your prior preference with new knowledge and create a new representation for the user that lands somewhere in between. I'm deliberately not talking here about specific algorithms, because there are many of them, and I'm not an expert in this area and not the most up-to-date with them. For more information, you can check other questions tagged as recommender-system , books, and papers on this topic. You would easily find many papers on content-based filtering that do this, or models that use the features as an additional source of information that can be an inspiration, or just give you more references.
