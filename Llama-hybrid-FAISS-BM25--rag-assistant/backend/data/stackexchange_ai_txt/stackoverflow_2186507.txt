[site]: stackoverflow
[post_id]: 2186507
[parent_id]: 2169475
[tags]: 
I ended up using the XmlSerializer class. I started by creating one root data class; our game was called Outrage so I named it OutrageGameInstance. This class had one instance of Dog (our main character), a List of possible pickup item types, and a List of levels. Each of these structures had other data variables. Any variables that I didn't want in the XML file, I just wrote [NonSerializable] in the line above the variable declaration. I also found out through experimentation that only public variables are serialized, so I could hide things in private variables. Anyway, I commented out the usual bit in Program.cs and put in some code to create an example instance of OutrageGameInstance, and then serialized it using XmlSerializer. This gave me a file that I could then tweak by hand, and as you see below the syntax is real easy to understand and add to. I switched back the Program.cs file, and put the XML file into the Content project. In the properties for the XML file, change the build action to 'none' (compile made errors) and set it to always copy to output directory. Then it's just a matter of using an XmlSerializer to deserialize the XML file in the Initialize function of the Game class, and use the data however you want! This was my data file, just to show you how easy it was to edit: 0.3 0.3 Bone BoneMunch none 5 0.3 0.3 100 Level1/dog_head Level1/dog_tail 668 Flowers! Level1/background Level1/foreground Bone 50 50 Bone 850 50 Bone 300 250 Bone 600 250 0.3 BackgroundMusic1 Level1/thermo_happy 100 Level1/dog_head Level1/dog_tail 668 Flowers! Level1/background Level1/foreground Bone 50 250 Bone 850 250 Bone 300 50 Bone 600 50 0.3 BackgroundMusic1 Level2/thermo_inshock
