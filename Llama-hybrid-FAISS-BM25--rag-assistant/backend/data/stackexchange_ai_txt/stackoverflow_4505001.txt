[site]: stackoverflow
[post_id]: 4505001
[parent_id]: 4504583
[tags]: 
As you'd probably want to organize the comments according the the workouts that the user had commented on (as opposed to one long undifferentiated string of comments without any context), first I'd suggest using a :has_many => through to aggregate the workouts that the user had commented on, something roughly like (untested, obviously): has_many :commented_workouts, :through => :comments, :class_name => 'Workout', :source => :workout, :uniq => true, :order => "created_at desc" Then you could display the comments in your erb something like: : EDIT: you could also do: y.created_at }.each do |comment| %> just commented on : EDIT: Or like so (note the limit added to the array): class User def watched_comments commented_workouts.map(&:comments).flatten.sort{|x,y| x.created_at y.created_at } end end # and in the erb: just commented on : There's a bit of nasty n+1 query fu going on here that might not be real performant tho. Alternately you could try to get everything done in straight sql which would perform better. Something like (sql ninjas no doubt could do better): EDIT: You can also add a 'limit' option directly in the SQL has_many :watched_comments, :class_name => 'Comment', :finder_sql => 'select * from comments, workouts where comments.workout_id = workout.id and workouts.id in (select workouts.id from workouts, comments where workouts.id = comments.id and comments.user_id = #{id}) order by comments.created_at desc limit 10'
