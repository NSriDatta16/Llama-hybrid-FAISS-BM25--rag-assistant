[site]: stackoverflow
[post_id]: 4505674
[parent_id]: 4505410
[tags]: 
The number of unique combinations of N items taken 2 at a time is N!/(2!(N-2)!) = N(N-1)/2 ~= O(n^2). To perform an action on every combination of two items in a list cannot be achieved with lesser complexity. As far as the collection to use, a List will drop right in to where you had an Array, with one change; List uses a Count property to determine cardinality, as opposed to Length. As for a more elegant way of putting As and Bs together, Linq does have some advantages: var combinations = from a in myThings.Reverse() from b in myThings.TakeWhile(x=>x!=a) select new {a,b}; foreach(var combo in combinations) DoSomething(combo.a, combo.b); This is still going to be slower than your original algorithm, but I think it'll pan out a little faster than cdhowie's because it will iterate through only N extra items (to create the Reverse() enumerable), instead of skipping N(N-1) as the inner foreach of cdhowie's ends up doing.
