[site]: stackoverflow
[post_id]: 1289356
[parent_id]: 1289279
[tags]: 
You might be interested in introductions to MSBuild , the project format of Visual Studio. Whereas in UNIX you have a autoconfig script, and Makefiles, VS2008 allows most configuration through right clicks and menu options. A second area of interest will likely be build configurations . Instead of re-running the configure script on different targets, or for different stacks, you specify targets with the configuration manager. Once you select a new configuration ("x86", or "Release", or custom ones like "Production"), VS churns for a while, as it updates the Intellisense of your new preprocessor definitions, for example, and Resource files. Your "Debug" configuration will likely define the macro "DEBUG", so you can use regions surrounded with #ifdef DEBUG , for example. Visual Studio organizes common groups of source files into "Projects", which can be referenced by one or more "Solutions". Projects establish interdependency on one another, and external libraries. If you look at the structure of the projects in the Microsoft Enterprise Library , you will notice that there are several different Solution files (*.sln) which encompass different groups of common project files. You might have a different solution file, for example, if you want to reduce load/compile time, by not loading the unit test projects with every build. So, analogies: UNIX way: # ./configure # make # nano Makefile # make VS2008 way: # (Set up "Project Properties", Conditional Compilation Symbols, Build Paths, all from GUI application) # (Click Build) # (Change Configuration) # (Click Build)
