[site]: stackoverflow
[post_id]: 3816346
[parent_id]: 3815986
[tags]: 
You can create a method that will reflectively instantiate the property, given an array of PropertyInfos or property string names: var properties = MyClass.GetType().GetProperties(); var values = new [] {"test1", "test55", ... }; for(var i=0; i Be aware this will be much slower than statically assigning the values, as reflective algorithms usually are. It will also compile no matter what the structure of MyClass is, so you'll have to extensively test it at runtime. Another possible method, if your class contains a lot of very similar properties, is to define an indexer. An indexer makes the class look like an indexed collection, like an array or List. It would likely involve a reflective algorithm or switch statement to turn the value into a , though. A far easier and more elegant method would be to have MyClass contain a Dictionary of the properties you want to iterate through, and tie the property accessors and the indexer to the dictionary. All of this basically either hides the list of property assignments, or implements a less efficient way of looping through assignments. If you have hundreds of properties, this will save you some typing, but I would look at refactoring that class to reduce or collect its properties. If you have five properties that get set in many places in the system, I would see if a class that knows how to initialize your class is feasible.
