[site]: stackoverflow
[post_id]: 4132285
[parent_id]: 4131766
[tags]: 
A starting point is to define some simple rules of thumb. A good rule of thumb is to have as little code as possible in the Form class. All code in the Form class should be basic UI mapping really. I personally like using the DAO pattern for organising my database access logic. This pattern neatly encapsulates the code accessing & storing the data, so it can easily be switched and changed. Depending on the complexity of the database, I will normally have 1 DAO per table but for simple databases maybe even just 1 DAO per database. MVC is a popular way to seperate presentation and other logic as well, but may be overkill for a simple project. Use cases are also a good way to encapsulate logic and seperate it out from the form. An example of what a basic framework may look like, see below (note: not complete! read the full DAO article to properly implement it). The point of this code is to show that no database logic is in the Form class, it is a simple one-liner when the button is clicked (or whatever) mapping the UI to an action. If you decided to swap from database storage to file storage, it would not be hard to write a FileMyDAO : IMyDAO class and then have the factory return this instead. Notice that none of the UI code changes if you do this! public interface IMyDAO { void InsertData(int data); } public class SqlMyDAO : IMyDAO { public void InsertData(int data) { throw new NotImplementedException(); } } public class DAOFactory { public static IMyDAO GetMyDAO() { return new SqlMyDAO(); } } public class MyForm : Form { private void Button_Click(object sender, EventArgs e) { DAOFactory.GetMyDAO().InsertData(123); } }
