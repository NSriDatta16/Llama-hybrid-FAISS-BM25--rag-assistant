[site]: stackoverflow
[post_id]: 3189469
[parent_id]: 
[tags]: 
How to have a class spread across many source files?

I am currently working on a PHP project which includes extensive database usage. The basics are: I have a PDOFactory class which follows the Factory pattern and an abstract SQL class with static methods (just a container for those methods) which in turn talks to PDOFactory As I said, the project involves extensive database usage, so the SQL class will contain numerous methods. However, they could be easily grouped, depending on what they deal with (i.e. session storage, user logging on/off, etc.). That would make the SQL class much easier to maintain and so on and forth. And here comes the big question: Can I have the source of the class contents spread across many files? There could be (at least) two possible solutions to this problem: Multiple inheritance, i.e. having classes SQLSession , SQLUser , SQLblahblah and making the SQL class inherit all of them. C++-like pre-processor* directives, i.e. #include SQLSession.php; or something like that. I know there is no multiple inheritance in PHP, so that rules out option No. 1. Is option No. 2 even possible? Or does anybody know of better solutions to this problem? *Or actually pre-pre-processor directives, since PHP is a pre-processor. :) EDIT: Here's an attempt to answer this question, based on Kalium's suggestion. It's a mess to read, but it works. However, I'm gonna stick with Bill's method as it's way cleaner. class SQL { private static $oInstance = false; public static function getInstance() { if( self::$oInstance == false ) { self::$oInstance = new self(); } return self::$oInstance; } public $SESSION; private function __construct() { $this->SESSION = new SESSION; } } // this would be in another file class SESSION { public function printOne() { echo "One"; } } SQL::getInstance()->SESSION->printOne(); // outputs "One" ?>
