[site]: stackoverflow
[post_id]: 1531321
[parent_id]: 1530546
[tags]: 
Maybe you could use some hash function to identify configurations. Since you need to recognize patterns even if they are not at the same position on the board, this hash should not depend on the position of the cells but on the way they are organized. If you store your 2D grid in a 1D array, you would need to find the first filled cell and start calculating the hash from here, until the last filled cell. Ex: ----------------- | | | | | ----------------- | | X | X | | ----------------- | | | X | | ----------------- | | | | | ----------------- ----------------+---------------+---------------+---------------- | | | | | | X | X | | | | X | | | | | | ----------------+---------------+---------------+---------------- |_______________________| | Compute hash based on this part of the array However, there are cases where this won't work, e.g. when the pattern is shifted across lines: ----------------- | | | | X | ----------------- | X | | | | ----------------- Different configuration in 2D. | X | | | | ----------------- | | | | | ----------------- ----------------+---------------+---------------+---------------- | | | | X | X | | | | X | | | | | | | | ----------------+---------------+---------------+---------------- |_______________________| Seems similar in 1D So you'll need some way of dealing with these cases. I don't have any solution yet, but I'll try to find something if my schedule allows it! After thinking a bit about it, maybe you could use two different representations for the grid: one where the lines are appended in a 1D array, and another one where the columns are appended in a 1D array. The hash would be calculated with these two representations, and that would (I think) resolve the problem evoked above.
