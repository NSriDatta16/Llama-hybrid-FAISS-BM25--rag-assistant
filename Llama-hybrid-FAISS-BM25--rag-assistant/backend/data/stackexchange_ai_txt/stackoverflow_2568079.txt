[site]: stackoverflow
[post_id]: 2568079
[parent_id]: 2568010
[tags]: 
M odel V iew C ontroller sounds like it addresses your 3 tiers, but that's not the case. It really organizes how your UI is put together. The Controller is at the middle, and typically (A) does stuff using B usiness objects and (B) from B usiness objects gets the M odel objects to pass to the V iew. The MVC part of your system (the UI functionality) has no idea what's happening on the other side of the business layer. DB? Service calls? Disk IO? Firing lasers? So, MVC-B-? would be an acronym that describes MVC and how it hooks up. Think of the C ontroller at the center, with a line going down to the B usiness objects. The controller will typically get the M odel from the B usiness objects to pass off to the V iew, but the M odel is just data. That's key. The C ontroller is now the smartest part of the system in a sense, but the B usiness objects are still the most powerful. So, the M odel objects are a large part of the communication between the C ontroller and the B usiness objects. Further, every view has a VM ( V iew M odel) object that it takes, that might be a M odel, but might be something constructed by the C ontroller to pass more complicated sets of information to the V iew. So, a controller ( 1 ) takes data from the client and does stuff with the business objects (if necessary), communicating using model object perhaps, and then ( 2 ) get's M odel object(s) from a B usiness object(s), constructs a VM , and gives it to a view (possible several) to render. At first it really will seems like layers and tiers all over the place, especially since getting into MVC is a good time to increase your use of interfaces (see last 3 or 4 Solid principals ) and unit testing . You'll have probably many more files in your project than you otherwise would. Very quickly though you see that is in fact a great way of organizing things. As this "top" part of the system, the MVC part, we just do not care how the M odel objects were constructed or what the B usiness objects do with them. Don't be surprised of course if your Customer model object happens to look a lot like your Customers db table! This is normal and common. However, your customer M odel object and your customer B usiness object will really have separate lives. It's a good time to consider the Repository Pattern . Fight temptation to be lazy and put lots of logic into the C ontroller. Strive at every moment to put concerns in the place where they below. The C ontroller is just for wiring things up. If a lot of code there is necessary in order to construct an adequate VM for the view to use, this is okay, because this is the controllers job. Too often you see business logic or rendering logic in the controller. Put it where it belongs! I tried to balance comprehensiveness with brevity, but you asked a huge question!
