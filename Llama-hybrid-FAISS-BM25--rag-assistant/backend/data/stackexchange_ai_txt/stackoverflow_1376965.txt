[site]: stackoverflow
[post_id]: 1376965
[parent_id]: 
[tags]: 
When to use a SortedList over a SortedDictionary ?

This may appear to be a duplicate of this question , which asks "Whatâ€™s the difference between SortedList and SortedDictionary ?" Unfortunately, the answers do nothing more than quote the MSDN documentation (which clearly states that there are performance and memory use differences between the two) but don't actually answer the question. In fact (and so this question doesn't get the same answers), according to MSDN: The SortedList generic class is a binary search tree with O(log n) retrieval, where n is the number of elements in the dictionary. In this, it is similar to the SortedDictionary generic class. The two classes have similar object models, and both have O(log n) retrieval. Where the two classes differ is in memory use and speed of insertion and removal: SortedList uses less memory than SortedDictionary . SortedDictionary has faster insertion and removal operations for unsorted data, O(log n) as opposed to O(n) for SortedList . If the list is populated all at once from sorted data, SortedList is faster than SortedDictionary . So, clearly this would indicated that SortedList is the better choice unless you need faster insert and remove operations for unsorted data. The question still remains, given the information above what are the practical (real-world, business case, etc.) reasons for using a SortedDictionary ? Based on the performance information, it would imply that there really is no need to have SortedDictionary at all.
