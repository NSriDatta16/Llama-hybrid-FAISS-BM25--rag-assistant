[site]: datascience
[post_id]: 122576
[parent_id]: 
[tags]: 
Siamese Network in TensorFlow employing Triplet Loss

I am constructing a siamese network using tensorflow which uses triplet loss. My inputs are of shape (100,100,1) and I have made a CNN embed_model to so that the output is a tensor with 50 points. Now I have to make a custom Siamese Network, which I have done using this code: class SiameseModel(tf.keras.models.Model): def __init__(self, embed_model, alpha=0.5): super().__init__() self.embed_model = embed_model self.alpha = alpha self.loss_tracker = tf.keras.metrics.Mean(name="loss") def call(self, inputs): return self.embed_model(inputs) def _compute_loss(self, data): anchor, positive, negative = data anchor_embedding = self.embed_model(anchor) positive_embedding = self.embed_model(positive) negative_embedding = self.embed_model(negative) dp = tf.reduce_sum(tf.square(anchor_embedding - positive_embedding), axis=-1) dn = tf.reduce_sum(tf.square(anchor_embedding - negative_embedding), axis=-1) del anchor_embedding,positive_embedding,negative_embedding return tf.maximum(dp - dn + self.alpha, 0.0) def train_step(self, data): with tf.GradientTape() as tape: loss = self._compute_loss(data) gradients = tape.gradient(loss, self.embed_model.trainable_weights) self.optimizer.apply_gradients(zip(gradients, self.embed_model.trainable_weights)) self.loss_tracker.update_state(loss) return {"loss": self.loss_tracker.result()} def test_step(self, data): loss = self._compute_loss(data) self.loss_tracker.update_state(loss) return {"loss": self.loss_tracker.result()} @property def metrics(self): return [self.loss_tracker] siamese_model = SiameseModel(embed_model) The problem I face is INCREASING LOSS IN SUCCESSIVE EPOCHS and I have tried learning rate 0.0001 but even that is not helping. I would really appreciate it if someone can tell me where I am going wrong, I have checked several resource but they are not working on my code. reference notebook I have even tried the following: Different Model structures Different learning rate values None of these help change the outcome
