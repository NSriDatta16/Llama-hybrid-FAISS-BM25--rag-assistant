[site]: stackoverflow
[post_id]: 976741
[parent_id]: 971483
[tags]: 
I'm not sure what is wrong with your class. Here is an extract of a class that does what you want with dbunit and spring 2.5: @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations={ "testContext.xml"}) @TransactionConfiguration @Transactional public class SampleDAOTest { @Autowired private DataSource dataSource; @Autowired private SampleDAO sampleDAO; @Before public void onSetUpInTransaction() throws Exception { //Populate Test data IDatabaseConnection dbUnitCon = new DatabaseConnection(DataSourceUtils.getConnection(dataSource), "DATASOURCE"); //read in from a dbunit excel file of test data IDataSet dataSet = new XlsDataSet(new File("src/test/resources/TestData.xls")); DatabaseOperation.INSERT.execute(dbUnitCon, dataSet); } @Test public void testGetIntermediaryOrganisation() { // Test getting a user User object = sampleDAO.getUser(99L); assertTrue(object.getValue); } } One of the benfits of this method is that you don't need to extend any classes. So you can still have your own hierarchy for tests. If you really want to stick to your current method instead of using the @before annotation I thinnk you need to overide the below method and put your setup code in there. @Override public void onSetUpInTransaction() throws Exception {...} Hope this helps
