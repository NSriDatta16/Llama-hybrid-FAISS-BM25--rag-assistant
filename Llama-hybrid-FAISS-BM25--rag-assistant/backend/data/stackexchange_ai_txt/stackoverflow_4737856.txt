[site]: stackoverflow
[post_id]: 4737856
[parent_id]: 
[tags]: 
How can I get a Java program in Eclipse to use multiple processing cores?

I'm doing a science fair project on how adding cores to a processor affects computing speed. I programmed my own benchmark to do this in Java with the Eclipse platform. My problem is that when the program runs, there is very little difference between the time it takes the computer when it is only using 1 processing core versus how long it takes when it is using all 6. Is there a way I can get the program to make use of additional processing cores so that it runs faster on 6 cores? Here is a copy of the code: import java.util.Calendar; import java.text.SimpleDateFormat; import java.util.Scanner; import java.text.*; public class SciFair { /** * N. Roberts * 1/13/11 * Science Fair 2011 */ public static String now(String dateFormat) { Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat(dateFormat); return sdf.format(cal.getTime()); } public static void main(String[] args) { Scanner dataIn = new Scanner(System.in); DecimalFormat timeInSeconds = new DecimalFormat("##.###"); System.out.println("Are you ready to begin the benchmark? "); String response = dataIn.nextLine(); double num = 5832544225416546445465465465465465448412168546725.2655236355335649499923164684654345649874181221173246189579162421579584572121334216957951462175918894199993642446445548521652158975; double endNum = 0; if(response.equals("Yes") || response.equals("yes") || response.equals("Ok") || response.equals("ok")) { System.out.println("Benchmark starting at " + SciFair.now("H:mm:ss:SSS") + "."); String startTimeHours = SciFair.now("H"); String startTimeMinutes = SciFair.now("mm"); String startTimeSeconds = SciFair.now("ss"); String startTimeMilliseconds = SciFair.now("SSS"); double startTimeHoursNumFormat = Double.valueOf(startTimeHours.trim()).doubleValue(); double startTimeMinutesNumFormat = Double.valueOf(startTimeMinutes.trim()).doubleValue(); double startTimeSecondsNumFormat = Double.valueOf(startTimeSeconds.trim()).doubleValue(); double startTimeMillisecondsNumFormat = Double.valueOf(startTimeMilliseconds.trim()).doubleValue(); double startHoursInSeconds = (startTimeHoursNumFormat * 3600); double startMinutesInSeconds = (startTimeMinutesNumFormat * 60); double startMillisecondsInSeconds = (startTimeMillisecondsNumFormat / 1000); double startTotalSeconds = (startHoursInSeconds + startMinutesInSeconds + startTimeSecondsNumFormat + startMillisecondsInSeconds); for(double numberRun = 0; numberRun
