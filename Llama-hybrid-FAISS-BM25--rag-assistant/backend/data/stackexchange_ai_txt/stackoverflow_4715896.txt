[site]: stackoverflow
[post_id]: 4715896
[parent_id]: 
[tags]: 
Web server: reading http request from stream

Greetings! I've been fooling around with C# (again) and now i've stucked with simple HTTP web server implementation. Honestly, i don't want to get along with HTTP specification - i just need to write a very tiny (read as simple ) HTTP web server. And i've encouraged this problem: client sends request to the server and then server parses it, runs some actions, builds response and sends it back to client. That seems to be obvious (for me at least). Here's what i've got so far: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Net; using System.Net.Sockets; using System.IO; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { TcpListener listener = new TcpListener(IPAddress.Any, 80); listener.Start(); Socket sock = listener.AcceptSocket(); try { Stream s = new NetworkStream(sock); s.ReadTimeout = 300; StreamReader reader = new StreamReader(s); StreamWriter writer = new StreamWriter(s); writer.AutoFlush = true; Console.WriteLine("Client stream read:\r\n"); string str = "none"; while (sock.Connected && !reader.EndOfStream && str.Length > 0) // here's where i'm stuck { str = reader.ReadLine(); Console.WriteLine("{0} ({1})", str, str.Length); } Console.WriteLine("Sending response...\r\n"); { string response = " 404: Page Not Found "; writer.WriteLine("HTTP / 1.1 404 Not Found"); writer.WriteLine("Content-Type: text/html; charset=utf-8"); writer.WriteLine("Content-Length: {0}", response.Length); writer.WriteLine("\r\n{0}", response); } Console.WriteLine("Client: over\r\n"); s.Close(); sock.Close(); } catch (Exception e) { Console.WriteLine("Exception: {0}\r\nTrace: \r\n{1}", e.Message, e.StackTrace); } Console.ReadKey(); } } } But i've met an "underwater stone": i'm reading request via input stream, so input data flow will be terminated when client close page in his browser (let's talk about the most obvious actions, excluding curl, w3 and other "geek-stuff"). So, the question is: how to determine request' end? E.g. when should i stop reading request data and start sending response?
