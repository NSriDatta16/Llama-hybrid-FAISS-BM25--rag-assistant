[site]: stackoverflow
[post_id]: 831630
[parent_id]: 
[tags]: 
Is my Unit Test Sufficient?

I am looking at the Unit Tests I wrote for an email service (using SMTP) and I am wondering if one test in particular is sufficient. Here is a snippet of my email service: [PluginFamily("EmailService")] public interface IEmailService { Boolean SendEmail( string toAddress, string fromAddress, string bccAddress, string ccAddress, string subject, string body, bool html ); } [Pluggable("EmailService")] public class EmailService : IEmailService { private IConfigurationReader _configReader; public EmailService(IConfigurationReader configurationReader) { _configReader = configurationReader; } public bool SendEmail( string toAddress, string fromAddress, string bccAddress, string ccAddress, string subject, string body, bool isHtml ) { MailMessage email = new MailMessage(); try { if (_configReader.TestMode) { toAddress = _configReader.TestEmailAddress; } } //send email here } } I am mocking IConfigurationReader (basically a wrapper for ConfigurationManager) and setting the test mode to true in order to test if I can send an email in my "test mode". So my unit test looks something like this (This is one of my unit tests on the method. I have 100% code coverage): [Test] public void Validate_Send_Email_In_Test_Mode() { bool result; MockRepository mockRepository = new MockRepository(); var mockConfigReader = mockRepository.StrictMock (); using (mockRepository.Record()) { SetupResult.For(mockConfigReader.TestMode).Return(true); SetupResult.For(mockConfigReader.TestEmailAddress).Return("test@test.com"); SetupResult.For(mockConfigReader.EmailContentLocation).Return("test"); SetupResult.For( mockConfigReader.SmtpHost ).Return( "test.mail.com" ); } ObjectFactory.InjectStub(typeof(IConfigurationReader), mockConfigReader); emailService = ObjectFactory.GetInstance (); using (mockRepository.Playback()) { result = emailService.SendEmail( "testemail@test.com", "test@test.com", "", "", "this is a unit test - config in test mode", "body of unit test", true ); } Assert.That( result, Is.True ); ObjectFactory.ResetDefaults(); } Is this sufficient enough for a unit test? What can I do to improve it? I am concerned that just checking that my method is returning true is not a sufficient unit test.
