[site]: stackoverflow
[post_id]: 4066594
[parent_id]: 4066520
[tags]: 
Since Projects are first class citizens of your app, they deserve the best attention--probably not a good idea to try to cram some aspect of them onto a permission model which has a different purpose. Since Projects can have many users and users can have many projects, you'll need to add a many-to-many table model between them. Eg class Project "User", :through => :project_orders, :order => "project_orders.last_viewed DESC" class ProjectOrder 10000 # don't use field name of 'order' # last_viewed class User has_many :project_orders, has_many :orders, # The user's projects :through => :project_orders, :order => "project_orders.position, project_orders.last_viewed DESC" You'd then be able to list the User's orders by last_viewed (default), with an override possible by setting the position field. Since you want the rows with a position setting to sort first we use a very high number as the default position value. (Definitely a hack) Added in response to comment about using nil as the default for position: MySQL Order by clause puts null values first, not last, with an ascending sort. So if you want to override the last_viewed sort by explicitly setting the position field, you want the position fields that are set explicitly to have smaller values than the rows with the default. So we use a very high default, eg 10,000. (Figuring that users who want to explicitly order 10,000 projects will already have other issues to deal with.) The other way to do it is to have the default be nil or 0, and sort the position field descending. But since the goal is to be able to explicitly override the last_viewed order, it is easier to think of position of 1 being the first listed, 2 being second listed, etc. Also, remember that simply adding project_order records will sort them correctly. The most recently viewed will be shown first. The sort by position clause will have no effect in the default case since all of the records for a user will have the same default value for position. Sorting two records by position and last_viewed DESC is the exact same as sorting by only last_viewed DESC if both records have the same value for position. Re: show most recently viewed first. -- Correct, you've spotted a bug. I should have included the DESC keyword. (Now fixed.)
