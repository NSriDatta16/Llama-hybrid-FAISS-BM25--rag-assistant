[site]: stackoverflow
[post_id]: 3761471
[parent_id]: 3761380
[tags]: 
I would recommend you writing a custom view engine. This way your structure might look like this: Views Home Index.aspx // default version UA1 Index.aspx // version for user agent 1 UA2 Index.aspx // version for user agent 2 Shared And then have a custom view engine: public class CustomViewEngine : WebFormViewEngine { public override ViewEngineResult FindView(ControllerContext controllerContext, string viewName, string masterName, bool useCache) { string ua = controllerContext.HttpContext.Request.UserAgent; if (ua == "UA String 1") { return base.FindView(controllerContext, "UA1/" + viewName, masterName, useCache); } if (ua == "UA String 2") { return base.FindView(controllerContext, "UA2/" + viewName, masterName, useCache); } return base.FindView(controllerContext, viewName, masterName, useCache); } } And finally register the view engine in Application_Start : ViewEngines.Engines.Clear(); ViewEngines.Engines.Add(new CustomViewEngine()); This way your controller and actions are strictly the same and based on the User-Agent HTTP header the proper view will be used. All you need to do when you have to handle UA3 is to add the corresponding view in a UA3 folder. No need to touch the controllers and models.
