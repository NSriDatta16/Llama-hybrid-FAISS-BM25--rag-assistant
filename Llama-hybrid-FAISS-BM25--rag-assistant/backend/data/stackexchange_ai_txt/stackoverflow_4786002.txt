[site]: stackoverflow
[post_id]: 4786002
[parent_id]: 4751731
[tags]: 
Well this is possible, but not a small amount of work. It's generally easier to create the appdomain and set configuration from the managed world and then create a small 'thunking' layer in managed code to wrap it all up for unmanaged clients. But since that isn't what you asked for, here is how you could accomplish your goal: First you will need to import the mscorelib: #include #import raw_interfaces_only no_smart_pointers high_property_prefixes("_get","_put","_putref") Then bind to the runtime: ICorRuntimeHost runtimeHost; hr = CorBindToRuntimeEx( NULL, //Retrieve latest version by default L"wks", //Request a WorkStation build of the CLR STARTUP_LOADER_OPTIMIZATION_SINGLE_DOMAIN | STARTUP_CONCURRENT_GC, CLSID_CorRuntimeHost, IID_ICorRuntimeHost, (void**)&runtimeHost ); Now startup the CLR and create an AppDomainSetup instance. hr = runtimeHost->Start(); IAppDomainSetup pSetup; hr = runtimeHost->CreateDomainSetup(&pSetup); Now fill in the setup information as appropriate: hr = pSetup->put_ApplicationBase(_bstr_t(thisFile)); hr = pSetup->put_ConfigurationFile(_bstr_t(configFile)); Finally create the domain: hr = __gRuntimeHost->CreateDomainEx(L"ISAPI.Net", pSetup, NULL, &pDomain); Now you can optionally instantiate an object and call methods: hr = pDomain->CreateInstanceFrom(_bstr_t(assemblyFile), _bstr_t("Namespace.ClassName"), &pObjectHandle); VARIANT vtUnwrapped; hr = spObjectHandle->Unwrap(&vtUnwrapped); IDispatch pDisp = vtUnwrapped.pdispVal; DISPID dispid; DISPPARAMS dispparamsNoArgs = {NULL, NULL, 0, 0}; hr = pDisp->GetIDsOfNames ( IID_NULL, szMemberName, 1, LOCALE_SYSTEM_DEFAULT, &dispid ); hr = pDisp->Invoke ( dispid, IID_NULL, LOCALE_SYSTEM_DEFAULT, DISPATCH_METHOD, &dispparamsNoArgs, NULL, NULL, NULL ); Obviously the code fragments above are incomplete; however, if your adept enough at C++ COM the above should provide you with enough information to work it out. You should note that this is the 'old' (1.x) hosting interfaces which I can attest continue to work through 3.5, I have no idea how/if these work on 4.0. As of .Net 2.0 new hosting interfaces were introduced. I've never had need of anything beyond the 1.x versions, so I never bothered to upgrade any hosting code. see also: Hosting Overview
