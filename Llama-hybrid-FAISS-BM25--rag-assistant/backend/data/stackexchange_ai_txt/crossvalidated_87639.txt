[site]: crossvalidated
[post_id]: 87639
[parent_id]: 85690
[tags]: 
Here is one example of implementing a basic macro substitution system for JAGS scripts. Explanation of the system Define a function that takes as arguments any optional elements of the script. For any aspects of the script that vary across argument values, record a macro token. This should be some unique text. Starting and ending with some symbols may assist to make this unambiguous. For each macro token include code for what the replacement string should be under all possible combinations of the function arguments. Replace the macro tokens with appropriate placement text based on arguments. The code below provides one example of how macros could be specified and how to apply the macros to the raw script (suggestions for doing this more elegantly are welcome). The function returns a replaced model string that could if necessary be passed to a textConnection function for use with rjags. I like this system for a few reasons: the raw script is easy to read the resulting script has proper indentation you don't have to worry about errors related to commands appearing on the same line Example Specifically, this example, aims to allow the user to fit a particular type of multilevel nonlinear model. It is designed to allow for three functional forms: a two parameter power, three parameter power, and a three parameter exponential. The macro section structures macros as a list of lists. The top level list contains one element for each macro token. For each macro token, there is the macro token text, and the conditional replacement text. Finally, a for loop applies all the macro replacements to the raw script. See below (scrolling is required): jags_model Demonstration Thus, we can produce the processed JAGS model with x And if we want to view the resulting model, we can do cat(x) which results in model { # Model for (i in 1:length(y)) { mu[i]
