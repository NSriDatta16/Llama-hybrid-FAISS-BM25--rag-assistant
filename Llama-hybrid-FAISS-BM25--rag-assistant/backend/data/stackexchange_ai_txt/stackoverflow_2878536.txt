[site]: stackoverflow
[post_id]: 2878536
[parent_id]: 
[tags]: 
Fastest 2D frame rate possible with android NDK, my try included, better options available?

Fastest 2D frame rate possible with android NDK, my try included, better options available? I used the NDK and OpenGL ES 2.0 to display a frame as a texture on a GL_TRIANGLE_STRIP. This was done on a HTC Desire, same hardware as Nexus One. I tried to load multiple GL_RGBA textures and switch between the textures, because the normal fill rate with a single texture was disappointingly low: 1 texture: 4.78 fps 2 textures: 19.68 fps 3 textures: 20.18 fps 4 textures: 28.52 fps 5 textures: 29.01 fps 6 textures: 30.32 fps I think even 30.32 fps RGBA is still too slow. So is this the way to go to achieve the fastest 2D frame rate (with same quality)? Any suggestions to speed it up? Here is the relevant code, it is based on the hello-gl2 NDK example: === GL2JNIView.java : init(false, 0, 0); ConfigChooser(5, 6, 5, 0, depth, stencil); === gl_code.cpp : #include #include #include #include #include typedef unsigned char byte; static int view_width, view_height; static byte* framebuffer; static int framebuffer_size; static GLuint texture_id[6]; static const char* vertexSrc = "precision highp float;\n" "precision highp int;\n" "attribute vec4 vertexCoords;\n" "attribute vec2 textureCoords;\n" "varying vec2 f_textureCoords;\n" "void main() {\n" " f_textureCoords = textureCoords;\n" " gl_Position = vertexCoords;\n" "}\n"; static const char* fragmentSrc = "precision highp float;\n" "precision highp int;\n" "uniform sampler2D texture;\n" "varying vec2 f_textureCoords;\n" "void main() {\n" " gl_FragColor = texture2D(texture, f_textureCoords);\n" "}\n"; static GLuint shaderProgram; static GLint attrib_vertexCoords; static GLint attrib_textureCoords; static GLint uniform_texture; static const GLfloat vertexCoords[] = {-1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, -1.0}; static const GLfloat textureCoords[] = {0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0}; JNIEXPORT void JNICALL Java_com_android_gl2jni_GL2JNILib_init(JNIEnv * env, jobject obj, jint width, jint height) { view_width = width; view_height = height; framebuffer_size = 4*view_width*view_height; framebuffer = (byte*)calloc(framebuffer_size, sizeof(byte)); for (int i = 0; i 1e7) { __android_log_print(ANDROID_LOG_INFO, "libgl2jni", "fps: %f", ((float)frame_count-last_frame_count)/(clock()-last_time)*1e6); last_time = clock(); last_frame_count = frame_count; } static byte val = 0; val++; if (val == 256) val = 0; for (int i = 0; i
