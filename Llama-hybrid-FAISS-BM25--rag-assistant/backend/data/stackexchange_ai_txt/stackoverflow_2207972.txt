[site]: stackoverflow
[post_id]: 2207972
[parent_id]: 2203975
[tags]: 
While I feel writing this code is a waste of time, given the lack of response to comments by the OP, the least I can do is show how the code example by Le-Savard can be fixed so that muliple clicks of the up or down choice on the context menu ... assuming the context menu is not auto-closed each time and the user is forced to select the same node over and over again ... will do the right thing with the orignally selected node, and not create un-intended side effects : public static class Extensions { public static void MoveUp(this TreeNode node) { TreeNode parent = node.Parent; if (parent != null) { int index = parent.Nodes.IndexOf(node); if (index > 0) { parent.Nodes.RemoveAt(index); parent.Nodes.Insert(index - 1, node); // bw : add this line to restore the originally selected node as selected node.TreeView.SelectedNode = node; } } } public static void MoveDown(this TreeNode node) { TreeNode parent = node.Parent; if (parent != null) { int index = parent.Nodes.IndexOf(node); if (index Of course this fix, still does not address the fact that in the example code that multiple root nodes cannot be moved (since they are 'parentless) : that's easiliy fixable. Nor does it address the more interesting case where moving up a top child-node means you make some interpretation of where that "promoted" child code should go : exactly the same "strategic choice" is involved where you "move down" the last child node of a parent node and are thus required to decide where it should go. In Dynami Le-Savard's code : these cases are just ignored. However, it is a design-choice to restrict child node from only being moved within their parent nodes Nodes collection : a design choice that may be perfectly suitable for one solution. Similarly, it is a design choice to force a user to select a node and context-click to get a context menu that allows a choice of moving up or down every single time they want to move it : that's not a design choice I'd make : I'd be using drag-and-drop here or buttons that allow repeated rapid-fire relocation of any selected node anywhere in the tree. By the way I like Dynami Le-Savard's use of extensions here.
