[site]: stackoverflow
[post_id]: 4633122
[parent_id]: 4633000
[tags]: 
#define SIZEOF_FOO 7 without using #pragma pack should not be used at all. The reason being, when you call send (or any equivalent) function passing a variable of your struct type and pass the data size as 7 , the send function will send only the first 7 bytes of data, and when you receive this data at the other end, you will definitely mess a lot of things in your code. Using #pragma pack directives will change the alignment of member of your struct amd you will certainly save a few bytes of data over network transfer, but if you think in terms of optimization/performance, these few bytes are negligible. Although, most of the applications (that I have seen) use #pragma pack for packing struct members, but that totally depends on your requirement. One major problem with using a #define SIZEOF_FOO 7 is that, if you port your code to some other platform/architecture, the actual size of your structure might not be same (7 bytes) and then you will either have to use a platform dependent macro or come up with some other alternative. So in short, you should always use sizeof instead of using #define SIZEOF_FOO .
