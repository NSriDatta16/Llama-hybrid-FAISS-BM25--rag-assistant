[site]: stackoverflow
[post_id]: 1852257
[parent_id]: 1852186
[tags]: 
It's not Go, but in Lua, multiple return is an extremely common idiom for handling exceptions. If you had a function like function divide(top,bottom) if bottom == 0 then error("cannot divide by zero") else return top/bottom end end Then when bottom was 0, an exception would be raised and the program's execution would halt, unless you wrapped the function divide in a pcall (or protected call) . pcall always returns two values: the first is result is a boolean telling whether the function returned successfully, and the second result is either the return value or the error message. The following (contrived) Lua snippet shows this in use: local top, bottom = get_numbers_from_user() local status, retval = pcall(divide, top, bottom) if not status then show_message(retval) else show_message(top .. " divided by " .. bottom .. " is " .. retval) end Of course, you don't have to use pcall , if the function you're calling already returns in the form of status, value_or_error . Multiple return has been good enough for Lua for several years, so while that doesn't ensure that it's good enough for Go, it is supportive of the idea.
