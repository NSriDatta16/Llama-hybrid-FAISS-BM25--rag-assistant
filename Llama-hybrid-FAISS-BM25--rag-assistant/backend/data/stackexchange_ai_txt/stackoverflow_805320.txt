[site]: stackoverflow
[post_id]: 805320
[parent_id]: 803878
[tags]: 
As an aside - note that the IEnumerable approach is essentially what the LINQ providers (LINQ-to-SQL, LINQ-to-Entities) do for a living. The approach has advantages, as Jon says. However, there are definite problems too - in particular (for me) in terms of (the combination of) separation | abstraction. What I mean here is that: in a MVC scenario (for example) you want your "get data" step to actually get data , so that you can test it works at the controller , not the view (without having to remember to call .ToList() etc) you can't guarantee that another DAL implementation will be able to stream data (for example, a POX/WSE/SOAP call can't usually stream records); and you don't necessarily want to make the behaviour confusingly different (i.e. connection still open during iteration with one implementation, and closed for another) This ties in a bit with my thoughts here: Pragmatic LINQ . But I should stress - there are definitely times when the streaming is highly desirable. It isn't a simple "always vs never" thing...
