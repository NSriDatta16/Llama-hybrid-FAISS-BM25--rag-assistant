[site]: stackoverflow
[post_id]: 5164510
[parent_id]: 
[tags]: 
Module vs. Controller

I'm writing the bits and pieces for a ( oh no, another ) PHP framework, as a learning experience, and hopefully for future use on smaller projects. I've done a fair bit of reading, namely the Reference Docs of existing frameworks. I see the word Module thrown around alot, and from my reading and previous experience, a Module is a concept applied to divide related code (Views, Controllers, Models, etc.) I'm curious, how does SO see a Module in this context? (context being MVC web application architecture, or similar application development pattern) I'm trying to determine how best to apply this, as (I believe) it fits my current predicament. For a music website a module would be seen as an Artist , Producer , etc., whereas the Controllers would be Profile , Media , etc. This leaves actions of course, such as View , or Edit . This all seems good, because now I can do routing like so: 'Artist/Profile/View/{ALIAS}' +- Module : Artist +- Controller : Profile +- Action : View //this may be accessed via music.com/artist/{alias} //defaulting the Controller and Action ..but I'm trying to figure out how the Module concept fits here, specifically, how I would organize or modify my Controllers to accommodate. This is the sort of file system layout I'm thinking of; +- Root +- 'index.php' +- 'api.php' +- Modules | +- Public | | +- Controllers | | +- Views | | | +- User | | +- Controllers | | +- Views | | | +- Artist | | +- Controllers | | +- Views | | | +- Producer | | +- Controllers | | +- Views | | | +- Venue | | +- Controllers | | +- Views | | | +- Administrator | +- Controllers | +- Views | +- Models +- Config +- ...
