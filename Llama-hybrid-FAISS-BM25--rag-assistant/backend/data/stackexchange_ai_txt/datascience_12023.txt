[site]: datascience
[post_id]: 12023
[parent_id]: 11812
[tags]: 
As you (OP) further clarified, you've got equipment sensor data. Your first time-series was recorded when you knew the machine was in good operating condition. Later, you sample another time series, and you want to know if anything has changed. This is called anomaly detection. You described the time-series as stochastic, meaning there is an element of randomness. There are several interesting methods you can use to find the probability that the two series were generated by the same process (nothing has changed). I'm afraid the answers I've read to your question so far would only work in special cases, and are perhaps too complicated for the job. The general concept is that there is an underlying probability distribution (described by a 'probability density function' or PDF) which generates your time-series. When the machine gets out of order, that PDF changes. You test if the new distribution is different from the old one. You should use a completely general approach which does not assume a particular form of the PDF (Gaussian, Poisson, Beta, etc). First, you can always construct and graph the empirical cumulative distribution function or ECDF for each time-series and compare them visually. This requires a qualitative judgement on what "different" looks like. To make it quantitative, a test from classical statistics is a K-S test . It's a one-liner in R. The disadvantage of this test is, well, it's not Bayesian. :) There are other issues too. That being said, I use the K-S test all the time because it's so fast and easy. There are many caveats here. You'll probably want to use the first-differences (changes) of sensor data instead of the values themselves. If you have more than a few sensors, you'll probably want to use dimensionality reduction such as principal component analysis (PCA) as well. I much prefer a Bayesian A-B test. This requires you to construct models of the PDFs to which your data are applied. This generates a PDF which most likely explains your data. In fact, it generates a PDF for each parameter in your PDF. You look to see how much overlap you have in the parameters. Not enough overlap means an anomaly. To get started with Bayesian probability I recommend Python and PYMC and the Bayesian Hackers book .
