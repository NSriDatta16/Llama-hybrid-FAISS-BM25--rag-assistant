[site]: stackoverflow
[post_id]: 5157979
[parent_id]: 
[tags]: 
How do you save a tree data structure to binary file in Haskell

I'm trying to save a simple (but quite big) Tree structure into a binary file using Haskell. The structure looks something like this: -- For simplicity assume each Node has only 4 childs data Tree = Node [Tree] | Leaf [Int] And here is how I need the data look on disk: Each node starts with four 32-bit offsets to it's children, then follow the childs. I don't care much about the leafs, let's say it's just n consecutive 32-bit numbers. For practival purposes I would need some node labels or some other additional data but right now I don't care about that much neither. It apears to me that Haskellers first choice when writing binary files is the Data.Binary.Put library. But with that I have a problem in the bullet #1. In particular, when I'm about to write a Node to a file, to write down the child offsets I need to know my current offset and the size of each child. This is not something that Data.Binary.Put provides so I thought this must be a perfect application of Monad transformers. But even though it sounds cool and functional, so far I have not been successfull with this approach. I asked two other questions that I thought would help me solve the problem here and here . I must say that each time I received very nice answers that helped me progress further but unfortunatelly I am still unable to solve the problem as a whole. Here is what I've got so far, it still leaks too much memory to be practical. I would love to have solution that uses such functional approach, but would be grateful for any other solution as well.
