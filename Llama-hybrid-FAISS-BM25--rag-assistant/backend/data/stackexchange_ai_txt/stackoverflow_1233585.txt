[site]: stackoverflow
[post_id]: 1233585
[parent_id]: 1233486
[tags]: 
Assuming that you're trying to test the public Select method of class [NoName].. Move the GetAgentFromDatabase() method into an interface say IDB_Access. Let NoName have an interface member that can be set as a ctor parameter or a property. So now you have a seam, you can change the behavior without modifying the code in the method. I'd change the return type of the above method to return something more general - you seem to be using it like a hashtable. Let the production implementation of IDB_Access use the IDataReader to create the hashtable internally. It also makes it less technology dependent ; I can implement this interface using MySql or some non-MS/.net environment. private Hashtable GetAgentFromDatabase(int agentId) Next for your unit test, you could work with a stub (or use something more advanced like a mock framework) . public MockDB_Access : IDB_Access { public const string MY_NAME = "SomeName; public Hashtable GetAgentFromDatabase(int agentId) { var hash = new Hashtable(); hash["FirstName"] = MY_NAME; // fill other properties as well return hash; } } // in the unit test var testSubject = new NoName( new MockDB_Access() ); var agent = testSubject.Select(1); Assert.AreEqual(MockDB_Access.MY_NAME, agent.FirstName); // and so on...
