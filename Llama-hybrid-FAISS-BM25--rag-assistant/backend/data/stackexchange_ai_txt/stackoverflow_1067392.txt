[site]: stackoverflow
[post_id]: 1067392
[parent_id]: 1067378
[tags]: 
No. Suspending a thread is discouraged in every environment I've ever worked in. The main concern is that a thread may be suspended while holding onto a lock on some resource, potentially causing a dead lock. Any resources saved in terms of synchronization objects aren't worth the deadlock risks. This is not a concern when a thread is made to wait, as the thread inherently controls its own "suspension" and can be sure to release any locks it is holding. If you read the documentation on SuspendThread , you'll see that it is meant for use by debuggers. Tear it out of any application code if you can. To illustrate my point, a list of the "do not use" suspension methods I've come across: SuspendThread Thread.Suspend Thread.suspend As an aside; I'm really surprised that Thread.Suspend in .NET was "supported" in 1.0/1.1, it really should have been warning worthy from the start.
