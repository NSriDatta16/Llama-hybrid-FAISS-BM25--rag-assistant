[site]: stackoverflow
[post_id]: 1284283
[parent_id]: 1284239
[tags]: 
In your example you could remove the new and delete by removing the callback class. This is just a Decorator on callable_from_object and callable_from_object that provides some syntactic sugar: automatically choosing the correct callable object to delegate to. However this sugar is nice and you will probably want to keep it. Also you will probably have to place the objects other callable objects on the heap anyway. To me the bigger question is why are you creating a callback library? If it is just to practice c++ then that is fine, but there are loads of exaples of these already: boost::function boost::singnal and slots QT signal and slots Why not use one these? From looking at your example if you keep on the path you are going your solution will converge towards boost::function without its flexibility. So why not use it? While I don't beleive that the boost developers are Gods they are very tallented engineers with an excellent peer review process that results in very stong libraries. I don't think most individuals or organisations can reinvent better libraries. If your concern is excessive memeory allocation and deallocation the solution is this case would probably be a custom allocator for the various callable subtypes. But again I prefer to allow other people to research these tecniques and use their libraries.
