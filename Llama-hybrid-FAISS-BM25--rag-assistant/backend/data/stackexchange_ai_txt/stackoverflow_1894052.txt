[site]: stackoverflow
[post_id]: 1894052
[parent_id]: 1889277
[tags]: 
Hi guys thanks for your help and attention on this one. After a good nights sleep I finally figured out my problem. Obviously the code I posted above was a watered down version of what I actually had. The problem was that my document class was not extending Sprite, it was extending a class called Installation which itself extends Sprite. This was because I am making 10 installations and they all have a a bunch of common ground, they all have a screen saver, intro video, etc. They all have an interface too, which is where my problem came in, as 9 of the installations use the same interface, but one (the map installation) needed to have a few extra GUI elements. My problem was that my Installation base class looked like this (im showing a trimmed down version): public class Installation extends Sprite { protected var _interface:Interface; public function Installation(){ //do stuff } } So when my MapInstallation extended this class it inherited the _interface variable. So when I created the _interface variable as type MapInterface.. _interface = new MapInterface(); ..the complier recognised the new MapInterface as of type Installation but the _interface variable was still strongly typed as Interface, so when I later tried to call the addMapButtons() function on _interface, although the function was there the complier had other ideas. My solution was to using casting.. (_interface as MapInterface).addMapButtons(); and it all worked hunky dory. Thanks for your help guys :)
