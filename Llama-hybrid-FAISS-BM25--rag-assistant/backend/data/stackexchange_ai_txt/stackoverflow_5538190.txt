[site]: stackoverflow
[post_id]: 5538190
[parent_id]: 5536364
[tags]: 
It seems that you are running into the famous Object Relational impedance mismatch There are many approaches and it depends on various factors. For example the size of the object graph you are loading, number of relations, type of persistence storage. It can get complex quickly. My suggestions are: Do not mix persistence code with your business logic code. Those are separate concerns. Make use of an id/foreign key field to define the relationship (as you were leaning towards). Introduce a factory or more specific a Builder that will act on the load side of an Mapper . Builders normally are uses for "complex cases", but you can get away with a Factory class too. The Builder will make use of you loader class (looks like ClassBFactory to me) to construct ClassB. The Builder will then need to get/have a reference to ClassB and then set it on ClassA if needed. Some theoretical background: Persisting objects can get complex and there are many "holes to fall in". Consider using a pre-build ORM mapper tool . But you can get away if you only have simple ORM use cases. Take a look at the Object-Relational Structural Patterns and Object-Relational Metadata Mapping Patterns by "Master Fowler" here .
