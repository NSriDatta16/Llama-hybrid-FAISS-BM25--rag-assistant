[site]: stackoverflow
[post_id]: 2979142
[parent_id]: 2978460
[tags]: 
What practical rules do you use to consciously or unconsciously avoid it? One way to avoid unnecessary optimization is to consider the relative cost benefit: A) Cost for programmer to optimize code + cost to test said optimization + cost of maintaining more complex code resulting from said optimization vs. B) Cost to upgrade server on which software runs or simply buy another one (if scalable) If A >> B consider whether it's the right thing to do. [Ignoring for the moment the environmental cost of B which may or may not be a concern to your organization] This applies more generally than just to premature optimization but it can help instill in your developers a sense that spending their time doing optimization work is a cost and should not be undertaken unless there is a real measurable difference in something that actually matters like: number of servers required or customer satisfaction through improved response times. If management can't see the benefit in reduced $ and customers can't see the benefit in better response times, ask yourself why you are doing it.
