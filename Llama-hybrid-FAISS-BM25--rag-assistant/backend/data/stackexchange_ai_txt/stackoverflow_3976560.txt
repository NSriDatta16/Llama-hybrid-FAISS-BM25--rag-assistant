[site]: stackoverflow
[post_id]: 3976560
[parent_id]: 3967504
[tags]: 
I have developed a workaround for this problem. Point is to set MaxHeight for the top row while we are dragging splitter. Here the code: public class FixedGridSplitter : GridSplitter { private Grid grid; private RowDefinition definition1; private double savedMaxLength; #region static static FixedGridSplitter() { new GridSplitter(); EventManager.RegisterClassHandler(typeof(FixedGridSplitter), Thumb.DragCompletedEvent, new DragCompletedEventHandler(FixedGridSplitter.OnDragCompleted)); EventManager.RegisterClassHandler(typeof(FixedGridSplitter), Thumb.DragStartedEvent, new DragStartedEventHandler(FixedGridSplitter.OnDragStarted)); } private static void OnDragStarted(object sender, DragStartedEventArgs e) { FixedGridSplitter splitter = (FixedGridSplitter)sender; splitter.OnDragStarted(e); } private static void OnDragCompleted(object sender, DragCompletedEventArgs e) { FixedGridSplitter splitter = (FixedGridSplitter)sender; splitter.OnDragCompleted(e); } #endregion private void OnDragStarted(DragStartedEventArgs sender) { grid = Parent as Grid; if (grid == null) return; int splitterIndex = (int)GetValue(Grid.RowProperty); definition1 = grid.RowDefinitions[splitterIndex - 1]; RowDefinition definition2 = grid.RowDefinitions[splitterIndex + 1]; savedMaxLength = definition1.MaxHeight; double maxHeight = definition1.ActualHeight + definition2.ActualHeight - definition2.MinHeight; definition1.MaxHeight = maxHeight; } private void OnDragCompleted(DragCompletedEventArgs sender) { definition1.MaxHeight = savedMaxLength; grid = null; definition1 = null; } } Then just replace GridSplitter with FixedGridSplitter. Note: this code is not general - it doesn't support columns and assume that bottom row has MinHeight specified.
