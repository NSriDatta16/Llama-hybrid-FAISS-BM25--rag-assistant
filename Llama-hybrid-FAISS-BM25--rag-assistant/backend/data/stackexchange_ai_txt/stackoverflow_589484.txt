[site]: stackoverflow
[post_id]: 589484
[parent_id]: 259026
[tags]: 
To give an example where I am missing either static implementation of interface methods or what Mark Brackett introduced as the "so-called type method": When reading from a database storage, we have a generic DataTable class that handles reading from a table of any structure. All table specific information is put in one class per table that also holds data for one row from the DB and which must implement an IDataRow interface. Included in the IDataRow is a description of the structure of the table to read from the database. The DataTable must ask for the datastructure from the IDataRow before reading from the DB. Currently this looks like: interface IDataRow { string GetDataSTructre(); // How to read data from the DB void Read(IDBDataRow); // How to populate this datarow from DB data } public class DataTable : List where T : IDataRow { public string GetDataStructure() // Desired: Static or Type method: // return (T.GetDataStructure()); // Required: Instantiate a new class: return (new T().GetDataStructure()); } } The GetDataStructure is only required once for each table to read, the overhead for instantiating one more instance is minimal. However, it would be nice in this case here.
