[site]: stackoverflow
[post_id]: 486567
[parent_id]: 
[tags]: 
Explicit API methods vs. generalised parameter-based API methods

When defining a customer-accessible API, what is the preferred industry practice between the following: a) Defining a set of explicit API methods, each with a very narrow and specific purpose, for example: SetUserName SetUserAge SetUserAddress b) Defining a set of more generalised parameter-based API methods, for example: SetUserAttribute enum attribute { name, age, address } My opinion: In favour of (a) For boolean-based methods (e.g. EnableFoo) I would definely favour option (a) as the intentions are much more clear, it's less likely to require extensions in the future, and it makes more readable code. For example, a method called EnableDisableFoo which takes a boolean parameter indicating whether to enable or disable would not be very clear, nor have a cohesive purpose. It's where there are multiple options that the problem gets more complicated. In favour of (b) Option (b) is a great way of providing extensibility in the API, but at the expense of usability. With option (a), the API method name itself gives enough information to indicate what it is doing. With option (b), the user has to look up both the method name and the appropriate enumeration/parameter to use. In theory this makes option (b) worse from a usability standpoint -- but maybe having less methods is a good thing, so even this isn't completely true. Other thoughts It's necessary to strike a good balance between usability and extensibility, and they are often at odds with each other. But I'd like to think there is a more objective way to analyse this, rather than relying on the opinion of the API designer. Does anyone have any thoughts on this?
