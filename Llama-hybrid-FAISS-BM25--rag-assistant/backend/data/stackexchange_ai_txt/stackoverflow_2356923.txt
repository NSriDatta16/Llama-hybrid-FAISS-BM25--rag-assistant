[site]: stackoverflow
[post_id]: 2356923
[parent_id]: 2352020
[tags]: 
You can also insert code to drop yourself into a REPL with all the local bindings, using Alex Osborne's debug-repl : (defmacro local-bindings "Produces a map of the names of local bindings to their values." [] (let [symbols (map key @clojure.lang.Compiler/LOCAL_ENV)] (zipmap (map (fn [sym] `(quote ~sym)) symbols) symbols))) (declare *locals*) (defn eval-with-locals "Evals a form with given locals. The locals should be a map of symbols to values." [locals form] (binding [*locals* locals] (eval `(let ~(vec (mapcat #(list % `(*locals* '~%)) (keys locals))) ~form)))) (defmacro debug-repl "Starts a REPL with the local bindings available." [] `(clojure.main/repl :prompt #(print "dr => ") :eval (partial eval-with-locals (local-bindings)))) Then to use it, insert it wherever you want the repl to start: (defn my-function [a b c] (let [d (some-calc)] (debug-repl))) I stick this in my user.clj so it's available in all REPL sessions.
