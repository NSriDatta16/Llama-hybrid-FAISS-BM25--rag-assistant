[site]: stackoverflow
[post_id]: 1090903
[parent_id]: 1090791
[tags]: 
Your first option is certainly worth considering, but you are correct about the added deployment overhead. A service with 131 operations sounds to me like it has too many responsibilities, but whether you consider this to be a problem or not depends on your usage scenario. If the service exists only to service your RIA client, this may not be an issue, since it's just an implementation detail - basically, the only reason to use SOAP is because it's an interoperable transport mechanism. On the other hand, if you need to expose this service for other clients, it's not very composable. If that is the case, I would suggest decomposing the service into more manageable subparts. No matter what you decide regarding your service interface, you should seriously consider refactoring your service into something more manageable. Ideally, there ought to be a Domain Model that implements all the behavior of the service. Such a Domain Model would consist of many classes, each with their own separate responsibilities. The service would then just be a Facade for the Domain Model. If all the operations do is to delegate their implementation to the Domain Model, 131 operations isn't too unmanageable. Regarding your suggestion of using partial classes, I don't see how that is going to help. If you arbitrarily slice your current service class into a number of partial classes, it's only going to become even more difficult to find what you are looking for. If, on the other hand, you find some logical grouping to order your partial classes, your are already on the way towards a deeper model. In that case, instead of partial classes, why not encapsulate such groups into concepts that can be modeled in real, separate classes? In any case, I agree with Robert: The service must be refactored.
