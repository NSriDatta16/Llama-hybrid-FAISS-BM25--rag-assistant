[site]: stackoverflow
[post_id]: 1198628
[parent_id]: 1198546
[tags]: 
You say Create a global AppConfigFactory which can create AppConfig instances (BAD: Only shifts the problem to another class) In my view this is actually not bad at all. The client's view is that he asks a factory object for the config he should use. He does not know it is a singleton! At a stroke the singleton-ness is encapsulted in the Factory. [Pragmatically the Factory may well end up as a Singleton itself, but everything has to bootstrap, right?] Now whether you wrap up the Factory access using Dependency Injection techniques is a refinement, the fundamental is that only one object is looking after the creation of these AppConfig objects, only the factory knows if there are one or many. And that leads me to another pet theory ... there is no such number as 1, when you start out it looks like a Singleton, then conmplexity grows, and you find a scenario where some part of your app (for example) uses one Config and another part uses a different one (Eg. in dynamic transition between versions). The factory can hide that complexity.
