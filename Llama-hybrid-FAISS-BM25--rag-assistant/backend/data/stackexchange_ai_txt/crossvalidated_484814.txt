[site]: crossvalidated
[post_id]: 484814
[parent_id]: 
[tags]: 
get prediction intervals from Winters-Holt forecast method in python

I am trying to output predictions from a Winters-Holt forecasting model that I have made. I have found that libraries like Statsmodels have some tools to do that but impossible to find tutorials or anything to help use them. Plus, I would like to fully understand my code so I am interested in building the intervals on my own from existing Winter Holts predictions that I have: here is what I have so far: winter holts predictions for multiple items for which seasonality and trend has been checked before: def winter_holts_high_low(x): deseasonalized_dat = pd.DataFrame(data1['Id']) deseasonalized_dat['deseasonalize_d-24'] = data1['deseasonalize_d-24'] deseasonalized_dat['deseasonalize_d-23'] = data1['deseasonalize_d-23'] deseasonalized_dat['deseasonalize_d-22'] = data1['deseasonalize_d-22'] deseasonalized_dat['deseasonalize_d-21'] = data1['deseasonalize_d-21'] deseasonalized_dat['deseasonalize_d-20'] = data1['deseasonalize_d-20'] deseasonalized_dat['deseasonalize_d-19'] = data1['deseasonalize_d-19'] deseasonalized_dat['deseasonalize_d-18'] = data1['deseasonalize_d-18'] deseasonalized_dat['deseasonalize_d-17'] = data1['deseasonalize_d-17'] deseasonalized_dat['deseasonalize_d-16'] = data1['deseasonalize_d-16'] deseasonalized_dat['deseasonalize_d-15'] = data1['deseasonalize_d-15'] deseasonalized_dat['deseasonalize_d-14'] = data1['deseasonalize_d-14'] deseasonalized_dat['deseasonalize_d-13'] = data1['deseasonalize_d-13'] deseasonalized_dat['average'] = deseasonalized_dat.mean(axis=1) data2['L0'] = deseasonalized_dat['average'] # print("lo", df['L0'].loc[i]) data2['T0'] = 0 data2['ST0'] = data2['st13'] # print("sto", df['ST0'].loc[i]) data2['L1'] = x[0] * (data2['Dt-12'] / (data2['st24'] + 0.01)) + (1 - x[0]) * ( data2['L0'] + data2['T0']) # print("l1", df['L1'].loc[i]) data2['T1'] = x[1] * (data2['L1'] - data2['L0']) + (1 - x[1]) * data2['T0'] data2['ST1'] = x[2] * (data2['Dt-12'] / data2['L1']) + (1 - x[2]) * data2['st24'] # print("st1", df['ST1'].loc[i]) data2['L2'] = x[0] * (data2['Dt-11'] / (data2['st23'] + 0.01)) + (1 - x[0]) * ( data2['L1'] + data2['T1']) # print("l2", df['L2'].loc[i]) data2['T2'] = x[1] * (data2['L2'] - data2['L1']) + (1 - x[1]) * data2['T1'] data2['ST2'] = x[2] * (data2['Dt-11'] / data2['L2']) + (1 - x[2]) * data2['st23'] data2['L3'] = x[0] * (data2['Dt-10'] / (data2['st22'] + 0.01)) + (1 - x[0]) * ( data2['L2'] + data2['T2']) # print("l3", df['L3'].loc[i]) data2['T3'] = x[1] * (data2['L3'] - data2['L2']) + (1 - x[1]) * data2['T2'] data2['ST3'] = x[2] * (data2['Dt-10'] / data2['L3']) + (1 - x[2]) * data2['st22'] data2['L4'] = x[0] * (data2['Dt-9'] / (data2['st21'] + 0.01)) + (1 - x[0]) * ( data2['L3'] + data2['T3']) # print("l4", df['L4'].loc[i]) data2['T4'] = x[1] * (data2['L4'] - data2['L3']) + (1 - x[1]) * data2['T3'] data2['ST4'] = x[2] * (data2['Dt-9'] / data2['L4']) + (1 - x[2]) * data2['st21'] data2['L5'] = x[0] * (data2['Dt-8'] / (data2['st20'] + 0.01)) + (1 - x[0]) * ( data2['L4'] + data2['T4']) # print("dt-8", df['Dt-8'].loc[i]) # print("l5", df['L5'].loc[i]) data2['T5'] = x[1] * (data2['L5'] - data2['L4']) + (1 - x[1]) * data2['T4'] data2['ST5'] = x[2] * (data2['Dt-8'] / data2['L5']) + (1 - x[2]) * data2['st20'] data2['L6'] = x[0] * (data2['Dt-7'] / (data2['st19'] + 0.01)) + (1 - x[0]) * ( data2['L5'] + data2['T5']) # print("l6", df['L6'].loc[i]) data2['T6'] = x[1] * (data2['L6'] - data2['L5']) + (1 - x[1]) * data2['T5'] data2['ST6'] = x[2] * (data2['Dt-7'] / data2['L6']) + (1 - x[2]) * data2['st19'] data2['L7'] = x[0] * (data2['Dt-6'] / (data2['st18'] + 0.01)) + (1 - x[0]) * ( data2['L6'] + data2['T6']) data2['T7'] = x[1] * (data2['L7'] - data2['L6']) + (1 - x[1]) * data2['T6'] data2['ST7'] = x[2] * (data2['Dt-6'] / data2['L7']) + (1 - x[2]) * data2['st18'] data2['L8'] = x[0] * (data2['Dt-5'] / (data2['st17'] + 0.01)) + (1 - x[0]) * ( data2['L7'] + data2['T7']) data2['T8'] = x[1] * (data2['L8'] - data2['L7']) + (1 - x[1]) * data2['T7'] data2['ST8'] = x[2] * (data2['Dt-5'] / data2['L8']) + (1 - x[2]) * data2['st17'] data2['L9'] = x[0] * (data2['Dt-4'] / (data2['st16'] + 0.01)) + (1 - x[0]) * ( data2['L8'] + data2['T8']) data2['T9'] = x[1] * (data2['L9'] - data2['L8']) + (1 - x[1]) * data2['T8'] data2['ST9'] = x[2] * (data2['Dt-4'] / data2['L9']) + (1 - x[2]) * data2['st16'] data2['L10'] = x[0] * (data2['Dt-3'] / (data2['st15'] + 0.01)) + (1 - x[0]) * ( data2['L9'] + data2['T9']) data2['T10'] = x[1] * (data2['L10'] - data2['L9']) + (1 - x[1]) * data2['T9'] data2['ST10'] = x[2] * (data2['Dt-3'] / data2['L10']) + (1 - x[2]) * data2['st15'] data2['L11'] = x[0] * (data2['Dt-2'] / (data2['st14'] + 0.01)) + (1 - x[0]) * ( data2['L10'] + data2['T10']) data2['T11'] = x[1] * (data2['L11'] - data2['L10']) + (1 - x[1]) * data2['T10'] data2['ST11'] = x[2] * (data2['Dt-2'] / data2['L11']) + (1 - x[2]) * data2['st14'] data2['L12'] = x[0] * (data2['Dt-1'] / (data2['st13'] + 0.01)) + (1 - x[0]) * ( data2['L11'] + data2['T11']) data2['T12'] = x[1] * (data2['L12'] - data2['L11']) + (1 - x[1]) * data2['T11'] data2['ST12'] = x[2] * (data2['Dt-1'] / data2['L12']) + (1 - x[2]) * data2['st13'] # print("l12", df['L12'].loc[i]) data2['Lt+1'] = round((data2['L12'] + data2['T12']) * data2['st24'], ) data2['Lt+1'] = np.where((data2['Lt+1'] > 0), data2['Lt+1'], 0) # print("winter-holts multiplicative", df['Lt+1'].loc[i]) data2['MSE'] = (((data2['Dt-12'] - data2['L1']) + (data2['Dt-11'] - data2['L2']) + (data2['Dt-10'] - data2['L3']) + (data2['Dt-9'] - data2['L4']) + (data2['Dt-8'] - data2['L5']) + (data2['Dt-7'] - data2['L6']) + (data2['Dt-6'] - data2['L7']) + (data2['Dt-5'] - data2['L8']) + (data2['Dt-4'] - data2['L9']) + (data2['Dt-3'] - data2['L10']) + (data2['Dt-2'] - data2['L11']) + (data2['Dt-1'] - data2['L12'])) ** 2) / 12 return data2['MSE'].loc[i] then fonction is called and parameters are optimized: for i in data2.index: x0 = np.array([0.1, 0.1, 0.1]) solver = 'SLSQP' if data2['seasonality_status'].loc[i] == "seasonal" and data2['trend_status'].loc[i] == "trending" and \ data2['demand_level'].loc[i] == 'high' and data2['variability'].loc[i] == 'low': result = minimize(winter_holts_high_low, x0, bounds=[(0, 1), (0, 1), (0, 1)], method=solver, tol=1, options={'maxiter': 15}) now from this existing code I would like to output intervals predictions but I dont know how to go about it. Any help would be greatly appreciated as I struggle to find materials on it. Thank you kindly
