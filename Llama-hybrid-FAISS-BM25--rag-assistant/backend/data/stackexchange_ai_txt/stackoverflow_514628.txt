[site]: stackoverflow
[post_id]: 514628
[parent_id]: 514533
[tags]: 
1) The downside here is that you end up distributing more assemblies and so taking up a larger hard drive footprint because you are using two sets of controls that are likely to overlap in functionality. Depending on your application and target users this might or might not be an issue. Second is the problem of keeping the user interface consistent. If both libraries offer an Office 2007 look and feel they might not match in colors exactly and so your application could look inconsistent. 2) Only you can know if the time it would take is worthwhile for your project. Take into account that replacing a control with another from a different vendor is unlikely to be a simple renaming of the control class. They probably have a different set of properties and so you need to spend time modifying the code so it compiles again and then retesting to ensure it works as expected. Unless your customers are demanding a change then it is unlikely to be worth the effort compared to the same time spent adding new features. 3) Unless you have a very trivial application you are almost certain to save time using a component library instead of writing everything yourself. This is why Infragistics, DevExpress, ComponentOne and many other vendors make a nice living from component marketplace. Plus then tend to keep their libraries up to date with the latest look and feel which makes it easier to update your own application to mimic that same appearance. N.B There is another free control library called Krypton Toolkit but in the interests of disclosure I would point out that I wrote it myself! So I am biased in recommending it.
