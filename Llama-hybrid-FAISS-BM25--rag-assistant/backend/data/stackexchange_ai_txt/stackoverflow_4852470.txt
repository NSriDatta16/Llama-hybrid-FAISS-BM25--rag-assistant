[site]: stackoverflow
[post_id]: 4852470
[parent_id]: 4739875
[tags]: 
Since I have just upvoted everyone here, I'm going to share my perspective here too and talk a little more on the testing equation. :) I find it interesting that I have come from 0-tier (putting everything in JSP files) to 2-tier (servlet-JSP) to god-knows-how-many-tiers right now. What I can tell you from my experience is not to get too crazy in coming up with extra tiers if you don't need it. You may read programming books requiring you to have this layer or that layer, but it all boils down to the complexity of your current project. The pros of having tiers is to promote layer of abstractions... for example, if you decide to swap out your Struts' front-end with Spring MVC or JSF framework, then it will not cause unwanted negative ripple effects to the rest of your implementations (database, security, logging, etc). The cons of having too many tiers is you unwantedly introduce more complexity into your project. Everything is too abstracted out that you lose track which tier does what anymore. Further, if you don't implement the tiers properly, you are going to end up with tight coupling between the tiers and you are going to find unit testing to be extremely difficult and frustrating. This is because in order for you to unit test component A, you will have to first initialize 10 other components from other tiers... and finally, you end up not doing any unit testing because everytime you change something in your code, you will have to fix all your testcases. I have been through that mistake myself. To keep things simple for now, you need the following tiers:- UI : This is your viewer. It could be JSP, HTML, Freemarker etc. Model : This holds the Person class. It contains all the properties of the person and getters/setters method. That's it... no business logic in it. It's POJO. You use this to pass around between tiers. Controller : This is your "air traffic controller". It handles the user request, it knows what services to call to get the job done yet there are minimal computations in here. Think of controller as your boss. The boss always asks the employees to do this and that and finally, the boss takes the result and represent it to the user through the UI . Service : This is where you have your PersonService . It handles all the services related to the person, for example creating new patient, finding person by last name, etc. Your service is the only one that can communicate against the database. It will map all the retrieved person information from the database into the Person model and returns it to the controller. If your project scope is big, perhaps you want to introduce a DAO tier to handle all database related communication, but for now, a DAO tier is not needed unless you can justify a need for it. By looking at this... the first 3 tiers is your MVC, which is very commonly used in the web application development. The Service tier is introduced here to promote code reusability between the Controllers . For example, you have many multiple controllers that may want to utilize PersonService to perform CRUD operation on a person. From here, unit testing becomes very simple. Since Service is an independent tier and it doesn't rely on any other tiers, you can easily write testcases to test your entire Service class. Once you have tested all your service APIs, then testing the Controller is going to be straightforward because now, you can safely mock the Service class in the controller to perform your "happy-path" and "not-so-happy-path" testings. Model doesn't really require any testing, because it's just a POJO. This way, you can easily achieve 95% test coverage. There... all happy and done. :)
