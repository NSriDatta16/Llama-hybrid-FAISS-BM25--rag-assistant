[site]: stackoverflow
[post_id]: 1017937
[parent_id]: 1017621
[tags]: 
The question you reference asks which languages promote both OO and functional programming. Python does not promote functional programming even though it works fairly well. The best argument against functional programming in Python is that imperative/OO use cases are carefully considered by Guido, while functional programming use cases are not. When I write imperative Python, it's one of the prettiest languages I know. When I write functional Python, it becomes as ugly and unpleasant as your average language that doesn't have a BDFL . Which is not to say that it's bad, just that you have to work harder than you would if you switched to a language that promotes functional programming or switched to writing OO Python. Here are the functional things I miss in Python: Pattern matching Tail recursion Large library of list functions Functional dictionary class Automatic currying Concise way to compose functions Lazy lists Simple, powerful expression syntax (Python's simple block syntax prevents Guido from adding it) No pattern matching and no tail recursion mean your basic algorithms have to be written imperatively. Recursion is ugly and slow in Python. A small list library and no functional dictionaries mean that you have to write a lot of stuff yourself. No syntax for currying or composition means that point-free style is about as full of punctuation as explicitly passing arguments. Iterators instead of lazy lists means that you have to know whether you want efficiency or persistence, and to scatter calls to list around if you want persistence. (Iterators are use-once) Python's simple imperative syntax, along with its simple LL1 parser, mean that a better syntax for if-expressions and lambda-expressions is basically impossible. Guido likes it this way, and I think he's right.
