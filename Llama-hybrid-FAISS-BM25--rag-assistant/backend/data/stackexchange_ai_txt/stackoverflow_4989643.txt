[site]: stackoverflow
[post_id]: 4989643
[parent_id]: 3794287
[tags]: 
It took me quite some time but I finally managed to make it work for my project. To create the "logic" tests I followed Apple guidelines on creating logic tests . This works fine once you understand that the logic tests are run during build. To be able to debug those tests it is required to create a custom executable that will call those tests. The article by Sean Miceli on the Grokking Cocoa blog provides all the information to do this. Following it however did not yield immediate success and needed some tweaking. I will go over the main steps presented in Sean's tutorial providing some "for dummies" outline which took me some time to figure out: Setup a target that contains the unit tests but DOES NOT run them Setup the otest executable to run the tests Setup the otest environment variables so that otest can find your unit tests Step 1 - Setting up the target Duplicate your unit tests target located under your project Targets. This will also create a duplicate of your unit tests product (.octest file). In the figure below "UnitTest" is the original target. Rename both the unit tests target and the unit tests product (.octest file) to the same name. In the figure below "UnitTestsDebug" is the duplicate target. Delete the RunScript phase of the new target The name of both can be anything but I would avoid spaces. Step 2 - Setting up otest The most important point here is to get the correct otest, i.e. the one for your current iOS and not the default Mac version. This is well described in Sean's tutorial. Here are a few more details which helped me setting things right: Go Project->New Custom Executable. This will pop open a window prompting you to enter an Executable Name and an Executable Path. Type anything you wish for the name. Copy paste the path to your iOS otest executable. In my case this was /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.2.sdk/Developer/usr/bin/otest Press enter. This will bring you to the configuration page of your executable. The only thing to change at this point is to select "Path Type: Relative to current SDK". Do not type in the path, this was done at step 3. Step 3 - Setting up the otest arguments and environment variables The otest arguments are straightforward to setup... But this proved to be my biggest problem. I initially had named my logic test target "LogicTests Debug". With this name and "LogicTests Debug.octest" (with quotes) as argument to otest I kept having otest terminating with exit code 1 and NEVER stopping into my code... The solution : no space in your target name! The arguments to otest are: -SenTest Self (or All or a test name - type man otest in terminal to get the list) {LogicTestsDebug}.octest - Where {LogicTestsDebug} needs to be replaced by your logic test bundle name. Here is the list of environment variables for copy/pasting: DYLD_ROOT_PATH: $SDKROOT DYLD_FRAMEWORK_PATH: "${BUILD_PRODUCTS_DIR}: ${SDK_ROOT}:${DYLD_FRAMEWORK_PATH}" IPHONE_SIMULATOR_ROOT: $SDKROOT CFFIXED_USER_HOME: "${HOME}/Library/Application Support/iPhone Simulator/User" DYLD_LIBRARY_PATH: ${BUILD_PRODUCTS_DIR}:${DYLD_LIBRARY_PATH} DYLD_NEW_LOCAL_SHARED_REGIONS: YES DYLD_NO_FIX_PREBINDING: YES Note that I also tried the DYLD_FORCE_FLAT_NAMESPACE but this simply made otest crash. Step 4 - Running your otest executable To run your otest executable and start debugging your tests you need to: Set your active target to your unit test target (LogicTestsDebug in my case) Set your active executable to your otest executable You can build and run your executable and debug your tests with breakpoints. As a side note if you are having problems running your otest executable it can be related to: Faulty path. I had lots of problem initially because I was pointing to the mac otest. I kept crashing on launch with termination code 6. Faulty arguments. Until I removed the space from bundle (.octest) name I kept having otest crash with exit code 1. Wrong path in environment variables. [Sean tutorial][8] has lots of follow-up questions giving some insight on what other people tried. The set I have now seems to work so I suggest you start with this. You may get some message in the console which might lead you to think something is wrong with your environment variables. You may notice a message regarding CFPreferences. This message is not preventing the tests from running properly so don't focus on it f you have problems running otest. Last once everything is working you will be able to stop at breakpoints in your tests. One last thing... I've read on many blogs that the main limitation of the integrated XCode SenTestKit is that tests cannot be run while building the application. Well as it turns out this is in fact quite easy to manage. You simply need to add your Logic tests bundle as a dependency to your application project. This will make sure your logic tests bundle is built, i.e. all tests are run, before your application is built. To do this you can drag and drop your logic test bundle onto your application target.
