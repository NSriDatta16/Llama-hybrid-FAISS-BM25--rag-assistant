[site]: crossvalidated
[post_id]: 597626
[parent_id]: 
[tags]: 
Which ML algorithms can be used to optimize a weighted quadratic loss function?

I want to solve the following optimization problem: $$ L = n^{-1} \sum^n_{i=1} w_i ( y_i - \tau(x_i))^2 $$ where $w_i \in \mathbb{R}^+$ weights, $y_i \in \mathbb{R}$ outcome data, $x_i$ features/covariates, and $\tau$ an unknown function to be specified or approximated by a machine learning (ML) algorithm. For example if we specify a linear model $\tau(x_i)=x_i' \beta$ with parameters $\beta$ the problem above reduces to weighted least squares estimation of a linear model. If we then add a regularization $$L + \lambda ||\beta||_q$$ we obtain the Lasso model for $q=1$ and the Ridge regression models for $q=2$ . Consequently the R function glmnet for example, allows for weights. Now, we could extend our model for $\tau$ by including splines, for exmaple, to learn non-linear continuous functions and increase the flexibility of the model. My question: are there any models / ML methods outside this class to minimize $L$ ? For example, random forests can be used to approximate $\tau$ if there are no weights, I believe. However, a weighted random forest I have not seen yet and the standard functions e.g. randomforest does not allow for weights. I suppose the regression type models for $\tau$ (Ridge, Lasso, Spline, etc.) are the only ones that apply here but I am very curious if anybody can point to ML methods that work with weights.
