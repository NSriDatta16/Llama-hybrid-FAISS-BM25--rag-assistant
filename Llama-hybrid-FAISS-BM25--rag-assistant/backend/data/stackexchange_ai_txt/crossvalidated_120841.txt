[site]: crossvalidated
[post_id]: 120841
[parent_id]: 
[tags]: 
Pymc: Does this model call for Index, and if so, how would I use it?

I'm working on speeding up the mcmc for a hierarchical pymc model that is taking .2 seconds per iteration. It's the second model from this paper , modeling a soccer league using team-specific attack and defense 'strength' parameters. There are three 'tiers' of strength, with a team drawing it's attack and defense parameters from the distribution corresponding to its tier: An excerpt of my pymc code is below. While thinking about how to speed up the mcmc, I came across this in the pymc documentation on deterministics: Index is useful for implementing dynamic models, in which the parent-child connections change. I think that describes this model, in that the parents of the team-specific parameters vary depending on which tier they are in. Questions Is this model an instance in which using Index is applicable and/or would make the mcmc faster? If so, how would I use it? If the answer to 1. is no, are there any other changes I could make to speed up the mcmc? I get the sense that sticking to numpy arrays as must as possible is a best practice. Are there any other best practices for setting up a model in pymc? Code excerpt: num_teams = 20 NCT_DOF = 4 mu_att1 = pymc.TruncatedNormal('mu_att1', 0, .001, -3, 0, value=-.1) mu_att3 = pymc.TruncatedNormal('mu_att3', 0, .001, 0, 3, value=.1) tau_att = pymc.Gamma('tau_att', .01, .01, size=3, value=[10, 10, 10]) tau_def = pymc.Gamma('tau_def', .01, .01, size=3, value=[10, 10, 10]) pi_att = pymc.Dirichlet("grp_att", theta=[1,1,1]) group_att = pymc.Categorical('group_att', pi_att, size=num_teams) pi_def = pymc.Dirichlet("grp_def", theta=[1,1,1]) group_def = pymc.Categorical('group_def', pi_def, size=num_teams) @pymc.deterministic def mu_atts(group_att=group_att, mu_att1=mu_att1, mu_att3=mu_att3): mus_by_group = [mu_att1, 0, mu_att3] return [mus_by_group[i] for i in group_att] @pymc.deterministic def tau_atts(group_att=group_att, tau_att=tau_att): return [tau_att[i] for i in group_att] @pymc.deterministic def mu_defs(group_def=group_def, mu_def1=mu_def1, mu_def3=mu_def3): mus_by_group = [mu_def1, 0, mu_def3] return [mus_by_group[i] for i in group_def] @pymc.deterministic def tau_defs(group_def=group_def, tau_def=tau_def): return [tau_def[i] for i in group_att] atts_star = np.empty(num_teams, dtype=object) defs_star = np.empty(num_teams, dtype=object) for i in range(num_teams): atts_star[i] = pymc.NoncentralT("att_%i" % i, mu=mu_atts[i], lam=tau_atts[i], nu=NCT_DOF) defs_star[i] = pymc.NoncentralT("def_%i" % i, mu=mu_defs[i], lam=tau_defs[i], nu=NCT_DOF)
