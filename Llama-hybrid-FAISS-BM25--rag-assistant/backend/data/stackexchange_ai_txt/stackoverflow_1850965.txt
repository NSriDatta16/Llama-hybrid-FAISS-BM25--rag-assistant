[site]: stackoverflow
[post_id]: 1850965
[parent_id]: 1789778
[tags]: 
Here's how I made a ViewModel for a menu item: AbstractMenuItem . Pay particular attention to the Icon region: #region " Icon " /// /// Optional icon that can be displayed in the menu item. /// public object Icon { get { if (IconFull != null) { System.Windows.Controls.Image img = new System.Windows.Controls.Image(); if (EnableCondition.Condition) { img.Source = IconFull; } else { img.Source = IconGray; } return img; } else { return null; } } } private BitmapSource IconFull { get { return m_IconFull; } set { if (m_IconFull != value) { m_IconFull = value; if (m_IconFull != null) { IconGray = ConvertFullToGray(m_IconFull); } else { IconGray = null; } NotifyPropertyChanged(m_IconArgs); } } } private BitmapSource m_IconFull = null; static readonly PropertyChangedEventArgs m_IconArgs = NotifyPropertyChangedHelper.CreateArgs (o => o.Icon); private BitmapSource IconGray { get; set; } private BitmapSource ConvertFullToGray(BitmapSource full) { FormatConvertedBitmap gray = new FormatConvertedBitmap(); gray.BeginInit(); gray.Source = full; gray.DestinationFormat = PixelFormats.Gray32Float; gray.EndInit(); return gray; } /// /// This is a helper function so you can assign the Icon directly /// from a Bitmap, such as one from a resources file. /// /// protected void SetIconFromBitmap(System.Drawing.Bitmap value) { BitmapSource b = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap( value.GetHbitmap(), IntPtr.Zero, Int32Rect.Empty, System.Windows.Media.Imaging.BitmapSizeOptions.FromEmptyOptions()); IconFull = b; } #endregion You just derive from this class and in the constructor you call SetIconFromBitmap and pass in a picture from your resx file. Here's how I bound to those IMenuItems in the Workbench Window :
