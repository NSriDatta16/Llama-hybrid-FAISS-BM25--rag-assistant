[site]: stackoverflow
[post_id]: 1393372
[parent_id]: 1393350
[tags]: 
You cannot. However, you could set a single constructor on the FatherClass like so: protected FatherClass(string val1, string val2) {} Which forces subclasses to call this constructor - this would 'encourage' them to provide a string val1, string val2 constructor, but does not mandate it. I think you should consider looking at the abstract factory pattern instead. This would look like this: interface IFooFactory { FatherClass Create(string val1, string val2); } class ChildClassFactory : IFooFactory { public FatherClass Create(string val1, string val2) { return new ChildClass(val1, val2); } } Wherever you need to create an instance of a subclass of FatherClass, you use an IFooFactory rather than constructing directly. This enables you to mandate that (string val1, string val2) signature for creating them.
