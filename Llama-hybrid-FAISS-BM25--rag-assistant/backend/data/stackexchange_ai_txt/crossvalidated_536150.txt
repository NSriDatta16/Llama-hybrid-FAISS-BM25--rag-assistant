[site]: crossvalidated
[post_id]: 536150
[parent_id]: 
[tags]: 
How Do You Know If A Problem Set Can Be Trained?

As the title suggests, how do you know if there exists a machine learning solution to a problem set? Earlier today I was working on building a neural network to predict whether stock prices will going up or down using data from the past 150 candlesticks (If price moves up 20 points first, the label will be 1, but if price moves down by 20 points first then label is 0). The dataset was fairly intuitive and easy to normalize and clean. The entire problem just seems pretty straightforward. We feed chart data, and the model finds patterns. It sounded simple in my head. However, having tried using CNN, ANN and RNN, the validation accuracy seems to be stuck at 50% regardless of whatever tweaks I make to the network architecture. It's almost like the model is unable to find any pattern at all. The dataset has a 50/50 split between my 2 labels (bullish vs bearish). The dataset is moderately large as well, sitting at 4784 instances, with each instance having the OHLC (+ other indicator) values of the past 500 candles. Theoretically I don't see any problem with the way I'm approaching this problem, and the fact that accuracy only budges up and down ever so slightly tells me that the moment a conclusion is formed by the model, the next set of data disproves it, bringing the accuracy back to 50%. It just feels like a never-ending back-and-forth. TLDR: So, how do you know if there exists a machine learning solution for a problem set? Conversely, how do you know if there isn't?
