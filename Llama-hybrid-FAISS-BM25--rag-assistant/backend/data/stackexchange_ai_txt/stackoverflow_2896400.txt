[site]: stackoverflow
[post_id]: 2896400
[parent_id]: 2896234
[tags]: 
I would encourage you to use classes when you have methods that may require more or less nullable arguments; it gives you the ability to provide whatever you need without having to call a method like: someMethod("foo", null, null, null, null, null, null, ..., "bar"); Using such mecanism, the method call would be something like : someMethod(new ObjParam().setFoo("foo").setBar("bar")); The second method is expendable and reusable (without a tons of method overrides). And I'm not saying here that method override is bad! Quite the opposite. However with many optional arguments, I would prefer the second call. As for inner classes, they are useful at times, but I personally follow these guidelines: try to use inner classes only when the inner class should be private (ex: in the case of a custom LinkedList implementation, the Node class is a private class and is therefore an inner class.) usually only if the class is not reusable and used mainly within a (very) small group of classes that I will make it an inner class The "parent" and inner class becomes big enough; then both class are given their own Java source file for readability, unless the inner class should be private as for the first point. Keep in mind that, inner class or not, the Java compiler will create a .class for every class. The more you use them, less readable your code will be. It's pretty much up to you to decide whether or not they're justified or not...
