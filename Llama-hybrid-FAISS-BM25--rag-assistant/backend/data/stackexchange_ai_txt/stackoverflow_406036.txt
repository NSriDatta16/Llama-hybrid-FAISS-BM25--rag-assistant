[site]: stackoverflow
[post_id]: 406036
[parent_id]: 405995
[tags]: 
I'm not aware of a mature set of bindings for embedding the C implementation of Lua into OCaml. An immature set of bindings was posted on the Caml mailing list in 2004 . If you want to use the ML implementation you can find some examples in a paper called ML Module Mania . The ML implementation, unlike the C implementation, guarantees type safety, but to do so it uses some very scurvy tricks in the ML module system. If you are asking basic questions, you probably want to avoid this. In your example it's a little hard to guess where you want the function to come from. I suggest you either ask for a C example or give people a C example and ask how it could be realized in OCaml (though I think bindings are going to be a problem). Edit In response to the revised question, it's pretty complicated. The usual model is that you would put Lua in charge, and you would call Objective Caml code from Lua. You're putting Caml in charge, which makes things more complicated. Here's a rough sketch of what things might look like: let lua = Lua.new() (* create Lua interpreter *) let chunk = LuaL.loadfile lua "hello.lua" (* load and compile the file hello.lua *) let _ = Lua.call lua 0 0 (* run the code to create the hello function *) let lua_len s = (* push the function; push the arg; call; grab the result; pop it; return *) let _ = Lua.getglobal lua "lua_hello" in let _ = Lua.pushstring lua s in let _ = Lua.call lua 1 1 in let len = Lua.tointeger lua (-1) in let _ = Lua.pop lua 1 in len let () = print_string "Name? "; flush stdout let name = input_line stdin let len = lua_len name Printf.printf "Your name is %d letters long." len; flush stdout;; Again, I don't know where you'll get the bindings for the Lua and LuaL modules.
