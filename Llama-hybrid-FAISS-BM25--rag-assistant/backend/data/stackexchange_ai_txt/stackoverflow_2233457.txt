[site]: stackoverflow
[post_id]: 2233457
[parent_id]: 2233216
[tags]: 
Short answer: I'm afraid there isn't much you could easily do. The problem is that you need to parameterize the query. The query however needs to be represented as an expression tree (so that it can be translated to SQL or whatever EF uses). Unfortunately, C# don't provide any elegant ways for composing expression trees. Long answer: Some time ago, I wrote a C# article that explains how to compose queries (using some tricks) - you can take expression tree and splice it into a parameterized query. So, in principle you could use the techniques from the article to create a method that takes the changing parts of the expression tree and then compose the query. I'll use the types used in LINQ to SQL, because I'm more familiar with it, but I believe the principle should be the same: IQueryable GetInfo (IQueryable source, // e.g. context.Students Expression >> getAddr, // x => x.adresses Expression > getRes // (x, a) => new StudentDTO { ... } return from x in source.AsExpandable() let address = (from a in getAddr(x).Expand() where a.active == true select a).FirstOrDefault() select getRes(x, a).Expand(); } // The use would look like this var res = GetInfo(context.Professors, x => x.addresses, (x, a) => new ProfessorDTO { id = x.id, professorname = x.studentname, address = a.address }); So a summary is that C# and LINQ do not provide any built-in support that would make it easier. However, with some effort you can write query that is parameterized by some parts of the expression tree. In your case, it makes the code a little shorter and less repetitive, but it makes it a lot more complex (and you also need to use library like the one I referenced that provides AsExpandable and Expand ). In this case I'm afraid the it's not worth the effort. But it would be nice if C# v(Next)^x provided some more elegant support for things like this :-)
