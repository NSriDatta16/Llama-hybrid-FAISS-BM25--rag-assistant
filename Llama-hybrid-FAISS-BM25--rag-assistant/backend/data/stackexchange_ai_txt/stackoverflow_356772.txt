[site]: stackoverflow
[post_id]: 356772
[parent_id]: 356128
[tags]: 
I have read several articles discouraging inheritance in projects (as opposed to libraries/frameworks), and encouraging to program agaisnt interfaces, no against implementations. They also advocate OO by composition: if you need the functions in class a and b, make c having members/fields of this type: class C { private $a, $b; public function __construct($x, $y) { $this->a = new A(42, $x); $this->b = new B($y); } protected function DoSomething() { $this->a->Act(); $this->b->Do(); } }
