[site]: stackoverflow
[post_id]: 5448016
[parent_id]: 5447987
[tags]: 
...if you add an index that contains all columns, and a query was actually able to use that index, it would scan it in the order of the primary key. Which means hitting nearly every record. Average search time would be O(n/2).. the same as hitting the actual database. You need to read a bit lot about indexes. It might help if you consider an index on a table to be a bit like a Dictionary in C#. var nameIndex = new Dictionary >(); That means that the name column is indexed, and will return a list of primary keys. var nameOccupationIndex = new Dictionary >>>(); That means that the name column + occupation columns are indexed. Now imagine the index contained 10 different columns, nested so far deep it contains every single row in your table. This isn't exactly how it works mind you. But it should give you an idea of how indexes could work if implemented in C#. What you need to do is create indexes based on one or two keys that are queried on extensively, so that the index is more useful than scanning the entire table.
