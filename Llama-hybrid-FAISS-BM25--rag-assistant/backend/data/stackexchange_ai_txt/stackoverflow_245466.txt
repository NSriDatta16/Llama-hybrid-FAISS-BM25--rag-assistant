[site]: stackoverflow
[post_id]: 245466
[parent_id]: 23031
[tags]: 
Lots of great answers here! I try to test at the lowest level that makes sense: If a single computation or conditional is difficult or complex, add test code while you're writing it and ensure each piece works. Comment out the test code when you're done, but leave it there to document how you tested the algorithm. Test each function. Exercise each branch at least once. Exercise the boundary conditions -- input values at which the code changes its behavior -- to catch "off by one" errors. Test various combinations of valid and invalid inputs. Look for situations that might break the code, and test them. Test each module with the same strategy as above. Test the body of code as a whole, to ensure the components interact properly. If you've been diligent about lower-level testing, this is essentially a "confidence test" to ensure nothing broke during assembly. Since most of my code is for embedded devices, I pay particular attention to robustness, interaction between various threads, tasks, and components, and unexpected use of resources: memory, CPU, filesystem space, etc . In general, the earlier you encounter an error, the easier it is to isolate, identify, and fix it--and the more time you get to spend creating, rather than chasing your tail.* **I know, -1 for the gratuitous buffer-pointer reference!*
