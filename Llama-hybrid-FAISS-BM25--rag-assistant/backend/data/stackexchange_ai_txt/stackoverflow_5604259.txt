[site]: stackoverflow
[post_id]: 5604259
[parent_id]: 5523082
[tags]: 
There are different ways to persist the state of a javascript manipulated object. The first is to store it in a cookie. Very simple an supported by the most browsers: $(function() { var cookie = document.cookie, state = cookie.substr(cookie.search('buttonCollapsed=')+16,1), elem = $('div.collapsable'); if (state == 1) { elem.hide(); } elem.slideToogle(function() { if ( elem.is(':visible') ) { document.cookie = "buttonCollapsed=0"; } else { document.cookie = "buttonCollapsed=1"; } }); }); Here is a good Documentation for Cookies in Javascipt . In modern browsers you can use the local storage. This is part of Javascripts Webstorage Specification and should be already implemented in the latest browser versions. Firefox supports it since version 3.5, for example. In this storage you can place complex objects with all settings you need. You only have to serialize them to a JSON string. Its really easy: var settings = { buttonCollapsed: true, lastPage: 5, // ... someNumbers: [1,4,6,9] }; // Write object into storage window.localStorage['mySettings'] = JSON.stringify(settings); // Read object fron storage settings = JSON.parse(window.localStorage['mySettings']); if(settings.buttonCollapsed) { $('div').hide(); } If you don't need to support old browser with the full functionality, I would use the local storage. If you later want to store more complex data you are able to reuse it. It may be more comfortable, if you build some accessor functions like save($key, $value) and load($key) . I have begun a jQuery plugin which uses the local storage , but its currently not ready to use. Maybe you get some inspiration. If you want to support storing the state for new browsers an f*** o** the old ones you should check if the local storage is available: if (typeof window.localStorage !== 'undefined') { // ... } Hope this helps...
