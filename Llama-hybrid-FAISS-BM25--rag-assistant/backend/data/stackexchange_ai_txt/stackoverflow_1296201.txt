[site]: stackoverflow
[post_id]: 1296201
[parent_id]: 1283864
[tags]: 
I have a very simple and disappointing answer: deserialization is not implemented. Rational behind: .NET is a very strict and formal environment while RDF is not. Converting data in a generic manner is only feasible towards the less restrictive direction. Full cycle serialization/deserialization could work reliably only if you are holding both activities in your own hand. If one company implements serialization, sends the RDF over to another company that implements the deserialization, you cannot expect too much. Different kinds of systems have different business logic and perfect 1:1 mapping is not even theoretically possible. It would be possible to build a very fault-tolerant deserialization, but you would get no guarantee that the deserialized .NET objects would carry the same meaning as the original RDF document. Because individuals in RDF documents can be partial by the very nature of RDF. The only justified reason I can think of where guaranteed serialization/deserialization could work (correct me if I am wrong), if you would use ROWLEX as data storage layer, persisting/retrieving your objects to/from RDF. But there are so many other alternatives to store persist/retrieve your objects. Would you really need this?
