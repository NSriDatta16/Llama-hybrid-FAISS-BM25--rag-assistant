[site]: stackoverflow
[post_id]: 442481
[parent_id]: 442322
[tags]: 
Regarding primitives, they will always be there, like it or not, because they are the basic building blocks of objects. Sure, you could use the wrapper classes instead, but that just overworks the compiler, which ultimately translates back to primitives in most cases. Backward compatibility is very important, and as folks already mentioned here, there are a lot of users still running 1.3 and 1.4 code. Having said this, I think if anyone is still running java 1.0 or 1.1 code in some legacy system, they're not likely to migrate to Java 7 any time soon, and even if they do, they'll most likely need to rewrite their code anyway. I think the deprecated API of versions >1.2 can safely be removed. Another aspect of backward compatibility is addition of keywords, which is always discouraged. in Java 5, the major language changes were managed with the addition of a single new keyword, 'enum', and even that caused an outrage, since every piece of code with a variable named 'enum' was now non-compliant. As far as I know, the changes in Java 7 are planned without new keywords (phew!). Yuval =8-)
