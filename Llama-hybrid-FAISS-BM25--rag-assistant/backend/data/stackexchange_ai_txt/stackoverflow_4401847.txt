[site]: stackoverflow
[post_id]: 4401847
[parent_id]: 4401297
[tags]: 
This is pretty easy to do if you're using a DataTemplate and a ValueConverter and passing the whole object into the ListBox (rather than just a string). Assuming you have some object that looks like: public class SomeObject: INotifyPropertyChanged { private bool mTestValue; public bool TestValue { get {return mTestValue;} set {mTestValue = value; NotifyPropertyChanged("TestValue");} } private string mSomeText; public string SomeText { get {return mSomeText;} set {mSomeText = value; NotifyPropertyChanged("SomeText");} } public event PropertyChangedEventHandler PropertyChanged; private void NotifyPropertyChanged(string name) { if ((name != null) && (PropertyChanged != null)) { PropertyChanged(this, new PropertyChangedEventArgs(name)); } } } You can make a converter that looks like: public class BooleanVisibilityConverter : IValueConverter { public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) { if (value != null && (bool)value) return Visibility.Visible; else return Visibility.Collapsed; } public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) { throw new NotImplementedException(); } } And add the converter to your XAML like so: Then you could have the ListBox defined in XAML like so: Might seem like a lot, but it's really pretty simple once you get started. A great way to learn more about data binding and converters is at Jesse Liberty's blog ( http://jesseliberty.com/?s=Windows+Phone+From+Scratch ).
