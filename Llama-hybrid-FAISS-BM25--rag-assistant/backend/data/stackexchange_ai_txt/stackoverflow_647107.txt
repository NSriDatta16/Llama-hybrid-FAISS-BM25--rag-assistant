[site]: stackoverflow
[post_id]: 647107
[parent_id]: 647092
[tags]: 
I work in environments where the stack can be small and heap fragmentation needs to be avoided, so I'd use these rules: If the list is small and a known fixed size, stack. If the list is small and an unknown fixed size, you can consider both the heap and alloca(). Using the heap would be a fine choice if you can guarantee that your function doesn't allocate anything on the heap during the duration your allocation is going to be on there. If you can't guarantee this, you're asking for a fragment and alloca() would be a better choice. If the list is large or will need to grow, use the heap. If you can't guarantee it won't fragment, we tend to have some recourses for this built into our memory manager such as top-down allocations and separate heaps. Most situations don't call for people to worry about fragmentation, in which case they'd probably not recommend the usage of alloca. With respect to the class containing the list, if it's local to the function scope I would put it on the stack provided that the internal data structures are not extremely large.
