[site]: stackoverflow
[post_id]: 2726396
[parent_id]: 2726345
[tags]: 
The line @a() means " a is a callable, returning some other callable, which can be called with a function as its only argument and will return a callable". If you're not familiar with the term callable , it's just a generalization of function : it can be a function, a class, or an instance of a class that has a __call__ method. Your def a is returning None , so you're clearly violating the "decorator contract" that you're requesting with the @a() syntax. If you just used @a , without the () , then a would have to accept the function as its argument and return a callable. I'm not sure what you're trying to accomplish, but if it's just "print something in a decorator for a function, then this would work: def a(): print 'sss' return lambda f: f Now you can use @a() and live happily ever after, since this version does respect the "decorator contract" I explained in the first paragraph.
