[site]: stackoverflow
[post_id]: 5206868
[parent_id]: 5206780
[tags]: 
I had to do it in two functions (just because of the recursive nature of the search, but here's my bid: function mdarray_avg($array, $level = ''){ if (!is_array($array)) throw new Exception("First argument must be an array"); if (!is_string($level)) throw new Exception("Second argument must be string"); $ary = $array; $levels = explode('.',$level); foreach ($levels as $lvl){ if (array_key_exists($lvl,$ary)) $ary = $ary[$lvl]; else throw new Exception("Level {$level} doesn't exist"); } $numbers = _mdarray_avg($ary); $sum = array_sum($numbers); return ($sum > 0 ? $sum / count($numbers) : 0); } function _mdarray_avg($array){ if (!is_array($array)) return array($array); $numbers = array(); foreach ($array as $element){ if (is_array($element)) $numbers = array_merge($numbers,_mdarray_avg($element)); else $numbers[] = $element; } return $numbers; } Use it like so: echo "Average: ".mdarray_avg($t,'4'); // returns 11, as expected. Where $t is the array to search through, and the '4' is the level you're searching (could also be '1' , '4.2' , etc. Also, a fun note, exempting the second parameter averages the whole array, in this case I returned 7.5 ( avg(2,3,5,6,9,10,12,13) )
