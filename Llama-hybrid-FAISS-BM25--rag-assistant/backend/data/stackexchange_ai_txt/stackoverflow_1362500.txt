[site]: stackoverflow
[post_id]: 1362500
[parent_id]: 1362369
[tags]: 
Actually char , signed char and unsigned char are three different types. From the standard (ISO/IEC 9899:1990): 6.1.2.5 Types ... The three types char , signed char and unsigned char are collectively called the character types . (and in C++ for instance you have to (or at least should) write override functions with three variants of them if you have a char argument) Plain char might be treated signed or unsigned by the compiler, but the standard says (also in 6.1.2.5): An object declared as type char is large enough to store any member of the basic execution character set. If a member of the required source character set in 5.2.1 is stored in a char object, its value is guarantied to be positive. If other quantities are stored in a char object, the behavior is implementation-defined: the values are treated as either signed or nonnegative integers. and An object declared as type signed char occupies the same amount of storage as a ''plain'' char object. The characters referred to in 5.2.1 are A-Z, a-z, 0-9, space, tab, newline and the following 29 graphic characters: ! " # % & ' ( ) * + , - . / : ; ? [ \ ] ^ _ { | } ~ Answer All of that I interpret to basically mean that ascii characters with value less than 128 are guarantied to be positive. So if the values stored always are less than 128 it should be safe (from a value preserving perspective), although not so good practice.
