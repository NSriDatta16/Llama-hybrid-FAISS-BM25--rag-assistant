[site]: stackoverflow
[post_id]: 934134
[parent_id]: 928563
[tags]: 
Visual Basic.NET Number of characters: 9759 I'm more of a bowler myself. NOTE: does not take nested parentheses into account. Also, untested, but I'm pretty sure it works. Imports Microsoft.VisualBasic Imports System.Text Imports System.Collections.Generic Public Class Main Public Shared Function DoArithmaticFunctionFromStringInput(ByVal MathematicalString As String) As Double Dim numberList As New List(Of Number) Dim operationsList As New List(Of IOperatable) Dim currentNumber As New Number Dim currentParentheticalStatement As New Parenthetical Dim isInParentheticalMode As Boolean = False Dim allCharactersInString() As Char = MathematicalString.ToCharArray For Each mathChar In allCharactersInString If mathChar = Number.ZERO_STRING_REPRESENTATION Then currentNumber.UpdateNumber(mathChar) ElseIf mathChar = Number.ONE_STRING_REPRESENTATION Then currentNumber.UpdateNumber(mathChar) ElseIf mathChar = Number.TWO_STRING_REPRESENTATION Then currentNumber.UpdateNumber(mathChar) ElseIf mathChar = Number.THREE_STRING_REPRESENTATION Then currentNumber.UpdateNumber(mathChar) ElseIf mathChar = Number.FOUR_STRING_REPRESENTATION Then currentNumber.UpdateNumber(mathChar) ElseIf mathChar = Number.FIVE_STRING_REPRESENTATION Then currentNumber.UpdateNumber(mathChar) ElseIf mathChar = Number.SIX_STRING_REPRESENTATION Then currentNumber.UpdateNumber(mathChar) ElseIf mathChar = Number.SEVEN_STRING_REPRESENTATION Then currentNumber.UpdateNumber(mathChar) ElseIf mathChar = Number.EIGHT_STRING_REPRESENTATION Then currentNumber.UpdateNumber(mathChar) ElseIf mathChar = Number.NINE_STRING_REPRESENTATION Then currentNumber.UpdateNumber(mathChar) ElseIf mathChar = Number.DECIMAL_POINT_STRING_REPRESENTATION Then currentNumber.UpdateNumber(mathChar) ElseIf mathChar = Addition.ADDITION_STRING_REPRESENTATION Then Dim addition As New Addition If Not isInParentheticalMode Then operationsList.Add(addition) numberList.Add(currentNumber) Else currentParentheticalStatement.AllNumbers.Add(currentNumber) currentParentheticalStatement.AllOperators.Add(addition) End If currentNumber = New Number ElseIf mathChar = Number.NEGATIVE_NUMBER_STRING_REPRESENTATION Then If currentNumber.StringOfNumbers.Length > 0 Then currentNumber.UpdateNumber(mathChar) Dim subtraction As New Addition If Not isInParentheticalMode Then operationsList.Add(subtraction) numberList.Add(currentNumber) Else currentParentheticalStatement.AllNumbers.Add(currentNumber) currentParentheticalStatement.AllOperators.Add(subtraction) End If currentNumber = New Number Else currentNumber.UpdateNumber(mathChar) End If ElseIf mathChar = Multiplication.MULTIPLICATION_STRING_REPRESENTATION Then Dim multiplication As New Multiplication If Not isInParentheticalMode Then operationsList.Add(multiplication) numberList.Add(currentNumber) Else currentParentheticalStatement.AllNumbers.Add(currentNumber) currentParentheticalStatement.AllOperators.Add(multiplication) End If currentNumber = New Number ElseIf mathChar = Division.DIVISION_STRING_REPRESENTATION Then Dim division As New Division If Not isInParentheticalMode Then operationsList.Add(division) numberList.Add(currentNumber) Else currentParentheticalStatement.AllNumbers.Add(currentNumber) currentParentheticalStatement.AllOperators.Add(division) End If currentNumber = New Number ElseIf mathChar = Parenthetical.LEFT_PARENTHESIS_STRING_REPRESENTATION Then isInParentheticalMode = True ElseIf mathChar = Parenthetical.RIGHT_PARENTHESIS_STRING_REPRESENTATION Then currentNumber = currentParentheticalStatement.EvaluateParentheticalStatement numberList.Add(currentNumber) isInParentheticalMode = False End If Next Dim result As Double = 0 Dim operationIndex As Integer = 0 For Each numberOnWhichToPerformOperations As Number In numberList result = operationsList(operationIndex).PerformOperation(result, numberOnWhichToPerformOperations) operationIndex = operationIndex + 1 Next Return result End Function Public Class Number Public Const DECIMAL_POINT_STRING_REPRESENTATION As Char = "." Public Const NEGATIVE_NUMBER_STRING_REPRESENTATION As Char = "-" Public Const ZERO_STRING_REPRESENTATION As Char = "0" Public Const ONE_STRING_REPRESENTATION As Char = "1" Public Const TWO_STRING_REPRESENTATION As Char = "2" Public Const THREE_STRING_REPRESENTATION As Char = "3" Public Const FOUR_STRING_REPRESENTATION As Char = "4" Public Const FIVE_STRING_REPRESENTATION As Char = "5" Public Const SIX_STRING_REPRESENTATION As Char = "6" Public Const SEVEN_STRING_REPRESENTATION As Char = "7" Public Const EIGHT_STRING_REPRESENTATION As Char = "8" Public Const NINE_STRING_REPRESENTATION As Char = "9" Private _isNegative As Boolean Public ReadOnly Property IsNegative() As Boolean Get Return _isNegative End Get End Property Public ReadOnly Property ActualNumber() As Double Get Dim result As String = "" If HasDecimal Then If DecimalIndex = StringOfNumbers.Length - 1 Then result = StringOfNumbers.ToString Else result = StringOfNumbers.Insert(DecimalIndex, DECIMAL_POINT_STRING_REPRESENTATION).ToString End If Else result = StringOfNumbers.ToString End If If IsNegative Then result = NEGATIVE_NUMBER_STRING_REPRESENTATION & result End If Return CType(result, Double) End Get End Property Private _hasDecimal As Boolean Public ReadOnly Property HasDecimal() As Boolean Get Return _hasDecimal End Get End Property Private _decimalIndex As Integer Public ReadOnly Property DecimalIndex() As Integer Get Return _decimalIndex End Get End Property Private _stringOfNumbers As New StringBuilder Public ReadOnly Property StringOfNumbers() As StringBuilder Get Return _stringOfNumbers End Get End Property Public Sub UpdateNumber(ByVal theDigitToAppend As Char) If IsNumeric(theDigitToAppend) Then Me._stringOfNumbers.Append(theDigitToAppend) ElseIf theDigitToAppend = DECIMAL_POINT_STRING_REPRESENTATION Then Me._hasDecimal = True Me._decimalIndex = Me._stringOfNumbers.Length ElseIf theDigitToAppend = NEGATIVE_NUMBER_STRING_REPRESENTATION Then Me._isNegative = Not Me._isNegative End If End Sub Public Shared Function ConvertDoubleToNumber(ByVal numberThatIsADouble As Double) As Number Dim numberResult As New Number For Each character As Char In numberThatIsADouble.ToString.ToCharArray numberResult.UpdateNumber(character) Next Return numberResult End Function End Class Public MustInherit Class Operation Protected _firstnumber As New Number Protected _secondnumber As New Number Public Property FirstNumber() As Number Get Return _firstnumber End Get Set(ByVal value As Number) _firstnumber = value End Set End Property Public Property SecondNumber() As Number Get Return _secondnumber End Get Set(ByVal value As Number) _secondnumber = value End Set End Property End Class Public Interface IOperatable Function PerformOperation(ByVal number1 As Double, ByVal number2 As Number) As Double End Interface Public Class Addition Inherits Operation Implements IOperatable Public Const ADDITION_STRING_REPRESENTATION As String = "+" Public Sub New() End Sub Public Function PerformOperation(ByVal number1 As Double, ByVal number2 As Number) As Double Implements IOperatable.PerformOperation Dim result As Double = 0 result = number1 + number2.ActualNumber Return result End Function End Class Public Class Multiplication Inherits Operation Implements IOperatable Public Const MULTIPLICATION_STRING_REPRESENTATION As String = "*" Public Sub New() End Sub Public Function PerformOperation(ByVal number1 As Double, ByVal number2 As Number) As Double Implements IOperatable.PerformOperation Dim result As Double = 0 result = number1 * number2.ActualNumber Return result End Function End Class Public Class Division Inherits Operation Implements IOperatable Public Const DIVISION_STRING_REPRESENTATION As String = "/" Public Const DIVIDE_BY_ZERO_ERROR_MESSAGE As String = "I took a lot of time to write this program. Please don't be a child and try to defile it by dividing by zero. Nobody thinks you are funny." Public Sub New() End Sub Public Function PerformOperation(ByVal number1 As Double, ByVal number2 As Number) As Double Implements IOperatable.PerformOperation If Not number2.ActualNumber = 0 Then Dim result As Double = 0 result = number1 / number2.ActualNumber Return result Else Dim divideByZeroException As New Exception(DIVIDE_BY_ZERO_ERROR_MESSAGE) Throw divideByZeroException End If End Function End Class Public Class Parenthetical Public Const LEFT_PARENTHESIS_STRING_REPRESENTATION As String = "(" Public Const RIGHT_PARENTHESIS_STRING_REPRESENTATION As String = ")" Private _allNumbers As New List(Of Number) Public Property AllNumbers() As List(Of Number) Get Return _allNumbers End Get Set(ByVal value As List(Of Number)) _allNumbers = value End Set End Property Private _allOperators As New List(Of IOperatable) Public Property AllOperators() As List(Of IOperatable) Get Return _allOperators End Get Set(ByVal value As List(Of IOperatable)) _allOperators = value End Set End Property Public Sub New() End Sub Public Function EvaluateParentheticalStatement() As Number Dim result As Double = 0 Dim operationIndex As Integer = 0 For Each numberOnWhichToPerformOperations As Number In AllNumbers result = AllOperators(operationIndex).PerformOperation(result, numberOnWhichToPerformOperations) operationIndex = operationIndex + 1 Next Dim numberToReturn As New Number numberToReturn = Number.ConvertDoubleToNumber(result) Return numberToReturn End Function End Class End Class
