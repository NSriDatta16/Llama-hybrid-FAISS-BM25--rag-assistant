[site]: stackoverflow
[post_id]: 3221139
[parent_id]: 3219206
[tags]: 
Here's the tl;dr version: if you find yourself writing more than a page of bash, stop and rewrite it in a real programming language . I don't care if its Perl or Python or Ruby. Just don't create unmaintainable 500 line shell hairballs. Now, in addition to the existing answers... Perl has a debugger. A lot of people don't use the Perl debugger, but I rely heavily on it. Its a nightmare for me to figure out what a big shell script is doing. I find this cycle: "sprinkle debugging echos around the code, run, look at the debugging output, realize I need to know something else, sprinkle more echos, repeat" to be very slow and frustrating. Running code in a debugger lets you examine the data as you need it, and perform more examinations as you have a better understanding what you need. Perl is cross platform. A bash script isn't going to work on Windows without help, but that's not really what I'm talking about. Bash relies on the salad of command line programs that come with a Unix system... maybe. Assuming they exist, these don't always work the same. Things like find and grep . Is it the GNU version? The BSD version? Maybe an old Sun/AIX/ version? Does it support the flags you're throwing at it? But hey, you only use Fedora or Debian or whatever, who cares? Eventually either your distribution is going to change something incompatibly, or you're going to want to move to a different system and suddenly you find yourself with a huge mess. "Why is that server still running Redhat 7?!" is often because it has some fragile shell scripts doing something important. Which brings us to... Perl can declare its dependencies. If a Perl program needs a certain version of Perl and certain modules it can declare that in a machine readable way by the relatively simple measure of distributing it as a Perl module. Bash has no such mechanism (you could make a dpkg or rpm, which is its own hell) so you have no idea what sort of assumptions your bash script has made. Perl is easy to test. I'm sure its possible to decompose and test a bash program, and someone out there writes beautifully architected shell code. Its like skiing uphill, or a dancing bear. Its very impressive, but not very practical. So nobody does it. Whereas Perl ships with a test framework, has easy tricks to make even single-file programs easy to test, and encourages you to decompose large programs into libraries.
