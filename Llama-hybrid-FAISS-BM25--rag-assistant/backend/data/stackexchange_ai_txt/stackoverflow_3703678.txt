[site]: stackoverflow
[post_id]: 3703678
[parent_id]: 3673595
[tags]: 
One option is to translate the way that total cost is calculated into an SQL expression so that you can then substitute that expression for any reference you might need to 'total_cost' in a query. That could potentially be quite cumbersome if total cost is complicated to calculate or depends on several tables. If it is feasible it does sound like it makes sense to have a total_cost attribute on your Article model. Instead of having the calculation take place when someone calls the method a.total_cost you could calculate it when the model changes using a callback and save it then. For example: def before_save self.total_cost = ... whatever ... end That would allow you to use the sum and average the total costs. It would be much more efficient than getting articles, calculating the total cost for each and then aggregating them. It would probably also be more efficient than calculating it each time it is requested. That solution is dependent on the value for total cost not changing a lot. If it changes all the time based on various different objects changing then it will be more awkward to detect when total cost must change and less efficient to calculate it in this way. It would certainly make your calculations easier though.
