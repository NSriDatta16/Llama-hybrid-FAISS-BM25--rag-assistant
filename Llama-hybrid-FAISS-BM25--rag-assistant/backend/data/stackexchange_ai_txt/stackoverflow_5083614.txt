[site]: stackoverflow
[post_id]: 5083614
[parent_id]: 
[tags]: 
More on: Help Structuring VS2010 Solutions/Projects and TFS2010

This is a follow-on post to our previous post (Help Structuring VS2010 Solutions/Projects and TFS2010). We have a few questions regarding how to structure our VS2010 solutions and projects for best organization, as well as to save in and use TFS2010. Currently, our code is structured something like: /OverallAppName OverallAppName.sln -/Client - -/WindowsFormsProject1 WindowsFormsProject1.sln - -/WindowsFormsProject2 WindowsFormsProject2.sln -/Components - -/ClassLibrary1 (common library referenced by other projects) ClassLibrary1.sln - -/ClassLibrary2 ClassLibrary2.sln - -/ClassLibrary3 ClassLibrary3.sln - -/ClassLibrary4 ClassLibrary4.sln - -/ClassLibrary5 ClassLibrary5.sln -/Server - -/WindowsServiceProject1 WindowsServiceProject1.sln - -/WindowsServiceProject2 WindowsServiceProject2.sln - -/WebProject1 WebProject1.sln - -/WebProject2 WebProject2.sln Since, right now, we’re in the process of moving from VSS to TFS2010, we’re wanting to structure all our solutions/projects to be most efficient, most logical, easiest to maintain, easiest to reference, and easiest to use with and build in TFS2010, and we’re needing some advice on the “best” way to structure everything with a partitioned solution model. Any suggestions????? How can we structure all these different types of VS2010 projects into a logical structure that separate groups can work on individual pieces (not the entire solution), we can still have project references, we can stored in TFS2010 and build and branch in there, and follow “recommended best practices”? Thanks. (Sorry, I'm not sure the formatting came out very good.)
