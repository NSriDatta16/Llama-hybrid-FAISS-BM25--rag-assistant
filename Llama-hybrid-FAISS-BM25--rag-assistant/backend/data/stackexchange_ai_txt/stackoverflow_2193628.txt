[site]: stackoverflow
[post_id]: 2193628
[parent_id]: 
[tags]: 
Response.Flush breaking Page Caching

I have some code that is used to replace certain page output with other text. The way I accomplish this is by setting the Response.Filter to a Stream, Flushing the Response, and then reading that Stream back into a string. From there I can manipulate the string and output the resulting code. You can see the basic code for this over at Render a view as a string . However, I noticed that Page Caching no longer works after the first Response.Flush call. I put together a simple ASP.NET WebApp as an example. I have a Default.aspx with an @OutputCache set for 30 seconds. All this does is output DateTime.Now.ToLongTimeString(). I override Render. If I do a Response.Flush (even after the base.Render) the page does not get cached. This is regardless of any programmatic cacheability that I set. So it seems that Response.Flush completely undermines any page caching in use. Why is this? extra credit : is there a way to accomplish what I want (render output to a string) that will not result in Page Cache getting bypassed? ASPX Page: Code-behind (Page is Cached): protected override void Render(HtmlTextWriter writer) { base.Render(writer); } Code-behind (Page is not cached): protected override void Render(HtmlTextWriter writer) { base.Render(writer); Response.Flush(); } Code-behind (Page still is not cached): protected override void Render(HtmlTextWriter writer) { base.Render(writer); Response.Cache.SetCacheability(HttpCacheability.Server); Response.Cache.SetExpires(DateTime.Now.AddSeconds(30)); Response.Flush(); }
