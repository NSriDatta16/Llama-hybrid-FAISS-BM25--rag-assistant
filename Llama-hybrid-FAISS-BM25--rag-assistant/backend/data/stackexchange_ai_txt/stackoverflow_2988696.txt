[site]: stackoverflow
[post_id]: 2988696
[parent_id]: 2982329
[tags]: 
I generally keep files outside of the website directory structure for security and request like so: function retrive_file($file_hash) { $this->_redirect(); $this->db->where('file_hash', $file_hash); $query = $this->db->get('file_uploads'); if($query->num_rows() > 0) { $file_info = $query->row(); if($file_info->protect == 1){ $this->_checklogin(); } $filesize = filesize($file_info->file_path . $file_info->file_name); $file = fopen($file_info->file_path . $file_info->file_name, "r"); // Generate the server headers if (strstr($_SERVER['HTTP_USER_AGENT'], "MSIE")) { header('Content-Type: "application/octet-stream"'); header('Content-Disposition: attachment; filename="'.$file_info->file_name.'"'); header('Expires: 0'); header('Cache-Control: must-revalidate, post-check=0, pre-check=0'); header("Content-Transfer-Encoding: binary"); header('Pragma: public'); header("Content-Length: ".$filesize); } else { header('Content-Type: "application/octet-stream"'); header('Content-Disposition: attachment; filename="'.$file_info->file_name.'"'); header("Content-Transfer-Encoding: binary"); header('Expires: 0'); header('Pragma: no-cache'); header("Content-Length: ".$filesize); } if($file) { while(!feof($file)){ set_time_limit(0); echo fread($file, $filesize); flush(); ob_flush(); } } fclose($file); } } It would be pretty trivial to add byte/request counting to this.
