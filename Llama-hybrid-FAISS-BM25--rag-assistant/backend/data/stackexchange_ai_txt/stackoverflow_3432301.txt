[site]: stackoverflow
[post_id]: 3432301
[parent_id]: 3432116
[tags]: 
First of all, this is an NP-hard problem - for instance, any algorithm that can solve your problem, can solve the Longest Path problem of a weighted graph as follows: Each graph vertex is a person Any edge of the graph can be encoded by creating a new hobby, shared by only the two vertices/persons of the edge (There might be a simpler reduction to an NP-complete problem, but I guess this will do). Skiena would suggest Simulated Annealing , start with any arrangement, and make random choices. The trick is progressively lowering the probability that you accept a worsening change (thus, at the start you allow it some liberty to avoid local optima, but progressively it "cools off" and stabilizes at some area and make small refinements). You can also run it multiple times and keep the best solution. You can probably hand-code something less sophisticated in the same spirit. I guess your problem instances are going to be small, so you are bound to find good solutions if you try to many of them (and try to randomly refine them). Of course, if your problems are very small, you could just enumerate all permutations and find the best arrangement. (If you have n people, make sure you fix the position of someone and only generate the permutations for n - 1 people).
