[site]: stackoverflow
[post_id]: 5540909
[parent_id]: 
[tags]: 
Why do JTextArea and TextLayout wrap words differently?

We have an app that draws text, but then displays a JTextArea for the user to edit the text when they click on the text. However, the wrapping between these two text-handling components differs. They use the same width, text String, and Font. For the text-drawing, I'm using the from the Java tutorial, which I've also seen used by others in related questions here and other forums. Here's that part of the code: FontRenderContext frc = g2d.getFontRenderContext(); TextLayout layout; AttributedString attrString = new AttributedString(myText); AttributedCharacterIterator charIterator; int paragraphStart; int paragraphEnd; LineBreakMeasurer lineMeasurer; float breakWidth; float drawPosX; float drawPosY; attrString.addAttribute(TextAttribute.FONT, myFont); charIterator = attrString.getIterator(); paragraphStart = charIterator.getBeginIndex(); paragraphEnd = charIterator.getEndIndex(); lineMeasurer = new LineBreakMeasurer(charIterator, frc); // Set break width to width of Component. breakWidth = myTextWidth; drawPosY = startY // Set position to the index of the first character in the paragraph. lineMeasurer.setPosition(paragraphStart); textBounds = new Rectangle(startX, startY(), 0, 0); // Get lines from until the entire paragraph has been displayed. while (lineMeasurer.getPosition() The JTextArea is much simpler: JTextArea textArea = new JTextArea(myText); textArea.setSize(myTextWidth, myTextThing.getHeight()); textArea.setOpaque(true); textArea.setVisible(true); textArea.setLineWrap(true); textArea.setWrapStyleWord(true); textArea.setFont(myFont); textArea.setBorder(null); I set the border to null because I have another rectangle drawn outside the bounds of the text area with a dashed area to show where it is. Might seem silly now, but we use it to show the bounds of the text area when the user first selects the text they want to edit. At that point, the JTextArea isn't yet created. They have to click on it again to begin editing. The reason for this is that once a text area is selected, they may also drag and resize the text area, and that gets messy and more confusing if they had a live JTextArea when they started dragging and resizing. Separately, both the drawn TextLayouts and the JTextArea appear to wrap words just fine. but when used together you can see the difference. The problem with this is that while the user is editing the text, the JTextArea is doing its thing to wrap the text. But when the user JTextArea loses focus, it is converted to the drawn text, and then the words may be wrapped differently.
