[site]: stackoverflow
[post_id]: 1025272
[parent_id]: 954498
[tags]: 
I'm doing something similar to this, and I just created my own subclass of UISlider. I implemented the standard UIResponder touch functions and performed my own code before calling through to the superclass. Using this approach will provide you with fine grained access to the touch phase information, and you could put the timer within the slider object (seems the best OO way to do it?) Here's a bit of code that would allow you to add your own behaviors to touchesBegan. Depending on your need, you could also override touchesMoved and touchesEnded. As long as you call through to the superclass, there shouldn't be any change in the slider's behavior. In my case, I want the gray track of the UISlider to be clickable, so I manually set the slider's value based on the touch location. - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event { // set our value, if necessary CGRect t = [self trackRectForBounds: [self bounds]]; float v = [self minimumValue] + ([[touches anyObject] locationInView: self].x - t.origin.x - 4.0) * (([self maximumValue]-[self minimumValue]) / (t.size.width - 8.0)); [self setValue: v]; [super touchesBegan: touches withEvent: event]; } Hope that helps,
