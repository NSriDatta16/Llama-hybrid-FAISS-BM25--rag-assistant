[site]: stackoverflow
[post_id]: 4250884
[parent_id]: 4250673
[tags]: 
Putting [Serializable] on a Type allows you to use it with the [System.Runtime.Serialization][1] API's, which are pretty handy for the most common scenarios and spare you from writing a lot of repetitive code for serializing/deserializing your objects, which is usually cumbersome to test and error prone. And they gain you some flexibility in terms of the underlying storage mechanisms as well (such as Binary, XML, SOAP...). If you put [Serializable] on one of your Types, you should make sure it will serialize/deserialize properly using the standard mechanisms or you need to implement ISerializble to control the process yourself. Things you should avoid serializing are e.g. event handler properties. Most notably, when deciding whether to use Serializable or not is that you get a free serialization of the full object graph (root object plus all its associations and their associations), which would otherwise be very complex, especially if inheritance is involved. But for this to work, it requires you to have all your types in the graph marked Serializable .
