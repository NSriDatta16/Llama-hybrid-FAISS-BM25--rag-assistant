[site]: stackoverflow
[post_id]: 2079622
[parent_id]: 1073958
[tags]: 
Regarding your part b, from 17.3.1.2 "Requirements", paragraph 1: The library can be extended by a C++ program. Each clause, as applicable, describes the requirements that such extensions must meet. Such extensions are generally one of the following: Template arguments Derived classes Containers, iterators, and/or algorithms that meet an interface convention While 17.3 is informative instead of binding, the committee's intent on derived class behavior is clear. For other very similar points of extension, there are clear requirements: 17.1.15 "required behavior" covers replacement (operator new, etc.) and handler functions (terminate handlers, etc.) and throws all non-compliant behavior into UB-land. 17.4.3.6/1: "In certain cases (replacement functions, handler functions, operations on types used to instantiate standard library template components), the C++ Standard library depends on components supplied by a C++ program. If these components do not meet their requirements, the Standard places no requirements on the implementation." In the last point it's not clear to me that the parenthetical list is exhaustive, but given how specifically each mentioned case is dealt with in the next paragraph, it would be a stretch to say the current text was intended to cover derived classes. Additionally, that 17.4.3.6/1 text is unchanged in the 2008 draft (where it's in 17.6.4.8) and I see no issues addressing either it or derived classes' virtual methods.
