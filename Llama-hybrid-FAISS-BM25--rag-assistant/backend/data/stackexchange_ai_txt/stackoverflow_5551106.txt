[site]: stackoverflow
[post_id]: 5551106
[parent_id]: 5549979
[tags]: 
//alt. 1 List offers; List cars; Map > mapCarToOffers; Map > mapOfferToCars; public void List getOffersForCar(Car aCar); public void List getCarsForOffer(Offer anOffer); Alternative 1 would make use of the hashCode() of Car and Offer //alt. 2 List offers; List cars; Map > mapCarIdToOffers; Map > mapOfferIdToCars; public void List getOffersForCarId(int aCarId); public void List getCarsForOfferId(int anOfferId); Alternative 2 would make use of the hashCode() of Integer . This would allay your concerns about "safety" as the hash codes for Integer objects should not overlap where the values are unique. This incurs the additional overhead of having to maintain unique IDs for each Car and Offer object, however, I am guessing that you probably already have those from your business requirements. Note, you may choose to use other classes as alternative to int s for ID's (e.g. String ). For both alternatives, implement the List s with ArrayList or LinkedList - which one is better is up to you to determine based on other requirements, such as the frequency of insertion/deletion vs lookup. Implement the Map s with HashMap - see comments above about how hash codes are used. As a side note, in our software, we use these both of the above to represent similar types of many-to-many data. Very similar to your use case. Both alternatives work very well.
