[site]: stackoverflow
[post_id]: 3221746
[parent_id]: 3221414
[tags]: 
I think type of storage and regular expressions would be the least of your concerns in modeling this. You are essentially writing a simple rule engine to compute the salary of an employee. Figuring out what those rules is the most important part of this problem. Ensuring that rules are complete, consistent, and deterministic is another important piece. By deterministic, I mean you cannot have two rules like: Default(0-100)=20 Default(50-100)=25 as the system does not know how to compute the wages for hours 50-100 since there are two choices. By complete, I mean the rules should be able to compute the wages given any employee and the number of hours they worked. Take another example: Default(0-100)=20 Default(125-150)=25 If an employee worked for 150 hours, the system does not know their earned wages for hours 101-125. So incompleteness is another problem. Assuming the rules are complete and deterministic, we can proceed with modeling. If hours worked can be fractional, then the solution will need to proportionally split the hourly wage. It looks like there is a default salary and then salaries specific to an employee. Salaries specific to an employee always take precedence over the default salary. So in a simple if-else pseudo-code, it would look like: get-wages (employee, hours-worked) total-wage = 0 for each ith hour worked hourly-wage = get-hourly-wage (employee, ith-hour) fraction-of-hour-worked = get-fraction-of-hour-worked(ith-hour, hours-worked) total-wage += hourly-wage * fraction-of-hour-worked return total-wage end get-hourly-wage (employee, hour-number) if employee has specific wage for hour number return that else if there is default wage for hour number return that else throw error("no wage available for hour number [hour-number]") end get-fraction-of-hour-worked (hour-number, hours-worked) difference = hours-worked - hour-number if difference >= 1 return 1 else return difference end Checkout this article that gives one approach to writing a rule engine and interestingly it uses employees and wages as an example, so it might be helpful. Some more interesting articles about rule engines that you might find useful: Using a Rule Engine Decision Tables Production System Production Rules
