[site]: stackoverflow
[post_id]: 2997873
[parent_id]: 2997803
[tags]: 
The type of pattern that would suit the above solution would be the Factory Pattern . You have a situation where you don't need to know the concrete type of object you require, it just has to implement IGruntWorker . So you create a factory which takes in a criteria and based on that criteria you would return the specific IGruntWorker object. It is usually a good idea to map the criteria to some identifier i.e. an enumeration or constant for readability e.g. public enum WorkerType { Newbie, Average, Expert } public class WorkerFactory { public static IGruntWorker GetWorker(WorkerType type) { switch (type) { case WorkerType.Newbie: return new NewbieWorker(); case WorkerType.Average: return new AverageWorker(); case WorkerType.Expert: return new ExpertWorker(); } } } So in your case you could have a small helper method that works out the correct type of Worker required based on the criteria. This could even be wrapped up in a read-only property which you just pass into the factory.
