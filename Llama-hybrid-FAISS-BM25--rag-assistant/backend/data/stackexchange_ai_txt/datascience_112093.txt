[site]: datascience
[post_id]: 112093
[parent_id]: 112076
[tags]: 
Discovering the best prices is based on sales prediction: the more the demand will be, the higher you can increase the price and vice versa. But before making predictions through data science models, the first step is to analyze data with libraries like numpy, pandas, or seaborn. This will help you to understand general sales issues and take the first strategic decisions such as top & worst sales, trends, or detect some seasonality. articles = pd.read_csv("file_path" / "articles.csv", dtype = {'article_id': str}) articles_2020 = articles.date_range("2019-01-01","2019-12-31") best_sales_2020 = articles_2020.sort_values(["sales_count"], ascending=False).head(10) Here you have clothing data from H&M with notebooks: https://www.kaggle.com/code/negoto/h-m-sales-period-of-fashion-items-with-k-means/data Then, you can use machine learning models to do accurate predictions. Random Forest (RF) is a good one to start with because it has good results with a few lines of code: from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestRegressor # Divide the data between units sold and influencing factors X = articles.filter(["price","date","category","..."])* Y = df["sales_count"] # Split the data into training and testing sets X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state = 3) # Set up and run the model RFRegressor = RandomForestRegressor(n_estimators = 10) RFRegressor.fit(X_train, Y_train) predictions = RFRegressor.predict(X_test) error = Y_test - predictions *Note: A good practice is to use day, month, and year separately instead of the full date in order to build rules easily with RF. Source: https://towardsdatascience.com/predicting-e-commerce-sales-with-a-random-forest-regression-3f3c8783e49b
