[site]: stackoverflow
[post_id]: 3855100
[parent_id]: 3854377
[tags]: 
Unobtrusive JS, or "progressive enhancement" is the way to go. Step 1: Build your page first to work without JavaScript. Let's say you have a simple application where a user selects something and hits submit. Depending on the selection, you will either display a helpful error message above the form or you'll update the page with the correct output and hide (or get rid of) the form. Build this page like you would for AJAX, but do not script anything yet. Here's your page: p#feedback { display:none;} Do Foo Do Bar On a successful submission. the server will get a request with one $_POST value: requestedAction=foo (or bar ). Based on this, your server script will construct a new page with everything from to . At this point, you have a page that works in any non-JS-enabled browser. Old fashioned. Very reliable. Step 2 Add the scripting to override the default submit behavior. Grab the data you need from the page and construct an AJAX submission. The only difference between this and the submission above is that you will add a flag telling the server that the request is coming via AJAX and to send back only the needed message (you could also send it to a different script). The server script will basically go through the same logic as above, but rather than building the entire page, it only sends back the message string and leaves it to AJAX to put that data in the right place. Your response could be just a text fragment, a block of HTML or an XML data structure. It depends on your needs. $(enhance); // at onDOMReady, run the enhance function function enhance() { // Override the default form submission behavior: $('form#actionform').bind('submit',doSubmit); }; function doSubmit(event) { $.ajax( { type:'POST', url:'/path/to/getaction.php', data:'request=' + $('form#actionform select[name=requestedAction]').val() + '&type=ajax', success:fnCallback } ); // Kill the submit action so the user doesn't leave the page event.preventDefault(); }; function fnCallback(xhr) { var strResponse = xhr.responseText; if (strResponse === "error") { $('div#feedback').text("There was an error. Please try again."); } else { $('div#feedback').text(strResponse); $('div#form').hide(); } }; In this case, the AJAX submission will be identifiable to the server because there is a second POST parameter of type=ajax . A site that does this really unbelievably well on a very big scale is ESPN. Turn off JS and check out their main story headlines under the big picture. The behavior is identical to their AJAX-enabled page and aside from the video not working, you really would never know if your JS was on or off. There's basically no way to build a site like this without starting from dumb HTML and building up.
