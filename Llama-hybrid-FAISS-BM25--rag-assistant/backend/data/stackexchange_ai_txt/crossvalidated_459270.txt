[site]: crossvalidated
[post_id]: 459270
[parent_id]: 458789
[tags]: 
You describe a dataset that could be represented as a sequence of tuples $(n_{1i}, n_{2i}, k_{1i}, k_{2i})$ where $k_{ji}$ is an observation of a random variable $K_{ji}$ that follows a Binomial $(n_{ji}, p_{ji})$ distribution. Your model supposes that all the $K_{ji}$ are independent, the $n_{ji}$ are known, and for each $i,$ $p_{1i}=\alpha\,p_{2i}.$ Thus the unknown parameters are $\alpha,$ whose value you wish to estimate, along with the "nuisance parameters" $p_{2i}.$ Simplify the notation by writing $p_{2i} = p_i.$ In terms of these parameters, the independence assumption implies the likelihood of the data is $$\mathcal{L} = \prod_i \binom{n_{1i}}{k_{1i}}\left(\alpha p_i\right)^{k_{1i}}\left(1-\alpha p_i\right)^{n_{1i}-k_{1i}}\ \prod_i \binom{n_{2i}}{k_{2i}}\left(p_i\right)^{k_{2i}}\left(1-p_i\right)^{n_{2i}-k_{2i}}.$$ Ignoring the factors that depend only on the data, the part of $\mathcal L$ that depends on the parameters is $$\mathcal{L}\,\propto\, \prod_i \left(\alpha p_i\right)^{k_{1i}}\left(1-\alpha p_i\right)^{n_{1i}-k_{1i}}\left(p_i\right)^{k_{2i}}\left(1-p_i\right)^{n_{2i}-k_{2i}}.$$ Maximize the likelihood in two stages. First, given some arbitrary value of $\alpha,$ find the $p_i$ that minimize $\mathcal L.$ To do so, let $p=p_i$ be any one of these parameters. The factor of $\mathcal L$ that varies with $p$ is merely $$\lambda_i(p;\alpha) = \left(\alpha p\right)^{k_{1i}}\left(1-\alpha p\right)^{n_{1i}-k_{1i}}\left(p\right)^{k_{2i}}\left(1-p\right)^{n_{2i}-k_{2i}}.$$ The usual differential Calculus procedure applies: the critical points of $\lambda_i$ (as a function of $p$ ) are the endpoints $\{0, \min(1,1/\alpha)\}$ of its domain together with the zeros of its derivative. Drop the " $i$ " subscripts for the moment. A straightforward calculation shows those zeros satisfy the quadratic equation $$\alpha n\, p^2 - (\alpha(n_1+k_2)\,+\,n_2+k_1)\,p + k = 0$$ where $n = n_1+n_2$ and $k=k_1+k_2.$ This gives up to four candidate solutions for $p,$ of which the best (the one that makes $\mathcal L$ largest) can be selected by evaluating $\mathcal L$ at each. Doing this for all $i$ maximizes $\mathcal L$ as a function of $\alpha.$ The maximum likelihood is obtained by maximizing this function of $\alpha$ and the value of $\alpha$ that maximizes it is the maximum likelihood estimate $\hat\alpha$ . Other values of $\alpha$ for which the deviance $$2\left(\mathcal{L}(\alpha) - \mathcal{L}(\hat\alpha)\right)$$ is less than the $1 - q^\text{th}$ percentile of the chi-squared distribution with one degree of freedom form a $1-q$ confidence interval for $\alpha.$ Here are graphs of $\mathcal{L}(\alpha)$ for 18 datasets created with $\alpha=1/2.$ The data are indicated in the titles with two lines of the form " $k_{ji}/n_{ji}$ " (the top line is for $j=1$ ). The true value of $\alpha$ is indicated with vertical red dashed lines while the value of $\hat \alpha$ is indicated with a vertical solid black line. The $1-1/18 = 94\%$ confidence intervals are formed by all $\alpha$ for which the graph falls below the horizontal solid red lines. There appears to be little systematic bias in the estimates. We would expect $\alpha$ in one of these datasets to fall outside the confidence interval. This occurs in row 2, column 4 and is close to occurring in row 1, column 1 and row 3, columns 5 and 6. However, repetitions of this procedure (with different starting random number seeds) indicate it is working as planned: only about one in every 18 confidence intervals fails to cover the true value of $\alpha.$ This is a fairly difficult test: the sample sizes are small and in several cases there were no "successes" at all in one of the data groups. Further simulations indicate this procedure works well even with tiny datasets (such as two groups of data averaging three observations per group). This is the R code used to produce the figure. # # Quadratic solver. # Returns real roots of Ax^2 + Bx + C as a 2 X n array. # qsolve 0, -1, 1) * sqrt(D)) i 1 || alpha*p > 1) return(Inf) log0 0, use log(alpha) = a as parameter p.hat
