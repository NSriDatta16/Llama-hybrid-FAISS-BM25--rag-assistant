[site]: stackoverflow
[post_id]: 2040036
[parent_id]: 
[tags]: 
If 256 threads give better performance than 8 have I likely got the wrong approach?

I've just started programming with POSIX threads on dual-core x86_64 Linux system. It seems that 256 threads is about the optimum for performance with the way I've done it. I'm wondering how this could be? And if it could mean that my approach is wrong and a better approach would require far fewer threads and be just as fast or faster? For further background (the program in question is a skeleton for a multi-threaded M-set image generator) see the following questions I've asked already: Using threads, how should I deal with something which ideally should happen in sequential order? How can my threaded image generating app get itâ€™s data to the gui? Perhaps I should mention that the skeleton (in which I've reproduced minimal functionality for testing and comparison) is now displaying the image, and the actual calculations are done almost twice as fast as the non-threaded program. So if 256 threads running faster than 8 threads is not indicative of a poor approach to threading, how come 256 threads does outperform 8 threads? The speed test case is a portion of the Mandelbrot Set located at: xmin -0.76243636067708333333333328 xmax -0.7624335575810185185185186 ymax 0.077996663411458333333333929 calculated to a maximum of 30000 iterations. On the non-threaded version rendering time on my system is around 15 seconds. On the threaded version, averages speed for 8 threads is 7.8 seconds, while 256 threads is 7.6 seconds.
