[site]: stackoverflow
[post_id]: 2767985
[parent_id]: 2767823
[tags]: 
if you store the arrays in a file you could do a lazy load public class Class1 { const int CountOfEntries = 17700; //or what ever the count is IEnumerable > load() { using (var reader = File.OpenText("somefile")) { while (!reader.EndOfStream) { var line = reader.ReadLine(); var pair = line.Split(','); yield return new KeyValuePair (int.Parse(pair[0]), pair[1]); } } } private static Dictionary _lookup = new Dictionary (); private static IEnumerator > _loader = null; private string LookUp(int index) { if (_lookup.Count the code expectes the file to have one pair on each line like so: index0,name0 index1,name1 If the first index sought is at the end this will perform slower probably (due to IO mainly) but if the access is random the average case woul be reading half of the values the first time if the access is not random make sure to keep the most used in the top of the file there are a few more issues to considere. The above code is not threadsafe for the load operation and to increase responsiveness of the rest of the code keep the loading in a background thread hope this helps
