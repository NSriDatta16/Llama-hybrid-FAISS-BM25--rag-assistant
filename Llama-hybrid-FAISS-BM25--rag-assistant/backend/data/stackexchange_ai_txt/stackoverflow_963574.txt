[site]: stackoverflow
[post_id]: 963574
[parent_id]: 962397
[tags]: 
There is a balance to be struck between an enormous number of finely organized headers and a single header that includes everything. Consider the Standard C library; there are some biggish headers like , which declares a lot of functions, but they are all related to I/O. There are other headers that are more of a miscellany - notably . The Goddard Space Flight Center guidelines for C are worth hunting down. The basic rule is that each header should declare the facilities provided by a suitable (usually small) set of source files. The facilities and header should be self-contained. That is, if someone needs the code in header "something.h" , then that should be the only header that must be added to the compilation. If there are facilities needed by "something.h" that are not declared in the header, then it must include the relevant headers. That can mean that headers end up including because one of the functions uses size_t , for example. As @quamrana points out, you can use forward declarations for structures (not classes, since the question is tagged C and not C++) when appropriate - which primarily means when the interface takes pointers and does not need to know the size of the structures or any of the members.
