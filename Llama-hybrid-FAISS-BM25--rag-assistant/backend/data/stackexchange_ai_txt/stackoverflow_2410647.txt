[site]: stackoverflow
[post_id]: 2410647
[parent_id]: 2408212
[tags]: 
I use the .NET UDPClient often and I have always used the Socket.ReceiveBufferSize and have good results. Internally it calls Socket.SetSocketOption with the ReceiveBuffer parameter. Here is a some quick, simple, code you can test with: public static void Main(string[] args) { IPEndPoint remoteEp = null; UdpClient client = new UdpClient(4242); client.Client.ReceiveBufferSize = 4096; Console.Write("Start sending data..."); client.Receive(ref remoteEp); Console.WriteLine("Good"); Thread.Sleep(5000); Console.WriteLine("Stop sending data!"); Thread.Sleep(1500); int count = 0; while (true) { client.Receive(ref remoteEp); Console.WriteLine(string.Format("Count: {0}", ++count)); } } Try adjusting the value passed into the ReceiveBufferSize. I tested sending a constant stream of data for the 5 seconds, and got 10 packets. I then increased x4 and the next time got 38 packets. I would look to other places in your network where you may be dropping packets. Especially since you mention on your other post that you are sending 10KB packets. The 10KB will be fragmented when it is sent to packets the size of MTU. If any 1 packet in the series is dropped the entire packet will be dropped.
