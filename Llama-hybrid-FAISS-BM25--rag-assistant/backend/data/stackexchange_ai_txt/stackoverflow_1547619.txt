[site]: stackoverflow
[post_id]: 1547619
[parent_id]: 1541568
[tags]: 
One alternative to unit tests, also introduced in Working effectively with legacy code is characterization tests . I had interesting results with such tests. They're easier to set-up than unit tests as you test from point than can be tested (called seam). The drawback is that when a test fails, you have less hint about the location of the problem as the area under test can be much larger than with unit tests. Logging helps here. A unit test framework such those of the xUnit family can be used to write characterization tests. In such tests, written after the facts, assertions verify the current behavior of the code. Unlike unit tests, they do not prove that the code is correct, they are just pinning down (characterizing) the current behavior of the code. The process is similar as the TDD one,: write a test for a portion of code execute it - fail fix the test from the observed behavior of the code execute it - pass repeat The tests will fail if you modify the external behavior of the code. External behavior of the code ? sounds familiar ? Yes it is, here we are. Now you can refactor the code. Obviously the risk depends on the coverage of the characterization tests.
