[site]: stackoverflow
[post_id]: 962560
[parent_id]: 962139
[tags]: 
Ian, If you want the controls to validate immediately, you need to use javascript or jQuery. This is also true for classic ASP.NET. Since you are using Code Behind methods, I assume that your validation waits for a postback. The following examples are from the NerdDinner project. NerdDinner is an open source project that serves as an example of ASP.NET MVC architecture. The authors have graciously provided a tutorial with it, available at http://nerddinnerbook.s3.amazonaws.com/Intro.htm When a form is submitted in ASP.NET MVC, it enters the corresponding controller as a FormCollection object: [AcceptVerbs(HttpVerbs.Post)] public ActionResult Edit(int id, FormCollection formValues) { Dinner dinner = dinnerRepository.GetDinner(id); try { UpdateModel(dinner); dinnerRepository.Save(); } catch { ModelState.AddModelErrors(dinner.GetRuleViolations()) } return RedirectToAction("Details", new { id = dinner.DinnerID }); } UpdateModel takes the form values and attempts to stuff them into the dinner object. The dinner object looks like this: public partial class Dinner { public bool IsValid { get { return (GetRuleViolations().Count() == 0); } } public IEnumerable GetRuleViolations() { yield break; } public IEnumerable GetRuleViolations() { if (String.IsNullOrEmpty(Title)) yield return new RuleViolation("Title is required", "Title"); if (String.IsNullOrEmpty(Description)) yield return new RuleViolation("Description is required", "Description"); if (String.IsNullOrEmpty(HostedBy)) yield return new RuleViolation("HostedBy is required", "HostedBy"); if (String.IsNullOrEmpty(Address)) yield return new RuleViolation("Address is required", "Address"); if (String.IsNullOrEmpty(Country)) yield return new RuleViolation("Country is required", "Address"); if (String.IsNullOrEmpty(ContactPhone)) yield return new RuleViolation("Phone# is required", "ContactPhone"); if (!PhoneValidator.IsValidNumber(ContactPhone, Country)) yield return new RuleViolation("Phone# does not match country", "ContactPhone"); yield break; } partial void OnValidate(ChangeAction action) { if (!IsValid) throw new ApplicationException("Rule violations prevent saving"); } } Notice the IsValid method and the RuleViolations enumerator. If everything is set up properly, all you have to do is define your validations in here, and ASP.NET MVC will take care of the rest for you. The final validated result looks like this: I encourage you to get the NerdDinner application and tutorial at http://nerddinner.codeplex.com/
