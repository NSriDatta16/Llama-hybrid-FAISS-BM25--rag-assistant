[site]: stackoverflow
[post_id]: 158307
[parent_id]: 68907
[tags]: 
I repeat the function call a lot of times (millions) but also employ the following method to discount the loop overhead: start = getTicks(); repeat n times { myFunction(); myFunction(); } lap = getTicks(); repeat n times { myFunction(); } finish = getTicks(); // overhead + function + function elapsed1 = lap - start; // overhead + function elapsed2 = finish - lap; // overhead + function + function - overhead - function = function ntimes = elapsed1 - elapsed2; once = ntimes / n; // Average time it took for one function call, sans loop overhead Instead of calling function() twice in the first loop and once in the second loop, you could just call it once in the first loop and don't call it at all (i.e. empty loop) in the second, however the empty loop could be optimized out by the compiler, giving you negative timing results :)
