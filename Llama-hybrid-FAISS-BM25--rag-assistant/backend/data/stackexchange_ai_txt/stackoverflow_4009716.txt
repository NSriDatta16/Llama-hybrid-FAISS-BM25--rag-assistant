[site]: stackoverflow
[post_id]: 4009716
[parent_id]: 3491974
[tags]: 
As noone has yet answered the question, I'll post on what I have decided in the meantime. Just for the record, I have pretty much decided on calling most data store classes repositories . First, it appears to be the most neutral, non-technical term from the list I suggested, and it seems to be well in line with the Repository pattern . Generally, "repository" seems to fit well where data retrieval/persistence interfaces are something similar to the following: public interface IRepository { int Count { get; } TResource GetById(TId id); IEnumerable GetManyBySomeCriteria(...); TId Add(TResource resource); void Remove(TId id); void Remove(TResource resource); ... } Another term I have decided on using is provider , which I'll be preferring over "repository" whenever objects are generated on-the-fly instead of being retrieved from a persistence store, or when access to a persistence store happens in a purely read-only manner. ( Factory would also be appropriate, but sounds more technical, and I have decided against technical terms for most uses.) P.S.: Some time has gone by since writing this answer, and I've had several opportunities at work to review someone else's code. One term I've thus added to my vocabulary is Service , which I am reserving for SOA scenarios: I might publish a FooService that is backed by a private Foo repository or provider. The "service" is basically just a thin public-facing layer above these that takes care of things like authentication, authorization, or aggregating / batching DTOs for proper "chunkiness" of service responses.
