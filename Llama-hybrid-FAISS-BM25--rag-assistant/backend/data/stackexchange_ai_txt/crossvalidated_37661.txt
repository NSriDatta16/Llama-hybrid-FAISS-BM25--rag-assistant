[site]: crossvalidated
[post_id]: 37661
[parent_id]: 37437
[tags]: 
In addition to the useful answers given, here's some Python code that I wrote that generates an $\text{ARMA}(p,q)$ gaussian time series: """ Random generation of Gaussian ARMA(p,q) time series. INPUTS phi: An array of length p with the AR coefficients (the AR part of the ARMA model). theta: An array of length q with the MA coefficients (the MA part of the ARMA model). sigma: Standard deviaton of the Gaussian noise. n: Length of the returned time-series. burnin: Number of datapoints that are going to be discarded (the higher the better) to avoid dependence of the ARMA time-series on the initial values. """ from numpy import append,array from numpy.random import normal def ARMAgenerator(phi,theta,sigma,n,burnin=0,verbose=0): l=max(len(phi),len(theta)) if(burnin==0): burnin=10*l # Burn-in elements! w=normal(0,sigma,n+burnin) ARMA=array([]) s=0.0 l=max(len(phi),len(theta)) for i in range(n+burnin): if(i An example of the usage of the code: say you want to simulate $n=100$ datapoints of an $\text{ARMA}(p,q)$ model with AR coefficients $\phi=(0.4,0.3)$ and MA coefficients $\theta=(0.1,-0.3)$, with a zero-mean gaussian noise with $\sigma=2$. Also, say you want to simulate $\text{burnin}=500$ datapoints first in order to avoid dependencies on the initial values. You create it with the code above as follows: phi=[0.4,0.3] theta=[0.1,-0.3] sigma=2.0 n=100 burnin=500 x=ARMAgenerator(phi,theta,sigma,n,burnin) And now let's plot and see! (You need to install the matplotlib library in order to do the following): import matplotlib.pyplot as plt plt.xlabel("Time units") plt.ylabel("ARMA(2,2) Series") plt.plot(x,'-r') # This plots the series as a red line. plt.plot(x,'or') # This plots the series as red points. plt.show() And...tada!
