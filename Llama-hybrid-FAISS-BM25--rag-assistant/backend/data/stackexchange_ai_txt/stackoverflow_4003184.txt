[site]: stackoverflow
[post_id]: 4003184
[parent_id]: 4001084
[tags]: 
Windows support Thread Local Storage (TLS) in a DLL. It can be very practical if you want have some memory blocks per thread with the unique value (unique per thread). Inside of any other function from the DLL you can get the value which correspond to the current thread in very easy way. It is very useful in some scenarios. Look at here for more details. I dun't use pthreads myself, but I suppose that per-thread storage slot introduced to make the work with TLS more comfortable. UPDATED : From your comment I see that you misunderstand my answer. I'm not a POSIX developer, I develop in Win32 only and your question is about WIn32 API possibilities of per-thread allocation and deallocations. I try to explain the possibilities and you can decide yourself which one are better for your specific scenarios. The equivalent of pthread_XXX functions in Win32 are following: pthread_key_create TlsAlloc pthread_setspecific TlsSetValue pthread_getspecific TlsGetValue pthread_key_delete TlsFree I not recommended you to use the construct __declspec(thread) , which is more compiler specific. The example Using Thread Local Storage shows how to use thread local storage (TLS) without DLLs, but I personally like and use TLS only in DLL. The destructor parameter of the pthread_key_create function has no analog in Win32, but I don't see here any problem. All C/C++ compilers support __try {/**/} __finally {/**/} construct of the Structured Exception Handling so you can use it in the body of your thread function and implement in the way any Cleaning up Resources exacly like you can do this in the main thread. I find pity that you not included in your question an example which shows how you typically use destructor of the pthread_key_create function. I find that examples can clear much things without a lot of words. So if my answer do not help you we can better explain all in examples: you write an example and probably short comment what it should do and I could write the same code using Win32 API only in C or C++.
