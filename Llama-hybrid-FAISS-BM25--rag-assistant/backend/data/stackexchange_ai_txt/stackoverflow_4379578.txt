[site]: stackoverflow
[post_id]: 4379578
[parent_id]: 4361758
[tags]: 
This is a C# KdTree implementation that should solve the "Find all neighbors of a point P within a delta ". It makes heavy use of functional programming techniques (yes, I love Python). It's tested but I still have doubts doubts in understanding _TreeFindNearest() . The code (or pseudo code) to solve the problem "Partition a set of n points given a ~= relation in better than O(n^2) in the average case" is posted in another answer. /* Stripped C# 2.0 port of ``kdtree'', a library for working with kd-trees. Copyright (C) 2007-2009 John Tsiombikas Copyright (C) 2010 Francesco Pretto Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. The name of the author may not be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ using System; using System.Collections.Generic; using System.Text; namespace ITR.Data.NET { public class KdTree { #region Fields private Node _Root; private int _Count; private int _Dimension; private CoordinateGetter [] _GetCoordinate; #endregion // Fields #region Constructors public KdTree(params CoordinateGetter [] coordinateGetters) { _Dimension = coordinateGetters.Length; _GetCoordinate = coordinateGetters; } #endregion // Constructors #region Public methods public void Insert(T location) { _TreeInsert(ref _Root, 0, location); _Count++; } public void InsertAll(IEnumerable locations) { foreach (T location in locations) Insert(location); } public IEnumerable FindNeighborsRange(T location, double range) { return _TreeFindNeighborsRange(_Root, 0, location, range); } #endregion // Public methods #region Tree traversal private void _TreeInsert(ref Node current, int currentPlane, T location) { if (current == null) { current = new Node(location); return; } int nextPlane = (currentPlane + 1) % _Dimension; if (_GetCoordinate[currentPlane](location) _TreeFindNeighborsRange(Node current, int currentPlane, T referenceLocation, double range) { if (current == null) yield break; double squaredDistance = 0; for (int it = 0; it subTreeNeighbors = _TreeFindNeighborsRange(current[nextDirection], nextPlane, referenceLocation, range); foreach (T location in subTreeNeighbors) yield return location; if (Math.Abs(coordinateRelativeDistance) (T location); #endregion // Enums, delegates }
