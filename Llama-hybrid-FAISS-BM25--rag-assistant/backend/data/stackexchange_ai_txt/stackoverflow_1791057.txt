[site]: stackoverflow
[post_id]: 1791057
[parent_id]: 1790897
[tags]: 
Run the loop in a background process (so that the UI can update itself while the loop is running) and write the loop counter into a property (DependencyProperty or CLR property with INotifyPropertyChanged) which is bound to a TextBox in your user interface. Alternatively, you can directly change the value of the TextBox via Dispatcher.Invoke (this is less elegant, though). Does this help? Feel free to ask for clarification... Code example (untested), using a DependencyProperty (which must be bound to a TextBox): BackgroundWorker bwLoop; public static readonly DependencyProperty LoopCounterProperty = DependencyProperty.Register("LoopCounter", typeof(int), typeof(Window1), new FrameworkPropertyMetadata(0)); public int LoopCounter { get { return (int)this.GetValue(LoopCounterProperty); } set { this.SetValue(LoopCounterProperty, value); } } private MyWindow() { ... bwLoop = new BackgroundWorker(); bwLoop.DoWork += (sender, args) => { ... for (int i = 0; i LoopCounter=i)); System.Threading.Thread.Sleep(250); // do your work here } } bwLoop.RunWorkerCompleted += (sender, args) => { if (args.Error != null) MessageBox.Show(args.Error.ToString()); }; } private void StartLoop() { bwLoop.RunWorkerAsync(); }
