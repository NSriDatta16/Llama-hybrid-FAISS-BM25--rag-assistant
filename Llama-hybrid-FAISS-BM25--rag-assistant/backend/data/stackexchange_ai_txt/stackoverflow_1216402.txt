[site]: stackoverflow
[post_id]: 1216402
[parent_id]: 1216345
[tags]: 
C90 had a feature (absent of C99 and C++) called implicit function declaration: when you used a name not declared yet in a function call, the compiler behaved as if extern int identifier(); had been seen. That feature has been dropped from C99 and most compilers had option to warn about this even before C99 was promulgated. Even when staying in C90, it is not recommended style to use this. If you have to maintain code making use of this and can't add prototypes, check that: the functions returns an int (it is the case for printf but the validity is implementation dependent for strlen which returns a size_t which can be int or something else) the function isn't variadic (it is the case for strlen but not printf) the type of the arguments is not modified by default argument promotions (char, short, float are) and you must pay attention to cast pointers to void* when needed when the expected type is void*, you have to pay attention to cast NULL to the correct pointer type. (These are the same things you have to pay attention for variadic arguments BTW). If those conditions aren't met -- and they aren't for any calls in your code -- you enter in the realm of undefined behavior.
