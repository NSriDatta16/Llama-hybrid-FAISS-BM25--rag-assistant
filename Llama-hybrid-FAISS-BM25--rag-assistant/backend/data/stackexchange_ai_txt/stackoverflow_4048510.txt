[site]: stackoverflow
[post_id]: 4048510
[parent_id]: 3917774
[tags]: 
This is an issue of C function pointer usage, which I'm assuming you've never used. At the point of creating the trackbar, you should indeed use: cvCreateTrackbar( "Position", "Example3", &g_slider_position, frames, onTrackbarSlide ); When you make that call, you are telling OpenCV two pieces of information: the address of g_slider_position the address of onTrackbarSlide Now, when that trackbar is moved, OpenCV will: modify g_slider_position directly (so you don't actually even need to receive it as a function parameter, but anyway) call onTrackbarSlide(g_slider_position) , which it can do because it knows both pieces of information If you write the code the way you were trying to: cvCreateTrackbar( "Position", "Example3", &g_slider_position, frames, onTrackbarSlide(g_slider_position) ); Where you wrote onTrackbarSlide(g_slider_position) , that turned into a function invocation of onTrackbarSlide . In other words, while trying to figure out what values you wanted to pass to cvCreateTrackbar , it called onTrackbarSlide and passed it the current value of g_slider_position , and hoped that onTrackbarSlide would return a function pointer, because that's what it needed. OK, it never got that far, because it could tell at compile time that onTrackbarSlide returned void , and that void was not void(*aCallbackFunction)(int) (which is how you specify the type "a function that takes an int and returns nothing"), but I'm using narrative style... As for the id vs position argument, I can't speak from experience. The docs I just read from willowgarage state that your callback receives the position, not the id, which means you have no way to use a single callback to differentiate between sliders. I personally wouldn't want to do that anyway, 'coz it means I'd have one function with a switch instead of multiple functions. Multiple functions will be (microscopically) more efficient, and definitely more readable. On the other hand, cvCreateTrackbar does return an int, which might be the id of that trackbar. Not sure what you're supposed to do with it, though. The actual meaning of the return value was not defined on the doc page I just read. Given that this is a C API and lacks a bool type, that int might just be a true/false return...
