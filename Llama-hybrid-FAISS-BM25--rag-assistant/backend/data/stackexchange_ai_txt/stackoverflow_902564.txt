[site]: stackoverflow
[post_id]: 902564
[parent_id]: 902432
[tags]: 
It's not bad practice. The great thing about C++ is that it lets you program in many styles. This gives the language great flexibility and utility, but possibly makes it trickier to learn than other languages that force you to write code in a particular style. If you had a small program, you could write it in one function - possibly using a couple of goto's for code flow. When you get bigger, splitting the code into functions helps organize things. Bigger still, and classes are generally a good way of grouping related functions that work on a certain set of data. Bigger still, namespaces help out. Sometimes though, it's just easiest to write a function to do something. This is often the case where you write a function that only works on primitive types (like int). int doesn't have a class, so if you wanted to write a printInt() function, you might make it standalone. Also, if a function works on objects from multiple classes, but doesn't really belong to one class and not the other, that might make sense as a standalone function. This happens a lot when you write operators such as define less than so that it can compare objects of two different classes. Or, if a function can be written in terms of a classes public methods, and doesn't need to access data of the class directly, some people prefer to write that as a standalone function. But, really, the choice is yours. Whatever is the most simple thing to do to solve your problem is best. You might start a program off as just a few functions, and then later decide some are related and refactor them into a class. But, if the other standalone functions don't naturally fit into a class, you don't have to force them into one.
