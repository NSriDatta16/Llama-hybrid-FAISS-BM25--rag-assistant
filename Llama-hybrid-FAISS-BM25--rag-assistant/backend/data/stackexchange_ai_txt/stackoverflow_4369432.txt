[site]: stackoverflow
[post_id]: 4369432
[parent_id]: 4369178
[tags]: 
You probably don't want to send 2000 emails on a thread that is servicing http requests. The user that submitted the request will be waiting for the server to respond until the emails send, and that's one less thread available for processing requests from other users. If you have many such requests it could drag down server performance. Instead, I would post the request to a message queue, and have a seperate service process items from the queue and send emails. Creating background threads in the asp.net app is another possibility, but then you end up in a situation where either: You have to have your own task queue , separate from the one used by the normal thread pool. Your email tasks are competing with, and potentially starving, the tasks for serving http requests. That being said, there are deployment scenarios (a shared server, customer deployments) where the introduction of a second process is not desirable. If you don't have those constraints, however, I would go with the "separate process" because it's easier to scale your web site if it's focused on serving UI requests and leaves "fulfillment" tasks to a different service.
