[site]: stackoverflow
[post_id]: 3992495
[parent_id]: 3992439
[tags]: 
As mentioned by @ChaosPandion, in that specific case you would return a DateTime struct. In general, however, you would have the following options: Using out parameters This is a simple way that will usually always work. However, it is a bit clunky, as the result is returned where you usually would expect the function arguments to be passed and the method signature might get lengthy and hard to refactor. public void GetTime(out int hr, out int min) { DateTime dt = DateTime.Now; hr = dt.Hour; min = dt.Minute; } static void Main(string[] args) { // declare variables for out parameters first int hour, minute; GetTime(out hour, out minute); } Using an array This is a simple method that works well if the values to be returned have the same type. public int[] GetTime() { DateTime dt = DateTime.Now; return new[] { dt.Hour, dt.Minute}; } Using a property bag (A property bag is a simple class which only has properties) This is very convenient and allows easy modification of the type and number of returned values later on without changing the method signature. class A { int Prop1 { get; set; } int Prop2 { get; set; } } public A SomeMethod() { return new A() { Prop1 = 1, Prop2 = 2 } } Using a Tuple In C# 4.0 (requires VS 2010) you can use the Tuple class: public Tuple GetTime() { DateTime dt = DateTime.Now; return Tuple.Create(dt.Hour, dt.Minute); } C# 7.0 Tuples C# 7.0 adds support for multiple return values. You can write code like this to return an implicitly created tuple: (string, string, string) LookupName(long id) // tuple return type { ... // retrieve first, middle and last from data storage return (first, middle, last); // tuple literal } The tuple elements are names Item1 , Item2 , etc by default, but you can also specify names, e.g. (string first, string middle, string last) LookupName(long id) // tuple return type { ... // retrieve first, middle and last from data storage return (first, middle, last); // tuple literal } and then access the tuple elements via those names: var names = LookupName(id); WriteLine($"found {names.first} {names.last}.");
