[site]: stackoverflow
[post_id]: 5518821
[parent_id]: 
[tags]: 
How should I refactor this Haskell code to make it more elegant?

As an exercise I wrote a short Haskell function that returns the first four characters of a string, concatenated. I had great trouble converting the chars to strings and resorted to an ugly replicate hack. What's the best way to improve this function? (I'm guessing that both the pattern and the output can be improved.) concatFirstFour :: [Char] -> [Char] concatFirstFour (a:b:c:d:_) = (replicate 1 a) ++ (replicate 1 b) ++ (replicate 1 c) ++ (replicate 1 d) concatFirstFour xs = error "Need at least four characters." Update: Thank you so much, everyone. I learned several things from all the answers and comments. I understand types much better. Here's the code I ended up using: initFirstFour :: [a] -> [a] initFirstFour str | length str > 3 = take 4 str | otherwise = error "Need at least four characters." Update 2: Changed the second pattern from xs to _ per ptival's comment. Lazy eval FTW. Update 3: Cleaner guards from tew88's comment.
