[site]: stackoverflow
[post_id]: 1701022
[parent_id]: 
[tags]: 
Boost Multi-Index : Composite key of vector and int for hashed indices

as I've just learned in in my other question , I could use a composite_key for a struct, which has a std::vector and an integer. Now my question is: Can I use this somehow to work with hashed_indecies? Here an example similar to THIS : struct unique_property { //the pair of int and std::vector shall be unique int my_int; std::vector my_vec; }; typedef multi_index_container , member ,&unique_property::my_vec> > >, random_access > > property_locator; The problem is (of course) that a std::vector is no suitable hash-key. Can I put this code in an elegant wrapper (or something like that), to produce a hash-key from every entry of my_vec as well?
