[site]: stackoverflow
[post_id]: 389346
[parent_id]: 389318
[tags]: 
I think each of the methods you have outlined has its merits and its downsides. Which you choose will be a matter of personal preference, the experiences of those in your team and the type of project - Linq2Sql is great to get up and running quickly but might not be best suited to a large and/or complex enterprise project for example.. the best thing you can do there is try a few and get to know them. As for patterns, they help solve specific and recurring problems in a proven way. They also aid familiarisation for developers who didn't write the code. As above, it is worth trying a few to get a feel for what they do and when to use them - but they solutions to specific programming problems rather than architectural patterns. My typical working process runs: Create a logical entity model Create the data storage for the entity model Create the data access code and business objects Create the logic / business layer Create the presentation layer I would typically split Data Access and Business Objects, Business Logic and Presentation (web site / winforms) into their own projects, plus anything that I might want to re-use at a later date also goes in its own project. I also have a Base project containing common extensions and interfaces that I re-use in almost everything I do. In terms of architecture, I try to ensure my projects are loosely coupled so that you can easily move from a three tier to n-tier architecture easily. Loose coupling also means that you can switch your backing store and all you need to do is write a new Data Access layer with all of your logic and presentation code remaining unchanged. I think it's important not to get too hung up on three versus n tier - if you separate your concerns properly extending your system across multiple tiers at later date will not be a difficult exercise.
