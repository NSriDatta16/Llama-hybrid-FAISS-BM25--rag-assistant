[site]: stackoverflow
[post_id]: 5182825
[parent_id]: 
[tags]: 
Functions and structures in C++

/*I got stumped within my code. I think classes will be simpler than structures, but the chapter within my book makes me do structures. : / I am currently getting an error message that my function was not matched up for an overloaded function. The book does talk about them, but the examples of overloading functions in the book aren't helping me out. Also the book wants me to enter account numbers and fill in the objects and when they are asked for an account number they should have the opportunity to "QUIT" entering numbers and proceed onto the next part of the program; that whole way of thinking has my brain a bit fried and I was hoping I could get some help. I apologize if the formatting of my code is messy, I tried to reformat it within here so it would all go into the code brackets. The Error happens at line... 161 at the displayAccounts function. Parameters were different within the top and bottom of the two functions I changed it and it works. I am going to go over different parts and if its correct post the correct code.*/ I figured out exactly the question that I need. I need the "QUIT" loop to be allowed to be followed up within the account numbers. This would allow the user to enter in a 0 at any time when asked to enter an account number and this was what was confusing me the most. #include #include using namespace std; struct BankAccount { void enterAccountsData(BankAccount *accounts); void computeInterest(BankAccount *accounts); void displayAccounts(BankAccount *accounts, const int QUIT); int accountNum; // holds the account number. double accountBal; // holds the account balance. double annualInterest; // holds the interest rate. int term; // holds the term for the accounts. }; int main() { const int MAX_ACCOUNTS = 100; // The maximum number of bank accounts. const int QUIT = 0; // sentinal value. int input; int num = 0; BankAccount data[MAX_ACCOUNTS]; BankAccount display; cout > input; while(true) { if(input != QUIT) { data[MAX_ACCOUNTS].enterAccountsData(data); data[MAX_ACCOUNTS].computeInterest(data); } else { break; } } display.displayAccounts(data, QUIT); //system("pause"); return 0; } void BankAccount::enterAccountsData(BankAccount *accounts) { cout > accounts[num].accountNum; // holds the value of the account number // Checks if the account number is valid. while(accounts[num].accountNum 10000) { cout > accounts[num].accountNum; } // Checks if the account numbers are the same. for(int check = 0; check > accounts[num].accountBal; // Makes sure that the account balance is not negative. while(accounts[num].accountBal > accounts[num].accountBal; } // Holds the interest rate. cout > accounts[num].annualInterest; // Makes sure the interest rate is valid while(accounts[num].annualInterest > 0 && accounts[num].annualInterest > 0.15) { cout > accounts[num].annualInterest; } // Makes sure the interest rate is not negetive while(accounts[num].annualInterest > accounts[num].annualInterest; } // Holds the value for the length of the interest. cout > accounts[num].term; //Checks for valid length of time for the term held while(accounts[num].term 11) { cout > accounts[num].term; } } cout > quit; if(quit = 0) { return; } } void BankAccount :: computeInterest(BankAccount *accounts) { const int NUM_OF_ACCOUNTS = 100; // the number of bank accounts. const int MONTHS_IN_YEAR = 12; double total = 0; double average = 0; for(int num = 0; num > input; for(int num = 0; num > input; } if(found == 0) { cout > input; } } }
