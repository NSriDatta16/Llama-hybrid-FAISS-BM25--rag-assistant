[site]: stackoverflow
[post_id]: 3896753
[parent_id]: 3896685
[tags]: 
There is no trivial way to get this up and running in .NET. However, the simplest way I've found is to build on top of the Enterprise Library which provides some out of the box capabilities for working with performance counters. For example: the Performance Counter Handler The Enterprise Library also gives you some capabilities for much more easily managing the installation of performance counters. Additionally, it let's you build on top of it so, you can create an AvergeTimeMeter which allows you to just do this: private static EnterpriseLibraryPerformanceCounter averageRequestTimeCounter = PerformanceCounterManager.GetEnterpriseLibraryCounter(MadPerformanceCountersListener.AverageRequestTime); private static EnterpriseLibraryPerformanceCounter averageRequestTimeCounterBase = PerformanceCounterManager.GetEnterpriseLibraryCounter(MadPerformanceCountersListener.AverageRequestTimeBase); public void DoSomethingWeWantToMonitor() { using (new AverageTimeMeter(averageRequestTimeCounter, averageRequestTimeCounterBase)) { // code here that you want to perf mon } } This allows you to simply encapsulate the code you want to monitor in a using block - and concentrate on the code you actually want to work on rather than worrying about all the performance counter infrastructure. To do this, you'll create a re-usable AverageTimeMeter class like this: public sealed class AverageTimeMeter : IDisposable { private EnterpriseLibraryPerformanceCounter averageCounter; private EnterpriseLibraryPerformanceCounter baseCounter; private Stopwatch stopWatch; private string instanceName; public AverageTimeMeter(EnterpriseLibraryPerformanceCounter averageCounter, EnterpriseLibraryPerformanceCounter baseCounter, string instanceName = null) { this.stopWatch = new Stopwatch(); this.averageCounter = averageCounter; this.baseCounter = baseCounter; this.instanceName = instanceName; this.stopWatch.Start(); } public void Dispose() { this.stopWatch.Stop(); if (this.baseCounter != null) { this.baseCounter.Increment(); } if (this.averageCounter != null) { if (string.IsNullOrEmpty(this.instanceName)) { this.averageCounter.IncrementBy(this.stopWatch.ElapsedTicks); } else { this.averageCounter.SetValueFor(this.instanceName, this.averageCounter.Value + this.stopWatch.ElapsedTicks); } } } } You have to register your performance counters (shown in the EntLib examples) but this should get your started.
