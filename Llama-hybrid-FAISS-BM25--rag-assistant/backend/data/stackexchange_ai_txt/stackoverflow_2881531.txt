[site]: stackoverflow
[post_id]: 2881531
[parent_id]: 2881268
[tags]: 
Your question isn't entirely clear - do you want to know the object the method belongs to? Or the name of the method calling the member-function? Oo something else..? In most object-oriented languages, you can get the name of the currently class quite easily: class Myclass(object): def memberfunc(self): print self.__class__.__name__ obja = Myclass() obja.memberfunc() # prints Myclass You can't sensibly get the obja identifier as a name (in almost any language), and I can't see why you would want to (in cases like this, you'd use some kind of key/value mapping) If you want to get the name of the method that called the method, you would have to inspect the call stack, e.g in Python using the inspect method: import inspect class Myclass(object): def memberfunc(self): current_call = inspect.stack()[0] previous = inspect.stack()[1] print previous[3] def somefunc(): obja = Myclass() obja.memberfunc() # prints somefunc somefunc() I imagine this isn't as easy in other languages Again, the cases where you would want to do such a thing are rare, usually limited to introspection-heavy things like code coverage tools and debuggers
