[site]: datascience
[post_id]: 71850
[parent_id]: 
[tags]: 
Best approach to find optimal solution to linear equation by group in R

I am currently modeling a pricing and discount system in R. My data frame looks as follows: df = structure( list( Customers = structure( c(1L, 1L, 1L, 2L, 2L, 2L), .Label = c("A", "B"), class = "factor" ), Products = structure( c(1L, 2L, 3L, 1L, 2L, 3L), .Label = c("P1", "P2", "P3"), class = "factor" ), Old_Price = c(5, 2, 10, 7, 4, 8), New_Price = c(6, 3, 9, 6, 3, 9) ), class = "data.frame", row.names = c(NA,-6L) ) There are several customers who buy different products with an "Old Price" and a "New Price". I now want to identify one discount parameter (a real from -1.0 to 1.0) for each customer that minimizes the difference of Old Price and New Price. Because I do not know a lot about optimizations, etc. my current approach would be to do the following, which seems horribly inefficient and might not lead to the optimal solution anyway: df %>% mutate(Individual_Discount = (Old_Price-New_Price)/New_Price) %>% # Identify optimal discount individually group_by(Customers) %>% mutate(Optimal_Discount = mean(Individual_Discount)) # Average individual discount to get approximate discount for customer What's the best approach to solve a case like this and how can I implement it in R? Update: To clarify the problem more plainly. There is a data frame that looks like this: Customers | Product | Old Price | New Price | Delta | Discount | Discounted New Price CustA | ProdA | 10.00 | 12.00 | 2.00 | -0.167 | 10.00 CustA | ProdB | 30.00 | 25.00 | -5.00 | 0.2 | 30.00 CustB | ProdA | 15.00 | 12.00 | -3.00 | 0.25 | 15.00 CustB | ProdB | 20.00 | 25.00 | 5.00 | -0.2 | 20.00 The discount represents the optimal discount to reduce the difference between the old and new price to zero (So a new price 2 would be calculated as New Price + New Price * Discount). However each customer can only get one discount, so which discount should I choose per customer to minimize the remaining deltas (the delta between the discounted new price and the old price)? Update2: Mathematical relationships Delta = New_Price - Old_Price Discount = Delta / -New_Price Discounted_New_Price = New_Price+New_Price*Discount Update3: I have fitted a linear model based on the comments but a "linear discount" based on the gradient of the grouped linear model yields worse results than my "mean hack": df %>% group_by(Customers) %>% do({ co % ungroup %>% mutate(linear_discount = 1/linear_discount-1) %>% mutate(linear_price = New_Price+New_Price*linear_dis The results are Customers | Product | Old Price | New Price | Linear Discount | Linear Price | Discounted New Price CustA | Prod1 | 05.00 | 06.00 | -0.25 | 4.50 CustA | Prod2 | 02.00 | 03.00 | -0.25 | 2.25 CustA | Prod3 | 10.00 | 09.00 | -0.25 | 6.75 CustB | Prod1 | 07.00 | 06.00 | 0.50 | 9.00 ...
