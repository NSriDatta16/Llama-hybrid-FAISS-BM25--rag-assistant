[site]: stackoverflow
[post_id]: 3021253
[parent_id]: 3021225
[tags]: 
The downsite is your approach of general exception handling. You should not catch the baseclass Exception without a strong reason. It could hide various problems; ok, you log them, but your code doesn't know that it just ran out of memory , or the file does not exist and continue as if there was no problem at all. The method you describe here would encourage a general exception handling. Related: Is it really that bad to catch a general exception? Is this a bad practice to catch a non-specific exception such as System.Exception? Why? EDIT (response to the OP's edit & clarification): I am not sure what you want to achieve. Basicall you hide an exception (general or specified - it is just swallowed). Call your method Executor.Hide ( RunSomething ); and it is clear what happens here. But is there any advantage in swallowing exceptions? I don't think so. Again, there can be places where you need this - but they are rare and should be chosen intentionally. The method you provide encourages to swallow exception without thinking about it. You commented out the rethrow line ( throw ex or better just throw , which preserves the stack). What do you get with this line enabled? Basically just logging. You catch an exception, log it and rethrow it to ... catch it again? Why can't you put your logging to this latter place? Try to catch an exception only, when you are able to handle it. There you can log, too. Any good logger will be able to show you the stack trace, so that you have no loss of information. Related: Where to put try catch?
