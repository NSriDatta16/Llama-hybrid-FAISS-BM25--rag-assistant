[site]: stackoverflow
[post_id]: 5407072
[parent_id]: 
[tags]: 
Python decodes JSON

I've the following json: { "slate" : { "id" : { "type" : "integer" }, "name" : { "type" : "string" }, "code" : { "type" : "integer", "fk" : "banned.id" } }, "banned" : { "id" : { "type" : "integer" }, "domain" : { "type" : "string" } } } I'd like to figure out the best decoding way to have an easily browsable python object presentation of it. I tried: import json jstr = #### my json code above #### obj = json.JSONDecoder().decode(jstr) for o in obj: for t in o: print (o) But I get: f s l a t e b a n n e d And I don't understand what's the deal. The ideal would be a tree (even a list organized in a tree way) that I could browse somehow like: for table in myList: for field in table: print (field("type")) print (field("fk")) Is the Python's built-in JSON API extent wide enough to reach this expectation?
