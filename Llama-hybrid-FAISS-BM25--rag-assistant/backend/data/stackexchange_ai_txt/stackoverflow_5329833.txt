[site]: stackoverflow
[post_id]: 5329833
[parent_id]: 5329664
[tags]: 
from a beginners point of view it would be yes, but as this is a single object it cannot be orientated like you could with several objects. True OOP is when you separate the individual entities of your application into objects / dependencies. for example, a simple website would include the following: Database Error Handling Sessions Security these are called entities and should not interact directly with each other, that's why there separate. so if we wanted to interact Sessions and Security to make shore that the session is safe, we would add a method to the session object to return a PHP standard result such as array or string, this way many objects can interact with each other without relying on the actual object too much. Looking at your attempt at a greeting class I would look at something like so: class User { protected $data; public function __construct(array $user_data) { $this->data = $user_data; } public function getUsername() { return $this->data['username']; } } class Greeting { private $message = "welcome to mysite %s"; public function __construct(string $to_greet) { $this->message = sprintf($this->message,$to_greet); } public function getGreeting() { return $this->message; } } the following would be used like so: $User = new User(array( 'id' => 22, 'username' => 'Robert Pitt' )); $Greeting = new Greeting($User->getUsername()); echo $Greeting->getGreeting(); now i have mentioned that objects do interact directly with each other but if they do that they should be encapsulated so that all the database objects such as Database,Result,DB_Error would only interact with each other. this allows for code to be transportable to other projects without having to much of an issue, also known as libraries. if the objects are closley related ina way that there all bundled together you could do something like this: $User = new User(/*..From DB ..*/); $Greeting = new Greeting($User); echo $Greeting->getGreeting();
