[site]: stackoverflow
[post_id]: 1977504
[parent_id]: 
[tags]: 
What is the most memory-efficient way to emit XML from a JAXP SAX ContentHandler?

I have a situation similar to an earlier question about emitting XML . I am analyzing data in a SAX ContentHandler while serializing it to a stream. I am suspicious that the solution in the linked question -- though it is exactly what I am looking for in terms of the API -- is not memory-efficient, since it involves an identity transform with the XSLT processor. I want the memory consumption of the program to be bounded, rather than it growing with the input size. How can I easily forward the parameters to my ContentHandler methods to a serializer without doing acrobatics to adapt e.g. StAX to SAX, or worse yet, copying the SAX event contents to the output stream? Edit: here's a minimal example of what I am after. thingIWant should just write to the OutputStream given to it. Like I said, the earlier question has a TransformerHandler that gives me the right API, but it uses the XSLT processor instead of just a simple serialization. public class MyHandler implements ContentHandler { ContentHandler thingIWant; MyHandler(OutputStream outputStream) { thingIWant = setup(outputStream); } public void startDocument() throws SAXException { // parsing logic thingIWant.startDocument(); } public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException { // parsing logic thingIWant.startElement(uri, localName, qName, atts); } public void characters(char[] ch, int start, int length) throws SAXException { // parsing logic thingIWant.characters(ch, start, length); } // etc... }
