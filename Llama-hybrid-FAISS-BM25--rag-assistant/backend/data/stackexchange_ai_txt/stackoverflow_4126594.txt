[site]: stackoverflow
[post_id]: 4126594
[parent_id]: 4126574
[tags]: 
Lex & Yacc is your answer. Or Flex and Bison which are branched version of original tools. They are free, they are the real standard for writing lexers and parsers in C and used all around everywhere. In addition O'Reilly has released a small pearl of 300 pages: Flex & Bison . I bought it and it really explains you how to write a good parser for a programming language and handle all the subtle things (error recovery, conflicts, scopes and so on). It will answer also your questions about how you are parsing expressions: your approach is right with a top-down parser but you'll discover that is not enough to handle operator precedences. Of course, for hobby, you could write your own lexer and parser but it would be just an academic effort that is nice to understand how FSM and parser work but with no so much fun :) If you are, instead, interested in programming language design or complex implementations I suggest this book: Programming Language Pragmatics that is not so famous because of the Dragon Book but it really explains why and how various characteristics can and should be implemented in a compiler. The Dragon Book is a bible too, and it will cover at a real low level how to write a parser.. but it would be sort of boring, I warn you..
