[site]: stackoverflow
[post_id]: 3659751
[parent_id]: 3659506
[tags]: 
Since every entry of the matrix has to be checked, your worst case is always going to be N*N. With a small 2*N extra storage, you can perform the operation in O(N*N). Just create a mask for each row and another for each column - scan the array and update the masks as you go. Then scan again to populate the result matrix based on the masks. If you're doing something where the input matrix is changing, you could store a count of non-zero entries for each row and column of the input (rather than a simple mask). Then when an entry in the input changes, you update the counts accordingly. At that point, I would drop the output matrix entirely and query the masks/counts directly rather than even maintaining the output matrix (which could also be updated as thing change in less than N N time if you really wanted to keep it around). So loading the initial matrix would still be O(N N) but updates could be much less.
