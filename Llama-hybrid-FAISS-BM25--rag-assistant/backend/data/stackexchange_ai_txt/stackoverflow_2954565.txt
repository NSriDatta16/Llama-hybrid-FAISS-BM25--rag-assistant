[site]: stackoverflow
[post_id]: 2954565
[parent_id]: 2951806
[tags]: 
I believe I may have figured it out. Not sure if this is the correct solution, but it seems to be working. First in my custom item class I pass the datasource as a delegate. Now that the delegate is part of the item, I can pass it to my textfield as the delegate. As long as I include UITextFieldDelegate in my data source class, it will respond as the delegate to my textfield. So that's getting the content from the textfield. If I want to change the content in a textfield from the datasource, I can leverage the method: - (void)tableView:(UITableView*)tableView cell:(UITableViewCell*)cell willAppearAtIndexPath:(NSIndexPath*)indexPath I can check the row using indexPath.row then type the cell as the corresponding custom cell class. From there I can access any public methods in my cell class. So I created one that returns a reference to the textfield. So I can say: [[(MyCustomTextFieldCell *)cell theTextField] setText:@"hello world"]; Next step is to assign it to a local ivar and then I'm assuming I should be able to access it at any time. The main reason I want to be able to modify the content of the textfield is that in certain instances by clicking on the textfield, a picker will come up and the results of the picker are formatted and inserted back into the textfield. Please let me know if my approach is too convoluted. Perhaps I'll create a sample and post it for everyone to rip apart and tell me I'm a moron and there's a better way. thanks, howie
