[site]: stackoverflow
[post_id]: 1482011
[parent_id]: 1481806
[tags]: 
Here are my rules for ideal testing of failure behavior: If you are using dependencies that might throw exceptions, then you should include unit tests that make your mocks of them throw exceptions. If under certain conditions your code should throw exception, then you should include unit tests that sets up such conditions. The first lets you know what your code behaves like under external failure, and often leads to reconsiderations of what to do. In all situations it is good to see what actually happens. The second just makes sure that you hold what you promise, as far as the errors your code should detect and consider exceptional. It is no different than testing other features in your code. Before considering the unit-test suite complete, one should have a peek at code-coverage of the code under test. For non-trivial code, there is almost always one way my code branch that my unit tests do not cover, or worse, has behaviour I did not intend. Surprisingly often, the solution is to remove that code rather than adding more tests. Just cruft left behind when winging it earlier. I'm not necessarily saying that one should reach 100% coverage, but one should do code coverage driven unit testing because it is a more visual way to understand and expose the code behaviours that exists. Just looking at it can give you new ideas for how to refactor code to achieve Single Responsibility Principle and Separation of Concerns .
