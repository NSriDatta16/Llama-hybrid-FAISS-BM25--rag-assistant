[site]: stackoverflow
[post_id]: 3647862
[parent_id]: 3647819
[tags]: 
The problem with using a custom font for icons is that you've got no backup plan if: Your user's browser is too old to support @font-face The user agent isn't your traditional browser (eg. Screen readers for the blind, search engines, HTML-to-text converters, etc.) The user copy-pastes the text containing the "icon" into something that discards rich formatting information or doesn't have the font in question. The user agent will never support @font-face (Eg. Textual web browsers like Lynx, Links2, and ELinks for Unix/Linux) The user is behind a corporate proxy that discards or mangles headers that your browser demands before displaying custom fonts. (more common than you think) The user is running NoScript with the default font-blocking behaviour enabled to protect against 0-day exploits in the font engine. Images provide the alt attribute for just this reason. However, if you're going to use a font for icons, make sure you store your glyphs in a Unicode Private Use Area . That'll mitigate the problem a bit by ensuring there's probably no conflict (Companies can and do sometimes use PUA glyphs to store custom data) and, if they're coded smartly, screen readers could know to gracefully ignore PUA glyphs. As for implementing a fallback, I'd suggest using Modernizr (specifically, Modernizr.fontface ) to test for support.
