[site]: stackoverflow
[post_id]: 5520915
[parent_id]: 5520638
[tags]: 
The thing to keep in mind is that it will be the view controller which set up the alert view which will present the picker view and not the alert itself. To do this the view controller needs to set itself up as the alert view's delegate. I created a very simple view based app to show this and here's the code for the root view controller: // // PickerAlertViewController.h // PickerAlert // #import @interface PickerAlertViewController : UIViewController { } - (IBAction) pickerButtonAction; @end and // PickerAlertViewController.m // PickerAlert // #import "PickerAlertViewController.h" @implementation PickerAlertViewController - (IBAction) pickerButtonAction { UIAlertView *alert = [[UIAlertView alloc] initWithTitle: @"Pick Something" message: @"Touch 'Cancel' if you don't wish to make a selection." delegate: self cancelButtonTitle: @"Cancel" otherButtonTitles: @"Picker", nil]; [alert show]; [alert release]; } #pragma mark - #pragma mark Alert View Delegate Method - (void) alertView: (UIAlertView *) actionSheet clickedButtonAtIndex: (NSInteger) buttonIndex { if ( buttonIndex == 0) { NSLog( @"Cancelled"); // Nothing left to do since the alert has been dismissed. } else { NSLog( @"Picker Button selected."); // Set up a picker view either programmatically or load from a nib then either // push it on to the navigation stack or present it modaly. } } #pragma mark - #pragma mark View Controller Memory Management - (void)didReceiveMemoryWarning { // Releases the view if it doesn't have a superview. [super didReceiveMemoryWarning]; // Release any cached data, images, etc that aren't in use. } - (void)viewDidUnload { // Release any retained subviews of the main view. // e.g. self.myOutlet = nil; } - (void)dealloc { [super dealloc]; } @end I added a button in Interface builder and wired it to the 'pickerButtonAction' method. In the header file I've designated that 'PickerAlertViewController' will adhere to the UIAlertViewDelegate protocol. When the alert is set up it's delegate is set to self. The delegate method that I used to get the user's selection is: (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex I hope that this will work for you.
