[site]: crossvalidated
[post_id]: 587971
[parent_id]: 587894
[tags]: 
Your problem is more along the line of time series segmentation and changepoint detection. If you care for a readily available solution in R (or Matlab), there are numerous alternatives possible (e.g., strucchange , and changepoint ), as summarized in the R CRAN task view on time series: https://cran.r-project.org/web/views/TimeSeries.html . If you want to implement your own, I find the easiest reference as a starting point is Keogh, Eamonn, Selina Chu, David Hart, and Michael Pazzani. "Segmenting time series: A survey and novel approach." ( https://www.ics.uci.edu/~pazzani/Publications/survey.pdf ). Apparently, assumptions of all sorts are made in different methods. As a practitioner, I think no single method is the best all the time: try and let the results tell which suits your purpose. Allow me to use one package Rbeast written by me and available in R and Matlab ( more info at https://github.com/zhaokg/Rbeast ) to illustrate the basic idea. It accepts regular or irregular data with or without a periodic component. It seeks to decompose a time series into trend and seasonality and simultaneously detect changepoints in the trend and seasonal components. library(Rbeast) # Nile: an annual riverflow time series of the River Nile # season='none': no periodic/seasonal component so no time series decomposition is performed and only changepoint detection is done o = beast(Nile, season='none') plot(o) The time series is divided into two segments, with one changepoint. The time-varying probability of changepoint occurrence in the trend component is shown in the second subplot Pr(tcp) . The sgnSlp subplot gives the probability of the slope being positive, zero, or negative over time. Here is another example using the covid19 daily time series of new cases, with a periodic component of 7 days. library(Rbeast) data(covid19) newcases = covid19 $newcases datenum = as.numeric(covid19$ date) o = beast(newcases, start=min(datenum), deltat=1, freq=7) o $time = as.Date(o$ time, origin='1970-01-01') # Convert from integers to Date. plot(o) Here is the output. In this case, the time series was decomposed into the seasona/periodic component and the trend component. The locations of changepoints in the two components are indicated by the dash lines in the season and trend subplots.
