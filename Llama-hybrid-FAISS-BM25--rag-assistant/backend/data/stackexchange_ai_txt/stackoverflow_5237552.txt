[site]: stackoverflow
[post_id]: 5237552
[parent_id]: 
[tags]: 
Is it possible to modify a ReadOnlyCollection using reflection

I'm dealing with an SDK that keeps references to every object it creates, as long as the main connection object is in scope. Creating a new connection object periodically results in other resource issues, and is not an option. To do what I need to do, I must iterate through thousands of these objects (almost 100,000), and while I certainly don't keep references to these objects, the object model in the SDK I'm using does. This chews through memory and is dangerously close to causing OutOfMemoryExceptions. These objects are stored in nested ReadOnlyCollections, so what I'm trying now, is to use reflection to set some of these collections to null when I'm done with them, so the garbage collector can harvest the used memory. foreach (Build build in builds) { BinaryFileCollection numBinaries = build.GetBinaries(); foreach (BinaryFile binary in numBinaries) { this.CoveredBlocks += binary.HitBlockCount; this.TotalBlocks += binary.BlockCount; this.CoveredArcs += binary.HitArcCount; this.TotalArcs += binary.ArcCount; if (binary.HitBlockCount > 0) { this.CoveredSourceFiles++; } this.TotalSourceFiles++; foreach (Class coverageClass in binary.GetClasses()) { if (coverageClass.HitBlockCount > 0) { this.CoveredClasses++; } this.TotalClasses++; foreach (Function function in coverageClass.GetFunctions()) { if (function.HitBlockCount > 0) { this.CoveredFunctions++; } this.TotalFunctions++; } } FieldInfo fi = typeof(BinaryFile).GetField("classes", BindingFlags.NonPublic | BindingFlags.Instance); fi.SetValue(binary, null); } When I check the values of the classes member in numBinaries[0], it returns null, which seems like mission accomplished, but when I run this code the memory consumption just keeps going up and up, just as fast as when I don't set classes to null at all. What I'm trying to figure out is whether there's something intrinsically flawed in this approach, or if there's another object keeping references to the classes ReadOnlyCollection that I'm missing.
