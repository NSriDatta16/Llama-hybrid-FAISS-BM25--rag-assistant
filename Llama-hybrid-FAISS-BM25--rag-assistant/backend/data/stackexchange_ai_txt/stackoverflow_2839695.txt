[site]: stackoverflow
[post_id]: 2839695
[parent_id]: 2839636
[tags]: 
This is actually a tricky one. The table you're talking about is basically a trade table, detailing all your buys and sells. In that sense, you would think it would make sense to have both buys and sells in a single table. However, in many jurisdictions, there is extra information for a sell order. That piece of information is which buy order to offset it against (for capital gains or profit purposes). While this is not necessary in a strict first-bought, first-sold (FBFS) environment, that's by no means the only possibility. For example, under Australian law, you can actually offset a sale against your most recent purchase, as long as you have the rationale written down in clear language before-hand. Even though my company follow FBFS, I am allowed to receive bonus issues or supplemental shares which I can then sell immediately. These are offset against the most recent shares bought, not ones I've held for X number of years (this is often handy to minimise taxes payable). If you follow a strict FBFS, then you don't need that extra information and your trades are symmetrical. Even where they're not, I've implemented it in one table with the extra information, useless for buy orders of course. That seemed the easiest way to go. You could do it as two asymmetrical tables but that makes queries a bit more problematic since you often need to pull data from both tables. My advice is to stick with a single table with the extra information if needed. I would also never store the average price. I prefer the quantity, the price per share and the brokerage costs. Every other figure can be calculated from those three, for example: AvgPrice = (Brokerage + SharePrice * ShareQuant) / ShareQuant but it's sometimes impossible to work backwards from just the average price, since you don't know what the brokerage was. And I wouldn't have a boolean for buy/sell, it's just as easy to use negative numbers for the sell orders and it makes balance-sheet-type calculations a lot easier since you just sum values irrespective of the order type instead of needing to negate some of them depending on that order type. Update: If, as you seem to indicate, you're only going to store aggregate information for each company, I would go for the following: Companies: CompanyId primary key CompanyCode indexed CompanyName CompanyBuyQuant CompanyBuyAvgPrice CompanySellQuant CompanySellAvgPrice then you update the individual columns depending on whether it's a buy or sell. You don't need a separate row for the buy/sell stuff. When the company is first added, both quantities and prices are set to 0. Your entity is now the company so this makes more sense. One thing you may want to consider is to store the aggregate values of shares bought and sold rather than the average buy and sell prices. That will simplify your update calculations and you can still easily get the averages by dividing the aggregate by the quantity. So, the following table: Companies: CompanyId primary key CompanyCode indexed CompanyName CompanyBuyQuant CompanyBuyValue CompanySellQuant CompanySellValue When adding a company, set all quanities and values to 0, When buying M shares at N dollars each, add M to CompanyBuyQuant and N * M to CompanyBuyValue . When selling M shares at N dollars each, add M to CompanySellQuant and N * M to CompanySellValue . Get average buy price as CompanyBuyValue / CompanyBuyQuant . Get average sell price as CompanySellValue / CompanySellQuant .
