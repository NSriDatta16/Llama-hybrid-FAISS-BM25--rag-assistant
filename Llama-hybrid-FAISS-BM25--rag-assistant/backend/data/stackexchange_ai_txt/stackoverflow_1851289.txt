[site]: stackoverflow
[post_id]: 1851289
[parent_id]: 
[tags]: 
Is it bad practice to have a class that requires a reference to the instantiating object?

I saw this in someone's code and thought wow, that's an elegant way to solve this particular problem, but it probably violates good OO principles in an epic way. In the constructor for a set of classes that are all derived from a common base class, he requires a reference to the instancing class to be passed. For example, Foo Foo_i = new(this); Then later on Foo would call methods in the instancing class to get information about itself and the other objects contained by the instancing class. On the one hand, this simplifies a TON of code that models a 5-layer tree structure in hardware (agents plugged into ports on multiple switches, etc). On the other hand, these objects are pretty tightly coupled to each other in a way that seems pretty wrong, but I don't know enough about OOA&D to put my finger on it. So, is this okay? Or is this the OO equivalent to a goto statement?
