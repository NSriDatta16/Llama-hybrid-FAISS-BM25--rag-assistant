[site]: stackoverflow
[post_id]: 1171055
[parent_id]: 1170912
[tags]: 
You load the HTML into a DOMDocument class, load that into simpleXML. Then you do an XPath query for all p elements and then loop through them. On each loop, you rename the class attribute to something like "killmeplease". When that's done, reoutput the simpleXML as XML (which, by the way, may change the HTML, but usually only for the better), and you will have a HTML string where each p has a class of "killmeplease". Use str_replace to actually remove them. Example: $html_file = "somehtmlfile.html"; $dom = new DOMDocument(); $dom->loadHTMLFile($html_file); $xml = simplexml_import_dom($dom); $paragraphs = $xml->xpath("//p"); foreach($paragraphs as $paragraph) { $paragraph['class'] = "killmeplease"; } $new_html = $xml->asXML(); $better_html = str_replace('class="killmeplease"', "", $new_html); Or, if you want to make the code more simple but tangle with preg_replace, you could go with: $html_file = "somehtmlfile.html"; $html_string = file_get_contents($html_file); $bad_p_class = "/( )/"; $better_html = preg_replace($bad_p_class, '$1 $3', $html_string); The tricky part with regular expressions is they tend to be greedy and trying to turn that off can cause problems if your p element tag has a line break in it. But give either of those a shot.
