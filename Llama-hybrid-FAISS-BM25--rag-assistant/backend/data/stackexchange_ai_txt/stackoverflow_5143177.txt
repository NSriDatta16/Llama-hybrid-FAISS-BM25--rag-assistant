[site]: stackoverflow
[post_id]: 5143177
[parent_id]: 5143135
[tags]: 
You have two options: Change GetObjectId to a generic function that takes a T . You can then store the Func s in a generic static class and call them by writing FuncStorage .Value(obj) . Use expression trees to Create Func s that calls the Func (using a cast) and put those in your Dictionary > . EDIT : You don't need expression trees to do that; you can use a normal lambda expression which casts to T . I was thinking of the reverse case (generating a generic delegate from a non-generic one), which does require expression trees.
