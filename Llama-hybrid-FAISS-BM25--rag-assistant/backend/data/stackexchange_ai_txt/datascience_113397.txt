[site]: datascience
[post_id]: 113397
[parent_id]: 113180
[tags]: 
As Brian Spiering said, when you have to face massive numbers of vehicles, it is indeed better to study the case with a general approach first and increase in complexity. Then, this kind of business case is often subject to seasonalities and special events that play an important part in the predictions like lockdowns, covid, fuel price, climate issues, gas shortage, etc. Consequently, even if your model learns over years of data, if there are no mechanisms to detect seasonality or special events, the predictions might be wrong. The special events can trigger a flag that a model could understand and make realistic predictions accordingly. Please note that some external data could be important to include in your model such as the weather, fuel price variations, or business-related stock prices. For instance, people are more cautious when it rains and arrive at work later. To do that, you can use multi-variate algorithms such as: Prophet Random Forest XGBoost LSTMs Of course, it is better to start with a model learning on 1 or 2 main features and then increase in complexity with more features. One last piece of advice: The best way to evaluate a predictive model is by comparing the prediction every day with the real values to have its real accuracy. I used to have great predictive models with 90% of accuracy with test data, but once I tested them in the "real world", the accuracy dropped to 60%. So having a good model with test data could not be good enough in reality. That's why reality could help a lot for model improvement by noticing external dependencies or special events. Developing more models could be a good option to compare them in the long run. Here is an interesting article that takes into account seasonality and events with Prophet: https://medium.com/grabngoinfo/multivariate-time-series-forecasting-with-seasonality-and-holiday-effect-using-prophet-in-python-d5d4150eeb57 Random Forest can also achieve good results: https://towardsdatascience.com/multivariate-time-series-forecasting-using-random-forest-2372f3ecbad1 XGBoost might also be interesting : https://cprosenjit.medium.com/multivariate-time-series-forecasting-using-xgboost-1728762a9eeb https://machinelearningmastery.com/xgboost-for-time-series-forecasting/ LSTMs are fine, but they need good data preparation because their memory is quite limited: https://machinelearningmastery.com/multivariate-time-series-forecasting-lstms-keras/
