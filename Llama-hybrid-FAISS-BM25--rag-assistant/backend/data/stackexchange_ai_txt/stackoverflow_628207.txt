[site]: stackoverflow
[post_id]: 628207
[parent_id]: 627871
[tags]: 
IIRC, a usecase describes a typical usage of a system, right? But what thin[g]s belong on a usecase diagram, and how do they connect together? Your Use Case diagrams (yes, a typical project will have more than one) should probably be the simplest diagrams in your UML suite. They should map Actors / Roles that you have defined directly to the Use Cases of your system. In fact, they should focus primarily on a single Actor and only include other Actors if they must participate in a particular Use Case. Here's an example that I got off Google: Sample Use Case Diagram http://java.sun.com/mailers/newsletters/fundamentals/img/usecase.png Note the simplicity. One Actor, one System, 5 Use Cases. Nothing else. Also, as @Eric P suggested and my example image implies, you should title your Use Cases with a "[Verb] [Object]" structure; i.e. "member borrows a book" becomes "Borrow Book". The missing subject of your use case sentence ("member") is encoded in your Use Case diagram as as an Actor with an association to the Use Case. The employee is the one who is using the system. Does a member still belongs here as an actor? I'm afraid the answer to that is subjective. Some will say no, that because the system is only being used by the employee, then the employee is the only actor. I personally disagree. Why? For one, Use Cases are part of the requirements gathering phase. They are there to help you organize the eventual functionality of the system. But to deny the Member Actor simply because your current belief is that the technology will not be used by the Member is to limit yourself in that phase. What if your eventual system is automated, meaning that the Member goes to a terminal to check out a book herself? If you made an assumption during requirements gathering, you might miss out on important functionality. Edit: How are sequences of action described? I've been told you can see a uses association like a method call to some kind of routine which recurs? Is this right? And how is extended used? Use Case Diagrams are high level . They should show your high-level functionality (in the form of each Use Case) and the Actors that utilize them and nothing else. Don't litter your Use Case Diagrams with extends and includes; those should be rare and special-case only. The biggest rookie mistake you can make (and believe me, I've made it!) is to try to modularize your code inside your Use Case diagram. Yes, I know, it's the first thing any programmer worth his salt tries to do, but Use Case diagrams are not the place for it. Regarding sequences of action: in a typical suite of UML diagrams, each Use Case has associated with it one or more Activity Diagrams . These are roughly analogous to a flow chart and serve as a graphical representation of the typical Use Case narrative structure that most Software Engineering textbooks encourage. Anyway, I hope this helps. If you have other questions, feel free to ask!
