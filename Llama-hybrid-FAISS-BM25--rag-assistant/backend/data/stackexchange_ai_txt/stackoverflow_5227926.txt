[site]: stackoverflow
[post_id]: 5227926
[parent_id]: 5226819
[tags]: 
Of the solutions: Is hacky but certainly doable. You probably don't want to use system() itself, as you'll want to read and write the output likely from pipe() calls. IE, you'll need to create the necessary sockets, fork and then execute the perl script in the child and read the output from the parent. Though this is probably less code, it's not necessarily easier to get right than: embedding perl: takes a bit to get set up, but once it's set up it's actually really slick. I wrote an entire embedded perl system for Net-SNMP which works wonderfully. Once you get it set up it's pretty amazing how little effort it takes to get it up and running. That being said, it's pretty scary code. perl-to-c may be nice in theory, but I wouldn't expect it to work all the time. If you only have to do this once, it might be worth a shot. But you'll need a good testing suite to ensure the output is what you expect. rewriting the script by hand: honestly, this is certainly the "cleanest" solution. If the script isn't going to change in the future, this is likely the way to go unless it's a daunting task because it's actually that big (you don't say). Each of the above methods has advantages and disadvantages. It depends on what you're concerned about: Doing it frequently (ie, the perl is going to keep changing): use embedded perl the least amount of time: then it depends on how big the script is. Either 1, 2, 3 or 4 is likely to be the fastest depending on what the script looks like. If it's long, then skip #4. If it's really short, then go straight to number 4. In the end, if it were me, I'd select either embedding or translating depending on whether it is going to change again. Now... I wrote a whole system for geocaching that I actually want to translate into Qt because I think it'll be more portable. What's my right choice? Translating. But it's going to take a lot of time, hence the reason I haven't done it yet.
