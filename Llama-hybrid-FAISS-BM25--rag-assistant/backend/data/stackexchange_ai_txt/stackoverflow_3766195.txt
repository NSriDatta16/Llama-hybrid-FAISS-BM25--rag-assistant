[site]: stackoverflow
[post_id]: 3766195
[parent_id]: 2691137
[tags]: 
Having attempted to solve this problem using this question and other questions which are similar/the same, I couldn't get a good example of how to accomplish this. However, pooling many posts (and Office Help's description of what LINEST actually does) I thought I would post my solution code. /// /// Finds the Gradient using the Least Squares Method /// /// The y intercept of a trendline of best fit through the data X and Y public decimal LeastSquaresGradient() { //The DataSetsMatch method ensures that X and Y //(both List in this situation) have the same number of elements if (!DataSetsMatch()) { throw new ArgumentException("X and Y must contain the same number of elements"); } //These variables are used store the variances of each point from its associated mean List varX = new List (); List varY = new List (); foreach (decimal x in X) { varX.Add(x - AverageX()); } foreach (decimal y in Y) { varY.Add(y - AverageY()); } decimal topLine = 0; decimal bottomLine = 0; for (int i = 0; i /// Finds the Y Intercept using the Least Squares Method /// /// The y intercept of a trendline of best fit through the data X and Y public decimal LeastSquaresYIntercept() { return AverageY() - (LeastSquaresGradient() * AverageX()); } /// /// Averages the Y. /// /// The average of the List Y public decimal AverageX() { decimal temp = 0; foreach (decimal t in X) { temp += t; } if (X.Count == 0) { return 0; } return temp / X.Count; } /// /// Averages the Y. /// /// The average of the List Y public decimal AverageY() { decimal temp = 0; foreach (decimal t in Y) { temp += t; } if (Y.Count == 0) { return 0; } return temp / Y.Count; }
