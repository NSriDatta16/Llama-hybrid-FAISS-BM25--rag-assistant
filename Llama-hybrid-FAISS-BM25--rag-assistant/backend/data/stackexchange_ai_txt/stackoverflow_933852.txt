[site]: stackoverflow
[post_id]: 933852
[parent_id]: 933831
[tags]: 
Interfaces are usually favored, for several reasons : Polymorphisme is about contracts, inheritance is about reuse Inheritance chains are difficult to get right (especially with single inheritance, see for instance the design bugs in the Windows Forms controls where features like scrollability, rich text, etc. are hardcoded in the inheritance chain Inheritance causes maintenance problems That said, if you want to leverage common functionnality, you can use interfaces for polymorphism (have your methods accept interfaces) but use abstract base classes to share some behavior. public interface IFoo { void Bar(); enter code here } will be your interface public abstract class BaseFoo : IFoo { void Bar { // Default implementation } } will be your default implementation public class SomeFoo : BaseFoo { } is a class where you reuse your implementation. Still, you'll be using interfaces to have polymorphism: public class Bar { int DoSometingWithFoo(IFoo foo) { foo.Bar(); } } notice that we're using the interface in the method.
