[site]: stackoverflow
[post_id]: 4315542
[parent_id]: 4314897
[tags]: 
That looks quite bad. First, associating the retrieval of the status information with the saving of the object is quite a bad idea. If 'updating' is the only action you'll ever perform on this model, then maybe a better idea would be to write a an "update()" method that automatically saves once the status is updated, instead of doing it the other way around. def update(self): self.status = get_store_information(self.store.code) self.save() Second: how are you creating the first instance of this model? You'll get duplication errors if you are trying to save a new instance every time the model gets updated. Say, if you do something like this: # this will crap out update = Update(mystore) update.save() What you should be doing is something like: # this will work (provided we have 'update') mystore.status.update() Or: # always retrieve the stored instance before saving status, created = StoreStatus.objects.get_or_create(store=mystore) status.update() In case you are lazy enough, you can always add an "update_status" method to your Store model and perform the creation/update there. It's always better to be explicit about what you are doing. Remember: Django is based upon the principle of least surprise, and so should your code! :)
