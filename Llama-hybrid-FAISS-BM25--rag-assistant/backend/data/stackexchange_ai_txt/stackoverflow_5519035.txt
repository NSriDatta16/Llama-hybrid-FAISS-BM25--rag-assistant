[site]: stackoverflow
[post_id]: 5519035
[parent_id]: 5508621
[tags]: 
You're not allocating any memory for the array of structures you're trying to copy into your output file, as well as the character array members in your structure. Simply copying the pointer returned from strtok() will not work as that is pointing to a static character array inside the strtok() function. So basically after a single pass through your while-loop, both temp.AccountName and temp.LastPaymentDate are pointing to the same exact memory location. Furthermore as chemuduguntar pointed out above, when you write-out the structure, you're only writing out the memory pointers ... there is no actual string data in your structure for what you're assuming are character arrays. You have two choices ... either declare your structure with static storage to store the string arrays and then use strcpy() to copy the data from strtok() into those arrays, or use malloc() and allocate memory for your pointers (just remember you'll have to free those pointers later unless you want memory leaks). So for instance, you could do something like this: #define MAXBUFSIZE 511 typedef struct { int AccountNumber; char AccountName[MAXBUFSIZE + 1]; double AccountBalance; double LastPaymentAmount; char LastPaymentDate[MAXBUFSIZE + 1]; } Person; Then inside your while-loop, when you call strtok() you can do this: tok = strtok(NULL, ","); strncopy(temp.AccountName, tok, MAXBUFSIZE); temp.AccountName[MAXBUFSIZE] = '\0'; //safety NULL termination //...more code tok = strtok(NULL, ","); strncopy(temp.LastPaymentDate, tok, MAXBUFSIZE); temp.LastPaymentDate[MAXBUFSIZE] = '\0'; //safety NULL termination Now with this approach there is actual data inside your structures that is not pointing to some temporary storage somewhere ... the only downside to this approach is that if you go over 512 bytes, then you'll clip that data. If you go under 512 bytes, then you will have all zeros padding out the end of the character arrays. Next, somewhere you need to declare either: Person myarray[10]; or Person* myarray = calloc(10, sizeof(Person)); because right now every time you go through your while-loop, you're over-writing the previous value of temp . So at some point you need to copy your temp structure into more permanent storage array. For instance, at the end of your while-loop you should call: memcpy(&myarray[LOOPNUMBER], &temp, sizeof(Person)); Finally, for the call to fwrite() I would change that slightly so it's something like: for(i=0;i And again, if you use pointers with malloc() , calloc() , etc., be sure to free that storage afterwards by a call to free() . Hope this helps, Jason
