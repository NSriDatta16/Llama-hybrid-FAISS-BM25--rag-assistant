[site]: stackoverflow
[post_id]: 1061694
[parent_id]: 1050697
[tags]: 
Consider a game that has been architected to have a number of independent modules, each interacting with each other via interfaces only. The initial deployment of such a game could consist of 15 or 20 individual jar files. Applying updates would then be a matter of connecting to a server, querying for the latest version of each jar file, comparing against the jar file that you already have, and downloading only the changed files. A poor-man's version of this would be if you were working on a project that has 15 jars, and you make a critical bug fix to one of the jars. You wouldn't have to copy all 15 jars to your customer's system - you jut copy the one that changed. jnlp (of which Webstart and the new applet implementation are examples) does this using a well defined xml file to define which versions of each library are required. In this case, initial deployment of the application can be performed by reading the xml (served by a web server), and dynamically downloading required jar files to a local cache during a bootstrap operation. There actually is no initial installation at all. It is probably important to mention that this benefit, while certainly valid and real, is pretty minor compared to the maintainability and ease of coding that comes from reducing dependencies between modules, and using well defined interfaces.
