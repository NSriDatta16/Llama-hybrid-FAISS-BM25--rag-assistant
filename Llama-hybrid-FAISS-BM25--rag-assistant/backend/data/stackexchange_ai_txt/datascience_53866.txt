[site]: datascience
[post_id]: 53866
[parent_id]: 18933
[tags]: 
You can use sklearn.preprocessing.QuantileTransformer (or sklearn.preprocessing.PowerTransformer ) which does exactly what you want: from sklearn.preprocessing import QuantileTransformer import numpy as np ey = np.random.exponential(size=100) qt = QuantileTransformer(output_distribution='normal') no = qt.fit_transform(ey.reshape(-1, 1)) You can plot histograms to compare "before" vs "after": # Plot histograms to see before vs after. import matplotlib.pyplot as plt %matplotlib inline plt.subplot(2, 2, 1) plt.hist(ey, bins='auto') plt.subplot(2, 2, 2) plt.hist(no, bins='auto') plt.show() The advantage of this approach is that it will also work for other input distributions, not only exponential.
