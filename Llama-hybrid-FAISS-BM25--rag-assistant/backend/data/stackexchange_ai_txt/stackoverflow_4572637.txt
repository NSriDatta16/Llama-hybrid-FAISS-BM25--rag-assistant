[site]: stackoverflow
[post_id]: 4572637
[parent_id]: 4503921
[tags]: 
The short answer is no, the long answer is yes (but you wouldn't like the result). The key thing to remember is that F# is a statically typed language, full stop . For the code that you provided, what type does newData have? If it cannot be pinned down at compile-time, then you need to resort to casting to/from Obj. // newdata MUST have a static type, even if obj let newdata = colBind data {logIncome = log(data.income)} Imagine colBind has the following sinature: val colBind: Thingey -> 'b -> Thingey2 That would actually work for a ways, but it wouldn't work universally. Because eventually you would need a type that would not exist at compile time. F# type providers allow you to statically type data originating from outside of the standard compile-time environment. However, the types are still static. There is no way to alter those types dynamically at runtime*. *You can modify the object at runtime using shenanigans such as DynamicObject . However, once you start going down that path you lose all the benefits of a statically typed language such as Intellisense. (Which is a major reason for using F# in the first place.) Conceptually, what you want to do is straight forward. The System.Data.DataTable type already has the notion of storing tabular data with the ability to dynamically add columns. But since the type information for added columns is not known at compile time it follows that things stored in those columns must be treated as Obj and casted at runtime.
