[site]: stackoverflow
[post_id]: 581271
[parent_id]: 581074
[tags]: 
There is also a large body of projects related to Lua at LuaForge . If you happen to use Windows as your day-to-day platform, then I would recommend getting the Lua for Windows package as a nice starting point. It includes a wide array of useful modules all prebuilt and installed together with the Lua interpreter. After your first pass through PiL and the reference manual , you will want to read Lua Programming Gems which is currently only available in a paper edition. Do consider buying the books through the associate links at Lua's books page or LuaForge to support the projects. Edit: As for ideas for programming projects where Lua is suited, look for problems where the table provides leverage. Tables are central to Lua, since even the global variables are just fields in a table. Tables can be indexed by values of any data type except nil , but have an especially efficient implementation if used as arrays. One quirk that trips up people coming from a C-like background is that all things in Lua are naturally indexed starting from 1. Strings are indexed from 1, arrays start at 1, etc. Don't worry about it too much, there is nothing wrong with using a[0] , but the length of the array given by #a is defined assuming that the array began with a[1] . Another quirk is that functions don't really have names. They are first class values that are usually stored in some variable that has a name. Syntax sugar makes it look like they have names, but that is just a convenience. Metatables are a particularly Lua-ish feature of tables (and other types, but that is a really advanced topic) that are the basis for most of the schemes for doing object-oriented things in Lua. Closures and true tail calls are other features of Lua that aren't often found in small scripting languages that can really make some idioms easy to implement.
