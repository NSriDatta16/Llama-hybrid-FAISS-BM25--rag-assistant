[site]: stackoverflow
[post_id]: 410592
[parent_id]: 407235
[tags]: 
Ok, little background, I work in Wireless Telecom, where our platforms require absolute uptime, and having seen all the different strategies, you absolutly should not be using a software based approach, it adds software complexity, where all you need to do is add some hardware. Since they asked for a hitless upgrade, that must have a redundant system, and the absolute best way to have a server app be redundant is using a hardware load-balancer. At work we have foundry's and all our new stuff is going on Cisco Ace load-balancers. So what you need, is two Cisco load balancers, set up HSRP between them for failover between the load-balancers. You can be very aggressive with the failover settings, but in our experience, being too aggressive with these can cause unneeded failovers. Also, make sure to turn off proxy-arp (it'll save you heartache, since cisco has it on by default). Now, you have a cluster of application servers right? So you have the load-balancers ping, port ping, and monitor application response times. All you need is atleast two servers, but you can add more later (where's the capacity plan?). So now here comes the hitless upgrade, during you're maintenance window, from the load-balancer you can admin down one of you're server's. But the load-balancer can do the really wikid admin downs where any current connections remain until they finish up naturally. In this state, any requests go to the second server, and you have all the time in the world to do whatever you want to the server you're upgrading. Like really, why write an app that has a fancy app domain reload thing, when you're going to have to reboot the server every 3 months to apply a critical windows patch anyways? Just shell out the cash for the hardware, and have something that will work properly 100% of the time, and can get you in range of those 5x 9's even with the unplanned problems. Now here's the next step, geographic redundancy. Cisco does have a load-balancing product that can do geographic load-balancing, but I've never seen it. The best geograghic model I've seen is actually based on the requesting application. This isn't a hitless upgrade, but is absolutly reliable. What you do, is in the requesting application configure a primary and failover server IP address. The applation in it's requests see's if the server becomes unavailable, will initiate the same request to the standby, which in this case could be at the same server room, or the backup location. Ideal would be a combination, where the application can target a load-balancer virtual IP at one location, or the backup location, and you can use the load-balancer's to maintain the 100% in each location. Also, if he's worried about latencies between app domains, or latencies across the network, the guy's on crack, cause using the proper cisco equipment, latencies on a gig link are in the microseconds, and will not be you're weak point. Good luck.
