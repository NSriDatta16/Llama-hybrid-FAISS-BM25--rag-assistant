[site]: stackoverflow
[post_id]: 4502697
[parent_id]: 4502618
[tags]: 
One thing you need is "include guards" so that you don't get a bunch of compiler errors due to redefinition. Put something like the following in each of you header files: #ifndef TIRES_H #define TIRES_H // contents of the header file... #endif Of course, change the name used for the macro guard ( TIRES_H ) as appropriate for each file. The macro name needs to be unique - basing it on the header file name is usually good enough. Also, many (most?) compilers support a #pragma once preprocessed directive that prevents headers from being processed more than once, but I still generally use the standard include guards. This allows headers to be included more than once, since the guards cause subsequent includes of the file to essentially skip the entire contents. Almost all C/C++ headers should have include guards so users don't need to worry about whether or not a necessary header was already included (the exceptions are headers which need to redefine things differently when included at different times - this is a pretty rare technique). Include guards also enable you to have header files (like cars.h in your example) include the headers they need without regard to what else might also include the headers, so your headers can be self-contained and can be included in any order.
