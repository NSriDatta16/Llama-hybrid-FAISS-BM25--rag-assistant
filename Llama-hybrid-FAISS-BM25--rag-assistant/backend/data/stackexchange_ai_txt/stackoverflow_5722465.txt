[site]: stackoverflow
[post_id]: 5722465
[parent_id]: 5720689
[tags]: 
I strongly suggest looking at The "guess the number" game for arbitrary rational numbers? for some inspiration about your underlying problem. If your goal is to be approximately uniform ASAP, and you don't mind picking different rationals with different probabilities, the following algorithm should be efficient. lower = fractions.Fraction(0) upper = fractions.Fraction(1) while lower Note that both of those two helper functions can be calculated by walking the Stern-Brocot Tree towards the mid. Also note that, with some minor modification, you can easily transform this into an iterative algorithm that spits out a sequence of rational numbers, and eventually will converge with equal likelihood anywhere in the interval. I consider that property to be kind of nice. If you want the exact distribution that you originally specified, and rand(n) gives you a random integer from 1 to n , then the following pseudocode will work for denominator bound n : Try: k = rand(n * (n+1) / 2) do binary search for largest j with j * (j-1) / 2 On average for large n you'll have to Try about 2.55 times. So in practice this should be pretty efficient.
