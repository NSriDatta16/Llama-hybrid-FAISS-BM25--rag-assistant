[site]: crossvalidated
[post_id]: 632436
[parent_id]: 
[tags]: 
Including imprecise target variable observations in a regression random forest

The situation: For a project I am working on, we try to predict a continuous target variable from some predictors in a random forest. The observations of the target variable are measured with two types of resolutions/quality standards. These can be loosely defined as: 'precise' measurements ( y is exactly ££.£ ) 'imprecise'/'minimum' measurements ( y is at least £ ) Each observation is only measured in one of these resolutions, for the rest, they share the same predictors and sampling design. In total, there are about 3000 precise observations and 2600 minimum observations. Problem statement: Initially, I was inclined to split the data set using only the precise observations as training data and the minimum observations as heuristic test data. However, given its relatively large data volume, there might be a possibility that the minimum observations could enhance the model training. But the question is: How can I include the minimum observations in a random forest model and make the algorithm aware that it should predict upwards from these observations? I prepared a toy data set to illustrate the problem. In this example I would be interested in predicting the target variable medSoldPriceSqft using the rest of the predictors. my_data is the precisely measured data, my_min_data is the imprecisely measured data: library(dplyr, plyr, housingData) housing_modified % # add the state name rownames_to_column(var = 'State') %>% # add the abbreviated state name left_join(data.frame(datasets::state.abb, datasets::state.name), by = c('State' = 'state.name')) %>% # join the housing data right_join(housing, by = c('state.abb'='state')) %>% # omit NA-values na.omit() %>% #' cast the `time`-variable to a decimal date mutate(time = decimal_date(time)) %>% # remove redundant columns select(-c(fips, state.abb)) # make a holdout set of counties county_holdout % distinct(State, county) %>% slice(1:4, .by = State) %>% pull(county) # define an example of the 'precisely measured data' my_data % filter(time >= 2014) %>% filter(time == min(time)) %>% filter(!(county %in% county_holdout)) %>% select(-time) # define an example of 'imprecisely measured data' my_min_data % filter(time >= 2013) %>% filter(time == min(time)) %>% filter(county %in% county_holdout) %>% mutate(medSoldPriceSqft = plyr::round_any( medSoldPriceSqft, accuracy = 50, f = floor)) %>% select(-time)
