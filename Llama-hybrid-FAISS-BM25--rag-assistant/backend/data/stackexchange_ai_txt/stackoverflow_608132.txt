[site]: stackoverflow
[post_id]: 608132
[parent_id]: 608097
[tags]: 
In general mathematical terms: next === current + 1 (mod count) prev === current - 1 (mod count) where === is the 'congruent' operator. Converting this to the modulus operator, it would be: count = upper - lower next = ((current + 1 - (lower%count) + count) % count) + lower prev = ((current - 1 - (lower%count) + count) % count) + lower It would be up to you to find out the upper & lower bounds for each item. You could store this in a binary tree for fast retrieval. Maybe I'm not understanding your question. (note that this assumes lower 0)
