[site]: crossvalidated
[post_id]: 539710
[parent_id]: 
[tags]: 
PACF correct interpretation

I'm three days old to Time Series Analysis and I'm trying to build an AR model on the variable slope_ma, which is a one period difference of X's mva 5 periods. X is generated from a random walk process. $\Large Z_t = slope_{ma_t} = MVA(X;5;t) - MVA(X;5;t-1)$ $\Large Z_{t} = \Phi_{1}Z_{t-1} + \Phi_{2}Z_{t-2} + \Phi_{2}Z_{t-3} + \Phi_{4}Z_{t-4} + \Phi_{5}Z_{t-5} + \Phi_{6}Z_{t-6}$ (Ref. Time Series Analysis - Univariate and Multivariate - Second Edition - William Wei, pg. 15) In this case k=0 As I understand PACF at lag $t-6$ (, $\approx 0.3.945$ ), corresponds to the value of $\Phi_{k6}$ coefficient and as per my knowledge that means that term $t-6$ it is positively correlated with term $t-1$ and $t$ itself. But something tells me I'm wrong, cannot be that easy. Can some one please explain correct interpretation for this case? The code below performs the following analysis: import numpy as np import pandas as pd from datetime import datetime from dateutil import parser import seaborn as sns sns.set() import matplotlib.pyplot as plt import statsmodels.graphics.tsaplots as sgt from statsmodels.tsa.arima_model import ARMA class RandomWalk: @staticmethod def gen_random_walk(size, std, last_date=None, value_0=0, freq="H", output_col_name="X"): if last_date == None: _last_date = datetime.today() else: _last_date = parser.parse(last_date) _p_t = np.zeros(size) _wn = np.random.normal(loc=0, scale=std, size=size) _p_t[0] = value_0 _wn[0] = 0 _date_index = pd.date_range(end = _last_date, periods=size, freq=freq) _df_rw = pd.DataFrame(np.stack([_p_t, _wn], axis=1), columns=[output_col_name, "wn"], index=_date_index) for i in range(1, size): _df_rw.iloc[i][output_col_name] = _df_rw.iloc[i - 1][output_col_name] + _df_rw.iloc[i].wn return _df_rw PRD = 5 df = RandomWalk.gen_random_walk(10000,0.0001,value_0=1.0,freq="5min") df["X"].plot(figsize=(15,5), title="X") plt.show() df["mva"] = df["X"].rolling(PRD).mean() df["slope_ma"] = df["mva"] - df["mva"].shift(1) df["slope_ma"].plot(figsize=(15,5), title="Slope MA") df.dropna(inplace=True) sgt.plot_pacf(df.slope_ma, lags=40, zero=True) plt.show() model = ARMA(df.slope_ma, order=(6,0)) results = model.fit() print(results.summary())
