[site]: stackoverflow
[post_id]: 3253052
[parent_id]: 3227789
[tags]: 
I think the flexibility and ease of use (readable code, lots of libraries/packages) are the big draws. Regarding enables rapid systems application prototyping using of c++ libraries using swig wrappers I actually work on a Python product for mathematical and statistical analysis (PyIMSL Studio) designed specifically to address this issue, although we use ctypes instead of swig. For a variety of reasons lots of businesses use C/C++ in their enterprise applications. If they want to add some analytical functionality prototyping it in Python can be a lot faster than in C. Our Python libraries wrap our C numerical libraries 1:1, so once the prototyping is done the production development can take place confident that the same algorithms are available and the same results will be achievable. Bridging that prototype to production gap can be harder when moving from a very domain specific language like R or MATLAB to C than with a very general purpose language like Python. Regarding built to a well defined language specification you should take a look at the public comments for the Security and Exchange Commissions's proposal to make Python be the language used in new assest-backed security regulation. Some people argue that Python should not be the language precisely because it does not have a well defined language specification other than (multiple) reference implementations. I love the language, but I would not view the language specification aspect as a reason why. Finally, I think there are a lot of Pythonistas who would like to see their organization allow use of Python, or use it to a greater extent. From what I have seen, Python gets sneaked in at first for general, IT-glue kinds of projects, and from there starts being used in myriad other ways.
