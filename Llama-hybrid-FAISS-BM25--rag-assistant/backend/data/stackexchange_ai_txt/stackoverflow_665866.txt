[site]: stackoverflow
[post_id]: 665866
[parent_id]: 657636
[tags]: 
The use of technical language can both help and hinder project team's progress, depending on appropriateness. First it's necessary to point out that what is considered "too technical" depends purely on perspective . " Mainstreaming " is as much of a technical term, as SSD, CORBA and SOAP. Something that sounds as jargon nonsense to one person is actually a shortcut to communicate a complex concept for another. Software development as a rule is cross-domain activity involving in addition to the software knowledge one or more technical user domains. It is a big mistake to assume that sales, marketing, management and banking (just to name a few fields often incorrectly considered "non-technical") haven’t developed and advanced their own complex body of knowledge, in other word — technology: sales technology, marketing technology, management technology and banking technology. And it’s project manager’s responsibility to facilitate productive communication between representatives of different technical domains. Some suggestions: Make handy a project dictionary that can be accessed and updated by everyone involved. Ensure that common denominator language used for cross-domain documentation (i.e. functional specs). Introduce domain specific terms only when necessary, but then always provide a brief explanation of the meaning (don’t “build from scratch” —leverage the wealth of online encyclopaedias by linking where possible). Make sure that there is common understanding amongst the project team of the key terms. Remember that what is considered “technical” depends purely on perspective and you need to facilitate communication in all directions, not just one-way (which is often from software developers to business users). At the end the software will have to work in the realm of users and you have to make a judgement on how much the UI will rely on specific domain language (this is going to be a trade off between easiness-to-learn and usage-efficiency).
