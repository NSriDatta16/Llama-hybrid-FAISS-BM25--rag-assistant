[site]: stackoverflow
[post_id]: 5453041
[parent_id]: 5452984
[tags]: 
There's no portable way to do this for the simple reason that C by itself doesn't define the concept of a stack data structure. It's completely open to the implementation how it does automatic storage and returns from function calls. That being said most implementations provide some kind of stack unwinding mechanism. For example GCC/glibc provides the runtime specific function backtrace http://www.gnu.org/s/libc/manual/html_node/Backtraces.html There are similar stack unwinders for other plattforms. And of course you can implement your own backtracing mechanisms through a global, thread local storage array (it can be static and must provide only enough entries for how many function calls are supported by the stack size), where at each function call the calling module (using C preprocessor __FILE__ ), the line (C preprocessor __LINE__ ) and the called function (some additional preprocessor magic) are placed.
