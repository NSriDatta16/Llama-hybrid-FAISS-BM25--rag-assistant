[site]: stackoverflow
[post_id]: 2065809
[parent_id]: 2065728
[tags]: 
I think a better way is to the File System API to do the searching for you via Directory.GetFiles. This method provides automatic searching of sub-directories. This eliminates the question of whether or not to recurse and instead leaves the decision of how to implement it on the designer of the API (who likely designed it for such a scenario). This method combined with LINQ provides a very elegant solution var max = Directory .GetFiles(path, "*", SearchOption.AllDirectories) .Select(x => new FileInfo(x)) .Select(x => x.Length) .Max(); EDIT As Jimmy pointed out, for 4.0 and higher, it's better to use EnumerateFiles to avoid the overhead of creating a potentially large array var max = Directory .EnumerateFiles(path, "*", SearchOption.AllDirectories) .Select(x => new FileInfo(x)) .Select(x => x.Length) .Max();
