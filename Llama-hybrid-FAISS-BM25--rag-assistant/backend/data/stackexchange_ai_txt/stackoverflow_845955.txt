[site]: stackoverflow
[post_id]: 845955
[parent_id]: 845920
[tags]: 
It generally can be guide by deployment considerations: How will you deploy (i.e. what will you copy on your production machine) ? If what you are deploying are packaged components (i.e. dll, jar, war, ...), it is wise to organize the "code library" as a collection of packaged set of files. That way, you will develop directly with the -- dll, jar, war, ... -- which will be deployed on the production platform. The idea being: if it works with those packaged files, it may still work in production. the reuse of code between disparate projects, rather than within a single project. I maintain that kind of reuse is easier in a "component" approach (like the one discussed in the question " Vendor Branches in GIT ") Over more than 40 current projects, we achieved: technical reuse by systematically isolating any pure technical aspect into independent framework (typically, log framework, exception framework, KPI - Key Performance Indicator - framework, and so on). Those technical components are reused into every other projects. functional reuse by setting a clear applicative architecture in order to divide any functional domain (given the business and functional specifications) into well-defined applications. That would typically involve, for instance, a bus layer which is also a great candidate for exposing services reused by any other projects. Summary: For large functional domain, a single project being not manageable, a good applicative architecture will lead to natural code reuse.
