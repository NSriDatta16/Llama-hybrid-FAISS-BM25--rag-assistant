[site]: stackoverflow
[post_id]: 4707648
[parent_id]: 4705076
[tags]: 
Whether or not the player can obtain a particular bonus according to the rules of your game isn't something the individual bonuses would know about. This is something the game itself would know. For example, you may have one game that allows bonuses A and B together, but another game that wouldn't. So the logic to grant or deny a bonus should be in the MainGame object. I would organize it so that GameBonus is a plain bit bucket class and the logic is all in the MainGame. MainGame would be a superclass of any other custom games that might want to override the bonus logic. A starting point: typedef enum { BonusTypeA, BonusTypeB, BonusTypeC } BonusId; @interface GameBonus : NSObject { BonusId bonusId; NSString *name; NSString *description; UIImage *img; } @property (nonatomic,assign) BonusId bonusId; @property (nonatomic,retain) NSString *name; @property (nonatomic,retain) NSString *description; @property (nonatomic,retain) NSString *img; @end @interface MainGame : NSObject { NSMutableSet *activeBonuses; } -(BOOL) tryToSetBonus:(BonusId)bonus; // tries to set, returns YES if successful. -(BOOL) isBonusValid:(BonusId)bonus; // has no side effect, just check validity. @end
