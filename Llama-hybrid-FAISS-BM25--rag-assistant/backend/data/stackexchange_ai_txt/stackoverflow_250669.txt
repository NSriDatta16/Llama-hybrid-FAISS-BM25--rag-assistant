[site]: stackoverflow
[post_id]: 250669
[parent_id]: 249158
[tags]: 
I'm generally understanding what you all are saying about "how SVN works". Perhaps the problem is not that I'm unclear on that, but I'm falling victim to a higher code organizational problem. The root of the problem comes from project dependencies. I have many applications that have many dependencies. Because of the hierarchical structure of the .NET projects, the dependencies are expected to be in certain physical locations. So if I am going to start to work on this project: http://mysvn/svn/foo/bar/project1 that project would go into C:\source\foo\bar\project1 Now that project depends on another project. In the .NET project file, the project reference is relatively "back referenced": ..\..\..\bar\foo\project2 so the dependency is expect to be in the local working copy at C:\source\bar\foo\project2 Thus, the parent directory structure is critical. I can't store dependent project as children of any one specific application/project because they are shared among many projects. So they live in their own locations outside of one particular project tree. Thus, I do need to ensure that any given project (and its dependencies) are checked out to a specific tree location relative to the root of the source tree in order to ensure that the references to the projects don't break or that they don't differ between developers. Otherwise, each of us continually updates references to make them work creating a lot of noise in the source history and constant breaks between developers. Also, then the build server won't have them in the right place either. I have yet to find any good information about doing .NET development with SVN. There are plenty of open source projects in .NET that use SVN or CVS. However, those that I have looked at always seem to be in a fairly isolated structure such that all the different projects fall under a single source tree location. This makes it trivial to get everything that is needed because you can simply check out one path recursively and get everything you need. I'd be very interested to hear from anyone who does enterprise development in .NET using SVN with many shared projects that cross project storage location boundaries. It is beginning to feel like the only solution that would work in a team is to simply check out the entire repository to ensure the structure is correct and consistent. That is unfortunate for a repository that has many gig of source.
