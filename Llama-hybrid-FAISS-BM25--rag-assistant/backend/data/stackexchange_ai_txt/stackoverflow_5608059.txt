[site]: stackoverflow
[post_id]: 5608059
[parent_id]: 5606075
[tags]: 
To answer your followup on your other duplicate question: I've tried to take string from listbox item content and then use such a line XmlNodeList saveItems = save.SelectNodes(string.Format("storage/Save[@Name = '{0}']", name)); variable "name" is a string from listboxe's item. While compiled this code gives exception. Do somebody knows a way how to select by attribute and load nedeed data from that XML? I suspect that you're not getting the right values off of your ListBox . It all depends on how you populated it. If you just used the designer to fill your ListBox with your string names, you should be using the SelectedItem property to get the selected name. If on the other hand you populated your ListBox setting the DataSource , set the ValueMember property to the appropriate property name and use SelectedValue to get the value. Though since you never mentioned what the exception was, this is all just an educated guess. Your problem initially was that you were using the wrong XPath. Since it was wrong, all following accesses to the first result returned null yielding a NullReferenceException . BrokenGlass' answer covers the using the correct XPath. If the XML you are showing us is indeed what is in the contents of the file and you are getting an appropriate name value, then everything should work here. Overall, the code could be simplified much more. I use some LINQ here just to make dealing with invalid names easier. You should find that this is working code. var xmlStr = @" "; var doc = new XmlDocument(); doc.LoadXml(xmlStr); var name = "Hellcode"; var settings = doc.SelectNodes(String.Format("/storage/Save[@Name='{0}']", name)) .Cast () .Select(e => new { Seconds = Convert.ToInt32(e["Seconds"].InnerText), Minutes = Convert.ToInt32(e["Minutes"].InnerText), Hours = Convert.ToInt32(e["Hours"].InnerText), Days = Convert.ToInt32(e["Days"].InnerText), Months = Convert.ToInt32(e["Months"].InnerText), Years = Convert.ToInt32(e["Years"].InnerText), Health = Convert.ToInt32(e["Health"].InnerText), Mood = Convert.ToInt32(e["Mood"].InnerText), }) .SingleOrDefault(); Trace.WriteLine("settings: " + settings); I would prefer LINQ to XML here as it is much more cleaner. This should also work with the xmlStr provided above. var doc = XDocument.Parse(xmlStr); var name = "Hellcode"; var settings = doc.Element("storage") .Elements("Save") .Where(e => e.Attribute("Name").Value == name) // or if using XPath, the above could be replaced with: // doc.XPathSelectElements(String.Format("/storage/Save[@Name='{0}']", name)) .Select(e => new { Seconds = (int)e.Element("Seconds"), Minutes = (int)e.Element("Minutes"), Hours = (int)e.Element("Hours"), Days = (int)e.Element("Days"), Months = (int)e.Element("Months"), Years = (int)e.Element("Years"), Health = (int)e.Element("Health"), Mood = (int)e.Element("Mood"), }) .SingleOrDefault(); Trace.WriteLine("settings: " + settings);
