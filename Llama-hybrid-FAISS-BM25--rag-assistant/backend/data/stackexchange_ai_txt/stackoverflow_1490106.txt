[site]: stackoverflow
[post_id]: 1490106
[parent_id]: 1487773
[tags]: 
I can point you to a couple of blogs on frustrations with MSTest: MSBuild, NAnt, NUnit, MSTest, and frustration Clean build server with MSTest == FAIL To be fair, these people are trying to set up MSTest on non-TFS build servers. Some of their issues are not going to apply to your situation. We are primarily a Microsoft shop, and use TFS for source control. However, we use TeamCity for Continuous Integration; we like it, and it integrates reasonably well with TFS. I've never used MSTest; we've been using NUnit for years, and have seen no reason to change. MSTest is supposed to have tight integration with Team Suite, which (since your company has already paid the outrageous fee for that) is a point in its favor. NUnit comes with less vendor lock-in, and has a rich API. As serg10 pointed out, the Assert.That syntax is particularly powerful and elegant. In the end, you can write good unit tests without all the fancy features. Some of them may even get in the way (which is the theory behind xUnit.net ). I would recommend that your team standardize on one test framework; avoid having some code in MSTest and other code in NUnit. I think writing good tests is more important than your choice of frameworks. Consider reading The Art of Unit Testing: with Examples in .NET , writing some tests, then seeing if MSTest is adequate for your team's needs. EDIT: Appendix B of The Art of Unit Testing has some good comments on Microsoft's Unit Testing Framework. It mentions YUnit as an example of how cumbersome it is to extend MSTest. However, the author does suggest MSTest for Team System users due to the tight integration.
