[site]: stackoverflow
[post_id]: 3619316
[parent_id]: 3613853
[tags]: 
This is still an evolving matter. For instance, the just released Scala 2.8.0 brought support of type constructor inference , which enabled a pattern of type classes in Scala. The Scala library itself has just began using this pattern. Just yesterday I heard of a new Lift module in which they are going to try to avoid inheritance in favor of type classes. Scala 2.8.0 also introduced lower priority implicits, plus default and named parameters, both of which can be used, separately or together, to produce very different designs than what was possible before. And if we go back in time , we note that other important features are not that old either: Extractor methods on case classes object companions where introduced February 2008 (before that, the only way to do extraction on case classes was through pattern matching). Lazy values and Structural types where introduced July 2007. Abstract types support for type constructors was introduced in May 2007. Extractors for non-case classes was introduced in January 2007. It seems that implicit parameters were only introduced in March 2006, when they replaced the way views were implemented. All that means we are all learning how to design Scala software. Be sure to rely on tested designs of functional and object oriented paradigms, to see how new features in Scala are used in other languages, like Haskell and type classes or Python and default (optional) and named parameters. Some people dislike this aspect of Scala, others love it. But other languages share it. C# is adding features as fast as Scala. Java is slower, but it goes through changes too. It added generics in 2004, and the next version should bring some changes to better support concurrent and parallel programming.
