[site]: stackoverflow
[post_id]: 2640016
[parent_id]: 2639915
[tags]: 
The extremely specific use case of a function that lets you optionally pass a list to modify, but generates a new list unless you specifically do pass one in, is definitely not worth a special-case syntax. Seriously, if you're making a number of calls to this function, why ever would you want to special-case the first call in the series (by passing only one argument) to distinguish it from every other one (which will need two arguments to be able to keep enriching an existing list)?! E.g., consider something like (assuming of course that betterappend did something useful, because in the current example it would be crazy to call it in lieu of a direct .append !-): def thecaller(n): if fee(0): newlist = betterappend(foo()) else: newlist = betterappend(fie()) for x in range(1, n): if fee(x): betterappend(foo(), newlist) else: betterappend(fie(), newlist) this is simply insane, and should obviously be, instead, def thecaller(n): newlist = [] for x in range(n): if fee(x): betterappend(foo(), newlist) else: betterappend(fie(), newlist) always using two arguments, avoiding repetition, and building much simpler logic. Introducing special-case syntax encourages and supports the special-cased use case, and there's really not much sense in encouraging and supporting this extremely peculiar one -- the existing, perfectly regular syntax is just fine for the use case's extremely rare good uses;-).
