[site]: crossvalidated
[post_id]: 234759
[parent_id]: 234537
[tags]: 
You have to apply the same transformations you applied to your training set to your test set. In this case, this mean you have to use the same parameters for standardization (assuming you did PCA on the correlation matrix) and rotation (the PCA rotation matrix). If you're using prcomp (and assuming PCA on correlation matrix) #Test index s = sample(150, 30) #Train data x = iris[-s,-5] #Principal components of train data pr = prcomp(x, center = TRUE, scale = TRUE) #Test data y = iris[s,-5] #Rotate standardized test data to the same space as train data #You can also keep the first K columns in case you want to retain a X% ammount of variance y = predict(pr, y) This is what predict implicitly does: #Test index s = sample(150, 30) #Train data x2 = iris[-s,-5] #Standardize train data x2 = scale(x2) #Principal components of train data pr2 = prcomp(x2, center = FALSE, scale = FALSE) #Test data y2 = iris[s,-5] #Standardize test data with the same parameters used on train data y2 = scale(y2, center = attr(x2,"scaled:center"), scale = attr(x2,"scaled:scale")) #Rotate standardized test data to the same space as train data #You can also keep the first K columns in case you want to retain a X% ammount of variance y2 = y2 %*% pr$rotation The transformed data y and y2 should be identical (if you use the same indexes s !) all.equal(y, y2) #[1] TRUE
