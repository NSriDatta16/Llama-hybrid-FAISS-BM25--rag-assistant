[site]: stackoverflow
[post_id]: 5072510
[parent_id]: 5069555
[tags]: 
In my opinion, you shouldn't expose your JSPs in the first place. After all, you want your user to access the page using the request mapping you provide. Your controller will then decide which view (in your case, they are JSP files) to present to the user. What I usually do is to stuff the views under WEB-INF directory to prevent users from guessing and accessing the JSP files directly. You can still keep the views separated if it helps you to organize your files. So, your directory structure may look like this:- WEB-INF | |- jsp | | | |-- public | | | | | |- page1.jsp | | |- page2.jsp | | | |-- protected | | | | | |- page3.jsp | | |- page4.jsp This way, you can register your view folder to be /WEB-INF/jsp/ in Spring MVC. Your request mapping can be anything you want. It has nothing to do with your view directory structure. For example:- // when your user visits /page-1.htm, it returns public/page1.jsp as the view @RequestMapping("/page-1") public String showPage1() { return "public/page1"; } // when your user visits /secure/page-3.htm, it returns protected/page3.jsp as the view @RequestMapping("/secure/page-3") public String showPage3() { return "protected/page3"; }
