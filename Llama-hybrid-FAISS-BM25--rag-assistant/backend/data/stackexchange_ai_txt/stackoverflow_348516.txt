[site]: stackoverflow
[post_id]: 348516
[parent_id]: 348363
[tags]: 
We have had clients insist on option B (database storage) a few times on a few different backends, and we always ended up going back to option A (filesystem storage) eventually. Large BLOBs like that just have not been handled well enough even by SQL Server 2005, which is the latest one we tried it on. Specifically, we saw serious bloat and I think maybe locking problems. One other note: if you are using NTFS based storage (windows server, etc) you might consider finding a way around putting thousands and thousands of files in one directory. I am not sure why, but sometimes the file system does not cope well with that situation. If anyone knows more about this I would love to hear it. But I always try to use subdirectories to break things up a bit. Creation date often works well for this: Images/2008/12/17/.jpg ...This provides a decent level of separation, and also helps a bit during debugging. Explorer and FTP clients alike can choke a bit when there are truly huge directories. EDIT: Just a quick note for 2017, in more recent versions of SQL Server, there are new options for handling lots of BLOBs that are supposed to avoid the drawbacks I discussed. EDIT: Quick note for 2020, Blob Storage in AWS/Azure/etc has also been an option for years now. This is a great fit for many web-based projects since it's cheap and it can often simplify certain issues around deployment, scaling to multiple servers, debugging other environments when necessary, etc.
