[site]: stackoverflow
[post_id]: 2304201
[parent_id]: 
[tags]: 
GKSession - what if I have Bluetooth and Wi-Fi turned off?

I'm working on an iPhone app that will allow for peer-to-peer connections. From what I understand, I have the choice between using GKPeerPicker or the GKSession. I don't like the idea of using the PeerPicker because I want to show a custom interface, so I decided to go with GKSession, and hey, BONUS is that it also works over Wi-Fi, whereas the Peer Picker does not. OK, so problem is... what if the user has both Bluetooth and Wi-Fi turned off? In the Peer Picker, there is a prompt to turn Bluetooth on w/o leaving the app. GKSession doesn't have it... but woah wait a second, it appears that I can't even check to see if Bluetooth is on or not programatically! Carpe Cocoa claims no problem , just use the Delegate's session:didFailWithError: method. But, as it explains in the comments... that doesn't seem to work anymore! And in my experience, I concur. Is there some other way to programmatically check if Bluetooth is on? Is this something that I should be leveraging Reachability for? Or is it just a bug that Apple has yet to fix? To be more specific, I'm creating my session like this: GKSession *aSession = [[GKSession alloc] initWithSessionID:nil displayName:user.displayName sessionMode:GKSessionModePeer]; self.gkSession = aSession; [aSession release]; self.gkSession.delegate = self; self.gkSession.available = YES; [self.gkSession setDataReceiveHandler:self withContext:NULL]; The class implements the GKSessionDelegate, and I know that it's working because when I have bluetooth turned on, the delegate methods are called no problem. I've implemented them as such: #pragma mark - #pragma mark GKSessionDelegate methods - (void)session:(GKSession *)session peer:(NSString *)peerID didChangeState:(GKPeerConnectionState)state { if (GKPeerStateAvailable == state) { [session connectToPeer:peerID withTimeout:10]; } else if (GKPeerStateConnected == state) { // gets user NSError *error = nil; [session sendData:user.connectionData toPeers:[NSArray arrayWithObjects:peerID,nil] withDataMode:GKSendDataReliable error:&error]; if (error) NSLog(@"%@",error); } } - (void)session:(GKSession *)session didReceiveConnectionRequestFromPeer:(NSString *)peerID { NSError *error = nil; [session acceptConnectionFromPeer:peerID error:&error]; if (error) NSLog(@"%@",error); } - (void)session:(GKSession *)session connectionWithPeerFailed:(NSString *)peerID withError:(NSError *)error { NSLog(@"%@",error); } - (void)session:(GKSession *)session didFailWithError:(NSError *)error { NSLog(@"%@",error); } None of the log statements are printed and I set breakpoints in each method, but none of them are hit when the user has both Bluetooth and Wi-Fi turned off. I was hoping that something would happen to trigger session:didFailWithError: so that I could prompt the user to turn on Bluetooth or connect to a Wi-Fi network.
