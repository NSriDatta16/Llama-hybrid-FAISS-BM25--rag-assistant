[site]: stackoverflow
[post_id]: 2283446
[parent_id]: 2283403
[tags]: 
UI->BLL->DAL UI Your database is not another layer its simply a repository of the data. What you describe is your typical 3-tier architecture. Layers are the assemblies (dll files) while tiers are the storage mechanism (hardware). Some people might mix those terms up but ultimately it doesn't matter. In this case your UI calls the BLL which in turn calls the DAL. Once you process what you need from the DAL then the DAL takes that information and passes to the BLL (Business Logic Layer) which in turn submits back to your UI. Your UI shouldn't know anything about a valid ID, that is your UI should not touch your DAL. Pass the ID's to the BLL and the BLL can then check if they are valid. Some folks like to actually check inside the DAL sproc level and return some sort of flag. bool IsValid(int forumID) { //call the dal to get a true or false based on this bool isValid=false; DAL d = new DAL(); isValid = d.IsValid(forumID); return isValid; } And your DAL then has a function to simply call say a sproc to return true or false if the ID exists. bool IsValid(int forumID){ bool status; //call sproc status=ValueReturnedFromSproc(); return status; } If you are wondering how the UI handles all this it can do so by this: BLL b = new BLL(); if (!(b.IsValid(someRandomForumID))) Response.Write("Sorry you've got an invalid forumID"); else { //proper forum id go ahead... } In response to your edit: If you are actually exposing the ID in the URL and allow someone to change it then your on load event needs to simply pull the ID (request parameters) and check if it is valid. If it is show the data if it isn't redirect to a page that states "Opps it appears you are trying to access a forum / thread that does not exist".
