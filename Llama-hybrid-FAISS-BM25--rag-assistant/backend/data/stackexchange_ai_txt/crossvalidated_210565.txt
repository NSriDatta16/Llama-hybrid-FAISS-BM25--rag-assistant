[site]: crossvalidated
[post_id]: 210565
[parent_id]: 
[tags]: 
How you can you take the `min` of what looks like a single value calculation in SVD++?

I'm reading through this paper: http://www.cs.rochester.edu/twiki/pub/Main/HarpSeminar/Factorization_Meets_the_Neighborhood-_a_Multifaceted_Collaborative_Filtering_Model.pdf And I'm looking at the equation t the very end of section 2.1 regarding baseline estimates, and it's the addition of 3 summations, which I would expect to result in a single value, but the result is passed into the min[b*] function. I must be misinterpreting something about the equation. Is min maybe not taking the result of the sum of summations? Is it a constant that multiplies the first summation? I must admit, I'm an engineer, and I'm a bit rusty on my mathematical notation. I'm used to reading things in code, but I want to struggle with the math notation rather than read the SVD++ implementation in MLLib because it's important to me that I get comfortable with it. Edit Original equation for context. $u$ is an index over users $i$ is an index over items $r_{u,i}$ is the rating that user $u$ gives the $i$th item $\mathcal{K} = (u, i \mid r_{u,i} \textrm{is known})$ (i.e., the k nowledge or training data) $\mu$ is the average rating over all items $b_i$ is the "baseline" or average rating for the $i$th item, across users, relative to $\mu$ $b_u$ is the "baseline" or average rating given by user $u$, relative to $\mu$ $$ \underset{b*}{\min} \sum_{(u,i) \in \mathcal{K}} \bigg(r_{u,i} - \mu - b_u - b_i\bigg)^2 + \lambda_1 \bigg(\sum_u b_{u}^2 + \sum_i b_{i}^2\bigg)$$
