[site]: stackoverflow
[post_id]: 5390296
[parent_id]: 
[tags]: 
Problem with types only being known at run-time causing DI pains

I'll explain my problem with an example. I have an AnimalService, allowing me to increase the amount of show time the favourite animal gets for a specific zoo: public sealed class AnimalService : IAnimalService where TZoo : IZoo { private readonly IFavouriteAnimalResolver favouriteAnimalResolver; private readonly IAnimalShowTimeService animalShowTimeService; public AnimalService( IFavouriteAnimalResolver favouriteAnimalResolver, IAnimalShowTimeService animalShowTimeService) { this.favouriteAnimalResolver = favouriteAnimalResolver; this.animalShowTimeService = animalShowTimeService; } public void IncreaseShowTimeForFavouriteAnimal(TZoo zoo) { var favouriteAnimal = favouriteAnimalResolver.GetFavouriteAnimal(zoo); animalShowTimeService.IncreaseShowTimeForAnimal(favouriteAnimal); } } The AnimalService uses a resolver to get the favourite animal for TZoo, and then it calls an instance of IAnimalShowTimeService to increase the amount of show time the favourite animal will get. Below is the definition of the IFavouriteAnimalResolver interface and implementation of it that allows me to resolve the favourite animal for LondonZoo: public interface IFavouriteAnimalResolver where TZoo : IZoo { IAnimal GetFavouriteAnimal(TZoo londonZoo); } public class LondonZooFavouriteAnimalResolver : IFavouriteAnimalResolver { public IAnimal GetFavouriteAnimal(LondonZoo londonZoo) { return new Lion(); } } Oki, so all good so far. Now for the complication. I would like to perform some animal specific logic once the IncreaseShowTimeForFavouriteAnimal is run. So my base AnimalShowTimeService stub looks like this: public class AnimalShowTimeService : IAnimalShowTimeService { public void IncreaseShowTimeForAnimal(IAnimal animal) { // Update the show time for the animal // Now call out to the AnimalUpdatedService<> instance to do any logic required for the animal } } I would like to be able to call an update service that will get resolved via structuremap for the specific animal type, so I can run some update logic related to that specific type of animal. I have the following animalupdated interfaces for this purpose: public interface IAnimalUpdatedService where T : IAnimal { void LogTheUpdate(T animal); } public class DefaultAnimalUpdatedService : IAnimalUpdatedService, IAnimalUpdatedService where T : IAnimal { public void LogTheUpdate(T animal) { } } public class LionUpdatedService : IAnimalUpdatedService { public void LogTheUpdate(Lion animal) { Console.WriteLine("The lion was updated"); } } As you can see, I have a DefaultAnimalUpdatedService which I want to be used when no specific update service was registered for an animal. I also have a LionUpdatedService which I would like to use every time a Lion's show time was increased for a zoo. My problem is that because the favourite animal for a zoo can be any animal, the IFavouriteAnimalResolver returns an IAnimal type back and not a concrete. So I am not sure how I can use structuremap within IncreaseShowTimeForAnimal to get the LionUpdatedService service when a Lion's show time has been updated. I have played around with following code, but this won't work because I don't know the concrete at design time: public class AnimalShowTimeService : IAnimalShowTimeService { public void IncreaseShowTimeForAnimal(IAnimal animal) { // Update the show time for the animal var animalUpdatedService = ObjectFactory.ForGenericType(typeof(IAnimalUpdatedService<>)) .WithParameters(animal.GetType()) .GetInstanceAs (); animalUpdatedService.LogTheUpdate(animal); } } I hope this all is clear. :) I am not very well versed in StrutureMap, so would appreciate if anyone knows of an elegant way to approach this problem. I have zipped up a test project I created using the above described code. You can download it here if you want to have a quick environment to fool around in: [removed this link - no longer needed] EDIT: This is just a test project I created to illustrate the problem I am currently having in a much larger and more complex project. Unfortunately I can't redesign the entire architecture of the project to find a better design more geared towards this solution as I simply don't have the time. Being able to get the structuremap call simply return the correct concrete based on requirements above would be my immediate win. Learning about a better design to ensure things like this don't happen to me again would be a secondary win. Thanks people :)
