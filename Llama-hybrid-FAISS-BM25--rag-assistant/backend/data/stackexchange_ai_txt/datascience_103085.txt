[site]: datascience
[post_id]: 103085
[parent_id]: 
[tags]: 
How can we optimize a model to predict in the no shortest possible time (real time production model)?

I need to put a model in production and I have some questions: How can we measure the time it takes to predict? Let's consider data is ready (real time) and we need first to transform data than to predict. Can we measure the time it takes in both steps? Is there a way to shorten this time to transform and predict? Just so you guys know, this is my pipeline imputer_num = SimpleImputer(strategy = 'median') imputer_cat = SimpleImputer(strategy = 'most_frequent') BRC = BalancedRandomForestClassifier() models = [XGB, BBC, BRC] numeric_transformer = Pipeline(steps=[ ('imputer', SimpleImputer(strategy = 'median')) # ,('scaler', StandardScaler()) ]) categorical_transformer = Pipeline(steps=[ ('imputer', SimpleImputer(strategy = 'most_frequent')) ,('encod', encoder) ]) preprocessor = ColumnTransformer( transformers=[ ('num', numeric_transformer, numericas_all) ,('cat', categorical_transformer, categoricas_all) ]) pipe = Pipeline(steps=[('preprocessor', preprocessor),('classifier', BRC)]) parameters = {'classifier__bootstrap': [True, False], 'classifier__max_depth': [5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None], 'classifier__max_features': ['auto', 'sqrt'], 'classifier__min_samples_leaf': [1, 2, 4, 6], 'classifier__min_samples_split': [2, 5, 10] } grid = GridSearchCV(pipe, parameters, cv=4, n_jobs = -1, scoring = "roc_auc") grid.fit(X_train, y_train) print("Best parameter (CV score=%0.3f):" % grid.best_score_) print(grid.best_params_)
