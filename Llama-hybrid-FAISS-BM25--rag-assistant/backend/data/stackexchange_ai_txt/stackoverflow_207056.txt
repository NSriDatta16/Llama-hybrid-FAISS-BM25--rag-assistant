[site]: stackoverflow
[post_id]: 207056
[parent_id]: 206577
[tags]: 
I don't know of a way you can get to SMO via VB6. I'd agree with G Mastros about doing a COM/Interop approach to implement .NET code directly. An alternative to consider is that you could shell out to Powershell, executing a script that would do your .NET SMO work. You still have the pre-requisite of requiring the .NET framework (and Powershell obviously), but it would get the job done. Your script could take parameters for credentials, database name, backup type, etc. I implement this a lot at clients who have SQL Express (no SQL Agent for backups, like MSDE). I hook up a scheduled task which invokes the script and manages their backups. If helpful, here is a script -- largely stolen but I have modified it somewhat: param ( [string] $ServerName, [string] $DatabaseName, [string] $Backuptype, [string] $BackupPath, [int] $NumDays ) Get-ChildItem $BackupPath | where {$_.LastWriteTime -le (Get-Date).AddDays(-$NumDays)} | remove-item [System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo") | out-null [System.IO.Directory]::CreateDirectory($BackupPath) | out-null $srv=New-Object "Microsoft.SqlServer.Management.Smo.Server" "$servername" $bck=new-object "Microsoft.SqlServer.Management.Smo.Backup" if ($Backuptype -eq "FULL") { $bck.Action = 'Database' $extenstion=".BAK" $text1="Full Backup" } if ($Backuptype -eq "TRAN") { $bck.Action = 'Log' $bck.LogTruncation = 2 $extenstion=".TRN" $text1="Transactional Log Backup" } if ($Backuptype -eq "DIFF") { $bck.Incremental = 1 $extenstion=".DIFF" $text1="Differential Backup" } $fil=new-object "Microsoft.SqlServer.Management.Smo.BackupDeviceItem" $fil.DeviceType='File' $fil.Name=[System.IO.Path]::Combine($BackupPath, $DatabaseName+ "_"+ [DateTime]::Now.ToString("yyyy_MM_dd_HH_mm")+$extenstion) $bck.Devices.Add($fil) $bck.Database=$DatabaseName $bck.SqlBackup($srv) write-host $text1 of $Databasename done It can do full, differential, and transactional backups and uniquely names each resulting file based on the date and time, deleting all files older than a certain number of days. The syntax to call it is: .\Backup.ps1 INSTANCENAME DATABASENAME FULL|TRAN|DIFF PATH DAYSTOKEEP so... .\Backup.ps1 SQLEXPRESS Northwind FULL C:\TempHold\Test 30 .\Backup.ps1 SQLEXPRESS Northwind TRAN C:\TempHold\Test 30 .\Backup.ps1 SQLEXPRESS Northwind DIFF C:\TempHold\Test 30 To Schedule in Task Scheduler, pass in: powershell c:\temphold\test\backup.ps1 "SQLEXPRESS Northwind DIFF C:\TempHold\Test 30"
