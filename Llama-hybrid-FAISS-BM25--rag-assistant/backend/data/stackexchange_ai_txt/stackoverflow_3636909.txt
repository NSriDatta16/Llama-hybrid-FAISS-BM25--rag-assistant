[site]: stackoverflow
[post_id]: 3636909
[parent_id]: 3580632
[tags]: 
Please note that it is recommended to use numpy's array instead of matrix : see this paragraph in the user guide. The confusion in some of the responses is an example of what can go wrong... In particular, D**0.5 and the products are elementwise if applied to numpy arrays, which would give you a wrong answer. For example: import numpy as np from numpy import dot, diag D = diag([1., 2., 3.]) print D**(-0.5) [[ 1. Inf Inf] [ Inf 0.70710678 Inf] [ Inf Inf 0.57735027]] In your case, the matrix is diagonal, and so the square root of the matrix is just another diagonal matrix with the square root of the diagonal elements. Using numpy arrays, the equation becomes D = np.array([1., 2., 3.]) # note that we define D just by its diagonal elements A = np.cov(np.random.randn(3,100)) # a random symmetric positive definite matrix L = dot(diag(D**(-0.5)), dot(A, diag(D**0.5)))
