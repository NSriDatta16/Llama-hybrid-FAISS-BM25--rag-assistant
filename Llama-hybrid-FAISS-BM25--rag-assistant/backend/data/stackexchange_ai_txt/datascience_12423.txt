[site]: datascience
[post_id]: 12423
[parent_id]: 
[tags]: 
How to represent target variable for chess AI

Inspired by Google's recent AlphaGo project, I've decided that as a fun personal challenge I'd like to use deep learning and convoluted neural networks to build an algorithm that can beat an ordinary chess program when the difficulty is set to expert. I'm awful at chess and generally can't beat a computer beyond easy/medium, so making something that's a lot smarter than I am (at chess, at least) sounds fascinating. Question: What should the target variable look like for predicting the next best chess move? I've been building predictive models for a long time, but I can't wrap my head around this question. Some things that have me confused: I believe the target variable for Go is simply the entire grid of spaces on the board. In chess there are a limited number of legal moves, which continuously diminish as pieces are removed from the board throughout the game. How do I represent a shrinking target space? Not all pieces have the same set of rules (ex: queen vs knight). Do I need to somehow explicitly code these rules or will deep learning automatically learn them? Notes: I know that alpha-beta pruning and quasi-brute-force search techniques have been shown to do well in chess, however, I specifically want to use deep learning instead. AlphaGo started with supervised learning (SL) on documented expert human moves to make a policy network, among other things. In my case, I'm just trying to do the supervised learning part, and when I do that, the target variable is difficult for me to define. That's the root of my question.
