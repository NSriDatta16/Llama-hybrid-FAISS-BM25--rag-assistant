[site]: datascience
[post_id]: 114257
[parent_id]: 
[tags]: 
Finding max profit from buying and selling items (between an array of prices for a set of specific days) with limited storage capacity

My goal is to find the max profit that I can make from buying and selling items between days given an array of item prices for a set of specific days, i.e. {2.91, 2.775, 2.855, 2.89, 2.595, 2.99, 2.925, 2.685, 3.95, 3.56, 3.49, 3.92, 3.255, 3.195, 3.305, 3.39, 3.21, 3.33, 4.03, 4.05, 4.105, 3.565, 3.24, 3.335, 3.365, 3.26, 3.21, 3.525, 3.405, 3.35, 3.02, 2.755} (unit: $/weight). For this I will assume a limited storage capacity weight of 207400 (that means the total weight of all the items that we can buy and store in the storage is 207400) and no further limits on daily selling and buying of items. I'm very confused, because this sounds different from the knapsack problem. So how can I solve this? (I'm using Python) I have been searching for similar questions but I couldn't find max profit with limited storage capacity. The most similar question is maybe this one: https://stackoverflow.com/questions/69655167/algorithm-for-maximizing-shipping-profit-with-limitations-on-mass-and-cost . However, it has more limitations than my case and I still don't understand if this is exactly the knapsack problem or not. I have been searching for similar questions but I couldn't find max profit with limited storage capacity. This is the solution I have thought of, but I'm not sure if it actually gives max profit of buying and selling the items or not. # To store the dp values dp=[] def maxProfit(price, weight, n, max_W, max_E): # for each element given for i in range(1,n+1) : # For each possible weight value for j in range(1,max_W+1) : # For each case where the total elements are less than the constra for k in range(1, max_E+1) : # To ensure that we dont go out of the array if (j >= weight[i - 1]) : dp[i][j][k] = max( dp[i - 1][j][k], dp[i - 1][j - weight[i - 1]][k - 1] + price[i - 1]) else : dp[i][j][k] = dp[i - 1][j][k] return dp[n][max_W][max_E] # Driver Code if __name__ == '__main__': n = 32 price = [2.91, 2.775, 2.855, 2.89, 2.595, 2.99, 2.925, 2.685, 3.95, 3.56, 3.49, 3.92, 3.255, 3.195, 3.305, 3.39, 3.21, 3.33, 4.03, 4.05, 4.105, 3.565, 3.24, 3.335, 3.365, 3.26, 3.21, 3.525, 3.405, 3.35, 3.02, 2.755] weight = [9000,500,6007,980,2000,100,200,900,500,6007,980,400,100,200,90,500,6007,980,2000,100,2000,900,500,6007,980,400,100,2000,345,657,546,789] max_weight = 207400 #max elements that can be in the storage for a set of specific days max_element = 33 dp = [[[0 for j in range(max_element + 1)]for i in range(max_weight + 1)] for k in range(n+1)] print(maxProfit(price, weight, n, max_weight, max_element)) ```
