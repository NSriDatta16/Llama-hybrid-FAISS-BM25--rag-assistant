[site]: stackoverflow
[post_id]: 1606775
[parent_id]: 1601913
[tags]: 
I read 2 questions: What is your opinion on testing that particular methods on components are called in a particular order? I've fallen foul of this in the past. We use a lot more "stubbing" and a lot less "mocking" these days. We try to write unit tests which test only one thing. When we do this it's normally possible to write a very simple test which stubs out interactions with most other components. And we very rarely assert ordering. This helps to make the tests less brittle. Tests which test only one thing are easier to understand and maintain. Also, if you find yourself having to write lots of expectations for interactions with lots of components there could well be a problem in the code you're testing anyway. If it's difficult to maintain tests the code you're testing can often be refactored. Should one be obsessed with test coverage? When writing unit tests for a given class I'm pretty obsessed with test coverage. It makes it really easy to spot important bits of behaviour that I haven't tested. I can also make a judgement call about which bits I don't need to cover. Overall unit test coverage stats? Not particularly interested so long as they're high. 100% unit test coverage for an entire system? Not interested at all.
