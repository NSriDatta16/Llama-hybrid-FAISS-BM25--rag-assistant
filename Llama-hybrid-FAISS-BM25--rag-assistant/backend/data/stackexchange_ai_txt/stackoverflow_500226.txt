[site]: stackoverflow
[post_id]: 500226
[parent_id]: 182086
[tags]: 
You can "cheat" and use an iterative numerical method for this. Take all of the points to be in some "random" positions initially, and then loop through them, moving them away from each other proportionally to the required distance. This will prefer some points, but taking an average of the moves before applying them, then applying the average will remove this problem. This is an O(nÂ²) algorithm, but very simple to implement and understand. In the 2-d example below the error is C++ Example: #include #include #include #include #define DAMPING_FACTOR 0.99f class point { public: float x; float y; public: point() : x(0), y(0) {} }; // symmetric matrix with distances float matrix[5][5] = { { 0.0f, 4.5f, 1.5f, 2.0f, 4.0f }, { 4.5f, 0.0f, 4.0f, 3.0f, 3.5f }, { 1.5f, 4.0f, 0.0f, 1.0f, 5.0f }, { 2.0f, 3.0f, 1.0f, 0.0f, 4.5f }, { 4.0f, 3.5f, 5.0f, 4.5f, 0.0f } }; int main(int argc, char** argv) { point p[5]; for(unsigned int i = 0; i
