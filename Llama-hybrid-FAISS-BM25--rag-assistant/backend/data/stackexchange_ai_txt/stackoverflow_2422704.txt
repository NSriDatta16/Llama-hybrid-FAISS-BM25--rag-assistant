[site]: stackoverflow
[post_id]: 2422704
[parent_id]: 
[tags]: 
Unit Testing Refcounted Critical Section Class

I'm looking at a simple class I have to manage critical sections and locks, and I'd like to cover this with test cases. Does this make sense, and how would one go about doing it? It's difficult because the only way to verify the class works is to setup very complicated threading scenarios, and even then there's not a good way to test for a leak of a Critical Section in Win32. Is there a more direct way to make sure it's working correctly? Here's the code: CriticalSection.hpp: #pragma once #include #include namespace WindowsAPI { namespace Threading { class CriticalSectionImpl; class CriticalLock; class CriticalAttemptedLock; class CriticalSection { friend class CriticalLock; friend class CriticalAttemptedLock; boost::shared_ptr impl; void Enter(); bool TryEnter(); void Leave(); public: CriticalSection(); }; class CriticalLock { CriticalSection &ref; public: CriticalLock(CriticalSection& sectionToLock) : ref(sectionToLock) { ref.Enter(); }; ~CriticalLock() { ref.Leave(); }; }; class CriticalAttemptedLock { CriticalSection &ref; bool valid; public: CriticalAttemptedLock(CriticalSection& sectionToLock) : ref(sectionToLock), valid(ref.TryEnter()) {}; bool LockHeld() { return valid; }; ~CriticalAttemptedLock() { if (valid) ref.Leave(); }; }; }} CriticalSection.cpp: #include "CriticalSection.hpp" namespace WindowsAPI { namespace Threading { class CriticalSectionImpl { friend class CriticalSection; CRITICAL_SECTION sectionStructure; CriticalSectionImpl() { InitializeCriticalSection(&sectionStructure); }; void Enter() { EnterCriticalSection(&sectionStructure); }; bool TryEnter() { if (TryEnterCriticalSection(&sectionStructure)) return true; else return false; }; void Leave() { LeaveCriticalSection(&sectionStructure); }; public: ~CriticalSectionImpl() { DeleteCriticalSection(&sectionStructure); }; }; void CriticalSection::Enter() { impl->Enter(); }; bool CriticalSection::TryEnter() { return impl->TryEnter(); }; void CriticalSection::Leave() { impl->Leave(); }; CriticalSection::CriticalSection() : impl(new CriticalSectionImpl) {} ; }}
