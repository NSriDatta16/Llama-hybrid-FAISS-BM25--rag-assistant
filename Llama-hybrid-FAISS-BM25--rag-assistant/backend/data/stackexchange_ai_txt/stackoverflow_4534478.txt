[site]: stackoverflow
[post_id]: 4534478
[parent_id]: 
[tags]: 
Can you do NetTcpBinding in code? Should you?

WCF newbie here... I'm trying to self-host a WCF service using NetTcpBinding. Based on the MSDN "how-to" tutorial I have done all the binding in code, which I then changed from WsHttpBinding to NetTcpBinding, and now looks like this: var baseAddress = new Uri("net.tcp://localhost:8000/MyWebService"); var selfHost = new ServiceHost(typeof(ConcreteWebService), baseAddress); try { var binding = new NetTcpBinding(); binding.Security.Mode = SecurityMode.Message; selfHost.AddServiceEndpoint(typeof(IWebService), binding, "TRWebService"); selfHost.Open(); Console.WriteLine("The service is ready at {0}", baseAddress.AbsoluteUri); Console.WriteLine("Press to terminate service."); Console.WriteLine(); Console.ReadLine(); selfHost.Close(); } catch (CommunicationException ce) { Console.WriteLine("An exception occurred: {0}", ce.Message); selfHost.Abort(); } Thing is, the tutorial then says you have to run svcutil.exe to generate a proxy for the client... but since I switched to NetTcpBinding, svcutil doesn't work anymore - can't detect my service. I googled the issue, and found that every single example out there of NetTcpBinding does the setup in the app.config file, not in code, and they all add an endpoint called "Mex", with binding type of "mexTcpBinding". There doesn't appear to be any equivalent of this in code. So, do I have to change my project to use app.config, and abandon the code-based approach? Can anyone explain to me what Mex is, why I need it, and why it (apparently) can't be called in code - or if it can, how, or why is it discouraged? In general, when is it better to use app.config, and when code for WCF services?
