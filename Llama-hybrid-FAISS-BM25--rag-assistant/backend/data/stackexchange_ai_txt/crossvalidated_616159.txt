[site]: crossvalidated
[post_id]: 616159
[parent_id]: 
[tags]: 
Optimizing Student Test Performance

I am a Secondary Math teacher who is interested in creating effective learning in groups. My desire is to create a system/program that maximizes student Test performance, but I am not exactly sure where to start. My idea thus far: I have $n$ students, each of which has probability $p_i$ of passing their next Test. The probability is objectively and subjectively determined by the following metrics (subject to change): Homework average, $h$ , $(0\leq h \leq 100)$ Number of absences, $a$ , $(0\leq a \leq 90)$ , and $k$ is the number of class days thus far. Prior yearly average in math class, $m$ , $(0\leq m \leq 100)$ Current yearly Test average, $c$ , $(0\leq c \leq 100)$ Efficacy score (subjective, explained below), $e$ , $(0\leq e \leq 100)$ Each metric would have its own weight (10%, 15%, 10%, 30%, and 35%, respectively) contributing to students' overall probability. $$p_i=0.1\left(\frac{h}{100}\right) + 0.15\left(1-\frac{a}{k}\right) + 0.1\left(\frac{m}{100}\right) + 0.3\left(\frac{c}{100}\right) + 0.35\left(\frac{e}{100}\right)$$ Initially, groups of size 2, 3, or 4 students would be selected at random. At the end of every few class meetings, I would give a subjective "efficacy score" to each student based on how well they worked in their assigned group (based on communication, quality/quantity of work completed, etc.) What I think I'm looking for: A system that attempts to maximize the average probability of a student passing the next assessment. It should make predictions on who will work well together based on updated input from the above metrics. I have beginner-level coding experience (Python and Java) and a whole month off this summer to work on this. I would appreciate being pointed in the right direction on how to make a system like this come to fruition, or if you have any ideas or constructive comments, those would be appreciated too.
