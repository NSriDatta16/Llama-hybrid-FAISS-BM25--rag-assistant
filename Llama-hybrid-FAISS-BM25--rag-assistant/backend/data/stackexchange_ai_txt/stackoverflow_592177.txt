[site]: stackoverflow
[post_id]: 592177
[parent_id]: 471424
[tags]: 
Peter Tate has already shown how you can define reusable ComponentGroup definitions in separate wix fragments. Some additional tricks related to this: Directory Aliasing The component group fragments don't need to know about directories defined by the main product wxs. In your component group fragment you can talk about a folder like this: ... Then the main product can alias one of its directories (e.g. "productInstallFolder") like this: Dependency Graph ComponentGroup elements can contain ComponentGroupRef child elements. This is great if you have a big pool of reusable components with a complex dependency graph between them. You just set up a ComponentGroup in its own fragment for each component and declare the dependencies like this: If you now reference component group "B" in your setup because it is a direct dependency of your application, it will automatically pull in component group "A" even if the application author never realized that it was a dependency of "B". It "just works" as long as you don't have any circular dependencies. Reusable wixlib The above dependency graph idea works best if you compile the big-pool-o-reusable-components into a reusable wixlib with lit.exe. When creating an application setup, you can reference this wixlib much like a wixobj file. The candle.exe linker will automatically eliminate any fragments that are not "pulled in" by the main product wxs file(s).
