[site]: crossvalidated
[post_id]: 210898
[parent_id]: 210863
[tags]: 
This is certainly a valid approach. Just be sure to include dummies to model "seasonal" behavior - if your product ships every six months and you do lots of integration tests every six months, I'd expect a spike in tickets around that time, so be sure your ML algorithms have an understanding of time and can pick up on this half-yearly seasonality. (Or even better, if this is driven by external factors like integration testing, feed this to your algorithms.) Sven Crone , currently at Lancaster Business School, used to do forecasting with Neural Networks, though I haven't seen a lot of recent work from him on this - might be a good idea to skim some papers of his. Here are pointers to using Random Forests for forecasting. Finally, you may want to search through earlier questions tagged both "forecasting" and "random-forest" (modify using "prediction" instead of "forecasting", or other ML algorithm tags), although this was surprisingly unhelpful.
