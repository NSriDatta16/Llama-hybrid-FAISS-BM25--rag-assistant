[site]: stackoverflow
[post_id]: 5414256
[parent_id]: 5359092
[tags]: 
In your seeds file: c = [clan,Clan.first(:offset => rand(Clan.count))] This works, but it looks like you're picking a random number in Ruby. From what I understand, if you can do something in SQL instead of Ruby, it's generally faster. Try this: c = [clan,Clan.find(:all, :limit => 1, :order => 'random()') You won't get too many gains since it's only run twice per clan (so 20x total), but there are similar lines like these two # (runs 60x total) rand_champion = Champion.first(:offset => rand(Champion.count)) # (runs up to 200x, I think) c = [clan,Clan.first(:offset => rand(Clan.count))] In general, you can almost always find something more to optimize in your program. So your time is most efficiently used by starting with the areas that are repeated the most--the most deeply nested loops. I'll leave optimizing the above 2 lines (and any others that may be similar) to you as an exercise. If you're having trouble, just let me know in a comment. Also, I'm sure you'll get a lot of good suggestions in many of the responses, so I highly highly highly recommend setting up a benchmarker so you can measure the differences. Be sure run it several times for each version you test, so you can get a good average (programs running in the background could potentially throw off your results). As far as simplicity, I think readability is pretty important. It won't make your code run any faster, but it can make your debugging faster (and your time is important!). The few things that were giving me trouble were nondescript variables like c and p . I do this too sometimes, but when you have several of these variables in the same scope, I very quickly reach a point where I think "what was that variable for again?". Something like temp_clan instead of c goes a long way. For readability, I also prefer .each instead of for . That's entirely a personal preference, though. btw I love League of Legends :) Edit: (comments won't let me indent code) Upon taking a second look, I realized that this snippet can be optimized further: for p in item.players.limit(5) rand_champion = Champion.first(:offset => rand(Champion.count)) match.participations.create!(:player => p, :champion => rand_champion) end change Champion.first(:offset => rand(Champion.count)) rand_champs = Champion.find(:all, :limit => 5, :order => 'random()') for p ... i = 0 match.participations.create!(:player => p, :champion => rand_champs(i)) i++ end This will reduce 5 SQL queries into 1. Since it's called 60x, this will reduce your SQL queries from 60 to 12. As an extra plus, you won't get repeated champions on the same team, (or I guess that could be a downside if that was your intention)
