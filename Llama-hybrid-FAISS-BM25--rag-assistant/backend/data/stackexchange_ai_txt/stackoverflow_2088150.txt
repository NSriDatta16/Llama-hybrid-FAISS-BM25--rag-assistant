[site]: stackoverflow
[post_id]: 2088150
[parent_id]: 2087589
[tags]: 
The answer provided by Galghamon SQL Date Interval Algorithm is efficient in terms of code, but won't be able to leverage indexes. I suggest you perform all necessary calculations in Delphi so that your logic can be conceptually reduced to one of the following: (DateCol > @DateVal) (DateCol >= @DateVal) (DateCol These can then be expanded for your rather unfortunate schema as follows (using 1st 2 examples): (YearCol > @YearVal OR (YearCol = @YearVal AND MonthCol > @MonthVal) OR (YearCol = @YearVal AND MonthCol = @MonthVal AND DayCol > @DayVal)) (YearCol > @YearVal OR (YearCol = @YearVal AND MonthCol > @MonthVal) OR (YearCol = @YearVal AND MonthCol = @MonthVal AND DayCol >= @DayVal)) NOTE: You need to be precise about where to use inclusive and where to use exclusive inequality operators.
