[site]: datascience
[post_id]: 77169
[parent_id]: 
[tags]: 
Using scikit-learn for classification problem where classifier based on high dimensionality data

I am using scikit-learn for time series price data for a spot market to categorize the time series points after as the same, higher, or lower price as the current time series point recorded. I am not using more standard time series methods such as Autoregressive Integrated Moving Average as I am considering a type of market that has some unusual characteristics which make it distinct from other spot markets. These characteristics are: The market has finite lifespan (it opens at some point and closes at another and does not reopen) The price can be rather jumpy (it may stay at one price for a set period then jump to a new price in step changes) My classifier is based on the following input data, shown below. This is a list where the first item represents the price at time-series point 1, the second item represents the time series price data at points 1 and 2 and so forth. My question relates to adding another dimension to the input data. I would like to include volume and a rate of change to define the classifier. This would look something like this, if we take index 0 of the first array in the list [[80., volume, DeltaPrice/DeltaTime]] Question 1: Is there a way to do this with scikit-learn (add a further dimension for each time series point)? Question 2: Also, does the classifier only consider the input values or relationships between them. For example, if the price for two inputs is [ 80. , 80. ] and [ 3.1 , 3.1 ] as the same label as there has been no change in value or differently as these value lie far away from each other? The reason I ask this second part as if it would classify these together then there should be no need to add the rate of change to input data. Thinking about it as I have set my labels as the same, higher, or lower price as the current time series point recorded it should give these the same label and put them together. Is this logic correct, would there be any value in adding rate of change to the input data? [ 80. ], [ 3.1 ], [ 20. ], [ 3.1 ], [ 80. ], [ 9. ], [ 20. ], [ 32. ], [ 42. ], [ 26. ], [ 25. ], [ 65. ], [ 42. ], [ 32. ], [ 65. ], [ 25. ], [ 26. ], [ 8.4 ], [ 10. ], [ 26. ], [ 40. ], [ 50. ], [ 7. ], [ 8.8 ], [ 3.15], [ 46. ], [ 6.4 ], [ 6.2 ], [ 44. ], [ 13. ], [ 7. ], [ 8.8 ], [ 50. ], [ 40. ], [ 10. ], [ 26. ], [ 8.4 ], [ 13. ], [ 44. ], [ 6.2 ], [ 6.6 ], [ 3.15], [ 46. ], [ 42. ], [ 16.5 ], [ 15. ], [ 38. ], [190. ], [ 8.6 ], [ 50. ], [ 85. ], [190. ], [ 38. ], [ 15. ], [ 42. ], [ 16.5 ], [ 85. ], [ 50. ], [ 8.6 ]], dtype=float32), array([[ 9. , 9. ], [ 80. , 80. ], [ 3.1 , 3.1 ], [ 20. , 20. ], [ 3.1 , 3.1 ], [ 80. , 80. ], [ 9. , 9. ], [ 20. , 20. ], [ 32. , 32. ], [ 42. , 42. ], [ 26. , 26. ], [ 25. , 25. ], [ 65. , 65. ], [ 42. , 42. ], [ 32. , 32. ], [ 65. , 65. ], [ 25. , 25. ], [ 26. , 26. ], [ 8.4 , 8.4 ], [ 10. , 10. ], [ 26. , 26. ], [ 40. , 40. ], [ 50. , 50. ], [ 7. , 7. ], [ 8.8 , 8.8 ], [ 3.15, 3.15], [ 46. , 46. ], [ 6.4 , 6.4 ], [ 6.2 , 6.2 ], [ 44. , 44. ], [ 13. , 13. ], [ 7. , 7. ], [ 8.8 , 8.8 ], [ 50. , 50. ], [ 40. , 40. ], [ 10. , 10. ], [ 26. , 26. ], [ 8.4 , 8.4 ], [ 13. , 13. ], [ 44. , 44. ], [ 6.2 , 6.2 ], [ 6.6 , 6.6 ], [ 3.15, 3.15], [ 46. , 46. ], [ 42. , 42. ], [ 16.5 , 16.5 ], [ 15. , 15. ], [ 38. , 38. ], [190. , 190. ], [ 8.6 , 8.6 ], [ 50. , 50. ], [ 85. , 85. ], [190. , 190. ], [ 38. , 38. ], [ 15. , 15. ], [ 42. , 42. ], [ 16.5 , 16.5 ], [ 85. , 85. ], [ 50. , 50. ], ```
