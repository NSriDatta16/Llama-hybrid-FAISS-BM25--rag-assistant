[site]: stackoverflow
[post_id]: 3617629
[parent_id]: 3617326
[tags]: 
Here is some code that I threw together to get you started. I normally would take the ActionListener code and put that in some sort of MarqueeController class to keep this logic separate from the panel, but that's a different question about organizing the MVC architecture, and in a simple enough class like this it may not be so important. There are also various animation libraries that would help you do this, but I don't normally like to include libraries into projects only to solve one problem like this. public class MarqueePanel extends JPanel { private JLabel textLabel; private int panelLocation; private ActionListener taskPerformer; private boolean isRunning = false; public static final int FRAMES_PER_SECOND = 24; public static final int MOVEMENT_PER_FRAME = 5; /** * Class constructor creates a marquee panel. */ public MarqueePanel() { this.setLayout(null); this.textLabel = new JLabel("Scrolling Text Here"); this.panelLocation = 0; this.taskPerformer = new ActionListener() { public void actionPerformed(ActionEvent evt) { MarqueePanel.this.tickAnimation(); } } } /** * Starts the animation. */ public void start() { this.isRunning = true; this.tickAnimation(); } /** * Stops the animation. */ public void stop() { this.isRunning = false; } /** * Moves the label one frame to the left. If it's out of display range, move it back * to the right, out of display range. */ private void tickAnimation() { this.panelLocation -= MarqueePanel.MOVEMENT_PER_FRAME; if (this.panelLocation
