[site]: stackoverflow
[post_id]: 4221004
[parent_id]: 4220720
[tags]: 
1) It can be profitable to declare your working objects as private class variables, but not as often as you might think. There are several things you have to consider. First, using private class variables makes your class inherently not thread-safe. Unless you use thread local storage, which comes with its own performance issues. It often turns out that re-using an object is more expensive than allocating a new one. For example, clearing a Hashset or List is often much more expensive than allocating a new one and letting the garbage collector take care of getting rid of it when you're done. A private class variable remains "in scope" as long as the class instance is in scope. This can be a problem if you forget to clear it (i.e. set it to null or clear the collection) because anything that the private variable references will not be garbage collected. Using private variables in this way eliminates much of the benefit you gain by having a garbage collector. The .NET memory manager is very well optimized for short-lived objects. I've found very few situations in which it makes sense to promote a method-level object out to class scope in order to avoid memory allocation and garbage collector overhead. I'll echo the advice given by @dtb: use a profiler to find bottlenecks and identify potential optimization opportunities. Otherwise you're just poking around in the dark and your "optimization" will likely have a detrimental effect on performance.
