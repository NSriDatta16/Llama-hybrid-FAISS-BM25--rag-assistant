[site]: stackoverflow
[post_id]: 1081193
[parent_id]: 
[tags]: 
I need some help using Threads in C#

I´m developing a software in C# that uses static functions from a C++ .dll file through a Wrapper. The problem is that some of these functions are slow and unstable, so in order to solve this I created a Thread that executes them. However, when I abort that thread from the main thread, the program isn´t letting me use those functions again, even though I define a new instance of the thread every time I call a function. Is there any way I can fix this? Thanks in advance. PS: Here is some code from my program: public partial class MainForm : Form, IMultiLanguage { //... //This method is subscribed to the event of pressing the 'Abort' button private void StopCurrentAnalisis() { try { this.analisisManagerController.AnalisisThread.Abort(); } catch (Exception e){ } finally { MessageBox.Show("Analisis has been cancelled by user", "Analisis Interrupted", MessageBoxButtons.OK, MessageBoxIcon.Stop); CerrarNowLoadingForm(); } } //.. } public class AnalisisManager: IAnalisisManagerController { //.. private Thread analisisThread; public Thread AnalisisThread{get{return this.analisisThread;}} public void MakePadrobAnalisis(TipoAnalisis tipoAnalisis, Dictionary > parametros) { object[] arregloParams = new object[]{tipoAnalisis,parametros}; analisisThread = new Thread(new ParameterizedThreadStart(MakeAnalisisInOtherThread)); analisisThread.Start(arregloParams); } private void MakeAnalisisInOtherThread(object o) { object[] arregloParams = o as object[]; TipoAnalisis tipoAnalisis = (TipoAnalisis) arregloParams[0]; Dictionary > parametros = arregloParams[1] as Dictionary >; //This launches an event telling the GUI the unstable analisis has started. //The method that makes the 'Abort' button to appear on the GUI is subscribed to this event StartAnalisis(); //The Thread executes DLL functions according to tipoAnalisis, for example: case InvKinematicsMinTorque: { WrapperPadirob.InverseKinematicsMinTorqueConfigAnalisis(); break; } //.. } }
