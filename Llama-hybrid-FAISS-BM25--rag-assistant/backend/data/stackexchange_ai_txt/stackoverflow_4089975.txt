[site]: stackoverflow
[post_id]: 4089975
[parent_id]: 
[tags]: 
Efficient way to calculate average value over disjoint subranges of STL map

I'm converting an algorithm from C# to C++. A small part of the algorithm is to calculate average values for certain areas in a dictionary. The data in the dictionary is stored in the following way: Index Value 1 10 3 28 290 78 1110 90 I need to calculate the average value of all values with an index smaller than a certain number and all index values larger than a certain number. In C# I do it the following way: if (dictionary.Where(x => x.Key 0) { avgValue = (int) dictionary.Where(x => x.Key x.Value); } for (var i = 0; i x.Key > (rightBorder)).Count() > 0) { avgValue = (int) dictionary.Where( x => x.Key > (rightBorder)).Average( x => x.Value); } } if (line[i] I know that is not very efficient and pretty crappy code, but I knew that I would have to completely rewrite this part of the algorithm in C++ anyway, so I decided to implement it quick and dirty. Anyway I am now porting this to C++ and because it will run on a mobile platform performance is very important. With my limited C++/STL knowledge I could most likely get the job done, but the result would probably be much worse than the C# code. So if you know a good and efficient way to accomplish this task in C++, please tell me. EDIT: Thank you for all your answers. As I mentioned in my post my STL knowledge is limited, so it's really hard for me to pick a solution, especially since there are a lot of different opinions. It would be great if someone could help me with the decision, by comparing the solutions posted here. To give you a little more background information: The function will be called approximately 500 times with 1000 values in the map. The most important aspect is stability, performance is the second most important.
