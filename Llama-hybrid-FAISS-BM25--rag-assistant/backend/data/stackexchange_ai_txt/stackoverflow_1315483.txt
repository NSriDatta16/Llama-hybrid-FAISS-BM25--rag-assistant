[site]: stackoverflow
[post_id]: 1315483
[parent_id]: 
[tags]: 
C# Lambda+Extensions+Fluent - How Would I Do This?

I want to be able to create "Transformation" classes that take a given object, perform a series of transformations on it (i.e. change property values) and keeps track of the transformations performed. The transformation performed will vary based on the properties of the object provided. I want to be able to apply transformation rules (which are finite and commin) within a given transformation class using a fluent style interface. At a high level, I understand that I will likely have an ITransformer, an ITransformationRule, and ITransformationResult, and a few other objects to make this happen. How I would want the code to work when creating Transformation classes... public OfflinePersonToOnlineTransformation : TransformerBase { public OfflinePersonToOnlineTransformation() { Transform(x => x.PersonClassification) .WhenCreatedBefore("1/1/2000") .ClassifyAs("Online"); } } I understand that my TransformerBase would need to implement the "Transform" method that takes a Func or Expression, and I understand that it would need to keep a collection of ITransformationRules. I also understand that I would likely use Extension methods for the "WhenCreatedBefore" and "ClassifyAs" methods. The trouble is, I can't figure out how to make it all work. I've looked at source code for Fluent Validation .NET as it does validation this way, but the complexity is killing me. I'm looking for a tutorial that covers this, or someone to spell it out in a way that is a pretty straightforward. Thanks in advance.
