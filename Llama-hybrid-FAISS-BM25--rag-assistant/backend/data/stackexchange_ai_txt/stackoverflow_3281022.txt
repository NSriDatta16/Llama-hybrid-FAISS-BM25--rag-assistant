[site]: stackoverflow
[post_id]: 3281022
[parent_id]: 3279501
[tags]: 
Colours are essentially three dimensional vectors (regardless if they are represented as HSV, RGB, CMY[K]). Unfortunately relational database mostly aren't very good at working in more than 1 dimension. If you reduce the image down to a single "average" colour then the solution becomes a bit simpler: A trivial analysis would imply that you would need to compare a new image with every existing image to determine the level of similarity. However a better approach would be to digitise the vector the find similar values in the database. e.g. for 24-bit colour 124, 39, 201 as 1 bit colour: 0,0,1 as 2 bit colour: 1,0,2 .... If you want to look at more colours in the image, then I'd recommend reducing down to the nearest values of a fixed colour map without error-propagation and identifying the top 'N' most frequently used colours. What you do after that would require some trial and effort - the method above weighted for frequency in the interim image might be necessary or you might just get away with looking at the images where the top N-M colours match N-X of your calculated values (with some tweaking of the M and X values). C.
