[site]: stackoverflow
[post_id]: 3765583
[parent_id]: 3710263
[tags]: 
How to extract the column headings from an existing table: You don't need to parse an SQL "create table" statement. This is fortunate, as the "create table" syntax is neither nice nor clean, it is warthog-ugly. You can use the table_info pragma. It gives you useful information about each column in a table, including the name of the column. Example: >>> #coding: ascii ... import sqlite3 >>> >>> def get_col_names(cursor, table_name): ... results = cursor.execute("PRAGMA table_info(%s);" % table_name) ... return [row[1] for row in results] ... >>> def wrong_way(cur, table): ... import re ... cur.execute("SELECT sql FROM sqlite_master WHERE name=?;", (table, )) ... sql = cur.fetchone()[0] ... column_defs = re.findall("[(](.*)[)]", sql)[0] ... first_words = (line.split()[0].strip() for line in column_defs.split(',')) ... columns = [word for word in first_words if word.upper() != "CONSTRAINT"] ... return columns ... >>> conn = sqlite3.connect(":memory:") >>> curs = conn.cursor() >>> _ignored = curs.execute( ... "create table foo (id integer, name text, [haha gotcha] text);" ... ) >>> print get_col_names(curs, "foo") [u'id', u'name', u'haha gotcha'] >>> print wrong_way(curs, "foo") [u'id', u'name', u'[haha'] >> Other problems with the now-deleted "parse the create table SQL" answer: Stuffs up with e.g. create table test (id1 text, id2 int, msg text, primary key(id1, id2)) ... needs to ignore not only CONSTRAINT , but also keywords PRIMARY , UNIQUE , CHECK and FOREIGN (see the create table docs). Needs to specify re.DOTALL in case there are newlines in the SQL. In line.split()[0].strip() the strip is redundant.
