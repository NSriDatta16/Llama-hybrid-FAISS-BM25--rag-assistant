[site]: stackoverflow
[post_id]: 662151
[parent_id]: 661307
[tags]: 
All good answers. I would only add "minimize data structure". This might even be easier in C, because if C++ is "C with classes", OOP is trying to encourage you to take every noun / verb in your head and turn it into a class / method. That can be very wasteful. For example, suppose you have an array of temperature readings at points in time, and you want to display them as a line-chart in Windows. Windows has a PAINT message, and when you receive it, you can loop through the array doing LineTo functions, scaling the data as you go to convert it to pixel coordinates. What I have seen entirely too many times is, since the chart consists of points and lines, people will build up a data structure consisting of point objects and line objects, each capable of DrawMyself, and then make that persistent, on the theory that that is somehow "more efficient", or that they might, just maybe, have to be able to mouse over parts of the chart and display the data numerically, so they build methods into the objects to deal with that, and that, of course, involves creating and deleting even more objects. So you end up with a huge amount of code that is oh-so-readable and merely spends 90% of it's time managing objects. All of this gets done in the name of "good programming practice" and "efficiency". At least in C the simple, efficient way will be more obvious, and the temptation to build pyramids less strong.
