[site]: stackoverflow
[post_id]: 337689
[parent_id]: 337642
[tags]: 
I think there are many thoughts to why some code base is too large. It is hard to remain in a constant naming convention. If classes/methods/atributes can't be named consistently or can't be found consistently, then it's time to reorganize. When your programmers are surfing the web and going to lunch in order to compile. Keeping compiling/linking time to a minimum is important for management. The last thing you want is a programmer to get distracted by twiddling their thumbs for too long. When small changes start to affect many MANY other places of code. There is a benefit to consolidation of code, but there is also a cost. If a small change to fix one bug causes a dozen more, and this is commonly happens, then your code base needs to be spread out (versioned libraries) or possibly unconsolidated (yes, duplicate code). If the learning curve of new programmers to the project is obviously longer than acceptable (usually 90 days), then your code base/training isn't set up right. ..There are many many more, I'm sure. If you think about it from these three perspectives: Is it hard to support? Is it hard to change? Is it hard to learn? ...Then you will have an idea if your code fits the "large and unwieldy" category
