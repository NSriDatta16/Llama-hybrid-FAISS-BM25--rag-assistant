[site]: stackoverflow
[post_id]: 5463671
[parent_id]: 5462704
[tags]: 
I suppose by "deep recursion" you're referring to recursion over a tree instead of recursion over a list? The more low-level answer to this is to recurse down both the car and the cdr of the cons cells, instead of just the cdr. Though I'ld prefer to use higher order functions, in this case calling mapcar recursively: (defun myremove (item tree) (if (atom tree) tree (mapcar (lambda (subtree) (myremove item subtree)) (remove item tree :test #'equal)))) EDIT: Here's a low-level solution: (defun myremove (item tree) (cond ((atom tree) tree) ((equal item (car tree)) (myremove item (cdr tree))) ('otherwise (cons (myremove item (car tree)) (myremove item (cdr tree))))))
