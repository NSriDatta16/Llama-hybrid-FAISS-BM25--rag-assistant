[site]: stackoverflow
[post_id]: 5615538
[parent_id]: 
[tags]: 
Parse a date string into a certain timezone (supporting daylight saving time)

Ok i've been working very hard the last few weeks and i've come across a small problem. I don't think my mind is quite up to the task right now :) so i need some tips/help! it's likely very simple but my head isn't clicking yet. Users will enter a date and time in AEST. There is also a application set "default" timezone (as it might need to change), currently its set to "AUS Eastern Standard Time" So we have a user string with no time zone and a defined system time zone on a server in the USA (So local doesn't match and it can't be changed or used) Now what i need is a way to say "parse this user entered string using the timezone X" i can't just enter +10 or +11 as the offset as the dates could be in or out of daylight savings; which yes does change it between +10 and +11 even for the same timezone! The current AEST time might also be in or out of DST so i can't just convert a UTC date to the current AEST time and get the "zzz" string and attach it either as dates will be off by an hour for anything entered out of the current DST setting. For now the code actually does just that: TimeZoneInfo ConvTo = TimeZoneInfo.FindSystemTimeZoneById(ConfigurationManager.AppSettings["DefaultTimeZone"]); DateTimeOffset getDate = TimeZoneInfo.ConvertTime(DateTimeOffset.UtcNow, ConvTo); string TimeZoneId = " " + getDate.ToString("zzz"); DateTimeOffset cvStartDate = DateTimeOffset.MinValue; DateTimeOffset.TryParse(StartDate + TimeZoneId, out cvStartDate); Then i check if the date isn't valid by checking if it still == DateTimeOffset.MinValue or convert it to UTC and add to the database, it will the be converted back to AEST when displayed. However some dates are off by an hour and others are perfect (as expected) :) What is the most elegant way to solve this? EDIT: To help explain the problem, i wrote some test code as a windows test application: // User entered date string EnteredDate = "2011/01/01 10:00:00 AM"; // Get the timezone we want to use TimeZoneInfo myTimeZone = TimeZoneInfo.FindSystemTimeZoneById("AUS Eastern Standard Time"); // Find the timezone string of the selected timezone to parse the user string // This is the part that is incorrect and what i need help with. DateTimeOffset getDate = TimeZoneInfo.ConvertTime(DateTimeOffset.UtcNow, myTimeZone); string TimeZoneId = " " + getDate.ToString("zzz"); // Parse the string into the date object DateTimeOffset cvEnteredDate = DateTimeOffset.MinValue; DateTimeOffset.TryParse(EnteredDate + TimeZoneId, out cvEnteredDate); // Display textBox1.Text += "Parsed: " + cvEnteredDate.ToString("yyyy/MM/dd HH:mm:ss zzz") + Environment.NewLine; // Convert to UTC and display cvEnteredDate = cvEnteredDate.ToUniversalTime(); textBox1.Text += "UTC: " + cvEnteredDate.ToString("yyyy/MM/dd HH:mm:ss zzz") + Environment.NewLine; // Convert back to AEST and display cvEnteredDate = TimeZoneInfo.ConvertTime(cvEnteredDate, myTimeZone); textBox1.Text += "Changed Back: " + cvEnteredDate.ToString("yyyy/MM/dd HH:mm:ss zzz") + Environment.NewLine; Whats the output of this? Parsed: 2011/01/01 10:00:00 +10:00 UTC: 2011/01/01 00:00:00 +00:00 Changed Back: 2011/01/01 11:00:00 +11:00 Please note the hour is off by one and the offset is different. Additionally, what if we JUST change the date entered to: string EnteredDate = "2011/04/20 10:00:00 AM"; we get: Parsed: 2011/04/20 10:00:00 +10:00 UTC: 2011/04/20 00:00:00 +00:00 Changed Back: 2011/04/20 10:00:00 +10:00 Which is perfectly good and fine, using the same code just a different entered date. This happens because the current DST setting and the DST setting of the entered date are different, this is what i want a solution for :) Think of it like the chicken and egg problem. I need the correct timezone data for the entered string before i parse it which i can only get after i've parsed the string (so will be an elaborate solution) Or i need .NET to parse the string using the myTimeZone object so it knows what to set it to itself, but i can't see any functions that do this, they all take a already parsed and set datetime or datetimeoffset object So i'm looking for elegant solutions others might have done? I certainly can't be the only one who has noticed this? EDIT2: Ok i've made a 'working' function that solves the problem i think, here is an example (add a textbox to a c# windows app and use the code below to test yourself): private void Form1_Load(object sender, EventArgs e) { TimeZoneInfo myTimeZone = TimeZoneInfo.FindSystemTimeZoneById("AUS Eastern Standard Time"); DateTimeOffset get1Date = ReadStringWithTimeZone("2011/01/01 10:00:00 AM", myTimeZone); textBox1.Text += "Read1: " + get1Date.ToString("yyyy/MM/dd HH:mm:ss zzz") + Environment.NewLine; get1Date = get1Date.ToUniversalTime(); textBox1.Text += "Read1 - UTC: " + get1Date.ToString("yyyy/MM/dd HH:mm:ss zzz") + Environment.NewLine; get1Date = TimeZoneInfo.ConvertTime(get1Date, myTimeZone); textBox1.Text += "Changed Back: " + get1Date.ToString("yyyy/MM/dd HH:mm:ss zzz") + Environment.NewLine + Environment.NewLine; DateTimeOffset get2Date = ReadStringWithTimeZone("2011/04/20 10:00:00 AM", myTimeZone); textBox1.Text += "Read2: " + get2Date.ToString("yyyy/MM/dd HH:mm:ss zzz") + Environment.NewLine; get2Date = get2Date.ToUniversalTime(); textBox1.Text += "Read2 - UTC: " + get2Date.ToString("yyyy/MM/dd HH:mm:ss zzz") + Environment.NewLine; get2Date = TimeZoneInfo.ConvertTime(get2Date, myTimeZone); textBox1.Text += "Changed Back: " + get2Date.ToString("yyyy/MM/dd HH:mm:ss zzz") + Environment.NewLine + Environment.NewLine; } public DateTimeOffset ReadStringWithTimeZone(string EnteredDate, TimeZoneInfo tzi) { DateTimeOffset cvUTCToTZI = TimeZoneInfo.ConvertTime(DateTimeOffset.UtcNow, tzi); DateTimeOffset cvParsedDate = DateTimeOffset.MinValue; DateTimeOffset.TryParse(EnteredDate + " " + cvUTCToTZI.ToString("zzz"), out cvParsedDate); if (tzi.SupportsDaylightSavingTime) { TimeSpan getDiff = tzi.GetUtcOffset(cvParsedDate); string MakeFinalOffset = (getDiff.Hours 9 ? "" : "0") + getDiff.Hours + ":" + (getDiff.Minutes > 9 ? "" : "0") + getDiff.Minutes; textBox1.Text += "Diff: " + MakeFinalOffset + Environment.NewLine; DateTimeOffset.TryParse(EnteredDate + " " + MakeFinalOffset, out cvParsedDate); return cvParsedDate; } else { return cvParsedDate; } } And the output: Diff: +11:00 Read1: 2011/01/01 10:00:00 +11:00 Read1 - UTC: 2010/12/31 23:00:00 +00:00 Changed Back: 2011/01/01 10:00:00 +11:00 Diff: +10:00 Read2: 2011/04/20 10:00:00 +10:00 Read2 - UTC: 2011/04/20 00:00:00 +00:00 Changed Back: 2011/04/20 10:00:00 +10:00 Only thing is there might be a problem if the user entered date is right on the change over hour of DST it still might be an hour off as it's just reading the current offset and using that, then checking if its supposed to be daylight savings or not, and if its out there it would read incorrectly. However it's miles better than what i have now. Can anyone maybe help me with cleaning up this function? Is this the best route go down for what i need? ideas?
