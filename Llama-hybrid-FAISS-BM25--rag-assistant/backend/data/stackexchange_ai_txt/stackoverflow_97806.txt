[site]: stackoverflow
[post_id]: 97806
[parent_id]: 97762
[tags]: 
You can organize your rectangles in a quad or kd-tree. That gives you O(log n). That's the mainstream method. Another interesting data-structure for this problem are R-trees. These can be very efficient if you have to deal with lots of rectangles. http://en.wikipedia.org/wiki/R-tree And then there is the O(1) method of simply generating a bitmap at the same size as your screen, fill it with a place-holder for "no rectangle" and draw the hit-rectangle indices into that bitmap. A lookup becomes as simple as: int id = bitmap_getpixel (mouse.x, mouse.y) if (id != -1) { hit_rectange (id); } else { no_hit(); } Obviously that method only works well if your rectangles don't change that often and if you can spare the memory for the bitmap.
