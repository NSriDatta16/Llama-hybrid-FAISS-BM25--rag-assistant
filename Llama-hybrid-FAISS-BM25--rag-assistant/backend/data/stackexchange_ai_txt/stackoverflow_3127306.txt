[site]: stackoverflow
[post_id]: 3127306
[parent_id]: 3124450
[tags]: 
There are basically three options you have: You can set up a custom tool in Tools | External Tools to start mspec.exe with the current project's assembly to run the contexts and generate the HTML report. Install TestDriven.Net and ensure that Machine.Specifications.dll.tdnet and Machine.Specifications.TDNetRunner.dll are in your project's copy of MSpec. You can then run and debug your contexts from the context menu: "Run Tests", "Run With | Debugger" without further installation. There's an example of what the MSpec folder looks like for all of my projects. If you use ReSharper 4.1, 4.5, 5.0 or the latest 5.1 EAP (== beta) there are runners for each of these versions. The ZIP download contains batch files that install the runner for each respective version of ReSharper. ReSharper's unit test support is pretty extensive in terms of UI widgets/shortcut support, the reporting tree view and debugging. If you're a dotTrace user you can also profile right from within Visual Studio. dotCover (another JetBrains product) allows you to calcualate code coverage results from your MSpec runs. On top of that, you get all the nice coding and navigation features that ReSharper provides. Be aware that only the first option will generate the HTML report as both the TestDriven.Net and ReSharper runners do not support HTML report generation. From my point of view this isn't an issue since the TD.Net and ReSharper runners offer fairly complete reporting mechanisms through the Visual Studio UI. Another option that might work (I haven't used it myself) is to leverage the Gallio support that MSpec has. Gallio is a runner/framework for several testing frameworks; it might as well support debug runs with MSpec. Contact @smaclell if you have questions about Gallio support.
