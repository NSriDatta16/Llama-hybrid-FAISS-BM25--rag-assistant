[site]: stackoverflow
[post_id]: 62594
[parent_id]: 62539
[tags]: 
The point of dependency inversion is to make reusable software. The idea is that instead of two pieces of code relying on each other, they rely on some abstracted interface. Then you can reuse either piece without the other. The way this is most commonly achieved is through an inversion of control (IoC) container like Spring in Java. In this model, properties of objects are set up through an XML configuration instead of the objects going out and finding their dependency. Imagine this pseudocode... public class MyClass { public Service myService = ServiceLocator.service; } MyClass directly depends on both the Service class and the ServiceLocator class. It needs both of those if you want to use it in another application. Now imagine this... public class MyClass { public IService myService; } Now, MyClass relies on a single interface, the IService interface. We'd let the IoC container actually set the value of that variable. So now, MyClass can easily be reused in other projects, without bringing the dependency of those other two classes along with it. Even better, you don't have to drag the dependencies of MyService, and the dependencies of those dependencies, and the... well, you get the idea.
