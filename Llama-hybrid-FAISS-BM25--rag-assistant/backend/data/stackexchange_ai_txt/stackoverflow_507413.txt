[site]: stackoverflow
[post_id]: 507413
[parent_id]: 505617
[tags]: 
One option would be to provide a more verbose class instead of the enum e.g. [Serializable] public class AccessPermission{ public boolean None{get;set;} public boolean Read{get;set;} public boolean Write{get;set;} public boolean Full{get;set;} public AccessPermission(AccessLevels level){ None = false; Read = false; Write = false; Full = false; switch(level){ case AccessLevels.None: break; case AccessLevels.Read: Read = true; break; case AccessLevels.Write: Write = true; break; case AccessLevels.Full: Read = true; Write = true; Full = true; break; } } } The other option I can see is providing a method in what ever language they are using to successfully interoperate the integer you are sending. The flag operator means that c# does bit masking to find if a individual flag is marked 0001 -> None 0010 -> Read 0100 -> Write 0110 -> Full so to check for any permission you should see if that bit is set public static boolean CanRead(int accessLevel){ return (accessLevel | 2) > 0 // return true if read bit set, using bitwise or } public static boolean CanWrite(int accessLevel){ return (accessLevel | 4) > 0 // return true of write bit set. } Please note this second solution is more fragile, if you change the definition of accessLevels you client will silently miss behave.
