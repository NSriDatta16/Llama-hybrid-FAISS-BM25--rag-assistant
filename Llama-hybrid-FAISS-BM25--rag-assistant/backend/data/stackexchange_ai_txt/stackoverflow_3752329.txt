[site]: stackoverflow
[post_id]: 3752329
[parent_id]: 3468432
[tags]: 
I have resolved this with multiple profiles and providers, using the following hack: First: create a base class for your profiles. It doesn't have to contain all the fields; it's just important they share the same base class (I called this CustomProfileBase ). Furthermore the following change in config: app.config code // find the membershipprovider based on the property 'website' var membershipProvider = Membership.Providers.Cast ().Single(s => s.ApplicationName == (website == Website.A ? "websiteA" : "websiteB")); // find the according profileProvider var profileProvider = ProfileManager.Providers[website == Website.A ? "AProfielen" : "BProfielen"]; // here's the hacky part. There is a static field on the ProfileManager // that needs to be set. 'Membership' uses the ProfileManager to retrieve // and store the profile; so it's pretty much the only way FieldInfo cPr = typeof(ProfileManager).GetField("s_Provider", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic); cPr.SetValue(null, profileProvider); // Now we can retrieve the current user through our selected membershipProvider var user = membershipProvider.GetUser(gebruikersData.EmailAdres, false); if (user == null) { // create user: membershipProvider.CreateUser(mail, password, mail, null, null, true, null, out createStatus); // create according profile. ProfileBase uses Membership internal. var profile = (CustomProfileBase)ProfileBase.Create(mail); // set the default values, you can upcast your profile again profile.Save(); } Now we have created a user in the according database along with a profile. You can retrieve the user through the membershipProvider and the profile through ProfileManager.FindProfilesByUserName() .
