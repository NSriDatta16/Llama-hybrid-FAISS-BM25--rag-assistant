[site]: datascience
[post_id]: 55585
[parent_id]: 55537
[tags]: 
There are two options in my opinion that might handle this, or you can use create a hybrid of them to reduce computation time. With on the shelf algorithms, you might want to try doing a PCA to identify direction for maximum variance, use the first component to define a line or first two components to define a plane (you might end up very close to your idea of the plane). If this doesn't helps then, Create your own optimization problem to include maximum points. Decide on percentage of points you want the line/ plane to be closer to. pseudo steps for algorithm could look like: Initiate parameters defining the plane or line (you might want to warm start using the results from PCA for faster computation) set |e| ~ 0.01 Optimize on plane/ line parameters: Max (no of points in |e| distance of the line/ plane) if max points in (3) greater than % points required then stop, else go to (2) and increase |e|
