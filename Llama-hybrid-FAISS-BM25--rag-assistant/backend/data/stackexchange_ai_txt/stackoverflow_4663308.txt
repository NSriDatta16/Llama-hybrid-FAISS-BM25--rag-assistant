[site]: stackoverflow
[post_id]: 4663308
[parent_id]: 4663172
[tags]: 
Regarding your first question I will always use a defined type to store the strings simply to have one location for change if needed. So for your example i would have the following public sealed class RootTypes { public const string Entity = "entity"; public const string UAV = "uav"; } Your code then updates to this typeOfObject = typeOfObject.ToLower(); if (typeOfObject == RootTypes.UAV) { stkUavObject = _stkObjectRootToIsolateForUavs.CurrentScenario.Children[stkObjectName]; var group = (IAgDataProviderGroup) stkUavObject.DataProviders["Heading"]; var provider = (IAgDataProvider) group.Group["Fixed"]; IAgDrResult result = ((IAgDataPrvTimeVar) provider).ExecSingle(_stkObjectRootToIsolateForUavs.CurrentTime); stkObjectHeadingAndVelocity[0] = (double) result.DataSets[1].GetValues().GetValue(0); stkObjectHeadingAndVelocity[1] = (double) result.DataSets[4].GetValues().GetValue(0); } else if (typeOfObject == RootTypes.Entity) { IAgStkObject stkEntityObject = _stkObjectRootToIsolateForEntities.CurrentScenario.Children[stkObjectName]; var group = (IAgDataProviderGroup) stkEntityObject.DataProviders["Heading"]; var provider = (IAgDataProvider) group.Group["Fixed"]; IAgDrResult result = ((IAgDataPrvTimeVar) provider).ExecSingle(_stkObjectRootToIsolateForEntities.CurrentTime); stkObjectHeadingAndVelocity[0] = (double) result.DataSets[1].GetValues().GetValue(0); stkObjectHeadingAndVelocity[1] = (double) result.DataSets[4].GetValues().GetValue(0); } The issue of code redundancy has been anserwed by Restuta
