[site]: stackoverflow
[post_id]: 3803933
[parent_id]: 3803673
[tags]: 
Perhaps the added features of numpy's mean are adding a bit of overhead. >>> def myMean(itr): ... c = t = 0 ... for item in itr: ... c += 1 ... t += item ... return t / c ... >>> import timeit >>> a = range(20) >>> t1 = timeit.Timer("myMean(a)","from __main__ import myMean, a") >>> t1.timeit() 6.8293311595916748 >>> t2 = timeit.Timer("average(a)","from __main__ import a; from numpy import average") >>> t2.timeit() 69.697283029556274 >>> t3 = timeit.Timer("average(array(a))","from __main__ import a; from numpy import average, array") >>> t3.timeit() 51.65147590637207 >>> t4 = timeit.Timer("fromiter(a,npfloat).mean()","from __main__ import a; from numpy import average, fromiter,float as npfloat") >>> t4.timeit() 18.513712167739868 Looks like numpy's best performance came when using fromiter .
