[site]: stackoverflow
[post_id]: 1764660
[parent_id]: 1750025
[tags]: 
Threads 10k threads is insanely high, and your threads are spending more time hopping on and off the processor than doing actual work. aka thrashing. EDIT: I'm assuming here that it's a .NET web application. Does your application use a ThreadPool or BackgroundWorkers? It seems like you'd have to be using some mechanism other than IIS's standard thread entourage (which is only around 4 per processor) to reach 10k threads. Memory Each thread requires memory to keep track of in addition to the memory it utilizes for work, so by sheer volume of threads, you are probably reaching the 1G limit. Session (I will survive!) The application is probably setup to store Session State in persistent storage or the session state service. With this being the case, the worker process can safely be recycled without losing user state information. If the session state was configured (in the Web.config) as In-Proc, then session state would be lost when the worker process recycled. Work process recycling One other thing of note, before a worker process dies, another worker process is setup and started to take it's place. It's somewhere in this process that you're probably seeing the w3wp.exe process (either old or new) with 0 threads. BackgroundWorkers are like rabbits If your threads are performing work that lasts longer than 1 second (1/2 second really), don't use BackgroundWorkers. Unless you change the ThreadPool's max threads (which is NOT recommended, as this can screw up deeper functionality within .NET), there's not a hard (enough) limit on the number of BackgroundWorkers that can run concurrently. It would be better to use a Producer Consumer Queue model in that case. Check out this site . It's an awesome resource on concurrent programming with lots of models and examples.
