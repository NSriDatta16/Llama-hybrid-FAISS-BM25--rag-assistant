[site]: stackoverflow
[post_id]: 2504039
[parent_id]: 2503968
[tags]: 
What you are trying to do is called bulk insert . Oracle provides .NET assembly Oracle.DataAccess.dll that you can use for this purpose. There is no hand-made solution that you can think of that would beat the performance of this custom vendor library for the Oracle DBMS. http://download.oracle.com/docs/html/E10927_01/OracleBulkCopyClass.htm#CHDGJBBJ http://dotnetslackers.com/articles/ado_net/BulkOperationsUsingOracleDataProviderForNETODPNET.aspx The most common idea is to use arrays of values for each column and apply them to a template SQL. In the example below employeeIds, firstNames, lastNames and dobs are arrays of the same length with the values to insert. The Array Binding feature in ODP.NET allows you to insert multiple records in one database call. To use Array Binding, you simply set OracleCommand.ArrayBindCount to the number of records to be inserted, and pass arrays of values as parameters instead of single values: > 01. string sql = > 02. "insert into bulk_test (employee_id, first_name, last_name, > dob) " > 03. > + "values (:employee_id, :first_name, :last_name, :dob)"; > 04. > > 05. OracleConnection cnn = new OracleConnection(connectString); > 06. cnn.Open(); > 07. OracleCommand cmd = cnn.CreateCommand(); > 08. cmd.CommandText = sql; > 09. cmd.CommandType = CommandType.Text; > 10. cmd.BindByName = true; > 11. > > 12. // To use ArrayBinding, we need to set ArrayBindCount > 13. cmd.ArrayBindCount = numRecords; > 14. > > 15. // Instead of single values, we pass arrays of values as parameters > 16. cmd.Parameters.Add(":employee_id", OracleDbType.Int32, > 17. employeeIds, ParameterDirection.Input); > 18. cmd.Parameters.Add(":first_name", OracleDbType.Varchar2, > 19. firstNames, ParameterDirection.Input); > 20. cmd.Parameters.Add(":last_name", OracleDbType.Varchar2, > 21. lastNames, ParameterDirection.Input); > 22. cmd.Parameters.Add(":dob", OracleDbType.Date, > 23. dobs, ParameterDirection.Input); > 24. cmd.ExecuteNonQuery(); > 25. cnn.Close(); As you can see, the code does not look that much different from doing a regular single-record insert. However, the performance improvement is quite drastic, depending on the number of records involved. The more records you have to insert, the bigger the performance gain. On my development PC, inserting 1,000 records using Array Binding is 90 times faster than inserting the records one at a time. Yes, you read that right: 90 times faster! Your results will vary, depending on the record size and network speed/bandwidth to the database server. A bit of investigative work reveals that the SQL is considered to be "executed" multiple times on the server side. The evidence comes from V$SQL (look at the EXECUTIONS column). However, from the .NET point of view, everything was done in one call.
