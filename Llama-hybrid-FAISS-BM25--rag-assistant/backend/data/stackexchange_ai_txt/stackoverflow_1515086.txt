[site]: stackoverflow
[post_id]: 1515086
[parent_id]: 
[tags]: 
#defined bitflags and enums - peaceful coexistence in "c"

I have just discovered the joy of bitflags. I have several questions related to "best-practices" regarding the use of bitflags in C. I learned everything from various examples I found on the web but still have questions. In order to save space, I am using a single 32bit integer field in a struct ( A->flag ) to represent several different sets of boolean properties. In all, 20 different bits are #define d. Some of these are truly presence/absence flags (STORAGE-INTERNAL vs. STORAGE-EXTERNAL). Others have more than two values (e.g. mutually exclusive set of formats: FORMAT-A, FORMAT-B, FORMAT-C). I have defined macros for setting specific bits (and simultaneously turning off mutually exclusive bits). I have also defined macros for testing if specific combination of bits are set in the flag. However, what is lost in the above approach is the specific grouping of flags that is best captured by enums. For writing functions, I would like to use enums (e.g., STORAGE-TYPE and FORMAT-TYPE), so that function definitions look nice. I expect to use enums only for passing parameters and #defined macros for setting and testing flags. (a) How do I define flag ( A->flag ) as a 32 bit integer in a portable fashion (across 32 bit / 64 bit platforms)? (b) Should I worry about potential size differences in how A->flag vs. #define d constants vs. enums are stored? (c) Am I making things unnecessarily complicated, meaning should I just stick to using #define d constants for passing parameters as ordinary int s? What else should I worry about in all this? I apologize for the poorly articulated question. It reflects my ignorance about potential issues.
