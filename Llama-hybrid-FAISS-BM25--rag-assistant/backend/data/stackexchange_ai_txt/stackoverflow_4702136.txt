[site]: stackoverflow
[post_id]: 4702136
[parent_id]: 4701895
[tags]: 
It depends on how you intend to use the text and the type of application you're writing. If the text will primarily be static and used as labels or dialogs in the UI, then NSTextField ought to work okay. If you need fancy animations, then CATextLayer may be more appropriate. If you are writing a game (solitaire, for example), the UIs will tend to be more similar and using CATextLayer and CoreAnimation would make sense. If you're writing a more general application like a chat client, the interfaces and ways the user interacts with the app are vastly different, and it would probably make more sense to use NSTextFields or NSTextViews . Again, this all depends on the type of app you're creating, but if it's a more traditional app like the chat client example, then I would think that using CATextLayer and having to create everything in the interface programmatically, rather than using NSTextField and laying stuff out in a nib file, would mean hundreds of more lines of code. On the other hand, if the app is more like the solitaire game example, and the dimensions of the layers and properties are defined in a way that takes into account which platform the app is running on, then you could probably save a lot of code. For the record, NSTextField is probably the closest equivalent AppKit class to UILabel . NSTextView is a more heavyweight class that you generally only need if you want to do full paragraphs and more advanced typesetting. Part of what makes NSTextField lighter weight is that they tend to share an invisible, single NSTextView (or its superclass, NSText ) as the field editor, that helps with text entry. Since only one text field in an app can have focus at one time, it can share a common field editor to help improve performance.
