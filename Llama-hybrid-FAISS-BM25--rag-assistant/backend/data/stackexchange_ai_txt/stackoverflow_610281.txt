[site]: stackoverflow
[post_id]: 610281
[parent_id]: 609830
[tags]: 
string.capwords() (defined in string.py ) # Capitalize the words in a string, e.g. " aBc dEf " -> "Abc Def". def capwords(s, sep=None): """capwords(s, [sep]) -> string Split the argument into words using split, capitalize each word using capitalize, and join the capitalized words using join. Note that this replaces runs of whitespace characters by a single space. """ return (sep or ' ').join(x.capitalize() for x in s.split(sep)) str.title() (defined in stringobject.c ) PyDoc_STRVAR(title__doc__, "S.title() -> string\n\ \n\ Return a titlecased version of S, i.e. words start with uppercase\n\ characters, all remaining cased characters have lowercase."); static PyObject* string_title(PyStringObject *self) { char *s = PyString_AS_STRING(self), *s_new; Py_ssize_t i, n = PyString_GET_SIZE(self); int previous_is_cased = 0; PyObject *newobj = PyString_FromStringAndSize(NULL, n); if (newobj == NULL) return NULL; s_new = PyString_AsString(newobj); for (i = 0; i str.title() in pure Python class String(str): def title(self): s = [] previous_is_cased = False for c in self: if c.islower(): if not previous_is_cased: c = c.upper() previous_is_cased = True elif c.isupper(): if previous_is_cased: c = c.lower() previous_is_cased = True else: previous_is_cased = False s.append(c) return ''.join(s) Example: >>> s = ' aBc dEf ' >>> import string >>> string.capwords(s) 'Abc Def' >>> s.title() ' Abc Def ' >>> s ' aBc dEf ' >>> String(s).title() ' Abc Def ' >>> String(s).title() == s.title() True
