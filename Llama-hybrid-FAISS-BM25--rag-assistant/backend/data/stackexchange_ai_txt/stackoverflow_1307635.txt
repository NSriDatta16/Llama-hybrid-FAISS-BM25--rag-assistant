[site]: stackoverflow
[post_id]: 1307635
[parent_id]: 1307527
[tags]: 
It kind of depends on what you expect the distribution of (oldBuffer ^ newBuffer) will be. If it's totally random and the full range of 32 bits, then you have an average of 16 loops. One possible solution is to make a table like this int lookup[255][8] = { { -1, -1, -1, -1, -1, -1, -1, -1 }, // 0 has no bits set { 0, -1, -1, -1, -1, -1, -1, -1 }, // 1 has only the 0th bit set { 1, -1, -1, -1, -1, -1, -1, -1 }, // 2 has only the 1st bit set { 0, 1, -1, -1, -1, -1, -1, -1 }, // 3 has the 0th, 1st bit set { 2, -1, -1, -1, -1, -1, -1, -1 }, // 4 has only the 2nd bit set ... { 0, 1, 2, 3, 4, 5, 6, 7 }, // 255 has all bits set } With this you have to loop 4 times (1 for each byte) and then 1 time for each bit that is set (average of 4) -- Hey, that's 16. But if the number of set bits is low (averages a lot less than half the 32 bits), then the table lookup will go down. Unfortunately, table lookup adds a multiply and add each time you use it, so it's not necessarily good. You have to test it. In other words, it finds the set bits in constant time, but the constant might be larger than the loop. It depends on how many set bits you expect to have.
