[site]: stackoverflow
[post_id]: 1842946
[parent_id]: 1842504
[tags]: 
This is a direct copy of DigitalRoss solution but handling the edge cases of more than two nils in a row. I'm sure DigitalRoss would be able to do this more elegantly, and without the non-idomatic ruby while loop but this works for all the tested cases def un_nil(arr) return arr if arr.compact.size == 0 || ! arr.include?(nil) while arr.include?(nil) t = nil p = lambda do |e| if e.nil? e,t = t,e else t = e end e end t = nil; r = arr.map(&p) t = nil; r = r.reverse.map(&p).reverse arr = r end arr end tests = [ [1,2,3,4,5], [1,2,3,nil,5], [nil,2,3,4,5], [1,nil,nil,4,5], [1,nil,nil,nil,5], [nil,nil,3,nil,nil], [nil,nil,nil,nil,nil] ] tests.each {|a| puts "Array #{a.inspect} became #{un_nil(a).inspect}" } This produces the following output Array [1, 2, 3, 4, 5] became [1, 2, 3, 4, 5] Array [1, 2, 3, nil, 5] became [1, 2, 3, 3, 5] Array [nil, 2, 3, 4, 5] became [2, 2, 3, 4, 5] Array [1, nil, nil, 4, 5] became [1, 1, 4, 4, 5] Array [1, nil, nil, nil, 5] became [1, 1, 1, 5, 5] Array [nil, nil, 3, nil, nil] became [3, 3, 3, 3, 3] Array [nil, nil, nil, nil, nil] became [nil, nil, nil, nil, nil]
