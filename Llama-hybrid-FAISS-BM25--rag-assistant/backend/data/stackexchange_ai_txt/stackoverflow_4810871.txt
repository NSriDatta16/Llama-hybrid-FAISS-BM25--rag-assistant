[site]: stackoverflow
[post_id]: 4810871
[parent_id]: 
[tags]: 
Can main classes access child class methods

If I have: class main { //hello } class child1 { function love($v) { } } class child1 { function hate($v) { } } function __autoload($file) { include_once($file . '.php'); } Is there a way I can set this up so that I can do $main = new main(); $main->hate(); $main->love(); and still keep them as seperate classes, and use the autoloader for the child classes? I think even if the child classes extend the main class, that I can't access the child methods from the parent class. Is that correct? If so, is there something like a reverse extends which injects the child class properties/methods into the main class? Update 1 Okay, so it looks like there's nothing straight-up built in to php to acheive this (Thanks everyone for the answers). How about I write up my goal and maybe you or someone you know can suggest a way to acheive this? I would like to have one main class. I then have a set of subclasses which operate like grouped function libraries. Each of these subclasses is __autoload ed when needed to acheive an end. So for example, I have a subclass of file upload & processing functions, a subclass of database interaction functions, a subclass of xml processing functions, and so on. I want to use this like: call the main class at the top of every script $main = new main(); . Then, later on, an image processing method from a child class (which has not been loaded) is needed, so I call $main->methodFromChildClass(); which will cause that child class to be autoloaded and the method used. I am hoping in this way to optimize which files are loaded, and keep things well organized. I'm fairly new to oop. Is there a way to achieve this type of organization now?
