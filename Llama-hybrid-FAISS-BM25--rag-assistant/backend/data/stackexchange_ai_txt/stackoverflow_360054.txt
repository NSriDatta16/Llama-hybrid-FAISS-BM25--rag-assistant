[site]: stackoverflow
[post_id]: 360054
[parent_id]: 359829
[tags]: 
I've also been playing with autoload for quite some time, and I ended up implementing some sort of namespaced autoloader (yes, It works also for PHP5.2). The strategy is quite simple: First I have a singleton class (loader) which has a call that simulates import . This call takes one parameter (the full class name to load) and internally calculates the file name it was called from (using debug_backtrace() ). The call stores this information in an associative array to use it later (using the calling file as the key, and a list of imported classes for each key). Typical code looks like this: When autoload is fired, the full class name that was stored in the array gets transformed to a real filesystem location (double colons are replaced with directory separators), and the resulting filename is included. I know that It's not exactly what you were asking for, but it may solve the directory traversal issue, as the loader directly knows where the file exactly is (with the added feature that you could have your classes organized in directories, with no apparent performance penalty). I could provide you some working examples, but I'm too shy to show my crappy code to the public. Hope the above explanation was useful...
