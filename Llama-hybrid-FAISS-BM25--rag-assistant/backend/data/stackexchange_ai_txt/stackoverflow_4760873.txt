[site]: stackoverflow
[post_id]: 4760873
[parent_id]: 4760734
[tags]: 
I don't know how often you are going to run this or how many different varitions you need, but I'm not fond of leaving nextValue floating around in space. You could do something like this, which would give you the availability to create multiple different 'queues' if you will. It sounds like you only want to find that item once, and once you do you never want to search it again. This should do just that, and it works by caching the selector. If you are changing the DOM between calls, use one of the other answers. nameThisFunction = function(s) { var self = this; this.selector = $(s); return function(searchFor) { self.selector.each(function(i) { if (/*Do your comparision to searchFor*/) { // Do what you want self.selector.splice(i, 1); return false; } }); } }; var thisQueue = new nameThisFunction('#someElemId .someClass'); thisQueue('Search for something here'); Here's an example fiddle: http://jsfiddle.net/robert/RCfeJ/
