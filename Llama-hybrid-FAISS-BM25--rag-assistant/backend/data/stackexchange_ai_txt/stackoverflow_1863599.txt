[site]: stackoverflow
[post_id]: 1863599
[parent_id]: 1861853
[tags]: 
Since this is straight C, it might be fun to revisit how strings are stored and terminated. Since you have one terminating character for each section, you can just make it into a true terminator ('\0') and leave the strings in place: #include #include #include int main(int argc, char **argv) { char *s1,*s2,*s3, *test = "foo$bar@baz"; char *buf=(char *)malloc(100); char *p,c; strcpy(buf, test); s1 = p = buf; while(c = *p) { if (c == '$') { *p = '\0'; s2 = p+1; } if (c == '@') { *p = '\0'; s3 = p+1; } p++; } printf("s1 = %s\n",s1); printf("s2 = %s\n",s2); printf("s3 = %s\n",s3); } I wouldn't do this in production code, in this day and age. But way back when, doing one pass on the loop, and one copy for storage, would have been considered a big win.
