[site]: stackoverflow
[post_id]: 2536759
[parent_id]: 2534511
[tags]: 
@UncleBens: did not want to edit your post, here is an example of code (hopefully ripe for copy/pasting), put it in your post and comment on this answer so that I can delete it :) template class HasPrint1 { public: struct type { enum { value = ( sizeof(dummy((T*)0)) == sizeof(yes_t) ) }; }; typedef char yes_t; struct no_t { yes_t[2] m; }; template static yes_t dummy(C*, size_t = sizeof(&C::print1)); static no_t dummy(...); }; // same for HasPrint2 template boost::enable_if > Print(const T& t) { t.print1(); } template boost::enable_if > Print(const T& t) { t.print2(); } template boost::disable_if , HasPrint2 > > Print(const T& t) { std::cout I took the liberty to add a disable_if option to show the similarity with a if / else if / else block. I'd be glad for some reviews.
