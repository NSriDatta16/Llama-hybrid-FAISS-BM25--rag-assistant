[site]: stackoverflow
[post_id]: 261526
[parent_id]: 261254
[tags]: 
The problem with your problem is that your library is not a library, at least not in a strict sense of the expression. Your "library" is better described as a project that happens to be shared by the teams working on the different applications that rely on that core. In this context, the biggest issue is not the subversion technique you may choose to use, but the way you organize your team in order to achieve a useful collaboration on that core component. And the kind of problems that may arise are at least two. First, as the different applications may need different behaviors from your core, if they do not coordinate well, a perfectly valid commit from one team will break the other ones (continuous integration should help here). But the second problem is harder to solve even with good inter-team communication, and it's related to the release management. If the applications depending on this core are released at different points in time, you will have a hard time getting a stable core that is good enough for the release of one the apps while not halting the development of the rest. My suggestion, have somebody dedicated to look after the core library. Use a branch of it in every project and let the applications developers to commit there while ensuring that they discuss the changes with everybody, specially the overseer of the lib. And finally, make this library supervisor be in charge of coordinating the merges of the changes made by the different teams into the trunk of the library, thus generating stable, tested releases that will be used by the stable releases of your applications. And after every release of the core, spawn the next generation of branches into the rest of the projects. It sounds like a lot of work compared with just defining an external and let everybody commit there. But actually, there is no point in hiding the fact that you must put some effort in keeping your core library coherent. If you don't do it upfront it will hunt you later.
