[site]: stackoverflow
[post_id]: 2711259
[parent_id]: 2711235
[tags]: 
It sounds as though at some point, you have a reference to the link the user clicked (either because you have a click handler on it or because you're using event delegation and finding it after a click on the table). Starting with a reference to that link, you can use Prototype's DOM traversal stuff to find the second table cell: Edit Based on your response to rahul, I would change your link onclick to: onclick="handleLinkClick(this); return false;" ...and this would be handleLinkClick : function handleLinkClick(link) { // Original code (mostly unchanged) Element.hide('currentdiv'); new Ajax.Updater('someajax', 'ajax.html', { asynchronous:true, evalScripts:true, onComplete: function(request) { new Effect.Appear("newdiv",{}); window.scrollTo(0,0); // New code starts here // Extend the link element link = $(link); // Find the row var row = link.up('tr'); // Find the second column var cell = row.down('td').next('td'); // Change the cell's "class" and "value" -- I've had to guess a bit at // what you want to do here if (cell.hasClassName("true")) { cell.removeClassName("true").addClassName("false"); cell.update("No"); } else { cell.removeClassName("false").addClassName("true"); cell.update("Yes"); } // End of new code }, parameters:'authenticity_token=' + encodeURIComponent('SYWsdBTWlz17u9HmPXA2R9WmBfZn67g/IAMGyhHEwXw=') }); } That uses Element#up , Element#next , Element#hasClassName , Element#addClassName , Element#removeClassName , and Element#update ; docs for them here . Optional things to consider: The above is fragile in that if you change the location of that cell (make it the third column rather than the second), it fails. You might use a marker class to find it. Rather than an onclick attribute, you could use Element#observe . You can use event delegation to have just one handler on the table, rather than a handler on each link. But the above should work.
