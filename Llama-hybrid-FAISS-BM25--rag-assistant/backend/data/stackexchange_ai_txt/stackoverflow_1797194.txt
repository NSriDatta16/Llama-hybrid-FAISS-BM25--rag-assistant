[site]: stackoverflow
[post_id]: 1797194
[parent_id]: 
[tags]: 
How do you solve "unstructured" navigation in PHP?

I have a large, PHP-based CMS that manages web pages. All items are organized in a tree structure. When I edit an item, the "back" button usually points to its parent item. So, the usual workflow is navigating through the tree. Now every now and then, the need arises for a workflow that "jumps" to other items without regard for the structure. For example, when a user is editing a web page, they may want to open the template the page is attached to (another item in a completely different branch), make a change there, and when clicking "save" expect to come back to the page they were editing. At the moment, I solve this using domain.com/admin/template/edit?from=/frontpage/edit where the "from" variable determines the target URLs of the "save" and "cancel" buttons. This works up to a certain point when the path becomes too long and complex. For example, what if the user edits a page opens the attached template previews that template in the front-end view and then expects to be seamlessly taken back to the page they were editing? Right now, the "history" ends at the last item so that when the user returns from the front-end view, the link to the original page is lost, and they have to search it by hand. Another problem that can happen quickly is that the GET URL containing all the "from" values becomes too long, or totally chaotic: domain.com/admin/template/edit?from=/frontpage/edit&from=/somepage/edit &from=/template/preview&/from=template/edit&/from=template_preview ... (you get the drift) I have solved this elegantly by opening separate windows in the past, but I really want to implement a seamless one-window workflow that works universally, mainly because multiple windows tend to confuse users. How do you solve this? Have you implemented a robust "unstructured" navigation that works well with multiple windows open (=one user doing multiple different things with different navigation paths)? How do you go about this on the user interface side? The best approach I can think of is passing on a "from" value that points to a temporary record in a database or session. That record contains all the information about the current path, and can thus always provide the right "back to page x" value. What I would like to hear most is experiences from people who have successfully implemented this, and how they did it.
