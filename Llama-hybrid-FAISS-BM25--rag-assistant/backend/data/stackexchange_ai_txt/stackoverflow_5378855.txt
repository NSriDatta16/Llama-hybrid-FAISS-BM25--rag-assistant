[site]: stackoverflow
[post_id]: 5378855
[parent_id]: 5375140
[tags]: 
I've done something similar where I actually just wrote the contents of my array out to a PLIST file and steered clear of the keyed archiver. You can't use this approach if you have custom objects in your array. I believe your array (or dictionary) contents can only be of type nsstring, nsnumber, nsdata, nsarray, nsdate and nsdictionary (there could be more?!?). I have a singleton that controls loading and writing the data from/to local storage. It also contains the single array object that I manipulate from my various view controllers. Within init, I load my array property (deep mutable copy is a category method I've built for nssarray): - (void) loadYourArray { NSArray *tempArray = [NSArray arrayWithContentsOfFile:[Utils getFileStorageLocation]]; if (tempArray == nil) { yourArray = [[NSMutableArray alloc] init]; } else { yourArray = [[NSArray deepMutableCopy:tempArray] retain]; }} when I'm ready to save my data, I simply call a persist method: - (void)persistYourArray:(BOOL)broadcast { [yourArray writeToFile:[Utils getFileStorageLocation] atomically:YES]; if (broadcast) { // notify some peeps }}
