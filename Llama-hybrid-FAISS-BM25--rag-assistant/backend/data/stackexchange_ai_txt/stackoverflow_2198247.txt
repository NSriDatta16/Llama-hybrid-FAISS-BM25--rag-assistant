[site]: stackoverflow
[post_id]: 2198247
[parent_id]: 2196993
[tags]: 
But later when I checked the git graph, even if I followed the same workflow, all the chances were happening on the "master". No tree lines diverging and converging! Well... I do see some of your branches and merges. You will find in this page all the possible merge scenarios (compiled at the time - late 2007 - by now SO contributor : Jakub Narębski ) You could be in a fast-forward case, which would explain why your merges will make all your commits appear to master once they are done: 2/ Fast forward case; there are no commits A, B, C, and we start from the following situation: 1---2---3 2.1/ " git merge branch " 1---2---3 /----- trunk Fast forward results in simply moving the head of trunk. It does not create a commit, hence: 2.2/ " git merge --no-commit branch " Like in 2.1, because fast-forwarding does not create a commit. So if you did not commit on master since you branched out, and then do a merge on master, all you do is resetting master HEAD... Another cause for branches to not be displayed is the "to-do list effect" described on the presentation page of the GitHub Network Graph visualizer (which is the "git graph" you are referring to here) But you are seeing each commit only once. Let that sink in for a second. I find that many coders are so used to a centralized SCM that they miss the fact that our Graph Visualizer is actually showing and connecting disparate repositories. If I draw the graph with myself as root, then the graph shows a sort of to-do list of code that I haven’t pulled into my repo yet. When I want to catch up on what the community has been doing in their forks of my repo, I can hit up the graph and see immediately what others have been up to. If I were to pull in Bertg’s changes, the next time I see the graph, Bertg will no longer be shown at all because he will no longer have any commits that I do not. Keep thinking to-do list and you’ll understand the graph. So if that is true for merges from other repos branches (i.e. you do not see those branches anymore once they are merged), that may be true for merges from your own repo branches: once merged, you do not see them anymore in your graph. But I do, since: I am not the owner of the project. I may want to pull in my repo changes from any of your branches.
