[site]: stackoverflow
[post_id]: 1079894
[parent_id]: 717997
[tags]: 
I also found myself overriding the ToString() method a lot. Especially during development. Although code generators help, it becomes quite annoying to have to change it every time you rename a class member. Actually I got so annoyed, I tried to find a remedy, This is what I came up with: Creates a string of this format: MemberType MemberName=MemberValue Usage: string testMember = "testing"; Console.WriteLine(Member.State(() => testMember)); Writes ' string testMember="testing" ' to the Console. Here it is: public static class Member { public static string State (Func expr) { var member = ExtractMemberFromLambdaExpression(expr); Type memberType = GetTypeOfMember(member); string contents = ExtractContentsFromLambdaExpression(expr); return string.Format("{0} {1}={2}",memberType.Name, member.Name, contents); } static string ExtractContentsFromLambdaExpression (Func expr) { if (expr() == null) { return "NULL"; } string contents = string.Empty; if (expr().GetType().IsArray) { foreach (var item in (expr() as Array)) { contents += item.ToStringNullSafe() + ", "; } contents = contents.Trim().TrimEnd(','); } else { contents = expr().ToString(); } return contents; } static MemberInfo ExtractMemberFromLambdaExpression (Func expr) { // get IL code behind the delegate var il = expr.Method.GetMethodBody().GetILAsByteArray(); // bytes 2-6 represent the member handle var memberHandle = BitConverter.ToInt32(il, 2); // resolve the handle return expr.Target.GetType().Module.ResolveMember(memberHandle); } static Type GetTypeOfMember(MemberInfo member) { Type memberType; if (member.MemberType == MemberTypes.Field) { memberType = GetFieldType(member as FieldInfo); } else if (member.MemberType == MemberTypes.Property) { memberType = GetPropertyType(member as PropertyInfo); } else { memberType = typeof(object); } return memberType; } static Type GetFieldType(FieldInfo fieldInfo) { return fieldInfo.FieldType; } static Type GetPropertyType(PropertyInfo propertyInfo) { return propertyInfo.PropertyType; } } A more thorough explanation and how to use it can be found on my blog about the: Generic ToString() Method
