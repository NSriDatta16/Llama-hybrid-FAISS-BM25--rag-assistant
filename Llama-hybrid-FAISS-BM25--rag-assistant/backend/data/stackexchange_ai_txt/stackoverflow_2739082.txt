[site]: stackoverflow
[post_id]: 2739082
[parent_id]: 2738033
[tags]: 
Okay, there are two issues here. The first problem is turning a list of numbers into a rowset. There are a number of different ways of doing this, depending on how you get the numbers into the query. In the following example I use a function which turns a comma-separated string into a nested table, which can be treated as a regular table with the TABLE() function. This is not strictly relevant to the question you pose. If you're interested in this bit of the implementation see my post in this other thread . The second part of the problem is identifying the missing Orders for each Customer. The obvious approaches - such as using NOT IN with a sub-query - won't work, because the Orders for Customer 1234 match all the Order IDs. We need to do is fill in the missing orders for each Customer. This can be done by using a LEFT OUTER JOIN combined with the PARTITION BY clause. It is then a simple matter to filter out the hits by embedding the LOJ query in an outer SELECT, like this: SQL> select customer_id 2 , missing_order_id 3 from ( 4 select t42.customer_id 5 , t42.order_id 6 , nos.column_value as missing_order_id 7 from ( select * from table (str_to_number_tokens('1,2,3,4'))) nos 8 left outer join t42 partition by ( t42.customer_id ) 9 on nos.column_value = t42.order_id 10 ) 11 where order_id is null 12 / CUSTOMER_ID MISSING_ORDER_ID ----------- ---------------- 3245 1 3245 2 5436 1 5436 3 SQL>
