[site]: stackoverflow
[post_id]: 354442
[parent_id]: 
[tags]: 
Looking for C++ STL-like vector class but using stack storage

Before I write my own I will ask all y'all. I'm looking for a C++ class that is almost exactly like a STL vector but stores data into an array on the stack. Some kind of STL allocator class would work also, but I am trying to avoid any kind of heap, even static allocated per-thread heaps (although one of those is my second choice). The stack is just more efficient. It needs to be almost a drop in replacement for current code that uses a vector. For what I was about to write myself I was thinking of something like this: char buffer[4096]; stack_vector matches(buffer, sizeof(buffer)); Or the class could have buffer space allocated internally. Then it would look like: stack_vector matches; I was thinking it would throw std::bad_alloc if it runs out of space, although that should not ever happen. Update Using Chromium's stack_container.h works great! The reason I hadn't thought of doing it this way myself is that I have always overlooked the allocator object parameter to the STL collection constructors. I have used the template parameter a few times to do static pools but I'd never seen code or written any that actually used the object parameter. I learned something new. Very cool! The code is a bit messy and for some reason GCC forced me to declare the allocator as an actual item instead of constructing it into vector's allocator parameter. It went from something like this: typedef std::pair comp_list_item; typedef std::vector comp_list_type; comp_list_type match_list; match_list.reserve(32); To this: static const size_t comp_list_alloc_size = 128; typedef std::pair comp_list_item; typedef StackAllocator comp_list_alloc_type; typedef std::vector comp_list_type; comp_list_alloc_type::Source match_list_buffer; comp_list_alloc_type match_list_alloc( &match_list_buffer ); comp_list_type match_list( match_list_alloc ); match_list.reserve( comp_list_alloc_size ); And I have to repeat that whenever I declare a new one. But it works just like I wanted. I noticed that stack_container.h has a StackVector defined and I tried using it. But it doesn't inherit from vector or define the same methods so it wasn't a drop-in replacement. I didn't want to rewrite all the code using the vector so I gave up on it.
