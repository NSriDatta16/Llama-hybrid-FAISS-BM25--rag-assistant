[site]: stackoverflow
[post_id]: 4259838
[parent_id]: 4258229
[tags]: 
Here's what happening with Magento when you rewrite a class. When Magento instantiates a Block class, it uses code something like the following $this->getLayout()->createBlock('adminhtml/widget_grid_column') The createBlock method is a factory. Magento uses the identifier adminhtml/widget_grid_column to lookup which class should be instantiated. By default, that's Mage_Adminhtml_Block_Widget_Grid_Column When you create your rewrite, you're telling Magento Hey. instead of using 'Mage_Adminhtml_Block_Widget_Grid_Column' for a 'adminhtml/widget_grid_column', you should use 'ABT_Background_Block_Widget_Grid_Column' This means that, for any given system, a class may only be rewritten once . In the code you're showing above, you're trying to rewrite the class twice. Only one of your rewrites will win. The quick approach I'd take is to keep all your customizations in a single override class. More generally, I try to avoid using rewrites if at all possible. They're a powerful system, but should be using sparingly. I haven't done much grid customizing, but the general approach I'd try to take would be to change the adminhtml layout to instantiate a new grid class from my custom module that extends an existing grid class, which in turn may use custom column classes. More work up front, but once you've figured it out you can use the technique over and over again, and not worry abou conflicts from a rewrite.
