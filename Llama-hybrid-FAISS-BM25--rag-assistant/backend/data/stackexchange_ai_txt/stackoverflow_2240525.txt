[site]: stackoverflow
[post_id]: 2240525
[parent_id]: 2196994
[tags]: 
What is the problem you are trying to solve? It sounds like you may be headed down a path to a complex solution that could use a simple solution instead. If a user doesn't have permissions to access the page after login, are you wanting non-logged in users to go to one page, while logged in users go to a different page? If that's the case I might be tempted to create another controller for just such scenarios and redirect to that controller anywhere the user doesn't have access. Or if you are using your own base Controller I would put the functionality there. Then the controller could present the desired view. For example if a non-logged in user tries to access a page they could get redirected to a generic error page. If the user is logged in, they could get redirected to a not authorized page. This is very similar to Robert's answer. Here's a basic skeleton for a base controller. public BaseController: Controller { ... // Some code public ActionResult DisplayErrorPage() { // Assumes you have a User object with a IsLoggedIn property if (User.IsLoggedIn()) return View("NotAuthorized"); // Redirect user to login page return RedirectToAction("Logon", "Account"); } } Then in lets say a AdminController (that inherits from BaseController) action public ActionResult HighlyRestrictedAction() { // Assumes there is a User object with a HasAccess property if (User.HasAccess("HighlyRestrictedAction") == false) return DisplayErrorPage(); // At this point the user is logged in and has permissions ... }
