[site]: stackoverflow
[post_id]: 4088405
[parent_id]: 
[tags]: 
Pros and cons of inheritance modeling in Javascript?

I realize that Javascript does not have classes and is not built to have classical OOP inheritance. But I find such patterns so useful that I wanted to build a simple way to model that kind of behavior, ideally while leveraging the best parts of Javascript's flexibility. What are the pros and cons of the following approach? I have the following functions in my custom library: function inherit(superClass, args, instance) { var subClass = inherit.caller; var o = new superClass(args); for(p in o) { if(o.hasOwnProperty(p)) init(instance, p, o[p]); else init(subClass.prototype, p, o[p]); } } function isUndefined(x) {var u; return x === u;} // sets p to value only if o[p] is undefined function init(o, p, value) {if(isUndefined(o[p])) o[p] = value;} This setup requires two conventions: Functions that are modelling classes must take one argument: an object with named properties Functions wishing to "inherit" from another must call the inherit function. Here's an example of what you get as a result (paste into the Firebug command line, along with the library functions, to see it in action): function SuperClass(args) { this.x = args.x; } SuperClass.prototype.p = 'SuperClass prototype property p'; function SubClass(args) { inherit(SuperClass, args, this); this.y = args.y; } SubClass.prototype.q = 'SubClass prototype property q'; var o = new SubClass({ x: 'x set in SuperClass', y: 'y set in SubClass' }); console.dir(o); // correctly has properties x, y, p, and q ['x', 'y', 'p', 'q'].forEach(function(prop) { // true for x and y, false for p and q console.log("o.hasOwnProperty('" + prop + "')", o.hasOwnProperty(prop)); }); console.log("o instanceof SubClass: ", o instanceof SubClass); // true console.log("o instanceof SuperClass: ", o instanceof SuperClass); // false I am aware of the following cons: Modifying the super class prototype will not affect your instance object, as you might expect from prototype-style inheritance The instance object will not register as instanceof the super class (although it will still quack like one) The argument conventions might be annoying and pros: Requires only one function call (easy to implement) Differentiates between prototype properties and instance properties Arguments passed to the sub class are also passed to the super class Instance properties set by the super class constructor are immediately available in the sub class constructor Multiple inheritance is easy, just call inherit multiple times in your sub class Doesn't over-write existing properties of the sub class Pros 3 - 6 specifically make this method more useful for me than the SubClass.prototype = new SuperClass() method. Other methods, like dojo's class modelling, are much more complicated, I think unnecessarily so. So, tell me what you think. And if someone else has done this before, please let me know, I haven't intended to duplicate any ideas.
