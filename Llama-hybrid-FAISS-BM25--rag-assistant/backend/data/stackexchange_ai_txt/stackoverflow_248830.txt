[site]: stackoverflow
[post_id]: 248830
[parent_id]: 
[tags]: 
Python: using a recursive algorithm as a generator

Recently I wrote a function to generate certain sequences with nontrivial constraints. The problem came with a natural recursive solution. Now it happens that, even for relatively small input, the sequences are several thousands, thus I would prefer to use my algorithm as a generator instead of using it to fill a list with all the sequences. Here is an example. Suppose we want to compute all the permutations of a string with a recursive function. The following naive algorithm takes an extra argument 'storage' and appends a permutation to it whenever it finds one: def getPermutations(string, storage, prefix=""): if len(string) == 1: storage.append(prefix + string) # (Please don't care about inefficiency, this is only an example.) Now I want to turn my function into a generator, i.e. to yield a permutation instead of appending it to the storage list: def getPermutations(string, prefix=""): if len(string) == 1: yield prefix + string # This code does not work (the function behaves like an empty generator). Am I missing something? Is there a way to turn the above recursive algorithm into a generator without replacing it with an iterative one ?
