[site]: stackoverflow
[post_id]: 4372245
[parent_id]: 4372202
[tags]: 
If you really want to "unit" test, you should test the behavior of your class B AND the behavior of your class A, mocking the call to the class B method. That's a tough conversation between mock lovers and others (Martin Fowler I think is not a "mocker"). Anyway. You should stop thinking about 100% coverage. You should think about: Why am i testing? How am i testing? Here, i'd definitely go for 2 tests: One test for the B class into the b class test file to be sure the B method is well implemented, with all the side effects, side values etc. one test for the A class mocking the class B What is a mock? To stay VERY simple: A mock is a portion of code in your test which is gonna say: when the B class method is called, always return this value: "+++" . By doing this, you allow yourself having a maintanable and modulable test suite. In java, I love mockito : http://mockito.org/ Although one of my colleagues is lead maintainer for easymock: http://easymock.org/ Hope this helps. Ask me if you need further help. EDIT SOME EXAMPLE With Java and mockito: public class aUTest { protected A a; @Mock protected B b; @Before public void setUp(){ MockitoAnnotations.initMocks(this); a = new A(); ReflectionTestUtils.setField(a, "b", b); } @Test public void test_A_method_should_not_throw_exception() when(b. execute()).thenReturn(true); //just an example of a return value from b. execute() Boolean result = a.testHello(); // Assert Assert.assertEquals(true, result); }
