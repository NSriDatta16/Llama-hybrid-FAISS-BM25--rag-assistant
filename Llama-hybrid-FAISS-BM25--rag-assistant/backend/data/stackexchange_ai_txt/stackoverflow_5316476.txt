[site]: stackoverflow
[post_id]: 5316476
[parent_id]: 
[tags]: 
General Exception handling is a programming language construct or computer hardware mechanism designed to handle the occurrence of exceptions, special conditions that change the normal flow of program execution. When such conditions occur the programmer can decide to "throw" or "raise" an exception. The thrown exception will propagate up the stack until "caught" by an appropriate language construct, which usually contains code that deals with the situation. Unhandled exceptions usually lead to abnormal termination. Programming languages differ considerably in their support for exception handling (as distinct from error checking, which is normal program flow that checks for contingencies such as unsuccessful termination of invoked operations). In some programming languages, there are functions that cannot be safely called on invalid input data, or functions that return values which cannot be distinguished from exceptions. For example, in c the atoi (ASCII to integer conversion) function may return 0 (zero) for any input that cannot be parsed into a valid value. In such languages, the programmer must either perform error checking (possibly through some auxiliary global variable such as C's errno ) or input validation (perhaps using regular expressions) or both. Exception handling is built upon three keywords: try, catch, and throw. try: A try block identifies a block of code for which particular exceptions will be activated. It is followed by one or more catch blocks. throw: A program throws an exception when a problem shows up. This is done using the throw keyword. catch: A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The catch keyword indicates the catching of an exception. A method catches an exception using a combination of the try and catch keywords. A try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as protected code, and the syntax for using try/catch looks like the following: try { // protected code } catch( ExceptionName e1 ) { // catch block } catch( ExceptionName e2 ) { // catch block } catch( ExceptionName eN ) { // catch block } You can provide multiple catch statements to catch different types of exceptions in case your try block raises more than one type of exception. Exception safety Exception safety , as formalised by David Abrahams, guarantees a set of contract guidelines that an interface (or operation) offers w.r.t. the state of the program if an exception occurs. No-throw guarantee: the operation is guaranteed not to fail Strong exception safety: if the operation fails, the state will be as it was prior to the failure (rollback semantics) Basic exception safety: no leaks will occur, and data is left in a valid state (but possibly changed) No exception safety: no guarantees are made. Automated exception handling Automated exception handling is a computing term referring to the computerized handling of errors. Runtime engines such as those for the Java language or Microsoft .NET lend themselves to an automated mode of exception or error handling. In these environments, software errors do not "crash" the program or operating system but rather generate exceptions. Recent advances in these runtime engines enable specialized runtime-engine add-on products to provide automated exception handling that is independent of the source code and provides root-cause information for every exception of interest. Tag Usage Use this tag for Questions about the technical process of how various languages, runtimes, or platforms handle (or do not handle) specific exceptions. Questions about implementing custom automated exception handling capabilities. Do not use this tag for Debugging requests containing an exception as part of an MCVE , but are not otherwise about exceptions. These are questions that contain exceptions, but are not about them. One of our suggested edit rejections contains the text "Tags should help to describe what the question is about , not just what it contains ." References Exception handling syntax Further reading Vexing exceptions blog post on MSDN by Eric Lippert, 2008 Cleaner, more elegant, and harder to recognize blog post on MSDN by Raymond Chen, 2005 Exception-Safe Coding in C++ web page by Jon Kalb
