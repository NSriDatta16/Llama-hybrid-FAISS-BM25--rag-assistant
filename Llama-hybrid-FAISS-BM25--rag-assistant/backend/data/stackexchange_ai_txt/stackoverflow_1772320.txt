[site]: stackoverflow
[post_id]: 1772320
[parent_id]: 1772119
[tags]: 
#define IMPLIES(x, y) (!(x) || (y)) #define COMPARE(x, y) (((x) > (y)) - ((x) (b)) SWAP((a), (b), T); } while (0) #define SET(d, n, v) do{ size_t i_, n_; for (n_ = (n), i_ = 0; n_ > 0; --n_, ++i_) (d)[i_] = (v); } while(0) #define ZERO(d, n) SET(d, n, 0) And, of course, various MIN, MAX, ABS etc. Note, BTW, that none of the above can be implemented by a function in C. P.S. I would probably single out the above IMPLIES macro as one of the most useful ones. Its main purpose is to facilitate writing of more elegant and readable assertions, as in void foo(int array[], int n) { assert(IMPLIES(n > 0, array != NULL)); ...
