[site]: stackoverflow
[post_id]: 5112127
[parent_id]: 5036050
[tags]: 
Thanks for your reply. This exactly answers my question. In mean time I was coming up with solution using ExpressionVisitor. It's not complete but I am giving approach I took here - public class ExpressionExpander : ExpressionVisitor { private Dictionary parameterMap = new Dictionary (); protected override Expression VisitParameter(ParameterExpression node) { if (parameterMap.ContainsKey(node)) return parameterMap[node]; return node; } protected override Expression VisitMember(MemberExpression node) { var newObj = Visit(node.Expression); if (NeedsInlineExpansion(newObj.Type, node.Member.Name)) { LambdaExpression exp = GetPropertyTransform(); if (parameterMap.ContainsKey(node.Expression)) parameterMap.Add(exp.Parameters[0], node.Expression); var visitedExp = Visit(exp.Body); var memExp = (MemberExpression)visitedExp; parameterMap.Add(node, memExp); return memExp; } else { var newMember = newObj.Type.GetMember(node.Member.Name).First(); var newMemberAccessExpr = Expression.MakeMemberAccess(newObj, newMember); parameterMap.Add(node, newMemberAccessExpr); return newMemberAccessExpr; } } private bool NeedsInlineExpansion(Type type, string coreMemberName) { // Figure out way to determine if the property needs to be flattened out... // may be using attribute on Property } private LambdaExpression GetPropertyTransform() { // this is hardcoded right now, but represents some mechanism of getting a lambda // returned for property in question... Expression > exp = z => z.Organization.Name; var lambda = (LambdaExpression)exp; return lambda; } } And on caller would look like below - Expression > expr1 = z => z.Show.OrgName == "xyz"; ExpressionExpander expander = new ExpressionExpander(); var inlineExpanded = expander.Visit(expr1); Thanks, Anand.
