[site]: stackoverflow
[post_id]: 3515681
[parent_id]: 3515219
[tags]: 
An important thing to note about C compared with other languages is that in when multiple declarations are combined in one statement, the asterisk applies to individual items, not the set as a whole. For example: int* foo,bar; creates an int-pointer called foo, and an int called bar. I always peg the asterisk to the variable, and I avoid mixing pointers and non-pointers in one statement thus: int *foo; int *ptr1,*ptr2,*ptr3; int bar,boz,baz; It's also important to note that storage-class qualifiers like 'const' and 'volatile' may not always bind as one would expect. The statement volatile int *foo; does not mean that 'foo' is a volatile, but rather that what 'foo' points to is a volatile. If foo itself is the 'volatile' thing, one must write "int * volatile foo;"
