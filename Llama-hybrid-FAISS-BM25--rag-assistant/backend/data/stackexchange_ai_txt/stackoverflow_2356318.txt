[site]: stackoverflow
[post_id]: 2356318
[parent_id]: 
[tags]: 
Delphi Enterprise: how can I apply the Visitor Pattern without circular references?

With Delphi 2009 Enterprise I created code for the GoF Visitor Pattern in the model view, and separated the code in two units: one for the domain model classes, one for the visitor (because I might need other units for different visitor implementations, everything in one unit? ' Big ball of mud ' ahead!). unit VisitorUnit; interface uses ConcreteElementUnit; type IVisitor = interface; IElement = interface procedure Accept(AVisitor :IVisitor); end; IVisitor = interface procedure VisitTConcreteElement(AElement :TConcreteElement); end; TConcreteVisitor = class(TInterfacedObject, IVisitor) public procedure VisitTConcreteElement(AElement :TConcreteElement); end; implementation procedure TConcreteVisitor.VisitTConcreteElement(AElement :TConcreteElement); begin { provide implementation here } end; end. and the second unit for the business model classes unit ConcreteElementUnit; interface uses VisitorUnit; type TConcreteElement = class(TInterfacedObject, IElement) public procedure Accept(AVisitor :IVisitor); virtual; end; Class1 = class(TConcreteElement) public procedure Accept(AVisitor :IVisitor); end; implementation { Class1 } procedure Class1.Accept(AVisitor: IVisitor); begin AVisitor.VisitTConcreteElement(Self); end; end. See the problem? A circular unit reference. Is there an elegant solution? I guess it requires "n+1" additional units with base interface / base class definitions to avoid the CR problem, and tricks like hard casts?
