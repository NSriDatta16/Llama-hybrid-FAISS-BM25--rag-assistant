[site]: stackoverflow
[post_id]: 3813940
[parent_id]: 
[tags]: 
Linq to SQL concurrency problem

Hallo, I have web service that has multiple methods that can be called. Each time one of these methods is called I am logging the call to a statistics database so we know how many times each method is called each month and the average process time. Each time I log statistic data I first check the database to see if that method for the current month already exists, if not the row is created and added. If it already exists I update the needed columns to the database. My problem is that sometimes when I update a row I get the "Row not found or changed" exception and yes I know it is because the row has been modified since I read it. To solve this I have tried using the following without success: Use using around my datacontext. Use using around a TransactionScope. Use a mutex, this doesn’t work because the web service is (not sure I am calling it the right think) replicated out on different PC for performance but still using the same database. Resolve concurrency conflict in the exception, this doesn’t work because I need to get the new database value and add a value to it. Below I have added the code used to log the statistics data. Any help would be appreciated very much. public class StatisticsGateway : IStatisticsGateway { #region member variables private StatisticsDataContext db; #endregion #region Singleton [ThreadStatic] private static IStatisticsGateway instance; [ThreadStatic] private static DateTime lastEntryTime = DateTime.MinValue; public static IStatisticsGateway Instance { get { if (!lastEntryTime.Equals(OperationState.EntryTime) || instance == null) { instance = new StatisticsGateway(); lastEntryTime = OperationState.EntryTime; } return instance; } } #endregion #region constructor / initialize private StatisticsGateway() { var configurationAppSettings = new System.Configuration.AppSettingsReader(); var connectionString = ((string)(configurationAppSettings.GetValue("sqlConnection1.ConnectionString", typeof(string)))); db = new StatisticsDataContext(connectionString); } #endregion #region IStatisticsGateway members public void AddStatisticRecord(StatisticRecord record) { using (db) { var existing = db.Statistics.SingleOrDefault(p => p.MethodName == record.MethodName && p.CountryID == record.CountryID && p.TokenType == record.TokenType && p.Year == record.Year && p.Month == record.Month); if (existing == null) { //Add new row this.AddNewRecord(record); return; } //Update existing.Count += record.Count; existing.TotalTimeValue += record.TotalTimeValue; db.SubmitChanges(); } }
