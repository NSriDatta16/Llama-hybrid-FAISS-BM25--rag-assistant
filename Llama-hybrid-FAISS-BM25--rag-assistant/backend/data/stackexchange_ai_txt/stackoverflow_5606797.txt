[site]: stackoverflow
[post_id]: 5606797
[parent_id]: 3683349
[tags]: 
Is this the case even for the MainMenu.xib application? No, the MainMenu nib is owned by NSApplication (that's who loads it). Should this also be the case for the NSWC for the MainMenu.xib window, even though this is opened at startup? No, NSApplication loads the main nib based on your applications file's "NSMainNibFile" property. (It just happens to be pre-set to "MainMenu" in the template Xcode projects.) If you want to change its name then change it there (and rename your nib file). (BTW: This property can also be changed in your target's "Summary" view in Xcode 4.) Should the NSWC of the MainMenu window also be the application delegate, or should this be a different class? The owner of the NSMainNibFile nib is the instance of NSApplication that loads it and by association any delegate of that instance. Neither of these are NSWC sub-classes. In the same vein, should the main NSWC handle files (drag/drop and opening), or should it be passed on to the app delegate, or is that just a matter of taste? There is no "main NSWC" (The app/app-delegate is the controller for the NSMainNibFile). All drag-n-drop operations are handled by NSWindow or NSView sub-classes. I usually use a special NSWindow or NSView sub-class that just passes all drag-n-drop methods thru to the delegate. For example: - (unsigned int) draggingEntered:sender { return [[self delegate] draggingEntered:sender]; } This way I can keep all my window/view code together in their respective controller (as determined by their nib owner). And because the window/view specific code is in the controller (not the NSWindow/NSView subclass) different types of NSWindows/NSViews can all use the same drag-n-drop sub-classes.
