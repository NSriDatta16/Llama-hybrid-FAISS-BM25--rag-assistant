[site]: stackoverflow
[post_id]: 4805420
[parent_id]: 4803464
[tags]: 
Why the @XmlRootElement Annotation is Checked For Spring requires a root element when marshalling the object to XML. JAXB provides two mechanisms to do this: The @XmlRootElement annotation Wrapping the root object in an instance of JAXBElement. Since the object is not wrapped in a JAXBElement Spring is ensuring that the other condition is met. How Generate an @XmlRootElement JAXB will generate an @XmlRootElement annotation for all global elements in an XML schema. The following will cause an @XmlElement: ... When @XmlRootElement is not Generated An @XmlRootElement annotation will not be generated for global types. ... Instead the global element(s) associated with the global types are captured in the ObjectFactory class (annotated with @XmlRegistry) in the form of @XmlElementDecl annotations. These annotations package generated; import javax.xml.bind.JAXBElement; import javax.xml.bind.annotation.XmlElementDecl; import javax.xml.bind.annotation.XmlRegistry; import javax.xml.namespace.QName; @XmlRegistry public class ObjectFactory { private final static QName _Foo_QNAME = new QName("", "foo"); public Foo createFoo() { return new Foo(); } @XmlElementDecl(namespace = "", name = "foo") public JAXBElement createFoo(Foo value) { return new JAXBElement (_Foo_QNAME, Foo.class, null, value); } } The @XmlElementDecl annotation provides similar information as @XmlRootElement and could be used for unmarshal operations. JAX-RS implementations probably do not leverage @XmlElementDecl however since marshal operations would require the object to be wrapped in a JAXBElement object to provide the root element name/namespace.
