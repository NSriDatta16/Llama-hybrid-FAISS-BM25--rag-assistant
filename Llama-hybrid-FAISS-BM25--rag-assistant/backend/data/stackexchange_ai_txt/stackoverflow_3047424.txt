[site]: stackoverflow
[post_id]: 3047424
[parent_id]: 3032097
[tags]: 
I think that whereas you are hoping for 3 levels of class/instance supported by the language, it helps if you actually have just 1, and build everything from there. Static languages typically have 2 levels - the 'class', defined at compile-time, and the 'instance', created from the class at run-time. This makes a lot of sense given that it's practical to know exactly how many classes you want up-front, and usually impractical to know exactly how many instances. Classes become the cookie-cutter and instances are the cookies. But ultimately, set aside the notion of classes and instances being totally different and consider that a class is a Thing that (a) allows you to create new Things and (b) serves as a central reference for how those new Things should act. Those Things in turn could also create new Things, and so on. In languages like C++ and Java, we normally perform (a) by allocating a block of memory with a set of properties defined by the class constructor, and (b) by maintaining some reference back to the class's methods (eg. via a v-table ). But you could just copy an object, including all the method references within it, one of which would be the constructor for that object's 'instances'. This is prototype-based programming and provides a very simple inheritance model in that your 'classes' are just the same as any other object, except that they provide a way to create new objects that count as instances. It just so happens that the world's most popular scripting language - possibly the world's most popular language - gives you prototype inheritance. Javascript is what I am referring to and it's a pretty good choice for embedding in a game, with the benefit of being widely known by developers and being very actively worked on today. There are many tutorials online, but one covering various inheritance approaches is here . It can take a while to get used to, especially if you're coming from a traditional OO background with a clear class/instance division, but it's well worth learning the differences and evaluating the pros and cons for yourself.
