[site]: stackoverflow
[post_id]: 4785045
[parent_id]: 4784637
[tags]: 
1 The minute you have more than one version, you need version control! If you don't have it, you will end up in "ah, version 4.5.1.2 source is in THAT zip-file" and it very quickly gets very tedious. When you choose between version control systems, pick one that easily allow you to: Embed a build-id with your application. Use said build-id to easily get the exact source code corresponding to the build-id. Do bug fixes to said source code. This is commonly available today. Settle for no less. I personally happen to like git, and github, but others like mercurial and bzr. 2 Do not forget the reason for testing. You need to be told when things break, and as soon as possible! Frequently this means that you add a scenario that broke previously and was fixed, and then see if it breaks this time. You often do this in a build server which do the quick tests every time you check into your version system, and the long tests outside working hours. 3 I do not know if you should change stuff in your ant file, but I would encourage you to use an approach where the ant build file and the IDE configuration can be kept somewhat synchronized. I used ant4eclipse to write a build system using Eclipse configurations. This got quite gnarly and I would suggest using an IDE which explicitly knows about ant instead. I don't think this works well in Eclipse.
