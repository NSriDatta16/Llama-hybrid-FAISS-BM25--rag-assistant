[site]: stackoverflow
[post_id]: 5639635
[parent_id]: 5639534
[tags]: 
It's a little more complicated than your sample. I'm going to start with the quick and easy approach, which, while IS quick and easy, is kind of an anti-pattern, but I 'll explain that at the end: IBritishAuto car; switch { case "Vauxhall": { car = new Vauxhall(standardVehicle); break; } case "Jaguar": { car = new Jaguar(standardVehicle); } ...etc. } The reason why this is sub-optimal is that every time you want to add a new car type, you have to modify the original code block, and risk regression. If you're happy with this solution, and don't care, you can stop reading now. Still there? This pattern is called a "conditional dispatcher". There are two main strategies to improve it: refactor to a Command pattern (that's capped because it's a Gang of Four pattern), or a broader implementation of a concept called 'inversion of control'. If you're interested, here are your Google terms: "refactor conditional dispatcher" "inversion of control". Good luck.
