[site]: stackoverflow
[post_id]: 2474616
[parent_id]: 2474588
[tags]: 
Our own solution was as follows: Have a library (let's call it BetaOrProd.pm) The library MUST be included via " use BetaOrProd; " in every script The library MUST be the very first use statement in every script after " use strict; " pragma (and "use warnings" if we use that). Including before any BEGIN blocks. The library has a BEGIN block which contains most of the logic That BEGIN block in the library checks the program's directory path (based off of $0 with absolute path applied) If the directory path starts with /usr/code/beta , the program is deemed to run in BETA location, else in production In either case, /usr/local/lib/perl is un-shifted to the beginning of @INC list If BETA location, /usr/code/beta/lib/perl is un-shifted to the beginning of @INC list after that. If BETA location, a special variable $isBETA (accessible by a accessor method exported from BetaOrProd.pm) is set to "BETA". Anytime a script/library needs to call another script, the path to the called script is calculated based on said accessor to $isBETA variable exported from BetaOrProd.pm Anytime a Perl library needs to be required or used, no special logic is needed - the @INC modified by BetaOrProd.pm takes care of knowing where the modules are to be imported from. If the module is present in BETA location, then the library from BETA location will be used by BETA script, else the library from prod location. The main drawbacks of this approach are: Requirement that every script must have " use BetaOrProd; " as the very first use statement in every script after " use strict; " pragma. Mitigated by the fact that our company requires every deployed piece of code to pass automated validator, which can check for this requirement. Can't BETA test BetaOrProd.pm via /usr/code/beta/lib/perl . D'uh. Mitigated by very thorough unit and integration test of the library
