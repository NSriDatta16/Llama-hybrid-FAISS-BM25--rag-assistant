[site]: stackoverflow
[post_id]: 5414412
[parent_id]: 5361796
[tags]: 
Thanks for the suggestions, definitely useful information! I can't go the class panel approach since I can't edit the wxPython generated code, but it was useful to see how it's done. My solution was to reassign static Id's in my code via SetId() to a number composed of a fixed ID for the particular widget, plus t the number of the iteration that inserted the form. This created a unique id for each widget/form. I used a a dictionary (thanks, Mike), to find the base part of the id, and could append the iteration count to reference them at any time. I used a procedure to simplify finding the widget id so I didn't need to type the 'FindWindow....' bit repeatedly. There are probably more elegant ways, but this works: widgetId = { 'btn' : 6000, 'textctrl' : 6010, 'textlbl' :6020 } def getWidget(self, widget, formNo ): '''Finds widget window via lookup of re-assigned widget ID #'s''' widget = self.FindWindowById(self.widgetId[widget] + formNo) return widget def cloneWX(self): '''Reassign ID at time of cloning''' for formNo in range(self.clones): # Insert the cloned form (a BoxSizer created by wxDesigner) into this copy: self.form = NewDialog( self.panel1, True, set_sizer = False) self.grid.Add(self.form, flag=wx.RIGHT, border=10) # Set initial references: self.textlbl = self.FindWindowById( ID_TEXT ) self.textctrl = self.FindWindowById( ID_TEXTCTRL) self.btn = self.FindWindowById( ID_BUTTON_1 ) # Reset ID based on form number: (Can reference via dictionary instead)) self.btn.SetId(6000 + formNo) self.textctrl.SetId(6010 + formNo) self.textlbl.SetId(6020 + formNo) # Bind events to new ID references: wx.EVT_BUTTON(self, 6000 + formNo, self.OnBtn) def OnBtn(self, event): event_object = event.GetEventObject() # From the event id, extract the form number where this widget appears : formNo = event_object.GetId() - self.widgetId['btn'] textctrl = self.getWidget('textctrl', formNo) textlbl = self.getWidget('textlbl', formNo) textlbl.SetLabel(textctrl.GetValue())
