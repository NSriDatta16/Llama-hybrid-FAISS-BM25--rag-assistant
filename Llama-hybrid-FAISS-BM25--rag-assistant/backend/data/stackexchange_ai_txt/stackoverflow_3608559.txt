[site]: stackoverflow
[post_id]: 3608559
[parent_id]: 
[tags]: 
Creating a compound control (parent of other controls) at runtime

I has a piece of code where I override TStringGrid's inplace editor and the hint window. For this, I created my own string grid based on TStringGrid and use a TEdit for inplace editor and a TPanel for tool tips. In TMyStringGrid.Create constructor I initialize them like this: Constructor TMyStringGrid.Create(); Begin inherited Create(AOwner); MyEditor:= TEdit.Create(Self); MyEditor.Parent := Self; End; In this case the owner (the main form) is freeing the controls. I used this for years and it worked. The thing is that other people argue that the programmer should use NIL instead the Self when instantiation the child controls and later to manually free them in the Destroy destructor. It seems that the second alternative has gigantic advantage over the first one, especially when you dynamically create lots of child controls (not my case). Other problem with my code, they say, is that the child controls may be freed after an Application.ProcessMessages call while the application may still want to use them. So, I should let my code unchanged or should I manually create and free the child controls? There is a any Borland example of compound controls? Delphi 7, Win XP Reference: http://delphi.about.com/od/kbcurt/ss/dynamiccreateno.htm
