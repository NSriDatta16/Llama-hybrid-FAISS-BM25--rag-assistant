[site]: stackoverflow
[post_id]: 2660169
[parent_id]: 2586389
[tags]: 
Interfaces are needed where you expect volatility in your program, points at which you anticipate change, points where your design needs to bend. Implementation is fragile in this sense: it breaks quite easily. This is why subclassing isn't always the best solution, just as long-winded methods that implement some complicated behavior all by themselves are generally a bad idea. Interfaces are more flexible and can deal with a lot more stress on the design of your program than implementation. By introducing interfaces into your program, you really introduce points of variation at which you can plug in different implementations for that interface. Interfaces' primary purpose is abstraction , decoupling the "what" from the "how". One important rule to keep in mind for safely doing so is the Liskov Substitution Principle [ UncleBob , Wikipedia ]. While a compiler in a language like Java will make sure that syntactically everything is in order (right number of parameters, types, ...), LSP deals with the semantics . In short, LSP says that every implementation of an interface must (also) behave itself correctly to be truly substitutable as described above.
