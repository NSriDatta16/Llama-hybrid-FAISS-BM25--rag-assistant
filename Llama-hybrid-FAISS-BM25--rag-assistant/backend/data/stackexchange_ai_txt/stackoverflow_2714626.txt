[site]: stackoverflow
[post_id]: 2714626
[parent_id]: 2713740
[tags]: 
Threads would work, but it's a crude tool. You could try something like this: flickr_thread = Thread.start do @flickr_result = ... # make the Flickr request end twitter_thread = Thread.start do @twitter_result = ... # make the Twitter request end # this makes the main thread wait for the other two threads # before continuing with its execution flickr_thread.join twitter_thread.join # now both @flickr_result and @twitter_result have # their values (unless an error occurred) You'd have to tinker a bit with the code though, and add proper error detection. I can't remember right now if instance variables work when declared inside the thread block, local variables wouldn't unless they were explicitly declared outside. I wouldn't call this an elegant solution, but I think it works, and it's not too complex. In this case there is luckily no need for locking or synchronizations apart from the joins, so the code reads quite well. Perhaps a tool like EventMachine (in particular the em-http-request subproject) might help you, if you do a lot of things like this. It could probably make it easier to code at a higher level. Threads are hard to get right.
