[site]: stackoverflow
[post_id]: 5361979
[parent_id]: 5361918
[tags]: 
The primary way of busting encryptionsm, especially in this scenario, still is brute force. It works very well and very efficient in most cases. To crack for example the secret token used to sign some URL or the password behind an md5 hash you can just crank up a bunch of Amazon EC2 instances, just pay them for the time you need them, and distribute the brute force attack. Most algorithms work far better on GPUs rather than CPUS but its mostly more convinient because you can rent and share CPUs better. So what does this mean? In theory you can bust into any password or key protected account in a matter of minutes if you can distribute the attack. In practice this mostly doesnt work because the authentication server limits the number of requests, therefore limiting your ability to apply brute force. In this case it sounds like you are completly giving away the data to an potential attacker. So if you store files on my computer and i want to crack them, I can distribute them to a huge computing cloud (that only costs me a few hundret buck for that short endevour) and bust your signature. If this is possible, not even long digital signatuers are secure. Of course the amount of computing power needed rises exponentially with the lengh of the key but thats not really enough. So after this introduction ... So what is the way to go? In my opinion the best would be to generate a unique signature for each and every file and leave them at the client side. Do NOT use a shared signature. So if i send over fileA.zip to your server I keep a fileA.zip.key on my side that enables me to decypher it. In this way you can bust one file, but my account is not comporomised. If you do a 2048 bit key or somethig that is sotred for every file individually this should be really quite secure. You can also think about using bcrypt where you can deliberately slow down the encryption process, to make attacks harder. but keep in mind that this also slows down the decyphering on your end. But if its backup storage or something only this would be a considerable security gain.
