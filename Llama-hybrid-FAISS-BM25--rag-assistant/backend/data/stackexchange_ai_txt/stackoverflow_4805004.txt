[site]: stackoverflow
[post_id]: 4805004
[parent_id]: 4803858
[tags]: 
It's definitely possible and it's not something that lives or is bound to SOAP Web Services as this is an application implementation concern. What you should be more concerned with is how you are going to go about doing it. Using Data Transfer Objects Having spent many years developing Web Services I believe the best approach in the design of your web services is to follow Martin Fowler's DTO pattern where you communicate using remote-service-specific DTO's using a client proxy (aka Service Gateway) to the Web Service (aka Service Interface). This 'message style' of web services is great from a Performance, SOA, re-usability point of view. Which forms the foundation of how my ServiceStack web services framework was built. The WCF RPC Approach Unfortunately this best-practices convention is effectively discouraged by Microsoft's WCF SOAP Web Services framework as they encourage you to develop API-specific RPC method calls by insisting you to use method signatures to define your web services. You can of course still develop 'message based' apis however it requires more effort to do so and is rarely demonstrated in their online tutorials. In my opinion this results in a client-specific API which encourages more remote method calls which as a result are less performant. At times I really wish Microsoft would follow well established practices as published by industry experts instead of their often primary motivation of catering for drag-n-drop developers. Calling multiple Web Services Asynchronously Going back to your original question you would define a web service that takes a request and if you're lucky that all your proxy web services share the same interface you should be able to use the same client proxy in a loop by changing the url for each service endpoint. I generally recommend that you fire each request off asynchronously (and join at the end) to speed up the execution time of your 'master web service'.
