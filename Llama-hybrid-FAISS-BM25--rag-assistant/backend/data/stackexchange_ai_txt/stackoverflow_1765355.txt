[site]: stackoverflow
[post_id]: 1765355
[parent_id]: 1765186
[tags]: 
The way this is typically handled in with the Django ORM is by linking the two models together (tables) with a Foreign Key. You can then get just the records that apply to a user by using the .filter() method. In this way it will seem like each user has their own table. For example... from django.contrib.auth.models import User from django.db import models class Game(models.Model): name = models.CharField(max_length=50) owner = models.ForeignKey(User) The ForeignKey field here provides a "link" that relates 1 Game record to a specific User. When you want to retrieve the Games that apply just to 1 user, you can do so like this: # Select whichever user you want to (any of these work) user = User.objects.get(username='admin') user = User.objects.get(id=64) user = request.user # Then filter by that user user_games = Game.objects.filter(owner=user) Edit -- To answer your question about more rows vs. more tables: Relational database servers are optimized to have a huge row capacity within a single table. With your example query, 1000 * 100 is only 100,000 records, which is probably only 0.01% of what a table can theoretically hold (server memory and storage aside).
