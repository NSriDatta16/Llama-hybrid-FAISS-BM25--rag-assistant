[site]: stackoverflow
[post_id]: 679520
[parent_id]: 
[tags]: 
Advice on a better way to extend C++ STL container with user-defined methods

I inherited from C++ STL container and add my own methods to it. The rationale was such that to the clients, it will look act a regular list, yet has application-specific methods they can readily be called. This works fine, but I have read numerous posts about not inheriting from STL. Can someone provide a concrete advice of how I might write the code below in a better way? class Item { int a; int b; int c; int SpecialB() { return a * b + c; } }; class ItemList : public std::vector { int MaxA() { if( this->empty() ) throw; int maxA = (*this)[0].a; for( int idx = 1; idx size(); idx++ ) { if( (*this)[idx].a > maxA ) { maxA = (*this)[idx].a; } } return maxA; } int SpecialB() { if( this->empty() ) throw; int specialB = (*this)[0].SpecialB(); for( int idx = 1; idx size(); idx++ ) { if( (*this)[idx].SpecialB() empty() ) throw; int cSum = 0; for( int idx = 0; idx size(); idx++ ) { cSum += (*this)[idx].c; } return cSum / this->size(); // average } }; EDIT : Thanks for a bunch of thoughtful answers. I will create helper functions instead and from now on will never inherit from STL containers.
