[site]: stackoverflow
[post_id]: 4660393
[parent_id]: 4658577
[tags]: 
To sum up on jAndy's link (for the full picture still follow the link). Closures them selfs are not a big problem, the problems comes when you don't understand that the everything in the inherited scopes continues to live on as long as the closure exists. Example function doAmazingGrace() { // gigantic list of stuff! var list = [...]; var result = magicComputationOnTheList(); // readOnlyResults for whatever reason.... return { get: function() { return result; } } } result itself is not a problem since it has to live on in order for the closure to work, but list will be "leaked", unless you loose the reference to the closure it will go away so it's not technically a leak. But as long as the closure lives on, you keep a reference to list in there, which isn't needed. So in order to fix it, it would be wise to use delete list or list = null before returning the object, so that the Array can be garbage collected. The second issue are circular references, but that's not a closure issue, you can always introduce circular references and whether and how long they leak is also dependent on the garbage collectors ability to get rid of them. V8 does a good job at that, old IE versions had extreme problems with it though.
