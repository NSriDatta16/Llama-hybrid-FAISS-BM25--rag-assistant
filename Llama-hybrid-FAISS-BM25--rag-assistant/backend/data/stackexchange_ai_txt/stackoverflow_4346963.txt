[site]: stackoverflow
[post_id]: 4346963
[parent_id]: 4346901
[tags]: 
You can use the slightly shorter pattern below: | (Chars _| States _), _ -> assert false In fact, you can let the compiler generate it for you, because it's still a little tedious. Type the following and compile: let median a b = match a,b with | States xs, States ys -> assert( (Array.length xs) = (Array.length ys) ); States (Array.init (Array.length xs) (fun i -> xs.(i) lor ys.(i))) | Chars xs, Chars ys -> assert( (Array.length xs) = (Array.length ys) ); let union c1 c2 = (List.filter (fun x -> not (List.mem x c2)) c1) @ c2 in Chars (Array.init (Array.length xs) (fun i -> union xs.(i) ys.(i))) Warning 8: this pattern-matching is not exhaustive. Here is an example of a value that is not matched: (Chars _, States _) You can now copy-paste the suggested pattern back into your code. This is usually how I generate non-fragile catch-all patterns for types with tens of constructors. You may need to launch the compiler several times, but it's still faster than typing them yourself.
