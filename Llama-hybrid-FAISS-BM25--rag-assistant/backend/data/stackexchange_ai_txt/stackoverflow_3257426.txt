[site]: stackoverflow
[post_id]: 3257426
[parent_id]: 1296235
[tags]: 
As skaffman suggested , JSP 2.0 Tag Files are the bee's knees. Let's take your simple example. Put the following in WEB-INF/tags/wrapper.tag Now in your example.jsp page: Welcome That does exactly what you think it does. So, lets expand upon that to something a bit more general. WEB-INF/tags/genericpage.tag To use this: Welcome Copyright 1927, Future Bits When There Be Bits Inc. Hi I'm the heart of the message What does that buy you? A lot really, but it gets even better... WEB-INF/tags/userpage.tag Welcome ${userName} Copyright 1927, Future Bits When There Be Bits Inc. To use this: (assume we have a user variable in the request) First Name: ${user.firstName} Last Name: ${user.lastName} Phone: ${user.phone} But it turns you like to use that user detail block in other places. So, we'll refactor it. WEB-INF/tags/userdetail.tag First Name: ${user.firstName} Last Name: ${user.lastName} Phone: ${user.phone} Now the previous example becomes: The beauty of JSP Tag files is that it lets you basically tag generic markup and then refactor it to your heart's content. JSP Tag Files have pretty much usurped things like Tiles etc., at least for me. I find them much easier to use as the only structure is what you give it, nothing preconceived. Plus you can use JSP tag files for other things (like the user detail fragment above). Here's an example that is similar to DisplayTag that I've done, but this is all done with Tag Files (and the Stripes framework, that's the s: tags..). This results in a table of rows, alternating colors, page navigation, etc: Edit Of course the tags work with the JSTL tags (like c:if , etc.). The only thing you can't do within the body of a tag file tag is add Java scriptlet code, but this isn't as much of a limitation as you might think. If I need scriptlet stuff, I just put the logic in to a tag and drop the tag in. Easy. So, tag files can be pretty much whatever you want them to be. At the most basic level, it's simple cut and paste refactoring. Grab a chunk of layout, cut it out, do some simple parameterization, and replace it with a tag invocation. At a higher level, you can do sophisticated things like this table tag I have here.
