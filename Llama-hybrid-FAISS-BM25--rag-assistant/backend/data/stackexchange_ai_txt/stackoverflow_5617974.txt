[site]: stackoverflow
[post_id]: 5617974
[parent_id]: 5617795
[tags]: 
It depends on the storage engine you use and the row format chosen for that table, and also your indexes. But it is not a very useful information. Edit: I suggest going against normalization only when you know exactly what you're doing. A DBMS is created to deal with large amount of data. You probably don't need to serialize your strctured data into a single field. Keep in mind that your application layer then has to tokenie (or worse) the serialized field data to get the original meaning back, which has certainly larger overhead than getting the data already in a structured form, from the DB. The only exeption I can think of is a client-heavy architcture, when moving processing to the client side actually takes burden off the server, and you would serialize our data anyway for the sake of the transfer. - In server-side code (like php) it is not a good practive to save serialized stye data into the DB. (Though, using php's built in serialization may be a good idea in some cases. Your current project does not seem to benefit from it.)
