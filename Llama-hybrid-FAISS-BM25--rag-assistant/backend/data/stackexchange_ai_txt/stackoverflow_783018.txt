[site]: stackoverflow
[post_id]: 783018
[parent_id]: 
[tags]: 
Howto elegantly extract a 2D rectangular region from a C++ vector

The problem is pretty basic. (I am puzzled why the search didn't find anything) I have a rectangular "picture" that stores it's pixel color line after line in a std::vector I want to copy a rectangular region out of that picture. How would I elegantly code this in c++? My first try: template std::vector copyRectFromVector(const std::vector & vec, std::size_t startx, std::size_t starty, std::size_t endx, std::size_t endy, std::size_t fieldWidth, std::size_t fieldHeight) { using namespace std; vector ret((endx-startx)*(endy-starty)+10); // 10: chickenfactor // checks if the given parameters make sense: if (vec.size() ::const_iterator vecIt = vec.begin(); vector ::forward_iterator retIt = ret.end(); vecIt += startx + (starty*fieldWidth); for(int i=starty; i does not even compile..... Addit: Clarification: I know how to do this "by hand". It is not a problem as such. But I would love some c++ stl iterator magic that does the same, but faster and... more c++ stylish. Addition: I give the algorithm the pictureDataVector, the width and height of the picture and a rectangle denoting the region that I want to copy out of the picture. The return value should be a new vector with the contents of the rectangle. Think of it as opening your favorite image editor, and copy a rectangular region out of that. The Picture is stored as a long 1D array(vector) of pixelcolors.
