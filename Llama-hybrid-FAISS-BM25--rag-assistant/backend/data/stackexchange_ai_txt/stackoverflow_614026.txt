[site]: stackoverflow
[post_id]: 614026
[parent_id]: 613968
[tags]: 
The only advice that I can give you is careful use of mlock() / mlockall() .. while looking out for buggy balloon drivers. For instance, if a Xen guest is booted with 1GB, then ballooned down to 512 MB, its very typical that the privileged domain did NOT look at how much memory the paravirtualized kernel was actually promising to processes (i.e. Committed_AS). Actually, with Xen, unless this value is placed on Xenbus, the privileged host has no idea what such a balloon will do. I believe this also coincides with KVM, depending upon how the kernel is configured .. but your question presumes that we know nothing about such things :) So, protect stuff (be careful, but prudent) that simply can not be paged out, always account for the 'sky is falling' scenario. Likewise, use of posix_fadvise() / posix_madvise() to tell the PV kernel just how much you do or do not need buffering is always a good idea. Beyond that, there's very little that you can do .. since you're talking only to the paravirtualized kernel, which is designed to make processes oblivious to virtualization in the first place. I don't use KVM much (yet), though I plan to explore it more in the future. However, 90% of the stuff that I have been writing lately is specifically designed to run on paravirtualized Xen guests. Sorry to be a little Xen / C centric, but that's where my experience is and pv_ops is in mainline (soon also xen-0 ops) :) Good question, btw :) Edit: When I said 'careful but prudent' , I meant one step above conservative. If your program allocates some job structure that most functions need, lock it. If your allocating buffers to read huge files, don't lock them .. and be sure to call posix_fadvise() to let the kernel know you only intend to access it once (if that's the case). Also, be sure to advise the kernel on your use of memory mapped files, especially if they serve to organize concurrency. In short, help your host kernel manage memory, don't let critical allocated blocks get thrown into dirty paging, don't assume your program is more important than anything else by locking everything it allocates :) Sorry for the ambiguity. The best phrase I could come up with was 'careful, but prudent'.
