[site]: crossvalidated
[post_id]: 117467
[parent_id]: 116714
[tags]: 
First, rather than counts of more (or as) extreme tables that need to be summed, it's their probabilities under the null hypothesis. Second the null hypothesis is composite, with $\pi_{1.}$ and $\pi_{.1}$ as nuisance parameters: the p-value is defined conservatively as the maximum of the sum of the probabilities of the more extreme tables over all values of both these nuisance parameters. There's no analytic solution, but the approximation of both the likelihood ratio and Pearson's score statistic to a chi-squared distribution with one degree of freedom is often close enough. If you want an exact test then, even for a multinomial sampling scheme, conditioning on either row or column totals (and thus removing one nuisance parameter) can be justified/urged on the grounds that either is ancillary; conditioning on both (and thus removing both nuisance parameters) can be justified/urged on the grounds that together they're approximately ancillary. In a Bayesian analysis you have priors for the nuisance parameters and simply integrate them out to get the posterior density of the odds ratio. Berger & Boos devised some tests that carry out the maximization over a confidence interval for the nuisance parameters, and still maintain the correct size. † # specify marginal totals n1. = 80 n2. = 55 n.1 = 75 n.2 = n1. + n2. - n.1 n.. = n1. + n2. # specify nuisance parameters pi1. = 0.6 pi.1 = 0.5 # specify no. simulations to perform throughout no.sims multinom.sim.stats # simulate conditioning on row totals matrix(NA, 4, no.sims) -> binom.row.obs binom.row.obs[1, ] binom.row.sim.stats # simulate conditioning on column totals matrix(NA, 4, no.sims) -> binom.col.obs binom.col.obs[1, ] binom.col.sim.stats # simulate conditioning on both row & column totals matrix(NA, 4, no.sims) -> hypergeom.obs rhyper(no.sims, n.1, n.2, n1.) -> hypergeom.obs[1, ] n1. - hypergeom.obs[1, ] -> hypergeom.obs[2, ] n.1 - hypergeom.obs[1, ] -> hypergeom.obs[3, ] n.. - hypergeom.obs[1, ] - hypergeom.obs[2, ] - hypergeom.obs[3, ] -> hypergeom.obs[4, ] apply(hypergeom.obs, pearson.test.stat, MAR=2) -> hypergeom.sim.stats † Berger & Boos (1994), "P-values maximized over a confidence set for the nuisance parameter", JASA , 89 , 427
