[site]: stackoverflow
[post_id]: 3516990
[parent_id]: 3516889
[tags]: 
The best I can think of is to replace the return type with a smart pointer and forgo covariance in favor of polymorphism: virtual auto_ptr operator*(const double& d); The reason I suggest this is that you are using virtual functions, so knowing the exact type of the object isn't necessary anyway. The underlying problem is that the caller needs to allocate storage for an object returned by value. That storage cannot vary dynamically, so you are inevitably stuck allocating the object on the heap.
