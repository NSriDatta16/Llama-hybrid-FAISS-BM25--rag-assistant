[site]: stackoverflow
[post_id]: 4281050
[parent_id]: 4280961
[tags]: 
Doing what you're doing is going to be very computationally intensive. Since your table layout seems pretty regular, I'd just completely ditch that nthCol() thing (for this page anyway) and do your work by iterating over the table once : Grab the "key" row first, and save it Loop through each relevant , and for each one get the elements and iterate over them as a raw node list, or as a jQuery list. Either way it should be a lot faster. In the second loop, you'll do the same logic you've got (although I'd use addClass() and removeClass() ), referring back to the saved "key" row for each cell. In your current loop, you're re-building the jQuery object of every in the table for each column, and then you're doing that nthCol() work! That's a lot of work to do if you do it once , so repeating that for every single column is going to really drag that CPU down. (On IE6 - especially with all those "class" changes - I bet it's almost unbearably slow.) edit â€” I looked over that code (for the plugin), and while it looks like it was competently implemented it doesn't have any "magic tricks". All it does is iterate through all the table cells you give it and checks whether or not each cell is in fact in the "nth" column. Thus, your iteration will perform that test on every cell in the table for every column you care about. In your 90x20 table, that'd be about 85 iterations through all 1800 cells. And that's before you do your work!
