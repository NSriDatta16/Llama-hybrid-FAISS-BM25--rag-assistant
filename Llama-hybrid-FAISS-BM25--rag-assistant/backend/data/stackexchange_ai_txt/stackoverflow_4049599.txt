[site]: stackoverflow
[post_id]: 4049599
[parent_id]: 4049580
[tags]: 
Type casting is treating a value (block of memory) referenced by a variable as being of a different type than the type the variable is declared as. Type conversion is actually performing a conversion of that value. In many languages, some casts (usually numeric ones) do result in conversions (this will vary quite a bit by language), but mostly it's just "treat this X as a Y". Like most aspects of human language, unfortunately the terms are used slightly differently in different communities, mostly along language lines. For instance, see James' comment below about C++ â€” the word "cast" there has a much broader meaning than the above definition, which is more in the C or Java mold. And just to make things fun, the Java Language Spec actually gets into various kinds of casts, including casting conversions . But the above is a good rule of thumb. But to take a simple case: In Java, prior to generics it wasn't unusual to have to do a lot of typecasting when dealing with maps: Map m = new HashMap(); m.put("one", "uno"); // This would give a compiler error, because although we know // we'll get a String back, all the compiler knows is that it's // an Object String italian = m.get("one"); // This works, we're telling the compiler "trust me, it's a String" String italian = (String)m.get("one"); Fortunately, the addition of generics addressed this, as casting in this way tends to be a fragile process with maintenance issues. In contrast, you'd convert if you had a String of digits: String s = "1234"; ...and needed to know what number those digits represented in decimal: // Wrong (cast) int n = (int)s; // Right (conversion) int n = Integer.parseInt(s, 10);
