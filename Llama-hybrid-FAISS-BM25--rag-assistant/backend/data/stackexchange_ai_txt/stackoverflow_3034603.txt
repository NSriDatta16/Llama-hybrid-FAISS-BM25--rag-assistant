[site]: stackoverflow
[post_id]: 3034603
[parent_id]: 143405
[tags]: 
Reason #1 I tend to use explicit interface implementation when I want to discourage "programming to an implementation" ( Design Principles from Design Patterns ). For example, in an MVP -based web application: public interface INavigator { void Redirect(string url); } public sealed class StandardNavigator : INavigator { void INavigator.Redirect(string url) { Response.Redirect(url); } } Now another class (such as a presenter ) is less likely to depend on the StandardNavigator implementation and more likely to depend on the INavigator interface (since the implementation would need to be cast to an interface to make use of the Redirect method). Reason #2 Another reason I might go with an explicit interface implementation would be to keep a class's "default" interface cleaner. For example, if I were developing an ASP.NET server control, I might want two interfaces: The class's primary interface, which is used by web page developers; and A "hidden" interface used by the presenter that I develop to handle the control's logic A simple example follows. It's a combo box control that lists customers. In this example, the web page developer isn't interested in populating the list; instead, they just want to be able to select a customer by GUID or to obtain the selected customer's GUID. A presenter would populate the box on the first page load, and this presenter is encapsulated by the control. public sealed class CustomerComboBox : ComboBox, ICustomerComboBox { private readonly CustomerComboBoxPresenter presenter; public CustomerComboBox() { presenter = new CustomerComboBoxPresenter(this); } protected override void OnLoad() { if (!Page.IsPostBack) presenter.HandleFirstLoad(); } // Primary interface used by web page developers public Guid ClientId { get { return new Guid(SelectedItem.Value); } set { SelectedItem.Value = value.ToString(); } } // "Hidden" interface used by presenter IEnumerable ICustomerComboBox.DataSource { set; } } The presenter populates the data source, and the web page developer never needs to be aware of its existence. But's It's Not a Silver Cannonball I wouldn't recommend always employing explicit interface implementations. Those are just two examples where they might be helpful.
