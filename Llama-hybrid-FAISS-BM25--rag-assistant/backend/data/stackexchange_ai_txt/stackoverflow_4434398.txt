[site]: stackoverflow
[post_id]: 4434398
[parent_id]: 4404431
[tags]: 
I didn't find any way to use auto conversion of QVariants of user type. Therefore I've created singleton storing rules for conversion. struct DbConverter { virtual ~DbConverter() {} virtual QVariant toDbValue(const QVariant &value) = 0; virtual QVariant fromDbValue(const QVariant &value) = 0; }; class DbConversion { public: static QVariant toDbValue(const QVariant &value) { return instance()->m_converters.contains(value.userType()) ? instance()->m_converters[value.userType()]->toDbValue(value) : value; } static QVariant fromDbValue(int type, const QVariant &value) { return instance()->m_converters.contains(type) ? instance()->m_converters[type]->fromDbValue(value): value; } static int setConverter(int typeId, DbConverter *converter) { instance()->m_converters[typeId] = converter; return typeId; } private: static DbConversion *instance() { static DbConversion *inst = new DbConversion; return inst; } QHash m_converters; }; I register my custom types using value returned from qRegisterMetaType() and perform conversions on each app db transfer. Please let me know if you find any more elegant solution and I'll be happy to accept your answer.
