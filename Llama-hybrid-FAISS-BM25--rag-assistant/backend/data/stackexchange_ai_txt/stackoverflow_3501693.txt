[site]: stackoverflow
[post_id]: 3501693
[parent_id]: 3501680
[tags]: 
On constructor not having return type Constructor must not have a return type. By definition, if a method has a return type, it's not a constructor. JLS 8.8 Constructor Declarations A constructor is used in the creation of an object that is an instance of a class. [The name must match the class name, but], in all other respects, the constructor declaration looks just like a method declaration that has no result type. On default constructors The following snippet does give a compilation error: class Parent { Parent(int a){} } class Child extends Parent{ // DOES NOT COMPILE!! // Implicit super constructor parent() is undefined for default constructor. // Must define an explicit constructor } The reason is not because of a return type in a constructor, but because since you did not provide ANY constructor for Child , a default constructor is automatically created for you by the compiler. However, this default constructor tries to invoke the default constructor of the superclass Parent , which does NOT have a default constructor. THAT'S the source fo the compilation error. Here's the specification for the default constructor: JLS 8.8.9 Default Constructor If a class contains no constructor declarations, then a default constructor that takes no parameters is automatically provided: If the class being declared is the primordial class Object , then the default constructor has an empty body. Otherwise, the default constructor takes no parameters and simply invokes the superclass constructor with no arguments. The following is a simple fix: class Parent { Parent(int a){} } class Child extends Parent{ // compiles fine! Child() { super(42); } } On methods having the same name as the constructor The following snippet DOES compile: // COMPILES FINE!! class Parent { // method has same name as class, but not a constructor int Parent(int a) { System.out.println("Yipppee!!!"); return 42; } // no explicit constructor, so default constructor is provided } class Child extends Parent { // no explicit constructor, so default constructor is provided } There is in fact no explicit constructor in the above snippet. What you have is a regular method that has the same name as the class. This is allowed, but discouraged: JLS 8.4 Method Declarations A class can declare a method with the same name as the class or a field, member class or member interface of the class, but this is discouraged as a matter of style . You will find that if you create a new Parent() or a new Child() , "Yipppee!!!" will NOT be printed to standard output. The method is not invoked upon creation since it's not a constructor.
