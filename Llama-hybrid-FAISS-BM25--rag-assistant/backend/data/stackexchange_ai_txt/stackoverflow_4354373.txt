[site]: stackoverflow
[post_id]: 4354373
[parent_id]: 4352682
[tags]: 
The answer is implementation-dependent, but for sane implementations this is how it works for variables with static storage duration (global or otherwise): Whenever the variable is initialized, the whole initialized value of the object will be stored in the executable file. This is true even if only the initial part of it is explicitly initialized (the rest is implicitly zero). If the variable is constant and initialized, it will be in the "text" segment, or equivalent. Some systems (modern ELF-based, maybe Windows too?) have a separate "rodata" segment for read-only data to allow it to be marked non-executable, separate from program code. Non-constant initialized variables will be in the "data" segment in the executable, which is mapped into memory in copy-on-write mode by the operating system when the program is loaded. Uninitialized variables (which are implicitly zero as per the standard) will have no storage reserved in the executable itself, but a size and offset in the "bss" segment, which is created at program load-time by the operating system. Such uninitialized variables may be created in a separate read-only "bss"-like segment if they're const -qualified.
