[site]: stackoverflow
[post_id]: 1156705
[parent_id]: 1155443
[tags]: 
If you're getting everything you need back from preg_match_all() then you could leverage preg_split() like so: $pattern = '/( (.*?) )/s'; // get the code blocks preg_match_all($pattern, $text, $matches); $code_blocks = $matches[0]; // split up the text around the code blocks into an array $unprocessed = preg_split($pattern, $text); $processed_text = ''; foreach($unprocessed as $block) { // process the text here $processed_text .= process($block); // add the next code block if(!empty($code_blocks)) $processed_text .= array_shift($code_blocks); } // any remaining $processed_text .= implode('', $code_blocks); This has the unfortunate drawback of having to do multiple process() calls so depending on how intensive that is and how often you do it this may not be the best solution. It is pretty clear and safe though and you don't have to add any special markers for replacement later. If your processing is doing white listing and safety type stuff then have a look at HTMLPurifier which can do some sophisticated filtering of HTML that may let you avoid this type of stuff altogether (don't quote me on that though).
