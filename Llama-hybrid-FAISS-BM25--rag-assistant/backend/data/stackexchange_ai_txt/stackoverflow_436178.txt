[site]: stackoverflow
[post_id]: 436178
[parent_id]: 435890
[tags]: 
Obviously, Class.isAssignableFrom() tells you whether an individual class implements the given interface. So then the problem is getting the list of classes to test. As far as I'm aware, there's no direct way from Java to ask the class loader for "the list of classes that you could potentially load". So you'll have to do this yourself by iterating through the visible jars, calling Class.forName() to load the class, then testing it. However, it's a little easier if you just want to know classes implementing the given interface from those that have actually been loaded: via the Java Instrumentation framework, you can call Instrumentation.getAllLoadedClasses() via reflection, you can query the ClassLoader.classes field of a given ClassLoader. If you use the instrumentation technique, then (as explained in the link) what happens is that your "agent" class is called essentially when the JVM starts up, and passed an Instrumentation object. At that point, you probably want to "save it for later" in a static field, and then have your main application code call it later on to get the list of loaded classes.
