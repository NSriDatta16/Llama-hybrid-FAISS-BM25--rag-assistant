[site]: stackoverflow
[post_id]: 4360331
[parent_id]: 4360188
[tags]: 
I reproduced your problem, with a workaround below. The problem is that you are using the Task as a field in your class so it can only refer to static members, as the instance hasn't been constructed until the constructor is run (the field initializers are called before the class is initialized). From the C# specification (10.5.5.2): A variable initializer for an instance field cannot reference the instance being created. Thus, it is a compile-time error to reference this in a variable initializer, as it is a compile-time error for a variable initializer to reference any instance member through a simple-name. In the example class A { int x = 1; int y = x + 1; // Error, reference to instance member of this } the variable initializer for y results in a compile-time error because it references a member of the instance being created. Basically you have two options: Initialize your Task variable in the constructor Use a method instead for retrieval Example: public class Foo { public string myProperty = "foobar"; public Task t; public Foo() { t = Task.Factory.StartNew(() => { myProperty = "test"; }); } //THIS won't compile //public Task t = Task.Factory.StartNew(() => //{ // myProperty = "test"; //}); public Task GetTask() { Task t = Task.Factory.StartNew(() => { myProperty = "test"; }); return t; } }
