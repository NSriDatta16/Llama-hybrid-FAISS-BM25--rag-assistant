[site]: stackoverflow
[post_id]: 4092799
[parent_id]: 4092674
[tags]: 
I had a look at the answer you followed up on, and I think you're confusing data and its representation . @Robert Rossney suggested to subclass float so you could map() an iterable of standard, non-adulterated floats into prettyfloats for display purposes : # Perform all our computations using standard floats. results = compute_huge_numbers(42) # Switch to prettyfloats for printing. print(map(prettyfloat, results)) In other words, you were not supposed to (and you shouldn't) use prettyfloat as a replacement for float everywhere in your code. Of course, inheriting from float to solve that problem is overkill, since it's a representation problem and not a data problem. A simple function would be enough: def prettyfloat(number): return "%0.2f" % number # Works the same. Now, if it's not about representation after all, and what you actually want to achieve is fixed-point computations limited to two decimal places everywhere in your code, that's another story entirely.
