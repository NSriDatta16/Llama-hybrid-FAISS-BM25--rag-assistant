[site]: stackoverflow
[post_id]: 4309639
[parent_id]: 4309389
[tags]: 
I see two things: Your which ruby says the default is /usr/bin/ruby , but your Autotest is calling /usr/local/bin/ruby . sh: /usr/local/bin/unit_diff: /usr/local/bin/ruby: bad interpreter: No such file or directory Also, your path is not organized well because you have duplicated entries. I split it on ':' then sorted it to look for duplicates: /bin /Library/Frameworks/Python.framework/Versions/Current/bin /opt/local/bin # Notice that you have duplicated /opt/local/bin and /usr/local/bin directories. Those should appear ahead of the default /usr/bin directory in order for your "personally" installed apps to be located first, so you should do some housekeeping. Once you have done that close your terminal session(s). Open a new session and try rerunning your test and see if anything has changed/improved. The path organization is part of the problem and explains why which ruby points to the system Ruby. I suspect another part of this puzzle is that you are using #!/usr/local/bin/ruby as the "bang slash" in your scripts, or explicitly pointing to that Ruby when you call things on the command-line. That will confuse tests no end. In my scripts I use this to invoke Ruby: #!/usr/bin/env ruby which works nicely because it uses whatever Ruby is defined first in my path, and with this next part... I'm a big proponent for using RVM to manage Ruby installations on Mac OS and Linux. It makes it so you don't have to install anything in your default /usr/bin ruby or even bother with adding one in /usr/local/bin . RVM puts everything in ~/.rvm and makes it really easy to install/manage/remove Ruby versions along with their associated gems, or even blow it all away by deleting that directory. Installing RVM and Gemsets are good starting places if you want to give it a try.
