[site]: stackoverflow
[post_id]: 4426136
[parent_id]: 4425462
[tags]: 
There's a method to enable chainable calls on any object without return this : function chain(obj) { return function() { var Self = arguments.callee; Self.obj = obj; if(arguments.length==0) return Self.obj; Self.obj[arguments[0]].apply(Self.obj,[].slice.call(arguments,1)); return Self; } } Usage: function ClassA() { this.prop1 = null; this.prop2 = null; this.prop3 = null; } ClassA.prototype = { method1: function(argu) {this.prop1 = argu;}, method2: function(argu) {this.prop2 = argu;}, method3: function(argu) {this.prop3 = argu;} } var a = new ClassA(); chain(a)('method1',4)('method2',5)('method3',6)(); ref: http://www.javaeye.com/topic/748348 (in Chinese)
