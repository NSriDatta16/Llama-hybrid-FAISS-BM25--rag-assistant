[site]: stackoverflow
[post_id]: 1183756
[parent_id]: 1175374
[tags]: 
DojoX has a form manager to create elaborate CRUD applications. Basically it allows to map a flat JSON-style object to a form both ways (read/write), unified event processing, and many other things you want to do dynamically with forms. It works well with HTML form elements and with Dijit widgets alike. Example: dojo.require("dojox.form.Manager"); // our data var data = { name: "Bob Smith", gender: "male" }; // the form manager var fm = new dojox.form.Manager({}, "my_form"); // now we can populate the form fm.setFormValues(data); // we can read them back when user submits them // or indicated that she finished with them var newData = fm.gatherFormValues(); // populate fields separately fm.elementValue("name", "Jane Doe"); fm.elementValue("gender", "female"); // read a field value var newName = fm.elementValue("name"); The HTML snippet for the above example can be something like that: Name: Gender: Or it can be like that: Name: Gender: Male Female Or it can be like this: Name: Gender: Male Female As you can see the presentation is pretty much separated from the mechanics of the form, so it is up to your UI designer to come up with the best representation of the data, and tweak the form ad infinitum without changing your code or bothering you. ;-) What else you can do? A lot of other nice things: // disable all fields temporarily fm.disable(); // ... // doing I/O here? we want to prohibit a user // from modifying the form until we are done // ... // now we can enable all fields fm.enable(); // sample field list var fields = ["name"]; // we can enable/disable fields by name fm.disable(fields); // ... fm.enable(fields); // let's hide fields and show them back fm.hide(fields); // ... fm.show(fields); Event processing regardless of the underlying form element/widget: // our business objective calls for pissing our users royally // by popping an alert on every single field change var my_alert = function(name, node){ var onChangeEventName = dojox.form.manager.changeEvent(node); return dojo.connect(node, onChangeEventName, function(){ alert("Are you annoyed yet?"); } }; var adapted = dojox.form.manager.actionAdapter(my_alert); // let's apply our function to all fields fm.inspect(adapted); Obviously we can enable/disable/show/hide/more responding to user's actions instead of enraging users. The form manager package has much more than that: observers, form handling, class shortcuts. The whole thing is structured as a set of mixins so you can create your own form manager using only what you really need. Start reading its documentation from dojox.form.manager and follow links to mixins and dojox.form.Manager (the default manager class, which includes all mixins at once) for more details. Don't forget to check out the form manager test (warning: the test is optimized for debugging, and can be slow to start). Is it possible to work with non-flat data? Yes. You have two options: Convert it to some flat structure and back when needed. Example: var data = { name: { first: "Bob", last: "Smith" } }; can be converted to: var data = { "name-first": "Bob", "name-last": "Smith" }; Use several form managers to handle different parts. Usually the first option is simpler to implement. Just use some pre- and post-processing for your data. How to do input validation, fancy data formatting, or other cool data-field specific things? Consider using Dijit widgets â€” they can do all these things and more.
