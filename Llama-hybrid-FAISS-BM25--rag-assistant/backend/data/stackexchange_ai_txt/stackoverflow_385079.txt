[site]: stackoverflow
[post_id]: 385079
[parent_id]: 318157
[tags]: 
To perform a distinct query you can set the projection on the criteria to Projections.Distinct. You then include the columns that you wish to return. The result is then turned back into an strongly-typed object by setting the result transformer to AliasToBeanResultTransformer - passing in the type that the result should be transformed into. In this example I am using the same type as the entity itself but you could create another class specifically for this query. ICriteria criteria = session.CreateCriteria(typeof(Person)); criteria.SetProjection( Projections.Distinct(Projections.ProjectionList() .Add(Projections.Alias(Projections.Property("FirstName"), "FirstName")) .Add(Projections.Alias(Projections.Property("LastName"), "LastName")))); criteria.SetResultTransformer( new NHibernate.Transform.AliasToBeanResultTransformer(typeof(Person))); IList people = criteria.List (); This creates SQL similar to (in SQL Server at least): SELECT DISTINCT FirstName, LastName from Person Please be aware that only the properties that you specify in your projection will be populated in the result. The advantage of this method is that the filtering is performed in the database rather than returning all results to your application and then doing the filtering - which is the behaviour of DistinctRootEntityTransformer.
