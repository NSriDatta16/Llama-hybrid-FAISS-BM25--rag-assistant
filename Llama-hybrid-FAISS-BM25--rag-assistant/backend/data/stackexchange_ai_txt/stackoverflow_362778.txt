[site]: stackoverflow
[post_id]: 362778
[parent_id]: 338362
[tags]: 
It looks like A and E are out of the picture as you have stated in your question for various reasons. Option A would be one huge application which would make maintenance difficult in the future. B, C and D are essentially the same architecturally since they involve remote access to common libraries from the various web applications, the only difference is the transport mechanism. I would recommend implementing this in EJB 3 or Spring if possible instead of with your own RMI libraries since either of these provide a good framework over RMI / Webservices. So I think this problem basically boils down to the following two options: 1) Include the business and DAO layer classes as a common jar included in the deployment of all web applications. Advantages: Deployment is easier. Applications will perform better initially since there is no remote access to other servers. Disadvantages: You cannot add more hardware to the middle tier specifically (service and DAO layers) since it is included in each web application. Other business teams in the organisation will not have access to your business services since there is no remote interface. 2) Deploy the business service and DAO layer classes in a separate application server and expose business methods remotely. Advantages: You can scale up the business service and DAO layer as needed depending on load from the various web applications calling it. Other applications in the organisation can make use of your interfaces if needed. More scalable You get all the advantages of Java EE. Disadvantages: More complex deployment. Another server to maintain and monitor. Could be slower since calls will be made over the network although this shouldn't be too much of a problem. In both cases if the interfaces change the client code will need to change so this isn't a factor in the decision. Transactions should be handled on the business service method level so this shouldn't be a factor either. I think it depends on the size of the applications as well and how scalable the solution needs to be to warrant the extra complexity of option 2 above.
