[site]: stackoverflow
[post_id]: 2944765
[parent_id]: 2937952
[tags]: 
Have you tried using a rather simple structure including an ObservableCollection<> for the child nodes? Something that would implement the interface: interface ITreeNode where T : ITreeNode { string Name { get; set; } ObservableCollection Children { get; } } Then you can use a HeirarchicalDataTemplate for your TreeView's XAML: You'll have to work out drag-and-drop yourself, but that should get you started to display everything. I just recently had to do the above myself, and this CodeProject article helped me, in case you need any more: http://www.codeproject.com/KB/WPF/TreeViewWithViewModel.aspx Update: Since you currently have everything in a table format and I'll assume you won't want to revise your default data structure, use an IValueConverter to get the items you want. This code is untested, but I'd try something similar to the following: {Binding Index, Converter={StaticResource myConverter}} When you declare myConverter, give it a reference to your tabular data. Using the index as the value and having the reference to the table, you can return from the convert method an IEnumerable with the appropriate results. Let me know if you need more detail.
