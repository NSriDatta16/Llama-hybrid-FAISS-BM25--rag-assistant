[site]: stackoverflow
[post_id]: 4663328
[parent_id]: 4660704
[tags]: 
First, don't take your working native C++ code and compile it as C++/CLI. You will get horrible results. Second, don't take your working native C++ code and try to translate it into C#, while simultaneously noticing places to use the Base Class Libraries, changing your data access technique, and adjusting your UI paradigm from MFC to WPF. You will spend a LOT of energy to produce, at best, what you had before. Instead, take your working native C++ code and refactor it so that you have one or more "business logic" libraries. If these already exist then they might have COM interfaces, they might expose some "extern C" type functions, or they might expose some C++ instance methods. No worries. If they don't already exist, you have two choices. If there are just a handful of methods needed by the presentation layer, and they take simple things like strings, put some "extern C" functions in the place as gateways to the business logic. Now you can call those from the managed UI (VB or C#, Windows Forms or WPF, whatever) using P/Invoke. If there are a lot and you want to organize them, or if they need to take complex structs or objects then write a C++/CLI class or classes that can talk to the native C++ classes as-is while exposing "public ref class" classes to the managed UI. The C++/CLI will make the marshaling and lifetime issues simpler. For your new UI, write it from scratch, calling into the business logic where needed. Use the old UI only as a guide to the capabilities you need and to validations. Use the "look and feel" of your new UI technology (WPF or whatever) to build the UI itself and don't try a mechanical conversion. You'll just end up chasing pixels and working harder than you need to if you stick too closely to the old ui. Old app had 3 buttons and a checkbox? Great, 3 WPF-looking buttons and a WPF-looking checkbox coming up. Rather switch to a ribbon while you're making the change? Fine. It's ok to look different when you're done. Then you deploy your native business logic libraries, still compiled as native code, your C++/CLI wrapper if you have one, and your managed UI. This will work for anything except the phone. I just need to say again please DON'T port your working native C++ business logic into C# as part of the initial phase of the project. When it's done and working, if you have a good business reason (like we don't want to spend money on C++ devs any more) then you can consider it. But first get it working using interop. This has the advantage that if your translation messes up delicate business logic written by people who are no longer with you, relying on C++ subtleties your current team doesn't know, you can fall back on the wrapped libraries for the rest of your days.
