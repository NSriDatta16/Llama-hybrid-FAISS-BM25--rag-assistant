[site]: stackoverflow
[post_id]: 316758
[parent_id]: 316674
[tags]: 
The "best" answer depends on where the information you're displaying comes from. If you want to hard code it, using an "@" string is very effective, though you'll find that getting it to display right plays merry hell with your code formatting. For a more substantial piece of text (more than a couple of lines), embedding a text resources is good. But, if you need to construct the string on the fly, say by looping over the commandline parameters supported by your application, then you should investigate both StringBuilder and Format Strings. StringBuilder has methods like AppendFormat() that accept format strings, making it easy to build up lines of format. Format Strings make it easy to combine multiple items together. Note that Format strings may be used to format things to a specific width. To quote the MSDN page linked above: Format Item Syntax Each format item takes the following form and consists of the following components: {index[,alignment][:formatString]} The matching braces ("{" and "}") are required. Index Component The mandatory index component, also called a parameter specifier, is a number starting from 0 that identifies a corresponding item in the list of objects ... Alignment Component The optional alignment component is a signed integer indicating the preferred formatted field width. If the value of alignment is less than the length of the formatted string, alignment is ignored and the length of the formatted string is used as the field width. The formatted data in the field is right-aligned if alignment is positive and left-aligned if alignment is negative. If padding is necessary, white space is used. The comma is required if alignment is specified. Format String Component The optional formatString component is a format string that is appropriate for the type of object being formatted ...
