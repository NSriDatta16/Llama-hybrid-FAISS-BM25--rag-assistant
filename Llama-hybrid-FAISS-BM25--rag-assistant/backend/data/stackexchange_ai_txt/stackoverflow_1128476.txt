[site]: stackoverflow
[post_id]: 1128476
[parent_id]: 1125051
[tags]: 
Yes. As others have noted, splitting things out into include files that are loaded conditionally is the only way to cut that down. Starting in Drupal 6, it became possible to move theme_whatever() functions, as well as hook_menu() page callbacks, into separate include files. Drupal will automatically load them when they're needed without you doing any explicit require_once() juggling. See the hook_menu() and hook_theme() documentation for details. It's also important to note that if you're running an opcode cache like APC, splitting things into a bunch of conditional includes is actually worse -- APC can do all of the parsing and compiling of the PHP source in one go and persist it between requests. Splitting things out conditionally just gives it multiple discrete 'codebases' to compile depending on what's being done. In the currently-under-development Drupal 7, a general Code registry has been added that allows any hook implementation to be split out into a separate include file. However, the overhead of managing that internal cache of functions and .inc locations, and loading them on the fly, eats up the performance gains of the smaller-to-parse codebase. The only real payoff is reduced memory usage for those on shared hosts with tight 12-16 meg memory limits; it's unclear whether the change will survive through to the final release of Drupal 7 given the tradeoffs. The upshot: in Drupal 6, split out the menu callbacks that build custom pages into a separate .inc file, and it will only be loaded when those pages are built. Do the same with any theme functions. And if you're using an opcode cache like APC, remember that your separate .inc files are only good for organizational purposes -- they won't give you any performance boost.
