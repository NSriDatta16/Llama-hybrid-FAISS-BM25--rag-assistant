[site]: stackoverflow
[post_id]: 2846212
[parent_id]: 2846107
[tags]: 
Well, for this particular case, I think you are over-designing here. For example, should you really make a distinction between the training dataset and the testing dataset in terms of their type? My suggestion would be to go with a factory pattern; you should have a MachineLearningAlgorithm factory with a "train" function that returns a Hypothesis object on which you can perform "test" or "predict". The "train" function should take, as its parameter, the training data set, while the "test" function should take, as its parameter, the testing data set. Both data sets should probably be the same type, since their form/structure is identical, even though the data contained therein is different. As for populating the dataset, that really should not be the concern of your machine learning algorithm; whoever uses the algorithm should be responsible for providing those data sets. If you want to have some sort of example data sets, though, I would suggest factories for various different train/test data set pairs. public interface Result { public double getDecisionValue(); public String getPredictedLabel(); } public interface TestResult extends Result { public String getActualLabel(); } public interface TestResults extends Iterable { public int getErrorCount(); public double getErrorRate(); } public interface Hypothesis { public TestResults test(Iterable dataset, Iterable labels); public Result predict(DataPoint datapoint); } public interface MachineLearningAlgorithm { public Hypothesis train(Iterable trainset, Iterable trainlabels); }
