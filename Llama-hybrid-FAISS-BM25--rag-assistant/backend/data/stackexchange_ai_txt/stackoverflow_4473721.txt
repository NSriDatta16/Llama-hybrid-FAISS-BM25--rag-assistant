[site]: stackoverflow
[post_id]: 4473721
[parent_id]: 
[tags]: 
Loading high resolution images in image control for WPF/Surface SDK

I have a list of high-resolution images obtained from a web server. I need to populate them in the surface SDK scatterview item. To show the images I am using Image control for each image. Code Logic: User has identity tags which being placed on the surface table will fetch a list of high-resolution images associated with that tag. The fetching of the images is run in background to avoid jamming the UI. The code to obtain JPEG images in the background is public BitmapSource FetchImage(string URLlink) { JpegBitmapDecoder decoder = null; BitmapSource bitmapSource = null; try { decoder = new JpegBitmapDecoder(new Uri(URLlink, UriKind.Absolute), BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.OnLoad); } catch (Exception) { decoder = new JpegBitmapDecoder(new Uri("pack://application:,,,/Resources/ImageNotFound.jpg", UriKind.RelativeOrAbsolute), BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.OnDemand); } finally { bitmapSource = decoder.Frames[0]; bitmapSource.Freeze(); } return bitmapSource; } The images are downloaded from the server and displayed in the image control. However, there is severe performance hit and application just hangs when more than 10 images are loaded. For low-resolution images, i can load even 20-30 images without hanging or slowing down the application. Since i read the default algorithm for image control is Fant, I tried chaning the rendering properties to HighQuality. Application still hangs, but any lower than this kills the whole idea of having a high-resolution image for display. RenderOptions.SetBitmapScalingMode(mic.ItemImage, BitmapScalingMode.HighQuality); Is there a better way of loading images. I was thinking of first saving images to hard-disk and then loading to image source. Would that be effective in improving performance because I was thinking when I am loading images directly from URL it would store it in memory which eventually runs out. By saving images first I might avoid this, but there might a chance .NET actually is doing the same thing of storing first in temp file and then loading. I also tried changing the BitmapCacheOption to all the available options but it didn't improve anything.
