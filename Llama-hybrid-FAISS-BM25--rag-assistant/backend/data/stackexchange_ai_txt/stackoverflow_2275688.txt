[site]: stackoverflow
[post_id]: 2275688
[parent_id]: 2275463
[tags]: 
The vars pragma already does the heavy lifting for what you want, so put it to work: #! /usr/bin/perl use warnings; use strict; use vars; BEGIN { vars->import(qw/ $bah /) } $bah = "blah"; print $bah, "\n"; If you prefer to spell it create_glob_var , then use #! /usr/bin/perl use warnings; use strict; use vars; sub create_glob_var { vars->import("\$$_[0]") } BEGIN { create_glob_var "bah" } $bah = "blah"; print $bah, "\n"; Either way, the output is blah I'm curious to know why you want to do it this way rather than declaring these variables with our . Yes, it may take a few iterations to catch them all, but these are short-term fixes anyway, right? In general, you can use a variable as a variable name (see "Symbolic references" in perlref ), but you really, really, really don't want to do that: enabling the strict 'refs' pragma disables this feature. Rafael Garcia-Suarez showed great wisdom when he wrote, “I don't know what your original problem is, but I suggest to use a hash.” See also: Why it's stupid to 'use a variable as a variable name' A More Direct Explanation of the Problem What if I'm really careful?
