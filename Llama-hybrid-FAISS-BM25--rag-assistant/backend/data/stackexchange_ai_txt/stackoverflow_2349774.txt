[site]: stackoverflow
[post_id]: 2349774
[parent_id]: 2348187
[tags]: 
There is a particularly simple and elegant way to implement quadratic probing if your table size is a power of 2: step = 1; do { if(/* CHECK IF IT'S THE ELEMENT WE WANT */) { // FOUND ELEMENT return; } else { index = (index + step) % table_size; step++; } } while(/* LOOP UNTIL IT'S NECESSARY */); Instead of looking at offsets 0, 1, 2, 3, 4... from the original index, this will look at offsets 0, 1, 3, 6, 10... (the i th probe is at offset (i*(i+1))/2, i.e. it's quadratic). This is guaranteed to hit every position in the hash table (so you are guaranteed to find an empty bucket if there is one) provided the table size is a power of 2. Here is a sketch of a proof: Given a table size of n, we want to show that we will get n distinct values of (i*(i+1))/2 (mod n) with i = 0 ... n-1. We can prove this by contradiction. Assume that there are fewer than n distinct values: if so, there must be at least two distinct integer values for i in the range [0, n-1] such that (i*(i+1))/2 (mod n) is the same. Call these p and q, where p i.e. (p * (p+1)) / 2 = (q * (q+1)) / 2 (mod n) => (p 2 + p) / 2 = (q 2 + q) / 2 (mod n) => p 2 + p = q 2 + q (mod 2n) => q 2 - p 2 + q - p = 0 (mod 2n) Factorise => (q - p) (p + q + 1) = 0 (mod 2n) (q - p) = 0 is the trivial case p = q. (p + q + 1) = 0 (mod 2n) is impossible: our values of p and q are in the range [0, n-1], and q > p, so (p + q + 1) must be in the range [2, 2n-2]. As we are working modulo 2n, we must also deal with the tricky case where both factors are non-zero, but multiply to give 0 (mod 2n): Observe that the difference between the two factors (q - p) and (p + q + 1) is (2p + 1), which is an odd number - so one of the factors must be even, and the other must be odd. (q - p) (p + q + 1) = 0 (mod 2n) => (q - p) (p + q + 1) is divisible by 2n. If n (and hence 2n) is a power of 2 , this requires the even factor to be a multiple of 2n (because all of the prime factors of 2n are 2, whereas none of the prime factors of our odd factor are). But (q - p) has a maximum value of n-1, and (p + q + 1) has a maximum value of 2n-2 (as seen in step 9), so neither can be a multiple of 2n. So this case is impossible as well. Therefore the assumption that there are fewer than n distinct values (in step 2) must be false. (If the table size is not a power of 2, this falls apart at step 10.)
