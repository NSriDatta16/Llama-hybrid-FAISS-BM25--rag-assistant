[site]: stackoverflow
[post_id]: 5085488
[parent_id]: 5085100
[tags]: 
I'd use a for loop: for {set d 155} {$d > 0} {incr d -1} { set currentDistance [expr {$d * 0.1}] moveServo $currentHeight set sensorStatus [watchSensor 2] # If we've found it, stop searching! if {$sensorStatus == 1} break } This has the advantage of firstly having a limit against physical impossibility (no point in grinding the robot to pieces!) and secondly of doing the iteration with integers. That second point is vital: binary floating point numbers are tricky things, especially when it comes to iterating by 0.1, and Tcl (in common with many other languages) uses IEEE floating point arithmetic internally. The way to avoid those problems is to iterate with integers and have a bit of code to convert to floating point (e.g., by dividing by 10). Think in terms of dealing with counting down in units of 0.1. :-) One other lesser stylistic point. Put { braces } round expressions as it boosts safety and performance. (The performance boost comes because the runtime knows it can't have weird expression fragments, which are also what would count as unsafe. Not that it is critical in this code because of the dependance on the servo hardware, but it's a good habit to get into.)
