[site]: stackoverflow
[post_id]: 2540561
[parent_id]: 2540393
[tags]: 
You'll have 3Gb of address space at your disposal if this is a 32 bit machine - 1Gb is reserved for the kernel.Out of that, quite a bit of address space will be taken by shared libraries, the exe file, data segment etc. You should look at /proc/pid/maps to see how the address space is laid out. How much of the physical address space is available is hard to tell, all the system processes, the kernel, and other processes of yours will eat into that. Assuming the sum of those is no more than 1Gb, you'll still have your 3Gb available. What's might be happening is fragmentation: 0Gb 3Gb ---------------------~------------------------------------ |Stuff | Heap,1.2Gb allocated stuff | free heap | Stack| ---------------------~------------------------------------ You then free the large object, but in between some other memory have been allocated, leaving you with this: 0Gb 3Gb ---------------------~------------------------------------------ |Stuff | Heap,1.2Gb free |small object(s) | free heap | Stack| ---------------------~------------------------------------------ If you try to allocate a bigger object now, it won't fit in the free 1.2Gb space And might not fit in the free heap space either, as that might not have room enough. If you're heavily using the stack, it might be the stack growing and eating space that otherwise could be used for heap space - though by default most distros limit the stack to 8-10Mb. Using malloc/realloc will not help this. However , if you know the size of the largest object you need ,you could reserve that much at startup. That piece should never be free'd/deleted, it should just be reused. Whether that'll get you into other trouble elsewhere is hard to tell though - the space available for other objects will get smaller.
