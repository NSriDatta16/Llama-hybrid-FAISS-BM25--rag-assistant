[site]: stackoverflow
[post_id]: 5032287
[parent_id]: 5032081
[tags]: 
I don't like either of them. Some guidelines for writing clear code: The meaning of a variable should remain the same throughout the lifetime of the variable. Option (1) violates this guideline; the variable "spaces" is commented as meaning "how many spaces are in text" but it at no time actually has this meaning! It begins its lifetime by being the number of characters in text, and ends its lifetime as being the number of spaces that used to be in text. It means two different things throughout its lifetime and neither of them is what it is documented to mean. An expression statement has exactly one side effect. (An "expression statement" is a statement that consists of a single expression; in C# the legal statement expressions are method calls, object constructions, increments, decrements and assignments.) An expression has no side effects, except when the expression is the single side effect of an expression statement. Option (2) obviously violates these guidelines. Expression statements that do multiple side effects are hard to reason about, they're hard to debug because you can't put the breakpoints where you want them, it's all bad. I would rewrite your fragment to follow these guidelines. string originalText = text; string trimmedText = originalText.TrimStart(' '); int removedSpaces = originalText.Length - trimmedText.Length; text = trimmedText; One side effect per line, and every variable means exactly the same thing throughout its entire lifetime.
