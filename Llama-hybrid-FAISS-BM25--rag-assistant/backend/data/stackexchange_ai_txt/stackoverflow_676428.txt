[site]: stackoverflow
[post_id]: 676428
[parent_id]: 
[tags]: 
LINQ to Objects - Philosophy of use?

I am starting to explore LINQ to Objects but want to know how application design can best accommodate LINQ to Objects. As an example .... an application displays female employees only and the employee table in the database contains data for both male and female employees. By default, the application builds a SQL statement to retrieve only the female employees from the database and places them into an object (List) which is then passed around the application for display etc. To get the greatest leverage from LINQ to objects, I assume you would first have to obtain all the data for employees and then apply LINQ to filter the object to only display the female employees. The benefit is that you can continue to query the employees without touching the database again. This is a basic example but the point I am trying to make is where does the line between benefit and efficient execution time cross. What if the employee table has 100,000 records? I can see the benefit of LINQ .... but in my head, I am convinced that you first need to put ALL the data into an object from which you can then use LINQ to query. Getting ALL the data may be too costly to make it worthwhile when I can just query the database again each time I need a different subset of data. Thoughts?
