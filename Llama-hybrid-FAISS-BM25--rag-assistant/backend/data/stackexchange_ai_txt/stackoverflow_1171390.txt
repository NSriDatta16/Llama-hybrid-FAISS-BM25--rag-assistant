[site]: stackoverflow
[post_id]: 1171390
[parent_id]: 1171365
[tags]: 
Ordered insertion doesn't need boost: vectorMyTypes.insert( std::upper_bound(vectorMyTypes.begin(), vectorMyTypes.end(), newType), newType); upper_bound provides a valid insertion point provided that the vector is sorted to start with, so as long as you only ever insert elements in their correct place, you're done. I originally said lower_bound , but if the vector contains multiple equal elements, then upper_bound selects the insertion point which requires less work. This does have to copy O(n) elements, but you say insertion sort is "blindingly fast", and this is faster. If it's not fast enough, you have to find a way to add items in batches and validate at the end, or else give up on contiguous storage and switch to a container which maintains order, such as set or multiset . A heap does not maintain order in the underlying container, but is good for a priority queue or similar, because it makes removal of the maximum element fast. You say you want to maintain the vector in order, but if you never actually iterate over the whole collection in order then you might not need it to be fully ordered, and that's when a heap is useful.
