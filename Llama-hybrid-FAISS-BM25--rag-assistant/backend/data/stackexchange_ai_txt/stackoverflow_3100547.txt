[site]: stackoverflow
[post_id]: 3100547
[parent_id]: 3100301
[tags]: 
Just 2 or 3 points Your StartSniffing function has no loop so I suppose it is called for each received packet, in this case allocating/freeing for every call is wastefull. Use a stack array or let the caller allocate the buffer once and pass it to the callee. Allocation can be costly due to locking. In ProcessPacket you declare 2 arrays that you initialize and then fill with strcpy . Remove the initializers they are not necessary (they are hidden memset calls). You then declare 2 variable a and b with the result of the comparisons of Ip addresses, so far so good but then in case 17 you don't use them and recheck with strcmp which is not so good. So either reuse the a and b vars or remove them altogether. In PrintIpHeader and other avoid these printf call fests. printf is costly so it is better to have only one big call than 10 smaller ones. Here an exapmple of what I mean. printf("IP Header\n" " |-IP Version : %u\n" " |-IP Header Length : %u DWORDS or %u Bytes\n" /* 2 %u but only 1 parameter??? */ " |-Type Of Service : %u\n" " |-IP Total Length : %u Bytes(Size of Packet)\n" " |-Identification : %u\n" " |-Reserved ZERO Field : %u\n" " |-Dont Fragment Field : %u\n" " |-More Fragment Field : %u\n" " |-TTL : %d\n" " |-Protocol : %d\n" " |-Checksum : %d\n" " |-Source IP : %s\n" " |-Destination IP : %s\n", (unsigned int)iphdr->ip_version , (unsigned int)iphdr->ip_header_len, 9999 /* Added 9999 because the original code was buggy */ , (unsigned int)iphdr->ip_tos , ntohs(iphdr->ip_total_length) , ntohs(iphdr->ip_id) , (unsigned int)iphdr->ip_reserved_zero , (unsigned int)iphdr->ip_dont_fragment , (unsigned int)iphdr->ip_more_fragment , (unsigned int)iphdr->ip_ttl , (unsigned int)iphdr->ip_protocol , ntohs(iphdr->ip_checksum) , inet_ntoa(source.sin_addr) , inet_ntoa(dest.sin_addr)); Notice that the %u is the format for unsigned int not %d and your format in the 2nd printf is false. You should compile with warnings enabled, gcc would have warned about that.
