[site]: stackoverflow
[post_id]: 886876
[parent_id]: 885519
[tags]: 
[I work with Jeff.] As others have mentioned, a key difference stems from the nature of the user : When developing internal applications, you're typically dealing users from a single department or group who use a limited number of apps, and they're mostly a captive userbase. When developing external products, you're dealing with users who see the whole enchilada, and they're paying customers who can take their business elsewhere. That difference matters because a coherent user experience across multiple applications becomes much more important for paying customers who see the entire set of apps. In the IT case, neither the business nor the users themselves are typically concerned about the fact that their app doesn't look and work like some other app that some other department uses. And if for whatever reason they did care, their ability to do anything about it is more limited. While it's possible to make a business case for consistency across apps (branding to internal employees, usability for employees who use multiple apps, reduced development costs resulting from the reuse of common libraries, patterns, services, etc.), this kind of concern typically takes a backseat to the development of new business functionality. In the product case, the users do care about coherence across the entire set of apps, and they can do something about it if the experience is weak. So one major difference is the relative importance of a coherent, quality user experience. But that goal itself has significant organizational ramifications that we're already starting to see. We'll see an increased emphasis on "horizontal" activities that seek to establish standards and improve communications across teams, since such activities directly support the goal of producing coherent products. Cross-cutting teams (like user experience) will become more influential than they formerly were, we may see new cross-cutting teams (e.g. teams that look at architecture across many systems rather than just a single system), we'll probably see more presentations about what different apps do, more cross-training, etc. App development teams will have less autonomy than they formerly had in charting their own course. The user experience team (working with end users, business stakeholders and engineering teams) will specify standards around visual design, interaction design, etc. and the app teams will be expected to adopt those. We'll see test practices become more standardized. Builds and deployments across apps will be more uniform and coordinated. Monitoring, alerting, response time SLAs and other operational metrics will be more uniform across apps. The app teams won't be able to define these for themselves anymore (though they can certainly contribute to the larger discussion). Management will increasingly allocate resources in a way that seeks to optimize globally across the entire product instead of optimizing locally for individual apps . So where in the past the composition of individual app teams has been relatively fixed (developers, SQA, etc.), going forward we should expect to see more fluidity.
