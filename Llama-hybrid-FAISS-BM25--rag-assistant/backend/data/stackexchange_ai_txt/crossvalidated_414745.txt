[site]: crossvalidated
[post_id]: 414745
[parent_id]: 414277
[tags]: 
To generate an accurate curve fit, you can sample the histogram via the scipy.stats.rv_histogram function and then average over the fitted parameters from multiple iterations: n_iter = 1000 params = np.empty((n_iter, 2)) for i in range(n_iter): n_samples = 1000 hist_dist = scipy.stats.rv_histogram((y2, np.append(np.arange(k), k))) data = hist_dist.rvs(size=n_samples) a, b, c, d = scipy.stats.beta.fit(data, floc=0, fscale=k) params[i, 0] = a params[i, 1] = b a_mean = np.round(np.mean(params[:, 0]), 2) b_mean = np.round(np.mean(params[:, 1]), 2) print(a_mean, b_mean) y2_normalized_fit = scipy.stats.beta.pdf(np.arange(k), a_mean, b_mean, loc=0, scale=k) scaling_factor, _, _, _ = np.linalg.lstsq(y2_normalized_fit.reshape(-1,1), y2, rcond=None) Then, you multiply the scaling_factor by the fitted curve to get the right curve. y2_normalized_fit * scaling_factor
