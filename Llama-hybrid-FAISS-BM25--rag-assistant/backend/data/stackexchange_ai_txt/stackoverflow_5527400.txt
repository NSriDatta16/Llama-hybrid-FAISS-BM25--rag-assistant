[site]: stackoverflow
[post_id]: 5527400
[parent_id]: 
[tags]: 
ANTLR's AST tree grammar + lists

I've have read a lot trying to find a way to cleanly consume lists in ANTLR's tree grammar. Here is what I have tried and their results (I really hope I'm missing something trivial)... Using += Syntax program returns [someInterface result] : m+=method* EOF {result = new SomeClass(m);}; method returns [SomeMethod result] : This fails with... rule '+=' list labels are not allowed w/o output option If I set the output to either "AST" or "template" (the only options) the method signatures of the generated class change. That is, m will not by a List of SomeMethod(s) but rather a List of Nodes or Templates respectively. I am open to suggestions if there is a way to make this method work. Using Rule Scopes program returns [CompilesToJavaByteCode result] scope { List methods; } @init { $program::methods = new ArrayList (); } : (m=method {$program::methods.add(m);})* EOF {result = new SomeClass($program::methods);}; This seems to work, though I'll admit that I haven't tested it with nested/recursive cases yet. The End Goal I want to build a set of classes that represent my language (Class, Method, Variable, Statement, ect) so that I can do some static analysis and optimization before I generate compiled code. To that end, I need to be able to consume lists. I expected += syntax to "just work" but I might be missing something. The second method works but seem overly verbose and inelegant. The Question What is the proper why to consume a list, in ANTLR's tree grammar, to pass to my concrete classes?
