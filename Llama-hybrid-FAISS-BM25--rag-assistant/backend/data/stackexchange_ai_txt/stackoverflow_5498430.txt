[site]: stackoverflow
[post_id]: 5498430
[parent_id]: 5465584
[tags]: 
The main difference is the User-Agent string. For Internet Explorer 9, the new and improved UA string is sent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0) For compatibility view, something similar to the following string will be sent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; Zune 4.7) Notice how the compatibility view UA string identifies the browser as MSIE 7.0 ? Document mode isn't enough for compatibility view to work as intended. The reason for this is you can't truly be backwards compatible if you still tell the web server you're running IE 9 â€” it may have some server side code that identifies IE 7 browsers and dishes out content specific to that browser. Thus, the developer tools gives you the opportunity to see how your web page would look if a user clicked the "Compatibility View" icon, without switching compatibility view on permanently. For the sake of completeness, it's also worth mentioning that the app version string changes in a similar way. IE 9's app version string is: 5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0) And in compatibility view (may vary depending on software installed): 4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; Zune 4.7) These strings are very similar to the UA string, but client-side scripts may refer to this string instead of the UA string. IE 9 can still be identified in both the UA string and the app version string from the Trident/5.0 part, regardless of compatibility mode.
