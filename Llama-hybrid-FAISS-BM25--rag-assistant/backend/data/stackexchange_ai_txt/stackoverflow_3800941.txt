[site]: stackoverflow
[post_id]: 3800941
[parent_id]: 3794351
[tags]: 
It seems to me that your code is overriding a core Magento module in order to achieve what could be easily done in the layout xml configuration. I would strongly recommend the follwing: Use the built-in configuration mechanisms (e.g. layout xml - read Alan's excellent tutorial here ) instead of writing code whenever possible. Don't override the core code if you must change the behaviour of the core code, use an Observer rather than Rewrite/Override if you absolutely must Override, always call parent::whatever() For example, if you create a .xml layout file in your theme ( app/design/frontend/default/ /layout ), you could use the following code: You would then need to use a getChildHtml('my_block_name_here'); call within your phtml to position the block. So unless there is other functionality happening inside your _prepareLayout , there's no need to override the core, or even to override the default catalog.xml . EDIT (small edit above) So now in your Block (I would recommend that you call it Namespace_Module_Block_Product_Customattributes or something like that), you are not overriding the core Product_View block, but merely processing your logic for what html widgets to use to render your custom attributes. Leave the rest of the tier prices, add to cart, other generic product block code, etc to Magento to work out. If you are worried about the upgrade path for your module's users, you should definitely NOT be overriding core code. Use the configuration approach and very selectively introduce code that "plays nice" with the system rather than try to boss it around with overrides.
