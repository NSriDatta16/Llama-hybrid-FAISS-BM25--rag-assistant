[site]: datascience
[post_id]: 122846
[parent_id]: 
[tags]: 
Stick to R or switch to Python as a newby in Reinforcement Learning?

Background I would consider myself to have a decent level in R and virtually 0 skills in any other programming language - something quite common in my field. Note also that my background is not in data science, I consider myself an interested amateur in that regard. Working on a new project I took the opportunity to dive into Reinforcement Learning. The final problem I'm hoping to solve is, as far as I can tell with my limited knowledge right now, quite complex (continuous state- and action space, high stochasticity in the environment etc.). I started out by working through recommended ressources (Sutton and Barto's book, lectures by D. Silver...) and constructed some small, domain-specific problems as exercises along the way. I'm able to solve those with various algorithms, at least as long as working with tabular solution methods. However, I struggle to implement methods using function approximation. It feels like I'm hitting the limits of what I'm able to implement in R, at least given my current knowledge. Problem Searching for guideance online I found surprisingly few implemented examples for RL-algorithms using function approximation in R. Almost all examples are using Python, and many algorithms seem to be fully implemented in pytorch and/or tensorflow. However, I'm reluctant to switch to Python, since this would mean to learn a whole new language (while learning a whole new method). To add on that, I did all of my previous work in R, some parts of which I'd like to integrate into my RL-problem. At the same time I have the fear that I won't be able to tackle my final problem in R (given my limited skills and the lack of available examples) and I will have to switch anyways later on. Question Given the information above, should I stick to R and work on a deeper understanding of the underlying methods in order to implement those, or should I switch to Python to take advantage of the available resources, on the cost of learning a whole new language? Edit: When talking about 'function approximation' I refer to the approximation of state- and/or action-value functions, be it using linear combinations of features or more advanced methods such as neural networks.
