[site]: stackoverflow
[post_id]: 5709775
[parent_id]: 5709574
[tags]: 
I could do a lot of if-else statements to find which subclass constructor to call, but it wouldn't be easily extensible. One alternative is to create a "factory object" interface for your Forum classes, and then populate a map with factory instances to create each of the subclass. public interface ForumFactory { public Forum createForum(String arg); } public class FooForumFactory implements ForumFactory { public Forum createForum(String arg) { return new FooForum(arg); } } Map factories = new HashMap (); factories.put("foo", new FooForumFactory()); factories.put("bar", new BarForumFactory()); ... // Create an instance ... Forum forum = factories.get(forumType).createForum(forumName); Things would be more difficult if different subclass constructors required different arguments. But that would also be problematic for your reflective solution. In the long term, using an ORM (like Hibernate) is likely to give a more elegant solution.
