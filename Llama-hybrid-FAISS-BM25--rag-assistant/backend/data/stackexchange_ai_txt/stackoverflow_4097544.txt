[site]: stackoverflow
[post_id]: 4097544
[parent_id]: 
[tags]: 
Providing an IDispatch implementation for a connection point client

I've written a simple COM DLL inproc server with a single simple COM object. The COM object implements a connection point. I know how to create an ATL client that derives from IDispEventImpl , and uses a sink map to simplify this process. But, for the purposes of demonstration, I'd like to create a win32 console application that uses a class that calls my simple COM object, then acts as a connection point sink. I've got no idea how to provide an implementation of IDispatch - can someone recommend documentation on this, as I can't find any (I've got ATL Internals, but this doesn't seem to cover what I need ). Here's the class I've already got: #pragma once #include using namespace std; // Because we're implementing a connection points sink (_IPogFarmEvents) // in a non-ATL class, we must provide implementations for IUnknown and IDispatch. class KidWithAPogFarm : public _IPogFarmEvents { private: DWORD m_dwRefCount; LONG m_lNumPogs; public: KidWithAPogFarm() : m_dwRefCount (0), m_lNumPogs (0) { } ~KidWithAPogFarm() { } // -- IUnknown HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, void **ppvObject) { if (iid == DIID__IPogFarmEvents) { m_dwRefCount++; *ppvObject = (void *)this; return S_OK; } if (iid == IID_IUnknown) { m_dwRefCount++; *ppvObject = (void *)this; return S_OK; } return E_NOINTERFACE; } ULONG STDMETHODCALLTYPE AddRef() { m_dwRefCount++; return m_dwRefCount; } ULONG STDMETHODCALLTYPE Release() { ULONG l; l = m_dwRefCount--; if ( 0 == m_dwRefCount) delete this; return l; } // -- IDispatch STDMETHODIMP GetTypeInfoCount(UINT *pctinfo) { return E_NOTIMPL; } STDMETHODIMP GetTypeInfo( UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo ) { return E_NOTIMPL; } STDMETHODIMP GetIDsOfNames(const IID &riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId ) { return E_NOTIMPL; } STDMETHODIMP Invoke(DISPID dispIdMember, const IID &riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr ) { return E_NOT_IMPL; } // -- IAntFarmEvents STDMETHODIMP OnFarmCreated(LONG lInitialPopulation) { m_lNumPogs = lInitialPopulation; cout
