[site]: stackoverflow
[post_id]: 3552061
[parent_id]: 3550876
[tags]: 
Creating a compute farm mechanism using WCF would be straightforward IMO. As you're already using C# on Windows, this is a natural progression, compared to switching language or technology stack. An early step in this process would be to design a mechanism whereby compute-workers could advertise their availability to a master machine. Either the master would have apriori knowledge of the workers, or (better) they need a consistent mechanism to 'locate' the server, e.g. at a well known domain. Putting the master at say, www.all-your-cycles-belong-to-us.org, would all you to have a WCF service serving incoming offers of compute time. If your delegation mechanism can tune itself according to the number of workers, all the better. Defining your service, data and fault contracts between the Master and the workers may take some experimentation to achieve the best balance of programming elegance, computational throughput and flexibility/future-proofing. From experience, the kind of challenges of this (and other) approaches are: Worker goes quiet. Whether due to network issues, being 'busy' for long periods or actual downtime is hard to tell until communication to the master can be re-established. In my day job, we have thousands of machines that 'call home' periodically and going a whole hour without calling home is considered 'down'. Should you set another worker off doing the same work or wait an arbitrary amount of time for the original to complete? Only you know your algorithm, but a blend of both approaches may help. Abusing the workers. If your computational problem is genuinely difficult, you could flat-line the CPU on all the workers. Would this be acceptable? If you're renting the CPU cycles, then yes. If you're slooping spare cycles on idle machines (a la SETI), then no. Results arrive out of order. Can your results set be re-assembled in the correct order by the master if different workers finish at different times? Code versioning. If you fix the code, how do you get it sent out to all the workers to ensure that they have the right version? There are lots of options to solve this problem but its worth thinking through earlier rather than later. Dissimilar workers. Having a top-of-the-line multi-CPU worker participating in your compute farm along with lowly solo-core-solo-CPU machines would yield bizarre behaviour if you didn't know that the workers were different specs. Adapting your WCF interfaces to allow a Worker to hint how much load it could take on may be worth some attention.
