[site]: stackoverflow
[post_id]: 65923
[parent_id]: 65074
[tags]: 
The depression in the responses is overwhelming... But don't fear, we've got the holy book to exorcise the demons of legacy C++ code . Seriously just buy the book if you are in line for more than a week of jousting with legacy C++ code. Turn to page 127: The case of the horrible include dependencies. (Now I am not even within miles of Michael Feathers but here as-short-as-I-could-manage answer..) Problem : In C++ if a classA needs to know about ClassB, Class B's declaration is straight-lifted / textually included in the ClassA's source file. And since we programmers love to take it to the wrong extreme, a file can recursively include a zillion others transitively. Builds take years.. but hey atleast it builds.. we can wait. Now to say 'instantiating ClassA under a test harness is difficult' is an understatement. (Quoting MF's example - Scheduler is our poster problem child with deps galore.) #include "TestHarness.h" #include "Scheduler.h" TEST(create, Scheduler) // your fave C++ test framework macro { Scheduler scheduler("fred"); } This will bring out the includes dragon with a flurry of build errors. Blow#1 Patience-n-Persistence : Take on each include one at a time and decide if we really need that dependency. Let's assume SchedulerDisplay is one of them, whose displayEntry method is called in Scheduler's ctor. Blow#2 Fake-it-till-you-make-it (Thanks RonJ): #include "TestHarness.h" #include "Scheduler.h" void SchedulerDisplay::displayEntry(const string& entryDescription) {} TEST(create, Scheduler) { Scheduler scheduler("fred"); } And pop goes the dependency and all its transitive includes. You can also reuse the Fake methods by encapsulating it in a Fakes.h file to be included in your test files. Blow#3 Practice : It may not be always that simple.. but you get the idea. After the first few duels, the process of breaking deps will get easy-n-mechanical Caveats (Did I mention there are caveats? :) We need a separate build for test cases in this file ; we can have only 1 definition for the SchedulerDisplay::displayEntry method in a program. So create a separate program for scheduler tests. We aren't breaking any dependencies in the program, so we are not making the code cleaner. You need to maintain those fakes as long as we need the tests. Your sense of aesthetics may be offended for a while.. just bite your lip and 'bear with us for a better tomorrow' Use this technique for a very huge class with severe dependency issues. Don't use often or lightly.. Use this as a starting point for deeper refactorings. Over time this testing program can be taken behind the barn as you extract more classes (WITH their own tests). For more.. please do read the book. Invaluable. Fight on bro!
