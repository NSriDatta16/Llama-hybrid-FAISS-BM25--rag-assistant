[site]: stackoverflow
[post_id]: 1147065
[parent_id]: 1113837
[tags]: 
I have come up with a solution which is quite similar to the one suggested by James. I have an SiteSettingsService class which manages the settings for the whole site, it has a simple dependency on an interface called ISiteServiceRepository . This might not be the most elegant solution, But it is working perfectly for me. I have also configured the SiteSettingsService class as a Singleton using StructureMap. So, it saves me unnecessary instantiantion every time I need any settings. //ISiteServiceRepository, an implementation of this uses NHibernate to do just two things //i)Get all the settings, ii)Persist all the settings using System.Collections.Generic; using Cosmicvent.Mcwa.Core.Domain.Model; namespace Cosmicvent.Mcwa.Core.Domain { public interface ISiteServiceRepository { IList GetSettings(); void PersistSettings(IDictionary settings); } } //The main SiteSettingsService class depends on the ISiteServiceRepository using System; using System.Collections.Generic; using Cosmicvent.Mcwa.Core.Domain; using Cosmicvent.Mcwa.Core.Domain.Model; namespace Cosmicvent.Mcwa.Core.Services { public class SiteSettingsService : ISiteSettingsService { private readonly ISiteServiceRepository _siteServiceRepository; private IDictionary _settings; public SiteSettingsService(ISiteServiceRepository siteServiceRepository) { _siteServiceRepository = siteServiceRepository; //Fill up the settings HydrateSettings(); } public int ActiveDegreeId { get { return int.Parse(GetValue("Active_Degree_Id")); } } public string SiteTitle { get { return GetValue("Site_Title"); } } public decimal CounsellingFee { get { return decimal.Parse(GetValue("Counselling_Fee")); } } public decimal TuitionFee { get { return decimal.Parse(GetValue("Tuition_Fee")); } } public decimal RegistrationFee { get { return decimal.Parse(GetValue("Registration_Fee")); } } public void UpdateSetting(string setting, string value) { if (!string.IsNullOrEmpty(setting) && !string.IsNullOrEmpty(value)) { SetValue(setting, value); PersistSettings(); } } //Helper methods private void HydrateSettings() { _settings = new Dictionary (); IList siteRepoSettings = _siteServiceRepository.GetSettings(); if (siteRepoSettings == null) { throw new ArgumentException("Site Settings Repository returned a null dictionary"); } foreach (Setting setting in siteRepoSettings) { _settings.Add(setting.Name.ToUpper(), setting.Value); } } private string GetValue(string key) { key = key.ToUpper(); if (_settings == null) { throw new NullReferenceException("The Site Settings object is Null"); } if (!_settings.ContainsKey(key)) { throw new KeyNotFoundException(string.Format("The site setting {0} was not found", key)); } return _settings[key]; } private void SetValue(string key, string value) { key = key.ToUpper(); if (_settings == null) { throw new NullReferenceException("The Site Settings object is Null"); } if (!_settings.ContainsKey(key)) { throw new KeyNotFoundException(string.Format("The site setting {0} was not found", key)); } _settings[key] = value; } private void PersistSettings() { _siteServiceRepository.PersistSettings(_settings); } } } Hope this helps future developers facing similar problems. Any suggestions for improving this are more than welcome.
