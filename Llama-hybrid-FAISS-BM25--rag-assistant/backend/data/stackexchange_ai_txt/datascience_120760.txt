[site]: datascience
[post_id]: 120760
[parent_id]: 120723
[tags]: 
Unfortunately, there are multiple measures called gini coefficients or gini index and they are used for different things in different domains. So you are for sure not the first person to face this problem. Luckily, for your domain it is clear what coefficient to use. Gini coefficient for (credit risk) scorecards The gini coefficient to evaluate the predictive power of a credit risk scorecard is given by $$gini = 2*rocauc-1$$ This is (one of) the standard measure for evaluating credit risk scorecards, so this should be the one your colleague is calculating. So for your code, just remove the line giin from your code and use gin and you should be fine. Disclaimer: I am no expert for R, but if the code does, what it implies, then the change should be enough. If your colleagues values that strongly from yours, he probably does not compute the gini coefficient that is common for credit risk scorecards. Some Background Both, roc-auc and gini are measures that evaluate the order of the scores, not their actual value. So there should be no difference whether you use the linear term of the logistic regression as score or the logistic mapping into probabilities. The roc-auc can be interpreted as the probability that a random insolvency case gets a higher risk score than a random non-insolvency case. This means that a perfect model, where all insolvency cases get a higher score, gets a roc-auc of 100%. a model that assigns random scores independent of any feature or information gets a roc-auc of 50%. a model that often estimates the risk of insolvency cases below the one of non-insolvency cases might be below 50%. Similarly, the gini assumes that all models are better than random scores. Hence the baseline of a random score is set to 0% gini and a perfect model gets a gini of 100%. If it happens that the gini is below 0, swapping the scores (e.g. new_score = 1 - old_score ) will remove the negative sign of the gini .
