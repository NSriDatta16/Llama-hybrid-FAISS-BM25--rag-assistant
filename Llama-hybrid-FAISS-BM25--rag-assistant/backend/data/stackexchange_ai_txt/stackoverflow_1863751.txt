[site]: stackoverflow
[post_id]: 1863751
[parent_id]: 
[tags]: 
How can you prevent decay in a function template taking T by value?

Please consider this code: #include template void f(T x) { std::cout (array); } Editor's Note: the original code used typeof(array) , however that is a GCC extension. This will print 8 (or 4) 108 In the first case, the array obviously decays to a pointer and T becomes int* . In the second case, T is forced to int[27] . Is the order of decay/substitution implementation defined? Is there a more elegant way to force the type to int[27] ? Besides using std::vector?
