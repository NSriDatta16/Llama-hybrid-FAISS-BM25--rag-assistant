[site]: stackoverflow
[post_id]: 1579328
[parent_id]: 1579154
[tags]: 
Golden. The mapping between handles and objects are in thread-local storage . In a multi-threaded environment because windows are owned by threads, MFC keeps the temporary and permanent window handle map in thread local storage. The same is true for other handle maps like those for GDI objects and device contexts. Keeping the window handle maps in thread local storage ensures protection against simultaneous access by several threads. So basically, store the handle, then create a CBitmap from the handle in order to manipulate them between threads. My mistake was in the UI thread creating my CBitmap, and then accessing the CBitmap object from both threads.
