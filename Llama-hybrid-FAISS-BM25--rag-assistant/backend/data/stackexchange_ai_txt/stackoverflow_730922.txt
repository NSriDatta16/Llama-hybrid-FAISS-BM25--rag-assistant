[site]: stackoverflow
[post_id]: 730922
[parent_id]: 730789
[tags]: 
Although it is very rough, I estimate on Lines of Code. This parameter, whose meaning for productivity is close to zero, still gives you an idea of the complexity of a project. Measure the fact that on average, a developer can write circa 200, max 300 lines of code per day. Keep into account that just for coding of a single man army: A small project of 1000 lines of (logic) code can be done in one or two weeks An average complexity project of 10.000 lines of (logic) code could be completed in two or three months. A large project of 100.000 lines of (logic) code requires at least a couple of years To the logic code, you have to add the testing, which is already included in the previous estimates. To have a clue of the complexity, the Gimp is 600.000 lines of code, a kernel ranges in the million or more. To this, add the fact that if you are working waterfall, the time you need to develop the code is actually a small part of the time needed to develop specifications and design. I would estimate a 2/3 time is for specs+design, and the remaining 1/3 goes in coding, maybe even more on the specs+design part. It is really time consuming. So, track your estimate from the complexity, to the lines of code, consider the manpower you have and how much they can work in parallel, and add the overhead of specs+design, you will get a very rough estimate. I suggest you the mythical man month . It is a fantastic book on this regard.
