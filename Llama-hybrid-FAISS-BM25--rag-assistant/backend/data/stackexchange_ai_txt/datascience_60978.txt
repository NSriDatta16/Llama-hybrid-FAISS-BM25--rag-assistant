[site]: datascience
[post_id]: 60978
[parent_id]: 60946
[tags]: 
It's not DL but I suggest you start with the following approach: for every question $Q$ and its set of candidate answers $(A_1,..,A_{10})$ , represent each pair $(Q,A_i)$ as an instance with its label 0 or 1. You could start with a few simple features such as: number of words in common similarity score, e.g. cosine TFIDF ... other indicators of how well question $Q$ and answer $A_i$ match Train a regression model on this (e.g. decision tree, SVM,...). When the model is applied to a new question+answers, it returns a score (mostly between 0 and 1) for each of the 10 answers; finally select the answer which has the highest score. You can certainly improve on this idea, e.g. with sentence embeddings. Note: a simple baseline system based on the same idea would be to select the answer which has the maximum number of words in common with the question.
