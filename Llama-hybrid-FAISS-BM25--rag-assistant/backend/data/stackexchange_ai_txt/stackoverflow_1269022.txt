[site]: stackoverflow
[post_id]: 1269022
[parent_id]: 1268924
[tags]: 
In MySQL it's hard to optimize " OR " conditions. One common remedy is to split the query into two simpler queries and use UNION to combine them. (SELECT metadata.creation_date, datatype.name, player.id FROM metadata JOIN datatype ON datatype.id = metadata.datatype_id JOIN player ON player.metadata_id = metadata.id WHERE datatype.name = 'player' AND player.team_id = 1) UNION ALL (SELECT metadata.creation_date, datatype.name, equipment.id FROM metadata JOIN datatype ON datatype.id = metadata.datatype_id JOIN equipment ON equipment.metadata_id = metadata.id WHERE datatype.name = 'equipment' AND equipment.team_id = 1) ORDER BY creation_date; You have to use the parentheses so that the ORDER BY applies to the result of the UNION instead of only to the result of the second SELECT . update: What you're doing is called Polymorphic Associations, and it's hard to use in SQL. I even call it an SQL antipattern, despite some ORM frameworks that encourage its use. What you really have in this case is a relationship between teams and players, and between teams and equipment. Players are not equipment and equipment are not players; they don't have a common supertype. It's misleading in both an OO sense and a relational sense that you have modeled them that way. I'd say dump your metadata and datatype tables. These are anti-relational structures. Instead, use the team_id (which I assume is a foreign key to a teams table). Treat players and equipment as distinct types. Fetch them separately if you can't use UNION in your ORM. Then combine the result sets in your application. You don't have to fetch everything in a single SQL query.
