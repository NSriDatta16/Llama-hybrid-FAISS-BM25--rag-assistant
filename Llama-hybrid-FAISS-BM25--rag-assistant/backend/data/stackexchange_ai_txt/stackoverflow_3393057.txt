[site]: stackoverflow
[post_id]: 3393057
[parent_id]: 3381199
[tags]: 
While the below is not exactly elegant, tested with 2K, XP, Vista and 7, it seems to work. The idea is to use the dialog's behavior that, when a valid directory is entered into the file name box, if 'Open' button is pressed, the dialog switches to that folder. It does not work with 'Vista style' dialogs, I don't have any acquaintance with the Common Item Dialog . So the UseLatestCommonDialogs must be set to false before showing a dialog. Also note that the OnTypeChange event is not fired when the dialog is initially launched, one can set the FilterIndex and InitialDir before showing the dialog. type TForm1 = class(TForm) Button1: TButton; OpenDialog1: TOpenDialog; procedure Button1Click(Sender: TObject); procedure FormCreate(Sender: TObject); procedure OpenDialog1TypeChange(Sender: TObject); procedure OpenDialog1FolderChange(Sender: TObject); private FDlgCleanUp: Boolean; FDlgFocusCtrl: HWnd; FSaveDlgFName: array [0..255] of Char; public end; [...] uses CommDlg, Dlgs; procedure TForm1.Button1Click(Sender: TObject); begin if OpenDialog1.Execute then ShowMessage(OpenDialog1.FileName); end; type TFileExt = (feText = 1, feRichText, feDocument); const FileExts: array [TFileExt] of string = ('txt', 'rtf', 'doc'); FileExtDesc: array [TFileExt] of string = ('text (*.txt)', 'rich text (*.rtf)', 'document (*.doc)'); procedure TForm1.FormCreate(Sender: TObject); var fe: TFileExt; begin OpenDialog1.Options := OpenDialog1.Options - [ofOldStyleDialog]; NewStyleControls := True; UseLatestCommonDialogs := False; OpenDialog1.Filter := ''; for fe := Low(FileExts) to High(FileExts) do OpenDialog1.Filter := OpenDialog1.Filter + FileExtDesc[fe] + '|*.' + FileExts[fe] + '|'; end; function GetIniPathForExtension(const Ext: string): string; begin // Get corresponding path from an ini file.... Result := ExtractFilePath(Application.ExeName) + Ext; end; procedure TForm1.OpenDialog1TypeChange(Sender: TObject); var Dialog: TOpenDialog; Dlg: HWnd; Path: string; begin Dialog := Sender as TOpenDialog; Dlg := GetParent(Dialog.Handle); Path := GetIniPathForExtension(FileExts[TFileExt(Dialog.FilterIndex)]); ForceDirectories(Path); // remember what's in file name, have to put it back later GetDlgItemText(Dlg, cmb13, @FSaveDlgFName, 256); SendMessage(GetDlgItem(Dlg, cmb13), WM_SETREDRAW, 0, 0); // reduce flicker FDlgFocusCtrl := GetFocus; // set file name to new folder SendMessage(Dlg, CDM_SETCONTROLTEXT, cmb13, Longint(PChar(Path))); // weird OS: windows - the below is only necessary for XP. 2K, Vista and 7 // clicks fine without it, XP does not! windows.SetFocus(GetDlgItem(Dlg, IDOK)); // do not cleanup here, with Vista and 7 folder change seems to happen // asynchronously - it might occur later than setting the file name and that // clears/reverts the edit box. FDlgCleanUp := True; // click 'Open' to change to folder SendMessage(GetDlgItem(Dlg, IDOK), BM_CLICK, IDOK, 0); end; procedure TForm1.OpenDialog1FolderChange(Sender: TObject); var Dlg: HWnd; begin // set the file name and focus back if FDlgCleanup then begin // do not intervene if we didn't cause the change Dlg := GetParent((Sender as TOpenDialog).Handle); SendMessage(GetDlgItem(Dlg, cmb13), WM_SETREDRAW, 1, 0); SetDlgItemText(Dlg, cmb13, @FSaveDlgFName); windows.SetFocus(FDlgFocusCtrl); end; FDlgCleanup := False; end;
