[site]: stackoverflow
[post_id]: 1197640
[parent_id]: 1197616
[tags]: 
Simply (in fact, extremely simply), classes allow you to organize code in logical units as well as provide containers and templates for user-created objects. Let's say you have a car... A car can has a capacity and people inside. class Car { private $people = array(); private $capacity; function __construct($capacity) { $this->capacity = $capacity; } function addPerson($name) { if(count($this->people) >= $this->capacity) { throw new Exception("Car is already at capacity"); } else { $this->people[] = $name; } } function getPeople() { return $this->people; } function getCapacity() { return $this->capacity; } } Now, we can start using those cars: $aliceCar = new Car(2); $aliceCar->addPerson("Alice"); $bobCar = new Car(4); $bobCar->addPerson("Bob"); $bobCar->addPerson("Jake"); I now have 2 cars (instances), which holds different data. echo implode(',', $aliceCar->getPeople()); // Alice echo $aliceCar->getCapacity(); // 2 echo implode(',', $bobCar->getPeople()); // Bob,Jake echo $bobCar->getCapacity(); // 4 I might also want to have a van, which will have an additional property for doors: class Van extends Car { private $num_doors; function __construct($capacity, $num_doors) { parent::__construct($capacity); // Call the parent constructor $this->num_doors = $num_doors; } function getNumDoors() { return $this->num_doors; } } Now let's use that van: $jakeVan = new Van(7, 5); // Van is ALSO a Car $jakeVan->addPerson("Ron"); //Jake is with Bob now, so his son is driving the Van $jakeVan->addPerson("Valery") //Ron's girlfriend echo implode(',', $jakeVan->getPeople()); // Ron,Valery echo $jakeVan->getCapacity(); // 7 echo $jakeVan->getNumDoors(); // 5 Now maybe you can see how we could apply those concepts towards the creation of, for example, a DBTable and a User class. In fact, it's hard to really start explaining why classes simplify one's life without getting into the concepts of Object Oriented Programming (abstraction, encapsulation, inheritance, polymorphism). I recommend you read the following book. It will help you grasp the core concepts of OOP and help you understand why objects to really make your life easier. Without an understanding of those concepts, it's easy to dismiss classes as just another complication. PHP 5 Objects, Patterns, and Practice PHP 5 Objects, Patterns, and Practice http://ecx.images-amazon.com/images/I/51BF7MF03NL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA240_SH20_OU01_.jpg Available at Amazon.com
