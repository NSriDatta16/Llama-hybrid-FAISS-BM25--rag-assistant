[site]: stackoverflow
[post_id]: 4934753
[parent_id]: 4934550
[tags]: 
I dunno how fast this is, but this is what I would do? static bool HasSuffix(string check, string suffix) { int offset = check.Length - suffix.Length; for (int i = 0; i edit: OOPS x2 edit: So I wrote my own little benchmark... does this count? It runs 25 trials of evaluating one million strings and takes the average of the difference in performance. The handful of times I ran it it was consistently outputting that CharCompare was faster by ~10-40ms over one million records. So that is a hugely unimportant increase in efficiency (.000000001s/call) :) All in all I doubt it will matter which method you implement. class Program { volatile static List strings; static double[] results = new double[25]; static void Main(string[] args) { strings = new List (); Random r = new Random(); for (int rep = 0; rep list; int count; public Thread t; public DateTime finish; public OrdinalWorker(List l) { list = l; } public void Run() { t = new Thread(() => { string suffix = "abc"; for (int i = 0; i list; int count; public Thread t; public DateTime finish; public CharWorker(List l) { list = l; } public void Run() { t = new Thread(() => { string suffix = "abc"; for (int i = 0; i
