[site]: stackoverflow
[post_id]: 139570
[parent_id]: 139325
[tags]: 
The boost::assign library has all sorts of neat stuff to help out initializing the contents of a container. My thought that this could be used to avoid explicitly iterating through the map. Unfortunately, maps are curious beasts difficult to initialize because the keys must be unique. The bottom line is that a simple for loop is probably the best way to initialize a map. It may not be super elegant, but it gets the job done and is immediatly comprehensible by anyone with any acquaintance with the STL. map myMap; for( int k=0;k (k,string(""))); The rest of this post describes the journey I took to reach the above conclusion. The boost::assign makes it simple to assign a small number of values to a map. map m; insert( m )( "Bar", 1 )( "Foo", 2 ); or map next = map_list_of(1,2)(2,3)(3,4)(4,5)(5,6); In your case, where you want to initialize the entire map with the same value, there are the utilities repeat and repeat_fun. Something like this should work with a multimap ( untested code snippet ) pair init( 0,string("")); multimap myMap = repeat(1000,init); As Konrad Rudolph as pointed out, you cannot initialize a map with the same exact value, because the keys must be unique. This makes life much more complex ( fun? ). Something like this, perhaps: map myMap; struct nextkey { int start; nextkey( s ) : start( s ) {} pair operator () () { return pair (start++,string("")); } }; myMap = repeat_fun(1000,nextkey(0)); Now, this is getting so complex, I now think a simple iteration IS the way to go map myMap; for( int k=0;k (k,string("")));
