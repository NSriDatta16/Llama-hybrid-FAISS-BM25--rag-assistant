[site]: datascience
[post_id]: 80206
[parent_id]: 
[tags]: 
How to combine two differently scaled, but equally important "running" signals into a reward function?

I asked this question on Artificial Intelligence, but got no answer, so I am moving it here. I have two signals that I want to use to model a reward for a reinforcement learning algorithm. The first one is the CPU TIME: running mean from this diagram: The second one is the running mean of the MAX RESIDUAL from this diagram: Both signals are equally important, but they have very different scales. I could combine the signals linearly together like this: $r = w_\rho \rho + w_\tau \tau$ where $r$ is the reward function, $\tau$ is the CPU TIME: running mean , and $\rho$ is the MAX RESIDUAL . The problem is, how to set the weights $w_\tau,w_\rho$ to make the contributions equally important if $\rho$ and $\tau$ are on very different scales? Reinforcement learning algorithms will learn policies based on the reward, and if one signal has values that are much smaller than the other, it will influence the reward much less, which is not the behavior I would like to model. Edit : Dataset on Kaggle Edit : comment from Pedro It seems that a linear combination of signals is possible for the scaled mean CPU Time (mean to get rid of oscillations) and the scaled MAX residual:
