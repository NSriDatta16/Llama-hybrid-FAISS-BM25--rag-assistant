[site]: datascience
[post_id]: 12186
[parent_id]: 
[tags]: 
Fitting lines through large point clouds

I have a large set of points (order of 10k points) formed by particle tracks (movement in the xy plane in time filmed by a camera, so 3d - 256x256px and ca 3k frames in my example set) and noise. These particles travel on approximately straight lines roughly (but only roughly) in the same direction, and so for the analysis of their trajectories I am trying to fit lines through the points. I tried to use Sequential RANSAC, but can't find a criterion to reliably single out false positives, as well as T- and J-Linkage, which were too slow and also not reliable enough. Here is an image of a part of the dataset with good and bad fits I got with sequential Ransac: I'm using the centroids of the particle blobs here, blob sizes vary between 1 and about 20 pixels. I found that subsamples using for example only every 10th frame worked quite well too, so the data size to be processed can be reduced this way. I read a blog post about all the things neural networks can accomplish, and would like to ask you if this would be a feasible application for one before I start reading (I come from a non-maths background, so I would have to do quite a bit of reading)? Or could you suggest a different method? Thanks! Addendum: Here is code for a Matlab function to generate a sample point cloud containing 30 parallel noisy lines, which I can't distinguish yet: function coords = generateSampleData() coords = []; for i = 1:30 randOffset = i*2; coords = vertcat(coords, makeLine([100+randOffset 100 100], [200+randOffset 200 200], 150, 0.2)); end figure scatter3(coords(:,1),coords(:,2),coords(:,3),'.') function linepts = makeLine(startpt, endpt, numpts, noiseOffset) dirvec = endpt - startpt; linepts = bsxfun( @plus, startpt, rand(numpts,1)*dirvec); % random points on line linepts = linepts + noiseOffset*randn(numpts,3); % add random offsets to points end end
