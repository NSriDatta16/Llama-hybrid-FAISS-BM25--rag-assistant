[site]: stackoverflow
[post_id]: 3851505
[parent_id]: 3851483
[tags]: 
Since Java5, arrays are very rarely the best way to store data - generic collections are almost always superior: generic elements (especially with wildcards) bring type safety and flexibility - you can use not only List but List and List , as opposed to T[] (which corresponds to the second of the three variants, not the first) subtyping for generics is invariant , which in brief means that e.g. a List is not a List - this saves you from a lot of runtime exceptions, because the compiler can detect them and give error messages arrays are fixed size, collections can dynamically resize themselves as needed collections come in lots of different flavors, with distinct capabilities, useful for different scenarios - e.g. linked list, queue, map, set. Arrays can be usually directly replaced by ArrayList , but if you need associative, ordered, prioritized, unique-value, thread-safe, immutable etc. storage, you would be hard pressed with an array collections have several useful methods, e.g. contains you can only create arrays of reifiable types - i.e. you can't create a List []
