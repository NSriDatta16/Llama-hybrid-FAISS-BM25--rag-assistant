[site]: stackoverflow
[post_id]: 579126
[parent_id]: 578812
[tags]: 
As David and and Il-Bhima note, functions can be passed into other functions just like any other type of object. When you pass a function in, you simply call it like you ordinarily would. People sometimes refer to this ability by saying that functions are first class in Python. At a slightly greater level of detail, you should think of functions in Python as being one type of callable object . Another important type of callable object in Python is class objects; in this case, calling a class object creates an instance of that object. This concept is discussed in detail here . Generically, you will probably want to leverage the positional and/or keyword argument feature of Python, as described here . This will allow you to write a generic minimizer that can minimize prediction functions taking different sets of parameters. I've written an example---it's more complicated than I'd like (uses generators!) but it works for prediction functions with arbitrary parameters. I've glossed over a few details, but this should get you started: def predict(data, k1=None, k2=None): """Make the prediction.""" pass def expected(data): """Expected results from data.""" pass def mean_abs_err(pred, exp): """Compute mean absolute error.""" pass def gen_args(pred_args, args_to_opt): """Update prediction function parameters. pred_args : a dict to update args_to_opt : a dict of arguments/iterables to apply to pred_args This is a generator that updates a number of variables over a given numerical range. Equivalent to itertools.product. """ base_args = pred_args.copy() #don't modify input argnames = args_to_opt.keys() argvals = args_to_opt.values() result = [[]] # Generate the results for argv in argvals: result = [x+[y] for x in result for y in argv] for prod in result: base_args.update(zip(argnames, prod)) yield base_args def minimize(pred_fn, pred_args, args_to_opt, err_fn, data): """Minimize pred_fn(data) over a set of parameters. pred_fn : function used to make predictions pred_args : dict of keyword arguments to pass to pred_fn args_to_opt : a dict of arguments/iterables to apply to pred_args err_fn : function used to compute error data : data to use in the optimization Returns a tuple (error, parameters) of the best set of input parameters. """ results = [] for new_args in gen_args(pred_args, args_to_opt): pred = pred_fn(data, **new_args) # Unpack dictionary err = err_fn(pred, expected(data)) results.append((err, new_args)) return sorted(results)[0] const_args = {k1: 1} opt_args = {k2: range(10)} data = [] # Whatever data you like. minimize(predict, const_args, opt_args, mean_abs_err, data)
