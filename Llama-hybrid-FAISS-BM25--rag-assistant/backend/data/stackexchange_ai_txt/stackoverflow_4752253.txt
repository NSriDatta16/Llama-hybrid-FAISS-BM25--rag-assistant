[site]: stackoverflow
[post_id]: 4752253
[parent_id]: 
[tags]: 
Is there a way to track a UIPinchGesture when one finger leaves and subsequently returns?

I have an iPad app that makes extensive use of UIGestureRecognizers of all flavors. Generally, I'm a big fan. I have one nagging and very specific issue with a UIPinchGestureRecognizer: Consider a scenario where a user makes a pinch gesture. Then, without moving one finger AT ALL , removes the other finger and replaces it in a different location and continues the pinch. (It's not as impossible as it sounds). My problem seems to lie specifically in the UIGestureRecognizer's general inability to notice when a finger leaves the screen and trigger any sort of action. I've noticed this in other places (touchesBegan and touchesEnded) as well, but I've been able to hack around it. Not this time. Here's how the action looks to UIGestureRecognizer: UIGestureRecognizerStateBegan, as the pinch starts. n UIGestureRecognizerStateChangeds, while the pinch changes. Awkward silence as the user removes a finger. Awkward silence as the user replaces the finger, probably far away. Another UIGestureRecognizerStateChanged, as the pinch resumes. 5. Now, I have a problem at step 5. Since nothing is happening in the handler at steps 3 and 4, it transitions perfectly seamlessly from UIGestureRecognizerStateChangeds in 2 and 5, but a lot has happened. To the handler, it looks like the user just made an incredibly fast pinch, with the rebellious finger traveling potentially hundreds of screen units in the time between handler messages. Now, if it were impossible for the user to actually make a pinch that fast, I could just put a threshold on allowable finger position deltas between updates. But it is possible. A fast pinch gesture can indeed have a user's finger traveling such great distances. So the climax of the problem is this; UIPinchGestureRecognizer's inability to distinguish the odd situation above from a fast pinch gesture. I need to handle these in very different ways, and right now I have no way whatsoever to tell the difference. Why can't the OS tell me when a finger leaves the screen? Is this a feature of the capacitive screen hardware or an OS bug? Or... intentional design...?
