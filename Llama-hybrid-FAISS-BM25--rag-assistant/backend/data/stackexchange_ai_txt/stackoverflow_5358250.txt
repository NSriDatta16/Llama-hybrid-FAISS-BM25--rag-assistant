[site]: stackoverflow
[post_id]: 5358250
[parent_id]: 1461598
[tags]: 
In general setters and getters were a bad hack by the early GUI builders (borland) to get around the fact that all variables should be private (Really, this is absolutely necessary) Some people call them an abstraction, but they are not. A boilerplate setter/getter is no better than a public member. They still allow full access to the variable at times the class can't control and still restrict in-class changes (if your variable is an int, you still have to change everything that calls the setter and getter to change the variable to a string) Getters and Setters encourage accessing the data of a class from outside the class. Any code that accesses a member of a class should probably exist within that class (as your design states) and therefore shouldn't need setters or getters. They SHOULD be unnecessary. Also forcing a Setter into all your classes is horrid, it means that your classes simply can't be immutable whereas you should actually have a Really Good Reason to make a class mutable. That said, they are kind of useful for cross-cutting concerns like persistance engines and GUI builders where they can get and set values and the class can monitor what was got or changed and modify or validate it. A better pattern for those systems that need the cross-cutting variable access would be to access the variable directly through reflection BUT to call a setter or getter if one exists--making the setter and getter private if possible. This would allow the non-OO cross-cutting code to work correctly, would allow your class to modify sets and gets when it needs to and allow getters (which are sometimes really useful) where necessary.
