[site]: stackoverflow
[post_id]: 3377060
[parent_id]: 3377014
[tags]: 
"One more level of indirection" (sometimes proposed as programming's magic panacea;-) -- just like for typical decorators like property . E.g.: def makefisher(fun): def fisher(self): return '{0} fish'.format(fun(self)) return fisher class one(object): def number(self): return self._number() def _number(self): return 'one' number_fisher = makefisher(number) class two(one): def _number(self): return 'two' Basically, the function you wrap is the "organizing function" in a peculiarly simple variant of the Template Method DP, and the one you override is the "hook function" in that same DP. Or at least, that's one way to look at it, the other being the "extra level of indirection" one I started out with;-).
