[site]: stackoverflow
[post_id]: 2860930
[parent_id]: 2860917
[tags]: 
Here are some articles detailing problems with the Large Object Heap. It sounds like what you might be running into. http://connect.microsoft.com/VisualStudio/feedback/details/521147/large-object-heap-fragmentation-causes-outofmemoryexception Dangers of the large object heap: http://www.simple-talk.com/dotnet/.net-framework/the-dangers-of-the-large-object-heap/ Here is a link on how to collect data on the Large Object Heap (LOH): http://msdn.microsoft.com/en-us/magazine/cc534993.aspx According to this, it seems there is no way to compact the LOH. I can't find anything newer that explicitly says how to do it, and so it seems that it hasn't changed in the 2.0 runtime: http://blogs.msdn.com/maoni/archive/2006/04/18/large-object-heap.aspx The simple way of handling the issue is to make small objects if at all possible. Your other option to is to create only a few large objects and reuse them over and over. Not an idea situation, but it might be better than re-writing the object structure. Since you did say that the created objects (arrays) are of different sizes, it might be difficult, but it could keep the application from crashing.
