[site]: stackoverflow
[post_id]: 5368200
[parent_id]: 
[tags]: 
How to convert one type to another using reflection?

I have a two types that are very similar (i.e. the member names are very similar). Is there an elegant way to copy one type to another, without having to copy each individual member by hand? Update Here is some sample source code: main() { FromCsvFile x = new FromCsvFile(fileName); OptionsEnt y = x.ToOptionsEnt(); // See helper function below. } // Chained helper function to convert type "FromCsvFile" to type "OptionsEnt". // Want to replace this with something more elegant (perhaps with reflection?). // Notice the corner cases, i.e. the "ExpirationDate" is a special conversion. public static OptionsEnt ToOptionsEnt(this FromCsvFile fromCsvFile) { return new OptionsEnt { Last = fromCsvFile.Last, Ask = fromCsvFile.Ask, Bid = fromCsvFile.Bid, Delta = fromCsvFile.Delta, EODsnapshotNewYorkTime = fromCsvFile.EODsnapshotNewYorkTime, Exchange = fromCsvFile.Exchange, ExpirationDate = fromCsvFile.Expiration.ToTypeIceDate(), Gamma = fromCsvFile.Gamma, IV = fromCsvFile.IV, LastDate = fromCsvFile.Date.ToTypeIceDate(), AdjustedStockClose = fromCsvFile.AdjustedStockClose, MeanPrice = fromCsvFile.MeanPrice, OptionType = fromCsvFile.OptionType == "C" ? OptionTypeEnum.enCall : OptionTypeEnum.enPut, OpenInterest = fromCsvFile.OpenInterest, Rho = fromCsvFile.Rho, StockSymbol = fromCsvFile.SymbolStock, StrikePrice = fromCsvFile.StrikePrice, Symbol = fromCsvFile.Symbol, StockPriceForIV = fromCsvFile.StockPriceForIV, Star = fromCsvFile.Star, Theta = fromCsvFile.Theta, Vega = fromCsvFile.Vega, Volume = fromCsvFile.Volume, IVnotInterpolated = fromCsvFile.IVnotInterpolated }; } Update Decided to go with AutoMapper. Here is the code that replaces all of the code above (assuming that all member names are of the same name and type): main() { FromCsvFile x = new FromCsvFile(fileName); OptionsEnt y = Mapper.Map (x); } As we need some custom converters (i.e. DateTime >> IceDateTime), here is the extra line of code that includes a custom mapping for the parameter "ExpirationDate". Adding this line avoids an exception being thrown as it doesn't know how to convert dates from one format to another. Mapper.CreateMap ().ConvertUsing(ConverterIceTypeIceDate.ToTypeIceDate);
