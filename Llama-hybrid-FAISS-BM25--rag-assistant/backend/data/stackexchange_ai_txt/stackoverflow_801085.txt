[site]: stackoverflow
[post_id]: 801085
[parent_id]: 800946
[tags]: 
The whole idea behind layering an application is that each layer does not depend on implementation details of the layer(s) below. For example, in your code you have a T-SQL statement inside your presentation layer. This means you have a direct dependency of your presentation layer on your database (the bottom layer). If you make a change in your database, you must also make a change in your presentation layer. Ideally this is not what you want. The presentation layer should only be concerned about presenting data, not about how to retrieve it. Suppose you move your whole database into CSV files (I know, crazy idea), then your presentation layer should not be aware of this at all. So ideally, you have a business layer method that returns just the data you want to show to the user. You should take a look at ObjectDataSource instead of SqlDataSource . SqlDataSource is nice for small prototyping projects, but you should not use it for any more serious projects. Between business layer and data layer you should have a similar separation. The data layer is responsible for getting the data you want from some storage location (database, CSV file, web service, ...). Again, ideally, the business layer should not depend on the implementation details of the data layer. If you're talking to SQL Server for example, you should not return a SqlDataReader instance to your business layer. By doing this you create a dependency of your business layer on an implementation detail of your data layer: the actual database it is retrieving it's data from. In practice you see that the business layer does depend on implementation details of the data layer in some way or another and usually that's not a bad thing. When was the last time you decided to switch databases? But eliminating dependencies and isolating implementation details as much as possible almost always results in an application that's easier to maintain and understand. You can find a similar explanation here .
