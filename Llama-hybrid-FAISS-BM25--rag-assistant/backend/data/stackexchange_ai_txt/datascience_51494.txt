[site]: datascience
[post_id]: 51494
[parent_id]: 51444
[tags]: 
Considering Ben Reiniger's answer I've made some change in my sklearn transformer : class Cat2Rat( BaseEstimator , TransformerMixin ) : def __init__( self , col2trans ) : self._col2trans = col2trans def fit( self , X , y = None ): self._dic_col_p = {} for col in self._col2trans : p = X[ col ].value_counts() / X.shape[0] dic = dict( [ ( i , p[i] ) for i in ( X[ col ].value_counts() ).index ] ) self._dic_col_p.update( { col : dic } ) return self def transform( self , X , y = None ) : for col , dic_p in self._dic_col_p.items() : X.replace( { col : dic_p } , inplace = True ) return X The fit method now produce a dictionary with keys containing columns names and values containing the proportion of each columns value. For example, self._dic_col_p contains after fitting : { 'four' : {'w': 0.6, 'v': 0.4} , 'five' : {'c': 0.4, 'b': 0.4, 'a': 0.2} } where : myarray = np.array([ [ 1 , 1 , 3 , 'v' , 'a' , 0 ] , [ 2 , 2 , 2 , 'v' , 'b' , 1 ] , [ 4 , 5 , 1 , 'w' , 'c' , 1 ] , [ 2 , 1 , 9 , 'w' , 'c' , 1 ] , [ 1 , 0 , 4 , 'w' , 'b' , 1 ] ] ) colnames = [ 'one', 'two', 'three' , 'four' , 'five' , 'target' ] df = pd.DataFrame( myarray , columns = colnames ) Thks.
