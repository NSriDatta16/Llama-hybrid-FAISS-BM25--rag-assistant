[site]: stackoverflow
[post_id]: 4588920
[parent_id]: 4588727
[tags]: 
Just to add 2 things about the other answers, remember inline is not an order, is more a guess of what the compiler should do, unless you force inline. Most compilers can decide when to inline a function, even if you did not declare it inline. It's not a must , it is a should . Sometimes you really need to include such function/structs/classes definitions in the header, and sometimes they are not trivial or that simple. But those definitions are usually some auxiliar functions you need and you just don't want to include them on the main file, just to organize things better. The best examples I ever seen (ok, and I didn't see those many) about this practice is game source code (that's my main interest :) ). By the way, I usually do not put any declaration on header files (except structs and enums), I put them on separated files, unless if: There are only a few declarations/aux functions to be made; or These declarations are functions that I will use in another contex (of the same project, in the case) and I just think it's better to treat them as a separated 'auxiliar library' (within the same context). Hope it helps somewhat.
