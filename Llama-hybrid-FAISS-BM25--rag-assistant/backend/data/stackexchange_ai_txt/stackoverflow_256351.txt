[site]: stackoverflow
[post_id]: 256351
[parent_id]: 118630
[tags]: 
Actually, the second is preferred. As stated in the c++ standard, 3.7.2/2: Automatic storage duration If a named automatic object has initialization or a destructor with side effects, it shall not be destroyed before the end of its block, nor shall it be eliminated as an optimization even if it appears to be unused, except that a class object or its copy may be eliminated as specified in 12.8. That is, because an unnamed temporary object is created using a copy constructor, the compiler may not use the return value optimization. For the second case, however, the unnamed return value optimization is allowed. Note that if your compiler implements named return value optimization, the best code is const T operator+(const T& lhs, const T& rhs) { T temp(lhs); temp +=rhs; return temp; }
