[site]: stackoverflow
[post_id]: 4286460
[parent_id]: 4286092
[tags]: 
I've just tested this and it works for me. It's general concept code, but I hope it helps. MyView.xaml MyView.cs public MyView() { InitializeComponent(); LoadItems(); DataContext = this; } public IEnumerable Payees { get; set; } private void LoadItems() { Payees = PayeeManager.GetPayees(); } private void Button_Click(object sender, RoutedEventArgs e) { cbPayee.SelectedValue = new Payee(2, "Steve").ID; } Payee.cs public class Payee { public int ID { get; set; } public string Name { get; set; } public Payee() { } public Payee(int id, string name) { ID = id; Name = name; } } Technically, I'd encourage you to use a MVVM approach where a View Model serves as the data context for the View, but this should get you in the right direction.
