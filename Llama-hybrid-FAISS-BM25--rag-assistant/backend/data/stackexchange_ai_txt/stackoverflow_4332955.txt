[site]: stackoverflow
[post_id]: 4332955
[parent_id]: 4328907
[tags]: 
XmlDocument.CreateElement accepts three params: a node type, a node name, and a namespace. In your example, since your child element is named "add", it's an element (type==1), and it is part of the global xml namespace, you would call xmlDoc.CreateElement(1, "add", "") . That gives you an empty element. To insert the data you want (the Context="General" attribute, and all the child elements), you'd then need to make successive calls to the DOM manipulation methods, to add in each child element, each attribute, and so on. Pretty laborious. But you already have the xml fragment as a string. So instead of creating the element using DOM methods, what you can do is create a 2nd XmlDocument and tell it to get its content from the string. Then grab the documentElement from that 2nd doc. Then call appendChild on the appropriate node in first doc, passing the documentElement from the 2nd doc. something like this: Function GetElementFromXmlString(xmlString) Dim doc set doc = CreateObject("Msxml2.DOMDocument.6.0") doc.async = False doc.preserveWhiteSpace= False doc.loadXML(xmlString) Set GetElementFromXmlString = doc.documentElement End Function Sub Main() Set doc1 = CreateObject("Msxml2.DOMDocument.6.0") doc1.async = False doc1.preserveWhiteSpace= False ' True doc1.load("DataConfiguration.xml") ' generate an Element from an XML string Dim xmlString xmlString = " " & _ " " & _ " " & _ " "& _ " " Dim newElt Set newElt = GetElementFromXmlString(xmlString) ' get the first child node of type=Element under the document root element in ' doc1. This is not the same as doc1.documentElement.firstChild. There can ' be text nodes, etc. Dim node1 Set node1 = doc1.documentElement.selectSingleNode("./*[position()=1]") ' append the element to the node node1.appendChild(newElt) WScript.echo (PrettyPrintXml (doc1)) End Sub Main() ...where the PrettyPrintXml function is defined like this: Function PrettyPrintXml(xmldoc) Dim reader set reader = CreateObject("Msxml2.SAXXMLReader.6.0") Dim writer set writer = CreateObject("Msxml2.MXXMLWriter.6.0") writer.indent = True writer.omitXMLDeclaration = True reader.contentHandler = writer reader.putProperty "http://xml.org/sax/properties/lexical-handler", writer reader.parse(xmldoc) PrettyPrintXml = writer.output End Function The output of this, for me, is:
