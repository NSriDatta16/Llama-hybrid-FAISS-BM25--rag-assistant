[site]: stackoverflow
[post_id]: 5304844
[parent_id]: 
[tags]: 
How to optimize use of querysets with lists

I have a model that has a couple million objects. Each object represents a call made/received by a company. To simplify things, let's say this model, Call, has these fields: calldate, context, channel. My goal is to know the average # of calls made and received during each hour of the day of the month (load by hour). The catch is: I need to find this for port1 and port2 separately. As of now, my code works fine, except that it takes around 1 whole minute to give me the result for a range of 4 months and I it seems extremely inefficient. I've done some simple profiling and discovered that the extend is taking around 99% of the processing time: queryset = Call.objects.filter(calldate__gte='SOME_DATE') port1, port2 = [],[] port1.extend(queryset.filter(context__icontains="e1-1")) port2.extend(queryset.filter(context__icontains="e1-2")) channels_in_port1 = ["Port/%d-2" % x for x in range(1,32)] channels_in_port2 = ["Port/%d-2" % x for x in range(32,63)] for i in channels_in_port1: port1.extend(queryset.filter(channel__icontains=i)) for i in channels_in_port2: port2.extend(queryset.filter(channel__icontains=i)) port1 and port2 have around 150k objects combined now. As soon as I have all calls for port1 and port2 , I'm good to go. The rest of the code is basically some for loops for port1 and port2 that sums up and takes the average of calls according to the hour/day/month. Trivial stuff. I tried to avoid using any "extend" by using itertools.chain and chaining the querysets instead. However, that made the processing time shift to the part where I do the trivial for loops to calculate the load by hour. Any alternatives? Better ways to filter the queryset? Thanks very much!!
