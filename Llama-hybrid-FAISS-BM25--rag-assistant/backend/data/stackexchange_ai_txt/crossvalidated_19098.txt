[site]: crossvalidated
[post_id]: 19098
[parent_id]: 18658
[tags]: 
General rules for when to use a neural network: 1) you can tell, relatively easily, what the right answer is, but not describe how you know that's the right answer; if you know what steps to take to get the right answer, then code it rather than training a NN, and if you can't tell what the right answer is likely to be, likely a NN won't be able to either 2) 90% accuracy is good enough (e.g. when other techniques give substantially less); NN by their nature do not give watertight 100% accuracy 3) you just need the right answer, not an understanding of how; NN's do not, by their nature, tend to give much insight into the nature of the system By the way, giving a NN both the raw data and transforms of it (averages, deltas, etc.) and letting the learning algorithm decide which are useful for prediction is better than figuring it out yourself; if you determine everything about which factors are important and how to code them, you have done most of the work (not all) which a NN can do for you anyway. p.s. running a NN many times and taking the best result is a good idea; any good NN implementation is stochastic, and different runs may be better or worse by a substantial amount.
