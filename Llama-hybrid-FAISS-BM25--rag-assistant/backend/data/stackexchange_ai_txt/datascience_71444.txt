[site]: datascience
[post_id]: 71444
[parent_id]: 
[tags]: 
Tensorflow data API: Building continuous streams of data from a Dataset of Datasets

I'm trying to build a language model with LSTMs (like ELMO). I've got a lot of documents and want to split them into words as input, but keep their order. So it should get all words of the first document in order, then get the next document, and so on. So far so good, got a working pipeline for that, until batching comes in. As Tensorflow RNNs consider every entry in a batch a unique sequence, I need to start batching at document level and split into words afterwards. At this point I'm working with batches of tf.data.Dataset , which isn't all that beautiful, but manageable. Since these Datasets are highly variable in length, this gets complicated, especially since I don't want to pad, but just want the next document to start. Basically, what I want is to create batch_num streams like this: Batch index 1: [ words in a document ] [ words in next document ] [ words ] Batch index 2: [ words in a way longer document ] [words in short doc ] Batch index 3: [ words in some document ] [ words in another document ] ... It's important that there's no padding happening between the documents. Losing some sentences/words at the end is completely fine. It feels like this shouldn't be such a far-fetched problem, but I can't think of a solution using the tf.data API. Obviously I can do this with normal python code, but I'd love to utilize Dataset features like prefetching. // EDIT: Digging deeper, the one function I never bothered to look at, interleave, seems promising. num_batch = 4 dataset = Dataset.range(1, 6) # ==> [ 1, 2, 3, 4, 5 ] dataset = dataset \ .interleave(lambda x: Dataset.from_tensors(x).repeat(3), cycle_length=num_batch) \ .batch(num_batch) # ==> 0 : [1 2 3 4] # 1 : [1 2 3 4] # 2 : [1 2 3 4] # 3 : [5 5 5] However, as soon as the Datasets are of variable length, they start switching their places as previous ones run out. given: [ [1], [2,2], [3,3,3], [4,4,4,4], [5,5,5,5,5] ] => 0 : [1 2 3 4] 1 : [2 3 4 5] 2 : [3 4 5 4] 3 : [5 5 5]
