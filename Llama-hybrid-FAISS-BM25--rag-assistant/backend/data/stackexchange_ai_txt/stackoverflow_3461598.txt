[site]: stackoverflow
[post_id]: 3461598
[parent_id]: 3370901
[tags]: 
OK. I solved this. But not very elegantly. My problem really was that the TinyMCE editor wasn't fully instantiated in time for the return from the ajax call. What I ended up doing was this : 1) in the ajax callback : a) start to instantiate the editor with the addControl command b) fill a global variable (MY_GLOBAL) with the value that's returned from the server 2) when I call tinyMCE.init() I pass it a callback for the OnInit event. This takes 2 steps : a) define a "setup" function which adds an OnInit callback handler to tinyMCE. The callback checks the global variable (MY_GLOBAL in this simplification), and inserts its value into the instance of tinyMCE now in "this". var setup = function(editor) { editor.onInit.add( function(editor, evt) { if (MY_GLOBAL) { this.setContent(MY_GLOBAL); } }); }; b) pass this setup into the tinyMCE.init var config = { blah : blah, setup : setup }; tinyMCE.init(config); Now the ajax call still returns its value before the tinyMCE is instantiated, so it fills MY_GLOBAL. Then, when the editor finally appears, it fires off the OnInit callback, which finds the value stashed in MY_GLOBAL and puts it into the editor.
