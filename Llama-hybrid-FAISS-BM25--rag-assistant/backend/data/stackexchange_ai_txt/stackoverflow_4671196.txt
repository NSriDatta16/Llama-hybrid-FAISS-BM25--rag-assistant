[site]: stackoverflow
[post_id]: 4671196
[parent_id]: 4671074
[tags]: 
Good unit tests are isolated ones. It means they are absolutely idependent of any environment (files, database, network etc.). If your code uses files to store data in it, you should hide by some interface, the production and test code would use different implmementation. Production will really do Write to file, test one will only emulate it. public interface IStorage { bool StoreToFile(string path, string file, byte[] data); } public class Storage : IStorage { public bool StoreToFile( ... ) { return WriteToFile( ... ); } } public class StorageMock : IStorage { public bool StoreToFile (...) { return false; //or true, depends on you test case } } Now in tests you are able to "subtitue" real implmementaion with fake one. This is called mocking. Desing that takes into considiration called "Inversion of Control". There are also a bunch of frameworks that allows you to use "Investion of Control" throught dependency injection (StructureMap, Ninject, Wisdor)
