[site]: stackoverflow
[post_id]: 1651911
[parent_id]: 1651430
[tags]: 
Try this instead: import re freq_pattern = re.compile("Frequency of Incident[\(\)A-Za-z\s]*\.*\s*([\.0-9]*)") col_pattern = re.compile("([-\.0-9]+)\s+([-\.0-9]+)\s+([-\.0-9]+)\s+([-\.0-9]+)\s+([-\.0-9]+)") e_rcs = [] # make an empty list f = open('example.4.out', 'r') for line in f: print line, result = freq_pattern.search(line) if result: freq = float(result.group(1)) cols = col_pattern.search(line) if cols: e_rcs.append( float(cols.group(2)) ) # add another float to the list f.close() In Python you would only use array.array when you need to control the binary layout of your storage, i.e. a plain array of bytes in RAM. If you are going to be doing a lot of scientific data analysis, then you should have a look at the NumPy module which supports n-dimensional arrays. Think of NumPy as a replacement for FORTRAN in doing mathematics and data analysis.
