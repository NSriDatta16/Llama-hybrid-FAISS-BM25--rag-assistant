[site]: stackoverflow
[post_id]: 2359080
[parent_id]: 2358502
[tags]: 
You can use Trace.TraceWarning for run-time obsolete method usage detection, BUT you should really rethink your design and use ObsoleteAttribute and compile-time detection. Run-time detection of such errors should be the last resort. If your compatibility layer is auto-generated code, you can check for ObsoleteAttribute when generating the shims and mark such shims also [Obsolete] If your compatibility layer uses reflection, it can check for ObsoleteAttribute and emit the warnings. If your compatiblity layer is hand-coded you can write a tool that automatically inspects the IL in your compatibility layer and marks compatibility-layer methods [Obsolete] based on which methods they call. In each case it would be best if all obsolete methods were actually marked with [Obsolete] so new code will not call them. If your compatibility layer includes shims that call obsolete methods and these are also marked [Obsolete] you can safely compile it using this: #pragma warning disable 618 This will hide the obsolete warnings when compiling the compatibility layer. Since your compatibility layer methods are also marked [Obsolete] you will get warnings at the correct locations.
