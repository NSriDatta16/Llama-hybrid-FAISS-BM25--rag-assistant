[site]: stackoverflow
[post_id]: 1344432
[parent_id]: 1342848
[tags]: 
I think something like this will work for you. public static IQueryable TopPercentWithTies (this IOrderedQueryable query, Expression > groupByExpression, double percent) { var groupedQuery = query.GroupBy(groupByExpression); int numberToTake = groupedQuery.Count() * percent / 100; return groupedQuery.Take(numberToTake).SelectMany(t => t); } I only tested it with IEnumerable, so I don't know for sure that it'll work properly with IQueryable. I also sorted the list before calling TopPercentWithTies(). Here's the code I used to test it. int percent = 50; var people = new [] { new { Age = 99, Name = "Adam" }, new { Age = 99, Name = "Andrew" }, new { Age = 89, Name = "Bob" }, new { Age = 50, Name = "Cecil" }, new { Age = 50, Name = "Doug" }, new { Age = 50, Name = "Everett" }, new { Age = 35, Name = "Frank" }, new { Age = 25, Name = "Greg" }, new { Age = 15, Name = "Hank" } }; var sortedPeople = people.AsQueryable().OrderByDescending(person => person.Age); var results = sortedPeople.TopPercentWithTies(person => person.Age, percent); foreach (var person in results) Console.WriteLine(person); Hope it helps or at least gets you in the right direction. You may want to tweak the logic for calculating numberToTake.
