[site]: crossvalidated
[post_id]: 595436
[parent_id]: 
[tags]: 
How to measure the similarity of an object is to its own cluster or to other clusters

I have data (5 different vectors of samples A, B, C, D, and E) and I cluster this data into 3 clusters using AgglomerativeClustering with the Wasserstein distance as the metric. data= np.array([ [5, 0, 2, 2], [1, 6, 0, 2], [7, 2, 0, 0], [3, 6, 0, 0], [7, 0, 0, 2]]) I used the following code to cluster data into three clusters def wasserstein_distance_function(f1, f2): min_cost = np.inf f1 = f1.reshape((1, 4)) #1 represents one vector [], and 4 represents how many elements in this vector (no. classes) f2 = f2.reshape((1, 4)) for l in np.linspace(0.8, 1.2, 3): for k in np.linspace(0.8, 1.2, 3): cost = distance.cdist(l * f1, k * f2, 'sqeuclidean') row_ind, col_ind = linear_sum_assignment(cost) curr_cost = cost[row_ind, col_ind].sum() if curr_cost The output of this matrix: array([[ 0. , 35.84, 10.24, 30.72, 4.52], [35.84, 0. , 35.84, 5.12, 46.08], [10.24, 35.84, 0. , 20.48, 5.12], [30.72, 5.12, 20.48, 0. , 35.84], [ 4.52, 46.08, 5.12, 35.84, 0. ]]) then I used AgglomerativeClustering to cluster this matrix clusterer = AgglomerativeClustering(n_clusters=3, affinity="precomputed", linkage="average", distance_threshold=None) clusterer.fit_predict(distance_matrix) output: array([1, 0, 2, 0, 1], dtype=int64) So, the dataframe that contains samples, values (vectors), and cluster df = pd.DataFrame({'samples': ['A', 'B', 'C', 'D', 'E'], 'values': [[5, 0, 2, 2],[1, 6, 0, 2],[7, 2, 0, 0],[3, 6, 0, 0],[7, 0, 0, 2]], 'cluster': [1, 0, 2, 0, 1]}) df output: samples values cluster 0 A [5, 0, 2, 2] 1 1 B [1, 6, 0, 2] 0 2 C [7, 2, 0, 0] 2 3 D [3, 6, 0, 0] 0 4 E [7, 0, 0, 2] 1 Assuming after a round, the value of (B) change from [1, 6, 0, 2] to [7, 1, 0, 2] I would like to measure whether sample (B) still belongs to its own cluster (0) or should move to other clusters. samples values cluster 0 A [5, 0, 2, 2] 1 1 B [7, 1, 0, 2] ? 2 C [7, 2, 0, 0] 2 3 D [3, 6, 0, 0] 0 4 E [7, 0, 0, 2] 1 I am looking for different methods such as math formulas, or other techniques than the silhouette index.
