[site]: stackoverflow
[post_id]: 4107726
[parent_id]: 4107683
[tags]: 
There is a nice example on CodeProject Good luck! -Edit: I think this is more like it, I created a simple form, 2 textboxes and three buttons. First textbox is for command entry, the second (multiline), displays the result. The first button executes the command, the second button updates the result (because results are read async) namespace WindowsFormsApplication2 { public partial class Form1 : Form { private static StringBuilder cmdOutput = null; Process cmdProcess; StreamWriter cmdStreamWriter; public Form1() { InitializeComponent(); } private void Form1_Load(object sender, EventArgs e) { cmdOutput = new StringBuilder(""); cmdProcess = new Process(); cmdProcess.StartInfo.FileName = "cmd.exe"; cmdProcess.StartInfo.UseShellExecute = false; cmdProcess.StartInfo.CreateNoWindow = true; cmdProcess.StartInfo.RedirectStandardOutput = true; cmdProcess.OutputDataReceived += new DataReceivedEventHandler(SortOutputHandler); cmdProcess.StartInfo.RedirectStandardInput = true; cmdProcess.Start(); cmdStreamWriter = cmdProcess.StandardInput; cmdProcess.BeginOutputReadLine(); } private void btnExecute_Click(object sender, EventArgs e) { cmdStreamWriter.WriteLine(textBox2.Text); } private void btnQuit_Click(object sender, EventArgs e) { cmdStreamWriter.Close(); cmdProcess.WaitForExit(); cmdProcess.Close(); } private void btnShowOutput_Click(object sender, EventArgs e) { textBox1.Text = cmdOutput.ToString(); } private static void SortOutputHandler(object sendingProcess, DataReceivedEventArgs outLine) { if (!String.IsNullOrEmpty(outLine.Data)) { cmdOutput.Append(Environment.NewLine + outLine.Data); } } } } In the screenshot you can see that I entered the cd\ command to change directory and the next command executed in this directory (dir).
