[site]: stackoverflow
[post_id]: 1188222
[parent_id]: 
[tags]: 
What are the best resources for learning how to avoid side effects and state in OOP?

I've been playing with functional programming lately and there are pretty good treatments on the topic of side effects, why they should be contained, etc. In projects where OOP is used, I'm looking for some resources which lay out some strategies for minimizing side effect and/or state. A good example of this is the book RESTful Web Services which gives you strategies for minimizing state in a web application. What others exist? Remember I'm not looking for another OOP analysts/design patterns book (though good encapsulation and loose coupling help avoid side effects) but rather a resource where the topic itself is state/side effects. Some compiled answers OOP programmers who mostly care about state do so because of concurrency, so read Java Concurrency in Practice . [ exactly what I was looking for] Use TDD to make side effects more visible [I like it, example: the bigger your setUps are, the more state you need in place to run your tests = good warning] Command-query separation [Good stuff, prevents the side effect of changing a function argument which is generally confusing] Methods do only one thing, perhaps use descriptive names if they change the state of their object so it's simple and clear. Make objects immutable [I really like this] Pass values as parameters, instead of storing them in member variables. [I don't link this; it clutters up function prototype and is actively discouraged by Clean Code and other books, though I do admit it helps the state issue] Recompute values instead of storing and updating them [I also really like this; in the apps I work on performance is a minor concern] Similarly, don't copy state around if you can avoid it. Make one object responsible for keeping it and let others access it there. [Basic OOP principle, good advice]
