[site]: stackoverflow
[post_id]: 4225851
[parent_id]: 4225763
[tags]: 
Using regular expressions for parsing HTML will certainly fail at one time or the other. Few modules that could help with parsing HTML are: WWW::Mechanize HTML::TreeBuilder If you need more control over parsing HTML, you could use HTML::Parser . Furthermore, there have been several questions on parsing HTML using Perl in StackOverflow. The answers there can be helpful. A sample scraper for the Facebook Executive Bios page, which makes use of LWP::UserAgent to fetch page content and HTML::TreeBuilder for parsing: #!/usr/bin/env perl use strict; use warnings; use LWP::UserAgent; use HTML::TreeBuilder; binmode STDOUT, ':utf8'; my $ua = LWP::UserAgent->new( 'agent' => 'Mozilla' ); my $response = $ua->get('http://www.facebook.com/press/info.php?execbios'); my $tree = HTML::TreeBuilder->new(); if ( $response->is_success() ) { $tree->parse_content( $response->decoded_content() ); } else { die $response->status_line(); } for my $biosummary_tag ( $tree->look_down( 'class' => 'biosummary' ) ) { my $bioname_tag = $biosummary_tag->look_down( 'class' => 'bioname' ); my $biotitle_tag = $biosummary_tag->look_down( 'class' => 'biotitle' ); my $biodescription_tag = $biosummary_tag->look_down( 'class' => 'biodescription' ); my $bioname = $bioname_tag->as_text(); my $biotitle = $biotitle_tag->as_text(); my $biodescription = $biodescription_tag->as_text(); print "Name: $bioname\n"; print "Title: $biotitle\n"; print "Description: $biodescription\n\n"; }
