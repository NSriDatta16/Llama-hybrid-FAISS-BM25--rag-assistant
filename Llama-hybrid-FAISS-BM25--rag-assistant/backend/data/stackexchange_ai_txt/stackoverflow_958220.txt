[site]: stackoverflow
[post_id]: 958220
[parent_id]: 
[tags]: 
How can I use linq to sort by multiple fields?

I'm creating a mock data source that I want to be able to pass in a list of SortExpressions on. public SortExpression(string name, SortDirection direction) { this.name = name; this.direction = direction; } Update with Jon Skeet's code and also the entire class. GetData() is just populating the object with x number of records. public class Data { public int Id { get; set; } public Guid gId { get; set; } public string Name { get; set; } public string Phone { get; set; } public string Address { get; set; } public DateTime Created { get; set; } public string SortMe { get; set; } public static List GetFakeData(int start, int numberToFetch, IList sortExpressions, IList filterExpressions, out int totalRecords) { DataCollection items = GetData(); IEnumerable query = from item in items select item; bool sortExpressionsExist = sortExpressions != null; if (sortExpressionsExist) { // Won't be read in the first iteration; will be written to IOrderedEnumerable orderedQuery = null; for (int i = 0; i expression = item => item.GetType().GetProperty(sortExpressions[copyOfI].Name); if (sortExpressions[i].Direction == SortDirection.Ascending) { orderedQuery = (i == 0) ? query.OrderBy(expression) : orderedQuery.ThenBy(expression); } else { orderedQuery = (i == 0) ? query.OrderByDescending(expression) : orderedQuery.ThenByDescending(expression); } } query = orderedQuery; } bool filterExpressionsExist = filterExpressions != null; if (filterExpressionsExist) { foreach (var filterExpression in filterExpressions) { query.Where(item => item.GetType().GetProperty(filterExpression.ColumnName).GetValue(item, null).ToString().Contains(filterExpression.Text)); } } totalRecords = query.Count(); return query.Skip(start).Take(numberToFetch).ToList (); } } Doesn't seem to be doing anything. Compiles, no errors, just no sort. Any ideas?
