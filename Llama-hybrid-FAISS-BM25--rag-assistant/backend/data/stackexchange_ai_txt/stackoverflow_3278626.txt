[site]: stackoverflow
[post_id]: 3278626
[parent_id]: 3278316
[tags]: 
You want to extend RuntimeException . In general though... It sounds like the real problem is that your organization thought it better to just throw ApplicationException everywhere rather than throw specific, meaningful, well documented exceptions. From the literature you referenced: Contingency An expected condition demanding an alternative response from a method that can be expressed in terms of the method's intended purpose. The caller of the method expects these kinds of conditions and has a strategy for coping with them. Fault An unplanned condition that prevents a method from achieving its intended purpose that cannot be described without reference to the method's internal implementation. A single approach like "everything is unchecked" is as bad as "everything is checked" (in my opinion, worse). Apply the same conventions set by Java: If the condition is a programming error, then it is a RuntimeException . If the condition is something meaningful that a caller might expect and be capable of handling, use Exception . If the condition is a system error (like unavailability of a resource), that prevents any meaningful action from proceeding, use Error (but this is very rare).
