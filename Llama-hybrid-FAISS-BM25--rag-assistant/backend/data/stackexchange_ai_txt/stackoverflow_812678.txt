[site]: stackoverflow
[post_id]: 812678
[parent_id]: 812422
[tags]: 
Your claim about logging is not completely true. log= logging.getLogger( "some.logger" ) log.info( "%s %d", "test", value ) log.error("text %d some dictionary %s", lineNumber, my_dict) You don't need to explicitly use the string formatting operator, % Edit You can leverage your original "error" function. def error( *args ): log.error( " ".join( map( str, args ) ) ) Which will probably make the transition less complex. You can also do this. class MyErrorMessageHandler( object ): def __init__( self, logger ): self.log= logger def __call__( self, *args ): self.log.error( " ".join( map( str, args ) ) ) error= MyErrorMessageHandler( logging.getLogger("some.name") ) Which might be palatable, also.
