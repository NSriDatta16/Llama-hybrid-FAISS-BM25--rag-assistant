[site]: stackoverflow
[post_id]: 832924
[parent_id]: 832810
[tags]: 
Pretty extensively, although people are mindful of the overhead of virtual function calls It depends. Some developers swear off it completely, others make limited use of containers like vectors that will have good cache coherency and runtime performance and won't allocate constantly. I think a general observation would be that the more console-oriented the studio the less STL they use. PC developers can get away with it because they can fall back on the virtual memory system and there's plenty of CPU. Console guys care about every allocation and if you are doing a multiplatform title you get into the wonderful world of different platform's STL implementations behaving differently and having different bugs, although this situation has certainly improved in recent years. Game developers also like to manage their own heaps and allocations and this can be difficult to deal with with STL. Expect it to be disabled in the compiler settings Haha, good one. I'm not sure. I haven't really seen smart pointer use in game code, although aside from a general aversion to dynamic memory I don't think there's anything particularly objectionable about smart pointers from a game development standpoint. This one again depends. PC guys may allocate and deallocate like they just don't care. Console guys care about every allocation. That doesn't mean no new and delete but it can mean that dynamic allocations are only done once when the game or current level is set up and then left until the game or current level is torn down. Per frame allocating and deallocating is best avoided, not just to keep total memory use down but to avoid fragmentation. You'll see a lot of fixed sized arrays and statically allocated structures in a console game engine.
