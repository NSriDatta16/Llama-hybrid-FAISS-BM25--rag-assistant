[site]: stackoverflow
[post_id]: 644669
[parent_id]: 643987
[tags]: 
It doesn't sound to me as though the Factory pattern is a solution to the problem you have. The Factory pattern is intended to provide an instance of a particular subtype of a class, shielding the caller of the factory from (a) the actual subtype being returned, and (b) the logic which the factory used to decide which subtype to return. This isn't what you need here. I think you need to abstract the storing of the data away from the class that models the data being stored. You have a class common to two applications, and each of those applications should implement functionality for storing the data encapsulated by your class in a way appropriate to that application. That implies two things: Each application (web and windows form) should contain functionality to do it's storing away of data - but neither needs to include the code used by the other. e.g. the windows forms app doesn't need to know how to store data in a web session. So the code that stores the data in a web session should be in an object that is part of the web app but not part of the windows forms app, and vice versa. Given that this is the case, and given that the class who's data you're storing has to be common to both apps, that storage logic cannot be part of that class. (Following accepted OO design principles, that class shouldn't know how to store itself away in different parts of your application anyway, as that introduces dependencies that make future changes difficult. See the Single Responsibility Principle ...) Hope this is helpful
