[site]: crossvalidated
[post_id]: 596051
[parent_id]: 583495
[tags]: 
It looks like the length of the bar is the ratio abs(Coeff) / SE Coeff eg for temp = 42.25 / 16.29 = 2.59 (this almost equals the value where the vertical bar is drawn, as a visual check). As @zphisto mentioned, the vertical line comes from a two-tailed T test at the appropriate confidence limit and degrees of freedom dof (5 in this case). AFAIK "standardised" in this context means dividing the effect size by an estimate of the error, which is basically related to the standard deviation. Effect in the MiniTab output is the difference between the average of all the responses (Power in this case) at the +1 level and -1 level for each parameter. These responses are used to fit a linear model based on the average response, hence why Coeff is Effect / 2 . Not entirely sure how MiniTab calculates SE Coeff but the following code seems to work: import numpy as np import scipy.stats terms = ["temperature", "porosity", "permeability", "frac spacing", "well depth", "boundary"] levels = [[ 1, 1, 1, -1, 1, 1], [-1, 1, -1, -1, -1, 1], [-1, 1, 1, -1, 1, -1], [ 1, 1, -1, 1, 1, -1], [-1, -1, -1, 1, 1, 1], [-1, 1, 1, 1, -1, 1], [-1, -1, -1, -1, -1, -1], [ 1, 1, -1, 1, -1, -1], [-1, -1, 1, 1, 1, -1], [ 1, -1, 1, -1, -1, -1], [ 1, -1, 1, 1, -1, 1], [ 1, -1, -1, -1, 1, 1]] levels = np.array(levels) n, k = np.shape(levels) power = np.array([53.0, 65.0, 59.0, 129.0, 48.0, 213.0, 39.0, 125.0, 89.0, 255.0, 361.0, 97.0]) rewop = np.reshape(power, (-1, 1)) x = rewop * levels coeff = x.sum(axis=0) / n pmean = np.mean(power) y = coeff * levels p_est = pmean + y.sum(axis=1) sse = np.sum((power - p_est) ** 2) std = np.std(power, ddof=1) sec = sse / std / (n - 2) dof = n - k - 1 tval = coeff / sec pval = 2.0 * (1.0 - scipy.stats.t.cdf(np.abs(tval), df=dof, loc=0, scale=1)) # two-tailed distribution print("Term Effect Coef SE Coef T P ") t = pmean / sec p = 2.0 * (1.0 - scipy.stats.t.cdf(t, df=dof, loc=0, scale=1)) print(f"Constant {pmean:7.2f} {sec:5.2f} {t:5.2f} {p:5.3f}") for q, c, t, p in zip(terms, coeff, tval, pval): print(f"{q:12s} {2.0*c:7.2f} {c:7.2f} {sec:5.2f} {t:5.2f} {p:5.3f}") This gives this output: Term Effect Coef SE Coef T P Constant 127.75 16.22 7.88 0.001 temperature 84.50 42.25 16.22 2.61 0.048 porosity -40.83 -20.42 16.22 -1.26 0.264 permeability 87.83 43.92 16.22 2.71 0.042 frac spacing 66.17 33.08 16.22 2.04 0.097 well depth -97.17 -48.58 16.22 -3.00 0.030 boundary 23.50 11.75 16.22 0.72 0.501
