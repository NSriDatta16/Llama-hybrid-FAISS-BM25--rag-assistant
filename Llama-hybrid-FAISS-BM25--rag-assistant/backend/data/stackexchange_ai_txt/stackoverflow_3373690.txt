[site]: stackoverflow
[post_id]: 3373690
[parent_id]: 3373504
[tags]: 
You describe a design where the user credentials are validated on every page request and the login form is only used to store these credentials in the browser. I see several issues with such unusual approach: You transmit sensitive information on every HTTP request. In order to validate the credentials you possibly have to run a database query and you do it again and again and again. You have to validate the credentials just to know who the request comes from. Simultaneous connections with the same credentials will share data [see addendum] . It's more typical to validate the user once (possibly using an encrypted channel or hashed information) and remember it for a specified time. Whatever, sessions and cookies are completely different tools. Cookies are a client-side storage while sessions are server-side. They only relate each other because the most typical session implementation uses cookies to store the session ID (since HTTP is a stateless protocol, you need such tricks to keep track of what request come from whom). The benefic of server-side storage is that you have full control on it: You can use as much space as you need. You can use whatever data format you need. You can keep sensitive data or stuff you don't want to the user to see or mangle. You can trust the information since you put it there. Addendum In a classical session system where you assign a random ID on session start a registered user can have many simultaneous session instances in different computers (or even in a single computer, e.g., one in Firefox and three more in Chrome incognito mode windows). If you only identify the visitor by his username, the user will only have one session: if he goes home for lunch he will find the session he left at work, if he shares his password with a friend he'll see what his friend is doing. This can be considered a bug or a feature and, of course, there're many tricks to prevent it. Just take it into account.
