[site]: stackoverflow
[post_id]: 3630226
[parent_id]: 3627611
[tags]: 
C# is a generic development environment designed for producing all applications that can be conceived of. Access is a development tool specifically designed for one purpose, i.e., creating front ends to databases. All the components within Access are prebuilt to make interaction with data as easy as possible. While it is certainly the case that there are libraries and controls available for C# that are designed for the purpose of interacting with databases, there's less integration of the overall development environment for the particular purpose of creating database applications. Access's database-related components are also more mature than anything that could be developed for C#, since Access has been around twice as long. That also has its disadvantage, as some of the assumptions about how things should work in Access don't work as well in a modern environment (Access was created before the web existed anywhere outside of academia). I think it's probably OK to choose C# as a development platform for a database application if: the developers available are already C# whizzes familiar with building database interfaces, AND you have the need to distribute your app to very large numbers of users. Access is somewhat difficult to deploy, and in large organizations, when you amortize the savings in RAD over large numbers of desktops, that is quickly dwarfed by the expenses associated with Access deployment issues compared to a self-contained executable with no runtime dependencies. But we're talking about somewhere well above 100 desktops where the line is crossed (and possibly closer to 500 or 1000), in my opinion.
