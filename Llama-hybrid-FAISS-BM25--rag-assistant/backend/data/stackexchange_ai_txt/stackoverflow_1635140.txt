[site]: stackoverflow
[post_id]: 1635140
[parent_id]: 1635130
[tags]: 
Your comparison string are incorrect. They should be of the form "hist" , not 'hist' . In C++, 'hist' is simply a character literal (as stated in section 2.14.3 of the C++0x draft (n2914) standard), my emphasis on the last paragraph: A character literal is one or more characters enclosed in single quotes, as in ’x’, optionally preceded by one of the letters u, U, or L, as in u’y’, U’z’, or L’x’, respectively. A character literal that does not begin with u, U, or L is an ordinary character literal, also referred to as a narrow-character literal. An ordinary character literal that contains a single c-char has type char, with value equal to the numerical value of the encoding of the c-char in the execution character set. An ordinary character literal that contains more than one c-char is a multicharacter literal. A multicharacter literal has type int and implementation-defined value. As to there being a better way, it depends on what you mean by better :-) One possibility is to set up a functon table which is basically an array of structs, each containing a word and a function pointer. Then you simply extract the word from your string and do a lookup in that array, calling the function if you find a match. The following C program shows how to use function tables. As to whether that's a better solution, I'll leave it up to you (it's a moderately advanced technique) - you may be better off sticking with what you understand. #include typedef struct { // This type has the word and function pointer char *word; // to call for that word. Major limitation is void (*fn)(void); // that all functions must have the same } tCmd; // signature. // These are the utility functions and the function table itself. void hello (void) { printf ("Hi there\n"); } void goodbye (void) { printf ("Bye for now\n"); } tCmd cmd[] = {{"hello",&hello},{"goodbye",&goodbye}}; // Demo program, showing how it's done. int main (int argc, char *argv[]) { int i, j; // Process each argument. for (i = 1; i When run with: pax> ./qq.exe hello goodbye hello hello goodbye hello bork you get the output: Hi there Bye for now Hi there Hi there Bye for now Hi there Bad word: 'bork'
