[site]: crossvalidated
[post_id]: 136732
[parent_id]: 136727
[tags]: 
Standard candidates that fit your requirements would be ensembles, which are available in Matlab. Most likely you should try ensembles of decision trees (such as Random Forests) or of linear classifiers using boosting or bagging along with Matlab's fitensemble method. Furthermore, Support Vector Machines are found among the top performing classifiers quite often. Finally, Naive Bayes is worth a shot as it is easy but sometimes yields surprisingly good results. Make sure you do not just look at the accuracy when comparing the results but also at the receiver operating characteristic and its area under curve. All these techniques are available in Matlab, provided that you have the right toolboxes (should be the statistics toolbox) and your version is not too old. Be prepared that others here will have even more suggestions for you, like logistic regression etc. ;) Here is a paper that compares several classification algorithms, in case you are interested: http://www.cs.cornell.edu/~caruana/ctp/ct.papers/caruana.icml06.pdf Update: Some more concrete suggestions for your next steps. Run Ensemble = fitensemble(X,Y,Method,NLearn,Learner) Set the Method to 'AdaBoostM1', NLearn to 20 (you can vary that number) and Learner to 'Tree' (or 'Discriminant'). X is your training data and Y is a 1 for every data point belonging to a sick subject and a 0 if the subject is healthy. You can extend that approach to provide a cross validation for you: Ensemble = fitensemble(X,Y,Method,NLearn,Learner,'CrossVal','On') Use the same parameters as stated above. This gives you a cross-validated model (i.e. an estimate on how good your generalisation actually is). To query the estimated error of the model, use the following method: Loss = kfoldLoss(Ensemble,'lossfun','classiferror')
