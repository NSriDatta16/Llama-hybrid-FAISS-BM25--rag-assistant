[site]: stackoverflow
[post_id]: 4368961
[parent_id]: 
[tags]: 
Calculating an AABB for a transformed sphere

I have a sphere represented in object space by a center point and a radius. The sphere is transformed into world space with a transformation matrix that may include scales, rotations, and translations. I need to build a axis aligned bounding box for the sphere in world space, but I'm not sure how to do it. Here is my current approach, that works for some cases: public void computeBoundingBox() { // center is the middle of the sphere // averagePosition is the middle of the AABB // getObjToWorldTransform() is a matrix from obj to world space getObjToWorldTransform().rightMultiply(center, averagePosition); Point3 onSphere = new Point3(center); onSphere.scaleAdd(radius, new Vector3(1, 1, 1)); getObjToWorldTransform().rightMultiply(onSphere); // but how do you know that the transformed radius is uniform? double transformedRadius = onSphere.distance(averagePosition); // maxBound is the upper limit of the AABB maxBound.set(averagePosition); maxBound.scaleAdd(transformedRadius, new Vector3(1, 1, 1)); // minBound is the lower limit of the AABB minBound.set(averagePosition); minBound.scaleAdd(transformedRadius, new Vector3(-1,-1,-1)); } However, I am skeptical that this would always work. Shouldn't it fail for non-uniform scaling?
