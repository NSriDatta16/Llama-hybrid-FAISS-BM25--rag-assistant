[site]: stackoverflow
[post_id]: 781894
[parent_id]: 781763
[tags]: 
I am wondering what framework/language you use for your TDD if you have not yet hit the most obvious parts of where it is difficult: GUIs - Certain environments and platforms, specifically, Windows Forms and ASP.NET web forms, suffer from practical untestability, because there is no easy way to isolate or mock their behavior. This is one of the main driving forces of ASP.NET MVC, for that matter. Persistence - Any sort of persistence, whether it be disk storage, connection to a database, to a network, or some other form of external system would be a limitation, as all of them are persistence tests which depend too much on the state of an external component to succeed. These integration tests then are considered fragile tests . Mocking is used to mitigate the impact of such external systems. Adoption - Even if you are well versed in TDD, it's an uphill battle trying to get other developers -- much less whole development shops -- to use it. Many just don't see the benefit; they are easily turned off by the initial steep learning and productivity curves. You will encounter cases wherein you're the only one practicing TDD in your project and even if you enforce it the other developers will introduce low-quality, senseless tests. This non-technical reason is the biggest hurdle to using TDD in real-life production systems that I have faced, and it's a painful realization when you're quite aware of the benefits.
