[site]: stackoverflow
[post_id]: 394267
[parent_id]: 394053
[tags]: 
I agree with Mike Hofer. Keeping your class that does your retrieval and persisting of object separate from your business classes is key to having a flexible and robust design. This is the kind of code you want to be seeing in your GUI or Business layer: //Populate Customer Objects List with data IList customerList = new List () Customer newCustomer1 = new Customer(); newCustomer.Name = "New Name" newCustomer.email ="abcd@abcd.com" customerList.Add(newCustomer1) //DAL calls DataAccessClass dalClass = new DataAccessClass (); dalClass.InsertCustomers(customerList); Inside your DALClass there should be a method called InsertCustomers(IList customers) and it should have the following code: Public Function InsertCustomers(ByVal objectList As IList(Of Customer)) As Integer Dim command As IDbCommand = Nothing Dim rowsAffected As Integer = 0 Dim connection As IDbConnection = New System.Data.SqlClient.SqlConnection(Me.ConnectionString) Try connection.Open Dim e As IEnumerator = objectList.GetEnumerator Do While e.MoveNext command = connection.CreateCommand command.CommandText = "insert into dbo.Customer(CustomerID,CustomerGUID,RegisterDate,Password,SiteID,Las"& _ "tName,FirstName,Email,Notes,BillingEqualsShipping,BillingLastName) values (@Cust"& _ "omerID,@CustomerGUID,@RegisterDate,@Password,@SiteID,@LastName,@FirstName,@Email"& _ ",@Notes,@BillingEqualsShipping,@BillingLastName)" System.Console.WriteLine("Executing Query: {0}", command.CommandText) Dim paramCustomerID As IDbDataParameter = command.CreateParameter paramCustomerID.ParameterName = "@CustomerID" command.Parameters.Add(paramCustomerID) Dim paramCustomerGUID As IDbDataParameter = command.CreateParameter paramCustomerGUID.ParameterName = "@CustomerGUID" command.Parameters.Add(paramCustomerGUID) Dim paramRegisterDate As IDbDataParameter = command.CreateParameter paramRegisterDate.ParameterName = "@RegisterDate" command.Parameters.Add(paramRegisterDate) Dim paramPassword As IDbDataParameter = command.CreateParameter paramPassword.ParameterName = "@Password" command.Parameters.Add(paramPassword) Dim paramSiteID As IDbDataParameter = command.CreateParameter paramSiteID.ParameterName = "@SiteID" command.Parameters.Add(paramSiteID) Dim paramLastName As IDbDataParameter = command.CreateParameter paramLastName.ParameterName = "@LastName" command.Parameters.Add(paramLastName) Dim paramFirstName As IDbDataParameter = command.CreateParameter paramFirstName.ParameterName = "@FirstName" command.Parameters.Add(paramFirstName) Dim paramEmail As IDbDataParameter = command.CreateParameter paramEmail.ParameterName = "@Email" command.Parameters.Add(paramEmail) Dim paramNotes As IDbDataParameter = command.CreateParameter paramNotes.ParameterName = "@Notes" command.Parameters.Add(paramNotes) Dim paramBillingEqualsShipping As IDbDataParameter = command.CreateParameter paramBillingEqualsShipping.ParameterName = "@BillingEqualsShipping" command.Parameters.Add(paramBillingEqualsShipping) Dim paramBillingLastName As IDbDataParameter = command.CreateParameter paramBillingLastName.ParameterName = "@BillingLastName" command.Parameters.Add(paramBillingLastName) Dim modelObject As Customer = CType(e.Current,Customer) paramCustomerID.Value = modelObject.CustomerID paramCustomerGUID.Value = modelObject.CustomerGUID paramRegisterDate.Value = modelObject.RegisterDate If IsNothing(modelObject.Password) Then paramPassword.Value = System.DBNull.Value Else paramPassword.Value = modelObject.Password End If paramSiteID.Value = modelObject.SiteID If IsNothing(modelObject.LastName) Then paramLastName.Value = System.DBNull.Value Else paramLastName.Value = modelObject.LastName End If If IsNothing(modelObject.FirstName) Then paramFirstName.Value = System.DBNull.Value Else paramFirstName.Value = modelObject.FirstName End If If IsNothing(modelObject.Email) Then paramEmail.Value = System.DBNull.Value Else paramEmail.Value = modelObject.Email End If If IsNothing(modelObject.Notes) Then paramNotes.Value = System.DBNull.Value Else paramNotes.Value = modelObject.Notes End If paramBillingEqualsShipping.Value = modelObject.BillingEqualsShipping If IsNothing(modelObject.BillingLastName) Then paramBillingLastName.Value = System.DBNull.Value Else paramBillingLastName.Value = modelObject.BillingLastName End If rowsAffected = (rowsAffected + command.ExecuteNonQuery) Loop Finally connection.Close CType(connection,System.IDisposable).Dispose End Try Return rowsAffected End Function It is painful to write the DAL code by hand, but you will have full control of your DAL, SQL and Mapping code and changing any of those will be a breeze in the future. If you don't feel like to write all the DAL Code by hand, you can get a CodeGenerator like Orasis Mapping Studio to generate exactly the same code shown without writing anything. You just need to build your SQL in the tool, map the properties to the paramaters and you are done. It will generate all the rest for you. Good luck and happy DAL coding!
