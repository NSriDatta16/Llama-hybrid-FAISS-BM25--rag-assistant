[site]: stackoverflow
[post_id]: 960440
[parent_id]: 951871
[tags]: 
Function pointers lets you pass functions around like variables. Function pointer is basically legacy method to pass function around in languages that don't support first-class methods, such as C/C++. First class methods Basically means you can pass functions around like variables. Methods (loosely) mean functions. So this basically means first class functions . In simplest terms, it means functions are treated as "first class citizens", like variables. In the old days (C/C++), because we can't directly pass a function around, and we had to resort to workarounds like function pointers, we said functions weren't first-class citizens. Delegates is C#'s answer to first-class methods. Delegates are somewhat more powerful because it involves closures , consider the following code snippet: void foo( int a ) { void bar() { writefln( a ); } call( &bar ); } void call( void delegate() dg ) { dg(); } int main( char[][] args ) { foo( 100 ); } Notice that bar can reference the local variable a because delegates can use closures. Closures can be very confusing at first. But the lazy-man's definition can be really simple. It basically means a variable can be available in the human-expected way. Put in other words, a variable can be referenced in places where they look like they would be present, by reading the structure of the source code. For example, looking at the code fragment above. If we didn't have closure, bar would not be able to reference a because a was only local to foo , but not bar , which is another function. Dynamic Proxy is the odd one out. It doesn't belong to these items. Explaining it requires some very long text. It stems from the famous Proxy Pattern . The problem with Proxy Pattern was that the Proxy class needs to be implementing the same interface as the Subject. Dynamic Proxy basically means using reflective approach to discover the Subject's method so that the ProxyPattern can be freed from being tied to the Subject's interface.
