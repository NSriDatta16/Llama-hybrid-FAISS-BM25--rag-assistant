[site]: datascience
[post_id]: 108987
[parent_id]: 
[tags]: 
Approximating periodic functions

I am trying to understand if neural networks can be trained to approximate periodic functions well. Here's the toy problem I have in mind: Consider function clock(seconds_since_t0) that returns a vector of 4 values, that correspond to what digital clock would display assuming t0 is 0 days 00:00:00. I wrote a simple dataset in PyTorch, that samples values of the clock function on seconds_since_t0 from 0 to 30 years: import torch from torch import device as Device from torch.utils.data import IterableDataset from typing import Optional MS_IN_SECOND = 1000 MS_IN_MINUTE = 60 * MS_IN_SECOND MS_IN_HOUR = 60 * MS_IN_MINUTE MS_IN_DAY = 24 * MS_IN_HOUR MS_IN_YEAR = 365 * MS_IN_DAY def _msec_to_clock(msec): msec_val = msec % 1000 seconds = torch.div(msec, 1000, rounding_mode='floor') sec_val = seconds % 60 minutes = torch.div(seconds, 60, rounding_mode='floor') min_val = minutes % 60 hours = torch.div(minutes, 60, rounding_mode='floor') hour_val = hours % 24 days = torch.div(hours, 24, rounding_mode='floor') return torch.cat([days, hour_val, min_val, sec_val, msec_val], dim=1) class Clock(IterableDataset): def __init__(self, batch_size: int = 1, device: Optional[Device] = None, min_msec: int = -60 * MS_IN_YEAR, max_msec: int = 60 * MS_IN_YEAR): super().__init__() self.batch_size = batch_size self.device = device self.min_msec = min_msec self.max_msec = max_msec def sample(self): msec = torch.randint(self.min_msec, self.max_msec, (self.batch_size, 1), device=self.device, dtype=torch.int64) expected = _msec_to_clock(msec) return msec.to(torch.float64) / 1000, expected.to(torch.float32) def __iter__(self): while True: yield self.sample() I used MSE loss for clock components. I tried to fit it with a simple 4 layer 128 unit network and with a similarly sized SIREN . Both were essentially unable to approximate with error being ~1.5e+7 (untrained network gives ~3e+7). I searched for other works related to reproduction of periodic functions, but all I found was either sequence modeling, or attempts at other periodic activations similar to SIREN like x + sin(x) ** 2 , which yielded no further improvement. Are there better approaches?
