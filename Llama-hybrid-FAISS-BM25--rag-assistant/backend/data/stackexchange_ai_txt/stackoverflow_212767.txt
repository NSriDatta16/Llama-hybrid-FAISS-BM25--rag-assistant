[site]: stackoverflow
[post_id]: 212767
[parent_id]: 211216
[tags]: 
Infinite Lists Since you mentioned fibonacci, there is a very elegant way of generating fibonacci numbers from an infinite list like this: fib@(1:tfib) = 1 : 1 : [ a+b | (a,b) The @ operator allows you to use pattern matching on the 1:tfib structure while still referring to the whole pattern as fib. Note that the comprehension list enters an infinite recursion, generating an infinite list. However, you can request elements from it or operate them, as long as you request a finite amount: take 10 fib You can also apply an operation to all elements before requesting them: take 10 (map (\x -> x+1) fib) This is thanks to Haskell's lazy evaluation of parameters and lists.
