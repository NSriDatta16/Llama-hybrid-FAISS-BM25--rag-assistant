[site]: stackoverflow
[post_id]: 2926425
[parent_id]: 2926336
[tags]: 
Finding the chromatic number of a graph is NP-Complete (see Graph Coloring ). It is NP-Complete even to determine if a given graph is 3-colorable (and also to find a coloring). The wiki page linked to in the previous paragraph has some algorithms descriptions which you can probably use. btw, since it is NP-Complete and you don't really care about performance, why don't you try using brute force? Guess a chromatic number k, try all possibilities of vertex colouring (max k^n possibilities), if it is not colorable, new guess for chromatic number = min{n,2k}. If it is k-colorable, new guess for chromatic number = max{k/2,1}. Repeat, following the pattern used by binary search and find the optimal k. Good luck! And to answer your edit. Neither option of incrementing the color will work. Also, your algorithm is O(n^2). That itself is enough to tell it is highly likely that your algorithm is wrong, even without looking for counterexamples. This problem is NP-Complete!
