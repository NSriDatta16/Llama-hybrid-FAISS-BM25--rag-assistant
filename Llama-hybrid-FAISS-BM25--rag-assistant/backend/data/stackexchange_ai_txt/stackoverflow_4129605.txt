[site]: stackoverflow
[post_id]: 4129605
[parent_id]: 4129543
[tags]: 
Take a look at TDD . The basic premise is: write a failing test write code to make the test pass aggressively refactor As a general principle I think aggressive refactoring is a good idea - why have any more code than you really need. The difficulty comes in two parts, first, why refactor without a purpose and second, how do you know you haven't functionally changed the refactored code if you don't have a suite of tests against which you can test the refactored version? TDD is an answer to both of those things. I would encourage you to get in the habit of refactoring, but I would also encourage a practice like TDD so you don't break your code as you do it. HTH
