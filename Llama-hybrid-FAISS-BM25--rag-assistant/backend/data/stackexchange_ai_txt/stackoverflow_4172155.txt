[site]: stackoverflow
[post_id]: 4172155
[parent_id]: 4172020
[tags]: 
A recursive solution: function enumerate($uri, $placeholders){ $insts = array(); if (!empty($placeholders)){ $key = array_keys($placeholders)[0]; $values = array_pop($placeholders); foreach($values => $value){ $inst = str_replace($uri, $key, $value); $insts = array_merge($insts, (array)enumerate($inst, $placeholders)); } return $insts; } else { return $uri; } } Each call to the function pops one placeholder off the array and loops through its potential values enumerating through all the remaining placeholder values for each one. The complexity is O(k^n) where k is the average number of replacements for each placeholder and n is the number of placeholders. My PHP is a little rusty; let me know if I got any of the syntax wrong.
