[site]: crossvalidated
[post_id]: 176283
[parent_id]: 
[tags]: 
Dimensionality reduction of multiple signals using Fourier transform

I have $N$ recorded signals, $x$, each of which have been sampled 672 times across a time period of a week (= 15 min intervals). I will denote $x_{ij}$ as the $j$th sample for the $i$th recorded signal. The signals are a density representation of the activity across the week, meaning that $\sum_{j=1}^{672}(x_{ij}) = 1$ for $i = 1,2,...,N$. Also, the mean has been subtracted from each sampling point, meaning that $\sum_{i=1}^{N}(x_{ij}) / N = 0$ for $j = 1,2,...,672$. As I know that a lot of the information in the signals have a periodicity of a day, it would be obvious to represent the data using a Fourier transform as a way of dimensionality reduction. However, I've only ever seen the Fourier transform used for a single signal at a time. I want to apply Fourier transform as a dimensionality reduction technique across all of my signals and I therefore have the following questions: How do I decompose each recorded signal into a linear combination of the same basic sinusoidals (= fixed amplitude, period and phase)? How do I quantify the amount of variance captured across the population of recorded signals with the top $k$ basic sinusoidals? Both general advice as well as advice for packages in Python would be great!
