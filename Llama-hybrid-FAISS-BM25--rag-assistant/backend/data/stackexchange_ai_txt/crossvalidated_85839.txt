[site]: crossvalidated
[post_id]: 85839
[parent_id]: 
[tags]: 
Tricks for a very fast implementation of Random Forest

I am implementing my own Random (regression) Forest algorithm and am looking for tricks to speed up the estimation of forests on large datasets. So far I have implemented three main tricks: 1) Use a running variance on the sorted response vector to efficiently determine the optimal split point (for regression forests). 2) Determine whether a split is optimal only on a subset of all possible split points. 3) Parallelize the construction. What other tricks are there that I am missing out on? Note that CPUs are scarce but hard drives are not, so I am looking for tricks like some kind of pre-sorting or other such tricks that save information to disk that can be loaded whenever I estimate a new tree to speed up that tree's estimation. RAM is somewhat scarce but it's mostly CPU scarcity since I can use multithreading over a large RAM base/heap size. I am sure that my implementation can be sped up by 3-4x but I am not sure how.
