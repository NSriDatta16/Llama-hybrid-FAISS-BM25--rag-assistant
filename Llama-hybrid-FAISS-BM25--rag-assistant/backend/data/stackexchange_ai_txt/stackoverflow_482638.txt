[site]: stackoverflow
[post_id]: 482638
[parent_id]: 482594
[tags]: 
Singleton's are often simply used to justify the existence of some global state. If you have global state accept it and don't feel the need to wrap it in a pattern like singleton except perhaps in the following limited circumstances: Your are presenting this global state from a library. If you are exposing it as a plain public static field it may become extremely difficult to change your decision to rely on global state (something that is likely to occur). In those circumstances presenting the value to the outside world not as a Singleton but as a default that just happens to be statically defined will allow the change in design (and discourage users of the API to treat it as if it could only be the only instance). This is really just a Factory that you are currently implementing simply As such the 'hiding' of the construction is the important part, not the global nature of the returned value. In cases where the consumers of the class are part of the same build process (i.e. if you change the class in some way the code affected will be directly affected on the next build) then the need to do this wrapping to allow change is a moot point since you can simply change it directly if need be. This is an application of the You Aren't Gonna Need It guideline.
