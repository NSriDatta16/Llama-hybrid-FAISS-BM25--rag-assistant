[site]: stackoverflow
[post_id]: 2919276
[parent_id]: 2308020
[tags]: 
There are cases where you can't rely on the calling code to pass a type reference. Below is a solution I cooked up to solve this problem. It's a bit of a shot-gun approach, but it does work... using System; using System.Reflection; using System.Collections.Generic; using System.Linq; using System.Diagnostics; namespace Ethica.Reflection { /// /// Helps in discovery of the target of an Attribute /// /// An Attribute derived type /// /// The .NET framework does not provide navigation from attributes back to their targets, principally for the reason that /// in typical usage scenarios for attributes, the attribute is discovered by a routine which already has a reference to a /// member type. /// /// There are, however, bona-fide cases where an attribute needs to detect it's target - an example is a localizable sub-class of the /// DescriptionAttribute. In order for the DescriptionAttribute to return a localized string, it requires a resource key and, ideally, /// a type reference as the base-key for the ResourceManager. A DescriptionAttribute could not provide this information without /// a reference to it's target type. /// /// Note to callers: /// /// Your Attribute-derived class must implement Equals and GetHashCode, otherwise a run-time exception will occur, since this class /// creates a dictionary of attributes in order to speed up target lookups. /// public static class AttributeTargetHelper where TAttribute : Attribute { /// /// Map of attributes and their respective targets /// private static Dictionary targetMap; /// /// List of assemblies that should not be rescanned for types. /// private static List skipAssemblies; /// /// Adds an attribute and it's target to the dictionary /// /// /// private static void Add(TAttribute attribute, object item) { targetMap.Add(attribute, item); } /// /// Scans an assembly for all instances of the attribute. /// /// private static void ScanAssembly(Assembly assembly) { const BindingFlags memberInfoBinding = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; if (!skipAssemblies.Contains(assembly.FullName)) { skipAssemblies.Add(assembly.FullName); Debug.WriteLine("Loading attribute targets for " + typeof(TAttribute).Name + " from assembly " + assembly.FullName); foreach (TAttribute attr in assembly.GetCustomAttributes(typeof(TAttribute), false)) Add(attr, assembly); foreach (Type type in assembly.GetTypes()) { foreach (TAttribute attr in type.GetCustomAttributes(typeof(TAttribute), false)) Add(attr, type); foreach (MemberInfo member in type.GetMembers(memberInfoBinding)) { foreach (TAttribute attr in member.GetCustomAttributes(typeof(TAttribute), false)) Add(attr, member); if (member.MemberType == MemberTypes.Method) foreach (var parameter in ((MethodInfo)member).GetParameters()) foreach (TAttribute attr in parameter.GetCustomAttributes(typeof(TAttribute), false)) Add(attr, parameter); } } } foreach (var assemblyName in assembly.GetReferencedAssemblies()) { if (!skipAssemblies.Contains(assemblyName.FullName)) ScanAssembly(Assembly.Load(assemblyName)); } } /// /// Returns the target of an attribute. /// /// The attribute for which a target is sought /// The target of the attribute - either an Assembly, Type or MemberInfo instance. public static object GetTarget(TAttribute attribute) { object result; if (!targetMap.TryGetValue(attribute, out result)) { // Since types can be loaded at any time, recheck that all assemblies are included... // Walk up the stack in a last-ditch effort to find instances of the attribute. StackTrace stackTrace = new StackTrace(); // get call stack StackFrame[] stackFrames = stackTrace.GetFrames(); // get method calls (frames) // write call stack method names foreach (StackFrame stackFrame in stackFrames) { Console.WriteLine(stackFrame.GetMethod().Name); // write method name ScanAssembly(stackFrame.GetMethod().GetType().Assembly); } if (!targetMap.TryGetValue(attribute, out result)) throw new InvalidProgramException("Cannot find assembly referencing attribute"); } return result; } /// /// Static constructor for type. /// static AttributeTargetHelper() { targetMap = new Dictionary (); // Do not load any assemblies reference by the assembly which declares the attribute, since they cannot possibly use the attribute skipAssemblies = new List (typeof(TAttribute).Assembly.GetReferencedAssemblies().Select(c => c.FullName)); // Skip common system assemblies skipAssemblies.Add("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); skipAssemblies.Add("System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); skipAssemblies.Add("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); skipAssemblies.Add("System.Data.SqlXml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); skipAssemblies.Add("System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); skipAssemblies.Add("System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); // Scan the entire application ScanAssembly(Assembly.GetEntryAssembly()); } } /// /// Extends attributes so that their targets can be discovered /// public static class AttributeTargetHelperExtension { /// /// Gets the target of an attribute /// /// /// The attribute for which a target is sought /// The target of the attribute - either an Assembly, Type or MemberInfo instance. public static object GetTarget (this TAttribute attribute) where TAttribute : Attribute { return AttributeTargetHelper .GetTarget(attribute); } } }
