[site]: stackoverflow
[post_id]: 2074400
[parent_id]: 2070000
[tags]: 
Here's what I came up with... SELECT * FROM Coupons C WHERE C.OriginatorID NOT IN ( SELECT DISTINCT C.OriginatorID FROM Responses R INNER JOIN Coupons C ON C.CouponID = R.CouponID WHERE C.OriginatorID IN ( SELECT Originators FROM ( SELECT C.OriginatorID As Originators, Sum(R.Rejected) AS Rejections FROM Responses R INNER JOIN Coupons C ON C.CouponID = R.CouponID WHERE R.RespondentID = 1 GROUP BY C.OriginatorID ) AS RejectionTally WHERE Rejections > 1 ) ) It has the disadvantage of an additional embedded SELECT, but it appears that most of the performance hit occurs the moment I attempt to exclude particular OriginatorIDs from the Coupons table anyhow. For example, manually entering an exclusion, such as... SELECT * FROM Coupons WHERE OriginatorID <> 10 has the same effect. On a test table of 50 rows, the processing time is .27s as opposed to an unconstrained query that has a processing time of .08s. The extra embedding is due to my needing a single column for the outer NOT IN (i.e., the OriginatorID's that I'm seeking to exclude). That meant I had to first create the SUMs, then isolate the records whose SUM was less than the criterion (1), and then exclude those records.
