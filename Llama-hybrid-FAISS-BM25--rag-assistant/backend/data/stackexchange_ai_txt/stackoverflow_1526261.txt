[site]: stackoverflow
[post_id]: 1526261
[parent_id]: 1526098
[tags]: 
Kudos to you for the sheer awesomeness of this question. You're pretty much up against the limits of what Java can do. (Though, of course, delegating like you describe would be a breeze in any functional language.) First of all, limitation #2 should not be an issue. As of 1.5, Java no longer restricts you to fixed declarations in methods. You can use an ellipsis to indicate a variable number of arguments, like so public static double average( double... numbers ) { double total = 0.0; for (double d : numbers) { total += d; } return total / numbers.length; } I'm not entirely sure how to get around limitation #1, but I'm thinking about something with generics and/or anonymous inner classes . I'm guessing here -- I haven't tried doing this myself -- but you could create a map of function names and delegate classes like so: public interface Callback {...} public interface AddUserCallBack extends Callback {...} public class UserImpl { public T getDelegateRoutine(); ... } Generics in Java have some hair-pulling frustrations associated with them, primarily due to type erasure. You may need to juggle both interfaces and abstract base classes before you get it to do what you want. But something like this should work for you.
