[site]: stackoverflow
[post_id]: 4825176
[parent_id]: 4297723
[tags]: 
The best practice for detecting if AirPrint is available is to use NSClassFromString . If you use this method in general, then you always know if exactly the class you want is available, without having to hard-code which features correspond with which version. Example code: Class printControllerClass = NSClassFromString(@"UIPrintInteractionController"); if (printControllerClass) { [self setupCanPrintUI]; } else { [self setupCannotPrintUI]; } That way your app can still work on previous iOS versions, although it won't be able to print from them. I've been able to use this technique and run it on an iOS 3.0 device without any problems with the block code (the ^-based stuff). In my build settings, I have the Base SDK set to iOS 4.2, and the Deployment Target set to iOS 3.0. I posted a sample Xcode project at the end of this blog post on printing in iOS . This is the project that successfully runs for me on a device with iOS 3.0 and another device with iOS 4.2. You may have to change the bundle identifier in the info.plist to get the code-signing to work for you, but that's independent of the printing stuff.
