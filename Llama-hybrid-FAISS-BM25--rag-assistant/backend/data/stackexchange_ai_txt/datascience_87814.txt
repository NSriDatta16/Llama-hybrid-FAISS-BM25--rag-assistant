[site]: datascience
[post_id]: 87814
[parent_id]: 87806
[tags]: 
It is really hard to figure out the logic behind what you are doing, it look odd But assuming you are trying to apply a preprocessing step to a data frame I would go as follows: from sklearn.compose import make_column_transformer from sklearn.preprocessing import OrdinalEncoder ordinal_features=['LotShape','ExterQual','ExterCond','BsmtQual','BsmtCond', 'BsmtExposure','BsmtFinType1','BsmtFinType2','HeatingQC','KitchenQual', 'FireplaceQu','GarageQual','GarageCond','GarageFinish','Fence','PoolQC'] ordinal_orders=[ #LotShape ['Reg','IR1' ,'IR2','IR3'], #ExterQual ['Fa','TA','Gd','Ex'], #ExterCond ['Po','Fa','TA','Gd','Ex'], #BsmtQual ['None','Fa','TA','Gd','Ex'], #BsmtCond ['None','Po','Fa','TA','Gd','Ex'], #BsmtExposure ['None','No','Mn','Av','Gd'], #BsmtFinType1 ['None','Unf','LwQ', 'Rec','BLQ','ALQ' , 'GLQ' ], #BsmtFinType2 ['None','Unf','LwQ', 'Rec','BLQ','ALQ' , 'GLQ' ], #HeatingQC ['Po','Fa','TA','Gd','Ex'], #KitchenQual ['Fa','TA','Gd','Ex'], #FireplaceQu ['None','Po','Fa','TA','Gd','Ex'], #GarageQual ['None','Po','Fa','TA','Gd','Ex'], #GarageCond ['None','Po','Fa','TA','Gd','Ex'], #GarageFinish ['None','Unf','RFn','Fin'], #Fence ['None','MnWw','GdWo','MnPrv','GdPrv'], #PoolQC ['None','Fa','Gd','Ex'] ] transformer = make_column_transformer((OrdinalEncoder(categories= ordinal_orders),ordinal_features), remainder = "passthrough").fit(X_train) Then you can apply the transformer to both X_train and X_test transformer.transform(X_train) or transformer.transform(X_test)
