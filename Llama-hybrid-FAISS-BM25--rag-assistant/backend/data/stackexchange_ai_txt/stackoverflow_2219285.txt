[site]: stackoverflow
[post_id]: 2219285
[parent_id]: 2219244
[tags]: 
There are many options, but the general and also the default philosophy introduced by 754 is to not trap but to instead produce special results such as infinities that may or may not show up in important results. As a result, the functions that test the state of individual operations are not used as often as the functions that test the representations of results. See, for example... LIST OF FUNCTIONS Each of the functions that use floating-point values are provided in sin- gle, double, and extended precision; the double precision prototypes are listed here. The man pages for the individual functions provide more details on their use, special cases, and prototypes for their single and extended precision versions. int fpclassify(double) int isfinite(double) int isinf(double) int isnan(double) int isnormal(double) int signbit(double) Update: For anyone who really thinks FPU ops generate SIGFPE in a default case these days, I would encourage you to try this program. You can easily generate underflow, overflow, and divide-by-zero. What you will not generate (unless you run it on the last surviving VAX or a non-754 RISC) is SIGFPE: #include #include int main(int ac, char **av) { return printf("%f\n", atof(av[1]) / atof(av[2])); }
