[site]: stackoverflow
[post_id]: 4227211
[parent_id]: 4091606
[tags]: 
Reporting to an external website/database I wanted a way to simply and automatically report errors (since users often don't) from our applications. The easiest solution I could come up with was a public URL - a web page which could take input and store it to a database - that is sent data upon an application error. (The database could then be checked by a dev or a script to know if there are new errors.) I wrote the web page in PHP and created a mysql database, user, and table to store the data. I decided on four user variables, an id, and a timestamp. The possible variables (either included in the URL or as POST data) are: app (application name) msg (message - e.g. Exception occurred ...) dev (developer - e.g. Pat) src (source - this would come from a variable pertaining to the machine on which the app was running, e.g. Environment.MachineName or some such) log (a log file or verbose message) (All of the variables are optional, but nothing is reported if none of them are set - so if you just visit the website URL nothing is sent to the db.) To send the data to the URL, I used NLog's WebService target . (Note, I had a few problems with this target at first. It wasn't until I looked at the source that I figured out that my url could not end with a / .) All in all, it's not a bad system for keeping tabs on external apps. (Of course, the polite thing to do is to inform your users that you will be reporting possibly sensitive data and to give them a way to opt in/out.) MySQL stuff (The db user has only INSERT privileges on this one table in its own database.) CREATE TABLE `reports` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `ts` timestamp NULL DEFAULT CURRENT_TIMESTAMP, `applicationName` text, `message` text, `developer` text, `source` text, `logData` longtext, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='storage place for reports from external applications' Website code (PHP 5.3 or 5.2 with PDO enabled , file is index.php in /report folder) $app, ':msg' => $msg, ':dev' => $dev, ':src' => $src, ':log' => $log ); //print_r($dbData); // For debugging only! This could allow XSS attacks. if(isEmpty($dbData)) die("No data provided"); try { $db = new PDO("mysql:host=$host;dbname=reporting", "reporter", $pass, array( PDO::ATTR_PERSISTENT => true )); $s = $db->prepare("INSERT INTO reporting.reports ( applicationName, message, developer, source, logData ) VALUES ( :app, :msg, :dev, :src, :log );" ); $s->execute($dbData); print "Added report to database"; } catch (PDOException $e) { // Sensitive information can be displayed if this exception isn't handled //print "Error!: " . $e->getMessage() . " "; die("PDO error"); } function isEmpty($array = array()) { foreach ($array as $element) { if (!empty($element)) { return false; } } return true; } ?> App code (NLog config file) --> level >= LogLevel.Warn = LogLevel.Error" filter="level >= LogLevel.Trace" /> Note: there may be some issues with the size of the log file, but I haven't figured out a simple way to truncate it (e.g. a la *nix's tail command ).
