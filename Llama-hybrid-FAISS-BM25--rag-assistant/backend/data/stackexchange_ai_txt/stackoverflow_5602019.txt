[site]: stackoverflow
[post_id]: 5602019
[parent_id]: 5601790
[tags]: 
Consider, that you are pizza deliverer and you want to calculate your effective range (where you can go within 30 minutes). And you want to make a colored bar 3d graph of N to E section of that time data, something like (with bogus data): And you want to include like 100k of houses ... Well at least I heard, that program like this, was made before limits where introduced in Google map. Limits just bite hard in this case. If you have geo location from all the houses, then you can find a prediction from how far are the points on earth, when you fly like a bird. Sort them based on that, and find results for best predictions. Edit: Added Java code example, that could be useful when creating predictions: /** * Thaddeus Vincenty's inverse method formulae implementation for * geographical distance between two given points on earth. * @param L1 * geographical latitude of standpoint in decimal degrees * @param G1 * geographical longitude of standpoint in decimal degrees * @param L2 * geographical latitude of destination in decimal degrees * @param G2 * geographical longitude of destination in decimal degrees * @return Geographical distance in kilometeres */ public static double getDistance(final double L1, final double G1, final double L2, final double G2) { double delta, p0, p1, p2, p3; // The average radius for a spherical approximation of Earth double rEarth = 6371.01d; delta = G1 - G2; p0 = Math.cos(L2) * Math.cos(delta); p1 = Math.cos(L2) * Math.sin(delta); p2 = Math.cos(L1) * Math.sin(L2) - Math.sin(L1) * p0; p3 = Math.sin(L1) * Math.sin(L2) + Math.cos(L1) * p0; return rEarth * Math.atan2(Math.sqrt(p1 * p1 + p2 * p2), p3); } /** * Rounds double to nr number of decimal places * @param d * floating-point number * @param nr * decimal places to keep * @return rounded number with nr decimal places */ public static double round(double d, int nr) { return new java.math.BigDecimal(Double.toString(d)).setScale(nr, java.math.BigDecimal.ROUND_HALF_UP).doubleValue(); } public static void main(String[] args) { double L1 = Math.toRadians(Double.parseDouble(args[0])); double G1 = Math.toRadians(Double.parseDouble(args[1])); double L2 = Math.toRadians(Double.parseDouble(args[2])); double G2 = Math.toRadians(Double.parseDouble(args[3])); System.out.println(round(getDistance(L1, G1, L2, G2), 2)); }
