[site]: stackoverflow
[post_id]: 4907469
[parent_id]: 4905437
[tags]: 
I don't know how your current implementation look but you can walk up the Visual Tree until you either find a ListViewItem or a GridViewColumnHeader . If you find a GridViewColumnHeader you know that the item was dropped in this specific Header. Uploaded a small sample project here demonstrating the effect with MessageBox 's on drop: http://www.mediafire.com/?v3l8nl4rnewhz5s It will look something like this private void ListView_Drop(object sender, DragEventArgs e) { ListView parent = sender as ListView; YourDataClass data = e.Data.GetData(typeof(YourDataClass)) as YourDataClass; if (data != null) { HitTestResult hitTestResult = VisualTreeHelper.HitTest(parent, e.GetPosition(parent)); ListViewItem hitItem = VisualTreeHelpers.GetVisualParent (hitTestResult.VisualHit); GridViewColumnHeader columnHeader = VisualTreeHelpers.GetVisualParent (hitTestResult.VisualHit); if (hitItem != null) // ListViewItem Drop { //.. } else if (columnHeader != null) // Header Drop { //.. } } } public static T GetVisualParent (object childObject) where T : Visual { DependencyObject child = childObject as DependencyObject; while ((child != null) && !(child is T)) { child = VisualTreeHelper.GetParent(child); } return child as T; }
