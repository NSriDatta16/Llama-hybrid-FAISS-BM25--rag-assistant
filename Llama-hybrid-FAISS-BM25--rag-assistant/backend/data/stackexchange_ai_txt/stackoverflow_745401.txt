[site]: stackoverflow
[post_id]: 745401
[parent_id]: 745339
[tags]: 
For COM API's, you really have all the versioning information you need in your libraries. I'd find naming those DLL's with version numbers redundant at best, confusing at worst (at least if version numbers get out of synch). I favour appending a version identifier to interface and coclass names whenever I want a clear upgrade path and anticpate any changes. For plain binary DLL API's, appending version numbers is an idea, but not one I've ever seeen well executed (and quite terribly executed in those old 16 bit VB runtime DLL's!). Do they have clear and delimited API's, or do they expose dozens of functions? You're going to have problems distingushing a minor from a breaking change if the interfaces are large. Once you start labelling versions this way, you're going to have to be consistent. Every version change will mean that statically linking clients have to be recompiled (and hence version relabelled themselves). The potential problem here is that you get a lot of 'version noise' , hiding the important changes. Windows binaries contain version metadata (the VERSIONINFO structure). As LeJeune says, that's a well-known route, albeit one that deosn't automatically cause errors when you link the wrong stuff together. However, it's one you can relatively easily leverage to support whatever configuration management schema you need.
