[site]: stackoverflow
[post_id]: 4460411
[parent_id]: 4460275
[tags]: 
[Joris' comments suggest I was too cryptic, so some additional explanation]: Effectively, if we ignore the processing in your loop, this is what you have: > p gs1 foo foo [1] "10" "20" "30" "40" "50" "60" "70" "80" "90" "100" So gs1 is returning something, and output is being filled, as long as toappend is acharacter or can be coerced to character to go into output . Now, if toappend is not what you think it is, then that is where you will start to get problems. I see two potential problems; i) toappend is actually a factor (which is something Joris mentions too) and you are getting the numerical equivalent of the internal coding for that level. In which case ouput[i] should suffice, or ii) index is greater than length 1 and you are getting more elements in the vector that you expect and thus at the next iteration you are overwriting them. Are you sure toappend is a single character vector of length 1? How about you show us the incorrect output (edit your Question and add the output from the function) and tell us why it is wrong! Of course, this can all be simplified to conditions[p, 3] and no need for a loop but I assume your actual functions is more complex? Note on setting up loops As for loops in general, you make the mistake of not preallocating storage. You shouldn't do things the way you are. Notice how at each iteration R is having to grow output by one element per iteration. The same would be true of your output idiom. This involves lots of redundant copying of the vector which bogs loops down. Instead, allocate enough storage up front and fill output as you are doing. E.g.: gs2 which produces this output: > gs2(p) [1] "10" "" "" "" "" "" "" "" "" "" [1] "10" "20" "" "" "" "" "" "" "" "" [1] "10" "20" "30" "" "" "" "" "" "" "" [1] "10" "20" "30" "40" "" "" "" "" "" "" [1] "10" "20" "30" "40" "50" "" "" "" "" "" [1] "10" "20" "30" "40" "50" "60" "" "" "" "" [1] "10" "20" "30" "40" "50" "60" "70" "" "" "" [1] "10" "20" "30" "40" "50" "60" "70" "80" "" "" [1] "10" "20" "30" "40" "50" "60" "70" "80" "90" "" [1] "10" "20" "30" "40" "50" "60" "70" "80" "90" "100" [1] "10" "20" "30" "40" "50" "60" "70" "80" "90" "100" The duplicated last line is due to auto-printing of the object ( output ) returned from the function.
