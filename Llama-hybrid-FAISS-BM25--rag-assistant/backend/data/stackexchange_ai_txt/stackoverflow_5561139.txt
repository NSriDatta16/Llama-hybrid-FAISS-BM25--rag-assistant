[site]: stackoverflow
[post_id]: 5561139
[parent_id]: 5560111
[tags]: 
Your code has some problems. Let's fix those first. # Package names should start with upper case unless they are pragmas. package SetVariables; # Do this EVERYWHERE. It will save you hours of debugging. use strict; use warnings; sub readConfig{ # Use the three argument form of open() open( my $fh, ' ) { chomp $line; # One chomp of the line is sufficient. ($s_var, $s_val) = split "=", $line; $config{$s_var} = $s_val; print "set $s_var = $s_val\n"; } close $fh; return \%config; } Then use like so: use SetVariables; my $config = SetVariables::readConfig(); print "$_ is $config->{$_}\n" for keys %$config; But rather than do all this yourself, check out the many, many config file modules on CPAN . Consider Config::Any , Config::IniFiles , Config::JSON . You note in your comment that you are trying to work with multiple files, your main code and a couple of packages. One pattern that is common is to load your config in your main code and pass it (or select elements of it) to consuming code: package LoadConfig; sub read_config { my $file = shift; my $config; # Do stuff to read a file into your config object; return $config; } 1; Meanwhile in another file: package DoStuff; sub run_some_tests { my $foo = shift; my $bar = shift; # Do stuff here return; } sub do_junk { my $config; my $foo = $config->{foo}; # Do junk return; } 1; And in your main script: use DoStuff; use LoadConfig; my $config = LoadConfig::read_config('my_config_file.cfg'); run_some_tests( $config->{foo}, $config->{bar} ); do_junk( $config ); So in run_some_tests() I extract a couple elements from the config and pass them in individually. In do_junk() I just pass in the whole config variable.
