[site]: stackoverflow
[post_id]: 4971370
[parent_id]: 
[tags]: 
Database storage of longitude/latitude values in SQL Server: decimal(2, ?)

In the table definition I saw: Latitude -> varchar(50) Longitude -> nvarchar(50) Immediately, obviously, I queried the thinking behind this - being positively sure these values are in fact numerical by nature. Long story short: I postulated that these will be numerical, decimal in fact, and we would discard the 'thinking-in-strings' philosophy. Now for the horns of my dilemma, I just went ahead and typed: Latitude -> decimal(2, 4) But hold on a second, 4 ain't right, right? Right. So I thought I'd up the threshold before realising (in a split second might I add) that 6 or 8 might not not cut it either. So, first things first... Am I right in insisting we even go about it this way? And if so... To what precision ought these values be stored to ensure we can persist the entire value which is to be inserted? For example, is there anything predefined by specification? I don't just want to use something like Latitude -> decimal(2, 16) simply for it to be just as flawed as decimal(2, 2) in principle. And a similar question arises for Longitude specifically but I'm assuming the answer to one will suffice for the other, i.e decimal(3, answer) . We are using MSSQL Server 2005. It seems I am educating myself with SQL Server by manual experience and therefore rendering parts of this question irrelevant: I can only use decimal(x, max(x)) not decimal(x, y) anyway! Will leave the question as is for input.
