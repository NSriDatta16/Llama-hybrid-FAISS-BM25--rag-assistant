[site]: stackoverflow
[post_id]: 4410036
[parent_id]: 4406984
[tags]: 
Before I go into details, it is worth pointing out that achieving 100% coverage is not a worthwhile goal. Instead, you should be aiming for good coverage of the code that matters. Coverage is less important for code sections where the chance of an unseen error is low is; e.g. when the code is so simple that a one-time visual inspection will suffice * . (Also, 100% coverage by itself is no guarantee of adequate testing.) The first example is marginally useful. It looks like the exception will only be thrown if either your SQL is incorrect or if you supply a deliberately a bad record. Given the nature of the code, I'd give this one a miss. (But if you really want to, you could mock sqlMapClientTemplate with an object that gives you some bad SQL ... for example.) The second example is worth covering. You should be able to trigger it by passing a reportSearch that fails one of the validations. The third example is not worth covering. You can tell the code is correct by inspection. (But injecting bad SQL as in the first example should work.) * There is a flaw in this argument. Someone may replace some untested lines that are "obviously correct" with others that are not. So I guess there needs to be a code inspection tool that can be used "check off" the untested code sections ... and notice when the code has changed since the last inspection.
