[site]: stackoverflow
[post_id]: 5550583
[parent_id]: 5550531
[tags]: 
I have an article here which outlines various locking approaches. This was initially written for BizTalk but applies to general .NET. I have explained double if sandwitching the lock statement which prevents race conditions . And that is the TopCache in the article. Just read the bottom third of the article. UPDATE One word on static method performance. Static method is called by CLR call while instance methods are normally called by callvirt . callvirt which is a virtual call has to go up the inheritance hierarchy to find out which methods to call. This will cause some overhead but it is almost negligible. There are exceptions (for example explicit interface implementation) which is outside scope of this question. From CLR via C#: The callvirt IL instruction can be used to call instance and virtual methods, not static methods. When the callvirt instruction is used to call an instance or virtual method, you must specify a variable that refers to an object. When the callvirt IL instruction is used to call a non-virtual instance method, the type of the variable indicates which type defines the method that the CLR should call. When the callvirt IL instruction is used to call a virtual instance method, the CLR discovers the actual type of the object being used to make the call and then calls the method polymorphically. It order to determine the type, the variable being used to make the call must not be null. In other words, when compiling this call, the JIT compiler generates code that verifies that the variable's value is not null. If it is null, the callvirt instruction causes the CLR to throw a NullReferenceException. This additional check means that the callvirt IL instruction executes slightly more slowly than the call instruction. Note that this null check is performed even when the callvirt instruction is used to call a non-virtual instance method.
