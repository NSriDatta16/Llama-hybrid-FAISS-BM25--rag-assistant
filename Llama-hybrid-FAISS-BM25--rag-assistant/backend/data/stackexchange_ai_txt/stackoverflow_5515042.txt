[site]: stackoverflow
[post_id]: 5515042
[parent_id]: 5514985
[tags]: 
When I try to picture how the Strategy Pattern fits this scenario it looks very similar. Similar? It should look identical. The distinction is one of how the context and delegation works. In principle a Command is the "active" agent. A Strategy is injected into some active agent. That distinction is pretty subtle. It barely changes the design. What does change is the expectation. Command objects (more-or-less) stand alone. They're built to do their work, and then they can vanish. No one cares about them any more. Perhaps they also use the Memento pattern, and have some future life, but perhaps not. Strategy objects (more-or-less) live with the object into which they're injected. A Strategy would be part of some larger object, and could be replaced by a different implementation without breaking or changing anything else. But the essential interface is largely the same. In most examples the strategy is a simple object with a single method, Those are poor examples. however in my case the strategy will need a reference to the transaction as well as validation parameters. Not unusual. Nothing wrong with it.
