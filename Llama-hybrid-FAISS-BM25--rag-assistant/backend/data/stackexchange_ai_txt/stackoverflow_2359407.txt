[site]: stackoverflow
[post_id]: 2359407
[parent_id]: 2359361
[tags]: 
I see a few issues with the idea of persisting business data using object serialization: These aren't necessarily show-stoppers for the idea, but rather something to think about... The data can't be queried, reported or inspected. It's entirely opaquely captured by the application. Debugging serialized data is harder than being able to view the corresponding data in a database, or even a format like CSV. There's no atomicity - it possible to corrupt your entire "database" with one power failure or application crash. If the data model changes, updating the existing persisted entities requires a version of the app that can read both the old and new format. With a database, you can just add a column (or sub table). There's no clean way to implement concurrent access. What happens if more than one user want to view or edit the data? One thing I've learned, is that small apps tend to grow and become "large apps". When organizations guess incorrectly about the potential value of an application, they tend to incur the costs of this kind of unexpected, organic growth later. You also mention that you liked at SQLLite and didn't like it. What is it that you didn't like? What kinds of problems did you anticipate? If you're just looking for a way to "cut corners" to get this done quicker - that may be ok in the short term - but be careful - these kinds of decisions have way of coming back to bite you .
