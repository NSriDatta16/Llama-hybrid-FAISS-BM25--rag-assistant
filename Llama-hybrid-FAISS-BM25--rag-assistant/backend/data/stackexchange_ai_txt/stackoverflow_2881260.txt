[site]: stackoverflow
[post_id]: 2881260
[parent_id]: 
[tags]: 
Comparing Design Patterns

I am learning design patterns using C#. One of the challenges that I am facing is that they look similar. Could you please help me to distinguish them – basically when to use them? - Why not the other? Bridge and Strategy State and Strategy Façade and Strategy Composite and Strategy I understand that there are lots of resources available in the web. However they does not treat this special scenario. [Note: I am looking for implementation examples and rationale behind the selection; not mere explanations] Thanks for your response. I made more attempts to learn Bridge. I have the following scenario. In my room there are two TVs. Each one has its own remote control; but both has the same interface for the user to use. However I want to have my own remote control in which I will use the processors of any of the two remotes. I have the following code. I think, this is Strategy Pattern. I want to convert this to Bridge. How to convert it into Bridge? What is the advantage that I will get by converting into Bridge? public class PhilliTV { public void Begin() { Console.WriteLine("PhilliTV Bagan"); } } public class SonTV { public void Initiate() { Console.WriteLine("SonTV Initiated"); } } public class SonRemote : IRemote { SonTV stv = new SonTV(); public void Play() { stv.Initiate(); } } public class PhilliRemote : IRemote { PhilliTV ptv = new PhilliTV(); public void Play() { ptv.Begin(); } } public class URemoteConsumer { IRemote remote = new PhilliRemote(); public void MyPlay() { remote.Play(); }
