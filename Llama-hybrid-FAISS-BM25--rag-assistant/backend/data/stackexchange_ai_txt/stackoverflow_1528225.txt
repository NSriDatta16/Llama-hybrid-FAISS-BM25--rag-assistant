[site]: stackoverflow
[post_id]: 1528225
[parent_id]: 1528012
[tags]: 
This doesn't seem that secure from the perspective of the client. Two (related) problems: How does the client trust the server? How can it verify that the key the sever's presenting is the one that belongs to it? It's possible to do man-in-the-middle attacks. A malicious proxy could strip out and store the public key before the client sees it, substituting its own, then decrypt the password when the client authenticates, store it, and re-encrypt and send the response on so the client doesn't realise something's up. What's wrong with ordinary SSL? There has to be a consensus that it's secure, otherwise vendors and organisations would drop support for it overnight. By contrast, most attempts to invent a funky new way to do security "on the cheap" usually miss something fundamental.
