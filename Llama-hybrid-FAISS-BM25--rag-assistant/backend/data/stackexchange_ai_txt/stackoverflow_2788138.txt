[site]: stackoverflow
[post_id]: 2788138
[parent_id]: 2787873
[tags]: 
If you feel that typing this.buttonExample over and over again is too repetitive, simply assign that object to a variable and use that variable in the rest of the statements: var b : Button = this.buttonExample; b.buttonMode = true; b.useHandCursor = true; b.addEventListener(...); As other's have mentioned, there's also the with statement, but it's use is discouraged since it makes the code harder to read, and may lead to weird results: with (this.buttonExample) { buttonMode = true; useHandCursor = true; addEventListener(...); } You can, of course, combine these suggestions with other tricks, like chaining assignments: var b : Button = this.buttonExample; b.buttonMode = b.useHandCursor = true; b.addEventListener(...); Be very careful to only chain assignments in this way if the assigned value is immutable (e.g. true , false , numbers and strings, but not arrays or most other objects), because the same object will be assigned to all variables on the left side. If the value is immutable this doesn't matter, but if it's mutable you can end up with weird results, like this in this example: a = b = [ ]; a.push(1); b.push(2); trace(a); // outputs 1, 2 trace(b); // also outputs 1, 2 The reason for this result is that a and b both reference the same array, and since arrays are mutable it doesn't matter how you access the object, it will still be changed. a and b don't reference different arrays just because they are different variables. You may think that you could do something like the following, but it will not work. // this will NOT work var b : Button = this.buttonExample; (b.buttonMode = b.useHandCursor = true).addEventListener(...); The reason why it works to say b.buttonMode = b.useHandCursor = true , but not to add .addEventListener(...) is that the value of an assignment expression (e.g. b.buttonMode = true ) is the value assigned to the left hand side (e.g. true ). If you add .addEventListener(...) to that you are essentially saying true.addEventListener(...) , which clearly is not what you want. In other words b.buttonMode = b.useHandCursor = false; is equivalent to b.useHandCursor = false; b.buttonMode = b.useHandCursor; Which should hopefully also make the caveats mentioned above plain.
