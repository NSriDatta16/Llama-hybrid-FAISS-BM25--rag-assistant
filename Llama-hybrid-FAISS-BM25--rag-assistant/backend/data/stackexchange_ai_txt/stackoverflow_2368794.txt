[site]: stackoverflow
[post_id]: 2368794
[parent_id]: 2368728
[tags]: 
Yes. Well, sort of. Normal maps can be accurately made from height-maps. Generally, you can also put a regular texture through and get decent results as well. Keep in mind there are other methods of making a normal map, such as taking a high-resolution model, making it low resolution, then doing ray casting to see what the normal should be for the low-resolution model to simulate the higher one. For height-map to normal-map, you can use the Sobel Operator . This operator can be run in the x-direction, telling you the x-component of the normal, and then the y-direction, telling you the y-component. You can calculate z with 1.0 / strength where strength is the emphasis or "deepness" of the normal map. Then, take that x, y, and z, throw them into a vector, normalize it, and you have your normal at that point. Encode it into the pixel and you're done. Here's some older incomplete-code that demonstrates this: // pretend types, something like this struct pixel { uint8_t red; uint8_t green; uint8_t blue; }; struct vector3d; // a 3-vector with doubles struct texture; // a 2d array of pixels // determine intensity of pixel, from 0 - 1 const double intensity(const pixel& pPixel) { const double r = static_cast (pPixel.red); const double g = static_cast (pPixel.green); const double b = static_cast (pPixel.blue); const double average = (r + g + b) / 3.0; return average / 255.0; } const int clamp(int pX, int pMax) { if (pX > pMax) { return pMax; } else if (pX (pTexture.size()); for (size_t row = 0; row
