[site]: stackoverflow
[post_id]: 648259
[parent_id]: 648220
[tags]: 
I don't know what your area of reponsibilities exactly is but you have an obligation of advice to your client. I think we all know what he is asking for is a distater-to-be if the scale of the application is big, prone to grow or if the project is ill-specified (i.e agile environment). Anyway, the client does not expect you to generate HTML straight out of the database, does he? That being said, I worked on a gigantic application that deferred a lot (too much I'd say) to the database (not PL/SQL but Oracle AND MSSQL -- which meant two sets of stored procedures -- and sometimes specific tables, views, triggers & constraints -- to maintain). What I'd say from a general point of view: Read, read, read Work you schema to the detail first (don't hesitate to break things into a lot of different tables and to use views to join them and get a simpler interface to your database), If PL/SQL custom types are good then hide your top-level tables/views behind custom types (always), Think modular and "service" to organize your procs, Don't try and be smart/fast right from the beginning. What I mean is a structure like this: BUSINESS: stored procedures & custom types APPLICATIVE: views, tables, internal procs, internal types STORAGE: base schema (base tables), triggers & constraints (manipulate with care) Oh yes and refactor early. The bigger the application, the harder it is to move things around especially into such an environment. Of course I don't need to tell you to test early ;)
