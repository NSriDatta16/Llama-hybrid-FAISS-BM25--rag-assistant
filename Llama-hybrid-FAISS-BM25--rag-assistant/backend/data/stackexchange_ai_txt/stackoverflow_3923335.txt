[site]: stackoverflow
[post_id]: 3923335
[parent_id]: 3922599
[tags]: 
I agree with others who recommend using break . The obvious consequential question is why would anyone recommend otherwise? Well... when you use break, you skip the rest of the code in the block, and the remaining iterations. Sometimes this causes bugs, for example: a resource acquired at the top of the block may be released at the bottom (this is true even for blocks inside for loops), but that release step may be accidentally skipped when a "premature" exit is caused by a break statement (in "modern" C++, "RAII" is used to handle this in a reliable and exception-safe way: basically, object destructors free resources reliably no matter how a scope is exited) someone may change the conditional test in the for statement without noticing that there are other delocalised exit conditions ndim's answer observes that some people may avoid break s to maintain a relatively consistent loop run-time, but you were comparing break against use of a boolean early-exit control variable where that doesn't hold Every now and then people observing such bugs realise they can be prevented/mitigated by this "no breaks" rule... indeed, there's a whole related strategy for "safer" programming called "structured programming", where each function is supposed to have a single entry and exit point too (i.e. no goto, no early return). It may eliminate some bugs, but it doubtless introduces others. Why do they do it? they have a development framework that encourages a particular style of programming / code, and they've statistical evidence that this produces a net benefit in that limited framework, or they've been influenced by programming guidelines or experience within such a framework, or they're just dictatorial idiots, or any of the above + historical inertia (relevant in that the justifications are more applicable to C than modern C++).
