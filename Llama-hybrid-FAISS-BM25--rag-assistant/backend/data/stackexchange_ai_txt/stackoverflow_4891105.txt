[site]: stackoverflow
[post_id]: 4891105
[parent_id]: 
[tags]: 
Best way to implement a complex preference screen?

For my app, I have a fairly complex set of configuration options that user can pick from. I'm currently using a PreferenceActivity as my user interface for these options and the options are stored using shared preferences. As an example of some of the settings I have to accommodate: Lists of pairs: to select a background pattern, the user can select to use from 1 to 5 different shapes (where each shape is a .png file) and assign each shape an int color. For example, the user could pick an orange square, a green triangle and a red rectangle. Hierarchical data: one part of my app can be configured to use one of five modes. Each mode has a few associated unique settings e.g. one mode requires two integers to be chosen the other mode might require one boolean to be chosen. However, my feeling is PreferenceActivity doesn't work well with settings like the above because: Shared preferences cannot store lists. Shared preferences cannot store hierarchical data. Boiling my preference interface down to e.g. individual preference buttons for configuring each color and using dependent preferences to disable preferences that aren't applicable with the current mode is going to make for a messy and hard to use interface. I could write my own Preference classes for configuring the lists, but I find these really laborious to implement compared to implementing a typical View and I've still got to deal with the storage issues. My plan was: Just implement a custom activity with a custom GUI. This gives me much more freedom for doing a nice interface for configuring the lists and I can do intelligent hiding of options that aren't applicable to the current mode. Store all my settings in either an XML file or by serialising a Java object. This means I can easily support hierarchical data and variable length lists, which allows room for further extensions. Does this plan seem reasonable? I'm concerned I'm not doing things the Android way, but it seems to me that shared preferences and PreferenceActivity aren't suited to my needs here.
