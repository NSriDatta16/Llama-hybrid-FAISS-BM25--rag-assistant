[site]: stackoverflow
[post_id]: 1783995
[parent_id]: 1783974
[tags]: 
any and all are part of standard Python from 2.5. There's no need to make your own versions of these. Also the official version of any and all short-circuit the evaluation if possible, giving a performance improvement. Your versions always iterate over the entire list. If you want a version that accepts a predicate, use something like this that leverages the existing any and all functions: def anyWithPredicate(predicate, l): return any(predicate(x) for x in l) def allWithPredicate(predicate, l): return all(predicate(x) for x in l) I don't particularly see the need for these functions though, as it doesn't really save much typing. Also, hiding existing standard Python functions with your own functions that have the same name but different behaviour is a bad practice.
