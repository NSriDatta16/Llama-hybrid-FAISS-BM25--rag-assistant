[site]: stackoverflow
[post_id]: 4299915
[parent_id]: 
[tags]: 
Win32 MessageBox doesn't appear

I'm stuck with a strange problem. I'm making a Win32 application in VC++ 2008, making a class to encapsulate most of the work for easy repetition when calling a MessageBox . The message box` is created (I think) but doesn't show up unless I press the Alt key! What happen exactly is : I run the program press Enter the main window lose focus give beep sound when i click on the main window as if a modal MessageBox is present either press Escape... focus is gained OR press Alt then the MessageBox appear with alt key pressed (i.e. menu will drop )!!!!!! P.S. It was working fine but suddenly this happened. I didn't find any difference - I even made a new project! This is supposed the Main program: int APIENTRY _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int nCmdShow) { MSG msg; CWnd cMainWindow(TEXT("DentoMan"), TEXT("Bejkoman")); // pass The class name and window name to the constructor cMainWindow.CreateDef(); //Create the Window while (GetMessage(&msg, NULL, 0, 0)) { TranslateMessage(&msg); DispatchMessage(&msg); } return (int)msg.wParam; } While This is the Class file CWnd::CWnd() { }; CWnd::CWnd(LPTSTR lpszClassName, LPTSTR lpszWindowName) { CWnd::lpszClassName = lpszClassName; CWnd::lpszWindowName = lpszWindowName; }; CWnd::~CWnd() { }; // Create the window with default parameters HWND CWnd::CreateDef(void) { WNDCLASSEX wcex; wcex.cbSize = sizeof(WNDCLASSEX); wcex.style = CS_HREDRAW | CS_VREDRAW; wcex.lpfnWndProc = StaticWndProc; wcex.cbClsExtra = 0; wcex.cbWndExtra = 0; wcex.hInstance = (HINSTANCE)GetModuleHandle(NULL); wcex.hIcon = 0; wcex.hCursor = LoadCursor(NULL, IDC_ARROW); wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 4); wcex.lpszMenuName = 0; wcex.lpszClassName = lpszClassName; wcex.hIconSm = 0; RegisterClassEx(&wcex); g_hWnd = CreateWindowEx(0,lpszClassName, lpszWindowName, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, wcex.hInstance, this); hInst = wcex.hInstance; //Store hInstance in the class hInst variable if (!g_hWnd) return false; ShowWindow(g_hWnd, SW_SHOW); UpdateWindow(g_hWnd); return g_hWnd; } LRESULT CALLBACK CWnd::StaticWndProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam) { /* The Only Message we take here so we store the 'this' pointer within the window to identify messages comming from it by the 'this' pointer*/ if ( Message == WM_CREATE ) { SetWindowLong( hWnd, GWL_USERDATA, (LONG)((CREATESTRUCT FAR *)lParam)->lpCreateParams); } /* Store the window pointer in the class pointer we just created in order to run the right public WndPRoc */ CWnd *Destination = (CWnd*)GetWindowLong( hWnd, GWL_USERDATA ); // If the hWnd has a related class, pass it through if (Destination) { return Destination->WndProc( hWnd, Message, wParam, lParam ); } // No destination found, defer to system... return DefWindowProc( hWnd, Message, wParam, lParam ); }; LRESULT CWnd::WndProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam) { // Determine message type switch (Message) { case WM_LBUTTONDOWN: { /* this is a common trick for easy dragging of the window.this message fools windows telling that the user is actually dragging the application caption bar.*/ SendMessage(hWnd, WM_NCLBUTTONDOWN, HTCAPTION,NULL); break; } /*case WM_CREATE: break; */ case WM_CLOSE: PostQuitMessage(0); break; case WM_DESTROY: UnregisterClass(lpszClassName, hInst); PostQuitMessage(0); break; case WM_KEYDOWN: //KeyBoard keys // Which key was pressed? switch (wParam) { case VK_ESCAPE: //close through escape key PostQuitMessage(0); return 0; case VK_RETURN: MessageBox(hWnd, TEXT("DFGDGD"), TEXT("DFGDFG"), NULL); return 0; } // End Switch break; case WM_COMMAND: /*switch(LOWORD(wParam)) { }*/ break; case WM_PAINT: break; default: return DefWindowProc(hWnd, Message, wParam, lParam); } // End Message Switch return 0; }; The Class Header: class CWnd { public: CWnd(); CWnd(LPTSTR lpszClassName, LPTSTR lpszWindowName); virtual ~CWnd(); virtual HWND CreateDef(void); // Create the window with default parameters virtual LRESULT WndProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam ); private: static LRESULT CALLBACK StaticWndProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam); HWND g_hWnd; //Global window handle for this window HINSTANCE hInst; //Global instance for this window LPTSTR lpszClassName; LPTSTR lpszWindowName; }; P.S. I included all needed header files, everything goes fine except MessageBox This is also a link to the code on here
