[site]: stackoverflow
[post_id]: 286293
[parent_id]: 286117
[tags]: 
Coding standards are definitely something we have. The coding formatting I am talking about is imposed by a grizzled architect that is, lets say, set in his ways and extremely particular. Lets just pretend that we can not address the human factor. I was looking for a way to circumvent the whole human processes. The visual studio defaults sadly do not address line breaks very well. I am just making this line chopping style up but.... ServiceLocator.Logger.WriteDefault(string.format("{0}{1}" ,foo ,bar) ,Logging.SuperDuper); another example of formatting visual studio is not too hot at.... if( foo && ( bar || baz || apples || oranges) && IsFoo() && IsBar() ){ } Visual studio does not play well at all will stuff like this. We are currently using ReSharper to allow for more granularity with formating but it sadly falls sort in many areas. Don't get me wrong though coding standards are great. The goal of the pretty printer as part of the build process is to get 'perfect' looking code no matter how well people are paying attention or counting their spaces. The edge cases around code formatting are very solvable since it is a well defined grammar. As far as the VS defaults go I can only say: BSD style or die! So all that brings me full circle back to: Is there a configurable pretty printer for C#? As much as lexical analysis and parsing fascinate I have about had my fill making a YAML C# tool chain.
