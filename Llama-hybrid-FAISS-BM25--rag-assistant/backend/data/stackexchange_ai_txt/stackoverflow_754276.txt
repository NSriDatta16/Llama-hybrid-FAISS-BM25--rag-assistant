[site]: stackoverflow
[post_id]: 754276
[parent_id]: 748503
[tags]: 
As George said Working Effectively with Legacy Code is the bible for this kind of thing. However the only way others in your team will buy in is if they see the benefit to them personally of keeping the tests working. To achieve this you require a test framework with which is as easy as possible to use. Plan for other developers you take your tests as examples to write their own. If they do not have unit testing experience, don't expect them to spend time learning a framework, they will probably see writing unit testings as slowing their development so not knowing the framework is an excuse to skip the tests. Spend some time on continuous integration using cruise control, luntbuild, cdash etc. If your code is automatically compiled every night and tests run then developers will start to see the benefits if unit tests catch bugs before qa. One thing to encourage is shared code ownership. If a developer changes their code and breaks someone else's test they should not expect that person to fix their test, they should investigate why the test is not working and fix it themselves. In my experience this is one of the hardest things to achieve. Most developers write some form of unit test, some times a small piece of throw-away code they don't check in or integrate the build. Make integrating these into the build easy and developers will start to buy in. My approach is to add tests for new and as code is modified, sometimes you cannot add as many or as detailed tests as you would like without decoupling too much existing code, err on the side of the practical. The only place i insist on unit tests is on platform specific code. Where #ifdefs are replaces with platform specific higher level functions/classes, these must be tested on all platforms with the same tests. This saves loads of time adding new platforms. We use boost::test to structure our test, the simple self registering functions make writing tests easy. These are wrapped in CTest (part of CMake) this runs a group of unit tests executables at once and generates a simple report. Our nightly build is automated with ant and luntbuild (ant glues c++, .net and java builds) Soon I hope to add automated deployment and functional tests to the build.
