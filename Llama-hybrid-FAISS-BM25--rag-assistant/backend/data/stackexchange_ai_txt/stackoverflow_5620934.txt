[site]: stackoverflow
[post_id]: 5620934
[parent_id]: 83073
[tags]: 
I was surprised to see some issues were not already covered, so here are my 2 cents, in addition to all the very valid points made earlier: .1. CSS & SEO: a) CSS used to have a very significant impact on SEO by allowing to position the content in the page wherever you want. A few years ago, Search Engines were giving a significant emphasis to "on-page" factors. Something at the top of the page was deemed more relevant to the page than something located at the bottom. "Top of the page" for a spider meant "at the beginning of the code". Using CSS, you could organize your keyword-rich content at the beginning of the code, and still position it wherever you liked in the page. This is still somewhat relevant, but on page factors are less and less important for page ranking. b) When the layout is moved over to CSS, the HTML page is lighter and therefore loads faster for a search engine spider. (spiders don't bother downloading external css files). Fast loading pages is an important ranking consideration for several search engines, including Google c) SEO work often requires testing and changing things, which is much more convenient with a CSS based layout .2. Generated content: A table is considerably easier to generate programmically than the equivalent CSS layout. foreach ($comment as $key=>$value) { echo " $key $value "; } Generating a table is simple and safe. It is self-contained and integrates well within any template. To do the same with CSS is considerably harder and may be of no benefit at all: hard to edit the CSS stylesheet on the flight, and adding the style inline is no different from using a table (content is not separated from layout). Further, when a table is generated, the content (in variables) is already separated from the layout (in code), making it as easy to modify. This is one reason why some very well designed websites (SO for instance) still use table layouts. Of course, if the results need to be acted upon through JavaScript, divs are worth the trouble. .3. Quick conversion testing When figuring out what works for a specific audience, it is useful to be able to change the layout in various ways to figure out what gets the best results. A CSS based layout makes things considerably easier .4. Different solutions for different problems Layout tables are usually dissed because "everybody knows divs & CSS" are the way to go. However the fact remains that tables are faster to create, easier to understand and are more robust than most CSS layouts. (Yes, CSS can be as robust, but a quick look through the net on different browsers and screen resolutions shows it's not often the case) There are a lot of downsides to tables, including maintenance, lack of flexibility... but let's not throw the baby with the bath water. There are plenty of professional uses for a solution which is both quick and reliable. Some time ago, I had to rewrite a clean and simple CSS layout using tables because a significant portion of the users would be using an older version of IE with really bad support for CSS I, for one, am sick and tired of the knee-jerk reaction "Oh noes! Tables for layout!" As for the "it wasn't intended for that purpose and therefore you shouldn't use it this way" crowd, isn't that hypocrisy? What do you think of all the CSS tricks you have to use to get the darn thing working in most browsers? Were they meant for that purpose?
