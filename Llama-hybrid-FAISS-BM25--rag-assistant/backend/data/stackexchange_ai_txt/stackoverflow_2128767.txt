[site]: stackoverflow
[post_id]: 2128767
[parent_id]: 2128588
[tags]: 
I think you need to invert your thinking. In Model View Controller , the View has only one responsibility: to display data. How that data gets there is the Controller's responsibility, and how the data is represented in memory is determined by the Model. Although there are no specific MVC frameworks for Windows Forms, it's possible to make crude ones manually, or you could go have a look at the (now retired) Composite Application Block to get an idea about how this can be done (although the CAB is perhaps too complicated for most people's tastes). There are more elegant options available today, but they involve WPF. In any case, instead of injecting your dependencies into your Views, inject them into Controllers, and have the Controllers instantiate and correctly populate the Views (your Controls). In this way, you can keep your Controls free of DI concerns, as they should be.
