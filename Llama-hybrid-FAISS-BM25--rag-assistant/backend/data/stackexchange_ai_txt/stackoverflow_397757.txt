[site]: stackoverflow
[post_id]: 397757
[parent_id]: 397744
[tags]: 
I have seen this before with both timer, and looped services. Usually the case is that an exception is caught that stops the timer or looping thread, but does not restart it as part of the exception recovery. To your other points... I dont think that there is anything "elegant" about the timer. For me its more straight forward to see a looping operation in code than timer methods. But Elegance is subjective. Memory issue? Not if you write it properly. Maybe a processor burden if your Thread.Sleep() isn't set right.
