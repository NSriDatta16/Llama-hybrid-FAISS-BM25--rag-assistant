[site]: stackoverflow
[post_id]: 3097633
[parent_id]: 3088701
[tags]: 
Nearly all of the reading I have been doing about ORM is focused on starting with a class structure, and creating the mapped database structure as a secondary process. Is going the other way around (starting with an existing database and mapping classes to it) a very odd thing to do? Not really. There are several approaches when dealing with the persistence layer of an application: Top-down : You start with the object model and the mappings and you derive the database schema from that data. Bottom-up : You start with your data model i.e. the database schema and you derive the object model and the mappings from the tables. Middle-out : You start with the mapping and you generate the object model and the tables. Meet-in-the-middle : You start with an existing database schema and an existing object model, you develop a mapping to map between the two (you can even introduce an additional object layer and brige the existing one). The top-down approach is the most object-oriented but the meet-in-the-middle approach is probably the most common. Assuming question #1 == true, how flexible are existing ORM frameworks such as JPA2, ActiveRecord, DataMapper etc. to "imperfect" table design? I am sure we will have to do some refactoring of existing table design, but would like to know if I am undertaking a Herculean task before I waste too much time on the effort. I would say that JPA is not the most flexible, it will not deal very well with exotic or heavily denormalized schemas (the result might be ugly from an OO point of view). Accesses that don't go through JPA might also be a problem. A data mapper tool like iBatis (now mybatis ) will give you more flexibility. If anyone has a better idea for language+ORM, I would love to hear it. It must be SQL-ready using JDBC or ODBC to fit into our incremental migration plan. I know that RoR can deal with existing databases, I'm just not sure what the result will look like. But I don't really have enough experience with RoR so I'll let experts elaborate on this. If anyone has any experience on a similar effort and could point out any helpful resources (especially books), I would be very grateful! I suggest to browse Scott Ambler website and his book(s): The Process of Database Refactoring: Strategies for Improving Database Quality More food for thought: Working Effectively with Legacy Code by Michael Feathers Clean Code by Robert Martin
