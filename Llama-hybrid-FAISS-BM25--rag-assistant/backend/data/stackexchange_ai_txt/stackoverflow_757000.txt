[site]: stackoverflow
[post_id]: 757000
[parent_id]: 755811
[tags]: 
From the MSDN article Handling Shell Data Transfer Scenarios Existing files should be offered with the CF_HDROP format. Offer file-like data with CFSTR_FILECONTENTS/CFSTR_FILEDESCRIPTOR formats. This approach allows the target to create a file from a data object without needing to know anything about the underlying data storage. You should normally present the data as an IStream interface. This data transfer mechanism is more flexible than a global memory object and uses much less memory. Two other good articles to read from MSDN are: Shell Data Object Shell Clipboard Formats When I first started working on using the clipboard to transfer files I printed off all three articles and read them several times. Dealing with the interfaces can be quite involved. I have found two good libraries out there to help with this. The The Drag and Drop Component Suite for Delphi . If you scroll down on the home page you will see some FAQs are good reading. There are also a lot of sample applications with the download. I think the AsyncSource demos should be helpful for what you are looking for. The suite is freeware with source. The code seems to be well commented. I am currently using the Transfer@Once component from Quasidata. It is not free but is very inexpensive. I initially used Transfer@Once because at the time it was better supported than the Drag and Drop component suite. However, that situation has reversed itself. Transfer@Once does not yet support Delphi 2009. When I get around to moving my application I will probably switch components. The Transfer@Once code is included with purchase. Personally I found the Drag and Drop code to be much easier to read and follow.
