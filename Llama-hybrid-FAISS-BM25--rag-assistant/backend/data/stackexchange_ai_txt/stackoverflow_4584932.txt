[site]: stackoverflow
[post_id]: 4584932
[parent_id]: 4566516
[tags]: 
The validation abstraction is aimed to plug a validation infrastructure in ViewModels. Caliburn's DefaultValidator uses System.ComponentModel.DataAnnotations, but an adapter for Fluent Validation is also available. While the validation could be used directly from application code, it is used by the framework mainly in the AOP validation behavior, which provides an automatic IDataErrorInfo implementation for models. If your models already implement IDataErrorInfo , Caliburn is able to hook the validation (as a part of conventional binding process) leveraging plain WPF binding. Yet, implementing IDataErrorInfo manually is boring and likely to lead to hardly mantainable code, so the AOP [ValidateAttribute] was introduced. To enable it, you have to configure your container to use the available proxy factory (which is based upon Castle.DynamicProxy): myContainerAdapter .WithProxyFactory () This instructs the container adapter to inspect behaviors attribute applied on the ViewModels (and other components) pulled from the container, and to create a subclass of them implementing the specified behavior. The [Validate] behavior implementation just delegates 'IDataErrorInfo' calls to the actual IValidator service. Module framework is used by Caliburn itself to manage configuration and initialization of its own modules. It could also be used to create independent application modules: Caliburn will take care of discovering them (if their assemblies are registered in IAssemblySource) an drive their initialization; Caliburn doesn't use reflection to invoke action, but builds delegates on the fly leveraging Expression Trees to create a compiled lambda; The ViewModelFactory service is used by Caliburn to abstract the creation of VM, either by type or by Subject handled; ShellFramework contains a set of facility useful to build most applications; it includes some custom IResult (along with fluent-style static methods to create them) and some pre-built ViewModels (Menus and Question/Message dialog) to accomplish common application tasks.
