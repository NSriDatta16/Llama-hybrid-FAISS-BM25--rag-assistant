[site]: stackoverflow
[post_id]: 1846301
[parent_id]: 1673975
[tags]: 
Well, this is what i got so far, TY Jeff for pointing me in the right direction: TestPage: public partial class Pages_Test : BasePage { [ViewState] public String Name { get; set; } BasePage: #region Support ViewState Attribute BindingFlags _flags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance; protected override Object SaveViewState() { object _baseState = base.SaveViewState(); IDictionary _pageState = new Dictionary { { "base", _baseState } }; //Use reflection to get properties marked for viewstate foreach (PropertyInfo _property in GetType().GetProperties(_flags)) { if (_property.HasAttribute ()) { object _value = _property.GetValue(this, _flags , null, null, null); _pageState.Add(new KeyValuePair (_property.Name, _value)); } } return _pageState; } protected override void LoadViewState(Object savedState) { if (savedState != null) { var _pageState = (IDictionary )savedState; if (_pageState.ContainsKey("base")) { base.LoadViewState(_pageState["base"]); } //use reflection to set properties foreach (PropertyInfo _property in GetType().GetProperties(_flags )) { if (_property.HasAttribute () && _pageState.ContainsKey(_property.Name)) { object _value = _pageState[_property.Name]; _property.SetValue(this, _value, _flags , null, null, null); } } } } #endregion Attribute: /// /// This attribute is used by the BasePage to identify properties that should be persisted to ViewState /// Note: Private properties are not supported /// [AttributeUsage(AttributeTargets.Property)] public class ViewState : Attribute { //Marker } Helpers: public static class PropertyExtension { public static Boolean HasAttribute (this PropertyInfo property) { object[] attrs = property.GetCustomAttributes(typeof(T), false); return attrs != null && attrs.Length == 1; } } EDIT Jan has a valid point about performance, I did some profiling with the following results: Without Attribute With Attribute Increase Slower % One Property First Load 0,004897899 0,010734255 0,005836356 219 Save, postback 0,002353861 0,010478008 0,008124147 445 Load, Postback 0,001488807 0,00627482 0,004786013 421 10 properties First Load 0,006184096 0,015288675 0,009104579 247 Save, postback 0,004061759 0,015052262 0,010990503 371 Load, Postback 0,0015708 0,005833074 0,004262274 371 % increase Avg Page. 0,902215714567075 0,00648 On a Empty page the increase is considerable, but on an average page with a load of 1s this increase amounts to 0,01%. Update : Using PostSharp, PostSharp4ViewState Step 1 : Make sure your website is precompiled Step 2 : Install PostSharp and PostSharp4ViewState Step 3 : Reference PostSharp.Public And PostSharp4ViewState Step 4 : Following is Code is now valid. [Persist(Mode=PersistMode.ViewState)] private string _name; public String Name { get { return _name; } set { _name = value; } }
