[site]: stackoverflow
[post_id]: 3269057
[parent_id]: 
[tags]: 
Need for Hibernate in the legacy world

I have a several questions about hibernate. In many questions here in stackoverflow, several people are saying that hibernate is not a good choise for very complex databases. If we have very complex database, hibernate is not the right choice. It better suits for green field projects, but it is not so good for complex legacy database. Is this true? Also hibernate generates queries. Every project manager will like to have optimized queries (hibernate cannot generate more optimized queries than sql specialist!). So for big project it is not a problem to hire sql specialist. The sql specialist will optimize the queries (use explain sql, use joins ...) My question is how come a huge and expensive project does not care about sql optimization? (you will say that you can write HQL but as I have seen in a lot of posts that explains that HQL is not so powerful than sql and a lot of programmers get headache and several hours of tuning) (you like all your organs in your body to work ideally don't you?) Also the second level cache helps hibernate a lot because hibernate knows to generate a lot of queries instead of complex join. My question is: Is really a complex db only modified by one system (example the web site)? If we are talking about the enterprise system the db can be accessed via several processes, sharing different programming languages and platforms. So in this case the second level cache does not help very much. For what kind of projects hibernate is suitable for? Is it for back office projects where nobody cares about the sql ? What happens when your administrator says: please use memcached for caching and please use this optimized queries instead of yours? If you are using oracle database, orache has the most advanced sql syntax. They have spend a lot of time and money on the syntax that is very powerful. What for is this syntax if it is not used. The software is written only once (and then maintained) and used for a long time. If I am a company that orders software I will say: I will use the software for a couple of years and I like to be fast, and if you spend 1 month for writing software with hibernate I will pay one more month for software that uses example IBATIS knowing that it will work better for years (when you are buying a car you are interested in the car economy 1kg-oil/km, not how short and easy the manufacturer produced the car!). So as a software consumer I do not interested in your productivity, just how fast the software is. Of course also the price is relevant but if we are speaking about the price there are more complex mathematics. Can we call something engineering when we really cannot predict some part of the system? (can electrical engineer be really a engineer if he cannot predict the current) Please share your opinion. Regards
