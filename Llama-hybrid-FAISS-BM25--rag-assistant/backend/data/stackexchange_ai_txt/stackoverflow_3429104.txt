[site]: stackoverflow
[post_id]: 3429104
[parent_id]: 3429071
[tags]: 
char a[] = "aesdf"; char a[] = {'a','e','s','d','f','\0'}; These two lines of code have the same effect. A compiler may choose to implement them the same way, or it may choose to implement them differently. From the standpoint of a programmer writing code in C, it shouldn't really matter. You can use either and be sure that you will end up with a six element array of char initialized to the specified contents. Will "aesdf" exist for the entire life of the executable? Semantically, yes. String literals are char arrays that have static storage duration . An object that has static storage duration has a lifetime of the execution of the program: it is initialized before the program starts, and exists until the program terminates. However, this doesn't matter at all in your program. That string literal is used to initialize array a . Since you do not obtain a pointer to the string literal itself, it doesn't matter what its actual lifetime of that string literal is or how it is actually stored. The compiler may do whatever it sees fit to do, so long as the array a is correctly initialized.
