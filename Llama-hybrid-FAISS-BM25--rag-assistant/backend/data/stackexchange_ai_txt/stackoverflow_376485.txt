[site]: stackoverflow
[post_id]: 376485
[parent_id]: 375178
[tags]: 
If you're using forms authentication, make sure the forms authentication cookie is deleted when the user logs out. As soon as the user goes to do anything on the cached page (the page they pressed the back button to get to), the site will ask the user to re-login, and then redirect them back to the original page, with fresh data. Viola! Additionally, regarding caching of pages, you need to set a pretty good number of headers to turn the caching mechanism in the browser and proxy servers off: "Expires" - set to some date in the past "Last-Modified" - set to the current date/time "Cache-Control" - set to "no-cache, must-revalidate" "Pragma" - set to "no-cache" That should just about make the page uncacheable. The date/times need to be in RFC1123 format (format specifier "R" in .net e.g. "Mon, 17 Apr 2006 21:22:48 GMT"). You would implement this as: Response.AddHeader("Expires", new DateTime(1940, 1, 1).ToString("R")); Response.AddHeader("Last-Modified", DateTime.Now.ToString("R")); Response.AddHeader("Cache-Control", "no-cache, must-revalidate"); Response.AddHeader("Pragma", "no-cache"); Or something similar, depending on where you want to add all of the headers. I have had good success with this across many browsers and proxy servers, but nothing is fool-proof where page caching is concerned.
