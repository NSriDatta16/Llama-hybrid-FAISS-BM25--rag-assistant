[site]: stackoverflow
[post_id]: 3305527
[parent_id]: 3305478
[tags]: 
Yes The POSIX standard says: ยง3.297 Process Termination There are two kinds of process termination: Normal termination occurs by a return from main(), when requested with the exit(), _exit(), or _Exit() functions; or when the last thread in the process terminates by returning from its start function, by calling the pthread_exit() function, or through cancellation. Abnormal termination occurs when requested by the abort() function or when some signals are received. The first normal termination condition applies. (Note that the C++ (1998, 2003) standard says nothing about threads.) Regarding pthread_detach() The POSIX standard (again) says: The pthread_detach() function shall indicate to the implementation that storage for the thread thread can be reclaimed when that thread terminates. If thread has not terminated, pthread_detach() shall not cause it to terminate. And the rationale says: The pthread_join() or pthread_detach() functions should eventually be called for every thread that is created so that storage associated with the thread may be reclaimed. It has been suggested that a "detach" function is not necessary; the detachstate thread creation attribute is sufficient, since a thread need never be dynamically detached. However, need arises in at least two cases: In a cancellation handler for a pthread_join() it is nearly essential to have a pthread_detach() function in order to detach the thread on which pthread_join() was waiting. Without it, it would be necessary to have the handler do another pthread_join() to attempt to detach the thread, which would both delay the cancellation processing for an unbounded period and introduce a new call to pthread_join(), which might itself need a cancellation handler. A dynamic detach is nearly essential in this case. In order to detach the "initial thread" (as may be desirable in processes that set up server threads).
