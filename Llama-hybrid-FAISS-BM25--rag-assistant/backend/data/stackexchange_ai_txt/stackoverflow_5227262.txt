[site]: stackoverflow
[post_id]: 5227262
[parent_id]: 5175207
[tags]: 
I probably wouldn't try clicking on the autocomplete list item using the page.execute_script method. Ideally the When steps of cucumber should always 100% mimick what a user is capable of doing. And I would not expect them to open up a javascript console and start typing scripts to execute to select list items ;) Obviously I know that isn't what you are going for, but that is what you are testing with your method. A better method would be something like the following in one of your cucumber step definitions.: When /^I follow the autocomplete link containing "([^"]*)"$/ do |link_text| page.find(:css, ".results ul li", :text => link_text).click end I believe that that should work, and it's better than trying to hack in JS code in your cucumber step. Note that the page.find method returns a Capybara::Node::Element (I believe). The :text hash option tells capybara to only find the element that contains the specified text. If the element is not found, capybara will raise an exception. If for whatever reason your li doesn't actually have clickable text in it, you could change the selector to ".results ul li:first" , but ideally you can use the definition for more than just selecting the first item. There is a bug that you may encounter (something about 'node' method not found or some shinanigans). If you get a strange error that you can't explain when doing this, and it's not immediately obvious what it is, then you may need to comment out the following line in env.rb of your cucumber's support directory: require 'cucumber/rails/capybara_javascript_emulation' The monkeypatch cucumber put in there broke when capybara got upgraded and last I checked hasn't been deployed as a stable release yet. Hopefully this resolves your issue :) EDIT TO ADD: I just looked at your question again and felt like I might want to let you know why $("li") would be returning null. When you added the "And I should see..." step before this script execution, capybara has built-in wait-for-element-to-appear default timeouts that it uses when you look for an element on the page that isn't there yet. If it doesn't appear in the specified time (I think 5 seconds by default?) then capybara will give you a failed test. However, when you run the execute_script call you are bypassing all of Capybara's awesome framework and attempting to interact with the DOM directly using jquery - except that Capybara hasn't 'waited' for the object to appear yet, so your javascript probably isn't going to find it. I believe that the solution I have posted using page.find will work for you, because that method does wait for the element to appear on the page before raising an error. Finders are explained in more detail here: https://github.com/jnicklas/capybara under the "Finding" subheading down where the readme is displayed.
