[site]: stackoverflow
[post_id]: 3506879
[parent_id]: 3501700
[tags]: 
Some things to consider: Is this a high bandwidth device like a camera or data recorder, or a low bandwidth device? For low bandwidth, I would strongly consider making your device act as a USB HID class . This is the device class that supports keyboards, mice, joysticks, gamepads, and the like. It is relatively easy to send data to nearly any application, and it generally doesn't require that you write a custom device driver on the host side. That latter feature alone is often worth the cost of lightly contorting your data into the shape assumed by the HID class. All the desktop operating systems that do USB can use HID devices, so you get broad compatibility fairly easily. For high bandwidth, you would still be better served if your device fits one of the well established device classes, where a stock device driver on the host end of the wire can be used. One approach that often works is to use the Mass Storage class , and emulate a disk drive containing one file. Then, your device simply mounts on the host as if it were a disk, and you communicate by reading and writing to one (or a few) file. I would expect there to be a fair amount of sample code out there for any serious USB device chipset that implements either or both of HID and Mass Storage. If you really must wander into fully custom device territory, then you will need to be building device drivers for each host platform. The open source libusb library can be of some help, if its license is compatible with your project. There are also ways in newer versions of Windows to develop USB drivers that run in user mode using the User Mode Driver Framework that have many of the same advantages of libusb, but are not portable off the Windows platform. The last custom device I worked on was based on a Cypress device, and we were able to ship their driver and an associated DLL to make our application code easier to build. I don't know off the cuff if there is any equivalent available for your device. For a really good overview, I recommend the USB FAQ , and the latest edition of Jan's book, USB Complete .
