[site]: stackoverflow
[post_id]: 2536481
[parent_id]: 2536318
[tags]: 
This is not a line-for-line translation, but something in the ballpark: class Animal(object): animal_breeds = "Dog Cat Cow Chicken Elephant".split() animals = {} def __init__(self, breed, name): self._breed = breed self.name = name Animal.animals[name] = self @property def breed(self): return Animal.animal_breeds[self._breed] @staticmethod def myDog(name): return Animal(Animal.AnimalBreed.Dog, name) # add enumeration of Animal breeds to Animal class class Constants(object): pass Animal.AnimalBreed = Constants() for i,b in enumerate(Animal.animal_breeds): setattr(Animal.AnimalBreed, b, i) # define some class-level constant animals # (although "woff" and "meow" are not what I would expect # for names of animals) Animal.DogAnimal = Animal(Animal.AnimalBreed.Dog, "woff") Animal.CatAnimal = Animal(Animal.AnimalBreed.Cat, "meow") # this code would be in a separate module that would import this # code using # from animal import Animal # print Animal.myDog("Rex").breed print Animal.animals.keys()
