[site]: stackoverflow
[post_id]: 2075008
[parent_id]: 
[tags]: 
C++ problem in calling a function in main that prints the map

I am trying to print the contents of the map and this is where my code fails. I have tested all my methods and I have no problem to read from file, filer the word, put it into map, and even the print function is working. However, when I am calling the printer function from main it does not print the map. I am new to polymorphism and I think that my error is in how I am passing the map to the function in main. Here is my main class: using namespace std; #include #include "ReadWords.h" #include "ReadPunctWords.h" #include "ReadNumWords.h" #include "ReadCapWords.h" #include "MapWorks.h" #include #include #include #include /** * This main function uses all other classes. */ int main() { char* name = "RomeoJuliet.txt"; //ReadPunctWords &obj = *new ReadPunctWords(name); ReadPunctWords obj(name); string startSearch="BEGIN"; string endSearch="FINIS"; ReadPunctWords rpw; ReadCapWords rcw; ReadNumWords rnw; MapWorks mw; while(rpw.isNextWord()){ string tempword = obj.getNextWord(); if(tempword == startSearch){ break; } } while(rpw.isNextWord()){ string tempword = obj.getNextWord(); if(tempword == endSearch){ break; } else{ if(rpw.filter(tempword)){ mw.addToMap(tempword, mw.mapPunct); } if(rcw.filter(tempword)){ mw.addToMap(tempword, mw.mapCap); } if(rnw.filter(tempword)){ mw.addToMap(tempword, mw.mapNum); } } } mw.printMap(mw.mapPunct); mw.printMap(mw.mapCap); mw.printMap(mw.mapNum); //clear map mw.clearMap(mw.mapPunct); mw.clearMap(mw.mapCap); mw.clearMap(mw.mapNum); //close the file //obj.close(); //delete &obj; //exit(0); // normal exit return 0; } And my MapWorks.cpp which contains the maps and the functions related to maps: using namespace std; #include #include #include #include #include "MapWorks.h" /** * MapWorks class builds the maps and does the map processing and printing */ MapWorks::MapWorks() {} void MapWorks::addToMap(string myword, map & myMap){ int n = myMap[myword]; myMap[myword]= n+1; } void MapWorks::printMap (map &myMap){ for (map ::iterator it = myMap.begin(); it != myMap.end(); ++it) { cout first " second myMap) { myMap.clear(); } MapWorks.h : #ifndef MAPWORKS_H #define MAPWORKS_H #include #include using namespace std; /** * MapWorks class builds the maps and does the map processing and printing */ class MapWorks { public: map mapPunct; //(word, number of occurences) map mapNum; //(word, number of occurences) map mapCap; //(word, number of occurences) MapWorks(); void addToMap(string myword, map & myMap); //adds words to a map void printMap (map &myMap); //prints the map void clearMap(map ); //clear map }; #endif My ReadWords.h : /** * ReadWords class, the base class for ReadNumWords, ReadPunctWords, ReadCapWords */ #ifndef READWORDS_H #define READWORDS_H using namespace std; #include #include #include class ReadWords { private: string nextword; ifstream wordfile; bool eoffound; public: /** * Constructor. Opens the file with the default name "text.txt". * Program exits with an error message if the file does not exist. */ ReadWords(); /** * Constructor. Opens the file with the given filename. * Program exits with an error message if the file does not exist. * @param filename - a C string naming the file to read. */ ReadWords(char *filename); /** * Closes the file. */ void close(); /** * Returns a string, being the next word in the file. * @return - string - next word. */ string getNextWord(); /** * Returns true if there is a further word in the file, false if we have reached the * end of file. * @return - bool - !eof */ bool isNextWord(); //pure virtual function for filter virtual bool filter(string word)=0; /** * Fix the word by the definition of "word" * end of file. * @return - string */ string fix(string word); }; #endif And my ReadPunctWords (ReadNumWords and ReadCapWords are quite the same, just checking if the word has digits or capital letters instead of punctuations like in here): #ifndef READPUNCTWORDS_H #define READPUNCTWORDS_H using namespace std; #include #include "ReadWords.h" /** * ReadPunctWords inherits ReadWords, so MUST define the function filter. * It chooses to override the default constructor. */ class ReadPunctWords: public ReadWords { public: ReadPunctWords(); ReadPunctWords(char *filename): ReadWords(filename){}; virtual bool filter(string word); }; #endif I would appreciate any help from you. Thanks, Adriana
