[site]: datascience
[post_id]: 108031
[parent_id]: 
[tags]: 
Help Creating a XOR Neural Network in Java?

I have been trying to create a neural network in Java, but it doesn't quite work as intended. I am using a XOR test before I move on to more advanced problems, and it doesn't seem to be learning much. I may have the algorithms wrong, but as far as I can tell, they all seem fine (I am using a tutorial on Brilliant.org - https://brilliant.org/wiki/backpropagation/ ). I've provided my Network and Main class below. Thank you for any help! import java.util.*; ////Neural network creator public class Network { //Constant values for activation functions public static final int identity = 0; public static final int sigmoid = 1; public static final int tanh = 2; ////Arraylists for each layers' nodes, weights, and biases //List to hold all neural network node values (output) private ArrayList > nodes = new ArrayList >(); //List for all error (delta) of nodes private ArrayList > error = new ArrayList >(); //List for all biases from layer to layer (index 0 affects 0, index 1 affects 1... index n affects n to n) private ArrayList > biases = new ArrayList >(); //List for changes to biases private ArrayList > biasChanges = new ArrayList >(); //List for all weights (index n,k in layer l affects node n in layer l to node k in layer l+1) private ArrayList >> weights = new ArrayList >>(); //List for changes to each weight private ArrayList >> weightChanges = new ArrayList >>(); //List for activations of nodes for backpropagation algorithm private ArrayList > nodeActivations = new ArrayList >(); //List for activation functions (first layer is always identity) private ArrayList activations = new ArrayList (); //Learning rate private double LEARNING_RATE; ////Constructor /* * firstLayerLength: number of nodes in first layer * learningRate: rate at which network changes its values to fit examples */ public Network(int firstLayerLength, double learningRate) { //Set learning rate LEARNING_RATE = learningRate; //Add only node layer and activation (identity) addNodeLayer(firstLayerLength); addActivation(identity); //Add empty bias layer (to make calculations easier) addBiasLayer(0); } ////Modifiers ////Add a layer of nodes to the network //For activation use Network.identity or Network.sigmoid... for exact index of function public void addLayer(int length, int activation) { //Add each layer addNodeLayer(length); addBiasLayer(length); addWeightLayer(length); addActivation(activation); } //Hidden functions to add each individual layer private void addNodeLayer(int length) { //Add ArrayList of size length to nodes ArrayList and nodeActivations ArrayList nodes.add(new ArrayList ()); for (int i = 0; i ()); for (int i = 0; i ()); for (int i = 0; i ()); for (int i = 0; i newList = new ArrayList (); //Randomly instantiate each value between -1 and 1 for (int i = 0; i > newList = new ArrayList >(); //Randomly instantiate each index for (int i = 0; i newList2 = new ArrayList (); for (int n = 0; n >(); //Instantiate to 0 for (int i = 0; i newList2 = new ArrayList (); for (int n = 0; n 0; layer--) { //Go through each value in layer for (int i = 0; i values[answer]) answer = i; if (nodes.get(nodes.size()-1).get(i) > nodes.get(nodes.size()-1).get(highest)) highest = i; } if (answer == highest) return true; return false; } //Returns error array between values public double[] errorArray(double[] values) { double[] errors = new double[values.length]; for (int i = 0; i import java.util.Scanner; class Main { public static void main(String[] args) { int batchSize = 100; int trainExamples = 100000; int testExamples = 1000; double accuracyBenchmark = 0.1; Network bobby = new Network(2, 0.01); bobby.addLayer(2, Network.sigmoid); bobby.addLayer(1, Network.identity); //Loop through all examples for (int i = 0; i 0.5) firstValue++; int secondValue = 0; if (Math.random() > 0.5) secondValue++; double[] output = {0}; if (firstValue == 1 ^ secondValue == 1) output[0] = 1; double[] input = {firstValue, secondValue}; bobby.feedForward(input, output); double[] array = bobby.errorArray(output); if (Math.abs(array[0]) ```
