[site]: stackoverflow
[post_id]: 1480754
[parent_id]: 1480723
[tags]: 
It depends on the nature of the branch ("line of development") you are working on. The main advantage with those DVCS (git or mercurial) is the ease you can: branch merge So: 1/ How often and when do you commit? 2/ Do you only commit changes when they build correctly? As many time as necessary on a private branch (for instance, if it compiles). The practice to only commit if unit tests pass is a good one, but should only apply to an "official" (as in "could be published or 'pushed'") branch: in your private branch, you merge a gazillon times if you need to. The only thing is: do some merge --interactive to reorganize your many commits on your private branch, before replaying them on your main development branch, where you can pass some tests. 3/ How often and when do you push your changes (or file a pull request or similar)? Publication is another matter and should be done with a "clear" history (coherent merges, representing a content which compile and pass some tests). The branch you publish should be one where the history is never rewritten, always updated. The pace of the publications depends on the nature of the remote branch and of the population pulling that branch. For instance, if it is for another team, you could push quite often. If it is for a system-wide integration testing team, you will push a lot less often. 4/ How do you approach developing a complex feature / doing a complex refactoring requiring many places to be touched? Are "private commits" that won't build ok? When finished, do you push them also to the master repository or do you bundle all your changes into a single changeset before pushing? See 1. and 2.: patch first in your own private branch, then reorganize your commits on an official (published) patch branch. One single commit is not always the best option if the patch involves several different "activities" (or bug fix).
