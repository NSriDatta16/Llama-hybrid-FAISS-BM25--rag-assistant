[site]: crossvalidated
[post_id]: 512168
[parent_id]: 
[tags]: 
How do I find a minimum sample size for the proportion test / T test?

What I want to figure out is how to find a minimum sample size for comparing a sample to the whole population when the ratio of the sample to the population is less than 5-10% (e.g. 30 to 1000). The population in the question is everyone who answered a particular survey question and can be between 800 and 1500 responses for most questions. This population then can be broken into many smaller sub groups with different sizes ranging from 5 to 200, with the average group size being around 30. A question has multiple choices (which could be assumed as being somewhat uniform), so for simplicity let's say that each question has 5 choices, with an average probability for each choice about 20%. What I need to find out or somehow quantify is what's the minimum number of sample size that I can compare to the whole population numbers while still retaining the statistical significance but also the practical significance... For example: if the sample size is 10, and n responses for choice #1 = 3, while the population size = 1000 and n responses for choice #1 in the whole population = 100 then the proportions I get is 30% vs 10% which has a p-value from z-test of 0.0375 which is less than alpha and hence significant... but at the same time it might be just a sampling error... from statsmodels.stats.proportion import proportions_ztest proportions_ztest([3,100], [10,1000]) #p_value = 0.0375.. So in this case, what method should I use for choosing the minimum or optimal sample size when comparing largely different n and N? I have done the power analysis for this purpose and have found a minimum sample size to observe a certain effect, and it seems that 10 to 1000 is fine... but I was curious if there is something else? Python code for the power analysis: from statsmodels.stats.power import TTestIndPower analysis = TTestIndPower() nobs1 = 1000 effect = 0.8 alpha = 0.1 power = 0.8 ratio = 0.01 result = analysis.solve_power(effect_size=effect ,nobs1 = nobs1 , alpha = alpha, ratio = ratio) print('Power (1-Type II Error): %.3f' % result) result = analysis.solve_power(effect_size=effect ,nobs1 = nobs1, power = power , ratio = ratio) print('Alpha Level (Significance): %.3f' % result) result = analysis.solve_power(effect_size=effect , power = power , alpha = alpha, ratio = ratio) print('Sample Size: %.3f' % result) result = analysis.solve_power(power = power , nobs1 = nobs1 , alpha = alpha, ratio = ratio) print('Effect Size (0.2 - Small, 0.5 - Medium, 0.8 - Big): %.3f' % result) result = analysis.solve_power(effect_size=effect ,power = power , nobs1 = nobs1 , alpha = alpha, ratio = None) print('Ratio: %.4f' % result) Output: Power (1-Type II Error): 0.808 Alpha Level (Significance): 0.094 Sample Size: 976.976 Effect Size (0.2 - Small, 0.5 - Medium, 0.8 - Big): 0.791 Ratio: 0.0098
