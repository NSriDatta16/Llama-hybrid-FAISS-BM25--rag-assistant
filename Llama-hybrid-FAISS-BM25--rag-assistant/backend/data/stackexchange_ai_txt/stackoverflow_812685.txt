[site]: stackoverflow
[post_id]: 812685
[parent_id]: 
[tags]: 
End to End testing of Webservices

first time poster and TDD adopter. :-) I'll be a bit verbose so please bear with me. I've recently started developing SOAP based web services using the Apache CXF framework, Spring and Commons Chain for implementing business flow. The problem I'm facing here is with testing the web services -- testing as in Unit testing and functional testing. My first attempt at Unit testing was a complete failure. To keep the unit tests flexible, I used a Spring XML file to keep my test data in. Also, instead of creating instances of "components" to be tested, I retrieved them from my Spring Application context. The XML files which harbored data quickly got out of hand; creating object graphs in XML turned out to be a nightmare. Since the "components" to be tested were picked from the Spring Application Context, each test run loaded all the components involved in my application, the DAO objects used etc. Also, as opposed to the concept of unit test cases being centralized or concentrated on testing only the component, my unit tests started hitting databases, communicating with mail servers etc. Bad, really bad. I knew what I had done wrong and started to think of ways to rectify it. Following an advice from one of the posts on this board, I looked up Mockito, the Java mocking framework so that I could do away with using real DAO classes and mail servers and just mock the functionality. With unit tests a bit under control, this brings me to my second problem; the dependence on data. The web services which I have been developing have very little logic but heavy reliance on data. As an example, consider one of my components: public class PaymentScheduleRetrievalComponent implements Command { public boolean execute(Context ctx) { Policy policy = (Policy)ctx.get("POLICY"); List list = billingDAO.getPaymentStatementForPolicy(policy); ctx.put("PAYMENT_SCHEDULE_LIST", list); return false; } } A majority of my components follow the same route -- pick a domain object from the context, hit the DAO [we are using iBatis as the SQL mapper here] and retrieve the result. So, now the questions: - How are DAO classes tested esp when a single insertion or updation might leave the database in a "unstable" state [in cases where let's say 3 insertions into different tables actually form a single transaction]? - What is the de-facto standard for functional testing web services which move around a lot of data i.e. mindless insertions/retrievals from the data store? Your personal experiences/comments would be greatly appreciated. Please let me know in case I've missed out some details on my part in explaining the problem at hand. -sasuke
