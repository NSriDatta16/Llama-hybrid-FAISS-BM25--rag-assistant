[site]: stackoverflow
[post_id]: 4451580
[parent_id]: 
[tags]: 
Unit Testing ASP.NET MVC with Data

We have an insanely data driven application. We want to unit test the application but developers are resistant to building entirely fake repositories because of the volume of data. I don't really blame them. Understand that we are retrofitting tests into an existing application. If we were starting over we would make a ton of architectural changes to facilitate better unit testing with fake repositories. We would like to distribute a known mdf file with the tests, copy it, and use that for performing our tests. Is there an approved technique for this? I'm familiar with embedding resources into the test dll, but not with embedding mdf's--if that can even be done. A solution (sort of): I ended up taking the DataContextWrapper from Andrew Tokeley's post on mocking Linq data contexts (http://andrewtokeley.net/archive/2008/07/06/mocking-linq-to-sql-datacontext.aspx) and created a FakeDataContext.cs that is basically a bunch of Lists. I wrote a truly barbaric T4 template (think "select * FROM ") to copy the data from a known good database to create a huge class full of stuff like: List _customers = new List (); _customers.Add(new Customer(){CustomerId = 1, CustomerName = "ACME"}); etc. The class is 25K lines but since t4 writes all those lines, who cares? It allows us to mock just the data context, so we can test our linq against the fake context with some reasonable assurance we got the queries right. The original devs put a ton of business logic in the repo, so it allows us to test the logic against known good data.
