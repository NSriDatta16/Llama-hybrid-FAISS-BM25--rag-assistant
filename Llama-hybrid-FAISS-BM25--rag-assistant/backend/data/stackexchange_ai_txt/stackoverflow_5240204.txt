[site]: stackoverflow
[post_id]: 5240204
[parent_id]: 5190689
[tags]: 
If count[] and m_Starbucks[] are still available, then this means PracticeActivity and G are both alive too. No. count and m_Starbucks are both declared static. Per Java documentation : "Class Variables (Static Fields) A class variable is any field declared with the static modifier; this tells the compiler that there is exactly one copy of this variable in existence, regardless of how many times the class has been instantiated" So say you do the following: (pretend this isn't an activity and you can conveniently just construct it)... PracticeActivity example1 = new PracticeActivity(); PracticeActivity example2 = new PracticeActivity(); Then you do not have example1.m_Starbucks[0] and example2.m_Starbucks[0] as distinct variables. Instead, you just have PracticeActivity.m_Starbucks[0] and any specific instance of that class has the same variable. Therefore it is unaffected by (unrelated to!) the destruction of the actual instance of your Activity. And in fact, they exist, even if you have never constructed an instance of the class that contains them. Also, if you change example1.m_Starbucks[0], you will find that example2.m_Starbucks[0] also has changed -- because, again, there's only one array. The simple answer here is that you shouldn't be using static variables for this type of storage. It's safe to use static for constants and some other special cases, but never as member variables that you expect to hold attributes of a given instance of a class, that make that instance uniquely different from other classes.
