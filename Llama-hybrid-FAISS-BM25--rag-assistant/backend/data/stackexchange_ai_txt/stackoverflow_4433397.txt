[site]: stackoverflow
[post_id]: 4433397
[parent_id]: 4355192
[tags]: 
If your sorting involves moving files, then the conventional measures for "fastest" sort algorithm don't really apply. For moving files around, a faster sort algorithm will consist of minimizing the number of file writes. Selection sort can be used and has very close to the minimum number of swaps possible, but again, in the worst case, each file has to be written twice: Once when it's swapped out of the way to make place for the file that belongs there, and once swapped into the place it's supposed to be when its time comes. There is an algorithm which performs at most n+1 assignments. A 'swap' (which is what most sorting algorithms use) involves three assignments, (using a temp variable). This works pretty much by doing a selection sort without actually swapping anything. By either writing each selected item to new memory, or saving the sort order in memory and then reorganizing files in the same memory space after the fact (defragmentation style). This algorithm would really be minimal in terms of data copying. This is ideal when copying items is expensive (sorting data on disk).
