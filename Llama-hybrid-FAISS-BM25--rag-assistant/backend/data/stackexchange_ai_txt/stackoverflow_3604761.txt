[site]: stackoverflow
[post_id]: 3604761
[parent_id]: 2714639
[tags]: 
Here's an extension method for LINQ. public static double WeightedAverage (this IEnumerable records, Func value, Func weight) { if(records == null) throw new ArgumentNullException(nameof(records), $"{nameof(records)} is null."); int count = 0; double valueSum = 0; double weightSum = 0; foreach (var record in records) { count++; double recordWeight = weight(record); valueSum += value(record) * recordWeight; weightSum += recordWeight; } if (count == 0) throw new ArgumentException($"{nameof(records)} is empty."); if (count == 1) return value(records.Single()); if (weightSum != 0) return valueSum / weightSum; else throw new DivideByZeroException($"Division of {valueSum} by zero."); } This has become extremely handy because I can get a weighted average of any group of data based on another field within the same record. Update I now check for dividing by zero and throw a more detailed exception instead of returning 0. Allows user to catch the exception and handle as needed.
