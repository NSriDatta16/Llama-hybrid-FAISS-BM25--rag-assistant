[site]: stackoverflow
[post_id]: 5393038
[parent_id]: 
[tags]: 
Swipe-To-Delete triggers the insert row on my table

In my app, the user is presented with a table of data. When they click "edit", an edit row appears at the top with a green plus-sign - they can use this to add another item to the list. This works fine when the user just taps the edit button, but if the users uses swipe-to-delete, the edit row appears (without the green plus) and everything goes weird (delete button appearing on the wrong row, etc). Can anyone tell me what I'm doing wrong? Sorry just to dump a load of code but I've gone round in so many circles that I've lost all perspective! #import "ChecklistsViewController.h" #import "Checklist.h" @interface ChecklistsViewController (private) - (void)configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath; - (void)addingView; @end @implementation ChecklistsViewController @synthesize category, managedObjectContext, fetchedResultsController; - (id)initWithStyle:(UITableViewStyle)style { self = [super initWithStyle:style]; if (self) { editControlsDidShow = NO; } return self; } - (void)dealloc { [category release]; [managedObjectContext release]; [fetchedResultsController release]; [super dealloc]; } #pragma mark - View lifecycle - (void)viewDidLoad { [super viewDidLoad]; self.navigationItem.rightBarButtonItem = self.editButtonItem; self.tableView.allowsSelectionDuringEditing = YES; } #pragma mark - Table view data source - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView { return [[self.fetchedResultsController sections] count]; } - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { id sectionInfo = [[self.fetchedResultsController sections] objectAtIndex:section]; if (tableView.editing) return [sectionInfo numberOfObjects] +1; return [sectionInfo numberOfObjects]; } - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { static NSString *CellIdentifier = @"Cell"; UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier]; if (cell == nil) { cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier] autorelease]; } // Configure the cell... cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator; [self configureCell:cell atIndexPath:indexPath]; if (tableView.editing) { if (indexPath.row == 0) { cell.textLabel.text = @"Add New Checklist"; cell.detailTextLabel.text = nil; } if (indexPath.row != 0) { [self configureCell:cell atIndexPath:indexPath]; } } return cell; } - (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath { return YES; } - (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath { if (editingStyle == UITableViewCellEditingStyleDelete) { NSManagedObjectContext *context = [self.fetchedResultsController managedObjectContext]; [context deleteObject:[self.fetchedResultsController objectAtIndexPath:indexPath]]; NSError *error = nil; if (![context save:&error]) { // error code NSLog(@"Unresolved error %@, %@", error, [error userInfo]); abort(); } } else if (editingStyle == UITableViewCellEditingStyleInsert) { [self addingView]; } } - (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath { int row = indexPath.row; if (self.editing && row == 0) { if (editControlsDidShow) return UITableViewCellEditingStyleInsert; return UITableViewCellEditingStyleDelete; } return UITableViewCellEditingStyleDelete; } - (void)setEditing:(BOOL)editing animated:(BOOL)animated { editControlsDidShow = NO; [super setEditing:editing animated:animated]; NSArray *addRow = [NSArray arrayWithObjects:[NSIndexPath indexPathForRow:0 inSection:0], nil]; [self.tableView beginUpdates]; if (editing) { editControlsDidShow = YES; [self.tableView insertRowsAtIndexPaths:addRow withRowAnimation:UITableViewRowAnimationLeft]; } else { [self.tableView deleteRowsAtIndexPaths:addRow withRowAnimation:UITableViewRowAnimationLeft]; } [self.tableView endUpdates]; } #pragma mark - Table view delegate - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath { // not done yet } #pragma mark - Data - (void)configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath { Checklist *aChecklist = [self.fetchedResultsController objectAtIndexPath:indexPath]; cell.textLabel.text = [aChecklist.name description]; cell.detailTextLabel.text = [aChecklist.category.name description]; } - (void) addingView// :(id)sender { //Create the root view controller for the navigation controller AddingViewController *viewController = [[AddingViewController alloc] initWithNibName:@"AddingViewController" bundle:nil]; viewController.delegate = self; viewController.title = @"Add Checklist"; // Create the navigation controller and present it modally UINavigationController *navigationController = [[UINavigationController alloc] initWithRootViewController:viewController]; [self presentModalViewController:navigationController animated:YES]; viewController.textLabel.text = @"Enter new checklist name"; [navigationController release]; [viewController release]; } #pragma mark - AddingViewDelegate - (void)addingViewController:(AddingViewController *)addingViewController didAdd:(NSString *)itemAdded { if (itemAdded != nil) { // Turn off editing mode. if (self.editing) [self.navigationController setEditing:NO animated:NO]; // Create a new instance of the entity managed by the fetched results controller. NSManagedObjectContext *context = [self.fetchedResultsController managedObjectContext]; NSEntityDescription *entity = [[self.fetchedResultsController fetchRequest] entity]; Checklist *newChecklist = [NSEntityDescription insertNewObjectForEntityForName:[entity name] inManagedObjectContext:context]; [category addChecklistsObject:newChecklist]; newChecklist.name = itemAdded; NSError *error = nil; if (![context save:&error]) { // error code NSLog(@"Unresolved error %@, %@", error, [error userInfo]); abort(); } } [self dismissModalViewControllerAnimated:YES]; } #pragma mark - Fetched results controller - (NSFetchedResultsController *)fetchedResultsController { if (fetchedResultsController != nil) { return fetchedResultsController; } // Create the fetch request for the entity. NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init]; // Edit the entity name as appropriate. NSEntityDescription *entity = [NSEntityDescription entityForName:@"Checklist" inManagedObjectContext:self.managedObjectContext]; [fetchRequest setEntity:entity]; // Set 4* the predicate so we only see checklists for this category. NSPredicate *requestPredicate = [NSPredicate predicateWithFormat:@"category.name = %@", self.category.name]; [fetchRequest setPredicate:requestPredicate]; // Set the batch size to a suitable number. [fetchRequest setFetchBatchSize:20]; // Edit the sort key as appropriate. NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@"name" ascending:YES]; NSArray *sortDescriptors = [[NSArray alloc] initWithObjects:sortDescriptor, nil]; [fetchRequest setSortDescriptors:sortDescriptors]; // Edit the section name key path and cache name if appropriate. NSFetchedResultsController *aFetchedResultsController = [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest managedObjectContext:self.managedObjectContext sectionNameKeyPath:nil cacheName:nil]; aFetchedResultsController.delegate = self; self.fetchedResultsController = aFetchedResultsController; [aFetchedResultsController release]; [fetchRequest release]; [sortDescriptor release]; [sortDescriptors release]; NSError *error = nil; if (![self.fetchedResultsController performFetch:&error]) { // handle the error properly! NSLog(@"Unresolved error %@, %@", error, [error userInfo]); abort(); } return fetchedResultsController; } #pragma mark - Fetched results controller delegate - (void)controllerWillChangeContent:(NSFetchedResultsController *)controller { [self.tableView beginUpdates]; } - (void)controller:(NSFetchedResultsController *)controller didChangeSection:(id )sectionInfo atIndex:(NSUInteger)sectionIndex forChangeType:(NSFetchedResultsChangeType)type { switch(type) { case NSFetchedResultsChangeInsert: [self.tableView insertSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade]; break; case NSFetchedResultsChangeDelete: [self.tableView deleteSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade]; break; } } - (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject atIndexPath:(NSIndexPath *)indexPath forChangeType:(NSFetchedResultsChangeType)type newIndexPath:(NSIndexPath *)newIndexPath { UITableView *tableView = self.tableView; switch(type) { case NSFetchedResultsChangeInsert: [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath] withRowAnimation:UITableViewRowAnimationFade]; break; case NSFetchedResultsChangeDelete: [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade]; break; case NSFetchedResultsChangeUpdate: [self configureCell:[tableView cellForRowAtIndexPath:indexPath] atIndexPath:indexPath]; break; case NSFetchedResultsChangeMove: [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade]; [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath]withRowAnimation:UITableViewRowAnimationFade]; break; } } - (void)controllerDidChangeContent:(NSFetchedResultsController *)controller { [self.tableView endUpdates]; } @end
