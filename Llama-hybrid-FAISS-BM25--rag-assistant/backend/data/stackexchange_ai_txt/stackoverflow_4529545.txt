[site]: stackoverflow
[post_id]: 4529545
[parent_id]: 4529127
[tags]: 
There are a few things wrong with your code. First, you never actually ask for the text items of the note :-) You just get the raw string. The second is that set AppleScript's text item delimiters to "space" sets the text item delimiters to the literal string space . Thus, for instance, running set AppleScript's text item delimiters to "space" return text items of "THISspaceISspaceAspaceSTRING" returns {"THIS", "IS", "A", "STRING"} Secondly, even if you had " " instead of "space" , this would split your string on spaces, and not newlines. For instance, running set AppleScript's text item delimiters to " " return text items of "This is a string which is on two lines." returns {"This", "is", "a", "string which", "is", "on", "two", "lines."} As you can see, "string\nwhich" is a single list item. To do what you want, you can just use paragraphs of STRING ; for instance, running return paragraphs of "This is a string which is on two lines." returns the desired {"This is a string", "which is on two lines."} Now, I'm not entirely clear on exactly what you want to do. If you want to get this for a specific person, you can write tell application "Address Book" set n to the note of the first person whose name is "Antal S-Z" return paragraphs of n end tell You have to split it into two statements because, I think, paragraphs of ... is a command, whereas everything on the first line is a property access. (I usually discover these things via trial and error, to be honest.) If, on the other hand, you want to get this list for every person in a group, it's slightly harder. One big problem is that people without a note get missing value for their note, which isn't a string. If you want to ignore these people, then the following loop will work tell application "Address Book" set ns to {} repeat with p in Â¬ (every person in group "Test Group" whose note is not missing value) set ns to ns & {paragraphs of (note of p as string)} end repeat return ns end tell The every person ... bit does exactly what it says, getting the relevant people; we then extract their note's paragraphs (after reminding AppleScript that the note of p really is a string). After this, ns will contain something like {{"Test 1", "Test 2"}, {"Test 3", "Test 4"}} .
