[site]: stackoverflow
[post_id]: 3687648
[parent_id]: 3687420
[tags]: 
you should use autoloading with specified clas name structure, here is an example the class names should should be only alpha and _ case-insensitive. Lets take this directory structure and files /classes/class.php /classes/input/input.php /classes/output/output.php /classes/regex/regex.php /classes/interface/parser/interface_parser.php /classes/parser/parser.php /classes/parser/xml/parser_xml.php /classes/parser/html/parser_html.php having the structure like this is good as it encourages you to code better when it comes to OOP. Now if we take a look at the /classes/parser/html/html_parser.php file: class Parser_Html extends Parser implements Interface_Parser { //looks nice in here } usually you would have to make sure the interface and the extended class is loaded, but these get autoloaded as well if they have not already. creating the auto load system for this is not that complex, its just 1 function. function __autoload($name) { //Classes $parts = explode('_',strtolower($name)); $path = '/classes/'; foreach($parts as $p) { $path .= $p; } $path .= '/' . $name . '.php'; if(file_exists($path)) { require_once $path; } } so instead of including the class file first just run the class initiation. $HtmlParser = new Parser_Html(); as the file has not been include the __autoload is run with a param of the class name, the autoload then looks in the directory that's relevant to the class name to try and load it. also as your using the extend keyword in the class file shown above the class that is to be the parent gets run threw trhe autoloader aswell so you do not need to pre-load interfaces and classes etc. Hope this helps you. Note: All code provided is untested and written for informational purposes, I would recommend you research the techniques more in detail before any implementation is done.
