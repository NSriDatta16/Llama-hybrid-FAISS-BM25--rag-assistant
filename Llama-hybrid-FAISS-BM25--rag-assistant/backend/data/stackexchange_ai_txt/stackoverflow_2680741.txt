[site]: stackoverflow
[post_id]: 2680741
[parent_id]: 2680722
[tags]: 
Sure. These refer to conditional compilation symbols which can be defined at compile-time and which control what code is actually built. Here's an example: using System; class Test { static void Main() { #if FOO Console.WriteLine("FOO was defined"); #endif #if BAR Console.WriteLine("BAR was defined"); #endif } } If you compile this with csc Test.cs It won't print anything. If you compile it with csc Test.cs /D:FOO then it will print "FOO was defined" - and obviously the same is true for BAR. Note that these aren't the same as C++ macros - a symbol is either defined or not; it doesn't have a "replacement value" as such. In Visual Studio, you specify which symbols should be defined in the Build tab of the project properties. Additionally, at the very start of the file you can explicitly define and undefine symbols: #define FOO #undef BAR This can be important when calling methods decorated with ConditionalAttribute - such calls are ignored by the compiler if the appropriate symbol isn't defined. So if you wanted to make sure that all your Debug.Print calls came through even if you hadn't defined the DEBUG symbol for the rest of the project, you could use: #define DEBUG ... Debug.Print("Foo"); Personally, I don't use all this very much. Aside from anything else, it makes it easier to understand the code if you know that it will all be compiled and run at execution time. EDIT: Just to clarify a little on terminology - #if , #line , #pragma etc are all preprocessor directives; FOO and BAR (in this case) are the conditional compilation symbols.
