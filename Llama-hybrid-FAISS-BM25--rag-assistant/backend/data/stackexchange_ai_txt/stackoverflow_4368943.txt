[site]: stackoverflow
[post_id]: 4368943
[parent_id]: 
[tags]: 
How to create an effective index for following query

I have converted a web server access_log to a mysql table, it looks like this: CREATE TABLE `access_log` ( `timestamp` int(11) NOT NULL default '0', `visitorid` int(11) default NULL, `url` int(11) default NULL, `params` int(11) default NULL, `status` smallint(3) NOT NULL default '0', `bytes` int(20) NOT NULL default '0', `referrer` int(11) default NULL, `refparams` int(11) default NULL, `useragentid` int(11) default NULL, `keywords` int(11) default NULL, `country` char(3) default '', `crawl` int(1) NOT NULL default '0', `sessionid` int(11) default NULL, KEY `timestamp` (`timestamp`), KEY `visitorid` (`visitorid`), KEY `url` (`url`), KEY `referrer` (`referrer`), KEY `keywords` (`keywords`) ) ENGINE=MyISAM DEFAULT CHARSET=latin1 PACK_KEYS=1; I have a query that produces a "Most Popular Pages" report for a certain date range, an example looks like this: select url, count(distinct visitorid) as visitors, count(*) as hits from access_log where timestamp >=1270072800 and timestamp This query gets pretty slow when there are a lot of records in the table. Depending on the timestamp range relative to the total number of records in the table, the optimizer says it will either use the 'timestamp' or the 'url' key. But, it always mentions 'Using where; Using temporary; Using filesort' Is there any way I could create a combined index that would improve the execution time of this query? I've tried the following combinations, but the optimizer seems to ignore them: idx(timestamp,url,visitorid,crawl) idx(url,visitorid,crawl,timestamp) Any suggestions or pointers as to what I'm missing would be appreciated. Thanks!
