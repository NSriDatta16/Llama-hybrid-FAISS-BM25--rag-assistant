[site]: crossvalidated
[post_id]: 617455
[parent_id]: 
[tags]: 
Is it possible to apply matrix decomposition to a vector, injecting additional information to UV decomposition?

As I am reading about recommender systems in Machine Learning, UV decomposition caught my eye ( click for an explanation or see below). So I have two questions: Question 1: what are the drawbacks of trying to UV-decompose a 1 by m vector into a product of a 1 by d ( $U$ ) vector and a d by m matrix ( $V$ )? As far as I can see, the problem arises from the fact that the system is poorly constrained. Is it so? How can I relate that fact to the rank of the original matrix? Question 2: Imagine that we have two matrices. Matrix $A$ is a user-item n by m matrix. Matrix $B$ is a 1 by m vector describing certain characteristics of items. Is it possible to overcome the problem of poor constraint by constructing the decomposition as following: $A \approx U_1V^{T}$ , $B \approx U_2V^{T}$ ? Note that $V^{T}$ matrix is shared by both decompositions and thus we expect the constraints of matrix A to bind the solution. Please also note that the optimization function will then look (roughly) like that: $$\min J = ||A - U_1V^{T}||_2^2 + \beta ||B - U_2V^{T}||_2^2$$ Effectively, what I am trying to achieve is to inject some item-related side information from a matrix $B$ to the solution. What are the cons of doing so? Thanks! More on UV decomposition: Consider movies as a case in point. Most users respond to a small number of features; they like certain genres, they may have certain famous actors or actresses that they like, and perhaps there are a few directors with a significant following. If we start with the utility matrix M, with n rows and m columns (i.e., there are n users and m items), then we might be able to find a matrix U with n rows and d columns and a matrix V with d rows and m columns, such that UV closely approximates M in those entries where M is nonblank. If so, then we have established that there are d dimensions that allow us to characterize both users and items closely. We can then use the entry in the product UV to estimate the corresponding blank entry in utility matrix M. This process is called UV-decomposition of M.
