[site]: stackoverflow
[post_id]: 1912353
[parent_id]: 1912253
[tags]: 
Cache the results of your GPS data query in a file or database (sqlite) along with a datetime. You can then do a datetime check against the last cached datetime to initiate another GPS data query. You'll probably run into concurrency issues with cgi and the datetime check though... To get around concurrency issues, you can use sqlite, and put the write in a try/except. Here's a sample cache implementation using sqlite. import datetime import sqlite3 class GpsCache(object): db_path = 'gps_cache.db' def __init__(self): self.con = sqlite3.connect(self.db_path) self.cur = self.con.cursor() def _get_period(self, dt=None): '''normalize time to 15 minute periods''' if dt.minute So we have the cache tool now the implementation side. You'll want to check the cache first then if it's not 'fresh' (doens't return anything), go grab the data using your current method. Then cache the data you grabbed. you should probably organize this better, but you should get the general idea here. Using this sample, you just replace your current calls to 'remote_get_gps_data' with 'get_gps_data'. from gps_cacher import GpsCache def remote_get_gps_data(): # your function here return data def get_gps_data(): data = None gps_cache = GpsCache() current_dt = datetime.datetime.now() cached_data = gps_cache.get_cache(current_dt) if cached_data: data = cached_data else: data = remote_get_gps_data() gps_cache.put_cache(current_dt, data) return data
