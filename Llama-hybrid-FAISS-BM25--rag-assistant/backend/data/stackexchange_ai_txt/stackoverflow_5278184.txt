[site]: stackoverflow
[post_id]: 5278184
[parent_id]: 5278040
[tags]: 
A quick driver of this showed it to work. Not responsible for all test cases. :-) List combineListsHorizontally(List a, List b) { assert a.size() == b.size(); // just avoids some checks List result = new ArrayList (a.size()); Iterator itera = a.iterator(); Iterator iterb = b.iterator(); for(int i = 0; i If you need something generic, you would need to know they ahve a way that they can be joined List combineListsHorizontally(List a, List b) { assert a.size() == b.size(); // just avoids some checks List result = new ArrayList (a.size()); Iterator itera = a.iterator(); Iterator iterb = b.iterator(); for(int i = 0; i (a,b).get(); // define this line yourself result.add(combined); } return result; } ///////////////// EDIT - here's a working example based off @Brents (superior) example. Props to him for illustrating this pattern better than I did. import java.util.*; /** * Compile: "javac BinaryListUtils" * Usage: "java BinaryListUtils" C:\Documents and Settings\user\My Documents>javac BinaryListUtils.java C:\Documents and Settings\user\My Documents>java BinaryListUtils APPLEBANANA PEARORANGE C:\Documents and Settings\user\My Documents> */ // general use transformer class BinaryListUtils { // tranformer static interface BinaryTransformer { Z transform(X a, Y b); } // implementation for your problem static class ConcatTransformer implements BinaryTransformer { public String transform(String a, String b) { return a + b; } } public static List collect(List aList, List bList, BinaryTransformer t) { List ret = new ArrayList (aList.size()); Iterator aIter = aList.iterator(); Iterator bIter = bList.iterator(); while(aIter.hasNext()) { ret.add(t.transform(aIter.next(), bIter.next())); } return ret; } public static void main(String[] args) { List aList = new ArrayList (); List bList = new ArrayList (); aList.add("APPLE"); aList.add("PEAR"); bList.add("BANANA"); bList.add("ORANGE"); ConcatTransformer ct = new ConcatTransformer(); List cList = BinaryListUtils.collect(aList,bList,ct); for(String s : cList) System.out.println(s); } }
