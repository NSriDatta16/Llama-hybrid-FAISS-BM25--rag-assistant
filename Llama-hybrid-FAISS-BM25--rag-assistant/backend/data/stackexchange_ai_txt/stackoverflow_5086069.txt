[site]: stackoverflow
[post_id]: 5086069
[parent_id]: 4727843
[tags]: 
You don't have to implement an IRepository in case you don't want to fully direct the part storage to somewhere else. I'm currently using WCF service in one of my Orchard-based projects, so your scenario is similar. You can do it this way: Wrap your web service proxy in a class implementing IDependency , so you'd be able to inject it into drivers/handlers/controllers etc. For the ease of unit testing and mocking you should create a separate interface, eg. IMyWebServiceWrapper : IDependency and implement it then. Create appropriate content parts and records. In the records store only the information necessary to locate and fetch data from WS. In the content parts create all necessary properties - they will be loaded from the WS. Inject your class from point 1. into appropriate content handlers' constructors Inside the content handler constructor use something like this: OnLoaded ((ctx, part) => { part.MyProperty = myService.GetMyProperty(part.SomeIdToLookup); }); MyPart is your part on the Orchard side. MyProperty is some property on your part which will be loaded from WS. myService is your wrapped WS proxy, passed as a constructor parameter. GetMyProperty is a method in the wrapper which call WS and retrieves the necessary data. Of course you can use other handler events (like OnInitialized, OnCreated, OnPublished etc). You can read more about content handlers here . I'd also recommend getting a dev startup module from Codeplex for quick development.
