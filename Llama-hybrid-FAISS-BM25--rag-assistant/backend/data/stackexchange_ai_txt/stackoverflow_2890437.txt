[site]: stackoverflow
[post_id]: 2890437
[parent_id]: 2796736
[tags]: 
If you don't want the page to update, then you need to use a XMLHttpRequest. In this example, i'm using the client-side function Request(function_name, opt_argv) and server-side RPCHandler from this Google App Engine example . I haven't tested this, but it would look like: Client-side Javascript function initialize() { ... // Init map var marker = new GMarker(center, {draggable: true}); GEvent.addListener(marker, "dragend", function(position) { Request('update_marker_position', [ unique_identifier, position.lat(), position.lng() ] ); }); } Server-side Python # Create database model for LatLng position class LatLng(db.Model): lat = db.IntegerProperty() lng = db.IntegerProperty() ... class RPCMethods: """ Defines the methods that can be RPCed. NOTE: Do not allow remote callers access to private/protected "_*" methods. """ def update_marker_position(self, *args): # args[0] - unique identifier, say GAE db key # args[1] - lat # args[2] - lng # Note: need to do some checking that lat and lng are valid # Retrieve key and update position position = LatLng.get(db.Key(args[0]) if position: position.lat = args[1] position.lng = args[2] else: position = LatLng( lat= args[1], lng= args[2] ) position.put() payload = { 'lat': args[1], 'lng': args[2], } return payload You'll need to create the db entry when you serve up the page, and store the db key client side. You could also use some other unique identifier. In this case, I assumed you stored it as a global variable 'unique_identifier'. As well, you'll need to add a callback function to handle the returning payload (with members 'lat' and 'lng'). From the example, I believe you just add your callback function as the zeroth parameter in the opt_argv array of Request. I hope this helps.
