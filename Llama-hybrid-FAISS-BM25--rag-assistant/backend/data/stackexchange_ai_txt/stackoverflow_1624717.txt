[site]: stackoverflow
[post_id]: 1624717
[parent_id]: 1624671
[tags]: 
You should look into the .NET Asynchronous Programming Model. It's much simpler then it sounds. You simply create a delegate to a method that you want to run asynchronously. Then call BeginInvoke on the delegate and your method is automatically run on a background thread. In the asynchronous method, if you need to update the UI, you must use Control.Invoke/BeginInvoke on the relevant form or control. Also, if the asynchronous method needs to return some result to the UI thread, you will need to utilise the IAsyncResult (returned from BeginInvoke) and the EndInvoke method. See the article Calling Synchronous Methods Asynchronously for more details. On the other hand, if you're just looking for an equivalent to the javascript method window.settimeout() in Windows.Forms the following avoids threads entirely by wrapping the standard Timer in a re-usable method: public void SetTimeout(EventHandler doWork, int delayMS) { System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer(); timer.Interval = delayMS; timer.Tick += delegate(object s, EventArgs args) { timer.Stop(); }; timer.Tick += doWork; timer.Start(); } then to call it: SetTimeout(delegate { YourMethod(); }, 100); Just like the Timer you drag onto a form, YourMethod() is run on the UI thread by the form message loop. Therefore you do not need to worry about BeginInvoke/Invoke at all.
