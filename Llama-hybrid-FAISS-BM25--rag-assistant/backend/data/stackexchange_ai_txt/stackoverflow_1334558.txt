[site]: stackoverflow
[post_id]: 1334558
[parent_id]: 1332783
[tags]: 
Martin is absolutely correct in stating that you can't restart a thread once it terminated. However, I'd like to point out that for those instances where you know that you are going to need to perform some tasks over and over you should explore what is called "thread pooling". Essentially, thread pools consist of a number of threads that are alive and waiting for work. When you need to perform a task you simply assign your work task to one such thread and when the thread completes the thread it is put back to a waiting-for-work state. This technique can offer a huge performance boost since creating threads comes with a performance penalty. For more information on the windows native thread pool you can start here but you may also implement your own thread pools if your application requires functionality that is not available in the Windows Thread Pool API. As a side note, thread pooling is also supported and highly encouraged in the .NET framework too.
