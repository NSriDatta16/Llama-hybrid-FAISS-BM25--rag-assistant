[site]: stackoverflow
[post_id]: 3176673
[parent_id]: 3172031
[tags]: 
Hough is great but it can be a little expensive This may work: -Use Threshold or Canny to find the edges of the image. -Then cvFindContours to identify the contours, then try to detect rectangles. Check the squares.c example in opencv distribution. It basically checks that the polygon approximation of a contour has 4 points and the average angle betweeen those points is close to 90 degrees. Here is a code snippet from the squares.py example (is the same but in python :P ). ..some pre-processing cvThreshold( tgray, gray, (l+1)*255/N, 255, CV_THRESH_BINARY ); # find contours and store them all as a list count, contours = cvFindContours(gray, storage) if not contours: continue # test each contour for contour in contours.hrange(): # approximate contour with accuracy proportional # to the contour perimeter result = cvApproxPoly( contour, sizeof(CvContour), storage, CV_POLY_APPROX_DP, cvContourPerimeter(contour)*0.02, 0 ); res_arr = result.asarray(CvPoint) # square contours should have 4 vertices after approximation # relatively large area (to filter out noisy contours) # and be convex. # Note: absolute value of an area is used because # area may be positive or negative - in accordance with the # contour orientation if( result.total == 4 and abs(cvContourArea(result)) > 1000 and cvCheckContourConvexity(result) ): s = 0; for i in range(4): # find minimum angle between joint # edges (maximum of cosine) t = abs(angle( res_arr[i], res_arr[i-2], res_arr[i-1])) if s -Using MinAreaRect2 (Finds circumscribed rectangle of minimal area for given 2D point set), get the bounding box of the rectangles. Using the bounding box points you can easily calculate the angle. you can also find the C version squares.c under samples/c/ in your opencv dir.
