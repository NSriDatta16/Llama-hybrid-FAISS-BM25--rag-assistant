[site]: stackoverflow
[post_id]: 515987
[parent_id]: 515795
[tags]: 
I work with this sort of thing a lot. What you're looking for sounds like a candidate Single Sign-on solution or Federated Security. You might try doing something similar to the following: Create a simple db or other sort of table storage with two columns "nonce" and "username" When you build the link to the other site create a GUID or other unique identifier to use as a one-time nonce, passing it as a querystring ?id=. Insert an entry into the table with the current authenticated username and the unique identifier you created. When you reach the destination of your link, pass the unique identifier to call a webservice that will will match up the identifier with the username in the database you inserted before jumping to the second site (secure this with ssl). If the nonce checks out with a valid username, you're all set. The webservice should remove the used entry and the table should stay more or less empty any time you are not in the middle of a transaction. It is also good to include a datetime in your nonce/username table and expire it in 60 seconds or less to minimize the risk of replay attacks. We also require client certificates for external applications to call the webservice in order to verify the identity of the caller. Internal applications don't really necessitate using client certificates. A nice thing about this is that it scales fairly well to as many sites as you would like to use Not perfect security, but we've never had a significant compromise with a such as system.
