[site]: stackoverflow
[post_id]: 130224
[parent_id]: 123619
[tags]: 
I ran into this once, it is very annoying. In my case, there were a number of dlls not covered, so I ended up estimating blocks/kb for our code base by using the covered dlls information divided by their size. Then of course to get the number of blocks for the uncovered dlls, you simply multiply your average by the size of the dll. This is not the most accurate method but it gets you a quick ballpark, and you can determine your error by calculating your known dlls and comparing against the actual values. It is helpful if you have a good number of assemblies that are calculated. Of course, you could just do a LOC count (ignoring comments) and figure on a single LOC roughly equivalent to a block. If I remember correctly that fairly accurate, and so should get you even closer. The only way I know of to force a report on uncovered assemblies is to actually write a test that loads the assembly (the test doesn't even need to do anything).
