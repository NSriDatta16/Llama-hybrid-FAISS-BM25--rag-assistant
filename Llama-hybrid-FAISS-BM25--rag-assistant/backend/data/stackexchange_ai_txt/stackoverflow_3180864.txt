[site]: stackoverflow
[post_id]: 3180864
[parent_id]: 2982829
[tags]: 
Since I posted the question I have been playing around with some things and I think first off, not to be argumentative but those of you that have been posting the response that I am i/o bound are only partially correct. It is seek time that is the constraint. Long story to test various options I built a new machine with an I-7 processor and a reasonably powerful/functional motherboard and then using the same two drives I was working with before I noted a fairly significant increase in speed. I also noted that when I am moving big files (one gigabyte or so) I get sustained transfer speeds of in excess of 50 mb/s and the speed drops significantly when moving small files. I think the speed difference is due to an unordered disk relative to the way the copy program reads the directory structure to determine the files to copy. What I think needs to be done is to 1: Read the MFT and sort by sector working from the outside to the inside of the platter (it means I have to figure out how multi-platter disks work) 2: Analyze and separate all contiguous versus non-contiguous files. I would handle the contiguous files first and go back to handle the non-contiguous files 3: start copying the contiguous files from the outside to inside 4. When finished copy the non-contiguous files, by default they will end up on the inner rings of the platter(s) and they will be contiguous. (I want to note that I do regularly defragment and have less than 1% of my files/directories are fragmented)but 1% of 20 million is still 200K Why is this better than just running a copy program. When running a copy program the program is going to use some internal ordering mechanism to determine the copy order. Windows uses alphabetic (more or less) I imagine others do something similar but that order may-not (in my case probably does not) conform to the way the files were initially laid on the disk which is what I beli8eve is the biggest factor that affects copy speed. The problem with a sector-copy is it does not fix anything and so when I migrate across disk sizes and add data I end up with new problems to handle. If I do this right I should be able to check file headers and the eof record and do some housekeeping. CHKDSK is a great program but kind of dumb. When I do get file/folder corruption it is really hard to identify what was lost, by building my own copy program I could include a maintenance cycle that I could invoke when I want to run some tests on the files during copying. This might slow it up some but I don't think very much because the CPU is going to move the files much faster than they can get pulled or written. And even if it slows it up some when being run, at least I get some control (maybe understanding is a better word) of the problems that will invariably crop up in an imperfect world. I may not have to do this in A, I have been looking around for ways to play (read) the MFT and there are even Python tools for this see http://www.integriography.com
