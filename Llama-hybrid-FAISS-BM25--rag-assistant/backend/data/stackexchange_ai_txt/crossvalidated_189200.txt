[site]: crossvalidated
[post_id]: 189200
[parent_id]: 
[tags]: 
how to write down dynamical state space models with deterministic variables in PyMC?

is it possible to write down this simple dynamical system in pymc? $R_0 \sim Normal(\mu_r, \sigma_r)$ $Z_0 \sim Normal(\mu_z, \sigma_z)$ $R_t \sim Normal(R_{t-1}, \sigma_r)$ $Z_t = Z_{t-1} + R_{t-1}Z_{t-1}$ here there is a rate $R_t$ evolving through time, and the rate $R_t$ controls the change of the system output $Z_t$. $Z_t$'s value is a deterministic function of $R_{t-1}$ (which is stochastic) and $Z_{t-1}$. the code for this is: import numpy as np import matplotlib.pylab as plt n = 20 data = [1]*n # true r r_val = -0.5 for t in range(1, n): data[t] = data[t-1] + (r_val*data[t-1]) mu = 1 r_sd = 0.001 z_sd = 0.01 vars = {} vars["z0"] = pymc.Normal("z0", mu=1, tau=1/z_sd) vars["r0"] = pymc.Normal("r0", mu=1, tau=1/r_sd) for t in range(1, n): prev_r = vars["r%d" %(t-1)] prev_z = vars["z%d" %(t-1)] vars["r%d" %(t)]=pymc.Normal("r%d" %(t), mu=prev_r, tau=1/r_sd) # z(t) = z(t-1) + z(t-1)*r(t-1) # can this be written without Normal, as Deterministic? vars["z%d" %(t)]=pymc.Normal("z%d" %(t), mu=prev_z + prev_r*prev_z, tau=1/z_sd, observed=True, value=data[t]) model = pymc.Model(vars.values()) m = pymc.MCMC(model) m.sample(iter=2000) # plot results plt.figure() mean_r = [] for i in range(n): mean_r.append(np.mean(m.trace("r%d" %(i))[:])) plt.plot(range(n), mean_r, label="pymc") plt.plot(range(n), [r_val] * n, label="true") plt.legend() plt.show() my question is: what is wrong with this way of writing the model? it doesn't update based on observations and gives the prior on $R_t$. i tried to use pymc.Lambda() to write down $Z_t$ but I get the same results.
