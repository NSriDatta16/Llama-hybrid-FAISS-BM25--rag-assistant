[site]: stackoverflow
[post_id]: 3407510
[parent_id]: 3407403
[tags]: 
Immutability (for strings or other types) can have numerous advantages: It makes it easier to reason about the code, since you can make assumptions about variables and arguments that you can't otherwise make. It simplifies multithreaded programming since reading from a type that cannot change is always safe to do concurrently. It allows for a reduction of memory usage by allowing identical values to be combined together and referenced from multiple locations. Both Java and C# perform string interning to reduce the memory cost of literal strings embedded in code. It simplifies the design and implementation of certain algorithms (such as those employing backtracking or value-space partitioning) because previously computed state can be reused later. Immutability is a foundational principle in many functional programming languages - it allows code to be viewed as a series of transformations from one representation to another, rather than a sequence of mutations. Immutable strings also help avoid the temptation of using strings as buffers. Many defects in C/C++ programs relate to buffer overrun problems resulting from using naked character arrays to compose or modify string values. Treating strings as a mutable types encourages using types better suited for buffer manipulation (see StringBuilder in .NET or Java).
