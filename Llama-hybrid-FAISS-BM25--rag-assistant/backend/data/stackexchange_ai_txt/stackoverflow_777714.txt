[site]: stackoverflow
[post_id]: 777714
[parent_id]: 775848
[tags]: 
I don't understand your last requirement (there are no threads specified), but I'll get you a setup for that information and fulfill the requirement I can understand. The data is broken up so you can get to it. And although I don't understand how you'd use the 'for x threads:' line, it is at least captured, so you might be able to work with it. use List::Util qw ; my $fh = FileHandle->new( PATH_TO_DATAFILE ); my $data = { trial_times => [] , totals => {} }; my $precision = 0; while ( ) { if ( m/^for (\d+) threads:/ ) { push @{$data->{trial_times}}, {}; } elsif ( m/^Average time taken for (API\w+) is: (\d+\.(\d+)) nanoseconds./ ) { push @{$data->{trial_times}[-1]{$1}}, $2; push @{ $data->{totals}->{$1} }, $2; $precision = length $3 if length $3 > $precision; } } ### $data foreach my $api ( keys %{ $data->{totals} } ) { my @list = @{ $data->{totals}{$api} }; my $sum =sum @list; printf "Sum for %d runs of API $api: %0.${precision}f (Average: %0.${precision}f)\n" , scalar @list, $sum, $sum / scalar @list ; } my @combined = map { @$_ } values %{$data->{totals}}; ### @combined my $sum = sum @combined; printf "Combined %d runs for %0.${precision}f total (Average: %0.${precision}f)\n" , scalar @combined, $sum, $sum / scalar @combined ;
