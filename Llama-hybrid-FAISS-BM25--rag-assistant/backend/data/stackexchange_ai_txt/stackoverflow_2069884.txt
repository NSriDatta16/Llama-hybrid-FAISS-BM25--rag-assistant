[site]: stackoverflow
[post_id]: 2069884
[parent_id]: 2069017
[tags]: 
I agree with floyd here. The way I usually approach this type of thing is to return the necessary JSON data from the Rails actions rather than using RJS to update the page. This has the benefits that JSON is usually very fast to generate, and it can easily be moved to the model as a to_json method and reused in many different contexts. If updating the page is simple there's no reason you can't do it inline like this, but if it's more complex you can define it as a function in a static javascript file. The nice thing about that approach is that it keeps your javascript and ruby code more modular and decoupled. It's easier to debug and unit test because the javascript code stands on its own rather than being leakily "abstracted" (more like obfuscated) by the limited RJS methods. You also gain some performance benefits from static javascript file caching as well. If you look around the web you'll notice there's not much mention of RJS recently in Rails blogs. That's because RJS was a hot idea back in 2006, but has fallen into disuse as javascript best practices have evolved. To understand this, you need to look at the history of AJAX. Rails was one of the first frameworks to have built-in AJAX support in 2005, and it did so using Prototype which was really the first modern Javascript framework but was still quite rough around the edges. At the time a very large number of web developers were looking for any way to avoid Javascript, which had an undeservedly terrible reputation due to DOM incompatibilities. Therefore people were a little overeager to paper over everything with Rails helpers. This was great when people were wowed with very simple AJAX, but as Javascript frameworks matured and people became more ambitious with their Javascript functionality it became clear that Javascript deserves to be a first-class citizen. Nowadays jQuery makes common javascript tasks so concise and elegant that the early Rails helpers appear clumsy even when their default functionality works. There are still probably some good use cases for RJS, but I haven't used it for years and I haven't missed it at all. My advice is to embrace Javascript. Pick up Javascript: The Good Parts by Douglas Crockford, and then spend a lot of time with jQuery. You will be well-rewarded.
