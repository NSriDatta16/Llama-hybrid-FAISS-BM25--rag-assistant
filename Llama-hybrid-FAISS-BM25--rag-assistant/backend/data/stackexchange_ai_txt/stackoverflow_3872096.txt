[site]: stackoverflow
[post_id]: 3872096
[parent_id]: 3868405
[tags]: 
Your mistake is that your database is poorly designed. You are using a table-per-subclass mapping strategy but you have applied it to many apparently unrelated classes. How can an Organization have a first or last name? When you get an Entity, NHibernate has to join all the tables in the inheritance tree because it doesn't know what concrete type to return. If you get a User or an Organization it will only join to one other table as expected. Is Entity an abstract class? You can't get concrete objects of type Entity because the abstract class can't be constructed. Edited to add: After seeing the mapping files, I really think you should reconsider your design. This is not a good or reasonable use of inheritance. If you really want to continue with this model, I would suggest keeping the abstract base class but not mapping it. But I think this design has much deeper problems than that.
