[site]: stackoverflow
[post_id]: 4916664
[parent_id]: 4881389
[tags]: 
The Scope object has a method getLocalElements() , which can be iterated over. Each element can then be asked by its name, and when this is the right one (and it is a variable, too), you can get its type. This is the concept, untested: private final static Set variableKinds = Collections.unmodifiableSet(EnumSet.of(ElementKind.FIELD, ElementKind.ENUM_CONSTANT, ElementKind.PARAMETER, ElementKind.LOCAL_VARIABLE)); public Type getTypeOfVariable(Scope scope, String varName) { for(Element e : scope.getLocalElements()) { if(variableKinds.contains(e.getKind()) && e.getName().equals(varName)) { return e.getType(); } } throw new NoSuchElementException("No variable " + varName + " in " + scope); } Edit: Yeah, really untested (there is no getType() method). So, how to get from a Element (or VariableElement) from its type? The Trees class has some utility methods allowing the retrieval of a Tree or TreePath from the Element , and thus we can get a VariableTree (since this came from a variable declaration). The VariableTree now has a getType() method, which returns a Tree - but in fact this is one of PrimitiveTypeTree , ParametrizedTypeTree , ArrayTypeTree and IdentifierTree (for simple reference types as well as type variables). So, if you only want to print the type, this may be enough. Otherwise, again with the Trees class we now can get a TypeMirror for this type. (I did something similar once when I tried to write a new Doclet which would also output the formatted source code. Terrible flipping between all those APIs.)
