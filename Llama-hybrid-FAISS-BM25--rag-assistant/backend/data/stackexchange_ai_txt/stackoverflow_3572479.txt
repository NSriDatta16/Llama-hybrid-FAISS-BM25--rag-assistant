[site]: stackoverflow
[post_id]: 3572479
[parent_id]: 
[tags]: 
In Memory Data Cache for Performance in .Net Applications

We have an application (rules engine) that has a lot of tables in memory to perform certain business rules. This engine is also used for writing back to the database when needed. The DB structure is denormalized, and we have 5 transactional tables, that also sometimes need to be queried for reporting. The issue here is, we want to cache the data inside the app, so it loads on App startup, and then only changes if the DB changed. Any recommendations? We are leaning towards creating a DB service, that will handle all Inserts, Updates and Deletes, and queue them to decrease load on the DB server (the transactional tables have loads of indexes also). Also, we are thinking of enabling the DB service to sit on top and serve all reports / other apps that need direct DB access. The aim here ofcourse is to decrease DB hits for Select queries per request, and prioritize transactions. Also to ensure people accessing apps dont bring the DB server down. Rules Engine is a C# desktop app, reporting and other apps are web based. What would be the best way to go about this? I did also think of removing all indexes from my transactional table, and having a trigger insert into a new table which would be a copy, but indexed for report retrieval.
