[site]: stackoverflow
[post_id]: 2767564
[parent_id]: 2761443
[tags]: 
Edit: My new way of doing this is to use my Eclipse plugin: https://github.com/banshee/AndroidProguardScala (the readme has instructions for installing and a pointer to a normal Eclipse update site). The old answer still works, but the new way is just better. [The old way] My approach: Use the normal Android/eclipse tools for creating a Java project. Add a second project containing the Scala code. That way I get to keep the generated code for future reference (I'm new at both Android and Scala). This project can reference android.jar. The scala project produces a jar file that's used in the java project Use proguard to strip the library. I believe this avoids the need for the scala-android.jar that was used in 2.7 I haven't used this for anything more ambitious than hello, world though, so take it as more of a set of hints. In the scala project, I add a builder (Builder > New) that's just a shell script called pguard in the root directory of the project containing: #!/bin/sh cd $1 PROGUARD=$HOME/dev/proguard/lib/proguard.jar LIBS= OUTPUT=lib/proguard.jar rm -f $OUTPUT AJAR=/Users/jamesmoore/dev/android-sdk-mac_86/platforms/android-7/android.jar # java -jar $PROGUARD -injars 'bin:lib/scala-library.jar(!META-INF/MANIFEST.MF,!library.properties)' -outjar $OUTPUT -libraryjars @proguard.txt java -Xmx1g -jar $PROGUARD -injars 'bin:lib/scala-library.jar(!META-INF/MANIFEST.MF,!library.properties)' -outjar $OUTPUT -libraryjars $AJAR @proguard.txt The builder has Location set to: ${build_project}/pguard And both working directory and arguments set to ${build_project} Also in the root of the scala project, there's a proguard arguments file @proguard.txt: -dontwarn -dontoptimize -dontobfuscate -dontskipnonpubliclibraryclasses -dontskipnonpubliclibraryclassmembers -keepattributes Exceptions,InnerClasses,Signature,Deprecated, SourceFile,LineNumberTable,*Annotation*,EnclosingMethod -keep public class com.banshee.** { public protected *; } You'll want to change the -keep arguments to keep your own code, of course. In the java project, I add the jar file that's produced by the scala project (I use lib/proguard.jar in the script above). Don't add the scala project as a required project in the java project's build path, though. That will add the scala class files in addition to the jar file and confuse dex (since it'll get both the .class files and the same things in the jar). As far as I can tell, Eclipse will build everything in the workspace, so when you hit the go button, both projects get built.
