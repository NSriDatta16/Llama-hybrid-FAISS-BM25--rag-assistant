[site]: stackoverflow
[post_id]: 2557889
[parent_id]: 868111
[tags]: 
Aside from the obvious use of the Java console and the applet viewer, starting from Java 6 update 7, you can use the VisualVM that comes with the JDK (JDK_HOME/bin/visualvm). It allows you to view the stack traces of each thread and even view all object instances. AppletViewer is very handy, you can do a "Run as / Java Applet" from Eclipse to run, or "Debug As / Java Applet" to debug your applet classes. However, sometimes to debug some security related stuff the browser plugin environment is just too different from appletviewer. Here's what you can do to effectively debug applets in the browser: 1) Obtain debugging info for the binaries Backup the .jar files from JRE_HOME/lib (Download and) Install a JDK for the same version as your JRE. Copy the .jar files from JDK_HOME/jre/lib to JRE_HOME/lib The files inside the JDK were compiled with the debugging information included (source-code line number information, variable names, etc) and the JRE files don't have this information. Without this you won't be able to meaningfully step into core class code in your debugger. 2) Enable debugging for the Java Plug-in Go to the Java Control Panel / Java / Java Runtime Settings / View / User / Runtime Parameters And add the options to enable debugging. Something like this: -Djava.compiler=NONE -Xnoagent -Xdebug -Xrunjdwp:transport=dt_socket,address=2502,server=y,suspend=n The interesting options are the port (using 2502 here, you can use pretty much any free port, just write it down for later) and the suspend - if you need to debug the applet startup, classloading, etc, set this to "y". That way when you access an applet page, the browser will appear to freeze as the JVM immediately gets suspended waiting for a debugger to connect. 3) Use your favorite IDE to Remotely debug the Java Plug-in In Eclipse, for instance, choose Run / Debug Configurations ... / Remote Java Application Click on the "New" button. Make sure connection type is "Socket Attach", choose localhost as the host if your browser is local, and the port you chose earlier (2502 in the example). You might have to inlude the src.zip in your JDK on the sources tab to have the Java core class sources available. Save the configuration, and once your browser is running the plug-in (with the JVM suspended or not) run the remote debugger to connect to the plug-in JVM, with a project containing your applet sources open.
