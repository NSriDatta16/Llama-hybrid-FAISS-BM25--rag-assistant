[site]: stackoverflow
[post_id]: 3332937
[parent_id]: 3332276
[tags]: 
I guess the question is about the runtime environment but still, I don't understand what lighter application does mean. Memory footprint? Startup time? Deployment time? What problem do you actually have? And please define light. For what it's worth, I consider GlassFish 3 as a light runtime and my experience with it is very positive. From the product data sheet : Oracle GlassFish Server 3 implements the OSGi runtime, which allows features to be dynamically added to the Java server as needed, and for the smallest possible Java stack to be deployed to support applications. This helps to keep the footprint as small as possible by loading only the modules required to service deployed applicationsâ€”improving startup time and reducing resource utilization. Second, I personally don't like the Frankenstein approach, I believe that the glue between all parts that you get with a real application server is part of the added value , that's actually why I use an app server. Third, I never benched OpenEJB, I used it for testing only and never planned to use it for production, mostly because of its bad reputation. See this comment about Geronimo's performances on TSS (from Hani Suleiman, don't be surprised if it's caustic): I'd imagine that saying that the EJB tier is 'acceptable' is about the nicest thing you could say. From what I know, geronimo's ejb code is based off openEJB, which has, historically, bean the worst container you could possibly find. You'd have to look pretty hard to find it too, only to be filled with various degrees of regret/rage once you achieve that dubious goal. It's not surprising that G's performance will always be sub-par. The frankenstein approach of software building is a great recipe for bad performance. Sure, you'll have lots of pretty diagrams, great looking dependency graphs, and loose coupling. All of which are fairly irrelevant to users who want a coherent appserver that they can treat as a black box. Things might have changed, OpenEJB has probably improved, at least a bit, but still: OpenEJB doesn't fully support EJB 3.1. Tomcat + OpenEJB is still not a full Java EE implementation, you might still have to add some pieces to your creature (not even mentioning Java EE 6). And what about the administration, clustering, etc? If you don't need the full Java EE 6 profile, there is the Java EE 6 web profile I'm happy with GlassFish 3, I don't find it "heavy" (and I suggest to try it). I know it can perform well. For all these reasons, I wouldn't consider Tomcat+OpenEJB instead of GlassFish, especially if there is no problem to solve. Related questions Which technologies does Tomcat support What is an Enterprise Java Bean really? Real world comparisons of Glassfish and JBoss 5? See also GlassFish 2 vs. Tomcat 6 Putting GlassFish v3 in Production: Essential Surviving Guide
