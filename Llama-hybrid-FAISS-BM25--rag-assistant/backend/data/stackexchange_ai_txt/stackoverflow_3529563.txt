[site]: stackoverflow
[post_id]: 3529563
[parent_id]: 3529496
[tags]: 
Several reasons are: Using domain names makes it easier to achieve uniqueness, without adding a new registry As far as hierarchical structuring goes, going from major to minor is natural For the second point, consider the example of storing dated records in a hierarchical file structure. It's much more sensible to arrange it hierarchically as YYYY/MM/DD than say DD/MM/YYYY : at the root level you see folders that organize records by year, then at the next level by month, and then finally by day. Doing it the other way (by days or months at the root level) would probably be rather awkward. For domain names, it usually goes subsub.sub.domain.suffix , i.e. from minor to major. That's why when converting this to a hierarchical package name, you get suffix.domain.sub.subsub . For the first point, here is an excerpt from Java Language Specification 3rd Edition that may shed some light into this package naming convention: 7.7 Unique Package Names Developers should take steps to avoid the possibility of two published packages having the same name by choosing unique package names for packages that are widely distributed. This allows packages to be easily and automatically installed and catalogued. This section specifies a suggested convention for generating such unique package names. Implementations of the Java platform are encouraged to provide automatic support for converting a set of packages from local and casual package names to the unique name format described here. If unique package names are not used, then package name conflicts may arise far from the point of creation of either of the conflicting packages. This may create a situation that is difficult or impossible for the user or programmer to resolve. The class ClassLoader can be used to isolate packages with the same name from each other in those cases where the packages will have constrained interactions, but not in a way that is transparent to a na√Øve program. You form a unique package name by first having (or belonging to an organization that has) an Internet domain name, such as sun.com . You then reverse this name, component by component, to obtain, in this example, com.sun , and use this as a prefix for your package names, using a convention developed within your organization to further administer package names. The name of a package is not meant to imply where the package is stored within the Internet; for example, a package named edu.cmu.cs.bovik.cheese is not necessarily obtainable from Internet address cmu.edu or from cs.cmu.edu or from bovik.cs.cmu.edu . The suggested convention for generating unique package names is merely a way to piggyback a package naming convention on top of an existing, widely known unique name registry instead of having to create a separate registry for package names .
