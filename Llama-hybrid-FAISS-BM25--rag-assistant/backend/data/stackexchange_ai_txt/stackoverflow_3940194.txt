[site]: stackoverflow
[post_id]: 3940194
[parent_id]: 
[tags]: 
Find an array inside another larger array

I was recently asked to write 3 test programs for a job. They would be written using just core Java API's and any test framework of my choice. Unit tests should be implemented where appropriate. Although I haven't received any feedback at all, I suppose they didn't like my solutions (otherwise I would have heard from them), so I decided to show my programs here and ask if this implementation can be considered good, and, if not, then why? To avoid confusion, I'll ask only first one for now. Implement a function that finds an array in another larger array. It should accept two arrays as parameters and it will return the index of the first array where the second array first occurs in full. Eg, findArray([2,3,7,1,20], [7,1]) should return 2. I didn't try to find any existing solution, but instead wanted to do it myself. Possible reasons: 1. Should be static. 2. Should use line comments instead of block ones. 3. Didn't check for null values first (I know, just spotted too late). 4. ? UPDATE : Quite a few reasons have been presented, and it's very difficult for me to choose one answer as many answers have a good solution. As @adietrich mentioned, I tend to believe they wanted me to demonstrate knowledge of core API (they even asked to write a function, not to write an algorithm). I believe the best way to secure the job was to provide as many solutions as possible, including: 1. Implementation using Collections.indexOfSubList() method to show that I know core collections API. 2. Implement using brute-force approach, but provide a more elegant solution. 3. Implement using a search algorithm, for example Boyer-Moore. 4. Implement using combination of System.arraycopy() and Arrays.equal(). However not the best solution in terms of performance, it would show my knowledge of standard array routines. Thank you all for your answers! END OF UPDATE. Here is what I wrote: Actual program: package com.example.common.utils; /** * This class contains functions for array manipulations. * * @author Roman * */ public class ArrayUtils { /** * Finds a sub array in a large array * * @param largeArray * @param subArray * @return index of sub array */ public int findArray(int[] largeArray, int[] subArray) { /* If any of the arrays is empty then not found */ if (largeArray.length == 0 || subArray.length == 0) { return -1; } /* If subarray is larger than large array then not found */ if (subArray.length > largeArray.length) { return -1; } for (int i = 0; i Test code: package com.example.common.utils; import com.example.common.utils.ArrayUtils; import junit.framework.TestCase; public class ArrayUtilsTest extends TestCase { private ArrayUtils arrayUtils = new ArrayUtils(); public void testFindArrayDoesntExist() { int[] largeArray = {1,2,3,4,5,6,7}; int[] subArray = {8,9,10}; int expected = -1; int actual = arrayUtils.findArray(largeArray, subArray); assertEquals(expected, actual); } public void testFindArrayExistSimple() { int[] largeArray = {1,2,3,4,5,6,7}; int[] subArray = {3,4,5}; int expected = 2; int actual = arrayUtils.findArray(largeArray, subArray); assertEquals(expected, actual); } public void testFindArrayExistFirstPosition() { int[] largeArray = {1,2,3,4,5,6,7}; int[] subArray = {1,2,3}; int expected = 0; int actual = arrayUtils.findArray(largeArray, subArray); assertEquals(expected, actual); } public void testFindArrayExistLastPosition() { int[] largeArray = {1,2,3,4,5,6,7}; int[] subArray = {5,6,7}; int expected = 4; int actual = arrayUtils.findArray(largeArray, subArray); assertEquals(expected, actual); } public void testFindArrayDoesntExistPartiallyEqual() { int[] largeArray = {1,2,3,4,5,6,7}; int[] subArray = {6,7,8}; int expected = -1; int actual = arrayUtils.findArray(largeArray, subArray); assertEquals(expected, actual); } public void testFindArrayExistPartiallyEqual() { int[] largeArray = {1,2,3,1,2,3,4,5,6,7}; int[] subArray = {1,2,3,4}; int expected = 3; int actual = arrayUtils.findArray(largeArray, subArray); assertEquals(expected, actual); } public void testFindArraySubArrayEmpty() { int[] largeArray = {1,2,3,4,5,6,7}; int[] subArray = {}; int expected = -1; int actual = arrayUtils.findArray(largeArray, subArray); assertEquals(expected, actual); } public void testFindArraySubArrayLargerThanArray() { int[] largeArray = {1,2,3,4,5,6,7}; int[] subArray = {4,5,6,7,8,9,10,11}; int expected = -1; int actual = arrayUtils.findArray(largeArray, subArray); assertEquals(expected, actual); } public void testFindArrayExistsVeryComplex() { int[] largeArray = {1234, 56, -345, 789, 23456, 6745}; int[] subArray = {56, -345, 789}; int expected = 1; int actual = arrayUtils.findArray(largeArray, subArray); assertEquals(expected, actual); } }
