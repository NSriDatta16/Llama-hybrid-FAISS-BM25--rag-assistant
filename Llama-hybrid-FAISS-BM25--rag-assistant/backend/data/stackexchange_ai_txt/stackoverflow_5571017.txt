[site]: stackoverflow
[post_id]: 5571017
[parent_id]: 
[tags]: 
VB.NET LINQ - Matching Hierarchical Data to Flat Data

I have 2 representations of similar data from 2 different systems and I need to match each entity in one system with the entities in the other. System A is Hierarchical, represented as a Dictionary(Of String, List(Of CategoryA)) looking something like: - "Organization 1" - { Name = "Cat1", Id = 1} - { Name = "Cat2", Id = 2} - { Name = "Cat3", Id = 3} - "Organization 2" - { Name = "Cat1", Id = 4} - { Name = "Cat3", Id = 5} - { Name = "Cat4", Id = 6} - "Organization 3" - { Name = "Cat1", Id = 7} - { Name = "Cat2", Id = 8} - { Name = "Cat3", Id = 9} - { Name = "Cat4", Id = 10} System B is Flattened, represented as a List(Of CategoryB) looking something like: - { Org = "Organization 1", Name = "Cat1", Id = 100 } - { Org = "Organization 1", Name = "Cat2", Id = 101 } - { Org = "Organization 1", Name = "Cat3", Id = 102 } - { Org = "Organization 2", Name = "Cat1", Id = 103 } - { Org = "Organization 2", Name = "Cat2", Id = 104 } - { Org = "Organization 2", Name = "Cat4", Id = 105 } - { Org = "Organization 4", Name = "Cat1", Id = 106 } - { Org = "Organization 4", Name = "Cat2", Id = 107 } - { Org = "Organization 4", Name = "Cat3", Id = 108 } - { Org = "Organization 4", Name = "Cat4", Id = 109 } And basically what I need to do is to outer join the hierarchical data to the flattened data on Organization name ( Dictionary.Key to CategoryB.Org ) and Category Name ( CategoryA.Name to CategoryB.Name ), leaving me with a Dictionary(Of String, IEnumerable(Of Tuple(Of CategoryA, CategoryB))) or something that looks something like: - "Organization 1" - { Name = "Cat1", Id = 1}, { Org = "Organization 1", Name = "Cat1", Id = 100 } - { Name = "Cat2", Id = 2}, { Org = "Organization 1", Name = "Cat2", Id = 101 } - { Name = "Cat3", Id = 3}, { Org = "Organization 1", Name = "Cat3", Id = 102 } - "Organization 2" - { Name = "Cat1", Id = 4}, { Org = "Organization 2", Name = "Cat1", Id = 103 } - { Name = "Cat3", Id = 5}, null - { Name = "Cat4", Id = 6}, { Org = "Organization 2", Name = "Cat4", Id = 105 } - "Organization 3" - { Name = "Cat1", Id = 7}, null - { Name = "Cat2", Id = 8}, null - { Name = "Cat3", Id = 9}, null - { Name = "Cat4", Id = 10}, null I don't have access to the CategoryA object to be able to apply an Organization property to it, or I would do it and make this easier on myself. I just can't figure out how to join on the Dictionary key and a property of one of the items in its value, and end up with anything useful. The most successful implementation I've created involves a For Each loop first, and a LINQ query inside: Given: catA = Dictionary(Of String, List(Of CategoryA)) catB = List(Of CategoryB) Dim result As New Dictionary(Of String, List(Of Tuple(Of CategoryA, CategoryB))) For Each kvp As KeyValuePair(Of String, List(Of CategoryA)) In catA Dim orgName As String = kvp.Key If Not result.ContainsKey(orgName) Then result.Add(orgName, New List(Of Tuple(Of CategoryA, CategoryB))) End If Dim orgCategories As IEnumerable(Of CategoryB) = From cat In catB Where cat.Org = orgName Dim tmpResult As IEnumerable(Of Tuple(Of CategoryA, CategoryB)) = From cat_a In kvp.Value Group Join cat_b In orgCategories On cat_a.Name Equals cat_b.Name Into matchedCats = Group From cat In matchedCats.DefaultIfEmpty Select matches = Tuple.Create(cat_a, cat) result(orgName).AddRange(tmpResult) Next It works alright, but I'd like it to be in the same statement.
