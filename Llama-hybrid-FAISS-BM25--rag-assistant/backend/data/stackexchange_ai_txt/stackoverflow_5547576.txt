[site]: stackoverflow
[post_id]: 5547576
[parent_id]: 
[tags]: 
Is NSData appropriate for large c arrays?

I'm reading large FITS images using the CFITSIO library for C. At first, the actual image/pixels are not read in. Only when some sort of operation needs to be done (say, an average of a few images) is the image loaded into memory as a double array. I represent each image as an object of type ImageListing (a custom class). This class knows how to read/write fits files. To represent a series of images, I use an NSMutableArray inside another class, called ImageStacker. ImageStacker implements methods which can average, subtract, sum the images. Obviously, to do these operations this class needs access to the raw pixels, which it gets by sending the message returnPixelsFrom:(NSInteger)Row . My question is, should I: 1) Read in the pixels in the above mentioned method, but read them into a C array (of type double) thats passed by reference. OR 2) Should I read in the pixels into a local C array, but then compose a NSData object using dataWithBytes:length and return this object from the method. What advantage does option 2 have over 1? Keep in mind, that when averaging/adding the pixels I will have to use a C array anyway, so isn't it better to keep using purely C arrays for this purpose?
