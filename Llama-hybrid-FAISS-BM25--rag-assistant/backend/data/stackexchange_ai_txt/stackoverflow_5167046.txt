[site]: stackoverflow
[post_id]: 5167046
[parent_id]: 5166979
[tags]: 
The simplest possible solution would be checking the User-Agent header sent by the browser. However, I would not recommend outright restricting any access from non-mobile user agents, as there is a chance that someone will visit the site from a mobile device you don't know about. A more graceful solution would be displaying a brief message to the user that the page is only intended for mobile devices, along with a link to the non-mobile version and a link to access the mobile version anyways. You can find some User-Agent strings sent by mobile browser here: http://www.zytrax.com/tech/web/mobile_ids.html User-Agent header can be queried through the $_SERVER pseudo-variable: http://php.net/manual/en/reserved.variables.server.php Edit after update of question: Probably you should not rely on the url endpoint being accessed from you app only. One method of restricting access is configuring you app to send a specific header, which may be, and in fact, if there is someone out there who really wants it, will be extracted from your app one day. Probably a combination of a custom User-Agent string and a custom header like X-My-App-Name (invent some smart name) will be enough for most practical purposes. The server could read these headers, and if they are not present, display a warning to the user along the app download link. How should the custom headers be send, this largely depends on what platform do you develop. For example, if the package org.apache.http.clint is available (for example, on Android), then the method org.apache.http.HttpMessage.addHeader(String name, String value) is the easiest way. Some documentation on org.apache.http.clint is available, for example, here: http://developer.android.com/reference/org/apache/http/HttpMessage.html
