[site]: stackoverflow
[post_id]: 5103014
[parent_id]: 
[tags]: 
Best approach to Architect the integration of two separate databases?

I've ran into the following questions at work, and I don't have the experience or knowledge in order to answer them, I'm hoping that some of you wiser folk may be able to point me in the right direction, any answers will be greatly appreciated! Scenario We have two aspects of the business using separate databases, Human resources and Operational Areas (Homecare). Human Resources keep track of the company’s employees, shift patterns, absence, pay etc. Homecare keeps track of client information, home visits, visit dates and the employee/s responsible for providing that visit. These two systems are separate and we’re currently in the process of looking at ways to integrate them. Additionally, we’re looking at how to organise our code that looks at these two databases, into reusable, organised libraries. We have three applications re-using a HumanResources.dll, responsible for communicating with an EF 4 object context, contained in the library. The object context is almost a mirror image of the database as it stands. Questions We’re about to add a fourth application that will use data in the HR database. Do we: Create a new EF data model, responsible for providing information that only the application needs, while duplicating some common entities such as the Employee. OR Add the new entities/tables to the already large model and accept it’s going to get large. Longer term, we need to join the Shift Pattern Information in the HR database to the Client Visits on the Operational Areas (Homecare) database in a 5th application. We’ve got an idea on what we could do; we’ve come up with the following: Create a layer that sits between the HumanResources object context and Homecare object context, responsible for joining the two sets of data together. Are there any other approaches that would benefit us?
