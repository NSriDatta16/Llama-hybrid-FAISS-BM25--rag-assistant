[site]: crossvalidated
[post_id]: 579373
[parent_id]: 579371
[tags]: 
Here's an attempt using brute force , and being by far the worst possible solution in terms of number of parameters. We choose a bit-resolution to represent every possible RGB triplet, and compute its closest (using euclidean distance) color amongst the 128 given colors. Then store each 0-127 color index in an array, at the position given by the binary representation of the RGB triplet. With 6-bits/channel resolution, it is possible to cover 118 out of the 128 colors, at the expense of having to store 2^18 indices. At 3-bits/channel resolution, it is possible to cover 108 out of the 128 colors, storing only 2^9 values, which seems a reasonable compromise: rgb333ToColor = [ 0, 47, 51, 46, 46, 69, 69, 45, 23, 39, 51, 42, 50, 69, 69, 45, 64, 123, 102, 38, 66, 69, 69, 79, 22, 30, 34, 68, 66, 66, 41, 41, 76, 76, 34, 66, 66, 66, 41, 41, 76, 122, 122, 122, 77, 33, 37, 37, 122, 122, 122, 29, 77, 33, 90, 37, 21, 21, 21, 29, 77, 33, 90, 90, 7, 55, 51, 50, 50, 69, 69, 80, 15, 1, 112, 50, 50, 69, 69, 80, 19, 71, 112, 104, 66, 92, 92, 80, 18, 18, 34, 68, 66, 92, 92, 41, 18, 76, 76, 66, 66, 92, 92, 40, 76, 122, 122, 24, 28, 32, 36, 36, 122, 122, 122, 24, 28, 32, 32, 36, 21, 21, 21, 24, 28, 32, 32, 90, 121, 59, 112, 54, 54, 50, 80, 80, 83, 71, 112, 54, 54, 69, 80, 80, 125, 125, 117, 117, 117, 92, 80, 80, 63, 63, 117, 117, 118, 92, 44, 44, 63, 63, 63, 118, 118, 92, 40, 40, 111, 111, 111, 24, 28, 32, 40, 36, 17, 17, 20, 24, 28, 32, 36, 36, 17, 17, 20, 24, 28, 32, 32, 36, 6, 58, 58, 54, 54, 54, 49, 49, 10, 58, 54, 54, 54, 49, 49, 49, 10, 105, 117, 117, 54, 49, 49, 49, 14, 14, 117, 118, 118, 118, 44, 44, 14, 14, 111, 118, 118, 2, 91, 91, 111, 111, 111, 118, 2, 2, 91, 91, 111, 111, 75, 89, 89, 114, 114, 36, 75, 75, 75, 89, 89, 114, 114, 114, 6, 58, 58, 54, 54, 82, 81, 81, 10, 58, 54, 54, 82, 82, 81, 81, 61, 105, 105, 54, 82, 82, 81, 81, 62, 99, 99, 118, 118, 2, 48, 48, 99, 99, 99, 118, 2, 2, 93, 93, 111, 111, 111, 2, 2, 2, 93, 115, 85, 85, 85, 16, 114, 114, 114, 115, 98, 98, 16, 16, 114, 114, 114, 114, 120, 120, 106, 82, 82, 82, 94, 94, 120, 106, 106, 82, 82, 82, 94, 94, 61, 61, 61, 82, 82, 82, 94, 94, 126, 126, 126, 118, 2, 2, 116, 116, 126, 126, 97, 2, 2, 2, 93, 116, 97, 97, 97, 2, 2, 2, 115, 115, 110, 110, 110, 16, 113, 114, 114, 115, 74, 74, 73, 16, 113, 114, 114, 119, 106, 106, 57, 57, 82, 82, 94, 94, 106, 106, 57, 95, 82, 82, 94, 94, 60, 84, 107, 82, 82, 82, 94, 94, 126, 108, 107, 107, 56, 56, 52, 52, 108, 108, 107, 107, 56, 56, 52, 52, 97, 97, 97, 8, 8, 8, 115, 115, 97, 97, 73, 113, 113, 8, 119, 119, 73, 73, 73, 113, 113, 113, 119, 119, 5, 5, 57, 57, 95, 95, 53, 53, 5, 5, 57, 95, 95, 95, 53, 53, 60, 84, 4, 95, 56, 56, 53, 53, 84, 9, 4, 4, 56, 56, 52, 52, 96, 96, 96, 4, 56, 56, 52, 52, 96, 96, 109, 8, 8, 8, 52, 52, 109, 109, 109, 8, 8, 8, 3, 3, 13, 13, 12, 113, 113, 113, 3, 3 ] then for finding the corresponding color-index, we normalize the RGB triplet to the range (0,0,0)-(7,7,7) and lookup at index 64*R+8*G+B which of the 128 colors it corresponds to. This is not a learning model, and it doesn't try to explain how the colors were initially encoded (assuming there was a logic in it). While this answer may seem a bit off topic here, I believe the original question is not, as there are many methods ranging from machine learning to dimensionality reduction to compression that can be used to approach the problem. However it may serve as an example of a solution.
