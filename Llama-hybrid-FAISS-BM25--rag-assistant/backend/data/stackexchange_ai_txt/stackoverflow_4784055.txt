[site]: stackoverflow
[post_id]: 4784055
[parent_id]: 
[tags]: 
Efficient and practical way to generalize struct access?

I have the following: Struct A { char a; char b[10]; int c; float d; } Struct B { float d; char b[10]; char a; int c; bool e; } and I want to make a generic function that accepts struct A or B to access elements like: void SetD(A a, float f) { a.d = f; } There will be many different Structs (most with the same elements) and many functions to operate on them. I'm trying to generalize the access so I don't have to copy each method into each Struct resulting in duplicate code. Not sure if instanceof or templates would be best here. Any ideas on how to implement this elegantly? Let me know if I can provide more clarification.
