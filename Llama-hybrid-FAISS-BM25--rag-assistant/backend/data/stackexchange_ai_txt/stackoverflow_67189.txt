[site]: stackoverflow
[post_id]: 67189
[parent_id]: 66385
[tags]: 
I did it ones in a real project: The database consisted of one table with one field which was an array of 50. It had a 'word' index set on it. All the data was typeless so the 'word index' worked as expected. Numeric fields were represented as characters and the actual sorting had been done at client side. (It still possible to have several array fields for each data type if needed). The logical data schema for logical tables was held within the same database with different table row 'type' (the first array element). It also supported simple versioning in copy-on-write style using same 'type' field. Advantages: You can rearrange and add/delete your columns dynamically, no need for dump/reload of database. Any new column data may be set to initial value (virtually) in zero time. Fragmentation is minimal, since all records and tables are same size, sometimes it gives better performance. All table schema is virtual. Any logical schema stucture is possible (even recursive, or object-oriented). It is good for "write-once, read-mostly, no-delete/mark-as-deleted" data (most Web apps actually are like that). Disadvantages: Indexing only by full words, no abbreviation, Complex queries are possible, but with slight performance degradation. Depends on whether your preferred database system supports arrays and word indexes (it was inplemented in PROGRESS RDBMS). Relational model is only in programmer's mind (i.e. only at run-time). And now I'm thinking the next step could be - to implement such a database on the file system level. That might be relatively easy.
