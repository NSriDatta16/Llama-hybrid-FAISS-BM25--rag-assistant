[site]: stackoverflow
[post_id]: 2009295
[parent_id]: 
[tags]: 
In C++ can you extend a parameterized base class with different parameter value in the child class?

In all the languages that I understand this is not possible but someone was telling me it was possible in C++ but I have a hard time believing it. Essentially when you parameterize a class you are creating a unique class in the compilation stage aren't you? Let me know if I am not being clear with my question. Here is my attempt at explaning what I am trying to do ( pay attention to class L ): //; g++ ModifingBaseClassParameter.cpp -o ModifingBaseClassParameter;ModifingBaseClassParameter #include using namespace std; template class Base { public: Base() {} Base(T& t) : m_t(t) {} T& getMem() {return m_t;} private: T m_t; }; template class F: Base {}; template class L: F {}; int main() { Base i; F f; L l; cout So as you can see (hopefully my syntax makes sense) class L is trying to redefine its parent's float parameter to be a long. It certainly doesn't seem like this is legal but I will differ to the experts.
