[site]: stackoverflow
[post_id]: 349772
[parent_id]: 349742
[tags]: 
Eeee this is a karma risk... I have a DRY unit-testable abstraction because, well, because there were too many querystring variables to keep on in a legacy conversion. The code below is from a utility class whose constructor requires a NameValueCollection input (this.source) and the string array "keys" is because the legacy app was rather organic and had developed the possibility for several different strings to be a potential input key. However I kind of like the extensibility. This method inspects the collection for the key and returns it in the datatype required. private T GetValue (string[] keys) { return GetValue (keys, default(T)); } private T GetValue (string[] keys, T vDefault) { T x = vDefault; string v = null; for (int i = 0; i
