[site]: stackoverflow
[post_id]: 4390774
[parent_id]: 4390080
[tags]: 
It's a tough question, because what you really need is becoming good at what you do, and thus no authoritative list exists. That being said... Read Effective C++ by Meyers and C++ Coding Standards by Sutter, you're not likely to understand everything if you're a beginner, so re-read them from time to time (it's also a good vaccine) Time to introduce the STL (it's an amazing little pearl), learn to use its algorithms instead of hand-crafting everything, if possible jump straight to the C++0x version Incorporate Boost into the mix, softly at first: boost::optional , boost::variant , boost::lexical_cast , boost::numeric_cast make your code safer and more idiomatic. Also poke the Boost String Algorithms library. Template Meta Programming and Boost.MPL are next: C++ Template Meta Programming by Abrahams Gurtovoy will help there. You might have to leverage Boost.Preprocessor for some template stuff. Learn more Boost Libraries, it's a gigormous repository and it's amazing all the libraries there are. I am still at that last part myself, so cannot comment on going further :) At each step, you should write a lot of code, reading isn't sufficient, you need to experiment. Programming is not just technic, the architectural part of the program is extremely important in the field. Oh and try and join (if only to read) an open-source project, nothing beats writing code and it's better when someone else reviews it :)
