[site]: stackoverflow
[post_id]: 4896576
[parent_id]: 
[tags]: 
NoSQL as storage for publish-subscribe/multi-reader queue?

Looking for a storage solution for the following problem, preferably with some NoSQL-like speed and scalability: Events. Lots of them, little data per event. This is what we need to store. Not necessary to exactly keep the order in which the events arrive. It would be nice not to store multiple copies of each event (as in separate storage for each observer). Observers. A few of them ( At their own pace (pull model) Preferably with a "get me the next chunk of unread events" API Each observer needs to read every event (eventually) No guarantees on how often they will pull the changes. It might be necessary to store lots of events before they are read. In an RDBMS you'd probably just number the events sequentially and remember the "last read no" for every observer. Is it possible to implement something similar while trading some of the ACID for speed & scalability? So far Redis with its lists looks good - anything better I should look at?
