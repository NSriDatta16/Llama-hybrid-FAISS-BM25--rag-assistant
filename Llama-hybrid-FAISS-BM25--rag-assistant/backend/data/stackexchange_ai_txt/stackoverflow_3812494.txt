[site]: stackoverflow
[post_id]: 3812494
[parent_id]: 3804969
[tags]: 
The problem can be divided into two parts: Detecting when a path has closed. One way to do this is by making links between sequential tiles in the path: when you take a step, if one of your new neighbors has been visited before and you cannot trace your path back to it among your current neighbors then you have closed the path (you may have to establish additional links to deal with the case of going back alongside your path). This will also tell on which side of your path (left or right) the interior region lies. Play around with this on graph paper and it should become clear. This is O(1) with each step. Filling in the enclosed region. Once you have found a single tile that is in the region, iterate over its neighbors, and then their neighbors, and so on. For a region of area n, this is O(n) in time and on average O(sqrt(n)) in memory, depending on geometry (O(n) at worst).
