[site]: stackoverflow
[post_id]: 3784229
[parent_id]: 
[tags]: 
Elegant way of overriding default code in test harness

Let's say I have the following class: class Foo { public: Foo() { Bar(); } private: Bar(bool aSendPacket = true) { if (aSendPacket) { // Send packet... } } }; I am writing a test harness which needs to create a Foo object via the factory pattern (i.e. I am not instantiating it directly). I cannot change any of the factory instantiation code as this is in a framework which I don't have access to. For various reasons I don't want the Bar method to send packets when running it from a test harness. Assuming I cannot call Bar directly (eliminating potential solutions like using a friend class), what is an elegant design pattern to use to prevent packets being sent out when running my test harness? I definitely don't want to pollute my production code with special cases.
