[site]: stackoverflow
[post_id]: 2980450
[parent_id]: 2980426
[tags]: 
No there is nothing to box. The var keyword doesn't mean that the variable is boxxed. It doesn't do any conversion during the runtime. The var keyword is strictly a C# construct. What is actually happening when you use var is: var i = new int[1]; IL sees it as: int[] i = new int[1] Now if you are asking if when you assign an int to part of the array of i does it box? such as: i[0] = 2; No it does not. This is opposed to which does: var o = new object[1]; o[0] = 2; This example does and why using ArrayList (think expandable array) in 1.0, 1.1 (pre generics) was a huge cost. The following comment applies to the object[] example as well: Any reference or value type that is added to an ArrayList is implicitly upcast to Object. If the items are value types, they must be boxed when added to the list, and unboxed when they are retrieved. Both the casting and the boxing and unboxing operations degrade performance; the effect of boxing and unboxing can be quite significant in scenarios where you must iterate over large collections. MSDN Link to ArrayList Link to Boxing in C#
