[site]: stackoverflow
[post_id]: 295229
[parent_id]: 295120
[tags]: 
This should do the trick: #ifdef __GNUC__ #define DEPRECATED(func) func __attribute__ ((deprecated)) #elif defined(_MSC_VER) #define DEPRECATED(func) __declspec(deprecated) func #else #pragma message("WARNING: You need to implement DEPRECATED for this compiler") #define DEPRECATED(func) func #endif ... //don't use me any more DEPRECATED(void OldFunc(int a, float b)); //use me instead void NewFunc(int a, double b); However, you will encounter problems if a function return type has a commas in its name e.g. std::pair as this will be interpreted by the preprocesor as passing 2 arguments to the DEPRECATED macro. In that case you would have to typedef the return type. Edit: simpler (but possibly less widely compatible) version here .
