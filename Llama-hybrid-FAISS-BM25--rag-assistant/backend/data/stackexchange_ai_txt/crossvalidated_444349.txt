[site]: crossvalidated
[post_id]: 444349
[parent_id]: 444340
[tags]: 
TensorFlow Probability is a standalone probabilistic programming module for TensorFlow, numpyro package uses JAX, while Pyro is a PyTorch framework. All those frameworks enable you to do Variational Inference and Markov Chain Monte Carlo sampling. The simplest way of computing the expected posterior loss, is using Monte Carlo samples from the posterior distribution (either using MCMC, or first use VI estimate posterior distribution, then sample from it). To calculate expected posterior loss, you need to do is to take samples from the posterior predictive distribution, calculate loss function over those values, and average the losses. Frameworks that you describe (TensorFlow, JAX, PyTorch) are designed for using automatic differentiation, not for taking integrals , what is needed for Bayesian problems. You can find some packages that are focused on taking integrals, e.g. using Bayesian quadrature , but they are far less mature then the mentioned packages, so the procedure described by me above for now remains state-of-art for Bayesian problems.
