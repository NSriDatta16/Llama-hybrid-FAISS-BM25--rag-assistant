[site]: stackoverflow
[post_id]: 1357139
[parent_id]: 1355572
[tags]: 
At RubyConf 2007, William Bereza of Atomic Object gave a talk about Enhancing Embedded Development with Ruby , in which he describes how they applied the principles that Atomic Object stands for (Agile, BDD, Automated Tests, â€¦) to an embedded project involving autonomous robotic vehicles. A couple of months earlier, he had given the same talk at O'Reilly OSCON 2007 . There's a wealth of resources on the Atomic Objects website: Agile Embedded Software Development , Papers , Presentations and Free Software including SysTiR (System Testing in Ruby) and Unity - Compact Test Framework for (Embedded) C There is also a great story about Ward Cunningham and TDDing an embedded system, that Robert C. Martin ("Uncle Bob") told during his keynote at RailsConf 2009 (The story goes roughly from 15:50 to 17:20). The story goes something like this: Bob comes to visit Ward, who took him down to the basement, where he is staring on little circles on a screen like its the coolest thing in the universe and he is excited like a little kid unwrapping her first bicycle on Christmas. What he had done, was trying to figure out how to completely TDD an embedded device (in this case a video converter) without ever touching the device at all . What he had done, was the following: he had started writing a Unit test in JUnit, using a mock. Then made that test pass, and so on, just like you would normally do. Then he replaced all the methods with ones that generated the appropriate assembly code for the device. Since all the logic was written (and tested) in Java, the "leaf" methods themselves were extremely simple methods that only did extremely simple things like "write an int into a register" or "read a bool from a flag register" for which the assembly code was so simple that it was "obviously correct". And, sure enough, when he assembled his generated code and flashed the device, it worked the very first time, without him having ever tried the code on the device, and also without him having written any substantial assembly code. So, that's two approaches: in Atomic Object's case they wrote the software in C and the tests in Ruby, and generated tests from the Ruby code. In Ward's case, he wrote the tests and the code in Java, and generated the code from the Java code.
