[site]: stackoverflow
[post_id]: 4177008
[parent_id]: 4176520
[tags]: 
The difference is what they are trying to achieve. The Strategy pattern is used in situations where you know that you want to swap out implementations. As an example, you might want to format data in different ways - you could use the strategy pattern to swap out an XML formatter or CSV formatter, etc. Dependency Injection is different in that the user is not trying to change the runtime behaviour. Following the example above, we might be creating an XML export program that uses an XML formatter. Rather than structuring the code like this: public class DataExporter() { XMLFormatter formatter = new XMLFormatter(); } you would 'inject' the formatter in the constructor: public class DataExporter { IFormatter formatter = null; public DataExporter(IDataFormatter dataFormatter) { this.formatter = dataFormatter; } } DataExporter exporter = new DataExporter(new XMLFormatter()); There are a few justifications for Dependency Injection, but the primary one is for testing. You might have a case where you have a persistence engine of some sort (such as a database). However, it can be a pain to use a real database when you're running tests repeatedly. So, for your test cases, you would inject a dummy database, so that you don't incur that overhead. Using this example, you can see the difference: we always plan on using a data storage strategy, and it's the one that we pass in (the real DB instance). However, in development and testing, we want to use different dependencies, so we inject different concretions.
