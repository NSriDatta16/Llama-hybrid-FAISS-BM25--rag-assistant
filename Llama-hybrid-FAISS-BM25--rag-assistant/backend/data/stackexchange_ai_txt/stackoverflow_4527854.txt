[site]: stackoverflow
[post_id]: 4527854
[parent_id]: 4526813
[tags]: 
Essentially follow Jean's link from above to the dev blog and take those recommendations. You're going to create a singleton class that lazy loads the right class for the corresponding API level of the device its running on. Functions that are unavailable in a version should handle that use case. public abstract class StaticAct { protected static StaticAct INSTANCE = null; public static StaticAct getInstance() { final int sdkVersion = Integer.parseInt(Build.VERSION.SDK); if(INSTANCE==null) if(sdkVersion This abstract class then will have some abstract methods it defines like public abstract boolean enableStrictMode(); A class can be defined for each api level. EDIT: these are all private classes defined inside of the StaticAct.java file. This allows the lazy loading to work correctly and prevent instantiation from other classes. /* * API Level 3 */ private static class CupcakeStaticAct extends StaticAct The base class (extending the StaticAct) must implement all methods defined in StaticAct. If the method is unavailable for that api level then handle that case, throw an error or return false (or ignore it completely). @Override public void enableStrictMode() { //unavilable in cupcake, do nothing } As your classes increase in api level they only need to implement methods that have changed from previous versions. So the multitouch APIs became available in 2.0, strict mode in 2.3 etc.
