[site]: stackoverflow
[post_id]: 2909537
[parent_id]: 2909515
[tags]: 
Could having v dynamically allocated could mean that an instance of A and its member v are not located together in memory? Yes, it that will be likely. What tools and techniques can be used to test if this fragmentation is a performance bottleneck? cachegrind, shark. If such fragmentation is a performance issue, are there any techniques that could allow A and v to allocated in a continuous region of memory? Yes, you could allocate them together, but you should probably see if it's an issue first. You could use arena allocation, for example, or write your own allocators. Or are there any techniques to aid memory access such as pre-fetching scheme? for example get an object of type A operate on the other member variables whilst pre-fetching v. Yes, you could do this. The best thing to do would be to allocate regions of memory used together near each other. If the size of v or an acceptable maximum size could be known at compile time would replacing v with a fixed sized array like int v[max_length] lead to better performance? It might or might not. It would at least make v local with the struct members. Write code. Profile Optimize.
