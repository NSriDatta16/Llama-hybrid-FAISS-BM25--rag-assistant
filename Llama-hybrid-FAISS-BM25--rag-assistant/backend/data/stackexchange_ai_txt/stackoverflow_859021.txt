[site]: stackoverflow
[post_id]: 859021
[parent_id]: 858035
[tags]: 
I used it once for a rough kind of data polymorphism in a similar way to markh44's answer. I had several different kinds of data that I wanted potentially to use. I created a union of all of those types and a struct that contained the union and a code defining which type was to be used. union { data_type_1; data_type_2; data_type_3; } data_union; typedef struct _TAG_DATA_WRAPPED_ { data_union data; int data_type; //better an enum } WRAPPED_DATA; WRAPPED_DATA loads_of_data[1024]; To answer your question about why this is advantageous: What this allows you to do is easily allocate lists or arrays of different sorts of data and programatically manage their type. The big issue is of course storage space because if the types have very different storage sizes you can waste a lot of space.
