[site]: stackoverflow
[post_id]: 573901
[parent_id]: 573882
[tags]: 
It sounds to me that you want to use indexers rather than an array. Assuming the following enums (Formula 1 based!): public enum Track { Spielberg, Adelaide, Casablanca, Liverpool, Melbourne, Berlin, Sakhir, } public enum Constructor { BMW, Ferrari, McLaren, Toyota, Williams } public enum Driver { Hamilton, Kovalainen, Raikkonen, Nakajima, Glock } the basic structure is as follows: public class Race { int Year { get; set; } Track Track { get; set; } Driver[] Placings { get; set; } public int this[Driver driver] { } // placing by driver } public class Results { YearResults this[int index] { } DriverResults this[Driver index] { } TrackResults this[Track index] { } ConstructorResults this[Constructor index] { } } public class YearResults { YearDriverResults this[Driver index] { } } This of course is a partial implementation but you can do some pretty cool things with indexers this way. Like you can access your information with any combination of values in any order (assuming you set up all the intermediate classes). Its wordier than a multidimensional array or a tuple-keyed Dictionary but I think will give you far more elegant code.
