[site]: stackoverflow
[post_id]: 4285658
[parent_id]: 4281253
[tags]: 
If would define the properties that you need this way: hello world ... than each "property" becomes child node for CustomFields and your properties are now attributes/values for those child nodes, not attributes of the CustomFields node as in the first example. If you have lot of properties and you want to set them more elegantly here are two options that might consider: 1) Use the following structure for the custom section (slightly changed): ... and the following code to define the properties used to retrieve the values: public class CustomFields: ConfigurationSection { [ConfigurationProperty("setting1")] public PropertyElement Setting1 { get { return (PropertyElement)this["setting1"]; } set { this["setting1"] = value; } } [ConfigurationProperty("setting2")] public PropertyElement Setting2 { get { return (PropertyElement)this["setting2"]; } set { this["setting2"] = value; } } } public class PropertyElement : ConfigurationElement { [ConfigurationProperty("value", IsRequired = false)] public String Value { get { return (String)this["value"]; } set { this["value"] = value; } } } Then, to retrieve the values: string setting1value = myCustomFields.Setting1.Value; string setting2value = myCustomFields.Setting2.Value; For details please see How to: Create Custom Configuration Sections Using ConfigurationSection on MSDN. 2) Take a programmatic approach instead of relying on attributes and reflection. ConfigurationSection class or IConfigurationSectionHandler could be used in this case. As a result you will have access from code to the xml node containing the custom section data and will be able to load any kind of XML structure.
