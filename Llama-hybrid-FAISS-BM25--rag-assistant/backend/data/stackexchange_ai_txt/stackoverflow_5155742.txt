[site]: stackoverflow
[post_id]: 5155742
[parent_id]: 
[tags]: 
VCL TTimer stops when a window dragged or pull down menu clicked

I have TTimer enabled and is supposed to run non-stop forever until the user stop it. However, it doesn't work that way. Within OnTimer event, it processes window messages over and over again in milliseconds. For instance, here is a snippet of my code. procedure TDXCommDlg.Timer2Timer(Sender: TObject); begin inherited; if Scanning then begin Timer1.Enabled := false; Timer2.Enabled := false; while not PostMessage(Handle,WM_USER + 10,1234,5678) do; Timer1.Enabled := true; end; end; What happens is this. While the TTimer is enabled and running, you drag any windows of the application or click on pull down menu the TTimer event completely stops working, even though I have taken precautionary steps in other part of the code to prevent this from happening. However, it doesn't seem to be helping. The only way to restart the OnTimer event is to stop and restart the Timer by the user through TButton event. The same code or program works fine under Windows XP compiled with Delphi 7. Currently, I am using Windows 7 and Delphi 2010 to rebuild my system. I will try to give you more information. What I am working on is a copyrighted software. There is a user defined procedure called HandleMsg. It actually processes the serial port messages. HandleMsg is set to the Application event onMessage; Application.onMessage:=HandleMsg(); PostMessage is associated with onMessage event of the application. Whenever PostMessage is called, it fires onMessage event which is set to HandleMsg(). Here more of my code: procedure TDXCommDlg.HandleMsg(var Msg: TMsg; var Handled: Boolean); begin Handled := false; case Msg.message of WM_USER + 10: begin if (Msg.wParam = 1111) and (Msg.lParam = 2222) then begin SendLanMessage; Handled := true; end else if (Msg.wParam = 1234) and (Msg.lParam = 5678) then begin SendMessage; Handled := true; end else begin if (Msg.wParam = 4321) then begin MainFrm.CloseWindow(TViewFrm(Msg.lParam).WinCap); end; end; end; end; { case } end; HandleMsg() responds to PostMessage. Correct me if I am wrong.
