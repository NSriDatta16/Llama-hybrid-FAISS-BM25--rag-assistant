[site]: stackoverflow
[post_id]: 4051154
[parent_id]: 
[tags]: 
How can I organise third-party Windows DLLs into a subfolder in my application folder?

We have an application that depends on a number of groups of third-party DLLs. Unfortunately, none of the writers of these third-party DLLs have named them very consistently so it is hard to see which DLL is part of what group. To try and manage this, we would like to put groups of third-party DLLs in a folder in our application folder rather than along-side the application something like this. --> Application Folder --> Application.exe --> MyDLL1.dll --> MyDLL2.dll --> Third Party 1 DLL folder --> Third Party 1 DLL 1.dll --> Third Party 1 DLL 2.dll --> Third Party 1 DLL 3.dll --> Third Party 2 DLL folder --> Third Party 2 DLL 1.dll --> Third Party 2 DLL 2.dll --> Third Party 2 DLL 3.dll My question is how to get the dynamic linker to find them and load them? We could do this manually with LoadLibrary() and GetProcAddress(), however this is intensely tedious. It looks like we might be able to do this with manifests and "probing", but this seems to be Windows 7 only (we need to work on XP and above). Update We used manifests to do this in the end (thanks @Chris) - there were a couple of other hoops we had to jump through in case anyone is looking for a solution! First, our "assembly" actually has several DLLs, one that we link to that then links to others. All of these DLLs will need the assembly dependency adding to their manifests (you can use mt.exe to do this without having access to the the source code of these DLLs). Second, the assembly needs to go alongside the DLL, not alongside the EXE - our DLL was actually a plugin that was already in a subfolder of the app. Here is our final layout: --> Application Folder --> Application.exe --> Plugins folder --> MyDLL1.dll --> Third Party 1 --> Third Party 1.manifest --> A.dll --> B.dll --> C.dll If MyDLL1.dll is a plugin that links to A.dll, and A.dll links to both B.dll and C.dll then: "Third Party 1.manifest" needs to include all A.dll, B.dll and C.dll as an assembly "MyDLL1.dll" needs a dependency entry in its manifest to "Third Party 1" or the dynamic linker won't find A.dll A.dll needs a dependency entry in its manifest to "Third Party 1" or the dynamic linker won't find B.dll and C.dll The "Third Party 1" folder needs to go alongside "MyDLL1.dll", not alongside "Application.exe" For me, (3) is a bit irritating. You would think that the linker would look in the assembly for dependent DLLs.
