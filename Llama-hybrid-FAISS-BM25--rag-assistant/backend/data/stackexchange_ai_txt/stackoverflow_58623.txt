[site]: stackoverflow
[post_id]: 58623
[parent_id]: 53666
[tags]: 
If I understood you correctly you want to check that the interface is called at least once on any of three specified methods. Looking through the quick reference I don't think you can do that in Rhino Mocks. Intuitively I think you're trying to write a test that is brittle, which is a bad thing . This implies incomplete specification of the class under test. I urge you to think the design through so that the class under test and the test can have a known behavior. However, to be useful with an example, you could always do it like this ( but don't ). [TestFixture] public class MyTest { // The mocked interface public class MockedInterface implements MyInterface { int counter = 0; public method1() { counter++; } public method2() { counter++; } public method3() { counter++; } } // The actual test, I assume you have the ClassUnderTest // inject the interface through the constructor and // the methodToTest calls either of the three methods on // the interface. [TestMethod] public void testCallingAnyOfTheThreeMethods() { MockedInterface mockery = new MockedInterface(); ClassUnderTest classToTest = new ClassUnderTest(mockery); classToTest.methodToTest(); Assert.That(mockery.counter, Is.GreaterThan(1)); } } (Somebody check my code, I've written this from my head now and haven't written a C# stuff for about a year now) I'm interested to know why you're doing this though.
