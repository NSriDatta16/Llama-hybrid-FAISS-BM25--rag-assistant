[site]: stackoverflow
[post_id]: 2895662
[parent_id]: 2895643
[tags]: 
At the moment i'm just scouting around looking for testable pieces of code and then writing some unit tests for that. I somehow feel that is by far not the way it should be done. People say that one of the main benefits of ' test driven development ' is that it ecourages you to design your components with testability in mind: it makes your components more testable. My personal (non-TDD) approach is as follows: Understand the functionality required and implemented: both 'a priori' (i.e. by reading/knowing the software functional specification), and by reading the source code to reverse-engineer the functionality Implement black box tests for all the implemented/required functionality (see for example ' Should one test internal implementation, or only test public behaviour? '). My testing therefore isn't quite 'white box', except that I reverse-engineer the functionality being tested. I then test that reverse-engineered functionality, and avoid having any useless (and therefore untested) code. I could (but don't often) use a code coverage tool to see how much of the source code is exercised by the black box tests.
