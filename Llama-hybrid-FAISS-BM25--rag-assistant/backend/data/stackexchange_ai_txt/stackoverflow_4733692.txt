[site]: stackoverflow
[post_id]: 4733692
[parent_id]: 4733476
[tags]: 
I am getting confused here because I don't get where operator[] on the hash-table conflicts with operator[] on the data-type that you are storing in it. If your hash_table has operator[] this could either be a hash_map where you supply the key to operator[] or it could be that operator[] returns you the contents of a cell. Normally if I do implement my own hash-table I do not directly store the data in the entries but the data plus some "metadata", i.e. info relating to the cell. As your hash-table supports delete you need to ensure that you can still reach any collisions that presumably were moved elsewhere, whatever your strategy now is for finding such a cell. So a deleted cell is available but has a different meaning to one that has never been occupied, as it may be part of a path in a collision course. The hash function is independent, as you say. It is independent therefore of the storage mechanism, and does not call operator[] of the hash-table at all. The hash-table uses the hash-function and a comparison function only, and otherwise uses its own storage policy and collision-handling policy.
