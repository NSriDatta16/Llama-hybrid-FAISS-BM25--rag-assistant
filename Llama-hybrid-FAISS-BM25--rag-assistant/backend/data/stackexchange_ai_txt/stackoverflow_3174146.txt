[site]: stackoverflow
[post_id]: 3174146
[parent_id]: 3174129
[tags]: 
I don't use ActiveRecord because ActiveRecord violates SRP big time . we have our own inhouse custom made ORM. EDIT In our ORM we heavily leverage from C# 3.0 features. We have a library project called Application.Infrastructure that hosts all bases classes for our business objects. We have a validation framework and automatic mapping using attributes. The ORM heavily uses Attributes to automate most of the tedious tasks like mapping and validation. I can add new feature as new aspect in the framework. The TableMapping attribute will let us know which table this object maps to. The DataFieldMapping attribute will let us know which coloumn the property of theobject object maps to. The validation framework lets me validate each field with the help of designated ValidationAttribute . Each business-object has a base class EntityBase and, business-collections have EntityCollectionBase. We use traditional data-sets for database interaction and we have written extension method for EntityBase, EntityCollectionBase, DataRow and DataTable. This exntesion methods will read the mapping meta-data from an object's attributes and perform [two-way] mapping via Reflection. A sample business object would look like this in my application. User.cs [TableMapping("Users")] public class User : EntityBase { #region Constructor(s) public AppUser() { BookCollection = new BookCollection(); } #endregion #region Properties #region Default Properties - Direct Field Mapping using DataFieldMappingAttribute private System.Int32 _UserId; private System.String _FirstName; private System.String _LastName; private System.String _UserName; private System.Boolean _IsActive; [DataFieldMapping("UserID")] [DataObjectFieldAttribute(true, true, false)] [NotNullOrEmpty(Message = "UserID From Users Table Is Required.")] public override int Id { get { return _UserId; } set { _UserId = value; } } [DataFieldMapping("UserName")] [Searchable] [NotNullOrEmpty(Message = "Username Is Required.")] public string UserName { get { return _UserName; } set { _UserName = value; } } [DataFieldMapping("FirstName")] [Searchable] public string FirstName { get { return _FirstName; } set { _FirstName = value; } } [DataFieldMapping("LastName")] [Searchable] public string LastName { get { return _LastName; } set { _LastName = value; } } [DataFieldMapping("IsActive")] public bool IsActive { get { return _IsActive; } set { _IsActive = value; } } #region One-To-Many Mappings public BookCollection Books { get; set; } #endregion #region Derived Properties public string FullName { get { return this.FirstName + " " + this.LastName; } } #endregion #endregion public override bool Validate() { bool baseValid = base.Validate(); bool localValid = Books.Validate(); return baseValid && localValid; } } BookCollection.cs /// /// The BookCollection class is designed to work with lists of instances of Book. /// public class BookCollection : EntityCollectionBase { /// /// Initializes a new instance of the BookCollection class. /// public BookCollection() { } /// /// Initializes a new instance of the BookCollection class. /// public BookCollection (IList initialList) : base(initialList) { } }
