[site]: datascience
[post_id]: 80068
[parent_id]: 80064
[tags]: 
You are asking about multioutput regression. The class you talked about sklearn.linear_model.LinearRegression supports this out of the box. import numpy as np from sklearn.linear_model import LinearRegression # features A = 10 # number of values to predict B = 15 # number of rows in dataset m = 100 x = np.ones((m, A)) y = np.ones((m, B)) model = LinearRegression() model.fit(x, y) sklearn.linear_model.LinearRegression actually just creates B models. However it optimises calculations using vectorisation. It actually is exactly the same as a fully connected layer in a neural network which has no activation function. You can read more about it here: https://machinelearningmastery.com/multi-output-regression-models-with-python/
