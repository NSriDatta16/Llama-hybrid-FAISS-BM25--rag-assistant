[site]: datascience
[post_id]: 124820
[parent_id]: 
[tags]: 
Missing values handling in LightGBM

I'm a bit confused about the handling of missing data by LightGBM. I'm using the R package but my question should not be language-specific. In a regression setting with no categorical feature, I have a dataset containing missing values (represented by NA s) in both features and the target variable. The target variable also contains zeros which are not to be considered as missing, but legitimate zeros. Reading the first answer here and this issue , I understand that the default behavior for missing values in features is (1) numericals are assigned to the side of the ongoing split that most reduces the loss However, what about the missing values in the target variable? Running a few tests, I came to the conclusion that they are replaced by zeros, which is a rather dangerous behavior without warning. Reading this documentation , the default is zero_as_missing=false , which means that (2) the unrecorded values in sparse matrices (and LightSVM) are treated as zeros So I understand that NA's (in both features and target) are replaced by zeros. Isn't it in contradiction with the quotation (1)? If we set zero_as_missing=true , then (3) NA and zeros (including unrecorded values in sparse matrices (and LightSVM)) are treated as missing I understand that both zeros and NAs are considered missing and treated as in (1). But What if I don't want zeros to be treated as missing? Isn't it the default behavior according to the first link? Can you explain, for both zero_as_missing options, for features and target, what happens to missing values during training? Of course the easy way to go would be to pass a drop_na to the entire dataset but it's not satisfying. EDIT It seems that LightGBM is indeed replacing NA's in the target by zeros: https://github.com/microsoft/LightGBM/issues/4483 , and I agree that there should be a warning. However I'm still not sure about what the documentation is saying.
