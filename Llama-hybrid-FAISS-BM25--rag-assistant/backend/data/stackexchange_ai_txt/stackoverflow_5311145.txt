[site]: stackoverflow
[post_id]: 5311145
[parent_id]: 5310799
[tags]: 
I do not know how exactly have you organized/conceived stuff in your system although from the approaches that I have used, I've found out that the most efficient way of handling stuff is by conceiving objects as services for example: How many times in your software will the giveBirth method be called? once, twice more ? why more? Although let's say that your user object must expose methods which can not be called in an exact place every time or you want it to have a more general effect. Create an interface(or interfaces) with the methods headers. Create a SINGLETON that implements the interface (all the interfaces). That is because I assume you will never have more then an instance of an user during one request.(fact that is also available for the session). in the singleton you will have an init static method which can receive an id in order to create the user instance. You will have something like this in the index as I do assume there is a single entry to your application UserSingleton::init($_SESSION["id"]); after the request process initializes the user object you can use this : $user = UserSingleton::getInstance(); // will return the instance of singleton $user->setBanned();// or whatever you need to call; Obs: you can avoid the init method by creating the getInstanceMethod like this: public function getInstance(){ if(!isset(self::$instance) { self::$instance = new UserSingleton($_SESSION["user_id"]) ; } return self::$instance; } Take note that this must not handle stuff like interaction with the database, this should receive/send data to/from the database through external stuff. It is a helper not a business model/object. That is another concern.
