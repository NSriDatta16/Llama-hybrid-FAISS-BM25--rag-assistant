[site]: stackoverflow
[post_id]: 1887114
[parent_id]: 1883231
[tags]: 
Couple of things here: If I understand you correctly, you're trying store an array whose contents are the assignment objects. If you want to serialize these objects for storage into NSUserDefaults, the Assignment objects themselves need to conform the NSCoding protocol by overriding these methods: - (void)encodeWithCoder:(NSCoder *)encoder; - (id)initWithCoder:(NSCoder *)decoder; Since you didn't post the code for your Assignment objects, dunno if you did this properly or at all. If you have you should be able to encode the object. See the Archives and Serializations Programming Guide for more. As for NSUserDefaults, by my read, you're basically trying to store your application's object model there. Not the best idea. NSUserDefaults is best suited for use with light-weight persistent data: basic preferences, strings, scraps of universal data. What I would do is write out your archived data to a file and load it when your view loads. Here's some code from Beginning iPhone Development on that subject: Creating an archive from an object or objects that conforms to NSCoding is relatively easy. First, we create an instance of NSMutableData to hold the encoded data and then create an NSKeyedArchiver instance to archive objects into that NSMutableData instance: NSMutableData *data = [[NSMutableData alloc] init]; NSKeyedArchiver *archiver = [[NSKeyedArchiver alloc] initForWritingWithMutableData:data]; After creating both of those, we then use key-value coding to archive any objects we wish to include in the archive, like this: [archiver encodeObject:myObject forKey:@”keyValueString”]; Once we’ve encoded all the objects we want to include, we just tell the archiver we’re done, write the NSMutableData instance to the file system, and do memory cleanup on our objects. [archiver finishEncoding]; BOOL success = [data writeToFile:@”/path/to/archive” atomically:YES]; [archiver release]; [data release]; To reconstitute objects from the archive, we go through a similar process. We create an NSData instance from the archive file and create an NSKeyedUnarchiver to decode the data: NSData *data = [[NSData alloc] initWithContentsOfFile:path]; NSKeyedUnarchiver *unarchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:data]; After that, we read our objects from the unarchiver using the same key that we used to archive the object: self.object = [unarchiver decodeObjectForKey:@”keyValueString”]; You'd also need to get your application's documents directory to save and load the files. It's a wildly useful book, full of drop in code snippets. The chapter on persistence might be helpful for you. You might be much happier using Core Data for this task, come to think of it.
