[site]: stackoverflow
[post_id]: 2942982
[parent_id]: 2936013
[tags]: 
One technique worth looking at if the sort of filter-and-threshold approach Carl suggests won't suffice is Cross Correlation . The essence of this is pretty simple: if two data sets are reasonably similar, their dot product will be maximimised when they align (because the highest values will be multiplied together). So you can get a good estimate of how to line them up by calculating this product at each offset and choosing the one that gives the highest result. In a case like yours, the idea would be to have an "ideal" version of the curve shape you're looking for -- either generated from theory/simulation or by averaging the results of a number of good experimental curves identified and aligned by eye -- and compare it against the experimental data. For simplicity, let's assume that the data set is longer than the ideal and has enough empty space at either end that we can ignore any boundary issues. Since you are looking for one specific event, it should be trivial to cut down your ideal to comply with this assumption. Crudely coded in Java, then, the process might go something like this: int offset ( double[] data, double[] ideal ) { double cMax = -Double.MAX_VALUE; int tMax = 0; for ( int t = 0; t cMax ) { cMax = c; tMax = t; } } return tMax; } Obviously, there are plenty of situations in which this approach can fail, particularly if there is a significant amount of non-independent noise or if there are periodicities in the signal that give rise to aliasing . Also, this example throws away a lot of information to focus just on an absolute maximum, which may be error-prone if there isn't a large, narrow peak in the cross correlation. But from your description it seems like your problem could be fairly amenable to something along these lines.
