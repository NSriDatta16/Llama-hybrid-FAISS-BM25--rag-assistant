[site]: stackoverflow
[post_id]: 1450826
[parent_id]: 1450788
[tags]: 
I would advocate a combination of these approaches, as long as you manage to implement it in an elegant way (I have seen this done in both elegant and horrendous implementations): Have a data structure for configuration that can implement settings sub-sets (in Perl it is extremely simple with super-imposed hashes, in other languages it's a bit more wordy but overlaying maps on top of each other works as well). To try to be more precise, your data structures will be A global Singleton Configuraton map A "passed as parameter" local configuration map Have a Configuration loader class, which can: Take "passed as parameter" local configuration map Take a set of keys needed by the component Superimpose the local map onto global configuration map Allow the components to query out the values from combined map. This way, each caller of the services has a complete freedom to either live in a worry-free word and let each service take care of its own configuration needs, or for a more controllable behavior, has an option of passing specific configuration settings it wants to control to the service (either creating the settings values by hand, or cloning data subset from global configuration and adjusting it). This has major testing benefit, since the test framework can pass specific configuration local overrides needed for each test.
