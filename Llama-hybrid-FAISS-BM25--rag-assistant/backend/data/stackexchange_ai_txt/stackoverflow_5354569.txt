[site]: stackoverflow
[post_id]: 5354569
[parent_id]: 5353810
[tags]: 
In one of your comments you said: "Also I checked various bind values. With bind variables I get some FULL TABLE SCANS, whereas with hard-coded values, the plan looks a lot better." There are two paths. If you pass in NULL for the parameters then you are selecting all records. Under those circumstances a Full Table Scan is the most efficient way of retrieving data. If you pass in values then indexed reads may be more efficient, because you're only selecting a small subset of the information. When you formulate the query using bind variables the optimizer has to take a decision: should it presume that most of the time you'll pass in values or that you'll pass in nulls? Difficult. So look at it another way: is it more inefficient to do a full table scan when you only need to select a sub-set of records, or to do indexed reads when you need to select all records? It seems as though the optimizer has plumped for full table scans as being the least inefficient operation to cover all eventualities. Whereas when you hard code the values the Optimizer knows immediately that 10 IS NULL evaluates to FALSE, and so it can weigh the merits of using indexed reads for find the desired sub-set records. So, what to do? As you say this query is only run once a month I think it would only require a small change to business processes to have separate queries: one for all organisations and one for a sub-set of organisations. "Btw, removing the :R1 IS NULL clause doesn't change the execution plan much, which leaves me with the other side of the OR condition, :R1 Okay, so the thing is you have a pair of bind variables which specify a range . Depending on the distribution of values, different ranges might suit different execution plans. That is, this range would (probably) suit an indexed range scan... WHERE org.id BETWEEN 10 AND 11 ...whereas this is likely to be more fitted to a full table scan... WHERE org.id BETWEEN 10 AND 1199999 That is where Bind Variable Peeking comes into play. (depending on distribution of values, of course).
