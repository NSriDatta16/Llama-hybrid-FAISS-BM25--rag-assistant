[site]: datascience
[post_id]: 75767
[parent_id]: 62369
[tags]: 
Yes, you can use tabular regression algorithms for forecasting as long as you make sure you properly evaluate your forecasting algorithms (i.e. on future, not past data). The general approach of how to adapt regression algorithms to forecasting problems is described here . You can also build hybrid machine learning models. For example, you may want to first de-seasonalize or detrend the data before applying your regression algorithm. Or you may want to fit a machine learning model on the residuals of a classical forecasting algorithm like ARIMA. If you're interested, we're developing a toolbox that extends scikit-learn for exactly these use cases. Below is a simple example how to use sktime . We've also done some comparative benchmarking of these approaches on the M4 study. import numpy as np from sktime.datasets import load_airline from sktime.forecasting.compose import ReducedRegressionForecaster from sklearn.svm import SVR from sktime.forecasting.model_selection import temporal_train_test_split from sktime.performance_metrics.forecasting import smape_loss y = load_airline() # load 1-dimensional time series y_train, y_test = temporal_train_test_split(y) fh = np.arange(1, len(y_test) + 1) # forecasting horizon regressor = SVR() # any other scikit-learn regressor would work forecaster = ReducedRegressionForecaster(regressor, window_length=10) forecaster.fit(y_train) y_pred = forecaster.predict(fh) print(smape_loss(y_test, y_pred)) >>> 0.139046791779424
