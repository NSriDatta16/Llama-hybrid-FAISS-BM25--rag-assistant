[site]: crossvalidated
[post_id]: 314401
[parent_id]: 
[tags]: 
Python: Gaussian Copula or inverse of cdf

Let's say I have a column x with uniform distributed values. To these values, I applied a cdf-function. Now I want to calculate the Gaussian Copula, but I can't find the function in python. I read already, that Gaussian Copula is something like the "inverse of the cdf function". The reason why I'm doing it comes from this paragraph: A visual depiction of applying the Gaussian Copula process to normalize an observation by applying = Phi^-1(()). Calculating () yields a value ∈ [0, 1] representing the proportion of shaded area at the left. Then Phi^−1() yields a value by matching the shaded area in a Gaussian distribution. I need your help, does everyone has an idea how to calculate that? I have 2 ideas so far: 1) gauss = 1/(sqrt(2*pi)*s)*e**(-0.5*(float(x-m)/s)**2) --> so transform all the values with this to a new value 2) norm.ppf(array,loc,scale) --> So give the ppf function the mean and the std and the array and it will calculate me the inverse of the CDF... But I doubt #2 The thing is n.cdf(n.ppf(0.95)) Is not what I want. The idea why I'm doing it, is transforming a not normal/gaussian distribution to a normal distribution. Like here: Transform from a non gaussian distribution to a gaussian distribution with Gaussian Copula Any other ideas or tipps? Thank you very much :) EDIT: I found 2 links which are quite usefull: 1. How to transform an arcsine distribution to a normal distribution? 2. Transformation Chi-squared to Normal distribution In this posts its said that you have to All the details are in the answer already - you take your random variable, and transform it by its own cdf ..... yielding a uniform result. Thats true for me. If I take a random distirbution and apply the norm.cdf(data, mean,std) function, I get a uniform distributed cdf Compare: import pandas as pd data = [1.5]*7 + [2.5]*2 + [3.5]*8 + [4.5]*3 + [5.5]*1 + [6.5]*8 cdf=n.cdf(data, n.mean(data),n.std(data)) print cdf But How can I do the You then transform again, applying the quantile function (inverse cdf) of the desired distribution (in this case by the standard normal quantile function /inverse of the normal cdf, producing a variable with a standard normal distribution). Because when I use f.e. the norm.ppf function, the values are not reasonable EDIT : This link could be useful too enter link description here SO FOR NOW THERE ARE 3 DIFFERENT IDEAS, AND NONE GIVE ME THE RESULTS I NEED: inverse transform method Box-Mueller Method invgauss ppf of cdf gauss = 1/(sqrt(2*pi)*s)*e**(-0.5*(float(x-m)/s)**2)
