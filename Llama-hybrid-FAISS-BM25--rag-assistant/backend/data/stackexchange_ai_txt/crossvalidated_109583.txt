[site]: crossvalidated
[post_id]: 109583
[parent_id]: 109566
[tags]: 
You might want to try an Erlang distribution. Here are a couple of excerpts from the page: The distribution is a continuous distribution, which has a positive value for all real numbers greater than zero, and is given by two parameters: the shape $k$ , which is a positive integer, and the rate $\lambda$ , which is a positive real number Events that occur independently with some average rate are modeled with a Poisson process. The waiting times between $k$ occurrences of the event are Erlang distributed. I am not sure if there is a good intuitive explanation about why Erlang would fit here but I'll give it a shot: if you think of each task consisting of smaller subtasks, then you can model this in three ways: Each subtask takes about same amount of time (so using the notation of the Wikipedia page, the $\mu$ is the same for all tasks but the larger estimates have higher number of subtasks (the $k$ in the Erlang formula). The converse: each size task has the same number of subtasks but each subtask is longer. A combination of (1) and (2). Just be careful in fitting that you have enough historical data to build a decent model without overfitting and kudos to you for applying statistics to Scrum project estimation!
