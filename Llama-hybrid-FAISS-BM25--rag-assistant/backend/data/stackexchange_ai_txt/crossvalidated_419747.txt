[site]: crossvalidated
[post_id]: 419747
[parent_id]: 
[tags]: 
Optimal Threshold On Single Input

Suppose we have a sensor that measures "how red" an object is. Using this single input, we would like to classify whether or not the object is round. We have a data set comprised of tuples where the first element is the quantity describing "how red" something is and the second element is 1 for round and 0 if not round. Example data set: "how red" | Round? ---------------------- 3 | 0 255 | 1 43 | 0 My friend decided that she wanted to use a threshold on the "how red" input feature to determine whether or not an object is round to the best of her ability. She used this feature and label to train a logistic regression classifier, determined a threshold on the output of the sigmoid function that maximized her F1 score, and then used that threshold to solve for a corresponding value of "how red". She uses this value of "how red" as a threshold to identify if objects are round or not. Does this approach make sense? Why does/n't this approach make sense? To me, the right and simple approach would have been to pick a threshold on the single input feature that maximized the F1 score rather than trying to model the relationship between the input variable and label with an affine transform + a nonlinear transform while maximizing F1 ... then solving for the threshold. To be more clear, I will write the approach my friend took below. Friends Method log_reg.fit(x=data['how_red'], y=data['is_round']) sigmoid_out = log_reg.predict(data['how_red']) # find threshold on logistic regression output that maximizes F1 score lr_thresh = findLRThreshold(sigmoid_out) # Given the fitted model and the threshold that maximizes F1 score # solve for the corresponding value of 'how_red' how_red_thresh = findHowRedThreshold(lr_thresh, log_reg) The function findHowRedThreshold(lr_thresh, log_reg) solves for the value of $x$ , a value of how_red, in the equation below since all other variables are defined: $$lr\_thresh = \frac{1}{1+e^{-(w0*x+b)}}$$
