[site]: stackoverflow
[post_id]: 2296452
[parent_id]: 2296423
[tags]: 
SELECT * FROM ( SELECT username FROM friends START WITH username = 'myname' CONNECT BY friendname = PRIOR username AND level Update the level as necessary: you may search for the third layer friends etc. If the friendship relationship is symmetric, you should make the following query: WITH q AS ( SELECT username, friendname FROM friends UNION ALL SELECT friendname, username FROM friends ), f AS ( SELECT friendname, level FROM q START WITH username = 'Thomas' CONNECT BY NOCYCLE username = PRIOR friendname ) SELECT * FROM f WHERE friendname = 'Jo' AND rownum = 1 This query can be made much faster if you denormalize your table: store two records per friendship, like this: CREATE TABLE dual_friends (orestes NOT NULL, pylades NOT NULL, CONSTRAINT pk_dualfriends_op PRIMARY KEY (orestes, pylades)) ORGANIZATION INDEX AS SELECT username, friendname FROM friends UNION ALL SELECT friendname, username FROM friends Then you can just replace the CTE above with the dual_friends : WITH f AS ( SELECT pylades, level FROM dual_friends START WITH orestes = 'Thomas' CONNECT BY NOCYCLE orestes = PRIOR pylades AND level , which will use the index and be much more efficient, especially if you limit the level to some reasonable value.
