[site]: stackoverflow
[post_id]: 1703201
[parent_id]: 1703081
[tags]: 
I think it depends on how your going to access your data. Changes are your always going to look at a topic with its comments and vice versa for like ( 32 ) Comments UI elements. Therefore your topic becomes an Aggregate Root and you only need a single repository for this approach. One thing to consider is if you have many small things you only need very narrow access to like a list of options for a dropdown you really don't want a full blown repository for that. The problem becomes that once you pass 20 entities you'll end up having 20 interfaces and 20 repositories to think about in your solution. Its very pragmatic to only have repositories for your aggregate roots and keep other value type repositories together. For example a DropdownlistRepository or something. Finally your at the stage of your project were performance concerns just don't matter and retrieving an entire object graph for the "Topic" probably isn't that bad performance wise. Keep things simple, if you using a ORM mapper it should be able to handle giving you the Topic every time you need it with all its child entities lazily loaded.
