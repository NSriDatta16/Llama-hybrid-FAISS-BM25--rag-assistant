[site]: crossvalidated
[post_id]: 4317
[parent_id]: 4258
[tags]: 
Here is one approach at the automation. Feedback much appreciated. This is an attempt to replace initial visual inspection with computation, followed by subsequent visual inspection, in keeping with standard practice. This solution actually incorporates two potential solutions, first, calculate burn-in to remove the length of chain before some threshold is reached, and then using the autocorrelation matrix to calculate the thinning interval. calculate a vector of the maximum median Gelman-Rubin convergence diagnostic shrink factor (grsf) for all variables in the find the minimum number of samples at which the grsf across all variables goes below some threshold, e.g. 1.1 in the example, perhaps lower in practice sub sample the chains from this point to the end of the chain thin the chain using the autocorrelation of the most autocorrelated chain visually confirm convergence with trace, autocorrelation, and density plots The mcmc object can be downloaded here: jags.out.Rdata # jags.out is the mcmc.object with m variables library(coda) load('jags.out.Rdata') # 1. calculate max.gd.vec, # max.gd.vec is a vector of the maximum shrink factor max.gd.vec --update-- As implemented in R the computation of the autocorrelation matrix is slower than would be desirable (>15 min in some cases), to a lesser extent, so is computation of the GR shrink factor. There is a question about how to speed up step 4 on stackoverflow here --update part 2-- additional answers: It is not possible to diagnose convergence, only to diagnose lack of convergence (Brooks, Giudici, and Philippe, 2003) The function autorun.jags from the package runjags automates calculation of run length and convergence diagnostics. It does not start monitoring the chain until the Gelman rubin diagnostic is below 1.05; it calculates the chain length using the Raftery and Lewis diagnostic. Gelman et al's (Gelman 2004 Bayesian Data Analysis, p. 295, Gelman and Shirley, 2010 ) state that they use a conservative approach of discarding the 1st half of the chain. Although a relatively simple solution, in practice this is sufficient to solve the issue for my particular set of models and data. #code for answer 3 chain.length
