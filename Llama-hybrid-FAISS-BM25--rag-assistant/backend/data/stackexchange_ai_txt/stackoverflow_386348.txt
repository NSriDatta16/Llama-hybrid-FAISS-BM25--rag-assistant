[site]: stackoverflow
[post_id]: 386348
[parent_id]: 73078
[tags]: 
Your question doesn't state your programming language of choice, but mine is C# so I'll exemplify using that. This is however just a refinement over Gilligans answer by using anonymous delegates to inline your test code. I'm all in favor of making tests as readable as possible, and to me that means all test code within the test method; // Arrange var car = new Car(); string changedPropertyName = ""; car.PropertyChanged += delegate(object sender, PropertyChangedEventArgs e) { if (sender == car) changedPropertyName = e.PropertyName; }; // Act car.Model = "Volvo"; // Assert Assert.AreEqual("Model", changedPropertyName, "The notification of a property change was not fired correctly."); The class I'm testing here implements the INotifyPropertyChanged interface and therefore a NotifyPropertyChanged event should be raised whenever a property's value has changed.
