[site]: stackoverflow
[post_id]: 5454316
[parent_id]: 5350816
[tags]: 
This solution is practically what everyone else has commented on, but this is a more elegant way of doing replacements, and its what I used in an application. Pretty much you have parameters stored in your database that are dynamic. For example I could see [somehost] changing even when you are in a development mode vs a production mode. What I created to resolve this is a class that mass replaces variables for me, I call this class Replacer (code below). I suggest you store [somehost] and all your [...] parameters in your database as parameters such as: [x], [y], [z]. If you can place x, y z, in an enum and save their ordinal number in the database, such as [1], [2], [3] in your database, then you will saving lots of space on your db drives. Later create a Properties object that statically creates an populates a static Replacer, and run the replacer on all the data that comes out of your database. public class Replacer { private final Map replacements = new HashMap (); public Replacer () { replacements.put("''", "\""); } public void addReplacement (String replaceWhat, Object replaceWith) { replacements.put(replaceWhat, replaceWith); } public String replace ( Object contentToReplace ) { String output = contentToReplace.toString(); for (String replacement : replacements.keySet() ) { output = output.replace(replacement, replacements.get(replacement).toString() ); } return output; } public static void main (String[] args) throws Exception { testReplaceTwoSingleQuote(); } public static void testReplaceTwoSingleQuote () throws Exception { Replacer rep = new Replacer(); assert rep.replace( "And Mary said, ''Hello Bob''. ").equals("And Mary said, \"Hello Bob\"."); } }
