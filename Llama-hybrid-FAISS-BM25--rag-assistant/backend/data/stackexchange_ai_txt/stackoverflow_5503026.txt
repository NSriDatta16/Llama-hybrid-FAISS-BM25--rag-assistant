[site]: stackoverflow
[post_id]: 5503026
[parent_id]: 5502199
[tags]: 
You never initialized the vales form array. 1. Integer[] array = new Integer[5]; Here you have reserved space in memory for five Integer objects let say five boxes with an unique addresses; for(Integer x :array) { x = -1; } Here the things are quite more complicated, what you are actually doing is this 2.1 You allocate memory (another box) for Integer object called x 2.2 You assign (put) value* from table (which is null) to it; 2.3 You assign value -1** to it; 2.4 You repeat from step 2.2 till reserved memory is not finished ( five times). So the main problem is that you never assign the values into array in other word you are not inserting anything into boxes. To solve this situation you should allocate to each box a value and then you can use them as you wish. for(int i=0; i Now in each loop we are referring to boxes and there we store the value; *By value I mean the addresses of those boxes because you are using reference type . **You also are creating and box in memory and allocate an address for this -1 (that is retrieve from the cache). And in advance the compiler change that x=-1; into x = Integer.valueOf(-1); Next thing is the method printArray(Object[] array): You should remember that operations on are very let say expensive because the use a lot of memory. What you are doing there is called concatenation and usually the are not welcome. The next thing what is wrong is the division of labor You have called the method print array but you are also creating there the string that in fact will be printed. Good approach would be to separate this operations. public static String arrayToString (Object... array) { //... varags if(array == null) { return "null"; //If is null we just return String null. } int max = array.length - 1; if(max == -1) { //We check that array is empty length return "[]"; } StringBuilder sb = new StringBuilder("["); int i = 0; while(i Ps. For simpler way you could use: Arrays.fill(array,new Integer(-1)); Arrays.toString(arrays);
