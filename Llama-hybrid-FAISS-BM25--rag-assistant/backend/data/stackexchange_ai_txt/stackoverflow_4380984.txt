[site]: stackoverflow
[post_id]: 4380984
[parent_id]: 4370116
[tags]: 
There might be libraries to help with bits of the type checker especially if you do really want a type checker and not type inference. For instance, there have been libraries embedding logic programming in Haskell - at 10,000 feet it seems a good bit easier to write a type checker using logic programming than functional programming (for example Chameleon mentioned by shapr above is based on the CHR language embedded in Haskell). That said, embedded logic programming in Haskell is a big step with probably little documentation if you've never written a type checker before. Similarly attribute grammars (i.e. UUAG) are a pleasant formalism supplying quite a bit of the machinery you would need to write yourself, but they might put you it a place with few signposts if you've never used one previously. Unless you've written a type checker before, maybe it is better not to worry about libraries and work through the process from scratch. The "Typing Haskell in Haskell" paper by Mark P. Jones is probably as good a start point as any.
