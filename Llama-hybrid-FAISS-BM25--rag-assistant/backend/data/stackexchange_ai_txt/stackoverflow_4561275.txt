[site]: stackoverflow
[post_id]: 4561275
[parent_id]: 4559681
[tags]: 
The 4 bit swatches have RGB values, when you mix two of these with a dither character, the RGB values would be a weighted average of each of the separate RGB elements. The weight would depend on the dither pattern used, so for the chequer-board pattern each RGB value would have equal weight, so red+green becomes: [255,0,0] + [0,128, 0] = [(255+0)/2, (0+128)/2, (0+0)/2] = [127, 64, 0] (a shade of brown) The weightings for the other patterns would be determined by the proportion of foreground pixels vs background pixels. Using that to efficiently find a nearest colour is probably the hard part! With three characters, 16 colours and two foreground/background options, there is a large number of combinations, though I imagine there might be large gaps in the gamut. If you only need to translate from a 256 colour palette to one of these combinations rather then from full RGB, then a simple solution would be to write a program to perhaps exhaustively search for a best fit combination of foreground, background, and dither for each of the 256 colours and generate a look-up table that can then be used in the final application to produce a direct lookup. Of course this fixed look-up table approach would only work is the 256 colour palette is also fixed (which is not necessarily the case). If it is not, then you may need to determine a more efficient method of finding the best match colour. I am sure that it is possible to be smarter than a mere exhaustive search.
