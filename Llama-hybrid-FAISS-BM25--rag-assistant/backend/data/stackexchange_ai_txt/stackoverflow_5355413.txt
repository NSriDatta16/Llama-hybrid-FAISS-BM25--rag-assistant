[site]: stackoverflow
[post_id]: 5355413
[parent_id]: 
[tags]: 
How to dynamically define a class in C# PowerShell Cmdlet

I have some data I'm getting from a datasource which is a bunch of name/value pairs that I store in a Dictionary . I want to define a class on the fly, with properties that map to the key/value pairs from the dictionary and methods based on the type of data it represents. This would allow the user of the cmdlet to access the values as properties of an object and also invoke methods on it. I see an example of this with Get-WmiObject. It returns instances of ManagementObject (which is basically a generic property bag) but the user is able to access the properties and invoke methods on it directly (i.e. without having to call the GetPropertyValue/InvokeMethod methods on ManagementObject). PS C:\temp> $comp = Get-WmiObject Win32_ComputerSystem PS C:\temp> $comp | Get-Member TypeName: System.Management.ManagementObject#root\cimv2\Win32_ComputerSystem Name MemberType Definition ---- ---------- ---------- JoinDomainOrWorkgroup Method System.Management.ManagementBaseObject JoinDomainO Rename Method System.Management.ManagementBaseObject Rename(Syst SetPowerState Method System.Management.ManagementBaseObject SetPowerSta UnjoinDomainOrWorkgroup Method System.Management.ManagementBaseObject UnjoinDomai AdminPasswordStatus Property System.UInt16 AdminPasswordStatus {get;set;} AutomaticManagedPagefile Property System.Boolean AutomaticManagedPagefile {get;set;} AutomaticResetBootOption Property System.Boolean AutomaticResetBootOption {get;set;} ... etc ... How do I do this with my own objects? UPDATE Accepting Keith's answer which is a general .NET framework approach for generating code dynamically. This should work for my scenario although I think it might be overkill. I was hoping someone would provide a clear example of doing this using the facilities provided by PowerShell. It seems there should be a way to create a class dynamically by extending the PSObject , PSProperty , and PSMethod classes described in the Powershell SDK . Unfortunately the documentation around this seems pretty poor with a lot of ridiculous statements like " Although it is possible to derive from this class, there is no established scenario for doing this and any attempt to do so may result in unexpected behavior. " What made it worse is that all the links in MSDN explaining the PowerShell Extended Type System seem to be bad! And the only examples I've seen on the web is how to do this from a PowerShell script, not for people developing cmdlets using C# and the SDK. Hello, anyone from the PowerShell team listening?
