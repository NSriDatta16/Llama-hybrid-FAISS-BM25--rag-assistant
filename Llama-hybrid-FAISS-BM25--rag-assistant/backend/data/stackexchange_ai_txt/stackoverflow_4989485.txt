[site]: stackoverflow
[post_id]: 4989485
[parent_id]: 
[tags]: 
Java button inversion

There is a mysterious inversion happening when i disable buttons for users to press or not press. the project is to setup a battleship game and have one side be for a computer and the other for the user. When i have the so the user can press both buttons the ships show up properly on the buttons as hits. but when the computer shoots the buttons a mysteriously inverted 90 degrees south. here is the main part of the code and the AI class too import java.awt.BorderLayout; import java.awt.Color; import java.awt.FlowLayout; import java.awt.Font; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.io.File; import java.io.FileNotFoundException; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JTextArea; /** * @author Alex Larson * Project #3 * This is the main part of the BattleshipGUI. * This class has several inner classes that are listeners. * This class also has the main method in it. * This class sets up the entire GUI. */ public class BsGui extends JFrame { /**Array of FireButtons for the player */ FireButton play[][] = null; /**Array of FireButtons for the player */ FireButton opp[][] = null; /**A static constant for the player's BattleshipBoard */ public static BattleshipBoard playerB; /**A static constant for the opponent's (or computer's) BattleshipBoard */ public static BattleshipBoard opponentB; /**A static constant for a computer AI object */ public static ComputerAI AI; /**A static constant that stores the computers designated AI */ public static char computer; /**public int for passing around the shot the computer takes */ public int[][] compShot; /**BorderLayout for the JFrame */ public BorderLayout br; /**GridLayout for main JPanel */ public GridLayout gr; /**GridLayout for both FireButton holding JPanels */ public GridLayout gr2; /**GridLayout for bottom JPanel */ public GridLayout gr3; /**FlowLayout: not used */ public FlowLayout fl; /**JPanel that has the players FireButtons in it */ public JPanel playB; /**JPanel that has the opponent's (or computer's) FireButtons in it */ public JPanel oppB; /**JPanel that is not needed but hold the 2 FireButton holding JPanels */ public JPanel main; /**JPanel that holds the title JLabel */ public JPanel top; /**JPanel that hold shipsLeft button and ships JLabel */ public JPanel bottom; /**Another not used, unneeded JPanel */ public JPanel left; /**Another not used, unneeded JPanel */ public JPanel right; /**JButton used to show user number of ships left */ public JButton shipsLeft; /**JLabel used to show the title of the game */ public JLabel title; /**JLabel used when game is over */ public JLabel win; /**JLabel used to the user the number of ships left */ public JLabel ships; /**Font used to change styles text */ public Font font = null; /** * Constructor for BsGui. It creates a GUI with JLabel as a center * title and has 2 JPanels that hold arrays of FireButtons. It * also sets up a button at the bottom that gives you the * number of ships left for the players board, not the computers board. */ public BsGui(){ //Instantiating Section play = new FireButton[10][10]; opp = new FireButton[10][10]; br = new BorderLayout(10,10); gr = new GridLayout(1,2); gr2 = new GridLayout(10,10); gr3 = new GridLayout(2,2); fl = new FlowLayout(); playB = new JPanel(); oppB = new JPanel(); main = new JPanel(); top = new JPanel(); bottom = new JPanel(); left = new JPanel(); right = new JPanel(); shipsLeft = new JButton(); title = new JLabel(); win = new JLabel(); ships = new JLabel(); font = new Font("Veranda", Font.BOLD, 20); compShot = new int[2][1]; //Setting parameters for GUI main.setBackground(Color.white); main.setLayout(gr); top.add(title); playB.setBackground(Color.cyan); playB.setName("Player Board"); playB.setLayout(gr2); oppB.setBackground(Color.magenta); oppB.setName("Computer Board"); oppB.setLayout(gr2); shipsLeft.setText("How Many Ships Left"); shipsLeft.setVisible(true); title.setText("Battleship"); title.setFont(font); this.setTitle("Battlseship"); this.setSize(1100, 700); this.setLayout(br); //Adding Listeners shipsLeft.addActionListener(new ShipsLeftListener()); //Adding components to GUI section this.add(main, BorderLayout.CENTER); this.add(top, BorderLayout.NORTH); this.add(bottom, BorderLayout.SOUTH); this.add(left, BorderLayout.WEST); this.add(right, BorderLayout.EAST); this.addFireBottonsToArray(); this.addFireButtonsPlay(); this.addFireButtonsOpp(); main.add(playB); main.add(oppB); bottom.add(shipsLeft); bottom.add(ships); } /** * This method adds new FireButtons to each part of the * FireButton arrays. The first for loop adds buttons for the * player. The second for loop adds buttons for the computer * and makes them not click-able. */ private void addFireBottonsToArray(){ //Adds FireButtons to play array for(int i = 0; i
