[site]: stackoverflow
[post_id]: 2794755
[parent_id]: 2793171
[tags]: 
Q1: Don't make changes to code then write a test. Write a test first for the expected behavior. Then you can do whatever you want to the SUT. Q2: You don't make the changes in your Product Gateway to change the owner of the product. You make the change in your model. But if you insist, then listen to your tests. They are telling you that you have the possibility for products to be pulled from the gateway that have the incorrect owners. Oops, Looks like a business rule. Should be tested for in the model. Also your using a mock. Why are you testing an implementation detail? The gateway only cares that the _productRepository.GetProduct(id) returns a product. Not what the product is. If you test in this manner you will be creating fragile tests. What if product changes further. Now you have failing tests all over the place. Your consumers of product (MODEL) are the only ones that care about the implementation of Product . So your gateway test should look like this: [Test] public void GetProduct_return_the_same_product_as_getProduct_on_productRepository() { var product = EntityGenerator.Product(); _productRepositoryMock.Setup(pr => pr.GetProduct(product.Id)).Returns(product); _productService.GetProduct(product.Id); _productRepositoryMock.VerifyAll(); } Don't put business logic where it doesn't belong! And it's corollary is don't test for business logic where there should be none.
