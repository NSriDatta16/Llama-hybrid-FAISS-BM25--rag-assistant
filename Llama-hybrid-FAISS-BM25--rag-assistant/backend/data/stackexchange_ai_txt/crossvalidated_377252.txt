[site]: crossvalidated
[post_id]: 377252
[parent_id]: 
[tags]: 
What is subsampling for a regression problem

In the purpose of reducing the impact of excessive number of zeros inside a regression problem, someone suggested me to try subsampling the original data a bit, but I did not find any good source for subsampling data for a regression problem. Could someone explain to me what is 'subsampling'? Is there an optimal way to subsampling? THE ORIGINAL PROBLEM ipdb> np.count_nonzero(test==0) / len(ytrue) * 100 76.44815766923736 I have a datafile counting 24000 prices where I use them for a time series forecasting problem. Instead of trying predicting the price, I tried to predict log-return, i.e. log(P_t/P_P{t-1}) . I have applied the log-return over the prices as well as all the features. The prediction are not bad, but the trend tend to predict zero. As you can see above, ~76% of the data are zeros. That picture is probably the best prediction I have on the log-return, i.e log(P_t/P_{t-1}) . Although it is not bad, the remaining predictions tend to predict zero. As you can see in the above question, there is too many zeros. I have probably the same problem inside the features as I take the log-return on the features as well, i.e. if F is a particular feature, then I apply log(F_t/F_{t-1}) . Here is a one day data, log_return_with_features.pkl , with shape (23369, 30, 161) . Sorry, but I cannot tell what are the features. As I apply $\log(\frac{F_t}{F_{t-1}})$ on all the features and on the target (i.e. the price), then be aware I added 1e-8 to all the features before applying the log-return operation to avoid division by 0. P.S. That project has on purpose "High-Frequency Trading".
