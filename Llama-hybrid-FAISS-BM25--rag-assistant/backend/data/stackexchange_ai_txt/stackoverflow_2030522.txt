[site]: stackoverflow
[post_id]: 2030522
[parent_id]: 2027107
[tags]: 
As there seems to be no more elegant way to solve this, I implemented the following code into the base page class from which all my web forms inherit: /// /// Set an ID to identify the correct session variable (in case there are several ones). /// Create this ID when it is needed for the first time. /// private string PageCallID { get { if (ViewState["PageCallID"] == null) ViewState["PageCallID"] = Guid.NewGuid().ToString("N"); return ViewState["PageCallID"].ToString(); } } /// /// Use a hashtable which is stored into the Session to save the in-memory /// objects. This helps to keep the viewstate variable at the client small. /// protected Hashtable ServerViewState { get { string strSessionKey = String.Format("CleverViewState_{0}", PageCallID); if (Session[strSessionKey] == null) Session[strSessionKey] = new Hashtable(); return (Hashtable)Session[strSessionKey]; } } With this, we can write on any web form: ServerViewState["MyDataTable"] = myDataTable; instead of ViewState["MyDataTable"] = myDataTable; However, this solution cannot be called by a static method. So I think it is more a workaround than a solution. If anybody knows a better way to solve this, I would be thankful for any feedback!
