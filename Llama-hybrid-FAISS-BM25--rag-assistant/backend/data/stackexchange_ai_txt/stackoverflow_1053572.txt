[site]: stackoverflow
[post_id]: 1053572
[parent_id]: 
[tags]: 
Why kernel code/thread executing in interrupt context cannot sleep?

I am reading following article by Robert Love http://www.linuxjournal.com/article/6916 that says "...Let's discuss the fact that work queues run in process context. This is in contrast to the other bottom-half mechanisms, which all run in interrupt context. Code running in interrupt context is unable to sleep, or block, because interrupt context does not have a backing process with which to reschedule. Therefore, because interrupt handlers are not associated with a process, there is nothing for the scheduler to put to sleep and, more importantly, nothing for the scheduler to wake up..." I don't get it. AFAIK, scheduler in the kernel is O(1), that is implemented through the bitmap. So what stops the scehduler from putting interrupt context to sleep and taking next schedulable process and passing it the control?
