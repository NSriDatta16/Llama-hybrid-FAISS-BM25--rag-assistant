[site]: stackoverflow
[post_id]: 2682947
[parent_id]: 2682764
[tags]: 
I'd probably use a class to store the rule data, but the data structure that you use to store them really depends on how your rules are organized. You say it's like SO, but SO usually maps actions onto reputation. From your example, it sounds as if you are mapping qualities of an action onto reputation. In that case, using the same sort of system may not be appropriate. For example, do you really want the possibility of a negative scoring action -- SO does allow this, but perhaps you don't. After all, it sounds like your objective is to sell things -- you might want to consider the impact of giving a person a negative reputation for buying something. Having said that, here are a few things I'd consider. If the structure is flat and only one rule can apply at any given time or each rule is independent, then a Dictionary keyed by rule identifier (perhaps an enum) might be appropriate. If more than one rule can apply and they interact, then perhaps you might want store them in a collection and build up a compound rule using the Decorator pattern from all the matching rules. For example, purchasing with an authenticated account and writing a review might give you more reputation than writing a review with an anonymous account. If the rules are hierarchical, i.e., there's some precedence, then a filter chain, with the option to abort the chain, might be more appropriate.
