[site]: stackoverflow
[post_id]: 179631
[parent_id]: 179213
[tags]: 
1.a: What are the differences between the two notations? "" starts search in the directory where C/C++ file is located. <> starts search in -I directories and in default locations (such as /usr/include). Both of them ultimately search the same set of locations, only the order is different. 1.b: Do all compilers implement them the same way? I hope so, but I am not sure. 1.c: When would you use the <>, and when would you use the "" (i.e. what are the criteria you would use to use one or the other for a header include)? I use "" when the include file is supposed to be next to C file, <> in all other cases. IN particular, in our project all "public" include files are in project/include directory, so I use <> for them. 2 - #include {TheProject/TheHeader.hpp} or {TheHeader.hpp} ? As already pointed out, xxx/filename.h allows you to do things like diskio/ErrorCodes.h and netio/ErrorCodes.h * private headers of your project? Private header of my subsystem in project. Use "filename.h" Public header of my subsystem in project (not visible outside the project, but accessible to other subsystems). Use or , depending on the convention adapted for the project. I'd rather use * headers of your project, but which are exporting symbols (and thus, "public") include exactly like the users of your library would include them. Probably * headers of another project your module links with Determined by the project, but certainly using <> * headers of a compiler or standard library Definitely <>, according to standard. 3.a: Do you work on project with sources and/or headers within a tree-like organisation (i.e., directories inside directories, as opposed to "every file in one directory") and what are the pros/cons? I do work on a structured project. As soon as you have more than a score of files, some division will become apparent. You should go the way the code is pulling you.
