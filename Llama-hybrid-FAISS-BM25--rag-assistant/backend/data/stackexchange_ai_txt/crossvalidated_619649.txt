[site]: crossvalidated
[post_id]: 619649
[parent_id]: 
[tags]: 
A Comparison of pywt for Python and wavelets for R: Discrete Wavelet Transform

Let us consider a signal assumed as in the paper by Rosso et al., i.e. given by the sampled values $S=\left\{s_0(n), n=1, \ldots, M\right\}$ , corresponding to a uniform time grid with sampling time $t_{\mathrm{s}}$ . For simplicity, the sampling rate is taken as $t_{\mathrm{s}}=1$ . The wavelet expansion will be: $$S(t)=\sum_{j,k} C_{j,k} \psi_{j, k}(t)$$ where the $C_{j,k}$ denote wavelet coefficients. The wavelet energy at resolution level j is given by: $$E_j=\sum_k \left|C_{j,k} \right|^2$$ whereas the total energy is $E=\sum_j E_j$ . The ratio $p_j=E_j/E$ defines by scales the probability distribution of the energy. I would like to estimate these quantities for a given time series, so I decided to resort to two packages: pywt for Python and wavelets for R . I compared the results obtained with them. The given series is stored in the following R array: a I applied both packages to obtain the above-mentioned probabilities. With pywt : import numpy as np import pywt #pywt.wavelist() coeffs = pywt.wavedec(a, 'haar','zero') # Access the desired coefficient series (wt@W) Wav_Coeff_series = coeffs # Calculate the sum of squares of each coefficient series Tot = 0 for k in range(len(Wav_Coeff_series)): delta = Wav_Coeff_series[k] Tot += np.sum(delta ** 2) Energy_x = np.array([]) for k in range(len(Wav_Coeff_series)): delta = Wav_Coeff_series[k] energy = np.sum(delta ** 2) / Tot Energy_x = np.append(Energy_x, energy) px = Energy_x reversed_px = px[::-1] With wavelets : #install.packages("wavelets") library(wavelets) Jmax=6 # max n. level J=Jmax wt If we compare the results we obtain the following picture: the behavior shown by these curves seems to be very different (one curve increases while the other decreases). My question is how come these two packages show such different behavior and who is right? For another, less complicated series (it is the sampling of a sinusoidal function), the results of the two packages seem to agree: The series is: c(2, 1.90014223548189, 1.61054051506212, 1.1601138191424, 0.59384075065655, -0.0317319276696156, -0.654135926634843, -1.21121937427533, -1.64735316285967, -1.91898594722899, -1.99899308476637, -1.87938524157182, -1.57210618948557, -1.10784012773222, -0.532947627380071, 0.0951638316474848, 0.713772443183743, 1.26110533416904, 1.68250706566236, 1.93589740279271, 1.99597335294377, 1.85673586603215, 1.53208888623796, 1.05445093522101, 0.471517871018854, -0.158499913713577, -0.772690251386256, -1.30972146789057, -1.71596682646995, -1.95085957377081, -1.99094384514617, -1.83221691486414, -1.49052889935151, -1, -0.409613336130383, 0.221676399802021, 0.830830026003773, 1.35701882311426, 1.74769875413957, 1.96385739452541, 1.98390962566159, 1.80585307657324, 1.44746807621014, 0.944542149545367, 0.347296355333861, -0.284629676546571, -0.888133225211547, -1.40294977541264, -1.77767089730985, -1.97487777735279, -1.97487777735279, -1.77767089730985, -1.40294977541264, -0.888133225211549, -0.28462967654657, 0.347296355333862, 0.944542149545362, 1.44746807621014, 1.80585307657324, 1.98390962566159, 1.96385739452541, 1.74769875413957, 1.35701882311427, 0.830830026003775, 0.221676399802024, -0.409613336130381, -1, -1.49052889935151, -1.83221691486414, -1.99094384514617, -1.95085957377081, -1.71596682646995, -1.30972146789057, -0.772690251386262, -0.158499913713581, 0.471517871018852, 1.054450935221, 1.53208888623796, 1.85673586603215, 1.99597335294377, 1.93589740279271, 1.68250706566236, 1.26110533416905, 0.713772443183744, 0.0951638316474837, -0.532947627380065, -1.10784012773222, -1.57210618948557, -1.87938524157182, -1.99899308476637, -1.91898594722899, -1.64735316285967, -1.21121937427534, -0.654135926634846, -0.0317319276696172, 0.59384075065655, 1.1601138191424, 1.61054051506211, 1.90014223548189, 2)
