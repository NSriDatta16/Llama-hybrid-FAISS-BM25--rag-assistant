[site]: crossvalidated
[post_id]: 319289
[parent_id]: 
[tags]: 
Different bayesian networks got the same predicton in bnlearn

I was trying to build two bayesian networks by 'bnlearn' package in R. Firstly I created models in this way: # create an empty network and add nodes. g = empty.graph(colnames(data)) # crate edges. bogus = matrix(c("age", "education", "age", "marital.status", 'native.country', 'race', 'education', 'occupation', 'marital.status', 'relationship', 'occupation', 'hours.per.week', 'workclass', 'hours.per.week', 'workclass', 'occupation', 'income', 'race', 'income', 'native.country', 'income', 'sex', 'income', 'capitial_stat', 'income', 'age', 'income', 'education', 'income', 'marital.status', 'income', 'relationship', 'income', 'occupation', 'income', 'workclass', 'income', 'hours.per.week'), ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to"))) arcs(g) = bogus g2 = empty.graph(colnames(data)) bogus2 = matrix(c('income', 'race', 'income', 'native.country', 'income', 'sex', 'income', 'capitial_stat', 'income', 'age', 'income', 'education', 'income', 'marital.status', 'income', 'relationship', 'income', 'occupation', 'income', 'workclass', 'income', 'hours.per.week'), ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to"))) arcs(g2) = bogus2 Then, one of my network had the structure like this: > g Random/Generated Bayesian network model: [income][age|income][workclass|income][sex|income][native.country|income] [capitial_stat|income][education|age:income][marital.status|age:income] [race|native.country:income][occupation|workclass:education:income] [relationship|marital.status:income] [hours.per.week|workclass:occupation:income] nodes: 12 arcs: 19 undirected arcs: 0 directed arcs: 19 average markov blanket size: 3.33 average neighbourhood size: 3.17 average branching factor: 1.58 generation algorithm: Empty Another one was: > g2 Random/Generated Bayesian network model: [income][age|income][workclass|income][education|income] [marital.status|income][occupation|income][relationship|income][race|income] [sex|income][hours.per.week|income][native.country|income] [capitial_stat|income] nodes: 12 arcs: 11 undirected arcs: 0 directed arcs: 11 average markov blanket size: 1.83 average neighbourhood size: 1.83 average branching factor: 0.92 generation algorithm: Empty The second one is basically a naive-bayes model I think. I wanted to compare the result of predictions between this two models. So I fitted models and predicted dataset by code below: fit = bn.fit(g, data, method='mle') pred_my_network = predict(fit, node = "income", data = test) sum(pred_my_network == test$income)/length(pred_my_network) Here I got an accuracy rate of 0.7543161. But when I did the same thing at the second model, I got the same result of 0.7543161.The code has not many differences except different objects: fit2 = bn.fit(g2, data, method='mle') pred_my_network2 = predict(fit2, node = "income", data = test) sum(pred_my_network2 == test$income)/length(pred_my_network2) Finally, I used the naive.bayes function in bnlearn to create model,: bn = naive.bayes(data, "income") pred_nb = predict(bn, test) sum(pred_nb == test$income)/length(pred_nb) which gave me a different result of 0.809429. But the sturcture is the same as my second model: > bn Bayesian network Classifier model: [income][age|income][workclass|income][education|income] [marital.status|income][occupation|income][relationship|income][race|income] [sex|income][hours.per.week|income][native.country|income] [capitial_stat|income] nodes: 12 arcs: 11 undirected arcs: 0 directed arcs: 11 average markov blanket size: 1.83 average neighbourhood size: 1.83 average branching factor: 0.92 learning algorithm: Naive Bayes Classifier training node: income tests used in the learning procedure: 0 Have no idea why this happend. Did I create/fit/predict my model in a wrong way?
