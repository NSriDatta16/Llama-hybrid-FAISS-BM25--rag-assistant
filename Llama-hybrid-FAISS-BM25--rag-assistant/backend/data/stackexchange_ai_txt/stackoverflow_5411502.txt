[site]: stackoverflow
[post_id]: 5411502
[parent_id]: 
[tags]: 
transforming coordinates from one distorted coordinate system to another

the problem is best explained with an example: http://dl.dropbox.com/u/1013446/distortedcoordinatespace.exe drag and drop the little red square inside the small square on the right. it corresponds to the red square in the big quadrilateral on the left. you can also drag the 4 corners of the big quadrilateral on the left to see how it occupies a distorted version of the space within the square. given the absolute coordinates for the 4 points of a square and the coordinates of an arbitrary point within the square, it's simple matter to remap the point's coordinates to an arbitrary quadrilateral. what I want is to be able to start off with an arbitrary quadrilateral, and be able to do the same thing, transforming the quadrilateral to any other 4 sided shape, but maintaining the relative distorted position of the point, so given the 4 absolute coordinates of each of 2 irregular quadrilaterals, A and B, how can I convert the coordinates of point C given it's absolute coordinates? also helpful, would be any terminology that I'm missing here for what these transformations would be called, because I'd like to look into them more ok, I'm attempting to implement btilly's solution, and here's what I have so far: #include #define cf complex cf i=sqrt(complex (-1)); cf GetZ(float x,float y) { return cf(x)+(cf(y)*i); } cf GetPathIntegral(cf p1,cf p2,cf q1,cf q2, int n) { cf sum; for (int index=0;index before I move on from here, I want to make sure I'm right so far... also, this paragraph confused me a bit: OK, so we can do path integrals. What is the value of that? Well suppose we take a random point z0 = x + iy somewhere in our region. Suppose that f(z) is defined on the path. Then the Cauchy Integral Formula says that the integral around our region (which is the sum of 4 piecewise integrals that we know how to do) of f(z)/(2 * Ï€ * i * (z - z0)) is a really nice function that is going to match our original function on the boundary. what does the function do exactly?
