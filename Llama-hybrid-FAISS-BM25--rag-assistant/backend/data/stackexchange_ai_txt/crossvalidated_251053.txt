[site]: crossvalidated
[post_id]: 251053
[parent_id]: 
[tags]: 
How can one test a neural network against new data in MatLab?

I am new with MatLab and NN. I used the Neural Network Time Series Tool ( https://nl.mathworks.com/help/nnet/gs/neural-network-time-series-prediction-and-modeling.html ) in order to a make prediction and at the end it offers the possibility to test the NN against new data (for example the actual observations to predict). Then, you can also have the script of what you have done but it does not include the code about testing the NN against new data. What is the code for that please? This is the MatLab code using the given data % Bayesian regularization backpropagation % Create a Nonlinear Autoregressive Network feedbackDelays = 1:7; hiddenLayerSize = 12; net = narnet(feedbackDelays,hiddenLayerSize,'open','trainbr'); % Removing inputs/targets that are constant and normalizing inputs/targets to fall in the range [?1, 1] net.input.processFcns = {'removeconstantrows','mapminmax'}; % Prepare the Time Series Data for Training and Simulation [x,xi,ai,t] = preparets(net,{},{},T); % Setup Division of Data for Training, Validation, Testing net.divideFcn = 'dividerand'; % Divide data randomly net.divideMode = 'time'; % Divide up every sample net.divideParam.trainRatio = 70/100; net.divideParam.valRatio = 15/100; net.divideParam.testRatio = 15/100; % Performance Function net.performFcn = 'mse'; % Mean Squared Error % Train the Network [net,tr] = train(net,x,t,xi,ai); % Test the Network y = net(x,xi,ai); e = gsubtract(t,y); performance = perform(net,t,y) % Recalculate Training, Validation and Test Performance trainTargets = gmultiply(t,tr.trainMask); valTargets = gmultiply(t,tr.valMask); testTargets = gmultiply(t,tr.testMask); trainPerformance = perform(net,trainTargets,y) valPerformance = perform(net,valTargets,y) testPerformance = perform(net,testTargets,y) % Closed Loop Network netc = closeloop(net); netc.name = [net.name ' - Closed Loop']; [xc,xic,aic,tc] = preparets(netc,{},{},T); yc = netc(xc,xic,aic); closedLoopPerformance = perform(net,tc,yc) % Multi-step Prediction [x1,xio,aio,t] = preparets(net,{},{},T); [y1,xfo,afo] = net(x1,xio,aio); [netc,xic,aic] = closeloop(net,xfo,afo); [y2,xfc,afc] = netc(cell(0:100),xic,aic); % % Step-Ahead Prediction Network nets = removedelay(net); nets.name = [net.name ' - Predict One Step Ahead']; [xs,xis,ais,ts] = preparets(nets,{},{},T); ys = nets(xs,xis,ais); stepAheadPerformance = perform(nets,ts,ys) figure; plot([cell2mat(targetSeries),nan(1,N); nan(1,length(targetSeries)),cell2mat(yPred); nan(1,length(targetSeries)),cell2mat(targetSeriesVal)]') This works well, but I would like to test the NN against new data.
