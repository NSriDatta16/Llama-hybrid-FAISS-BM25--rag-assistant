[site]: stackoverflow
[post_id]: 826797
[parent_id]: 825483
[tags]: 
I can't think of a reason (YET! -- I can think of a few reasons you might want to do it in OnActionExecuting(), before your Action method code executes) for changing the ActionResult using filterContext.Result in the OnActionExecuting() method, but it is definitely allowed. The order of execution is: OnActionExecuting() Your Action method code in your Controller OnActionExecuted() OnResultExecuting() Whatever the assigned ActionResult.ExecuteResult() returns (renders a view, json, content, etc) OnResultExecuted() As your experiment showed, you're allowed to change filterContext.Result in both OnActionExecuted() and also OnActionExecuting(). Since OnActionExecuted() is called after your Controller code (example: return RedirectToAction()), whatever it sets as the ActionResult takes precedence. I found decent coverage of ActionFilters in Steven Sanderson's book 'Pro ASP.NET MVC framework'. [1] [2] [1] http://books.google.com/books?id=Xb3a1xTSfZgC (The content on ActionFilters is not available in the Google Book Preview) [2] http://blog.codeville.net/2009/04/29/now-published-pro-aspnet-mvc-framework-apress/
