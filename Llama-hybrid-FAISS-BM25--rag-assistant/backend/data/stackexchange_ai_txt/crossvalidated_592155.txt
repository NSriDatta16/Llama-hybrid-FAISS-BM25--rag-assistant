[site]: crossvalidated
[post_id]: 592155
[parent_id]: 
[tags]: 
Logistic regression feature ranking reliability using bootstrapping [R]

I wish to display the (un)reliability in ranking of variables in an omics dataset in the classification of disease vs healthy. In this case it’s mostly of academic interest, as many use rank-based univariable screening to identify the (apparent) “best” markers in e.g. prognostic biomarker studies. I wish to show, in my data (containing more than 1000 predictors measured in 200 samples), that exploratory rank-based feature selection (by e.g. AIC or the Chi square statistic) is unstable in my small sample and that the “best” apparent predictors are unlikely to generalize well. Say for simplicity that I have 3 variables and a binary outcome variable, and I wish to use 100 bootstrap repetitions to visualize the distributions of ranks (e.g. their confidence intervals) evaluated by the AIC metric (lowest AIC = best rank etc). Keep in mind that I wish to evaluate each predictor by itself, i.e. not multiple regression. library(dplyr) library(tidyr) set.seed(12345) d Now in my code below I am really unsure how to do this correctly, especially whether the sample function should occur within the inner or outer loop, and whether this code in fact represents bootstrapping. aic_vec % mutate(bootstrap_rep = 1:nrow(.)) %>% relocate(bootstrap_rep, .before=variables[1]) # Calculate ranks aic_df_ranks % pivot_longer(cols=-bootstrap_rep) %>% group_by(bootstrap_rep) %>% mutate(rank=dense_rank(desc(-value))) %>% select(-value) %>% pivot_wider(names_from=name, values_from=rank) # Display rank frequency per variable data.frame( x1 = table(aic_df_ranks $x1), x2 = table(aic_df_ranks$ x2), x3 = table(aic_df_ranks$x3)) %>% select(rank=x1.Var1, x1_freq=x1.Freq, x2_freq=x2.Freq, x3_freq=x3.Freq) In the next step I wish to repeat this pipeline but also add two fixed covariates on the form glm_loop and within each bootstrap calculate an LR chi square statistic and use this as a ranking metric. The apparent rank and bootstrapped confidence intervals can then be visually displayed. But first I need to get the code right!
