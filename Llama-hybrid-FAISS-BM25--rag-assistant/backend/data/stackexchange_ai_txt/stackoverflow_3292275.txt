[site]: stackoverflow
[post_id]: 3292275
[parent_id]: 3287511
[tags]: 
With plain char * , I would recommend always writing code with a policy that the caller "owns" the string and is responsible for freeing it if it was obtained by malloc . On the other hand, one could certainly envision "pseudo-pass by value" string objects in C, implemented as a struct, where policy dictates you have to relinquish ownership of a string (or duplicate it first and pass the duplicate) when passing strings as arguments. This could work especially well if the implementation used reference-counted storage for strings where the object passed was just a reference to the storage, so that the "duplicate" operation would merely be a reference-count increment plus trivial wrapper-struct allocation (or even pass-by-value struct).
