[site]: stackoverflow
[post_id]: 311085
[parent_id]: 311074
[tags]: 
I'd go with denormalized. It's easier. If you normalize it, the address table would require you to remove duplicates and relink records from the customer table. If I had the same delivery and invoice address, it seems like it should link to the same record. If I change one, you're required to: Create a new address record. Relink the customer record. If I change it back you need to check: Does a similar address entry already exist. Relink the customer record. This programming overhead seems to obviate the advantage of less space that normalization seems to offer. A denormalized solution, like you pointed out, would provide faster queries and easier maintenance (programming-wise). This seems to be the deciding factor for me. A normalized solution, like pointed out above, would allow you to add more addresses later. But you'd have to add a field for the foreign key anyways, unless you planned on organizing the tables without linkage from the customer to the address table. Advantages of Normalized Less space. Duplicate logic kinda built in (though maybe they weren't actually duplicates?) Support addition of new address fields (kinda). Advantages of Denormalized Faster queries. Less programming.
