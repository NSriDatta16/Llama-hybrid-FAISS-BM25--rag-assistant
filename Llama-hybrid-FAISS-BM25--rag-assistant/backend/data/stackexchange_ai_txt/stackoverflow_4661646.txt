[site]: stackoverflow
[post_id]: 4661646
[parent_id]: 4653100
[tags]: 
The struct file is created by the kernel and represents the kernels view of your device it allows the kernel to map from a file handle to the device. The struct file only contains the data the kernels upper layers needs, this is unlikely to be everything you need for your driver, if you need extra storage to track your devices status (and generally you will) you need to allocate the memory for your structure yourself either in the open function or more normally when you detect your hardware. If you do allocate storage then you can use the file->private_data to allow you to get from the struct file thats passed to your driver by read / write / etc to your structure. How the file->private_data is used is up to the driver, the kernel doesn't touch it. Its just there for the drivers use. The f_pos field is a legacy from the kernel using the same struct file for devices and files. It is an index into a file were the next operation will happen, it depends on your device if this makes sense, if your device supports some form of random access (say a ram device) then using f_pos and implementing lseek might make sense, if you hardware is sequential then f_pos is normally irrelevant.
