[site]: stackoverflow
[post_id]: 500347
[parent_id]: 500263
[tags]: 
The way most web servers work (Apache for example) is to maintain a collection of worker threads. When a PHP script is executed, one thread runs the PHP script. When your script does sleep(100) , the script takes 100 seconds to execute.. That means your worker thread is tied up for 100 seconds. The problem is, you have a very finite number of worker-threads - say you have 10 threads, and 10 people login - now your web-server cannot serve any further responses.. The best way to rate-limit logins (or other actions) is to use some kind of fast in-memory storage thing ( memcached is perfect for this), but that requires running separate process and is pretty complicated (you might do this if you run something like Facebook..). Simpler, you could have a database table that stores user_id or ip_address , first_failed and failure_counter . Every time you get a failed login, you (in pseudo code) would do: if (first_failed in last hour) and (failure_counter > threshold): return error_403("Too many authentication failures, please wait") elseif first_failed in last hour: increment failure_counter else: reset first_failed to current time increment failure_counter Maybe not the most efficient, and there is better ways, but it should stop brute-forcing pretty well. Using memcached is basically the same, but the database is replaced with memcached (which is quicker)
