[site]: stackoverflow
[post_id]: 5754749
[parent_id]: 
[tags]: 
How to save and restore the whole website using JavaScript?

I am developing my own router API in JavaScript. It does routing based on #FregmentIdentifiers ( document.location.hash ). The API is almost finished but I am still working on the backbutton event. Whenever the backbutton is pressed and the hash has changed, and was seen before, the old content will be restored. Do you know a way to do the saving and restoring of all content? My problem here is that if I save and restore document.body.innerHTML only the markup is restored but not the events, so e.g. Googlemaps stops working. I was trying to clone document.body or document.documentElement but JavaScript either told me that the field does not have a setter or that my clone is not valid. EDIT: To make clear after all what I am working on, I decided to post my current code. The question aims at the parts marked with a //TODO comment. function Router(){ var that = this; var router = this; var executionObservers = []; that.routes = []; this.registerRoute = function(route){ that.routes.push(route); }; var history = null; this.init = function(){ var i; var identifier = document.location.hash; history = new History(); history.start(); if(identifier.length > 0){ identifier = identifier.substring(1,identifier.length); for(i = 0; i An example usage of my api can look like this: config = new PrefixedRouterConfig('show_map',new Array("\\d+", "-?\\d+(?:\\.\\d+)?", "-?\\d+(?:\\.\\d+)?")); var ROUTE_SHOW_MAP = new Route( function(params){ var zoom = params[0]; var lat = params[1]; var lng = params[2]; MyGmapInterface.preparePage(-1); addTabSelectedCallback(MyGmapInterface.tabLoaded); addTabClosedCallback(MyGmapInterface.tabClosed); MyGmapInterface.tabsLoaded = true; MyGmapInterface.myMap = new MyMap(lat,lng,zoom,MyGmapInterface.getMapContainer(),MyGmapInterface.notCompatible); MyGmapInterface.addNewCamMarkers(MyGmapInterface.loadCams()); MyGmapInterface.initListeners(); tabSelected(TAB_LEFT); }, config.getParams, config.getIdentifier, config.contains ); ROUTE_SHOW_MAP.register(); After all JavaScript files are included (which may register routes) I call Router.getInstance().init(); . When I do somewhere an ajax request (by hand) for which a route exists, I call ROUTE_NAME.executed() to set the fragment identifier and to register it with the history. Furthermore I have an observer which updates some links, which are used for direct translations, whenever a location hash is changed by executed() .
