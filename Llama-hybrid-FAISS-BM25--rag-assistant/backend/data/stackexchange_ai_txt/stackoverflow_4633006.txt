[site]: stackoverflow
[post_id]: 4633006
[parent_id]: 4632550
[tags]: 
You should check this out. It is in C# but you could try to get help translating it. Extending Form with Non-Client Area Painting . It is way above my head and since you are new to, it might be pretty tricky. First of, since you did not specify, I am assuming you are using winforms and not WPf or Asp.net, both of which I have next to no experience with. I have a method that is just messing with a bunch of winforms property's. It is kinda glitchy on my winxp, box but it works :). Here is the code for the two forms, I have included th property's in code to simplify things. The Main form Public Class frmMAin Dim border As Form = New frmBackground() Private Sub frmMAin_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.GotFocus RefreshBorder() End Sub Private Sub frmMAin_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load RefreshBorder() End Sub Private Sub RefreshBorder() border.Show() border.Size = New Size(Me.Width + 20, Me.Height + 20) border.Location = New Point(Me.Location.X - 10, Me.Location.Y - 10) End Sub Private Sub frmMAin_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.LostFocus border.Hide() End Sub Private Sub frmMAin_Move(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Move RefreshBorder() End Sub End Class The Background Form Public Class frmBackground Private Sub frmBackground_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load Me.FormBorderStyle = Windows.Forms.FormBorderStyle.None Me.ShowInTaskbar = False Me.BackColor = Color.Blue Me.Opacity = 0.5 End Sub End Class And it turns out something like this. This code still has some issues with focus but is mostly functional. Also keep in mind this is not the most "elegant" way to solve this problem, there is most likely a better way to do this with some system dll. You also might try WPF, as I hear you have much more control over look then in winforms.
