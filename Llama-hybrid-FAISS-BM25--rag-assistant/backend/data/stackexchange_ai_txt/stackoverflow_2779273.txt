[site]: stackoverflow
[post_id]: 2779273
[parent_id]: 2268065
[tags]: 
This would not actually be an original thought by myself. However, I thought I might respond to this: "Off the top of my head I don't see any theoretical or practical reason why we could not have field-like explicitly implemented events. Nor do I see any reason why we particularly need to. This may have to remain one of the mysteries of the unknown." -Eric Lippert In Chapter 23 of A Programmer's Introduction to C# , Second Edition, Eric Gunnerson wrote: "[I]f another class also wanted to be called when the button was clicked, the += operator could be used, like this: button.Click += new Button.ClickHandler(OtherMethodToCall); Unfortunately, if the other class wasn't careful, it might do the following: button.Click = new Button.ClickHandler(OtherMethodToCall); This would be bad, as it would mean that our ButtonHandler would be unhooked and only the new method would be called." ... "What is needed is some way of protecting the delegate field so that it is only accessed using += and -=." He goes on over the next few pages to comment on including the add() and remove() methods to implement this behavior; being able to write to those methods directly and the consequence of storage allocation for unneeded delegate references. I would add more, but I respect the author too much to do so without his permission. I recommend finding a copy of this book and would recommend anything by Eric Gunnerson in general (blog, etc...) Anyway, I hope this is relevant to the topic and if so, hope it shines light on this "mystery of the unknown"? (I was reading this very chapter and searching Stack Overflow for insight into event handler logic considerations when creating custom collections from custom objects) - I only mention this because I claim no specific authority on this particular subject. I am merely a student in search of "enlightenment" myself :-)
