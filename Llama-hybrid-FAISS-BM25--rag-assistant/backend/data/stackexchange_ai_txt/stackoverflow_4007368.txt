[site]: stackoverflow
[post_id]: 4007368
[parent_id]: 4007358
[tags]: 
I can think of a few differences. First to me is cumbersome , if more than one variable is involved. I can not speak of performance penalty on that. See additional arguments below. The second example is positional dependent and it can be easy to change position causing errors. It also does not tell you anything about the variables. The third example, the position of variables is not important. You use a dictionary . This makes it elegant as it does not rely on positional structuring of variables. See the example below: >>> print 'number is %s %s' % (3,4) number is 3 4 >>> print 'number is %s %s' % (4,3) number is 4 3 >>> print 'number is %(number)s %(two)s' % dict(number=3, two=4) number is 3 4 >>> print 'number is %(number)s %(two)s' % dict(two=4, number=3) number is 3 4 >>> Also another part of discussion on this "+" is the string concatenation operator. "%" is string formatting. In this trivial case, string formatting accomplishes the same result as concatenation. Unlike string formatting, string concatenation only works when everything is already a string. So if you miss to convert your variables to string, concatenation will cause error. [Edit: My answer was biased towards templating since the question came from web2py where templates are so commonly involved] As Ryan says below, the concatenation is faster than formatting. Suggestion is Use the first form - concatenation, if you are concatenating just two strings Use the second form , if there are few variables. You can invariably see the positions and deal with them Use the third form when you are doing templating i.e. formatting a large piece of string with variable data. The dictionary form helps in providing meaning to variables inside the large piece of text.
