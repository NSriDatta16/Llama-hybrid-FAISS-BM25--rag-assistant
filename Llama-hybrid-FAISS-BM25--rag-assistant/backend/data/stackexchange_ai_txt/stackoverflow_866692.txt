[site]: stackoverflow
[post_id]: 866692
[parent_id]: 
[tags]: 
If you add extra data space to a DialogBox class be accessed by GetWindowLongPtr, should you add DLGWINDOWEXTRA to access this extra space?

When creating a window class for use with a DialogBox you need to specify a value of DLGWINDOWEXTRA in the cbWndExtra member of the WNDCLASS struct for "the extra bytes the system requires for each dialog box." If you add your own additional data space to a DialogBox class which is to be accessed using GetWindowLongPtr() , should you add DLGWINDOWEXTRA to the offset in order to access your additional space? (I'll confess that I think I know the answer, and that way the code doesn't break. But, I want to make sure my reasons tally with the collective wisdom.) The major reason why Dialogs are being used with their own class (rather than the default) is to allow each class of Dialog to have its own Icon. Two separate items of extra data are also attached to each window. ... wndclass.cbWndExtra = DLGWINDOWEXTRA + EXTRASPACE; wndclass.lpfnWndProc = (WNDPROC) DefDlgProc; wndclass.hIcon = LoadIcon(hInstance, "ICON_MAIN"); wndclass.lpszClassName = WND_CLASS_VLIST_POPUP; wndclass.hIconSm = LoadImage(hInstance, "ICON_MAIN", IMAGE_ICON, 16, 16, LR_DEFAULTCOLOR); ... Effectively the question is which is correct access to the additional user data I want to add over and above the system required dialog data: GetWindowLongPtr(hWnd, 0 + DLGWINDOWEXTRA + SOMETHING_IN_EXTRASPACE); or GetWindowLongPtr(hWnd, 0 + SOMETHING_IN_EXTRASPACE); ? NOTE: Late edit May-15-2009 by David L Morris: removed the incorrect GWLP_USERDATA and replaced with 0 . The original question used GWLP_USERDATA in the call to GetWindowLongPtr() which is why the accepted answer mentions GWLP_USERDATA . The examples above were originally written: GetWindowLongPtr(hWnd, GWLP_USERDATA + DLGWINDOWEXTRA + SOMETHING_IN_EXTRASPACE); and GetWindowLongPtr(hWnd, GWLP_USERDATA + SOMETHING_IN_EXTRASPACE);
