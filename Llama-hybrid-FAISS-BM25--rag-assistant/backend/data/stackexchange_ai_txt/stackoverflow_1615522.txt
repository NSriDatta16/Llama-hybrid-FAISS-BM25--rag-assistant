[site]: stackoverflow
[post_id]: 1615522
[parent_id]: 1614539
[tags]: 
Lets say there is a method that searches for book authors by book id. What should be passed as a parameter to such method - only book.id (int) or whole book object? I am making the assumption that "book authors" is an attribute of a book. Therefore, I imagine something like the following class: class Book { private int id; private List authors; // ... maybe some other book information public int getID() { return this.id } public void setID(int value) { this.id = value } public List getAuthors() { return this.authors.clone(); } // ... } Given an instantiated Book object ( aBook ), to determine the list of authors, I would expect that I can call aBook.getAuthors() , which requires no parameters. I would discourage the creation of partially instantiated domain objects. In other words, given a bookid , and looking for a list of authors, I would want the client code to look more like this: Book aBook = library.findBook(bookid); List authors = aBook.getAuthors(); and less like this: Book bookQuery = new Book().setID(bookid); // partially instantiated Book Book aBook = library.findBook(bookQuery); List aBook = book.getAuthors(); The first version reduces the number of throwaway objects that are created by the client code. (In this case, bookQuery , which isn't a real book.) It also makes the code easier to read--and therefore to maintain. This is because bookQuery is not doing what the maintenance programmer would expect. For example, I'd expect two Books with the same ID to have the same tite, authors, ISBN, etc. These assertions would fail for bookQuery and aBook . Thirdly, it minimizes the chance that you will someday pass an invalid (partially instantiated) Book object to a method that is expecting a real Book. This is a bug where the failure (in the method) may happen far away from the cause (the partial instantiation).
