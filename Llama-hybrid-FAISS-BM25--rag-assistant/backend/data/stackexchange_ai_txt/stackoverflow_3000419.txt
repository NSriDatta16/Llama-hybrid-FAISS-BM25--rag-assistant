[site]: stackoverflow
[post_id]: 3000419
[parent_id]: 3000410
[tags]: 
but O(n) worst case The amortized worst case is still O(1). Long and short insertion times average out – that’s the whole point of amortised analysis (and the same for deletion). An array also uses less space than a linked list (which after all has to store an additional pointer for each element). Furthermore, the overhead is just much less than with a linked list. All in all, an array-based implementation is just (much) more efficient for almost all use-cases, even though once in a while an access will take a little longer (in fact, a queue can be implemented slightly more efficiently by taking advantage of pages that are themselves managed in a linked list – see C++’ std::deque implementation).
