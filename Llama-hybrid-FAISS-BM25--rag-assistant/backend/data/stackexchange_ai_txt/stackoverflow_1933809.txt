[site]: stackoverflow
[post_id]: 1933809
[parent_id]: 1932986
[tags]: 
I haven't done a complete refactoring because I want to keep enough of your original code intact that it's not too confusing. The major change is introduction of a Game class that handles parsing. The implementation of this class can be much improved, but it works without changing your code too much. Also, some minor points: Instead of File.new , read the file using File.open and give it a block that takes the file parameter. The file is automatically closed at the end of the block. Use of a += 1 instead of a = a + 1 . I made up a simple notation and wrote a parser for handling the play-by-play details of a tennis match . You might want to look at that code for an example of parsing game moves. It's actually very similar to what you're doing. The bulk of the code is in the /lib directory. Parsing logic is in parser.rb and game components are in the other files. I'd encourage you to break your chess games up in a similar way, by adding a Move class. Anyway, here's my half-refactoring of your code: class Game attr_accessor :header, :score, :moves def initialize @header = "" @score = "" @moves = [] end def first_move moves_index.index(moves[0]) end def moves_index moves_index = {} score.split(/\s+/).each_with_index do |move,i| if i%3 != 0 unless moves_index.has_key?(move) moves_index[move] = moves_index.keys.length end moves b[1])}.each{|k,v| puts "1. #{k} occurred #{v} times" }
