[site]: stackoverflow
[post_id]: 4071982
[parent_id]: 
[tags]: 
Designing a database to contain databases ( database models )

I'm working on an online database modeler in which users can: create new db schemas save schemas share schemas have revisions of schemas fork schemas comment on schemas features include: JS draggable UI "live" ajax editing I want to initially support MSSql, MySQL, Postgres, and SQLite. I want to create this database in Postgres. I have little Postgres experience, I have mostly dealt with MySQL. Here's what I have come up so far: engines id int( pk ) name varchar(40) sample data for engines: ( {"id":1,"name":"postgres"}, {"id":2, "name":"mysql"} ) databases id int ( pk ) name varchar(100) slug varchar(40) user_id int description text engine int ( fk to engines.id ) fork_id int ( keep track of forks ) parent_id int ( this is for revisions ) comment_id int ( fk to comments.id ) created timestamptz(6) modified timestamptz(6) sample data for databases: ( { "id":1,"name":"my first db", "slug":"my-first-db", "user_id":3, "description":"This is my first database.", "engine":1, "created":"2009-09-01 22:22:10", "modified":"2009-09-01 22:22:10", "comments":3 } ) tables id int ( pk ) database_id int ( fk to databases.id ) name varchar(40) x_position int // this is the X position from the top left of the container y_position int // this is the Y position from the top left of the container sample data for tables: ( {"id":1,"name":"customers", "database_id":1, "x_position":1, "y_position":2 } ) fields id int ( pk ) table_id int ( fk to tables.id ) name varchar(40) type int ( fk to types.id ) default varchar ( 100 ) size int autoincrement tinyint(1) null tinyint(1) sample data for fields: ( {"id":1,"name":"id", "type":2, "table_id":1, "autoincrement":1, "null":1 } ) foreign keys id int ( pk ) origin_field_id int ( fk to fields.id ) remote_field_id int ( fk to fields.id ) sample data for foreign keys: ( {"id":1,"origin_field_id":2, "remote_field_id":3 } ) types id int ( pk ) name varchar(40) sample data for foreign keys: ( {"id":1,"name":"BLOB" } ) * types_engines ( mapping table )* id int ( pk ) type_id int engine_id int sample data for foreign keys: ( {"id":1,"name":"BLOB" } ) Since I'm a relatively novice SQLer, I would appreciate if anyone can point out critical design flaws I have made and point out things I have not thought about and have not forseen that may be critical. Here are things I need addressed. I have a fork_id and parent_id for my databases table. I would like to track whether databases were forked from other ones, in addition to keeping revisions of the forks. Do I need both of these in order to do that? Is the way I have modeled the engines, types and types_engines sufficient? Since different databases have different field types, I thought this would be an ideal way of handling that. Is my general design "good"? Or are there normalization improvements you can spot? I realize that there are much more advanced features I'm not supporting such as views/triggers, but I think this will be useful in its simple nature.
