[site]: stackoverflow
[post_id]: 3431484
[parent_id]: 
[tags]: 
When to return a pointer, scalar and reference in C++?

I'm moving from Java to C++ and am a bit confused of the language's flexibility. One point is that there are three ways to store objects: A pointer, a reference and a scalar (storing the object itself if I understand it correctly). I tend to use references where possible, because that is as close to Java as possible. In some cases, e.g. getters for derived attributes, this is not possible: MyType &MyClass::getSomeAttribute() { MyType t; return t; } This does not compile, because t exists only within the scope of getSomeAttribute() and if I return a reference to it, it would point nowhere before the client can use it. Therefore I'm left with two options: Return a pointer Return a scalar Returning a pointer would look like this: MyType *MyClass::getSomeAttribute() { MyType *t = new MyType; return t; } This'd work, but the client would have to check this pointer for NULL in order to be really sure, something that's not necessary with references. Another problem is that the caller would have to make sure that t is deallocated, I'd rather not deal with that if I can avoid it. The alternative would be to return the object itself (scalar): MyType MyClass::getSomeAttribute() { MyType t; return t; } That's pretty straightforward and just what I want in this case: It feels like a reference and it can't be null. If the object is out of scope in the client's code, it is deleted. Pretty handy. However, I rarely see anyone doing that, is there a reason for that? Is there some kind of performance problem if I return a scalar instead of a pointer or reference? What is the most common/elegant approach to handle this problem?
