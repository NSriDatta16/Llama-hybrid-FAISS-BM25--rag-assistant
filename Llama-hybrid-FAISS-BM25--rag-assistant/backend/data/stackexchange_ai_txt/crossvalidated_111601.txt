[site]: crossvalidated
[post_id]: 111601
[parent_id]: 111530
[tags]: 
You might counteract the noise by learning very high number of trees. If pressing the button only moves the average value of the target by about 1%, then maybe you need around $10^4$ trees. If possible, you should obtain a bunch of triplets (x, Target(Features=x, IsButton=1), Target(Features=x, IsButton=0) ), i.e. comparing the result when the button is on and when the button is off for the same set of features. Then you learn the function Targer(x,1)-Target(x,0). Another way of action is to shift from the decision forest to another learning model, i.e. neural network, which is smoother and can be directly penalized for dependence on IsButton. The last idea is to learn IsButton as a function of Features and Target, instead of learning Target as a function of Features and IsButton.
