[site]: stackoverflow
[post_id]: 557750
[parent_id]: 557409
[tags]: 
Definitions I think it's important to define your terms before having this discussion. Unit test tests a single unit in isolation. For me, that's a class. A unit test will create an object, invoke a method, and check a result. It answers the question "does my code do what I intended it to do?" Integration test tests the combination of two components in the system. It is focused on the relationship between the components, not the components themselves. It answers the question "do these components work together as intended". System test tests the whole software system. It answers the question "does this software work as intended?" Acceptance test is an automated way for the customer answer the question "is this software what I think I want?". It is a kind of system test. Note that none of these tests answer questions like "is this software useful?" or "is this software easy to use?". All automated tests are limited by axiom " End-to-end is further than you think " - eventually a human has to sit down in front of a computer and look at your user interface. Comparisons Unit tests are faster and easier to write, faster to run, and easier to diagnose. They don't depend on "external" elements like a file system or a database, so they are much simpler/faster/reliable. Most unit tests continue to work as you refactor (and good unit tests are the only way to refactor safely). They absolutely require that your code be decoupled , which is hard, unless you write the test first. This combination of factors makes the Red/Green/Refactor sequence of TDD work so well. System tests are hard to write, because they have to go through so much setup to get to a specific situation that you want to test. They are brittle, because any change in the behavior of the software before can affect the sequence leading up to the situation you want to test, even if that behavior isn't relevant to the test. They are dramatically slower than unit tests for similar reasons. Failures can be very difficult to diagnose, both because it can take a long time to get to the point of failure, and because so much software is involved in the failure. In some software, system tests are very difficult to automate. Integration tests sit in between: they are easier to write, run, and diagnose than system tests, but with broader coverage than unit tests. Recommendation Use a combination of testing strategies to balance the costs and values of each.
