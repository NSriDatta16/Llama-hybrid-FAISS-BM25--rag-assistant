[site]: stackoverflow
[post_id]: 1996829
[parent_id]: 1989990
[tags]: 
You can create a separate table, with two columns: a pattern string and a key value (which is used to refer to your data tables). Lets call this table "search_index". Then, on any change to your data table entries, you update the "search_index" table: remove rows with keys of changed data table rows for each column in data table, use the first X characters of the data, and add them to search_index with the key You can work out the details yourself, but in this way, you just build your own (partial) search index. When querying, you can use up to X characters to search in the search_index table alone. If the user types more than X characters you at least have a limited set of data table rows to search in. So you can search those 60k rows easily. Find a good value for X to balance storage requirements and usability and performance. EDIT : Looks like you do not want to search only the beginning of the words? Well, then you should not just use the "first X characters", but you should split the data into single words, and use the full words in search_index. Though in practice you will still have around a fourth of the index storage requirements compared to giving all columns an index. So, its still a good thing to build your own "search_index".
