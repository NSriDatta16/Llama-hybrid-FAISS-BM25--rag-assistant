[site]: stackoverflow
[post_id]: 3810890
[parent_id]: 3810794
[tags]: 
class AbstractInfo { public: virtual ~AbstractInfo(); virtual X f(); ... }; class Info_1 : public AbstractInfo { ... }; class Info_2 : public AbstractInfo { ... }; AbstractInfo* factory(inputs...) { if (conditions where you would want an Info_1) return new Info_1(...); else if (condtions for an Info_2) return new Info_2(...); else moan_loudly(); } If you don't want the factory method to become a single point of maintenance as downstream client code adds Info types, you can instead provide some mechanism for client code to register methods for creation of those derived objects. Check out the Gang of Four's Design Patterns book for creational patterns, or google them.
