[site]: stackoverflow
[post_id]: 5682818
[parent_id]: 5682713
[tags]: 
The memory used by the string in calc() will be released after the calc function exits. Deleting each tst object has nothing to do with it because there are no class members. What I think you are seeing is that there are potentially 200 threads running. Since you detach all of the threads and never join them, you have no guarantee the first 100 have actually finished before you start the next 100. Also, because you are extending these strings over and over again by appending while at the same time allocating memory in other threads, I imagine your heap fragmentation is really really really bad. Say that one thread has just released memory for a 256 byte string. The other threads have run on ahead and none of them need a 256 byte string anymore. That space is now just wasted, but is still allocated to the program. Some options that could help: Use .reserve(your_largest_expected_string_size) before placing data into your string. This will help avoid the fragmentation problem because almost all strings will be the same size. A customized string allocator class. You could write your own. You could replace your heap allocator with something like jemalloc or tcmalloc. For a server application that handles clients that come and go you can get great performance using a per-client memory pool. Allocate a large memory pool in one block. Make all allocations use the pool (via the STL allocator parameters) and when the client exits free the entire pool.
