[site]: crossvalidated
[post_id]: 330153
[parent_id]: 
[tags]: 
Predictors in random Forest

I am building a random forest to predict a binary variable y . I have several predictors named x1..n . One predictor, lets say x1 , is a very strong predictor of y but only in some cases (see below) while the others x2..n are fair predictors in all cases. Specifically, x1 is a strong predictor when a variable z is greater than a threshold A . Now if I do a standard random forest ( randomForest(y~x1+x2+...) ), x1 has a low importance and the overall prediction is not as good as it could be if the random forest was taking into account that x1 is a very good predictor when z>A . Is there a way to indicate to the random forest that the power of prediction of x1 is high only when z>A ? Subsidiary question : if A is unknown, is a model able to find the optimum A value for which x1 would be the best predictor? Thank you for your help. I did my best to explain my problem but do not hesitate to tell me if something is still unclear. Note: I posted a related question on a more specific case (for decision tree) there : https://stackoverflow.com/questions/48910293/conditional-partioning Edit Thank you for your help. I show an example below to illustrate the issue. In this example y is build directly from x1 , x2..5 = x1 + noise . When z is random. Since when z>=5 , y is explicitly defined by x1 the prediction should be perfect. But this is true only if the random forest is trained only with y~x1+z and not with the full set of variable y~x1+x2+x3+x4+x5+z . Of course all of this make sense since, as Tim Biegeleisen writes, the random forest chooses the variable which allows the best split at each node (and obviously this is not x1 ). But is there a way to indicate to the random forest that the power of prediction of x1 is high only when z>A? Since I know in this example that when z>=5 y=f(x1) I could train two random forest (for z>=5 and z ) but in practice I don't know for which value of z, x1 is the best predictor. Regarding the comment of Stephan Kolassa, I also included some tests with the z variable ( +z and *z ) library(randomForest); set.seed(100) x1 .5,1,0);x2=jitter(x1,amount=.5);x3 =5],y[z>=5]) # 0 1 # 0 86 0 # 1 0 87 #Trained with x1,x2,x3,x4,x5 rf =5],y[z>=5]) # 0 1 # 0 80 6 # 1 6 81 #Trained with x1,x2,x3,x4,x5,z rf =5],y[z>=5]) # 0 1 # 0 83 3 # 1 3 84 #Trained with x1*z,x2,x3,x4,x5 rf =5],y[z>=5]) # 0 1 # 0 83 3 # 1 3 84 #Trained for z>=5 rf =5])~x1[z>=5]+x2[z>=5]+x3[z>=5]+x4[z>=5]+x5[z>=5],importance=T) varImpPlot(rf,type=1) p =5]) # 0 1 # 0 86 0 # 1 0 87 Edit The solution of RUser4512 (which requires to know the threshold A) is working : x_1_bis = x1 * (z>=5) - 99 * (z =5],y[z>=5]) 0 1 0 86 0 1 0 87 And Stephan Kolassa is also right : with more data the rf succeeds to partition the training dataset : set.seed(100) x1 .5,1,0);x2=jitter(x1,amount=.5);x3 =5],y[z>=5]) 0 1 0 3043 1 1 1 3011 and the variable importance is more meaningful ( x1 and z are found as the most important). Thanks all.
