[site]: stackoverflow
[post_id]: 4070234
[parent_id]: 4068273
[tags]: 
You could arrange your data by column. i.e. have one BitSet for column listing the cars/rows which have that feature. This allows you to take advantage of the fast and/or operations provided by BitSet. Using these features you should be able to achieve less than 2 micro-seconds for the search and the count of each feature. For a 40,000 * 900 dataset, the following prints average search time 1396 ns. average count time 1234 ns. This should a few orders of magnitude faster than you can get with a RDBMS database. Even one million rows, take less than 50 micro-seconds each. public static void main(String... args) throws IOException { final int rows = 40 * 1000; final int cols = 900; List features = new ArrayList (); features.add(new BitSet(rows)); features.add(new BitSet(rows)); for (int i = 2; i data, int[] factors) { matches.clear(); matches.or(data.get(factors[0])); for (int i = 1, factorsLength = factors.length; i
