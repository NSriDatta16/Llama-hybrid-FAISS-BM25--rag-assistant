[site]: stackoverflow
[post_id]: 4610458
[parent_id]: 
[tags]: 
Elegantly initializing openmp threads in parallel for loop

I have a for loop that uses a (somewhat complicated) counter object sp_ct to initialize an array. The serial code looks like sp_ct.depos(0); for(int p=0;p My counter supports parallelization because it can be initialized to the state after p increments, leading to the following working code-fragment: int firstloop=-1; #pragma omp parallel for \ default(none) shared(size,in) firstprivate(sp_ct,firstloop) for(int p=0;p I dislike this because of the clutter that obscures what is really going on, and because it has an unnecessary branch inside the loop (Yes, I know that this is likely to not have a measurable influence on running time because it is so predictable...). I would prefer to write something like #pragma omp parallel for default(none) shared(size,in) firstprivate(sp_ct,firstloop) for(int p=0;p Is this possible?
