[site]: stackoverflow
[post_id]: 5333818
[parent_id]: 5318614
[tags]: 
sreader = new StreamReader(uplSOWDoc.FileContent, Encoding.Unicode); Congratulations, you are the one millionth coder to get bitten by “Encoding.Unicode”. There is no such thing as the “Unicode encoding”. Unicode is the character set, which has many different encodings. Encoding.Unicode is actually the specific encoding UTF-16LE, in which characters are encoded as UTF-16 “code units” and then each 16-bit code unit is written to bytes in a little-endian order. This is the native in-memory Unicode string format for Windows NT, but you almost never want to use it for reading or writing files. Being a 2-byte-per-unit encoding, it isn't ASCII-compatible, and it's not very efficient for storage or on the wire. These days UTF-8 is a much more common encoding used for Unicode text. But Microsoft's misnaming of UTF-16LE as “Unicode” continues to confuse and fool users who just want to “support Unicode”. As Encoding.Unicode is a non-ASCII-compatible encoding, trying to read files in an ASCII-superset encoding (such as UTF-8 or a Windows default code page like 1252 Western European) will make an enormous illegible mess of everything, not just the non-ASCII characters. In this case the encoding your file is stored in is Windows code page 1252. So read it with: sreader= new StreamReader(uplSOWDoc.FileContent, Encoding.GetEncoding(1252)); I'd leave it at that. Don't bother trying to “convert to ASCII”. Those smart quotes are perfectly good characters and should be supported like any other Unicode character; if you are having problems displaying smart quotes you are probably mangling all other non-ASCII characters too. Best fix the problem that's causing that to happen, rather than try to avoid it for just a few common cases.
