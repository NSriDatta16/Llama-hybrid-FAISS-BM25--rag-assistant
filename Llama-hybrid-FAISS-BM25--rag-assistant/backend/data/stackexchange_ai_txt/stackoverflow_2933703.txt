[site]: stackoverflow
[post_id]: 2933703
[parent_id]: 2849099
[tags]: 
This was my solution: class xxxx(TestCase): def setUp(self): import _mysql db=_mysql.connect('xxxx', 'xxxx', 'xxxx', "test_xxxxxxx") db.query(open('sql/xxxxxx.sql').read()) The sql file was a sequence of insert statements that I exported using phpMyAdmin. Reading sql statements is much faster than importing a JSON or YAML fixture. This is surely not the most elegant solution, but it worked. According to the third answer in Loading SQL dump before running Django tests , you just need to drop this sql file in the 'sql' directory inside the app directory. This worked for me for the production database when doing 'manage.py syncdb', but for some reason this data wasn't actually imported into the test database when doing 'manage.py test', even though the line 'Installing custom SQL for xxxx.xxxx model' appeared in the output. So, I wrote my own code inside setUp()
