[site]: stackoverflow
[post_id]: 2901626
[parent_id]: 2707055
[tags]: 
You summoned me from the FogBugz StackExchange. My name is Jude, I'm the current search architect for FogBugz. Here's a rough outline of how the FogBugz On Demand search architecture is set up[1]: For reasons related to data portability, security, etc., we keep all of our On Demand databases and indices separate. While we do use Lucene (Lucene.NET, actually), we've modded its backend fairly substantially so that it can store its index entirely in the database. Additionally, a local cache is maintained on each webhost so that unnecessary database hits can be avoided whenever possible. Our filters are almost entirely database-side (since they're used by aspects of FogBugz outside of search), so our search parser separates queries into full-text and non-full-text components, executes the lookups, and combines the results. This is a little unfortunate, as it voids many useful optimizations that Lucene is capable of making. There are a few benefits to what we've done. Managing the accounts is quite simple, since client data and their index are stored in the same place. There are some negatives too, though, such as a set of really pesky edge case searches which underperform our minimum standards. Retrospectively, our search was cool and well done for its time. If I were to do it again, however, I would discourage this approach . Simply, unless your search domain is very special or you're willing to dedicate a developer to blazingly fast search, you're probably going to be outperformed by an excellent product like ElasticSearch, Solr, or Xapian. If I were doing this today, unless my search domain was extremely specific, I would probably use ElasticSearch, Solr, or Xapian for my database-backed full-text search solution. As for which, that depends on your auxiliary needs (platform, type of queries, extensibility, tolerance for one set of quirks over another, etc.) On the topic of one large index versus many(!) scattered indices: Both can work. I think the decision really lies with what kind of architecture you're looking to build, and what kind of performance you need. You can be pretty flexible if you decide that a 2-second search response is reasonable, but once you start saying that anything over 200ms is unacceptable, your options start disappearing pretty quickly. While maintaining a single large search index for all of your clients can be vastly more efficient than handling lots of small indices, it's not necessarily faster (as you pointed out). I personally feel that, in a secure environment, the benefit of keeping your client data separated is not to be underestimated. When your index gets corrupted, it won't bring all search to a halt; silly little bugs won't expose sensitive data; user accounts stay modular- it's easier to extract a set of accounts and plop them onto a new server; etc. I'm not sure if that answered your question, but I hope that I at least satisfied your curiosity :-) [1]: In 2013, FogBugz began powering its search and filtering capabilities with ElasticSearch. We like it.
