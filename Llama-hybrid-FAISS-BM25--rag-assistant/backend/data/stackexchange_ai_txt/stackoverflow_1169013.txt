[site]: stackoverflow
[post_id]: 1169013
[parent_id]: 1168202
[tags]: 
Learning a functional language is a big plus, regardless of whether or not you ever use it in your day job. Consider the following: One of the biggest recommendations for successful concurrent programming is to avoid mutable state in your threaded objects whenever possible. Functional programming teaches you how to do this. Most functional programmers, once they get over the not-insubstantial learning curve, claim that their techniques make them far more productive than they can be in standard imperative languages. Their code is more bug-free, and a fraction of the size as that of other languages. Think of the productivity boost you got when you finally understood regular expressions. Now put that on steroids. That's what FP can feel like. Functional techniques are rapidly making their way into imperative programming. Think closures in C#, and Javascript, and soon (maybe, if we're lucky) in Java. It's very likely the two worlds will soon come together. Finally, in job interviews, knowing a functional language will help you stand out from your average J2EE/.NET clone. It marks you as a self-starter, a disciplined learner, and a passionate programmer -- whether or not you actually are any of these things. Just don't become yet another slathering Scala fanboy, scolding your soon-to-be boss about how he's missing out on the best programming techniques since... you get the idea. It's never good to insult a prospective employer. For me, studying Haskell has made programming a lot more fun than it used to be. It may do the same for you as well. Good luck!
