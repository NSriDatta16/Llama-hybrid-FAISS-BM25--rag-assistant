[site]: stackoverflow
[post_id]: 1197839
[parent_id]: 1197783
[tags]: 
Frankly, the less policies, the better. The more policies you have, the greater the incentive for NOT using version control. What happens then is: Code is developed on parallel, uncontrolled source control systems, and just the final revision goes to the official one. People delay committing as much as possible, decreasing visibility of what they are doing to other developers. People will actually avoid committing something if they can get away with it, and some will find a way to get away with it. In fact, I think your three check-in policies are already too much. For instance: Having code being peer-reviewed before check-in makes it much more difficult to have work-in-progress stored there. Instead, if the source control system allows it (and many do), control whether the source is peer reviewed or not. With some systems you can create a life cycle for a revision, with others you might create branches, and still others you might use tags. Having a work-item associated with a check-in makes it impossible for developers to do exploratory programming, or having initiative on possible improvements. It stifles the developers. Instead, make sure that any revision going into integration tests or user acceptance tests, not to mention production itself, is associated with a work item. This might sound anti-Enterprise, but it's just some things we have learned in a few decades of software development. Most enterprise organizations haven't been clued in to this, but, eventually, they will. So, you might go the very opposite way, but don't say no one ever told you. I recommend the Agile Manifest , and, particularly, Lean Software Development for general principles. Or, taking Stack Overflow design philosophy into account, make the system reward the behavior you want.
