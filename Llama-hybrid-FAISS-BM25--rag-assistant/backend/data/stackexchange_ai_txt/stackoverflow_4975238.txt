[site]: stackoverflow
[post_id]: 4975238
[parent_id]: 4972110
[tags]: 
If you want to describe the rules (i.e. relationships) then a class diagram is probably more appropriate than an activity diagram. Here's a pretty crude but nevertheless representative example: Activity diagrams are appropriate for describing chained activities (processes). In this case however, the behaviour is pretty simple; a User can submit Posts (Question or Answer) and also vote on Posts. The diagram captures the following rules (reading directly from the relationships): Each User may submit many Posts A User need not submit any Posts Each Post must be submitted by exactly one User Each User may vote on many Posts A User need not vote on any Posts Each Post may be voted on by many Users A Post need not be voted on by any Users Each Vote has a type which is either up or down A Post is either a Question or an Answer A Question may have many Answers A Question need not have any Answers Each Answer must be a response to exactly one Question Note the model is missing some important rules (e.g. can't up/down vote your own posts). Also missing Comments (another subtype of Post) and other salient attributes (e.g. User name, Post text, etc.). Hopefully representative enough for purpose though. hth. PS: I took liberties with syntax for Vote.type . It should really be defined as an enumeration, but for these purposes the way it's shown is sufficient. Apologies to any lurking UML police :-)
