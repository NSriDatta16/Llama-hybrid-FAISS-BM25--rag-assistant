[site]: stackoverflow
[post_id]: 4281354
[parent_id]: 4280258
[tags]: 
Seems like everybody agrees that I need to introduce my own callback, so here's my (so far final) working solution: var MAX_FETCH_MORE = 3; /* * Searches for itemId, loading more items up to MAX_FETCH_MORE times if necessary. When * the item has been found or the maximum reload count has been reached, the callback * is invoked, which is passed the DOM object of the item wrapped in a jQuery object, or * undefined. */ function executeWithItem(itemId, callback, fetchCycleCounter) { // initialize fetchCycleCounter on first iteration if(!fetchCycleCounter) fetchCycleCounter = 0; console.debug('iteration ' + fetchCycleCounter + '/' + MAX_FETCH_MORE); // try to find the item in the DOM match = $('div[data-item-id="' + itemId + '"]').get(0); if(match) { // if it has been found, invoke the callback, then terminate console.debug('found: ' + match); callback($(match)); } else if(!match && fetchCycleCounter Thanks to everybody for encouraging me to introduce another callback, it hasn't turned out looking so bad. :)
