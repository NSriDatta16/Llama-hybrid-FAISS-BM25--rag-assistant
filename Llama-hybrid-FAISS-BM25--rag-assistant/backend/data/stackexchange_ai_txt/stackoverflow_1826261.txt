[site]: stackoverflow
[post_id]: 1826261
[parent_id]: 1826205
[tags]: 
It is still O(n) - this is because it grows asymptotically at the same rate as O(n) Big O notation is used for the upper-bound of algorithmic growth - that is, it's a function that the algorithm is guaranteed to grow at the same rate as, or slower than. In the average case your algorithm will grow at rate O(n/m) where m is some estimate of the how dense the indexes are in your strings (0 = no indexes, 1 = index at every character). Assuming that's roughly constant over n you can ignore the m and still say the algorithm is O(n) . The fact that, in the real world, your algorithm will almost certainly be faster than O(n) doesn't stop it begina n O(n) function. Take a look at this page , particularly: The symbol O is used to describe an asymptotic upper bound for the magnitude of a function in terms of another, simpler function. This means that for x > k, when x tends to infinity, the value f(x) will always be inferior to C *g(x) (with C a constant).
