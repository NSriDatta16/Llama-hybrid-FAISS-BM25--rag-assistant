[site]: stackoverflow
[post_id]: 5506753
[parent_id]: 5504967
[tags]: 
Judging from your post/comments you seem to know what tests you should write already, and it pretty much matches what I'd test after first glance at your code. Few obvious things to begin with: Null argument exception check Mock Service and Logger to check whether they're called with proper data Stub Mapper (and potentially Service) to check whether correct results are actually returned Now, the difficult part. Depending whether your base class is something you have access to (eg. can change it without too much trouble), you can try approach called Extract & Override : Mark BeginRequest/EndRequest as virtual in base class Do nothing with them in derived class Introduce new, testable class deriving from class you want to test; override methods from base class (BeginRequest/EndRequest), making them eg. change some internal value which you can later easily verify Code could look more or less like this: Base { protected virtual void BeginRequest(TheRequest request) { ... } protected virtual void EndRequest() { ... } } Derived : Base // class you want to test { // your regular implementation goes here // virtual methods remain the same } TestableDerived : Derived // class you'll actually test { // here you could for example expose some properties // determining whether Begin/EndRequest were actually called, // calls were made in correct order and so on - whatever makes // it easier to verify later protected override void BeginRequest(TheRequest request) { ... } protected override void EndRequest() { ... } } You can find more about this technique in Art of Unit Testing book, as well as Working Effectively with Legacy Code . Even tho I believe there are probably more elegant solutions, this one should enable you to test flows and verify general correctness of interactions within DoSomething method. Problems of course appear when you don't have access to base class and you can't modify its code. Unfortunatelly I don't have "out of book" solution to such situation, but perhaps you could create virtual wrapper around Begin/EndRequest in Derived, and still use extract & override TestableDerived.
