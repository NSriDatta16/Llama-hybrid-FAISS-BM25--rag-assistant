[site]: stackoverflow
[post_id]: 3415938
[parent_id]: 
[tags]: 
Dynamically passing parameters from ASPX host to Silverlight 4 xaml code-behind

Okay, first off, I'm new to Silverlight and am looking for someone to provide guidance as to whether the following solution is the prescribed way of going about this. Yesterday I started working on a problem that, at first blush, seemed pretty simple and straightforward. I need to pass a few parameters from an ASPX code-behind, which hosts a Silverlight object tag, to the code-behind of one, or more, of the Silverlight user controls within the hosted Silverlight application. So, after doing some research, this is the basic solution I developed... I found out that an attribute can be added to the object tag called initParams, a comma delimited list of parameter names and values can be added to this attribute. Like so... This is fine, except that the DealerId parameter is basically hard-coded in the object tag, not real useful. The next thing that I did was replace this object tag with a literal control, and set the text of the literal control within the page's code-behind to the value of a StringBuilder (where I built up the full object tag along with dynamically adding the correct DealerId value). In the following example, the DealerId is hard-coded, but you get the idea. var sb = new StringBuilder(); sb.Append(@" "); sb.Append(@" "); sb.Append(@" "); sb.Append(@" "); sb.Append(@" "); sb.Append(@" "); sb.Append(@" ", 40); sb.Append(@" "); litObjectTag.Text = sb.ToString(); My goal, if this initial design is sane, is to then pull this object tag creation into a server control, which will have a DealerId property, which in turn will be set within the hosts code-behind. At this point, I have the host dynamically adding parameter values to the object tag's initParams attribute, the next step is to get these values and leverage them within the hosted Silverlight application. I found a few articles to help out with this; I'm creating a public dictionary within the App.xaml.cs, and setting it within the Application_Startup event... public IDictionary InitConfigDictionary; private void Application_Startup(object sender, StartupEventArgs e) { InitConfigDictionary = e.InitParams; this.RootVisual = new MainPage(); } Now, I can access this public dictionary from the code-behind of any .xaml user control, like this... App app = (App)Application.Current; var dealerId = app.InitConfigDictionary["DealerId"]; This design works just fine, I'm just looking for some guidance, since I'm new to Silverlight. Once again, the implementation works, but it seems like a whole lot of work to go through just to pass a dynamic value from the host to the .xaml files. Because I'm new to Silverlight, I'm hoping that someone with more experience can say that either: a) Patrick, you're insane, why are you going through all this work when clearly in Silverlight you would accomplish this through the use of "xxxxxx". b) Yeah, Patrick, it's a drag, but this design is basically what you have to do in Silverlight. Once again, any guidance that could be provided would be much appreciated, thanks. - PWK
