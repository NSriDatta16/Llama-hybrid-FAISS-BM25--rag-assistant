[site]: stackoverflow
[post_id]: 5488989
[parent_id]: 1694529
[tags]: 
I think the right way is to use the view chain built into the view hierarchy. For your subviews that are pushed onto the main view, do not use the generic UIView, but instead subclass UIView (or one of its variants like UIImageView) to make MYView : UIView (or whatever supertype you want, such as UIImageView). In the implementation for YourView, implement the touchesBegan method. This method will then get invoked when that view is touched. All you need to have in that implementation is an instance method: - (void) touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event ; { // cannot handle this event. pass off to super [self.superview touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event]; } this touchesBegan is a responder api, so you dont need to declare it in your public or private interface; it's one of those magic api's you just have to know about. This self.superview will bubble up the request eventually to the viewController. In the viewController, then, implement this touchesBegan to handle the touch. Note that the touches location (CGPoint) is automatically adjusted relative to the encompassing view for you as it is bounced up the view hierarchy chain.
