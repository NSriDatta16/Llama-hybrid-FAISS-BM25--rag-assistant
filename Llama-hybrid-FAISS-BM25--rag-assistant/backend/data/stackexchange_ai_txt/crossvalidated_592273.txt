[site]: crossvalidated
[post_id]: 592273
[parent_id]: 
[tags]: 
How to understand the _dual_coef_ parameter in sklearn's kernel svm?

I have a small kernel svm code. from sklearn import datasets from sklearn.svm import SVC import numpy as np # Load the IRIS dataset for demonstration iris = datasets.load_iris() X = iris.data y = iris.target # Train-test split X_train, y_train = X[:140], y[:140] X_test, y_test = X[140:], y[140:] print(X.shape, X_train.shape, X_test.shape) # prints (150, 4) (140, 4) (10, 4) # Fit a rbf kernel SVM gamma = 0.7 svc = SVC(kernel='rbf', gamma=gamma, C=64, decision_function_shape='ovo') # svc = SVC(kernel='rbf', gamma=gamma, C=64, probability=True, decision_function_shape='ovo') # svc = SVC(kernel='rbf', gamma=gamma, C=64) svc.fit(X_train, y_train) print(svc.score(X_test, y_test)) # Get prediction for a point X_test using train SVM, svc def get_pred(svc, X_test): def RBF(x,z,gamma,axis=None): return np.exp((-gamma*np.linalg.norm(x-z, axis=axis)**2)) A = [] # Loop over all suport vectors to calculate K(Xi, X_test), for Xi belongs to the set of support vectors for x in svc.support_vectors_: # A.append(RBF(x, X_test, svc._gamma)) A.append(RBF(x, X_test, gamma)) A = np.array(A) return (np.sum(svc._dual_coef_*A)+svc.intercept_) for i in range(X_test.shape[0]): print(get_pred(svc, X_test[i])) print(svc.decision_function([X_test[i]])) # The output should same I want to understand the role of the _dual_coef_ parameter in svm, so I implemented a prediction function get_pred of svm myself. According to the mathematical expression of svm here . These parameters can be accessed through the attributes dual_coef_ which holds the product $y_i \alpha_i$ , support_vectors_ which holds the support vectors, and intercept_ which holds the independent term $b$ $$ \sum_{i\in SV}y_i \alpha_i K(x, x_i) + b $$ = sum(_dual_coef_ * K) + intercepte_ But the output of the function I implemented is different from the function that comes with svm. (150, 4) (140, 4) (10, 4) 1.0 [-4.24105215 -4.38979215 -3.52427244] [[-0.42115154 -1.06817962 -2.36560357]] [-2.34091311 -2.48965311 -1.6241334 ] [[-0.61615543 -0.86736268 -0.47127757]] [-4.34859785 -4.49733785 -3.63181814] [[-0.86662754 -1.14637099 -1.94948189]] [-4.14797518 -4.29671518 -3.43119547] [[-0.32438219 -1.12869709 -2.30877848]] [-3.80505008 -3.95379007 -3.08827037] [[-0.3341635 -1.03315401 -2.05161515]] [-3.83632958 -3.98506957 -3.11954987] [[-0.62920059 -0.97474828 -1.84626328]] [-3.94804683 -4.09678683 -3.23126712] [[-0.90348467 -1.04135143 -1.61709331]] [-4.24990319 -4.39864319 -3.53312348] [[-0.83485694 -1.07466796 -1.95426087]] [-3.39840443 -3.54714443 -2.68162472] [[-0.52530703 -0.9980642 -1.48891578]] [-3.03105705 -3.17979705 -2.31427734] [[-0.93796146 -1.09834078 -0.60863738]] How can I understand this parameter _dual_coef_ , or put another way, how can I implement the prediction function of the kernel svm myself? This problem has been bugging me for weeks. the value _dual_coef_ and dual_coef_ is same. print(svc.dual_coef_) print(svc._dual_coef_) output [[ 0.00000000e+00 2.89411525e-01 6.42572850e-01 3.49005828e-01 4.89527283e-01 8.68509232e-01 1.70309469e-02 -6.31981548e-01 -0.00000000e+00 -2.24785323e-01 -2.22867415e-01 -1.54772961e-01 -1.23240646e-01 -0.00000000e+00 -0.00000000e+00 -2.23517902e-01 -2.78405788e-01 -3.61957209e-02 -7.60290361e-01 -3.84061473e-01 -5.84800982e-01 -1.58444536e-01 -1.38767496e-01 -1.03491055e-01 -5.16469524e-01 -2.61912890e-01 -0.00000000e+00 -0.00000000e+00 -1.83395105e-01 -4.11383501e-01 -0.00000000e+00 -1.78565851e-01 -0.00000000e+00 -0.00000000e+00] [ 3.18138228e-02 3.34311828e-01 7.33944808e-01 4.55819619e-01 3.83152925e-01 9.40418724e-01 4.18306844e-02 0.00000000e+00 3.18472098e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00 6.40000000e+01 5.54398171e+01 2.84918781e+01 6.40000000e+01 0.00000000e+00 0.00000000e+00 0.00000000e+00 -0.00000000e+00 -3.97780557e+00 -0.00000000e+00 -0.00000000e+00 -2.19815863e-01 -7.62771179e-01 -3.35105127e+01 -5.64451371e+00 -3.65670112e+01 -2.59917431e+00 -5.61374655e-01 -6.40000000e+01 -7.86608975e-01 -6.40000000e+01 -2.48682797e+00]] [[ 0.00000000e+00 2.89411525e-01 6.42572850e-01 3.49005828e-01 4.89527283e-01 8.68509232e-01 1.70309469e-02 -6.31981548e-01 -0.00000000e+00 -2.24785323e-01 -2.22867415e-01 -1.54772961e-01 -1.23240646e-01 -0.00000000e+00 -0.00000000e+00 -2.23517902e-01 -2.78405788e-01 -3.61957209e-02 -7.60290361e-01 -3.84061473e-01 -5.84800982e-01 -1.58444536e-01 -1.38767496e-01 -1.03491055e-01 -5.16469524e-01 -2.61912890e-01 -0.00000000e+00 -0.00000000e+00 -1.83395105e-01 -4.11383501e-01 -0.00000000e+00 -1.78565851e-01 -0.00000000e+00 -0.00000000e+00] [ 3.18138228e-02 3.34311828e-01 7.33944808e-01 4.55819619e-01 3.83152925e-01 9.40418724e-01 4.18306844e-02 0.00000000e+00 3.18472098e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00 6.40000000e+01 5.54398171e+01 2.84918781e+01 6.40000000e+01 0.00000000e+00 0.00000000e+00 0.00000000e+00 -0.00000000e+00 -3.97780557e+00 -0.00000000e+00 -0.00000000e+00 -2.19815863e-01 -7.62771179e-01 -3.35105127e+01 -5.64451371e+00 -3.65670112e+01 -2.59917431e+00 -5.61374655e-01 -6.40000000e+01 -7.86608975e-01 -6.40000000e+01 -2.48682797e+00]]
