[site]: stackoverflow
[post_id]: 336368
[parent_id]: 18655
[tags]: 
I'm puzzled about the "lock your database in stone" argument in favor of stored procs. I can take my ActiveRecord model and move it from MySQL to Postgres to SQLite, thank you very much. I couldn't do that with anything stored proc-based unless I wanted to rewrite them all. I assume you mean that you're locking your database schema in stone. That argument is more interesting. To some extent I think it's argued from the perspective of an application with minimal unit tests and code coverage - the applications where you don't change your code out of sheer fear you're going to break "something." My experience with stored-proc-based systems is minimal though. I'm curious, in large applications, how do you manage all of the data relations? On one page I show a product with a picture. On another page I show a product and the user who created it. On another page I show a product and the comments about it. On another page I need to show that product with no picture joined with a table of specifications about it.... etc. etc. I have a data model with a lot of relationships. I assume you don't write a stored proc for every combination? The DRY principle is the one that I worry about. How many queries am I writing where I'm re-left-joining (effectively re-coding) my relationships? And, while we're talking about locking the schema, how many stored procs am I going to need to re-write?
