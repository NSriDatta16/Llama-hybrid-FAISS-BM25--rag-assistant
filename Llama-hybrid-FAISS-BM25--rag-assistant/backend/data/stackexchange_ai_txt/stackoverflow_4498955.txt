[site]: stackoverflow
[post_id]: 4498955
[parent_id]: 4498835
[tags]: 
Often when you want the behaviour of two collections you need to maintain two collections. A simple approach is to have a Queue and a HashSet, and always perform an add to both and remove from the HashMap when you remove from the Queue. An alternative is to use a LinkedHashSet. This retains the order elements were added and you can remove the first/oldest element each time. A third option is to use just a Queue. While you might like O(1) lookup time, you may find it is fast enough to meet your requirements by just searching every element. This might be much faster than you expect. i.e. 1000 elements should be less than 10 micro-seconds. EDIT: I agree that two collections is best when you don't know the length. However to show you a brute force search can be fast too. The slowest object to look for is one which is not there. (As it has to compare every element) Queue points = new ArrayBlockingQueue (1024); for(int i=0;i Prints Average contains() took 5.1 us You may need to test this for your data type as times of equals() and sizes of queue can vary, but you may be surprise what you can do in 10 micro-seconds and that may be fast enough.
