[site]: datascience
[post_id]: 37028
[parent_id]: 37025
[tags]: 
With your three labels: positive, neutral or negative - it seems you are talking more about sentiment analysis . This answer the question: what are the emotions of the person who wrote this piece of text? Semantic analysis is a larger term, meaning to analyse the meaning contained within text, not just the sentiment. It looks for relationships among the words, how they are combined and how often certain words appear together. To gain a deeper insight into your text, you could read about topics such as: Semantic Analysis in general might refer to your starting point, where you parse a sentence to understand and label the various parts of speech (POS). A tool for this in Python is spaCy , which words very nicely and also provides visualisations to show to your boss. Named Entity Recognition (NER) - finding parts of speech (POS) that refer to an entity and linking them to pronouns appearing later in the text. An example is to distinguish between Apple the company, and apple the fruit. Embeddings - finding latent representation of individual words e.g. using Word2Vec . Text is processed to produce a single embedding for individual words in the form of an n-dimensional vector. You can then compute similarity measures (e.g. cosine similarity) between the vectors for certain words to analyse how they are related. Lemmatisation - this method reduces many forms of words to their base forms, which means they appear more regularly and we don't consider e.g. verb conjugations as separate words. As an example, tracking , tracked , tracker , might all be reduced to the base form: track . Your next step could be to search for blogs and introductions to any of those terms I mentioned. Here is an example parse-tree from spaCy: Reducing dimensions This is something that would then refer to the vectors, which describe each of your words. Generally, the Word2Vec vectors are something like 300-dimensional. You might want to visualise the words, plotting them in 2d space. You can try a method like t-SNE , which will map the 300d vectors to 2d space, allowing nice plots showing relationships, while retaining as much of the original relationships described in the 300d space. There will, of couse, be some information loss, but you could not have visualised the 300d vectors in the first place! Using the vectors for your words, you can compute things like the similarity (on a scale between 0 and 1) between president and CEO is something like 0.92 - meaning they are almost synonyms!
