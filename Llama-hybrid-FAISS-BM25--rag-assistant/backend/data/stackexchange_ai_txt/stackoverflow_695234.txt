[site]: stackoverflow
[post_id]: 695234
[parent_id]: 694818
[tags]: 
A bit more detail might be useful. Events first. So, you have your program running. You then create an event - the function call to use is CreateEvent(). That event has two states; signalled and non-signalled. (You choose the state it starts in). You can now wait on that event - which is to say, you can for example give that event to an operating system function call and then wait on that event. When the operating system is done, it will change the state of the event to signalled and your Wait() function call will return. Now, if you've only one thread, this isn't much use - you could just call the operating system function and wait for it to return. But if you have multiple threads and you want to communicate between them - well, you can't make function calls to other threads. What you do instead is communicate with the other thread, tell it to do something and give it the event, and then Wait() until it's done. Now, messages. A program can have what's called a "message loop", which is a thread which blocks, reading the programs message queue. You can send a message to a thread (or window) and it will automatically be read by that thread. So one use is if you have a number of threads is to issue a termination message - it's time to quit. Another is to let the thread know you want it to do something - and a message can take two integer values as data, so you can pass over the handle to an event, too, so the thread can signal you when its done. (Or you could have it send you a message when its done; it all depends on how you want to organize your code - event based or message based).
