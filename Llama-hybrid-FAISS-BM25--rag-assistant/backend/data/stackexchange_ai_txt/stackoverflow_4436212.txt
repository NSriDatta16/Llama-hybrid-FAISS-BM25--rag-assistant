[site]: stackoverflow
[post_id]: 4436212
[parent_id]: 4435391
[tags]: 
I'm not sure if you were looking for a gentle nudge to correct the code presented, or if you're soliciting other ways to do it. My first thought went to mapcar : (defun negate-tree (tree) (mapcar (lambda (e) (cond ((null e) nil) ((listp e) (negate-tree e)) (t (- e)))) tree)) You can then generalize out the negation aspect, and write map-tree instead, accepting a function to apply to the atoms in the tree: (defun map-tree (f tree) (mapcar (lambda (e) (cond ((null e) nil) ((listp e) (map-tree f e)) (t (funcall f e)))) tree)) You can call on it with, say, the unary negation function: (map-tree #'- '(1 -2 (3 4))) Such a call assumes that all the leaves in the tree are either nil accommodated by the unary negation function. Accepting nil as a possible leaf in the tree makes the visitation algorithm a little messy, and it's not clear whether the provided function f should be applied to all leaves—even those that are nil —so that the function itself can decide whether and how to treat nil . Another deficiency with this version is how it treats cons cells that are not proper lists . Note that function listp returns true for all cons cells—even those that do not constitute proper lists—but mapcar does require that its input be a proper list. We can wind up along our " listp true" path, recursively calling on mapcar , and have mapcar fail for receiving an improper list. That means that the algorithm above either would need to test cons cells to see if they're proper lists before handing them to mapcar , perhaps treating those that aren't as leaves (I'm reluctant to say "atoms" here), or be documented that the expected tree structure is made up of proper lists of proper lists. If you need to accept top-level "trees" that are not necessarily lists themselves, meaning that a lone atom is a valid tree, or nil is a valid tree, you can tear apart the constituent parts of the function above and write one that only uses mapcar after determining that the tree under inspection is a list.
