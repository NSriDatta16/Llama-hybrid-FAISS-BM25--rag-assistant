[site]: stackoverflow
[post_id]: 3778856
[parent_id]: 
[tags]: 
Is it really necessary to implement a Repository when using Entity Framework?

I'm studying MVC and EF at the moment and I see quite often in the articles on those subjects that controller manipulates data via a Repository object instead of directly using LINQ to Entities. I created a small web application to test some ideas. It declares the following interface as an abstraction of the data storage public interface ITinyShopDataService { IQueryable Categories { get; } IQueryable Products { get; } } Then I have a class that inherits from the generated class TinyShopDataContext (inherited from ObjectContext) and implements ITinyShopDataService. public class TinyShopDataService : TinyShopDataContext, ITinyShopDataService { public new IQueryable Products { get { return base.Products; } } public new IQueryable Categories { get { return base.Categories; } } } Finally, a controller uses an implementation of ITinyShopDataService to get the data, e.g. for displaying products of a specific category. public class HomeController : Controller { private ITinyShopDataService _dataService; public HomeController(ITinyShopDataService dataService) { _dataService = dataService; } public ViewResult ProductList(int categoryId) { var category = _dataService.Categories.First(c => c.Id == categoryId); var products = category.Products.ToList(); return View(products); } } I think the controller above possesses some positive properties. It is easily testable because of data service being injected. It uses LINQ statements that query an abstract data storage in an implementation-neutral way. So, I don't see any benefit of adding a Repository between the controller and the ObjectContext-derived class. What do I miss? (Sorry, it was a bit too long for the first post)
