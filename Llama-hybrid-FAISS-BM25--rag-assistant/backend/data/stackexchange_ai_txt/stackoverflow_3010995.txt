[site]: stackoverflow
[post_id]: 3010995
[parent_id]: 2381175
[tags]: 
I would suggest (if possible) getting the centre point of the postcode and then applying the Haversine formula to find all stores within a certain radius. The formula here is in kilometres. You will have to change the relevant numbers and it will work for miles. Eg: Convert 6371.392896 to miles. DECLARE @radiusInKm AS FLOAT DECLARE @lat2Compare AS FLOAT DECLARE @long2Compare AS FLOAT SET @radiusInKm = 5.000 SET @lat2Compare = insert_your_lat_to_compare_here SET @long2Compare = insert_you_long_to_compare_here SELECT * FROM insert_your_table_here WITH(NOLOCK) WHERE (6371.392896*2*ATN2(SQRT((sin((radians(GeoLatitude - @lat2Compare)) / 2) * sin((radians(GeoLatitude - @lat2Compare)) / 2)) + (cos(radians(GeoLatitude)) * cos(radians(@lat2Compare)) * sin(radians(GeoLongitude - @long2Compare)/2) * sin(radians(GeoLongitude - @long2Compare)/2))) , SQRT(1-((sin((radians(GeoLatitude - @lat2Compare)) / 2) * sin((radians(GeoLatitude - @lat2Compare)) / 2)) + (cos(radians(GeoLatitude)) * cos(radians(@lat2Compare)) * sin(radians(GeoLongitude - @long2Compare)/2) * sin(radians(GeoLongitude - @long2Compare)/2))) ))) if you would like to perform the Haversine formula in C#, double resultDistance = 0.0; double avgRadiusOfEarth = 6371.392896; //Radius of the earth differ, I'm taking the average. //Haversine formula //distance = R * 2 * aTan2 ( square root of A, square root of 1 - A ) // where A = sinus squared (difference in latitude / 2) + (cosine of latitude 1 * cosine of latitude 2 * sinus squared (difference in longitude / 2)) // and R = the circumference of the earth double differenceInLat = DegreeToRadian(currentLatitude - latitudeToCompare); double differenceInLong = DegreeToRadian(currentLongitude - longtitudeToCompare); double aInnerFormula = Math.Cos(DegreeToRadian(currentLatitude)) * Math.Cos(DegreeToRadian(latitudeToCompare)) * Math.Sin(differenceInLong / 2) * Math.Sin(differenceInLong / 2); double aFormula = (Math.Sin((differenceInLat) / 2) * Math.Sin((differenceInLat) / 2)) + (aInnerFormula); resultDistance = avgRadiusOfEarth * 2 * Math.Atan2(Math.Sqrt(aFormula), Math.Sqrt(1 - aFormula)); DegreesToRadian is a function I custom created. It is a simple 1 liner of "Math.PI * angle / 180.0" For LINQ, you can use the C# math functions as well as all C# checks. Eg: != equals not equal, etc. See the following as an example. It is not complete, so kindly tweak it to your liking. var linqQuery = from linqCollection in insert_your_collection_here where s_lat != nothing select Math.ACos(Math.Sin(DegreesToRadian(sentlng) * Math.Pi / 180)) Look up the MSDN link below for all simple LINQ example. Have a play around with it, hope this helps My blog entry - SQL Haversine MSDN - 101 LINQ Samples
