[site]: stackoverflow
[post_id]: 3284870
[parent_id]: 3260818
[tags]: 
I was able to implement this design using Mongoid. I wrote extensive tests and I was able to get my solution working; however, I am not satisfied with my implementation. I believe that my implementation would be a difficult to maintain. I'm posting my non-elegant solution here. Hopefully, this will help someone with the start of a better implementation. class App include Mongoid::Document field :name references_one :account references_many :events, :stored_as => :array, :inverse_of => :apps validates_presence_of :name end class Event include Mongoid::Document field :name, :type => String references_one :account validates_presence_of :name, :account before_destroy :remove_app_associations def apps App.where(:event_ids => self.id).to_a end def apps= app_array unless app_array.kind_of?(Array) app_array = [app_array] end # disassociate existing apps that are not included in app_array disassociate_apps App.where(:event_ids => self.id).excludes(:id => app_array.map(&:id)).to_a # find existing app relationship ids existing_relationship_ids = App.where(:event_ids => self.id, :only => [:id]).map(&:id) # filter out existing relationship ids before making the new relationship to app push_apps app_array.reject { |app| existing_relationship_ids.include?(app.id) } end def push_app app unless app.event_ids.include?(self.id) app.event_ids
