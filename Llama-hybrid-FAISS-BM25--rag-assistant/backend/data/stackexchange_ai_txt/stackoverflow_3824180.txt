[site]: stackoverflow
[post_id]: 3824180
[parent_id]: 3820214
[tags]: 
The code below works with my compiler. It outputs "20", which was the value I gave to the member OLSR::ra_addr_. A few unstated assumptions I had to add to get things compiling: OLSR or some parent defines recv() so that it's not abstract. Class Handler has at least one virtual function (otherwise using Handler* with dynamic_cast would be ill-formed, and your compiler should complain). You call OLSR::send_pkt at some point. I assume you have checked for its debug output line. (But maybe it's being called with a different PriQueue object?) Ignore Packet::get() . That's just there to give me a pointer so I can call functions matching your signatures. If you can't figure out why your code isn't working, always try this: Make a copy of all your code, and then remove things a bit at a time until you either pinpoint the problem or get a simple example that you can post in entirety and ask why it doesn't do what you expect. #include class Packet { public: static Packet* get() { return &dummy_; } private: static Packet dummy_; }; Packet Packet::dummy_; class Handler { public: virtual ~Handler() {} }; class NsObject : public Handler { public: virtual void recv(Packet*, Handler* callback = 0) = 0; }; class Connector : public NsObject {}; class Queue : public Connector { public: virtual void recv(Packet*, Handler*) {} }; class DropTail : public Queue {}; class OLSR; class PriQueue : public DropTail { public: inline PriQueue() : DropTail(), olsr_callback(NULL) {} void recv(Packet* p, Handler* h); Packet* deque(); private: OLSR* olsr_callback; }; class Agent : public Connector {}; class OLSR : public Agent { public: explicit OLSR(int ra_addr) : Agent(), ra_addr_(ra_addr) {} inline int ra_addr() { return ra_addr_; } void send_pkt(PriQueue* q); Packet* add_rr_ack(Packet* p, PriQueue*); virtual void recv(Packet*, Handler*) {} private: int ra_addr_; }; void PriQueue::recv(Packet* p, Handler* h) { olsr_callback = dynamic_cast (h); } Packet* PriQueue::deque() { return olsr_callback->add_rr_ack(Packet::get(), this); } void OLSR::send_pkt(PriQueue* q) { q->recv( Packet::get(), this ); } Packet* OLSR::add_rr_ack(Packet* p, PriQueue*) { std::cout
