[site]: stackoverflow
[post_id]: 5426275
[parent_id]: 
[tags]: 
JPA - "versioned" entity, design advice needed

Imagine the following two entities. Element is simple class containing some data: @Entity public class Element { private String data; public String getData() { return data; } public void setData(String data) { this.data = data; } } Next class, named VersionedElement , extends Element and contains different versions along with current version. Here is my "solution": @Entity public class VersionedElement extends Element { private Set versions; private Element currentVersion; @Override public String getData() { return getCurrentVersion().getData(); } @Override public void setData(String data) { getCurrentVersion().setData(data); } @OneToMany public Set getVersions() { return versions; } public void setVersions(Set versions) { this.versions = versions; } @ManyToOne public Element getCurrentVersion() { return currentVersion; } public void setCurrentVersion(Element currentVersion) { this.currentVersion = currentVersion; } } And I don't like what I've written, something wrong with it, too straightforward approach. First of all, in the latter class currentVersion isn't limited by and has no relation to versions . Looks like the code is lacking some helper classes, or abstraction level, or JPA annotation technique, or all above. I need an elegant, worthy of JPA manual solution for this simple case. Any hints, links or code snippets would be appreciated.
