[site]: stackoverflow
[post_id]: 3284076
[parent_id]: 3266179
[tags]: 
To me, the Null Object pattern feels like a placebo. A real object and a null object may have completely different meanings, but act very similar. Just like a placebo, the null object will trick you into believing there's nothing wrong, but something could be very wrong. I think it's a good practice to fail early and fail often . In the end, you'll want to distinguish between a real object and a null object somewhere, and at that point it would be no different from checking against a null pointer. From the Wikipedia article : The advantage of this approach over a working default implementation is that a Null Object is very predictable and has no side effects: it does nothing . It won't point out any problems either. Think of what will happen when a null object travels all the way through your application. Then, at some point, your application expects certain behavior from the object, which the null object implementation fails to deliver. At that point your application may crash or enter an invalid state. You'll have a very hard time tracing the origin of the null object . A null pointer would have thrown an exception right at the beginning, drawing your attention directly to the source of the problem. The only example the Wikipedia article gives, is that of an empty collection instead of null . This is a very good practice, but a lousy example of the null object pattern, because it's dealing with a collection of objects, instead of a single instance. In short, I'm sure it's feasible to create null object implementations for all your classes, but I strongly recommend against it.
