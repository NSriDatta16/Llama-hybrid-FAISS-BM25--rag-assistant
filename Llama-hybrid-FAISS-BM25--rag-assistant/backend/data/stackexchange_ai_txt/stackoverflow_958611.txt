[site]: stackoverflow
[post_id]: 958611
[parent_id]: 938719
[tags]: 
Firstly, in your activity, where you're calling requestLocationUpdates() , the second argument is the minimum time, not the scheduled time. You're currently asking for an update AT MOST every 2 seconds. It won't actually report anything until it can... sometimes it takes a little while. If your GPS is unresponsive/slow elsewhere as well (like in Maps) try restarting the phone (some people claim you have to turn off the phone then pull out the battery to completely de-energized the GPS radio). Hopefully this will bring it back up to it's normally responsive state. Also, it shouldn't matter, but you said you were using the 1.5 SDK, but you didn't mention if you were compiling against it (as opposed to 1.1). I only bring this up because the GPS works better/faster in Cupcake, so I was wondering what your phone was actually running. UPDATE: I wrote up a little test on my own to see if I could duplicate your problem. It consists of just three user-generated files and I tested it with SDK 1.1 and 1.5 In the main Activity (I simply used Main.java ): package org.example.LocationTest; import android.app.Activity; import android.location.Location; import android.location.LocationListener; import android.location.LocationManager; import android.os.Bundle; import android.util.Log; import android.widget.TextView; public class Main extends Activity implements LocationListener{ private LocationManager myManager; private TextView tv; /********************************************************************** * Activity overrides below **********************************************************************/ @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); // get a handle to our TextView so we can write to it later tv = (TextView) findViewById(R.id.TextView01); // set up the LocationManager myManager = (LocationManager) getSystemService(LOCATION_SERVICE); } @Override protected void onDestroy() { stopListening(); super.onDestroy(); } @Override protected void onPause() { stopListening(); super.onPause(); } @Override protected void onResume() { startListening(); super.onResume(); } /********************************************************************** * helpers for starting/stopping monitoring of GPS changes below **********************************************************************/ private void startListening() { myManager.requestLocationUpdates( LocationManager.GPS_PROVIDER, 0, 0, this ); } private void stopListening() { if (myManager != null) myManager.removeUpdates(this); } /********************************************************************** * LocationListener overrides below **********************************************************************/ @Override public void onLocationChanged(Location location) { // we got new location info. lets display it in the textview String s = ""; s += "Time: " + location.getTime() + "\n"; s += "\tLatitude: " + location.getLatitude() + "\n"; s += "\tLongitude: " + location.getLongitude() + "\n"; s += "\tAccuracy: " + location.getAccuracy() + "\n"; tv.setText(s); } @Override public void onProviderDisabled(String provider) {} @Override public void onProviderEnabled(String provider) {} @Override public void onStatusChanged(String provider, int status, Bundle extras) {} } In your "main" layout file (I used main.xml ): Then, in your AndroidManifest.xml : You should be able to compile/run this just fine. If, using this, you still can't get a fix it's not a software problem. You either have a bad GPS or it just can't get a lock on any satellites. You can download the source here .
