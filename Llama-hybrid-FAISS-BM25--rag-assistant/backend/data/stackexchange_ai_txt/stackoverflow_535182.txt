[site]: stackoverflow
[post_id]: 535182
[parent_id]: 535141
[tags]: 
However, a user with Javascript enabled who loads the page and then immediately hits add to cart gets whisked away from the page, too. When are you starting up your scripts? If you're using document onload, it will be waiting for all the images to download before initialising, which would indeed give the user a chance to click-to-buy. If you trigger the JS enhancement when the DOM is ready, either by just putting your at the bottom of the page, or by using a DOMContentLoaded-style event supplied by your framework, the links should adapt fast enough that the user is very unlikely to be clicking the button first. If you really, really want to delay clicks that are placed between the element first being parsed, and the document being loaded, you could write something like: function methodcall(obj, name) { return function() { obj[name].call(obj); }; } ... Buy ... So that it'd just spin there polling (and, on IE, leaking memory) until the link's real click handler was in place. It's pretty ugly though, and fragile in that if your script breaks for some reason (and it's JavaScript, so it's pretty likely that at some point, on some browser, it will), your button will break. This problem applies to all potential solutions that rely on a later-running JavaScript enabling previously-disabled actions. And there's nothing worse for business than a broken buy button.
