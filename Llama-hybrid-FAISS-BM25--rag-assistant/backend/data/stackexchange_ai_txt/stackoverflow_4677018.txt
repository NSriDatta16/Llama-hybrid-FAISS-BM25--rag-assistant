[site]: stackoverflow
[post_id]: 4677018
[parent_id]: 4676607
[tags]: 
Picking up where @Brian and @BrokenGlass left off... let inline median input = let sorted = input |> Seq.toArray |> Array.sort let m1,m2 = let len = sorted.Length-1 |> float len/2. |> floor |> int, len/2. |> ceil |> int (sorted.[m1] + sorted.[m2] |> float)/2. //by marking the function inline, we gain some extra flexibility with static member constraints //val inline median : // seq -> float // when ^a : comparison and ^a : (static member ( + ) : ^a * ^a -> ^b) and // ^b : (static member op_Explicit : ^b -> float) (kinda makes me long for implicit conversions between numeric types) Here's a link describing an on average O(n) algorithm with a C# implementation.
