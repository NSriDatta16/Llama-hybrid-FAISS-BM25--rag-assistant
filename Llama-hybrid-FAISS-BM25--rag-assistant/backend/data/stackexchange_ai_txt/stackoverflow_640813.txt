[site]: stackoverflow
[post_id]: 640813
[parent_id]: 624457
[tags]: 
I think I found a possible solution, it involves passing an array of Zend Form elements to the Zend Form::__construct() method. The constructor takes an array of options, one of them is called " elements ". Have a look at the source code within the Zend Framework library. I coded a new private method within the controller, called buildSurveyForm(). Note : the object, passed as a parameter, is built from a huge SQL query with half a dozen JOIN statements, fetching data from a few tables (surveys, questions, answers, etc.) within the database. One of the public attributes for this class consists of an array of questions, stored as objects (with public methods/attributes as well, etc.). Same for answers. The code for building these classes is pretty trivial and out of topic here. Here's the code within the survey controller. I copy/pasted and edited/dropped a few lines to make it a lot clearer : private function buildSurveyForm(MyApp_Object_Survey $survey) { foreach ($survey->questions as $question) { $element = new Zend_Form_Element_MultiCheckbox($question->order); $element->addMultiOptions($question->getAnswersLabels()); $element->setName($question->order); $element->setLabel($question->title); $elements[] = $element; } // Here's the trick : $formOptions = array('elements' => $elements); $surveyForm = new MyApp_Survey_Form($formOptions); $urlHelper = $this->_helper->getHelper('url'); $surveyForm->setAction($urlHelper->url(array( 'controller' => 'survey', 'action' => 'vote'), 'default' )); $surveyForm->setMethod('post'); $this->_forms['survey'] = $surveyForm; return $this->_forms['survey']; } The MyApp Survey Form class only contains a Submit button within the init() method. The dynamically generated elements with the code above are added BEFORE this submit button (which is unexpected, but useful). This class simply extends Zend_Form. Then, within survey controller / view action : public function viewAction() { $surveyModel = $this->_model['survey']; $survey = $surveyModel->getFullSurvey($this->_getParam('id')); $survey = new MyApp_Object_Survey($survey); // Calls above private method : $surveyForm = $this->buildSurveyForm($survey); $this->view->assign(array( 'surveyForm' => $surveyForm, )); } Adding filters, validators and decorators to form elements is now trivial. My proposal is a bit dirty, but I think it gets the job done. I will add a new proposal if I find something more elegant. Feel free to post different answers/solutions.
