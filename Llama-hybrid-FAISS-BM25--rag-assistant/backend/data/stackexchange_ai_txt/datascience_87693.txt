[site]: datascience
[post_id]: 87693
[parent_id]: 87675
[tags]: 
To test formulas like these numerically , you need to compute sample statistics, like this: import numpy as np A = np.arange(12).reshape(4, 3) # Note: A is a fixed matrix b_avg = np.array([2, 4, 5]) # b is random, with a mean vector b_var = 1e0 * np.eye(b_avg.size) # and a (co)variance matrix # generate a random sample of b vectors n_sample = 10**4 b_sample = np.random.multivariate_normal( mean=b_avg, cov=b_var, size=n_sample).T # compute sample moments (each column is a sample) b_avg_smp = b_sample.mean(axis=1) b_var_smp = np.cov(b_sample) # compare sample moments to population moments print('b vector: statistics') print('Averages (population vs. sample):', b_avg.tolist(), b_avg_smp.round(1).tolist(), sep='\n') print('Variances (population vs. sample):', b_var.tolist(), b_var_smp.round(1).tolist(), sep='\n') This will give something like this: b vector: statistics Averages (population vs. sample): [2, 4, 5] [2.0, 4.0, 5.0] Variances (population vs. sample): [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]] [[1.0, -0.0, 0.0], [-0.0, 1.0, 0.0], [0.0, 0.0, 1.0]] i.e. the sample statistics are consistent with the specified $b$ distribution. Then we can transform the $b$ sample into a $y$ sample, and do the analogous comparison, using your analytically computed $y$ moments, i.e. # transform b moments into y moments (@ is matrix multiply) y_avg = A @ b_avg y_var = A @ b_var @ A.T # transform b sample into y sample, and compute sample moments y_sample = A @ b_sample y_avg_smp = y_sample.mean(axis=1) y_var_smp = np.cov(y_sample) # compare population vs. sample moments print('y vector: statistics') print('Averages (population vs. sample):', y_avg.tolist(), y_avg_smp.round(1).tolist(), sep='\n') print('Variances (population vs. sample):', y_var.tolist(), y_var_smp.round(1).tolist(), sep='\n') This will give something like this: y vector: statistics Averages (population vs. sample): [14, 47, 80, 113] [13.9, 46.8, 79.7, 112.7] Variances (population vs. sample): [[5.0, 14.0, 23.0, 32.0], [14.0, 50.0, 86.0, 122.0], [23.0, 86.0, 149.0, 212.0], [32.0, 122.0, 212.0, 302.0]] [[5.0, 14.0, 23.1, 32.1], [14.0, 50.1, 86.1, 122.1], [23.1, 86.1, 149.0, 212.0], [32.1, 122.1, 212.0, 302.0]] i.e. the sample $y$ statistics are consistent with the analytically computed $y$ distribution. (Alternatively, the uncertainties package will automatically do linearized error propagation for Gaussian random variables.)
