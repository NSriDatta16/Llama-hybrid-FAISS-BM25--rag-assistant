[site]: stackoverflow
[post_id]: 5446787
[parent_id]: 
[tags]: 
How to convert my state machine to java?

Here is the normal way I would do things in C++: class object { public: enum { STATE_ACTIVE = 0, STATE_INACTIVE, OBJ_NUM_STATES, } int m_State; virtual void UpdateState () { switch(this->m_state) { case STATE_ACTIVE: /* do stuff*/ break; case STATE_INACTIVE: /* do stuff*/ break; } } } class SpecialGameObject : public Object { public: enum { STATE_SPECIAL_A = OBJ_NUM_STATES + 1, STATE_SPECIAL_B, SPECIAL_NUM_STATES, } virtual void UpdateState () { Object::UpdateState(); switch(this->m_State) { case STATE_ACTIVE: /* do extra stuff */ break; case STATE_SPECIAL_A: /* do special stuff*/ break; case STATE_SPECIAL_B: /* do special stuff*/ break; } } } I am trying to figure out to get all of this functionality to work in java. Specifically I need working: 1) Ability for derived classes to have state values that automatically line up after the derived state values. That way I can add new state values to the base class without worrying about them overlapping the rage of state values used in any of the derived classes. 2) Ability to use the state values as cases in switch statements. I looked into using static final ints to implement my state values. But those can't be used as case statements. Then I looked into extending enums, but that isn't allowed. Does anyone have any suggestions for me? Thank you
