[site]: crossvalidated
[post_id]: 249852
[parent_id]: 249772
[tags]: 
The first three models you've constructed differ in the ways the parameters are defined, but they have the same number of the parameters and the fits are equivalent in every way except for the numerical values of the parameters. We can illustrate this with a plain linear model - mixed models just complicate the issue. set.seed(101) dd Use model.matrix to see what parameters R will construct when fitting the model (you could also use names(coef(...)) on the output of lm() , or names(fixef(...)) on the output of (g)lmer ). tmpf If we use the * operator, we get the interaction plus the main effects; if we redundantly specify the main effects, R silently drops them. all.equal(m1,tmpf(~light*tide)) ## TRUE all.equal(m1,tmpf(~light+light*tide)) ## TRUE all.equal(m1,tmpf(~light+tide+light*tide)) ## TRUE If we use : but leave out one of the main effects we get the same number of parameters (9), but they are organized differently: colnames(m2 As I explain elsewhere , it rarely makes sense to test the model with interactions present but main effects missing; the only ways that I know of to do this are to construct the dummy variables yourself (either by hand, or by constructing the model matrix, dropping the terms you don't want, and using the remaining model matrix columns as (numeric) predictor variables. The MuMIn package tries to do the right thing: from ?dredge , By default, marginality constraints are respected, so “all possible combinations” include only those containing interactions with their respective main effects and all lower order terms. library(MuMIn) full_model As you can see dredge has not tried to fit any models with the interaction but missing some main effects.
