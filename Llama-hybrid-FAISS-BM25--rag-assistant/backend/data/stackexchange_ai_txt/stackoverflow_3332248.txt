[site]: stackoverflow
[post_id]: 3332248
[parent_id]: 3332224
[tags]: 
I am not an Apache expert, so I cannot speak to whether or not having 3,000 redirects in .htaccess is a problem (though my gut tells me it probably is a bad idea). However, as a simpler solution to your problem, why not use mod_rewrite to do your redirects? RewriteRule ^/blog/(.+)/(.+)/(.+).html$ http://new.blog.com/$1/$2/$3/ [R=permanent] This uses a regex to match old URLs and rewrite them to new ones. The [R=permanent] instructs mod_rewrite to issue a 301 with the new URL instead of silently rewriting the request internally. In your example, it looks like you've added the day of the post to the URL, which does not exist in the old URL. Since you obviously cannot use a regexp to divine the day an arbitrary post was made, this method may not work for you. If you can drop the day from the URL, then you're good to go. Edit : The first time I read your question, I missed the last paragraph. ("I can't use RedirectMatch because I added date variable in my new url.") In this case, you can use mod_rewrite's RewriteMap to lookup the day component of a post. You have two options: Use a hashmap to perform fast lookups in a static file. This means all your old URLs will work, but any new posts cannot be accessed using the old URL scheme. Use a script to grab the day. In option one, create a file called posts.txt and put: /yyyy/mm/pppp dd ...for each post where yyyy is the year of the post, mm is the month, and pppp is the post name (without the .html). When you're done, run: $ httxt2dbm -i posts.txt -o posts.map Then we add to to the server/virtual server config: (Note the path is a filesystem path, not a URL.) RewriteMap postday dbm:/path/to/file/posts.map RewriteRule ^/blog/(.+)/(.+)/(.+).html$ http://new.blog.com/$1/$2/${postday:$1/$2/$3}/$3/ [R=permanent] In option two, use pgm:/path/to/script/lookup.whatever as your RewriteMap. See the mod_rewrite documentation for more info about using a script. Doing the lookup in mod_rewrite is better than just redirecting to a script which looks up the date and then redirects to the final destination because you should never redirect more than once . Issuing a 301 or 302 incurs a round trip cost, which increases the latency of your page load time.
