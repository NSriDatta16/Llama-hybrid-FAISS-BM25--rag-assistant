[site]: stackoverflow
[post_id]: 3161080
[parent_id]: 232395
[tags]: 
I like the DataTable approach proposed by MusiGenesis above. The nice thing about it is that you can sort by any valid SQL 'order by' string that uses column names, e.g. "x, y desc, z" for 'order by x, y desc, z'. (FWIW, I could not get it to work using column ordinals, e.g. "3,2,1 " for 'order by 3,2,1') I used only integers, but clearly you could add mixed type data into the DataTable and sort it any which way. In the example below, I first loaded some unsorted integer data into a tblToBeSorted in Sandbox (not shown). With the table and its data already existing, I load it (unsorted) into a 2D integer array, then to a DataTable. The array of DataRows is the sorted version of DataTable. The example is a little odd in that I load my array from the DB and could have sorted it then, but I just wanted to get an unsorted array into C# to use with the DataTable object. static void Main(string[] args) { SqlConnection cnnX = new SqlConnection("Data Source=r90jroughgarden\\;Initial Catalog=Sandbox;Integrated Security=True"); SqlCommand cmdX = new SqlCommand("select * from tblToBeSorted", cnnX); cmdX.CommandType = CommandType.Text; SqlDataReader rdrX = null; if (cnnX.State == ConnectionState.Closed) cnnX.Open(); int[,] aintSortingArray = new int[100, 4]; //i, elementid, planid, timeid try { //Load unsorted table data from DB to array rdrX = cmdX.ExecuteReader(); if (!rdrX.HasRows) return; int i = -1; while (rdrX.Read() && i
