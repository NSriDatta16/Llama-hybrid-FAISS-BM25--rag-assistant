[site]: stackoverflow
[post_id]: 3516117
[parent_id]: 3514796
[tags]: 
It sounds like you've got an awful lot of abstraction going on here, but I can't tell if it's real abstraction of if you're just using a few terms (e.g. "helper") ambiguously. Generally speaking, your model would talk to your datasource. That datasource could be a database, a service, a flat file or some combination of any/all of those. I regularly use an external service to gather most of the model data and then flesh that out a bit with some application-centric data pulled from a specialized database. Helpers generally appear at the view level and help you to display the data. My own preferences is for the model to return raw data to the controller which forwards that same raw data onto the view which is responsible for figuring out how to display it. There are exceptions to that flow from time to time, but they're pretty rare in my own usage patterns. Short version: keep things simple (and within convention). Let your controller handle application flow and application-centric activities (e.g. messaging, session access, etc.), let your model handle data access/retrieval/manipulation and let your view worry about how to display the data returned from the model (through the controller). Adding more abstraction on top of that is generally just adding unnecessary complexity. Without any real knowledge of your situation, this is only guidance, but I've found it to be generally solid guidance in my own experience.
