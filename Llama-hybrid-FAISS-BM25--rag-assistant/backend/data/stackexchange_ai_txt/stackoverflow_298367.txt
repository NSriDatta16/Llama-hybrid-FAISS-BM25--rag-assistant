[site]: stackoverflow
[post_id]: 298367
[parent_id]: 298319
[tags]: 
As this is a many-to-many relation, you migth might want to have a look at using an associative table. Using your example, it might look something like this: Your tables that can have comments: +----------+------------+ | student | student_id | +----------+------------+ | Steve | 12 | | Larry | 57 | | Sunshine | 88 | +----------+------------+ +--------+---------+ | dept | dept_id | +--------+---------+ | Math | 2 | | P.E. | 5 | | Drama | 12 | +--------+---------+ Then you need to keep track of the actual comments: +-----------------------+------------+ | comment | comment_id | +-----------------------+------------+ | I love Math! | 3 | | Larry is my hero... | 5 | | Sunshine Now, you need an association between these tables, this is where your associative table comes into play. You now associate what student or dept has what comments, like this: +------------+------------+ | student_id | comment_id | +------------+------------+ | 57 | 5 | | 57 | 6 | +------------+------------+ +---------+------------+ | dept_id | comment_id | +---------+------------+ | 2 | 3 | +---------+------------+ This is both effective and elegant. Give it a shot! (And to save you another question perhaps) You could of course use just one association table if you are concerned about having so many association tables, but I would advice against it since it is not as neat and removes some possibilities for referential integrity checks that you can have with the first solution: +-----------+------------+---------+ | entity_id | comment_id | entity | +-----------+------------+---------+ | 57 | 5 | student | | 57 | 6 | student | | 2 | 3 | dept | +-----------+------------+---------+ (Which in turn should prompt you to add a lookup table for those entities... but let's not go there)
