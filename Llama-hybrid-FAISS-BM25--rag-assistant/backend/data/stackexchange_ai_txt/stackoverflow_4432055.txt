[site]: stackoverflow
[post_id]: 4432055
[parent_id]: 
[tags]: 
Typical .NET DDD architecture vs Django/Rails practices

I've accustomed to all typical domain driven design practices that are prevalent in most of publications and blogs concerned with modern .net programming. It surprised me, hence, that when I spoke with some Django folks they didn't care about persistance ignorance, viewmodels etc. Lack of persistance ignorance part may seem understandable when you use Active Record in Django or Rails, neverthelsess using domain entities in views looks like pure evil after having worked a bit in ASP.NET MVC land (same with Java mvc frameworks, I guess). It's not a single case, it pertains to an overwhelming majority of Django/Rails projects (which always were perceived as Ãœberagile). Why is that? Is it just because of dynamic language features which make practices like DI unnecessary? Or maybe there's to much overengineering in a enterprisy .NET/Java world? Do you know of any more architectural differences? Are there any lessons to be learned for .net/java world or, on the contrary, is it just that rubist and pythonistas haven't usually worked with big enough projects to understand the advantages of those patterns?
