[site]: stackoverflow
[post_id]: 5483567
[parent_id]: 5474211
[tags]: 
Unless you get to > 10^7 of rows, your database engine should do just fine, so given your numbers, there's nothing wrong with the regular approach that you suggest. Even if and when you do get there, a stronger server (scale-up) and a good DBA can help you scale further. In fact, the alternative that you suggest is far worse - you probably won't be able to index your availability column properly, which means that queries by date will be excruciatingly slow! For example, you'll probably want to run a query like: SELECT hotel_id FROM hotel_avail WHERE avaliable = TRUE AND avail_date = '2011-04-01' ; You need an index on the date column for that to run fast. On top of that, rolling your own availability and mask scheme adds to the complexity of your system. It'll be harder to understand and maintain your code that does the "availability magic". Believe me, I've been there - it may look pretty initially, but after a while you can't remember yourself how those tricks of yours are supposed to work and it becomes a nightmare. Finally, like @mark-tozzi mentioned, premature optimization is a bad idea. Despite all the trash talk that RDBMS's get lately, they usually perform much better than you expect and scale surprisingly well. They also usually to offer the most simple and reliable solution to your problem - 20+ years of development amounts to something. Where I work we use MS-SQL for a web application that handles billions of transactions per day, with some databases reaching hundreds of millions of rows and terrabytes of storage. We also use NoSQL (Riak, Couch, HBase) - but only where SQL can simply not go. This is not the case with your system.
