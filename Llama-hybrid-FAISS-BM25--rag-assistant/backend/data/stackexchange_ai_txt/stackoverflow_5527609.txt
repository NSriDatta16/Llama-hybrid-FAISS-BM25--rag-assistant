[site]: stackoverflow
[post_id]: 5527609
[parent_id]: 5524419
[tags]: 
It looks like the rendering code is highly inefficient for one simple reason: DOM manipulation is expensive. Whenever possible, you should manipulate the DOM once rather than several times. All other optimization in JavaScript/CoffeeScript is secondary. Here's the salient code (from the gist linked to from the second comment on ambertch's response): refresh: -> @list.listview("refresh") appendWord: (word)-> wv = new WordView({model: word}).render().el @list.append( wv ) @refresh() render: -> @list.html("") @model.each (word) => @appendWord(word) @refresh() So, on render , first the list's HTML is cleared; then for each word the list's HTML is cleared and the control is refreshed! I'm not familiar with jQuery Mobile, so I'm not sure whether the main penalty is incurred on append (as it is in jQuery) or on listview('refresh') , but it's easy to rewrite the loop to avoid both, and remove some function defining/calling overhead as well: render: -> html = [] @model.each (word) -> html.push(new WordView(model: word).render().el) @list.empty().append(html) Now you've got just one html setter and one refresh call, rather than one html setter, n append calls, and n+1 refresh calls!
