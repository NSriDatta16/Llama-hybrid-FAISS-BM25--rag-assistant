[site]: stackoverflow
[post_id]: 160275
[parent_id]: 160218
[tags]: 
It's a question of style, really; the subconscious rules I tend to follow are: Only evaluate 1 expression - so foo = (bar > baz) ? true : false , but NOT foo = (bar > baz && lotto && someArray.Contains(someValue)) ? true : false If I'm using it for display logic, e.g. Only really use it for assignment; never flow logic (so never (foo) ? FooIsTrue(foo) : FooIsALie(foo) ) Flow logic in ternary is itself a lie, ignore that last point. I like it because it's concise and elegant for simple assignment operations.
