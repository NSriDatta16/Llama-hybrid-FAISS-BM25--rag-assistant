[site]: stackoverflow
[post_id]: 5393211
[parent_id]: 5393087
[tags]: 
It looks like the following question may help you implement the first method you mention How can I override a getter on a property when using Core Data? So instead of doing return name =! nil ? name : self.parent.name; You could do something like... return [self primitiveValueForKey:@"name"] =! nil ? [self primitiveValueForKey:@"name"] : self.parent.name; Update to answer the query in the comments Apple recommends you do not do this. See the 'Custom Attribute and To-One Relationship Accessor Methods' section of the Apple documentation for Managed Object Accessor Methods . That provides more detail of how to do this properly (and encourages you not to.) Maybe if you have many properties that work in exactly the same way you could make a method such as recursiveValueFor: (NSString*) property; which can act as a generic wrapper around the recursion logic while not interfering with CoreData dynamic properties
