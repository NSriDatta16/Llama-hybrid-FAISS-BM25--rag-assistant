[site]: stackoverflow
[post_id]: 2500514
[parent_id]: 2500447
[tags]: 
EDIT: sorry, I started answering as it's C++ and not C. Yes then you should find your hash function and code it by yourself.. since you already know the average dimension of a set it's not so difficult, just choose a good hash function! But you'll need to codify a whole set in a single number if you want to check if a directory is already there. You can try by iteratively hashing the single numbers of the set: int hashcode = initvalue for (int i = 0; i in a way that the hashfunction depends on its previous value, the current number and the current index. What about STL sets? #include int nums[6] = {1,6,34,2,67,41}; set numbers; for( int i = 0; i ::const_iterator iter = numbers.begin(); iter != numbers.end(); ++iter ) cout Using this data structure you can easily store all your sets, but you need also a way to check if a set is already included in the directory. It's not clear: do you want to know if a set that have all the SAME elements exists already in the directory? You can do it manually by checking all the elements but since you have millions of them you should find a way to hash the elements of the set in an unique number and use a map of sets..
