[site]: stackoverflow
[post_id]: 987856
[parent_id]: 940984
[tags]: 
You have to ask yourself if what you really want to do is play around with parsers (admittedly fun, and what I prefer myself) or if you want to actually get work done on your poker bot. Mostly likely, exotic parsing techniques are overkill for what you need. Just choose a fast language with some straightforward, easy to use parsers. You should probably be able to process 10k hands / sec with straight C + flex. Or, ocamllex + ocamlyacc should be more than enough. If you have to hadoopify your code I think you're doing something wrong. Network latency should end up being your real bottleneck, not parsing speed. What kind of machine are you running this on? Another alternative is using a parser generator to autogenerate a parse table, and then hand optimizing that, or hand optimizing from the NFA (you probably won't save much though, and the tradeoff in programmer time probably isn't worth it). Combinator parsing is likely going to be slower. On average, for a given grammar of equivalent power LL will be slower than LALR. In particular, if the poker hands are actually parseable by an LALR parser, then bison/byacc + flex will beat ANTLR hands down, every time. I'm personally pretty happy with menhir, though it's a raging bitch and a half to get working with godi + ocamlbuild. --Nico
