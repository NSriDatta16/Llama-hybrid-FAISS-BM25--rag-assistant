[site]: stackoverflow
[post_id]: 2396620
[parent_id]: 
[tags]: 
Storing Data help, cannot be placed into TableView

I have encountered a problem of placing data into the Table View. Here is my current code. I am unable to load the results from the class I tried to use NSFetchedResultsController, but it won't work. Can any one see the mistake. This is the header file. #import #import #import #import "FlickrFetcher.h" @interface PersonList : UITableViewController { FlickrFetcher *fetcher; NSArray *nameList; NSArray *names; NSFetchedResultsController *results; NSArray *photos; } @property (retain, nonatomic)NSArray *nameList; @property (retain, nonatomic)NSArray *names; @property (retain, nonatomic)NSArray *photos; @property (retain, nonatomic)NSFetchedResultsController *results; @end This is the .m file. #import "PersonList.h" @implementation PersonList @synthesize nameList,names,results,photos; // The designated initializer. Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad. - (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil { if (self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) { self.title=@"Contacts"; // Custom initialization } return self; } // Implement viewDidLoad to do additional setup after loading the view, typically from a nib. - (void)viewDidLoad { fetcher = [FlickrFetcher sharedInstance]; NSString *path=[[NSBundle mainBundle]pathForResource:@"FakeData" ofType:@"plist"]; NSArray *array=[NSArray arrayWithContentsOfFile:path]; NSManagedObjectContext *context=[fetcher managedObjectContext]; if([fetcher databaseExists]==YES){ for(NSDictionary *dic in array){ PersonList *person=(PersonList *)[NSEntityDescription insertNewObjectForEntityForName:@"Person" inManagedObjectContext:context]; [person setNameList:[dic objectForKey:@"user"]]; [person setPhotos:[dic objectForKey:@"path"]]; names=[fetcher fetchManagedObjectsForEntity:@"Person" withPredicate:nil]; results=[fetcher fetchedResultsControllerForEntity:@"Person" withPredicate:nil]; } } [super viewDidLoad]; } /* // Override to allow orientations other than the default portrait orientation. - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation { // Return YES for supported orientations return (interfaceOrientation == UIInterfaceOrientationPortrait); } */ - (void)didReceiveMemoryWarning { // Releases the view if it doesn't have a superview. [super didReceiveMemoryWarning]; // Release any cached data, images, etc that aren't in use. } - (void)viewDidUnload { // Release any retained subviews of the main view. // e.g. self.myOutlet = nil; self.names=nil; } - (void)dealloc { [fetcher release]; [nameList release]; [super dealloc]; } #pragma mark - #pragma mark Table View Data Source Methods - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { return [[results sections] count]; } - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { NSLog(@"NOT REACHED HERE"); static NSString *SimpleTableIdentifier = @"SimpleTableIdentifier"; UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier: SimpleTableIdentifier]; if (cell == nil) { cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:SimpleTableIdentifier] autorelease]; } NSUInteger row = [indexPath row]; cell.textLabel.text = [[results sections] objectAtIndex:row]; return cell; } @end This the method for the FlickrFetcher method #import #import @interface FlickrFetcher : NSObject { NSManagedObjectModel *managedObjectModel; NSManagedObjectContext *managedObjectContext; NSPersistentStoreCoordinator *persistentStoreCoordinator; } // Returns the 'singleton' instance of this class + (id)sharedInstance; // Checks to see if any database exists on disk - (BOOL)databaseExists; // Returns the NSManagedObjectContext for inserting and fetching objects into the store - (NSManagedObjectContext *)managedObjectContext; // Returns an array of objects already in the database for the given Entity Name and Predicate - (NSArray *)fetchManagedObjectsForEntity:(NSString*)entityName withPredicate:(NSPredicate*)predicate; // Returns an NSFetchedResultsController for a given Entity Name and Predicate - (NSFetchedResultsController *)fetchedResultsControllerForEntity:(NSString*)entityName withPredicate:(NSPredicate*)predicate; @end
