[site]: stackoverflow
[post_id]: 1329309
[parent_id]: 1258047
[tags]: 
Halftoning is very efficient. Single-level halftone: Input: Pixels from your image; preconstructed "screen" containing threshold values. At runtime: For each color channel, for each pixel, select one threshold value (index into threshold array modulo the array dimensions). One comparison between the pixel and the threshold determines whether the output value is on or off. It generalizes to multi-level output as well, by using multiple screens. The interesting part is construction of the screens (threshold arrays). There are many variations -- clustered dot (AM), stochastic (FM), many variations and hybrids including blue noise and green noise (AM/FM). And you usually want a different screen for each color channel. The traditional clustered dot screens lay their dots out in rectangular grids that can be described by their frequency (low frequency = big dots) and angle (typically 15째 for Cyan, 75째 for Magenta, 90째 for Yellow and 45째 for Black). If you want to experiment, the Photoshop Bitmap with Halftone Screen Method (see this tutorial ) has an internal screen generator and will screen a greyscale image into a bitmap just like your example. The dithering methods suggested by others involve more per-pixel computation, and the output doesn't resemble your clustered dot screened halftone example.
