[site]: stackoverflow
[post_id]: 1160367
[parent_id]: 1160132
[tags]: 
I think what you are looking for is the State patten. This is similar to the strategy pattern except that each state object is normally given a reference to the context object (in your case this is the form) when it is created. This allows the different states to do things to the context object in response to events. When implementing a state pattern is is often preferable to make each seperate state inherit from an abstract base class. The base class can then implement the default operations in virtual methods and then you only have to override the operations that differ for each state. public interface IFormState { void EnableDisableControls(); } public class DefaultState : IFormState { private MyForm context; public DefaultState(MyForm context) { this.context = context; } protected MyForm Context { get { return this.context; } } public virtual void EnableDisableControls() { this.context.btnRecordCall.Enabled = true; this.context.btnAddMailOrStatusAction.Enabled = true; this.context.btnPayments.Enabled = true; this.context.btnAddressMaint.Enabled = true; this.context.btnFilter.Enabled = true; this.context.btnAddCoverage.Enabled = true; this.context.btnPolicyForms.Enabled = true; this.context.lblIsArchived.Text = ""; } } public class StateA : DefaultState { public StateA(MyForm context) : base(context) { } public override void EnableDisableControls() { base.EnableDisableControls(); this.Context.lblIsArchived.Text = "********** THIS CLAIM HAS BEEN ARCHIVED **********"; // etc... } }
