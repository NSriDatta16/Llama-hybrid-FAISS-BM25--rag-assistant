[site]: stackoverflow
[post_id]: 3726650
[parent_id]: 3724913
[tags]: 
Unfortunately, it is impossible for a machine to upcase/downcase/capitalize properly. It needs way too much contextual information for a computer to understand. That's why Ruby's String class only supports capitalization for ASCII characters, because there it's at least somewhat well-defined. What do I mean by "contextual information"? For example, to capitalize i properly, you need to know which language the text is in. English, for example, has only two i s: capital I without a dot and small i with a dot. But Turkish has four i s: capital I without a dot, capital İ with a dot, small ı without a dot, small i with a dot. So, in English 'i'.upcase # => 'I' and in Turkish 'i'.upcase # => 'İ' . In other words: since 'i'.upcase can return two different results, depending on the language, it is obviously impossible to correctly capitalize a word without knowing its language. But Ruby doesn't know the language, it only knows the encoding. Therefore it is impossible to properly capitalize a string with Ruby's built-in functionality. It gets worse: even with knowing the language, it is sometimes impossible to do capitalization properly. For example, in German, 'Maße'.upcase # => 'MASSE' ( Maße is the plural of Maß meaning measurement ). However, 'Masse'.upcase # => 'MASSE' (meaning mass ). So, what is 'MASSE'.capitalize ? In other words: correctly capitalizing requires a full-blown Artificial Intelligence. So, instead of sometimes giving the wrong answer, Ruby chooses to sometimes give no answer at all , which is why non-ASCII characters simply get ignored in downcase/upcase/capitalize operations. (Which of course also reads to wrong results, but at least it's easy to check.)
