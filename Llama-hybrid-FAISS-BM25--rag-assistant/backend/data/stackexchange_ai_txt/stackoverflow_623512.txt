[site]: stackoverflow
[post_id]: 623512
[parent_id]: 620561
[tags]: 
Over the years we've had a variety of problems with Computed Columns in SQL Server, so we've stopped using them. You could use a VIEW with a column for date-only - and put a unique index on that VIEW's column. (A possibly useful side-effect is that you can have the VIEW exclude some rows - so you could implement things like "DateColumn must be unique, but exclude WHERE DateColumn IS NULL) The existing CompositionDate column could be split into two fields - CompositionDate and CompositionTime - and a Retrieve View that joins them back together if you need that - which would then allow a native index on the Date-only column (This can be implemented in SQL 2005 and earlier using DateTime - although slightly extravagant for just the Date or Time, and not both) And lastly you could have an INSERT / UPDATE trigger that enforced that no other record existed with a duplicate CompositionDate (date part only)
