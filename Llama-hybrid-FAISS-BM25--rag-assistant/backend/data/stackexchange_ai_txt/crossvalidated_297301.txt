[site]: crossvalidated
[post_id]: 297301
[parent_id]: 297102
[tags]: 
If you have no requirement concerning programming language, it might be easiest to get started with keras. Roughly you want to approach the problem as follows: convert your discrete input sequence into one-hot vectors (i.e. vectors where only one of the dimensions is 1, all the others are 0. The amount of dimensions of a one-hot vector equals the amount of possible values) add an embedding layer to your network (an embedding layer converts your sparse vectors into more dense vector representations that contain some semantic information) feed the output of that layer into a stateful LSTM layer (important to have a stateful network) feed the output of the LSTM layer into a dense timedistributed layer with softmax activation function. The output dimension of this layer is again the amount of possible values such that the weights of this layer give the probabilities for the next value assignment. If all of this seems confusing, you're going to need to read up on some of these concepts. Perhaps starting here: http://karpathy.github.io/2015/05/21/rnn-effectiveness/
