[site]: stackoverflow
[post_id]: 5090137
[parent_id]: 5090051
[tags]: 
I don't see anywhere in your code where you are calling the setDay, setMonth or setYear methods, so I would expect the call to toUniversalStringTime to always print "The date using a default constructor 111 \n" Then after that call you print it again manually using the values for y, m and d "The date I created is 200056 \n" You need to call the set methods on the d1 object after creation, or pass in the parameters to a constructor to set them, e.g. d1.setYear(y); d1.setMonth(m); d1.setDay(d); but please pay attention to some of the other comments that have been made with regards to refactoring your code, because as has been mentioned, each of your setter methods have fundamental flaws in them that need to be fixed first. Other general notes to your code: In your setYear method you are using the value of y to update the year variable of the object, but in the second if: if (y > 2011) { System.out.println("That year hasn't happened yet!"); y = 2011; } you are actually setting y to 2011 rather than year , so this will have no effect. For some reason in your setMonth method you are not actually setting the month, but you are just validating the value that is passed in, i.e. if the value is not between 1 and 12 you return 1. So the code doesn't match the name of the method and you should change one or the other. Your setDay method is the same as setMonth in that it doesn't actually set the day, just validates it. But what's even worse here is that the call to setDay depends heavily on the month and year already having been set, since you use the month and year variables to determine whether or not the day is valid. This means that setDay must only be called after setMonth and setYear, otherwise you will always default to checking against January 0001 (since month and year are set to 1 by default).
