[site]: stackoverflow
[post_id]: 4111303
[parent_id]: 4111267
[tags]: 
If you can obtain large blocks of contiguous records that don't overlap, and assign a data reader object to each, then you can use a thread for each reader and get gains, provided the data source doesn't cause a bottle neck. You will basically be using multiple reader objects in place of intermediate storage. e.g. where ID >= 0 && ID = 10000 && ID = 20000 && ID This example of three readers will allow you to instantiate three objects "simultaneously". If you additionally use a C# iterator wrapped around this entire process you might have a way to return all the objects as if they were a single collection without using any intermediate storage for the instances. foreach ( object o in MyIterator() ) { .... This would bring the objects back under the banner of being used from a single thread even though they were created on different threads. I'm just blue-skying this last part.
