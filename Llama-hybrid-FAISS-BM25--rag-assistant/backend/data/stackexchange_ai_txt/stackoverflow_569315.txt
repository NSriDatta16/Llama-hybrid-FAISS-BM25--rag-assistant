[site]: stackoverflow
[post_id]: 569315
[parent_id]: 512412
[tags]: 
How frequently you check source code in is really a function of few things, most notably, culture and process. You would want to observe good "hygiene" by checking in frequently so as to minimise risk of data loss, but there are other benefits to this practice which may apply more or less depending on your methodology: In an agile environment, regular check-ins lower risk of the build breaking or of encountering merge conflicts with other programmers; More frequent check-ins imply more granular check-ins which means you're gathering alot more information ---this is useful for getting stats on project health and for hunting down bugs; Granular check-ins mean that check-in comments are more focused, and there's less chance of under-describing changes that were made; Granular check-ins ensure that inter-version diffs become easier to navigate . Your specific question though is about check-in criteria ---this of course is a matter of style. As a rule of thumb, I aim for breaking a task down into 1 to 3 hour sub-tasks, each of which has a specific goal---check in once you've finished a sub-task. "Finished" is subjective, but in my book it means working i.e., all unit tests pass, and your code coverage is at an acceptable level (acceptable to you, that is).
