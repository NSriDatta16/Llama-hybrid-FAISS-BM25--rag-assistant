[site]: stackoverflow
[post_id]: 4980134
[parent_id]: 
[tags]: 
JavaScript: check if an array is a subsequence of another array (write a faster naïve string search algo)

[5, 4, 4, 6].indexOfArray([4, 6]) // 2 ['foo', 'bar', 'baz'].indexOfArray(['foo', 'baz']) // -1 I came up with this: Array.prototype.indexOfArray = function(array) { var m = array.length; var found; var index; var prevIndex = 0; while ((index = this.indexOf(array[0], prevIndex)) != -1) { found = true; for (var i = 1; i Later I have find wikipedia calls it Naïve string search : In the normal case, we only have to look at one or two characters for each wrong position to see that it is a wrong position, so in the average case, this takes O(n + m) steps, where n is the length of the haystack and m is the length of the needle; but in the worst case, searching for a string like "aaaab" in a string like "aaaaaaaaab", it takes O(nm) steps. Can someone write a faster indexOfArray method in JavaScript?
