[site]: stackoverflow
[post_id]: 1891565
[parent_id]: 1891404
[tags]: 
Markov chain is the way to go, as others have already posted. Here is an overview of the algorithm: Let H be a dictionary mapping letters to another dictionary mapping letters to the frequency they occur with. Initialize H by scanning through a corpus of text (for example, the Bible, or the Stack Overflow public data). This is a simple frequency count. An example entry might be H['t'] = {'t': 23, 'h': 300, 'a': 50}. Also create a special "start" symbol indicating the beginning of a word, and an "end" symbol for the end. Generate a word by starting with the "start" symbol, and then randomly picking a next letter based on the frequency counts. Generate each additional letter based on the last letter. For example, if the last letter is 't', then you will pick 'h' with probability 300/373, 't' with probability 23/373, and 'a' with probability 50/373. Stop when you hit the "end" symbol. To make your algorithm more accurate, instead of mapping one letter to the next letters, you could map two letters to the next letter.
