[site]: stackoverflow
[post_id]: 47694
[parent_id]: 47605
[tags]: 
How about some simple testing? Used the code below: long start = System.currentTimeMillis(); String a = "a"; String b = "b"; for (int i = 0; i The "a + b" version executed in 2500ms . The a.concat(b) executed in 1200ms . Tested several times. The concat() version execution took half of the time on average. This result surprised me because the concat() method always creates a new string (it returns a " new String(result) ". It's well known that: String a = new String("a") // more than 20 times slower than String a = "a" Why wasn't the compiler capable of optimize the string creation in "a + b" code, knowing the it always resulted in the same string? It could avoid a new string creation. If you don't believe the statement above, test for your self.
