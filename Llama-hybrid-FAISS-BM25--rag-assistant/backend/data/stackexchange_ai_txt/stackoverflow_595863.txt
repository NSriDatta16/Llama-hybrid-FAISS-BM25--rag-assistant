[site]: stackoverflow
[post_id]: 595863
[parent_id]: 593140
[tags]: 
There is absolutely nothing in the theory of regular expressions that prevents them from being applied to something else than just strings of characters. It's just that most regular expression engine implementations don't allow that. However, if you have a regular expression engine that allows you to treat a string as un-encoded 8-Bit data (sometimes called BINARY , 8BIT or ASCII-8BIT ), then you can use that engine to parse byte-oriented binary data. Ragel is a state machine compiler that is specifically designed for parsing binary protocols. You write your state machine in a high-level (regexp-like) DSL and Ragel then compiles that into your target language â€“ Ragel currently supports C, C++, Objective-C, D, Java and Ruby. Most functional programming languages have powerful pattern matching facilities baked right into the language itself. those facilities can be used to pattern match binary data. One example of this is Erlang's support for building and pattern matching binary data structures . OMeta is a pattern matching and pattern transformation language that is basically a superset of regular expressions, on steroids. It supports matching of not only strings of characters but also arrays and lists of integers and arbitrary objects.
