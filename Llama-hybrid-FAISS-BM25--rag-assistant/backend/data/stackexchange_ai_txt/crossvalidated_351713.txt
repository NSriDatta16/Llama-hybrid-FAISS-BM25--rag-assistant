[site]: crossvalidated
[post_id]: 351713
[parent_id]: 351216
[tags]: 
Tensor Playground is an interactive interface for developing neural networks to solve toy problems. Since the authors have already done the QA on their code, it makes it very easy to compare your results to a "gold standard" for this toy problem. Using a network structure with 2 inputs, 2 hidden neurons and 1 output neurons and sigmoid activations, the network is slow to train. The decision boundary is not always the right shape, sometimes isolating just one quadrant, or creating a diagonal -- there are lots of options for how to orient a shape that is "mostly" right. After 4500 iterations, it kind of looks right. While drawing a blue band may or may not be what you had in mind, the extreme points farthest from the origin are all in the correct class; this is consistent with the 4 points given in OP's toy data. In this sense, the results are consistent. You can let it run for a while to decide whether your result of extremely long training times are reproduced in Tensor Playground. Keep in mind that the proof that an XOR network can work with this configuration (sigmoid units, 2-2-1 architecture) doesn't mean that it's easy to train. If we use a 2-4-2-1 architecture and $\tanh$ units the problem is much easier. This is the network after 200 training iterations; it's basically perfect. As an aside, I think that part of the reason you're having trouble is that you're using MSE as a loss function (but there could also be bugs or other misspecification that are creating trouble). MSE has shallow gradients; XOR can be instead framed as a classification task, and cross-entropy loss has steeper gradients. Neural networks require more experimentation than other approaches, so if what you're trying doesn't suit your needs, try something else! Here's a checklist of things that I would look at to try and get this to work, roughly in order write unit tests & check for bugs poor initialization of weights learning rate too high/too low learning rate scheduling
