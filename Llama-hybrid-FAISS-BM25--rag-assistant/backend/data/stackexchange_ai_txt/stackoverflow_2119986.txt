[site]: stackoverflow
[post_id]: 2119986
[parent_id]: 2040604
[tags]: 
I wouldn't say that "it's not good practice to have closed loops". However, they do draw attention to a potential problem. So it would be a good habit to check all closed loops for the possibility of this problem. The text book example seems quite clear to me. There are 2 ways in which the location/phone of the employee can be determined: Employee -> Group -> Room -> Phone or Employee -> Room -> Phone This is like storing two variables for the same thing that need to be kept in synch. There will be the possibility that something goes wrong and the variables end up with different values - then you have to ask: "Which of the two is correct?" So the text book example highlights the problem you have to watch our for. However, the problem really boils down to semantics . I.e. what do the relationships mean. In the text book example, both paths to Room mean exactly the same thing. If however the Group -> Room were merely a 'default' for each employee because senior employees could get their own room, or employees could temporarily be assigned to work somewhere else away from their group, then the additional relationship would be justified. Moving onto your design, this is what you should do: Look for closed groups Assess the semantics/purpose/meaning of the relationships Check that you haven't just created two paths to exactly the same information . For example, you have: TestSample -> Coil -> Slab TestSample -> Plate -> Slab ( Forgive the possibly absurd understanding of your terminology .) Does this mean your test sample can be on 2 different slabs at the same time? Or does it mean your test sample will be made up of a plate and a coil that could have (but not necessarily) come from different slabs?
