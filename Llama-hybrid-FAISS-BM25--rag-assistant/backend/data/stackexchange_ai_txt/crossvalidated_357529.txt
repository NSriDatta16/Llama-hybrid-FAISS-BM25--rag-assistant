[site]: crossvalidated
[post_id]: 357529
[parent_id]: 357527
[tags]: 
Certainly it's possible to forecast totally random data. The best method will depend on what "totally random" means, and on what "best" means. Let's suppose that "best" means "lowest expected mse ". If "totally random" means independent, identically distributed (iid) sales, then the best forecast will be the historical average. If "totally random" means iid increments over the previous day's sales, i.e., a random walk, then the best forecast will be the last observation, also known as the "naive forecast". This data generating process is unplausible for sales, though a good first idea for stock prices. "Best" = "lowest expected mape " has a different answer . "Best" = "lowest expected mae " may have yet another answer . I suspect that you have something different in mind by "totally random". We have a number of existing threads on forecasting daily data. Browsing these should be useful. I am not achieving the results that I expected, the error values are way high how to reduce errors estimates. and get the better forecast values. This may be helpful. Am I doing anything wrong in this case, because my forecasted values are way different from the actual values? Any time series consists of both signal and noise. A forecasting method will attempt to isolate and forecast the signal, and ignore the noise, because noise, by definition, is not forecastable. Therefore the forecast will always be less variable than the history. can someone guide me on how to handle business day data for less than 2 years of the time period? Can someone look into the attached data frame and suggest the best possible method to forecast. You can specify that your data may have weekly seasonality by using ts(...,frequency=7) . Then auto.arima() may give you a seasonal model if the weekly seasonality is strong enough. If you can get more data, you may be able to fit a model with multiple-seasonalities .
