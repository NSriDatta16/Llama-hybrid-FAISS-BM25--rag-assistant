[site]: stackoverflow
[post_id]: 2804537
[parent_id]: 2804042
[tags]: 
There are various implementations of the Decorator pattern in Javascript on Wikipedia and other sites - (1) , (2) , (3) . The pattern is defined as: the decorator pattern is a design pattern that allows new/additional behaviour to be added to an existing object dynamically. Object extension is already build into the language itself. Objects can be easily extended, and properties can be added anytime. So why should you have to jump through hoops to achieve this? Shouldn't something like this suffice: var person = { name: "Jack Bauer" }; // Decorated the object with ability to say a given phrase person.say = function(phrase) { alert(phrase); } // Using the decorated functionality person.say("Damn it!"); If you want a method to apply to all objects that were created using this function, then add that method/properties to the function's prototype. Update : If you have clearly defined pieces of functionality which can be mixed and matched as needed into certain types of objects, then the MooTools approach of extending and mixing in behavior into objects is nicely done. To give an example, consider a UI component that can be resized, dragged around with a handle, and deleted by clicking a tick mark at the top-right corner. You may not want to create each component with these behaviors but define all these behaviors separately each into their own object. And later mix in these behaviors into each type of component as needed. var Resizable = { ... }; var Draggable = { ... }; var Deletable = { ... }; var someLabel = new Label("Hello World"); // one way to do it someLabel.implement([Resizable, Draggable, Deletable]); // another way to do it someLabel.implement(Resizable); someLabel.implement(Draggable); someLabel.implement(Deletable); It looks better and more intuitive (to me) than doing something like var awesomeLabel = new Resizable(new Draggable(new Deletable(someLabel))); because we are still dealing with a label, and not some resizable, or some draggable, or some deletable object. Another small point, but still worth mentioning is that the parentheses start getting unmanageable after 3 or 4 decorators, especially without good IDE support.
