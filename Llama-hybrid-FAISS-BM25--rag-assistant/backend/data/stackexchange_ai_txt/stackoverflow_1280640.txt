[site]: stackoverflow
[post_id]: 1280640
[parent_id]: 1261557
[tags]: 
Not really particularly useful by itself, but the idea is similar to JSON in Javascript--you can move Clojure data structures to and from the file system. Adopted from Practical Common Lisp's Database example: (ns storage (:import (java.io File PushbackReader FileReader FileWriter))) (defn load-data "Loads data from the given file." [filepath] (do ;; the let block creates the file if it doesn't exist ;; reader throws an exception if there's no parsable data struct (let [file (new File filepath)] (if (not (.exists file)) (do (.createNewFile file) (doto (new FileWriter filepath) (.write "{}") .close)))) (read (new PushbackReader (new FileReader filepath))))) (defn dump-data "Exports data structure to a file." [filepath data] (doto (new FileWriter filepath) (.write (str data)) .close)) Example usage: user=> (dump-data "test.dat" {:a [1 2 3] :b "hello" :c true}) # user=> (load-data "test.dat") {:a [1 2 3], :b "hello", :c true} Certainly beats writing your own (complex) save mechanism for your program. I'm sure reading purely from a string is possible just by changing some of the readers provided via Java.
