[site]: stackoverflow
[post_id]: 3869067
[parent_id]: 
[tags]: 
How can I hook into Perl's use/require so I can throw an exception?

If a file is already loaded, is there anyway to hook into the use/require so I can throw an exception? In my upcoming nextgen::blacklist , I'm trying to die if certain modules are used. I'm using the object-hook method as mentioned in perldoc -f require : there are three-like hooks object , array with subref , and subref . The example in this post is the object-hook, you can find my attempt of the sub-ref hook in nextgen::blacklist . The syntax I'm desiring is something like: perl -Mnextgen -E"use NEXT" package Foo; use nextgen; use NEXT; Ideally it is supposed to throw a message like this: nextgen::blacklist violation with import attempt for: [ NEXT (NEXT.pm) ] try 'use mro' instead. I've tried this a bunch of different ways. package Class; use Data::Dumper; use strict; use warnings; sub install { unshift @main::INC, bless {}, __PACKAGE__ unless ref $main::INC[0] eq __PACKAGE__ ; } sub reset_cache { undef %main::INC } sub Class::INC { my ( $self, $pmfile ) = @_; warn Dumper [\%main::INC, $pmfile]; #undef %INC; } package main; BEGIN { Class->install; undef %main::INC } use strict; use strict; use strict; use strict; use warnings; use strict; use warnings; It seems as if %INC is only set after these hooks. I'm interested in anything that will allow me to throw an exception. If an attempt is made to load/reload a module dispite the status of it as a dependency of other modules that don't use my pragma, I want to die. package Foo; use NEXT; package main; use Foo; (which uses Next.pm); use NEXT.pm; ## Throw exception
