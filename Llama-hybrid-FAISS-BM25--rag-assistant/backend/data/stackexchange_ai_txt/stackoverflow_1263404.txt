[site]: stackoverflow
[post_id]: 1263404
[parent_id]: 1220655
[tags]: 
You can't really avoid a separate storage place for incomplete forms. You need to persist them someplace and you can't put them with the complete ones because apparently you have some database constraints on the underlying database table(s) and you want to keep them. I would suggest as @Ramesh did encapsulating your form's data in a class. public class FormData { public int IntField { get;set;} public string StringField {get;set;} public decimal DecimalField {get;set;} public decimal DateTimeField {get;set;} } Bind FormData object to your UI controls. When the user wants to save incomplete data, serialize FormData object to xml since you really want to utilize serialization here. XmlSerializer serializer = new XmlSerializer(typeof(FormData)); StringWriter writer = new StringWriter(new StringBuilder()); serializer.Serialize(writer,formDataObject); string serializedFormDataObject = writer.GetStringBuilder().ToString(); You can then save serializedFormDataObject to a separate table. When the user loads the form, you can check the table to see if the form is incomplete. If it is, you can deserialize the data on form load event for example: string serializedFormDataObject = GetFromDatabase(formId,userId); //you get the idea I guess StringReader reader = new StringReader(serializedFormDataObject); XmlSerializer serializer = new XmlSerializer(typeof(FormData)); formDataObject = serializer.Deserialize(reader) as FormData; You can then bind formData to your controls. When the form is complete, you can remove the incomplete form entry and save the completed form to the table for the completed forms.
