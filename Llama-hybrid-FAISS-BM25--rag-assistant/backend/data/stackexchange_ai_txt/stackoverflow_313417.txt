[site]: stackoverflow
[post_id]: 313417
[parent_id]: 
[tags]: 
What's the best way to store the days of the week an event takes place on in a relational database?

We're writing a records management product for schools and one of the requirements is the ability to manage course schedules. I haven't looked at the code for how we deal with this (I'm on a different project at the moment), but nonetheless I started wondering how best to handle one particular part of this requirement, namely how to handle the fact that each course can be held one or more days of the week, and how best to store this information in the database. To provide some context, a bare-bones Course table might contain the following columns: Course Example Data ------ ------------ DeptPrefix ;MATH, ENG, CS, ... Number ;101, 300, 450, ... Title ;Algebra, Shakespeare, Advanced Data Structures, ... Description ;... DaysOfWeek ;Monday, Tuesday-Thursday, ... StartTime EndTime What I'm wondering is, what is the best way to handle the DaysOfWeek column in this (contrived) example? The problem I'm having with it is that is a multi-valued field: that is, you can have a course on any day of the week, and the same course can take be held on more than one day. I know certain databases natively support multi-value columns, but is there a "best practice" to handle this assuming the database doesn't natively support it? I've come up with the following possible solutions so far, but I'm wondering if anyone has anything better: Possible Solution #1: Treat DaysOfWeek as a bit field This was the first thing that popped into my head (I'm not sure if that's a good thing or not...). In this solution, DaysOfWeek would be defined as a byte, and the first 7 bits would be used to represent the days of week (one bit for each day). A 1 bit would indicate that a class was held on corresponding day of the week. Pros : Easy to implement (the application can deal with the bit manipulations), works with any database. Cons : Harder to write queries that use the DaysOfWeek column (although you could deal with this at the application level, or create views and stored procedues in the database to simplify this), breaks relational database model. Possible Solution #2: Store DaysOfWeek as a string of characters This is essentially the same approach as using a bit field, but instead of dealing with raw bits, you assign a unique letter to each day of the week, and the DaysOfWeek column just stores a sequence of letters indicating what days a course is held on. For example, you might associate each weekday with a single-character code as follows: Weekday Letter ------- ------ Sunday S Monday M Tuesday T Wednesday W Thursday R Friday F Saturday U In this case, a course held on Monday, Tuesday, and Friday would have have the value 'MTF' for DaysOfWeek , while a class held only on Wednesdays would have a DaysOfWeek value of 'W' . Pros : Easier to deal with in queries (i.e. You could use INSTR , or its equivalent, to determine if a class is held on a given day). Works with any database that supports INSTR or an equivalent function (most, I would guess...). Also friendlier to look at, and easy to see at a glance what is happening in queries that use the DaysOfWeek column. Cons : The only real "con" is that, like the bitfield approach, this breaks the relational model by storing a variable number of values in a single field. Possible Solution #3: Use a Lookup Table (ugly) Another possibility would be to create a new table that stores all the unique combinations of days of the week, and have the Course.DaysOfWeek column simply be a foreign key into this lookup table. However, this solution seems like the most inelegant one, and I only considered it because it seemed like the The Relational Way TM to do things. Pros : It's the only solution that is "pure" from a relational database point of view. Cons : It's inelegant and cumbersome. For example, how would you design the user interface for assigning corresponding weekdays to a given course around the lookup table? I doubt a user wants to deal with choices alongs the lines of "Sunday", "Sunday, Monday", "Sunday, Monday, Tuesday", "Sunday, Monday, Tuesday, Wednesday", and so on... Other Ideas? So, is there a more elegant way to handle multiple values in a single column? Or would one the proposed solutions suffice? For what it's worth, I think my second solution is probably the best of the three possible solutions that I outlined here, but I'd be curious to see if someone has a different opinion (or indeed a different approach altogether).
