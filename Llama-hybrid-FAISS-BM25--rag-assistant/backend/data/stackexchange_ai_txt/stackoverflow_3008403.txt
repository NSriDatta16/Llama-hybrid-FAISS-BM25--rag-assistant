[site]: stackoverflow
[post_id]: 3008403
[parent_id]: 3008000
[tags]: 
I believe the functionality you're describing is something you essentially get for free with the GCC linker. During the linking process, the linker will resolve all symbols your code references to the libraries passed to it on the command line. If the referenced symbol name is contained within a static library (a .a file) it will be 'statically' linked and if the symbol is, instead, within a dynamic link library (a .so file) it will be dynamically linked at program execution time. Generally speaking, you shouldn't need to care whether your symbols are statically or dynamically linked as it should have zero impact on your C/C++ code. From your description, it's difficult to understand the motivation for your question but there's a chance you may have a need for explicitly loading a dynamic link library via the dlopen() system call. If the first paragraph doesn't answer your question, could you describe the general problem you're trying to solve?
