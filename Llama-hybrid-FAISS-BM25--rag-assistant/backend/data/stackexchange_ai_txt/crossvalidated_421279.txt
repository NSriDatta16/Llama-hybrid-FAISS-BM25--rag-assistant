[site]: crossvalidated
[post_id]: 421279
[parent_id]: 
[tags]: 
Extension of the K-Nearest neighbor algorithm to get results in different neighborhoods

I would like to use the kNN algorithm to find the closest neighbor to a vector. But I would like it to limit to a point per neighborhood (radius) In this image , given the point in red, I would like to find the points in green. Is there a simple way to this or? I could just choose a k of 1000 and filter the neighbors after the fact to only find 3 neighbors in 3 different neighborhoods, but I would like to know if there is a simpler way. as user20160 mentioned, my goal is to find the k nearest neighbors such that the distance between each pair is greater than some minimal value and I would like that value to be inferred from the data. Context I am not using the knn algorithm for the sake of classification. I am using a combination of an autoencoder and knn on time series data and encoding it into a vector of length 15 to perform similarity search. I use this to find moments in the past where the slice of the time series I encoded has a similar pattern. Currently, the neighbors returned are the slices of time series adjacent in time to the input one (which is not what I want). Given a large enough k or if I filter out, post-search, the neighbors adjacent in time, it eventually finds neighbors that are not adjacent to the input one but then all of those neighbors are adjacent in time like this (still is not what I want). I want to impose a minimal distance in time, but the time is not part of the encoded data and I do not feed it to the knn. From my few observations it seems like neighbors in time are also neighbors in the encoding space, so I thought that I could abstract the concept of time and use a minimal distance in the encoding space. I use the builtin sklearn knn, and it seems like I will eventually have to write my own version, but I would need guidance on which part of the algorithm to adapt to be able to filter the search while keeping a similar performance
