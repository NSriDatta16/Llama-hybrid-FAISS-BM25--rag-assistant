[site]: stackoverflow
[post_id]: 2662628
[parent_id]: 2662575
[tags]: 
First question: do the threads need their own copies of the variables? or do they need to coordinate access to a single shared copy? If you need the former, the other answers have made suggestions about 'thread-local storage'. If you need the latter, then somehow or another you need to ensure there's an appropriate mutex on those variables (the scope of the mutex is one of the issues you face), and that the threads all use the mutex, and release the mutex. This is trickier. It may even be that you need to provide functions that control access to the variables. The standard variable errno can be a modifiable lvalue: extern int *_errno_func(void); #define errno (*(_errno_func)()) In a threaded application (compiled with -DREENTRANT), this is what happens; on MacOS X, it appears to be what happens anyway (they use the name __error instead of _errno_func ; both are in the implementation's namespace). You may want to, or end up having to, do something similar for your variables. The fact that you say they are static improves things a bit. You only have one file to deal with (unless you are careless enough to pass back - or on - pointers to those variables).
