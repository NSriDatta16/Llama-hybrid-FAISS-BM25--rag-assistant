[site]: stackoverflow
[post_id]: 4136227
[parent_id]: 4069637
[tags]: 
If you want to handle this elegantly, you're going to need to have some component track the dependencies between the models. When a property changes, you would iterate over all of the dependencies for that property and then update them appropriately. Perhaps your BaseRepository might hold a reference to a DependencyManager class. That class would have to have a list of all properties which depend on one another. A simple implementation might look like this: class PropertyDescriptor { public Type ModelType { get; set; } public string Property { get; set; } } class DependencyManager { private Dictionary > _dependencies = new Dictionary >(); public void RegisterDependency(PropertyDescriptor property, PropertyDescriptor dependentProperty) { if (!_dependencies.ContainsKey(property)) { _dependencies.Add(property, new List ()); } _dependencies[property].Add(dependentProperty); } public IEnumerable GetDependentProperties(PropertyDescriptor property) { if (!_dependencies.ContainsKey(property)) { yield break; } else { foreach (PropertyDescriptor p in _dependencies[property]) { yield return p; } } } } Then when you detect a property change, you can query the DependencyManager for what else needs to change. But be careful to check for circular dependencies when you cascade!
