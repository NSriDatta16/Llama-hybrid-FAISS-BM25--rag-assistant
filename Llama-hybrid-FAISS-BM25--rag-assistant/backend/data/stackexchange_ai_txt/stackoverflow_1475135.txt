[site]: stackoverflow
[post_id]: 1475135
[parent_id]: 1473392
[tags]: 
Your question is similar to my answer(simplifying the conditions) on favorite programmer ignorance pet peeve's For languages that don't support an until construct, chaining multiple NOTs makes our eyes bleed Which one is easier to read? This: while (keypress != escape_key && keypress != alt_f4_key && keypress != ctrl_w_key) Or this: until (keypress == escape_key || keypress == alt_f4_key || keypress == ctrl_w_key) I am of the opinion that the latter is way easier to grok than the first one. The first one involves far too many NOTs and AND conditions makes the logic more sticky , it forces you to read the entire expression before you can be sure that your code is indeed correct, and it will be far more harder to read if your logic involves complex logic (entails chaining more ANDs, very sticky). During college, De Morgan theorem is taught in our class. I really appreciate that logics can be simplified using his theorem. So for language construct that doesn't support until statement, use this: while !(keypress == escape_key || keypress == alt_f4_key || keypress == ctrl_w_key) But since C don't support parenthesis-less while/if statement, we need to add parenthesis on our DeMorgan'd code: while (!(keypress == escape_key || keypress == alt_f4_key || keypress == ctrl_w_key)) And that's what could have prompted Dan C's comment that the DeMorgan'd code hurts his eyes more on my answer on favorite programmer ignorance pet peeve's But really, the DeMorgan'd code is way easier to read than having multiple NOTS and sticky ANDs [EDIT] Your code (the DeMorgan'd one): object value = GetValueFromSomeAPIOrOtherMethod(); if ( value == null || string.IsNullOrEmpty(value.Prop) || !possibleValues.Contains(value.prop) ) { // Do my stuff here, like error handling } ..is perfectly fine. In fact, that's what most programmers(especially from languages that don't have try/catch/finally constructs from the get-go) do to make sure that conditions are met(e.g. no using of null pointers, has proper values, etc) before continuing with the operations. Note: I took the liberty of removing superfluous parenthesis on your code, maybe you came from Delphi/Pascal language.
