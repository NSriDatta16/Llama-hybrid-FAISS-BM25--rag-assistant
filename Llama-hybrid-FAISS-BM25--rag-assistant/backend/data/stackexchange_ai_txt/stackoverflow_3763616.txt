[site]: stackoverflow
[post_id]: 3763616
[parent_id]: 3758658
[tags]: 
While it's not really in a workably stable state yet, have a look at the html5 canvas backend for matplotlib . It looks interesting, anyway, and will probably be the best way to do this sort of thing (interactive webpage with a matplotlib plot) in the future. In the meantime, as @Mark suggested, it's not too hard to dynamically generate an imagemap for the wedges of a pie plot. Here's a rough example , that I'm sure you could adapt to whatever web framework you're using. import matplotlib.pyplot as plt def main(): # Make an example pie plot fig = plt.figure() ax = fig.add_subplot(111) labels = ['Beans', 'Squash', 'Corn'] wedges, plt_labels = ax.pie([20, 40, 60], labels=labels) ax.axis('equal') make_image_map(fig, wedges, labels, 'temp.html') def make_image_map(fig, wedges, labels, html_filename): """Makes an example static html page with a image map of a pie chart..""" #-- Save the figure as an image and get image size ------------------------ # Be sure to explictly set the dpi when saving the figure im_filename = 'temp.png' fig.savefig(im_filename, dpi=fig.dpi) # Get figure size... _, _, fig_width, fig_height = fig.bbox.bounds #-- Get the coordinates of each wedge as a string of x1,y2,x2,y2... ------- coords = [] for wedge in wedges: xy = wedge.get_verts() # Transform to pixel coords xy = fig.get_transform().transform(xy) # Format into coord string and convert to in top left... xy = ', '.join(['%0.2f,%0.2f' % (x, fig_height - y) for x, y in xy]) coords.append(xy) #-- Build web page -------------------------------------------------------- header = """ """.format(im_filename, fig_width, fig_height) # Make the image map map = ' \n' for label, xy in zip(labels, coords): href = 'http://images.google.com/images?q={0}'.format(label) area = ' ' area = area.format(xy, href, label) map += ' ' + area + '\n' map += ' \n' footer = """ """ # Write to a file... with file(html_filename, 'w') as outfile: outfile.write(header + map + footer) if __name__ == '__main__': main() Edit: I just realized that you might not be referring to embedding the plot into a web page... (I assumed that you were from the "display another page" bit in your question.) If you want more of a desktop app, without having to mess with a "full" gui toolkit, you can do something like this: import matplotlib.pyplot as plt def main(): # Make an example pie plot fig = plt.figure() ax = fig.add_subplot(111) labels = ['Beans', 'Squash', 'Corn'] wedges, plt_labels = ax.pie([20, 40, 60], labels=labels) ax.axis('equal') make_picker(fig, wedges) plt.show() def make_picker(fig, wedges): import webbrowser def on_pick(event): wedge = event.artist label = wedge.get_label() webbrowser.open('http://images.google.com/images?q={0}'.format(label)) # Make wedges selectable for wedge in wedges: wedge.set_picker(True) fig.canvas.mpl_connect('pick_event', on_pick) if __name__ == '__main__': main() Which opens a browser window for a google image search of whatever the wedge is labeled as...
