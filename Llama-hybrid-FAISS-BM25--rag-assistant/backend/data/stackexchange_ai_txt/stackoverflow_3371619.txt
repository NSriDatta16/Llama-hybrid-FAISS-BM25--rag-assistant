[site]: stackoverflow
[post_id]: 3371619
[parent_id]: 
[tags]: 
SQL Server Query or Tool to show Hierarchical Data

We have a general organizational table structure, think of it s a Tree or Pyramid Hierarchy. We basically have multiple "trees" we want to show. On for one company, one for another ETC. Does anyone know of a good way to display this data? SQL Query would be nice, doubt it would be possible, but I wouldn't be against using some OTS tool (preferably free). I would also like to avoid some type of report. I don't need an actual solution just need to know if its possible . So if you say SQL if you can give me a 2 table example of showing a root a leave I would be happy. Structure is pretty general And each table is linked through a surrogate key CompanyID, CompanyGroupID, etc. Any suggestions on ways we could display/query for this data? Last resort is to write a quick C# Windows Application... We would like to see it in tree form: -- 1-Company -- / \ -- CompanyGroupA CompanyGroupB -- / \ \ -- CompanyStoreA1 CompanyStoreA1 CompanyStoreB -- / \ / \ --Employee A B C In attempt to please the masses here is an example test script to populate the query. DECLARE @Company table (id int, name varchar(40) ) INSERT @Company VALUES (1,'Living Things' ) INSERT @Company VALUES (2,'Boring Company' ) DECLARE @CompanyGroup table (id int, name varchar(40), CompanyID int) INSERT @CompanyGroup VALUES (1,'Pets',1 ) INSERT @CompanyGroup VALUES (2,'Humans',1 ) INSERT @CompanyGroup VALUES (3,'Electronics',2 ) INSERT @CompanyGroup VALUES (4,'Food',2 ) DECLARE @CompanyStore table (id int, name varchar(40), CompanyGroupID int) INSERT @CompanyStore VALUES (1,'PetsStoreA',1 ) INSERT @CompanyStore VALUES (2,'PetsStoreB',1 ) INSERT @CompanyStore VALUES (3,'PetsStoreC',1 ) INSERT @CompanyStore VALUES (4,'PetsStoreD', 1) INSERT @CompanyStore VALUES (5,'HumansStore',2 ) INSERT @CompanyStore VALUES (6,'FoodStore',3 ) The final solution was pretty awesome I modified the usp_DrawTree to accept varchar vs ints because i had to make my query ids unique. I then just did a select/union all and built the parent child relationship. select * into #TreeData from ( select ID='C' + cast(id as varchar(10)), ParentID=null, DataForBox=name + '(' + cast(id as varchar(10)) + ')', ExtraInfo='', SortColumn=name from Company c ) union all ( select ID='CG' + cast(id as varchar(10)), ParentID=cg.CompanyID , DataForBox=name + '(' + cast(id as varchar(10)) + ')', ExtraInfo='', SortColumn=name from CompanyGroup cg join Company c on c.ID=cg.CompanyID ) //union all rest of hierarchy )
