[site]: stackoverflow
[post_id]: 3591590
[parent_id]: 3589511
[tags]: 
From a user's point a view I'd say that you just need to be clear in your interface about what you need. Do you need a copy of the object or just a pointer? Internally you can probably use the type of pointer that you're most convienant off as long as it don't degrade performance too much and don't cause bugs. A question to ask is what exactly will you do with that pointer? Will you delete it? Can I change the reference if I update/delete the object (say in the case of a GUI library). As someone who don't usually use smart pointers when they are not needed seeing too much smart pointers will just tell me you don't pay attention to what you will do and is cause for potential bugs. As a library user I prefer a crash (when attempting to dereference a clearly invalid pointer) to having an semi-valid pointer around that is not actually what I expect (which I suspect can be a problem with using smart pointers of the shared_ptr kind).
