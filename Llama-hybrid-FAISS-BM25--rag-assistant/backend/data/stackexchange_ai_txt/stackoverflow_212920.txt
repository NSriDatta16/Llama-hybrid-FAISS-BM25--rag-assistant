[site]: stackoverflow
[post_id]: 212920
[parent_id]: 184108
[tags]: 
In Unix, whether on the system console or in an X terminal window, keyboard I/O goes through a virtual terminal. Device /dev/tty is the usual way, these days, of accessing a process's controlling terminal. Device manipulations other than open/close/read/write are all handled by the ioctl(2) system call for that specific device. The general idea of what you want to do is Open the controlling terminal (which may or may not be stdin) Change the operating mode on that terminal to return without waiting for a full line of input (which is the normal default) Continue with the rest of your program, knowing that reads from that terminal (which might be stdin) may return partial lines or even zero characters without it being an error or termination condition. A detailed answer on how to do the second step is found at the C-programming faq . They also point out that this is an OS question, not a language question. They provide nine possibilities, but the three major ones relevant to this question are Use the curses(3) library Old BSD style systems, use sgttyb to set CBREAK or RAW Posix or old System V style systems, use TCGETAW/TCSETAW to set c_cc[VMIN] to 1 and c_cc[VTIME] to 0. Following a couple of references in the C FAQ could lead to to this page of kbhit code fragments .
