[site]: stackoverflow
[post_id]: 2628968
[parent_id]: 2628842
[tags]: 
Precisely, according to the standard, new char[10] will alloc at least 10 bytes in the heap. The internals of new and delete are implementation dependent. So it will vary from compiler to compiler, and platform to platform. Additionally, you can find a variety of allocator algorithms (e.g: TCMalloc ). I'll give you an overview of how it could work internally, but don't take it as absolute truth. It's written for the solely purpose of this explanation. In short, the new operator internally invokes malloc . The malloc uses a really long linked list of available memory blocks, aka free chain . When malloc is invoked, it lookups this list for the first block that's big enough to hold the requested size. After that, it splits the block in two parts, one with the size you requested, and the other with the rest, which is then added back to the free chain. Finally, it returns the block with the request size. The inverse occurs in a free call, which is invoked by delete/delete[]. In short, it puts the provided block back to the free chain . There could be fancy tricks during the processes I described above, like sorting the free chain , rounding the requested size to the next power of two to reduce memory fragmentation, and so on.
