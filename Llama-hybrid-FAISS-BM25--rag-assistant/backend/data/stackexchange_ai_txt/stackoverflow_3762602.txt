[site]: stackoverflow
[post_id]: 3762602
[parent_id]: 3753538
[tags]: 
Actually, fragmentation is fundamental, and the ability of some GC to defeat it is a considerable asset. The stop-and-copy algorithm used to be popular in GC implementations because: it is simple to implement; it automatically defragments memory; its running time is proportional to the amount of live objects, which makes it asymptotically very efficient. More modern GC, including those used in Java, use much more complex strategies because they want to make short pauses (rather than making total GC time low, they prefer never to stop the application for a long time, because pauses are bad for interactivity), to interact more cleanly with caches and virtual memory, and to benefit from systems with multiple CPU. The Jones and Lins book is a must-read for whoever wants to understand garbage collection.
