[site]: stackoverflow
[post_id]: 5424670
[parent_id]: 5420134
[tags]: 
If you want encapsulation, why do you break it in your constructor? Instead for munging $self->{ID} directly, you should be setting it with your setID method. You can do all sorts of funky stuff to prevent access and munging of your object internals. One of the simplest is use a lock your object using lock_hash. This way, any attempts to modify its innards will throw a fatal error. You can also use inside out objects. You could overload hash access to prevent access outside child classes: #!/usr/bin/perl use strict; use warnings; use Data::Dumper; my $f = Foo->new(); $f->bar(15); print Dumper $f; eval { $f->{bar} = 23; 1; } or do { print "Direct access error: $@"; }; print Dumper $f; BEGIN { package Foo; use strict; use warnings; use overload '%{}' => '_HASH_DEREF'; sub new { return bless {}; } sub bar { my $self = shift; $self->{bar} = shift if @_; return $self->{bar}; } sub _HASH_DEREF { my $caller = caller; die "Illegal access to object internals" unless $caller eq __PACKAGE__; return shift; } } You could bless subroutines that you call with the method name to generate a magic secret value that is used as an S3 bucket. You could any bizarre thing that you can think of to hide the data. Perl objects let you do whatever crazy thing you want on the back end to handle storage and or encapsulation. If you have a team that cheats and directly accesses the object innards, then you have a social problem to resolve. A technical fix MAY help. The real fix is in changing your dev team's behaviors.
