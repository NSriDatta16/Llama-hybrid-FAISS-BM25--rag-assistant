[site]: stackoverflow
[post_id]: 4299616
[parent_id]: 4299497
[tags]: 
Retrieval from a database isn't the place to start with TDD. You might do well to look at some examples of TDD on the net. Bob Martin's bowling game scoring is a fun place to start. That being said ... My first test contained a call to getSubMissionPage(), which only purpose is to return data. So making this test fail is pretty darn hard, since it can return any data, I couldn't come up with a way to make it fail. The purpose isn't to return data, but to return the correct data. The way to make a test for this is to supply it with a database that should make it return a specific result and see that it does. And of course it won't until you write the correct code, so you write the test first and the real implementation after seeing it fail. The hard part with TDD involving a database is that testing with a real database can be slow and making the test repeatable can be difficult as your tests will sometimes change the data. To deal with these issues, you can get help from tools like DbUnit , mock JDBC, use an in-memory database, and use rollbacks to make sure your tests don't make permanent changes. But you're best off not starting with database stuff.
