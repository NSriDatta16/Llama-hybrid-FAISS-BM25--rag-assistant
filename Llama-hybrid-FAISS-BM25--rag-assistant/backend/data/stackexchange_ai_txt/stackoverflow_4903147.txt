[site]: stackoverflow
[post_id]: 4903147
[parent_id]: 4170992
[tags]: 
Memcache isn't going to magically make your website faster. The absolute first thing you are going to need to do is figuring out what is expensive. A simple way to do this is to decorate your views or other functions to see how long they generally take to execute, for example: def print_latency(f): def wrapped(*args, **kwargs): try: start = time.time() r = f(*args, **kwargs) finally: print >>sys.stderr, 'Latency (%s): %.3fs' % (f.__name__, time.time() - start) return r wrapped.__name__ = f.__name__ return wrapped @print_latency def my_view(request): ... The next thing to do is figure out what resources are cacheable, i.e., what data doesn't change or doesn't cause a horrible experience if it does? Then start at the top. Can you cache the templates? If not, can you cache the views? If not, can you cache the database calls? The latter is probably where you will end up unless you have a super-simple website. Then you'll need to see if your calls to the db are very cacheable. You might need to break up complex queries into simpler ones. Caching isn't magic and isn't perfect. You may have worse latency with caching but better throughput. Or on average latency might be better but the worst latencies might be horrible.
