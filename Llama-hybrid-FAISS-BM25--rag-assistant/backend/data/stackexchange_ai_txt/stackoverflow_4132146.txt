[site]: stackoverflow
[post_id]: 4132146
[parent_id]: 4132046
[tags]: 
Instead of having those methods write to a file I would recommend you changing the their signature to work with a TextWriter. This way they are more independent of the underlying storage: public void Save(List retryAttempts, TextWriter writer) { try { XmlSerializer xmlSerializer = new XmlSerializer(typeof(List )); xmlSerializer.Serialize(writer, retryAttempts); } catch (Exception ex) { LocalLogger.LogError("Unable to save retry information to xml file.", ex.ToString()); } } Now your test could become: [TestMethod] public void TestSerialize() { // arrange var sb = new StringBuilder(); using (var writer = new StringWriter(sb)) { this.attempt = new RetryAttempt("1234", 4); this.attempts = new List () { attempt }; this.xmlStore = new XmlRetryFileStore(RetryType.Download); this.xmlStore.Save(writer, this.attempts); } string actual = sb.ToString(); // TODO: assert on the resulting XML } Also notice that you shouldn't use the GetRetryAttempts method to assert in the unit test of the Save method. Those two methods should be separate and have their separate tests. And the GetRetryAttempts method: public List GetRetryAttempts(TextReader reader) { try { XmlSerializer xmlSerializer = new XmlSerializer(typeof(List )); return (List )xmlSerializer.Deserialize(reader); } catch (Exception ex) { LocalLogger.LogError("Unable to read from retry xml file.", ex.ToString()); } return new List (); }
