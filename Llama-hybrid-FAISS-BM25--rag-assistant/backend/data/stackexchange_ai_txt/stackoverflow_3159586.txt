[site]: stackoverflow
[post_id]: 3159586
[parent_id]: 
[tags]: 
A design for sending objects to be added to the appropriate data structure

I have a class called DataStructures where I have a set of public static data structures that store objects. To add an object to a data structures is an involved process requiring a number of checks to be carried out, processes to be remembered and data to be rearranged. In another class called Foo , I need to add objects to the data structures. I was thinking I can do this by making a method called ObjectFeed which would take an object and the object's label as parameters. The label would tell the method which of the data structures the object should be added to. I would also have a method called addObject which would take the object to append and the appropriate target data structure as parameters: Public Class DataStructures { public static List object1Storage = new List (); public static List object2Storage = new List (); ... } Public Class Foo { public void ObjectFeed(/* PARAMETERS */) { //Code that generates an object called inspectionObject //inspection object has an associated enum Type if(objectType == Type.Type1) { addObject(inspectionObject, DataStructures.object1Storage); } if(objectType == Type.Type2) { addObject(inspectionObject, DataStructures.object2Storage); } ... } private void addObject(obj inspectionObject, List objStorage) { objStorage.Add(inspectionObject); //And a lot more code } } Passing a public data structure as a parameter to a method that can just as well access that data structure directly doesn't feel correct. Is there a more clever and less intuitive way of doing this? Edit: In the example I originally contrived, the ObjectFeed method served no apparent purpose. I rewrote the method to look more like a method from the real world.
