[site]: stackoverflow
[post_id]: 556213
[parent_id]: 539503
[tags]: 
I recently asked a couple of questions around this area: XML vs Objects and XML vs Objects #2 . You'll find the answers to those questions interesting. For our particular problem we've decided on a hybrod approach, with the interface looking something like this: // Just using fields for simplicity and no attributes shown. interface WCFDataContract { // Header details public int id; public int version; public DateTime writeDateTime; public string xmlBlob; // Footer details public int anotherBitOfInformation; public string andSoemMoreInfo; public book andABooleanJustInCase; } The reason we use an xmlBlob is because we own the header and footer schema but not the blob in the middle. Also, we don't really have to process that blob, rather we just pass it to another library (created by another department). The other library returns us more strongly typed data. Good luck - I know from experience that your option 2 can be quite seductive and can sometimes be hard to argue against without being accused of being overly pure and not pragmatic enough ;)
