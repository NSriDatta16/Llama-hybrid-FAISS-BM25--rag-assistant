[site]: crossvalidated
[post_id]: 175935
[parent_id]: 
[tags]: 
How to Improve prediction accuracy using autoencoder to select features and SVM for training

I am using Matlab based implementation of autoencoder to compress my feature set (i have 2 cases, here i will talk about the one with 12 features). My goal is to predict human's opinion about a certain place. I have three choices i.e. -1, 0 and 1, each representing Dislike, Neither Like or dislike and Like respectively. I am using neural network based autoencoder to learn the compressed representation of my feature set. And then use these compressed features to train SVM with 70/30% split for prediction. I have labelled data, so I am doing supervised learning. Until now I am unable to achieve reasonable accuracy, so far accuracy is ~60% . The data itself is tricky, for instance see below for a 2D scatter plot of the data. For this plot, i changed my autoencoder to have 2 features only, you can see the overlap (Color represents different classes - and i have three classes). So, my first question is that: can i use some other ML algorithm for both feature compression and supervised learning? My next question is that if the implementation of autoencoder is correct. I am using example from Matlab 2015a. Here is a chunk: % Start autoencoding stuff autoenc1 = feedforwardnet(hiddenSize1); autoenc1.trainFcn = trainfunc;%'trainbr'%'trainlm'; autoenc1.trainParam.epochs = iH1; autoenc1 = train(autoenc1,xTrain,xTrain); % Create an empty network autoencHid1 = network; % Set the number of inputs and layers autoencHid1.numInputs = 1; autoencHid1.numlayers = 1; % Connect the 1st (and only) layer to the 1st input, and also connect the % 1st layer to the output autoencHid1.inputConnect(1,1) = 1; autoencHid1.outputConnect = 1; % Add a connection for a bias term to the first layer autoencHid1.biasConnect = 1; % Set the size of the input and the 1st layer autoencHid1.inputs{1}.size = iSize; autoencHid1.layers{1}.size = hiddenSize1; % Copy the weights and biases from the first layer of the trained % autoencoder to this network autoencHid1.IW{1,1} = autoenc1.IW{1,1}; autoencHid1.b{1,1} = autoenc1.b{1,1}; feat1 = autoencHid1(xTrain); % I will use these features to train SVM, also extending the same idea for next autoencoder layer Is this sample looks ok, i am not hoping to use sparse autoencoders.
