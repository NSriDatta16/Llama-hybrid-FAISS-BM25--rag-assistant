[site]: crossvalidated
[post_id]: 622272
[parent_id]: 
[tags]: 
Which is the best way to implement variational inference?

To implement variational inference in a Bayesian model, one essentially has the choice between different approaches that differ in their degree of automation and flexibility: manually deriving update equations for coordinate ascent variational inference (CAVI) and implementing them (e.g. using numpy) performing stochastic variational inference (SVI) by optimizing the ELBO using a framework that provides gradients, like pytorch or jax using probabilistic programming languages like Pyro or PyMC. I wonder which of these approaches is most suitable for someone who develops statistical models as part of their scientific research? Is the performance of the second approach worse than that of probabilistic programming languages? One aspect of probabilistic programming languages I do not like is that it is not very clear what is going on under the hood.
