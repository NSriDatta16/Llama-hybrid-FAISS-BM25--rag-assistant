[site]: stackoverflow
[post_id]: 4428054
[parent_id]: 4427907
[tags]: 
Frameworks tend to have a cost too. While they can abstract away lots of repetitive tasks, they have a learning curve. The good thing here is that the documentation is usually very good. I shall cite CakePHP and Symfony as my examples. Snippets have always been helpful, but sooner or later, it makes the codebase patchy. It takes brainpower to understand the different snippets of code too. The code came from different sources, so there won't be once central source of information. For me, the biggest factor in picking between frameworks and snippets is my skill, and the skill of the other folks in the team. Communication is the key. Teams where developers are okay with reading documentation should stick to frameworks. I've been in such teams, and developers there tend to play it safe. Such a team tends to breeze through standardized tasks quickly, leveraging the API of the framework. However, when customization is required (because clients like making changes) they tend to go slower. Advantages of such a team is that each person can potentially fill in for another. The biggest disadvantage though, is that the lack of specialization makes people less attached to their work. Teams where developers are okay with reading the code itself should go with snippets. I've also been in teams like that, and developers there tend to know a little more. They are really fast in customization, but they get bogged down when doing repetitive tasks. Each developer has an identity that they tend to care about. It's highly likely that they are proud of their work, and will do everything to "look cool" in front of their peers. The biggest disadvantage though, is that some developers can be pompous jerks.
