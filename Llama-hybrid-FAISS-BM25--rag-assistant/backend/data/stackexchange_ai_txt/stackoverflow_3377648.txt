[site]: stackoverflow
[post_id]: 3377648
[parent_id]: 3377529
[tags]: 
On Integer.parseInt The exception message seems to be the following: 07-31 14:48:45.409: INFO/System.out(431): Could not parse java.lang.NumberFormatException: unable to parse '' as integer Indeed, an empty string can not be parsed by Integer.parseInt(String) . Thus: int num = Integer.parseInt(""); // throws java.lang.NumberFormatException: For input string: "" If you have an arbitrary String s which can be isEmpty() or even null , then you must have special code to handle it, because Integer.parseInt(s) will always throw an exception in those cases. Of course Integer.parseInt(s) can throw NumberFormatException when s is e.g. "xyz" , so you may want to put the statement inside a try-catch block. So you can write something like this: String s = ...; if (s == null || s.isEmpty()) { complaintAboutNotGettingAnything(); } else { try { int num = Integer.parseInt(s); doSomethingWith(num); catch (NumberFormatException e) { complaintAboutGettingSomethingYouDontWant(); } } On writing code that is easy to debug In this particular snippet, it looks like parseInt is invoked as follows: if ((Integer.parseInt(et1.getText().toString())) A lot of things can go wrong in this one expression. I suggest refactoring that breaks this apart into logical observable steps as follows: String et1text = et1.getText().toString(); // maybe check if it's empty/null if necessary // maybe log/inspect what the value of et1text is for debugging try { int et1val = Integer.parseInt(et1text); if (et1val
