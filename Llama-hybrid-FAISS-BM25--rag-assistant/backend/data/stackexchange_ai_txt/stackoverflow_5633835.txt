[site]: stackoverflow
[post_id]: 5633835
[parent_id]: 5632770
[tags]: 
If you are doing what you say there (plain text, just reading and parsing a simple format), you will be safe. As you indicate, Python is generally safe from the more mundane memory corruption errors that C developers can create if they are not careful. The SQL injection scenario you note is not a concern when simply reading in files in python. However , if you are concerned about security, which it seems you are (interjection: good for you! A good programmer should be lazy and paranoid), here are some things to consider: Validate all input . Make sure that each piece of data you read is of the expected size, type, range, etc. Error early, and don't propagate tainted variables elsewhere in your code. Do you know the expected names of the vars, or at least their format? Make sure the validate that it is the kind of thing you expect before you use it. If it should be just letters, confirm that with a regex or similar. Do you know the expected range or format of the data? If you're expecting a number, make sure it's a number before you use it. If it's supposed to be a short string, verify the length; you get the idea. What if you get characters or bytes you don't expect? What if someone throws unicode at you? If any of these are paths, make sure you canonicalize and know that the path points to an acceptable location before you read or write. Some specific things not to do: os.system(attackerControlledString) eval(attackerControlledString) __import__(attackerControlledString) pickle/unpickle attacker controlled content ( here's why ) Also, rather than rolling your own config file format, consider ConfigParser or something like JSON . A well understood format (and libraries) helps you get a leg up on proper validation. OWASP would be my normal go-to for providing a "further reading" link, but their Input Validation page needs help. In lieu, this looks like a reasonably pragmatic read: " Secure Programmer: Validating Input ". A slightly dated but more python specific one is " Dealing with User Input in Python "
