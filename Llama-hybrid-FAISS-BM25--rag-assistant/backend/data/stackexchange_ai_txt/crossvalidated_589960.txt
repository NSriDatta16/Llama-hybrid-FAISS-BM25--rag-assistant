[site]: crossvalidated
[post_id]: 589960
[parent_id]: 
[tags]: 
Unit root testing in AR(2) simulated data

I'm teaching a course in time series analysis, and using a lot of R simulation. I've come across the following situation. Consider an AR(2) process with $x_t = x_{t-1} - x_{t-2}+w_t$ where $w_t$ is Normal(0,1) noise. This process has a unit root (two, actually, namely $0.5 \pm i*\sqrt{3}/2$ ). The code below shows how to simulate the process and one can clearly see that it's not stationary as the variance is increasing over time. set.seed(5) v_0 However, when I run the four unit root tests I know, all four are fooled by this AR(2). adf.test(bad_ar2) # p = 0.02, reject null hyp, conclude it's stationary pp.test(bad_ar2) # p = 0.04, reject null hyp, conclude it's stationary kpss.test(bad_ar2) # p = 0.1, fail to reject null hyp of "stationary" ur.model = ur.ers(bad_ar2) summary(ur.model) # Value of test-statistic is: -2.7164, so reject null of unit root. Wrong. The same thing happens with a seed of 0, 1, and 2. The odds of this happening due to chance alone are slim. It also happens if the sample size is increased from 50 to 500. The situation of stationarity for an AR(2) process is characterized by this triangle . When you pick $(\phi_1,\phi_2)$ outside the triangle, the process won't be stationary and most of the time in my simulations, at least one of the four tests correctly detects that. Same story picking the top point of the triangle or the left or right edge. For $(\phi_1,\phi_2)$ inside the triangle, the tests usually correctly tell you the time series is stationary. But the bottom edge, like the example above, seems to fool the tests. Here's my question: Is there a unit root test that works to detect non-stationarity like the case described here?
