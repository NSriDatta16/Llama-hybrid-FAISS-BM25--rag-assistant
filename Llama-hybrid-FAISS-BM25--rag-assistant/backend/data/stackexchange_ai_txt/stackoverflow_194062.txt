[site]: stackoverflow
[post_id]: 194062
[parent_id]: 191641
[tags]: 
In addition to the strategy pattern, you can also create one adaptor for each of your underlying solutions. Then use strategy to vary them. I've built similar with each report solution being supported by what I called engines, In addition to the variable report solution we have variable storage solution as well - output can be stored in SQL server or file system. I would suggest using a container then initializing it with the correct engine, e.g.: public class ReportContainer{ public ReportContainer ( IReportEngine reportEngine, IStorageEngine storage, IDeliveryEngine delivery...) } } /// In your service layer you resolve which engines to use // Either with a bunch of if statements / Factory / config ... IReportEngine rptEngine = EngineFactory.GetEngine ( pass in some values) IStorageEngine stgEngine = EngineFactory.GetEngine (pass in some values) IDeliverEngine delEngine = EngineFactory.GetEngine (pass in some values) ReportContainer currentContext = new ReportContainer (rptEngine, stgEngine,delEngine); then ReportContainer delegates work to the dependent engines...
