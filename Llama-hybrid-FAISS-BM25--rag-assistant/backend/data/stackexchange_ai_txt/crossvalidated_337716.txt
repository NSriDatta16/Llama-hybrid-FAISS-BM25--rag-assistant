[site]: crossvalidated
[post_id]: 337716
[parent_id]: 337439
[tags]: 
If you can discretize the event at each time moment "t" to some discrete (1 of M) value, you can apply the probabilistic Markov Mixture model. The model is fit using only the data (sequences), no labels are needed. The Markov Mixture model clusters sequence data into predefined number of clusters, K. Each cluster is modeled using a square transition matrix which is learned by the algorithm. Also the algorithm learns initial state probabilities as well as cluster proportions. Once the model is trained, the same model can be used to predict the cluster assignments as probabilities. Confident cluster assignments will have almost all mass for one of the clusters; not confident assignments will have probability mass distributed across multiple (if not most) clusters. You can compute entropy to find the reliable estimates and the difficult ones. I have some work in progress implementation of the model in C# using Infer.NET probabilistic programming framework. The code is on GitHub: https://github.com/usptact/MarkovMixtureModel I suggest to find a tutorial on Markov Mixture models to gain better understanding how it works. With some effort, you can implement it in your favorite language. For your application, I see two hurdles before you can use the model: how to pick the discrete states? how to pick the number of clusters? For the former, the states can be product category the purchased item belongs to. Say, if at moment "t" the person buys "can of pepsi", you can encode it with a state describing "Soda Drinks". The trick is not to have too many states as you would need exponentially more data to train your model on. For the latter, you can sweep the range of cluster values and pick the one for which the model has the highest evidence. The Bayesian probabilistic models naturally provide this probability.
