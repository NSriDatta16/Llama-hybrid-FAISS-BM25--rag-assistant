[site]: stackoverflow
[post_id]: 1103569
[parent_id]: 1081402
[tags]: 
Keep in mind that systems like Django are based on completely scripted environments. The language constructs can be dynamically created, interpreted, and re-interpreted many times during the execution process. Concepts like business rules and forms logic can literally be written as pages are being sent to the client/browser. For compiled languages, all of these moving parts must be pre-created and fully resolved (for the most part). Most of the classic UML based source generation or template based systems were complex behemoths that generated very difficult to use code. The MVC model and libraries like Cocoa and Carbon, though possibly not as "elegant" as the techniques possible in Django, did evolve around the need to tackle some of the same challenges. Although other alternatives exist, such as marrying Objective-C to an interpreted language like LUA or Python is feasible. And there are several open source projects focused at building completely dynamic "over the air" user interface clients that sit on top of server based systems which broadcast details of how the interface looks and behaves. (I can't find the project but will edit when I do) I'm not aware of any major work in this area and suspect that most normal iPhone applications simply haven't been complex enough either in scope or degree of variability to warrant the effort to create these automated systems. Rarely is the user interface the complex part of an iPhone application, perhaps with the exception of a few unique games out there. Barney
