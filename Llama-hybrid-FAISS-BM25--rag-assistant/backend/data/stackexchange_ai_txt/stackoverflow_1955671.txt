[site]: stackoverflow
[post_id]: 1955671
[parent_id]: 1954317
[tags]: 
I don't think that there are any problems with a nested singleton considering that neither class holds a reference to the other. Considering that you say that the singleton provides mutable data storage for several instances, I think your potential problems are going to be concurrency related. These apply only if multi-thread access is allowed, that is, first we have to ensure the appropriate locks are in place so that the singleton is always in a valid state. And second, if the singleton state is changing and objects are accessing in non-deterministic order, the results will not be predictable (i.e. a race condition). If concurrency is not an issue with the application, I find the use of private nested classes to be an excellent way of hiding implementation details and ensuring each object has only one role.
