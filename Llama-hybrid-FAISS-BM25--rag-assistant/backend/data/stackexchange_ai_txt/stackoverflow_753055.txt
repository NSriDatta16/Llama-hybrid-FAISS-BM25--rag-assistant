[site]: stackoverflow
[post_id]: 753055
[parent_id]: 623924
[tags]: 
I think it's too early to say whether Symbian going open-source will be a good or bad thing for the OS. The debate over the branding selected for the Symbian Foundation website shows a certain lack of clarity of the role Symbian software will play in the future. While it's true to say that there is an entire ecosystem that knows about the specifics of developing for Symbian OS, that's pretty meaningless in its own right. After all, there's still an active "ecosystem" that knows how to develop Cobol applications for IBM mainframes. You need to consider the size of the ecosystem and appreciate that that ecosystem is small given that Symbian OS has been around for over a decade and the software powers in excess of 100 million devices today. Consider then the rate of growth of the ecosystems surrounding the offerings from Google and Apple - Symbian never generated that level of excitement and never saw that sort of growth in developer interest. Of course, we're a decade down the line and you could argue Symbian have done the hardwork and created the landscape in which Google and Apple are now competing. But just because Symbian was first, doesn't make it best and doesn't give it any right to survive. It is true to state that the Symbian C++ idioms are a pain to learn. However, it is incorrect to suggest that there is no justification for getting rid of them. The justification is the persistent perception, 10 years on, that developing native code for Symbian OS is too hard. Most if not all these painful idioms were design decisions taken over a decade ago and whilst still beneficial on todays mobile devices are no longer essential. Mobile hardware has moved on substantially in the last decade. Symbian OS has not fundamentally changed, at least in terms of the developer offering. Consider now where PCs would be if the hardware had developed as it has, but the software stopped at Windows 3.1 or 95. We almost certainly wouldn't be able to have this discussion in quite this way for starters. Looking at alternative mobile platforms, consider Android and Maemo. Both are linux based systems. Both use more developer focussed, standard development approaches which leave Symbian OS looking like it's come from another age. That in itself is not necessarily a problem because as others have noted, Symbian OS supports several runtime environments that make development for mobile devices that happen to run Symbian OS much more approachable for the average developer. Taking the runtime support to its natural conclusion, the underlying OS becomes irrelevant. A choice made by the device manufacturer based on cost, time to market, quality etc. But the end user doesn't care and in many cases doesn't know what the OS is. Developers then develop for their preferred runtime, rather than write native code. Of course, we're not at that conclusion yet. We're still travelling the long road. Therefore native code still plays an important part in mobile devices. Hence the ease with which developers can write for a given platform is important - assuming the device manufacturers believe in supporting developer platforms. So, will open sourcing be good for Symbian? It's difficult to see how open sourcing will be bad for Symbian. But whether it will be good or not depends on the ability of the community to make Symbian OS into the OS the community needs.
