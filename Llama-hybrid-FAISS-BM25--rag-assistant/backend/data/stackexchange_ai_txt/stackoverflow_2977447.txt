[site]: stackoverflow
[post_id]: 2977447
[parent_id]: 2977009
[tags]: 
The simpliest, effective and most flexible approach is to create a class, add settings, then serialize/deserialize when needed. This source code for the class can be reused in other assemblies, and persistence can be anywhere. Make sure this class knows how to serialize/deserialize itself because of your security requirement. This ensures the implementation stays with the class. Then the calling assembly just needs to create the object by calling a static/shared method. This gives you strongly-typed settings, versioning, ability to add new settings, and even complex data types (other classes). This object can even be passed to other objects as arguments, and since it supports serialization, it is very flexible. Example See How-To (Object Class => Binary Serialization => To Memory => Encrypt => Save to File) at http://social.msdn.microsoft.com/forums/en-US/netfxremoting/thread/68c200c2-4aa4-48dc-95be-6fe077fd10f4/ Reference Version Tolerant Serialization at http://msdn.microsoft.com/en-us/library/ms229752(VS.80).aspx ISerializable Interface at http://msdn.microsoft.com/en-us/library/system.runtime.serialization.iserializable.aspx Isolated Storage at http://msdn.microsoft.com/en-us/library/3ak841sy.aspx Cryptographic Tasks at http://msdn.microsoft.com/en-us/library/7yx4d854.aspx
