[site]: stackoverflow
[post_id]: 4991675
[parent_id]: 1527234
[tags]: 
I was looking for the same thing, and I found this question. Thank you for asking it! However, I found that the answers I see here don't seem to quite give the answer you asked for (or that I was looking for) -- they seem to give the G commit, instead of the A commit. So, I've created the following tree (letters assigned in chronological order), so I could test things out: A - B - D - F - G This looks a little different than yours, because I wanted to make sure that I got (referring to this graph, not yours) B, but not A (and not D or E). Here are the letters attached to SHA prefixes and commit messages (my repo can be cloned from here , if that's interesting to anyone): G: a9546a2 merge from topic back to master F: e7c863d commit on master after master was merged to topic E: 648ca35 merging master onto topic D: 37ad159 post-branch commit on master C: 132ee2a first commit on topic branch B: 6aafd7f second commit on master before branching A: 4112403 initial commit on master So, the goal: find B . Here are three ways that I found, after a bit of tinkering: 1. visually, with gitk: You should visually see a tree like this (as viewed from master): or here (as viewed from topic): in both cases, I've selected the commit that is B in my graph. Once you click on it, its full SHA is presented in a text input field just below the graph. 2. visually, but from the terminal: git log --graph --oneline --all (Edit/side-note: adding --decorate can also be interesting; it adds an indication of branch names, tags, etc. Not adding this to the command-line above since the output below doesn't reflect its use.) which shows (assuming git config --global color.ui auto ): Or, in straight text: * a9546a2 merge from topic back to master |\ | * 648ca35 merging master onto topic | |\ | * | 132ee2a first commit on topic branch * | | e7c863d commit on master after master was merged to topic | |/ |/| * | 37ad159 post-branch commit on master |/ * 6aafd7f second commit on master before branching * 4112403 initial commit on master in either case, we see the 6aafd7f commit as the lowest common point, i.e. B in my graph, or A in yours. 3. With shell magic: You don't specify in your question whether you wanted something like the above, or a single command that'll just get you the one revision, and nothing else. Well, here's the latter: diff -u Which you can also put into your ~/.gitconfig as (note: trailing dash is important; thanks Brian for bringing attention to that) : [alias] oldest-ancestor = !zsh -c 'diff -u Which could be done via the following (convoluted with quoting) command-line: git config --global alias.oldest-ancestor '!zsh -c '\''diff -u Note: zsh could just as easily have been bash , but sh will not work -- the syntax doesn't exist in vanilla sh . (Thank you again, @conny, for making me aware of it in a comment on another answer on this page!) Note: Alternate version of the above: Thanks to liori for pointing out that the above could fall down when comparing identical branches, and coming up with an alternate diff form which removes the sed form from the mix, and makes this "safer" (i.e. it returns a result (namely, the most recent commit) even when you compare master to master): As a .git-config line: [alias] oldest-ancestor = !zsh -c 'diff --old-line-format='' --new-line-format='' From the shell: git config --global alias.oldest-ancestor '!zsh -c '\''diff --old-line-format='' --new-line-format='' So, in my test tree (which was unavailable for a while, sorry; it's back), that now works on both master and topic (giving commits G and B, respectively). Thanks again, liori, for the alternate form. So, that's what I [and liori] came up with. It seems to work for me. It also allows an additional couple of aliases that might prove handy: git config --global alias.branchdiff '!sh -c "git diff `git oldest-ancestor`.."' git config --global alias.branchlog '!sh -c "git log `git oldest-ancestor`.."' Happy git-ing!
