[site]: stackoverflow
[post_id]: 353649
[parent_id]: 353632
[tags]: 
Initializing variables with the = operator or with a constructor call are semantically the same, it's just a question of style. I prefer the = operator, since it reads more naturally. Using the = operator usually does not generate an extra copy - it just calls the normal constructor. Note, however, that with non-primitive types, this is only for initializations that occur at the same time as the declarations. Compare: std::string strFooA("Foo"); // Calls std::string(const char*) constructor std::string strFoo = "Foo"; // Calls std::string(const char*) constructor // This is a valid (and standard) compiler optimization. std::string strFoo; // Calls std::string() default constructor strFoo = "Foo"; // Calls std::string::operator = (const char*) When you have non-trivial default constructors, the latter construction can be slightly more inefficient. The C++ standard , section 8.5, paragraph 14 states: Otherwise (i.e., for the remaining copy-initialization cases), a temporary is created. User-defined conversion sequences that can convert from the source type to the destination type or a derived class thereof are enumerated (13.3.1.4), and the best one is chosen through overload resolution (13.3). The user-defined conversion so selected is called to convert the initializer expression into a temporary, whose type is the type returned by the call of the user-defined conversion function, with the cv-qualifiers of the destination type. If the conversion cannot be done or is ambiguous, the initialization is ill-formed. The object being initialized is then direct-initialized from the temporary according to the rules above. 87 ) In certain cases, an implementation is permitted to eliminate the temporary by initializing the object directly; see 12.2. Part of section 12.2 states: Even when the creation of the temporary object is avoided, all the semantic restrictions must be respected as if the temporary object was created. [Example: even if the copy constructor is not called, all the semantic restrictions, such as accessibility (11), shall be satisfied. ]
