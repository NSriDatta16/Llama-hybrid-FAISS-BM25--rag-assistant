[site]: stackoverflow
[post_id]: 1511570
[parent_id]: 1200404
[tags]: 
The advantages are, basically, that GWT is a tool to build javascript-based client, thus, it's best suited if you want a javascript-based client. Wicket centers on the server, and while it makes it quite easy to embed javascript into stateless pages, server-side state handling is the more natural approach. One must note that the architectures are very different. With GWT, your architecture turns into client-server, a thick client on the browser, making calls to 'procedures' (services) to the server, sending and receiving data . With Wicket (and other server-side-centric component frameworks, like JSF and Tapestry), the architecture is a more 'traditional' 3-layer one, and what is sent and received are pages or fragments of the pages, not pure data. While you can certainly blend both to adapt to the other architecture, it simply wouldn't be very natural. People tend to focus on 'which is easier to use' (which is completely subjective, depending on your background), or 'which is more beautiful and has more components', but one should not underestimate the architectural difference, which affects the approach you have to take to handle aspects like security and scalability.
