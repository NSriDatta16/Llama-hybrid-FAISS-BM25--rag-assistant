[site]: stackoverflow
[post_id]: 3862704
[parent_id]: 3862545
[tags]: 
I'd approach this in a different way. You have an intermediary model for your m2m. Hence I'd argue that AssignItemsForm should be backed by this intermediary model. Therefore I'd change it as follows: # forms.py class AssignItemsForm(forms.ModelForm): value = forms.DecimalField(max_digits=12, decimal_places=2, required = False) class Meta: model = Customizable Next, the matter of allowing users to choose a different value. In order to do this I've made the value field of the model optional ( required = False ). I then check if the user has supplied an explicit value. If not I assume that the Item 's default value is to be used. For this I am overriding the clean method of the form: def clean(self): super(AssignItemsForm, self).clean() value, item = self.cleaned_data.get('value'), self.cleaned_data.get('item') if not value: value = item.value self.cleaned_data['value'] = value return self.cleaned_data And finally I tested this in admin. # admin.py from app.forms import AssignItemsForm class CAdmin(admin.ModelAdmin): form = AssignItemsForm admin.site.register(Item) admin.site.register(Organization) admin.site.register(Customizable, CAdmin) This way you can continue to use form.save() thereby avoiding custom manipulation in the view. You'll have to change your view a bit to make sure that the organization is auto selected for assigning items. # views.py def assign_items(request, oid): organization = Organization.objects.get(id=oid) if request.method == 'POST': form = AssignItemsForm(data=request.POST.copy()) form.save() else: form = AssignItemsForm(initial = {'organization': organization}) ...
