[site]: stackoverflow
[post_id]: 1174747
[parent_id]: 1143801
[tags]: 
If the set of sample attributes was relatively static then the pragmatic solution that would make your life easier in the long run would be option #2 - these are all attributes of a SAMPLE so they should all be in the same table. Ok - you could put together a nice object hierarchy of base attributes with various extensions but it would be more trouble than it's worth. Keep it simple. You could always put together a few views of subsets of sample attributes. I would only go for a variant of your option #3 if the list of sample attributes was very dynamic and you needed your users to be able to create their own fields. In terms of implementing dynamic user-defined fields then you might first like to read through Tom Kyte's comments to this question . Now, Tom can be pretty insistent in his views but I take from his comments that you have to be very sure that you really need the flexibility for your users to add fields on the fly before you go about doing it. If you really need to do it, then don't create a table for each data type - that's going too far - just store everything in a varchar2 in a standard way and flag each attribute with an appropriate data type. create table sample ( sample_id integer, name varchar2(120 char), constraint pk_sample primary key (sample_id) ); create table attribute ( attribute_id integer, name varchar2(120 char) not null, data_type varchar2(30 char) not null, constraint pk_attribute primary key (attribute_id) ); create table sample_attribute ( sample_id integer, attribute_id integer, value varchar2(4000 char), constraint pk_sample_attribute primary key (sample_id, attribute_id) ); Now... that just looks evil doesn't it? Do you really want to go there?
