[site]: stackoverflow
[post_id]: 212971
[parent_id]: 212358
[tags]: 
This is a little off-topic (since Moe's answer seems complete to the OP's question), but it might be worth looking at the complexity for your whole procedure from end to end. If you're storing thing in a sorted lists (which is where a binary search would help), and then just checking for existence, you're incurring (worst-case, unless specified): Sorted Lists O( n log n) to initially create the list (if it's unsorted data. O(n), if it's sorted ) O( log n) lookups (this is the binary search part) O( n ) insert / delete (might be O(1) or O(log n) average case, depending on your pattern) Whereas with a set() , you're incurring O(n) to create O(1) lookup O(1) insert / delete The thing a sorted list really gets you are "next", "previous", and "ranges" (including inserting or deleting ranges), which are O(1) or O(|range|), given a starting index. If you aren't using those sorts of operations often, then storing as sets, and sorting for display might be a better deal overall. set() incurs very little additional overhead in python.
