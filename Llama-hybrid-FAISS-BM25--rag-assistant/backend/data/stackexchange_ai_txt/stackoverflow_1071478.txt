[site]: stackoverflow
[post_id]: 1071478
[parent_id]: 1071258
[tags]: 
You can detect if an object has a property without having to use the dynamic features of C# 4.0 - instead using the reflection features that have been around for a while (I know at least .NET 2.0, not sure about PropertyInfo info = codeObject.getType().GetProperty( "LinePragma", BindingFlags.Public | BindingFlags.Instance ) If it the object does not have the property, then GetProperty() will return null. You can do similar for fields ( GetField() ) and methods ( GetMethod() ). Not only that, but once you have the PropertyInfo, you can use it directly to do your set: info.SetValue(codeObject, new CodeLinePragma(), null); If you're not sure whether the property has a set method, you could take the even safer route: MethodInfo method = info.GetSetMethod(); if(method != null) method.Invoke(codeObject, new object[]{ new CodeLinePragma() }); This also gives you the added benefit of being a little more performant over the lookup overhead of the dynamic call (can't find a reference for that statement, so I'll just float it out there). I suppose that doesn't answer your question directly, but rather is an alternative solution to accomplish the same goal. I haven't actually used #4.0 features yet (even though I'm a huge fan of the dynamic typing available in Ruby). It certainly not as clean/readable as the dynamic solution, but if you don't want to throw an exception it may be the way to go. EDIT: as @arbiter points out, "This is valid only for native .net dynamic objects. This will not work for example for IDispatch."
