[site]: stackoverflow
[post_id]: 3976191
[parent_id]: 3962708
[tags]: 
You've asked a very general question that's elicited some very good general answers. But your question wasn't about your actual problem: To be sure no one misunderstands, I certainly advocate using forward declarations where possible. My employer, however, has banned them. I'm trying to argue against that position. We have some information on the project, but not enough: The project I'm specifically worried about has about 1200 files. Each cpp on average has 5 headers included. Each header has on average 5 headers included. This regresses about 4 levels deep. It would seem that for each cpp compiled, around 300 headers must be opened and parsed, some many times. (There are many duplicates in the include tree.) There are guards, but the files are still opened. Each cpp is separately compiled with gcc, so there's no header caching. What have you done towards using gcc's precompiled headers? What difference does it make in compile times? How long does it take to compile a clean build now? How long are your typical (non-clean/incremental) builds? If, as in James McNellis' example in comments, build times are under a minute: The last large C++ project on which I worked was on the order of 1 million SLOC (not including third party libraries). ... We didn't use forward declarations much at all and the whole thing built in 10 minutes. Incremental rebuilds were on the order of seconds. Then it doesn't really matter how much time would be saved by avoiding includes: shaving seconds off builds surely won't matter for many projects. Take a small representative portion of your project and convert it to what you'd like it to be. Measure the differences in compilation time between the unconverted and the converted versions of that sample. Remember to touch (or the equivalent of make --assume-new) various sets of files to represent real builds you'd encounter while working. Show your employer how you'd be more productive.
