[site]: stackoverflow
[post_id]: 2738851
[parent_id]: 2738105
[tags]: 
There does not exists any api that lets you do this auto-fill of the entire typed-dataset or no such code is generated within typed-dataset that supports this. It is also difficult to do this because TableAdapters do not have a common base-class that can let you do this. If you really need to do this, you'll have to maintain a collection of DataTable type-names and TableAdapter type-names and iterate over the collection to perform the dataset fill. So I recommend to fill dataset for each table in 'hard-code' manner as your first code examples states. EDIT Here's one possible solution. Define an Interface ITableAdapter as following public interface ITableAdapter : where TDataTable : DataTable { TDataTable SelectAll(); } All TableAdapters are partial classes, so you can extend them and add your custom code in partial custom class for TableAdapter. Implement ITableAdapter on each TableAdapter in your typed-data-set. so it might look like this. public partial class YourTableAdapter : ITableAdapter { public YourDataSet.YourDataTableDataTable SelectAll() { return this.GetData(); } } Now, you can iterate over each type in your assembly and filter those of type ITableAdapter and call SelectAll() method on each of them fill it into your Dataset. :) EDIT2 I just came up with another elegant solution for this problem. All you need to do is define the Interface ITableAdapter to map the already implemented methods in TableAdapters that are generated by the dataset-designer. public interface ITableAdapter : where TDataTable : DataTable { void Fill(TDataTable); } And extend your TableAdapter partial classes like this. public partial class YourTableAdapter : ITableAdapter { //No code required here, since Fill method is already defined in TableAdapter :) }
