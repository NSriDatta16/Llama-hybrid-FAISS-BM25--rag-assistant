[site]: stackoverflow
[post_id]: 2428061
[parent_id]: 2427977
[tags]: 
Interesting problem! First off, stay clear from double / floating point arithmetic . The .NET Decimal type should be quite sufficient and provide better precision! Such improved precision may be particularly important given the fact that the calculation of derived Fx rates requires a chain of multiple operations. Another remark is that it is probably off-limits to introduce a simpler/shorter list of Exchange rates, whereby the Target is always the same [real or fictitious] currency. I'm assuming here that we should use the listed rate when available. So figuring out derived rates should become a [simplified] network solution , whereby Given a Base and Target currencies, we identify all the shortest pathes (from Base to Target), given the authoritative (non derived) rates in the list. (We can hope that the shortest path would be 2, in all cases, but this may not be the case given very esoteric currencies). for each of these shortest paths (I think it would be ludicrous to also consider longer pathes), we perform the simple arithmetic conversion, and... hopefully confirm that these derived rates are all within a nominal margin of conversion error and therefore take the average of these rates raise some alert... or just make a lot of money by using making a circular path and raking in the differential ;-)
