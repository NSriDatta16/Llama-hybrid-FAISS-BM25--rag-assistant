[site]: datascience
[post_id]: 27528
[parent_id]: 27519
[tags]: 
By building a tuple of whether a value is nan or not, you can then construct each unique like: Code: def get_average_run_length(a_df): unique_run_lengths = set( tuple(not np.isnan(x) for x in row[1]) for row in df.iterrows()) return len(a_df) / len(unique_run_lengths) Test Code: df = pd.DataFrame( [[1, 1, np.nan], [np.nan, 2, 10], [1, 3, 100], [4, np.nan, 100]], columns=list('abc')) print(df) print(get_average_run_length(df)) # double the last row df = pd.concat([df, df.tail(1)]) print(df) print(get_average_run_length(df)) Results: a b c 0 1.0 1.0 NaN 1 NaN 2.0 10.0 2 1.0 3.0 100.0 3 4.0 NaN 100.0 1.0 a b c 0 1.0 1.0 NaN 1 NaN 2.0 10.0 2 1.0 3.0 100.0 3 4.0 NaN 100.0 3 4.0 NaN 100.0 1.25
