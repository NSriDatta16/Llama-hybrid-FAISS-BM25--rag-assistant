[site]: stackoverflow
[post_id]: 4888845
[parent_id]: 
[tags]: 
Cross referencing structure from single data input

Another one of my can't see the wood for the trees questions. Background I've got a requirement to query a predefined structure for cooking equivalents across (at the moment) a small range of cultures. The structure won't change but the possibility of other cultures and/or equivalents being introduced is a very strong possibility. Problem I would like to put in place a 2nd 'structure' that would allow me to retain the core of what I've been given, but at the same time, allow me to intelligently input the equivalent measurements only once. In the example below, I've only created an equivalent for a UK measurement to return it's partner Metric and US counterparts. My aim would be that from this single input, the structure would be able to spit back a UK equivalent if given a US counterpart etc, etc. Question Is it asking too much of such an implicit structure to be able to operate in this fashion. Is it bad practice to ask for such a thing?? What would be your approach to solving such a dilema. The end game would be that any equivalent should be produced as a single liner along the lines of: // this should produce a value of **CupLitre** var eqv = conversion["CupUS"][LocaleM.Metric]; Anyway, without further ado: The Example Whip up a console app and paste the code below into it (.net v3.5). using System; using System.Collections.Generic; using UnitOfMeasurements; namespace UnitOfMeasurements { [Flags] public enum LocaleM { None = 0, //(0000) Metric = 1, //(0001) UK = 2, //(0010) US = 4, //(0100) } } class Program { public static void Main(string[] args) { // single structure representing UK equivalents // this should be extensible to any equivalent var conversionUK = new Dictionary > { {"PintUK", new Dictionary { {LocaleM.US, "PintUS"}, {LocaleM.Metric, "Litre"} } }, {"FlOzUK", new Dictionary { {LocaleM.US, "FlOzUS"}, {LocaleM.Metric, "MilliLitre"} } }, {"CupUK", new Dictionary { {LocaleM.US, "CupUS"}, {LocaleM.Metric, "CupLitre"} } } }; // basic printout of results Console.WriteLine(string.Format("{0}\t{1}\t{2}", "Key","US","Metric")); foreach (var item in conversionUK) { Console.WriteLine(string.Format("{0}\t{1}\t{2}", item.Key, item.Value[LocaleM.US], item.Value[LocaleM.Metric])); } Console.WriteLine(string .Format("Here's an example of our direct 'query' - {0}", conversionUK["CupUK"][LocaleM.Metric])); Console.Read(); } } Good luck - looking fwd to some simple but elegant answers. [edit] - i must add that the requirement for the inputs ("PintUK", "CupMetric") etc, to be strings is a must as these values will be driving (IVolumeUnit)Activator.CreateInstance(eqv) methods further downstream to create concrete conversion classes of the given string names.
