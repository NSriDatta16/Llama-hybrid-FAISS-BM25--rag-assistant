[site]: stackoverflow
[post_id]: 1257983
[parent_id]: 1257890
[tags]: 
Recursion is the most elegant way to do this, but I don't think mySql supports it in custom functions or storedprocedures. I would suggest a loop into a temp table or table variable to get your IDs, then join the table and query the results back. I don't know mySql very well so this is untested, but something to this effect. CREATE TEMPORARY TABLE tbl (myid int, ViewOrder int); Set @ifoundID=IdYourLookingFor; Set @iStartID=@ifoundID; Set @iOrder=0; INSERT INTO tbl(myid,ViewOrder)VALUES(@ifoundID,@iOrder); BEGIN --get the ones going up WHILE (@ifoundID Is Not Null) DO SELECT @ifoundID=reply_id FROM YourTable WHERE id=@ifoundID; --find the next id SET @iOrder1=@iOrder-1; --increment the order INSERT INTO tbl(myid,ViewOrder)VALUES(@ifoundID,@iOrder);--save the nextid END WHILE; END Set @ifoundID=@iStartID; BEGIN --get the ones going down WHILE (@ifoundID Is Not Null) DO SELECT @ifoundID=id FROM YourTable WHERE reply_id=@ifoundID; --find the next id SET @iOrder1=@iOrder+1; --increment the order INSERT INTO tbl(myid,ViewOrder)VALUES(@ifoundID,@iOrder);--save the nextid END WHILE; END SELECT * FROM tbl INNER JOIN YourTable ON tbl.myid=YourTable.id ORDER BY ViewOrder Hope that helps
