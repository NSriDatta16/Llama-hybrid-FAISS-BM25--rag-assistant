[site]: stackoverflow
[post_id]: 382516
[parent_id]: 382480
[tags]: 
I'm no expert but i gonna try answering you anyway :) FooClass is a non-POD type. This mean it could have more than one sections of private , public or protected . Within such a section, the order is that of the definition of the members, but across those sections, order is arbitrary and unspecified. foo will always point to FooClass. Well so we have guarantee there is no offset adjustment done. At least in one compilation, offsets will be the same then (don't have the backing up Standard quote. But it can't work if they were different). We only care about behavior on a single compiler. Well since the order of members is unspecified across sections of access modifiers and the compiler is allowed to put padding between members, this won't buy us much. We only care about objects on the stack (automatic storage duration). Well i don't see how that changes anything of the object layout. So after all i don't think you have any guarantee that the offset will be constant across compilations. For considerations within one compilation (so if we would play with a compiler whose generated code uses an ABI that changes with each different compilation), the offset just can't be different. But even if you know the offset, you can't access the member. Your only way to access a member is using the member access operator -> and . (that's said in 9.2/9). Why not use data member pointers? They allow accessing members safely. Here is an example: ( looking up members by name ).
