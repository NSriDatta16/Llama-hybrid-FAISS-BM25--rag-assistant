[site]: stackoverflow
[post_id]: 3884679
[parent_id]: 3884612
[tags]: 
There are elegant ways to do this. Is there any way to simplify this process? Whenever I add a new member to class Foo, I'm forced to modify the constructor. There is also a crude way. It will work, but is NOT recommended. See and decide. >>> class Foo(object): def __init__(self, **attrs): self.__dict__.update(**attrs) def __getattr__(self, attr): return self.__dict__.get(attr, None) >>> f = Foo(a = 1, b = 2, c = 3) >>> f.a, f.b (1, 2) >>> f = Foo(bar = 'baz') >>> f.bar 'baz' >>> f.a >>> The keyword argument constructor lets you get away without explicitly defining any arguments. Warning : this goes against the "explicit is better than implicit" principle . You need to override __getattr__ ONLY if you want to return a default value for an attribute that is not present instead of getting an AttributeError .
