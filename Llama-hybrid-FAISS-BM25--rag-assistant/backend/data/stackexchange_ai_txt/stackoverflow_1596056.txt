[site]: stackoverflow
[post_id]: 1596056
[parent_id]: 1595498
[tags]: 
Most often, you see the interface type (IDictionary) used when the member is exposed to external code, whether that be outside the assembly or just outside the class. Typically, most developers use the concrete type internally to a class definition while they expose an encapsulated property using the interface type. In this way, they can leverage the concrete type's capabilities, but if they change the concrete type, the declaring class's interface doesn't need to change. public class Widget { private Dictionary map = new Dictionary (); public IDictionary Map { get { return map; } } } later can become: class SpecialMap : IDictionary { ... } public class Widget { private SpecialMap map = new SpecialMap (); public IDictionary Map { get { return map; } } } without changing Widget's interface and having to change other code already using it.
