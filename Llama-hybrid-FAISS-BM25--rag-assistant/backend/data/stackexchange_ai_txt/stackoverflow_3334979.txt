[site]: stackoverflow
[post_id]: 3334979
[parent_id]: 3334911
[tags]: 
According to the blog post The most complete list of -XX options for Java JVM , it determines if class unloading is enabled under the CMS garbage collector. The default is false . There is another option called ClassUnloading that is true by default which (presumably) affects the other garbage collectors. The idea is that if the GC detects that a previously loaded class is no longer used anywhere in the JVM, it can reclaim the memory used to hold the classes bytecode and/or native code. Setting CMSClassUnloadingEnabled might help with your permgen problem if you are currently using the CMS collector . But the chances are that you are not using the CMS, or that you have a genuine classloader related memory leak. In the latter case, your class will never appear to the GC to be unused ... and will therefore never be unloaded. Aaron Digulla says "classes are for ever". This is not strictly true, even in the purely Java world. In fact, the lifetime of a class is tied to its classloader. So if you can arrange that a classloader is garbage collected (and that is not always an easy thing to do) the classes that it loaded will also be garbage collected. In fact, this is what happens when you do a hot redeploy of a webapp. (Or at least, that's what should happen, if you can avoid the problems that lead to a permgen storage leak.)
