[site]: stackoverflow
[post_id]: 4119118
[parent_id]: 4114548
[tags]: 
I just coded this together, using the autocomplete from jQuery UI v1.8rc3 (I think that is an old version; it works with jQuery 1.4.2), and WCF 3.5 (also one rev out of date). Here's how I did mine. WCF Service using System; using System.Linq; using System.Collections.Generic; using System.ServiceModel; using System.ServiceModel.Web; using System.Runtime.Serialization; namespace Ionic.Samples.Webservices._2010.Nov { [ServiceContract(Namespace="urn:Ionic.Samples" )] public interface ICompletionService { [OperationContract] [WebInvoke(Method = "GET", RequestFormat=WebMessageFormat.Json, ResponseFormat = WebMessageFormat.Json, UriTemplate = "getcompletions/{fragment}")] List GetCompletions(string fragment); } [ServiceBehavior(Name="WcfJqueryAutoComplete", Namespace="urn:Ionic.Samples", InstanceContextMode=InstanceContextMode.Single, // one instance for all requests IncludeExceptionDetailInFaults=true)] public class WcfJqueryAutoComplete : ICompletionService { private List allCandidates; public WcfJqueryAutoComplete() { allCandidates = new List { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "Yammer", "Yaw", "Yawn", "Auspiscious", "Arbitrage", "Arbiter", "Arbor", "Ardor", "Ardent", "Concrete", "Conscious", "Uptight", "Uplevel", "Friend", "Depend", "Deepend", "Deepen", "Decommit", "Right", "Now", "Knowledge", "Knight", "Know", "Knickers", "Wow", "Holy", ... }; } public List GetCompletions(String fragment) { var frag = fragment.ToUpper(); // use LINQ to select candidates from the in-memory list. // You could replace this with a SQL query. var selection = from candidate in allCandidates where candidate.ToUpper().StartsWith(frag) select candidate; return new List (selection); } } } The .svc file The relevant WCF .config info The Javascript logic This works nicely. ps: for debugging jQuery, I have found that the debugger tools included in FF or IE8+ are invaluable. In IE8 press F12 to get the debugger console. Also, when developing I often set up a div, with id=msgs, to collect diagnostic information from javascript logic. Then I use this kind of function to drop info into it, at different stages of execution. function addMessage(msg, clear){ if (clear !== null && clear) { $('#msgs').html(""); } $('#msgs').append(" " + msg + " "); }
