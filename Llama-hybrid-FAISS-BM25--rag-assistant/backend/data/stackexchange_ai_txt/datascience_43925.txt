[site]: datascience
[post_id]: 43925
[parent_id]: 43905
[tags]: 
this is pretty simple approach Firstly, can you evaluate your scripts on more images to get an idea of how well it performs? If you get an acceptable classification accuracy (or e.g. a good F1 score), then there is no need to try out a CNN! I have no idea about the false positives Actually if you cannot evaluate your method like that, then a CNN is also not possible! If you still want to try a deep learning method, bear in mind that you will generally need a lot of images, let's say at least 1000 in your "master image" training set - then hopefully a good percentage of images to test again (hold-out set / test set). I don't know the approach for the problem is the best one Your current method seems reasonable to me. There probably is "the best" method in general, so don't be too worried. Somebody has written An Analysis of Deep Neural Networks for Texture classification - maybe that contains some ideas to get you started :-) Here is a short video intro to one approch that introduced the Local Binary CNN , which was originally used for image classification, but perhaps could be adjusted to your problem. Instead of aiming for target classes, you would simply need to map input to the labels, and could even relax the focus on colour/texture - the CNN would extract what it needs to learn the mapping. NOTE: the downside of an end-to-end system like that is that you would no longer know what your model is using as its features to make its prediction! Colour? Texture? Raw RGB values in the top left corner? This is actually where the LBCNN could shine, because its sparse (stochastically) binary kernels are much less likely to overfit to your training data, compared to a standard CNN. While I couldn't find the code of the authors from the video above, here is an LBCNN implementation for face detection.
