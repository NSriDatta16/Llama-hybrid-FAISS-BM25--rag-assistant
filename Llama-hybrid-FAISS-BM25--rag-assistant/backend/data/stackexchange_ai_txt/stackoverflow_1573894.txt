[site]: stackoverflow
[post_id]: 1573894
[parent_id]: 1573806
[tags]: 
Given a class A : class A { MyDataObj obj; } If you don't write the constructor for A , the compiler will create one for you, which will create obj as part of constructing A (and destroy obj as part of destroying A . If you do write a constructor for A , then obj will be created before your constructor runs, although you can reassign it: class A { MyDataObj obj; public: A() { } // obj created, but the value may or may not be predictable } class AA { MyDataObj obj; public: AA() { obj = MyDataObj(5); } } class AAA { MyDataObj obj; public: AAA() : obj(5) { } // member initializer list, my preferred method } With the third option, the data objects are created before the member initializer list runs, and the values are assigned in the order they are declared in AAA , NOT the order they are listed in the member initializer list. UPDATE : There is a difference between creation and initialization. Space for the data members (and the base classes, and the data members for the base classes) is always set aside -- which I would call "creation." However, that doesn't mean a useful value is stored in that memory. There are separate rules for whether an object is default initialized , which depend on the type of the data member (primitive, POD, non-POD) and, IIRC, the storage class of the main object (local, static, global). The easiest way to avoid surprises in this area is to simply make sure you explicitly initialize everything.
