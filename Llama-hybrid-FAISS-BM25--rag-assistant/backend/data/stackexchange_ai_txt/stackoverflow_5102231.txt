[site]: stackoverflow
[post_id]: 5102231
[parent_id]: 5097604
[tags]: 
Before you invest time to read and try my approach, I want to say that Joe Stefanelli's answer is an excellent one - short, compact, advanced and probably better than mine, espacially in terms of performance. On the other hand, performance might not be your first concern (how many activations to you expect per day? per hour? per minute?) and my example may be easier to read and understand. As I don't know how your database schema is set up, I had do to some assumptions on it. You probably won't be able to use this code as a copy and paste template, but it should give you an idea on how to do it. You were talking about a lockout table, so I reckon you have a reason to duplicate portions of the data into a second table. If possible, I would rather use a lockout flag in the table containing the systems data, but obviously that depends on your scenario. Please be aware that I currently do not have access to a SQL Server, so I could not check the validity of the code. I tried my best, but there may be typos in it even though. First assumption: A minimalistic "registered systems" table: CREATE TABLE registered_systems (id INT NOT NULL IDENTITY, owner_id INT NOT NULL, system_id VARCHAR(MAX) NOT NULL, activation_date DATETIME NOT NULL) Second assumption: A minimalistic "locked out systems" table: CREATE TABLE locked_out_systems (id INT NOT NULL, lockout_date DATETIME NOT NULL) Then we can define a stored procedure to activate a new system. It takes the owner_id, the number of allowed systems and of course the new system id as parameters. CREATE PROCEDURE register_new_system @owner_id INT, @allowed_systems_count INT, @new_system_id VARCHAR(MAX) AS BEGIN TRANSACTION -- Variable declaration DECLARE @sid INT -- Storage for a system id -- Insert the new system INSERT INTO registered_systems (owner_id, system_id, activation_date) VALUES (@owner_id, @system_od, GETDATE()) -- Use a cursor to query all registered-and-not-locked-out systems for this -- owner. Skip the first @allowed_systems_count systems, then insert the -- remaining ones into the lockout table. DECLARE c_systems CURSOR FAST_FORWARD FOR SELECT system_id FROM registered_systems r LEFT OUTER JOIN locked_out_systems l ON r.system_id = l.system_id WHERE l.system_id IS NULL ORDER BY r.activation_date DESC OPEN c_systems FETCH NEXT FROM c_systems INTO @sid WHILE @@FETCH_STATUS = 0 BEGIN IF @allowed_systems_count > 0 -- System still allowed, just decrement the counter SET @allowed_systems_count = @allowed_systems_count -1 ELSE -- All allowed systems used up, insert this one into lockout table INSERT INTO locked_out_systems (id, lockout_date) VALUES (@sid, GETDATE()) FETCH NEXT FROM c_systems INTO @sid END CLOSE c_systems DEALLOCATE c_systems COMMIT
