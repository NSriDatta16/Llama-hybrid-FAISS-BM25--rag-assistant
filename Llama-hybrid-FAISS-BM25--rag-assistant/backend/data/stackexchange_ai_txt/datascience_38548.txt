[site]: datascience
[post_id]: 38548
[parent_id]: 
[tags]: 
LSTM future steps prediction with shifted y_train relatively to X_train

I'm trying to predict simple one feature time series data with shifted train data. The source looks like this: DATE PRICE 0 1987-05-20 18.63 1 1987-05-21 18.45 2 1987-05-22 18.55 3 1987-05-25 18.60 4 1987-05-26 18.63 Actual code with data link download gisted here: gist So the main problem is that it actually can't predict next steps. Roughly speaking: y_train "shifted" relatively to X_train by timesteps defined in parameters. So we getting for X_train and y_train something like this: timesteps = 5 data = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] # After manipulations which you can find in gist we getting this: X_train = [[ 1 2 3 4 5] [ 2 3 4 5 6] [ 3 4 5 6 7] [ 4 5 6 7 8] [ 5 6 7 8 9] [ 6 7 8 9 10] [ 7 8 9 10 11] [ 8 9 10 11 12] [ 9 10 11 12 13] [10 11 12 13 14]] y_train = [[ 6 7 8 9 10] [ 7 8 9 10 11] [ 8 9 10 11 12] [ 9 10 11 12 13] [10 11 12 13 14] [11 12 13 14 15] [12 13 14 15 16] [13 14 15 16 17] [14 15 16 17 18] [15 16 17 18 19]] So it is fair to assume that after training LSTM model with X_train (as input) and y_train (as output) we getting model which able to forecast n timesteps ahead. BUT I encountered a problem that trained model not predicting anything - only "duplicates" X_test data. For the convenience I rebuild X_test data and plot it with y_test data which returns from model.predict(): So this is result which also contains 'Dataset prices' (pure data from dataset[upper_train + timesteps:]) for clarity. I can not find where I made a mistake (or maybe this approach is bad?) so I will be grateful for any help!
