[site]: stackoverflow
[post_id]: 4609801
[parent_id]: 4609603
[tags]: 
What kind of jobs are we talking about? If the jobs themselves consist from database work, then your best option is to leverage internal Activation in SQL Server. Internal activation can launch C#/.Net code too. See Asynchronous procedure execution for an example. Using Activation is the most reliable way. The scheduled jobs can survive mirroring and clustering fail over. In fact is so reliable that the scheduled job will activate and run even after a server crash and rebuild of the server from database backups on a new host. However, this should not be used if the jobs need to do 'external' work, eg. connect to a Web service. For such services you could use the External Activator and leverage the reliability and self balancing scale inherent on SQL Server Activation mechanism, but ultimately is still a Windows Service and a Service Broker queue. If you find the overhead of built-in SQL queues to high, I recommend going over Using tables as Queues and try to stick with the basics. Don't add fancy peeks or scans over the queue table, or your system will be swamped by deadlocks, a common issue with using tables as queues.
