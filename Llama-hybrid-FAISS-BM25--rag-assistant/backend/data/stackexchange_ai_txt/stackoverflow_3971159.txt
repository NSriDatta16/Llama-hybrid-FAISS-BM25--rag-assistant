[site]: stackoverflow
[post_id]: 3971159
[parent_id]: 3970551
[tags]: 
It's clear this code was not copy/pasted here as the value = input line is missing a semicolon and this would never compile. Assuming the syntactic issues are just a matter of typos when writing the SO question, the code looks OK. This means some other assumption is breaking down. The most likely false assumptions based on this code snippet are: variables wired to the UIButtons variables are UIButtons. The Setinput: method is being called. I suspect the buttons are not wired to those variables, but it's impossible to tell from just this code snippet. I'm curious why the cast to (UIControlState) is there. What happens if you compile without it? Here's what you can do to figure it out: click on the line number next to the value = input; line to set a breakpoint there and then "Build & Debug." When the program gets to the breakpoint, step through the code paying attention to the values of your variables in the variable view. You may have to open up "self" to see them. I suspect the first assumption is false and b_do and friends will be 0x00 . If not, it can also help to show the Type column in the variable view (Run -> Variable View -> Show Type Column) so you can make sure the buttons are UIButton objects as you expect. This verifies the second assumption is true. If the app never reaches that breakpoint, then the third assumption has failed and the problem is not in this code, but somewhere else. Except it could be this code. Are you really calling [xxx Setinput:0] or are you calling xxx.input=0 ? Why do I ask? When following Objective-C conventions, classes start with a capital letter, variables and methods start with a lower-case letter, and all three are CamelCased. So, by convention Setinput: should be setInput: . This is important because xxx.input=0 is syntactic sugar for [xxx setInput:0] . If you don't follow the capitalization conventions, then the syntactic sugar won't work as expected.
