[site]: stackoverflow
[post_id]: 4120470
[parent_id]: 4060143
[tags]: 
This answer is slightly different, with no .def files and a forwarded __stdcall function, which is more similar to the situation. Note that to export the stdcall name, the decorated name was needed on both sides of the = in the /export . It also has a fancier #include "fwd.h" so it can be reused in the DLL and the client EXE. org.c #define ORGAPI __declspec(dllexport) ORGAPI int data = 5; ORGAPI int __stdcall func(int a) { return a * 2; } fwd.c #define FWDEXPORTS #include "fwd.h" int func2(int a) { return a + 2; } fwd.h #pragma once #ifdef FWDEXPORTS #define FWDAPI __declspec(dllexport) // forwarded APIs exported here #pragma comment(linker,"/export:_func@4=org._func@4") #pragma comment(linker,"/export:_data=org.data") #else #define FWDAPI __declspec(dllimport) // forwarded APIs imported here FWDAPI int __stdcall func(int a); FWDAPI int data; #endif // APIs unique to forwarding DLL here FWDAPI int func2(int a); example.c #include #include "fwd.h" int main() { printf("data=%d func(5)=%d func2(5)=%d\n",data,func(5),func2(5)); return 0; } makefile all: example.exe org.dll example.exe: example.c fwd.h fwd.dll cl /nologo /W4 example.c /link /nologo fwd.lib org.dll: org.c cl /nologo /LD /W4 org.c /link /nologo fwd.dll: fwd.c fwd.h cl /nologo /LD /W4 fwd.c /link /nologo clean: del *.exe *.dll *.obj *.exp *.lib
