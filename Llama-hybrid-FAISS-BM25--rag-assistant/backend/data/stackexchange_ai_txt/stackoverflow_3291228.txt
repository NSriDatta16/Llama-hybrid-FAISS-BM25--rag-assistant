[site]: stackoverflow
[post_id]: 3291228
[parent_id]: 3182229
[tags]: 
I think you need to introduce a new layer into your architecture; a service layer. Usually, I pass in my relevant services to my ViewModel and the ViewModel does the handling of the async calls and showing busy states and all that fun stuff. For instance, if you have a Product Model, and ProductListViewModel with a collection of products and maybe a search command, then you would introduce a ProductSearchService (Or ProductLoadService that loads all products). I would then pass that ProductSearchService into your ProductListViewModel constructor (dependency injection) and let your ViewModel control the retrieval of the Products (your model objects) by calling the relevant service methods and loading the response. ProductListService Returns Product (Model) List ProductListViewModel uses ProductListService to get Products ProductListView binds to ProductList ObservableCollection in ProductListViewModel. This pattern essentially resembles Model-View-Controller, where the ViewModel takes more of the Controller responsibilities. Since you mention REST based web services, I have an example blog post of using MVC 2 JSON results as a service layer for a Win Phone 7 app: Data Driven Win Phone 7 Apps with MVC 2 JSON services
