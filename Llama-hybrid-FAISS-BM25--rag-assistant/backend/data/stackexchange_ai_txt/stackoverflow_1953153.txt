[site]: stackoverflow
[post_id]: 1953153
[parent_id]: 1952926
[tags]: 
I'm not sure there is a quick way really. The docs are pretty vast. And you need a pretty solid knowledge of fundamental graphics principles. I had trouble getting my head round the concepts and I have used a lot of graphics toolkits. Couple of points that might be useful: when trying to draw a rotated image, you need to translate the coordinate transformation back to the QUARTZ origin (bottom left) not some custom origin you set up eg top-left SO you're best off (unless you know you and no one else maintaining your code will ever want to daw rotated images) accepting the possibly new to you ideas of using bottom left coordinates (where appropriate) rather than trying to override them by changing the context CTMs don't assume that Core Graphics can do everything you want. You may need to manipulate pixels manually yourself for some tasks design with the memory limitations and numbers and sizes of buffers to do a processing sequence firmly in mind design with the texture size limitation of 1024 pixels in mind make sure you use algorithms and approaches that are within the capabilities of the CPU and/or GPU; test with a mock-up first to sound out the performance issues if doing 3D animations in OpenGL ES make sure that you have a way to reconcile and synchronize real time with the physics model of whatever you are animating consider colour management, shading and highlighting, pay particular attention to the device's capabilities there where possible use Core Animation instead of Core Graphics
