[site]: stackoverflow
[post_id]: 5554420
[parent_id]: 5554230
[tags]: 
Ok so you request some guidance rather then code, that's good because no one is going to create you the source for this type of site anyway without some sort of revenue. please don't take this as an offence but your obviously lacking the skills to develop a system that can handle this sort of user iterations so the below will seem alien to yourself but for others that may be reading it it could help them more then it will help you. Begin What i would advise is you break down the site into components, and then look at each component with a little more detail. I would break the site's object down into the following sections: Database Layout Type Uploading Security Storage Quotas Methods (API?) Downloading Limitations Permissions restrictions Users Registration Based User Permissions / Roles Subscriptions there's a lot more to be added but the idea is to look at each component in detail, if you have to get pen and paper then do so, it will only make things easier. Ok so lets start with the Database , the database would probably be pretty simple, MySQL is usually a good choice these days, but there are alternatives. For the structure you would need to look at all the other aspecs of the site first to be able to understand what is required of the database. As for the Uploading / Downloading I would not rely on Apache for this, Apache spawns a new thread per request and when sending large file with speed limitations on them threads stay active for longer so potentially you could have thousands of download / upload threads and cause your servers to be extremely slow. I would look at libev as a concept, which as been incorporated into Node which does not use threads and utilizes the Disk I/O libev + node is an event loop structure that runs in a single thread, you then assign callbacks to a disk read for example, then when the disk has spun up and is ready to send you a chunk of data your callback is called, but during the time you assign the callback and the time the callback was actually called the process has handle hundreds of other callbacks you may have set/ The users would need to be placed out within a structure chart, creating a plan of how the users would be organized within your structure would help you then understand revenue avenues. Firstly you should start with a framework that can help you build quick and scalable applications of which you have a lot of control over, such as Codeigniter, this will help you build up a framework for your site to run around, now you can also use Node.JS For this but for security reasons I would advise you only use Node for the passing of file data to the client. i think you get the idea :)
