[site]: crossvalidated
[post_id]: 147816
[parent_id]: 
[tags]: 
How to create a multidimensional data structure in R as input to kernlab's ksvm()

This is a revision/rephrasing of my question originally posted on stackoverflow . How should I create the training/input dataset for a ksvm model with multi-dimensional input data? The process for which I need a binary yes/no prediction model has six non-periodic time series inputs, all with the same sampling frequency. An event triggers the start of data collection, and after a pre-determined time I need a yes/no prediction (preferably including a probability-of-correctness output). I'm pretty new to both R and SVM's, but I think I want to use an SVM model ( kernlab's ksvm ). I'm having trouble figuring out how to present the input data to it. There are two basic strategies I've tried with dismal results (well, the resulting models were better than blind guessing, but not much). First of all, not being familiar with R, I used the Rattle GUI front-end to R. I have a feeling that by doing so I may be limiting my options. But anyway, here's what I've done..... Example known result files (shown with only 4 sensors instead of 6, and only 7 time samples instead of 100): training168_yes.csv Seconds Since 1/1/2000,sensor1,sensor2,sensor3,sensor4 454768042.4, 0, 0, 0, 0 454768042.6, 51, 60, 0, 172 454768043.3, 0, 0, 0, 0 454768043.7, 300, 0, 0, 37 454768044.0, 0, 0, 1518, 0 454768044.3, 0, 0, 0, 0 454768044.7, 335, 0, 0, 4273 training169_no.csv Seconds Since 1/1/2000,sensor1,sensor2,sensor3,sensor4 454767904.5, 0, 0, 0, 0 454767904.8, 51, 0, 498, 0 454767905.0, 633, 0, 204, 55 454767905.3, 0, 0, 0, 512 454767905.6, 202, 655, 739, 656 454767905.8, 0, 0, 0, 0 454767906.0, 0, 934, 0, 7814 The only way I know to get the data for all training samples into Rattle is to massage & combine all result files into a single .csv file, with one sample result per line. I can think of only two ways to do that, so I tried them both (and I knew when I was doing it that by doing this I'm hiding potentially important information, which is the point of this question): TRIAL #1: For each result file, add each sensor's samples into a single number, blasting away all temporal information: result,sensor1,sensor2,sensor3,sensor4 no, 886, 1589, 1441, 9037 yes, 686, 60, 1518, 4482 no, 632, 1289, 1173, 9152 yes, 411, 67, 988, 5030 no, 772, 1703, 1351, 9008 yes, 490, 70, 1348, 4909 When I get done using Rattle to generate the SVM, Rattle's log tab gives me the following script which can be used to generate & train an SVM in RGui: library(rattle) building TRIAL #2: For each result file, add the samples for all sensors for each time into a single number, blasting away any information about individual sensors: result,time1, time2, time3, time4, time5, time6, time7 no, 0, 549, 892, 512, 2252, 0, 8748 yes, 0, 283, 0, 337, 1518, 0, 4608 no, 0, 555, 753, 518, 2501, 0, 8984 yes, 0, 278, 12, 349, 1438, 3, 4441 no, 0, 602, 901, 499, 2391, 0, 7989 yes, 0, 271, 3, 364, 1474, 1, 4599 And again I use Rattle to generate the SVM, and Rattle's log tab gives me the following script: library(rattle) building Unfortunately even with nearly 1000 training datasets, both of the resulting models give me only slightly better results than I would get by just random chance. I'm pretty sure it would do better if there's a way to avoid blasting away either the temporal data or the distinction between different sensors. But it would seem that somehow I'd need to present a 2-dimensional array (matrix? I'm not a math guy so I don't know if I should be using the term "matrix" here) for each observation instead of a single-dimensional array (i.e. it seems like instead of each observation being one line of a .csv file, each observation would need to be an entire 2-dimensional .csv file itself, and I'd need to present an array/list of the .csv files, meaning the input training set would be a 3-dimensional structure of some sort. How can I create such a structure for input to ksvm() ?
