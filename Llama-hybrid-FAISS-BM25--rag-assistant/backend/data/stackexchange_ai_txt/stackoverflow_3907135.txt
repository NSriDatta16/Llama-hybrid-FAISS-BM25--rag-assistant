[site]: stackoverflow
[post_id]: 3907135
[parent_id]: 3906487
[tags]: 
As far as I understand it, typical PermGen storage leaks go like this. Somewhere there is a reachable reference to some object whose class has been replaced by a hot deployment. That object has a reference to its Class descriptor. The Class descriptor has a reference to its ClassLoader. The ClassLoader has references to the Class descriptors for all classes that it has loaded. Each Class descriptors has references to the classes statics frame, its bytecodes, its native code, and so on. Just one reference to one object is sufficient to cause the permgen leak. If could be an enum value, a listener that hasn't been unregistered, ... EDIT The normal approach taken by people who encounter this problem is to shrug their shoulders and increase the PermGen heap size. If you really need to fix the problem for your web application(s), then: Look at the way that your webapp shuts down, making sure that database connections / connection pools are closed, all callbacks are unregistered, etc. Use a Java memory profiler to trace the PermGen (and other) memory leaks triggered by a redeployment. Be prepared to repeat the process if new leaks are introduced as your webapp evolves. I don't know if there are specific issues with Hibernate, but any complicated framework is potentially susceptible to this kind of problem, either on its own or in combination with application code.
