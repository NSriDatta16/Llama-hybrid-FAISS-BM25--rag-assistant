[site]: stackoverflow
[post_id]: 4531977
[parent_id]: 3105241
[tags]: 
I see this is an old question, but since I'm in the same boat I thought I'd give it a shot. I've got a 100k+ page site written in Classic ASP over the past 12-15 years. Unlike a lot of hacked-together code, it's well structured, complicated, and efficient, and has been refined to such a degree that bugs are very, very rare. A lot of the new features that were added over the past three or four years were implemented in ASP.NET. This has required reimplementing a lot of the underlying DAL and business logic, and, of course, the new stuff is never as stable as the code that's been running without a hitch for close to a decade. It's also very, very nice to keep the source off of the server and away from prying eyes and fingers. I resisted MVC at first, but I've come to love it. It doesn't offer all of the features of Webforms - easily packaged and redistributable user controls is something that I really, really miss - but it's much more traditional app development than web development, which I like. It's also significantly easier to write tests for - a huge selling point for me. So, the current Visual Studio solution looks like this: a bunch of .NET class libraries (DAL, etc) an ASP web application project containing all of the old code and all of the webforms stuff an MVC web application project. IIS is pointed to the MVC project folder, so all of the MVC stuff just works as expected. The website configuration includes virtual folders for all of the ASP stuff that hasn't been migrated (this will take years). Those virtual directories point to a folder outside of the MVC folder structure where the Webforms and Classic ASP code/objects are stored. When IIS receives a request, things that are mapped to the virtual folders are processed by classic ASP or the webforms, while everything else is routed to the appropriate MVC area. I keep these projects separated intentionally; having a single solution with ASP, MVC and webforms all in the same folder structure is a sure path to insanity. It works quite well, but was a bit of a pain to get configured at the get go. So, yes, all three technologies will happily exist in the same site, but you've got some organizational challenges ahead of you.
