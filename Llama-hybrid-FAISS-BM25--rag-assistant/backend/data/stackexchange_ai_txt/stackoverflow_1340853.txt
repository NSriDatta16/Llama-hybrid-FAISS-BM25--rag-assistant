[site]: stackoverflow
[post_id]: 1340853
[parent_id]: 1340712
[tags]: 
One approach you could take is to organize your test units so you can re-use test code. This way, you don't have to copy/paste stuff around (copy/paste, even when it's for tests, is usually not something you want to do). Or (what I do), you could just test one of your subclasses. I know, I know, it means that if you decide that one of your "partially covered" subclasses has to use another base class, or if that behavior you tested end up "bubbling up" to subclasses, you will have uncovered code. However, this is the kind of things that seldom happen. Usually, when you refactor, you push down code to superclasses (to eliminate code duplication). When you do that kind of refactoring, you don't lose any coverage on the account of having only one of your subclasses tested for its superclass' behavior. Therefore, I'm of the opinion that it's generally OK to test just one of your subclass in order to test a superclass' behavior.
