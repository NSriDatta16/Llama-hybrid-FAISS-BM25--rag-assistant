[site]: stackoverflow
[post_id]: 5069756
[parent_id]: 
[tags]: 
How to parse Inner-XML return from SharePoint Web Services

I have a program as such // establish proxy obj SPLists.Lists listservice = new SPLists.Lists(); // credentials listservice.PreAuthenticate = true; // user name Console.Write("Username (e.g. bobdole@xyz.com): "); string usrname = Console.ReadLine().Trim(); Console.Write("\n"); // pw Console.Write("Password: "); string password = MaskedConsoleReader.ReadLine(); // auth listservice.Credentials = new NetworkCredential(usrname, password); // List Service URL listservice.Url = "https://wss.xyz.com/_vti_bin/Lists.asmx"; // Instantiate an XmlDocument object System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument(); /* Assign values to the string parameters of the GetListItems method, using GUIDs for the listName and viewName variables. For listName, using the list display name will also work, but using the list GUID is recommended. For viewName, only the view GUID can be used. Using an empty string for viewName causes the default view to be used.*/ // Work ticket list // {5B79ED7D-ECB7-447A-9331-22984E52EB7D} // All tickets view // {00F95DDD-C383-4E4A-94F2-977FDA7A7F74} string listName = "{5B79ED7D-ECB7-447A-9331-22984E52EB7D}"; string viewName = "{00F95DDD-C383-4E4A-94F2-977FDA7A7F74}"; string rowLimit = "4000"; /*Use the CreateElement method of the document object to create elements for the parameters that use XML.*/ System.Xml.XmlElement query = xmlDoc.CreateElement("Query"); System.Xml.XmlElement viewFields = xmlDoc.CreateElement("ViewFields"); System.Xml.XmlElement queryOptions = xmlDoc.CreateElement("QueryOptions"); /*To specify values for the parameter elements (optional), assign CAML fragments to the InnerXml property of each element.*/ query.InnerXml = " " + " 3 "; viewFields.InnerXml = " "; queryOptions.InnerXml = ""; /* Declare an XmlNode object and initialize it with the XML response from the GetListItems method. The last parameter specifies the GUID of the Web site containing the list. Setting it to null causes the Web site specified by the Url property to be used.*/ DateTime abc = DateTime.Now; string format = "yyyy-M-dd_HH-MM-ss"; string xyz = abc.ToString(format); string fName = "dump-" + xyz + ".txt"; try { System.Xml.XmlNode nodeListItems = listservice.GetListItems (listName, viewName, query, viewFields, rowLimit, queryOptions, null); StreamWriter outfile = new StreamWriter(fName); /*Loop through each node in the XML response and display each item.*/ foreach (System.Xml.XmlNode listItem in nodeListItems) { Console.WriteLine(listItem.OuterXml + "\n"); outfile.WriteLine(listItem.OuterXml); } outfile.Close(); } catch (Exception ex) { Console.WriteLine("ERROR!: " + ex.ToString()); } Console.WriteLine("\n"); Console.WriteLine("Contents dumped to: " + fName); // hold program Console.ReadLine(); } Which yields a string (from listItem.OuterXML): [...] [...] There are roughly 800 lines like this in the returned string. What's the easiest way to parse the data from each line? I'd also like to strip out the HTML if possible since I want to eventually dump this into SQL server using the SQLClient namespace.
