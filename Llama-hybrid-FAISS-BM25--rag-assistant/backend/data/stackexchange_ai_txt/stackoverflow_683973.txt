[site]: stackoverflow
[post_id]: 683973
[parent_id]: 683959
[tags]: 
If you look at your code, those two blocks are very similar. I bet they can be refactored into a single block. Although that doesn't sound like an answer, it is. I think in general if you feel the desire to use braces like that, you are dealing with a situation that would be better handled by factoring out another method or refactoring pieces together. In general anyway. Specific answer--no, once I got good at OO and limiting how much work I do in a single unit, I've never thought they might be a good idea. Edit: With code that similar, it MUST be fairly easily refactorable. I'll try a refactor. Sorry if I get the syntax wrong, I really don't do c# and Java doesn't have closures. output = transform(FooSource, TransformA); output = transform(BarSource, TransformB); // I know output is overwritten, but // it is in the askers' example as well transform(var itmSource, var transform) { var output=source.GetRawOutput(); // Sorry, you never said where source came from. var items = itmSource.GetItems(); output=transform.TransformOutput(output, p => { GetContent(p, items.GetNext()); // GetContent may need to be passed in // you didn't say where those calls came from. // See comments below }); } return output; } Refactors like this don't save much typing, but they show up some great patterns--such as the relationship between FooSource and TransformA (and possibly the getContent call)--there is a decent chance that they should be stored in a single object and that object should be passed in, or something similar. (It's hard to tell from this fragment, often refactoring requires a much wider view of the code than you gave) Note that they also force you to think about GetFooContent and GetBarContent. I'd bet you a pint of beer that these are so similar that they could either be factored into a single method call with a variable or two passed in or into a method in two sibling classes. Because of the way this kind of relationship always shows up and ALWAYS improves other code in your classes, I believe these kind of refactors are absolutely mandatory, doing this kind of refactoring more than anything taught me real OO.
