[site]: crossvalidated
[post_id]: 160592
[parent_id]: 160174
[tags]: 
I did a simulation of this, assuming that the two players move randomly within the area. ## given a single coordinate of a single player, return a new position by a valid move moveCoord = function( playerCoord, boardSizeCoord){ move = sample(c(-1,0,1), 1) newCoord = playerCoord + move if (newCoord boardSizeCoord) newCoord = moveCoord(playerCoord, boardSizeCoord) return(newCoord) } ## given a player's location, return a new location by a valid move movePlayer = function(playerCoord, boardSize){ newX = moveCoord(playerCoord[1], boardSize[1]) newY = moveCoord(playerCoord[2], boardSize[2]) newCoord = c(newX, newY) } n = 10 ## board is nxn boardSize = c(n,n) ## board size steps = 1000000 ## how many moves to try in each run of simulation, before they fail copCoord Here are the results. In noMoveVec, only the cop moves; in yesMoveVec, both players move: > summary(noMoveVec) Min. 1st Qu. Median Mean 3rd Qu. Max. 7.0 71.0 131.0 176.6 231.0 1056.0 > summary(yesMoveVec) Min. 1st Qu. Median Mean 3rd Qu. Max. 5.0 56.0 115.0 160.0 216.2 1123.0 In 1000 runs of the simulations on a 10x10 grid, the moving prisoner got caught a little faster on average. I wasn't sure how much of the effect was due to the initial positions. So I tried it again having the cop in the bottom left corner and the prisoner in the top right corner. There's a way bigger effect in this case. summary(noMoveVec) Min. 1st Qu. Median Mean 3rd Qu. Max. 25.0 195.8 410.5 561.2 758.2 3150.0 > summary(yesMoveVec) Min. 1st Qu. Median Mean 3rd Qu. Max. 15.0 70.0 126.5 173.2 233.2 1057.0
