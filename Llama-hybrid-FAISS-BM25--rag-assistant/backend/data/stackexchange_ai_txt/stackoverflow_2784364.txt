[site]: stackoverflow
[post_id]: 2784364
[parent_id]: 2784344
[tags]: 
Here's an off-the-wall idea: Is Accounts declared as List ? I'm wondering if Accounts is a property declared as something other than List -- for instance, as IList -- and you have a static helper class somewhere with a Sort extension method that isn't implemented properly. This could attempt to leverage the List .Sort method when the parameter passed in is a List , but do so without performing the necessary cast to List , resulting in a guaranteed StackOverflowException . What I mean is this. Suppose Account is a property of some class that looks something like this: public class AccountManager { public IList Accounts { get; private set; } public AccountManager() { // here in the constructor, Accounts is SET to a List ; // however, code that interacts with the Accounts property will // only know that it's interacting with something that implements // IList Accounts = new List (); } } And then suppose elsewhere you have this static class with a Sort extension method: public static class ListHelper { public static void Sort (this IList list, Comparison comparison) { // programmer tries to use the built-in sort, if possible if (list is List ) { // only problem is, list is here still typed as IList , // so this line will result in infinite recursion list.Sort(comparison); // the CORRECT way to have done this would've been: // ((List )list).Sort(comparison); return; } else { list.CustomSort(comparison); return; } } private static void CustomSort (this IList list, Comparison comparison) { // some custom implementation } } In this case, the code you posted would throw a StackOverflowException . Original answer: Perhaps Accounts is an object of a custom collection class whose Sort method calls itself? public class AccountCollection : IEnumerable { // ... public void Sort(Comparison comparison) { Sort(comparison); // infinite recursion } // ... } Perhaps the AccountId property calls itself? public class Account { // ... public string AccountId { get { return AccountId; } // infinite recursion } // ... }
