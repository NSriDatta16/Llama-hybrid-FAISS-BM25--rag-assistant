[site]: stackoverflow
[post_id]: 4051880
[parent_id]: 2844824
[tags]: 
Karplus Strong Algorithm gives a very good synthesis of a plucked string. It can also be coded in a few lines of C. You create a circular buffer of floats (length proportional to the wavelength ie 1/f), and fill it full of random noise between -1 and 1. Then you cycle through: each cycle, you replace the value at your current index with the average of the previous two values, and emit this new value. index = (index+1) % bufSize; outVal = buf[index] = decay * 0.5 * ( buf[index-1] + buf[index-2] ); The resultant byte stream gives you your sound. Of course, this can be heavily optimised. To make your soundwave damp to 0.15 of its original strength after one second, you could set decay thus: #define DECAY_1S =.15 Float32 decay = pow(DECAY_1S, 1.0f / freq); Note: you need to size the original buffer so that it contains one complete waveform. so if you wish to generate a 441Hz sound, and your sampling rate is 44.1KHz, then you will need to allocate 100 elements in your buffer. You can think of this as a resonance chamber, whose fundamental frequency is 441Hz, initially energised, with energy dissipating outwards from every point in the ring simultaneously. Magically it seems to organise itself into overtones of a fundamental frequency. Could anyone post more algorithms? How about an algorithm for a continuous tone?
