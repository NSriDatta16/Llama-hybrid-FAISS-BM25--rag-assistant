[site]: stackoverflow
[post_id]: 2251723
[parent_id]: 2251608
[tags]: 
This is by design to handle what is called the "fragile base class" problem. Let's assume you have classes like this: struct A { void MyFunc(long) {...} } struct B : A { void MyFunc(long) { ... } } .... B b; b.MyFunc(5); Here's we would call B:MyFunc(long) because ints silently convert to longs. But say someone later changed struct A to: struct A { void MyFunc(long) {...} void MyFunc(int) {...} } Now, if override worked like you assumed, that the call to b.MyFunc(5) would change to call to A::MyFunc(int) --- even though neither your calling code nor struct B, the class you are actual using, changed. This was deemed worse a little confusion.
