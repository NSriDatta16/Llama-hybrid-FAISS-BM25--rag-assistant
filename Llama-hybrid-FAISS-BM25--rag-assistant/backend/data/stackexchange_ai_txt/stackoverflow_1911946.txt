[site]: stackoverflow
[post_id]: 1911946
[parent_id]: 1911654
[tags]: 
One problem with your union approach is that the whole idea of using an union is rather forced and completely unnecessary. All you seem to want to do is the replace dynamic memory allocation with a local static buffer of some "large" size. Then just do it explicitly unsigned char buffer[8000]; QUERY_SERVICE_CONFIG *svcConfig = (QUERY_SERVICE_CONFIG *) buffer; ... QueryServiceConfig(reinterpret_cast (currentServiceHandle.get()), svcConfig, sizeof buffer, &garbage); // Use `svcConfig` here, keeping in mind it is a pointer now What you were trying to achive by using union specifically is not clear to me. Do you think that the approach with the union is somehow more elegant? I don't think so. Update: It has been noted in one of the comments that this approach allegedly might not work with a compiler performing strict aliasing optimizations. The comment is absolutely incorrect for more than one reason. Firstly, the above approach does not rely on any aliasing-dependent behavior at all, since all access is supposed to be performed through svcConfig pointer and svcConfig pointer only. Secondly, strict aliasing optimizations are never performed if the aliased data is a character array . The language specification explicitly permits aliased access through character arrays, which is why all optimizing compilers disable their strict aliasing optimizations when a character array is involved. Any compiler that fails to do so is broken and thus not worth consideration.
