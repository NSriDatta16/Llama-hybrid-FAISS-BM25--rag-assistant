[site]: stackoverflow
[post_id]: 1336569
[parent_id]: 1336476
[tags]: 
Q1. In Java, all objects, arrays and class variables are stored on the heap? Is the same true for C++? Is data segment a part of Heap? No, the data section is separate from the heap. Basically, the data section is allocated at load time, everything there has a fixed location after that. In addition, objects can be allocated on the stack. The only time objects are on the heap is if you use the new keyword, or if you use something from the malloc family of functions. Q2. As far as my understanding goes, variables which are given a specific value by compiler are stored in data segment, and unintialized global and static variables are stored in BSS (Block started by symbol). In this case, MyInstance::counter being static is initialized to zero by the compiler and so it is stored at BSS and MyInstance::number which is initialized to 100 is stored in the data segment. Am I correct in making the conclusion? Yes, your understanding of the BSS section is correct. However, since number isn't static the code: MyInstance::number = 100; isn't legal, it needs to be either made static or initialized in the constructor properly. If you initialize it in the constructor, it will exist wherever the owning object is allocated. If you make it static, it will end up in the data section... if anywhere. Often static const int variables can be inlined directly into the code used such that a global variable isn't needed at all. Q3. Consider following piece of codes: ... void doHello(MyInstance &localObj){ localObj is a reference to the passed object. As far as you know, there is no storage, it refers to wherever the variable being passed is. In reality, under the hood, a pointer may be passed on the stack to facilitate this. But The compiler may just as easily optimize that out if it can. void doHelloAgain(MyInstance localObj){ a copy of the passed parameter is placed on the stack. MyInstance localObj; // 3.3 Where is this stored in heap or stack? localObj is on the stack.
