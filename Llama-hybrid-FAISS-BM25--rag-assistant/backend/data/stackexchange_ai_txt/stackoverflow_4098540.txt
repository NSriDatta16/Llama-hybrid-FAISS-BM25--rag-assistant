[site]: stackoverflow
[post_id]: 4098540
[parent_id]: 
[tags]: 
C++: Dynamic virtual function call

I'm searching for a solution to call virtual function dynamicly. This means to support function calls with offsets and dynamic types at runtime. I'm working on a plugin for a game (Counter-Strike: Source, if you know it). The plugin interface isn't likely and so you cannot extend as much as most people want. To realize a better way to communicate and manipulate the game, I support calling virtual functions. For example, the CCSPlayer class has those methods: Offset Name ... 201 CCSPlayer::Ignite() ... 205 CCSPlayer::CommitSuicide(bool Blah) ... 250 CCSPlayer::SomeFunctionWith2Params(int A1, float A2) Passing these offsets and the pointer to the instance of this class to my current function (see below), I can call this functions: CBasePlayer *pPlayer = Players.Find("mike"); bool bResult = Call2 (210 /* offset */, pPlayer, 20, 50.0f); I do this to call virtual functions I cannot call through the normal routine because the compiler doesn't knows the structure of the derived CCSPlayer class. And now I want to add a scripting language with dynamic virtual function calls. That means, the scripters can set the amount of params, and of what type they are. Then passing the this-pointer and the offset to the function, to finally execute it. This is my real questions. Currently I can only hardcode those by using templates and creating a function for every amount of params. Example: template T Call2(int iOffset, void *pThis, A arg1, B arg2) { void **pVTable = *(void***)pThis; void *pPointer = pVTable[_iOffset]; union { T (CVCallEmpty::*pCall)(A, B); void *pAddress; } Data; Data.pAddress = pPointer; return (reinterpret_cast (*(void***)&pThis)->*Data.pCall)(arg1, arg2); } Now, is there any possibility to support dynamic calls?
