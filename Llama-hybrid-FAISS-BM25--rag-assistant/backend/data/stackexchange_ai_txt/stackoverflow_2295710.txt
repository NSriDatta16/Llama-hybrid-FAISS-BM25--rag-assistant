[site]: stackoverflow
[post_id]: 2295710
[parent_id]: 2295636
[tags]: 
I would recommend first to write tests to check your code of your previous persistent mechanism. This code could be used to check the correct behavior of our ORM integration. As mentioned by other answers, having a clear DAO defined by interface helps to bound the DAO code. Map the domain objects first, then write your DAO, then your service objects (which take care of large atomic suite of operations by enclosing its in a transaction). Use persistence mechanism which is vendor-agnostic (JPA is the good and only choice). Start with one kind of database and stick with it during all the migration. In very uncommon cases, you can meet subtle differences between databases which could be very hard to solve, especially if you're a beginner. When starting, use automatic generation of database ( generateDdl for hibernate subsystem) and then, when things starts to be stabilized, force @Table and @Column annotations to fix name of each column. At this point, write a SQL script which generate the database with empty tables. The reason if to fix your architecture and be sure you're controlling the database organization. If you're serious about ORM, please look at Java Persistence With Hibernate of Christian Bauer (Manning publications), this is "the bible" about hibernate and JPA on Java.
