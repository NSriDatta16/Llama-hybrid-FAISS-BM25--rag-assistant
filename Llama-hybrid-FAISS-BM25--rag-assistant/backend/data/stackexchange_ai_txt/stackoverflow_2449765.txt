[site]: stackoverflow
[post_id]: 2449765
[parent_id]: 2449417
[tags]: 
I used to use these conventions in my code: Non-final, static fields begin with an underscore. private static SomethingOrOther _goodName; Parameters end with an underscore. public void doSomething(Object goodParam_, String stringToo_) { } And while you may consider it hard to read in the declaration of the variable, the point is to make sure they pop when reading the code in which they're used and to ensure that they are always different than any non-static fields, parameters and locally defined variables. Another benefit of standards like this, i think, is when others come along to modify the code, they can quickly identify static fields and parameters which makes comprehension of the code happen more readily rather than having to always refer back to definitions. I don't generally consider a convention for instance fields because access to them is almost exclusively through s/getters. I've moved away from this with Java code, preferring instead to have my IDE always fully qualify with this for instance fields and with the class name for static fields and always using final on every variable that doesn't change, even method parameters. The interesting thing about going this route is that it encourages good naming practice, at least for me, because i like my variables to read nicely when prefixed with this or the class name.
