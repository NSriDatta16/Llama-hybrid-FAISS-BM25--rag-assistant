[site]: stackoverflow
[post_id]: 4604230
[parent_id]: 4599420
[tags]: 
This could just be a case of optimizing too early. The query does what you need and only really looks complicated because it is. I'm not sure that there are necessarily any tricks that would help. It probably depends on the characteristics of your data. Is the query slow? Do you think it could be quicker? It might be worth rearranging it in the following way. Since all the conditions rely on the ACCOUNTS table which I assume is going to be significantly smaller than the MOVIE_RATINGS table you might be able to do all the calculations on a smaller data set, which might be quicker. Although if you are only selecting on one movie at a time ( mid = 5 ) then that probably won't be the case. I'm not entirely sure that this will work but think it should. SELECT ROUND(AVG(rating * AllM), 1) avgAllM, COUNT(rating * AllM) countAllM, ROUND(AVG(rating * AllF), 1) avgAllF, COUNT(rating * AllF) countAllF, ROUND(AVG(rating * AllM * U18), 1) avgU18M, COUNT(rating * AllM * U18) countU18M, ROUND(AVG(rating * AllM * U18), 1) avgU18F, COUNT(rating * AllM * U18) countU18F FROM movie_ratings mr INNER JOIN ( select aid, case when gender = 'M' then 1 end as AllM, case when gender = 'F' then 1 end as AllF, case when UserAge(birth_date) On balance though, I would probably just leave the query you have as it is. The query that you have is easy to understand and probably performs fairly well.
