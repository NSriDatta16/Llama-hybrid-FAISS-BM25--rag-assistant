[site]: stackoverflow
[post_id]: 2541450
[parent_id]: 2540843
[tags]: 
You're interpreting the 'group by' wrong. You don't "group" multiple records so you can get them all with a single fetchrow() call. What happens is the database will collapse all records matching the group-by clauses into a single record. Take a simple game score table: id playername score ---------------------- 1 John 23 2 Fred 12 3 Jack 9 4 John 18 If you did the following query: SELECT id, playername, score FROM table GROUP BY playername , you'd get the following result set: id playername score ---------------------- 1 John 23 2 Fred 12 3 Jack 9 Hey! Where did John #4 go? He's vanished, because the row with id#4 matched the GROUP BY clause and has been collapsed into the first row that was found to match (#1). Not very useful by itself, you've now lost all the data associated with id #4. But this is where the aggregate functions (sum, count, average, etc...) come into play: SELECT id, playername, SUM(score) FROM table GROUP BY playername : id playername score ---------------------- 1 John 41 With your queries, you've got two choices: Leave the GROUP BY as-is, and do whatever calculations you want on the grouped data within the query (summing, counting, averaging, etc...) so that you get aggregate results for each of the matching time periods Remove the GROUP BY clauses, perform whatever calculations you want in your application Convert the GROUP BY clauses into result fields in the query, so you can process per-period in your code based on these new columns: SELECT *, HOUR(start), FLOOR(MINUTE(start)/30) FROM data
