[site]: stackoverflow
[post_id]: 783839
[parent_id]: 783781
[tags]: 
I'm afraid there are no equivalents in Python. To some extent, you can simulate their effect using (and passing) locals : >>> def compact(locals, *keys): ... return dict((k, locals[k]) for k in keys) ... >>> a = 10 >>> b = 2 >>> compact(locals(), 'a', 'b') {'a': 10, 'b': 2} >>> def extract(locals, d): ... for k, v in d.items(): ... locals[k] = v ... >>> extract(locals(), {'a': 'foo', 'b': 'bar'} >>> a 'foo' >>> b 'bar' Nevertheless, I don't think these functions are "tremendously handy". Dynamic global/local variables are evil and error-prone -- PHP guys learned that when they discouraged register_globals. From my experience, few experienced PHP programmers or major frameworks use compact() or extract() . In Python, explicit is better than implicit : a = 1 b = 2 # compact c = dict(a=a, b=b) # extract a, b = d['a'], d['b']
