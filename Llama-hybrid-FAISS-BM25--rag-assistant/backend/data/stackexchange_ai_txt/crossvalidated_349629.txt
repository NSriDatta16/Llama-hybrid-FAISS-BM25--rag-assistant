[site]: crossvalidated
[post_id]: 349629
[parent_id]: 
[tags]: 
How to represent a graph in a vectorized format suitable for ML?

Suppose we want to represent graphs (knowledge graphs, or other types of graphs/networks) in a vectorized format, such that it is suitable for a neural network or other machine learning technique. How to do it? We can think of using an adjacency matrix for storing the presence or absence of an edge. Suppose one input should be able to represent graphs with at most N vertices, the input should be like this: X = V1 ++ V2 ++ ... ++ VN ++ E where ++ denotes concatenating two vectors, Vi (i=1,...,N) is a vector of input units representing a vertex of the graph in a vectorized way (e.g. could be a 1-hot encoding of a categorical variable), and E is an adjacency matrix of N^2 units. (overall input size would would be 2*N^2). However this method is not invariant to the vertex order, because e.g. for saying "edge(a,b)" we can put "a" in V1, "b" in V2, and turn on the element in R representing the a-->b edge, or equivalently put "b" in V1, "a" in V2, and turn the inverse element in R. Why this representation is flawed (well, I guess I have said it) and how it can be improved?
