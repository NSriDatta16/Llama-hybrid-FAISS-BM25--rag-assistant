[site]: stackoverflow
[post_id]: 5441810
[parent_id]: 
[tags]: 
ANTLR3 C Target - parser return 'misses' out root element

I'm trying to use the ANTLR3 C Target to make sense of an AST, but am running into some difficulties. I have a simple SQL-like grammar file: grammar sql; options { language = C; output=AST; ASTLabelType=pANTLR3_BASE_TREE; } sql : VERB fields; fields : FIELD (',' FIELD)*; VERB : 'SELECT' | 'UPDATE' | 'INSERT'; FIELD : CHAR+; fragment CHAR : 'a'..'z'; and this works as expected within ANTLRWorks. In my C code I have: const char pInput[] = "SELECT one,two,three"; pANTLR3_INPUT_STREAM pNewStrm = antlr3NewAsciiStringInPlaceStream((pANTLR3_UINT8) pInput,sizeof(pInput),NULL); psqlLexer lex = sqlLexerNew (pNewStrm); pANTLR3_COMMON_TOKEN_STREAM tstream = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT, TOKENSOURCE(lex)); psqlParser ps = sqlParserNew( tstream ); sqlParser_sql_return ret = ps->sql(ps); pANTLR3_BASE_TREE pTree = ret.tree; cout toStringTree(pTree)->chars This outputs a flat tree structure when you use ->getChildCount and ->children->get to recurse through the tree. void ParseSubTree(int level,pANTLR3_BASE_TREE pTree) { ANTLR3_UINT32 childcount = pTree->getChildCount(pTree); for (int i=0;i children->get(pTree->children,i); for (int j=0;j getText(pChild)->chars getChildCount(pChild); if (f>0) { ParseSubTree(level+1,pChild); } } } Program output: Tree: SELECT one , two , three SELECT one , two , three Now, if I alter the grammar file: sql : VERB ^fields; .. the call to ParseSubTree only displays the child nodes of fields. Program output: Tree: (SELECT one , two , three) one , two , three My question is: why, in the second case, is Antlr just give the child nodes? (in effect missing out the SELECT token) I'd be very grateful if anybody can give me any pointers for making sense of the tree returned by Antlr. Useful Information: AntlrWorks 1.4.2, Antlr C Target 3.3, MSVC 10
