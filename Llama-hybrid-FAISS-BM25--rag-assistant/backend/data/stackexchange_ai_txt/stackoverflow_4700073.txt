[site]: stackoverflow
[post_id]: 4700073
[parent_id]: 4700052
[tags]: 
I'm sorry to say that your schoolmates are completely wrong. If your schoolmates can honestly say that "vectors are linked lists" then you need to respectfully tell them that they need to pick up a good C++ book (or any decent computer science book) and read it. Or perhaps even the Wikipedia articles for vectors and lists . (Also see the articles for dynamic arrays and linked lists .) Vectors (as in std::vector ) are not linked lists. (Note that std::vector do not derive from std::list ). While they both can store a collection of data, how a vector does it is completely different from how a linked list does it. Therefore, they have different performance characteristics in different situations. For example, insertions are a constant-time operation on linked lists, while it is a linear-time operation on vectors if it is inserted in somewhere other than the end. (However, it is amortized constant-time if you insert at the end of a vector.) The std::vector class in C++ are required to be contiguous by the C++ standard: 23.2.4/1 Class template vector A vector is a kind of sequence that supports random access iterators. In addition, it supports (amortized) constant time insert and erase operations at the end; insert and erase in the middle take linear time. Storage management is handled automatically, though hints can be given to improve efficienty. The elements of a vector are stored contiguously , meaning that if v is a vector where T is some type other than bool , then it obeys the identity &v[n] == &v[0] + n for all 0 . Compare that to std::list : 23.2.2/1 Class template list A list is a kind of sequence that supports bidirectional iterators and allows constant time insert and erase operations anywhere within the sequence, with storage management handled automatically. Unlike vectors (23.2.4) and deques (23.2.1), fast random access to list elements is not supported, but many algorithms only need sequential access anyway. Clearly, the C++ standard stipulates that a vector and a list are two different containers that do things differently. You can't "break" a vector (at least not intentionally) by simply calling erase() with a valid iterator. That would make std::vector s rather useless since the point of its existence is to manage memory for you!
