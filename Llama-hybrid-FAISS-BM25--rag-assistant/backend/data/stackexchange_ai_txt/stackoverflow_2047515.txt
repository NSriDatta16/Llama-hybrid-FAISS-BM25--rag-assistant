[site]: stackoverflow
[post_id]: 2047515
[parent_id]: 2047327
[tags]: 
I am not sure what exactly you are trying to achieve, but here are some options: If DataModelObject class contains the AgentVersion property, you can simply do it like this (although this is most likely not the case): foreach (DataModelObject dmo in allObjects) { dmo.AgentVersion = agentVersion; } If AgentVersion is implemented only in some derived classes (not all), then you need to check explicitly it the derived class implements that interface, like you are doing right now: foreach (DataModelObject dmo in allObjects) { if (dmo is IResourcePolicy) { IResourcePolicy policy = (IResourcePolicy)dmo; policy.AgentVersion = agentVersion; } } Third case would be that you have several derived classes which don't implement the same interface, but still have the AgentVersion property. The cleanest way to fix that (if you can change the source code) would be to have all these objects implement the same interface, containing properties which are common to them all: interface IAgentVersion { string AgentVersion { get; } // omit other properties which are not common to all objects } interface IResourcePolicy : IAgentVersion { string ResourcePolicy { get; } // ... // add all policy-specific properties } Now you are sure that all IAgentVersion and IResourcePolicy objects implement that common property ( AgentVersion ), and you only need to check for the base interface: foreach (DataModelObject dmo in allObjects) { if (dmo is IAgentVersion) { IAgentVersion = (IAgentVersion)dmo; policy.AgentVersion = agentVersion; } }
