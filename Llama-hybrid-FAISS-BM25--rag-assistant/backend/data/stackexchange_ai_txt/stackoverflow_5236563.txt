[site]: stackoverflow
[post_id]: 5236563
[parent_id]: 3251193
[tags]: 
I wrote these 2 extension methods to accomplish this exact problem, they may give you a good starting point to solve your issue! public static Y To (this X source) where X : IActiveRecord where Y: class { try { Y target = Activator.CreateInstance(typeof(Y)) as Y; BindingFlags memberAccess = BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly | BindingFlags.SetProperty; PropertyInfo[] targetProperties = target.GetType().GetProperties(memberAccess); foreach (MemberInfo Field in targetProperties) { string name = Field.Name; if (Field.MemberType == MemberTypes.Property) { PropertyInfo targetProperty = Field as PropertyInfo; PropertyInfo sourceProperty = source.GetType().GetProperty(name, memberAccess); if (sourceProperty == null) { continue; } if (targetProperty.CanWrite && sourceProperty.CanRead) { object targetValue = targetProperty.GetValue(target, null); object sourceValue = sourceProperty.GetValue(source, null); if (sourceValue == null) { continue; } if (targetProperty.PropertyType.FullName == sourceProperty.PropertyType.FullName) { object tempSourceValue = sourceProperty.GetValue(source, null); targetProperty.SetValue(target, tempSourceValue, null); } } } } return target; } // it's important to return null if there are any errors. catch { return null; } } public static IList To (this BindingListEx collection) where X : IActiveRecord where Y : class { IList returnList = new List (); foreach (X item in collection) returnList.Add(item.To ()); return returnList; } I use this to convert subsonic 2 entities (hence the IActiveRecord constraint) to my own POCO's
