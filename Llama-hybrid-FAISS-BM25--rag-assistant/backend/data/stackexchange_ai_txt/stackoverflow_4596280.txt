[site]: stackoverflow
[post_id]: 4596280
[parent_id]: 
[tags]: 
After authentication through a webview, how do I redirect my application to show app view

I have made an application that logs onto a simple UIWebview login page and then authenticates on the website that loads. The thing is, I want my app to autheticate on the website and as soon as it is authenticated I want it to redirect my app to the view I have made in Xcode. I am fairly new to iphone programming. Any help would be appreciated. The code I made so far also consists of cookies, and it looks as follows: FOR MY APP DELEGATE: - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { [self initPreferences]; // Override point for customization after application launch. NSArray *siteArray = [[NSArray alloc] initWithObjects:@"http://...com", @"http://....com", @"http://...com", @"http://...com", @"http://.com", nil]; SignonWebView *webView = [[SignonWebView alloc] initWithURL:[siteArray objectAtIndex:2]]; NSNotificationCenter *nc = [NSNotificationCenter defaultCenter]; [nc addObserver:self selector:@selector(cookieChange:) name:@"NSHTTPCookieManagerCookiesChangedNotification" object:nil]; if ([Constants useAuthenticator]) { [[self window] addSubview:[webView view]]; } else { [self.window addSubview:navigationController.view]; } // [self.window makeKeyAndVisible]; // Check for device if (![self deviceConnected]) { [Constants setConnectedToDevice:NO]; UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"ALERT!" message:@"Device Not Detected" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil]; [alert show]; [alert autorelease]; } else { if ([Constants isLineaPro]) { NSLog(@"Init LineaPro device"); } else if ([Constants isVerifone]) { NSLog(@"Init Verifone device"); DeviceControl *dc = [DeviceControl sharedInstance]; // Singleton initializes device [[dc payControl] hostPowerEnabled:YES]; NSLog(@"---------------------- Sending message to MSR"); [[dc pinPad] sendStringCommand:@"Q40" calcLRC:YES]; } } //AdminViewController = [[AdminViewController alloc] init]; [self.window makeKeyAndVisible]; //[self.navigationController.navigationBar setTintColor:[UIColor colorWithRed:0.933 green:0.114 blue:0.149 alpha:1]]; //[[UIApplication sharedApplication] setupScreenMirroringOfMainWindow:navigationController framesPerSecond:20]; //[[UIApplication sharedApplication] setupScreenMirroringWithFramesPerSecond:20]; return YES; //[self.parentViewController.view setHidden:YES]; } -(void)cookieChange:(NSHTTPCookieStorage *)somethin { NSLog(@"----------- Cookies have changed sucessfully ---------------"); } FOR MY LOGIN VIEW WHICH HAS COOKIES: -(BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType { NSLog(@"shouldStartLoadWithRequest"); return YES; } - (void)webViewDidStartLoad:(UIWebView *)webView { NSLog(@"webViewDidStartLoad"); } - (void)webViewDidFinishLoad:(UIWebView *)webView { NSLog(@"***************** webViewDidFinishLoad --- getting all cookies"); NSMutableArray *cookieList = [[NSMutableArray alloc] init]; NSHTTPCookie *cookie; for (cookie in [[NSHTTPCookieStorage sharedHTTPCookieStorage] cookies]) { [cookieList addObject:cookie]; // NSLog(@"%@ expire: %@\n%@", [cookie name],[cookie expiresDate],cookie); } NSLog(@"Number of cookies is %d",[cookieList count]); if (initialLoad) { NSLog(@"---- removing existing cookies -----"); for (NSHTTPCookie *currentCookie in cookieList) { NSLog(@"Removing cookie : %@",[currentCookie name]); //[[NSHTTPCookieStorage sharedHTTPCookieStorage] deleteCookie:currentCookie]; } initialLoad = NO; } else { for (NSHTTPCookie *currentCookie in cookieList) { NSLog(@"='%@'",currentCookie); if ([[currentCookie name]isEqual:@"UserID"]) { // we have a user id returned from services, so save it [self setUserIDCookie:currentCookie]; NSLog(@" -- userIDCookie : %@",[[self userIDCookie] value]); [self setUserID:([[self userIDCookie] value])]; } if ([[currentCookie name]isEqual:@"UserName"]) { // we have a user id returned from services, so save it [self setUserNameCookie:currentCookie]; NSLog(@" -- userNameCookie : %@",[[self userNameCookie] value]); [self setUserName:([[self userNameCookie] value])]; } } } } - (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error { NSLog(@"didFailLoadWithError : %@",error); } #pragma mark - #pragma mark Actions -(void)loadUrl:(NSString*)URL { [myWebView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:URL]]]; } @end
