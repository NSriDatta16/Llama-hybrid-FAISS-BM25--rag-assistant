[site]: stackoverflow
[post_id]: 849542
[parent_id]: 849527
[tags]: 
Couple of comments about your approach Why have Store return T? I know what I just added, returning it back to me is un-necessary unless you explicitly want method chaining Refactor GetNext() into a new class. It represents a different set of functionality (storage vs. cursor traversal) and should be represented by a separate interface. It also has usability concerns as what happens when two different methods active on the same stack want to traverse the structure? GetList() should likely return IEnumerable . Returning List either forces an explicit copy up front or returns a pointer to an underlying implementation. Neither is a great choice. As for what is the best structure to back the interface. It seems like the best to implement is to have a data structure which is efficient at adding to one end, and removing from the other. A doubly linked list would suit this nicely.
