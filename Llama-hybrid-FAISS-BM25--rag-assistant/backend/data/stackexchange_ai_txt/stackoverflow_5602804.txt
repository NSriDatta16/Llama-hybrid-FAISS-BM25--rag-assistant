[site]: stackoverflow
[post_id]: 5602804
[parent_id]: 
[tags]: 
Design Patterns for Dynamic Inheritance

Here's what I'm trying to do, I'm not sure what to look for or what the proper way to design this is: I'm working on an exception hierarchy for an application. As part of this, there are some exceptions which will sometimes be fatal and other times be recoverable -- whether a particular instance is fatal or recoverable is determined at runtime in the exception itself. For the purposes of organization I want to be able to do something like (I'm working in python): try: mightThrowAnException() except RecoverableException: handleThisException() And then I'd have something like: class MyException(...): ... Where MyException could either take on FatalException or RecoverableException as a base class depending on what happens in the constructor. I know I could have two separate exceptions MyFatalException and MyRecoverableException and then raise either one or there other in code but there are going to be a lot of different exceptions for different types of errors, which could be raised from multiple places in the code, and the exception has to do a few things like examine error logs to determine whether this instance should be fatal or not, so I think it makes sense to put all of this code into the exception handler itself. So a couple of questions: Given what I want to do, is this a good way to go about it, or is there a better design for this sort of thing? I've read about class factories, but I don't see an easy way to dynamically change the base classes with such an approach, other things I've considered are metaclasses or overriding the excpetion's __new__() method and I'm not really sure what the pros and cons to each of these three approaches are. Are any of these the right approach or do I need something else?
