[site]: stackoverflow
[post_id]: 4764590
[parent_id]: 
[tags]: 
Can I use a lambda function or std::function object in place of a function pointer?

I've got a library that I need to use that defines the following: typedef void CallbackFunction(const int& i); and has a function to register your callback that looks like: void registerCallback(CallbackFunction* pCallback); Because I'd like to capture the state of several variables to be used in the callback, I can't simply use a plain function. What I'd prefer to use is a lambda function, but the following doesn't compile: auto fCallback = [](const int& i) { cout instead I get the error: error C2664: 'registerCallback' : cannot convert parameter 1 from '`anonymous-namespace':: ' to 'CallbackFunction (__cdecl *)' No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called I've been reading up on this topic a lot, and trying a few different (probably idiotic) approaches, but I can't seem to get this to work. Casting the function allows the code to compile, but (not surprisingly) it crashes. It may be that I've overlooked the solution either here on StackOverflow or elsewhere, so a link will suffice. (Though, since I'm a bit new to some of these techniques, please make sure that the correspondence is clear enough for a newbie. For instance, if this conversation contains my answer, I don't understand. Please simplify or explain the correspondence.) FYI, I'm using Visual C++ 2010. Please let me know if there is anything I can do to clarify my question. Thanks in advance for the help!
