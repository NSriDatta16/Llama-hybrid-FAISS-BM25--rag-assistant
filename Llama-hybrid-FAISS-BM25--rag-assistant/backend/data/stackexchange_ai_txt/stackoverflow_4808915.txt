[site]: stackoverflow
[post_id]: 4808915
[parent_id]: 1990797
[tags]: 
One alternate solution that works reasonably well is to use uppercase for all type names and macro names. Global variables may be CapCase (CamelBack) and all local variables lower case. This technique helps to improve readability and also takes advantage of language syntax which reduces the number of pollution characters in variable names; e.g. gvar, kvar, type_t, etc. For example, data types cannot be syntatically confused with any other type. Global variables are easily distinguished from locals by having at least one upper case letter. I agree that prefixed or postfixed underscores should be avoided in all token names. Lets look at the example below. Its readily clear that InvertedCount is a global due to its case. It's equally clear that INT32U and RET_ERR are types due to their sytax. Its also clear that INVERT_VAL() is a macro due to the fact thats its on the right hand side and there is no cast so it cant be a data type. One thing is for sure though. Whichever method you use, it should be inline with your organizations coding standard. For me, the least amount of clutter, the better. Of course, style is a different issue. #define INVERT_VAL(x) (~x) #define CALIBRATED_VAL 100u INT32U InvertedCount; typedef enum { ERR_NONE = 0, ... } RET_ERR; RET_ERR my_func (void) { INT32U val; INT32U check_sum; val = CALIBRATED_VAL; // --> Lower case local variable. check_sum = INVERT_VAL(val); // --> Clear use of macris. InvertedCount = checksum; // --> Upper case global variable. // Looks different no g prefix required. ... return (ERR_NONE); }
