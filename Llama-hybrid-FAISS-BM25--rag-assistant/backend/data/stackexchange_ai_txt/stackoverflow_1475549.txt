[site]: stackoverflow
[post_id]: 1475549
[parent_id]: 1475520
[tags]: 
No for several reasons : It is really expensive to reach the 100% coverage, compared to the 90% or 95% for a benefit that is not obvious. Even with 100% of coverage, your code is not perfect. Take a look at this method (in fact it depends on which type of coverage you are talking about - branch coverage , line coverage ...): public static String foo(boolean someCondition) { String bar = null; if (someCondition) { bar = "blabla"; } return bar.trim(); } and the unit test: assertEquals("blabla", foo(true)); The test will succeed, and your code coverage is 100%. However, if you add another test: assertEquals("blabla", foo(false)); then you will get a NullPointerException . And as you were at 100% with the first test, you would have not necessarily write the second one! Generally, I consider that the critical code must be covered at almost 100%, while the other code can be covered at 85-90%
