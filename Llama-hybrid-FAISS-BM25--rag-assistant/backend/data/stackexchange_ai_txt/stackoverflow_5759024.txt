[site]: stackoverflow
[post_id]: 5759024
[parent_id]: 5757213
[tags]: 
Aside from the fact that having the constructor return something would give constructors two things to do instead of just one (which is generally an undesirable thing), note that constructors can't be named so it is impossible to call them explicitly. As it's impossible to construct an expression that is an explicit call to a constructor, it would be impossible to assign or refer to a constructor's return value in any case. Attempting to return something from a constructor just doesn't fit with the language design at all. Constructors don't "return" objects, they initialize objects in the memory area in which they are invoked. If you declare an object of class type with static storage duration (and that type has a user-declared constructor), the memory is reserved for the lifetime of the program and the implementation ensures that the constructor is called to initialize the object at that location at the appropriate time in the program. Similarly, if you declare and object with automatic storage duration, the implementation reserves space (informally some stack space) and invokes the constructor each time the declaration statement is executed. In the case of a new expression, the memory is allocated dynamically and the implementation calls the appropriate constructor to initialize the object. Note that if X is a class type, the X in all of these statements always refers to the name of the type and never the constructor which doesn't actually have a name. The syntax for declaring or defining a constructor is special, it doesn't mean that the constructor has a name. Assume that X has a user-declared constructor. X x; // Initialize an object of type X using the default constructor X(); // Value initialize a temporary of type X. Not an explicit constructor call. new X(); // new expression: value-initialize a dynamically allocated X X(a); // A function style cast X(a, b); // Construct an X from the expression list. X must have a // suitable constructor but the X still refers to the type.
