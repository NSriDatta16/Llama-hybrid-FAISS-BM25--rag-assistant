[site]: stackoverflow
[post_id]: 3954197
[parent_id]: 3954188
[tags]: 
Standard malloc is defined in the C standard to allocate a contiguous block of memory (at least it appears so to you) - it will return a null pointer if the allocation fails. At a lower level, the OS will be doing something like what kotlinski or Blank Xavier have described in their respective answers. From ยง7.20.3 of the ISO/IEC 9899-1999 C Standard : The pointer returned if the allocation (by calloc , realloc , or malloc ) succeeds is suitably aligned so that it may be assigned to a pointer to any type of object and then used to access such an object or an array of such objects in the space allocated (until the space is explicitly deallocated). It is not that explicit, but the paragraph mentions 'accessing an array of such objects', and in the C standard, arrays are: An array type describes a contiguously allocated nonempty set of objects with a particular member object type, called the element type. (from ยง6.2.5 ) Also note that subsequent calls to calloc , realloc , and malloc do not guarantee contiguity or ordering of memory (with other memory blocks already allocated). This point is also specified in ยง7.20.3 . The order and contiguity of storage allocated by successive calls to the calloc , malloc , and realloc functions is unspecified.
