[site]: stackoverflow
[post_id]: 3171192
[parent_id]: 3171124
[tags]: 
To create your own on screen keyboard you basically need to do the following. 1- Create a windows keyboard application that you can interact with but does not steal the input focus from the current control in which every application you where currently working. 2- The keyboard application should send key presses to the currently active control in response to clicking of buttons in the keyboard application. The following answer I provided previously provides a simple demonstration of how to do this using WinForms. C# - Sending keyboard events to (last) selected window Basically the window is created with the WS_EX_NOACTIVATE style, which prevents the window from becomming active and steeling input focus. Then in response to button clicks it uses SendKeys to send the approriate key press message to the control that has input focus. The following answer shows how to apply the WS_EX_NOACTIVATE style to a WPF application. Trying to create a WPF Touch Screen Keyboard Appliaction, Can't get WPF App to Send Keys to another window? Any suggestions? There are other solutions other than WS_EX_NOACTIVATE, but this is simple and only suffers from a minor presentational glitch when dragging the window arround. Which with some clever message processing can be overcome.
