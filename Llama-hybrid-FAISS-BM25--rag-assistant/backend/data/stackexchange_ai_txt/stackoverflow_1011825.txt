[site]: stackoverflow
[post_id]: 1011825
[parent_id]: 1011648
[tags]: 
That form of a JavaScript object is called an object literal , just like there are array literals. For example, the following two array declarations are identical: var a = [1, 2, 3]; // array literal var b = new Array(1, 2, 3); // using the Array constructor Just as above, an object may be declared in multiple ways. One of them is object literal in which you declare the properties along with the object: var o = {property: "value"}; // object literal Is equivalent to: var o = new Object; // using the Object constructor o.property = "value"; Objects may also be created from constructor functions. Like so: var Foo = function() { this.property = "value"; }; var o = new Foo; Adding methods As I said in a comment a few moments ago, this form of declaring a JavaScript object is not a JSON format. JSON is a data format and does not allow functions as values. That means the following is a valid JavaScript object literal, but not a valid JSON format: var user = { age : 16, // this is a method isAdult : function() { // the object is referenced by the special variable: this return this.age >= 18; } }; Also, the name of the properties need not be enclosed inside quotes. This is however required in JSON. In JavaScript we enclose them in brackets where the property name is a reserved word, like class , while and others. So the following are also equivalent: var o = { property : "value", }; var o = { "property" : "value", }; Further more, the keys may also be numbers: var a = { 0 : "foo", 1 : "bar", 2 : "abz" }; alert(a[1]); // bar Array-like objects Now, if the above object would have also a length property, it will be an array like object: var arrayLike = { 0 : "foo", 1 : "bar", 2 : "baz", length : 3 }; Array-like means it can be easily iterated with normal iteration constructs (for, while). However, you cannot apply array methods on it. Like array.slice(). But this is another topic. Square Bracket Notation As Paolo Bergantino already said, you may access an object's properties using both the dot notation, as well as the square bracket notation. For example: var o = { property : "value" }; o.property; o["property"]; When would you want to use one over the other? People use square bracket notation when the property names is dynamically determined, like so: var getProperty = function(object, property) { return object[property]; }; Or when the property name is a JavaScript reserved word, for example while . object["while"]; object.while; // error
