[site]: stackoverflow
[post_id]: 3288937
[parent_id]: 3288839
[tags]: 
You can typically use a provider just after calling its default constructor and call Initialize on it. However, it is impossible to use the System.Web.Security.Membership abstraction, without the web.config, because the Membership class is hard-wired to the configuration file. When using the Membership class, it will instantiate types that you configured in the configuration file. As I said, when you don't want to configure it in the configuration file, you can create it in code. This would be a nice approach, especially when you have your own IoC framework (you could see the Membership facade as an IoC implementation just for types deriving from MembershipProvider ). Here is an example of how for create a SqlMembershipProvider : var configuration = new NameValueCollection(); configuration.Add("name", "SqlProvider"); configuration.Add("connectionStringName", "SqlServices"); configuration.Add("applicationName", "MyApplication"); configuration.Add("enablePasswordRetrieval", "false"); configuration.Add("enablePasswordReset", "true"); configuration.Add("requiresQuestionAndAnswer", "true"); configuration.Add("requiresUniqueEmail", "false"); configuration.Add("passwordFormat", "Hashed"); configuration.Add("maxInvalidPasswordAttempts", "5"); configuration.Add("passwordAttemptWindow", "10"); var provider = new SqlMembershipProvider(); provider.Initialize("SqlProvider", configuration); // And here store it in a static field or register it with your // favorite IoC container. container.RegisterSingle (provider); Good luck.
