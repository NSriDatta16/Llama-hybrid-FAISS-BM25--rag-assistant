[site]: stackoverflow
[post_id]: 2939204
[parent_id]: 2939189
[tags]: 
This is a problem I've had MANY times. There isn't an easy way to flatten arrays in PHP. You'll have to loop them adding them to another array. Failing that rethink how you're working with the data to use the original structure and not require the flatten. EDIT: I thought I'd add a bit of metric information, I created an array $data = array(array('key' => value, 'value' => other_value), ...); where there were 150,000 elements in my array. I than ran the 3 typical ways of flattening $start = microtime(); $values = array_map(function($ele){return $ele['key'];}, $data); $end = microtime(); Produced a run time of: Run Time: 0.304405 Running 5 times averaged the time to just below 0.30 $start = microtime(); $values = array(); foreach ($data as $value) { $values[] = $value['key']; } $end = microtime(); Produced a run time of Run Time: 0.167301 with an average of 0.165 $start = microtime(); $values = array(); for ($i = 0; $i Produced a run time of Run Time: 0.353524 with an average of 0.355 In every case using a foreach on the data array was significantly faster. This is likely related to the overhead of the execution of a function for each element in the array for hte array_map() implementation. Further Edit: I ran this testing with a predefined function. Below are the average numbers over 10 iterations for 'On the Fly' (defined inline) and 'Pre Defined' (string lookup). Averages: On the fly: 0.29714539051056 Pre Defined: 0.31916437149048
