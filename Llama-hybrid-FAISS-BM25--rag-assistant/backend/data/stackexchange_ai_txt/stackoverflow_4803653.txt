[site]: stackoverflow
[post_id]: 4803653
[parent_id]: 4802087
[tags]: 
I would approach this in a more structured manner. You want to parse an obj file into some sort of data structure: (defun parse-obj-file (filespec) ;; todo ) You need to think about how the data structure returned should look. For now, let us return a list of two lists, one of the vertices, one of the faces. The parser will go through each line, determine whether it is either a vertex or a face, and then collect it into the appropriate list: (defun parse-obj-file (filespec) (with-open-file (in-stream filespec :direction :input) (loop for line = (read-line in-stream nil) while line when (cl-ppcre:scan "^v " line) collect (parse-vertex line) into vertices when (cl-ppcre:scan "^f " line) collect (parse-face line) into faces finally (return (list vertices faces))))) I used the cl-ppcre library here, but you could also use mismatch or search . You will then need to define parse-vertex and parse-face , for which cl-ppcre:split should come in quite handy. It would perhaps also be useful to define classes for vertices and faces. Update: This is how I would approach vertices: (defclass vertex () ((x :accessor x :initarg :x) (y :accessor y :initarg :y) (z :accessor z :initarg :z) (w :accessor w :initarg :w))) (defun parse-vertex (line) (destructuring-bind (label x y z &optional w) (cl-ppcre:split "\\s+" (remove-comment line)) (declare (ignorable label)) (make-instance 'vertex :x (parse-number x) :y (parse-number y) :z (parse-number z) :w (parse-number w)))) Parse-number is from the parse-number library. It is better than using read . Update 2: (Sorry for making this a run-on story; I have to interlace some work.) A face consists of a list of face-points. (defclass face-point () ((vertex-index :accessor vertex-index :initarg :vertex-index) (texture-coordinate :accessor texture-coordinate :initarg :texture-coordinate) (normal :accessor normal :initarg :normal))) (defun parse-face (line) (destructuring-bind (label &rest face-points) (cl-ppcre:split "\\s+" (remove-comment line)) (declare (ignorable label)) (mapcar #'parse-face-point face-points))) (defun parse-face-point (string) (destructuring-bind (vertex-index &optional texture-coordinate normal) (cl-ppcre:split "/" string) (make-instance 'face-point :vertex-index vertex-index :texture-coordinate texture-coordinate :normal normal))) Remove-comment simply throws away everything after the first # : (defun remove-comment (line) (subseq line 0 (position #\# line)))
