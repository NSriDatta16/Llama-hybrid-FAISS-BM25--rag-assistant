[site]: datascience
[post_id]: 109839
[parent_id]: 13405
[tags]: 
To undersand mathematically what a linear and affine transformations are, read Pratik_Katte's answer. But in machine learning what are called linear layers are actually mathematically affine transformations $\mathbb{R}^n\rightarrow\mathbb{R}^m$ (i.e. transfomations on the features as a vector). What are called affine layers are actually $n$ affine transformations $\mathbb{R}\rightarrow\mathbb{R}$ (i.e. transformations on the coordinates of the features) class Affine(nn.Module): def __init__(self, dim): super().__init__() self.alpha = nn.Parameter(torch.ones(dim)) self.beta = nn.Parameter(torch.zeros(dim)) def forward(self, x): return self.alpha * x + self.beta https://github.com/facebookresearch/deit/blob/main/resmlp_models.py Where as the psudo-code for linear layers might go class Linear(Module): def __init__(self, in_features: int, out_features: int): super(Linear, self).__init__() self.weight = Parameter(torch.rand((out_features, in_features)) self.bias = Parameter(torch.rand(out_features))
