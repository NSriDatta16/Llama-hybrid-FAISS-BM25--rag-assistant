[site]: stackoverflow
[post_id]: 3001557
[parent_id]: 3001414
[tags]: 
Coincidentally enough, I happen to have a test script in ~/codescraps/fields/test.pl dated from two years ago when I experimented with answering exactly this same question. :) #!/usr/bin/perl use strict; use warnings; use Data::Dumper; { package Foo; use fields qw(foo bar _Foo_private); use private qw(_really_private); sub new { my Foo $self = shift; unless (ref $self) { $self = fields::new($self); $self->{_Foo_private} = "this is Foo's secret"; } $self->{foo} = 10; $self->{bar} = 20; return $self; } } my $foo = Foo->new; $foo->{foo} = 42; # this will generate an error: field does not exist #$foo->{zap} = 42; print "_Foo_private: " . $foo->{_Foo_private} . "\n"; $foo->{_Foo_private} = 1; print "_Foo_private: " . $foo->{_Foo_private} . "\n"; print "_really_private: " . $foo->{_really_private} . "\n"; $foo->{_really_private} = 1; print "_really_private: " . $foo->{_really_private} . "\n"; print Dumper($foo); # subclassing { package Bar; use base 'Foo'; use fields qw(baz _Bar_private); # these fields not shared with Foo sub new { my $class = shift; my $self = fields::new($class); $self->SUPER::new(); # init base fields $self->{baz} = 10; # init own fields $self->{_Bar_private} = "this is Bar's secret"; return $self; } } my $bar = Bar->new; # these work fine $bar->{foo} = 1; $bar->{bar} = 1; $bar->{_Bar_private} = 1; # this will not work - underscored fields are not visible to children $bar->{_Foo_private} = 1; And when I run your code, I get the error: No such pseudo-hash field "_b" at test2.pl line 16. (line 16 is the definition for sub b.) What architecture are you running this on? Objects using the fields pragma aren't simple blessed hashrefs -- they are blessed arrayrefs, e.g. when I modify your constructor to look like this: sub new { my ( $class ) = @_; my Foo $self = fields::new($class); $self->{a} = 1; $self->{_b} = 2; $self->{__c} = 3; print "I look like: ", Data::Dumper::Dumper($self); return $self; } I see: I look like: $VAR1 = bless( [ bless( { 'a' => 1 }, 'pseudohash' ), 1, 2, 3 ], 'Bar' ); As a postscript, I feel obliged to point out that the fields pragma, and the base pragma that goes with it, are both deprecated and one is strongly urged to avoid using them. Nowadays, if you're looking to construct a nice OO module with accessors, one would either use Class::Accessor or go directly to Moose .
