[site]: stackoverflow
[post_id]: 213093
[parent_id]: 54833
[tags]: 
I think that the problem here is in the way that the browser renders the textarea contents, not with ASP.NET per se. Doing this: public void btnSubmitClick(object sender, EventArgs e) { this.txtMultiLine.Text = "\r\n" + this.txtMultiLine.Text; } will let you reach the desired screen output, but you'll add an extra newline to the Text that the user didn't enter. The ideal solution would be for the TextBox control in ASP.NET to always write the newline AFTER writing the open tag and BEFORE writing the contents of Text. This way, you'd reach the desired effect without trumping the contents of the textbox. We could inherit from TextBox and fix this by overriding RenderBeginTag: public override void RenderBeginTag(HtmlTextWriter writer) { base.RenderBeginTag(writer); if (this.TextMode == TextBoxMode.MultiLine) { writer.Write("\r\n"); // or Environment.NewLine } } Now, creating a new class for this small issue seems really overkill, so your pragmatic approach is completely acceptable. But, I'd change it to run in the PreRender event of the page, which is very late in the page lifecycle and would not interfere with the processing of the submitted text in the OnSubmit event of the button: protected void Page_Load(object sender, EventArgs e) { this.PreRender += Page_OnPreRender; } protected void Page_OnPreRender(object sender, EventArgs e) { this.txtMultiLine.Text = "\r\n" + this.txtMultiLine.Text; }
