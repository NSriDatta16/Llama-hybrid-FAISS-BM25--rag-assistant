[site]: datascience
[post_id]: 99924
[parent_id]: 99883
[tags]: 
RNN inputs are 3D tensors i.e. inputs: A 3D tensor with shape [batch, timesteps, feature] The last 2 lags mean you are considering the timestamps=2. But you should try with longer sequences and observe the result You can create your dataset as [batch, 1, 20 ] i.e. 7+12+1 [Features] for seq_len=1 . For longer seq. just create the seq. accordingly i.e the way we create a general timeseries data e.g. [0,1,2,3] = [[0,1],[1,2],[2,3]] for seq_len=2 . A toy code - mon = pd.get_dummies(np.random.randint(0,12,(1000))) day = pd.get_dummies(np.random.randint(0,7,(1000))) x = pd.DataFrame(np.random.randint(0,1000,(1000))) data = pd.concat([x,mon,day], axis=1).to_numpy().reshape(-1,1,20)#seq_len=1, features=20 y = pd.get_dummies(np.random.randint(0,2,(1000))) model = Sequential() model.add(layers.GRU(100, return_sequences=True, input_shape=(1, 20))) model.add(layers.GRU(100, return_sequences=False)) model.add(layers.Dense(1000, activation='relu')) model.add(layers.Dense(2, activation='softmax')) model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy']) history = model.fit(data, y, epochs=10) Side_note - OHE with a Neural network might not give the best result. Try adding Embedding layers before Month/Day. Or use some other encoding that gives continuous output.
