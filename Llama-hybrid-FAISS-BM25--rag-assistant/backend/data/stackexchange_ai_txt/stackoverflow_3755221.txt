[site]: stackoverflow
[post_id]: 3755221
[parent_id]: 3755111
[tags]: 
There are two main techniques: 1) Use operator() rather than operator[]. This is because the operator() allows multiple parameters. class My2D { public: int& operator()(int x,int y) { return pget(x,y);} private: int& pget(int x,int y) { /* retrieve data from 2D storage */ } }; 2) Use operator[] but return an intermediate object. You can then apply the second operator[] to the intermediate object. class My2D { public: class My2DRow { My2D& parent; int x; public: My2DRow(My2D& p, int theX) : parent(p), x(theX) {} // Just init the temp object int& operator[](int y) const { return parent.pget(x,y);} // Here we get the value. }; // Return an object that defines its own operator[] that will access the data. // The temp object is very trivial and just allows access to the data via operator[] My2DRow operator[](int x) { return My2DRow(*this, x);} private: friend class My2DRow; int& pget(int x,int y) { /* retrieve data from 2D storage */ } }; int main() { My2D data; int& val = data[1][2]; // works fine. // This is the same as My2D::My2DRow row = data[1]; int& val2 = row[2]; } I prefer the second technique. This is because it leaves the original code untouched and more natural to read (in an array context). Of course you pay for the simplicity at the high level with slightly more complex code implementing your 2D array.
