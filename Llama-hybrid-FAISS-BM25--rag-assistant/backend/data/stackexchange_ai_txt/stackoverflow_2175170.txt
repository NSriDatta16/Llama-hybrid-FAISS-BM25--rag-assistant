[site]: stackoverflow
[post_id]: 2175170
[parent_id]: 79797
[tags]: 
NOTE -- As of 2020 you should not be using .utcnow() or .utcfromtimestamp(xxx) . As you've presumably moved on to python3,you should be using timezone aware datetime objects. >>> from datetime import timezone >>> >>> # alternative to '.utcnow()' >>> dt_now = datetime.datetime.now(datetime.timezone.utc) >>> >>> # alternative to '.utcfromtimestamp()' >>> dt_ts = datetime.fromtimestamp(1571595618.0, tz=timezone.utc) For details see: https://blog.ganssle.io/articles/2019/11/utcnow.html original answer (from 2010): The datetime module's utcnow() function can be used to obtain the current UTC time. >>> import datetime >>> utc_datetime = datetime.datetime.utcnow() >>> utc_datetime.strftime("%Y-%m-%d %H:%M:%S") '2010-02-01 06:59:19' As the link mentioned above by Tom: http://lucumr.pocoo.org/2011/7/15/eppur-si-muove/ says: UTC is a timezone without daylight saving time and still a timezone without configuration changes in the past. Always measure and store time in UTC . If you need to record where the time was taken, store that separately. Do not store the local time + timezone information! NOTE - If any of your data is in a region that uses DST, use pytz and take a look at John Millikin's answer. If you want to obtain the UTC time from a given string and you're lucky enough to be in a region in the world that either doesn't use DST, or you have data that is only offset from UTC without DST applied: --> using local time as the basis for the offset value: >>> # Obtain the UTC Offset for the current system: >>> UTC_OFFSET_TIMEDELTA = datetime.datetime.utcnow() - datetime.datetime.now() >>> local_datetime = datetime.datetime.strptime("2008-09-17 14:04:00", "%Y-%m-%d %H:%M:%S") >>> result_utc_datetime = local_datetime + UTC_OFFSET_TIMEDELTA >>> result_utc_datetime.strftime("%Y-%m-%d %H:%M:%S") '2008-09-17 04:04:00' --> Or, from a known offset, using datetime.timedelta(): >>> UTC_OFFSET = 10 >>> result_utc_datetime = local_datetime - datetime.timedelta(hours=UTC_OFFSET) >>> result_utc_datetime.strftime("%Y-%m-%d %H:%M:%S") '2008-09-17 04:04:00' UPDATE: Since python 3.2 datetime.timezone is available. You can generate a timezone aware datetime object with the command below: import datetime timezone_aware_dt = datetime.datetime.now(datetime.timezone.utc) If your ready to take on timezone conversions go read this: https://medium.com/@eleroy/10-things-you-need-to-know-about-date-and-time-in-python-with-datetime-pytz-dateutil-timedelta-309bfbafb3f7
