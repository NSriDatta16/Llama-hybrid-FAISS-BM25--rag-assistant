[site]: stackoverflow
[post_id]: 4514941
[parent_id]: 4505517
[tags]: 
Yuji, Thank-you for your tips, and I appreciate your hard work at looking into my disorganized coding. Originally my goal was to have a list of Providers that had to be verified (in the admin interface) before appearing in the public search results. The problem I encountered was that if a Provider updated their own contact information, we automatically set verified=False (in case something inappropriate was posted). So, a Provider who updated their information would then have to be reverified before appearing at all on the database. This was awful, because they would instantly be removed from the search results. That's why I introduced revisions to my database, so that a provider could edit and update their information at anytime. Now the new changes just wouldn't appear until we manually verified updated version of the Provider's information. I wanted to keep the ID of the contact the same, so that logging history would remain the same. This became too complicated. So, just ended up making it so that it'd delete the old version upon a save() if verified was checked as True. admin.py def save_model(self, request, obj, form, change): providerid = obj.id if Revision.objects.filter(revised_provider=providerid).exists() and obj.revised == True: compare = Revision.objects.get(revised_provider=providerid) oldproviderid = compare.provider.id oldprovider = Provider.objects.get(id=oldproviderid) revisedproviderid = compare.revised_provider.id revisedprovider = Provider.objects.get(id=revisedproviderid) if change: #Check to see if we changed anything important verified = form.cleaned_data['verified'] #Means we would have had to manually verified it if verified == True: #This means that we have approved to update the old Provider #After copying the data over, we destroy what we are saving obj.revised = False obj.save() #If we verfied it, revised = False compare.delete() #Delete Revision oldprovider.delete() #Delete Old Provider return super(ProviderAdmin, self).save_model(request, obj, form, change)
