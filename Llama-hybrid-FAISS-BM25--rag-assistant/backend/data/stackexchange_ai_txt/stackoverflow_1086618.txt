[site]: stackoverflow
[post_id]: 1086618
[parent_id]: 
[tags]: 
Comparing enum flags in C#

I need to detect if a flag is set within an enum value, which type is marked with the Flag attribute. Usually it is made like that: (value & flag) == flag But since I need to do this by generic (sometimes at runtime I event have only an "Enum" reference. I can not find an easy way to use the & operator. At the moment I make it like this: public static bool IsSet (this T value, T flags) where T : Enum { Type numberType = Enum.GetUnderlyingType(typeof(T)); if (numberType.Equals(typeof(int))) { return BoxUnbox (value, flags, (a, b) => (a & b) == b); } else if (numberType.Equals(typeof(sbyte))) { return BoxUnbox (value, flags, (a, b) => (a & b) == b); } else if (numberType.Equals(typeof(byte))) { return BoxUnbox (value, flags, (a, b) => (a & b) == b); } else if (numberType.Equals(typeof(short))) { return BoxUnbox (value, flags, (a, b) => (a & b) == b); } else if (numberType.Equals(typeof(ushort))) { return BoxUnbox (value, flags, (a, b) => (a & b) == b); } else if (numberType.Equals(typeof(uint))) { return BoxUnbox (value, flags, (a, b) => (a & b) == b); } else if (numberType.Equals(typeof(long))) { return BoxUnbox (value, flags, (a, b) => (a & b) == b); } else if (numberType.Equals(typeof(ulong))) { return BoxUnbox (value, flags, (a, b) => (a & b) == b); } else if (numberType.Equals(typeof(char))) { return BoxUnbox (value, flags, (a, b) => (a & b) == b); } else { throw new ArgumentException("Unknown enum underlying type " + numberType.Name + "."); } } private static bool BoxUnbox (object value, object flags, Func op) { return op((T)value, (T)flags); } But I don't like the never ending if - else blocks, so is there a way to cast these values that I can use the & operator or any other solution to check this?
