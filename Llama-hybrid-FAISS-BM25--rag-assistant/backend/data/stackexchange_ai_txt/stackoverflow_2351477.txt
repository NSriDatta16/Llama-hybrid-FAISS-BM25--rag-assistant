[site]: stackoverflow
[post_id]: 2351477
[parent_id]: 2351452
[tags]: 
Having several classes with the same name will, one day or another, cause some problems : you cannot include two classes with the same name during the execution of one script -- It'll get you a Fatal Error. What's generally done, in PHP (before PHP 5.3 and namespaces, at least) is to include the name of the library and/or the "package" in the class name. For instance, you could have a class name MyLibrary_Package_MultiActionController , and another called OtherLib_Blah_MultiActionController . Then, what's generally done is using that class name to "map" it to directories and files, replacing the '`_`' by '`/`', and adding `.php` at the end of the last level -- this being often done using the [autoloading feature of PHP][1], to avoid having to write an enormous amount of [`require`][2] directives. For instance, a class named MyLibrary_Package_MultiActionController should be stored in MyLibrary/Package/MultiActionController.php . As a sidenote : you used the tag "php4", in your question... If you are actually using PHP 4, you should not forget that it's old, not maintained anymore *(Not even for security-related problems)*, and that PHP 5 is really the way to go ! In fact, you won't be able to do much about object-oriented programming, with PHP 4 ; the object-oriented stuff in PHP 4 was really basic... (Stuff such as autoloading, which I wrote about a couple of paragraph earlier didn't exists in PHP 4 -- same for public / private / protected , and lots of other OO-related things...)
