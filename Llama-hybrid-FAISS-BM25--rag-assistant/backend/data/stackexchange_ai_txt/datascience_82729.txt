[site]: datascience
[post_id]: 82729
[parent_id]: 
[tags]: 
Sampling for the encoder part of the VAE

my question regards the code utilized to implement the sampling function in the encoder part of VAE. Supposing that we chose a latent dimension of 2. Before the latent representation, we have 4 neurons (2 for mu and 2 for sigma). We arrive to this representation with a series of Conv2D on a MNIST dataset. Then for having the latent space, from theory, I know that we have to use the reparametrization trick to sample in a correct way. So I have a function like this that has to do the job. def sampling_z(args): mu, sigma = args batch = K.shape(mu)[0] dim = K.int_shape(mu)[1] eps = K.random_normal(shape=(batch, dim)) return mu + K.exp(sigma / 2) * eps From this code in Python it seems that the information for the calculation of the normal needed for the trick are two values that I can extract from the two elements that compose the mu array. Am I correct on supposing this? If yes why the shape of these two neurons (mu) contains information for the normal distribution? Probably there is something that I cannot understand on the following python functions: K.shape, K.int_shape Why It is so important having the shape of a 2 dim array? As you can see I am little bit confused about this. Could please someone help me with this? Maybe is the mu that is not a 2d array. Many thanks:-)
