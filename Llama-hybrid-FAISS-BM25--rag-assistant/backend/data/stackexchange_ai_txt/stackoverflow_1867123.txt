[site]: stackoverflow
[post_id]: 1867123
[parent_id]: 1803914
[tags]: 
This may be unrelated to your question, but GCHandle and gcroot may be useful; they allow you to get an unmanaged object encapsulating the handle to a managed object inside: // hold_object_reference.cpp // compile with: /clr #include "gcroot.h" using namespace System; #pragma managed class StringWrapper { private: gcroot x; public: StringWrapper() { String ^ str = gcnew String("ManagedString"); x = str; } void PrintString() { String ^ targetStr = x; Console::WriteLine("StringWrapper::x == {0}", targetStr); } }; #pragma unmanaged int main() { StringWrapper s; s.PrintString(); } ----------------- Imports System Imports System.IO Imports System.Threading Imports System.Windows.Forms Imports System.Runtime.InteropServices Imports System.Security.Permissions Public Delegate Function CallBack(ByVal handle As Integer, ByVal param As IntPtr) As Boolean Module LibWrap ' passing managed object as LPARAM ' BOOL EnumWindows(WNDENUMPROC lpEnumFunc, LPARAM lParam); _ Function EnumWindows(ByVal cb As CallBack, ByVal param As IntPtr) As Boolean End Function End Module 'LibWrap Module App Sub Main() Run() End Sub _ Sub Run() Dim tw As TextWriter = System.Console.Out Dim gch As GCHandle = GCHandle.Alloc(tw) Dim cewp As CallBack cewp = AddressOf CaptureEnumWindowsProc ' platform invoke will prevent delegate to be garbage collected ' before call ends LibWrap.EnumWindows(cewp, GCHandle.ToIntPtr(gch)) gch.Free() End Sub Function CaptureEnumWindowsProc(ByVal handle As Integer, ByVal param As IntPtr) As Boolean Dim gch As GCHandle = GCHandle.FromIntPtr(param) Dim tw As TextWriter = CType(gch.Target, TextWriter) tw.WriteLine(handle) Return True End Function End Module
