[site]: stackoverflow
[post_id]: 5469937
[parent_id]: 5468509
[tags]: 
I think you should try and find a balance between whats "good design" and what works for you. For instance, I have an MVC application that uses ASP.NET Membership , but I also have a custom User table, where I store things like a user's fiendly name, or OpenID. In that same application I have an IAdminService that handles everything concerning user administration. What IAdminService returns to the controller is an AdminUser class, which looks like: public class AdminUser { public string UserName { get; set; } public User User { get; set; } public MembershipUserWrapper MembershipUser { get; set; } } MembershipUserWrapper is just a wrapper around the default MembershipUser to allow for testing and more flexibility in general. Anyway, you could argue that AdminUser is actually a view model and indeed I do have a couple of views strongly typed to AdminUser . It would be complicating matters unnecessarily to not let IAdminService return an AdminUser just because it is in the "service layer", and in this case, you don't want the controller performing the "transformation" from User and MembershipUserWrapper to AdminUser every time. is it good design for the workerService to return both Person and Worker objects to the Controller? I think in this case it probably is. You could have two separate services, but most of the logic for fetching a Worker and a Person is probably the same, so you'd be forcing yourself to either repeat a lot of code or create a third service that performs the common tasks. You should pay attention to proper desing, but take also K.I.S.S. and YAGNI into account. Do what makes sense now, and refactor accordingly whenever needed.
