[site]: stackoverflow
[post_id]: 358908
[parent_id]: 358793
[tags]: 
What you describe is not really a pattern, but instead a programming principle called ' Separation of Concerns '. From your description I would strongly argue that you after a structural design pattern, not a creational design pattern since allocation of coding concerns is discussed over creational complicity. So, my best guess is that the pattern you are after is perhaps the Facade Pattern or Gateways . It is common to use Entities (your clsClass) with Gateways. I would however not necessarily encourage jumping into making your methods static however since then these cannot be mocked during testing of Business Logic. You would want to mock these types of methods that return data access objects if they form the application's data layer since you don't want to hit the data base when business logic depends on these gateways/facades. public class clsClass { public int ID; public string title; public string author; public string article; } public class BookGateway { public List GetAllArticles() { var result = new List (); // Add items here. // Can call database and populate each new clsClass // and add to result object. return result; } }
