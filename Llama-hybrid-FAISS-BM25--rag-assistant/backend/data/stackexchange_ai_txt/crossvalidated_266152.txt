[site]: crossvalidated
[post_id]: 266152
[parent_id]: 
[tags]: 
Can a convolutional NN be made with perceptrons?

I was reading this interesting article on convolutional neural networks. It showed this image, explaining that for every receptive field of 5x5 pixels/neurons, a value for a hidden value is calculated. We can think of max-pooling as a way for the network to ask whether a given feature is found anywhere in a region of the image. It then throws away the exact positional information. So max-pooling is applied. With multiple convolutional layers, it looks something like this: But my question is, this whole architecture could be build with perceptrons, right? For every convolutional layer, one perceptron is needed, with layers: input_size = 5x5; hidden_size = 10; e.g. output_size = 1; Then for every receptive field in the original image, the 5x5 area is inputted into a perceptron to output the value of a neuron in the hidden layer. So basically doing this for every receptive field: So the same perceptron is used 24x24 amount of times to construct the hidden layer, because: is that we're going to use the same weights and bias for each of the 24Ã—24 hidden neurons. And this works for the hidden layer to the pooling layer as well, input_size = 2x2; output_size = 1; . And in the case of a max-pool layer, it's just a max() function on an array. and then finally: The final layer of connections in the network is a fully-connected layer. That is, this layer connects every neuron from the max-pooled layer to every one of the 10 output neurons. which is a perceptron again. So my final architecture looks like this: -> 1 perceptron for every convolutional layer/feature map -> run this perceptron for every receptive field to create feature map -> 1 perceptron for every pooling layer -> run this perceptron for every field in the feature map to create a pooling layer -> finally input the values of the pooling layer in a regular ALL to ALL perceptron Or am I overseeing something? Or is this already how they are programmed?
