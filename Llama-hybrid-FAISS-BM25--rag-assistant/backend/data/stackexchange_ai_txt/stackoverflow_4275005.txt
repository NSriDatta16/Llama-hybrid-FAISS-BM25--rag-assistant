[site]: stackoverflow
[post_id]: 4275005
[parent_id]: 
[tags]: 
JNLP + Applet + Bouncy Castle

I have a JWS (Java Web Start) deployed applet, that uses the following libraries/jars: red5.jar spring-beans.jar spring-context.jar spring-core.jar apache-mina.jar bcprov-ext-jdk16-145 (Bouncy castle) The reason I put all of those libraries in the applet is that the red5.jar requires you also have the others. However, BouncyCastle somehow doesn't get loaded by the ClassLoader, nor gets signed by Netbeans during compilation of the WebStart project. Any pointers how can I resolve that ? Here is what I get if I include Bouncy Castle in my archive: basic: exception: JAR resources in JNLP file are not signed by same certificate. exception: JAR resources in JNLP file are not signed by same certificate. JNLPException[category: Launch File Error : Exception: null : LaunchDesc And here is what I get when I even DO NOT INCLUDE IT IN THE PROJECT: com.sun.deploy.net.FailedDownloadException: Unable to load resource: file:/C:/JNA/dist/lib/bcprov-ext-jdk16-145.jar I do not know which of the jars requires the Bouncy Castle jar, as it fails to indicate so in my IDE. In addition, even if I include the Bouncy Castle.jar in my project, Netbeans SHOULD sign it by default, but it doesn't, although it signs ALL other jars in my Web Start project. A quick check with jarsigner, however, indicates all jars, including Bouncy Castle, are signed, so I safely assume they are all signed, with the exception that Bouncy Castle is signed with another certificate. And here is my question: should I try to sign all the files manually (so they all have the same certificate) or is the problem somewhere else (like BouncyCastle can't be signed in an applet, or something)? Any pointers would be highly appreciated EDIT: I basically have TWO approaches, both failed up to now: Approach 1. Extract each jar's directory tree and dump them together in a shared directory, then make a jar of this directory, so all the files in it are signed by the same certificate ( one jar, one certificate, right..) However, spring STILL expects the files to be organized like this: dist\libs\bcProv.jar, instead of dist\libs\allLibs.jar, where all libraries are dumped into the allLibs.jar. The approach fails miserably because spring can't find any of the libraries when deployed through JWS. Approach 2. Sign all jars manually WITH the SAME certificate. After spending 10 minutes manually signing the jars, this approach also fails AND has the audacity to throw an error that bcProv.jar is NOT signed with the same certificate as the others. I am puzzled, baffled and confused. Any ideas? Is it possible at all to have together in an JWS applet those jars: red5.jar spring-beans.jar spring-context.jar spring-core.jar apache-mina.jar bcprov-ext-jdk16-145
