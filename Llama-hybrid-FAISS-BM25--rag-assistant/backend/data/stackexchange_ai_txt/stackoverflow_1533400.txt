[site]: stackoverflow
[post_id]: 1533400
[parent_id]: 1532721
[tags]: 
My take on a good design in a webapp, is that the Business Layer is where you Model your application in an object-oriented way and define your business rules. The business layer is the core of your application. In a typical web app you will many times just pass data through the business layer, but it still creates a good separation between data and ui and anyways it is code that is very easy to write and maintain so don't worry to much if this appears to be unnecessary code. To make your Business layer future proof and easy to test it should not have any knowledge of any of the external services it uses, it should just define a contract of what the services should deliver to your app, therefore you create interfaces for your services(IDataStorage, IMailService, ILogger...). This also allows you to easily swap the service implementations as they are much more a subject of change than your core business model. You can consider your DAL as just a service the allows you to store and retrieve your data from a persistant store, this can be an xml file, web service or more likely a database. In this way your DAL is a service that gets data from your persistant store and translates this into your business entities. When it comes to UI you should ideally create your business layer interface in a way that would allow for different UIs (Webforms, mvc, silverlight). If you create a good application it will live for many years and the UI will likely change many times and many times several UIs will be created. Your business layer should not care what you use as an UI layer, in this way you get a good separation between your layers.
