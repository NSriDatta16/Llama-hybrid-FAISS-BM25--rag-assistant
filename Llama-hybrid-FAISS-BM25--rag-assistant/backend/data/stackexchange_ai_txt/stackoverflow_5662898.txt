[site]: stackoverflow
[post_id]: 5662898
[parent_id]: 5662201
[tags]: 
The proper way to dry this up in Rails 2.3.X is a named scope in your model. Excessive/repeated querying in your Controller is a hint of a code smell. If you don't believe me about this, Jamis Buck has got my back! http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model In your Spot model: # app/models/spot.rb named_scope :by_type, lambda { |city, type| {:conditions => ["(city=? or state=?) and country=? and shop_type=?", city.name, city.name, city.country, type] } } In your Cities Controller: #app/contollers/cities_controller.rb before_filter :fetch_city, :except => :show def western @spots = paginate_spots("Places") end .... private def fetch_city @city = City.find(params[:id]) end def paginate_spots(type) Spot.by_type(@city,type).paginate(:page => params[:page], :per_page => 20, :order => 'rating_average DESC' ) end What this is accomplishing is removing most of the querying logic out of the Controller. This is a good thing, as it allows you to find spots by city and type in other controllers if the need arises. Pagination is likely to be specific to your individual controller, so I tend to exclude it from the scopes inside models. If you want to build an API, you might limit to 50 instead of 20 for example and want to sort by a different method.
