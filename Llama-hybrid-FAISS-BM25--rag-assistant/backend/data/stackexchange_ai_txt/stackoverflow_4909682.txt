[site]: stackoverflow
[post_id]: 4909682
[parent_id]: 4909655
[tags]: 
While you are correct that the run method of a Runnable is public, one thing you can do to prevent other people from calling it is to make your entire Runnable implementation a package-private class or a private inner class. This way, while it may have a public run method, code other than your custom class cannot instantiate the Runnable object. If you also have your class not hand back references to it, then clients won't have access to the Runnable , and so they can't invoke run . That is, don't have your Process class implement Runnable ; instead, make another class that actually implements Runnable , then make Process the only class that can access it. This approach is more elegant than what you have proposed because it prevents other code from calling run at compile-time rather than at runtime. In particular, if any code tries to call your run method described above, it will compile just fine, and will fail at runtime. The problem is that the code will compile but can never work correctly. Making the Runnable inaccessible means that if someone does try to run it, they'll get a compile-time error and will have to rethink their design. In other words, the compiler will detect the error before it even happens. In general, if you ever find yourself wanting to prevent random code from calling methods of a class that have to be public because they're declared in an interface, consider changing the access specifier for the entire class so that clients can't reference it.
