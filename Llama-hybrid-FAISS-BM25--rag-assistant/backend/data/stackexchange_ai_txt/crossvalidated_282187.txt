[site]: crossvalidated
[post_id]: 282187
[parent_id]: 275694
[tags]: 
I recommend using a RandomForestClassifier from the new Spark ML library (as opposed to MLlib which will be gradually phased out). For that you need to convert your data into a Spark dataframe: dataset = spark.createDataFrame([ ... (1.0, Vectors.dense(1.0)), ... (0.0, Vectors.sparse(1, [], []))], ["label", "features"]) Once the data is loaded into the dataframe, you want to make sure that it contains numeric types (as opposed to strings) in order to run classification. In the case of categorical data, an alternative to one hot encoding (which can generate a lot of columns) is to use a StringIndexer : indexer = StringIndexer(inputCol="gender", outputCol="genderInd") dataset = indexer.fit(dataset).transform(dataset) this will encode your data into a column of label indices. If you have multiple features, you would need to group them using VectorAssembler into a single features vector: assembler = VectorAssembler( inputCols=["amount", "maritalInd","genderInd"], outputCol="features") Once that is done, you are ready to instantiate Random Forest Classifier and fit the model: rfc = RandomForestClassifier(numTrees=100, maxDepth=6, labelCol="sectorInd", featuresCol="features", seed=0) model = rfc.fit(trainingData) For more information, have a look at the classification example and API docs .
