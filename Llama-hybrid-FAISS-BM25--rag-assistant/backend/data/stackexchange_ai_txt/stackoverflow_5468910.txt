[site]: stackoverflow
[post_id]: 5468910
[parent_id]: 
[tags]: 
Querying Web Services with SQL

I had a bit of a shock recently when thinking about combining a service oriented architecture with a brilliant UI which leverages SQL to optimize performance when querying data. The DevExpress grid view for ASP.NET, for example, is so cool that it delegates all filtering, sorting and paging logic to the database server. But this presumes that the data is retrieved from a SQL-able database server. What if I want to introduce a web service layer between the database and UI layers, and to have the UI use the web services to query the data? How can I design the web services and the UI such that I can pass filtering requests from the UI via the web services to the database? Do I need to provide a List QueryData(string sqlQuery) style web service and have to parse the SQL string on my own to guarantee security/access restriction? Or is there any good framework or design guideline that takes this burden from me? This must be a very common problem, and I am sure that it has been solved relatively adequately already, has it? I am mainly interested in a .NET/C#-based or -compatible solution. Edit: I've found OData and Microsoft WCF Data Services. If I got it right, an OData-based application could look as follows: User ---/Give me Page 1 (records 1..10)/---> ASP.NET Server Control (of course, via HTTP) ASP.NET Server Control ---/LINQ Query/---> Data service client Data service client ---/OData Query/---> WCF Data Service WCF Data Service ---/LINQ Query/---> Entity Framework Entity Framework ---/SQL Query/---> Database If I got this right, my DevExpress server control should be able to delegate a filtering request (e.g. give me the top 10 only) through all these layers down to the database which then applies its indexes etc. in order to perform that query. Is that right? Edit: It is a joy to see this thread coming to life :-) It is hard to decide on what answer to accept because all seem equally good to me...
