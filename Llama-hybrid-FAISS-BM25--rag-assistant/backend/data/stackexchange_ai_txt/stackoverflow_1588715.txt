[site]: stackoverflow
[post_id]: 1588715
[parent_id]: 1588574
[tags]: 
I think it depends on what other responsibilities the class has that contains those methods. Design patterns are structural constructs. Here we infer that there is a class class Retriever { ... public IWorkerDocument AttemptContractRetrieval() { } public IWorkerDocument AttemptAssignmentRetrieval() { } } The client code is already deciding whether to call AttemptContractRetrieval(), or AttemptAssignmentRetrieval, so maybe polymorphism is in order. class ContractRetriever { public IWorkerDocument AttemptRetrieval() { } } class AssignmentRetriever { public IWorkerDocument AttemptRetrieval() { } } You can make an abstract Retriever class and have these as descendents of that. This will force the derived classes to have an AttemptRetrieval() method. If you execute similar actions on the retrieved documents, you may consider having Contract and Assignment classes instead of ContractRetriever and AssignmentRetriever. Then you can put common actions in their parent. In short, a lot of the answer here lies in the unstated context of the problem.
