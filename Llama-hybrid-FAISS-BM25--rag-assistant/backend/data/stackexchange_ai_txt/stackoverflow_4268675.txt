[site]: stackoverflow
[post_id]: 4268675
[parent_id]: 4268629
[tags]: 
You could always do Protected void SetParameterValue(SqlParameter parameter, object parameterValue, bool isNullable).... parameter.Value takes an object so minus the validation for each type, you don't really need to seperate them out. You could create a validate parameter method which reflects and pulls type type for the parameter and checks if the null value is set against that type. something like bool IsNull (object value){ if (value is int){ check int.. } } //this is a quick and dirty example, there are more elegant ways to handle it. This condenses your type validation and all your overloads, and it removes the need for a generic method too.
