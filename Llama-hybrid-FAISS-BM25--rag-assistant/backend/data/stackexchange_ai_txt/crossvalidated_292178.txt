[site]: crossvalidated
[post_id]: 292178
[parent_id]: 291022
[tags]: 
My initial thoughts This problem seems easier to be solved by actually looking and understanding the schema from the DB's that you are using. ML is usually a good idea where the cost of a mistake ( false positive or false negative ) isn't too high. In your case, a false negative (predicting two columns are not a match when they are) implies on not being able to run you application at all with those two features; a false positive (predicting two columns are a match when they aren't) means that the application will run with faulty data. Both of those seem a high cost to run an analysis/application based on ML. If I had to do it I would consider simple matching features before diving into a machine learning algorithm for 2 reasons: you don't seem to have enough training data you don't have a benchmark for comparing performance So I would go for setting up a benchmark with simple heuristics so that you can set up you analysis/application, and improve it with ML as needed. The simple heuristics I suggest are: similar descriptive statistics for numerical values most/least common for categorical values string similarity on the column names Etc... With that, you can start to have a comparison case before running a ML algorithm, which it self can have many problems associated with it, that are not related with the application you might be aiming.
