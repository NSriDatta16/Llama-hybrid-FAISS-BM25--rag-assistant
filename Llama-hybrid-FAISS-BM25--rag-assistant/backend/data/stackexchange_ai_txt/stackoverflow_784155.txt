[site]: stackoverflow
[post_id]: 784155
[parent_id]: 
[tags]: 
UserControl as an interface, but visible in the Designer

So we have a C# WinForms project with a Form that contains a bazillion UserControl s. Each UserControl naturally exposes all the UserControl methods, properties, etc. in addition to its own specific members. I've been thinking that one way to reduce the complexity of dealing with these UserControl s is to access them through an interface. So instead of drag-and-drop to put the UserControl on the form, something like this in the constructor: public class MyGiantForm { ICustomerName cName; public MyForm() { InitializeComponent(); var uc = new SomeCustomerNameUserControl(); this.Controls.Add(uc); cName = uc; } } SomeCustomerNameUserControl implements ICustomerName , naturally, and ICustomerName contains the specific properties I really care about (say, FirstName and LastName ). In this way I can refer to the UserControl through the cName member and, instead of being bowled over by all the UserControl members, I get only those in ICustomerName . All well and good, but the problem is that if I do it this way, I can't see SomeCustomerNameUserControl in the Designer. Does anybody know I way I can do this but still see the UserControl on the form's design surface? EDIT: One way to do this, which isn't overly complicated, is to put the controls on a base form. By default (in C#) the control members are private. Then I create a property for each control exposing it through the interface. However, I'd be interested in some other way to do this, even if it's more complex. There seems to be some way to do it with IDesignerHost, but I can't find any applicable examples.
