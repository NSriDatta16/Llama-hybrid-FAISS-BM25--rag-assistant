[site]: stackoverflow
[post_id]: 4858715
[parent_id]: 4857075
[tags]: 
Yup, this should be achievable, but try not to think about it in terms of tables, but rather as objects and collections. The Product object has a method getTierPrice which uses a Factory pattern to return tier pricing depending on the product type (Simple, Bundle, etc). That method checks the current visitor's group when calculating the tier prices. So, tier price is not an attribute in the classic Magento sense which means that you can't filter by attribute, instead you could use the walk function on the collection to calculate the Tier Price, and then filter the collection by the updated values. An example of a walk function might be: $collection = Mage::getModel('catalog/product')->getCollection(); $collection->walk('Namespace_Module_Helper_Data::removeStockData',array()); then within your Namespace_Module_Helper_Data , you have something like: public static function removeStockData($product = null) { $product->setData('stock_item',null); return; } Alternatively, you could run the collection through a foreach loop: foreach($collection->getItems() as $key => $item){ if($item->getTierPrice($qty) == $item->getPrice()){ //insert your own criteria $collection->removeItemByKey($key); } }
