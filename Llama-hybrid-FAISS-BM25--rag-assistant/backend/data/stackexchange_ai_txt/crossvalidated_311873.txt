[site]: crossvalidated
[post_id]: 311873
[parent_id]: 
[tags]: 
Cross Validation with Autoencoders in R on MNIST dataset

I was following this python guide and trying to emulate it in R: https://machinelearningmastery.com/evaluate-performance-deep-learning-models-keras/ there is this function called stratifiedKFold in Python which I found its equivalent to createFolds in R. I have two questions: The documentation that the first input, the y, for createFolds is a vector of outcomes. Would that y be mnist\$test or mnist\$train\$y and mnist\$test\$y when we call the fit function would the first two parameters be in terms of folds generated from CreateFolds or do I still use x_train and y_train code below: library(lattice) library(ggplot2) library(keras) library(caret) set.seed(1) mnist % layer_dense(units = 64, activation= "sigmoid", input_shape = c(784)) %>% # input layer_dropout(rate = 0.4) %>% # dropping points at random in between layers to avoid overfitting. layer_dense(units=128, activation = "sigmoid") %>% # hidden layer_dropout(rate = 0.3) %>% # dropping points at random in between layers to avoid overfitting. layer_dense(units = 10, activation = "sigmoid") # output # summary of the model. # summary(model) # compiling the model model %>% compile( loss = "mse", optimizer = optimizer_adam(), metrics = c("accuracy") ) # fitting the model history % fit( x_train, y_train, epochs = 5, batch_size = 64, validation_split = 0.2 ) # evaluating the performance of the model model %>% evaluate(x_test, y_test, verbose = 0) # model %>% predict_classes(x_test) }
