[site]: stackoverflow
[post_id]: 1523332
[parent_id]: 1522370
[tags]: 
The short answer is "maybe, but don't bet on it!". Somewhere in the stack of classes that implement FileInputStream is a class that has a finalizer that will effectively close the stream (and release the resource) when it is run. The problem is that there is no guarantee that the finalizer will ever run. Quoting from the JLS (section 12.6): The Java programming language does not specify how soon a finalizer will be invoked, except to say that it will happen before the storage for the object is reused. This makes stream finalization problematic: If your Stream object never becomes garbage, it will never be finalized. If your Stream object is tenured, it may take a long time before it is garbage collected and finalized. The JVM may need to perform an extra GC cycle after the object is identified as unreachable before the finalizer is executed. This is certainly allowed by the JLS! It is technically legal for a JVM to never, ever to execute finalizers, provided that it never reuses the store of objects with finalizers. (I'm not aware of any production quality JVMs that take this line, but you never know ...)
