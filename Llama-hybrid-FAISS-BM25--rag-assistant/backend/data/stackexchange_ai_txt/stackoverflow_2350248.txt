[site]: stackoverflow
[post_id]: 2350248
[parent_id]: 
[tags]: 
Difference in performance between map and unordered_map in c++

I have a simple requirement, i need a map of type . however i need fastest theoretically possible retrieval time. i used both map and the new proposed unordered_map from tr1 i found that at least while parsing a file and creating the map, by inserting an element at at time. map took only 2 minutes while unordered_map took 5 mins. As i it is going to be part of a code to be executed on Hadoop cluster and will contain ~100 million entries, i need smallest possible retrieval time. Also another helpful information: currently the data (keys) which is being inserted is range of integers from 1,2,... to ~10 million. I can also impose user to specify max value and to use order as above, will that significantly effect my implementation? (i heard map is based on rb trees and inserting in increasing order leads to better performance (or worst?) ) here is the code map Label // this is being changed to unordered_map fstream LabelFile("Labels.txt"); // Creating the map from the Label.txt if (LabelFile.is_open()) { while (! LabelFile.eof() ) { getline (LabelFile,inputLine); try { curnode=inputLine.substr(0,inputLine.find_first_of("\t")); nodelabel=inputLine.substr(inputLine.find_first_of("\t")+1,inputLine.size()-1); Label[atoi(curnode.c_str())]=atoi(nodelabel.c_str()); } catch(char* strerr) { failed=true; break; } } LabelFile.close(); } Tentative Solution: After review of comments and answers, i believe a Dynamic C++ array would be the best option, since the implementation will use dense keys. Thanks
