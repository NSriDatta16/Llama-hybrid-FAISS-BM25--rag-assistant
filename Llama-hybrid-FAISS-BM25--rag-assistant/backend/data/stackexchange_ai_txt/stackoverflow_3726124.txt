[site]: stackoverflow
[post_id]: 3726124
[parent_id]: 3725214
[tags]: 
Short answer: Ruby encourages method chaining, Python doesn't. I guess the right question is: What is Ruby's tap useful for? Now I don't know a lot about Ruby, but by googling I got the impression that tap is conceptually useful as method chaining. In Ruby, the style: SomeObject.doThis().doThat().andAnotherThing() is quite idiomatic. It underlies the concept of fluent interfaces , for example. Ruby's tap is a special case of this where instead of having SomeObject.doThis() you define doThis on the fly. Why I am explaining all this? Because it tells us why tap doesn't have good support in Python. With due caveats, Python doesn't do call chaining . For example, Python list methods generally return None rather than returning the mutated list. Functions like map and filter are not list methods. On the other hand, many Ruby array methods do return the modified array. Other than certain cases like some ORMs, Python code doesn't use fluent interfaces. In the end it is the difference between idiomatic Ruby and idiomatic Python. If you are going from one language to the other you need to adjust.
