[site]: datascience
[post_id]: 39838
[parent_id]: 
[tags]: 
Model Not Learning with Sparse Dataset (LSTM with Keras)

This classification problem is apparently simple and I have no idea why it's not working, perhaps I'm doing a conceptual mistake. I'm trying to make a predictor which will classify minutes on a clock as 0 for no requests or 1 for a request in that time instant. So far, the model can't seem to learn past giving everything 0 's or putting zeros before all the requests happen. The best case scenario I've got so far is: I've been trying to implement all the things I've learned related to Neural Networks and my code works in the following manner: Create the Clock. Create some Requests (I've made them last longer so the dataset is less sparse). Scale (MinMax) the independent variable (clock). Create a custom loss function for the sparse dataset (I've tried it with a regular logits, but it can't go much further than giving zeros to almost everything; so I penalized mistakes made on the instants with requests). Create the model, composed of 3 stacked LSTM layers (Both a regular NN and an LSTM have been tried). Other techniques that have also been tried are Dropout, Gradient Clipping (for exploding gradients) and extremely small learning rates with ADAM (on the order of $10^{-5}$ ). Basically, I just can't go much further than an accuracy of around 73.33%. The code below is indeed longer than I would like to believe I'm allowed to post here, but it is also, hopefully, rather simple to read. Thank you for trying to help me. # Data Pre-processing ## The Clock clock = [] for i in range(0,24): for j in range(0,60): if i 0.5) from sklearn.metrics import confusion_matrix cm = confusion_matrix(y_train, y_pred_bin) # Plotting import matplotlib.pyplot as plt plt.plot(y_pred, color = 'green', label = 'model') plt.plot(y_pred_bin, color = 'red', label = 'model binary') plt.plot(y_train, color = 'blue', label = 'training') plt.legend() plt.show() plt.close()
