[site]: crossvalidated
[post_id]: 86688
[parent_id]: 
[tags]: 
Estimating the dof for t test of Correlation Coefficients of smoothed time courses

I'm working with an array of size 265 x 5000. Each column is a time series and the rows are points in a series of volumes ( voxels in fMRI ). I preprocessed this data in several ways, most of which have some sort of filtering mechanism. My task is to compute the correlation coefficient between all voxels, compute a T test, find the p values and correct my coefficients for values above a threshold. Then there's more steps, but they are not relevant as far as I know. I know how to compute the T test of the corr coefs, but unclear on the DOF. import numpy as np # roi is my variable holding the 265 x 5000 data corr_matrix = np.corrcoef(roi.T)# transpose of roi corr.shape >>>(5000,5000) # to be clear in case I messed up somewhere... Thinking this might be helpful, I computed the rank of the corr array with: np.linalg.matrix_rank(corr) >>>225 The rank of the time series array: np.linalg.matrix_rank(roi.T) # the transpose >>>236 I don't really know what I'm doing here and hoping there's a clear way of estimating the dof of this array. Thank you! EDIT: I feel kinda dumb having computed rank. Neither matrix is a system of linear equations...so that probably made no sense...I think what I was after, is something akin to computing the eigen values of the cross correlation array. I've read in a genetic research paper dealing with large cross correlation matrices, that a fractional eigen value means there's dependence and integer's are independent. So that e.v. = 1.45 would mean 1 independent and 0.45 of another independent e.value. I haven't been able to confirm this. UPDATE: Maybe I wasn't wrong to compute the rank of the roi above. Since each col is a vector,if there are scalars a and b, which result in a*c_1 + b*c_2 = 0, then c_1 and c_2 are dependent. If roi has rank 236, then corr has dof = 236**2 ....?
