[site]: stackoverflow
[post_id]: 5142947
[parent_id]: 5141402
[tags]: 
The language C doesn't even have this concept called a stack. It just defines the behaviour of automatic storage and most compilers implement it using the stack provided by most architectures. Heck even the & operator is purely abstract and the value returned by it, in its numerical representation can be anything, as long as it adheres to the rules of pointer arithmetic. But this number, it may completely virtual and not related at all to the addresses used in the instructions. So while the task of determining if a variable is located on the stack is well defined, it is, by definition, impossible to implement using pure ANSI C, without resting on implementation specific behaviour. The usual way to carry out this task is by doing a stack walk, provided by functions of the implementations runtime library. Sorry that I can't be more specific than this. Unlike it's reputation of being a very low level language, C is in fact defined in very abstract terms and many of the programming errors found in C programs stem from this misconception.
