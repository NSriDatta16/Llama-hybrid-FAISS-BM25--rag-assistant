[site]: stackoverflow
[post_id]: 3005666
[parent_id]: 2207393
[tags]: 
The best way I found in tackling this problem is to skip DTA's recommendation and do it on my own in the following way: Use Profiler to find the costliest queries in terms of CPU usage (probably blocking queries) and apply indexes to tables based on those queries. If the query execution plan can be changed to decrease the Read, Writes and overall execution time, then first do that. If not, in which case the query is what it is, then apply clustered/non-clustered index combination to best suit. This depends on the nature of the existing table indexes, the bytes total of columns participating in index, etc. Run queries in the SSMS to find the most frequently executing queries and do the same as above. Create a defragmentation schedule in order to either Reorganize or Rebuild indexes depending on how much fragmented they are. I am pretty sure others can suggest good ideas. Doing these gave me good results. I hope someone can use this help. I think DTA does not really make things faster in terms of indexing because you really need to go through what all indexes it is going to create. This is more true for a database that gets hit a lot.
