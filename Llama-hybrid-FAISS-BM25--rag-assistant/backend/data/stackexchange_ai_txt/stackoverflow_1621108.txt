[site]: stackoverflow
[post_id]: 1621108
[parent_id]: 1400198
[tags]: 
Well, since it's ASMX you have the entire ASP.NET runtime stack at your disposal. Step #1 - managing the resource through .config Apply a tag for the resources you want secured. Assuming it's a single ASMX file you can simply do the following in your web.config: Step #2 - authenticating your users You need to decide how you're actually going to authenticate users. There are several ways to do this and several authentication standards you could leverage. You need to pick the approach that's the right fit for you. If you're on an intranet and are using Windows authentication I would highly suggest leveraging that because it's truly the simplest option to get setup. However, if your services are being accessed over the internet then Windows authenticatio is not really an option and you need to choose from a web standard. The simplest of those is Basic Authentication , but you should only use this over SSL since the username/password are not encrypted (only base64 encoded). The next step up from that is Digest authentication which doesn't require SSL because the username/password are sent using an MD5 hash. For the ultimate you can go with SSL v3 where you issue a specific client certificate to each user of your API. Now, which option you select for security dictates what else needs to be done. If you choose Windows security, it's as easy as adding the following element to the element we started with in Step #1: The remainder of the security protocols are going to require a little more work. ASP.NET doesn't provide intrinsic support for Basic, Digest or SSL v3. Technically you can leverage IIS to do this type of authentication for you, but it's always going to map to a Windows user. If that's an option for you, then simply leave the element and configure IIS accordingly. If, however, that is not an option, either because you simply have no control over IIS/ActiveDirectory or you need to authenticate against a custom user database, then that means that you need to hook up a custom HttpModule to provide support for these security protocols. Step #3 - securing the resource The simplest approach to securing the resource is to basically say: "don't let anyone who hasn't successfully authenticated in some way into this resource". This is done using the following authorization configuration: If you wanted to only allow certain users you could change to do the following instead: Another approach is to define roles (groups) and simply lock the resource down to a special role which you put the users who you want to access the resource into. This maps well to Windows authentication because you can just setup a Windows group and let your MIS team manage which users are in that group using ActiveDirectory. However, the feature also works just fine for non-Windows authentication assuming the security implementation you've used exposes roles via its IPrincipal implementation.
