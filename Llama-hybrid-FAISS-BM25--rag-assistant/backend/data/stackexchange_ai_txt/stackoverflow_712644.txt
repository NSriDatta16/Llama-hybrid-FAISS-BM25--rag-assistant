[site]: stackoverflow
[post_id]: 712644
[parent_id]: 712626
[tags]: 
In my experience Inodb is slighly faster for really simple queries, pg for more complex queries. Myisam is probably even faster than Innodb for retrieval, but perhaps slower for indexing/index repair. These mostly varchar fields, are you indexing them with char(n) indexes? Can you normalize some of them? It'll cost you on the rewrite, but may save time on subsequent queries, as your row size will decrease, thus fitting more rows into memory at one time. ON EDIT: OK, so you have two problems, query time against the daily, and updating the history, yes? As to the second: in my experience, mysql myism is bad at re-indexing. On tables the size of your daily (0.5 to 1M records, with rather wide (denormalized flat input) records), I found it was faster to re-write the table than to insert and wait for the re-indexing and attendant disk thrashing. So this might or might not help: create new_table select * from old_table ; copies the tables but no indices. Then insert the new records as normally. Then create the indexes on new table, wait a while. Drop old table, and rename new table to old table. Edit: In response to the fourth comment: I don't know that MyIsam is always that bad. I know in my particular case, I was shocked at how much faster copying the table and then adding the index was. As it happened, I was doing something similar to what you were doing, copying large denormalized flat files into the database, and then renormalizing the data. But that's an anecdote, not data. ;) (I also think I found that overall InnoDb was faster, given that I was doing as much inserting as querying. A very special case of database use.) Note that copying with a select a.*, b.value as foo join ... was also faster than an update a.foo = b.value ... join, which follows, as the update was to an indexed column.
