[site]: stackoverflow
[post_id]: 2626123
[parent_id]: 
[tags]: 
How to calculate order (big O) for more complex algorithms (eg quicksort)

I know there are quite a bunch of questions about big O notation, I have already checked: Plain english explanation of Big O Big O, how do you calculate/approximate it? Big O Notation Homework--Code Fragment Algorithm Analysis? to name a few. I know by "intuition" how to calculate it for n , n^2 , n! and so, however I am completely lost on how to calculate it for algorithms that are log n , n log n , n log log n and so. What I mean is, I know that Quick Sort is n log n (on average).. but, why ? Same thing for merge/comb, etc. Could anybody explain me in a not too math-y way how do you calculate this? The main reason is that Im about to have a big interview and I'm pretty sure they'll ask for this kind of stuff. I have researched for a few days now, and everybody seem to have either an explanation of why bubble sort is n^2 or the unreadable explanation (for me) on Wikipedia
