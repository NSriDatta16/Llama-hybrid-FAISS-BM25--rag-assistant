[site]: stackoverflow
[post_id]: 4418682
[parent_id]: 4418642
[tags]: 
This approach is not good because of server resource usage. In order to get access to say jQuery.js your web server is going to: Determine that jQuery.js actually passes through index.php Pass index.php through the php parser Wait for php to generate a response. Serve that response. Or, you could serve it this: Determine jQuery.js exists in /var/www/mysite/jQuery.js Serve it as the response. Likewise for anything that's "static" i.e. isn't generated from PHP directly. The bigger the number of ifs in the PHP script, the more tests will need be done to find your file. You do not need to pass your static content through some form of url routing; only your dynamic content. For real speed, its better to generate responses ready as well, called caching, particularly if the dynamic content is expensive in terms of cpu cycles to generate. Other caching techniques include leaving frequently accessed database data in memory, which is what memcached does. If you're developing a social network, these things really do matter. Heck, facebook wrote a PHP-to-C++ compiler to save clock cycles. I second the framework recommendation because it really will make code organisation easier and might integrate with a caching-based solution. In terms of PHP frameworks, there are many. Here's a list of many web application frameworks in many languages and from the same page, the PHP ones . Take a look and decide which you like best. That's what I did and I ended up learning Python to use Django.
