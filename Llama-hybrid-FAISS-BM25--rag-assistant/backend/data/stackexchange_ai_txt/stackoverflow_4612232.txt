[site]: stackoverflow
[post_id]: 4612232
[parent_id]: 4611503
[tags]: 
We had exactly the same issue about 6 months ago, but for a different reason. We had about 20 'regular' classes and one giant Jupiter sized class that was doing way, way, way too much and needed to be broken down. We actually need TWO children, in addition to the parent, with both children in a 1-to-1 relationship to the parent. The first attempt (which did work) used the old-school pattern of passing a reference of 'this' in the constructor of each child, and then using a .Parent method to navigate back up. That was a nightmare due to GC issues, and we looked for a better solution in short time. The best solution (which is still used today) was to simply accept a reference of the parent's class type in methods of the children which needed to query the parent. This worked fantastically well, the GC liked it, and everything instantiated and freed right as expected. The code is more manageable, and a lot more organized, and we're now really glad we made the investment in time to do it. So, that would be my recommendation: Parent | +-Child1 | +-Child2 With methods of the Child objects accepting a reference to the parent class only in methods that need it. It's actually a lot like the way that ADO.Net is developed, with independent objects that accept references to each other in methods where they are needed.
