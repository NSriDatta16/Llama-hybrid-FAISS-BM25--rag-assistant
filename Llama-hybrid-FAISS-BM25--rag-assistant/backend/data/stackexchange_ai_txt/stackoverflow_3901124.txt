[site]: stackoverflow
[post_id]: 3901124
[parent_id]: 
[tags]: 
Performance comparison of immutable string concatenation between Java and Python

UPDATES: thanks a lot to Gabe and Glenn for the detailed explanation. The test is wrote not for language comparison benchmark, just for my studying on VM optimization technologies. I did a simple test to understand the performance of string concatenation between Java and Python. The test is target for the default immutable String object/type in both languages. So I don't use StringBuilder/StringBuffer in Java test. The test simply adds strings for 100k times. Java consumes ~32 seconds to finish, while Python only uses ~13 seconds for Unicode string and 0.042 seconds for non Unicode string. I'm a bit surprise about the results. I thought Java should be faster than Python. What optimization technology does Python leverage to achieve better performance? Or String object is designed too heavy in Java? OS: Ubuntu 10.04 x64 JDK: Sun 1.6.0_21 Python: 2.6.5 Java test did use -Xms1024m to minimize GC activities. Java code: public class StringConcateTest { public static void test(int n) { long start = System.currentTimeMillis(); String a = ""; for (int i = 0; i } Python code: import time def f(n): start = time.time() a = u'' #remove u to use non Unicode string for i in xrange(n): a = a + str(i) print len(a), 'time', (time.time() - start)*1000.0 for j in xrange(10): f(1000 * 100)
