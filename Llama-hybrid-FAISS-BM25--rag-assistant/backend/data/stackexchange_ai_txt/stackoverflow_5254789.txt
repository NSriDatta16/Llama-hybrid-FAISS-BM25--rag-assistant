[site]: stackoverflow
[post_id]: 5254789
[parent_id]: 4500681
[tags]: 
One option you have is to directly host your MFC in WPF, or embed the WPF in your MFC app as outlined on the WPF and Win32 Interoperation MSDN article. Specifically, check out the two walkthroughs mentioned at the top of that article. I found embedding WPF in your MFC code much simpler than rehosting your MFC application in WPF. Hosting WPF in MFC is simply a matter of correctly using the HwndSource class (if you're unafraid of using Managed C++ you can create a nice interop layer and avoid the /clr flag in your MFC project altogether.) Hosting your MFC application within a WPF application is trickier if you are trying to rehost an MDI application, but it allows you to host the individual frames anywhere you like in your WPF code (using Prism regions, for example.) In this case, I ended up stripping away all MDI frame management code manually. To do this I created my own CMultiDocTemplate -derived class and override the OpenDocumentFile() virtual method to provide my own Frame-opening behaviour. This method manually created a special CMDIChildWnd -derived frame that I had created that overrode any method that interacted with the MDI parent frame window, and passed them to the underlying CFrameWnd (bypassing the CMDIChildWnd ). First, a helper function object that creates your frame (m_pFrameClass is your special CMDIChildWnd-derived class described above) HWND CreateHostedFrame(HWND parent) CFrameWnd* pFrame = (CFrameWnd*)m_pFrameClass->CreateObject(); CWnd parentWnd; parentWnd.Attach(parent); pFrame->LoadFrame(resourceID, WS_CHILD, &parentWnd, pContext); parentWnd.Detach(); return pFrame->m_hWnd; Then your overridden DocTemplate method (or wherever you create your frames) CHostedMultiDocTemplate::OpenDocumentFile: CDocument* pDocument = CreateNewDocument(); // the following is just for demo purposes. Use your own mechanism m_MyWpfShellOrSomething->PleaseCreateAHostedWindowUsing(&CreateHostedFrame); InitialUpdateFrame(pFrame, pDocument, bMakeVisible); return pDocument; Your CMDIChildWnd -derived class will probably want to override anything that refers to the MDI parent frame (search the MFC CMDIChildWnd source for MDIParent() or something.) Of course the final step is updating your CMyApp::OnInitInstance() method to use your specialised MultiDoc template and child frame instead of the other ones.
