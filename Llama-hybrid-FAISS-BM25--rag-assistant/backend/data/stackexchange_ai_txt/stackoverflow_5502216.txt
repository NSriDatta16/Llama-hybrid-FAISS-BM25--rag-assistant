[site]: stackoverflow
[post_id]: 5502216
[parent_id]: 
[tags]: 
PropertyCopy Generically Change String Values from Null to Empty

I've ran into an issue where code classes outside of my control use strings that are null so when they become referenced for example, "string.Length", causes an error. Rather than write a check for the possible 100 fields on average, with nested classes, I thought maybe I could create something easier. I had an idea... If you've done any research into copying objects PropertyCopy , along with a few others, is an extremely common find. I currently use the class mentioned above. I was wondering if it could be modified to simply go: if stringPropertyValue is null then set stringPropertyValue equal to string.Empty. My understanding is limited. I've been doing research to solve my issue but no real good ideas. Can my idea work? Is there a better way? How would it be done if it could? Update : Based on a response below I have created this class which I am currently going to use. public static void DenullifyStringsToEmpty (this T instance) { //handle properties foreach (var filteredProperties in instance.GetType().GetProperties().Where(p => (p.PropertyType.IsClass || p.PropertyType.IsInterface || p.PropertyType == typeof(string)))) { if (filteredProperties.PropertyType == typeof(string)) { if (filteredProperties.GetValue(instance, null) == null) { filteredProperties.SetValue(instance, string.Empty, null); } } else { filteredProperties.GetValue(instance, null).DenullifyStringsToEmpty(); } } //handle fields foreach (var filteredFields in instance.GetType().GetFields().Where(f => (f.FieldType.IsClass || f.FieldType.IsInterface || f.FieldType == typeof(string)))) { if (filteredFields.FieldType == typeof(string)) { if (filteredFields.GetValue(instance) == null) { filteredFields.SetValue(instance, string.Empty); } } else { filteredFields.GetValue(instance).DenullifyStringsToEmpty(); } } } I know that reflection can be heavy and until we have an issue I think this solution will work great. This is an extension (thanks to the comments below). Thanks for the input.
