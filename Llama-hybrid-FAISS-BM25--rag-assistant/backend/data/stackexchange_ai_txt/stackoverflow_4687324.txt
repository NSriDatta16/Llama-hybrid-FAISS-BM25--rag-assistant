[site]: stackoverflow
[post_id]: 4687324
[parent_id]: 4687310
[tags]: 
"Heap" and "stack" are outmoded, inaccurate and confusing terms relating to storage duration. Objects with "automatic storage duration" are what silly people call "stack objects". They're the ones that you will define inside a function as "local variables". They go out of scope when their enclosing block ends. Objects with "dynamic storage duration" are those that you create on the free store with the aid of the keyword new (or, if you're silly, malloc ), and then destroy whenever you like with the keyword delete (or, if you're silly, free ). There are also objects with "static storage duration" that are subject to all sorts of bizarre rules of initialisation order and things. We tend not to use them in idiomatic C++ as much as we can help it. As for the specific variables in your code example, your comments are all accurate, despite the failure in terminology. Addendum: The terms "heap" and "stack" are outdated, relating to back when the most popular runtime libraries used these data structures to store objects which were dynamically- and automatically-allocated, respectively (statically-allocated objects fit into neither category, incidentally). These days that is not always true, and it's certainly not mandated by the C++ standard, which does not care where things are stored. It only cares about how they are created and destroyed, and about how long they live.
