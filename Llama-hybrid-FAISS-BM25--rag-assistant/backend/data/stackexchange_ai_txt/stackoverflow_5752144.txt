[site]: stackoverflow
[post_id]: 5752144
[parent_id]: 
[tags]: 
Cocoa style: using polymorphism in collections

I have a data model that includes a big list (array) of heterogeneous items. There are only 2-3 different kinds of item, each kind inheriting from a base class. Using classic examples, let's say the base class is Vehicle , and the subclasses are Car , Train , and Plane . I have a larger owning model/controller that wants to operate on this ordered list of Vehicles, and while some of the operations are shared (and are in the base class and overridden in subclasses), many of the operations are specific to only one of the kinds of items. So I end up with a lot of code that looks like this: for (Vehicle * vehicle in vehicles) { if (![vehicle isKindOfClass:[Car class]]) { continue; } Car * car = (Car *)vehicle; // Do stuff only with "car". } So I've got lots of -isKindOfClass: everywhere and lots of casting the base class to the subclass. This all works, of course, but there seems like enough "code smell" to make me think there might be a more elegant way of either writing this code, or designing my object model. Thoughts? Thanks.
