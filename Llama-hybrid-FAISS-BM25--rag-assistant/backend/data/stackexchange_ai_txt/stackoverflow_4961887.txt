[site]: stackoverflow
[post_id]: 4961887
[parent_id]: 4954009
[tags]: 
I don't think this is really OpenGL related, but Objective-C has something called categories, which allow you to add extra methods to an existing class. You can add them to any class you want, whether you have the source code or not. The syntax looks like: @interface classname (categoryName) - (void)extraMethod1; - (void)extraMethod2; @end @implementation classname (categoryName) - (void)extraMethod1 { } - (void)extraMethod2 { } @end And, as I say, you can use that to add methods to any class, including e.g. NSString, NSDictionary and the other Foundation objects. The brackets after the classname in the interface declaration dictate that this is a category, not a full interface definition. Historically there was no way to add extra storage to a class through a category, so you may not declare member variables in categories. Hence there's no {} section. In the modern runtime (on 64bit OS X and iOS), you can add extra storage via @properties, as Apple appear to do in the code you've given. Here Apple are using category methods to create something like private methods â€” in this case methods that everyone in the class knows are there but which aren't declared externally. That's a design decision, to keep the bits that other people are likely to look at neat and to indicate the programmer's intent. What's going on is that: the bits of RetinaTestViewController that Apple want everyone else to know about are declared in the header file the bits that aren't meant to be exposed are declared only in the implementation file A well-designed object should expose a public interface and conform to that interface, while doing whatever is necessary internally and keeping its internals secret. You can read a little more category methods here , here and here (scroll down to number 11).
