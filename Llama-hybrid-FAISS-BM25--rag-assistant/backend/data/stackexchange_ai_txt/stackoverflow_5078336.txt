[site]: stackoverflow
[post_id]: 5078336
[parent_id]: 
[tags]: 
To serialize or to keep a separate table?

This question has risen on many different occasions for me but it's hard to explain without giving a specific example. So here goes: Let's imagine for a while that we are creating a issue tracker database in PHP/MySQL. There is a "tasks" table. Now you need to keep track of people who are associated with a particular task (have commented or what not). These persons will get an email when a task changes. There are two ways to solve this type of situation. One is to create a separate table tasks_participants: CREATE TABLE IF NOT EXISTS `task_participants` ( `task_id` int(10) unsigned NOT NULL, `person_id` int(10) unsigned NOT NULL, UNIQUE KEY `task_id_person_id` (`task_id`,`person_id`) ); And to query this table with SELECT person_id WHERE task_id='XXX' . If there are 5000 tasks and each task has 4 participants in average (the reporter, the subject for whom the task brought benefit, the solver and one commenter) then the task_participants table would be 5000*4 = 20 000 rows. There is also another way: create a field in tasks table and store serialized array (JSON or PHP serialize()) of person_id's. Then there would not be need for this 20 000 rows table. What are your comments, which way would you go?
