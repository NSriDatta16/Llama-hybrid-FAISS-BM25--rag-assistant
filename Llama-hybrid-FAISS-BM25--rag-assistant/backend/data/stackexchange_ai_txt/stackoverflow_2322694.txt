[site]: stackoverflow
[post_id]: 2322694
[parent_id]: 
[tags]: 
Explanation of Text on Threading in "C# 3.0 in a Nutshell"

While reading C# 3.0 in a Nutshell by Joseph and Ben Albahari , I came across the following paragraph (page 673, first paragraph in section titled " Signaling with Wait and Pulse ") "The Monitor class provides another signalling construct via two static methods, Wait and Pulse . The principle is that you write the signalling logic yourself using custom flags and fields (enclosed in lock statements), and then introduce Wait and Pulse commands to mitigate CPU spinning. The advantage of this low-level approach is that with just Wait , Pulse , and the lock statement, you can achieve the functionality of AutoResetEvent , ManualResetEvent , and Semaphore , as well as WaitHandle 's static methods WaitAll and WaitAny . Furthermore, Wait and Pulse can be amenable in situations where all of the wait handles are parsimoniously challenged." My question is, what is the correct interpretation of the last sentence? A situation with a decent/large number of wait handles where WaitOne() is only occasionally called on any particular wait handle. A situation with a decent/large number of wait handles where rarely does more than one thread tend to block on any particular wait handle. Some other interpretation. Would also appreciate illuminating examples of such situations and perhaps how and/or why they are more efficiently handled via Wait and Pulse rather than by other methods. Thank you! Edit: I found the text online here
