[site]: stackoverflow
[post_id]: 3305334
[parent_id]: 3305139
[tags]: 
I like the second proposed solution (the intermediate layer), as it separates the notification from the database work, and could possibly be part of a two-phase commit XA transaction. If the consumers need the database content in addition to the notification, that can be accomplished via MySQL replication. This could also address the coupling question, as the consumer components could have read-only access to their replicated instances. Using a messaging solution would also address any potential bottlenecks in the database-only solution, as it would separate the notification and storage into separate processes. Depending on the language, you have a number of choices for the message distribution. If you're using Java, I'd actually recommend JGroups rather than JMS, as it's somewhat easier to configure. If Java isn't your language of choice, Apache's Active MQ supports a number of languages for interfacing. Apache's Qpid is an AMQP implementation that also supports a number of languages (Java, C++, Python, Ruby, etc.) Other messaging options could include XMPP, STOMP, or RestMS implementations.
