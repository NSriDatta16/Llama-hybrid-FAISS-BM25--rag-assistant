[site]: stackoverflow
[post_id]: 1048270
[parent_id]: 1047758
[tags]: 
Scenario coverage. I don't think you really want to have 100% code coverage. Testing say, simple getters and setters looks like a waste of time. The code always runs in some context, so you may list as many scenarios as you can (depending on the problem complexity sometimes even all of them) and test them. Example: // parses a line from .ini configuration file // e.g. in the form of name=value1,value2 List parseConfig(string setting) { (name, values) = split_string_to_name_and_values(setting, '=') values_list = split_values(values, ',') return values_list } Now, you have many scenarios to test. Some of them: Passing correct value List item Passing null Passing empty string Passing ill-formated parameter Passing string with with leading or ending comma e.g. name=value1, or name=,value2 Running just first test may give you (depending on the code) 100% code coverage. But you haven't considered all the posibilities, so that metric by itself doesn't tell you much.
