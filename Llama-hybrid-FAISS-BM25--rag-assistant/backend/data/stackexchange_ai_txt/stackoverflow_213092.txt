[site]: stackoverflow
[post_id]: 213092
[parent_id]: 194147
[tags]: 
First off - using an ORM will not make your code any easier to test, nor will it necessarily provide any advantages in a Continuous Integration scenerio. In my experience, whilst using an ORM can increase the speed of development, the biggest issues you need to address are: Testing your code Maintaining your code The solutions to these are: Make your code testable (using SOLID principles) Write automated tests for as much of the code as possible Run the automated tests as often as possible Coming to your question, the two objections you list seem more like ignorance than anything else. Not being able to write SELECT queries by hand (which, I presume, is why the copy-paste is needed) seems to indicate that there's a urgent need for some SQL training. There are two reasons why I'd not use an ORM: It is strictly forbidden by the company's policy (in which case I'd go work somewhere else) The project is extremely data intensive and using vendor specific solutions (like BulkInsert) makes more sense. The usual rebuffs about ORMs (NHibernate in particular) are: Speed There is no reason why using an ORM would be any slower than hand coded Data Access. In fact, because of the caching and optimisations built into it, it can be quicker. A good ORM will produce a repeatable set of queries for which you can optimise your schema. A good ORM will also allow efficient retrieval of associated data using various fetching strategies. Complexity With regards to complexity, using an ORM means less code, which generally means less complexity. Many people using hand-written (or code generated) data access find themselves writing their own framework over "low-level" data access libraries (like writing helper methods for ADO.Net). These equate to more complexity, and, worse yet, they're rarely well documented, or well tested. If you are looking specifically at NHibernate, then tools like Fluent NHibernate and Linq To NHibernate also soften the learning curve. The thing that gets me about the whole ORM debate is that the same people who claim that using an ORM will be too hard/slow/whatever are the very same people who are more than happy using Linq To Sql or Typed Datasets. Whilst the Linq To Sql is a big step in the right direction, it's still light years behind where some of the open source ORMs are. However, the frameworks for both Typed Datasets and for Linq To Sql is still hugely complex, and using them to go too far of the (Table=Class) + (basic CRUD) is stupidly difficult. My advice is that if, at the end of the day, you can't get an ORM, then make sure that your data access is separated from the rest of the code, and that you you follow the Gang Of Four's advice of coding to an interface. Also, get a Dependancy Injection framework to do the wiring up. (How's that for a rant?)
