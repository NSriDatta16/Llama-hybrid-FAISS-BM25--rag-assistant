[site]: stackoverflow
[post_id]: 4255335
[parent_id]: 4254872
[tags]: 
First some code... Using JOIN: SELECT table_product.* --'Explicit table calls just for organisation sake' , table_period.* , table_special_offer.* FROM table_product INNER JOIN table_period ON table_product.ID = table_period.FK_ID_product INNER JOIN table_special_offer ON table_period.ID = table_special_offer.FK_ID_period WHERE tp.label like 'gun%'" Using IN : SELECT * FROM table_special_offer WHERE FK_ID_period IN ( SELECT FK_ID_period FROM table_period WHERE FK_ID_product IN ( SELECT FK_ID_product FROM table_product WHERE label like '%gun' ) AS ProductSub ) AS PeriodSub Depending on how well your tables get indexed both can be used. Inner Joins as the others have suggested are definitely efficient at doing your query and returning all data for the 3 tables. If you are only needing To use the ID's from table_product and table_period Then using the nested "IN" statements can be good for adapting search criteria on indexed tables (Using IN can be ok if the criteria used are integers like I assume your FK_ID_product is). An important thing to remember is every database and relational table setup is going to act differently, you wont have the same optimised results in one db to another. Try ALL the possibilities at hand and use the one that is best for you. The query analyser can be incredibly useful in times like these when you need to check performance. I had this situation when we were trying to join up customer accounts to their appropriate addresses via an ID join and a linked table based condition (we had another table which showed customers with certain equipment which we had to do a string search on.) Strangely enough it was quicker for us to use both methods in the one query: --The query with the WHERE Desc LIKE '%Equipment%' was "joined" to the client table using the IN clause and then this was joined onto the addresses table: SELECT Address.* , Customers_Filtered.* FROM Address AS Address INNER JOIN (SELECT Customers.* FROM Customers WHERE ID IN (SELECT CustomerID FROM Equipment WHERE Desc LIKE '%Equipment search here%') AS Equipment ) AS Customers_Filtered ON Address.CustomerID = Customers_Filtered.ID This style of query (I apologise if my syntax isn't exactly correct) ended up being more efficient and easier to organise after the overall query got more complicated. Hope this has helped - Follow @AdaTheDev 's article link, definitely a good resource.
