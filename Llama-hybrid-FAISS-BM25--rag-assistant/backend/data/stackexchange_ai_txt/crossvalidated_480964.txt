[site]: crossvalidated
[post_id]: 480964
[parent_id]: 480933
[tags]: 
Just to state the obvious, an RNN with $N$ units outputs $N$ values for each step. (If you're using a model with a hidden state in addition to an output, such as lstm , then there are $N$ hidden states as well.) If you have two targets, one for temperature and one for humidity, you could use 1 or more dense layers to go from $N$ to 2 units, and arbitrarily assign one of those units to predict temperature and the other humidity. Alternatively, you could do something like partition the RNN outputs. You could use an RNN with 2 units, and arbitrarily assign one of those units to predict temperature and the other humidity. (Of course, this "partition" strategy is actually a special case of a dense strategy using fixed binary weights, since the "partition" is the same as just using a binary mask.) My assumption is that the RNN-then-dense strategy would work better, because restricting the RNN to just 2 units seems overly restrictive.
