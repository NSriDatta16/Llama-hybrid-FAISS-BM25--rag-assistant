[site]: stackoverflow
[post_id]: 1877430
[parent_id]: 1869628
[tags]: 
Thanks to Manu's suggestion to just read the file as XML, I hacked together this solution . (It only works in the current form for properties saved as strings, such as the Text property of a TextBox. It won't work, for instance, if you persist the Value property of a NumericUpDown control.) It works by using Export with a path to the file to save, which produces a file like the following: testfpga test Then you Import the file and all of the settings are changed in the app (don't forget to .Save() at some point). If something goes wrong, the settings will revert back. using System; using System.Configuration; using System.IO; using System.Linq; using System.Xml.Linq; using System.Xml.XPath; using AedUtils; namespace HawkConfigGUI { public static class SettingsIO { private static NLog.Logger _logger = NLog.LogManager.GetCurrentClassLogger(); internal static void Import(string settingsFilePath) { if (!File.Exists(settingsFilePath)) { throw new FileNotFoundException(); } var appSettings = Properties.Settings.Default; try { // Open settings file as XML var import = XDocument.Load(settingsFilePath); // Get the elements var settings = import.XPathSelectElements("//setting"); foreach (var setting in settings) { string name = setting.Attribute("name").Value; string value = setting.XPathSelectElement("value").FirstNode.ToString(); try { appSettings[name] = value; // throws SettingsPropertyNotFoundException } catch (SettingsPropertyNotFoundException spnfe) { _logger.WarnException("An imported setting ({0}) did not match an existing setting.".FormatString(name), spnfe); } catch (SettingsPropertyWrongTypeException typeException) { _logger.WarnException(string.Empty, typeException); } } } catch (Exception exc) { _logger.ErrorException("Could not import settings.", exc); appSettings.Reload(); // from last set saved, not defaults } } internal static void Export(string settingsFilePath) { var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.PerUserRoamingAndLocal); config.SaveAs(settingsFilePath); } } }
