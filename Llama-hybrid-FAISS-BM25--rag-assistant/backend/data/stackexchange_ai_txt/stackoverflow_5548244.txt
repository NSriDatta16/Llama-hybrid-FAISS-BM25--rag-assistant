[site]: stackoverflow
[post_id]: 5548244
[parent_id]: 5547714
[tags]: 
How is the unit testing supposed to work in this condition ? Generally, you should split your unittests mentally in two parts: one part of your code is testable without the database, so you can stub or mock the methods that do the database access the other part of your tests needs to work with the database, since it tests if the ORM is used correctly. Do I need to create a separate database This depends on your needs. Rails apps generally have testing/development/production "environments" - database, configuration, storage directories. Testing is for running unit tests, dev for developing things and production for running the live server. While developing, you run against the dev configuration and thus your development database. For unit tests, the testing env is used which has the benefit that i.e. users in the database are not deleted or broken. I like that concept; in my phpunit tests I often do have a switch in the bootstrap that changes which configuration file is loaded. Just remember that your development database often contains more data than a single unit test needs, and you probably hand-crafted that data and do not want to lose. Also, another database does not cost money. Should I clean the new database each after each test? I mostly clean the tables only that will be used in the test. Cleaning your database makes sure you don't get side-effects from previous tests.
