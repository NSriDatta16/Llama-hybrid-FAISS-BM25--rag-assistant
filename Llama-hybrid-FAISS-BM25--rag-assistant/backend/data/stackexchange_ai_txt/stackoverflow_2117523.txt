[site]: stackoverflow
[post_id]: 2117523
[parent_id]: 105034
[tags]: 
[Edited 2023-03-05 to reflect latest best-practices for producing RFC4122-compliant UUIDs] crypto.randomUUID() is now standard on all modern browsers and JS runtimes. However, because new browser APIs are restricted to secure contexts , this method is only available to pages served locally ( localhost or 127.0.0.1 ) or over HTTPS. For readers interested in other UUID versions, generating UUIDs on legacy platforms or in non-secure contexts, there is the uuid module . It is well-tested and supported. Failing the above, there is this method (based on the original answer to this question): function uuidv4() { return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, c => (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16) ); } console.log(uuidv4()); Note: The use of any UUID generator that relies on Math.random() is strongly discouraged (including snippets featured in previous versions of this answer) for reasons best explained here . TL;DR: solutions based on Math.random() do not provide good uniqueness guarantees.
