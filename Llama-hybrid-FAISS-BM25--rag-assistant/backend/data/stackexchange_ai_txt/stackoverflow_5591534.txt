[site]: stackoverflow
[post_id]: 5591534
[parent_id]: 5552173
[tags]: 
Since nobody had asked I decided to answer my question myself. The main problem was wrong understanding of AJAX call. If you want to populate a tree panel from Spring MVC Controller you have to implement two methods: the first returns a view where the tree panel is located, the second returns a data which the tree panel is populated with. Let's take a look at the example: First of all, I use Tiles 2 in the project. So in a file with tiles (templates.xml) I added a following tile: The Controller which on charge of processing requests on an url http:// / /tree has two methods: This method returns jsp view: @RequestMapping(value = "/tree") public ModelAndView getTreeView() { return new ModelAndView("/tree"); } Next method returns json data: @RequestMapping(value = "/tree/data", method=RequestMethod.POST) public @ResponseBody List > getJsonTreeInfo() { List treeList = new ArrayList >(); List list = new ArrayList (); list = restTemplate.getForObject("http://localhost:8084/ /restService/list", list.getClass()); for (FooImpl foo : list) { String description = restTemplate.getForObject("http://localhost:8084/ /restService/title/" + foo.getId() + "/content/11", String.class); //create a child node that is a leaf Map child = new HashMap(); child.put("id", foo.getId()); child.put("text", description); child.put("leaf", Boolean.TRUE); treeList.add(child); } return treeList; } Could be unclear how this list becomes json array. I have a message converter which is doing all the job of converting. JSP side: if (Ext.BLANK_IMAGE_URL.substr(0,5) != 'data'){ Ext.BLANK_IMAGE_URL = '/ext-3.3.1/resources/images/default/s.gif'; } // application main entry point Ext.onReady(function() { // shorthand var Tree = Ext.tree; var tree = new Tree.TreePanel({ useArrows: true, autoScroll: true, animate: true, enableDD: true, containerScroll: true, border: false, // auto create TreeLoader dataUrl: 'tree/data', root: { nodeType: 'async', text: 'List', draggable: false, id: 'src' } }); // render the tree tree.render('tree-div'); tree.getRootNode().expand(); }); This line dataUrl: 'tree/data' sends POST request to the second contoller's method. It returns the json array. Finally, the tree is popullated with data :) Everyone is happy :) I hope it helps someone because I spent a lot of time to come to this solution. Enjoy your job :)
