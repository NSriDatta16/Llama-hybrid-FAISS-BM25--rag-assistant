[site]: stackoverflow
[post_id]: 814124
[parent_id]: 811074
[tags]: 
I think it's tough to be a computer educator these days. I am. We face an increasingly steep uphill battle. Our students are incredibly sophisticated users and it takes a lot to impress them. They have so many tools accessible to them that do amazing things. A simple calculator in 10 lines of code? Why? I've got a TI-86 for that. A script that applies special effects to an image? That's what Photoshop is for. And Photoshop blows away anything you can do in 10 lines. How about ripping a CD and converting the file to MP3? Uhh, I already have 50,000 songs I got from BitTorrent. They're already in MP3 format. I play them on my iPhone. Who buys CDs anyway? To introduce savvy users to programming, you're going to have to find something that's: a) applicable to something they find interesting and cool, and b) does something they can't already do. Assume your students already have access to the most expensive software. Many of them do have the full version of Adobe CS5.5 (retail price: $2,600; actual price: free) and can easily get any application that would normally break your department's budget. But the vast majority of them have no idea how any of this "computer stuff" actually works. They are an incredibly creative bunch: they like to create things. They just want to be able to do or make something that their friends can't. They want something to brag about. Here are some things that I've found to resonate with my students: HTML and CSS. From those they learn how MySpace themes work and can customize them. Mashups. They've all seen them, but don't know how to create them. Check out Yahoo! Pipes . There are lots of teachable moments, such as RSS, XML, text filtering, mapping, and visualization. The completed mashup widgets can be embedded in web pages. Artwork. Look at Context-Free Art . Recursion and randomization are key to making beautiful pictures. Storytelling. With an easy-to-use 3D programming environment like Alice , it's easy to create high-quality, engaging stories using nothing more than drag-and-drop. None of these involve any programming in the traditional sense. But they do leverage powerful libraries. I think of them as a different kind of programming.
