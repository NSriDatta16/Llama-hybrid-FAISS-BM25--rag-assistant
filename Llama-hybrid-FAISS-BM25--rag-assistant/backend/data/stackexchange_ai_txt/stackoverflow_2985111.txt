[site]: stackoverflow
[post_id]: 2985111
[parent_id]: 2984900
[tags]: 
First of all, you should separate conceptually things that have to do with graphical representation and animation from the underlying logic of the game. My answer to this question is probably relevant to your situation. In backgammon and other board games, the pieces are passive and have no state except position, and should be very simple. In chess for example, it might be appropriate to put the validation code (checking whether a move is valid) in the various piece classes (king, pawn...). The logic in backgammon is much simpler, so probably could be done in one central method. My first take would be: a game manager object is keeping track of the movement as the user drags a piece around. When the piece enters a particular triangle, the manager calls a method (on itself) to check whether the move is valid and display a red or green frame for example. When the user releases the piece on a valid triangle, the manager tells the board to update itself. The board object might not have to be more than an array. Note that there is constant interaction between the logic code and the graphical code here. When a piece is being dragged, you have to graphically check whether it's inside a triangle, or an area surrounding the triangle. Then you have to find out which object (or merely index into an array) in the game logic this corresponds to in order to do the validation. It's great to do a relatively simple project like this to learn how to slice up the code and how not to mix logic with representation.
