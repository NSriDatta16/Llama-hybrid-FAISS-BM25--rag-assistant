[site]: crossvalidated
[post_id]: 71643
[parent_id]: 63003
[tags]: 
In the case of a stochastic optimization such as this, you really should have an objective function that weights risk. Ideally, this would be a utility function, which can be converted to an expected utility when there's a probability distribution on reward and used instead. (Note this assumes that the utilities of items are independent of each other, and of whether the other items are included in your final selection or not.) If you simply replace: Maximize: $\sum _{j=1}^{N}\sum _{j=1}^{\left | G_{i} \right |}p_{ij}x_{ij}$ with maximizing the expected return: Maximize: $\text{E}\sum _{j=1}^{N}\sum _{j=1}^{\left | G_{i} \right |}p_{ij}x_{ij} = \sum _{j=1}^{N}\sum _{j=1}^{\left | G_{i} \right |}\text{E}(p_{ij})x_{ij}$ you'll get an objective function where you are maximizing the expected return given the constraints. This requires nothing more than substituting $\text{E}p_{ij}$ for $p_{ij}$ in your objective function - and, from an estimation perspective, all you would need to do is substitute the predicted values of the $p_{ij}$ in the objective function. Grouping by risk (however measured) is irrelevant with this objective, unless for some reason it improves the estimation of the $p_{ij}$. If, on the other hand, you can form a utility function $U(p)$, then the expected maximum utility function becomes: Maximize: $\text{E}U(\sum _{j=1}^{N}\sum _{j=1}^{\left | G_{i} \right |}p_{ij}x_{ij}) = \sum _{j=1}^{N}\sum _{j=1}^{\left | G_{i} \right |}\text{E}U(p_{ij})x_{ij}$ (assuming, once again, a separable utility function) and the objective of your statistical analysis is to find a probability distribution (e.g., a posterior probability distribution) of the $p_{ij}$ that you can use to form $\text{E}U(p_ij)$. (See, for example, Savage , DeGroot , or Raiffa and Schlaifer on the very strong links between Bayesian statistics and utility theory.) You would then substitute $\text{E}U(p_{ij})$ into your objective function and solve just as if it were a deterministic problem - which it is, since you're maximizing an expected value and all the randomness is hidden inside the "expected value" part.
