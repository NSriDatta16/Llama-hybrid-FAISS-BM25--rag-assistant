[site]: stackoverflow
[post_id]: 1055353
[parent_id]: 1055243
[tags]: 
We've established that the standard description of hash table lookups being O(1) refers to the average-case expected time, not the strict worst-case performance. For a hash table resolving collisions with chaining (like Java's hashmap) this is technically O(1+α) with a good hash function , where α is the table's load factor. Still constant as long as the number of objects you're storing is no more than a constant factor larger than the table size. It's also been explained that strictly speaking it's possible to construct input that requires O( n ) lookups for any deterministic hash function. But it's also interesting to consider the worst-case expected time, which is different than average search time. Using chaining this is O(1 + the length of the longest chain), for example Θ(log n / log log n ) when α=1. If you're interested in theoretical ways to achieve constant time expected worst-case lookups, you can read about dynamic perfect hashing which resolves collisions recursively with another hash table!
