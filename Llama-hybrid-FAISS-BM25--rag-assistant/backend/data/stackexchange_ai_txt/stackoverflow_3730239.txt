[site]: stackoverflow
[post_id]: 3730239
[parent_id]: 
[tags]: 
Efficient HashMap retrieval with key composite key (build from 2 enums)

I have a 2 enum values representing a mapping to object which I'm (currently) modeling with a HashMap with the 2 enums values are used as key and the object is the value. This is inefficient because what I'm doing is creating a new CompositeKey(Enum1 enum1, Enum2 enum2) for each combination of the Enum1.values() x Enum2.values(). I would like to skip the new CompositeKey() issue. The solution I'm currently think of is Calculation a number representations of from the 2 enums, something like int numericKey = enum1.ordinal() * 0xFFFF + enum2.ordinal(); but then when I'll do map.get(numricKey) I will still be auto boxing to Integer - hence creation new instances. A perfect solution (IMO) would be Map implementation (doesn't have to be generic...) but I don't think such existing for java. Another option is probably mapping = new Object[Enum1.values().length][Enum2.values().length] which I will then do lookup with Object = mapping[enum1.ordinal()][enum2.ordinal()] but that seems a bit too "C'ish". Anyways, runtime performance is the most important aspect here. Comments are welcome. Thanks, Maxim.
