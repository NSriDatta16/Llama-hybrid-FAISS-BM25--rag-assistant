[site]: stackoverflow
[post_id]: 1545130
[parent_id]: 1545117
[tags]: 
The best way is only ever the best way for you (or me); and depends entirely on the requirements of the person who owns/runs the site. I'd suggest that placing all sensitive information and logic outside of the web-root, but that's only because of security. Otherwise, it doesn't matter so long as it makes sense to you where everything is. If you update your question with your requirements, then we can give you some useful answers. Edited In response to the following update: The site is fairly simple, nothing extravagant. As of now, I have a folder of classes, a folder of functions, a folder of forms, a folder of templates (with css), an includes folder with a configuration file, an uploads folder, and a captcha folder with fonts and stuff for captcha images. Everything is in public accessible folders, but I am running checks to prevent users from accessing private data. I'd -very, very strongly- suggest moving those items for which you're "checking to prevent users accessing private data" outside of the web-root. This is for -at least- two reasons, but my favourites are: Why make work if you don't have to? (Work smart, not hard) Your code , and mine 1 , sucks , and has bugs; why expose yourself (and your users) to unnecessary risks? If you don't want the public to access data don't put it somewhere they can access . To (severely) paraphrase Crowley : why put restricted information where people can get to it? For the most part, I like your design, though. And if it works for you then my whining about where you store, and control access to, is irrelevant. Your data and its model is entirely down to your tastes and use-case. If it ain't broke, don't fix it. But be as prepared as possible for it to break, because it -very probably- will: users are invaluable, but they're a hazard too. 1: I would've linked to further articles here, but I wasn't sure about nesting html in SO answers. And I didn't want to mess with the formatting/markdown too much. But you get the point, we make crappy software with bugs, so any checks are likely to be fragile. So why put yourself through that?
