[site]: stackoverflow
[post_id]: 4798616
[parent_id]: 4797323
[tags]: 
I can think of three applications: The first is for denormalization. Tradeoffs include: You can't easily update or process the elements individually. But it's easy and quick to fetch all of them at once. It also saves a lot of space. The second, slightly related, is that you use arrays not for storage but for some intermediate processing. For example, if you want to process data in batches in a non-SQL-ish language that doesn't handle proper sets easily. The third is for storing an ordered list of data. I have come across a few applications like that, but it's hard to put a finger on it. Of course you can also represent that in a table with an extra column for the position, but sometimes this doesn't make much sense because you don't need to access the individual pieces separately in the database. In some cases, this is just a list that the client application wants to store and retrieve later. But your overall sense is right. If you don't know better, your first instinct should probably be not to use arrays.
