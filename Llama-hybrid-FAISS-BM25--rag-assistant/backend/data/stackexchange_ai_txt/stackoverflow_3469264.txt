[site]: stackoverflow
[post_id]: 3469264
[parent_id]: 3468958
[tags]: 
No. If the pointer refers to a valid object, and the conversion is valid, then the result will also refer to a valid object, so it won't be null. If either is invalid, then the code is incorrect and the result is undefined. So the only way for valid usage to give a null result is to start with null. In the specific case of converting between object pointers and void pointers, the standard has this to say (5.2.9/10): A value of type "pointer to object" converted to "pointer to void " and back to the original pointer type will have its original value. and this (4.10/3) The result of converting a "pointer to T" to a "pointer to void " points to the start of the storage location where the object of type T resides so the original and final object pointers will be the same, and the void pointer will be null if and only if the object pointers are.
