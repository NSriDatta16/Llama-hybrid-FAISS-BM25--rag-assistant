[site]: stackoverflow
[post_id]: 4238868
[parent_id]: 
[tags]: 
How can I store generic types in a cache so as to avoid unchecked casts on retrieval?

Have to erase some of the details of this, but basically I'm trying to cache the result of an expensive operation which returns a collection of objects, but the types of these individual objects are not known at compile-time (only a base class). public class SomeClass { private static final Map > theCache = new HashMap >(); public Collection theMethod(Class theClass, int index) { if (theCache.containsKey(index)) { return (Collection ) theCache.get(index); } else { Collection result = someExpensiveOperation(theClass, index); theCache.put(index, result); return result; } } // ... } Here the cache retrieval is an unchecked cast because the code is just taking it on trust that the class argument passed into the method by the caller is compatible (should be identical) with the one passed by the earlier invocation which created the object in the cache in the first place. Is there some way or some design pattern to cache the actual class together with the object itself, so that this unchecked cast can be avoided?
