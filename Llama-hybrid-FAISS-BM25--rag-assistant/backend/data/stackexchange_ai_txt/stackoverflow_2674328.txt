[site]: stackoverflow
[post_id]: 2674328
[parent_id]: 2674210
[tags]: 
Update (8 years later) There are multiple ways to send data over the network. It usually involves some form of serialization on one end and deserialization on the other. Although, my original answer would work, I think gRPC would be a better solution as it allows the client and the server to be written in different languages. What is more, it offers streaming capabilities and a lot of community plugins (for metrics, tracing, logging etc.) Whenever possible, try not to re-invent the wheel... Original Answer have you considered using Windows Communication Foundation services? WCF gives you extensible API which supports the most common protocols out of the box. And what is more WCF has built in serialization/deserialization. If you do don't want to use WCF then you can use Binary Serialization . This is a sample usage of the binary serialization: private Stream SerializeMultipleObjects() { // Initialize a storage medium to hold the serialized object Stream stream = new MemoryStream(); // Serialize an object into the storage medium referenced by 'stream' object. BinaryFormatter formatter = new BinaryFormatter(); // Serialize multiple objects into the stream formatter.Serialize( stream, obOrders ); formatter.Serialize( stream, obProducts ); formatter.Serialize( stream, obCustomers ); // Return a stream with multiple objects return stream; } private void DeSerializeMultipleObject(Stream stream) { // Construct a binary formatter BinaryFormatter formatter = new BinaryFormatter(); // Deserialize the stream into object Orders obOrders = (Orders)formatter.Deserialize( stream ); Products obProducts = (Products)formatter.Deserialize( stream ); Customers obCustomers = (Customer)formatter.Deserialize( stream ); } Here is the entire article about binary serialization . -Pavel
