[site]: crossvalidated
[post_id]: 17456
[parent_id]: 17436
[tags]: 
If you're worrying about memory I guess you're either working with embedded hardware or expecting to have a big model. I'm going to guess that it's the latter and that you have a high dimensional text or bioinformatics classification problem of some sort. If so you should ponder Mallet's Java implementation, since that plugs into their relevant logistic regression (a.k.a. maxent) models most easily. L-BFGS as a standalone algorithm is available in Java, Python, C and fortran implementations, handily linked from the L-BFGS wikipedia page . The Python (SciPy) version will presumably be of most interest to you. Applying this to a logistic regression models is relatively straightforward, except perhaps for the part where you choose a regulariser. Full disclosure: I do not use SciPy. In logistic regression applications fancy regularisation and a limited-memory optimisation process, while conceptually separate, are often needed together due to the nature of the problem. Hence there's some reason to choose a library that bundles the two together in a sensible manner.
