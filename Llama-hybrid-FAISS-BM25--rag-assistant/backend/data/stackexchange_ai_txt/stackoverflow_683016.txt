[site]: stackoverflow
[post_id]: 683016
[parent_id]: 
[tags]: 
Troubleshooting a web service's speed

C# .NET 2.0 if that turns out to be applicable. I'm going to start to get to the bottom of why a web service we have is acting slow - this web service jumps over a proxy, into another domain, queries a stored procedure for some data, and then returns a int/string/dataset, depending on what I asked for. I just wrote a console app that queries it repeatedly in the same fashion so that I can gather some statistics to start out with. Keep-alive is turned off for each request, for some legacy reason nobody documented, so there's an immediate smell. When looping through the same request multiple times, I noticed some strange behavior. Here's my output that reflects how long each iteration took to make the query and return data. Beginning run #1...completed in 4859.3128 ms Beginning run #2...completed in 3812.4512 ms Beginning run #3...completed in 3828.076 ms Beginning run #4...completed in 3828.076 ms Beginning run #5...completed in 546.868 ms Beginning run #6...completed in 3828.076 ms Beginning run #7...completed in 546.868 ms Beginning run #8...completed in 3828.076 ms Beginning run #9...completed in 3828.076 ms Beginning run #10...completed in 578.1176 ms Beginning run #11...completed in 3796.8264 ms Beginning run #12...completed in 3828.076 ms Beginning run #13...completed in 3828.076 ms Beginning run #14...completed in 3828.076 ms Beginning run #15...completed in 3828.076 ms Beginning run #16...completed in 3828.076 ms Beginning run #17...completed in 546.868 ms Beginning run #18...completed in 3828.076 ms Beginning run #19...completed in 3828.076 ms Beginning run #20...completed in 546.868 ms Total time: 61165 ms Average time per request: 3058 ms I find it odd that there are multiple repeated values, down to a very small level. Is there some bottleneck that would cause it to be returned in the same amount of time repeatedly? ...hopefully my code for figuring out and displaying the millisecond duration isn't off, but the TimeSpan object tracking it is local to each loop, so I don't think it's that. EDIT: Jon asked for the timing code, so here ya go (variable names changed to protect the proprietary, so might have fat-fingered something that would make this not compile)... int totalRunTime = 0; for (int i = 0; i
