[site]: stackoverflow
[post_id]: 1735077
[parent_id]: 1734917
[tags]: 
For me there are two reasons to learn a new language need and interest. In the first case I need to do something, usually for work, like "automate a command line tool and possible add a gui", or "convert xml data into a pretty web page." In these cases I make a decision based on the most practical approach. How much better/quicker/easier is the new language than my current ones? For example automating a command tool is much easer in python than C++, so learning python makes sense, esp since a gui might become a requirement later on. Am I likely to use the language in the future? For example is my xml data a small and well defined that parsing it with a DOM in C++ is easier than learning XSLT or is this just the tip of the iceberg for transforming xml? Am I placing a fair burden on other developers in my team? Is it reasonable that everyone know this language to maintain my new code? I should only add a new language to an organisation if it makes strategic sense. Am I choosing this language to fleshing out my CV, if this is the case I should not choose it for real work. In the second case, it comes down to what interests me. Maybe I think that it might be a useful language for our organisation in the future and I want to learn more about it. Maybe everyone is going on about it and I want to see what all the hype is about, like Ruby-on-Rails, can I learn some new techniques from this that I can apply to my existing langauges? Eg convention over configuration. Sometimes what interests me is a project an not the language or technology and then I might choose the language for appropriate for the new project, as if it is for work. Sometimes the I am intersted in a new paradim, like functional programming so I look for the most interesting language to explore this in. Sometimes it just looks like fun and it beats watching tv.
