[site]: stackoverflow
[post_id]: 319608
[parent_id]: 319395
[tags]: 
Note that your code, int* myName[5]; declares an array containing 5 values, each of which is a "pointer to int", which is what you asked. However this being C++, that's all it does. As a Python scripter, that might cause you some surprises. It does not give any of those 5 pointers sensible values, and it does not create any integers for them to point to. If you put it in a function body, then it creates the array on the stack. This means that the array will cease to exist when the current scope ends (which, to put it simply, means when you get to the enclosing close-curly, so for example return does it). So in particular, the following code is bad: int **myFunction() { int *myArray[5]; return myArray; } // It might compile, but the function returns a pointer to something that no longer exists by the time the caller sees it. This leads to what we call "undefined behaviour". If you want the array to exist outside the function it's created in, you could create one on the heap each time your function is called, and return a pointer, like this: int **myFunction() { int **myArray = new int[5]; return myArray; } The function returns a different array each time it's called. When the caller has finished with it, it should destroy the array, like this: delete[] myArray; otherwise it will never be freed, and will sit around using up memory forever (or when your program exits on most OSes). Alternatively, you can use the keyword "static" to create an array with "global storage duration" (meaning that it exists as long as the program is running, but there's only one of it rather than a new one each time). That means the function returns the same array each time it's called. The caller could store some pointers in it, forget about it, call the function again, and see the same pointers still there: int **myFunction() { static int *myArray[5]; return myArray; } Note how similar this code is to the very bad code from earlier. Finally, if you just want to create an array of integers, not an array of pointers to integers, you can do this: int myArray[5] = { 1, 2, 3, 4, 5}; That actually creates 5 integers (meaning, it assigns space which can store the integer values themselves. That's different from the array of pointers, which stores the addresses of space used to store integer values). It also stores the specified values in that space: myArray[0] is now 1, myArray[1] is 2, etc.
