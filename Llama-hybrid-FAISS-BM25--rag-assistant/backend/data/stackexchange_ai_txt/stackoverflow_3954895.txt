[site]: stackoverflow
[post_id]: 3954895
[parent_id]: 
[tags]: 
WM_PAINT not being called after window is created

I've been playing around with the Windows api for uni, but I cant get the window messages to call WM_PAINT after the inital creation. It calls it when the window is created but not after. All Other messages get called! Just cant get the WM_PAINT to be called. This is part of a game lib we have to make using the Windows api, (the goal is to learn abit of the windows api, rather than the intricacies of making game libs). From what I gather the UpdateWindow(handle) command calls inititates the WM_PAINT message, but no matter where I put this command (currently in the game loop) I cant get it to call the message. There's a lot of code, so I've trimmed it a little. I know I have multiple WM_PAINT cases, they are a result of trying to make sure its getting through. Window Creation HWND hwnd; hwnd = CreateWindowEx(WS_EX_APPWINDOW | WS_EX_WINDOWEDGE, L"FirstWindowClass", L"Mootlib", WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX, CW_USEDEFAULT, CW_USEDEFAULT, m_screenWidth, m_screenHeight, NULL, NULL, WindowsUtilities::windowInstance(), NULL); Register the Window WNDCLASSEX wcex; wcex.cbSize = sizeof (wcex); wcex.style = CS_HREDRAW | CS_VREDRAW; wcex.lpfnWndProc = windowProc; wcex.cbClsExtra = 0; wcex.cbWndExtra = 0; wcex.hInstance = WindowsUtilities::windowInstance(); wcex.hIcon = 0; wcex.hCursor = LoadCursor (NULL, IDC_ARROW); wcex.hbrBackground = (HBRUSH) (COLOR_WINDOW+1); wcex.lpszMenuName = NULL; wcex.lpszClassName = L"FirstWindowClass"; wcex.hIconSm = 0; RegisterClassEx (&wcex); Winproc LRESULT CALLBACK windowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) { LONG_PTR lptr = GetWindowLongPtr(hwnd, GWLP_USERDATA); switch(message) { case(WM_PAINT): int f = 3; } if (lptr) { Window* obj = reinterpret_cast (lptr); return obj->handleWindowsMessages(message, wParam, lParam); } else return DefWindowProc(hwnd, message, wParam, lParam); } Internal command LRESULT Window::handleWindowsMessages(UINT message, WPARAM wParam, LPARAM lParam) { std::wstring szHello = L"Hello, world!"; PAINTSTRUCT ps; HDC hdc; switch(message) { case(WM_PAINT): hdc = BeginPaint(m_handle, &ps); TextOut(hdc, 0, 0, L"Hello, Windows!", 15); EndPaint(m_handle, &ps); return 0; case(WM_CLOSE): quitGame(); return 0; // Move Me!!! case(WM_KEYDOWN): case(WM_LBUTTONDOWN): case(WM_RBUTTONDOWN): inputManager().addButtonEvent(reinterpret_cast (wParam), BUTTON_DOWN); return 0; // Move Me!!! case(WM_KEYUP): case(WM_LBUTTONUP): case(WM_RBUTTONUP): inputManager().addButtonEvent(reinterpret_cast (wParam), BUTTON_UP); return 0; } return DefWindowProc(handle(), message, wParam, lParam); } Game Loop while(IsWindowVisible(handle())) { UpdateWindow(handle()); WindowsUtilities::processMessages(); draw(); update(); inputManager().update(); inputManager().clearButtonUpEvents(); // this should be in the input update() } Thanks.
