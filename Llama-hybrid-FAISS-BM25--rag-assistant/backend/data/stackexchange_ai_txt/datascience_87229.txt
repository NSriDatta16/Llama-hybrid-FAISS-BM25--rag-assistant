[site]: datascience
[post_id]: 87229
[parent_id]: 68087
[tags]: 
Scikit-Learn, XGBoost and TensorFlow don't work with Koalas DataFrames directly. But you can use them with MlFlow. Here is an example of ML model where inference was done with Koalas: from mlflow.tracking import MlflowClient, set_tracking_uri import mlflow.sklearn from tempfile import mkdtemp d = mkdtemp("koalas_mlflow") set_tracking_uri("file:%s"%d) client = MlflowClient() exp = mlflow.create_experiment("my_experiment") mlflow.set_experiment("my_experiment") from sklearn.linear_model import LinearRegression train = pd.DataFrame({"x1": np.arange(8), "x2": np.arange(8)**2, "y": np.log(2 + np.arange(8))}) train_x = train[["x1", "x2"]] train_y = train[["y"]] with mlflow.start_run(): lr = LinearRegression() lr.fit(train_x, train_y) mlflow.sklearn.log_model(lr, "model") from databricks.koalas.mlflow import load_model run_info = client.list_run_infos(exp)[-1] model = load_model("runs:/{run_id}/model".format(run_id=run_info.run_uuid)) prediction_df = ks.DataFrame({"x1": [2.0], "x2": [4.0]}) prediction_df["prediction"] = model.predict(prediction_df) prediction_df Probably you can do the same with TensorFlow as well. Another option is to use Spark ML with Koalas by converting Koalas dataframes into Spark dataframes. Or you can use Pandas UDFs instead of Spark ML. In this case you can incorporate Koalas with Tensorflow.
