[site]: stackoverflow
[post_id]: 2143995
[parent_id]: 2143906
[tags]: 
Because, according to paragraph 3.9.1/9 of the standard, An expression of type void shall be used only as an expression statement (6.2), as an operand of a comma expression (5.18), as a second or third operand of ?: (5.16), as the operand of typeid, or as the expression in a return statement (6.6.3) for a function with the return type void. C/C++ just isn't designed to be that generic. You do get return returns_void(); for tail-call optimization, that's functional-ish, right? :vP Edit: The above rule would still allow you to call takes_void(3) with 3 converted to void . This is forbidden by 8.3.5/2: If the parameter-declaration-clause is empty, the function takes no arguments. The parameter list (void) is equivalent to the empty parameter list. Except for this spe- cial case, void shall not be a parameter type (though types derived from void, such as void*, can).
