[site]: stackoverflow
[post_id]: 4026574
[parent_id]: 4025768
[tags]: 
Looking back, there were four things that really helped me to finally understand pointers. Prior to this, I could use them, but I did not fully understand them. That is, I knew if I followed the forms, I would get the results I desired, but I did not fully understand the 'why' of the forms. I realize that this is not exactly what you have asked, but I think it is a useful corollary. Writing a routine that took a pointer to an integer and modified the integer. This gave me the necessary forms upon which to build any mental models of how pointers work. One-dimensional dynamic memory allocation. Figuring out 1-D memory allocation made me understand the concept of the pointer. Two-dimensional dynamic memory allocation. Figuring out 2-D memory allocation reinforced that concept, but also taught me that the pointer itself requires storage and must be taken into account. Differences between stack variables, global variables and heap memory. Figuring out these differences taught me the types of memory to which the pointers point/refer. Each of these items required imagining what was going on at a lower level--building a mental model that satisfied every case I could think of throwing at it. It took time and effort, but it was well worth it. I am convinced that to understand pointers, you have to build that mental model on how they work and how they are implemented. Now back to your original question. Based on the previous list, there were several items that I had difficulty in grasping originally. How and why would one use a pointer. How are they different and yet similar to arrays. Understanding where the pointer information is stored. Understanding what and where it is the pointer is pointing at.
