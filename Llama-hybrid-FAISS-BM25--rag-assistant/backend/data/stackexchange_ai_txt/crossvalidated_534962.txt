[site]: crossvalidated
[post_id]: 534962
[parent_id]: 534921
[tags]: 
If you assume that each game is independent, with an equal probability of each outcome, then the problem is quite simple (and as whuber points out in the comments, this is the classical "problem of points" ). The solution is computed using the binomial distribution, which does consider all possible cases. Under these assumptions, you can proceed easily for the general case where we have two players playing a tournament which is best-out-of- $n$ games (where $n$ is a positive odd number), where $0 is the fixed probability that the first player will win a game. Suppose that the current score is $p_1$ points to the first player and $p_2$ points to the second player (so we must have $p_1+p_2 \leqslant n$ with both values non-negative). Let $X \sim \text{Bin}(n-p_1-p_2, \theta)$ denote the number of remaining games that will be won by the first player. The total points for the first player will be $p_1+X$ and the total points for the second player will be $n-X-p_1$ . To facilitate our analysis, we define the bound: $$B \equiv B(n,p_1) \equiv \Big\lfloor \frac{n}{2} - p_1 \Big\rfloor.$$ The probability that the first player wins is: $$\begin{align} \mathbb{P}(\text{Player 1 wins} | p_1,p_2) &= \mathbb{P}(X+p_1 > n-X-p_1) \\[16pt] &= \mathbb{P}(2X > n-2p_1) \\[16pt] &= 1-\mathbb{P}(2X \leqslant n-2p_1) \\[16pt] &= 1-\mathbb{P} ( X \leqslant B(n,p_1) ) \\[12pt] &= 1-\sum_{x=0}^{B(n,p_1)} \text{Bin}(x|n-p_1-p_2, \theta). \\[6pt] &= 1-\sum_{x=0}^{B(n,p_1)} {n-p_1-p_2 \choose x} \theta^{x} (1-\theta)^{n-p_1-p_2-x}. \\[6pt] \end{align}$$ It is simple to implement this as a function in R as follows. (I have included checks on the inputs, but these can be removed if you prefer a more parsimonious version of the function.) problem.of.points n) stop('Error: Cannot have p1 + p2 > n') if (!is.numeric(prob)) stop('Error: Input prob must be a probability') if (length(prob) != 1) stop('Error: Input prob must be a single probability') if (prob 1) stop('Error: Input prob must be a probability') if (!(player %in% c(1,2))) stop('Error: Input player must be 1 or 2') #Compute and return probability if (p1+p2 == n) { PROB p2) } if (p1+p2 For the case of a best-out-of-seven game with equal win probabilities for each player, and one lost game for the first player, the win-probability for the first player is: problem.of.points(n = 7, p1 = 0, p2 = 1) [1] 0.34375 The above gives a full solution to the classical problem of points, where the win probability is assumed to be known. However, in practical cases, it is unrealistic to assume that the win probability of a game is known. A more realistic approach is to treat the win probability as unknown, and use the observed outcomes of the initial games to make an inference about the unknown win probability in each game and the corresponding win probability for the set of games. The simplest way to do this is with a Bayesian model where we use a beta prior for the win probability, leading to a binomial-beta model.
