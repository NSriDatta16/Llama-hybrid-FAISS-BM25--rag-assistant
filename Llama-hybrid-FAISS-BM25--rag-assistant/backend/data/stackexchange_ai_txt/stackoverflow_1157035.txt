[site]: stackoverflow
[post_id]: 1157035
[parent_id]: 1156823
[tags]: 
Answering your followup question: briefly, there is no "default size of an element in an array" in most programming languages. In C (perhaps the most popular programming language), the size of an array element -- or anything, really -- depends on its type. For an array of char, the elements are usually 1 byte. But for other types, the size of each element is whatever the sizeof() operator gives. For example, many C implementations give sizeof(short) == 2, so if you make an array of short, it will then occupy 2*N bytes of memory, where N is the number of elements. Many high-level languages discourage you from even attempting to discover how many bytes an element of an array requires. Giving a fixed number of bytes ties the designers' hands to always using that many bytes, which is good for transparency and code that relies on its binary representation, but bad for backward compatibility whenever some reason comes along to change the representation. Hope that helps. (I didn't see the other comments until after I wrote the first version of this.)
