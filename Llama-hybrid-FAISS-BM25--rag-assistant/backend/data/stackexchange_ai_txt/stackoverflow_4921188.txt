[site]: stackoverflow
[post_id]: 4921188
[parent_id]: 4921150
[tags]: 
I misread your question and answered when it's appropriate to use static functions. You meant static member functions. here's an example of when to use a static member function - to wrap a thread call inside a class, so that your thread has access to your class...: static unsigned WINAPI ArchiveAgent::LogMsgPump(PVOID pData) { ArchiveAgent* pSmith = reinterpret_cast (pData); if( pSmith ) pSmith->LogMsgPump(); else return -1; return 0; } unsigned WINAPI ArchiveAgent::LogMsgPump() { CoInitializeEx(NULL, COINIT_MULTITHREADED); // .... CoUninitialize(); return 0; } Here was my answer for plain old static functions.. I use static functions where it doesn't make sense for that function to belong to a class. I generally tend to add these functions to a custom namespace. The following static function sample is part of a namespace I call ShellUtils: static HRESULT CreateFolder( CString & sPath ) { // create the destination folder if it doesn't already exist HRESULT hr = S_OK; DWORD dwError = 0; if( sPath.GetLength() == 0 || sPath.GetLength() }
