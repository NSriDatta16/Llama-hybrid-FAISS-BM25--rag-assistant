[site]: stackoverflow
[post_id]: 3592580
[parent_id]: 
[tags]: 
Problem with Inheritance

This is a fragment from "Exceptional C++" Item 24, Solution, first bullet from the bottom of the page: Never use public inheritance to implement "IS-ALMOST-A." I've seen some programmers, even experienced ones, inherit publicly from a base and implement "most" of the overridden virtual functions in a way that preserved the semantics of the base class. In other words, in some cases using the Derived object as a Base would not behave quite the way that a reasonable Base client could expect. An example often cited by Robert Martin is the usually misguided idea of inheriting a Square class from a Rectangle class "because a square is a rectangle." That may be true in mathematics, but it's not necessarily true in classes. For example, say that the Rectangle class has a virtual SetWidth(int) function. Then Square's implementation to set the width would also naturally set the height so that the object remains square. Yet there may well exist code elsewhere in the system that works polymorphically with Rectangle objects, and would not expect that changing the width would also change the height. After all, that's not true of Rectangles in general! This is a good example of public inheritance that would violate LSP, because the derived class does not deliver the same semantics as the base class. It violates the key precept of public inheritance: "Require no more and promise no less." I've tried to check it and I wrote: // Square.cpp : Defines the entry point for the console application. // #include "stdafx.h" #include using namespace std; class Rectangle { private: unsigned width_; unsigned height_; public: Rectangle(const unsigned width, const unsigned height):width_(width),height_(height) {/*Empty body*/ } unsigned GetWidth()const { return width_; } unsigned GetHeight()const { return height_; } virtual void SetWidth(const unsigned width) { width_ = width; } void SetHeight(const unsigned height) { height_ = height; } virtual ~Rectangle() { cout (operator new (sizeof(Rectangle) * 2)); a[0] = new Rectangle(10,10); a[1] = new Square(5); Rectangle* r = a[0]; cout GetHeight() GetWidth() GetHeight() GetWidth() SetWidth(20);//here I'm setting just width for a Rectangle cout GetHeight() GetWidth() As for me inheriting Square from Rectangle works as intended. So where am I making mistake and do not understand what is said in this bullet? Thanks
