[site]: stackoverflow
[post_id]: 4195551
[parent_id]: 4194999
[tags]: 
You didn't use Int64 consistantly (GetRecipients and GetAttachments as well). I suspect therin lies the problem, however I didn't go over it in detail. Below are the changes required. Notice that I used a slightly different method of incrementing an IntPtr which is a little less error prone. Altered to use Joerg's suggestion to increase the buffer size of the file attachment path . public class MAPI { public bool AddRecipientTo(string email) { return AddRecipient(email, HowTo.MAPI_TO); } public bool AddRecipientCC(string email) { return AddRecipient(email, HowTo.MAPI_CC); } public bool AddRecipientBCC(string email) { return AddRecipient(email, HowTo.MAPI_BCC); } public void AddAttachment(string strAttachmentFileName) { m_attachments.Add(strAttachmentFileName); } public int SendMailPopup(string strSubject, string strBody) { return SendMail(strSubject, strBody, MAPI_LOGON_UI | MAPI_DIALOG); } public int SendMailDirect(string strSubject, string strBody) { return SendMail(strSubject, strBody, MAPI_LOGON_UI); } int SendMail(string strSubject, string strBody, int how) { MapiMessage msg = new MapiMessage(); msg.subject = strSubject; msg.noteText = strBody; msg.recips = GetRecipients(out msg.recipCount); msg.files = GetAttachments(out msg.fileCount); m_lastError = MAPISendMail(new IntPtr(0L), new IntPtr(0L), msg, how, 0); if (m_lastError > 1) MessageBox.Show("MAPISendMail failed! " + GetLastError(), "MAPISendMail"); Cleanup(ref msg); return m_lastError; } bool AddRecipient(string email, HowTo howTo) { if (!String.IsNullOrEmpty(email)) { MapiRecipDesc recipient = new MapiRecipDesc(); recipient.recipClass = (int)howTo; recipient.name = email; m_recipients.Add(recipient); return true; } else { return false; } } IntPtr GetRecipients(out int recipCount) { recipCount = 0; if (m_recipients.Count == 0) return IntPtr.Zero; int size = Marshal.SizeOf(typeof(MapiRecipDesc)); IntPtr blockPtr = Marshal.AllocHGlobal(m_recipients.Count * size); IntPtr currentPtr = blockPtr; foreach (MapiRecipDesc mapiDesc in m_recipients) { Marshal.StructureToPtr(mapiDesc, currentPtr, false); currentPtr = (IntPtr)((long)currentPtr + size); } recipCount = m_recipients.Count; return blockPtr; } IntPtr GetAttachments(out int fileCount) { fileCount = 0; if (m_attachments == null) return IntPtr.Zero; if ((m_attachments.Count maxAttachments)) return IntPtr.Zero; int size = Marshal.SizeOf(typeof(MapiFileDesc)); IntPtr blockPtr = Marshal.AllocHGlobal(m_attachments.Count * size); IntPtr currentPtr = blockPtr; MapiFileDesc mapiFileDesc = new MapiFileDesc(); mapiFileDesc.position = -1; foreach (string strAttachment in m_attachments) { mapiFileDesc.name = Path.GetFileName(strAttachment); mapiFileDesc.path = Marshal.AllocHGlobal(MAX_PATH); CopyStringAnsi(mapiFileDesc.path, strAttachment); Marshal.StructureToPtr(mapiFileDesc, currentPtr, false); currentPtr = (IntPtr)((long)currentPtr + size); } fileCount = m_attachments.Count; return blockPtr; } void Cleanup(ref MapiMessage msg) { try { if (msg.recips != IntPtr.Zero) { IntPtr currentPtr = msg.recips; int size = Marshal.SizeOf(typeof(MapiRecipDesc)); for (int i = 0; i m_recipients = new List (); List m_attachments = new List (); int m_lastError = 0; const int MAPI_LOGON_UI = 0x00000001; const int MAPI_DIALOG = 0x00000008; const int maxAttachments = 20; const int MAX_PATH = 256; enum HowTo { MAPI_ORIG = 0, MAPI_TO, MAPI_CC, MAPI_BCC }; [DllImport("MAPI32.DLL")] static extern int MAPISendMail(IntPtr sess, IntPtr hwnd, MapiMessage message, int flg, int rsv); [DllImport("kernel32.dll", EntryPoint = "RtlMoveMemory", CharSet = CharSet.Ansi)] static extern void RtlMoveStringAnsi(IntPtr pdst, string psrc, IntPtr sizetcb); private void CopyStringAnsi(IntPtr intPtr, string str) { int length = (str.Length + 1) * Marshal.SystemMaxDBCSCharSize; RtlMoveStringAnsi(intPtr, str, (IntPtr)length); } [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)] class MapiMessage { public int reserved; public string subject; public string noteText; public string messageType; public string dateReceived; public string conversationID; public int flags; public IntPtr originator; public int recipCount; public IntPtr recips; public int fileCount; public IntPtr files; } [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)] class MapiFileDesc { public int reserved; public int flags; public int position; public IntPtr path; public string name; public IntPtr type; } [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)] class MapiRecipDesc { public int reserved; public int recipClass; public string name; public string address; public int eIDSize; public IntPtr entryID; } }
