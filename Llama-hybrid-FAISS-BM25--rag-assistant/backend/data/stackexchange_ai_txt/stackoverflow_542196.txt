[site]: stackoverflow
[post_id]: 542196
[parent_id]: 539960
[tags]: 
(sorry about the italics, underscores can trigger them but I can't find a good way to disable that in the middle of a paragraph. Ignore the italics, I didn't mean to put them there) You don't need to worry about using a hashtable with MySQL. If you intend to have a large number of items in memory while you operate on them a hashtable is a good data structure to use since it can find things much faster than a simple list. But at the database level, you don't need to worry about the hashtable. Figuring out how to best hold and access records is MySQL's job, so as long as you give it the correct information it will be happy. Database Structure items table would be: item_id, item_name Primary key is item_id users table would be: user_id, username Primary key is user_id user_items table would be: user_id, item_id Primary key is the combination of user_id and item_id Index on item_id Each item gets one (and only one) entry in the items table. Each user gets one (and only one) entry in the users table. When a user selects an item, it goes in the user items table. Example: Users: 1 | Bob 2 | Alice 3 | Robert Items 1 | Headphones 2 | Computer 3 | Beanie Baby So if Bob has selected the headphones and Robert has selected the computer and beanie baby, the user_items table would look like this: User_items (user_id, item_id) 1 | 1 (This shows Bob (user 1) selected headphones (item 1)) 3 | 2 (This shows Robert (user 3) selected a computer (item 2)) 3 | 3 (This shows Robert (user 3) selected a beanie baby (item 3)) Since the user_id and item_id on the users and items tables are primary keys, MySQL will let you access them very fast, just like a hashmap. On the user_items table having both the user_id and item_id in the primary key means you won't have duplicates and you should be able to get fast access (an index on item_id wouldn't hurt). Example Queries With this setup, it's really easy to find out what you want to know. Here are some examples: Who has selected item 2? SELECT users.user_id, users.user_name FROM users, user_items WHERE users.user_id = user_items.user_id AND user_items.item_id = 2 How many things has Robert selected? SELECT COUNT(user_items.item_id) FROM user_items, users WHERE users.user_id = user_items.user_id AND users.user_name = 'Robert' I want a list of each user and what they've selected, ordered by the user name SELECT user.user_name, item.item_name FROM users, items, user_items WHERE users.user_id = user_items.user_id AND items.item_id = user_items.item_id ORDER BY user_name, item_name There are many guides to SQL on the internet, such as the W3C's tutorial .
