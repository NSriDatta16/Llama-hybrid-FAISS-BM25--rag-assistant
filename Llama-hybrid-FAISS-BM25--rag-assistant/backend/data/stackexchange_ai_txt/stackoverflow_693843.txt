[site]: stackoverflow
[post_id]: 693843
[parent_id]: 
[tags]: 
What's the best way to implement observer pattern for many types?

I have an agent that monitors for certain conditions. For each condition, I would like to notify a different observer, because the responsibility for that condition lies with the observer. The way to do it for a single observer/subject in C++, according to wikipedia, is to create a virtual class (similar to a Java interface), which defines the update method for the Observer, and defines the register method for the Subject. Each concrete class then inherits its respective interface. However, I can envision this occurring for an arbitrary number of conditions, each of which would require another interface and concrete observer class for each new condition. Does kind of design make sense? Anddoes it sound reasonable to be adding an observer interface for each new condition?
