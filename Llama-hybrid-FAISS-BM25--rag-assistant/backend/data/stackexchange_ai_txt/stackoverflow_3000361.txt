[site]: stackoverflow
[post_id]: 3000361
[parent_id]: 1769888
[tags]: 
It's actually super easy... I'm sure you can just show a UIAlertView when the auth challenge delegate is shown (or prior to loading the URL, if you know for sure that the URL you're hitting will prompt for auth login info). Anyways, the trick is to create your own NSURLConnection and I do some logic to save whether the auth delegate has been used. - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType; { NSLog(@"Did start loading: %@ auth:%d", [[request URL] absoluteString], _authed); if (!_authed) { _authed = NO; /* pretty sure i'm leaking here, leave me alone... i just happen to leak sometimes */ [[NSURLConnection alloc] initWithRequest:request delegate:self]; return NO; } return YES; } - (void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge; { NSLog(@"got auth challange"); if ([challenge previousFailureCount] == 0) { _authed = YES; /* SET YOUR credentials, i'm just hard coding them in, tweak as necessary */ [[challenge sender] useCredential:[NSURLCredential credentialWithUser:@"username" password:@"password" persistence:NSURLCredentialPersistencePermanent] forAuthenticationChallenge:challenge]; } else { [[challenge sender] cancelAuthenticationChallenge:challenge]; } } - (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response; { NSLog(@"received response via nsurlconnection"); /** THIS IS WHERE YOU SET MAKE THE NEW REQUEST TO UIWebView, which will use the new saved auth info **/ NSURLRequest *urlRequest = [NSURLRequest requestWithURL:[NSURL URLWithString:]]; [_webView loadRequest:urlRequest]; } - (BOOL)connectionShouldUseCredentialStorage:(NSURLConnection *)connection; { return NO; }
