[site]: stackoverflow
[post_id]: 998479
[parent_id]: 949779
[tags]: 
Magento offers (relatively) easy support for custom configuration values. The best way I've found to accomplish this is to create a single magento module that holds all your custom configuration values. Like anything Magento, there are a lot of steps, and any one being wrong could trip you (or me!) up. Create an Empty Magento Module First, you'll want to setup a magento module to hold all your custom configuration values. Creating a magento module involves Create a xml file in app/etc/modules Create a folder structure in app/code/local/Companyname Companyname is a unique string that serves as a namespace, and most magento tutorials recommend you use your company name here. For the purposes of this tutorial, I'll use "Stackoverflow". Wherever you see the string Stackoverflow, replace it with your own unique string. So, for step 1, create a file at app/etc/modules named "Stackoverflow_Customconfig.xml", and place the following inside true local Random Magento Tip: There are parts of the magento system that consider whitespace significant, so it's always best to include no whitespace with your attribute values ( true vs. true Next, create the following folder mkdir app/code/local/Stackoverflow/Customconfig mkdir app/code/local/Stackoverflow/Customconfig/etc And create a file at app/code/local/Stackoverflow/Customconfig/etc/config.xml with the following contents 0.1.0 Congratulations, you've just setup a new Magento Module. If you clear your magento cache and go to System -> Configuration -> Advanced -> Disable Modules Output you should see your module listed. Add a System.xml file to your module Next, we're going to add a system.xml file. This file is used to add a custom configuration value to magento, which you'll be able to grab anywhere you want during the magento request cycle. Add a file at app/code/local/Stackoverflow/Customconfig/etc/system.xml That contains the following A grouping of config values. Make your own, or us an existing group. text 50 1 0 0 This will be my config's label text 50 1 0 0 is the name of the section your config will be displayed in. "General, Web, Design, Currency Setup, etc." By and large, this will be a lower-case version of the title, i.e. "General" becomes "general", "Design" becomes "design". If you're not sure what this outer tag should be, search through the core magento modules. i.e., grepping for "Currency Setup" reveals a mention in app/code/core/Mage/Directory/etc/system.xml Currency Setup So you'd use the tag is the name of the group your config variable will show up in. Groups are the Ajax drop downs that contain config fields. For example, the General section has a "Country options" group and a Local options" group. Again, check existing core modules if you're unsure how to place a value in an existing group. You'll also notice a translate attribute here, along with a corresponding label tag. This allows you to use any string you want in the HTML interface as a group title, but internally keep the name a valid XML tag name. Our tag is named but in the interface, the group will have the title A grouping of config values. Make your own, or us an existing group. Finally, is the name of yoru conifg value. Again, notice the translate attribute . The same rules as above apply. The other xml structure is needed, and is (mostly) used to control what kind of HTML inputs will be used for your config. If you want a particular interface element, find an example in the core module and copy the XML structure. This will allow you to set and lookup config values in the Magento GUI interface. You can retrieve your values using the static getStoreConfig method of the global Mage object and specifying the URI of your config value. The URI is created using the section/group/name of your config. Mage::getStoreConfig('design/my_or_their_group/my_config');
