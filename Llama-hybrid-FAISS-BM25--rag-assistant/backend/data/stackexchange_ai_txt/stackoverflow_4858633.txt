[site]: stackoverflow
[post_id]: 4858633
[parent_id]: 
[tags]: 
Building an OOP programming language from "Atoms"

There is a kind of beauty in supervening relationships . Consider the following examples: Atoms are composed of subatomic particles, molecules are composed of atoms, cells are composed of molecules, organs are composed of cells, people are composed of organs, societies are composed of people. The complex strategies of the game of Go are built upon the need to make structures with "two eyes" so that they'll survive - however the "two eyes" thing is never stated in the rules, but is itself an emergent property of the very simple rules of Go. The Turing completeness of Conway's_Game_of_Life can be proven in terms of gliders , guns and spaceships , which are in-turn based upon the concept of on and off and very simple set of rules . In all cases, a minimal set of objects and a minimal set of rules ultimately lead to very complex structure. My first question: Is it possible to outline a small and minimalistic set of programming "objects" and "rules" which can be used to build up a OOP language? Now, the clever computer scientist will probably point to the Turing completeness of rule 110 and say that this is all you need! But that's not quite what I'm looking for. Rather, at the risk of posing an ill-defined questions, what are the simplest, human-understandable concepts that can be built into an object oriented programming language? For a bad and incomplete example that hints at what I want, define three conceptual objects: a reference , a function , and an information holder . Then (level 2?) define a structure to be be an information holder that holds other information via references to other information folders. A rudimentary class (level 3?) would augment structures with a references to functions, but additional structure would have to be built to handle concepts of private vs. public functions. Ultimately we should arrive at a full-featured OOP language that was built solely upon fundamental concepts and nowhere did we cheat by hardcoding optimizations or syntactic salt with machine code. And ideally, the end result would still be attractive and readable code. My second question: Are there any OOP languages out there that already approach this?
