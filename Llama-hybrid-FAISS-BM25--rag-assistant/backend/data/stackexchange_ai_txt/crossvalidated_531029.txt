[site]: crossvalidated
[post_id]: 531029
[parent_id]: 
[tags]: 
the accuracy grid search gave me for image classification (using feature extraction with vgg16 and xgboost) was wrong?

so I'm somewhat a beginner at machine learning. for an image classification problem, I used feature extraction using vgg16 and gave the features to xgboost model as input. then used grid search to get better results. so according to grid search the best accuracy was 80%. but after I commented the grid search part and input the same hyperparameters grid search gave me in xgboost model, I got 72% accuracy. why? last part of code code with grid search: x_train, x_test = x_train/255.0, x_test/255.0 IMAGE_SIZE=[224,224] model = VGG16(input_shape=IMAGE_SIZE+[3],weights='imagenet', include_top=False) for layer in model.layers: layer.trainable = False feature_extractor = model.predict(x_train) features = feature_extractor.reshape(feature_extractor.shape[0], -1) from xgboost import XGBClassifier classifier = XGBClassifier() classifier.fit(features, y_train) x_test_feature = model.predict(x_test) x_test_features = x_test_feature.reshape(x_test_feature.shape[0], -1) predict = classifier.predict(x_test_features) from sklearn.model_selection import GridSearchCV parameters = [{'gamma': [0, 1, 5], 'learning_rate': [0.1, 0.9, 0.08, 0.7, 0.06, 0.5, 0.04, 0.3, 0.02, 0.01], 'subsample': [0.8, 0.9, 1], 'colsample_bytree': [0.8, 0.9, 1] }] grid_search = GridSearchCV(estimator = classifier, param_grid = parameters, scoring = 'accuracy', cv = 5) grid_search.fit(features, y_train) print("Best Accuracy: ", grid_search.best_score_) print("Best Parameters: ", grid_search.best_params_) after that, I just changed it to this: x_train, x_test = x_train/255.0, x_test/255.0 IMAGE_SIZE=[224,224] model = VGG16(input_shape=IMAGE_SIZE+[3],weights='imagenet', include_top=False) for layer in model.layers: layer.trainable = False feature_extractor = model.predict(x_train) features = feature_extractor.reshape(feature_extractor.shape[0], -1) from xgboost import XGBClassifier **#change here** classifier = XGBClassifier(gamma=0, colsample_bytree=1, subsample=0.9, learning_rate=0.7) classifier.fit(features, y_train) x_test_feature = model.predict(x_test) x_test_features = x_test_feature.reshape(x_test_feature.shape[0], -1) predict = classifier.predict(x_test_features) from sklearn import metrics print("Accuracy: ", metrics.accuracy_score(y_test, predict))
