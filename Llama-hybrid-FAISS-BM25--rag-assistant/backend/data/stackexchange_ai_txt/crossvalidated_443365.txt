[site]: crossvalidated
[post_id]: 443365
[parent_id]: 
[tags]: 
is this way of applying data augmentation correct

I'm training a CNN and want to apply some data augmentation to my input images. I combined some code from tensorflow tutorials and have the following workflow: I have a dataset containing all filenames. Then I map a function to that dataset that loads the labels and images and applies some data augmentation: def decode_image(img): img = tf.image.decode_jpeg(img, channels=3) img = tf.image.convert_image_dtype(img, tf.float32) img = tf.image.random_flip_up_down(img) ... def process_path(file_path): label = label_from_file_path(file_path) img = tf.io.read_file(file_path) img = decode_image(img) return img, label After that I repeat, batch and prefetch the dataset containing images and labels. My question now is: is this the correct way to do data augmentation? I don't create new artificial data as I only apply this once to each image, right? It should still increase the robustness of the network, but do I give up some potential here?
