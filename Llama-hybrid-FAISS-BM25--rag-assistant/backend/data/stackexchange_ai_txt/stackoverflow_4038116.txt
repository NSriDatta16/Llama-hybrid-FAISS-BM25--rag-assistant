[site]: stackoverflow
[post_id]: 4038116
[parent_id]: 4037842
[tags]: 
Normally, one solves this duality between (1) performance of static files and (2) data integrity of a database, by storing data in a database for integrity, and using one of the many possibilities of storing prerendered results in cache (be it flat files, APC, memcache, and the like). On a growing and very popular project, you can't do without cache, and you can't do without data integrity, so leveraging both is the solution. Storing a cache in a database has its advantages and disadvantages: Advantages: it's easy to invalidate cache based on keys, possibly even on trigger on the database side. one source of content Disadvantages: A terrible load on the database itself More difficult to scale In most cases, with changing data all around you really want to keep load of your database, it's busy doing all kinds of modifications (inserts, updates, deletes). Storing caches in another location so memory (as the mentioned APC & memcache)) or flat files would be the way to go if your process / project doesn't depend on the latest available data (forums, blogs, reviews, etc., who cares about a couple of seconds lag). If you are making a transactional systems however (balances of credit, gaming systems, etc.), the latest and greatest if of such a major importance you will shell out for a good database which you can possibly cluster to keep a lot of servers in sync. Keep in mind that although disk IO is very costly, often accessed & seldom changing flat files will be just as cached in memory of a system of any decent OS, if you have memory to spare on that system. Given enough load & limited resources, available hardware really comes into play, so there is no 'silver bullet' answer.
