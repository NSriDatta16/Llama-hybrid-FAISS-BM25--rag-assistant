[site]: stackoverflow
[post_id]: 3821035
[parent_id]: 3820985
[tags]: 
Yes, these can be suppressed. Normally, I'm opposed to suppressing warnings, but in this case, structs used for interop absolutely requires some fields to be present, even though you never intend to (or can) use them, so in this case I think it should be justified. Normally, to suppress those two warnings, you would fix the offending code. The first ("... is never used") is usually a code-smell of leftovers from earlier versions of the code. Perhaps code was deleted, but fields left behind. The second is usually a code-smell for incorrectly used fields. For instance, you might incorrectly write the new value of a property back to the property itself, never writing to the backing field. To suppress warnings for " Field XYZ is never used ", you do this: #pragma warning disable 0169 ... field declaration #pragma warning restore 0169 To suppress warnings for " Field XYZ is never assigned to, and will always have its default value XX ", you do this: #pragma warning disable 0649 ... field declaration #pragma warning restore 0649 To find such warning numbers yourself (ie. how did I know to use 0169 and 0649), you do this: Compile the code as normal, this will add some warnings to your error list in Visual Studio Switch to the Output window, and the Build output, and hunt for the same warnings Copy the 4-digit warning code from the relevant message, which should look like this: C:\Dev\VS.NET\ConsoleApplication19\ConsoleApplication19\Program.cs(10,28): warning CS 0649 : Field 'ConsoleApplication19.Program.dwReserved' is never assigned to, and will always have its default value 0 Caveat : As per the comment by @Jon Hanna , perhaps a few warnings is in order for this, for future finders of this question and answer. First, and foremost, the act of suppressing a warning is akin to swallowing pills for headache. Sure, it might be the right thing to do sometimes, but it's not a catch-all solution. Sometimes, a headache is a real symptom that you shouldn't mask, same with warnings. It is always best to try to treat the warnings by fixing their cause, instead of just blindly removing them from the build output. Having said that, if you need to suppress a warning, follow the pattern I laid out above. The first code line, #pragma warning disable XYZK , disables the warning for the rest of that file , or at least until a corresponding #pragma warning restore XYZK is found. Minimize the number of lines you disable these warnings on. The pattern above disables the warning for just one line. Also, as Jon mentions, a comment as to why you're doing this is a good idea. Disabling a warning is definitely a code-smell when done without cause, and a comment will prevent future maintainers from spending time either wondering why you did it, or even by removing it and trying to fix the warnings.
