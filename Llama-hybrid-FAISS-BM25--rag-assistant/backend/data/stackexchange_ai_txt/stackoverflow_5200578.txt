[site]: stackoverflow
[post_id]: 5200578
[parent_id]: 
[tags]: 
How to manage (or eliminate) parallel class hierarchies?

I'm designing a simple form creation engine, in which users may compose new forms using various boilerplate field types (Date, Text, DropDown) I decided to model the domain object (Form Field) independently of the objects that would be used to render these fields to a UI. Here's the interface that defines the contract for the domain and some of it's specializations: namespace Acme.Core.Domain{ public interface IFormField { bool Visible { get; set; } string Key { get; set; } event EventHandler VisibilityChanged; FieldType Type{get;} void Validate(IEnumerable errors); int DataId {get;set;} } public interface IDropDownField:IFormField{ IDictionary Items { get; set; } KeyValuePair SelectedValue { get; set; } } public interface IDateField:IFormField{ DateTime? SelectedDate{get;set} } } For the UI side of things, I constructed a parallel type hierarchy. This keeps the domain object, which is concerned with business rules around data validation separate from UI concerns, namely how to render a given field (MVC HtmlHelper vs WebForm WebControl): namespace Acme.UI{ public interface IControl { //parallel to IFormField bool Visible { get; set; } string ID { get; set; } } public interface IDropListControl:IControl { //parallel to IDropDownField } public interface IDatePickerControl: IControl { //parallel to IDateField } public interface IControlFactory { IControl CreateControl(IFormField field); } } While this design gives me the freedom to design the domain model independently of the UI, I haven't come across a clean way to connect and manage the two hierarchies. I feel like I should be able to leverage generics to connect parallel classes to one another, but I can't quite grok how that would look. Is there a pattern that solves the association problem or eliminates the need for a parallel class hierarchies altogether? EDIT: My UI tier references the my business layer (Core.csproj). Here are a few examples of how I connect the UI class hierarchy to the domain class hierarchy. These types don't currently use generics, but I feel that they ought to. // create concrete instances of IControl based on the the domain object passed in public interface IControlFactory { IControl CreateControl(IFormField field); } // scrape values form the UI controls and apply them to the appropriate domain object public interface IFormFieldDataBinder{ void Bind(IFormField field, IControl control); }
