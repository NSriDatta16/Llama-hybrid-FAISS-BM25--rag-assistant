[site]: stackoverflow
[post_id]: 91795
[parent_id]: 89332
[tags]: 
Once you know the hash of the stash commit you dropped, you can apply it as a stash: git stash apply $stash_hash Or, you can create a separate branch for it with git branch recovered $stash_hash After that, you can do whatever you want with all the normal tools. When you’re done, just blow the branch away. Finding the hash If you have only just popped it and the terminal is still open, you will still have the hash value printed by git stash pop on screen (thanks, Dolda). Otherwise, you can find it using this for Linux, Unix or Git Bash for Windows: git fsck --no-reflog | awk '/dangling commit/ {print $3}' ...or using PowerShell for Windows: git fsck --no-reflog | select-string 'dangling commit' | foreach { $_.ToString().Split(" ")[2] } This will show you all the commits at the tips of your commit graph which are no longer referenced from any branch or tag – every lost commit, including every stash commit you’ve ever created, will be somewhere in that graph. The easiest way to find the stash commit you want is probably to pass that list to gitk : gitk --all $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' ) ...or see the answer from emragins if using PowerShell for Windows. This will launch a repository browser showing you every single commit in the repository ever , regardless of whether it is reachable or not. You can replace gitk there with something like git log --graph --oneline --decorate if you prefer a nice graph on the console over a separate GUI app. To spot stash commits, look for commit messages of this form: WIP on somebranch : commithash Some old commit message Note : The commit message will only be in this form (starting with "WIP on") if you did not supply a message when you did git stash .
