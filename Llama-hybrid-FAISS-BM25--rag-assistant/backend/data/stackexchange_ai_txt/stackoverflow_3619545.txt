[site]: stackoverflow
[post_id]: 3619545
[parent_id]: 3465210
[tags]: 
1) First thing - measure how many requests per second can serve you most-visited pages. For well-written PHP sites on average hardware it must be in 200-400 requests per second range. If you are not there - you have to optimize the code by reducing number of database requests, caching rarely changed data in memcached/shared memory, using PHP accelerator. If you are at some 10-20 requests per second, you need to get rid of your bulky framework. 2) Second - if you are still on Apache2, you have to switch to lighthttpd or nginx+apache2. Personally, I like the second option. 3) Then you move all your static data to separate server or CDN. Make sure it is served with "expires" headers, at least 24 hours. 4) Only after all these things you might start thinking about going to EC2/Hadoop, build multiple servers and balancing the load (nginx would also help you there) After steps 1-3 you should be able to serve some 10'000'000 hits per day easily. If you need just 1.5-3 times more, I would go for single more powerfull server (8-16 cores, lots of RAM for caching & database). With step 4 and multiple servers you are on your way to 0.1-1billion hits per day (but for significantly larger hardware & support expenses).
