[site]: crossvalidated
[post_id]: 412679
[parent_id]: 
[tags]: 
Multiple Non-linear Regression with Function-based regression and Machine Learning models

I'm working on an application of Multi-nonlinear regression . Initially, I tried this algorithmically by creating a polynomial of the form A(x^p * y^q * z^r) . I saw poor results (highest r-squared value = 0.51 ), as shown below. FORMAT: Output(x,y) = A*(1^2) + B*(1^1 * x^1) + C*(1^1 * y^1) + D*(x^2) + E*(x^1*y^1) + F*(y^2) Notice: The powers of the variables always add up to 2 . Machine Learning Seeing poor results here, I turned to machine learning applications. This produced only 70% accuracy (see below). Here's the code: model = Sequential() model.add(Dense(128, input_dim=2, activation='relu')) model.add(Dropout(.2)) model.add(Dense(64, activation='relu')) model.add(Dense(64, activation='relu')) model.add(Dense(1, activation='linear')) model.compile(loss='mse', optimizer='adam', metrics=['accuracy']) np.random.seed(3) saveModel = ModelPerformancePlot("D:\\models\\model_{epoch:02d}.hdf5", input_test, output_test, monitor='val_loss', verbose=0, save_best_only=False, save_weights_only=False, mode='auto', period=1) model.fit(input_train, output_train, validation_split = 0.50, epochs=256, batch_size=64, verbose=2, callbacks = [saveModel]) Here's the visual performance: I understand accuracy isn't a good indicator of regression, I just added it to the graphic for visual effects. My question : Is there a way of improving the Machine Learning algorithm to fit better? Any suggestions on which layers are best for multi-nonlinear regression ? What other options are there to Sequential.compile() 's metrics parameter? I do not want to use accuracy . The documentation is unclear here.
