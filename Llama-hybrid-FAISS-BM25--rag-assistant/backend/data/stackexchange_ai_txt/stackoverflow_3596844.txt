[site]: stackoverflow
[post_id]: 3596844
[parent_id]: 3594740
[tags]: 
One thing i'd avoid is reading all the words in before processing. It will work, but IMHO, it's better not to do that if you don't need to, and you don't. Here's my solution (with elements liberally stolen from previous ones!), done with 2.6.2: import sys # a generator function which iterates over the words in a file def words(f): for line in f: for word in line.split(): yield word # returns a generator expression filtering an iterator down to titlecase words def titles(s): return (word for word in s if word.istitle()) # count the titlecase words in the file count = {} for word in titles(words(file(sys.argv[1]))): count[word] = count.get(word, 0) + 1 # build a list of tuples with the count for each word countsAndWords = [(kv[1], kv[0]) for kv in count.iteritems()] # put them in decreasing order countsAndWords.sort() countsAndWords.reverse() # print the top three for count, word in countsAndWords[:3]: print word, count I do a sort of decorate-sort-undecorate on the counts rather than doing the sort with a comparator which does lookups in the count dictionary; it's less elegant, but i believe it will be faster. That's probably a sinful thing to do.
