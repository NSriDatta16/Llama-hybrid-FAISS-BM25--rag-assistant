[site]: stackoverflow
[post_id]: 1853469
[parent_id]: 1853314
[tags]: 
You could use the virtual print Driver doPdf http://www.dopdf.com/ if this is permitted on the production machine. This will convert more or less any file type to a pdf format not just rtf. It just appears as another printer within Print Manager once installed. To use it in say winforms code I adapted the code found on the msdn printing example http://msdn.microsoft.com/en-us/library/system.drawing.printing.printdocument.aspx private void button1_Click(object sender, EventArgs e) { try { streamToPrint = new System.IO.StreamReader (@"F:\temp\labTest.txt"); try { printFont = new Font("Arial", 10); PrintDocument pd = new PrintDocument(); pd.PrinterSettings.PrinterName = "doPDF v6";// The only part of the code I needed to add was that marked above e.g. pd.PrinterSettings.PrinterName = "doPDF v6"; There may be a printer enumeration method which would be more elegant and robust and against this one could test to see if the print driver existed perhaps against a config file setting. Update: Handling multiple pages is taken care of in this method : this.pd_PrintPage as per the msdn sample. PrintDocument supports from and to page printing. DoPdf will pops up a fileSaveAsDialog box automatically so the files can be saved as a pdf document. What about rtf though ? A Microsoft format not supported very well so it would seem. This article http://msdn.microsoft.com/en-us/library/ms996492.aspx with demo code uses the RichTextBox as a starting point and by using P/Invoke leverages the power of Win32 to print RTF as WYSIWG. The control defines it's own page length method replacing the one used above in the code snippet and still uses PrintDocument so it should be easy to use. You can assign any rtf using Rtb.rtf method.
