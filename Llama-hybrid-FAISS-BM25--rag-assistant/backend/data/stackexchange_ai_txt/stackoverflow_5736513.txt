[site]: stackoverflow
[post_id]: 5736513
[parent_id]: 5734330
[tags]: 
Why not use StAX (javax.xml.stream.*, an implementation is included in Java SE 6) to stream in the XML, and convert individual portions to objects? import java.io.FileReader; import javax.xml.bind.JAXBContext; import javax.xml.bind.Unmarshaller; import javax.xml.stream.XMLInputFactory; import javax.xml.stream.XMLStreamReader; public class Demo { public static void main(String[] args) throws Exception { JAXBContext jc = JAXBContext.newInstance(Element.class); Unmarshaller unmarshaller = jc.createUnmarshaller(); XMLInputFactory xif = XMLInputFactory.newFactory(); XMLStreamReader xsr = xif.createXMLStreamReader(new FileReader("input.xml")); xsr.nextTag(); xsr.nextTag(); while(xsr.hasNext()) { Element element = (Element) unmarshaller.unmarshal(xsr); System.out.println(element.getAttribute()); if(xsr.nextTag() != XMLStreamReader.START_ELEMENT) { break; } } } } In the above example each individual "element" is unmarshalled into a POJO using JAXB (an implementation is included in Java SE 6), but you could process the fragment as you saw fit. JAXB model details below: import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; @XmlRootElement public class Element { private String attribute; @XmlAttribute public String getAttribute() { return attribute; } public void setAttribute(String attribute) { this.attribute = attribute; } } Note: StAX and JAXB are also compatible with Java SE 5, you just need to download the implementations separately.
