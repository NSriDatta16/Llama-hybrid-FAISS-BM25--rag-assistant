[site]: datascience
[post_id]: 47505
[parent_id]: 46483
[tags]: 
The steps are the following: Prepare your dataset . Put everything in a dataframe. Divide it in train and test (or even train, cv and test). Use of the order of 10k samples for the test set, or 10-20%, whatever is smaller. Consider using https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html Encode your input. You can convert the input, which is a string, to a bag of words, or to a TFIDF. Consider using https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html . Instantiate and train your model . You can use for example a simple logistic regression model, for example https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html . Test the performance of the model. Use the test set to understand how well your model is doing. You can use for example the accuracy ( https://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html ) or the precision and recall for each class ( https://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html and https://scikit-learn.org/stable/modules/generated/sklearn.metrics.recall_score.html ). Understand well what they mean ( https://en.wikipedia.org/wiki/Precision_and_recall ). Your pseudocode should be something like: -> Divide train and test set. Output: X_train, y_train, X_test, y_test -> Instantiate tfidf and the desired model (e.g. logistic regression). -> Fit tfidf with X_train (e.g. use .fit_transform) and get the X_train_transformed -> Fit the model (e.g. using .fit) with X_train_transformed and y_train -> Use X_test to get a prediction y_pred of the model (first pass it through tfidf and then through the model object, e.g. using .predict) -> Use y_pred and y_test to get some metrics to understand the performance of the model. Hope this works for you.
