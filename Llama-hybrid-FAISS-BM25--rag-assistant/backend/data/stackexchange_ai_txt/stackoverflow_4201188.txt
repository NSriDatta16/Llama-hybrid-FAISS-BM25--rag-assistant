[site]: stackoverflow
[post_id]: 4201188
[parent_id]: 4200125
[tags]: 
Here is a solution that uses a recursive cte to generate a " table of numbers " (courtesy of Itzik Ben-Gan ), which is useful for all manner of problems including string splitting, and PIVOT. SQL Server 2005 onwards. Full table create, insert and select script included. CREATE TABLE dbo.Table1 ( Name VARCHAR(30), [Values] VARCHAR(128) ) GO INSERT INTO dbo.Table1 VALUES ('John', 'val,val2,val3') INSERT INTO dbo.Table1 VALUES ('Peter', 'val5,val7,val9,val14') INSERT INTO dbo.Table1 VALUES ('Lesli', 'val8,val34,val36,val65,val71,val') INSERT INTO dbo.Table1 VALUES ('Amy', 'val3,val5,val99') GO SELECT * FROM dbo.Table1; GO WITH L0 AS(SELECT 1 AS c UNION ALL SELECT 1), L1 AS(SELECT 1 AS c FROM L0 AS A, L0 AS B), L2 AS(SELECT 1 AS c FROM L1 AS A, L1 AS B), L3 AS(SELECT 1 AS c FROM L2 AS A, L2 AS B), Numbers AS(SELECT ROW_NUMBER() OVER(ORDER BY c) AS n FROM L3) SELECT Name, [1] AS Column1, [2] AS Column2, [3] AS Column3, [4] AS Column4, [5] AS Column5, [6] AS Column6, [7] AS Column7 FROM (SELECT Name, ROW_NUMBER() OVER (PARTITION BY Name ORDER BY nums.n) AS PositionInList, LTRIM(RTRIM(SUBSTRING(valueTable.[Values], nums.n, charindex(N',', valueTable.[Values] + N',', nums.n) - nums.n))) AS [Value] FROM Numbers AS nums INNER JOIN dbo.Table1 AS valueTable ON nums.n Which converts this output Name Values John val,val2,val3 Peter val5,val7,val9,val14 Lesli val8,val34,val36,val65,val71,val Amy val3,val5,val99 to Name Column1 Column2 Column3 Column4 Column5 Column6 Column7 Amy val3 val5 val99 NULL NULL NULL NULL John val val2 val3 NULL NULL NULL NULL Lesli val8 val34 val36 val65 val71 val NULL Peter val5 val7 val9 val14 NULL NULL NULL
