[site]: stackoverflow
[post_id]: 5113319
[parent_id]: 4913195
[tags]: 
Having found the other answers here unacceptable (or just didn't quite fit my approach) I pinged-away until I came up with something I like better. Here's what I did: public class Security extends Secure.Security { /* Overrides the same method from Secure.Security. * I only needed to redirect back the home-page so I just * hard-coded the redirect-url here; but you could also have * directed your logout-link to #logout2(String url) where you do a * flash#put() and then here do a flash#get() and redirect to * to that url instead (see n002213f's answer for more detail; * but I thought it bad-practice to do the other half of his * answer -- directly modifying the #logout() method of the * play#secure-module) static void onDisconnected() { redirect( "/" ); } } index.html: (...) Logout (...) So what happens here is that the default play#secure#logout() is called and at the end of the logout-process it fires Secure#Security#onDisconnected -- which is overridden and redirects to the home-page. This way play's own built-in security isn't being bypassed so you're not risking breaking your security, you also aren't directly modifying the play#secure-module code which means when it's updated you won't find yourself in a pickle, and yet you are achieving your result: not being redirected to the default play#secure-login page, but instead going straight back to the homepage. If anyone more seasoned with Play! than I see a problem with this (or if my criticism of the other solutions is unfounded) I'd love to hear back! Otherwise I think this is the most elegant and simplest way to achieve the goal.
