[site]: stackoverflow
[post_id]: 1082893
[parent_id]: 1070063
[tags]: 
In my experience if (flag==true) is bad practice. The first argument is academic: If you have a bool flag , it is either true or false . Now, the expression (flag==true) again, is true or false - it is no more expressive, only redundant - flag can't get "more true" or "more false" than it already is. It would be "clearer" only if it's not obvious flag is a boolean - but there's a standard way to fix that which works for all types: choose a better name . Stretching this beyond reason, the following would be "even better": ((flag==true)==true) The second argument is pragmatic and platform-specific C and early C++ implementations had no real "bool" type, so there are different conventions for flags, the most common being anything nonzero is true. It is not uncommon for API's to return an integer-based BOOL type, but not enforce the return value to be 0 or 1. Some environments use the following definitions: #define FALSE 0 #define TRUE (!FALSE) good luck with if ((1==1) == TRUE) Further, some platforms use different values - e.g. the VARIANT_BOOL for VB interop is a short , and VARIANT_TRUE is -1 . When mixing libraries using these definitions, an explicit comparison to true can easily be an error disguised as good intentions. So, don't.
