[site]: stackoverflow
[post_id]: 1106773
[parent_id]: 1102175
[tags]: 
I have used an approach similar to your first model on several occasion. The one catch with this approach is that you need to create an OganizationUser class in your domain to handle the Role and Flagged fields from you Domain. This would leave you with something like this in your code. var user = userRepository.Load(1); var list = user.OrganizationUsers; // All the organizations the user is a part of including their role and flagged values. var organization = list[0].Organization; *If you're going to be iterating through all a users organizations quite often you'd likely want to eager load the Organization entity along with OrganzitionUser With the second design you submitted it looks like you would be able to add a user to the OrgUserDetails without adding the user to OrganizationUser . That doesn't seem like something I would want to support from my Domain.
