[site]: datascience
[post_id]: 65761
[parent_id]: 
[tags]: 
Setting up RNN in TensorFlow for time series forecast with variable input series lengths

I am building a model with keras for time series prediction. The structure of the problem is as follows: The input is a time series of 5 numeric features The output is a binary class (0 or 1) The model needs to predict on variable lengths of input data. For example, in some cases I might only have the first 2 days available for a sample, and in others I may have 7 days. Here is how I am setting up the layers in the model: import tensorflow as tf model = tf.keras.Sequential() model.add(tf.keras.layers.LSTM(64, input_shape=(None, 5)) model.add(tf.keras.layers.Dense(1, activation='sigmoid')) I am seeing good performance when training on sequences of a constant size and predicting on that same size. However, I am not sure how to best configure and train the model to work on variable-length inputs. I'm wondering if there might be zero-padding going on under the hood when the sequences aren't all the same length. Values of 0 are common and meaningful for the features I am using and so filling in missing data with 0's wouldn't make sense to do in this case. I'm also wondering how people usually structure their training set in this case. I could do any of the following: Include each sample only once with a random input length Include each sample once per possible input length, with a different input length each time Include each sample only once, with the maximum input length The third doesn't seem right as the model probably needs to see training examples with shorter lengths in order to be able to predict on them.
