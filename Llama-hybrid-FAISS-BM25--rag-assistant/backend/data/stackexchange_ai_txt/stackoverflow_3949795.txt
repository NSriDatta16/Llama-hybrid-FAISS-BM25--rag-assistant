[site]: stackoverflow
[post_id]: 3949795
[parent_id]: 3949310
[tags]: 
When people say sets have O(1) membership-checking, they are talking about the average case. In the worst case (when all hashed values collide) membership-checking is O(n). See the Python wiki on time complexity . The Wikipedia article says the best case time complexity for a hash table that does not resize is O(1 + k/n) . This result does not directly apply to Python sets since Python sets use a hash table that resizes. A little further on the Wikipedia article says that for the average case, and assuming a simple uniform hashing function, the time complexity is O(1/(1-k/n)) , where k/n can be bounded by a constant c . Big-O refers only to asymptotic behavior as n → ∞. Since k/n can be bounded by a constant, c independent of n , O(1/(1-k/n)) is no bigger than O(1/(1-c)) which is equivalent to O(constant) = O(1) . So assuming uniform simple hashing, on average , membership-checking for Python sets is O(1) .
