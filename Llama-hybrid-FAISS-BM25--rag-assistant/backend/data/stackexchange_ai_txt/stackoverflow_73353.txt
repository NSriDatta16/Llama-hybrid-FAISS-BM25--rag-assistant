[site]: stackoverflow
[post_id]: 73353
[parent_id]: 73117
[tags]: 
This sounds very similar to Braid . You really don't want parallel processing for this - parallel programming is hard , and for something like this, performance should not be an issue. Since the game state vector will grow very quickly (probably on the order of several kilobytes per second, depending on the frame rate and how much data you store), you don't want a linked list, which has a lot of overhead in terms of space (and can introduce big performance penalties due to cache misses if it is laid out poorly). For each parallel timeline, you want a vector data structure. You can store each parallel timeline in a linked list. Each timeline knows at what time it began. To run the game, you iterate through all active timelines and perform one frame's worth of actions from each of them in lockstep. No need for parallel processing.
