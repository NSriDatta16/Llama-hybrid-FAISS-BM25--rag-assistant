[site]: stackoverflow
[post_id]: 2023749
[parent_id]: 2023374
[tags]: 
Since you're planning on using a relational database management system, I'd store this data in a set of normalized tables. A first stab comes up with (this is all based on SQL Server 2005, and sorry, ): CREATE TABLE MyData ( LineOfBusiness varchar(50) not null ,Year smallint not null ,Element varchar(50) not null ,Value float not null ,constraint PK_MyData primary key (LineOfBusiness, Year, Element) ) Having two varchar(50)s in your primary key could be deemed inefficient, particularly if you end up with a lot of data. (a) I wouldn't sweat it until you hit 64k, but (b) by the time you hit megabytes of data, it'll be far too late to go back and revise your architecture--so might as well get it right the first time. It could be efficient to move LineOfBusiness to a lookup table: CREATE TABLE LineOfBusiness ( LineOfBusinessId int not null constraint PK_LineOfBusiness primary key ,Description varchar(50) not null ) If "elements" can be repeated between lines of business, it definitely is more efficient to move it to a lookup table: CREATE TABLE Element ( ElementId int not null constraint PK_Element primary key ,Description varchar(50) not null ) Year is a simple numeric value falling between 1900 and 2100 (and if not, then huh?), so there's no need to normalize it out. Whether or not a lookup table for year is useful depends on the application requirements. (Maybe having FirstYear and LastYear columns in LineOfBusiness makes sense?) Based on the above two tables and working in relational integrity, you'd end up with CREATE TABLE MyData ( LineOfBusinessId int not null constraint FK_MyData__LineOfBusiness foreign key references LineOfBusiness (LineOfBusinessId) ,Year smallint not null ,ElementId int not null constraint FK_MyData__Element foreign key references Element (ElementId) ,Value float not null ,constraint PK_MyData primary key (LineOfBusinessId, Year, ElementId) ) This leaves many questions open regarding how to load data and ensure/preserver validity, and of course queries (and probably pivot queries) will need to be written, but you can spin wheels and get nowhere if your initial storage designs are inadequate.
