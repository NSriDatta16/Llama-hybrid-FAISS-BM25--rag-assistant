[site]: stackoverflow
[post_id]: 3630184
[parent_id]: 3630035
[tags]: 
My experience in this is that you shouldn't waste your time writing tests for code that is trivial, unless you have a lot of complex stuff riding on the correctness of that triviality. I, for one, think that testing stuff like getters and setters is a total waste of time, but I'm sure that there'll be more than one coverage junkie out there who'll be willing to oppose me on this. For me tests facilitate three things: They garantuee unbroken old functionality If I can check that nothing new that I put in has broken my old things by running tests, it's a good thing. They make me feel secure when I rewrite old stuff The code I refactor is very rarely the trivial one. If, however, I want to refactor untrivial code, having tests to ensure that my refactorings have not broken any behavior is a must. They are the documentation of my work Untrivial code needs to be documented. If, however, you agree with me that comments in code is the work of the devil, having clear and concise unit tests that make you understand what the correct behavior of something is, is (again) a must. Anything I'm sure I won't break, or that I feel is unnessecary to document, I simply don't waste time testing. Your generated controllers and model methods, then, I would say are all fine even without unit tests.
