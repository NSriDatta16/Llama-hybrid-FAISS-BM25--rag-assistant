[site]: stackoverflow
[post_id]: 5195059
[parent_id]: 4850377
[tags]: 
Taking the problem from the top, I've checked your formula - see sketch to confirm I've understood you correctly. Given that we know A and Z and want to solve for X, I first wrote: tan(A) = X/Z rearranging, I get: X = Z tan(A) Since Z = 5 and A = 22.5 degrees... X = 5* tan(22.5 degrees) X = 2.07106781 So, it does seem as though you've got the maths right but your code wrong - maybe your tan function is expecting degrees rather than radians, or fovAngle hasn't been set? I think you need to debug and hand-check each value. Going back to the wider problem of figuring out what does and does not lie inside your frustum, you might find that you can use a different test to answer the same question more elegantly. Many graphics coders use a "side-of-plane" test. Consider that your viewing frustum is a volume of space bounded by a set of 6 planes (4 for the sides of your viewport, a near clipping plane and a far clipping plane). Given a point on a plane and a normal for the plane, you can quite easily calculate the equation of a plane, which in turn makes it trivial to test whether a given point is "inside" (in the direction of the normal) a given plane . Iterate through all 6 planes and you'll quickly rule a given point in or out of your viewing volume. The really neat thing about this test is how easily you can re-use it: any simple convex polygon you happen to want to do tests on (e.g. a rectangle) can be described as a set of planes, allowing you to re-use your "insider or outside" test. Very general.
