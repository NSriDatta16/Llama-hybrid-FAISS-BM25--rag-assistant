[site]: crossvalidated
[post_id]: 288289
[parent_id]: 
[tags]: 
rjags mixture model for a combination of normal and gamma distributions

Is it possible in rjags to create a mixture model in which one distribution is normal and includes negative values, while the other distribution has only positive support? Our data are global satellite observations of plant activity levels. Because of noise in the satellite retrievals, small negative observations in winter are common. Thus there appears to be a normally distributed data cluster near zero. For data collected during the unspecified growing seasons, plant activity levels appear to fit a gamma distribution. We want to use a mixture model to regress activity predictors for the growing season. We would prefer to use Bayesian methods but would consider a frequentist approach. What hasn’t worked so far: There’s an unanswered question about how to do this in Matlab at EM of a Gaussian-Gamma mixture model in matlab . Package bmixture provides for Bayesian mixture models of multiple gammas or multiple normal distributions but not a combination of both distributions. There are packages to define and compute likelihoods of clusters, but we need to be able to take the next step of adding regression to the mixture model. Some mixture models in rjags are set up so that each observation is modeled against both distributions, then one distribution is selected with a probability draw. That’s described at How to model a mixture of finite components from different parametric families with JAGS? , https://stats.stackexchange.com/questions/64634/modelling-zero-inflated-proportion-data-in-r-using-gamlss and a couple other websites. That approach isn’t working for our data because when rjags tries to fit a negative value of y to a gamma distribution, it stops. In concept perhaps one could route all negative observations to the normal distribution centered near zero and let rjags distribute the rest. It would involve a little fancy footwork with the distribution results. The attempt in the following code is computationally circular, however. Here both distributions are normal, but only for testing. { sink("example.jags") cat("model { # Likelihood for (i in 1:n.obs) { y[i] ~ dnorm(distrib[gate.final[i]], tau) gate.final[i] = ifelse(y[i] error message: Possible directed cycle involving some or all of the following nodes: gate.final[1], gate.final[2], … y[1], y[2],…. Thank you.
