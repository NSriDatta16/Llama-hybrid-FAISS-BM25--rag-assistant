[site]: stackoverflow
[post_id]: 1146133
[parent_id]: 1145337
[tags]: 
You are limiting your maximum message size by max_burst (which gets assigned to tbf->capacity in the beginning) - since the tbf->tokens never increments beyond that value, bigger messages will never get sent due to this check: if(bytes tokens) { tbf->tokens -= bytes; } else { return -1; } So, the code indeed sets a hard limit on burst to be max_burst - so you should fragment your messages if you want this burst size. Assuming this is the only place in the code where you can insert the limiter, you might get a better result if you replace the above piece with: if(tbf->tokens > 0) { tbf->tokens -= bytes; } else { return -1; } The semantic will be slightly different, but on average over a long period of time it should get you approximately the rate you are looking for. Of course, if you send 125K in one message over a 1gbps link, one can hardly talk about 900kbps rate - it will be full 1gbps burst of packets, and they will need to be queued somewhere in case there are lower-speed links - hence be prepared to lose some of the packets in that case. But, depending on your application and the transport network protocol that you are using (TCP/UDP/SCTP/...?) you might want to move the shaping code down the stack - because packets on the network typically are only maximum 1500 bytes anyway (that includes various network/transport protocol headers) One thing which might be interesting for testing is http://www.linuxfoundation.org/en/Net:Netem - if your objective is trying to tackle the smaller-capacity links. Or, grab a couple of older routers with 1mbps serial ports connected back to back.
