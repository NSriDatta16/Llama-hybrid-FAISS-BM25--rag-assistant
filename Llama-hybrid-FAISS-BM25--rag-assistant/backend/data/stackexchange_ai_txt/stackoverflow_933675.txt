[site]: stackoverflow
[post_id]: 933675
[parent_id]: 545768
[tags]: 
It depends on what you mean by "testing Cocoa GUIs." If you want tools like the old Virtual User tool included with MPW, then those are few & far between; you'll be looking at tools like Squish and Eggplant. If you want to write unit tests for your application's human interface, I suggest you follow a " trust, but verify " approach where you trust that as long as you're making the right connections (according to your framework) that your user can interact properly with your framework. That means you can do the majority of your testing by verifying your model and controller code are hooked up to your views correctly. On my weblog, I've written a couple of examples of how to do this specifically with Cocoa, one for testing user interfaces built with target-action , and one for testing user interfaces built with Cocoa bindings . (Remember, of course, that the two technologies aren't exclusive: If you want to do drag & drop in a table view managed via Cocoa bindings, you'd also have a data source and probably a delegate hooked up via target-action.) The thing I don't write unit tests for — generally — is the positioning or type of controls in their superview. Sometimes that is important to get and keep correct, however; in that case, I can just query the appropriate properties of the controls and verify them using the standard assertions. What I virtually never do is write code to "simulate events." The closest I've ever come to that is constructing a fake drag info object and passing that to an outline view data source to ensure it will deal with drags correctly.
