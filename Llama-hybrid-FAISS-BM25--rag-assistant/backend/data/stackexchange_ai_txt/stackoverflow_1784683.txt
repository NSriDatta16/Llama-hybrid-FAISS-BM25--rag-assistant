[site]: stackoverflow
[post_id]: 1784683
[parent_id]: 1784303
[tags]: 
Design decisions made regarding the way Windows Forms works more or less preclude parameterized .ctors for windows forms components. You can use them, but when you do you're stepping outside the generally approved mechanisms. Rather, Windows Forms prefers initialization of values via properties. This is a valid design technique, if not widely used. This has some benefits, though. Ease of use for clients. Client code doesn't need to track down a bunch of data, it can immediately create something and just see it with sensible (if uninteresting) results. Ease of use for the designer. Designer code is clearer and easier to parse in general. Discourages unusual data dependencies within a single component. (Though even microsoft blew this one with the SplitContainer ) There's a lot of support in forms for working properly with the designer in this technique also. Things like DefaultValueAttribute , DesignerSerializationVisibilityAttribute , and BrowsableAttribute give you the opportunity to provide a rich client experience with minimal effort. (This isn't the only compromise that was made for client experience in windows forms. Abstract base class components can get hairy too.) I'd suggest sticking with a parameterless constructor and working within the windows forms design principles. If there are real preconditions that your UserControl must enforce, encapsulate them in another class and then assign an instance of that class to your control via a property. This will give a bit better separation of concern as well.
