[site]: stackoverflow
[post_id]: 905644
[parent_id]: 
[tags]: 
Return concrete or abstract datatypes?

I'm in the middle of reading Code Complete, and towards the end of the book, in the chapter about refactoring, the author lists a bunch of things you should do to improve the quality of your code while refactoring. One of his points was to always return as specific types of data as possible , especially when returning collections, iterators etc. So, as I've understood it, instead of returning, say, Collection , you should return HashSet , if you use that data type inside the method. This confuses me, because it sounds like he's encouraging people to break the rule of information hiding. Now, I understand this when talking about accessors, that's a clear cut case. But, when calculating and mangling data, and the level of abstraction of the method implies no direct data structure, I find it best to return as abstract a datatype as possible , as long as the data doesn't fall apart (I wouldn't return Object instead of Iterable , for example). So, my question is: is there a deeper philosophy behind Code Complete's advice of always returning as specific a data type as possible, and allow downcasting, instead of maintaining a need-to-know-basis, that I've just not understood?
