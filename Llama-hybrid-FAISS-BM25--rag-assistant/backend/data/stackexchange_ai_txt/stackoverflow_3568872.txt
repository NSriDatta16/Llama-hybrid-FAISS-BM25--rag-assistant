[site]: stackoverflow
[post_id]: 3568872
[parent_id]: 3567887
[tags]: 
The first thing you need to do is make sure you separate the actions completely from the interface. That means turning all operations that affect data into discrete actions. That also implies that whatever causes a change of view should also be recorded as a discrete action. Basically the state of the interface should only reflect the data-changes and command-based view changes (see my last note below about view changing though). The most successful undo systems we have used previously allowed nesting of IUndoableCommand objects. These compound commands roll up into a single user action (the sort of action you would expect to see display in an Undo menu). I note you mention using undo across views... That seems like unusual behaviour for a multiform app. Normally undo is only within individual controls and for any drag-drop operations. The exceptions are usually graphic based interfaces (not forms-based). Changing form during undo would be the equivalent of MS Word switching to another document and continuing to undo... quite disturbing for the end user. Might want to get the user experience guys to rethink that aspect of the design. Just my 2 cents worth. Hope this helps.
