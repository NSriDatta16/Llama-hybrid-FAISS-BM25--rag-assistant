[site]: stackoverflow
[post_id]: 5523837
[parent_id]: 
[tags]: 
ASP.NET MVC3: TryUpdateModel throwing an exception

I have a view which accepts the following model: Inherits="System.Web.Mvc.ViewPage " This posts back to the following action: [HttpPost] public ActionResult Create(FormCollection formValues) { var job = new JobCreationModel(); if (TryUpdateModel(job)) { _jobRepository.AddJob(job); _jobRepository.Save(); return RedirectToAction("Index"); } return View(job); } However, on posting back the following exception is thrown: Unable to cast object of type 'System.Int32' to type 'System.String'. Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code. Exception Details: System.InvalidCastException: Unable to cast object of type 'System.Int32' to type 'System.String'. Source Error: Line 135: { Line 136: var job = new JobCreationModel(); Line 137: if (TryUpdateModel(job)) Line 138: { Line 139: _jobRepository.AddJob((Job)job); Although I can't highlight it here, it's line 137 that the exception occurs on. I can't step into this method, so how can I determine what's causing this exception? Also, isn't TryUpdateModel supposed to shelter me from any exceptions, simply returning true or false to reflect the result? I wasn't aware that it could throw an exception. UPDATE: here's the model (both derived and base): public class JobCreationModel : Job { // // Properties public SelectList ClientsList { get; private set; } public SelectList Languages { get; set; } public SelectList Users { get; set; } // // Constructors public JobCreationModel() { var userCurrent = Membership.GetUser(); SentDate = DateTime.Now; WorkedBy = userCurrent != null ? userCurrent.UserName : string.Empty; DeadlineDate = DateTime.Now; ReceivedDate = DateTime.Now; var clientRepository = new ClientRepository(); ClientsList = new SelectList(clientRepository.GetAllClients(), "ID", "OrganisationName"); var languageRepository = new LanguageRepository(); Languages = new SelectList(languageRepository.GetAllLanguages(), "ID", "Code"); var userList = Membership.GetAllUsers(); Users = new SelectList(userList.Cast ().ToList(), "UserName", "UserName", userCurrent); } public JobCreationModel(Job job) { var userCurrent = Membership.GetUser(); Client = job.Client; ClientName = job.ClientName; DeadlineDate = job.DeadlineDate; FixedCost = job.FixedCost; ID = job.ID; Invoice = job.Invoice; JobDescription = job.JobDescription; JobFileName = job.JobFileName; LanguageFrom = job.LanguageFrom; LanguageTo = job.LanguageTo; PONumber = job.PONumber; ReceivedDate = job.ReceivedDate; SentDate = job.SentDate; WordCost = job.WordCost; WordCount = job.WordCount; WorkedBy = job.WorkedBy; var clientRepository = new ClientRepository(); ClientsList = new SelectList(clientRepository.GetAllClients(), "ID", "OrganisationName"); var languageRepository = new LanguageRepository(); Languages = new SelectList(languageRepository.GetAllLanguages(), "ID", "Code"); var userList = Membership.GetAllUsers(); Users = new SelectList(userList.Cast ().ToList(), "UserName", "UserName", userCurrent); } } The base type is an entity, and the best way I could think of to show it is to display the XML behind it: This then has a buddy class to extend it: [MetadataType(typeof(JobValidation))] [Bind(Include = "Client,SentDate,JobFileName,JobDescription,WordCost,WordCount,WorkedBy")] public partial class Job { public IEnumerable Clients { get { var clientRepository = new ClientRepository(); return clientRepository.GetAllClients(); } } public string ClientName { get; set; } public string SelectedMonth { get; set; } public string SelectedYear { get; set; } } public class JobValidation { [Required(ErrorMessage = "Please select a client for the sent job")] [Range(1, 999999, ErrorMessage = "Please select a client")] public int Client { get; set; } [Required(ErrorMessage = "Please enter the completion date for this job")] [DataType(DataType.Date, ErrorMessage = "The date entered is not in a recognised format")] public DateTime SentDate { get; set; } [Required(ErrorMessage = "Job file must have a name")] [StringLength(500, ErrorMessage = "Job file name must not be longer than 500 characters")] public string JobFileName { get; set; } [Required(ErrorMessage = "Job must have a name")] [StringLength(200, ErrorMessage = "Job name must not be longer than 200 characters")] public string JobDescription { get; set; } [Required(ErrorMessage = "Please enter the word cost for the sent job")] [StringLength(6, ErrorMessage = "The word cost should not exceed 5 digits")] [DataType(DataType.Currency, ErrorMessage = "The word cost was not recognised as an amount of currency")] public string WordCost { get; set; } [Required(ErrorMessage = "Please enter the word count for the sent job")] [StringLength(8, ErrorMessage = "The word count must not exceed 99999999")] public string WordCount { get; set; } public string WorkedBy { get; set; } } Finally, here's the relevant part of the view: Job Details Job description model.JobDescription)%> model.JobDescription)%> PO number model.PONumber)%> model.PONumber)%> Date received model.ReceivedDate)%> model.ReceivedDate)%> Deadline Date model.DeadlineDate)%> model.DeadlineDate)%> Date sent model.SentDate)%> model.SentDate)%> Is fixed-cost?&nbsp; Word count model.WordCount)%> model.WordCount)%> Word cost model.WordCost)%> model.WordCost)%> Fixed cost model.FixedCost)%> model.FixedCost)%> Languages model.LanguageFrom, Model.Languages, "-- Select --") %> model.LanguageFrom)%> &nbsp;-&nbsp;to&nbsp;-&nbsp; model.LanguageTo, Model.Languages, "-- Select --") %> model.LanguageTo)%> Client model.Client, Model.ClientsList, "-- Select --") %> model.Client)%> Job file name model.JobFileName) %> model.JobFileName)%> model.WorkedBy)%> model.WorkedBy, Model.Users) %>
