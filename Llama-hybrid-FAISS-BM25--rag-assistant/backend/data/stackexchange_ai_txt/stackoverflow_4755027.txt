[site]: stackoverflow
[post_id]: 4755027
[parent_id]: 4754948
[tags]: 
PHP doesn't really 'translate' to C code; the PHP interpreter interprets PHP while running executable code, and the PHP interpreter is a state machine that knows how to execute all the PHP in the process. No intermediate C is needed or desired. Because it is interpreted, every time the PHP executable interprets the PHP program, it is re-evaluated. The PHP interpreter is written in C, but it could have been in C++ or Assembly or Pascal or Erlang or bash or Java or whatever else you might wish. (I think it started out in Perl, but my memory is getting fuzzy.) C is compiled with a compiler , which is run once before the program may be run thousands of times. Most C compilers make several 'passes': lexing input into tokens , parsing the tokens into a tree , then modifying the Abstract Syntax Tree to generate symbol tables for each of the scopes of execution. After the abstract syntax tree has been subjected to various optimizations such as dead code removal and static single assignment , the tree is passed to a code generator which will generate the required object file for the input that can run on the target architecture in question. The object file is linked with the linker to objects (functions and variables in C) not defined in that specific translation unit so that the program can be loaded by the linker/loader at run time. The dragon book is the usual best source for learning about compilers, but I recommend Pragprog's Language Implementation Patterns instead.
