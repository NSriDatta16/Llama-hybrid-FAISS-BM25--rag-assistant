[site]: stackoverflow
[post_id]: 2431805
[parent_id]: 2431692
[tags]: 
this has to do with structure packing. by adding the tm field to the sSpecificData, you are changing it from a structure that has a natural alignment of int (4 bytes), to something that has a natural alignment of what appears to be 8 bytes. so with tm as part of sSpecificData , the structure sMyData is effectively this typedef struct { int m_Id; // 4 bytes of padding inserted to align sSpecificData on an 8 byte boundary. sSpecificData m_Data; // with tm, this has a alignment of 8 } sMyData; this explains what you are seeing. To fix this, you can add an explicit padding value to sMyData AND to sData. typedef struct { int m_Id; int m_padding; sDataBuffer m_Data; // this accepts structures with an alignment of up to 8 } sData; typedef struct { int m_Id; int m_padding; sSpecificData m_Data; // with tm, this has a alignment of 8 } sMyData; Or you can use #pragma pack(4) (if your c compiler supports it) to force the padding to be left out of sMyData, but this will result in tm being misaligned which isn't a good idea. see this related question. a very similar question came up today about C#, but the issues are the same, (the syntax for specifying packing is different though) Size of structures in .NET
