[site]: stackoverflow
[post_id]: 5009136
[parent_id]: 
[tags]: 
How can I create a dynamic webpage with JSP where after deployed, pages can be modified without being redeployed again?

I have requirements for a project that require that a particular page in JSP be able to have its content dynamically altered after being EARed up and deployed to a server. The client does not want to have to make changes to the code to add some content to the page and then go through an expensive elevation to see the changes in production. Use case: Client has a Contact Us page that has four forms setup with a jQuery Accordian, "General", "Payments", "Claims", and "Support". After deployment and some time later, the client would like to add a "Fraud" form to the deployed page easily and quickly. Technologies in use: JSP Struts2 jQuery Spring I'm a relatively new programmer, so I don't have a lot of experience working with web technologies and best practices, but I did have an idea of how to start (whether this is a viable method or not). Using a database, store information such as the topic and path/URL to additional HTML pages that could be displayed for each panel of the jQuery Accordian. Using the Struts2 iteration tag and taking advantage of the Struts2 Actions (Leverage Java at this point), retrieve the information from the database and dynamically build the forms by iterating through and generating headers and divs containing the content; the content being from separate HTML files stored at a different location than the deployed project such as on a NAS device... or some other means. My initial thoughts were that when new forms needed to be added, a simple HTML page could be made and put at a storage location and then the database could be updated accordingly with the topic of the form and where to find it. On page load, the database would be hit for a listing of all topics and urls/paths to load thus making the setup quite flexible for the future when new topics need to be added or existing topics modified/removed. Is this completely off the wall? Is there a better method of doing this or is implementing this type of flexibility ultimately more of a pain then just modifying the code and going through the steps to get the updated version placed in production again? Any help, ideas, or insight would be most appreciated!
