[site]: stackoverflow
[post_id]: 2283604
[parent_id]: 2283479
[tags]: 
The problem is with auto-boxing. When you change flag from true to false or vice versa, you are actually getting an entirely new Boolean object. That is, this line: flag = false; Is equivalent to: flag = new Boolean(false); Once that happens your two threads are then referring to two different Boolean objects, so their flags end up un-synchronized and neither thread is able to signal the other to wake up. When OddThread changes the flag EvenThread still has the old flag object so it doesn't see the new value. Because a Boolean object is immutable you'll need to change your flag to use some other mutable object which can change values in place without creating new objects. That, or have both classes refer to a common (perhaps global) variable. As @erickson suggests you could use AtomicBoolean which is mutable. Another kludgy way to do it would be to change flag to: boolean[] flag = new boolean[1]; And then use flag[0] every where. Both threads would then be able to change flag[0] while always referencing the same boolean[] array object. You wouldn't have the auto-boxing problem. ... Also, it is a good idea to wrap any call to wait() in a loop. A wait() can be subject to spurious wakeups where the call returns even though nobody has actually called notify() . To workaround that you should always check your guarding condition after waking up to make sure the wakeup isn't spurious. while (flag == true) { lock.wait(); } Update I have made the changes based on your suggestions above; but i am not getting the expected output. I will paste the modified code above. Here is the output i am getting 1 2 4 3 5 6 8 7 9 10 11 13 12 15 17 14.... When you end up waiting, once you are woken up you don't toggle flag and notify the other thread. I advise reorganizing your code a bit so it looks like "wait; print; notify". Something like: synchronized (lock) { while (flagObj.flag == false) { lock.wait(); } System.out.println(i); flagObj.flag = false; lock.notify(); }
