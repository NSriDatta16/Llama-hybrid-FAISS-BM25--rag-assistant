[site]: crossvalidated
[post_id]: 21079
[parent_id]: 21074
[tags]: 
It looks like each pair is a different representation of the same thing. The binary representation of 1160786507 is 01000101001100000011001001001011 . Taken 8 bits at a time, that gives: 01000101 00110000 00110010 01001011 In decimal that looks more like this: 69 48 50 75 According to this ASCII Table , those digits respectively represent the characters E , 0 , 2 , and K . So essentially the left column is what you would get if you saved the right column as ASCII but then interpreted it as a 32-bit integer instead of a string of characters. Update : For those wondering how I saw this, I noticed that the numbers on the left all were exactly 10 digits long and began with a 1. Spend enough time programming and you come to know off the top of your head that the maximum value of a signed 32-bit integer is roughly 2.1 billion, so it seems that might be the reason why all those 10-digit numbers began with 1. Also I noticed that all the character strings on the right had exactly 4 characters, and since characters are often encoded using 8 bits, that means they also can be represented using 32 bits. From there I just had to check if one of the popular encoding schemes worked out, and indeed ASCII did the trick. The moral is that humans are surprisingly good (oftentimes too good) at pattern recognition.
