[site]: stackoverflow
[post_id]: 2415472
[parent_id]: 2415434
[tags]: 
You will run into a practical limit first - it is pretty impossible to get a 2gb array allocated. Practical limits I have encountered are around the 800mb mark AT PROGRAM START - going down drastically after that. Anything larger than 64mb is a luck gamble on 32 bit - the large object heap is not defragmented, so you need 65mb free in one piece or allocation fails. Theoretical limits are: usable memory, especially under 32 bit. 32 bit number space for index (0 upward - no negative numbers for arrays UNLESS YOU PLAY SMART IN CREATION). You can create arrays allowing negative numbers, but not with C# standard syntax - only with reflection. 2gb per object. But seriously, the practical implications are larger. For .NET 4.0.... consider using memory mapped files ;)
