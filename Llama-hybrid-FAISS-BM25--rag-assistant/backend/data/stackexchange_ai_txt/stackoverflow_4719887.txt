[site]: stackoverflow
[post_id]: 4719887
[parent_id]: 4719853
[tags]: 
I'm not sure where to start. We have primitive types (e.g. int). We have our old friend the c struct. We have classes. All of these can be storage class automatic; just sitting on the stack. All can be passed by value. Then we have pointer-to-x. ( x * ). These store the address of an item on the stack, or allocated somewhere else, as with new . Once you get a pointer, it's up to you to make sure that you don't do something that invalidates it. If you return from a function, pointers to automatic items in its dynamic context become invalid. If you use delete , the pointer you delete through is no longer valid, and, of course, neither are any copies of it. Then, finally, we have references. x& is just syntactic sugar. Passing a reference to something is just passing a pointer to it. Using a reference type avoids the need to type some * characters, and it asserts that the pointer-under-the-table will never be null.
