[site]: crossvalidated
[post_id]: 610284
[parent_id]: 610125
[tags]: 
Not an answer, but too long for a comment. First of all, please specfiy the dependency on {tibble} by library(tibble) or tibble::rownames_to_column("Patient") . Just to make things clear: according to the linked paper, "LSC17" is not a patient but a score calculated as follows (cp. Methods): For each gene, the probeset with the highest average GE in the training data was selected to represent that gene. To extract a core subset of genes from among the 43 that were more highly expressed in LSC + cell fractions that best explained patient outcomes in the training cohort, we used a linear regression technique based on the LASSO algorithm as implemented in the glmnet 1.9-8 R package16,17 , while enabling leave-one-out cross-validation to fit a Cox regression model. A minimal subset of 17 genes was selected whose weighted combined GE (LSC17 score) was highly correlated to survival outcomes in the training cohort. Assuming you have done this, and gene1 , ... gene18 ( gene17 in the paper) is your result, the subsequent step is describred as (cp. Methods) The LSC17 score is calculated for each patient as a linear combination of GE of these 17 genes weighted by regression coefficients that were estimated from the training data as follows: LSC17 score = (DNMT3B × 0.0874) + (ZBTB46 × −0.0347) + (NYNRIN × 0.00865) + (ARHGAP22 × −0.0138) + (LAPTM4B × 0.00582) + (MMRN1 × 0.0258) + (DPYSL3 × 0.0284) + (KIAA0125 × 0.0196) + (CDK6 × −0.0704) + (CPXM1 × −0.0258) + (SOCS2 × 0.0271) + (SMIM24 × −0.0226) + (EMP1 × 0.0146) + (NGFRAP1 × 0.0465) + (CD34 × 0.0338) + (AKR1C3 × −0.0402) + (GPR56 × 0.0501). Since I am not sure what your training data is or should be, I demonstrate the next step based on the provided data. Note, you (probably) need to perform a regression on the training data as mentioned. If gene1 , ... gene5 is an appropritate choice/shortcut/..., and further assuming that every row correspondents to a patient, you can compute LSC17score as follows # data handling df Transformation of continous data to categorical means an information loss: # c := categorical df$LSC17c A glimpse of the result: > head(df[, c("LSC17score", "LSC17c")], n = 7) LSC17score LSC17c 1 0.07762944 FiveHigh 2 -0.53205310 FiveStandard 3 -0.39538182 FiveStandard 4 0.19058862 FiveHigh 5 0.10449223 FiveHigh 6 -0.34134344 FiveStandard 7 -0.97711100 FiveLow Maybe renaming to LSC5score and LSC5c is good practice, since we only use gene1 , ..., gene5 .
