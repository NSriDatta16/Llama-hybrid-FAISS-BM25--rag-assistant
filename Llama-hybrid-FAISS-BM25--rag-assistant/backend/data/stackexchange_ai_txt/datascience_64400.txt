[site]: datascience
[post_id]: 64400
[parent_id]: 
[tags]: 
Can a recommendation system be used as a binary classifier?

I have a computer-generated music project, and I'd like to classify short passages of music as "good" or "bad" via machine learning. I won't have a large training set. I'll start by generating 500 examples each of good and bad music, manually. These examples can be transposed and mirror-imaged to produce 12,000 examples of each good and bad. I have a way of extracting features from the music in an intelligent way that mimics the way a perceptive listener would do. The trouble is that it involves thousands of features on a single passage. Each feature is a number from 0 to 1. I'm pretty new to data science, and my understanding is that binary classifiers like decision trees wouldn't work well with that many features. But note that I'll have a lot of clumping and dependence of features. I just don't know how to predict that structure. Also, good examples will probably clump around a few categories, while bad examples will tend to be all over the place and "far" from good examples. It occurred to me that maybe a recommendation system could work. Taking the example of movie recommenders, the score of each of my features would be like the rating a viewer gives a movie. Each example will rate thousands of features, i.e. a viewer rating thousands of movies. Then we have one movie, called the "Good Movie." Each training example gives that either 5 stars or 0 stars depending on whether it's good or bad. We then take a test example and predict whether it likes the "Good Movie." Can this sort of thing work? Is there another approach to working with thousands of features? EDIT: adding a comment on dependence or "clumping" of features: I intuitively think that "good" music will probably clump around several categories and within those clumps there will be strong correlation between features. Let's say inside clump #1, features A and B are correlated. But inside clump #2, A and B might be uncorrelated with each other, although each correlated to other features. I mention this in case it's relevant to doing feature reduction with PCA or other techniques.
