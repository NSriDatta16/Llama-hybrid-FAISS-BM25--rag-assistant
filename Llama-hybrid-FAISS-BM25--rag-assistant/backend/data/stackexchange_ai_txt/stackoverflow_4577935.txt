[site]: stackoverflow
[post_id]: 4577935
[parent_id]: 4576591
[tags]: 
I would write that as: (defun tweak-text (list caps lit) (when list (destructuring-bind (item . rest) list (case item ((#\space) (cons item (tweak-text rest caps lit))) ((#\! #\? #\.) (cons item (tweak-text rest t lit))) ((#\") (tweak-text rest caps (not lit))) (otherwise (cond (lit (cons item (tweak-text rest nil lit))) (caps (cons (char-upcase item) (tweak-text rest nil lit))) (t (cons (char-downcase item) (tweak-text rest nil nil))))))))) The CASE statement dispatches on the character. The COND statement then takes care of the other conditions. CASE compares with EQL. That means CASE works for also for characters and even can compare with multiple items. I'm also a fan of a code layout style that lines up corresponding expressions - this is only useful with monospaced fonts. This helps me to detect patterns visually in the code and helps detecting code that can be simplified. DESTRUCTURING-BIND takes the list apart. For fun , rewritten using LOOP: (defun tweak-text (list) (loop with caps and lit for item in list when (eql item #\space) collect item else when (member item '(#\! #\? #\.)) collect item and do (setf caps t) else when (eql item #\") do (setf lit (not lit)) else when lit collect item and do (setf caps nil) else when caps collect (char-upcase item) and do (setf caps nil) else collect (char-downcase item) and do (setf caps nil lit nil)))
