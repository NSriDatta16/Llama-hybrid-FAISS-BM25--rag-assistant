[site]: stackoverflow
[post_id]: 5684057
[parent_id]: 5683972
[tags]: 
I'm writing a function where I need a significant amount of heap memory ... will be accessed frequently within a specific for loop This isn't something you can really optimize at a compiler level. I think your concern is that you have a lot of memory that may be "stale" (paged out) but at a particular point in time you will need to iterate over all of it, maybe several times and you don't want the memory pages to be paged out to disk. You will need to investigate strategies that are platform specific to improve performance. Keeping the pages in memory can be achieved with mlockall or VirtualLock but you really shouldn't need to do this. Make sure you know what the implications of locking your application's memory pages into RAM is, however. You're hogging memory from other processes. You might also want to investigate a low fragmentation heap (however it may not be relevant at all to this problem) and this page which describes cache lines with respect to for loops. The latter page is about the nitty-gritty of how CPUs work (a detail you normally shouldn't have to be concerned with) with respect to memory access. Example 1: Memory accesses and performance How much faster do you expect Loop 2 to run, compared Loop 1? int[] arr = new int[64 * 1024 * 1024]; // Loop 1 for (int i = 0; i The first loop multiplies every value in the array by 3, and the second loop multiplies only every 16-th. The second loop only does about 6% of the work of the first loop , but on modern machines, the two for-loops take about the same time : 80 and 78 ms respectively on my machine.
