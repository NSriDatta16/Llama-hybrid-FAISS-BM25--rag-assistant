[site]: stackoverflow
[post_id]: 2198964
[parent_id]: 2198684
[tags]: 
First you must clarify whether you consider dynamic typing vs. static typing or statically compiled languaged vs. interpreted languages vs. bytecode JIT. Usually we mean dynamc language = dynamic typing + interpreted at run-time and static languages = static typing + statically compiled , but it's not necessary the case. Type information can help the VM dispatch the message faster than witout type information, but the difference tend to disappear with optimization in the VM which detect monomorphic call sites. See the paragraph "performance consideration" in this post about dynamic invokation . The debates between compiled vs. interpreted vs. byte-code JIT is still open. Some argue that bytecode JIT results in faster execution than regular compilation because the compilation is more accurate due to the presence of more information collected at run-time. Read the wikipedia entry about JIT for more insight. Interpreted language are indeed slower than any of the two forms or compilation. I will not argue further, and start a heated discussion, I just wanted to point out that the gap between both tend to get smaller and smaller. Chances are that the performance problem that you might face will not be related to the language and VM but because of your design. EDIT If you want numbers , I suggest you look at the The Computer Language Benchmarks . I found it insightful.
