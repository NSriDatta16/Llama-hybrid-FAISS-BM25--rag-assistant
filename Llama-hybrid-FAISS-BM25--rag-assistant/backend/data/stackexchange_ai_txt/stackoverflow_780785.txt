[site]: stackoverflow
[post_id]: 780785
[parent_id]: 780732
[tags]: 
Your problem probably lies in the fact you compiled with debug info and are using the tcXXX units, resulting in an enormous amount of objects being created. A transcript from AutomatedQA message boards Did you compile it in debug mode? We have an app that when compiled in Debug mode is slow when used with TC. This is because of the enormous # of objects in it. If we compile w/o debug but with the TC enabler(s), everything is fine. and this one might help to A couple of areas where you can increase speed. If you are just using record and playback, then look into replacing the .Keys("xxx") calls to .wText = "xxx". The Keys function will use the ms delay between keystrokes, while wText just forces the text overwrite internally. The second suggestion (which you likely have already looked at) is Tools->Default Project Properties->Project->Playback, setting the delays to 100 ms, 5 ms, and 5 ms to keep the pauses to a minimum. As for the object properties, yes, TC loads them all. You can force this with a process refresh on yor application, so that the data is forced into being available without a load delay when called. This might help with reducing the appearance of delay. Edit: We also have been evaluating TestComplete and also encountered this performance problems. I would be very interested to know if and how you've finally solved them. That said, I think it is a product with great potential and can really help you with organizing all of your unit, integration and GUI tests.
