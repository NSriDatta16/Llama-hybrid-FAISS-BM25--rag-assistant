[site]: stackoverflow
[post_id]: 1733655
[parent_id]: 1733488
[tags]: 
One way to do this is to create an FBO (frame buffer object) with a render buffer attached, render your minimap to it, and then bind the FBO to a texture. You can then map the texture to anything you'd like, generally a quad. You can do this for all sorts of HUD objects. This also means that you don't have to redraw the contents of your HUD/menu objects as often as your main view; update the the associated buffer only as often as you require. You will often want to downsample (in the polygon count sense) the objects/scene you are rendering to the FBO for this case. The functions in the API you'll want to check into are: glGenFramebuffersEXT glBindFramebufferEXT glGenRenderbuffersEXT glBindRenderbufferEXT glRenderbufferStorageEXT glFrambufferRenderbufferEXT glFrambufferTexture2DEXT glGenerateMipmapEXT There is a write-up on using FBOs on gamedev.net . Another potential optimization is that if the contents of the minimap are static and you are simply moving a camera over this static view (truly just a map). You can render a portion of the map that is much larger than what you actually want to display to the player and fake a camera by adjusting the texture coordinates of the object it's mapped onto. This only works if your minimap is in orthographic projection.
