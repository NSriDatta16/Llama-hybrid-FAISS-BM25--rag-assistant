[site]: crossvalidated
[post_id]: 408335
[parent_id]: 408316
[tags]: 
Mostly I've seen switch point analyses in the context of probabilistic programming. In particular I think this approached both in Probabilistic Programming and Bayesian Methods for Hackers and the PyMC3 documentation . I think I can hack together something that would look similar to your problem to give you a good idea of where the switch is occurring and some sense of uncertainty. import pymc3 as pm import numpy as np #Generating synthetic data: n1 = 1000 n2 = 1000 m1 = 0 m2 = .5 sd1 = 3 sd2 = 2 dat = np.append(np.random.normal(loc=m1,scale=sd1,size=n1),np.random.normal(loc=m2,scale=sd2,size=n2)) # Building the model of the switchpoint: with pm.Model() as model: switchpt = pm.DiscreteUniform("switchpt",lower=0,upper=len(dat)-1) idx = np.arange(len(dat)) mu = pm.math.switch(switchpt>idx, m1, m2) sd = pm.math.switch(switchpt>idx, sd1, sd2) obs = pm.Normal("obs", mu, sd, observed=dat) # Sampling with model: step = pm.Metropolis() trace = pm.sample(10000, tune=5000, step=step) pm.summary(trace) # 95% confidence interval is [987,1012] # mean of 993 The confidence in this prediction is affected by standard deviations, means, and counts as one might expect. This effectively says if there is more overlap in the distributions they are harder to distinguish and thus require more samples.
