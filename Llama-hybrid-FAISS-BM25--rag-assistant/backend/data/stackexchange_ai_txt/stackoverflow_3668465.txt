[site]: stackoverflow
[post_id]: 3668465
[parent_id]: 
[tags]: 
Raise event when all asynchronous method calls are complete

i have the following issue: In asynchronous context i need to initialize fields of some custom object before i can proceed with other operations on it, so i do: class ContainingObject { private CustomObject _co; SomeMethod() { _co = new CustomObject(); _co.InitObjectAsyncCompleted += (s,e) => DoStuff(); _co.InitObjectAsync(); } } class CustomObject { public string Field1, Field2, Field3, Field4; public EventHandler InitObjectAsyncCompleted; public void InitObjectAsync() { } } The catch is that fields are also initialized through asynchronous calls to WCF service, and all must be initialized before i raise the InitObjectAsyncCompleted event. There is quite a number of those fields, each is initialized with different WCF call, and implying i cannot change the WCF part for now, i see two ways to solve the problem: 1) Chain WCF calls, so first call initializes first field, then calls WCF to initialize second field, and so on before all fields are initialized, then i raise "completed" event in last WCF call. public void InitObjectAsync() { var proxy = new ProxyFactory.GetCustomObjectProxy; proxy.GetDataForField1Completed += (s,e) => { Field1 = e.Result; proxy.GetDataForField2Completed += (s1,e1) => { Field2 = e1.Result; //keep this up building a chain of events, when Field4 is filled, raise // InitObjectAsyncCompleted(this, null); }; proxy.GetDataForField2(); }; proxy.GetDataForField1(); } 2) Since i know how many method calls should be completed, 4 in this case, i can make a counter. public void InitObjectAsync() { int counter = 0; var proxy = new ProxyFactory.GetCustomObjectProxy; proxy.GetDataForField1Completed += (s,e) => { Field1 = e.Result; if(counter >= 3) InitObjectAsyncCompleted(this, null); else counter++; }; proxy.GetDataForField1(); proxy.GetDataForField2Completed += (s,e) => { Field2 = e.Result; if(counter >= 3) InitObjectAsyncCompleted(this, null); else counter++; }; proxy.GetDataForField2(); //repeat for all fields } I don't really like either of solutions, first one builds a pretty big and badly readable chain of events, second is just... crude - can anyone suggest a more elegant way of solving this problem?
