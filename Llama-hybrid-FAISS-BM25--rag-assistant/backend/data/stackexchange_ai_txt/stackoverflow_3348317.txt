[site]: stackoverflow
[post_id]: 3348317
[parent_id]: 3346764
[tags]: 
If a method does not use instance data, then it should be static. If the function is public, this will give the important efficiency boost that you don't need to create a superfluous instance of the object just to call the function. Probably more important is the self-documentation advantage: by declaring the function static, you telegraph to the reader that this function does not use instance data. I don't understand the sentiment of many posters here that's there's something wrong with having static functions in a Java program. If a function is logically static, make it static. The Java library has many static functions. The Math class is pretty much filled with static functions. If I need, say, a function to calculate a square root, the rational way to do it would be: public class MathUtils { public static float squareRoot(float x) { ... calculate square root of parameter x ... return root; } } Sure, you could make a "more OOPy" version that looked like this: public class MathUtils { private float x; public MathUtils(float x) { this.x=x; } public float squareRoot() { ... calculate square root of this.x ... return root; } } But aside from meeting some abstract goal of using OOP whenever possible, how would this be any better? It takes more lines of code and it's less flexible. (And yes, I now there's a square root function in the standard Math class. I was just using this as a convenient example.) If the only place a static function is used and is every likely to be used is from within a certain class, then yes, make it a member of that class. If it makes no sense to call it from outside the class, make it private. If a static function is logically associated with a class, but might reasonably be called from outside, then make it a public static. Like, Java's parseInt function is in the Integer class because it has to do with integers, so that was a rational place to put it. On the other hand, it often happens that you're writing a class and you realize that you need some static function, but the function is not really tied to this class. This is just the first time you happened to realize you need it, but it might quite rationally be used by other classes that have nothing to do with what you're doing now. Like, to go back to the square root example, if you had a "Place" class that included latitude and longitude, and you wanted a function to calculate the distance between two places and you needed a square root as part of the calculation, (and pretending there was no square root function available in the standard library), it would make a lot of sense to create a separate square root function rather than embedding this in your larger logic. But it wouldn't really belong in your Place class. This would be a time to create a separate class for "math utilities" or some such. You ask, "Should foo always be static, regardless of any other considerations?" I'd say "Almost, but not quite." The only reason I can think of to make it not static would be if a subclass wants to override it. I can't think of any other reasons, but I wouldn't rule out the possibility. I'm reluctant to say "never ever under any circumstances" because someone can usually come up with some special case.
