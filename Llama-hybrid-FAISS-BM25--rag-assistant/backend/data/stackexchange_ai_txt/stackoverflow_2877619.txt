[site]: stackoverflow
[post_id]: 2877619
[parent_id]: 2877605
[tags]: 
public List RemoveDuplicates (List elems) { // ^ HashSet uniques = new HashSet (); foreach (var item in elems) uniques.Add(item); elems = new List (); int cnt = 0; foreach (var item in uniques) elems[cnt++] = item; return elems; } Then you call it: .RemoveDuplicates (new List { "hello", "hello", "world" }); However, I suggest you use this code: public IList RemoveDuplicates (IEnumerable elems) { // ^ IList uniques = new List (); foreach(T item in elems) if(!uniques.Contains(item)) uniques.Add(item); return uniques; } This way Your function can take any IEnumerable (this include IList, or anything we can enumerate through) Your function is simpler, it may not be efficient for large data-sets though, however that is subject to your average data-size. If you desire efficiency over large data-sets you can simply take the IEnumerable<> component and go from there. It returns an IList<>, which is more generic to work with. Or if you have access to .NET 3.0 / 3.5 / 4.0, use linq like the other answers suggested. Hopefully this helped illustrate Generic Methods.
