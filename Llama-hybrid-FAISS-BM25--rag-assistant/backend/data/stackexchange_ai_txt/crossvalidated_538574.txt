[site]: crossvalidated
[post_id]: 538574
[parent_id]: 538569
[tags]: 
If I understand you correctly, you have the $y_i$ values that conditionally on $x_i$ follow the beta distribution and the relationship can be described as $$ (\alpha_i, \beta_i) = f(x; \theta) \\ y_i \sim \mathsf{Beta}(\alpha_i, \beta_i) $$ where $f(\cdot; \theta)$ is an unknown function to be estimated. Can neural networks do this? Sure. There's a beta regression that does this but uses a simpler model to approximate the function $f$ . Just train it by maximizing the likelihood function defined in terms of beta distribution for the $y_i$ targets and use whatever neural network architecture to approximate $f$ . One thing that you could do to simplify the model is to re-parametrize beta distribution in terms of location and precision, as beta regression does. If you would like to learn the distribution of $y_i$ 's, you would need to switch to Bayesian ground, use something like KL divergence and switch from standard neural network framework to probabilistic programming one, like PyMC3, Pyro, TensorFlow Probability, etc. So the how is a longer discussion.
