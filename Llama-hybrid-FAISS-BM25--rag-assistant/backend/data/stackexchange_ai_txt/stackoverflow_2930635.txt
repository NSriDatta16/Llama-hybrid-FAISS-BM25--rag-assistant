[site]: stackoverflow
[post_id]: 2930635
[parent_id]: 2876189
[tags]: 
My co-worker and I tried many options. We settled on using Hibernate's poorly documented ResultTransformer interface (really, Hibernate, the lack of documentation there is shameful). Although use of the Transformer forced us to manually parse an Object[] array in our MyDTO constructor, it was a worthy tradeoff. In the ResultTransformer, we injected a version-specific WrapperFactory through Spring. We changed our queries to allow ResultTransformer to instantiate MyDTO, and voila! Problem solved. Below are our modified query and DTO class: "select t1.data from mytable t1" public class MyDTO { private MyWrapperClass wrapper; public MyDTO(Object[] fields, WrapperFactory wrapperFactory) { T data = (T) fields[0]; wrapper = wrapperFactory.newWrapper(data); } } As per my comments to Guillaume, the Interceptor did not work as hoped. Presumably because MyDTO is not a persistent class. We also tried having the DTO access the ApplicationContext directly through a singleton class, and from there obtaining the WrapperFactory. Although this worked, it predictably fubar'd our unit tests, and we scrapped the approach.
