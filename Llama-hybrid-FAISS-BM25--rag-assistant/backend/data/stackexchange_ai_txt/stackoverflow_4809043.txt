[site]: stackoverflow
[post_id]: 4809043
[parent_id]: 4808301
[tags]: 
Some things I have learned with respect to NULL values -- trying to avoid a duplicate answer :-) Additionally, relevant information is also presented in the Wikipedia article NULL: Controversy (and surrounding context). Not all RDBMS systems behave the same. In SQL Server, NULL is considered a unique-ing value in an UNIQUE column/index. In SQLite a NULL may appear many times and does not count as a duplicate value . Apparently the SQL92 specification is ambiguous in this regard. NULL is NULL -> true (standard and correct) but NULL = NULL -> ??? It should be false, but this depends upon RDBMS and settings! In SQL Server this can be controlled by the ANSI_NULLS setting. This can make a join misbehave if running under a different context! Depending upon RDMBS similar behavior can also apply to other operations. Please always use/support proper SQL equality! Different RDBMs systems may also use a different physical table layout and when a column is NULLABLE it may mean that space is not reserved in the record (this is true for CHAR(100) or XML (the stub bit) in SQL Server, for instance). If this record needs to be updated after the initial creation (e.g. was initially NULL ) this can lead to excess fragmentation in certain circumstances . However, this should only be something to note and I would be hesitant to make general decisions based around such an implementation detail as there are other factors in play! Make sure to define what NULL means Unfortunately there is no NOTSET or INVALID values to complement NULL . Each column should have the particular meaning of NULL defined. Does it mean "invalid value" or "value not specified" or "value not know", etc? It may require mixing NULL with non-NULL sentinel values (or not using NULL at all or using additional state columns/relationships) to achieve the correct business logic. Happy SQL'ing.
