[site]: stackoverflow
[post_id]: 4936009
[parent_id]: 4876495
[tags]: 
Instead of opening the Window in AddNew mode I disable all data entry controls when the window loads or the when a search returns no records. When the "Add New Record" button is clicked I ALWAYS start over with a new data context that contains just one new entity. This means I have to prompt to save changes if any dirty (modified) records exist. The prompt allows the user to save changes, discard changes or continue editing (never entering AddNew mode). Here is the AddNew code: MessageBoxResult response = PromptToSaveChanges(ReasonForPromptToSave.LoadingData); if (response == MessageBoxResult.Cancel) return; LabSample newEntity = _labEntitiesContext.LabSamples.CreateObject (); _labEntitiesContext.LabSamples.AddObject(newEntity); _labSamplesCollectionViewSource.Source = new ObservableCollection (); _labSamplesListCollectionView = (ListCollectionView)_labSamplesCollectionViewSource.View; _labSamplesListCollectionView.AddNewItem(newEntity); _labSamplesListCollectionView.CommitNew(); _labSamplesListCollectionView.Refresh(); Here are my steps to put the window in AddNew mode: 1) Prompt to save changes. 2) Create a new entity and add it to my data context. 3) Create a new ObservableCollection of my entity type and assign it to the .Source of my CollectionViewSource. Note the _labSamplesCollectionViewSource is a reference to the XAML's CollectionViewSource that was auto-generated by dragging a table from the data sources window. 4) Assign the .View of the CollectionViewSource to a class level ListCollectionView variable. 5) Add the new entity to the ListCollectionView that was just created. 6) Call CommitNew and Refresh on the ListCollectionView I have answered my own question here, but keep in mind that the answer is the result of trial and error and may not be ideal. Regarding my confusion as to how the _labEntitiesContext is hooked up to the CollectionViewSource I believe the answer is in the line that reads _labSamplesListCollectionView.AddNewItem(newEntity), but I'd like to see an explanation of how all of the objects reference each other. My final comment/question is that I'm disappointed at how hard it is to find a standard reference application or document that teaches non-MVVM WPF/Entity Framework databinding in detail. Microsoft promotes drag-and-drop binding but leaves us without a reference on how to build a complete application. I'll move on to MVVM soon, meanwhile if anyone can direct me to a GREAT resource or feature complete application that is WPF, non-MVVM and Entity Framework I would greatly appreciate it.
