[site]: stackoverflow
[post_id]: 3859796
[parent_id]: 3859610
[tags]: 
Are you sure your LoadIcon calls return != NULL? LoadIcon always loads a 32x32 icon, MSDN says if hIconSm is NULL, it checks the icon resource for a icon with the correct size so maybe you should try to set hIconSm=NULL; You could use WM_SETICON Edit: //(Having your code from the start would have made things easier) #include #include "resource.h" MSG msg; HWND hwndwnd; HICON hMyIcon; LRESULT CALLBACK WndProc( HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam ) { switch ( message ) { case WM_CLOSE: DestroyWindow(hwnd);//exit( 0 ); break; case WM_DESTROY: PostQuitMessage(0); break; case WM_CREATE: // SendMessage(hwndwnd,WM_SETICON,ICON_SMALL,(LPARAM)hMyIcon); break; } return DefWindowProc( hwnd, message, wparam, lparam ); } int main(int ArgumentNum, char *arg[]) { /* You don't own/control the console window, don't use it's HWND if you don't have to. ...And there is even a function to get the HWND if you need it, no need for FindWindow char title[500]; GetConsoleTitleA( title, 500 ); HWND hwndConsole = FindWindowA( NULL, title ); HINSTANCE hInstance = (HINSTANCE)GetWindowLongPtr(hwndConsole, GWLP_HINSTANCE); */ HINSTANCE hInstance=GetModuleHandle(NULL); hMyIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_ICON1)); WNDCLASSEX wc; wc.cbSize = sizeof(WNDCLASSEX); wc.style = CS_DROPSHADOW; wc.lpfnWndProc = WndProc; wc.cbClsExtra = 0; wc.cbWndExtra = 0; wc.hInstance = hInstance; wc.hIcon = hMyIcon; wc.hCursor = LoadCursor(/*hInstance*/NULL, IDC_ARROW); wc.hbrBackground = (HBRUSH)GetStockObject( WHITE_BRUSH ); wc.lpszMenuName = 0; wc.lpszClassName = "Jacob"; #if 1 //The easy way wc.hIconSm = NULL;//hMyIcon; LoadIcon only loads 32x32 icons, you would get the wrong icon #else //The hard way wc.hIconSm = (HICON)LoadImage(hInstance,MAKEINTRESOURCE(IDI_ICON1),IMAGE_ICON,GetSystemMetrics(SM_CXSMICON),GetSystemMetrics(SM_CYSMICON),0); #endif RegisterClassEx(&wc); //create window hwndwnd = CreateWindow("Jacob", "My Window", WS_OVERLAPPEDWINDOW, 520 , 20, 300, 300, NULL, NULL, hInstance, NULL); ShowWindow(hwndwnd,SW_SHOW); while(GetMessage( &msg, /*hwndwnd*/NULL, 0, 0) >0 ) //normally not a good idea to specify a hwnd { TranslateMessage(&msg); DispatchMessage(&msg); } return msg.wParam; }
