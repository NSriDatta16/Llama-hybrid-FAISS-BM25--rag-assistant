[site]: stackoverflow
[post_id]: 4484920
[parent_id]: 4484810
[tags]: 
Size itself isn't a desideratum; it's just a "smell", a reason to investigate whether you should change the code. The purpose of a class is not to reduce file size. It is supposed to be the representation of the organizing principle of your code. If the different operations naturally form categories (ideally, because they are functionally cohesive, as Pangea suggests, but otherwise for any sound, articulatable reason), then break it up into separate manager classes. Other ideas: If the decision mechanism is data-driven, consider a functional map: interface Performer { public void perform(InputClass input); }; Map choices = new HashMap (); choices.put("choiceA", new Performer() { public void perform(InputClass input) { // ... do action A }); choices.put("choiceB", new Performer() { public void perform(InputClass input) { // ... do action B }); If the decision is made by code that is closely tied to the code that performs the action, you could re-think "perform" to mean "perform if you can, tell me if you can't": interface Performer { public boolean perform(InputClass input); }; List pipeline = new LinkedList (); pipeline.add(new Performer() { public void perform(InputClass input) { // ... do action A if you can }); pipeline.add( new Performer() { public void perform(InputClass input) { // ... do action B if you can }); Either way, you can seal the configuration inside the manager, expose it to the main function, even drive it from a config file. If none of the above is true, and there are simple a large, fixed number of things your manager has to do, consider biting the bullet and just letting the manager class swell up with a lot of small static functions.
