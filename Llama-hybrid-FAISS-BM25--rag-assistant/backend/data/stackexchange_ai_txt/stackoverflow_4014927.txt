[site]: stackoverflow
[post_id]: 4014927
[parent_id]: 4014734
[tags]: 
Maybe i'm just not smart enough to understand your code. But in my world i would built up a Queue and fill in all jobs that have to be done. Another thread (or BackgroundWorker) will take a look at this Queue and process all the jobs in the queue sequentially (like my answer here ). Maybe this is not very elegant due to the pull-mode by using a Thread.Sleep(1) in a loop. But this could be accomplished by creating a BindingQueue that derived from Queue and implements IBindingList . So you could just wait for such an event, dequeue and invoke an Action till the queue is empty and start over again.
