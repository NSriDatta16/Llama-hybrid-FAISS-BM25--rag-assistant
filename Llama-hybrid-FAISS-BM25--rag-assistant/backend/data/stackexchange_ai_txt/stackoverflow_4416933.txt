[site]: stackoverflow
[post_id]: 4416933
[parent_id]: 4416849
[tags]: 
You can use nm . Here is an example: test.c contains the example you posted: gcc -o test test.c nm -p -m test 00001fb0 (__TEXT,__text) non-external (was a private external) dyld_stub_binding_helper 00001fc4 (__TEXT,__text) non-external (was a private external) __dyld_func_lookup 00002010 (__DATA,__data) non-external dyld__mach_header 00002014 (__DATA,__data) non-external _m 00002018 (__DATA,__data) non-external _k.1510 0000200c (__DATA,__data) external _NXArgc 00002008 (__DATA,__data) external _NXArgv 00002000 (__DATA,__data) external ___progname 00001000 (absolute) [referenced dynamically] external __mh_execute_header 00002004 (__DATA,__data) external _environ 00001ff0 (__TEXT,__literal4) external _i 00001fd2 (__TEXT,__text) external _main 00001ff4 (__TEXT,__literal4) external _p 00002038 (__DATA,__common) external _x 00001f70 (__TEXT,__text) external start (undefined [lazy bound]) external _exit (from libSystem) You can use the technique described here to control which segment the variables go to. (In MS VC you can use #pragme data_seg("segname") ).
