[site]: stackoverflow
[post_id]: 1787361
[parent_id]: 
[tags]: 
Ideal data structure for mapping integers to integers?

I won't go into details, but I'm attempting to implement an algorithm similar to the Boyer-Moore-Horspool algorithm , only using hex color values instead of characters (i.e., there is a much greater range). Following the example on Wikipedia, I originally had this: size_t jump_table[0xFFFFFF + 1]; memset(jump_table, default_value, sizeof(jump_table); However, 0xFFFFFF is obviously a huge number and this quickly causes C to seg-fault (but not stack-overflow, disappointingly). Basically, what I need is an efficient associative array mapping integers to integers. I was considering using a hash table, but having a malloc'd struct for each entry just seems overkill to me (I also do not need hashes generated, as each key is a unique integer and there can be no duplicate entries). Does anyone have any alternatives to suggest? Am I being overly pragmatic about this? Update For those interested, I ended up using a hash table via the uthash library.
