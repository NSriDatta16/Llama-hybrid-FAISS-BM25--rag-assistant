[site]: stackoverflow
[post_id]: 1772747
[parent_id]: 143808
[tags]: 
See my suggestion made at Microsoft : https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=511300 You should vote for it ! Here is my last comment on it : Yes we are using incremental linking to build most of our projects. For the biggest projects, it's useless. In fact, it takes more time to link those projects with incremental linking (2min50 compared to 2min44). We observed that it doesn't work when size of ILK files is big (our biggest project generate an ilk of 262144 KB in win 32). Bellow, I list others things we tried to reduce link time: Explicit template instantiation to reduce code bloat. Small gain. IncrediLink (IncrediBuild give interesting gain for compilation but almost no gain for link). Remove debug information for libraries who are rarely debugged (good gain). Delete PDB file in « Pre-Build Event » (strangely it give interesting gain ex: 2min44 instead of 3min34). Convert many statics library to DLL. Important gain. Working with computer equiped with lot of RAM in order to maximize disk cache. The biggest gain. Big obj versus small obj. No difference. Change project options (/Ob1, /INCREMENTAL, Enable COMDAT folding, Embedding manifest, etc.). Some give interesting gain other not. We try to continuously maximize our settings. Maximize Internal linkage vs External linkage. It's a good programming practice. Separate software component as much as we can afford. You can than work in unit test that link fast. But we still have to interate things together, we have legacy code and we worked with third party component. Use secret linker switch /expectedoutputsize:120000000. Small gain. Note that for all our experimentation, we meticulously measured link time. Slow link time seriously cost in productivity. When you implement complex algorithm or track difficult bug, you want to iterate rapidly this sequence : modify some code, link, trace debug, modify some code, link, etc... Another point to optimize link time is the impact it have on our continuous integration cycle. We have many applications that shared common code and we are running continuous integration on it. Link time of all our applications took half the cycle time (15 minutes)... In thread https://blogs.msdn.microsoft.com/vcblog/2009/09/10/linker-throughput/ , some interesting suggestions were made to improve link time. On a 64 bits computer, why not offering an option to work with file completely in RAM ? Again, any suggestions that may help us reduce link time is welcome.
