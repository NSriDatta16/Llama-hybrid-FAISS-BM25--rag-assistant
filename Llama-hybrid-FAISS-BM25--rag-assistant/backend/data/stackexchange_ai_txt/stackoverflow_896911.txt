[site]: stackoverflow
[post_id]: 896911
[parent_id]: 896685
[tags]: 
Having a Relationship object is a good idea. I think the appropriate question here is "which use should be made of it?". Probably Parent and Child classes are extending the same Person superclass, so they'll have some attributes in common, age for example. In my idea, I can see the following: Parent and Child objects have to know each other, so both classes have to keep a link to the same Relationship. The Relationship object keeps a one-to-many relation between a single parent and a certain number of children, and it'll keep a reference to each Person object. This way you can implement the whole disbanding logic within the Relationshp object, more or less sophisticated as you wish. You can query the Relationship object to know which members of the family match your requirements to do something. You can make the relationship to disband (and destroy) safely, as it will know all members and would ask them to break the reference and then it would be ready to destroy, or ask to some member to leave the family, keeping the Relationship object alive. But that's not all. Relationship should be really a superclass, extended by HierarchicalRelationship and PeerRelationship (or FriendRelationship). This specialization lets you have Parent(s) and Child(ren) to link between other hierarchies in a completely traversal way. The true concept behind this is that your Relationship objects are the key to query and organize the whole bunch of Person objects (or Vertex objects) in a scalable and structured way, so the whole data domain you end up with is usable in any sense you like, whether you want to disband groups or walk a certain path (or railroad) between them. Sorry for the huge amount of metaphores.
