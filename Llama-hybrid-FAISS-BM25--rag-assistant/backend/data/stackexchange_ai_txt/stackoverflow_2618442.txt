[site]: stackoverflow
[post_id]: 2618442
[parent_id]: 2616993
[tags]: 
There are a number of factors that make Perl good for code golfing: No data typing. Values can be used interchangeably as strings and numbers. "Diagonal" syntax. Usually referred to as TMTOWTDI (There's more than one way to do it.) Default variables. Most functions act on $_ if no argument is specified. (A few act on @_ .) Functions that take multiple arguments (like split ) often have defaults that let you omit some arguments or even all of them. The "magic" readline operator, <> . Higher order functions like map and grep Regular expressions are integrated into the syntax (i.e. not a separate library) Short-circuiting operators return the last value tested. Short-circuiting operators can be used for flow control. Additionally, without strictures (which are off be default): You don't need to declare variables. Barewords auto-quote to strings. undef becomes either 0 or '' depending on context. Now that that's out of the way, let me be very clear on one point: Golf is a game. It's great to aspire to the level of perl-fu that allows you to be good at it, but in the name of $DIETY do not golf real code. For one, it's a horrible waste of time. You could spend an hour trying to trim out a few characters. Golfed code is fragile: it almost always makes major assumptions and blithely ignores error checking. Real code can't afford to be so careless. Finally, your goal as a programmer should be to write clear, robust, and maintainable code. There's a saying in programming: Always write your code as if the person who will maintain it is a violent sociopath who knows where you live. So, by all means, start golfing; but realize that it's just playing around and treat it as such.
