[site]: stackoverflow
[post_id]: 3017548
[parent_id]: 3017448
[tags]: 
The best way to manage this (whether you are using Mercurial, Git or any other revision control system) is to make sure your work is done on branches which correspond to these "parts of features". If there is even a small chance that some portion of work will need to be released independently from other work, it should have its own branch from the start. This gives you the flexibility to push just the "part of the feature", and is much better suited in the case where the "part of feature" and some other "part of the feature" both contain changes to the same file. The nice thing about using Mercurial or Git here is that managing these branches is trivial, so the cost to creating and using them (even if they turn out not to be necessary) is minimal. Now, you can't always foresee everything. If you do end up stuck in the situation you describe, though, it's easy to get out of. Say you had 100 changesets locally (not yet on the server) and you wanted to just push the current contents of 1 file. Create a clone of the repository you're working on back to the server revision, copy the file over, commit, push, and integrate back. In Mercurial this would look something like the following: $ cd ~/project $ hg clone http://server/project/trunk trunk-oops $ cp trunk/shouldve-branched trunk-oops/shouldve-branched $ cd trunk-oops; hg addrem; hg ci -m "We need to organize better!"; hg push $ cd ../trunk; hg fetch ../trunk-oops
