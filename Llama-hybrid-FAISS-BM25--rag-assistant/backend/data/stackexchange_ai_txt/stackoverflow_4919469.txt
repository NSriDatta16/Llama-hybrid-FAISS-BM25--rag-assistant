[site]: stackoverflow
[post_id]: 4919469
[parent_id]: 4919410
[tags]: 
I think you are confusing some concepts here. First of all, MVC is not exactly a design pattern but more a general concept of organizing an application. B/c there is not one or the best implementation for an MVC. MVC is just what your common sense tells you about structuring data processing. Seperating what you see, from what is going on internally and what information is processed at all. Singletons are usually used b/c in an MVC you have lots of different objects using the same resources. To organize that you can use Registry implemented as a singelton to give access to the DB for example. Best regards Raffael EDIT: actually there are many different views on what a useful realization of an MVC-structure should look like. For example, in books you usually see three boxes, labelles 'model', 'view' and 'controller'. And they are all connected by arrows. IMO the connection between 'view' and 'model' should be left out, cause the model should be handled by the controller which communicates with the view. Also I think it is very important to distinguish between business logic and the controller. Get's easily mixed up. But BL belongs to the model tier. In that sense I don't think of the MVC as a something like a triangle but more of a three-tier-system V/C/M.
