[site]: stackoverflow
[post_id]: 471814
[parent_id]: 
[tags]: 
Issues with embedding IronPython 2 in a C# web application

First Some Background (incase it helps): My application is a Web-based framework recently upgraded to v3.5 of the .Net Framework but does not use a Master Pages / User Controls system. It's more akin to the MVC pattern (although much older) and outputs pure HTML down the response stream from Templates. The Python expressions allow some rules and template variations to be achieved. The old way When embedding the IronPython 1.x engine in C#, we were able to do code such as: PythonEngine pe = new PythonEngine(); Assembly a = Assembly.LoadFile("path to assembly"); pe.LoadAssembly(a); pe.Import("Script"); there is no Import() method in ipy 2.0 and the ImportModule() method doesn't seem to work the same way. The Import() alleviated the need to put a line in every python script we write, such as: from MyAssembly import MyClass the fact that MyClass is full of static methods, means that calls to MyClass.MyMethod() work really well. I can't just instansiate an object and assign it to a variable in scope as the assembly that MyClass is contained in is dynamically loaded at runtime. Now to the issue I have sorted out all the other parts of the integration of IronPython 2.0 but would prefer not to require my implementers to type "from MyAssembly import MyClass" at the top of every script they write (just seems silly when it was not necessary in ipy 1.x) and likely to be a support issue for a while too. And finally the question Has anyone had this issue and resolved it? Am I doing things the wrong way for the DLR? or am I missing something obvious? I'm not sure of the detail required for someone to help, but I hope this is enough.
