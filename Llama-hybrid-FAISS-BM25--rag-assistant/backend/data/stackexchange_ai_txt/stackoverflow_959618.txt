[site]: stackoverflow
[post_id]: 959618
[parent_id]: 932241
[tags]: 
Besides binary format and other "packaging" features (which might not be exactly trivial either) There are also consequences that you find in nearly every code fragments. Stuff like PIC might cause every global access to rely on system specific assumptions on reloading the GOT pointer, and assumptions on additional offsets. Many systems have a specific ABI, passing small structs in registers, skipping registers for alignment purposes, reserving registers for special purposes Some have several (like ARM EABI and OABI) thread local storage related issues, variables that are instantiated per thread are tightly coupled to the facilities the OS specifies. Register choice, offsets etc. Some OSes (most notably) windows have support for a certain format of exception handling to allow cross-language and even cross-machine(via DCOM) exception handling. Higher level cross-program systems (like COM, but also e.g. Objective C interoperability on Mac, or compability with a certain KDE-gcc versioncombination) might also have certain requirements on VMT layout. Some linkers and formats support offsets negative to a section, some not. Note that this is just a braindump of stuff that could be interesting to look into. It is probably not complete, and not all might apply. Some of the points above might overlap (e.g. reserving a register for TLS or PIC is also an ABI change)
