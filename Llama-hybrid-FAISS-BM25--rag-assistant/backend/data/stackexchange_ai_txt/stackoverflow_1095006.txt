[site]: stackoverflow
[post_id]: 1095006
[parent_id]: 1088622
[tags]: 
There are several ways to create an array of strings in C. If all the strings are going to be the same length (or at least have the same maximum length), you simply declare a 2-d array of char and assign as necessary: char strs[NUMBER_OF_STRINGS][STRING_LENGTH+1]; ... strcpy(strs[0], aString); // where aString is either an array or pointer to char strcpy(strs[1], "foo"); You can add a list of initializers as well: char strs[NUMBER_OF_STRINGS][STRING_LENGTH+1] = {"foo", "bar", "bletch", ...}; This assumes the size and number of strings in the initializer match up with your array dimensions. In this case, the contents of each string literal (which is itself a zero-terminated array of char) are copied to the memory allocated to strs. The problem with this approach is the possibility of internal fragmentation; if you have 99 strings that are 5 characters or less, but 1 string that's 20 characters long, 99 strings are going to have at least 15 unused characters; that's a waste of space. Instead of using a 2-d array of char, you can store a 1-d array of pointers to char: char *strs[NUMBER_OF_STRINGS]; Note that in this case, you've only allocated memory to hold the pointers to the strings; the memory for the strings themselves must be allocated elsewhere (either as static arrays or by using malloc() or calloc() ). You can use the initializer list like the earlier example: char *strs[NUMBER_OF_STRINGS] = {"foo", "bar", "bletch", ...}; Instead of copying the contents of the string constants, you're simply storing the pointers to them. Note that string constants may not be writable; you can reassign the pointer, like so: strs[i] = "bar"; strs[i] = "foo"; But you may not be able to change the string's contents; i.e., strs[i] = "bar"; strcpy(strs[i], "foo"); may not be allowed. You can use malloc() to dynamically allocate the buffer for each string and copy to that buffer: strs[i] = malloc(strlen("foo") + 1); strcpy(strs[i], "foo"); BTW, char (*a[2])[14]; Declares a as a 2-element array of pointers to 14-element arrays of char.
