[site]: stackoverflow
[post_id]: 5203698
[parent_id]: 5203284
[tags]: 
To add to the existing answers with some context: Objective-C is a strict superset of C. Quite a lot of the language is convention rather than syntax. For example, the use of 'dealloc' to do what a formal destructor does in other languages is just a convention of classes that inherit from NSObject. The compiler doesn't recognise your dealloc method as being in any way distinct from the others. One of the pragmatic decisions that allows objects to be grafted onto the C runtime is that they always live on the heap, never on the stack. The C mechanism for keeping track of something on the heap is a pointer. As a result, in Objective C you keep hold of all objects by pointer. The autorelease pool then ameliorates the syntactic burden that would result in cases where you really want to act like things are on the stack. So they're used to keep things on the heap, as already answered. And objects are kept on the heap because memory management relies on convention and because doing so allowed objects to be added to the C runtime with de minimis changes.
