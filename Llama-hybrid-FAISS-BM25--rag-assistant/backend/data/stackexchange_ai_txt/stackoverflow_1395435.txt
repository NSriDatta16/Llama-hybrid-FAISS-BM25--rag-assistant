[site]: stackoverflow
[post_id]: 1395435
[parent_id]: 1382636
[tags]: 
The Devil's Advocate Defends x86 Architecture I'm not going to defend the MS x86 assembler itself, but see here for my comments on it. (You might want to go with the gnu one, possibly via Cygwin .) And certainly the lack of registers, the special-purpose nature of most of them, and the odd, twisted, non-orthogonal organization of the whole thing did seem to represent a classic don't do it this way example. Oh wait, how about hugely elaborate features of just epic complexity, that no one ever wanted or ever really used? You know, the segmentation unit? Regarding the difficulty of learning, I think it's fun to write x86 assembly, though I can't quite put my finger on why that is. No instruction set architecture is really all that complex, so I think you will be able to comprehend x86 with a reasonably small level of effort, although I agree it's certainly got more elements than a RISC ISA. But it's fun , a few unusually subdivided registers, some other special purpose ones, and a number of instruction formats, but mostly using the same 1.5 address format. Back to the defense: On Lack of Registers : This didn't matter in the end. Even the RISC architectures eventually went to register renaming , despite their boatload of architectural registers they still needed more for performance. So x86 is maybe better, because everyone gets zillions of automatic renamed ones but x86 only needs to save a small number of arch registers. On Complex ISA : Intel always handled this, at first with brute force superior process technology (the 286 was quite fast in its day) and today by translation: the x86 opcodes in RAM are transcoded into micro-ops as they are read into cache, thus isolating the CPU core from x86! Today, x86 is kind of an "instruction compression" scheme, just an encoding that is unravelled as program code is read by the CPU. Somethings they split instructions, sometimes they combine consecutive ones, and sometimes they just translate them.
