[site]: datascience
[post_id]: 121496
[parent_id]: 121369
[tags]: 
I would disagree with the statement that "training a model on aggregated data is harder than training a model on raw data". It is different, but I wouldn't say fundametally . It ultimately depends on the application, or the problem that you are trying to solve. E.g., for the small data sample you presented, I see no problem in training a logistic regression classifier on the "raw" table to predict the click variable, and on a data set that is aggregated somehow to predict, as you say, whether the click-through-rate is good/bad. It is 100% possible and legit thing to do. Consider the following two scenarios. Scenario 1: you want to have a real-time model that based on feature_1 , feature_2 , ... feature_n will predict whether a user will click on some ad. The model runs in real-time, e.g., a user is doing something on a web-site, some features are being calculated and fed into a model whose decisions influence which ads are being shown on the site. You want this model to be trained on a "raw" data set, in the format as you've presented. Scenario 2: you want to have a daily prediction of the click-through-rate for the ads being shown on a web-site, so that you can estimate how successful a particular marketing campaign is. For this case, you need to aggregate your data on a daily level, so that your test & train data sets are from the same distribution. Some script is run daily, runs a model on the data from the previous day and compiles a report for the following day. Scenario 1 runs as a real-time model, Scenario 2 runs the model as a batch job. Both models can be built from the same algorithm, e.g., as I mentioned logistic regression, or any other basically. The intrinsic difference is in the utility, or the application of the model. How you interpret its results is how you get some value out of it. In Scenario 1, you want a model to predict/model a single user interaction, in Scenario 2 you want to capture the complete user behaviour in a single day. Tightly connected to the application of the model is the topic of feature engineering. I wouldn't go too much into this, as it is domain/problem-specific endeavour. If you are interested in the theory of learning, I suggest you go through this Wikipedia page and the links therein. You can also take a look at the chapter 5 about learning in this book . Its been a while since I've read it, so my knowledge on this subject is bit fuzzy. Hope this helps you.
