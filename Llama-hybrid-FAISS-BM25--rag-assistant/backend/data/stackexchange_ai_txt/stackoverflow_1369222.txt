[site]: stackoverflow
[post_id]: 1369222
[parent_id]: 1368849
[tags]: 
As long as you're using Django version 1.1, you can use the new aggregation features to calculate the average whenever you need it. Something like: from django.db.models import Avg beers_with_ratings = Beer.objects.all().annotate(avg_rating=Avg('beer__overallrating')) Now each Beer object will have an avg_rating property which is the average of the overallrating fields for each of its associated Ratings. Then to get the top 100: beers_with_ratings.order_by('avg_rating')[:100] As regards database choice, either is perfectly fine for this sort of thing. Aggregation is a basic feature of relational databases, and both Postgres and Mysql can do it with no problem.
