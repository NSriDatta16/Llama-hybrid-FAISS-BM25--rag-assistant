[site]: stackoverflow
[post_id]: 1405396
[parent_id]: 
[tags]: 
jQuery Draggable, Droppable, ASP.NET MVC

I've been looking through a lot of tutorials on jQuery draggable/droppable, and trying to apply it to ASP.NET MVC, but I am really confused. Most of the samples I keep finding seem pretty difficult to understand at least where it pertains to where things are wired. I'm basically trying to have a targetable box (a 'roster') and a list of units ('attendees'). The goal is to be able to drag any of the units into the box, and they are added to the roster in the database. Does anyone know of some simpler samples that might shed some light on how to use this part of jQuery with ASP.NET MVC? For instance, I've been looking at http://philderksen.com/2009/06/18/drag-and-drop-categorized-item-list-with-jquery-and-aspnet-mvc-part-1/ and it is pretty neat, but it just doesn't explain what I need. It doesn't make a lot of sense and most of the code is pretty strewn about, and I can't even trace where certain calls are being made to figure out how things are wired. (How is jQuery calling the Controller actions, for instance, to trigger when something is dropped? How do I get the ID of the item being dragged so I can add it to the target?) Here, I made some changes - I apologize for the confusion. It still isn't quite working how I'm trying to get it to. Is it possible to make it not fire events if things are re-arranged in their original list, but only when dropped onto another list? >" %> Index Index Drop here #draggable { width: 100px; height: 100px; padding: 0.5em; float: left; margin: 10px 10px 10px 0; } #droppable { width: 150px; height: 150px; padding: 0.5em; float: left; margin: 10px; } $(function() { $(".itemList").sortable({ connectWith: ".itemList", containment: "document", cursor: "move", opacity: 0.8, placeholder: "itemRowPlaceholder", update: function(event, ui) { //Extract column num from current div id var colNum = $(this).attr("id").replace(/col_/, ""); $.post("/Home/UpdateSortOrder", { columnNum: colNum, sectionIdQueryString: $(this).sortable("serialize") }); } }); }); Alright, I'm trying to follow Phil's instructions, this is what I have so far... I hope I am even on the right track. This is all very new to me. I'm trying and trying, but the 'update' stuff is never firing. . . >" %> Index Index Drop here .draggable { width: 100px; height: 100px; padding: 0.5em; float: left; margin: 10px 10px 10px 0; } #droppable { width: 150px; height: 150px; padding: 0.5em; float: left; margin: 10px; } $(function() { $("#sortable").sortable({ update: function(event, ui) { //Extract column num from current div id var colNum = $(this).attr("id").replace(/item_/, ""); $.post("UpdateSortOrder", { columnNum: colNum, sectionIdQueryString: $(this).sortable("serialize") }); } }); $("#droppable").droppable({ drop: function(event, ui) { $(this).find('p').html('Dropped!'); //Extract column num from current div id var colNum = $(this).attr("id").replace(/item_/, ""); $.post("UpdateSortOrder", { columnNum: colNum, sectionIdQueryString: $(this).sortable("serialize") }); } }); }); And the Item.ascx " %> "> Drag me to my target And the repository... using System; using System.Linq; namespace Draggable { public partial class ItemRepository { DatabaseDataContext database = new DatabaseDataContext(); public IQueryable GetItems() { var items = from i in database.Items select i; return items; } } } And the controller using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc; using System.Web.Mvc.Ajax; namespace Draggable.Controllers { public class HomeController : Controller { // // GET: /Index/ public ActionResult Index() { ItemRepository repository = new ItemRepository(); return View("Index", repository.GetItems()); } public ActionResult Item() { return View(); } } } This method gets the styling a lot closer to how your sample is ...but it really doesn't work. It doesn't get the id of the element - but making the elements themselves sortable doesn't seem to work either.... >" %> Index Index Drop here $(function() { $(".itemList").sortable({ connectWith: ".itemList", containment: "document", cursor: "move", opacity: 0.8, placeholder: "itemRowPlaceholder", update: function(event, ui) { //Extract column num from current div id var colNum = $(this).attr("id").replace(/col_/, ""); alert(colNum); $.post("/Home/UpdateSortOrder", { columnNum: colNum, sectionIdQueryString: $(this).sortable("serialize") }); } }); });
