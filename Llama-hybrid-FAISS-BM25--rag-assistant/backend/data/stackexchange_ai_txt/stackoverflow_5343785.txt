[site]: stackoverflow
[post_id]: 5343785
[parent_id]: 
[tags]: 
nHibernate [TransactionAttribute] for UoW conflicts with Repository Pattern

Doing research into the best way to design IRepository structures, I came across a project called 'Whiteboard' (http://whiteboardchat.codeplex.com/) while looking through some forums for NHProf . I dug around its source code for a while, and found a really interesting attribute for MVC called TransactionAttribute , defined as follows; (I have made brief adjustment to suit my IoC solution) using System; using System.Linq; using Ninject; namespace System.Web.Mvc { /// /// This will allow ASP.NET MVC to apply Transactions to the controllers. /// [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class)] public class TransactionAttribute : ActionFilterAttribute { [Inject] public NHibernate.ISession Session { get; set; } public override void OnActionExecuting(ActionExecutingContext filterContext) { Session.BeginTransaction(); } public override void OnActionExecuted(ActionExecutedContext filterContext) { if (Session.Transaction.IsActive) { if (filterContext.Exception == null) { Session.Flush(); Session.Transaction.Commit(); } else { Session.Transaction.Rollback(); } } } } } This is really interesting; And useful, however something about it bothers me. When I run my queries using NHProf , it gives me warnings about 'Not using transactions properly', and suggests I wrap all queries in a Transaction . Alright, that's fine and good... So then I go and decorate my Repository : IRepository class like this ... public T Update(T instance) { using (var transaction = session.BeginTransaction()) { // attempt to perform the given update session.SaveOrUpdate(instance); try { // commit the transaction to the database transaction.Commit(); // update succeeded, so we'll return true return instance; } catch { // restore the database to its previous state if we failed. transaction.Rollback(); // update failed, so return a null object return default(T); } } } Here's the problem I am running into. Everywhere I read, the common practice is to always use a Repository for adding to the collections. However the TransactionAttribute , which in itself was brought to my attention by Ayende Rahien 's blog, who is from what I can gather one of the primary developers of NHProf , and one of the people working on this Whiteboard project, makes the assumption that you are performing Repository commands at the MVC Controller Level. So which is it? I'm utterly confused now where my Transaction logic is supposed to go for the best practice. I'm literally finding conflicting answers, and in some cases from the same people.
