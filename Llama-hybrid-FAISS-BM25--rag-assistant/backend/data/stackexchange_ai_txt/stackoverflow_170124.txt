[site]: stackoverflow
[post_id]: 170124
[parent_id]: 169902
[tags]: 
EDIT The assumption below of the invariance of angle ratios is incorrect. Projective transformations instead preserve cross-ratios and incidence. A solution then is: Find the point C' at the intersection of the lines defined by the segments AD and CP. Find the point B' at the intersection of the lines defined by the segments AD and BP. Determine the cross-ratio of B'DAC', i.e. r = (BA' * DC') / (DA * B'C'). Construct the projected line F'HEG'. The cross-ratio of these points is equal to r, i.e. r = (F'E * HG') / (HE * F'G'). F'F and G'G will intersect at the projected point Q so equating the cross-ratios and knowing the length of the side of the square you can determine the position of Q with some arithmetic gymnastics. Hmmmm....I'll take a stab at this one. This solution relies on the assumption that ratios of angles are preserved in the transformation. See the image for guidance (sorry for the poor image quality...it's REALLY late). The algorithm only provides the mapping of a point in the quadrilateral to a point in the square. You would still need to implement dealing with multiple quad points being mapped to the same square point. Let ABCD be a quadrilateral where A is the top-left vertex, B is the top-right vertex, C is the bottom-right vertex and D is the bottom-left vertex. The pair (xA, yA) represent the x and y coordinates of the vertex A. We are mapping points in this quadrilateral to the square EFGH whose side has length equal to m. Compute the lengths AD, CD, AC, BD and BC: AD = sqrt((xA-xD)^2 + (yA-yD)^2) CD = sqrt((xC-xD)^2 + (yC-yD)^2) AC = sqrt((xA-xC)^2 + (yA-yC)^2) BD = sqrt((xB-xD)^2 + (yB-yD)^2) BC = sqrt((xB-xC)^2 + (yB-yC)^2) Let thetaD be the angle at the vertex D and thetaC be the angle at the vertex C. Compute these angles using the cosine law: thetaD = arccos((AD^2 + CD^2 - AC^2) / (2*AD*CD)) thetaC = arccos((BC^2 + CD^2 - BD^2) / (2*BC*CD)) We map each point P in the quadrilateral to a point Q in the square. For each point P in the quadrilateral, do the following: Find the distance DP: DP = sqrt((xP-xD)^2 + (yP-yD)^2) Find the distance CP: CP = sqrt((xP-xC)^2 + (yP-yC)^2) Find the angle thetaP1 between CD and DP: thetaP1 = arccos((DP^2 + CD^2 - CP^2) / (2*DP*CD)) Find the angle thetaP2 between CD and CP: thetaP2 = arccos((CP^2 + CD^2 - DP^2) / (2*CP*CD)) The ratio of thetaP1 to thetaD should be the ratio of thetaQ1 to 90. Therefore, calculate thetaQ1: thetaQ1 = thetaP1 * 90 / thetaD Similarly, calculate thetaQ2: thetaQ2 = thetaP2 * 90 / thetaC Find the distance HQ: HQ = m * sin(thetaQ2) / sin(180-thetaQ1-thetaQ2) Finally, the x and y position of Q relative to the bottom-left corner of EFGH is: x = HQ * cos(thetaQ1) y = HQ * sin(thetaQ1) You would have to keep track of how many colour values get mapped to each point in the square so that you can calculate an average colour for each of those points.
