[site]: stackoverflow
[post_id]: 4896138
[parent_id]: 4895793
[tags]: 
Ideally, an object's state should always be valid . This is usually more a matter of internal state rather than externally visible state, but you could apply the concept here. If having an empty name or data, or an ID of 0 isn't valid (if an ID of 0 is a marker for "doesn't exist in persistant storage", then it's valid), then it's not best practice. The reason for insisting the code keep the object valid and not the programmer is that doing otherwise relies on the programmer reading the class's documentation. When someone using your class in their e-commerce site e-mails you a complaint that the orders they receive have blank items, you'll see the wisdom of this approach. To implement the best-practice of always keeping valid state in PHP, you can use the factory pattern, as Mat√≠as mentions, or simply have static methods on product to create products (which is a little simpler than the factory pattern; these methods are technically just constructors). Alternatively, you can use func_get_args to manually implement constructor overloading (examine the arguments and take different actions depending on what they are). This will catch invocation errors at run-time rather than compile-time, and is in this way inferior to the other approaches. Of course, it could be perfectly valid for products to be missing some properties during script execution, but invalid for the properties to be missing for stored objects. If this is the case, the code that stores/retrieves product s would enforce non-empty properties.
