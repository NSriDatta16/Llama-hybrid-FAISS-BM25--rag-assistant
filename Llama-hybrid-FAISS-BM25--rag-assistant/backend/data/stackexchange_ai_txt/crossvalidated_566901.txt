[site]: crossvalidated
[post_id]: 566901
[parent_id]: 
[tags]: 
Uncovering which frequencies two systems are communicating on by observing reoccurring time correlated signals and their frequencies

Suppose you have a set of communication systems {A, B, C, D}, which speak with each other as well as other systems not contained in the set. Our concern is how they speak with each other. They communicate via frequencies between 0-100 and some unknown translation frequencies {t1, t2, …tn}. A detection method allows us to observe the active signals on the systems to be: A: array([(at1, af1), …(atn, afn)] . . . D: array([(dt1, df1), …(dtn, dfm)]) Where at and dt are the times in which signals are observed on the systems A and B respectively, and af and df are the corresponding frequencies. We are interested in knowing at which frequencies (and implied translation frequencies) these systems are communicating with each other. For example if we see that every time the frequency 32.8 appears active on system A, within a few seconds 47.8 appears on system C, then A-32.8 and C-47.8 are signals of interest and 15 is a possible translation frequency between the two systems. One particular challenge is that the detection process adds some noise to the frequencies, for example A-32.8763 and A32.8801 may or may not be the same signal—and since these systems are very busy it can be difficult to recognize “same signals”. It is also worth mentioning that the system can output two different signals at the same time and communicate with different systems at the same time, but not at the same frequency. I’m looking to build a Python script which can take in these arrays and automatically detect these pairings. So far I’ve come up with the following: Group signals based on similar frequency via quantization or clustering algorithm. Again, there are probably many false groupings but hopefully this suffices. For each signal generate a vector where each entry represents a time period, test a few different period blocks (i.e. second, 10 seconds, minute)—if the signal was active during that time periods then the value is 1, if not it’s value will be zero. Pull vector pairs based on the following criteria: a) come from different systems, b) have similar total appearances. For each pair calculate the jaccard distance. Choose signal of interest based off of 4. This is a terribly inefficient method. I was wondering if there was some known statistical method to capture these types of relationships. I’m also unsure if the false groupings will obfuscate possible signals of interest by exaggerating the total count of appearances. I’m testing this algorithm on a mock dataset I made, where I tried to generate data that would mimic this scenario. It works well at capturing these signals of interest and their translation frequencies however it takes quite a while to run. But more importantly, I need a script that will work a wide variety of similar scenario data. For example if I upped the communication to systems not contained in the set by a factor of 20 or so then the frequency detection errors cause different signal frequencies to start to overlap and grouping signals based on their frequency becomes impossible. As of right now I still don’t have access to the real dataset I plan to use this on. I’m a novice in signal processing and time series analysis.
