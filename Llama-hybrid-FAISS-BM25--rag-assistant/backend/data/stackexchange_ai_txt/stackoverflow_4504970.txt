[site]: stackoverflow
[post_id]: 4504970
[parent_id]: 3903142
[tags]: 
Sorry for the really late delay, hope you're still looking for this. Note this does NOT use the SDK - it just uses System.IO.Packaging and Linq (and XML Literals). Anyway, here's what to do: Create a presentation. On slide 3, add 4 textboxes. Put text in three of them and name them "Sample1", "Sample2" and "Sample3". In the last textbox, put two lines of text and then makes those lines bullet points. Name it "ListSample1". That's all you need. Then save the file and note the path, and change the filePath variable below to reflect your presentation's path. Run the below in a Console app: Imports System.IO Imports System.IO.Packaging ''# Add reference to WindowsBase for this Imports Imports Imports Module Module1 Public Const documentRelationshipType As String = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Sub Main() Dim slide, document As XElement Dim pptPackage As Package = Nothing Dim slidePart, documentPart As PackagePart Dim filePath As String = "C:\Users\Me\Documents\visual studio 2010\Projects\FillPowerPoint\FillPowerPoint\sample.pptx" pptPackage = Package.Open(filePath, FileMode.Open, FileAccess.ReadWrite) Using pptPackage Dim documentRelationship As PackageRelationship = pptPackage.GetRelationshipsByType(documentRelationshipType).FirstOrDefault Dim documentUri As Uri = PackUriHelper.ResolvePartUri(New Uri("/", UriKind.Relative), documentRelationship.TargetUri) documentPart = pptPackage.GetPart(documentUri) document = XElement.Load(New StreamReader(documentPart.GetStream)) Dim slideList = From e In document. . Dim slideIndex As Integer = 3 ''# this is the slide number we want, 1-based Dim slideReference As String = slideList(slideIndex - 1).@r:id.ToString slidePart = pptPackage.GetPart(PackUriHelper.ResolvePartUri(documentPart.Uri, documentPart.GetRelationship(slideReference).TargetUri)) slide = XElement.Load(New StreamReader(slidePart.GetStream)) ''# Replace just text value in Sample1 textbox Dim Sample1 = From e In slide. . . Where e. . .@name = "Sample1" Select e. . . . .SingleOrDefault Sample1.Value = "new text in sample 1" ''# Replace text and make bold inn Sample2 textbox Dim Sample2 = From e In slide. . . Where e. . .@name = "Sample2" Select e. . . .SingleOrDefault Sample2. .SingleOrDefault.Add(New XAttribute("b", 1)) Sample2. .SingleOrDefault.Value = "new bold text in sample 2" ''# Replace text and make bold inn Sample2 textbox Dim Sample3 = From e In slide. . . Where e. . .@name = "Sample3" Select e. .SingleOrDefault Sample3. .Remove() Dim newParagraphs As XElement = Sample3 With a new paragraph Sample3.SingleOrDefault.Add(newParagraphs.Elements) ''# Create a new list of bullets Dim s() As String = {"Bullet 1", "Bullet 2", "Bullet 3"} Dim ListSample1 = From e In slide. . . Where e. . .@name = "ListSample1" Select e. .SingleOrDefault ListSample1. .Remove() ListSample1.SingleOrDefault.Add(From e In s Select ) slide.Save(slidePart.GetStream) End Using End Sub End Module Sorry, I know this is heavily weighted towards VB and XML Literals, but C# should be able to do the same thing with some conversion work.
