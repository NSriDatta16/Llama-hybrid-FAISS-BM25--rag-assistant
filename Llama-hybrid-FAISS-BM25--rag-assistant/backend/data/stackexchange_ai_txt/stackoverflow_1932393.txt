[site]: stackoverflow
[post_id]: 1932393
[parent_id]: 1932245
[tags]: 
In my opinion you have a broken design. What you want to do can't be done. Think about this... How does code that calls the function that returns the DirextX9 device type know that that function exists? What happens if it gets an ABC * that points at an instance of the DirectX10 functionality? In my opinion, what you should do is figure out the major abstractions that exist in all versions of DirectX (which, being a Unix geek is an API with which I am wholly unfamiliar and think you ought to be using the cross-platform OpenGL instead). Then you create an interface for each abstraction and make it into an ABC. The interfaces for each ABC only mention other ABCs. Then you derive a specific class for each abstraction that implements it in terms of the types and functions of a specific version of the DirectX API. Now, you might end up with something like this: class Sprocket; class Widget { public: virtual void squeak() = 0; virtual bool nudgeSprocket(Sprocket *sp); }; class Sprocket { public: virtual void turn() = 0; }; class GoldWidget { public: void squeak(); bool nudgeSprocket(Sprocket *sp); }; class GoldSprocket { public: void turn(); virtual int glitter(); }; class SilverWidget { public: void squeak(); bool nudgeSprocket(Sprocket *sp); }; class SilverSprocket { public: void turn(); virtual int shine(); }; Now, it may be that you only have machines made out of gold or silver but not both. And you might decide that GoldWidget::nudgeSprocket(Sprocket *sp) needs to be able to call GoldWidget::glitter() on its sp argument, and that this will be perfectly safe. In my (and may others) opinion, this is a design error. One of two things should be true. Either the nudgeSprocket method should be implemented in terms of the generic Sprocket interface, or there should be a class that knows it is dealing with a GoldWidget and will call a version of nudgeSprocket that takes a GoldSprocket as an argument. I would suggest reading about design patterns as I think knowing about this particular way of thinking about things will help you organize your thoughts about how to do this and result in a relatively clean design. In particular, I suspect the Adapter pattern , the Bridge pattern , and the Facade pattern used in some combination might work well for helping you solve your problem.
