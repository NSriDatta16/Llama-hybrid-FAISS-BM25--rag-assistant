[site]: stackoverflow
[post_id]: 588337
[parent_id]: 580383
[tags]: 
Any object orientated DAL connecting to any storage system that is not saving objects implements an ORM. ORM is generally understood to mean something like Hibernate, but the important thing is the handling of impedance mismatches. [Expanded] At a data level, an impedance mismatches occur when you are mapping data of one type (relational) into data of another (OO). For instance, how many times have you seen a line like below in your DAL? db.AddInParameter(dbCommand, "Name", DbType.String, name); Or the other side customerId = Convert.ToInt64(dr["CustomerID"].ToString()); Many issues come up when mapping your primitive data types. At a object level, your DAL should be returning the structures you intend to use. Be it some sort of business object or just a bunch of raw data. Both your own DAL and the ORM need to handle this. At a design level, the objects you construct are reflective of your stored data. So a structural difference can occur. These are also handled for you within ORM solutions, but you would be forced to do the same within a DAL. For example, within your OO code it would be nice to implement proper inheritance, but that does not covert easily into something relational. I just wanted to point out that ORM is a term coined to push products that automate a lot of what you would already have to do within your DAL. The ORM solutions will make life easier and provide a large number of quality/performance benefits. But that doesn't change the fact that one of the major components of your DAL is creating your own ORM.
