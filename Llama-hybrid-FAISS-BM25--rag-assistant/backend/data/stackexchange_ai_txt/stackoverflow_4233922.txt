[site]: stackoverflow
[post_id]: 4233922
[parent_id]: 
[tags]: 
Why is my Profiling Class extremely slow?

I have never done profiling. Yesterday I programmed a ProfilingTimer class with a static timetable (a map ) for time storage. The constructor stores the starting tick, and the destructor calulates the elapsed time and adds it to the map: ProfilingTimer::ProfilingTimer(std::string name) : mLocalNameLength(name.length()) { sNestedName += name; sNestedName += " > "; mStartTick = Platform::GetTimerTicks(); } ProfilingTimer::~ProfilingTimer() { long long totalTicks = Platform::GetTimerTicks() - mStartTick; sTimetable[sNestedName] += totalTicks; sNestedName.erase(sNestedName.length() - mLocalNameLength - 3); } In every function (or {block}) that I want to profile i need to add: ProfilingTimer _ProfilingTimer("identifier"); This Profiling work all fine when I build a release version from Visual C++ 2010 Professional. But when I build as Debug I get a huge fps drop (from 63 down to ~20). These are the numbers I get when I print my timetable (Debug build): Update() > Tower::Update > : 2551 ms (84100m%) Update() > Tower::Update > Tower::Update1 > : 1313 ms (43284m%) Update() > Tower::Update > Tower::Update1 > Tower::FindNewTarget > : 6 ms (204m%) Update() > Tower::Update > Tower::Update1 > Tower::HasTargetInRange > : 5 ms (184m%) Update() > Tower::Update > Tower::Update2 > : 659 ms (21756m%) Update() > Tower::Update > Tower::Update2 > Tower::HasTargetInRange > : 5 ms (187m%) Update1 and Update2 times the first and second half respectively of Update. Why doesnt they add up to 84,1 %? Still this 84% is a huge number - in release build I get this output: Update() > : 770 ms (1549m%) Update() > Tower::Update > : 722 ms (1452m%) Update() > Tower::Update > Tower::FindNewTarget > : 44 ms (89m%) Update() > Tower::Update > Tower::HasTargetInRange > : 92 ms (187m%) 1,4% instead of 84,1%. That is a huge difference! Anyone knows why? EDIT: I guess release is much faster than Debug, but why is this profiling so time consuming? Is std::map the time hogger or am I doing something extremely wrong? EDIT: Updated the code. The initiation wasn't needed, and now stores the length of mLocalName instead of the actual string.
