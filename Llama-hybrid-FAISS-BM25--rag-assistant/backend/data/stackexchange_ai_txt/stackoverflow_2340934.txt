[site]: stackoverflow
[post_id]: 2340934
[parent_id]: 2337650
[tags]: 
Making lots of the member static doesn't make it a 'static class'. It's just a class like any other, with static member functions. You don't really need to do this anyway: just make ClientManager a normal class and create a single one of them in your game. I second the advice to use a std::vector instead of your own array. This will make your code more robust and make it easier for you to set up Clients, using the proper constructor for each one instead of using some sort of default constructor for the lot of them. You shouldn't worry about memory fragmentation - that's such an esoteric low level detail that you shouldn't even be thinking about it. The chance of it being a problem for you is astronomically small. But even if it was to be a problem, we couldn't diagnose it based on what you've posted here, because we don't know what makes up a Client class. There's no point having a carefully managed pool in the ClientManager class if the Client class itself references all sorts of memory elsewhere. At this stage you should concentrate on writing robust and correct code, and optimise later if needed. You may as well return a pointer from ClientManager::get. Just make sure you check to see if it's null before using it. You can entirely remove the need to return Clients from ClientManager if you choose a different interface, eg. passing the operation do_something along with the data into a member of the ClientManager which will look up the client and call the operation if the client was found, or report an error if it was not. (Although there's no good reason why it would not be found, if your ClientManager is correct.)
