[site]: stackoverflow
[post_id]: 1989905
[parent_id]: 1989868
[tags]: 
The short answer is 'yes'. Objects are a state of mind. You can organize your work in objects in assembly language with a few macros, or in PL/I, or C, or C++. Some people might insist that it isn't an object without some sort of binding of dispatch to objects. Well, kernel/C object models use functions pointers to accomplish, somewhat more manually, what languages like C++, C#, or Java do. What, after all, is an 'object'? Answer 1: any lump of data that groups some related items. Any c struct . Some people would bridle and insist on ... Answer 2: the combination of data and functions, such that code 'calls' the object, and the results depend on conditions set up by the creator of the object. So, in C++ or C# or Java, there is inheritance. Code calls SomeObject.someFunction() , and what happens depends on the inheritance graph, which is controlled by the object author, not by the caller. In kernels, and in the pleistocene era when some of us learned to program, we accomplish(ed) the same thing, more or less, with simpler languages, using function pointers. That is to say, a slot in a structure that stores a reference to a function. The caller calls someobject.throwAnEgg , and what actually happens depends on what function pointer is sitting in `throwAnEgg'.
