[site]: stackoverflow
[post_id]: 4126477
[parent_id]: 4126088
[tags]: 
Check out the Boost.Exception library and most precisely this page in the paragraph titled Adding of Arbitrary Data to Active Exception Objects : void parse_file( char const * file_name ) { boost::shared_ptr f = file_open(file_name,"rb"); assert(f); try { char buf[1024]; file_read( f.get(), buf, sizeof(buf) ); } catch(boost::exception & e ) { e Personally I find the technic pretty effective. Modify the exception (adding context) and rethrow. Contrary to Java, in C++ you decide whether or not you include the stack frame when building your exception, so you don't incur the risk of losing it and it'll still refer to the point of the code that threw the first exception, while having significant context.
