[site]: stackoverflow
[post_id]: 2002565
[parent_id]: 2002170
[tags]: 
For similar behaviour like Controls being bound to object properties, for any Type you can implement the same interfaces. Based on that thought, you can subclass ToolStripButton ( or desired Type to have bindings ) and implement IBindableComponent for it. This works for all kinds of source and target Types as long as they're not sealed . For example, your tool strip button: public class BindableToolStripButton : ToolStripButton, IBindableComponent { //... This will cause the BindableToolStripButton to have its own .DataBindings property whereas the base ToolStripButton class doesn't have such a propery. You would need to follow through on filling out implementation details using examples seen here from Microsoft for ISite , IBindableComponent , IComponent and any inherited interfaces. Then you would add Binding instances to any instance of BindableToolStripButton. (Note: I only have fragements so will make my first community wiki post - and we'll see how that goes... )
