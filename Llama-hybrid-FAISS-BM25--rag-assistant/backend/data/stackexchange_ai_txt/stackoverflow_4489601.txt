[site]: stackoverflow
[post_id]: 4489601
[parent_id]: 4489119
[tags]: 
The way to do this is to traverse the document and search each text node for the desired text. Any way involving innerHTML is hopelessly flawed. Here's a function that works in all browsers and recursively traverses the DOM within the specified node and replaces occurrences of a piece of text with nodes copied from the supplied template node replacementNodeTemplate : function replaceText(node, text, replacementNodeTemplate) { if (node.nodeType == 3) { while (node) { var textIndex = node.data.indexOf(text), currentNode = node; if (textIndex == -1) { node = null; } else { // Split the text node after the text var splitIndex = textIndex + text.length; var replacementNode = replacementNodeTemplate.cloneNode(true); if (splitIndex Here's an example use: replaceText(document.body, "cheese", document.createTextNode("CHEESE IS GREAT")); If you prefer, you can create a wrapper function to allow you to specify the replacement content as a string of HTML instead: function replaceTextWithHtml(node, text, html) { var div = document.createElement("div"); div.innerHTML = html; var templateNode = document.createDocumentFragment(); while (div.firstChild) { templateNode.appendChild(div.firstChild); } replaceText(node, text, templateNode); } Example: replaceTextWithHtml(document.body, "cheese", "cheese is fantastic "); I've incorporated this into a jsfiddle example: http://jsfiddle.net/timdown/azZsa/
