[site]: stackoverflow
[post_id]: 4676600
[parent_id]: 4675672
[tags]: 
I think the solution here is to not write migrations which have any external dependencies. Your migrations should not depend on the past or current state of your model in order to execute. That doesn't mean that you can't use your model objects, just that you shouldn't use the versions found in whatever version of your code happens to be installed when you run a particular migration. Instead consider redefining your model objects within your migration file. In most cases I find that an empty model class extending ActiveRecord::Base or a very stripped down version of the model class I was using at the time I wrote the migration allows me to write a reliable, future proof, migration without needing to convert ruby logic into SQL. #20110111193815_stop_writing_fragile_migrations.rb class StopWritingFragileMigrations false #do some transform which would be difficult for me to do in SQL ModelInNeedOfMigrating.all.each do |model| model.update_attributes! :fancy_flag => true if model.created_at.cwday == 1 && model.matches_business_rule? #... end end def self.down #undo that transformation as necessary #... end end
