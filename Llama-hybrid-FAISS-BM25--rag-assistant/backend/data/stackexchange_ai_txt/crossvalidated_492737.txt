[site]: crossvalidated
[post_id]: 492737
[parent_id]: 
[tags]: 
How to incorporate multiple likelihoods in a probabilistic graphical model with Stan?

Data composition: In beta testing of a video game, users were assigned tasks in a many-to-many relationship. At the end of every day, users were asked to self evaluate (for each task) whether they progressed, stagnated, or atrophied on the task assigned. (In this game, if too long of a period elapsed, challenges, enemies, etc. repopulated.) Note the current and ending classes are 'one hot': user, task, curr_1, curr_2, curr_3, end_1, end_2, end_3, lag 1, A, 1, 0, 0, 0, 1, 0, 0 1, A, 0, 1, 0, 0, 0, 0, 1 ... Analysis: I'm developing a Bayesian probabilistic graphical model that has two components: (A) Models the ending class given: {current class, number of days} where there are 3 unique starting/end classes: {progression, stagnation, atrophy} and (B) A latent factor model that learns the user and item associations with these classes taking inspiration from (multiple) item response theory . Parameters: C (3,3) matrix of coefficients representing the relative strength of association between current class and ending class. B (3,3) matrix of coefficients representing the sensitivity to lag (time since first day) of the association between current and ending classes. (ie atrophy -> atrophy might have a strong relationship but not have a strong sensitivity to time elapsed whereas stagnation -> atrophy might have a weak relationship, but be very sensitive to time elapsed.) Theta (1,3) vector The predicted ending class given current class and time elapsed. z_user (N,3) matrix where each user has an association with each ending class z_task (K,3) matrix where each task has an association with each ending class Model: For each row in data (user, item, current_class, ending_class, time elapsed): v = C*curr_class + B*C*time // vector, all but 1 element will be 0 due to one-hot nature theta = softmax(v) ending_class ~Dirichlet(theta, ending_class) //likelihood theta ~Dirichlet(ending_class, z_user - z_task) //likelihood z_user ~Normal(0,1) //prior z_task ~Normal(0,1) //prior C ~Normal(0,1) //prior B ~Normal(0,1) //prior My questions: In my design, I'm using two likelihood functions where theta can be penalized by the ending class in two different ways: Either OR needs updating (or potentially all four.) Is the scheme/design valid? Should I alternate use likelihood functions, holding one "side of the problem" constant will evaluating the other? These are very generic priors, would you recommend others? I'm struggling to implement this into Stan and would request some help (optional) Any other advice you'd like to offer? Edit1: Why this is useful to me: Without the time component, I'm able to learn task difficulty and user ability. This helps rank users and tasks in terms of their ability/difficulty. However, the problem is that it doesn't give us the ability to quickly assess new users and tasks; with the time component, this could greatly speed up our ability to accurately infer where a new user and/or task stand. For example, we don't want to say "This brand new task is the hardest thing we've ever made!" Then find out that our model only believed it to be so because a handful of users tried it over a short period of time.)
