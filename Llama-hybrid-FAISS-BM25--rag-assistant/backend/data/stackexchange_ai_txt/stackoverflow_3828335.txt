[site]: stackoverflow
[post_id]: 3828335
[parent_id]: 3828307
[tags]: 
The terminating null is there to terminate the string. Without it, you need some other method to determine it's length. You can use a predefined length: char s[6] = {'s','t','r','i','n','g'}; You can emulate pascal-style strings: unsigned char s[7] = {6, 's','t','r','i','n','g'}; You can use std::string (in C++). (since you're not interested in std::string). Preferably you would use some pre-existing technology that handles unicode, or at least understands string encoding (i.e., wchar.h ). And a comment: If you're putting this in a program intended to run on an actual computer, you might consider typedef-ing your own "string". This will encourage your compiler to barf if you ever accidentally try to pass it to a function expecting a C-style string. typedef struct { char[10] characters; } ThisIsNotACString;
