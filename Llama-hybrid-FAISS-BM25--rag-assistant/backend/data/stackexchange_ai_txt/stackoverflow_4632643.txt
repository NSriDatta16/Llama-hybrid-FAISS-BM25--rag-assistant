[site]: stackoverflow
[post_id]: 4632643
[parent_id]: 4632611
[tags]: 
You're almost certainly hitting a platform limit. If you only have a 32-bit address space, 4G is as much as you can hope to address. In reality, it will be much less since part of the address space will be taken up by other things. With a 64-bit address space, it may be possible but, once you get to that level of allocation, you should ask yourself if it's actually necessary. A way of solving the problem is to use out-of-memory storage such as disk and only bring into memory what's needed. In other words, segment the data structure into (for example) 1M chunks and process it 1M at a time. There are plenty of caching algorithms you can use to do this efficiently depending on the usage patterns of your data structure. For example, for truly sequential access, you could have one chunk in memory at a time. For truly random access, you may want to have several chunks in memory at a time in a cache scenario - each in-memory structure stores both the 1M of data and it's location in the out-of-memory storage so you can use LRU algorithms and write-back of dirty data, and so forth.
