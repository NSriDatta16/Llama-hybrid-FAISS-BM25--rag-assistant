[site]: crossvalidated
[post_id]: 373007
[parent_id]: 371711
[tags]: 
This answer is not theoretical but practical and might work in some cases. Use with cautions since it is not guaranteed to work for all cases. Since $f(t)$ change slowly, it is possible to split it into several order 2 polynomials and still have many points. Instead of decomposing the time series in trend + seasonality, we split it and detrend it. After that, we fit the AR(1) model. We take a rolling window approach and only consider fits that are significant (p-value real alpha = 0.1 estimated alpha = 0.12591253250291573 standard deviation = 0.08668464697167208 The code I used is provided below. import pandas as pd from matplotlib import pylab as plt from statsmodels.tsa.arima_model import ARMA import seaborn as sns import statsmodels.api as sm import random import numpy as np import statsmodels %matplotlib inline random.seed(1) #defining the trend function def trend(t, amp=1): return amp*(1 + np.sin(t/10)) #length of time series n_time_steps = 250 #amplitud of time series amplitud=10 noise_frac_aplitud= 0.5 #initializing the time series time_series = np.zeros(n_time_steps) time_series[0] = trend(0, amplitud) #The AR(1) parameter. Our goal will be to find this parameter. alpha = 0.1 #making the time series for t in range(1,n_time_steps): time_series[t] = (1 - alpha)*time_series[t - 1] + alpha*trend(t, amp=amplitud) + alpha*np.random.normal(0,noise_frac_aplitud*amplitud) #passing the time series to a pandas format dates = sm.tsa.datetools.dates_from_range('2000m1', length=len(time_series)) time_series_pd= pd.Series(time_series, index=dates) window = 40 n_iter = n_time_steps - window alpha_list = [] alpha_elite_list = [] #n_time_steps for i in range(n_iter): #not rolling window but intervals... to fix temp_time_series_pd = time_series_pd[i:window + i] plt.plot(temp_time_series_pd) res = sm.tsa.detrend(temp_time_series_pd, order=2) mod = ARMA(res, order=(1,0)) ar1_fit = mod.fit() score = statsmodels.tsa.arima_model.ARMAResults(mod,ar1_fit.params) #The alpha parameter is... alpha_list.append(1 - ar1_fit.params[1]) if score.pvalues[1]
