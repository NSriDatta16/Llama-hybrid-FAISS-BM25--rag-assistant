[site]: stackoverflow
[post_id]: 3222688
[parent_id]: 3222096
[tags]: 
I am going to answer what I believe are the main points of your question. First, how much test-code should you write? Well, Test-Driven Development can be of some help here. I do not use it as strictly as it is proposed in theory, but I find that writing a test first often helps me to understand the problem I want to solve much better. Also, it will usually lead to good test-coverage. Secondly, which classes should you test? Again, TDD (or more precisely some of the principles behind it) can be of help. If you develop your system top down and write your tests first, you will have tests for the outer class when writing the inner class. These tests should fail if the inner class has bugs. TDD is also tightly coupled with the idea of Design for Testability . My answer is not intended to solve all your problems, but to give you some ideas.
