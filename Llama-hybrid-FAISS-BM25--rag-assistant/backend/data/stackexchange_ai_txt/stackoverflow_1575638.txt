[site]: stackoverflow
[post_id]: 1575638
[parent_id]: 
[tags]: 
Multithread-safe JDBC Save or Update

We have a JMS queue of job statuses, and two identical processes pulling from the queue to persist the statuses via JDBC. When a job status is pulled from the queue, the database is checked to see if there is already a row for the job. If so, the existing row is updated with new status. If not, a row is created for this initial status. What we are seeing is that a small percentage of new jobs are being added to the database twice. We are pretty sure this is because the job's initial status is quickly followed by a status update - one process gets one, another process the other. Both processes check to see if the job is new, and since it has not been recorded yet, both create a record for it. So, my question is, how would you go about preventing this in a vendor-neutral way? Can it be done without locking the entire table? EDIT: For those saying the "architecture" is unsound - I agree, but am not at liberty to change it.
