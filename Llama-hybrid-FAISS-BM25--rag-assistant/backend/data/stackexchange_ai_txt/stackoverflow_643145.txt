[site]: stackoverflow
[post_id]: 643145
[parent_id]: 642933
[tags]: 
I'd highly recommend refactoring this to be: protected virtual void LoadFieldDataEditor(Control control, string strFieldName) As mentioned in a few comments, this method does not need generics at all. Since you're constraining to a Control, you know the base class, and it's a reference type (Control), so you can avoid the generics and the ref parameter declaration. Since Control is a reference type, you are free to change it's properties in the method, and this will work correctly. Setting .Text, etc, will do exactly what you are trying to do, but be much simpler. There is a small chance that you could need it to be: protected virtual void LoadFieldDataEditor(ref Control control, string strFieldName) but this would only be required if you were going to reassign control inside your method (ie: control = new TextBox(); ). I would strongly recommend against doing that, as it can cause some very unexpected behavior and would not be obvious. If you are trying to create a new control, using an out parameter, or just returning the new control would make everything much more clear. Also, in general, it's a good idea to avoid generic methods unless there is a good reason to include them. The FxCop team has added (and later removed) some rules trying to discourage their use because they tend to make code less understandable in the long run. There are many good reasons for using generic methods, but this doesn't require their use, so I would recommend avoiding them.
