[site]: stackoverflow
[post_id]: 4486469
[parent_id]: 1624618
[tags]: 
Messaging Design Pattern (MDP) and pattern implementation - Published in the 17th conference on Pattern Languages of Programs (PLoP 2010). Abstract Interchange of information (i.e. messaging) is an inherent part of nature and man-made processes. Messaging is a ubiquitous part of the world around us. Conventional software methodologies and component technologies overlook messaging and therefore provide an incomplete model. On the other hand, a messaging paradigm and the associated messaging design pattern (MDP) address this gap and provide a more complete and accurate model of the real world. As a consequence, software engineering processes and techniques are improved significantly. While designing and manufacturing software, we need to think not only in terms of software components, but also in terms of the messaging being exchanged between these entities. Encapsulation, decoupling and reusability are improved while reducing complexity. This paper also discusses how the messaging design pattern is utilized to implement or help implement other well-known design patterns like Gang of Four design patterns (GoF), Data Access Objects (DAOs), and J2EE design patterns. Keep in mind that most of the design patterns are, at some level, responsible for interchanging information between participants. The overall design and UML diagrams are simplified and streamlined making them easier to understand and implement. The resulting software design and implementation are also more robust and straightforward. Design patterns implemented using MDP, can be reused to provide transparent and secure access to remote components/services as the basis for a complete distributed component model.
