[site]: stackoverflow
[post_id]: 963109
[parent_id]: 962282
[tags]: 
After looking at the solutions for this question (draggable tabs in Swing), I found that the actual TabbedPaneUI has some methods that can fix both problems: Only drag window in tab area, which turned out to be the hardest part, and not drag when above the tabs themselves. The relevant code follows, in the two sections marked with "// ::". The code is adapted from the question-mentioned Kirill-code. The code doesn't handle other cases than when the tabs are at top - which makes sense when considering what I want to do. // mouse listener for dragging the host window MouseAdapter adapter = new MouseAdapter() { int lastX; int lastY; boolean _dragInitiated; @Override public void mousePressed(MouseEvent e) { TabbedPaneUI ui = _windowTabs.getUI(); // :: Won't drag if we're positioned above a tab in tab area if (ui.tabForCoordinate(_windowTabs, e.getX(), e.getY()) != -1) { _dragInitiated = false; return; } // :: Won't drag if we're below the tab area int maxY = 0; for (int i = 0; i maxY) { maxY = y; } } _dragInitiated = true; if (maxY > 0) { if (e.getY() > maxY) { _dragInitiated = false; } } Point eventLocationOnScreen = e.getLocationOnScreen(); if (eventLocationOnScreen == null) { Component source = (Component) e.getSource(); eventLocationOnScreen = new Point(e.getX() + source.getLocationOnScreen().x, e.getY() + source.getLocationOnScreen().y); } lastX = eventLocationOnScreen.x; lastY = eventLocationOnScreen.y; } @Override public void mouseDragged(MouseEvent e) { if (!_dragInitiated) { return; } Point eventLocationOnScreen = e.getLocationOnScreen(); if (eventLocationOnScreen == null) { Component source = (Component) e.getSource(); eventLocationOnScreen = new Point(e.getX() + source.getLocationOnScreen().x, e.getY() + source.getLocationOnScreen().y); } int dx = eventLocationOnScreen.x - lastX; int dy = eventLocationOnScreen.y - lastY; Window win = POTabbedFrame.this; Point loc = win.getLocation(); win.setLocation(loc.x + dx, loc.y + dy); lastX = eventLocationOnScreen.x; lastY = eventLocationOnScreen.y; } }; _windowTabs.addMouseListener(adapter); _windowTabs.addMouseMotionListener(adapter);
