[site]: stackoverflow
[post_id]: 3159706
[parent_id]: 3074124
[tags]: 
I recently faced a similar decision - here's some things that strongly influenced our decision: ASMX and PageMethods run within the ASP.NET service, so they can share the same session data as the ASP.NET pages. If you make heavy use of the session (I won't address whether that's a good practice or not - that's a different discussion entirely), then being able to share it between your page calls and webservice calls can be a significant benefit. In our case, we actually store certain authorization info in the session - if we chose to implement our webservices as WCF, we would also need to roll our own single-sign-on framework between the webservice and ASP.NET service. Nothing wrong with that, but it's design/dev/testing time you may not want to invest. If your Webservice is hosted on a different address/port than your ASP.NET service, then all calls to it from your page will be considered cross-site scripting (XSS) and will be significantly limited by the browser. There's workarounds to this (mostly in the form of JSONP), but those workarounds have limitations as well; for example, only GET-type http requests are supported. Since ASMX/PageMethods are executed within the ASP.NET server itself, they won't be considered XSS requests. Of course, if you can guarantee that your WCF service will always be deployed on the same address/port as your ASP.NET server, they won't be considered XSS either - in that case, this issue is moot. From a future-proofing standpoint, it's likely that WCF will see more attention (patches, enhancements, etc.) from MS than will ASMX/PageMethods. However, NO technology is completely future-proof (you don't think we'll still be writing WCF services 10 years from now, do you? ;). So you really have to measure your own compfort level (or your clients') with regard to ASMX's possible future deprecation.
