[site]: stackoverflow
[post_id]: 1495665
[parent_id]: 1481754
[tags]: 
Internally Code-Only caches metadata so, once the first context has been created you should see very little difference in performance between Code-Only and the EDMX approach. You are right that a large number of entities can slow down EF. Pregenerating Views is often recommended to help performance with large models. But that feature relies on having an EDMX file, so not surprisingly it doesn't work with Code-Only. However if you find you need to pre-compile views you could always to use the ToEdmx() feature of CodeOnly to move from the CodeOnly world to the standard EDMX world. And of course once in the EDMX world you can pre-compile your views. However this is not necessarily the approach I would take. I think a context with 100 or more IQueryable properties is less than ideal from a useability perspective anyway. So rather than move away from Code-Only to pre-gen views, I'd probably leverage Code-Only's ability to make it easy to create smaller targeted subdomains, to minimize the effective size of the model for the part of the App you are working on. The result would be a number of fast, easy to use ObjectContexts, targeted for the current set of tasks. Which IMHO is much more desirable. Hope this helps Alex
