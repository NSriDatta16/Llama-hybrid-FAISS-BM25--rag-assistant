[site]: stackoverflow
[post_id]: 4240484
[parent_id]: 
[tags]: 
Properly implementing a Delegate & Protocol

I created this test case as a simple example of my problem. The AppDelegate initializes the TestViewController and adds it to the window The TestViewController initializes the TestView and makes it the view The TestView initializes the TestSubView and adds it as a subview My goal is to allow TestSubView, through a delegate, access to TestViewController's methods & variables. In this example TestSubView accesses the methods through either a touchesBegan or touchesMoved. Please Help. Thank you. EDIT: Still doesn't work, though no more errors. What I did: Moved the protocol definition to a separate file and imported it, retain to assign, and removed the @protocol TestDelegate declaration in the beginning of the header. I think my problem is that I don't assign the delegate in the TestViewController.m, if that's the problem how would I do that? TestViewController.h #import @interface TestViewController : UIViewController { int number; } -(void)assignNumber:(int)value; -(void)displayNumber; @property int number; @end Moved to protocol.h and imported where needed @protocol TestDelegate -(void)assignNumber:(int)value; -(void)displayNumber; @end TestViewController.m #import "TestViewController.h" #import "TestView.h" @implementation TestViewController @synthesize number; - (void)loadView { TestView *myView = [[TestView alloc] initWithFrame:CGRectMake(0,0,320,480)]; self.view = myView; [myView release]; } -(void)assignNumber:(int)value { NSLog(@"Number Assigned"); number = value; } -(void)displayNumber { NSLog(@"%i",number); } TestSubView.h #import #import "TestViewController.h" @interface TestSubView : UIView { id delegate; } @property (nonatomic, retain) id delegate; @end TestSubView.m #import "TestSubView.h" #import "TestViewController.h" @implementation TestSubView @synthesize delegate; - (id)initWithFrame:(CGRect)frame { if ((self = [super initWithFrame:frame])) { // Initialization code [self setBackgroundColor:[UIColor redColor]]; [self setUserInteractionEnabled:YES]; } return self; } - (void)dealloc { [super dealloc]; } - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event { [self.delegate assignNumber:5]; } - (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event { [self.delegate displayNumber]; }
