[site]: stackoverflow
[post_id]: 91054
[parent_id]: 90940
[tags]: 
You can use existing memory debugging tools for this, I found Memory Validator 1 quite useful, it is able to track both API level (heap, new...) and OS level (Virtual Memory) allocations and show virtual memory maps. The other option which I also found very usefull is to be able to dump a map of the whole virtual space based on VirtualQuery function. My code for this looks like this: void PrintVMMap() { size_t start = 0; // TODO: make portable - not compatible with /3GB, 64b OS or 64b app size_t end = 1U 0) { // dump information about this region printf(.... some buffer information here ....); // track longest feee region - usefull fragmentation indicator if (buffer.State&MEM_FREE) { if (buffer.RegionSize>longestFreeApp) longestFreeApp = buffer.RegionSize; } addr += buffer.RegionSize; index+= buffer.RegionSize/pageSize; } else { // always proceed addr += pageSize; index++; } } printf("Longest free VM region: %d",longestFreeApp); }
