[site]: stackoverflow
[post_id]: 1791168
[parent_id]: 1790550
[tags]: 
You could use coroutines. They are similar to generators, but allows you to send in values. Coroutines was added in Python 2.5, so this won't work in versions before that. def running_average(): sum = 0.0 count = 0 value = yield(float('nan')) while True: sum += value count += 1 value = yield(sum/count) ravg = running_average() next(ravg) # advance the corutine to the first yield for i in xrange(10): avg = ravg.send(cauchy(3,1)) print 'Running average: %.6f' % (avg,) As a list comprehension: ravg = running_average() next(ravg) ravg_list = [ravg.send(cauchy(3,1)) for i in xrange(10)] Edits: Using the next() function instead of the it.next() method. This is so it also will work with Python 3. The next() function has also been back-ported to Python 2.6+. In Python 2.5, you can either replace the calls with it.next() , or define a next function yourself. (Thanks Adam Parkin)
