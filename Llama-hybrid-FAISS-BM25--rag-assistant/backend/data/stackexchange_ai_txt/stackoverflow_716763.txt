[site]: stackoverflow
[post_id]: 716763
[parent_id]: 50255
[tags]: 
As a Lisp programmer I would wish that the Java community understands the following difference: functions as objects vs. closures . a) functions can be named or anonymous . But they can also be objects of themselves. This allows functions to be passed around as arguments, returned from functions or stored in data structures. This means that functions are first class objects in a programming language. Anonymous functions don't add much to the language, they just allow you to write functions in a shorter way. b) A closure is a function plus a binding environment . Closures can be passed downwards (as parameters) or returned upwards (as return values). This allows the function to refer to variables of its environment, even if the surrounding code is no longer active. If you have a) in some language, then the question comes up what to do about b) ? There are languages that have a) , but not b) . In the functional programming world a) (functions) and b (functions as closures) is nowadays the norm. Smalltalk had a) ( blocks are anonymous functions) for a long time, but then some dialects of Smalltalk added support for b) (blocks as closures). You can imagine that you get a slightly different programming model, if you add functions and closures to the language. From a pragmatic view, the anonymous function adds some short notation, where you pass or invoke functions. That can be a good thing. The closure (function plus binding) allows you for example to create a function that has access to some variables (for example to a counter value). Now you can store that function in an object, access it and invoke it. The context for the function object is now not only the objects it has access to, but also the variables it has access to via bindings. This is also useful, but you can see that variable bindings vs. access to object variables now is an issue: when should be something a lexical variable (that can be accessed in a closure) and when should it be a variable of some object (a slot ). When should something be a closure or an object? You can use both in the similar ways. A usual programming exercise for students learning Scheme (a Lisp dialect) is to write a simple object system using closures. The result is a more complicated programming language and a more complicated runtime model. Too complicated?
