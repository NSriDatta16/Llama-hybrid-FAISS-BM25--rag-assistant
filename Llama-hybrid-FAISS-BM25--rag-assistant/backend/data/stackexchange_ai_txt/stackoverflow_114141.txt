[site]: stackoverflow
[post_id]: 114141
[parent_id]: 113077
[tags]: 
In stead of implementing templating systems on top of a templating system (PHP itself), creating overhead per default, you can go for a more robust solution like XSL Transformations , which also complies with the MVC princples (provided you seperate your data-retrieval; plus, I personally split the logic from displaying the XML with different files). Imagine having the following information in an array, which you want to display in a table. Array { [car] => green [bike] => red } You easily create a script that outputs this information in XML: echo " \n"; foreach(array_keys($aVehicles) as $sVehicle) echo "\t ".$sVehicle." ".$aVehicles[$sVehicle]." \n"; echo " \n"; Resulting in the following XML: car green bike red Now this is all excellent, but that won't display in a nice format. This is where XSLT comes in. With some simple code, you can transform this into a table: Et voila, you have: car green bike red Now for this simple example, this is a bit of overkill; but for complex structures in big projects, this is an absolute way to keep your scripting logic away from your markup.
