[site]: stackoverflow
[post_id]: 1228078
[parent_id]: 690150
[tags]: 
I marked Kent's response as an answer, and I would have marked bendewey's as well, because I used both of them in the final solution. The file was definitely locked because the file name was all that was being bound, so the Image control opened the actual file to produce the image. To Solve this, I created a Value Converter like bendewey suggested, and then I used (most of) the code form Kent's suggestion to return a new BitmapImage: [ValueConversion(typeof(string), typeof(BitmapImage))] public class PathToBitmapImage : IValueConverter { public static BitmapImage ConvertToImage(string path) { if (!File.Exists(path)) return null; BitmapImage bitmapImage = null; try { bitmapImage = new BitmapImage(); bitmapImage.BeginInit(); bitmapImage.StreamSource = new FileStream(path, FileMode.Open, FileAccess.Read); bitmapImage.CacheOption = BitmapCacheOption.OnLoad; bitmapImage.EndInit(); bitmapImage.StreamSource.Dispose(); } catch (IOException ioex) { } return bitmapImage; } #region IValueConverter Members public virtual object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) { if (value == null || !(value is string)) return null; var path = value as string; return ConvertToImage(path); } public virtual object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) { throw new NotImplementedException(); } #endregion } As the comments suggest above, however, this did not solve the problem. I have been away on other projects and recently returned to this one reinvigorated to find the solution. I created another project that only tested this code, and of course it worked. This told me that there was more amiss in the original program. Long story short, the Image was being generated in three places, which I thought had been addressed: 1) The ImageList, now bound using the Converter. 2) The main Image which was bound to the ImageList SelectedItem property. 3) The DeleteImage popup, which was bound using the Converter. It turns out the problem was in #2. By binding to the SelectedItem, I mistakenly assumed I was binding to the newly rendered Image (based on the Converter). In reality, the SelectedItem object was in fact the file name. This meant that the main Image was again being built by directly accessing the file. So the solution was to bind the main Image control to the SelectedItem property AND employ the Converter.
