[site]: stackoverflow
[post_id]: 2213737
[parent_id]: 2213730
[tags]: 
Those two things are fundamentally different . The former is a field of a delegate type while the latter is really a method. The tiniest difference I can think of is that you can modify the first one dynamically at runtime and assign another method reference to it while the second is fixed. You shouldn't normally prefer the first over the second if your purpose is to write a simple method for a class in C#. An example that makes the first extremely fragile: var c = new SomeClass(); c.SampleMethod = inputParam => inputParam.ToLower(); c.DoSomeTaskThatReliesOnSampleMethodReturningAnUpperCaseString(); c.SampleMethod = null; c.DoSomeTaskThatCallsSampleMethod(); // NullReferenceException This style of programming is common in language like Javascript where an object is fundamentally a dynamic creature built upon a simple dictionary.
