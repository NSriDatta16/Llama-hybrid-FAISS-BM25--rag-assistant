[site]: stackoverflow
[post_id]: 5305682
[parent_id]: 
[tags]: 
Locking with asynchronous httpwebrequest

I have an object that downloads a file from a server, saves it into Isolated Storage asynchronously and provides a GetData method to retrieve the data. Would I use a IsolatedStorageFile storageObj; //initialized in the constructor lock(storageObj) { //save code } In the response and lock(storageObj) { //load code } In the GetData method? Edit: I'll give some context here. The app (for Windows Phone) needs to download and cache multiple files from a server, so I've created a type that takes 2 strings (a uri and a filename), sends out for data from the given uri, and saves it. The same object also has the get data method. Here's the code (simplified a bit) public class ServerData: INotifyPropertyChanged { public readonly string ServerUri; public readonly string Filename; IsolatedStorageFile appStorage; DownloadState _downloadStatus = DownloadState.NotStarted; public DownloadState DownloadStatus { protected set { if (_downloadStatus == value) return; _downloadStatus = value; OnPropertyChanged(new PropertyChangedEventArgs("DownloadStatus")); } get { return _downloadStatus; } } public ServerData(string serverUri, string filename) { ServerUri = serverUri; Filename = filename; appStorage = IsolatedStorageFile.GetUserStoreForApplication(); } protected virtual void OnPropertyChanged(PropertyChangedEventArgs args) { if (PropertyChanged != null) PropertyChanged(this, args); } public void RequestDataFromServer() { DownloadStatus = DownloadState.Downloading; //this first bit adds a random unused query to the Uri, //so Silverlight won't cache the request Random rand = new Random(); StringBuilder uriText = new StringBuilder(ServerUri); uriText.AppendFormat("?YouHaveGotToBeKiddingMeHack={0}", rand.Next().ToString()); Uri uri = new Uri(uriText.ToString(), UriKind.Absolute); HttpWebRequest serverRequest = (HttpWebRequest)WebRequest.Create(uri); ServerRequestUpdateState serverState = new ServerRequestUpdateState(); serverState.AsyncRequest = serverRequest; serverRequest.BeginGetResponse(new AsyncCallback(RequestResponse), serverState); } void RequestResponse(IAsyncResult asyncResult) { var serverState = (ServerRequestUpdateState)asyncResult.AsyncState; var serverRequest = (HttpWebRequest)serverState.AsyncRequest; Stream serverStream; try { // end the async request serverState.AsyncResponse = (HttpWebResponse)serverRequest.EndGetResponse(asyncResult); serverStream = serverState.AsyncResponse.GetResponseStream(); Save(serverStream); serverStream.Dispose(); } catch (WebException) { DownloadStatus = DownloadState.Error; } Deployment.Current.Dispatcher.BeginInvoke(() => { DownloadStatus = DownloadState.FileReady; }); } void Save(Stream streamToSave) { StreamReader reader = null; IsolatedStorageFileStream file; StreamWriter writer = null; reader = new StreamReader(streamToSave); lock (appStorage) { file = appStorage.OpenFile(Filename, FileMode.Create); writer = new StreamWriter(file); writer.Write(reader.ReadToEnd()); reader.Dispose(); writer.Dispose(); } } public XDocument GetData() { XDocument xml = null; lock(appStorage) { if (appStorage.FileExists(Filename)) { var file = appStorage.OpenFile(Filename, FileMode.Open); xml = XDocument.Load(file); file.Dispose(); } } if (xml != null) return xml; else return new XDocument(); } }
