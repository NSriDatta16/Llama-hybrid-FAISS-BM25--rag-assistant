[site]: stackoverflow
[post_id]: 622092
[parent_id]: 621514
[tags]: 
There's a lot to this question. Are you needing this specific data for a reporting procedure? If so, then the proper solution is to have separate data access for reporting purposes. Flattened databases, views, ect. Or is it an ad-hoc query need? If so, Ayende has a post on this very problem. http://ayende.com/Blog/archive/2006/12/07/ComplexSearchingQueryingWithNHibernate.aspx He utilizes a "Finder" object. He's using NHibernate, so essentially what he's doing is creating a detached query. I've done something similar in the past by creating a Query object that I can fill prior to handing it to a repository (some DDD purist will argue against it, but I find it elegant and easy to use). The Query object implements a fluent interface, so I can write this and get the results back: IQuery query = new PostQuery() .WithPostId(postId) .And() .WithCommentCount() .And() .WithCommentsHavingDateLessThan(selectedDate); Post post = _repository.Find(query); However, in your specific case I have to wonder at your design. You are saying you can't load the comments with the post. Why? Are you just being overly worrisome about performance? Is this a case of premature optimization? (seems like it to me) If I had a Post object it would be my aggregate root and it would come with the Comments attached. And then everything you want to do would work in every scenario.
