[site]: stackoverflow
[post_id]: 2543091
[parent_id]: 2345639
[tags]: 
Maybe something along the following lines: static IObservable CreateDownloadFileObservable(string url, string fileName) { IObservable observable = Observable.CreateWithDisposable (o => { var cancellationTokenSource = new CancellationTokenSource(); Scheduler.TaskPool.Schedule ( () => { Thread.Sleep(3000); if (!cancellationTokenSource.Token.IsCancellationRequested) { WebClient client = new WebClient(); client.DownloadFileAsync(new Uri(url), fileName,fileName); DownloadProgressChangedEventHandler prgChangedHandler = null; prgChangedHandler = (s,e) => { o.OnNext(e); }; AsyncCompletedEventHandler handler = null; handler = (s, e) => { prgChangedHandler -= prgChangedHandler; if (e.Error != null) { o.OnError(e.Error); } client.DownloadFileCompleted -= handler; o.OnCompleted(); }; client.DownloadFileCompleted += handler; client.DownloadProgressChanged += prgChangedHandler; } else { Console.WriteLine("Cancelling download of {0}",fileName); } } ); return cancellationTokenSource; } ); return observable; } static void Main(string[] args) { var obs1 = CreateDownloadFileObservable("http://www.cnn.com", "cnn.htm"); var obs2 = CreateDownloadFileObservable("http://www.bing.com", "bing.htm"); var result = obs1.Concat(obs2); var subscription = result.Subscribe(a => Console.WriteLine("{0} -- {1}% complete ",a.UserState,a.ProgressPercentage), e=> Console.WriteLine(e.Message),()=> Console.WriteLine("Completed")); Console.ReadKey(); subscription.Dispose(); Console.WriteLine("Press a key to exit"); Console.ReadKey(); } You could turn the CreateDownloadFileObservable into an extension method on WebClient, and remove the WebClient client = new WebClient(); in the method definiton, the client woudl then look like so: WebClient c = new WebClient(); c.CreateDownloadFileObservable ("www.bing.com","bing.htm");
