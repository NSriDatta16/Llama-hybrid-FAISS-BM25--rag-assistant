[site]: stackoverflow
[post_id]: 3242938
[parent_id]: 3242768
[tags]: 
Ah, the atrocities that can be wrought by people being creative with CPP. You need, first of all, to decide how badly you want to do this. In C++. the right way to handle a situation like this is to build a collection of classes that represent the places where there is some difference, and then hide the differences behind an interface, to that you have, say DifferentialEquationIntegrator and so on (read the as an inheritance arrow, or "provides-satisfies" -- A B means "A provides a behavioral specification that B satisfies." It's essentially a mechanical translation to go from the scheme you describe to a "right" scheme, but it will be hairy and extended, and will fee a whole lot like you're rewriting the code. If you don't want to do this, you will need to analyze the existing code. I'm out of touch with the current state of code analysis tools, but there are many vendors and no few open-source tools. They can help quite a bit. Yes another option is to use the preprocessor to help. You can generally run the preprocessor against the code, resulting in the generated code. For example, in gcc the -E flag does this. The result, for historical reasons, contains all the newlines it had (make wc -l make more sense) so if you mean to read it, run the output through indent(1) or something similar. If you do this with all the different sets of flags, you will learn a good bit about the shared code via some diffs. The fourth option is to build your own tool that breaks the stuff down into fragments and helps you re-arrange them. This should make a good PhD project for someone.
