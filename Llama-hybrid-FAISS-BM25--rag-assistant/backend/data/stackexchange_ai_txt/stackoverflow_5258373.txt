[site]: stackoverflow
[post_id]: 5258373
[parent_id]: 2930092
[tags]: 
Took a lot of time and effort to fix this, but finally, I have a solution that works. This solution works for both Firefox and IE. #canvas is the div that contains the draggable. Note that we have to make sure the elements stays inside the canvas manually. This also works if if canvas has a different zoom level than the rest of the page. var pointerX; var pointerY; $(c).draggable({ start : function(evt, ui) { pointerY = (evt.pageY - $('#canvas').offset().top) / zoom - parseInt($(evt.target).css('top')); pointerX = (evt.pageX - $('#canvas').offset().left) / zoom - parseInt($(evt.target).css('left')); }, drag : function(evt, ui) { var canvasTop = $('#canvas').offset().top; var canvasLeft = $('#canvas').offset().left; var canvasHeight = $('#canvas').height(); var canvasWidth = $('#canvas').width(); // Fix for zoom ui.position.top = Math.round((evt.pageY - canvasTop) / zoom - pointerY); ui.position.left = Math.round((evt.pageX - canvasLeft) / zoom - pointerX); // Check if element is outside canvas if (ui.position.left canvasWidth) ui.position.left = canvasWidth - $(this).width(); if (ui.position.top canvasHeight) ui.position.top = canvasHeight - $(this).height(); // Finally, make sure offset aligns with position ui.offset.top = Math.round(ui.position.top + canvasTop); ui.offset.left = Math.round(ui.position.left + canvasLeft); } });
