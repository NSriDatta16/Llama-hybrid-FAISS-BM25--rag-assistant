[site]: stackoverflow
[post_id]: 3286339
[parent_id]: 2644622
[tags]: 
One way to solve this is you can probably use a regular expression capture in your @javax.ws.rs.Path. @Path("people/{id:[^/]+?}{format:(\\.[^/]*?)?}") @GET public MySubResource getPeople(@PathParam("id") String id, @PathParam("format") String format) { // remove the "." from the start of "format" if it is not null return new MySubResource(id, format); } Then in your sub-resource: public abstract class MySubResource { final protected String format; protected MySubResource(String id, String format) { this.format = format; } protected abstract Results getResults(); @GET public Response get() { return Response.ok(getResults(), this.format).build(); } } Be careful with the regular expressions. I gave an example but you may want to tighten the expression to make sure that nothing slips through. Another way to solve this is to change where your {id} is being captured and use the regular expression there. Instead of having @Path("id") MySubResource public getPeople(@PathParam("id") String id) capture the id, remove the id capture from getPeople() and change MySubResource like so: @Path("people") public MySubResource getPeople() { return new MyPeopleSubResource(); } public abstract class MySubResource { protected abstract Results getResults(); @GET @Path("{id}") public Results get() { return getResults(); } @GET @Path("{id}.xml") public Response getXml() { return Response.ok(getResults(), MediaType.TEXT_XML_TYPE).build(); } @GET @Path("{id}.html") public Response getHtml() { return Response.ok(getResults(), MediaType.TEXT_HTML_TYPE).build(); } } There are tradeoffs in either case depending on how your data structures are organized and when you need to know the "id" parameter. I'm not particular fond of regular expressions since they're really hard to get right but it's a possibility in this case.
