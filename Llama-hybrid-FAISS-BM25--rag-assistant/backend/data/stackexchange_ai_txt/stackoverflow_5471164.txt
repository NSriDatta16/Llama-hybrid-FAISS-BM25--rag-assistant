[site]: stackoverflow
[post_id]: 5471164
[parent_id]: 
[tags]: 
Implementing Containers using Smart Pointers

Ok, so everyone knows that raw pointers should be avoided like the plague and to prefer smart pointers, but does this advice apply when implementing a container? This is what I am trying to accomplish: template class AVLTreeNode { public: T data; unique_ptr > left, right; int height; } Unique_ptr can make container functions more cumbersome to write because I can't have multiple raw pointers temporarily pointing to the same object in a way that is elegant. For example: unique_ptr > rotate_right(unique_ptr > n1) { unique_ptr > n2 = n1->left; n1->left = n2->right; n2->right = n1; // n1 must now be referenced through the longer name n2->right from now on n2->right->recalculate_height(); n2->recalculate_height(); return n2; } (It's not a big deal in this example but I can imagine how it could become a problem). Should I take problems like these as a strong hint that containers should be implemented with good old new , delete , and raw pointers? It seems like awfully a lot of trouble just to avoid writing a destructor.
