[site]: stackoverflow
[post_id]: 4317101
[parent_id]: 
[tags]: 
Is/Should wrapping functions into a monad transformer be considered bad practice?

Let's say we want to use ReaderT [(a,b)] over the Maybe monad, and then we want to do a lookup in the list. Now an easy, and not too uncommon way to this is: first possibility find a = ReaderT (lookup a) However it does seem like this asserts some non-trivial thing about how the ReaderT transformer works. Looking at the source code for Control.Monad.Reader it's clear that this works just fine. But I haven't read any documentation supporting this. However we could also write find like this: second possibility find a = do y Similar ideas hold for wrapping MaybeT , StateT , State and Reader . Usually I write something like the first example, but most of the time it is really obvious how to write it like the second example, and you might even say it's more readable. So my question is: should code like the first example be considered bad?
