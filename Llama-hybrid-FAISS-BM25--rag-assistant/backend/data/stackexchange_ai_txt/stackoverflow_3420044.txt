[site]: stackoverflow
[post_id]: 3420044
[parent_id]: 3419270
[tags]: 
If your concerned about memory management, Core Data is the way to go. It's much more efficient memory wise and it manages memory for you in the vast majority of cases. In general you manage memory by making sure that each individual class' instances clean up after themselves. Then you put the objects in a hierarchy such that as each level deallocates it automatically cleans up the objects under it. As to the specific structure, it depends on the logic of the situation you are modeling. If the organization logically goes: queue{ jobs{ host } } ... then you should mimic that in your data structure. I strongly recommend you use Core Data. You will end up duplicating a lot Core Data functionality anyway if you implement this all by hand. Core Data was designed specifically to manage object graphs like this. That is its primary role. All the database stuff was tacked on as an after thought. There's no need to reinvent the wheel.
