[site]: stackoverflow
[post_id]: 5215139
[parent_id]: 5215069
[tags]: 
If you have control over the structure of your data formats, I suggest you serialize your data in a consistent way (especially in XML) and provide drivers for each data format. For instance, every driver will have 'findAll', 'getOne', 'count', etc. methods. The driver can be given a model to populate with the retrieved data. abstract class DataDriver { function __construct($model) {} abstract public function findAll(); abstract public function getOne(); abstract public function count(); // ... } class XMLDriver extends DataDriver { // implements all the methods } class SQLDriver extends DataDriver { // implements all the methods } class Contact { public var $firstName; public var $lastName; function getFullName() { return trim($this->firstName . ' ' . $this->lastName); } } $accessor = new SQLDriver('Contact'); $contacts = $accessor->findAll(); If your data will be serialized in an uncontrolled manner, the approach you suggest is the best. Just make sure to separate your models (e.g. Address book, Contact) from the method of retrieval (eg. get_address_book_xml, get_address_book_sql, etc.) Of course there are many ways of separating your models from your data-mapping driver. The importance is you find the solution that works best for you given that you're using such different formats.
