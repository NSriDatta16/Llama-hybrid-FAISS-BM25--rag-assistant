[site]: stackoverflow
[post_id]: 4708130
[parent_id]: 
[tags]: 
Mootools mousewheel event, and adding an onComplete

I'm using the following class along with Mootools to create custom scrolling areas on a site. It includes a mousewheel event. I need to be able to fire an onComplete once the scroller comes to a stop after using the mousewheel. So say you swipe the mousewheel to scroll, I need to fire an oncomplete once the scrolling content comes to a stop. Suggestions? var ScrollBar = new Class({ Implements: [Events, Options], options: { wheel: (Browser.safari5) ? 1 : 20 }, initialize: function(main, options) { this.setOptions(options); this.dragging = false; this.inside = false; this.main = $(main); this.content = this.main.getFirst(); this.vScrollbar = new Element('div', { 'class': 'scrollbar' }).inject(this.content, 'after'); this.vTrack = new Element('div', { 'class': 'track' }).inject(this.vScrollbar); this.vThumb = new Element('div', { 'class': 'handle' }).inject(this.vTrack); this.bound = { 'vStart': this.vStart.bind(this), 'end': this.end.bind(this), 'vDrag': this.vDrag.bind(this), 'wheel': this.wheel.bind(this), 'vPage': this.vPage.bind(this) }; // set scrollarea mousein/out hide of scrollbar this.vScrollbar.set('tween', { duration: 200, transition: 'cubic:out' }); this.main.addEvent('mouseenter', function(event){ this.inside = true; this.vScrollbar.get('tween').cancel(); this.vScrollbar.tween('width', 12); }.bind(this)); this.main.addEvent('mouseleave', function(event){ this.inside = false; if (!this.dragging) { this.vScrollbar.get('tween').cancel(); this.vScrollbar.tween('width', 0); } }.bind(this)); this.vPosition = {}; this.vMouse = {}; this.update(); this.attach(); this.scrollContent = new Fx.Scroll(this.content, { duration: 500, transition: Fx.Transitions.Cubic.easeOut, onComplete: function(){ Blinds.updateImages(); } }); this.scrollThumb = new Fx.Morph(this.vThumb, { duration: 500, transition: Fx.Transitions.Cubic.easeOut }); }, update: function() { var panel_id = (this.content.getFirst()) ? this.content.getFirst().get('id') : ''; if ((this.content.scrollHeight this.vThumb.getPosition().y) { myInstance = this; this.content.scrollTopNew = this.content.scrollTop.toInt() + this.content.offsetHeight.toInt(); this.scrollContent.start(0, this.content.scrollTopNew); } // if scrolling down else { myInstance = this; this.content.scrollTopNew = this.content.scrollTop.toInt() - this.content.offsetHeight.toInt(); this.scrollContent.start(0, this.content.scrollTopNew); } myInstance.vUpdateThumbFromContentScroll2(event.page.y); event.stop(); }, vStart: function(event) { this.dragging = true; this.vMouse.start = event.page.y; this.vPosition.start = this.vThumb.getStyle('top').toInt(); document.addEvent('mousemove', this.bound.vDrag); document.addEvent('mouseup', this.bound.end); this.vThumb.addEvent('mouseup', this.bound.end); event.stop(); }, end: function(event) { this.dragging = false; if (!this.inside) { this.vScrollbar.get('tween').cancel(); this.vScrollbar.tween('width', 0); } document.removeEvent('mousemove', this.bound.vDrag); document.removeEvent('mouseup', this.bound.end); this.vThumb.removeEvent('mouseup', this.bound.end); Blinds.updateImages(); event.stop(); }, vDrag: function(event) { this.vMouse.now = event.page.y; this.vPosition.now = (this.vPosition.start + (this.vMouse.now - this.vMouse.start)).limit(0, (this.vTrackSize - this.vThumbSize)); this.vUpdateContentFromThumbPosition(); this.vUpdateThumbFromContentScroll(); event.stop(); } });
