[site]: stackoverflow
[post_id]: 4781277
[parent_id]: 
[tags]: 
Entity is saved in DB, but never gets fetched

We're using JBoss Seam with JPA and Hibernate as persistence provider. We have encountered a very strange problem. In our UI we have a tree. When we add a node to the tree, the node gets to postgres DB (the row is there, checked with pgadmin). But the tree is not changed. It appeared that named query ( OrganizationEntity.FIND_BY_ISDELETED_MAIN below) that fetches nodes with their children, doesn't work correctly. The newly created object should appear under OrganizationEntity.childOrganizations - but it doesn't. FetchType.EAGER doesn't help, neither session flushing does. What is the most ridiculous thing is that after about half an hour the query starts to return correct result! How come it happens? Is there any cache in hibernate that needs to be cleared or tweaked? Thanks in advance! UI tree: OrganizationServiceBean looks like this: @Stateless @Scope(ScopeType.EVENT) @Name("organizationServiceBean") public class OrganizationServiceBeanImpl implements OrganizationServiceBean, Serializable { ... public List getOrgTree() { return organizationService.findByIsDeletedMain(0); } } organizationService is the following: @Stateless @AutoCreate @Scope(ScopeType.STATELESS) @Name("organizationService") public class OrganizationServiceImpl extends GenericServiceImpl implements OrganizationService { …… public List findByIsDeletedMain(int isDeleted) { //entityManager.flush(); List lOrg = findByCriteria(isDeleted, OrganizationEntity.FIND_BY_ISDELETED_MAIN); log.info("search finished..."); return lOrg; } …. @SuppressWarnings("unchecked") private List findByCriteria(Object searchKey, String namedQuery) { final Query query = entityManager.createNamedQuery(namedQuery); query.setParameter("searchKey", searchKey); List organizations = null; try { organizations = (List ) query.getResultList(); } catch (Exception e) { LOGGER.error(e.getMessage()); } return organizations; } ….. } And OrganizationEntity: @Entity @Table(name = "organization", uniqueConstraints = { @UniqueConstraint(columnNames = "fname") }) @NamedQueries( { …. @NamedQuery(name = OrganizationEntity.FIND_BY_ISDELETED_MAIN, query = "select org from OrganizationEntity org where org.isdeleted = :searchKey and org.parentOrganization is null order by org.id", hints={@QueryHint(name="org.hibernate.cacheable",value="false")}), ….}) @Name("organizationEntity") public class OrganizationEntity extends AbstractEntity { private static final long serialVersionUID = -9085028098941577562L; …. public static final String FIND_BY_ISDELETED_MAIN = "OrganizationEntity.findByIsDeleted"; …. // bi-directional many-to-one association to Organization @ManyToOne(fetch = FetchType.EAGER) @JoinColumn(name = "parent_id") private OrganizationEntity parentOrganization; // bi-directional many-to-one association to Organization @OneToMany(mappedBy = "parentOrganization", cascade = { CascadeType.ALL }, fetch = FetchType.EAGER) @Where(clause="isdeleted = 0") private List childOrganizations; } Edit The functionality works just fine if we cut conversation id from url - which means that http://localhost:8080/h2p2/admin/admin.seam?cid=7 doesn't work no matter how many times we refresh it, but http://localhost:8080/h2p2/admin/admin.seam works fine.
