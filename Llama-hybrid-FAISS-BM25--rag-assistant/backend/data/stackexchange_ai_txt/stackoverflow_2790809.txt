[site]: stackoverflow
[post_id]: 2790809
[parent_id]: 2789979
[tags]: 
Answering a question about refactoring, without context, is like answering a question about design, without context. Because you are changing a design. I usually start out with "reasons to refactor". Maybe I have metrics that I'm exceeding. (Look, a class with 10,000 lines, surely it can be partitioned into several more-coherent, more-cohesive classes, with less coupling, and tighter cohesion). So, if you find yourself with a lot of code that has several hundred if...else conditions in event handlers, as I often do, I would forget all about that event handler for a minute, and reduce it as the person said above, to a minimal object oriented pattern: if a then doA(fewer,parameters) else if b then doB(is,generally,better) else if c then doC; ... Now, if doA,doB,and doC belong together in another object (They share state, and modify/control some particular set of fields), then I might move doA,doB,doC methods into another object. In general, however, rather than drilling down to an individual case-by-case where event handlers do everything, I also find the following delphi-pattern handy: procedure TForm1.BigGuiControlRightButtonClick(Sender;...); begin BigThingController.RightClickMenuHandler(Sender, ....) end; procedure TForm1.BigGuiControlDoSomeThing(Sender:TObject); begin BigThingController.DoSomeThing; end; procedure TForm1.Print(Sender); begin DocumentManager.Print(Document); end; I like it when my TForm methods are clear and readable. I don't like to see a lot of noise, and a lot of error-checking code. I find that applications that have been carefully maintained and debugged over years tend to grow iteratively towards a complete mess of unreadable spaghetti. If the goal of refactoring is more than just to make the code look pretty, then the refactoring should also have some measurable quality goal too. Reduce defects, crashes, etc. Sometimes, I use refactoring as a time to remove features that are no longer useful, or implemented in a faulty way. So my code is more correct when I'm finished, and not just refactored to fit some ideal of how code should be written, that doesn't change the quality the user experiences. I'm a delphi developer, and I'm goal oriented, and quality oriented, and pragmatic rather than a stylizer. Other people may differ here.
