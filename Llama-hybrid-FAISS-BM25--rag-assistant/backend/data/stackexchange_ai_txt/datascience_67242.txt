[site]: datascience
[post_id]: 67242
[parent_id]: 
[tags]: 
Loss is decreasing correctly but upon prediction, totally wrong results

I've made a pretty basic stock prediction RNN with it's only input being the past stock price from apple. On this case, I want to input the apple stock price and the samsung stock price (2 features). I have created a timestep of 120 days. Data preprocessing: import numpy as np, matplotlib.pyplot as plt, pandas as pd, datetime as dt import pandas_datareader.data as web #Desired dates start = dt.datetime(2008, 1, 1) end = dt.datetime(2020, 1, 26) #Stock data retreive entire_apple_dataset = web.DataReader("AAPL", "yahoo", start, end) entire_samsung_dataset = web.DataReader("005930.KS", "yahoo", start, end) #Joining the 2 datasets and filling in missing data mixed_datasets = pd.concat([entire_apple_dataset, entire_samsung_dataset], axis=1) mixed_datasets = mixed_datasets.fillna(method="ffill") #Grabbing both high values for each stock price and inputting them into a list entire_set = np.concatenate((mixed_datasets.iloc[:, 0:1].values, mixed_datasets.iloc[:, 6:7].values), axis=1) #Normalizing each column separately from sklearn.preprocessing import MinMaxScaler sc_apple = MinMaxScaler(feature_range = (0, 1)) sc_samsung = MinMaxScaler(feature_range = (0, 1)) entire_set[:,0:1] = sc_apple.fit_transform(entire_set[:,0:1]) entire_set[:,1:2] = sc_samsung.fit_transform(entire_set[:,1:2]) training_set = entire_set[:-16, :] # Creating a data structure with 120 timesteps and 1 output X_train = [] y_train = [] for i in range(120, training_set.shape[0]): X_train.append(training_set[i-120:i, :]) y_train.append(training_set[i, 0]) X_train, y_train = np.array(X_train), np.array(y_train) The actual RNN #--------------------------RNN----------------------------------- # Importing the Keras libraries and packages from keras.models import Sequential from keras.layers import Dense from keras.layers import LSTM from keras.layers import Dropout # Initialising the RNN regressor = Sequential() # Adding the first LSTM layer and some Dropout regularisation regressor.add(LSTM(units = 100, return_sequences = True)) regressor.add(Dropout(0.2)) # Adding a second LSTM layer and some Dropout regularisation regressor.add(LSTM(units = 100, return_sequences = True)) regressor.add(Dropout(0.2)) # Adding a third LSTM layer and some Dropout regularisation regressor.add(LSTM(units = 100, return_sequences = True)) regressor.add(Dropout(0.2)) regressor.add(LSTM(units = 100, return_sequences = True)) regressor.add(Dropout(0.2)) # Adding a fourth LSTM layer and some Dropout regularisation regressor.add(LSTM(units = 100)) regressor.add(Dropout(0.2)) # Adding the output layer regressor.add(Dense(units = 1)) # Compiling the RNN regressor.compile(optimizer = 'adam', loss = 'mean_squared_error') # Fitting the RNN to the Training set regressor.fit(X_train, y_train, epochs = 100, batch_size = 32) #--------------------------RNN-------------------------------------------- Predicting data inputs = entire_set[-120-16:,:] X_test = [] for i in range(120, len(inputs)): X_test.append(training_set[i-120:i, :]) X_test = np.array(X_test) predicted_stock_price = regressor.predict(X_test) predicted_stock_price = sc_apple.inverse_transform(predicted_stock_price) real_stock_price = entire_apple_dataset.iloc[:, 0:1].values real_stock_price = real_stock_price[-16:,:] As said on the beggining, it's predictions are awful. Not only the price is ages away, also the trend isn't accurate at all. My only objective here is to predict the trend.
