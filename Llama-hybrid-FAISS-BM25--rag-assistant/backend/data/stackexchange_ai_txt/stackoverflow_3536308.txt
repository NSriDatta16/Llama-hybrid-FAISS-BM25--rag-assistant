[site]: stackoverflow
[post_id]: 3536308
[parent_id]: 3533600
[tags]: 
Because it's SQL 2000, we can't use a windowing function. That's okay. Thomas's queries are good and will work. However, they will get worse and worse as the number of rows increasesâ€”with different characteristics depending on how wide (the number of groups) and how deep (the number of items per group). This is because those queries use a partial cross-join, perhaps we could call it a "pyramidal cross-join" where the crossing part is limited to right side values less than left side values rather than left crossing to all right values. What to do? I think you will be surprised to find that the following long and painful-looking script will outperform the pyramidal join at a certain size of data (which may not be all that big) and eventually, with really large data sets must be considered a screaming performer : CREATE TABLE #tblA ( ID int identity(1,1) NOT NULL, Name varchar(1) NOT NULL, Sequence int NOT NULL, tblBID int NOT NULL, PRIMARY KEY CLUSTERED (ID) ) INSERT #tblA VALUES ('a', 5, 14) INSERT #tblA VALUES ('b', 3, 15) INSERT #tblA VALUES ('c', 3, 16) INSERT #tblA VALUES ('d', 3, 17) CREATE TABLE #tblB ( ID int NOT NULL PRIMARY KEY CLUSTERED, GroupID int NOT NULL ) INSERT #tblB VALUES (14, 1) INSERT #tblB VALUES (15, 1) INSERT #tblB VALUES (16, 2) INSERT #tblB VALUES (17, 3) CREATE TABLE #seq ( seq int identity(1,1) NOT NULL, ID int NOT NULL, GroupID int NOT NULL, PRIMARY KEY CLUSTERED (ID) ) INSERT #seq SELECT A.ID, B.GroupID FROM #tblA A INNER JOIN #tblB B ON A.tblBID = b.ID ORDER BY B.GroupID, A.Sequence UPDATE A SET A.Sequence = S.seq - X.MinSeq + 1 FROM #tblA A INNER JOIN #seq S ON A.ID = S.ID INNER JOIN ( SELECT GroupID, MinSeq = Min(seq) FROM #seq GROUP BY GroupID ) X ON S.GroupID = X.GroupID SELECT * FROM #tblA DROP TABLE #seq DROP TABLE #tblB DROP TABLE #tblA If I understood you correctly, then ORDER BY B.GroupID, A.Sequence is correct. If not, you can switch A.Sequence to B.ID. Also, my index on the temp table should be experimented with. For a certain quantity of rows, and also the width and depth characteristics of those rows, clustering on one of the other two columns in the #seq table could be helpful. Last, there is a possible different data organization possible: leaving GroupID out of the #seq table and joining again. I suspect it would be worse, but am not 100% sure.
