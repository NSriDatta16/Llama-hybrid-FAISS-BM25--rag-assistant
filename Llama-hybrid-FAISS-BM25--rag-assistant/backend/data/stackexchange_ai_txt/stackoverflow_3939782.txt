[site]: stackoverflow
[post_id]: 3939782
[parent_id]: 3939721
[tags]: 
NAND is simply an AND operating followed by NOT . In terms of implementing the other boolean operations with just NAND : NOT a = a NAND a a | (a NAND a) | result --+------------+------- 0 | 1 | OKAY 1 | 0 | OKAY a AND b = NOT (NOT (a AND b)) = NOT (a NAND b) = (a NAND b) NAND (a NAND b) a | b | x=(a NAND b) | (x NAND x) | result --+---+--------------+------------+------- 0 | 0 | 1 | 0 | OKAY 0 | 1 | 1 | 0 | OKAY 1 | 0 | 1 | 0 | OKAY 1 | 1 | 0 | 1 | OKAY a OR b = NOT((NOT a) AND (NOT b)) # DeMorgans Law = NOT((a NAND a) AND (b NAND b)) = NOT(NOT ((a NAND a) NAND (b NAND b))) = (a NAND a) NAND (b NAND b) a | b | x=(a NAND a) | y = (b NAND b) | (x NAND y) | result --+---+--------------+----------------+------------+------- 0 | 0 | 1 | 1 | 0 | OKAY 0 | 1 | 1 | 0 | 1 | OKAY 1 | 0 | 0 | 1 | 1 | OKAY 1 | 1 | 0 | 0 | 1 | OKAY
