[site]: stackoverflow
[post_id]: 657723
[parent_id]: 657645
[tags]: 
Question 1: "When I split this function up, do I create new tests for each new method/class that results?" As always the real answer is it depends . If it is appropriate, it may be simpler when refactoring some gigantic monolithic methods into smaller methods that handle different component parts to set your new methods to private/protected and leave your existing API intact in order to continue to use your existing unit tests. If you need to test your newly split off methods, sometimes it is advantageous to just mark them as package private so that your unit testing classes can get at them but other classes cannot. Question 2: "What happens when the code is re-factored so much that structurally it no longer resembles the original code?" My first piece of advice here is that you need to get a good IDE and have a good knowledge of regular expressions - try to do as much of your refactoring using automated tools as possible. This can help save time if you are cautious enough not to introduce new problems. As you said, you have to change your unit tests - but if you used good OOP principals with the (you did right?), then it shouldn't be so painful. Overall, it is important to ask yourself with regards to the refactor do the benefits outweigh the costs? Am I just fiddling around with architectures and designs? Am I doing a refactor in order to understand the code and is it really needed? I would consult a coworker who is familiar with the code base for their opinion on the cost/benefits of your current task. Also remember that the theoretical ideal you read in books needs to be balanced with real world business needs and time schedules.
