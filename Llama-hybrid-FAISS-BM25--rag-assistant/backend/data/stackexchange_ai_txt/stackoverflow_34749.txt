[site]: stackoverflow
[post_id]: 34749
[parent_id]: 34734
[tags]: 
I like to write all of my generic classes as just that: generics. I keep them as application independent as possible, and try to keep them even type unaware. If I make a fancy Tree class, I'll use generics to create it as Tree so that I can use any type I want with the class. If I need to use the Tree to hold GameCharacter objects, I can instantiate Tree but if I'm writing a business application I can use it as Tree . If you find yourself changing your Reuse Libary to match your projects, try making them less specific and instead deriving from your Library base classes in your actual projects. Put all of the common logic in the library classes, and for the application specific parts, create a derived class and implement their logic in that derived class. As far as solution organization goes, I keep the Reuse Library as a separate project in a common folder and include the project in any solution that I create, which lets me reference easily into it, but also make any changes from any of my applications' solutions.
