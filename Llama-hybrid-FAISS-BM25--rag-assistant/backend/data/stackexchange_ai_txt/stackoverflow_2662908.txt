[site]: stackoverflow
[post_id]: 2662908
[parent_id]: 2662063
[tags]: 
The definitions of maximum and minimum need to be improved. SORT is destructive. It is also wrong to call SORT with a literal constant like '(1 2 3 4) - again, SORT is destructive. Better definitions: (defun minimum (list) (reduce #'min list)) (defun maximum (list) (reduce #'max list)) A more efficient definition of range: (defun range (list) (loop for e in list maximize e into max minimize e into min finally (return (- max min)))) SCALE-LIST and SCALE-VALUE are also not Lisp-like. If you call NTH like this in a recursive function then something is wrong. You should recurse over the list, not the index. SCALE-VALUE calls RANGE and MINIMUM for each call. Why? Check this variant: ;;scales one value to another range (defun scale-value (item low high min range) (+ (/ (* (- item min) (- high low)) range) low)) ;;is supposed to scale the whole list to another range (defun scale-list (list low high) (let ((min (minimum list)) (range (range list))) (labels ((scale-list-aux (list) (when list (cons (scale-value (first list) low high min range) (scale-list-aux (rest list)))))) (scale-list-aux list)))) (scale-list '(1 2 3 4) 21 24) What can you improve more? For example I would get rid of the recursion and replace it with MAPCAR.
