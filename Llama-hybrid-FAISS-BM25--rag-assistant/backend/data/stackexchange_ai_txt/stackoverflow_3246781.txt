[site]: stackoverflow
[post_id]: 3246781
[parent_id]: 3246106
[tags]: 
This is what seems efficient to you: I complete a large script, Comment everything but the portion I want to check Execute the script It's not. That "portion you want to check" might not work properly if you haven't set up things beforehand. Figuring out what to comment, and what to leave uncommented, before running your test (just once!) is hard to get right and takes a lot of your time - and can leave you with false positive results (you think your code is working, but it ain't). Correctly de-commenting the code for production introduces another risk of error. And you have to do this every time you think you want to check your code - and you may well fail to check code that has an error in it, thinking it's too simple to go wrong. With TDD - with test-driven design and unit tests - we avoid all of these pitfalls. We're writing tiny tests, so they don't take much time to write, and they can test only tiny functionality. That drives most of us to write tiny functions and small classes; that's (part of) good design; it promotes reuse and reduces coupling. And, as a side effect - and I can't emphasize enough that it is a side effect, not the primary benefit - we get comprehensive test coverage. Our tests are small and fast and can be run hundreds of times a day, so they let us know the moment we've screwed something up. And because they're tiny and focused, they don't just tell us that we've screwed up; they tell us what we've screwed up. Good design: tiny methods, tiny classes, minimal coupling; only the code we needed to meet our actual needs; comprehensive automated unit test coverage. That's efficient.
