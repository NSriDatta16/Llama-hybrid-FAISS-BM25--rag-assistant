[site]: crossvalidated
[post_id]: 484756
[parent_id]: 484755
[tags]: 
My understanding is that a logistic regression could also be viewed as a single node NN so I am wondering why should it be any different Let's say you wanted to do a logistic regression with 4 outputs and 16 inputs using a neural network in TensorFlow. It might look something like this: import tensorflow as tf tf.random.set_seed(1) model = tf.keras.Sequential() model.add(tf.keras.layers.Dense(4, input_shape=(16,))) model.add(tf.keras.layers.Softmax()) Now to answer your question: is logistic regression stochastic like neural network? That all depends on the optimization method used to train your logistic regression classifier or neural network. I haven't used the statsmodels package, but in TensorFlow you need to choose your optimizer. There are a number of built-in optimizers you can choose from. Moreover, if you are wondering why each time you train your neural network that you get a different outcome, it is generally good practice to keep the random seed fixed throughout your experiments. This can easily be done by setting tf.random.set_seed(1) or any other fixed number. This should return the same result each time you train your model (assuming that all other hyperparameters were kept the same).
