[site]: stackoverflow
[post_id]: 1831287
[parent_id]: 1822382
[tags]: 
The iterative version proposed by Rainer is very nice, it's compact and more efficient since you traverse the sequence only one time; in contrast to the recursive version which calls position at every iteration and thus traverse the sub-sequence every time. ( Edit: I'm sorry, I was completely wrong about this last sentence, see Rainer's comment) If a recursive version is needed, another approach is to advance the start until it meets the end , collecting the result along its way. (defun precede (obj vec &key (start 0) (end (length vec)) (test #'eql)) (if (or (null vec) ( Of course this is just another way of expressing the loop version. test: [49]> (precede #\a "abracadabra") (#\r #\c #\d) [50]> (precede #\a "this is a long sentence that contains more characters") (#\Space #\h #\t #\r) [51]> (precede #\s "this is a long sentence that contains more characters") (#\i #\Space #\n #\r) Also, I'm interested Robert, did your teacher say why he doesn't like using adjoin or pushnew in a recursive algorithm?
