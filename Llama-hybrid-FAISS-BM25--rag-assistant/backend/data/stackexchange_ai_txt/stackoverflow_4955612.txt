[site]: stackoverflow
[post_id]: 4955612
[parent_id]: 4832262
[tags]: 
The same fragment APIs are now available as a static library for use with older versions of Android; it's compatible right back to Android 1.6. There are a few tricks you can use to see if the various new APIs are available to your app. Generally speaking, you'll probably want to create two alternative sets of Activities, one that uses the fancy new APIs (ActionBar, Animators, etc.) -- and another set that don't. The following code shows how you can use reflection and exception catching to determine the availability of the Fragment APIs, and version checking to confirm if the other Honeycomb APIs are available. private static boolean shinyNewAPIsSupported = android.os.Build.VERSION.SDK_INT > 10; private static boolean fragmentsSupported = false; private static void checkFragmentsSupported() throws NoClassDefFoundError { fragmentsSupported = android.app.Fragment.class != null; } static { try { checkFragmentsSupported(); } catch (NoClassDefFoundError e) { fragmentsSupported = false; } } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Intent startActivityIntent = null; if (!shinyNewAPIsSupported) startActivityIntent = new Intent(this, MainNonActionBarActivity.class); else startActivityIntent = new Intent(this, MainActionActivity.class); startActivity(startActivityIntent); finish(); } Generally speaking you can use the same layout definitions. Where Fragments are available you'll inflate each layout within a different Fragment, where they aren't you'll probably want to use tags to embed several of them into a more complex Activity layout. A more detailed work through of how to write the code to support backwards compatibility on Honeycomb can be found here: http://blog.radioactiveyak.com/2011/02/strategies-for-honeycomb-and-backwards.html
