[site]: stackoverflow
[post_id]: 3687546
[parent_id]: 3687012
[tags]: 
The answers here are correct, but attack the concept from a different angle, and hopefully increase your understanding, I propose the following: Think of the word 'serializable' to mean 'convertable'. So when a class is marked as serializable, then it's convertable to whatever type of representation you're looking for. A serializer (ie. BinaryFormatter or XmlSerializer) can be thought of as a 'converter'. With that, so to speak, you would use a converter ( serializer ) to convert something that is convertable ( serializable ). The class itself doesn't change, but it does add functionality to the class. Examples of why: A common usage is to convert an object to a binary representation (serializing using a binary formatter) if you wanted to easily write it to disk or send it to another application over a socket. Another common usage is to convert an object to an xml representation (as seen in RandomNoob's answer) if you wanted to send it to a webservice. There's some caveats to consider when serializing (for instance, you generally don't want to serialize events in .NET and would so mark them with the [field: non-serialized] attribute), so a bit more research is necessary in that respect, but conceptually, try to think of it as converting an object for storage or transmission.
