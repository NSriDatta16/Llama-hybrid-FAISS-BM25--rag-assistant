[site]: stackoverflow
[post_id]: 1332194
[parent_id]: 939605
[tags]: 
I would have to say that when it comes down to big memory allocation it would be better to do it once rather than doing each time you need to allocate something. The reason for that is that the memory can become fragmented and slow (it cost a lot of resources to create and delete a ton of stuff in the memory). If you have a data structure that reserves a sufficient amount of memory for your operations it can be better. The downsize of doing so is that a large part of your memory will be taken. Here is how a new and delete looks under the hood in C++: #include using std::malloc; using std::free; #include using std::bad_alloc; void * operator new(size_t n) { void * p = malloc(n); if(!p) throw bad_alloc(); return p; } void operator delete (void *p) { if (p) free(p); } Doing a new and delete all the time can be costly! This is why languages such as C# and Java are slower than C++. The only advantage of a garbage collector is that it brings every thing in memory together (it defrags the memory) for your program. This can be costly if you have a heck of a ton of things in memory for your program. Also, have a look at algorithm in the STL. It might help you by optimizing certain of operations.
