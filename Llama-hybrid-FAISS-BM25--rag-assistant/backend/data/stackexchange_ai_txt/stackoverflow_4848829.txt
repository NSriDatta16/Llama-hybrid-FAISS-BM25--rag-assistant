[site]: stackoverflow
[post_id]: 4848829
[parent_id]: 4848728
[tags]: 
I'd bet the code using AppDomain.GetAssemblies() which are then inspected. The implementation of AppDomain.GetAssemblies() leads to an external method, so Reflector is of mostly no help here. However, without actually trying it and inspecting the result, there are two logical options for the ordering of assemblies in the result: Load order Alphabetical order In the first case you'd probably have to organize references among your assemblies and the load order in such a way that the foreign code finds the right assembly with the entrypoint class and stops. In the second case it would be a pure matter of naming the assemblies in a 'right' way but I doubt it's this case. (However, the order may be completely different from the two above, e.g. 'mostly' random as well.) In either case I think sooner or later the buggy code will encounter the problematic assembly and crash anyway. Thus the strong recommendation is: insist on having the bug fixed.
