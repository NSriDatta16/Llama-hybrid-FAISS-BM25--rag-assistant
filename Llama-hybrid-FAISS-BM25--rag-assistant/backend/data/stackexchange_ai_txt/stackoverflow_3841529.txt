[site]: stackoverflow
[post_id]: 3841529
[parent_id]: 3840657
[tags]: 
Try this other section in the official documentation. It's more thorough. MATLAB > User's Guide > Desktop Tools and Development Environment > Customizing Help and Demos > Providing Your Own Help and Demos. This describes both simple helptext and generating separate HTML help files. Here's the helptext formatting I've picked up on and found useful. function foo(x,y,z) %FOO One-line description goes here % % foo(x,y,z) % % Multi-line paragraphs of descriptive text go here. It's fine for them to % span lines. It's treated as preformatted text; help() and doc() will not % re-wrap lines. In the editor, you can highlight paragraphs, right-click, % and choose "Wrap selected comments" to re-flow the text. % % More detailed help is in the extended_help">extended help . % It's broken out like this so you can keep the main "help foo" text on % a single screen, and then break out obscure parts to separate sections. % % Examples: % foo(1,2,3) % % See also: % BAR % SOMECLASS/SOMEMETHOD disp(x+y+z); function extended_help %EXTENDED_HELP Some additional technical details and examples % % Here is where you would put additional examples, technical discussions, % documentation on obscure features and options, and so on. error('This is a placeholder function just for helptext'); The first line after the function signature is called the "H1 line". It needs to be just one line so it is properly picked up by contentsrpt(), which can autogenerate a Contents.m file from the helptext in your functions The function name in the H1 line is all caps, regardless of actual capitalization of the function name in the signature Case matters for the "See also". I'm not sure which all cases work; this one does for sure. Function names after "See also:" are all caps. Method names are qualified; I think names of methods in the same class as the current method can be unqualified. Everything between the H1 line and "Examples:" is just a conventional formatting that I find readable; help() doesn't treat it specially. You can use a limited form of hyperlinks in help. In particular, you can use hyperlinks to invoke arbitrary Matlab commands, and point to other sections of helptext by having it invoke help(). You can use this to point to any function; "function>subfunction" is just the syntax for addressing subfunctions in help() calls. Unfortunately, since you need to put either "help" or "doc" in those hyperlinks, it only works in one or the other presentation form. It would be nicer if there were a direct helptext hyperlink form.
