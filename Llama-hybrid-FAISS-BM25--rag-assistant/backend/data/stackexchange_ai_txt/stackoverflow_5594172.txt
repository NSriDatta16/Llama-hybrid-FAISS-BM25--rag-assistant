[site]: stackoverflow
[post_id]: 5594172
[parent_id]: 5594081
[tags]: 
The reason why float temp = b/a; gives 0 while float temp = (float)b/a; gives 0.5 is that the compiler determines the output type of the division operation based upon the types of the operands, not the destination storage type. Put simply: int / int = int float / int = float int / float = float float / float = float So when you do float temp = b/a; you're doing in integer divide of b and a , and then storing the resulting integer (0 in your example) into a variable of type float . In essence, by the time the value is converted to floating-point you have already lost the information you are looking for (assuming you wanted to do a floating-point divide), and the conversion is not going to bring it back. In order to get the result you want (again, assuming that you want to do a floating-point divide), you need to cast at least one of the operands to float before you divide.
