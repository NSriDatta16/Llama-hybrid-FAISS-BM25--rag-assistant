[site]: stackoverflow
[post_id]: 2062847
[parent_id]: 2062242
[tags]: 
It is not exactly clear how the entire data structure is organized and what the consequences are going to be, but it is perfectly possible to erase an element from the vector by having a pointer to that element and the vector itself. You just need to convert the pointer to an iterator first. For example, having a vector vector pieces; and a pointer into that vector stPiece *mother; you can convert the pointer to an index vector ::size_type i = mother - &pieces[0]; assert(i then convert the index to an iterator vector ::iterator it = pieces.begin() + i; then erase the element pieces.erase(it); and that's it. However, it appears that in your data structure you might have multiple long-lived pointers pointing into the same vector. Any attempts to erase elements from such vector will immediately invalidate all these pointers. It theoretically is possible to "restore" their validity, if you do everything carefully, but this is going to a major PITA. I'm not sure I understand what you mean by "assuming that all the child pieces will be deleted".
