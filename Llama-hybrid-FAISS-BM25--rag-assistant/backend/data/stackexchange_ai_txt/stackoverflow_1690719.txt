[site]: stackoverflow
[post_id]: 1690719
[parent_id]: 335963
[tags]: 
Better late than never, I know how to get the $(DefaultDataPath)$(DatabaseName) file names from your second example. The SQL you're showing in your first code snippet suggests that you don't have scripts for creating the database files in your VSTS:DB project, perhaps by deliberately excluded them from any schema comparisons you've done. I found it a little counter-intuitive, but the solution is to let VSTS:DB script the MDF and LDF in you development environment, then edit those scripts to use the SQLCMD variables. In your database project, go to the folder Schema Objects > Database Level Objects > Storage > Files . In there, add these two files: Database.sqlfile.sql ALTER DATABASE [$(DatabaseName)] ADD FILE (NAME = [$(DatabaseName)], FILENAME = '$(DefaultDataPath)$(DatabaseName).mdf', SIZE = 2304 KB, MAXSIZE = UNLIMITED, FILEGROWTH = 1024 KB) TO FILEGROUP [PRIMARY]; Database_log.sqlfile.sql ALTER DATABASE [$(DatabaseName)] ADD LOG FILE (NAME = [$(DatabaseName)_log], FILENAME = '$(DefaultDataPath)$(DatabaseName)_log.ldf', SIZE = 1024 KB, MAXSIZE = 2097152 MB, FILEGROWTH = 10 %); The full database creation script that VSTS:DB, or for that matter VSDBCMD.exe, generates will now use the SQLCMD variables for naming the MDF and LDF files, allowing you to specify them on the command line, or in MSBuild.
