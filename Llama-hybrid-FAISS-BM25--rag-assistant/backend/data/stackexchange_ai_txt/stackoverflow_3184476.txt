[site]: stackoverflow
[post_id]: 3184476
[parent_id]: 3183429
[tags]: 
Without knowing your data retrieval technology or how you are going to data bind to your component I will be a generic as possible. First thing you need to do is get the data out of the database. There are ways to do this hierarchically in sql server but in the spirit of being generic lets assume you are going to get it out as a flat structure. The important thing is your data is ordered by it's parent id, you can do this in sql or in code. Assuming that you now have an ordered set of data we can populate our node objects. An example of this would be: public class Node : ICollection { private List childNodes; public Node() { childNodes = new List (); } public Node this[int index] { get { return childNodes[index]; } set { childNodes[index] = value; } } public void Add(Node childNode) { childNodes.Add(childNode); } /* Rest of ICollection implementation */ } Now to populate the structure you need to iterate through the original data. public Node PopulateTree(TreeData[] treeData) { Dictionary flattenedTree = new Dictionary (); foreach(TreeData data in treeData) { Node node = new Node(); if (data.ParentId != {EmptyId}) { Node parentNode = flattenedTree[data.ParentId]; parentNode.Add(node); } flattenedTree.Add(data.Id, node); } } I have not tested the pseudo code but it should show you a way of getting flattened data into a hierarchical structure. You should be able to refactor this down to a cleaner structure but how depends on your code base.
