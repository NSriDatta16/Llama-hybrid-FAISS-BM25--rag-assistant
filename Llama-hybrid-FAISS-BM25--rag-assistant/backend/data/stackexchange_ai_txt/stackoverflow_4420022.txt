[site]: stackoverflow
[post_id]: 4420022
[parent_id]: 4419955
[tags]: 
1) Is there a much more elegant/efficient way of doing this (embarrass me!) Sure thing. The basic idea: quit trying to tell Python what to do, and just ask it for what you want. content = [ {'url':'url1', 'taglist':['b','a','c','d']}, {'url':'url2', 'taglist':['c','a','b','d']}, {'url':'url3', 'taglist':['a','b','c','d']}, {'url':'url4', 'taglist':['a','b','d','c']}, {'url':'url5', 'taglist':['d','a','c','b']} ] search = {'d' : 1, 'a' : 2, 'b' : 3} # We can create the tag cloud like this: # tagCloud = set(sum((note['taglist'] for note in content), [])) # But we don't actually need it: instead, we'll just use a default value # when looking things up in the 'search' dict. # Create a [[relevance, tag],[],[],...] result list & sort result = sorted( [ [search.get(tag, 100), tag] for tag in note['taglist'] ] + [[note['url']]] # The result will look like [ [relevance, tag],... , [url] ] # Note that the url is wrapped in a list too. This makes the # last processing step easier: we just take the last element of # each nested list. for note in content ) # Remove the relevance values & recreate a list containing # the url string followed by corresponding tags. finalResult = [ [x[-1] for x in note] for note in result ] print "Content: ", content print "Search: ", search print "Final Result: ", finalResult
