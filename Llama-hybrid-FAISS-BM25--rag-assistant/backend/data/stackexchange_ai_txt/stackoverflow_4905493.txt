[site]: stackoverflow
[post_id]: 4905493
[parent_id]: 4904266
[tags]: 
Basically this would consist of a resizable container (I'd say div) with a non-static position (that'll happen inevitably if you're making it draggable), a "background" object with position set to absolute and 100% width/height, and a content container (another div) set to position relative. Should do the trick. #resizable { width: 150px; height: 150px; overflow: hidden; } #resizable > img.background { width: 100%; height: 100%; position: absolute; top: 0; left: 0;} #resizable > div.content { position: relative; padding: 0.5em; color: White; font-weight: bold;} Content paragraph. Check out an example: http://jsfiddle.net/wVAT2/ What happens is that setting the image's position to absolute takes it out of the document flow and positions it relative to the first non-statically positioned ancestor (in this case, the containing draggable div). The relative position on the content div is to ensure the proper stack order for the content that follows the image, otherwise the "background" becomes the foreground. You'd probably have to do some thinking if you wanted to support IE7 with that particular markup to fix the stacking context for jQuery UI's resizing controls, but I'll leave that one to you. Hopefully this will point you in the right direction. If you want to maintain the background aspect ratio rather than having it stretch as you resize, consider binding a function that resizes the image element on the resizable's resize event.
