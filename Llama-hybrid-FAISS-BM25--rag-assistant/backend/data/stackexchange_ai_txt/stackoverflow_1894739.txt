[site]: stackoverflow
[post_id]: 1894739
[parent_id]: 
[tags]: 
What is the best way to organize file version migration code?

I'm writing a plug-in for another program through an API. To save it's current state, my plugin stores an instance of a Project object to the file by serializing it to XML and storing it in a user string, a feature provided by the API. It also stores a separate string that contains the version number of the plug-in currently being used. When a user opens a file my plug-in checks the version numbers. If the current plug-in version is not the same as the version stored in the file it pops up a message warning the user about the different version and that the file might cause the plug-in to crash. I'd much rather provide a set of migration scripts that run automatically when a user opens an older file in a newer version of the plug-in. My question though is where do these usually go and how are they organized? Also say my Project class changes significantly between versions where trying to deserialize the project from an old file will fail with the new Project class. I don't want to keep copies of every version of the Project class is my assembly, but at the same time having to parse through the XML would be even more painful. Assuming parsing the XML is the best option can anyone suggest a more organized way of doing this then the code below? public string MigrateProject(int fileVersion, int plugInversion, string proj) { if(fileVersion>plugInversion) { //tell user to upgrade their copy of the plugin return null; } if(fileVersion ==1) { string v2 = Migrate1to2(serializedProject); string v3 = Migrate2to3(v2); string v4 = Migrate3to4(v3); return v4; } else if(fileVersion ==2) { string v3 = Migrate2to3(serializedProject); string v4 = Migrate3to4(v3); return v4; } else if(fileVersion ==3) { string v4 = Migrate3to4(serializedProject); return v4; } else { //could not migrate project message return null; } }
