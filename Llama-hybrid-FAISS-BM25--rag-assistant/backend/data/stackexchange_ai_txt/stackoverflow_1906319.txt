[site]: stackoverflow
[post_id]: 1906319
[parent_id]: 1906233
[tags]: 
If I read your question you want to address a range of elements in the original array, a slice so to say. In C++ you can do that easily - provided you implement your own arrayclass (keeping a pointer + number elements). Then you can define memberfunctions which will give you back a slice: a pointer into the original array and a number of elements such that you will not address outside the original array. In Plain-Old-C you cannot have to sized arrays sharing storage and a pointer is unbounded by definition: it just points at a single element. You cannot let the C-code "re-interpret" a sized array since the name of the array (the symbol) is the address of the storage, which you cannot modify. What you want is this: int array1[10]; int array2[3]; // reference 3 elements from array1, starting at element 5 in array1 array2 = array1[5]; but that is not allowed. The name "array2" is translated by the compiler into a fixed address which you cannot redefine at runtime - that's why there are pointers: of those you can change whatever they point to at will at runtime.
