[site]: stackoverflow
[post_id]: 4137887
[parent_id]: 4137770
[tags]: 
There are a couple approaches. The first would be to switch the arguments in the function, if some of the arguments are "None". That would work like this. def range1(value, end=None): if end == None: end = value value = 0 return _generate_range_values(value, end) The other primary method would be to have your function get a list of all arguments it receives. Then it can decide what to do, based on the number of arguments. def range2(*args): if len(args) == 1: start = 0 end = int(args[0]) elif len(args) == 2: start = int(args[0]) end = int(args[1]) return _generate_range_values(start, end) The third would be to encourage users to pass named arguments to your function, which makes the order less important. def range3(end, start=0): return _generate_range_values(start, end) Then users would call it with the named start argument when they wanted something besides 0. (Although the named argument would not be required, it keeps the code clear. for i in range3(55, start=12)
