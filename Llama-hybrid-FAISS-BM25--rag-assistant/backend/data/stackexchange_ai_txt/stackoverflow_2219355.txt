[site]: stackoverflow
[post_id]: 2219355
[parent_id]: 
[tags]: 
Is the MailboxProcessor type a replacement for locks?

I have been slowly examining all of the features that F# brings to the table. One that has particularly piqued my interest is the MailboxProcessor . The equivalent of this in C# would most likely use locks. Can we consider the MailboxProcessor as a replacement for locks? In the following example, am I doing anything particularly naive or can you see anything that might be improved? module Tcp = open System open System.Collections.Generic open System.Net open System.Net.Sockets open System.Threading type SocketAsyncMessage = | Get of AsyncReplyChannel | Put of SocketAsyncEventArgs | Dispose of AsyncReplyChannel > type SocketAsyncEventArgsPool(size:int) = let agent = lazy(MailboxProcessor.Start( (fun inbox -> let references = lazy(new List (size)) let idleReferences = lazy(new Queue (size)) let rec loop () = async { let! message = inbox.Receive() match message with | Get channel -> if idleReferences.Value.Count > 0 then channel.Reply(idleReferences.Value.Dequeue()) else let args = new SocketAsyncEventArgs() references.Value.Add args channel.Reply args return! loop() | Put args -> if args = null then nullArg "args" elif references.Value.Count if references.IsValueCreated then references.Value |> Seq.iter(fun args -> args.Dispose()) channel.Reply inbox } loop()))) /// Returns a SocketAsyncEventArgs instance from the pool. member this.Get () = agent.Value.PostAndReply(fun channel -> Get channel) /// Returns the SocketAsyncEventArgs instance to the pool. member this.Put args = agent.Value.Post(Put args) /// Releases all resources used by the SocketAsyncEventArgsPool. member this.Dispose () = (this:>IDisposable).Dispose() interface IDisposable with member this.Dispose() = if agent.IsValueCreated then (agent.Value.PostAndReply(fun channel -> Dispose channel):>IDisposable).Dispose()
