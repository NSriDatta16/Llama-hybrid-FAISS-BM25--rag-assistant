[site]: stackoverflow
[post_id]: 209842
[parent_id]: 209725
[tags]: 
Take a look at Self organizing lists. A quick and dirty look: Move to Front Heuristic: A linked list, Such that whenever a node is selected, it is moved to the front of the list. Frequency Heuristic: A linked list, such that whenever a node is selected, its frequency count is incremented, and then the node is bubbled towards the front of the list, so that the most frequently accessed is at the head of the list. It looks like the move to front implementation would best suit your needs. EDIT: When an address is selected, add one to its frequency, and move to the front of the group of nodes with the same weight (or (weight div x) for courser groupings). I see aging as a real problem with your proposed implementation, in that it requires calculating a weight on each and every item. A self organizing list is a good way to go, but the algorithm needs a bit of tweaking to do what you want. Further Edit: Aging refers to the fact that weights decrease over time, which means you need to know each and every time an address was used. Which means, that you have to have the entire email history available to you when you construct your list. The issue is that we want to perform calculations (other than search) on a node only when it is actually accessed -- This gives us our statistical good performance.
