[site]: stackoverflow
[post_id]: 2950023
[parent_id]: 2949967
[tags]: 
Use threads . use strict; use warnings; use threads; sub first { my $counter = shift; print "I'm running\n" while $counter--; return; } sub second { my $counter = shift; print "And I'm running too!\n" while $counter--; return; } my $firstThread = threads->create(\&first,15); # Prints "I'm running" 15 times my $secondThread = threads->create(\&second,15); # Prints "And I'm running too!" # ... 15 times also $_->join() foreach ( $firstThread, $secondThread ); # Cleans up thread upon exit What you should pay attention to is how the printing is interleaved irregularly. Don't try to base any calculations on the false premise that the execution order is well-behaved. Perl threads can intercommunicate using: shared variables ( use threads::shared; ) queues ( use Thread::Queue; ) semaphores ( use Thread::Semaphore; ) See perlthrtut for more information and an excellent tutorial.
