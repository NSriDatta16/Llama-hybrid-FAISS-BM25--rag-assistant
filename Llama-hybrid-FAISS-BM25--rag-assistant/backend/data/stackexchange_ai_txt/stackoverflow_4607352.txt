[site]: stackoverflow
[post_id]: 4607352
[parent_id]: 
[tags]: 
Class discovery, reflection, jars and jnlp

In our system, we have a plugin mechanism allowing us to instanciate unknown classes at runtime. Provided with a directory or a jar in the classpath, the system is capable to explore the contained classes and if the class implements a particular interface, it can be instanciated and used as plugin. Everything is packaged as jars and works nice and well. However, when trying to bundle it as a webstart application, this mechanism seems to break. More specifically, it seems like the discovery of classes doesn't work anymore: public static Collection getAllClassFiles() { Collection all_files = new ArrayList (); String pathSep = System.getProperty("path.separator"); String classpath = System.getProperty("java.class.path"); for (String path : classpath.split(pathSep)) { File filepath = new File(path); if (filepath.isDirectory()) { all_files.addAll(dirContent(filepath)); } else if (path.endsWith(".jar")) { JarFile jar; try { jar = new JarFile(filepath); } catch (IOException e) { Log.warning("WARNING: " + filepath + " could not be opened!"); continue; } for (Enumeration entries = jar.entries(); entries .hasMoreElements();) { JarEntry entry = entries.nextElement(); if (entry.getName().endsWith(".class")) all_files.add(entry.getName()); } } else if (path.endsWith(".class")) { all_files.add(path); } else { Log.warning("Warning: corrupt classpath entry: " + path); } } return all_files; } So ...this works when calling the system directly using the jars ...but not with webstart anymore despite all jars are signed and included. Any idea how to keep it working with webstart?
