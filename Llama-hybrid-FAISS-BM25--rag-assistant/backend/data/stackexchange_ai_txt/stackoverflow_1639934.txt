[site]: stackoverflow
[post_id]: 1639934
[parent_id]: 1506838
[tags]: 
I knew how to use threads before I knew .NET, so it took some getting used to when I began using BackgroundWorker s. Matt Davis has summarized the difference with great excellence, but I would add that it's more difficult to comprehend exactly what the code is doing, and this can make debugging harder. It's easier to think about creating and shutting down threads, IMO, than it is to think about giving work to a pool of threads. I still can't comment other people's posts, so forgive my momentary lameness in using an answer to address piers7 Don't use Thread.Abort(); instead, signal an event and design your thread to end gracefully when signaled. Thread.Abort() raises a ThreadAbortException at an arbitrary point in the thread's execution, which can do all kinds of unhappy things like orphan Monitors, corrupt shared state, and so on. http://msdn.microsoft.com/en-us/library/system.threading.thread.abort.aspx
