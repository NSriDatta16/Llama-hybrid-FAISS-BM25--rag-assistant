[site]: stackoverflow
[post_id]: 2492293
[parent_id]: 2492049
[tags]: 
If you intend to run this on a *NIX system, you may want to look at Plan 9 From User Space . With these libraries, you could write a C program that make your hardware appear as a part of your file system, i.e. you mount it as you would mount a USB drive, for example. Once mounted, you can use PHP's function for manipulating files to control your hardware. If you don't know what Plan 9 is, this may not be very clear. Let me illustrate by an dummy example : your hardware is an electronic board displaying the number of logged in user via a 7 segment display. You use Plan 9 from user space to write a program that mounts 2 files : /somewhere/input /somewhere/output Writing "42" (as you would do with a text file) to input will make your board display 42. Reading output will for example tell you for how long this number did not change. This may not be the easiest way to achieve your goal, as learning to use the Plan 9 libraries is not very easy (although people on IRC are very nice and helpful), but it is in my opinion the most elegant way. With this, you would also be able to control your hardware from any other language, for all languages I know can manipulate files.
