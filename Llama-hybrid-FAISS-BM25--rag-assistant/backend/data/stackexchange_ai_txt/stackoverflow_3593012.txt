[site]: stackoverflow
[post_id]: 3593012
[parent_id]: 
[tags]: 
Does using prototypes in JavaScript have any real world advantages?

I just finished Doug Crockford's The Good Parts , and he offers three different ways to go about inheritance: emulation of the classical model, prototype-based inheritance, and functional inheritance. In the latter, he creates a function, a factory of sorts, which spits out objects augmented with desired methods that build upon other objects; something along the lines of: var dog = function(params) { // animal is the 'super class' created // the same way as the dog, and defines some // common methods var that = animal(params); that.sound = 'bark'; that.name = function () {}; return that; } Since all objects created this way will have a reference to the same functions, the memory footprint will be much lower than using when using the new operator, for instance. The question is, would the prototype approach offer any advantages in this case? In other words, are object prototypes somehow 'closer to the metal' that provide performance advantages, or are they just a convenience mechanism? EDIT: I'll simplify the question. Prototypes vs. their emulation through object composition. So long as you don't require all object instances to get updated with new methods which is a convenience offered only by prototypes, are there any advantages to using prototypes in the first place? I emailed Doug Crockford, and he had this to say: [Using the functional approach above vs. prototypes] isn't that much memory. If you have a huge number of objects times a huge number of methods, then you might want to go prototypal. But memories are abundant these days, and only an extreme application is going to notice it. Prototypes can use less memory, but can have slightly slower retrieval, particularly if the chains are very long. But generally, this is not noticeable.
