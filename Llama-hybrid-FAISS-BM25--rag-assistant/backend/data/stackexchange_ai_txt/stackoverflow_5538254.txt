[site]: stackoverflow
[post_id]: 5538254
[parent_id]: 5538197
[tags]: 
We are generally not meant to create new thread directly. Only in a few circumstances it is acceptable. So if you do use new Thread() especially in UI , that would be frowned upon. It is encouraged to use BackgroundWorker or Task which encapsulates thread exception handling so no exception handling in terms of catch block would be necessary. These 4 scenarios are acceptable cases where you want your own thread (From CLR via C# ): I highly recommend that you use the thread pool to execute asynchronous compute-bound operations whenever possible. However, there are some occasions when you might want to explicitly create a thread dedicated to executing a particular compute-bound operation. Typically, you'd want to create a dedicated thread if you're going to execute code that requires the thread to be in a particular state that is not normal for a thread pool thread. For example, I'd create a dedicated thread if I wanted the thread to run at a special priority (all thread pool threads run at normal priority, and you should not alter a thread pool thread's priority). I would also consider creating and using my own thread if I wanted to make the thread a foreground thread (all thread pool threads are background threads), thereby preventing the application from dying until my thread has completed its task. I'd also use a dedicated thread if the compute-bound task were extremely long running; this way, I would not be taxing the thread pool's logic as it tries to figure out whether to create an additional thread. Finally, I'd use a dedicated thread if I wanted to start a thread and possibly abort it prematurely by calling Thread's Abort method (discussed in Chapter 21, "CLR Hosting and AppDomains").
