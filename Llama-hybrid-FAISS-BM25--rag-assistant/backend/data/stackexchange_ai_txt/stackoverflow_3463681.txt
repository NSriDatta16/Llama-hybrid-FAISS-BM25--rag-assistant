[site]: stackoverflow
[post_id]: 3463681
[parent_id]: 3463641
[tags]: 
I love the concept of DI and loosely coupled system, a lot. However, I found tooling in Spring lacking at best. For example, it's hard to do "refactoring", e.g. to change a name of a bean declared in Spring. I'm new to Spring, so I would be missing something. There is no compiling time check etc. You need a smarter IDE. IntelliJ from JetBrains allows refactoring, renaming, etc. with full knowledge of your Spring configuration and your classes. My question is why do we want to use XML to store the configuration? Why not? You have to put it somewhere. Now you have a choice: XML or annotations. IMO, the whole idea of Spring (IoC part) is to force certain creational pattern. In the world of gang-of-four patterns, design patterns are informative. ApplicationContext is nothing more than a big object factory/builder. That's a GoF pattern. Spring (and other DIs) on the other hand, provides very prescribed way how an application should be hooked up with individual components. GoF is even more prescriptive: You have to build it into objects or externalize it into configuration. Spring externalizes it. I have put Scala in the title as well as I'm learning it. How do you guys think to create a domain language (something like the actor library) for dependency ingestion. You must mean "injection". Writing the actual injection code in Scala itself, you get all the goodies and tooling that comes with it. Don't see what that will buy me over and above what Spring gives me now. Although application developers might as well bypass your framework, I would think it's relatively easy to standard, such as the main web site/app will only load components of certain pattern. Sorry, I'm not buying your idea. I'd rather use Spring. But there's no reason why you shouldn't try it and see if you can become more successful than Spring. Let us know how you do.
