[site]: stackoverflow
[post_id]: 357055
[parent_id]: 353646
[tags]: 
Any code of any complexity has many places where different patterns may apply. MVC is prominent in the Cocoa documents because it explains the relationships between your functional code (the model), your UI code or IB design (the view), and the Cocoa services that tie them together (the controller). That's worth emphasis, particularly in the introductory dox, because you need a little "wake-up call" to stop thinking you have to write it all yourself, and start thinking about how to design your unique parts, and trust the framework to do its plumbing job. The variant definitions of MVC are legendary, and it's worth pointing out that MVC is not described in the canonical "Gang of Four" book, "Design Patterns." It's also worthwhile to admit that Cocoa's "MVC" model is not the same as the SmallTalk 80 MVC (which is where the terminology originated). It's probably also worth pointing out that "GoF" actually uses the word "pattern" to denote a particular style of documentation, not the abstract way of designing code that the pattern describes. It's too bad that this usage has largely been lost. If we all understood the word that way, then I could say "it would be really useful if someone would actually write up a pattern for Cocoa's MVC." Then we wouldn't all be so confused!
