[site]: crossvalidated
[post_id]: 361156
[parent_id]: 361077
[tags]: 
@JanKukacka gave a good answer, but I just want show different solution that more efficient if you have high cardinality categorical features (features with large number of categories), called embedding. All categorical features can have one separate input or you can have different inputs per each categorical feature if you want to have embedding vectors with different shape. Each value from the category maps to some unique vector and at the end all these vectors and numerical features are concatenated into one large vector that gets propagated through the network. One example you can find here: https://github.com/itdxer/neupy/blob/master/examples/mlp/mix_categorical_numerical_inputs.py Here is how the graph looks like if you run this command network.network.show() You can see that input on the right side expects numerical identifiers per each categorical features. Three categorical features are transformed into three 4-dimensional vectors and after that they are just reshaped in order to form one vector per each sample rather than matrix. After that, vector with 12 values , that represents 3 categorical features (3 x 4) is concatenated with 17 numerical features. At this point you have 29 features in the vector and you can propagated it through the network.
