[site]: stackoverflow
[post_id]: 766892
[parent_id]: 766881
[tags]: 
Although not specific to new programming languages, the book Producing Open Source Software by Karl Fogel (available to read online) may be contain some hints to the issue of making a community around your new programming language. In terms of adoption of programming languages in general, it seems like the trend lately has been to have a rich library to make development times shorter. As there isn't much detail on what your language is like, it's hard to determine whether adoption of the language is going to depend on the availability of a rich library. Perhaps your language will be able to fill a niche that has been overlooked by other languages and be able to gain users. Or perhaps it has a slick name that will draw people in -- there are many factors which can affect the adoption of a language. Here are some factors that come to mind when thinking about recent successful languages: Ability to leverage existing libraries in the new language. Having an adapter to external libraries written in other languages. Python allows access to code written in C through the Python/C API . Targeting a platform which already has plenty of libraries available for use. Groovy and Scala target the Java platform, therefore allowing the use of and interoperation between existing Java code. Language design and syntax to allow increased productivity. Many dynamically-typed languages have gained popularity, such as Ruby and Python to name a couple. More concise and clear code can be written in languages such as Groovy, as opposed to verbose languages such as Java. Offering features such as functions as first-class objects and closures which aren't offered in more "traditional" languages such as C and Java. A community of dedicated users who also are willing to teach newcomers on the benefits of a language The human factor is going to be big in wide-spread support for a language -- if people never start using your language, it won't gain more users. Also, another suggestion that I could add is to make the development of your language open -- keep your users posted on developments in your language, and allow people to give you feedback. Better yet, let your users take part in the decision-making process, if you feel that is appropriate. I believe that by offering ways to participate in the bringing up of a language, the more people will feel that they have a stake in the success of the new language, so the more likely it will gain more support. Good luck!
