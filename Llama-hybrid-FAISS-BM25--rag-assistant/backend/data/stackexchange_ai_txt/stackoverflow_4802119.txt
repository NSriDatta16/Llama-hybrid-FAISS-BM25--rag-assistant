[site]: stackoverflow
[post_id]: 4802119
[parent_id]: 
[tags]: 
How can Python continuously fill multiple threads of subprocess?

I'm running an app, foo, on Linux. From a Bash script/terminal prompt, my application runs multi-threaded with this command: $ foo -config x.ini -threads 4 System Monitor and top report foo averages about 380% CPU load (quad-core machine). I've recreated this functionality in Python 2.6x with: proc = subprocess.Popen("foo -config x.ini -threads 4", \ shell=True, stdin=subprocess.PIPE, \ stdout=subprocess.PIPE, stderr=subprocess.PIPE) mylist = ['this','is','my','test','app','.'] for line in mylist: txterr = '' proc.stdin.write(line.strip()+'\n') while not proc.poll() and not txterr.count('Finished'): txterr += subproc.stderr.readline() print proc.stdout.readline().strip(), Foo runs slower and top reports a CPU load of 100%. Foo also runs fine with shell=False, but still slow: proc = subprocess.Popen("foo -config x.ini -threads 4".split(), \ shell=False, stdin=subprocess.PIPE, \ stdout=subprocess.PIPE, stderr=subprocess.PIPE) Is there a way to have Python subprocess continuously fill all the threads?
