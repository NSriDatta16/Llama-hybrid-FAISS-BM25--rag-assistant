[site]: crossvalidated
[post_id]: 180925
[parent_id]: 
[tags]: 
More consistent medoids from Lloyd's algorithm?

I wrote an implementation of Lloyd's algorithm in Python and was running some tests. My data set is 1D (specifically dealing with UNIX time in seconds). When the initial medoids are randomly selected, the outputted medoids appear to be kind of " random ". Is there any way to get the resultant medoids more consistent? Each data point (unix time) is actually associated with a single numerical value. I want to be able to compare changes in the mean of the associated numerical values in the different clusters when new data is introduced into the data set that the k-medoids function is operating on. Maybe I implemented the algorithm incorrectly and it should be more consistent? Here's how I implemented it for N clusters: Randomly select N data points as initial N medoids. Allocate N clusters associated with each medoid. Place all data points in the first cluster. For every cluster 1..N, move each data point (in the cluster) to the cluster associated with the most suitable medoid. Most suitable is defined as the medoid with the smallest distance to the data point in question. For every cluster 1..N, determine best medoid from cluster and set it as the medoid for the cluster (if best medoid is already chosen, skip). Best medoid is determined by taking the median of the combination of the medoid and the cluster. Since it's 1-D data, I just place all the data points in a list, sort it, then take the number in the middle of the list. Repeat from 4 until medoids no longer change i.e. convergence. Is this correct, and if so, is there any way to make the medoids more consistent even though the initial medoids are randomly selected? I realize that the algorithm is usually used for k-means and not k-medoids (I think?), though from what I've read, the difference between a mean and a medoid is that a medoid is an actual data point while a mean isn't necessarily. I based my implementation on readings from: Lloyd's Algorithm @ Wikipedia K-Medoids @ Wikipedia Technical Report regarding k-Medoids Clustering The Data Science Lab
