[site]: stackoverflow
[post_id]: 4491748
[parent_id]: 4491679
[tags]: 
A solution to consider (rather than hand-rolling your own) would be to leverage an IoC container e.g. Unity . IoC containers commonly support registering an instance against an interface. This provides your singleton behaviour as clients resolving against the interface will receive the single instance. //Register instance at some starting point in your application container.RegisterInstance (new ActiveSessionService()); //This single instance can then be resolved by clients directly, but usually it //will be automatically resolved as a dependency when you resolve other types. IActiveSessionService session = container.Resolve (); You will also get the added advantage that you can vary the implementation of the singleton easily as it is registered against an interface. This can be useful for production, but perhaps more so for testing. True singletons can be quite painful in test environments.
