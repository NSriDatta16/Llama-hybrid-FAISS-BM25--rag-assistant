[site]: stackoverflow
[post_id]: 2086733
[parent_id]: 2086680
[tags]: 
Quite the opposite. The tests for our DA layer are not concerned about the database at all. For example. We have a test that calls the Save method to save a new data object. It then calls the Load method to check that the object can be loaded back. I don't care weather that object was actually saved to the database or not, all I care about is that I can retrieve objects that were saved. If the EF wants to do some clever caching and not save immediately then that's fine by me. Consider that in the future we might not use a SQL server back end any more, we might switch to oracle, or even a NOSQL solution. I don't want all my DA layer unit tests to break when I switch the back end. It's actually the reverse, I need my DA layer unit tests to continue to work unchanged so I can validate that the switch of the storage solution doesn't effect the semantics or use of the DA layer.
