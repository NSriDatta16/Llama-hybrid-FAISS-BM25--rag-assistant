[site]: stackoverflow
[post_id]: 5200188
[parent_id]: 5054113
[tags]: 
I've made a few changes to the code, and it works as I intended. For anyone who's interested, here's the relevant snippits from the working version. I didn't post the code for the individual fragment layouts, but it's really just the xml version of what I was doing in the code in the first draft. I'm liking the simplicity of the inflater object that onCreateView utilizes, it keeps the code to a minimum, and I can make the layout changes in XML without changing code. actionFragment.java package com.pte.StatCast; // imports public class actionFragment extends Fragment { // class variables int mActivityType; // default (null) constructor public actionFragment(){ } public actionFragment(int n){ this.mActivityType = n; } @Override public void onCreate(Bundle saved){ super.onCreate(saved); if (saved != null){ mActivityType = saved.getInt("Type"); } } @Override public void onSaveInstanceState(Bundle toSave){ toSave.putInt("Type", mActivityType); } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState){ Context c = getActivity().getApplicationContext(); LinearLayout.LayoutParams p = new LinearLayout.LayoutParams( LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT, 1); View actionPane = new View(c); switch (mActivityType) { case actionType.PITCH_ACTION: // inflate XML resource to create pitch_frag view actionPane = inflater.inflate(R.layout.pitch_frag, null); actionPane.setLayoutParams(p); // set up listener for touch events ImageView strikeZoneImg = (ImageView)actionPane.findViewById(R.id.strikeZone); strikeZoneImg.setOnTouchListener(new OnTouchListener(){ @Override public boolean onTouch(View v, MotionEvent e) { //DO STUFF }); return actionPane; case actionType.HIT_ACTION: // inflate XML resource to create hit_frag view actionPane = inflater.inflate(R.layout.hit_frag, null); actionPane.setLayoutParams(p); return actionPane; default: LinearLayout l = new LinearLayout(c); l.setLayoutParams(p); return l; // return a blank linear layout as the default action } } } StatCast.java package com.pte.StatCast; // imports public class StatCast extends Activity { /** Called when the activity is first created. */ // Declare stuff @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); // database stuff here /* * Swap in the pitch fragment when activity first loads */ swapFragment(actionType.PITCH_ACTION); } private void swapFragment(int myType){ Fragment f = new actionFragment(myType); // Execute a transaction, replacing any existing // fragment with this one inside the frame. FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.replace(R.id.actionFragment, f); ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN); ft.addToBackStack(null); ft.commit(); Log.v("PTE", "COMPLETED: swapFragment"); } } I'm still not entirely sure why the first attempt didn't work, but this method seems to me a little cleaner, and it works so I'm not complaining. If you have thoughts or comments, I'm still all ears to learn about this stuff. Thanks!
