[site]: stackoverflow
[post_id]: 766946
[parent_id]: 766939
[tags]: 
O((n^3)/4) makes no sense in terms of big-O notation since it's meant to measure the complexity as a ratio of the argument. Dividing by 4 has no effect since that changes the value of the ratio but not its nature. All of these are equivalent: O(n^3) O(n^3/4) O(n^3*1e6) Other terms only make sense when they include an n term, such as: O(n^3 / log(n)) O(n^3 * 10^n) As Anthony Kanago rightly points out, it's convention to: only keep the term with the highest growth rate for sums: O(n^2+n) = O(n^2) . get rid of constants for products: O(n^2/4) = O(n^2) . As an aside, I don't always agree with that first rule in all cases. It's a good rule for deciding the maximal growth rate of a function but, for things like algorithm comparison (a) where you can intelligently put a limit on the input parameter, something like O(n^4+n^3+n^2+n) is markedly worse than just O(n^4) . In that case, any term that depends on the input parameter should be included. In fact, even constant terms may be useful there. Compare for example O(n+1e100) against O(n^2) - the latter will outperform the former for quite a while, until n becomes large enough to have an effect on the constatnt term. (a) There are, of course, those who would say it shouldn't be used in such a way but pragmatism often overcomes dogmatism in the real world :-)
