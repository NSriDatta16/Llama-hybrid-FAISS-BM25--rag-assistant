[site]: stackoverflow
[post_id]: 1935964
[parent_id]: 
[tags]: 
basic playback with programmatically created windows media player

I was trying to "just quickly integrate" the Windows Media Player via COM to play single files from the local file system or http sources - but due to the sparse documentation and online resources to its usage when not embedding into some kind of an Ole container, i couldn't get that supposedly trivial use-case to work. Initialization etc. works fine, but actually playing some file always fails. Example code, starting with initialization (error handling stripped, basically translated from the C# example at MSDN , executed on the main thread): CComPtr player; player.CoCreateInstance(__uuidof(WindowsMediaPlayer), 0, CLSCTX_INPROC_SERVER); CComQIPtr core(player); CComPtr controls; core->get_controls(&controls); CComPtr playlist; core->get_currentPlaylist(&playlist); CComBSTR path("c:\\bar.mp3"); // alternatively http://foo/bar.mp3 The first approach to play something gives "command not available" : core->put_url(path); // ... waiting after that for WMP to load doesn't make a difference controls->play(); // returns 0x000D1105 - NS_S_WMPCORE_COMMAND_NOT_AVAILABLE The second approach only produces S_OK s, but nothing is actually played: CComPtr media; core->newMedia(path, &media); playlist->appendItem(media); controls->playItem(media); // returns S_OK, but doesn't play Another thing i noted is that core->get_playState() always returns wmposMediaOpening , no matter how long i wait. I've stumbled upon one thread that suggests multi-threading might not work properly with WMP and this code runs in a multi-threaded apartment. Might that be the problem? If not, what else could be preventing WMP from playing the files? Notable background: The WMP instance is created in a DLL with a browser as the host-process. Update: Trying plain DirectShow, which WMP should be using itself, exhibits a more specific problem - see the question for that .
