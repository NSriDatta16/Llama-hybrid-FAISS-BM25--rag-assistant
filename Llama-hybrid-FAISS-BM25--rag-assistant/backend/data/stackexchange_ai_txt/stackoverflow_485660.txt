[site]: stackoverflow
[post_id]: 485660
[parent_id]: 404615
[tags]: 
All good recommendations. Here are some design approaches that I've found useful. Byte Coding Write an interpreter for a special-purpose byte-code instruction set, and write as much of the program as possible in that instruction set. If certain operations require high performance, make them native-code and call them from the interpreter. Code Generation If part of the input data changes very infrequently, you could have an external code generator that creates an ad-hoc program. That will be smaller than a more general program, as well as running faster and not having to allocate storage for the seldom-changing input. Be a data-hater Be willing to waste lots of cycles if it will let you store absolutely minimum data structure. Usually you will find that performance suffers very little.
