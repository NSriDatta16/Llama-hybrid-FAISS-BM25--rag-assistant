[site]: stackoverflow
[post_id]: 3656820
[parent_id]: 3653688
[tags]: 
OK I have found a solution courtesy of the guy(s) at http://dyve.posterous.com/?tag=googlemaps They provide 2 routines: if (!google.maps.Polygon.prototype.getBounds) { google.maps.Polygon.prototype.getBounds = function(latLng) { var bounds = new google.maps.LatLngBounds(); var paths = this.getPaths(); var path; for (var p = 0; p = lng || vertex2.lng() = lng) { if (vertex1.lat() + (lng - vertex1.lng()) / (vertex2.lng() - vertex1.lng()) * (vertex2.lat() - vertex1.lat()) I then simply add this code function initialize() { var areas = []; var coords = []; var latlng = new google.maps.LatLng(53.85, -2.15); var myOptions = { zoom: 12, center: latlng, mapTypeId: google.maps.MapTypeId.ROADMAP }; var map = new google.maps.Map(document.getElementById("map_canvas"), myOptions); var marker = new google.maps.Marker({ position: latlng, map: map, title:"Hello World!", draggable: true }); coords[0] = [ new google.maps.LatLng(53.9, -2.15), new google.maps.LatLng(53.91, -2.05), new google.maps.LatLng(53.85, -2.10), new google.maps.LatLng(53.9, -2.15) ]; areas[0] = new google.maps.Polygon({ paths: coords[0], strokeColor: "#FF0000", strokeOpacity: 0.8, strokeWeight: 2, fillColor: "#FF0000", fillOpacity: 0.35 }); areas[0].setMap(map); coords[1] = [ new google.maps.LatLng(53.9, -2.14), new google.maps.LatLng(53.88, -2.05), new google.maps.LatLng(53.85, -2.09), ]; areas[1] = new google.maps.Polygon({ paths: coords[1], strokeColor: "#00FF00", strokeOpacity: 0.8, strokeWeight: 2, fillColor: "#00FF00", fillOpacity: 0.35 }); areas[1].setMap(map); google.maps.event.addListener(marker, 'dragend', function(point) { for(var area = 0; area Drag the pin over 1 or both of the triangles to get true/false.
