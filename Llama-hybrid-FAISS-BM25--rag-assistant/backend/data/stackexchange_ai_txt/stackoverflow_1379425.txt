[site]: stackoverflow
[post_id]: 1379425
[parent_id]: 1379340
[tags]: 
This can not really be answered in a general manner, as the impact will vary heavily depending on the specifics of the database in question and the apps using it. So you basically stated the general expectations concerning the impact: Overall memory demands for storage should go down, as redundant data gets removed CPU needs might go up, as queries might get more expensive (Note that in many cases queries on a normalized database will actually be faster, even if they are more complex, as there are more optimization options for the query engine) Development resource needs might go up, as developers might need to construct more elaborate queries (But on the other hand, you need less development effort to maintain data integrity) So the only real answer is the usual: it depends ;) Note: This assumes that we are talking about cautious and intentional denormalization. If you are referring to the 'just throw some tables together as data comes along' approach way to common with inexperienced developers, I'd risk the statement that normalization will reduce resource needs on all levels ;) Edit: Concerning the specific context added by cdeszaq, I'd say 'Good luck getting your point through' ;) Oviously, with over 300 Tables and no constraints (!), the answer to your question is definitely 'normalizing will reduce resource needs on all levels' (and probably very substantially), but: Refactoring such a mess will be a major undertaking . If there is only one app using this database, it is already dreadful - if there are many, it might become a nightmare! So even if normalizing would substantially reduce resource needs in the long run, it might not be worth the trouble, depending on circumstances. The main questions here are about long term scope - how important is this database, how long will it be used, will there be more apps using it in the future, is the current maintenance effort constant or increasing, etc. ... Don't ignore that it is a running system - even if it's ugly and horrible, according to your description it is not (yet) broken ;-)
