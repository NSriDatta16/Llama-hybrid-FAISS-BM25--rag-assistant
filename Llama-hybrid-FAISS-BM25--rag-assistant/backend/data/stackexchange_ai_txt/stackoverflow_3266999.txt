[site]: stackoverflow
[post_id]: 3266999
[parent_id]: 3265176
[tags]: 
Well, I haven't actually run this, but let's read the code and see what it does. string query = "Maine, Maryland, Massachusetts, M"; var queries = query.Trim().Split((new[] { "," }), StringSplitOptions.RemoveEmptyEntries); query.Trim() does nothing because Trim removes spaces from the beginning and end of the string, not from the middle of the string. The split produces an array of {"Maine", " Maryland", " Massachusetts", " M"} which is assigned to queries. Notice the leading spaces on Maryland and Massachusetts. You haven't stripped off these spaces. This seems wrong. string lastQuery = queries[queries.Length - 1].Trim(); lastQuery is now "M". The array, queries, remains unchanged. "lastQuery" is then not ever used. Why is this even in here? This is not necessary to show the bug. if (queries.Length > 1) { var remQueries = queries.Take(queries.Length - 1).ToArray(); OK, now we have an array {"Maine", " Maryland", " Massachusetts"} which is assigned to remQueries. Again, note the leading spaces. string[] suggestions = new string[] {"Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana"}; System.Console.WriteLine("Before Except "); suggestions.ToList().ForEach(str => { System.Console.WriteLine(str); }); var unqiueSugs = from sug in suggestions where !remQueries.Any(q => q.Equals(sug, StringComparison.OrdinalIgnoreCase)) select sug; I note that "unique" is misspelled here. The query is "look at each suggestion. Remove any suggestions that are exactly equal to "Maine", " Maryland", or " Massachusetts". Again, note the leading spaces. if (unqiueSugs != null) This is unnecessary. The query object will never be null. { suggestions = unqiueSugs.ToArray(); The query executes. Since "Maine" was on the list, it is filtered out. If " Maryland" was on the list it would be filtered out, but it is not. " Maryland" and "Maryland" are different strings. } System.Console.WriteLine("\n After Except "); suggestions.ToList().ForEach(str => { System.Console.WriteLine(str); }); } So the result is correct. I suspect your error is that you believe that "Trim" removes all the spaces from a string. It does not. It removes the spaces from the beginning and end of a string. You should NOT use Replace to get rid of all the spaces in the string because of course "New York" and "Rhode Island" could be in there and you don't want the spaces removed from them presumably. The correct logic is to do the split on the comma first and then do the trim on all the resulting elements . Don't do the trim first! Now, what's more important is that you learn how to do this sort of simple program analysis yourself rather than asking the internet every time you have a problem . I recommend learning how to use a debugger. Step through your program carefully and examine every step along the way and compare that against what you think the correct state should be. Listen to quiet doubts . Your brain will tell you when something looks out-of-place, like an unexpected space. Listen to that and track it down. Debugging is a skill like any other; you learn it by practicing.
