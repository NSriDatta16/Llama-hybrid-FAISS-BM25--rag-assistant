[site]: stackoverflow
[post_id]: 4951253
[parent_id]: 4950956
[tags]: 
If x is a marker number, ax is the mileage to that marker, and px is the minimum penalty to get to that marker, you can calculate pn for marker n if you know pm for all markers m before n . To calculate pn , find the minimum of pm + (200 - (an - am))^2 for all markers m where am and (200 - (an - am))^2 is less than your current best for pn (last part is optimization). For the starting marker 0 , a0 = 0 and p0 = 0 , for marker 1 , p1 = (200 - a1)^2 . With that starting information you can calculate p2 , then p3 etc. up to pn . edit : Switched to Java code, using the example from OP's comment. Note that this does not have the optimization check described in second paragraph. public static void printPath(int path[], int i) { if (i == 0) return; printPath(path, path[i]); System.out.print(i + " "); } public static void main(String args[]) { int hotelList[] = {0, 200, 400, 600, 601}; int penalties[] = {0, (int)Math.pow(200 - hotelList[1], 2), -1, -1, -1}; int path[] = {0, 0, -1, -1, -1}; for (int i = 2; i Output is: Hotel: 200, penalty: 0, path: 1 Hotel: 400, penalty: 0, path: 1 2 Hotel: 600, penalty: 0, path: 1 2 3 Hotel: 601, penalty: 1, path: 1 2 4
