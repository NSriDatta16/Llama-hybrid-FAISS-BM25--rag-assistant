[site]: stackoverflow
[post_id]: 4524278
[parent_id]: 4518259
[tags]: 
You have only a few steps to go: 4) in First project, click the disclosure triangle in the Groups and Files section for the Second Project reference. this will display the targets of Second Project. 5) Drag the target reference (e.g., static library) from Second Project to the target in First Project's link phase. That should clear up all the linker errors for the symbols which exist in Second Project's library. Of course, you'll have to remove those sources (based in second Second) which are compiled and linked from First. Managing static libraries for huge codebases is dead easy this way (although I prefer the build up to the minute (as well as several build variants), and don't reference archived binaries as Derek does). Learning to minimize changes which break builds takes time to learn. dynamic libraries are a bit different - depending on their distribution, you may want to version (as Derek outlined). It's good to share, but you should put the shared exported symbols in a library, which is a dependency of both apps. Just be careful not to add too much unnecessary objc symbols to the library - objc symbols and their references cannot be stripped from the final executable and they will cause runtime collisions if they appear in two images (dylib, app, static lib) within the same process.
