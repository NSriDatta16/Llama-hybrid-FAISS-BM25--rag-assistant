[site]: datascience
[post_id]: 97451
[parent_id]: 
[tags]: 
Image classification - first production coding try

TLDR Experienced non-ML developer has done the basics to learn beginner ML, now needs to put it to real use - looking for help. ...I guess a common/frequent situation for many! For mods - I've tried to make this as specific as possible, not looking for opinions etc. I've also searched for related questions without finding anything directly related here. Background Me : I'm an experienced coder and scientific algorithm developer, with a strong science/maths background, (ie 20+ years experience) who has only previously used non-ML (ie scikit-image, openCV) algorithms for image analysis type tasks. I've had no problems doing several background beginner ML courses (Several of Andrew Ng's etc) and understand the basic theory, coding/implementation of all the beginner level stuff etc pretty well. (ie I could write my own SVM/CNN/NN classification model using just numpy if I was forced to) . Problem I want to start using ML to perform some basic image classification in production use to replace current 'classical' image analysis based classification techniques. or... I've learned a bunch of theory using somewhat toy examples and likely old'ish libraries, now I need to do some 'real' work using current libraries. Specific Problem Luckily, the images I need to classify are a) not many classes (5-10), b) quite simple and readily distinguishable. Some conceptual examples shown below. Questions (note my problem is classifying the images, not object detection within the image) For the examples below, would a basic SVM, neural network etc type model be sufficient, (even accounting for the small translation/rotation variance with the objects within), or would a CNN/equivalent be best? Given my complete lack of exposure to latest/greatest models/algorithms/libraries, are their any canned type models/libraries that would simplify model generation/deployment? Given production deployment would be using python 3.8, on AWS micro/small instances (ie no GPU, but more importantly constraints on disk space, what library (Tensorflow, Sklearn, PyTorch etc) would have a smaller footprint from CPU and disk-space requirements? For someone doing their first theory->production try, are their any "dont do this" or "make sure you do this" type gotchas that would be good for me to know? Caveats The 'objects' within each image may be translated and/or rotated by a small amount - maybe up to 10-15% of the image dimensions and +/- 10 degrees:
