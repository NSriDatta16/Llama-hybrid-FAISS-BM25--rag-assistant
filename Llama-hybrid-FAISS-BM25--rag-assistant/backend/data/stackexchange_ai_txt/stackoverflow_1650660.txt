[site]: stackoverflow
[post_id]: 1650660
[parent_id]: 1648956
[tags]: 
x!=None returns True (whose numeric value is 1 !) for non-Nones, False (whose numeric value is 0) for Nones. So, sum(x!=None for x in (foo, bar, baz)) is the simplest way to count how many of those identifiers are bound to non-None values (and you can check that count against 1 just like other answers do for their ways of obtaining the count). This is a very general approach in that instead of x!=None you could be using any strictly-bool predicate of interest; for example if you have a bunch of integers and want to know how many of them have 3 as the first digit of their decimal representation, sum(str(abs(x)).startswith('3') for x in (a, b, c, d, e)) works fine too. Don't be queasy about "summing bools": Python bools are sharply defined as a subclass of int with exactly two instances which have peculiar str/repr but otherwise behave exactly like the plain ints 0 and 1. There are good pragmatical reasons for this design and the ability to do arithmetic on bools is one of them, so feel free to use that ability!-)
