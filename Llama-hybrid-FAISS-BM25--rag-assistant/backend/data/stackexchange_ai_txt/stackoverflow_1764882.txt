[site]: stackoverflow
[post_id]: 1764882
[parent_id]: 1764578
[tags]: 
For these kinds of problems (get top row in a group) I've had the most success, in both performance and maintainability, using ROW_NUMBER() and a CTE . The pattern is simple: the CTE selects the columns you want, and adds an additional column for the ROW_NUMBER() within each group (ordered by your desired order, of course). Then the post-CTE part of the query restricts results to those where the ROW_NUMBER() is 1. Like this: WITH cte AS ( SELECT tblPlayer.PlayerId, Surname, Forename, HomeClub, OpponentClub, AgeGroup, MatchDateTime, DOB, ROW_NUMBER () OVER (PARTITION BY tblPlayer.PlayerId ORDER BY MatchDateTime DESC) AS RowNum FROM tblPlayer LEFT JOIN tblAppearance ON tblAppearance.PlayerId = tblPlayer.PlayerId LEFT JOIN tblMatch ON tblMatch.MatchId = tblAppearance.MatchId WHERE Forename LIKE '%rob%' AND Surname LIKE '%white%' ) SELECT PlayerId, Surname, Forename, HomeClub, OpponentClub, AgeGroup, MatchDateTime, DOB FROM cte WHERE RowNum = 1 ORDER BY Surname, Forename, DOB, MatchDateTime Note that I'm not assuming that any IDs are ordered in the same way that the MatchDateTime's are-- there are lots of reasons (e.g. advance scheduling) why that assumption may not hold. If, however, appearance IDs are ordered identically to dates, then the query above can be made much more efficient because you won't have to do any joins to find the MatchID's you're looking for. Note that if you have a very large number of players (100,000+) and you run this query often, there are optimizations you'll want to do here, since every time you run this query you'll do a table scan of the Player table to support your LIKE filter. If this is the case, you'll probably want to creat a covering index on Surname, Forename and get SQL to run your query in stages: first filter Player records using the covering index, then do your join, and finally pull out other Player columns from the clustered index. It's usually hard to get SQL to perform plans like this (you may need a temp table for the intermediate results), but for very large tables the perf win is worth it. If you have a small number of players, ignore the preceding paragraph. :-)
