[site]: stackoverflow
[post_id]: 3742448
[parent_id]: 2484892
[tags]: 
This c# implementation is about 8% faster than @andras over the range 123456789 to 123987654 but it is really difficult to see on my test box as his runs in 14ms and this one runs in 13ms. static bool IsPandigital(int n) { int count = 0; int digits = 0; int digit; int bit; do { digit = n % 10; if (digit == 0) { return false; } bit = 1 0); return (1 >1; } If we average the results of 100 runs we can get a decimal point. public void Test() { int pans = 0; var sw = new Stopwatch(); sw.Start(); for (int count = 0; count @andras implementation averages 14.4ms and this implementation averages 13.2ms EDIT: It seems that mod (%) is expensive in c#. If we replace the use of the mod operator with a hand coded version then this implementation averages 11ms over 100 runs. private static bool IsPandigital(int n) { int count = 0; int digits = 0; int digit; int bit; do { digit = n - ((n / 10) * 10); if (digit == 0) { return false; } bit = 1 0); return (1 > 1; } EDIT: Integrated n/=10 into the digit calculation for a small speed improvement. private static bool IsPandigital(int n) { int count = 0; int digits = 0; int digit; int bit; do { digit = n - ((n /= 10) * 10); if (digit == 0) { return false; } bit = 1 0); return (1 > 1; }
