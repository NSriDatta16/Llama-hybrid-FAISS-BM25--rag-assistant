[site]: stackoverflow
[post_id]: 2862176
[parent_id]: 2862071
[tags]: 
The answers to these questions vary depending on whether you are using a stream socket ( SOCK_STREAM ) or a datagram socket ( SOCK_DGRAM ) - within TCP/IP, the former corresponds to TCP and the latter to UDP. How do you know how big to make the buffer passed to recv() ? SOCK_STREAM : It doesn't really matter too much. If your protocol is a transactional / interactive one just pick a size that can hold the largest individual message / command you would reasonably expect (3000 is likely fine). If your protocol is transferring bulk data, then larger buffers can be more efficient - a good rule of thumb is around the same as the kernel receive buffer size of the socket (often something around 256kB). SOCK_DGRAM : Use a buffer large enough to hold the biggest packet that your application-level protocol ever sends. If you're using UDP, then in general your application-level protocol shouldn't be sending packets larger than about 1400 bytes, because they'll certainly need to be fragmented and reassembled. What happens if recv gets a packet larger than the buffer? SOCK_STREAM : The question doesn't really make sense as put, because stream sockets don't have a concept of packets - they're just a continuous stream of bytes. If there's more bytes available to read than your buffer has room for, then they'll be queued by the OS and available for your next call to recv . SOCK_DGRAM : The excess bytes are discarded. How can I know if I have received the entire message? SOCK_STREAM : You need to build some way of determining the end-of-message into your application-level protocol. Commonly this is either a length prefix (starting each message with the length of the message) or an end-of-message delimiter (which might just be a newline in a text-based protocol, for example). A third, lesser-used, option is to mandate a fixed size for each message. Combinations of these options are also possible - for example, a fixed-size header that includes a length value. SOCK_DGRAM : An single recv call always returns a single datagram. Is there a way I can make a buffer not have a fixed amount of space, so that I can keep adding to it without fear of running out of space? No. However, you can try to resize the buffer using realloc() (if it was originally allocated with malloc() or calloc() , that is).
