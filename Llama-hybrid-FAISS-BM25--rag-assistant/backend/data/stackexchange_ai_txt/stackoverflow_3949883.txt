[site]: stackoverflow
[post_id]: 3949883
[parent_id]: 3949861
[tags]: 
JavaEE used to have a mechanism for this - a marker interface called SingleThreadModel that your servlet could implement: Ensures that servlets handle only one request at a time. This interface has no methods. If a servlet implements this interface, you are guaranteed that no two threads will execute concurrently in the servlet's service method. The servlet container can make this guarantee by synchronizing access to a single instance of the servlet, or by maintaining a pool of servlet instances and dispatching each new request to a free servlet. Note that SingleThreadModel does not solve all thread safety issues. For example, session attributes and static variables can still be accessed by multiple requests on multiple threads at the same time, even when SingleThreadModel servlets are used. It is recommended that a developer take other means to resolve those issues instead of implementing this interface, such as avoiding the usage of an instance variable or synchronizing the block of the code accessing those resources. This interface is deprecated in Servlet API version 2.4. Containers could use this to instantiate a new servlet for each request, or maintain a pool of them, if they chose to. This was deprecated in Servlet 2.4, for the reasons documented above. Those same reasons still apply to your question.
