[site]: stackoverflow
[post_id]: 1114562
[parent_id]: 1114203
[tags]: 
Brian has a good start, but functional code will focus more on "what" you're trying to do than "how". We can start out in a similar same way: open System open System.Text.RegularExpressions let text = @"Order, Supreme Court, New York County (Paul G Someone), entered..." let lines = text.Split([|Environment.NewLine|], StringSplitOptions.None) First, let's look at paragraphs. I like Brian's approach to count blank lines separating paragraphs. So we filter to find only blank lines, count them, then return our paragraph count based on that value: let numParagraphs = let blankLines = lines |> Seq.filter (fun line -> Regex.IsMatch(line, @"^\s*$")) |> Seq.length blankLines + 1 For sentences, we can view the full text as a sequence of characters and count the number of sentence-ending characters. Because it's F#, let's use pattern matching: let numSentences = let isSentenceEndChar c = match c with | '.' | '!' | '?' -> true | _ -> false text |> Seq.filter isSentenceEndChar |> Seq.length Matching words can be as easy as a simple regular expression, but could vary with how you want to handle punctuation: let words = Regex.Split(text, "\s+") let numWords = words.Length numParagraphs |> printfn "%d paragraphs" numSentences |> printfn "%d sentences" numWords |> printfn "%d words" Finally, we define a function to print token occurences, which is easily applied to a list of tokens: let findToken token = let tokenMatch (word : string) = word.Equals(token, StringComparison.OrdinalIgnoreCase) words |> Seq.iteri (fun n word -> if tokenMatch word then printfn "Found %s at word %d" word n ) let tokensToFind = ["insofar"; "thus"; "the"] tokensToFind |> Seq.iter findToken Note that this code does not find "thus" because of its trailing comma. You will likely want to adjust either how words is generated or tokenMatch is defined.
