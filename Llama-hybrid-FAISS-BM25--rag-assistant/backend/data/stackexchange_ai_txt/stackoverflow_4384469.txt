[site]: stackoverflow
[post_id]: 4384469
[parent_id]: 4384405
[tags]: 
This maybe jumping in a bit too much at the deep end, but: You might be after a pointer to function plus several implementations of functions with different names that do the task. MoveAgent.h extern MoveDirection (*takeDirection)(GameState *gs); MoveAgent.c MoveDirection takeDirectionRandom(GameState *gs) { ... } MoveDirection takeDirectionSpiral(GameState *gs) { ... } Mover.c #include "MoveAgent.h" // Default move is random MoveDirection (*takeDirection)(GameState *gs) = takeDirectionRandom; void setRandomMover(void) { takeDirection = takeDirectionRandom; } void setSpiralMover(void) { takeDirection = takeDirectionSpiral; } void mover(GameState *gs) { ...; MoveDirection dir = takeDirection(gs); ...; } So, somewhere along the line, you call one of the setXxxxxMover() functions, and thereafter you move using the mechanism set by the last of the two functions called. You can also invoke the function using the long-hand notation: MoveDirection dir = (*takeDirection)(gs); Once upon a very long time ago (1980s and earlier), this notation was necessary. I still like it because it makes it clear (to me) that it is a pointer-to-function that is being used.
