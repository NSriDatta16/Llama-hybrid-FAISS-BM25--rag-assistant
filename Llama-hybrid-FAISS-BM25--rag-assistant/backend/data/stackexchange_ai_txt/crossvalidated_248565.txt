[site]: crossvalidated
[post_id]: 248565
[parent_id]: 
[tags]: 
Lower accuracy with a larger testing set

I'm new in this forum and I want to ask a question: I'm working with SVM and I want to choose the best parameters for my model so I do as follows: iris = datasets.load_iris() X = iris.data[:,:2] y = iris.target X_trainval,X_test,y_trainval,y_test=train_test_split(X,y,test_size=0.3,random_state=0) X_train, X_valid, y_train, y_valid=train_test_split(X_trainval,y_trainval, test_size=0.2, random_state=1) Cs=[0.001,0.01,0.1,1,10,100,1000] gammas=[0.001,0.01,0.1,1,10,100,1000] best_score=0 C_best=0 gamma_best=0 for gamma in gammas: for C in Cs: svm=SVC(gamma=gamma,C=C) svm.fit(X_train,y_train) score=svm.score(X_valid,y_valid) if score>best_score: best_score=score C_best=C gamma_best=gamma and I evaluate the best parameters on test set as follows: svm=SVC(gamma=gamma_best,C=C_best) svm.fit(X_train,y_train) print("Score on test set for best C=%0.3f and best gamma=%0.3f is %0.3f"%(C_best,gamma_best,svm.score(X_test,y_test))) and I get an 82% accuracy. If I perform a 5-Fold Cross Validation as follows: X_folds = np.array_split(X, 5) y_folds = np.array_split(y, 5) scores = list() for gamma in gammas: for C in Cs: for k in range(5): svm=SVC(gamma=gamma,C=C) X_train = list(X_folds) X_test = X_train.pop(k) X_train = np.concatenate(X_train) y_train = list(y_folds) y_test = y_train.pop(k) y_train = np.concatenate(y_train) scores.append(svm.fit(X_train, y_train).score(X_test, y_test)) score=np.mean(scores) if score>best_score: best_score=score C_best=C gamma_best=gamma svm=SVC(C=C_best,gamma=gamma_best) svm.fit(X_trainval,y_trainval) print("The score on test set is %0.3f"%(svm.score(X_test,y_test))) I get an 80% accuracy, i.e. a lower accuracy. Why? Thank you in advance
