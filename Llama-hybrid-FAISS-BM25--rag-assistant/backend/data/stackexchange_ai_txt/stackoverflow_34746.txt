[site]: stackoverflow
[post_id]: 34746
[parent_id]: 33476
[tags]: 
It is the only framework that I've ever used where component creation is a deep intricate process like this. None of the other web frameworks (whether in the .net world or not) make this so painful, which is completely inexplicable to me. Some of the design decisions behind JSF start to make a little more sense when you consider the goals. JSF was designed to be tooled - it exposes lots of metadata for IDEs. JSF is not a web framework - it is a MVP framework that can be used as a web framework. JSF is highly extensible and configurable - you can replace 90% of the implementation on a per-application basis. Most of this stuff just makes your job more complicated if all you want to do is slip in an extra HTML control. The component is a composition of several inputtext (and other) base components, btw. I'm assuming JSP-includes/tooling-based page fragments don't meet your requirements. I would consider using your UIComponentELTag.createComponent to create a composite control with a UIPanel base and creating all its children from existing implementations. (I'm assuming you're using JSPs/taglibs and making a few other guesses.) You'd probably want a custom renderer if none of the existing UIPanel renderers did the job, but renderers are easy.
