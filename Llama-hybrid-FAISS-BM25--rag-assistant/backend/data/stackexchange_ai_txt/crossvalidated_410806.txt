[site]: crossvalidated
[post_id]: 410806
[parent_id]: 
[tags]: 
Estimating When A Time Series with Random Spikes Crosses a Threshold for the First Time

tl;dr Is there a way to estimate when a random spike in a time series would cross a threshold for the first time? The following is data of my performance in the game Super Hexagon, whose goal is to move a small piece without touching any moving walls for 60 seconds. If you touch a wall, you start over at 0 seconds. It is difficult to see in the above line-plot, but the data generally shows that my performance floor does not really change, but my ceiling gradually gets higher, however these high-performance attempts are a small minority. Here is a histogram of my attempts. Let's say during my play, at about attempt 800, I wanted to know how much longer I need to play in order to beat the game. How could I estimate when one of my performance spikes would go over a certain threshold, in this case 60 seconds? I imagine this is some kind of ARCH model, but I'm having trouble figuring out which one. I've also been told by a professor that a wavelet might be helpful for this problem, but I haven't had someone explain to me specifically how to use wavelets for a problem like this. My intuition would say to filter out the spikes as noise and then model the resulting series. Then at each period, make a random draw from the distribution of the noise that I filtered away to simulate that noise. Then, use Monte Carlo simulation to see where the density of passing that threshold is high and report a range subjectively from that Monte Carlo simulation. I am using Python for this, so if anyone has any suggestions on the practical side of doing this in Python it would be greatly appreciated. Update 1 I have posted my data here so that anyone can take a crack at this problem.
