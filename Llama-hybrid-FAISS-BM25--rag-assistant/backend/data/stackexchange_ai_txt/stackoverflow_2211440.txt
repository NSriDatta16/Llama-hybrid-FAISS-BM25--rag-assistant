[site]: stackoverflow
[post_id]: 2211440
[parent_id]: 2054268
[tags]: 
Personally I would try to avoid checking in the dependencies of a project into the SCM version control repository. Typically that would be by using Maven as suggested in another answer and deploying a company-internal Maven repository which has the advantage of making this resource local to the development team and to provide a location where your own project's completed/versioned/released artifacts can reside. The problem I see with Jars being the SCM is that first and foremost, the SCM is for managing the source code and they are optimised for that purpose. Compiled artifacts aren't source code and being binaries, when you typically branch or update the binary you are making a copy of the binary, as most SCMs can't 'diff' a binary file. Another consideration is what do you do if you have two projects that need dependencies checked in? Do you check in the deps separately into each project and wear the duplication? Or do you make a third project that contains just the dependencies? And now you're manually managing the jar files in that project. What if your two projects require mutually incompatible dependencies? Third, how do you manage inter-project dependencies (where one of your projects depends on the other one)? Is the jar file from one checked into the other? What about versioning and other change control? Do you just have to have the two projects checked out and require them to be built in strict order? In my experience and opinion, these problems are usually sufficient enough in a development of only moderate complexity to answer the question definitively: No, it is not acceptable to check in jar file dependencies. Use a build system such as Maven or Ant+Ivy (or another alternative) that provides a way to externalise the management and storage of the dependencies from the source code control system.
