[site]: stackoverflow
[post_id]: 89266
[parent_id]: 
[tags]: 
How to implement closures without gc?

I'm designing a language. First, I want to decide what code to generate. The language will have lexical closures and prototype based inheritance similar to javascript. But I'm not a fan of gc and try to avoid as much as possible. So the question: Is there an elegant way to implement closures without resorting to allocate the stack frame on the heap and leave it to garbage collector? My first thoughts: Use reference counting and garbage collect the cycles (I don't really like this) Use spaghetti stack (looks very inefficient) Limit forming of closures to some contexts such a way that, I can get away with a return address stack and a locals' stack. I won't use a high level language or follow any call conventions, so I can smash the stack as much as I like. (Edit: I know reference counting is a form of garbage collection but I am using gc in its more common meaning)
