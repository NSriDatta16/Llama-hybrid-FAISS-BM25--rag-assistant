[site]: stackoverflow
[post_id]: 726476
[parent_id]: 
[tags]: 
How to implement a code coverage tool using Win32 Debugging API

I am trying to understand how to implement a Code Coverage tool using the Win32 Debugging API. My thinking has been to utilize the Win32 Debugging API to launch a process in debug mode - and track what CPU instructions has been executed. After having tracked all CPU instructions I would then use the map file to map it to what source code lines were executed. As far as I understand, there would be two ways of knowing what CPU instructions have been executing. Would be to launch the process in debug mode - set all threads in single step mode and let the debugging app note all instructions that has been executed Would be make a more intelligent approach where you would know a lot more about x86 instructions and basically replace the next branch instruction with a breakpoint. Then keeping track of the delta instructions between the two breakpoints. Update - new suggested approaches inspired by Michael's response: Start with the map file and insert breakpoints for the beginning of each line and let the debug framework be notified every time a breakpoint hits. Start with the map file - binary instrumentation to insert a "hook" that get called at entry of each source line - avoiding the callback through the debugger framework. Using a VM Technology - such as VMware to find out what instructions in a particular process was executed - I don't fully understand this approach... Could someone validate one of the approaches above or maybe suggest an alternative - please note that the use case is line-by-line code coverage and not performance profiling - thus we need to know if each single source line is visited. My primary goal (although no particular plan is in place...) would be to create a simple code coverage tool for Delphi primarily. Thanks!
