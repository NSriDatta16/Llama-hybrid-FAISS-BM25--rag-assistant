[site]: stackoverflow
[post_id]: 3155128
[parent_id]: 
[tags]: 
Python packages installation in Windows

I recently began learning Python, and I am a bit confused about how packages are distributed and installed. I understand that the official way of installing packages is distutils : you download the source tarball, unpack it, and run: python setup.py install , then the module will automagically install itself I also know about setuptools which comes with easy_install helper script. It uses eggs for distribution, and from what I understand, is built on top of distutils and does the same thing as above, plus it takes care of any dependencies required, all fetched from PyPi Then there is also pip , which I'm still not sure how it differ from the others. Finally, as I am on a windows machine, a lot of packages also offers binary builds through a windows installer , especially the ones that requires compiling C/Fortran code, which otherwise would be a nightmare to manually compile on windows (assumes you have MSVC or MinGW/Cygwin dev environment with all necessary libraries setup.. nonetheless try to build numpy or scipy yourself and you will understand!) So can someone help me make sense of all this, and explain the differences, pros/cons of each method. I'd like to know how each keeps track of packages (Windows Registry, config files, ..). In particular, how would you manage all your third-party libraries (be able to list installed packages, disable/uninstall, etc..)
