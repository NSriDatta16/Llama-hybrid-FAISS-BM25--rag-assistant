[site]: stackoverflow
[post_id]: 3474310
[parent_id]: 3473898
[tags]: 
To summarize briefly- A one word answer might be 'heap' . But, what is referred to as stack or heap turns out to be context dependent. For instance, See the Intel Programming Guide, Section 6.2 for Stack. 'SS' is the stack segment, which provides a continuous address space. When you invoke a function, it''s return address, parameters passed, and local variables are allocated on this segment- referred to as 'Stack'. If you have a pointer variable (say char * p), then this variable is allocated on the stack, but the memory is allocated when malloc(), or 'new' are invoked on C,C++ is allocated on the Data Segment (DS) .Also, see the stanford tutorials .So, instead of just incrementing the Top of the Stack in SS to go to the next memory address,now the processor has to do address translation- check if the address is within the process address range,split the the Virtual Address to Segment+Offset,to get the value at a particular address. Hence, over here the discussion of 'Stack' and 'Heap' is closely related to the processor architecture- when we deal with languages like C,C++ . For Java, everything is done on the heap- which is a common storage area for all Java processes- The JVM spec ( see sections 3.5 and 3.6)says that each JVM thread has it's own private stack-which stores stack frames-which consists of parameters passed, local variables etc. Most importantly, these Stack frames can be allocated from the Heap- and need not be sequentially addressed. In addition to this java also provides for Native method stacks-like C. But, I am guessing in an interview setting,it might be best to say 'Heap'- and only think about elaborating if asked to.
