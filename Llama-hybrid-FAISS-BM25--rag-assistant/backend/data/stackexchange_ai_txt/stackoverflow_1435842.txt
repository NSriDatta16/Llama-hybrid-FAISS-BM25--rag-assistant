[site]: stackoverflow
[post_id]: 1435842
[parent_id]: 1094580
[tags]: 
Lifecycle If you follow Test Driven Development to the letter, you have a 5 step cycle: Write a test : for each unit (the smallest piece of code you can test) you write a test, where you determine what that unit will be responsible for. You need to follow the so called Right-BICEP checklist ( right results, b oundary conditions, i nverse relationships, c ross-check results, e rror conditions, p erformance characteristics). Run tests and see them fail : in this step the newly written tests should fail. This is the so called red step, as the unit tests should show up in red. If the tests do not fail, you probably didn't write them correct. Implement unit : write the code, even if you hardcode it, the point of this step is to get to the next green step. Run the tests and see them pass : the green step as all the test should pass. If they don't you're not done with writing code. Done? No, refactor! (source: wikimedia.org ) What to test Test all units until you reach complete code coverage (wishful thinking in most cases, you would have to have a unit test for severe fail scenarios like tripping over the power cable, no more disk space, flood etc). If you reach the 90% ballpark you're more than done. If you find a bug in your code, create a unit test and fix the code. Repeat. If your code has a GUI try any automated functional testing you can find. In my case Selenium or JMeter would do the trick. Selenium is a good tool as it allows you to record your tests with Firefox and them replay them on demand. Continuous integration Because running all the tests all the time is time consuming, you can delegate most of this mundane tasks to a continuous integration server that will do them for you at predefined time intervals. This does not mean that you do not have to run tests before you commit your code. You still need to run the tests for the part of the system you were fixing, if the system is large running all unit tests would be counterproductive. The CI server would inform you of any failures and you would need to buy drinks for all of your colleagues on top of fixing the code you broke ;)
