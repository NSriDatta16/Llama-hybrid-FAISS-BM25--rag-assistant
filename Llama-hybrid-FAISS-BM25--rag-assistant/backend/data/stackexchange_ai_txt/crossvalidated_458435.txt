[site]: crossvalidated
[post_id]: 458435
[parent_id]: 
[tags]: 
How does the RMSE work?

I am basing my understanding of the Root Mean Squared Error on this answer . From what I understand it averages the error between the target and the prediction. The root and square parts are for keeping the result positive. The overall goal is to minimize the error by making it as closest to $0$ as possible. But with a few experiments in python it seems that it is possible to skew the results by 'scaling down' the data. Here is my experiment: import numpy as np target_1 = np.array([0.1, 0.2, 0.3, 0.4]) target_2 = np.array([1, 2, 3, 4]) target_3 = np.array([10, 20, 30, 40]) prediction_1 = np.array([0.15, 0.19, 0.32, 0.4]) prediction_2 = np.array([1.5, 1.9, 3.2, 4]) prediction_3 = np.array([15, 19, 32, 40]) def rmse(target, prediction): return np.sqrt(((target - prediction) ** 2).mean()) print(rmse(target_1, prediction_1)) print(rmse(target_2, prediction_2)) print(rmse(target_3, prediction_3)) This outputs: 0.027386127875258303 0.2738612787525831 2.7386127875258306 The only real difference is their order of magnitude. How can this be a valid performance measure when the same data can achieve different results just by being in a different order of magnitude?
