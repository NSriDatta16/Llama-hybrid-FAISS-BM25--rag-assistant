[site]: stackoverflow
[post_id]: 5561828
[parent_id]: 5561604
[tags]: 
If you need this instance by application throw it in the Application or use a Singleton collection: Application["Foo"] = new MyClass(); See other answer. If you need this for a single request (which seems unlikely here): HttpContext.Current.Items["Foo"] = new MyClass(); If you need this across requests the the following are all options depending on your scenario: Serialize into Cookie (will be transfered on every request so if the pipeline is an issue don't use this). Good for per user data. Store in Session: Session["Foo"] = new MyClass(); // I personally don't like this option because it tends to grow your memory pressure as your user base grows, but if this is small then this is a good option as it does not increase bandwidth consumption and performance. Good for per user storage. And persistence to DB or memory (and others) can be configured. Store in Cache. Benefits are good control over lifetime and some flexibility on whether per user depending on what keys you use. Store in ViewState. Good across a single request, scalable, but increases payload. Store in hidden var (about the same as ViewState) I am not really sure I would recommend the Singleton pattern. Technically singletons will stick around as long as your AppDomain effectively being similar to the Application variable.
