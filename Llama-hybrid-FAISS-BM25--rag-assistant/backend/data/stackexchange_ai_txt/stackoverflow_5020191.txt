[site]: stackoverflow
[post_id]: 5020191
[parent_id]: 5020022
[tags]: 
Do you actually know what you are doing here? SELECT t1.column, t2.column, SUM(t1.column * t2.column) FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t2.id = t3.id GROUP BY t1.column, t2.column; The query is very suspicious in at least 2 ways: Table3 is not used - except to verify that a record exists in t3 for the id in t2. Did you want that? Potential pitfall If there are multiple T3 records per t2 record, you will get a cartesian product , an unintended multiplication of the SUM column. GROUP BY t1.column, t2.column - this combines all the unique combinations of (t1.column, t2.column) , and sums the result of t1.column * t2.column across them. Is this really what you are after? For point 2, consider this (source) data: t1.id, t1.column, t2.column, t1.column*t2.column 1 2 3 6 2 2 3 6 3 3 3 9 4 3 4 12 You end up with the output t1.column, t2.column, SUM(t1.column*t2.column) 2 3 12 3 3 9 3 4 12 See that (2,3) has combined the sum. If I add columns to the select I also must add columns to the group by. Columns in the SELECT (with the exception of some DBMS like MySQL) have to be either an aggregate (e.g. sum/avg/min/max) or a column in the GROUP BY clause. There are other expressions you can use like scalar functions or constant values not directly from the tables. If you actually need more columns from the table related to the aggregates, you need to think clearly about why . e.g. If you are grouping by column1 and averaging column2, what are you tring to do with column3 - which row should it come from?
