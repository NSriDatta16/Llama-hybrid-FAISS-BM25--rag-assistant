[site]: stackoverflow
[post_id]: 3749038
[parent_id]: 3748445
[tags]: 
That's something similar to what we've been doing in Lokad.Cloud . As I recall you can select up to 100 rows in this manner without problems. You can check the source code for the details and reuse either the entire open source project or just the parts you like. Here's how the syntax generation looks like: public IEnumerable > Get (string tableName, string partitionKey, IEnumerable rowKeys) { Enforce.That(() => tableName); Enforce.That(() => partitionKey); Enforce.That(!partitionKey.Contains("'"), "Incorrect char in partitionKey."); var context = _tableStorage.GetDataServiceContext(); foreach (var slice in rowKeys.Slice(MaxEntityTransactionCount)) { // work-around the limitation of ADO.NET that does not provide a native way // of query a set of specified entities directly. var builder = new StringBuilder(); builder.Append(string.Format("(PartitionKey eq '{0}') and (", HttpUtility.UrlEncode(partitionKey))); for (int i = 0; i (context, tableName, builder.ToString())) { yield return entity; } } } However, please keep in mind, that this operation will not be optimized by the table storage, resulting in suboptimal performance (table storage is not using indexes for this operation). This is a bug that was reported to Microsoft and is expected to be fixed some time soon.
