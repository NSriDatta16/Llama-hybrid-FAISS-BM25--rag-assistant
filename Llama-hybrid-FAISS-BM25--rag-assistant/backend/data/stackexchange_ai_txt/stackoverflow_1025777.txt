[site]: stackoverflow
[post_id]: 1025777
[parent_id]: 
[tags]: 
How to solve Gzip Magic Number Missing

I have a string that I Gzip on the server and download to a client using the WebClient class. When I try to uncompress it, I get the error message that the Magic Number is missing. I have tried both the GZipStream class and the ICSharpLib methods of solving this, so I'm at a loss. The compression/decompression works if I omit the step of downloading via the WebClient (using DownloadData which returns the data as byte[]), so I can only assume that there is some problem with the data getting truncated or corrupted some how, but since it's compressed data, I'm not sure how to debug this. Here's the code snippet that seems to be the offending portion: byte[] response try { response = client.DownloadData(Constants.GetSetting("SyncServer")); } catch { MessageBox.Show("There was a problem synchronizing the data. Please try verify the supplied credentials or try again later.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); return; } int rows = SQLiteAPI.ImportStatHistoryXML(CurrentUser.User, myCampus, Convert.ToBase64String(response)); public static int ImportStatHistoryXML(Person tempPerson, Campus tempCampus, string xmlFile) { byte[] encryptedFile = Convert.FromBase64String(xmlFile); MemoryStream memStream = new MemoryStream(encryptedFile); memStream.ReadByte(); GZipInputStream stream = new GZipInputStream(memStream); MemoryStream memory = new MemoryStream(); byte[] writeData = new byte[4096]; int size; while (true) { size = stream.Read(writeData, 0, writeData.Length); if (size > 0) { memory.Write(writeData, 0, size); } else { break; } } stream.Close(); memory.Position = 0; StreamReader sr = new StreamReader(memory); string decompressed = sr.ReadToEnd(); DataSet tempSet = new DataSet(); StringReader xmlReader = new StringReader(decompressed); tempSet.ReadXml(xmlReader); DataTable statTable = tempSet.Tables["Stats"]; ...more unrelated processing of the table } Any help would be appreciated. P.S. I'm using the Base64 string to be able to pass back and forth across the web. This may in fact be the area I am messing up in since I've not done web requests and responses between a desktop app and a web service before.
