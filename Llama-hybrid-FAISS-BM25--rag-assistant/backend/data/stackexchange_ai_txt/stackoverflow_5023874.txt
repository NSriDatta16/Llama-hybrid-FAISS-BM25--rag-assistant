[site]: stackoverflow
[post_id]: 5023874
[parent_id]: 
[tags]: 
Message stream using JQuery PeriodicUpdater and Rails

I'm trying to create an AJAX message stream in my Rails 3 app using jQuery. The app shows posts and replies to the post. Right now it requires the user to refresh the browser to update: //in app/views/posts/_replies.html.erb I'm trying to use the jQuery port of PeriodicalUpdater (https://github.com/RobertFischer/JQuery-PeriodicalUpdater/) to ajaxify the replies as a constantly-updating stream. Based on Ryan Bates' Railscast (http://railscasts.com/episodes/136-jquery), here is what I've got: // in public/javascripts/application.js $(document).ready(function(){ $.PeriodicalUpdater('/replies', { method: 'post', data: ???, minTimeout: 1000, maxTimeout: 8000, multiplier: 2, type: 'json', maxCalls: 0, autoStop: 0 }, function(data) { ???? }); }); I'm new to js and jQuery, so it's not really clear to me how to pass the current post to the server nor how to have it automatically render the replies partial. Here is the rest of my code: // in app/views/posts/show.js.erb $("#replies").append(" "); // app/controllers/posts_controller.rb class PostsController Is there some way to pass the ID of the current post to the controller? Maybe even pass the ID of the last reply so the server will only send back new replies? Also, do I have to manually append everything inside of the callback function of PeriodicalUpdater? Or is there a way to render the show partial for the updates? Update : I did like @Spencer suggested below, changing it to first have a button that you push to do an AJAX update. I'm having trouble passing that parameter. My actual code looks up things based on a unique URL key, so I just have: ');" /> Then in my application.js file: function getReplies(url_key) { $.ajax({ type: "POST", contentType: "application/json; charset=utf-8", dataType: "json", url: "/replies", data: { url_key: url_key }, success: function(msg) { $.each(msg.Replies, function(index, reply) { $("#replies").prepend(' ' + reply.body + ' ') }); } }); } In my controller, I have: def replies @post = Post.find_by_url_key(params[:url_key]) respond_to do |format| format.json { render :json => @post.replies } end end I get: Processing by PostsController#replies as JSON Parameters: {"_json"=>"url_key=some-post"} ←[1m←[35mPost Load (1.0ms)←[0m SELECT `posts`.* FROM `posts` WHERE (`posts`.`url_key` IS NULL) LIMIT 1 So it looks like the parameter isn't being retrieved from params .
