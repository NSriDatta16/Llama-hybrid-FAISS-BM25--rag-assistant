[site]: stackoverflow
[post_id]: 1077328
[parent_id]: 1077302
[tags]: 
It is fairly simple to implement your own with a Dictionary. The implementation below works for 2 dimensions but you can easily implement 3 or 4 dimensions. The storage is very efficient when the matrix is sparse. It is not a good implementation if you plan to add or remove columns frequently. class SparseMatrix { public T this[int i, int j] { get { T result; if (!_data.TryGetValue(new Key(i, j), out result)) return default(T); return result; } set { _data[new Key(i, j)] = value; } // Could remove values if value == default(T) } private struct Key { public Key(int i, int j) { _i = i; _j = j; } private readonly int _i; private readonly int _j; public override bool Equals(object obj) { if (!(obj is Key)) return false; var k = (Key) obj; return k._i == _i && k._j == _j; } public override int GetHashCode() { return _i _data = new Dictionary (); }
