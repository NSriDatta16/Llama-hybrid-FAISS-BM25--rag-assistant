[site]: stackoverflow
[post_id]: 2571347
[parent_id]: 2571225
[tags]: 
It's unclear if you're aiming at a fully functional programming lang, or if this is a toy, so I don't know how much time you want to put into this. I suspect that dynamic library loading will be significantly more complicated than you need. You would likely need a PATH list of libraries locations, or you would need to register namespaces - which puts you back in the same place you are now. A simpler approach is to keep a global symbol table, with associated handlers. Use std::map (or hash_map) for a much faster function lookup than your if/else construct. Have all functions register themselves with the symbol table. The "handlers" stored in the symbol table can be simple objects (or function pointers) and can do their own argument checking. class FuncHandler { virtual MyLangResult Run(argv, argc) = 0; } typedef std::map FuncTableType; // Simplified version myLangResult SystemFunction(name, argc, argv ) { FuncTableType::const_iterator it = function_table_.find(name); if (it == function_table_.end()) return Error("Unknown function: " + name); return it->second(argc, argv); } I wrote some code to perform self-registration for classes in this question, but it's not necessarily needed here: Accessing C++ Functions From Text storage
