[site]: stackoverflow
[post_id]: 3395017
[parent_id]: 3387914
[tags]: 
This seems like it should be fairly straight-forward... Actually, Extract Class is one of the more difficult refactorings. Even in your simple example of moving a single method and its dependencies, there are possible complications: If the moved method might be used in code you don't know about, you need to have a proxy method in the original class that will delegate to (call) the moved method. (If your application is self-contained or if you know all the clients of the moved method, then the refactoring code could update the calling code.) If the moved method is part of an interface or if the moved method is inherited, then you will also need to have a "proxy method". Your method may call a private method/field that some other method calls. You need to choose a class for the called member (maybe in the class that uses it the most). You will need to change access from "private" to something more general. Depending on how much the original class and the extracted class need to know about each other, one or both may need to have fields initialized that point to the other. Etc. This is why I encourage everybody to vote for bug 312347 to get fixed.
