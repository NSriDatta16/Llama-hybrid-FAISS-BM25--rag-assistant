[site]: stackoverflow
[post_id]: 1220353
[parent_id]: 1219893
[tags]: 
Short, understandable answer: Abstract code expresses an idea but not how to make it work Generic code works with more than one kind of object, and knows what kind you gave it Longer, but not wall-of-text: Abstract specifies an interface, without the full implementation Abstract classes have to be extended to be used, you can't create instances with a constructor Abstract classes don't have to provide code for all methods -- they can give just the method name, return value(s), and checked exceptions thrown This means you can use abstract methods when you want to allow something to work different ways. Example: you can write an abstract Store class, with abstract storeValue and getValue methods. Then you extend it with different implementations for database storage, disk storage, networked storage, and memory storage. All use the same methods, except for the storeValue and getValue methods. You can use them interchangeably. Generic code includes Type info, and may work with multiple types: Generics don't really let you do anything you couldn't with vanilla Object inputs/outputs, and a lot of "instanceof" checks and object casting They are easier to read, though! Generic code specifies what kind of objects it works with, and lets you operate on groups of the same thing Generic code lets you specify an algorithm without knowing what it's operating on -- when the algorithm is called, it can output the same type as the input, whatever the input might be You don't have to cast to/from vanilla Objects (and check object type) if you use Generics to operate on different object types The most common place for generics is operating on collections -- you can store a collection of something, without knowing what exactly it is Generics can be fiendishly complicated Example: you define an "add" method which adds String (or similar) objects end to end, or sums Number objects, or adds an element of one type to a Collection containing that type
