[site]: stackoverflow
[post_id]: 3126390
[parent_id]: 3126383
[tags]: 
In this solution, I'm using a new feature introduced in SQL Server 2005 which is the OUTER APPLY operator. This allows you to reference columns in the outer tables. I'm using OUTER APPLY instead of CROSS APPLY to account for the possibility that there are no discount rows. Select DailyProduction.CustomerId as CustomerId , SUM(Resource.CostPerUnit * DailyProduction.UnitsToStorage + Resource.CostPerUnit * DailyProduction.UnitsToMarket) AS TotalCost , Coalesce(Discount.Total, 0) As TotalDiscount From dbo.hgm_ResourceTypes As Resource Join dbo.hgm_ResourceDailyProduction As DailyProduction On Resource.ResourceId = DailyProduction.ResourceId Outer Apply ( Select Sum(D1.Discount) As Total From dbo.hgm_Discounts As D1 Where D1.CustomerId = DailyProduction.CustomerId And D1.ResourceId = Resource.ResourceId ) As Discount Group By DailyProduction.CustomerId An alternate approach would be to use a derived table: Select DailyProduction.CustomerId as CustomerId , SUM(Resource.CostPerUnit * DailyProduction.UnitsToStorage + Resource.CostPerUnit * DailyProduction.UnitsToMarket) AS TotalCost , Coalesce(Discount.Total, 0) As TotalDiscount From dbo.hgm_ResourceTypes As Resource Join dbo.hgm_ResourceDailyProduction As DailyProduction On Resource.ResourceId = DailyProduction.ResourceId Left Join ( Select D1.CustomerId, D1.ResourceId, Sum(D1.Discount) As Total From dbo.hgm_Discounts As D1 Group By D1.CustomerId, D1.ResourceId ) As Discount On Discount.CustomerId = DailyProduction.CustomerId And Discount.ResourceId = Resource.ResourceId Group By DailyProduction.CustomerId
