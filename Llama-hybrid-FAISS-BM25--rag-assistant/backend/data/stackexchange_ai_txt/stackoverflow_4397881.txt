[site]: stackoverflow
[post_id]: 4397881
[parent_id]: 4397824
[tags]: 
For dynamically loaded dlls: the easiest way to control which one is loaded is to not invoke the search logic. The search logic is only invoked if a partial path is supplied - provide a fully qualified path to the dll when calling LoadLibrary and the call will fail if the Dll doesn't exist in that location. For statically loaded dlls: Dlls that are part of an assembly are searched for ONLY in WinSxS and the application's folder. So, create a "dummy" assembly to hold the dll. Which is as simple as creating a .manifest file with contents like this: Add this code to any project that needs to use the exact dll only: #pragma comment(linker, "/manifestdependency:\"dummyassembly'"\ " processorArchitecture='*' version='1.0.0.0' type='win32'\"") and it will fail to load if the dll doesn't exist in the same folder.
