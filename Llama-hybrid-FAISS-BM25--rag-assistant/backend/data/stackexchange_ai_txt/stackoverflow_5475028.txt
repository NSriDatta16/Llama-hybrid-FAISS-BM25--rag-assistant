[site]: stackoverflow
[post_id]: 5475028
[parent_id]: 5473482
[tags]: 
The way to think of this is that MPI_Barrier (and other collectives) are blocking function calls, which block until all processes in the communicator have completed the function. That, I think, makes it a little easier to figure out what should happen; the function blocks, but other threads continue on their way unimpeded. So consider the following chunk of code (The shared done flag being flushed to communicate between threads is not how you should be doing thread communication, so please don't use this as a template for anything. Furthermore, using a reference to done will solve this bug/optimization , see the end of comment 2): #include #include #include #include int main(int argc, char**argv) { int ierr, size, rank; int provided; volatile int done=0; MPI_Comm comm; ierr = MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided); if (provided == MPI_THREAD_SINGLE) { fprintf(stderr,"Could not initialize with thread support\n"); MPI_Abort(MPI_COMM_WORLD,1); } comm = MPI_COMM_WORLD; ierr = MPI_Comm_size(comm, &size); ierr = MPI_Comm_rank(comm, &rank); if (rank == 1) sleep(10); #pragma omp parallel num_threads(2) default(none) shared(rank,comm,done) { #pragma omp single { /* spawn off one thread to do the barrier,... */ #pragma omp task { MPI_Barrier(comm); printf("%d -- thread done Barrier\n", rank); done = 1; #pragma omp flush } /* and another to do some printing while we're waiting */ #pragma omp task { int *p = &done; while(!(*p) { printf("%d -- thread waiting\n", rank); sleep(1); } } } } MPI_Finalize(); return 0; } Rank 1 sleeps for 10 seconds, and all the ranks start a barrier in one thread. If you run this with mpirun -np 2 , you'd expect the first of rank 0s threads to hit the barrier, and the other to cycle around printing and waiting -- and sure enough, that's what happens: $ mpirun -np 2 ./threadbarrier 0 -- thread waiting 0 -- thread waiting 0 -- thread waiting 0 -- thread waiting 0 -- thread waiting 0 -- thread waiting 0 -- thread waiting 0 -- thread waiting 0 -- thread waiting 0 -- thread waiting 1 -- thread waiting 0 -- thread done Barrier 1 -- thread done Barrier
