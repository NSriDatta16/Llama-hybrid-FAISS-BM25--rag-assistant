[site]: stackoverflow
[post_id]: 4629818
[parent_id]: 3756905
[tags]: 
Your question is something I've been trying to figure out for a while too. This is what I have so far. I use this for validating a single date range. It takes input fields as params rather than dates: jQuery.validator.addMethod("rangeDate", function(value, element, params) { try { var beforedate=$.datepicker.parseDate($(params[0]).datepicker('option','dateFormat'),$(params[0]).val()); var afterdate=$.datepicker.parseDate($(params[1]).datepicker('option','dateFormat'),$(params[1]).val()); var qdate=$.datepicker.parseDate($(element).datepicker('option','dateFormat'),value); return this.optional(element) || (qdate >= beforedate && qdate and the rule looks like this: rules:{ between_date: { dateCan: true, rangeDate: { depends: function(element) { //check that params exist return $("input[name='before_date']").valid() && $("input[name='after_date']").valid(); }, param: ["input[name='before_date']", "input[name='after_date']"] } } } After experimenting a bit, I've seen that it's possible to have more than one rangeDate rule for a field. However, the last call appears to overwrite the results of all the previous rangeDate calls for that field. So I think what might work is to add another custom rule that accepts an array of pairs of fields which can be fed to rangeDate . The problem with this approach is that the the depends clause for the rangeDate rule becomes unwieldy as you get more date pairs. This is especially so if you only require at least one pair to be present rather than all pairs. Of course, if the date ranges aren't dynamic, the problem is easier because no depends clause is necessary. Just rewrite rangeDate to accept dates rather than fields and write a wrapper rule to accept an array of pairs of dates. If you've found a solution to the problem, I'd love to see it. Hopefully it will be more elegant than mine.
