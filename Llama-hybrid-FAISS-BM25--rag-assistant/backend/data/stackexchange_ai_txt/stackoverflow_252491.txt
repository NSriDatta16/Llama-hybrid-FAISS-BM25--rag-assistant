[site]: stackoverflow
[post_id]: 252491
[parent_id]: 252459
[tags]: 
The single vs. multiple issue comes down to personal or organizational preference. Management of multiple vs. single mainly comes down to access control and maintenance. Access control for a single repository can be contained in a single file; Multiple repositories are may require multiple files. Maintenance has similar issues - one big backup, or a lot of little backups. I manage my own. There's one repository, multiple projects, each with its own tags, trunk and branches. If one gets too big or I need to physically isolate a customer's code for their comfort, I can quickly and easily create a new repository. I recently consulted with a relatively large firm on migrating multiple source code control systems to Subversion. They have ~50 projects, ranging from very small to enterprise applications and their corporate website. Their plan? Start with a single repository, migrate to multiple if necessary. The migration is almost complete and they're still on a single repository, no complaints or issues reported due to it being a single repository. This isn't a binary, black & white issue. Do what works for you - were I in your position, I'd combine projects into a single repository as fast as I could type the commands, because the cost would be a major consideration in my (very, very small) company. JFTR: revision numbers in Subversion really have no meaning outside the repository. If you need meaningful names for a revision, create a TAG Commit messages are easily filtered by path in the repository, so reading only those related to a particular project is a trivial exercise. Edit: See Blade 's response for details on using a single authorization/authentication configuration for SVN.
