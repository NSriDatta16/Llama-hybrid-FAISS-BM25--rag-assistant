[site]: stackoverflow
[post_id]: 1166121
[parent_id]: 1165963
[tags]: 
Properties of classic object-oriented polymorphism: objects are bound at run-time; this is more flexible, but also consumes more resources (CPU) at run-time strong typing brings somewhat more type safety, but the need to dynamic_cast (and its potential to blow up into a customer's face) might easily compensate for that probably more widely known and understood, but "classical" deep inheritance hierarchies seem horrendous to me Properties of compile-time polymorphism by template: compile-time binding allows more aggressive optimizations, but prevents run-time flexibility duck-typing might seem more awkward, but failures are usually compile-time failures can sometimes be harder to read and understand; without concepts, compiler diagnostics might sometimes become enraging Note that there is no need to decide for either one. You can freely mix and mingle both of them (and many other idioms and paradigms). Often, this leads to very impressive (and expressive) code. (See, for example, things like type erasure.) To get an idea what's possible through clever mixing of paradigms, you might want to browse through Alexandrescu's "Modern C++ Design".
