[site]: stackoverflow
[post_id]: 2631510
[parent_id]: 2630695
[tags]: 
if your application need to be able to run without the existence of OpenSSL, use dynamic linking with explicit run-time linking and handle the cases when the DLLs are not around (e.g. by changing your application's behavior / switching to other libraries). I recently found a nice examples on this: Google Gears WinCE Geolocation API itsutils if your application may only run if the OpenSSL exist in the environment (or you ship the DLL), use implicit run-time linking. For MSVC, the simplest is to add #pragma comment(lib,"libeay32.lib") in your source code (You will probably need the .lib stub to be produced by the same compiler you use) if your application need to be independent of the environment. Link OpenSSL statically (also uses .lib). Note that there are 2 kinds of .lib . The first is used for dynamic but implicit linking, second is for static linking. The one for dynamic implicit linking contains stubs that load the DLL for you whereas the one for static linking contain the actual implementation.
