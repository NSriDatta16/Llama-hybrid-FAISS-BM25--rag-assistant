[site]: stackoverflow
[post_id]: 5520132
[parent_id]: 5520028
[tags]: 
This is like asking: "Given an apple from an Apple orchard, which tree owns this apple?" The answer to which is: "No idea, since all apple trees produce apples, it could belong to any tree". ... in other words - you must supply an instance from which the method will be called EDIT From one of your comments, I gather you are looking for an alternative of the Observer pattern. You say you don't like the messiness of the Observer pattern and that it is not "generic" enough for you. I would argue that it is probably one of the least messiest patterns in existence, AND interfaces are by definition as generic as things get! So, perhaps its an implementation problem you're having. Luckily, I have already posted on SO an Observer implementation in JAVA, to demonstrate how powerful and elegant it is. Polymorphism and Interfaces in Java (can polymorphism be used to implement interfaces...why?) In fact: reflection is messier than using an interface, since you can't guarantee at compile time that the type of Object you are invoking an instance of a Method on, even supports that method! (without some error checking code). Versus with interfaces, its not possible to even have that problem.
