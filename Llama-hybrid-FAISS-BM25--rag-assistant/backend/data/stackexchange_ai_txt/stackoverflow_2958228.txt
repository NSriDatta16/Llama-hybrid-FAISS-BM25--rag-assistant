[site]: stackoverflow
[post_id]: 2958228
[parent_id]: 2958036
[tags]: 
A mean usually is a real value so double is ok. Here you define mean as returning double, but the prototype says int mean(...) . The only way gcc can be aware of the fact that there's a redefinition, is if the redefinition occurs for real... When you compile files separately likely the mean prototype is missing... it is not shown in your code fragment at least: you should include helper.h also into helper.c. Doing so, gcc -c helper.c must give you a warning. I have gcc 4.3.2, but I am almost sure it must be so also for the version you have. In the main, you just use mean , so here the gcc trusts what is said in helper.h . When you link, there is no more information about the size of arguments and returning value, and bad things happen (like reading an int as a double). Another detail: you say you get NaN for an int of the struct... well, in the struct there's a double, and int can't be NaN!
