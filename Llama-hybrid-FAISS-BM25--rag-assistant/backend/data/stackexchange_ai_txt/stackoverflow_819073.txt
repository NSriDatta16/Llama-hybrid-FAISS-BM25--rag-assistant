[site]: stackoverflow
[post_id]: 819073
[parent_id]: 818679
[tags]: 
My personal opinion is that your decision should be based strongly on the fact how you'd judge the XSLT knowledge in your intended audience. If it's clear that XSLT is somehow "terra incognita" among the people having to work with the system (that includes yourself), you can rule out the XSLT-solution. The need and the effort to learn XSLT will negate the advantages (very elegant - especially when transforming XML to XML, no need to mess with PHP code, no PHP knowledge needed) you'll get from the XSLT-solution. Perhaps a two-way solution could be the right thing to go with. You could build an adapter-system for importing and exporting that uses XSLT for the XML data formats and provides the ability to use PHP code for all the data formats that aren't XML based. This way every developer can choose the way he's more comfortable with. interface My_DataConverter_Interface { /** * @param string $file * @return My_DataObject */ function import($file); /** * @param My_DataObject $data * @param string $file */ function export(My_DataObject $data, $file); } abstract class My_DataConverter_Xslt implements My_DataConverter_Interface { /* ... */ } class My_DataConverter_XmlFormat1 extends My_DataConverter_Xslt { /* ... */ } class My_DataConverter_XmlFormat2 extends My_DataConverter_Xslt { /* ... */ } class My_DataConverter_Csv implements My_DataConverter_Interface { /* ... */ }
