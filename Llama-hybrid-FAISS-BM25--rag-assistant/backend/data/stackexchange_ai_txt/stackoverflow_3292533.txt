[site]: stackoverflow
[post_id]: 3292533
[parent_id]: 3288894
[tags]: 
I think you misunderstood how to use a custom user type and, as I commented in my previous answer , you are NOT supposed to declare the custom type at the association level here, you are supposed to use it at the attribute level i.e. on the username attribute of the User entity. This is actually explained in the documentation (pasted from Google Cache as the Jasypt site seems to be currently down): Integrating Jasypt with Hibernate 3 Jasypt provides an integration package ( org.jasypt.hibernate.type ) which provides several Hibernate UserType implementations to allow one or several of the properties in a mapped Hibernate entity to be declared as being of an encrypted type . Types allowed to be stored encrypted include strings, binaries (byte arrays), numeric types, booleans and dates. Persistence of those properties will be done in an encrypted manner, but in a completely transparent way for the application. This can be useful for encrypting personal data, private messages, etc, so that it is avoided that anyone with read access to the "critical" tables can read all of its contents. For encryption at Hibernate, jasypt uses its password-based encryption capabilities, and any encryptor object implementing PBEStringEncryptor, PBEByteEncryptor, PBEBigIntegerEncryptor or PBEBigDecimalEncryptor can be used to encrypt data, even encryptors created by the user. But encryption sets a limitation on your Hibernate usage : security standards establish that two different encryption operations on the same data should not return the same value (due to the use of a random salt). Because of this, none of the fields that are set to be encrypted when persisted can be a part of a WHERE clause in your search queries for the entity they belong to . So, to sum up, 1) the @Type annotation should be applied to the username and 2) you won't be able to use the username as primary key (since it can't be part of a join as mentioned in the last paragraph above). This means that you'll need something like this (assuming you declared the appropriate @TypeDef ): @Entity public class User { @Id @GeneratedValue private Long id; @Type(type="encryptedString") private String username; ... } And modify the ManyToOne association accordingly.
