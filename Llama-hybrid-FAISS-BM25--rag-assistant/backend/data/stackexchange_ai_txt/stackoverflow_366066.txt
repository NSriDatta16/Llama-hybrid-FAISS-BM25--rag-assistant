[site]: stackoverflow
[post_id]: 366066
[parent_id]: 365782
[tags]: 
There are two ways to represent a 2-dimension array in C++. One being more flexible than the other. Array of arrays First make an array of pointers, then initialize each pointer with another array. // First dimension int** array = new int*[3]; for( int i = 0; i THe problem with this method is that your second dimension is allocated as many arrays, so does not ease the work of the memory allocator. Your memory is likely to be fragmented resulting in poorer performance. It provides more flexibility though since each array in the second dimension could have a different size. Big array to hold all values The trick here is to create a massive array to hold every data you need. The hard part is that you still need the first array of pointers if you want to be able to access the data using the array[i][j] syntax. int* buffer = new int[3*4]; int** array = new int*[3]; for( int i = 0; i The int* array is not mandatory as you could access your data directly in buffer by computing the index in the buffer from the 2-dimension coordinates of the value. // You can then access your array data with for( int i = 0; i The RULE to keep in mind Computer memory is linear and will still be for a long time. Keep in mind that 2-dimension arrays are not natively supported on a computer so the only way is to "linearize" the array into a 1-dimension array.
