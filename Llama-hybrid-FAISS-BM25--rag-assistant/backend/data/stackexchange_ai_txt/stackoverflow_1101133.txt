[site]: stackoverflow
[post_id]: 1101133
[parent_id]: 1100737
[tags]: 
To add some specifics: Cell values become variables or entries in a database. E.g., Instead of the formula for B1 being = A1 + 2 (where A1 contains the number of widgets for a given policy), you have: var widgets = (from policy in db.Policies select new {policy.widgets}).First().widgets; var moreWidgets = widgets + 2; Functions and Macros get ported--E.g., Round(B1, 0) becomes Math.Round(moreWidgets, 0, MidpointRounding.AwayFromZero) Related data and functionality gets grouped into classes and object instances. Sheets become database tables for storage and tab pages/dialog boxes/web pages, etc. for UI. You might make forms for data that's entered/reviewed one at a time: First Name: [________________] Last Name: [________________] SSN: [________________] The benefits to doing all of this (assuming it's done well) is: Improved organization so that functionality can be found more easily for re-use/augmentation. Improved performance Shared, real-time access to the data including aggregating data that's currently spread across multiple files. A whole world of new functionality--maybe you want to add speech synthesis or what-have-you.
