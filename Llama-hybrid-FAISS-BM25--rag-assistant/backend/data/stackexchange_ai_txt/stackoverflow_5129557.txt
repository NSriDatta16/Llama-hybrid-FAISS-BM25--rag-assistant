[site]: stackoverflow
[post_id]: 5129557
[parent_id]: 5124839
[tags]: 
There's a lot gone wrong here, so much that it's difficult knowing where to start. Taking one fragment at a time: def long Really, unbelievably bad name for a method! def long(a: Int, b: Int): String = { var a = 5 var b = 100 You're taking a and b as parameters, then immediately shadowing the names to create vars. Those parameters are useless. for (i a && i This doesn't follow any recognised pattern for nesting of scope, it's also good practice to leave a space before the opening brace of a block. Worse still, the closing brace for the for block is aligned to look like the closing brace for the else clause. This is a guaranteed way to produce unmaintainable code. I'm an advocate of the so-called "one true bracket style", which you have your code formatted like this: for (i a && i Moving onward... for (i What is args(1) , where does it come from? It must be an Option or some sort of collection to be used in a for-comprehension, and its contents must be of the same type as a and b for the i > a && i comparison to be valid. So I'm assuming that args(1) returns an Option[Int] , a collection seems unlikely. val random_index = rand.nextInt(new_sun .length) val result = new_sun(random_index) Same question. What is new_sun and where does it come from. The name tells me nothing. The space in new_sun .length is also very odd looking. for (i a && i is better written: for (i a && i or even args(1) filter (a to b contains _) map { i => But sadly, you can't do that, as the value i is used as the return value in spite of the guard condition. Which also reminds me: var a = 5 var b = 100 ... if (i > a && i This is checking that 5 , or 6 in other words. The check doesn't match the error message. var guess = println("_ " * result.length) println returns Unit . There is absolutely no possible reason to assign this return value to a variable that is never used. return i.toString return statements are rarely needed in Scala, where the final expression evaluated will become the return value. You can't simply delete the keyword though, as it interacts with the other problems and would stop your code compiling. Generally, you want to write your code so that if/else blocks, for-comprehensions, and other such constructs don't perform side-effects (such as calling println ). Instead, you should try and make these blocks evaluate to a String and then pass this evaluated String to println at the end of your method. You also need to be much more aware of what variables you have, where they come from, and how informative their names are. and pay attention to your syntax/layout/formatting. Programmers have fought religious ways over less..
