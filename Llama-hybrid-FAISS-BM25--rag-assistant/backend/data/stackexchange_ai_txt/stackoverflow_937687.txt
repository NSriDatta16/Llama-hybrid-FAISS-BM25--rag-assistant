[site]: stackoverflow
[post_id]: 937687
[parent_id]: 937457
[tags]: 
modularity is the answer, as has been said. but it can be a hard answer to use in practice. i suggest focussing on: small libraries which do predefined things well minimal dependencies between modules writing interfaces first is a good way to achieve both of these (with interfaces used for the dependencies). writing tests next, against the interfaces, before the code is written, often highlights design choices which are un-modular. i don't know whether your app is UI-intensive; that can make it more difficult to be modular. it's still usually worth the effort, but if not then assume that it will be thrown away before long and follow the iceberg principle, that 90% of the work is not tied to the UI and so easier to keep modular. finally, i recommend "the pragmatic programmer" by andrew hunt and dave thomas as full of tips. my personal favourite is DRY -- "don't repeat yourself" -- any code which says the same thing twice smells.
