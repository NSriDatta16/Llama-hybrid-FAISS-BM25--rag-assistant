[site]: crossvalidated
[post_id]: 252809
[parent_id]: 251976
[tags]: 
I tried to implement this at one point in an existing rf framework and found it difficult go get good performance in terms of training time. The standard cart algorithm used in random forests and xgboost works by recursive partitioning of the data. In this case data (or an array of index into it) can be reordered in memory so each of the partitions is continuous and further splits can be calculated by scanning left to right across the current partition as ordered by the feature under consideration iteratively updating the impurity estimates. This can all be done with zero memory allocations making it quite fast. Jungles allow nodes to be recombined which doesn't work well with this reorder, scan and split algorithm. MS has probably figured out a clever way to implement it but my naive implementation ended up being much slower to train then a standard rf. The most recent papers are interesting and if more results like that are found perhaps it will catch on.
