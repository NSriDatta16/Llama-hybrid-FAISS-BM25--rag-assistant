[site]: stackoverflow
[post_id]: 4988212
[parent_id]: 4976298
[tags]: 
To get annotations for a specific function, traverse the entry BasicBlock of the function to find its calls to the @llvm.var.annotation intrinsic, as follows: Module *module; [...] std::string getGlobalVariableString(std::string name) { // assumption: the zeroth operand of a Value::GlobalVariableVal is the actual Value Value *v = module->getNamedValue(name)->getOperand(0); if(v->getValueID() == Value::ConstantArrayVal) { ConstantArray *ca = (ConstantArray *)v; return ca->getAsString(); } return ""; } void dumpFunctionArgAnnotations(std::string funcName) { std::map mapValueToArgument; Function *func = module->getFunction(funcName); if(!func) { std::cout getEntryBlock(); // run through entry block first to build map of pointers to arguments for(BasicBlock::iterator it = b->begin();it!=b->end();++it) { Instruction *inst = it; if(inst->getOpcode()!=Instruction::Store) continue; // `store` operands: http://llvm.org/docs/LangRef.html#i_store mapValueToArgument[inst->getOperand(1)] = (Argument *)inst->getOperand(0); } // run through entry block a second time, to associate annotations with arguments for(BasicBlock::iterator it = b->begin();it!=b->end();++it) { Instruction *inst = it; if(inst->getOpcode()!=Instruction::Call) continue; // assumption: Instruction::Call's operands are the function arguments, followed by the function name Value *calledFunction = inst->getOperand(inst->getNumOperands()-1); if(calledFunction->getName().str() != "llvm.var.annotation") continue; // `llvm.var.annotation` operands: http://llvm.org/docs/LangRef.html#int_var_annotation Value *annotatedValue = inst->getOperand(0); if(annotatedValue->getValueID() != Value::InstructionVal + Instruction::BitCast) continue; Argument *a = mapValueToArgument[annotatedValue->getUnderlyingObject()]; if(!a) continue; Value *annotation = inst->getOperand(1); if(annotation->getValueID() != Value::ConstantExprVal) continue; ConstantExpr *ce = (ConstantExpr *)annotation; if(ce->getOpcode() != Instruction::GetElementPtr) continue; // `ConstantExpr` operands: http://llvm.org/docs/LangRef.html#constantexprs Value *gv = ce->getOperand(0); if(gv->getValueID() != Value::GlobalVariableVal) continue; std::cout getType()->getDescription() getName().str() getName().str())
