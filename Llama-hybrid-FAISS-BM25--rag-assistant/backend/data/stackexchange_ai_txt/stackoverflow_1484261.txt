[site]: stackoverflow
[post_id]: 1484261
[parent_id]: 1484217
[tags]: 
Taking a look at that XML data (the search.xml you linked to), I don't seem to have a problem. For instance, if I do this : $xml = simplexml_load_file('search.xml'); foreach ($xml->result->doc as $doc) { var_dump($doc); } I have several outputs, each looking like this : object(SimpleXMLElement)[3] public 'float' => string '0.0' (length=3) public 'arr' => array 0 => object(SimpleXMLElement)[5] public '@attributes' => array 'name' => string 'collection' (length=10) public 'str' => array 0 => string 'sijis' (length=5) 1 => string 'netlabels' (length=9) 2 => string 'netlabels' (length=9) 1 => object(SimpleXMLElement)[6] public '@attributes' => array 'name' => string 'format' (length=6) public 'str' => array 0 => string '256Kbps MP3' (length=11) 1 => string 'Text' (length=4) public 'long' => string '4721' (length=4) public 'str' => array 0 => string 'sijis_SI8' (length=9) 1 => string 'http://creativecommons.org/licenses/by-nc-sa/2.0/' (length=49) 2 => string 'audio' (length=5) public 'int' => string '0' (length=1) (I'm using Xdebug, which gives me nice var_dump s) This shows that ' int ', ' long ', and equivalents are immediate children of the $doc , used in the loop ; which means you can use something like this : $xml = simplexml_load_file('search.xml'); foreach ($xml->result->doc as $doc) { echo $doc->long . ' ; ' . $doc->float . ' '; } To get to the ' long ' and ' float ' data ; which gives that kind of ouput, for the first documents : 4721 ; 0.0 ; 2206 ; 0.0 1239 ; 3.5 Does this help you ? Actually, your code seems to work quite OK for me ; if I remove the " echo $item->getName(); " line, to get a clearer output, I get, for the first document : Document 1 Average Rating: 0.0 Collection: Downloads: 4721 Identifier: sijis_SI8 License URL: http://creativecommons.org/licenses/by-nc-sa/2.0/ Mediatype: audio Which seems OK, when looking at the XML ? For instance, the downloads count seems OK ?
