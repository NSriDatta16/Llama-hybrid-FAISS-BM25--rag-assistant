[site]: stackoverflow
[post_id]: 3020297
[parent_id]: 773220
[tags]: 
I've been chatting this up a bit with some friends, and I thought I'd share in case you find it useful. rebase and merge might not be too useful for what you're trying to do. A safer, easier, boring, and otherwise more predictable approach to only fetching certain bits of code or certain files would be using git-provided methods for manually moving patches, like (a) cherry picking individual commits or (b) format-patch and am. If you need to tweak the result (like deleting a file), do so and explain why in a new commit. Or just tweak stuff while you're cherry picking or applying patches. am can be --interactive, and a cherry-pick can be modified with a commit --amend. I tried another tack with a long-standing branch: merge everything, then manually revert the stuff I really didn't want merged. This worked fine too. Something else that seems like a great idea is using fine-grained branches . I guess I feel like one key take-home message is that paying attention to the code and having good automated tests that are run frequently is more important than mastering a particular git patch/merge strategy.
