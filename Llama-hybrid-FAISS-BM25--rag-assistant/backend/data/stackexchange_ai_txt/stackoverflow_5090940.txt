[site]: stackoverflow
[post_id]: 5090940
[parent_id]: 5031343
[tags]: 
From deploying multiple projects in a large organization with plenty of red-tape, msi's have proven to be the best solution. In terms of importing the project itself, rather then the deployment tool, it's an option to do the import via command line called from within the msi: [RunInstaller(true)] public partial class CustomInstaller : System.Configuration.Install.Installer { public override void Commit(IDictionary savedState) { base.Commit(savedState); string InstallPath = System.IO.Path.GetDirectoryName(this.Context.Parameters["assemblyPath"]) + @"\"; string SqlServer = Context.Parameters["SqlServer"]; SsisInstaller.ImportPackage(InstallPath + "MyProject.dtsx", "MyProject", SqlServer); } } public class SsisInstaller { public static void ImportPackage(string packagePath, string packageName, string sqlServer) { ProcessStartInfo ProcessStartInfo = new ProcessStartInfo(@"""c:\program files\Microsoft SQL Server\100\DTS\Binn\dtutil.exe"""); ProcessStartInfo.Arguments = @" /File """ + packagePath + @""" /Copy SQL;" + packageName + " /Q /DestS " + sqlServer; Process.Start(ProcessStartInfo); } } As you can see, a user interface step was added to the installer project and passed through the context to allow the user to specify the instance name of SSIS. It also helps to have the Sql Agent jobs deployed as a .sql script along your other sql dependencies, but bulk deploys of sql scripts is a more generic problem.
