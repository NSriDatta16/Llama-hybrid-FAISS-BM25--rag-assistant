[site]: stackoverflow
[post_id]: 376415
[parent_id]: 376375
[tags]: 
The only "gotcha" to all of this is if the result set to work with contains a lot of joins, or even nested joins. I've had two or three instances now where the original query I was inheriting consisted of a single query that had so a lot of joins in it and it would take the SQL a good minute to prepare the statement. I went back into the procedure, leveraged some table variables (or temporary tables) and broke the query down into a lot of the smaller single select type statements and constructed the final result set in this manner. This update dramatically fixed the response time, down to a few seconds, because it was easier to do a lot of simple "one shots" to retrieve the necessary data. I'm not trying to object for objections sake here, but just to point out that the code may have been broken down to such a granular level to address a similar issue.
