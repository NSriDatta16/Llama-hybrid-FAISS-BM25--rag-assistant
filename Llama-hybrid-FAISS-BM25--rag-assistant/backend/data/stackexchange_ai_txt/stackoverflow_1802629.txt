[site]: stackoverflow
[post_id]: 1802629
[parent_id]: 
[tags]: 
Is there an elegant way to remove nulls while transforming a Collection using Guava?

I have a question about simplifying some Collection handling code, when using Google Collections ( update : Guava ). I've got a bunch of "Computer" objects, and I want to end up with a Collection of their "resource id"s. This is done like so: Collection matchingComputers = findComputers(); Collection resourceIds = Lists.newArrayList(Iterables.transform(matchingComputers, new Function () { public String apply(Computer from) { return from.getResourceId(); } })); Now, getResourceId() may return null (and changing that is not an option right now), yet in this case I'd like to omit nulls from the resulting String collection. Here's one way to filter nulls out: Collections2.filter(resourceIds, new Predicate () { @Override public boolean apply(String input) { return input != null; } }); You could put all that together like this: Collection resourceIds = Collections2.filter( Lists.newArrayList(Iterables.transform(matchingComputers, new Function () { public String apply(Computer from) { return from.getResourceId(); } })), new Predicate () { @Override public boolean apply(String input) { return input != null; } }); But this is hardly elegant, let alone readable, for such a simple task! In fact, plain old Java code (with no fancy Predicate or Function stuff at all) would arguably be much cleaner: Collection resourceIds = Lists.newArrayList(); for (Computer computer : matchingComputers) { String resourceId = computer.getResourceId(); if (resourceId != null) { resourceIds.add(resourceId); } } Using the above is certainly also an option, but out of curiosity (and desire to learn more of Google Collections), can you do the exact same thing in some shorter or more elegant way using Google Collections ?
