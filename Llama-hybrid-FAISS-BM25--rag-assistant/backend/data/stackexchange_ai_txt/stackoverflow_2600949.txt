[site]: stackoverflow
[post_id]: 2600949
[parent_id]: 2600871
[tags]: 
When Not too quickly. It is generally very cheap to have short lived objects. For a cache to be profitable there would have to be (very) many candiadates and they should live long enough to make it to the next generation. How can you diagnose if it's an issue? With a Profiler. I'm not so sure the author of the article did that. How much of a problem is managed heap fragmentation in a managed language like C#? As far as I know it is rare. .NET has a compacting Garbage collector, that prevents most forms of fragmentation. There are issues with the Large Object Heap sometimes. Edit: When you go through the comments below the article you will find that someone measured it and found the cache to be a lot slower than creating new eventargs each time. Conclusion: Measure before you start optimizing. This was not a good idea/example.
