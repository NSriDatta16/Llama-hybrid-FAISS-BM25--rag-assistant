[site]: crossvalidated
[post_id]: 219052
[parent_id]: 219025
[tags]: 
I'm highlighting feature correlation as possible solution to your problem - which is different to multilabel classification, but might be able to give you a simple answer to your question. I guess that a simple feature correlation between your students attributes ( attendance , etc.) and the one-hot encoded labels of their performance on certain exams/subjects ( Math increasing , etc.) will answer your question. Here's a short example with some explanation on how this could look like (I'm using R and a dataset from another domain, namely the mtcars dataset, to make everything reproducible): At first I need to artificially generate fake student records: d This is what our fake student records look like (the data might have a senseless correlation here, but it should serve the purpose): > print(d) engagement attendance punctuality math history 1 bad 160 0.7910751 decreasing decreasing 2 bad 160 0.7910751 decreasing decreasing 3 good 108 0.7809331 increasing decreasing 4 good 258 0.6247465 decreasing increasing 5 average 360 0.6389452 stable increasing We can now one-hot encode students' categorial attributes and performance in exams/subjects: > library(caret) > d2 print(d2) engagement.average engagement.bad engagement.good attendance punctuality math.increasing math.decreasing math.stable 1 0 1 0 160 0.7910751 0 1 0 2 0 1 0 160 0.7910751 0 1 0 3 0 0 1 108 0.7809331 1 0 0 4 0 0 1 258 0.6247465 0 1 0 5 1 0 0 360 0.6389452 0 0 1 Having one-hot encoded information allows feature correlation between your students' attributes and the labels: library(corrplot) corrplot(cor(d2), type = 'lower') This gives you the correlation between students' recorded attributes and their performance on certain exams/subjects, and therefore should probably answer your question. Update: On a second thought, as your students' attributes and exam performances can be considered to have ordered levels, converting those categorial variables just into (ordered) numeric values instead of one-hot encoding them should work too. This reduces the size of the resulting correlation matrix - and might emphasize the correlation between specific variables a bit better: d2 ...which will result in a simpler d2 : > print(d2) engagement attendance punctuality math history 1 2 160 0.7910751 2 2 2 2 160 0.7910751 2 2 3 3 108 0.7809331 1 2 4 3 258 0.6247465 2 1 5 1 360 0.6389452 3 1 > library(corrplot) > corrplot(cor(d2), type = 'lower')
