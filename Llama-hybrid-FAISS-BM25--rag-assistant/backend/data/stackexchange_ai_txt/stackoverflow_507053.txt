[site]: stackoverflow
[post_id]: 507053
[parent_id]: 505883
[tags]: 
ActiveX Controls in VB are great time savers however they are the bane of effective test driven development. In order to effectively test a entire VB6 application ideally you need to have a design where the EXE is a thin shell over a ActiveX DLL that does all the work. The forms implement a interface and register themselves with the DLL. So if you have Order Entry Form, it will implement that IOrderEntryForm interface and it's events will call methods on the OrderEntry Class located in MyAppUI dialog. To emphasize in Visual Basic 6, FORMS can IMPLEMENT a interface. The form then registers itself with a UI Class in it's LOAD event. The form's events (like MyButton_Click) calls methods on the UI Class. The UI Class using the methods of the Form Interface to change what is displayed. It is extra work but it saves a lot of time for testing. Also maintenance as you can change what the form looks like as long the implemented interface remain the same. This also means that before you have something like MYEXE->MyActiveXDLL will turn into MYEXE->MyUIDLL->MyActiveXDLL. For your test environment you create a ActiveX DLL that mocks up the UI by creating classes that implement the various form interface. The UI DLL doesn't know the difference and you have total control over what inputs are sent and what you read. Note that this type of design pattern is talked about here . I used it as the basis for developing and maintaining my company's CAD/CAM application for metal cutting machines. Third party ActiveX Controls are the bane of this scheme. This is because the code doing the heavy lifting is inside the control itself. The more sophisticated the ActiveX control the worse the problem is. The trend at my company is to reduce our reliance on third party controls in favor of in-house applications. However like any algorithm and design pattern this involves a judgment call. How many issues do you get in the areas of your software involving the rich text control. If not many then you can probably get away with a test script either manual or automated (i.e. sending key strokes to the application) and use a unit test framework for the rest. The critical element of using Unit Testing your ENTIRE application is to stuff as much of it as you can behind interfaces. Just do what you can for now and make note of the areas you want to change for when you do future development. Don't despair if you don't have 100% coverage right away or even for the next year.
