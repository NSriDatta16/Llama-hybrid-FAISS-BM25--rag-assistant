[site]: stackoverflow
[post_id]: 5277264
[parent_id]: 5275370
[tags]: 
Ideally, when writing unit tests each unit of code (typically a class) is tested in isolation. This means having one test case that thoroughly tests your model class and another test case that tests your controller. If the model is fairly complex or takes a long time to access, you can substitute a mock object or stub in the controller test. With Test Driven Development, you would only write code once you had a failing test. If you started with tests for the controller, I suppose you could end up testing the model. By tracking code coverage you could gain confidence that you had tested all of the model code. However, without tests for the model alone, I would be worried that problems could arise during refactoring that wouldn't be caught by the controller test. It would also make it harder to diagnose a failure in a controller test: is the controller or the model at fault?
