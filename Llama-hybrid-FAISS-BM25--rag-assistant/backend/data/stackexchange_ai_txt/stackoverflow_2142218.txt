[site]: stackoverflow
[post_id]: 2142218
[parent_id]: 2131964
[tags]: 
You should probably be using a delegate: delegate int NotifyDelegate(INSSBuffer3 pNSSBuffer3, IPin pPin, long prtStart, long prtEnd); void run(){ bufferPassCallbackInterface = new IAMWMBufferPassCallbackImpl(this); IAMWMBufferPass bPass = (IAMWMBufferPass)DSHelper.GetPin(pWMASFWriter, "Video Input 01"); NotifyDelegate d = new NotifyDelegate(bufferPassCallbackInterface.Notify); hr = bPass.SetNotify(d); DsError.ThrowExceptionForHR(hr); } However, I'm not quite sure how your implementing an unmanaged interface on a managed class. An INSSBuffer3* in C++ does not directly correlate to new INNSBuffer3() in C#. Edit: In response to your comment, the SetNotify function is defined as HRESULT SetNotify( [in] IAMWMBufferPassCallback *pCallback ); So, it requires a pointer to an implementation of IAMWMBufferPassCallback. MSDN says that pCallback is pCallback a Pointer to the application's IAMWMBufferPassCallback interface. The delegate is (an attempt to be) the managed equivalent to a pointer to IAMWMBufferPassCallback. A call back is, generally, a method, not an object. So, passing in an instance of the delegate should work for you. Another similar example is with InternetSetStatusCallback , where you pass a pointer to an implementation of InternetStatusCallback . I would try it, if it doesn't work, why not try a library where someone has already done all the hard work? DirectShowNet may be an option (I've never used it).
