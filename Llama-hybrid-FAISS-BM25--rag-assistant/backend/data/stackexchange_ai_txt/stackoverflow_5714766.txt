[site]: stackoverflow
[post_id]: 5714766
[parent_id]: 
[tags]: 
C++ internals: Messing with the this-pointer

I have some questions about the internal workings of C++. I know for example that every member function of a class has an implied hidden parameter, which is the this-pointer (much in the same way Python does): class Foo { Foo(const Foo& other); }; // ... is actually... class Foo { Foo(Foo* this, const Foo& other); }; Is it wrong of me to then assume then that the validity of the function does not directly depend on the validity of this (since it's just another parameter)? I mean, sure, if you try to access a member of the this-pointer, it better be valid, but the function will otherwise continue if this is deleted, right? For example, what if I were to mess up with the this pointer and do something like what you see below? Is this undefined behavior, or is it defined by highly discouraged? (I'm asking out of pure curiosity.) Foo:Foo(const Foo& other) { delete this; this = &other; }
