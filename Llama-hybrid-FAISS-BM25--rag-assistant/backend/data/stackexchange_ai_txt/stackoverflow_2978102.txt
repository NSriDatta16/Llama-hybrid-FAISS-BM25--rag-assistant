[site]: stackoverflow
[post_id]: 2978102
[parent_id]: 2946910
[tags]: 
If all your users are doing is typing in the RichTextBox and doing character formatting, RTF is as good as XAML. However there are many FlowDocument capabilities you may expose in your UI that are not convertible to RTF. Here are some examples of FlowDocument (and RichTextBox) features that are not expressable in RTF or are implemented differently: A Block can have an arbitrary BorderBrush, including gradient brushes with stops, VisualBrush A Section has the HasTrailingParagraphBreakOnPaste property Floater / ClearFloaters is implemented differently Hyphenation can be enabled/disabled per block, not just per paragraph WPF Styles and ResourceDictionaries can be included in the Resources property Arbitrary WPF UI such as bound CheckBoxes, etc, can be embedded inside the RichTextBox and can be cut-and-pasted from other windows. For example, suppose you want to allow users to drag or cut/paste in a "current date/time" field into your RichTextBox that would always show the current date and time. This could be done by adding a second read-only RichTextBox that has the InlineUIContainer and the already-bound control. This even works when cutting and pasting from other applications and does not require custom controls. Another consideration is that the code to convert between FlowDocument and RTF is relatively complex so it may have lower performance than going with XAML. Of course loose XAML doesn't include images and such - for that you need to use XamlPackage. I store my XamlPackage in the database as a byte[], but you can also choose to Base64 encode it for storage as a string. The bottom line is that it really depends on whether you want the user to be able to use features not available in RTF. Even if your application doesn't include tools to generate FlowDocuments that use these features, it is possible to cut-and-paste them from other applications.
