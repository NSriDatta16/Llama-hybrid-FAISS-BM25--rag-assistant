[site]: crossvalidated
[post_id]: 638862
[parent_id]: 
[tags]: 
Cubist Model Tree Overlapping Rules

Can someone help me understand the output of a cubist model created by the R Cubist package? The documentation package manual for objects of class "cubist" seems to be nonexistent. Looking for information on the rule quest has me looking through c source code and without much success. Do these objects have any data in them that will allow me to visualize the tree and figure out the rules associated with the terminal nodes? Below is the output from a model. All predictors are factor variables. model is a cubist model. There are 98 instances in the data where some of the rules overlap. This is apparent in the output from the number of cases in each rule (total is 91277) and the number of training instances (91179). Based on the limited documentation I've been able to find I thought there might be some hierarchy at play and that a rule may be below a split and hence making the sum of all rule cases greater than the number of training instances. That is not the case though. As an example for this particular model there are 590 cases for rule 6, 177 cases for rule 12 and 78 cases where both of these rules are active at the same time. Interestingly rule 6 is not listed in the "splits" output below. I'm guessing this is telling me something but I'm not quit sure what. For these cases where more than one rule is active, what is the terminal node model? cat(model$output) # print the output to the console --------------------------------- Target attribute `outcome' Read 91179 cases (690 attributes) from undefined.data Model: Rule 1: [18998 cases, mean 0.0166252, range 0.011635 to 0.02136263, est err 0.0001783] if X592 = 0 X689 = 0 X903 = 2 then outcome = 0.0165942 Rule 2: [1467 cases, mean 0.0171435, range 0.01602197 to 0.02155337, est err 0.0004971] if X592 = 1 X698 = 0 X888 = 2 X903 = 2 then outcome = 0.0167849 Rule 3: [168 cases, mean 0.0181110, range 0.011635 to 0.01888304, est err 0.0004205] if X423 = 0 X689 = 0 X903 = 0 then outcome = 0.0183108 Rule 4: [430 cases, mean 0.0188719, range 0.01621271 to 0.0202182, est err 0.0009363] if X592 = 1 X888 = 4 X903 = 2 then outcome = 0.0194553 Rule 5: [9753 cases, mean 0.0195881, range 0.01812009 to 0.02117189, est err 0.0002318] if X346 = 0 X423 = 1 X441 = 0 X903 = 0 then outcome = 0.019646 Rule 6: [590 cases, mean 0.0212197, range 0.01678493 to 0.02479591, est err 0.0010095] if X689 = 0 X698 = 1 then outcome = 0.0209812 Rule 7: [648 cases, mean 0.0222725, range 0.02098116 to 0.02346075, est err 0.0002749] if X689 = 1 X900 in {0, 3} then outcome = 0.0223163 Rule 8: [12832 cases, mean 0.0235755, range 0.02174411 to 0.02594034, est err 0.0002139] if X689 = 1 X900 = 1 X915 in {0, 2} then outcome = 0.0236515 Rule 9: [10416 cases, mean 0.0240797, range 0.02174411 to 0.02613107, est err 0.0002605] if X484 = 2 X689 = 1 X915 = 1 X1062 in {0, 1, 4, 7, 8} then outcome = 0.024033 Rule 10: [4317 cases, mean 0.0243195, range 0.02288853 to 0.02594034, est err 0.0003266] if X483 = 2 X484 = 2 X915 = 1 X1062 = 2 then outcome = 0.0244144 Rule 11: [1817 cases, mean 0.0243281, range 0.02307927 to 0.02594034, est err 0.0005629] if X711 = 0 X1062 = 2 then outcome = 0.024033 Rule 12: [177 cases, mean 0.0246289, range 0.011635 to 0.02689403, est err 0.0017732] if X441 in {-1447, 5} X689 = 0 X903 = 0 then outcome = 0.0263218 Rule 13: [13683 cases, mean 0.0251357, range 0.02327001 to 0.02632181, est err 0.0002123] if X483 = 0 X711 = 1 X915 = 1 X1062 = 2 then outcome = 0.0251774 Rule 14: [15952 cases, mean 0.0252648, range 0.0242237 to 0.02632181, est err 0.0002027] if X484 = 1 X915 = 1 then outcome = 0.0251774 Rule 15: [29 cases, mean 2.0473793, range 0.02002747 to 3.312352, est err 0.5484862] if X346 = 1 then outcome = 1.9651713 Evaluation on training data (91179 cases, sampled): Average |error| 0.0005271 Relative |error| 0.14 Correlation coefficient 0.96 Attribute usage: Conds Model 63% X915 48% X689 34% X903 34% X484 33% X1062 23% X592 20% X483 17% X711 15% X900 11% X441 11% X423 11% X346 2% X698 2% X888 Time: 35.2 secs model$splits # print split information to the console committee rule variable dir value category type percentile 703 1 2 "X888" NA 2 type3 NA 713 1 4 "X888" NA 4 type3 NA 717 1 5 "X441" NA 0 type3 NA 727 1 7 "X900" NA 0,3 type3 NA 731 1 8 "X915" NA 0,2 type3 NA 733 1 8 "X900" NA 1 type3 NA 736 1 9 "X1062" NA 0,1,4,7,8 type3 NA 737 1 9 "X484" NA 2 type3 NA 738 1 9 "X915" NA 1 type3 NA 742 1 10 "X483" NA 2 type3 NA 743 1 10 "X1062" NA 2 type3 NA 744 1 10 "X915" NA 1 type3 NA 745 1 10 "X484" NA 2 type3 NA 748 1 11 "X1062" NA 2 type3 NA 753 1 12 "X441" NA -1447,5 type3 NA 757 1 13 "X483" NA 0 type3 NA 759 1 13 "X1062" NA 2 type3 NA 760 1 13 "X915" NA 1 type3 NA 763 1 14 "X484" NA 1 type3 NA 764 1 14 "X915" NA 1 type3 NA In case anyone is interested in the input signal... plot(y$X1) plot(y$X1, ylim=c(0.01, 0.03)
