[site]: stackoverflow
[post_id]: 4649068
[parent_id]: 4648138
[tags]: 
You should abstract the code that saves or updates a record from the form, so it doesn't care. A basic design would be an object that represents the entity, and a Save() method would decide whether to insert or update based on the primary key or ID (being zero or not). When this becomes trickier is if your form includes data not stored in the same table, e.g. if you had an "organization" with one or more "contacts." Ideally, if someone creates a new organization, then adds contacts, then clicks "cancel," all that could happen without the database ever being touched. In practice, that is not always practical, because your "contact" form is also probably bound to the database the same as your "organization" form, and a "contact" will need to refer to an existing "organization" before it can be saved. What I usually do is "lazy creation." Don't add a blank row when someone creates an organization. If they create a contact, you will be forced to save the parent object to the database first, otherwise you will have no reference for your contacts. If they cancel the main form without saving, then delete it. Of course, your Delete() method will get rid of the children too. However, you will need to maintain a state in your parent object to indicate it's conceptually still "new" even after it has been saved to the database in order to handle this. You need this for two reasons: first, so your code knows to delete it if a user cancels without saving, and second, so that the record is not available to any other parts of your application. I usually just use a "Status" flag that is either "New" or "Active." If you must do this, though, be aware that you can end up with orphans. Nothing will stop a user from creating a new "organization," adding a "contact," which creates a new organization record, and then shutting down their web browser. This is pretty much unavoidable unless you maintain all the form data on the client side (or as session data) until they click "save." While doable, it makes coding this kind of form a lot harder.
