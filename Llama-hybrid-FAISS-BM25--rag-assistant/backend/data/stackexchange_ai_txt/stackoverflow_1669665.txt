[site]: stackoverflow
[post_id]: 1669665
[parent_id]: 1499024
[tags]: 
native .Net interop is one of my pet disciplines, which is why I needed this as straightforward and reliable as possible. The result was that I made me an MSBuild task which I just need to drag into a project to allow me to export static methods from pretty much any .Net language. And since the whole marshalling infrastructure works for exports as well, you can do pretty much anything with it that you want (like passing native/managed objects as IUnknown). The resulting assembly will look to the consuming process like a real DLL, which means you can't have it to scale up to 64bit automatically anymore. However, since you do have native bits in your application, you already have this issue anyways. ;-) When you do not specifiy the CPU target in your C# project, my task will emit a warning that it created a folder for all targets (x86,x64 and Itanium), and there you'll have *.dll and *.pdb for each platform.
