[site]: stackoverflow
[post_id]: 4393896
[parent_id]: 4393843
[tags]: 
In theory, the first case might dynamically create a temporary functor object on the heap, whereas I believe that the second case is fully evaluated at compile time. The first case will create a temporary functor object on the stack. Are you worrying about whether Pred::Pred() will allocate storage? If so, you may as well also worry about whether the static function is going to allocate storage on the heap for some reason. Regardless, most predicate functor objects that work with this sort of idiom have very simple constructors, since their only purpose is to call an overloaded operator () , so the compiler will likely optimize out the object construction and produce a simple function call.
