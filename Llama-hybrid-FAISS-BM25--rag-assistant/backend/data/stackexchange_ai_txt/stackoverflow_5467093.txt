[site]: stackoverflow
[post_id]: 5467093
[parent_id]: 5467021
[tags]: 
The steganography site doesn't give the API details AFAICS, which is a nuisance. However, judging from your question, it appears that there is a steganographic function that takes an open FILE * (you never get to deal with FILE ) which contains the unmodified image, and presumably the information you are trying to conceal in the image. In that case, you can arrange to download the file via libcurl into an open file (which may not have a name); you can then rewind that FILE * and pass it to the steganography library. Having downloaded the library, the two main functions provided are: steganolab_encode /** * Modifies specified jpeg file so that it contains given message. * @param file - jpeg file name * @param data - message to embed * @param len - message length * @param password - key string to cipher data and set up PRNG * @param DCT_radius - which DCT coefficients shall be used to carry * information, i^2+j^2 steganolab_decode /** * Reads steganographic message from specified file * @param file - jpeg file name * @param data - pointer to pointer to string to put data to * @param len - pointer to push obtained buffer length to * @param password - secred string for cipher and PRNG * @param DCT_radius - which DCT coefficients shall be used to carry * information, i^2+j^2 Since the functions expect file names, you will have to provide file names. Or you will have to rewrite the code to take whatever it is you have in mind - a buffer or an open file stream. (Aside: the code insists on using the archaic and non-standard header to obtain a definition of size_t . It compiles to object if you replace each reference to (or "malloc.h" ) with ; it might in theory compile with if the only needed declaration is size_t .)
