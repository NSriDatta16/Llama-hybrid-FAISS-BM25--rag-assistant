[site]: stackoverflow
[post_id]: 1794942
[parent_id]: 1794903
[tags]: 
It shows NullPointerException because you have a null pointer on line 149. I don't know which one is line 149, so let's consider the options: StringBuffer user = new StringBuffer(); Can't be that line. It's creating a new object. SystemManagement students = new SystemManagement(); Can't be that line, either, for the same reason. (Although I'm puzzled what a system management is, and why "students" would be a good name for such an object.) String name1 = students.getName(); Can't be that line. We already know students can't be null (or else the previous line would have thrown a different exception without allowing execution to reach this line at all). char char1 = name1.charAt(0); Maybe that one. Use your debugger to inspect the value of name1 . Is it null? What name do you expect to get from a brand new system management? String family1 = students.getFamily(); Can't be that one. char char2 = family1.charAt(1); Maybe that one. What family do you expect from a brand new system management? setUserName(name1 + "." + family1); Can't be this one. If either of those two string variables were null, you'd have gotten the exception earlier, when you called charAt on them. Everything after that line either uses the two string objects or it uses newly created objects, so we can eliminate the rest of the method from consideration. Focus your attention on the two lines I pointed out (or on the one line that you know to be line 149). You've changed your code to check that name1 and family1 aren't null before you use them, but I don't think you've really considered the underlying problem. What is a new SystemManagement supposed to give you for user name and family name? Will they ever be anything other than null? Obviously, one or both of those values is null, so you skip over everything else in the method up to the last line, where you call getUserName . Since you've skipped the call to setUserName , what value is getUserName supposed to return instead? (If you don't know, go find out.) When you ask "Why does my program do X ?" answer with another question: "Why shouldn't it do X ?" You're the one writing the code, so the program is ultimately doing exactly what you told it to do. If it's not doing what you expected, then you gave it wrong instructions. Go through your code, one line at a time if you have to, and figure out where things went wrong. Make sure you understand exactly what each line of your code will do. If you have a line and you don't understand it, go read the documentation, ask your instructor, or ask here. Walk through the execution on paper , keeping track of each variable's value and crossing out old values as you re-assign them. If you have multiple instances of a class, make sure you keep track of which instance you're working with at any given time. (Someday, you might hit a problem that's due to external factors. A buggy compiler, bad RAM, poorly implemented specifications, etc. Today is not that day. If you suspect any of those, make sure you've first thoroughly ruled out any possibility of it being your own mistake instead.)
