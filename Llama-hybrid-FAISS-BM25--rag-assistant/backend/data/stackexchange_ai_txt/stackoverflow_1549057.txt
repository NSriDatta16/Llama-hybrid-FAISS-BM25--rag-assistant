[site]: stackoverflow
[post_id]: 1549057
[parent_id]: 1548983
[tags]: 
Something like this should work: $domain = "YOURDOMAIN" $path = "C:\Your\Folder\Path" $dirs = Get-ChildItem $path | Where-Object { $_.Attributes -band [System.IO.FileAttributes]::Directory } foreach ($dir in $dirs) { $acl = Get-Acl $dir.FullName $user = $domain + "\" + $dir.Name $permission = $user, "FullControl", "Allow" $rule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission $acl.SetAccessRule($rule) $acl | Set-Acl $dir.FullName } The above works for a normal local file system path, but SharePoint has a different folder security model. I found a blog post by Robert Gruen that explains how to programmatically set permissions. He gives this C# code sample: // get a reference to the folder (this assumes path points to a valid folder) SPFolder folder = SharePointConfiguration.Site.GetFolder(path); // get a reference to the Sharepoint group collection SPGroupCollection spc = SharePointConfiguration.Site.SiteGroups; // get a reference to the group whoâ€™s permissions you want to modify for the folder above SPGroup group = spc[groupName]; // create a role assignment from the group reference SPRoleAssignment roleAssignment = new SPRoleAssignment((SPPrincipal)group); // break role inheritance for folders/files because they will be having permissions separate from their parent file/folder folder.Item.BreakRoleInheritance(true); // update the role assignments for the group by adding the permissionSet "TestPermissionLevel" which is a custom // permissionset I created manually... you can easily use any of the built-in permission sets roleAssignment.RoleDefinitionBindings.Add(SharePointConfiguration.Site.RoleDefinitions["Test Permission Level"]); // apply the new roleassignment to the folder. You can do this at the listitem level if desired (i.e. this could be SPfile.Item.... instead of SPFolder.Item) folder.Item.RoleAssignments.Add(roleAssignment); I'm sure with a bit of translation, this could be adapted to PowerShell.
