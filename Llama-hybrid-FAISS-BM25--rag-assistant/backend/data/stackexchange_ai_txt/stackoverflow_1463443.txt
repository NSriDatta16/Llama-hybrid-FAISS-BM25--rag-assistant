[site]: stackoverflow
[post_id]: 1463443
[parent_id]: 1463348
[tags]: 
My advice is not to be extreme. From my experience, pure agile or pure traditional will not work. Before you use any process, know what it mean to solve. I personally use a variation of Agile RUP . I do some upfront effort such as investigate the actual needs, do high-level design with possible extension. And ask customer to sign-off some major high-level requirements. If you work in small group, detail design or specification may not worth. Of course, if there is some libraries that are shared by many, it will be worth the trouble. Deciding what to invest in up-front depending on its risk (likelihood and effect). Moreover, many SW best practice is really 'best' like version control, automatic testing (to me I only used it way to early detect regression as I do not believe in TDD as driven force of the development). I suggest you read ' Pragmatic Programmer ' it presents many of those techines. As to answer you questions: (1). Is it possible to have a development process in a place like this? Yes, but as I say, trailer it to fit your organization. (2). Would it help to have some sort of management? What kind of? Management helps but no control freak. Plan what to do when: integrate, resolve conflict, dead line of some mile stone. And roughly keep them on schedule (I particularly like Scrum's sprint). (3). Is it possible to make quality products with small resources? Definitely as soon as the size of the work, the time to develop and the size of the team is balance. If you definition of Quality is the same with me. To me, Quality means: solve the problem it set out to in an efficient and reliable fashion. (4). How do I convince myself and others that the company which has worked successfully for decades needs to change? What would be essential? Point out the problems. If there are none, why change? If you want to change, you should be able to identify the problem OR potential problems. Point out the problem. Some big one are: Without any process, it is harder for new recruited to blend in as they must learn from observing other how to deal with things. Without process, it is harder to work in stress. Without schedule, it is hard to determine the progress. Without automatic testing, it will takes more time to identify problems and regression. Without version control, it will be harder to roll-back mistake and separation of work to each team members will be mess. Just my though.
