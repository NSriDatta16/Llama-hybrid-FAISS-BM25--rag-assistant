[site]: stackoverflow
[post_id]: 5094230
[parent_id]: 5094013
[tags]: 
If you want to implement a pseudorandom number generator using CUDA, have a look over here . If you want to generate char s from a predetermined set of characters, you can just put all possible char s into that array and create a random index (just as you are doing it right now). But I think it might be more valuable comparison might be one that uses brute force. Therefore, you could adapt your program to try not random strings, but try one string after another in any meaningful order. Then, on the other hand, you could implement the brute-force stuff on the GPU using CUDA. This can be tricky since you might want to stop all CUDA threads as soon as one of them finds a solution. I could imagine the brute force process using CUDA the following way: One thread tries aa as first two letters and brute-forces all following digits, the next thread tries ab as first two letters and brute-forces all following digits, the next thread tries ac as first two letters and brute-forces all following digits, and so on. All these threads run in parallel. Of course, you could vary the number of predetermined char s such that e.g. the first thread tries aaaa , the second aaab . Then, you could compare different input values. Any way, if you have never dealt with CUDA, I recommend the vector addition sample , a very basic CUDA example, that serves very well for getting a basic understanding of what's going on with CUDA. Moreover, you should read the CUDA programming guide to make yourself familiar with CUDAs concept of a grid of thread-blocks containing a grid of threads. Once you understand this, I think it becomes clearer how CUDA organizes stuff. To be short, in CUDA, you should replace loops with a kernel, that is executed multiple times at once.
