[site]: stackoverflow
[post_id]: 708936
[parent_id]: 708254
[tags]: 
Some people, when confronted with a problem, think "I know, I’ll use regular expressions." Now they have two problems. — Jamie Zawinski in comp.lang.emacs. Keep the regular expressions as simple as they can possibly be ( KISS ). In your date example, I'd likely use one regular expression for each date-type. Or even better, replaced it with a library (i.e. a date-parsing library). I'd also take steps to ensure that the input source had some restrictions (i.e. only one type of date-strings, ideally ISO-8601 ). Also, One thing at the time (with the possible exception of extracting values) Advanced constructs are ok if used correctly (as in simplying the expression and hence reducing maintenance) EDIT: "advanced constructs lead to maintainance issues" My original point was that if used correctly it should lead to simpler expressions, not more difficult ones. Simpler expressions should reduce maintenance. I've updated the text above to say as much. I would point out that regular expressions hardly qualify as advanced constructs in and of themselves. Not being familiar with a certain construct does not make it an advanced construct, merely an unfamiliar one. Which does not change the fact that regular expressions are powerful, compact and- if used properly- elegant. Much like a scalpel, it lies entirely in the hands of the one who wields it.
