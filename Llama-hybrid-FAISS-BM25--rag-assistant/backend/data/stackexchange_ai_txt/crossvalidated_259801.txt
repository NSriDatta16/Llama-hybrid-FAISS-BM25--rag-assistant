[site]: crossvalidated
[post_id]: 259801
[parent_id]: 
[tags]: 
Weka - random forrest always predicts the same class

I am classifying Portuguese tweets in to three classes, news, noise and relevant. I have used the weka gui to identify a classifying pipeline that gave good results. STWV -> Attribute Selection -> SMOTE -> Random Forest I have programmed this as follows: public class TrainBuildClassifier { public static void main(String[] args) throws Exception { DataSource dataSource = new DataSource("data/tweets.arff"); Instances instances = dataSource.getDataSet(); instances.setClass(instances.attribute("class")); StringToWordVector filter = new StringToWordVector(); filter.setWordsToKeep(100000000); NGramTokenizer tokenizer = new NGramTokenizer(); tokenizer.setNGramMinSize(1); tokenizer.setNGramMaxSize(4); filter.setTokenizer(tokenizer); SMOTE smote = new SMOTE(); smote.setPercentage(100); AttributeSelection as = new AttributeSelection(); Ranker search = new Ranker(); InfoGainAttributeEval evaluator = new InfoGainAttributeEval(); search.setNumToSelect(-1); search.setThreshold(0); as.setEvaluator(evaluator); as.setSearch(search); System.out.println("Applying Filters"); MultiFilter multi = new MultiFilter(); multi.setFilters(new Filter[] {filter, as, smote}); System.out.println("Creating Classifiers"); FilteredClassifier fc = new FilteredClassifier(); RandomForest rf = new RandomForest(); rf.setNumTrees(10); // NaiveBayesMultinomial nb = new NaiveBayesMultinomial(); fc.setClassifier(rf); fc.setFilter(multi); // Train and build the classifier System.out.println("Building Classifier....."); fc.buildClassifier(instances); ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("data/rf.model")); out.writeObject(fc); out.flush(); out.close(); } } The issue I am having is that the classifier always returns the same class. Even with a cross validation accuracy of approx 80%. Here is the arff header: @RELATION tweets @ATTRIBUTE tweet string @ATTRIBUTE class {news,noise,relevant} @DATA 'retweet ir zika pego bom prevenir :joy: :joy: url',noise And the tweets are passed to the classifier by the following method: public Category classify(String document) throws Exception { String[] features = normalize(document); Instances instance = featuresToInstance(features); Filter filter = fc.getFilter(); Filter.useFilter(instance, filter); return Category.fromPrediction((int)fc.classifyInstance(instance.instance(0))); } If I change the classifier to be multinomial bayes everything seems to work okay. However Random Forest should deliver much better accuracy. Am I doing something obviously wrong?
