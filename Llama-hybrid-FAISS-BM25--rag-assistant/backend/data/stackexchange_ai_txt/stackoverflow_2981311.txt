[site]: stackoverflow
[post_id]: 2981311
[parent_id]: 2922768
[tags]: 
I agree with wpjmurray that this is not a flaw at all; rather it is a result of how scope works in EcmaScript. Your click handler carries an implicit reference to a variable ( n ). When the function is called (triggered by a click), the value of that variable has changed. It makes perfect sense when you think about it this way. The solution is to store the value on each iteration and associate it somehow with your button. There are three good ways to do this: Create a new closure that itself has an implicit reference to another variable whose value is set once and then left alone. back2dos's solution is one way to do this: makeFunction creates a new method closure that has an implicit reference to a new variable ( makeFunction 's n argument) which doesn't change. Store the value as a property on the object. (This is what wpjmurray proposed, but you aren't able to do.) Store the value in a map and look it up. You hinted at this when you mentioned mapping the X/Y coordinates to the index. However, ActionScript 3 provides a much moreâ€¦elegant (: solution: the Dictionary class ! Just map the object itself to the index, and then look it up in the handler. Here's an example: var dict:Dictionary = new Dictionary(true); for (var a:int = 0; a Because of how scope works in EcmaScript, each click handler that you create carries an implicit reference to the dictionary, which you can use to look up the index. Now the index is mapped directly to the button, without having to add a property or create a new function.
