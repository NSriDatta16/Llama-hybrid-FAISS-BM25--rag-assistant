[site]: stackoverflow
[post_id]: 597210
[parent_id]: 596999
[tags]: 
To add to the excellent TofuBeer's answer , since NoClassDefFoundError indicates that: class org.eclipse.jface.resource.FontRegistry was found by the ClassLoader , but can not been loaded without triggering an error, like having static blocks or members which use a Class that's not found by the ClassLoader . Let's look at org.eclipse.jface.resource.FontRegistry source code : It does not have any static variable initialization (nor does its superclasses). Let's look at org.eclipse.jface.resource.JFaceResources source code The getFontRegistry() function in which the Error is triggered is using the static variable fontRegistry : /** * The JFace font registry; null until lazily initialized or * explicitly set. */ private static FontRegistry fontRegistry = null; Thus, it begs raises the question : why a static initialized variable would suddenly be considered null again ? Because somehow FontRegistry or JFaceResources get unloaded by the gc ?! If a field is declared static, there exists exactly one incarnation of the field, no matter how many instances (possibly zero) of the class may eventually be created. A static field, sometimes called a class variable, is incarnated when the class is initialized (§12.4). So it doesn't matter whether instances of the class exist at any time, the field will exist as long as the Class itself has been loaded. If this were a eclipse Plugin , this could have been related to this FAQ entry Here is a typical scenario for a new user: You are writing a plug-in that extends plug-in XYZ. To get it to compile, you add a reference to the JAR file for plug-in XYZ to your project’s build path either from the Java Build Path property page or by editing the .classpath file. When you launch a runtime workbench, the following surprising error is reported: java.lang.NoClassDefFoundError: XYZ.SomeClass . Do not start looking in the Plug-ins and Fragments tab in the launch configuration for the runtime workbench. That tab influences only which plug-ins are used for your runtime workbench and whether they are loaded from the workspace or from the Eclipse install directory. Instead, start looking in the plug-in manifest. Edit the plugin.xml file and ensure that XYZ is mentioned as a required plug-in . Then, save the plugin.xml file. This will update the project’s build path automatically. Never manually edit the .classpath file when you are writing a plug-in. The plug-in Manifest Editor simply overwrites any changes you make to it. Not very civilized, but that is the way it works.
