[site]: stackoverflow
[post_id]: 561498
[parent_id]: 561446
[tags]: 
I'd recommend reading How MySQL Uses Indexes from the MySQL Reference Manual . It states that indexes are used... To find the rows matching a WHERE clause quickly. To eliminate rows from consideration. To retrieve rows from other tables when performing joins. To find the MIN() or MAX() value for a specific indexed column. To sort or group a table (under certain conditions). To optimize queries using only indexes without consulting the data rows. Indexes in a database work like an index in a book. You can find what you're looking for in an book quicker, because the index is listed alphabetically. Instead of an alphabetical list, MySQL uses B-trees to organize its indexes, which is quicker for its purposes (but would take a lot longer for a human). Using more indexes means using up more space (as well as the overhead of maintaining the index), so it's only really worth using indexes on columns that fulfil the above usage criteria. In your example, the id and blog_post_id columns both uses indexes ( PRIMARY KEY is an index too) so that the application can find them quicker. In the case of id , it is likely that this allows users to modify or delete a comment quickly, and in the case of blog_post_id , so the application can quickly find all comments for a given post. You'll notice that there is no index for the email column. This means that searching for all blog posts by a particular e-mail address would probably take quite a long time. If searching for all comments by a particular e-mail address is something you'd want to add, it might make sense to add an index to that too.
