[site]: crossvalidated
[post_id]: 326720
[parent_id]: 136362
[tags]: 
The key to efficiently generating poisson distributed events is to realize the any number of events that exist within any interval occur independently. In other words,the occurrence time of each event is uniformly distributed in the interval. Each of n events with average arrival rate of mu occur uniformly in the interval (0 to n/mu). Simply generate n events randomly in this interval. Then place them in an ordered array. Let mu equal the arrival rate per time interval. Let n equal the number of events to generated. The total time span is n/mu. The time distribution of events will approximate the Poisson distribution as n approaches infinity. In Python the algorithm is as follows: #generate 10000 events with a mu of 5.0 events per unit time import random #n is the number of events to generate. mu=5.0 n=10000 #time span is n/mu time_span=n/mu events=[] #place n events uniformly distributed and place in array events. for j in range(0,n) : events.append(random.random()) #sort the array events.sort() #at this point the events array contains n events distributed from #(0.0 to 1.0). The next step is to scale the timing of all events by multiplying #by n/mu which is the total time span of events. for j in range(0,n) : events[j]*=time_span #The events array now contains an array of event times which are approximate the #Poisson distribution with a mean arrival rate of mu per time interval. #This has been tested using a chi squared test and closely approximates the #Poisson Distribution.
