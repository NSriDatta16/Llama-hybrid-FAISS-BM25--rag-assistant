[site]: crossvalidated
[post_id]: 632010
[parent_id]: 
[tags]: 
What is the correct implementation of MCMC

I am learning Markov Chain Monte Carlo (MCMC) simulation as of the moment. My background is civil engineering and please excuse my ignorance if some of the questions are quite obvious. I want to learn MCMC and implement it into my matlab code. To test my understanding, I want to perform an MCMC with an analytical solution based from conjugate pair. $$f(p|x)=\frac{f(p)f(x|N,p)}{\int_0^1{f(p)f(x|N,p)}dr}$$ Basically, I want to infer the probability $p\in [0,1]$ based from new data $x$ given $N$ trials. I used the beta-binomial conjugate pair as a test example prior: $f(p) = Beta(1,1)$ likelihood: $f(x|N,p) = Bin(x,N,p)$ Posterior: $f(p|x) = Beta(x+1,N-x+1)$ I provided my code below. This is how I implemented my metropolis algorithm of MCMC: Initialize a value for the quantity of interest/parameter $p_0$ I draw a candidate $\xi$ from a proposal distribution of uniform distribution $U(0,1)$ Calculate acceptance rate $\alpha = \min\{1, \frac{\pi(\xi)}{\pi(p_k)}\}$ . Accept candidate if random $r\leq\alpha$ such that $p_{k+1}=\xi$ else reject the sample such that $p_{k+1}=p_k$ Repeat steps 2 to 4 for $N$ iterations Take note my target distribution is $\pi(p) = Bin(148,150,p)\times Beta(1,1)$ My question is: a) How to choose a correct proposal distribution? In my understanding, the proposal distribution should be dependent from the candidate value $f^{*}(p_k|\xi)$ but the one I used is only uniform distribution from 0 to 1 which does not depend from the previous of value of $p$ . I have seen other codes/scripts that draws candidate from a normal distribution with mean value dependent from the previous value $Normal(p_{k+1},\sigma)$ . But this does not work for my case because it will draw samples greater than 1. How do I choose a correct proposal distrbution? clc, clear; format compact; format shortG; %%%%%%%%%%%%%%%%%%%%%%%%%%% % MCMC %%%%%%%%%%%%%%%%%%%%%%%%%%% N = 100000; seed = 0; rng(seed); samples = []; x0 = 0.5; sigma = 4; % Metropolis algorithm samples = [samples, x0]; for k = 1:N k % generate candidate value from proposal function of U(0,1) candidate = rand; % calculate probability of accepting the candidate alpha = min(1, target_prob(candidate)/target_prob(samples(end)) ); % determine whether to accept or reject if rand
