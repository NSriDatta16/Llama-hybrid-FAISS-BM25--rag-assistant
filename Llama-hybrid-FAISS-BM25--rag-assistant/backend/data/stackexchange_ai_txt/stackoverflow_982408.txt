[site]: stackoverflow
[post_id]: 982408
[parent_id]: 981830
[tags]: 
DeMorgan by itself may be totally irrelevant in the presence of short circuit evaluation. return !(exp1 || exp2); return !exp1 && !exp2; get compiled to if( exp1 ) return !(true); else return !(exp2); if(!(!exp1)) return false; else return !(exp2); with the not s canceled and constants folded, these are identical. The more important case is order of evaluation; put cheep things that are likely to trigger short circuits at the front of expressions. The compiler can't optimize this for you because it is hard for it to detect semantic issues like side effects or if later expression make assumptions based on earlier ones: return validState() && checkAssumuingValidState();
