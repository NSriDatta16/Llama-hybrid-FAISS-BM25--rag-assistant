[site]: stackoverflow
[post_id]: 3759397
[parent_id]: 3758891
[tags]: 
Have a look at the Transaction Script and PageController patterns. Transaction script is the most basic of the Domain Logic patterns and suited for small applications. A PageController's purpose is to handle input from your UI. If you want that to be a single command, that's okay. You could do class PostAddController implements RequestHandler { public function handle($request) { $post = filter_input(INPUT_POST, 'post', FILTER_SANITIZE_SPECIAL_CHARS); $model = new PostAddTransactionScript; $model->process($post); include 'postAddViewScript.php'; } } PostAddTransactionScript would then write the $postData to the database or whatever it is supposed to do. The simplified example above would still be in accordance to MVC because it keeps the Model logic inside the transaction script and the input handling inside the presentation layer. Whether you organize your input handling logic into a single Controller class or many smaller commands is up to you. Grouping responsibilities just makes more sense, especially if you need to share state or common functionality between the Commands. As for your example, I'd rather use the Strategy Pattern and have the Post_Parent use a Command instead of the command using the Parent, e.g. $commander = new PostCommander; $commander->setStrategy(new PostAddCommand); $commander->handle($_POST); In any case, I agree with the others that your controllers should be thin and the model should do the main work.
