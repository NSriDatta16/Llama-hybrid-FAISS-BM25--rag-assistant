[site]: stackoverflow
[post_id]: 4738593
[parent_id]: 4738533
[tags]: 
Here is the catch: I don't want to have to call some function in each setter because I don't want the devs to have to implement code each time(because they could make a mistake and miss a property). There are two options I could see. If your type implements INotifyPropertyChanged , you could subscribe to the object's PropertyChanged event and use this to track for changes. Otherwise, if you want to implement this with no changes to the code of the properties , external change tracking would be required. You could make a method that used Reflection (or potentially PropertyDescriptors ) to grab the value of each property, and later, compare it to the current values to determine if that object is "dirty". This is not an inexpensive operation, however. Another, potentially more elegant, option would be to use Aspect Oriented Programming to add the code to each property automatically at compile time. PostSharp could be made to handle this fairly easily, for example.
