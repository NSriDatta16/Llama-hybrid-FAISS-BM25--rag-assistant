[site]: stackoverflow
[post_id]: 675184
[parent_id]: 675117
[tags]: 
Some brands of database (e.g. Oracle, Microsoft SQL Server) support extra SQL syntax to run "recursive queries" but MySQL does not support any such solution. The problem you are describing is the same as representing a tree structure in a SQL database. You just have a long, skinny tree. There are several solutions for storing and fetching this kind of data structure from an RDBMS. See some of the following questions: " What is the most efficient/elegant way to parse a flat table into a tree? " " Is it possible to make a recursive SQL query ? " Since you mention that you'd like to limit the "depth" returned by the query, you can achieve this while querying the list this way: SELECT * FROM mytable t1 LEFT JOIN mytable t2 ON (t1.next_id = t2.id) LEFT JOIN mytable t3 ON (t2.next_id = t3.id) LEFT JOIN mytable t4 ON (t3.next_id = t4.id) LEFT JOIN mytable t5 ON (t4.next_id = t5.id) LEFT JOIN mytable t6 ON (t5.next_id = t6.id) LEFT JOIN mytable t7 ON (t6.next_id = t7.id) LEFT JOIN mytable t8 ON (t7.next_id = t8.id) LEFT JOIN mytable t9 ON (t8.next_id = t9.id) LEFT JOIN mytable t10 ON (t9.next_id = t10.id); It'll perform like molasses, and the result will come back all on one row (per linked list), but you'll get the result.
