[site]: stackoverflow
[post_id]: 5110918
[parent_id]: 3846636
[tags]: 
There are several things you need to know to make sense of it: It is an anonymous function, which simply means it does not have a name. The function is called immediately after it is declared. You see the open parenthesis on line 2, immediately after the function definition? That means, "call this function". Only one parameter is passed to the function. That parameter is "window", which is the name of the global scope inside of a browser. The function being called actually expects *2* parameters, but we're calling it with one. Javascript lets you call functions with more or fewer parameters than the function actually expects. There are ways of getting to the list of parameters that was passed. Since we are only passing one parameter, the second parameter will automatically be set to "undefined". "undefined" is a special javascript value that means, get ready, "undefined". It just so happens that we have also named our second parameter with the name "undefined". So in effect, we have created a local variable (parameters are very much like local variables) that is named undefined, and whose value is undefined. Why on Earth did we do that? It is a way of ensuring that, within our anonymous function, if we refer to "undefined", it really will have the value of "undefined". If we didn't do that, and some crazy code outside of our scope redefined "undefined" (by saying something like "undefined = 42"), then we'd write code thinking we were referring to undefined but we'd actually be referring to 42. These shenanigans with passing 1 parameter but expecting 2, and calling the second one undefined, protects us from such nonsense. I hope that's clear, let me know if it is not. I learned all that from Paul Irish's video mentioned above.
