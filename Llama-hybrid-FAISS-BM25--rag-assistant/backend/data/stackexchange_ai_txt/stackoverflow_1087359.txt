[site]: stackoverflow
[post_id]: 1087359
[parent_id]: 1087317
[tags]: 
Personally, I've found setup and teardown aren't always evil, and that this line of reasoning is a bit dogmatic. But I have no problem calling them a code smell for unit tests. I feel their use should be justified, for a few reasons: Test code is procedural by its nature. In general, setup/teardown do tend to reduce test readability/focus. Setup methods tend to initialize more than what is needed for any single test. When abused they can become unwieldy. Object Mothers, Test Data Builders, perhaps frameworks like FactoryGirl seem better at initializing test data. They encourage "context bloat" - the larger the test context becomes, the less maintainable it will be. To the extent that my setup/teardown doesn't do this, I think their use is warranted. There will always be some duplication in tests. Neal Ford states this as "Tests can be wet but not soaking..." Also, I think their use is more justified when we're not talking about unit tests specifically, but integration tests more broadly. Working on my own, this has never really been a problem. But I've found it very difficult to maintain test suites in a team setting, and it tends to be because we don't understand each other's code immediately, or don't want to have to step through it to understand it. From a test perspective, I've found allowing some duplication in tests eases this burden. I'd love to hear how others feel about this, though.
