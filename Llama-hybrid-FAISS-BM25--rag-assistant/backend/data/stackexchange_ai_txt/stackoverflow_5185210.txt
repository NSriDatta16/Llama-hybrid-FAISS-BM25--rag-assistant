[site]: stackoverflow
[post_id]: 5185210
[parent_id]: 5181368
[tags]: 
The purpose of batch processing is to break down what you are trying to do into small units of work that can be processed individually (sequentially or in parallel). Spring batch is a framework that provides you with a flexible mechanism built on top of Spring that allows you to perform batch style processing. Based on your requirements, you can configure Spring batch to execute in many different ways. The chunk oriented processing you mentioned is but one way that Spring batch can be used. If I look at the information you provided, here are the elements of your application as I see them: read records from database that need to be processed process the records, which results in a db #2 being updated mark records as processed write record to processed file You will notice that I rearranged the order of events a little. The logic as I described is something well suited for batch-style processing. Here is an example of how you could manage this processing with Spring batch: Retrieve records from database to be processed. The retrieval would be done through a custom database retriever. These records will be used as a record selector by Spring Batch. You would then configure Spring batch to iterate over this list. You would configure the next step of Spring batch to process each of the records retrieved in step 1. This processing would consist of processing an individual record and writing the results to the second db. Your final step would be to conclude the processing of an individual record. As with most Spring frameworks, there are many different ways you can configure when this occurs. This final step would perform two functions: update record in db #1 as processed and write the processed record to the output file. The writing of the output file could be performed as a step 4 on completion of the overall batch process, where you would look at the records marked as processed during the current run and write the data as necessary. Spring batch does let you configure how transactions are managed throughout its processing, so you could configure a transaction that goes across all the actions and if the file write fails, then it can be configured to rollback the rest of the database operations. With this approach, you could process the records sequentially, in parallel, etc.. However, all of this assumes that you can break up the data into smaller units of work. If that is not the case, then batch processing is not really something that can be performed as you only have one process. I'd like to say there is an easy answer to decide whether to use Spring batch or not. It is a platform that lets you do a lot of things. Along with that flexibility it does have a relatively high learning curve. Hope this helps.
