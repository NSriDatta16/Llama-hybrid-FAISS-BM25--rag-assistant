[site]: stackoverflow
[post_id]: 257890
[parent_id]: 257873
[tags]: 
While I cant point toward any existing system directly, there are massive amounts of legacy enterprise systems written pre-OO COBOL. Many classic 4GL programs are procedural and are aimed at high integrity systems engineering. Some are well written, others not so much. Books include "COBOL from Micro to Mainframes", "Enterprise COBOL Programming Guide." Structural tips on good imperative code are similar to OO techniques: name things well, seperate your concerns, dont repeat yourself, single responsibility principle, dont leave broken windows unmended. In fact I'd simply suggest reading the "Pragmatic Programmer" would give most people the right idea in any paradigm. As far as a compelling reason for moving to OO for business oriented applications; procedural languages allow for a transaction script approach to domain logic, whereas OO languages allow for the domain model approach. Certainly for simple exercises, there is no real need for the use of OO languages, but as soon as complexity rises, the maintainability of OO languages wins over procedural languages low overhead.
