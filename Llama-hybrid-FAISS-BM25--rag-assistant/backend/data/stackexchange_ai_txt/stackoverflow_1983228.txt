[site]: stackoverflow
[post_id]: 1983228
[parent_id]: 1982700
[tags]: 
originally my plan was to have the 'thumbnail' on the left with the 'item' next to it, but from playing around with the SDK today it appears too difficult or impossible to achieve this It is far from impossible, but it will be tedious to get right, unless you use something that already wraps up that pattern for you (and that hopefully is reasonably "right"). On the Web, performance/bandwidth issues were the user's problem -- in mobile, they're your problem. as it appears to be much more than a line of code which I will need to deserialize (I think that's the right word) the JSON new JSONObject(data) is one line of code. Now, fetching the JSON, which I presume you are doing from the aforementioned URL, will be several lines of code. Neither the parsing of the JSON nor the fetching of it off the Internet is unique to Android -- all of that would look the same on a desktop Java app, or a Java servlet, or whatever. apart from the JSONArray/JSONObject script I have which doesn't like the fact that items_last_week is nested I have not had a problem parsing JSON with structures like your file exhibits. Moreover, this is hardly unique to Android -- the JSON parser is used in many other Java-based projects. and takes an awful long time to run on the Android emulator The speed of the emulator is tied to the speed of your development machine. For me, the emulator is usually slower than actual phone hardware...and my desktop is a quad-core. Bear in mind that the emulator is pretending to be an ARM chipset running on your PC, converting ARM opcodes into x86 opcodes on the fly, so it's not going to be fast and won't leverage multiple cores very well. So, in effect, I need a (preferably simple) way to pass the items_last_week data to a ListView. There is nothing really built into Android to take an arbitrary JSON structure, with arbitrary data, and directly pour it into a ListView . This is not unique to JSON -- XML would exhibit similar phenomenon. Your choices are: Create a custom ListAdapter that wraps the parsed JSON. Convert the parsed JSON into a MatrixCursor (think 2D array of data) and use a SimpleCursorAdapter . Convert the parsed JSON into an ArrayList and use an ArrayAdapter . For the short term, option #3 is probably the simplest. I understand I will need a custom adapter which I can probably get my head around but I cannot understand, no matter how much of the day I've just spent trying to figure it out, how to access certain parts of a JSON string.. And that question is too vague for much in the way of assistance. You might consider opening up a separate question, tagged for Java and JSON, where you get into the details of where you are having problems with the json.org parser.
