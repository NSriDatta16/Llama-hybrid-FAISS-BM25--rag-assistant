[site]: stackoverflow
[post_id]: 5031659
[parent_id]: 5031437
[tags]: 
I might be slightly off-topic but I just wanted to put my two cents in about the repository pattern. The repository pattern is great, especially when you put them all behind interfaces so that they can be swapped out easily. I create a repository for every entity. BrokenGlass is right in that the methods are usually very generic and don't contain much beyond persistence logic. I am usually a little less strict with the type of logic that makes it into a repository. For instance, some people think it is sinful to put paging logic in a repository, but I disagree. I use Entity Framework and LINQ to SQL quite a bit. In order to page results from these I need the LINQ to operate on IQueryable so that the paging happens at the database level. I do not like to expose IQueryable outside of my repository. Because what if someday my repository needs to be rewritten and the data storage can no longer utilize IQueryable ? So rather than returning this from my repository: IQueryable GetEntities(); ...and paging the results in my controller, or elsewhere in my application. I instead do this: IEnumerable GetEntities_byPage(int page); ...and I do the paging logic in the repository so that it can be translated into an expression at the data source. I think your repositories should return some fairly tailored data, instead of just a raw data dump that your controller has to clean up (usually after loading it all into memory first, YECK!).
