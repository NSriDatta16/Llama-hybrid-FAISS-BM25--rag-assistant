[site]: stackoverflow
[post_id]: 3400756
[parent_id]: 3399781
[tags]: 
Just to expand on some of the other lists here, these are a few Perl constructs that are probably very clumsy in python (if possible). dynamic scope (via the local keyword) typeglob manipulation (multiple variables with the same name) formats (they have a syntax all their own) closures over mutable variables pragmas lvalue subroutines ( mysub() = 5; type code) source filters context (list vs scalar, and the way that called code can inspect this with wantarray ) type coercion / dynamic typing any program that uses string eval The list goes on an on, and someone could try to create a mapping between all of the analogous constructs, but in the end it will be a failure for one simple reason. Perl can not be statically parsed. The definitions in Perl code (particularly those in BEGIN blocks) change the way the compiler is going to interpret the remaining code. So for non-trivial programs, conversion from Perl => Python suffers from the halting problem. There is no way to know exactly how all of the program will be compiled until the program has finished running, and it is theoretically possible to create a Perl program that will compile differently every time it is run. Meaning that one Perl program could map to an infinite number of Python programs, the correct of which is only know after running the original program in the perl interpreter.
