[site]: stackoverflow
[post_id]: 3798494
[parent_id]: 
[tags]: 
iPhone meets Twitter implementation recieves NSURLErrorDomain error

I have implemented MGTwitterEngine in my application and it works near to perfect. The first "weird" thing that happends when I push the UIViewController where the Twitter form is, I recieve this in the Console: This app was previously authorized for a Twitter account so you can press the second button to send a tweet now. Should I hide the login form or what is your recommendation? The second "weird" thing that happends is when I the press the "Send tweet"-button it works and the message is posted on Twitter. But , I recieve an error message in the method: - (void) twitterXAuthConnectionDidFailWithError: (NSError *)error; And the error message is: Error Domain=NSURLErrorDomain Code=-1012 "The operation couldn’t be completed. (NSURLErrorDomain error -1012.)" UserInfo=0xde3edf0 {NSErrorFailingURLKey=https://api.twitter.com/oauth/access_token, NSErrorFailingURLStringKey=https://api.twitter.com/oauth/access_token, NSUnderlyingError=0xde430c0 "The operation couldn’t be completed. (kCFErrorDomainCFNetwork error -1012.)"} Which I find strange, because the twitter message is posted. But I recieve that error message anyway. I have looked into the application settings in the Twitter control panel. The access type is "Read & Write". Anyone familiar with this problem? The delegate methods i've implemented are these: #pragma mark XAuthTwitterEngineDelegate methods - (void) storeCachedTwitterXAuthAccessTokenString: (NSString *)tokenString forUsername:(NSString *)username { NSLog(@"Access token string returned: %@", tokenString); [[NSUserDefaults standardUserDefaults] setObject:tokenString forKey:kCachedXAuthAccessTokenStringKey]; // Enable the send tweet button. [loadingIndicator stopAnimating]; self.sendTweetButton.enabled = YES; } - (NSString *) cachedTwitterXAuthAccessTokenStringForUsername: (NSString *)username; { NSString *accessTokenString = [[NSUserDefaults standardUserDefaults] objectForKey:kCachedXAuthAccessTokenStringKey]; NSLog(@"About to return access token string: %@", accessTokenString); return accessTokenString; } - (void) twitterXAuthConnectionDidFailWithError: (NSError *)error; { NSLog(@"Error: %@", error); [loadingIndicator stopAnimating]; self.sendTweetButton.enabled = TRUE; } #pragma mark - #pragma mark MGTwitterEngineDelegate methods - (void)requestSucceeded:(NSString *)connectionIdentifier { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sent!" message:@"The tweet is sent!" delegate:self cancelButtonTitle:nil otherButtonTitles:@"Okay", nil]; [alert setTag:0]; [alert show]; [alert release]; [loadingIndicator stopAnimating]; self.sendTweetButton.enabled = TRUE; }
