[site]: stackoverflow
[post_id]: 3276276
[parent_id]: 3275287
[tags]: 
First, to make sure that you Restlet uses Apache's HttpClient for connections, you need to have org.restlet.ext.httpclient.jar on the classpath. Second, Are you passing a Context into the constructor of your ClientResource ? If not you will need to: final Context context = new Context(); context.getParameters().set("maxConnectionsPerHost", "20"); final ClientResource requestResource = new ClientResource(context, "http://localhost:8182/request"); requestResource.getClientInfo().setAgent("Example-Client/1.0"); That takes care of the maxConnectionsPerHost setting you are interested in. Also, calling setAgent was working as expected for me. I'm not sure what could be the problem in your instance. Regarding persistent connections, it seems that HttpClient takes care of that for you. Restlet utilizes HttpClient's ThreadSafeClientConnManager described here . It mentions support for persistent connections at that link. It seems that this object will also take care of your pooling concerns. You would want to reuse the same instance of ClientResource to take advantage of this. I'm not immediately aware of ClientResource 's thread-safety policy but I would hope that it is thread-safe.
