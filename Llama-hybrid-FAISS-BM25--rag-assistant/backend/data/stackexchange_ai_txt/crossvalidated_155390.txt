[site]: crossvalidated
[post_id]: 155390
[parent_id]: 154378
[tags]: 
remark: this is more a comment than an answer. Here is a script which tries to reproduce, how the Stata solution are calculated. Indeed it seems to be -different from the solution by SPSS- a transformation on the Eigenvectors (and more specifically: on their Kaiser-normalization over the first 3 eigenvectors) rather than on the PCA-components like in SPSS. Here is my calculation using my matrix-calculator-software MatMate ;****** MatMate Version 0.1410 Beta ***************************** // first part of posted data (via clipboard) Eigenvectors (your first protocol) // of Stata- computations clp = csvdatei("clip") eig_lad = clp[*,1..3] // the first 3 columns: these are obviously eigenvector-values | 0,2700 0,3901 -0,1477 | | 0,3298 0,2303 -0,4027 | | -0,3046 0,3149 0,1773 | | 0,3489 0,1910 0,0700 | | 0,3342 0,2067 0,2720 | | -0,2001 0,4561 -0,1587 | | 0,3057 0,3128 0,1531 | | -0,3611 0,2180 0,2913 | | 0,2352 -0,2211 0,3662 | | -0,1556 0,3894 0,4578 | | 0,3239 0,0525 0,0754 | | 0,2091 -0,2445 0,4720 | uniq = clp[*,4] // "not-explained" = unique (unexplained by 3 eigenvectors) variances // (= squared values, not loadings) | 0,4779 | | 0,3129 | | 0,4642 | | 0,4715 | | 0,4202 | | 0,5227 | | 0,4728 | | 0,3280 | | 0,5588 | | 0,4457 | | 0,5832 | | 0,4839 | // second part of posted data (via clipboard) : first three eigenvalues pca_ssl = csvdatei("clip") // "ssl" means "sum of sqauares of loadings" | 3,8723 1,4068 1,1791 | // check whether the "unique" variance is really the non-explained // variance by the first 3 eigenvectors/PCA-components: chk = sumzl( eig_lad ^# 2 *# pca_ssl ) + uniq // the squared pca-loadings (eigenvectors^2 scaled by eigenvalues) // plus the unique variance should sum up to 1-variance for each row (=item) | 1,0000 | | 0,9999 | | 1,0000 | | 1,0000 | | 1,0000 | | 1,0001 | | 1,0000 | | 0,9998 | | 0,9999 | | 0,9999 | | 1,0000 | | 1,0000 | // get the rotationmatrix to bring the "Kaiser"-normalized loadings to Varimax // note that SPSS computes this based on the PCA-loadings, not on Eigenvector-values t = gettrans(normzl(eig_lad ),"varimax") // "normzl( )" // provides Kaiser-normalization per row // (of course here in Stata based on eigenvectors) // rotation-/transformation-matrix "t" from pca to varimax coordinates | 0,7942 -0,5573 0,2421 | | 0,5724 0,5523 -0,6062 | | 0,2041 0,6200 0,7576 | vmx_lad = eig_lad * t // this computes the Stata - varimax-coordinates | 0,4580 -0,0065 -0,1926 | | 0,4012 -0,2970 -0,2735 | | -0,0305 0,4428 -0,1625 | | 0,3898 -0,0107 0,1051 | | 0,3884 0,1409 0,2402 | | 0,1409 0,2473 -0,4385 | | 0,4351 0,1348 0,0853 | | -0,1363 0,4913 -0,0528 | | 0,0370 0,0087 0,4867 | | 0,1310 0,6026 0,0716 | | 0,2815 -0,0738 0,1693 | | 0,0018 0,0790 0,5657 | vmx_ssl = sqsumsp((pca_ssl *# sqrt(pca_ssl#)) *t) // sums of squares of the varimax-rotated princ. components (not eigenvectors!) | 2,9522 2,0849 1,4207 | // =============== The SPSS-solution ========================= eig_lad = clp[*,1..3] // the first 3 columns: these are obviously eigenvector-values spss_pca_lad = eig_lad *# sqrt(pca_ssl#) // compute pca-loadings from eigenvectors spss_t = gettrans(normzl(spss_pca_lad ),"varimax") // "normzl( )" spss_vmx_lad = spss_pca_lad * spss_t // this computes the SPSS - varimax-coordinates | 0,7047 -0,0983 -0,1260 | | 0,6731 -0,4479 -0,1827 | | -0,2184 0,6266 -0,3091 | | 0,6710 -0,1473 0,2377 | | 0,6606 0,0244 0,3780 | | 0,0474 0,3785 -0,5761 | | 0,6989 0,0358 0,1935 | | -0,3776 0,6975 -0,2066 | | 0,1846 -0,1019 0,6298 | | 0,0624 0,7418 -0,0018 | | 0,5276 -0,2131 0,3050 | | 0,1273 -0,0160 0,7068 | spss_vmx_ssl = sqsumsp(spss_vmx_lad) // the SPSS-"variances" of the vmx-factors | 2,8498 1,8626 1,7455 | Since all coordinates and also the transformation/rotationmatrix seem to be reproduced correctly it seems this is indeed the internal computation of Stata and also of SPSS The difference reduced to the syntax/concept would be // Stata eig_lad = clp[*,1..3] // the first 3 columns: these are obviously eigenvector-values t = gettrans(normzl(eig_lad ),"varimax") // "normzl( )" vmx_lad = eig_lad * t // this computes the Stata - varimax-coordinates // SPSS eig_lad = clp[*,1..3] // the first 3 columns: these are obviously eigenvector-values spss_pca_lad = eig_lad *# sqrt(pca_ssl#) // compute pca-loadings from eigenvectors spss_t = gettrans(normzl(spss_pca_lad ),"varimax") // "normzl( )" spss_vmx_lad = spss_pca_lad * spss_t // this computes the SPSS - varimax-coordinates The rotation-criterion for the VARIMAX-concept seems to be different in both software-packets. While Stata computes the rotation-angles based on the unit-variance-normalized ("Kaiser-normalized") rows of the eigenvectors , does SPSS compute that rotation-angles based on the unit-variance-normalized ("Kaiser-normalized") rows of PCA-components , which are scalings of the eigenvectors by the square-roots of associated eigenvalues. This should -in most cases - result in different solutions.
