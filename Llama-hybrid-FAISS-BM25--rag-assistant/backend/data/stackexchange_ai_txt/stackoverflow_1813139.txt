[site]: stackoverflow
[post_id]: 1813139
[parent_id]: 1757985
[tags]: 
The term Round is a little ambiguous. BettingRound makes it more obvious. I don't see the need to have cards, name and potsize here. Potsize is a function of the actions and changes throughout the betting round. Seats represent the game a little better than a list of players does as this allows you to represent the game state (stack sizes etc.) a little more obviously. I don't see the need to make the flop, river cards explicitly assigned to rounds - just use a list of cards and some conventions. e.g. first three cards = flop... first betting round = flop. Use some extension methods for convenience of referring to the flop for holdem. Use the ulong version of cards via conversion when you need to use it rather than cluttering your domain model. This is how I see the model of a particular individual Game (i.e. 1 flop, river, turn etc.). There's still a bunch of work to do to model all games (e.g. limit games use small bet / big bet instead of blinds to define the stakes). public class Card { public Suit Suit; public Rank Rank; public ulong ToCardMask(); } public enum Suit { Clubs, Diamonds, Hearts, Spades } public enum Rank { Ace, Deuce, Trey, //... Jack, Queen, King } public class Game { public GameInfo GameInfo; public TableInfo TableInfo; public List BettingRounds; public List CommunityCards; public string Rawtext; public bool WithHero; //?? } public static class GameExtensions { public static BettingRound Flop(this Game game) { return game.BettingRounds[0]; } public static List FlopCards(this Game game) { return game.CommunityCards.Take(3).ToList(); } } public class GameInfo { public GameType GameType; public GameBettingStructure BettingStructure; // Limit, PotLimit, NoLimit public Stakes Stakes; // e.g. { $1, $2 } public long Id; public List Seats; } enum GameType // prob change to a class for extensibility { HoldEm, Razz, StudHi, StudHiLo, OmahaHi, OmahaHiLo } enum GameBettingStructure { Limit, PotLimit, NoLimit } class Stakes // probably needs some tweeking for stud games (e.g. bring-in ...) { public Money Ante; public List Blinds; } public class Seat { public Player Player; public Money InitialStackAmount; public Money FinalStackAmount; // convienience field can be calculated public List Hand; } class Money { public decimal Amount; public Unit Unit; } enum Unit { USD, EUR, AUD, TournamentDollars } public class Player { public string Name; } public class TableInfo { public string Name; } public class BettingRound { public List BettingActions; } public class BettingAction { public abstract Money PotSizeAfter(); public byte SeatNumber; } public class Fold : BettingAction { } public class Call : BettingAction { } public class BringIn : BettingAction { } public class Complete : BettingAction { } public class Bet : BettingAction { public Money Amount; } public class Raise : Bet { }
