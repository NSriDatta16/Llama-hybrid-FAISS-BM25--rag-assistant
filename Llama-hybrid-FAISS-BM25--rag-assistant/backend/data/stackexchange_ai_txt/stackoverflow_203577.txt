[site]: stackoverflow
[post_id]: 203577
[parent_id]: 
[tags]: 
Graphics.MeasureString returns different values than Win32 GetTextExtent

i've been trying to find a method in C# to measure the size of a string. The standard method to measure a string in Win32 is to use GetTextExtent. The real goal is to find the average width and height of a font character. The standard method to find the average width of a character starts from getting the width of all alphabetic characters and divide by 52: size = dc.GetTextExtent( "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", 52); averageWidth = size / 52; Microsoft has a page that lists the average character widths for some font sizes at certain DPI settings, and i've confirmed them by my own calls to GetTextExtent. Tahoma 8pt, 96dpi: 13x6 px Tahoma 9pt, 96dpi: 14x7 px Segoe UI 9pt, 96dpi : 15x7 px Now i want to perform the same calculations under .NET WinForms. Using Graphics.MeasureString() i come up with code: public static SizeF GetAvgCharSizeF(Graphics g, Font font) { String s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"; SizeF textSize = g.MeasureString(s, font); float baseUnitX = (textSize.Width / s.Length); float baseUnitY = textSize.Height; return new SizeF(baseUnitX, baseUnitY); } Unfortunatly the values do not match the known, accepted, true values: Tahoma 8pt, 96dpi: 14x6 px (14.21x6.09 px) Tahoma 9pt, 96dpi: 16x7 px (15.98x6.85 px) Segoe UI 9pt, 96dpi: 17x7 px (17.46x6.91 px) The average character widths turn out OK, but the character heights are too large by about 13%. i assume that the extra height is due to a difference in the classification of height having been changed to include ascenders and descenders. If the measuring string was measuring too tall, i tried changing it from: String s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"; to String s = "acemnorsuvwxyz"; thinking that now the string is not as tall, and so the measured Height should be shorter. Nope, it returns the exact same heights as the version of the string that included ascenders and descenders (although the average widths are slightly larger). What can be the cause of this, and can get the average character height what can be done to the average text height so that it matches the accepted values returned by GetTextExtent? Note: Even though the standard practice to get the average character height is to use GetTextMetrics, the height returned by GetTextExtents returns the same value.
