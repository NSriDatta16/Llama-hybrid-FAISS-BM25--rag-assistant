[site]: stackoverflow
[post_id]: 4318467
[parent_id]: 
[tags]: 
Should I be using interfaces like this?

I find myself in a situation where I want to use interfaces, but am second guessing myself. I'm writing an application to handle insurance applications. There is an Application object that holds all the data about the insurance application. This includes data about the person insured, the entity that will own the insurance policy, and the entity that will pay for the insurance coverage. I use the term entity because the policy can be owned (or paid for) by a Person or a Trust. I know when I'm dealing with an Owner or a Payor, but I don't necessarily know if that Owner or Payor is a Person or a Trust. I initially created the Owner interface to cut down on casting and instanceof-based logic. I planned to staple on the Payor interface, but am now second-guessing myself. That's probably all you need to know for now. Here's some code: public class Application{ private Person insured; private Owner owner; private Payor payor; ... } public interface Owner{ public void setAddress(Address address); public Address getAddress(); public void setId(String id); public String getId(); public void setPIN(String pin); public String getPIN(); } public interface Payor{ public void setAccount(Account account); public Account getAccount(); } public class Person implements Owner, Payor{ ... } public class Trust implements Owner, Payor{ ... } Am I on the correct path or should I be doing this differently? The thing that's giving me pause is the fact that not every Person will be an Owner or a Payor. As I think about it more, I feel like Owner and Payor aren't "behaviors" so much as "classifications." Does that make my use of interfaces here incorrect? If so, do you have any recommendations for alternate solutions? Preferably ones that allow me to continue using Persons and Trusts transparently as Owners and Payors? Part of my concern comes from less-familiar developers confusing a Person for an Owner like below. Application app = new Application(); Person timmy = new Person(); Owner smithFamilyTrust = new Trust(); Payor steve = new Person(); app.setInsured(timmy); app.setOwner(smithFamilyTrust); app.setPayor(steve); ... //this would run, but would be wrong if(timmy instanceof Owner){ //Do Owner Stuff. } //this would run, and be correct Owner owner = app.getOwner(); //Do Owner Stuff Edit to clarify "Owner Stuff" At this point, "owner stuff" is simple. Things like getting/setting the owner's id, PIN, or Address: //I want this app.getOwner().getId(); app.getOwner().getPIN(); app.getOwner().getAddress(); //I don't want this if(app.getOwner() instanceof Person){ Person owner = app.getOwner(); owner.getId(); owner.getPIN(); owner.getAddress(); } else if(app.getOwner() instanceof Trust){ Trust owner = app.getOwner(); owner.getId(); owner.getPIN(); owner.getAddress(); } Initially I thought I should go with some sort of Entity superclass and have Person and Trust extend that class, but they store and retrieve IDs and PINs differently. The different implementation of the same behavior led me to interfaces. I could still go with an Entity superclass, but I feel like I can't accurately represent a "generic" ID or PIN for that Entity class. I'd have to implement either Person's ID and PIN logic or Trust's ID and PIN logic, then override that in the other class. That feels wrong to me. I suppose Entity could be an abstract class that Person and Trust extend, but I'm not sure that's better than using an interface.
