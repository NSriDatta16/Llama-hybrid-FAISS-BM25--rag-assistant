[site]: stackoverflow
[post_id]: 5565652
[parent_id]: 5565537
[tags]: 
Elaborating a bit on my "make them a value type" comment above. If you have a struct Foo , then preparing for the algorithm with e.g. var storage = new Foo[1000000] will only allocate one big block of memory (I 'm assuming the required amount of contiguous memory will be available). You can then manually manage the memory inside that block to avoid performing more memory allocations: Keep a count of how many slots in the array are actually used To "create" a new Foo , put it at the first unused slot and increment the counter To "delete" a Foo , swap it with the one in last used slot and decrement the counter Of course making an algorithm work with value types vs reference types is not as simple as changing class to struct . But if workable it will allow you to side-step all of this overhead for an one-time startup cost.
