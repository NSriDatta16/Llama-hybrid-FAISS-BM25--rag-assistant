[site]: stackoverflow
[post_id]: 4556334
[parent_id]: 4555919
[tags]: 
tl;dr PHP/vBulletin/Mambo started before TDD went mainstream PHP allows the same mistakes to be made as Ruby does. In Java/C# the compiler will complain sometimes if you do something odd at compile-time, PHP/Ruby will do that only on run-time. So if you were to compare Ruby with Java, I might have replied that I see a little more necessity to write unit-tests for PHP/Ruby. Still I consider unit-testing important no matter what the language you use. On your findings: vBulletin (v3 development started in Dec 2002) and Mambo is nearly as old as jUnit (2000). Unit-testing (according what I can find) had its rise around the year 2000. SimpleTest/PHPUnit emerged in 2003/2004. So the devs of Mambo/vBulletin didn't use TDD back then. The structure of the written code won't have made it easy to add tests later on. Not to dishonor any PHP developers, PHP was pretty overrun by script-kiddies, pseudo-programmers, and beginners (me included). Everybody started from scratch, wrote his/her own CMS. The reference app were some snippets found around the web. I assume that a large chunk of the PHP dev community will never have heard of unit-testing or have understood what it's good for. Ruby was hyped much later (approx. 2007) than PHP (approx. 2000) was. It comes bundled with a lot of philosophy ("Whats good/readable/beautiful code?", "How should coding be done?"). Writing tests is somewhat a part of this philosophy. Most books on Ruby contain a section on unit-testing, explaining why it's good and necessary. Also Rails generates a set of (empty) tests for you automatically. You are encouraged to write tests all the time - it's hard not to.
