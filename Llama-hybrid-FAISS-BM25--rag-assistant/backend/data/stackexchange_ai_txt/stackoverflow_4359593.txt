[site]: stackoverflow
[post_id]: 4359593
[parent_id]: 4355998
[tags]: 
By convention, EF code first does not create a link table in typical one to many scenario, the reason that you are getting it is because your associations between Album and Photo objects has been taken by EF as being a kind of many to many association: Each album has a collection of Photos and also each Photo has a collection of Albums that this photo is a thumbnail for (although the related navigation property is not explicitly specified on Photo class and only Album has a Thumbnail property). Solution: As of EF CTP4, the only way to fix this is by leveraging Fluent API, but before that, I modify your model a little bit and add two explicit FKs to your model to give you ultimate flexibility to work with your objects. They are AlbumId on Photo and ThumbnailId on Album : public class Photo { public long Id { get; set; } public string Caption { get; set; } public string FileName { get; set; } public DateTime DateCreated { get; set; } public long AlbumId { get; set; } public virtual Album Album { get; set; } } public class Album { public long Id { get; set; } public string Name { get; set; } public string Location { get; set; } public DateTime DateCreated { get; set; } public long ThumbnailId { get; set; } public virtual Photo Thumbnail { get; set; } public virtual ICollection Photos { get; set; } } public class PhotoMap : EntityConfiguration { public PhotoMap() { this.HasRequired(p => p.Album) .WithMany(a => a.Photos) .HasConstraint((p, a) => p.AlbumId == a.Id); Property(x => x.FileName).IsVariableLength().HasMaxLength(255) .IsRequired(); Property(x => x.Caption).IsVariableLength().HasMaxLength(255); MapSingleType(p => new { p.Id, SiteAlbumId = p.AlbumId, p.FileName, p.Caption, p.DateCreated }) .ToTable("Photo"); } } public class AlbumMap : EntityConfiguration { public AlbumMap() { this.HasRequired(a => a.Thumbnail) .WithMany() .WillCascadeOnDelete(false) .HasConstraint((a, p) => p.Id == a.ThumbnailId); Property(x => x.Location).IsVariableLength().HasMaxLength(80); Property(x => x.Name).IsVariableLength().HasMaxLength(80).IsRequired(); MapSingleType(a => new { a.Id, a.ThumbnailId, a.Location, a.Name, a.DateCreated }) .ToTable("Album"); } } This results to the following desired schema:
