[site]: stackoverflow
[post_id]: 1376906
[parent_id]: 1376856
[tags]: 
Not easily possible. One of the great advantages of C over ASM apart from readability was that it prevented "clever" programing tricks. There are numerous things you can do in assembler that have no direct C equivalent, or involve tortuous syntax in C. The other problem is datatypes most assemblers essentialy have only two interchangeable datatypes: bytes and words. There may be some language constructs to define ints and floats etc. but there is no attempt to check that the memory is used as defined. So its very difficult to map ASM storage to C data types. In addition all assembler storage is essentially a "struct"; storage is layed out in the order it is defined (unlike C where storage is ordered at the whim of the runtime). Many ASM programs depend on the exact storage layout - to acheive the same effect in C you would need to define all storage as part of a single struct. Also there are a lot of absused instructions ( on olde worldy IBM manframes the LA, load address, instruction was regulary used to perform simple arithimatic as it was faster and didnt need an overflow register ) While it may be technically possible to translate to C the resulting C code would be less readable than the ASM code that was transalated.
