[site]: datascience
[post_id]: 46273
[parent_id]: 46270
[tags]: 
Are you saying you would like to predict 10 days ahead in this instance? If this is the case, the LSTM model is able to do this and iterating in the way you are suggesting is unnecessary and could give you unreliable results. For instance, consider a dataset whereby we are attempting to predict one-step ahead: # Training and Test data partition train_size = int(len(dataset) * 0.8) test_size = len(dataset) - train_size train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:] # reshape into X=t and Y=t+1 previous = 1 X_train, Y_train = create_dataset(train, previous) X_test, Y_test = create_dataset(test, previous) # reshape input to be [samples, time steps, features] X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1])) X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1])) # Generate LSTM network model = Sequential() model.add(LSTM(4, input_shape=(1, previous))) model.add(Dense(1)) model.compile(loss='mean_squared_error', optimizer='adam') model.fit(X_train, Y_train, epochs=100, batch_size=1, verbose=2) # Generate predictions trainpred = model.predict(X_train) testpred = model.predict(X_test) # Convert predictions back to normal values trainpred = scaler.inverse_transform(trainpred) Y_train = scaler.inverse_transform([Y_train]) testpred = scaler.inverse_transform(testpred) Y_test = scaler.inverse_transform([Y_test]) # calculate RMSE trainScore = math.sqrt(mean_squared_error(Y_train[0], trainpred[:,0])) print('Train Score: %.2f RMSE' % (trainScore)) testScore = math.sqrt(mean_squared_error(Y_test[0], testpred[:,0])) print('Test Score: %.2f RMSE' % (testScore)) In this batch of code, you can see that we have set the previous parameter equal to 1, meaning that the time step being considered by the model is t-1. In this particular instance, here are the training and test predictions compared to the actual series: Now, the same model is run, but this time the previous parameter is set to 10. In other words, the previous 10 days are being considered as one time step, and the model is forecasting for time t+10 in this instance. Here is another sample prediction comparing the test set with the actual. A fuller example of this is provided here : In this regard, my advice would be to define the time series you wish to forecast and then work off that basis. Using iterations only complicates the situation, and could even cause issues with prediction.
