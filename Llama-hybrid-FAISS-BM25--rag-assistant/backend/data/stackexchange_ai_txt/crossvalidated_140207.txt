[site]: crossvalidated
[post_id]: 140207
[parent_id]: 139218
[tags]: 
I don't know how to get the .55 value from the paper, either, but I do know a way to speed up your model so that you can make sure MCMC convergence is not the culprit. The key is to have a computation graph that can be updated easily during the MCMC steps. Here is a change to your model factory that speeds things up: def model_factory(list_data): df_data = pd.DataFrame(list_data, columns=['z','d','y']) N = df_data.shape[0] Z = pm.Bernoulli('Z', p=.5, value=df_data['z'].values, observed=True) C = np.empty(N, dtype=object) R = np.empty(N, dtype=object) d = np.empty(N, dtype=object) y = np.empty(N, dtype=object) D = np.empty(N, dtype=object) Y = np.empty(N, dtype=object) for m in range(N): C[m] = pm.DiscreteUniform('c%i' % m, lower=0, upper=3) R[m] = pm.DiscreteUniform('r%i' % m, lower=0, upper=3) """ Equation (2) """ @pm.deterministic(name='d%i' % m) def dm(Z=Z[m], C=C[m]): return np.where( ( (C==3) | ((Z == False) & (C==2)) | ((Z== True) & (C==1)) ) , .9999, .0001 ) d[m] = dm """ Equation (3) """ @pm.deterministic(name='y%i' % m) def ym(d=d[m], R=R[m]): return np.where( ( (R==3) | ((d == .0001) & (R==2)) | ((d== .9999) & (R==1)) ) , .9999, .0001 ) y[m] = ym D[m] = pm.Bernoulli('D%i'%m, p=d[m], value=df_data['d'].values[m].astype(bool), observed=True) Y[m] = pm.Bernoulli('Y%i'%m, p=y[m], value=df_data['y'].values[m].astype(bool), observed=True) @pm.deterministic def v_r_1(R=R,d=d): return float( sum(np.where( (R==1) , 1, 0 ) )) / N @pm.deterministic def v_r_2(R=R,d=d): return float( sum(np.where( (R==2) , 1, 0 ) )) / N """ Equation (4) """ @pm.deterministic def ACE(v_r_1=v_r_1, v_r_2=v_r_2): return (v_r_1 - v_r_2) return locals() I also like to make sure that PyMC is using an appropriate step method: arti_model = pm.MCMC(model_factory(arti_ds)) for i in range(1000): arti_model.use_step_method(pm.DiscreteMetropolis, arti_model.C[i]) arti_model.use_step_method(pm.DiscreteMetropolis, arti_model.R[i]) arti_model.sample(iter=30000, burn=10000, thin=10) With this faster model and longer chain, I find a mean ACE of .27, after 1-2 hours of computation. Too bad it is not 0.55. Here is the summary plot, which looks nice and converged:
