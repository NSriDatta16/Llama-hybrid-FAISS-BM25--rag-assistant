[site]: stackoverflow
[post_id]: 4998018
[parent_id]: 4997930
[tags]: 
This code looks strange - first of all, the constructor is never called by any of the internal functions and can't be called externally since it's private. It's not a singleton since singleton is actually meant to be created as an object, while this class is never is. You can, however, use code like this for creating compartmentalized global storage, if that is what you wanted to do. Here's a singleton for you: class Singleton { private static $me; private function __construct { /* something */ } public static getInstance() { if(empty(self::$me)) self::$me = new self; return self::$me; } } Here's improved 5.3+ singleton: class Singleton { private static $me; private function __construct { /* something */ } public static getInstance() { if(empty(self::$me)) self::$me = new static; return self::$me; } }
