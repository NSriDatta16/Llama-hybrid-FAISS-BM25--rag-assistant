[site]: stackoverflow
[post_id]: 5399171
[parent_id]: 
[tags]: 
Need elegant way to move orphan files from folder after paired files are moved with FileInfo class

I have a folder from which I'm moving pairs of related files (xml paired with pdf). Additional files could be deposited into this folder at any time, but the utility runs every 10 minutes or so. We could use the FileSystemWatcher class but for internal reasons we don't for this utility. I'm using the System.IO.FileInfo class to read all the files in the folder (will only be xml and pdf) during each run. Once I have the files in the FileInfo object, I iterate through the files, moving matches to a working folder. Once that is done, I want to move any files that were not paired, but are in the FileInfo object, to a failure folder. Since I can't seem to remove items from the FileInfo object (or I am missing something), would it be easier to (1) use a string array from Directory class .GetFiles, (2) create a Dictionary from the FileInfo object and remove values from that during iteration, or (3) is there a more elegant approach using LINQ or something else? Here is the code so far: internal static bool CompareXMLandPDFFileNames(FileInfo[] xmlFiles, FileInfo[] pdfFiles, string xmlFilePath) { string workingFilePath = xmlFilePath + @"\WORKING"; if (xmlFiles.Length > 0) { foreach (var xmlFile in xmlFiles) { string xfn = xmlFile.Name; //xml file name string pdfName = xfn.Substring(0,xfn.IndexOf('_')) + ".pdf"; //parsed pdf file name contained in xml file name foreach (var pdfFile in pdfFiles) { string pfn = pdfFile.Name; //pdf file name if (pfn == pdfName) { //move xml and pdf files to working folder... FileInfo xmlInfo = new FileInfo(xmlFilePath + xfn); FileInfo pdfInfo = new FileInfo(xmlFilePath + pfn); if (!File.Exists(workingFilePath + xfn)) { xmlInfo.MoveTo(workingFilePath + xfn); } if (!File.Exists(workingFilePath + pfn)) { pdfInfo.MoveTo(workingFilePath + pfn); } } } } //all files in the file objects should now be moved to working folder, if not, fix orphans... } return true; }
