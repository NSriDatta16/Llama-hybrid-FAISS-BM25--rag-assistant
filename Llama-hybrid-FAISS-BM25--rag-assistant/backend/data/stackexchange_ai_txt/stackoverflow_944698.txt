[site]: stackoverflow
[post_id]: 944698
[parent_id]: 944558
[tags]: 
Yes, require_once() comes with CPU and memory overhead, but not in any way significant to performance. In fact, it's a very efficient operation because PHP just does one hashtable lookup to decide whether that file has already been parsed or not. Don't give yourself any unnecessary headaches with hacks like your !defined('FOOBAR') example, because it does the same thing only with less elegance. What takes time during a PHP request is the file path lookup and then the subsequent parsing step. The amount of resources needed for the runtime to determine whether you've already parsed the file before is negligible. There are a few things you can do to make your request run faster: avoid unecessarily long search path in include() and require() use absolute include paths were possible include stuff only as needed cache large output fragments cache complex query results write terse code, offload seldom-used functionality to included-on-demand source files If you're using a code cache or some kind of runtime optimizer, read the manual - they have different strategies that can actually hurt performance or introduce bugs depending on your code. One final advice: beware premature optimization! Requests taking between 0 and 50 miliseconds on the server are practically not distinguishable on the user side.
