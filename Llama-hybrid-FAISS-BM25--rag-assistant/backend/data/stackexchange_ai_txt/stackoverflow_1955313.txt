[site]: stackoverflow
[post_id]: 1955313
[parent_id]: 1114883
[tags]: 
The accepted answer from Wouter was a good start, but doesn't handle unicode characters. I modified the example code to work with unicode (html and text data). Also fixed memory leak. function FormatHTMLClipboardHeader(HTMLText: UTF8String): UTF8String; const CrLf = #13#10; begin Result := 'Version:0.9' + CrLf; Result := Result + 'StartHTML:-1' + CrLf; Result := Result + 'EndHTML:-1' + CrLf; Result := Result + 'StartFragment:000081' + CrLf; Result := Result + 'EndFragment:°°°°°°' + CrLf; Result := Result + HTMLText + CrLf; Result := UTF8String( StringReplace( string(Result), '°°°°°°', Format('%.6d', [Length(Result)]), []) ); end; //The second parameter is optional and is put into the clipboard as CF_HTML. procedure CopyHTMLToClipBoard(const str: String; const htmlStr: String = ''); var gMem : HGLOBAL; lp : Pointer; HString : UTF8String; begin {$WARN SYMBOL_PLATFORM OFF} Win32Check(OpenClipBoard(0)); try Win32Check(EmptyClipBoard); if ( htmlStr <> '' ) then begin // convert to utf8 and add header, which windows html clipboard format requires HString := FormatHTMLClipboardHeader( UTF8String( htmlStr ) ); //an extra "1" for the null terminator gMem := GlobalAlloc(GMEM_DDESHARE + GMEM_MOVEABLE, Length(HString) + 1); {Succeeded, now read the stream contents into the memory the pointer points at} try Win32Check(gmem <> 0); lp := GlobalLock(gMem); Win32Check(lp <> nil); CopyMemory(lp, Pointer( HString ), Length( HString ) + 1); Win32Check(gmem <> 0); SetClipboardData( RegisterClipboardFormat( 'HTML Format' ), gMem); Win32Check(gmem <> 0); finally GlobalUnlock(gMem); GlobalFree(gMem); end; end; // Now just place plain unicode text, double buffer size as it's utf16 gMem := GlobalAlloc(GMEM_DDESHARE + GMEM_MOVEABLE, ( Length(str) + 1 ) * 2); {Succeeded, now read the stream contents into the memory the pointer points at} try Win32Check(gmem <> 0); lp := GlobalLock(gMem); Win32Check(lp <> nil); CopyMemory(lp, Pointer( str ), ( Length( str ) + 1 ) * 2); Win32Check(gmem <> 0); SetClipboardData( CF_UNICODETEXT, gMem); Win32Check(gmem <> 0); finally GlobalUnlock(gMem); GlobalFree(gMem); end; finally Win32Check(CloseClipBoard); end; {$WARN SYMBOL_PLATFORM ON} end;
