[site]: stackoverflow
[post_id]: 3206795
[parent_id]: 
[tags]: 
A recursive backtracking problem

Ok, the real problem is slightly more complicated because it uses some classes that I've written instead of Strings, but it can be imagined like this: If you have a list of 700ish 3-letter words, how can I find every combination that can be formed by linking 5 of these words together by their first and last letters, i.e., CAT TOW WAR RAD DOG would be a success but so would CAT TOW WAR RAG GOD, and so on. So far I have something like this: for(int i = 0; i unused, ArrayList used, String result){ if(result.size() >= 15) return result; else{ if(result.canAdd(toAdd)) result.add(toAdd); used.add(toAdd); return chainMaker(unused.remove(0), unused, used, result); } return result; } But this just keeps adding the producing rubbish. I'm terrible at recursive backtracking and I think that if I can just make this example work, I'll finally understand this concept. Please help me smart people!
