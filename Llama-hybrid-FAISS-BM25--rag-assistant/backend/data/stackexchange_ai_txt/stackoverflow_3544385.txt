[site]: stackoverflow
[post_id]: 3544385
[parent_id]: 3519501
[tags]: 
I couldn't find the solution I was looking for, but here's what I came up with in the end. I wanted to keep the solution simple and configurable within the TFS arguments while at the same time staying in line with the already provided MSBuildArguments method which has been promoted a lot. So I created a new Build Template, and added a new TFS WorkFlow Argument called MSBuildArguments2 in the Arguments tab of the WorkFlow. I searched through the BuildTemplate WorkFlow for all occurances of the MSBuildArguments (there were two occurances). The two tasks that use MSBuildArguments are called Run MSBuild for Project . Directly below this task, I added a new "If" block with the condition: Not String.IsNullOrEmpty(MSBuildArguments2) I then copied the "Run MSBuild for Project" task and pasted it into the new If's "Then" block, updating its title accordingly. You'll also need to update the new Task's ConmmandLineArguments property to use your new Argument. CommandLineArguments = String.Format("/p:SkipInvalidConfigurations=true {0}", MSBuildArguments2) After these modifications, the WorkFlow looks like this: Save and Check In the new WorkFlow. Update your Build Definition to use this new WorkFlow, then in the build definition's Process tab you will find a new section called Misc with the new argument ready to be used. Because I'm simply using this new argument for deployment, I copied the exact same arguments I used for MSBuild Arguments and updated the MSDeployServiceURL to my second deployment server. And that's that. I suppose a more elegant method would be to convert MSBuildArguments into an array of strings and then loop through them during the WorkFlow process. But this suits our 2 server requirements. Hope this helps!
