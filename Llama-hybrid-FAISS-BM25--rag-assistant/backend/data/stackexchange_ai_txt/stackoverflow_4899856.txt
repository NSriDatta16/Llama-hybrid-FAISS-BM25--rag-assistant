[site]: stackoverflow
[post_id]: 4899856
[parent_id]: 4899800
[tags]: 
Should I use a viewmodel here? Is this a rhetorical question? Your view model would look exactly as you propose and it is perfectly adapted to what you are trying to display here: public class ThingiesByStatusViewModel { public string StatusName { get; set; } public int StatusThingiesCount { get; set; } } and then your controller would return an IEnumerable . Then in your view you could simply use a display template: @Html.DisplayForModel() and the corresponding display template ( ~/Views/Shared/DisplayTemplates/ThingiesByStatusViewModel.cshtml ): @model AppName.Models.ThingiesByStatusViewModel StatusName: @Model.StatusName Number of thingies: @Model.StatusThingiesCount Now let's look at the mapping layer. Suppose that we have the following domain: public class Thingy { } public class Status { public string StatusName { get; set; } public IEnumerable Thingies { get; set; } } and we have an instance of IEnumerable . The mapping definition could look like this: Mapper .CreateMap () .ForMember( dest => dest.StatusThingiesCount, opt => opt.MapFrom(src => src.Thingies.Count()) ); and finally the controller action would simply be: public ActionResult Foo() { IEnumerable statuses = _repository.GetStatuses(); IEnumerable statusesVM = Mapper.Map , IEnumerable >(statuses); return View(statusesVM); }
