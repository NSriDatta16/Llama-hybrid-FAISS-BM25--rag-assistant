[site]: stackoverflow
[post_id]: 430947
[parent_id]: 430401
[tags]: 
It's this way i believe (we had a lengthy discussion on this earlier on stack overflow in a comment-thread): If the initialization or destructor of an object with namespace scope (that are objects with static storage duration) has no side-effects, the objet can be optimized out if there is no use of a function or object in its translation unit. For objects whose initialization or destruction cause side effects, then the compiler may not optimize that variable out, even if there is no use of objects or functions of its translation units. In any case, the compiler has to initialize the objects before that use is done, but not necessarily before main. I did tests because someone at stackoverflow said that gcc effectively optimizes out initializations of objects having side effects if there is no such use. I tested that now, and I've seen gcc does not do that. Additionally, as i understand the Standard, it is not allowed to do so anyway. It suffices if you just take the address of an object or function of the translation unit of the object you want to have initialized. To be on the safe side, better always do that, even for objects having initializations with side effects. Assuming your friend is right, i think for the translation unit of main, main is always seen as being used , so that condition immediately is satisfied. Rules can be found in 3.6.2p3 , 3.7.1p2 and 3.2p2 (definition of use ), 1.9p7 (definition of side-effect ).
