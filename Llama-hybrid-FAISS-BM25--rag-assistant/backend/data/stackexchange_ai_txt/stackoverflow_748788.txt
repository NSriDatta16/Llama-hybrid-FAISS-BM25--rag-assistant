[site]: stackoverflow
[post_id]: 748788
[parent_id]: 
[tags]: 
Logic (if any) behind Google App Engine excluding standard JDK 1.6 APIs

It looks like GAE has chosen a subset of JDK 1.6 classes, as per: Google App Engine JDK white list which is very unfortunate as one gets class linkage errors all over the place with most common java libraries that deal with data binding, reflection, class loading and annotations. Although some omissions may be for deprecated or legacy things, there are others that are not. My specific concern is with streaming pull parsers (javax.xml.stream.*) which was just added to JDK 1.6 after a long delay (API was finalized at about same time as JDK 1.4). Omitting this makes it harder to do scalable high-performance xml processing. Problem as I understand is that not only are classes missing, but they can not even be added because of security constraints. So: this is an open-ended philosophical question that probably just GAE devs could answer for sure but... why are some APIs dropped from standard JDK 1.6, seemingly arbitrarily? UPDATE : Quick note: thanks for answers. For what it's worth I really do not see how security would have anything to do with not including javax.xml.stream. Security aspects are relevant for great many other things (and I don't need threads, for example, and can see why they are out), so it's understandable boilerplate answer; just not applicable for this one. Stax API is just a set of interfaces and abstract for crying out loud. But more importantly, it has exactly the same ramifications as including SAX, DOM and JAXP interfaces -- which are included already! But it looks like this issue has been brought to attention of google devs: discussion on whitelisting Stax API so here's hoping that this and similar issues can be resolved swiftly.
