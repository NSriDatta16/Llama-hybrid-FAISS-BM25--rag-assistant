[site]: stackoverflow
[post_id]: 340353
[parent_id]: 
[tags]: 
Plugging in to Java compilers

I have a post-compilation step that manipulates the Java bytecode of generated classes. I'd like to make life as painless as possible for library consumers, so I'm looking at ways I can make this process automatic and (if possible) compiler agnostic. The Annotation Processing API provides many of the desired features (automatic service discovery; supported by Eclipse). Unfortunately, this is aimed at code generators and doesn't support manipulation of existing artefacts : The initial inputs to the tool are considered to be created by the zeroth round; therefore, attempting to create a source or class file corresponding to one of those inputs will result in a FilerException. The Decorator pattern recommended by the API is not an option. I can see how to perform the step with a runtime agent/instrumentation, but this is a worse option than a manual build step as it would require anyone even peripherally touched by the API to configure their JVMs in a non-obvious manner. Is there a way to plug into or wrap the compiler tool as invoked by javac ? Has anyone successfully subverted the annotation processors to manipulate bytecode, no matter what the doc says?
