[site]: stackoverflow
[post_id]: 3551084
[parent_id]: 3551012
[tags]: 
If you're looking for the covariance route, something like this should work: public class OuterSpace where TCacheType : OuterSpaceCache { public virtual OuterSpaceData Data {get; set;} public virtual OuterSpaceAnalysis Analysis {get; set;} public virtual TCacheType Cache {get; set;} public class OuterSpaceData { //Lots of basic Data Extraction routines eg public virtual GetData(); } public class OuterSpaceAnalysis { //Lots of Generic Analysis on Data routines eg public virtual GetMean(); } public class OuterSpaceCache { //Lots of Caches of Past Analysis Results: public Dictionary > ResultCache; } } public class Sun : OuterSpace { public override SunData Data {get; set;} public override SunAnalysis Analysis {get; set;} public SunData : OuterSpaceData { //Routines to specific get data from the sun eg public override GetData(); } public SunAnalysis : OuterSpaceAnalysis { //Routines specific to analyse the sun: eg public double ReadTemperature(); } public SunCache : OuterSpaceCache { //Any data cache's specific to Sun's Analysis public Dictionary > TempCache; } } Fair warning, totally uncompiled code and I could be totally wrong :) But it's a stab at what I think you want... Oh, and I think this is a .Net 4.0 only solution, I don't think you can do this earlier, co-variance was introduced there...
