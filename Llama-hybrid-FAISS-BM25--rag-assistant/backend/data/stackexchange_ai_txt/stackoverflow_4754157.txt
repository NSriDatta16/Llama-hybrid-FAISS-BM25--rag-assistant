[site]: stackoverflow
[post_id]: 4754157
[parent_id]: 4754041
[tags]: 
Use recursion. Each branch generates a new branch, select the middle item in the unsorted set, the median. Put it in the current item in the tree. Copy all items less than the median to another array, send that new array to the call of the same method. Copy all items greater than the median to another array, send that new array to the call of the same method.\ Balanced trees have to have an odd number of items, unless the main parent node is not filled in. You need to decide if there are two values that are the Median, whether the duplicate belongs on the lower branch or upper branch. I put duplicates on the upper branch in my example. The median will be the number where an equal amount of numbers is less than and greater than the number. 1,2,3,3,4,18,29,105,123 In this case, the median is 4, even though the mean (or average) is much higher. I didn't include code that determines the median. BuildTreeItem(TreeItem Item, Array Set) { Array Smalls; Array Larges; Median = DetermineMedian(Set); Item.Value = Median; if(Set.Count() == 1) return; for (int i = 0; int i
