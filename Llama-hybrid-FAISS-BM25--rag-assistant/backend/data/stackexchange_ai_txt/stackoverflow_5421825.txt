[site]: stackoverflow
[post_id]: 5421825
[parent_id]: 5419486
[tags]: 
What class should I derive from for my main view controller that I use to load the others? UIViewController How do I wire that up to the app so that it knows to load this as the main controller? Read the "Defining Your Subclass" section of View Controller Programming Guide for iOS . Scratch that -- read the whole thing. It's all important, you might as well start to learn it now. Also read App Programming Guide for iOS . Again, read the whole thing, but the application lifecycle part is the most relevant to your question. What is the accepted standard way of having a navigation controller in the app and allowing the other views to obtain a reference to it? Again, this is explained well in View Controller Programming Guide . Views should never care about the navigation controller, but any view controllers that are part of a navigation stack have direct access to the nav controller via their respective navigationController properties. Should my UIViewControllers hold a reference to their parent controller, or should they ask the UIApplication for a reference to it when needed? A view controller already has a reference to its parent controller in its (surprise!) parentController property. It's best for a controller to avoid assuming too much about its parent, though. If the controller expects its parent to be a certain type or respond to certain messages, it becomes more difficult to reuse that controller or reorganize your application. Try to give the controller what it needs to do its thing when you create it. If the controller will need to ask for additional data or something like that, delegation is a good way to go. How do I make sure I don't instantiate extra copies of the views and their controllers as the user navigates? Exercise caution. There's not much danger of creating extra copies of views in a properly structured application because each view controller should take care of its own views. If you find yourself loading or otherwise creating views outside the context of the view controller that owns them, stop that.
