[site]: stackoverflow
[post_id]: 1988983
[parent_id]: 1988914
[tags]: 
I rewrote the classes and structs so they could be analyzed as follows: class Point { private: int x, y void moveUp() {} void moveRight() {} public: void moveUpAndRight() { moveUp(); moveRight(); } // add constructor }; struct Point { int x, y; }; void moveUp {} void moveRight {} void moveUpAndRight { moveUp {} moveRight {} } Using classes allows you to act upon your object. Code that uses the point object will use a standard interface to move the point around. If the coordinate system changes and the point class is modified to detect the coordinate system it is in, this will allow the same interface to be used in multiple coordinate systems (not breaking anything). In this example it makes sense to go with approach 1. If your just grouping related data to be accessed for organization purposes... struct Dwarves { int Doc, Grumpy, Happy, Sleepy, Bashful, Sneezy, Dopey; } void killDwarves(Dwarves& dwarves) {} void buryDwarves(Dwarves& dwarves) {} void disposeOfDwarves(Dwarves& dwarves) { killDwarves(dwarves); buryDwarves(dwarves); } Then it makes sense to go with Approach 2. This is an OO design choice so there is multiple correct solutions and from what we're given it's difficult to give a definitive answer.
