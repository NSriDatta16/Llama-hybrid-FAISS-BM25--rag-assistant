[site]: stackoverflow
[post_id]: 4507175
[parent_id]: 4507121
[tags]: 
You can create a big integer in exactly the way you describe. In fact, the first time I implemented such a class, that's exactly the way I did it. It helped me implement the arithmetic operations ( + , - , etc) since it was in the base (10) that I was used to. A natural enhancement to your "array of chars" is to keep it in base 10, but use 4 bits for the digit, instead of the whole byte. Thus, the number 123,456 might be represented by the bytes 12 34 56 instead of the string 123456 . (Three bytes as opposed to six.) From there, you could make the storage for the number in base two. The basic arithmetic operations such as addition work exactly the same in base 2 as they do in base 10. Thus, the number 65565 could be stored using the bytes FF FF . (In a vector of unsigned char s, for example.) Some implementations of BigInts use larger chunks, such as short or long , for efficiency. Base-10 big ints can be useful if you're doing a lot of displaying and/or serializing to base-10, and want to avoid the conversion to base-2.
