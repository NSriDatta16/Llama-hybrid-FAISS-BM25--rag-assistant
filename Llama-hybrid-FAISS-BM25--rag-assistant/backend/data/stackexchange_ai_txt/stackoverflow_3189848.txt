[site]: stackoverflow
[post_id]: 3189848
[parent_id]: 3189835
[tags]: 
I recommend using LINQ to Entities . It already has all the bandwidth efficiency concerns worked out. Update (for WCF): In this case, I recommend WCF Data Services (formerly called ADO.NET Data Services, formerly called Astoria). They use a REST protocol called oData in an interesting fashion. Essentially, you implement the service by providing an IQueryable (e.g., using LINQ to Entities), and then you can consume the service by using "LINQ to oData" (I just made up that term, but that's the idea). In this way, your clients can do something like: var beverages = from product in myDataService.Products where product.CategoryName = "Beverages" select product; (assuming myDataService is a DataServiceContract that points to your WCF Data Service). That query is transformed to an oData call, something like http://myHost/myWCFService.svc/Products?$filter=CategoryName%20eq%20'Beverages' . The oData query string is interpreted by the WCF data service, and passed to your IQueryable implementation. If this is LINQ to Entities, then the query is passed through to the database, so the actual SQL executed is something like SELECT * FROM [Products] WHERE [Products].[CategoryName] = 'Beverages' . As you can see, this is an incredibly powerful concept that allows very efficient data querying without the danger of SQL injection. There is a downside: since any kind of query is allowed, this approach can make database optimization more difficult. It also opens up the possibility of easier DoS attacks, though these can be limited. So it makes our lives as programmers very easy, but some DBAs are hesitant to accept it.
