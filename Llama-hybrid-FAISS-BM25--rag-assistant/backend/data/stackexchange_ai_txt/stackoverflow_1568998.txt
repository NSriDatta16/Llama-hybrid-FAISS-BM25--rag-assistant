[site]: stackoverflow
[post_id]: 1568998
[parent_id]: 1568828
[tags]: 
The Open/Closed Principle [usually attributed to Bertrand Meyer] says that "software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification". This might be the principle that you came across in your Java days. In real life this applies to completed code where the cost of modification, re-testing and re-certification outweighs the benefit of the simplicity gained by making a direct change. If you are changing a method because it needs an additional argument, you might choose to use the following steps: Copy the old method. Remove the implementation from the copy. Change the signature of the original method to add the new argument. Update the implementation of the original method to use the new argument. Implement the copy in terms of the new method with a default value for the argument. If your implementation language doesn't support method overloading then the principle is the same but you need to find a new name for the new method signature. The advantage of this approach is that you have added the new argument to the method, and your existing client code will continue to compile and run. This works well if there is an obvious default for the new argument, and less well if there isn't.
