[site]: crossvalidated
[post_id]: 241889
[parent_id]: 
[tags]: 
Optimizing Hyperparameters with just a Score Function

I'm trying to create artificial intelligence for the popular game "2048" using this page as a reference: https://stackoverflow.com/questions/22342854/what-is-the-optimal-algorithm-for-the-game-2048/22498940#22498940 My algorithm uses various heuristics such as "monotonicity" and "number of empty tiles" to select the best move (using minimax to find the best opportunity). Anyway, now I'm trying to tune the weights (hyperparameters?) of my heuristics by simulating multiple 2048 games and seeing which weights give the best average game scores. Is this the right approach? If so, how can I implement it so that it uses minimal computational power (simulations can take a while to run)? If not, can someone point me in the right direction? Most Scikit optimization algorithms (grid search, random search, etc.) seem to require training data and test data. However, I do not have a dataset, only a scoring function that computes as you go.
