[site]: datascience
[post_id]: 82257
[parent_id]: 
[tags]: 
ML method suggestion for regression task

I'm working with a brushed DC motor current, voltage, calculated rotations and measured rotations and a couple of state signals(direction of rotation and the operation state). My objective is to approximate a function which gives the error in measurement of rotations- H(x) = (measured rotations - calculated rotations) Here is an example of how my data looks and the difference is determined by the difference of the signals that you see in the top subplot srefpos(measured) and slppos(calculated) . The calculated rotations are already pretty accurate but there are obvious instances where it doesn't work correctly and this is the shortcoming that I am trying to improve. The error(bottom most subplot) is my target(ideally) after removing noise and so far I have already tried- Regression through Multi Layer Perceptron 1D-CNN LSTM and Decision Trees (both simple and ensemble) The best results I have gotten so far are with decision trees but I am not happy with the generalization achieved(performs not up to mark on test data). With the other methods I have mentioned above, the network/the algorithm doesn't even learn anything and yields a constant output of either 0 or the approximately mean of data that it has seen during training. Based on experience can you suggest a method might yield me best results or refer me to a paper? (sub-question) the target i.e., the error values fall in range -1 , does this somehow play a crucial rule? x-axis is number of samples Edit: details about graph In the $1^{st}$ subplot, srefpos is not visible because it is very close to the signal slppos . Here is a closer look of the same signal The reason why I think $2^{nd}$ subplot is important is because the motor rotations (i.e. slppos-sensorless positioning) are calculated based on the ripples in the current signal The $3^{rd}$ subplot if a the difference of srefpos and slppos , but the error occured in $t_{-n}$ gets carried forward and hence I take another difference to obtain the $4^{th}$ subplot The signal sampling frequency is 400 Hz(originally 4 kHz but I have down-sampled it here) and this what I meant when the x-axis represents samples(they do occur sequentially)
