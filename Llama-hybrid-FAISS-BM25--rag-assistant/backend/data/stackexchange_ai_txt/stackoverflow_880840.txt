[site]: stackoverflow
[post_id]: 880840
[parent_id]: 880753
[tags]: 
There are a couple issues that need to be addressed. First, regarding only one rectangle can be drawn, this is due to the design of your program. In your code, whenever the repaintoffscreen method is called, the currectRect field is used to draw a rectangle. However, there is no provision to keep holding onto rectangles which were made in the past. One way to keep a hold of past rectangles would be perhaps to make another field which is, for example, a List which is used to store past rectangles. Then, when the mouse is released, add the current rectangle to that list. Then, in order for all rectangles, currentRect and past rectangles to appear, repaintoffscreen will need to not only perform getDrawableRect and offscreen.drawRect using the currentRect but also with the past rectangles which are stored in the List . (Hint, use a for loop to iterate through the list.) Second, regarding the rectangle not appearing until after releasing the mouse button, rather than using the mouseDragged method, maybe using the mouseMoved method along with a check to see that the mouse button is depressed may be a workaround. (I think I've also had trouble dealing with the mouseDragged method in the past.) The MouseEvent passed into the mouseMoved method can be used to check if a button is depressed by the getButton method: public void mouseMoved(MouseEvent e) { // Check if button1 is pressed. if (e.getButton() == MouseEvent.BUTTON1) { // Perform sizing of rectangle and off-screen drawing, and repaint. } }
