[site]: stackoverflow
[post_id]: 1852058
[parent_id]: 1851975
[tags]: 
I usually don't have interfaces on model objects like Person and Address. I wonder why you've decided to go that way? I can't think of multiple implementations for each. If your IPerson has implementations like Mother, Sister, Friend, etc., I'd recommend going with a role-based design instead. Just because the phrase "Jean is a Mother" rolls off the tongue so nicely doesn't mean that you are wise to base your design on IS-A and inheritance. Address can be a variable thing as you move between countries, so that might be more reasonable, but you'll have a very hard time coming up with a single interface that will suit for both the US and Japan. In iteration 2 I need to support multiple storage types, Can you clarify this? What does "multiple storage types" mean? DAOs that use relational datbaases, file system, object databases, etc.? so I create an interface for person, which has multiple implementations, I don't see how the previous requirement makes this necessary. and an interface for the DAO persistence, again with multiple implementations. This is the usual Spring idiom. I'd say that the web and person tiers should not have to worry about the persistence complexity. That's what the persistence interface is supposed to be hiding. Anything that makes it leak out into the other layers is doing its clients a disservice. I think I'd prefer your second option. But my real recommendation would be to eliminate the IPerson interface unless you can provide an air tight reason for keeping it.
