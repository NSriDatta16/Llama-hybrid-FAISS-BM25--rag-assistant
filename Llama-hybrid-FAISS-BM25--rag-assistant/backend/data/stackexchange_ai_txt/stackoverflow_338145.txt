[site]: stackoverflow
[post_id]: 338145
[parent_id]: 338101
[tags]: 
I typically use function attributes as storage for annotations. Suppose I want to write, in the style of C# (indicating that a certain method should be part of the web service interface) class Foo(WebService): @webmethod def bar(self, arg1, arg2): ... then I can define def webmethod(func): func.is_webmethod = True return func Then, when a webservice call arrives, I look up the method, check whether the underlying function has the is_webmethod attribute (the actual value is irrelevant), and refuse the service if the method is absent or not meant to be called over the web.
