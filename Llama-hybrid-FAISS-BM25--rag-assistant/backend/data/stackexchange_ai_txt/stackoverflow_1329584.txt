[site]: stackoverflow
[post_id]: 1329584
[parent_id]: 1329536
[tags]: 
We usually layer our application as follows (each of the layer is in a separate project of the solution and consequently in a separate Dll: What I would always go for (first) is to have a layered application Presentation Layer (JUST UI and databinding logic) Interface Layer to the Business Layer (defining the contracts for accessing the BL) Business Layer implementation (the actual logic, data validation etc...) Interface Layer to the Data Access Layer (defining the contracts for accessing the DAL) Data Access Layer implementation You can then use some factory for retrieving the corresponding objects. I would take a look at some library, possibly using dependency injection like Spring.Net or Microsoft Unity from the MS patterns and practices. The advantages are the following: separation of logic where it belongs to no business logic in the UI (developers have to pay attention to this) all of your applications look the same and consequently developers knowing this architecture will immediately know where to search for the corresponding logic exchangeable DAL. The interfaces define the contracts for accessing the corresponding layer. Unit testing becomes easier, just focusing on the BL logic and DAL Your application could have many entry points (web interface, Winforms client, webservice). All of them can reference the same business logic (and DAL). ... Just could not live without that..
