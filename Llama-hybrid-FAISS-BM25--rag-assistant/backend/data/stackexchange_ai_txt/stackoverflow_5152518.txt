[site]: stackoverflow
[post_id]: 5152518
[parent_id]: 5152013
[tags]: 
Method 1 - layout.xml : a. For files you want to include on every page For css or js files you want to add to every page, you edit the page.xml files located in your layout folder (app/design/frontend/default/your_theme/layout/page.xml). Within this file, at the top you will find the area with the ** **. This block has a child named head which contains the included css and js elements. prototype/prototype.js prototype/deprecation.js prototype/validation.js scriptaculous/builder.js ... Here you can add your javascript and css. Note that any Js files you add are relative to the “js” folder in your root directory. The css files are included from the skin files of the current and default templates (skin/frontend/default/your_template(& default)/css). b. Specific areas If you want to include css or js on only certain areas (such as the checkout process or catalog pages), you can do that also. For instance, if you want it in a single product view (product view vs product list), you can open up catalog.xml, find area (near line 168 in vs 1.2.1). Add your code in there – notice that we are using the tag rather than tags. We use the “reference” tag to reference other blocks that are in other areas of the template. varien/product.js js_css calendar/calendar-win2k-1.css can_load_calendar_js --> js calendar/calendar.js can_load_calendar_js --> js calendar/lang/calendar-en.js can_load_calendar_js --> js calendar/calendar-setup.js can_load_calendar_js --> The use of can also be used in your layout XML areas in the admin backend (CMS pages, category and product designs). This can accomplish the same thing, as well as adding or removing other blocks. Method 2 - Block Code : We can accomplish all of this in code as well. These functions are defined within Mage_Page_Block_Html_Head. So, we can use this code with in a block class (not a .phtml file!): $headBlock = $this->getLayout()->getBlock('head'); $headBlock->addJs('somefolder/yay.js'); I suggest looking over the page.xml files as long as finding the removeItem syntax ($type, $name for the method, for the xml), which will be very handy for you for adding or removing assets as and when you need them! js calendar/calendar.js $this->getLayout->getBlock('head')->removeItem('js', 'calendar/calendar.js'); The article was published : http://www.exploremagento.com/magento/adding-and-remove-js-css.php
