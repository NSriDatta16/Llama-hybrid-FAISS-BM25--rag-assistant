[site]: datascience
[post_id]: 116063
[parent_id]: 31134
[tags]: 
This is a modification of Rayn's function to fit more sklearn classification report and will have the same format as it def report_average(*args): report_list = list() for report in args: splited = [' '.join(x.split()) for x in report.split('\n\n')] header = [x for x in splited[0].split(' ')] data = np.array(splited[1].split(' ')).reshape(-1, len(header) + 1) data = np.delete(data, 0, 1).astype(float) rest = splited[2].split(' ') accuarcy =np.array([0, 0, rest[1], rest[2]]).astype(float).reshape(-1, len(header)) macro_avg = np.array([rest[5:9]]).astype(float).reshape(-1, len(header)) weighted_avg = np.array([rest[11:]]).astype(float).reshape(-1, len(header)) #avg_total = np.array([x for x in avg]).astype(float).reshape(-1, len(header)) df = pd.DataFrame(np.concatenate((data, accuarcy,macro_avg,weighted_avg)), columns=header) report_list.append(df) res = reduce(lambda x, y: x.add(y, fill_value=0), report_list) / len(report_list) return res.rename(index={res.index[-3]: 'accuracy',res.index[-2]: 'macro_avg',res.index[-1]: 'weighted_avg'})
