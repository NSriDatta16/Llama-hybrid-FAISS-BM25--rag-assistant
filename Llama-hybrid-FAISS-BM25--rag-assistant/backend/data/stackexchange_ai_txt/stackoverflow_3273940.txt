[site]: stackoverflow
[post_id]: 3273940
[parent_id]: 3273878
[tags]: 
Think very hard. Come up with an algorithm for the problem Analyze it to determine its time complexity (big-O). If the time complexity is what you were asked to produce, you are done. Else goto 1. Seriously, though, you need to know the complexity of algorithms for common problems, such as iteration, searching, sorting, hash table look-up, etc. For example, it is very helpful to know that a simple sorting algorithm like Bubble Sort is O(n^2), and that Quick Sort is O(n log n) in the average case. It is also important to be able to quickly analyze an algorithm to determine its complexity, and to see how it can be changed to make it faster.
