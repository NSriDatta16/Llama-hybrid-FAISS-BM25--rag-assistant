[site]: stackoverflow
[post_id]: 2488964
[parent_id]: 2486600
[tags]: 
This may totally be the wrong way to do this but on my private site I have this in the global.asax file; protected void Application_Error(object sender, EventArgs e) { HttpException httpException = Server.GetLastError() as HttpException; RouteData routeData = new RouteData(); routeData.Values.Add("controller", "Error"); routeData.Values.Add("action", "Index"); routeData.Values.Add("statusCode", httpException.GetHttpCode().ToString()); Server.ClearError(); IController errorController = new MyDomain.Controllers.ErrorController(); errorController.Execute(new RequestContext(new HttpContextWrapper(Context), routeData)); } Then I have an error controller; public class ErrorController : Controller { public ActionResult Index() { //log out the error //string statusCode = RouteData.Values["statusCode"].ToString(); return RedirectToAction("Index", "Home"); } } So I always take the user back to my index page when there is an error. This is only a private site so there are a lot of liberties I can take and my view is also that the less times you show a yellow screen, and the less information you give potential hackers, the better.
