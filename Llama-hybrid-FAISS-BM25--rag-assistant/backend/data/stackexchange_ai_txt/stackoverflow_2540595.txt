[site]: stackoverflow
[post_id]: 2540595
[parent_id]: 2540146
[tags]: 
I agree with juharr - use a mocking/isolation framework. I'd recommend Moq . The following will print "Robert": using System; using System.Security.Principal; using Moq; namespace ConsoleApplication1 { class Program { static void Main() { var mockIdentity = new Mock (); var mockPrincipal = new Mock (); mockIdentity.SetupGet(x => x.Name).Returns("Robert"); mockPrincipal.SetupGet(x => x.Identity).Returns(mockIdentity.Object); IPrincipal myStub = mockPrincipal.Object; Console.WriteLine(myStub.Identity.Name); } } } EDIT: But if you want to do it by hand... using System; using System.Security.Principal; namespace ConsoleApplication2 { class Program { static void Main() { IIdentity identity = new IdentityStub { Name = "Robert", AuthenticationType = "Kerberos", IsAuthenticated = true }; IPrincipal principal = new PrincipalStub(identity); Console.WriteLine(principal.Identity.Name); // Robert Console.WriteLine(principal.IsInRole(PrincipalStub.ValidRole)); // True Console.WriteLine(principal.IsInRole("OtherRole")); // False } } public class PrincipalStub : IPrincipal { public const string ValidRole = "TestRole"; public PrincipalStub(IIdentity identity) { Identity = identity; } public IIdentity Identity { get; private set; } public bool IsInRole(string role) { return role == ValidRole; } } public class IdentityStub : IIdentity { public string Name { get; set; } public string AuthenticationType { get; set; } public bool IsAuthenticated { get; set; } } } (The above is not a unit test, just an example of hand-rolled stubs using a bit of dependency injection.)
