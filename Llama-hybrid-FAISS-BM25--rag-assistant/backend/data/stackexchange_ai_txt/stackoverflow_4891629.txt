[site]: stackoverflow
[post_id]: 4891629
[parent_id]: 4888189
[tags]: 
You can find answer to your question reading about one of the Delta Object Rules which states this: Signal Safe (SS). It must be safe to call methods on the object, including the destructor, from within a slot being called by one of its signals. Fragment: At its core, QObject supports being deleted while signaling. In order to take advantage of it you just have to be sure your object does not try to access any of its own members after being deleted. However, most Qt objects are not written this way, and there is no requirement for them to be either. For this reason, it is recommended that you always call deleteLater() if you need to delete an object during one of its signals, because odds are that ‘delete’ will just crash the application. Unfortunately, it is not always clear when you should use ‘delete’ vs deleteLater(). That is, it is not always obvious that a code path has a signal source. Often, you might have a block of code that uses ‘delete’ on some objects that is safe today, but at some point in the future this same block of code ends up getting invoked from a signal source and now suddenly your application is crashing. The only general solution to this problem is to use deleteLater() all the time, even if at a glance it seems unnecessary. Generally I regard Delta Object Rules as obligatory read for every Qt developer. It's excellent reading material.
