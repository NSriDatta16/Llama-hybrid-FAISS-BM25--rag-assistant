[site]: stackoverflow
[post_id]: 226763
[parent_id]: 226701
[tags]: 
This class of problem is easy to spot if you are testing a single condition A, because you know that you can have A and not-A. It's also not too hard to do if you had conditions A and B. You look for A, not-A and B, not-A and not-B (for example) - and you can fairly easily tell that you've covered all cases. Sometimes, for whatever reason, the conditions might get refactored out, and then (taking the above contrived example) while leaving the three blocks behind, and the resulting WTF. But what if you had conditions A, B, C, and D? Stacked if-else's is really a gnarly way of doing it, but sometimes that's just the way it gets done. Spotting "holes" in the logic coverage is easy to do by creating a complete truth table. A nice way to do this is with Karnaugh maps. The wikipedia entry on Karnaugh maps is a great starting point (with pictures, even!). For software coding, you want full coverage of the map without an overlap (well, at least, usually).
