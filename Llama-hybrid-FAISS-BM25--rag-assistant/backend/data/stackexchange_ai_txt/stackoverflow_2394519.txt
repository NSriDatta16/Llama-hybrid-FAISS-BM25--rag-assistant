[site]: stackoverflow
[post_id]: 2394519
[parent_id]: 
[tags]: 
Policy-based template design: How to access certain policies of the class?

I have a class that uses several policies that are templated. It is called Dish in the following example. I store many of these Dish es in a vector (using a pointer to simple base class), but then I'd like to extract and use them. But I don't know their exact types. Here is the code; it's a bit long, but really simple: #include #include struct DishBase { int id; DishBase(int i) : id(i) {} }; std::ostream& operator class Dish : public DishBase { Appetizer appetizer_; Main main_; Dessert dessert_; public: Dish(int id) : DishBase(id) {} const Appetizer& get_appetizer() { return appetizer_; } const Main& get_main() { return main_; } const Dessert& get_dessert() { return dessert_; } }; struct Storage { typedef DishBase* value_type; typedef std::vector Container; typedef Container::const_iterator const_iterator; Container container; Storage() { container.push_back(new Dish (0)); container.push_back(new Dish (1)); container.push_back(new Dish (2)); } ~Storage() { // delete objects } const_iterator begin() { return container.begin(); } const_iterator end() { return container.end(); } }; int main() { Storage s; for(Storage::const_iterator it = s.begin(); it != s.end(); ++it){ std::cout get_dessert() The tricky part is here, in the main() function: std::cout get_dessert() How can I access the dessert? I don't even know the Dessert type (it is templated), let alone the complete type of the object that I'm getting from the storage. This is just a toy example, but I think my code reduces to this. I'd just like to pass those Dish classes around, and different parts of the code will access different parts of it (in the example: its appetizer, main dish, or dessert).
