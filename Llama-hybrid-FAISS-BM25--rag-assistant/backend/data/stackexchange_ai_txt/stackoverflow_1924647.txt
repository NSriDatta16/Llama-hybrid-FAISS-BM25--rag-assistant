[site]: stackoverflow
[post_id]: 1924647
[parent_id]: 1924608
[tags]: 
Whether you should be explicit or implicit depends on the situation. You are correct in that often you are trying to hide complexity, and certain things being done behind the scenes for you automatically is good. encapsulation, etc. Sometimes though frameworks or constructs hide things from us that they should not, and this makes things less clear. Sometimes certain information or settings are hidden from us and hence we don't know what's happening . Assumptions are made that we don't understand and can't determine. Behaviors happen that we can't predict. Encapsulation: good. Hiding: bad. Making the right call takes experience. Where logic belongs, it should be explicit. Example: I once removed about 90 lines of code from a series of a dozen code behind pages; data access code, business logic, etc., that did not belong there. I moved them to base pages and the key business object. This was good (encapsulation, separation of concerns, code organization, decoupling, etc.). I then excitedly realized that I could remove the last line of code from many of these pages, moving it to the base page. It was a line that took a parameter from url and passed it to the business object. Good, right? Well, no, this was bad (I was hiding ). This logic belonged here, even though it was almost the same line on every page. It linked the UI intention with the business object. It need to be explicit . Otherwise I was hiding, not encapsulating. With that line, someone looking at that page would know what that page did and why; without it, it would be a pain to determine what was going on.
