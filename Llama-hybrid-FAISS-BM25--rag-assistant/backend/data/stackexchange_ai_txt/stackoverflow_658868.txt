[site]: stackoverflow
[post_id]: 658868
[parent_id]: 
[tags]: 
What's wrong in terms of performance with this code? List.Contains, random usage, threading?

I have a local class with a method used to build a list of strings and I'm finding that when I hit this method (in a for loop of 1000 times) often it's not returning the amount I request. I have a global variable: string[] cachedKeys A parameter passed to the method: int requestedNumberToGet The method looks similar to this: List keysToReturn = new List (); int numberPossibleToGet = (cachedKeys.Length = numberPossibleToGet) { string randomKey = cachedKeys[rand.Next(0, cachedKeys.Length)]; if (!keysToReturn.Contains(randomKey)) keysToReturn.Add(randomKey); } if (keysToReturn.Count != numberPossibleToGet) Debugger.Break(); I have approximately 40 strings in cachedKeys none exceeding 15 characters in length. I'm no expert with threading so I'm literally just calling this method 1000 times in a loop and consistently hitting that debug there. The machine this is running on is a fairly beefy desktop so I would expect the breakout time to be realistic, in fact it randomly breaks at any point of the loop (I've seen 20s, 100s, 200s, 300s). Any one have any ideas where I'm going wrong with this? Edit: Limited to .NET 2.0 Edit: The purpose of the breakout is so that if the method is taking too long to execute, the client (several web servers using the data for XML feeds) won't have to wait while the other project dependencies initialise, they'll just be given 0 results. Edit: Thought I'd post the performance stats Original '0.0042477465711424217323710136' - 10 '0.0479597267250446634977350473' - 100 '0.4721072091564710039963179678' - 1000 Skeet '0.0007076318358897569383818334' - 10 '0.007256508857969378789762386' - 100 '0.0749829936486341141122684587' - 1000 Freddy Rios '0.0003765841748043396576939248' - 10 '0.0046003053460705201359390649' - 100 '0.0417058592642360970458535931' - 1000
