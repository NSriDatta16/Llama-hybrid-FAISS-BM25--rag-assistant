[site]: stackoverflow
[post_id]: 1289841
[parent_id]: 1261441
[tags]: 
One important distinction is between specifying an arbitrarily large limit [e.g. VARCHAR(2000) ], and using a datatype that does not require a limit [e.g. VARCHAR(MAX) or TEXT ]. PostgreSQL bases all its fixed-length VARCHAR s on its unlimitted TEXT type, and dynamically decides per value how to store the value, including storing it out-of-page. The length specifier in this case really is just a constraint, and its use is actually discouraged. (ref) Other DBMSs require the user to select if they require "unlimitted", out-of-page, storage, usually with an associated cost in convenience and/or performance. If there is an advantage in using VARCHAR( ) over VARCHAR(MAX) or TEXT , it follows that you must select a value for when designing your tables. Assuming there is some maximum width of a table row, or index entry, the following constraints must apply: must be less than or equal to if = , the table/index can have only 1 column in general, the table/index can only have columns where (on average) = / It is therefore not the case that the value of acts only as a constraint, and the choice of must be part of the design. (Even if there is no hard limit in your DBMS, there may well be performance reasons to keep the width within a certain limit.) You could use the above rules to assign a maximum value of , based on the expected architecture of your table (taking into account the impact of future changes). However, it makes more sense to define the minimum value of , based on the expected data in each column. Most likely, you will expand to the nearest "round number" - e.g. you will always use either VARCHAR(10) , VARCHAR(50) , VARCHAR(200) , or VARCHAR(1000) , whichever is the best fit.
