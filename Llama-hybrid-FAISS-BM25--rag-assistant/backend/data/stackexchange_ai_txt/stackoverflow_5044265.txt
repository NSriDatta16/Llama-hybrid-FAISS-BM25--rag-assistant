[site]: stackoverflow
[post_id]: 5044265
[parent_id]: 5044104
[tags]: 
Well, it's not going to be a trivial regex, I can tell you that. You could do something like this: $chars = count_chars($input, 1); $numbers = array(); foreach ($chars as $char => $frequency) { if (is_numeric(chr($char))) { $numbers[chr($char)] = $frequency; } } // that converts "11234" into array(1 => 2, 2 => 1, 3 => 1, 4 => 1) Now, since MySQL doesn't support assertions in regex, you'll need to do this in multiple regexes: $where = array(); foreach ($numbers AS $num => $count) { $not = "[^$num]"; $regex = "^"; for ($i = 0; $i That'll produce: ( (numberField REGEXP '^[^1]*1[^1]*1[^1]*$') AND (numberField REGEXP '^[^2]*2[^2]*$') AND (numberField REGEXP '^[^3]*3[^3]*$') AND (numberField REGEXP '^[^4]*4[^4]*$') ) That should do it for you. It's not pretty, but it should take care of all of the possible permutations for you, assuming that your stored data format is consistent... But, depending on your needs, you should try to pull it out and process it in PHP. In which case the regex would be far simpler: ^(?=.*1.*1})(?=.*2)(?=.*3)(?=.*4)\d{5}$ Or, you could also pre-sort the number before you insert it. So instead of inserting 14231 , you'd insert 11234 . That way, you always know the sequence is ordered properly, so you just need to do numberField = '11234' instead of that gigantic beast above...
