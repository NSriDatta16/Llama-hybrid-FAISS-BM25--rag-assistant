[site]: stackoverflow
[post_id]: 5342544
[parent_id]: 5342511
[tags]: 
Initially it is a null-pointer. But you yourself explicitly change that pointer and make it non-null inside myfunc function. In the first call to myfunc you explicitly make your pointer to point to string literal "Hello World" . After that moment the pointer is, of course, no longer null. String literals are indeed allocated in a read-only memory location (at least conceptually). However, in both C and C++ you are allowed to point to string literals with char * pointers (i.e. const char * is not required). It is OK to just point to string literal with char * pointer, as long as you are not trying to modify the literal. Your code does not make any attempts to modify anything, so it is OK. String literals in C and C++ have static storage duration. So no, they are not allocated "on the stack". They are always allocated in static memory, meaning that they live forever - as long as your program is running. P.S. In order to answer your question more completely, you have to explain why on Earth you expect your pointer to remain null. P.P.S. int main , not void main .
