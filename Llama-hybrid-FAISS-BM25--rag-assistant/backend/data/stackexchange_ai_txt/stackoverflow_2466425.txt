[site]: stackoverflow
[post_id]: 2466425
[parent_id]: 2362339
[tags]: 
Alternate workflow for adding custom classes in Interface Builder. On the Library pane, select the Objects tab. At the bottom of the pane, type "NSObject" to filter out all the other class types. Drag the NSObject icon (a gold cube wireframe) to your ViewController.xib window. Set the View Mode of that window to list mode (the icon with four horizontal lines) In the Object Identity pane --> Class Identity section --> Class text field, type your new class name. Note how its Name and Type will change in the ViewController.xib window. Back in the Library pane's filter field, type your new class name to just show that object type. Select the Outlets tab and add any ivars by clicking the Add button (looks like a plus symbol). Change their names and types from the defaults. Warning: Only object types here, no primitive types. In fact, this feature is half-baked, just add your ivars in Xcode. Select the Actions tab to add class methods. Change the names from the default values. You can only declare methods that take a single parameter, as far as I can tell. To turn this Interface Builder class into code that you work with in Xcode, select the Options popup menu (icon looks like a gear). Choose "Generate Class Files". Save the resulting .m and .h file, with Add to Project set to yes. You have to go to Xcode and hand-edit the .h file to have the proper superclass. There is commented-out text that tells you what to do. From there, just add your implementation code to the .m file and you're off to the races. Good luck.
