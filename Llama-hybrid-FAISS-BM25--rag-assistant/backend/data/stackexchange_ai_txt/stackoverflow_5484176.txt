[site]: stackoverflow
[post_id]: 5484176
[parent_id]: 5399682
[tags]: 
Like lwburk, I don't think its available through Mozilla's API's, but I have an idea which works, but it seems like a complex hack. The basic steps are: Set up a custom resource url to point to your extension's base directory Read the file and parse it into XML Pull the id out using XPath Add the following line to your chrome.manifest file resource packagename-base-dir chrome/../ Then we can grab and parse the file with the following code: function myId(){ var req = new XMLHttpRequest(); // synchronous request req.open('GET', "resource://packagename-base-dir/install.rdf", false); req.send(null); if( req.status !== 0){ throw("file not found"); } var data = req.responseText; // this is so that we can query xpath with namespaces var nsResolver = function(prefix){ var ns = { "rdf" : "http://www.w3.org/1999/02/22-rdf-syntax-ns#", "em" : "http://www.mozilla.org/2004/em-rdf#" }; return ns[prefix] || null; }; var parser = CCIN("@mozilla.org/xmlextras/domparser;1", Ci.nsIDOMParser); var doc = parser.parseFromString(data, "text/xml"); // you might have to change this xpath expression a bit to fit your setup var myExtId = doc.evaluate("//em:targetApplication//em:id", doc, nsResolver, Ci.nsIDOMXPathResult.FIRST_ORDERED_NODE_TYPE, null); return myExtId.singleNodeValue.textContent; } I chose to use a XMLHttpRequest(as opposed to simply reading from a file) to retrieve the contents since in Firefox 4, extensions aren't necessarily unzipped. However, XMLHttpRequest will still work if the extension remains packed (haven't tested this, but have read about it). Please note that resource URL's are shared by all installed extensions, so if packagename-base-dir isn't unique, you'll run into problems. You might be able to leverage Programmatically adding aliases to solve this problem. This question prompted me to join StackOverflow tonight, and I'm looking forward participating more... I'll be seeing you guys around!
