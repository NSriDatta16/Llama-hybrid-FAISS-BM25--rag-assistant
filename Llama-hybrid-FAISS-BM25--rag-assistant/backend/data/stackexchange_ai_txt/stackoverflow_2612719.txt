[site]: stackoverflow
[post_id]: 2612719
[parent_id]: 2612553
[tags]: 
The problem occurs when, later in the project, more conditions are added - one of the projects I'm currently working on has steadily collected conditions over time (and then some of those conditions were moved into struts tags, then some to JSTL...) - one negative isn't hard to read, but 5+ is a nightmare, especially when someone decides to reorganize and negate the whole thing. Maybe on a new project, you'll write: if (authorityLvl!=Admin){ doA(); }else{ doB(); } Check back in a month, and it's become this: if (!(authorityLvl!=Admin && authorityLvl!=Manager)){ doB(); }else{ doA(); } Still pretty simple, but it takes another second. Now give it another 5 to 10 years to rot. (x%2!=0) certainly isn't a problem, but perhaps the best way to avoid the above scenario is to teach students not to use negative conditions as a general rule, in the hopes that they'll use some judgement before they do - because just saying that it could become a maintenance problem probably won't be enough motivation. As an addendum, a better way to write the code would be: userHasAuthority = (authorityLvl==Admin); if (userHasAuthority){ doB(); else{ doA(); } Now future coders are more likely to just add "|| authorityLvl==Manager", userHasAuthority is easier to move into a method, and even if the conditional is reorganized, it will only have one negative. Moreover, no one will add a security hole to the application by making a mistake while applying De Morgan's Law.
