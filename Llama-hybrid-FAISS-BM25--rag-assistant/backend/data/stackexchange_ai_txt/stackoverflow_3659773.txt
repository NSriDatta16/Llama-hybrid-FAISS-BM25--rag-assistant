[site]: stackoverflow
[post_id]: 3659773
[parent_id]: 
[tags]: 
Python Plugin-System - HOWTO

I'm writing a Python application which stores some data. For storing the data i've wrote a Connection class with abstract methods (using Python's abc module). This class is the super class all storage back-ends derive from. Each storage back-end has only one purpose, e.g. storing the data in plain text files or in a XML file. All storage backends (inclusive the module where the super class is located) are in one package called 'data_handler'. And each back-end is in one module. My application should be able the store data in multiple back-ends simultaneously and determinate at runtime which storage back-ends are available. To do this i had the idea to write a singleton class where each back-end have to register at their import. But this seems to be not so good in a dynamic language (please correct me if I misinterpret this). Another way could be the import of the package with import data_handler and then get the __file__ attribute of the package and search all Python files in the dir for subclasses of the super Connection class. What method should I use, or are there other (maybe better) methods to do this. Stefan Is discovering the back-ends at runtime a strict requirement or would static enumeration of them in the code do? This feature will be nice to note have to edit the code when I add a new back-end But should your application always write to all backends? I will have a class where I can register available handler. And the data shall be written to each registered handler. But not all available handlers have to be registered.
