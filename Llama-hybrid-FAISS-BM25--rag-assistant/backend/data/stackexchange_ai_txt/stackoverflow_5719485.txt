[site]: stackoverflow
[post_id]: 5719485
[parent_id]: 5719207
[tags]: 
Although your question discusses "binding" to another base class, you haven't shown any example usage that would leverage polymorphism. Rather, your example shows a hopeful ability to call an additional method: var cashRegister = new CashRegister(); cashRegister.SomeGenericBaseObjectMethod(); cashRegister.SomeCouchDbSpecificMethod(); Are you mostly hoping for some syntactical sugar? If so, consider extension methods . Here is an example: // Declaration namespace ExtensionMethods { public static class CashRegisterExtensions { public static void SomeCouchDbSpecificMethod(this CashRegister cashRegister) { // do stuff with CashRegister instance } } } Then you can do cashRegister.SomeCouchDbSpecificMethod(); . Otherwise, if you're not just looking for syntactic sugar, you can consider using dynamic - but can you post some practical usage for what you're trying to accomplish that would take advantage of polymorphism?
