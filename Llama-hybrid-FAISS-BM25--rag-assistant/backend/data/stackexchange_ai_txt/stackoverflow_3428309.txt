[site]: stackoverflow
[post_id]: 3428309
[parent_id]: 
[tags]: 
Improving code to generate a distribution

I am new to Haskell and I wonder how/if I can make this code more efficient and tidy. It seems unnecessarily long and untidy. My script generates a list of 10 averages of 10 coin flips. import Data.List import System.Random type Rand a = StdGen -> Maybe (a,StdGen) output = do gen Int -> StdGen -> [Double] distBernoulli m n gen = [fromIntegral (sum x) / fromIntegral (length x) | x Int -> [[Int]] splitList [] n = [] splitList lst n = take n lst : splitList (drop n lst) n randomList :: Int -> StdGen -> [Int] randomList n = take n . unfoldr trialBernoulli trialBernoulli :: Rand Int trialBernoulli gen = Just ((2*x)-1,y) where (x,y) = randomR (0,1) gen Any help would be appreciated, thanks.
