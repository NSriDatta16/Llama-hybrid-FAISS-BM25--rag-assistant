[site]: stackoverflow
[post_id]: 3764760
[parent_id]: 3739059
[tags]: 
The option I went with was to implement IDataErrorInfo explicitly in a base class which is extended by all ViewModels and Entities. This seems the best compromise to get things ticking over with WPF, and at least keeps the implementation of IDataErrorInfo hidden to callers so they at least appear clean. I expose a protected ValidateProperty which can be overridden if necessary in subclasses for any custom behaviour (such as for Password/PasswordConfirmation scenario). public abstract class DataErrorInfo : IDataErrorInfo { string IDataErrorInfo.Error { get { return null; } } string IDataErrorInfo.this[string columnName] { get { return ValidateProperty(columnName); } } protected virtual string ValidateProperty(string columnName) { // get cached property accessors var propertyGetters = GetPropertyGetterLookups(GetType()); if (propertyGetters.ContainsKey(columnName)) { // read value of given property var value = propertyGetters[columnName](this); // run validation var results = new List (); var vc = new ValidationContext(this, null, null) { MemberName = columnName }; Validator.TryValidateProperty(value, vc, results); // transpose results var errors = Array.ConvertAll(results.ToArray(), o => o.ErrorMessage); return string.Join(Environment.NewLine, errors); } return string.Empty; } private static readonly Dictionary PropertyLookupCache = new Dictionary (); private static Dictionary > GetPropertyGetterLookups(Type objType) { var key = objType.FullName ?? ""; if (!PropertyLookupCache.ContainsKey(key)) { var o = objType.GetProperties() .Where(p => GetValidations(p).Length != 0) .ToDictionary(p => p.Name, CreatePropertyGetter); PropertyLookupCache[key] = o; return o; } return (Dictionary >)PropertyLookupCache[key]; } private static Func CreatePropertyGetter(PropertyInfo propertyInfo) { var instanceParameter = Expression.Parameter(typeof(object), "instance"); var expression = Expression.Lambda >( Expression.ConvertChecked( Expression.MakeMemberAccess( Expression.ConvertChecked(instanceParameter, propertyInfo.DeclaringType), propertyInfo), typeof(object)), instanceParameter); var compiledExpression = expression.Compile(); return compiledExpression; } private static ValidationAttribute[] GetValidations(PropertyInfo property) { return (ValidationAttribute[])property.GetCustomAttributes(typeof(ValidationAttribute), true); } }
