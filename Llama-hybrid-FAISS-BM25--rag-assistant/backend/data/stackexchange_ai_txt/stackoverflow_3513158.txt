[site]: stackoverflow
[post_id]: 3513158
[parent_id]: 3513128
[tags]: 
There is a simple way for this: (defun rotate (list-of-lists) (apply #'mapcar #'list list-of-lists)) Your attempt is always returning the original mat . Fix your indentation, and you see that the returned value from the if form is always thrown away. Edit: How this works: List takes any number of arguments and makes a list of it. Its function definition can be imagined about like this: (defun list (&rest arguments) arguments) ; exploit the automatic &rest construction Mapcar takes a function and any number of lists, and then makes a new list of the values created by calling the function always with one element from those lists. Example: (mapcar #'foo '((A B) (C D))) will construct a new list, where the first element is the result of (foo 'A 'C) and the second the result of (foo 'B 'D) . Apply takes a spreadable argument list designator as its last argument. This means that if you give it a list as its last argument, that list can be "spread" to produce individual arguments for the function. Example: (apply #'+ '(1 2 3)) has the same effect as (+ 1 2 3) . Now you can expand the line: (apply #'mapcar #'list '((A B) (C D))) => (mapcar #'list '(A B) '(C D)) => (list (list 'A 'C) (list 'B 'D)) => '((A C) (B D))
