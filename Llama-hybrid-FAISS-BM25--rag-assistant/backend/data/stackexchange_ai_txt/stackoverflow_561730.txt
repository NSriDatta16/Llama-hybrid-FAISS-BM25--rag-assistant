[site]: stackoverflow
[post_id]: 561730
[parent_id]: 
[tags]: 
partial template specialization for dynamic dispatch

I am attempting to write a dynamic dispatcher for a function that's templated on integer values (not on types). While I could either write a code generator or use a big macro chain to create the dispatcher source, it seems that a templated solution would be more elegant. I've stripped down my dispatcher to a simple form (which doesn't actually do any dispatching): // works fine with full template specialization template struct TestDispatcher1D { int f(int n) { if (n == N) return n; // replace me with actual dispatch TestDispatcher1D t; return t.f(n); } }; template<> struct TestDispatcher1D { int f(int n) { return -1; } }; // partial template specialization is problematic template struct TestDispatcher2D { int f(int m, int n); }; template struct TestDispatcher2D { int f(int m, int n) { return -1; } }; template struct TestDispatcher2D { int f(int m, int n) { return -1; } }; template<> struct TestDispatcher2D { int f(int m, int n) { return -1; } }; template int TestDispatcher2D ::f(int m, int n) { if ((n == N) && (m == M)) return n + m; // replace me with actual dispatch if (m t; return t(m,n); } else { TestDispatcher2D t; return t(m,n); } } else { TestDispatcher2D t; return t(m,n); } } // test code void testIt() { { TestDispatcher1D t; t.f(16); } { TestDispatcher1D t; t.f(0); } { TestDispatcher2D t; t.f(8,8); } } When compiling this on gcc 4.1.1, I get the following errors: t.cpp: In member function 'int TestDispatcher2D::f(int, int) [with int M = 16, int N = 16]': t.cpp:63: instantiated from here t.cpp:40: error: no match for call to '(TestDispatcher2D) (int&, int&)' t.cpp:63: instantiated from here t.cpp:43: error: no match for call to '(TestDispatcher2D) (int&, int&)' t.cpp:63: instantiated from here t.cpp:47: error: no match for call to '(TestDispatcher2D) (int&, int&)' Apparently, when I try to create the recursive objects, the compiler isn't treating this as a request to instantiate a new template. Any suggestions?
