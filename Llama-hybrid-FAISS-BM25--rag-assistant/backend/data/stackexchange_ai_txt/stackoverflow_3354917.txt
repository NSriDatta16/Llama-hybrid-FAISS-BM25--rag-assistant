[site]: stackoverflow
[post_id]: 3354917
[parent_id]: 3352192
[tags]: 
In all security models, including Windows and SQL Authentication, access rights are granted to an user (an identity), not to an application. therefore, any access right needed by the application must be granted to the user running the application. When Windows authentication is used this means that the same user can leverage all the privileges needed by the application himself, from an SSMS query. This is a fundamental rule any administrator must understand. From a security point of view (meaning things like CC compliance and such) this is a fact and any attempt to circumvent it is doomed. But from a practical point of view, there are certain measures that can be deployed. The most commonly used one is to use a logon trigger that validates the APP_NAME() and allows access for SSMS only from a well defined set of client workstations, and for a well defined set of users. CREATE TRIGGER reject_SSMS ON ALL SERVER WITH EXECUTE AS '...' FOR LOGON AS BEGIN IF (APP_NAME() = 'Microsoft SQL Server Management Studio' OR APP_NAME() = 'Microsoft SQL Server Management Studio - Query') AND (ORIGINAL_LOGIN() NOT IN (...) OR HOST_NAME() NOT IN (...)) ROLLBACK; END; What is important to understand that such mechanisms are NOT security features, as they can be easily circumvented by a malevolent user. They are more like door locks: they don't keep thieves out, they keep honest users honest.
