[site]: stackoverflow
[post_id]: 1834192
[parent_id]: 1834156
[tags]: 
It depends on why you are writing tests. From a Test-Driven Development standpoint, the process you describe is just wrong. From a Quality Assurance standpoint, it makes a lot of sense since it provides you with a regression test suite that works as a safety net as you move forward. The key to developing such methods with TDD is to divide them into smaller chunks (units) and test each chunk in isolation. Instead of having a single method with some input and output and a lot going on behind that method, it will often produce a more flexible and reusable API if you can manage to split it up into a lot of smaller chunks. How do you split up such a method? Start thinking about how you would organize it into private helper methods. Then think about if some (or all) of these helper methods could conceivable be represented by an object in its own right. Design Patterns such as Strategy and Abstract Factory can be enormously helpful in that sense. Instead of a coarse-grained API with a lot of internal logic you'll end up with a fine-grained API with a lot of public, but composable logic.
