[site]: stackoverflow
[post_id]: 1264639
[parent_id]: 1264568
[tags]: 
When you focus on writing tests close after or even before writing the real code you'll prevent yourself from writing too big chunks. When you have a lot of small tests then it's very likely that you structure your code so you're able to write these small tests. This means that the classes don't need a lot of infrastructure to work etc. Things like dependency injection come in handy too because you may want to inject mock classes for your tests. This leads to more loosely coupled classes which will improve the overall code quality and make the code more maintainable. Additionally the safety-net of unittests will help you while the software evolves (and not only after the product is ready). While coding most(aka all) people produce bugs. This leads to longer development of small features. If you write tests the probability for bugs decreases and if you find a bug you can be sure that your fix of the bug won't have sideaffects (if your test coverage of the "other" code is good). This saves a lot of time because you don't have to search for code that may be affected by the last change. This leads to a higher development speed after all. Of course a developer needs to practise to write tests, but you'll get quicker pretty soon. Especially if you get used to libs that help you writing tests like easymock or something like that.
