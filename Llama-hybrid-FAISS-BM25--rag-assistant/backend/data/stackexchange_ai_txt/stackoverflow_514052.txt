[site]: stackoverflow
[post_id]: 514052
[parent_id]: 513783
[tags]: 
Waiting on a timer is a very, very bad idea, quite simply, it's a heuristic and you are guessing when the resize operation is done. A better idea would be to derive a class from WindowsFormsHost and override the WndProc method, handling the WM_SIZE message. This is the message that is sent to a window when the size operation is complete (as opposed to WM_SIZING , which is sent during the process). You can also handle the WM_SIZING message, and not call the base implementation of WndProc when you get this message, to prevent the message from being processed and having the map redraw itself all those times. The documentation for the WndProc method on the Control class shows how to override WndProc method: http://msdn.microsoft.com/en-us/library/system.windows.forms.control.wndproc(VS.71).aspx Even though it is for a different class, it's the same exact principal. Additionally, you will need the values for the WM_SIZING and WM_SIZE constants, which you can find here: http://www.pinvoke.net/default.aspx/Enums/WindowsMessages.html Note that you don't need everything from the link above, just the declarations for those two values: /// /// The WM_SIZING message is sent to a window that /// the user is resizing. By processing this message, /// an application can monitor the size and position /// of the drag rectangle and, if needed, change its /// size or position. /// const int WM_SIZING = 0x0214; /// /// The WM_SIZE message is sent to a window after its /// size has changed. /// const int WM_SIZE = 0x0005;
