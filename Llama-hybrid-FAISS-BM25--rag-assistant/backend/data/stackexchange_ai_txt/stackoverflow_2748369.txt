[site]: stackoverflow
[post_id]: 2748369
[parent_id]: 2744973
[tags]: 
I think forward is the way to go in Haskell. You shouldn't be able to do reverse mode on arbitrary functions, as Edward pointed out. But you responded that you should be able to do it on certain constrained functions. And said constraints can lead readily to forward mode. Eg. if you have a function: foo :: Num a => a -> a -> a Then you can instantiate a with a differentiable type, and thus differentiate foo in forward mode. See the vector-space library on Hackage for very elegant forward mode automatic differentiation. It might not be entirely clear how to use it at first. Read the paper about it, Beautiful Differentiation by Conal Elliott.
