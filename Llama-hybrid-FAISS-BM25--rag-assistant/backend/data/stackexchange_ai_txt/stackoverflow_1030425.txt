[site]: stackoverflow
[post_id]: 1030425
[parent_id]: 1029483
[tags]: 
You definitely have some work cut out for you, but here's a strategy to consider before doing ANY .NET work. Move out as much of the underlying FORM code as you can into a class: One class file per form as a start. In essence, the form event handlers should do nothing but proxy calls to methods in an underlying class instance; all of the custom methods can obviously be shifted over to the class file. After reading the best practices guide (etc.) by Microsoft and others to help you to prepare for .NET migration, you're basically set for the little bits of hell you'll have to recode/refactor: Annoyances such as error handling, event ordering, late bound objects/variants, collections, etc. A word on error handled code: It's is especially hard to duplicate spaghetti on-errors, particularly since the average Visual Basic coder had a bad knack for using it as a flow-of-control logic. It's almost worth breaking apart each On Error block into separate sub-routines, if you have more than a two in a routine. Once the code has been cleaned-up, you may also consider refactoring the Visual Basic code into sensible abstractions (for example, a single data adapter class & connection, etc.), but you'll be the best judge of that. You may not like this approach, so definitely test the waters with one form.
