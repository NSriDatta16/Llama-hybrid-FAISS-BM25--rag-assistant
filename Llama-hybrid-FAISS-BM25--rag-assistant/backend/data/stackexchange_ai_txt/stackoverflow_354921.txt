[site]: stackoverflow
[post_id]: 354921
[parent_id]: 354886
[tags]: 
I would say only if it's very obvious that the side effect will occur. Here is a quick example: MakeMyLifeEasyObject mmleo = new MakeMyLifeEasyObject(x, y, z, default, 12, something); Object uniqueObjectOne = mmleo.getNewUniqueObject(); Object uniqueObjectTwo = mmleo.getNewUniqueObject(); System.out.println(uniqueObjectOne.getId() == uniqueObjectTwo.getId()); // Prints "false" Now in my theory here, the MakeMyLifeEasyObject has some internal counter (like a primary key on a DB table). There is a side effect of the get. I can also come up with the idea of something like this: Object thing = list.getNextObjectAndRemoveFromList(); That would make sense too. Now the caveat of these is that in both cases, it's just better to rename the method . The first one would probably be better as createNewUniqueObject(), while in the second a different name (in this case pop()) would be better. When it's not some semi-contrived example like I gave above, I'd say the ONLY side effects that should be going on is creating/updating some cache if the value takes a long time to create or may be used quite a bit and needs to be sped up. An example of this would be an object that holds a bunch of strings. You have a method, getThingToPrint() that needs to concatenate a bunch together. You could create a cache when that's called, and that would be a side effect. When you update one of the strings that things are based on, the set would invalidate the cache (or update it). Something like what you described? Definatly sounds like a bug. I can't think of a situation where that would be a good idea. If that is an intended behavior and not a bug, then it should be renamed to something else (i.e. disableThingAndGetVisibleRegion()).
