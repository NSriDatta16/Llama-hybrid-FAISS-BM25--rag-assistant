[site]: stackoverflow
[post_id]: 5407198
[parent_id]: 
[tags]: 
What's the best way to create an object factory in objective-c?

I have a hierarchy of classes like this: MyBox | |->ImageBox |->GalleryBox |->MovieBox |-> ... Each one identified by a string like @"image-box" or @"gallery-box" coming from an xml block like this: value1 ... . So i decided to create a factory class, which can create for me the correct object given the xml block: [BoxFactory.h] @interface BoxFactory { NSMutableDictionary* stringToClassMapping; } +(BoxFactory)sharedBoxFactory; -(void)registerClass:(Class)clazz withKey:(NSString*)key; -(MyBox*)getBoxFromXml:(NSString*)xmlBlock; @end [.m] #import "BoxFactory.h" #import "MyFantasticXmlLibrary.h" BoxFactory* gInstance=nil; @implementation BoxFactory +(BoxFactory*)sharedBoxFactory { if (gInstance==nil) gInstance=[[BoxFactory alloc]init]; return gInstance; } -(id)init { self=[super init]; stringToClassMapping=[[NSMutableDictionary alloc]initWithCapacity:10]; return self; } -(void)registerClass:(Class)clazz withKey:(NSString*)key { [stringToClassMapping setObject:clazz forKey:key]; } -(MyBox*)getBoxFromXml:(NSString*)xmlBlock { NSString* key=[MyFantasticXmlLibrary getRootNodeName:xmlBlock]; return [[[stringToClassMapping objectForKey:key]alloc]initWithXml:xmlBlock]; } @end Now the problem is: where should the concrete classes call the registerClass:withKey: method? it seems like the correct place would be in the init method of the BoxFactory, but this means that the Factory must be modified for each class added, which is not scalable for big hierarchies. I really would like to find a way to put the registration call in the concrete class itself, keeping a better organized code and less dependencies. But until now i didn't find a way to execute code when a class is loaded, without init ing an instance of it.
