[site]: stackoverflow
[post_id]: 1076066
[parent_id]: 596262
[tags]: 
A long time ago I worked on a system that had some similar characteristics, and this is an approximation of the algorithm we followed: Divide the picture into zones. In our case we were dealing with 4:3 resolution video, so we used 12 zones. Doing this takes the resolution of the source images out of the picture. For each zone, calculate an overall color - the average of all pixels in the zone For the entire image, calculate an overall color - the average of all zones So for each image, you're storing n + 1 integer values, where n is the number of zones you're tracking. For comparisons, you also need to look at each color channel individually. For the overall image, compare the color channels for the overall colors to see if they are within a certain threshold - say, 10% If the images are within the threshold, next compare each zone. If all zones also are within the threshold, the images are a strong enough match that you can at least flag them for further comparison. This lets you quickly discard images that are not matches; you can also use more zones and/or apply the algorithm recursively to get stronger match confidence.
