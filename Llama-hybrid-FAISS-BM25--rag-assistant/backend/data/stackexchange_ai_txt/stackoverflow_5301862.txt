[site]: stackoverflow
[post_id]: 5301862
[parent_id]: 
[tags]: 
ASP.Net MVC View Model > Model Problem when calling UpdateModel

I'm having a problem that I could use some assistance with. I have an MVC 3 application that I am trying to fetch the form values for when posting back an Edit view but I'm obviously going about this wrong. I have 3 tables with Entity Framework objects mapped to them. A Requestor can have an Order which can in turn have multiple OrderDetails I have also created View Models for each of these entities and I also have created a strongly typed View called Edit which shows all the information and I populate the ViewModels with the following code - this all works fine its just for background information: //Grab the Requestor and corresponding order from the database var requestors = from r in db.Requestors where r.RequestorID == id join o in db.Orders on r.RequestorID equals o.RequestorID select new RequestorViewModel { RequestorID = r.RequestorID, FirstName = r.FirstName, LastName = r.LastName, AddressStreet = r.AddressStreet, AddressNumber = r.AddressNumber, AddressCity = r.AddressCity, AddressPostalCode = r.AddressPostalCode, AddressProvince = r.AddressProvince, Individual = r.Individual, Organization = r.Organization, PhoneNumber = r.PhoneNumber, Email = r.Email, Comment = r.Comment, Order = new OrderViewModel { OrderID = o.OrderID, TotalPamphlets = o.TotalPamphlets, OrderCompletionDate = o.OrderCompletionDate, OrderDate = o.OrderDate, DateRequired = o.DateRequired } }; RequestorViewModel requestor = requestors.Single (); //Get the OrderDetails associated with the Order var orderdetails = from od in db.OrderDetails where od.OrderID == requestor.Order.OrderID select new OrderDetailViewModel { OriginalQuantity = od.OriginalQuantity, UpdatedQuantity = od.UpdatedQuantity, PamphletID = od.PamphletID }; requestor.Order.OrderDetails = orderdetails.ToList (); return requestor; My issue is when I attempt to update the database the only thing that updates is the Requestor Information. My Edit Action looks as follows: [HttpPost] public ActionResult Edit(int ID, FormCollection formValues) { var query = from r in db.Requestors where r.RequestorID == ID select r; var req = query.SingleOrDefault(); UpdateModel(req); db.SaveChanges(); return View("Index"); } And a sample of my Edit View is below: ![Edit View][2] For the Requestor and Order sections I am using the default template generated by Visual Studio and the editors look like this: Requestor: @Html.EditorFor(model => model.FirstName) Order: @Html.EditorFor(model => model.Order.OrderCompleted) In my OrderDetails Section I am naming my controls with the following convention (they are in a loop (shortened for brevity) @foreach (var od in Model.Order.OrderDetails) { int i = 0; @Html.TextBox("OrderDetails[" + i + "].OriginalQuantity", od.OriginalQuantity) i++ } When I look at the Form Collection the keys for for Requestor, Order and Orderdetail look as follows (some examples as I can't post a screen shot): [1]RequestorID [17]Order.OrderCompleteed [22]OrderDetails[0].OriginalQuantity Is it due to me not explicitly converting the OrderViewModel and OrderDetailViewModel to their respective EF entities? Or is it something else I am doing all wrong? Any help is greatly appreciated. Jason
