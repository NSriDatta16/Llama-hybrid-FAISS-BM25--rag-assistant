[site]: stackoverflow
[post_id]: 2673862
[parent_id]: 2649830
[tags]: 
Your criteria The size doesn't bother me, but I'd like to be able to search it as quickly as possible. The file will need to contain a lot of entries, probably over the 10K mark over time says that XML is not suitable. You use XML and serialisation only when you wish to be able to edit the file manually with a text editor you need to pass the file as an argument stream for RPC or inter-system communication. If you have no pressing need for either of the above requirements, I am not able to be convinced that XML should be used at all for persisting large amount of data. What you need is a single file db, so that you could move the file around with your app. I think a good solution is hsqldb http://hsqldb.org/ . What is the advantage you would gain over using hsqldb by using xml and serialization? I find sql/jdbc/jdo much more convenient and familiar. Unless I have good reasons to struggle with using XML as a query-able persistence mechanism or that sql/jdbc/jdo is not my cup of tea or that I have an academic elegance to prove, then my lazy attitude towards completing my task as quick-and-dirty possible would be to use hsqldb. And btw, laziness is the virtue of a good programmer. If you are thinking of serialization/deserialization from/into objects JDO is the perfect way to go. JDO is an interface to the database to allow you to write and retrieve data as objects. http://en.wikipedia.org/wiki/Java_Data_Objects http://www.informit.com/articles/article.aspx?p=212397 . However, if persisting objects is not your requirement, a simple jdbc connection would suffice: Connection c = DriverManager.getConnection("jdbc:hsqldb:file:mydb", "SA", "");
