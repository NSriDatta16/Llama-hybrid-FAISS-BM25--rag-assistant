[site]: stackoverflow
[post_id]: 77442
[parent_id]: 76526
[tags]: 
The exact circumstances are obviously very specific to your project ( e.g. development team, management style, process maturity, difficulty of the subject matter, etc.). In order to scope this a bit better so we can speak about it in anything but sweeping oversimplifications, I'm going to restate your question: Under what circumstances, if any, can adding team members to a software development project that is running late result in a reduction in the actual ship date with a level of quality equal to that if the existing team were allow to work until completion? There are a number of things that I think are necessary , but not sufficient, for this to occur (in no particular order): The proposed individuals to be added to the project must have: At least a reasonable understanding of the problem domain of the project Be proficient in the language of the project and the specific technologies that they would use for the tasks they would be given Their proficiency must /not/ be much less or much greater than the weakest or strongest existing member respectively. Weak members will drain your existing staff with tertiary problems while a new person who is too strong will disrupt the team with how everything they have done and are doing is wrong. Have good communication skills Be highly motivated (e.g. be able to work independently without prodding) The existing team members must have: Excellent communication skills Excellent time management skills The project lead/management must have: Good prioritization and resource allocation abilities A high level of respect from the existing team members Excellent communication skills The project must have: A good, completed, and documented software design specification Good documentation of things already implemented A modular design to allow clear chunks of responsibility to be carved out Sufficient automated processes for quality assurance for the required defect level These might include such things as: unit tests, regression tests, automated build deployments, etc.) A bug/feature tracking system that is currently in-place and in-use by the team (e.g. trac, SourceForge, FogBugz, etc). One of the first things that should be discussed is whether the ship date can be slipped, whether features can be cut, and if some combinations of the two will allow you to satisfy release with your existing staff. Many times its a couple features that are really hogging the resources of the team that won't deliver value equal to the investment. So give your project's priorities a serious review before anything else. If the outcome of the above paragraph isn't sufficient, then visit the list above. If you caught the schedule slip early, the addition of the right team members at the right time may save the release. Unfortunately, the closer you get to your expected ship date, the more things can go wrong with adding people. At one point, you'll cross the "point of no return" where no amount of change (other than shipping the current development branch) can save your release. I could go on and on but I think I hit the major points. Outside of the project and in terms of your career, the company's future success, etc. one of the things that you should definitely do is figure out why you were late, if anything could have been done alert you earlier, and what measures you need to take to prevent it in the future. A late project usually occurs because you were either: Were late before you started (more stuff than time) and/or slipped 1hr, 1day at time. Hope that helps!
