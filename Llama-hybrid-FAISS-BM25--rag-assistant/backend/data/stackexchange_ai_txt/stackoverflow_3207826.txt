[site]: stackoverflow
[post_id]: 3207826
[parent_id]: 3205065
[tags]: 
It's because programming languages are influenced by mathematics, logic and set theory in particular. Boolean algebra defines ∧, ∨ operators in a way that they do not work like spoken natural language. Your example would be written as: Let p(x) be unary relation which holds if and only if x is a primary color p(x) ⇔ r(x) ∨ g(x) ∨ b(x) or p(x) ⇔ (x=red) ∨ (x=green) ∨ (x=blue) As you see, it's pretty similar to notation that would be used in programming language. As mathematics provide strong theoretic foundations, programming languages are based on mathematics rather than natural language which always leaves a lot of space for interpretation. EDIT: Above statement could be simplified by using set notation: p(x) ⇔ x ∈ {red, green, blue} and indeed, some programming languages, most notably Pascal, included set, so you could type: type color = (red, green, blue, yellow, cyan, magenta, black, white); function is_primary (x : color) : boolean; begin is_primary := x in [red, green, blue] end But sets as a language feature didn't catch on. PS. Sorry for my imperfect English.
