[site]: stackoverflow
[post_id]: 4109038
[parent_id]: 4107960
[tags]: 
I recreated your code locally and did a small experimentation, as a result I found that if you make the stream local to the for loop and use the enc.Save inside Using stream As New FileStream(System.IO.Path.Combine(outputDir, i.ToString() & ".jpg"), FileMode.Create, FileAccess.Write) the total private bytes stays approximately at 60 MB (against 80+ MB when not used inside using ). My complete code for your reference: Dim fileName As String = System.IO.Path.Combine(Environment.CurrentDirectory, "Image1.tif") Dim outputDir As String = System.IO.Path.Combine(Environment.CurrentDirectory, "Out") Dim imageSource As BitmapSource = TiffBitmapDecoder.Create(New Uri(fileName), BitmapCreateOptions.IgnoreImageCache, BitmapCacheOption.None).Frames(0) Dim enc As JpegBitmapEncoder Dim croppedImage As CroppedBitmap For i As Integer = 0 To 4999 croppedImage = New CroppedBitmap() croppedImage.BeginInit() croppedImage.Source = imageSource croppedImage.SourceRect = New Int32Rect(0, 0, 256, 256) croppedImage.EndInit() enc = New JpegBitmapEncoder() enc.QualityLevel = 70 enc.Frames.Add(BitmapFrame.Create(croppedImage)) Using stream As New FileStream(System.IO.Path.Combine(outputDir, i.ToString() & ".jpg"), FileMode.Create, FileAccess.Write) enc.Save(stream) End Using enc = Nothing croppedImage.Source = Nothing croppedImage = Nothing Next imageSource = Nothing
