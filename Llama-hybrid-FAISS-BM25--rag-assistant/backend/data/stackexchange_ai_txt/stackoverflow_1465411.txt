[site]: stackoverflow
[post_id]: 1465411
[parent_id]: 1465079
[tags]: 
If you have moved it, then add a reference to the dll where it now resides, and use TypeForwardedToAttribute : [assembly:TypeForwardedTo(typeof(TheType))] This will be enough for some requests (including BinaryFormatter IIRC) looking for a type to find it in the new assembly. However, IIRC it only works for outermost types (not nested types, and probably not generics), and you can't have renamed it / changed the namespace / etc. Renaming is tricker... BinaryFormatter is notoriously brittle about such things. IMO, it is only suitable for serializing transient data between two tightly coupled systems (for example, exchange between two AppDomain s in the same process; when used for storage, or between systems that might get out of sync, it can be a nightmare. It may be too late, but I would recommend using a contract-based serializer (rather than a type-based serializer); any of XmlSerializer , DataContractSerializer (as long as you use the [DataContract] / [DataMember] attributes), etc. Of if you want fast binary, protobuf-net would do a good job (and can hook into ISerializable if you need). Another concept that might be worth looking at is serialization surrogates, but that is relatively hard. But IIRC this gives you the control over the type that is created - but you need to do a lot of the work for it.
