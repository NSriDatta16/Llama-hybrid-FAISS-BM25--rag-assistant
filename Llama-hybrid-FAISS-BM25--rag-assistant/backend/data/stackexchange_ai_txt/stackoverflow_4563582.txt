[site]: stackoverflow
[post_id]: 4563582
[parent_id]: 4562066
[tags]: 
Probably the cleanest way would be to use standard, existing tags from jstl/sql and make a simple tagfile instead of a tag class: select * from ${table} ${temporary_value} ${temporary_value} If you place the code in your WEB-INF/tags as, say, dbtable.tag, you can use it like so: The reference to the database must be made in web.xml, and you must have standard JSTL jars somewhere in your classpath. Note that building sql like this requires constant attention as not to allow sql injection. In your design there is a great tension between: static typing, object orientation and layering - displayed by using Spring / daos / JPA model 1 architecture, flat (as opposed to layered) design, mixing HTML with logic - displayed by wish to create queries on demand, displaying "records" (as opposed to "making a view of an object graph"), placing business queries in the HTML template etc. Both approaches are OK (depends on problems you are trying to solve and the scope of your application), but they really don't mix well. Right now it seems like you are getting drawbacks of both approaches and the benefits of none. I would recommend you either: drop Spring and daos and go with pure jstl/sql; this will make your application a simple, thin layer around your database; you are free to use views and stored procedures to encapsulate the real logic; many large applications work exactly like this, especially those written by people with strong database skills. drop the idea of "magic table tag"; make a set of javabeans that are not of a one-size-fits-all variety, but are tailored to specific tasks. Have them injected by Spring, use daos, declarative transaction demarcation etc. This will make your code much longer and less universal, but (if done right) easier to maintain over years to come.
