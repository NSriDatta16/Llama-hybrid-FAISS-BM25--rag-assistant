[site]: stackoverflow
[post_id]: 498349
[parent_id]: 498224
[tags]: 
Personally I don't think 30 is particularly large for a regex so I wouldn't be too quick to rule it out. You can create the regex with a single line of code: var acronyms = new[] { "AB", "BC", "CD", "ZZAB" }; var regex = new Regex(string.Join("|", acronyms), RegexOptions.Compiled); for (var match = regex.Match("ZZZABCDZZZ"); match.Success; match = match.NextMatch()) Console.WriteLine(match.Value); // returns AB and CD So the code is relatively elegant and maintainable. If you know the upper bound for the number of acronyms I would to some testing, who knows what kind of optimizations there are already built into the regex engine. You'll also be able to benefit for free from future regex engine optimizations. Unless you have reason to believe performance will be an issue keep it simple. On the other hand regex may have other limitations e.g. by default if you have acronyms AB, BC and CD then it'll only return two of these as a match in "ABCD". So its good at telling you there is an acronym but you need to be careful about catching multiple matches. When performance became an issue for me (> 10,000 items) I put the 'acronyms' in a HashSet and then searched each substring of the text (from min acronym length to max acronym length). This was ok for me because the source text was very short. I'd not heard of it before, but at first look the Aho-Corasick algorithm, referred to in the question you reference, seems like a better general solution to this problem.
