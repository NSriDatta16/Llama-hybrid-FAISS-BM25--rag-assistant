[site]: stackoverflow
[post_id]: 2419857
[parent_id]: 
[tags]: 
Java or C++ for my particular agent-based model (ABM)?

I unfortunately need to develop an agent-based model. My background is C++; I'm decent but not a professional programmer. My goal is to determine whether, my background aside for the moment, the following kind of algorithm would be faster or dramatically easier to write in C++ or Java. My agents will be of class Host . Their private member variables include their infection and immune statuses (type int ) with respect to different strains. (In C++, I might use an unordered_map or vector to hold this information, depending on the number of strains.) I plan to keep track of all hosts in a vector, vector hosts . The program will need to know at any time all the particular hosts infected with a particular strain or with immunity to a particular strain. For each strain, I could thus maintain two separate structures, e.g., vector immune and vector infectious (I might make each two-dimensional, indexed by strain and then host). Hosts can die. It seems like this creates a mess in C++, in that I would have to find the right individual to kill in host and search through the other structures ( immune and infectious ) to find all pointers to this object. I'm under the impression that Java will delete all these pointers implicitly if I delete the underlying object. Is this true? Is there a dramatically better way to do this in C++ than what I have here? Thanks in advance for any help. I should add that if I use C++, I will use smart pointers. That said, I still don't see a slick way to delete all pointers to an object when the object needs to go. (When a host dies, I want to delete it from memory.) I realize there's a lot to learn in Java. I'm hoping someone with more perspective on the differences between the languages, and who can understand what I need to do (above), can tell me if one language will obviously be more efficient than another.
