[site]: stackoverflow
[post_id]: 2360143
[parent_id]: 2356472
[tags]: 
There is a difference between maximal and maximum . I have assumed you meant maximum for the below writeup. You don't seem to have defined your problem very clearly, but if I have understood your intent correctly, It seems like your problem is NP complete (and 'equivalent' to Set Packing ). We can assume that the allowed sets sizes is the same (k) for all A_i to find a [1:k] matching, as any other set size can be ignored. To find max k, we just run the algorithm for [1:k] for k = 1,2,3.. etc. So your problem is (I think...): Given m set families F_i = {S_1i, .., S_n(i)i} (|F_i| = size of F_i = n(i), need not be same as |F_j|), each set of size k, you have to find one set from each family (say S_i) such that S_i and S_j are disjoint for any i neq j. number of S_i's is maximum. We can show that it is NP-Complete for k=3 in two steps: The NP-Complete problem Set Packing can be reduced it. This shows that it is NP-Hard. Your problem is in NP and can be reduced to Set Packing. This and 1) implies your problem is NP-Complete. It also helps you leverage any approximation/randomized algorithms already existing for Set-Packing. Set Packing is the problem: Given n sets S_1, S_2, ..., S_n, find the maximum number of pairwise disjoint sets among these. This problem remains NP-Complete even if |S_1| = |S_2| = ... = |S_n| = 3 and is called the 3-Set packing problem. We will use this to show that your problem is NP-Hard, by providing an easy reduction from 3-Set packing to your problem. Given S_1, S_2, .., S_n just form the families F_i = {S_i}. Now if your problem had a polynomial time solution, then we get a set of Sets {S_1, S_2, ..., S_r} such that S_i and S_j are disjoint Number of S_i is maximum. This easy reduction gives us a solution to the 3-set Packing problem and thus your problem is NP-Hard. To see that this problem is in NP, we reduce it to Set-Packing as follows: Given F_i = {S_1i, S_2i, ..., S_ni} we consider the sets T_ji = S_ji U {i} (i.e. we add an id of the family into the set itself) and run them through the Set-Packing algorithm. I will leave it to you to see why a solution to Set-Packing gives a solution to your problem. For a maximal solution, all you need is a greedy algorithm. Just keep picking up sets till you can pick no more. This would be polynomial time.
