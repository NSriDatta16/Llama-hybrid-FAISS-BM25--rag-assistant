[site]: stackoverflow
[post_id]: 2990357
[parent_id]: 2990247
[tags]: 
I think the choice of algorithm requires more information about how it's going to be used. From your comment that you want better than linear search, I'm assuming that the speed of search is important. Your comments on contiguous memory lead me to believe that you want to minimize memory consumption. I'd suggest that a self-balancing tree structure ( Red-Black tree) might be appropriate. It would have amortized log(N) insert/delete allowing you to achieve both of the goals I outlined. If memory use is less of a problem, a hashtable would be more efficient for lookup. You can implement a bounded-size tree in contiguous memory -- though the actual elements themselves are not necessarily contiguous. If, on the other hand, I knew that the order of insertion was random but that the order of retrieval was deterministic and ordered by key, then I might suggest a priority queue using a heap implementation.
