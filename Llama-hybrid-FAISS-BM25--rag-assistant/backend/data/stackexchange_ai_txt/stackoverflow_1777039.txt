[site]: stackoverflow
[post_id]: 1777039
[parent_id]: 1777002
[tags]: 
Since C allows you to cast to your heart's content, there's no such thing as a wrong type for sendto() . You simply cast the address of your struct to a void * and pass that as the argument to sendto() . However , a lot of people will impress on you that it's not advisable to send structs this way in the first place: If the programs on either side of the connection are compiled by different compilers or in different environments, chances are your struct s will not have the same packing. If the two hosts involved in the transfer don't have the same endinanness, part of your data will end up backwards. If the host architectures differ (e.g. 32 bit vs. 64 bits) then sizes of structs may be off as well. Certainly there will be size discrepancies if the sizes of your basic data types (int, char, long, double, etc.) differ. So... Please take the advice of the first paragraph only if you're sure your two hosts are identical twins, or close enough to it. In other cases, consider converting your data to some kind of neutral text representation, which could be XML but doesn't need to be anything that complicated. Strings are sent as a sequence of bytes, and there's much less that can go wrong. Since you control the format, you should be able to parse that stuff with little trouble on the receiving side. Update You mention that you're transferring mostly bit fields. That means that your data essentially consists of a bunch of integers, all of them less than (I'm assuming) 32 bits. My suggestion for a "clean" solution, therefore, would be to write a function to unpack all those bit fields, and to ship the whole works as an array of (perhaps unsigned) integers. Assuming that sizeof(int) is the same across machines, htons() will work successfully on the elements (each individually!) of those arrays, and you can then wrap them back into a structure on the other side.
