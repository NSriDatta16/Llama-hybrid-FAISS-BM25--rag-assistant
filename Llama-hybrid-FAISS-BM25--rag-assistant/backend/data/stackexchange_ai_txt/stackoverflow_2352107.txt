[site]: stackoverflow
[post_id]: 2352107
[parent_id]: 2293751
[tags]: 
Are you always going to be hitting these in a certain order, one after the other, where only one color is valid at a time? If so, you can create a stack of UIImage s (I don't think there's a built-in stack data type, but you can simulate it easily with NSMutableArray ) consisting of the colors in order. You also keep track of all the color-circle subviews on the screen in a separate NSMutableArray . Then, whenever a user hits a circle, execute the following code: if(hitImageView.image == [imageStack peek]) { //"hit the right one" logic //you hit it, so remove it from the screen [allImageViews removeObject:hitImageView]; [hitImageView removeFromSuperView]; //if it was the last imageview of the "correct" color... BOOL wasLast = YES; for(UIImageView *imageView in allImageViews) { if(imageView.image == [imageStack peek]) { wasLast = NO; break; } } //...then set the correct color to whatever is next if(wasLast) [imageStack pop]; if(![imageStack hasItems]) ;//"won the game" logic } else { //"hit the wrong one" logic } (This is O(N) for determining remaining circles, but if you're dealing with such a small set then it really doesn't matter. If you needed to optimize it, you could of course keep track of the remaining counts of each color.) On another note, you'll be a much happier person if, instead of using that gigantic if-else block to identify the correct color, you just name the files color1.png , color2.png , etc. and say [UIImage imageNamed:[NSString stringWithFormat:@"color%i.png", randNum]];
