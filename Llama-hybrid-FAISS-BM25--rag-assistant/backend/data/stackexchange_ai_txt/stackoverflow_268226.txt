[site]: stackoverflow
[post_id]: 268226
[parent_id]: 267862
[tags]: 
A lisp macro takes a program fragment as input. This program fragment is represented a data structure which can be manipulated and transformed any way you like. In the end the macro outputs another program fragment, and this fragment is what is executed at runtime. C# does not have a macro facility, however an equivalent would be if the compiler parsed the code into a CodeDOM-tree, and passed that to a method, which transformed this into another CodeDOM, which is then compiled into IL. This could be used to implement "sugar" syntax like the for each -statement using -clause, linq select -expressions and so on, as macros that transforms into the underlying code. If Java had macros, you could implement Linq syntax in Java, without needing Sun to change the base language. Here is pseudo-code for how a lisp-style macro in C# for implementing using could look: define macro "using": using ($type $varname = $expression) $block into: $type $varname; try { $varname = $expression; $block; } finally { $varname.Dispose(); }
