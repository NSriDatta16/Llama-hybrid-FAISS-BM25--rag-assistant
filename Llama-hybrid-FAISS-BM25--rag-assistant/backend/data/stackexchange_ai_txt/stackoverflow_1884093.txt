[site]: stackoverflow
[post_id]: 1884093
[parent_id]: 1883997
[tags]: 
It's most likely an issue with how Delphi is storing the record structure and this being incompatible with the record structure in the DLL. I've had similar issues with DLLs I've written in C interfacing to Delphi. To quote Normally, complex data types, such as records have their elements aligned to 2, 4 or 8 byte boundaries, as appropriate to the data type. For example, a Word field would be aligned to a 4 byte boundary. Records are also padded to ensure that they end on a 4 byte boundary. Consequently when you pass the record the field alignment will most likely differ from the definition being used internally and you see an access violation. Because the memory allocation differ between static and dynamic it's perfectly possible for the behaviour to see arise because the static allocation coincidentally does align properly. The first thing to try is to use the Packed keyword on the record. TPackedRecord = Packed Record Again to quote the manual The Packed keyword tells Delphi to minimise the storage taken up by the defined object. The Packed overrides this, compressing the data into the smallest storage, albeit with consequential reduced access performance. Assuming your calling conventions are correct I would expect this to solve the issue.
