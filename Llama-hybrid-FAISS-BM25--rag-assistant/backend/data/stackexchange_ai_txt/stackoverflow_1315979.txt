[site]: stackoverflow
[post_id]: 1315979
[parent_id]: 1315929
[tags]: 
I think that you're asking two distinct, but related questions. First, how is the data for my program organized? Different architectures do it different ways but basically, a program is composed of 3 (or 4 depending on how you count them): data (the heap and static global data), the stack (local and function call/return data), and the text (code). Second, how does the computer run my program? This is really a question about computer architecture and operating system semantics. The program counter , or instruction pointer, typically is one of many registers in the CPU that are used in running your program. It keeps track of the memory location of the currently executing instruction. Others include the stack (or frame) pointer (the current location of the executing function's stack frame), the program status word (information about the results of the current instruction), and data registers. There is a lot more that goes into running your program, and I've only skimmed the surface of the low-level hardware bits, but the questions you raise really require a textbook for a complete understanding. For a more thorough treatment, I'd suggest picking up a copy of Computer Organization and Architecture at your local bookstore or library.
