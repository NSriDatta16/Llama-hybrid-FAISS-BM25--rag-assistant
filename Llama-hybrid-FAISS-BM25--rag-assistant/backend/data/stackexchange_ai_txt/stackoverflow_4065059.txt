[site]: stackoverflow
[post_id]: 4065059
[parent_id]: 4064984
[tags]: 
You might want to show more of your code, like exactly what strings you're using that are causing this problem. I'm easily able to sort a set of German words, and any words beginning with non-ASCII special German characters are ordered at the end. This happens even without any special German locale settings, since in Unicode non-ASCII characters have higher codepoint values than ASCII characters. For example: setlocale(LC_ALL, ""); std::vector vec; vec.push_back(L"Hallo"); vec.push_back(L"Morgen"); vec.push_back(L"Zebra"); vec.push_back(L"Abend"); vec.push_back(L"Übertragens"); vec.push_back(L"Buchen"); std::sort(vec.begin(), vec.end()); for (std::vector ::iterator it = vec.begin(); it != vec.end(); ++it) std::wcout This outputs: Abend Buchen Hallo Morgen Zebra Übertragens Note the use of wide character strings. Since lexicographical comparison routines compare character-by-character, you need to use wide characters or else the comparison function will end up comparing the string byte-by-byte instead of character-by-character. This will result in invalid comparisons since not every Unicode character can be stored in a single byte. Special German characters, for example, are 2 bytes in UTF-8, so you need a data type capable of containing the range of 0x00 to 0xFFFF in a single element. On most platforms, wchar_t is sufficient for this. (Also note that it's not a good practice to include non-ASCII characters in source code. Use "universal character codes" instead. I'm just using non-ASCII source here for clarity.)
