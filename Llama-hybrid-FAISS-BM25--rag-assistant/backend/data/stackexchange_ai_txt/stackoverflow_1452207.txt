[site]: stackoverflow
[post_id]: 1452207
[parent_id]: 1452154
[tags]: 
Seems like you've created a messy problem by having a class that tries to do too many things. I would suggest taking one of the following three approaches: 1) Write two classes, one for updates and one for retrievals. Each class creates it's own private NSURLConnection object and acts as the delegate for the async notifications received from the NSURLConnection. The classes could possible share some utility parsing code or extend a base object that has that parsing code in it. But the key being that the code calling these classes would instantiate one of them, make the call, and then release it. This will keep your code cleaner and will insure that the event notifications don't get intermingled. 2) Create a single class that, depending on initialization, does either a post or a get with it's own private instance of NSURLConnection. When a call needs to be made, instantiate the class, get the results, and then release the class. 3) Write your connection handling classes so they use the synchronous NSURLConnection method and call that call that class in a background thread. Either way, clean code and clear object orientation will prevent messy scenarios like the one you're describing.
