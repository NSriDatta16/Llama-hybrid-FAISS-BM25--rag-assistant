[site]: stackoverflow
[post_id]: 2898923
[parent_id]: 2898828
[tags]: 
The problem is exactly what the error message says. Abc.h declares the variable, but it doesn't define it. The line in a.cpp defines it. That is, a.cpp is where the physical storage of the variable appears. There is no such line in b.cpp, so when you try compiling that program, the linker is left without any storage defined for that variable. If you had omitted the "extern" specifier in the header, then b.cpp would have compiled fine, but a.cpp would likely have given an error about multiple definitions. The "extern" specifier plays a larger role when you have multiple source files in a single program. In that case, they would probably all include abc.h, but without "extern," each compiled object files would have its own independent definition of the same variable. The linker generally won't know what to do with that, and will probably complain, although I don't think it's required to do so. The fix is to use "extern" so each compiled file file only has a declaration . Then you pick one source file to place the definition in. You'd probably put it in abc.cpp since the declaration is in abc.h.
