[site]: stackoverflow
[post_id]: 4503809
[parent_id]: 4500007
[tags]: 
The number of characters in a std::string can be had by the " size()" member of std::string. std::string s = "Hey, look, I'm a string!" std::string::size_type len = s.size(); std::cout As people have pointed out, you cannot rely upon the memory organization of std::string, except for two cases: std::string::data() and std::string::c_str() . Each of these functions return a pointer to contiguous memory, which memory holds the same characters as the string. (The memory may or may not point to the real string, but it doesn't matter, you can't write to it anyway.) The difference between the two calls is whether the memory has a terminating null byte: data() has no terminating character, c_str() does. // assuming that bsp_put_bytes takes a pointer & len bsp_put_bytes(s.data(), s.size()); // and bsp_put_string takes a C-style string bsp_put_string(s.c_str()); Carefully read the caveats in the links I gave you, including the valid lifetime of the pointed-to characters.
