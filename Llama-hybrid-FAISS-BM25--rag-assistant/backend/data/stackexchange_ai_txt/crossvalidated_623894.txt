[site]: crossvalidated
[post_id]: 623894
[parent_id]: 
[tags]: 
How reliable is ```train_test_split```? Is there a way to optimize it?

Using train_test_split is a common practice while building a Machine Learning model. Nevertheless, partitioning your dataset to get train and test samples is an specially delicate issue. If you trust on pure randomness, the output might be representative of the correlation(s) that you are trying to look for. Or might not. It could even ‘find’ correlations that do not exist. Is there a way to ensure that train_test_split is doing its job properly? Just for the sake of suggestion, you could use an auxiliary Random Forest model, let's say like this: from sklearn.preprocessing import RobustScaler from sklearn.datasets import make_circles from sklearn.ensemble import RandomForestClassifier """ We will build a dummy Random Forest model, just trying to extract as many information as possible from our dataset. We assume that the more information is extracted, the greater the Out-Of-Bag Score will be. Please note that max_depth is set to a low value (3) because we would like to discard the noisy samples, not to analyze the samples exhaustively. """ dummy = RandomForestClassifier(criterion='entropy', max_depth=3, max_samples=0.8, n_estimators=100, n_jobs=-1, oob_score=True) dataset = make_circles(n_samples=150, noise=0.3, factor=0.3) def auxPartitioner(n): X_train, X_test, y_train, y_test = train_test_split(p, q, random_state=n, test_size=0.3) scaler = RobustScaler().fit(X_train) normalized_train_X = scaler.fit_transform(X_train) auxRF = dummy.fit(normalized_train_X, y_train) print(auxRF.oob_score_) return auxRF.oob_score_ p, q = dataset """ Now we will search a number between 0 and 199 (or whatever interval) which maximizes the OOB Score of the dummy Random Forest, when is used as the seed of random_state. That could indicate a good degree of correlation in the output sample. """ n = max(range(200), key=auxPartitioner) print(n) X_train, X_test, y_train, y_test = train_test_split(p, q, random_state=n, test_size=0.3)
