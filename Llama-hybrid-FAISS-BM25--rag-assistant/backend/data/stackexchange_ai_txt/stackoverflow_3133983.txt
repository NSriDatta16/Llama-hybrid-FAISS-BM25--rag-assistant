[site]: stackoverflow
[post_id]: 3133983
[parent_id]: 3131440
[tags]: 
document.id("clicker").addEvents({ "boobies": function() { console.info("nipple police"); this.store("boobies", (this.retrieve("boobies")) ? this.retrieve("boobies") + 1 : 1); if (this.retrieve("boobies") == 5) this.removeEvents("boobies"); }, "click": function() { // original function can callback boobies "even" this.fireEvent("boobies"); // do usual stuff. } }); adding a simple event handler that counts the number of iterations it has gone through and then self-destroys. think of events as simple callbacks under a particular key, some of which are bound to particular events that get fired up. using element storage is always advisable if possible - it allows you to share data on the same element between different scopes w/o complex punctures or global variables. Natives should not be modded like so, just do: Element.implement({ newMethod: function() { // this being the element return this; } }); document.id("clicker").newMethod(); unless, of course, you need to define something that applies to window or document as well.
