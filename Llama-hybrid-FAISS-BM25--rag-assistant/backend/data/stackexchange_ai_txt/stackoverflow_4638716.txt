[site]: stackoverflow
[post_id]: 4638716
[parent_id]: 4638420
[tags]: 
Mathematically, you can get the desired result by averaging the two images. If you want to emphasize one image or the other, you can use a weighted average. In MATLAB: function imgC = AverageImages(imgA, imgB, weight) %# AverageImages - average two input images according to a specified weight. %# The two input images must be of the same size and data type. if weight 1 error('Weight out of range.') end c = class(imgA); if strcmp(c, class(imgB)) != 1 error('Images should be of the same datatype.') end %# Use double matrices for averaging so we don't lose a bit x = double(imgA); y = double(imgB); z = weight*x + (1-weight)*y; imgC = cast(z, c); %# return the same datatype as the input images The actual averaging takes place in the line z = weight*x + (1-weight)*y; If you specify weight = 0.5 , the output image will be an equal mix of the two inputs. If you specify 0.9 , the output will be 90% imgA and 10% imgB . The reason for casting the input images to a double data type is because images are usually uint8 , which is limited to 0..255. The simple math here should not run into any problems with this data type, but it's a good habit to do your math in floating-point and then cast back to the image's desired data type. For aesthetic reasons, you might want to average different areas of the images with different weights. You can extend the function to accept either a scalar or a 2D matrix for weight . In the latter case, you just multiply each pixel by the corresponding entry in the weight matrix.
