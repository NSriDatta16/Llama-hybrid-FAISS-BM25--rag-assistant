[site]: stackoverflow
[post_id]: 5261472
[parent_id]: 3626071
[tags]: 
I used to use solution proposed by DeRagan. But it turned out that creating a single WebView instance starts a thread "WebViewCoreThread" which stays on the background until application is terminated by the system. Maybe it doesn't consume too much resources but I don't like it anyway. So I use slightly different method now, which tries to avoid WebViewCoreThread creation: // You may uncomment next line if using Android Annotations library, otherwise just be sure to run it in on the UI thread // @UiThread public static String getDefaultUserAgentString(Context context) { if (Build.VERSION.SDK_INT >= 17) { return NewApiWrapper.getDefaultUserAgent(context); } try { Constructor constructor = WebSettings.class.getDeclaredConstructor(Context.class, WebView.class); constructor.setAccessible(true); try { WebSettings settings = constructor.newInstance(context, null); return settings.getUserAgentString(); } finally { constructor.setAccessible(false); } } catch (Exception e) { return new WebView(context).getSettings().getUserAgentString(); } } @TargetApi(17) static class NewApiWrapper { static String getDefaultUserAgent(Context context) { return WebSettings.getDefaultUserAgent(context); } } It creates WebSettings instance directly using package-visible constructor and if that is not available for some reason (e.g. due to API changes in future Android versions) - silently falls back to "WebView-like" solution. UPDATE As pointed by @Skywalker5446 , starting from Android 4.2/API 17, there is a public static method to get default user agent value. I've updated my code to use that method on the supported platforms.
