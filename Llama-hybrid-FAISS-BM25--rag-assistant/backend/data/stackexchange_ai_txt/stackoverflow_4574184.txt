[site]: stackoverflow
[post_id]: 4574184
[parent_id]: 
[tags]: 
Type inference in Java (Ã  la C#)

Ever since I heard of type inference (in Haskell), I lived under the impression that Java is the exact opposite, i.e., it has no type inference. Recently though, I had an aha moment and realized that Java employs type inference in its generics implementation. Then, I read two papers by Gilad Bracha (one of the people behind the generics implementation in Java, as far as I understand). The first paper is a tutorial about generics (PDF), in which he explicitly says that the compiler will infer the actual type argument used to replace the format type parameter. So, there's type inference in Java, but why only for generics, why not something like C#'s var keyword? And this is my question to you. Why doesn't Java has more type inference built into the compiler? I will suggest an answer though, and this is related to the second paper that I read, Pluggable Type Systems (PDF). It seems, Gilad Bracha believes that the inference part shouldn't be part of the compiler, but an IDE feature or similar (section 4, paragraph 6 in the above mentioned paper): A better engineering approach is to implement type inference as a separate tool, available in the IDE. Programmers who find entering type annotations tiresome can invoke an inferencer on demand. What do you think?
