[site]: crossvalidated
[post_id]: 497569
[parent_id]: 487248
[tags]: 
Since you did not provide the data, most likely the variables you are plotting are columns from the dataset that are not useful in the clustering or are too small in magnitude. I will use an example below: import numpy as np import pandas as pd from sklearn import datasets np.random.seed(111) iris = datasets.load_iris() df=pd.DataFrame(iris.data,columns=iris.feature_names) d1 = pd.DataFrame({'x1':np.random.uniform(0,1,150),'x2':np.random.uniform(0,1,150)}) df = pd.concat([d1,df],axis=1) The first two columns don't have useful information and are lower in magnitude compared to the iris data. So if you run kmeans and only plot the first two columns, you see no pattern: from sklearn.cluster import KMeans import seaborn as sns X_train = df.sample(100) X_val = df.drop(X_train.index).to_numpy() X_train = X_train.to_numpy() n_clusters = 4 kmeans = KMeans(n_clusters=n_clusters).fit(X_train) c_train = kmeans.predict(X_train) sns.scatterplot(x=X_train[:,0],y=X_train[:,1],hue=c_train) The better way is to scale your data, do kmeans and plot on a PCA: from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler pca = PCA(n_components=2) sc = StandardScaler() X_scaled = sc.fit_transform(X_train) PCs = pca.fit_transform(X_scaled) n_clusters = 3 kmeans = KMeans(n_clusters=n_clusters).fit(X_scaled) c_train = kmeans.predict(X_scaled) sns.scatterplot(x=PCs[:,0],y=PCs[:,1],hue=c_train) So you can do likewise for your data, scale all columns, perform kmeans and plot on PCA
