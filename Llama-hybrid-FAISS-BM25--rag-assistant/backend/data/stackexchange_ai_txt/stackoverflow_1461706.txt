[site]: stackoverflow
[post_id]: 1461706
[parent_id]: 1460650
[tags]: 
I don't fully follow the description (would a comment really be owned by the trip owner?), but expanding slightly on jonnii's answer, here is an example that restricts the trip controller: class ApplicationController "Not Allowed", :status => :forbidden } end end end end class TripsController [:show, :edit, :update, :destroy] before_filter :require_owner, :only => [:show, :edit, :update, :destroy] ... protected def get_trip @trip = Trip.find(params[:id]) end end Assuming the model looks like this: class Trip 'User' ... def is_owned_by?(agent) self.owner == agent # or, if you can safely assume the agent is always a User, you can # avoid the additional user query: # self.owner_id == agent.id end end The login_required method (provided by or relying on an auth plugin like restful_authentication or authlogic) makes sure that the user is logged in and provides the user with a current_user method, get_trip sets the trip instance variable which is then checked in require_owner . This same pattern can be adapted to just about any other resource, provided the model has implemented the is_owned_by? method. If you are trying to check it when the resource is a comment, then you'd be in the CommentsController : class CommentsController [:show, :edit, :update, :destroy] before_filter :require_owner, :only => [:show, :edit, :update, :destroy] ... protected def get_comment @comment = Comment.find(params[:id]) end end with a Comment model that looks like: class Comment :trip # or the long way: def is_owned_by?(agent) self.trip.is_owned_by?(agent) end end Make sure to check the logs as you are doing this since association-dependent checks can balloon into a lot of queries if you aren't careful.
