[site]: stackoverflow
[post_id]: 3371334
[parent_id]: 
[tags]: 
How to parse placeholders from text without throwing away your sword so you can fight off the marauders with a lampshade

I needed to parse placeholders out of text like abc $$FOO$$ cba . I hacked to together something with Scala's parser combinators, but I'm not really happy with the solution. In particular, I resorted to a zero-width matcher in the regular expression (?=(\$\$|\z)) to stop parsing the text and start parsing the placeholders. This sounds perilously close to the shenanigans discussed and colorfully dismissed on the scala mailing list (which inspired the title of this question.) So, the challenge: fix my parser to work without this hack. I'd like to see a clear progression from the problem to your solution, so I can replace my strategy of randomly assembling combinators until tests pass. import scala.util.parsing.combinator.RegexParsers object PlaceholderParser extends RegexParsers { sealed abstract class Element case class Text(text: String) extends Element case class Placeholder(key: String) extends Element override def skipWhitespace = false def parseElements(text: String): List[Element] = parseAll(elements, text) match { case Success(es, _) => es case NoSuccess(msg, _) => error("Could not parse: [%s]. Error: %s".format(text, msg)) } def parseElementsOpt(text: String): ParseResult[List[Element]] = parseAll(elements, text) lazy val elements: Parser[List[Element]] = rep(element) lazy val element: Parser[Element] = placeholder ||| text lazy val text: Parser[Text] = """(?ims).+?(?=(\$\$|\z))""".r ^^ Text.apply lazy val placeholder: Parser[Placeholder] = delimiter ~> """[\w. ]+""".r
