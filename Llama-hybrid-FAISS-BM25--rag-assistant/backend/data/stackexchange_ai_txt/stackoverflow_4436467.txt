[site]: stackoverflow
[post_id]: 4436467
[parent_id]: 4295539
[tags]: 
Craig Reynolds cannot release the source code for the applets you're interested in. Similar source code is available in c++ at OpenSteer , which is maintained by Reynolds. Christian Schnellhammer and Thomas Feilkas worked to expand Reynolds original paper. Their paper is translated into english and contains a section on obstacle avoidance. The source code for their work is available in Java . However, I think Shiffman's code is a great starting point , and it sounds like you're pretty close to what you want already One of my first Processing programs modified the Boids example to simulate a zombie apocalypse. Triangles chased circles that were avoiding them. Each survivor checks for other zombies in their vision, and averages the location vectors of threats in a function, PVector panic(ArrayList infected) . After that, it was a matter of weighting the new vector negatively and adding it to the survivor's current vector like any other force. Something like: void flock(ArrayList uninfected, ArrayList infected) { PVector sep = separate(uninfected); // Separation PVector ali = align(uninfected); // Alignment PVector coh = cohesion(uninfected); // Cohesion PVector pan = panic(infected); // Panic // Arbitrarily weight these forces sep.mult(4.0); ali.mult(1.0); coh.mult(2.0); pan.mult(-3.0); // Add the force vectors to acceleration acc.add(sep); acc.add(ali); acc.add(coh); acc.add(pan); } If your skier is successfully detecting the obstacles, then avoidance is the problem. Adding a stronger weight to the avoidance vector, increasing the radius the skier can 'see' to interact with objects, or even adding a method to the object that returns the location of the closest point to the skier could solve your problem. You could also add deceleration based on the distance from the skier to the nearest obstacle in front it. Remember that even the applet you're interested in does not perfectly avoid obstacles. My solution may not be exactly what is happening in the applet, but by playing around with the forces determining you skier's direction, you can achieve a very similar (and possibly better) effect.
