[site]: stackoverflow
[post_id]: 2002103
[parent_id]: 1651214
[tags]: 
[Major edit 14 Jan 10] I was a bit confused by your mention of tiles, when the tiff is not tiled. I do use tiled/pyramidical TIFF images. I've created those with VIPS vips im_vips2tiff source_image output_image.tif:none,tile:256x256,pyramid I think you can do this with : vips im_vips2tiff source_image output_image.tif:none,tile:256x256,flat You may want to experiment with tile size. Then you can read using TIFFReadEncodedTile. Multi-resolution storage using pyramidical tiffs are much faster if you need to zoom in/out. You may also want to use this to have a coarse image nearly immediately followed by a detailed picture. After switching to (appropriately sized) tiled storage (which will bring you MASSIVE performance improvements for random access!), your bottleneck will be disk io. File read is much faster if read in sequence. Here mmapping may be the solution. Some useful links: VIPS IIPImage LibTiff.NET stackoverflow VIPS is a image handling library which can do much more than just read/write. It has its own, very efficient internal format. It has a good documentation on the algorithms. For one, it decouples processing from filesystem, thereby allowing tiles to be cached. IIPImage is a multi-zoom webserver/browser library. I found the documentation a very good source of information on multi-resolution imaging (like google maps) The other solution on this page, using mmap, is efficient only for 'small' files. I've hit the 32-bit boundaries often. Generally, allocating a 1 GByte chunk of memory will fail on a 32-bit os (with 4 GBytes RAM installed) due to the fact that even virtual memory gets fragemented after one or two application runs. Still, there is sufficient memory to cache parts or whole of the image. More memory = more performance.
