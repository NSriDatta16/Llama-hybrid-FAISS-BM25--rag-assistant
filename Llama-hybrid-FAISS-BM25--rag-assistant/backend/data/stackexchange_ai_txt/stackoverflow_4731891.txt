[site]: stackoverflow
[post_id]: 4731891
[parent_id]: 
[tags]: 
Drag on Drop onto a composite User Control with multiple text boxes

I have a user control that contains two text boxes, as well as some other controls. I want to be able to drag/drop a complex type onto this control, and I want the entire control to be a drop target, including the textboxes and space around the composited controls. When the data is dropped, it is split apart into component fields, each represented by the controls in the user control. The problem I am having is that the textboxes (if I set AllowDrop to true) are trying to do their own drag drop thing, and will individually accept only the text format of the drop data. If I set AllowDrop to false on the textboxes, the drop is disabled the for the textboxes altogether. I can drag my complex data to labels, checkboxes etc, and it behaves exactly like I expect it should. In addition the space around the other controls does not seem to be considered a valid drop target. Any ideas how to make the text boxes behave as the controls (such as the labels, checkbox or combobox), and why the grid is not being considered a valid drop target? Source for the user control: and code behind: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; namespace DragDropTester { /// /// Interaction logic for CompositeControl.xaml /// public partial class CompositeControl : UserControl { public CompositeControl() { InitializeComponent(); PreviewDragEnter += new DragEventHandler(CompositeControl_DragEnter); this.PreviewDragOver += new DragEventHandler(CompositeControl_DragEnter); Drop += new DragEventHandler(CompositeControl_Drop); } void CompositeControl_Drop(object sender, DragEventArgs e) { var complex = e.Data.GetData("ComplexDragData") as ComplexDragData; if (complex != null) { this.textBox1.Text = complex.Text1; this.textBox2.Text = complex.Text2; this.checkBox1.IsChecked = complex.BoolValue; } } void CompositeControl_DragEnter(object sender, DragEventArgs e) { var complex = e.Data.GetData("ComplexDragData") as ComplexDragData; if (complex != null) { e.Effects = DragDropEffects.Link; } else { e.Effects = DragDropEffects.None; } e.Handled = true; } } } And for the main window that hosts the user control and a drag source... XAML: C# code behind: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; namespace DragDropTester { /// /// Interaction logic for MainWindow.xaml /// public partial class MainWindow : Window { private Point _startPoint; private bool _IsDragging; public MainWindow() { InitializeComponent(); lblDragSource.PreviewMouseLeftButtonDown += new MouseButtonEventHandler(lblDragSource_PreviewMouseLeftButtonDown); lblDragSource.PreviewMouseMove += new MouseEventHandler(lblDragSource_PreviewMouseMove); } void lblDragSource_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e) { _startPoint = e.GetPosition(sender as IInputElement); } void lblDragSource_PreviewMouseMove(object sender, MouseEventArgs e) { if (_startPoint == null) { return; } if (e.LeftButton == MouseButtonState.Pressed && !_IsDragging) { Point position = e.GetPosition(sender as IInputElement); if (Math.Abs(position.X - _startPoint.X) > SystemParameters.MinimumHorizontalDragDistance || Math.Abs(position.Y - _startPoint.Y) > SystemParameters.MinimumVerticalDragDistance) { StartDrag(sender as DependencyObject); } } } private void StartDrag(DependencyObject dragSource) { var data = new DataObject(); var dragData = new ComplexDragData { Text1 = "This is text1", Text2 = "This is text2", BoolValue = true }; data.SetData("ComplexDragData", dragData); data.SetData(DataFormats.Text, dragData.ToString()); try { _IsDragging = true; DragDrop.DoDragDrop(dragSource, data, DragDropEffects.Copy | DragDropEffects.Link); } finally { _IsDragging = false; } } } public class ComplexDragData { public String Text1 { get; set; } public String Text2 { get; set; } public bool BoolValue { get; set; } public override string ToString() { return string.Format("text1: {0} text2: {1} Bool: {2}", Text1, Text2, BoolValue ); } } }
