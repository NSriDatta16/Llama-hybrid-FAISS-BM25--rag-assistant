[site]: stackoverflow
[post_id]: 5358327
[parent_id]: 5358014
[tags]: 
Looking at the stack trace, it looks like Android's HttpClient.execute() implementation is throwing an OOM. That is not indicated by the stack trace you have on the issue. Of course, you didn't provide the whole stack trace on the issue. What's the best way to get the attention of Android devs about this? Any better options than reporting on http://code.google.com/p/android/issues ? The odds of this being a pure Android bug are small, though not zero. Here are some other possibilities, in no particular order: There is no problem with execute() per se, but that you are simply running out of memory, and the stack traces you have encountered are simply demonstrating that execute() is stressing your heap. The problem is in some modifications that HTC made to Android for the Thunderbolt, possibly only taking effect when on the LTE network. The problem is somehow caused by the Verizon LTE network itself (e.g., some proxy of theirs sending back screwball information that is causing HttpClient to have a conniption). Any ideas on how I can work around this? First, I'd use existing tools (e.g., dumping HPROF and examining with Eclipse MAT) to confirm that you don't have a memory leak in general that the Thunderbolt/LTE combo just seems to be tripping over. Next, I recommend that you come up with some way to consistently reproduce the error. That could be your existing app with a series of steps to follow, or it could be a dedicated app (e.g., log the URL that triggers the OOM, then create a tiny app that just does that HttpClient request). I wish DeviceAnywhere had a Thunderbolt, but it doesn't look like it. I'll put some feelers out and see if I can get some help on that front. In terms of working around it, as a stopgap, you can detect that you're running on a Thunderbolt via android.os.Build data, and perhaps that you're on LTE via ConnectivityManager (I'm guessing LTE would list as WiMAX, but that's just a guess), and warn users about the problems with that combo. Beyond that, you can try changing up your HttpClient usage a bit and see if it has an effect, such as: If you are only supporting API Level 8 or higher, you could give AndroidHttpClient a shot as a drop-in replacement Disable multi-threaded access (in general or Thunderbolt-specific) and get rid of the ThreadSafeClientConnManager I'm sorry that I don't have a "magic bullet" answer for you here. UPDATE Now that I have the full stack trace, looking through the source code is...illuminating, somewhat. The problem appears to be that: HttpConnectionParams.getSocketBufferSize(params); is returning that 2MB or so value that is triggering the OOM. That's an awfully big buffer, particularly for the Dalvik GC engine, which can get fragmented (yes, there's that word again). params here is the HttpParams . You seem to be creating those yourself via getHttpParams() . For example, AndroidHttpClient sets that to 8192: HttpConnectionParams.setSocketBufferSize(params, 8192); If you are setting the socket buffer size yourself, try reducing it. If not, try setting it to 8192 and see if that helps.
