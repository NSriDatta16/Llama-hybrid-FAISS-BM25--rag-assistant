[site]: stackoverflow
[post_id]: 4087094
[parent_id]: 
[tags]: 
Unexpected results with OpenMP on i7 and Xeon

parallelizing two nested for-loops, I have run into behavior I cannot explain. I have tried three different kinds of parallelization using OpenMP on an i7 860 and and a xeon E5540 and I expected that the code behaves more or less the same on both platforms, meaning that one of the platforms should be faster for the all three different cases I tested. But that is not the case: For case 1, the Xeon is faster by ~10%, for case 2, the i7 is faster by factor 2 and for case 3, the Xeon is again faster by the factor 1,5 Do you have an idea what could cause this? Please state when you need more information or clarification! To further clarify, my question is meant more general. If I run the same code on an i7 and on a xeon system, shouldn't the use of OpenMP result in comparable (proportional) results? pseudo code: for 1:4 for 1:1000 vector_multiplication end end The cases: case 1: no pramga omp no parallelzation case 2: pragma omp for the first for-loop case 3: pragma omp for the second for-loop Results Here are the actual numbers from the time command: case 1 Time Xeon i7 real 11m14.120s 12m53.679s user 11m14.030s 12m46.220s sys 0m0.080s 0m0.176s case 2 Time Xeon i7 real 8m57.144s 4m37.859s user 71m10.530s 29m07.797s sys 0m0.300s 0m00.128s case 3 Time Xeon i7 real 2m00.234s 3m35.866s user 11m52.870s 22m10.799s sys 0m00.170s 0m00.136s [Update] Thanks for all the hints. I am still researching what the reason could be.
