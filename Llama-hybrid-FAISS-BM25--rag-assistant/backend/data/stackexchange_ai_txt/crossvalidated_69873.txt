[site]: crossvalidated
[post_id]: 69873
[parent_id]: 69820
[tags]: 
The question characterizes logistic regression as $$\text{logit}(y) = \beta_0 + \beta_1 x + \varepsilon$$ and proposes to fit this model using least squares. It points out that because $y$ is a binary ($0$-$1$) variable, $\text{logit}(y)$ is undefined (or should be considered infinite), which is--to say the least--problematic! The resolution of this conundrum is to avoid taking the logit of $y$ but instead apply its inverse, the logistic function $$f(x) = \frac{1}{1 + \exp(-x)},$$ to the right hand side. Because $y$ on the left hand side still is a random variable with possible outcomes $0$ and $1$, it must be a Bernoulli variable: that is, what we need to know about it is the chance that $y=1$, written $\Pr(y=1).$ Therefore we make another attempt in the form $$\Pr(y=1) = f(\beta_0 + \beta_1 x).$$ This is an example of a generalized linear model . Its parameters $\beta_0$ and $\beta_1$ are typically (but not necessarily) found using Maximum Likelihood. To understand this better, many people find it instructive to create synthetic datasets according to this model (instead of analyzing actual data, where the true model is unknown). We will look at how that might be coded in R , which is well suited to expressing and simulating statistical models. First, though, let's inspect its results. The data are shown as jittered points (they have been randomly shifted slightly in the horizontal direction to resolve overlaps). The true underlying probability function is plotted in solid red. The probability function fit using Maximum Likliehood is plotted in dashed gray. You can see that where the red curve is high--which means the chance of $y=1$ is high--most of the data are $1$'s, whereas where the red curve drops to low levels, most of the data are $0$'s. The height of the curve stipulates the chance that the response will be a $1$. In logistic regression, the curve usually has the sigmoidal shape of the logistic function, while the data are always either at $y=1$ or $y=0$. Reading over the code, which is written for expressive clarity, will help make these descriptions precise. # # Synthesize some data. # set.seed(17) # Allows results to be reproduced exactly n
