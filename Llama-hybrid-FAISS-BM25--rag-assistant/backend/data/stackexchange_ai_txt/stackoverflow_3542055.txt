[site]: stackoverflow
[post_id]: 3542055
[parent_id]: 3542042
[tags]: 
Use it in this manner: Regex MyRegex = new Regex(@"(?i:[a-z]+)"); Prefix the inline option to your pattern with (? : ) . In this case the option is "i" for IgnoreCase. By specifying a colon above you are setting the option to just that pattern. To make the option apply to the entire pattern you may set it in the beginning on its own: @"(?i)[a-z]+" It is also possible to use multiple options and turn them on and off: // On: IgnoreCase, ExplicitCapture. Off: IgnorePatternWhitespace @"(?in-x)[a-z]+" This allows for flexibility in a pattern to enable/disable options at different points of a regex that isn't possible when using the RegexOptions on the entire pattern. Here is a slightly in-depth example. I encourage you to play with it to understand when the options are taking effect. string input = "H2O (water) is named Dihydrogen Monoxide or Hydrogen Hydroxide. The H represents a hydrogen atom, and O is an Oxide atom."; // n = explicit captures // x = ignore pattern whitespace // -i = remove ignorecase option string pattern = @"di?(?nx-i) ( hydrogen ) | oxide"; var matches = Regex.Matches(input, pattern, RegexOptions.IgnoreCase); Console.WriteLine("Total Matches: " + matches.Count); foreach (Match match in matches) { Console.WriteLine("Match: {0} - Groups: {1}", match.Value, match.Groups[1].Captures.Count); } Console.WriteLine(); // n = explicit captures // x = ignore pattern whitespace // -i = remove ignorecase option // -x = remove ignore pattern whitespace pattern = @"di?(?nx-i) (? hydrogen ) (?-x)|oxide"; matches = Regex.Matches(input, pattern, RegexOptions.IgnoreCase); Console.WriteLine("Total Matches: " + matches.Count); foreach (Match match in matches) { Console.WriteLine("Match: {0} - Groups: {1}", match.Value, match.Groups["H"].Captures.Count); } The output for the above is: Total Matches: 3 Match: Dihydrogen - Groups: 0 Match: oxide - Groups: 0 Match: oxide - Groups: 0 Total Matches: 3 Match: Dihydrogen - Groups: 1 Match: oxide - Groups: 0 Match: oxide - Groups: 0 In both patterns RegexOptions.IgnoreCase is used which allows "di" to be case insensitive and thus match "Dihydrogen" (capital D). Since explicit capturing is on, the first example fails to have any groups for ( hydrogen ) since it doesn't use a named group, which is the requirement for explicit capturing. The second pattern does have 1 group since it uses (? hydrogen ) . Next, notice that the second pattern is modified to use (?-x)|oxide at the end. Since IgnorePatternWhitespace is disabled after the hydrogen capture, the remainder of the pattern must be correctly formed by not having additional whitespace (compare with the first pattern) until (?x) is turned on later in the pattern. This serves no real purpose but just shows an in-depth usage of inline options to demonstrate when they actually kick in.
