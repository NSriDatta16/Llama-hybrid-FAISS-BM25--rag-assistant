[site]: stackoverflow
[post_id]: 3691479
[parent_id]: 3691454
[tags]: 
When you have a static library (a .lib file), which is just a collection of one or more object files (.obj), the linker just adds that code to yours in one executable. You can tell the linker to do this via a command line switch, an IDE configuration setting, or perhaps even a #pragma (specifics depend on your environment and compiler). When you link in a DLL, you need to give the linker some code to call when you invoke one of the DLLs functions. Usually, this is done with a file of the same name as the .dll, save that it is a .lib. The code in that .lib is linked into your program the same way as described above, but when you call it, it loads the DLL (if not already loaded) and then invokes the proper function. There are other ways to handle DLL linking (for instance, .def files or #using statements in .NET), but this seems to be what you're talking about. Responding to your question clarification: The issue is that a .lib is not a final product. It is just an aggregation of object code to be used later when a linker connects all your functions calls to function addresses. A DLL, on the other hand, is a final product, and so the linker requires all functions and variables be connected to actual addresses. I'm speaking a bit imprecisely, but you get the idea.
