[site]: stackoverflow
[post_id]: 4249255
[parent_id]: 4248135
[tags]: 
I have implemented a WPF application that uses the Ribbon control with the MVVM pattern, but my approach was to create a set of navigation interfaces that I bound the ribbon to. I also leveraged styling of the ribbon elements to control the data binding which I believe may help you accomplish what you are after. After binding your Ribbon control to the view model, you can populate your tabs and their child groups such that the images you want to display will be rendered, and then specify the ICommand on the view model you wish to be executed when a group is selected. This command would call a method to set the current item of the collection. Ribbon Control Styles: Properties exposed by the view model (data binding): #region MenuItems /// /// Gets the application menu items. /// /// /// A that contains /// the application menu items. The default value is an empty collection. /// public SelectableObservableCollection MenuItems { get { if (_viewModelMenuItems == null) { _viewModelMenuItems = new SelectableObservableCollection (); } return _viewModelMenuItems; } } private SelectableObservableCollection _viewModelMenuItems; #endregion #region Tabs /// /// Gets the application navigation tabs. /// /// /// A that contains /// the application navigation tabs. The default value is an empty collection. /// public SelectableObservableCollection Tabs { get { if (_viewModelTabs == null) { _viewModelTabs = new SelectableObservableCollection (); } return _viewModelTabs; } } private SelectableObservableCollection _viewModelTabs; #endregion View (Ribbon XAML): Navigation Interfaces: public interface IMenuItem : ICloneable, INotifyPropertyChanged, INotifyPropertyChanging { #region Command /// /// Gets or sets the command associated with the menu item. /// /// /// The associated with the menu item. /// ISurrogateCommand Command { get; set; } #endregion #region CommandParameter /// /// Gets or sets the parameter to pass to the command associated with the menu item. /// /// /// The parameter to pass to the associated with the menu item. /// object CommandParameter { get; set; } #endregion #region Header /// /// Gets or sets the item that labels the menu item. /// /// /// The item that labels the menu item. /// object Header { get; set; } #endregion #region Image /// /// Gets or sets the image that is displayed on the menu item. /// /// /// The that is displayed on the menu item. /// ImageSource Image { get; set; } #endregion #region IsCheckable /// /// Gets or sets a value that indicates whether the menu item can be checked. /// /// /// if the menu item can be checked; otherwise, . /// bool IsCheckable { get; set; } #endregion #region IsChecked /// /// Gets or sets a value that indicates whether the menu item is checked. /// /// /// if the menu item is checked; otherwise, . /// bool IsChecked { get; set; } #endregion #region IsHorizontallyResizable /// /// Gets or sets a value that indicates whether the menu item can be resized horizontally. /// /// /// if the menu item can be resized horizontally; otherwise, . /// bool IsHorizontallyResizable { get; set; } #endregion #region IsVerticallyResizable /// /// Gets or sets a value that indicates whether the menu item can be resized vertically. /// /// /// if the menu item can be resized vertically; otherwise, . /// bool IsVerticallyResizable { get; set; } #endregion #region Items /// /// Gets the child menu items for the menu item. /// /// /// A collection that contains the child menu items for the menu item. /// SelectableObservableCollection Items { get; } #endregion #region KeyTip /// /// Gets or sets the text to use for the menu item key tip. /// /// /// The text to use for the menu item key tip. /// string KeyTip { get; set; } #endregion #region ToolTipDescription /// /// Gets or sets the description for the menu item tooltip. /// /// /// The description for the menu item tooltip. /// string ToolTipDescription { get; set; } #endregion #region ToolTipFooterDescription /// /// Gets or sets the description for the menu item tooltip footer. /// /// /// The description for the menu item tooltip footer. /// string ToolTipFooterDescription { get; set; } #endregion #region ToolTipFooterImage /// /// Gets or sets the image for the menu item tooltip footer. /// /// /// The for the menu item tooltip footer. /// ImageSource ToolTipFooterImage { get; set; } #endregion #region ToolTipFooterTitle /// /// Gets or sets the title for the menu item tooltip footer. /// /// /// The title for the menu item tooltip footer. /// string ToolTipFooterTitle { get; set; } #endregion #region ToolTipImage /// /// Gets or sets the image for the menu item tooltip. /// /// /// The for the menu item tooltip. /// ImageSource ToolTipImage { get; set; } #endregion #region ToolTipTitle /// /// Gets or sets the title for the menu item tooltip. /// /// /// The title for the menu item tooltip. /// string ToolTipTitle { get; set; } #endregion } public interface INavigationTab : ICloneable, INotifyPropertyChanged, INotifyPropertyChanging { #region Groups /// /// Gets the groups for the navigation tab. /// /// /// A collection that contains /// the navigation groups for the navigation tab. /// SelectableObservableCollection Groups { get; } #endregion #region Header /// /// Gets or sets the item that labels the navigation tab. /// /// /// The item that labels the navigation tab. /// object Header { get; set; } #endregion } public interface INavigationTabGroup : ICloneable, INotifyPropertyChanged, INotifyPropertyChanging { #region Header /// /// Gets or sets the item that labels the navigation tab group. /// /// /// The item that labels the navigation tab group. /// object Header { get; set; } #endregion #region Items /// /// Gets the items for the navigation tab group. /// /// /// A collection that contains /// the navigation items for the navigation tab group. /// SelectableObservableCollection Items { get; } #endregion } public interface INavigationTabGroupItem : ICloneable, INotifyPropertyChanged, INotifyPropertyChanging { #region Command /// /// Gets or sets the command associated with the navigation tab group item. /// /// /// The associated with the navigation tab group item. /// ISurrogateCommand Command { get; set; } #endregion #region CommandParameter /// /// Gets or sets the parameter to pass to the command associated with the navigation tab group item. /// /// /// The parameter to pass to the associated with the navigation tab group item. /// object CommandParameter { get; set; } #endregion #region Label /// /// Gets or sets the item that labels the navigation tab group item. /// /// /// The item that labels the navigation tab group item. /// object Label { get; set; } #endregion #region LargeImage /// /// Gets or sets the large image that is displayed by the navigation tab group item. /// /// /// The that represents the large image that is displayed /// by the navigation tab group item. /// ImageSource LargeImage { get; set; } #endregion #region SmallImage /// /// Gets or sets the small image that is displayed by the navigation tab group item. /// /// /// The that represents the small image that is displayed /// by the navigation tab group item. /// ImageSource SmallImage { get; set; } #endregion } Here is an example of the view model populating its Tabs collection: private void AddTabs() { INavigationTab homeTab = new NavigationTab(Properties.Resources.Shell_Tab_Home_Header); INavigationTabGroup generalGroup = new NavigationTabGroup(Properties.Resources.Shell_TabGroup_General_Header); generalGroup.Items.Add( new NavigationTabGroupItem { Label = Properties.Resources.Shell_StartPage_Header, LargeImage = GetImage("/MyApp;component/Resources/Images/Home.png"), CommandParameter = this, Command = this.DisplayStartPage } ); generalGroup.Items.Add( new NavigationTabGroupItem { Label = Properties.Resources.Shell_Settings_Header, SmallImage = GetImage("/MyApp;component/Resources/Icons/Settings.png") } ); generalGroup.Items.Add( new NavigationTabGroupItem { Label = Properties.Resources.Shell_UserInformation_Header, SmallImage = GetImage("/MyApp;component/Resources/Icons/UserInformation.png") } ); generalGroup.Items.Add( new NavigationTabGroupItem { Label = Properties.Resources.Shell_About_Header, SmallImage = GetImage("/MyApp;component/Resources/Icons/About.png"), Command = this.AboutApplication } ); homeTab.Groups.Add(generalGroup); this.Tabs.Add(homeTab); } Also, I initially had some problems binding image sources, but found a solution by using Freeze. Here is an example: // Build navigation tab this.Tab = new NavigationTab(Properties.Resources.Module_Tab_Header); var administrationImage = GetImage("/MyApp;component/Resources/Images/Administration.png"); administrationImage.Freeze(); INavigationTabGroup administrationGroup = new NavigationTabGroup(Properties.Resources.Module_TabGroup_Administration_Header); administrationGroup.Items.Add( new NavigationTabGroupItem { Label = Properties.Resources.Module_StartPage_Header, LargeImage = administrationImage } ); /// /// Gets an image resource in the assembly for the specified path. /// /// The relative path to the image resource. /// /// The located at the specified . /// /// /// Path: /MyAssembly;component/Resources/Icons/MyIcon.png /// protected static System.Windows.Media.ImageSource GetImage(string path) { return new System.Windows.Media.Imaging.BitmapImage( new Uri(String.Format(null, "pack://application:,,,{0}", path)) ); } Hope this helps you with your binding issues.
