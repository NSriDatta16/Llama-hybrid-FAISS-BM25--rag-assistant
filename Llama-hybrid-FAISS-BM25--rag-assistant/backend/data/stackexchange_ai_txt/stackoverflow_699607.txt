[site]: stackoverflow
[post_id]: 699607
[parent_id]: 692509
[tags]: 
Question #1: are DBs useful for storing such data, and how should it be done? Certainly a database is useful for this application. You could implement your own special-purpose data store, and perhaps it would be more efficient for your specific application, because you can design it for that specialization. A relational database is more general-purpose, but you can avoid weeks or months of development time by employing a database. I answered another question earlier today on the subject of how to handle extensible types, where each new sub-type has its own distinct set of attributes. " product table, many kind of product, each product have many parameters ." For your application, I would choose the Concrete Table Inheritance design. Question #2: Now suppose the user himself can specify the format of his packets, i.e. in a configuration file: the length of each field, its type, what its values mean (in case of an enumeration) and so on. How do I extend a DB-backed implementation for this? I assume the number of packet types are relatively few, and then many packets are inserted with pretty much the same structure. So you should use the database's ability to manage metadata. I would define an additional table for each new packet types. I would also store the packets "exploded" so each field of the packet is stored in a separate database column. That way you can index each column individually, to support efficient searching. You can also define constraints so that some fields are mandatory ( NOT NULL ) or their values constrained by lookup tables. Again, leveraging the database's capabilities to use metadata to enforce consistent structure where it's desirable. SQL already supports a standard, declarative language for specifying fields with data types, constraints, etc. Why develop a different language which you then have to translate to SQL? Question #3: Even more advanced... Now suppose the data packages can be varying in length and contents. Fields that are optional in a given packet type should permit NULL in the corresponding column.
