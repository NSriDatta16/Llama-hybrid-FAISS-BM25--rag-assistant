[site]: datascience
[post_id]: 124826
[parent_id]: 
[tags]: 
seasonal adjustment to testset

I would like to understand how to apply a seasonal adjustment to my testset. Let's imagine we have a time series and divide it into trainigset (80% of the samples) and testset (20% of the samples). I proceed with the seasonal decomposition of the training set, using STL, and at this point I can remove the trend component and the seasonality component from my trainigset. But if I want to do the same on my testset, how can I do this? I would not go and apply the decomposition directly on the test set, but I should be able to use the components from the trainigset decomposition. How can I proceed? Are there different paths I can take that would lead me to the same result? A different approach I have found could be to calculate the trend using a linear model on the trainingset and then do a forcast on the test set, and for seasonality reconstruct periodic signals with the Fourier transform and "extend" them for the length of the test set. But I don't know if this is right. from matplotlib import pyplot as plt import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from statsmodels.tsa.seasonal import MSTL np.random.seed(0) date = pd.date_range(start='1/1/2018', end='1/01/2023') monthly_seasonality = np.sin(date.month/12*2*np.pi) annual_seasonality = np.sin(date.year/2023*2*np.pi) noise = np.random.normal(0, 0.5, len(date)) trend = 0.002 * np.arange(len(date)) value =trend + monthly_seasonality + annual_seasonality + noise df = pd.DataFrame({'date': date, 'target': value}) #time feature extraction def timeFeatureExtraction(df): df['year'] = df['date'].dt.year df['month'] = df['date'].dt.month return df timeFeatureExtraction(df) #train test split train, test = train_test_split(df, test_size=0.2, shuffle=False) X_train = train.drop(columns=['target', 'date']) y_train = train['target'] X_test = test.drop(columns=['target', 'date']) y_test = test['target'] #%% PLOT TRAINIG DATA # Plotting the training set plt.figure(figsize=(10, 6)) plt.plot(train['date'], y_train, label='y_train') plt.title('Time Series: y_train') plt.xlabel('Date') plt.ylabel('Target') plt.legend() plt.show() #%% MULTIPLE SEASONALITY DECOMPOSITION mstl = MSTL(y_train, periods=[28, 365]) res = mstl.fit() ax = res.plot() #%% CLEAN DATA FROM TREND AND SEASONALITY seasonal_28 = res.seasonal["seasonal_28"] seasonal_365 = res.seasonal["seasonal_365"] trend = res.trend
