[site]: stackoverflow
[post_id]: 4495812
[parent_id]: 4495183
[tags]: 
Just off the top of my head, you could do something like this: var img_loaded; $(lastImg).load(function () { img_loaded = true; }); (function checkLoading() { return $(lastElement).css("lastProperty") === "value" && img_loaded ? stopLoading() : setTimeout(checkLoading, 50); }()); Of course, there's a lot wrong with this: It assumes that an Image.onload event works the way it normally does (the image is completely downloaded and everything). If Safari "cheats" on the window.onload, can we trust them with images? It assumes that the last rule in the CSS file will be carried out (and so completed) last. I would guess that if the last rule is a font-weight or something, and the second-to-last rule is loading a MB background-image, that won't work either. It requires constant attention. Different parts have to be updated for different pages. As is, it doesn't scale. The article you linked to only talked about Safari 3. Can we still not trust Safari's onload two versions later?
