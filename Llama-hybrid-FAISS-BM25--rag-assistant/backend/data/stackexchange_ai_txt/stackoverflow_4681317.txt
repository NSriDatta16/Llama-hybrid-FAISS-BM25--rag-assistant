[site]: stackoverflow
[post_id]: 4681317
[parent_id]: 
[tags]: 
In lxml, how do I remove a tag but retain all contents?

The problem is this: I have an XML fragment like so: text1 inner1 text2 inner2 t ext3 For the result, I want to remove all - and -Tags, but retain their (text)-contents, and childnodes just as they are. Also, the -Element should be left untouched. The result should then look thus text1 inner 1 text2 inner2 text3 For the time being, I'll revert to a very dirty trick: I'll etree.tostring the fragment, remove the offending tags via regex, and replace the original fragment with the etree.fromstring result of this (not the real code, but should go something like this): from lxml import etree fragment = etree.fromstring(" text1 inner1 text2 inner2 t ext3 ") fstring = etree.tostring(fragment) fstring = fstring.replace(" ","") fstring = fstring.replace(" ","") fstring = fstring.replace(" ","") fstring = fstring.replace(" ","") fragment = etree.fromstring(fstring) I know that I can probably use xslt to achieve this, and I know that lxml can make use of xslt, but there has to be a more lxml native approach? For reference: I've tried getting there with lxml's element.replace, but since I want to insert text where there was an element node before, I don't think I can do that.
