[site]: stackoverflow
[post_id]: 2659989
[parent_id]: 2659089
[tags]: 
Based on your comments, this really smells like a handle leak. Then, looking at your code, the fz.ExtractZip(...) looks like the best candidate to be using file handles, and hence be leaking them. Is the type of fz part of your code, or a third party library? If it's within your code, make sure it closes all its handles (the safest way is via using or try - finally blocks). If it's part of a third party library, check the documentation and see if it requires any kind of cleanup. It's quite possible that it implements IDisposable ; in such case put its usage within a using block or ensure it's properly disposed. The line catch(Exception e) {} is horribly bad practice. You should only get rid of exceptions this way when you know exactly what exception may be thrown and why do you want to ignore it. If an exception your program can't handle happens, it's better for it to crash with a descriptive error message and valuable debug information (eg: exception type, stack trace, etc), than to ignore the issue and continue as if nothing had gone wrong, because an exception means that something has definitely gone wrong . Long story short, the quickest approach to debug your program would be to: replace your generic catch ers with finally blocks add/move any relevant cleanup code to the finally blocks pay attention to any exception you get: where was it thrown form? what kind of exception is it? what the documentation or code comments say about the method throwing it? and so on. Either 4.1. If the type of fz is part of your code, look for leaks there. 4.2. If it's part of a third party library, review the documentation (and consider getting support from the author). Hope this helps
