[site]: stackoverflow
[post_id]: 5586923
[parent_id]: 5582089
[tags]: 
I haven't yet got production-ready app using cqrs with event sourcing, so here is just my experience trying to build one. 1) Read Model rebuild . Yep, you basically have to rebuild whole Read Model DB once something in it changes. And if there are lots of events, this may take a long time. So the Read Model rebuilding must be highly optimized (use event batching, etc.). I feel event sourcing fits best in cases when there is high read-write ratio. So for some extremely volatile data, it may be wise not to store it as domain events. But then the question about storage capacity is also not that far away. In any case, you can apply cqrs to just a part of the system, the one where it fits best (e.g., I probably wouldn't store graphical image as part of the event). 2) Debugging . It is highly improbable that there is error in event storing (it should be a framework's concern), and it is always easy to check what events are in the store. As for command to produce expected events, you should have tests here, and these tests will probably be most valuable tests in the system. For denormalizers, you could also have tests, but I wouldn't bother writing tests for trivial denormalizers if their corectness can be seen by naked eye. That being said, I used debugger a few times to find problems in some more complicated denormalizers; it wasn't that much fun trying to determine which event make things go wrong.
