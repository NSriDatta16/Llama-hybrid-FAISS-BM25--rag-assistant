[site]: stackoverflow
[post_id]: 713735
[parent_id]: 713704
[tags]: 
I don't understand why people still confuse "language" with "library". (Referring to the linked answer.) So what if C++ doesn't have a "native" concept of audio? There are lots of libraries out there, which you can readily use with C++, and which are probably better suited to your specific needs than any "catch-all" "standard-library" audio processing API could be. C++ is a difficult language. There are others that are easier to learn. I would never argue about that. But C++ is easily one of the most powerful languages around. It can be highly efficient, and highly elegant, at once . Of course, nothing keeps you from making a fine big mess of everything, either. If I recommend C++ as a first programming language? Actually, I don't know any better. Others might protect you from making mistakes, and make initial success (e.g. your first GUI application) easier. But if you build on a foundation of C++, you will always be on a secure footing. You might never have to chose another language at all, actually. But if you want / have to, you will find it ridiculously easy. An experienced C++ coder can do e.g. Java at full speed in a matter of weeks. The other way round? Much, much more difficult. Many years later, I felt like I should amend this answer. Since my kids asked me to teach them programming, I started to do so. I found myself actually not starting with C++... because I showed them BF first. In absolutely no time at all, they understood about memory and pointers. Then I went on with C++, and we're enjoying ourselves immensely so far. Yet some more years later, and I felt I really should add this excellent lecture by Kate Gregory from CppCon 2015 to this answer: Stop Teaching C .
