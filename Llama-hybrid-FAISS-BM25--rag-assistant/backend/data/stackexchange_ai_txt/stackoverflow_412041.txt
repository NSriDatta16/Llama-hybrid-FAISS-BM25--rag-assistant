[site]: stackoverflow
[post_id]: 412041
[parent_id]: 411937
[tags]: 
Automated Testing is a broad category, which contains two smaller categories: Unit Testing and Integration Testing. Unit Testing is the practice of identifying the smallest units of your program, and writing procedures testing them in isolation from each other. When the smallest units of your program are coupled together tightly, it may be hard to test them in isolation from each other. In that case, there are techniques and tools to help you (mocking and mocking frameworks). In order to effectively do unit testing, your codebase needs to be written in a particular way, a way which supports unit testing - the smallest units of your program must not be coupled together. Most programs are not built with this principle in mind, and so they are difficult to unit test. Unit test where you can, and keep that principle in mind for any new code you write, so that you can always unit test your new code. Integration Testing is the practice of identifying features that are large units of your program integrating many smaller units, and writing procedures testing them in isolation from other large units of your program. For example, a procedure testing that your persistence layer correctly saves objects to persistent storage and correctly retrieves objects from persistent storage is an integration test, because it tests both your persistence layer as well as the TCP/IP pipeline, the database configuration, the database schema, the data already in the database, and the interaction between data already in the database and what your code is doing. Definitely do integration testing, in addition to unit testing. Also, create a separate database purely for the purpose of automated integration tests. Try to avoid running automated integration tests on a production or a development database, because you will just run into problems.
