[site]: stackoverflow
[post_id]: 3112557
[parent_id]: 3112448
[tags]: 
You need to use a loop, but the function you're looking for is called map in functional languages. It's possible to implement map in Java, although it tends to be fairly inelegant; here's the version I implemented ages ago in my "stuff Java should have but for some reason doesn't" library: public interface MapFunction { public U map(T source); } public static U[] map(T[] objects, MapFunction f) { if(objects.length == 0) {throw new IllegalArgumentException("Can't map onto an empty array");} @SuppressWarnings("unchecked") U[] rtn = (U[])Array.newInstance(f.map(objects[0]).getClass(), objects.length); for(int i = 0; i Using that, you could do: List list = yourFunction(); List names = Arrays.asList(map(list.toArray(new Customer[0]), new MapFunction () { public String map(Customer c) { return c.getName(); } })); You could naturally change map to take collections instead of arrays, which would eliminate the need for Arrays.asList and List.toArray
