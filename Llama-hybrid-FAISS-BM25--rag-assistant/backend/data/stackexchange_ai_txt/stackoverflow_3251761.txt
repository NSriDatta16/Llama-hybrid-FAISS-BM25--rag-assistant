[site]: stackoverflow
[post_id]: 3251761
[parent_id]: 3251269
[tags]: 
One thing to keep in mind is the testing implications of static methods. A static method "seals" a lot of seams . Seams are where you can change behavior without changing your production code; examples are subclassing, or linking to a testing library. Since static methods are resolved at compile time and aren't dynamically bound you can't throw in a testing object and change the way a static method behaves. Testing that class is going to be a drag. For things like mathematical functions you can be pretty sure a static method will be ok, but you almost certainly wouldn't want a static method that connects to a database. Think about how you'd test code that uses a static method you're thinking of making . Here's a good link from the google testing blog: Static Methods are Death to Testability
