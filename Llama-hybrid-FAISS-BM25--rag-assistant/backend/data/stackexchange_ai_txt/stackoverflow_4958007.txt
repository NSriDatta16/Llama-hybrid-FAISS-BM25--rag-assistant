[site]: stackoverflow
[post_id]: 4958007
[parent_id]: 4957902
[tags]: 
It's difficult to say for sure without more detail, but I'd look into implementing from the IDbConnection interface and associated interfaces. It gives you an interface most C# coders with any experience will be familiar with. Under the hood, to be honest, it really depends on the efficiency if your storage mechanism. If it handles lots of changes efficiently, then you're probably better off having your rollback mechanism build a list of actions that it should take to do a rollback, which is discarded on a 'commit'. If on the other hand updates are expensive, then have you transaction mechanism maintain a list of actions to do on a commit, which are discarded on a rollback. You also need to think about whether or not other code should see updates prior to a commit; with the former approach they will, with the latter, they won't.
