[site]: stackoverflow
[post_id]: 576031
[parent_id]: 575455
[tags]: 
I experimented with this a while ago but have unfortunately forgotten how it all fitted together... for my purpose it turned out to be woefully slow so I cut out the C# and went back to all C++. When you say you're primarily a C# developer I hope you understand pointers because if you don't there's no way to be gentle. Passing arrays basically came down to using CoTaskMemAlloc family of functions on the C++ side ( http://msdn.microsoft.com/en-us/library/ms692727(VS.85).aspx ) and the Marshal class on the C# side ( http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.aspx - which has methods like AllocCoTaskMem). For C# I ended up with a utility class: public class serviceUtils { unsafe public long stringToCoTaskPtr( ref str thestring ) { return (long)Marshal.StringToCoTaskMemAnsi(thestring.theString).ToPointer();//TODO : what errors occur from here? handle them } unsafe public long bytesToCoTaskPtr( ref bytes thebytes, ref short byteCnt) { byteCnt = (short)thebytes.theArray.Length; IntPtr tmpptr = new IntPtr(); tmpptr = Marshal.AllocCoTaskMem(byteCnt); Marshal.Copy(thebytes.theArray, 0, tmpptr, byteCnt); return (long)tmpptr.ToPointer(); } public void freeCoTaskMemPtr(long ptr) { Marshal.FreeCoTaskMem(new IntPtr(ptr));//TODO : errors from here? } public string coTaskPtrToString(long theptr) { return Marshal.PtrToStringAnsi(new IntPtr(theptr)); } public byte[] coTaskPtrToBytes(long theptr, short thelen) { byte[] tmpbytes = new byte[thelen]; Marshal.Copy(new IntPtr(theptr), tmpbytes, 0, thelen); return tmpbytes; } } Just to throw some more code at you: this c++ #import "..\COMClient\bin\Debug\COMClient.tlb" named_guids raw_interfaces_only int _tmain(int argc, _TCHAR* argv[]) { CoInitialize(NULL); //Initialize all COM Components COMClient::IComCalculatorPtr pCalc; // CreateInstance parameters HRESULT hRes = pCalc.CreateInstance(COMClient::CLSID_ComCalculator); if (hRes == S_OK) { long size = 5; LPVOID ptr = CoTaskMemAlloc( size ); if( ptr != NULL ) { memcpy( ptr, "12345", size ); short ans = 0; pCalc->changeBytes( (__int64*)&ptr, &size, &ans ); CoTaskMemFree(ptr); } } CoUninitialize (); //DeInitialize all COM Components return 0; } called this c# public short changeBytes(ref long ptr, ref int arraysize) { try { IntPtr interopPtr = new IntPtr(ptr); testservice.ByteArray bytes = new testservice.ByteArray(); byte[] somebytes = new byte[arraysize]; Marshal.Copy(interopPtr, somebytes, 0, arraysize); bytes.theArray = somebytes; CalculatorClient client = generateClient(); client.takeArray(ref bytes); client.Close(); if (arraysize Sorry, but I don't have the time to work all this out and explain it properly, hopefully this will give you pointers in the right direction, at the very least some things to google. Good Luck PS : I got all the info to write this stuff off the net, so it is out there.
