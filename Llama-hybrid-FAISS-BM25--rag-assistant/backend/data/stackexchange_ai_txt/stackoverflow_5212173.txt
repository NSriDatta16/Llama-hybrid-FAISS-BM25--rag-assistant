[site]: stackoverflow
[post_id]: 5212173
[parent_id]: 5212089
[tags]: 
If you can store the total sum, that's quite easily done: Just store the pairs (T, int) as a class or whatever in an ordinary array and then go over it: int val = Random.nextInt(total); for (Pair p : pairs) { val -= p.val; if (val Can't get much faster considering that looping through an ArrayList is the most efficient way to iterate through n values and you can obviously not do better than O(n). The only overhead is the nextInt() and you need that (or something similar) as well in every solution. Depending on how you organize the ArrayList (sorted or not) other operations get cheaper/more expensive, but it's unimportant for that particular action Edit: Although thinking about it the "you obviously need O(n)" isn't true. If you change the values in the array rarely and can allow a expensive preparation and memory isn't a problem you can do better by storing a HashMap. If you've got for example a distribution: T0: 2 T1: 3 T2: 1 You could insert (0, T0), (1, T0), (2, T1),.,(4, T1), (5, T2) in the hashmap. Edit2: Or see phooji's approach which should be feasible for larger sets of data.
