[site]: stackoverflow
[post_id]: 922754
[parent_id]: 921775
[tags]: 
I've not yet run into anything that's impossible to do following MVVM. Some things are difficult, yes, but once a solution is found, the difficulty is gone. Any time you run into something that's difficult, remember your two "big guns" in this pattern: attached behaviors and services. With these two concepts firmly under your control, there's nothing that you can do with codebehind that you can't do in a cleaner, MVVM friendly, manner. The tricky part here is just in finding the best, most reusable, design... but that's true in any code. When does abandoning MVVM make sense? That depends on your definition of abandoning, but the simple answer is never . If you've got a specific issue your struggling with and don't have the time to find a clean solution, then the pragmatic thing to do is abandon the pattern for that one problem area , not entirely as your complexity example suggests. When does it abandoning MVVM cripple you later? When you have to maintain the application. When does abbandoning MVVM not matter? Demo/sample programs, throw away/simple utilities and the like.
