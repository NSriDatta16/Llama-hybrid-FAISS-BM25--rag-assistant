[site]: stackoverflow
[post_id]: 3535757
[parent_id]: 3534773
[tags]: 
Heroku has everything managed in their cloud and has three ways to scale: db , dynos , and workers . Heroku will not scale your application for you. It is your responsibility to adjust settings that control how much cpu / database storage. I will outline how Heroku works below but right now directly answer the question by saying that there are two options for databases with Heroku: shared, dedicated. Dedicated machines keep info on one machine but machines are beefed up accordingly which Heroku dubs compute unit while shared dbs share machines for databases. If you are reading this answer and don't know about Heroku it's more important to go check them out than reading on. First let me say its FREE to deploy applications on Heroku unless you want to add resources. Deployment is done with your git such as: heroku create heroku push master heroku rake db:migrate Whenver you want to update your your app it's three things: git add . git commit git push heroku How is this possible. with the heroku gem . It's kinda scary how much better Heroku takes care of deploying and scaling Ruby applications so I also had this question and did some research. It turns out that there are really only three things you need to know to scale your application with Heroku: Dynos Workers Databases All you have to do is increase your dynos (basically thin processes) or workers (for delayed jobs) to scale your application. There are basically three ways to sale your application Choose a DB Choose how many dynos you want running Choose how many workers you want running Dynos and workers both run about $.05 / hour Then you can choose from 5 Databse options. Blosom is free up to 5 Mb Koi is $15/month up to 20 Gb And then there are dedicated servers for your DB which work like this: Ronin - $200 / month - 1 compute - 2 TB database max Fugu - $400 / month - 5 compute units - 2 TB database max Zilla - $1600 / month - 20 compute units - 2 TB database max The only thing that is will be dedicated to one server is your database and you have to choose an option for that to happen. Everything else is in the cloud layered into different servers like this: HTTP Reverse prox y - takes care of DNS - works on Niginz HTTP Cache - Works on - Varnish Custom Routing Mesh - works on Erlang Dynos - Basically thin proceses PostgreSQL and Memcached
