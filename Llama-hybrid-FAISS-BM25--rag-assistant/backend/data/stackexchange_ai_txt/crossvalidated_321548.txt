[site]: crossvalidated
[post_id]: 321548
[parent_id]: 321542
[tags]: 
Without looking too close into your implementation, I do not fully get your indexing procedure to draw from the ICDF. I think you draw from the CDF, not it's inverse. Here is my implementation: import sys sys.path.insert(0, './../../../Python/helpers') import numpy as np import scipy.stats as stats from sklearn.neighbors import KernelDensity def rugplot(axis,x,color='b',label='draws',shape='+',alpha=1): axis.plot(x,np.ones(x.shape)*0,'b'+shape,ms=20,label=label,c=color,alpha=alpha); #axis.set_ylim([0,max(axis.get_ylim())]) def PDF(x): return 0.5*(stats.norm.pdf(x,loc=6,scale=1)+ stats.norm.pdf(x,loc=18,scale=1)); def CDF(x,PDF): temp = np.linspace(-10,x,100) pdf = PDF(temp); return np.trapz(pdf,temp); def iCDF(p,x,cdf): return np.interp(p,cdf,x); res = 1000; X = np.linspace(0,24,res); P = np.linspace(0,1,res) pdf = np.array([PDF(x) for x in X]);#attention dont do [ for x in x] because it overrides original x value cdf = np.array([CDF(x,PDF) for x in X]); icdf = [iCDF(p,X,cdf) for p in P]; #draw pdf and cdf f,(ax1,ax2) = plt.subplots(1,2,figsize=(18,4.5)); ax1.plot(X,pdf, '.-',label = 'pdf'); ax1.plot(X,cdf, '.-',label = 'cdf'); ax1.legend(); ax1.set_title('PDF & CDF') #draw inverse cdf ax2.plot(cdf,X,'.-',label = 'inverse by swapping axis'); ax2.plot(P,icdf,'.-',label = 'inverse computed'); ax2.legend(); ax2.set_title('inverse CDF'); #draw from custom distribution N = 100; p_uniform = np.random.uniform(size=N) x_data = np.array([iCDF(p,X,cdf) for p in p_uniform]); #visualize draws a = plt.figure(figsize=(20,8)).gca(); rugplot(a,x_data); #histogram h = np.histogram(x_data,bins=24); a.hist(x_data,bins=h[1],alpha=0.5,normed=True);
