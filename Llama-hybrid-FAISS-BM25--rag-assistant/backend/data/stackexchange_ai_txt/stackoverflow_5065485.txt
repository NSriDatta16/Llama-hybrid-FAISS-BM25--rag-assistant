[site]: stackoverflow
[post_id]: 5065485
[parent_id]: 5065404
[tags]: 
My solution (I recently implemented something like this) is to have both Dictionary (Hashset) and ordered LinkedList . LinkedList will contain item and counter of access. When you want to get your item, you look into Dictionary to get node of LinkedList, then you increment counter and push node forward to keep list sorted. When you want to get least frequently used item you take head (or tail) of list. This makes retrieval O(1) and insertion O(n) in worst (very rare) case and O(1) best case.
