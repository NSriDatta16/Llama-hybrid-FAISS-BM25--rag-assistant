[site]: stackoverflow
[post_id]: 3111138
[parent_id]: 3092313
[tags]: 
I am building a JavaScript admin interface to manage a website. Should I use Web Sockets for the client-server communication instead of XMLHttpRequest if I told you that I do not need to care about browser compatibility? It appears to me that you want to use WebSockets just for the sake of it. The main reason to use WebSockets is when you want to push data from the server to the client. If your application does not need this, you should probably not use WebSockets. Would Web Sockets result in faster save, deletion and update calls compared to the usual situation with XMLHttpRequest? Would the requests be more instant? You could probably save some time on both ends (client and server) due to the absence of headers. But the gain is probably pretty small. with Web Sockets (upon connection loss), am I able to detect connection issues more accurately and faster? Yes, an event will fire instantly when the WebSocket closes. Alternatives would be long-polling or periodic XHRs. Or event client-side storage. Can I support Web Sockets server-side with pure PHP, so, that the code is portable with other web servers First I suggest you read through this . WebSockets don't work very well in a synchronous way. PHP and apache don't work very well in an asynchronous way. Although there are some implementations , many of them are outdated. I personally would use an other language for this, such as ruby , python , java or server-side javascript . Simply because the languages have better support for the asynchronous model and the WebSocket implementations are more sophisticated. The WebSocket protocol is currently still a draft, it can change. Just like it did a few weeks ago . So your code may very well break. My advice is: Do not use WebSockets just for the sake of it. If you have a real-time event-driven application, then it is probably the right choice. Make sure you understand what WebSockets are for and what it takes on the server side, also in terms of event-driven applications. Don't use it for anything production, it's way too fragile.
