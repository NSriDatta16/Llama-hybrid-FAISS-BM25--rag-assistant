[site]: stackoverflow
[post_id]: 2310525
[parent_id]: 2310388
[tags]: 
Visual Studio already offers this in 'poor mans form' with code snippets. Also, with the refactoring tools a la ReSharper (and maybe even the native refactoring support in Visual Studio), you get a long way in ensuring consistency. [EDIT: I didn't think of Extension methods, this approach brings you even further (you only need to keep the _flyBehaviour as a private variable). This makes the rest of my answer probably obsolete...] However; just for the sake of the discussion: how could this be improved? Here's my suggestion. One could imagine something like the following to be supported by a future version of the C# compiler: // keyword 'pattern' marks the code as eligible for inclusion in other classes pattern WithFlyBehaviour { private IFlyBehavior_flyBehavior; private void OnReadyToFly() { _flyBehavior.Fly(); } [patternmethod] private void OnReadyToLand() { _flyBehavior.Land(); } } Which you could use then something like: // probably the attribute syntax can not be reused here, but you get the point [UsePattern(FlyBehaviour)] class FlyingAnimal { public void SetReadyToFly(bool ready) { _readyToFly = ready; if (ready) OnReadyToFly(); // OnReadyToFly() callable, although not explicitly present in FlyingAnimal } } Would this be an improvement? Probably. Is it really worth it? Maybe...
