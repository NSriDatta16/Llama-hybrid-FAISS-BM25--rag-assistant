[site]: stackoverflow
[post_id]: 255024
[parent_id]: 254979
[tags]: 
Hmmmmmmm.... What's the hit-rate? How often does point "X" meet the proximity requirements? I think your existing algorithm is good, and any additional optimizations will come from tuning to the real data. For example, if the "X" point meets the proximity test 99% of the time, then I think your optimization strategy should be considerably different than if it only passes the test 1% of the time. Incidentally, when you get to the point where you're running this algorithm with thousands of points, you should organize all the points into a K-Dimensional Tree (or KDTree ). It makes the calculation of "nearest-neighbor" much simpler. Your problem is a little more complex than a basic nearest-neighbor (because you're checking proximity-to-a-line-segment rather than just proximity-to-a-point) but I still think the KDTree will be handy.
