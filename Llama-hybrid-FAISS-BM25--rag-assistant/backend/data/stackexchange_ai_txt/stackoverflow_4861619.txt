[site]: stackoverflow
[post_id]: 4861619
[parent_id]: 
[tags]: 
A Viable Solution for Word Splitting Khmer?

I am working on a solution to split long lines of Khmer (the Cambodian language) into individual words (in UTF-8). Khmer does not use spaces between words. There are a few solutions out there, but they are far from adequate ( here and here ), and those projects have fallen by the wayside. Here is a sample line of Khmer that needs to be split (they can be longer than this): ចូរសរសើរដល់ទ្រង់ដែលទ្រង់បានប្រទានការទាំងអស់នោះមកដល់រូបអ្នកដោយព្រោះអង្គព្រះយេស៊ូវ ហើយដែលអ្នកមិនអាចរកការទាំងអស់នោះដោយសារការប្រព្រឹត្តរបស់អ្នកឡើយ។ The goal of creating a viable solution that splits Khmer words is twofold: it will encourage those who used Khmer legacy (non-Unicode) fonts to convert over to Unicode (which has many benefits), and it will enable legacy Khmer fonts to be imported into Unicode to be used with a spelling checker quickly (rather than manually going through and splitting words which, with a large document, can take a very long time). I don't need 100% accuracy, but speed is important (especially since the line that needs to be split into Khmer words can be quite long). I am open to suggestions, but currently I have a large corpus of Khmer words that are correctly split (with a non-breaking space), and I have created a word probability dictionary file (frequency.csv) to use as a dictionary for the word splitter. I found this python code here that uses the Viterbi algorithm and it supposedly runs fast. import re from itertools import groupby def viterbi_segment(text): probs, lasts = [1.0], [0] for i in range(1, len(text) + 1): prob_k, k = max((probs[j] * word_prob(text[j:i]), j) for j in range(max(0, i - max_word_length), i)) probs.append(prob_k) lasts.append(k) words = [] i = len(text) while 0 I also tried using the source java code from the author of this page: Text segmentation: dictionary-based word splitting but it ran too slow to be of any use (because my word probability dictionary has over 100k terms...). And here is another option in python from Detect most likely words from text without spaces / combined words : WORD_FREQUENCIES = { 'file': 0.00123, 'files': 0.00124, 'save': 0.002, 'ave': 0.00001, 'as': 0.00555 } def split_text(text, word_frequencies, cache): if text in cache: return cache[text] if not text: return 1, [] best_freq, best_split = 0, [] for i in xrange(1, len(text) + 1): word, remainder = text[:i], text[i:] freq = word_frequencies.get(word, None) if freq: remainder_freq, remainder = split_text( remainder, word_frequencies, cache) freq *= remainder_freq if freq > best_freq: best_freq = freq best_split = [word] + remainder cache[text] = (best_freq, best_split) return cache[text] print split_text('filesaveas', WORD_FREQUENCIES, {}) --> (1.3653e-08, ['file', 'save', 'as']) I am a newbee when it comes to python and I am really new to all real programming (outside of websites), so please bear with me. Does anyone have any options that they feel would work well?
