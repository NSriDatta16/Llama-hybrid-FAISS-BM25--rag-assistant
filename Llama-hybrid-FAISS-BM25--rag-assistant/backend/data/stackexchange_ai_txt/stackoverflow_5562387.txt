[site]: stackoverflow
[post_id]: 5562387
[parent_id]: 5562307
[tags]: 
Have a central synchronized hashmap that maps thread id -> GUI element. In this way the super-agent can do changes to the GUI, create new threads and atomically update the hashmap (e.g. this allows reusing GUI elements for new threads). This will obviously cause some read contention on the hashmap when the super-agent gets a lock to update it. edit: actually you can even get rid of the hashmap and just have an array because the maximum number of threads you can have is quite low ( edit2: It actually just occurred to me that you can get rid of everything. Just have a shared surface of 256x256 pixels (i.e. 2^16 pixels). Each pixel belongs to the thread whose threadID is equal to the pixel index. This way each thread only accesses its own pixel. Then create a custom control and have the OnPaint method blit the shared surface to the graphic surface.
