[site]: stackoverflow
[post_id]: 2245886
[parent_id]: 852973
[tags]: 
The problem is that the value converter that calculates the sum for all the items in a group don't run when an item is changed, since there's no notification for changed items. One solution is to bind to something else that you can control how it does notifications and notify the group header when needed. Below is a working example. You can change the count for a user in the text box and totals gets recalculated. XAML: Code behind: using System; using System.Collections.Generic; using System.ComponentModel; using System.Globalization; using System.Linq; using System.Windows; using System.Windows.Data; namespace UserTotalTest { public partial class Window1 : Window { public Window1() { InitializeComponent(); DataContext = new UsersVM(); } } public class UsersVM : INotifyPropertyChanged { public UsersVM() { Users = new List (); Countries = new string[] { "Sweden", "Norway", "Denmark" }; Random random = new Random(); for (int i = 0; i Users { get; private set; } private User _selectedUser; public User SelectedUser { get { return _selectedUser; } set { _selectedUser = value; if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs("SelectedUser")); } } } public string[] Countries { get; private set; } #region INotifyPropertyChanged Members public event PropertyChangedEventHandler PropertyChanged; #endregion } public class User : INotifyPropertyChanged { public User(string name, string country, double total) { Name = name; Country = country; Count = total; } public string Name { get; private set; } private string _country; public string Country { get { return _country; } set { _country = value; if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs("Country")); } } } private double _count; public double Count { get { return _count; } set { _count = value; if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs("Count")); } } } #region INotifyPropertyChanged Members public event PropertyChangedEventHandler PropertyChanged; #endregion } public class SumConverter : IMultiValueConverter { public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture) { IEnumerable users = values[0] as IEnumerable ; string country = values[1] as string; double sum = users.Cast ().Where(u =>u.Country == country).Sum(u => u.Count); return "Count: " + sum; } public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) { throw new NotImplementedException(); } } }
