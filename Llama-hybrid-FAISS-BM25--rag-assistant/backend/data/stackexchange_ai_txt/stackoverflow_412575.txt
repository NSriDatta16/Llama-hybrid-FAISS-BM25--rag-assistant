[site]: stackoverflow
[post_id]: 412575
[parent_id]: 410623
[tags]: 
Doing some benchmarking on the suggestions so far gives that chrismear and Gaius's assignment-based hash creation is slightly faster than my map method (and assigning nil is slightly faster than assigning true). mtyaka and rampion's Set suggestion is about 35% slower to create. As far as lookups, hash.include?(x) is a very tiny amount faster than hash[x] ; both are twice as a fast as set.include?(x) . user system total real chrismear 6.050000 0.850000 6.900000 ( 6.959355) derobert 6.010000 1.060000 7.070000 ( 7.113237) Gaius 6.210000 0.810000 7.020000 ( 7.049815) mtyaka 8.750000 1.190000 9.940000 ( 9.967548) rampion 8.700000 1.210000 9.910000 ( 9.962281) user system total real times 10.880000 0.000000 10.880000 ( 10.921315) set 93.030000 17.490000 110.520000 (110.817044) hash-i 45.820000 8.040000 53.860000 ( 53.981141) hash-e 47.070000 8.280000 55.350000 ( 55.487760) Benchmarking code is: #!/usr/bin/ruby -w require 'benchmark' require 'set' array = (1..5_000_000).to_a Benchmark.bmbm(10) do |bm| bm.report('chrismear') { hash = {}; array.each{|x| hash[x] = nil} } bm.report('derobert') { hash = Hash[array.map {|x| [x, nil]}] } bm.report('Gaius') { hash = {}; array.each{|x| hash[x] = true} } bm.report('mtyaka') { set = array.to_set } bm.report('rampion') { set = Set.new(array) } end hash = Hash[array.map {|x| [x, true]}] set = array.to_set array = nil GC.start GC.disable Benchmark.bmbm(10) do |bm| bm.report('times') { 100_000_000.times { } } bm.report('set') { 100_000_000.times { set.include?(500_000) } } bm.report('hash-i') { 100_000_000.times { hash.include?(500_000) } } bm.report('hash-e') { 100_000_000.times { hash[500_000] } } end GC.enable
