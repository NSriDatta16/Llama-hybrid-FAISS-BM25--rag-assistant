[site]: crossvalidated
[post_id]: 3256
[parent_id]: 3207
[tags]: 
With a small modification, the first version will be far more efficient. As it's written, se.est is a random function. Even at the same arguments, its value will change each time because of rnorm. This will mess up optimize. You should use the same random numbers each time se.est is called. Here's one way: e I didn't try to run this, so I may have made typos or syntax errors, but hopefully the idea is clear. If n is small, you should probably optimize multiple times with different e's, and use the something like the average or maybe the 90th percentile of the resulting SE's. This may not be a concern, but if the original data was not normal, this method could give inaccurate results. Without assuming normality, you could write your problem as: max_y se(y) subject to mean1(y)=x1bar, mean(2)=x2bar, statistic(y)=s where you allow y to be a sample of size n with any distribution. Without any more restrictions, the solution will often be infinite (it depends on the statistic).
