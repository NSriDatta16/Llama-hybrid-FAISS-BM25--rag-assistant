[site]: stackoverflow
[post_id]: 3304999
[parent_id]: 3304964
[tags]: 
The main problem of what you are asking is that a more general solution is not the best one for a specific problem. It's just average for all of them but not a best one. Ok, you can store a list in a graph assuming its degeneracy but why should you do something like that? And how would you store an hashmap inside a graph? Why would you need such a structure? And do not forgot that graph implementation must be chosen accordingly to which operations you are going to do on it, otherwise it would be like using a hashtable to store a list of values or a list to store an ordered collection instead that a tree. You know that you can use an adjacency matrix, an edge list or adjacency lists.. every different implementation with it's own strenghts and weaknesses. Then graphs can have really many properties compared to other collections of data, cyclic, acyclic, directed, undirected, bipartite, and so on.. and for any specific case you can implement them in a different way (assuming some hypothesis on the graph you need) so having them in native syntax would be overkill since you would need to configure them anyway (and language should provide many implementations/optimizations). If everything is already made you remove the fun of developing :) By the way just look for a language that allows you to write your own graph DSL and live with it!
