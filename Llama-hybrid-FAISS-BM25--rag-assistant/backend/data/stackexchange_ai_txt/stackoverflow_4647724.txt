[site]: stackoverflow
[post_id]: 4647724
[parent_id]: 
[tags]: 
VBA: Generating Data that mimics specific parameters (Avg, StdDev..etc)

I have modified a VBA array function given to me here: Excel Generate Normalized Data That question will explain what I am after. Download the excel I am using to completely understand: http://www.mediafire.com/?smq5tl9poitdacc I am using the following data (The left side are values I enter for the data to be based upon, the right side is the results of the generated data): As you can see, the % Diff is very good for Avg Click, but Click/Time is off when there is a high Day StdDev (Day +/-). The difference when there is a low Day Stddev is close to 0. I think this is because the var NoClickDaysPerClick_Running_Avg becomes inaccurate because the NoClickDays_Total (Which is used indirectly to determine the running avg) is "guessed" at the start, and needs to be reassessed each click because the high StdDev adds randomness and the original "guess" becomes more and more inaccurate. I am not sure if this is the problem, or if it is how I can even solve it. I am just looking for advice on the best way to do what it is I want. I am not sure why the stdDev are so far off either, but thats not a big deal. I'd rather have a more accurate Click/Time than anything else- reguardless what the Day StdDev is. here is the function in my VBA: Function ClickSpacer(Total_Days As Long, ClicksPerDay_Desired_Avg As Double, Clicks_Desired_Deviation As Double, Clicks_Min As Integer, Clicks_Max As Integer, TotalClicksOverTotalDays_Desired_Avg As Double, NoClickDays_Desired_Deviation As Double, NoClickDays_Min As Integer, NoClickDays_Max As Integer) Dim Day_Array() As Integer ReDim Day_Array(1 To Total_Days, 1 To 1) Dim NumDaysToGetClicks As Double Dim ClickOffset As Long Dim Clicks_Total As Long Dim Clicks_SoFar As Long Dim Clicks_Remaining As Long Dim NoClickDaysPerClick_Desired_Avg As Double ' Number of clicks that are needed to Achieved desired Avg of clicks over time Clicks_Total = Round(Total_Days * TotalClicksOverTotalDays_Desired_Avg, 0) ' Number of days in which the user has to click atleast once to achieve desired Avg. clicks per day NumDaysToGetClicks = Round(Clicks_Total / ClicksPerDay_Desired_Avg, 0) ' The number of non-click days in order fill out the total days NoClickDays_Total = Round(Total_Days - NumDaysToGetClicks, 0) ' The guessimated average of non-click days per click to fill out total non-click days ' This is never used, just used for comparsion of the running Avg NoClickDaysPerClick_Desired_Avg = NoClickDays_Total / NumDaysToGetClicks 'This variable is here to achieved closer results to the desired StdDev. 'a higher multiplyer will not limit the deviation but just give an average deviation 'For example, if the Average was 3 with a +/- 2, then with a StdDevMulti of 1 'ALL numbers will be 1 (3-2) through 5 (3+2) with an avg of 3 and stddev of 2, the numbers will NEVER exceed the StdDev. 'With a StdDevMulti of 2, the numbers will be 0 through 6, but should still have an 'Avg deviation of 2. StdDevMulti = 1 NoClickDays_Desired_Deviation = NoClickDays_Desired_Deviation * StdDevMulti Clicks_Desired_Deviation = Clicks_Desired_Deviation * StdDevMulti 'Set the obvious defaults ClickedDaysSoFar = 0 Clicks_SoFar = 0 NoClickDays_SoFar = 0 'Give the ClickOffset a starting value ClickOffset = NoClickDaysPerClick_Desired_Avg Do 'used to find the "running" average of days not clicked NoClickDays_Remaining = NoClickDays_Total - NoClickDays_SoFar 'used to find the "running" average of clicks per day Clicks_Remaining = (Clicks_Total - Clicks_SoFar) 'used in both "running" averages mentioned above and also will 'mark the end of the while loop. RemainingClickedDays = (NumDaysToGetClicks - ClickedDaysSoFar) ' Find what the average num. click should be based on the remaining ' and then apply the deviation. Only accept a click below its max ' above its min. Do ' Generate a random number between -1 and 1 SignChanger = Rnd() - Rnd() ' Apply the randomized StdDev Clicks_Deviation = Clicks_Desired_Deviation * SignChanger 'Figure out the "running" average ClicksPerDay_Running_Avg = Clicks_Remaining / RemainingClickedDays 'Figure out a click value and round to the nearest whole number Generated_Clicks = Round(ClicksPerDay_Running_Avg + Clicks_Deviation, 0) ' Make sure it meets the requirements, if not, try again Loop While Generated_Clicks Clicks_Max ' Set the click value to the spaced-out array index Day_Array(ClickOffset, 1) = Generated_Clicks 'Find a random space based upon the "running" avg. and desired deviation 'Make sure it between the min and max required. Do ' Generate a random number between -1 and 1 SignChanger = Rnd() - Rnd() ' Apply the randomized StdDev NoClickDays_Deviation = NoClickDays_Desired_Deviation * SignChanger 'Figure out the "running" average NoClickDaysPerClick_Running_Avg = NoClickDays_Remaining / RemainingClickedDays 'Figure out a space value and round to the nearest whole number Generated_NoClickDays = Round(NoClickDaysPerClick_Running_Avg + NoClickDays_Deviation, 0) ' Make sure it meets the requirements, if not, try again Loop While Generated_NoClickDays = NoClickDays_Max 'Define the array index based upon the spacing previously generated. ' Make sure to "add" upon the already known index. Add 1 because you 'have to account for the index the click occupies ClickOffset = ClickOffset + Generated_NoClickDays + 1 'These should be self-explaintory ClickedDaysSoFar = ClickedDaysSoFar + 1 Clicks_SoFar = Clicks_SoFar + Generated_Clicks NoClickDays_SoFar = NoClickDays_SoFar + Generated_NoClickDays Loop While ClickOffset 0 'Set the array equal to the clicks so that it returns the array as 'we want. Ideally this will be just replace Total_Days fields under 'the base, so not to require a array-function. Neither of these work: 'ClickSpacer = Range("P1:P" & UBound(Day_Array) + 1).Value 'Range("P1:P" & UBound(Day_Array) + 1) = Application.Transpose(Day_Array) ClickSpacer = Day_Array End Function
