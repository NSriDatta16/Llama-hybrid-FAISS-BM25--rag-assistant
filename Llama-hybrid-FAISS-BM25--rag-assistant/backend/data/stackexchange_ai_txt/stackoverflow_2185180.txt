[site]: stackoverflow
[post_id]: 2185180
[parent_id]: 
[tags]: 
Does ActiveRecord::Base.connection.execute only execute a single statement at a time?

I have a bunch of SQL statements to execute on a database. (I'm doing things that Rails doesn't provide methods for, as far as I know: creating views, adding foreign keys, etc. It's mostly for non-Rails interaction with the data.) In essence, I'm doing the following: sql = "statement_1; statement_2; statement_3; etc;" ActiveRecord::Base.connection.execute(sql) Or with newlines, like so: sql = (Obviously, these statements are just place holders, but I don't think their content matters, according to my tests.) In either case, only the first statement is executed and the others seem to be ignored. Is that what's going on? I'm only seeing the effects of the first statement whenever I try more than one at a time. Do I need to execute each one separately? One set of statements is coming from a file, so it'd be nice to just load the contents of the file and execute. If there are better strategies I could adopt, I'd be interested in them. I was hoping the documentation on execute would shed some light, but besides using the singular ("statement"), it doesn't. Perhaps it's because of the database engine I'm using? (For reference, I'm using SQLite at the moment.) UPDATE: I ended up writing a method that does the following: def extract_sql_statements(sql) statements = [] sql.split(';').each do |statement| statement.strip! unless statement.empty? statement += ';' statements ...and then looping over statements . It's fixed the problem, but if there are more elegant solutions, I would be interested in hearing about them.
