[site]: crossvalidated
[post_id]: 639810
[parent_id]: 639754
[tags]: 
For a concentration, the data will be either strictly positive or they will be left censored. A 0 observation is not technically possible in most situations as in general we are measuring using devices/methods that have a limit of detection, below which they cannot reliably differentiate between "a little" and "none". Assuming that all your data are above the detection limit, then a common starting point will be to fit a Gamma GAM, i.e. a GAM with a Gamma random component with a log link function, through the family argument: gam(concentration ~ s(elevation), family = Gamma(link = "log"), method = "REML", data = dat) There are some assumptions here, namely that the variance of the data scale proportionally to the mean squared, but good diagnostic tests (say with the DHARMa package) should highlight if your data are overdispersed relative to the assumed mean-variance relationship of the estimated GAM. If you have some values below the detection limit, then you are entering rough waters. The tricks that people mentioned in the comments on your question can lead to biased and inconsistent estimates. Instead you will need to fit either a hurdle Gamma GAM, where the 0/1 hurdle is whether for whether the observation is detected or not (i.e. is it above or below the detection limit), or a censored Gamma model. In the first instance, the hurdle part will be a binomial model (a logistic regression say), while the Gamma part will be a Gamma GAM. This model can be fitted with the brms package, for example, which will use the Stan probabilisitc programming language under the hood to fit the model using a fully Bayesian approach. It uses the same smooth definitions from mgcv. Such a model can be specified as brm( bf( y ~ s(elevation), hu ~ s(elevation) ), data = dat, seed = 42, cores = 4, iter = 4000, warmup = 2000, control = list(adapt_delta = 0.95), family = hurdle_gamma() ) where dat$y (the response) should be coded to be 0 if the observation is below detection limit. Here I've assumed that elevation has a smooth effect in both parts of the model, but you could have different terms in the two linear predictors. This kind of model could also be used with family = hurdle_lognormal() , which would imply a different mean-variance relationship to that of the Gamma, but it is also relevant for concentration data. The the second option is also available through the brms package. You will need to code your data a little differently than for the hurdle Gamma model. We will again use the Gamma distribution as the random component (but the log normal would again be an option, as would other distributions with support on the set of positive real numbers). brm(bf(y | cens(censored) ~ s(elevation)), data = dat, seed = 42, cores = 4, iter = 4000, warmup = 2000, control = list(adapt_delta = 0.95), family = Gamma(link = "log") ) Where censored is a variable in your data and it will be coded as left for an observation that is below detect limit, and none for values above the detection limit. Alternatively you can use -1 and 0 to the same effect. With this formulation, you can leave the censored values of y at their actual values, but conventionally we typically set all the censored values to be $c/2$ say, where $c$ is the limit of detection. I don't actually think it matters what you set y to for the censored observations as the cens() function in the family is what is used to identify the censored observations. If you have values that are above an upper limit of detection, then you can indicate those too, as right or 1 for right censored (all we know is that the value is above some upper limit of detection). I think some of these models can also be fitted in the gamlss package. With slightly different conventions. These might be easier to drive as brms requires some understanding of MCMC / HMC. For completeness, I will note that there is a new-ish family in mgcv , which implements a censored normal family. To use it you'll need to use a matrix as the response, which has two columns, a bit like how you can fit binomial GLMs with glm() : gam(cbind(concentration, censored) ~ s(elevation), family = cnorm(), method = "REML", data = dat) where censored is now coded as -Inf is the observation is below the detection limit. If the value is not censored than the censored will contain a repeat of the observed value of y for that observation. To set this up then you could do dat where c is your lower limit of detection. You might also need to use cnorm(link = "log") instead of the default identity link. It depends on your data. For any model using a non-identity link function, you will also want to generate outputs from the model that are on the scale of the response. The defaults usually produce outputs on the scale of the link function (so log for the Gamma model I discussed above). If you want to show uncertainty intervals however, especially with mgcv , you will need to generate predictions and standard errors on the link scale, form the confidence/credible interval, and then apply the inverse of the link function ( exp() for a log link) to back transform the estimates and their uncertainty band to the response scale.
