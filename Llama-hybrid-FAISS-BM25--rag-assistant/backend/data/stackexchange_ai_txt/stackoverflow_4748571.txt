[site]: stackoverflow
[post_id]: 4748571
[parent_id]: 4748532
[tags]: 
Thread vs Runnable You should probably not extend thread. Implement Runnable and start a new thread with your Runnable. Reason: If you extend Thread, you interfere with working infrastructure code. You should only do that if you need to change how things work. In 90% of cases, you only need to specify what needs to be executed, not how. That's why the Runnable approach is more elegant: you separate the what from the how . From the Runnable docs: In most cases, the Runnable interface should be used if you are only planning to override the run() method and no other Thread methods. This is important because classes should not be subclassed unless the programmer intends on modifying or enhancing the fundamental behavior of the class. Sample Code Try something like this: public void startThread(final int personID, final Direction direction, final StairLock stairLock){ new Thread(new Runnable(){ @Override public void run(){ System.out.println("Person " + personID + " runs in direction " + direction + "and I have no idea what a Stairlock is, but here it is " + stairLock); } }).start(); } OOP Design In General, be careful how you model objects. If I understand you right, Card is-a Thread in your concept. That's awful! A Card can have-a thread, but it should never be one! In good OOP design, a class has exactly one purpose, this is called Cohesion . Also, different kinds of functionality should be loosely coupled , i.e. Domain Classes should never contain infrastructure code.
