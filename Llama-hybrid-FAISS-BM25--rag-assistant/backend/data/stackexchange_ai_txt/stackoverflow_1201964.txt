[site]: stackoverflow
[post_id]: 1201964
[parent_id]: 1201892
[tags]: 
Well, any function, theoretically, is a candidate for memoization. However, remember that memoization is all about trading space for speed - In general, this means that, the more state a function requires or depends on in order to compute an answer, the higher the space cost, which reduces the desirability to memoize the method. Both of your examples are basically cases where more state would need to be saved. This has two side effects. First, this will require a lot more memory space in order to memoize the function, since more information will need to be saved. Second, this will potentially slow down the memoized function, since the larger the space, the higher the cost of the lookup of the answer, as well as the higher the cost in finding whether or not a result was previously saved. In general, I tend to only consider functions that have few possible inputs and low storage requirements, unless there is a very high cost in calculating the answer. I acknoledge that this is vague, but this is part of the "artistry" in architecture. There's no "right" answer without implementing both options (memozied and non-memoized functions), profiling, and measuring.
