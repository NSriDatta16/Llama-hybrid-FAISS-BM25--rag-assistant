[site]: stackoverflow
[post_id]: 441935
[parent_id]: 441816
[tags]: 
I think that it's very important to have a textual representation of what you program, even if you use a non-textual (e.g. graphical, speech recognition, direct neural interface) input method. A program is basically something like a recipe: "to achieve this, go through these steps". The textual representation is a write-up of this recipe. If you need a recipe for making the recipe ("click this menu, use this dialog box..."), and a textual interaction is not possible, then you lose contact with what you produce. I think that a programmer's wish for alternative input/programming methods is correlated to the conceptual flaws in the language he uses. Recently I read about someone who got an assignment to write a bunch of setters and getters -- in a better language, this would be a job for its metaprogramming facilities. On the subject of graphical programming: I can much faster type the word "for" than draw something like a triangle with the mouse. This is so even if this drawing is "facilitated" by letting me get this triangle from some menu. When programming, you use hundreds of different symbols; how can they be organized to access without typing? Heh, I know, how about keyboard shortcuts ... wait ... The keyboard is currently the fastest instrument for conveying meaning to a computer, and a piece of text ist the most concise and useful representation for storing meaning on a computer.
