[site]: stackoverflow
[post_id]: 3494858
[parent_id]: 3494856
[tags]: 
The below code will take the worksheet that you want to add comments to and then iterate over the commentsToAdd dictionary. The dictionary key is the cell reference (ie. A1) and the value is the comment text to be added. /// /// Adds all the comments defined in the commentsToAddDict dictionary to the worksheet /// /// Worksheet Part /// Dictionary of cell references as the key (ie. A1) and the comment text as the value public static void InsertComments(WorksheetPart worksheetPart, Dictionary commentsToAddDict) { if (commentsToAddDict.Any()) { string commentsVmlXml = string.Empty; // Create all the comment VML Shape XML foreach (var commentToAdd in commentsToAddDict) { commentsVmlXml += GetCommentVMLShapeXML(GetColumnName(commentToAdd.Key), GetRowIndex(commentToAdd.Key).ToString()); } // The VMLDrawingPart should contain all the definitions for how to draw every comment shape for the worksheet VmlDrawingPart vmlDrawingPart = worksheetPart.AddNewPart (); using (XmlTextWriter writer = new XmlTextWriter(vmlDrawingPart.GetStream(FileMode.Create), Encoding.UTF8)) { writer.WriteRaw(" \r\n \r\n \r\n" + " \r\n \r\n \r\n " + commentsVmlXml + " "); } // Create the comment elements foreach (var commentToAdd in commentsToAddDict) { WorksheetCommentsPart worksheetCommentsPart = worksheetPart.WorksheetCommentsPart ?? worksheetPart.AddNewPart (); // We only want one legacy drawing element per worksheet for comments if (worksheetPart.Worksheet.Descendants ().SingleOrDefault() == null) { string vmlPartId = worksheetPart.GetIdOfPart(vmlDrawingPart); LegacyDrawing legacyDrawing = new LegacyDrawing() { Id = vmlPartId }; worksheetPart.Worksheet.Append(legacyDrawing); } Comments comments; bool appendComments = false; if (worksheetPart.WorksheetCommentsPart.Comments != null) { comments = worksheetPart.WorksheetCommentsPart.Comments; } else { comments = new Comments(); appendComments = true; } // We only want one Author element per Comments element if (worksheetPart.WorksheetCommentsPart.Comments == null) { Authors authors = new Authors(); Author author = new Author(); author.Text = "Author Name"; authors.Append(author); comments.Append(authors); } CommentList commentList; bool appendCommentList = false; if (worksheetPart.WorksheetCommentsPart.Comments != null && worksheetPart.WorksheetCommentsPart.Comments.Descendants ().SingleOrDefault() != null) { commentList = worksheetPart.WorksheetCommentsPart.Comments.Descendants ().Single(); } else { commentList = new CommentList(); appendCommentList = true; } Comment comment = new Comment() { Reference = commentToAdd.Key, AuthorId = (UInt32Value)0U }; CommentText commentTextElement = new CommentText(); Run run = new Run(); RunProperties runProperties = new RunProperties(); Bold bold = new Bold(); FontSize fontSize = new FontSize() { Val = 8D }; Color color = new Color() { Indexed = (UInt32Value)81U }; RunFont runFont = new RunFont() { Val = "Tahoma" }; RunPropertyCharSet runPropertyCharSet = new RunPropertyCharSet() { Val = 1 }; runProperties.Append(bold); runProperties.Append(fontSize); runProperties.Append(color); runProperties.Append(runFont); runProperties.Append(runPropertyCharSet); Text text = new Text(); text.Text = commentToAdd.Value; run.Append(runProperties); run.Append(text); commentTextElement.Append(run); comment.Append(commentTextElement); commentList.Append(comment); // Only append the Comment List if this is the first time adding a comment if (appendCommentList) { comments.Append(commentList); } // Only append the Comments if this is the first time adding Comments if (appendComments) { worksheetCommentsPart.Comments = comments; } } } } Helper method that will create the VML XML for the Shape: /// /// Creates the VML Shape XML for a comment. It determines the positioning of the /// comment in the excel document based on the column name and row index. /// /// Column name containing the comment /// Row index containing the comment /// VML Shape XML for a comment private static string GetCommentVMLShapeXML(string columnName, string rowIndex) { string commentVmlXml = string.Empty; // Parse the row index into an int so we can subtract one int commentRowIndex; if (int.TryParse(rowIndex, out commentRowIndex)) { commentRowIndex -= 1; commentVmlXml = " \r\n \r\n" + " \r\n \r\n \r\n \r\n \r\n \r\n \r\n" + " \r\n \r\n" + GetAnchorCoordinatesForVMLCommentShape(columnName, rowIndex) + " \r\n False \r\n " + commentRowIndex + " \r\n " + GetColumnIndexFromName(columnName) + " \r\n \r\n "; } return commentVmlXml; } Helpers to figure out the Column Index and coordinates for the comment Shape: /// /// Gets the coordinates for where on the excel spreadsheet to display the VML comment shape /// /// Column name of where the comment is located (ie. B) /// Row index of where the comment is located (ie. 2) /// "/> coordinates in the form of a comma separated list private static string GetAnchorCoordinatesForVMLCommentShape(string columnName, string rowIndex) { string coordinates = string.Empty; int startingRow = 0; int startingColumn = GetColumnIndexFromName(columnName).Value; // From (upper right coordinate of a rectangle) // [0] Left column // [1] Left column offset // [2] Left row // [3] Left row offset // To (bottom right coordinate of a rectangle) // [4] Right column // [5] Right column offset // [6] Right row // [7] Right row offset List coordList = new List (8) { 0, 0, 0, 0, 0, 0, 0, 0}; if (int.TryParse(rowIndex, out startingRow)) { // Make the row be a zero based index startingRow -= 1; coordList[0] = startingColumn + 1; // If starting column is A, display shape in column B coordList[1] = 15; coordList[2] = startingRow; coordList[4] = startingColumn + 3; // If starting column is A, display shape till column D coordList[5] = 15; coordList[6] = startingRow + 3; // If starting row is 0, display 3 rows down to row 3 // The row offsets change if the shape is defined in the first row if (startingRow == 0) { coordList[3] = 2; coordList[7] = 16; } else { coordList[3] = 10; coordList[7] = 4; } coordinates = string.Join(",", coordList.ConvertAll (x => x.ToString()).ToArray()); } return coordinates; } /// /// Given just the column name (no row index), it will return the zero based column index. /// Note: This method will only handle columns with a length of up to two (ie. A to Z and AA to ZZ). /// A length of three can be implemented when needed. /// /// Column Name (ie. A or AB) /// Zero based index if the conversion was successful; otherwise null public static int? GetColumnIndexFromName(string columnName) { int? columnIndex = null; string[] colLetters = Regex.Split(columnName, "([A-Z]+)"); colLetters = colLetters.Where(s => !string.IsNullOrEmpty(s)).ToArray(); if (colLetters.Count() col1 = colLetters.ElementAt(index).ToCharArray().ToList(); int? indexValue = Letters.IndexOf(col1.ElementAt(index)); if (indexValue != -1) { // The first letter of a two digit column needs some extra calculations if (index == 0 && colLetters.Count() == 2) { columnIndex = columnIndex == null ? (indexValue + 1) * 26 : columnIndex + ((indexValue + 1) * 26); } else { columnIndex = columnIndex == null ? indexValue : columnIndex + indexValue; } } index++; } } return columnIndex; } Don't forget to save your worksheet and workbook once you are done in order to see the changes.
