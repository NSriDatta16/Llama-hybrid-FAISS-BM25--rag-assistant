[site]: stackoverflow
[post_id]: 1033408
[parent_id]: 1033359
[tags]: 
Databases are for storing data. If you application needs to store date in some way, or retrieve it from a central location, then you would generally use a database. If you are currently storing your data in a flat file, you are losing all the benefits of the structure of a database. RDBMS (relational database management systems) help you structure your data to prevent redundancy (duplicate data), ensure data integrity and account for scalability. They can also help with allowing multiple users to access the data while avoiding corruption. Most RDBMS also provide some form of transactional access. This means that you can group operations up into logical transactions that must either be fully successful, or fail without changing any data. This is really helpful if you want to update various parts of your data, and it's important they remain in sync. If you were to use a flat file and the sysytem crashed in the middle of you updating the file you would be left with invalid/out of sync data. With an RDBMS no change would be made until the transaction as a whole completed successfully. At a simple level, you could describe almost any data storage mechanism as a database. Whatever you are currently storing information is could be described as a database. The question is, would your data storage benefit from the extra services provided by a traditional RDBMS. In my applications I will often use flat/xml files to store basic config information, but anything complex or multi user goes straight in a database, even if it's a local SQL Express database file.
