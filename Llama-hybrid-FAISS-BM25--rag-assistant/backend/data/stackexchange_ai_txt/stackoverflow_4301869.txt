[site]: stackoverflow
[post_id]: 4301869
[parent_id]: 4301645
[tags]: 
If each tile in the game can be 1 of any 3 states at any point in the game, then the minimum amount of storage required for a "perfect hash" when hashing every possible state of the game board, at any given moment will = power(3,8*8) individual hashes = log2(3^64) bits = approx. 101.4 bits, so you will need at least 102 bits to store this info At this point, you may as well just say there are 4 states for each tile, which will bring you to needing 128 bits . Once you do this, its rather easy to make a fast hashing algorithm for the board. E.g. (writtin as c++, may need to alter code if the platform doesn't support 128 bit numbers) uint_128 CreateGameBoardHash(int (&game_board)[8][8]) { uint_128 board_hash = 0; for(int i = 0; i This method will only waste 26 bits (little more than 3 bytes) over the optimal solution of 102 bits, but you will save a LOT of processing time that would be otherwise spent doing base 3 math. Edit Here's a version that doesn't require 128 bits and should work on any 16-bit (or better) processor struct GameBoardHash { uint16 row[8]; }; GameBoardHash CreateGameBoardHash(int (&game_board)[8][8]) { GameBoardHash board_hash; for(int i = 0; i
