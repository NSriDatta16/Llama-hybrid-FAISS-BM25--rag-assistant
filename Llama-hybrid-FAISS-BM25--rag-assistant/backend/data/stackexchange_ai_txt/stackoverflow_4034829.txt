[site]: stackoverflow
[post_id]: 4034829
[parent_id]: 
[tags]: 
Accessing vector element of shared object using boost interprocess

I'm trying to understand how boost interprocess library works. I have an Equipment class which holds integer values in a vector container. In parent parent process; I constructed Equipment object in MySegmentObject segment, and in the constructor of this object I created the vector in MySegmentVector segment. Using child process; I want to access the created object and get the size of the vector. I can access the object using segment->find method but, when I call the getSize() method from the accessed object, it crashes! What am I doing wrong, probably I'm missing sth about shared memory concept. I tested the code on Visual Studio 2010 & boost 1.43.0 lib Equipments.h #pragma once #include #include #include using namespace boost::interprocess; typedef boost::interprocess::allocator ShmemAllocator; typedef boost::container::vector EqVector; class Equipments { public: Equipments(void); ~Equipments(void); void addEquipment(int n); int getSize(); int getElement(int n); private: const ShmemAllocator *alloc_inst; EqVector eqVector; managed_shared_memory *segment; }; Equipments.cpp #include "StdAfx.h" #include "Equipments.h" #include Equipments::Equipments(void) { shared_memory_object::remove("mySegmentVector"); segment = new managed_shared_memory(create_only, "mySegmentObjectVector", 65536); alloc_inst = new ShmemAllocator(segment->get_segment_manager()); eqVector = segment->construct ("myVector")(*alloc_inst); } Equipments::~Equipments(void) { } void Equipments::addEquipment(int n) { eqVector->push_back(n); } int Equipments::getSize() { return eqVector->size(); } int Equipments::getElement(int n) { return eqVector->at(n); } Main.cpp #include "stdafx.h" #include "Equipments.h" #include #include #include #include #include using namespace boost::interprocess; int main(int argc, char *argv[]) { if (argc == 1) { std::cout ("EQ")(); eqPtr->addEquipment(19); eqPtr->addEquipment(12); //Launch child process std::string s(argv[0]); s += " child "; if(0 != std::system(s.c_str())) return 1; //Launch child process } else { std::cout p = segment->find ("EQ"); if (p.first) { std::cout getSize()
