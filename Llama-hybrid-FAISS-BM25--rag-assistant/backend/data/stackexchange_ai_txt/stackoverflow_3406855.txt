[site]: stackoverflow
[post_id]: 3406855
[parent_id]: 3406739
[tags]: 
Separating independent functional domains into individual DLLs is generally a good thing . It helps introduce the potential for reuse and help mitigate the introduction of inappropriate coupling between the internal implementations of classes. However, there are downsides to introducing multiple assemblies as part of a system: It takes longer to load, verify, and JIT multiple assemblies. This is rarely a problem, however - and should generally not be your primary concern in deciding how to partition the functionality of an application. It can be unwise to update an application by deploying changes within a single assembly. Often dividing an app into separate DLLs creates the impression that its possible to fix or enhance it by replacing just some of it's assemblies. While it's certainly possible it can introduce subtle bugs if there are changes in side-effects or undocumented behaviors of the classes and methods in those assemblies. It can be harder to understand a system that is divided into too many assemblies. Tools like ReSharper and CodeRush have some limitations when analyzing code divided across multiple assemblies. It can encourage developers to make more types public than they should. Since only public types can be consumed and inherited by other assemblies, a multi-assembly project can result in more public types than may be desirable.
