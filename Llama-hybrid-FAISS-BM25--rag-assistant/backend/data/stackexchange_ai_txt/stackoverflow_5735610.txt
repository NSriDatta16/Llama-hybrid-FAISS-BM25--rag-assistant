[site]: stackoverflow
[post_id]: 5735610
[parent_id]: 
[tags]: 
denormalizing with mongoid

What is the best way to de-normalize with mongoid and Rails? Using the "embedded" relationships does not appear to work (or be intended for anything but embedding the entire, original documents). My present solution stores and retrieved the de-normalized attributes as an OrderedHash: collection.update({_id: id, ...}, {..., denormalized: {_id: other.id, _type: other._type, a: other.a, b: other.b}} def denormalized Mongoid::Factory.build(attributes[:denormalized]["_type"], attributes[:denormalized]) end edit: I should mention that I did try https://github.com/logandk/mongoid_denormalize It flattens out the denormalized attributes (in the example below, it would store author_name instead of author: {name: "value"} and it doesn't have support for multiple denormalized relations (e.g. authors: [{name: "First Co-Author", _id: 1}, {name: "Second Co-Author", _id: 2}]) edit: An example was requested. class User # this class uses STI so _type field is important include Mongoid::Document field :name # this is the field I want to de-normalize to where Users are referenced def write_book Book.create!({title: "Some Text", author: {_id: self.id, _type: self._type, name: self.name}) end end class Book include Mongoid::Document field :title # embeds_one :author, polymorphic: true # tried this but it doesn't seem to be correct usage... it sort of works but # I run into problems with cycles and infinite loops when used extensively # because (I think) of how mongoid works internally, expecting embeds_one # to mean something different def author Mongoid::Factory.build(attributes[:author]["_type"], attributes[:author]) end end The correct solution would have ActiveModel methods such as new_record? working as well as the *_path and *_url routing helpers.
