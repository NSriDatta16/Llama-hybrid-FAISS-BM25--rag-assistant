[site]: stackoverflow
[post_id]: 2950260
[parent_id]: 
[tags]: 
Alternative to C++ exception

I'm writing a reactive software, which repeatedly recieves input, processes it and emits relevant output. The main loop looks something like: initialize(); while (true) { Message msg,out; recieve(msg); process(msg,out); //no global state is saved between loop iterations! send(out); } I want that whatever error occured during the proccess phase, whetehr it is out of memory error, logical error, invalid assertion etc, the program will clean up whatever it did, and keep running. I'll assume it is invalid input, and simply ignore it. C++'s exception are exceptionally good for that situation, I could surround process with try/catch clause, and throw exception whenever something goes wrog. The only thing I need to make sure that I clean up all my resources before throwing an exception. This could be verified by RAII, or by writing a global resource allocator (for instance, if your destructor might throw an exception), and use it exclusively for all resources. Socket s = GlobalResourceHandler.manageSocket(new Socket()); ... try { process(msg,out); catch (...) { GlobalResourceHandler.cleanUp(); } However, using exception is forbidden in our coding standard (also in Google's C++ standard BTW), as a result all the code is compiled with exceptions off, and I believe nobody's going to change the way everything work just for my design problem. Also, this is code for embedded platform, so the less C++ extra feature we use, the faster the code becomes, and the more portable it is. Is there an alternative design I can consider? update: I appreciate everyones answer about idiotic code standard. The only thing I can say is, in big organizations you have to have strict and sometimes illogical rules, to make sure no idiot would come and make your good code unmaintainable. The standard is more about people than about technicalities. Yes, bad man can make every code a mess, but it's much worse if you give him extra tools for the task. I'm still looking for a technical answer.
