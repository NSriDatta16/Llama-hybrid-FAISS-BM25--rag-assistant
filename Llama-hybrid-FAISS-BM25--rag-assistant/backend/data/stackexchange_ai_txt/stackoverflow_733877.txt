[site]: stackoverflow
[post_id]: 733877
[parent_id]: 733809
[tags]: 
Since I work primarily on intranet apps this hasn't been too much of an issue with me. However, I often do apps for other departments and sometimes, especially when the project is large, we do sign a memorandum of understanding (MOU) with regard to the project scope, (expected) duration, and cost. Since I work in an agile way, none of those things are fixed, which is often hard to explain to other departments that haven't worked this way before. Typically I will include a description of the process itself -- a couple of paragraphs -- explaining how the project is a cooperative venture between them and me, that together we determine when we're done. By the time the MOU is actually written, I've already invested a number of hours in the project discovering what the requirements are (these are handled at a standard hourly rate). Based on that coupled with an estimate of my velocity and similarity to previous projects, I give an broad estimate of the amount of time and cost for the required features -- again explaining, that the real cost is determined by which features we actually implement and how long it really takes. This takes a fair amount of trust, but since we've been working together to develop the requirements I usually have that with the individuals that I'm dealing with directly. I often try to leave the actual estimate out of the MOU, but will include it if their manager's insist. I do try to give them a budget number. My experience is that once the project starts and you start delivering value to the customer, they are rarely unhappy. Typically, they ask for (and pay for) more than the original project scope. Often, we both agree that some of the original features are not required, but I always expect that. After all, they really have no way of knowing for sure until they actually see things in operation what it is that they really need. More often than not, we drop some features and add others based on the actual development. I suppose if we didn't there wouldn't be any point to using agile methods. I think the key issue is trust. I'd suggest working with a new customer on smaller projects or explicitly breaking a large project into smaller projects to develop trust. Once they and you know that you can trust each other to build the right product with the right features, I think the risk -- and there always is one -- of the customer pulling out abruptly is minimized.
