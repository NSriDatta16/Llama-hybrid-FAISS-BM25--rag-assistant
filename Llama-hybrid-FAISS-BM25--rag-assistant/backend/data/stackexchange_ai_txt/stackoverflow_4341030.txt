[site]: stackoverflow
[post_id]: 4341030
[parent_id]: 4340965
[tags]: 
In C, conversions from pointer to integer types (and vice versa) are implementation defined 1 (this means that the implementation must document whether this is supported and/or how it is done). Also there is no guarantee that a pointer to void has the same size or can represent all the same values as a long integer. It would be better to allocate an array of pointer to void type, for example: void **pointerLUT = malloc(sizeof (void *) * numPointers); // Populate the array with pointers. for (int i=0; i 1 : See section ยง6.3.2.3 paragraphs 5 and 6: (5) An integer may be converted to any pointer type. Except as previously specified, the result is implementation-defined, might not be correctly aligned, might not point to an entity of the referenced type, and might be a trap representation. (6) Any pointer type may be converted to an integer type. Except as previously specified, the result is implementation-defined. If the result cannot be represented in the integer type, the behavior is undefined. The result need not be in the range of values of any integer type.
