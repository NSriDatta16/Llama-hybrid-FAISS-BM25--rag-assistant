[site]: stackoverflow
[post_id]: 2678953
[parent_id]: 
[tags]: 
Game loop performance and component approach

I have an idea of organising a game loop. I have some doubts about performance. May be there are better ways of doing things. Consider you have an array of game components. They all are called to do some stuff at every game loop iteration. For example: GameData data; // shared app.registerComponent("AI", ComponentAI(data) ); app.registerComponent("Logic", ComponentGameLogic(data) ); app.registerComponent("2d", Component2d(data) ); app.registerComponent("Menu", ComponentMenu(data) )->setActive(false); //... while (ok) { //... app.runAllComponents(); //... } Benefits: good component-based application, no dependencies, good modularity we can activate/deactivate, register/unregister components dynamically some components can be transparently removed or replaced and the system still will be working as nothing have happened (change 2d to 3d)(team-work: every programmer creates his/her own components and does not require other components to compile the code) Doubts: inner loop in the game loop with virtual calls to Component::run() I would like Component::run() to return bool value and check this value. If returned false, component must be deactivated. So inner loop becomes more expensive. Well, how good is this solution? Have you used it in real projects?
