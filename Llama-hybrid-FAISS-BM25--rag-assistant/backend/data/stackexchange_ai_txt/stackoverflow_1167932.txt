[site]: stackoverflow
[post_id]: 1167932
[parent_id]: 1167528
[tags]: 
Iâ€™m assuming that creating a SpriteBatch instance for each object would cause too much overhead. As the name imply, the SpriteBatch is used to organize a batch of sprites and draw them in a particular way in a buffer. When you call SpriteBatch.End(), the sprites added in the SpriteBatch are sorted (or not) and written in a buffer (ex: the screen) using a particular blend mode and other options specified before SpriteBatch.End(). When you call SpriteBatch.Begin(), you have to call SpriteBatch.End() before calling SpriteBatch.Begin() again (using the same SpriteBatch object). So this code is wrong : class Main { private Ship ship; private SpriteBatch spriteBatch; //logic to create the ship/spriteBatch public override void Draw(SpriteBatch spriteBatch) { spriteBatch.Begin(); ship.Draw(spriteBatch); spriteBatch.End(); } } class Ship { private Texture2D image; //logic to create the image public void Draw(SpriteBatch spriteBatch) { spriteBatch.Begin(); spriteBatch.Draw(image, Vector2.Zero, Color.White); spriteBatch.End(); } } because spriteBatch.Begin is called twice. The right way to do it : class Main { private Ship ship; private SpriteBatch spriteBatch; //logic to create the ship/spriteBatch public override void Draw(SpriteBatch spriteBatch) { spriteBatch.Begin(); ship.Draw(spriteBatch); spriteBatch.End(); } } class Ship { private Texture2D image; //logic to create the image public void Draw(SpriteBatch spriteBatch) { spriteBatch.Draw(image, Vector2.Zero, Color.White); } }
