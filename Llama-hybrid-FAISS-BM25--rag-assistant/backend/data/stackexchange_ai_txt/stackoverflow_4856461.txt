[site]: stackoverflow
[post_id]: 4856461
[parent_id]: 4825164
[tags]: 
I found a solution at this link: How to use Javascript to communicate with Objective-c code? Essentially, the solution is to implement the UIWebViewDelegate protocol's shouldStartLoadWithRequest method, and "trap" a particular value of scheme. So my links, instead of saying something like: are like: By catching attempts to load anything with scheme "mylink," I can use: [[request URL] fragment] within shouldStartLoadWithRequest, and get the filename.ext. I then release my previous UIWebView, load in the contents of the specified file, and make that the contents of a new UIWebView. The effect is that the links work with normal appearance, even though they are being implemented with my code. I return NO because I don't want the usual loading to take place. If the scheme is NOT mylink, I can return YES to allow normal operation. Regrettably, I still have no way to jump TO a fragment within a web view. In linking to a real URL, you can say something like "www.foo.org#page50" and jump straight to wherever an object on the new page has an id of "page50." With my method, I can only go to the top of the page. This is also not going to give me a "go-back" function unless I record the filenames and implement it myself.
