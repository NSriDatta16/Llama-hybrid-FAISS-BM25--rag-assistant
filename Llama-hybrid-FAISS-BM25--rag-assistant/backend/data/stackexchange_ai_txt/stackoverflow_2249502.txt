[site]: stackoverflow
[post_id]: 2249502
[parent_id]: 
[tags]: 
C++ Sample Project - Need help with algorithm

I had one of my friends send me this programming assignment so I could brush up on some of my C++ skills. Below is the program description and my proposed algorithm. Could someone please provide some feedback/alternative solutions: Problem: This program creates word search puzzles - Words are printed at random locations in a rectangular grid. Words may be horizontal or vertical and may be forward (left-to-right or top-to-bottom) or reversed (right-to-left or bottom-to-top). Unused grid squares are filled with random letters. The program should take a set of word lists as input and produce two files as output. The first lists, for each puzzle, the list of words in the puzzle, followed by the puzzle itself. The second should show where in each puzzle the words are located, without the random filler letters Our input file contains the following: A number n > 0 (representing the # of words in the puzzle) followed by that many words. For example: 3 FRODO GIMLI ARAGORN N will not be larger than 10 We need to create the puzzle using a multidimensional array of size 12 x 12 Requirements: 1. Two output files - One containing the puzzle words and he puzzles, one with only the solutions and no filler characters 2.There needs to be as many horizontal words as there are vertical words 3. A 1/3 of the words needs to be reversed 4. There needs to be at least two intersections in the puzzle Proposed Algorithm: 1. Create two multidimensional arrays - one for the puzzle and one for the solutions 2. Create a one-dimensional array that contains the various letters of the alphabet 3. Fill the puzzles array with random letters of the alphabet (using a pseudo-random # generator and the array from step # 2) 4. Begin reading the input file 5. Read in n 6. While counter is less than n, read in words, also have a counter for vertical words and horizontal words 7. For each word, find the length of the string 8. Find a random array location to insert the word. 9. If random location index + string length = 0 (to ensure that the word will fit forward or reverse) insert the word 10. Also insert the word into the solutions array 12. Reuse arrays to insert all the words in the input file (in a similar manner) I am still unsure as to how I can ensure that at least two intersections exist. I am also concerned that my proposed algorithm is unnecessarily convoluted. Your feedback is greatly appreciated! OK, Here's as far as I got into the coding process, before I decided to go back and revisit the algorithm: #include #include #include #include #include using namespace std; //Error Codes const int INPUT_FAIL = 1; const int PUZZLES_OUTPUT_FAIL = 2; const int SOLUTIONS_OUTPUT_FAIL = 3; //Function Declarations/Prototypes void OpenFiles(ifstream& input, ofstream& puzzles, ofstream& solutions); //PRE: The filestream objects exist and their address locations are passed in //POST: The filestreams are opened. If they cannot be opened, an error message is printed to screen // and the program is terminated. void FillArray(char puzzle[][12], char alphabet[]); //PRE: The address of the array is passed in //POST: The array is filled with a random set of void CreatePuzzle(char puzzle[][12], ifstream& input, ofstream& puzzles, ofstream& solutions); //PRE: The address of the puzzle array,the address of the ifstream object and the addresses of the // ofstream objects are passed in. //POST: The data in the input file is read and the words are input into the puzzle AND the puzzle // and solutions are printed to file. void PrintPuzzle(char puzzle[][12], ofstream& output); //PRE: The address of the puzzle array and the ofstream object is passed in //POST: The puzzle is output to the file int main() { //Seed the pseudo random generator srand(time(NULL)); //Declare the filestream objects ifstream input; ofstream puzzles, solutions; //Declare the 2D array char puzzle[12][12]; char solution[12][12]; //Declare an alphabet array char alphabet[27] = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ"}; /*char alphabet[27] = {'A','B','C','D','E','F','G','H','I','J','K','L', 'M','N','O','P','Q','R','S','T','U','V','W', 'X','Y','Z'};*/ //Attempt to open files OpenFiles(input, puzzles, solutions); //Fill puzzle array with random letters of the alphabet FillArray(puzzle, alphabet); //Print puzzle PrintPuzzle(puzzle, puzzles); //Read in data to create puzzle input >> numwords; return 0; } //Function definitions void OpenFiles(ifstream& input, ofstream& puzzles, ofstream& solutions) { //Attempt to open files input.open("input.txt"); puzzles.open("puzzles2.txt"); solutions.open("solutions2.txt"); //Ensure they opened correctly if (input.fail()) { cout > numwords; int vwords = numwords/2; //#of vertical words int rwords = numwords/3; //# of reversed words int hwords = (numwords - (numwords/2)); //# of horizontal words for(int i = 0; i > pword; tmparray[] = pword; wordlength = pword.length(); //Find a random array location to begin inserting the words startloc = rand()%12; int tmpcount = 0; //a temporary counter to ensure that for(tmpcount; tmpcount
