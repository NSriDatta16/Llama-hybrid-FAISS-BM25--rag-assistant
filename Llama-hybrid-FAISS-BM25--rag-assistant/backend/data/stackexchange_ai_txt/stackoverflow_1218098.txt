[site]: stackoverflow
[post_id]: 1218098
[parent_id]: 645449
[tags]: 
You will want to declare a delegate protocol for your class. An example of a delegate protocol and interface for class Foo might look like this: @class Foo; @protocol FooDelegate @optional - (BOOL)foo:(Foo *)foo willDoSomethingAnimated:(BOOL)flag; - (void)foo:(Foo *)foo didDoSomethingAnimated:(BOOL)flag; @end @interface Foo : NSObject { NSString *bar; id delegate; } @property (nonatomic, retain) NSString *bar; @property (nonatomic, assign) id delegate; - (void)someAction; @end Don't forget to synthesize your properties in the @implementation . What this code did was declare a protocol called FooDelegate; a class that conforms to this protocol would be declared like @interface SomeClass : SuperClass {} . Because this class conforms to the protocol FooDelegate , it now gets to implement the methods under FooDelegate (to require that these be implemented, use @required instead of @optional ). The last step is for a Foo object to be instantiated in the class that conforms to FooDelegate , and for this Foo object to have its delegate property set: Foo *obj = [[Foo alloc] init]; [obj setDelegate:self]; Now, your class is prepared to receive messages from Foo objects that have their delegates set correctly.
