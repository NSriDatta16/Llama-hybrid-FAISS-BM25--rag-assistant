[site]: stackoverflow
[post_id]: 5079733
[parent_id]: 5079478
[tags]: 
I would recommend that you use lazy loading instead of reflections - it's faster and I think ProGuard will run fine, too: http://android-developers.blogspot.com/2010/07/how-to-have-your-cupcake-and-eat-it-too.html Here is a simple example of a current project of mine where I activate StrictMode (if available): public abstract class StrictModeUtil { private static class GingerbreadAndBeyond extends StrictModeUtil { private static class Holder { private static final GingerbreadAndBeyond INSTANCE = new GingerbreadAndBeyond(); } public GingerbreadAndBeyond() { // we just enable StrictMode here, but only in developer mode if (C.D) { android.os.StrictMode.enableDefaults(); } } } public static StrictModeUtil getInstance() { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) { return GingerbreadAndBeyond.Holder.INSTANCE; } else { // we don't need an implementation before Android 2.3 return null; } } }
