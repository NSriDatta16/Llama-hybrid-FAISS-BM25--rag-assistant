[site]: stackoverflow
[post_id]: 1666176
[parent_id]: 
[tags]: 
Intermediate results using expression templates

in C++ Template Metaprogramming : Concepts, Tools, and Techniques from Boost and Beyond ... One drawback of expression templates is that they tend to encourage writing large, complicated expressions, because evaluation is only delayed until the assignment operator is invoked. If a programmer wants to reuse some intermediate result without evaluating it early, she may be forced to declare a complicated type like: Expression , plus, Expression > intermediate = a + b + (c - d); (or worse). Notice how this type not only exactly and redundantly reflects the structure of the computationand so would need to be maintained as the formula changes but also overwhelms it? This is a long-standing problem for C++ DSELs. The usual workaround is to capture the expression using type erasure, but in that case one pays for dynamic dispatching. There has been much discussion recently, spearheaded by Bjarne Stroustrup himself, about reusing the vestigial auto keyword to get type deduction in variable declarations, so that the above could be rewritten as: auto intermediate = a + b + (c - d); This feature would be a huge advantage to C++ DSEL authors and users alike... Is it possible to solve this problem with the current c++ std. (non C++0X) For Example i want to write a Expression like: Expr X,Y Matrix A,B,C,D X=A+B+C Y=X+C D:=X+Y Where operator := evaluate the expression at the latest Time.
