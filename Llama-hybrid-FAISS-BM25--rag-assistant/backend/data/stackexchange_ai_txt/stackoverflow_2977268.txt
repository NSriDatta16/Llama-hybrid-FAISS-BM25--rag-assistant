[site]: stackoverflow
[post_id]: 2977268
[parent_id]: 2976838
[tags]: 
[Edited to make clearer, and to suggest looking for an empty element] Apparently, some of the elements returned by getElementsByTagName don't have a firstChild. This happens when the element is empty, as in When minidom encounters that situation, it'll set "element.firstChild" to None. This is very likely what's happening to you. Otherwise, it's hard to say what's happening, exactly, with only a fragment of the XML (and a broken one, at that), but you could try catching the exception and inspecting the element in question: for element in elements: try: myDict[element.getAttribute('name')] = element.firstChild.data except AttributeError: print element, element.firstChild Or, instead of simply printing the element, you could call the debugger (import pdb; pdb.set_trace()). Then you can see the element, and understand why it's giving you trouble. BTW, the "^M" is simply a windows-style carriage-return. I adapted the xml fragment you pasted, to test locally, and the "^M" makes no difference whatsoever, minidom takes care of it. So, check for an empty element, or use the try/except as I suggested. If you still can't tell what's going on, paste the complete XML string (at http://pastebin.com/ , for example), I might be able to help. Also, on a related note: once you've sorted out this issue, you can construct the dictionary with a list comprehension: myDict = dict((element.getAttribute('name'), element.firstChild.data) for element in elements) And, if you've determined that it is a matter of empty elements, you can skip them thusly: myDict = dict((element.getAttribute('name'), element.firstChild.data) for element in elements if element.firstChild is not None)
