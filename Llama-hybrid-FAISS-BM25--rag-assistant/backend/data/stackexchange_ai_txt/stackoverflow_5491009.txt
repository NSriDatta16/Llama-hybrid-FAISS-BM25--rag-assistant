[site]: stackoverflow
[post_id]: 5491009
[parent_id]: 
[tags]: 
C# Serialize a class with a List data member

I have this c# class: public class Test { public Test() { } public IList list = new List (); } Then I have this code: Test t = new Test(); t.list.Add(1); t.list.Add(2); IsolatedStorageFile storage = IsolatedStorageFile.GetUserStoreForApplication(); StringWriter sw = new StringWriter(); XmlSerializer xml = new XmlSerializer(t.GetType()); xml.Serialize(sw, t); When I look at the output from sw, its this: the values 1,2 I added to the list member variable dont show up. So how can I fix this ? I made the list a property but it still doesnt seem to work. I am using xml serialization here, are there any other serializers ? I want performance! Is this the best approach ? --------------- UPDATE BELOW ------------------------- So the actual class I want to serialize is this: public class RoutingResult { public float lengthInMeters { get; set; } public float durationInSeconds { get; set; } public string Name { get; set; } public double travelTime { get { TimeSpan timeSpan = TimeSpan.FromSeconds(durationInSeconds); return timeSpan.TotalMinutes; } } public float totalWalkingDistance { get { float totalWalkingLengthInMeters = 0; foreach (RoutingLeg leg in Legs) { if (leg.type == RoutingLeg.TransportType.Walk) { totalWalkingLengthInMeters += leg.lengthInMeters; } } return (float)(totalWalkingLengthInMeters / 1000); } } public IList Legs { get; set; } // this is a property! isnit it? public IList test{get;set;} // test ... public RoutingResult() { Legs = new List (); test = new List (); //test test.Add(1); test.Add(2); Name = new Random().Next().ToString(); // for test } } But the XML produced by the serializer is this: 9800.118 1440 630104750 ??? its ignoring both of those lists ?
