[site]: stackoverflow
[post_id]: 2143521
[parent_id]: 2142184
[tags]: 
Java brought to the fore the need to program with Exceptions. I've found Java tends to willingly throw Exceptions, which is annoying because you have to catch them if you don't want your app to crash. Unfortunately, Exceptions in Java are a fairly heavy feature. I learnt about effectively using exceptions in Icon. Icon has this neat thing called 'Failure'. If an expression doesn't have a value it can return, it will instead Fail. This functions like a miniature exception only instead of the try {} catch {} notation, Failure is handled by language elements directly, such as if and while . IMO, that is how Exceptions should work in Java... but unfortunately, they don't. Instead, you end up writing defensive code to prevent Exceptions rather than handling them easily and naturally. Silently swallowing a particular Exception because it's reasonably rare and much more elegant than preventing it I would regard as A Useful Trick. But it's the kind of thing that responds to " You must know the rules before you can break them ". In other words, don't do it too often. I wish more languages supported the Success/Failure model found in Icon.
