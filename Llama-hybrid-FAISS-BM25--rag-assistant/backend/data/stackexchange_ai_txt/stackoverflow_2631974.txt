[site]: stackoverflow
[post_id]: 2631974
[parent_id]: 545535
[tags]: 
You can gain tremendous insight into what the regex engine is doing in Perl with the use re debug pragma. It is documented here It is always helpful to review the Perl suggested performance techniques , including suggested timing methods. If I run this small test: #!/usr/bin/perl use strict; use warnings; use Benchmark; my $target="aeiou"; my $str="lkdjflzdjfljdsflkjasdjf asldkfj lasdjf dslfj sldfj asld alskdfj lasd f"; my $str2=$str.$target; timethese(10_000_000, { 'float' => sub { die "no match" unless $str2=~m/$target/o; }, 'anchored' => sub { die "no match" unless $str2=~m/^.*$target/o; }, 'prefixed' => sub { die "no match" unless $str2=~m/^$str$target/o ; }, }); I get the output of: Benchmark: timing 10000000 iterations of anchored, float, prefixed... anchored: 4 wallclock secs ( 3.46 usr + 0.01 sys = 3.47 CPU) @ 2881844.38/s float: 2 wallclock secs ( 1.87 usr + 0.00 sys = 1.87 CPU) @ 5347593.58/s prefixed: 4 wallclock secs ( 3.05 usr + 0.01 sys = 3.06 CPU) @ 3267973.86/s Which leads to the conclusion that non-anchored (floating) version is way faster. However, the regex and the source may change that. YMMV and test test test...
