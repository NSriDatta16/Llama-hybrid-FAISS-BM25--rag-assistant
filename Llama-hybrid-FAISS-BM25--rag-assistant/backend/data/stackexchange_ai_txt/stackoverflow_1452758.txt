[site]: stackoverflow
[post_id]: 1452758
[parent_id]: 1452668
[tags]: 
It is standard stuff. To the receiving program everything coming over the network is just a stream of bytes. The stream has no meaning beyond what the application imposes upon it, exactly the same way a file has no meaning beyond how its records, lines, etc., are defined by the application(s). The only way the client and server can make sense of the stream is to establish a convention, or protocol, that they agree upon. So some common ways to accomplish this are by: have a delimiter that designates the end of a message (e.g. a carriage return) pass a length field, as in your example, which tells the receiver how much data comprises the next message. just establish a fixed convention (e.g. every message will be 20 bytes or type 'A' records will be one defined format, type 'B' records another...) just treat it like a stream by having no convention at all (e.g. take whatever comes over the network and put it in a file w/o paying any attention to what it is) One advantage of the length byte method is that the receiver knows exactly how much data to expect. With some added sanity checks this can help eliminate things like buffer overflows and such in your application.
