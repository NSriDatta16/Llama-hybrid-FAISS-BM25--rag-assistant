[site]: stackoverflow
[post_id]: 3188346
[parent_id]: 3186532
[tags]: 
I'll try to answer my question (I hope that correctly..). I've found this post Writing Custom Lifetime Managers . I've been trying to implement solution I've described previously in details, based on that post and the previous one: Singleton WCF Proxy . Below is what I have created. Of course I have to test that code. For the first look, it is rather ok, but I'll see later. public class SingletonWCFProxyLifestyleManager : LifetimeManager, IRequiresRecovery, IDisposable { private static readonly object _locker = new object(); private Guid _key; public SingletonWCFProxyLifestyleManager() { _key = Guid.NewGuid(); } public override object GetValue() { Monitor.Enter(_locker); object result = Storage.Instance.Get(_key); if (result != null) { ICommunicationObject communicationObject = result as ICommunicationObject; //If the proxy is in faulted state, it's aborted and a new proxy is created if (communicationObject != null && communicationObject.State == CommunicationState.Faulted) { try { communicationObject.Abort(); } catch { } Dispose(); return null; //Return before releasing monitor } Monitor.Exit(_locker); } return result; } public override void RemoveValue() { } public override void SetValue(object newValue) { Storage.Instance.Set(_key, newValue); TryToReleaseMonitor(); } #region IRequiresRecovery Members public void Recover() { TryToReleaseMonitor(); } #endregion private void TryToReleaseMonitor() { try { Monitor.Exit(_locker); } catch(SynchronizationLockException) { } // This is ok, just means we don't hold the lock } #region IDisposable Members public void Dispose() { object result = Storage.Instance.Get(_key); if (result != null) { try { Storage.Instance.RemoveAndDispose(_key); } catch { ICommunicationObject communicationObject = result as ICommunicationObject; if (communicationObject != null) { communicationObject.Abort(); } } } } #endregion } Storage utility class has been created for caching instances of services (it contains hashtable ans a few utility methods, like Get or RemoveAndDispose ), but it is too simple for pasting it here.
