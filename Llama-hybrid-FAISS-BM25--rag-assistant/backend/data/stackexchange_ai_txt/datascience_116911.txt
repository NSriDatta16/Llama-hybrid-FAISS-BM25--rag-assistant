[site]: datascience
[post_id]: 116911
[parent_id]: 114427
[tags]: 
Nice question. A natural formalization is as follows. We have a fixed weight vector $b$ (where $b_i$ corresponds to the weighted degree of vertex $i$ , that is, the sum of weights of edges incident to vertex $i$ ). We have the vertex - edge incidence matrix $A$ of the complete multigraph with loops. We want to sample a random point under the Lebesgue measure (in the corresponding linear subspace) from the convex polytope defined by $$ A x = b \quad \mbox{and} \quad x_e \ge 0 \mbox { for each edge $e$}. $$ The general problem seems to be hard, and still an open question, see https://mathoverflow.net/questions/9854/uniformly-sampling-from-convex-polytopes . Answers to that question point to a "Hit and Run" method, where we perform a Markov Chain Monte Carlo random walk inside the polytope, iteratively choosing a random direction and a random point between the current point and the boundary in that direction. Here is my implementation in R for generating small random graphs using the hitandrun library: #install.packages("hitandrun") # generate the incidence matrix of the complete multigraph r $A[v, e] = 1 # if and only if vertex v is incident to the edge r$ edges[e] generate_matrix $edges) # =n(n+1)/2 A A, # the constraint that incident edge weights for vertex i sum to weights[i] diag(-1, n_edges) # add the constraint that edge weights are non-negative ) dir The library is fast for very small graphs, but the running time scales as $n^6$ , so it is already more than a few seconds for $n=10$ . Other projects, for example, volesti , might offer slightly faster sampling. But I have no idea what the typical random weighted graph looks like for very large $n$ . It would be very interesting to learn and I don't know if this has been addressed in research.
