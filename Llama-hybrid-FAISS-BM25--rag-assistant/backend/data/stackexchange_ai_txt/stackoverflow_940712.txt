[site]: stackoverflow
[post_id]: 940712
[parent_id]: 
[tags]: 
Redefining a let'd variable in Clojure loop

OK. I've been tinkering with Clojure and I continually run into the same problem. Let's take this little fragment of code: (let [x 128] (while (> x 1) (do (println x) (def x (/ x 2))))) Now I expect this to print out a sequence starting with 128 as so: 128 64 32 16 8 4 2 Instead, it's an infinite loop, printing 128 over and over. Clearly my intended side effect isn't working. So how am I supposed to redefine the value of x in a loop like this? I realize this may not be Lisp like (I could use an anonymous function that recurses on it's self, perhaps), but if I don't figure out how to set variable like this, I'm going to go mad. My other guess would be to use set!, but that gives "Invalid assignment target", since I'm not in a binding form. Please, enlighten me on how this is supposed to work.
