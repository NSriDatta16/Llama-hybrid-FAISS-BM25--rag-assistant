[site]: stackoverflow
[post_id]: 2334822
[parent_id]: 2332259
[tags]: 
the general rule to follow for assertions is that you assert against output interactions, not input interactions. the FindMovies stub is returning a "movies" collection to the class that called it and you are then verifying that the class received the correct list via the "it should return a list of movies matching the director" assertion. if the FindMovies method is not called, then this assertion will fail. therefore, you do not need to assert the calls against the FindMovies method. to counterpoint this, if you have an mock or stub that is purely output - let's say an IView interface being called by a Presenter class, then you do want to assert against the IView being called. for example, this code: public class MyPresenter { ... other code here public DoSomething() { IList data = GetSomeData(); myView.DisplayData(data); } } you would want to assert that the view.DisplayData method is called in this case, because you are not retrieving anything from this call that can be asserted by another test. as for the "fetch from repository" - of course your customers care about that. they want the system to save movies to the storage and load them from the storage. however ... the FindMovies call is an input into the class being tested, so it's not necessary to have this assetion or test, at all. if the FindMovies method is not called, then the other test will fail and let you know that there is a problem.
