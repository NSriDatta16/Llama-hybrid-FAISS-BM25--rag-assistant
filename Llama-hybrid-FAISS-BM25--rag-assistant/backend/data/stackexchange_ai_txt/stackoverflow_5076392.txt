[site]: stackoverflow
[post_id]: 5076392
[parent_id]: 5017945
[tags]: 
Sounds to me like you are using the RenderTransform to rotate the image. The problem is the transform is applied after the size and position of the image has been allocated hence the rotated image bleads outside of its original rectangle. One solution is to use the LayoutTransfomer to effect that transform instead. This would cause the WrapPanel to re-flow the elements even moving the image to the next row. Here is an example using rectangles for simplicity:- I've added code-behind:- private void Rectangle_MouseLeftButtonUp(object sender, MouseButtonEventArgs e) { LayoutTransformer lt = ((FrameworkElement)sender).Parent as LayoutTransformer; RotateTransform rt = (RotateTransform)lt.LayoutTransform; rt.Angle += 90; lt.ApplyLayoutTransform(); } My TestData items source is an arbitary List , doesn't really matter what is in the list just that it contains a few items. Using the ScrollViewer as dynamic clipping region Note that its normal to place a WrapPanel in a ScrollViewer which naturally clips its content anywar. Perhaps you really do want to clip the WrapPanel and you don't want any scrolling. Obviously you could apply a RectangleGeometry its Clip property but you would have to ensure the clip rectangle always matched the actual size of the WrapPanel . You could do that by monitoring its SizeChanged event and using a bit of code. Another approach is to put it in a ScrollViewer then disable both scroll bars.
