[site]: stackoverflow
[post_id]: 5601392
[parent_id]: 5183627
[tags]: 
The issue is profound and linked to the depth buffer. You can set alpha to zero in shader code, but you will still output a depth fragment, so it's only a partial workaround depending on your reason for using alpha test. So you could bias alpha and scale by a large number (to avoid the shader branch) then clamp and you'll get a sharp delineated alpha test edge, but transparent pixels will still fill the zbuffer which if that's your reason for using alpha test you're still no better off. You cannot really get around the core problem in a shader. You could adjust your content to minimize this and perhaps draw opaque untested z and do alpha tested transprency last. The details of how this affects z can very from platform to platform. On some platforms zbuffer optimizations like early z and coarse z might be disabled permanently from then until your next clear, so in delaying alpha test you could gain performance, but it really is down to the details of the implementation. Adjust the art to minimize transparent fragments and use alpha test as late as possible when rendering if it cannot be avoided. Also if you have a discard function, use it at the end of your shader against a constant alpha test, it may be counterintuitive but some implementations optimize this alpha test discard to use fixed function hardware which is better than a shader branch (on some platforms). Again it really depends on how sophisticated the GPU thread flow control is. Future platforms with efficient branching will probably benefit from doing this earlier, you're basically trying to navigate your way to exploit hidden implementation optimizations that vary across platforms and will change in future.
