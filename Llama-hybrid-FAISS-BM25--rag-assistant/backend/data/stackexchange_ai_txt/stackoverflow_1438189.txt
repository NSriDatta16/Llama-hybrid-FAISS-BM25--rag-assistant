[site]: stackoverflow
[post_id]: 1438189
[parent_id]: 1437924
[tags]: 
There is a problem with your average . average a = (sum a) `div` (length a) sum uses the entire list. length also uses the entire list. This means that the whole list will be generated and held in memory while one of these functions traverses it, and will not be garbage collected until the other function traverses it. You pass average a very large list, so you will run out of memory. Solution: rewrite average as a function that only traverses the list once, so that the list can be garbage collected as it is generated. Example (untested): average a = sum `div` length where (sum, length) = foldl' f (0, 0) a f (sum, length) i = (sum + i, length + 1) Note that this uses foldl' , from Data.List , not foldl . foldl has its own space issues (which someone more knowledgeable than me may wish to comment on). And as Tobias WÃ¤rre has pointed out, roundedSq n | (roundedSq n) == roundedSq (n-1) = n : roundedSq (n+1) will result in an endless loop: we want to evaluate roundedSq n if (roundedSq n) == roundedSq (n-1) is true, we will return n : roundedSq (n+1) as the answer we need to evaluate (roundedSq n) == roundedSq (n-1) we need to evaluate roundedSq n goto 1.
