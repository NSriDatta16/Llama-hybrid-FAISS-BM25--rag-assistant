[site]: stackoverflow
[post_id]: 1961843
[parent_id]: 1961674
[tags]: 
Our development stack (team of 10+ developers) Eclipse IDE with M2Eclipse and Subclipse/Subversive Subversion for source control, some developers also use TortoiseSVN where Subclipse fails Maven 2 for project configuration (dependencies, build plugins) and release mgmt (automatic tagging of releases) Hudson for Continuous Integration (creates also snapshot releases with source attachments and reports) Archiva for artifact repository (multiple repositories, e.g. releases and snapshots are separated) Sonar for code quality tracking (e.g. hotspots, coverage, coding guidelines adherence) JIRA for bug tracking Confluence for developer wiki and communication of tech docs with other departments Docbook for manuals (integrated into build) JMeter for stress testing and long-term performance monitoring Selenium/WebDriver for automated browser integration tests Jetty, Tomcat, Weblogic and Websphere as test environments for web apps. Products are deployed every night and automated tests are run on distributed Hudsons. Mailinglist with all developers for announcements, general info mails Daily stand up meetings where everbody tells about what he's currently doing This setup is considered standard for our company as many departments are using those tools and there is a lot of experience and community support for those. You are absolutely right about trying to automate as much as possible. If your collegues start to see the benefits when aspects of the development phases are automated, they will be encouraged to improve on their own. Of course, every new technology gimmick ("tool") is a new burden and has to be managed and maintained. This is where the effort is moved. You save time e.g. when maven automatically performs your releases, but you will waste time on managing maven itself. My experience is that every time I introduced a new tool (one of the aboves), it takes time to be adopted and cared about, but in the end it will bring advantages to the whole team when real value is experienced - esp. in times of stress when the tools take over much of the work you would have to do manually.
