[site]: stackoverflow
[post_id]: 594881
[parent_id]: 583562
[tags]: 
The JSON spec requires UTF-8 support by decoders. As a result, all JSON decoders can handle UTF-8 just as well as they can handle the numeric escape sequences. This is also the case for Javascript interpreters, which means JSONP / JSON decoded with a Javascript interpreter will also handle the UTF-8 encoded JSON. The ability for JSON encoders to use the numeric escape sequences instead just offers you more choice. One reason you may choose the numeric escape sequences would be if a transport mechanism in between your encoder and the intended decoder is not binary-safe. Another reason you may want to use numeric escape sequences is to prevent certain characters appearing in the stream, such as , & and " , which may be interpreted as HTML sequences if the JSON code is placed without escaping into HTML or a browser wrongly interprets it as HTML. This can be a defence against HTML injection or cross-site scripting (note: some characters MUST be escaped in JSON, including " and \ ). Some frameworks, including PHP's json_encode() (by default), always do the numeric escape sequences on the encoder side for any character outside of ASCII. This is a mostly unnecessary extra step intended for maximum compatibility with limited transport mechanisms and the like. However, this should not be interpreted as an indication that any JSON decoders have a problem with UTF-8. So, I guess you just could decide which to use like this: Just use UTF-8, unless any software you are using for storage or transport between encoder and decoder isn't binary-safe. Otherwise, use the numeric escape sequences.
