[site]: stackoverflow
[post_id]: 312045
[parent_id]: 311949
[tags]: 
I think your problem is that your current example isn't testable. Since you want to know if x was deleted, you really need to be able to replace x with a mock. This is probably a bit OTT for an int but I guess in your real example you have some other class. To make it testable, the X constructor needs to ask for the object implementing the int interface: template class X { T *x; public: X(T* inx) : x(inx) { } // etc }; Now it becomes simple to mock in the value for x , and the mock can handle checking for correct destruction. Please pay no attention to the people who say you should break encapsulation or resort to horrible hacks in order to result in testable code. While it is true that tested code is better than untested code, testable code is the best of all and it always results in clearer code with fewer hacks and lower coupling.
