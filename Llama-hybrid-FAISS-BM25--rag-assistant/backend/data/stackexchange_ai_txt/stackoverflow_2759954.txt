[site]: stackoverflow
[post_id]: 2759954
[parent_id]: 
[tags]: 
nHibernate mapping for entity to multiple different parent entities (eg Addres -> Firm, Addres -> Client)

Can someone help me with the best way to map the following situation in fluent nHibernate? The Address class is used in both Client and Company. How can I store it most efficient in SQL? And what should the mapping look like? I've thought about multiple options, but I'm not experienced enough with nHibernate for these situations: use 1 address entity and 1 table and use a denominator column to distinguish between address for client and address for company -> how to implement this in nHibernate? use 1 address entity and 2 tables (ClientAddresses and CompanyAddresses) --> but I can only define 1 table in the mapping of the class Address use 2 address entities and 2 tables --> not so elegant I've just stumbled upon this problem when I started implementing the company class and realized it also needed multiple addresses. Up till now I had a Address and Client class and had a one-to-many mapping between them. In the database the Address had an extra column called ClientId. But with introducing the Company class I'm stuck... Any help would greatly be appreciated. I'm currently working in the sharparch 1.5 framework, which uses automapping and my mapping files are like this: public class AddressMap : IAutoMappingOverride { public void Override(AutoMapping mapping) { mapping.Table("addresses"); mapping.Id(x => x.Id, "AddressGuid") .UnsavedValue(Guid.Empty) .GeneratedBy.GuidComb(); mapping.References(x => x.Client, "ClientGuid"); } } Below some more code the illustrate the problem: Address public class Address { public virtual string StreetLine1 { get; set; } public virtual string StreetLine2 { get; set; } public virtual string PostalCode { get; set; } public virtual string City { get; set; } public virtual string Country { get; set; } } which has the following table: tablename = addresses fields= AddressGuid, StreetLine1, StreetLine2, PostalCode, City, Country Client public class Client { public IList Addresses {get;set;} } Company public class Company { public IList Addresses {get;set;} }
