[site]: stackoverflow
[post_id]: 5290989
[parent_id]: 
[tags]: 
How to organise my code in 'modules'?

I'm trying to wrap my head around organising my code. I have several modules within my project, which I'd like to organise. The point is that all what has come to my mind doesn't work out. I'm currently thinking of four ideas: Simple object - Is not useful due to scoping issues. Using this.a would work, but this has a different meaning depending on who called it so it's not reliable. For example, I once assigned a function to a WebSocket class, but all of a sudden this referred to the WebSocket instance when the function was called by a WebSocket event. I could use bind(foo) each time I call the function, but there must be another way I guess. var foo = { a: 3, s: function() { alert(a); // a doesn't exist in this scope alert(this.a); // 'this' isn't always foo alert(foo.a); // I would have to put 'foo.' before each variable // reference, but I'm sure that's not the way to do it } }; Instance - a is not defined. Again, this isn't reliable. var foo = function() { this.a = 3; this.s = function() { alert(a); }; }; var foo_instance = new foo(); foo_instance.a = 4; foo_instance.s(); // Error: a is not defined Closure with instance - Doesn't return anything; it stays undefined . var foo = (function() { this.a = 3; this.s = function() { alert(a); }; })(); // foo === undefined Closure with getter/setter - Works beautifully on Chrome, however IE doesn't support getters/setters. var foo = (function() { var a = 3; return { get a() { return a; }, set a(v) { a = v; }, s: function() { alert(a); // Doesn't work in IE as getters/setters are // not supported } }; })(); How would I effectively organise my modules, so that I can access the properties safely and in a cross-browser way? Thanks.
