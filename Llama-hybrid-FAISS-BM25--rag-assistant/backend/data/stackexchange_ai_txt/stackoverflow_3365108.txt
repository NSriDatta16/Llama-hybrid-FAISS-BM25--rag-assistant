[site]: stackoverflow
[post_id]: 3365108
[parent_id]: 3364965
[tags]: 
Whether you use .dup on strings influences whether in-place modifications (methods ending with ! ) affect the original string. As a silly little demonstration... irb(main):009:0> def shout(s) irb(main):010:1> local = s.dup irb(main):011:1> local.upcase! irb(main):012:1> puts local irb(main):013:1> end => nil irb(main):014:0> greeting = "hi" => "hi" irb(main):015:0> shout(greeting) HI => nil irb(main):016:0> greeting => "hi" If you run the same snippet, changing local = s.dup to local = s , then the final value of greeting will be "HI" because shout will have modified greeting . .dup returns a copy of the original string, preventing modifications to the original.
