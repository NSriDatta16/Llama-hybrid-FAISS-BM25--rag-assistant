[site]: stackoverflow
[post_id]: 3979691
[parent_id]: 
[tags]: 
is it possible to load jars-in-jars in JWS?

I have found MANY threads on packing all dependencies along with the project into one jar package, and it seems like there are many different ways to achieve this (oneJar, FatJar, Ant-build...) So cooking up my own recipe, I have (after quite some effort) managed to package the project I am working on. In this one jar file, there is the code for the project plus all the jars that the project depends on which are loaded with jar-in-jar-loader that comes with eclipse. The resultant works fine on a number of different platforms, when it's ran through the terminal invoked via java -jar myjarfile . Peachy, you might say, here's the problem though; when I sign my jar and try to run it via javaws (which is the ultimate goal here) I get an exception which I have decrypted to mean that libraries (in the case below org.apache.commons.lang.SystemUtils) are unaccessible . So here's my question; is it not possible to load jars in jars when the applications is deployed for Java Web Start? If it is possible, what am I doing wrong? If not, what's the best alternative? Thanks! Below is the JNLP file along with the stackTrace I get when I run javaws myJNLPfile java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at com.sun.javaws.Launcher.executeApplication(Launcher.java:1799) at com.sun.javaws.Launcher.executeMainClass(Launcher.java:1745) at com.sun.javaws.Launcher.doLaunchApp(Launcher.java:1507) at com.sun.javaws.Launcher.run(Launcher.java:129) at java.lang.Thread.run(Thread.java:619) Caused by: java.lang.NoClassDefFoundError: org/apache/commons/lang/SystemUtils at org.gvt.RuntimeMain.loadSwtJar(RuntimeMain.java:27) at org.gvt.RuntimeMain.main(RuntimeMain.java:13) ... 9 more Caused by: java.lang.ClassNotFoundException: org.apache.commons.lang.SystemUtils at java.net.URLClassLoader$1.run(URLClassLoader.java:202) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:190) at com.sun.jnlp.JNLPClassLoader.findClass(JNLPClassLoader.java:332) at java.lang.ClassLoader.loadClass(ClassLoader.java:307) at java.lang.ClassLoader.loadClass(ClassLoader.java:248) ... 11 more
