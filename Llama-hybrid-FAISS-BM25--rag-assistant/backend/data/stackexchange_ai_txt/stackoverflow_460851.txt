[site]: stackoverflow
[post_id]: 460851
[parent_id]: 460813
[tags]: 
Id say you'd have to start by implementing a build strategy so you can build your code in a structured way - I use NANT. For a basic build server - use one of the CI offerings out there that monitors your source control and triggers a build whenever a change is detected. eg: cruiseControl. Once you get the basic build together - add the running of your unit tests after a successfuly build. The most successful system i've had in place had 3 different builds :- - one that fired on a check in - all this did was build the code. - an on demand one that would build the application, generate the installer and then put the installer into a shared drive for the testers to pick up - a daily build that fired at 10pm. This: - ran some code generation to build DB and C# code from a UML model - build the code - created a new build verification test user on a test oracle instance - ran the application schema into the db - fired off a bunch of unit tests - cleaned up the db user (if the tests were successful) - ran coverage analysis to build a report of the unit code coverage Software we used for this was NANT, CruiseControl.NET, a custom code generation system, custom app to build an oracle schema, and NCover for the code analysis.
