[site]: stackoverflow
[post_id]: 3931015
[parent_id]: 3930884
[tags]: 
It's simple to do this using Guava. Use Ints.asList to create a List live view of an int[] Define a Function isOdd Use Ordering that compares onResultOf(isOdd) , naturally (i.e. false first, then true ) If necessary, compound that with an Ordering.natural() Here's the snippet: int[] nums = {5,12,3,21,8,7,19,102,201}; Function isOdd = new Function () { @Override public Boolean apply(Integer i) { return (i & 1) == 1; } }; Collections.sort( Ints.asList(nums), Ordering.natural().onResultOf(isOdd) .compound(Ordering.natural()) ); System.out.println(Arrays.toString(nums)); // [8, 12, 102, 3, 5, 7, 19, 21, 201] Note that all the even numbers show up first, then all the odd numbers. Within each group, the numbers are sorted naturally. External links polygenelubricants.com - Writing more elegant comparison logic with Guava's Ordering
