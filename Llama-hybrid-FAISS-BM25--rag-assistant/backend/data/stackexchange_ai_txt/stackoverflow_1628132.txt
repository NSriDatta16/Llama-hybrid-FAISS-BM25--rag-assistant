[site]: stackoverflow
[post_id]: 1628132
[parent_id]: 1628019
[tags]: 
Well, in "Introduction to Design Patterns in C++ with Qt4" they say that "it is possible to avoid the use of threads in favor of the Qt Event Loop combined with QTimers" but I've never tried it :) Actually, I've just tried - add: QTimer *Timer; in MainWindow class header and in MainWindow constructor add: Timer = new QTimer(this); then change calculate() from function to a signal and modify: void MainWindow::startCalculation() { qDebug() startButton->setDisabled(true); this->stopButton->setEnabled(true); this->calcStatus = true; connect(Timer, SIGNAL(timeout()), this, SLOT(calculate())); Timer->start(0); } void MainWindow::stopCalculation() { this->startButton->setEnabled(true); this->stopButton->setDisabled(true); this->calcStatus = false; Timer->stop(); Timer->disconnect(this,SLOT(calculate())); } This should work as long as you dont pass any arguments into calculate().
