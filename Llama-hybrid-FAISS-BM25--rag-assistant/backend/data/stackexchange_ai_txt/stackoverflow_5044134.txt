[site]: stackoverflow
[post_id]: 5044134
[parent_id]: 5035716
[tags]: 
You could leverage the JAXBInstropector and do the following: package example; import java.util.HashMap; import java.util.Map; import javax.xml.bind.JAXBContext; import javax.xml.bind.JAXBIntrospector; import javax.xml.namespace.QName; public class Demo { public static void main(String[] args) throws Exception { Class[] classes = new Class[3]; classes[0] = A.class; classes[1] = B.class; classes[2] = C.class; JAXBContext jc = JAXBContext.newInstance(classes); JAXBIntrospector ji = jc.createJAXBIntrospector(); Map classByQName = new HashMap (classes.length); for(Class clazz : classes) { QName qName = ji.getElementName(clazz.newInstance()); if(null != qName) { classByQName.put(qName, clazz); } } QName qName = new QName("http://www.example.com", "EH"); System.out.println(classByQName.get(qName)); } } The following are the model classes: A package example; import javax.xml.bind.annotation.XmlRootElement; @XmlRootElement(name="EH", namespace="http://www.example.com") public class A { } B package example; import javax.xml.bind.annotation.XmlRootElement; @XmlRootElement(name="BEE", namespace="urn:example") public class B { } C package example; public class C { } Output class example.A
