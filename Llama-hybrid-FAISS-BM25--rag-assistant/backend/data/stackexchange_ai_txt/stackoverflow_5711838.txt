[site]: stackoverflow
[post_id]: 5711838
[parent_id]: 5710493
[tags]: 
You could just read QMessageBox reference . I am copy-pasting code sample from it: QMessageBox msgBox; msgBox.setText("The document has been modified."); msgBox.setInformativeText("Do you want to save your changes?"); msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel); msgBox.setDefaultButton(QMessageBox::Save); int ret = msgBox.exec(); switch (ret) { case QMessageBox::Save: // Save was clicked break; case QMessageBox::Discard: // Don't Save was clicked break; case QMessageBox::Cancel: // Cancel was clicked break; default: // should never be reached break; } This code creates a message box with three buttons (Save, Discard, Cancel). Save button is focused. You can combine values from Standard buttons using bitwise OR operator in setStandardButtons function. If you need some options known only at runtime I can propose this possible solution. QMessageBox msgBox; //set common message box parameters. (informative text, etc) //iterate through possible options. For each possible option: { QPushButton *button = msgBox.addButton(myQStringOption, QMessageBox::AcceptRole); connect(button, SIGNAL(clicked()), /* response object */, SLOT(/*response slot*/)); } msgBox.exec(); I am not sure this is the most elegant solution but it should works. If you don't want to use signals and slots you could use clickedButton() method to determine which button was pressed. msgBox.exec(); if ((msgBox.clickedButton())->text() == myQStringOption){ //doStuff }
