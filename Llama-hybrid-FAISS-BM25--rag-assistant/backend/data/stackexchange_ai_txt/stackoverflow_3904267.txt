[site]: stackoverflow
[post_id]: 3904267
[parent_id]: 3904066
[tags]: 
AndreyT already pretty much answered the question, but here's a more verbose definition: Variable-length automatic arrays are allowed in ISO C99, and as an extension GCC accepts them in C90 mode and in C++. (However, GCC's implementation of variable-length arrays does not yet conform in detail to the ISO C99 standard.) These arrays are declared like any other automatic arrays, but with a length that is not a constant expression. The storage is allocated at the point of declaration and deallocated when the brace-level is exited. For example: FILE * concat_fopen (char *s1, char *s2, char *mode) { char str[strlen (s1) + strlen (s2) + 1]; strcpy (str, s1); strcat (str, s2); return fopen (str, mode); } You shouldn't use VLAs (in C++) OR alloca() (as the GCC documentation suggests at http://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html ) as they are both considered pretty "meh" practice. They can both lead to stack overflows and/or undefined behavior. Edit : reading the GCC documentation more closely and looking at int tester (int len, char data[len][len]) { /* ... */ } .. I seriously hope no one writes code like that. I guess it's a cool feature, but still... wtf?
