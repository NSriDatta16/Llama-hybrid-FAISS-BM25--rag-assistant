[site]: stackoverflow
[post_id]: 2693227
[parent_id]: 2693143
[tags]: 
1.1) LOC are easy to answer They are really dependent of the language you use! The same feature might have a big difference when written on JAVA or on Ruby, for example A not well written software might have more lines than a good one! 1.2) Code coverage IMHO you should use metric, although its not perfect, it should give you a nice understanding on where your code needs more tests. Just one point you should take care here is that it is also dependent of the language. There could be some situations where you have a class or method that you really don't need to test! For example a class with only getters and setters. 2) From (1) you just mentioned code metrics, but judging from your question about velocity, you are interested on metrics on all the creation process, so I would list some: Velocity: The classic one and, if used well, it can enhance quite well an agile team performance, since you will know what your team can really do on a fixed time. Burn up and burn down charts : they can give you a good notion about how the team is performing during the interaction (sprint) There are some articles on InfoQ about this. Here and here .
