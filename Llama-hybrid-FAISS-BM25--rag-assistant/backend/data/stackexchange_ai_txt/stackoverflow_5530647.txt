[site]: stackoverflow
[post_id]: 5530647
[parent_id]: 5529332
[tags]: 
The other answers already point out where the error comes from, and show the very compact and elegant "standard" definition of Fibonacci numbers in Haskell. Here is another way to define it, which might be more beginner friendly: fibs = map fst $ iterate next (0,1) where next (x,y) = (y,x+y) The idea is to keep track not only of the last, but of the last two Fibonacci numbers, which can be done using pairs. With this trick it's very easy to define the recursive relationship. We start with the argument (0,1) and generate a list from this start value using the next function over ond over again: [(0,1),(1,1),(1,2),(2,3),(3,5)...] . Then the only thing left to do is to "throw away" the second argument of the pairs, which is done by map fst $ ... . [Update] Another nice definition (working similar like the zipWith-Version) is: fibs = 0 : scanl (+) 1 fibs
