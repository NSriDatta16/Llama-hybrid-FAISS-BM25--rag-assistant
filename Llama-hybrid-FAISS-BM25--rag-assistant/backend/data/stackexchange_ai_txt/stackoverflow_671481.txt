[site]: stackoverflow
[post_id]: 671481
[parent_id]: 327382
[tags]: 
My solution, amidst plenty: base.css / reset.css : your foundation {base layout, type, color} -- 100% reusability helper.css : basic layout rules for modules as well as 'utility classes' {grid variations, forms, tables, etc} -- 90+% reusability module.css : complex layout rules for modules {semantic modules like .post or .comment} - 75% reusability layout.css : template-based rules {#hd, #bd, #ft, #homePage, etc.}- almost no reusability color.css : all color rules, combined - 50% reusability type.css : all type rules, combined - 75% reusability (text styling has less variations) this separation also allows mobile and print versions for the layout sheets, all controlled by @import via the stylesheet I link to the html. I am using this for a medium-sized site. For extra organization, I keep each sheet sectioned basically the same {wrapper, general, unique, etc}. I also tag my selectors and properties, as well as indent them in order of dependency inside the same selector group, so I know what rules I am referencing or extending. This framework allows nearly infinite expansion while keeping things organized, understandable, and reusable. I've had to refactor a 7000+ line master.css file a month ago, so this is a new system I am trying out. I've found that 100% content-semantic CSS isn't as scalable and easy to understand as a semantic/layout hybrid, since that's what CSS is used for anyway. 1.25-yr-later-edit : Another method which might be more relevant is to just use a good CSS text editor. I'm positive VS is crap for working with CSS, unless you happen upon some extensions. If you're on windows, give E Text Editor a shot, b/c it's a TextMate Windows port and has bundles designed for CSS and markup that give you much better syntax highlighting and autocompletion. What you then can do is organize, even a 8000-line stylesheet, into collapsible folds: /** Start Module 1 */ [css] /* End Module 1 **/ And use the symbol list to display for you a quick TOC on the fly with a query like Start or Module 1 It also indexes lines with /** these types of comments **/ (great for tagging areas) and all CSS selector chains. You should have no trouble working with single big files with E. Besides, unless you're progressively enhancing your CSS it's all going to get minified anyway. I would also make sure to indent your CSS to somewhat mimic the structure of DOM section it is referring to. .container {} .container .inner {} .container .head {} .container .inner.alt {} Otherwise, I agree with the '1 Base CSS and 1 Page/Section CSS` method, though it entirely depends on your business requirements.
