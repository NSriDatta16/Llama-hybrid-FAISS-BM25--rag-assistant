[site]: stackoverflow
[post_id]: 1628501
[parent_id]: 1628434
[tags]: 
If you are serious about wanting to program in a " null less" environment, consider using extension methods more often, they are immune to NullReferenceExceptions and at least "pretend" that null isn't there anymore: public static GetExtension(this string s) { return (new FileInfo(s ?? "")).Extension; } which can be called as: // this code will never throw, not even when somePath becomes null string somePath = GetDataFromElseWhereCanBeNull(); textBoxExtension.Text = somePath.GetExtension(); I know, this is only convenience and many people correctly consider it violation of OO principles (though the "founder" of OO, Bertrand Meyer, considers null evil and completely banished it from his OO design, which is applied to the Eiffel language, but that's another story). EDIT: Dan mentions that Bill Wagner ( More Effective C# ) considers it bad practice and he's right. Ever considered the IsNull extension method ;-) ? To make your code more readable, another hint may be in place: use the null-coalescing operator more often to designate a default when an object is null: // load settings WriteSettings(currentUser.Settings ?? new Settings()); // example of some readonly property public string DisplayName { get { return (currentUser ?? User.Guest).DisplayName } } None of these take the occasional check for null away (and ?? is nothing more then a hidden if-branch). I prefer as little null in my code as possible, simply because I believe it makes the code more readable. When my code gets cluttered with if-statements for null , I know there's something wrong in the design and I refactor. I suggest anybody to do the same, but I know that opinions vary wildly on the matter. (Update) Comparison with exceptions Not mentioned in the discussion so far is the similarity with exception handling. When you find yourself ubiquitously ignoring null whenever you consider it's in your way, it is basically the same as writing: try { //...code here... } catch (Exception) {} which has the effect of removing any trace of the exceptions only to find it raises unrelated exceptions much later in the code. Though I consider it good to avoid using null , as mentioned before in this thread, having null for exceptional cases is good. Just don't hide them in null-ignore-blocks, it will end up having the same effect as the catch-all-exceptions blocks.
