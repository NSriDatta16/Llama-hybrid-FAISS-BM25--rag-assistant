[site]: stackoverflow
[post_id]: 2125049
[parent_id]: 2124514
[tags]: 
If your compiler supports TR1 (or C++0x), you can use the std::aligned_storage template. To allocate space for an object with size S and alignment A , you can allocate an object of type std::aligned_storage ::storage . (The namespace may vary between compilers. I think TR1 doesn't specify which namespace the extensions must be placed in. On MSVC, the namespace std::tr1 is used) Apart from this, 32-bit integers are already 4-byte aligned by the compiler (at least on the platforms where the natural alignment of 32-bit ints is 4 bytes)
