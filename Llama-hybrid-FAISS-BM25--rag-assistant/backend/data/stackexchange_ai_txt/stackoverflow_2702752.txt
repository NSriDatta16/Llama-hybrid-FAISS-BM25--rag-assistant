[site]: stackoverflow
[post_id]: 2702752
[parent_id]: 2702413
[tags]: 
In theory people will tell you it's a bad business practice. In practice, we just needed the data from the session level available in the business layers all the time. :-( We ended up having different storage engines united under a small interface. public interface ISessionStorage { SomeSessionData Data {get;set;} ... .. and most of the data we need stored at "session" level } //and a singleton to access it public static ISessionStorage ISessionStorage; this interface is available from almost anywhere in our code. Then we have both a Session and/or a singleton implementation public WebSessionStorage { public SomeSessionData Data { get { return HttpContext.Current.Session["somekey"] as SomeSessionData;} set { HttpContext.Current.Session["somekey"] = value;} } public WebFormsSessionStorage { private static SomeSessionData _SomeSessionData; //this was before automatic get;set; public SomeSessionData { get{ return _SomeSessionData;} set{ _SomeSessionData=value; } } } On initing the application, the website will do a Framework.Storage.SessionStorage = new WebSessionStorage(); in Global.asax, and the FormsApp will do Framework.Storage.SessionStorage = new WebFormsSessionStorage();
