[site]: stackoverflow
[post_id]: 1652454
[parent_id]: 1652195
[tags]: 
Personally I find it easier to learn a language when I've got a project to complete. That's where Rails comes in, by providing a framework for web development, you can make any number of web based hobby projects easily. Just reading and blindly following tutorials does not help things sink in. Especially when I have established comfortable ways of doing things in other languages. Ruby is a breath of fresh air coming from the more formal languages in the .NET suite. If you've never worked with any dynamic languages before (Python, Perl, etc) You're in for a ride. The most important learning tool is the Interactive Ruby shell. If you ever want to play around with code just start typing into irb. Books definitely help but just throwing statements and fragments at the interpreter is going to to help you understand what's going on under the hood a lot faster than memorizing method calls and library APIs. As for books on Ruby look up _why's Poignant Guide To Ruby. It's unlike any other programming book you've ever seen, which is fitting if you come from the .NET side of things where Ruby introduces a number of very foreign concepts. If you haven't done anything with closures before, expect to get blindsided by blocks. The only hard part of learning Rails and Ruby side by side, is determining what parts of your code are Ruby, and what are Rails helper methods. Stick with it and you should be fine. As for what can be done in Ruby without Rails? Just about anything. It's a fully featured language, suited for many tasks. But I wouldn't trust it for things with Hard Realtime Requirements I'm not a .NET person. So I can't comment on the similarities of the relationship between Ruby and Rails and the relationship between c# and ASP.NET. What I can tell you about Ruby and Rails comes from a talk I saw given by Chad Fowler. It was called "Rails is boring, and Ruby is a toy." Which is the most succinctly accurate description possible. Rails does most of the heavy lifting in your web apps by taking a convention over configuration approach. Meaning if you define things in a manner that Rails expects there's minimal configuration to be done. Rails is a Framework of helpers written in Ruby to implement the MVC methodology of a web service.
