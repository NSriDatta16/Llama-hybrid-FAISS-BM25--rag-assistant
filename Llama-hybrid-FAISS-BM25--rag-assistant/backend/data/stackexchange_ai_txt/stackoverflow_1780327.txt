[site]: stackoverflow
[post_id]: 1780327
[parent_id]: 1778374
[tags]: 
I think you're hitting a rails bug I recently battled with. See This blog entry linking to the related lighthouse bug. My understanding is that what's happening is that some prior piece of rails code does a "select id from tablename" to see if an entry exists or matches. The object then caches that the only field that exists for the table is "id". Your code then runs, and the "attributes" value is then incorrect, reflecting only the id field. From what I could find, this only happened when this particular code path was hit, and didn't generally upset things, except when doing validations. What I did to get around it was wrap the after_initialise code in a begin/rescue ActiveRecord::MissingAttributeError block. Then I wrote a big note in the application and above each item indicating when a new version of rails is released, we could remove this. Yes, I'm sure there are more elegant solutions. def after_initialize begin # ... updates here # self.unique_reference = UUIDTools::UUID.random_create.to_s rescue ActiveRecord::MissingAttributeError end end Or you could also do: def after_initialize if self.has_attribute? :measured_on self.measured_on ||= Date.today end end
