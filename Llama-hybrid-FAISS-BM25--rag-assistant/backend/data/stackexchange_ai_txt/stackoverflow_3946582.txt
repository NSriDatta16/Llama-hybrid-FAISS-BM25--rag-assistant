[site]: stackoverflow
[post_id]: 3946582
[parent_id]: 3945311
[tags]: 
I like that you've asked the question, but I have to say that I've been very disappointed by the answers you've received so far (including the answer that was accepted). There seems to be a general perception that users who have JavaScript disabled are either Luddites or idiots. There has been a lot of talk of "graceful degradation", and that's missing the point altogether. The point is accessibility. Unless you are building a site that would offer nothing to a user with visual or motor impairments (like, say, an on-line graphical game), your site should just plain work and make perfect sense with CSS, images and JavaScript all disabled. Low-vision users will probably have your CSS overridden so thay can read the sceen, and they won't care about your images much unless the alt text (and longdesc, if you've bothered to include it) makes it sound compelling enough to bother looking at an enlarged version. And the blind will be using either a Braille interface or a screen reader like JAWS, neither of which is particularly compatible with background updates on random areas of the page. Now, before anybody goes off on a tear about how difficult it would be to design for the disabled, let me say that this is the easy part . Designing the basic, working application is all about paying attention to the document structure (semantic tagging and so forth), and if you've been paying attention to the document structure, the chances are pretty good that you've also paid some attention to the data structure back on the server. At this point, the app may not look like much, but it will provide all of the information it's supposed to provide and will take any input it needs to from the user. Sure, everything requires complete page loads, but it all works. Images, CSS and JavaScript can all be used to enhance that working application. The object of the game is not "graceful degradation", but "progressive enhancement". Images and CSS not only add decoration, they can reinforce the information hierarchy and clarify user actions for users who are equipped to appreciate the visual enhancements. JavaScript can override the default behaviour of UI elements (links, buttons, textareas and so on), providing immediate feedback to the user and maintaining an uninterrupted workflow. Providing AJAX-friendly APIs to the same data structures you've used for the vanilla HTML app's pages is not at all difficult. There are no excuses for failing to pay attention to accessibility. There are only ignorance and bigotry.
