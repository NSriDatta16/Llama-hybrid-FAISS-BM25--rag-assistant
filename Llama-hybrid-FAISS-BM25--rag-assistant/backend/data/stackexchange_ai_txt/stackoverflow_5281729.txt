[site]: stackoverflow
[post_id]: 5281729
[parent_id]: 5278963
[tags]: 
Well, here's my two cents with what I believe is a very fast and IMHO most easily understandable construction. First, some test arrays: m = RandomInteger[100, {2000, 10000}]; l1 = RandomInteger[100, 2000]; l2 = RandomInteger[100, 2000]; {r, c} = Dimensions[m]; I increased the test array sizes somewhat to improve accuracy of the following timing measurements. The method involves the invoking of the powers of Part ([[...]]), All and Span (;;). Basically, I set up a new working matrix with the future dimensions of the data array after addition of the two columns, then add the original matrix using All and Span and add the additional columns with All only. I then copy back the scrap matrix to our original matrix, as the other methods also return the modified data matrix. n = ConstantArray[0, {r, c} + {0, 2}]; n[[All, 1 ;; c]] = m; n[[All, c + 1]] = l1; n[[All, c + 2]] = l2; m = n; As for timing: Mean[ Table[ First[ AbsoluteTiming[ n2 = ConstantArray[0, {r, c} + {0, 2}]; n2[[All, 1 ;; c]] = m; n2[[All, c + 1]] = l1; n2[[All, c + 2]] = l2; m2 = n2; ] ], {10} ] ] 0.1056061 (an average of 10 runs) The other proposed method with Do ( Mr.Wizard and the OP): Mean[ Table[ n1 = m; First[ AbsoluteTiming[ Do[AppendTo[n1[[i]], l1[[i]]], {i, 2000}]; Do[AppendTo[n1[[i]], l2[[i]]], {i, 2000}]; ] ], {10} ] ] 0.4898280 The result is the same: In[9]:= n2 == n1 Out[9]= True So, a conceptually easy and quick (5 times faster!) method.
