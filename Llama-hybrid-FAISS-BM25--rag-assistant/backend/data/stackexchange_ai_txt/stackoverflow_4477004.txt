[site]: stackoverflow
[post_id]: 4477004
[parent_id]: 4476987
[tags]: 
There are several issues I would fix with your code. First and foremost is to separate your functionality from your markup. This means removing the onclick events that you are firing through your elements. Now, this gets more complicated because you are passing PHP vars through your markup as well. So your issue can be broken down into to sections. Removing event handlers from your markup. This is, among other things i'm sure, a poor way to organize functionality. A more robust means of communicating between JavaScript/PHP . In order to really take advantage of the web-based environment it will save you a lot of trouble passing variables in a more organized fashion. I would recommend looking into pairing Ajax with JSON . jQuery has some good implementations of both of these ( $.Ajax() | $.parseJSON() ). The primary goal here is to clean up your markup to make it more readable, and better contain the different functions of your application - Functionality, Style, and information. First, clean up your element a bit by removing the onclick event listener ;" class="showPixFeature" />' Second, attach your event listener in whichever fashion you would like. Use $.delegate if you are dynamically generating the images. Use $.bind if you are not. $('.showPixFeature').bind('click', function(){ // this function will execute everytime an element is clicked // you have access to the element ID here via 'this' because // the functions context is the element that fires it alert($(this).attr('id')); }); You can then remove the bound event with $.unbind() API. OR $.undelegate if you are using delegate. From here we can add an ajax call to $('#my-element').unbind('click');
