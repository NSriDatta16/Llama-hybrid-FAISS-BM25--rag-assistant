[site]: stackoverflow
[post_id]: 552365
[parent_id]: 482827
[tags]: 
Why are these two approaches defined as being exclusively? I can't see any viable argument for not using pre-existing data sets, especially particular data that has caused problems in the past. I can't see any viable argument for not programmatically extending that data with all the possible conditions that you can imagine causing problems and even a bit of random data for integration testing . In modern agile approaches , Unit tests are where it really matters that the same tests are run each time. This is because unit tests are aimed not at finding bugs but at preserving the functionality of the app as it is developed, allowing the developer to refactor as needed. Integration tests, on the other hand, are designed to find the bugs you did not expect. Running with some different data each time can even be good, in my opinion. You just have to make sure your test preserves the failing data if you get a failure. Remember, in formal integration testing, the application itself will be frozen except for bug fixes so your tests can be change to test for the maximum possible number and kinds of bugs. In integration, you can and should throw the kitchen sink at the app. As others have noted, of course, all this naturally depends on the kind of application that you are developing and the kind of organization you are in, etc.
