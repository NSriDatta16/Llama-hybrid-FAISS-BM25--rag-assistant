[site]: stackoverflow
[post_id]: 5046263
[parent_id]: 
[tags]: 
Which layer do I 'hydrate' object graphs?

I have a persistence layer that serves data to many clients. I also have a table structure that is normalized, which means values are spread across tables. I want to design my persistence service to ensure services that depend on it do minimal round trips: not more than one, if possible. Given this, what should I focus on for an elegant solution? 1. Do I ensure the clients can indicate the portion of the object graph they want during the fetch? (thereby reducing round-trips) [eg: fetch(parent, list ) ] 2. Do I ensure I provide common methods such for hydrating portions of the object, along with basic fetches? [eg: hydrate(parent, list ) ] 3. Do I provide basic information to start with (for example, object graph to depth 1 only / only look-up-table objects,) and the rest only upon request? I understand, there are many many discussion on the net, with very good information. I did read a few as well: * http://forum.springsource.org/archive/index.php/t-23439.html * How can I access lazy-loaded fields after the session has closed, using hibernate? (answer by Paul Adamson) * Deep Object Graphs Hibernate however, most of the answers hover about 'do what suits you best'. What do programmers usually do in this situation?
