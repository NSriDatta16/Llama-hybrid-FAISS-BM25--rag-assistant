[site]: stackoverflow
[post_id]: 3385725
[parent_id]: 3385691
[tags]: 
It means you should use statistical techniques to work out which loop is faster (and I would hope those techniques established that they were pretty much on par with each other). You have no idea what your CPU is doing over and above the load you're putting it under here. It could be starting up scheduled tasks, handling interrupts, all sorts of things that would skew your results. You may well have to do a million runs, toss out the outliers, and average the rest to get a decent sample. On top of that, a hundred iterations is not much, especially since you're doing function calls to cout which may well swamp the time spent doing the loop control. When I run checks under UNIX, I don't use elapsed time for this very reason. The system and user time give how many seconds the CPU was in use for the given process regardless of the elapsed time.
