[site]: stackoverflow
[post_id]: 1559732
[parent_id]: 1555315
[tags]: 
You should design your API so that it makes sense as a general-purpose API, not particularly to support unit testing or dynamic mocks. The pattern you suggest is simply a variation of the Template Method design pattern, except that the method is a property. If you think that, in general, it makes sense to implement your dependency access as virtual properties, then you can use the technique you describe. This is a well-known unit testing technique called extract and override . However, I would be vary of doing this for a number of other reasons. Even if you can override the dependency, the default may drag in references to the 'real', intended depdendency creating a tighter coupling than you may want. If you forget to extract and override , the default dependency is used, and you may not want that. Sometimes it's better to be explicit about the intended usage.
