[site]: datascience
[post_id]: 48391
[parent_id]: 48390
[tags]: 
Dataset just consists of Features and Labels. Here features are your images and labels are the classes. There is a fit() method for every CNN model, which will take in Features and Labels, and performs training. for the first layer, you need to mention the input dimension of image, and the output layer should be a softmax (if you're doing classification) with dimension as the number of classes you have. model = Sequential() model.add(Conv2D(32, (3, 3), padding='same', input_shape=(64, 64, 3))) model.add(Activation('relu')) model.add(Conv2D(32, (3, 3))) model.add(Activation('relu')) model.add(MaxPooling2D(pool_size=(2, 2))) model.add(Dropout(0.25)) model.add(Flatten()) model.add(Dense(512)) model.add(Activation('relu')) model.add(Dropout(0.5)) model.add(Dense(num_classes)) model.add(Activation('softmax')) model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy']) model.fit(x_train, y_train, epochs=10) The above is the code for training a Keras sequenctioal model. General Points: input_shape should be the dimension of X_train. You need to get this shape when you do X_train.shape (numpy) Convolutions are then applied with respective Activations Dropout and Pooling layers are optional. After the convolution layers, the data is flattened. using Flatten() Then it is sent to few Fully Connected layers The last but one layer should have the dimensions of number of classes Last layer will be softmax. Now, compile the model with the loss, optimizer and metric Then fit() Vote up ;) if you like it.
