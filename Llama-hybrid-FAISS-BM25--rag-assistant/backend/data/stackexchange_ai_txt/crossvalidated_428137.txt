[site]: crossvalidated
[post_id]: 428137
[parent_id]: 428118
[tags]: 
The geometric mean is used in specific applications. For example to determine the average annual return of a financial investment. I might say it's used in this case because it returns the correct --- or maybe "most useful" --- answer. It's also used in cases where data are log-normally distributed, so that large, but unusual, values don't have undue influence on the average. For example, for fecal indicator bacteria in natural waters, in the U.S., a geometric mean threshold for action is often used in regulations. I don't understand what the following means, and I suspect it demonstrates some kind of misunderstanding. I use the geometric mean to create standardized ranking between several disparate variables, so I can compare different variables combination: the higher the GM, the higher all the variables will be. To look at the uses of geometric mean, I'll copy an example from SAEPER . (Caveat, I am the author of this page.) For the average annual return, if we use the geometric mean, we get the "most useful" answer. That is, it tells us the "average" return that actually gives us the correct amount of the return after so many years. So here, imagine we start with $100 and the annual returns are: -0.80, 0.20, 0.30, 0.30, 0.20, 0.30. The geometric mean (after adding 1 to each return, and then subtracting the 1 at the end) is -0.0734, and in the end we end up with $63, which we could get from the average annual rate: 100 * (1 -0.0734) ^ 6 . You could confirm this with: 100 * (1-0.80) * 1.20 * 1.30 * 1.30 * 1.20 * 1.30 . Note that if you used the arithmetic mean, you get a positive average return, even though the investment actually lost money! What I also find fascinating is that if that -0.80 return was in the last year, rather than the first, the result is the same. In R, or running the code on rdrr.io : if(!require(psych)){install.packages("psych")} Return = c(-0.80, 0.20, 0.30, 0.30, 0.20, 0.30) library(psych) geometric.mean(Return + 1)-1 ### [1] -0.07344666 100 * (1 -0.07344666) ^ 6 ### [1] 63.2736 100 * (1-0.80) * 1.20 * 1.30 * 1.30 * 1.20 * 1.30 ### [1] 63.2736
