[site]: datascience
[post_id]: 11623
[parent_id]: 11622
[tags]: 
Here is a "little" piece of python code, which is actually making an "object" of "Network", which was later used as a multi-layered neural network (sizes is actually a list of number of neurons for each layer). The code is: class Network(object): def __init__(self, sizes): self.num_layers = len(sizes) self.sizes = sizes self.biases = [np.random.randn(y, 1) for y in sizes[1:]] self.weights = [np.random.randn(y, x) for x, y in zip(sizes[:-1], sizes[1:])] In out Network object, there are some "member variables", and if you have a slight idea about neural nets, then the names of these members clearly tell the purpose of these member variables. Hope it was clear enough. P.S: __init__() is actually a function, which acts as a "constructor", i-e, it automatically gets executed whenever the object is created anywhere.
