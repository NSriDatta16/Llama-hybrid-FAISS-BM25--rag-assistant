[site]: stackoverflow
[post_id]: 1306827
[parent_id]: 
[tags]: 
Which is better/more efficient: check for bad values or catch Exceptions in Java

Which is more efficient in Java: to check for bad values to prevent exceptions or let the exceptions happen and catch them? Here are two blocks of sample code to illustrate this difference: void doSomething(type value1) { ResultType result = genericError; if (value1 == badvalue || value1 == badvalue2 || ...) { result = specificError; } else { DoSomeActionThatFailsIfValue1IsBad(value1); // ... result = success; } callback(result); } versus void doSomething(type value1) { ResultType result = genericError; try { DoSomeActionThatFailsIfValue1IsBad(value1); // ... result = success; } catch (ExceptionType e) { result = specificError; } finally { callback(result); } } On the one hand, you're always doing a comparison. On the other hand, I honestly don't know what the internals of the system do to generate an exception, throw it, and then trigger the catch clause. It has the sound of being less efficient, but if it doesn't add overhead in the non-error case, then it's more efficient, on average. Which is it? Does it add similar checking anyway? Is that checking there in the implicit code added for exception handling, even with the additional layer of explicit checking? Perhaps it always depends on the type of exception? What am I not considering? Let's also assume that all "bad values" are known -- that's an obvious issue. If you don't know all the bad values -- or the list is too long and not regular -- then exception handling may be the only way, anyway. So, what are the pros and cons of each, and why? Side questions to consider: How does your answer change if the value is "bad" (would throw an exception) most of the time? How much of this would depend on the specifics of the VM in use? If this same question was asked for language-X, would the answer be different? (Which, more generally, is asking if it can be assumed checking values is always more efficient than relying on exception handling simply because it adds more overhead by current compilers/interpreters.) (New) The act of throwing an exception is slow. Does entering a try block have overhead, even if an exception is not thrown? Similarities on SO: This is similar to the code sample in this answer , but states they are similar only in concept, not compiled reality. The premise is similar to this question but, in my case, the requester of the task (e.g. "Something") isn't the caller of the method (e.g. "doSomething") (thus no returns). And this one is very similar, but I didn't find an answer to my question. And similar to far too many other questions to list, except: I'm not asking about theoretical best practice. I'm asking more about runtime performance and efficiency (which should mean, for specific cases, there are non-opinion answers), especially on resource limited platforms. For instance, if the only bad value was simply a null object, would it be better/more efficient to check for that or just attempt to use it and catch the exception?
