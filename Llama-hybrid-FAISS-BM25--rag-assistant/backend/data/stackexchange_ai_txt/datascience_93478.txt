[site]: datascience
[post_id]: 93478
[parent_id]: 
[tags]: 
Grad-cam problem

I have the method given below and the model shown in the picture. What layers do I need to use for the grad-cam process? def make_gradcam_heatmap( img_array, model, last_conv_layer_name, classifier_layer_names): last_conv_layer = model.get_layer(last_conv_layer_name) last_conv_layer_model = keras.Model(model.inputs, last_conv_layer.output) last_conv_layer_model.summary() classifier_input = keras.Input(shape=last_conv_layer.output.shape[1:]) x = classifier_input for layer_name in classifier_layer_names: x = model.get_layer(layer_name)(x) classifier_model = keras.Model(classifier_input, x) with tf.GradientTape() as tape: # Compute activations of the last conv layer and make the tape watch it last_conv_layer_output = last_conv_layer_model(img_array) tape.watch(last_conv_layer_output) # Compute class predictions preds = classifier_model(last_conv_layer_output) top_pred_index = tf.argmax(preds[0]) top_class_channel = preds[:, top_pred_index] grads = tape.gradient(top_class_channel, last_conv_layer_output) pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2)) last_conv_layer_output = last_conv_layer_output.numpy()[0] pooled_grads = pooled_grads.numpy() for i in range(pooled_grads.shape[-1]): last_conv_layer_output[:, :, i] *= pooled_grads[i] heatmap = np.mean(last_conv_layer_output, axis=-1) heatmap = np.maximum(heatmap, 0) / np.max(heatmap) return heatmap last_conv_layer_name = 'global_average_pooling2d_1' classifier_layer_names = ['dense_8' ,'dense_9' ] image= get_input(r'k019005062.jpg' ) heatmap = make_gradcam_heatmap(image, model, last_conv_layer_name, classifier_layer_names)
