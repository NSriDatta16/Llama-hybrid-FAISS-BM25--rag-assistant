[site]: datascience
[post_id]: 112939
[parent_id]: 112913
[tags]: 
keras LSTM time series uses vectors of data looking back or forward. you create the dataset with overlapping vectors. def create_dataset(dataset, look_back=3): dataX, dataY = [], [] for i in range(len(dataset)-look_back-1): a = dataset[i:(i+look_back)] dataX.append(a) dataY.append(dataset[i + look_back]) return np.array(dataX), np.array(dataY) COLUMNS=['open'] dataset=df[COLUMNS] #dataset=np.array(dataset).reshape(-1,1) scaler = MinMaxScaler(feature_range=(0, 1)) dataset = scaler.fit_transform(np.array(dataset).reshape(-1,1)) #dataset=np.array(pd.DataFrame({"C1":[1,2,3,4,5,6],"C2":[-1,-2,-3,-4,-5,-6],"Y":[7,8,9,10,11,12]})).reshape(-1,1) train_size = int(len(dataset) * 0.60) test_size = len(dataset) - train_size train, test = dataset[0:train_size], dataset[train_size:len(dataset)] #print(len(train), len(test)) look_back=3 trainX=[] testX=[] y_train=[] trainX, y_train = create_dataset(train, look_back) testX, y_test = create_dataset(test, look_back) #print(y_train) X_train = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1])) X_test = np.reshape(testX, (testX.shape[0], 1, testX.shape[1])) n_future = 1 features=2 timeSteps=4 model = Sequential() model.add(Bidirectional(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))) model.add(LSTM(units= 50, return_sequences=True)) model.add(Dropout(0.2)) model.add(LSTM(units= 50, return_sequences=True)) model.add(Dropout(0.2)) model.add(LSTM(units= 50)) model.add(Dropout(0.2)) model.add(Dense(units = n_future)) model.compile(optimizer="adam", loss="mean_squared_error", metrics=["acc"]) plot_model(model, to_file='model.png') img=plt.imread('model.png') plt.imshow(img) plt.show()
