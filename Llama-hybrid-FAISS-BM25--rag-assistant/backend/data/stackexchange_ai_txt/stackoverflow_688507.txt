[site]: stackoverflow
[post_id]: 688507
[parent_id]: 688471
[tags]: 
If you are truly doing C++, there is no practical difference between a class and a struct except the default member visibility - classes have private visibility by default while structs have public visibility by default. The following are equivalent: struct PacketStruct { unsigned int bitlength; unsigned int data[]; }; class PacketClass { public: unsigned int bitlength; unsigned int data[]; }; The point is, you don't need the CreatePacket(). You can simply initialize the struct object with a constructor. struct Packet { unsigned long bytelength; unsigned char data[]; Packet(unsigned long length = 256) // default constructor replaces CreatePacket() : bytelength(length), data(new unsigned char[length]) { } ~Packet() // destructor to avoid memory leak { delete [] data; } }; A few things to note. In C++, use new instead of malloc. I've taken some liberty and changed bitlength to bytelength. If this class represents a network packet, you'll be much better off dealing with bytes instead of bits (in my opinion). The data array is an array of unsigned char, not unsigned int. Again, this is based on my assumption that this class represents a network packet. The constructor allows you to create a Packet like this: Packet p; // default packet with 256-byte data array Packet p(1024); // packet with 1024-byte data array The destructor is called automatically when the Packet instance goes out of scope and prevents a memory leak.
