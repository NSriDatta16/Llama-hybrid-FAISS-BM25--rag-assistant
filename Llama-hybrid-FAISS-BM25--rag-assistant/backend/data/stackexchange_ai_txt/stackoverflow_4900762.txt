[site]: stackoverflow
[post_id]: 4900762
[parent_id]: 
[tags]: 
Big performance loss when using IN(subquery). Why?

I am using SQL Server 2005 and I have noticed something strange when I want to filter some results when using a subquery within an IN clause. For instance, this is my current query and it runs in 70 seconds on average: select Phone, ZipCode, sum(Calls) as Calls, sum(Sales) as Sales from Archive where CustomerID = 20 and ReportDate = '2/3/2011' and Phone in ( select Phone from PlanDetails where Phone is not null and Length is not null and PlannedImp > 0 and CustomerID = 20 and (StatusID <> 2 and StatusID <> 7) and SubcategoryID = 88 ) group by Phone, ZipCode However, if I break them down into 2 separate queries, they take under 1 second each to run. select Phone from PlanDetails where Phone is not null and Length is not null and PlannedImp > 0 and CustomerID = 20 and (StatusID <> 2 and StatusID <> 7) and SubcategoryID = 88 and select Phone, ZipCode, sum(Calls) as Calls, sum(Sales) as Sales from Archive where CustomerID = 20 and ReportDate = '2/3/2011' group by Phone, ZipCode Finally, if I do this it returns the same results as the first query, but in about 2-3 seconds: select Phone into #tempTable from PlanDetails where Phone is not null and Length is not null and PlannedImp > 0 and CustomerID = 20 and (StatusID <> 2 and StatusID <> 7) and SubcategoryID = 88 select Phone, ZipCode, sum(Calls) as Calls, sum(Sales) as Sales from Archive where CustomerID = 20 and ReportDate = '2/3/2011' and Phone in ( select Phone from #tempTable ) group by Phone, ZipCode For the past few weeks I have been noticing that not just this query is slow, but any query using a (somewhat complicated) subquery inside of an IN clause just ruins the performance. What is the reason for that? The only indexes that are available for either of these queries to use is a nonclustered index on CustomerID for both tables. I looked at the execution plans of both the slow query and the fast ones, and saw that the nonclustered index seek on the Archive table is what takes the highest percentage of cost by far (80-90%). However, the only difference is that that step in the slow query has a CPU cost of 7.1 while the fast ones have a CPU cost of 1.7.
