[site]: stackoverflow
[post_id]: 4053820
[parent_id]: 4027115
[tags]: 
Is like to have all files in the same directory or keep files separated in different folders. Keeping the application organized in separate controller help in many cases: 1) memory performances Different from Java Servlet where the controller is shared betwen many request, in asp net mvc the controller is created for each request. Each time the user make a request, the application need to create the controller. Think at performances comparison betwen create in memory an instance of a fatcontroller of 100k VS one instance of a light controller of 1k. 2) OO benefit Controllers are classes. Each time you create a new controller you extend the base controller. In a complex application you can create yours own controrres (can be more than one) and extend the more appropriated. For example you can create a controller for "products" and extend from it to create a controller for "vegetables products" and so on.. 3) Security. Suppose that in your application you have a page that execute the CRUD actions on a given item of your db: - display - edit - update - delete You want to make this page reserved for registered user only. If you put all this method in one separate controller you can put the annotation [Authorize] on the controller and by default all the methods inside the controller will be protected. If you put all the application in one fat controller you have to be careful to place the [Authorize] on each method (what happe if you forgive to put the annotation on the delete method?) [Authorize] public class ProductController public ActionResult Index(String id) { ... } public ActionResult Update(String id) { ... } public ActionResult Delete(String id) { ... } 4) Security again. Suppose you write a classic CRUD (Create Read Update Delete). Now you want to delete the whole CRUD. If you keep code separate in different controller you simply delete the controller that belog the CRUD. If you keep all together in a fatcontroller you have to search for the methods that belog to the CRUD in the whole code. Again: what hapen if you forget to delete the Delete method? 5) practicality If you put all together you will have methods like this: product_edit product_delete product_rate product_create category_edit category_delete category_create If you organize code in separate controller you will have product edit delte create rate category edit delete create This is good for many reason: want to modify product in item? simply refactor and rename the productController in itemController.
