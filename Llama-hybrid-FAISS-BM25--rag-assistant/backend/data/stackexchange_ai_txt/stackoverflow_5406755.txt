[site]: stackoverflow
[post_id]: 5406755
[parent_id]: 5406525
[tags]: 
As part of C++ no. There are tricks, of course. One such trick is to declare the function as locally as possible near the current point of use. Simply declaring it at the top of the source file use it, right below the includes Declaring it (and defining it) as static at the top of the source file that use it, better for visibility but implies duplication It security by obscurity, not reknown for being that great, but I would deem it acceptable in this case (with a fat comment on top of the function). Other solutions include #pragma warning in the header (not nice) or the deprecated attribute, but this will cause warnings for the current uses, this can be problematic (pollutes build output). And if people are not bothered with warnings for the current use, they won't bother for new warnings either, not a good habit to get into! Now, there are other solutions. You could simply write a hook that scan the sources files and count the number of occurrences. grep -r "deprecated_func" include src | wc -l This hook can be integrated either as part of the build process or as a pre-commit hook in your version system. Be sure to lower the number of allowed occurrences as soon as you get rid of one function. Note: you can also use the deprecated attribute with a filter on the compiler output. But this does not count for -Werror .
