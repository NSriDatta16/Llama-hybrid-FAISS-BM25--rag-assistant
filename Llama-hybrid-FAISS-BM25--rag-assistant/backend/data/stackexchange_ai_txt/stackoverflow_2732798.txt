[site]: stackoverflow
[post_id]: 2732798
[parent_id]: 2732555
[tags]: 
Some people don't like it but I am an advocate of organzing my structs and associated functions together as if they are a class where the this pointer is passed explicitly. For instance, combined with a consistent naming convention to make the namespace explicit. A header would be something like: typedef struct foo { int x; double y; } FOO_T FOO_T * foo_new(); int foo_set_x(FOO_T * self, int arg1); int foo_do_bar(FOO_T * self, int arg1); FOO_T * foo_delete(FOO_T * self); In the implementation, all the "private" functions would be static. The downside of this is that you can't actually enforce that the user not go and muck with the members of the struct. That's just life in c. I find this style though makes for nicely reusable C types.
