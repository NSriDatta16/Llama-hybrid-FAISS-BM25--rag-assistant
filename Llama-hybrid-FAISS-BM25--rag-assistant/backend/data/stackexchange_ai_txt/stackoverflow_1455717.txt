[site]: stackoverflow
[post_id]: 1455717
[parent_id]: 
[tags]: 
hibernate ignores fetch="join" on a collection when navigating the object tree with iterator

i have a forum with 1..n members each having 1..n articles, so this is my mapping: now i have two tests: this one fails with LazyInitializationException: public void testFetchJoinByIteratorNavigation ( ) { Forum forum = (Forum) repository.findById(Forum.class, forumId); Member member = forum.getMembers().iterator().next(); assertEquals(member.getName(), "firstMember"); endTransaction(); assertEquals(1, member.getArticles().size()); } this one succeeds : public void testFetchJoinByGraphNavigation ( ) { Member member = (Member) repository.findById(Member.class, memberId); assertEquals(member.getName(), "firstMember"); endTransaction(); assertEquals(1, member.getArticles().size()); } The only difference is the way i load the member. The hibernate reference says: "The fetch strategy defined in the mapping document affects: retrieval via get() or load() retrieval that happens implicitly when an association is navigated Criteria queries HQL queries if subselect fetching is used" The succeeding test is case 1. (retrieval via get() or load()) The failing test is case 2 IMHO Why does "forum.getMembers().iterator().next()" not load all articles of the member? EDIT 1: this is my repository: package hibernate.fetch; import org.springframework.orm.hibernate3.support.HibernateDaoSupport; public class Repository extends HibernateDaoSupport { public Object findById ( Class clazz, Long objectId ) { return getHibernateTemplate().load(clazz, objectId); } public void save ( Object object ) { getHibernateTemplate().saveOrUpdate(object); } } this is my pom.xml: 4.0.0 hibernate-fetch hibernate-fetch 1.0-SNAPSHOT maven-compiler-plugin 1.5 1.5 org.apache.maven.plugins maven-eclipse-plugin true 1.5 org.springframework spring 2.5.6 org.springframework spring-orm 2.5.6 org.hibernate hibernate-core 3.3.1.GA log4j log4j 1.2.14 org.slf4j slf4j-log4j12 1.5.2 javassist javassist 3.8.0.GA postgresql postgresql 8.2-504.jdbc3 log4j log4j 1.2.13 junit junit 3.8.1 org.springframework spring-test 2.5.6 test jmock jmock 1.1.0 test Edit 2: this is my test case: package hibernate.fetch; import org.springframework.test.AbstractTransactionalSpringContextTests; public class ForumTest extends AbstractTransactionalSpringContextTests { private Repository repository; private Long memberId; private Long forumId; private String name = "test"; @Override protected String[] getConfigLocations ( ) { return new String[] { "applicationContext.xml" }; } @Override protected void onSetUpBeforeTransaction ( ) throws Exception { System.out.println(">> preparing Test"); Forum forum = new Forum(); forum.setName(name); repository.save(forum); forumId = forum.getId(); Member member = new Member(); member.setName(name); forum.addMember(member); repository.save(member); memberId = member.getId(); Article article = new Article(); article.setTitle(name); member.addArticle(article); repository.save(article); super.onSetUpBeforeTransaction(); System.out.println(">> Test prepared"); } public void testFetchJoinByGraphNavigation ( ) { System.out.println(">> testFetchJoinByGraphNavigation"); Member member = (Member) repository.findById(Member.class, memberId); assertEquals(member.getName(), name); endTransaction(); assertEquals(1, member.getArticles().size()); } public void testFetchJoinByIteratorNavigation ( ) { System.out.println(">> testFetchJoinByIterationNavigation"); Forum forum = (Forum) repository.findById(Forum.class, forumId); Member member = forum.getMembers().iterator().next(); assertEquals(member.getName(), name); endTransaction(); // throws LazyInitializationException because articles were NOT loaded assertEquals(1, member.getArticles().size()); } public Repository getRepository ( ) { return repository; } public void setRepository ( Repository repository ) { this.repository = repository; } } I really do not understand it!
