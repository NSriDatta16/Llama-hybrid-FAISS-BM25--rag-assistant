[site]: stackoverflow
[post_id]: 4408192
[parent_id]: 4400192
[tags]: 
I've taken both answers into account and built the following: public static class IsolatedStorageExtensions { public static void SaveObject(this IsolatedStorage isoStorage, object obj, string fileName) { IsolatedStorageFileStream writeStream = new IsolatedStorageFileStream(fileName, FileMode.Create); BinaryFormatter formatter = new BinaryFormatter(); formatter.Serialize(writeStream, obj); writeStream.Flush(); writeStream.Close(); } public static T LoadObject (this IsolatedStorage isoStorage, string fileName) { IsolatedStorageFileStream readStream = new IsolatedStorageFileStream(fileName, FileMode.Open); BinaryFormatter formatter = new BinaryFormatter(); T readData = (T)formatter.Deserialize(readStream); readStream.Flush(); readStream.Close(); return readData; } } A wrapper POCO object that contains that data to be serialized: [Serializable] internal class DataStoreContainer { public DataStoreContainer() { UserIDs = new List (); } public List UserIDs { get; set; } } To consume these extensions: private IsolatedStorageFile _isoStore = IsolatedStorageFile.GetStore(IsolatedStorageScope.User | IsolatedStorageScope.Assembly, null, null); private DataStoreContainer _data = new DataStoreContainer(); private const string FILENAME = "MyAppName.dat"; And in any method where you want to get the data : _data = _isoStore.LoadObject (FILENAME); To save the data: _isoStore.SaveObject(_data, FILENAME);
