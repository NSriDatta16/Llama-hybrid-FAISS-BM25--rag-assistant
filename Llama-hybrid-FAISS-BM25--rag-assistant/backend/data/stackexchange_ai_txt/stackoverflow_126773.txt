[site]: stackoverflow
[post_id]: 126773
[parent_id]: 126653
[tags]: 
My favourite misconception: that it's a “functional language” that discourages iteration or OOP or whatever programming style you can name. Nothing could be farther from the truth. First of all, “Lisp”, depending on the meaning intended by the speaker, isn't really a language at all but a language family. There are a couple of more or less well-known and widespread members of this family: Scheme , Common Lisp , Emacs-Lisp , and AutoLisp are the traditional ones; nowadays, there are also Nu , newLISP (which is actually more like an “oldLISP” than a modern one, but anyway), Arc , and Clojure . It's certainly true that Schemers seem to favour a functional style and discourage iteration in favour of recursion. However, as far as I can tell, Schemers are actually a minority in the Lisp world, at least when considering practical usage of Lisp as a programming tool as opposed to a research or study subject. I do not know much about AutoLisp or all the other Lisp dialects beside Scheme and Common Lisp, but what I do know is that Common Lisp is definitely not a single-paradigm language that eschews imperative or even object-oriented programming. In fact, Common Lisp features the most powerful class-based object system that I know of, incorporating stuff like aspect-oriented programming out of the box. Lisp seems to me to actually be the language family that most encourages experiments in new directions and most easily incorporates programming paradigms that aren't supported from the get-go. This includes imperative programming. Common Lisp has even got GOTO!
