[site]: stackoverflow
[post_id]: 1296846
[parent_id]: 1286997
[tags]: 
Short answer: Wait until EF 4.0 Long answer: I'm wrapping up a medium-sized EF 1.0 project now (also ASP.NET MVC). I also have experience with NHibernate. Aside from the common CRUD mappings, we did quite a bit of inheritance modeling. Overall my feelings about it are mixed. A few observations: The best thing I can say about EF 1.0 is that it has great LINQ integration. It is better than Linq to NHibernate (in its current release). EF can handle the interesting inheritance mappings well, but you turn up A LOT of mapping errors trying to get it right. The documentation isn't super helpful here and there isn't yet a lot of community support. You just have to figure it out. The designer is buggy and doesn't support everything the EF can do. You often find yourself editing the XML mapping files by hand. The designer creates errors in otherwise correct mapping xml. In fact, we've had so many issues with the designer that we'll go into the XML first, rather than let the designer update the mappings. I'd say this is a problem I have with Microsoft products in general: they build products with geared toward tooling rather than libraries. In this case, they rushed the tooling because the XML is equally bad. The XML is, er, verbose. EF 1.0 requires a lot of mapping information. Contrast NHibernate's XML, which only deals with the mapping itself and doesn't require a conceptual definition or storage definition file, or, better yet, a tool like Fluent NHibernate, which lets you specify your mappings in code. I, personally, prefer to write classes that can themselves be persisted (POCO) rather than deal with a separate data entity model. Craig's point about public virtual notwithstanding, I prefer NHibernate's proxy approach. I have to disagree with Craig on the intent of the EF. I don't think they intend that you create a mapping layer between the EF and your business objects. As partial classes, the intent seems to be that you add behavior to your entities in order to create a full OO class. With that in mind, you can't unit test EF 1.0 without jumping through a lot of hoops. Perhaps the biggest irritation with EF is the lack of transparent lazy loading. That truly sucks. I will wait until EF 4.0 comes out before I willingly use it again.
