[site]: stackoverflow
[post_id]: 3340464
[parent_id]: 
[tags]: 
using MVVM light messenger with Silverlight 4 ChildWindow dialog class

Greetings! Am enjoying using MVVM light -great framework - has made my life much easier, and has removed a number of barriers that were proving difficult to overcome.... Question: I am attempting to setup a custom dialog box for editing messages users send to each other. I am attempting to construct a silverlight custom dialog box using the ChildWindow object using the MVVM framework. Was wondering if there were any suggestions as to how this might be accomplished Following the dialog MVVM sample code I found here: http://mvvmlight.codeplex.com/Thread/View.aspx?ThreadId=209338 I got stuck because the ChildWindow dialog object in Silverlight is async, and has a different Result class. So - the Basic idea I have now is using the view model of the class (in this case the Matrix.MessageViewModel) to create an instance of the custom dialog box, send it through the Messenger.Send<>, process the registered message in the view to display the dialog, then have the ChildWindow dialog box's Save button handler fire a Messenger.Send with the modified contents that is then stored using the Save method on the viewmodel... Seems a bit round-about - so wanted to make sure there wasn't a cleaner way.... Relevant code bits: view model: messageDialogBox = new MessageEditorDialog( selectedMessage, this.SelectedSiteId, this.LoggedOnEmployee.Id, this.Projects); DialogMessage editMessage = new DialogMessage( this, messageDialogBox,"Edit Message", DialogMessageCallback); Messenger.Default.Send(editMessage); View: public ViewHost() { InitializeComponent(); Loaded += new RoutedEventHandler(ViewHost_Loaded); if (!ViewModelBase.IsInDesignModeStatic) { // Use MEF To load the View Model CompositionInitializer.SatisfyImports(this); } ApplicationMessages.IsBusyMessage.Register(this, OnIsBusyChange); Messenger.Default.Register (this, msg => ShowDialog(msg)); } private void ShowDialog(DialogMessage msg) { MessageEditorDialog myDialog = (MessageEditorDialog) msg.Target; myDialog.Show(); } Dialog Save: private void ButtonSave_Click(object sender, RoutedEventArgs e) { Messenger.Default.Send ( this.MessageItem, CommandMessages.MessageTypes.MessageSave); } This ties back into the ViewModel, that has a Messenger.Default.Register<> watching for the CommandTypes.MessageSave which routes the resulting MessageItem to the model for storage.....
