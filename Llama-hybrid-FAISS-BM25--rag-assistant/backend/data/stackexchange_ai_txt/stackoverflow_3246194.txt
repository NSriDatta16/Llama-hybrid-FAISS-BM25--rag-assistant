[site]: stackoverflow
[post_id]: 3246194
[parent_id]: 3246106
[tags]: 
TDD means letting your test drive your development process. It might seem inefficient at first, but I'll get to that in a second. Basically the process is the same as what the person above described: Write a test - test the bit of functionality you want (but doesn't exist yet) Write the littlest bit of code - fill in enough to make the test you just wrote pass Repeat - go back to step 1 until you have all the functionality you want Often times this means writing a test that refers to an object, then writing the definition for that object. Then writing a test that uses a method on that object, and then writing the method itself. You work in very short intervals, going back and forth from testing to coding (short = seconds upward to about a minute on either side). The philosophy of TDD is that you want 100% (ideally) test coverage. Logically, if you want to write tests, you have the option to write them before or after you actually code the functionality. The advantages of doing it before you code are: You actually test your tests, since they should fail (when you write them) then pass (when you write your code) You guarantee that you have a LOT of test coverage at all times When you go to refactor you know you have lots of test coverage to ensure you don't do something stupid (this is the biggest advantage I see, since lots of times you're working on old code that you've forgotten all the subtleties to) Some people say that it helps them clearly define what they're about to do, so they can actually fill in the code faster. Even if it takes longer, it does seem advantageous to build in the test coverage when you go back to that code and refactor/change/optimize it later. And, whether you decide to test before or after coding, I think we all can agree that testing to some extent (please no unit testing religious debates here) is important.
