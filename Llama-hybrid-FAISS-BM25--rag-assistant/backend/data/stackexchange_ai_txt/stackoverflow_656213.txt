[site]: stackoverflow
[post_id]: 656213
[parent_id]: 656055
[tags]: 
When I was in school (BS CS Michigan Tech 2008), MIPS assembly (running on SPIM) was taught in the required "Intro to Computer Architecture" class that also covered different types of architectures, cache, DMA, and so forth. We also learned the very basics of how logic gates and dynamic/static memory are constructed out of lower-level components such as diodes, capacitors, and transistors (we didn't get very deep into that; this was a CS class). We used logic simulation software (basically AND/OR/etc. gates that you could drag and drop onto a grid and wire together) to construct an adder, an ALU, and eventually a very simple 16 bit RISC processor given a machine code spec, assembler, sample programs, and sample output. If it's that kind of class, I'd say it would be very valuable. I found the knowledge from that class incredibly useful for understanding stuff in my OS class (virtual memory/paging/cache, interrupts...), and later for understanding how the JVM is dealing with bytecode. Understanding how the assembly maps to machine code maps to multiplexers and ALUs and registers made a lot of stuff that I pretty much thought was magic before trivial and easy to understand. Otherwise, this is just to add another instruction set to your tool belt, and MIPS might not be the one to go with. It is very easy/straightforward/regular compared to x86, so you shouldn't have much trouble with the class. Valuable, though? You could probably pick it up pretty easily without taking a class if you are fairly comfortable with assembly in general and for some reason have a need for it.
