[site]: stackoverflow
[post_id]: 4270047
[parent_id]: 4269810
[tags]: 
The short answer is no, there is no elegant or convenient way to enforce an order of constructing a class that properly impelemnts the "Fluent Interface" as you've linked. The longer answer starts with playing devil's advocate. If I had dependent properties (i.e. properties that required other properties to be set first), then I could implement them something like this: method SetLength(int millimeters) if color is null throw new ValidationException length = millimeters return this end (NOTE: the above does not map to any real language, it is just psuedocode) So now I have exceptions to worry about. If I don't obey the rules, the fluent object will throw an exception. Now let's say I have a declaration like yours: var config = new Fluent().SetLength(2).SetHeight(1).SetDepth(3).SetColor("blue"); When I catch the ValidationException because length depends on the color being set first, how am I as the user supposed to know what the correct order is? Even if I had each SetX method on a different line, the stacktrace will just give me the line where the config variable was declared in most languages. Furthermore, how am I supposed to keep the rules of this object straight in my head compared to other objects? It is a cocophony of conflicting ideals. Such precedence checks violate the spirit of the "Fluent Interface" approach. That approach was designed for conveniently configure complex objects. You take the convenience out when you attempt to enforce order. To properly and elegantly implement the fluent interface there are a couple of guidelines that are best observed to make consumers of your class thank you: Provide meaningful default values: minimizes need to change values, and minimizes chances of creating an invalid object. Do not perform configuration validation until explicitly asked to do so. That event can be when we use the configuration to create a new fully configured object, or when the consumer explicitly calls a Validate() method. In any exceptions thrown, make sure the error message is clear and points out any inconsistencies.
