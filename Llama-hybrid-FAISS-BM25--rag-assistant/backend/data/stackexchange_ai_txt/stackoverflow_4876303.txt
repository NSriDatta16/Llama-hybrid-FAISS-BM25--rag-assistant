[site]: stackoverflow
[post_id]: 4876303
[parent_id]: 3398750
[tags]: 
You are trying to determine the hierarchical relationship of non-adjacent nodes. As you've found, this is a relatively expensive run time calculation, view or regular query. Instead, if frequently run, I'd suggest creating what's known as a bridge table - either as a real table updated via trigger or as a indexed view in SQL Server 2005+ (albeit haven't tried the indexed view approach). That noted, nested set provides superior read times compared to adjacency list anyway. The trade off is a table with significantly more rows than the source because it effectively represents relationships between all nodes that slows down writes as it updates any time nodes are added, deleted, or parent ids change. In return you can index it and achieve fast retrieval times. An optimization, if updating the bridge proves a bottleneck is accessing this through a stored procedure where the bridge serves as a cache for frequently run combinations of inputs, but calculates infrequent cases at run-time. You'll need to evaluate read vs. write frequency of the underlying node table to make that determination. An overview of options for representing hierarchical data in a RDBMS is available here .
