[site]: stackoverflow
[post_id]: 1796828
[parent_id]: 1792551
[tags]: 
Excellent Question! The core issue you're running into a misunderstanding as to what PropertyEditors in Blend/Cider end up databinding to. Consider this object graph: - MyControl -- MyControl.MyProperty --- FooClass ---- FooClass.BarProperty Let's look at a scenario where we have a PropertyEditor (of any type: Inline, Dialog or Extended) to property MyControl.MyProperty. When inside MyPropertyPropertyEditor you'd expect to get a fully settable copy of FooClass and be able to manipulate it's members. That's a good assumption, but the wrong one. The core issue is that Blend/Cider have elaborate data structures that represent your model at design time. There's about 3-5 levels of abstraction in how Blend/Cider interact with an actual control. Creating those levels of abstraction allows Expression Blend / Visual Studio designers to be leveraged between framewroks (Silverlight / WPF) and support advanced scenarios (like Property transactions and property chaining). So, the value you actually get to DataBind to is just one of those levels of abstraction. Don't believe me? In your custom PropertyEditor, register for this.DataContextChanged event and checkout the type in this.DataContext. You'll end up getting the PropertyValue class (or one of it's friends). Every single property change you want persisted to XAML (and shown on the design surface) should go through those abstraction layers. the question you have to ask yourself is "Where do I get one of these absteaction classes for my PropertyValue.Value property instance?". Well, what I'd do if I were you is create a ModelItem around MyControl.MyProperty and set that as your PropertyEditor.DataContext. We've shipped an example of using ModelFactory.CreateItem in the Silverlight Toolkit as part of the Chart DefaultInitializer: Source Code , Ning Zhang (Awesome Design Time Dev) explains about ModelItem If you've got follow-up questions I'd consider pinging PeteBl or UnniR through the Silverlight Insiders mailing list. Sincerely, -- Justin
