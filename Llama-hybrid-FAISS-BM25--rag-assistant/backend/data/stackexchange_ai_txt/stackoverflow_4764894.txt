[site]: stackoverflow
[post_id]: 4764894
[parent_id]: 4764285
[tags]: 
Only and only if your POJO is running in the same thread as the HttpServletRequest is running in, then you'll be able to achieve this with help of ThreadLocal . Create the following class: public final class YourContext implements AutoCloseable { private static ThreadLocal instance = new ThreadLocal<>(); private HttpServletRequest request; private HttpServletResponse response; private YourContext(HttpServletRequest request, HttpServletResponse response) { this.request = request; this.response = response; } public static YourContext create(HttpServletRequest request, HttpServletResponse response) { YourContext context = new YourContext(request, response); instance.set(context); return context; } public static YourContext getCurrentInstance() { return instance.get(); } @Override public void close() { instance.remove(); } public HttpServletRequest getRequest() { return request; } public HttpSession getSession() { return request.getSession(); } public ServletContext getServletContext() { return request.getServletContext(); } // ... (add if necessary more methods here which return/delegate the request/response). } Implement javax.servlet.Filter which does the following in doFilter() method and is mapped on an url-pattern of interest, e.g. /* or on the servlet-name of your front controller servlet. @Override public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws ServletException, IOException { HttpServletRequest request = (HttpServletRequest) req; HttpServletResponse response = (HttpServletResponse) res; try (YourContext context = YourContext.create(request, response)) { chain.doFilter(request, response); } } Note the importance of try-with-resources statement. It guarantees that the YourContext#close() will be called after the filter has done its job and the ThreadLocal resource will be cleared. Otherwise the thread will still contain it when recycled for another HTTP request. And here's how you could use it in the POJO: YourContext context = YourContext.getCurrentInstance(); HttpSession session = context.getSession(); This all is basically also how the Context objects of the average MVC framework works, like JSF's FacesContext and the one in Wicket. Said that, have you looked at CDI ? Perhaps it's easier to make the artifacts CDI-managed so you can just @Inject them in each other.
