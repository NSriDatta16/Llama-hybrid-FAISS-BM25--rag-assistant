[site]: stackoverflow
[post_id]: 3648045
[parent_id]: 3647258
[tags]: 
I would like to know (...) if my approach for using native SQLs and DB procedures are fine for case 2 and 3 based on my judgment Nothing forces your to use a stored procedure for case 2, you could use HQL and projections as already pointed out: select f.id, f.firstName from Foo f where ... Which would return an Object[] or a List depending on the where condition. And if you want type safe results, you could use a SELECT NEW expression (assuming you're providing the appropriate constructor): select new Foo(f.id, f.firstName) from Foo f And you can even return non entities select new com.acme.LigthFoo(f.id, f.firstName) from Foo f For case 3, the situation seems different. Just in case, note that the Criteria API is more appropriate than HQL to build dynamic queries . But it looks like this won't help here. I would like to know (...) whether executing SQLs in HibernateCallback is correct approach? First of all, there are several restrictions when using stored procedures and I prefer to avoid them when possible. Secondly, if you want to return entities, it isn't the only way and simplest solution as we saw. So for case 2, I would consider using HQL. For case 3, since you aren't returning entities at all, I would consider not using Hibernate API but the JDBC support from Spring which offers IMHO a cleaner API than Session#connection() and the HibernateCallback . More interesting readings: References Hibernate Core reference guide 14.6. The select clause (about the select new ) 16.1.5. Returning non-managed entities (about ResultTransformer ) 16.2.2. Using stored procedures for querying Resources Hibernate 3.2: Transformers for HQL and SQL Related questions hibernate SQLquery extract variable hibernate query language or using criteria
