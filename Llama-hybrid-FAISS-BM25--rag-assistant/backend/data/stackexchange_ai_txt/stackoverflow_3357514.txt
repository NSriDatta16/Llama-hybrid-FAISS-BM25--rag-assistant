[site]: stackoverflow
[post_id]: 3357514
[parent_id]: 3357429
[tags]: 
Is there a benefit to having a single column primary key vs a composit[sic] primary key? Yes. If the primary key also happens to be the clustered index, it is common that the clustered index is duplicated fully for each secondary index in the table. Therefore, having a fatter clustered index, which is what one would get with a composite, implies an increase in storage cost. Also, foreign references to this table would need to specify both fields to refer to a unique entry, which implies a further storage cost. There is also an arguably greater cost in development time because there is a slight increase in the complexity of the join. On the other hand, depending on the distribution of the values of your two key fields, it may be the case that concurrent access to your table is greatly improved because chronologically-successive inserts could occur on different physical pages; this could be the case, for example, if your fields are time-independent (and non-monotonic like an auto-incrementer) like clientID , or something like that. This could be significant for performance in a high concurrency environment. I have a table that consists of two id columns which together make up the primary key. Are there any disadvantages to this? Is there a compelling reason for me to throw in a third column that would be unique on it's own? If the most common way in which your table is queried is to specify those three fields as restrictions, then having all three in a composite key would likely be the fastest lookup. And there is another important point that I almost forgot. Since having a composite key means that foreign references to this table from other tables must specify all fields in the key, it also means that some queries performed on the other table that required a restriction on one or more of the parts of the composite index of this table, can be performed without requiring a join . This could be considered similar to the concept of denormalization for the sake of performance (and arguably sacrificing a little ease of maintainability).
