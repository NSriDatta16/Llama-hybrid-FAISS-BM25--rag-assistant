[site]: stackoverflow
[post_id]: 5670057
[parent_id]: 5667998
[tags]: 
After some digging around in ILSpy , I found that there's no property that disables the "drag to select" behavior, nor is there an event I can mark as Handled to stop it. But there is a good inflection point for changing this behavior: ListBoxItem.OnMouseEnter is virtual, and it calls back into the listbox to change the selection. It doesn't seem to do anything else substantive, so all I need to do is override it and do nothing. EDIT: As it turns out, the above only keeps the selection from changing while you move the mouse around inside the listbox. It doesn't help if you move the mouse above or below the listbox -- then the auto-scroll kicks in and moves the selection. Most of the auto-scroll code is again in non-virtual methods; it looks like the best way to prevent auto-scroll is probably to disable mouse capture. Another override on ListBoxItem can take care of this. It looks like the best way to use my own ListBoxItem descendant is to descend from ListBox. The final code looks something like this: public class ListBoxEx : ListBox { protected override DependencyObject GetContainerForItemOverride() { return new ListBoxExItem(); } protected override bool IsItemItsOwnContainerOverride(object item) { return item is ListBoxExItem; } } public class ListBoxExItem : ListBoxItem { private Selector ParentSelector { get { return ItemsControl.ItemsControlFromItemContainer(this) as Selector; } } protected override void OnMouseEnter(MouseEventArgs e) { } protected override void OnMouseLeftButtonDown(MouseButtonEventArgs e) { base.OnMouseLeftButtonDown(e); ParentSelector?.ReleaseMouseCapture(); } }
