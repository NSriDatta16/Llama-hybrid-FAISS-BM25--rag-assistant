[site]: stackoverflow
[post_id]: 3495521
[parent_id]: 3490519
[tags]: 
First (and I'll never repeat it enough), using system scoped dependencies is discouraged unless you know exactly what you're doing. From Dependency Scopes : system : This dependency is required in some phase of your project's lifecycle, but is system-specific. Use of this scope is discouraged: This is considered an "advanced" kind of feature and should only be used when you truly understand all the ramifications of its use, which can be extremely hard if not actually impossible to quantify . This scope by definition renders your build non-portable. It may be necessary in certain edge cases. The system scope includes the element which points to the physical location of this dependency on the local machine. It is thus used to refer to some artifact expected to be present on the given local machine an not in a repository; and whose path may vary machine-to-machine. The systemPath element can refer to environment variables in its path: ${JAVA_HOME} for instance. Now, to strictly answer your question, declaring a dependency with a system scope that would point on several jars is "possible" IF the dependency has a MANIFEST.MF listing other JARs relatively in its Class-Path entry. Something like this (assuming the "root" dependency is in lib ): Class-Path: ../lib/bar.jar ../lib/foo.jar But I do NOT recommend this approach, especially in your particular case. Instead, have a look at this previous answer where I describe how to setup a file-based repository.
