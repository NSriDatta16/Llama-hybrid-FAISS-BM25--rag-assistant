[site]: stackoverflow
[post_id]: 4377586
[parent_id]: 4377483
[tags]: 
I expect that both s_zzz.m_aPtr and s_zzz.m_val will be initialized to zeros before any other static initialization in any other compilation unit and it is guaranteed by the language itself. It will be zero-initialized, since it's a static lifetime variable at namespace scope. That zero-initialization happens before any dynamic initialization (an example of dynamic initializatin is when you some explicit initialization, or the class has a constructor). The order of zero-initialization between different translation units is not defined, but there's not any way to detect it or rely on it since it happens before anything else, so it doesn't matter. Re your point 2, it's rather unclear what you're asking about. But for your static lifetime object, the effect is just that it's first zero-initialized, and then during dynamic initialization your constructor is used to zero it again (although the compiler might be smart enough to optimize away that redundant extra initialization). Cheers & hth., ERRATA : Ben Voigt has provided a convincing example that the last paragraph above is wrong . So please disregard. The presence of the constructor means that the object can be dynamically initialized at some point before, between or after operations that change it, causing rather unpredictable resultsâ€¦
