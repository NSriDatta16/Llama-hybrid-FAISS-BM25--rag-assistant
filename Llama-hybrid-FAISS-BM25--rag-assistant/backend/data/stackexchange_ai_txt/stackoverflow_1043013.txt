[site]: stackoverflow
[post_id]: 1043013
[parent_id]: 34571
[tags]: 
I have used reflection to do this for Java in the past, and in my opinion it was a big mistake. Strictly speaking, you should not be writing unit tests that directly test private methods. What you should be testing is the public contract that the class has with other objects; you should never directly test an object's internals. If another developer wants to make a small internal change to the class, which doesn't affect the classes public contract, he/she then has to modify your reflection based test to ensure that it works. If you do this repeatedly throughout a project, unit tests then stop being a useful measurement of code health, and start to become a hindrance to development, and an annoyance to the development team. What I recommend doing instead is using a code coverage tool, such as Cobertura , to ensure that the unit tests you write provide decent coverage of the code in private methods. That way, you indirectly test what the private methods are doing, and maintain a higher level of agility.
