[site]: stackoverflow
[post_id]: 3057029
[parent_id]: 
[tags]: 
Do I have to bind a UDP socket in my client program to receive data? (I always get WSAEINVAL)

I am creating a UDP socket ( AF_INET , SOCK_DGRAM , IPPROTO_UDP ) via Winsock and trying to recvfrom on this socket, but it always returns -1 and I get WSAEINVAL (10022). Why? When I bind() the port, that does not happen, but I have read that it is very lame to bind the client's socket. I am sending data to my server, which answers, or at least, tries to. Inc::STATS CConnection::_RecvData(sockaddr* addr, std::string &strData) { int ret; // return code int len; // length of the data int fromlen; // sizeof(sockaddr) char *buffer; // will hold the data char c; //recv length of the message fromlen = sizeof(sockaddr); ret = recvfrom(m_InSock, &c, 1, 0, addr, &fromlen); if(ret != 1) { #ifdef __MYDEBUG__ std::stringstream ss; ss This is a working example I wrote a few moments ago, and it works without the call to bind() in the client: #pragma comment(lib, "Ws2_32.lib") #define WIN32_LEAN_AND_MEAN #include #include #include using namespace std; int main() { SOCKET sock; addrinfo* pAddr; addrinfo hints; sockaddr sAddr; int fromlen; const char czPort[] = "12345"; const char czAddy[] = "some ip"; WSADATA wsa; unsigned short usWSAVersion = MAKEWORD(2,2); char Buffer[22] = "TESTTESTTESTTESTTEST5"; int ret; //Start WSA WSAStartup(usWSAVersion, &wsa); //Create Socket sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP); //Resolve host address memset(&hints, 0, sizeof(hints)); hints.ai_family = AF_INET; hints.ai_protocol = IPPROTO_UDP; hints.ai_socktype = SOCK_DGRAM; if(getaddrinfo(czAddy, czPort, &hints, &pAddr)) { std::cerr ai_addr, pAddr->ai_addrlen); if(ret != sizeof(Buffer)) { std::cerr
