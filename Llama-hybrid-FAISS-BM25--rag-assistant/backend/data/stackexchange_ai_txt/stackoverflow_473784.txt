[site]: stackoverflow
[post_id]: 473784
[parent_id]: 473685
[tags]: 
If your class hangs around for a long time, then nulling out objects it references will allow them to be collected. This is almost never an issue, most times nulling objects is not useful. When you think of object allocation and freeing, pay attention to the things that the "System" has handles to: Active threads, windows that haven't been dispose()d, and one or two more things but I can't remember right now. Every object in your system "Hangs" off these mount points in a giant upside-down tree. If you cut any branch free from these "Roots" the entire branch falls to the ground and is collected by the Lawn Mower of Garbage Collecting. Most classes need all their member variables for their entire lifecycle--and when their life is finished, their entire branch is trimmed including all their members; hence--no need to null. (these trims, by the way, are quite efficient, even more than C++'s free since they don't require touching each object as it's freed)
