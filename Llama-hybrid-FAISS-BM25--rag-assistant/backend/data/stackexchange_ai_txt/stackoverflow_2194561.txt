[site]: stackoverflow
[post_id]: 2194561
[parent_id]: 2194201
[tags]: 
As others noted, there are some important benefits of using immutable data. To name a few: Parallelization - It is easier to parallelize program that calculates the result and returns it in an immutable data structure. Understanding code - If you write program using immutable data, the only thing a piece of code can do is to return a result - this makes program more readable, because you see what a function/method does just by analyzing inputs & outputs Technically seaking, you can write the same immutable data structure in both C# and F#. The problem is, that F# encourages you to do this, while writing true immutable data strctures in C# is a bit painful. This means that when writing F# code, you'll more likely write immutable structures (because it's easier!) and you'll use mutability (which is possible in F# as well) only when you'll really need it (it's harder!) Aside from declaring immutable types by default, F# also has some nice features that make working with them easier. For example when working with records: type MyRect = { X : int; Y : int; Width : int; Height : int } let r = { X = 0; Y = 0; Width = 200; Height = 100 } // You'll often need to create clone with one field changed: let rMoved1 = { X = 123; Y = r.Y; Width = r.Width; Height = r.Height } // The same thing can be written using 'with' keyword: let rMoved2 = { r with X = 123 } You can write the same thing in C# too, but you'll need to declare immutable data structure with method WithX that returns a clone with modified X field, WithY , WithWidth , etc... Here is an incomplete example: class MyRect { readonly int x, y, width, height; MyRect WithX(int newX) { return new MyRect(newX, y, width, height); } // etc... } This is a lot of work without any help from the compiler.
