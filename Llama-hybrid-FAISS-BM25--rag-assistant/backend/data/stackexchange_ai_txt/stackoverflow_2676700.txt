[site]: stackoverflow
[post_id]: 2676700
[parent_id]: 2676210
[tags]: 
A long, in 32bit architectures, is represented by two words . Now, imagine what could happen if due to insufficient synchronization, the execution of the switch statement observes a long with its high 32 bits from one write, and the 32 low ones from another! It could try to go to ....who knows where! Basically somewhere at random. Even if both writes represented valid cases for the switch statement, their funny combination would probably lead neither to the first nor to the second -- or extremely worse, it could lead to another valid, but unrelated case! At least with an int (or lesser types), no matter how badly you mess up, the switch statement will at least read a value that someone actually wrote , instead of a value "out of thin air". Of course, I don't know the actual reason (it's been more than 15 years, I haven't been paying attention that long!), but if you realize how unsafe and unpredictable such a construct could be, you'll agree that this is a definitely very good reason not to ever have a switch on longs (and as long -pun intended- there will be 32bit machines, this reason will remain valid).
