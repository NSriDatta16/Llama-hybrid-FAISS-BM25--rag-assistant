[site]: stackoverflow
[post_id]: 5762094
[parent_id]: 
[tags]: 
Does adding local variables to methods make them slower?

This question has received a total of several paragraphs of answer. Here is the only sentence that actually tells me what I was looking for: Your examples would make little difference since intermediate computations need to be stored temporarily on the stack so they can be used later on. In fact, it answers my question perfectly and completely =) Unlike all the cruft telling me "nooo don't ask that question". >_ Like if you have a method, and you change it by increasing the number of local variables but make no other changes, does it make the method slower? Here's an example: void makeWindow() { Display .getContext() .windowBuilder() .setSize(800, 600) .setBalloonAnimal(BalloonAnimal.ELDER_GOD.withColor(PUCE)) .build(); } or void makeWindow() { DisplayContext dc = Display.getContext(); WindowBuilder wb = db.windowBuilder(); BalloonAnimal god = BalloonAnimal.ELDER_GOD; BalloonAnimal puceGod = god.withColor(PUCE); wb.setSize(800, 600).setBalloonAnimal(puceGod).build(); } Another example: int beAnExample(int quiche) { return areGlobalsEvil? quiche * TAU/5: highway(quiche, Globals.frenchFrenchRevolution); } or int beAnExample(int quiche) { if (areGlobalsEvil) { int to5 = TAU/5; int result = quiche * to5; return result; } else { Game french = Globals.frenchFrenchRevolution; int result = highway(quiche, french); return result; } } Really, what I'm asking is: Is the number of this sort of local variable even relevant by the time the method's compiled to bytecode? If so, what about once Hotspot gets to work on it? This question is relevant to the code generator I'm working on.
