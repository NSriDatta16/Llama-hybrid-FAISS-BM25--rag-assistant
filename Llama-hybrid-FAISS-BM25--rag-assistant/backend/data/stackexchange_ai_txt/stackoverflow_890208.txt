[site]: stackoverflow
[post_id]: 890208
[parent_id]: 886509
[tags]: 
If you want to use lists, see one of the suggestions above me (personally I like Oli's best). You can improve performance by using the ArrayList constructor like this: ... = new ArrayList ( dtoDocuments.length * DISPLAY_ON_ACCESS_PREDICTION); where DISPLAY_ON_ACCESS_PREDICTION is either: 1 (int), if your result sets aren't huge and you don't care for a little extra memory being taken. A constant, based on your knowledge of the system. If performance is really important - a variable based on history (average, moving average, etc) or prediction (if you can make one ahead of time). Also, you could use the ArrayList.trimToSize() if the model is very big and memory is something you wish to conserve. If you want to stay with arrays, here are two suggestions: Suggestion 1, assuming getting the asking the indicator status is "slow" (time/resources consuming): //... DocumentSummary[] domainDocuments = new DocumentSummary[dtoDocuments.length]; int skipped = 0; for (int count = 0; count Suggestion 2, assuming getting the asking the indicator status is "fast" (time / low on resources): int actualCount = 0; for (int count = 0; count
