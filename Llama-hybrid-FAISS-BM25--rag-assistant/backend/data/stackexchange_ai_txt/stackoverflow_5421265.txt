[site]: stackoverflow
[post_id]: 5421265
[parent_id]: 
[tags]: 
Unit Testing Composite Service Methods

I am writing (junit) unit tests for a class which implements an exposed interface with methods like: public Set getUserSettings(); public Set getOrganizationSettings(); public Set getDefaults(); public Set getAllSettings(); The methods for getting Settings from a specific layer do IO from various places for retrieving their results. getAllSettings() Returns a single set of all the Settings at all levels, with the 'uppermost' level having preference (i.e. if a setting exists in the default and user level, the setting in the user-level will be used. I've already written the unit tests for getUserSettings(), getOrganizationSettings(), getDefaults(), mocking out the IO operations with Mocked objects. The implementation for the getAllSettings() looks something like public Set getAllSettings(){ Set defaults = getUserSettings(); Set custom = getOrganizationSettings(); Set undefined = getDefaults(); //perform some sorting and business logic //return fully sorted set } My question lies in how to unit test the getAllSettings() method. Do I use mocks (using easymock/powermock) for all the downstream resource calls that the user/organization/defaultSettings methods use? It seems like there would be a cleaner/better/easier way to do it.
