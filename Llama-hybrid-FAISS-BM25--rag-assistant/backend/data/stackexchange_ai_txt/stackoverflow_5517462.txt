[site]: stackoverflow
[post_id]: 5517462
[parent_id]: 5517320
[tags]: 
Short Answer Yes. If your machine has enough memory for the structure (and the overhead of the rest of the program and system including operating system). Long Answer Are you sure you want to? Without knowing more about your application, it's difficult to know what to suggest. Where is the data coming from? A file? Files? A database? Services? Is this a caching mechanism? If so, can you expire items out of the cache once they haven't been accessed for a while? This way, you don't have to hold everything in memory all the time. As others have suggested, if you're just trying to store lots of data, can you just use a database? That way you don't have to have all of the information in memory at once. With indexing, most databases are excellent at performing fast retrieves. You could combine this approach with a cache. Is the data that will be in memory read only, or will it have to be persisted back to some storage when something changes? Scalability - do you expect that the amount of data that will be stored in this dictionary will increase as time goes on? If so, you're going to run into a point where it's very expensive to buy machines that can handle this amount of data. You might want to look a distributed caching system if this is the case (AppFrabric comes to mind) so you can scale out horizontally (more machines) instead of vertically (one really big expensive point of failure). UPDATE In light of the poster's edit, it sounds like caching would go a long way here. There are many ways to do this: Simple dictionary caching - just cache stuff as its requested. Memcache Caching Application Block I'm not a huge fan of this implementation, but others have had success.
