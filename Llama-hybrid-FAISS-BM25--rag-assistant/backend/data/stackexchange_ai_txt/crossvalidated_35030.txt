[site]: crossvalidated
[post_id]: 35030
[parent_id]: 34993
[tags]: 
As requested, I'll elaborate on my comment, although I don't have experience using it. I work with neural networks for regression problems and often construct new features, but I don't have to deal with missing data so I'm not sure whether this will work. Let's suppose the features of your data look like $(0,1)$ $(0.5,0.5)$ $(*,0.2)$ $(*,0.7)$ $(0.8,*)$ where $*$ means the value is missing or unreliable. Rather than replacing $*$ with a very large or very small value outside the typical range, or breaking up your data so that you have a separate net for each subset of the data which might be missing, I suggest making two features for each input which might be missing. If the value is present, the two features become $(0,value)$. If the value is missing, then the features become $(1,random)$ where you randomly sample value from the range. So, the above data set would become $(0,0,0,1)$ $(0,0.5,0,0.5)$ $(1,rand,0,0.2)$ $(1,rand,0,0.7)$ $(0,0.8,1,rand)$ Each point with a random coordinate can be cloned to give several inputs which you can train with a lower learning rate. $(0,0,0,1), \alpha = \alpha_0 $ $(0,0.5,0,0.5), \alpha = \alpha_0$ $(1,0,0,0.2), \alpha = \alpha_0/3$ $(1,0.5,0,0.2), \alpha = \alpha_0/3$ $(1,0.8,0,0.2), \alpha = \alpha_0/3$ $(1,0,0,0.7), \alpha = \alpha_0/3$ $(1,0.5,0,0.7), \alpha = \alpha_0/3$ $(1,0.8,0,0.7), \alpha = \alpha_0/3$ $(0,0.8,1,1), \alpha = \alpha_0/4$ $(0,0.8,1,0.5), \alpha = \alpha_0/4$ $(0,0.8,1,0.2), \alpha = \alpha_0/4$ $(0,0.8,1,0.7), \alpha = \alpha_0/4$ One idea is that this should encourage the neural network to learn that when the indicator that the value is missing is $1$, then the value doesn't matter. You can test whether this is true for the neural network, and perhaps use a regularizer which encourages this.
