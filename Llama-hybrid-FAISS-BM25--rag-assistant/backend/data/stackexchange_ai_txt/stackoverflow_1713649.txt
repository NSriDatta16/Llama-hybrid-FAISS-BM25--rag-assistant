[site]: stackoverflow
[post_id]: 1713649
[parent_id]: 1713554
[tags]: 
The key thing to remember is the separation between logical/virtual parallelism and real/hardware parallelism. With your average OS, a system call is performed to spawn a new thread. What actually happens (whether it is mapped to a different core, a different hardware thread on the same core, or queued into the pool of software threads) is up to the OS. Parallel processing uses all the methods not just multi-threading. Generally speaking, if you want to have real parallel processing, you need to perform it in hardware. Take the example of the Niagara , it has up to 8-cores each capable of executing 4-threads in hardware. Context switching is needed when there are more threads than is capable of being executed in parallel in hardware. Even then, when executed in series (switching between one thread to the next), they are considered concurrent because there is no guarantee on the order of switching. So, it may go T0, T1, T2, T1, T3, T0, T2 and so on. For all intents and purposes, the threads are parallel. Time slicing. That would be up to the OS.
