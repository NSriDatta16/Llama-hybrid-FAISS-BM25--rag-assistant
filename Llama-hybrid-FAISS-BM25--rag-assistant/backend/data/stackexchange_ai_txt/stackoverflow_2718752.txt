[site]: stackoverflow
[post_id]: 2718752
[parent_id]: 2717976
[tags]: 
Moving from Bayesian classifiers to programming languages, I'll leave out "something else" as being too broad, and having no patently superior candidates. Of the four you list, I'd avoid C and C++ because who wants to deal with memory management, especially when you're learning? Normally I'd be tempted toward Java because of the static type system, and if you're a beginner I think that's still the safest bet. But Ruby is also a sensible choice because you can prototype new ideas and new examples very rapidly. I have worked on an maintain a version of a rather powerful Bayesian classifier for reading email. It is written in a mixture of Lua and C. It's highly performant, but one of the things I really regret about the design is that there is very little abstraction built into the code. I definitely recommend building abstractions into the code like Feature extraction Frequency counting The representation of probability Java makes it really easy to enforce these kinds of abstraction barriers, although Ruby can do it too. One of the things my colleague Fidelis Assis found is that standard floating-point numbers are not good for representing very small probabilities. We do a fair amount with logarithms of probabilities (where probabilities multiply, the logarithms sum).
