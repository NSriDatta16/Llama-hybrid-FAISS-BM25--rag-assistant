[site]: stackoverflow
[post_id]: 5623693
[parent_id]: 2763985
[tags]: 
See http://fabiomaulo.blogspot.com/2009/09/nhibernate-tree-re-parenting.html Basically, it boils down to this... You need to define a custom collection type for NHibernate that re-defines what it means to be an orphan. NHibernate's default behavior is to do just as you discovered - to consider a child to be orphaned if it has been removed from the parent. Instead, you need NHibernate to test the child to see if it has been assigned to a new parent. NHibernate does not do this by default because it would require additional information on the one-to-many mapping - it would need to know the name of the corresponding many-to-one property on the child. Change your Storage mapping to look like this: Define a new type named StorageBoxBag (note - this code is written against NHibernate 2.1 - if you are using NH3 you may have to tweak this a bit): public class StorageBoxBag : IUserCollectionType { public object Instantiate(int anticipatedSize) { return new List (); } public IPersistentCollection Instantiate(ISessionImplementor session, ICollectionPersister persister) { return new PersistentStorageBoxBag(session); } public IPersistentCollection Wrap(ISessionImplementor session, object collection) { return new PersistentStorageBoxBag(session, (IList )collection); } public IEnumerable GetElements(object collection) { return (IEnumerable)collection; } public bool Contains(object collection, object entity) { return ((IList )collection).Contains((Box)entity); } public object IndexOf(object collection, object entity) { return ((IList ) collection).IndexOf((Box) entity); } public object ReplaceElements(object original, object target, ICollectionPersister persister, object owner, IDictionary copyCache, ISessionImplementor session) { var result = (IList )target; result.Clear(); foreach (var box in (IEnumerable)original) result.Add((Box)box); return result; } } ... and a new type named PersistentStorageBoxBag : public class PersistentStorageBoxBag: PersistentGenericBag { public PersistentStorageBoxBag(ISessionImplementor session) : base(session) { } public PersistentStorageBoxBag(ISessionImplementor session, ICollection original) : base(session, original) { } public override ICollection GetOrphans(object snapshot, string entityName) { var orphans = base.GetOrphans(snapshot, entityName) .Cast () .Where(b => ReferenceEquals(null, b.CurrentStorage)) .ToArray(); return orphans; } } The GetOrphans method is where the magic happens. We ask NHibernate for the list of Box es that it thinks are orphans, and then filter that down to only the set of Box es that actually are orphans.
