[site]: crossvalidated
[post_id]: 385936
[parent_id]: 
[tags]: 
Autoencoder as an optimization (search) problem

We all know that machine learning problems can be modeled as an optimization problem where we are searching for the best set of parameter values in the parameter space that optimizes our objective function. Right? I am implementing an autoencoder neural network (with only one hidden layer) whose objective function is known to me in terms of weights $\mathcal{W}$ , some hyperparameters $\lambda$ and data $\mathcal{X}$ . Moreover, I have a solver to solve for the objective function. Can I use this solver to implement the autoencoder without having to build an explicit neural network in Keras, Tensorflow etc? My intuition is that since this solver is going to give me the optimal values for weights $\mathcal{W}$ and hyperparameters $\lambda$ , this should be sufficient to build the autoencoder. Any comments ? Also, can I extend this idea to implement stacked autoencoder ?
