[site]: stackoverflow
[post_id]: 5411275
[parent_id]: 5411095
[tags]: 
Capacity is as you described it -- the contiguous memory allocated to an ArrayList for storage of values. ArrayList stores all values in an array, and automatically resizes the array for you. This incurs memory management overhead when resizing. If I remember correctly, Java increases the size of an ArrayList's backing array from size N to size 2N + 2 when you try to add one more element than the capacity can take. I do not know what size it increases to when you use the insert method (or similar) to insert at a specific position beyond the end of the capacity, or even whether it allows this. Here is an example to help you think about how it works. Picture each space between the | s as a cell in the backing array: | | | size = 0 (contains no elements), capacity = 2 (can contain 2 elements). |1| | size = 1 (contains 1 element), capacity = 2 (can contain 2 elements). |1|2| size = 2, capacity = 2. Adding another element: |1|2|3| | | | size increased by 1, capacity increased to 6 (2 * 2 + 2). This can be expensive with large arrays, as allocating a large contiguous memory region can require a bit of work (as opposed to a LinkedList, which allocates many small pieces of memory) because the JVM needs to search for an appropriate location, and may need to ask the OS for more memory. It is also expensive to copy a large number of values from one place to another, which would be done once such a region was found. My rule of thumb is this: If you know the capacity you will require, use an ArrayList because there will only be one allocation and access is very fast. If you do not know your required capacity, use a LinkedList because adding a new value always takes the same amount of work, and there is no copying involved.
