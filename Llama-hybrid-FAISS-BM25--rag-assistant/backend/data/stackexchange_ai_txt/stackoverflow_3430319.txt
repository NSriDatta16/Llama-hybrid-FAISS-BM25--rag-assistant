[site]: stackoverflow
[post_id]: 3430319
[parent_id]: 3429071
[tags]: 
First: char a[]="aesdf"; Assuming this is an automatic local variable, it will allocate 6 bytes on the stack and initialize them with the given characters. How it does this (whether by memcpy from a string literal or loading a byte at a time with inline store instructions, or some other way) is completely implementation-defined. Note that initialization must happen every time the variable comes into scope, so if it's not going to change, this is a very wasteful construct to use. If this is a static/global variable, it will produce a 6-byte char array with a unique address/storage whose initial contents are the given characters, and which is writable. Next: char *b="asdf"; This initializes the pointer b to point to a string literal "asdf" , which might or might not share storage with other string literals, and which produces undefined behavior if you write to it.
