[site]: stackoverflow
[post_id]: 5569969
[parent_id]: 5564869
[tags]: 
My general suggestion for introducing unit testing to an existing codebase would be the following: Start of testing some very simple classes to get a feel for writing tests Maybe even rewrite those tests again and make proper "this is how we should do it" examples out of them Take the one of the biggest and meanest classes in the whole system and get that class tested as best as you can. This is an important step to show everyone in your team (and maybe management) that unit testing your codebase CAN WORK OUT and is doable. After that I'd suggest that you focus on three things: Make sure new code gets tests If you fix a bug create a test before fixing it to "prove" the bug is actually fixed Use tests as a tool when you touch/change old code so you get better an better test coverage. PHPUnit will provide you with a CodeCoverage Report showing you how well your codebase is tested. It can be pretty cool to see the number rise from 0.3% to 5% to 20% over the course of month but it not a really strong motivator. To make sure you test NEW code I'd suggest using PHP_Change_Coverage as described in this blog posting This tool will help you a lot generating meaningful coverage reports as it only shows NEWLY CREATED CODE as UNTESTED and not all the old stuff you have lying around. With that you have something at hand that makes it really easy to "get a high % very early and keep testing the new stuff" while you create tests for everything old. Before PHP Change Coverage: and After:
