[site]: crossvalidated
[post_id]: 571349
[parent_id]: 
[tags]: 
How to forecast actual future values using XGBoost?

So I have a solar Irradiation dataset having around 61000+ rows & 2 columns. I have made the model using XGBoost to predict future values. I have split the data in 2 parts train and test and trained the model accordingly. Furthermore, I have made the predictions on the test data set. Everything is going fine. But now I want to predict the actual forecast. So I have done that can anybody confirm is the method correct? import os import pandas as pd import numpy as np import xgboost import matplotlib.pyplot as plt from xgboost import plot_importance from sklearn import metrics # Dataset df=pd.read_csv('Readings_last_7yr.csv') df.index = pd.to_datetime(df['Date'], format='%Y-%m-%d %H:%M:%S') ## Copied the dataset df2 = df.copy() del df2['Date'] ## Test Train Split from pandas import read_csv from matplotlib import pyplot # series = read_csv('sunspots.csv', header=0, index_col=0) X = df2 train_size = int(len(X) * 0.75) train, test = X[0:train_size], X[train_size:len(X)] print('Observations: %d' % (len(X))) print('Training Observations: %d' % (len(train))) print('Testing Observations: %d' % (len(test))) pyplot.plot(train) pyplot.plot(test) pyplot.show() ## Creating Features def create_features(df, target_variable): df['date'] = df.index df['hour'] = df['date'].dt.hour df['dayofweek'] = df['date'].dt.dayofweek df['quarter'] = df['date'].dt.quarter df['month'] = df['date'].dt.month df['year'] = df['date'].dt.year df['dayofyear'] = df['date'].dt.dayofyear df['dayofmonth'] = df['date'].dt.day df['weekofyear'] = df['date'].dt.weekofyear X = df[['hour','dayofweek','quarter','month','year', 'dayofyear','dayofmonth','weekofyear']] if target_variable: y = df[target_variable] return X, y return X ## METRICS def mean_absolute_percentage_error(y_true, y_pred): y_true, y_pred = np.array(y_true), np.array(y_pred) return np.mean(np.abs((y_true - y_pred) / y_true)) * 100 def timeseries_evaluation_metrics_func(y_true, y_pred): print(f'MSE is : {metrics.mean_squared_error(y_true, y_pred)}') print(f'MAE is : {metrics.mean_absolute_error(y_true, y_pred)}') print(f'RMSE is : {np.sqrt(metrics.mean_squared_error(y_true, y_pred))}') print(f'MAPE is : {mean_absolute_percentage_error(y_true, y_pred)}') print(f'R2 is : {metrics.r2_score(y_true, y_pred)}',end='\n\n') train_copy = train.copy() test_copy = test.copy() trainX, trainY = create_features(train_copy, target_variable='Irr') testX, testY = create_features(test_copy, target_variable='Irr') xgb = XGBRegressor(objective= 'reg:linear', n_estimators=1000) xgb xgb.fit(trainX, trainY, eval_set=[(trainX, trainY), (testX, testY)], early_stopping_rounds=50, verbose=False) # Predictions predicted_results = xgb.predict(testX) # Metrics timeseries_evaluation_metrics_func(testY, predicted_results) # Plotting graph for test and Predicted plt.figure(figsize=(13,8)) plt.plot(list(testY)) plt.plot(list(predicted_results)) plt.title("Actual vs Predicted") plt.ylabel("Irr") plt.legend(('Actual','predicted')) plt.show() # Making graph of predicted on the whole dataframe test['Prediction'] = predicted_results Irr_all = pd.concat([test, train], sort=False) Irr_all = Irr_all.rename(columns={'Irradiation':'Original_Value'}) Overview_Complete_Data_And_Prediction = Irr_all[['Irr','Prediction']].plot(figsize=(12, 5)) I am getting the results as: So now I want to predict future values from the year 2021 till 2023. FUTURE PREDICTION dti = pd.date_range("2021-01-01 00:30:00", periods=20000, freq="H") df_future_dates = pd.DataFrame(dti, columns = ['Date']) df_future_dates['Irr'] = np.nan df_future_dates.index = pd.to_datetime(df_future_dates['Date'], format='%Y-%m-%d %H:%M:%S') df_future_dates_copy = df_future_dates.copy() testX_future, testY_future = create_features(df_future_dates, target_variable='Irr') xgb = XGBRegressor(objective= 'reg:linear', n_estimators=1000) xgb ## Now here I have used train and test from above xgb.fit(trainX, trainY, eval_set=[(trainX, trainY), (testX, testY)], early_stopping_rounds=50, verbose=False) predicted_results_future = xgb.predict(testX_future) # Graph plt.figure(figsize=(13,8)) plt.plot(list(predicted_results_future)) plt.title("Predicted") plt.ylabel("Irr") plt.legend(('predicted')) plt.show() df_future_dates_copy['Prediction'] = predicted_results_future Irr_all_future = pd.concat([df2, df_future_dates_copy], sort=False) # Future Graph Overview_Complete_Data_And_Prediction_future = Irr_all_future[['Irr','Prediction']].plot(figsize=(15, 5)) Also in the final graph, the prediction is kind of repeating is there any chance of data leakage or any other problem ?
