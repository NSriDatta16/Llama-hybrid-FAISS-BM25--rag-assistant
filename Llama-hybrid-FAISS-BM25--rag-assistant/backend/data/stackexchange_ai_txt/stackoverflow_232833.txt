[site]: stackoverflow
[post_id]: 232833
[parent_id]: 229671
[tags]: 
The very 'practicality' means that the would-be CS major has to learn Kernighan's mistakes in designing C, notably the infamous fact that a for loop evaluates the for condition repeatedly, which duplicates while and fails to match the behavior of most other languages which implement a for loop. Muaahahahaa! I like the basic (pun intented) assertions of the reviewer: Kernighan's mistakes infamous fact fails to match the behavior of most other languages For me, it smells of someone who never succeeded mastering C's basic features/philosphy. Introduction As I was still studying physics in university, I found C (i.e. C-like languages) were to become my language of choice when I discovered C's for loop. So apparently, one's style failure is another's style success. This will end the subjective part of this discussion. Perhaps Kernigan's for should have been called loop? Just kidding? Perhaps not. The author of the review apparently decided that each language construct should have the same behavior across languages. So renaming for as loop would have eased his/her discomfort. The problem is that the author fails to understand that C's for is an extension of while , not a different loop. This means while is a syntactic sugar light version of for , instead of the while other languages where for may have been castrated down. Is C for really needed? Quoting the author of the review, he/she makes the following assertions about for and while : for is for constant loops, from a beginning to an end while is for loops evaluating a condition at each iteration Having orthogonal features is a good thing when you can combine them. But in all languages I know, there is no way to combine both for and while together. Example: What if, for the reviewer's language, you need a loop going from a beginning to an end (like a for ), but still able to evaluate at each loop iteration (like a while ): You could need to find in a subset of a container (not the whole container), a value according to some stateful test? In a C-like language, you use the for . In the reviewer's ideal language, you just, well, hack some ugly code, crying because you don't have a for_while loop (or C's for loop). Conclusion I believe we can summarize the reviewer's critic of C (and C-like languages) with the following statement " Kernigan's infamous mistake of not giving C the syntax of the previous, existing languages ", which can be summarized again as " Never think different ". Quoting Bjarne Stroustrup: There are only two kinds of languages: the ones people complain about and the ones nobody uses. So, all in all, the reviewer's comment should be considered as a praise. ^_^
