[site]: stackoverflow
[post_id]: 4432729
[parent_id]: 
[tags]: 
Java: Accessing an inner class' inherited protected members

I have a class CircularBuffer which extends AbstractList. I have a second class ExponentialUnrolledLinkedList which has an inner class Node which extends CircularBuffer. I can access some protected members of instances of Node in ExponentialUnrolledLinkedList (outside of Node), even if they are declared outside of Node (for example, the protected size field declared in CircularBuffer), but not the protected field modCount declared in AbstractList. I can access modCount from the inner class definition itself, but not from the enclosing class. For example public class ExponentialUnrolledLinkedList extends AbstractSequentialList { ... private Node last = new Node(1){ protected int firstIndex(){ return 0; } }; private class Node extends CircularBuffer { ... private void dirty(){ this.modCount++; // works } protected int firstIndex(){ return store.length; } } public int size(){ return last.firstIndex() + last.size; // access to last.size works } public boolean add(E item){ ... last.modCount++; // can't access modCount, have to call last.dirty() ... return true; } } Why can I access size in both the inner class and the outter class, but I can only access modCount in the inner class? I was under the (obviously false) impression that outter classes have access to everything that their inner classes have access to. Clearly some protected members are accessible to both but some aren't. I have a work-around by wrapping the modCount increment in a (private) method and calling that method, but this seems inelegant.
