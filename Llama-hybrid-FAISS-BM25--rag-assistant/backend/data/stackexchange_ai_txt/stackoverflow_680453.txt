[site]: stackoverflow
[post_id]: 680453
[parent_id]: 680394
[tags]: 
Woah, there are a ton of resources out there. Best advice to start is to find a pattern that you feel comfortable with and stick to it for the project, there is nothing worse then changing your mind 3/4 the way in. One that I have found and like to use is the Repository or Provider patter. The Repository pattern just makes sure you have standard access to repositories, like your store catalog or CMS system. You create an interface that in my case expose sets of IQueryable the object or the data model are just standard c# classes with now extra fluff POCO (Plain Old CLR Objects). public interface ICMSRepository { IQueryable GetContentSections(); void SaveContentSection(ContentSection obj); } Then just implement the interface for your different providers, like a LINQ to SQL context, making sure to return the POCO objects as queryable. The nice thing about this is that you can then make extension methods off of the IQueryable to get what you need easily. Like: public static IQueryable WithID(this IQueryable qry, int ID) { return from c in qry select c; } //Allow you to chain repository and filter to delay SQL execution ICMSRepository _rep = new SqlCMSRepository(); var sec = _rep.GetContentSections().WithID(1).SingleDefault(); The nice thing about using the Interface approach is the ability to test and mock it up or dependency inject your preferred storage at run time. Another method I have used and is used in the ASP.Net framework a lot is the Provider model. This is similar except instead of an Interface you create a singleton abstract class, your implementations on top of the abstract class will then define the storage access means (XML, Flat file, SQL, MySql, etc). The base abstract class will be also be resonsible for creating it's singleton based on configuration. Take a look at this for more info on the provider model. Otherwise you can look at this similar question .
