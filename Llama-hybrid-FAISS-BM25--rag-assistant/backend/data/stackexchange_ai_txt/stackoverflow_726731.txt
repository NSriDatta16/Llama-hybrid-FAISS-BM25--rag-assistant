[site]: stackoverflow
[post_id]: 726731
[parent_id]: 724506
[tags]: 
There are a couple of things going on here. The Java framework is offering you a nice way updated your UI but constrains you to using a specific structure, Document. On the other hand you have a adequate model that represents your data. By using Document directly in your model you also take the risks of tying your model to a specific framework. Which isn't a good idea. The Java Document framework offers the ability to listen to changes you can leverage this into creating an Adapter class between your model and Document. Basically when you setup the form you will make an instance of the adapter class. You will initialize with your model. The adapter will have a property returning a document. IN addition the Adapter will register itself as the listener for that document model. The adapter will be smart enough to know how to translate the chances to the document model to your model. Goes something like this UI is Created along with the JTextDocument. In the creation process it requests your model from the View. It create an instance of the Adapter initializing it with your model. The adapter also sets itself up as the listener of the Document. Assign the document to the JTextDocument object. Any interaction with the Document is reported back to Adapter The Adapter notifies the View passing the translated data back. The View changes the Model. The View nofitifies the Adapter that the model has change. The Adapter translates the changes into changes to the document. Because the adapter is tied to the Java Framework is should be pushed as close to the UI as it can get. Likely the Adapter will implement a interface exposed by the View so that the View doesn't have to reference anything specific to the framework you are using. When you change framework all you have to do is make a new object that implements that interface and the View is none the wiser.
