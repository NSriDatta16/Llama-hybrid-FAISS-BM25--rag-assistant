[site]: stackoverflow
[post_id]: 558830
[parent_id]: 557199
[tags]: 
Abstract persistence from the object class. Put all of the persistence logic in an adapter class, and assign the adapter to the object class. Something like: class Fruit(Object): @classmethod def get(cls, id): return cls.adapter.get(id) def put(self): cls.adapter.put(self) def __init__(self, id, name, weight, color): self.id = id self.name = name self.weight = weight self.color = color class FruitAdapter(Object): def get(id): # retrieve attributes from persistent storage here return Fruit(id, name, weight, color) def put(fruit): # insert/update fruit in persistent storage here Fruit.adapter = FruitAdapter() f = Fruit.get(1) f.name = "lemon" f.put() # and so on... Now you can build different FruitAdapter objects that interoperate with whatever persistence format you settle on (database, flat file, in-memory collection, whatever) and the basic Fruit class will be completely unaffected.
