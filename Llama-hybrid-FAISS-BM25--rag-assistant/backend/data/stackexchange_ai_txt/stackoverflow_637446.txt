[site]: stackoverflow
[post_id]: 637446
[parent_id]: 637291
[tags]: 
In addition to some of the remarks made already, there are other things to consider professionally: Enterprise software is largely dominated by Java because many large scale clients prefer to deploy on a UNIX environment and the .NET CLRs that are out there don't really agree with most IT shops of these large clients. Java is generally considered to be a more attractive acquisition target in the enterprise software space. Geographical demand seems to be disparate between the two. On the west coast, Northern California area, Java dominates. What you specialize in may dictate where you will find work. If your interest is in building a consumer site, many consumer sites are built on neither Java nor .NET/C# these days. In addition to the old PHP standby - there is also Django/Python and Rails/Ruby worth considering. There are extremely mature solutions for deployment in all of these areas. I know this from experience. IMO, the Rails stack is light years ahead of anything that is offered in the Java world which in most cases still requires you to stitch together a disparate platform and hope it plays nice (this is less of an issue with C#/.NET). The strongly typed languages themselves also tend to be more verbose than the Python/Ruby where you can take advantage of functional programming techniques such as clojures and lambdas. Moving between languages is easy enough, but as is the case with programming, it's leveraging what's already been built - that's the tricky part. Learning the language is 10% of the effort towards true mastery. Knowing the vagaries of the framework you are using, the libraries, and understanding what's available is the tricky part. The Java Foundation Classes alone comprise of thousands of class files! It's important to master at least one platform before skipping about.
