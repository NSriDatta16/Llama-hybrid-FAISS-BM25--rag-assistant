[site]: stackoverflow
[post_id]: 3647257
[parent_id]: 3646620
[tags]: 
In my experience, the best starting point is to build a tool that follows basic Unix principles -- namely, to read from standard input and write to standard output. This allows people to use your tool in a flexible way: flipcase input.txt > output.txt othercommand | flipcase > output.txt flipcase | othercommand > ouput.txt flipcase input1.txt input2.txt > output.txt The next feature might be in-place editing: # Modify input files directly. flipcase -i input.txt # Create backup copies before modifying originals. flipcase -i --backup-suffix '_BAK' input.txt flipcase -i --backup-prefix 'BAK_' input.txt # Regex for power users. flipcase -i --backup-regex 's/foo/bar/' input.txt In verbose mode, the tool should not write to standard output, because that would conflict with the core principles above. It should write to standard error or a user-defined log file. flipcase -v input.txt > output.txt flipcase -v log.txt input.txt > output.txt After that, you add recursive behavior. The direction is less clear-cut here, but I'll toss out a few ideas. In the typical recursive case, the program's arguments are probably directories, and the user would need to supply additional options to define various types of filtering behavior (that is, which types of files to process). flipcase -r -i --backup-suffix '_BAK' --filter-glob '*.txt' dir1 dir2 flipcase -r -i --backup-suffix '_BAK' --filter-glob '*.txt' --filter-glob 'log*.dat' dir flipcase -r -i --backup-suffix '_BAK' --filter-regex 'log\w+\.(txt|log)$' dir1 dir2 # Don't do in-place editing. Instead create new files within the structure. flipcase -r --newname-suffix '_NEW' --filter-glob '*.txt' dir1 dir2 flipcase -r --newname-regex 's/\.txt$/_new.txt/' --filter-glob '*.txt' dir1 dir2 # Create the backups or the new files in a parallel directory # structure rather than within the original structure. flipcase -r -i --backup-tree 'backup_dir' --filter-glob '*.txt' dir1 dir2 flipcase -r -i --new-tree 'newfiles_dir' --filter-glob '*.txt' dir1 dir2
