[site]: stackoverflow
[post_id]: 3301162
[parent_id]: 3298135
[tags]: 
The best solution for this is to create a simple parent pom file project (with packaging 'pom') generically for all projects from your organization. 4.0.0 your.company company-parent 1.0.0-SNAPSHOT pom nexus-site http://central_nexus/server This can be built, released, and deployed to your local nexus so everyone has access to its artifact. Now for all projects which you wish to use it, simply include this section: your.company company-parent 1.0.0 This solution will allow you to easily add other common things to all your company's projects. For instance if you wanted to standardize your JUnit usage to a specific version, this would be the perfect place for that. If you have projects that use multi-module structures that have their own parent, Maven also supports chaining inheritance so it is perfectly acceptable to make your project's parent pom file refer to your company's parent pom and have the project's child modules not even aware of your company's parent. I see from your example project structure that you are attempting to put your parent project at the same level as your aggregator pom. If your project needs its own parent, the best approach I have found is to include the parent at the same level as the rest of the modules and have your aggregator pom.xml file at the root of where all your modules' directories exist. - pom.xml (aggregator) - project-parent - project-module1 - project-module2 What you do with this structure is include your parent module in the aggregator and build everything with a mvn install from the root directory. We use this exact solution at my organization and it has stood the test of time and worked quite well for us.
