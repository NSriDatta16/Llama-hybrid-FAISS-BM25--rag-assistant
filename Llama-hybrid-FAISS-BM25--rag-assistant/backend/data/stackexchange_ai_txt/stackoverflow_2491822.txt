[site]: stackoverflow
[post_id]: 2491822
[parent_id]: 2490920
[tags]: 
As Robert mentioned, I wrote an article that shows how to implement Game of Life in F# using Accelerator v2, so you can take a look at that for a working version. I remember having similar problem, but I don't know exactly in what scenario. Anyway, if you're using DX9Target then the problem may be that this target isn't supposed to support operations with integers (because emulating integer arithmetics on GPU precisely is just not possible using DX9). I believe that this is also a reason why I ended up using FloatParallelArray in my implementation. Do you have any chance to try the X64MulticoreTarget to see if that would work? EDIT : I did some further investigations and (unless I'm missing something important) it appears to be a bug with the CompareEqual method. Here is a much simpler example that shows the issue: open Microsoft.ParallelArrays let target = new DX9Target() let zeros = new IntParallelArray(Array2D.create 4 4 0) let trues = target.ToArray2D(ParallelArrays.CompareEqual(zeros, zeros)) trues |> Array2D.iter (printfn "%A") The expected result would be true (several times), but if you run it, it prints true only 4 times and then prints 12 times false . I'll ask someone from the Accelerator team and post an answer here. In the meantime, you can do the same thing as I did in my example - that is, simulate boolean operations using FPA and avoid using BPA and CompareEqual . EDIT 2 : Here is a reply from the Accelerator team members: This is related to the lack of precise integer calculations on DX9 GPUs. Because of numerical jitter, a Boolean comparison of an integer with itself is not always computed as exactly equal. (...) So, in summary, you cannot really rely on BPA . The only option is to do what I suggested - simulate booleans using FPA (and possibly compare the number with some small delta-neighborhood to avoid the jitter caused by GPUs). This shoudl however work with the X86MulticoreTarget - if you can find some minimal repro that shows in which situations the library crashes, that would be really useful!
