[site]: stackoverflow
[post_id]: 2169380
[parent_id]: 2169322
[tags]: 
Generally, it's a good idea to use pointers when you have to, but references or alternatively objects objects (think of values) when you can. First you need to know if gVector3 fulfils requirements of standard containers, namely if the type gVector3 copyable and assignable. It is useful if gVector3 is default constructible as well (see UPDATE note below). Assuming it does, then you have two choices, store objects of gVector3 directly in std::vector std::vector points; points.push_back(gVector(1, 2, 3)); // std::vector will make a copy of passed object or manage creation (and also destruction) of gVector3 objects manually. std::vector points; points.push_back(new gVector3(1, 2, 3)); //... When the points array is no longer needed, remember to talk through all elements and call delete operator on it. Now, it's your choice if you can manipulate gVector3 as objects (you can assume to think of them as values or value objects) because (if, see condition above) thanks to availability of copy constructor and assignment operator the following operations are possible: gVector3 v1(1, 2, 3); gVector3 v2; v2 = v1; // assignment gVector3 v3(v2); // copy construction or you may want or need to allocate objects of gVector3 in dynamic storage using new operator. Meaning, you may want or need to manage lifetime of those objects on your own. By the way, you may be also wondering When should I use references, and when should I use pointers? UPDATE: Here is explanation to the note on default constructibility . Thanks to Neil for pointing that it was initially unclear. As Neil correctly noticed, it is not required by C++ standard, however I pointed on this feature because it is an important and useful one. If type T is not default constructible, what is not required by the C++ standard, then user should be aware of potential problems which I try to illustrate below: #include struct T { int i; T(int i) : i(i) {} }; int main() { // Request vector of 10 elements std::vector v(10); // Compilation error about missing T::T() function/ctor }
