[site]: stackoverflow
[post_id]: 4437828
[parent_id]: 4437208
[tags]: 
You can do the "n'th element" algorithm conceptually in parallel on the two vectors quite easiely (at least the simple variant that's only linear in the average case). Pick a pivot. Partition (std::partition) both vectors by that pivot. You'll have the first vector partitioned by some element with rank i and the second by some element with rank j. I'm assuming descending order here. If i+j n, recurse on the left side for the n greatest elements. If you hit i+j==n, stop the recursion. You basically just need to make sure to partition both vectors by the same pivot in every step. Given a decent pivot selection, this algorithm is linear in the average case (and works in-place). See also: http://en.wikipedia.org/wiki/Selection_algorithm#Partition-based_general_selection_algorithm Edit: (hopefully) clarified the algorithm a bit.
