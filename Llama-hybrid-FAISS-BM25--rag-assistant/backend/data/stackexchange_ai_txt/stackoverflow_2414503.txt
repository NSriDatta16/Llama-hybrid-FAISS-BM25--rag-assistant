[site]: stackoverflow
[post_id]: 2414503
[parent_id]: 2414477
[tags]: 
The simplest way to do it would be this: const ItemSet* Library::musicByBand(const string& band) const { ItemSet* bandMusic = new ItemSet(); for (ItemSet::const_iterator i = allCDs.begin(); i != allCDs.end(); ++i) { if ((*i)->getBand() == band) { bandMusic->insert(*i); } } return itemSet; } Although this runs in O(n) time, which doesn't at all take advantage of the fact that you are using a set. These could just as well be in a vector. The way you were doing it before with the "index" sets is actually a faster-performing solution, although it will take somewhat more memory. Plus, presumably the retrieval methods will be called far more frequently than the insertion methods, so it makes sense to do more work on insertion in order to save on work during retrieval. But of course if you do this, you will want the index sets to be private members, not globals. You should also be very careful about your memory management here. The fact that you are returning a const pointer to an ItemSet from the musicByBand method concerns me. Why can it not be just an ItemSet that you are returning?
