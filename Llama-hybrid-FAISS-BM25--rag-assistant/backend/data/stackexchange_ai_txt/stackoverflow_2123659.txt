[site]: stackoverflow
[post_id]: 2123659
[parent_id]: 2123478
[tags]: 
Is it a requirement that these sensors connect directly to an application to upload their data? And this application is responsible for writing the data to the database? I would consider having the sensors write data to a message queue instead, and having your "write to DB" application be responsible for picking up new data from the queue and writing it to the database. This seems like a pretty classic example of "message producers" and "message consumers", i.e. the sensors and the application, respectively. This way, the sensors are not affected if your "write to DB" application has any downtime, or if it has any performance issues or slowdowns from the database, etc. This would also allow you to scale up the number of message consumers in the future without affecting the sensors at all. It might seem like this type of solution simply moves the possible point of failure from your consumer application to a message queue, but there are several options for making the queue fault-reliant - clustering, persistent message storage, etc. Apache MQ is a popular message queue system in the Java world.
