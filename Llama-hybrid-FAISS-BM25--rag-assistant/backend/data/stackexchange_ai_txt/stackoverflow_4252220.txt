[site]: stackoverflow
[post_id]: 4252220
[parent_id]: 4252150
[tags]: 
For starters, vertex[3] above should be vertex[2] as vertex[3] lies outside the upper bound of the array. However, that is not the crux of the issue here. The template instantiation of vector is being done with an array type. There is no default copy constructor, per se, for array types that will perform any copy deeper than the simple pointer copy. You may find that this works better if instead you try: std::vector vertices; M3DVector3f* v = new M3DVector3f; sscanf_s(line.c_str(), "%*s %f %f %f", &((*v)[0]), &((*v)[1]), &((*v)[2])); vertices.push_back(v); There may be another, more elegant solution utilizing smart pointers to clean up each entry in the vector when you go to destroy it later. :-)
