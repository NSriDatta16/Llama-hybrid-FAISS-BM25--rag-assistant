[site]: stackoverflow
[post_id]: 3382152
[parent_id]: 3382103
[tags]: 
Edit: I missed that it's a contiguous range. That being the case, all the answers which talk about sorting an array are wrong (including your idea stated in the question that it's like a radix sort), and True Soft's answer is right. just like Radix Sort but just that the digits are sorted in reversed order Well spotted :-) If you actually do it that way, funnily enough, it's called an MSD radix sort. http://en.wikipedia.org/wiki/Radix_sort#Most_significant_digit_radix_sorts You can implement one very simply, or with a lot of high technology and fanfare. In most programming languages, your particular example faces a slight difficulty. Extracting decimal digits from the natural storage format of an integer, isn't an especially fast operation. You can ignore this and see how long it ends up taking (recommended), or you can add yet more fanfare by converting all the numbers to decimal strings before sorting. Of course you don't have to implement it as a radix sort: you could use a comparison sort algorithm with an appropriate comparator. For example in C, the following is suitable for use with qsort (unless I've messed it up): int lex_compare(void *a, void *b) { char a_str[12]; // assuming 32bit int char b_str[12]; sprintf(a_str, "%d", *(int*)a); sprintf(b_str, "%d", *(int*)b); return strcmp(a_str,b_str); } Not terribly efficient, since it does a lot of repeated work, but straightforward.
