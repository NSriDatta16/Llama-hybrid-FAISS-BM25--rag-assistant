[site]: stackoverflow
[post_id]: 1789912
[parent_id]: 1789797
[tags]: 
There will be minimal difference in overhead (the static will be allocated once vs allocation on instance basis) especially given that the state consists of a single int. Generally I would rarely go for static classes as they make unit testing difficult. There is little overhead in making classes instance based rather than static (an allocation, zero'ing out memory and calling the constructor - which are all v quick operation) and due to the inability to mock out statics I see little benefit. Amongst other things static class can also dramatically increase coupling; a static class can be referenced from anywhere as long as the assembly reference is referenced. When it comes to refactoring this can lead to problems (e.g anything the staitc references internally is dragged into the dependency graph etc.).
