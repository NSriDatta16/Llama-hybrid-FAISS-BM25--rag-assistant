[site]: stackoverflow
[post_id]: 3856377
[parent_id]: 3856250
[tags]: 
I don't think so, but it's not a very helpful error message. See the Sequence Iteration Expressions section of the spec for the details on how for ... in ... do ... expressions are evaluated. If the type implements IEnumerable , the pattern just works as expected. Otherwise, the compiler looks for a public (the spec says "accessible") GetEnumerator method with the right signature and calls that. Because F# interface implementations are explicit, the GetEnumerator method isn't available without upcasting your Foo type to IEnumerable . If you perform the upcast, your code again works as expected: for x in (xs :> Collections.IEnumerable) do () // fine
