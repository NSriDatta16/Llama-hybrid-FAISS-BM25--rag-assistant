[site]: stackoverflow
[post_id]: 5102470
[parent_id]: 5090072
[tags]: 
I will answer your question somehow backwards :) Why to use singleton class . First thing to note is that singleton class is perhaps the most missused design pattern in software development. But it has it's advantages and in your case I think it is usable. If your application uses the config file extensively it's usually good idea to make it Singleton. It would be pain to pass config file object everywhere. This is also answer to anybody who argues with "loose coupling" or TDD. Because if your application is logically coupled with config file you just have to use it and test it with config file. On top of that your Singleton can return different (mock) instances for tests which gives you nice encapsulation. Why we can't have Opening and closing of the config file whenever it is required. Well you can with singleton. Singleton pattern imposes restrictions to OO design (1 instance of object). It just means that programmer is able to call anywhere in the code something like: ConfigSingleton.Instance.GetDefaultFontColor(); The inner workings of this object are totally encapsulated. If you like you can open the file each time programmer calls GetDefaultFontColor. Or you can reread config file on some kind of event (file change) and store it in your memory. To rephrase last paragraph: "the fact that you are using singleton pattern doesn't say anything about how and when you: open, read, close, write into your config file.
