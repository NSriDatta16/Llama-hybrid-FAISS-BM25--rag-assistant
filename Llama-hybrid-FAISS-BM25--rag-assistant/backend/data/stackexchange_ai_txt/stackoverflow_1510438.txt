[site]: stackoverflow
[post_id]: 1510438
[parent_id]: 
[tags]: 
NHibernate and Large Collections

As a way to learn NHibernate, I came up with a small project that includes a typical users & groups authentication system. It got me thinking about how this would be done. I quickly put together the following classes and mapped them to the database, which worked after a lot of trial and error. I ended up with a three-table database schema with a many to many association table between the User and Group tables. public class User { public virtual string Username { get; set; } public virtual byte[] PasswordHash { get; set; } public virtual IList Groups { get; set; } } public class Group { public virtual string Name { get; set; } public virtual IList Users { get; set; } } My question is regarding the scaleability and potential performance of this sort of class design. If this was in a production system with tens of thousands of users, even with lazy-loading on a Group's Users collection, any call to the Groups property could set off a potentially HUGE data retrieval. How would NHibernate cope with such a scenario and how might I improve upon my design?
