[site]: stackoverflow
[post_id]: 4459685
[parent_id]: 
[tags]: 
Functionality of fork()

System information: I am running 64bit Ubuntu 10.10 on a 2 month old laptop. Hi everyone, I've got a question about the fork() function in C. From the resources I'm using (Stevens/Rago, YoLinux, and Opengroup) it is my understanding that when you fork a process, both the parent and child continue execution from the next command. Since fork() returns 0 to the child, and the process id of the child to the parent, you can diverge their behavior with two if statements, one if(pid == 0) for the child and if(pid > 0) , assuming you forked with pid = fork() . Now, I am having the weirdest thing occur. At the beginning of my main function, I am printing to stdout a couple of command line arguments that have been assigned to variables. This is this first non assignment statement in the entire program, yet, it would seem that every time I call fork later in the program, these print statements are executed. The goal of my program is to create a "process tree" with each process having two children, down to a depth of 3, thus creating 15 total children of the initial executable. Each process prints it's parent's process ID and its process ID before and after the fork. My code is as follows and is properly commented, command line arguments should be "ofile 3 2 -p" (I haven't gotten to implementing -p/-c flags yet": #include #include #include int main (int argc, char *argv[]) { if(argc != 5)//checks for correct amount of arguments { return 0; } FILE * ofile;//file to write to pid_t pid = 1;//holds child process id int depth = atoi(argv[2]);//depth of the process tree int arity = atoi(argv[3]);//number of children each process should have printf("%d%d", depth, arity); ofile = fopen(argv[1], "w+");//opens specified file for writing int a = 0;//counter for arity int d = 0;//counter for depth while(a 0)//executes for parent process { waitpid(pid, NULL, 0);//waits on child to execute to print status fprintf(ofile, "after fork (parent):parent's pid: %d, current pid: %d\n", getppid(), getpid());//prints parent's id and self id to buffer } a++;//increments arity counter } fclose(ofile); } When I run gcc main.c -o ptree then ptree ofile 3 2 -p , the console is spammed with "32" repeating seemingly infinitely, and the file ofile is of seemingly proper format, but far far too large for what I think my program should be doing. Any help would be greatly appreciated.
