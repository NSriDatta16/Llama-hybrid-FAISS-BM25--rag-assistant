[site]: stackoverflow
[post_id]: 4682526
[parent_id]: 4682263
[tags]: 
First off, don't immediately assume that a program which is hard to follow is "well-architected from an OO standpoint". The purpose of OOA&D is nothing more or less than to make code easier to understand, extend and refactor, by avoiding "spaghetti code" (code with large disorganized files containing lots of jumps; pretty much the only way it could be done in older languages). However, you can, with overzealous use of design patterns, architect other programming pastas: "lasagna code" (so many layers of abstraction it's difficult to dig down to the actual code you want to inspect) or "ravioli code" (code is broken up into so many bite-size chunks that you're constantly moving from file to file to trace the execution of a single simple algorithm). Anyway, for .NET projects, VS has some tools to generate class diagrams. Office Visio Professional can also integrate with Visual Studio and extends this functionality, allowing some "back and forth" between changing diagrams and changing actual code. Similarly, it can plug into MSS and give you schema diagrams. But, there's really no tool better than hands-on experience. Even the most well-designed code will have some idiosyncrasies that require you to know the codebase in order to zero in on the object with the problem (or the relationship between objects, etc). I have not yet met an employer who didn't expect it to take at least a month for a new hire to familiarize himself with enough of the current architecture to begin to be productive. From a contracting perspective, that expectation may be less lenient, but it's simply unreasonable to expect someone to dive into a massive codebase with little or no external documentation and start swimming like an Olympic sprinter.
