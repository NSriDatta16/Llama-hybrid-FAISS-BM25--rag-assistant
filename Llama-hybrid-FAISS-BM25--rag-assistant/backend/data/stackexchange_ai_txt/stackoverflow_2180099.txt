[site]: stackoverflow
[post_id]: 2180099
[parent_id]: 2180088
[tags]: 
You can use String#split() for this. String string = "[(1, 2), (2, 3), (3, 4)]"; string = string.substring(1, string.length() - 1); // Get rid of braces. String[] parts = string.split("(? The (? positive lookbehind means that it must be preceded by ) . The (?=\\() positive lookahead means that it must be suceeded by ( . The (,\\s*) means that it must be splitted on the , and any space after that. The \\ are here just to escape regex-specific chars. That said, the particular String is recognizeable as outcome of List#toString() . Are you sure you're doing things the right way? ;) Update as per the comments, you can indeed also do the other way round and get rid of non-digits: String string = "[(1, 2), (2, 3), (3, 4)]"; String[] parts = string.split("\\D."); for (int i = 1; i Here the \\D means that it must be splitted on any non -digit (the \\d stands for digit). The . after means that it should eliminate any blank matches after the digits. I must however admit that I'm not sure how to eliminate blank matches before the digits. I'm not a trained regex guru yet. Hey, Bart K, can you do it better? After all, it's ultimately better to use a parser for this. See Huberts answer on this topic .
