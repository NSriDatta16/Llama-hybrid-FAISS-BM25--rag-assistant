[site]: crossvalidated
[post_id]: 114713
[parent_id]: 114692
[tags]: 
Whenever I have a complicated model to fit, I usually just fit it directly in rstan because it's great at fitting highly constrained coefficients, and because it's easy to include penalties and transformations of variables. This is true even when I'm not explicitly fitting a Bayesian model. This is what I've worked up for your particular problem. library(rstan) set.seed(1880) N TRUE A N; int K; vector [N] wgt; matrix[N,K] A; vector[N] b; vector[K] d; real limit; // s.t. d*x c; // this is the largest possible value of x%*%d. simplex[K] sim_x; real tau; } transformed parameters { vector[K] x; vector[N] b_hat; vector[N] Sigma; x I realized that I was being dense and that we can enforce the inequality by sampling a value as large as the maximum permissible dot product result and then transforming appropriately. mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat x[1] 1.99 0 0.01 1.98 1.98 1.99 1.99 2.00 1645 1.00 x[2] 0.99 0 0.01 0.97 0.98 0.99 0.99 1.00 624 1.00 x[3] 3.00 0 0.01 2.98 2.99 3.00 3.01 3.02 945 1.00 tau 4.82 0 0.09 4.62 4.76 4.82 4.88 5.00 558 1.01 These results look fine to me.
