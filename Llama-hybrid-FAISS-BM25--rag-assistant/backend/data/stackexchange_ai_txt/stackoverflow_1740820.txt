[site]: stackoverflow
[post_id]: 1740820
[parent_id]: 1740796
[tags]: 
Why not put a date and price on the product, so that you can drop the price from the dailysales table, since you can get it by joining. Unless the price can be changed by the salesman, without any rationale in the database. On a given date, can a salesman only be in one outlet? If so then you can drop the outletid. You have PriceiD, SalesPrice and Discount. If I know the discount and outlet id and original price then I can determine taxes and so calculate the SalesPrice, so you can possibly drop that. But, this would imply that you are storing tax info by date, to track what it was when the sale took place. My point is that you should look at what already exists in another table and you can then simplify the daily sales table. You will want to pull information from it into staging tables by day/month/year, for example, to help aggregate the data by date, so that your reports will be generated more quickly. You have a lot of unknowns in your question, but hopefully this will help. Update: Based on comment I had a table that contained usage info on when resources were used by someone, and that table got large quickly. So, we decided that we would only keep 2 or 3 years of data, and the rest would be aggregated, and the raw data dumped to a file for archival purposes. When looking at the number of rows, you will need to decide how much data you need to keep, and how you can archive the old data, to make it available if it is absolutely needed, but, you can generate the reports that should be needed beforehand. By reducing the number of columns you will have a large impact on storage space, in case that is a concern, as many of the columns will probably not be null.
