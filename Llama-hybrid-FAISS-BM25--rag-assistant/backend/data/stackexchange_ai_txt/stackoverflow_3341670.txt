[site]: stackoverflow
[post_id]: 3341670
[parent_id]: 3341636
[tags]: 
I see the following options: make both A and B implement a common Observable base class (and pass them as parameters to update() - the problem is, you need to downcast in update() to detect whether the parameter is of A or B, which makes the solution fragile add some sort of type flag parameter to update() - this is fairly similar to the previous one, only less object oriented templatize the Observer / Observable implementation - I haven't worked this out fully in my head (and I don't have a C++ IDE to verify it), but I believe this way you can have two overloads of update() with different (A and B) type parameters, thus the handling is separated and straightforward, so this would be my preferred option
