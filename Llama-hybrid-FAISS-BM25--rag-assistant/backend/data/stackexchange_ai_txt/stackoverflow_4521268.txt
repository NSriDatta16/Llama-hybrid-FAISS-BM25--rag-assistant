[site]: stackoverflow
[post_id]: 4521268
[parent_id]: 
[tags]: 
Rails Nested Form with Ajax

I have an interesting problem involving an object creation step in my Rails 3 music application. I have two models (not the actual models; but for simplicity): Playlist Song Playlist has_many Songs; Song belongs_to Playlist. Each Playlist object must have an exact number of Songs. Each Song must belong to a Playlist. Given this, I want to create a process for creating a Playlist that also involves creating all of the necessary Songs at the same time. Another thing is that to get Song data, the user enters a query (which I will not be saving in the Song model), which I then gather data from an API with. This is the data that should be used to make the Song object. Therefore, I can't (don't think?) use a traditional form_for. Instead, I'm using a remote form_tag. This form asks for a query and then uses an Ajax request to fetch the data, which is put into a temporary Song object and then displayed inline on the Playlist creation page using a Song view. This form is reused for all the necessary Song objects for the Playlist. So, the idea is that when the user has entered the required number of queries (i.e. added the required number of songs to the playlist), they are presented with a new button that enables them to submit the playlist info and continue in the process. The Playlist will then be created with all the Song objects that were created via Ajax as children. In reality, I can't figure out a way for this to work in an elegant way. Although I create the Song objects via Ajax, they aren't saved anywhere and they aren't aware of which Playlist they're supposed to be added into (because the Playlist object doesn't exist in the database yet either.) Therefore, when I go to the next step, I'm left without all the Song data. I looked into using nested forms with accepts_nested_attributes_for, but I can't figure out a way to use it with my setup (a non-model-based form using Ajax.) So, I'm stuck. If anyone can help, it would be very much appreciated.
