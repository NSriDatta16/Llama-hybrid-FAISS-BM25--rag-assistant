[site]: stackoverflow
[post_id]: 2427234
[parent_id]: 2426620
[tags]: 
This will give you averages for all of your data: select ENTITY_ID, year(SCORE_DATE) as Year, month(SCORE_DATE) as Month, avg(SCORE) as Avg from MyTable group by ENTITY_ID, year(SCORE_DATE), month(SCORE_DATE) To restrict to a given month, e.g., last February, you can do: select ENTITY_ID, year(SCORE_DATE) as Year, month(SCORE_DATE) as Month, avg(SCORE) as Avg from MyTable where year(SCORE_DATE) = 2010 and month(SCORE_DATE) = 2 group by ENTITY_ID, year(SCORE_DATE), month(SCORE_DATE) This version would actually perform better, but the parameters are a little less friendly to deal with: select ENTITY_ID, year(SCORE_DATE) as Year, month(SCORE_DATE) as Month, avg(SCORE) as Avg from MyTable where SCORE_DATE >= '2/1/2010' and SCORE_DATE If you want a query that always returns last month's data, you can do this: select ENTITY_ID, year(SCORE_DATE) as Year, month(SCORE_DATE) as Month, avg(SCORE) as Avg from MyTable where year(SCORE_DATE) = year(dateadd(month, -1, getdate())) and month(dateadd(month, -1, getdate())) = 2 group by ENTITY_ID, year(SCORE_DATE), month(SCORE_DATE) A better-performing version: select ENTITY_ID, year(SCORE_DATE) as Year, month(SCORE_DATE) as Month, avg(SCORE) as Avg from MyTable where SCORE_DATE >= dateadd(month, ((year(getdate()) - 1900) * 12) + month(getdate())-2, 0) and SCORE_DATE
