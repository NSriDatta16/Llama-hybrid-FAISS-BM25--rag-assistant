[site]: stackoverflow
[post_id]: 1312368
[parent_id]: 
[tags]: 
Software Environment Documentation Checklist

I work for a insurance company. We have our own development department made-up of almost 150 people plus some providers (outsourcing and custom made apps pretty much). In our company my team have made what we call non-functional logic libraries. That is, software libraries to handle things that are horizontal to all the development teams in our department, e.g. Security, Webservices, Logging, Messaging and so on. Most or these tools are either made from scratch or adaptation of a de-facto standard. For example our logger is an appender based on Log4J that also saves the logging messages into a DB. We also define what libraries to use in the application, for example which framework for webservices to use. We use pretty much JavaEE and Oracle AS in all our organization (with some Websphere Application servers). Much of these projects have their architecture documented (use cases, UML diagrams, etc) and generally the generated documentation are available. Now what we have seen is that for users sometimes is difficult to use the the libraries we provide and the are constantly asking question or they simply don't use them. So we are planning to generate a more friendly documentation for them, so my question is: What are the best practices or the checklist that software documentation should have? Something comes to my mind: API Reference guide Quick start Tutorial API Generated Documentation. Must be searchable Web Access What else should it have? Also, based in your experience what is the best way to maintain (keep it up-to-date) and publish this type of documentation?
