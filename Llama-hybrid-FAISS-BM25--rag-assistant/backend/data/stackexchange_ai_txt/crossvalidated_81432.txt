[site]: crossvalidated
[post_id]: 81432
[parent_id]: 81415
[tags]: 
There's no fixed rule. It is a function of the noise in the time-series. I would show at least until no data-point crosses a confidence interval or $\frac{n}{10}$, whichever comes first. Shown below are realizations of seasonal trend at lag of 7, with white noise $\sim\mathbb N(0,0.1)$ and $\sim\mathbb N(0,0.3)$. The confidence intervals were calculated by $\frac{\text{PPF}(0.99)}{\sqrt{n}}$ assuming the noise is distributed normally. EDIT: Here's another plot of lag, with more of the ACF and PACF shown: Here's another plot with a higher period. The code used for the figures: import numpy as np from scipy import stats from matplotlib import pyplot as plt from statsmodels import api as sm def main(): prototype = np.random.random(60) for _ in xrange(560 / 60): prototype = np.concatenate((prototype, np.random.normal(0, 0.1, 60) + prototype[:60])) prototype = prototype[60:] n = prototype.shape[0] pa = sm.tsa.pacf(prototype, 100) acf = sm.tsa.acf(prototype, nlags=100) plt.figure() plt.subplot(4, 1, 1) plt.plot(prototype) plt.title("Time Series with a Lag of 60, White Noise of .1") plt.subplot(4, 1, 2) plt.plot(prototype.reshape(-1, 60).T) plt.title("Overlapping Windows") plt.subplot(4, 1, 3) plt.plot(acf) z = stats.norm.ppf(0.99) c = '#660099' plt.axhline(y=z / np.sqrt(n), linestyle='--', color=c) plt.axhline(y=-z / np.sqrt(n), linestyle='--', color=c) plt.title("ACF") plt.subplot(4, 1, 4) plt.plot(pa) plt.axhline(y=z / np.sqrt(n), linestyle='--', color=c) plt.axhline(y=-z / np.sqrt(n), linestyle='--', color=c) plt.title("PACF") plt.show() if __name__ == '__main__': main()
