[site]: stackoverflow
[post_id]: 1957311
[parent_id]: 1957212
[tags]: 
Vocabulary I don't expect to be able to simulate any of the devices which the board in question is talking to and so will probably have to test them on actual hardware itself. Then, you are stepping out of unit testing. Maybe you could use one of these expressions instead? Automated testing : testing happen without user input (the contrary of Manual Testing). Integration testing : testing several components together (the contrary of Unit testing). On a bigger scale, if you test a whole system and not just a few components together, it is called System testing. ADDED after comments and updates in the question : Component testing : like integration testing or System testing, but on an even smaller scale. Note : All three Component-Integration-System Testings share the same set of problems, on different scales. On the contrary, Unit Testing does not (see lower). Advantages of "real" Unit Testing With Integration- (or System- or Component-) Testing, it is certainly interesting to get some feedback, like test coverage. It is certainly useful to do. But it is very hard (read "very costly") to make progress beyond some point, so I suggest you use complementary approaches, like adding some real Unit Tests . Why? : It is very hard to simulate the edge or error conditions . (Examples : the computer clock crosses a day or year during a transaction ; the network cable is unplugged ; power went down then up on some component, or the whole system ; the disk is full). Using Unit Testing, because you simulate these conditions rather than try to reproduce them, it is much easier. Unit Testing is your only chance to get a really good code coverage. Integration testing takes time (because of access to external resources). You could execute thousands of unit test during the execution of one Integration Test. So testing many combinations are only possible with Unit Tests... Requiring access to specific resources (hardware, Licence etc...), Integration Testing is often limited in time or scale . If the resources are shared by other projects, each project might use them only during a few hours per day. Even with exclusive access, maybe only one machine can use it, so you can't run tests in parallel. Or, your company may buy a resource (Licence or Hardware) for production, but not have it (or early enough) for development...
