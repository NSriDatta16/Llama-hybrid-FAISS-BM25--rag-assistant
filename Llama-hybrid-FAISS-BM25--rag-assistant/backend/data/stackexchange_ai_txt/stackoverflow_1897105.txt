[site]: stackoverflow
[post_id]: 1897105
[parent_id]: 1890238
[tags]: 
As others have pointed out, though, you need to be very careful with endianess (especially with the length field) when sending across platforms. You also need to be careful with structure packing and alignment, I believe. I would create the following structure and cast it as a char * in sendto/recvfrom. You weren't specific about the field types, so I assumed unsigned char. //assume the following structure on both the server and client #pragma pack(1) //windows only typedef struct _data{ unsigned char Ver; unsigned char p; unsigned char fff; unsigned short length; unsigned short checksum; unsigned long Customer_id; unsigned long Amount; unsigned char other[1485]; //1500 (normal MTU)-15 used } data; //on the server data data_to_send; data_to_send.length=sizeof(data); data_to_send.Ver=1; data_to_send.p=1; //[...] fill in other data_to_send fields here data_to_send.length += 64; //just an example of using 64 bytes in "other" data_to_send.checksum=calcChecksum(data_to_rx,data_to_rx.length); sendto(socket, (char *) &data_to_send, data_to_send.length, ...); //on the client data data_to_rx; unsigned short checksum; n=recvfrom(socket,(char *)&data_to_rx,sizeof(data),...); //validate the incoming data_to_rx fields if(data_to_rx.Ver!=1) //drop it checksum=calcChecksum(data_to_rx,data_to_rx.length); if(checksum!=data_to_rx.checksum) //drop it [...]
