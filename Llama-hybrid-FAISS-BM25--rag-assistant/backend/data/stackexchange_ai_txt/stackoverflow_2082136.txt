[site]: stackoverflow
[post_id]: 2082136
[parent_id]: 2080892
[tags]: 
Since you don't have control over the DLL you have to assume that the DLL expects an actual file. It probably at some point makes that assumption which is why named pipes are failing on you. The simplest solution is to create a temporary file in the temp directory, write the data from your EXE to the temp file and then delete the temporary file. Is there a reason you are embedding this "pseudo-file" at the end of your EXE instead of just distributing it with our application? You are obviously already distributing this third party DLL with your application so one more file doesn't seem like it is going to hurt you? Another question, will this data be changing? That is are you expecting to write back data this "pseudo-file" in your EXE? I don't think that will work well. Standard users may not have write access to the EXE and that would probably drive anti-virus nuts. And no CreateFileMapping and GetMappedFileName definitely won't work since they don't give you a file name that can be passed to CreateFile. If you could somehow get this DLL to accept a HANDLE then that would work. And I wouldn't even bother with API interception. Just hand the DLL a path to an acutal file.
