[site]: stackoverflow
[post_id]: 912211
[parent_id]: 909536
[tags]: 
The whole problem with OO apps slowing down is simply that object can spiral out of control more easily than structured programming styles. Once upon a time, before method call optimisations were improved, this could make a difference, especially when indirect (ie virtual) calls were made. If your objects are used a lot, and you have some lower level objects that you call often, then you might perhaps get a performance hit from using them - but I'm talking about millions of calls (I've seen some horrible code in my time, both unstructured, structured and OO!). You will also get more of a performance hit if you allocate and delete lots (LOTS) of objects continually. The only answer really though, is to take a look. If you have an object that gets allocated, deleted in rapid succession, then optimise it away (even if it looks less elegant), if you have an object that you call its methods thousands of times, then optimise that away too. (but once you've done this measuring, you'll have measured its performance and you'll be refining the slow bits!) There's a trade off between 'elegant' code and code that works simply and quickly, don't go to either extreme and you should be fine.
