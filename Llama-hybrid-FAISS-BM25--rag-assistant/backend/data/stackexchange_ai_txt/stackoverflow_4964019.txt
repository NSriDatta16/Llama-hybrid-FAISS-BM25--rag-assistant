[site]: stackoverflow
[post_id]: 4964019
[parent_id]: 4963747
[tags]: 
I've done quite a few projects like this and found that: creating a (complete) custom solution is hard and expensive. Luckily you found Squid/Varnish, memcache and ehcache The dynamic behaviour of sites differ a lot and you know your site best, so it makes sense to devise a specific caching strategy it makes sense to deploy multiple layers of cache. However, this will complicate the behavior of your site, so you should tell everybody involved with the site (e.g. business) something about it and tell your engineers a lot about it. Think of how you're going to debug problems. e.g. add headers that indicate the freshness of the data served, allow certain people to purge or avoid the cache Regularly check how the different cache layers perform (e.g. use nagios plugins for your varnish machines). Measure where your performance problems are before you build any caches :) caching certain objects for just a short while can already be a very significant improvement These days I like Varnish a lot: it's a separate layer that doesn't clutter the Java/PHP code, it's fast and very flexible. Downside is that the configuration in vcl is a bit too complex. I typically use ehcache + in memory storage to avoid latency (e.g. database queries or service requests) with small data sets, and memcached when there's a lot of data and the cache needs to shared by multiple nodes.
