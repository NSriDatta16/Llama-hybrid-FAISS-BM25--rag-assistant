[site]: stackoverflow
[post_id]: 4264614
[parent_id]: 
[tags]: 
C++ Object - Private int Returns Strange Values

I've been teaching myself C++ and started creating a list organizer to work on the concept of pointers. I've defined a class called List which has three properties: int itemTotal; Item* firstItem; Item* lastItem; The constructor sets their values as: itemTotal = 0; firstItem = NULL; lastItem = NULL; I've built a function to return the value of itemTotal: int List::getItemTotal() { return itemTotal; } Immediately after building the object in my driver, itemTotal starts acting funny and returning really large numbers (-858993460 every time), even though no work has been done on the List and literally nothing has happened in the program. I added a cout to the constructor, just to see what was going on there, and it echos out the 0 value, but once that constructor is done the value immediately changes. I've been trying to work it out with my books and play around with it, but I can't seem to resolve the issue, so I figured I'd turn to someone with more experience. Main is below: int main() { List grocery; cout With output looking like: grocery List is built! itemTotal inside of the constructor is 0! itemTotal is now: -858993460 Any ideas? =/ EDIT: Per request, the entire class (sorry formatting is ugly, I don't want to re-do it all): class List { public: // Constructor // Purpose: Builds object. // Returns: Nothing. // Pre-Conditions: None. // Post-Conditions: Initializes null. List(); // push_back function // Purpose: Adds Item to end of List. // Returns: None. // Pre-Conditions: Must pass a declared Item object. // Post-Conditions: None. void push_back(Node*); // push_front function // Purpose: Adds Item to beginning of List. // Returns: None. // Pre-Conditions: Must pass a declared Item object. // Post-Conditions: None. void push_front(Node*); // pop_back function // Purpose: Removes last Item from List. Item is NOT deleted. // Returns: Pointer to removed Item. // Pre-Conditions: None. // Post-Conditions: None. Node* pop_back(); // pop_front function // Purpose: Removes first Item from List. Item is NOT deleted. // Returns: Pointer to removed Item. // Pre-Conditions: None. // Post-Conditions: None. Node* pop_front(); // getFirst function // Purpose: Returns pointer to first Item in List. // Returns: Pointer. // Pre-Conditions: List must have a Item object. // Post-Conditions: None. Node* getFirst(); // getItemTotal function // Purpose: Returns the itemTotal // Returns: Int // Pre-Conditions: None. // Post-Conditions: None. int getItemTotal(); private: Item* firstitem; Item* lastitem; int itemTotal; } and the constructor: List::List() { Item* firstNode = NULL; Item* lastNode = NULL; int itemTotal = 0; cout
