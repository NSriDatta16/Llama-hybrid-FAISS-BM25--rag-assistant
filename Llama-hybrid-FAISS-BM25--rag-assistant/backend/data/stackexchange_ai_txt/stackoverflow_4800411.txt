[site]: stackoverflow
[post_id]: 4800411
[parent_id]: 4800231
[tags]: 
Have you considered using map-reduce? See a live example of a functional approach. This particular example uses underscore.js so we can keep it on a elegant level without having to implement the details. function doStuff(inventory) { var max = settings.limitedStockThreshold; if (!(inventory && inventory.sizes)) return; var quantity = _(inventory.sizes).chain() .filter(function(value) { return value.combos; }) .map(function(value) { return _(value.combos).chain() .map(function(value) { return isBackorderable(value) ? max : value.quantityOnHand; }) .max().value(); }) .max().value(); return Math.min(quantity, max); } As for an explanation: We take the inventory.sizes set and remove any that don't contain combos. We then map each size to the maximum quantity of it's colour. We do this mapping each combo to either its quantity or the maximum quantity if backordable. We then take a max of that set. Finally we take a max of set of maxQuantities per size. We're still effectily doing a double for loop since we take two .max on the set but it doesn't look as dirty. There are also a couple of if checks that you had in place that are still there. [Edit] I'm pretty sure the above code can be optimized a lot more. but it's a different way of looking at it.
