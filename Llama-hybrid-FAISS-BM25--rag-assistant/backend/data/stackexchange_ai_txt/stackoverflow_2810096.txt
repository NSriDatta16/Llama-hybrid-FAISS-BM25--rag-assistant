[site]: stackoverflow
[post_id]: 2810096
[parent_id]: 2249533
[tags]: 
I think I would concentrate on the two sentences in the middle paragraph: Firstly, why are the saving and loading methods in the service class "really big"? Could you break them up? Perhaps there are smaller units in there which can be tested separately. That would, perhaps, point to cutting the service up into a number of sub-components that your service delegates most of its work to. You could hopefully avoid adding any more code to the UI layer going down that route, because the UI would still be able to interact with just the one service, but you could test all the components separately. Secondly, why is it so difficult to set up fake repositories in your test harness? Could you make that easier? I often use a builder to set up similar, but not identical, data structures for use by tests. You then end up with tests that read 'given the usual setup except for difference X , check that Y happens'. One other idea is to notice that data access code is often very repetitive and it is frequently possible to generate much of it automatically based on your database schema. We generate much of our basic data access layer, including fake implementations of repository classes for testing against. Of course we have to hand-code the performance-critical bits but it takes a lot of the drudgery out of it and makes it easy to handle changes to the schema.
