[site]: stackoverflow
[post_id]: 5153056
[parent_id]: 5096127
[tags]: 
I really think you should go with the third option. For scalability you would want to do this. With the first method you have a LOT of redundant data because if 1 is friends with 2, 2 is also friends with 1. But you are storing both relations. This also makes the 150 billion row count impossible. It is more likely that this will be at most half, because the relations table can work both ways!! So the first user will generate 300 rows in the table, but the second user (if he is friends with 1) will generate just 299. Continue to do so and the last user won't even generate a relation row, because they are all already present! Also when you want to start searching for certain relations the third option will be much faster since you'll have a int index in stead of a fulltext index which probably saves another 50% in both storage and processing speed. If your application will reach 500 million users you will just have to get a better hosting service.
