[site]: stackoverflow
[post_id]: 5642488
[parent_id]: 5641840
[tags]: 
When does a space for a variable get allocated on the stack? Your question presupposes that the storage for a variable is allocated on the stack. It need not be. You just said "int a;" without indicating whether that was a local variable or a field, and without indicating other important information, like whether the local variable is a closed-over local of an anonymous function, or whether the block is an iterator block. In many of those scenarios no stack space is consumed by the variable because the variable is not short-lived. Suppose for the sake of argument that the variable is a short-lived local variable. It still might not be on the stack. It might be enregistered, particularly if the jitter knows that it is on an architecture with lots of unused registers. Supposing for the sake of argument that the variable is a short lived local variable and that the jitter has not chosen to enregister it, when is the stack space allocated? Well, again, you are assuming that the jitter is using the stack as the temporary pool; though that is a convenient data structure, the jitter is allowed wide lattitude. The temporary pool could be allocated off of the heap, or there could be multiple stacks; some architectures support separating the data stack from the call stack in order to prevent stack-smashing attacks. Supposing that the variable is a short-lived local variable and the jitter has chosen to not enregister it and the temporary pool is on the call stack, when is the stack space for it allocated? Well now it depends on what you mean by "allocated". The entire million bytes of stack is reserved in the virtual memory system and committed aggressively, so the answer is "as soon as the thread is created, the stack space for everything that will ever go on the stack in this thread is allocated, and stays allocated." Of course it stays allocated in the page file . That stack isn't moved into hardware (RAM) until a page fault brings it in from the page file on disk. If what you mean to ask is "when is the stack pointer bumped so that there is stack space specifically available for this local variable" then the answer is usually "as soon as control enters the method". Doing so can of course trigger that page fault I just mentioned. I'm curious to know why you care. What difference does it make?
