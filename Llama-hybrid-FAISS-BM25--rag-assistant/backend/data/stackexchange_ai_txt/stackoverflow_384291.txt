[site]: stackoverflow
[post_id]: 384291
[parent_id]: 
[tags]: 
Code refactoring help - how to reorganize validations

We have a web application that takes user inputs or database lookups to form some operations against some physical resources. The design can be simply presented as following diagram: user input model object database storage validations are needed with request coming from user input but NOT when coming from database lookup hits (since if a record exists, those attributes must have already been validated before). I am trying to refactoring the code so that the validations happen in the object constructor instead of the old way (a separate few validation routines) How would you decide which way is better? (The fundamental difference of method 1 (the old way) and 2 is that validations in 1 are not mandatory and decoupled from object instantiation but 2 binds them and makes them mandatory for all requests) Here are two example code snippets for design 1 and 2: Method 1: # For processing single request. # Steps: 1. Validate all incoming data. 2. instantiate the object. ValidateAttribures(request) # raise Exceptions if failed resource = Resource(**request) Method 2: # Have to extract out this since it does not have anything to do with # the object. # raise Exceptions if some required params missing. # steps: 1. Check whether its a batching request. 2. instantiate the object. # (validations are performed inside the constructor) CheckIfBatchRequest(request) resource = Resource(**request) # raise Exceptions when validations failed In a batch request: Method 1: # steps: 1. validate each request and return error to the client if any found. # 2. perform the object instantiate and creation process. Exceptions are # captured. # 3. when all finished, email out any errors. for request in batch_requests: try: ValidateAttribute(request) except SomeException, e: return ErrorPage(e) errors = [] for request in batch_requests: try: CreatResource(Resource(**request), request) except CreationError, e: errors.append('failed to create with error: %s', e) email(errors) Method 2: # steps: 1. validate batch job related data from the request. # 2. If success, create objects for each request and do the validations. # 3. If exception, return error found, otherwise, # return a list of pairs with (object, request) # 4. Do the creation process and email out any errors if encountered. CheckIfBatchRequest(request) request_objects = [] for request in batch_requests: try: resource = Resource(**request) except SomeException, e: return ErrorPage(e) request_objects.append((resource, request)) email(CreateResource(request_objects)) # the CreateResource will also need to be refactored. Pros and Cons as I can see here are: Method 1 follows more close to the business logic. No redundant validations check when objects come from db lookup. The validation routines are better maintainable and read. Method 2 makes easy and clean for the caller. Validations are mandatory even if from db lookup. Validations are less maintainable and read.
