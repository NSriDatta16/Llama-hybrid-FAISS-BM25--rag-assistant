[site]: stackoverflow
[post_id]: 476282
[parent_id]: 476250
[tags]: 
I believe your first two points are not valid. Creating test data may be a challenge (in fact, it's usually a major part of writing unit tests), but that's simply something you have to accept, not a reason to give up on unit tests. And it can't be impossible, otherwise how would you ever know your app is working correctly? Unit tests run the code in order to verify its correctness - I don't see the problem. There certainly are aspects of an application that cannot be unit-tested - visual layout (screen or print) is one such aspect, as is usability in general - things that cannot really be formally specified. A situation where unit testing may not be applicable is when you're faced with an existing application that was not developed with testability or even modularity in mind ( Big Ball of Mud Anti-pattern). But even then, if you know you'll have to maintain and extend this beast for a significant length of time, it is nearly always possible and useful to find a way to automatically test at least some parts of the application. Nobody says you have to write a test suite that achieves 100% code coverage before doing anything else.
