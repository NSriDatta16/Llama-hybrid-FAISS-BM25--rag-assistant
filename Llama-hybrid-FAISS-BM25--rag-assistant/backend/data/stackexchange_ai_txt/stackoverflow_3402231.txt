[site]: stackoverflow
[post_id]: 3402231
[parent_id]: 3402177
[tags]: 
For this kind of refactoring the compiler should guide you. Take everything you want into a separate class and compile. It will tell you where you need to use the new class in both production code and tests. Refactor everything until it compiles and retest. The proper proper way of doing that is moving methods/properties one by one, it just depends on how comfortable you are with the process. EDIT You only need to create enough tests to cover you code. For the sake of organisation you should move the tests that were in the main test class into a separate class, but that's about it. If the process of refactoring requires you write more code(e.g. a method that creates an instance of the new class), you should write tests for that as well. Say you start off with a class and a test class: OneBigClass -Method1 -Method2 -Method3 OneBigClassTest -Method1ShouldDoSomething -Method2ShouldDoSomething -Method3ShouldDoSomething After refactoring this is what your classes should look like: OneBigClass -Method1 -Method2 SmallerClass -Method3 OneBigClassTest -Method1ShouldDoSomething -Method2ShouldDoSomething SmallerClassTest -Method3ShouldDoSomething
