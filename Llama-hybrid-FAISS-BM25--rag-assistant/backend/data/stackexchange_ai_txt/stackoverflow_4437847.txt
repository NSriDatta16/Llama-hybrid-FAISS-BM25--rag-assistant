[site]: stackoverflow
[post_id]: 4437847
[parent_id]: 245584
[tags]: 
I wrote a memoize() function whose header is this (the code is a bit long for pasting here): auto memoize(TFunc)(TFunc func); What it does is, you give it a function's address, and it returns a strongly-typed delegate (same signature and return type as the original function) that caches the return values of the original function, so that calling it twice with the same parameter only calls the underlying function once. For instance, here is a memoized, "recursive" definition of the Fibonacci sequence that executes in linear, rather than exponential, time: uint fib(uint n) { return n > 0 ? n > 1 ? memoize(&fib)(n - 1) + memoize(&fib)(n - 2) : 1 : 0; } You can call it normally, as in: fib(1000); Edit: The previous code whose link I posted was rather hideous; this version is much more elegant .
