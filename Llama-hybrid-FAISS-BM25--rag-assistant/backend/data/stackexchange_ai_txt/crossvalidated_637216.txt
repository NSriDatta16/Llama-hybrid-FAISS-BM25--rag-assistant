[site]: crossvalidated
[post_id]: 637216
[parent_id]: 
[tags]: 
ESS with many short, parallel chains

I have a curious problem I would like to share and ask for references and advice about. I am working on a MCMC problem and I realized that I have big economies of scale when I am drawing many chains at the same time. That is, the cost per iteration of updating 100 chains 1 time is much lower than the cost of updating 1 chain 100 times. Moreover, I have some evidence that my chains have scant auto-correlation, if any. Knowing those to elements, I would like to go for the following strategy: instead of updating one chain a couple hundred times, I would like to update a hundred chains a couple times. Even if I have some confidence on the fact that I get a low auto-correlation in my samples, I would like to check for some measure of the quality of the integration. Effective sample size would be great. However, the usual formula using auto-correlation with infinite times is not applicable here, because it relies on one chain, with many iterations. I have it the other way around. My first call is to compute a pooled auto-correlation using all chains, and then plug it in the ESS formula. The mean $\mu$ of the interest parameter $x$ would be $$\hat \mu = \Sigma _{i=1}^{number ~chains}\Sigma _{j~=~burn~in}^{number ~iterations} x_i^j/((number ~iterations - burn~in)*(number~chains)) ,$$ x_i^j being here the $j^{th}$ iteration of the $i^{th}$ chain. Then, we get the auto-covariance $$\hat\sigma^2(\delta) = \Sigma _{i=1}^{number ~chains}\Sigma _{j~=~burn~in}^{number ~iterations ~-~ \delta} (x_i^j-\hat \mu)(x_i^{j+\delta}-\hat \mu)/((number ~iterations - burn~in)*(number~chains)),$$ $\delta$ being the lag. The pooled auto-correlation is then obtained as $$acf(\delta) = \hat\sigma^2(\delta)/\hat\sigma^2(0).$$ For now, I am just plugging that estimation of the auto-correlation into the ESS formula. I am not sure that I am right though, I think an ESS formula with a finite-dimension correlation matrix instead of an infinite acf would be better. Anyone with comments, insight, references ?
