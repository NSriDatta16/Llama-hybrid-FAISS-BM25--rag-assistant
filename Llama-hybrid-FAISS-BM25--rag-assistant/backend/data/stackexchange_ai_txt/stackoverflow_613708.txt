[site]: stackoverflow
[post_id]: 613708
[parent_id]: 613699
[tags]: 
If you were re-using the same string to return substrings, what would happen when the main string goes out of scope? In the best scenario, it would need to stay in memory and could not be collected until all substrings were also released, so you'll end-up using actually more memory. That's just one of the issues. In effect, the garbage collector would have few choices: keep the whole original string in memory, even through only a very short substring of it may be used. Release the parts of the original string that are not referenced and only keep the substring where it is. This would create a lot of fragmentation, meaning that the garbage collector would probably have to relocate the strings at some point: we'll end-up making a copy anyway. I'm sure it has its use cases and it could sometimes be more efficient when working on substrings (say when working on large XML documents). However, as Jon said, Java strings objects require more space, so if you have lots of small strings, they could actually use more memory than the way .Net does. It's a tradeoff. I think that if you're in a case where it really matter how memory is managed and you need to have a completely predictable behaviour, neither Java or .Net would be the best tools. We use Garbage collectors because they are optimised to work efficiently in the vast majority of cases. Knowing how they work is important, but whether they re-use strings or not is more of an optimisation left to the underlying framework and it should not leak too much to the surface. GCs are, after all, here to help us.
