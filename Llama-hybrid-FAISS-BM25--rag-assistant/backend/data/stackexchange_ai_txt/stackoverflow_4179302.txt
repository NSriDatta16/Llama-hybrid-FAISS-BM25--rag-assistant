[site]: stackoverflow
[post_id]: 4179302
[parent_id]: 4179241
[tags]: 
Not sure whether I understand what you're looking for..... To select a row from your table, use: var row = ctx.ABACUSs.FirstOrDefault(a => a.ID = 5); // or whatever Then, when you have that element, you can read its properties - the column a1 should be turned into a property a1 on that object: // check for != null just to be safe.... if(row != null) { var yourResult = row.a1; } Tables are always organized into rows and columns - you first need to select a row in Linq-to-SQL, turn that into an object, and then you can inspect / read the properties on that object (that correspond to the columns of your table). Since you get back objects (instances of objects) for each row in Linq-to-SQL, which have properties on them (that you read out by their name), there's no notion of "second attribute" like in a SqlDataReader . You cannot get "the second attribute of that row" - you need to know its name. Or what exactly are you trying to achieve???
