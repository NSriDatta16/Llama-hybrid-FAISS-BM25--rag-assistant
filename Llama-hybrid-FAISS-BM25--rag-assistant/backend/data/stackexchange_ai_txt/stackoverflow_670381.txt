[site]: stackoverflow
[post_id]: 670381
[parent_id]: 670331
[tags]: 
First off, one of the main points of object-oriented design is that objects bundle their data with the behavior that acts on that data (i.e., "animals know how to feed themselves"). So this is one of those "Doctor, it hurts when I do this! - So don't do that" situations. That said, I'm sure there's more to the story than you've described and that you have good reasons for not being able to do "proper" OOD. So you have a few options. You can have your FeedAnimal(Animal a) method use reflection to find the type of the animal. Basically you're doing your polymorphism in the FeedAnimal method. static void FeedAnimal(Animal a) { if (a is Dog) { Console.WriteLine("Fed a dog."); } else if (a is Monkey) { Console.WriteLine("Fed a monkey."); } else { Console.WriteLine("I don't know how to feed a " + a.GetType().Name + "."); } } A more object-oriented, but more complicated way of doing it would be to use the Visitor pattern suggested by others. This is more elegant to the experienced developer, but arguably less obvious and readable to more novice programmers. Which approach you prefer might depend on how many different Animal types you have.
