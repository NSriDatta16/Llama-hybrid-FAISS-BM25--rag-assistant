[site]: stackoverflow
[post_id]: 4435711
[parent_id]: 4435635
[tags]: 
You should create a temporary data structure that is an array of tuples. The tuples would be the row index and the average of that row index. Then sort this tuple array based on the average using the standard sort() function. Then, run through the sorted tuple array to recompute the sorted matrix. This would give you performance benefit of not copying the matrix rows during the swap done by the sort routine. If you only have 3 elements in your row, you may be okay with swap the whole row. But as you increase the number of columns the swapping would be become a bottleneck. In 'pseudo code' you may do something like this: function sort(input, numrows, numcols) { pair index[numrows]; for (int i=0 to numrows) { index[i].second = i; // compute average of row[i] in the input matrix index[i].first = average_of_row(&input[i]); } // STL sort will sort the pair based on the average (.first member) sort(index.begin(), index.end()); for (int i=0 to index.size()) { // copy rows from input matrix to output matrix copy_row(&input[index[i].second], &output_matrix[i]); } return output; }
