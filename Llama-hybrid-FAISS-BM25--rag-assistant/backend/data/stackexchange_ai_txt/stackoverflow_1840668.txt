[site]: stackoverflow
[post_id]: 1840668
[parent_id]: 1840618
[tags]: 
Use the "pick a random element from an infinite list" algorithm. Keep an index of your current pick, and also a count of how many true values you've seen. When you see a true value, increment the count and then replace your pick with the current index with a probability of P=(1/count). (So you always pick the first one you find... then you might switch to the second one, with probability 1/2, then you might switch to the third one with probabilty 1/3 etc.) This requires only one scan over the list and constant storage. (It does require you to work out a larger number of random numbers, however.) In particular, it doesn't ever require you to either buffer the list or go back to the start - so it can work on an unbounded input stream. See this answer for a sample LINQ implementation of the simple "pick a random element" algorithm; it would just need minor tweaks.
