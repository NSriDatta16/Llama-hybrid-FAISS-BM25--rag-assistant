[site]: stackoverflow
[post_id]: 5180666
[parent_id]: 5179857
[tags]: 
The browser back button must be functional (I'm using JSF 2.0, so this is working) After logout, if a user clicks the back button, the app must redirect him/her to the login page (not working, the user is able to view protected pages, although expired. I canÂ´t include the meta tags to disable browser caching because the back button stops working) Two steps to solve this problem. Disable browser cache by setting response headers accordingly. You can do this in a Filter which is mapped on the FacesServlet . HttpServletResponse hsr = (HttpServletResponse) response; hsr.setHeader("Cache-Control", "no-cache, no-store, must-revalidate"); // HTTP 1.1. hsr.setHeader("Pragma", "no-cache"); // HTTP 1.0. hsr.setDateHeader("Expires", 0); // Proxies. chain.doFilter(request, response); Do not use HTTP POST for page-to-page navigation. Always use HTTP GET for page-to-page navigation. If you need to submit a form, let it submit to self (i.e. let action method return null or void ) and use h:messages or h:somecomponent rendered="#{success}" to display results in the same page conditionally. If the user invokes an action, by clicking a button, on one of the expired pages it should redirect him/her to the login or error page (not working, the app throws an error and shows a blank page. My ExceptionHandlerWrapper implementation detects the exception and it is using a NavigationHandler to change the viewId and render the response ("facesException" mapping on faces-config that points to login.jsf), but the app is not behaving as expected) An on javax.faces.webapp.ViewExpiredException was been enough. See also this answer .
