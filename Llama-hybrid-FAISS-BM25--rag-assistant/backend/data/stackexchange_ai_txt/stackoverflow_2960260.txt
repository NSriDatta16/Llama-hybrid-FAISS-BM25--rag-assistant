[site]: stackoverflow
[post_id]: 2960260
[parent_id]: 2959661
[tags]: 
In computer science, in the context of data storage and transmission, serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file, a memory buffer, or transmitted across a network connection link to be "resurrected" later in the same or another computer environment. (see http://en.wikipedia.org/wiki/Serialization ) So serialized objects (in the context of ActiveRecord) are text/string representations of objects (encoded using YAML). When serialized, you can save (almost) any Ruby object in a single database field. You can use serialization if you have somewhat complex objects that you need to save in a database and you don't need to retrieve records based on the contents of a serialized attribute. I used them for example for storing preferences for users of a webapp: the preferences were basically hashes that I wanted to save in a single db field. 3./4./5. Use ActiveRecord::Base.serialize as Marc-AndrÃ© Lafortune suggested: class User true, :use_extended_menu => false, ...} u.save # ... u = User.find(23) u.preferences # => {:show_tooltips => true, :use_extended_menu => false, ...}
