[site]: stackoverflow
[post_id]: 4414260
[parent_id]: 1726847
[tags]: 
My general rule of thumb is to NEVER use string literals. I think there are many benefits to not using string literals, a couple of which were already mentioned by Benjamin Cox. Centralization : If all your string literals are replaced by static string constants (ideally all grouped together in one place, perhaps at the file level), then you know exactly where to find all your string references. Plus some compilers offer convenient functions like "Jump to Definition" to access them faster. Maintainability : As a result of 1, it's easy to see that, should the need arise, you can change string references in one place and have those changed immediately reflected throughout your code. Efficiency : Memory is only allocated once for each unique string reference you create, so you aren't constantly allocating new strings into memory like you do when you use the same string literal all over the place. (Some languages, like Ruby, can automatically handle this case by encouraging the use of symbols instead of strings.) Readability : Especially if your string literals are a little cryptic, it's easier to read an appropriately named static variable: kCapturedImageDirectoryFormat as opposed to "capture-%.0f.tmp"
