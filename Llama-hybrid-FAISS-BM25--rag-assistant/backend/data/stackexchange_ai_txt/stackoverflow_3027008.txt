[site]: stackoverflow
[post_id]: 3027008
[parent_id]: 902375
[tags]: 
If you can use a state machine, then I'd recommend an open source project called StateLess by Nicholas Blumhardt (Autofaq creator) . His approach avoids the issue of long running workflows being held by a runtime engine, as the state is defined by a simple variable such as a string or int. Here is a sample state machine: var phoneCall = new StateMachine (State.OffHook); phoneCall.Configure(State.OffHook) .Permit(Trigger.CallDialed, State.Ringing); phoneCall.Configure(State.Ringing) .Permit(Trigger.HungUp, State.OffHook) .Permit(Trigger.CallConnected, State.Connected); phoneCall.Configure(State.Connected) .OnEntry(() => StartCallTimer()) .OnExit(() => StopCallTimer()) .Permit(Trigger.LeftMessage, State.OffHook) .Permit(Trigger.HungUp, State.OffHook) .Permit(Trigger.PlacedOnHold, State.OnHold); // ... phoneCall.Fire(Trigger.CallDialled); Assert.AreEqual(State.Ringing, phoneCall.State); Your state can be an integer which will allow you to feed it the current state from a database. This can be set on the constructor of the state machine as follows: var stateMachine = new StateMachine ( () => myState.Value, s => myState.Value = s); You can implement this in just one assembly, compared to the multiple projects you need to run Windows Workflow. Maintenance is extremely low, there is no "designer" that generates code for your, etc. Again, it is simple, and there lies the beauty.
