[site]: stackoverflow
[post_id]: 1186408
[parent_id]: 1186341
[tags]: 
It's good to have a set of UML diagrams to keep track of what is happening, but to remember in the end that documentation decays - your code is your design. That said, UML are good for planning and recalling bits and parts. There's a large dose of personal experience involved here, so feel free to take what you want and leave out what you think don't applies. Use Case Diagrams Skip this, and just write use cases instead. Class Diagrams I find them useful for planning the big picture view of an architecture, but I usually would leave out all the method names, or only leave in the relevant . I use it to illustrate the logical model of your classes Sequence Diagrams One of the more useful diagrams especially for business logic, and flow of data. I always find myself sketching sequence diagrams for complicated data-flow and especially when there are events being dispatched. Object Diagrams Shows the interaction of objects at run-time. I usually draw those for complex object interactions, and not the 'academically correct' ones. I think it is less useful than sequence diagrams. Flow diagrams Good for websites if you have complicate flow State Transitions Important if your application has many states. Again, just sketch out the most complex system, there is no need to have one for every sub-system. ER Diagram I know this is not UML, but a good database design upfront is important, and an ER diagram would help you to organise and plan how different tables relate with each other
