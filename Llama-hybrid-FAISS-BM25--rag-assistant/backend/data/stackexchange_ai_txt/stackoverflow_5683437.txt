[site]: stackoverflow
[post_id]: 5683437
[parent_id]: 
[tags]: 
Python Web Backend

I am an experienced Python developer starting to work on web service backend system. The system feeds data (constantly) from the web to a MySQL database. This data is later displayed by a frontend side (there is no connection between the frontend and the backend). The backend system constantly downloads flight information from the web (some of the data is fetched via APIs, and some by downloading and parsing text / xls files). I already have a script that downloads the data, parses it, and inserts it to the MySQL db - all in a big loop. The frontend side is just a bunch of php pages that properly display the data by querying the MySQL server. It is crucial that this web service be robust, strong and reliable. Therefore, I have been looking into the proper ways to design it, and came across the following parts to comprise my system: 1) django as a framework (for HTTP connections and for using Piston) 2) Piston as an API provider (this is great because then my front-end can use the API instead of actually running queries) 3) SQLAlchemy as the DB layer (I don't like the little control you get when using django ORM, I want to be able to run a more complex DB framework) 4) Apache with mod_wsgi to run everything 5) And finally, Celery (or django-cron) to actually run my infinite loop that pulls the data off the web - hopefully in some sort of organized tasks format). This is the part I am least sure of, and any pointers are appreciated. This all sounds great. I used django before to write websites (aka request handlers that return data). However, other than using Celery or django-cron I can't really see how it fits a role of a constant data feeding backend. I just wanted to run this by you guys to hear your ideas / comments. Any input you have / pointers to documentation and/or other libraries would be greatly greatly appreciated!
