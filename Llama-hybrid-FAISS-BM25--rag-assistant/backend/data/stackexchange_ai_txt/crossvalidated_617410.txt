[site]: crossvalidated
[post_id]: 617410
[parent_id]: 617381
[tags]: 
It is not feasible in general to try to retrieve the bootstrap samples from summary statistics: there is simply not enough information in them. Therefore you need some other way to keep information about the actual bootstrap samples, or to regenerate them quickly. 1. approach: keep bootstrap sample information In a situation where the problem is that data items are "bulky", I'd split the bootstrapping into two steps. This requires that you have a dataset consisting of identifiable items (rows), and that you can pick the $i$ -th element easily. 1.) generate samples of indices that point to elements from the original sample to be included in a particular bootstrap sample. You can also save these on disc if you need to repeat the experiment multiple times, and free / reuse memory. 2.) select the bootstrap samples one by one from the original data according to indices that were generated in step 1.), and calculate the complicated summary statistics. 2. approach: regenerate bootstrap sample information Alternatively, if saving indices on disk is not an option, regenerate the samples from scratch, starting with the same state of random number generator (rng). In python, use random.seed , in R: set.seed . Then you can strip your code from all time consuming calculations of summary statistics and should retrieve the same bootstrap samples again in very short time. Caveat!! : this approach only makes sense if calculating the summary statistics does not involve further simulations , such as MCMC. Simulation based statistics call the random number generator again. This would advance the rng state uncontrollably between bootstrap resampling steps.
