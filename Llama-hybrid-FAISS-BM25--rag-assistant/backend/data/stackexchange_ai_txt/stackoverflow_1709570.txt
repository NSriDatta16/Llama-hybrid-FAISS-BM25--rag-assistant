[site]: stackoverflow
[post_id]: 1709570
[parent_id]: 
[tags]: 
self = Descendant in Ruby?

I have a text log from a game with (for example) two types of entries viz. Chat and Event. For the most part they are very similar so I have a LogEntry class defined as so; class LogEntry LogChat and LogEvent both extend LogEntry and do further processing relevant to their domain. Everything works as expected; chat = LogEntry.new("some chat") event = LogEntry.new("some event") chat.parse.class # => LogChat event.parse.class # => LogEvent Question: The class method LogEntry.parse essentially returns a parsed entry of the appropriate class. In this context, the parsed entry is the important bit. But we could rename the instance method 'parse' to 'what_type_should_i_be?'. I want the object to act on that information and 'self.become LogEntry.parse(self)' Right now, to parse an entry, i have to do this; entry = entry.parse I want to push this further so that i get the same result with; entry.parse I've tried the obvious; class LogEntry def parse self = LogEntry.parse(self) end end Yet I get the error Can't change the value of self . Does anyone know how I should go about achieving this? Edit: I have changed my examples because many answers were focusing on the iteration over many entries. Chuck's answer elegantly shows that this situation isn't a problem. In case this arouses anyone's interest, i've stumbled across Evil Ruby which let's you meddle with `self.class'. There's a nice Orielly article about it called Ruby code that will swallow your soul! I'm looking into it to see if it offers any answers. (Edit: evil.rb is well named! Something that low level doesn't 'seem' suitable for stable/long term distribution.)
