[site]: stackoverflow
[post_id]: 1070656
[parent_id]: 
[tags]: 
Exposing Hibernate criteria via service API

This is more of a design than implementation question and it's going to be long so bear with me. It's best explained with an example: Let's say I have a business entity called Product with a bunch of properties ( name , price , vendor , etc...). It's represented by an interface ( Product ) and implementation ( ProductImpl , mapped in Hibernate) as well as basic CRUD service interface ( ProductService ) and implementation ( ProductServiceImpl ). Product and ProductService are exposed as API, their implementations are not. I want to add a List findProducts(QueryCriteria criteria) method to ProductService that would return a list of products satisfying given criteria. The requirements are: Query by direct Product properties (e.g. product.price gt 50.0 ) Query by association (e.g. product.vendor.name = "Oracle" ) Sort results (e.g. order by product.vendor.name desc, product.price asc" ) Apply additional filters. Unlike the above 3 items which are all specified by API client, additional filters may be applied by the service based on client's identity (e.g. client invoking this method may be limited to only seeing products manufactured by given vendor). Such filters take precedence over any criteria specified by the client (e.g. if the filter is set to product.vendor.name = "Microsoft" , query in (2) above should produce empty result set. The question, therefore, is what should QueryCriteria interface used by such a method look like? I can think of 3 solutions and I don't like either one of them: Allow clients to specify HQL (starting with "where" clause) directly. This is the most straightforward solution, but also the most problematic security-wise. Even assuming that filters (#4 above) are simple enough to be implemented via Hibernate's session filters, HQL still needs to be parsed to - at the very least - ensure that query parameters are specified as parameters and not inlined. Use thinly wrapped Hibernate's DetachedCriteria in place of QueryCriteria . "Thinly wrapped" because client can not be allowed to create DetachedCriteria directly for there would be no way to control what mapped entity it was created for. Also, this would not as flexible as HQL for some queries are not easily (or at all) expressible via Criteria API. As with HQL approach, filters (#4 above) will be limited to Hibernate session filters. Write my own QueryCriteria interface / implementation which will form either DetachedCriteria or HQL behind the scenes. While probably the most flexible solution, this will have to duplicate a lot of code from Criteria API which seems less than ideal. Any comments on the validity of the above approaches or - fingers crossed - simple elegant solutions that didn't occur to me would be highly appreciated. P.S. In my specific case, all API clients are internal and "semi-trusted" - that is I'm not as much concerned with someone trying to deliberately break something as with poor programming resulting in Cartesian product of 5 tables :-) However, it'd be nice to come up with a solution that would withstand API exposure to public.
