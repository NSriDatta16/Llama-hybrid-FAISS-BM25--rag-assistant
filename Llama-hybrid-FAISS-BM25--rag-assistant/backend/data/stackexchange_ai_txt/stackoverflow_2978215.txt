[site]: stackoverflow
[post_id]: 2978215
[parent_id]: 2978063
[tags]: 
Ok... The problem is, that inheritacne hierarchies are fragile - they can be easily useless, for example in cases you describe as your concerns. You can design the hierarchy in many ways, as you suggest, but keep in mind the Liskov Substitution Principle and most importantly, that you should not overuse inheritance. Use it only if necessary. You should not use abstract class and inheritance just because you can. I am not good at chess, but do pieces of different colors have different behaviours? There is a famous example of problem with abstraction when creating the inheritance hierarchy. Take a circle and ellipse, which is more abstract? When you try to make any of them superclass of the other, you will end up with inflexible design. Try to understand more about object oriented programming and try to inherit only when no other choice is better.
