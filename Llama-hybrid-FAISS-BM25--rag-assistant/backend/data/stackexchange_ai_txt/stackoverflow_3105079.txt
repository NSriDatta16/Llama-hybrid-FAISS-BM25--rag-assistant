[site]: stackoverflow
[post_id]: 3105079
[parent_id]: 3105052
[tags]: 
It looks like a straight-forward join: SELECT p.*, j.* FROM People AS p INNER JOIN Roles AS r ON p.id = r.person_id ORDER BY p.name; The remainder of the work is formatting; that's best done by a report package. Thanks for the quick response, that seems a good start but you get multiple rows per person like (you have to imagine this is a table as you don't seem to be able to format in comments): id | Name | email_address | phone_number | job_role | department 1 | paul | paul@example.com | 123456 | secretary | HR 1 | paul | paul@example.com | 123456 | assistant | media 2 | bob | bob@example.com | 567891 | manager | IT I would like one row per person ideally with all their job roles in it if that's possible? It depends on your DBMS, but most available ones do not support RVAs - relation-valued attributes. What you'd like is to have the job role and department part of the result like a table associated with the user: +----+------+------------------+--------------+------------------------+ | id | Name | email_address | phone_number | dept_role | +----+------+------------------+--------------+------------------------+ | | | | | +--------------------+ | | | | | | | job_role | dept | | | 1 | paul | paul@example.com | 123456 | | secretary | HR | | | | | | | | assistant | media | | | | | | | +--------------------+ | +----+------+------------------+--------------+------------------------+ | | | | | +--------------------+ | | | | | | | job_role | dept | | | 2 | bob | bob@example.com | 567891 | | manager | IT | | | | | | | +--------------------+ | +----+------+------------------+--------------+------------------------+ This accurately represents the information you want, but is not usually an option. So, what happens next depends on your report generation tool. Using the one I'm most familiar with, (Informix ACE, part of Informix SQL, available from IBM for use with the Informix DBMSs), you would simply ensure that the data is sorted and then print the name, email address and phone number in the 'BEFORE GROUP OF id' section of the report, and in the 'ON EVERY ROW' section you would process (print) just the role and department information. It is often a good idea to separate the report formatting from the data retrieval operations; this is an example of where it is necessary unless your DBMS has unusual features to help with the formatting of selected data. Oh dear that sounds very complicated and not something I could run easily on a mySQL database in a PHP page? The RVA stuff - you're right, that is not for MySQL and PHP. On the other hand, there are millions of reports (meaning results from queries that are formatted for presentation to a user) that do roughly this. The technical term for them is ' Control-Break Report ', but the basic idea is not hard. You keep a record of the 'id' number you last processed - you can initialize that to -1 or 0. When the current record has a different id number from the previous number, then you have a new user and you need to start a new set of output lines for the new user and print the name, email address and phone number (and change the last processed id number). When the current record has the same id number, then all you do is process the job role and department information (not the name, email address and phone number). The 'break' occurs when the id number changes. With a single level of control-break, it is not hard; if you have 4 or 5 levels, you have to do more work, and that's why there are reporting packages to handle it. So, it is not hard - it just requires a little care.
