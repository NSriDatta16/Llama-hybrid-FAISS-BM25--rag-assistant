[site]: stackoverflow
[post_id]: 293392
[parent_id]: 293375
[tags]: 
I would always try to give a file, class, and method a single responsibility . Because of that, separating the displaying from the editing code could be a good idea in either case. As for loading libraries, I believe that the performance loss of including non required libraries could be quite irrelevant in a lot of cases. However, include , require , include_once , and require_once are relatively slow as they (obviously) access the file system. If the libraries you do not use on each occasion are quite big and usually include a lot of different files themselves, removing unnecessary includes could help reducing the time spent there. Nonetheless, this cost could also be reduced drastically by using an efficient caching system. Given you are on PHP5 and your libraries are nicely split up into classes, you could leverage PHP's auto loading functionality which includes required classes as the PHP script needs them. That would pretty effectively avoid a lot of non used code to be included. Finally, if you make any of those changes which could affect your website's performance, run some benchmarks and profile the gain or loss in performance. That way, you do not run into the risk of doing some possibly cool optimization which just costs too much time to fully implement or even degrades performance.
