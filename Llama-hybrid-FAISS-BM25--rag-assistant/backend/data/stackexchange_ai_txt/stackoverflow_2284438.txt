[site]: stackoverflow
[post_id]: 2284438
[parent_id]: 2280924
[tags]: 
Edit: I discovered in a different answer that the TextBlock also has an Inlines collection to which one can add Run s. Anvaka's answer ingeniously uses an attached property as a sort of converter. What I think will suit your situation is a FlowDocumentScrollViewer and a FlowDocument . I describe manual creation of one through an IValueConverter a little bit here . You'll likely use similar helper functions as you've shown in your example, but the FlowDocument is already much like HTML and will handle wrapping effortlessly. You add Paragraph s to the FlowDocument , you add Run s to the Paragraph , and each Run derives from TextElement so it has a lot of the same properties that TextBlock s do. FlowDocument doc = new FlowDocument(); Paragraph par = new Paragraph(); doc.Blocks.Add( par ); Run r; r = new Run( "This is " ); par.Inlines.Add( r ); r = new Run( "bold" ); r.FontWeight = FontWeights.Bold; par.Inlines.Add( r ); r = new Run( " and this is " ); par.Inlines.Add( r ); r = new Run( "italic" ); r.FontStyle = FontStyles.Italic; par.Inlines.Add( r ); r = new Run( " text." ); par.Inlines.Add( r ); Also, if the formatting substrings are going to remain restricted to bold/italic tags or some other extremely simple markup, use of Regex.Split() might be the easiest way to determine the separate Run s from a single string. It allows you to split a string into multiple strings but keep your "delimiters".
