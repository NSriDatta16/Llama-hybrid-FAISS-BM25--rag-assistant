[site]: stackoverflow
[post_id]: 2595212
[parent_id]: 
[tags]: 
Using FindAll on a List > type

Assuming public class MyClass { public int ID {get; set; } public string Name {get; set; } } and List classList = //populate with MyClass instances of various IDs I can do List result = classList.FindAll(class => class.ID == 123); and that will give me a list of just classes with ID = 123. Works great, looks elegant. Now, if I had List > listOfClassLists = //populate with Lists of MyClass instances How do I get a filtered list where the lists themselves are filtered. I tried List > result = listOfClassLists.FindAll (list => list.FindAll(class => class.ID == 123).Count > 0); it looks elegant, but doesn't work. It only includes Lists of classes where at least one class has an ID of 123, but it includes ALL MyClass instances in that list, not just the ones that match. I ended up having to do List > result = Results(listOfClassLists, 123); private List > Results(List > myListOfLists, int id) { List > results = new List >(); foreach (List myClassList in myListOfLists) { List subList = myClassList.FindAll(myClass => myClass.ID == id); if (subList.Count > 0) results.Add(subList); } return results; } which gets the job done, but isn't that elegant. Just looking for better ways to do a FindAll on a List of Lists. Ken
