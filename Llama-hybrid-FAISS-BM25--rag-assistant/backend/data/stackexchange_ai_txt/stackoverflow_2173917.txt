[site]: stackoverflow
[post_id]: 2173917
[parent_id]: 274709
[tags]: 
When I hear the term "rapid development", I find that people typically use it in the context of "how fast can I develop a new solution". There are a lot of factors that must be considered before a reasonable answer can be constructed. How familiar is the developer with the framework? How comprehensive is the design? How complex are the requirements? How stable is the framework? I first came in contact with ASP.NET MVC shortly before 1.0 was released. Prior to that, I was very familiar and very comfortable with ASP.NET WebForms, but I was still frustrated with the development process as a whole. I was aware of the goals surrounding separation of concerns, and knew enough that clear separation wasn't possible with WebForms without swimming against the current created by the framework. Since working with ASP.NET MVC, I found very quickly that I was missing the boat on a number of things. While WebForms allows you to build things "faster", you are basically held hostage by Microsoft's implementation rather than allowing you to more easily digest established standards (such as JavaScript, CSS and AJAX) in environments that don't involve Microsoft. Also, the creation of new tools, behaviors and functionality should not be motivated by sales and profitability, but because the technological demands of the developer community require it. I've been working on this current MVC project since April. I enjoy working with this framework very much, and would recommend it highly to anyone and everyone interested in moving away from WebForms. Learning the framework takes a bit of time, but once you understand it, you literally wonder why you couldn't have done things this way from the beginning. You can build applications faster with WebForms, but, if you want professional looking websites, you will have to invest in component libraries that will still require you to learn those established standards in order to leverage them properly. If my 11-year-old son expressed interest in learning web development tomorrow, given the choice of WebForms or MVC, my choice would be MVC. That being said, I would still direct him towards learning JavaScript, jQuery and AJAX before he even touched MVC, because understanding those frameworks makes understanding almost every other that much easier. Personally, I am not an advocate of "rapid development". I have spent my career as a corporate developer, and view in-house development as an investment. I would prefer spending 20% more time in design and development instead of shorting the project by 20% just to meet an unrealistic deadline. Each dollar "saved" during initial development will easily cost you at least $1.50 due to maintenance costs, re-education, and architectural changes due to new requirements. But, not everyone thinks as I do, so...my simple answer would be MVC.
