[site]: stackoverflow
[post_id]: 4675930
[parent_id]: 
[tags]: 
Boost tuple + transform

Is it possible to do the following. Say my boost tuple has I would like to use std::transform + mem_fun to insert only the std::string element in a corresponding vector. Is it possible or are we required to use a loop and push_back(get )... Ie the following doesn't like to compile... (unknown types...) result.resize(storage.size()) std::transform(storage.begin(), storage.end(), result.begin(), std::mem_fun(&boost::get )); Here is an example (trying one of the comments): #include #include #include #include #include template class TestClass { private: typedef boost::tuple PairType; std::vector storage; public: void extract(std::vector &result) { result.resize(storage.size()); std::transform(storage.begin(), storage.end(), result.begin(), boost::bind(&PairType::get , _1)); } }; int main(int argc, char**argv) { TestClass bb; std::vector result; bb.extract(result); return 0; } g++ test.cpp test.cpp: In member function `void TestClass ::extract(std::vector >&)': test.cpp:17: error: expected primary-expression before ',' token test.cpp: In member function `void TestClass ::extract(std::vector >&) [with T = int]': test.cpp:26: instantiated from here test.cpp:17: error: address of overloaded function with no contextual type information
