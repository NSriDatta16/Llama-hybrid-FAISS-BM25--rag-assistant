[site]: stackoverflow
[post_id]: 3273021
[parent_id]: 
[tags]: 
What is context in Haskell multiparameter type class

In chapter 15 of Real World Haskell, a type class is defined: class (Monad m) => MonadSupply s m | m -> s where A couple paragraphs later, it says that >>= and return don't need to be defined because of the context. But there's no further explanation of what it means by context. How does the compiler know MonadSupply is an instance of Monad if only 'm' is an instance of Monad?
