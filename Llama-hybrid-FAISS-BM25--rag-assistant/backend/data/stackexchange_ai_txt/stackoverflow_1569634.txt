[site]: stackoverflow
[post_id]: 1569634
[parent_id]: 1569632
[tags]: 
You discovered SQL Injection Attacks . It is not good policy to just append user supplied data to a SQL query for exactly the reason you specified. Any user of your system could try to steal or corrupt your data by injecting some SQL. The way to deal with it is described in the link, but basically you specify the parameters and let the supplied classes handle properly escaping the data so that if someone passes "Drop Table", it will simply be entered as data. Here's a great example from CodeBetter.com SqlCommand command = connection.CreateCommand(); command.CommandText = "SELECT * FROM Customers WHERE CustomerID = @CustomerID"; command.Parameters.Add( new SqlParameter("@CustomerID", SqlDbType.NChar, 5)).Value = customerID; Alternatively, feel free to use LINQ to SQL. It will handle this for you and is much easier to work with from a developer perspective. You can drag and drop your database into your code and it will completely map every table. Then you can write LINQ's version of SQL statements right in your code where you'll get code completion and Compile time checking for errors. This SO question will get you started . Here's some simple LINQ code that lets you read a customer from the database, write his/her name to the screen, then update his personalized greeting (all safe from SQL injection): Customer myCustomer = ( from cust in myDatabase.Customers where cust.CustomerID == userPassedCustomerID select cust).Single(); Console.WriteLine(myCustomer.FullName); myCustomer.PersonalizedGreeting = userPassedGreeting; myDatabase.SubmitChanges();
