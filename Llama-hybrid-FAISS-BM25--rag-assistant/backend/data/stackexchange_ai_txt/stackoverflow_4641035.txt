[site]: stackoverflow
[post_id]: 4641035
[parent_id]: 4567972
[tags]: 
The actual problem seems to be that the aapt process is asking for an unreasonable amount of memory. Memory that my system with an SSD HD and (thus) no swap (but 4GB of RAM) does not have, next to the already big eclipse process. The solution is to set: echo 1 > /proc/sys/vm/overcommit_memory Read the articles below, but my understanding is that the linux kernel has a flaw, and is imperfect in predicting how much memory a new process will need. This flag allows the system to start any process, regarding how much memory it is asking. Note that in practice aapt will never use this much memory. It seems the size of the eclipse process (in my case for example 2GB) is the estimate and this is added to whatever RAM is in use (2GB eclipse + 0.5GB other), which exceeds my 4GB RAM. Aapt would only use a fraction of the 2GB but the calculation fails. The downside of allowing this overcommit apparently is that the kernel has no clean solution when you are running low on memory, and will just kill processes. Another solution is to use a swap, in my case a swap file as I did not foresee a swap partition, and then preferably with a very low swappiness. Your linux manual should tell you how, but in summary (this is only for a quick test, you should set up your /etc/fstab instead): dd if=/dev/zero of=/swap bs=512 count=4M # = 2GB swapfile mkswap /swap swapon /swap echo 0 > /proc/sys/vm/swappiness Setting the swappiness so low makes it so that the swap is in reality never used. This is also the biggest downside of this solution. You'll have a 2GB file on your harddisk that you'll never use, except to satisfy the kernel's calculations (and maybe a rare extreme low memory, not sure how 0 swappiness works?). It is said to be a bad idea to use a swap on an SSD as the many writes will shorten the lifetime of the SSD. The following articles led me to the solution. How to solve "java.io.IOException: error=12, Cannot allocate memory" calling Runtime#exec()? http://webcache.googleusercontent.com/search?q=cache:2NSdg-wIVsAJ:wiki.apache.org/cassandra/Operations+java.io.IOException+insufficient+system+resources+no+swap&cd=4&hl=nl&ct=clnk&gl=be&lr=lang_en|lang_nl Note that it is not aapt that is at fault here, nor are the Android dev tools. I could have seen this problem anywhere. I do think however that due to the gigantic (and increasing) size of the eclipse toolkit, coupled maybe with some implementation details, such as the use of fork()?, this problem has a very high likelihood of surfacing here, also for other people with SSDs.
