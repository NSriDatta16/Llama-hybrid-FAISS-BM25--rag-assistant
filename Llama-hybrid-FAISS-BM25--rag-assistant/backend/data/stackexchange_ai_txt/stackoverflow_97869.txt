[site]: stackoverflow
[post_id]: 97869
[parent_id]: 91257
[tags]: 
Some tips on smoothing things out. 1) As others have said - try and break down the tasks into smaller chunks. The more obvious way of doing this is to try and break down the technical tasks in greater detail. Where possible I'd encourage you to talk to the product owner and see if you can reduce scope or "thin" the story instead. I find the latter more effective. Juggling priorities and estimates is easier if both team and product owner understand what's being discussed. My general rule of thumb is any estimate bigger than half an ideal day is probably wrong :-) 2) Try doing shorter sprints. If you're doing one month sprints - try two weeks. If you're doing two weeks - try one. It acts a limiter on story size - encouraging the product owner and the team to work on smaller stories that are easier to estimate accurately You get feedback more often about your estimates - and it's easier to see the connections between the decisions you made at the start of the sprint and what actually happened Everything gets better with practice :-) 3) Use the stand ups and retrospectives to look a bit more at the reasons for the ups and downs. Is it when you spend time with particular areas of the code base? Is it caused by folk misunderstanding the product owner? Random emergencies that take development time away from the team? Once you have more of an understanding where ups and downs are coming from you can often address those problems specifically. Again - shorter sprints can help make this more obvious. 4) Believe your history. You probably know this one... but I'll say it anyway :-) If fiddling with that ghastly legacy Foo package took 3 x longer than you thought it would last sprint - then it will also take 3 x as long as you think the next sprint. No matter how much more effective you think you'll be this time ;-) Trust the history and use things like Yesterday's Weather to guide your estimates in the next spring. Hope this helps!
