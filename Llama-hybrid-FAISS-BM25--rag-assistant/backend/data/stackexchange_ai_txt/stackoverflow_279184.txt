[site]: stackoverflow
[post_id]: 279184
[parent_id]: 279158
[tags]: 
don't expose the internals of your class in the interface - in other words, the public method of Car should be Start, not StartEngine if you want to impose an internal structure (i.e. like having only 1 engine) then you need another abstract/base class Engine that can be specialized. then you can construct a sports car out of parts by setting the m_engine member to a sporty subclass of Engine, et al EDIT: note that in the real world, a turbocharger is not part of the engine, it is an add-on to the engine, with its own control interface... But if you want to include things like this in your ferrari engine, that's ok, just upcast in the SportsCar subclass to make your base Engine into a TurboEngine but it would be better modeling to keep the components separate - that way you can upgrade your turbocharger (dual intake vs single intake, for example) without replacing the entire engine!
