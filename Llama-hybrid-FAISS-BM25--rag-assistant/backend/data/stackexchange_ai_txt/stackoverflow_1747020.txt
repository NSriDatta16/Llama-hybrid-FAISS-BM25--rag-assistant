[site]: stackoverflow
[post_id]: 1747020
[parent_id]: 1319239
[tags]: 
You can create Observables from existing events. You can use Observable.FromEvent for this purpose. You may write a GetMouseDown event wrapper like this, as an extension method for a UI Element. public static IObservable > GetMouseDown (this UIElement el) { var allevents = Observable.FromEvent ( h => new MouseButtonEventHandler(h), h => el.MouseDown += h, h=> el.MouseDown -= h ); return allevents; } And later, you may 'handle' your event in a completely declarative manner. Like //create an observable declaratively var mouseDowns=button.GetMouseDown(); //subcribe and do what ever you need mouseDowns.Subscribe(arg=> MessageBox.Show(arg.ClickCount.ToString()) ); And here is how to create a 'drag' observable, with the intial position and current position. //Get the initial position and dragged points using LINQ to Events var mouseDragPoints = from md in e.GetMouseDown() let startpos=md.EventArgs.GetPosition(e) from mm in e.GetMouseMove().Until(e.GetMouseUp()) select new { StartPos = startpos, CurrentPos = mm.EventArgs.GetPosition(e), }; //And subscribe here to mouseDragPoints Read this article LINQ to Events - More on .NET Reactive Extensions and play with the source code.
