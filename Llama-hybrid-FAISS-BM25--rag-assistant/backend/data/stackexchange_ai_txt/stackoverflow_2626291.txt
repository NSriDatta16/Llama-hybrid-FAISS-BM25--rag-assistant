[site]: stackoverflow
[post_id]: 2626291
[parent_id]: 2626248
[tags]: 
Instead of using an Array , which requires O(n) time to determine if a value is present, you should use an Object , which should give you better performance (either O(1) or O(log n) per-lookup on average, depending on whether they are using a hash map or a tree in their implementation). So, as an example: var array1 : Array = // ... first array var array2 : Array = // ... second array // Build up dictionary of items in array1 var array1_presence_dictionary : Object = new Object(); for each (var item : * in array1 ){ array1_presence_dictionary[item] = item; } // Iterate over array2, constructing list of common and not common elements var both : Array = new Array(); var only_in_array2 : Array = new Array(); for each (var item : * in array2 ){ var key : String = String(item); if ( array1_presence_dictionary.hasOwnObject(key) ){ both.push(item); }else{ only_in_array2.push(item); } } Note that if you are doing this frequently, as in you really want to have a Set implementation, then you should simply store all your values in an Object or Dictionary . That will ensure that elements are not repeated... you simply add elements by assigning dict[item]=item; , and you delete using del dict[item]; .
