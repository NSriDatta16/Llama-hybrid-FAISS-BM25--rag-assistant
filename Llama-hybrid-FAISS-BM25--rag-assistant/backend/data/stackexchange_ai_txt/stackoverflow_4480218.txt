[site]: stackoverflow
[post_id]: 4480218
[parent_id]: 527089
[tags]: 
The namespace plugin is COMPLETELY UNNECESSARY! The oldest trick in the world, the use of arguments.callee, Function.prototype and then calling a new Function instance, allows you to create nested namespaces with $.fn.extend! Here is a plain and simple example: ;(function($){ var options= { root: function(){ //you don't have to call it 'root', of course :) //identify the function from within itself with arguments.callee var fn= arguments.callee; //'this' at this level is the jquery object list matching your given selector //we equate fn.prototype to this //thus when we call a new instance of root, we are returned 'this' fn.prototype= this; fn.value= function(){ //Note: "new this" will work in the below line of code as well, //because in the current context, 'this' is fn; //I use fn to make the code more intuitive to understand; var context= new fn; console.log(context, fn.prototype); //test return context.html(); //test } return this; } } //you can obviously append additional nested properties in this manner as well options.root.position= function(){ var context= new this; //in this context, fn is undefined, so we leverage 'this' console.log(context, this.prototype); //test return context.offset(); //test } //don't forget to extend in the end :) $.fn.extend(options); })(jQuery); ;$(function(){ var div= $('div#div') .root(); console.log(div.root.value()); console.log(div.root.position()); });
