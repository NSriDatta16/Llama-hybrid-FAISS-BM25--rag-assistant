[site]: stackoverflow
[post_id]: 5186479
[parent_id]: 
[tags]: 
Passing swipe touches from UIView to underlying UIScrollView for proper scrolling

I have a situation similar to these two posts ( 1907297 AND 689684 ) and to describe my situation most concisely, I present this text/graphical layout (similar to what you'd see in IB, dots used to enforce indent levels) UIView (MainView: 320x460) . .UIScrollView (ScrollView: 320x460) . .UIView (OverlayView: 320x40) . . . .UIButton (ArbitraryButton1) . . . .UILabel (ArbitraryLabel1) . . . .UILabel (ArbitraryLabel2) The goal here is for the OverlayView to serve as a unified, transparent container to position and display some arbitrary buttons/labels on top of the ScrollView. These buttons/labels should remain stationary while the content in the ScrollView beneath moves with user swipes. The buttons/labels may sometimes be hidden/unhidden/scaled in unison (with animation) which is what makes it handy to have them all grouped in the single OverlayView. The trouble is that, while taps on the OverlayView seem to transmit right through to the underlying ScrollView just nicely, swiping motions have no effect. I can detect/intercept the swipes by overriding the -(void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event method in the OverlayView, however I haven't yet found a way to properly pass those along to the ScrollView in a way that makes it scroll. Evidently the touchesMoved method is not what UIScrollView uses to detect/interpret swipes? All the other similar posts I've researched have either found a different solution that wouldn't work in my case or have just gone unsolved. I've also seen mention of employing touchesShouldBegin / touchesShouldCancel though I don't grasp how that would be implemented. Anyhow, still hopeful that there's some insight from the community that can allow me to come up with an elegant solution for this - any sample code would be fantastic. Thanks in advance, Joel. P.S. - I should also mention that I need to make this compatible with iOS 3.0 so I think trying to use UIGestureRecognizers is out.
