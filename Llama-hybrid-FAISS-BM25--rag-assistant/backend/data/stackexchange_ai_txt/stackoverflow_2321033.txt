[site]: stackoverflow
[post_id]: 2321033
[parent_id]: 
[tags]: 
NHibernate Eager Fetching Over Multiple Levels with StatelessSession

I've referenced the following thread which works with a Session but not a StatelessSession. NHibernate Eager Fetching Over Multiple Levels The problem I am having is similar to the above thread. I'm getting back 4xApplications and 4xRoles. I should be getting back 1xApplication and 4xRoles. Criteria query: return StatelessSession.CreateCriteria(typeof(Application)) .SetResultTransformer(Transformers.DistinctRootEntity) .SetFetchMode("Roles", FetchMode.Join) .List (); My entities and mappings: public class Application : IComparable { public virtual int Id { get; set; } public virtual string InternalName { get; set; } public virtual ICollection Roles { get; set; } #region IComparable Members public virtual int CompareTo(Application other) { return Id.CompareTo(other.Id); } #endregion } public class Role : IComparable { public virtual int Id { get; set; } public virtual string Name { get; set; } public virtual Application Application { get; set; } public virtual int CompareTo(Role other) { return Id.CompareTo(other.Id); } } public class ApplicationMapping : ClassMap { public ApplicationMapping() { Table("Application"); Id(x => x.Id, "ID").GeneratedBy.Assigned(); ; //.Column("ID"); Map(x => x.InternalName); HasMany(x => x.Roles).Inverse().Cascade.All().AsSet().Not.LazyLoad(); } } public class RoleMapping : ClassMap { public RoleMapping() { Table("Roles"); Id(x => x.Id, "ID").GeneratedBy.Assigned(); References(x => x.Application, "ApplicationID").Not.LazyLoad(); Map(x => x.Name); HasMany(x => x.RightsUsers).Table("UserRoleXRef").Inverse().Cascade.All().AsSet(); } } hbm.xml SQL: SELECT this_.ID as ID1_1_, this_.InternalName as Internal2_1_1_, roles2_.ApplicationID as Applicat3_3_, roles2_.ID as ID3_, roles2_.ID as ID2_0_, roles2_.Name as Name2_0_, roles2_.ApplicationID as Applicat3_2_0_ FROM dbo.Application this_ left outer join dbo.Roles roles2_ on this_.ID=roles2_.ApplicationID
