[site]: stackoverflow
[post_id]: 1354962
[parent_id]: 1354713
[tags]: 
I think your approach might need to be rethought. Take this for what it is, my opinion, but I would think this ordering might work better. Top Priorities: (no particular order) Develop problem solving skills Be productive as a team Next: Basic Programming skills (PHP, Python, etc) After they know how to solve problems as individuals and as a team they can move onto specifics such as: Client/Server model Markup (HTML, XHTML, XML, etc) Styling (CSS) Client-side scripting (JavaScript / jQuery) Server-side scripting (PHP, Ruby, etc) Build up their knowledge of what's involved piece by piece rather than jumping into the deep end off the bat - they'll be quickly overwhelmed. At this point you can start to introduce things like file I/O and databases. This will give them a fairly comprehensive skill-set. From here they can really start learning. In addition, one may have to deal with SQL for persistent storage, Memcache for sessions and caching, APIs of content management systems, OpenID, Facebook, Twitter, OpenSocial etc. to build anything interesting. These are whole topics unto themselves, you can't bite them off all in one chunk. Especially if you're taking these people from 0. Before you can build something interesting you have to learn to build something mundane. HTML5 will probably be more in the vein of what you're looking rather than Flash or Silverlight but it's not quite here yet...Though support is building. Baby steps, Olav - if this were The Matrix you could download all that info in one shot but we're not there...yet ;-) For the moment, and near future, web development is the synergy of many different technologies working together to deliver an interesting user experience. Well, that's my 2 cents
