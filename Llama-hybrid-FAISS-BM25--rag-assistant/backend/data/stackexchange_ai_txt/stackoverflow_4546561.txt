[site]: stackoverflow
[post_id]: 4546561
[parent_id]: 4546502
[tags]: 
You have a number of options, and which one is "the right way" is really up to you and how your system functions overall. There could be performance issues for various instantiated objects that need to be considered, etc. One option could be as simple as: public class BaseController { protected ISomeRepository myRepository = IoCContainer.Resolve (); } public class MyController : BaseController { } Additionally, you could move the initialization to the base controller's constructor rather than have it be inline like that. Another option might be to late-bind the repositories, if having them all incurs a performance hit (weighed carefully with the hit of instantiating them) and on average they aren't always needed: public class BaseController { private ISomeRepository _myRepository; protected ISomeRepository myRepository { get { if (_myRepository == null) _myRepository = IoCContainer.Resolve (); return _myRepository; } } } There are probably more options available to you, it all depends on your setup. How your particular IoC container works may also play heavily into your design decision. (Note that I reference the IoCContainer directly here for brevity and simplicity, but I recommend abstracting out the container behind a service locator so that you don't have so many references to the container itself.)
