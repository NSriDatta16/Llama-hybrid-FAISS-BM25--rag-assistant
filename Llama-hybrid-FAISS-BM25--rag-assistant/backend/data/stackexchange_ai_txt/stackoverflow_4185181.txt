[site]: stackoverflow
[post_id]: 4185181
[parent_id]: 4060294
[tags]: 
If you are going to store a random per user salt it doesn't really matter. Store salt+hash in one column or store salt and hash in two columns. Personally I would store it as a single column because it is unlikely you will ever be retrieving just salt or just the hash. Also if you update the salt then hash needs to be updated also and when updating the hash you might as well update the salt. Still either method of storage is equally valid from a cryptography standpoint. I think what that comment was indicating (although poorly) is that an alternative solution is to derive the salt from another piece of per-user data, a derived salt . As an example take username and pass it through 1000+ iterations of PBKDF2 (actually picking a unique and unusual number of iterations is better - say 2137). This would require attacker to gain access to not only the database but also your source code to defeat the system. Now if the attacker has complete access to both password table & source code you have gained no security however if the attack has only access to the database (limited intrusion) you have stopped an attack or at least make it much more difficult. Another aspect to consider in a derived salt implementation is if your attacker will be able to make a user account (open registration system). If anyone (including your attacker) can make an account (like say on stackoverflow) a derived salt is of less value. Why? Attacker can reverse engineer the salt and thus salt source with only access to the database via a plaintext attack (attacker knows his own password, and other details).
