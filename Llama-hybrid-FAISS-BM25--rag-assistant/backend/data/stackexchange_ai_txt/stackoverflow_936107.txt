[site]: stackoverflow
[post_id]: 936107
[parent_id]: 935992
[tags]: 
If it were me, I'd go a little less fancy and cache the searches in a secondary table, like: CREATE TABLE `image_search` ( `id` int not null auto_increment, `image_id` int not null, `r` tinyint not null, `g` tinyint not null, `b` tinyint not null, `distance` tinyint not null, `hit` bool not null, PRIMARY KEY (`id`), UNIQUE KEY `image_id_by_rgb_by_distance` (`image_id`,`r`,`g`,`b`,`distance`), KEY `image_id_by_rgb_by_distance_by_hit` (`image_id`,`r`,`g`,`b`,`distance`,`hit`), ); Pull from that to find your matches, like SELECT `image_id` FROM `image_search` WHERE `r` = $r AND `g` = $g AND `b` = $b AND `distance` = $distance AND `hit` = 1 If you get no results, then do SELECT `image_id` FROM `image_search` WHERE `r` = $r AND `g` = $g AND `b` = $b AND `distance` = $distance and if there are no results to that , then run through your image catalog doing the comparison and store each result, positive or negative, in the table. Then it'll only be slow when it doesn't have the results cached. If your UI encourages the user to pick certain useful preset colors, you can precompute for those and help yet more. Also bonus points for precomputing all previously executed searches when you add an image to your catalog.
