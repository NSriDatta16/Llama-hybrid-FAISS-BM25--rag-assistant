[site]: stackoverflow
[post_id]: 2590281
[parent_id]: 630453
[tags]: 
POST to a URL creates a child resource at a server defined URL. PUT to a URL creates/replaces the resource in its entirety at the client defined URL. PATCH to a URL updates part of the resource at that client defined URL. The relevant specification for PUT and POST is RFC 2616 §9.5ff. POST creates a child resource , so POST to /items creates a resources that lives under the /items resource. Eg. /items/1 . Sending the same post packet twice will create two resources. PUT is for creating or replacing a resource at a URL known by the client . Therefore: PUT is only a candidate for CREATE where the client already knows the url before the resource is created. Eg. /blogs/nigel/entry/when_to_use_post_vs_put as the title is used as the resource key PUT replaces the resource at the known url if it already exists, so sending the same request twice has no effect. In other words, calls to PUT are idempotent . The RFC reads like this: The fundamental difference between the POST and PUT requests is reflected in the different meaning of the Request-URI. The URI in a POST request identifies the resource that will handle the enclosed entity. That resource might be a data-accepting process, a gateway to some other protocol, or a separate entity that accepts annotations. In contrast, the URI in a PUT request identifies the entity enclosed with the request -- the user agent knows what URI is intended and the server MUST NOT attempt to apply the request to some other resource. If the server desires that the request be applied to a different URI, Note: PUT has mostly been used to update resources (by replacing them in their entireties), but recently there is movement towards using PATCH for updating existing resources, as PUT specifies that it replaces the whole resource. RFC 5789. Update 2018 : There is a case that can be made to avoid PUT. See "REST without PUT" With “REST without PUT” technique, the idea is that consumers are forced to post new 'nounified' request resources. As discussed earlier, changing a customer’s mailing address is a POST to a new “ChangeOfAddress” resource, not a PUT of a “Customer” resource with a different mailing address field value. taken from REST API Design - Resource Modeling by Prakash Subramaniam of Thoughtworks This forces the API to avoid state transition problems with multiple clients updating a single resource, and matches more nicely with event sourcing and CQRS. When the work is done asynchronously, POSTing the transformation and waiting for it to be applied seems appropriate.
