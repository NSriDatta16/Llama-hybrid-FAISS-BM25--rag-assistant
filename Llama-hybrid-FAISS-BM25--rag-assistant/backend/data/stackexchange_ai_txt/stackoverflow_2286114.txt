[site]: stackoverflow
[post_id]: 2286114
[parent_id]: 2263417
[tags]: 
execute(); $this->commandStack[] = $command; return $result; } public function rollback() { while ($command = array_pop($this->commandStack)) { try { echo "ROLLING BACK " . get_class($command) . "\n"; $command->rollback(); } catch (ApiCommandRollbackFailedException $rfe) { throw new ApiTransactionRollbackFailedException(); } } } } // this groups all the api commands required to do your // add_item function from the original post. it demonstrates // a nested transaction. class AddItemToGroupTransactionCommand implements IApiCommand { private $soap; private $group; private $item; private $transaction; public function __construct($soap, $group, $item) { $this->soap = $soap; $this->group = $group; $this->item = $item; } public function execute() { try { $this->transaction = new ApiTransaction(); $this->transaction->execute(new EnsureGroupAvailableSpaceCommand($this->soap, $this->group, 1)); $this->transaction->execute(new AddItemToGroupCommand($this->soap, $this->group, $this->item)); } catch (ApiCommandFailedException $ae) { throw new ApiCommandFailedException(); } } public function rollback() { try { $this->transaction->rollback(); } catch (ApiTransactionRollbackFailedException $e) { // XXX: determine if it's recoverable and take // appropriate action, e.g. wait and try // again or log the remaining undo stack // for a human to look into it. throw new ApiCommandRollbackFailedException(); } } } // this wraps the setgroupcapacity api call and // provides a method for rolling back class EnsureGroupAvailableSpaceCommand implements IApiCommand { private $soap; private $group; private $numItems; private $previousCapacity; public function __construct($soap, $group, $numItems=1) { $this->soap = $soap; $this->group = $group; $this->numItems = $numItems; } public function execute() { try { $capacity = $this->soap->getGroupCapacity($this->group); $itemsInGroup = $this->soap->getNumberOfItemsInGroup($this->group); $availableSpace = $capacity - $itemsInGroup; if ($availableSpace numItems) { $newCapacity = $capacity + ($this->numItems - $availableSpace); $this->soap->setGroupCapacity($this->group, $newCapacity); $this->previousCapacity = $capacity; } } catch (SoapException $e) { throw new ApiCommandFailedException(); } } public function rollback() { try { if (!is_null($this->previousCapacity)) { $this->soap->setGroupCapacity($this->group, $this->previousCapacity); } } catch (SoapException $e) { throw new ApiCommandRollbackFailedException(); } } } // this wraps the additemtogroup soap api call // and provides a method to roll the changes back class AddItemToGroupCommand implements IApiCommand { private $soap; private $group; private $item; private $complete = false; public function __construct($soap, $group, $item) { $this->soap = $soap; $this->group = $group; $this->item = $item; } public function execute() { try { $this->soap->addItemToGroup($this->group, $this->item); $this->complete = true; } catch (SoapException $e) { throw new ApiCommandFailedException(); } } public function rollback() { try { if ($this->complete) { $this->soap->removeItemFromGroup($this->group, $this->item); } } catch (SoapException $e) { throw new ApiCommandRollbackFailedException(); } } } // a mock of your api class SoapException extends Exception {} class MockSoapClient { private $items = array(); private $capacities = array(); public function addItemToGroup($group, $item) { if ($group == "group2" && $item == "item1") throw new SoapException(); $this->items[$group][] = $item; } public function removeItemFromGroup($group, $item) { foreach ($this->items[$group] as $k => $i) { if ($item == $i) { unset($this->items[$group][$k]); } } } public function setGroupCapacity($group, $capacity) { $this->capacities[$group] = $capacity; } public function getGroupCapacity($group) { return $this->capacities[$group]; } public function getNumberOfItemsInGroup($group) { return count($this->items[$group]); } } // nested transaction example // mock soap client is hardcoded to fail on the third additemtogroup attempt // to show rollback try { $soap = new MockSoapClient(); $transaction = new ApiTransaction(); $transaction->execute(new AddItemToGroupTransactionCommand($soap, "group1", "item1")); $transaction->execute(new AddItemToGroupTransactionCommand($soap, "group1", "item2")); $transaction->execute(new AddItemToGroupTransactionCommand($soap, "group2", "item1")); $transaction->execute(new AddItemToGroupTransactionCommand($soap, "group2", "item2")); } catch (ApiCommandFailedException $e) { $transaction->rollback(); // XXX: if the rollback fails, you'll need to figure out // what you want to do depending on the nature of the failure. // e.g. wait and try again, etc. }
