[site]: stackoverflow
[post_id]: 4094336
[parent_id]: 
[tags]: 
K&R exercise question to an answer about the original question

I kept trying to wrap my head around a solution to K&R problem 7-8, until I found this solution (with the original problem) right on this site. I am unable to comment on the answer (probably due to its age); the only way I could actually have input in that question is to post an answer to it, which I felt was inappropriate. So i've decided to create this heavily related question based off the chosen "answer" which seemed logical to me, up until I got up to this point (concerning implementing a function as a macro): "Repeat that as a macro very often and the 'space saving' rapidly becomes a cost as the bit masking has a fixed size." The only problem is that function calls take time as well. "Jumping" to the function location, setting storage aside for the local variable(s), then actually computing the comparison, all take time. So how exactly is implementing a macro which tests for the ASCII value of the character slower than the first function which incorporates table-lookup (with this in mind)? How is it possible that a function call can take less time than comparing two integers, one of which is already in memory, and one of which is a constant? It would seem to me that repeated calls to the function and macro, over time, would still result in the macro being faster. Is my way of thinking wrong? I'm thinking it has to be since it wasn't brought up in the original question. I would be glad if someone would shed some light on this.
