[site]: stackoverflow
[post_id]: 3358789
[parent_id]: 3357172
[tags]: 
EDIT: You can download the whole project from my blog (Click on Steve) This one works fine: XAML: Note: If AutoStart is set to false, you need to call either Show() or StartAnimation() manually from your code. C#: public class GifImage : Image { #region Memmbers private GifBitmapDecoder _gifDecoder; private Int32Animation _animation; private bool _isInitialized; #endregion Memmbers #region Properties private int FrameIndex { get { return (int)GetValue(FrameIndexProperty); } set { SetValue(FrameIndexProperty, value); } } private static readonly DependencyProperty FrameIndexProperty = DependencyProperty.Register("FrameIndex", typeof(int), typeof(GifImage), new FrameworkPropertyMetadata(0, new PropertyChangedCallback(ChangingFrameIndex))); private static void ChangingFrameIndex(DependencyObject obj, DependencyPropertyChangedEventArgs ev) { GifImage image = obj as GifImage; image.Source = image._gifDecoder.Frames[(int)ev.NewValue]; } /// /// Defines whether the animation starts on it's own /// public bool AutoStart { get { return (bool)GetValue(AutoStartProperty); } set { SetValue(AutoStartProperty, value); } } public static readonly DependencyProperty AutoStartProperty = DependencyProperty.Register("AutoStart", typeof(bool), typeof(GifImage), new UIPropertyMetadata(false, AutoStartPropertyChanged)); private static void AutoStartPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e) { if ((bool)e.NewValue) (sender as GifImage).StartAnimation(); } public string GifSource { get { return (string)GetValue(GifSourceProperty); } set { SetValue(GifSourceProperty, value); } } public static readonly DependencyProperty GifSourceProperty = DependencyProperty.Register("GifSource", typeof(string), typeof(GifImage), new UIPropertyMetadata(string.Empty, GifSourcePropertyChanged)); private static void GifSourcePropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e) { // CARLO 20100622: Reinitialize animation everytime image is changed (sender as GifImage).Initialize(); } #endregion Properties #region Private Instance Methods private void Initialize() { _gifDecoder = new GifBitmapDecoder(new Uri("pack://application:,,," + this.GifSource), BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.Default); _animation = new Int32Animation(0, _gifDecoder.Frames.Count - 1, new Duration(new TimeSpan(0, 0, 0, _gifDecoder.Frames.Count / 10, (int)((_gifDecoder.Frames.Count / 10.0 - _gifDecoder.Frames.Count / 10) * 1000)))); _animation.RepeatBehavior = RepeatBehavior.Forever; this.Source = _gifDecoder.Frames[0]; _isInitialized = true; } #endregion Private Instance Methods #region Public Instance Methods /// /// Shows and starts the gif animation /// public void Show() { this.Visibility = Visibility.Visible; this.StartAnimation(); } /// /// Hides and stops the gif animation /// public void Hide() { this.Visibility = Visibility.Collapsed; this.StopAnimation(); } /// /// Starts the animation /// public void StartAnimation() { if (!_isInitialized) this.Initialize(); BeginAnimation(FrameIndexProperty, _animation); } /// /// Stops the animation /// public void StopAnimation() { BeginAnimation(FrameIndexProperty, null); } #endregion Public Instance Methods }
