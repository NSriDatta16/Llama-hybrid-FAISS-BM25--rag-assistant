[site]: crossvalidated
[post_id]: 491755
[parent_id]: 490700
[tags]: 
As noted in the comments, it would probably be best to approach this using a multilevel logistic regression model, along the lines of glmer(cbind(Population_Pos, Population_Neg) ~ Condition * Type + (1|ID) but since that's not your question, I won't go into depth on this. On the approach your have been taking, I don't think your idea with transformed p-values works, but there is a simpler solution. This assumes you have a large number of control experiments. For each experiment, calculate a measure of the effect size. This could be the Chi-squared statistic (calculated for the Fisher exact test), but it probably makes more sense to use the odds-ratio: $\frac{\text{Pos}_{\text{Treated}}}{\text{Neg}_{\text{Treated}}} \div \frac{\text{Pos}_{\text{Untreated}}}{\text{Neg}_{\text{Untreated}}} $ . Plot the distribution of effect sizes for the active experiments and the control experiments. You should see larger effects for active experiments. For any active experiment, you can check how many control experiments had a larger effect size. For example, if an active experiment has an effect size greater than that in 99% of control experiments, the one-tailed p-value for the null hypothesis that the effect size for this experiment comes from the same distribution as the control effect sizes is $p . Again, though, this is an approximation that only works when you have a very large number of control experiments. If you do in fact have only 8 control experiments, this approximation isn't very useful at all! -- To elaborate on why this is different to what you propose, first note that a p-value is not a measure of effect size, and depend on the sample size, so you're not answering the same question if you use the p-values here. Second, we can't really assume a distribution for the p-values (or effect sizes) from the control experiments, since it seems that the null hypothesis isn't true for them (if the null was true, p-values would be uniformally distribution between 0 and 1). That's why I suggest this non-parametric approximation instead.
