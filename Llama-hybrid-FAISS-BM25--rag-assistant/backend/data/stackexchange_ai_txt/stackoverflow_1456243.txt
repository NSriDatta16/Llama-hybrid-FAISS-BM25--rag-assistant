[site]: stackoverflow
[post_id]: 1456243
[parent_id]: 1456051
[tags]: 
The various " LIKE '%keyword%' " solutions don't have good performance. I suggest you use a FULLTEXT INDEX instead (provided your table uses the MyISAM storage engine). CREATE FULLTEXT INDEX jobsearch_idx ON my_jobs_table (job_title, job_description, location); Then you can search using the MATCH() operator: SELECT * FROM my_jobs_table WHERE MATCH(job_title, job_description, location) AGAINST( ? ); Substitute the user-specified keywords where I have " ? " above. BTW, I'm assuming a reasonable design would be to allow location keywords to be found if they occur in the title or description. So in your application, concatenate the keywords with the location choice (space separated) and use that for the query parameter. I deliberately left the category out of that example, because I assume you want category names to match exactly. So add it with an AND operator like this: SELECT * FROM my_jobs_table WHERE category = ? AND MATCH(job_title, job_description, location) AGAINST( ? ); Substitute the two user choices (category and keywords) for the two " ? " placeholders above. Use query parameters, not variable interpolation. There are of course a lot of other options for MySQL fulltext indexes. You might want to use the search modifier " IN BOOLEAN MODE " for example. I won't describe them fully here, you should go read the manual sections to learn more about it. MySQL 5.1 Reference Manual: Full-Text Search Functions . As for handling cases when users leave form fields empty, that's a different issue, separate from searching the database. You should solve that issue in Javascript or in application code, either setting a default value if the user doesn't give one, or else returning them to the form and telling them that they can't proceed without giving a value for required fields.
