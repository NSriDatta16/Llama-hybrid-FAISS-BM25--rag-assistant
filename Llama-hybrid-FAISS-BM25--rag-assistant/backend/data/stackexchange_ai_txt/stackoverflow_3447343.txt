[site]: stackoverflow
[post_id]: 3447343
[parent_id]: 3447285
[tags]: 
I've never worked in a project like this. I'm used to databases with several hundred tables, which had never been a problem. Therefore I can't say if your idea is a good idea, I never tried it. The "my team has always worked this way"-argument is a major driver for many decisions, and I can't even say that it is always wrong. With NHibernate you organize your data in classes. They can be in different namespaces and assemblies. You usually don't work much with the database directly, you don't need this kind of structure there. About the scalability argument: I'm not sure if it is really scaling well when you need to access several databases every time. I mean: you always need users and orders and probably more. Then you need to get all this data from several databases.
