[site]: stackoverflow
[post_id]: 2219484
[parent_id]: 
[tags]: 
AI: selecting immediate acceleration/rotation to get to a final point

I'm working on a game where on each update of the game loop, the AI is run. During this update, I have the chance to turn the AI-controlled entity and/or make it accelerate in the direction it is facing . I want it to reach a final location (within reasonable range) and at that location have a specific velocity and direction (again it doesn't need to be exact) That is, given a current: P 0 (x, y) = Current position vector V 0 (x, y) = Current velocity vector (units/second) θ 0 = Current direction (radians) τ max = Max turn speed (radians/second) α max = Max acceleration (units/second^2) |V| max = Absolute max speed (units/second) P f (x, y) = Target position vector V f (x, y) = Target velocity vector (units/second) θ f = Target rotation (radians) Select an immediate : τ = A turn speed within [-τ max , τ max ] α = An acceleration scalar within [0, α max ] (must accelerate in direction it's currently facing) Such that these are minimized: t = Total time to move to the destination |P t -P f | = Distance from target position at end |V t -V f | = Deviation from target velocity at end |θ t -θ f | = Deviation from target rotation at end (wrapped to (-π,π)) The parameters can be re-computed during each iteration of the game loop. A picture says 1000 words so for example given the current state as the blue dude, reach approximately the state of the red dude within as short a time as possible (arrows are velocity): Pic http://public.blu.livefilestore.com/y1p6zWlGWeATDQCM80G6gaDaX43BUik0DbFukbwE9I4rMk8axYpKwVS5-43rbwG9aZQmttJXd68NDAtYpYL6ugQXg/words.gif Assuming a constant α and τ for Δt (Δt → 0 for an ideal solution) and splitting position/velocity into components, this gives (I think , my math is probably off): Equations http://public.blu.livefilestore.com/y1p6zWlGWeATDTF9DZsTdHiio4dAKGrvSzg904W9cOeaeLpAE3MJzGZFokcZ-ZY21d0RGQ7VTxHIS88uC8-iDAV7g/equations.gif (EDIT: that last one should be θ = θ 0 + τΔt) So, how do I select an immediate α and τ (remember these will be recomputed every iteration of the game loop, usually > 100 fps)? The simplest, most naieve way I can think of is: Select a Δt equal to the average of the last few Δts between updates of the game loop (i.e. very small) Compute the above 5 equations of the next step for all combinations of (α, τ) = {0, α max } x {-τ max , 0, τ max } (only 6 combonations and 5 equations for each, so shouldn't take too long, and since they are run so often, the rather restrictive ranges will be amortized in the end) Assign weights to position, velocity and rotation. Perhaps these weights could be dynamic (i.e. the further from position the entity is, the more position is weighted). Greedily choose the one that minimizes these for the location Δt from now. Its potentially fast & simple, however, there are a few glaring problems with this: Arbitrary selection of weights It's a greedy algorithm that (by its very nature) can't backtrack It doesn't really take into account the problem space If it frequently changes acceleration or turns, the animation could look "jerky". Note that while the algorithm can (and probably should) save state between iterations, but P f , V f and θ f can change every iteration (i.e. if the entity is trying to follow/position itself near another), so the algorithm needs to be able to adapt to changing conditions. Any ideas? Is there a simple solution for this I'm missing? Thanks, Robert
