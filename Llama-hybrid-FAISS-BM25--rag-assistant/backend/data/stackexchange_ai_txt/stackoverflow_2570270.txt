[site]: stackoverflow
[post_id]: 2570270
[parent_id]: 2558453
[tags]: 
I've been testing this myself, and I've come up with pretty consistent results. (Even though my tests are a tad crude.) I've tested three computers Windows 7 (x64), PHP 5.3, MySQL 5.1 Ubuntu 9.10 (x64) PHP 5.2, MySQL 5.1 Ubuntu 10.04 (x32) PHP 5.3, MySQL 5.1 So far the tests on all three platforms have indicated the same tings: Inserting into a BLOB is 2x to 8x faster on MyISAM than on InnoDB. The difference seems to be higher on binary strings than HEX-coded strings. (See the data below) Using a HEX coded string ( bin2hex into a X'...' ) uses more memory, on average, than using an escaped binary string ( mysql_real_escape_string on the raw data) . - This seems true for both MyISAM and InnoDB. The binary string is faster on MyISAM, but the HEX-coded data is faster on InnoDB. The test was basically just a simple loop that escaped or hex-coded the raw data (a 2.4 MiB image retrieved once at the top of the script) , constructed the query string, and executed it via the mysql_query or mysqli::query functions. - I tested with both extensions. Didn't seem to be any difference. I put the results from the Ubuntu 10.04 (#3) up in spreadsheets. The results from the Ubuntu 9.10 (#2) machine were pretty much the same, so I didn't bother set them up: (Finally an excuse to test the Google Docs thing properly! xD) Binary string on MyISAM HEX-coded string on MyISAM Binary string on InnoDB Hex-coded string on InnoDB These graphs show the private memory usage by the mysqld process on the Win7 (#1) machine. Binary string on MyISAM HEX-coded string on MyISAM Binary string on InnoDB HEX-coded string on InnoDB
