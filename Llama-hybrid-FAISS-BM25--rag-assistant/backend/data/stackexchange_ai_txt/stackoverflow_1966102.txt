[site]: stackoverflow
[post_id]: 1966102
[parent_id]: 1966075
[tags]: 
As far a I know regular include simply throws in the contents of another file. The standard library stdlib.h urely utilizes the code guards: http://en.wikipedia.org/wiki/Include_guard , so you end up including only one copy. However, you can break it (do try it!) if you do: #include A, #undef A_GUARD, #include A again. Now ... why do you include a .h inside another .h? This can be ok, at least in C++, but it is best avoided. You can use forward declarations for that: http://en.wikipedia.org/wiki/Forward_declaration Using those works for as long as your code does not need to know the size of an imported structure right in the header. You might want to turn some function arguments by value into the ones by reference / pointer to solve this issue. Also, always utilize the include guards or #pragma once for your own header files!
