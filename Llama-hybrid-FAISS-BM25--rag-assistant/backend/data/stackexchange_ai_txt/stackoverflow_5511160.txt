[site]: stackoverflow
[post_id]: 5511160
[parent_id]: 5510918
[tags]: 
Either is possible, but to be concise, yes, it does matter. In my explanation is will call the repository where you push to and pull from the super repository. This is just to make it more clear. Here's your 2 options: super repository outside folder being version controlled: if you do this on your local PC, you will of course incur the cost of storing everything more than once. In fact, you will store your super repository somewhere, plus a checked out version (your working directory), plus the files for the currently checked out branch. Generally however, storage is not that much of a concern these days. The big advantage of this method is that you can clone/pull/push to your super repository from no matter where you are. super repository inside folder being version controlled: you don't use extra storage. There is a big drawback to doing this though: your repository will not be a bare one. What this means is that it has got checked out files. If you are currently in branch A , it will be impossible to push to this branch A from a remote location. You will first have to change your working branch to branch B , before someone else can work with branch A . So, if you just want version control, but don't plan on working on your project on any other PC, creating the super repository inside your project folder is fine. If you do plan on working it somewhere else, create a bare super repository somewhere else on your PC. A bare repository does not have any checked out branch. The following commands will create a new bare git repository and push your current data to it. You should from then on be able to git push , git pull , ... as you wish. cd mkdir myproject.git cd myproject.git git init --bare cd cd project_folder git init git add * git commit -m "Initial push" git remote add origin ~/myproject.git git push origin master [Edit] Made explanation more clear.
