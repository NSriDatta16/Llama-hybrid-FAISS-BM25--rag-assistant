[site]: stackoverflow
[post_id]: 4254985
[parent_id]: 4254811
[tags]: 
Am I correct in assuming the allocator is responsible for the memory management from the items? (And making sure it is declared from stack/freestore/heap/whatever) No you are not. The allocator is just sugar coating over new and delete and in general responsible of deciding where the memory will be allocated. The responsibility of calling allocate , deallocate , construct and destruct is to its users (which means here, std::vector ). From your point of view, it'll be automatic, which is what matters here after all. What does the std::allocator do? - Does it declare from the stack, or from the heap? std::allocator is mandated to allocate using ::operator new(size_t) , thus it depends on the definition of the global new operator. Generally, this means the heap. The stack is for object with automatic storage duration. (follow up from previous question): if I copy an item declared in the stack to the datastructure is it still declared in the heap? If you copy an item, then a copy is allocated where you copy it. Here it means copying an item from the stack to the heap. You then have two copies of the object, meaning that changes on one copy are not reflected on the other. Beware though, that we are talking about the default copying mode, that is a shallow copy. If you copy an object, it'll get copied all fine; if you copy a pointer, only the pointer will be copied, not the data pointed to.
