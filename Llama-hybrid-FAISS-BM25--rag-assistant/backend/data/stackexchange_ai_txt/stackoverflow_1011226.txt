[site]: stackoverflow
[post_id]: 1011226
[parent_id]: 1011136
[tags]: 
You may want to split your unit tests into suites. Is your application modularized? How often do you really need to run all the tests? Would it be acceptable if your developers only ran the unit tests relevant to their own module, and you had the array of tests run nightly and/or on a CI? Are there any particular unit tests which are very complex (I know, I'm slipping into functional and integration testing here, but the line is sometimes fuzzy), but can any of them be run on a sanity -level during development and then be run full out on the CI? Edit : Just for kicks, I'll briefly describe the test routines at one of my previous projects First of all, the growth of the test system was organic, meaning that it was not originally planned out but was modified and changed as it grew. Hence it wasn't perfect, and there were some naming conventions that had become apocryphal with time. At a developer level we used a simple two minute test suite called CheckIn, which verified that the code was healthy enough to join the trunk. On top of that we ran sanity tests continuously on a CI machine. These were simplified versions of the more complex integration and functional tests, all unit tests and all regression tests. Complex test suites (in the number of hours) were run during day and night remotely and the results compiled the next morning. Automatic testing - it's the mutt's nuts.
