[site]: stackoverflow
[post_id]: 5531621
[parent_id]: 5531581
[tags]: 
I have a background in both science and engineering, and I've always taken the pragmatic approach to learning engineering (including computer languages). Specifically: 1) I think of something I don't know how to do, and then learn to do it. (What "it" is, is almost immaterial.) 2) I find something in someone else's code, in a keyword reference, etc., and then try to figure out what it is. I generally then go back and learn the computer "science" part after tackling the pragmatics. I don't think this is a unique approach or necessarily the best approach, but it's one that works for me. Tackling the pragmatic aspects first gives learning the feel of a puzzle and makes it fun. And then, when I turn to the theoretical aspects, I'm able to draw on examples from my own experience. (I should note that I take a similar approach to learning other disciplines that combine pratical and theoretical aspects.)
