[site]: stackoverflow
[post_id]: 2972914
[parent_id]: 2895816
[tags]: 
With no answer to my previous questions, here are some guesses that could also be some clues, and a step to an answer: From what I recall, a .ko is nothing but an .o file resulting from the merge of all the .o files generated by your source module, and the addition of a .modinfo section. At the end of any .ko building Makefile, there is an LD call: from what I recall, ld is called with the -r option, and this is what create that .o file that the Makefile calls a .ko. This resulting file is not to be confused with an archive or object library (.a file), that is just a format archiving / packaging multiple .o files as one: A merged object is the result of a link that produces yet another .o module: But in the resulting module, all sections that could be merged have been, and all public / external pairs that could be resolved have been inside those sections. So I assume that you end up with your .ko file containing all your "local" extern definitions: Those that are extern because they are used to call across the .o modules in your .ko (but are not needed anymore since they are not supposed to be called from outside the .ko), and those that the .ko module DO need to properly communicate with the loader and kernel. The former have most likely already been resolved by ld during the merge, but ld has no way to know whether you intend to have them also callable from outside the .ko. So the extraneous symbols you see are those that are extern for each of your .o files, but are not needed as extern for the resulting .ko. And what you are looking for is a way to strip only those. Does this last paragraph properly describe the symbols you want to get rid of?
