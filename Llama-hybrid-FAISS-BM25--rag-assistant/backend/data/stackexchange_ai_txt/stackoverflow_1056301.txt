[site]: stackoverflow
[post_id]: 1056301
[parent_id]: 1056151
[tags]: 
Here is some code that is based on a previous answer I gave for probability distribution in python but is using the length to set the weight. It uses an iterative markov chain so that it does not need to know what the total of all of the weights are. Currently it calculates the max length but if that is too slow just change self._maxw = 1 to self._maxw = max lenght and remove for k in self._odata: if len(self._odata[k])> self._maxw: self._maxw=len(self._odata[k]) Here is the code. import random class RandomDict: """ The weight is the length of each object in the dict. """ def __init__(self,odict,n=0): self._odata = odict self._keys = list(odict.keys()) self._maxw = 1 # to increase speed set me to max length self._len=len(odict) if n==0: self._n=self._len else: self._n=n # to increase speed set above max value and comment out next 3 lines for k in self._odata: if len(self._odata[k])> self._maxw: self._maxw=len(self._odata[k]) def __iter__(self): return self.next() def next(self): while (self._len > 0) and (self._n>0): self._n -= 1 for i in range(100): k=random.choice(self._keys) rx=random.uniform(0,self._maxw) if rx Test results Key count= {'a': 50181, 'c': 33363, 'b': 16456} Key count= {'a': 50080, 'c': 33411, 'b': 16509}
