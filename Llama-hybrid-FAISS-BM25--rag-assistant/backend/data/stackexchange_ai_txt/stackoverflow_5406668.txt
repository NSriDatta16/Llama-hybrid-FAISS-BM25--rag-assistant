[site]: stackoverflow
[post_id]: 5406668
[parent_id]: 5405532
[tags]: 
To be honest IMO, the version with reduce and if are already the most elegant and idiomatic see comment from nickik below. (def coll [true :a "v1" false :b "v2" true :c "v3"]) (reduce (fn [a [c k v]] (if c (assoc a k v) a)) {} (partition 3 coll)) Here is a version using the for comprehension for the third case: (apply array-map (flatten (for [[c k v] (partition 3 coll) :when c] [k v]))) Edit: For the second case you convert it to the third case by doing: (def c [true false true]) (def k [:a :b :c]) (def v ["v1" "v2" "v3"]) (def coll (interleave c k v)) But I think the map version from nickik is better here.
