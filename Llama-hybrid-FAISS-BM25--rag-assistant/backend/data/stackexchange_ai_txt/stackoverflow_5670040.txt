[site]: stackoverflow
[post_id]: 5670040
[parent_id]: 
[tags]: 
How can I set a maximum on the number of pages in a TTLauncherView?

I'm using TTLauncherView as a sort of home screen for my app and I only have one page's worth of icons. How can I make it so the TTLauncherView won't let you drag icons to "the next page"? I want to set a maximum number of pages (in this case one.) (EDIT: long story short, I subclassed beginEditing , see the answer below. ) I see where why it adds an extra page when beginEditing is called, but I don't want to edit the framework code. (That makes it hard to update to newer versions.) I'd also prefer not to subclass and override that one method, if I have to rely on how it's implemented. (I'm not against subclassing or adding a category if it's clean.) I tried setting scrollView.scrollEnabled to NO in the callback method launcherViewDidBeginEditing in my TTLauncherViewDelegate , but that doesn't work while it's in editing mode and I don't know why. I tried adding a blocker UIView to the scrollview to intercept the touch events by setting userInteractionEnabled=NO , which works OK. I still have to disable the dragging of TTLauncherItems to the next page somehow. I also tried setting the contentSize of the scrollview to it's bounds in launcherViewDidBeginEditing , but that didn't seem to work either. Is there a better way? Tried to block gestures: - (void)setLauncherViewScrollEnabled:(BOOL)scrollEnabled { if (scrollEnabled) { [self.scrollViewTouchInterceptor removeFromSuperview]; self.scrollViewTouchInterceptor = nil; } else { // iter through the kids to get the scrollview, put a gesturerecognizer view in front of it UIScrollView *scrollView = [launcherView scrollViewSubview]; self.scrollViewTouchInterceptor = [UIView viewWithFrame:scrollView.bounds]; // property retains it UIView *blocker = self.scrollViewTouchInterceptor; [scrollView addSubview:scrollViewTouchInterceptor]; [scrollView sendSubviewToBack:scrollViewTouchInterceptor]; scrollViewTouchInterceptor.userInteractionEnabled = NO; } } For reference: TTLauncherView.m : - (void)beginEditing { _editing = YES; _scrollView.delaysContentTouches = YES; UIView* prompt = [self viewWithTag:kPromptTag]; [prompt removeFromSuperview]; for (NSArray* buttonPage in _buttons) { for (TTLauncherButton* button in buttonPage) { button.editing = YES; [button.closeButton addTarget:self action:@selector(closeButtonTouchedUpInside:) forControlEvents:UIControlEventTouchUpInside]; } } // Add a page at the end [_pages addObject:[NSMutableArray array]]; [_buttons addObject:[NSMutableArray array]]; [self updateContentSize:_pages.count]; [self wobble]; if ([_delegate respondsToSelector:@selector(launcherViewDidBeginEditing:)]) { [_delegate launcherViewDidBeginEditing:self]; } }
