[site]: stackoverflow
[post_id]: 3926213
[parent_id]: 3926047
[tags]: 
I think a common misconception amongst many scala developers, those at EPFL (and yourself, Kevin) is that "scala is a simple language" . The argument usually goes something like this: scala has few keywords scala reuses the same few constructs (e.g. PartialFunction syntax is used as the body of a catch block) scala has a few simple rules which allow you to create library code (which may appear as if the language has special keywords/constructs). I'm thinking here of implicits; methods containing colons; allowed identifier symbols; the equivalence of X(a, b) and a X b with extractors. And so on scala's declaration-site variance means that the type system just gets out of your way. No more wildcards and ? super T My personal opinion is that this argument is completely and utterly bogus . Scala's type system taken together with implicits allows one to write frankly impenetrable code for the average developer . Any suggestion otherwise is just preposterous, regardless of what the above "metrics" might lead you to think. ( Note here that those who I've seen scoffing at the non-complexity of Java on Twitter and elsewhere happen to be uber-clever types who, it sometimes seems, had a grasp of monads, functors and arrows before they were out of short pants ). The obvious arguments against this are (of course): you don't have to write code like this you don't have to pander to the average developer Of these, it seems to me that only #2 is valid. Whether or not you write code quite as complex as scalaz , I think it's just silly to use the language (and continue to use it) with no real understanding of the type system. How else can one get the best out of the language?
