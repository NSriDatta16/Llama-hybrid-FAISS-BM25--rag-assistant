[site]: stackoverflow
[post_id]: 5187917
[parent_id]: 880227
[tags]: 
Similarly, I needed to create an rpm with just a few files. Since these files were source controlled, and because it seemed silly, I didn't want to go through taring them up just to have rpm untar them. I came up with the following: Set up your environment: mkdir -p ~/rpm/{BUILD,RPMS} echo '%_topdir %(echo "$HOME")/rpm' > ~/.rpmmacros Create your spec file, foobar.spec, with the following contents: Summary: Foo to the Bar Name: foobar Version: 0.1 Release: 1 Group: Foo/Bar License: FooBarPL Source: %{expand:%%(pwd)} BuildRoot: %{_topdir}/BUILD/%{name}-%{version}-%{release} %description %{summary} %prep rm -rf $RPM_BUILD_ROOT mkdir -p $RPM_BUILD_ROOT/usr/bin mkdir -p $RPM_BUILD_ROOT/etc cd $RPM_BUILD_ROOT cp %{SOURCEURL0}/foobar ./usr/bin/ cp %{SOURCEURL0}/foobar.conf ./etc/ %clean rm -r -f "$RPM_BUILD_ROOT" %files %defattr(644,root,root) %config(noreplace) %{_sysconfdir}/foobar.conf %defattr(755,root,root) %{_bindir}/foobar Build your rpm: rpmbuild -bb foobar.spec There's a little hackery there specifying the 'source' as your current directory, but it seemed far more elegant then the alternative, which was to, in my case, write a separate script to create a tarball, etc, etc. Note: In my particular situation, my files were arranged in folders according to where they needed to go, like this: ./etc/foobar.conf ./usr/bin/foobar and so the prep section became: %prep rm -rf $RPM_BUILD_ROOT mkdir -p $RPM_BUILD_ROOT cd $RPM_BUILD_ROOT tar -cC %{SOURCEURL0} --exclude 'foobar.spec' -f - ./ | tar xf - Which is a little cleaner. Also, I happen to be on a RHEL5.6 with rpm versions 4.4.2.3, so your mileage may vary.
