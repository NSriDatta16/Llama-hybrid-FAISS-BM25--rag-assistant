[site]: stackoverflow
[post_id]: 1584944
[parent_id]: 1584864
[tags]: 
Here is a grep that uses recursion to search the data structure. Note that good data structures lead the way to elegant solutions. Bad data structures make you bend over backwards to accomodate. This feels to me like one of those cases where a bad data structure is obstructing rather than helping you. Having a simple data structure with a more uniform structure (instead of using this grep) might be worth investigating. #!/usr/bin/env python data=['something', ('Diff', ('diff', 'udiff'), ('*.diff', '*.patch'), ('text/x-diff', 'text/x-patch',['find','java deep','down'])), ('Delphi', ('delphi', 'pas', 'pascal', 'objectpascal'), ('*.pas',), ('text/x-pascal',['lets', 'put one here'], )), ('JavaScript+Mako', ('js+mako', 'javascript+mako'), ('application/x-javascript+mako', 'text/x-javascript+mako', 'text/javascript+mako')), ] def grep(astr,data,prefix=[]): result=[] for idx,elt in enumerate(data): if isinstance(elt,basestring): if astr in elt: result.append(tuple(prefix+[idx])) else: result.extend(grep(astr,elt,prefix+[idx])) return result def pick(data,idx): if idx: return pick(data[idx[0]],idx[1:]) else: return data idxs=grep('java',data) print(idxs) for idx in idxs: print('data[%s] = %s'%(idx,pick(data,idx)))
