[site]: stackoverflow
[post_id]: 5374357
[parent_id]: 
[tags]: 
What are some elegant ways to abstract out repetitive exception handling in python?

When handling exceptions in python, I find myself repeating code quite often. The basic pattern is something of the form: try: action_here() except CommonException1: Action_always_taken_for_CommonException1() except CommonException2: Action_always_taken_for_CommonException2() except Exception: Default_action_always_taken() What I would like to do is to some how abstract this repetitive code out to a function or class. I know one way to do it is to call an exception handling function with the exception object, such as: try: action_here() except Exception as e: handle_exception(e) Then in this function determine the exception based on class. def handle_exception(e): if type(e) == type(CommonException1()): Action_always_taken_for_CommonException1() elif type(e) == type(CommonException2()): Action_always_taken_for_CommonException2()) else: Default_action_always_taken() This, however, feels clunky and inelegant. So my question is, what are some other alternatives to handling repetitive exception handling?
