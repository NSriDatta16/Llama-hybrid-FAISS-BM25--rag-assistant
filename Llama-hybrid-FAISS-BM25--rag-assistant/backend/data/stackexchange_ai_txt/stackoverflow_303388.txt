[site]: stackoverflow
[post_id]: 303388
[parent_id]: 296325
[tags]: 
In a basic modern world Java EE application, it is broken into various layers, where you have 4 basic layers +--------------------+ | Presentation | +--------------------+ | Controller/Actions | +--------------------+ | Business Delegate | | (Service) | +--------------------+ | Data Access Layer | +--------------------+ | Database | +--------------------+ Your applications should be split into these layer right from the beginning, such that you can at any given point of time replace any layer without effecting any of it's sibling layer. Example if you used JDBC for the Data Access layer, you should be able to replace it with Hibernate without affecting the business delegate or Database layer. The benefit of using such an architecture is to allow collaboration with multiple technologies. You business delegate (service layer) should be able to talk to a web service and handle the application processing without even going to a browser! Regarding using JSP as the presentation layer, there are other technologies available like, velocity , freemarker , as iberck mentioned above, tapestry also has it's own rendering engine. You can use XML + XSLT also to render the UI. There are UI managing apps also available like Tiles and sitemesh , that help you integrate various techs as different components of the page and show them as one. You can also use light weight swing components clubbed with JNLP and develop a desktop style enterprise application. All we need is a little imagination and client requirement and we can use literally anything as the presentation layer.
