[site]: stackoverflow
[post_id]: 430476
[parent_id]: 429006
[tags]: 
Okay, here's the whole story. First of all, let's define a measure of the "goodness" of a scheme. With passwords or the like, the measure is the average number of trials it takes a brute force attack to get access. Let's say that your passwords are drawn from an alphabet S with n characters, and the password's length is k . Then the total number of possible passwords is n k . On average, then, a brute force attack will find a successful password in about n k /2 , or n k-1 trials. For convenience, and because of some information-theoretic considerations I'm not going to go into, we usually express that as a number of bits , which is lg n k where lg denotes the logarithm base 2. Because we're used to thinking of bits as discrete things, we actually usually take the ceiling of that number, ie, the least integer greater than lg n k , but in fact the fractional value is perfectly legitimate. For printable characters, 8 character passwords, and no other rules, that number is in the neighborhood of 100 8 or about 10 16 ; that is about 53 bits. The only thing is those sorts of random passwords are almost impossible to remember; they tend to end up on yellow sticky notes and become vulnerable to that kind of attack. Still, that is a limiting case. It takes about 100 trillion tries to guess that by brute force. If each try costs a penny, then theoretically, your data could be worth as much as $1 trillion before it would be worth a thief's time. On the other hand, there are only about 50,000 commonly used dictionary words. That's around 16 bits, or it takes around 25,000 tries by brute force. Figure each try costs a penny: then your data better not be worth more than $250.00. Both of these are applications of the rule R = PÃ—H where R is the risk, P is the probability of a bad think happening, and H (the hazard ) is the cost of the bad thing happening. Now, a penny a try is too high, but you now have the tools you need. Figure out what the data is worth, and you can use this method to decide how extensive a rule set you need. (But be careful, as if you make the rules too stringent, then the entropy of the set of acceptable passwords gets small, until you get down to the old joke that after much thought Security determined the best password of all is '*8h% Jd!', so all users would now start using that password.)
