[site]: stackoverflow
[post_id]: 609216
[parent_id]: 608992
[tags]: 
Ok, so my test machine isn't fast. Actually it's really slow. It 1.6 ghz,n 1 gb of ram, No multiple disks, just a single (read slow) disk for sql server, os, and extras. I created your tables with primary and foreign keys defined. Inserted 2 categories, 500 random users, and 250000 random stories. Running the first query above takes 16 seconds (no plan cache either). If I index the LastActivityAt column I get results in under a second (no plan cache here either). Here's the script I used to do all of this. --Categories table -- Create table Categories ( [ID] [int] IDENTITY(1,1) primary key NOT NULL, [ShortName] [nvarchar](8) NOT NULL, [Name] [nvarchar](64) NOT NULL) --Users table -- Create table Users( [ID] [int] IDENTITY(1,1) primary key NOT NULL, [Username] [nvarchar](32) NOT NULL, [Password] [nvarchar](64) NOT NULL, [Email] [nvarchar](320) NOT NULL, [CreatedAt] [datetime] NOT NULL, [LastActivityAt] [datetime] NOT NULL ) go -- Stories table -- Create table Stories( [ID] [int] IDENTITY(1,1) primary key NOT NULL, [UserID] [int] NOT NULL references Users , [CategoryID] [int] NOT NULL references Categories, [VoteCount] [int] NOT NULL, [CommentCount] [int] NOT NULL, [Title] [nvarchar](96) NOT NULL, [Description] [nvarchar](1024) NOT NULL, [CreatedAt] [datetime] NOT NULL, [UniqueName] [nvarchar](96) NOT NULL, [Url] [nvarchar](512) NOT NULL, [LastActivityAt] [datetime] NOT NULL) Insert into Categories (ShortName, Name) Values ('cat1', 'Test Category One') Insert into Categories (ShortName, Name) Values ('cat2', 'Test Category Two') --Dummy Users Insert into Users Select top 500 UserName=left(SO.name+SC.name, 32) , Password=left(reverse(SC.name+SO.name), 64) , Email=Left(SO.name, 128)+'@'+left(SC.name, 123)+'.com' , CreatedAt='1899-12-31' , LastActivityAt=GETDATE() from sysobjects SO Inner Join syscolumns SC on SO.id=SC.id go --dummy stories! -- A Count is given every 10000 record inserts (could be faster) -- RBAR method! set nocount on Declare @count as bigint Set @count = 0 begin transaction while @count The sort is definitely where your slow down is occuring. Sorting mainly gets done in the tempdb and a large table will cause LOTS to be added. Having an index on this column will definitely improve performance on an order by. Also, defining your Primary and Foreign Keys helps SQL Server immensly Your method that is listed in your code is elegant, and basically the same response that cdonner wrote except in c# and not sql. Tuning the db will probably give even better results! --Kris
