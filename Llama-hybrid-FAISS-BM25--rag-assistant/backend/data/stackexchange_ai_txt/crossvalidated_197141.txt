[site]: crossvalidated
[post_id]: 197141
[parent_id]: 197071
[tags]: 
Let us pause for a second and think about the purpose of this analysis. The recorded data consist of 240 time points for each of the 540672 (128x128x33) voxels. Some of this activity is presumably not relevant for the experiment (perhaps global modulations over the whole brain or correlated measurment noise), and the idea is: to identify this "nuisance" activity by looking at a subset of voxels corresponding to white matter or cerebrospinal fluid, i.e. not to neurons, and then to remove this nuisance activity from all voxels. So what you want to do is to look at the nuisance ROIs (let's say there is 100000 of them) and extract some leading PCs (let's say 8). This means that voxels are your dimensions/features and time points are your data points. You want to do PCA and to reduce the dimensionality from 100000 to 8. This allows to answer your questions: Question 2. The input to pca() should be of 240x540672 size because data points are supposed to be in rows and features in columns. Question 1. If the non-nuisance voxels are all zeroed out in the matrix, then you don't need to remove them. These will be variables with zero variance and they will not contribute anything to the PCA results. (But removing them can accelerate the computation quite a bit.) Question 3. If nuisanceData is an array of 240x540672 size and you run [COEFF, SCORE, LATENT] = pca(nuisanceData); You will get principal components in SCORE . You only need first 8 columns of it: SCORE(:,1:8) . This is the matrix of 240x8 size and it contains nuisance activity patterns. Now for each voxel in the full data you need to regress its activity onto these 8 columns and only keep the residuals. If properly coded, this can be one line of Matlab code. When the paper talks about "temporal projection or score of each selected PC" they mean one column of SCORE matrix. It is a time series (consists of 240 time points), hence probably why they call it "temporal projection", but I agree that this term is somewhat confusing. As a last remark: running pca() on 240x540672 matrix might take quite long. You can perform PCA much faster by coding it yourself via eigen-decomposition of the Gram matrix.
