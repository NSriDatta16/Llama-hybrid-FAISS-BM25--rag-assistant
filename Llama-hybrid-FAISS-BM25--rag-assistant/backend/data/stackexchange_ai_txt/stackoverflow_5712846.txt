[site]: stackoverflow
[post_id]: 5712846
[parent_id]: 1830221
[tags]: 
I haven't managed to solve this very elegantly, but there's a workaround by writing a custom completion function that simply greps the dictionary file for matches: function! MyCompleteFunction( findstart, base ) if a:findstart let line = getline('.') let start = col('.') - 1 while start > 0 && line[start - 1] =~ '[A-Za-z_]' let start -= 1 endwhile return start else silent call DictGrep( a:base, 'path\to\dictionary\file' ) let matches = [] for thismatch in getqflist() call add(matches, thismatch.text) endfor return matches endif endfunction Note that I have defined a function DictGrep() that actually performs the vimgrep. This is so I can call it silently and not be troubled by error messages: function! DictGrep( leader, file ) try exe "vimgrep /^" . a:leader . ".*/j " . a:file catch /.*/ echo "no matches" endtry endfunction Then simply define set the completefunc: setlocal completefunc=MyCompleteFunction() and then use for insert-mode completion (which could be mapped to replace your current dictionary completion binding). The vimgrep could be quite a slow operation, but I haven't noticed any problems unless there are hundreds of matches in the dictionary file. Hope this helps.
