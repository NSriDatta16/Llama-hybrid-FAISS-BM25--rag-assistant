[site]: stackoverflow
[post_id]: 4718824
[parent_id]: 
[tags]: 
What's the right way to integrate SQLite with my Java EE app?

I'm looking to add a pretty simple SQLite database to an existing Java EE application. I'm very used to using EJBs, ORMs, EntityManager , etc. to work with SQL databases. I've never not used some sort of ORM to work with relational DBs in Java. I've been "recommended" to use a Java wrapper for SQLite , rather than a JDBC driver - so I'm kind of naked and ORM-less (right?). I'd like to get this up and running quickly. Context I've been using an in-memory cache, implemented as a Map , which gets filled with entries linearly over time. At some point, like when the app runs overnight, the cache will use all available heap space. Hence, storing the cache on disk (as a SQLite database) rather than in memory (as a Java Map ). Questions How should I manage resources like SQLiteConnection ? Normally I would let the container worry about all this, but since I'm not using JDBC, I have to do all this !@#$%ing, non-value-added stuff manually - right? Is there a way to implement this cleanly and transparently ? I'd like to be able to just swap out an implementing class - e.g. replace FooMapCacheImpl with FooSQLiteCacheImpl . "[Most] methods are confined to the thread that was used to open the connection". Is there a simple, straightforward way to ensure that I don't try to access a SQLiteConnection from threads other than the one that opened it? ...and the flip side of that question: can I avoid creating a new connection every time I want to read from/write to the database? It seems a bona fide PITA to have to manage connections per-thread rather than, say, per instance, which is how I've been thinking about communicating with databases in the past. Basically I'm rather lost when it comes to working with databases in Java/Java EE, without using an ORM. What's the right way to do it?
