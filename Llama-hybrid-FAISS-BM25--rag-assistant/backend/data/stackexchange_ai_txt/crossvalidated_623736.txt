[site]: crossvalidated
[post_id]: 623736
[parent_id]: 
[tags]: 
How does weather forecasting work in production settings?

The way I understand time series models is that you usually have to .fit() them every time you want to make a forecast. This is because there might be trends that were not seen before and so you can't see too much in the future. My question is: is it possible to fit it once to get all the parameters and then just forecast() using unseen data assuming my data is stationary . For example: data = [y_1, ..., y_n, y_n+1, ..., y_m] Train the model on [y_1, ..., y_n] then do something like fit.predict([y_n+1, ..., y_m]) to get forecast for y_m+1. I know I can do fit.forecast(steps = m-(n+1)), but such a forecast would not take into account all of y_n+1...y_m data that I've observed since the model was trained. As I said, ideally, I'd fit() it at every prediction time, but because of the nature of the problem that may be computationally hard. The problem I'm tackling is similar to weather forecasting or stock prediction for a lot of different stocks (each point in the map would have a different history and trends, just like different stocks). What's the best way to go about it? I know I could also train an XGB Regressor or other regressor using lagged variables, but I'm curious about how to do it with time series.
