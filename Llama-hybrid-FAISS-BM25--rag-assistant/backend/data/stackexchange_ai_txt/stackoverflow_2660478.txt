[site]: stackoverflow
[post_id]: 2660478
[parent_id]: 2660152
[tags]: 
I'd personally second the suggestion from Gordon to just use a lambda (or created) function and either do: array_map(function($el) { return $el * 60; }, $input_array); (PHP >= 5.3) or array_map(create_function('$el', 'return $el * 60;'), $input_array); (PHP Definitely I see no reasons for duplicating the array (can become cumbersome if lot of values are involved); also, pay attention that using foreach (which I second can be handy) can also be dangerous if you're not working with it carefully ...and then maintenance can become daunting anyways (because you have to remember to deal with it every time you work on that code). If you have no reasons for optimizing at this stage (IE your application has not problems of speed), don't do it now and don't worry about using array_map. You can think about ease of maintenance now and optimize later, in case you really need to. In fact, if you go by reference and then you use foreach again, you might step into unexpected results (see example below...) $a=array('1','2','3'); foreach ($a as &$v) { $v *= 60; } print_r($a); foreach ($a as $v); print_r($a); Output is: Array ( [0] => 60 [1] => 120 [2] => 180 ) Array ( [0] => 60 [1] => 120 [2] => 120 ) Probably not what you expect on the second cycle. This is why I usually avoid the foreach & byref combo when I can.
