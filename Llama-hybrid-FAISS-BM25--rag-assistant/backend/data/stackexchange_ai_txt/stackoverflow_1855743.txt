[site]: stackoverflow
[post_id]: 1855743
[parent_id]: 1855154
[tags]: 
NSTimers are unusual objects in that they don't attach to the object that creates them but to the applications NSRunLoop instances. If a timer is one shot, you don't have to retain any reference to it. You should start the timer and forget about it. In your case you need two track two time intervals (1) the passing of each second so you can update the interface and (2) passing of the two minute interval total. For (1) you should evoke a repeating timer of one second interval that calls a method in the modalviewcontroller that updates the interface. The best place to evoke the timer would be in the controlller's viewDidAppear method. For (2) you can have property of the controller that stores a value of 159 and then have the method called by the timer decrement it each time the method is called. When it reaches zero, it invalidates the timer. You should be aware that timers are affected by how quickly the runloop processes all events. If you have intensive background processes that don't pause every few microseconds, the timer may fail to fire on time. If you run into this problem, you should consider creating a separate threads for the splash screen and the configuration. I do have to wonder why you need display the splash screen for exactly two minutes. As an aside, the iPhone Human Interface Guidelines expressly state that you should not use splash screens. They can cause your app to be rejected. Using a splash screen that hangs around to long gives the impression that the app or the phone as failed and Apple doesn't like that either. If you have some heavy duty configuration to do before the app is usable, it is better to create an interface that shows the configuration in process. That way, it is clear that the app is working and not just hung. Even better, because no one on the move wants to stare at a static iPhone app for two minutes, it's better to get your user started doing something in one thread while the app configures in another. For example, in some kind of url connection, you could start the user typing in some and address of some data while the app makes the connection. For a game, you could have the user select their user name, review high scores, view instructions etc. You should remember in the design process that people use apps on the iPhone primarily because it saves them time. They don't have drag out a laptop or go to a computer to perform some task. Your app design should focus on getting the user's task performed as quickly as possible. That is true even in the case of a game. Normally, I would warn against premature optimization but this is kind of big deal. Edit01: You want something like this in your splash screen controller. @interface SplashScreenViewController : UIViewController { NSInteger countDown; IBOutlet UILabel *displayTimeLabel; } @property NSInteger countDown; @property(nonatomic, retain) UILabel *displayTimeLabel; @end #import "SplashScreenViewController.h" @implementation SplashScreenViewController @synthesize countDown; @synthesize displayTimeLabel; -(void) viewDidAppear:(BOOL)animated{ countDown=120; NSTimer *secTimer=[NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(updateCountDown:) userInfo:nil repeats:YES]; }//------------------------------------viewDidAppear:------------------------------------ -(void) updateCountDown:(NSTimer *) theTimer{ NSInteger mins,secs; NSString *timeString; countDown--; if (countDown>=0) { mins=countDown/60; secs=countDown%60; displayTimeLabel.text=[NSString stringWithFormat:@"%02d:%02d",mins,secs]; } else { [theTimer invalidate]; // do whatever you wanted to do after two minutes } }//-------------------------------------(void) updateCountDown------------------------------------ @end -------
