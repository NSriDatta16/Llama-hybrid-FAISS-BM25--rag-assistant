[site]: stackoverflow
[post_id]: 314370
[parent_id]: 312904
[tags]: 
I agree with Steven Lowe that there is no trade-off between unit testing and functional testing, as they are used for very different purposes. Unit tests are about method and type verification, and also regression testing. Functional tests are about functional, scenario, and feasibility testing. In my opinion, there is almost no overlap, If it helps, here are my testing categories. Developers start from the inside and work outwards, focusing on code: Assertions - verify data flow and structures Debugger - verify code flow and data Unit testing - verify each function Integration testing - verify sub-systems System testing - verify functionality Regression tests - verify defects stay fixed Security tests - verify system can't be penetrated easily. Testers start from the outside and work inwards, focusing on features: Acceptance tests - verify end-user requirements Scenario tests - verify real-world situations Global tests - verify feasible inputs Regression tests - verify defects stay fixed Usability tests - verify that system is easy to use Security tests - verify system can't be penetrated easily Code coverage - testing untouched code Compatibility - with previous releases Looking for quirks and rough edges. End-users work from the outside, and usually have little focus: Acceptance tests - verify end-user requirements Scenario tests - verify real-world situations Usability tests - verify that system is easy to use Looking for quirks and rough edges.
