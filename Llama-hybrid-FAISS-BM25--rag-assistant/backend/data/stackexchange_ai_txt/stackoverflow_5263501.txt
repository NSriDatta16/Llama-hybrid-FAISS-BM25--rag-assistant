[site]: stackoverflow
[post_id]: 5263501
[parent_id]: 5263287
[tags]: 
There are ways to condense the code you listed, but what you should really strive for is making the code more readable. def average(a): """Return a tuple where every element of ``a`` is replaced by the average of the values of ``a``.""" length = len(a) average = sum(a) / length return (average,) * length # A 1-tuple containing the average, repeated length times This has the added benefit of being able to accept tuples of any input length. One change that was made in this version of the code is that the elements of the tuple are not first coerced to integers. Unless there is some specialised reason why you need this, you should probably separate that logic out into a separate bit of code. data = (1, '2', 3.0) normalised_data = (int(x) for x in data) # A generator expression that yields integer-coerced elements of data result = average(normalised_data) Of course, if you insist on a condensed answer, Sven's answer is functionally equivalent to mine.
