[site]: stackoverflow
[post_id]: 4483260
[parent_id]: 4482910
[tags]: 
This will merge them in order, with the last one being the most important: parameters = {} parameters.update(sections[0]) parameters.update(sections[6]) parameters.update(sections[1]) parameters.update(sections[3]) parameters.update(sections[5]) parameters.update(sections[4]) parameters.update(sections[7]) It's unclear to me what you mean with "Merging criteria". Possibly you mean that some values are more important then others, but then there is no good way of doing it except looking at each parameter itself. Update: No, there is no quick and elegant way to do what you want. You need to first sort your sections on how well they match your merging criteria, which needs to be a list of keys and values (OrderedDict works, but a list of dictionaries or tuples work too). Since you care about how unique the parameters are when matched, you need to have the number of parameters for the section as a part of the sorting key. You need then take the sections in that order, and merge them. There is no workaround, really. :) There may however be quick and elegant ways to solve your use-case, but we don't know you don't tell us why you are doing it. It may be worth asking a question about that too.
