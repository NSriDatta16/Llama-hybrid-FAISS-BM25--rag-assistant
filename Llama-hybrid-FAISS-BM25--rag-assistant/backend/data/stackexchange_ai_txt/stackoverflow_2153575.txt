[site]: stackoverflow
[post_id]: 2153575
[parent_id]: 2153466
[tags]: 
You are calculating your standard deviation as: sx = sqrt((sx / n)); and similarly for sy . The equation you have used uses n-1 in the denominator for calculating this ( reason : there are n-1 degrees of freedom, so you should divide by n-1 ). So, your sx and sy are actually sx' and sy' , where sx' = sx*sqrt(n-1)/sqrt(n) , and sy' = sy*sqrt(n-1)/sqrt(n) . So, sx' * sy' = sx * sy * (n-1)/n . Since sx*sy is in the denominator, your calculation is off by a factor of n/(n-1) . Dividing this by n gives you the factor you need outside of the summation. So if you changed your code to calculate the sample standard deviation (divide by n-1 ), you can finally divide by n-1 and your code will get the result you expect. For efficiency, since the division is going to cancel out anyway, you can save some computation and increase your accuracy by simply not dividing by n-1 in calculations of sx and sy , and then omit the final division as well: sx = sqrt((sx / n)); sy = sqrt((sy / n)); become sx = sqrt(sx); sy = sqrt(sy); and: r /= (n); goes away altogether. Edit : Since you asked... There is no reason to use float unless you have to. double gives you much better precision. By default, stdout is line buffered on most systems, so your prompt may not appear before your call to scanf() . To make sure your prompt shows, do fflush(stdout); after your printf() call. It is very hard to use scanf() safely. For reading numbers, scanf() has undefined behavior when someone enters a number that's not in the range of the data type. Also, it is bad for cases like when someone enters a non-integer in response to your prompt. For your case, you can make n passable as a command-line parameter, and then use strtol(argv[1]) to parse the number. If you want to read from stdin anyway, use fgets() + sscanf() combination, or fgets() + strtol() . You can reduce the number of loops in your program. For one, you can calculate xbar and ybar in the same loop. Even better, you can write a function double avg(double *data, int n) , that calculates average of n values, and then do: xbar=avg(x, n); , ybar=avg(y, n); . Similarly, you can define a function double std(double *data, int n) , and then use that to calculate sx and sy . Finally, although it's okay, you have way too many parentheses: sqrt((sx / n)); is better written as sqrt(sx / n); . r /= (n); doesn't need the parentheses either.
