[site]: stackoverflow
[post_id]: 660781
[parent_id]: 660752
[tags]: 
Where is my reasoning wrong/what do I not understand? type_1::array (not strictly C syntax) is not an int * ; it is an int [3] . How do I declare type2_t to make ptr point to the first member of the array? typedef struct { int ptr[]; } type2_t; That declares a flexible array member. From the C Standard (6.7.2.1 paragraph 16): However, when a . (or ->) operator has a left operand that is (a pointer to) a structure with a flexible array member and the right operand names that member, it behaves as if that member were replaced with the longest array (with the same element type) that would not make the structure larger than the object being accessed; the offset of the array shall remain that of the flexible array member, even if this would differ from that of the replacement array. I.e., it can alias type1_t::array properly.
