[site]: stackoverflow
[post_id]: 4252114
[parent_id]: 
[tags]: 
qt: pyqt: QTreeView internal drag and drop almost working... dragged item disappears

I almost have a completely working drag and drop re-order within a QTreeView. Everything seems to be ok except the dropped object never appears (though I can reference it numerous different ways that proves to me that it actually exists where it should be). If anyone has a moment and could run the following code and let me know what I am doing wrong I would really appreciate it. I have been banging my head against this process for over a week now: You should be able to just copy and run the following code (I have a bunch of print statements in it that seem to indicate that everything is working correctly but obviously something is off): import sys from PyQt4 import QtGui from PyQt4 import QtCore ################################################################################ class Branch(object): """ Basic branch/leaf node. """ #--------------------------------------------------------------------------- def __init__(self, name, value, parent=None): """ Constructor. """ super(Branch, self).__init__() #name and parent are both to be stored directly as variables self.name = name self.parent = parent self.value = value #store sub-objects (usually other branches) self.objD = dict() self.nameL = list() #--------------------------------------------------------------------------- def get_name(self): """ Getter. """ return self.name #--------------------------------------------------------------------------- def get_parent(self): """ Returns the parent of this object. """ return self.parent #--------------------------------------------------------------------------- def set_value(self, value): """ Generic setter for all settings. """ self.value = value #--------------------------------------------------------------------------- def get_value(self): """ Generic getter for all settings. Returns the display value """ return self.value #--------------------------------------------------------------------------- def add_child_obj(self, obj, row=None): """ Adds the param object to the dict and list. """ self.objD[obj.get_name()] = obj if row == None: self.nameL.append(obj.get_name()) else: self.nameL.insert(row, obj.get_name()) print "JUST ADDED CHILD AT ROW:", self.nameL.index(obj.get_name()) #--------------------------------------------------------------------------- def remove_child_at_row(self, row): """ Removes the param object from the dict and list. """ childName = self.nameL[row] del(self.nameL[row]) del(self.objD[childName]) #--------------------------------------------------------------------------- def get_child_count(self): """ Returns the number of children in this branch. """ return len(self.nameL) #--------------------------------------------------------------------------- def get_child_list(self): """ Returns a list of the visible children names. """ return self.nameL #--------------------------------------------------------------------------- def get_child_at_row(self, row): """ Returns a specific child object based on its ordinal (only consider visible children). """ childName = self.nameL[row] return self.objD[childName] #--------------------------------------------------------------------------- def get_child_by_name(self, childName): """ Returns a specific child object based on its name. """ return self.objD[childName] #--------------------------------------------------------------------------- def get_index(self): """ Returns this object's index position with regard to its siblings. """ siblingsL = self.parent.get_child_list() return siblingsL.index(self.get_name()) ################################################################################ class MyTreeView(QtGui.QTreeView): """ Overrides the QTreeView to handle keypress events. """ #--------------------------------------------------------------------------- def __init__(self, model, parent=None): """ Constructor for the TreeView class. """ super(MyTreeView, self).__init__(parent) self.setModel(model) ################################################################################ class MyTreeModel(QtCore.QAbstractItemModel): """ My tree view data model """ #--------------------------------------------------------------------------- def __init__(self, root): """ Constructor for the TreeModel class """ super(MyTreeModel, self).__init__() self.root = root self.fontSize = 8 self.selection = None #--------------------------------------------------------------------------- def columnCount(self, index=QtCore.QModelIndex()): """ Returns the number of columns in the treeview. """ return 1 #--------------------------------------------------------------------------- def rowCount(self, index=QtCore.QModelIndex()): """ Returns the number of children of the current index obj. """ if index.column() > 0: return 0 if not index.isValid(): item = self.root else: item = index.internalPointer() if item: return item.get_child_count() return 0 #--------------------------------------------------------------------------- def index(self, row, column, parent): """ Returns a QModelIndex item for the current row, column, and parent. """ if not self.hasIndex(row, column, parent): return QtCore.QModelIndex() if not parent.isValid(): parentItem = self.root else: parentItem = parent.internalPointer() childItem = parentItem.get_child_at_row(row) if childItem: return self.createIndex(row, column, childItem) else: return QtCore.QModelIndex() #--------------------------------------------------------------------------- def parent(self, index): """ Returns a QModelIndex item for the parent of the given index. """ if not index.isValid(): return QtCore.QModelIndex() childItem = index.internalPointer() if not childItem: return QtCore.QModelIndex() parentItem = childItem.get_parent() if parentItem == self.root: return QtCore.QModelIndex() return self.createIndex(parentItem.get_index(), 0, parentItem) #--------------------------------------------------------------------------- def data(self, index, role=QtCore.Qt.DisplayRole): """ Returns the text or formatting for a particular cell, depending on the role supplied. """ #invalid indexes return invalid results if not index.isValid(): return QtCore.QVariant() #access the underlying referenced object item = index.internalPointer() #edit role displays the raw values if role == QtCore.Qt.EditRole: return item.get_value() #return the data to display if role == QtCore.Qt.DisplayRole or role == QtCore.Qt.EditRole: return item.get_value() return QtCore.QVariant() #--------------------------------------------------------------------------- def headerData(self, index, orientation, role=QtCore.Qt.DisplayRole): """ Returns the text for the horizontal headers (parameter names) """ if role == QtCore.Qt.TextAlignmentRole: if orientation == QtCore.Qt.Horizontal: alignment = int(QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter) return QtCore.QVariant(alignment) alignment = int(QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter) return QtCore.QVariant(alignment) if role != QtCore.Qt.DisplayRole: return QtCore.QVariant() if orientation == QtCore.Qt.Horizontal: if int(index) == 0: return "Name" #--------------------------------------------------------------------------- def supportedDropActions(self): """ We allow re-ordering. """ return QtCore.Qt.MoveAction #--------------------------------------------------------------------------- def flags(self, index): """ Returns whether or not the current item is editable/selectable/etc. """ if not index.isValid(): return QtCore.Qt.ItemIsEnabled #by default, you can't do anything enabled = QtCore.Qt.ItemIsEnabled selectable = QtCore.Qt.ItemIsSelectable editable = QtCore.Qt.ItemIsEditable draggable = QtCore.Qt.ItemIsDragEnabled droppable = QtCore.Qt.ItemIsDropEnabled #return our flags. return enabled | selectable| editable| draggable| droppable #--------------------------------------------------------------------------- def setData(self, index, value, role=QtCore.Qt.EditRole): """ Sets the data. """ #convert the value into a string if value: item = index.internalPointer() item.set_value(value) self.emit(QtCore.SIGNAL("dataChanged(QModelIndex,QModelIndex)"), index, index) return True #--------------------------------------------------------------------------- def supportedDropActions(self): """ Only allow moves """ return QtCore.Qt.MoveAction #--------------------------------------------------------------------------- def mimeTypes(self): """ Only accept the internal custom drop type which is plain text """ types = QtCore.QStringList() types.append('text/plain') return types #--------------------------------------------------------------------------- def mimeData(self, index): """ Wrap the index up as a list of rows and columns of each parent/grandparent/etc """ rc = "" theIndex = index[0] #
