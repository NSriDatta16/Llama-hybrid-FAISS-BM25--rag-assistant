[site]: stackoverflow
[post_id]: 3243264
[parent_id]: 3243035
[tags]: 
In Scheme, I prefer using a list instead of the "rest" argument because rest argument makes implementing procedures like the following difficult: > (define (call-average . ns) (average ns)) > (call-average 1 2 3) ;; => BANG! Packing arbitrary number of arguments into a list allows you to perform any list operation on the arguments. You can do more with less syntax and confusion. Here is my Scheme version of average that take 'n' arguments: (define (average the-list) (let loop ((count 0) (sum 0) (args the-list)) (if (not (null? args)) (loop (add1 count) (+ sum (car args)) (cdr args)) (/ sum count)))) Here is the same procedure in Common Lisp: (defun average (the-list) (let ((count 0) (sum 0)) (dolist (n the-list) (incf count) (incf sum n)) (/ sum count)))
