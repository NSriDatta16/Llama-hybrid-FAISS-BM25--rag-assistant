[site]: stackoverflow
[post_id]: 482590
[parent_id]: 
[tags]: 
What's the best way to pass configuration to application agnostic modules?

I am working on an application that consists of several modules which in turn will be used in other applications as well. Each of these modules needs some configuration options, but should not be aware of the options of other modules, and also should not require other modules to exist. Some settings are shared between modules. Lets say Module A requires settings x and y, Module B requires settings y and z. Settings are stored either in the registry or in one or more .ini files. So far I have considered the following approaches: Have a global unit ("global.pas") that is included in all modules and contains global variables with the settings. I don't like this approach very much because it would require all applications to have such a unit and it is bound to collect lots of additional code that has nothing to do with the original purpose. So eventually each application will have its own incompatible global unit. Have configuration classes for each module that contain all the settings required for that module. These are passed into the module from some central point in the application which also handles reading and writing them to some permanent form (e.g. use JvAppStorage). This requires some synchronisation between the modules because some options will be shared between them, so if the option is changed in one module, this change must somehow be reflected in the configuration of another module (not necessarily in real time but the next time the module is initialized). Have a generic configuration class that is passed to each module and that contains the settings for all modules as properties. Each module accesses only those settings it knows about. The problem here might be that name clashes can occur whithout being noticed. Also I don't like the idea of passing configuration options around that are not necessary for a module. In addition, every application will contain a different subset of modules but would end up containing the same configuration class with the options for all possible modules. (This isn't very different from the global unit approach above.) Have a generic configuration class that is passed to each module, like above. But instead of having properties, the modules access their settings by name (in the easiest case this could be a TCustomIniFile). This avoids having settings for all modules available in all applications, but introduces possible type compatibility problems and again, name clashes may become an issue (unless each module prefixes its options with its name, but then they can no longer share options). I guess everybody who wrote a modularized system has faced this issue and found some solutions they later on were stuck with, whether they still liked them or not. I have been there too, several times and am still looking for the golden bullet. Maybe somebody else has already found the ideal solution? (This is Delphi 2007 in case it matters. I am already using the JCL / JVCL.)
