[site]: stackoverflow
[post_id]: 1577434
[parent_id]: 1577037
[tags]: 
How to implement positions has been answered. But what you asked is how to limit users in their placement, which is a different thing. Presumably, you're planning to create a drawing area, and you'll detect mouse clicks. How you'd limit stone placement to the intersections is like what drawing programs do to implement a feature called "snap" (as in "snap to grid"). Basically, that just means reducing the clicks which fall over a range of pixels in each dimension into being on one of the lines. Doing this in both dimensions puts the moved click at a point. Essentially, what you're doing is to find the midpoint of each cell, and any click which falls between one cell midpoint and the next will be counted as being on the line between those midpoints. So basically, this would be something like this: // Since traditionally, boards are not square, you'd call this twice: once with the // width in X for the X click, and once again for Y. // Naturally, you'll want to accomodate e.g., 9x9 boards for short games. int snapClick (int gridWidth, int clickPos, int numCells) { int cellWidth = (int) (gridWidth / numCells); int snappedClick = Math.round ((clickPos + (cellWidth/2)) / cellWidth); return snappedClick; } Incidentally, in actual games, stones aren't perfectly placed, so games have a pleasing organic feel. You might want to consider a solution in which you store not only the position of the stones in the grid, but also in some slightly-less-than-perfectly alignment on the screen, for display.
