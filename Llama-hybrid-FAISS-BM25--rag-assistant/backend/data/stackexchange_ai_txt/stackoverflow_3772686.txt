[site]: stackoverflow
[post_id]: 3772686
[parent_id]: 3771424
[tags]: 
[edited for clarity] When reading items from a text file, they are imported as strings, not numbers. This means that if your text file has the number 3 and you read it into Python, you would need to convert the string to a number before carrying on arithmetic operations. Now, you have a text file with colums. Each column has a header and a collection of items. Each item is either a number or not. If it is a number, it will correctly be converted by the function float , if it is not a valid number (this is, if the conversion does not exist) the conversion will raise an exception called ValueError . So you loop through your list and items as it has been correctly explained in more than one answer. If you can convert to float, accumulate the statistic. If not, go on ignoring that entry. If you need more info about what is "duck typing" (a paradigm which can be resumed as "better to ask for forgiveness that for permission") please check the Wikipedia link . If you are getting into Python you will hear the term very often. Below I present a class which can accumulate an statistic (you are interested in the mean). You can use an instance of that class for every column in your table. class Accumulator(object): """ Used to accumulate the arithmetic mean of a stream of numbers. This implementation does not allow to remove items already accumulated, but it could easily be modified to do so. also, other statistics could be accumulated. """ def __init__(self): # upon initialization, the numnber of items currently # accumulated (_n) and the total sum of the items acumulated # (_sum) are set to zero because nothing has been accumulated # yet. self._n = 0 self._sum = 0.0 def add(self, item): # the 'add' is used to add an item to this accumulator try: # try to convert the item to a float. If you are # successful, add the float to the current sum and # increase the number of accumulated items self._sum += float(item) self._n += 1 except ValueError: # if you fail to convert the item to a float, simply # ignore the exception (pass on it and do nothing) pass @property def mean(self): # the property 'mean' returns the current mean accumulated in # the object if self._n > 0: # if you have more than zero items accumulated, then return # their artithmetic average return self._sum / self._n else: # if you have no items accumulated, return None (you could # also raise an exception) return None # using the object: # Create an instance of the object "Accumulator" my_accumulator = Accumulator() print my_accumulator.mean # prints None because there are no items accumulated # add one (a number) my_accumulator.add(1) print my_accumulator.mean # prints 1.0 # add two (a string - it will be converted to a float) my_accumulator.add('2') print my_accumulator.mean # prints 1.5 # add a 'NA' (will be ignored because it cannot be converted to float) my_accumulator.add('NA') print my_accumulator.mean # prints 1.5 (notice that it ignored the 'NA') Cheers.
