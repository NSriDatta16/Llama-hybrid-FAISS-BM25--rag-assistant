[site]: stackoverflow
[post_id]: 3732881
[parent_id]: 3732823
[tags]: 
From the documentation of UnhandledException event, This event provides notification of uncaught exceptions. It allows the application to log information about the exception before the system default handler reports the exception to the user and terminates the application. It is just a hook method where you can insert your custom code code, before the default error reporting mechanism kicks in. An unhandled exception will always take down your process. It doesn't allow you to replace the whole behavior. I'd first question the need behind your quest.. The simplest approach is to just adopt a team convention that Main and all Thread Functions have an enclosing try-catch. There seem to be new types+events(DispatcherUnhandledException) to catch unhandled exceptions, but I'd question if its worth the complexity it drags in. It should be a last-line of defence, not the primary one. e.g. if an unhandled exception occurs in a different thread, you'd need more code (since exceptions are not routed across threads & it'd just terminate the process).
