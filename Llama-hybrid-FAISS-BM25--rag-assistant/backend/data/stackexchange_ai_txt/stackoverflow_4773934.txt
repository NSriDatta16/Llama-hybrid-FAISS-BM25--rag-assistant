[site]: stackoverflow
[post_id]: 4773934
[parent_id]: 
[tags]: 
python: representing square grid that wraps on itself (cylinder)

I am modeling something that occurs on a square grid that wraps on itself (i.e., if you walk up past the highest point, you end up at the lowest point, like a cylinder; if you walk to the right, you just hit the boundary). I need to keep track of the location of various agents, the amount of resources at different points, and calculate the direction that agents will be moving in based on certain rules. What's the best way to model this? Should I make a class that represents points, which has methods to return neighboring points in each direction? If so, I would probably need to make it hashable so that I can use it as keys for the dictionary that contains the full grid (I assume such grid should be a dictionary?) Or should I make a class that describes the whole grid and not expose individual points as independent objects? Or should I just use regular (x, y) tuples and have methods elsewhere that allow to look up neighbors? A lot of what I'll need to model is not yet clearly defined. Furthermore, I expect the geometry of the surface might possibly change one day (e.g., it could wrap on itself in both directions). EDIT: One additional question: should I attach the information about the quantity of resources to each Point instance; or should I have a separate class that contains a map of resources indexed by Point?
