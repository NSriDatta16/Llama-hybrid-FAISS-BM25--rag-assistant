[site]: datascience
[post_id]: 33836
[parent_id]: 
[tags]: 
Tflearn "nan" weight matrices

I wanted to build a DQN. So I followed this code and watched some videos about the idea of DQN. My Code is this (mine is written in tflearn and his in keras): import tflearn as tfl import numpy as np import gym from collections import deque import random class DeepQ(): def __init__(self,game="SpaceInvaders-v0"): self.game=game self.env=gym.make(game) self.storage=deque() self.filter_size=[4,4] self.itertime=1000 self.random_move_prop=0.8 np.random.seed(1) self.minibatch_size=250 self.discounted_future_reward=0.9 def Q_Network(self,learning_rate=0.0000001,load=False,model_path=None,checkpoint_path="X://xxx//xxx//Documents//GitHub//Deeplearning_for_starters//Atari_modells//checkpoint.ckpt"): if load==False: net=tfl.layers.core.input_data(shape=[None,210,160,3])# rework this stuff net=tfl.layers.conv.conv_2d(net,nb_filter=3,filter_size=self.filter_size,activation='relu') net=tfl.layers.conv.conv_2d(net,nb_filter=3,filter_size=self.filter_size,activation="relu") #net=tfl.layers.fully_connected(net,20,activation="relu") net=tfl.layers.flatten(net) #net=tfl.layers.fully_connected(net,18,activation="relu") net=tfl.layers.fully_connected(net,10,activation='relu') net=tfl.layers.fully_connected(net,self.env.action_space.n,activation="linear") net=tfl.layers.estimator.regression(net,learning_rate=learning_rate) self.modell=tfl.DNN(net,checkpoint_path=checkpoint_path) else: net=tfl.layers.core.input_data(shape=[None,210,160,3]) net=tfl.layers.conv.conv_2d(net,nb_filter=3,filter_size=self.filter_size,activation='relu') net=tfl.layers.conv.conv_2d(net,nb_filter=3,filter_size=self.filter_size,activation="relu") #net=tfl.layers.fully_connected(net,20,activation="relu") net=tfl.layers.flatten(net) #net=tfl.layers.fully_connected(net,18,activation="relu") net=tfl.layers.fully_connected(net,10,activation='relu') net=tfl.layers.fully_connected(net,self.env.action_space.n,activation="linear") net=tfl.layers.estimator.regression(net,learning_rate=learning_rate) self.modell=tfl.DNN(net) self.modell.load(model_path,weights_only=True) def Q_Learning(self): observation=self.env.reset() for i in range(self.itertime): #self.env.render() observation=observation.reshape(1,210,160,3) if np.random.rand() The problem is that, if I run the predict function the network does nothing. I figured out that all weights are filled with nan . What I have read is that it can depend on the learning rate, so I have lowered the rate from 1e-3 to the actual one, but this changed nothing.
