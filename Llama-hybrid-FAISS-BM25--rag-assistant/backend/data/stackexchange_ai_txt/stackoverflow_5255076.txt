[site]: stackoverflow
[post_id]: 5255076
[parent_id]: 5254769
[tags]: 
Frankly, the common practice is to adopt a MVC framework. Java EE 6 offers JSF 2.0 out the box as a component based MVC framework. CRUD is possible with a single bean and a single view. You can find a basic example in this answer . The sole controller is provided by JSF itself, the FacesServlet . Other MVC frameworks follows less or more the same ideology. If you don't want to adopt a MVC framework because you would like to learn JSP/Servlets first and/or your project won't go beyond a CRUD form, then it is hard to point out the "right" approach. At least, the use of multiple URL patterns and if/else statements is a poor sign. You have basically 2 options. Just use 4 separate servlets. With Servlet 3.0 you don't need to fiddle with web.xml anymore and it's really easy to add another servlet class. Each servlet class functions as an "action" class and each one has a clear responsibility. Use a single servlet, but don't use multiple URL patterns and don't use if/else blocks to determine the actions. Map it on a single URL pattern such as /action/* or *.do so that you can invoke it by URLs like action/create , action/read , etc or by create.do , read.do , etc. Then create an interface like follows public interface Action { void execute(HttpServletRequest request, HttpServletResponse response); } Implement all actions based on this interface, CreateAction , ReadAction , etc and have in your servlet a Map which you fill as follows during init() method: actions.put("create", new CreateAction()); actions.put("read", new ReadAction()); // ... And invoke it as follows (assuming an URL pattern of /action/* is been used) actions.get(request.getPathInfo().substring(1)).execute(request, response); That's also how the average MVC framework works deep under the covers. See also: Design patterns web based applications
