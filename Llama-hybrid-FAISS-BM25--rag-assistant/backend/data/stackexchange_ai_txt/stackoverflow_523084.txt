[site]: stackoverflow
[post_id]: 523084
[parent_id]: 
[tags]: 
fopen in C on solaris

I've been trying to get this code to work for hours! All I need to do is open a file to see if it is real and readable. I'm new to C so I'm sure there is something stupid I'm missing. Here is the code (shorthand, but copied): #include main() { char fpath[200]; char file = "/test/file.this"; sprintf(fpath,"~cs4352/projects/proj0%s",file); FILE *fp = fopen(fpath,"r"); if(fp==NULL) { printf("There is no file on the server"); exit(1); } fclose(fp); //do more stuff } I have also verified that the path is correctly specifying a real file that I have read permissions to. Any other ideas? Edit 1: I do know that the fpath ends up as "~cs4352/projects/proj0/test/file.this" Edit 2: I have also tried the using the absolute file path. In both cases, I can verify that the paths are properly built via ls. Edit 3: There errno is 2... I'm currently trying to track what that means in google. Edit 4: Ok, errno of 2 is "There is no such file or directory". I am getting this when the reference path in fopen is "/home/courses1/cs4352/projects/proj0/index.html" which I verified does exist and I have read rights to it. As for the C code listed below, there may be a few semantic/newbie errors in it, but gcc does not give me any compile time warnings, and the code works exactly as it should except that it says that it keeps spitting errno of 2. In other words, I know that all the strings/char array are working properly, but the only thing that could be an issue is the fopen() call. Solution: Ok, the access() procedure is what helped me the most (and what i am still using as it is less code, not to mention the more elegant way of doing it). The problem actually came from something that I didn't explain to you all (because I didn't see it until I used access()). To derrive the file, I was splitting strings using strtok() and was only splitting on " \n", but because this is a UNIX system, I needed to add "\r" to it as well. Once I fixed that, everything fell into place, and I'm sure that the fopen() function would work as well, but I have not tested it. Thank you all for your helpful suggestions, and especially to Paul Beckingham for finding this wonderful solution. Cheers!
