[site]: stackoverflow
[post_id]: 419625
[parent_id]: 418210
[tags]: 
The biggest problem you can spot is definitely Dependencies Cycles. The tool NDepend proposes an interactive dependency Matrix and a dependency Graph that will help to spot dependency cyles . Disclaimer: I am one of the developers of the tool Notice that the dependency matrix is much more adapted than graph to spot cycles. Because a cycle avoid the matrix to be triangular. The other ranges of problems are relative to your application structure: For example, is it normal that the UI uses directly the DB? or much worse, the DB depends on UI? You can write code rules over LINQ queries (CQLinq) to check for forbidden dependencies. The following code rule check that UI types shouldn't use directly DB types: // UI layer shouldn't use directly DB types warnif count > 0 // UI layer is made of types in namespaces using a UI framework let uiTypes = Application.Namespaces.UsingAny(Assemblies.WithNameIn("PresentationFramework", "System.Windows", "System.Windows.Forms", "System.Web")).ChildTypes() // You can easily customize this line to define what are DB types. let dbTypes = ThirdParty.Assemblies.WithNameIn("System.Data", "EntityFramework", "NHibernate").ChildTypes() // Ideally even DataSet and associated, usage should be forbidden from UI layer: // http://stackoverflow.com/questions/1708690/is-list-better-than-dataset-for-ui-layer-in-asp-net .Except(ThirdParty.Types.WithNameIn("DataSet", "DataTable", "DataRow")) from uiType in uiTypes.UsingAny(dbTypes) let dbTypesUsed = dbTypes.Intersect(uiType.TypesUsed) select new { uiType, dbTypesUsed }
