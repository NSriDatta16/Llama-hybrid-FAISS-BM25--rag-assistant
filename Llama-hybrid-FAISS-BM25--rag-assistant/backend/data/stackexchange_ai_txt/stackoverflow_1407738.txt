[site]: stackoverflow
[post_id]: 1407738
[parent_id]: 1407690
[tags]: 
Use them when you need to. Read some more examples and tutorials until you understand what pointers are , and this ought to be a lot clearer :) The second case creates an array in memory, with space for four bytes. When you use that array's name, you magically get back a pointer to the first (index 0) element. And then the [] operator then actually works on a pointer, not an array - x[y] is equivalent to *(x + y) . And yes, this means x[y] is the same as y[x] . Sorry. Note also that when you add an integer to a pointer, it's multiplied by the size of the pointed-to elements, so if you do someIntArray[1] , you get the second (index 1) element, not somewhere inbetween starting at the first byte. Also, as a final gotcha - array types in function argument lists - eg, void foo(int bar[4]) - secretly get turned into pointer types - that is, void foo(int *bar) . This is only the case in function arguments. Your third example declares a struct type with two names - struct A and B . In pure C, the struct is mandatory for A - in C++, you can just refer to it as either A or B . Apart from the name change, the two types are completely equivalent, and you can substitute one for the other anywhere, anytime without any change in behavior. C has three places things can be stored: The stack - local variables in functions go here. For example: void foo() { int x; // on the stack } The heap - things go here when you allocate them explicitly with malloc , calloc , or realloc . void foo() { int *x; // on the stack x = malloc(sizeof(*x)); // the value pointed to by x is on the heap } Static storage - global variables and static variables, allocated once at program startup. int x; // static void foo() { static int y; // essentially a global that can only be used in foo() } No idea. I wish I didn't need to answer all questions at once - this is why you should split them up :) Note: formatting looks ugly due to some sort of markdown bug, if anyone knows of a workaround please feel free to edit (and remove this note!)
