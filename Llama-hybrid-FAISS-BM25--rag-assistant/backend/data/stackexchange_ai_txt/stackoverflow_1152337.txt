[site]: stackoverflow
[post_id]: 1152337
[parent_id]: 1150811
[tags]: 
I personally don't like the idea of storing full html in the database. Here's an attempt at solving the problem. Don't go for a potentially infinite number of layouts. Yes all articles may be different but if you stick to a few good layouts then you're going to save yourself a lot of hassle. These layouts can be stored as templates e.g ArticleWithImagesAtTheBottom, ArticleWithImagesOnLeft etc This way, your headache is less as you can easily change the templates. I guess you could also argue then that the site has some consistency in layout. Then for storage you have at least 2 options: Use the model-per-view approach and have eg ArticleWithImagesAtTheBottomModel which would have properties like 1stparagraph, 2ndparagraph, MainImage, ExtraImages Parse the article according to the template you want to use. e.g look for a paragraph break if you need to. Always keep the images separate and reference them in another column/table in the db. That gives you most freedom. By the way, option #2 would be slower as you'd have to parse on the fly each time. I like the model-per-view approach. Essentially I guess I'm trying to say beware of making things to complicated. An infinite number of layout means an infinite number of potential problems. You can always add more templates as you go if you really want to expand, but you're probably best off starting with say 3 or 4 layouts. EDITED FROM THIS POINT: Actually, thinking about it this may not be the best solution. It could work depending on your needs, but I was wondering how the big sites do it. If you really need that much flexibility, you could (as I think was sort of suggested) use a custom markup. Maybe even a simplified or full wiki markup. I'd still tend toward using templates in general, but if you need to insert at least links and images then you can parse for those.
