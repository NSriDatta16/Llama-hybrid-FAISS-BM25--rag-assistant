[site]: stackoverflow
[post_id]: 5368074
[parent_id]: 5367897
[tags]: 
It all depends on what kind of errors you want to check. In any cases you certainly need to learn more about compiler architectures. This book is a reference http://www.cs.princeton.edu/~appel/modern/c/ If you want to work at the syntactic level, you certainly want to work with lex and Yacc. This link may help you to get started with a working grammar (though outdated): http://www.lysator.liu.se/c/ANSI-C-grammar-y.html Less powerfull syntax checking can be done using regular expression. You can do less with regular expression than with an actual parser (see http://en.wikipedia.org/wiki/Chomsky_hierarchy ). But it is certainly far more practical. if you want to perform high level checking. Like "Does this group of function alway take const parameters ?" etc ... You can probably use GCC ability to dump abstract syntax trees (see http://digitocero.com/en/blog/exporting-and-visualizing-gccs-abstract-syntax-tree-ast ). Checks other compilers or front-end as well. An abstract tree contains many information you can "check". If you want to handle compilation errors: related to type checking etc... I can't help you, you probably want to look at other people projects before starting to write your own compiler. see also: http://decomp.ulb.ac.be/roelwuyts/playground/canalysistools/ http://wiki.altium.com/display/ADOH/Static+Code+Analysis+-+CERT+C+Secure+Code+Checking Some people in my previous labs worked on C and C++ analysis and transformation http://www.lrde.epita.fr/cgi-bin/twiki/view/Transformers/ The project is now in standby, and has proved to be a complex subject even for people used to compiler writting (especially in the case of C++ transformation). Finally your needs are maybe far simpler than this. Did you think about FILE *output = popen("gcc -Wall my_c_file.c", "r"); (and then just checking the output of gcc)
