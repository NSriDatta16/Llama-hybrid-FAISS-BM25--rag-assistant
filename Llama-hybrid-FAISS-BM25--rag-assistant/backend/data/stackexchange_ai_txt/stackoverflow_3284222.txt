[site]: stackoverflow
[post_id]: 3284222
[parent_id]: 3274445
[tags]: 
As others have noted, 'embedded' encompasses a broad and varied range of hardware/software options. But... The quote you give will give microcontroller embedded types shivers. Dynamic allocation is a no-no, if you have an error, you crash the system in unpredictable ways. Divides are heavily discouraged since they take forever in execution time. Objects are only discouraged insofar as they tend to carry lot's of 'stuff' around with them, all that 'stuff' takes up space, and microcontrollers don't have any. I think of embedded as being projects that are small and specific, you don't worry much about extensibility or portability. You write clean code in C that does only and exactly what you want your device to do, reliably. You choose one chip family so you can move your (almost the) same code among different hardware options with minor tweaks to the port your writing too or initialization of configuration fuses. So, you don't need to define 4 wheeled Transportation Car Toyota Since you're only working on Toyotas. And the difference in accelerations between a Camry and Corolla are stored as constants in a register.
