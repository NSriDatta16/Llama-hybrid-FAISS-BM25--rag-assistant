[site]: stackoverflow
[post_id]: 4627038
[parent_id]: 4625407
[tags]: 
I'd decouple your RESTful service endpoint as much as possible from your original application. This allows you to scale (add multiple servers for your REST endpoint), but also to change your original application without having to change your REST API directly. Clients RESTful endpoint Legacy backend So your REST server is one the hand a service provider for your clients, but represents at the same time also a client for your original backend. I would design the RESTful API and then pick one of the existing REST frameworks for Java, like Restlet, and implement the REST service itself. At the same time you can start implementing a gateway between the REST server and your original backend, by using sockets. Pay attention to scalability and performance (i.e. you may want to use connection pools for the rest backend bridge and not spawn a socket per incoming API request) and also think of possible advantages of HTTP. You might benefit when you're able to use caching, etc. as far as your backend application logic allows so.
