[site]: stackoverflow
[post_id]: 4592618
[parent_id]: 4592553
[tags]: 
Yes, you can trigger ajax calls on drop. (live example) I see a couple of issues (details below): $("div.square").droppable({ accept: '.white', drop: function (event, ui) { $to = "#" + $(this).attr('id');// You seem to be using $to without declaring it. (If it's declared in a containing scope you haven't shown, that's fine; otherwise, though, you're falling prey to the Horror of Implicit Globals . (That's probably not what's keeping it from working, though.) The code should blow up here, unless to is defined somewhere. You don't have any variable called to . You're using a variable $from that isn't defined in your quoted code. Fair 'nuff if it's defined in an enclosing scope, but if so, probably worth mentioning in the question. If none of the above is it, just walk through the code. There are plenty of browser-based debuggers these days. If you use Firefox, install and use Firebug. If you use Chrome or Safari, they have Dev Tools built in (you may have to enable them in preferences). If you use IE, IE8 and up have a built-in debugger; for IE7 and earlier you can use the free version of VS.Net. For Opera, it has a built-in debugger called Dragonfly... In all of these, you can set a breakpoint on the first line of your drop handler and step through to see what's going wrong.
