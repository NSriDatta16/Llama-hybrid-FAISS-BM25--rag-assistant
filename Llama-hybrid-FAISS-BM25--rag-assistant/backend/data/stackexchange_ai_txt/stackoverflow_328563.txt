[site]: stackoverflow
[post_id]: 328563
[parent_id]: 106896
[tags]: 
It entirely depends on how big the project is, how long the classes are, if they will be used from other files and so on. For example I quite often use a series of classes for data-abstraction - so I may have 4 or 5 classes that may only be 1 line long ( class SomeData: pass ). It would be stupid to split each of these into separate files - but since they may be used from different files, putting all these in a separate data_model.py file would make sense, so I can do from mypackage.data_model import SomeData, SomeSubData If you have a class with lots of code in it, maybe with some functions only it uses, it would be a good idea to split this class and the helper-functions into a separate file. You should structure them so you do from mypackage.database.schema import MyModel , not from mypackage.email.errors import MyDatabaseModel - if where you are importing things from make sense, and the files aren't tens of thousands of lines long, you have organised it correctly. The Python Modules documentation has some useful information on organising packages.
