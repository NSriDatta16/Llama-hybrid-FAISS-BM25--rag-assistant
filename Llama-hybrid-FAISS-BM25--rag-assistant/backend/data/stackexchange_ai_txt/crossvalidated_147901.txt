[site]: crossvalidated
[post_id]: 147901
[parent_id]: 147876
[tags]: 
Your plots of modFit_3 looks perfect to me: a straight 45Â° degree line and the errors look homoscedastic. Please, check the homoscedasticity by plotting errors vs predicted values. If it is so, can't you just use max(0, predicted) for a (very) few negative values? A general way to ensure non-negativity of the response is log-transform it before training, that is train(log(v_response) ~., method="nnet", ...) and then inverse transform the predicted values. But this may also have other effects, in particular change error distribution. So be careful. For deciding about log-transform it would also be helpful to see the histogram of v_response In your code you are using linout = 1 , which is linear activation function. This is very similar (though not equivalent) to linear regression. It allows negative values. You can try other activation functions, such as rectifier , but this is out of the "nnet" scope. I suspect that the default value of linout (logistic) that introduces nonlinearities in the model (actually, the main purpose of neural network) did not give you satisfactory results. But if your problem is linear by nature (seems so based on your perfect modFit_3 plot), why do you bother with nnet and don't try linear regression?
