[site]: stackoverflow
[post_id]: 1036076
[parent_id]: 1036055
[tags]: 
You have a number of problems with your code. First of all, you should declare your array of keywords as const char *words[] . It's bad practice to declare string constants as char * , without the const ; it's only allowed so that legacy code still compiles. You shouldn't specify the array size of 29 in the declaration, since it's fragile. You should just use empty brackets and let the compiler figure out the array size. You can get the size of the array by doing sizeof(words)/sizeof(words[0]) , which will still be correct even if you add or delete elements from words . Next, your for loop is never going to terminate (although it will almost assuredly segfault at some point). Taking the address of a value will never yield the null pointer, so &words[handle] != NULL will always be true. The proper way to iterate through the loop is to just count the number of entries: for(handle = 0; handle message is declared as an array of characters. Arrays aren't assignable, i.e. they are not lvalues. If you want to assign to an array, you have to explicitly copy data into it with something such as strcpy() (not recommended except in select cases, due to potential buffer overflows), strncpy() , memcpy() , or strncpy_s() (available only on Windows). In this case, though, you don't want an array at all -- you just want to assign a pointer. Declare message as a const char * instead. With message declared properly, you would do: const char *message; ... message = words[handle]; if(!strcmp(token, message)) message = "words"; In the final statement there, you should use double quotes around words to make it a string constant. Single quotes are for single character constants (e.g. 'A' ). Although they technically can contain more than one character, the endianness of the resulting integer constant is implementation-defined, and they're not what you want in this case. I'm also not quite sure what you're trying to do with the message = "words"; line. If you're trying to do some clever trick with the words variable, stop right now, it's not going to work. C doesn't have any sort of reflection.
