[site]: crossvalidated
[post_id]: 490657
[parent_id]: 
[tags]: 
Sequential updating in Bayesian Inference - pymc3

I am trying to implement the following research paper in pymc3 - https://people.ok.ubc.ca/pgill/research/cricketsim.pdf . In short, this research paper tries to model cricket matches and simulate the outcome of new cricket matches (for those who don't know, cricket is a sport somewhat similar to baseball). Here, we try to train the model on ball-by-ball data of numerous cricket matches. However, I feel that it might be a good idea to use some sort of sequential updating while training the model. What I mean is, let's say I have data of all matches from 2015 to 2019. I want to make batches for matches in say, each year, and then use the posterior of the trained model from the previous year as a prior for the current year, in a way similar to this https://docs.pymc.io/notebooks/updating_priors.html . My hope is that the model learns how the game has changed over the years, in particular, how certain players may have improved or gotten worse over time since the skill level of player is one attribute implicitly learnt by the model. I think this may be better than just learning from all the data at the same time, because I am interested in simulating future matches, so I would like to give some sort of priority to the latest data. Is this a good way to achieve this? Should there be any trade-off between accuracy and time taken to train the model as I increase or decrease the batch size? From this answer, Sequential Update of Bayesian , it says I can generally do this when I assume "exchangeability", but I am not sure if it applies here. Thank you for your help in advance!
