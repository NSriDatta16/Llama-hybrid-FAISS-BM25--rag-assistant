[site]: stackoverflow
[post_id]: 2985048
[parent_id]: 2985039
[tags]: 
I am under the impression that I am declaring and reserving space, but not defining, a pointer to struct node, is that correct? No. You are declaring a pointer, allocating space on the stack for the pointer, and dynamically allocating storage for a node to it it. Don't confuse yourself by writing stuff like this: typedef struct node { int data; node * next; } *head; The way to write the struct in C++ is: struct node { int data; node * next; }; You can now create a pointer: node * pnode; which allocates storage for the pointer. and you can dynamically allocate storage for a node, and make the pointer point to it: pnode = new node; or do it all in one: node * pnode = new node; Now when you say: pnode->data = 10; you are not allocating anything. You are assigning 10 to the member called data of the node instance pointed to by pnode . Of course, if you had given your node a constructor (which you should normally do), you could do it all in one: struct node { int data; node * next; node( int n, node * np ) : data( n ), next( np ) {} }; node * pnode = new node( 10, 0 );
