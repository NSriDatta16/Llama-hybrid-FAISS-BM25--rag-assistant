[site]: stackoverflow
[post_id]: 691168
[parent_id]: 
[tags]: 
How much footprint does C++ exception handling add

This issue is important especially for embedded development. Exception handling adds some footprint to generated binary output. On the other hand, without exceptions the errors need to be handled some other way, which requires additional code, which eventually also increases binary size. I'm interested in your experiences, especially: What is average footprint added by your compiler for the exception handling (if you have such measurements)? Is the exception handling really more expensive (many say that), in terms of binary output size, than other error handling strategies? What error handling strategy would you suggest for embedded development? Please take my questions only as guidance. Any input is welcome. Addendum: Does any one have a concrete method/script/tool that, for a specific C++ object/executable, will show the percentage of the loaded memory footprint that is occupied by compiler-generated code and data structures dedicated to exception handling?
