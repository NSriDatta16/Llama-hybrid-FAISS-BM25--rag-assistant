[site]: stackoverflow
[post_id]: 5643680
[parent_id]: 5643455
[tags]: 
Here is a solution involving only two allocations and no realloc : Determine the size of the file by seeking to the end and using ftell . Allocate a block of memory this size and read the whole file into it using fread . Count the number of words in this block. Allocate an array of char * able to hold pointers to this many words. Loop through the block of text again, assigning to each pointer the address of the beginning of a word, and replacing the word delimiter at the end of the word with 0 (the null character). Also, a slightly philosophical matter: If you think this approach of inserting string terminators in-place and breaking up one gigantic string to use it as many small strings is ugly, hackish, etc. then you probably should probably forget about programming in C and use Python or some other higher-level language. The ability to do radically-more-efficient data manipulation operations like this while minimizing the potential points of failure is pretty much the only reason anyone should be using C for this kind of computation. If you want to go and allocate each word separately, you're just making life a living hell for yourself by doing it in C; other languages will happily hide this inefficiency (and abundance of possible failure points) behind friendly string operators.
