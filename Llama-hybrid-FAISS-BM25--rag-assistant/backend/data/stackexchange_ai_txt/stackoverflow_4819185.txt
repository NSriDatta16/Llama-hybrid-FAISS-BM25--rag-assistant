[site]: stackoverflow
[post_id]: 4819185
[parent_id]: 
[tags]: 
QuickSort vs MergeSort, what am I doing wrong?

I am trying to implement several sorting algorithms in Java, to compare the performances. From what I've read, I was expecting quickSort to be faster than mergeSort, but on my code it is not, so I assume there must be a problem with my quickSort algorithm: public class quickSortExample{ public static void main(String[] args){ Random gen = new Random(); int n = 1000000; int max = 1500000; ArrayList d = new ArrayList (); for(int i = 0; i r; long start, end; start = System.currentTimeMillis(); r = quickSort(d); end = System.currentTimeMillis(); System.out.println("QuickSort:"); System.out.println("Time: " + (end-start)); //System.out.println(display(d)); //System.out.println(display(r)); } public static ArrayList quickSort(ArrayList data){ if(data.size() > 1){ int pivotIndex = getPivotIndex(data); int pivot = data.get(pivotIndex); data.remove(pivotIndex); ArrayList smallers = new ArrayList (); ArrayList largers = new ArrayList (); for(int i = 0; i d){ return (int)Math.floor(d.size()/2.0); } public static ArrayList concat(ArrayList s, int p, ArrayList l){ ArrayList arr = new ArrayList (s); arr.add(p); arr.addAll(l); return arr; } public static String display(ArrayList data){ String s = "["; for(int i=0; i Results (on 1 million integer between 0 and 1500000): mergeSort (implemented with arrayList too): 1.3sec (average) (0.7sec with int[] instead) quickSort: 3sec (average) Is it just the choice of my pivot which is bad, or are there some flaws in the algo too. Also, is there a faster way to code it with int[] instead of ArrayList()? (How do you declare the size of the array for largers/smallers arrays?) PS: I now it is possible to implement it in an inplace manner so it uses less memory, but this is not the point of this. EDIT 1: I earned 1 sec by changing the concat method. Thanks!
