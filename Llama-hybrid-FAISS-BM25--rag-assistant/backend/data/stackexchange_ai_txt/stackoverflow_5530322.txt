[site]: stackoverflow
[post_id]: 5530322
[parent_id]: 
[tags]: 
Why use FreeMem/Dispose routines to release memory, but there is no memory reduces?

I use AllocMem/GetMem/New routines to allocate memory, then use FreeMem/Dispose routines to release memory. But I found(by Process Explorer) that memory size of the process not reduced. If I use GlobalAllocPtr/HeapAlloc and GlobalFreePtr/HeapFree APIs, the memory size will reduced. Here is my test code: type TMyRec = record Name: string; TickCount: Cardinal; Buf: array[0..1024 - 1] of byte; end; PMyRec = ^TMyRec; var Form1: TForm1; implementation {$R *.dfm} procedure TForm1.FormDestroy(Sender: TObject); begin FList.Free; end; procedure TForm1.FormCreate(Sender: TObject); begin FList := TList.Create; ReportMemoryLeaksOnShutdown := true; end; procedure TForm1.Button1Click(Sender: TObject); var i: Integer; Size: Integer; Rec: PMyRec; Heap: Cardinal; begin Size := SizeOf(TMyRec); Heap := GetProcessHeap; for I := 0 to 2000 - 1 do begin Rec := AllocMem(Size); // Delphi routine //GetMem(Rec, Size); // Delphi routine //New(Rec); // Delphi routine //Rec := GlobalAllocPtr(GPTR, Size); // Windows API //Rec := HeapAlloc(Heap, HEAP_ZERO_MEMORY, Size); // Windows API FList.Add(Rec); end; end; procedure TForm1.Button2Click(Sender: TObject); var i: Integer; Size: Integer; Rec: PMyRec; Heap: Cardinal; begin Size := SizeOf(TMyRec); Heap := GetProcessHeap; for i := FList.Count - 1 downto 0 do begin Rec := PMyRec(FList.Items[i]); FreeMem(Rec, Size); // Delphi routine //Dispose(Rec); // Delphi routine //GlobalFreePtr(Rec); // Windows API //HeapFree(Heap, 0, Rec); // Windows API end; FList.Clear; end;
