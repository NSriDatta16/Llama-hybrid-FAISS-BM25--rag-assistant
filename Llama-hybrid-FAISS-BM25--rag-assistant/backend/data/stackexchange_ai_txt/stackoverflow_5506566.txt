[site]: stackoverflow
[post_id]: 5506566
[parent_id]: 5506465
[tags]: 
I don't really optimize for speed at the cost of code legibility, but I will rewrite my code in logical manners using datatypes and methods that seem more appropriate for the task [...] and if I can make my code more elegant, I will do so. This generally helps me understand my code This isn't really optimization , rather refactoring for cleaner code and better design*. As such, it is a Good Thing, and it should indeed be practiced continuously, in small increments. Uncle Bob Martin (in his book Clean Code ) popularized the Boy Scout Rule, adapted to software development: Leave the code cleaner than you found it . So to answer your title question rephrased, yes, refactoring code to make it unit testable is a good practice. One "extreme" of this is Test Driven Development , where one writes the test first, then adds the code which makes the test pass. This way the code is created unit testable from the very beginning. *Not to be nitpicky, just it is useful to clarify common terminology and make sure that we use the same terms in the same meaning.
