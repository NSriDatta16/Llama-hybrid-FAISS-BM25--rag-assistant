[site]: stackoverflow
[post_id]: 998743
[parent_id]: 998674
[tags]: 
Unless the SWIGged C++ code is specifically set up to release the GIL (Global Interpreter Lock) before long delays and re-acquire it before getting back to Python, multi-threading might not prove very useful in practice. You could try multiprocessing instead: from multiprocessing import Process if __name__ == '__main__': print "tic" Process(target=longcalc).start() print "toc" Process(target=longtime).start() print "tic" multiprocessing is in the standard library in Python 2.6 and later, but can be separately downloaded and installed for versions 2.5 and 2.4. Edit: the asker is of course trying to do something more complicated than this, and in a comment explains: """I get a bunch of errors ending with: "pickle.PicklingError: Can't pickle : it's not found as __builtin__.PySwigObject" . Can this be solved without reorganizing all my code? Process was called from inside a method bound to a button to my wxPython interface.""" multiprocessing does need to pickle objects to cross process boundaries; not sure what SWIGged object exactly is involved here, but, unless you can find a way to serialize and deserialize it, and register that with the copy_reg module , you need to avoid passing it across the boundary (make SWIGged objects owned and used by a single process, don't have them as module-global objects particularly in __main__ , communicate among processes with Queue.Queue through objects that don't contain SWIGged objects, etc). The early errors (if different than the one you report "ending with") might actually be more significant, but I can't guess without seeing them.
