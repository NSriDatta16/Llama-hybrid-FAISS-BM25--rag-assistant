[site]: stackoverflow
[post_id]: 2609527
[parent_id]: 2609204
[tags]: 
There's no better way to get started unit testing than to try it - it doesn't take long, it's fun and addictive. But only if you're working on testable code . However, if you try to learn unit testing by fixing an application like the one you've described all at once, you'll probably get frustrated and discouraged - and there's a good chance you'll just think unit testing is a waste of time. I recommend downloading a unit testing framework, such as NUnit or XUnit.Net . Most of these frameworks have online documentation that provides a brief introduction, like the NUnit Quick Start . Read that, then choose a simple, self-contained class that: Has few or no dependencies on other classes - at least not on complex classes. Has some behavior: a simple container with a bunch of properties won't really show you much about unit testing. Try writing some tests to get good coverage on that class, then compile and run the tests. Once you get the hang of that, start looking for opportunities to refactor your existing code , especially when adding new features or fixing bugs. When those refactorings lead to classes that meet the criteria above, write some tests for them. Once you get used to it, you can start by writing tests .
