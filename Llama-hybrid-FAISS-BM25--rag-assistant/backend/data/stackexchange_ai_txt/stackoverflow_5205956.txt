[site]: stackoverflow
[post_id]: 5205956
[parent_id]: 5199717
[tags]: 
When using a Model as the DataContext for a WPF Window, the DataGrid's SelectionChanged event doesn't get called until after the Window is loaded which is why the row is never highlighted and you only see the first row with the partial highlight. There may be a more elegant way, but here's a work-around. In the Window's loaded event or the DataGrid's loaded event, reset the SelectedItem binding: public MainWindow() { InitializeComponent(); this.Loaded += new RoutedEventHandler( OnLoaded ); } // could also be placed in the DataGrid's loaded event handler private void OnLoaded( object sender, RoutedEventArgs e ) { if( dataGrid != null && Model.SelectedItem != null ) { var selected = Model.SelectedItem; Model.SelectedItem = null; Model.SelectedItem = selected; } } Here's a complete working sample. XAML Code Behind using System; using System.Collections.Generic; using System.ComponentModel; using System.Windows; namespace WpfDataGridHighlightOnLoad { /// /// Interaction logic for MainWindow.xaml /// public partial class MainWindow : Window { public MainWindow() { InitializeComponent(); this.Loaded += new RoutedEventHandler( OnLoaded ); } // could also be placed in the DataGrid's loaded event handler private void OnLoaded( object sender, RoutedEventArgs e ) { if( dataGrid != null && Model.SelectedItem != null ) { var selected = Model.SelectedItem; Model.SelectedItem = null; Model.SelectedItem = selected; } } private void OnCycleClick( object sender, RoutedEventArgs e ) { int index = Model.ItemList.IndexOf( Model.SelectedItem ); index = index == Model.ItemList.Count - 1 ? 0 : index + 1; Model.SelectedItem = Model.ItemList[index]; } private void OnResetClick( object sender, RoutedEventArgs e ) { Model.Reset(); } } public class MainWindowModel : INotifyPropertyChanged { public MainWindowModel() { Reset(); } public void Reset() { ItemList = new List { new Person("Joe", 20), new Person("John", 30), new Person("Jane", 40), new Person("Jill", 50), new Person("Fido", 7), }; SelectedItem = ItemList[2]; } private Person _selectedItem; public Person SelectedItem { get { return _selectedItem; } set { _selectedItem = value; NotifyPropertyChanged( "SelectedItem" ); } } private List _itemList; public List ItemList { get { return _itemList; } set { _itemList = value; NotifyPropertyChanged( "ItemList" ); } } #region INotifyPropertyChanged Members public event PropertyChangedEventHandler PropertyChanged; private void NotifyPropertyChanged( String info ) { if( PropertyChanged != null ) { PropertyChanged( this, new PropertyChangedEventArgs( info ) ); } } #endregion } public class Person { public string Name { get; set; } public int Age { get; set; } public Person( string name, int age ) { Name = name; Age = age; } public override string ToString() { return Name; } } }
