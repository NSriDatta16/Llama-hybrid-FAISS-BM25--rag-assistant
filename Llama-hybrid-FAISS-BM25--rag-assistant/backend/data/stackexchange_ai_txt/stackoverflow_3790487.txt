[site]: stackoverflow
[post_id]: 3790487
[parent_id]: 
[tags]: 
JAXB XmlJavaTypeAdapter Map from List : pros/cons of this design pattern

I have written a JAXB mapping that stored a sublist inside a root element in a LinkedHashMap instead of a Collection maintained through a specific XmlJavaTypeAdapter . Hereunder a sample: @XmlRootElement public class Parent { @XmlJavaTypeAdapter(ListToMapAdapter.class) @XmlElement private LinkedHashMap children; ... } The key is built from the attributes of the child tag (e.g. give a Map.Entry like {key => child} . One of my coworker says its bad designed, and that this Map should be in the object in charge of unmarshalling the XML. I'm not agree with him. Here are some pros and cons on such an approach. Which design do you think is the best? And which pros and cons did you see to complete the debate? Goal of this design: the Map give the ability to search efficiently children with a criteria (the key in my sample) instead of search by iteration on a Collecion. Pros: responsability for searching and filtering the sublist is at the nearest of the object and the parent object is responsible of retrieving and filtering its child, the building of the Map is automatically made by JAXB when unmarshalling: elegant, efficient, and preserve from building the Map with a post process of the list after umarshalling (iteration) , the same object in different readers has still the ability of filtering its children, subjective, it's really a pretty way of doing that :), if @XmlJavaTypeAdapter exists, it's partly for this (numerous samples of this on the Web). Cons (some are from my coworker) : JAXB limitation constraints to code to a concrete implementation instead of an interface: could not declare Map in my sample (not instantiable by JAXB while unmarshalling), maybe (and its the argument of my coworker), its not the role of a mapping object (simple POJO according to him) to have such a behavior, @XmlJavaTypeAdapter aims only at converting simple object to specific types: xs:date to Joda time Calendar for instance. Thanks in advance for your 2 cents.
