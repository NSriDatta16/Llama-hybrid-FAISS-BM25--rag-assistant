[site]: stackoverflow
[post_id]: 2683962
[parent_id]: 2663115
[tags]: 
If we're allowed to embed the class Node , I would solve the problem as I've implemented it below. hasLoop() runs in O(n) time, and takes only the space of counter . Does this seem like an appropriate solution? Or is there a way to do it without embedding Node ? (Obviously, in a real implementation there would be more methods, like RemoveNode(Node n) , etc.) public class LinkedNodeList { Node first; Int count; LinkedNodeList(){ first = null; count = 0; } LinkedNodeList(Node n){ if (n.next != null){ throw new error("must start with single node!"); } else { first = n; count = 1; } } public void addNode(Node n){ Node lookingAt = first; while(lookingAt.next != null){ lookingAt = lookingAt.next; } lookingAt.next = n; count++; } public boolean hasLoop(){ int counter = 0; Node lookingAt = first; while(lookingAt.next != null){ counter++; if (count
