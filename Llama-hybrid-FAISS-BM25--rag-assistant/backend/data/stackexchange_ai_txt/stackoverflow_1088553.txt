[site]: stackoverflow
[post_id]: 1088553
[parent_id]: 1088453
[tags]: 
In performance, make sure you have a real problem first, and if you do, then use a profiler like TPTP or JMeter [edit: HPJMeter once was a general Java performance tool, but now it's HP/UX-specific]. Intuition is a very poor guide. Be sure to profile a realistic test scenario. Then focus your attention on the methods that show up at the top of the statistics. Lather, rinse, and repeat. Also decide up front when to stop: when performance is satisfactory you don't want to waste time on micro-optimizations that make your code more obscure. Look for algorithmic optimizations too, not just low-level Java coding tweaks. They can have huge impacts. Be sure to read Java Performance Tuning for strategies and ideas. Be aware that as your application warms up it will run faster (eg, it no longer has to do class loading, one time initialization, JIT compilation). I once spent several months tripling the performance of a Java-based VoiceXML browser to lower hardware costs at sites using it. I was surprised time and again by where the hot spots were. So as @DarkSquid recommends, don't guess, measure.
