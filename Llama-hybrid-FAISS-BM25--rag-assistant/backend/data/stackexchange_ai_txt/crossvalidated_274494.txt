[site]: crossvalidated
[post_id]: 274494
[parent_id]: 
[tags]: 
Quantifying tendency of vector field to align

Not even sure this is the correct SE site to ask this, but here goes. If I have a random vector field, for simplicity I'll make it 2D and on a grid. I generate it by (python, since I'm not sure how to communicate it in math-ese): import matplotlib.pyplot as plt import numpy as np u = np.random.random((10, 10)) - 0.5 v = np.random.random((10, 10)) - 0.5 h = np.hypot(u, v) u = u / h v = v / h x,y = np.meshgrid(np.arange(10), np.arange(10)) plt.quiver(x, y, u, v, pivot = 'mid') plt.show() So I want to 1) quantify how much the field "aligns" locally and 2) be able to randomly generate similarly "aligned" fields. The physical meaning of which would be for example the average fiber direction in a felt, when some of the fibers or yarns are longer (maybe much longer) than the discretization length. Basically I want a pdf something like: $\rho_{i,j}\propto e^{-\alpha||(\bar{x}_i-\bar{x}_j)\times\bar{v}_j||}$ with displacement field $\bar{x}$ and vector field $\bar{v}$. But even if that worked (or I knew how to calculate it) I'm not sure how to invert it to generate a field since the covariance matrix it would generate would be non-symmetric (and thus I couldn't use Cholesky to generate a like I could with a spatially covariant scalar field like this ). Can anyone show me a possible way to either transform the covariance to a symmetric form or point me to a method that will let me create random fields with value-dependent covariance?
