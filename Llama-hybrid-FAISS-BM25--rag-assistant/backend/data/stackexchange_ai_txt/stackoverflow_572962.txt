[site]: stackoverflow
[post_id]: 572962
[parent_id]: 
[tags]: 
Reading a Matrix txt file and storing as an array

I'm currently writing a Simulated Annealing code to solve a traveling salesman problem and have run into difficulties with storing and using my read data from a txt file. Each row & column in the file represents each city, with the distance between two different cities stored as a 15 x 15 matrix: 0.0 5.0 5.0 6.0 7.0 2.0 5.0 2.0 1.0 5.0 5.0 1.0 2.0 7.1 5.0 5.0 0.0 5.0 5.0 5.0 2.0 5.0 1.0 5.0 6.0 6.0 6.0 6.0 1.0 7.1 5.0 5.0 0.0 6.0 1.0 6.0 5.0 5.0 1.0 6.0 5.0 7.0 1.0 5.0 6.0 6.0 5.0 6.0 0.0 5.0 2.0 1.0 6.0 5.0 6.0 2.0 1.0 2.0 1.0 5.0 7.0 5.0 1.0 5.0 0.0 7.0 1.0 1.0 2.0 1.0 5.0 6.0 2.0 2.0 5.0 2.0 2.0 6.0 2.0 7.0 0.0 5.0 5.0 6.0 5.0 2.0 5.0 1.0 2.0 5.0 5.0 5.0 5.0 1.0 1.0 5.0 0.0 2.0 6.0 1.0 5.0 7.0 5.0 1.0 6.0 2.0 1.0 5.0 6.0 1.0 5.0 2.0 0.0 7.0 6.0 2.0 1.0 1.0 5.0 2.0 1.0 5.0 1.0 5.0 2.0 6.0 6.0 7.0 0.0 5.0 5.0 5.0 1.0 6.0 6.0 5.0 6.0 6.0 6.0 1.0 5.0 1.0 6.0 5.0 0.0 7.0 1.0 2.0 5.0 2.0 5.0 6.0 5.0 2.0 5.0 2.0 5.0 2.0 5.0 7.0 0.0 2.0 1.0 2.0 1.0 1.0 6.0 7.0 1.0 6.0 5.0 7.0 1.0 5.0 1.0 2.0 0.0 5.0 6.0 5.0 2.0 6.0 1.0 2.0 2.0 1.0 5.0 1.0 1.0 2.0 1.0 5.0 0.0 7.0 6.0 7.0 1.0 5.0 1.0 2.0 2.0 1.0 5.0 6.0 5.0 2.0 6.0 7.0 0.0 5.0 5.0 7.0 6.0 5.0 5.0 5.0 6.0 2.0 6.0 2.0 1.0 5.0 6.0 5.0 0.0 To read this I have a LoadCities() function as shown below: #include "iostream" #include "fstream" #include "string" using namespace std; double distances [15][15]; void LoadCities() { ifstream CityFile; if (!CityFile.is_open()) //check is file has been opened { CityFile.open ("Cities.txt", ios::in | ios::out); if (!CityFile) { cerr I've attempted an alternative istreambuf_iterator method to get to the point of manipulating the read material into arrays, however I always seem to run into complications: ifstream CityFile("Cities.txt"); string theString((std::istreambuf_iterator (CityFile)), std::istreambuf_iterator ()); Any help would be much appriciated. Been bashing my head against this with little success! ################ EDIT / Update @ SoapBox - Some Detail of the SA code, functions and main(). This is not clean, efficient, tidy and isn't ment to be at this stage, just needs to work for the moment. This version (below) works and is setup to solve polynomials (simplest problems). What needs to be done to convert it to a Traveling Salesman Problem is to: Write the LoadCities() function to gather the distance data. (Current) Change Initialise() to get the Total of the distances involved Change E() to the TSP function (e.g. Calculate distance of a random route) The latter two I know I can do, however I require LoadCities() to do it. Nothing else needs to be changed in the following script. #include "math.h" #include "iostream" #include "fstream" #include "time.h" // Define time() #include "stdio.h" // Define printf() #include "randomc.h" // Define classes for random number generators #include "mersenne.cpp" // Include code for the chosen random number generator using namespace std; // For the use of text generation in application double T; double T_initial; double S; double S_initial; double S_current; double S_trial; double E_current; int N_step; // Number of Iterations for State Search per Temperature int N_max; //Number of Iterations for Temperature int Write; const double EXP = 2.718281828; //------------------------------------------------------------------------------ //Problem Function of Primary Variable (Debugged 17/02/09 - Works as intended) double E(double x) //ORIGNINAL { double y = x*x - 6*x + 2; return y; } //------------------------------------------------------------------------------ //Random Number Generation Function (Mod 19/02/09 - Generated integers only & fixed sequence) double Random_Number_Generator(double nHigh, double nLow) { int seed = (int)time(0); // Random seed CRandomMersenne RanGen(seed); // Make instance of random number generator double fr; // Random floating point number fr = ((RanGen.Random() * (nHigh - nLow)) + nLow); // Generatres Random Interger between nLow & nHigh return fr; } //------------------------------------------------------------------------------ //Initializing Function (Temp 17/02/09) void Initialize() //E.g. Getting total Distance between Cities { S_initial = Random_Number_Generator(10, -10); cout " " "; cin >> T_initial; cout "; cin >> N_max; cout "; cin >> N_step; Initialize(); cout "; cin >> Write; SA(Write); system ("PAUSE"); return 0; } @ strager - I know its bad code, but unfortunatly with the time constraints involved for my project and the consiquental learning curve, results are what are needed! :) It'll be tidied up at latter stages. @ dirkgently - That was the initial reason for doing it this way, and hence why my first attempt is to go at it like so.
