[site]: stackoverflow
[post_id]: 1518089
[parent_id]: 1506299
[tags]: 
This is much easier to do with a fragment shader, at least in OpenGL 2.1 (I haven't used OpenGL ES). The book "OpenGL Shading Language" covers image processing in chapter 19. They give shaders for adjusting brightness and contrast. Here is my version, which combines the two half-and-half: uniform sampler2D Texture; uniform float Brightness; uniform float Contrast; uniform vec4 AverageLuminance; void main(void) { vec4 texColour = texture2D(Texture, gl_TexCoord[0].st); gl_FragColor = mix(texColour * Brightness, mix(AverageLuminance, texColour, Contrast), 0.5); } Edit: some more details for completeness... Brightness and contrast have a base value of 1.0, so passing that in for both will leave the texture unchanged. A value less than 1.0 will decrease brightness, and a value greater than 1.0 will increase it. A value less than 1.0 for contrast will make the texture more grey (less contrast), and a value greater than 1.0 will make it less grey (more contrast). You can pass in (0.5, 0.5, 0.5, 1.0) for AverageLuminance for a quick-and-dirty grey value, but better results will be obtained by calculating a proper average luminance for your texture.
