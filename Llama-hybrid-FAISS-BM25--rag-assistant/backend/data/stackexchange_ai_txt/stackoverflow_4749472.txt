[site]: stackoverflow
[post_id]: 4749472
[parent_id]: 4692939
[tags]: 
The best approach in Rails 3 is using the built-in mechanism, the I18n gem . I am not sure if I understand you problem with the DB data. If you define the categories in the database, just add an i18n key to them and in the model return the translated title. e.g. class Category # with a column that holds the i18n_lookup_key (maybe you think of a better name) ... def translated_title I18n.translate(i18n_lookup_key) end end you then can use the translated_title method for displaying the category's title. If you have more questions about I18n in Rails, we just did a series on our blog: Internationalization (I18n) API in Ruby on Rails 3 (Part I) Definition of Internationalization & Localization How i18n mechanism works in Rails Setup/Configuration about the i18n mechanism Using the I18n with interpolation Using the I18n with pluralization Internationalization (I18n) API in Ruby on Rails 3 (Part II) Localization of Times/Dates Using views for translation Translating ActiveRecord errors Organization of resource files Setting the Locale from the Domain Name Setting the Locale from the URL Params Part 3 is coming out next week, with a PDF including all the topics.
