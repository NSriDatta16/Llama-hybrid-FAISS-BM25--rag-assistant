[site]: stackoverflow
[post_id]: 1864667
[parent_id]: 1835622
[tags]: 
Is there a trick to this kind of testing? You said, "we have testers do several hours of monthly regression testing on a single app each month in an effort to stay ahead of small issues." I guess that by "regression testing" you mean "manually exercising old features". You ought to decide whether you're looking for old bugs which have never been found before (which means, running tests which you've never run before); or , whether you're repeating previously-run tests to verify that previously-tested functionality is unchanged. These are two opposite things. "Regression testing" implies to me that you're doing the latter. If the problem is that "customers find a few old issues with our software" then either your customers are running tests which you've never run before (in which case, to find these problems you need to run new tests of old software), or they're finding bugs which you have previous tested and found, but which you apparently never fixed after you found them. Do I need to target one specific feature at a time? What are you trying to do, exactly: Find bugs before customers find them? Convince customers that there's little wrong with the new development? Spend as little time as possible on testing? Very general advice is that bugs live in families: so when you find a bug, look for its parents and siblings and cousins, for example: You might have this exact same bug in other modules This module might be buggier than other modules (written by somone on an off day, perhaps), so look for every other kind of bug in this module Perhaps this is one of a class of problems (performance problems, or low-memory problems) which suggests a whole area (or whole type of requirement) which needs better test coverage Other advice is that it's to do with managing customer expectations: you said, "It makes it look like every release has multiple bugs, when in reality our new code is generally solid" as if the real problem is the mistaken perception that the bug is newly-written. it feels like a very backburner process since there is always new code to write Software develoment doesn't happen in the background, on a burner: either someone is working on it, or they're not. Management must to decide whether to assign anyone to this task (i.e. look for existing previously-unfound bugs, or fix-previously-found-but-not-yet-reported bugs), or whether they prefer to concentrate on new development and let the customers do the bug-detecting. Edit: It's worth mentioning that testing isn't the only way to find bugs. There's also: Informal design reviews (35%) Formal design inspections (55%) Informal code reviews (25%) Formal code inspections (60%) Personal desk checking of code (40%) Unit test (30%) Component test (30%) Integration test (35%) Regression test (25%) System test (40%) Low volume beta test ( High-volume beta test (>1000 sites) (70%) The percentage which I put next to each is a measure of the defect-removal rate for each technique (taken from page 243 of McConnel's Software Estimation book). The two most effective techniques seem to be formal code inspection, and high-volume beta tests. So it might be a good idea to introduce formal code reviews: that might be better at detecting defects than black-box testing is.
