[site]: crossvalidated
[post_id]: 533314
[parent_id]: 55715
[tags]: 
You can use R without making it too complicated Academic work using data analysis in the social sciences is sometimes programmed in R , and it is useful for students to have an exposure to this language during their undergraduate degree. This language is free and it is widely used in the professions, so it is helpful for students to begin learning it early. My view is that it it best to expose students to the language they will be using as early as possible, rather than peppering them with minor exposures to less-adaptive languages. While this might take some effort in your own course, it will be of benefit to later instructors in the degree program, who can then presume some basic familiarity with the language in later courses. Now, the main challenge in doing a course with R is that there is a lot to learn in the long-run, and you want to give a simple presentation that avoids having to teach too much of the initial structure and syntax. For an introductory course you should set narrow and feasible goals in terms of coverage, and cover the minimum number of statistical programming topics required to implement the data analysis in your course. To simplify your teaching you can give students a cut-down version of the analysis, by doing some of the preliminary steps yourself. For example, in an introductory course you could use the following simplifications: What to remove (and how to remove it) Remove consideration of packages: For an introductory course it is best to work with the base program, which contains enough functionality to deal with data-frames and apply introductory statistical tests and models. I recommend avoiding extension packages for an introductory course, but if you particularly want to use some additional packages, you should provide the code to install and load these yourself in the relevant exercises. Students should be able to copy or run your existing code to install and use any packages they want to use. To avoid difficulties with conflicting function names (in case a student loads other packages and creates a problem) you can refer to non-base functions directly using the package::function syntax. Remove the data importation step: This can be done by making sure that all of the datasets you give the students are already in .rds form, and you can even start your students off by giving them the first lines of code needed to import the data file from the course website or a local directory. I recommend giving your students some notes or resources on data importation for the benefit of those students who wish to learn this, but make the importation step non-assessable in the course, and provide students with the code for importation in each exercise. Remove the data-wrangling (unless you particularly want to teach this bit): This can be done by giving students pre-wrangled data forms in different .rds files. For example, you might have one dataset in wide form ( CancerDataWide.rds ) and the same data in long form ( CancerDataLong.rds ) as seperate files. If you particularly want to teach data-wrangling in the course you can provide some notes for this and allocate some time to it, but you can also remove this part by providing pre-wrangled data if you prefer. Data-wrangling is a long subject, so if you want to teach this you will need to allocate some serious time. What to include Teach students the basics of the mathematical and logical operators: Take a bit of time to teach the basic mathematical operations and the logical operations. Students should be able to use mathematical operations to manipulate values and they should be able to conduct logical queries, etc. This will help students when they want to compute a value from other values or when they want to perform a logical query (e.g., for subsetting purposes). Teach students the basics of vectors, data-frames, lists and subsetting: The data you provide should be in .rds form as data.frame objects, so you should teach your students the basics of looking at data in this object form. Teach them the functions View , str and head and teach them some basic subsetting syntax so that they can extract individual variables or rows matching some logical query, etc. Once students can deal with this you can move on to teach them some basics of subsetting from lists, so that they can extract information from list objects. All of this is fairly simple and can probably be covered in a single session, with some assistance and reminders in subsequent tutorial work. In most introductory courses you can get away with avoiding matrices and arrays. Restrict your statistical analysis to a few key models/tests: For an introductory course you will most likely cover some basic data analysis methods including looking at correlation, T-tests, leading into regression and ANOVA. You will probably also teach some basic graphical methods including scatterplots, barplots, histograms (preferably KDEs), etc. All of these can be implemented with functions in the base program with relevant queries on an initial data frame. You will need to teach your students various functions for these things, but they are all fairly simple and most of the work is automated in the functions.
