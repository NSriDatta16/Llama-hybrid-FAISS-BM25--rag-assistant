[site]: stackoverflow
[post_id]: 781191
[parent_id]: 
[tags]: 
Making life better by not using Java web frameworks?

I'm so tired of having to learn yet another Java web framework every other day. JSP, Struts, Wicket, JSF, JBoss Seam, Spring MVC to name just a few - all this countless frameworks out there try to address the same issues. However, none of them really solves the fundamental problems - that's why there are still coming up more and more new ones all the time. Most do look very bright and shiny on the first impression because they simplify doing simple things. But as soon as it comes to the implementation of a real world use case one is running into problems. Often the frameworks don't provide any help but are hindering one and limiting the options by forcing things to be implemented according to the frameworks own logic and environment. In short, I see the following disadvantages when using a framework: There mostly is a steep learning curve and you first need to understand sometimes quite academic concepts and know meaning and location of a bunch of configuration files before you can get started. The documentation usually is more or less awful, either missing a public accessible online reference, is helpless outdated, confuses different incompatible versions or all of this together and often doesn't provide any helpful examples. The framework consist of zillions of classes which makes it practically impossible to understand the intended use only by browsing the sources. Therefore you need to buy some "XYZ in action for dummies in 21 days" kind of books which have a bad user interface because they are missing a full text search and are heavy to carry around. To really use one of this frameworks you need to learn by heart how things can be done the way the framework requires it by remembering the adequate classes and method names until your head is full of stupid and useless information you can't use for anything else. There is a big overhead, slowing down your applications performance and making your brain feeling numb when try to understand what really is going on. In the real world there is usually no time to get well familiar with something new because of the pressure of being productive. As a consequence of this learning by doing approach one always looks only for the fastest way to get the next task done rather than really understanding the new tool and it's possibilities. The argument that following a standard would allow people who are new to a project to quickly get started is not valid in my view because every project uses a different framework even within the same company (at least in my case). It seems to me that the following quote from Albert Einstein fits here very well: “We can't solve problems by using the same kind of thinking we used when we created them.” Back in my good old PHP coding days when coding still was fun and productive, I used to write my own frameworks for most things and just copy-pasted and adopted them from one project to the next. This approach paid out very well, resulting in fast development, no overhead at all and a framework which actually was mightier than most Java frameworks out there but with only a few hundred lines of code in a single file plus some simple mod_rewrite rules. This certainly wasn't solving all problems of web development, but it was simple, fast and straight to the point. While perfectly adjusted to the requirements of the current project, it also was easy expandable and had a very high performance due to zero overhead. So why all that hassle with using this frameworks, why not throwing them all away and going back to the roots? What should I say to my boss when we're starting tomorrow the next project with a new framework again? Or are there maybe frameworks which really make a difference? Or some hidden advantages I have ignored?
