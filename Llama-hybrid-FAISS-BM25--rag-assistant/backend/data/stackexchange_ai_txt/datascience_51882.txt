[site]: datascience
[post_id]: 51882
[parent_id]: 
[tags]: 
How to improve accuracy of a binary classification in neural network

I tried to program a binary classifier to predict whether a customer belongs to one class or another. I have over 200k feature vectors, consisting of numeric 12 features each and assume that should suffice. Of these 200k, 120k are features for the one label, 80k are features for the other label. My problem now is that I cannot get the accuracy of this classifier over 70%. Sure, this is better than chance, but I hoped for something a little more... accurate? Here is my code for the network: # I have 200k feature vectors with values each; # these features include age values between 20 and 80, # but also boolean values, so 0 and 1. Therefore I apply a scaler. minmaxscaler = MinMaxScaler(feature_range=(-1, 1)) minmax_features = minmaxscaler.fit_transform(features) model = tf.keras.models.Sequential() model.add(tf.keras.layers.Dense(5, input_shape=features[0].shape, activation='relu')) model.add(tf.keras.layers.Dense(1, activation='sigmoid')) model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) BATCH_SIZE = 10000 early_stop = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=2, verbose=1) hist = model.fit(minmax_features, labels, epochs = 100, shuffle=True, steps_per_epoch=len(features)/BATCH_SIZE, validation_split=0.2, validation_steps=len(features)*0.2/BATCH_SIZE, callbacks=[early_stop], verbose=1) Adding another layer or changing the number of nodes on the layer did not change much about the outcome. Does anybody have any advice how I can raise the accuracy of my network?
