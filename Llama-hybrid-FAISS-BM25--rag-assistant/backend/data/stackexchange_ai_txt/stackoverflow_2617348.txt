[site]: stackoverflow
[post_id]: 2617348
[parent_id]: 2617320
[tags]: 
Why don't you schedule one thread to get the weather every minute or so, and expose that to the JSP, in stead of letting each JSP get its own weather report? That's a lot more efficient for both you and Yahoo, and JSP's only need to lookup a local object (almost instantaneous) in stead of connecting to a web service. EDIT Some new requirements in the comments of this answer suggest a different way of choosing solutions. It seems that not only weather, which not only doesn't change that often but is also the same for every user, is requested by web service but also other data like flight data. The requirements for flight data retrieval are very much different than for weather data. So I think you should define a few types of (remote) data and choose a different solution for each category. As basis for the requirements I'd use something simple: Users like their information promptly, they do not like waiting The amount of data stored on the web server is finite Remote web services have an EULA of sorts and are probably not happy with 200 concurrent requests of the same data by the same source (you) Fast data access to users is best achieved by having the data locally, be it transient (kept in a bean) or persistent (a local database). That can be done by periodically requesting data from the remote source, and using the cached data in the JSP. That would also keep you in the clear with the third point. A finite amount of data stored on the web service means that not everything can be cached. Data which differs per user, or large data sets which can vary over small periods of time, cannot readily be cached. It's not really a good idea to load data on all flights of all airports in the US every minute or so. That kind of requests would be better served by running a specific web service query when necessary. The trick is now to identify when caching data is feasible. If it is feasible, do that, otherwise run the web service query in the background. That can be done by presenting the JSP now and starting the web service query in the background. The JSP can have an AJAX script which queries your web server whether the data is ready, and insert that data in the page when ready.
