[site]: stackoverflow
[post_id]: 4676441
[parent_id]: 
[tags]: 
Globally-accessible data storage in a menu driven program?

I'm new to Stack Overflow but I find myself seeking some of the best programming solutions on this site. So I have a question to ask. I am writing a program in Delphi that is a TUI menu-driven program for a local business client. They have asked me to keep the user interface the same as in the old program (written in BASIC for MS-DOS, dated in 1982) so it is all menu driven with global data being stored in files and reloaded by the program. Each sub-menu is a program in and of itself run by the active menu (also a program). I have written my own TUI framework and UI manager for displaying menus and sub-menus. The UI manager contains an overridden method called "Draw" to display the menu and another overridden method called "OnEvent" which handles keyboard events in the UI. My first question is would you consider this to be an appropriate method for making a menu-driven program containing sub-menus? An example of how this works is such: type TMenu1 = class(TExtendedUIManager) private procedure OnEvent (c: Char); override; end; type TSubMenu1 = class(TExtendedUIManager) end; procedure TMenu1.OnEvent (c: Char); var Next: TExtendedUIManager; begin if c = '2' then begin Next := TSubMenu1.Create; Self.Start(Next); Next.Free; end; end; My other question is what would be an appropriate way of sharing data between menus? For example, if I wanted my TSubMenu1 class to return a string when a method is called, how would I make it accessible to other sub-menus that do not interact with it? (Sorry if the question is vague). I have the Singleton pattern in mind but I've also thought of having the UI manager store a reference to some object for data storage and each time a new sub-menu is run, pass in the reference to the new sub-menu (UI manager). The conundrum is finding out which one works best. Or even if my menu-driven framework is decent. Opinions are welcomed and any advice is appreciated. Thanks for your time and help! --Todd
