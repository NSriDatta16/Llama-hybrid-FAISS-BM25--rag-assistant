[site]: stackoverflow
[post_id]: 2582082
[parent_id]: 2582059
[tags]: 
I am directly copying a paragraph from Programming Ruby 1.9 : Hash keys must respond to the message hash by returning a hash code, and the hash code for a given key must not change. The keys used in hashes must also be comparable using eql? . If eql? returns true for two keys, then those keys must also have the same hash code. This means that certain classes (such as Array and Hash ) can't conveniently be used as keys, because their hash values can change based on their contents. So you might generate your hash as something like ["#{source_ip} #{source_port}", "#{dest_ip} #{dest_port}", protocol.to_s].sort.join.hash such that the result will be identical when the source and destination are switched. For example: source_ip = "1.2.3.4" source_port = 1234 dest_ip = "5.6.7.8" dest_port = 5678 protocol = "http" def make_hash(s_ip, s_port, d_ip, d_port, proto) ["#{s_ip} #{s_port}", "#{d_ip} #{d_port}", proto.to_s].sort.join.hash end puts make_hash(source_ip, source_port, dest_ip, dest_port, protocol) puts make_hash(dest_ip, dest_port, source_ip, source_port, protocol) This will output the same hash even though the arguments are in a different order between the two calls. Correctly encapsulating this functionality into a class is left as an exercise to the reader.
