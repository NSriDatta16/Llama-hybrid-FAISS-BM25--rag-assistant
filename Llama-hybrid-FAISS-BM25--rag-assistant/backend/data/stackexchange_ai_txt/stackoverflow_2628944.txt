[site]: stackoverflow
[post_id]: 2628944
[parent_id]: 2627073
[tags]: 
First of all, the problem is non-trivial. A "simple" solition. It works best when the polygon resembles circle, and points are distributed evenly. iterate through N For both old and new dataset, find the 2 farthest points of the point N. So now you have the triangle before and after the transformation. Use the clockwise direction from the center of each triangle to number its vertices as [0] (=the N-th point in the original dataset), [1], and [2] (the 2 farthest points). Calculate center of rotation, and deformation (both x and y) of this triangle. If the deformation is more then your 0.001% - drop the data for this triangle, otherwise save it. Calculate the average for the centers of rotation. The right solution: define the function Err(Point BEFORE[N], Point AFTER[N], double TFORM[3][3]), where BEFORE - constant old data points, AFTER - constant new data points, TFORM[3][3] affine transformation matrix, Err(...) function that returns the scalar error value, 0.0 when the TFORM translated BEFORE to exact AFTER, or some >0.0 error value. Then use any numeric math you want to find the minimum of the Err(TFORM): e.g. gradient search.
