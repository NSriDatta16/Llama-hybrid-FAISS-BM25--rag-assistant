[site]: stackoverflow
[post_id]: 3009330
[parent_id]: 3009091
[tags]: 
If I had a frequent requirement for lists of lists of lists of ... I'd simply package the building thereof into a small factory function, such as: import copy def multi_dimension_list(baseitem, *dimensions): dimensions = list(dimensions) result = [baseitem] * dimensions.pop(-1) for d in reversed(dimensions): result = [copy.deepcopy(result) for _ in range(d)] return result eg = multi_dimension_list(0, 3, 4, 5) print(eg) # and just to prove the parts are independent...: eg[1][1][1] = 23 print(eg) In practice, I don't even bother, because my uses of multi-dimensional lists of this kind are few and far between, so that inline list comprehensions are just fine. However, the general idea of building up your own module of little utility functions for simple tasks that you do need to perform often and (in your opinion) aren't done elegantly by inline idioms, is really the only way to go!-)
