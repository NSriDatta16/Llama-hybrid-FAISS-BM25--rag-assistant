[site]: stackoverflow
[post_id]: 2770692
[parent_id]: 2770321
[tags]: 
What is a raw type? The Java Language Specification defines a raw type as follows: JLS 4.8 Raw Types A raw type is defined to be one of: The reference type that is formed by taking the name of a generic type declaration without an accompanying type argument list. An array type whose element type is a raw type. A non- static member type of a raw type R that is not inherited from a superclass or superinterface of R . Here's an example to illustrate: public class MyType { class Inner { } static class Nested { } public static void main(String[] args) { MyType mt; // warning: MyType is a raw type MyType.Inner inn; // warning: MyType.Inner is a raw type MyType.Nested nest; // no warning: not parameterized type MyType mt1; // no warning: type parameter given MyType mt2; // no warning: type parameter given (wildcard OK!) } } Here, MyType is a parameterized type ( JLS 4.5 ). It is common to colloquially refer to this type as simply MyType for short, but technically the name is MyType . mt has a raw type (and generates a compilation warning) by the first bullet point in the above definition; inn also has a raw type by the third bullet point. MyType.Nested is not a parameterized type, even though it's a member type of a parameterized type MyType , because it's static . mt1 , and mt2 are both declared with actual type parameters, so they're not raw types. What's so special about raw types? Essentially, raw types behaves just like they were before generics were introduced. That is, the following is entirely legal at compile-time. List names = new ArrayList(); // warning: raw type! names.add("John"); names.add("Mary"); names.add(Boolean.FALSE); // not a compilation error! The above code runs just fine, but suppose you also have the following: for (Object o : names) { String name = (String) o; System.out.println(name); } // throws ClassCastException! // java.lang.Boolean cannot be cast to java.lang.String Now we run into trouble at run-time, because names contains something that isn't an instanceof String . Presumably, if you want names to contain only String , you could perhaps still use a raw type and manually check every add yourself, and then manually cast to String every item from names . Even better , though is NOT to use a raw type and let the compiler do all the work for you , harnessing the power of Java generics. List names = new ArrayList (); names.add("John"); names.add("Mary"); names.add(Boolean.FALSE); // compilation error! Of course, if you DO want names to allow a Boolean , then you can declare it as List names , and the above code would compile. See also Java Tutorials/Generics How's a raw type different from using as type parameters? The following is a quote from Effective Java 2nd Edition, Item 23: Don't use raw types in new code : Just what is the difference between the raw type List and the parameterized type List ? Loosely speaking, the former has opted out generic type checking, while the latter explicitly told the compiler that it is capable of holding objects of any type. While you can pass a List to a parameter of type List , you can't pass it to a parameter of type List . There are subtyping rules for generics, and List is a subtype of the raw type List , but not of the parameterized type List . As a consequence, you lose type safety if you use raw type like List , but not if you use a parameterized type like List . To illustrate the point, consider the following method which takes a List and appends a new Object() . void appendNewObject(List list) { list.add(new Object()); } Generics in Java are invariant. A List is not a List , so the following would generate a compiler warning: List names = new ArrayList (); appendNewObject(names); // compilation error! If you had declared appendNewObject to take a raw type List as parameter, then this would compile, and you'd therefore lose the type safety that you get from generics. See also What is the difference between and ? java generics (not) covariance How's a raw type different from using as a type parameter? List , List , etc are all List , so it may be tempting to just say that they're just List instead. However, there is a major difference: since a List defines only add(E) , you can't add just any arbitrary object to a List . On the other hand, since the raw type List does not have type safety, you can add just about anything to a List . Consider the following variation of the previous snippet: static void appendNewObject(List list) { list.add(new Object()); // compilation error! } //... List names = new ArrayList (); appendNewObject(names); // this part is fine! The compiler did a wonderful job of protecting you from potentially violating the type invariance of the List ! If you had declared the parameter as the raw type List list , then the code would compile, and you'd violate the type invariant of List names . A raw type is the erasure of that type Back to JLS 4.8: It is possible to use as a type the erasure of a parameterized type or the erasure of an array type whose element type is a parameterized type. Such a type is called a raw type . [...] The superclasses (respectively, superinterfaces) of a raw type are the erasures of the superclasses (superinterfaces) of any of the parameterizations of the generic type. The type of a constructor, instance method, or non- static field of a raw type C that is not inherited from its superclasses or superinterfaces is the raw type that corresponds to the erasure of its type in the generic declaration corresponding to C . In simpler terms, when a raw type is used, the constructors, instance methods and non- static fields are also erased . Take the following example: class MyType { List getNames() { return Arrays.asList("John", "Mary"); } public static void main(String[] args) { MyType rawType = new MyType(); // unchecked warning! // required: List found: List List names = rawType.getNames(); // compilation error! // incompatible types: Object cannot be converted to String for (String str : rawType.getNames()) System.out.print(str); } } When we use the raw MyType , getNames becomes erased as well, so that it returns a raw List ! JLS 4.6 continues to explain the following: Type erasure also maps the signature of a constructor or method to a signature that has no parameterized types or type variables. The erasure of a constructor or method signature s is a signature consisting of the same name as s and the erasures of all the formal parameter types given in s . The return type of a method and the type parameters of a generic method or constructor also undergo erasure if the method or constructor's signature is erased. The erasure of the signature of a generic method has no type parameters. The following bug report contains some thoughts from Maurizio Cimadamore, a compiler dev, and Alex Buckley, one of the authors of the JLS, on why this sort of behavior ought to occur: https://bugs.openjdk.java.net/browse/JDK-6400189 . (In short, it makes the specification simpler.) If it's unsafe, why is it allowed to use a raw type? Here's another quote from JLS 4.8: The use of raw types is allowed only as a concession to compatibility of legacy code. The use of raw types in code written after the introduction of genericity into the Java programming language is strongly discouraged. It is possible that future versions of the Java programming language will disallow the use of raw types. Effective Java 2nd Edition also has this to add: Given that you shouldn't use raw types, why did the language designers allow them? To provide compatibility. The Java platform was about to enter its second decade when generics were introduced, and there was an enormous amount of Java code in existence that did not use generics. It was deemed critical that all this code remains legal and interoperable with new code that does use generics. It had to be legal to pass instances of parameterized types to methods that were designed for use with ordinary types, and vice versa. This requirement, known as migration compatibility , drove the decision to support raw types. In summary, raw types should NEVER be used in new code. You should always use parameterized types . Are there no exceptions? Unfortunately, because Java generics are non-reified, there are two exceptions where raw types must be used in new code: Class literals, e.g. List.class , not List .class instanceof operand, e.g. o instanceof Set , not o instanceof Set See also Why is Collection .class Illegal?
