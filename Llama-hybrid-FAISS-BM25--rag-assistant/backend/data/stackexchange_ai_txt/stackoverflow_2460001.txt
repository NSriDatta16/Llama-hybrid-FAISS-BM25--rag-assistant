[site]: stackoverflow
[post_id]: 2460001
[parent_id]: 2459972
[tags]: 
There are several causes of out of memory issues. Firstly, the simplest case is you simply need more heap. You're using 512M max heap when your program could operate correctly with 2G. Increase is with -Xmx2048m as a JVM option and you're fine. Also be aware than 64 bit VMs will use up to twice the memory of 32 bit VMs depending on the makeup of that data. If your problem isn't that simple then you can look at optimization. Replacing objects with primitives and so on. This might be an option. I can't really say based on what you've posted. Ultimately however you come to a cross roads where you have to make a choice between virtulization and partitioning . Virtualizing in this context simply means some form of pretending there is more memory than there is. Operating systems use this with virtual address spaces and using hard disk space as extra memory. This could mean only keeping some of the data structure in memory at a time and persisting the rest to secondary storage (eg file or database). Partitioning is splitting your data across multiple servers (either real or virtual). For example, if you were keeping track of stock trades on the NASDAQ you could put stock codes starting with "A" on server1, "B" on server2, etc. You need to find a reasonable approach to slice your data such that you reduce or eliminate the need for cross-communication because that cross-communication is what limits your scalability. So simple case, if what you're storing is 30K words and 30K x 30K combinations of words you could divide it up into four server: A-M x A-M A-M x N-Z N-Z x A-M N-Z x N-Z That's just one idea. Again it's hard toc omment without knowing specifics.
