[site]: stackoverflow
[post_id]: 1516919
[parent_id]: 
[tags]: 
Declaring and initializing a variable in a Conditional or Control statement in C++

In Stroustrup's The C++ Programming Language: Special Edition (3rd Ed) , Stroustrup writes that the declaration and initialization of variables in the conditionals of control statements is not only allowed, but encouraged. He writes that he encourages it because it reduces the scope of the variables to only the scope that they are required for. So something like this... if ((int i = read(socket)) 0) { // handle input } else { return true; } ...is good programming style and practice. The variable i only exists for the block of if statements for which it is needed and then goes out of scope. However, this feature of the programming language doesn't seem to be supported by g++ (version 4.3.3 Ubuntu specific compile), which is surprising to me. Perhaps I'm just calling g++ with a flag that turns it off (the flags I've called are -g and -Wall ). My version of g++ returns the following compile error when compiling with those flags: socket.cpp:130: error: expected primary-expression before ‘int’ socket.cpp:130: error: expected `)' before ‘int’ On further research I discovered that I didn't seem to be the only one with a compiler that doesn't support this. And there seemed to be some confusion in this question as to exactly what syntax was supposedly standard in the language and what compilers compile with it. So the question is, what compilers support this feature and what flags need to be set for it to compile? Is it an issue of being in certain standards and not in others? Also, just out of curiosity, do people generally agree with Stroustrup that this is good style? Or is this a situation where the creator of a language gets an idea in his head which is not necessarily supported by the language's community?
