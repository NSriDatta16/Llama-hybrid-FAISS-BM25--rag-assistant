[site]: stackoverflow
[post_id]: 1243091
[parent_id]: 1242991
[tags]: 
A way to do it is to use a Singleton class (which acts as an observer/mediator), which the application is an example of, in which you have viewControllers subscribe to when they are intersted in the touch events of a certain view. When the touch occurs the Singleton class is informed of the event as a result it informs all subscribers to the event of the event. Here is an example @interface MyEventClass { -(void)TouchEventDidOccur; -(void)subscribeToTouchEvent:(id)delegate selector(selector):sel } Above is the singleton class now this is an example of what the view touchesBegan method might look like -(void)touchesBegan... { [[MyEventClass sharedInstance] TouchEventDidOccur]; } and how one would subscribe to the event [[MyEventClass sharedInstance] subscribeToTouchEvent:self selector:@selector(receiveTouchEvent:)] hope this helps
