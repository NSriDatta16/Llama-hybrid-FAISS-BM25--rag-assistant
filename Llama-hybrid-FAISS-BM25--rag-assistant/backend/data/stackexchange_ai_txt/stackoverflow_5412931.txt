[site]: stackoverflow
[post_id]: 5412931
[parent_id]: 5412797
[tags]: 
The ItemsSource of a ListView is the collection whose items will appear in the list. So think for a moment about what you're asking the ListView to do: As a source collection, use something that isn't a collection, but contains them For each row in the list, display an item from one collection, and an item from the other collection Pay attention to that second point: every row must display some item from the Events collection and some item from the Descriptions collection. Which item shall it pick from each? What's the relationship between the items in the two collections? It appears that what you really need is a collection of objects that contains both an Event and a Description. You can then bind to that collection to display elements of both entities. Roughly, something like this: public class EffectView : INotifyPropertyChanged { ObservableCollection effects; public ObservableCollection Effects { get { return this.effects; } set { this.effects = value; this.RaisePropertyChanged ( "EffectsAndDescriptions" ); } } } internal class EffectsAndDescriptions { public Effect Effect { get; set; } public Description Description { get; set; } } Now you can bind to the EffectsAndDescriptions collection (note this assumes the DataContext of the ListView's parent is EffectView )
