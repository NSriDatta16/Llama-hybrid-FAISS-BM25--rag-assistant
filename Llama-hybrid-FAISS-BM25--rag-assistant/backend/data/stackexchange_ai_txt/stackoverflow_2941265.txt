[site]: stackoverflow
[post_id]: 2941265
[parent_id]: 2941239
[tags]: 
In real life, Managers are Employees too. So this is surely just a chain of increasing specialisation: User -> Employee -> Manager -> Top Manager edit "This is a program to manage the vacations plans of workers." In you company do Managers take planned vacation? Surely they do. And equally surely you are not going to build a separate application to manage that. So what you really need is this: User -> Requester -> Approver Each User will be a Requester in one approval chain. (You may need special arrangements for the CEO). In addition some Users will be Approvers in one or more chains. The final approver will probably vary depending on the grade of the Requester: the CEO won't want to bother themselves with approving the vacation arrangements of the janitorial staff. You will need some rules to enforce who can be an Approver of any given Requester's holidays. Unless you have an exceedingly flat organisation you will find you have a hierarchy of workers and managers. For instance, a Team Leader or a foreman - individuals who are in other respects "workers" rather than "managers" - may be in the chain. Also you may need to consider other aspects of the organisation. Fr instance, if the employee wishes to carry leave over to the next year that may require approval from the HR dept, somebody who normally has no managerial responsibility for the employee whatsoever. Edit 2 Okay, so we are modelling an arbitrary set of rules rather than a realistic scenario. Let's see. Each User fits into a single category, defined by these tasks: an Employee can Request leave a Manager can Approval or Reject a Leave Request a Top Manager can Accept or Overturn an Approval or Rejection Managers and Top Managers have no behaviours in common. Consequently, the first model is the correct one.
