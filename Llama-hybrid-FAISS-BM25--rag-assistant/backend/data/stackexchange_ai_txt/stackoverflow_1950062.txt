[site]: stackoverflow
[post_id]: 1950062
[parent_id]: 
[tags]: 
Python: intercept a class loading action

Summary: when a certain python module is imported, I want to be able to intercept this action, and instead of loading the required class, I want to load another class of my choice. Reason: I am working on some legacy code. I need to write some unit test code before I start some enhancement/refactoring. The code imports a certain module which will fail in a unit test setting, however. (Because of database server dependency) Pseduo Code: from LegacyDataLoader import load_me_data ... def do_something(): data = load_me_data() So, ideally, when python excutes the import line above in a unit test, an alternative class, says MockDataLoader, is loaded instead. I am still using 2.4.3. I suppose there is an import hook I can manipulate Edit Thanks a lot for the answers so far. They are all very helpful. One particular type of suggestion is about manipulation of PYTHONPATH. It does not work in my case. So I will elaborate my particular situation here. The original codebase is organised in this way ./dir1/myapp/database/LegacyDataLoader.py ./dir1/myapp/database/Other.py ./dir1/myapp/database/__init__.py ./dir1/myapp/__init__.py My goal is to enhance the Other class in the Other module. But since it is legacy code, I do not feel comfortable working on it without strapping a test suite around it first. Now I introduce this unit test code ./unit_test/test.py The content is simply: from myapp.database.Other import Other def test1(): o = Other() o.do_something() if __name__ == "__main__": test1() When the CI server runs the above test, the test fails. It is because class Other uses LegacyDataLoader, and LegacydataLoader cannot establish database connection to the db server from the CI box. Now let's add a fake class as suggested: ./unit_test_fake/myapp/database/LegacyDataLoader.py ./unit_test_fake/myapp/database/__init__.py ./unit_test_fake/myapp/__init__.py Modify the PYTHONPATH to export PYTHONPATH=unit_test_fake:dir1:unit_test Now the test fails for another reason File "unit_test/test.py", line 1, in from myapp.database.Other import Other ImportError: No module named Other It has something to do with the way python resolves classes/attributes in a module
