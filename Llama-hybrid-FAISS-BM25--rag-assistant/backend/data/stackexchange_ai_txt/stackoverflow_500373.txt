[site]: stackoverflow
[post_id]: 500373
[parent_id]: 474275
[tags]: 
Here are some ideas from my master's thesis, which may or may not be helpful. The thesis was about robust parsing of natural language. The main idea: given a context-free grammar for a language, try to parse a given text (or, in your case, a python program). If parsing failed, you will have a partially generated parse tree. Use the tree structure to suggest new grammar rules that will better cover the parsed text. I could send you my thesis, but unless you read Hebrew this will probably not be useful. In a nutshell: I used a bottom-up chart parser . This type of parser generates edges for productions from the grammar. Each edge is marked with the part of the tree that was consumed. Each edge gets a score according to how close it was to full coverage, for example: S -> NP . VP Has a score of one half (We succeeded in covering the NP but not the VP). The highest-scored edges suggest a new rule (such as X->NP). In general, a chart parser is less efficient than a common LALR or LL parser (the types usually used for programming languages) - O(n^3) instead of O(n) complexity, but then again you are trying something more complicated than just parsing an existing language. If you can do something with the idea, I can send you further details. I believe looking at natural language parsers may give you some other ideas.
