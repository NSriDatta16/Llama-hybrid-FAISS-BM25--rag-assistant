[site]: stackoverflow
[post_id]: 1534938
[parent_id]: 1534734
[tags]: 
Whenever you call C or C++ code from Java via JNI or equivalent, you run the risk of destabilizing the Java platform due to issues with memory management and/or thread safety on the C/C++ side. Before going down the JNI, etc route, I think you should consider other alternatives: Take Java out of the equation and implement entirely in C++ (or C++ / CC# as someone else suggested). Create a C++ command-line application that does the task that you need to do using the native library, and run the application using one of the java.lang.Runtime.exec methods. Create a "server" wrapper in C++ for the library that exposes the functionality that you need as a custom protocol, and code the Java side to talk to the server using HTTP, raw Sockets, Pipes, or whatever transport level is appropriate. The alternatives all have downsides, but so do JNI / JNA and the like; see the first paragraph. EDIT: when you make the decision to use JNI / JNA in a system, there are likely to be long term consequences. In addition to the stability issue, you have to consider portability (will the native library work on Windows, Linux, etc), build issues (it is hard to build native libraries in Ant, etc), platform versions issues (will upgrading to Java 7 break something?), developer skills ("Joe" who did the JNI integration has left - who else knows Java, C++ and JNI?). The sum of these issues is (IMO) more significant than the time needed to do the initial development.
