[site]: crossvalidated
[post_id]: 633698
[parent_id]: 633616
[tags]: 
I did not know how to treat in t-test different number of responses co I went with logistic regression. I believe it is right approach. The code in Python is as follows (example of Country A vs Country B): import statsmodels.api as sm import pandas as pd # Country A c1 = "A" n11 = 1000 n11_1 = 500 n12 = 900 n12_1 = 90 df_11 = pd.DataFrame( {"Country": [c1] * n11, "Mental_health_symptoms": [0] * (n11 - n11_1) + [1] * n11_1, "Period": [0] * n11}) df_12 = pd.DataFrame( {"Country": [c1] * n12, "Mental_health_symptoms": [0] * (n12 - n12_1) + [1] * n12_1, "Period": [1] * n12}) df_1 = pd.concat([df_11, df_12]) # Country B - first control c2 = "B" n21 = 1200 n21_1 = 450 n22 = 2000 n22_1 = 400 df_21 = pd.DataFrame( {"Country": [c2] * n21, "Mental_health_symptoms": [0] * (n21 - n21_1) + [1] * n21_1, "Period": [0] * n21}) df_22 = pd.DataFrame( {"Country": [c2] * n22, "Mental_health_symptoms": [0] * (n22 - n22_1) + [1] * n22_1, "Period": [1] * n22}) df_2 = pd.concat([df_21, df_22]) # Join df_1_vs_2 = pd.concat([df_1, df_2]) # Change country to dummy df_1_vs_2 = pd.get_dummies(df_1_vs_2, columns=["Country"]) # change into int df_1_vs_2["Country_A"] = df_1_vs_2["Country_A"].astype(int) # add interaction df_1_vs_2["Period*Country_A"] = df_1_vs_2["Period"] * df_1_vs_2["Country_A"] # drop columns df_1_vs_2 = df_1_vs_2.drop(columns=["Country_B", ]) # model y = df_1_vs_2["Mental_health_symptoms"] X = df_1_vs_2[["Period", "Country_A", "Period*Country_A"]] model_1_vs_2 = sm.Logit(y, X).fit() model_1_vs_2.summary() All variables were statistically significant, so the difference in country A vs Country B is higher (as the interaction variable is significant)
