[site]: stackoverflow
[post_id]: 3801386
[parent_id]: 3358049
[tags]: 
It's not necessary to transform the object to an array, you can perfectly work with the object without too much hassle. What is curious (at least for me), is that you get something like this: Array ( [0] => stdClass Object ( [term_id] => 7 [name] => Magister comunicaciones aplicadas [slug] => magister-comunicaciones-aplicadas [term_group] => 0 [term_taxonomy_id] => 7 [taxonomy] => linea-de-estudio [description] => [parent] => 0 [count] => 4 ) [1] => stdClass Object ( [term_id] => 8 [name] => Engagement marketing [slug] => engagement-marketing [term_group] => 0 [term_taxonomy_id] => 8 [taxonomy] => linea-de-estudio [description] => [parent] => 0 [count] => 5 ) ) It's basically, an array of objects, so you've to treat them that way. For example if I want the name of the the first one: $myterms = get_terms('taxonomy-name', 'orderby=none&hide_empty'); echo $myterms[0]->name; If you need to iterate through the elements, you still can use foreach(); . foreach ($myterms as $term) { ?> slug; ?>"> name; ?> That way you can post the articles from your taxonomy. For the custom post types, you'll have to create a loop like this: $args = array( 'post_type' => 'post-type-name', 'taxonomy' => 'term' //for example //'resources' => 'videos' ); // assigning variables to the loop global $wp_query; $wp_query = new WP_Query($args); // starting loop while ($wp_query->have_posts()) : $wp_query->the_post(); the_title(); blabla.... endwhile; Then you can create multiple loops each of one for each taxonomy/term :). If you want to get even more fancy (don't want to repeat yourself a hundred times) you can include the second loop inside the first one and assign variables to the taxonomy (resources ie) and the terms it has (videos) (from your example only the last one). The idea is that you would have a normal (typical) wordpress loop restricted to the custom post-type and each one of the terms. foreach ($myterms as $term) : ?> slug; ?>"> name; ?> slug; $args = array( 'post_type' => 'post-type-name', 'taxonomy' => "$term_name" ); // assigning variables to the loop global $wp_query; $wp_query = new WP_Query($args); // starting loop posting only while ($wp_query->have_posts()) : $wp_query->the_post(); the_title(); blabla.... endwhile; endforeach; ?> Obviously you can do the inverse thing too, create the normal loop for a single-template custom type (it's looks like you have only one), and inside includes all the custom terms. Not very elegant, but that's the best way I can came up with it :P. Hope that someone can understand this, sounds confusing. Maybe could it be possible with some callback function?.
