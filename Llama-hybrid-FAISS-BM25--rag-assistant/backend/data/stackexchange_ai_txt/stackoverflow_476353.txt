[site]: stackoverflow
[post_id]: 476353
[parent_id]: 476328
[tags]: 
If the input can be a List rather than Seq, you can clean it up a bit with zipWithIndex: def filter(numbers: List[Double], filterSize: Int): List[Double] = { require(filterSize > 0) val ringBuffer = new Array[Double](filterSize) numbers.zipWithIndex.map(pair => { // update ring buffer ringBuffer(pair._2 % filterSize) = pair._1 // get avarage ringBuffer.foldLeft(0.0)(_ + _) / filterSize }) } Note that the return value is also now List and I replaced assert with require.
