[site]: datascience
[post_id]: 89407
[parent_id]: 89403
[tags]: 
The answer is no, they are not limited. However, your statements seem to contain multiple misunderstandings, so let's first clarify them: The sequential and functional APIs in Keras are different approaches for structuring the layers of a neural network. Both can have dense layers and convolutional layers. Convolutional layers exploit information locality and therefore normally perform better on images, where information locality is key. Dense layers, on the other hand, can only handle vectors as input, therefore, anything we want to feed as input to a dense layer must be a vector; we can feed image data as input to a dense layer, but we must first remove the spatial organization (i.e. flattening ), that is, we must lose the information about which pixel is next to another, and which channel it is in. With this information in mind, we can conclude that, while we can use images, either grayscale or color, as input to dense layers, we need to flatten the image as a vector, which makes dense layers in general not very appropriate to receive images as input, because the locality information is not used by them. Update : regarding the ability for dense layers to accept inputs of more than one dimension, the multiplication takes place along the last dimension, as explained in the documentation : Note: If the input to the layer has a rank greater than 2, then Dense computes the dot product between the inputs and the kernel along the last axis of the inputs and axis 1 of the kernel (using tf.tensordot ). For example, if input has dimensions (batch_size, d0, d1) , then we create a kernel with shape (d1, units) , and the kernel operates along axis 2 of the input , on every sub-tensor of shape (1, 1, d1) (there are batch_size * d0 such sub-tensors). The output in this case will have shape (batch_size, d0, units) . But this is applicable to both the functional and sequential APIs.
