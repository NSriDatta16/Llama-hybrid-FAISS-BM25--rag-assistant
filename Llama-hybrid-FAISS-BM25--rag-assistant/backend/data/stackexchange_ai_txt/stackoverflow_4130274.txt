[site]: stackoverflow
[post_id]: 4130274
[parent_id]: 4127460
[tags]: 
You can disable the button (or better yet, the entire editing of a specif cell) by just handling the ShowingEditor event... You can then inspect the values of other columns and then cancel the editing of that cell depending on your wishes. Here goes some code for a sample program that shows you exactly how to do that: using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Text; using System.Windows.Forms; using DevExpress.XtraGrid.Views.Grid; using DevExpress.XtraGrid; namespace GridButtonDisable { public partial class Form1 : Form { public class MyData { public int Number { get; set; } public bool Even { get { return Number % 2 == 0; } } } public Form1() { InitializeComponent(); List List = new List { new MyData() { Number = 1 }, new MyData() { Number = 2 }, new MyData() { Number = 5 }, new MyData() { Number = 7 }, new MyData() { Number = 10 }, }; gridControl1.DataSource = List; gridView1.ShowingEditor += gridView1_ShowingEditor; } private void gridView1_ShowingEditor(object sender, CancelEventArgs e) { GridView view = sender as GridView; if (view.FocusedColumn.Name == "gridButtonCol" && !(bool)view.GetRowCellValue(view.FocusedRowHandle, "Even") ) e.Cancel = true; } } This is a pretty simple program. You must assume your button edit column is named gridButtonCol... I'm testing the value of the Even column of the MyData class I've created for this sample, you can do whatever you want and check whichever condition you like here. If you set the e.Cancel property of the CancelEventArgs of the ShowingEditor event, the cell won't be editable and the button editor won't respond to user clicks...
