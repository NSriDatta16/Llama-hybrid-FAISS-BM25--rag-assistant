[site]: stackoverflow
[post_id]: 158078
[parent_id]: 155366
[tags]: 
Thanks, I'll give some background. My control is a UserControl that contains a grid and a toolbar. A user will typically launch several of these controls to view different slices of the system's data. There are several keyboards shortcuts that can launch actions from the selected row in the current grid. However, it is a requirement that these keyboard shortcuts should apply not only to the currently focused grid . If the user is currently focused on one of the many other areas of the application, then this keyboard shortcut should still work, and it should be routed to the last focused grid . So I wired a function to the Control.Enter event of my UserControl to basically say LastFocusedGrid = this. And it would work, except for the docking and undocking... See, these controls are hosted inside an application with docking features, somewhat similar to visual studio. By default, the control launches as a tab within the main working area of the application, similar to the way a source file opens in visual studio. However, the user can "rip out" a tab by grabbing the tab header and dragging it out of the main application. At this point, the application creates a new "float form" to host the control. Switching between the main application and this float form is the same as switching between apps, for the purposes of the Control.Enter and Form.Activated events. At that point we have the "one control within a form" scenario simulated with the example application described in the original post. Now, there are some ways around this. I could leverage the Form.Activated event, which DOES fire when switching between forms. If you add an event in the test application to the Form's Activated event, you will see that it works great. The problem is that my UserControl's relationship with its parent Form is fluid, making the solution somewhat complicated. I tried wiring up to "this.ParentForm.Activated" which worked okay. The problem is when do you call this? What happens when you are undocked/redocked? I ended up with a nasty bunch of code with things like "previousParentForm" so that I could unhook from the old form, and then I was still facing the problem that the docking system doesn't notify me when my parent Form is being changed, so I was going to have to make a bunch of changes there, too. These problems are not unsolvable, but if there is a simpler control-level "parent form was activated" event, then that would be a lot more elegant. That's rather long, but I hope it clarifies the situation.
