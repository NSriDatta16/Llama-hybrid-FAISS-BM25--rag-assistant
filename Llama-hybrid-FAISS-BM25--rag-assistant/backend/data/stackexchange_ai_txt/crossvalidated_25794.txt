[site]: crossvalidated
[post_id]: 25794
[parent_id]: 
[tags]: 
Implementing an ordered probit model in pymc

I'm trying to implement an ordered probit model in pymc, and I'm stuck. The model is similar to Welinder's "multidimensional wisdom of crowds" , with coders (indexed by i) and documents (indexed by j). Coders assign codes to documents, but the coding process is noisy. We wish to estimate two things. First, $z_j$, the true, underlying value of each document along some latent dimension. Second, $\beta_i$, bias terms revealing how accurately each coder's assessments line up with the group average. This would be pretty easy if codes were on a continuous scale, but the data I have is ordinal. Codes fall in the range 1,2,...,5 . Formally, we can represent this as follows: $x_{ij} \sim Normal( \alpha_i + \beta_iz_j, 1)$ $code_{ij} = cut(x_{ij}, w)$ Where $cut$ is a cutoff function that assigns values based on the index of the highest cutpoints, $w$, exceeded by $x_{ij}$. So far, so good. The problem with this model is that the cutpoint function is deterministic, and codes are observed. But in pymc (and in other MCMC programs, e.g. JAGS), a deterministic node cannot also be observed. So this model can't be built directly in pymc. It seems that there's probably a way to treat $x$ as deterministic, and $codes$ as a random function of $x$. This would probably make $code$ involve a Categorical node. But I'm not sure how to specify the probability function, and I'm a little worried my whole approach may be off. Can anyone set me straight? Also -- long shot -- if there's anyone who codes in pymc, it'd be great to see source code for this. Ordinal probit/logit is a pretty standard model, but I can't find a pymc example anywhere online.
