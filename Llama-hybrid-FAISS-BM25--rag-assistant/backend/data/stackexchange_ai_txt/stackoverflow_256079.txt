[site]: stackoverflow
[post_id]: 256079
[parent_id]: 256065
[tags]: 
I agree with Federico - randomised testing is counterproductive. If a test won't reliably pass or fail, it's very hard to fix it and know it's fixed. (This is also a problem when you introduce an unreliable dependency, of course.) Instead, however, you might like to make sure you've got good data coverage in other ways. For instance: Make sure you have tests for the start, middle and end of every month of every year between 1900 and 2100 (if those are suitable for your code, of course). Use a variety of cultures, or "all of them" if that's known. Try "day 0" and "one day after the end of each month" etc. In short, still try a lot of values, but do so programmatically and repeatably. You don't need every value you try to be a literal in a test - it's fine to loop round all known values for one axis of your testing, etc. You'll never get complete coverage, but it will at least be repeatable. EDIT: I'm sure there are places where random tests are useful, although probably not for unit tests. However, in this case I'd like to suggest something: use one RNG to create a random but known seed, and then seed a new RNG with that value - and log it. That way if something interesting happens you will be able to reproduce it by starting an RNG with the logged seed.
