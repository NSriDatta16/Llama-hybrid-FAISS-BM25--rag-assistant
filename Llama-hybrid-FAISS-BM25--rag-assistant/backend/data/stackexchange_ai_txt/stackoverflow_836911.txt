[site]: stackoverflow
[post_id]: 836911
[parent_id]: 836875
[tags]: 
Basically, just make sure the public interface to your library does not expose Boost. You can always use it however much you want internally. Generally, having the interface of a library depend on another library is bad (unless it depends on a standard library like STL). Boost almost fits into the "standard" library category, but its ABI changes so much that that your interface shouldn't use it. To make sure you don't expose the Boost symbols, there are a few things you could do: A. compile with -fvisibility=hidden and mark all public symbols with __attribute__((visibility("default"))) . you could use a macro to make this easier: #define ABI __attribute__((visibility("default"))) B. do something like this: #pragma GCC visibility push(hidden) #include #pragma GCC visibility pop You should also wrap this around all other internal symbols that you don't want exported, or declare this with __attribute__((visibility("hidden"))) . Again, you could use a macro to make this easier: #define INTERNAL __attribute__((visibility("hidden"))) Of these options, I like A better, because it makes you explicitly think about which symbols are exported, so you don't accidentally export things you don't want. By the way, you can find a lot more information about making DSOs in Ulrich Drepper's How to Write Shared Libraries .
