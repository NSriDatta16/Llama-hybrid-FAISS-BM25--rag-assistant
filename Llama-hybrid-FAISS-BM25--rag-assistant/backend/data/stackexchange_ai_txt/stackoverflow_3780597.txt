[site]: stackoverflow
[post_id]: 3780597
[parent_id]: 3780495
[tags]: 
The Microsoft Docs article /O1, /O2 (Minimize Size, Maximize Speed) says for Visual Studio 2017: The /O1 and /O2 compiler options are a quick way to set several specific optimization options at once. The /O1 option sets the individual optimization options that create the smallest code in the majority of cases. The /O2 option sets the options that create the fastest code in the majority of cases. The /O2 option is the default for release builds. This table shows the specific options that are set by /O1 and /O2: Option Equivalent to /O1 (Minimize Size) /Og /Os /Oy /Ob2 /GF /Gy /O2 (Maximize Speed) /Og /Oi /Ot /Oy /Ob2 /GF /Gy From the Microsoft Docs article /O Options (Optimize Code) : /Og enables global optimizations /Oi generates intrinsic functions for appropriate function calls. /Ot (a default setting) tells the compiler to favor optimizations for speed over optimizations for size. /Oy suppresses the creation of frame pointers on the call stack for quicker function calls. /Ob2 expands functions marked as inline or __inline and any other function that the compiler chooses The /G options are: /GF (Eliminate Duplicate Strings) /Gy (Enable Function-Level Linking) The /G options aren't strictly optimizations, so that leaves us with /Og and /Ot , plus #pragma intrinsic (for item 2 in the list), #pragma auto_inline (for item 5 in the list) and possibly #pragma inline_depth . See Microsoft Docs article Optimization Pragmas and Keywords See also Microsoft Docs article /Ox (Enable Most Speed Optimizations) which indicates the /Ox option is similar to the /O2 option except that it does not turn on /GF nor /Gy . See as well What is the difference between the /Ox and /O2 compiler options? The Microsoft Docs article Compiler options listed by category has a list of compiler options with links as to what they mean.
