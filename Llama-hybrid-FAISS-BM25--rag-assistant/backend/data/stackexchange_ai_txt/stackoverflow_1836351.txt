[site]: stackoverflow
[post_id]: 1836351
[parent_id]: 
[tags]: 
Thoughts on Abandoning Proprietary Framework for A Larger Open Source Project

We have been going back and forth a lot around our office lately about abandoning a proprietary framework that was developed here a couple of years ago and move to something that is larger and community supported. Our current solution was built to include only the things we need and is very flexible, by flexible i mean that it is loose and the developers that have built sites with it over the years have take liberty in that, so a lot of sites we manage and have built and not to any standard at all. Here at the office I use the framework somewhat but prefer to use other tools. Over the years I have used a lot of PHP frameworks ranging from Code Igniter to CakePHP and have been a big fan of Zend Framework for all my personal projects so I am heavily biased and that is why i am asking here for advice from people who may be able to give me a more objective opinion. In the office a lot of work has been done on our framework so I can understand why some people might be hesitant to abandon it but the way i see it is this: We don't currently spend a lot of time keeping our framework current and checking it over and over for bugs, we fix them as we find them. Which we should be doing Any work done to improve our framework is directly put into our overhead column We have a application built on top of our framework that is subscription based and closed source that we sell and I feel could be better if built to a better standard using a popular, community driven, framework that would require or encourage these things. I searched and found this thread, Why do I need to use a popular framework? , that was similar to what I am asking but not quite. What i am asking for are opinions on as to why you would do one thing or the other, i don't really want to start a conversation about which framework is better, that will be the next step for us if we chose to switch. Here are some of the reasons i see switching to a supported, open source framework as helping us in the long run: As PHP puts out new versions the core of the framework will be updated to take advantage of those things without us having to do the work. Security concerns with the libraries will be found by the community and patched without our involvement other than updating our code base with the current version. Lots of information on the internet and exisitng code that can be used as reference Ability to hire outside programmers that know the framework already, instead of hiring people and expecting them to have to learn how to use our proprietary one. Ability to give back to the community through patches, plugins, helpers, and support. Here are the negatives that I have come up with: We will have to port all the existing code we have in our custom application to the new system Our employees will have to be allowed a certain amount of time to learn a new framework and it's ins and outs Our current framework is very flexible and loose which allows us to build things how ever we want and this keep our developers from having to follow and obey and conventions, which some developers seem to hate. I personally like conventions Again it is probably obvious that I am biased and this is the reason I am asking here, I am open minded to what anyone might have to say.
