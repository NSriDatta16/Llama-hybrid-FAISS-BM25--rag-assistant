[site]: datascience
[post_id]: 53009
[parent_id]: 
[tags]: 
Approximating multi-variable function with neural network in python

I'm trying to use 2-5-1 neural network to approximate function $$x_1 \in[-3,3], x_2\in[-1,3], f(x_1,x_2)=\sin(2x_1+x_2)$$ I used code from Implementing a flexible neural network with backpropagation from scratch , to avoid using any complex libraries and tried teaching my network to approximate with following data: # Define dataset n = 40 np.random.seed(4) x1_low, x1_up = -3, 3 x2_low, x2_up = -1, 3 x1s = np.random.uniform(x1_low, x1_up, size=n) x2s = np.random.uniform(x2_low, x2_up, size=n) Xs = [] for _x1 in x1s: for _x2 in x2s: Xs.append([_x1, _x2]) Zs = [my_func(_x1, _x2) for _x1, _x2 in Xs] # Define test data x1_pred = np.random.uniform(x1_low, x1_up, size=n) x2_pred = np.random.uniform(x2_low, x2_up, size=n) Xs_pred = [] for _x1, _x2 in zip(x1_pred, x2_pred): Xs_pred.append([_x1, _x2]) actual_ys = [my_func(_x1, _x2) for _x1, _x2 in Xs_pred] # Train and test neural network for ee in range(0, 4): for e in range(1, 4): alpha = e / 10 ** ee nn = NeuralNetwork() nn.add_layer(Layer(2, 5, 'tanh')) nn.add_layer(Layer(5, 1, 'sigmoid')) errors = nn.train(Xs, Zs, alpha, 300) print('Accuracy: %.2f%%' % (nn.accuracy(nn.predict(Xs_pred), actual_ys) * 100)) # Plot changes in mse plt.plot(errors) plt.ylim([0, 1]) plt.title(str('Changes in MSE - alpha ' + str(alpha))) plt.xlabel('Epoch (every 10th)') plt.ylabel('MSE') plt.show() But I can't seem to have MSE lower than $0.4$ . What can I do here to make it more accurate?
