[site]: stackoverflow
[post_id]: 1554586
[parent_id]: 1554548
[tags]: 
JPA should at least mention objects. The fact that you don't suggests to me that you're not going to be leveraging JPA to its fullest extent. If you've got a legacy schema, and an object model doesn't make sense, perhaps you shouldn't be using JPA. JPA isn't intended to be a substitute for SQL. It addresses that object-relational mismatch. If you don't have objects, just drop down to JDBC and SQL. I don't know what your tables represent, but if you're thinking about objects you should be talking about 1:m and m:n relationships. Once you have those you can use caching, lazy and eager fetching to optimize populating the objects. UPDATE: Write the query so each product has its options and prices lists as 1:m relationships and do eager fetching. That will avoid the (n+1) problem. How can you say that relationships and eager fetching don't help here? Try expressing the relationships in objects and have JPA show you the SQL it generates and compare it to what you'd write. If it's satisfactory, go for it. If not, drop down to JDBC and see if you can do better.
