[site]: stackoverflow
[post_id]: 2414175
[parent_id]: 2413608
[tags]: 
Your question isn't very clear. The question is what do you want to do while "waiting"? If you were talking for example about WinForms GUI applications, then you would want to process other events while waiting (which can be done using the Application.DoEvents method), so maybe you could use a similar solution? A lightweight cooperative multi-threading (probably similar to Ruby fibers) can be simulated in C# using iterators (the yield return ) keyword. Much better way to do something like this in .NET is to use F#, where you can do this kind of things more elegantly using asynchronous workflows . Here is an article that demonstrates writing single-threaded GUI where you can "wait" for an event occurrence without blocking: Programming User interfaces using F# workflows As I said, you could simulate this in C# using yield return . Here is my attempt: Asynchronous programming in C# using iterators Another approach based on yield return is the Concurrency and coordination runtime , which is a bit more complicated, but was designed primarily for C#.
