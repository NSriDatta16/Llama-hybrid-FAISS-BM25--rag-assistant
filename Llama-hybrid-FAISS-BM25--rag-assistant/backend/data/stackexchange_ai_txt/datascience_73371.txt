[site]: datascience
[post_id]: 73371
[parent_id]: 73354
[tags]: 
Let's start from X . As you use the sklearn-style interface, the natural choice is to use StandardScaler. You could use pipeline to integrate it in the grid search. from sklearn.pipeline import Pipeline from sklearn.preprocessing import StandardScaler pipeline = Pipeline([ ('scaler', StandardScaler()), ('model', your_cool_model)]) param_grid = {...} search = GridSearchCV(pipeline, param_grid, cv=5).fit(X, y) That would do the trick. Now about y . The chances are you don't need to scale target. The good discussion is in this question If you are certain that targets should be scaled, the sklearn provides TransformedTargetRegressor just for the case wrapped_model = TransformedTargetRegressor( regressor=model, transformer=StandardScaler())
