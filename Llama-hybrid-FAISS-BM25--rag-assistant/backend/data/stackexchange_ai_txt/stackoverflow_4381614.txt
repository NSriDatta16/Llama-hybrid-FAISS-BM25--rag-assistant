[site]: stackoverflow
[post_id]: 4381614
[parent_id]: 4379135
[tags]: 
Your design looks fairly sound. One comment i'd make - try not to use static helper methods for data retrieval, and try not to put them in the DTO classes (e.g CustomerBO). Why not create a Repository in your Data project? Call it CustomerRepository , and it's responsbility will be to translate business queries into EF queries, and project the results into the DTO's. Much easier that way - you keep your DTO's nice and thin, they shouldn't have any logic. Alternatively if you understand deferred execution and the risks of lazy loading, you can return IQueryable from your Repositories, and return concrete collections (e.g ICollection ) from the Business layer - this is what we do for maximum flexibility. All the logic (query/business) is in our business/service layer. Nothing wrong with your "Business" layer having query logic - we also do this. We build up queries in our Business layer and pass onto our repository. The only pattern you could use that comes to mind is CQRS - where you seperate "queries" from "commands". It's however quite a cumbersome/involved architecture. I think abstracting your DAL code into a Repository would be sufficient. HTH. EDIT Here is a very simple IQueryable Repository example: CustomerRepository public class CustomerRepository { private MyDataContext _ctx; public CustomerRepository(MyDataContext ctx) { this._ctx = ctx; } public IQueryable FindOrders() { return _ctx.Orders; } } CustomerDomainService public class CustomerDomainService { public ICollection GetOrdersForCustomer(int customerId) { // You should in reality use interfaces and dependency injection here.. CustomerRepository repo = new CustomerRepository(new MyContext()); var orders = repo.FindOrders().Where(x => x.CustomerId == customerId).ToList(); } } As i said, be very careful with IQueryable repositories. Only defer the queries to your domain service, not later. Furthermore, only your domain service should reference the repository. So your presentations request data from your domain service, which queries against the Repository and returns the result.
