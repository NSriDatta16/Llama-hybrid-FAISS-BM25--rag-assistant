[site]: stackoverflow
[post_id]: 3845176
[parent_id]: 3844611
[tags]: 
I think my solution is more elegant and simple, and therefore easier to verify as correct: /// Returns a collection containing all consecutive sequences of /// integers in the input collection. /// The collection of integers in which to find /// consecutive sequences. /// Minimum length that a sequence should have /// to be returned. static IEnumerable > ConsecutiveSequences( IEnumerable input, int minLength = 1) { var results = new List >(); foreach (var i in input.OrderBy(x => x)) { var existing = results.FirstOrDefault(lst => lst.Last() + 1 == i); if (existing == null) results.Add(new List { i }); else existing.Add(i); } return minLength lst.Count >= minLength); } Benefits over the other solutions: It can find sequences that overlap. Itâ€™s properly reusable and documented. I have not found any bugs ;-)
