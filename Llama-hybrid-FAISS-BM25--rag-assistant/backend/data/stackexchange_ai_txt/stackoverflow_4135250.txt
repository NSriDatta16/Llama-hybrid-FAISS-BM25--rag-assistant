[site]: stackoverflow
[post_id]: 4135250
[parent_id]: 3789734
[tags]: 
So after a break from this I came back and tackled this with some more members of my team. In short we successfully got Tomcat in ServiceMix using SpringDM. I'll list some of the mistakes I made while trying to get this set up. 1) ServiceMix's Refresh function reanalyzes the POM, so fragments will become resolved only after you refresh their host. That's why mine were still in installed 2) I actually didn't need either of the two fragments, there are defaults for both fragments which are suitable for starting up in tomcat. 3) I was missing the catalalina.start.osgi bundle which was required to offer the tomcat services to the osgi layer and more specificly the Spring DM's web extender. However, I missed it because I had missed 3 key repositories. Here are our Nexus info on these repos: Repository ID: springframework.osgi Repository Name: Springframework OSGI Repository Type: proxy Repository Policy: Release Repository Format: maven2 Contained in groups: Public Repositories Remote URL: http://maven.springframework.org/osgi/ Repository ID: com.springsource.repository.bundles.release Repository Name: SpringSource Enterprise Bundle Repository - SpringSource Bundle Releases Repository Type: proxy Repository Policy: Release Repository Format: maven2 Contained in groups: Public Repositories Remote URL: http://repository.springsource.com/maven/bundles/release/ Repository ID: com.springsource.repository.bundles.milestones Repository Name: SpringSource Enterprise Bundle Repository - SpringSource Bundle Milestones Repository Type: proxy Repository Policy: Release Repository Format: maven2 Contained in groups: Public Repositories Remote URL: http://repository.springsource.com/maven/bundles/milestone/ we also have 4 other SpringSource Enterprise Repos (just in case0 Repository ID: com.springsource.repository.bundles.external Repository Name: SpringSource Enterprise Bundle Repository - External Bundle Releases Repository Type: proxy Repository Policy: Release Repository Format: maven2 Contained in groups: Public Repositories Remote URL: http://repository.springsource.com/maven/bundles/external/ Repository ID: com.springsource.repository.libraries.external Repository Name: SpringSource Enterprise Bundle Repository - External Library Releases Repository Type: proxy Repository Policy: Release Repository Format: maven2 Contained in groups: Public Repositories Remote URL: http://repository.springsource.com/maven/libraries/external/ Repository ID: com.springsource.snapshot Repository Name: SpringSource Enterprise Bundle Repository - SpringSource Bundle Snapshots Repository Type: proxy Repository Policy: Snapshot Repository Format: maven2 Contained in groups: Public Repositories Remote URL: http://repository.springsource.com/maven/bundles/snapshot/ Repository ID: com.springsource.repository.libraries.release Repository Name: SpringSource Enterprise Bundle Repository - SpringSource Library Releases Repository Type: proxy Repository Policy: Release Repository Format: maven2 Contained in groups: Public Repositories Remote URL: http://repository.springsource.com/maven/libraries/release/ So we added these two fragments to the catalina bundle in addition to coyote on servicemix: mvn:org.springframework.osgi/catalina.start.osgi/1.0.0 mvn:org.apache.jasper/com.springsource.org.apache.jasper/6.0.24 the jasper bundle is required for jsp. 4) After adding the bundles, refreshing and restarting appropriate bundles, Tomcat got up and running fine. we could hit localhost:8080 and hit a blank page. We decided to try and deploy the simple-web-app that comes in the Spring-DM download here: http://www.springsource.org/osgi After resolving some dependency issues, we were able to clean and build this web-app and get it deployed. In our Ubuntu environment you could see it explode the war to the /tmp/ directory from which it will serve the web app. Unfortunately we got 404s when trying to hit the http://localhost:8080/simple-web-app/ after some Tomcat debugging we realized that this installation of tomcat was somehow not seeing the usual default web.xml servlet information. So for the mean time we've had to include the default servlet in our web-app's web.xml: default org.apache.catalina.servlets.DefaultServlet debug 0 listings false 1 jsp org.apache.jasper.servlet.JspServlet fork false xpoweredBy false 3 default / jsp *.jsp jsp *.jspx Further investigation of why our sample app could not find the default servlets is here: http://forum.springsource.org/showthread.php?p=328657#post328657 So at this time we seemed to have got it all up and running with working tag-libs as required, given this spring example. Although we have still to attempt using the OSGi classpath to load resources from, or using OSGi services from a web app, we at least have the first step down. Please note this link was very helpful for verifying what I'd done even though we're not using Wicket. http://kevinwebber.ca/blog/2009/11/11/wicket-osgi-and-spring-dm.html#references sorry about the links, stackoverflow wont let me have more than 1..
