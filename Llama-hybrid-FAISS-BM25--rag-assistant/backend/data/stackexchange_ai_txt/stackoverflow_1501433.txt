[site]: stackoverflow
[post_id]: 1501433
[parent_id]: 1501377
[tags]: 
This shouldn't be slow, unless your comparisons are slow. A scan of 500 objects should be very fast (of course you don't mention what "slow" is, or your hardward, but even still...). Your PassFilterVal is going to be "more expensive" because of the method call than having the comparison in line, but since it's the same for all of them, I guess we're stuck with what we have. You could order the parameters so the most selective ones are first. The goal here is to leverage the short circuiting of the ANDs to dump as quickly as possible, thus limiting the amount of actual comparisons. Another thing you can do is optimize it for the "most common queries" first. Are ALL of the criteria always used? If not, you should limit the comparisons to those that are actually being used. Equality in this case is actually expensive (17 method calls and 17 comparisons of "unknown" complexity). If you have some kind of wildcard, or "don't care" value, you can try and skip those from being compared at all. Another idea is to sort the elements by all 17 criteria. Then you use a binary search for the element that matches all 17 fields, and finally iterate for the remaining elements until they STOP matching your criteria. Of course you need to always keep the list properly sorted, but once sorted, it's a binary insert, which will be pretty fast. If you read a lot more than you add to the list, this should be a net gain.
