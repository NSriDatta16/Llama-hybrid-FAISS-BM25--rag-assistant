[site]: stackoverflow
[post_id]: 1477703
[parent_id]: 1477602
[tags]: 
The forward references in your code seems to be to board_t and point_t , which is resolved by forward declaring them. Since you reference board_t in member function declarations of point_t , you cannot define the member functions right away in point_t . Their definitions have to appear after board_t is defined. So you have to either move the definition of the functions into the cpp file, or you have to move their definition in the header after definition of board_t whichever suites you more. point_t is only used as a pointee type in nextPoint_t , so we don't have the same problem for it here: class point_t; // used by nextPoint_t class board_t; // used by point_t struct nextPoint_t //should be implimented with references, but need to practice pointer { point_t* above; // goes without problems - doesn't need definition of point_t point_t* below; point_t* left; point_t* right; }; class point_t { private: piece_t mType; int mLiberties; nextPoint_t mAdjacent; bool mLibertiesCounted; int mCountLiberties(); void mSetPos(int xPos, int yPos, board_t theBoard); void mSetStructureLiberties(int numLibs); public: point_t (); void mSetUp(int xPos, int yPos, board_t theBoard); point_t (int xPos, int yPos, board_t theBoard); void mUpdateLiberties(); }; class board_t { private: point_t mArray [21][21]; public: board_t(); }; Definition at the end of the header looks like // define it either inline in the header, or non-inline in a cpp file inline void point_t::mSetPos(int xPos, int yPos, board_t theBoard) { /* some work... */ } // same for mSetUp... Nonetheless i would recommend you to use const references to pass the board to point_t 's member functions, but this is not a requirement for your code to work. Declarations go fine with incomplete parameter types.
