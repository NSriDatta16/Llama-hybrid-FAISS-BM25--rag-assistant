[site]: stackoverflow
[post_id]: 2460376
[parent_id]: 
[tags]: 
How might I assume a "default value" when parsing using boost::spirit?

Let's say I have a grammar defined to something like: some_rule := a b [c [d]] where c , and d are optional and default to a certain value (let's say 14) if not given. Can I get it to default to the 14 if the value isn't given? I want the produced std::vector to always be of size 4. The closest I've come is like the following: qi::rule (), ascii::space_type> some_rule; some_rule %= int_ >> int_ >> -int_ >> -int_; // ... some_other_rule = some_rule[&some_callback_for_int_vectors]; which will then get 0 for the optional values that didn't show up (I believe). I then change consecutive 0s at the end into 14. Not only is this horribly wrong, but it's also just not elegant. Is there a better way to do this?
