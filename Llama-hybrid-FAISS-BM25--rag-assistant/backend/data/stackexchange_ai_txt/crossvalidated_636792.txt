[site]: crossvalidated
[post_id]: 636792
[parent_id]: 
[tags]: 
Fitting a glmmTMB mode with pre-defined coefficients

I'm working on an analysis in which I conducted multimodel inference and model averaging using glmmTMB, which I used for the ordered beta distribution and I would like to stick with. I dredged the global model, took the 95% confidence set, and calculated the average coefficient for each predictor. Now, however, I would like to figure out how well this averaged model explains the data. Is there a way of making or fitting a model object with predefined coefficients? I would then use this in k-fold cross-validation, and/or in performance::r2, but either way I need a model object. Here is an example: data = data.frame(response = c(0.5, 0.2, 0.3, 0.6, 0.75), varA = c(0, 0.2, 0.4, 1, 0.8), varB = c(-0.4, -1.3, 0.3, 1.6, 0.8), varC = c(-1.2, -0.1, 0.5, 1.2, -0.3)) model Ultimately, I end up with a set of coefficients that are similar to, but different than, my global model. I thought about going into the global model object and manually overwriting the variable coefficients in the object (eg, model$fit$par[1] is the intercept, model$fit$par[2] is varA, and so on.) However, there are other parameters that I don't know how to obtain without refitting the model with the new averaged coefficients, one labelled "betad" and two labelled "psi". Could someone please suggest either a) how to fit the model using varA_coeff, varB_coeff, and varC_coeff, b) how to figure out "betad" and "psi" without refitting the model, or c) an alternative way to evaluate the fit of my averaged model? Sincerely, Corrina
