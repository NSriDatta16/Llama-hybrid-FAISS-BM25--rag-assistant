[site]: stackoverflow
[post_id]: 2224747
[parent_id]: 2224698
[tags]: 
I would adhere to a common style (and in this case provide setters/getters). Why ? it's good practise for when you work with other people or provide libraries for 3rd parties a lot of Java frameworks assume getter/setter conventions and are tooled to look for these/expose them/interrogate them. If you don't do this, then your Java objects are closed off from these frameworks and libraries. if you use setters/getters, you can easily refactor what's behind them. Just using the fields directly limits your ability to do this. It's really tempting to adopt a 'just for me' approach, but a lot of conventions are there since stuff leverages off them, and/or are good practise for a reason. I would try and follow these as much as possible.
