[site]: stackoverflow
[post_id]: 409506
[parent_id]: 409495
[tags]: 
I always hear people argument for a "Validate" or "IsValid" method. Personally I think this may work, but with most DDD projects you usually end up with multiple validations that are allowable depending on the specific state of the object. So I prefer "IsValidForNewContract", "IsValidForTermination" or similar, because I believe most projects end up with multiple such validators/states per class. That also means I get no interface, but I can write aggregated validators that read very well reflect the business conditions I am asserting. I really do believe the generic solutions in this case very often take focus away from what's important - what the code is doing - for a very minor gain in technical elegance (the interface, delegate or whatever). Just vote me down for it ;)
