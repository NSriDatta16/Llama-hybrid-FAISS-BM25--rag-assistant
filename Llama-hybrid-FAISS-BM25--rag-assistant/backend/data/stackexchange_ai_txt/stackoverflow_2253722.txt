[site]: stackoverflow
[post_id]: 2253722
[parent_id]: 2253690
[tags]: 
The standard library uses good algorithms, like in the case of an array (std::vector) it usually doubles the storage every time you run out of space, while a na√Øve implementation might increment storage by one element every time. Because increasing the amount of storage is very slow (all existing data needs to be copied from the old allocation to the new allocation), this can make a huge difference. Similarly, all the other algorithms are implemented in rather optimal ways. The standard library usually doesn't use any kind of loop unrolling or other such optimizations on source code level. It is just regular good and simple code (with horrible variable names and a lot of templates) that the compiler then optimizes. What I said is not specified by the C++ standard, but is what the common practice in existing implementations seems to be.
