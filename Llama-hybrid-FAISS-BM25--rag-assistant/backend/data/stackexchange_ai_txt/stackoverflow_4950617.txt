[site]: stackoverflow
[post_id]: 4950617
[parent_id]: 4924417
[tags]: 
Obviously it is always a trade-off between memory/speed/size. That in mind, you mentioned the same methods I personally use. This is how I see them: [PNG images] (for speed) vs. [JPEG images] (for memory/size) [SQUARE images] (for size) vs. [INDIVIDUAL images] (for memory/speed) [UNIVERSAL images] (for size) vs. [INDIVIDUAL images] (for memory/speed) [CROP images] (for memory/size) vs. [REGULAR images] (for speed) [STREAM images] (for size) vs. [INCLUDE images] (for memory/speed) With respect to the image packer, Xcode does its own compression and data stripping. I haven't heard much regarding how effective it is, though. I personally just open everything in Preview and re-save to check if it can be smaller. The number one method (only if possible, obviously) is most definitely using stretchable images, either by fitting them to the bounds, or using stretchableImageWithLeftCapWidth: topCapHeight: (but sadly is usually not an option, only for border/gradient backgrounds)
