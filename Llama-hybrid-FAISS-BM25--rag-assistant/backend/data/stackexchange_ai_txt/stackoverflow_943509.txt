[site]: stackoverflow
[post_id]: 943509
[parent_id]: 943439
[tags]: 
I would suggest writing your own FactoryBean for creating such a list. This would be reusable and then configurable using XML only. The FactoryBean would look like import java.util.ArrayList; import java.util.List; import org.springframework.beans.factory.FactoryBean; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; import org.springframework.util.Assert; public class CollectingListFactoryBean implements FactoryBean, ApplicationContextAware { private ApplicationContext appCtx; private Class type; public Object getObject() { Assert.notNull(type, "type must be initialized"); List result = new ArrayList(); result.addAll(appCtx.getBeansOfType(type).values()); return result; } public Class getObjectType() { return List.class; } public boolean isSingleton() { return false; } public void setApplicationContext(ApplicationContext applicationContext) { this.appCtx = applicationContext; } public void setType(Class type) { this.type = type; } } Then your XML configuration would be NOTE: I didn't have the time to test the example above. I just used code I already had as a template. ;) Especially I'm not sure if passing Simple as a Class argument for the type property works this way. Just give it a try. In the worst case you would have to use String as the property type and use Class.forName(type) to get your class. But my guess is that Spring does this transformation for you. EDIT Even though this solution should work, I recommend Robert Munteanu's answer.
