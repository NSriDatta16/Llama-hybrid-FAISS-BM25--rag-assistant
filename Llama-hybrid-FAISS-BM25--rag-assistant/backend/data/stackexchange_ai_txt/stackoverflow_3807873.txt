[site]: stackoverflow
[post_id]: 3807873
[parent_id]: 3807754
[tags]: 
Yes -- frustum culling just removes objects that lie entirely outside the viewing frustum. Nothing more or less. Yes, you can potentially improve performance over OpenGL itself, especially if you can cull a larger number of items at once (e.g., a viewgraph library may be able to chop off entire branches of the graph fairly quickly). There is also face culling that removes triangles (or whatever) that are facing away from the viewer, but that's separate from frustum culling. There are a couple of ways of handling objects that are obscured by other objects. Occlusion culling is the simplest, but OpenGL does nothing to support it directly (though some hardware does as an extension). The other is the depth buffer -- which OpenGL does support directly. The difference is that occlusion culling looks at an entire object, and doesn't render it at all if it's completely obscured. The depth buffer works on a fragment-by-fragment basis, so it only takes place after you've (almost) fully rendered an object. Depending on how many objects you're dealing with (and such) doing your own occlusion culling can, therefore, be a pretty big win (since it can avoid doing a lot of rendering that's needed before the depth buffer can do its thing).
