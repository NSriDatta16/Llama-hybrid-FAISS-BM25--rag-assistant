[site]: stackoverflow
[post_id]: 5700589
[parent_id]: 5700279
[tags]: 
I suppose a container does a lot of the boiler-plate code for you. For example, it does exactly what you said, instantiating a class based on the reflected behavior. Many containers also allow you to explicitly configure your system based on config files. IOC or DI are only concepts. IOC/DI concepts give you the "indenpendency" that you favor. The actual implementation can vary. You can do it without using a third-party container -- or write your own. Or you can leverage the features provided by a well-tested third-party container. If you just want to inject different types of db connections, they you have a very small need for IOC/DI. In general IOC/DI (beware, not the container, which is just an implementation of IOC/DI) gives you totally configurable software, aids in unit testing (by injecting stubs), self-configuration, etc. Typically IOC/DI is necessary when: your software is so large and complex that no single person has it all in his head, or has so many different configurations that you don't want customized builds, or is so inter-dependent among the pieces that you find it difficult to test each piece alone
