[site]: stackoverflow
[post_id]: 3053150
[parent_id]: 3052924
[tags]: 
Linear time If you know the total of the numbers (in your case it is 16) you can go from the beginning or the end of the map and sum up the counts until you get to round(n/2)th element, or in case the sum is even to average of floor(n/2)th and ceil(n/2)th elements = median . If you don't know the total count you will have to go through all of them at least once. Sublinear time If you can decide on the data structure and can do pre-processing see wikipedia on selection algorithm and you might get even sublinear algorithm. You can also get sublinear time if you know something about the distribution of the data. EDIT: So under assumption that we have a sequence with counts what we can do is while inserting the key -> count pairs maintain another map - key -> running_total this way you will have a structure in which you will be able to get total_count by looking at the last key's running_total and you will be able to do a binary search to locate the element where running total is close to total_count/2 This will double the memory usage, but will give O(log n) performance for median and O(1) for total_count.
