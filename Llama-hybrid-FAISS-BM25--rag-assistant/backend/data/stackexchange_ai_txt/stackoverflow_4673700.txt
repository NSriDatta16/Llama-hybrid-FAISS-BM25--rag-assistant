[site]: stackoverflow
[post_id]: 4673700
[parent_id]: 4309954
[tags]: 
I am having the exact same issue regardless of Backbone or any other js framework/library. Imagine you have a SIGN IN FORM view which requires a single column layout and you inject the view into that one single div. Then once signed in successfully, somehow another layout is rendered (lets say a HEADER zone, FOOTER zone, LEFT zone and then the MAIN zone (right column) for everything else. The header might contain a LOGO view (if it has functionality) and a GLOBAL/USER MENU view. The LEFT zone will contain the PRIMARY NAV view. Then a further complexity.; Each link inside the PRIMARY NAV view loads up a new sub layout ready for further views to inject themselves into. I don't want the regular controllers/views to care about what layout is currently rendered, just that their container element exists and is ready to be injected into. I thought about using routes (not in the traditional sense) in a clever way something like: function LayoutController() { App.addRouteMatcher("/sign_in/*", this.renderSignInLayout); // single column App.addRouteMatcher("regex to represent anything but sign_in", this.renderMainLayout); // header, footer, primary nav, main zone App.addRouteMatcher("/section1/*", this.renderSubLayoutForSection1); // puts a 1 column layout in the main zone App.addRouteMatcher("/section2/*", this.renderSubLayoutForSection2); // puts a 2 column layout in the main zone } Meaning that if the route was "/section1/whatever/sub/page/within/section/1" the two route matchers above "regex to represent anything but sign_in" and "/section1/*" would both run, meaning that the primary layout would be rendered and then the section1 sub layout would be rendered after if that makes sense. Then all other normal controllers use routes in the traditional sense. There needs to be a nice way to manage layouts and ensure those layouts, sub layouts and views are torn down safely to ensure memory leaks are handled amongst other reasons. Would love to hear someone that has designed and implemented something elegant.
