[site]: stackoverflow
[post_id]: 1591336
[parent_id]: 1591249
[tags]: 
1) Yes, it will be overkill 2) Correct, that should not be done 3) Depends on the situation. The thing is, as you already know, programming to the interface describe what the application does ( not how it does it, that's implementation ) Synchronization was removed from subsequent implementations ( remember, Vector and Hastable are prior to java 1.2 later came ArrayList and HasMap that were not synchronized, but all of them did implement List and Map interface respectively ), because they result in performance penalty due to the excessive synchronization. For instance if you use a vector in a single thread, you still got synchronization within that single thread. Sharing a datastructure between multiple threads is something that has to be considered when designing the application. There you will pick the methods that you will use and you'll choose who is responsible for keeping the data state clean. Here's where you choose between option 1 or 3 that you mentioned. Would there be a manual synchronization? Should we use a synchronized interface? What version we will support etc etc. For instance, if you pick 1, you can also in your design reject certain implementations ( ie vector ) Data synchronization is not something that happens by "luck" you really have to design for it to happen correctly and don't cause more problems that those it solves. During this design, you should pay attention to the options ( the implementations ) and/or the underlying infrastructure you'll use. The easiest way to avoid excessive synchronization is to use immutable data and don't share your data with other threads. Something very similar to the first law of distributing computing by Martin Fowler: "Hence, we get to my First Law of Distributed Object Design: Don't distribute your objects." Would the first law of multithreaded applications be: First law of multithreaded applications: don't share your data? :) Final note: the Collections class provides "synchronized" version of some interfaces: Synchronized List Synchronized Map Synchronized Set
