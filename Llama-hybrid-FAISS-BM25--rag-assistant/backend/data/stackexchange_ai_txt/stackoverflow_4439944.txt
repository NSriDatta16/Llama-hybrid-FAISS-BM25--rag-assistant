[site]: stackoverflow
[post_id]: 4439944
[parent_id]: 267628
[tags]: 
There's an opensource music workstation, called Frinika, and you can script that in Javascript. (Insert / delete notes , change midi effects like pitch wheel etc.) It can import / export regular midi files, so it will work with Fruity loops or whatever else you have. // Insert New song.newLane("MyMidiLane", type("Midi")); lane = song.getLane("MyMidiLane"); part = lane.newPart( time("10.0:000"), time("4.0:000") ); part.insertNote(note("c#3"), time("11.2:000"), time("2:0"), 120 ); part.insertNote(note("f3"), time("11.3:000"), time("1:0"), 100 ); part.insertNote(note("g#3"), time("11.3:000"), time("1:0"), 100 ); part.insertNote(note("b3"), time("11.3:000"), time("0:64"), 100 ); part.removeNote(note("f3"), time("11.3:000")); part = song.newLane("MyTextLane", type("Text")).newPart(time("24.0:000"), time("10.0:000")); part.text = "This is the test text to be inserted."; part.lane.parts[0].remove(); // remove initially inserted text-part Another example for reading/changing notes: lane = song.getLane("MyMidiLane"); // a lane has a fixed instrument assigned lane.parts[0].notes[0].duration=64 lane.parts[0].notes[1].duration=32 lane.parts[0].notes[1].startTick=120 // Parts are blocks of notes that you can drag around together in the Frinika GUI. // They're like patterns in trackers. for (i in lane.parts[0].notes){ println("i: "+i+", n: "+noteName(lane.parts[0].notes[i].note)); println("i: "+i+", dur: "+lane.parts[0].notes[i].duration); println("i: "+i+", startT: "+lane.parts[0].notes[i].startTick); } http://frinika.appspot.com/ It has a Java Webstart launcher as well, so you don't even have to install. It used to bundle the Javadoc documentation as well, but for some reason their latest downloads don't include that. It's a pity, because that's where the Javascript bindings are documented. So, now you have to browse the source or build the Javadoc yourself. (It has some built-in examples that are accessible from the scripting window, you should check them out first. My first example is from there.) Here is the sourcefile where you'll find the Javascript docs: frinika Javascript doc/source But there are other options as well. You can check out mingus too, which is a Python library for music theory and midi file handling. It requires Fluidsynth, and the demo apps require GamePython too, so it's a bit more complicated to setup than Frinika. P.S.: Frinika has a particular bug: when dragging around neighbouring notes, some might not sound the right length. You can help that by transposing forth and back the consecutive notes (fairly fast in piano roll view), or dragging the part that contains the notes forth and back. Restarting Frinika will also help, but that's the slower way. So this bug won't affect saved files, neither midi export.
