[site]: stackoverflow
[post_id]: 2860690
[parent_id]: 2860634
[tags]: 
Use a hash table in which you insert each element. Before you insert an element, check if it's already there. If it is, you have yourself a duplicate. This is O(n) on average , but the worst case is just as bad as your current method. Alternatively, you can use a set to do the same thing in O(n log n) worst case. This is as good as the sorting solution, except it doesn't change the order of the elements (uses more memory though since you create a set). Another way is to copy your vector to another vector, sort that and check the adjacent elements there. I'm not sure if this is faster than the set solution, but I think sorting adds less overhead than the balanced search trees a set uses so it should be faster in practice. Of course, if you don't care about keeping the original order of the elements, just sort the initial vector.
