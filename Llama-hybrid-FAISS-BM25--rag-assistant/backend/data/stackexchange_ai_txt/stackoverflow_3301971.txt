[site]: stackoverflow
[post_id]: 3301971
[parent_id]: 3300161
[tags]: 
A good part of this "lost" memory is probably due to memory fragmentation. As Matlab allocates and frees arrays over the course of a session, the memory gets broken up into smaller areas, and some is lost to overhead in the memory manager, at both the Matlab and the underlying C levels. The overhead is not counted as "used" by Matlab because it's not being used to hold M-code array values. Some memory may also be consumed by Matlab loading additional M-files and libraries, allocating internal buffers or structures, or by expansion of the Java heap in Matlab's embedded JVM. This is normal. After doing some work, Matlab won't have as much memory available as it did in a fresh session. AFAIK, once low-level fragmentation occurs, there's nothing you can do to eliminate it aside from restarting Matlab. Allocating lots of small arrays can accelerate fragmentation. This sometimes happens if you use large cellstrs or large arrays of objects. So if you are having problems, you may need to reduce your peak memory usage in the function by breaking the work in to smaller chunks, reducing cell usage, and so on. And if you have big cellstr arrays in the MAT files, convert them to char. The "high water mark" of allocation is what governs fragmentation, so if you can break your data set in to smaller chunks, you can fit it in less memory. Inside your function, clear as much as you can from one MAT file before moving on to the next. One way to do this implicitly is to move the per-file processing into a subfunction if it's currently sitting in a loop in your main function. To help debug, do a "dbstop if all error", which will get triggered by the OOM. From there, you can use whos and the debugger to find out where the space is being taken up when you exhaust memory. That might reveal temp variables that need to be cleaned up, or suggest ways of chunking the work. If you'd like to experiment to see what fragmentation looks like and how it affects memory()'s output, here's a function that will just create some fragmentation. function fragmem(nbytes, chunksize) %FRAGMEM Fragment the Matlab session's memory if nargin Fragging 300 MB in 1KB chunks on my machine reproduces a "loss" on my win32 machine about the size you're seeing. >> memory Maximum possible array: 1384 MB (1.451e+009 bytes) * Memory available for all arrays: 1552 MB (1.627e+009 bytes) ** Memory used by MATLAB: 235 MB (2.463e+008 bytes) Physical Memory (RAM): 3311 MB (3.472e+009 bytes) >> fragmem(300*2^20) Fragmenting 300 MB memory into 1 KB chunks (100 steps of 3072 chunks) >> memory Maximum possible array: 1009 MB (1.059e+009 bytes) * Memory available for all arrays: 1175 MB (1.232e+009 bytes) ** Memory used by MATLAB: 257 MB (2.691e+008 bytes) Physical Memory (RAM): 3311 MB (3.472e+009 bytes) >>
