[site]: stackoverflow
[post_id]: 2006103
[parent_id]: 2005981
[tags]: 
Where to start? Choose a development environment (I would suggest Visual Studio 2008 Express or Professional, depending on the budget and the need for features of the Professional version) Even for one single developer: choose a Version control system !!!! (Subversion has only little administrative overhead, fine for one developer) Choose a .NET Framework version (3.5 is fine unless your application has to run on Win2K; for Win2K use .NET 2.0) Choose a mature programming language (C# or VB.NET, what you or your boss likes best) Choose a GUI technology (for a single developer, I would suggest using WinForms, unless you are going to write a Web application or a command line utility) Choose a mature DB access technology (ADO.NET works for a lot of things, unless you have very high performance requirements that are better dealt with old ADO/OleDB or DAO) EDIT : use Google to find some entry examples according to the choosen technology, or buy yourself a book. For example, here is one for C# using OLE DB to access a MS Access DB. This Access site is a good starting point, too. EDIT2 : make yourself familiar with "Microsoft Access" (the Office Application). Not because you are going to use it like a typical user, but you will probably need it for administrative purposes. And the VBA & SQL documentation included will be sometimes helpful, even if you code with C# or VB.NET EDIT3 : for reporting purposes, choose a reporting technology. There are plenty of possibilites here, depending on your needs, your skills and/or budget, for example Plain ASCII or CSV reports (coded by hand) HTML or XML reports using Excel as reporting engine using a PDF library like Report.NET using a third party tool like Crystal Reports You will find a lot of helpful links when you give "report generation .net" to Google, for example this one . And finally: come back to SO and ask more concrete questions when you come to the point where you have them. There might be other constraints, depending on what code is already existing in your organization. And I would avoid technologies like F# , WPF or Linq to Entities .
