[site]: stackoverflow
[post_id]: 2484173
[parent_id]: 2482899
[tags]: 
BinaryFormatter is not very tolerant to assembly changes. I long ago reached the conclusion that it is OK (just about) for transport, but not good for any kind of storage - it is just too brittle . In short, I would use another serializer - but contract-based, not type-based (so any type with the same cnotract can share the data): in many cases XmlSerializer will do; it has some limitations (public types and members), but it works generally with .NET 3.0, DataContractSerializer is useful or if you want something outside of the code libs, protobuf-net is very fast and efficient Of those, only DataContractSerializer will currently support "graph" mode (rather than trees). If you have existing data that you're fighting, I would be sorely tempted to use the old code (or something very close to it) to re-write the data in a contract-based form. Although you say you've only just created it, so maybe this isn't a problem.
