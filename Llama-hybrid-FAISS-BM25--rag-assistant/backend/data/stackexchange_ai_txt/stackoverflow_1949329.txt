[site]: stackoverflow
[post_id]: 1949329
[parent_id]: 1949120
[tags]: 
For my app I rolled my own number keypad. Created a modal view with all the buttons I needed, and when my UITextfield subclass becomes first responder I animate it in. Quite a bit of work, but you can also customise the look & feel (with your own nice buttons etc) which is what I wanted for my app. Update : My DecimalKeyboardViewController: I actually use a subclass of UIControl instead of a UITextfield because I display it in some custom way. If I was to subclass UITextfield I'd do something like this: @interface DecimalNumberTextfield : UITextfield { NSDecimalNumber *value; } @property (nonatomic, retain) NSDecimalNumber *value @end @implementation DecimalNumberTextfield - (BOOL)becomeFirstResponder { if ([super becomeFirstResponder]) { [[DecimalKeyboardViewController sharedDecimalKeyboardViewController] showForField:self]; return YES; } else { return NO; } } - (BOOL)resignFirstResponder { if ([super resignFirstResponder]) { [[DecimalKeyboardViewController sharedDecimalKeyboardViewController] hide]; return YES; } else { return NO; } } - (void)setValue:(NSDecimalNumber *)aValue { // you need to set value and update the displayed text here } @end Here is the DecimalKeyboardViewController. You'll need to create the nib file and add tags to the buttons (0-9 for the numbers probably, and other tags for the other buttons that you'd use), then hook up the buttons to -buttonPressed: : @interface DecimalKeyboardViewController : UIViewController { DecimalNumberTextField *fieldBeingEdited; } @property (nonatomic, retain) DecimalNumberTextField *fieldBeingEdited; + (id)sharedDecimalKeyboardViewController; - (void)showForField:(DecimalNumberTextField *)aTextField; - (void)hide; - (IBAction)buttonPressed:(id)sender; @end @implementation DecimalKeyboardViewController static DecimalKeyboardViewController *sharedViewController; + (id)sharedDecimalKeyboardViewController { if (!sharedViewController) { sharedViewController = [[DecimalKeyboardViewController alloc] initWithNibName:@"DecimalKeyboardViewController" bundle:[NSBundle mainBundle]]; } return sharedViewController; } - (void)showForField:(DecimalNumberTextField *)aTextField { self.fieldBeingEdited = aTextField; // add ourselves to the window unless we're there already UIWindow *theWindow = self.fieldBeingEdited.window; CGRect frame = self.view.frame; if (!self.view.superview) { // add ourselves to the UIWindow unless we're already visible frame.origin.y = theWindow.frame.size.height; // we start just out of sight at the bottom self.view.frame = frame; [theWindow addSubview:self.view]; } // start animating [UIView beginAnimations:nil context:nil]; [UIView setAnimationBeginsFromCurrentState:YES]; [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut]; // animate the keyboard in frame.origin.y = theWindow.frame.size.height - frame.size.height; self.view.frame = frame; // GO! [UIView commitAnimations]; } - (void)hide { [UIView beginAnimations:nil context:nil]; [UIView setAnimationBeginsFromCurrentState:YES]; [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut]; if (self.view.superview) { CGRect frame = self.view.frame; frame.origin.y = self.view.superview.frame.size.height; self.view.frame = frame; } [UIView commitAnimations]; self.fieldBeingEdited = nil; } - (IBAction)buttonPressed:(id)sender { UIButton *button = (UIButton *)sender; NSDecimalNumber *oldNumber = self.fieldBeingEdited.value; NSDecimalNumber *newNumber; switch (button.tag) { // calculate the new number based on what button the user pressed } // update the DecimalNumbertextfield self.fieldBeingEdited.value = newNumber; } @end Update 2 : Since I subclassed UIControl I didn't have to deal with the standard keyboard popping up. If you subclass UITextfield I'd think the normal keyboard would be displayed as well. You'd have to prevent that somehow (not sure how) or subclass UIControl like I did.
