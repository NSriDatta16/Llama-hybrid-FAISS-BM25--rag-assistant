[site]: stackoverflow
[post_id]: 4981806
[parent_id]: 4981730
[tags]: 
You can allocate an array of arbitrary length with malloc() (it's like "new" in Java), and make it grow or shrink with realloc(). You have to remember to free the memory with free() as in C there is not garbarage collector. Check: http://www.gnu.org/software/libc/manual/html_node/Memory-Allocation.html#Memory-Allocation Edit: #include #include int main(){ char * string; // Lets say we have a initial string of 8 chars string = malloc(sizeof(char) * 9); // Nine because we need 8 chars plus one \0 to terminate the string strcpy(string, "12345678"); // Now we need to expand the string to 10 chars (plus one for \0) string = realloc(string, sizeof(char) * 11); // you can check if string is different of NULL... // Now we append some chars strcat(string, "90"); // ... // at some point you need to free the memory if you don't want a memory leak free(string); // ... return 0; } Edit 2: This is the sample for allocate and expand an array of pointers to chars (an array of strings) #include int main(){ // Array of strings char ** messages; char * pointer_to_string_0 = "Hello"; char * pointer_to_string_1 = "World"; unsigned size = 0; // Initial size one messages = malloc(sizeof(char *)); // Note I allocate space for 1 pointer to char size = 1; // ... messages[0] = pointer_to_string_0; // We expand to contain 2 strings (2 pointers really) size++; messages = realloc(messages, sizeof(char *) * size); messages[1] = pointer_to_string_1; // ... free(messages); // ... return 0; }
