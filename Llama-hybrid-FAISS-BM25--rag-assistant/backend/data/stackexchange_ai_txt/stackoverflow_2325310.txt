[site]: stackoverflow
[post_id]: 2325310
[parent_id]: 2324824
[tags]: 
Originally I was writting the query using ICritreia (like Lachlan), public override IQueryable GetQuery(ISession session) { ICriteria criteria = session.CreateCriteria (); // SELECT criteria .SetProjection( Projections.Property("Make"), Projections.Property("Model"), Projections.Property("Type"), Projections.Property("Engine") ); // WHERE criteria .Add( Restrictions.Eq("Make", _criteria.Make) && Restrictions.Eq("Model", _criteria.Model) && Restrictions.Eq("Type", _criteria.Type) && Restrictions.Eq("Engine", _criteria.Engine) ); //criteria.Add(Something("IsLinked",Subqueries.Gt(0,subCriteria))); criteria.SetResultTransformer(Transformers.AliasToBean ()); return criteria.List ().AsQueryable(); } But after reading Cem's post decided to use a Linq query. public override IQueryable GetQuery(ISession session) { var results = session.Linq () .Select(v => new ApplicationVehicleSummary { Make = v.Make, Model = v.Model, Type = v.Type, Engine = v.Engine, IsLinked = v.Applications.Any(a => a.Name == _name) }) .Where(v => v.Make == _criteria.Make && v.Model == _criteria.Model && v.Type == _criteria.Type && v.Engine == _criteria.Engine ); return results; } Which works, thanks for your help.
