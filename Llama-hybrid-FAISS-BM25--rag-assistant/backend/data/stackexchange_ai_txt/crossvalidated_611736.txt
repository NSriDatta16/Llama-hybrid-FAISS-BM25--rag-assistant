[site]: crossvalidated
[post_id]: 611736
[parent_id]: 611735
[tags]: 
If your aim is just to keep doing the same kind of analysis but reduce the burden of updating lots of things in the table, then that can be done within Excel, although it can potentially be done even easier in a language like python or R. In Excel, you could do something like this: In one sheet, fill in all of your state data. Select all of it, and choose "Insert Table" from the menu. It will look something like this: In a second sheet, create another table with the variables and their relative weights. It will also help to name the table (possibly in the Table Design menu). You'll get something that looks like this (notice that I've named the table "Weights"): Back in the first table, enter the following in the Mark column (I named this table StateScores for easier reference): =SUMPRODUCT(StateScores[@[Crime rate]:[House prices]], TRANSPOSE(Weights[Weight]))) Let's break down what this does: StateScores[@[Crime rate]:[House prices]] references the columns between "Crime rate" and "House prices" in the StateScores table in the current row. TRANSPOSE(Weights[Weight]) references the "Weight" column in the Weights table, but since they're in column format it transposes them into a row to match the first array. SUMPRODUCT performs an element-by-element product of the two arrays and sums the results together, i.e. it calculates Crime rate x Weight(Crime rate) etc and then adds it all up. If you add another variable to your table, you add another row to the Weights table and you change the reference in the above formula to cover all of the corresponding columns. To make it even easier for you, add /SUM(Weights[Weight]) at the end of the formula. This automatically scales everything so that the weights add to 1, meaning that you don't have to work that out yourself. You can make the weights 2, 3, 5 and they'll be adjusted appropriately. If you were working in python or R there would be an existing function for all of this in some package, but there's an overhead involved in learning the language. And unless you're completely changing how you analyse the data, machine learning is not going to help you.
