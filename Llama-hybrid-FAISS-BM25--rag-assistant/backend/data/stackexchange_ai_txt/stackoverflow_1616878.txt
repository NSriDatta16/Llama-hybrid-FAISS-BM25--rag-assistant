[site]: stackoverflow
[post_id]: 1616878
[parent_id]: 1615171
[tags]: 
Whew, this was a tough one for me; I'm sure there are more elegant solutions than this, but this is what I came up with: --test data DECLARE @orders TABLE ( ID INT IDENTITY(1, 1) , item CHAR(3) , Qty INT ) INSERT INTO @orders ( item, Qty ) VALUES ( 'abc', 1 ), ( 'abc', 2 ), ( 'abc', 3 ), ( 'abc', 4 ), ( 'abc', 5 ), ( 'abc', 6 ), ( 'abc', 7 ), ( 'xyz', 1 ), ( 'xyz', 2 ), ( 'xyz', 3 ), ( 'xyz', 4 ) DECLARE @ItemLoc TABLE ( Qty INT , ITEM CHAR(3) , Loc CHAR(2) , Dt INT ) INSERT INTO @ItemLoc ( Qty, ITEM, Loc, Dt ) VALUES ( 3, 'abc', 'L1', 1990 ), ( 2, 'abc', 'L2', 1992 ), ( 5, 'abc', 'L3', 2003 ), ( 4, 'abc', 'LH', 2004 ), ( 1, 'xyz', 'L4', 1990 ), ( 2, 'xyz', 'L5', 1993 ), ( 9, 'xyz', 'L6', 2001 ), ( 2, 'xyz', 'LJ', 2004 ) ; /*looks complicated, and it is I use a cte to try to ease it up a bit, but I first identify a running sum of items in the bins, and a pull order based on item and year. */ WITH cte AS ( SELECT a.Qty , a.Item , a.Loc , a.Dt , a.RunningSum , a.PullOrder , b.Qty AS OrderQty FROM ( SELECT Qty , Item , Loc , Dt , RunningSum = ( SELECT SUM(Qty) FROM @ItemLoc il1 WHERE il1.Item = il.Item AND il1.Dt = OrderQty GROUP BY Item ) x ON c1.Item = x.Item AND c1.PullOrder
