[site]: stackoverflow
[post_id]: 3102224
[parent_id]: 3101505
[tags]: 
As I understand it, you're looking to compute all permutations using the inner arrays of your 3x15 array to specify the set of possibilities at each index for the output array. Here's a recursive Java solution (I'm not sure what language you're actually using, which is why it's best not to list 4 different languages in your tags): public static void main(String[] args) throws Exception { List perms = new ArrayList (); int[][] a = {{1,2,3},{1,2,3},{1,2,3},{1,2,3},{1,2,3}}; int[] buff = new int[a.length]; recurse(perms, a, buff, 0); int[][] allPerms = perms.toArray(new int[perms.size()][]); for ( int[] arr : allPerms ) { System.out.println(Arrays.toString(arr)); } } private static void recurse(List perms, int[][] a, int[] buff, int index) { if ( index == a.length ) { perms.add(Arrays.copyOf(buff, buff.length)); } else { for ( int i = 0; i The nature of the problem doesn't make recursion all that elegant though.
