[site]: stackoverflow
[post_id]: 4037744
[parent_id]: 4035691
[tags]: 
All depends on your needs and how you want to do the things, patterns are practices no standards, they encourage for code reuse, patterns are not grabbed on stone. So, why should you not use Factory Pattern to make objects persistence?. This is how I have used such pattern for solve the problem to read/write data from/to different databases, maybe this is not the better form of using the pattern but it is currently working, is extensible, is distributed among layers, and almost everybody can understand it: namespace Domain.App { public class PresentationClass { private Collection GetData(ISomeInput1 input) { ServicesLogicContext logic = new ServicesLogicContext( (MyType) Identifier ); return logic.GetSomeData(input) as Collection ; } private IMethodResult ExecuteSomeAction(ISomeInput2 input) { ServicesLogicContext logic = new ServicesLogicContext( (MyType) Identifier); return logic.ExecuteSomeAction(input); } } } namespace Domain.Logic { public sealed class ServicesLogicContext : ServicesLogicContextBase { public IList GetSomeData(ISomeInput1 input) { DBServices services = DBServicesProvider.CreateServices(SomeIdentifier); return DBServicesProvider.GetSomeData(input); } public IMethodResult ExecuteSomeAction(ISomeInput2 input) { DBServices services = DBServicesProvider.CreateServices(SomeIdentifier); IMethodResult result = services.ExecuteSomeAction(input); return result; } } } namespace Domain.Data { public abstract class DBServices : IServices { public virtual IList GetSomeData(ISomeInput1 input) {...} public virtual IMethodResult ExecuteSomeAction(ISomeInput2 input) {...} } public class DBServicesSpecific1 : DBServices { public override IList GetSomeData(ISomeInput1 input) {...} public override IMethodResult ExecuteSomeAction(ISomeInput2 input) {...} } public class DBServicesSpecific2 : DBServices { public override IList GetSomeData(ISomeInput1 input) {...} public override IMethodResult ExecuteSomeAction(ISomeInput2 input) {...} } public sealed class DBServicesProvider { public static DBServices CreateServices(MyType identifier) { DBServices result = null; switch(identifier) { case MyType.Specific1: result = new DBServicesSpecific1(); break; case MyType.Specific2: result = new DBServicesSpecific2(); break; } return result; } } }
