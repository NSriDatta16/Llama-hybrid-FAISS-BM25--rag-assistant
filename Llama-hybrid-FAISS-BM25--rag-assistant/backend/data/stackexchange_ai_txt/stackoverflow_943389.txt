[site]: stackoverflow
[post_id]: 943389
[parent_id]: 943280
[tags]: 
The use of static at the file scope to restrict access to the current translation unit is deprecated in C++, but still acceptable in C. Instead, use an unnamed namespace namespace { int file_scope_x; } Variables declared this way are only available within the file, just as if they were declared static. The main reason for the deprecation is to remove one of the several overloaded meanings of the static keyword. Originally, it meant that the variable, such as in a function, would be given storage for the lifetime of the program in an area for such variables, and not stored on the stack as is usual for function local variables. Then the keyword was overloaded to apply to file scope linkage. It's not desirable to make up new keywords as needed, because they might break existing code. So this one was used again with a different meaning without causing conflicts, because a variable declared as static can't be both inside a function and at the top level, and functions didn't have the modifier before. (The storage connotation is totally lost when referring to functions, as they are not stored anywhere.) When classes came along in C++ (and in Java and C#) the keyword was used yet again, but the meaning is at least closer to the original intention. Variables declared this way are stored in a global area, as opposed to on the stack as for function variables, or on the heap as for object members. Because variables cannot be both at the top level and inside a class definition, extra meaning can be unambiguously attached to class variables. They can only be referenced via the class name or from within an object of that class.
