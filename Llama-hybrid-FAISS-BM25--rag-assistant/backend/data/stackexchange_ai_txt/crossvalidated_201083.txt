[site]: crossvalidated
[post_id]: 201083
[parent_id]: 
[tags]: 
Bayesian Network produces different directions depending on order

I'm trying to fit a Bayesian Network model with bnlearn to determine the direction that users go from different actions (i.e.: do seeds lead to joins, or joins to seeds?). The data is collected per day, so each record corresponds to one day of data. Because I thought there might be time effects, I included a lagged version of each variable in the data set as well and created a blacklist to make it so current-date variables couldn't lead to lagged versions (it doesn't make sense that an event in the future had an impact on an event in the past). The boot.strength function provide me with useful probabilities about the strength and direction of the association, but I noticed some strange behavior with it. Depending on the order of the variables in my data frame, I get completely different numbers. I've provided a MWE to demonstrate. library(bnlearn) library(snowfall) library(parallel) compute.clusters A quick perusal of the data, head(d1, 2) server_date current_sub_count DAU arrangements solos seeds joins wk1_lag_current_sub_count wk1_lag_DAU wk1_lag_arrangements wk1_lag_solos wk1_lag_seeds wk1_lag_joins 1 2015-09-11 2572 44365 15 2894 1271 6853 2455 27491 16 1898 657 3422 2 2015-09-12 2580 55848 12 3873 1371 7966 2474 51767 19 3705 1237 7049 head(d2, 2) server_date wk1_lag_current_sub_count wk1_lag_DAU wk1_lag_arrangements wk1_lag_solos wk1_lag_seeds wk1_lag_joins current_sub_count DAU arrangements solos seeds joins 1 2015-09-11 2455 27491 16 1898 657 3422 2572 44365 15 2894 1271 6853 2 2015-09-12 2474 51767 19 3705 1237 7049 2580 55848 12 3873 1371 7966 So the datasets are the same, except for the order of the variables. But when I bootstrap the networks to get an idea of the probability of an edge, or the direction of that edge, the results differ greatly. f1 = boot.strength(algorithm = "hc", data=d1[,-1], R=1E3, cluster = compute.clusters) f2 = boot.strength(algorithm = "hc", data=d2[,-1], R=1E3, cluster = compute.clusters) f1[f1$from=='current_sub_count',] from to strength direction 1 current_sub_count DAU 0.369 0.6912448 2 current_sub_count arrangements 0.021 0.6458333 3 current_sub_count solos 0.958 0.8824781 f2[f2$from=='current_sub_count',] from to strength direction 73 current_sub_count DAU 0.256 0.8213628 74 current_sub_count arrangements 0.039 0.4613839 75 current_sub_count solos 0.915 0.8924353 Why does the direction and strength of the edges matter so much as a function of the order of the variables? I don't want to use a method where the order of the variables, which is arbitrary, affects the outcome so much. Interestingly, when I use hc() to pick the optimal network, the same model is chosen regardless of my choice of d1 or d2 . Is there an approach that gives me the desirable output of boot.strength , but with an invariance to the order I enter the covariates?
