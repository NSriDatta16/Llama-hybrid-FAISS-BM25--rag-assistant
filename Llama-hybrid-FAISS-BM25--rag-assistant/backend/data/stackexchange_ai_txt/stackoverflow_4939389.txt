[site]: stackoverflow
[post_id]: 4939389
[parent_id]: 4936987
[tags]: 
1) There's a gcc extension which seemed fitting: enum{ d_y = __builtin_choose_expr(N,offsetof(X,y),0) }; But it didn't work as expected, even though manual says "the built-in function does not evaluate the expression that was not chosen" 2) member pointers seemed interesting, eg. offsetof can be defined like this: template int f( T C::*q ) { return (int)&((*(C*)0).*q); } But I still didn't find a way to turn this into constexpr. 3) For now, here's another version: #include #pragma pack(1) template struct B { int z; void f( void ) { printf( "x=%i\n", x ); } }; #define STRUCT( A ) template struct A { #define CHILD( A, N, B, y ) }; template<> struct A : A \ { B ,sizeof(A )> y; #define STREND }; STRUCT( A ) int x0; int x1; CHILD( A,1, B, y ); short x2; CHILD( A,2, B, z ); char x3; STREND typedef A A1; int main( void ) { A1 a; a.y.f(); a.z.f(); }
