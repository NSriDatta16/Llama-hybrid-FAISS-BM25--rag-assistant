[site]: stackoverflow
[post_id]: 2503769
[parent_id]: 2503186
[tags]: 
That appears to be a bug, albeit at a rather obscure intersection between nested classes, abstract types, and default parameters. You could raise a ticket in the Scala bug tracker -- I couldn't find an existing ticket describing this. Here's how it looks after the typer phase: ~: scala -nocompdaemon -Xprint:typer -e 'trait P[T] { class Inner(val f: T = null.asInstanceOf[T]) }; new P[Int] { new Inner(){} }' !!! discarding (fragment of scalacmd162105603941759154.scala):1: error: type mismatch; found : T required: Int trait P[T] { class Inner(val f: T = null.asInstanceOf[T]) }; new P[Int] { new Inner(){} } ^ [[syntax trees at end of typer]]// Scala source: (virtual file) package { final object Main extends java.lang.Object with ScalaObject { def this(): object Main = { Main.super.this(); () }; def main(argv: Array[String]): Unit = { val args: Array[String] = argv; { final class $anon extends scala.AnyRef { def this(): anonymous class $anon = { $anon.super.this(); () }; abstract trait P[T >: Nothing private[this] val f: T = _; def f: T = Inner.this.f; def this(f: T = null.asInstanceOf[T]): P.this.Inner = { Inner.super.this(); () } }; final object Inner extends java.lang.Object with ScalaObject { def init$default$1: T @scala.annotation.unchecked.uncheckedVariance = null.asInstanceOf[T]; def this(): object P.this.Inner = { Inner.super.this(); () } } }; { final class $anon extends java.lang.Object with this.P[Int] { def this(): anonymous class $anon = { $anon.super.this(); () }; { final class $anon extends $anon.this.Inner { def this(): anonymous class $anon = { $anon.super.this(P.this.Inner. ); () }; }; new $anon() } }; new $anon() } }; { new $anon(); () } } } } } And the working version, without the anonymous inner class extending Inner. ~: scala -nocompdaemon -Xprint:typer -e 'trait P[T] { class Inner(val f: T = null.asInstanceOf[T]) }; new P[Int] { new Inner() }' [[syntax trees at end of typer]]// Scala source: (virtual file) package { final object Main extends java.lang.Object with ScalaObject { def this(): object Main = { Main.super.this(); () }; def main(argv: Array[String]): Unit = { val args: Array[String] = argv; { final class $anon extends scala.AnyRef { def this(): anonymous class $anon = { $anon.super.this(); () }; abstract trait P[T >: Nothing private[this] val f: T = _; def f: T = Inner.this.f; def this(f: T = null.asInstanceOf[T]): P.this.Inner = { Inner.super.this(); () } }; final object Inner extends java.lang.Object with ScalaObject { def init$default$1: T @scala.annotation.unchecked.uncheckedVariance = null.asInstanceOf[T]; def this(): object P.this.Inner = { Inner.super.this(); () } } }; { final class $anon extends java.lang.Object with this.P[Int] { def this(): anonymous class $anon = { $anon.super.this(); () }; new $anon.this.Inner($anon.this.Inner.init$default$1) }; new $anon() } }; { new $anon(); () } } } } }
