[site]: stackoverflow
[post_id]: 4582150
[parent_id]: 4581534
[tags]: 
OK, first a caveat, MongoDB does have a limitation on document size. However, the newest version will cover your 10MB size. So some useful points for MongoDB . Ideally, I'd like the storage solution to be easily horizontally scalable, with redundancy across servers (e.g. each document stored on at least 3 nodes) with easy recovery of crashed servers. For replication, MongoDB supports replica sets . Replica sets are single-master replicas. If the master goes down the system automatically elects a new master (easy recover). Adding a new node is as simple as starting up a new server and pointing at the existing set. For horizontal scalability, MongoDB supports sharding . Sharding is a little more complex, but works like you would expect it to, splitting writes across multiple machines (or multiple replica sets). I need to store hundreds of thousands (right now, potentially many millions) of documents that start out empty and are appended to frequently Several companies have Mongo running billions of documents in production. Mongo provides a series of update modifiers that are very useful in the case of "appended to" . In particular check out the $push operator that adds to the end of an array. Should be exactly what you need. Read accesses are some subset of the document, which almost always starts midway through at some indexed location (e.g. "document #4324319, save #53 to the end"). MongoDB allows you to return only select fields (as expected). Depending on your layout you can use dot notation to retrieve only certain sub-documents. If your updates are implemented as arrays, you can also use the $slice command which is well suited to the query you list above. So I think that MongoDB meets all of your basic needs here. Easy to append, easy to query those appends and the replication is built in. You get horizontal scaling via sharding (try starting first with a replica)
