[site]: stackoverflow
[post_id]: 574059
[parent_id]: 532613
[tags]: 
MichaelGG got it right - all you need to do is use the native remoting available in PowerShell V2. It gives you a crazy degree of control over networking all using the WS-MAN protocol (that is a standard management protocol which is implemented by our WINRM service). The way the V2 remoting works is that you can invoke a command (single command, pipeline, set of commands, or entire script) on a remote machine(s) and specify how you want that command to run. e.g. Invoke-Command {get-process} -Computername (cat servers.txt) Invoke-Command (1)-ScriptBlock | -Command (0)[-ComputerName | -Cn ] [-ApplicationName ] [-ArgumentList | -Args ] [-AsJob ] [-Authentication ] [-CertificateThumbprint ] [-ConfigurationName ] [-Credential ] [-HideComputerName | -HCN ] [-InputObject (ByValue)] [-JobName ] [-Port ] [-SessionOption ] [-ThrottleLimit ] [-UseSSL ] You can also provide SessionOptions New-WSManSessionOption [-NoEncryption ] [-OperationTimeout ] [-ProxyAccessType ] [-ProxyAuthentication ] [-ProxyCredential ] [-SkipCACheck ] [-SkipCNCheck ] [-SkipRevocationCheck ] [-SPNPort ] [-UseUTF16 ] New-WSManSessionOption [-NoEncryption ] [-OperationTimeout ] [-ProxyAccessType ] [-ProxyAuthentication ] [-ProxyCredential ] [-SkipCACheck ] [-SkipCNCheck ] [-SkipRevocationCheck ] [-SPNPort ] [-UseUTF16 ] As you can see, you can specify how to traverse proxies, you can provide one set of credentials to the proxy and a different set of credentials to the endpoint. All that said, the simple case is that you don't specify anything and we'll use port 80. Experiment! Enjoy! Engage! Jeffrey Snover [MSFT] Windows Management Partner Architect
