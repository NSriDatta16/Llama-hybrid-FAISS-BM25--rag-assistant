[site]: stackoverflow
[post_id]: 219700
[parent_id]: 219285
[tags]: 
Cal Henderson (of Flickr fame) wrote Serving JavaScript Fast a while back. It covers asset delivery, not organization, but it might answer some of your questions. Here are the bullet points: Yes, you ought to concatenate JavaScript files in production to minimize the number of HTTP requests. BUT you might not want to concatenate into one giant file; you might want to break it into logical pieces and spread the transfer cost over several pages. gzip compression is good, but you shouldn't serve gzipped assets to IE I'll add a few bullet points of my own: You ought to come up with a solution that works for both development and production. In development mode, it should pull in extra JavaScript files on demand; in production it should bundle everything ahead of time. Switching from one behavior to the other should be as easy as setting a flag. Rails 2.0 handles all this through an asset cache ; other web app frameworks might offer similar solutions. As another answer suggests, placing third-party libraries in a lib directory is a good start. You can also divide your own JS files into sub-directories if it makes sense. Ideally, you'll be able to arrange them in such a way that the files in a given sub-directory can be concatenated into one file.
