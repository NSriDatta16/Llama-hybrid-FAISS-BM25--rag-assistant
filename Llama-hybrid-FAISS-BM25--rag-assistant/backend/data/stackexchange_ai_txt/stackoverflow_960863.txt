[site]: stackoverflow
[post_id]: 960863
[parent_id]: 960833
[tags]: 
You're speaking about different things. First I think you should always keep YAGNI in mind so if there's is absolutely no hint that you are gonna need it, the your are probably not, so don't use it. IF the change is known to happen but you don't really have a clue of the form it will take then trying to overdesign will be a handicap now. If it is possible to have it for your manager in two days but you waste 2 weeks trying to mold it into a strategy pattern then no wonder he is angry. Only use patterns when you need them or you're reasonably sure you're gonna need them, if you aren't then don't, there'll be plenty of time to refactor, and keep in mind refactoring can be planned later on, when it's needed. Another note. Using design patterns doesn't increase code maintenability per se . In fact, it can become an anti pattern. You can develop perfectly maintainable code without patterns because your code might not need patterns... Finally... there's something that I always like to say about managers. Of course, some of them might be Dilbert's, but don't underestimate your manager. More often than you think your manager have more information than you do, so if he says it has to be done in two days... maybe there's a good reason for it. It doesn't help having a perfect, clean, maintainable code of a product you haven't been able to sell in a bankrupted company.
