[site]: stackoverflow
[post_id]: 3993080
[parent_id]: 3993000
[tags]: 
What you want is the ABI, or Application Binary Interface for your platform. That will explain things like how to pass arguments to functions (registers, stack, a mix), which registers are caller saves and which are callee saves, special purposes for certain registers, and so on. By following a common ABI you are able to link libraries built by different compilers, mix high-level languages and so on. For "big" platforms it's usually easy to find a document specifying the ABI. For others you may have to rely on disassembling a C function and looking at what it does. Pay attention to which registers it saves in its prologue and which ones it might smash. Also note how the prologue saves the stack pointer (or frame pointer) on entry because you will have to mimic that if you want debuggers to work. It looks like the calling convention for HCS08 is documented by Freescale in an appnote .
