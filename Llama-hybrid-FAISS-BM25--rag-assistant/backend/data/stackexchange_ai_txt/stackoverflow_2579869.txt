[site]: stackoverflow
[post_id]: 2579869
[parent_id]: 2579666
[tags]: 
Update : I have outlined some basic performance tests for each of these 6 methods over 1000 runs. getElementsByTagName is the fastest but it does a half-assed job, as it does not select all elements, but only one particular type of tag ( i think p ) and blindly assumes that its firstChild is a text element. It might be little flawed but its there for demonstration purpose and comparing its performance to TreeWalker . Run the tests yourselves on jsfiddle to see the results. Using a TreeWalker Custom Iterative Traversal Custom Recursive Traversal Xpath query querySelectorAll getElementsByTagName Let's assume for a moment that there is a method that allows you to get all Text nodes natively. You would still have to traverse each resulting text node and call node.nodeValue to get the actual text as you would do with any DOM Node. So the issue of performance is not with iterating through text nodes, but iterating through all nodes that are not text and checking their type. I would argue (based on the results) that TreeWalker performs just as fast as getElementsByTagName , if not faster (even with getElementsByTagName playing handicapped). Ran each test 1000 times. Method Total ms Average ms -------------------------------------------------- document.TreeWalker 301 0.301 Iterative Traverser 769 0.769 Recursive Traverser 7352 7.352 XPath query 1849 1.849 querySelectorAll 1725 1.725 getElementsByTagName 212 0.212 Source for each method: TreeWalker function nativeTreeWalker() { var walker = document.createTreeWalker( document.body, NodeFilter.SHOW_TEXT, null, false ); var node; var textNodes = []; while(node = walker.nextNode()) { textNodes.push(node.nodeValue); } } Recursive Tree Traversal function customRecursiveTreeWalker() { var result = []; (function findTextNodes(current) { for(var i = 0; i Iterative Tree Traversal function customIterativeTreeWalker() { var result = []; var root = document.body; var node = root.childNodes[0]; while(node != null) { if(node.nodeType == 3) { /* Fixed a bug here. Thanks @theazureshadow */ result.push(node.nodeValue); } if(node.hasChildNodes()) { node = node.firstChild; } else { while(node.nextSibling == null && node != root) { node = node.parentNode; } node = node.nextSibling; } } } querySelectorAll function nativeSelector() { var elements = document.querySelectorAll("body, body *"); /* Fixed a bug here. Thanks @theazureshadow */ var results = []; var child; for(var i = 0; i getElementsByTagName (handicap) function getElementsByTagName() { var elements = document.getElementsByTagName("p"); var results = []; for(var i = 0; i XPath function xpathSelector() { var xpathResult = document.evaluate( "//*/text()", document, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null ); var results = [], res; while(res = xpathResult.iterateNext()) { results.push(res.nodeValue); /* Fixed a bug here. Thanks @theazureshadow */ } } Also, you might find this discussion helpful - http://bytes.com/topic/javascript/answers/153239-how-do-i-get-elements-text-node
