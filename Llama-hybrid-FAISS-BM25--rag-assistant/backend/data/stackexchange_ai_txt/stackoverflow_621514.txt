[site]: stackoverflow
[post_id]: 621514
[parent_id]: 
[tags]: 
Ad hoc data and repository pattern

What is the recommended way to return ad hoc (custom case by case) data from repository which don't fit any model entities or which extend some? The 101 example would be the ubiquitous hello word application: a blog system. Suppose you want to load a list of posts where post entry has some additional information which does not exists in the Post entity. Let’s say it is the number of comments and the date and time of the last comment. This would be highly trivial if one was using the plain old SQL and reading data directly from the database. How am I supposed to do it optimally using the repository pattern if I cannot afford loading the entire collections of Comments for each Post, and I want to do it in one database hit? Is there any commonly used pattern for this situation? Now imagine that you have moderately complex web application where each page needs a slightly different custom data, and loading full hierarchies is not possible (performance, memory requirements etc). Some random ideas: Add a list of properties to each model which could be populated by the custom data. Subclass model entities case by case, and create custom readers for each subclass. Use LINQ, compose ad hoc queries and read anonymous classes. Note: I’ve asked a similar question recently , but it seemed to be too general and did not attract much attention. Example: Based on suggestions in answers below, I am adding a more concrete example. Here is the situation I was trying to describe: IEnumarable posts = repository.GetPostsByPage(1); foreach (Post post in posts) { // snip: push post title, content, etc. to view // determine the post count and latest comment date int commentCount = post.Comments.Count(); DateTime newestCommentDate = post.Comments.Max(c => c.Date); // snip: push the count and date to view } If I don’t do anything extra and use an off the shelf ORM, this will result to n+1 queries or possibly one query loading all posts and comments. But optimally, I would like to be able to just execute one SQL which would return one row for each post including the post title, body etc. and the comment count and most recent comment date in the same. This is trivial in SQL. The problem is that my repository won’t be able to read and fit this type of data into the model. Where do the max dates and the counts go? I’m not asking how to do that. You can always do it somehow : add extra methods to the repository, add new classes, special entities, use LINQ etc., but I guess my question is the following. How come the repository pattern and the proper model driven development are so widely accepted, but yet they don’t seem to address this seemingly very common and basic case.
