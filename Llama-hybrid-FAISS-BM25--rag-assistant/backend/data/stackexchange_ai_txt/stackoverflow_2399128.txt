[site]: stackoverflow
[post_id]: 2399128
[parent_id]: 2398897
[tags]: 
You're probably over-thinking and over-formalizing it a bit. Here's how I look at it: Model: This is the actual thing that does real work. Controller: This is the thing that sends inputs into the model, so it will do work. View: This displays the results. That's it. The easiest analogy to use is a console application - the app is the model, STDIN is the controller, and STDOUT is the view. Extending that analogy, many GUI apps are built on top of command-line apps by attaching to STDIN/STDOUT. In that case, the things sending data to STDIN are the controller, the things taking data from STDOUT and putting on the window are the View, and the console app is still the model. It's CS 101 again - input, processing, output. It's only trickier for a GUI app because the input and output are typically on the same window. You (obviously) don't need to actually have a console app to do this - the separations can be done even in a single process. All the other weird wiring stuff that takes place is just whatever is needed to get this relationship between the parts to work. But the wiring isn't the important bit - the important bit is the separation of responsibilities and logical organization of the code. So, whether 1 view must map to 1 controller, or any other orthognality issues are secondary. In fact, you should probably just do whatever your problem domain requires, but I'd (as typical) argue against over-eager generalization of code - IOW, don't mush things together that aren't really the same.
