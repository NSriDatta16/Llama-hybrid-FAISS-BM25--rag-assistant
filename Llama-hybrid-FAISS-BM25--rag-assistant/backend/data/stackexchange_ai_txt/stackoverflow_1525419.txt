[site]: stackoverflow
[post_id]: 1525419
[parent_id]: 1525117
[tags]: 
Depending on a number of factors, it may actually be faster to copy the list to an array and then use a Quicksort . The reason this might be faster is that an array has much better cache performance than a linked list. If the nodes in the list are dispersed in memory, you may be generating cache misses all over the place. Then again, if the array is large you will get cache misses anyway. Mergesort parallelises better, so it may be a better choice if that is what you want. It is also much faster if you perform it directly on the linked list. Since both algorithms run in O(n * log n), making an informed decision would involve profiling them both on the machine you would like to run them on. Update I decided to test my hypothesis and wrote a C-program which measured the time (using clock() ) taken to sort a linked list of ints. I tried with a linked list where each node was allocated with malloc() and a linked list where the nodes were laid out linearly in an array, so the cache performance would be better. I compared these with the built-in qsort, which included copying everything from a fragmented list to an array and copying the result back again. Each algorithm was run on the same 10 data sets and the results were averaged. These are the results: N merge sort (fragmented) Array w/qsort merge sort (packed) 1,000 100,000 39 ms 25 ms 9 ms 1,000,000 1,162 ms 420 ms 112 ms 100,000,000 364,797 ms 61,166 ms 16,525 ms Conclusion At least on my machine, copying into an array is well worth it to improve the cache performance, since you rarely have a completely packed linked list in real life. It should be noted that my machine has a 2.8GHz Phenom II, but only 0.6GHz RAM, so the cache is very important.
