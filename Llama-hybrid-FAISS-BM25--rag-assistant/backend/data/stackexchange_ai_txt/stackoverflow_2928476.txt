[site]: stackoverflow
[post_id]: 2928476
[parent_id]: 2927642
[tags]: 
I am a haskell newbie. Here's my attempt, definitely inelegant but wanted to try a different approach data Stack a = Stk [a] deriving (Show) push :: a -> Stack a -> Stack a push x (Stk xs) = Stk (x:xs) pop :: Stack a -> (Maybe a, Stack a) pop (Stk []) = (Nothing, Stk []) pop (Stk (x:xs)) = (Just x, Stk xs) top :: Stack a -> Maybe a top (Stk (x:_)) = Just x top _ = Nothing empty :: Stack a empty = Stk [] isEmpty :: Stack a -> Bool isEmpty (Stk [])= True isEmpty (Stk _) = False par :: String -> Maybe (Stack Char) par = foldl check (Just (Stk [])) where check (Just stk) x | x == '(' = Just (push x stk) | x == ')' = case pop stk of (Just '(', newStk) -> Just newStk _ -> Nothing check Nothing x = Nothing parCheck :: String -> Bool parCheck xs = case par xs of Just stk -> isEmpty stk Nothing -> False
