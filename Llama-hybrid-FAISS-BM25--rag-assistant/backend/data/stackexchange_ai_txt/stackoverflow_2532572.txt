[site]: stackoverflow
[post_id]: 2532572
[parent_id]: 2532542
[tags]: 
using pull a symbol from its namespace into the current namespace. Assume the following code: namespace foo { // Assume you want to use std::string, you can either do std::string bar; // or using std::string; string bar; } As you can see, you can either qualify the symbol using its namespace (first line of code) or the second way. For symbols you use quite often, pulling them into the namespace tends to make the code a little more readable but if you have a conflict (say, foo contains a string class of its own which is bad practise but might happen), qualifying it with the appropriate namespace will allow you to resolve the conflict. The namespace :: is a special case as it refers to the global namespace; in this particular case, the functions you're referring to are C functions and C doesn't know about C++ namespaces, so they end up in the global namespace. Namespaces in C++ are a very powerful mechanism to avoid symbol naming clashes and I'd strongly encourage any C++ programmer to use them.
