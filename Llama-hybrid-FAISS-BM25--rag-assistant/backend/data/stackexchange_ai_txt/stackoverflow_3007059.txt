[site]: stackoverflow
[post_id]: 3007059
[parent_id]: 2909416
[tags]: 
You can write an add-in to do it. Here's the code to copy an existing build definition: static IBuildDefinition CloneBuildDefinition(IBuildDefinition buildDefinition) { var buildDefinitionClone = buildDefinition.BuildServer.CreateBuildDefinition( buildDefinition.TeamProject); buildDefinitionClone.BuildController = buildDefinition.BuildController; buildDefinitionClone.ContinuousIntegrationType = buildDefinition.ContinuousIntegrationType; buildDefinitionClone.ContinuousIntegrationQuietPeriod = buildDefinition.ContinuousIntegrationQuietPeriod; buildDefinitionClone.DefaultDropLocation = buildDefinition.DefaultDropLocation; buildDefinitionClone.Description = buildDefinition.Description; buildDefinitionClone.Enabled = buildDefinition.Enabled; buildDefinitionClone.Name = String.Format("Copy of {0}", buildDefinition.Name); buildDefinitionClone.Process = buildDefinition.Process; buildDefinitionClone.ProcessParameters = buildDefinition.ProcessParameters; foreach (var schedule in buildDefinition.Schedules) { var newSchedule = buildDefinitionClone.AddSchedule(); newSchedule.DaysToBuild = schedule.DaysToBuild; newSchedule.StartTime = schedule.StartTime; newSchedule.TimeZone = schedule.TimeZone; } foreach (var mapping in buildDefinition.Workspace.Mappings) { buildDefinitionClone.Workspace.AddMapping( mapping.ServerItem, mapping.LocalItem, mapping.MappingType, mapping.Depth); } buildDefinitionClone.RetentionPolicyList.Clear(); foreach (var policy in buildDefinition.RetentionPolicyList) { buildDefinitionClone.AddRetentionPolicy( policy.BuildReason, policy.BuildStatus, policy.NumberToKeep, policy.DeleteOptions); } return buildDefinitionClone; }
