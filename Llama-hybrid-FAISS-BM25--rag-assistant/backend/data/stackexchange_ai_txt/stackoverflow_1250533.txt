[site]: stackoverflow
[post_id]: 1250533
[parent_id]: 1250452
[tags]: 
Ok, I feel like I need to jump in to comment about How do you concat multiple rows into one column in SQL Server? and provide a more preferred answer. I'm really sorry, but using scalar-valued functions like this will kill performance. Just open SQL Profiler and have a look at what's going on when you use a scalar-function that calls a table. Also, the "update a variable" technique for concatenation is not encouraged, as that functionality might not continue in future versions. The preferred way of doing string concatenation to use FOR XML PATH instead. select stuff((select ', ' + t.tag from tags t where t.photoid = p.photoid order by tag for xml path('')),1,2,'') as taglist ,* from photos order by photoid; For examples of how FOR XML PATH works, consider the following, imagining that you have a table with two fields called 'id' and 'name' SELECT id, name FROM table order by name FOR XML PATH('item'),root('itemlist') ; Gives: 2 Aardvark 1 Zebra But if you leave out the ROOT, you get something slightly different: SELECT id, name FROM table order by name FOR XML PATH('item') ; 2 Aardvark 1 Zebra And if you put an empty PATH string, you get even closer to ordinary string concatenation: SELECT id, name FROM table order by name FOR XML PATH('') ; 2 Aardvark 1 Zebra Now comes the really tricky bit... If you name a column starting with an @ sign, it becomes an attribute, and if a column doesn't have a name (or you call it [*]), then it leaves out that tag too: SELECT ',' + name FROM table order by name FOR XML PATH('') ; ,Aardvark,Zebra Now finally, to strip the leading comma, the STUFF command comes in. STUFF(s,x,n,s2) pulls out n characters of s, starting at position x. In their place, it puts s2. So: SELECT STUFF('abcde',2,3,'123456'); gives: a123456e So now have a look at my query above for your taglist. select stuff((select ', ' + t.tag from tags t where t.photoid = p.photoid order by tag for xml path('')),1,2,'') as taglist ,* from photos order by photoid; For each photo, I have a subquery which grabs the tags and concatenates them (in order) with a commma and a space. Then I surround that subquery in a stuff command to strip the leading comma and space. I apologise for any typos - I haven't actually created the tables on my own machine to test this. Rob
