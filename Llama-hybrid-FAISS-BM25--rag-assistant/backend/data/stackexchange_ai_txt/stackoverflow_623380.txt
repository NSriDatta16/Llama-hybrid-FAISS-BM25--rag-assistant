[site]: stackoverflow
[post_id]: 623380
[parent_id]: 601438
[tags]: 
Just to clarify something many people seem to miss: TDD, in the sense of "write failing test, write code to make test pass, refactor, repeat" Is usually most efficient and useful when you write unit tests. You write a unit test around just the class/function/unit of code you are working on, using mocks or stubs to abstract out the rest of the system. "Automated" testing usually refers to higher level integration/acceptance/functional tests - you can do TDD around this level of testing, and it's often the only option for heavily ui-driven code, but you should be aware that this sort of testing is more fragile, harder to write test-first, and no substitute for unit testing.
