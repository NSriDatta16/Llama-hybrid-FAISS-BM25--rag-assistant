[site]: stackoverflow
[post_id]: 2308365
[parent_id]: 2308310
[tags]: 
Big O notation only tells you how your code scales, not how fast it will be for finite N. The difference between amortized and non-amortized is important if you care about worst-case performance or latency (such as real-time or interactive systems). If you only care about average throughput, though, they're for all practical purposes the same. Amortized analysis is good enough even in some very performance-critical situations like scientific computing and large-scale data mining.
