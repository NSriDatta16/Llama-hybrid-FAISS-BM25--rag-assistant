[site]: stackoverflow
[post_id]: 5281139
[parent_id]: 5274927
[tags]: 
As CRD has already done a good job of showing you a correct solution, I'll use my answer to explain why your solutions didn't work. unsigned char key[16]; memset(key, 0, sizeof(key)); sscanf(deskey, "%o %o %o %o %o %o %o %o", (int*)&key[0], (int*)&key[1], (int*)&key[2], (int*)&key[3], (int*)&key[4], (int*)&key[5], (int*)&key[6], (int*)&key[7]); Lying to the compiler never solves problems. key is an array of unsigned char s. Telling the compiler, in your function call to sscanf , that your pointers into the array are pointers to int s does not make them so; the storage each one points to is still storage for an unsigned char , and no more. The result of this is that each attempt to store one int at an address you provided overwrites three-quarters of the previous int . The result of that is that the sscanf amounts to little more than a harder way of doing the same thing as the memset . I say “little more” and not “no more” for a reason: The sscanf call also writes sizeof(int) - sizeof(unsigned char) bytes beyond the end of the array, so you are also smashing the stack and setting up for a potential crash. if ([scanner scanInt:&pos]) { [enckey addObject:[NSString stringWithFormat:@"%o", pos]]; scanInt: parses the number from the string in decimal. stringWithFormat: likewise does what its name says: It creates a string. With the format you gave it, it converts a number to a string, not the other way around. Thus, you use scanInt: to parse the number in decimal, and stringWithFormat: to convert it to octal (and encode it back into a string). Assuming, from the sscanf -based code, that the input was in octal, this is the opposite of what you want. This code will certainly give you numbers, but it will give you wrong numbers, which is almost as bad as the sscanf code that gave you all zeroes plus a crash. You cannot use NSScanner to scan octal numbers. I'm also not sure why you called this variable pos , as it does not appear to be a position. Certainly that's not what scanInt: gives you. I was able to scan the string and pull out the numbers, but I'm not sure how to store into NSData after that. See the NSData documentation . I've tried using NSMutableArray and NSData but having no luck. That has nothing to do with the problem, which is parsing the input data. I'm not sure whether an NSArray or a C array (the latter optionally wrapped in an NSData) would be the correct place to put the result. It depends on where you want to pass the numbers once you have them parsed.
