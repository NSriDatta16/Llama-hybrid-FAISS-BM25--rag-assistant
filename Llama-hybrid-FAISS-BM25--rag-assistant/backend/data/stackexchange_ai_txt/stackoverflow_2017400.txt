[site]: stackoverflow
[post_id]: 2017400
[parent_id]: 2009584
[tags]: 
gj already proposed this solution but I thought I'd paste my implementation just for reference: Implement a filter class that will absorb user input actions. class BusyAppFilter : public QObject { protected: bool eventFilter( QObject *obj, QEvent *event ); }; bool BusyAppFilter::eventFilter(QObject *obj, QEvent *event) { switch ( event->type() ) { case QEvent::KeyPress: case QEvent::KeyRelease: case QEvent::MouseButtonPress: case QEvent::MouseButtonDblClick: case QEvent::MouseMove: case QEvent::HoverEnter: case QEvent::HoverLeave: case QEvent::HoverMove: case QEvent::DragEnter: case QEvent::DragLeave: case QEvent::DragMove: case QEvent::Drop: return true; default: return QObject::eventFilter( obj, event ); } } Then place this code your QApplication class: QCursor busyCursor( Qt::WaitCursor ); setOverrideCursor( busyCursor ); BusyAppFilter filter; installEventFilter( &filter ) ; //... do the process stuff ... removeEventFilter( &filter ); restoreOverrideCursor();
