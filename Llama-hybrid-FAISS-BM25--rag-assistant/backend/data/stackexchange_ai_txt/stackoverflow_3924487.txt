[site]: stackoverflow
[post_id]: 3924487
[parent_id]: 3924135
[tags]: 
const int arraySize = 5; // does an arraySize have to be const always? is it so it doesnt channge after the array has been created? C++ basically supports two kinds of arrays: fixed-size arrays, that are declared as type name[size] , and dynamic arrays that are allocated with new[] . For fixed-size array you must provide their size to the compiler so that it can set aside enough memory for the array. As the size must be known to the compiler, you can only specify it with a const variable or a literal. Although it is possible to create dynamically allocated arrays yourself, by invoking new[] , this will give you some headaches getting the memory management right. It is better to use existing classes that do this for you, like std::vector . //double decimals[arraySize]; /* this array is being created in the function averageN() but why? cant i just create it up top and reference it in? */ You can create it up here, but that would give anybody access to the array. For a small program like this that is not a big problem, but consider that there are a dozen other files that can also access the array and change it at unexpected moments. It is basically the same question as to why you don't make all classes and members public in Java: to limit who has access. // why do you have to write the name of the function up here before you even create it? double averageN(); You have to declare the function before you can use it. C++ has the requirement that all names you use must have been declared to the compiler before their first use, and the compiler will read a file in sequential order from the top to the bottom. Note that this declaration does not match the function definition you give below. As C++ supports function overloading, the two are considered different functions, because they accept different parameters (none versus a pointer) int main() { averageN(); return 0; } // why does the array have to be created here? double averageN(double decimals[arraySize]) { This does not create an array. Instead it specifies that the function expects to be called with a pointer argument (the arraySize is completely ignored and you can't pass an array to a function in C++, so the parameter is adjusted to read double *decimals ). To get a working program, you need to change the two lines above to double averageN() { double decimals[arraySize]; double average; double arrayTotal; Both average and arrayTotal are not initialised. That means they will start with some unknown value. For average , thatis not a problem, because the first thing you do with it is assign a new value. But for arrayTotal , you are adding values to it, so you must let it start with a known value. for (int i = 0; i
