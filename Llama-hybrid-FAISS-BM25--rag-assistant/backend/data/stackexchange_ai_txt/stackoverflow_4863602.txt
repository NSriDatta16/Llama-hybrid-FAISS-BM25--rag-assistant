[site]: stackoverflow
[post_id]: 4863602
[parent_id]: 
[tags]: 
How to serialize a [required] attribute with a custom init_arg using MooseX::Storage?

I'm trying to add serialization to a Moose class that has required attributes using custom init_arg's (to prefix the attribute name with a dash for API consistency) and it seems that this causes unpacking to fail. I've setup a test case below to illustrate my point. use strict; use warnings; package MyClass1; use Moose; use MooseX::Storage; use namespace::autoclean; with Storage; has 'my_attr' => ( is => 'ro', isa => 'Str', required => 1, ); __PACKAGE__->meta->make_immutable; package MyClass2; use Moose; use MooseX::Storage; use namespace::autoclean; with Storage; has 'my_attr' => ( is => 'ro', isa => 'Str', required => 1, init_arg => '-my_attr', ); __PACKAGE__->meta->make_immutable; package main; my $inst1 = MyClass1->new(my_attr => 'The String'); my $packed1 = $inst1->pack; my $unpacked1 = MyClass1->unpack($packed1); # this works my $inst2 = MyClass2->new(-my_attr => 'The String'); my $packed2 = $inst2->pack; my $unpacked2 = MyClass2->unpack($packed2); # this fails with a ... # ... Attribute (my_attr) is required at ... Update: further investigation indicates that the issue is that init_arg is not taken into account when packing. Hence, even a non-required attribute using a custom init_arg is not correctly restored after unpacking. See this additional test case: package MyClass3; with Storage; has 'my_attr' => ( is => 'ro', isa => 'Str', init_arg => '-my_attr', ); # in main... my $inst3 = MyClass3->new(-my_attr => 'The String'); my $packed3 = $inst3->pack; my $unpacked3 = MyClass3->unpack($packed3); # this seems to work ... say $unpacked3->my_attr; # ... but my_attr stays undef Thanks a lot for your help, Denis
