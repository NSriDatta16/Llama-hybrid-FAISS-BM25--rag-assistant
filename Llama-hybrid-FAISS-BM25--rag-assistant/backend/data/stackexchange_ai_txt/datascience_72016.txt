[site]: datascience
[post_id]: 72016
[parent_id]: 72003
[tags]: 
Here's what you could try. Find a pre-trained network which is capable of detecting ships (An example could be a network trained on ImageNet). You will only need the layers before the Softmax() layer or after the Flatten() layer If there are multiple types of ships you want to detect, I would pass multiple images of ships and non-ships into the network. For each ship/non-ship image, you will obtain a 1-D feature embedding. You could then average out the embeddings of all the ship & non-ship images you choose. What this tells you is that pictures with/without ships should have an embedding that looks like this. Lastly, pass each image in your unlabelled dataset through the network and use a distance metric to see whether it is closer to the embedding that represents ships or the one that represents non-ships. You could use different metrics as shown here: https://dataaspirant.com/2015/04/11/five-most-popular-similarity-measures-implementation-in-python/
