[site]: stackoverflow
[post_id]: 4335075
[parent_id]: 4334954
[tags]: 
While the idea of 'one language to rule them all' is an interesting theoretical idea, any language that tries to be all things to all situations is going to eventually topple over under it's own weight. For example, while we are seeing interesting changes in C# to make it more functional or more dynamic, a language that tries to be all things and to put just too much into it's core syntax will eventually have issues where very subtle differences in syntax can have some unexpected behaviors. A language should help the user express intent vs. force them to fight the compiler, etc. to achieve that intent. For example, immuteability is harder to do in C# than in F#. Some things are easier and more expressive to do in Ruby vs. a language with static types, etc. - This can even go to the extreme of cases where we build our own languages (DSLs) to better help us express intent. In my career, I've coded in Cobol, Fortran, C, Pascal, VB, C#, VB.Net, Javascript, and Ruby (not to mention things like XAML, SQL, HTML, CSS, etc.) Language is not just about syntax - that's the easy part. Rather, it's abut learning the specific idioms of that language, and leveraging it's unique strengths to solve your problem. And by knowing a variety of languages, you can better determine which language offers the right features to best solve the issue at hand in a way that is expressive, maintainable, and elegant.
