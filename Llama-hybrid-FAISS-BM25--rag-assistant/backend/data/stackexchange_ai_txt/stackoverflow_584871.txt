[site]: stackoverflow
[post_id]: 584871
[parent_id]: 
[tags]: 
Creating and initialising different sub-types without lots of casting

I am sure am messing around with a lot of casting and such in this code below. It seems like there should be a smoother way. I'm basically trying to use a builder method (CreateNewPattern) to handle creating new objects of the passed sub-class type (by the CreateNewCircularPattern and CreateNewLinePattern methods). I presently only have two sub-classed types CircularHolePattern and SingleLineHolePattern that inherit from HolePattern, but I expect to have more as my app grows. Is this a place for using a delegate or a lambda? It know nothing about them, so please be as specific as possible with and code suggestions. private CircularHolePattern CreateNewCircularPattern() { var CreatedPattern = CreateNewPattern(typeof(CircularHolePattern)); return (CircularHolePattern)CreatedPattern; } private SingleLineHolePattern CreateNewLinePattern() { var CreatedPattern=CreateNewPattern(typeof(SingleLineHolePattern)); return (SingleLineHolePattern)CreatedPattern; } private HolePattern CreateNewPattern(Type PatternTypeToCreate) { var NewHolePattern = (HolePattern)Activator.CreateInstance(PatternTypeToCreate); NewHolePattern.PatternName = "Pattern #" + (HolePatterns.Count + 1).ToString(); this.AddPattern(NewHolePattern); this.SetActivePattern(NewHolePattern); return NewHolePattern; }
