[site]: crossvalidated
[post_id]: 573560
[parent_id]: 573507
[tags]: 
It's not straightforward to estimate effects by hand. The math works out nicely only in "simple" cases. One simple case is a saturated model. A saturated model includes all main effects and possible interactions, so it has a parameter for each unique combination of the predictors. Your model is not saturated; it's missing a three-way interaction T * X1 * X2 as well as a two-way interaction between the covariates X1 * X2. By omitting interactions you impose (implicit) constraints on the remaining parameters, so the estimate of $\beta_1$ is a function of not only the sample means for groups {T=1, X1=0, X2=0} and {T=0, X1=0, X2=0} but all group means. This is easier to understand in a model with one covariate in addition to the treatment: $$ Y = \beta_0 + \beta_1 T + \beta_2 X $$ In this model $\beta_1$ is the treatment effect for both group X = 0 and group X = 1 as omitting the T * X interaction imposes the constraint that the two groups have the same treatment effect. To estimate $\beta_1$ the regression takes into account all observations, not only those with X = 0 . Your model is more complex, so the implicit constraints are harder to conceptualize. (For example, combine cases 1&4 and cases 2&3 to show that the average treatment effect is the same when X1 = X2 and when X1 â‰  X2.) My original answer considered a different special case altogether. I include it for completeness. The sample means for the treatment and control groups (t = 1 and t = 0, respectively) are the same as the marginal means (the population means ) from a linear regression adjusted for covariates only if the data is balanced. A balanced dataset has the same number of observations for each unique combination of the predictors. set.seed(1234) n x #> t 0 1 #> 0 25 25 #> 1 25 25 coef(lm(y ~ t + x))["t"] #> t #> 0.5925825 mean(y[t == 1]) - mean(y[t == 0]) #> [1] 0.5925825 # imbalanced data t x #> t 0 1 #> 0 22 33 #> 1 26 19 coef(lm(y ~ t + x))["t"] #> t #> 0.1194514 mean(y[t == 1]) - mean(y[t == 0]) #> [1] 0.1402377
