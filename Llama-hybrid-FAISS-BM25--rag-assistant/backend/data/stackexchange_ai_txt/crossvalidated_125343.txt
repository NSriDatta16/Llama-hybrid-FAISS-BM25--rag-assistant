[site]: crossvalidated
[post_id]: 125343
[parent_id]: 125307
[tags]: 
Background The referenced paper is about evaluating the strength of chess players. The data consist of computer evaluations of the strengths of individual moves (for one game in this example but, in practice, over multiple games), with $x_1, \ldots, x_n$ the values of the moves by the first player and $y_1, \ldots, y_m$ the values of the moves by the second player. These are being considered as if they were each random samples of move-strength distributions $X$ and $Y$ associated with the players. (This assumption is debatable but won't be questioned in the following analysis.) It is argued that the expected outcome of a game between those two players (which is one point for a win by $X$, half a point for a draw, and no points for a loss by $X$) is the expectation of $g(X,Y)$ where $$g(X,Y)=1\, (X\gt Y);\quad g(X,Y)=1/2\, (X=Y);\quad g(X,Y)=0\, (X\lt Y).$$ Although this is not the expected outcome --the outcome is determined by the sums of the move values, which have a different distribution than the move values themselves--it may be a decent approximation to the expected outcome. The question concerns how to estimate $\mathbb{E}(g(X,Y))$ from the data. Solution To make this estimate, use the empirical distribution functions of $X$ and $Y$, assuming $X$ and $Y$ are independent. This means the estimate is $$\frac{1}{nm} \sum_{i=1}^n\sum_{j=1}^m g(x_i,y_i).$$ This can be computed exactly as written (as a double loop) or as an outer product. The latter in pseudocode (which will actually execute in R , for instance) could be written z 0) + sum(z==0)/2)/length(z) Its value for the sample data is $0.3450327$. It agrees with the number $0.345$ given in the paper to its full precision, suggesting this calculation correctly reflects the one intended in the paper. For rapid calculation the expectation can be expressed in terms of the ranks of the combined data, thereby requiring $O((n+m)\log(n+m))$ effort instead of the $O(nm)$ effort implied by the outer product calculation. For instance, when there are no ties between any of the $x_i$ and $y_j$, let $r(i)$ be the rank of $x_i$ when the combined dataset is sorted in increasing order. Then the number of the $y_j$ less than $x_i$ is the number of combined data less than $x_i$ (equal to $r(i)-1$), minus the number of $x_{i^\prime}$ less than $x_i$ (equal to $i-1$), which is just $r(i)-i$, whence $$\eqalign{ \sum_{i=1}^n\sum_{j=1}^m g(x_i,y_i) &= \sum_{x_i \gt y_j}1 \\ &= \sum_{i=1}^{n} \left(r(x_i) - i\right) \\ &= \sum_{i=1}^n r(x_i) - \frac{1}{2}n(n+1). }$$ When there are ties, a more complicated version of this formula will adjust for them. It would be equivalent to assigning the midrank to all groups of ties, as with this R code, whose value is the same as before: (sum(rank(c(x,y), ties.method="average")[1:n]) - n*(n+1)/2) / (m*n)
