[site]: stackoverflow
[post_id]: 2917536
[parent_id]: 2878488
[tags]: 
OK. As evidenced by the deafening silence which met this question, the problem turns out to be a bit obscure. But the workaround is nice and simple, so I'm describing it here just in case anyone ever wants to know. Summary: some file export formats do not cope well with translucency in the rendered pixels. I don't understand the exact reasons for this, although it might possibly have something to do with the presence or absence of alpha pre-multiplication. All the formats seem to be fine with completely transparent pixels, rendering them either transparent or as white if the format doesn't support transparency. But pixels that have a partial alpha, plus something in the colour channels, may get mangled. As it happens, I did not even want any parts of the image to be translucent, and indeed set glDisable(GL_BLEND) before the relevant rendering code. However, objects were rendered with the materials from this seemingly-canonical collection at the OpenGL home site , some of which include alpha values other than 1.0 in their specular, diffuse and ambient colours. I had slavishly copied this without paying attention to that fact that it might lead to some unwanted translucency. For my purposes, then, the solution is straightforward: change the material definitions so that the alpha component is always 1.0 . Note that some image formats, such as PNG and TIFF, do fully support the translucency, so if you need that then those are the ones to go for. This was, in fact what tipped me off to the answer. However it was not obvious at first because I was using OS X Preview to view the files, and the translucency is not obvious with the default view settings: (source: walkytalky.net ) (source: walkytalky.net ) (source: walkytalky.net ) (source: walkytalky.net ) So, a second lesson from this whole episode is: enable View | Show Image Background in Preview to get the checkerboard and show up any stray transparency.
