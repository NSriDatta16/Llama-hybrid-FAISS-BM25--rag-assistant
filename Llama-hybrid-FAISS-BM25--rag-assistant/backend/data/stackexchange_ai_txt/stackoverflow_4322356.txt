[site]: stackoverflow
[post_id]: 4322356
[parent_id]: 
[tags]: 
C# TPL Multiple List Enumerators One Modifier Without Starvation

I have several threads created through the TPL (probably not relevant). Some threads interact with a particular object by simply enumerating over a contained List without ever modifying anything. Other threads add or remove items from the List. Currently, I have lock statement around all code segments that enumerate the List and lock statements around all code segments that modify the List. I'm not experiencing any performance problems so that's that. However, I do realize that the more-efficient solution would be to allow many concurrent enumerators and only lock out everything else when modifying the List. Currently, only one thread may be enumerating the List at any given time. For future reference, what is the pattern that allows this? Important . There are many solutions that work fine in a lot of cases but most likely won't work for mine. In my application, there is a good chance that the barrage of readers will never stop -- thus starving all the modifiers. I'm looking for: Enumerate 1 Enumerate 2 Concurrent with 1 Modify 1 Request is Queued Enumerate 3 Request is Queued because of Modify Request Enumerate 4 Request is Queued Modify 2 Request is Queued Enumerate 2 Finishes Enumerate 1 Finishes Modify 1 Starts because all in-progress at time of request Enumerators Finished Modify 1 Finishes Enumerate 3 Starts because Queued Modify 1 Finished Enumerate 4 Starts Enumerate 3 Finishes Enumerate 4 Finishes Modify 2 Starts ...
