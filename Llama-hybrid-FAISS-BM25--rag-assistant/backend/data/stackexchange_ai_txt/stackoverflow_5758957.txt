[site]: stackoverflow
[post_id]: 5758957
[parent_id]: 
[tags]: 
How can I present a global enum as a subclass of multiple classes?

I have a library of static final Java classes which describes a body of standards. One of these classes (simplified) night look like: public static final class ResponseControl { public static enum EventStatus { EVENT_RECEIVED, EVENT_STARTED, EVENT_COMPLETED; } } It's convenient to include the enum EventStatusOption as a subclass of the class ResponseControl, because that's where it's defined in the standards document, and that's where people will be looking for it. It allows them to say things like: if (respCtl.status == ResponseControl.EventStatus.EVENT_STARTED) { ... } But I have literally hundreds of these classes, and in some cases the same enum is used in multiple classes. It would be nice to be able to define the enum somewhere else, and then do something like this: public static enum GlobalEventStatus { EVENT_RECEIVED, EVENT_STARTED, EVENT_COMPLETED; } public static final class ResponseControl { public static enum EventStatus extends GlobalEventStatus {} public final EventStatus status; } if (respCtl.status == ResponseControl.EventStatus.EVENT_STARTED) { ... } I can't do this, however, because it isn't legal to extend enums, even (as in my case) where I don't really want to extend them at all, I just want to make the global type available in the local class. Does anyone know of a way to accomplish this? The second paragraph of ColinD's answer below is actually the answer I needed. By saying: public interface GlobalEvent { public static enum Status { EVENT_RECEIVED, EVENT_STARTED, EVENT_COMPLETED; } } public static final class ResponseControl { public static enum Event implements GlobalEvent public final Event.Status status; } I can allow my users to say: if (respCtl.status == ResponseControl.Event.Status.EVENT_STARTED) { ... } ...all while still maintaining the actual definitions in a single place. Thanks.
