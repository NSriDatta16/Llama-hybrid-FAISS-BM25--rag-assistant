[site]: stackoverflow
[post_id]: 1663480
[parent_id]: 571407
[tags]: 
I went through a similar issue when working on an app with listboxes of nested user controls. I handled all of this in the PreviewMouseButtonDown event on a per control level. I check the coordinates of the point that was clicked. If it came from anywhere in the parent ListBoxItem that was not in the ListBox , I process the the DragDrop.DoDragDrop() there. If it came from inside the ListBoxItem , I let it bubble down to the child ListBox's PreviewMouseButtonDown event . I check to see where the location is in the child ListBox to see which item was clicked on so I can grab it and do the DragDrop on this level instead. The pseudo-code is as follow: Parent ListBox -- PListBoxItem1 -- PListBoxItem2 -- PListBoxItem3 ---- Child ListBox ------ Child ListBoxItem1 ------ Child ListBoxItem2 -Click drag started here ------ Child ListBoxItem3 Code: Parent_List_Box_PreviewMouseButtonDown If mouse position is not inside the Child ListBox Then DoDragDrop() on the Parent level with this ListBoxItem End If Child_ListBox_PreviewMouseButtonDown Determine which item the mouse was clicked on relative to the Child ListBox DoDragDrop() on the Child level with this ListBoxItem So since the click was inside a Child's ListBox , the event bubbles down to the lowest handler that passes the criteria for the DragEvent . Hope this helps!
