[site]: crossvalidated
[post_id]: 312731
[parent_id]: 312605
[tags]: 
Maybe someone else can explain the math behind it, but consider this quick demonstration: I generate five vectors, each 100 numbers long. Each of these vectors is on a different scale, so I standardize them (i.e., create z-scored variables). That is, the mean is zero and the standard deviation is 1 for each of these five latent construct variables: set.seed(1839) ## create five different z-score variables that represent latent constructs data Let's check to make sure they are actually z-scores: > sapply(data, mean) latent_construct_1 latent_construct_2 latent_construct_3 latent_construct_4 latent_construct_5 -2.203951e-16 1.634435e-17 1.400464e-17 -1.449145e-17 7.852226e-17 > > sapply(data, sd) latent_construct_1 latent_construct_2 latent_construct_3 latent_construct_4 latent_construct_5 1 1 1 1 1 So, now let's say we average all five of these together: ## make a mean of all of these latent constructs data$mean_latent_construct Is this new variable a z-score? We can check to see if the mean is zero and standard deviation is one: > ## is the mean zero? > mean(data$mean_latent_construct) [1] -2.436148e-17 > > ## is the standard deviation one? > sd(data$mean_latent_construct) [1] 0.4599126 The variable is not a z-score, because the standard deviation is not one. However, we could now z-score this mean variable. Let's do that and compare the distributions: ## z-score the mean latent construct data$mean_latent_construct_z % select(mean_latent_construct, mean_latent_construct_z) %>% gather(variable, value) ggplot(data, aes(x = value, fill = variable)) + geom_density(alpha = .7) + theme_light() The z-scored aggregate variable of z-scores looks a lot different from the aggregate variable of z-scores. In short: No, a mean of z-scored variables is not a z-score itself.
