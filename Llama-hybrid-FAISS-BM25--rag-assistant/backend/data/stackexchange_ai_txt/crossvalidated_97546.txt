[site]: crossvalidated
[post_id]: 97546
[parent_id]: 97358
[tags]: 
This does seem like a good model, implemented correctly in PyMC. There are two Bayesian stats facts that we can use to confirm your answer with another method: $\textrm{Beta}(1,1)$ is equivalent to the uniform distribution on the interval $[0,1]$; The beta and binomial distributions are conjugate. This means that the posterior distribution of $p$ is also a beta distribution, and (if I have got the parameterization correct) $p_{\text{posterior}} \sim \textrm{Beta}(1,1001)$. You can compare the percentiles from this analytically derived distribution with the percentiles that you have found via MCMC thusly: > p_posterior = np.random.beta(a=1, b=1001, size=1000000) > print np.percentile(p_posterior, [2.5, 97.5]) [2.5350975458273468e-05, 0.003681783314872197] Here is a notebook that collects this all up . By the way, I'm not sure if card-carrying statisticians would call this a confidence interval. There is a lot of subtlety to this issue, but the major practical objection is that you didn't specify how the 1000 devices were selected. For example, if you are a very important purchaser, and you are testing these thousand before ordering a million units, the manufacturer could go to great lengths to ensure you get a good thousand in this batch!
