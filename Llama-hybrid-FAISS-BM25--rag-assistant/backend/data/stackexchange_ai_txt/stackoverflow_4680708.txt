[site]: stackoverflow
[post_id]: 4680708
[parent_id]: 4678591
[tags]: 
My initial thoughts are to move any repeating logic from your controller to a service object that you can call from many places. Bringing that along: you could break up the form into sub-forms - each represented by a 'sub-form' object. Each of these objects should be able to deal with information related to it's part of the form, and it should know what to save to the database. You could compose these form objects into a service object that you call from your controller. One other thing I noticed is the way you actually pass your entire FORM scope into some functions. I tend to avoid this as you really are not describing what the function needs to do the job, and of course this scope can change when you don't expect it. I would suggest you specify the arguments required by each sub-form object and pass them to the service. Example psuedocode: // Controller code travelSubFrm = new TravelForm(name, dob, address ...); // etc workSubFrm = new WorkForm(position, dept ...); // etc // Create service and save details - the service knows the logic contactFormService.setTravelSubFrm(travelSubFrm); contactFormService.setWorkSubFrm(workSubFrm); contactFormService.process(); Just some quick thoughts. Hope that helps! EDIT : If you want to start looking into how to architect object-orientated code then I suggest you check out Head First Design Patterns . It's a great introduction to the topic and will help you organise code problem like the one you posted.
