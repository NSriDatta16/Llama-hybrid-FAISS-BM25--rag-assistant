[site]: stackoverflow
[post_id]: 561860
[parent_id]: 561791
[tags]: 
Python has two basic ways of importing content. Modules and Packages. A module is simply a python file on the include path: order.py If order.py defines a class named foo , then access to that class could be had by: import order o = order.foo() In order to use the syntax from the orignial question, you would need to ensure that your model.py file has the following attributes: [client, staff, order] However, that typically means placing them in a single file. Which is what you are trying to avoid. A package is a directory with an __init__.py inside of it. The init .py initializes the package (ie. it is run on first import), and you can have either modules or sub-packages within that directory. model __init__.py client.py staff.py order.py That way, to access any of the sub modules, you would simply say: import model.client However, that is simply importing the module. It is not importing any of the attributes of the module. So in order to access a class inside the module, you would need to specify it: import model.client o = model.client.clientclass() This is a bit tedious, but very well organized. Best of both (where performance isn't a big deal): If you type the following code in __init__.py : from .client import clientclass as client from .staff import staffclass as staff from .order import orderclass as order Then you have auto-loaded all of your classes, and they can be accessed as: import model c = model.client() s = model.staff() o = model.order() In the end, it may be more simple to stick with the non-magical way to do it: import model.client o = model.client.clientclass() --Gahooa
