[site]: stackoverflow
[post_id]: 4152628
[parent_id]: 4152599
[tags]: 
That's just what the memory manager decided to do. If you think about it, it makes a lot of sense: You just freed an int, then you ask for an int again... why shouldn't the memory manager give you back the int you just freed? More technically, what is probably happening when you delete is that the memory manager is appending the memory block you freed to the beginning of the free list. Then when you call new , the memory manager goes scanning through its free list and finds a suitably sized block at the very first entry. For more information about dynamic memory allocation, see "Inside storage allocation" .
