[site]: stackoverflow
[post_id]: 4796909
[parent_id]: 4796722
[tags]: 
It really depends: Volume, size, complexity of data/data model, frequency, urgency of updates, available connectivity (online 24/7 vs. occasionaly connected vs. nightly sync session) and bandwidth, existing mechanisms for data storage, amount of software you may/can/want to deploy on the clients, available budget, acceptable dev time resources and organization available to operate the system lifecycle plan (expected lifetime) of the system, mission significance (mission-critical system that can kill lifes, vs. "just" a manager info system) are all factors that you should mention, or at least evaluate. Depending on these aspects, the solution can vary from a "cheap" webservice and flat files sync'd by trivial java code to a full-flat distributed database. Years ago, I have found Sybase's SQL Anywhere to be a good solution for small-to-medium requirements and budgets if a "real" SQL DBMS is required, or already present on the server backend side. It offers a powerful, yet transparent (if used wisely) publish-and-subscribe methodology at the SQL level which works well if you cannot be sure all clients are online 24/7. For online (or almost-online) full-fledged solutions, Oracle has online database replication options that are quite expensive, though. For small solutions, custom Java code accessing remote database links (Oracle feature) usually works, but locating performance bottlenecks can be a nightmare. (And you require a stable network links, and a "real" Oracle database on all nodes.)
