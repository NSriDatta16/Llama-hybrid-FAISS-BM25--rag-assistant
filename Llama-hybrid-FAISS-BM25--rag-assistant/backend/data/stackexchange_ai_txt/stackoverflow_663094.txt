[site]: stackoverflow
[post_id]: 663094
[parent_id]: 
[tags]: 
How do I optimize a Linq to Xml query againist attributes?

Given the following Xml fragment: Which can be created with the following code: XElement testElement = new XElement("root", new XElement("sheetData", new XElement("row", new XAttribute("r", 1)), new XElement("row", new XAttribute("r", 2)), new XElement("row", new XAttribute("r", 3)), new XElement("row", new XAttribute("r", 4)), new XElement("row", new XAttribute("r", 5)), new XElement("row", new XAttribute("r", 6)), new XElement("row", new XAttribute("r", 7)))); Is this the best way to find the row where the r attribute is 2? This works, but I am repeating the Where clause in the select statement, and I am wondering if there is a better way and more efficent method. int rowNumber = 2; XElement rowElement = testElement .Descendants("sheetData") .Where (item => item.Descendants("row") .Where (i => i.Attribute("r").Value == rowNumber.ToString()) .FirstOrDefault () != null) .Select (item => item.Descendants("row") .Where (i => i.Attribute("r").Value == rowNumber.ToString()) .FirstOrDefault ()) .FirstOrDefault (); In general what is the best way to determine if Linq to Xml query optimized?
