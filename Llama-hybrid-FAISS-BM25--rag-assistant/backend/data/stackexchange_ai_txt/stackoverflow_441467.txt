[site]: stackoverflow
[post_id]: 441467
[parent_id]: 441441
[tags]: 
From CouchDB documentation ( https://web.archive.org/web/20090122111651/http://couchdb.apache.org/docs/overview.html ): "A document database server, accessible via a RESTful JSON API." Generally, relational databases aren't simply accessed via REST services, but require a much more complex SQL API. Often these API's (JDBC, ODBC, etc.) are quite complex. REST is quite simple. Ad-hoc and schema-free with a flat address space. Relational databases have complex, fixed schema. You define tables, columns, indexes, sequences, views and other stuff. Couch doesn't require this level of complex, expensive, fragile advanced planning. Distributed, featuring robust, incremental replication with bi-directional conflict detection and management. Some SQL commercial products offer this. Because of the SQL API and the fixed schemas, this is complex, difficult and expensive. For Couch, it appears simple and inexpensive. Query-able and index-able, featuring a table oriented reporting engine that uses Javascript as a query language. So does SQL and relational databases. Nothing new here. So. Why CouchDB? REST is simpler than JDBC or ODBC. No Schema is simpler than Schema. Distributed in a way that appears simple and inexpensive.
