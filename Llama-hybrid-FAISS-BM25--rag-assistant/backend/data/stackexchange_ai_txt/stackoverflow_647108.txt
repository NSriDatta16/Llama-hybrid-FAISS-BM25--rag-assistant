[site]: stackoverflow
[post_id]: 647108
[parent_id]: 647092
[tags]: 
Bear in mind that The list would only be on the stack if Object-A was also on the stack Even if the list itself is not on the heap, it may allocate its storage from the heap. This is how std::list, std::vector and most C++ lists work â€“ the reason is that stack-based elements cannot grow. These days most stacks are around 1mb, so you'd need a pretty big list of pretty big objects before you need to worry about it. Even if your stack was only about 32kb you could store close to eight thousand pointers before it would be an issue. IMO people new to the explicit memory management in C/C++ can have a tendency to overthink these things. Unless you're writing something that you know will have thousands of sizable objects just put the list on the stack. Unless you're using giant C-style arrays in a function the chances are the memory used by the list will end up in the heap anyway due to #1 and #2 above.
