[site]: stackoverflow
[post_id]: 3749939
[parent_id]: 3748930
[tags]: 
The change event is completely reliable but only fires when the textarea loses focus, which means that as soon as the user tries to click the button it will disappear. This therefore does have the desired result but with poor user experience. The alternative is to monitor the textarea for changes, which is where it starts to get tricky. If you do it using an event-based approach, you need to detect keyboard input, pastes and drag and drop. Not all browsers support paste detection (notably Firefox 2 and all versions of Opera do not), so it's already getting tricky. The easier, more cross-browser but dirtier method is a polling-based approach, which you can combine with a handler for the textarea's blur event to prevent the possibility of the user clicking the button between polls. The following will only poll the textarea as long as it is has the focus: var textarea = document.getElementById("your_textarea"); textarea.onfocus = function() { var initialValue = textarea.value; function testForChange() { if (textarea.value != initialValue) { // Do the button hiding stuff } } textarea.onblur = function() { window.clearInterval(timer); testForChange(); textarea.onblur = null; }; var timer = window.setInterval(function() { testForChange(); }, 50); };
