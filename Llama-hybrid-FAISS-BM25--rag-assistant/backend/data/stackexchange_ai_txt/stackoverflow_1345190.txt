[site]: stackoverflow
[post_id]: 1345190
[parent_id]: 1257549
[tags]: 
I read through alot of the MSDN articles on the web based report viewer and tried several ways to fire off the search but only found this one to work: First, in code you can set the search text box like so: TextBox txt; txt = (TextBox) this.ReportViewer1.Controls[1].Controls[4].Controls[0]; txt.Text = "test"; I did it in the ReportViewer's PreRender event. Position 1 in the first control list is the toolbar control, #4 is the search group control and then in that group the first control is the text box. The second number (4) could vary based on what you are showing / not showing in the toolbar. I was working with the default report viewer settings. It's a hack but it works. Then I tried firing off the search event myself but this didn't result in the search working although it did fire off the event and with the correct information.... So here's what I did. I created a javascript function: function OnFirstLoad() { if (!isPostBack) document.getElementById('ReportViewer1').ClientController.ActionHandler('Search', document.getElementById('ReportViewer1_ctl01_ctl04_ctl00').value); } I read the source of the .aspx page and found the text "find" and figured out what the client side call was. You will notice the ctl01 & ctl04 and ctl00 follow the same numbering as the server side code. You would need to change this to reflect your code. Again the second one (ctl04) is the one that is likely to change depending on how your toolbar is setup. I then set the onload event for the body of the page to the javascript function: The last trick was to only call this code the first time. So I added this to the page load event of the form code behind: If (!IsPostBack) ClientScript.RegisterClientScriptBlock(GetType(), "IsPostBack", "var isPostBack = false;", true); else ClientScript.RegisterClientScriptBlock(GetType(), "IsPostBack", "var isPostBack = true;", true); This creates a variable that the javascript function checks. On the first go round it's false so it calls the report viewers search function, otherwise it's true and doesn't fire. This is a pretty bad hack in my opinion and fragile. Changes of the report viewer's toolbar settings may require changes to the javascript and the code to set the text box. I created a report that had several pages and the first hit wasn't until the third page and it went straight to it. From there the next button worked great until the end of the report. To bad it's not as simple as the windows based report viewer or the server based report viewer. :) Good Luck!
