[site]: stackoverflow
[post_id]: 709612
[parent_id]: 
[tags]: 
Why won't my ofstream work when I put it outside my while statement?

Every time I do anything, and my while(1) gets called in my main function, my file gets cleared. It's driving me crazy. I've tried EVERYTHING. I try to put my ofstream out("data.dat"); outside the while(1) statement so it isn't called everytime but then nothing is written to the file like the ofstream isn't even working! I've tried to make the ofstream static, so it isn't called over and over again like: static ofstream open("data.dat"); That doesn't work. And like I said, when I put the ofstream OUTSIDE the while statement, nothing is written to the file. Like: ofstream out("data.dat"); while (1) { string line = ""; cout And can someone tell me why my check to prevent reading of a empty file won't work? My Check: bool checkFileEmpty() { ifstream in("data.dat"); if (in.peek() == in.eofbit) { return true; } return false; } I am so sick and tired of my program crashing on startup over and over again because my vector is getting set to a size of 200 million. I've tried a BUNCH of stuff for this... none of it works... Please GOD someone help me with both of these! I've been up for 18 hours working on this ( all night yes ) and i'm ALMOST done. I'm begging you.... My Code: #include "stdafx.h" #include #include #include #include using namespace System; using namespace std; #pragma hdrstop bool isValidChoice(int size, int choice); bool checkFileEmpty(); template void writeVector(ofstream &out, const vector &vec); template vector readVector(ifstream &in); template vector addItem(vector &vec); template void printItemDescriptions(vector &vec); template int displayRecord(vector &vec); template vector editRecord(vector &vec); template vector deleteRecord(vector &vec); struct InventoryItem { string Description; int Quantity; int wholesaleCost; int retailCost; string dateAdded; } ; int main(void) { cout structList = readVector ( in ); cout void writeVector(ofstream &out, const vector &vec) { out ::const_iterator i = vec.begin(); i != vec.end(); i++) { out >(istream &in, InventoryItem &i) { in >> i.Description; in >> i.Quantity; in >> i.wholesaleCost >> i.retailCost; in >> i.dateAdded; return in; } template vector readVector(ifstream &in) { size_t size; if (checkFileEmpty()) { size = 0; } else { in >> size; } vector vec; vec.reserve(size); for(unsigned int i = 0; i > tmp; vec.push_back(tmp); } return vec; } template vector addItem(vector &vec) { system("cls"); string word; unsigned int number; InventoryItem newItem; cout void printItemDescriptions(vector &vec) { int size = vec.size(); if (size) { cout int displayRecord(vector &vec) { string word = ""; string quit = "quit"; int choice = 1; int size = vec.size(); if (size) { printItemDescriptions(vec); cout vector editRecord(vector &vec) { string word; int choice; printItemDescriptions(vec); cout vector deleteRecord(vector &vec) { if (!vec.size()) { cout
