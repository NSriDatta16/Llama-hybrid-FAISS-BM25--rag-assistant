[site]: stackoverflow
[post_id]: 577380
[parent_id]: 263400
[tags]: 
I have a Hashing class in Helper library that I use it for this purpose. /// /// This is a simple hashing function from Robert Sedgwicks Hashing in C book. /// Also, some simple optimizations to the algorithm in order to speed up /// its hashing process have been added. from: www.partow.net /// /// array of objects, parameters combination that you need /// to get a unique hash code for them /// Hash code public static int RSHash(params object[] input) { const int b = 378551; int a = 63689; int hash = 0; // If it overflows then just wrap around unchecked { for (int i = 0; i Then, simply you can use it as: public override int GetHashCode() { return Hashing.RSHash(_field1, _field2, _field3); } I didn't assess its performance, so any feedback is welcomed.
