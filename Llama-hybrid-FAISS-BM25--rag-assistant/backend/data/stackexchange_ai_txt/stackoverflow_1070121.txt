[site]: stackoverflow
[post_id]: 1070121
[parent_id]: 1069892
[tags]: 
I've struggled with this decision in interactions with several clients. Like most architectural decisions, there really is no wrong or right answer, just a set of trade-offs that need to be applied to different client contexts. When looking at these trade-offs, the decision has usually come down to the following pros and cons: EL PROs Microsoft in the namespace. No surprise that for many large organizations, this is consideration #1. As an aside, many are surprised when they read the EULA and understand Microsoft's actual level of support for the EL. Proven at many large scale enterprises across the globe. This doesn't mean that it's the best solution, just that its stable and has a negligible run time performance impact. [Data Access] Is probably the best solution if you're looking to stick with old school hand crafted or generated SQL / stored procs EL CONs Slow-to-market or non-existent support for promising practices such as ORM, DI/IoC, or AOP Heavyweight with a higher corresponding overhead than other frameworks such as Log4Net in the logging domain. Difficult to customize if you step outside the provider model. Dealing with source code changes, signing, and GAC deployments / versioning issues can be much more of a bear with the complex web of EL DLLs than it would be with a lighter weight framework. Some of the things that large enterprises have critical needs for, such as a batch framework, haven't made their way to the EL and are still proprietary code in the Avanade ACA framework.
