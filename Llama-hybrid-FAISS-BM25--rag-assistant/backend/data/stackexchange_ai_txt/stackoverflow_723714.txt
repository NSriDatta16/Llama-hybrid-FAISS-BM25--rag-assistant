[site]: stackoverflow
[post_id]: 723714
[parent_id]: 723702
[tags]: 
Use inheritance and private inheritance. And don't use any virtual functions. Since with private inheritance, you don't have is-a, no one will be able to use a baseclas pointer to a derived subclass, and you won't get the slicing problem when passinfg by value. This gives you the best of both worlds (and indeed it's how most libraries implement many of the STL classes). From http://www.hackcraft.net/cpp/templateInheritance/ (discussing std::vector, not your V ector class): vector is declared to have a private base of vector . All functions which place a new element into the vector, such as push_back() , call the equivalent function on this private base, so internally our vector is using a vector for storage. All functions which return an element from the vector, such as front() , perform a static_cast on the result of calling the equivalent function on the private base. Since the only way to get a pointer into the vector (apart from deliberately dangerous tricks) is through the interface offered by vector it is safe to staticly cast the void* back to T* (or the void*& back to T*& , and so on). In general, if the STL does it like this, it seems like a decent model to emulate.
