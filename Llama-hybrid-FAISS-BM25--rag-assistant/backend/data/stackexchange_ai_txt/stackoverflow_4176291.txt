[site]: stackoverflow
[post_id]: 4176291
[parent_id]: 4176249
[tags]: 
Server 1 is responding to incoming requests from your users. So if you have determined that it is the bottleneck, then you need to focus your attention there. If server 2 and 3 are only performing queries to the internet, then they probably aren't doing too much work processor/disk wise. If you have 2 servers configured to do a reasonably easy task, and your primary user-facing server is being overloaded it might be better simply to run all 3 servers as user-facing. From what you described it sounds like Server#1 is blocking on the response from servers 2 & 3, meaning it has to hold open many connections potentially. If servers 2 & 3 aren't really don't that much work because their task is just internet queries you would probably be better served by merging the user-facing servers and the query engine into one server and distributing user load across all 3 servers. In this way each server has fewer open user connections. And the query engine still isn't hogging resources (if it is just web requests), so it's not negatively impacting user performance. Just some thoughts for you. It's not possible to be totally definitive without knowing more about your application. Additional comments As mentioned in comments you should look into a proper load balancer, a good hardware load balancer is the first recommendation. Where are you running your servers? If they are in a cloud datacenter such as Amazon EC2, Rackspace, etc then load balancing services are easily available to you. You can also use a software load balancer. Apache provides this functionality even: http://httpd.apache.org/docs/current/mod/mod_proxy_balancer.html Even with your current configuration it would be possible to put Apache in front of one of the servers and then tune it so that the server with Apache (doing the load balancing) gets a lower percentage of the traffic, to offset the expense of the Apache server. In this case you have no hardware change. Though you have an obvious single point of failure, not dissimilar to what you have now though, a proper load balancer generally alleviates the single-point-of-failure problem you currently have with your architecture.
