[site]: stackoverflow
[post_id]: 230907
[parent_id]: 230896
[tags]: 
Your original list [foo, bar, baz] doesn't contain the variable names , it just contains elements that refer to the same values as the variables you listed. This is because you can have two different variable names that refer to the same value. So, the list by itself doesn't contain information about what other names refer to the objects. The first element in your array has the name foo but it also has the name a[0] (assuming your array is called a ). After executing the following code, quux also refers to the same object: quux = a[0] Update: You're right that you can use eval() for that, but its use is generally discouraged. Python provides a special member named __dict__ that contains the symbol table for the current module. So you can: import __main__ d = dict((x, __main__.__dict__[x]) for x in list_of_variable_names) Having to import __main__ when your code is in the unnamed main module is a quirk of Python.
