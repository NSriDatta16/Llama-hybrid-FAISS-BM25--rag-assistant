[site]: stackoverflow
[post_id]: 411364
[parent_id]: 36504
[tags]: 
The average corporate programmer, e.g. most of the people I work with, will not understand it and most work environments will not let you program in it That one is just a matter of time though. Your average corporate programmer learns whatever the current Big Thing is. 15 years ago, they didn't understand OOP. If functional programming catches on, your "average corporate programmers" will follow. It's not really taught at universities (or is it nowadays?) It varies a lot. At my university, SML is the very first language students are introduced to. I believe MIT teaches Lisp as a first-year course. These two examples may not be representative, of course, but I believe most universities at the very least offer some optional courses on functional programming, even if they don't make it a mandatory part of the curriculum. Most applications are simple enough to be solved in normal OO ways It's not really a matter of "simple enough" though. Would a solution be simpler (or more readable, robust, elegant, performant) in functional programming? Many things are "simple enough to be solved in Java", but it still requires a godawful amount of code. In any case, keep in mind that functional programming proponents have claimed that it was the Next Big Thing for several decades now. Perhaps they're right, but keep in mind that they weren't when they made the same claim 5, 10 or 15 years ago. One thing that definitely counts in their favor, though, is that recently, C# has taken a sharp turn towards functional programming, to the extent that it's practically turning a generation of programmers into functional programming programmers, without them even noticing . That might just pave the way for the functional programming "revolution". Maybe. ;)
