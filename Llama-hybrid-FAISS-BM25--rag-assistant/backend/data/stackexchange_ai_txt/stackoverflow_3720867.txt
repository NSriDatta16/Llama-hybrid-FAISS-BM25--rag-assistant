[site]: stackoverflow
[post_id]: 3720867
[parent_id]: 3719848
[tags]: 
You're not actually using initializer lists. The constructor receives a variadic template and you initialize x with uniform initialization . The only problem is I don't know of an elegant way of initializing an array with an initializer_list , AFAIK std::array should have a constructor that accepts initializer_list but it doesn't seem to be supported by g++ yet. #include template struct a { char s[N]; a (std::initializer_list list) { if (N != list.size()) throw "list wrong size"; int i = 0; const char* p = list.begin(); while(p != list.end()) s[i++] = *p++; } };
