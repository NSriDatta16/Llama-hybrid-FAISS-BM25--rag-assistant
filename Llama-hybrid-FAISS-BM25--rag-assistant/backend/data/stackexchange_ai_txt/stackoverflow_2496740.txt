[site]: stackoverflow
[post_id]: 2496740
[parent_id]: 667141
[tags]: 
There are three main data models (C.J.Date, E.F.Codd) and I am adding a flat file to this: flat file(s) (structure varies - from 'stupid' flat text to files conforming to grammars which coupled with clever tools do very clever things, think compilers and what they can do, narrow application in modelling new things) hierarchical (trees, nested sets - examples: xml and other markup languages, registry, organizational charts, etc; anything can be modelled, but integrity rules are not easy to express and retrieval is hard to optimize automatically, some retrieval is fast and some is very slow ) network (networks, graphs - examples: navigational databases, hyperlinks, semantic web, again almost anything can be modelled but automatic optimizing of retrieval is a problem) relational (first order predicate logic - example: relational databases, automatic optimization of retrieval) Both hierarchical and network can be represented in relational and relational can be expressed in the other two. The reason that relational is considered 'better' is the declarative nature and standardization on not only the data retrieval language but also on the data definition language, including the strong declarative data integrity, backed up with stable , scalable, multi-user management system. Benefits come at a cost, which most projects find to be a good ratio for systems (multi application) that store long term data in a from that will be usable in foreseeable future. If you are not building a system, but a single application, perhaps for a single user, and you are fairly certain that you will not want multiple applications using your data, nor multiple users, any time soon then you'll probably find faster approaches. Also if you don't know what kind of data you want to store and how to model it then relational model strengths are wasted on it. Or if you simply don't care about integrity of your data that much (which can be fine). All data structures are optimized for a certain kind of use, only relational if properly modelled tries to represent the 'reality' in semantically unbiased way. People who had bad experience with relational databases usually don't realize that their experience would have been much worse with other types of data models. Horrible implementations are possible, and especially with relational databases, where it is relatively easy to build complex models, you could end up with quite a monster on your hands. Still I always feel better when I try to imagine the same monster in xml. One example of how good relational model is, IMO, is ratio of complexity vs shortness of the questions that you will find that involve SQL.
