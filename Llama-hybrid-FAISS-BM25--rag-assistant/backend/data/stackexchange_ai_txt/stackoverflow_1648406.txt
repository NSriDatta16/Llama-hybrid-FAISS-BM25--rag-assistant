[site]: stackoverflow
[post_id]: 1648406
[parent_id]: 1648349
[tags]: 
Problems I typically have include: Misconfigured productions settings, whether in my production localsettings.py, wsgi/cgi, or apache site files in /etc/sites-available Database differences. I use South for migrations and have run into some subtle issues when performing my migration on PostgreSQL when it worked smoothly in sqlite. Static file hosting since I cheat and use the Django server in development Permissions, both on the file system and within the database Rare, but possible, network issues preventing me from getting my dependencies, whether on PyPi or some 3rd party site Ways that I have mitigated these issues: Use the same database in production and development (in your case, MySQL everywhere) I've found it is useful to have a "test" environment which mimics production in every way possible (it can be on lower end hardware, or even the same machine). This way, if there are any issues in this "production-like" enivornment, I can solve them without taking my production server offline. Script everything for repeatable deployments. I use fabric , but zc.buildout or Paver would also work. These tools help reduce typos while deploying and reduce the time to deploy my app. Use version control (mercurial, git, subversion) and a schema migration tool (like South), so if something does go wrong when you deploy to production, you have the possibility of backing out the changes and allowing production to run on the old code with the old database schema. I haven't set up an " egg proxy " yet, but I am considering it, to avoid issues when downloading dependencies. I've found pip's freezing dependencies to be useful, in case a new, incompatible change to a library occurred since I downloaded it initially Use a web testing framework like Windmill or Selenium to test my application in my "test" environment, so that I can get a lot of test coverage of my system very quickly.
