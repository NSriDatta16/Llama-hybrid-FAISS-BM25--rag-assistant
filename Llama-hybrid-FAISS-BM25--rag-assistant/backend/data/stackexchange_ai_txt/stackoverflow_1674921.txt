[site]: stackoverflow
[post_id]: 1674921
[parent_id]: 1674846
[tags]: 
You'll need: Client-side code (Java Applet, Silverlight, etc) to break files in small chunks Server-side code (ASP.NET, Java, doesn't matter) to build those files back I just finished an application exactly like that; I'd use Silverlight ( WebRequest async), ASP.NET ( IHttpHandler / IHttpAsyncHandler ) and SQL Server 2005 ( UPDATETEXT / READTEXT ) for file storage. UPDATE : About ASP.NET server-side code: ASP.NET default config will allow 100 threads per processor; IHttpAsyncHandler won't block your process and there you can write your file content directly to context.Response.OutputStream . For upload, you'll also send several data chunks, but in multiple HTTP connections; while this can bring some overheat due HTTP headers, works very well in my tests.
