[site]: stackoverflow
[post_id]: 404182
[parent_id]: 404083
[tags]: 
I think starting from the assumption that Jeff's conclusions are correct is not necessarily good; having maintained stored procedure code as well as JDBC-based data layers, I can say that these caused maintenance problems galore, mostly related to the inability to understand what was going on at a higher level. A database is necessarily low-level; it stores numbers and strings essentially. Business logic is high-level. This is why we have abstraction. Personally, I think the Rails/ActiveRecord way is the best solution to having an object/domain model but also being able to take advantage of a relational database. So: don't throw out ORM, but don't default to it either. It's a tool that solves certain problems. To ignore it would be ignorant and to always use it would be arrogant.
