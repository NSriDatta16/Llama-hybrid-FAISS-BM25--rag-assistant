[site]: stackoverflow
[post_id]: 146720
[parent_id]: 106627
[tags]: 
It is generally not useful to repeat the basic rules of memory management, since almost invariably you make a mistake or describe them incompletely -- as is the case in the answers provided by 'heckj' and 'benzado'... The fundamental rules of memory management are provided in Apple's documentation in Memory Management Rules . Apropos of the answer from 'www.stray-bits.com': stating that objects returned from "non-owning" methods are "autoreleased" is also at best misleading. You should typically not think in terms of whether or not something is "autoreleased", but simply consider the memory management rules and determine whether by those conventions you own the returned objet. If you do, you need to relinquish ownership... One counter-example (to thinking in terms of autoreleased objects) is when you're considering performance issues related to methods such as stringWithFormat: . Since you typically(1) don't have direct control over the lifetime of these objects, they can persist for a comparatively long time and unnecessarily increase the memory footprint of your application. Whilst on the desktop this may be of little consequence, on more constrained platforms this can be a significant issue. It is therefore considered best practice on all platforms to use the alloc / init pattern, and on more constrained platforms, where possible you are strongly discouraged from using any methods that would lead to autoreleased objects. (1) You can take control by using your own local autorelease pools. For more on this, see Apple's Memory Management Programming Guide .
