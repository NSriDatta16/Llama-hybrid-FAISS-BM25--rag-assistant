[site]: stackoverflow
[post_id]: 3734727
[parent_id]: 3734512
[tags]: 
Have a read of the Wikipedia entry . Thread-local storage isn't something that's particular to C++. Sometimes it goes by different names, like "TLS" (just an abbreviation of thread-local storage), or "thread-specific storage" (TSS). Most operating systems provide APIs to access per-thread storage. For example, Windows has a bunch of API functions starting with "TLS". Under the hood, Win32 reserves a special area for a variety of per-thread data, including user thread-local storage, accessible through a particular CPU register (FS on x86). Linux provides thread-specific storage through the pthread APIs, with names like pthread_key_create , and these are generally implemented using a similar technique. It's possible that an OS doesn't provide any support at all. However, if the OS provides a process-unique thread ID through an API, then the C++ runtime library could maintain something conceptually like a std::map internally. Of course, then there's a problem of what per_thread_storage is. If a program was statically linked, it could just be something like a pointer to a big struct with all the thread-local storage variables declared in the program as elements. This is an oversimplification, but you get the general idea. Accessing thread-local storage variables obviously isn't just a straight memory read or write. It's potentially quite a bit more involved than that. If you are going to use thread-local/specific storage a lot in a particular function, I'd recommend that you copy the thread-local storage pointer into a local variable first.
