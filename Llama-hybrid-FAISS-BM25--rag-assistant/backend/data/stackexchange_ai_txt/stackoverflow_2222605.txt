[site]: stackoverflow
[post_id]: 2222605
[parent_id]: 2222273
[tags]: 
While maybe not a direct answer to your question, the following is something you would benefit greatly from improving in: In your main function body you are mixing the business logic part (printing the result to the stdout) with the task specific details. By doing this you create code that is very difficult to maintain. What if you instead want to put the number in a text field instead of printing it? Then you would have to change all the println statements. What if you sometimes want to print and sometimes update a text field? Would you add some if test every place instead? By mixing business logic (and I use that as a quite loosely defined term, how to process results) in the code it becomes more difficult to test. The principle of KISS is taught for a reason, and you would do wise of trying to avoid learning it the hard way :) Maybe the above is not so clear, what I mean is that if your code had been written in the following way: public class digits { public static int main letterToMobileDigit(char letterUpperOrLowerCase) { char letter = letterUpperOrLowerCase.toLowerCase(); if (letter=='a' || letter=='b' || letter== 'c') { return 1; } else if(letter=='d' || letter=='e' || letter== 'f') { return 2; } else if (letter=='g' || letter=='h' || letter== 'i') { return 3; } else if (letter=='j' || letter=='k' || letter== 'l') { return 4; } else if (letter=='m' || letter=='n' || letter== 'o') { return 5; } else if (letter=='p' || letter=='q' || letter== 'r' || letter== 's') { return 6; } else if (letter=='t' || letter=='u' || letter== 'v') { return 7; } else if (letter=='w' || letter=='x' || letter== 'y' || letter== 'z') { return 9; } System.err.println("invalid char " + letter); // not the best or most elegant error handling, consider improving return -1; } public static void main (String letter) { System.out.println(letterToMobileDigit(letter.charAt(0))) } } you have code that is much easier to change, test and read. The principle of separating logic where it belongs is an extremely important skill, and there is no good reason for not always practising it.
