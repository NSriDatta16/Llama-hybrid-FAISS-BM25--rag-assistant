[site]: stackoverflow
[post_id]: 2302783
[parent_id]: 2297622
[tags]: 
I've ended up creating a rudimentary general-purpose framework for caching the results of a SQL function or view to a table. Public Sub CreateCacheTable(ByVal SourceView As String, ByVal FieldList As String) Dim CacheTable As String = GetCacheTableName(SourceView) If Not TableExists(CacheTable) Then Dim Sql As String = " Select ~FieldList~ Into ~CacheTable~ From ~SourceView~ ". _ Replace("~CacheTable~", CacheTable). _ Replace("~FieldList~", FieldList). _ Replace("~SourceView~", SourceView) ExecuteNonQuery(cs, CommandType.Text, Sql) End If End Sub Public Function GetCacheTableName(ByVal SourceView As String) Dim Result As String = "_c_~SourceView~". _ Replace("~SourceView~", SourceView). _ Replace(".", "_"). _ Replace(",", "_"). _ Replace("[", ""). _ Replace("]", ""). _ Replace("(", ""). _ Replace(")", "") Return Result End Function Public Sub CleanupCacheTables() ExecuteNonQuery(cs, CommandType.StoredProcedure, "CleanupCacheTables") End Sub When the page loads I do this: CleanupCacheTables() CreateCacheTable(SourceView, FieldList) For example, if SourceView is DirectoryContactsByContact(123) this creates a table named _c_DirectoryContactsByContact_123 . Here's the SQL for CleanupCacheTables : Create Procedure CleanupCacheTables as /* Finds all tables starting with _c_ that were created more than 30 minutes ago and drops them */ Declare @TableName nvarchar(255) Declare CacheTableCursor Cursor for Select TableName=name From SYS.OBJECTS Where Type_Desc = 'USER_TABLE' And Left(name,3)= '_c_' And DateDiff(minute, create_date, GetDate())>30 Open CacheTableCursor Fetch Next from CacheTableCursor into @TableName While @@FETCH_STATUS = 0 Begin Exec ('Drop Table ' + @TableName) Fetch Next from CacheTableCursor into @TableName End -- While Close CacheTableCursor Deallocate CacheTableCursor Go This is crude: There's no invalidation, and it probably won't scale to a lot of concurrent users and/or very large datasets. Nevertheless, in my case it's resulted in near-instantaneous results as the user types or selects search criteria, with very little overhead.
