[site]: stackoverflow
[post_id]: 3066323
[parent_id]: 3035064
[tags]: 
I, so far, have fixed the problem I was having... It was actually relatively straight forward once I learned about nested attributes! Here is the new characters model! class Character :player_skills accepts_nested_attributes_for :player_skills def skills_pre_update(params) skills = Skill.find(:all, :order => 'id') skills = skills.map do |skill| skill.id end self.skill_ids = [] self.skill_ids = skills self.skill_ids.each_with_index do |skill_id, index| self.player_skills[index].level = params[:character][:player_skills_attributes][index][:level] end self.skill_ids = params[:character][:skill_ids] end end And the update action for the character controller was mildly changed: @character.skills_pre_update(params) params[:character].delete(:player_skills_attributes) params[:character].delete(:skill_ids) The reason being, those two portions are already handled by the pre_update action, therefore they don't need to be handled again by update_attributes, which gets called later. The view was relatively straight forward. the Many-to-Many checkboxes are still the same, I did however add the new textboxes! - @skills.each_with_index do |skill,index| = check_box_tag "character[skill_ids][]", skill.id, @character.skills.include?(skill) =h skill.name -ps = skill.player_skills.find_by_character_id(@character) || skill.player_skills.build -fields_for "character[player_skills_attributes][]", ps do |psf| =psf.text_field(:level, :index => nil) =psf.hidden_field(:id, :index => nil) In essence, the reason I have to blank out skill_ids ( skill_ids = [] ) in the Characters model is because otherwise it improperly sets the order. In essence, I add all the skills. Update the levels, using the text-boxes. Then reset the skills to what the user actually checked (which will delete any unused skills.) I don't feel this is the greatest solution - in fact it feels rather hackish to me. So if anybody else wants to chime in with a better, possibly faster/more elegant solution, feel free! Otherwise, I do hope this helps someone else... because modifying the extra attributes on the join table (without giving the join table its own controller/views) was a real pain!
