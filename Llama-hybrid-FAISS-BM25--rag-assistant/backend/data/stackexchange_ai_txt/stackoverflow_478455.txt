[site]: stackoverflow
[post_id]: 478455
[parent_id]: 
[tags]: 
Need ideas for securing a JMS based server process and database

I have a tool that is distributed freely as an Eclipse plugin, which means that I can't track who uses it or ask them to register. Every client tool communicate via a JMS broker with a single shared server process (written in Java) and can receive messages in reply. The server connects via Hibernate to a MySQL database. At present, the only message that the tool sends is a request for data, and the server gets the message and sends a bulk of XML data representing elements to the client, which displays corresponding items in the IDE. Hence, I don't think that there is much that can be done to the server except a DoS attack. Now, however, I want to add the following functionality: a user can assign a rating to a particular element (identified by a numeric id), and a message will be sent to the server which will store the rating as an event in a rating event table. When next requests for data come in, the average rating for each item will be sent with the request. My problem is that I've never deployed a tool that used a public server like this, even if it is hidden by the JMS broker. What attacks could be deployed against me and how can I defend against them? There's the problem of DoS, and I'm not sure how to address it. There's the possibility of injection, but all my data is numeric and I don't know how hibernate deals with things. There's the problem of spam or dummy-voting, and I can't really think of how to address that. I'm sure there are others...
