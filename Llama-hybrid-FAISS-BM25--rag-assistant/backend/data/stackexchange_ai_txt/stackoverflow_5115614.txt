[site]: stackoverflow
[post_id]: 5115614
[parent_id]: 5104861
[tags]: 
There are three ways to provide an operator new. replacing one or more of the four non placement default operators new, providing overload to the default operator new (thus with an additional parameter, those may be called with the placement new syntax), providing operator new class members, those will be called only for that class and their descendant. In the latter two cases, it is possible to call one of the more well know operators new with the syntax: ptr = ::operator new(sz); ptr = ::operator new[](sz); ptr = ::operator new(sz, std::nothrow); ptr = ::operator new[](sz, std::nothrow); but if you have replaced them, your replacement will be called. You can't call the default operators new you have replaced (well perhaps you can by playing implementation specific linker tricks, but that's outside the scope of the language). About the replacement of operator new: you should replace the two operators new and the corresponding two operator delete together (or one of the delete operator could be easily called with unexpected pointer) you should replace the two operators new[] and the corresponding two operator delete[] together (same reason) pay attention to what is possible with the new handlers, some library plays with that.
