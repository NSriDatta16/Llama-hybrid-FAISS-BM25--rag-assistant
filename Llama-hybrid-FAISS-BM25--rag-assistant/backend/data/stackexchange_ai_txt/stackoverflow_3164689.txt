[site]: stackoverflow
[post_id]: 3164689
[parent_id]: 3164278
[tags]: 
Sure somebody will come up with a neat LINQ solution but here's my old style solution. Sure it's got problems and won't cope with every combination, cobbled together and solves the problem but not elegant in any way :-( internal class SourceData { public int TypeId { get; set; } public DateTime Date { get; set; } } internal class Result { public int TypeId { get; set; } public DateTime StartDate { get; set; } public DateTime EndDate { get; set; } } class Program { static void Main() { var a = new List { new SourceData {TypeId = 1, Date = new DateTime(2010, 02, 01)}, new SourceData {TypeId = 1, Date = new DateTime(2010, 02, 02)}, new SourceData {TypeId = 1, Date = new DateTime(2010, 02, 03)}, new SourceData {TypeId = 2, Date = new DateTime(2010, 02, 03)}, new SourceData {TypeId = 2, Date = new DateTime(2010, 02, 04)}, new SourceData {TypeId = 2, Date = new DateTime(2010, 02, 06)} }; var results = new List (); int currentTypeId = 1; var rangeEndDate = new DateTime(); DateTime rangeStartDate = a[0].Date; DateTime currentDate = a[0].Date; for (int i = 1; i 1) { results.Add(new Result { TypeId = currentTypeId, StartDate = rangeStartDate, EndDate = a[i-1].Date }); rangeStartDate = a[i].Date; } rangeEndDate = a[i].Date; currentDate = a[i].Date; } results.Add(new Result { TypeId = currentTypeId, StartDate = rangeStartDate, EndDate = rangeEndDate }); Console.WriteLine("Output\n"); foreach (var r in results) Console.WriteLine( string.Format( "{0} - {1} - {2}",r.TypeId,r.StartDate.ToShortDateString(),r.EndDate.ToShortDateString())); Console.ReadLine(); } } Gives the following output :- Output 1 - 01/02/2010 - 03/02/2010 2 - 03/02/2010 - 04/02/2010 2 - 06/02/2010 - 06/02/2010
