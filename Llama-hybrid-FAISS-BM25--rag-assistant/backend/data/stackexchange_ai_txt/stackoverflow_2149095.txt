[site]: stackoverflow
[post_id]: 2149095
[parent_id]: 2143462
[tags]: 
This is not a simple or ideal solution because it requires an extension of the File decorator... but it's rather frustrating that they didn't make the effort to separate the hidden element generation logic from the file input generation logic. I'm not sure if the file view helper handles the issue of an element being an array (that seems to be the reason they did it this way.) Extension of File Decorator: (the commented out part is what causes the extra input to be generated.) getElement(); if (!$element instanceof Zend_Form_Element) {return $content;} $view = $element->getView(); if (!$view instanceof Zend_View_Interface) {return $content;} $name = $element->getName(); $attribs = $this->getAttribs(); if (!array_key_exists('id', $attribs)) {$attribs['id'] = $name;} $separator = $this->getSeparator(); $placement = $this->getPlacement(); $markup = array(); $size = $element->getMaxFileSize(); if ($size > 0) { $element->setMaxFileSize(0); $markup[] = $view->formHidden('MAX_FILE_SIZE', $size); } if (Zend_File_Transfer_Adapter_Http::isApcAvailable()) { $apcAttribs = array('id' => 'progress_key'); $markup[] = $view->formHidden('APC_UPLOAD_PROGRESS', uniqid(), $apcAttribs); } else if (Zend_File_Transfer_Adapter_Http::isUploadProgressAvailable()) { $uploadIdAttribs = array('id' => 'progress_key'); $markup[] = $view->formHidden('UPLOAD_IDENTIFIER', uniqid(), $uploadIdAttribs); } /* if ($element->isArray()) { $name .= "[]"; $count = $element->getMultiFile(); for ($i = 0; $i formFile($name, $htmlAttribs); } } else {$markup[] = $view->formFile($name, $attribs);} */ $markup = implode($separator, $markup); switch ($placement) { case self::PREPEND: return $markup . $separator . $content; case self::APPEND: default: return $content . $separator . $markup; } } } ?> Form setup in controller action: $form = new Zend_Form(); $form->addElement(new Zend_Form_Element_File('file')); $form->file->setLabel('File'); $form->file->setDescription('Description goes here.'); $decorators = array(); $decorators[] = array('File' => new Sys_Form_Decorator_File()); $decorators[] = array('ViewScript', array('viewScript' => '_formElementFile.phtml')); $form->file->setDecorators($decorators); $this->view->form = $form; In action view: form; ?> In element script: element->getId(); ?>"> element->getLabel())) : ?> formLabel($this->element->getName(), $this->element->getLabel());?> {$this->element->helper}( $this->element->getName(), $this->element->getValue(), $this->element->getAttribs() ); ?> element->getMessages()->length) : ?> formErrors($this->element->getMessages()); ?> element->getDescription())) : ?> element->getDescription(); ?> Output should be: File Description goes here. A problem with this solution is that the hidden elements don't render within the viewscript; this might be a problem if you're using the div as a selector in a client-side script...
