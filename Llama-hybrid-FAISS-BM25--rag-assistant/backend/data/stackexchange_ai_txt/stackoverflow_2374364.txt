[site]: stackoverflow
[post_id]: 2374364
[parent_id]: 2374349
[tags]: 
A recursive function keeps calling itself whereas an infinite loop keeps repeating the same block of code. When a function is called, some storage must be reserved to store its return value on the function call stack . So, given enough recursive invocations of the function, the stack space will be exhausted and cause a stack overflow. Consider #include #include int somefunc(int x) { printf("%d\n", x); return somefunc(rand()); } int main(void) { return somefunc(0); } The program above will eventually terminate or do some serious damage as opposed to int somefunc(int x) { return printf("%d\n", x); } int main(void) { while ( 1 ) { somefunc(rand()); } return 0; } which will happily run until the user causes termination (by pressing CTRL-C or turning off the computer.)
