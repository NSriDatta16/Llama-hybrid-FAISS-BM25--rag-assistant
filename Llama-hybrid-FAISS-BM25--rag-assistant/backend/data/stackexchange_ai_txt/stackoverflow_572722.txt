[site]: stackoverflow
[post_id]: 572722
[parent_id]: 567516
[tags]: 
Let's see this should be pretty straightforward. Prerequisites: 0. should be cross-platform 1. information to be persisted includes a single POJO & arbitrary byte[]s (files actually, the POJO stores it's names in a String[]) 2. only sequential access is required 3. should be a way to check data consistency 4. should be small and fast 5. should prevent an average user with archiver + notepad from modifying the data Well guess what, you pretty much have it already, it's built-in the platform already: Object Serialization If you need to reduce the amount of data sent in the wire and provide a custom serialization ( for instance you can sent only 1,2,3 for a given object without using the attribute name or nothing similar, and read them in the same sequence, ) you can use this somehow "Hidden feature" If you really need it in "text plain" you can also encode it, it takes almost the same amount of bytes. For instance this bean: import java.io.*; public class SimpleBean implements Serializable { private String website = "http://stackoverflow.com"; public String toString() { return website; } } Could be represented like this: rO0ABXNyAApTaW1wbGVCZWFuPB4W2ZRCqRICAAFMAAd3ZWJzaXRldAASTGphdmEvbGFuZy9TdHJpbmc7eHB0ABhodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20= See this answer Additionally, if you need a sounded protocol you can also check to Protobuf , Google's internal exchange format.
