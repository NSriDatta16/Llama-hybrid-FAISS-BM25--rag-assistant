[site]: stackoverflow
[post_id]: 5736071
[parent_id]: 4933483
[tags]: 
You could leverage repositories using every data access technology. An repository is abstraction over existing data access helpers / services, allowing decoupling of the business logic from the data access layer. Repositories used together with Query to enable filtering. It is often used together with unit of work to store the changes back into database. A repository has at least: Get-object-by-key operation(s) Get-all-objects operation Get-first-object-by-query operation(s) Get-objects-by-query operation(s) A very simple example :): A. Product class , defined in Common : public class Product { public int Id { get; private set; } public string Code { get; set; } public string Name { get; set; } public decimal Price { get; set; } } B. Classes for Query , IRepository and IUnitOfWork are defined in DAL.interfaces.dll or Common.dll (but NOT in DAL !). public class Query { public string Text { get; set; } } public interface IRepository where TEntity : class { bool TryGet(int key, out TEntity value); TEntity this[int key] { get; } IEnumerable GetAll(); bool TryGetFirst(Query condition, out TEntity value); TEntity GetFirst(Query condition); IEnumerable GetAll(Query condition); int Count { get; } } public interface IUnitOfWork { void SetAdded(TEntity value); // Marks entity as added for further INSERT void SetRemoved(TEntity value); // Marks entity as removed for further DELETE void SetChanged(TEntity value); // Marks entity as modified for further UPDATE void Save(); // Save all the changes } IUnitOfWork is aware of the changed entities. Save() calls an appropriate DatabaseHelper / OdbcHelper CRUD method for every changed entity in order to persist the changes in the database. The implementation of IRepository , ... IRepository and IUnitOFWork should be placed in DAL. The BLL then uses IRepository and IUnitOFWork in order to implement business (domain) logic. The BLL itself could be organized as service layer on the top of domain model , but it is out of the scope of the discussion :). I hope my answer helps. Please feel free to ask me a question ... Links: Patterns of enterpise application architecture by Martin Fowler
