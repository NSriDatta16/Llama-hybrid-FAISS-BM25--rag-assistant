[site]: stackoverflow
[post_id]: 3277795
[parent_id]: 3277628
[tags]: 
The ASP.NET Role / Membership providers include storage and code level components you can re-use - they aren't just the UI. For fine-grained access control (for example to specific functionality on a page) you can use the Enterprise Libraries. You'll be able to re-use code to protect functionality both at the BL layer and in the UI layer. The link you most want is this one: Determining Whether a User Is Authorized to Perform a Task Also see: What Does the Security Application Block Do? DotNetJohn - Enterprise Library Security Block... Rule Based Security using Microsoft Enterprise Library and CAS During earlier releases of the EntLibs, the Authorization Manager was a key component, but in more recent versions it's not a firm requirement, instead you can use an AuthorizationRuleProvider . see: Developing Applications Using Windows Authorization Manager . Filtering data is a bit more problematic depending on the complexity of your data, the amount of it and performance needs. One strategy is to have a simple DAL that returns everything, and prune out data the current user isn't allowed to see in the BL. Design a DAL that has some knowlegde of the roles your application uses: DAL.GetCustomersForAdmin() and DAL.GetCustomersForMember() But this is a bit dangerous as you'll be tied to using those roles. Have a database / DAL that is security aware, and always returns only the data the user is permitted to see, via the same methods: DAL.GetCustomers()
