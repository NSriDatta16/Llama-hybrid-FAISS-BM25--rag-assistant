[site]: stackoverflow
[post_id]: 505141
[parent_id]: 505021
[tags]: 
std::string::data would seem to be sufficient and most efficient. If you want to have non-const memory to manipulate (strange for encryption) you can copy the data to a buffer using memcpy : unsigned char buffer[mystring.length()]; memcpy(buffer, mystring.data(), mystring.length()); STL fanboys would encourage you to use std::copy instead: std::copy(mystring.begin(), mystring.end(), buffer); but there really isn't much of an upside to this. If you need null termination use std::string::c_str() and the various string duplication techniques others have provided, but I'd generally avoid that and just query for the length . Particularly with cryptography you just know somebody is going to try to break it by shoving nulls in to it, and using std::string::data() discourages you from lazily making assumptions about the underlying bits in the string.
