[site]: stackoverflow
[post_id]: 1580962
[parent_id]: 1571412
[tags]: 
Regarding scripting out objects, you can do it via DMO, SMO, PowerShell, VBScript, and any other number of methods. I still use my ancient VB DMO script that I wrote that was based on code from several websites and execute the code via a SSIS script task. Setup a SQL Server agent job that executes the package and add a step that checks-in the code. I'm not familiar with TFS, but I've done this with both Visual SourceSafe and Perforce without any problems. The trick is that you just need to learn how to do an unattended command-line check-in that merges changes (updates, deletes, creates). Below is my ancient VB.NET script task. Keep in mind that you can replace portions of this with variables to make it more dynamic. ' Microsoft SQL Server Integration Services Script Task ' Write scripts using Microsoft Visual Basic 2008. ' The ScriptMain is the entry point class of the script. Imports System Imports System.Data Imports System.Math Imports Microsoft.SqlServer.Dts.Runtime Imports System.IO Imports System.Text.RegularExpressions _ Partial Class ScriptMain Private Sub ScriptMain_Startup(ByVal sender As Object, ByVal e As System.EventArgs) End Sub Private Sub ScriptMain_Shutdown(ByVal sender As Object, ByVal e As System.EventArgs) Try ' Unlock variables from the read-only and read-write variable collection properties If (Dts.Variables.Count <> 0) Then Dts.Variables.Unlock() End If Catch ex As Exception End Try End Sub Enum ScriptResults Success = DTSExecResult.Success Failure = DTSExecResult.Failure End Enum Private Function CleanFileName(ByVal FileName As String) As String FileName = Regex.Replace(FileName, "[/\\:?=*<>]", "-") Return FileName End Function Public Sub Main() ''THESE MUST BE SET AND THE AGENT ACCOUNT MUST HAVE WRITE ACCESS TO THE DRIVE SELECTED Dim FolderName = "\\Your\Folder\Hierarchy\" Dim ServerName = "your-server-name" Dim ScriptOptions As Integer ScriptOptions = 1 ' Generate Drop ScriptOptions = ScriptOptions Or 4 ' Generate Default (Create) ScriptOptions = ScriptOptions Or 34 ' Generate Permissions (Database & Object) Dim ScriptOptions_Jobs As Integer ScriptOptions_Jobs = 1 ' Generate Drop ScriptOptions_Jobs = ScriptOptions_Jobs Or 1203765415 ' Other stuff Dim ScriptOptions_Tables As Integer ScriptOptions_Tables = 1 ' Generate Drop ScriptOptions_Tables = ScriptOptions_Tables Or 4 ' Generate Default (Create) ScriptOptions_Tables = ScriptOptions_Tables Or 34 ' Generate Permissions (Database & Object) ScriptOptions_Tables = ScriptOptions_Tables Or 73736 ' Generate Indexes Dim EXCLUDE_LIST = "master/tempdb/model/msdb" ''Standardize the end of the folder name to include \. If Right(FolderName, 1) <> "\" Then FolderName = FolderName & "\" End If ''Declare a folder that can be deleted. Delete doesn't like ending with \. Dim FolderNameDelete = FolderName If Right(FolderNameDelete, 1) = "\" Then FolderNameDelete = _ Left(FolderNameDelete, Len(FolderNameDelete) - 1) 'Used for file system tasks. Dim oFSO = CreateObject("Scripting.FileSystemObject") 'Delete if the folder exists. If you don't delete the folder and populate the scripts, 'then objects that were deleted from the database won't disappear and the Perforce diff 'won't recognize that the objects need to be deleted in Perforce. If oFSO.FolderExists(FolderName) = True Then oFSO.DeleteFolder(FolderNameDelete, True) End If 'Create the folder now so that we have a clean script destination. oFSO.CreateFolder(FolderName) oFSO.CreateFolder(FolderName & "Databases") oFSO.CreateFolder(FolderName & "Jobs") 'connect to the server instance using trusted credentials so we dont have password stored in a file and we dont have 'to worry about password changes breaking anything Dim oServer = CreateObject("SQLDMO.SQLServer") With oServer .LoginSecure = True .Connect(ServerName) End With 'Script out SQL Server Agent Jobs. For Each oJob In oServer.JobServer.Jobs oJob.Script(ScriptOptions_Jobs, FolderName & "Jobs\" & CleanFileName(oJob.Name) & ".sql") Next 'loop through all databases and excluding those in the EXCLUDE_LIST above, script out all the stored procedures. 'You could easily change this to read from a table or to let you pass in a different list. For Each oDB In oServer.Databases If InStr(1, EXCLUDE_LIST, oDB.Name) = 0 Then 'each db will get a folder in the main folder (FolderName) that will act as a container for the backup 'folders we'll create each time we run this Dim dbFolder = FolderName & "Databases\" & oDB.Name & "\" oFSO.CreateFolder(dbFolder) oFSO.CreateFolder(dbFolder & "Stored Procedures") oFSO.CreateFolder(dbFolder & "Tables") oFSO.CreateFolder(dbFolder & "User-Defined Functions") oFSO.CreateFolder(dbFolder & "Views") 'script out all the non-system procs For Each oProc In oDB.StoredProcedures If oProc.SystemObject = False Then ''262150= SQLDMOScript_ObjectPermissions + SQLDMOScript_PrimaryObject + SQLDMOScript_OwnerQualify oProc.Script(ScriptOptions, dbFolder & "\Stored Procedures\" & CleanFileName(oProc.Owner) & "_" & CleanFileName(oProc.Name) & ".sql") End If Next 'script out all the non-system views For Each oView In oDB.Views If oView.SystemObject = False Then ''262150= SQLDMOScript_ObjectPermissions + SQLDMOScript_PrimaryObject + SQLDMOScript_OwnerQualify oView.Script(ScriptOptions, dbFolder & "\Views\" & CleanFileName(oView.Owner) & "_" & CleanFileName(oView.Name) & ".sql") End If Next 'script out all the non-system user-defined functions For Each oUDF In oDB.UserDefinedFunctions If oUDF.SystemObject = False Then ''262150= SQLDMOScript_ObjectPermissions + SQLDMOScript_PrimaryObject + SQLDMOScript_OwnerQualify oUDF.Script(ScriptOptions, dbFolder & "\User-Defined Functions\" & CleanFileName(oUDF.Owner) & "." & CleanFileName(oUDF.Name) & ".sql") End If Next 'script out all the non-system tables For Each oTable In oDB.Tables If oTable.SystemObject = False Then ''262150= SQLDMOScript_ObjectPermissions + SQLDMOScript_PrimaryObject + SQLDMOScript_OwnerQualify oTable.Script(ScriptOptions_Tables, dbFolder & "\Tables\" & CleanFileName(oTable.Owner) & "_" & CleanFileName(oTable.Name) & ".sql") End If Next End If Next 'close it all out oServer.DisConnect() oServer = Nothing oFSO = Nothing Dts.TaskResult = ScriptResults.Success End Sub End Class
