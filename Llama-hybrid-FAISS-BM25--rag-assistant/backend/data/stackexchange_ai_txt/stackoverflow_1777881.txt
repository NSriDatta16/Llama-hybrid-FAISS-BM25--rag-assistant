[site]: stackoverflow
[post_id]: 1777881
[parent_id]: 51150
[tags]: 
I know this is very old now, but I just stumbled across it, and I know the answer. In the applications you've seen (and written) where bringing the dialog box to the foreground did not bring the main window up along with it, the developer has simply neglected to specify the owner of the dialog box. This applies to both modal windows, like dialog boxes and message boxes, as well as to modeless windows. Setting the owner of a modeless popup also keeps the popup above its owner at all times. In the Win32 API, the functions to bring up a dialog box or a message box take the owner window as a parameter: INT_PTR DialogBox( HINSTANCE hInstance, LPCTSTR lpTemplate, HWND hWndParent, /* this is the owner */ DLGPROC lpDialogFunc ); int MessageBox( HWND hWnd, /* this is the owner */ LPCTSTR lpText, LPCTSTR lpCaption, UINT uType ); Similary, in .NET WinForms, the owner can be specified: public DialogResult ShowDialog( IWin32Window owner ) public static DialogResult Show( IWin32Window owner, string text ) /* ...and other overloads that include this first parameter */ Additionally, in WinForms, it's easy to set the owner of a modeless window: public void Show( IWin32Window owner, ) or, equivalently: form.Owner = this; form.Show(); In straight WinAPI code, the owner of a modeless window can be set when the window is created: HWND CreateWindow( LPCTSTR lpClassName, LPCTSTR lpWindowName, DWORD dwStyle, int x, int y, int nWidth, int nHeight, HWND hWndParent, /* this is the owner if dwStyle does not contain WS_CHILD */ HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam ); or afterwards: SetWindowLong(hWndPopup, GWL_HWNDPARENT, (LONG)hWndOwner); or (64-bit compatible) SetWindowLongPtr(hWndPopup, GWLP_HWNDPARENT, (LONG_PTR)hWndOwner); Note that MSDN has the following to say about SetWindowLong[Ptr] : Do not call SetWindowLongPtr with the GWLP_HWNDPARENT index to change the parent of a child window. Instead, use the SetParent function. This is somewhat misleading, as it seems to imply that the last two snippets above are wrong. This isn't so. Calling SetParent will turn the intended popup into a child of the parent window (setting its WS_CHILD bit), rather than making it an owned window. The code above is the correct way to make an existing popup an owned window.
