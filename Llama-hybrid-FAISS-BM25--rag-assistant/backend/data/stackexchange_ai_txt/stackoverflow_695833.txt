[site]: stackoverflow
[post_id]: 695833
[parent_id]: 695811
[tags]: 
Writing too targeted test cases. Insufficient input variability testing of the Code Large number of artificial test cases executed. Not concentrating on the important test failures due to noise. Difficulty in assigning defects because many conditions from many components must interact for a line to execute. The worst side effect of having a 100% coverage goal is to spend a lot of the testing development cycle (75%+) hiting corner cases. Another poor effect of such a policy is the concentration of hitting a particular line of code rather than addressing the range of inputs. I don't really care that the strcpy function ran at least once. I really care that it ran against a wide variety of input. Having a policy is good. But having any extremely draconian policy is bad. The 100% metric of code coverage is neither necessary nor sufficient for code to be considered solid.
