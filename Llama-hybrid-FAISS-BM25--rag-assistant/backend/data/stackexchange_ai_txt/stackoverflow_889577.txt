[site]: stackoverflow
[post_id]: 889577
[parent_id]: 879061
[tags]: 
If you're looking for someone to point out the advantages/disadvantages of each as an explanation for their popularity, I think you're falling for a fallacy which is for some reason very common in technology – that popularity has something to do with some absolute measure of quality. The truth is a lot more bland – class-based OO is popular because Java uses classic OO, and Sun spent millions of dollars and a very long time building the popularity of Java – making sure people know it's used successfully in corporations, taught widely in universities, and on high school AP tests. Prototypal/classical OO are just different ways of organizing your ideas. You can implement either one in languages that don't support it natively ( Python and Java come to mind, and JavaScript on the other side). In classical OO, you define an abstract hierarchy of classes for your objects, and then actually work with instances of those classes. In prototypal inheritance, you create a hierarchy of object instances. Although I imagine it might be a bit heretical in both camps, I don't see a reason you couldn't mix the two...
