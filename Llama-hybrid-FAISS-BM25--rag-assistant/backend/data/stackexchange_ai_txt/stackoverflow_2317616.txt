[site]: stackoverflow
[post_id]: 2317616
[parent_id]: 
[tags]: 
Best way of organising load/save functions in terms of static/non-static

I have a class which defines a historical extraction on a database: class ExtractionConfiguration { string ExtractionName; time ExtractionStartTime; time ExtractionEndTime; // Should these functions be static/non-static? // The load/save path is a function of ExtractionName void SaveConfigruation(); void LoadConfiguration(); } These ExtractionConfigurations need to be saved to/loaded from disk. What is the best way of organising the save/load functions in terms of static/non-static? To me, it is clear that SaveConfiguration() should be a member function. However with LoadConfiguration(), does it make more sense to call ExtractionConfiguration newExtraction; newExtraction.LoadConfiguration(); and have a temporary empty instance or make the load function static static ExtractionConfiguration LoadConfiguration(string filename); and just call ExtractionConfiguration newExtraction = ExtractionConfiguration::LoadConfiguration(filename); which feels neater to me, but breaks the 'symmetry' of the load/save mechanism (is this even a meaningful/worthwhile consideration?). I suppose asking for the 'best' answer is somewhat naive. I am really trying to get a better understanding of the issues involved here. P.S. This is my first question on SO, so if I have not presented it correctly, please let me know and I will try and make the problem clearer.
