[site]: stackoverflow
[post_id]: 4573358
[parent_id]: 4573246
[tags]: 
here's an illustration of one alternative, this uses an objc category: /* File: Header A */ @interface MONViewController : NSViewController { unsigned anIvar; } @property (nonatomic, readonly) unsigned anIvar; - (id)initWithNibName:(NSString *)nibName bundle:(NSBundle *)bundle; - (void)dealloc; - (void)viewDidLoad; - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation; /* (continued) */ @end /* File: Header A or Header B, depending on how you want to organize it */ @interface MONViewController (EventCallbacks) - (IBAction)triviaButtonWasPressed:(id)sender; /* (continued) */ @end /* File: Imp A */ @implementation MONViewController - (id)initWithNibName:(NSString *)nibName bundle:(NSBundle *)bundle { /* ... */ } - (void)dealloc { /* ... */ } - (unsigned)anIvar { /* ... */ } - (void)viewDidLoad { /* ... */ } - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation { /* ... */ } /* (continued) */ @end /* File: Imp A or Imp B, depending on how you want to organize it */ @implementation MONViewController (EventCallbacks) - (IBAction)triviaButtonWasPressed:(id)sender { /* ... */ } /* (continued) */ @end fortunately, the compiler verifies that you've defined all your declarations when a category is defined, as is performed in a class. some things must be defined in the proper class implementation, such as protocols. be careful if you divide this into a ton of smaller files - your build times can really suffer. also, it's somewhat inevitable in this case (since your subclassing) but scalability issues in this regard should serve as reminders that your interfaces/classes are attempting to do too much, and should be divided into smaller components. good luck!
