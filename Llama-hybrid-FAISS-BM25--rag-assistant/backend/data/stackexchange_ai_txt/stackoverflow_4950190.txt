[site]: stackoverflow
[post_id]: 4950190
[parent_id]: 
[tags]: 
Complex taxonomy ORM mapping - looking for suggestions

In my project (ASP.NET MVC + NHibernate) I have all my entities, lets say Document s, described by set of custom metadata. Metadata is contained in a structure that can have multiple tags, categories etc. These terms have the most importance for users seeking the document they want, so it has an impact on views as well as underlying data structures, database querying etc. From view side of application, what interests me the most are the string values for the terms. Ideally I would like to operate directly on the collections of strings like that: class MetadataAsSeenInViews { public IList Categories; public IList Tags; // etc. } From model perspective, I could use the same structure, do the simplest-possible ORM mapping and use it in queries like "fetch all documents with metadata exactly like this". But that kind of structure could turn out useless if the application needs to perform complex database queries like "fetch all documents, for which at least one of categories is IN (cat1, cat2, ..., catN) OR at least one of tags is IN (tag1, ..., tagN) ". In that case, for performance reasons, we would probably use numeric keys for categories and tags. So one can imagine a structure opposite to MetadataAsSeenInViews that operates on numeric keys and provide complex mappings of integers to strings and other way round. But that solution doesn't really satisfy me for several reasons: it smells like single responsibility violation, as we're dealing with database-specific issues when just wanting to describe Document business object database keys are leaking through all layers it adds unnecessary complexity in views and I believe it doesn't take advantage of what can good ORM do Ideally I would like to have: single, as simple as possible metadata structure (ideally like the one at the top) in my whole application complex querying issues addressed only in the database layer (meaning DB + ORM + at less as possible additional code for data layer) Do you have any ideas how to structure the code and do the ORM mappings to be as elegant, as effective and as performant as it is possible?
