[site]: stackoverflow
[post_id]: 1751809
[parent_id]: 1745000
[tags]: 
@Nick said: "This is a pretty big omission since a lot hosting sites only offer one repo. With svn I can effectively have as many repos as I want by only taking one branch from the main one. The subrepos sound like a hack." Subrepos (aka submodules) are not as ideal as "narrow clones" its true. But at least for having many distinct projects in one hosting site's repository, you can have multiple code-bases in one repository. This won't allow you to slice up different sections of one repository / sub-directories of a project , but it will let you manage multiple projects. What you do is have lots of named branches each rooted at the empty (or null) changeset (i.e. they have no common root revision). It can get a little messy to track the branches but it does work. For example: hg init hg branch project-1 # Changes, commits, repeated as needed hg update null hg branch project-2 # Changes, commits, repeated as needed You now can see all your projects: > hg branches project-2 5:42c2beffe780 project-1 2:43fd60024328 The projects are unrelated (though you can merge them): > hg debugancestors -1:000000000000 Most usefully: you can clone only the project you want, and the others won't mix in: > hg clone -r project-1 The graph for this would look something like this ( hg log -qG ): @ 5 | project-2 | {tip} | o 4 | project-2 | o 3 | project-2 o 2 | project-1 | o 1 | project-1 | o 0 | project-1 You can do this for as many projects as you need, listing each with hg branches , and jumping between them with hg update . This takes some care, because named branch support isn't perfect. It isn't always intuitive for one thing (read about hg clone -u in Mercurial 1.4 -- the pre-1.4 behavior is surprising when cloning). But it does work.
