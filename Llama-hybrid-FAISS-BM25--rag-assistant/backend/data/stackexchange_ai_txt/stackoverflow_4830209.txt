[site]: stackoverflow
[post_id]: 4830209
[parent_id]: 4830076
[tags]: 
One of the problems with becoming proficient in J2EE is that it's a "moving target" - There are new technologies all the time, the APIs are constantly changing, and in addition to knowing the Sun APIs, you have to be aware of a lot of third-party tools that are now almost an integral part of the stack. Like Hibernate, Spring, Hadoop, and all those things. A J2EE resume or job listing is often recognizable by the Buzzword Soup which often spans lines over lines over lines. For novices, this brings three risks: - Learning stale technologies. - Learning specific vendor solutions without understanding the alternatives and the principles behind them. - You can learn a lot of tools but never know how to mix them together. - Never getting a chance to practice programming and developing a "programmer instinct". You didn't mention much about your experience, so it is not clear how much core Java experience you have or how comfortable you are in non-architecting tasks. I would personally encourage you to make sure you're really good at these, and then start integrating newer J2EE technologies into your day-to-day coding, rather than merely studying a lot of tool descriptions without actually using them in context. IMHO, that's the only way to build knowledge and to really have an architectural sense. Just make sure to keep current, and be willing to take risks and try new technologies if you can justify it to yourself over what you are currently using. Let's take AJAX for example or a messaging architecture. Try to write down a description of the differences between two vendors or frameworks. Now, try to use the low-level constructs like XmlRpc or GWT or servlets for a while, before you focus on mastering a supposed all-in-one-solution. Similarly, play with sockets or the JMS APIs before you rely on a messaging architecture, etc. Play a little with SQL before you hit hibernate or other ORMs. Now see if you can make a more compelling argument for the differences between frameworks. I can't tell you how many J2EE architects I know who failed job interviews because they couldn't solve a simple FizzBuzz problem.
