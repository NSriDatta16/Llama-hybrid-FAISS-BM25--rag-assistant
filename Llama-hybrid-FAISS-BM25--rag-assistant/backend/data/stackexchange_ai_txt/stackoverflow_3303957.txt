[site]: stackoverflow
[post_id]: 3303957
[parent_id]: 
[tags]: 
Proper Approach to Unit testing a "complex" application service

I have an application service (ie. large method) responsible for coordinating the interaction between several business objects. Essentially it takes a DTO from one system which contains customer information and an invoice, and translates it and imports it into a different system based on various business rules. public void ProcessQueuedData() { var queuedItems = _importServiceDAL.LoadQueuedData(); foreach (var queuedItem in queuedItems) { var itemType = GetQueuedImportItemType(queuedItem); if (itemType == QueuedImportItemType.Invoice) { var account = _accountDAL.GetAccountByAssocNo(queuedItem.Assoc); int agentAccountID; if (!account.IsValid) { agentAccountId = _accountDAL.AddAccount(queuedItem.Assoc); } else { agentAccountId = account.AgentAccountID; } /// Do additional processing TBD } } } For the unit tests, is it correct to assume the entire process within the service should be tested on a granular step by step basis, similar to the following? ImportService_ProcessQueuedData_CallsDataAccessLayer_ToLoadQueue ImportService_ProcessQueuedData_WithQueuedItemToProccess_ChecksIfAccountExists ImportService_ProcessQueuedData_WithInvoice_CallsDALToCreateAccountIfOneDoesNotExist Here's a typical test: [TestMethod()] public void ImportService_ProcessQueuedData_WithInvoice_CallsDALToCheckIfAgentAccountExists() { var accountDAL = MockRepository.GenerateStub (); var importServiceDAL = MockRepository.GenerateStub (); importServiceDAL.Stub(x => x.LoadQueuedData()) .Return(GetQueuedImportItemsWithInvoice()); accountDAL.Stub(x => x.GetAccountByAssocNo("FFFFF")) .IgnoreArguments() .Return(new Account() { AgentAccountId = 0 }); var importSvc = new ImportService(accountDAL, importServiceDAL); importSvc.ProcessQueuedData(); accountDAL.AssertWasCalled(a => a.GetAccountByAssocNo("FFFFF"), o => o.IgnoreArguments()); accountDAL.VerifyAllExpectations(); } My problem is that I end up doing so much setup in each of these tests it is becoming brittle. Is this the correct approach, and if so what are some pointers to avoid duplicating all of this setup within each granular test?
