[site]: stackoverflow
[post_id]: 1026997
[parent_id]: 1026928
[tags]: 
Are you talking about Factory Method or Abstract Factory? The basic problem that both solve is letting clients specify the exact class that framework code constructs. For example, if you provide an interface, that clients can implement, and then in your code have something like: IMyInterface x = new ConcreteClass(); There is no way for clients to change the exact class that was created without access to that code. A Factory Method is a virtual method that constructs a concrete class of a specific interface. Clients to your code can provide an object that overrides that method to choose the class they want you to create. It might look like this in your code: IMyInterface x = factory.Create(); factory was passed in by the client, and implements an interface that contains Create() -- they can decide the exact class. Abstract Factory should be used if you have hierarchies of related objects and need to be able to write code that only talks to the base interfaces. Abstract Factory contains multiple Factory Methods that create a specific concrete object from each hierarchy. In the Design Patterns book by the Gang of Four, they give an example of a maze with rooms, walls and doors. Client code might look like this: IRoom r = mazeFactory.CreateRoom(); IWall nw = mazeFactory.CreateWall(); IWall sw = mazeFactory.CreateWall(); IWall ew = mazeFactory.CreateWall(); IWall ww = mazeFactory.CreateWall(); r.AddNorthWall(nw); r.AddSouthWall(sw); r.AddEastWall(ew); r.AddWestWall(ww); (and so on) The exact concrete walls, rooms, doors can be decided by the implementor of mazeFactory, which would implement an interface that you provide (IMazeFactory). So, if you are providing interfaces or abstract classes, that you expect other people to implement and provide -- then factories are a way for them to also provide a way for your code to construct their concrete classes when you need them.
