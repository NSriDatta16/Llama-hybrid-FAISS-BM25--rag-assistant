[site]: stackoverflow
[post_id]: 3014420
[parent_id]: 3013728
[tags]: 
Structure mapping tricks like this cannot work without the P/Invoke marshaller. The internal organization of a structure is not discoverable. The JIT compiler readily takes advantage of this, it swaps members if that produces a smaller memory size for the structure. Only a [StructLayout] can nail it down. There's another goody in the Microsoft.VisualBasic namespace that makes this easy to do. The TextFieldParser class can readily convert strings like this with a single call. For example: using System; using System.IO; using Microsoft.VisualBasic.FileIO; // NOTE: add reference to Microsoft.VisualBasic class Program { static void Main(string[] args) { var strm = new StringReader("John Doe New York Test Comment"); var parse = new TextFieldParser(strm); parse.TextFieldType = FieldType.FixedWidth; parse.SetFieldWidths(16, 10, 12); foreach (var field in parse.ReadFields()) Console.WriteLine(field.Trim()); Console.ReadLine(); } } Note that the original string you posted didn't match the structure declaration, I had to modify the field widths. Also note that TextFieldParser takes any stream, it doesn't have to be a string stored in a StringReader. A StreamReader that reads a file would be the more typical use.
