[site]: datascience
[post_id]: 5206
[parent_id]: 5205
[tags]: 
This is more of a general regex question, rather than pandas specific. I would first create a function that extracts the numbers you need from strings, and then use the pandas.DataFrame.apply function to apply it on the pandas column containing the strings. Here is what I would do: import re def parseNumbers(salary_txt): return [int(item.replace(',','')) for item in re.findall('£([\d,]+)',salary_txt)] #testing if this works testcases = ['£23,000 to £100,000','£34,000','£10000'] for testcase in testcases: print testcase,parseNumbers(testcase) Here, I just used re.findall , which finds all patterns that look like £([\d,]+) . This is anything that starts with £ and is followed by an arbitrary sequence of digits and commas. The parenthesis tells python to extract only the bit after the £ sign. The last thing I do is I remove commas, and parse the remaining string into an integer. You could be more elegant about this I guess, but it works. using this function in pandas df['salary_list'] = df['salary'].apply(parseNumbers) df['minsalary'] = df['salary'].apply(parseNumbers).apply(min) df['maxsalary'] = df['salary'].apply(parseNumbers).apply(max) Checking if this all works: import pandas df = pandas.DataFrame(testcases,columns = ['salary']) df['minsalary'] = df['salary'].apply(parseNumbers).apply(min) df['maxsalary'] = df['salary'].apply(parseNumbers).apply(max) df salary minsalary maxsalary 0 £23,000 to £100,000 23000 100000 1 £34,000 34000 34000 2 £10000 10000 10000 The advantages of moving the parsing logic to a separate function is that: it may be reusable in other code it is easier to read for others, even if they aren't pandas experts it's easier to develop and test the parsing functionality in isolation
