[site]: stackoverflow
[post_id]: 2291471
[parent_id]: 2291352
[tags]: 
What does this test look like? A test has 3 parts. it sets up a context it performs an action it makes an assertion that the action did what it was supposed to do How do you figure out what test will best represent the feature you want to create? Tests are not based on features (unless you are talking about a high level framework like cucumber ), they are based on "units" of code. Typically a unit is a function, and you will write multiple tests to assert all possible behaviors of that function are working correctly. Can someone give an example? It really varies based on the framework you use. Personally, my favorite is shoulda, which is an extension to the ruby Test::Unit framework Here is a shoulda example from the readme. In the case of a BDD framework like this, contextual setup happens in its own block class UserTest Like if I make a logout button feature to a web application then would the test be hitting the page looking for the button? or what? There are 3 main types of tests. First you have unit tests (which is what people usually assume you are talking about when you talk about TDD testing). A unit test tests a single unit of work and nothing else. This means that if your method usually hits a database, you make sure that it doesn't actually hit that database for the duration of the test (using a technique called "mocking"). Next, you have integration tests. An integration test usually involves interaction with the infrastructure, and are more "full stack" testing. So from your top level API, if you have an insert method, you would go through the full insert, and then test the resulting data in the database. Because there is more setup in these sorts of tests, they shouldn't really be run from developer machines (it is better to automate these on your build server) Finally, you have UI testing. This is the most unreliable, and requires a UI scripting framework like Selenium or Waitr to automate clicking around your UI. Don't go crazy with this sort of testing, because these tests are notoriously fragile (a small change can break them), and they wont catch whole classes of issues anyways (like styling).
