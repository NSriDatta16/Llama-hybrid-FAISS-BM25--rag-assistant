[site]: stackoverflow
[post_id]: 4153842
[parent_id]: 4153517
[tags]: 
No, that is not possible via code. Android just implements the OnClickListener for you when you define the android:onClick="someMethod" attribute. Those two code snippets are equal, just implemented in two different ways. Code Implementation Button btn = (Button) findViewById(R.id.mybutton); btn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { myFancyMethod(v); } }); // some more code public void myFancyMethod(View v) { // does something very interesting } Above is a code implementation of an OnClickListener . And this is the XML implementation. XML Implementation In the background, Android does nothing else than the Java code, calling your method on a click event. Note that with the XML above, Android will look for the onClick method myFancyMethod() only in the current Activity. This is important to remember if you are using fragments, since even if you add the XML above using a fragment, Android will not look for the onClick method in the .java file of the fragment used to add the XML. Another important thing I noticed. You mentioned you don't prefer anonymous methods . You meant to say you don't like anonymous classes .
