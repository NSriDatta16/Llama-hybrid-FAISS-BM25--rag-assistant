[site]: stackoverflow
[post_id]: 5310178
[parent_id]: 5309397
[tags]: 
IMO the biggest problem that you may face is that you will underestimate the cost of refactoring or of implementing new features. For example replacing that class with a new one that works as a proxy to a remote may look simple stuff, but then you may face problems because the application ended up using internals that are hard to change for remote use. May be taking shortcuts saved a little time but you'll end up giving back this time (and more) for free to angry customers because of this underestimation. Another serious problem is that a program with a clear interface that however has been poked through doing nasty things with internal stuff just stinks. This is a problem in se, but also a problem because whoever is going to see that code will feel that's ok to do similar things for future changes especially when under time pressure. This in the long term will change the program in a bowl of rotten segfaulting spaghetti that anyone will fear to touch because of unexplainable ripple side effects. A description of this " broken window " effect is in the nice book The Pragmatic Programmer.
