[site]: datascience
[post_id]: 47895
[parent_id]: 
[tags]: 
getting the weights of intermediate layer in keras

I have an image dataset 376 classes each class has 15 pictures corresponds to a person. I would like to get the feature vector that corresponds to each person. What I have done is, after I compiled the model I then used this link as a reference to get the weights of the last convolutional layer. However, when I do this, I get the error: InvalidArgumentError: You must feed a value for placeholder tensor 'conv_layer' with dtype float and shape [?,19,19,360] How can I resolve this issue? Here is the code that I have done so far: train_data = np.array(train_data, dtype=np.float32) test_data = np.array(test_data, dtype=np.float32) train_data = train_data / 180 # to make the array values between 0-1 test_data = test_data / 180 train_label = keras.utils.to_categorical(train_label, 376) test_label = keras.utils.to_categorical(test_label, 376) # CNN MODEL model = Sequential() model.add(Conv2D(180, (3, 3), padding='same', input_shape=(180, 180, 3), activation="relu")) #180 is the number of filters model.add(Conv2D(180, (3, 3), activation="relu")) model.add(MaxPooling2D(pool_size=(3, 3))) model.add(Dropout(0.25)) model.add(Conv2D(360, (3, 3), padding='same', activation="relu")) model.add(Conv2D(360, (3, 3), activation="relu")) conv_layer = model.add(MaxPooling2D(pool_size=(3, 3))) model.add(Dropout(0.25)) flatten_layer = model.add(Flatten()) model.add(Dense(496, activation="relu")) model.add(Dropout(0.5)) dense_layer = model.add(Dense(376, activation="softmax")) #compiling the model model.compile( loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'] ) model.fit( train_data, train_label, batch_size=32, epochs=40, verbose = 2 , validation_split=0.1, shuffle=True) # getting intermediate layer weights get_layer_output = K.function([model.layers[0].input], [model.layers[11].output]) layer_output = get_layer_output([conv_layer])[0]
