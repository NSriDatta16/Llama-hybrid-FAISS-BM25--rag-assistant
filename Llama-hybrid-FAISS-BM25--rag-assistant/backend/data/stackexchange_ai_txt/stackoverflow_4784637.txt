[site]: stackoverflow
[post_id]: 4784637
[parent_id]: 
[tags]: 
Java deployment with Ant: help with versioning, testing etc towards a better build

I have during the past months developed a Java project, a command-line experimental analysis tool. As I don't have a CS-major in the background (Mathematics/Engineering instead) I have had the pleasure of battling through and learning concepts such as project management & POM, version control (SVN) and build scripts (ANT). The reason why I am describing this is to portray the fact that most of these concepts don't come naturally to me, unlike algorithms and formulas (I guess one could say that I have learned to be a " coder " not a " programmer " if such a distinction is valid/accepted). That being said, I have managed to make things work for the most part, however rather incomplete/ugly at times. As I would like to learn and improve along the way, I thought of asking here on SO. The ANT file that I use today, created with some help over time, is attached below. Given the situation, I'd like to...: Question 1: ... add version control to some extent so when I supply the software as a jar file to users worldwide, both they and I can have a way of tracking potential problems and development. Version number attached to the name of the JAR file (for ex: prog-0.1.5.jar ), along with some sort of output to the user at runtime would be ideal. I was told that this was possible via ANT but I have not had any luck so far. Any tips or suggestions? I have also received the following code snippet for this purpose, but I am not sure why/how it would work in my project as I have not declared these attributes/properties... EDIT: Just to clarify my long chunks of questions, I would like to standardize the version controlling in my project. I might be using the term in a wrong way, but the way version control is done right now is: I do regular commits to an SVN server to track changes (and also to have backups) I manually try to keep track of the different versions of software To give an example of what I want to accomplish regarding versioning: I would like to avoid manual version numbering; that's just so prone to errors... I would like to keep track of the different builds, at the very least locally, using their version numbers, so at all times I have older build if I happen to need to investigate an older build. (I now do ant dist-clean; ant dist for new builds which just overwrite the old JARs) It would be preferable if the version number could be incorporated into the build, so a informative line (e.g. "You are now running My_Awesome_software v:0.1.3") when the JARs are run To accomplish the above with SVN as version tracking, and ANT as a build tool. I am not sure if I have the liberty to change the version tracking on our server, and Maven is just not an option at this stage. It appears to be more of a problem to learn mid-stream than whatever benefits it might have... Question 2: ... look into unit testing. I have read a lot about unit testing being the holy grail of modern programming, and I have some distant memories of JUnit from university a few years back. I understand that in an ideal software development environment unit testing is absolutely critical, however I have no idea how unit tests should/could be implemented in my case; where the software has minimal user interface (a parameter file, and a couple of optional flags at runtime) and a LONG (read: hours) execution time in connection with the analysis. Given the situation is it still considered a bad practice to not have unit tests, if that's the case how should I go about reasoning when I structure my tests? I feel like the unit tests would typically be a couple of times larger, and execute even longer than the actual software if I tried to test most of the functions in the software. conclusions: I have been looking into this version numbering concept using ANT, I'll shortly summarize my findings for other who might run into the same question: Create a property file as @Kevin Stembridge mentioned below, e.g. build.properties. Mine looks like this: micro.version=5 build.number=5 major.version=0 minor.version=0 Import properties from this file with: Concat the desired numbering scheme to the jar name in the jar tag. See the code below. Unit testing is necessary, however complicated for a project like mine. I will look into it as the project develops. Thanks to everyone who have contributed somehow, I am choosing Kevin's answer as accepted as it's the only one that had direct influence on my solution here.
