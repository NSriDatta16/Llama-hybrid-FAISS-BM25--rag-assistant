[site]: stackoverflow
[post_id]: 1314996
[parent_id]: 1314875
[tags]: 
This is a pretty common mistake for people new to object-oriented programming. You don't want to extend a class just because it has some functions that you need. In fact, you may want to avoid extending classes at all while you're getting started. Although most intros to OOP make a big deal out of inheritance, I would steer clear for the moment. Instead, think of how you can group together functions in terms of the way they're used. For example, say you're managing users. You need to keep track of user information, add users, delete them, etc. You could create classes like this: class User { function getName()... function getID()... } class UserAdmin { function addUser(User $user)... function getUser($id)... function deleteUser($id)... } These classes are organized according to concepts, not according to what functions you need to call. When you do need reusable functions for things like database access, you'll generally want another separate object doing the work. So instead of having your UserAdmin class extend a Database class to format its SQL: // wrong class UserAdmin extends Database { function getUser($id) { $this->openConnection(); $this->runQuery("select * from users where id = {1}", $id); } } ... you can just use the Database class from within your UserAdmin class: // right class UserAdmin { function getUser($id) { $db = new Database(); $db->openConnection(); $db->runQuery("select * from users where id = {1}", $id); } } class Database { function openConnection() ... function runQuery() ... } Initially it will seem like more work, but it keeps your various classes independent. That makes them easier to write, maintain, and test.
