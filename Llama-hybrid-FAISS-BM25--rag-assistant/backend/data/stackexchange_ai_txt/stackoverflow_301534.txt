[site]: stackoverflow
[post_id]: 301534
[parent_id]: 301442
[tags]: 
We have created a mechanism consisting of the following parts: minfication (for js and css) aggregation in packages caching (http status 304 stuff) sending out original files for in development mode It may be too much for your needs, but as to answer your question what others do, here is how it works: A request comes in at, say, /css.aspx?package=core We do a lookup of the packagename in a xml configuration file (which for instance declares that the package "core" contains the files /js/mootools.js and /js/swfobject.js) We check if minification is enabled. For instance, in a development environment we don't want the minified js contents to be served out, but instead write the original files. For js this is done by document.writes of script includes, and for css we write import rules. If minification is required (in production env) we do a check on the if-modified-since header from the request. If this client already has the minified contents, we send http header 304. If the client does require the contents, we check if we have minified contents in cache and serve that. Otherwise, we minify and send the result. All this is broken up in separate services. There is a cache service injected in the jsminificationwriter service. This makes use of the original minificationservice that solely takes care of the minification rules. What's nice in this approach is: It forces our development teams to think in js/css "packages" and therefore properly split up functionality and distribute them over the pages that require them. During development you are perfectly able to debug, getting proper files and line numbers. You can hook up any other minification service implementation such as YUI and so forth. JsMin was only our first take. It's a general approach that works for different content types. Hope this helps. I can post some code fragments to illustrate it more if you like.
