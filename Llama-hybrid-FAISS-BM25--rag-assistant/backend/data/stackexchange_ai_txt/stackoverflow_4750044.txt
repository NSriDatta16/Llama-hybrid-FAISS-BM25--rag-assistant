[site]: stackoverflow
[post_id]: 4750044
[parent_id]: 4749876
[tags]: 
Loads of good examples out there: http://blogs.msdn.com/b/avip/archive/2010/12/06/the-simplest-way-to-do-design-time-viewmodels-with-mvvm-and-blend.aspx http://karlshifflett.wordpress.com/2009/10/28/ddesigninstance-ddesigndata-in-visual-studio-2010-beta2/ It's very simple. Lots of other resources on google if you need them Edit based on comment 2. Is there a way for it to return service data while in design mode itself? Possibly but I've not seen it. In my mind you probably wouldn't want to do this for many reasons. You may get a delay before your data shows up which could get quite frustrating if you need to make a lot of small changes. You have a reliance on services being available which is going to make you even more unproductive if they ever go down. You or a designer doesn't have any control over changing what is displayed on an ad-hoc basis. At least using the sample data system you can change values to test different scenarios without having to get services data changed. 3. Does the designer using Expression Blend need to know what properties of the observable collection {persons} will be bound to the list box? The designer/developer workflow is a tricky one. Obviously each project will be different, but having just finished a design heavy wpf project I can tell you that our designers want as little to do with Blend as possible. The workflow that has worked for us, is for the developers (we have a front end team that work at the view/viewmodel level and backend team that build up the model and service layer) to build up the views as best they can. That means building the layout, composing the controls, adding most of the design and hooking up the bindings. We then had a designer who had experience in using Blend (there aren't many) delve in and tweak the designs to get them exactly as they wanted. This way they had very little to do with the main brunt of the work and we could keep clean and organised views (something few designers would have the experience to do). The designers didn't really have to know anything about domain objects. It all worked very well once we'd worked out how it was going to work. Having the designers build up the views themselves would have been a nightmare in my opinion... and not something they'd have enjoyed either.
