[site]: stackoverflow
[post_id]: 5514158
[parent_id]: 5514046
[tags]: 
What level of granularity is acceptable in a stable of services without sacrificing performance? Individual entities. As described by the consultant. Am I being too skeptical of the performance hits we'll take implementing all our entities as services? Yes. Way too skeptical. A decent framework can optimize some of these requests so that they don't involve a lot of network overheads. As with SQL databases, the problems are largely solved. You'll find that the underlying applications that you're presenting as services are the bottlenecks. The SOA layer is largely plumbing. The bits still need to move through the pipes, the SOA layer just organizes them more intelligently than most of the alternatives. Should services only be implemented when they are needed, with the "preparation" focus instead going into designing the business layer for the probability of services later being dropped on top of it? Yes. That's what "Agile" means. Find a user story. Build just the services (and entities) for that story. You will have some significant overhead for the first few stories in getting your SOA framework all squared away and deployable as a simple, repeatable release step. Never do extensive "preparation" for things you "may" need in some improbable future. Read up on Agile and how to prioritize a backlog.
