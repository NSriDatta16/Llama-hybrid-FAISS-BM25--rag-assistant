[site]: stackoverflow
[post_id]: 4697275
[parent_id]: 2228897
[tags]: 
IMHO, checked exceptions might be a good thing, but a bigger issue is that most exception hierarchies are extremely broken. The problem is that there's nothing inherent in an exception which indicates whether it indicates a problem beyond "the function call didn't work". For example, if one calls a LoadDocument method and some type of exception gets thrown, there's no nice way of telling whether the correct thing to do is report that the file couldn't be loaded, but everything else is fine, or whether it would be better to shut down the program in an orderly fashion, or for that matter whether doing anything other than an abrupt quit would risk trashing the file system. Checked exceptions could be nice if they carried an implication that the state of everything was just fine except to the extent implied by the fact that the method didn't work. Unfortunately, no system I've seen has a useful hierarchy of exceptions to distinguish that. Since exceptions are organized by what went wrong, rather than by the implications regarding system state, there's no good way to know what exceptions should be caught and wrapped, and what exceptions should bubble up. Actually, what might be best in many cases would be a means of having multiple exceptions thrown at once, with a bundle of exceptions propagating up the stack until all have been caught. I wonder if any system accommodate such a thing?
