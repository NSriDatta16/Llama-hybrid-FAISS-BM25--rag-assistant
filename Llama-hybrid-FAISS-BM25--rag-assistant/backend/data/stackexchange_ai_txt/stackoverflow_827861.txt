[site]: stackoverflow
[post_id]: 827861
[parent_id]: 827535
[tags]: 
All the other answers are technical discussions on how to implement an iterator over a tree structure. However, as I understand your question, you seem to be having trouble with comprehending the mechanics of the concept of tree traversal, and not just the implementation. In other words, you don't "grok" tree traversal. What will probably help more than anything is to get a good pseudo-code algorithm for traversing a binary tree, a pencil, a sheet of paper, and work out an example. Build a simple binary tree and then traverse it by mechanically following the pseudo code yourself. You should probably use a second sheet of paper for writing out the stack . That is, the state of every function that is in the middle of being called because it is waiting for a sub-function to return. Keep in mind, while you are doing this, that a tree is a very elegant structure. It can seem quite complex, but at every node it is simple. To perform an operation on all elements in a tree, you merely perform that operation at the root of the tree and then have the operation call itself on each child of that root, which are themselves roots of sub-trees. Working out an example yourself will go a long ways towards getting your mind to understand and embrace recursion. Don't be bewildered if you find it hard. Recursion is weird. It is a hard concept at first, but it is necessary to understand and work with trees. Here is an example (ASCII art) tree you could use to start: F / \ / \ D H / \ / \ B E G I / \ A C And a simple pseudo code algorithm that you can use for writing all letters in a correct in-order traversal. procedure traverse(node) if node is not null: traverse(node.left) write node.letter traverse(node.right) else: do nothing You may even start out with simpler trees. What if the tree only consisted of nodes D, F, and H? What if it was only F? Null? Try those simple examples and work up to the bigger tree. By the time you have worked out how to do this consistently and correctly, you will not only have a really good feeling for what is going on in the iterator implementation, you will have a much better appreciation for the power of recursion.
