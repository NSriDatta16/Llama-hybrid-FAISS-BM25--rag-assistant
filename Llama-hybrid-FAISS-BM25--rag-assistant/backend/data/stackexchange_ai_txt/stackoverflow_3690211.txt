[site]: stackoverflow
[post_id]: 3690211
[parent_id]: 3690077
[tags]: 
Making API calls from views is not so good idea. You should probably create another module, that does the job. ie. when I make Facebook apps I create publish.py file to store all "publish to live stream" calls. Functions in that module are named based on when they should be called. Ie.: # publish.py def authorise_application(user): # API call "User joined app." def post_anwser(anwser): # API call "User posted anwser to quiz". Then your views are very clean: # views.py def post_anwser(request): ... if form.is_valid(): form.save() publish.post_anwser(form.instance) When you have your code organised that way, you can create decorator for ignoring exceptions: # publish.py def ignore_api_error(fun): def res(*args, **kwargs): try: return fun(*args, **kwargs): except someservice.ApiError: return None return res @ignore_api_error def authorised_application(user): # API call "User joined app." @ignore_api_error def posted_anwser(user, anwser): # API call "User posted anwser to quiz". Also you can create function, that is not "ignored" by default, and add ignore code in view: # publish.py def some_function(user, message): pass # views.py def my_view(): ... publish.ignore_api_error(publish.some_function)(user, message) ...
