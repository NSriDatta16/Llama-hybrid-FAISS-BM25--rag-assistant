[site]: stackoverflow
[post_id]: 5366664
[parent_id]: 
[tags]: 
Functionality changes after Activity is restarted

I have a puzzle game where pieces are dragged around the screen but can not overlap. If they attempt to overlap, their position is changed back to where they were not overlapping and the UI is redrawn with invalidate(). This is working well except when the activity is destroyed and rebuilt like when closing the app and restarting it or when the orientation is changed. What seems to happen is that the position variables that I use for collisions (x,y,right,bottom, etc.) are not reset to how they were initialized in the constructor. Pieces collide with invisible objects, snap to seemingly random positions, or move erratically. The only ways to fix it are to manually kill the app (like with a task killer) or re-install it. Then it will work fine until the game activity is created a second time. What am I doing wrong? Any ideas? Here's how the piece are added in the onCreate() inside my GameView class: Pieces redtiki = new Pieces(this,0,0,R.drawable.tikired); ... board.addView(redtiki); And this is a portion of my Pieces class: public class Pieces extends View{ private int x; private int y; private int width; private int height; private int right; private int bottom; private int initialX; private int initialY; private Bitmap sizedBitmap; private Bitmap sourceBitmap; private int boardSize = 6; public static ArrayList aPieces = new ArrayList (); //private final Paint mPaint = new Paint(); public Pieces(Context context, int x, int y, int img){ super(context); this.x = x; this.y = y; sourceBitmap = BitmapFactory.decodeResource(getResources(), img); aPieces.add(this); initialX=x; initialY=y; } private void sizePiece(){ int scaledWidth; int scaledHeight; int h = sourceBitmap.getHeight(); int w = sourceBitmap.getWidth(); if (h>w){ scaledWidth = 1; }else if (w>h){ scaledWidth = w/h; }else{ scaledWidth = 0; } if (h>w){ scaledHeight = h/w; }else if (w>h){ scaledHeight = 1; }else{ scaledHeight = 0; } int dstWidth = (((((View) getParent()).getWidth())*scaledWidth)/boardSize)-1;//TODO make sure that -1 is necessary for int dstHeight = (((((View) getParent()).getHeight())*scaledHeight)/boardSize)-1;//fitting all pieces on the board sizedBitmap = Bitmap.createScaledBitmap(sourceBitmap, dstWidth, dstHeight, true); width = sizedBitmap.getWidth(); height = sizedBitmap.getHeight(); right = x+width; bottom = y+height; } @Override protected void onDraw(Canvas canvas) { super.onDraw(canvas); sizePiece(); canvas.drawBitmap(sizedBitmap, x, y, null); } @Override public boolean onTouchEvent(MotionEvent event){ float eventX = event.getX(); float eventY = event.getY(); switch (event.getAction()) { case MotionEvent.ACTION_DOWN: //check if touch is on piece if (eventX > x && eventX y && eventY height){ for (Pieces piece : aPieces) { //if object equals itself in array, skip to next object if(piece==this){ continue; } //check if there the possibility for a horizontal collision if(this.isAllignedHorizontallyWith(piece)){ //check for and handle collisions while moving left if(this.isRightOf(piece)){ if(eventX>piece.right+(width/2)){ x = (int)(eventX-(width/2)); //move normally /*for(Pieces piece2 : aPieces){ if(this.isAllignedHorizontallyWith(piece2)){ if(this.isLeftOf(piece2)){ if(eventX width){ for (Pieces piece : aPieces) { //if object equals itself in array, skip to next object if(piece==this){ continue; } //check if there the possibility for a vertical collision if(this.isAllignedVerticallyWith(piece)){ //check for and handle collisions while moving up if(this.isBelow(piece)){ if(eventY>piece.bottom+(height/2)){ y = (int)(eventY-(height/2)); //move normally continue; }else{ y = piece.bottom+1; } } //check for and handle collisions while moving down if(this.isAbove(piece)){ if(eventY
