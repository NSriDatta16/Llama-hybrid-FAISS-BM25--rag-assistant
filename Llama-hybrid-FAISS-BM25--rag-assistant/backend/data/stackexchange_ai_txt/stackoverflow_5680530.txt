[site]: stackoverflow
[post_id]: 5680530
[parent_id]: 
[tags]: 
Using #pragma detect_mismatch to ensure a DLL uses the correct statically linked library

I have a static S.lib that is used by my D.dll. I'm trying to use #pragma detect_mismatch to make sure that both were compiled under the same release or debug settings. I've followed Holger Grund's instructions here http://boost.2283326.n4.nabble.com/Boost-and-Microsoft-s-SECURE-SCL-td3025203.html dumpbin on S.lib shows: Linker Directives ----------------- /FAILIFMISMATCH:"COMPILED_DEBUG=1" /INCLUDE:_dll_impl_interface_mismatch_check /DEFAULTLIB:"MSVCRTD" /DEFAULTLIB:"OLDNAMES" I compile D.dll successfully, which should not happen. dumpbin on D.dll's D.lib shows: Linker Directives ----------------- /FAILIFMISMATCH:"COMPILED_DEBUG=2" /INCLUDE:_dll_impl_interface_mismatch_check /DEFAULTLIB:"uuid.lib" /DEFAULTLIB:"uuid.lib" /FAILIFMISMATCH:"_MSC_VER=1600" /FAILIFMISMATCH:"_ITERATOR_DEBUG_LEVEL=2" /DEFAULTLIB:"msvcprtd" /DEFAULTLIB:"MSVCRTD" /DEFAULTLIB:"OLDNAMES" Any help would be greatly appreciated. EDIT: I accidentally defined the symbol 'dll_impl_interface_mismatch_check' in BOTH my static library and my consuming DLL. This meant that the symbol was not looked for in the static library S.lib, and the mismatch directive was never found. I think.
