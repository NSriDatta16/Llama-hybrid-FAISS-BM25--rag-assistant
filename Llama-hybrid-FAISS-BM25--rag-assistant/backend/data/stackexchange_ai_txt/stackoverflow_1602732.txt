[site]: stackoverflow
[post_id]: 1602732
[parent_id]: 
[tags]: 
how to improve natural sort program for decimals?

I have std::strings containing numbers in the leading section that I need to sort. The numbers can be integers or floats. The vector sort was not optimal, I found the following natural sort program which was much better. I still have a small issue with numbers smaller than zero that do not sort just right. Does anyone have a suggestion to improve? We're using Visual Studio 2003. The complete program follows. TIA, Bert #include #include #include using namespace std; class MyData { public: string m_str; MyData(string str) { m_str = str; } long field1() const { int second = m_str.find_last_of("-"); int first = m_str.find_last_of("-", second-1); return atol(m_str.substr(first+1, second-first-1).c_str()); } long field2() const { return atol(m_str.substr(m_str.find_last_of("-")+1).c_str()); } bool operator rhs.field1()) { return false; } else { return field2() mylist; mylist.push_front(MyData("93.33")); mylist.push_front(MyData("0.18")); mylist.push_front(MyData("485")); mylist.push_front(MyData("7601")); mylist.push_front(MyData("1001")); mylist.push_front(MyData("0.26")); mylist.push_front(MyData("0.26")); // Sort the list mylist.sort(); // Dump the list to check the result for (list ::const_iterator elem = mylist.begin(); elem != mylist.end(); ++elem) { cout GOT: 0.26 0.26 0.18 93.33 485 1001 7601 EXPECTED: 0.18 0.26 0.26 93.33 485 1001 7601
