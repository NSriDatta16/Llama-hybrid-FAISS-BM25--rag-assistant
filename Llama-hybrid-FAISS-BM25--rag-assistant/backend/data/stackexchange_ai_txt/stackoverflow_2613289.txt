[site]: stackoverflow
[post_id]: 2613289
[parent_id]: 2594440
[tags]: 
I really doubt your caching solution is actually of any use. List cannot be indexed, a lookup in your list is therefore always a O(n) operation. Assuming you have profiled your application and know the database is your bottleneck, this is what you can do: In a database you can create indexes on your data, a lookup on them will exhibit O(log(n)) typically. You should create coverage indexes for queries that include your static data. Leave the frequently changing data non-indexed, because this would slow down inserts and updates due to necessary index updates. You can read upon SQL Server indexing here . Get your hands on the SQL Server Profiler and check which are the slowest queries and why. Proper indexes can get you huge performance gains (e.g. an index on your GroupId will cut down the lookup time from a full table scan O(n) to an index lookup of O(n/25), assuming there are 25 people per group). More than often, people write suboptimal SQL (returning unnecessary columns, Select N+1, cartesian joins). You should check that too. Before implementing a cache, I would make sure your database is really the culprit for your performance problems. Premature Optimization is the root of all evil, caching is hard to do right. Caching frequently changing data is not what caching is intended for.
