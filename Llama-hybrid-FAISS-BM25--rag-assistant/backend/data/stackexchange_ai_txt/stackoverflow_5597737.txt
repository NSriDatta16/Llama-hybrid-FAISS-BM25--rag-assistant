[site]: stackoverflow
[post_id]: 5597737
[parent_id]: 
[tags]: 
Updating Items in GridView through Code

I have a GV in which I want to Update my items. I am not using LDS or anything coz I m updating items which are stored in multiple databases. Here is the markup of my GV: '/> '/> '/> '/> '/> '/> '/> '/> And here is code I've been trying but I cant able to get the updated TEXT in my 's' variable: protected void Page_Load(object sender, EventArgs e) { if (Session["EntitySelected"] == null) { MessageBox.Show("Please Select an Entity first!"); Response.Redirect("~/FrontEnd/AgentList.aspx"); } int getEntity = Int16.Parse(Session["EntitySelected"].ToString()); this.Label3.Text = "You Selected Entity: " + (string)Session["EntitySelected"]; dbWebEnrollDataContext dt1 = new dbWebEnrollDataContext(); //This has PlanName! CommissionsV2DataContext cv1 = new CommissionsV2DataContext(); //Entity_Product_Point var td = from s in GetEntity() join r in GetPlanName() on s.Product_ID equals r.Product_ID where s.Entity_ID == getEntity select new { s.Product_ID, r.PlanName, s.HiCommissionOld, s.LowCommissionOld }; gvShowComm.DataSource = td; gvShowComm.DataBind(); } static IEnumerable GetEntity() { var context = new CommissionsV2DataContext(); return (from t in context.Entity_Product_Points select t).AsQueryable(); } static IEnumerable GetPlanName() { var context = new dbWebEnrollDataContext(); return (from t in context.PlanMasters select t).AsQueryable(); } protected void btnAdd_Click(object sender, EventArgs e) { if (ddlPlan.SelectedValue != null && tb1stYr.Text != "" && tbMaximum.Text != "" && tbRecurring.Text != "") { //Accessing Variables and defining them. using (dbWebEnrollDataContext dt = new dbWebEnrollDataContext()) try { int getEntity = Int16.Parse(Session["EntitySelected"].ToString()); var productName = ddlPlan.SelectedValue.ToString(); decimal firststYrComp = Int16.Parse(tb1stYr.Text.ToString()); decimal recurringComp = Int16.Parse(tbRecurring.Text.ToString()); decimal maximumPercent = Int16.Parse(tbMaximum.Text.ToString()); //Pulling the Product_ID from the PlanMaster Table from WebEnroll DB! //var tr = dt.PlanMasters.First(s => s.PlanName == productName); var tr = from s in dt.PlanMasters where s.PlanName == productName select s.Product_ID; decimal finalFirstYrComp = decimal.Round((firststYrComp / maximumPercent), 3); decimal finalRecurringComp = decimal.Round((recurringComp / maximumPercent), 3); //Updating the Table: Entity_Product_Points in CommissionsV2 DB. CommissionsV2DataContext cv = new CommissionsV2DataContext(); Entity_Product_Point ev = new Entity_Product_Point(); ev.Entity_ID = getEntity; ev.Product_ID = tr.First(); ev.HiCommissionOld = (double)firststYrComp; ev.LowCommissionOld = (double)recurringComp; ev.HiCommission = (double)finalFirstYrComp * 100; ev.LowCommission = (double)finalRecurringComp * 100; ev.DateCreated = System.DateTime.Now; cv.Entity_Product_Points.InsertOnSubmit(ev); cv.SubmitChanges(); var td = from s in GetEntity() join r in GetPlanName() on s.Product_ID equals r.Product_ID where s.Entity_ID == getEntity select new { s.Product_ID, r.PlanName, s.HiCommissionOld, s.LowCommissionOld }; gvShowComm.DataSource = td; gvShowComm.DataBind(); } catch (Exception err) { MessageBox.Show("" + err); } } else { MessageBox.Show("Please Enter Entry for the textboxes!"); } tb1stYr.Text = ""; tbMaximum.Text = ""; tbRecurring.Text = ""; ddlPlan.SelectedIndex = 0; } protected void gvShowComm_RowEditing(object sender, GridViewEditEventArgs e) { gvShowComm.EditIndex = e.NewEditIndex; gvShowComm.DataBind(); } protected void gvShowComm_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e) { gvShowComm.EditIndex = -1; gvShowComm.DataBind(); } protected void gvShowComm_RowUpdating(object sender, GridViewUpdateEventArgs e) { System.Web.UI.WebControls.TextBox myBox = gvShowComm.Rows[e.RowIndex].FindControl("PlanName") as System.Web.UI.WebControls.TextBox; string s = myBox.Text; gvShowComm.DataBind(); } }
