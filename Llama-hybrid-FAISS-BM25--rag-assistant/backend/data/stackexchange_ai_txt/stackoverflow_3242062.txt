[site]: stackoverflow
[post_id]: 3242062
[parent_id]: 
[tags]: 
Why do the JButton in my dialog look weird

I'm fairly new to Java Swing/AWT et al and hence the question. I have a simple dialog with some text and a couple JButton. I am using the GridbagLayout for this dialog. But when I look at the dialog, the JButtons are kind of having a weird shape and I cannot seem to right justify the text either. Is this a limitation of the Layout I am using. Is there much simpler and elegant solution for my problem with either the buttons or the textlayout? A screenshot of the dialog is attached below. The code for my dialog Class is: public class UpgradePopupWindow extends JPanel implements ActionListener { static final long serialVersionUID = 0; final String upgrade = " Continue Upgrade "; final String restore = "Restore Previous Version"; JPanel panels; JButton upgradeButton; JButton restoreButton; JTextArea Message; JFrame newFrame; FlasherThread flash; protected JTextArea addText(String text, boolean visible, int fontStyle) { JTextArea textArea = new JTextArea(text); textArea.setFont(new Font("SansSerif", fontStyle, 12)); //$NON-NLS-1$ textArea.setLineWrap(true); textArea.setWrapStyleWord(true); textArea.setEditable(false); textArea.setBackground(Color.DARK_GRAY); textArea.setForeground(Color.WHITE); textArea.setOpaque(false); textArea.setVisible(visible); textArea.setAlignmentX(Component.CENTER_ALIGNMENT); add(textArea); return textArea; } protected JTextArea addMultiLineLabel(String text, int fontStyle, int fontSize, Object constraints) { JTextArea textArea = new JTextArea(text); textArea.setFont(new Font("SansSerif", fontStyle, fontSize)); textArea.setLineWrap(true); textArea.setWrapStyleWord(true); textArea.setEditable(false); textArea.setBackground(new Color(0, 0, 0, 0)); // Zero alpha = transparent background textArea.setOpaque(false); textArea.setBorder(new TitledBorder("")); textArea.setAlignmentX(Component.CENTER_ALIGNMENT); add(textArea, constraints); return textArea; } private UpgradePopupWindow(JFrame frame, Object ft) { super(new GridBagLayout()); GridBagConstraints gbc = new GridBagConstraints(); flash = (FlasherThread)ft; String text = "An error occurred during the attempt to update your device's software. We recommend the following: (1) Restore your device to its previous version, (2) back up important data, and then (3) try updating your device again. If you continue with the current update, only your previously backed-up data will be available."; //addFiller(5); //addLabel(text, Font.PLAIN, 12); gbc.gridy = 0; gbc.gridx = 0; gbc.gridwidth = 2; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL; addMultiLineLabel(text, Font.PLAIN, 12, gbc); //addText(text, true, Font.PLAIN); addFiller(20); newFrame = frame; gbc.gridy = 1; gbc.gridwidth = 1; gbc.fill = GridBagConstraints.NONE; upgradeButton = new JButton(upgrade); upgradeButton.setActionCommand("upgrade"); upgradeButton.addActionListener(this); upgradeButton.setEnabled(true); upgradeButton.setBackground(Color.WHITE); upgradeButton.setForeground(Color.GRAY); add(upgradeButton,gbc); ++ gbc.gridx; restoreButton = new JButton(restore); restoreButton.setActionCommand("restore"); restoreButton.addActionListener(this); restoreButton.setEnabled(true); //restoreButton.setForeground(Color.DARK_GRAY); restoreButton.setBackground(Color.DARK_GRAY); add(restoreButton,gbc); setOpaque(true); newFrame.setContentPane(this); //newFrame.getContentPane().setBackground(Color.LIGHT_GRAY); } protected void addFiller(int size) { Dimension diminsion = new Dimension(size, size); Filler filler = new Filler(diminsion, diminsion, diminsion); filler.setAlignmentX(Component.CENTER_ALIGNMENT); add(filler); } public static void createGUI(Object obj) { //Create and set up the frame. JFrame frame = new JFrame("PopUp Dialog"); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setPreferredSize(new Dimension(440, 180)); //create and setup the content pane UpgradePopupWindow popUpContentPane = new UpgradePopupWindow(frame, obj); popUpContentPane.setOpaque(true); frame.setContentPane(popUpContentPane); frame.pack(); frame.setVisible(true); } public void actionPerformed(ActionEvent e) { if("restore".equals(e.getActionCommand())) { System.out.println("restore button selected"); flash.setUpgradeRestoreChoice("restore"); newFrame.dispose(); } else if ("upgrade".equals(e.getActionCommand())) { System.out.println("upgrade button selected"); flash.setUpgradeRestoreChoice("upgrade"); newFrame.dispose(); } } } ![alt text][1]
