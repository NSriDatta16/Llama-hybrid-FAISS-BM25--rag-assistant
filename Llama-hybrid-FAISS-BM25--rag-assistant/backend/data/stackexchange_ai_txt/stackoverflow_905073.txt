[site]: stackoverflow
[post_id]: 905073
[parent_id]: 904966
[tags]: 
If I understand your question correctly, you imply that inserting to a local stack-allocated map<> is much faster than inserting to an existing heap-allocated map<> that you retrieve by reference. There are several possibilities that may be affecting performance. I doubt it has anything to do with C++ reference performance, though. The first possibility, is that by changing screenline_usage to a reference, you are "essentially" retrieving a pointer to an existing object. The actual instance of the object may not be map , it could by anything that inherits from map. For instance, it could be a map with a custom comparator function defined for it. Or a subclass with thread-syncronization logic. Since you don't know what type you are getting from the call to m_container[access_mode][zone_id] , you may very well be getting a subclass that does not perform well on insert. (You can see what type you get back in the debugger, by the way.) Whereas, by creating an empty map you have a guarantee that the type is an actual map<>, and not a subclass. Let's assume that you are getting an actual map<> instance back. The second possibility, is that in the particular flavor of STL that you are using, the map::clear() function does not efficiently clear out internal data structures used to maintain the associative indexes. As I recall, stl::map<> uses some complex internal hashing and bucket structures to provide efficient insert and retrieval capabilities. However, it's unclear what happens to those when you call clear(). So it's possible that screenline_usage.clear() results in a less efficient map to insert against than if you started with an empty map. Finally, let's assume that I'm wrong, and it's neither of these possibilities. There is a simple way to determine whether the difference is the result of using a reference variable. You can try allocating a new map on the heap and assigning it to a reference in your code, like this: map & screenline_usage = new map (); This will help you determine if there is some difference in inserting to an existing map vs. a new map, or if it is indeed the fact that screenline_usage is a reference that is affecting performance. BTW, Don't forget to free this heap-allocated map, or you'll end up with a memory leak.
