[site]: crossvalidated
[post_id]: 598038
[parent_id]: 
[tags]: 
How to fit a stand model with two nested multiplications to mu

I'm studying the Statistical Rethinking 2ed book and trying to write the codes to Stan (I'm using pystan). And stuck on how to write the model below in stan. This problem is described in the book page $172$ and $173$ - RCode $6.16$ Generating the data: # number of plants N = 100 # Initial simulation of heights h0 = np.random.normal(10, 2, N) # Assigning treatments and simulating fungi and treatments treatment = np.repeat([0,1], repeats=int(N/2)) fungus = np.random.binomial(n=1, p=(0.5 - treatment*0.4), size=N) # Final plant height h1 = h0 + np.random.normal(5 - 3*fungus, 1, N) # Dataframe d = pd.DataFrame.from_dict({'h0': h0, 'h1': h1, 'treatment': treatment, 'fungus': fungus}) Math model ( post-treatment bias ) is: $$ h_{1, i} \sim Normal(\mu_i, \sigma) $$ $$ \mu_i = h_{0, i} \times p $$ $$ p = \alpha + \beta_T T_i + \beta_F F_i $$ prioris: $$ \alpha \sim LogNormal(0, 0.25) $$ $$ \beta_T \sim Normal(0, 0.5) $$ $$ \beta_F \sim Normal(0, 0.5) $$ $$ \sigma \sim Exponential(1) $$ I tried writing the model in a few ways and was unsuccessful, this was the best attempt I could think of. model = """ data { int N; vector[N] h0; vector[N] h1; vector[N] T; // Treatment vector[N] F; // Fungus } parameters { real alpha; real bT; real bF; real sigma; } model { alpha ~ lognormal(0, 0.25); bT ~ normal(0, 0.5); bF ~ normal(0, 0.5); sigma ~ exponential(1); for (n in 1:N){ h1[n] ~ normal((alpha + bF*F + bT*T) * h0[n], sigma); } } """ data = { 'N': N, 'h0': h0, 'h1': h1, 'T': treatment, 'F': fungus, } posteriori = stan.build(model, data=data) samples = posteriori.sample(num_chains=4, num_samples=1000) The expected result: mean std alpha 1.38 0.02 bT 0.00 0.03 bF -0.27 0.04 sigma 1.41 0.10 My result was: mean std alpha 1.44 0.00 bT 0.00 0.00 bF -0.00 0.00 sigma 1.67 0.01 The average slopes of my model from the betas are always $0$ . Can someone explain to me a way to write this model in Stan or point me to a place I can look? Thanks!
