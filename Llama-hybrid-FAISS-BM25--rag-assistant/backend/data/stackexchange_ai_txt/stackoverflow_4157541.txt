[site]: stackoverflow
[post_id]: 4157541
[parent_id]: 4154688
[tags]: 
Specific to C#: Note that a class and its tests are tightly coupled. Separating in to two assemblies stretches that coupling link across assembly boundaries. I prefer to put my unit tests in the same assembly as the class they're testing. For each class C in namespace N I will put unit tests in class CTests in namespace N.Tests . It's trivial to tests non-public classes. (A common refrain in TDD is that you shouldn't be unit testing private members; I agree. Here I'm talking about internal classes and internal members.) I don't have to juggle as many assemblies. I should add that I don't mind shipping my unit tests to my users. It would be different if they were downloading over dialup, or running on systems with minimal storage. Aside: If I could, I would put my unit tests in a nested class, like this: public class C { // note 'private' accessibility. [TestFixture] class Tests { // tests here } // Implementation of C here } Some advantages: Renaming C doesn't require renaming CTests . I know exactly where to find my tests. A test and the code under test are always together. This only works if your classes are small. Once they get big, the file becomes enormous. It's possible to use partial classes to put them in separate files. Unfortunately, NUnit and Visual Studio's unit testing framework don't see non-public test fixtures. I don't believe there's an advantage to excluding non-public tests, but that's how they work.
