[site]: stackoverflow
[post_id]: 111518
[parent_id]: 111389
[tags]: 
This question came up recently on the RSpec mailing list, and the advice we generally gave was: Don't bother trying to retro-fit specs to existing, working, code unless you're going to change it - it's exhausting and, unless the code needs to be changed, rather pointless. Start writing specs for any changes you make from now on. Bug fixes are an especially good opportunity for this. Try to train yourself into the discipline that before you touch the code, first of all write a failing example (=spec) to drive out the change. You may find that the design of code which wasn't driven out by code examples or unit tests makes it awkward to write tests or specs for. This is perhaps what your friend was alluding to. You will almost certainly need to learn a few key refactoring techniques to break up dependencies so that you can exercise each class in isolation from your specs. Michael Feathers' excellent book, Working Effectively With Legacy Code has some great material to help you learn this delicate skill. I'd also encourage you to use the built-in spec:rcov rake task to generate code coverage stats. It's extremely rewarding to watch these numbers go up as you start to get your codebase under test.
