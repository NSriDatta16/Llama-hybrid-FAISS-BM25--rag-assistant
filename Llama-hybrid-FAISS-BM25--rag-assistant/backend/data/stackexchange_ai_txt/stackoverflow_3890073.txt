[site]: stackoverflow
[post_id]: 3890073
[parent_id]: 3889140
[tags]: 
In my opinion this is a case of premature optimization (or premature denormalization, if you prefer). You're guessing that the join overhead will cause significant problems, so you're guessing that duplicating the userId and createdAt columns in the dependent tables will improve performance significantly. I suggest that you should not duplicate columns until you know there's a real problem. I keep a few observations on performance optimization tacked up on the wall to remind myself of what I should do in similar cases: It ain’t broke ‘til it’s broke. You can’t improve what you haven’t measured. Programs spend surprising amounts of time in the damnedest places. Make it run. Make it run right. Make it run right fast. optimization is literally the last thing you should be doing. doing things wrong faster is no great benefit. Also a few comments on denormalization: You can’t denormalize that which is not normalized. Most developers wouldn’t know third-normal form if it leapt out from behind their screen, screamed like a banshee, and cracked a baseball bat over their heads. Denormalization is suggested as a panacea for database performance issues. The problem is that too often those recommending denormalization have never normalized anything. “Denormalization for performance reasons” is an excuse for sloppy, “do what we’ve always done” thinking, especially when such denormalization is enshrined in the design. In my experience, I am not able to identify where performance problems will occur before writing code. Problems always seem to occur in places where I would never have thought to look. Thus, I've found that my best choice is always to write the simplest, clearest code that I can and to design the database as simply as I can, following the normalization rules to the best of my ability, and then to deal with what turns up. There may still be performance issues which need attention (but, surprisingly, not really all that often), but in the end I'll end up with simple, clear, and easily understood/maintained code, running on a simple, well-designed database. Share and enjoy.
