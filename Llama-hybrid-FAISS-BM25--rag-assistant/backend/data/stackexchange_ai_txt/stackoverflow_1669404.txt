[site]: stackoverflow
[post_id]: 1669404
[parent_id]: 1667386
[tags]: 
There's a well-known optimization to this filtering problem. Integrate the cells in one direction (say horizontally) Integrate the cells in the other direction (say vertically) Take the difference between each cell and it's N'th neighbor to the left. Take the difference between each cell and it's N'th lower neighbor Like this: for (i = 0; i What this does is: The first pass makes each cell the sum of all of the cells on that row to it's left, including itself. After the 2nd pass , each cell is the sum of all of the cells in a rectangle above and left of itselt (including it's own row and column) After the 3rd pass, each cell is the sum of a rectangle above and to the right of itself, N columns wide. After the 4th pass each cell is the sum of an NxN rectangle below and to the right of itself. This takes 4 operations per cell to compute the sum, as opposed to 8 for brute force (assuming you're doing a 3x3 averaging filter). The cool thing is that if you use ordinary two's-complement arithmetic, you don't have to worry about any overflows in the first two passes; they cancel out in the last two passes.
