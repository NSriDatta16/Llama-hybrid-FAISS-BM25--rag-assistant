[site]: crossvalidated
[post_id]: 612262
[parent_id]: 612197
[tags]: 
The problem with extreme weights is that they yield high variability in the weights which decreases the effective sample size. You don't have to check for extreme weights; you just need to check for an unacceptably low effective sample size. In this case, the ESS for the control group decreased by quite a lot. You might wonder why that is. One answer could be a few extreme weights that dramatically increase the variance of the weights. Looking at the summary of weights and their histograms, it seems this could be the case. The output of summary(W.out) displays the ESS and information on the largest weights. You can see that the largest weights are between 3 and 4, but their values are quite similar. These values do not seem too extreme, though they are clearly quite a bit larger than the average control group weight of ~.44. You can use plot(summary(W.out)) to directly plot a histogram of the weights. The output looks like the following: It's pretty clear that most control weights are quite small and there are a few weights that are relatively large, which is likely causing the decrease in ESS. There is no individual unit with an extreme weight, but rather a cluster of units with unusually high weights. You can see if trimming (i.e., winsorizing) the weights makes a difference using trim() ; I find that trimming the weights to anywhere between the 85th and 95th percentile improves the ESS without dramatically worsening balance. I appreciate you wanting to practice your coding skills to generate the plots, but cobalt and WeightIt provide utilities for making those plots. Instead of using weights::wtd.hist() , you can just use plot(summary(W.out)) as I mentioned above. Also, hist() would have sufficed; a histogram of weights is not the same thing as a weighted histogram, which is what weights::wtd.hist() displays. You didn't even use the weights argument, which is the only way that differs from hist() . I'm not sure why your histogram has values greater than 20; are you sure you are using the right code to generate that plot? To plot the distribution of propensity scores, just use cobalt::bal.plot() , e.g., bal.plot(W.out, "prop.score", which = "both") .
