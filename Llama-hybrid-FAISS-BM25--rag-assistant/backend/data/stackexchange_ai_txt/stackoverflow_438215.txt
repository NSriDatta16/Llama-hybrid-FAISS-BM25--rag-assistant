[site]: stackoverflow
[post_id]: 438215
[parent_id]: 438166
[tags]: 
Willie's answer was quite good. Personally, I prefer using databases as a bit bucket. My hint is this: If you really want your data models and your object models to be the same (and there is absolutely nothing wrong with them being the same!) use an object database. Because, in this case, the relational layer won't buy you too much. If you choose an ActiveRecord-style object database, (like SandstoneDB) what you do is this: you make your domain object without spending a thought about data storage. When your object works fine, you send it the "save" message, and it writes itself into the database. That's it. No configuration! It will automatically generate its own id, and with this you can retrieve it quickly from the database. If you go the classic way and use an RDBMS, you can step away from your database design, but why should you? You didn't design your tables for fun. Some tools will autogenerate objects out of table definitions: that's fine. They usually provide a good start. If there's something wrong, you can change only the objects, or only the data definitions, or both. Just look at your code and see what is more convenient. Niko
