[site]: stackoverflow
[post_id]: 1468081
[parent_id]: 1466866
[tags]: 
Thanks all for your answers. I implemented the MagicFunction as an extension method. It leverages Thomas Levesque's answer but is enhanced to handle all major environments AND assumes you want the output string to use the same newline terminator of the input string. I favored Thomas Levesque's answer (over Spencer Ruport's, Fredrik Mork's, Lazarus, and JDunkerley) because it was the best performing. I'll post performance results on my blog and link here later for those interested. (Obviously, the function name of 'MagicFunctionIO' should be changed. I went with 'PrependEachLineWith') public static string MagicFunctionIO(this string self, string prefix) { string terminator = self.GetLineTerminator(); using (StringWriter writer = new StringWriter()) { using (StringReader reader = new StringReader(self)) { bool first = true; string line; while ((line = reader.ReadLine()) != null) { if (!first) writer.Write(terminator); writer.Write(prefix + line); first = false; } return writer.ToString(); } } } public static string GetLineTerminator(this string self) { if (self.Contains("\r\n")) // windows return "\r\n"; else if (self.Contains("\n")) // unix return "\n"; else if (self.Contains("\r")) // mac return "\r"; else // default, unknown env or no line terminators return Environment.NewLine; }
