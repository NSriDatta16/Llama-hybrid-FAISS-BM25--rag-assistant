[site]: stackoverflow
[post_id]: 2260651
[parent_id]: 2257315
[tags]: 
Regarding compile-vs-run-time: In Perl, modules (packages/namespaces) usually live in separate files. I.e. Some::Module would be find in Some/Module.pm. In this setup, the compile-vs-run-time difference won't matter much. The run-time of the module you load via use() will be before the compile-time of the calling code continues. Observer: File Some/Module.pm : package Some::Module; BEGIN{ print "Some::Module - compile time\n" } print "Some::Module - run time\n"; 1; File test.pl : BEGIN{ print "Just started compiling the program.\n" } use Some::Module; BEGIN{ print "main - compile time\n" } print "main - run time\n"; The output will be: Just started compiling the program. Some::Module - compile time Some::Module - run time main - compile time main - run time Therefore, an our @ISA = qw(Base); will be executed before the compilation of your main program continues after loading the module. It is correct, however, that assigning to @ISA does not ensure that the base class has been loaded. That is why we have the use base and use parent pragmas. If you do not specifically need any features of use base (fields) nor require the longer backwards compatibility that it provides over use parent , I suggest you use the more light-weight use parent .
