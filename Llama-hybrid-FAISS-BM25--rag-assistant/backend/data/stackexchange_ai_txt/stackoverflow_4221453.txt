[site]: stackoverflow
[post_id]: 4221453
[parent_id]: 4221211
[tags]: 
JavaScript at a language level doesn't specify a particular ‘standard’ way of using constructors. When you define your own constructor function, you can choose to have it callable as a constructor (with new ), as a function (returning a new object), or make it work with either. Am I missing some trivial thing here? Not really. The Function constructor function is defined to be usable as a constructor even without new , by ECMAScript section 15.3.1: When Function is called as a function rather than as a constructor, it creates and initialises a new Function object. Thus the function call Function(...) is equivalent to the object creation expression new Function(...) with the same arguments. The Date function, on the other hand, is defined (by ECMAScript section 15.9.2) to return a string: When Date is called as a function rather than as a constructor, it returns a String representing the current time (UTC). NOTE: The function call Date(...) is not equivalent to the object creation expression new Date(...) with the same arguments. The NOTE is there because so many constructor functions can also be used without new . That's not because of any over-arching thinking that all constructor functions should be allowed to work as plain functions, but because this is just what JavaScript has always done since the early Netscape days. Netscape couldn't think of anything special for Function() to do, so it just reproduced the new functionality. They didn't pay too much attention to making the language consistent. You wouldn't design a language's default class library like that if you were sane. But JavaScript isn't a sane language. It's a quick hack that got way out of hand, achieving mass popularity way before anyone spent any time refining its design. Expect it to behave consistently and you will only be disappointed.
