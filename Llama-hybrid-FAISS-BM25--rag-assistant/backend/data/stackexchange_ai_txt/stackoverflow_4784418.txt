[site]: stackoverflow
[post_id]: 4784418
[parent_id]: 4783538
[tags]: 
Hints: You'll need to pass a System.Type to your method ... You'll need to use Object.GetType() and also the typeof operator. You can also create an instance of a Type of a class by using its qualified name if its in the currently executing assembly OR the AssemblyQualifiedName Basic idea below: WebForm Passing Types &nbsp; CodeBehind ( Apologies, its been quite a while since I did any VB.net so this example is in C# ) protected void Page_Load(object sender, EventArgs e) { if (! IsPostBack){ buildGui(); } } private void buildGui(){ List lstStrings = new List (5); lstStrings.Add("one"); lstStrings.Add("two"); lstStrings.Add("three"); lstStrings.Add("four"); lstStrings.Add("five"); ddl1.DataSource = lstStrings; ddl1.DataBind(); //Populate the Types Dropdown with some fullyqualified type names (includes the assembly name,version number, PublicKey etc.) Dictionary lstTypes = new Dictionary (3); lstTypes.Add(this.ddl1.GetType().Name, this.ddl1.GetType().AssemblyQualifiedName); lstTypes.Add(this.txt1.GetType().Name, this.txt1.GetType().AssemblyQualifiedName); lstTypes.Add(this.hl1.GetType().Name, this.hl1.GetType().AssemblyQualifiedName); //lstTypes.Add(this.hl1.GetType().Name, this.hl1.GetType().AssemblyQualifiedName); lstTypes.Add(this.CRJunk01.GetType().Name, this.CRJunk01.GetType().AssemblyQualifiedName); ddlTypes.DataSource = lstTypes; ddlTypes.DataValueField = "value"; ddlTypes.DataTextField = "key"; ddlTypes.DataBind(); } protected void btnGetValueFromType_Click(object sender, EventArgs e) { Type t = Type.GetType(ddlTypes.SelectedValue); lout.Text = "Looking for a type: " + t.ToString(); foreach(Control c in this.pnl1.Controls){ if (c.GetType().Equals(Type.GetType(ddlTypes.SelectedValue)))//Look for controls whose type is the same as the type selected in ddl1. { lout.Text += string.Format(" Got Control of type: {0}", c.GetType().Name); //Cast to your custom Interface/BaseClass and extract the value. lout.Text += " Value is: " + ((ICrJunkControl)(c)).ControlValue; } } } This is the sort of thing you'll probably need to 'leverage'. On a final note, it will probably be best if all your custom controls inherit from a base class or an interface. That way, when you've located the object you want based on its type you can cast it to the interface or base class and then get the value of a bespoke shared member e.g. ControlValue . The implementation of your base classes will override this. This will help to overcome problems related to disparate controls having different members that expose their state. e.g. Textbox -> Text DropdownList -> SelectedValue Hyperlink -> Text/NavigateUrl HTH,
