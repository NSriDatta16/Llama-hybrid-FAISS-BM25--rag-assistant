[site]: stackoverflow
[post_id]: 5406037
[parent_id]: 
[tags]: 
Why are composite primary keys still around?

I'm assigned to migrate a database to a mid-class ERP. The new system uses composite primary keys here and there, and from a pragmatic point of view, why? Compared to autogenerated IDs, I can only see negative aspects; Foreign keys becomes blurry Harder migration or db-redesigns Inflexible as business change. (My car has no reg.plate..) Same integrity better achieved with constraints. It's falling back to the design concept of candiate keys, which I neither see the point of. Is it a habit/artifact from the floppy-days (minimizing space/indexes), or am I missing something? //edit// Just found good SO-post: Composite primary keys versus unique object ID field //
