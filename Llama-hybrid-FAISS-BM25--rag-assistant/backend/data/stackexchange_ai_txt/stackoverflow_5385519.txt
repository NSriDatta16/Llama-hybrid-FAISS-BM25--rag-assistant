[site]: stackoverflow
[post_id]: 5385519
[parent_id]: 5385223
[tags]: 
It would only make sense to want the data in a heap table to be physically ordered with the primary key index if you are doing a range scan of the primary key index and then doing a single row lookup in the table. That tends to be relatively uncommon-- you don't commonly want to fetch all the data for ORDER_ID 1-100 from the ORDER table, for example. It is probably more common if you are using natural, multi-column primary keys but that is somewhat unusual. If you do find yourself with a table that undergoes frequent index range scans on the primary key and you want to optimize that particular access path, you'd almost certainly be better off using an index-organized table or a hash cluster in order to have Oracle take care of the physical ordering of rows automatically. It makes little sense to create a maintenance headache for yourself by regularly reorganizing the table when you can simply instruct Oracle to maintain the order. Of course, optimizing for this access path will decrease the efficiency of accessing the table via any other index so it is far from a cost-free option. Even in the case where you have index range scans on the primary key and the trade-offs of optimizing that access path outweigh the costs to the other index access methods, the physical order of rows in the table is going to have a relatively small impact on the cost of executing the query. The vast majority of queries and processes have the potential for much greater levels of optimization with far fewer problems using standard SQL tuning techniques rather than bothering with the order of rows in a table. Caveat 1: If you happen to be trying to compress a table (not using the Advanced Compression option), the order of rows in the table can be important because better ordered data is more easily compressed. That's the only time I've ever found myself caring about the physical order of data. Caveat 2: If you do have a table that meets all the criteria outlined and you do physically order the data in the table and you happen to use RAC, you could end up creating much more interconnect traffic by concentrating "interesting" rows into fewer hot blocks that have to constantly be passed between nodes. That can easily offset whatever marginal benefit you received from reorganizing the table in the first place.
