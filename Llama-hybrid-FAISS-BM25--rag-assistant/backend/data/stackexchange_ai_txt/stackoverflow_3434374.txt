[site]: stackoverflow
[post_id]: 3434374
[parent_id]: 3434366
[tags]: 
Also, he frowns upon documenting code, beliveing that it should speak for itself. That's pretty much all I needed to read. This person really has no clue about what it takes to write maintainable code. With that said, this person is obviously your mentor/supervisor, so you can't just say, "hey, that's stupid", you have to do it tactfully. But not documenting code because it "should speak for itself" is a recipe for disaster. And you should definitely pay attention to writing clear, effective and efficient code. It's always better to do something right than to just hack something together that you're not going to understand 6 months from now. If you don't understand it, chances are no one else will either. I think you should talk to their supervisor and explain the situation. With that said, there are sometimes reasons to take shortcuts if the timeline is tight, quoting Jamie Jawinski, who worked on Netscape, "We're going to ship the highest-quality product we can on March 31st" So you have to find the balance. But overall, writing helpful comments in code doesn't take that much more time, certainly not enough to significantly affect a project timeline, and I like what Donald Knuth said: ...when you write a program, think of it primarily as a work of literature. You're trying to write something that human beings are going to read. Don't think of it primarily as something a computer is going to follow. The more effective you are at making your program readable, the more effective it's going to be: You'll understand it today, you'll understand it next week, and your successors who are going to maintain and modify it will understand it. In short, there's no substitute for writing highly effective, clear, and maintainable code, even with a tight timeline.
