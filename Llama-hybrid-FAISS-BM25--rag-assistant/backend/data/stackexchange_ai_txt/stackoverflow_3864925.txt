[site]: stackoverflow
[post_id]: 3864925
[parent_id]: 3864416
[tags]: 
Here's a solution without self-joins: WITH q AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY statusDate) AS rn, ROW_NUMBER() OVER (PARTITION BY status ORDER BY statusDate) AS rns FROM tracking WHERE tackingId = @id ), qs AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY rn - rns ORDER BY statusDate) AS rnn FROM q ) SELECT * FROM qs WHERE rnn = 1 ORDER BY statusDate Here's a script to check: DECLARE @tracking TABLE ( id INT NOT NULL PRIMARY KEY, trackingId INT NOT NULL, status INT, statusDate DATETIME ) INSERT INTO @tracking SELECT 1, 1, 1, DATEADD(d, 1, '2010-01-01') UNION ALL SELECT 2, 1, 2, DATEADD(d, 2, '2010-01-01') UNION ALL SELECT 3, 1, 2, DATEADD(d, 3, '2010-01-01') UNION ALL SELECT 4, 1, 2, DATEADD(d, 4, '2010-01-01') UNION ALL SELECT 5, 1, 3, DATEADD(d, 5, '2010-01-01') UNION ALL SELECT 6, 1, 3, DATEADD(d, 6, '2010-01-01') UNION ALL SELECT 7, 1, 4, DATEADD(d, 7, '2010-01-01') UNION ALL SELECT 8, 1, 2, DATEADD(d, 8, '2010-01-01') UNION ALL SELECT 9, 1, 2, DATEADD(d, 9, '2010-01-01') UNION ALL SELECT 10, 1, 1, DATEADD(d, 10, '2010-01-01') ; WITH q AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY statusDate) AS rn, ROW_NUMBER() OVER (PARTITION BY status ORDER BY statusDate) AS rns FROM @tracking ), qs AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY rn - rns ORDER BY statusDate) AS rnn FROM q ) SELECT * FROM qs WHERE rnn = 1 ORDER BY statusDate
