[site]: stackoverflow
[post_id]: 383807
[parent_id]: 383728
[tags]: 
Edit 2: Surprisingly, strength-reducing the squaring reduces the time a lot, at least on my Python2.5 installation. (I'm surprised because I thought interpreter overhead was taking most of the time, and this doesn't reduce the count of operations in the inner loop.) Reduces the time from 0.572s to 0.146s for table(1234577). def table(n): n1 = n - 1 square = 0 for delta in xrange(1, n, 2): square += delta if n strager posted the same idea but I think less tightly coded. Again, jug's answer is best. Original answer: Another trivial coding tweak on top of Konrad Rudolph's: def table(n): n1 = n - 1 for a in xrange(1, n // 2 + 1): if (a*a) % n == n1: return a Speeds it up measurably on my laptop. (About 25% for table(1234577).) Edit: I didn't notice the python3.0 tag; but the main change was hoisting part of the calculation out of the loop, not the use of xrange . (Academic since there's a better algorithm.)
