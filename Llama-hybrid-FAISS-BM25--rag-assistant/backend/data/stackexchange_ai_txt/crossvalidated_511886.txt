[site]: crossvalidated
[post_id]: 511886
[parent_id]: 
[tags]: 
Applying Bayesian Reasoning to Estimate the Type of a Feature

Suppose I have a set of strings $S$ and I want to find out whether these strings have a certain type. To be more specific, I want to find out whether these strings are surnames. Suppose I have a large list $L$ of surnames from many regions in the world. ( $L$ can be viewed as a set.) Now, there are likely many surnames not in $L$ - either because the list does not capture them, or because they are spelled in a way that is similar but not exactly as on the list (e.g. "Markov" vs "Markow" vs "Markoff" etc). Suppose that for each entry in $S$ (or a sufficiently large sample thereof) I can provide a confidence or probability $p$ that this is a surname (1 if the surname matches some entry in $L$ exactly and less than 1 if there is only a fuzzy match; for those who want to know specifically, I am using the Python fuzzyset package that calculates that value on the basis of the Damerau-Levenshtein distance). How can I calculate the probability that the entire set $S$ is a list of surnames? I thought of Bayesian reasoning, but I can't put the calculation together properly. What I want is the probability that $S$ contains surnames given the confidence that I have about individual entries of $S$ being "fuzzily" in $L$ . Specifically, everything conditioned on the specific list $L$ , I want to know $\Pr(A_S | B_s)$ where $A_S$ is the event that $S$ is indeed a set of surnames and $B_s$ is the event that $s \in S$ matches "fuzzily" some element in $L$ ; let $\Pr(B_s)$ be the confidence $p$ . I don't get how to proceed from here - or am I entirely on the wrong track?
