[site]: stackoverflow
[post_id]: 5596910
[parent_id]: 5595802
[tags]: 
Reading the answers to this question is interesting, as it shows a very broad range of interpretations of many different aspects of software development. I am normally of the belief that dependencies of any kind should not be stored in the VCS (by VCS, I refer to tools like git, hg, svn, cvs, and not larger systems that incorporate such tools, like Xcode) because that is not the job of the VCS. Dependency tracking is best left to a packaging tool. (It seems that many people use the VCS as a primitive packaging tool, which IMHO is a huge mistake.) I think you need to clarify what you mean by 'test framework'. For me, most of my test suites are invoked by the framework provided by automake. I certainly do not include automake in my git repository, but there is no issue with version differences in the future because all of the test framework generated by automake is included in the distribution tarball. So really the question is pushed back one more level. If you are using only a VCS to track your releases, then you have a problem because you really do need to have the test framework available when you check out an old version of the project. If the VCS is the only storage mechanism for retrieving old releases (ie, you aren't using any sort archiving of releases in tarballs), then it seems you are forced to put the framework in the VCS. But putting external software in your VCS is, frankly, stupid. The only reason to do that is if you are using the VCS as your distribution tool. So I suppose my answer is: don't put the framework in your VCS, but do put the framework in your distributions. If your VCS is your distribution tool, then there is no proper way to deal with the test framework.
