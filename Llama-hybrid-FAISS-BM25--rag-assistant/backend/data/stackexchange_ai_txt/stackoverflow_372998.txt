[site]: stackoverflow
[post_id]: 372998
[parent_id]: 372721
[tags]: 
Why are you trying to get the shortest possible program first? Start with a correct solution and then edit it to you can't remove any more. Syntax and typing are not going to be the bottlenecks for a correct solution. Even if your program is longer than anyone else's, if you are the only one who does it correctly, you still win. :) Read RFC 2822, "Internet Message Format" to see what you have to handle. Then, look at the existing email parsing libraries that already exist to see the shenanigans that they have to handle. Once you think you have a solution because you follow the RFC, start working on all of the broken mailers. If you are just trying to get work done, use the right tool. This is a job for formail if you just want to play with messages, but it you have to write tight code that will run on all the messages passing through your network, then something like qsmtp (the mod_perl for MTAs) might be what you want. As far why you have to do this, what did the instructor say when you asked? You should get into the habit of specifying the desired end state and constraints for any assignment, whether in school or in a "real" job. Here's a proper program to finish the task correctly. Mine's a bit long because I also read all of the emails from the source (which can be almost any common email storage format such as mbox, maildir, and so on) and I extract just the header from each message. This is only 51 characters: formail -s formail -c -XTo: -XFrom: -XCc: If you'd rather have a Perl solution so you have a little more control over the output, here's that too: #!/usr/bin/perl use Email::Folder; my $folder = Email::Folder->new($ARGV[0]); foreach my $message ( $folder->messages ) { print join "\n", map { my $h = $message->header( $_ ); defined $h ? "$_: $h " : (); } qw(From To Cc); print "\n\n"; }
