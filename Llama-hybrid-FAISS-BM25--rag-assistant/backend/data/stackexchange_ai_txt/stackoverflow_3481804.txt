[site]: stackoverflow
[post_id]: 3481804
[parent_id]: 1894610
[tags]: 
;; It's always possible to create a global variable ;; (assigned to #f so you know if it's been assigned to yet) ;; and just use it later. (define *some-global-var* #f) ;; then later on... (set! *some-global-var* 234234) ;; or w/e you want (if *some-global-var* ;; it's been assigned (do-something *some-global-var*)) ;; But in your case, a (hash) table is definitely ;; much better than unorganized free variables. ;; Gambit-C has hash tables built in. So, you can ;; define the hash table early on... (define *globals* (make-table)) ;; And assign to it later. Use the "variable name" ;; for the key. (table-set! *globals* 'x 3) (table-set! *globals* 'y 4) ;; Whenever you want you plan to access ;; a lot, it's best to use a "let" (let ((x (table-ref *globals* 'x)) (y (table-ref *globals* 'y))) (println "The sum of " x " and " y " is " (+ x y) ".")) The sum of 3 and 4 is 7. ;; Gambit also has structures, and they too are useful ;; for organizing data (*kind of* like C structs). ;; Note that it's possible to assign structures to hash ;; tables -- just like anything else -- and sometimes ;; it's *very* useful to do so. (define-structure person name age) (define jy (make-person "jyaan" 9000)) (person-name jy) "jyaan" (person-age-set! jy 25) (println jy) #
