[site]: stackoverflow
[post_id]: 4003315
[parent_id]: 4003202
[tags]: 
CALayers that you create, can of course be stored in NSMutableArray, and you can work with them later on, usually by animating their properties, or asking them to redraw themselves. Usually you create a custom UIView, create and manage layers within that view. Those layers are either member variables of that view, or you store them in an array. As things are happening in your app, your view animates the layers accordingly. Usually you want to react on touch events (which you also implement in that particular view - touchesBegan/Moved...) and animate the layers. CALayer draws itself and caches the content for as long as you call [layer setNeedsDisplay] , or it's bounds (size) are changed (well, if needsDisplayOnBoundsChange is true). Practically in all my apps I did, such redrawing happens very rarely - only if data are changed, and layer needs to redraw. Animating layers, transforming their size, rotation, changing position - layer is not redrawn during any of these. Hiding, showing, changing transparency - no redraw is required. That "drawing class" you are talking about - you actually have only two options - either you extend CALayer and overwrite drawInContext: , or you create basic CALayer , set its delegate, and there you draw in drawLayer:inContext: . I personally prefer creating delegates.
