[site]: stackoverflow
[post_id]: 1328511
[parent_id]: 1328248
[tags]: 
It seems that you want your subclasses to have awareness of the command line stuff, which is often not a good idea. You want to encapsulate the whole config input portion of your program so that you can drive it with a command line, config file, other python program, whatever. So, I would remove any call to add_option from your subclasses. If you want to discover what your config requirements look like at runtime, I would simply add that data to your subclasses; let each one have a member or method that can be used to figure out what kind of inputs it needs. Then, you can have an input organizer class walk over them, pull this data out, and use it to drive a command line, config file, or what have you. But honestly, I've never needed to do this at run time. I usually pull all that config stuff out to it's own separate thing which answers the question "What does the user need to tell the tool?", and then the subclasses go looking in the config data structure for what they need.
