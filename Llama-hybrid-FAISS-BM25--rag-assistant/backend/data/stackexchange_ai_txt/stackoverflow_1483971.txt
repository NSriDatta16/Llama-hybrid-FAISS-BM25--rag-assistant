[site]: stackoverflow
[post_id]: 1483971
[parent_id]: 1483877
[tags]: 
Common practice are both, and it comes down to the preference of each implementer. As duffymo suggested you should go with the one you know best. However you should also take into consideration what your regular patterns for working with data are. Having something that's nicely modeled in either one, but very costly in terms of performance is not a good choice. The balance is somewhere in the middle. I personally tend to pay more attention to the database side of things mainly because databases are the ones that are harder to scale. Keeping this is mind when designing a database helps. You don't have to necessarily make the initial design following strict scaling rules, but having it in mind might help you not to make design decisions that will be the equivalent of shooting yourself in the foot, when later on the need for scaling arises.
