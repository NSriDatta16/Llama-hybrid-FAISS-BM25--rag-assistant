[site]: stackoverflow
[post_id]: 1570363
[parent_id]: 1570272
[tags]: 
When I was working on my doctorate, the faculty gave us this rule for seminars - and it has proved very useful since: Tell 'em what you're gonna tell 'em. (E.g., brief introductory problem description and results abstract) Tell 'em. (E.g. technical details comprising the bulk of the time) Tell 'em what you told 'em. (E.g. brief summary and conclusions) Open the floor for questions. In your position, I would take about 10-20% of your allotted time to do #1 in a largely non-technical way. So you might describe the business function your code automates, why that's important, what things were like before and after applying your solution, how it's saving money, that kind of thing. Then I'd launch into a highly technical discussion aimed at the CS/SE crowd. Even if the rest of the folks don't understand it and their eyes glaze over, your introduction at least will have given them a sense of what it's all about, and they might recognize a bit here or there. For the third part, I'd briefly recap the problem and describe how you solved it in non-technical language, and then do your live-coding extensibility whiz-bang demo. Even if the non-CS/SE folks don't understand the demo, they'll see eye candy flying by and your professional peers and faculty all nodding and smiling, so they'll think it's cool. I once attended a seminar by a guy who won the Nobel Prize for applying chaos theory to chemical systems. He applied this approach, so even though all the non-theoreticians like my fellow organic chemists and I were all completely out of our depth, the fact that the theoreticians were all excited left us feeling like it was a great seminar even though we didn't have a clue about what he'd said.
