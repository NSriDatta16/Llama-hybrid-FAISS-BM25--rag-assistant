[site]: crossvalidated
[post_id]: 136944
[parent_id]: 136806
[tags]: 
Model the game by drawing a ticket out of a box. There are two kinds of tickets. On one is written "Stop, you tossed heads"; on the other is written "Continue, you tossed tails." The expected number of additional tosses in the first case is $0$ while the expected number of additional tosses in the second case is $x$, say--we don't know it yet and have to figure it out. Write these expectations on their respective tickets: these are the values of the tickets. The three things we do know are: The chance of drawing a "Stop" ticket (with value $0$) is $p$. The chance of drawing a "Continue" ticket (with value $x$) is $1-p$. The expectation of this single draw is, by definition, the sum of the probability-weighted values on all kinds of tickets: $$p\times 0 + (1-p)\times x = (1-p)x.$$ Let us interpret this number: it is the expected number of additional tosses that will be needed until a head appears. Since draws of tickets correspond to coin tosses, adding in the one draw needed to obtain a ticket gives us the expected number of tosses--which is just $x$ itself. Equating these two expressions, $$x = 1 + (1-p)x.$$ Solving for $x$ answers the first question. Since the number of tails is always one less than the number of draws, the expected number of tails also must be one less than the expected number of draws. Therefore $x-1$ answers the second question. A second intuitively clear solution can be obtained by contemplating a very long sequence of $n$ tosses. How many games were played? Answer: the number of heads (plus one more incomplete game if the sequence ends with a series of tails). How many heads are expected? Answer: $pn$. Call this number $h$. The Weak Law of Large Numbers asserts that the actual number of heads is highly likely to be very close to $pn$ provided $n$ is sufficiently large. Therefore the average game length $x$, given by some number between $n/h$ and $n/(h+1)$, will be arbitrarily close to $n/(pn)$, whence it must equal $x$ itself. This leads to an extremely efficient way to simulate the distribution of game lengths . Here is R code. It records "heads" as true values in a boolean array and computes the tosses between successive true values. p When I ran this code after setting the seed to $17$ ( set.seed(17) ), the output differed from $x$ by only a tiny amount.
