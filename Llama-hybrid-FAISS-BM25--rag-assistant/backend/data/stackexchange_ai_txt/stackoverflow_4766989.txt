[site]: stackoverflow
[post_id]: 4766989
[parent_id]: 4766951
[tags]: 
A macro is a code fragment that gets substituted into your program by the preprocessor (before compilation proper begins). This may be a function-like block, or it may be a constant value. A warning when using a function-like macro. Consider the following code: #define foo(x) x*x If you call foo(3) , it will become (and be compiled as) 3*3 (=9). If, instead, you call foo(2+3) , it will become 2+3*2+3 , (=2+6+3=11), which is not what you want. Also, since the code is substituted in place, foo(bar++) becomes bar++ * bar++ , incrementing bar twice. Macros are powerful tools, but it can be easy to shoot yourself in the foot while trying to do something fancy with them.
