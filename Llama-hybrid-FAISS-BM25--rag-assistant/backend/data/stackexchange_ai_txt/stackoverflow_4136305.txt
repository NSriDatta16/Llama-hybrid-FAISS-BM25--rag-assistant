[site]: stackoverflow
[post_id]: 4136305
[parent_id]: 531442
[tags]: 
No, don't store binaries next to their source code (unless you have good reasons that offset the disadvantages). Disadvantages: it encourages bad build practices in large projects. The best practice is to fully automate your build. Committing binaries enables you to ignore that: "just manually do the build for the parts that have changed" :-( slower updates and commits commits which change source code but not the corresponding binaries will cause confusion among developers. How do you detect that there is a mismatch? svn update will update the timestamp of your binaries, confusing your build tools which will erroneously think the binaries are newer than your source code changes. causes spurious conflicts on the binaries for svn update and svn merge it uses more disk space in the repository. (This may be negligible depending on your project.) In general, avoid committing anything that is generated automatically in a deterministic way from other versioned resources. No redundancy -> no opportunity for inconsistencies. Instead, use a continuous integration server to automatically rebuild (and run the tests) on each commit. Let this build server publish the binaries somewhere (outside SVN) if necessary. Now, this does not mean that you should take this as an absolute rule or avoid all binaries. By all means, put your build tools and third-party closed-source binaries inside your projects. And make exceptions when it makes sense. Ideally a new developer should be able to do a check out and immediately launch the build script without spending a day or two on setting up his environment.
