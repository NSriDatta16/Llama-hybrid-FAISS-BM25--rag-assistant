[site]: stackoverflow
[post_id]: 4541138
[parent_id]: 4541042
[tags]: 
I will define heavy traffic as traffic which triggers resource intensive work. Meaning, if one web request triggers multiple sql calls, or they all calculate pi with a lot of decimals, then it is heavy. If you are returning static html, then your bandwidth is more of an issue than what a good server today can handle (more or less). The principles are the same no matter if you use MVC or not when it comes to optimize for speed. Having a decoupled architecture makes it easier to scale by adding more servers etc Use a repository pattern for data retrieval (makes adding a cache easier) Cache data which is expensive to query Data to be written could be written thru a cache, so that the client don't have to wait for the actual database commit There's probably more ground rules as well. Maybe you can you say something about the architecture of your application, and how much load you need to plan for?
