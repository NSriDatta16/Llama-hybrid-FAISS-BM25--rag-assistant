[site]: stackoverflow
[post_id]: 3595921
[parent_id]: 3593968
[tags]: 
If you dont mind a plain DOMDocument solution (DOMDocument is used unter the hood of phpQuery to parse the HTML fragments), I did something similiar a while ago. I adapted the code to do what you need: $document = new DOMDocument(); // load html from file $document->loadHTMLFile('event.html'); // find all span elements in document $spanElements = $document->getElementsByTagname('span'); $spanElementsToReplace = array(); // use temp array to store span elements // as you cant iterate a NodeList and replace the nodes foreach($spanElements as $spanElement) { $spanElementsToReplace[] = $spanElement; } // create a p element, append the children of the span to the p element, // replace span element with p element foreach($spanElementsToReplace as $spanElement) { $p = $document->createElement('p'); foreach($spanElement->childNodes as $child) { $p->appendChild($child->cloneNode(true)); } $spanElement->parentNode->replaceChild($p, $spanElement); } // print innerHTML of body element print DOMinnerHTML($document->getElementsByTagName('body')->item(0)); // -------------------------------- // Utility function to get innerHTML of an element // -> "stolen" from: http://www.php.net/manual/de/book.dom.php#89718 function DOMinnerHTML($element) { $innerHTML = ""; $children = $element->childNodes; foreach ($children as $child) { $tmp_dom = new DOMDocument(); $tmp_dom->appendChild($tmp_dom->importNode($child, true)); $innerHTML.=trim($tmp_dom->saveHTML()); } return $innerHTML; } Maybe this can get you in the right direction on how to do the replacement in phpQuery? EDIT: I gave the jQuery documentation of replaceWith another look, it seems to me, that you have to pass in the whole html fragment which you want to be your new, replaced content. This code snipped worked for me: $event = phpQuery::newDocumentHTML(...); // iterate over the spans foreach($event->find('span') as $span) { // make $span a phpQuery object, otherwise its just a DOMElement object $span = pq($span); // fetch the innerHTMLL of the span, and replace the span with $span->replaceWith(' ' . $span->html() . ' '); } print (string) $event; I couldnt find any way to do this with chained method calls in one line.
