[site]: stackoverflow
[post_id]: 322575
[parent_id]: 137375
[tags]: 
I think there are about a dozen different heuristics I know of when it comes to programming and so I tend to go through the list at times with what I'm trying to do. At the start, it is important to know what is the desired end result and then try to work backwards to find it. I remember an Algorithms class covering some of these ways like: Reduce it to a known problem or trivial problem Divide and conquer (MergeSort being a classic example here) Use Data Structures that have the right functions (HeapSort being an example here) Recursion (Knowing trivial solutions and being able to reduce to those) Dynamic programming Organizing a solution as well as testing it for odd situations, e.g. if someone thinks L should be a number, are what I'd usually use to test out the idea in pseudo code before writing it up. Design patterns can be a handy set of tools to use for specific cases like where an Adapter is needed or organizing things into a state or strategy solution.
