[site]: stackoverflow
[post_id]: 1456132
[parent_id]: 
[tags]: 
Which do you prefer for interfaces: T[], IEnumerable , IList , or other?

Ok, I'm hoping the community at large will aid us in solving a workplace debate that has been ongoing for a while. This has to do with defining interfaces that either accept or return lists of some type. There are several ways of doing this: public interface Foo { Bar[] Bars { get; } IEnumerable Bars { get; } ICollection Bars { get; } IList Bars { get; } } My own preference is to use IEnumerable for arguments and arrays for return values: public interface Foo { void Do(IEnumerable bars); Bar[] Bars { get; } } My argument for this approach is that the implementation class can create a List directly from the IEnumerable and simply return it with List.ToArray(). However some believe that IList should be returned instead of an array. The problem I have here is that now your required again to copy it with a ReadOnlyCollection before returning. The option of returning IEnumerable seems troublesome for client code? What do you use/prefer? (especially with regards to libraries that will be used by other developers outside your organization)
