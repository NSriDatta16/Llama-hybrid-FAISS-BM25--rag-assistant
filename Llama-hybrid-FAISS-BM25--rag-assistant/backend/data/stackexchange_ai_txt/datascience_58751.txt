[site]: datascience
[post_id]: 58751
[parent_id]: 58217
[tags]: 
You've got an interesting, if over analysed question. I would just say your question itself limits your potential profit. You want to give your computer more choice in this matter. the whole price_good, price_bad approach is price_bad. The computer should decide EVERYTHING in this game and you will want to build in a consideration of previous stock history, share earnings, maybe even public sentiment from twitter, etc. This really seems like the optimal scenario to implement some variant of q-learning. You'll need a lot of data and the stock market is notorious for being difficult for the layman to derive any meaning from. What is Q-learning? Q learning is a deep learning method with allows a computer to find the ideal set of actions to maximize some final score. The system is composed of 3 parts: a deep learning network that predicts the target, a q table that contains the state at a given time and a possible action, and the change in the final score. Read more here: https://towardsdatascience.com/simple-reinforcement-learning-q-learning-fcddc4b6fe56 Really, read that before continuing :) Step 1: You create the q-table (a table of many possible actions). In this case your state will be a vector of the number of shares you hold, the liquid funds you have for buying, and n number of consecutive prices for a stock (You'll also need the next price of the stock for a later step). You will then make a choice: how much of the stock do you want to sell? this number can be any real integer. a negative number indicates selling, a positive number indicates buying and a 0 indicates holding. EDIT: I want to explain a bit more what's going on with the " n number of consecutive prices for a stock". This is where your "timeseries" bit comes into play. It is a vector that looks at a frame of prices at any given time, but it not necessarily the latest frame. It's just a way for you to train on what would have happened in the past if you were making that trade. For example if I have a vector of prices that looks like all_prices below, the frames would look like: all_prices = [12, 13, 14, 13, 14, 15, 16, 17, 18] frame1 = [12, 13, 14, 13] frame2 = [13, 14, 13, 14] frame3 = [14, 13, 14, 15] frame4 = [13, 14, 15, 16] For each state you'll have to add rows to the table of every possible action (everything between sell all and buy with as much cash I have). Then for each row you'll calculate the reward for that action. Now, the reward is calculated based on the next price of the stock. It can be negative (bad) or positive (good). So here's what that table would look like for a single stock: *n_shares* | *cash* | *price_at_t=1* | *price_at_t=2* | .... | *last_reward* | *action* 50 | 1000 | 13.41 | 12.45 | .... | 0 | -10 50 | 1000 | 13.41 | 12.45 | .... | 0 | -5 50 | 1000 | 13.41 | 12.45 | .... | 0 | 0 50 | 1000 | 13.41 | 12.45 | .... | 0 | 5 50 | 1000 | 13.41 | 12.45 | .... | 0 | 10 Step 2: You'll train some deep learning network on each row (state) to predict the reward. yay! Step 3: When you actually want to make a decision on your data, you create a table of all possible states and actions and have your nueral network predict the reward (now it's unknown). You can select the action which maximizes long term reward. Some caveats Now the above really doesn't look at all that much data. You can add in soooo much more and potentially create a better model. I've never done this, but I don't have particularly high hopes for something like this. I'm definitely open to reconsider though. Perhaps if you look at this with each timepoint being the close price, and each day you get one change to sell, buy, or hold, it might be feasible. Otherwise, you'll need an API that allows you to trade (super cool, but I haven't heard of something like this for consumers). Are there better solutions? Yes, this is just a simple reinforcement learning solution. We can do better, but this seemed like a simple starting point to me. Am I liable if you loose all your moneeeys? Nope. Is the above normal q-learning? Not really. I took some shortcuts and glossed over some aspects of it. I do hope that it wasn't too complex and that it helped you understand how to better approach the problem. Will you become a billionaire after this? ....maybe. I hope so. If it starts working, tell me and I'll invest with you.
