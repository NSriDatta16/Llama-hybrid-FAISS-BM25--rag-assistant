[site]: stackoverflow
[post_id]: 883164
[parent_id]: 871354
[tags]: 
It is easier to work with derived classes and virtual functions: each specialized class reading its own input... class base { public: virtual double calc() = 0; }; class get_sqrt : public base { int useless; public: virtual double calc() { cin >> number; return sqrt(number); } } get_sqrt; Now we organize these in a map, and we will only use their pointers: map func; func["sqrt"] = &get_sqrt; There is also a specialized method which only looks at the next character: peek(); char c = cin.peek(); You can get rid of the switch by using 1 if putting ! , + , - , etc. in func ; (they should operate on left_param for simplicity): if (c>='0' && c > right_param; // Get a number, you don't have to put the // character back as it hasn't been removed else { string s; cin >> s; right_param = func[s]->calc(); } So basically some kind of function pointers, but without the messy syntax and in which you could store data between calculations. I thought about the whitespace problem; it can be added before it starts to compute, I also think there could be a way to set different separators, like numbers, but I don't know how.
