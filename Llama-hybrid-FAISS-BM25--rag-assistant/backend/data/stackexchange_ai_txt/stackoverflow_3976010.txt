[site]: stackoverflow
[post_id]: 3976010
[parent_id]: 3609497
[tags]: 
[Edit] Just discovered this 10 month old post of mine. Well, things change. We went from Microsoft to Ruby, Coffeescript, Node.js and a bit of Scala and never regretted it. Heroku and MongoHQ proved to be much better fit for what we are doing. [/Edit] I have two consumer facing sites in beta running on Azure and been playing with it since earliest beta. The Pros: Azure is unbelievably stable. We did not have a single incident although we do process a lot of data. The SDK is comprehensive, well documented and integrated into the IDE. Uptime exceeding the SLA Fast - Azure is really really fast on all aspects Fits very well into the development workflow Very committed employees and MVPs at Microsoft. You get help whenever you need it. We save tremendously on Admin costs. E.g. we don't need one ;-) Easy to scale. This was the biggest selling point. No need for initial capex, and once we get that CNN interview we will just spin up a couple more roles for a day or two. Enterprise class, load balanced database system with SQL Azure. Porting code over is a matter of hours at most. The Cons: No distributed cache - there are memcached solutions out there but it feels like a hack High initial costs when looking at it from a web app scenario (e.g. cost has an undue influence on your application architecture) Very high cost of the NoSQL and queue solution. There is a transaction fee involved that makes some scenarios very complicated to achieve. No realtime (or semi realtime) billing information through an API. The management interface is a disgrace to Microsoft. Microsoft is moving slowly / it takes them a long time to create new features. You are very much locked in as Azure is a PaaS vs Amazon (IaaS) provider. This will change once the VM Roles are available. It takes very long (~ 10 - 30 min) to spin up a new instance Lack of Map/Reduce framework Now some of the cons are serious right now but they should not prevent you from choosing the Azure platform as most of them will probably be resolved at PDC. I think that Azure works for all the scenarios you mentioned, maybe with the exception that due to the lack of distributed caching you will run into troubles at the very high end of web apps for now. I definitely trust Azure more than I trust my bank and a lot of incidents have proven me right over the last couple of years. In the end it comes down to that it is much easier for Microsoft to hire and concentrate top notch security people then non IT companies. And they have much more to lose.
