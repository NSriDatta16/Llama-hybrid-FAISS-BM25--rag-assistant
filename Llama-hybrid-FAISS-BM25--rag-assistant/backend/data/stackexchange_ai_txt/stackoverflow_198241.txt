[site]: stackoverflow
[post_id]: 198241
[parent_id]: 187539
[tags]: 
You're doing a fine job of explaining yourself--no worries. :) Be careful not to confuse application logic with business logic. Application logic is sometimes referred to as application process control , which is probably a more apt name for it. This is basically user actions and system responses. For example, Step 1: User logs in, Step 2: User clicks "Create New Invoice," Step 3: User submits basic information, Step 4: User adds line items, Step 5: User submits the invoice to the invoice database. The steps I've outlined below are process control that applies to any UI you'd design for your invoice application. Business logic, on the other hand, is encapsulated in your models. P is for presentation, yes, but it is not for presentation logic . In most cases, P is going to refer to your client-facing content (e.g., ASPX, JSPX, Ruby on Rails views, etc.)--it is strictly markup. In other words, your controllers provide some behavior for your presentation layer. Given these definitions, you can probably see how, if you created your controllers and models properly, they would be completely UI agnostic. You wouldn't have to cater to the lowest common denominator because they simply encapsulate your process logic and business logic, allowing your presentation layer to cater to the medium via which you're exposing that logic (e.g., the Internet, console, or desktop applications). As a side note, sometimes controllers and models are actually exposed in some other abstracted way (like web services) so that you can have a bunch of UIs or web servers to balance some of your incoming traffic and you can still leverage the same back end. Hope this helps a little?
