[site]: crossvalidated
[post_id]: 90330
[parent_id]: 
[tags]: 
Using KNN (with contributing weights) to calculate ranking

Sorry about the noob question, we tried looking through the answers but couldn't make sense of it. We are very basic with our math/stat knowledge, so please bear with us if this makes less relevant sense. We have a data set - For example sake - scores (out of 100) in N Subjects for 800 students. We have to find most suitable candidates (in descending order) for several Customized Courses. Each Custom Course is a collection of 2 to N Subjects. For example: Custom Course A could be Maths, Eng, Phys, History Custom Course B could be Eng, Geography, Computers. Stats Custom Course C could be History, Geography, Civil. Stats Now, in our limited understanding and researching a solution so far - we have come down to using a simple KNN routine where we use it to find the eucledian distance between an imaginary value (with 100 for all dimensions) and actual score values. That ways we get a list of most suitable candidates in descending order - on the basis of increasing Eucledian distances. Eg: Custom Course A: We try and find nearest neighbors to (100,100,100,100) for Math, Eng, Physics, History with actual scores of 800 students : (35, 44, 32, 86), (19,74,63,82) and so on.. This seems to work fine for us, although we're not sure if we're using this right. Now, the actual problem is that all subject scores for a Custom Course do not contribute equally. They are weighted. Each subject score has a weightage (1 to 5, 1 being least important and 5 being most important). We began looking at Weighted KNN algorithms but haven't been able to figure out how to implement this. Any help would be greatly appreciated. The whole KNN approach itself might be totally wrong for us, in which case do say. Thanks
