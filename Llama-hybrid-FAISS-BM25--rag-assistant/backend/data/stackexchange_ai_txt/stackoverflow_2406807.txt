[site]: stackoverflow
[post_id]: 2406807
[parent_id]: 2406764
[tags]: 
The standard talks about this explicitly - with an example; 6.7/3 "Declaration statement" (emphasis added by me): Variables with automatic storage duration are initialized each time their declaration-statement is executed. Variables with automatic storage duration declared in the block are destroyed on exit from the block . It is possible to transfer into a block, but not in a way that bypasses declarations with initialization. A program that jumps from a point where a local variable with automatic storage duration is not in scope to a point where it is in scope is ill-formed unless the variable has POD type and is declared without an initializer. [Example: void f() { //... goto lx; //ill-formed: jump into scope of a //... ly: X a = 1; //... lx: goto ly; //OK, jump implies destructor //call for a, followed by construction //again immediately following label ly } â€”end example] So it seems to me that MSVC's behavior is not standards compliant - Ghost is not a POD type, so the compiler should issue an error when the the goto statement is coded to jump past it. A couple other compilers I tried (GCC and Digital Mars) issue errors. Comeau issues a warning (but in fairness, my build script for Comeau has it configured for high MSVC compatibility, so it might be following Microsoft's lead intentionally).
