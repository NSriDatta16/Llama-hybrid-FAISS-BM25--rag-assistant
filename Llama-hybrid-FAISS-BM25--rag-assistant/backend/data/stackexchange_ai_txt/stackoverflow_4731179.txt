[site]: stackoverflow
[post_id]: 4731179
[parent_id]: 
[tags]: 
C# using HttpListener and Request.ServerVariables on Windows Forms or Console

Project Objectives: Create a local Proxy Judge using a Console or Windows Form application for debugging and testing connections. Project must request and receive proxy ServerVariables to display on client side. Parse IPAddress and return Anonymity state. Implement Basic Athentifcation Scheme. Project must not use Scripts for functionality (e.g) PHP, Perl, Asp, etc. Multi-platform Compatible (possibilty) Questions: Is it possible to use Request.ServerVariables on a local Windows or Console Application or is it ASP specific? If this method is ASP specific is there another way to request the ServerVariables from a browser session? If the method above is possible what is the proper approach for achieving this functionality? What is a good example for verifing/Setting the Basic Authentification Scheme here? Like setting the password and user to be used and so on. References used: http://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx http://www.java2s.com/Code/CSharpAPI/System.Net/HttpListenerContextResponseStatusCode.htm http://en.cship.org/wiki/ProxyJudge Example Code: using System.IO; using System.Net; using System.Web; using System.Collections.Specialized; namespace IPJudge { public class IPJudgeClass : IHttpModule { public static void Main() { using (HttpListener listener = new HttpListener()) { listener.AuthenticationSchemes = AuthenticationSchemes.None; listener.Prefixes.Add("http://localhost:8080/"); //listener.Prefixes.Add("https://localhost/"); listener.Start(); HttpListenerContext ctx = listener.GetContext(); ctx.Response.StatusCode = 200; string name = ctx.Request.QueryString["name"]; StreamWriter writer = new StreamWriter(ctx.Response.OutputStream); writer.WriteLine(" Hello, {0} ", name); writer.WriteLine(" "); foreach (string header in ctx.Request.Headers.Keys) { writer.WriteLine(" {0}: {1} ", header, ctx.Request.Headers[header]); } writer.WriteLine(" "); writer.Close(); ctx.Response.Close(); listener.Stop(); } } public void Init(HttpApplication app) { app.AcquireRequestState += new System.EventHandler(app_AcquireRequestState); app.PostAcquireRequestState += new System.EventHandler(app_PostAcquireRequestState); } public void app_AcquireRequestState(object o, System.EventArgs e) { HttpApplication httpApp = (HttpApplication)o; HttpContext ctx = HttpContext.Current; ctx.Response.Write(" Executing AcquireRequestState "); ctx.Response.Close(); } public void Dispose() { // TODO: // Add code to clean up the // instance variables of a module. } public void app_PostAcquireRequestState(object o, System.EventArgs e) { HttpApplication httpApp = (HttpApplication)o; HttpContext ctx = HttpContext.Current; string remotehost = ctx.Request.ServerVariables["REMOTE_ADDR"]; string httpuseragent = ctx.Request.ServerVariables["HTTP_USER_AGENT"]; string requstmethod = ctx.Request.ServerVariables["REQUEST_METHOD"]; string httpreferer = ctx.Request.ServerVariables["HTTP_REFERER"]; string HTTPXFORWARDEDFOR = ctx.Request.ServerVariables["HTTP_X_FORWARDED_FOR"]; string HTTPFORWARDEDFOR = ctx.Request.ServerVariables["HTTP_FORWARDED_FOR"]; string HTTPXFORWARDED = ctx.Request.ServerVariables["HTTP_X_FORWARDED"]; ctx.Response.Write(" REMOTE_ADDR: " + remotehost + " "); ctx.Response.Write(" HTTP_USER_AGENT: " + httpuseragent + " "); ctx.Response.Write(" REQUEST_METHOD: " + httpuseragent + " "); ctx.Response.Write(" HTTP_REFERER: " + httpreferer + " "); ctx.Response.Write(" HTTP_X_FORWARDED_FOR: " + httpreferer + " "); ctx.Response.Write(" HTTP_FORWARDED_FOR: " + httpreferer + " "); ctx.Response.Write(" HTTP_X_FORWARDED: " + httpreferer + " "); ctx.Response.Close(); } } }
