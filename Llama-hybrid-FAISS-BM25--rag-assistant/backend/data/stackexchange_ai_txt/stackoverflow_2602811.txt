[site]: stackoverflow
[post_id]: 2602811
[parent_id]: 127704
[tags]: 
Here is an elegant, generic implementation in Scala, as described on 99 Scala Problems . object P26 { def flatMapSublists[A,B](ls: List[A])(f: (List[A]) => List[B]): List[B] = ls match { case Nil => Nil case sublist@(_ :: tail) => f(sublist) ::: flatMapSublists(tail)(f) } def combinations[A](n: Int, ls: List[A]): List[List[A]] = if (n == 0) List(Nil) else flatMapSublists(ls) { sl => combinations(n - 1, sl.tail) map {sl.head :: _} } }
