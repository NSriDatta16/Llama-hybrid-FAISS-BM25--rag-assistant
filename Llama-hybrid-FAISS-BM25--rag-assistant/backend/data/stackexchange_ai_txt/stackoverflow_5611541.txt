[site]: stackoverflow
[post_id]: 5611541
[parent_id]: 5610967
[tags]: 
Oracle has something called ROWID which stores the physical address of a row in a table. They look something like AAAA8mAALAAAAQkAAA which can be broken down into: Data object nr (segment) [AAAA8m] Data file in tablespace [AAL] Data Block (within the data file) [AAAAQk] The row (within the block) [AAA] Using the rowid is the fastest way of physically locating any row in a single block read. They are used internally, but can be used directly by the developer. Looking up a row by primary key, results in one (or a few) index reads to find the rowid, and then the database will locate the block and extract the row. If one knows the rowid, no index lookups are needed. Having said that, one of the pillars of relational databases is that the model is supposed to be independent of physical storage (no pointers). Also, it enables a specific implementation (of a dbms) to optimize and provide additional features transparently. Each time you use a rowid, a Unicorn will die, and poop falls down from heaven. For example, if you shrink a table, or update a partitioned table (causing a row to move to another partition) or if you are rebuilding a table, or export/import a table, or... or... or... the rowid will change. In conclusion: rowid-based access does not provide enough benefits over regular indexed access to be worth the risk of the inevitable failure. Know that they exist and what they are, but don't ever rely on them.
