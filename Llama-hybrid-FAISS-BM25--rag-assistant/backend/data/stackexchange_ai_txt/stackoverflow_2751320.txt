[site]: stackoverflow
[post_id]: 2751320
[parent_id]: 2716686
[tags]: 
There are a few ways of doing this: First, you can simply use an ImageButton , and manually toggle its image drawable on click in Java. This is what the stock Music player on Android does for the shuffle button , for example. Although you won't have control over the button background in its checked state, you'll be able to swap out the image, which may be favorable from an Android UI-consistency perspective. Another option is to use a complex set of drawables and nine-patches to get an image inside a ToggleButton , with the option of changing the background and/or the image resource upon toggle. That's the option I'll show below. But remember, be cautious about UI consistency before doing this. res/layout/foo.xml ... ... res/drawable/shuffle_button.xml res/drawable/toggle_button_background.xml res/drawable/shuffle_button_image.xml Image files btn_default_ .9.png can be found in frameworks/base.git under core/res/res/drawable-hdpi and core/res/res/drawable-mdpi (also ldpi). WARNING : if you use these, your app will look inconsistent on devices with customized OS UIs (i.e. HTC's Sense UI). ic_mp_shuffle_ _btn.9.png need to be nine-patches, so that the image gets centered and not stretched to fit the button. Below are example hdpi versions of the icon: res/drawable-(h|m|ldpi)/ic_mp_shuffle_(on|off)_btn.9.png Final Note : Remember to be consistent with the system UI when possible, and be mindful of the fact that your app may run on devices with customized versions of the OS that have different graphics for UI elements like buttons. An example of this is HTC Sense , which has green buttons in place of the grey/orange/yellow ones in stock Android. So, if you end up copying the btn_default_... PNG files from the open source repository to create a toggle-able button background, you'll break consistency on those devices.
