[site]: stackoverflow
[post_id]: 580803
[parent_id]: 579806
[tags]: 
I think that the second option (the one mentioned in the last paragraph) makes more sense. In the one you had presented you are playing with pointers and indirect access to random process data. The other one would store all the data (either vector or a matrix) in one place - the source_proxy object. The random processes objects are then called with a submatrix to populate as a parameter, and themselves they do not store any data. The proxy manages everything - from providing the source data (for any distinct source) to requesting new data from the generators. So changing a bit your snippet we could end up with something like this: class random_process { // concrete processes would generate and store last data virtual void operator()(submatrix &) = 0; }; class source_proxy { container_type processes; matrix data; data operator[](size_type source_number) const { return a column of data} void next() {/* get new data from the random processes */} }; But I agree with the other comment (Greg) that it is a difficult problem, and depending on the final application may require heavy thinking. It's easy to go into the dead-end resulting in rewriting lots of code...
