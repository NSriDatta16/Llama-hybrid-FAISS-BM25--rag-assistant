[site]: stackoverflow
[post_id]: 5639540
[parent_id]: 
[tags]: 
.NET - A fast lightweight persistent key-value storage

I'm looking for a persistent key-value storage for .NET. The requirements are: Storage is used for objects that are identified by strings and have several optional (named) properties with values that are just byte arrays. For an SQL solution I would model it as one string -> id table, and several id -> blob tables. The expected amount of data is several megabytes (more than 10 Mb is currently unlikely, but scaling up to 100 Mb would be a nice bonus) Lightweight - preferably single-assembly, definitely without external applications Reads are more frequent than writes, at least by a factor of 100. Fast read/write access - I expect in-memory storage and lazy writes on the updates to the data; I can periodically spawn async writes myself, bonus points if the storage does it. Atomic I/O - the database should not break if the process is terminated in the middle of writing; otherwise the data is not critical, i.e. no additional redundancy is needed. Currently I think that SQLite will work here; however it seems to be a slight overkill - I only need key-value storage, not full SQL support. I've also heard of bdb, and of libdb-dotnet binding - it seems to be more lightweight, but I don't know the performance/consistency characteristics. Can anyone recommend something here? Additional references are welcome (i.e. it would be awesome if there's something in .NET Framework that can do the job), as well as experiences with SQLite or libdb-dotnet (or bdb in general) or home-grown solution, if it was painless.
