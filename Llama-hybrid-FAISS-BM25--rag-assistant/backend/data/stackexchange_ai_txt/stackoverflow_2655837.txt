[site]: stackoverflow
[post_id]: 2655837
[parent_id]: 2636637
[tags]: 
If you can't denormalize as suggested by Pascal, you could write your own query handler to do the join: first issue a query on the requested topics that requests the id field of matching documents, then issue a BooleanQuery containing one clause for each id (a TermQuery on subject = id). This will have pretty poor performance if there are a large number of id's, but should be fine if there are just a few matching ids. If you anticipate that your "join" queries will generally match a lot (say hundreds) of subjects, then you're probably better off denormalizing as suggested. I don't know the most elegant way to issue a query from a handler, but FWIW here's how I do it. Map args = new HashMap(); // add your query parameters to the map, like fields to return args.put("fl", new String[]{"id"}); final SolrIndexSearcher searcher = req.getSearcher(); String query = "your query" LocalSolrQueryRequest newReq = new LocalSolrQueryRequest(core, query, "", 0, 0, args) { @Override public SolrIndexSearcher getSearcher() { return searcher; } @Override public void close() { } }; SolrQueryResponse newRsp = new SolrQueryResponse(); core.execute(core.getRequestHandler(newReq.getParams().get(CommonParams.QT)), newReq, newRsp); // query results will be in newRsp
