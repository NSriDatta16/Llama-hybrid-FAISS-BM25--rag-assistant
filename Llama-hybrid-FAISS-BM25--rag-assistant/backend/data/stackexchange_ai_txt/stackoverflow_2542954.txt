[site]: stackoverflow
[post_id]: 2542954
[parent_id]: 2542941
[tags]: 
Use jQuery's each method. Docs . success: function(jsonObj) { $.each(jsonObj, function(i, employee) { alert(employee.Emp_Name); } } Also, AFAIK, alert() on its own won't show a JSON structure. And because it is an object (not an array), I don't think it'll have a length property. Also, is there any reason you would prefer counting down in that for loop to counting up? It is an optimisation trick? Update After seeing some example JSON, i.e. { Table: [ { Row: '1', Emp_Id: '3', Emp_Name: 'Jerome', Address: 'Madurai', Desig_Name: 'Supervisior', SalaryBasis: 'Monthly', FixedSalary: '25000.00' }, { Row: '2', Emp_Id: '4', Emp_Name: 'Mohan', Address: 'Madurai', Desig_Name: 'Acc ', SalaryBasis: 'Monthly', FixedSalary: '200.00' }, { Row: '3', Emp_Id: '5', Emp_Name: 'Murugan', Address: 'Madurai', Desig_Name: 'Mason', SalaryBasis: 'Weekly', FixedSalary: '150.00' }, { Row: '4', Emp_Id: '6', Emp_Name: 'Ram', Address: 'Madurai', Desig_Name: 'Mason', SalaryBasis: 'Weekly', FixedSalary: '120.00' }, { Row: '5', Emp_Id: '7', Emp_Name: 'Raja', Address: 'Madurai', Desig_Name: 'Mason', SalaryBasis: 'Weekly', FixedSalary: '135.00' } ] } it would seem you would want to access an employee name like so $.each(jsonObj.table, function(i, employee) { alert(employee.Emp_Name); }
