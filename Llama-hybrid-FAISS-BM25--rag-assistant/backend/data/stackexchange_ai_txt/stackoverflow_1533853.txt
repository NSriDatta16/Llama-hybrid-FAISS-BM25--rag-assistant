[site]: stackoverflow
[post_id]: 1533853
[parent_id]: 1533568
[tags]: 
DOM methods, as outlined by Tom. innerHTML, as mentioned by iHunger. DOM methods are highly preferable to strings for setting attributes and content. If you ever find yourself writing innerHTML= ' '+text+' ' you're actually creating new cross-site-scripting security holes on the client side, which is a bit sad if you've spent any time securing your server-side. DOM methods are traditionally described as ‘slow’ compared to innerHTML. But this isn't really the whole story. What is slow is inserting a lot of child nodes: for (var i= 0; i This translates to a load of work for the DOM finding the right place in its nodelist to insert the element, moving the other child nodes up, inserting the new node, updating the pointers, and so on. Setting an existing attribute's value, or a text node's data, on the other hand, is very fast; you just change a string pointer and that's it. This is going to be much faster than serialising the parent with innerHTML, changing it, and parsing it back in (and won't lose your unserialisable data like event handlers, JS references and form values). There are techniques to do DOM manipulations without so much slow childNodes walking. In particular, be aware of the possibilities of cloneNode , and using DocumentFragment . But sometimes innerHTML really is quicker. You can still get the best of both worlds by using innerHTML to write your basic structure with placeholders for attribute values and text content, which you then fill in afterwards using DOM. This saves you having to write your own escapehtml() function to get around the escaping/security problems mentioned above.
