[site]: stackoverflow
[post_id]: 5043195
[parent_id]: 5033694
[tags]: 
I would model your requirements with a one-to-many relationship like this: class Player(db.Model): name = db.StringProperty() class DailyHomeruns(db.Model): date = db.DateProperty() counter = db.IntegerProperty() player = db.ReferenceProperty(Player) To retrieve all the DailyHomeruns of a given Player you can do it in this way: daily_homeruns = DailyHomeruns.all().filter('player =', player) .filter('date >', date_start) .filter('date Read Requirement : Google App Engine performance queries scales with the size of the result set and not with the size of the data set. This means that if your last 5 years homeruns query set contains in average 800 entities * , this query performs the same whether it searches over a thousand entities or a million entities. Write Requirement : Writes are slow in Google App Engine but your scenario seems quite trivial and I don't see any possible contention/timeout problem; after all you just need to serially update the DailyHomeruns incrementing the counter for a small number of times per day. Other thoughts : If you need to calculate some stats, for example the total number of Homeruns of a given Player ,don't even think to use GQL for this purpose because it does not provide any aggregate function Ã  la SQL . Instead, you have to design your database upfront, defining a model to store the total count of Homeruns per player. Using the transactions API, each time you increment the DailyHomeruns you will need to increment the TotalHomeruns entity for that Player. * I have estimated 3 matches per week for 52 weeks multiplied per 5 years
