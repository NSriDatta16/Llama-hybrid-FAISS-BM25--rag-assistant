[site]: stackoverflow
[post_id]: 1921098
[parent_id]: 1920998
[tags]: 
Yes, the snippet you have given works, as long as you give the type of the placeholder character. Therefore, the code you are looking for is: val a = autoClosing(_: {def close();}) { println("before close") } which compiles and works as expected :). A couple of notes: You can make your life easier if you define a type alias for an AnyRef type having a close method, something like type Closeable = AnyRef {def close()} , or an appropriate interface. The code snippet autoClosing(_: Closeable){ ... } is actually equivalent to the following expanded anonymous function: c: Closeable => autoClosing(c){ ... } . The wildcard character is just shorthand for a partially applied function. You need to give the type of the _ as the type inferer unfortunately cannot infer the type in this case. Hope it helps, -- Flaviu Cipcigan
