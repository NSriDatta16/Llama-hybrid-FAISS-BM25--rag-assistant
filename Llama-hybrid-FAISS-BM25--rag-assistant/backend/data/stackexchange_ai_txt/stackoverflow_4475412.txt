[site]: stackoverflow
[post_id]: 4475412
[parent_id]: 4467532
[tags]: 
Thanks to samuelkadolph for helping me in the #rubyonrails IRC channel today. He provided a solution in this gist , copied below for convenience: def custom_respond_with(*resources, &block) options = resources.extract_options! if options[:callback] old_block = block block = lambda do |format| old_block.call(format) if block_given? format.json { render :json => [] } end end respond_with(*(resources I haven't tried this in my application yet, but I can see that it should work. He also confirmed that I could similarly override the respond_with method itself simply by changing the name of this method and changing the last line of the definition to super(*(resources . I think this will work for me. However, I'm still interested in knowing how to write a custom responder to do the job. (It would be a more elegant solution, IMHO.) Update: I tried this in my application and it works with some minor changes. Here is the version I'm using now in the private section of my ApplicationController, designed to automatically provide the :callback => params[:callback] option to JSON requests: def custom_respond_with(*resources, &block) options = resources.extract_options! if params[:callback] old_block = block block = lambda do |format| old_block.call(format) if block_given? format.json { render :json => resources, :callback => params[:callback] } end end respond_with(*(resources Note that I had to change if options[:callback] to if params[:callback] in order to get it working.
