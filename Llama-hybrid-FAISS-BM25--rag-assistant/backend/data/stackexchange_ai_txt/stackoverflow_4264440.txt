[site]: stackoverflow
[post_id]: 4264440
[parent_id]: 4113315
[tags]: 
For the first example, consider this record: -record(contact, {name, [phonenumber, phonenumber, ...]}). contact is a record with two fields, name and phone where phone is a list of phone numbers. As user425720 said it could make sense to store these as something else than strings, if you have extreme requirements for small storage footprint, for example. Now here comes the part that is hard to "get" with key-value stores: you need to also store the inverse relationship. In other words, you need something similar to the following: -record(phone, {phonenumber, contactname}). If you have a layer in your application to abstract away database handling, you could make it always add/change the phone records when adding/changing a contact. -- For the second example, consider these two records: -record(contact, {uuid, name, [group_id, group_id]}). -record(group, {uuid, name, [contact_id, contact_id]}). The easiest way is to just store ids pointing to the related records. As Mnesia has no concept of referential integrity, this can become out of sync if you for example delete a group without removing that group from all users. If you need to store the type of group on the contact record, you could use the following: -record(contact, {name, [{family, [group_id, group_id]}, {work, [..]}]}). -- Your second problem could also be solved by using a intermediate record, which you can think of as "membership". -record(contact, {uuid, name, ...}). -record(group, {uuid, name, ...}). -record(membership, {contact_uuid, group_uuid}). # must use 'bag' table type There can be any number of "membership" records. There will be one record for every users group.
