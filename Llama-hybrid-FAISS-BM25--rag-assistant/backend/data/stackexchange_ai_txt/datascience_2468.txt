[site]: datascience
[post_id]: 2468
[parent_id]: 2263
[tags]: 
Storing user profiles If you just want to store all user profiles... just save them into normal RDBMS . Assuming one user profiles takes 10Kb of storage, you need only ~9.5Gb for every million of users, which is pretty little and gives you all advantages of mature relational databases. It makes sense to use HBase only when you have really many users (say, > 1B) or when data is very sparse (most columns are empty). But don't expect it to be as convenient as good old SQL databases. In advertising, and especially in real-time bidding , very fast retrieval of user profiles is needed. Aerospike becomes more and more popular for this task. Analysing data slices Common use of business logs is to analyse specific slices of data, e.g. number of users from France that visited sites from "game" category on November 1-14, 2014. Standard way to manage such data efficiently is to organize them into data cubes . You won't get individual records (e.g. users), but you'll get aggregated statistics really fast. Such cubes may have many different dimensions, but in 99% of cases they have date field that they are partitioned by. It makes great sense, because almost every query includes time period to get data from. As for software, Vertica is great for such aggregations. Cheaper* solution from Hadoop world is Impala , which is also great. (* - if you count only license price) Machine learning It really depends on concrete tasks and ML toolkit in use. For real-time bidding you would want blazing fast access to user profile vectors and would probably prefer Aerospike. For online learning Spark Streaming may be used as a data source, and no storage used at all. For offline machine learning there's excellent MLlib from the same Spark project, which works with a variety of sources.
