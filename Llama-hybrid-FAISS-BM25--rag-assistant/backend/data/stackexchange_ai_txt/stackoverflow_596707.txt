[site]: stackoverflow
[post_id]: 596707
[parent_id]: 596462
[tags]: 
If you use instanceof , making your equals implementation final will preserve the symmetry contract of the method: x.equals(y) == y.equals(x) . If final seems restrictive, carefully examine your notion of object equivalence to make sure that your overriding implementations fully maintain the contract established by the Object class. What I'm trying to get at here is that if you believe getClass() is the only reliable way to preserve symmetry, you are probably using equals() the wrong way. Sure, it's easy to use getClass() to preserve the symmetry required of equals() , but only because x.equals(y) and y.equals(x) are always false. Liskov substitutability would encourage you to find a symmetry-preserving implementation that can yield true when it makes sense. If a subclass has a radically different notion of equality, is it really a subclass?
