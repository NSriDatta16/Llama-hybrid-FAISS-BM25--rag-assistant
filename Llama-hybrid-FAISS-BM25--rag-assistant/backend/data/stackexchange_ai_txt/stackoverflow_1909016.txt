[site]: stackoverflow
[post_id]: 1909016
[parent_id]: 1908911
[tags]: 
The only real downside to serialization is that it has a performance hit. The performance generally scales with variable size; the larger your object, the more serialization time it will take. That being said, it's hard to say which approach will be more performance-savvy here. You're going to take a performance hit for serializing and unserializing your objects, but on the other hand you'd have to re-build them. You'd have to benchmark each method against your average mail objects to get any hard data. As an aside, I'm not sure about your comment that storing the object data in the database ties it to the structure of the object... there's many ways to abstract that out. That being said, there's no overbearing reason to stay away from serialization unless you demand extreme performance, in which case you'll likely end up doing all sorts of your own benchmarks anyway. It sounds like your serialization approach is straightforward and simplistic... I'd continue with it.
