[site]: stackoverflow
[post_id]: 5149308
[parent_id]: 5149228
[tags]: 
The C standard do not impose particular limitation on exit codes, the paragraph about the return value of main delegates to the documentation about the exit() function, which in turn says: If the value of status is zero or EXIT_SUCCESS , an implementation-defined form of the status successful termination is returned. If the value of status is EXIT_FAILURE , an implementation-defined form of the status unsuccessful termination is returned. Otherwise the status returned is implementation-defined. which, apart from the EXIT_SUCCESS / EXIT_FAILURE guidelines, basically means "do whatever you want". :) As said in one comment, the fact that on POSIX systems only the lower 8 bits of the exit code are actually considered is just a UNIXism, deriving from how the wait syscall is designed (the exit status has to be packed in the lower 8 bits of the wait return value), and has nothing to do with the C standard. A counterexample is Windows, where the whole value passed to exit / return is considered (as long as it's not bigger than a DWORD 1 , but I don't think they'll ever make int be bigger than a DWORD , it would break a lot of code). 1. Because the GetExitCodeProcess parameter reserved for returning this value is a DWORD * .
