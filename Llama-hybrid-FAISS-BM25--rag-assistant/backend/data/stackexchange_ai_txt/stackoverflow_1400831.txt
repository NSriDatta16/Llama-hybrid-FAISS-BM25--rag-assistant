[site]: stackoverflow
[post_id]: 1400831
[parent_id]: 
[tags]: 
Is it possible to make "this type" for generics in C#?

Kind of theoretical question. Quite long so feel free to skip if you are not in the mood for theory. Imagine that you have two classes, one inherited from another. The base class is generic and has a method that in the closed type must return some instance of this closed type. Like this (note ??? in text): public class Adapter { public virtual ??? DoSomething() { ... } } public class AdaptedString : Adapter { public override AdaptedString DoSomething() { ... } } I can't do it because there is no way to refer to a closed type that will be derived from a generic type. (Sorry for broken language, just don't know how to express it.) There is no keyword to set in place of ??? to specify that this method will return instance of type that would be derived from this generic type. Instead, I can use a workaround of explicitly passing the type name to the generic base. But it looks redundant. public class Adapter { public virtual TThis DoSomething() { ... } } public class AdaptedString : Adapter { public override AdaptedString DoSomething() { ... } } And if in the base class I need to access members of TThis instance, I have to add a constraint. This time it looks ugly - note the constraint: public class Adapter where TThis : Adapter { protected int _field; ... public bool Compare( TThis obj ) { return _field == obj._field; } } public class AdaptedString : Adapter { ... } Yes, it is all working, but it would look better if I can simply use some keyword instead of ??? in first code fragment. Something like " thistype ". How do you think will it work? Is it useful? Or maybe this is just plain stupid?
