[site]: stackoverflow
[post_id]: 1766351
[parent_id]: 
[tags]: 
Causing push_back in vector to segmentaion fault on what seems to be simple operation

I'm working on a program for Project Euler to add all the digits of 2^1000. So far I've been able to track the program segmentation faults when it reaches around 5 digits and tries to push a one onto the vector at line 61 in the function carry(). #include #include #include using namespace std; class MegaNumber { vector data; //carries an array of numbers under ten, would be char but for simplicity's sake void multiplyAssign(int operand, int index); //the recursive function called by the *= operator void carry(int index);//if one of the data entries becomes more than ten call this function public: void printNumber(); //does what it says on the can void operator*=(MegaNumber operand); void operator*=(int operand); void operator+=(int operand); MegaNumber(string); unsigned long int AddAllDigits();//returns the value of all of the digits summed }; MegaNumber::MegaNumber(string operand) { for(int i= operand.size()-1; i>=0;i--) //run it into the memory smallest digit first { data.push_back(operand[i]-48); //converts a text char to an int } } void MegaNumber::printNumber() { int temp = data.size(); for(unsigned int i=(temp); i>0;--i) { cout 9) { cout 9) carry(index); } void MegaNumber::carry(int index) { int temp = (data[index] / 10); //calculate the amount to carry if(data.size()==index+1) { data.push_back(temp);//if there is no upper digit push it onto the stack } else { data[index+1]+=temp; //else add it to the next digit if(data[index+1]>9) carry(index+1); //rinse and repeat } data[index]-=temp*10; //remove what's been carried } unsigned long int MegaNumber::AddAllDigits() //does what it says on the can { unsigned long int Dagger = 0; for(int i=0; i What may be causing this?
