[site]: stackoverflow
[post_id]: 4629027
[parent_id]: 4618601
[tags]: 
The basic idea in ChaosPandion's code is correct, but there are some fatal flaws that must be fixed in order for this to work reliably. 1) Rather than using a hash of hashes, you need to make a genuinely unique key. One way would be to concatenate the string representations of each element in the parameter array, with a delimiter. This way, once a result has been memoized, it will consistently be retrieved, without false positives. Chaos' trick with the GUID of the method is useful here, but this avoids the problem of depending on GetHashCode being truly unique as well as counting on a fairly simple hash of hashes to remain unique. Instead, the full string will get hashed, but there will be a full character-by-character comparison to rule out mismatches. Admittedly, concatenating a big string is not particularly elegant and might even impact performance. Moreover, this still leaves you with the issue of classes whose ToString does not give instance-specific information. However, there are solutions for this based on reflection. 2) A very simple optimization would be to call LocalCache.Get just once in Complete . This is a potentially expensive operation, so there's really no excuse for doubling the cost. Other than that, go with what ChaosPandion suggested.
