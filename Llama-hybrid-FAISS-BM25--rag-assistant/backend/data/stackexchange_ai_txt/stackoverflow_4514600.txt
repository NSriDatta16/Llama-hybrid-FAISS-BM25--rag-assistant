[site]: stackoverflow
[post_id]: 4514600
[parent_id]: 4514458
[tags]: 
There are two common(*) models of computation : the Lambda Calculus (LC) model and the Turing Machine (TM) model. Lambda Calculus approaches computation by representing it using a mathematical formalism in which results are produced through the composition of functions over a domain of types. LC is also related to Combinatory Logic , which is considered a more generalized approach to the same topic. The Turing Machine model approaches computation by representing it as the manipulation of symbols stored on idealized storage using a body of basic operations (like addition, mutation, etc). These different models of computation are the basis for different families of programming languages. Lambda Calculus has given rise to languages like ML , Scheme , and Haskell . The Turing Model has given rise to C , C++ , Pascal , and others. As a generalization, most functional programming languages have a theoretical basis in lambda calculus. Due to the nature of Lambda Calculus, certain proofs are possible about the behavior of systems built on its principles. In fact, provability (ie correctness ) is an important concept in LC, and makes possible certain kinds of reasoning and conclusions about LC systems. LC is also related to (and relies on) type theory and category theory. By contrast, Turing models rely less on type theory and more on structuring computation as a series of state transitions in the underlying model. Turing Machine models of computation are more difficult to make assertions about and do not lend themselves to the same kinds of mathematical proofs and manipulation that LC-based programs do. However, this does not mean that no such analysis is possible - some important aspects of TM models is used when studying virtualization and static analysis of programs. Because functional programming relies on careful selection of types and transformation between types, FP can be perceived as more "mathematical". (*) Other models of computation exist as well, but they are less relevant to this discussion.
