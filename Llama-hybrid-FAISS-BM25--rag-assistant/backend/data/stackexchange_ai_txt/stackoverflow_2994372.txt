[site]: stackoverflow
[post_id]: 2994372
[parent_id]: 
[tags]: 
Which source control paradigm and solution to embed in a custom editor application?

I am building an application that manages a number of custom objects, which may be edited concurrently by multiple users (using different instances of the application). These objects have an underlying serialized representation, and my plan is to persist them (through my application UI) in an external source control system. Of course this implies that my application can check the current version of an object for updates, a merging interface for each object, etc. My question is what source control paradigm(s) and specific solution(s) to support and why. The way I (perhaps naively) see the source control world is three general paradigms: Single-repository, locked access (MS SourceSafe) Single-repository, concurrent access (CVS/SVN) Distributed (Mercurial, Git) I haven't heard of anyone using #1 for quite a number of years, so I am planning to disregard this case altogether (unless I get a compelling argument otherwise). However, I'm at a loss as to whether to support #2 or #3, and which specific implementations. I'm concerned that the use paradigms are subtly different enough that I can't adequately capture basic operations in a single UI. The last bit of information I should convey is that this application is intended to be deployed in a commercial setting, where a source control system may already be in use. I would prefer not to support more than one solution unless it's really a deal-breaker, so wide adoption in a corporate setting is a plus. Update : I'm specifically looking for a few bits of reasoning: Which paradigm makes sense either because it's commercially accepted? (I think this one has been answered by @Andrew Colson, but others' experience may differ) Is it a reasonable assumption that an average commercial development shop would prefer to utilize an existing source control system, versus maintaining a second one for my application (given that my app fulfills a non-trivial need that is separate from normal development processes)? For my needs, am I correct in assuming that #2 and #3 cannot be reasonably captured into a single set of operations, without distorting one of those paradigms? For the paradigm you think I should use, which specific implementation(s) do you think are critical to support?
