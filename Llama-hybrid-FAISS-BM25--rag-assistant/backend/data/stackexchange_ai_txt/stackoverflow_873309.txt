[site]: stackoverflow
[post_id]: 873309
[parent_id]: 873278
[tags]: 
Most image processing is feature detection, segmentation of a scene, fault finding, classification and tracking .... You might want to take a peek at the book: Image Processing in C (applicable for other languages too) Image Processing - Principles and Applications Which describes many fast and effective means of many image transformations. These two books helped me when I was processing images :) If I understand your question ... If you are re-aligning or assembling many images, and you don't have orientation as well as position, you can use these algorithms for re-alignment of edges and common features. If you are stitching by position then these algorithms will help in re-sampling/resizing your images for more efficient assembly. There are also some open source libraries for these kinds of things. (OpenCV comes to mind) edit : If I were re-projecting large images into new projections based on position conversion (and it were dynamic, not static) I would look into building an on-demand application that will refactor images given required resolution and desired position. The application can then pull the nearest resolution of the relative neighbourhood images and provide a result at the desired resolution. Without more background, I hope this helps! edit 2 : Comment from answer below: Depends on the images. If they are fixed size then an array might be good. If they vary then it might be better to implement a system that provides get/setpixel using relative sampling/averaging to match up images of differing res? I don't know the ins and outs of the images you are working with, and what you are doing, but often abstracting what a 'pixel' is rather than accessing values in an array is useful. This way you can implement conversion, sampling, rotating, correcting algorithms on the backend. Like GetVPixel() or SetVPixel(). This may be more useful when working with multiple, differing res/format images. Like SetVPixel(img1, coord1, GetVPixel(img2, coord2)) Obviously in an OOP/C# manner. img1 and img2 can be different in size, res, geographics, alignment or anything else providing your backend understands both.
