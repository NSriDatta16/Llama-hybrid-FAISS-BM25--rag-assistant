[site]: crossvalidated
[post_id]: 599444
[parent_id]: 
[tags]: 
Better understanding of belief propagation message to parents formula

I've been reading through lots of university lecture slideshows and various websites describing belief propagation. I'm not a math person, so it's really tough to understand the formulas and they don't always seem consistent. For instance, some don't seem to mention conditional probability tables. I've really been trying to track down a good non-math explanation of the algorithms involved. I've been able to find this: https://towardsdatascience.com/belief-propagation-in-bayesian-networks-29f51fdc839c The above reference has a very good example about two neighbors and probability of it raining versus sprinkler being left on. And also, the code is fairly good. I'm not a python expert, but I've kind of been able to decipher it. However, I'm still not quite understanding the logic of message passing from children to parent. The particular section of the above reference, has this example of sending from child (holmes) to parent (rain): message = np.zeros(rain.cardinality) for r in rain: for s in sprinkler: for h in holmes: message[r] = probas[r, s, h] \ * sprinkler_message[s] \ * likelihood[h] This is a very good explanation and has really helped me except for that I think it's wrong. Since the sprinkler and holmes variables have more than 1 state, message[r] is only going to have a value for the last state of sprinkler and last state of holmes. I suspect the author meant to either add or multiply the calculated value to the existing message[r] value. For instance: message = np.zeros(rain.cardinality) for r in rain: for s in sprinkler: for h in holmes: message[r] = message[r] + probas[r, s, h] \ * sprinkler_message[s] \ * likelihood[h] or message = np.zeros(rain.cardinality) for r in rain: for s in sprinkler: for h in holmes: message[r] = message[r] * probas[r, s, h] \ * sprinkler_message[s] \ * likelihood[h] His actual python code doesn't show any additions as best I can tell. In testing, it seemed like addition was the correct choice. That's my first hang-up. The next is what to do when there are more variables. For instance, let's say we also have a variable that represents flooding from a neighboring dam. Does that mean we end up with the following formula for child to parent messaging? message = np.zeros(rain.cardinality) for r in rain: for s in sprinkler: for f in flood: for h in holmes: message[r] = message[r] + probas[r, s, f, h] \ * sprinkler_message[s] \ * flood_message[f] \ * likelihood[h]
