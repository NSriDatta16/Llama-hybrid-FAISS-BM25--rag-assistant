[site]: stackoverflow
[post_id]: 4151944
[parent_id]: 4138347
[tags]: 
A few observations which might help other answerers as well: The values 1..q are interchangeable - they could be letters and the result would be the same. The constraints that no neighbours match is a very mild one, so a brute force approach will be excessively expensive. Even if you knew the values in all but one cell, there would still be at least q-8 possibilities for q>8. The output of this will be pretty long - every set of i,j,k,l will need a line. The number of combinations is something like n 2 (n 2 -3), since the two fixed zeroes can be anywhere except adjacent to each other, unless they need not obey the first rule. For n=100 and q=18, the maximally hard case, this is ~ 100 4 = 100 million. So that's your minimum complexity, and is unavoidable as the problem is currently stated. There are simple cases - when q=2, there are the two possible checkerboards, so for any given pair of zeroes the answer is 1. Point 3 makes the whole program O( n 2 (n 2 -3) ) as a minimum, and also suggests that you will need something reasonably efficient for each pair of zeroes as simply writing 100 million lines without any computation will take a while. For reference, at a second per line, that is 1x10 8 s ~ 3 years, or 3 months on a 12-core box. I suspect that there is an elegant answer given a pair of zeroes, but I'm not sure that there is an analytic solution to it. Given that you can do it with 2 or 3 colours depending on the positions of the zeroes, you could split the map into a series of regions, each of which uses only 2 or 3 colours, and then it's just the number of different combinations of 2 or 3 in q (qC2 or qC3) for each region times the number of regions, times the number of ways of splitting the map.
