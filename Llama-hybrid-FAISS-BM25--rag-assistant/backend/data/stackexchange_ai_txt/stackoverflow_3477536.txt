[site]: stackoverflow
[post_id]: 3477536
[parent_id]: 3477442
[tags]: 
I posed this problem as homework last semester, and two students, which I had considered to be average, surprised me by coming up with a very elegant, straightforward, and (probably) optimal algorithm: Find(k, tab, x, y) let m = tab[x][y] if k = m then return "Found" else if k > m then return Find(k, tab, x, y + 1) else return Find(k, tab, x - 1, y) This algorithm eliminates either one line or one column at every call (note that it is tail recursive, and could be transformed into a loop, thereby avoiding the recursive calls). Thus, if your matrix is n*m, the algorithm performs in O(n+m). This solution is better than the dichotomic search spin off (which the solution I expected when handing out this problem). EDIT : I fixed a typo (k became x in the recursive calls) and also, as Chris pointed out, this should initially be called with the "upper right" corner, that is Find(k, tab, n, 1), where n is the number of lines.
