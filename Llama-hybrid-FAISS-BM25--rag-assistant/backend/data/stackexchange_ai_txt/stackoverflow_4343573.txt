[site]: stackoverflow
[post_id]: 4343573
[parent_id]: 4343026
[tags]: 
Volatile is a storage class which tells the compiler to fetch the value from memory every time it is accessed and write to it every time it is written. It is usually used when some entity other than your program may also change the value at a certain address. Compilers optimize the programs in many ways. For example if you have following code: int *ptr=0x12345678; int a; *ptr=0x10; a=*ptr; then the compiler may optimize the statement a=*ptr; to a=0x10; to avoid memory access. the justification is that because you just wrote 0x10; to *ptr so when you read *ptr you are going to get 0x10. In normal cases this assumption is true but consider the case where the address 0x12345678 is the address of some memory mapped register of an embedded system's UART and writing 0x10 to it tells it to read a character from console attached. The character that is read is then written back to address 0x12345678 so the user can get it from there. Now in this case the above optimization will cause problems. So you want something to tell the compiler to to read/write the value to pointer every time it is accessed and don't optimize accesses to it. So you declare the pointer ptr volatile telling the compiler not to optimize accesses to it. volatile int *ptr=0x12345678;
