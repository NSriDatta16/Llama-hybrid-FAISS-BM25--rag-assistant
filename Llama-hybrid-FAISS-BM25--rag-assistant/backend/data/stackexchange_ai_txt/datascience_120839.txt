[site]: datascience
[post_id]: 120839
[parent_id]: 
[tags]: 
How to organize such rich features?

Let me describe the dataset: 250 patients, each patient visited the doctor every 3 months. The minimum number of visits is 4 and the maximum is 17. For each visit there are peptides that are part of a protein. For each peptide there is chemical information and the abundance of this peptide in the patient. The target feature is numeric, between 0-100, and describes severity of symptoms. Now I'll describe my initial approach, the problem, the fix I considered, and what may be problematic with it. My initial approach was to aggregate the peptide chemical information for each protein (sum, mean, std, max, min), and then have 250 time-series with a column for each protein-aggregation (patients without a protein will have 0 in all the columns of that protein, as well as a 0 in a column called 'has_protein_{protein_name}'). I applied PCA to the entire dataset (the timeseries combined), split them again and padded (shape is (250,17,features)) and fed them into LSTM, and after optimization using a validation set, I tried to run the model on the testing set. That is when I found out there are also proteins in the testing set that do not show up in the training set (initially I thought only peptides). Note to self: Proper EDA could've saved you many minutes! My proposed fix is to first cluster the proteins based on the aggregations of their peptide chemical information, and then make features out of the aggregations of the clusters. For clarification purposes, this would be the structure of a single timeseries with 9 time-steps, assuming maximum time-steps in training is 17, with 2 protein clusters, 2 chemical information columns, 2 aggregation functions used (sum and mean), and post-padding. Where c1 refers to cluster 1, a refers to the abundance in the patient, i1 refers to the first column of chemical information, s is for sum, m for mean, the first s\m means the aggregation that was used on the peptides of the proteins that make up the cluster, and the second means the aggregation that was used on the clusters themselves For example c1_i1_s_m was calculated by first summing all of information1 of the peptides that make up the proteins of cluster 1, and then taking the mean of the sums of information1 for each protein in cluster 1. The problem I think this design has is twofold: first, the number of dimensions in the model will increase exponentially with the number of clusters and aggregation functions. This is treatable with PCA, but still, something to consider. Second: all of the aggregations might cause a loss of a lot of information as they contain only cluster-cluster relationships. No information on peptide-peptide relationships, protein-protein relationships, etc. Given the data that I have, is there another possible way to implement a model to predict the target? What are your ideas? Thoughts? Anything really! Thanks a lot :)
