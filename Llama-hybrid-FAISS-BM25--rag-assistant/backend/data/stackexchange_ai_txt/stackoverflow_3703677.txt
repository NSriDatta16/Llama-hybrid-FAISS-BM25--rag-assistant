[site]: stackoverflow
[post_id]: 3703677
[parent_id]: 
[tags]: 
Python: split list into chunks of defined size and fill up rest

I want to split my list into rows that have all the same number of columns, I'm looking for the best (most elegant/pythonic) way to achieve this: >>> split.split_size([1,2,3], 5, 0) [[1, 2, 3, 0, 0]] >>> split.split_size([1,2,3,4,5], 5, 0) [[1, 2, 3, 4, 5]] >>> split.split_size([1,2,3,4,5,6], 5, 0) [[1, 2, 3, 4, 5], [6, 0, 0, 0, 0]] >>> split.split_size([1,2,3,4,5,6,7], 5, 0) [[1, 2, 3, 4, 5], [6, 7, 0, 0, 0]] That's what I came up with so far: def split_size(l, size, fillup): """ splits list into chunks of defined size, fills up last chunk with fillup if below size """ # len(l) % size or size # does i.e. size=5: 3->2, 4->1, 5->0 stack = l + [fillup] * (size - (len(l) % size or size)) result = [] while len(stack) > 0: result.append(stack[:5]) del stack[:5] return result I'm sure there must be some smarter solutions. Especially for the "inverse mod" part: len(l) % size or size there must be a more readable way to do this, no?
