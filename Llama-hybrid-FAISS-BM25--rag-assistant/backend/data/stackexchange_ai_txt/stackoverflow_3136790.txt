[site]: stackoverflow
[post_id]: 3136790
[parent_id]: 
[tags]: 
Using boost::mpl::lambda to remove types from a boost::mpl::list based on static const member variable

I have a list of types defined as: typedef boost::mpl::list OriginalList; I would like to create a second list that does not contain any fruit, i.e. the resultant list formed from the first list would contain a single type Brick. Fruit is identified through a static const variable defined within the types, e.g.: struct Apple { static const bool IsFruit = true; }; I currently have a solution that involves creating a meta-function class, and using boost::mpl::remove_if . I believe I should be able to make this more elegant by using boost::mpl::lambda to remove the need for the separate RemoveFruit struct. Any suggestions on how to do this? Full code as it currently stands: include #include #include #include #include struct Apple { static const bool IsFruit = true; }; struct Pear { static const bool IsFruit = true; }; struct Brick { static const bool IsFruit = false; }; typedef boost::mpl::list OriginalList; BOOST_STATIC_ASSERT(boost::mpl::size ::type::value == 3); // This is what I would like to get rid of: struct RemoveFruit { template struct apply { typedef boost::mpl::bool_ type; }; }; // Assuming I can embed some predicate directly in here? typedef boost::mpl::remove_if ::type NoFruitList; BOOST_STATIC_ASSERT(boost::mpl::size ::type::value == 1); int main() { std::cout ::type::value ::type::value
