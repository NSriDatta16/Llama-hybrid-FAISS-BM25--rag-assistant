[site]: stackoverflow
[post_id]: 4599062
[parent_id]: 4598351
[tags]: 
As Brian implies , you'll want a weighted graph - the weight on each edge should be the time it takes a train travel between the stations at either end. However, that's not enough: you also need to account for the dwell time trains spend sitting at platforms, the time it takes to walk between platforms on different lines at stations, and the time you spend waiting for a train once you're at the platform. Happily, you can do this within the framework of a weighted, directed graph. You just need to represent each station as a small sub-graph. To use Finsbury Park, the centre of the entire network and indeed the universe, as an example, you would have nodes for: The entrance to the station (there are three, but you can just pick one) A passenger standing on the southbound Victoria line platform The arrival of trains on the southbound Victoria line platform The departure of trains from the southbound Victoria line platform Equivalents of nodes 2-4 for the other three platforms You then have edges between them: From the entrance to standing on each platform, weighted as the time taken to walk between them From each platform back to the entrance, weighted in the same way (this is probably the same time, so you could just make this edge bidirectional) From the arrival of a train to the platform, with weight zero (because it takes no time to step off a train) Between each pair of platforms, with weight equal to the time taken to walk between them From the platform to the departure of a train, with weight equal to half the interval between successive trains (because if you arrive on a platform at a random time, that's the average time you will have to wait for a train) From the arrival of a train to the departure of a train on the same platform, with weight equal to the dwell time (as long as this is less than the half-interval, otherwise it will seem quicker to change trains at every station!) You then connect each departure node to the arrival node at the next station down the line. To plan a route from A to B, you find a path between the nodes for the entrances of the stations. The route will include not only the time spent on trains, but also changing between them. For many stations, you could consider many of the dwell and interchange times to be zero, but for some, they are significant: changing between the Victoria and Piccadilly lines at Green Park, for instance, or the dwell time on the Circle line at Aldgate. You should account for those, or you'll make the wrong plans for shorter journeys. You definitely need to account for frequency, too - it makes a significant difference between a plan featuring, say, the Circle line, where you can expect to spend three and a half minutes just waiting for a train to turn up, and the Central line, where it's only one. One thing this approach still doesn't account for is the way frequency splits between branches. For example, you can model the wait for a northbound train at Tufnell Park as taking 1.5 minutes in the peak, but if you're going to Mill Hill East, you may have to wait longer, as most trains will be to Barnet. You probably need to add some time to the Finchley Central - Mill Hill East edge to account for this, but i'm not certain how well that generally applicable that is. As for search algorithms, Dijkstra's algorithm will do, but A* would be the classic option.
