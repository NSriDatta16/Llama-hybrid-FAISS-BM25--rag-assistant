[site]: stackoverflow
[post_id]: 3445011
[parent_id]: 3444446
[tags]: 
Update: I tried to reproduce the issue. I created a simple Wicket project (same version as you): mvn archetype:create \ -DarchetypeGroupId=org.apache.wicket \ -DarchetypeArtifactId=wicket-archetype-quickstart \ -DarchetypeVersion=1.4.9 \ -DgroupId=com.mycompany \ -DartifactId=my-wicketapp Which has a simple log4j.properties logging to the standard output. log4j.appender.Stdout=org.apache.log4j.ConsoleAppender log4j.appender.Stdout.layout=org.apache.log4j.PatternLayout log4j.appender.Stdout.layout.conversionPattern=%-5p - %-26.26c{1} - %m\n log4j.rootLogger=INFO,Stdout log4j.logger.org.apache.wicket=INFO log4j.logger.org.apache.wicket.protocol.http.HttpSessionStore=INFO log4j.logger.org.apache.wicket.version=INFO log4j.logger.org.apache.wicket.RequestCycle=INFO Then: I added all your dependencies (or modified the versions of existing one to match yours) I just did some cleanup e.g. in the Hibernate dependencies, you don't need to declare them all, leverage the transitive dependencies mechanism I added relevant repositories and pluginRepositories I added glassfish's javax.servlet dependency to make the build pass I added the embedded-glassfish plugin to test the whole thing I made a few other unrelated changes I changed the compiler settings to 1.6 I declared slf4j-api in the dependencyManagement element to control nicely the version in transitive dependencies. The full pom.xml looks like this (so anybody can reproduce): 4.0.0 com.mycompany my-wicketapp war 1.0-SNAPSHOT quickstart company name company url --> The Apache Software License, Version 2.0 http://www.apache.org/licenses/LICENSE-2.0.txt repo repository.jboss.org-public JBoss repository https://repository.jboss.org/nexus/content/groups/public java.net2 Repository hosting the jee6 artifacts http://download.java.net/maven/2 glassfish GlassFish Maven 2 Repository http://download.java.net/maven/glassfish org.slf4j slf4j-api ${slf4j.version} org.hibernate hibernate-entitymanager 3.5.5-Final com.google.guava guava r05 org.glassfish javax.servlet 3.0.1 provided org.glassfish bean-validator 3.0-JBoss-4.0.0.Beta3 provided javax javaee-api 6.0 provided org.apache.wicket wicket ${wicket.version} org.apache.wicket wicket-auth-roles ${wicket.version} org.jboss.weld weld-wicket 1.0.1-Final org.apache.wicket wicket-extensions ${wicket.version} --> org.slf4j slf4j-log4j12 ${slf4j.version} log4j log4j 1.2.16 junit junit 4.7 test org.glassfish.extras glassfish-embedded-all 3.0.1 test org.mortbay.jetty jetty ${jetty.version} provided org.mortbay.jetty jetty-util ${jetty.version} provided org.mortbay.jetty jetty-management ${jetty.version} provided false src/main/resources false src/main/java ** **/*.java false src/test/java ** **/*.java true org.apache.maven.plugins maven-compiler-plugin 1.6 1.6 true true org.mortbay.jetty maven-jetty-plugin org.apache.maven.plugins maven-eclipse-plugin true org.glassfish maven-embedded-glassfish-plugin 3.0.1 server server ${project.build.directory}/${project.build.finalName}.war 8080 ${project.build.directory}/gfe-${maven.build.timestamp} ${build.finalName} true ${basedir}/domain.xml 1.4.9 6.1.4 1.5.6 And when I run the project with the embedded-glassfish plugin: $ mvn package ... $ mvn embedded-glassfish:run ... and access http://localhost:8080/server in a browser, I get my logs in the standard output as expected: ... INFO: [WicketApplication] Started Wicket version 1.4.9 in development mode ******************************************************************** *** WARNING: Wicket is running in DEVELOPMENT mode. *** *** ^^^^^^^^^^^ *** *** Do NOT deploy to your live server(s) without changing this. *** *** See Application#getConfigurationType() for more information. *** ******************************************************************** I wonder if this is representative or not. I have checked the war, log4j.properties is indeed in WEB-INF/classes. I don't have a log4j.jar, i have slf4j-log4j12.jar. slf4j-log4j12.jar is not a replacement for log4j.jar, slf4j-log4j12.jar is a binding for log4J version 1.2, you still need log4j.jar. From the SLF4J documentation: Binding with a logging framework at deployment time As mentioned previously, SLF4J supports various logging frameworks. The SLF4J distribution ships with several jar files referred to as "SLF4J bindings", with each binding corresponding to a supported framework. slf4j-log4j12-1.6.1.jar : Binding for log4j version 1.2, a widely used logging framework. You also need to place log4j.jar on your class path. I wonder how you got this working under NetBeans and Eclipse.
