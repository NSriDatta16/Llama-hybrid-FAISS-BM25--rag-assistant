[site]: stackoverflow
[post_id]: 337224
[parent_id]: 334382
[tags]: 
This is a dirty solution I used for the moment (get it working then get it right, right?). I had already created a new class that inherits the UserControl class and from which all other "UserControls" I created were derived. I called it formPartial (nod to Rails), and this is going inside the public string renderMyHTML() method: TextWriter myTextWriter = new StringWriter(); HtmlTextWriter myWriter = new HtmlTextWriter(myTextWriter); UserControl myDuplicate = new UserControl(); TextBox blankTextBox; foreach (Control tmpControl in this.Controls) { switch (tmpControl.GetType().ToString()) { case "System.Web.UI.LiteralControl": blankLiteral = new LiteralControl(); blankLiteral.Text = ((LiteralControl)tmpControl).Text; myDuplicate.Controls.Add(blankLiteral); break; case "System.Web.UI.WebControls.TextBox": blankTextBox = new TextBox(); blankTextBox.ID = ((TextBox)tmpControl).ID; blankTextBox.Text = ((TextBox)tmpControl).Text; myDuplicate.Controls.Add(blankTextBox); break; // ...other types of controls (ddls, checkboxes, etc.) } } myDuplicate.RenderControl(myWriter); return myTextWriter.ToString(); Drawbacks off the top of my head: You need a case statement with every possible control (or controls you expect). You need to transfer all the important attributes from the existing control (textbox, etc) to the new blank control. Doesn't take full advantage of Controls' RenderControl method. It'd be easy to mess up 1 or 2. Hopefully, though, this helps someone else come up with a more elegant solution.
