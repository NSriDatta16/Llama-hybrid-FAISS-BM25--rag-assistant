[site]: stackoverflow
[post_id]: 577778
[parent_id]: 134727
[tags]: 
HTML5 has several goals which differentiate it from HTML4. Consistency in Handling Malformed Documents The primary one is consistent, defined error handling . As you know, HTML purposely supports 'tag soup', or the ability to write malformed code and have it corrected into a valid document. The problem is that the rules for doing this aren't written down anywhere. When a new browser vendor wants to enter the market, they just have to test malformed documents in various browsers (especially IE) and reverse-engineer their error handling. If they don't, then many pages won't display correctly (estimates place roughly 90% of pages on the net as being at least somewhat malformed). So, HTML5 is attempting to discover and codify this error handling, so that browser developers can all standardize and greatly reduce the time and money required to display things consistently. As well, long in the future after HTML has died as a document format, historians may still want to read our documents, and having a completely defined parsing algorithm will greatly aid this. Better Web Application Features The secondary goal of HTML5 is to develop the ability of the browser to be an application platform, via HTML, CSS, and Javascript. Many elements have been added directly to the language that are currently (in HTML4) Flash or JS-based hacks, such as , , and . Useful things such as Local Storage (a js-accessible browser-built-in key-value database, for storing information beyond what cookies can hold), new input types such as date for which the browser can expose easy user interface (so that we don't have to use our js-based calendar date-pickers), and browser-supported form validation will make developing web applications much simpler for the developers, and make them much faster for the users (since many things will be supported natively, rather than hacked in via javascript). Improved Element Semantics There are many other smaller efforts taking place in HTML5, such as better-defined semantic roles for existing elements ( and now actually mean something different, and even and have vague semantics that should work well when parsing legacy documents) and adding new elements with useful semantics - , , , , and should replace the majority of s used on a web page, making your pages a bit more semantic, but more importantly, easier to read . No more painful scanning to see just what that random is closing - instead you'll have an obvious , or , making the structure of your document much more intuitive.
