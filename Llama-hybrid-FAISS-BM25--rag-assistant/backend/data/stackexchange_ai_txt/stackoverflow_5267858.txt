[site]: stackoverflow
[post_id]: 5267858
[parent_id]: 5267730
[tags]: 
Some reasons why recursive implementations can be as efficient as iterative ones under certain circumstances: Compilers can be clever enough to optimise out the function call for certain functions, e.g. by converting a tail-recursive function into a loop. I strongly suspect some of the modern JIT compilers for Java do this. Modern processors do branch prediction and speculative execution, which can mean that the cost of a function call is minimal , or at least not much more than the cost of an iterative loop In situations where you need a small amount local storage on each level of recursion, it is often more efficient to put this on the stack via a recursive function call than to allocate it in some other way (e.g. via a queue in heap memory). My general advice however is don't bother worrying about this - the difference is so small that it is very unlikely to make a difference in your overall performance.
