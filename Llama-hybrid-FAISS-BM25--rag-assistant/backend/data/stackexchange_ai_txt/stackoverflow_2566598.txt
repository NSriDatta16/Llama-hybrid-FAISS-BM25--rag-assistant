[site]: stackoverflow
[post_id]: 2566598
[parent_id]: 2561139
[tags]: 
Ok, so I've tested many options and ended up with something based on the idea of Matthieu M. . I'm currently using a std::map > , where the value_type contains a std::list ::iterator to itself, which is useful for removal. Removal must check if the vector is empty, which implies a map query and possibly a call to erase . Worst-case complexity is when keys are distinct, O(logN) for insertion, O(1) for retrieval and O(logN) for removal. I've got very good experimental results comparing to other alternatives on my test machine. Using a std::vector is less efficient both in terms of theoretical complexity (O(N) worst-case for removal when keys are identical) and experimentation I've been doing.
