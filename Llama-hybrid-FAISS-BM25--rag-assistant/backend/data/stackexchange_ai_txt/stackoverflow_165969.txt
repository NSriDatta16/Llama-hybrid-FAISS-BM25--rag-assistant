[site]: stackoverflow
[post_id]: 165969
[parent_id]: 150514
[tags]: 
on a slightly different tack. The idea of using a class method to do this feels wrong from an OO point of view. You should really refactor this so that it works from an instance method. def personal_data_module item_module = Hpricot(body) { :studies => (item_module/"studies").inner_html, :birth_place => (item_module/"birth_place").inner_html, :marrital_status => (item_module/"marrital_status").inner_html } end Then, where you need to use it, instead of doing.... Foobar.get_personal_data_module(the_id) you would do Foobar.find_by_person_id(the_id).personal_data_module This looks worse, but in fact, thats a bit artificial, normally, you would be referencing this from some other object, where in fact you would have a 'handle' on the person object, so would not have to construct it yourself. For instance, if you have another class, where you reference person_id as a foreign key, you would have class Organisation belongs_to :person end then, where you have an organisation, you could go organisation.person.personal_information_module Yes, I know, that breaks demeter, so it would be better to wrap it in a delegate class Organisation belongs_to :person def personal_info_module person.personal_info_module end end And then from controller code, you could just say organisation.personal_info_module without worrying about where it comes from at all. This is because a 'personal_data_module' is really an attribute of that class, not something to be accessed through a class method. But this also brings up some questions, for instance, is person_id the primary key of this table? is this a legacy situation where the primary key of the table is not called 'id'? If this is the case, have you told ActiveRecord about this or do you have to use 'find_by_person_id' all over where you would really want to write 'find'?
