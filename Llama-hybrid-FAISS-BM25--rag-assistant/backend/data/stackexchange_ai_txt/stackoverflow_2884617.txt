[site]: stackoverflow
[post_id]: 2884617
[parent_id]: 
[tags]: 
What db fits me?

I am currently using mysql. I am finding that my schema is getting incredibly complicated. I seek to find a new db that will suit my needs: Let's assume I am building a news aggregrator (which collects news from multiple website). I then run algorithms to determine if two news from different sites are actually referring to the same topic. I run this algorithm to cluster news together. The relationship is depicted below: cluster \--news1 \--word1 \--word2 \--news2 \--word3 \--news3 \--word1 \--word3 And then I will apply some magic and determine the importance of each word. Summing all the importance of each word gives me the importance of a news article. Summing the importance of each news article gives me the importance of a cluster. Note that above cluster there are also subgroups( like split by region etc), and categories (like sports, etc) which I have to determine the importance of that in a particular day per se. I have used views in the past to do so, but I realized that views are very slow. So i will normally do an insert into an actual table and index them for better performance. As you can see this leads to multiple tables derived like (cluster, importance), (news, importance), (words, importance) etc which can get pretty messy. Also the "importance" metric will change. It has become increasingly difficult to alter tables, update data (which I am using TRUNCATE TABLE) and then inserting from null. I am currently looking into something schemaless like Mongodb. I do not need distributedness. I would very much want something that is reasonably fast (which can be indexed) and something that is a lot more flexible that traditional RDMBS. NEW As requested by various people, I will post my usage to this database (they are not actual SQL queries since I hope everyone here could understand) TABLE word ( word_id, news_id, word ) TABLE news ( news_id, date, site .. ) TABLE clusters ( cluster_id, cluster_leader, cluster_name, ... ) TABLE mapping_clusters_news( cluster_id, news_id) TABLE word_importance (word_id, score) TABLE news_importance (news_id, score) TABLE cluster_importance( cluster_id, score) TABLE group_importance( cluster_id, score) You might notice that TABLE_word has an extra news_id column. This is to correspond to TABLE_word_importance column because the same word can have different importance in different articles (if you are familiar with tfidf, this is basically something like that). All the "importance" table now calculates the importance of each entity by averaging the importance of all the sub-entities below it. This means that Each cluster's importance is determined by all the news inside it, each news's importance is determined by all the words inside it etc. TYPICAL USAGE: 1) SELECT clusters FROM db THAT HAS word1, word2, word3, .. ORDER BY cluster_importance_score 2) SELECT words FROM db BELONGING TO THE CLUSTER cluster_id=5 ODER BY word_importance score. 3) SELECT groups ordered by importance score. As you can see, I am deriving a lot of scores from each layer, and someone have been telling me to use a materialized view for this purpose (which postgresql supports it). However, as you can see, this simple schema already consists of 8 tables (my actual db consists of 26 tables of crap like that, which is adding so much additional layers of complexity for maintainance). NOTE THIS IS NOT ABOUT FULL-TEXT SEARCH.
