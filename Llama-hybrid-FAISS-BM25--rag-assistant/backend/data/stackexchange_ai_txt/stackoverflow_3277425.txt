[site]: stackoverflow
[post_id]: 3277425
[parent_id]: 3277308
[tags]: 
AFAIK, the "Rails Way" to do this is to use map.resource or map.resources , and if the default names don't make sense you can rename them with the :path_names option. For example: map.resource :newsletter, :only => [:new, :destroy], :path_names => { :new => 'signup', :destroy => 'unsign' } EDIT: I just realized that I'm missing an equivalent to "create" which would be used to actually make the update to the database ("new" would be to render a page asking if the user wants to sign up to the newsletter). So if you wanted to include that call to action embedded in another page, then the "new" route may not be required. Making the controller and route In that case, we are not really talking about a newsletter resource, but a newsletter signup resource. Which would mean the controller would be named NewsletterSignup and the following route would be more appropriate: map.resource :newsletter_signup, :only => [:create, :destroy] This would allow you to embed links/buttons into an existing page that send requests to signup or unsign from the newsletter. The actions behind these links would use the normal act and redirect pattern to perform the updates. The links would look something like: POST to /newsletter_signup DELETE to /newsletter_signup/1 Showing the message Finally, the Rails Way to show the message "Thanks for signing up to the newsletter" is by using a "flash message". This involves the following code in the create action of the NewsletterSignup controller: flash[:notice] = 'Thanks for signing up to the newsletter!' You show this in the view of the page the action then redirects back to (which ever page the signup link/button was on) which can then include the message: If used commonly a fragment like the above can be added to your layout so it can be made to appear on any page.
