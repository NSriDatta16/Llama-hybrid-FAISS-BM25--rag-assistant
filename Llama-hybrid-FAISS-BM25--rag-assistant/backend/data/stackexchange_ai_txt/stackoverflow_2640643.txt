[site]: stackoverflow
[post_id]: 2640643
[parent_id]: 2638445
[tags]: 
Your thread doesn't have a QT event loop so nothing is going to happen. I've not worked with QT in Java but rather c++ so I can't give you example code, but this page should help: http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-threads.html With that being said ... try this: void testnetwork_thread() { new Thread(new Runnable() { @Override public void run() { QEventLoop loop = new QEventLoop(); testnetwork(); loop.exec(); } }).start(); } Note that this should just point you in the right direction, you'll need to deal with synchronization issues, etc. Also note the paragraph that talks about QObject ownership and threads (thread affinity). In C++ I created a class that extends QThread and an abstract interface called "Worker". The QThread derived class takes the Worker object as an argument in the constructor and changes the affinity so that it's "owned" by that thread (see: moveToThread() ). Then in the overridden run() method, it calls the Worker::init() method after which it starts the event loop. I fire off whatever initial things need to be handled in the init() method, such as timers or network requests.
