[site]: stackoverflow
[post_id]: 4244645
[parent_id]: 
[tags]: 
User interacting interpreter in a non-blocking single-threaded environment (tricky)

For a school project me and a classmate are writing a domain-specific language in javascript (node). The language contains statements that require user input via a Websocket connection. When a statement requires user input, the interpreter must stop executing, and wait for an event. Normally one would pause the thread and wait for the user input to be received before continuing thread, but we cant do that since node.js is single-threaded, and offers no option of sleep without blocking the processor. We tried a lot of ways to get around it, but failed. :-( The answer to this question could be a suggestion to how to make a pausable interpreter. Below, we run through a simplification of the interpreter (with errors) We construct an abstract syntax tree with these nodes var Print = function( str ){ this.str = str; } var Block = function( stats ){ this.stats = stats; } var Delayed = function( stats ){ this.stats = stats; } var Loop = function( times, stats ){ this.times = times; this.stats = stats; } Print - a simple statement, that never needs to be paused. Block - a sequence of statements Delayed - a sequence of statements to be executed after some time. Loop - multiple iterations of a sequence of statements The tree looks like this: var ast = new Block([ new Delayed([ new Print("blah blah"), new Delayed([]) ]), new Loop(3,[ new Delayed([ new Print("loop delayed") ]) ]) ]); The interpreter used to evaluate the statements. Note, that this code does not work as it should. It never pauses to wait for input. var Interpreter = function( ast ){ this.ast = ast; } Interpreter.prototype.run = function(){ this.handle( this.ast ); } Interpreter.prototype.handleAll = function( stats ){ for( var i = 0; i The interpreter needs to pause when a "Delayed" statement is encountered, and then continued when the Delay is done. The code above never pauses. When a "Delayed" statement is encountered, the substatements are delayed, but the other statements after the "Delayed" is executed. For a non fragmented version of the code, se http://pastie.org/1317023
