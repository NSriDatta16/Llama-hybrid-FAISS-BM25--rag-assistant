[site]: stackoverflow
[post_id]: 1561258
[parent_id]: 1561183
[tags]: 
A functor type is a C++ type (class or struct), that overloads the () operator so that instances of the type behave like a function. This is similar to a class implementing __call__() in Python. Some STL collection types like std::map require a key_compare functor to order the keys in interal tree structures and thus providing fast access times. By default, this is std::less , which uses operator to compare values. Therefore this operator is often provided to allow custom classes to act as keys in std::map (and similar). Google obviously discourages this in favor of supplying your own comparison functor. So, instead of implementing operator , you could do the following: struct my_compare { bool operator ()(const CatalogueItem& lhs, const CatalogueItem& rhs) { ... } }; If you must access private members to implement this, declare the functor as a friend of your class.
