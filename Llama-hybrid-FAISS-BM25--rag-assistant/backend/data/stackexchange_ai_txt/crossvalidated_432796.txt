[site]: crossvalidated
[post_id]: 432796
[parent_id]: 432793
[tags]: 
I believe this to be a bad idea: you are selecting your data based on the data fitting to your model and that can lead to overfitting and possible biases/inaccuracies in your inferences. Basically: how do you know a point is a measurement mistake vs something else just from the value of the point? The recommended practice would be to figure out some sort of indicator in your experiment that can tell you if a point is bad or to improve your experiment so that these bad values don't happen (I know this is easy for a stranger over the internet to say...). One approach would be to try and figure out the measurement uncertainties on each data point (it looks like you have it for some of them but not others) and then try a weighted fit. That would for example solve your problem in some of the cases. You could also experiment with some sort of weighting of the data based on the ease of measurements or something. Ok with that pontification aside: There are two approaches I can think of: 1) Make it a piecewise model with a changepoint where you explicitly introduce a measurement error which is dependent on which side of the changepoint you are on. I would personally do this as a Bayesian model using Stan. Something like this: https://ecosang.github.io/blog/study/piecewise-regression-with-stan/ or https://janhove.github.io/analysis/2018/07/04/bayesian-breakpoint-model but instead of letting the parameters vary you let the measurement error vary. Specifically for the second link instead of having a slope_before and a slope_after you would have an error_before and error_after (currently that model just has one error parameter). You would also need to change the functional form of the model (right now it's fitting a piecewise linear regression). You can also change this to incorporate an offset instead of changing the measurement error (so an intercept_before and intercept_after). Heck you could let everything change with the changepoint. You get a lot of flexibility out of this approach. 2) You can fit a changepoint model (e.g., the bcp package in R) on the residuals of your fit and truncate the data after that changepoint and then refit the model. I don't like this approach as much because you're throwing the data out completely but it would solve your problem in an automated way.
