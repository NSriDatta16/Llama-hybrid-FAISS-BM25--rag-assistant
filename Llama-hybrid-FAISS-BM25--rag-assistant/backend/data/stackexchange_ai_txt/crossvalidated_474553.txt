[site]: crossvalidated
[post_id]: 474553
[parent_id]: 
[tags]: 
Converting Fully connected layers into Convolutional layers

I've read the other post made about converting FC layers into convolutional layers in this post: How to convert fully connected layer into convolutional layer? , but i don't understand how you get the 4096x1x1 in the last calculations. I know that after going trough the convolution layers and the pooling that we end up with a layer of 7x7x512 It's the math i don't completely understand. In the other post, the author wrote In this example, as far as I understood, the converted CONV layer should have the shape (7,7,512), meaning (width, height, feature dimension). And we have 4096 filters. And the output of each filter's spatial size can be calculated as (7-7+0)/1 + 1 = 1. Therefore we have a 1x1x4096 vector as output. But where do you get the other 7 from? do you calculate the convolutional layer with itself? and that's how you end up with 1x1x4096? Consider a CNN that consists of Input(234Ã—234)-Conv(7,32,1)-Pool(2,2)-Conv(7,32,1)-Pool(2,2)Conv(7,32,1)-Pool(2,2)-FC(1024)-FC(1024)-FC(1000). And zero-padding is not used. Running this through and calculating conv layers and pooling should leave us at 24x24x32 at last pooling if i'm not wrong. Stride is 1 for the conv layers. 234x234x1 > conv7x7x32 > (234-7)/1+1 = 228 228x228x32 > pool2x2 > (228 - 2 )/2 + 1 = 114 114x114x32 > conv7x7x32 > (114 - 7 ) / 1 + 1 = 108 108x108x32 > pool2x2 > (108-2)/2 + 1 = 54 54x54x32 > conv7x7x32 > (54-7)/1 + 1 = 48 48x48x32 > pool2x2 > (48-2)/2 + 1 = 24 24x24x32 (24-24)/1 + 1 = 1 > 1024x1x1, 1024x1x1, 1000x1x1. Is this the right way to convert the FC layers into convolutional layers?
