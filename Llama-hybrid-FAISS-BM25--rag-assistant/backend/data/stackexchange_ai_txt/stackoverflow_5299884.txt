[site]: stackoverflow
[post_id]: 5299884
[parent_id]: 5299809
[tags]: 
Brian Lambert wrote a blog post titled A simple and totally thread-safe implementation of IDisposable . It contains the following implementation: using System; using System.Threading; /// /// DisposableBase class. Represents an implementation of the IDisposable interface. /// public abstract class DisposableBase : IDisposable { /// /// A value which indicates the disposable state. 0 indicates undisposed, 1 indicates disposing /// or disposed. /// private int disposableState; /// /// Finalizes an instance of the DisposableBase class. /// ~DisposableBase() { // The destructor has been called as a result of finalization, indicating that the object // was not disposed of using the Dispose() method. In this case, call the DisposeResources // method with the disposeManagedResources flag set to false, indicating that derived classes // may only release unmanaged resources. this.DisposeResources(false); } /// /// Gets a value indicating whether the object is undisposed. /// public bool IsUndisposed { get { return Thread.VolatileRead(ref this.disposableState) == 0; } } #region IDisposable Members /// /// Performs application-defined tasks associated with disposing of resources. /// public void Dispose() { // Attempt to move the disposable state from 0 to 1. If successful, we can be assured that // this thread is the first thread to do so, and can safely dispose of the object. if (Interlocked.CompareExchange(ref this.disposableState, 1, 0) == 0) { // Call the DisposeResources method with the disposeManagedResources flag set to true, indicating // that derived classes may release unmanaged resources and dispose of managed resources. this.DisposeResources(true); // Suppress finalization of this object (remove it from the finalization queue and // prevent the destructor from being called). GC.SuppressFinalize(this); } } #endregion IDisposable Members /// /// Dispose resources. Override this method in derived classes. Unmanaged resources should always be released /// when this method is called. Managed resources may only be disposed of if disposeManagedResources is true. /// /// A value which indicates whether managed resources may be disposed of. protected abstract void DisposeResources(bool disposeManagedResources); } However the absolute and complete totality is disputed a bit in the comments, both on the blog and here.
