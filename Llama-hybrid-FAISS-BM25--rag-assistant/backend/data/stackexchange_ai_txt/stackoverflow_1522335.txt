[site]: stackoverflow
[post_id]: 1522335
[parent_id]: 1501377
[tags]: 
Without more context it is effectively impossible to suggest why performance is so slow. I can however offer some clues. If things get slow at around 500 items, there is probably an O(N^2) algorithm (or worse) lurking in there somewhere. I would guess that one, or more, of your properties is traversing a large set of data during each comparison. With properties in C#, it is hard to know how they are implemented, e.g. something innocous like NumberOfDependancies could be traversing a very large graph each time it is called. Or it may be generating a list to count the dependencies. If possible I would compute these values once, and store them in the class (if possible). However, when I see the context in which it is used, I see another problem: PassFilterVal(this.NumberOfDependancies, ObjectToEvaluate.ListOfParentDependancies.Count If "ListOfParentDependancies" is an IEnumerable<> then you are going to be traversing the list of all dependencies each time you call it, to count the number. Your filter function, in terms of performance is fine. For elegance, and a possible modest boost in performance I would implement it as follows IEnumerable FilterList(MyClass filter) { foreach (MyClass task in this) if (filter.TaskPassFilter(task)) yield return task; }
