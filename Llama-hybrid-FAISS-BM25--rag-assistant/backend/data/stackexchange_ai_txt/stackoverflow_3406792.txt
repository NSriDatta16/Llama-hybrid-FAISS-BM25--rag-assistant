[site]: stackoverflow
[post_id]: 3406792
[parent_id]: 3405087
[tags]: 
Just to expand a bit on what others are saying--most ORM-type tools have model-first capability. Much like EF4, NHibernate, and Telerik Open Access, Subsonic ( http://www.subsonicproject.com/ ) has the simple repository pattern which can generate tables from classes. An alternate option here, is to write a simple reflection-based tool to traverse your classes. Although you didn't ask, I'm curious about your data access needs. We hire relational databases for three primary tasks: persistence, efficient retrieval of information, and declarative referential integrity (e.g. foreign keys). Just creating a table per class is only half the battle. Do you have a high volume of data (i.e. 100's of gigs or multiple-terabytes)? Lots of reads? lots of writes? Do the classes have natural primary keys? Surrogate keys? Do your classes define relations between each other (i.e. Employees work in Factories ). Do classes have lots of fields? Do you have any meta data that indicates data types with precision, i.e. not just string Name but that Name can be a maximum of 80 characters and is not nullable? Do you need to store English only or do you use languages that require extended character sets like Mandarin? If you don't have a method to indicate precision your database will end up having seriously wide rows (or potentially wide). Many databases limit maximum row size to something in the 8k-64k range. Wide rows impact read & write performance. Using text fields may get around the page size limits, but will result in much more expensive read performance. Just as important as implementing the database structure is indexing it and using referential integrity. Do the number of classes/tables grow over time? Maybe a more abstract structure with fewer tables would be appropriate. Just my 2c. Hope that helps.
