[site]: stackoverflow
[post_id]: 276573
[parent_id]: 276386
[tags]: 
Using the examples of foo.c and foo.h I've found these guidelines helpful: Remember that the purpose of foo.h is to facilitate the use of foo.c , so keep it as simple, organized, and self-explanatory as possible. Be liberal with comments that explain how and when to use the features of foo.c -- and when not to use them. foo.h declares the public features of foo.c : functions, macros, typedefs, and ( shudder ) global variables. foo.c should #include "foo.h -- see discussion, and also Jonathan Leffler's comment below. If foo.c requires additional headers for it to compile, include them in foo.c . If external headers are required for foo.h to compile, include them in foo.h Leverage the preprocessor to prevent foo.h from being included more than once. (See below.) If for some reason an external header will be required in order for another .c file to use the features in foo.c , include the header in foo.h to save the next developer from unnecessary debugging. If you're averse to this, consider adding macro that will display instructions at compile-time if the required headers haven't been included. Don't include a .c file within another .c file unless you have a very good reason and document it clearly. As kgiannakakis noted, it's helpful to separate the public interface from the definitions and declarations needed only within foo.c itself. But rather than creating two files, it's sometimes better to let the preprocessor do this for you: // foo.c #define _foo_c_ // Tell foo.h it's being included from foo.c #include "foo.h" . . . // foo.h #if !defined(_foo_h_) // Prevent multiple inclusion #define _foo_h_ // This section is used only internally to foo.c #ifdef _foo_c_ . . . #endif // Public interface continues to end of file. #endif // _foo_h_ // Last-ish line in foo.h
