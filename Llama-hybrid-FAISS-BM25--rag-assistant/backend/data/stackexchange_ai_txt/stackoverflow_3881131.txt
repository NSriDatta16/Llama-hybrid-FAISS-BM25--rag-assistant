[site]: stackoverflow
[post_id]: 3881131
[parent_id]: 3871634
[tags]: 
In response to Dan's question: First, have a look here: http://github.com/subsonic/SubSonic-2.0/blob/master/SubSonic/ActiveRecord/ActiveRecord.cs In this file lives the whole logic I showed in my other post. Validate: Is called during Save(), if Validate() returns false an exception is thrown. Get's only called if the Property ValidateWhenSaving (which is a constant so you have to recompile SubSonic to change it) is true (default) BeforeValidate: Is called during Save() when ValidateWhenSaving is true. Does nothing by default BeforeInsert: Is called during Save() if the record is new. Does nothing by default. BeforeUpdate: Is called during Save() if the record is new. Does nothing by default. AfterCommit: Is called after sucessfully inserting/updating a record. Does nothing by default. In my Validate() example, I first let the default ValidatColumnSettings() method run, which will add errors like "Maximum String lenght exceeded for column ProductName" if product name is longer than the value defined in the database. Then I add another errorstring if ProductName is empty and return false if the overall error count is bigger than zero. This will throw an exception during Save() so you can't store the record in the DB. I would suggest you call Validate() yourself and if it returns false you display the elements of this.Errors at the bottom of the page (the easy way) or (more elegant) you create a Dictionary where the key is the columnname and the value is the reason. private Dictionary CustomErrors = new Dictionary protected override bool Validate() { this.CustomErrors.Clear(); ValidateColumnSettings(); if (string.IsNullOrEmpty(this.ProductName)) this.CustomErrors.Add(this.Columns.ProductName, "cannot be empty"); if (this.UnitPrice Then if Validate() returns false you can add the reason directly besides/below the right field in your webpage. If Validate() returns true you can safely call Save() but keep in mind that Save() could throw other errors during persistance like "Dublicate Key ...";
