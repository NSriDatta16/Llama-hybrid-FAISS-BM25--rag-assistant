[site]: stackoverflow
[post_id]: 1450850
[parent_id]: 1450847
[tags]: 
It can. Depending on your definition of a random number: (source: dilbert.com ) In most applications, what you expect from a random number generator is to generate a sequence of numbers that are uniformly distributed . A garbage value does not provide this characteristic. Is it possible to create a true random number? If you define "truly random" as unpredictable, the question is "unpredictable by what?" There are cryptographically secure (pseudo-)random number generators that try to hide the state of the random number generator from user-level code , that is, ideally, only kernel mode code can feasibly predict the next random number. However, an isolated computer system (without any external input) is a deterministic finite state machine. That is, by knowing the current state of the machine, you can always predict the next state. So, if you mean "unpredictable" by a software system in general, no, you can't use a deterministic system to generate "true randomness" according to this definition. There's another kind of unpredictability that is more philosophical. Even if you rely on external input (such as atmospheric noise or other means), are they really unpredictable? One might argue that we live in a deterministic world and like a digital computer, everything is determined to happen; so, there's no randomness. I don't have an answer for that.
