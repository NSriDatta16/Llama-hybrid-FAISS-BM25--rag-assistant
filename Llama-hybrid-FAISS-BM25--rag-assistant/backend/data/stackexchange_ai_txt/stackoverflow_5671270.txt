[site]: stackoverflow
[post_id]: 5671270
[parent_id]: 5668454
[tags]: 
Some initial thoughts: You deal with data over time - I'm uneasy about using classes who's purpose and name is tied to the concept of a year, especially if it's the only time-based unit of measure you have. Depending on how much data you need to crunch you might want to leverage a reporting package or leveraging your chosen database platform as this will be much more efficient for dealing with data. Keep in mind that data will go through a life-cycle: has it been cleaned? Do you need to impute any data? etc. My reflections are about whether or not to include a Death Rate class instance within a PopulationAnnuelle class. A death rate seems to me to be a sub-class of a broader concept (rate?) - a modifier or influence on the data; for that reason I would probably not explicitly include it in the PopulationAnnuelle. An alternative view would be to have population data passed into a "rate" modifier rather than embedding it in the population. Yes - just thinking it through - I think you'd want to keep your concerns as cleanly separated as possible. This is why I asked about the significant scenarios you need to cater for - for example I can see you wanting to do lots of things with the PopulationAnnuelle where the death rate is not needed or even desirable. Update If I understand correctly, both the PopulationAnnuelle and MortaliteAnnuelle are derived from let's say a StatistiqueAnnuelle class Hmmm - why? Two things to consider... Firstly, are you 100% certain that for the life of the application you'll only ever need to deal in units of years? Building the concept of a year so heavily into the code isn't something you'd want to do lightly. Secondly, I totally get the logical idea that yearly statistics include deaths and a total population - but I'm not sure you'd reflect that in class structure via inheritance (?) (Not saying you can't - you've spent way longer thinking about this than I have). Apart from reflecting a particular mindset what does the inheritance actually give you (vs what will it do to you)? My idea of grouping them was to simply ask the PopulationAnnuelle class for next year population growth, and that it would have returned it to me as a new instance of PopulationAnnuelle That sounds dubious: a class is asked to produce a new different instance of itself. I'd probably have a class / component "TrendPredictor" (?) that was passed in all the data it needed (or references to sets of data) and returned some object. If you then wanted to perform more trend prediction on that then I guess it would make sense to pass the same types in and out so it was easy to string operations together in any combination. Th eonly other commpent I'd make is that I woudl see those input and outputs being pretty dumb (and therefore not needing much (if any) inheritance - they sound more like data structures than classes that offer rich functionality.
