[site]: stackoverflow
[post_id]: 3033388
[parent_id]: 3031821
[tags]: 
Java Enterprise applications typically use a layered architecture as illustrated below: In short: The presentation layer provides the application's user interface. In a web application, this typically involves the use of a MVC ( Model-View-Controller ) framework. The service layer exposes coarse grained services implementing the business logic of an application. They act as entry point and are typically responsible of transaction demarcation. The data access layer abstract physical storage systems (e.g. a database) and expose CRUD (Create, Read, Update, Delete) methods and finders. Domain objects represent the business concepts of your domain (Client, Order, Product, etc) and are typically used across all layers, from the data access layer to the presentation). I don't want to make things too confusing and to throw in too much technologies or frameworks (are you allowed to use frameworks?) that could fit in this diagram. Just tell me if I should. Regarding your question about the presentation layer, I already hinted the answer: use the MVC pattern. Basically, the View is the part that renders the user interface (e.g. JSP). From the view, the user sends input to a controller (a Servlet acting as entry point). The controller communicates and interacts with the model (standard Java classes), set appropriate data in the HTTP request or Session and forwards the request and response to a view. And this restarts the cycle. If you need more details, let me know.
