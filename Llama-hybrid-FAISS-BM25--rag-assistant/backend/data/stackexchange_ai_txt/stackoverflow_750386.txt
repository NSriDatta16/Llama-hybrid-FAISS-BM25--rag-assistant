[site]: stackoverflow
[post_id]: 750386
[parent_id]: 184618
[tags]: 
Here's a few that I've put in my code at various times. Some aren't technically comments, but they're the same sort of concept. In a cross-platform project that needs some special code on one platform only: //If defined, will include all the Windows-specific code. #define LOSE #ifdef LOSE #include //WIN32. Duh. #endif --------------------------------------------------- //Stolen from other_project_name.cpp --------------------------------------------------- /* * These comments have been lifted from propagate() and, though they no longer apply to the code, they may still be of value somewhere. Original tabbing and structural elements have been preserved. */ //CAUTION: This has a major Bobby Tables risk. Even if a rulebuilder is used, there's still the risk of something getting corrupted in the database itself. //Reading text from anywhere and simply slotting it into an SQL statement is a major security risk. (With thanks to xkcd for the name "Bobby Tables".) //Requirement: Eliminate one Bobby Tables by changing [redacted] to be not just straight SQL. [lots more comments that are not as funny] /* * End of lifted comments. There should not be any executable code between these markers. */ --------------------------------------------------- /* Okay. It's unrecognized. Why is this a fatal error? It's actually very closely akin to the miswart of botched #includes being a fatal. When writing a C/C++ program, you need your headers, and if you don't have one, chances are there'll be a million cascaded errors; so by making "unable to open asdf.h" a fatal, the compiler suppresses all those errors about undefined symbols and potentially misspelled type names. */ --------------------------------------------------- //If someone tries to import 'id' as a field name, it won't work. (We already have our own id.) But I think the probability is so low that I can afford to be funny. if (!stricmp(ptr,"id")) {warn(0,"Import","","'id' is a reserved word and cannot be used as a column name. (Try 'ego' or 'superego'.)"); return;} --------------------------------------------------- //Need a place to squirrel away SQL statements somewhere char *uts[1024]; //Unified Temporary Storage. (Why? Because I said so.) int nuts=0; //What is it that squirrels keep? Ha! int utsid[sizeof uts/sizeof *uts]; --------------------------------------------------- /**************************************\ * NOTE: This sets tilde.action. If a * * tilde header does not exist in the * * import file (not the _content_, if * * the entire column isn't there), it * * will duplicate down through all of * * the rows. This is fine for ~id, as * * that will never be changed; and if * * ~Quantity is blank, that throws an * * error in 'Add'. With ~Action, I am * * not so certain. I THINK it'd be OK * * to dup-down most of the time... if * * the user only ever imports Adds or * * Revises, but never both at once in * * a single import. So for safety, to * * allow a blank ~Action to revise OR * * add, I'm breaking the check out to * * a new variable - the curaction. In * * most cases, it won't be needed, so * * it's a waste; but it isn't like it * * has to copy the entire tilde.*, so * * it's only a small waste. So it can * * waste a register... big deal. OK ! * \**************************************/ --------------------------------------------------- //if (!response) // we're going to crash //if (!items) // we're going to crash //TODO: Don't crash --------------------------------------------------- A lot of my comments contain obscure references to films or musicals, but they won't be nearly as funny if you don't know the show.
