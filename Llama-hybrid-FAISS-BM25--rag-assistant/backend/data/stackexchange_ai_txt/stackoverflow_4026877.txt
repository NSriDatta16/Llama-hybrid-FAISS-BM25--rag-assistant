[site]: stackoverflow
[post_id]: 4026877
[parent_id]: 4026297
[tags]: 
No, not a specific function in Text::CSV. I would do something like this: use Text::CSV; my $file = "foo.csv"; my $pattern = "cpu.usage.mhz.average.*"; open(F, $file) or die "Unable to open $file: $!\n"; my $lineCount = 0; my %desiredColumns; my %columnContents; while( ) { $lineCount++; my $csv = Text::CSV->new(); my $status = $csv->parse($_); # should really check this! my @fields = $csv->fields(); my $colCount = 0; if ($lineCount == 1) { # Let's look at the column headings. foreach my $field (@fields) { $colCount++; if ($field =~ m/$pattern/) { # This heading matches, save the column #. $desiredColumns{$colCount} = 1; } } } else { # Not the header row. Parse the body of the file. foreach my $field (@fields) { $colCount++; if (exists $desiredColumns{$colCount}) { # This is one of the desired columns. # Do whatever you want to do with this column! push(@{$columnContents{$colCount}}, $field); } } } } close(F); foreach my $key (sort keys %columnContents) { print "Column $key: " . join(",", @{$columnContents{$key}}) . "\n\n"; } Hope that helps! I'm sure someone can write that in a Perl one-liner, but that's easier (for me) to read...
