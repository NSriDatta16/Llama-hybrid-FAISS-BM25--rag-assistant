[site]: stackoverflow
[post_id]: 1494019
[parent_id]: 1493967
[tags]: 
I would personally say the first approach is best, because it keeps all documents and document fragments semantically complete. The second approach means that you'll have a in your header.tpl that is closed by a in your footer.tpl (except likely there will be a few tags that applies to). This means if you change your layout, by adding a wrapper div (for example) somewhere, you have to remember to also close it in another file (or, depending on your layout, two or three different files). It's worse with several different embedded files. Think of how hard it is to debug a site, when one file - that gets included conditionally - has an extra . You get a vague bug report "sometimes the page looks completely messed up, doesn't matter what browser I use" that is very very hard to track down. It's MUCH worse if you're using table-based layouts.. Using the first approach, you can still use the DRY principle. You load the template into a variable. eg: $userVars['name'] = $currentUser->name; $templateVars['userinfo'] = $template->load('userinfo.php', $userVars); ... $template->display('template.tpl', $templateVars); You can continually nest documents that way. There are many benefits: Each file is semantically complete HTML - all tags that are opened, are also closed in the same document. It's easy to edit one part of the layout without breaking (possibly unknowningly) anything else. It's each to cache the output of certain templates, and re-use them It's easy to apply AJAX to the site. For example, you have a stats.tpl template rendering inside a on the first page load. You also have a view that just renders the stats.tpl template by itself, and then use jquery to do $('#stats').load('/ajaxstats.php') , which refreshes that div but without repeating code at all.
