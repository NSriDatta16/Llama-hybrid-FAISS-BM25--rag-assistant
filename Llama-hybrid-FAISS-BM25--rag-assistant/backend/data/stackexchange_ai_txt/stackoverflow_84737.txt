[site]: stackoverflow
[post_id]: 84737
[parent_id]: 82509
[tags]: 
DISCLAIMER I haven't tested this code at all, but the idea should work. Also, this only handles the dragging to a flash movie. Here's some Actionscript 3.0 code which makes use of the ExternalInterface class. import flash.display.Sprite; import flash.external.ExternalInterface; import flash.net.URLLoader; import flash.net.URLRequest; if (ExternalInterface.available) { ExternalInterface.addCallback("handleDroppedImage", myDroppedImageHandler); } private function myDroppedImageHandler(url:String, x:Number, y:Number):void { var container:Sprite = new Sprite(); container.x = x; container.y = y; addChild(container); var loader:Loader = new Loader(); var request:URLRequest = new URLRequest(url); loader.load(request); container.addChild(loader); } Here's the HTML/jQuery code XHTML 1.0 Transitional Template $(function() { $("#dragIcon").draggable(); $("#flash").droppable({ tolerance : "intersect", drop: function(e,ui) { // Get the X,Y coords relative to to the flash movie var x = $(this).offset().left - ui.draggable.offset().left; var y = $(this).offset().top - ui.draggable.offset().top; // Get the url of the dragged image var url = ui.draggable.attr("src"); // Get access to the swf var swf = ($.browser.msie) ? document["MyFlashMovie"] : window["MyFlashMovie"]; // Call the ExternalInterface function swf.handleDroppedImage(url, x, y); // remove the swf from the javascript DOM ui.draggable.remove(); } }); });
