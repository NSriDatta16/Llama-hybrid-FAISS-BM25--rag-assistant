[site]: stackoverflow
[post_id]: 2079613
[parent_id]: 1316901
[tags]: 
Most answers we find on the web are FUD and its hard to find the answers with the appropriate context. A multitude of people have hitched their wagon to one eco-system or the other and will justify their decision using whatever logic and statistics they can. The best you can do is assemble a team of bright/motivated people and they will choose the software stack that best empowers them to succeed. If we look at the web-sites that have had much success over the past 10 years, we'll find the languages to be varied. Having said that, the number one priority in every startup and even when working in large enterprise organizations was time to market. While many people are looking at scalability and acting on their findings, some guy using so-called less than enterprise grade software is delivering a solution to the market. If you have a moment, checkout Paul Grahams essays. He provides some good insight into this topic. He was very successful using Lisp, now who would even think about that in this discussion? The point he makes in his essay is speed and responsiveness to change. Even Twitter as popular as it has become is a mix of Scala and Ruby. My perpsective is that in Silicon Valley to many teams are trying to deliver using only a single language, and that what should instead occur is using the appropriate language for the specific team, and problem at hand. If you are developing product into enterprise entities you'll be very limited on what your software stack can be, but if you are developing a customer facing web application, the world is your oyster! You want to choose the stack that lets you and your team go from concept to reality ASAP! GOOD LUCK!. OVER.
