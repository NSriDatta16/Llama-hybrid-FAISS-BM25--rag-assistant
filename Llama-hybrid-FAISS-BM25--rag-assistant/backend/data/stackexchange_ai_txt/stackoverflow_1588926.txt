[site]: stackoverflow
[post_id]: 1588926
[parent_id]: 1588574
[tags]: 
For interested people, I have gone for a factory method. public IWorkerDocument AttemptRetrieval () where T : IWorkerDocument { return WorkerDocument.Create (fileSystem, user); } calls public static IWorkerDocument Create (IFileSystem fileSystem, IDocumentLibraryUser user) where T : IWorkerDocument { var documentType = typeof(T); if (documentType == typeof(Contract)) return new Contract(fileSystem, user); if (documentType == typeof(Assignment)) return new Assignment(fileSystem, user); throw new Exception("Invalid Document Type"); } It's a little messy, so does anyone have any suggestions to clean the actual factory method up?
