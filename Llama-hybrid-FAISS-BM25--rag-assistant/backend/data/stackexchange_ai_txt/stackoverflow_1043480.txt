[site]: stackoverflow
[post_id]: 1043480
[parent_id]: 1043402
[tags]: 
Adrian Grigore answered: If you use a std::vector, then there shouldn't be any crash. then deleted the answer because of a comment: Doesn't matter in this case. Would crash the same way. But Adrian was mostly right - if MyWonderFulCode takes a vector or vector & or vector * , and you try to pass it a vector or vector * , then the calling code doesn't compile. Hence, I suppose, it doesn't crash either. It's not possible to convert from one vector type to the other (at least, not without creating a new vector and slicing the derived objects into it). So compilation failure is what you'd want in this case too, because it's not possible to convert from one array type to the other either. The problem is that C/C++ can't tell the difference between a pointer and an array when passed as a function parameter. Because of the perfectly sensible implicit upcast from Derived* to Base* , we're lumbered with an implicit upcast from Derived[] to Base[] , which is almost always broken. In C++ terms, it's a completely unjustified reinterpret_cast . This is among the reasons C++ programmers don't use arrays (unless they have to).
