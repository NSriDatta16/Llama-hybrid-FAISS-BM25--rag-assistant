[site]: stackoverflow
[post_id]: 5437971
[parent_id]: 4322694
[tags]: 
Sorry to be late to the game - HeapAgent is fantastic . I've used it for years and find it superb in pretty much every way - it's very good at helping track down memory leaks, corruptions, etc., and their API documentation (which allows you to fine-tune the behavior) is among the best tech writing I've ever seen in a programming product. For instance, server applications (such as I write) usually allocate a bunch of housekeeping memory at startup , and then enter a service loop. I didn't care about the housekeeping data, but I did care about a leak in every service loop. So using the API, my app incremented the HeapAgent "checkpoint" at the top of every service loop, and the current checkpoint is attached to every allocation. Using the GUI tool, it's easy to filter all with checkpoint >N, where N was the value at the entry to the service loop: we can see if there is stuff remaining behind after each loop. If your service loop allocates something that should stick around after the end of the loop, you can mark that allocation as intended so that the "has anything leaked?" test won't complain about it. Each allocation keeps track of the location where it was allocated from, as well as the callstack at the time, so your low-level helper functions ("mypersonalalloc(..)") still show who called it . It's found so much stuff... Tech support has been excellent. The downside is that the GUI is very badly dated, (ala Windows 3.1 - really!) but that's a minor issue that doesn't really affect the functionality. I have not used any of the other products mentioned here or anywhere else, but I could not be more pleased with HeapAgent. ~~~ Steve ["happy customer only" disclaimer applies]
