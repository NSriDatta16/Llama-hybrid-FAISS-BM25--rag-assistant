[site]: stackoverflow
[post_id]: 4079990
[parent_id]: 4079464
[tags]: 
Unless the parameters require otherwise, you'll want to define a helper procedure that can calculate both the sum and the count of how many items are in each list. Once you can average a single list, it's easy to adapt it to nested lists by checking to see if the car is a list. This method will get you the average in one pass over the list, rather than the two or more passes that solutions that flatten the list or do the count and the sums in two separate passes. You would have to get the sum and counts separately from the sublists to get the overall average, though (re. zinglon's comment below). Edit: One way to get both the sum and the count back is to pass it back in a pair: (define sum-and-count ; returns (sum . count) (lambda (ls) (if (null? ls) (cons 0 0) (let ((r (sum-and-count (cdr ls)))) (cons (+ (car ls) (car r)) (add1 (cdr r))))))) That procedure gets the sum and number of elements of a list. Do what you did to your own average-lists to it to get it to examine deeply-nested lists. Then you can get the average by doing (/ (car result) (cdr result)) . Or, you can write separate deep-sum and deep-count procedures, and then do (/ (deep-sum ls) (deep-count ls)) , but that requires two passes over the list.
