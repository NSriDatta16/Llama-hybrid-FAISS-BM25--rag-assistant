[site]: stackoverflow
[post_id]: 3714138
[parent_id]: 3713373
[tags]: 
Remember that storing to S3 is not dependable--the connection can be lost, the store fail before completing, etc. I created my own library routines that attempt to do the store, but catch various errors. For the no connection error, I reconnect. For other storage errors, I retry (up to three times). You may also want to wait a second between retries. Added Below is the library routine I use for AWS calls. You'd need to add/modify the rescue clauses to catch the errors that you're experiencing. Your connection_reset and error reporting methods will also be specific to your sw. # Usage example: # aws_repeat("Storing #{bucket}/#{obj}"){ # AWS::S3::S3Object.store(obj, data, bucket, opt)} def aws_repeat(description = nil) # Calls the block up to 3 times, allowing for AWS connection reset problems for i in 1..3 begin yield rescue Errno::ECONNRESET => e ok = false ActiveRecord::Base.logger.error \ "AWS::S3 *** Errno::ECONNRESET => sleeping" sleep(1) if i == 1 # reset connection connect_to_aws # re-login in to AWS ActiveRecord::Base.logger.error \ "AWS::S3 *** Errno::ECONNRESET => reset connection" end else ok = true break end end unless ok msg = "AWS::S3 *** FAILURE #{description.to_s}" ActiveRecord::Base.logger.error msg security_log(msg) end ok end ############################################ ############################################ def connect_to_aws # load params. Cache at class (app) level @@s3_config_path ||= RAILS_ROOT + '/config/amazon_s3.yml' @@s3_config ||= YAML.load_file(@@s3_config_path)[ENV['RAILS_ENV']].symbolize_keys AWS::S3::Base.establish_connection!( :access_key_id => @@s3_config[:access_key_id], :secret_access_key => @@s3_config[:secret_access_key], :server => @@s3_config[:server], :port => @@s3_config[:port], :use_ssl => @@s3_config[:use_ssl], :persistent => false # from http://www.ruby-forum.com/topic/110842 ) true end
