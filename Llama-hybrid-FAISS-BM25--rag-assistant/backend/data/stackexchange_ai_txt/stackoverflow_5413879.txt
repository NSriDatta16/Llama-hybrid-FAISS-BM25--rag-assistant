[site]: stackoverflow
[post_id]: 5413879
[parent_id]: 
[tags]: 
Understanding Model-View-Controller

I have an app where I want to have one “background” view (view controller view), and on top of that, multiple UIView s that draw themselves as circles. I just don't understand how to implement all of this while still adhering to MVC... The model and the view should be different. Does this mean that I generally need one set of header and implementation files for the view and another (separate) set for the model — even if my object is just a Circle class? Or, would I have one Circle.h and Circle.m set, and then inside the header file have two interface blocks, one for the model and one for the view, and two implementation blocks (again, one for the model and one for the view)? I’ve seen a few people recommend using the view controller to handle all of the views in loadView , and to avoid creating separate custom view objects; does this mean that I shouldn’t create a separate set of .h and .m files for the view? The latter seems a lot more organized in terms of design to me. Also, if I were to have multiple view objects and multiple model objects handled by the view controller, I would store these in two arrays in the controller — one for models, and another for views. Right? My question is: When I use key-value observing on each model, how would I, for each model object, alter the correct corresponding view object (assuming that indexes are not the same for both objects in both arrays)? I was thinking about using a pointer to the model object inside of the view, and KVOing from the view to the model — but then it doesn’t go through the controller and thus breaks MVC altogether, right? Thank you in advance.
