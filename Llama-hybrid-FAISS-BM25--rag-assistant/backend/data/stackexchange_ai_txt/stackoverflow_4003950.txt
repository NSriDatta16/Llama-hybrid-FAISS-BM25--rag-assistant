[site]: stackoverflow
[post_id]: 4003950
[parent_id]: 4003584
[tags]: 
Indeed, the fastest and as far I can see most elegant method is as advised above: std::vector tUserNumbers; // ... std::set tSet(tUserNumbers.begin(), tUserNumbers.end()); std::vector (tSet.begin(), tSet.end()).swap(tUserNumbers); It is O(n log n). This however does not make it, if the ordering of the numbers in the input array needs to be kept... In this case I did: std::set tTmp; std::vector ::iterator tNewEnd = std::remove_if(tUserNumbers.begin(), tUserNumbers.end(), [&tTmp] (int pNumber) -> bool { return (!tTmp.insert(pNumber).second); }); tUserNumbers.erase(tNewEnd, tUserNumbers.end()); which is still O(n log n) and keeps the original ordering of elements in tUserNumbers . Cheers, Paul
