[site]: stackoverflow
[post_id]: 3387993
[parent_id]: 3241094
[tags]: 
After a couple of iterations, I've ended up with a neat solution to this problem. I'm going to leave the accepted answer as is, but this is what I ultimately used: ISnmpDataSource is responsible for fetching data, as before. The SnmpConnector knows to only query if its own cache is invalid. A static Factory class maintains a Dictionary . There is a static BuildSnmpConnector(ISnmpDataSource) method based on this dictionary. Using the library now looks like this: IEnumerable IpAddresses = ...; string SqlConString = @"..."; ISnmpDataSource Switches = new SnmpDataSource(IpAddresses, SqlConStr); SnmpConnector instance = Factory. BuildSnmpConnector(Switches); I had a few problems with how I implemented GetHashCode and Equals for the ISnmpDataSource implementations, but formalizing a definition of equality pretty much fixed all those problems. I'm pretty happy with the final result; the Factory class is responsible for limiting instantiation, while the SnmpConnector is responsible for caching query results, while the ISnmpDataSource is responsible for actually running queries. I'm sure there is a better organization out there, but this one is clean enough for use.
