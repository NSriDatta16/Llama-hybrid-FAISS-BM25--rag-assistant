[site]: stackoverflow
[post_id]: 2459360
[parent_id]: 2459183
[tags]: 
Well, the simple answer to your question is that C# doesn't provide any syntactic sugar for working with tuples, so there is no way it could hide nesting of tuples when there are more than 8 elements. Of course, I guess you're actually asking why there is no syntactic sugar for working with tuples in C# 4.0. I think the main reason why it isn't there is that it encourages lightweight style of programming which isn't usually supported in C# (but works very well for F# programmers). In F#, it is perfectly fine to write code that looks like this: let parseRecord rc = // some code to parse the argument let (left, top, wid, hgt, str) = parseRecord record However, this code is reasonable only in the early phase of the development pocess (when writing some prototype and experimenting) or if the functionality is very localized (used within one function). In a more evolved version of the code, you would probably replace this with some more suitable data structure (e.g. F# record) to make the code more readable and I think this is what people typically do in F# On the other hand, if C# propgrammer wrote something like the following code, people would be quite scared how unreadable the code is: { int, int, int, int, string } ParseRecord(string record) { // some code to parse the argument } var (left, top, wid, hgt, str) = ParseRecord(record); So, I think the overall style of programming in C# is simply less suitable for lightweight features as tuples and pattern matching on tuples, because it doesn't work that well with the rest of the language. Of course, there may be some nicer way to support this in C# and it may be added in the future, however I think that the integration of this feature would be more complicated than in F#. Also, anonymous types serve similar purpose as tuples (but only locally), so in some cases, you don't really need tuples in C#.
