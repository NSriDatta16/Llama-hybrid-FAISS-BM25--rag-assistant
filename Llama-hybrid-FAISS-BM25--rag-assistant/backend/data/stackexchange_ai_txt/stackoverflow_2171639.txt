[site]: stackoverflow
[post_id]: 2171639
[parent_id]: 2171041
[tags]: 
I'd also recommend to read Alok's comment and think a bit about it. Here you have examples of alternative approaches of transition from automatic storage to dynamic storage. It uses std::vector as equivalent to your Tree class, but it can be any type you like. #include #include #include #include #include using namespace std; int main() { vector v(3); v[0] = "abc"; v[1] = "def"; v[2] = "ghi"; // option #1 - make a copy { vector * pv = new vector (v); std::copy(pv->begin(), pv->end(), std::ostream_iterator (cout, ", ")); delete pv; } cout * pv = new vector (); pv->swap(v); std::copy(pv->begin(), pv->end(), std::ostream_iterator (cout, ", ")); delete pv; } }
