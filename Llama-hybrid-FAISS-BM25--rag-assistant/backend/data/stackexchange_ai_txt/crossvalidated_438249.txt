[site]: crossvalidated
[post_id]: 438249
[parent_id]: 436985
[tags]: 
How you decide to solve a problem depends on what is known and what is unknown First, we can observe that the function $f(x_i) = \sum_{j=0}^3 x_i^j\beta_j$ is linear in the coefficients to be estimated. So if we know for a fact that $f$ has this form, we need nothing more complicated than regression. Indeed, the design matrix of this regression problem is a Vandermonde matrix . The biggest challenge you'll face when approaching this as a regression problem is that Vandermonde matrices are typically ill-conditioned, so finite-precision arithmetic may lose significant digits. There are lots of tricks to improve on using the raw polynomials, such as rescaling the columns of the design matrix. However, if your purpose is to model an unknown function and you have chosen for the sake of an experiment to model this $f$ , we can use any of the many, many statistical methods for making inferences about smooth functions in general. Many modern statistical methods were developed to approximate these types of functions. These are useful when all you have are the $\left(f(x_i), x_i\right)$ tuples and little-to-no additional information. Neural networks are one example, but we also have Gaussian processes, spline regression, nearest neighbors, random kitchen sinks, among many others. I draw this distinction because it's unclear to me which assumptions OP is making. OP's comment to @shimao suggests OP is not interested in linear regression as a solution, but instead prefer a "modern" approach. This is all well and good; it can be instructive to understand under which circumstances different alternative methods achieve a certain result. For example, we can evaluate how well some particular method recovers $f$ to some degree of precision. However, in OP's answer, OP proposes a "neural network" which has a functional form that is exactly identical to the regression strategy, because we can rewrite OP's "neural network" as a linear function, and discover that it has the form of linear regression where the design matrix is a Vandermonde. So, if we can do that, then how is OP's "neural network" different from @shimao's regression solution? (Or, we can accept OP's premise that OP's answer is a neural network, then we can view @shimao's answer as a "neural network" which you can estimate using any linear regression method.) The only quantities which OP's "neural network" is estimating are the regression coefficients $\beta$ , so the only difference between @shimao's approach and OP's is whether the linear system is solved using matrix factorization or gradient descent. Choosing whether to use gradient descent or matrix factorization depends on circumstances which are not in evidence in the question (size of the data, computational resources available, desired precision, whether or not the data arrives in a "streaming" fashion, etc.). The reason that neural networks are interesting is that they do not have to know the form of $f$ to make a good approximation.* For example, the Cybenko Universal Approximation Theorem finds that certain functions can be approximated by a shallow neural network with sigmoid activations. This is an interesting result, because even though $f$ is not itself sigmoidal, there are certain conditions under which we can approximate $f$ arbitrarily well with a certain number of hidden sigmoid units. This is why neural networks do not typically fix certain weights, nor do they use the known functional form of $f$ as its activation. The point of a neural network is that it has generality. * Subject to some terms and conditions. Consult the appropriate UAT for more details. The difference between machine learning and statistics is largely a matter of branding I am extremely skeptical of anyone who belabors the distinction between statistics and machine learning. These people are trying to sell you something, and if their pitch hinges on disparaging statistics in favor of machine learning, the thing they're selling you is probably snake oil. Machine learning is statistics; statistics is machine learning.
