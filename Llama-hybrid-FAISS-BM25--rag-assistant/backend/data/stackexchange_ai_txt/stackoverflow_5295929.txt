[site]: stackoverflow
[post_id]: 5295929
[parent_id]: 5295866
[tags]: 
A quick google search returned this . In any case, if you're not looking for performance, backtracking is always an option EDIT: I tried to apply backtracking. My solution is in no way efficient. You can, of course, replace the average methods to avoid another level of cycling. Also, in order to show that there is no solution, you can just count the number the solutions. import java.util.ArrayList; import java.util.HashSet; import java.util.Iterator; import java.util.List; public class SOQuestion { /** * just prints a solution * * @param list * @param indexes */ public static void printSolution(List list, HashSet indexes) { Iterator iter = indexes.iterator(); while (iter.hasNext()) { System.out.print(list.get((Integer) iter.next()) + " "); } System.out.println(); } /** * calculates the average of a list, but only taking into account the values * of at the given indexes * * @param list * @param indexes * @return */ public static float avg(List list, HashSet indexes) { Iterator iter = indexes.iterator(); float sum = 0; while (iter.hasNext()) { sum += (Integer) list.get((Integer) iter.next()); } return sum / indexes.size(); } /** * calculates the average of a list, ignoring the values of at the given * indexes * * @param list * @param indexes * @return */ public static float avg_e(List list, HashSet indexes) { float sum = 0; for (int i = 0; i
