[site]: stackoverflow
[post_id]: 1495772
[parent_id]: 1490680
[tags]: 
This is not clean or anything but it works :) Clear #region Reference the assembly / GAC that we need for this [Void][System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SharePoint") $SPSite = New-Object Microsoft.SharePoint.SPSite("https://extranet.something.com") $OpenWeb = $SpSite.OpenWeb("/") #endregion #region Add some eye candy :) write-host " _ ____ ____ " -foregroundcolor Magenta write-host " / \ | _ \ / ___| _ _ _ __ ___ " -foregroundcolor Magenta write-host " / _ \ | | | |____\___ \| | | | '_ \ / __|" -foregroundcolor Magenta write-host " / ___ \| |_| |_____|__) | |_| | | | | (__ " -foregroundcolor Magenta write-host "|_/ \_\____/ |____/ \__, |_| |_|\___|" -foregroundcolor Magenta write-host " |___/ " -foregroundcolor Magenta Write-Host " Version 2.0" -foregroundcolor Red Write-Host " Build 2009 09-30 14:00" -foregroundcolor Red Write-host " Created by Mitchell J. Skurnik" -foregroundcolor Red #endregion #region Create the stopwatch and some other things [System.Diagnostics.Stopwatch] $sw; $sw = New-Object System.Diagnostics.StopWatch $sw.Stop() $sw.Start() $splist = "C:\Powershell\Users from SharePoint\" $adlist = "C:\Powershell\Users in Groups\" #endregion #region Functions to add/delete users and groups # Function to control Adding groups function creategroup { param ([string] $siteurl = "https://extranet.something.com") $site = New-Object Microsoft.SharePoint.SPSite($siteurl) $web = $site.RootWeb; $group = $currentgroup; $perm = "Read"; $owner = "jdoe"; if ($owner -eq "") { $owner = $web.CurrentUser.LoginName } $exists = $web.SiteGroups | where { $_.Name -eq $group } if ($exists -eq $null) { # Create group $web.SiteGroups.Add($group, $web.EnsureUser($owner), $null, ""); # Give permissions to the group $assign = New-Object Microsoft.SharePoint.SPRoleAssignment($web.SiteGroups[$group]); $assign.RoleDefinitionBindings.Add($web.RoleDefinitions[$perm]) $web.RoleAssignments.Add($assign) Write-Host -ForegroundColor green "Creating sharepoint group - " $currentgroup; } $site.Dispose(); } # Function to add users to the specified group function addUser { # Open a connection to the sharepoint site and then select the sub site you want $themail = $prop.mail $thedisplay = $prop.displayname if ($themail -eq "") {$themail = "testaccount@something.com"} if ($thedisplay -eq "") {$thedisplay = "Account, Test"} if ($themail -eq $null) {$themail = "testaccount@something.com"} if ($thedisplay -eq $null) {$thedisplay = "Account, Test"} $TheNewGroup = $OpenWeb.SiteGroups | Where-Object {$_.Name -match $currentGroup} $TheNewGroup.AddUser("WRKGRP\" + $prop.samaccountname,$themail,$prop.displayname,"") } # Function to verify people function verifyUsers { param ([string] $verify_sitepath="https://extranet.something.com") $verify_site=new-object Microsoft.SharePoint.SPSite($verify_sitepath) $verify_web=$verify_site.Rootweb $verify_web.site.url $verify_groups = $verify_web.groups | ? {$_.Name -match "^.*$CurrentGroup" } foreach($verify_group in $verify_groups) { foreach($verify_user in $verify_group.users) { $verify_user = $verify_user -replace "WRKGRP\\","" Write-Output "$verify_user" | Out-File -filepath "$splist$currentGroup.txt" -append } } $strReference = get-Content "C:\Powershell\Users from SharePoint\$currentgroup.txt" $strDifference = get-Content "C:\Powershell\Users in groups\$currentgroup.txt" #Compare-Object $strReference $strDifference Compare-Object $strReference $strDifference | ` Where-Object { $_.SideIndicator -eq " $NewTextFile #endregion #region Connect to LDAP and set up some variables # Use LDAP to connect to Active Directory $Dom = 'LDAP://OU=Sales Accounts,OU=Users,OU=Home Office,DC=something,DC=com' $Root = New-Object DirectoryServices.DirectoryEntry $Dom # Create a selector and start searching from the Root of AD $selector = New-Object DirectoryServices.DirectorySearcher $selector.SearchRoot = $root # Get the Group text file's length and write to scree and variable $fileLength = [System.IO.File]::ReadAllText($NewTextFile).Split("`n").Count Write-Host "Found " $fileLength "Groups in Active Directory" -foregroundcolor Magenta $c = 0 # Integer to compare file length $d = 0 # Integer for thumbing through 'memberOf' in active directory $f = 0 # Integer for the amount of of users found #endregion # Start a while loop where we read through the entire groups text file while ($c -le $fileLength) { $c++ # Increment the line number for the next pass through $currentGroup = (Get-Content $NewTextFile)[$c] # Grab the first line of text from the groups file CreateGroup # Create the group Write-host $c "/" $fileLength "`t" $currentGroup -foregroundcolor Red # Query Active directory and force some commands $adobj= $selector.findall() | where {$_.properties.objectcategory -match "CN=Person"} foreach ($person in $adobj) { $prop=$person.properties # Variable for the different properties to reduce fatigue $department = $prop.department # The Department $sn = $prop.sn # Sir Name $gn = $prop.givenname # Given Name $un = $prop.samaccountname # Account Name $memberof = $person.properties["memberof"] # Assign the really long memberof to a variable $memberofcount = $test.Count # Length of memberof # Loop for each group the member is in while ($d -le $memberof.Count) { $blah = ForEach-Object{` $memberof[$d]` -replace "CN=",""` -replace ",OU=Regional Sales",""` -replace ",DC=something",""` -replace ",DC=com","" ` -replace ",OU=LA Offices","" } $d++ # Incriment the d if ($blah -eq $currentGroup) # Is that user in the group? { Write-host "`t`t`t" $un -foregroundcolor Magenta $un | Out-File -filepath "C:\Powershell\Users in groups\$currentGroup.txt" -append adduser $f++ } } if ($d -ge $memberofs.Count) { $d=0 } } verifyUsers #Verify that the user is supposed to be in there :) #Write-Host "`t`t`t" $f " user(s) found" $f = 0 } #region The End # Stop Watch $sw.Stop() write-host "Updated in Time: ", $sw.Elapsed.ToString() #endregion
