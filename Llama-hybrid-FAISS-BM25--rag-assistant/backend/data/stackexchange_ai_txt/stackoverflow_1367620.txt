[site]: stackoverflow
[post_id]: 1367620
[parent_id]: 1367570
[tags]: 
From MSDN : The fill-factor setting applies only when the index is created, or rebuilt. The SQL Server Database Engine does not dynamically keep the specified percentage of empty space in the pages. Trying to maintain the extra space on the data pages would defeat the purpose of fill factor because the Database Engine would have to perform page splits to maintain the percentage of free space specified by the fill factor on each page as data is entered. and, further: When a new row is added to a full index page, the Database Engine moves approximately half the rows to a new page to make room for the new row. This reorganization is known as a page split. A page split makes room for new records, but can take time to perform and is a resource intensive operation. Also, it can cause fragmentation that causes increased I/O operations. When frequent page splits occur, the index can be rebuilt by using a new or existing fill factor value to redistribute the data. SQL Server 's data page consists of the following elements: Page header : 96 bytes, fixed. Data : variable Row offset array : variable. The row offset array is always stored at the end of the page and grows backwards . Each element of the array is the 2 -byte value holding the offset to the beginning of each row within the page. Rows are not ordered within the data page: instead, their order (in case of clustered storage) is determined by the row offset array. It's the row offsets that are sorted. Say, if we insert a 100 -byte row with cluster key value of 10 into a clustered table and it goes into a free page, it gets inserted as following: [00 - 95 ] Header [96 - 195 ] Row 10 [196 - 8190 ] Free space [8190 - 8191 ] Row offset array: [96] Then we insert a new row into the same page, this time with the cluster key value of 9 : [00 - 95 ] Header [96 - 195 ] Row 10 [196 - 295 ] Row 9 [296 - 8188 ] Free space [8188 - 8191 ] Row offset array: [196] [96] The row is prepended logically but appended physically. The offset array is reordered to reflect the logical order of the rows. Given this, we can easily see that the rows are appended to the free space, starting from the beginning on the page, while pointers to the rows are prepended to the free space starting from the end of the page.
