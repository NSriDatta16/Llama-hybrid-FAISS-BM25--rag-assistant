[site]: stackoverflow
[post_id]: 625769
[parent_id]: 625680
[tags]: 
I do the following: Call the method x times and measure the time Do this n times and calculate the mean and standard deviation of those measurements Try to get the x to a point where you're at a >1 second per measurement. This will reduce the noise a bit. The mean will tell you the average performance of your test and the standard deviation the stability of your test/measurements. I also set my application at a very high priority, and when I test a single-thread algorithm I associate it with one cpu core to make sure there is not scheduling overhead. This code demonstrates how to do this in .NET: Thread.CurrentThread.Priority = ThreadPriority.Highest; Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.RealTime; if (Environment.ProcessorCount > 1) { Process.GetCurrentProcess().ProcessorAffinity = new IntPtr(1
