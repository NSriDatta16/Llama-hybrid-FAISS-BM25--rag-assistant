[site]: stackoverflow
[post_id]: 4516832
[parent_id]: 4510511
[tags]: 
After figuring out what Sharp Architecture does and learning a bit more about the SessionFactory (ie that it cannot be changed) the solution was to add the properties to the NHibernateSession.Init call var configProperties = new Dictionary {{ Environment.LinqToHqlGeneratorsRegistry, typeof (MyLinqToHqlGeneratorsRegistry).AssemblyQualifiedName }}; NHibernateConfiguration = NHibernateSession.Init( new SimpleSessionStorage(), GetMappingAssemblies(), null, GetNHibernateConfig(), configProperties, null); I tried adding the property to the config file but got validation errors on the file. Adding it to the .Init() call worked perfectly though.
