[site]: stackoverflow
[post_id]: 5359052
[parent_id]: 5134287
[tags]: 
A very naive and simple, but all-lua, method of doing it, is -- Limit may be in the millions range depending on your needs setfenv(code,sandbox) pcall (function() debug.sethook( function() error ("Timeout!") end,"", limit) code() debug.sethook() end); I expect you can achieve the same through the C API. However , there's a good number of problems with this method. Set the limit too low, and it can't do its job. Too high, and it's not really effective. (Can the chunk get run repeatedly?) Allow the code to call a function that blocks for a significant amount of time, and the above is meaningless. Allow it to do any kind of pcall, and it can trap the error on its own. And whatever other problems I haven't thought of yet. Here I'm also plain ignoring the warnings against using the debug library for anything (besides debugging). Thus, if you want it reliable, you should probably go with RB's solution. I expect it will work quite well against accidental infinite loops, the kind that beginning lua programmers are so fond of :P For memory overuse, you could do the same with a function checking for increases in collectgarbage("count") at far smaller intervals; you'd have to merge them to get both.
