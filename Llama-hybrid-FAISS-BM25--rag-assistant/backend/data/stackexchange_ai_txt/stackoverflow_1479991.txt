[site]: stackoverflow
[post_id]: 1479991
[parent_id]: 429149
[tags]: 
I am at the cross roads on this one, too. With SOA, there are other principles one must consider in addition to the technology constraints - well that is if you want to stay on the right track. I've seen some take this debate a step further (including myself initially) and question how to exchange business objects (BOs) around. But I began to realize this violates one of the most fundamental SOA principles - autonomy. Doing this suddenly binds your services to the business specifics. This is just a scenario I wanted to bring up to compare to the DataContract and "Entities" issue. I think the principles are what counts more so - even for the cost of a little redundancy (i.e. dedicated DTOs). I've leaned more toward an adapter pattern for this, to keep the messaging "infrastructure" and a rich component-oriented model like an EDM seperate. Further, making this "adapter pattern" an all-out entity service candidate makes it more elegant, reusable, and autonomous in the SOA world. Thomas Erl describes this notion of "Entity-centric services" with excellence in his book, Service-Oriented Architecture (Concepts, Technologies, and Design). Another thing to ponder: What if my "entity" doesn't reside in a single source (i.e. part in a database and part in a text file or spreadsheet)? With accepting that extra effort with the DTO and/or fully fledged entity-centric service, you can hide that away and promote much higher agility. Bottome line: If you don't care about SOA principles and are developing more "ad hoc" then take your pick. But if you are in an enterprise or B2B position and simply cannot risk the infamous "ad hoc creep" that SOA intends to tame, then you will probably do SOA entity-centric services as first class citizens and manage them as such. Consider where computing is going (SOA, SaaS, PaaS, etc.), and the paradigms and principles they share.
