[site]: stackoverflow
[post_id]: 5611559
[parent_id]: 5609503
[tags]: 
As you can probably gather from the wealth of answers, there is certainly no consensus. Semantically, exceptions and error provide the exact same functionality. Indeed they are identical in about all semantic aspects, and errors can be arbitrarily enriched much like exceptions (you don't have to use a simple code, you can use a real bundle of data!). The only difference there is is their propagation methods: errors have to be passed down manually exceptions are propagated automatically On the other hand: the possibility of an error is perfectly documented in the signature exceptions are silent on code inspection (read GotW #20: Code Complexity and cry) and hidden paths of execution make reasoning harder. The very reason both solutions can appear clunky is simply that error checking is difficult . Indeed most of the code I am writing daily concerns error checking, whether technical or functional. So what to do ? Warning: demonstration ahead, jump over to the next section if you care only for an answer I personally like to leverage the type system here. The typical example is the pointer-reference dichotomy: a pointer is like a reference that can be null (and reseated, but it does not matter here) Therefore, instead of: // Exceptions specifications are better not used in C++ // Those here are just to indicate the presence of exceptions Object const& Container::search(Key const& key) const throw(NotFound); I will tend to write: Object const* Container::search(Key const& key) const; Or better yet, using clever pointers: Pointer Container::search(Key const& key) const; template O* Pointer ::operator->() const throw(Null); template O& Pointer ::operator*() const throw(Null); Here I find the use of exception superfluous for 2 reasons: If we are searching for an object, then there not finding it is both a perfectly common occurrence and there is not much data to carry about: cause of error ? it is not there The client does not necessarily consider it an error that it is not there, who am I to assume that I know her business better than she does ? Who am I to decide that there will never be a case where it won't be appropriate not to find what was asked for ? I don't have a problem with exceptions per se, but they can make the code awkward, consider: void noExceptions(Container const& c) { Pointer o = c.search("my-item"); if (!o) { o = c.search("my-other-item"); } if (!o) { return; } // nothing to be done // do something with o } And compare it with the "exception" case: void exceptions(Container const& c) { Object const* p = 0; try { p = &c.search("my-item"); } catch(NotFound const&) { try { p = &c.search("my-other-item"); } catch(NotFound const&) { return; // nothing to be done } } // do something with p } In this case, the use of exceptions does not seem appropriate :/ On the other hand: try { print() is certainly more appealing than: if (!print("My cute little baby ")) { /*deal*/ } if (!print(baby.name())) { /*deal*/ } if (!print(" weighs ")) { /*deal*/ } if (!print(baby.weight())) { /*deal*/ } What is the best then ? It depends. Like all engineering problem there is no silver bullet, it's all about concessions. So keep 2 things in mind: Error reporting is part of the API APIs should be designed with ease of use in mind If you find yourself wondering whether to use an exception or not, just try to use your API. If there is no clear cut winner, it is just that: there is no ideal solution. Oh, and do not hesitate to refactor your API when it becomes clear that the error reporting mechanism elected at the time of crafting it is no longer appropriate. Don't be ashamed: requirements change with time, so it is normal that the API change with them. Personally I tend to use exceptions for unrecoverable errors only: I therefore have few try/catch in my code, only in the outermost levels, to accurately log the error (love stack frames) and log a dump of the BOM as well. This is very similar (and indeed strongly influenced) by Haskell, the code there is seggregated in two clear cut parts: while any can throw exceptions, only the IO part (the extern one) may actually catch them. Therefore, the pure part must deal with error conditions with other ways in case they are "normal". If, however, I am faced with a problem where using an exception makes the code easier to read and more natural (which is subjective) then I use an exception :)
