[site]: stackoverflow
[post_id]: 2533950
[parent_id]: 2533774
[tags]: 
Unfortunately clock() only has one second resolution on Linux (even though it returns the time in units of microseconds). Many people use gettimeofday() for benchmarking, but that measures elapsed time - not time used by this process/thread - so isn't ideal. Obviously if your system is more or less idle and your tests are quite long then you can average the results. Normally less of a problem but still worth knowing about is that the time returned by gettimeofday() is non-monatonic - it can jump around a bit e.g. when your system first connects to an NTP time server. The best thing to use for benchmarking is clock_gettime() with whichever option is most suitable for your task. CLOCK_THREAD_CPUTIME_ID - Thread-specific CPU-time clock. CLOCK_PROCESS_CPUTIME_ID - High-resolution per-process timer from the CPU. CLOCK_MONOTONIC - Represents monotonic time since some unspecified starting point. CLOCK_REALTIME - System-wide realtime clock. NOTE though, that not all options are supported on all Linux platforms - except clock_gettime(CLOCK_REALTIME) which is equivalent to gettimeofday(). Useful link: Profiling Code Using clock_gettime
