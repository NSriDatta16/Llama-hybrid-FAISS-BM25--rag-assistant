[site]: stackoverflow
[post_id]: 675709
[parent_id]: 673903
[tags]: 
Try JProfiler . It has a trial license and it is very full featured. To use it, you'll have to: Add the JProfiler agent as an argument to your java command Start the program on the server Start JProfiler and choose the "Connect to an application running remotely" Give it the port number and whatever host it's running on All these are in the instructions that come with JProfiler, but the important part is that you'll connect through a host and port to your running app. As for what to profile, I'm sure you have an idea of things that could be memory/CPU intensive - loading large data sets, sorting, even simple network I/O if it's done incorrectly. Do these things (it's great if you can automate load testing using some scripts that bang on your server) and collect a snapshot with JProfiler. Then view the graphs at your leisure. Turn on CPU monitoring and watch where the CPU cycles are being spent. You'll be able to narrow down by percentage in each method call, so if you're using more than 1 or 2% of CPU in methods that you have source for, go investigate and see if you can make them less CPU intensive. Same goes for memory. Disable all the CPU profiling, enable all the memory profiling, run the tests again and get your snapshot. Rinse, repeat. You might also take this time to read up on memory management and garbage collection. There's no better time to tune your garbage collection than when you're already profiling: http://java.sun.com/docs/hotspot/gc5.0/gc_tuning_5.html Pay special attention to the part on the eden/survivor object promotion. In web apps you get a lot of short-lived objects, so it often makes sense to increase the young generations at the expense of the tenured generations.
