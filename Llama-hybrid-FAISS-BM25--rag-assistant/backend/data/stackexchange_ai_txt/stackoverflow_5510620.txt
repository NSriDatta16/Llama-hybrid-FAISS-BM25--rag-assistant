[site]: stackoverflow
[post_id]: 5510620
[parent_id]: 3369872
[tags]: 
ADO.NET is not a ORM, but the question was about ADO.NET Datasets which provide an ORM facility largely equivalent to what the Object Relational Designer provides for LINQ to SQL. With respect to N-tier design, ADO.NET DataSets provide a means to separate the data classes from the data access classes into two separate assemblies. This means that you can use the data class assembly in your presentation tier, with out needing to reference the assembly containing the data access classes which should be used only by the middle tier. The O/R Designer allows you to specify separate namespaces for the data context and entity classes but doesn't provide a capability to put them into separate assemblies. So, from that perspective Datasets allow a cleaner n-tier design. The main advantage that LINQ to SQL provides is not that it's entity classes are better than data tables, but rather the OO querying capability that LINQ provides and the dynamic generation of the SQL code. Microsoft is a large organizition; its common for different parts of the organization to be working on products that originated from different contexts but end up competing.
