[site]: stackoverflow
[post_id]: 1082394
[parent_id]: 1082219
[tags]: 
UDP cons: packet size restriction means you can only send small messages (less than about 1.5k bytes). Lack of stream makes it hard to secure UDP: hard to do an authentication scheme that works on lossy exchange, and just as hard to protect the integrity and confidentiality of individual messages (no key state to rely on). No delivery guarantee means your target must be prepared to deal with message loss. Now is easy to argue that if the target can handle a total loss of messages (which is possible) then why bother to send them in the first place? UDP Pros: No need to store a system endpoint on the server for each client (ie. no socket). This is one major reason why MMO games connected to hundred of thousands of clients use UDP. Speed: The fact that each message is routed individually means that you cannot hit a stream congestion like TCP can. Broadcast: UDP can broadcast to all listeners on a network segment. You shouldn't even consider UDP if you're considering TCP too. If you're considering TCP means you are thinking in terms of a stream ( exactly once in order messages ) and using UDP will put the burden of fragmentation, retry and acknowledgment, duplicate detection and ordering in your app. You'll be in no time reinventing TCP in your application and it took all engineers in the word 20 years to get that right (or at least as right as it is in IPv4). If you're unfamiliar with these topics I recommend you go with the flow and use WCF, at least it gives you the advantage of switching in and out with relative ease various transports and protocols. Will be much harder to change your code base from TCP to UDP and vice versa if you made the wrong choice using raw .Net socket components.
