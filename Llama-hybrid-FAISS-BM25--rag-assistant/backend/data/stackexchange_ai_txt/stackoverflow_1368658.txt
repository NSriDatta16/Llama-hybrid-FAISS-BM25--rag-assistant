[site]: stackoverflow
[post_id]: 1368658
[parent_id]: 1368253
[tags]: 
NB: I'm not completely sure this explanation is correct, but it seems reasonable to me. First, let's see what the spec has to say on leading and half-leading : Since the value of 'line-height' may be different from the height of the content area there may be space above and below rendered glyphs. The difference between the content height and the used value of 'line-height' is called the leading. Half the leading is called the half-leading. User agents center glyphs vertically in an inline box, adding half-leading on the top and bottom. For example, if a piece of text is '12px' high and the 'line-height' value is '14px', 2pxs of extra space should be added: 1px above and 1px below the letters. (This applies to empty boxes as well, as if the empty box contained an infinitely narrow letter.) So far, so good. So any line boxes within a div.small that have a height less than the div.small 's line-height will be vertically centered with the div.small . Now let's look at the vertical-align property , specifically the middle value: Align the vertical midpoint of the box with the baseline of the parent box plus half the x-height of the parent. Note that this is not necessarily the center of the line box! The exact position will change with your choice of font face and size. You can verify this by zooming the text larger and smaller: the size of the gap changes. As you found, setting font-size: 0 removes the gap entirely. As the font now has no height, the line box gets a leading and half-leading of 50px, with the baseline centered vertically. To render the vertical-align: middle image, the browser sets its midpoint at that baseline, plus the x-height of the font, which is now zero. This gives a vertically-centered image.
