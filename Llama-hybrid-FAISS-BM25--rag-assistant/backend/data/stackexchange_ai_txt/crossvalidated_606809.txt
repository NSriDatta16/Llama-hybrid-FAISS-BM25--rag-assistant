[site]: crossvalidated
[post_id]: 606809
[parent_id]: 
[tags]: 
Reinforcement learning with simple integer arithmetic actions

Motivated by an experimental investigation in pure mathematics, I am interested in the following type of reinforcement learning problems: The state is a collection of N integers, where there are no bounds on the values (or the bounds are very large); The possible actions are given by a collection of M integers, which are, again, unbounded; Reward is negative (say, -1) if the state is different from a fixed goal, and large positive at the goal (so basically the result wanted is to learn how to reach the goal in the least possible number of actions); It is expected that the components of the action can be expressed by small-degree polynomials in the components of the observation (the polynomials themselves can vary). My thoughts so far: Since the state and the action spaces are very large, one should learn the policy as some sort of neural network or a decision tree or what other options are there to learn a complicated function. A simple neural network, one would expect, is terrible at producing integer outputs. The usual way around, as I see it, is to put as many output nodes as there are possible output values, do a softmax and round, which is unfeasible in this setting (I am not sure a reasonably simple NN would be able to convert even a single integer input to such a representation). Since the desired output is expectedly a result of simple arithmetic actions on the inputs, one might want the output to be some sort of a formula presented in one form or another. Thus my question is: Q: What are the possible approaches for the problem described above? To clarify and break it down into smaller pieces: Q1: What are the machine learning techniques able of producing integer outputs, given integer inputs? Q1': Which of those are able to do simple arithmetic (say, multiplication or even divmod)? Q2: If the output of the learned part of the policy is not the integers which constitute the actual action, but rather an expression to calculate them, what are the possible ways to encode and learn it? Q3: Provided there is some solution to the questions above, how to incorporate all of this into the Reinforcement Learning? Q4: What are some frameworks/libraries capable of doing parts of what is described above and how to combine them? An example: the state is a pair of integers (more generally, a collection of N integers), the actions are adding one of them to another with a coefficient, so (a,b) -> (a,b+a x) or (a,b) -> (a+b x,b). Can a reinforcement learning system "invent" the Euclidean algorithm?
