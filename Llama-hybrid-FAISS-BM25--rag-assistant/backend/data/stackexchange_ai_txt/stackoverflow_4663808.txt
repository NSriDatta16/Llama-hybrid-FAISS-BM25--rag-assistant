[site]: stackoverflow
[post_id]: 4663808
[parent_id]: 4663717
[tags]: 
For a while, there were a lot of "server side only" type web development going on, because there were so many differences between browsers when it came to JavaScript processing and item rendering, that it was better from a maintenance perspective to leverage these server side languages. They did all the heavy lifting and ensured you had a pretty consistent view across these browsers. The downside to the server side only apps is the constant post back to the server, which caused an ugly "flicker" effect with applications. If you had a bad connection, or a lot of server processing, it became annoying to wait 2 minutes for a page to update itself when all you did was check a box saying you didn't want to enter a calendar date, which forced the application to hide its calendar widget and maybe do some other processing. In addition, the view state generated by .Net applications really started to eat away a the user's experience, as more and more controls were being pushed into a single page, and controlled via AJAX or other events to display and hide them. Web pages became rather bloated by a process that was supposed to help eliminate some of that. jQuery and CSS have been some major advances that has pushed things back to the client side model. With a uniform way of displaying data, as well as leveraging the clients machine to do a lot of the heavy lifting of showing/hiding controls, it made more sense to have apps written this way. Generally speaking they are faster than their server side counterparts, and can do most of what the server side based apps do. In addition, the view state bloat goes away. You also have the ASP.NET MVC framework, which tries to balance both worlds of giving you the server side power, but reducing a lot of the client end bloat from the view state. In short, you'll find a lot more apps going the JavaScript route these days because you can get similar functionality, thanks to jQuery and CSS, and a lot less overhead and repeat trips back to the server.
