[site]: stackoverflow
[post_id]: 4113276
[parent_id]: 4113138
[tags]: 
I think that there are several ways of understanding what OOP means. For me, it is not about encapsulating mutable state , but more about organizing and structuring programs. This aspect of OOP can be used perfectly fine in conjunction with FP concepts. I believe that mixing the two concepts in F# is a very useful approach - you can associate immutable state with operations working on that state. You'll get the nice features of 'dot' completion for identifiers, the ability to easy use F# code from C#, etc., but you can still make your code perfectly functional. For example, you can write something like: type GameWorld(characters) = let calculateSomething character = // ... member x.Tick() = let newCharacters = characters |> Seq.map calculateSomething GameWorld(newCharacters) In the beginning, people don't usually declare types in F# - you can start just by writing functions and later evolve your code to use them (when you better understand the domain and know what is the best way to structure code). The above example: Is still purely functional (the state is a list of characters and it is not mutated) It is object-oriented - the only unusual thing is that all methods return a new instance of "the world"
