[site]: crossvalidated
[post_id]: 522747
[parent_id]: 307210
[tags]: 
You can train the neural network on the autoregressive principle, i.e. based on N previous values. The value of the argument is not required. Forecasting is done in the same way based on previous values, including those predicted. This works fine: from sklearn.neural_network import MLPRegressor import numpy as np step = 0.1 X = np.arange(0, 10, step) real_sin = np.sin(X) X_train,y_train = [],[] start = 10 # training history for i in range(0,len(real_sin)-start): X_train.append(real_sin[i:i+start]) y_train.append(real_sin[i+start]) regr = MLPRegressor(max_iter=1000, hidden_layer_sizes= tuple([100]*10)).fit(X_train, y_train) X_new,Y_new = [X[-1]],[real_sin[-1]] X_in = y_train[-start:] for i in range(200): X_new.append(X_new[-1]+step) next_y = regr.predict([X_in])[0] Y_new.append(next_y) X_in.append(next_y) X_in.pop(0) The result should look like this:
