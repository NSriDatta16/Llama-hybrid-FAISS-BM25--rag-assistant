[site]: stackoverflow
[post_id]: 4373455
[parent_id]: 4371718
[tags]: 
What's wrong with: #warning "Come back and implement this" #warning "Do not do that!" #warning "Must fix this before release" Normally, the compiler will include the argument(s) to - or material after - #warning in the error or warning message. And, normally, if the compiler detects something that warrants a warning, it reports it fairly clearly. Given the requirements, I think the only way to deal with this is to protect the #warning directives... #ifdef DO_WARNINGS #warning "Some warning" #endif /* DO_WARNINGS */ Most of the time, you compile without -DDO_WARNINGS ; when you need to check on the #warning warnings (with -Werror ), then you include -DDO_WARNINGS after all, accepting that the compilation will fail. Remember that make -k will do as much as possible even in the presence of individual compilation errors. Section 5.52.9 of the GCC 4.4.1 manual says (in part): 5.52.9 Diagnostic Pragmas GCC allows the user to selectively enable or disable certain types of diagnostics, and change the kind of the diagnostic. For example, a project’s policy might require that all sources compile with ‘-Werror’ but certain files might have exceptions allowing specific types of warnings. Or, a project might selectively enable diagnostics and treat them as errors depending on which preprocessor macros are defined. #pragma GCC diagnostic kind option Modifies the disposition of a diagnostic. Note that not all diagnostics are modifiable; at the moment only warnings (normally controlled by ‘-W...’) can be controlled, and not all of them. Use ‘-fdiagnostics-show-option’ to determine which diagnostics are controllable and which option controls them. kind is ‘error’ to treat this diagnostic as an error, ‘warning’ to treat it like a warning (even if ‘-Werror’ is in effect), or ‘ignored’ if the diagnostic is to be ignored. option is a double quoted string which matches the command line option. #pragma GCC diagnostic warning "-Wformat" #pragma GCC diagnostic error "-Wformat" #pragma GCC diagnostic ignored "-Wformat" Note that these pragmas override any command line options. Also, while it is syntactically valid to put these pragmas anywhere in your sources, the only supported location for them is before any data or functions are defined. Doing otherwise may result in unpredictable results depending on how the optimizer manages your sources. If the same option is listed multiple times, the last one specified is the one that is in effect. This pragma is not intended to be a general purpose replacement for command line options, but for implementing strict control over project policies. GCC also offers a simple mechanism for printing messages during compilation. #pragma message string Prints string as a compiler message on compilation. The message is informational only, and is neither a compilation warning nor an error. #pragma message "Compiling " __FILE__ "..." string may be parenthesized, and is printed with location information. I'm not sure whether you feel like editing your #warning lines into #pragma message lines. It would get you around the problem - and is only worse than adding conditional compilation around the #warning in that #pragma message might be supported by fewer compilers. It depends on what your portability requirements are.
