[site]: stackoverflow
[post_id]: 3706591
[parent_id]: 
[tags]: 
Is it a best practice to refactor an Interface method -- extracting a code fragment of a Interface method to create a new wrapping method?

From MSDN, I got an example as follows: IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); } public PeopleEnum GetEnumerator() { return new PeopleEnum(_people); } Why did the author do like this? Is it a best practice? --------EDIT--------- MSDN article link : http://msdn.microsoft.com/en-us/library/system.collections.ienumerable.aspx Why didn't the author do as follows: IEnumerator IEnumerable.GetEnumerator() { return new PeopleEnum(_people); } I tried, it still works. ======= SECOND EDIT ========== using System; using System.Collections; namespace MyEnumerableEnumerator { class Person { public Person(string name, int age) { Name = name; Age = age; } public string Name { get; set; } public int Age { get; set; } } class PeopleEnumerator : IEnumerator { int Position { get; set; } Person[] People { get; set; } int Length { get; set; } public PeopleEnumerator(Person[] people) { People = people; Position = -1; Length = people.Length; } public bool MoveNext() { Position++; return Position
