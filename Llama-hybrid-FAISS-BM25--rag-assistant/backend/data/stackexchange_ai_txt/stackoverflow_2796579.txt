[site]: stackoverflow
[post_id]: 2796579
[parent_id]: 
[tags]: 
How do I properly turn a const char* returned from a function into a const char** in C?

In short, I would like to do this: const char **stringPtr = &getString(); However, I understand that you can't & on rvalues. So I'm stuck with this: const char *string = getString(); const char **stringPtr = &string; I can live with two lines. Am I introducing problems with this hack? I should have no fear of passing stringPtr out of the function it is declared in, right? Edit: My apologies for not originally including the full context. I have taken on the summer project of building a video game from the ground up in C using OpenGL for graphics. I'm reading configuration data from a text file using libconfig . One of the convenience functions for finding a specific string from your configuration file looks like this: int config_setting_lookup_string(const config_setting_t *setting, const char *name, const char **value) { config_setting_t *member = config_setting_get_member(setting, name); if(! member) return(CONFIG_FALSE); if(config_setting_type(member) != CONFIG_TYPE_STRING) return(CONFIG_FALSE); *value = config_setting_get_string(member); return(CONFIG_TRUE); } The way that value is assigned means that if you give the function an uninitialized value , it attempts to derefence undefined garbage, which pretty much always causes me a segfault. My current workaround for this issue is to initialize value to another pointer first, like so: const char *dummyPtr; const char **fileName = &dummyPtr; config_setting_lookup_string(foo, "bar", fileName); So I am trying to figure out the best way to rewrite the last part of the function so that I won't have to perform this two-step initialization. I was thinking that the changed function would look like this: int config_setting_lookup_string(const config_setting_t *setting, const char *name, const char **value) { config_setting_t *member = config_setting_get_member(setting, name); if(! member) return(CONFIG_FALSE); if(config_setting_type(member) != CONFIG_TYPE_STRING) return(CONFIG_FALSE); const char *string = config_setting_get_string(member); value = &string; return(CONFIG_TRUE); }
