[site]: stackoverflow
[post_id]: 3415512
[parent_id]: 3415161
[tags]: 
You have two issues regarding the speed of your write and read operations. First, std::copy cannot do a block copy optimization when writing to an output_iterator because it doesn't have direct access to underlying target. Second, you're writing the integers out as ascii and not binary, so for each iteration of your write output_iterator is creating an ascii representation of your int and on read it has to parse the text back into integers. I believe this is the brunt of your performance issue. The raw storage of your array (assuming a 4 byte int) should only be 60MB, but since each character of an integer in ascii is 1 byte any ints with more than 4 characters are going to be larger than the binary storage, hence your 130MB file. There is not an easy way to solve your speed problem portably (so that the file can be read on different endian or int sized machines) or when using std::copy. The easiest way is to just dump the whole of the array to disk and then read it all back using fstream.write and read, just remember that it's not strictly portable. To write: std::fstream out(config.c_str(), ios::out | ios::binary); out.write( keys.data(), keys.size() * sizeof(int) ); And to read: std::fstream in(config.c_str(), ios::in | ios::binary); in.read( keys.data(), keys.size() * sizeof(int) ); ----Update---- If you are really concerned about portability you could easily use a portable format (like your initial ascii version) in your distribution artifacts then when the program is first run it could convert that portable format to a locally optimized version for use during subsequent executions. Something like this perhaps: std::array keys; // data.txt are the ascii values and data.bin is the binary version if(!file_exists("data.bin")) { std::ifstream in("data.txt"); std::copy(std::istream_iterator (in), std::istream_iterator (), keys.begin()); in.close(); std::fstream out("data.bin", ios::out | ios::binary); out.write( keys.data(), keys.size() * sizeof(int) ); } else { std::fstream in("data.bin", ios::in | ios::binary); in.read( keys.data(), keys.size() * sizeof(int) ); } If you have an install process this preprocessing could also be done at that time...
