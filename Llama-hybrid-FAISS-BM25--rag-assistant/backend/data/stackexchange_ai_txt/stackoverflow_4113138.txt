[site]: stackoverflow
[post_id]: 4113138
[parent_id]: 
[tags]: 
Object-oriented programming in a purely functional programming context?

Are there any advantages to using object-oriented programming (OOP) in a functional programming (FP) context? I have been using F# for some time now, and I noticed that the more my functions are stateless, the less I need to have them as methods of objects. In particular, there are advantages to relying on type inference to have them usable in as wide a number of situations as possible. This does not preclude the need for namespaces of some form, which is orthogonal to being OOP. Nor is the use of data structures discouraged. In fact, real use of FP languages depend heavily on data structures. If you look at the F# stack implemented in F Sharp Programming/Advanced Data Structures , you will find that it is not object-oriented. In my mind, OOP is heavily associated with having methods that act on the state of the object mostly to mutate the object. In a pure FP context that is not needed nor desired. A practical reason may be to be able to interact with OOP code, in much the same way F# works with .NET . Other than that however, are there any reasons? And what is the experience in the Haskell world, where programming is more pure FP? I will appreciate any references to papers or counterfactual real world examples on the issue.
