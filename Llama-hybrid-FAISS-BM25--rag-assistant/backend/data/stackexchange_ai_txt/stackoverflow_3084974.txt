[site]: stackoverflow
[post_id]: 3084974
[parent_id]: 3084712
[tags]: 
Delegate - basically the strategy design pattern. I don't agree. The Strategy pattern uses delegation but involves more than what Cocoa understands as delegation. If you have the Gang of Four book: it discusses delegation in the introduction (pp. 20-21). But I think you got it basically right: the delegating object calls methods on its delegate, either to inform it about something (a state change, an event) or to ask the delegate for data or if/how to proceed. The important thing is that delegate and delegating object are only loosely coupled: when implementing the delegating object, you don't have to care about the delegate's class. Target/action - This it where i'm mostly confused. Objects that have a setTarget: and setAction: method usually only have a single action/event (such as UIBarButtonItem , which only responds to one event: a single tap). Otherwise, the class should support setting different targets/actions for different events. See UIControl and its subclasses as an example. There, you assign target/action pairs with -addTarget:action:forControlEvents: and you are free to assign multiple targets for different events and also assign multiple targets for the same event.
