[site]: stackoverflow
[post_id]: 2689806
[parent_id]: 2677532
[tags]: 
You have to understand that functional programming and object oriented programming are somewhat antithetical to each other. It's not possible to both be purely functional and purely object oriented. Functional programming is all about stateless computations. Object oriented programming is all about state transitions. (Paraphasing this . Hopefully not too badly) JavaScript is more object oriented than it is functional. Which means that if you want to program in a purely functional style, you have to forego large parts of the language. Specifically all the object orient parts. If you are willing to be more pragmatic about it, there are some inspirations from the purely functional world that you could use. I try to adhere to the following rules: Functions that perform computations should not alter state. And functions that alter state should not perform computations. Also, functions that alter state should alter as little state as possible. The goal is to have lots of little functions that only do one thing. Then, if you need to do anything big, you compose a bunch of little functions to do what you need. There are a number of benefits to be gained from following these rules: Ease of reuse. The longer and more complex a function is, the more specialized it also is, and therefore the less likely it is that it can be reused. The reverse implication is that shorter functions tend to more generic and therefore easier to reuse. Reliability of code. It is easier to reason about correctness of the code if it is less complex. It is easier to test functions when they do only one thing. That way there are fewer special cases to test. Update: Incorporated suggestion from comment. Update 2: Added some useful links.
