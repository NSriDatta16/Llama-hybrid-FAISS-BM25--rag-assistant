[site]: stackoverflow
[post_id]: 4386243
[parent_id]: 4385390
[tags]: 
You didn't clarify what your issue is. If you want to pass an array, then pass an array. If you cannot change your API for the ctor for BC reasons, you can add another method to your User class, e.g. class User { // other code … public function populateFromArray(array $data) { foreach ($data as $property => $value) { if (property_exists($this, $property)) { $user->$property = $value; } } } } Then you can do $user = new User('','','','','','','','','','','',$db); $user->populateFromArray(array( 'id' => 'johndoe', 'email' => 'jdoe@example.com', // other … )); The ctor call looks pretty ugly, so if you can afford to change the API, I suggest to move required arguments to the beginning of the signature. This is suggested good practise in the PHP Manual anyway , e.g. change your ctor to public function __construct(PDO $pdo, $id = '', $email = '', …) { Note that I changed it to the new PHP5 style constructor. Naming the ctor after the class name is PHP4 style and is not compatible with namespaces as of PHP5.3.3. . You might also want to change your var keyword to public (or better yet protected and add proper getter and setter). Since everything but the PDO instance is optional, you can just as well remove all the optional arguments and always use your new populateFromArray method instead, reducing the instantiation to $user = new User($db); $user->populateFromArray($dataArray); If you want to implement the populateFromArray functionality in other classes as well, you might want to consider adding an interface IPopulate , e.g. interface IPopulate { public function populateFromArray(array $data); } But your classes implementing this interface would have to add the method body each time, which is a bit redundant given that our populating code is quite generic. With php.next there will be traits for an elegant solution for horizontal reuse like this. Yet another possible solution would be to just use the Reflection API to pass the array to your regular ctor (though you should give it a benchmark afterwards because the Reflection API is considered slow). See Pass arguments from array in php to constructor
