[site]: stackoverflow
[post_id]: 4803061
[parent_id]: 
[tags]: 
Is it possible to reduce the amount of arguments this on the boilerplate function?

I'm currently trying to create an automagic django model instantiator. This function will take a couple of arguments, instantiate a few django models, link some foreign keys together, save the lot and return the main model back to me. This is all fine and all but in the end, the function takes 4 normal arguments and 2 tuples (filled with a contenttype name and an array of arguments for a different function call). This leads to the following function def: def create_rule(profile, lifestyles, bool, title, input, output): rule = Rule.objects.create( user_profile=profile, lifestyles=lifestyles, bool=bool, title=title, ) models = ContentType.objects.filter(app_label="rules") input_cls = models.get(model=input[0]).model_class() input_cls.objects.create(*input[1], rule=rule) output_cls = models.get(model=output[0]).model_class() output_cls.objects.create(*output[1], rule=rule) return rule An average function call might look something a little like this: create_rule(profile, '1,3,6,7', 1, "Switch off when 5:00", ('eventruleinput', [5, 'start']), ('propruleoutput', [35, 'Switch', 0])) Is there a nice way to reduce the amount of arguments I'm using (not really I guess)? Is there a better way of structuring this function call? Am I doing this the completely wrong way? Note: this is only a mockup implementation, Im kinda wondering wether I want to approach the problem like this.
