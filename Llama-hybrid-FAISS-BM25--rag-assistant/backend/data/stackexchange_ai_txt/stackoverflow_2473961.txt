[site]: stackoverflow
[post_id]: 2473961
[parent_id]: 2473428
[tags]: 
Resulting Image The result is still incomplete, however it clearly shows a better trend line than that in the question. Calculation There were two key components missing: Sliding window. A List of Double values that cannot grow beyond a given size. Calculation. A variation on the accept answer (one less call to getIterations() ): ((value - previousAverage) / (getIterations() + 1)) + previousAverage Source Code import java.math.BigDecimal; import java.util.ArrayList; import java.util.List; import net.sf.jasperreports.engine.fill.AbstractValueProvider; import net.sf.jasperreports.engine.fill.JRFillVariable; import net.sf.jasperreports.engine.fill.JRIncrementer; /** * Used by an iReport variable to increment its average. */ public class RunningAverageIncrementer implements JRIncrementer { /** Default number of tallies. */ private static final int DEFAULT_TALLIES = 128; /** Number of tallies within the sliding window. */ private static final int DEFAULT_SLIDING_WINDOW_SIZE = 30; /** Stores a sliding window of values. */ private List values = new ArrayList ( DEFAULT_TALLIES ); /** * Instantiated by the RunningAverageIncrementerFactory class. */ public RunningAverageIncrementer() { } /** * Calculates the average of previously known values. * @return The average of the list of values returned by getValues(). */ private double calculateAverage() { double result = 0.0; List values = getValues(); for( Double d: getValues() ) { result += d.doubleValue(); } return result / values.size(); } /** * Called each time a new value to be averaged is received. * @param value The new value to include for the average. */ private void recordValue( Double value ) { List values = getValues(); // Throw out old values that should no longer influence the trend. // if( values.size() > getSlidingWindowSize() ) { values.remove( 0 ); } this.values.add( value ); } private List getValues() { return values; } private int getIterations() { return getValues().size(); } /** * Returns the newly incremented value, which is calculated by averaging * the previous value from the previous call to this method. * * @param jrFillVariable Unused. * @param tally New data point to average. * @param abstractValueProvider Unused. * @return The newly incremented value. */ public Object increment( JRFillVariable jrFillVariable, Object tally, AbstractValueProvider abstractValueProvider ) { double value = ((Number)tally).doubleValue(); recordValue( value ); double previousAverage = calculateAverage(); double newAverage = ((value - previousAverage) / (getIterations() + 1)) + previousAverage; return new BigDecimal( newAverage ); } protected int getSlidingWindowSize() { return DEFAULT_SLIDING_WINDOW_SIZE; } }
