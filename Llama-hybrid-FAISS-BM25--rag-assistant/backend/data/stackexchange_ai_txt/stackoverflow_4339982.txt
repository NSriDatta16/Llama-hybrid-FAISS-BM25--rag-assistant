[site]: stackoverflow
[post_id]: 4339982
[parent_id]: 1995113
[tags]: 
C#'s default inheritance model wins my vote: public class Animal { public string Speak() { return "unknown sound" ; } } public class Dog : Animal { public string Speak() { return "Woof!" ; } } class Program { static void Main( string[] args ) { Dog aDog = new Dog() ; Animal anAnimal = (Animal) aDog ; Console.WriteLine( "Dog sez '{0}'" , aDog.Speak() ) ; Console.WriteLine( "Animal sez '{0}'" , anAnimal.Speak() ) ; return ; } } Running the program give the following as a result: Dog says 'Woof!' Animal says 'unknown sound' Getting that sort of behavior should require the programmer to go out of the programmer's way. The subclass instance doesn't stop being what it is because it's been upcast to its supertype. Instead you have to explicitly request the expected (and almost always desired) result: public class Animal { public virtual string Speak() { return "unknown sound" ; } } public class Dog : Animal { public override string Speak() { return "Woof!" ; } }
