[site]: stackoverflow
[post_id]: 3076293
[parent_id]: 3076254
[tags]: 
RMI is not a complex thing, it's the opposite. It allows you to develop your game protocol without caring about having Message objects going between server and clients with long if chains to check which kind of message it is and do whatever is required. What you can actually do with RMI is to have a centralized object (on the server) on which you directly call methods from clients like iWantToMoveThere(position) or iWantToBuyLand(where) and so on. This simplifies the protocol while putting some overhead that you would have in any case since I discourage you from implementing a binary procotol. A XML or a serialized Java one would be a good compromise since you don't really need realtime for a game like this one. Another advantage of RMI is that you will easily manage a master server on which many game servers may attach to give players the opportunity to play in them, and also many other little things like managing a separated lobby or so on. Just as direct experience: I used RMI to manage a server that allowed developers to publish their own game plugins allowing players to automatically connect to the server and download the content to be able to play. Everything was handled by RMI except for the fact that I needed a backward TCP connection to be able to handle asynchronous events whenever I needed. The whole source code was just ~1k lines in a bunch of 7-8 classes
