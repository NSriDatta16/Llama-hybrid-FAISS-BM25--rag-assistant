[site]: stackoverflow
[post_id]: 5534877
[parent_id]: 5534712
[tags]: 
That code just looks like FB's HTML. You'd need to give us a better idea of your Django Auth structure if you wanted more help. There are quite a few more steps ahead of you. I would look into Django-SocialAuth for an easily integrated experience if I were you. Edit: As a follow up to the inclusion of your Settings.py, assuming that you've read the Facebook Authentication docs as well as the SocialAuth README, you will need to set up the appropriate controller for fb's authentication callback url. After that, hook these SocialAuth views into your current authentication process: def facebook_login(request): """ Facebook login page """ if request.REQUEST.get("device"): device = request.REQUEST.get("device") else: device = "user-agent" params = {} params["client_id"] = FACEBOOK_APP_ID params["redirect_uri"] = request.build_absolute_uri(reverse("socialauth_facebook_login_done")) url = "https://graph.facebook.com/oauth/authorize?"+urllib.urlencode(params) return HttpResponseRedirect(url) def facebook_login_done(request): user = authenticate(request=request) if not user: request.COOKIES.pop(FACEBOOK_API_KEY + '_session_key', None) request.COOKIES.pop(FACEBOOK_API_KEY + '_user', None) # TODO: maybe the project has its own login page? logging.debug("SOCIALAUTH: Couldn't authenticate user with Django, redirecting to Login page") return HttpResponseRedirect(reverse('socialauth_login_page')) login(request, user) logging.debug("SOCIALAUTH: Successfully logged in with Facebook!") if request.GET.get('next'): return HttpResponseRedirect(request.GET.get('next')) else: return HttpResponseRedirect(LOGIN_REDIRECT_URL)
