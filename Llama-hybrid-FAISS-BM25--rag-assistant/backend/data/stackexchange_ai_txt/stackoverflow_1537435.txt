[site]: stackoverflow
[post_id]: 1537435
[parent_id]: 1530959
[tags]: 
I believe the solution to your problem is to use Terracotta as your persistent storage mechanism. I encourage you to read this excellent article about doing so. It addresses your two main concerns: performance and transparency . It easily scales up to large graphs, while maintaining high performance, because of its efficient sync mechanism which only sends instance diffs across the network. It also persists your graph transparently because it works on the VM level, absolving you of the impedance mismatch problem you would face with the alternatives mentioned in other answers (ORM or OCM). To be clear, Terracotta is not a persistence solution for every case. It's best employed when you need data available across machine reboots and you need it quickly. It's not a good solution when you need that data "archived", for example having requirements to access that data long after the running system has stopped working with it. Think about orders coming into a web store. You probably want to store these orders for years after they've been fulfilled. In these cases you can look at a hybrid approach, where select data needing to be archived can be pulled out of the Terracotta cluster and stored using a traditional RDBMS. For a more complete review of the pros & cons, be sure to read this StackOverflow post which covers more of the minutiae in making the choice.
