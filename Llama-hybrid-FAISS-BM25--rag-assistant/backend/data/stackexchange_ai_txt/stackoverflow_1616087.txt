[site]: stackoverflow
[post_id]: 1616087
[parent_id]: 1616055
[tags]: 
In the SQL server 2008 R2 there will be Unicode compression, see Unicode Compression in SQL Server 2008R2 . This will make the problem of storage space of nvarchar vs. varchar largely a problem of the past. You are on SQL 2005 still, but you should program in the future tense . The question of varchar vs. nvarchar is only one facet of the problem. The other facet is the enforcement of proper collation (needed for nvarchar just as much as for varchar). Since columns cannot have multiple collations, the common solution is to separate the data into string tables for each language, where columns are declared with the appropiate collation for each language used. Update There is a lengthy discussion of SQL Server 2005 international data at International Features in Microsoft SQL Server 2005 . BTW, comments like 'just use UTF-8' are just missing the point. SQL Server stores nvarchar data encoded as UCS-2 and that's it, period. You can store XML data as UTF-8 or UTF-16, but no sane database person would recommend using XML to store your strings. Also while you may get away with an encoding like 1252, you will not get away so easily with a single collation. Specially since you have Spanish as a requirement and Spanish collations are notoriously problematic. For example your Spanish speaking users will expect 'Chiapas' to sort after 'Colima', but the Latin collation will sort 'Colima' after 'Chiapas', see Working with Collations . Other problems will appear at comparison, where names that are different may be compared to be equal, again due to the wrong collation choice.
