[site]: stackoverflow
[post_id]: 3703709
[parent_id]: 3703658
[tags]: 
Since you've included the C++0x tag, the obvious answer would be to look up initializer lists . An initializer list lets you specify a number of arguments to a ctor that will be automatically converted to a single data structure for processing by the ctor. Their primary (exclusive?) use is for exactly the sort of situation you've mentioned, passing a number of arguments of the same type to use in creating some sort of list/array/other collection of objects. It'll be supported by (for one example) std::vector , so you could use something like: std::vector dragons_to_slay{Eunice, Helga, Aida}; to create a vector of three dragon objects. Most (all?) of the other collections will include the same, so if you really insist on a list of dragons you should be able to get that pretty easily as well.
