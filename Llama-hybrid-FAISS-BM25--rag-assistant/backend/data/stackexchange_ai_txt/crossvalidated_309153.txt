[site]: crossvalidated
[post_id]: 309153
[parent_id]: 
[tags]: 
Recommending optimal values for a process based on Time-Series data

I have an industrial process having 5 attributes (assume 1 gauges and 4 knobs) . The process is driven by controlling the 4 knobs and the gauge tells us the performance. Now, the gauge's range is [-1000,1000] and it's optimal range is [2,3] . I want to design a system which recommends optimal settings for the 4 knobs resulting an optimal value for the gauge. Data I have Time-Series data having continuous values. Total features = 5 (all continuous). Data dimensions = (70000, 5). NOTE: It's time-series so the index is time_stamp. So far: Based on basic research. I implemented a K-NN variation - recommended values of 4 knob variables by finding the records in the data that are closest to the values 1 gauge variable. GetClosest(DATA, OPTIMAL_VALUE): closestIndex = index of the record in DATA where gauge value of that record is similar to optimal gauge value i.e. OPTIMAL_VALUE closestRecord = DATA[closestIndex] return closestRecord data = [[K1, K2, K3, K4, G1], [K1, K2, K3, K4, G1], ....] OPTIMAL_VALUE = 2.1 # it is in the range **[2,3]** result = GetClosest(data, OPTIMAL_VALUE) print "Set following values to get **2.1** in Gauge\n", result[K1, K2, K3, K4] This works fine. As it should. No machine learning involved. Simple Calculation. Problem with this is inherited from k-NN. Data requires to be loaded into the memory, which is not a good practice, esp. if the data is too much (I believe). Questions: Does the above formulation of the problem seems reasonable? Is kNN actually applicable to this kind of problems? Is this considered recommendation model (in ML perspective)? I tried treating it as a forecasting problem, and implemented an LSTM (described HERE ). But, it didn't give quite inaccurate results. Should this be treated as a forecasting problem? Is there any other technique/algorithm, I should look into? Please pardon any mistakes (BUT, do point out). Still learning.
