[site]: stackoverflow
[post_id]: 4763803
[parent_id]: 4763721
[tags]: 
Yes. Like others said, you can truth table it. The De Morgan rules can also help. However, I think the best option is to use a Karnaugh Map . It takes a few minutes to learn, but Karnaugh Maps allow you to consistently find the most minimal expression for boolean logic. Truth tables can verify a minimization, but they can't give it to you. Here's how I got it: First, the table layout: AB 00 01 11 10 0| | | | | C 1| | | | | Now, considering your equation, B || C will always cause a truth: AB 00 01 11 10 0| | T | T | | C 1| T | T | T | T | This leaves only two cases. In either case, the right side evaluates to false. For 000, the left side also evaluates to false (0 && !(whatever) is false). For 100, 1 && !(0 ||| 0) evaluates to true. Thus, the statement is true. Filling in: AB 00 01 11 10 0| F | T | T | T | C 1| T | T | T | T | Now, we only need to "cover" all the truths. "C" will cover the bottom row. "B" will cover the middle square (of four values). Thus, "B || C" covers all but the top right square. Now, "A" will cover the right four-space square. It's OK that this is redundant. Thus, "A || B || C" covers all the true squares and omits the only false one.
