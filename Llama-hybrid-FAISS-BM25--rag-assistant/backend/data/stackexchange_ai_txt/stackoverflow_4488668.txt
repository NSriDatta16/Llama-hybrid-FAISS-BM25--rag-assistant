[site]: stackoverflow
[post_id]: 4488668
[parent_id]: 4460038
[tags]: 
There's only three ways to collect test coverage data: Instrument the program, and let the instrumentation do to coverage collection Interrupt the program (assuming native execution) on a periodic basic to determine its PC, and map the PC to source line numbers Run the program under an interpreter, and let the interpreter do it (or let the interpreter make calls on an special user-code event handler when certain key program events occur, such as "function entry"). It may be in fact, that an interpreter doesn't have that ability built-in, in which case you are reduced to the first solution :-{ If you are running an interpreter, any test coverage data collection it may have built-in should be pretty well advertised in its documentation. You can likely implement the "interrupt to get PC" method yourself, using symbol data from the link map or the object file (or maybe someone has done it already for you.) It has a serious downside: because you are sampling the PC, it is hard to verify that some function actually got executed. It may have, and you simply didn't sample the PC at the right moment. This is the reason this scheme isn't used in practical test coverage tools.
