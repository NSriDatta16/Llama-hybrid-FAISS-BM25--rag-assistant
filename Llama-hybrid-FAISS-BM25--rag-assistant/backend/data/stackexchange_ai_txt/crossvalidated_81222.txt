[site]: crossvalidated
[post_id]: 81222
[parent_id]: 74497
[tags]: 
It's not entirely clear to me whether or not this is an R programming question or a statistics question. In any case, I'll address the issue of trying to come up with a better automatic approach in R (in order to save the OP from the annoyance of typing!). My answer may not be pretty, but let me throw the idea out there anyway! In terms of exhausting a list of potential models, you could try creating a big loop like this: signs This loop will save you the effort of having to randomly try different models; the loop will, instead, systematically go through a complete list of models. Play around with the signs and trans vectors to add more combinations of models to the list. Note: You'll have to tweak the loop to estimate the models rather than have the loop simply print out strings of text - I've set up the loop this way for the purpose of illustration. A warning: using this method to find a model is more or less a pure data mine! I'll leave it to you decide whether or not this is a good or bad strategy! Below is a snapshot of output that the loop produces: [1] "svm(result ~ pred1 + pred2 + pred3 , data=train)" [1] "svm(result ~ pred1 + pred2 + pred3^2 , data=train)" [1] "svm(result ~ pred1 + pred2 + pred3^3 , data=train)" [1] "svm(result ~ pred1 + pred2^2 + pred3 , data=train)" [1] "svm(result ~ pred1 + pred2^2 + pred3^2 , data=train)" [1] "svm(result ~ pred1 + pred2^2 + pred3^3 , data=train)" [1] "svm(result ~ pred1 + pred2^3 + pred3 , data=train)" [1] "svm(result ~ pred1 + pred2^3 + pred3^2 , data=train)" [1] "svm(result ~ pred1 + pred2^3 + pred3^3 , data=train)" [1] "svm(result ~ pred1^2 + pred2 + pred3 , data=train)" [1] "svm(result ~ pred1^2 + pred2 + pred3^2 , data=train)" [1] "svm(result ~ pred1^2 + pred2 + pred3^3 , data=train)" [1] "svm(result ~ pred1^2 + pred2^2 + pred3 , data=train)" [1] "svm(result ~ pred1^2 + pred2^2 + pred3^2 , data=train)" [1] "svm(result ~ pred1^2 + pred2^2 + pred3^3 , data=train)" [1] "svm(result ~ pred1^2 + pred2^3 + pred3 , data=train)" [1] "svm(result ~ pred1^2 + pred2^3 + pred3^2 , data=train)" [1] "svm(result ~ pred1^2 + pred2^3 + pred3^3 , data=train)" [1] "svm(result ~ pred1^3 + pred2 + pred3 , data=train)" [1] "svm(result ~ pred1^3 + pred2 + pred3^2 , data=train)" [1] "svm(result ~ pred1^3 + pred2 + pred3^3 , data=train)" [1] "svm(result ~ pred1^3 + pred2^2 + pred3 , data=train)" [1] "svm(result ~ pred1^3 + pred2^2 + pred3^2 , data=train)" [1] "svm(result ~ pred1^3 + pred2^2 + pred3^3 , data=train)" [1] "svm(result ~ pred1^3 + pred2^3 + pred3 , data=train)" [1] "svm(result ~ pred1^3 + pred2^3 + pred3^2 , data=train)" [1] "svm(result ~ pred1^3 + pred2^3 + pred3^3 , data=train)" [1] "svm(result ~ pred1 + pred2 * pred3 , data=train)" [1] "svm(result ~ pred1 + pred2 * pred3^2 , data=train)" [1] "svm(result ~ pred1 + pred2 * pred3^3 , data=train)" [1] "svm(result ~ pred1 + pred2^2 * pred3 , data=train)" [1] "svm(result ~ pred1 + pred2^2 * pred3^2 , data=train)" # --- Lots More Output here --- [1] "svm(result ~ pred1^3 * pred2^2 * pred3^2 , data=train)" [1] "svm(result ~ pred1^3 * pred2^2 * pred3^3 , data=train)" [1] "svm(result ~ pred1^3 * pred2^3 * pred3 , data=train)" [1] "svm(result ~ pred1^3 * pred2^3 * pred3^2 , data=train)" [1] "svm(result ~ pred1^3 * pred2^3 * pred3^3 , data=train)"
