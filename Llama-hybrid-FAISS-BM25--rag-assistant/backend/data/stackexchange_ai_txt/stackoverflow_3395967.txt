[site]: stackoverflow
[post_id]: 3395967
[parent_id]: 3393858
[tags]: 
can anyone tell me why I am getting this error.. because you're doing it wrong. runInteraction runs the supplied function with an argument of a cursor to a transaction which is run in a thread. You shouldn't be calling reactor.callInThread(Scanner().deferExecute) . It's better to use a twisted.internet.task.LoopingCall, it will make sure that the call completes before the next is fired. You're just running a query in your example, so you could just use ConnectionPool.runQuery instead of ConnectionPool.runInteraction. Use errorBack functions to report on Exceptions. Attempting to correct for your badly formatted code, I think you've got this: from twisted.internet import reactor, defer,threads from twisted.enterprise import adbapi dbpool = adbapi.ConnectionPool("MySQLdb", '192.168.1.102','test', 'test', 'test') class Scanner: def _execQuery(self,txn): sql="SELECT tool_id,tool_name FROM tool_master" txn.execute(sql) result = txn.fetchall() return result def objCursor(self): return dbpool.runInteraction(self._execQuery) def printResult(self,result): print "resssssssssssssssssss",result reactor.callLater(3,self.deferExecute) def deferExecute(self): self.objCursor().addCallback(self.printResult) Scanner() class MyApp(object): reactor.callInThread(Scanner().deferExecute) reactor.run() MyApp() When you probably need something like the following instead. If you're planning on writing a twisted Application will be easy to modify this Scanner class to inherit from twisted.application.service.Service . from twisted.internet import reactor, defer, task from twisted.enterprise import adbapi class Scanner(object): def __init__(self,dbpool=None): self.dbpool = dbpool self.loopCall = task.LoopingCall(self.myQuery) def start(self): print "Started scanner" self.loopCall.start(3) def stop(self): print "Stopping scanner" self.loopCall.stop() def myQuery(self): def interact(txn): sql="SELECT tool_id,tool_name FROM tool_master" txn.execute(sql) return txn.fetchall() d = self.dbpool.runInteraction(interact) d.addCallbacks(self.printResult,self.printError) def printResult(self,result): print "Got Result: %r" % result def printError(self,error): print "Got Error: %r" % error error.printTraceback() if __name__ == '__main__': from twisted.internet import reactor dbpool = adbapi.ConnectionPool("MySQLdb", '192.168.1.102','test', 'test', 'test') s = Scanner(dbpool) reactor.callWhenRunning(s.start) reactor.addSystemEventTrigger('before','shutdown',s.stop) reactor.run()
