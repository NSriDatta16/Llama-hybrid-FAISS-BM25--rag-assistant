[site]: stackoverflow
[post_id]: 5046698
[parent_id]: 1891526
[tags]: 
Probably you have already worked something out but there might be some others who are landing on this question and not getting any help. So I thought I will give a try to give some info about the issue. I have to admit that I have tangled with this issue myself. Please let me to refer to another forum for some insight. Jonathan McCracken (the author of "Test-Drive ASP.NET MVC", which I like very much): MVC Contrib does not map parameters, that’s up to model binding which can be tested separately. So in these cases where you have parameters you need to pass null and then your test will pass. Here is the solution: [TestFixture] public class RouteDefinitionsTest { [SetUp] public void setup() { var routes = RouteTable.Routes; routes.Clear(); RouteDefinitions.AddRoutes(routes); } [Test] public void Should_Route_To_Edit_Page_With_Title() { "~/Todo/Edit". ShouldMapTo (x => x.Edit(null)); } } Course you’ll need to add RouteDefinitions to your Web project as well which is here: public class RouteDefinitions { public static void AddRoutes(RouteCollection routes) { routes.IgnoreRoute("{resource}.axd/{*pathInfo}"); routes.MapRoute("Default", // Route name "{controller}/{action}/{id}", // URL with parameters new {controller = "Home", action = "Index", id = string.Empty} // Parameter defaults ); } } I just extracted this out of the Global.asax.cs file, so now that needs to change to the following: public static void RegisterRoutes(RouteCollection routes) { RouteDefinitions.AddRoutes(routes); } Source (July 21, 2010): http://forums.pragprog.com/forums/124/topics/4824 If you care about the internal workings of the "ShouldMapTo()" then here is the source. Knock yourself out. public static RouteData ShouldMapTo (this RouteData routeData, Expression > action) where TController : Controller { Assert.That(routeData, Is.Not.Null, "The URL did not match any route"); //check controller routeData.ShouldMapTo (); //check action var methodCall = (MethodCallExpression) action.Body; string actualAction = routeData.Values.GetValue("action").ToString(); string expectedAction = methodCall.Method.Name; actualAction.AssertSameStringAs(expectedAction); //check parameters for (int i = 0; i Source (November 25, 2008): http://flux88.com/blog/fluent-route-testing-in-asp-net-mvc/ (it might be a bit out dated)
