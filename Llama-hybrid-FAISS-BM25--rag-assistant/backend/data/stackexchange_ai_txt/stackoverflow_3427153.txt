[site]: stackoverflow
[post_id]: 3427153
[parent_id]: 3426177
[tags]: 
Why not let Team B work on the trunk and Team A on a branch? Everyone gets what they want! (just kidding: this is really no different from approach A) Seriously, though, you are trying to choose between "work in silos" and "have only one huge team" (or more diplomatically: "stable workspaces" and "proactive collaboration"). I would suggest a hybrid approach. But I also agree with Kai Inkinen's idea to refactor the codebase into shared vs team-specific code. Your teams are large enough that the code they generate will be significant: more components makes sense and might avoid this issue altogether. Assuming you don't have that option: Some disadvantages of A: (think: what's the trunk going to look like at the end of week 2? How confident will you feel about that code?) encourages "big crunch" merges near the end of a sprint ( in fact you are planning on it! ). Expect conflicts, duplicated effort, and sub-optimal code structure after the merge. prevents a team from taking advantage of good changes made by the other team at the end of the sprint: who gets to merge to trunk first? That team might as well have been on the trunk all along! Some disadvantages of B: (think: Team B wants to share changes among themselves that aren't good enough for the trunk yet. You know this will happen , or else why are there two teams at all?) discourages frequent checkins encourages "working copy transfers" whenever someone from Team B "breaks" the codebase, Team A will say "I told you so" My suggested approach: have both teams use separate branches, to encourage frequent checkins for each team. Checkins are good . (If a team (A) wants to keep their code protected, they will find ways to achieve the same ends even if you don't give them a branch, i.e., working copy transfers: "hey Kim, I know it's not perfect, and you haven't checked it in yet, but can you send me your fix for that file?") have both teams "deliver" to trunk often: not just at the end of a sprint. Deliver each "story" as it is completed. have both teams "sync" from the trunk often (ideally after every "delivery" from the other team). This, in conjunction with the action above, keeps merges as small as possible and should make the end of the sprint completely painless. Team A may resist this; they should be encouraged to "respond to change" in the code -- they'll have to merge eventually. http://svnbook.red-bean.com/nightly/en/svn.branchmerge.basicmerging.html#svn.branchemerge.basicmerging.stayinsync With this approach, teams will be rewarded (with comparatively easy merges) for checking in often and for delivering changes to the trunk as soon as possible. Both of these are good things. I should also point out that with something like git/Mercurial, you have a bit more flexibility.
