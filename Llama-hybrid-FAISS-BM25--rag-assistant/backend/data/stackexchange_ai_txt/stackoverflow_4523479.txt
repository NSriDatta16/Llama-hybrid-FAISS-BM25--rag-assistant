[site]: stackoverflow
[post_id]: 4523479
[parent_id]: 
[tags]: 
Passing existing C++ objects to Lua and calling the passed objects' member functions

I'm working on a little simulation project which uses Lua to drive the behavior of individual units (ants) and using Luabind to glue the C++ and Lua sides together. Each individual ant (there are different types, derived from the base class Ant) has a Run() function, which calls the appropriate script; the script then carries out whatever actions need to be taken, calling the exposed class functions and possibly free functions. I've gotten the Run function (in C++) to successfully execute the matching Run function in the Lua script (which just prints some text at the moment). void AntQueen::Run() { lua->GetObject("QueenRun")(GetID()); } lua is just a manager class which retrieves the function from the script. The above is calling the following in a Lua file: function QueenRun(ID) print("The Queen is running!") print(ID) end And Luabind registration looks like this for the AntQueen class: void Register(lua_State *luaState) { using namespace luabind; module(luaState) [ class_ ("AntQueen") .def("Eat", &AntQueen::Eat) .def("ExtractLarvae", &AntQueen::ExtractLarvae) .def("GetMaxLarvaeProduced", &AntQueen::GetMaxLarvaeProduced) .def("GetNumAvailLarvae", &AntQueen::GetNumAvailLarvae) ]; } The way it's set up now, ants are created, removed, and found through a simple factory/manager. Each ant can be retrieved by calling static Ant* AntFactory::GetAntByID(const int ID) which just finds the ant in a hash map and returns a pointer to the ant. What I'm trying to do is get Lua to be able to do something like the following: function QueenRun(ID) ant = GetAntByID(ID) larvae = ant:GetNumAvailLarvae() print(larvae) ant:Eat() end The above is just a made up example, but hopefully it shows what I'm trying to achieve. I don't want Lua to garbage collect the objects, because they are managed already on the C++ side. While testing everything out, any attempt to do the following: ant = GetAntByID(ID) in Lua resulted in abort() being called and the program crashing and burning. R6010 -abort() has been called I just seem to be missing something with how everything gets shuttled back and forth (this is my first foray into gluing Lua and C++ together beyond toy programs). I'm pretty sure passing a plain pointer isn't the way to do it; lightuserdata seems to be what I'm looking for, but it also has a bunch of restrictions. So to sum up: What is going on here that causes abort to be called and how can I use Luabind/the Lua C API to get a pointer to a C++ object passed to Lua and call member functions on that pointer as if it were an object (without letting Lua garbage collect it)?
