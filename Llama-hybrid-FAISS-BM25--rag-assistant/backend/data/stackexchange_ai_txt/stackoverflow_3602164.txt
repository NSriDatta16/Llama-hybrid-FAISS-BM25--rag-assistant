[site]: stackoverflow
[post_id]: 3602164
[parent_id]: 3579799
[tags]: 
You didn't ask if it was a good idea - as many suggested, your benefit of that kind of space compression, is easily lost in the extra processing - but that's another topic :) You're also not mentioning where you're storing the data after. Whatever that storage location/engine is maybe have further conditions and specialized types (eg a database has a binary column format, might have a byte column format, may even support bit storage etc). But sticking with the topic, I guess best 3 bit storage is as a nibble (waisting one bit) and I suppose I'd combine two nibbles into a byte (loosing two bits overall). Yes you're loosing two bits (if that's key), but it's simple to combine the two values so you're processing overhead is relatively small: $byte=$val1*7+$val2; $val2=$byte%7;$val1=($byte-$val2)/7; If a byte isn't available, you can combine these up to make 16 (4 stored), 32 (8), 64 (16) bit integers. You can also form an array of these values for larger storage. I'd consider the above more human readable, but you could also use bit-logic to combine and separate the values: $combinedbyte=$val1 >3); (This is effectively what the PACK/UNPACK commands do) Alternatively you could encode into characters, since in ASCII the first few are protected, you might as well start at A (A-Z+6 punc+a-z gives you 58 when you only need 49 to store your two values). $char=chr(($val1*7+$val2)+65); //ord('A')=65 $val2=(ord($char)-65)%7;$val1=(ord($char)-65-$val2)/7; A series of these encoded characters could be stored as an array or in a null terminated string. NOTE: In the case of -say- 64 bit integers above, we're storing 3 bits in 4 so get 64/4=16 storage locations. This means we're waisting 16 further bits (1 per location) so you might be tempted to add another 5 values, for a total of 21 (21*3=63 bits, only 1 wasted). That's certainly possible (with integer math - although most PHP instances don't work @ 64 bits, or bit-logic solutions) but it complicates things in the long run - probably more trouble than it's worth.
