[site]: stackoverflow
[post_id]: 3449785
[parent_id]: 3369195
[tags]: 
This is a Rails solution that creates self-referencing joins for the AND case and a simple SQL include for the OR case. The solution assumes a Model called TopicTag and consequently a table called topic_tags. The class method Search expects 2 arguments an array of Tags and a string containing either "and" or "or" class TopicTag 'DISTINCT topic_id', :conditions => { :tag => tags}) end end end In order to get some more test coverage the data was extended to include an extra record for chess. The Database was seeded with the following code [1,2].each {|i| TopicTag.create(:topic_id => i, :tag => 'football')} [1,3].each {|i| TopicTag.create(:topic_id => i, :tag => 'cricket')} [2,3,4].each {|i| TopicTag.create(:topic_id => i, :tag => 'basketball')} [4,5].each {|i| TopicTag.create(:topic_id => i, :tag => 'chess')} The following test code produced the results shown tests = [ %w[football cricket], %w[chess], %w[chess cricket basketball] ] tests.each do |test| %w[and or].each do |op| puts test.join(" #{op} ") + " = " + (TopicTag.search(test, op).map(&:topic_id)).join(', ') end end football and cricket = 1 football or cricket = 1, 2, 3 chess = 4, 5 chess = 4, 5 chess and cricket and basketball = chess or cricket or basketball = 1, 2, 3, 4, 5 Tested on Rails 2.3.8 using SqlLite EDIT If you wish to use like then the OR case also gets slightly more complex. You should also be aware that using LIKE with a leading '%' could have significant impacts on performance if the table you are searching is of a non-trivial size. The following version of the Model uses LIKE for both cases. class TopicTag 'DISTINCT topic_id', :conditions => tag_sql) end end end tests = [ %w[football cricket], %w[chess], %w[chess cricket basketball], %w[chess ll], %w[ll] ] tests.each do |test| %w[and or].each do |op| result = TopicTag.search(test, op).map(&:topic_id) puts ( test.size == 1 ? "#{test}(#{op})" : test.join(" #{op} ") ) + " = " + result.join(', ') end end football and cricket = 1 football or cricket = 1, 2, 3 chess(and) = 4, 5 chess(or) = 4, 5 chess and cricket and basketball = chess or cricket or basketball = 1, 2, 3, 4, 5 chess and ll = 4 chess or ll = 1, 2, 3, 4, 5 ll(and) = 1, 2, 3, 4 ll(or) = 1, 2, 3, 4
