[site]: stackoverflow
[post_id]: 2854219
[parent_id]: 2854145
[tags]: 
In F#, it is possible to define mutually recursive types , that is, you can define the two types that need to reference each other together and they will see each other. The syntax for writing this is: type CityDAO() = inherit CommonDAO (...) // we can use DAOMisc here and DAOMisc = member internal self.FindIdByType item = // we can use CityDAO here The limitation of this syntax is that both of the types need to be declared in a single file, so you cannot use the typical C# organization 1 type per 1 file. As Norman points out, this isn't a typical functional design, so if you designed the whole data access layer in a more functional way, you could probably avoid this problem. However, I'd say that there is nothing wrong with combining functional and object-oriented style in F#, so using mutually recursive types may be the only option. You can probably write the code more nicely if you first define interfaces for the two types - these may or may not need to be mutually recursive (depending on whether one is used in the public interface of the other): type ICityDAO = abstract Foo : // ... type IDAOMisc = abstract Foo : // ... This has the following benefits: Defining all mutually recursive interfaces in a single file doesn't make the code less readable You can later refer to the interfaces, so no other types need to be mutually recursive As a side-effect, you'll have more extensible code (thanks to interfaces)
