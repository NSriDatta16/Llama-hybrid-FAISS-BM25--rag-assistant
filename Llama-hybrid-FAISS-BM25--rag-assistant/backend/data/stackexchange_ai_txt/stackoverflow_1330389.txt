[site]: stackoverflow
[post_id]: 1330389
[parent_id]: 1329013
[tags]: 
Here's an article about a few approaches to reporting code coverage in your application: http://seriot.ch/blog.php?article=20080728 It's oriented toward Mac applications but mostly applies to iPhone stuff too (DTrace you can only use in the simulator) As the article notes, this is a harder problem in objective-C than other languages since it's so easy to have a method that is called by performSelector, that static analysis would report as dead code even though it gets called (yes you can also do something similar in Javabut it's done far more rarely). Probably the gcc warning flag is the best idea, along with careful examination of what it thinks are uncalled methods. Actually running every possible code path in an application is actually pretty hard, but if you have a smaller set of possibly functions to remove at least you can make choices more quickly so you wouldn't have to test every path... EDIT: I should probably make clear that code coverage is a technique you can use to find "dead" code, which is what you were after EDIT2 : Link is dead! I cannot find a cached version, and I can't remember it well enough to summarize more about what it contained.
