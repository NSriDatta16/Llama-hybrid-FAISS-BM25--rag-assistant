[site]: datascience
[post_id]: 76733
[parent_id]: 76710
[tags]: 
Theoretically, you could take many pictures and map these pictures to the score of each player. However, I would advise against it. First, you would need plenty of pictures and it might be infeasible to cover all possible game scenarios. Second, game scoring is discrete whereas a traditional neural net would approach it as a regression. This means that your outputs will likely be close but rarely perfectly on the money (and you will need to round up). You could however try to predict who is currently winning and turn this into a classification problem. Now back to predicting points. Since there already exists a complex point-scoring system based on the board, it would be rather silly to try to let a neural network figure it out on its own. Instead, I would suggest that you implement the point-scoring system and have the neural network translate a picture of the board into a data representation of that board. Your system would do something like this: def scoring_system(board): // Insert logic here return points def your_neural_network(image): // Your code return board points = scoring_system(your_neural_network(image)) So, instead of having this be a regression problem, you have multiple problems to solve: object detection (where are the pieces) object classification (what type of piece is it?) image segmentation (where is the board, what territories are there) Etc. Now some of these bits could be solved with traditional computer vision, but neural networks can be well-equipped as well.
