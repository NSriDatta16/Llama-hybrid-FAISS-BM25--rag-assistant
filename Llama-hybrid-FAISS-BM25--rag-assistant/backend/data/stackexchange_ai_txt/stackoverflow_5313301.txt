[site]: stackoverflow
[post_id]: 5313301
[parent_id]: 5311340
[tags]: 
I agree 100% with Matt. In Overflow7 I use the actual XAML Navigation URL for each of the bookmarks - and then persist the list of bookmarks in a single using a single JSON file (using JSON.Net) So, for example, a bookmark to a search is actually stored in a big object like: "windows-phone-7" : { "Bookmark" : "/Views/SearchPage.xaml?Site=StackOverflow&Tag=windows-phone-7" }, "Stuart" : { "Bookmark" : "/Views/UserPage.xaml?Site=StackOverflow&User=12341" }, This makes the bookmark navigation mechanism really easy - but does mean that it would be hard for me to later change my page names. For future proofing, it might be better to split the page name out from the persisted bookmark For actually making/clearing bookmarks I use an icon on the ApplicationBar - the only problem with this though is that you can't use colour to show the on/off state - because of the way the ApplicationBar works in light theme mode you have to use some distinct icon shape to show whether the bookmark is on/off. Load and save of bookmarks is using: private const string BookmarkFileName = "Bookmarks.json"; private void LoadBookmarks() { BookmarkViewModel = new AppBookmarkViewModel(); try { using (var store = IsolatedStorageFile.GetUserStoreForApplication()) { if (false == store.FileExists(BookmarkFileName)) { return; } using (var fs = store.OpenFile(BookmarkFileName, System.IO.FileMode.Open)) { using (var sr = new StreamReader(fs)) { var text = sr.ReadToEnd(); BookmarkViewModel = JsonConvert.DeserializeObject (text); } } } } catch (Exception exc) { BookmarkViewModel = new AppBookmarkViewModel(); MessageBox.Show("Sorry - there was a problem reading bookmarks - " + exc.Message); } } public void SaveBookmarks() { try { using (var store = IsolatedStorageFile.GetUserStoreForApplication()) { if (store.FileExists(BookmarkFileName)) { store.DeleteFile(BookmarkFileName); } using (var fs = store.OpenFile(BookmarkFileName, System.IO.FileMode.CreateNew)) { using (var sw = new StreamWriter(fs)) { var text = JsonConvert.SerializeObject(BookmarkViewModel); sw.Write(text); } } } } catch (Exception exc) { // don't show message box during shutdown //MessageBox.Show("Sorry - there was a problem reading bookmarks - " + exc.Message); } }
