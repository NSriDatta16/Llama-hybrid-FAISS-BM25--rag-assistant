[site]: crossvalidated
[post_id]: 617757
[parent_id]: 
[tags]: 
Recreating Heffernan-Tawn Fig. 6 in R: samples from multivariate extreme value distribution

I am trying to recreate Figure 6 from Heffernan-Tawn (2004) A conditional approach for multivariate extreme values using the same datasets as used in the paper. The original time series data of air pollutants is available from here . Taking just winter samples of NO and NO $_2$ (Fig. 6 (a)) as examples and referring to them with subscripts 1 and 2, respectively, and simplifying some of the notation, here is the general procedure: As far as I understand, the paper uses the following steps to create Figure 6: Independently transform the original samples $X_1,X_2$ to Gumbel margins $t_1(X_1), t_2(X_2)=Y_1,Y_2$ by fitting a generalised Pareto distribution to samples exceeding the 70% quantile of each vector. Fit the conditional dependence model of $Y_2 | Y_1 = y_1 \geq u_{Y_1}$ for some chosen threshold $u_{Y_1}$ . The dependence structure is (generally) given by $$Y_2 = ay_1 + y_1^bZ,$$ $Z\sim \mathcal{N}(\mu_0, \sigma_0)$ , where $(a,b,\mu_0,\sigma_0)$ . Then $Y_2$ has a conditional distribution of $ \mathcal{N} (\mu(y_1), \sigma(y_1))$ . Where $$ \mu(y_1) = ay_1 + y_1^b\mu_0 \\ \sigma(y_1) = y_1^{b}\sigma_0.$$ This is optimised for $(a,b, \mu_0, \sigma_0)$ by maximising the Gaussian log-likelihood function $$Q= \sum_{k \in S} \log(\sigma(y_1^{(k)}) + \frac{1}{2}\left[ \frac{y_2^{(k)} - \mu(y_1^{(k)})}{\sigma(y_1^{(k)})}\right]^2$$ where $S$ is the set of indices for which $y_1 \geq u_{Y_1}.$ To generate new extreme samples: sample $N$ new extreme $Y_1^*$ from a standard Gumbel distribution, exceeding a chosen threshold $v_{Y_1}$ . Then sample $N$ samples from $Z \sim \mathcal{N}(\mu_0, \sigma_0)$ and use the fitted $(a,b)$ to generate samples of $Y_2$ as in step 2. Transform $Y_1, Y_2$ back to $X_1,X_2$ using $t_i^{-1}(Y_i)$ and plot the scatterplot. I am defining the inverse transform for $Y > u_{Y} =-\log(-\log(\tilde{F}(u_{X}))$ as $$ X_1 = u_{X_1} + \frac{\beta}{\xi} \left[ \left( \frac{1 - \text{e}^{-\text{e}^{-Y_1}}}{1-\tilde{F}(u_{X_1})} - 1 \right)^{-\xi} \right] $$ and otherwise just the quantile function of the empirical CDF. I think I should also be able to use the quantile function of the fitted generalised Pareto distribution for $\log(Y > u_{Y}$ but the results R function POT::qgpd gave me looked quite strange. Using R, this is my procedure. Transform the $X_1,X_2$ to Gumbel margins according to Equations $(1.3)$ and $(1.4)$ in the paper using the following code. A threshold $\tilde F(u_x) =0.7$ is used in the paper. I obtain $\beta$ and $\xi$ from the function POT::fitgpd(x, threshold=quantile(x, 0.7)) . gumbel_transform $NO, quantile(winter$ NO, .7)) NO.transform $NO, .7, xi=fit$ fitted.values[1], beta=fit$$fitted.values[1]) Fit $Y_2$ conditional on $Y_1 > t_1(u_{X_1})$ by finding the optimal set $(a,b,\mu_0,\sigma_0)$ and defining the objective function $Q$ and its gradient as follows Q 1 || par[2] >= 1) { return(Inf) } } sigma and fit for $(a,b,\mu_0,\sigma_0)$ a $NO, Y$ NO2), hessian=TRUE, method="BFGS") Simulate extreme samples $Y_1^*$ from $Y_{\text{NO}}$ , exceeding the 99% quantile by sampling uniformly from $q\in[0.99, 1)$ and applying the Gumbel quantile function $y = -\log(-\log(q))$ (see other Stack question here ). Simulate the same number of samples from $\mathcal{N}(\mu_0, \sigma_0)$ and transform them using the fitted $(a,b)$ to obtain $Y_2^*$ . Inverse-transform these back to $X_1^*, X_2^*$ using the inverse of (1.3) and (1.4) # Inverse Gumbel transforms inv.gumbel $F, exp(-exp(-y)))) }else{ inner NO Here is my Fig. 6 (a). As you can see the NO2 values being simulated are all beneath the equal marginal quantile and it's not right. Here is how it should look
