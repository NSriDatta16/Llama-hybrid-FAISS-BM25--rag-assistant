[site]: crossvalidated
[post_id]: 145600
[parent_id]: 145595
[tags]: 
The answer you point out is an extremely specialized problem: doing MCMC wherein each iteration needs to solve 5 ODEs. For more mainstream MCMC problems, you have access to JAGS ( rjags ) and Stan ( rstan ). For extremely specialized problems, R has the Rcpp and inline packages that you might find useful. I'm not sure how freely Stan lets you do arbitrary C++ code, but that may also be a way to accomplish something similar to what the referenced answer does: use R where it's strong, call Stan where you need MCMC speed, and within Stan do customized evaluation in C++. I also think that smarter algorithms can make a huge difference in some cases. For example, LaplacesDemon has some cutting-edge samplers that allow it to often be competitive with compiled packages like JAGS or Stan, even though it's entirely written in R. That wouldn't help as much in the referenced answer because so much of the time was spent solving ODE's, not doing MCMC, but even then an algorithm that converges 10x faster needs 1/10 the evaluations. Are you inquiring about a general need for speed, or do you have some specific examples? It seems a bit harsh to learn Python in order to learn and use C.
