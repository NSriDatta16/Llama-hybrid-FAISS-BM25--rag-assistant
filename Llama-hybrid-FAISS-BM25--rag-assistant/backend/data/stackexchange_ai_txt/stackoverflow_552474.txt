[site]: stackoverflow
[post_id]: 552474
[parent_id]: 552336
[tags]: 
All of them are good in their own ways - They're simply different approaches to the same problems. In a purely procedural style, data tends to be highly decoupled from the functions that operate on it. In an object oriented style, data tends to carry with it a collection of functions. In a functional style, data and functions tend toward having more in common with each other (as in Lisp and Scheme) while offering more flexibility in terms of how functions are actually used. Algorithms tend also to be defined in terms of recursion and composition rather than loops and iteration. Of course, the language itself only influences which style is preferred. Even in a pure-functional language like Haskell, you can write in a procedural style (though that is highly discouraged), and even in a procedural language like C, you can program in an object-oriented style (such as in the GTK+ and EFL APIs). To be clear, the "advantage" of each paradigm is simply in the modeling of your algorithms and data structures. If, for example, your algorithm involves lists and trees, a functional algorithm may be the most sensible. Or, if, for example, your data is highly structured, it may make more sense to compose it as objects if that is the native paradigm of your language - or, it could just as easily be written as a functional abstraction of monads, which is the native paradigm of languages like Haskell or ML. The choice of which you use is simply what makes more sense for your project and the abstractions your language supports.
