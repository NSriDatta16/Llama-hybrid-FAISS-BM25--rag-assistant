[site]: stackoverflow
[post_id]: 602861
[parent_id]: 602593
[tags]: 
Most of your question has already been answered, but I wanted to elaborate on this bit: Coming from Java, I am naturally inclined to always use version 1, but the templates versions seem to be preferred often, e.g. in STL code? If that's true, is it just because of memory efficiency etc (no inheritance, no virtual function calls)? That's part of it. But another factor is the added type safety. When you treat a BrakeWithABS as a Brake , you lose type information. You no longer know that the object is actually a BrakeWithABS . If it is a template parameter, you have the exact type available, which in some cases may enable the compiler to perform better typechecking. Or it may be useful in ensuring that the correct overload of a function gets called. (if stopCar() passes the Brake object to a second function, which may have a separate overload for BrakeWithABS , that won't be called if you'd used inheritance, and your BrakeWithABS had been cast to a Brake . Another factor is that it allows more flexibility. Why do all Brake implementations have to inherit from the same base class? Does the base class actually have anything to bring to the table? If I write a class which exposes the expected member functions, isn't that good enough to act as a brake? Often, explicitly using interfaces or abstract base classes constrain your code more than necessary. (Note, I'm not saying templates should always be the preferred solution. There are other concerns that might affect this, ranging from compilation speed to "what programmers on my team are familiar with" or just "what I prefer". And sometimes, you need runtime polymorphism, in which case the template solution simply isn't possible)
