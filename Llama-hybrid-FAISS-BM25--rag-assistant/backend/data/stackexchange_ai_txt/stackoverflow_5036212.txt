[site]: stackoverflow
[post_id]: 5036212
[parent_id]: 
[tags]: 
Resizing a Qt window when a child element has been removed.

I have a QWidget window, which contains a QSplitter . I have a QStackedLayout (within a QWidget container) on both the left and right of the splitter. The main application resides in the left region, which can trigger QWebViews to appear on the right. When I remove the right QWebView , the Window attempts to resize, but stays at the width of the QWebView . When I try to drag the window, it snaps to position around the left side of the splitter. I want the window to snap back to only show the left side of the splitter on removing the last widget from the right QStackedWidget . I've tried various incantations, but I don't know Qt very well, and am attempting to learn as I go. The below code is in Java, using the Jambi wrappers. Concepts should be the same in C++, and I'm able to translate any other language binding to Jambi if necessary. I attempt to set the window minimum width on add and remove of widgets to the RightStackedLayout , but this breaks the splitter handle in some cases. I consider this a hack workaround. If anyone can point me in the right direction of having changes to the right side of the splitter update the top level window, I'll be very grateful. // The main Window class public Window() { // #QWidget super(); this.setContentsMargins(0, 0, 0, 0); QHBoxLayout mainLayout = new QHBoxLayout(this); mainLayout.setContentsMargins(0, 0, 0, 0); splitter = new QSplitter(); QWidget leftContainer = new QWidget(); QWidget rightContainer = new QWidget(); leftLayout = new QStackedLayout(); rightLayout = new RightStackedLayout(); leftContainer.setLayout(leftLayout); rightContainer.setSizePolicy(new QSizePolicy(QSizePolicy.Policy.Expanding,QSizePolicy.Policy.Expanding)); rightContainer.setLayout(rightLayout); splitter.addWidget(leftContainer); splitter.addWidget(rightContainer); splitter.setStretchFactor(0, 0); // do not resize left splitter.setStretchFactor(1, 1); // fully resize right splitter.setWindowState(WindowState.WindowMaximized); mainLayout.addWidget(splitter); } public void denyWidthChange() { // when right side is closed, prevent user from resizing horizontally this.setSizePolicy(new QSizePolicy(QSizePolicy.Policy.Fixed,QSizePolicy.Policy.Preferred)); this.splitter.setSizePolicy(new QSizePolicy(QSizePolicy.Policy.Fixed,QSizePolicy.Policy.Preferred)); this.splitter.updateGeometry(); this.updateGeometry(); } public void allowWidthChange() { // when right side open, allow user to expand horizontally this.setSizePolicy(new QSizePolicy(QSizePolicy.Policy.Expanding,QSizePolicy.Policy.Expanding)); this.splitter.setSizePolicy(new QSizePolicy(QSizePolicy.Policy.Expanding,QSizePolicy.Policy.Expanding)); this.splitter.updateGeometry(); this.updateGeometry(); } public void adjustSizes(int w, int h) { this.resize(w, h); this.splitter.resize(w, h); } // The RightStackedLayout public void add(QWidget widget) { Application.window.allowWidthChange(); Application.window.setMinimumWidth(((WebPane)widget).minWidth()+this.rememberWidth); // left side + right side QWidget current = this.currentWidget(); if (current != null) { this.rememberWidth = current.size().width(); // remember the user resize preferences } int idx = this.indexOf(widget); if (idx == -1) { widget.setMinimumWidth(this.rememberWidth); this.addWidget(widget); } this.setCurrentWidget(widget); } public void remove(QWidget widget) { Application.window.allowWidthChange(); this.removeWidget(widget); this.update(); if (this.count() == 0) { Log.debug("Last RightWebPane Closing: Shrinking the window"); this.rememberWidth = widget.size().width(); this.activate(); //((QWidget)this.parent()).resize(0, 0); Application.window.setMinimumWidth(((WebPane)widget).minWidth()); Application.window.adjustSizes(0,Application.window.height()); Application.window.denyWidthChange(); } }
