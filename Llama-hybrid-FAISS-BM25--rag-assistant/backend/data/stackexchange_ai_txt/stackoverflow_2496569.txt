[site]: stackoverflow
[post_id]: 2496569
[parent_id]: 701456
[tags]: 
Using shared_ptr for really small objects (like char short ) could be an overhead if you have a lot of small objects on heap but they are not really "shared". boost::shared_ptr allocates 16 bytes for every new reference count it creates on g++ 4.4.3 and VS2008 with Boost 1.42. std::tr1::shared_ptr allocates 20 bytes. Now if you have a million distinct shared_ptr that means 20 million bytes of your memory are gone in holding just count=1. Not to mention the indirection costs and memory fragmentation. Try with the following on your favorite platform. void * operator new (size_t size) { std::cout
