[site]: stackoverflow
[post_id]: 4639018
[parent_id]: 3704566
[tags]: 
I am not sure if i have a understand correctly the problem. So first ypu want to find all submatrixes that conform with your 2 criterea. Thats like a graph decomposition problem or a set coverage problem i think, where you can have a recursive function and iterate the matrix to find all available submatrixes. enum PieceTypes { White, Black } class Box { public PieceTypes PieceType { get; set; } public uint Units { get; set; } public int s, p; public Box(PieceTypes piecetype, uint units) { PieceType = piecetype; Units = units; } } class Matrix { public Box[,] Boxes; public int Scale, S, P, MaxNum, MaxDist; public List > Configurations; public Matrix(int s, int p, int scale, int maxnum, int maxdist) { S = s; P = p; Scale = scale; Boxes = new Box[S, P]; MaxNum = maxnum; MaxDist = maxdist; Configurations = new List >(); } public void Find(List Config, int s, int p) { // Check the max number thats valid for your configuration // Check that the current p and s are inside matrix if (Config.Count() = 0 && s = 0 && p 0) Configurations.Add(Config); Config.Clear(); } public bool Valid(Box b1, Box b2) { // Create your dist funtion here // or add your extra validation rules like the PieceType if (Math.Sqrt((b1.s - b2.s) ^ 2 + (b1.p - b2.p) ^ 2) I haven't used the best data structures and i have simplified the solution. I hope its some way helpful.
