[site]: stackoverflow
[post_id]: 974275
[parent_id]: 958419
[tags]: 
From a bit of digging I did in the jquery-ui code, I think I can confirm that a custom handle outside the resizable element doesn't work. The problem is that the mouse events are initialized for the resizable element (or a wrapper element in the case of textarea). If the handle is not a child of where the mouse events are handled, it won't trigger the mousedown event on the handle, thus not making it draggable. As a proof of concept I patched around a bit in jquery-ui until I got things to (sort of) work. No guarantees about the code, but it should point out what kind of changes would need to happen to make it work. Around line 140 in ui.resizable.js I changed: this._handles = $('.ui-resizable-handle', this.element) .disableSelection(); to this._handles = $('.ui-resizable-handle') .disableSelection(); Then I added the following code (part of mouseInit from ui.core.js, probably should use the whole function) in ui.resizable.js (around line 180) after the mouseInit is called for the resizable element: ... //Initialize the mouse interaction this._mouseInit(); // Add mouse events for the handles as well - ylebre for (i in this.handles) { $(this.handles[i]).bind('mousedown.resizable', function(event) { return self._mouseDown(event); }); } This allows me to make a resize handle that is not a child of the resizable element. My handle is a div with id 'south' and is attached to the resizable element. Here is the HTML snippit: Resizable south And the javascript code: $("#resizable").resizable( {handles: {s: document.getElementById("south")}} ); Hope this helps!
