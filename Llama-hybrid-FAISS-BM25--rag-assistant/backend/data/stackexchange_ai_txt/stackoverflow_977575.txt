[site]: stackoverflow
[post_id]: 977575
[parent_id]: 977553
[tags]: 
Where's the cycle? And why would Gnew include the header of Snew? [Edit] OK, I think your inheritance arrows are opposite of what's customary. But this should get you sorted out: In Gnew.h: #pragma once #if !defined(Gnew_h) #define Gnew_h #include "G.h" class Gnew : public virtual G { // added functionality here. }; #endif // Gnew_h In Snew.h: #pragma once #if !defined(Snew_h) #define Snew_h #include "S.h" #include "Gnew.h" class Snew : public virtual Gnew, public virtual S { // added functionality here. }; #endif // Snew_h You should not have to forward declare anything. Note however that this only works as expected if S inherits virtually from G. If all these multiple inheritance issues are too much trouble, you should probably just adapt the library classes instead of inheriting from them. Does this help?
