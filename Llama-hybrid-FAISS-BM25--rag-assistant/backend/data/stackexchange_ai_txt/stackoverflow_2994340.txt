[site]: stackoverflow
[post_id]: 2994340
[parent_id]: 2994145
[tags]: 
Consider this code fragment: int x; if ( some_complicated_condition ) { x = foo; } else if ( another_condition ) { // ... if ( yet_another_condition ) x = bar; } else { return; } printf("%d\n",x); Is x used uninitialized? How do you know? What if there are preconditions to the code? These are hard questions to answer automatically, and enforcing initialization might be inefficient in some small way. In point of fact modern compilers do a pretty good job of static analysis and can often tell if a variable is or might be used uninitialized, and they generally warn you in that case (at least if you turn the warning level up high enough). But c++ follows closely on the c tradition of expecting the programmer to know what he or she is doing.
