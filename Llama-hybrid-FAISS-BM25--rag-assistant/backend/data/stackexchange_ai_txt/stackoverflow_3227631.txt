[site]: stackoverflow
[post_id]: 3227631
[parent_id]: 3227413
[tags]: 
After reading your comments bellow and understanding your requirement better, here is a piece of code that does the job. Note that it assumes that the timestamps in each day are sorted, as in your example: import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; import java.util.ArrayList; import java.util.List; import java.util.Scanner; import java.util.AbstractMap.SimpleEntry; public class ReadText { public static void main(String[] args) throws IOException { BufferedReader br = null; try { String InputFile = "C:\\PracticeSpreads.txt"; br = new BufferedReader(new FileReader(InputFile)); String line; List >> valuesInDay = new ArrayList >>(); String date = null; while ((line = br.readLine()) != null) { line = line.trim(); if (line.startsWith("DATE")) { if (line.equals(date)) // Found day footer System.out.println("Average for " + date + ": " + calcDayAvg(valuesInDay)); else { // Found a day header valuesInDay.clear(); date = line; } } else { // Found a value entry Scanner s = new Scanner(line); int sec = s.nextInt(); s.nextDouble(); double jump = s.nextDouble(); List jumps; if (!valuesInDay.isEmpty() && valuesInDay.get(valuesInDay.size() - 1).getKey() == sec) { // Same time stamp as prev jumps = valuesInDay.get(valuesInDay.size() - 1).getValue(); }else { // New time stamp jumps = new ArrayList (); valuesInDay.add(new SimpleEntry >(sec, jumps)); } jumps.add(jump); } } } finally { if (br != null) br.close(); } } private static Double calcDayAvg(List >> values) { if (values.isEmpty()) return null; // No way to calculate for empty set double min = values.get(0).getKey(); double max = values.get(values.size() - 1).getKey(); double span = max - min; if (span == 0) return null; // Division by zero... double total = 0; for (int i=0; i > entry = values.get(i); int sec = entry.getKey(); double jumpAvg = getJumpAvg(entry.getValue()); int jumpDuration; if (i == values.size() - 1) jumpDuration = 1; // last jump has duration of 1 sec else jumpDuration = values.get(i + 1).getKey() - sec; total += jumpAvg * jumpDuration; } return total / span; } private static double getJumpAvg(List jumps) { double total = 0; for (Double jump : jumps) { total += jump; } return total / jumps.size(); } }
