[site]: crossvalidated
[post_id]: 513470
[parent_id]: 
[tags]: 
How to specify a prior on the network structure while learning a Bayesian network structure?

I don't have experience with Bayesian networks. Bayesian network learning libraries like BANJO and bnlearn can learn the structure and fit the parameters of Bayesian networks on data. I see that there are various options for the search algorithm (annealing etc.) and for scoring (Gaussian priors on the parameters, lossfunctions for categorical data etc.), but I don't understand how to specify priors/regularization on the network structure. For example, I want to impose a cost on an arc between variables A and B because expert knowledge suggests such a causality is unlikely. Or, for example, I want to constrain that the parents of variable X can only be from the set {A,B,D,F}. Can these kind of costs/constraints be implemented? I could write a function that computes a cost based on the network structure alone, and I would want this cost to be included to the data fit whenever a candidate network is stored during learning. Update : I was able to mine the code for bnlearn and there is an option of providing the prior probabilities for individual arcs using the Castelo score formulation. For example, ## BDe with a prior. beta = data.frame(from = c("A", "D"), to = c("B", "F"), prob = c(0.2, 0.5), stringsAsFactors = FALSE) score(res, learning.test, type = "bde", prior = "cs", beta = beta) Not sure of the exact probabilities. Does this mean A -> B has probability 0.2 and D -> F is 0.5? What about other arcs? i.e., is A -> B penalized or rewarded compared to an arc C -> B? The example is given at https://github.com/cran/bnlearn/blob/0e4d3af6ad579b79bc9959e77385ec6b825ca6fc/man/score.Rd#L144
