[site]: stackoverflow
[post_id]: 5049904
[parent_id]: 
[tags]: 
Updating button states in a Java Swing application

I've implemented a basic Swing GUI based on the concept of a playlist as part of a larger DJ audio mixing application (think a primitive Virtual DJ(!)). The playlist basically consists of a JTable onto which tracks can be tracks can be dragged n' dropped from a JTree. The JPanel that incorporates the table also contains a suite of buttons for saving, loading, and deleting playlists as well as for loading the player(s). These button states need to be updated (enabled/disabled) based on the current state of the application (i.e. is a playlist loaded? Are there tracks in the playlist? etc.) I'm trying to follow an MVC pattern whereby the underlying TableModel is separated from the table and button UI through a controller. My question is...What is the most elegant/efficient way to handle the button updates? At the moment, a reference to the currently loaded playlist file is stored in the controller, and the controller determines whether a playlist is empty from the model. It then sends two boolean values (isEmpty, isLoaded) to the View, which then determines which buttons to enable based on these values. This method seems a little inelegant, so I'd welcome any suggestions. Thanks!
