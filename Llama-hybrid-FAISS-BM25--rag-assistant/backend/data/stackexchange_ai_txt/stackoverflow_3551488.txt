[site]: stackoverflow
[post_id]: 3551488
[parent_id]: 
[tags]: 
Design Problem - Is Inheritance the right way to simplify this code?

I have a design problem I'd like to solve. I have an interface, lets call it IProtocol , which is implemented by two separate classes. We're looking at over 600 lines of code here. The vast majority of the stuff they do is the same, except for some specific areas, like DiffStuff(); Current structure is something like this: public class Protocol1 : IProtocol { MyInterfaceMethod1() { Same1(); DiffStuff(); Same2(); } } And public class Protocol2 : IProtocol { MyInterfaceMethod1() { Same1(); Same2(); } } I'm concerned with having copy-paste errors and the classic problem of code duplication if I keep the two protocols separate. We're talking about a full 600 lines of code each, not some simple methods. I'm considering changing the implementation of Protocol1 to inherit from protocol2, like this (Protocol2 would mostly stay the same, except I'd have to wrap Same1() and Same2() into private methods.) public class Protocol1 : Protocol2 { void Same1() { base.Same1(); } void Same2() { base.Same2(); } MyInterfaceMethod1() { Same1(); DiffStuff(); Same2(); } } Is this the right way to go about dealing with this problem? Edit: Many people helped me with this question, thanks for the clear understanding. In my case, the two objects are not of the same type, even though much of their implementation is shared, so I went with Bobby's suggestion to use abstract base class, creating small methods to encapsulate changes between the classes. Additional Thanks to: jloubert Hans Passant Jeff Sternal
