[site]: stackoverflow
[post_id]: 4448866
[parent_id]: 4446949
[tags]: 
So as I understand it, you want to: Group the tuples by their first entry ("key") For each key, check all tuple second entries for the value "FAIL" Produce (key, "FAIL") if you find "FAIL" or (key, "PASS") otherwise Since I still find foldLeft , reduceLeft , etc. hard to read, here's a direct translation of the steps above into for comprehensions: scala> for ((key, keyValues) key}) yield { | val hasFail = keyValues.exists{case (key, value) => value == "FAIL"} | (key, if (hasFail) "FAIL" else "PASS") | } res0: scala.collection.immutable.Map[java.lang.String,java.lang.String] = Map((Agent 2,PASS), (Agent 1,FAIL), (Agent,FAIL)) You can call .toList at the end there if you really want a List . Edit: slightly modified to use the exists idiom suggested by Daniel C. Sobral .
