[site]: stackoverflow
[post_id]: 1830014
[parent_id]: 
[tags]: 
"Swapping" a UIView Instance variable - cannot dealloc "previous" view

I want to organize somehow my iPhone game's level-views, but I simply cannot (without expanding Object Allocations ). I made a really "skeleton" of my code (this game has 2 levels, the goal is to release the iPhone display). I just cannot dealloc the previous level, so Instrunments shows incrementing BGTangramLevel instances. Please, take a look on it, I need some helpful ideas on designing (my 3rd question on it). viewcontroller.h @interface compactTangramViewController : UIViewController { //The level. BGTangramLevel *currentLevel; UIColor *levelColor; } //It is to be just a reference, therefore I use assign here. @property (nonatomic, retain) BGTangramLevel *currentLevel; -(void) notificationHandler: (NSNotification*) notification; -(void) finishedCurrentLevel; @end viewcontroller.m @implementation compactTangramViewController @synthesize currentLevel; //Initializer functions, setting up view hierarchy. -(void) viewDidLoad { //Set up levelstepper. levelColor = [UIColor greenColor]; //Set up "state" classes. [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(notificationHandler:) name:@"finishedCurrentLevel" object:nil]; //Attach level 1. currentLevel = [BGTangramLevel levelWithColor: levelColor frame:self.view.frame]; [self.view addSubview:currentLevel]; [super viewDidLoad]; } //Release objects. -(void) dealloc { [currentLevel release]; [super dealloc]; } //Notification handling. -(void) notificationHandler: (NSNotification*) notification { //Execute level swap. if ([notification name] == @"finishedCurrentLevel") [self finishedCurrentLevel]; } -(void) finishedCurrentLevel { //Remove previous level. [currentLevel removeFromSuperview]; //[currentLevel release]; //Step level. if (levelColor == [UIColor greenColor]) levelColor = [UIColor blueColor]; else levelColor = [UIColor greenColor]; //Attach level 2. currentLevel = [BGTangramLevel levelWithColor: levelColor frame:self.view.frame]; [self.view addSubview:currentLevel]; } @end BGTangramLevel.h @interface BGTangramLevel : UIView { BOOL puzzleCompleted; } //Initializer. +(BGTangramLevel*)levelWithColor: (UIColor*) color frame: (CGRect) frame; //Test if the puzzle is completed. -(void) isSolved; @end BGTangramLevel.m @implementation BGTangramLevel //Allocated instance. +(BGTangramLevel*)levelWithColor: (UIColor*) color frame: (CGRect) frame { BGTangramLevel *allocatedLevel = [[BGTangramLevel alloc] initWithFrame:frame]; allocatedLevel.backgroundColor = color; return allocatedLevel; } //Finger released. -(void) touchesEnded: (NSSet*)touches withEvent: (UIEvent*)event { //The completement condition is a simple released tap for now... puzzleCompleted = YES; [self isSolved]; } //Test if the puzzle is completed. -(void) isSolved { //"Notify" viewController if puzzle has solved. if (puzzleCompleted) [[NSNotificationCenter defaultCenter] postNotificationName:@"finishedCurrentLevel" object:nil]; } -(void) dealloc { NSLog(@"Will ever level dealloc invoked."); //It is not. [super dealloc]; } @end So what should I do? I tried to mark autorelease the returning level instance, release currentLevel after removeFromSuperview, tried currentLevel property synthesized in (nonatomic, assign) way, but Object Allocations still grow. May I avoid Notifications? I'm stuck.
