[site]: stackoverflow
[post_id]: 192817
[parent_id]: 192715
[tags]: 
I'll quibble with the term "collapse", since it seems you really want to "expand". And I'm not sure what you mean by solutions "having directly to do with params keyword" and that "you're not interested in workarounds". In the end, you either have to pass a number of strings - which the compiler will magically package into an array - or an array of strings directly. That being said, my solution (without changing the interface) would go something like: return AppendFolders(new string[] { basefolder, version, callingModule }.Concat(extraFolders).ToArray()); Edit: While you can't add an operator via extension methods, you could do: return AppendFolders(new string[] { baseFolder, callingModuleName, version }.Concat(extraFolders)); public static T[] Concat (this T[] a, T[] b) { return ((IEnumerable )a).Concat(b).ToArray(); } But, if we're going to go that far - might as well just extend List to handle this elegantly: return AppendFolders(new Params () { baseFolder, callingModuleName, version, extraFolders }); class Params : List { public void Add(IEnumerable collection) { base.AddRange(collection); } public static implicit operator T[](Params a) { return a.ToArray(); } }
