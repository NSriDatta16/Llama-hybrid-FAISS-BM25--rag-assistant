[site]: stackoverflow
[post_id]: 34293
[parent_id]: 34126
[tags]: 
My personal preference is to use jQuery in external js files so the js is completely separate from the html. Javascript should be unobtrusive so inline (ie, the first example) is not really the best choice in my opinion. When looking at the html, the only sign that you are using js should be the script includes in the head. An example of attaching (and handling) events might be something like this var myObject = { allLinkElements: null, init: function() { // Set all the elements we need myObject.setElements(); // Set event handlers for elements myObject.setEventHandlers(); }, clickedLink: function() { // Handle the click event alert('you clicked a link'); }, setElements: function() { // Find all tags on the page myObject.allLinkElements = $('a'); // Find other elements... }, setEventHandlers: function() { // Loop through each link myObject.allLinkElements.each(function(id) { // Assign the handler for the click event $(this).click(myObject.clickedLink); }); // Assign handlers for other elements... } } // Wait for the DOM to be ready before initialising $(document).ready(myObject.init); I think this approach is useful if you want to keep all of your js organised, as you can use specific objects for tasks and everything is nicely contained. Of course, the huge benefit of letting jQuery (or another well known library) do the hard work is that cross-browser support is (largely) taken care of which makes life much easier
