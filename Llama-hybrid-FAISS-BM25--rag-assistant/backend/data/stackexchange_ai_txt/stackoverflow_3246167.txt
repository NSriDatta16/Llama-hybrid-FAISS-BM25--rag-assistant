[site]: stackoverflow
[post_id]: 3246167
[parent_id]: 3246040
[tags]: 
"Since var is an inference to an explicit or anonymous type, will its memory be allocated in the same place its corresponding type would be or is var universally created on the heap and accessed as if it were an object" The important thing about var, is that the compiler changes the var statement to the actual type at compile time, so: var number = 1; Will get changed to: System.Int32 number = 1; ...by the compiler. And as such the memory locations for storage of these types is no different. var is essentially syntactic sugar. So, method local declarations of value types will get stored on the stack, reference pointers will get stored on the stack with the referenced objects on the heap. Once you have declared a variable as var, because this is translated into its full type by the compiler, you can't then dynamically change the type: var i = 5; i = "Steve"; ...is invalid, because its already been declared as an Int32. Anonymous types follow a similar behaviour, where a type is created by the compiler during compilation. "Finally, is there ever a situation that you can think of where you may know a type at design time but it would be prudent to use var anyway?" Personally, I follow a simple pattern: For primitives, I always put the type: int i = 5; string name = "Matt"; For complex types, I mostly do this: var instance = new MyComplexTypeInstance(); For LINQ results, I stick to var: var result = from i in something select i; For methods, if the method is descriptive of the type being returned, then I will use var. var instance = GetInstance(); Whereas, more complex method names, I'd put the actual type: Result result = DoSomethingWeirdAndWonderful(); Each developer will find something they are comfortable with, the choice is yours. As var is only really a design-time thing, its all syntactic sugar.
