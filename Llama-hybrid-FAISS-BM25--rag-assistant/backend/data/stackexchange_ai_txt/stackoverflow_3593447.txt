[site]: stackoverflow
[post_id]: 3593447
[parent_id]: 3593417
[tags]: 
The topics you mention are good. If you want to mention each only briefly, and therefore want to add others, you could consider some of (in no particular order): automate, automate, automate: boring, repetitive tasks are much better suited to automatic scripts than having them demand user attention. For example, most coding standards (all that can be "mechanically" checked) must be checked automatically by scripts ("lint-like" is the classical name for them) on submission of code to the repository (if you don't have a good source code versioning system drop everything else and focus everything on that, of course, because it's the single most crucial tool). testing: automated, and automatically repeatable, unit tests, and integration tests, and continuous-build tools to run them all the time, are a wonderful safeguard against accidental breakage in the codebase. mandatory, lightweight code reviews (or pair programming): no code should ever get into the codebase without other human eyes having examined it and approved it -- not to duplicate the "lint-like" part, but to check stuff that's too hard to check automatically -- are the identifiers clear and appropriate, has the refactoring of reusable stuff been done right, &c proper use of comments: they should never repeat what the code already plainly says to anybody who masters the language -- they should add useful, concise info not otherwise immediately handy. A ga bad, a good, and a best example in C...: /* bad -- in fact, VERY bad / i += k; / increment i by k */ /* good, or at least decent;-) / i += k; / widget count grows by thingamajig count */ /* best */ widget_count += thingamajig_count; (no comment present nor needed in the the last case -- it's far from always possible to have the code and identifiers be quite so clear as to need absolutely no comment, but, when feasible, it's definitely best!-).
