[site]: crossvalidated
[post_id]: 168992
[parent_id]: 168989
[tags]: 
What a cool project! I like to cope with similarity problems by transforming them into classification problems. You can see here the idea. Combining multiple similarity measures in hyperspectral images? In the specific case of projects in git hub, I would have try to use few directions: The dataset is very imbalanced - most project s are not similar to each other. That enables you to use "no similarity" as a labeling heuristic and just state the similar project as positive samples. The similarity measure differ by their recall/precision base on how hard it is for the user to do a certain action. For example, giving stars is easy so it will have high recall of similar project but low precision. Pushing code will have higher precision but lower recall. I didn't look at data for git hub but I suspect it is long tailed. That mean that when you will move to the not very popular project, finding users that stared two of them will lead to small numbers, with all the problems the arrive with that. You can compensate by using similarity measure that base on the code and not on the user behaviour (e.g., the programming langue used, common libraries etc.). NLP is very useful here but might require considerable amount of time comparing to adding few more user behaviour based measures.
