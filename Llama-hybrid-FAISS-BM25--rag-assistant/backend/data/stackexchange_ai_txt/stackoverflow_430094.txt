[site]: stackoverflow
[post_id]: 430094
[parent_id]: 429962
[tags]: 
Reflection allows you to solve problems that would otherwise require you to duplicate code. If you find yourself copying and pasting code, and can't see how an OO pattern can help, maybe if you can call them, then the "r team" can help. Only joking. I couldn't understand the point of reflection for ages. If you can write code to perform a job, why do you need to use reflection at all? Say you have lots of GUI objects like Forms or 'table' objects. It binds to a business object like a Customer: public class Customer { public string FirstName; public string LastName; } Your users don't want to see the column headings 'FirstName' or 'LastName'. They want 'Christian Name' and Surname. You don't want to code the literal strings in all your GUI objects in case they change their minds to 'First Name' and 'Father's last name' (I know , crap example). If you define your class using attributes: public class Customer { [Description("Christian Name")] public string FirstName; [Description("Surname")] public string LastName; } You can use reflection to pull out the column names. If you need to change the way all your GUI objects describe the customer object, you now do it in one place. I am not aware of any anti-patterns. My advice is to jump in and try it. You will start to see all sorts of ways in which reflection gives you an elegant solution. Performance is often cited as a reason for not using relfection. There is a performance overhead with relfection but I would discount it unless you can prove the overhead is hurting an algorithm you need.
