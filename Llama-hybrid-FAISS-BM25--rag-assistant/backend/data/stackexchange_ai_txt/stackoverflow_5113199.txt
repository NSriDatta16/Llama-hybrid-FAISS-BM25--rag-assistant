[site]: stackoverflow
[post_id]: 5113199
[parent_id]: 
[tags]: 
How does .NET determine the Unicode category of a character?

I was looking in mscorelib.dll with .NET Reflector, and stumbled upon the Char class. I always wondered how methods like Char.isLetter was done. I expected a huge list of test, but, buy digging a little bit, I found a really short code that determine the Unicode category. However, this code uses some kind of tables and some bitshifting voodoo. Can anyone explain to me how this is done, or point me to some resources? EDIT : Here's the code. It's in System.Globalization.CharUnicodeInfo. internal static unsafe byte InternalGetCategoryValue(int ch, int offset) { ushort num = s_pCategoryLevel1Index[ch >> 8]; num = s_pCategoryLevel1Index[num + ((ch >> 4) & 15)]; byte* numPtr = (byte*) (s_pCategoryLevel1Index + num); byte num2 = numPtr[ch & 15]; return s_pCategoriesValue[(num2 * 2) + offset]; } s_pCategoryLevel1Index is a short* and s_pCategoryValues is a byte* Both are created in the CharUnicodeInfo static constructor : static unsafe CharUnicodeInfo() { s_pDataTable = GlobalizationAssembly.GetGlobalizationResourceBytePtr(typeof(CharUnicodeInfo).Assembly, "charinfo.nlp"); UnicodeDataHeader* headerPtr = (UnicodeDataHeader*) s_pDataTable; s_pCategoryLevel1Index = (ushort*) (s_pDataTable + headerPtr->OffsetToCategoriesIndex); s_pCategoriesValue = s_pDataTable + ((byte*) headerPtr->OffsetToCategoriesValue); s_pNumericLevel1Index = (ushort*) (s_pDataTable + headerPtr->OffsetToNumbericIndex); s_pNumericValues = s_pDataTable + ((byte*) headerPtr->OffsetToNumbericValue); s_pDigitValues = (DigitValues*) (s_pDataTable + headerPtr->OffsetToDigitValue); nativeInitTable(s_pDataTable); } Here is the UnicodeDataHeader. internal struct UnicodeDataHeader { // Fields [FieldOffset(40)] internal uint OffsetToCategoriesIndex; [FieldOffset(0x2c)] internal uint OffsetToCategoriesValue; [FieldOffset(0x34)] internal uint OffsetToDigitValue; [FieldOffset(0x30)] internal uint OffsetToNumbericIndex; [FieldOffset(0x38)] internal uint OffsetToNumbericValue; [FieldOffset(0)] internal char TableName; [FieldOffset(0x20)] internal ushort version; } Note : I Hope this doesn't break any licence. If so, I'll remove the code.
