[site]: stackoverflow
[post_id]: 3246171
[parent_id]: 3246106
[tags]: 
There are myriads of articles on TDD on the web. I've been using TDD for only one year now, so I am no expert, but here's my short summary of why I like TDD: Focus on your goals first instead of the implementation It makes you implement the smallest piece of code required to fulfill the task and nothing more. You can refactor this into something more beatuful later, but in general you tend to follow the YAGNI principle more closely. The most important: You can refactor your code fearlessly knowing that you have not broken anything during the last refactoring (This assumes that you have a good test coverage, but that's part of using TDD the way it's meant to). This makes you much more agile. Frequent Deployment to a production environment also gets less dangerous if you have a good test coverage. While TDD takes some time to get used to it, you will see that it is actually not less efficient than traditional coding. Quite contrary, because you tend to lose much less time debugging your code in the long run. That being said, I am no TDD hardliner. There are some situations where I prefer writing unit tests after writing the implementation. It's easier than TDD when I am working with a new technology and do not know what the desired result looks like until I have implemented it (e.g. a ViewResult object in ASP.NET MVC).
