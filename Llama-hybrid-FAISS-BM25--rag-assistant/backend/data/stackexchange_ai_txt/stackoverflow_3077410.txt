[site]: stackoverflow
[post_id]: 3077410
[parent_id]: 3077393
[tags]: 
The answer is completely dependent on the language in question. But C is usually a good language to kind of see how things happen behind the scenes. In C: In C strings are array of char with a 0 at the end: char str[1024]; strcpy(str, "hello "); strcpy(str, "world!"); Behind the scenes str[0] == 'h' (which has an int value), str[1] == 'e', ... str[11] == '!', str[12] == '\0'; A char is simply a number which can contain one of 256 values. Each character has a numeric value. In C++: strings are supported in the same way as C but you also have a string type which is part of STL. string literals are part of static storage and cannot be changed directly unless you want undefined behavior. It's implementation dependent how the string type actually works behind the scenes, but the string objects themselves are mutable. In C#: strings are immutable. Which means you can't directly change a string once it's created. When you do += what happen is a new string gets created and your string now references that new string.
