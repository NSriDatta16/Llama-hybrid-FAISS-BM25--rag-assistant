[site]: stackoverflow
[post_id]: 3899370
[parent_id]: 3899246
[tags]: 
If you don't want any modifications to TForm-derivate-class, why don't try pure Windows API way to implement your current solution, that is, use SetWindowLongPtr() to intercept the WM_INITMENUPOPUP message. Delphi VCL style to intercept messages is just a wrapper of this Windows API function actually. For that purpose, use SetWindowLongPtr() to set a new address for the window procedure and to get the original address of the window procedure, both at one blow. Remember to store the original address in a LONG_PTR variable. In 32-bit Delphi, LONG_PTR was Longint ; supposing 64-bit Delphi will have been released in the future, LONG_PTR should be Int64 ; you can use $IFDEF directive to distinguish them as follows: Type {$IFDEF WIN32} PtrInt = Longint; {$ELSE} PtrInt = Int64; {$ENDIF} LONG_PTR = PtrInt; The value for nIndex parameter to be used for this purpose is GWLP_WNDPROC . Also, pass the new address for the window procedure to dwNewLong parameter, e.g. LONG_PTR(NewWndProc) . The NewWndProc is a WindowProc Callback Function that processes messages, it is where your put your intercept criteria and override the default handling of the message you are going to intercept. The callback function can be any name, but the parameters must follow the WindowProc convention. Note that you must call CallWindowProc() to pass any messages not processed by the new window procedure to the original window procedure. Finally, you should call SetWindowLongPtr() again somewhere in your code to set the address of modified/new window procedure handler back to the original address. The original address has been saved before as mentioned above. There was a Delphi code example here . It used SetWindowLong() , but now Microsoft recommends to use SetWindowLongPtr() instead to make it compatible with both 32-bit and 64-bit versions of Windows. SetWindowLongPtr() didn't exist in Windows.pas of Delphi prior to Delphi 2009. If you use an older version of Delphi, you must declare it by yourself, or use JwaWinUser unit of JEDI API Library .
