[site]: stackoverflow
[post_id]: 5597304
[parent_id]: 5597010
[tags]: 
If the column may contain NULL values, then it cannot be a primary key. In this case a unique index is the best you can do (note that this does not prevent there from being multiple rows with NULL values). If it will never contain NULL values, then you should definitely either add a NOT NULL constraint on the column or make it the primary key. Either way, this tells the optimizer that the column will never have NULL values, which allows it to consider some kinds of query optimizations that would otherwise not be possible. I don't expect there would be any significant performance difference between (a) a primary key constraint, and (b) the combination of a unique index and a NOT NULL constraint. Either way gives the optimizer the same information about the contents of the table. Either can also be used as the target of a foreign key. However, there are some specific features that require the existence of a primary key -- for example, an index-organized table must have one.
