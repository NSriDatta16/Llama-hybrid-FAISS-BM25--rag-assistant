[site]: stackoverflow
[post_id]: 2545605
[parent_id]: 2545372
[tags]: 
You don't need the entity type. Take a look at any-type mapping (it stores the type name in the database in the relation table, but you don't need it in the entity model). See this blog post by ayende . Edit: tried to write an example. You could have an own table for each tagged object, this is easy and straight forward, you don't even need any types: Tried to use some advanced features to map it into a single table, but I think it doesn't work this way: The tricks here are: access="noop" to specify the foreign key without having a property in the entity model, see this post . where="EntityType='IMAGE'" to filter the loaded data. The problem is that most probably the EntityType is not set to any useful value. This could be fixed somewhere, but I don't think that it is worth the effort. Someone else has probably a better idea. Edit 2: another (working) solution make the association table an entity: in short: Tag => TagEntity: not mapped or one-to-many inverse (noop) TagEntity => Tag: many-to-one TagEntity => Object: any Object => TagEntity: one-to-many inverse This should work straight forward. classes: class Tag { string Name { get; set; } } class TagEntity { Tag Tag { get; set; } object Entity { get; set; } } class Image { IList tags { get; private set; } } The only drawback seems to be that you have to make sure that the bidirectional associations are consistent without loading to much data. Note that inverse collections are not stored. Edit 2: Performance notes When you add / remove tags, you could do a trick. TagEntity has a reference to the tagged entity. The Entity also has a list of TagEntities, but this is marked as inverse. (This means, they are loaded, but not stored.) You can add and remove tags without loading the Entity an without loading all the tags. Adding: Get Tag to add (or load proxy if you have the id of the tag) Load Entity (just proxy, using session.Load, no db access here) create new TagEntity, assign tag and entity-proxy save TagEntity Removing: Get TagEntity to remove delete TagEntity. Within the session, you don't have this tag assigned to/removed from the TagEntity. This works fine assumed that you only add or remove tags within this transaction. I you define a list of TagEntities on the Tag, you can do the same, without loading all the TagEntities just to add or remove one.
