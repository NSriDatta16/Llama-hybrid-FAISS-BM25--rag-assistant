[site]: stackoverflow
[post_id]: 2179272
[parent_id]: 2167518
[tags]: 
As others have said, there is no silver bullet in stl/boost to elegantly solve your problem. If you want to parse your chunk directly via pointer arithmetic, perhaps you can take inspiration from std::iostream and hide the messy pointer arithmetic in a custom stream class. Here's a half-arsed solution I came up with: #include #include #include #include class Stream { public: enum StateFlags { goodbit = 0, eofbit = 1 (state_);} bool good() const {return state_ == goodbit;} bool fail() const {return (state_ & failbit) != 0;} bool eof() const {return (state_ & eofbit) != 0;} Stream& read(int& measurement) { measurement = readDigit() * 100; measurement += readDigit() * 10; measurement += readDigit(); return *this; } private: int readDigit() { int digit = 0; // Check if we are at end of packet if (pos_ == end_) {state_ |= eofbit; return 0;} /* We should be at least csum|lf|lf away from end, and we are not expecting csum or lf here. */ if (pos_+3 >= end_ || pos_[0] == '\n' || pos_[1] == '\n') { state_ |= failbit; return 0; } if (!getDigit(digit)) {return 0;} csum_ = (csum_ + digit) % 10; ++pos_; // If we are at checksum, check and consume it, along with linefeed if (pos_[1] == '\n') { int checksum = 0; if (!getDigit(checksum) || (checksum != csum_)) {state_ |= failbit;} csum_ = 0; pos_ += 2; // If there is a second linefeed, we are at end of packet if (*pos_ == '\n') {pos_ = end_;} } return digit; } bool getDigit(int& digit) { bool success = std::isdigit(*pos_); if (success) digit = boost::lexical_cast (*pos_); else state_ |= failbit; return success; } int csum_; unsigned int state_; char* pos_; char* end_; }; int main() { // Use (8-byte + csum + LF) fragments for this example char data[] = "\ 001002003\n\ 300400502\n\ 060070081\n\n"; std::vector measurements; Stream s(data, data + sizeof(data)); int meas = 0; while (s.read(meas).good()) { measurements.push_back(meas); std::cout Maybe you'll want to add extra StateFlags to determine if failure is due to checksum error or framing error. Hope this helps.
