[site]: stackoverflow
[post_id]: 5450694
[parent_id]: 
[tags]: 
thread-local storage overhead

Assume there is some not-reentrant function that uses global variables: int i; void foo(void){ /* modify i */ } And then, I want to use this function in multithreaded code, so I can change code this way: void foo(int i){ /* modify i */ } or, by using gcc __thread specifier, more simplier: __thread int i; void foo(void){ /* modify i */ } Advantages of the last is that I don't need to change another code which call foo(). My questions is, how much overhead of thread-local storage is? Is there some not obvious issues with TLS? Is there some overhead if I will modify TLS`ed variable via separate pointer, like this: __thread int i; void foo(void){ int *p = &i; /* modify i using p pointer */ } Thanks.
