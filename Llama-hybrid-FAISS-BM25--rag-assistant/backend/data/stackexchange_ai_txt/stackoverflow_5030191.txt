[site]: stackoverflow
[post_id]: 5030191
[parent_id]: 5023290
[tags]: 
Don't fear the learning curve. IoC is a reasonably simple concept. Ninject was the first container I picked up, and it went smoothly. The only point I really struggled with for any amount of time was how to organize all the bindings, but even that was only an issue in large applications. YMMV, but I'd say just diving in with Ninject or similar is better investment of time than DIY. IoC with Ninject only takes code in a few places. 1: Bind you interfaces to implementations: public class ServiceModule : NinjectModule { public override void Load() { Bind ().To (); Bind ().To (); } } 2: Use constructor arguments to pass dependencies into a class: public class BillPayingService { private readonly IBillingGateway _billingGateway; public BillPayingService( IBillingGateway billingGateway ) { _billingGateway = billingGateway; } public void PayBills() { // .... } } 3: Initialize your container on application startup: public static class Ioc { public static void Initialize() { var modules = new INinjectModule[] { new ServicesModule(), new DataModule() new VideoProcessing.NinjectModule() }; IKernel kernel = new Ninject.StandardKernel(modules); } }
