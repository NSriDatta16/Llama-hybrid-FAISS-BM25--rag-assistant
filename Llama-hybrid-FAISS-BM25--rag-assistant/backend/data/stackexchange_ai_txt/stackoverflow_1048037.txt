[site]: stackoverflow
[post_id]: 1048037
[parent_id]: 1047885
[tags]: 
I think that you should start coding real world problems to get a feel for problems in the programming domain. Then you have a better background to understand why objects are important. Then, after managing objects, you will learn why patterns and OO principles are important. Personally, I highly recommend the Agile Software Development, by Robert C Martin. But it may be a long and tiresome read unless you have a feel for the problems being solved. I'm afraid that you may need 500-1000 hours of coding at the minimum before you get an appreciation that the problems being solved are real . And it probably takes 7000+ hours before you develop an instinctive heart-felt pain from merely reading the problems, making this sort of book become the page-turner that it should be. Regrettably, many of the sound practices that you should develop are only appreciated after having to live with your code over time. If you just do many excercises and abandon the code afterwards just "because it works", then you are missing out on the greatest pain of all. It is a luxury our industry does not have, and "technical debt" is a very very real and costly to those with large code bases.
