[site]: stackoverflow
[post_id]: 1782333
[parent_id]: 
[tags]: 
How do I test a generic type variable for equality with Default(T) in Delphi?

I'm trying to write a generic cached property accessor like the following but am getting a compiler error when trying to check whether the storage variable already contains a value: function TMyClass.GetProp (var ADataValue: T; const ARetriever: TFunc ): T; begin if ADataValue = Default(T) then // The error I'm getting is "E2015 Operator not applicable to this operand type". Would I have to put a constraint on T to make this work? The help file says that Default() would accept anything except generic types. In my case I'm dealing mostly with simple types like String , Integer and TDateTime . Or is there some other library function to perform this particular check? I'm using Delphi 2009 in case that matters. P.S.: Just in case it isn't clear from the code what I'm trying to do: In my case determining the actual property values might take a while for various reasons and sometimes I might not even need them at all. On the plus side however the values are constant so I only want to call the code that determines the actual value the first time that property is accessed and then store the value in a class field and the next time that property is accessed return the cached value directly. Here's an example of how I hoped I would be able to use that code: type TMyClass = class private FSomeProp: String; function GetSomeProp: String; function GetProp (var ADataValue: T; const ARetriever: TFunc ): T; public property SomeProp read GetSomeProp; end; function GetSomeProp: String; begin Result := GetProp (FSomeProp, function: String begin Result := SomeSlowOrExpensiveCalculation; end); end; (obviously, there's more than just one property)
