[site]: stackoverflow
[post_id]: 2307989
[parent_id]: 2307965
[tags]: 
Check im and jpegout before you try and use them to make sure they were both allocated. [Edit] It would be better to split assigning the file handle from the test for it's validity. Have you tried the libgd example ? [Edit2] I downloaded the same source etc, set up a project in VS2008 and get the exact same problem. You could try this suggestion .. one important thing about GD is to make sure it's built against the same CRT as the main project because it uses such structures as FILE and if you call GD DLL built with one version of the compiler from an executable built with another version, you will run into memory access violations. There's a code snippet in there which fixes the crash on my machine: /* Bring in gd library functions */ #include "gd.h" /* Bring in standard I/O so we can output the PNG to a file */ #include int main() { /* Declare the image */ gdImagePtr im; /* Declare output files */ FILE *pngout, *jpegout; /* Declare color indexes */ int black; int white; /* Allocate the image: 64 pixels across by 64 pixels tall */ im = gdImageCreate(64, 64); /* Allocate the color black (red, green and blue all minimum). Since this is the first color in a new image, it will be the background color. */ black = gdImageColorAllocate(im, 0, 0, 0); /* Allocate the color white (red, green and blue all maximum). */ white = gdImageColorAllocate(im, 255, 255, 255); /* Draw a line from the upper left to the lower right, using white color index. */ gdImageLine(im, 0, 0, 63, 63, white); /* Open a file for writing. "wb" means "write binary", important under MSDOS, harmless under Unix. */ errno_t result1 = fopen_s(&pngout, "C:\\Projects\\Experiments\\LibGD\\test.png", "wb"); /* Do the same for a JPEG-format file. */ errno_t result2 = fopen_s(&jpegout, "C:\\Projects\\Experiments\\LibGD\\test.jpg", "wb+"); /* Output the image to the disk file in PNG format. */ int size; char* data = (char*)gdImagePngPtr(im, &size); fwrite(data, sizeof(char), size, pngout); gdFree(data); data = (char*)gdImageJpegPtr(im, &size, -1); fwrite(data, sizeof(char), size, jpegout); gdFree(data); /* Close the files. */ fclose(pngout); fclose(jpegout); /* Destroy the image in memory. */ gdImageDestroy(im); }
