[site]: stackoverflow
[post_id]: 5235108
[parent_id]: 
[tags]: 
NSDictionary selected on Actionsheet, from a UITableView with Custom Cells

I am working on a big learning experience, adding a NSDictionary that uses a JSON(deserializer) to grab content from my MAMP(myphp admin) server (localhost), and put all's this information nicely in a TablewView, which has custom UITableViewCell's, my problem is, the Table View loads the information from my server just fine, however, when I use the didSelectRowatIndexPath, with an actionsheet, I can get the actionsheet to come up, however I cannot get it to pull the information from my NSDictionary that was previously used in the UITableView.... (basically in the end, the action sheet will have a few buttons, for example loading a URL from a shared application, and all this information will be grabbed from my server using the same NSDictionary in the UITable View. any help would greatly be appreciated...... thank you so much this community rocks!!! // // TouchJSONViewController.m // TouchJSON // // Created by Chance Brown on 3/7/11. // Copyright 2011 __MyCompanyName__. All rights reserved. // #import "TouchJSONViewController.h" #import "CJSONDeserializer.h" #import "StaffPicksCustomCell.h" #import "UIImageView+WebCache.h" @implementation TouchJSONViewController @synthesize tableview, rows, cellOne; - (void)viewDidLoad { [super viewDidLoad]; NSURL *url = [NSURL URLWithString:@"http://localhost/json.php"]; // Modify this to match your url. // HOME 192.168.2.23 NSString *jsonreturn = [[NSString alloc] initWithContentsOfURL:url]; // Pulls the URL // NSLog(jsonreturn); // Look at the console and you can see what the restults are NSData *jsonData = [jsonreturn dataUsingEncoding:NSUTF32BigEndianStringEncoding]; NSError *error = nil; // In "real" code you should surround this with try and catch NSDictionary * dict = [[CJSONDeserializer deserializer] deserializeAsDictionary:jsonData error:&error]; if (dict) { rows = [[dict objectForKey:@"users"] retain]; } NSLog(@"Array: %@",rows); [jsonreturn release]; } - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { return [rows count]; } // Customize the appearance of table view cells. - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { static NSString *CellIdentifier = @"Cell"; StaffPicksCustomCell *cell =(StaffPicksCustomCell *) [tableView dequeueReusableCellWithIdentifier:CellIdentifier]; if (cell == nil) { cell = [[[StaffPicksCustomCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier] autorelease]; } // Configure the cell. NSSortDescriptor *ratingsSortDescriptor = [[[NSSortDescriptor alloc] initWithKey:@"ID" ascending:NO] autorelease]; rows = [rows sortedArrayUsingDescriptors:[NSArray arrayWithObject:ratingsSortDescriptor]]; NSDictionary *dict = [rows objectAtIndex: indexPath.row]; cell.primaryLabel.text = [dict objectForKey:@"post_title"]; cell.theDate.text = [dict objectForKey:@"post_date"]; cell.mydescription.text = [dict objectForKey:@"post_content"]; [cell.myImageView setImageWithURL:[NSURL URLWithString:[dict objectForKey:@"imagelink"]] placeholderImage:[UIImage imageNamed:@"placeholder1.png"]]; //cell.textLabel.text = [dict objectForKey:@"post_title"]; //cell.detailTextLabel.text = [dict objectForKey:@"post_content"]; //tableView.backgroundColor = [UIColor cyanColor]; return cell; } - (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath { return 125; } #pragma mark - #pragma mark Table view delegate - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath { static NSString *CellIdentifier = @"Cell"; StaffPicksCustomCell *cell = (StaffPicksCustomCell *) [tableView dequeueReusableCellWithIdentifier:CellIdentifier]; if (cell == nil) { NSArray *topLevelObjects = [[NSBundle mainBundle] loadNibNamed:@"StaffPicksCustomCell" owner:self options:nil]; for (id currentObject in topLevelObjects) { if ([currentObject isKindOfClass:[StaffPicksCustomCell class]]) { cell= (StaffPicksCustomCell *) currentObject; break; } } } // Configure - Did Select Row at Index Path. UIActionSheet *popup = [[UIActionSheet alloc] initWithTitle:@"OPTIONS" delegate:self cancelButtonTitle:@"Cancel"destructiveButtonTitle:nil otherButtonTitles:@"More Info",@"Contact Seller",@"Picture", nil]; [popup setActionSheetStyle:UIActionSheetStyleBlackTranslucent]; [popup showInView:[self view]]; [popup release]; // return cell } -(void)actionSheet:(UIActionSheet *)actionSheet willDismissWithButtonIndex:(NSInteger)indexPath { switch (indexPath) { case 0: { NSLog(@"Case 0 Selected"); NSDictionary *dict = [rows objectAtIndex: indexPath]; [[UIApplication sharedApplication] openURL:[NSURL URLWithString:[dict objectForKey:@"guid"]]]; } break; case 1: { NSLog(@"Case 1 Selected"); } break; case 2: { NSLog(@"Case 2 Selected"); } break; } } - (void)didReceiveMemoryWarning { // Releases the view if it doesn't have a superview. [super didReceiveMemoryWarning]; // Release any cached data, images, etc that aren't in use. } - (void)viewDidUnload { // Release any retained subviews of the main view. // e.g. self.myOutlet = nil; } - (void)dealloc { [super dealloc]; } @end
