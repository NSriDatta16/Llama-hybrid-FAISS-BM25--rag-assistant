[site]: stackoverflow
[post_id]: 2838508
[parent_id]: 2831374
[tags]: 
I would first write a test that captures the exception generation behavior: include '/path/to/file.php'; //generates exception public function testCatchFooException() { try { $this->assertTrue($baz); } catch (Exception $expected) { $this->assertEquals('This is expected html from exception', $expected->getMessage()); return; } $this->fail('An expected Exception has not been raised Foo_Excpetion.'); } Now you can do several things with this coverage test. You can either fix up the exception, or fix the code that causes the exception. Another thing you can do is wrap the entire file.php in a class: class FooClass { function runFoo() { include '/path/to/file.php'; //generates exception } } Then add tests while using extract method until you isolate exception. [EDIT] Here is some serious procedural legacy code: And here is the wrapped class: And now I can test it: function testGetDisplay() { $display = new Displayer(); $this->assertEquals('html code', $display->getDisplay()); } And test the individual functions in it. And if I can further sprout methods on it. The above test would be considered a coverage test. There may be bugs in it, but that is what it does. So as I sprout methods the get more code coverage from tests by sprouting that I can make sure I don't break the output.
