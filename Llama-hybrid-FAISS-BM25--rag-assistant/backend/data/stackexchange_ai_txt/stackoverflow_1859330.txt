[site]: stackoverflow
[post_id]: 1859330
[parent_id]: 1859116
[tags]: 
I think you should consider separating the search for the appropriate key from the accessing of the underlying record. That you, for instance, have a btree+ structure of mere keys wherein you locate the first matching record, then you follow the btree+ enumerator until you have no match. Similar to a nonclustereded index in a database. First you find the key, then you find the record. Your examples "Jo" and "John" within "Johnson" are examples of "StartsWith()", where the key sorting will benefit you. If you are also expecting to be looking for a mere substring as opposed to only the initial segment, you need to look at other algorithms of storing and finding the key. If you are not positive that you both need, and will be able to leverage, optimized search, you should just do an in-memory scan over all keys and then focus on optimizing the matching predicate. For example by using the Regex option of precompiling the search.
