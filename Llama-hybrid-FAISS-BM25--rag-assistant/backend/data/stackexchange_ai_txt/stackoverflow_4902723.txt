[site]: stackoverflow
[post_id]: 4902723
[parent_id]: 
[tags]: 
Why can't a Generic Type Parameter have a lower bound in Java?

I gather that you cannot bind a Java generics type parameter to a lower bound (i.e. using the super keyword). I was reading what the Angelika Langer Generics FAQ had to say on the subject . They say it basically comes down to a lower bound being useless ("not making any sense"). I'm not convinced. I can imagine a use for them to help you be more flexible to callers of a library method that produces a typed result. Imagine a method that created an array list of a user-specified size and filled it with the empty string. A simple declaration would be public static ArrayList createArrayListFullOfEmptyStrings(int i); But that's unnecessarily restrictive to your clients. Why can't they invoke your method like this: //should compile List l1 = createArrayListFullOfEmptyStrings(5); List l2 = createArrayListFullOfEmptyStrings(5); List l3 = createArrayListFullOfEmptyStrings(5); //shouldn't compile List l4 = createArrayListFullOfEmptyStrings(5); At this point I would be tempted to try the following definition: public static List createArrayListFullOfEmptyStrings(int size) { List list = new ArrayList (size); for(int i = 0; i But it will not compile; the super keyword is illegal in this context. Is my example above a bad example (ignoring what I say below)? Why isn't a lower bound useful here? And if it would be useful, what's the real reason that it is not permitted in Java? P.S. I know that a better organization might be something like this: public static void populateListWithEmptyStrings(List list, int size); List list = new ArrayList (); populateListWithEmptyStrings(list, 5); Can we for the purpose of this question pretend that due to a requirement, we need to do both operations in one method call? Edit @Tom G (justifiably) asks what benefit having a List would have over a List . For one, nobody said the returned list is immutable, so here's one advantage: List l2 = createArrayListFullOfEmptyStrings(5); l2.add(new StringBuilder("foo").append("bar"));
