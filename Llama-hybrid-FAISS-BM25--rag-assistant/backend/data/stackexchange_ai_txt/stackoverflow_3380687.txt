[site]: stackoverflow
[post_id]: 3380687
[parent_id]: 3380357
[tags]: 
I would suggest that your question needs to be clarified. Currently, everyone is guessing what about what you are actually asking. Are the arrays intended to represent sets, or lists, or something in between? In other words, does element order matter, and can there be duplicates? What does "equal" mean? Does new Cat() "equal" new Cat() ? Your example suggests that it does!! What do you mean by the "difference"? Do you mean set difference? What do you want to happen if the two arrays have the same length? Is this a once-off comparison or does it occur repeatedly for the same arrays? How many elements are there in the arrays (on average)? Why are you using arrays at all? Making the assumption that these arrays are intended to be true sets, then you probably should be using HashSet instead of arrays, and using collection operations like addAll and retainAll to calculate the set difference. On the other hand, if the arrays are meant to represent lists, it is not at all clear what "difference" means. If it is critical that the code runs fast, then you most certainly need to rethink your data structures. If you always start with arrays, you are not going to be able to calculate the "differences" fast ... at least in the general case. Finally, if you are going to use anything that depends on the equals(Object) method (and that includes any of the Java collection types, you really need to have a clear understanding of what "equals" is supposed to mean in your application. Are all Cat instances equal? Are they all different? Are some Cat instances equal and others not? If you don't figure this out, and implement the equals and hashCode methods accordingly you will get confusing results.
