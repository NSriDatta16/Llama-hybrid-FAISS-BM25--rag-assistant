[site]: stackoverflow
[post_id]: 2294248
[parent_id]: 2293592
[tags]: 
A bounding box is usually a rectangle. I don't think a circle located at (-r,-r) is the bounding box of a circle of radius r.... Anyway, suppose you have a bounding box b1 and another b2 and a function combineBoxes that computes the bounding box of b1 and b2. Then if you have a non-empty set of shapes in your group, you can use reduceLeft to compute the whole bounding box of a list of bounding boxes by combining them two at a time until only one giant box remains. (The same idea can be used to reduce a list of numbers to a sum of numbers by adding them in pairs. And it's called reduceLeft because it works left to right across the list.) Suppose that blist is a list of bounding boxes of each shape. (Hint: this is where map comes in.) Then val bigBox = blist reduceLeft( (box1,box2) => combineBoxes(box1,box2) ) You'll need to catch the empty group case separately, however. (Since it has a no well-defined bounding box, you don't want to use folds; folds are good for when there is a default empty case that makes sense. Or you have to fold with Option , but then your combining function has to understand how to combine None with Some(box) , which is probably not worth it in this case--but very well might be if you were writing production code that needs to elegantly handle various sorts of empty list situations.)
