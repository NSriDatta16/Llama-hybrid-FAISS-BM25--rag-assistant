[site]: stackoverflow
[post_id]: 142182
[parent_id]: 123002
[tags]: 
The relationship between class complexity and the size of the IoC constructor had not occurred to me before reading this question, but my analysis below suggests that having many arguments in the IoC constructor is a code smell to be aware of when using IoC. Having a goal to stick to a short constructor argument list will help you keep the classes themselves simple. Following the single responsibility principle will guide you towards this goal. I work on a system that currently has 122 classes that are instantiated using the Spring.NET framework. All relationships between these classes are set up in their constructors. Admittedly, the system has its fair share of less than perfect code where I have broken a few rules. (But, hey, our failures are opportunities to learn!) The constructors of those classes have varying numbers of arguments, which I show in the table below. Number of constructor arguments Number of classes 0 57 1 19 2 25 3 9 4 3 5 1 6 3 7 2 8 2 The classes with zero arguments are either concrete strategy classes, or classes that respond to events by sending data to external systems. Those with 5 or 6 arguments are all somewhat inelegant and could use some refactoring to simplify them. The four classes with 7 or 8 arguments are excellent examples of God objects . They ought to be broken up, and each is already on my list of trouble-spots within the system. The remaining classes (1 to 4 arguments) are (mostly) simply designed, easy to understand, and conform to the single responsibility principle .
