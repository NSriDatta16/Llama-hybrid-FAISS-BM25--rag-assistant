[site]: stackoverflow
[post_id]: 2725181
[parent_id]: 2724932
[tags]: 
Your sample is not enough for a repro on my PC, but here are the things that I'd correct first: The bindings in the DataTemplate are missing ", Mode=TwoWay" if you want the Enabled property to be set in your PanelItem (- The ItemsSource binding does not need the Mode=TwoWay, but this is a minor detail) The DataContext of the ItemTemplate is the PanelItem instance, so the binding of the Check command seems wrong: there is no Check property on PanelItem. The binding should be: my:Checked.Command="{Binding ElementName=MyListBox, Path=DataContext.Check} This kind of stuff is always hard to debug. Look at the output window of VS; binding errors (path not found) are displayed there. When you have a DP change callback (like OnSetCommandCallback), a breakpoint there will tell you how the binding went. Edit: added after 1st comment (as I can't use the comment feature on the PC I have to use now) The Command attached property is defined as type CheckBox in the Checked class, but the Check property in the VM is a DelegateCommand. I agree with WPF on the type mismatch :-) The property declaration is like this: public static readonly DependencyProperty CommandProperty = DependencyProperty.RegisterAttached( "Command", typeof( CheckBox ), typeof( Checked ), new PropertyMetadata( OnSetCommandCallback ) ); The second parameter should be the property type, so I guess something like ICommand in your case. Out of curiosity: in OnSetCommandCallback, you don't care for the value set to the Command property (which is in e.NewValue). How do you relate an instance of CheckedBehavior to the Check property of the VM ? Edit after second comment: No, the 2nd paragraph above is not related to your question. Maybe it does not make sense. I can't figure out the role of CheckedBehavior. Concerning the question of which item is checked/unchecked: what do you need more precisely ? You have a PanelItem instance, whose Enabled property is being set to true or false through the biding; so the checked items are the ones with Enabled=true. Edit after 3rd comment: Thanks for the explanation of your needs. You're not really using the path parameter of the binding to the attached property, you could write: my:Checked.Command="{Binding}" This way, e.NewValue is the bound PanelItem in the OnSetCommandCallback. So it could be given to the CheckedBehavior instance (in its constructor), which could forward it when calling Execute of ICommand.
