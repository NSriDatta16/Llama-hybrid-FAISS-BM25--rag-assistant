[site]: stackoverflow
[post_id]: 5676081
[parent_id]: 5675016
[tags]: 
Why does hashing a password make the system more secure Hashing is not equal to encryption. Encrypted data can be decrypted back into plain text. Hashed data cannot be decrypted. By hashing your user's passwords, nobody can see what passwords are used. So if your data gets stolen, the hashes cannot be decrypted by the hacker. The same goes for the system administrator, he/she cannot 'lookup' a password. This can be an all to common scenario in shared hosting environments. Storing passwords The easiest way to get your password storage scheme secure is by using a standard library . Because security tends to be a lot more complicated and with more invisible screw up possibilities than most programmers could tackle alone, using a standard library is almost always easiest and most secure (if not the only) available option. The good thing is that you do not need to worry about the details, those details have been programmed by people with experience and reviewed by many folks on the internet. For more information on password storage schemes, read Jeff `s blog post: You're Probably Storing Passwords Incorrectly Whatever you do if you go for the ' I'll do it myself, thank you ' approach, do not use MD5 anymore . It is a nice hashing algorithm, but broken for security purposes . Currently, using crypt , with CRYPT_BLOWFISH is the best practice. From my answer to: Help me make my password storage safe As for the infamous remember me option. Create a random token and give it to the user in the form of a cookie. If the user presents a cookie with this token, you give them access. Key is to only accept each token once. So after it is used, replace it with a new random token. This token is, in essence, just another password. So in order to keep it safe, you do not store the token, but a hash of it . (just as you did with the password) Your suggestion of binding the cookie to an IP-address will unfortunately not work. Many people have dynamic IP-addresses, some even change from request to request during a single session. (this is for example caused by load-balancing proxies). Sending passwords to the server The only method currently usable for sending a password from a web browser to server is by using a SSL-secured connection. Anything else will not be safe, as you cannot guarantee the integrity of the solution on the client side.
