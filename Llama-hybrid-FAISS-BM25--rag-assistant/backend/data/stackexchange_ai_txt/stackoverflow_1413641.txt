[site]: stackoverflow
[post_id]: 1413641
[parent_id]: 1413604
[tags]: 
TDD doesn't really have anything to do with team size. It has to do with creating the smallest amount of software needed with the right interface that works correctly. The TDD process requires you to write only just enough code to satisfy a test, so you don't end up creating code you don't need. Using TDD to design a class makes you think as a client of the class, so you end up creating a better interface more often than if you developed it without TDD. TDD, by its nature will acheive 100% code coverage, proving your code works. A side-effect of this is that you and others can now more safely change your class because it has a full suite of automated tests. I should add that its iterative nature creates a positive feedback loop as well, so as you iterate you gain more and more confidence in your code.
