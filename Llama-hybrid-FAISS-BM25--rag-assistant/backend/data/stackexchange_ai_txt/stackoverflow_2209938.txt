[site]: stackoverflow
[post_id]: 2209938
[parent_id]: 2209771
[tags]: 
Begin with a Numbers table that is large enough to handle the maximum order amount: CREATE TABLE Numbers ( Num int NOT NULL PRIMARY KEY CLUSTERED ) -- SQL 2000 version INSERT Numbers VALUES (1) SET NOCOUNT ON GO INSERT Numbers (Num) SELECT Num + (SELECT Max(Num) FROM Numbers) FROM Numbers GO 15 -- SQL 2005 and up version WITH L0 AS (SELECT c = 1 UNION ALL SELECT 1), L1 AS (SELECT c = 1 FROM L0 A, L0 B), L2 AS (SELECT c = 1 FROM L1 A, L1 B), L3 AS (SELECT c = 1 FROM L2 A, L2 B), L4 AS (SELECT c = 1 FROM L3 A, L3 B), L5 AS (SELECT c = 1 FROM L4 A, L4 B), N AS (SELECT Num = ROW_NUMBER() OVER (ORDER BY c) FROM L5) INSERT Numbers(Num) SELECT Num FROM N WHERE Num Then, immediately after your INSERT statements: INSERT #OrderDelivery (OrderTransactionId, MediaTypeId) SELECT OT.OrderTransactionId, P.MediaTypeId FROM #OrderTransaction OT INNER JOIN #Product P ON OT.ProductId = P.ProductId INNER JOIN Numbers N ON N.Num BETWEEN 1 AND OT.Quantity That should do it! If for some reason you have qualms about putting a permanent Numbers table in your database (which I don't understand as it is a wonderful tool), then you can simply join to the CTE given instead of the table itself. In SQL 2000 you can create a temp table and use a loop, but I would advise against this strongly. A Numbers table is highly recommended. There is no concern about some future change breaking it (the set of whole numbers won't change any time soon). Some people use a Numbers table with a million numbers in it, which is only around 4MB of storage. To answer critics of the Numbers table: if the database design uses a numbers table, then that table won't need to change. It is like any other table in the database and can be relied on. You don't worry too much about queries against an Orders table failing because some day the table might not exist, so I don't see why there would be any similar concern about another table that is required and depended on. UPDATE In the time since writing this answer I have learned about the master.dbo.spt_values table which has a number column. When queried with where type='P' you get 0 - 255 in SQL 2000 and 0 - 8191 in SQL 2005 and up. (There are also potentially useful low and high columns.) You can cross join this table to itself a couple of times if necessary to get, even in SQL 2000, a bunch of rows very quickly.
