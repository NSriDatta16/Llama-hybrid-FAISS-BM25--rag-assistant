[site]: stackoverflow
[post_id]: 724542
[parent_id]: 724525
[tags]: 
Product. If you have a lot of classes like this, and want to generically follow backrefs, inherit from a HasParent interface that has an abstract method parent(), and have parents inherit for an interface Parent. But other tha following the object graph or by casting, there's not much you can do with a Parent. EDIT: actually, let me amend that. I worked on a project where we had a semi-complex object graph, and because of some poor planning and some requirements changes, sometimes I'd have to reach across the graph to get a datum from an associated object. ComponentCost to its parent Cost to its parent Item, to its child CustomsInfo to its child ComponentCustomsInfo to its lookup table DutyCalculation. (Yeah, I didn't do the original design, so don't frown at me.) A parent() method could have made that a little more generic. (Eventually I put together a set of enums (Java enums, so singleton classes) that did traverse the graph for me, in a type safe and even elegant manner. Still, having a parent would have made implementing that simpler.)
