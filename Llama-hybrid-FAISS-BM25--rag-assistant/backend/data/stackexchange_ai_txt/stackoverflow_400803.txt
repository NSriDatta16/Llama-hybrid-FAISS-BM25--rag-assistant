[site]: stackoverflow
[post_id]: 400803
[parent_id]: 400706
[tags]: 
Garbage collection works by tracking application roots. Application roots are storage locations that contain references to objects on the managed heap (or to null). In .NET, roots are References to global objects References to static objects References to static fields References on the stack to local objects References on the stack to object parameters passed to methods References to objects waiting to be finalized References in CPU registers to objects on the managed heap The list of active roots is maintained by the CLR. The garbage collector works by looking at the objects on the managed heap and seeing which are still accessible by the application, that is, accessible via an application root. Such an object is considered to be rooted. Now suppose that you have a parent form that contains references to child forms and these child forms contain references to the parent form. Further, suppose that the application no longer contains a references to the parent for or any of the child forms. Then, for the purposes of the garbage collector, these managed objects are no longer rooted and will be garbage collected the next time a garbage collection occurs.
