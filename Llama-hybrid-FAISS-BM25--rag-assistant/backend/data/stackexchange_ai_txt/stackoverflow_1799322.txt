[site]: stackoverflow
[post_id]: 1799322
[parent_id]: 1799217
[tags]: 
Both solutions work, with enums providing better performance and exceptions potentially providing better decoupling (across system boundaries). It's actually a matter of software design and conventions. Basically use exceptions if the functional scope of the system you're working on does not include handling the given error condition. If this .NET program has its own UI, you don't need to throw an exception. Use enums and display an error to the user. On the other hand, if this .NET program is an assembly to be used by third parties, it's considered more conventional to not expose error codes or enums in the API, and instead to throw (and document) exceptions. The middle ground would be that this program doesn't have it's own UI but it's consumed by another system that you also (or someone in your organization) has control over. In that case you can go either way, with enums providing better performance, and exceptions providing better decoupling.
