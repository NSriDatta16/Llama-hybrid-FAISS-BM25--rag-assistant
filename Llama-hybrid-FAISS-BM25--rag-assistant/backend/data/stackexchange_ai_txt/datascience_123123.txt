[site]: datascience
[post_id]: 123123
[parent_id]: 123112
[tags]: 
As is often the case, training a machine learning from scratch would be very inefficient here, and you could achieve excellent results with much simpler methods. The hangman problem breaks down to a few steps: Start with a list of all eligible words (you can find the Scrabble dictionary online, which is a good start) and filter to keep only words of length $n$ . This list isn't too long. Decide on your next letter. A simple way to to this is find the most common eligible word (there are lots of data sets that provide this) and pick any letter from this. A better way would be to figure out the most likely letter directly. I provide an algorithm for this below. Provide your guess, and update your list of eligable words accordingly. Code Example # Hangman import numpy as np import pandas as pd import string # Data from https://www.kaggle.com/datasets/rtatman/english-word-frequency?select=unigram_freq.csv all_words = pd.read_csv('unigram_freq.csv').set_index('word') all_words.index = all_words.index.map(str) # Ensure everything is a string all_words['length'] = all_words.index.map(len) target_n = 5 words = all_words[all_words['length'] == target_n].sort_values('count', ascending = False) # Most likely letter, marginalising across words letters = list(string.ascii_lowercase) possibilities = np.zeros((target_n, len(letters))) for i in range(target_n): for j, letter in enumerate(letters): # Get all eligable words with letter `letter` in position `i` letter_pos_words = words[words.index.map(lambda w: w[i] == letter)] possibilities[i, j] = letter_pos_words['count'].sum() guess_position, guess_letter_index = (v[0] for v in np.where(possibilities == possibilities.max())) guess_letter = letters[guess_letter_index] print('Guess: "%s" in position %i' % (guess_letter, guess_position)) # NB - Position 0 is the first letter ## Guess: "s" in position 4 You can also visualise how these letter probabilities look: import seaborn as sb import matplotlib.pyplot as plt viz_df = pd.DataFrame(possibilities, columns = letters) fig, ax = plt.subplots(figsize = (9,8)) sb.heatmap(viz_df.T, cmap = 'jet', ax=ax) plt.show()
