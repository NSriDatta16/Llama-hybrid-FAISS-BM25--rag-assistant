[site]: stackoverflow
[post_id]: 4855660
[parent_id]: 
[tags]: 
How to set up my XMLParser to store a non-specific number of objects?

I am trying to parse an XML with various similar sets of tags. The whole point on me reading this file is so that my app can receive a list of documents that have been updated. The situation I'm faced with right now is trying to figure out how to store an unknown number of similar objects into an array for me to access somewhere else in the program. My XMLParser class has the parser method as follows (so far): -(void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict { if (currentTextString) { [currentTextString release]; currentTextString = nil; } if ([elementName isEqualToString:@"reference_number"]) { pdfDocument = [[PDFDocument alloc] init]; pdfDocument.educationDocumentReference = currentTextString; } else if ([elementName isEqualToString:@"name"]) { pdfDocument.educationDocumentName = currentTextString; } else if ([elementName isEqualToString:@"type"]) { pdfDocument.educationDocumentType = currentTextString; } else if ([elementName isEqualToString:@"date"]) { pdfDocument.educationDocumentDate = [dateformatter dateFromString:currentTextString]; } else if ([elementName isEqualToString:@"url"]) { pdfDocument.educationDocumentURL = currentTextString; [resultsMutableArray insertObject:pdfDocument atIndex:resultsArrayCount]; resultsArrayCount++; } } I am trying to create a pdfDocument object when the parser finds the first tag and store the same object when the last tag of a document is read into a mutable array. This might work for the first object, but when the next set of data is read, it would just not work at all. What is the proper way to make something like this happen? Can anyone point me in the right direction here? I guess the question is can I dynamically name the document objects. The only option that I have found is to create a temporary table and store the information there, and after I have all the information I compare it to my permanent storage table.
