[site]: stackoverflow
[post_id]: 5664650
[parent_id]: 5663783
[tags]: 
Your question is way, way too complex. Break it down. Does using “foreach” to iterate a sequence of value types create a copy of the sequence? No. Does using "foreach" to iterate a sequence of value types create a copy of each value? Yes. Does using "for" to do an equivalent iteration of an indexed sequence of value types create a copy of each value? Usually, yes. There are things you can do to avoid the copying if you know special things about the collection, like for instance that it is an array. But in the general case of indexed collections, indexing the sequence returns a copy of the value in the sequence, not a reference to a storage location containing the value . Does doing anything to a value type make a copy of the value? Just about. Value types are copied by value . That's why they're called value types. The only things that you do to value types that do not make a copy are calls to methods on the value type, and passing a value type variable using "out" or "ref". Value types are copied constantly ; that's why value types are often slower than reference types. Does using "foreach" or "for" to iterate a sequence of reference type copy the reference? Yes. The value of an expression of reference type is a reference. That reference is copied whenever it is used. So what's the difference between value types and reference types as far as their copying behaviour is concerned? Value types are copied by value. Reference types copy the reference but not the thing being referred to. A 16-byte value type copies 16 bytes every time you use it. A 16 byte reference type copies the 4 (or 8) byte reference every time you use it. Is the foreach loop slower than the for loop? Often it is. The foreach loop is often doing more work, in that it is creating an enumerator and calling methods on the enumerator, instead of just incrementing an integer. Integer increments are extremely fast. Also don't forget that the enumerator in a foreach loop has to be disposed, and that can take time as well. Should I use the for loop instead of the foreach loop because the for loop is sometimes a few microseconds faster? No. That's dumb. You should make smart engineering decisions based on customer-focussed empirical data. The extra burden of a foreach loop is tiny. The customer will probably never notice. What you should do is: Set performance goals based on customer input Measure to see if you've met your goals If you have not, find the slowest thing using a profiler Fix it Repeat until you've met your goals Odds are extremely good that if you have a performance problem, changing a foreach loop to a for loop will make no difference whatsoever to your problem. Write the code the way it looks clear and understandable first.
