[site]: stackoverflow
[post_id]: 2499593
[parent_id]: 2499501
[tags]: 
I would recommend as fewer JARs as possible. The logic behind it, the disk storage is the cheapest commodity there available, but time spending tracing down complex dependencies is priceless. Hence the emergence of the .war files where all dependencies of the web application are put into a single file. BTW, Eclipse has a JAR exporter plugin which puts all dependent jars into a super jar and expose the entry level main method, so you can start your app with java -jar file.jar command. Although the resultant jar may be large, the flip side is not maintaining very complex class paths for you application. So, in your case I would go with one jar per project. If you determine that you indeed need to reuse some code in another project, just refactor it into the base project and make it a dependency in your existent project and another project.
