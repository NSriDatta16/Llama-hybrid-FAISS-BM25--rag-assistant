[site]: stackoverflow
[post_id]: 249081
[parent_id]: 248911
[tags]: 
I assume that ...that is shared between two applications? means that you want these two things to be running as separate processes? If that's not true, and they are running as a single process (with multiple threads), then the suggestions of semaphores and mutexes are the best option and should be quite straightforward. Note that the answer will depend on exactly how you're accessing this hardware. For example, if it's exposed through a file then normal file locking can be used. However if you're attempting to synchronise access to the hardware across two processes that's a different matter. I guess the first thing to say is that it's going to be easier to synchronise, if you can, to have a single process in charge of accessing the hardware. In this model you might have one process that acts as a server for the hardware - accepting requests from other processes and performing the reads and writes on their behalf. Just about any form of interprocess communications will be suitable, but for simplicity something like the message queue ( link ) may be appropriate with some appropriate data structure (eg. a flag to indicate whether it's a read or write operation, offset from base address of your hardware, number of bytes, buffer (in case of a write)) If putting all of the direct hardware access into a single process isn't appropriate then you'll have to use a proper synchronisation scheme. I would investigate the use of either file locks (and implement a rudimentary mutex scheme), or using named semaphores (as albertb has suggested)
