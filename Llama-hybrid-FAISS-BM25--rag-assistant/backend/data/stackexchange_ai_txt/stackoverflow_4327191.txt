[site]: stackoverflow
[post_id]: 4327191
[parent_id]: 4310017
[tags]: 
First, I created a toy example above, so it's possible that the toy would have worked and even partenon's suggestion might have worked on the toy example. The documentation seems to indicate that either should, but it didn't work in my real scenario, which is too verbose to go into here. The issue is that it couldn't find the location.state property. What ultimately worked was to create aliases in the criteria explicitly: criteria.createAlias("location", "location").createAlias("location.state", "state"); I was still not able to use the "state" alias, but "location.state" then worked for me, so creating the aliases somehow primed the query builder to be able to find it when it couldn't before. This all seems very hacky and inelegant, so I'm not proud of this solution, but it's what worked. Does this sound like a bug to anyone else? For those curious, without going into the whole entity model, here is the actual criteria and projections that worked for me: obsCriteria.createAlias("phenomenon", "phenomenon").createAlias( "phenomenon.phenomenonGroup", "phenomenonGroup"); ProjectionList projection = Projections.projectionList() .add(Projections.avg("value")) .add(Projections.groupProperty("phenomenon.phenomenonGroup")); obsCriteria.setProjection(projection);
