[site]: stackoverflow
[post_id]: 1994102
[parent_id]: 1994071
[tags]: 
Certainly it's possible to consume all available memory or create an infinite loop even without the builtins. There are many ways to do it such as 'a'*999999*999999 or to make an infinite loop: >>> print eval('[[x.append(a) for a in x] for x in [[0]]]', ... {'__builtins__':{}}, {'first_name':'Anurag', 'today':today}) As for 1) and 2), I'm not sure but it looks risky. Here is one thing that I tried that I thought would work, but it seems that someone else already considered that line of attack and blocked it: >>> import datetime >>> def today(): >>> return datetime.datetime.now() >>> >>> print eval('today.func_globals', {'__builtins__':{}}, {'first_name':'Anurag', 'today':today}) RuntimeError: restricted attribute I was half expecting to get this instead: {'__builtins__': , ... So I think it's probably a bad idea. You only need one tiny hole and you give access to your entire system. Have you considered other methods that don't use eval? What is wrong with them?
