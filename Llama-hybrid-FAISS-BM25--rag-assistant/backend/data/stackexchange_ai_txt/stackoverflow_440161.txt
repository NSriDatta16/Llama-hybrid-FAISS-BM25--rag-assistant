[site]: stackoverflow
[post_id]: 440161
[parent_id]: 
[tags]: 
Dll compatibility between compilers

Is there some way to make c++ dlls built with diffrent compilers compatible with each other? The classes can have factory methods for creation and destruction, so each compiler can use its own new/delete (since diffrent runtimes have there own heaps). I tried the following code but it crashed on the first member method: interface.h #pragma once class IRefCounted { public: virtual ~IRefCounted(){} virtual void AddRef()=0; virtual void Release()=0; }; class IClass : public IRefCounted { public: virtual ~IClass(){} virtual void PrintSomething()=0; }; test.cpp compiled with VC9, test.exe #include "interface.h" #include #include int main() { HMODULE dll; IClass* (*method)(void); IClass *dllclass; std::cout PrintSomething();//crash: Access violation writing location 0x00000004 dllclass->Release(); FreeLibrary(dll); std::cout a.cpp compiled with g++ g++.exe -shared c.cpp -o c.dll #include "interface.h" #include class A : public IClass { unsigned refCnt; public: A():refCnt(1){} virtual ~A() { if(refCnt)throw "Object deleted while refCnt non-zero!"; std::cout EDIT: I added the following line to the GCC CreateClass method, the text was correctly printed to the console, so its defenatly the function call thats killing it. std::cout I was wondering, how does COM manage to maintain binary compatibility even across languages, since its basicly all classes with inheritence (although only single) and therefore virtual functions. I'm not massivly bothered if I cant have overloaded operators/functions as long as I can maintain the basic OOP stuff (ie classes and single inheritence).
