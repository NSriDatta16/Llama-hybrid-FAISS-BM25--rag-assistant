[site]: stackoverflow
[post_id]: 4052326
[parent_id]: 
[tags]: 
Swing rich client in a multi tier context

We're in the analysis/early design phase of a future Swing application where persistance is provided by a database (probably an alternative between Oracle and mySql depending on the customer's money). Basically, the application will feature two kinds of modules : One "admin" subsystem to feed and maintain a set of referential data ; X other subsystems using subsets of this data and building their own objects (in the business sense), referencing elements of those subsets. My questions are : I'd guess the best practice is to limit the deployable Swing app only to presentation matters, and make it query a business tier on a distant server, this "deeper" app being the only one having access to the database and being responsible of persistence matters. Are there reasons why we could decide to go the other way and let the Swing apps talk directy to the DB (negating the need for a separate business tier) ? Which arguments could I give to support the business tier architecture to semi-technical people in the decision making process ? Are there design considerations (frameworks, patterns, code conventions) you would advise for this kind of solution (a rich client in an n-tier context) ? Are there tools that may help us during the coding phase, especially for the retrieval of the referential data subsets into the Swing app, cache management of those, and integrity verification (checking that the modified entities the Swing app send back to the DB does not replace other modifications submitted since the fetch) ?
