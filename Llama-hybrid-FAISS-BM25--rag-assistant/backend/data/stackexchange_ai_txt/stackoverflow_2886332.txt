[site]: stackoverflow
[post_id]: 2886332
[parent_id]: 2881517
[tags]: 
It genuinely isn't very useful, and is probably there only for symmetry with vector (under the assumption that both will operate internally in the same way). The capacity of a vector is guaranteed to affect the behaviour of a resize. Resizing a vector to a value less than or equal to the capacity will not induce a reallocation, and will not therefore invalidate iterators or pointers referring to elements in the vector. This means you can pre-allocate some storage by calling reserve on a vector, then (with care) add elements to it by resizing or pushing back (etc.), safe in the knowledge that the underlying buffer won't move. There is no such guarantee for string , though. It seems that the capacity is for informational purposes only -- though even that's a stretch, as it doesn't look like there's any useful information to be taken from it anyway. (Worse yet, contiguity of string chars isn't guaranteed either, so the only way you can get at the string as a linear buffer is c_str() -- which may induce a reallocation.) At a guess, string was presumably originally intended to be implemented as some kind of a special case of vector , but over time the two grew apart...
