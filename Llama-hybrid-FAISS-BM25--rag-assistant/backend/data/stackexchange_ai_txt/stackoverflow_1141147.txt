[site]: stackoverflow
[post_id]: 1141147
[parent_id]: 
[tags]: 
What steps can I take to optimise build times in TeamCity?

I'm currently trying to reduce the time taken to compile and unit test projects in TeamCity. Currently my project takes about between 5 to 8 minutes to build. What it does is: Clean any existing files Compile each project Create the installer Once that is done the unit tests are kicked off and it takes about 2 minutes to run. What it does is: Clean any existing files Compile each project Run all the unit tests Now, running the unit tests only takes 5 seconds....so the clean and compile step takes about 2 minutes....and the create installer step about 3 to 6 minutes. My first question is: Is there any way to configure team city so that it doesn't have to do the clean and compile steps again when it runs the unit tests. I believe the main reason why we have it that way is because the project build and unit tests can be run by different build agents. My second question is: Is 5 to 8 minutes a reasonable time for a project build to take? Are there ways to optimize the compile of the projects in the solution as well as the installer creation? Please let me know if there are any additional details I can supply that might help you to point me in the right direction of either optimising the build or just leaving things as they are. Update to answer some questions from Nate : When you run the build outside TeamCity, does it do a clean/compile again before the unit tests? No, because when you run it on your own machine you can specify which parts of the build script to run. We have sections for clean, compile, unit-test etc which get specified differently in team city for project build vs unit test running. If so, can you make the build not do that before the tests? The reason we don't do this at the moment is because when different build agents are used the files needed for the unit test would not be available and thus would fail. What are you using to build your project? we use Nant to build our project, wix for the installer, and NUnit and NCover for the unit tests and coverage reports. What source control system are you using? Subversion
