[site]: stackoverflow
[post_id]: 1328365
[parent_id]: 1324559
[tags]: 
The easiest way to enter numbers (especially non-integer numbers) in Windows Mobile (or in a regular Windows application) is to just have a text box that the users type into, and then validate that they've entered a proper number. The problem with this approach in Windows Mobile is that the default SIP (Soft Input Panel aka little pop-up keyboard) looks like this: alt text http://img510.imageshack.us/img510/6210/sipreg.jpg On a real Windows Mobile device, the SIP looks even smaller than this, and it is a gigantic pain in the keister to hit the little number keys at the top correctly. What you want to use for this purpose is the Numeric mode, which you get by clicking the "123" button in the upper left corner, and looks like this: alt text http://img16.imageshack.us/img16/6128/sipnum.jpg The problem with this is that there is no (simple) way programatically to make this mode of the SIP appear instead of the regular keyboard. To get the SIP to appear in numeric mode, add a reference to your project to Microsoft.WindowsCE.Forms , and then add this code as a class named "SIPHandler" (you will have to change the namespace to your project's namespace): using System; using System.Collections.Generic; using System.Text; using System.Runtime.InteropServices; using System.Drawing; using Microsoft.WindowsCE.Forms; namespace DeviceApplication1 { /// /// Handles showing and hiding of Soft Input Panel (SIP). Better to use these /// methods than having an InputControl on a form. InputControls behave oddly /// if you have multiple forms open. /// public class SIPHandler { public static void ShowSIP() { SipShowIM(1); } public static void ShowSIPNumeric() { SipShowIM(1); SetKeyboardToNumeric(); } public static void ShowSIPRegular() { SipShowIM(1); SetKeyboardToRegular(); } public static void HideSIP() { SipShowIM(0); } private static void SetKeyboardToRegular() { // Find the SIP window IntPtr hWnd = FindWindow("SipWndClass", null); // Go one level below as the actual SIP window is a child hWnd = GetWindow(hWnd, GW_CHILD); // Obtain its context and get a color sample // The premise here is that the numeric mode is controlled by a virtual button in the top left corner // Whenever the numeric mode is active, the button background will be of COLOR_WINDOW_TEXT IntPtr hDC = GetDC(hWnd); int pixel = GetPixel(hDC, 2, 2); // Notice that we cannot simply compare the color to the system color as the system color is 24 bit (or palette) // and the real color is dithered to 15-16 bits for most devices, so white (0xff, 0xff, 0xff) becomes // almost white (oxf8, 0xfc, 0xf8) // ken's hack: here we only want to simulate the click if the keyboard is in numeric mode, in // which case the back color will be WindowText //int clrText = (SystemColors.Window.R) | (SystemColors.Window.G Sorry about the length. To pop the SIP up in numeric mode, you just use this line: SIPHandler.ShowSIPNumeric(); or to make it appear in regular keyboard mode: SIPHandler.ShowSIPRegular(); And to hide it again: SIPHandler.HideSIP(); The basic trick behind this code is to sort of "peek" the color in the upper left corner to determine whether the SIP is already in regular keyboard or numeric mode, and then to simulate a mouse click (if necessary) in the same corner to ensure that the SIP is in the mode desired. Note: this is "borrowed" web code, but I no longer know where I got it from. If anyone on SO knows where this hack came from, please let me know and I'll be happy to attribute it to the original author. Update : well, after 2 seconds of Googling, I've found that the proximate source of this code was Daniel Moth: http://www.danielmoth.com/Blog/InputPanelEx.cs ... who credits Alex Feinman with the original: http://www.alexfeinman.com/download.asp?doc=IMSwitch.zip Thanks, guys! This code actually brought me to tears once (I was chopping onions at the time, but that couldn't have been it).
