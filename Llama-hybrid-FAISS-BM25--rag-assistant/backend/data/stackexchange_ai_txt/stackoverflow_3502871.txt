[site]: stackoverflow
[post_id]: 3502871
[parent_id]: 1338542
[tags]: 
Have worked extensively with embedded SQL, the real danger is that it is a code generation technology. You write C code (or whatever language) and then you switch to SQL, then back to C again. Later prior to compilation a prepocessor rewrites the code to be all C. The results can generate very confusing error messages. You are forced to learn the API to interact with the database which embedded SQL was supposed to free you from. Finally, you run the risk of embedding business rules into your queries confusing the business layer and data layer. Linq avoids some of these issue. First, Linq is part of the language. The constructs work more or less as a programmer expects. There is some SQL type syntax involved, but mostly the syntax is focused on the host language (i.e. C#). The compilation checks are done on the actual code you wrote. Therefor there is not need to translate the errors into the syntax before preprocessing. The results of the query are objects and collections, just as you would expect. There is still a danger of mixing business logic in the data layer however. Additionally, Linq has it's own issues with error messages where the field in question is often not included. Still it is a good compromise between the object world and the relational world.
