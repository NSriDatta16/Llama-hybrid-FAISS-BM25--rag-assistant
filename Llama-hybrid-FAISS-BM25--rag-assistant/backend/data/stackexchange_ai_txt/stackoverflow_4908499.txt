[site]: stackoverflow
[post_id]: 4908499
[parent_id]: 4908458
[tags]: 
Design patterns are general templates for solving problems in a generic way. The tradeoff is exactly what you are seeing. This happens because you need to customize the generic approach. 12 command classes does not seem like a lot to me, though, personally. With the command pattern, hopefully the commands are simple (just an execute method, right?) and hence easy to test. Also, they should be testable in isolation, i.e. you should be able to test the commands easily with little or no dependencies. The benefit you should be seeing are two-fold: 1) You should have seen your specific, complicated approach simplified by using the pattern(s) you chose. i.e. something that was getting ugly quickly should now be more elegant. 2) Your should be going faster, due to the simplified approach and the ease of testing your individual components. Can you make use other patterns, like composite, and use good OO design to avoid duplicating code (if you are duplicating code...)?
