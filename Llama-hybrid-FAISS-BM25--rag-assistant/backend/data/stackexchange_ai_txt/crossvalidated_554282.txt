[site]: crossvalidated
[post_id]: 554282
[parent_id]: 
[tags]: 
How to train a neural network to minimize two loss functions?

For TF/Keras (or in general), what is the best way to define a multidimensional y target? Should this even be done? The problem: Any sample x tries to predict several "values of interest". These values are returned as simple floats. Each value also has a corresponding category (binary) that classifies the value. Note that the binary classification corresponds to class A or B not a "yes" or "no". y = [[1.0451 0], [1.1469, 1], [1.3571, 1], [1.0451, 0]] Note that for my particular problem (which might be relevant to the posted problem), each y label has a different # of elements up to 5 (elements without values are zero padded [0, 0]. A possible solution: Flatten y into a single vector. From your experience, how well do NN's establish the type of relationship between values like above?
