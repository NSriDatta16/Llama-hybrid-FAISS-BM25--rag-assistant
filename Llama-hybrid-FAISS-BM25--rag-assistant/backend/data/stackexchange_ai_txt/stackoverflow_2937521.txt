[site]: stackoverflow
[post_id]: 2937521
[parent_id]: 2937511
[tags]: 
The compiler is probably using its default alignment option, where members of size x are aligned on a memory boundary evenly divisible by x . Depending on your compiler, you can affect this behaviour using a #pragma directive , for example: #pragma pack(1) will turn off the default alignment in Visual C++: Specifies the value, in bytes, to be used for packing. The default value for n is 8. Valid values are 1, 2, 4, 8, and 16. The alignment of a member will be on a boundary that is either a multiple of n or a multiple of the size of the member, whichever is smaller. Note that for low-level CPU performance reasons, it is usually best to try to align your data members so that they fall on an aligned boundary. Some CPU architectures require alignment, while others (such as Intel x86) tolerate misalignment with a decrease in performance (sometimes quite significantly).
