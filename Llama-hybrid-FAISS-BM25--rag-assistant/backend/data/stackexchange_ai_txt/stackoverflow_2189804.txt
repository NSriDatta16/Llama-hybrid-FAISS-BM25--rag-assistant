[site]: stackoverflow
[post_id]: 2189804
[parent_id]: 2188265
[tags]: 
Paragraphs in plain text documents are usually separated by two or more line separators. A line separator may be a linefeed ( \n ), a carriage-return ( \r ), or a carriage-return followed by a linefeed ( \r\n ). These three kinds of separator are typically associated with operating systems, but any application is free to write text using any kind of line separator. In fact, text that's been assembled from diverse sources (like a web page) may well contain two or more kinds of separator. When your app reads text, no matter what platform it's running on, it should always check for all three kinds of line separator. BufferedReader#readLine() does that, but of course it only reads one line at a time. Simple prose will usually be returned as an alternating sequence of non-empty lines representing paragraphs, and empty lines representing the spaces between them. But don't count on it; watch for multiple empty lines, and be aware that "empty" lines may in fact contain whitespace characters like space ( \u0020 ) and TAB ( \u0009 ). If you choose not to go with a BufferedReader , you may have to write the detection code from scratch. Java ME doesn't include regex support, so split() and java.util.Scanner are not available; and StringTokenizer makes no distinction between a single delimiter character and several in a row unless you use the returnDelims option. Then it returns the delimiters one character at a time, so you still have to write your own code to figure out what kind of separator you're looking at, if any.
