[site]: stackoverflow
[post_id]: 1433941
[parent_id]: 1433708
[tags]: 
If you are in fact using the class as a collection of algorithms/methods that act on external data without reference to any fields that are part of a specific instantiation of the class, then yes, the methods should be static. That's the point of static methods. However, there a lot of nuances that make several of the existing answers (i.e., don't use static methods) the better pragmatic advice. For example, if these classes might be used later as a particular instance of a Strategy interface/abstract class, all the static markers would have to be removed. Of course, it's all advice - both A and B are suitable answers. If your instructor says only one is correct, then s/he is enforcing other requirements (e.g., coding standards to support later refactoring) beyond the here-and-now design requirement. Those other requirements are also a learning opportunity, so make sure the instructor explains the wherefores.
