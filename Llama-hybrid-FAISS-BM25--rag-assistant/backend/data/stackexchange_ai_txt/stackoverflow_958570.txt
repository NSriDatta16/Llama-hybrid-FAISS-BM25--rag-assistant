[site]: stackoverflow
[post_id]: 958570
[parent_id]: 958260
[tags]: 
You could use the HttpService utility and leverage it's ability to take in parameters via an Object. Parameters can be sent in as key-value pairs, and the class handles the rest. Here's an example of a utility method which does exactly this: public static function sendViaHttpService(url:String, format:String, method:String, onComplete:Function, onFail:Function, parameters:Object=null):void { var http:HTTPService = new HTTPService(); http.url = url; http.resultFormat = format; http.method = method; // create callback functions which remove themselves from the http service // Don't want memory leaks var pass:Function = function(event:ResultEvent):void { onComplete(event); http.removeEventListener(ResultEvent.RESULT, pass); } var fail:Function = function(event:FaultEvent):void { onFail(event); http.removeEventListener(FaultEvent.FAULT, fail); } http.addEventListener(ResultEvent.RESULT, pass); http.addEventListener(FaultEvent.FAULT, fail); // yeah, we're going to send this in with the date to prevent // browser-caching...kludgey, but it works if (parameters == null) { parameters = new Object(); } // always get new date so the URL is not cached parameters.date = new Date().getTime(); http.send(parameters); } //sendViaHttpService() Parameters can be passed into this static function like this: var complete:Function = function(event:ResultEvent):void { /* your callback here */ }; var fail:Function = function(event:FaultEvent):void { /* your failure callback here */ }; var url:String = " "; sendViaHttpService(url, URLLoaderDataFormat.TEXT, URLRequestMethod.GET, complete, fail, { param1: 'value1', param2: 'value2' });
