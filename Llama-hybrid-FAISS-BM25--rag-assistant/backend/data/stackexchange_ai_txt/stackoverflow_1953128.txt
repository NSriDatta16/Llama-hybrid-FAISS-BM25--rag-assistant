[site]: stackoverflow
[post_id]: 1953128
[parent_id]: 1953080
[tags]: 
If you generate all the possible words that match the pattern (arate, arbte, arcte ... zryte, zrzte) and then look them up in a binary tree representation of the dictionary, that will have the average performance characteristics of O(e^N1 * log(N2)) where N1 is the number of question marks and N2 is the size of the dictionary. Seems good enough for me but I'm sure it's possible to figure out a better algorithm. EDIT : If you will have more than say, three question marks, have a look at Phil H's answer and his letter indexing approach.
