[site]: stackoverflow
[post_id]: 2088472
[parent_id]: 2076251
[tags]: 
I don't know if it is possible using HQL, but using NHibernate's Criteria API, you can do this: ICriteria criteria = session.CreateCriteria (typeof(Technology)); criteria.SetFetchMode ("TechnologyDescriptions", FetchMode.Lazy); var list = criteria.List (); However, this is probably not really what you want. The TechnologyDescriptions won't be fetched right now, but they will be fetched once you access them (that is: the first time you call the TechnologyDescriptions property). When working with NHibernate, you shouldn't think in terms of 'data'. Rather, you should think in terms of 'entities'. When retrieving an entity, you want to retrieve the entity entirly (directly, or in a lazy fashion). It is not possible to retrieve an entity partially, and this is quite obvious; What should NHibernate do with an entity that you've retrieved partially, when you try to save that entity ? Something else that pops in my mind: I suppose you want to retrieve the Technologies, and nothing related because you want to display them in an overview or something like that ? In such case, you should take a look at 'Transformations'. You could for instance create an additional class which is called TechnologyView , which looks like this: public class TechnologyView { public int Id { get; private set; } public string Name { get; private set; } public string Abbreviation { get; private set; } private TechnologyView() { // Private constructor, required for NH } public TechnologyView( int id, string name, string abbreviation ) { this.Id = id; this.Name = name; this.Abbreviation = abbreviation; } } Once you've done this, you must inform NHibernate about the existance of this class. You do this by Importing the class in an hbm.xml file for instance . (I do not know how to do it using Fluent). After that, you can create a query (using HQL or Criteria) which retrieves TechnologyView instances. NHibernate is smart enough to generate a performant SQL query. using HQL: IQuery q = s.CreateQuery ("select new TechnologyView (t.Id, t.Name, t.Abbreviation) from Technology t"); using Criteria: ICriteria criteria = s.CreateCriteria (typeof(Technology)); criteria.SetResultTransformer (Transformers.AliasToBean (typeof(TechnologyView)); var result = criteria.List ();
