[site]: stackoverflow
[post_id]: 476494
[parent_id]: 476328
[tags]: 
While I don't know Scala, I wouldn't use a ring buffer here. As I understand it, you want to take the average, at each array position, of the preceding filterSize elements. So go through the array left to right, keeping an accumulator holding the sum of the previous filterSize elements (at each step adding the rightmost and subtracting the leftmost) and yielding accumulator/filterSize as the value at that position. A factor of filterSize fewer additions, and in principle purely functional. Is that inconvenient to code in Scala? (If overflow is not a concern, I'd do something a bit simpler and more parallelizable: compute the running sum of the whole array ( scanl (+) 0 numbers in Haskell) and produce the running sum minus the running sum displaced filterSize positions.)
