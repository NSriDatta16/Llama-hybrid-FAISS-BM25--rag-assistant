[site]: stackoverflow
[post_id]: 5444579
[parent_id]: 5426708
[tags]: 
Several reasons come to mind: Exceptions shouldn't be very visible, since they are designed to be thrown deep in the bowels of a library and caught somewhere high up in the call stack (even as high as main()). I don't know what you mean with "Exceptions shouldn't be very visible". But I agree that catch-blocks should be rare -- and they are usually in main. They are intended to signal exceptional (i.e., rare and unexpected) faults. For example, failure to open a file isn't particularly exceptional. So, by default, the iostream library doesn't throw an exception when it fails to open a file. that the iostream library does not throw exceptions makes it kind of unuseable. Hiding errors from the caller! This is so C like. Exceptions are very expensive to throw, which encourages adherence to the design intent. Usually Exceptions are for system calls failing. Since writing to a file or opening a file is not really inexpensive, one would not care about Exceptions being expensive. Also having to check for success is more expensive than using C++ Exception Handling. Usually one would not create a try-catch block inside a time critical part of code. C++ libraries that throw exceptions don't interface easily with C programs. What is C? Ah yes -- I remember -- something I gave up around 1996. Remember Turbo Pascal?
