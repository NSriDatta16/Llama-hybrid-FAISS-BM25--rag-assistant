[site]: datascience
[post_id]: 118352
[parent_id]: 
[tags]: 
How to handle multiple multivariate timeseries?

I am trying to develop a model using machine learning that reproduces a biological behavior. My goal is to do a regression of timeseries e.g from multiple input each time_step predict multiple output : use x(t), x(t-1)... to predict y(t), y(t-1)... and not forecasting : use x(t), x(t-1) to predict x(t+1) For this, I have : as input: N [640*30] (time_steps * features) time series (execution cycle) in output: N [640*1000] time series (result of the exceution cycle) To feed my data to an ML/DL algorithm, I can either: Reshape my data into (3D data) [nb_instances, time_steps, features] Remove the dimension nb instances and concatenate my data into [nb_instances * time_steps, features] With the 3D data, I have a hard time to introduce them in a classical ml algo (for example, sklearn models...). I know that I could use a DL algorithm but I would like to have/test a "low resource" solution first. I am not considering dimensionality reduction for constraint purposes. Is there a way to feed 3D data to a classic ML algo from sklearn or another python library? If I choose the second option (removing the nb_instances dimension), I will lose some information (like the execution cycle) but I will be able to use both ML and DL. Which option is better? Is there another way to look at the problem?
