[site]: stackoverflow
[post_id]: 3146383
[parent_id]: 3146273
[tags]: 
The AppDelegate should only be used for very specific items such as implementing the UIApplicationDelegate protocol (i.e. methods like applicationDidFinishLaunching ) or in some cases storing global variables. You should keep IBActions and other outlets in their respective view controller files (i.e. if you created MyViewController.h and MyViewController.m which are linked with MyViewController.xib where you have some buttons, images, etc.). They can then be hooked up via dragging the inspector control you want (i.e. TouchUpInside) to the File's Owner. Something you should read to better understand view controllers: http://developer.apple.com/iphone/library/featuredarticles/ViewControllerPGforiPhoneOS/Introduction/Introduction.html Typically it is best to create a unique view controller for each view you will present to the user. For instance, if I had a main screen and then an "about" or a settings screen, I would make each of those their own view controller. It helps organize things better than using one view with a whole bunch of subviews that you hide/show and will also improve loading times and general performance. Update for your 2nd question in the comments about accessing the app delegate: First, you need to import the .h file (i.e. #import "AppDelegate.h" ) for the app delegate into whichever view controller .m file you wanna use to access whatever variables, arrays, etc you have stored in the app delegate files. Make sure you synthesize whichever objects you create in the app delegate's .h file in the app delegate's .m file so the getters and setters are created (so you can access them). Then in the view controller .m file, in whichever method you are using: -(void)someMethod { // here we just create a shortcut to the app delegate called "theAppDelegate" YourAppDelegateFileNameHere *theAppDelegate = (YourAppDelegateFileNameHere *)[[UIApplication sharedApplication] delegate]; // now you can use the dot notation if you wanna access a variable int SomeNewInteger = theAppDelegate.someIntegerYouHaveStored; // or some array you have stored return [theAppDelegate.someArrayYouCreated count]; } Hope that helps!
