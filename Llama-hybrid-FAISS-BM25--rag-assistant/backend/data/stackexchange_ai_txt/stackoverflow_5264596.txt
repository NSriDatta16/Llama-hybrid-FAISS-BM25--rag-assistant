[site]: stackoverflow
[post_id]: 5264596
[parent_id]: 5258569
[tags]: 
As pointed out by Loki Kriasus , this type of behavior definitely sounds like you are trying to use objects that have not been initialized when your application is restored. Charles Petzold's free eBook Programming Windows 7 has a great section on this starting on page 117. For what you are doing, I would guess the Phone State would be more than adequate. The Phone State is similar to Session State in ASP.NET. It is just a dictionary of (serializable) objects with string keys and is not maintained across launches of your app, but it is restored when your app is navigated to from the Back Stack. Here is an example of it's use to restore some custom object named myObject: private CustomObject myObject; protected override void OnNavigatedFrom(NavigationEventArgs args) { //Save to State when leaving the page PhoneApplicationService.Current.State["myObject"] = myObject; base.OnNavigatedFrom(args); } protected override void OnNavigatedTo(NavigationEventArgs args) { if (PhoneApplicationService.Current.State.ContainsKey("myObject")) { //Restore from State myObject = (CustomObject)PhoneApplicationService.Current.State["myObject"]; } else { //No previous object, so perform initialization myObject = new myObject(); } } If you need to store settings across all instances of your app then look into IsolatedStorageSettings which is perfect for this. There are other options depending on your needs (check the linked book above for examples). I would guess using the Page State as shown above in your 2nd and 3rd pages will fix your problem.
