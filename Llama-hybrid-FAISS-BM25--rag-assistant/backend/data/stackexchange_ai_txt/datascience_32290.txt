[site]: datascience
[post_id]: 32290
[parent_id]: 
[tags]: 
Two-class classification model with multi-type input data

As a first introduction to machine learning and keras, I just finished reading Deep Learning with R by FranÃ§ois Chollet with J.J. Allaire. I would like to extend the book's IMDB example of two-class classification to a multi-input version using functional API. library(keras) ## Keras IMDB example #load data imdb % layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>% layer_dense(units = 16, activation = "relu") %>% layer_dense(units = 1, activation = "sigmoid") #Compiling the model model %>% compile( optimizer = "rmsprop", loss = "binary_crossentropy", metrics = c("accuracy") ) #Training the model history % fit( partial_x_train, partial_y_train, epochs = 20, batch_size = 512, validation_data = list(x_val, y_val) ) #Defining the model using functional API model % layer_embedding(input_dim = 10000, output_dim = 8, input_length = maxlen) %>% layer_flatten() %>% layer_dense(units = 1, activation = "sigmoid") So, I would like to create a similar model where we predict class A and B based on 1 continuous and 3 categorical input data. In this dummy example, continuous1 , categorical1 and categorical2 are 1D tensors while similarly to the IMDB example, categorical3 is a 2D tensor of shape (samples, indices) with length num_index=20 and are one-hot encoded. #Dummy data dat 0) + 0L } for(i in 9801:10000){ dat_categorical3[[i]] 0) + 0L } As I've never built a Keras model before, I'm a bit confused on how to set up the layers representing the different data inputs using functional API. Any suggestions and feedback are highly appreciated, thanks!
