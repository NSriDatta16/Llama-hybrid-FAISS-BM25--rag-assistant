[site]: stackoverflow
[post_id]: 1044888
[parent_id]: 1044229
[tags]: 
Posting the PHP code would be helpful in determining the intent of the script. While, as most of the commenters pointed out, there might be a benign explanation to it I still would not rule out less innocent shenanigans going on. The benign case : the script is indeed meant to output a GIF image and you got the code instead because of a server misconfiguration. This could happen if: the author mistyped the instruction in the .htaccess file to treat either all GIFs or this particular file as PHP the webmaster overwrote the .htaccess with one lacking said instructions the server administrator dropped an AllowOverride none into his httpd.conf disabling all userspace personalizations I would look at the type of functions used in the code. This being supposedly a GIF file, I would expect the script to end with an imagegif($img) instruction or such, maybe followed by imagedestroy($img) . If this is the case the script seems likely to be meant to output GIF images to the browser. The evil case : somebody uploaded a bunch of hacker stuff masqueraded as a GIF, expecting later to launch it using any method that can give him access to the command line: an unprotected eval() , a hole elsewhere in the server or even a vulnerability in a totally unrelated daemon running on the same machine. His advantage in this case would be that the script would be stored in a known location derivable from the server root. There are scripts out there that include complete file managers and sets of utilities in a single package - just for the purpose of making havoc. Again, look at the source: if it starts with a shebang (something like #!/bin/php /usr/htdocs/myfakeimagefile.gif ) it's definitely meant to be run from the command line. Lack of shebang doesn't however imply it can't be run as a script: as long as one knows where PHP is, where the script is and can access a command prompt can probably launch it anyway.
