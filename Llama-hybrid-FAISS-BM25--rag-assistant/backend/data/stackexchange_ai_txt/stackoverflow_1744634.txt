[site]: stackoverflow
[post_id]: 1744634
[parent_id]: 1744120
[tags]: 
Firstly, the choice of namespace alias should make no difference to a well-formed parser. But; does it have to be DataContractSerializer ? With XmlSerializer , you can use the overload of Serialize that accepts a XmlSerializerNamespaces . This allows you to pick and choose the namespaces and aliases that you use. Ultimately; DataContractSerializer is not intended to give full xml control; that isn't its aim. If you want strict xml control, XmlSerializer is a better choice, even if it is older (and has some nuances/foibles of its own). Full example: using System; using System.Xml.Serialization; public class Amount { public const string CoreNamespace = "http://core.test.com/"; [XmlElement("Amount", Namespace=CoreNamespace)] public decimal Value { get; set; } [XmlElement("CurrencyCode", Namespace = CoreNamespace)] public string Currency { get; set; } } [XmlType("SecurityHolding", Namespace = SecurityHolding.TradingNamespace)] public class SecurityHolding { public const string TradingNamespace = "http://personaltrading.test.com/"; [XmlElement("Amount", Namespace = Amount.CoreNamespace)] public Amount Amount { get; set; } public int BrokerageId { get; set; } public string BrokerageName { get; set; } public int RecordId { get; set; } } static class Program { static void Main() { var data = new[] { new SecurityHolding { Amount = new Amount { Value = 1.05M, Currency = "USD" }, BrokerageId = 0, BrokerageName = null, RecordId = 3681 } }; var ser = new XmlSerializer(data.GetType(), new XmlRootAttribute("ArrayOfSecurityHolding") { Namespace = SecurityHolding.TradingNamespace}); var ns = new XmlSerializerNamespaces(); ns.Add("foo", Amount.CoreNamespace); ser.Serialize(Console.Out, data, ns); } } Output: 1.05 USD 0 3681
