[site]: crossvalidated
[post_id]: 187536
[parent_id]: 187449
[tags]: 
As this question has received very little attention, I have done more research and I believe the best term for what I am describing here would be called: Walk Probability . See, for example, the documentation for the Python package Pykov - Specifically the method Pykov.Chain.walk_probability . I've added comments to an excerpt from the documentation to illustrate an example and the solution (in Python): # Create a markov chain with 3 state tuples, and the probability of each. # The state ['A','B'] has a probability of .3, P(['A','A']) = .7, etc. >>> T = pykov.Chain({('A','B'): .3, ('A','A'): .7, ('B','A'): 1.}) # the Chain.walk_probability method will return log(P(given_chain)) >>> T.walk_probability(['A','A','B','A','A']) -1.917322692203401 >>> probability = math.exp(-1.917322692203401) >>> probability 0.147 # So the probability that the chain T would generate the walk # ['A','A','B','A','A'] is equal to 0.147 >>> p = T.walk_probability(['A','B','B','B','A']) >>> math.exp(p) 0.0 # And the probability that the same chain T would generate the walk # ['A','B','B','B','A'] is 0, since the state tuple ('B','A') has a # probability of 1.0 - the chain could never have generated # the sequence ['B', 'B'] If anyone has a more rigorous answer based upon something other than the documentation of a random Python module, please contribute by adding an answer or editing this one!
