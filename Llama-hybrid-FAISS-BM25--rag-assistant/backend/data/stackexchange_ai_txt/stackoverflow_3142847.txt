[site]: stackoverflow
[post_id]: 3142847
[parent_id]: 3142722
[tags]: 
The Spring Security docs discuss how this actually works. This approach uses hashing to achieve a useful remember-me strategy. In essence a cookie is sent to the browser upon successful interactive authentication, with the cookie being composed as follows: base64(username + ":" + expirationTime + ":" + md5Hex(username + ":" + expirationTime + ":" password + ":" + key)) ... As such the remember-me token is valid only for the period specified, and provided that the username, password and key does not change. Notably, this has a potential security issue in that a captured remember-me token will be usable from any user agent until such time as the token expires. This is the same issue as with digest authentication. Basically the cookie contains the username, password, expiration time and a key (which you specify), all of which are hashed together. When your browser sends the contents of this cookie to the server, Spring Security: Retrieves the password from the backend for the given username Computes the md5Hex() of the username/password/etc from the database and compares it to the value in the cookie If they match - you are logged in! If not a match, then you've supplied a forged cookie or one of the username/password/key has changed. The underlying assumption here is that the hash function - the md5Hex() part above - provides a way to easily encode some piece of data in one direction yet is incredibly hard and unpractical to reverse (to recover the password from the md5Hex text).
