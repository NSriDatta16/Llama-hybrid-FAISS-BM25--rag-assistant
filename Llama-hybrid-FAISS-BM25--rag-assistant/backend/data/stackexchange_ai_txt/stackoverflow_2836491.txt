[site]: stackoverflow
[post_id]: 2836491
[parent_id]: 2836452
[tags]: 
TDD for business apps works like this. Write down a business requirement. Write down a test for that requirement. Write code that passes the test. The trick is that there are many junky non-business requirements that don't need extensive testing. "saves to a database" isn't a business requirement. It's technical. "activates a button on the GUI for some situation" isn't a business requirement, it's part of the interface. "backup" isn't a business requirement; it's security or business continuity or something. Consider a concrete example. Requirement -- "You can't borrow books until you've paid your fines." Tests. Attempt to borrow book with fine. Attempt to borrow book with no fine. Code. class FinesNotPaid( unittest.TestCase ): def setUp( self ): # load some fixtures with users, books and fines outstanding. def test_should_not_checkout_book( self ): x = TheCheckoutClass() x.checkoutBook( someBook ) self.fail( "Should have thrown error" ) class FinesPaid( unittest.TestCase ): def setUp( self ): # load some fixtures with users, books and fines paid. def test_should_not_checkout_book( self ): x = TheCheckoutClass() x.checkoutBook( someBook ) self.success( ) class NoFines( unittest.TestCase ): etc. These are Business Rules implemented by classes that are separate from your database and your GUI. These are classes in an application domain layer. Your CRUD rules are business rules. You need to test them. However, you don't need to test every database-related feature. You need a few "can I create and persist an object?" tests. You have to trust that the ORM, the Data Access layer and the Database actually work. You don't write tests to exhaustively test the built-in features of the ORM. Code coverage (100% or 80% or 10%) is largely meaningless. Is software that has tests with 80% code coverage actually 20% more likely to fail? It doesn't work that way. Testing every line of code doesn't cover every logic path, so stop worrying and start testing. Test the business use cases. If they pass and there's untested code, then -- perhaps -- you wrote too much code.
