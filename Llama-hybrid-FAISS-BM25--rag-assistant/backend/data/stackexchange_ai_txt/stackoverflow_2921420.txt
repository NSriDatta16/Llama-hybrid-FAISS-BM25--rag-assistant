[site]: stackoverflow
[post_id]: 2921420
[parent_id]: 2921375
[tags]: 
You should use a model-view-controller approach . You only serialize the model, not the view. The view should be populated from the model. Serializing Swing components is anyways not recommended at all: While Swing components do implement the Serializable interface, they are not portable between different versions of the Java Virtual Machine Looking at what you have, you should have some classes that are your model and have only data. These classes will be serialized using XStream somewhere. Your Swing Classes then have methods to receive these model classes and populate the fields and editors. You can then extend the UI, for example, without having to change the class, adding more funcionality, or provide different views for the same data set. To make it fancier, the Swing Component should not store and load the model, but you should have a controller interface that you pass to the swing component to perform these operations. This way, you can unit test better and you decouple the storage logic from the view logic. If XStream is correctly configured, and if you are careful about the model and the fields, it should be possible to add more fields to your model classes without breaking backwards compatibility. I don't recommend using Java Serialization anyways, as it is not a good practice to use it for storage. Java Serialization excels at Remote Method Invocation. It is relatively fragile when the model classes change..
