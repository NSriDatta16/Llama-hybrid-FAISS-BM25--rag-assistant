[site]: stackoverflow
[post_id]: 1693956
[parent_id]: 1691453
[tags]: 
If you want to mess with Qt widgets from the REPL, QApplication/invokeLater or QApplication/invokeAndWait are probably what you want. You can use them in conjunction with agents. Given this: (ns qt4-demo (:import (com.trolltech.qt.gui QApplication QPushButton) (com.trolltech.qt.core QCoreApplication))) (def *app* (ref nil)) (def *button* (ref nil)) (def *runner* (agent nil)) (defn init [] (QApplication/initialize (make-array String 0))) (defn exec [] (QApplication/exec)) (defn hello-world [a] (init) (let [app (QCoreApplication/instance) button (doto (QPushButton. "Go Clojure Go") (.show))] (dosync (ref-set *app* app) (ref-set *button* button))) (exec)) Then from a REPL: qt4-demo=> (send-off *runner* hello-world) # ;; This fails because we are not in the Qt main thread qt4-demo=> (.setText @*button* "foo") QObject used from outside its own thread, object=QPushButton(0x8d0f55f0) , objectThread=Thread[pool-2-thread-1,5,main], currentThread=Thread[main,5,main] (NO_SOURCE_FILE:0) ;; This should work though qt4-demo=> (QApplication/invokeLater #(.setText @*button* "foo")) nil qt4-demo=> (QApplication/invokeAndWait #(.setText @*button* "bar")) nil
