[site]: crossvalidated
[post_id]: 562761
[parent_id]: 
[tags]: 
Using mixed models, is there a way to explicitly ignore one pair of crossed fixed factors in a partially-crossed experiment?

The data and model I am working with data from a partially-crossed repeated measures experimental design. I would like to use mixed models to evaluate how my dependent variable, plant biomass, is affected by a three way interaction (or a simpler combination) between fixed effects - one continuous variable and two factors: time ("yr", continuous measure of time since treatment began) fire regime (3 levels: "con", "ex", and "re", where "con" is the control) fertilizer (2 levels: "none" and "fert", where "none" is the control) This data set has nested random effects based on the spatial location of the samples: One sample was collected randomly from within each stratified subplot area ("subplot_id") each year. 5-7 subplots were located within an individual "plot". > my.df # A tibble: 312 x 6 yr plot subplot_id fire_trt fert_trt biomass 1 0 41 41-1 ex none 1.36 2 0 41 41-2 ex none 0.542 3 0 41 41-3 ex none 1.09 4 0 41 41-4 ex none 2.02 5 0 41 41-5 ex none 0.691 6 0 42 42-2 ex fert 0.864 7 0 42 42-4 ex fert 0.598 8 0 42 42-5 ex fert 0.253 9 0 42 42-6 ex fert 0.0383 10 0 42 42-7 ex fert 0.559 # ... with 302 more rows Sample data are at the bottom of this post. In reality I will be working with multiple data sets from different sites & types of biomass, each similarly structured (& similarly unbalanced) to the sample data. Here's my current model (the 3-way interaction is indeed significant for this particular data set): mod |t|) (Intercept) 1.74306791 0.11721606 15.12193 14.8705548 1.956683e-10 fire_trtex -1.00366818 0.20302418 15.12193 -4.9435894 1.725986e-04 fire_trtre -0.83597681 0.20302418 15.12193 -4.1176219 8.988053e-04 fert_trtfert -0.22440504 0.21400628 15.12193 -1.0485909 3.108374e-01 yr 0.09798873 0.02721118 227.71514 3.6010465 3.890172e-04 fire_trtex:fert_trtfert -0.16962079 0.35810099 15.12193 -0.4736675 6.425031e-01 fire_trtex:yr -0.16170996 0.04713115 227.71514 -3.4310636 7.138130e-04 fire_trtre:yr 0.03139258 0.04713115 227.71514 0.6660687 5.060414e-01 fert_trtfert:yr -0.21785079 0.04968059 227.71514 -4.3850283 1.772429e-05 fire_trtex:fert_trtfert:yr 0.21953446 0.08313153 227.71514 2.6408086 8.843392e-03 The problem All models that include an interaction effect between fert_trt and fire_trt factors are rank deficient (where fire_trt = "con", fert_trt = "none" by design, leading to colinearity in the model matrix). The rank deficiency is a concern for a few reasons: The coefficient estimate of particular interest, fire_trtre:fert_trtfert:yr is dropped, presumably due to the rank deficiency. I'd like to also change the covariance structure to account for temporal autocorrelation, but nlme won't run rank deficient models. Most importantly, we're not interested in this interaction of fertilizer on control plots in the first place. We are interested in the interaction of fertilizer treatment with fire treatments "re" and "ex". But we want to keep control plot data in the model because it will allow us to see the "background" levels of change in the response variable over time and assess whether the slopes, beginnings, and end points of treated plots are significantly different from control (through emmeans ). Some possible solutions? I have found a few related -but- unhelpful posts and perhaps some potential solutions. I'd really appreciate some wisdom on what's most appropriate here. Some options: Stick with the current covariance structure & rank deficient model, and just acknowledge this in our results. Somehow specify or pre-define which columns in the model.matrix to drop/ignore so we only compare the effects of interest? Similar to the question here , is it okay to explicitly remove the colinear lower-level fixed effects from my model? For example, the following model is rank deficient but drops the two columns I'm NOT interested in: "fire_trtcon:fert_trtfert" and "fire_trtcon:fert_trtfert:yr". mod2 summary(mod2)$coefficients Estimate Std. Error df t value Pr(>|t|) (Intercept) 1.743067912 0.11721606 15.12193 14.8705548 1.956683e-10 fire_trtex -1.003668176 0.20302418 15.12193 -4.9435894 1.725986e-04 fire_trtre -0.835976809 0.20302418 15.12193 -4.1176219 8.988053e-04 fire_trtex:fert_trtfert -0.394025829 0.28711955 15.12193 -1.3723407 1.899716e-01 fire_trtre:fert_trtfert -0.224405037 0.21400628 15.12193 -1.0485909 3.108374e-01 fire_trtcon:yr 0.097988725 0.02721118 227.71514 3.6010465 3.890172e-04 fire_trtex:yr -0.063721235 0.03848242 227.71514 -1.6558531 9.912893e-02 fire_trtre:yr 0.129381305 0.03848242 227.71514 3.3620886 9.072242e-04 fire_trtex:fert_trtfert:yr 0.001683661 0.06665351 227.71514 0.0252599 9.798698e-01 fire_trtre:fert_trtfert:yr -0.217850795 0.04968059 227.71514 -4.3850283 1.772429e-05 Restructure my data by creating a single factor representing the interaction , such that the two factors fire_trt and fert_trt are treated as 1 factor with five different levels. But won't this change the lower order interactions and main effects, as well my ability to directly compare AIC values to simpler versions (say, biomass ~ fire_trt*time + fert_trt ... )? Restructure my data so some of the factors are hierarchical/ nested ? Maybe something like where a 2-level factor "trtmt" (with levels "con" vs "trtd") contains another 2-level factor "fire_trt" (with levels "re" & "ex") within the "trtd" factor level. And then just looking at the interaction between fertilizer treatment and the two levels of "treated" plots. But I'm not sure if this is a stretch, conceptually, to nest the data in this way. And I'm not sure this would be better. My attempt to run a model with the data modified as described also produced rank deficient results. my.df2 % mutate(trtmt = if_else(fire_trt == "con", "con", "trtd")) lmer(biomass ~ trtmt:fire_trt*fert_trt*yr + (1|plot/subplot_id), data = my.df2) Any guidance would be appreciated! Sample data my.df
