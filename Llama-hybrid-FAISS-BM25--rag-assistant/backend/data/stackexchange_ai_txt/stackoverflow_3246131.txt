[site]: stackoverflow
[post_id]: 3246131
[parent_id]: 3246106
[tags]: 
I can't explain it in the proper terms, but I can tell you that, in general, TDD does allow the developer to focus on the ACTUAL requirements of the task. It amounts to another method for forcing the requirements to be very specific and detailed. Once the test is fully fleshed out, then any code which completes the test successfully is done. Period. End of development for that task. Is that necessarily more or less efficient than doing it the other way? I don't think so, in a perfect world. But most of us do not live in a perfect world. So in my opinion, if the only person who can represent the requirement in some fashion with 100% accuracy is the test-creator, then it works fine. Programmers do not spend any time guessing what to do, they don't write for conditions that cannot occur, etc. I am a proponent of TDD, but I have to admit that I have never been in an organization that did it.
