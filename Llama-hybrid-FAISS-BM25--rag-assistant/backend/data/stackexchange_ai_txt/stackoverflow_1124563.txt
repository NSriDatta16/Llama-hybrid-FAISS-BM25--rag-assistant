[site]: stackoverflow
[post_id]: 1124563
[parent_id]: 
[tags]: 
Builds a Delegate from MethodInfo?

After googling and landing on SO and having read this other question Is it possible to build a correct Delegate from a MethodInfo if you didn't know the number or types of parameters at compile time? More on this: can this be done elegantly without the use of Reflection.Emit or type builders? This is sorta a bummer for me because Delegate.CreateDelegate requires me to specify the correct Delegate type as the first parameter or else it would throw exceptions or invoke an incorrect method. I'm building some ninja gears and this would helps a lot... Thanks! Here's a generic solution: /// /// Builds a Delegate instance from the supplied MethodInfo object and a target to invoke against. /// public static Delegate ToDelegate(MethodInfo mi, object target) { if (mi == null) throw new ArgumentNullException("mi"); Type delegateType; var typeArgs = mi.GetParameters() .Select(p => p.ParameterType) .ToList(); // builds a delegate type if (mi.ReturnType == typeof(void)) { delegateType = Expression.GetActionType(typeArgs.ToArray()); } else { typeArgs.Add(mi.ReturnType); delegateType = Expression.GetFuncType(typeArgs.ToArray()); } // creates a binded delegate if target is supplied var result = (target == null) ? Delegate.CreateDelegate(delegateType, mi) : Delegate.CreateDelegate(delegateType, target, mi); return result; } Note : I am building a Silverlight application that would replace a built-years-ago javascript application in which I have multiple Javascript interfaces that calls into the same Silverlight [ScriptableMember] method. All those legacy JS interfaces need to be supported as well as new interface for accessing new features, so something that automatically setups the JS interface and "delegates" the call to the right Silverlight method would helps speed up work a lot. I can't post code here, so that's the summary.
