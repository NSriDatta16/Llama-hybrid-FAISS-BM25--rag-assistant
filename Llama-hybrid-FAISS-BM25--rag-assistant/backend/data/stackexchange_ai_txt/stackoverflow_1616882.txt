[site]: stackoverflow
[post_id]: 1616882
[parent_id]: 1613963
[tags]: 
For 1, there are actually two places you can restrict the allowable types. The first is before method selection. If a symbol resolves to multiple methods, the compiler will try to eliminate as many as it can before it has to try and decide which one to use. Template constraints (D2 only) and specialisation work at this phase. For example: string insert(T)(string s1, T s2, uint position) if(isSomeChar!T) // D2 only -or- string insert(T : dchar)(string s1, T s2, uint position) // D1 or D2 The other is after method selection. This is where the compiler has already decided to use this specific method. You can do this with static asserts. Note that this doesn't cause the compiler to go "ooh; I should try looking for a different overload!"; it will simply give up. string insert(T)(string s1, T s2, uint position) { static if( !isSomeChar!(T) ) { pragma(msg, "Error: insert(T): T must be a character type."); static assert(false); } ... } One other thing: as far as I am aware, you **cannot* simply concatenate wchars and dchars into a string (which is an array of chars). You will first need to encode the character into a string. encode in the std.utf module should do the trick.
