[site]: stackoverflow
[post_id]: 5624049
[parent_id]: 5623842
[tags]: 
That code is tragic and screaming for refactoring. Just looking at it my eyes hurt. You are not encoding strings thus making this code vulnerable to XSS attacks. So as always in ASP.NET MVC you start with a view model: public class MyViewModel { public string DisplayUser { get; set; } public string ActiveIndicationsUserFullname { get; set; } public string Company { get; set; } [DisplayFormat(DataFormatString = "{0:dd-MM-yyyy}")] public DateTime TimeOpened { get; set; } public string TrxId { get; set; } } then you will have a controller action which will fetch the model from the repository and map it to the view model. You could use AutoMapper to simplify this mapping. It's in the mapping layer that you will transform everything to be ready to be directly used by the view so that this views doesn't resemble to a horrible tag soup: public ActionResult Foo() { // it's here that you should do the LINQ queries, etc ... // not in the view. Views are not supposed to fetch any data // and to be intelligent. Views should be dumb and only render // the preformatted data that they have been fed by the controller action IEnumerable model = ... IEnumerable viewModel = Mapper.Map , IEnumerable >(model); return View(viewModel); } next we get to the strongly typed view where we will be using Display Templates: DisplayUser ActiveIndicationsUserFullname Company TimeOpened TrxId and in the corresponding display template ( ~/Views/Shared/DisplayTemplates/MyViewModel.ascx ): " %> x.DisplayUser) %> x.ActiveIndicationsUserFullname) %> x.Company) %> x.TimeOpened) %> x.TrxId) %> " /> and finally you could use jquery to attach to the click of this button and fetch the name: $(function() { $('#myTable button').click(function() { var btn = $(this); alert(btn.attr('name')); }); });
