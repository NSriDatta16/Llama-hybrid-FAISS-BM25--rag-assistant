[site]: stackoverflow
[post_id]: 5460719
[parent_id]: 5459670
[tags]: 
You could write a little recursive method to deal with this : IEnumerable GetChildren ( string rootType, List parameters ) { return from p in parameters where p.ParentType == rootType let children = GetChildren ( p.Type, parameters ) select children.Count() == 0 ? new XElement ( p.Name, p.Type ) : new XElement ( p.Name, children ); } Each call builds up an Enumerable of XElements which contains the parameters whose parent has the passed in type. The select recurses into the method again finding the children for each Element. Note that this does assume that the data is correctly formed. If two parameters has eachother as a parent you will get a Stack Overflow. The magic is in the XElements class (Linq to Xml) that accepts enumerables of XElements to build up the tree like Xml structure. The first call, pass null (or use default parameters if using C# 4) as the rootType. Use like : void Main() { var parameters = new List { new Parameter {Name = "composite", Type = "CompositeType" }, new Parameter {Name = "isThisTest", Type = "boolean" }, new Parameter {Name = "BoolValue", Type = "boolean", ParentType = "CompositeType" }, new Parameter {Name = "StringValue", Type = "string", ParentType = "CompositeType" }, new Parameter {Name = "AnotherType", Type = "AnotherCompositeType", ParentType = "CompositeType" }, new Parameter {Name = "account", Type = "string", ParentType = "AnotherCompositeType" }, new Parameter {Name = "startdate", Type = "date", ParentType = "AnotherCompositeType" } }; foreach ( var r in GetChildren ( null, parameters ) ) { Console.WriteLine ( r ); } } Output : boolean string string date boolean Edit In response to your comment, XElement gives you two options for outputting as a string. ToString() will output formatted Xml. ToString(SaveOptions) allows you to specify formatted or unformatted output as well as ommitting duplicate namespaces. I'm sure you could probably adapt the solution to use StringBuilder if you really had to, although it probably wouldn't be as elegant..
