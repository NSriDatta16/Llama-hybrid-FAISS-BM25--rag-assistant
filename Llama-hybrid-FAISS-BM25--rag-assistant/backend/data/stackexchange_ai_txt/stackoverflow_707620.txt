[site]: stackoverflow
[post_id]: 707620
[parent_id]: 707559
[tags]: 
If for some reason you do decide to use the MS Ajax toolkit instead of something along the lines of jQuery or YUI, there are some things you can do to improve performance significantly. Enable caching on the script resource handler In your web.config: Script combining Use the CompositeScript feature of ASP.NET 3.5 to combine all the MS Ajax scripts into a single file, saving you HTTP requests (this framework generates a ton of them by default!). .... etc To figure out what scripts each of your pages is calling you can use the ScriptReferenceProfiler available on Codeplex. In terms of whether or not it's sensible using this framework, there are a few things to consider. As mentioned above, is your app public facing or for an intranet? If it's not being served to the internet, performance isn't as much of a priority. Is your app developed with webforms or MVC? If you're using webforms, the MS Ajax toolkit works reasonably harmoniously with that model, especially if you're into the whole RAD drag and drop style development. jQuery is a much better partner for MVC however, and Microsoft to some extent have acknowledged this themselves as they'll be bundling jQuery (and intellisense support) with upcoming versions of visual studio. MS Ajax is certainly a much heavier framework than many of the alternatives. Another criticism unrelated to performance is that it's something of a black box, and can be difficult to debug.
