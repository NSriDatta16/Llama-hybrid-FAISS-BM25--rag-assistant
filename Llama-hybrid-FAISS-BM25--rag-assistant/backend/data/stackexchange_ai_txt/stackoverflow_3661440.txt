[site]: stackoverflow
[post_id]: 3661440
[parent_id]: 3632726
[tags]: 
(Not quite sure how to interpret this question. Sounds like a quiz or something where you are looking for one single "right" answer from a textbook. I'm going to interpret the question as a more practical one, hence my advice below.) At least in the MS SQL world, discussion about a proper Primary Key is inevitably wrapped up in discussion about the proper clustered index for a table. The two don't have to be the same, but they are by default, and for many tables, making the two the same is often a good idea. For the purpose of our discussion here, its important to distinguish between the two: A PRIMARY KEY is a field or combination of fields that uniquely identify a row. A CLUSTERED INDEX is a field or combination of fields that represents the physical ordering of a table. (Again, I am speaking about MS SQL Server, not sure how other RDBS might handle this) Key to the remainder of my discussion is knowing that since SQL 7.0, the clustered index key is used as a row identifier for all non-clustered indexes . This means that many of the same criteria for choosing a good clustering key are the same as for choosing a good primary key. Let's first look at the criteria for a good clustered index (From Kimberly Tripp's excellent article ). A clustered index should be: Unique - otherwise useless as a row identifier for other indexes Narrow - this key is used in other indexes, so should be as narrow as possible Static - If key values change, then references become invalid and will need updating Ever-increasing - To reduce physical table fragmentation as new rows are added It is readily apparent the first 3 are also good criteria for a primary key. #4 is a bonus that will reduce table fragmentation as tables grow. A GUID as a primary key, as popular as that is, actually fails 2 of these criteria (Narrow and Ever-Increasing). As such, it is not recommended as a PK/Clustered index in most circumstances (see Kim's related article here )
