[site]: datascience
[post_id]: 33286
[parent_id]: 
[tags]: 
How to print a Confusion matrix from Random Forests in Python

I applied this random forest algorithm to predict a specific crime type. The example I took from this article here . import pandas as pd import numpy as np from sklearn.preprocessing import LabelEncoder import random from sklearn.ensemble import RandomForestClassifier from sklearn.ensemble import GradientBoostingClassifier import matplotlib import matplotlib.pyplot as plt import sklearn from scipy import stats from sklearn.cluster import KMeans import seaborn as sns # Using Skicit-learn to split data into training and testing sets from sklearn.model_selection import train_test_split # Import the model we are using from sklearn.ensemble import RandomForestRegressor import os os.environ["PATH"] += os.pathsep + 'C:/Program Files (x86)/Graphviz2.38/bin/' features = pd.read_csv('prueba2.csv',sep=';') print (features.head(5)) # Labels are the values we want to predict labels = np.array(features['target']) # Remove the labels from the features # axis 1 refers to the columns features= features.drop('target', axis = 1) # Saving feature names for later use feature_list = list(features.columns) # Convert to numpy array features = np.array(features) # Split the data into training and testing sets train_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size = 0.25, random_state = 42) baseline_preds = test_features[:, feature_list.index('Violent crime')] # Baseline errors, and display average baseline error baseline_errors = abs(baseline_preds - test_labels) print('Error: ', round(np.mean(baseline_errors), 2)) # Instantiate model with 1000 decision trees rf = RandomForestRegressor(n_estimators = 1000, random_state = 42) # Train the model on training data rf.fit(train_features, train_labels); # Use the forest's predict method on the test data predictions = rf.predict(test_features) # Calculate the absolute errors errors = abs(predictions - test_labels) # Print out the mean absolute error (mae) print('Promedio del error absoluto:', round(np.mean(errors), 2), ' Porcentaje.') # Calculate mean absolute percentage error (MAPE) mape = 100 * (errors / test_labels) # Calculate and display accuracy accuracy = 100 - np.mean(mape) print('Precision:', round(accuracy, 2), '%.') # Get numerical feature importances importances = list(rf.feature_importances_) # List of tuples with variable and importance feature_importances = [(feature, round(importance, 2)) for feature, importance in zip(feature_list, importances)] # Sort the feature importances by most important first feature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True) # Print out the feature and importances [print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances]; # Import tools needed for visualization from sklearn.tree import export_graphviz import pydot # Pull out one tree from the forest tree = rf.estimators_[5] # Import tools needed for visualization from sklearn.tree import export_graphviz import pydot # Pull out one tree from the forest tree = rf.estimators_[5] # Export the image to a dot file export_graphviz(tree, out_file = 'tree.dot', feature_names = feature_list, rounded = True, precision = 1) # Use dot file to create a graph (graph, ) = pydot.graph_from_dot_file('tree.dot') # Write graph to a png file graph.write_png('tree.png') So my question is: how can I add a Confusion matrix to measure accuracy? I tried this example from this here , but it doesn't work. The following error appears: Any advice?
