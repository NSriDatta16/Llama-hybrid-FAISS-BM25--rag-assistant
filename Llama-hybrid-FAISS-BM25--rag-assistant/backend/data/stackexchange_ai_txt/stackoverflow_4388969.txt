[site]: stackoverflow
[post_id]: 4388969
[parent_id]: 4386101
[tags]: 
My favorite RESTful Web App development framework is Restlet . It's a Java framework/library (it can be thought of as either) but it works well with Jython and JRuby , so if you prefer those languages you could still use it. I mostly use it with Groovy . I prefer Restlet because: Its API fully embraces and aligns with RESTful paradigms, so it encourages you to work RESTfully. For example, when a Router routes a request to a ServerResource , it creates a new instance of the ServerResource for every request. This encourages the implementation to be stateless. And there's a rich class hierarchy with all the concepts required to implement a RESTful web app: Client, Server, Protocol, VirtualHost, Request, Response, MediaType, Status, etc. Its API includes classes for writing both servers and clients, and they're very consistent and almost symmetrical. For example, there's a ServerResource class and a ClientResource class. ServerResource.get() and ClientResource.get() both return a Representation . The only difference is that you implement ServerResource.get() and generate a response representation, while you call ClientResource.get() and receive a response representation. The API is consistent with Java conventions. For example, if a request made with ClientResource.get() receives an error response such as 401, a ResourceException will be thrown. And if you're implementing a ServerResource and want to return an error status, you just throw a ResourceException (which is a RuntimeException , which is nice). Via its extension mechanism, it plays very nicely with a broad array of the best Java libraries around. Extensions are included for various HTTP client and server libraries, databases, templating libraries, security libs, data libs such as XML, JSON, OAuth, OData, etc., and even OSGI. Deployment is very flexible. You can embed a Restlet-powered API in an existing Java app, an existing Java Servlet app, or any standard Java Web App (Servlet) server. Or you can build a stand-alone server app with an embedded HTTP server such as Jetty â€” that's my preferred approach. And because it runs on the JVM, it runs on almost any hardware or OS. It's mature, reliable, responsibly maintained, steadily improving, and well supported both by the community and commercially. It's open source, and has very clear and well-structured code. The developers are happy to accept any contributions. I've submitted a few patches and had them committed to trunk quickly with no drama. Other options I'd suggest would be the Python microframework Bottle and the Ruby microframework Sinatra . They're both simple, straightforward, lightweight, and effective. And because they work with the WSGI and Rack stacks, there's a rich set of "middleware" modules which can easily be used with them.
