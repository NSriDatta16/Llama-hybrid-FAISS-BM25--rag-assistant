[site]: stackoverflow
[post_id]: 2141511
[parent_id]: 2136782
[tags]: 
To put another perspective on "mercy of the OS", most of the overhead in copying files lies with the operating system. A fragmented file will take more time to read than a defragmented file. There are no generic or standard C++ functions for detecting fragmented files. The fastest method in C++: std::ifstream in_file; std::ofstream out_file; out_file You can find more details by searching the web with the keywords " copy file rdbuf ". The above fragment leaves the copying up to the OS, but is portable across all platforms. By reading into the C++ i/o streams, you can set the size of the read buffer, or have it use your own buffer. Faster file copying requires platform specific functionality, such as DMA transfers. Using threads and multiple buffering, could speed this up; but C++ has no support for threads (there is a defacto standard, POSIX, which does support threads). One thread would read into buffers while another thread writes from the buffers.
