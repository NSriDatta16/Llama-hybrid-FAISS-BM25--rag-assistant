[site]: stackoverflow
[post_id]: 5453533
[parent_id]: 5452447
[tags]: 
Try it like this, i think i've never got a black border... If you want to use System.Drawing libraries: using (var sourceBmp = new Bitmap(sourcePath)) { decimal aspect = (decimal)sourceBmp.Width / (decimal)sourceBmp.Height; int newHeight = (int)(newWidth / aspect); using (var destinationBmp = new Bitmap(newWidth, newHeight)) { using (var destinationGfx = Graphics.FromImage(destinationBmp)) { destinationGfx.InterpolationMode = InterpolationMode.HighQualityBicubic; destinationGfx.DrawImage(sourceBmp, new Rectangle(0, 0, destinationBmp.Width, destinationBmp.Height)); destinationBmp.Save(destinationPath, ImageFormat.Jpeg); } } } or you can do the same with wpf, like this: using (var output = new FileStream(outputPath, FileMode.CreateNew, FileAccess.ReadWrite, FileShare.None)) { var imageDecoder = BitmapDecoder.Create(inputStream, BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.None); var imageFrame = imageDecoder.Frames[0]; decimal aspect = (decimal)imageFrame.Width / (decimal)imageFrame.Height; var height = (int)(newWidth / aspect); var imageResized = new TransformedBitmap(imageFrame,new ScaleTransform( newWidth / imageFrame.Width * Dpi / imageFrame.DpiX, height / imageFrame.Height * Dpi / imageFrame.DpiY, 0, 0)); var targetFrame = BitmapFrame.Create(imageResized); var targetEncoder = new JpegBitmapEncoder(); targetEncoder.Frames.Add(targetFrame); targetEncoder.QualityLevel = 80; targetEncoder.Save(output); } I recommend the WPF way. The compression & quality seems better...
