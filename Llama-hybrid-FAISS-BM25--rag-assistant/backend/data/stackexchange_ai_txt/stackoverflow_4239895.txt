[site]: stackoverflow
[post_id]: 4239895
[parent_id]: 
[tags]: 
Forward Declarations/Includes with Template Classes - "invalid use of incomplete type"

I am trying to make a template class where there is a function that takes in a specific instance of that template. I have made the following contrived example to illustrate this. Let's say, I have a world of Individuals marked with a templated (generic) type of Data. I have a specific Individual, called a King. And all Individuals should be able to Kneel before a King. Individuals, in general, can be marked as anything. Kings are marked by numbers (the 1st, 2nd king). The Error g++ -g -O2 -Wall -Wno-sign-compare -Iinclude -DHAVE_CONFIG_H -c -o Individual.o Individual.cpp g++ -g -O2 -Wall -Wno-sign-compare -Iinclude -DHAVE_CONFIG_H -c -o King.o King.cpp In file included from King.h:3, from King.cpp:2: Individual.h: In member function ‘void Individual ::KneelBeforeTheKing(King*)’: Individual.h:21: error: invalid use of incomplete type ‘struct King’ Individual.h:2: error: forward declaration of ‘struct King’ make: *** [King.o] Error 1 Individual.h (Individual.cpp is empty) //Individual.h #pragma once class King; #include "King.h" #include #include template class Individual { protected: Data d; public: void Breathe() { printf("Breathing...\n"); }; void KneelBeforeTheKing(King* king) { king->CommandToKneel(); printf("Kneeling...\n"); }; Individual(Data a_d):d(a_d){}; }; King.h //King.h #pragma once #include "Individual.h" #include #include class King : public Individual { protected: void CommandToKneel(); public: King(int a_d): Individual (a_d) { printf("I am the No. %d King\n", d); }; }; King.cpp //King.cpp #include "King.h" #include int main(int argc, char** argv) { Individual person("Townsperson"); King* king = new King(1); king->Breathe(); person.Breathe(); person.KneelBeforeTheKing(king); } void King::CommandToKneel() { printf("Kneel before me!\n"); } Makefile CXX = g++ CXXFLAGS = -g -O2 -Wall -Wno-sign-compare -Iinclude -DHAVE_CONFIG_H OBJS = Individual.o King.o test: $(OBJS) $(CXX) -o $@ $^ clean: rm -rf $(OBJS) test all: test
