[site]: stackoverflow
[post_id]: 813218
[parent_id]: 812961
[tags]: 
If you're referring to the concept of accessors, then the simple goal is to hide the underlying storage from arbitrary manipulation. The most extreme mechanism for this is function Foo(someValue) { this.getValue = function() { return someValue; } return this; } var myFoo = new Foo(5); /* We can read someValue through getValue(), but there is no mechanism * to modify it -- hurrah, we have achieved encapsulation! */ myFoo.getValue(); If you're referring to the actual JS getter/setter feature, eg. defineGetter / defineSetter , or { get Foo() { /* code */ } } , then it's worth noting that in most modern engines subsequent usage of those properties will be much much slower than it would otherwise be. eg. compare performance of var a = { getValue: function(){ return 5; }; } for (var i = 0; i vs. var a = { get value(){ return 5; }; } for (var i = 0; i
