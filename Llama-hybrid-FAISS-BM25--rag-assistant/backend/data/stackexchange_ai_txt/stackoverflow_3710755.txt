[site]: stackoverflow
[post_id]: 3710755
[parent_id]: 3710584
[tags]: 
To answer your second question, no, storing the encryption key in the executable, even obfuscated, is not secure at all. It'll keep casual prying eyes out, but not those with an hour to devote to walking through your decompiled source. Think hard about where to store your encryption key - it looks like that'll be your weak point. And yes, this is a hard problem to solve. The most secure way to store encryption keys is not to - require the user to type a password, or require external hardware, like a key fob. If you're encrypting contents intended to be read only on a single machine or by a single domain user, consider the Data Protection API (DPAPI) . It takes the encryption key out of your hands - it uses the user's Windows credentials as the key. I've got a little more detail in another answer here: Persistent storage of encrypted data using .Net Regarding your second edit ( is DataProtectionScope.LocalMachine good enough? ); this MSDN blog entry summarizes it well: Setting a scope of DataProtectionScope.CurrentUser encrypts the data so that only the currently logged on user can decrypt it. Switching to DataProtectionScope.LocalMachine allows any process running on the current machine to decrypt the data. This could be useful in a server scenario, where there are no untrusted logins to the machine, but for a general purpose workstation using LocalMachine encryption is almost equivalent to using no encryption at all (since anybody logged in can get at the data).
