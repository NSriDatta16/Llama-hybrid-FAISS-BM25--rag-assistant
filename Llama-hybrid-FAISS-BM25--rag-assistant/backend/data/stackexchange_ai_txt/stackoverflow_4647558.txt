[site]: stackoverflow
[post_id]: 4647558
[parent_id]: 2807613
[tags]: 
It seems I've finally caught the templates idea :) Templates should be 'nested' one into another hierarchically. The following example works just fine: TemplatesTest.g: grammar TemplatesTest; options { output=template; language=CSharp2; } ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')* ; INT : '0'..'9'+ ; COMMENT : '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;} | '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;} ; WS : ( ' ' | '\t' | '\r' | '\n' ) {$channel=HIDDEN;} ; STRING : '\'' ( ESC_SEQ | ~('\\'|'\'') )* '\'' ; fragment HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ; fragment ESC_SEQ : '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\') | UNICODE_ESC | OCTAL_ESC ; fragment OCTAL_ESC : '\\' ('0'..'3') ('0'..'7') ('0'..'7') | '\\' ('0'..'7') ('0'..'7') | '\\' ('0'..'7') ; fragment UNICODE_ESC : '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT ; doc : (e+=expr)+ -> doc(expressions={$e}) ; expr : ID '=' INT -> expression(id={$ID.text}, value={$INT.text}) ; TemplatesTest.stg: group TemplatesTest; doc(expressions) ::= end >> expression(id, value) ::= := ; >> Test C# code: var lexer = new TemplatesTestLexer(new ANTLRFileStream("sample.txt")); var parser = new TemplatesTestParser(new CommonTokenStream(lexer)); using (var reader = new StreamReader("TemplatesTest.stg")) { parser.TemplateLib = new StringTemplateGroup(reader); } var doc = parser.doc(); Console.WriteLine(doc.Template); Sample input: a = 5 b = 6 c = 7 Output is: srart expressions a := 5; b := 6; c := 7; end
