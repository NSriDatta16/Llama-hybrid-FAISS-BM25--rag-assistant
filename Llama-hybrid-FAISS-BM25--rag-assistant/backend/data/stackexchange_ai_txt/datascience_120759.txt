[site]: datascience
[post_id]: 120759
[parent_id]: 
[tags]: 
Validating ML regression model and predictions

I have a years worth of electricity power data on 15 minute intervals joined with weather data and time-of-week one hot dummy variables. Is using train/test split an okay approach for validating the model? Am attempting to predict electricity with explainer variables like weather and time-of-week dummies. For starters, I weeded out a bunch of dummy variables variables with OLS regression in statsmodels and then attempted to fit the model with XG Boost. Would anyone have some tips for a better approach on fitting time series data, validate the ML model, and then attempting to use regression to predict electricity? Some of my Python code for the ML training process: # shuffle the DataFrame rows df2 = df2.sample(frac=1) train, test = train_test_split(df2, test_size=0.2) regressor = XGBRegressor() X_train = np.array(train.drop(['total_main_kw'],1)) y_train = np.array(train['total_main_kw']) X_test = np.array(test.drop(['total_main_kw'],1)) y_test = np.array(test['total_main_kw']) regressor.fit(X_train, y_train) predicted_kw_xgboost = regressor.predict(X_test) y_test_df = pd.DataFrame({'test_power':y_test}) y_test_df['predicted_kw_xgboost'] = predicted_kw_xgboost y_test_df.plot(figsize=(25,8)) Will plot trained model predicting the test dataset but I have not done any verification if the data is stationary or not: mse = mean_squared_error(y_test_df['test_power'], y_test_df['predicted_kw_xgboost']) print("MEAN SQUARED ERROR: ",mse) print("ROOT MEAN SQUARED ERROR: ",round(np.sqrt(mse),3)," IN kW") MEAN SQUARED ERROR: 4.188126272978789 ROOT MEAN SQUARED ERROR: 2.046 IN kW Thanks any tips still learning in this area..
