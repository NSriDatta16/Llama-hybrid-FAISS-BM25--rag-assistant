[site]: stackoverflow
[post_id]: 722228
[parent_id]: 722204
[tags]: 
Images Images are basically memory dumps. Typically a Lisp development system starts a runtime plus an image. The user then makes changes and later can write a new image. Sometimes this is a feature used by the developer, sometimes it's also used during the development of the Lisp system itself. Many Lisp systems are using 'images'. That's where Smalltalk got it from, possibly - since Lisp had images already long before Smalltalk existed. McCarthy's Lisp 1.5 in the early 60s used images. The knowledge about Lisp implementation techniques was transferred to Xerox. L Peter Deutsch for example worked in the 60s on Lisp implementations - in the early 60s as a young kid he wrote his first Lisp. In the 70s he worked at Xerox and there especially on Smalltalk's virtual machine implementation. Later in the 70s/80s, the OS on the Lisp Machines were basically Lisp images (often called worlds ) (even hierarchical images with incremental delta images). Lisp Machines also store development environment state (example: which code is loaded from where in what version written by whom) in an image, but the MIT variants of the Lisp Machine usually stored the source code itself in files. Managed source code If you ask which language uses a similar way to organize and manage source code (i.e. not in files in project directories), then Xerox Interlisp did that. Apple's Dylan did that. Some DB development tools might do that.
