[site]: stackoverflow
[post_id]: 4765583
[parent_id]: 4764249
[tags]: 
-532462766 == 0xe0434352. The last three hex pairs spell "CCR", a common trick that Microsoft programmers use to try to come up with an easily recognizable exception code. The exact meaning is quite mysterious, beyond it being commonly associated with managed code and seemingly being very low level in a sub-system that doesn't normally fail to produce a meaningful managed exception. There is an excellent candidate reason for that mysterious exception, your EnumResources pinvoke declaration is wrong. The 2nd argument is IntPtr, not int. That has some odds of going kaboom on a 64-bit operating system. Please post back if you ever figure out what CCR means. using System; using System.ComponentModel; using System.Runtime.InteropServices; using System.Diagnostics; class Program { static void Main(string[] args) { try { IntPtr module = LoadLibraryEx(@"C:\windows\system32\user32.dll", IntPtr.Zero, 2); if (module == IntPtr.Zero) throw new Win32Exception(); if (!EnumResourceNames(module, (IntPtr)3, new EnumResNameProc(ListCallback), IntPtr.Zero)) throw new Win32Exception(); } catch (Win32Exception ex) { Console.WriteLine(ex.Message); } Console.ReadLine(); } static bool ListCallback(IntPtr hModule, IntPtr type, IntPtr name, IntPtr lp) { long idorname = (long)name; if (idorname >> 16 == 0) Console.WriteLine("#{0}", idorname); else Console.WriteLine(Marshal.PtrToStringAnsi(name)); return true; } public delegate bool EnumResNameProc(IntPtr hModule, IntPtr type, IntPtr name, IntPtr lp); [DllImport("kernel32.dll", SetLastError = true)] public extern static bool EnumResourceNames(IntPtr hModule, IntPtr type, EnumResNameProc lpEnumFunc, IntPtr lParam); [DllImport("kernel32.dll", SetLastError = true)] public extern static IntPtr LoadLibraryEx(string lpFileName, IntPtr hFile, int dwFlags); }
