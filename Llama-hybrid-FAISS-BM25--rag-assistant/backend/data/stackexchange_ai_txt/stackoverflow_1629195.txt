[site]: stackoverflow
[post_id]: 1629195
[parent_id]: 1613569
[tags]: 
It is hard to answer this fully without sample data and actual types, but I would refactor it like below. From the original example, I'm assuming we don't want to mess with the constructors of the entities ( Agent etc), and that we want to retain the separate " TreeNode " model, putting our entities inside the tree (rather than changing the entities to model things as associated collections). I've also assumed that we can take more liberties with TreeNode than we can with the entities, so I've introduced a constructor that accepts IEnumerable , since this allows use with LINQ sub-queries: XElement ops = XElement.Load(@"c:\temp\exp.xml"); Tree domain = new Tree ( from cell in ops.Elements("cell") select new TreeNode ( new Cell( (string)cell.Attribute("name"), (string)cell.Attribute("name"), null ), from agent in cell.Elements("agent") select new TreeNode ( new Agent( (string)agent.Attribute("name"), (string)agent.Attribute("name"), null ), from na in agent.Elements("node-agent") select new TreeNode ( new NodeAgent( (string)na.Attribute("name"), (string)na.Attribute("name"), null ) ) ) ) ); With framework code below: using System.Collections.Generic; using System.Linq; using System.Xml.Linq; class Tree { public TreeNode Root { get; set; } public Tree() { } public Tree(IEnumerable > children) { Root = new TreeNode (children); } } class TreeNode { private List > children; public IList > Children { get { if (children == null) children = new List >(); return children; } } private readonly T value; public TreeNode() { } public TreeNode(T value) { this.value = value; } public TreeNode(T value, IEnumerable > children) : this(children) { this.value = value; } public TreeNode(IEnumerable > children) { children = new List >(children); } } class Element { } class Cell : Element { public Cell(string x, string y, string z) { } } class Agent : Element { public Agent(string x, string y, string z) { } } class NodeAgent : Element { public NodeAgent(string x, string y, string z) { } } static class Program { static void Main() { XElement ops = XElement.Load(@"c:\temp\exp.xml"); Tree domain = new Tree ( from cell in ops.Elements("cell") select new TreeNode ( new Cell( (string)cell.Attribute("name"), (string)cell.Attribute("name"), null ), from agent in cell.Elements("agent") select new TreeNode ( new Agent( (string)agent.Attribute("name"), (string)agent.Attribute("name"), null ), from na in agent.Elements("node-agent") select new TreeNode ( new NodeAgent( (string)na.Attribute("name"), (string)na.Attribute("name"), null ) ) ) ) ); } }
