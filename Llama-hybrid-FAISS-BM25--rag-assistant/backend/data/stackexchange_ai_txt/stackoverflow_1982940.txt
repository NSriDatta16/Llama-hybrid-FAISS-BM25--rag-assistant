[site]: stackoverflow
[post_id]: 1982940
[parent_id]: 1953759
[tags]: 
I agree with Jeff Beck's comments and also noticed the following. You said your target audience is non-technical and all of the solutions above are going to involve learning HTML and a complex template language, possibly a non-starter for your audience. The solutions above also seem to need more complexity than your problem requires. MooTools, Dojo, etc. seem like overkill. XForms and XSLT even more so. Yes they'll work and give you a lot of extra functionality, but do you need the level of complexity and the issues of debugging/maintainability/training that go with those extra features? Your regular teacher or business user probably has a basic understanding of how to enter and save files in Excel. If you can teach them how to save in CSV format and upload the form, or even better yet install a macro that will save to CSV and post it to your web site, then that's likely the only training they'll need. To get the semantics you can add a bit more training and have the first row of the report be the column names and the 2nd row be the column type. It's not elegant, but it is easy for possibly tech-challenged users to adopt, as Jeff points out. On the server side I'd recommend the following stack: Web server => node.js (perhaps using Chain - github.com/hassox/chain) Data store => Redis (and node-redis) Templating => Haml-js (github.com/creationix/haml-js) CSV parsing => See http://purbayubudi.wordpress.com/2008/11/09/csv-parser-using-javascript/ and make sure to use the fixed version that's in the comments (for quoted commas). Your more tech savvy users can customize the HAML without you compromising security, and HAML is pretty straightforward with a little training: this HAML... %body .profile .left.column #date= print_date() #address= current_user.address .right.column #email= current_user.email #bio= current_user.bio produces... Thursday, October 8, 2009 Richardson, TX tim@creationix.com Experienced software professional...
