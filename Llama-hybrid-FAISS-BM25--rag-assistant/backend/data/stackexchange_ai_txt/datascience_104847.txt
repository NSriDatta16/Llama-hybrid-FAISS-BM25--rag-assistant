[site]: datascience
[post_id]: 104847
[parent_id]: 
[tags]: 
How to deal with imbalanced data with train and test data

I am working with the Loan problem whether Loan Status: Defaulter or Non-Defaulters.In this problem, my classes are unbalanced 90% of classes are Defaulter, and 10% of them Non-Defaulter. Then I tried oversampling method. here is my code: from imblearn.over_sampling import RandomOverSampler ros = RandomOverSampler(0.5) X,y=ros.fit_resample(X, y) Then I used a random forest classifier after I am trying to predict my test data. I not some error. Here is my code. pred=clf.predict(test_df) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) /tmp/ipykernel_12673/2789171072.py in ----> 1 pred=clf.predict(test_df) ~/miniconda3/lib/python3.8/site-packages/sklearn/ensemble/_forest.py in predict(self, X) 796 The predicted classes. 797 """ --> 798 proba = self.predict_proba(X) 799 800 if self.n_outputs_ == 1: ~/miniconda3/lib/python3.8/site-packages/sklearn/ensemble/_forest.py in predict_proba(self, X) 838 check_is_fitted(self) 839 # Check data --> 840 X = self._validate_X_predict(X) 841 842 # Assign chunk of trees to jobs ~/miniconda3/lib/python3.8/site-packages/sklearn/ensemble/_forest.py in _validate_X_predict(self, X) 567 Validate X whenever one tries to predict, apply, predict_proba.""" 568 check_is_fitted(self) --> 569 X = self._validate_data(X, dtype=DTYPE, accept_sparse="csr", reset=False) 570 if issparse(X) and (X.indices.dtype != np.intc or X.indptr.dtype != np.intc): 571 raise ValueError("No support for np.int64 index based sparse matrices") ~/miniconda3/lib/python3.8/site-packages/sklearn/base.py in _validate_data(self, X, y, reset, validate_separately, **check_params) 578 579 if not no_val_X and check_params.get("ensure_2d", True): --> 580 self._check_n_features(X, reset=reset) 581 582 return out what is the issue here? and how to deal with test data when we deal with imbalanced dataset and also please share with me what are the good techniques to deal with imbalanced classes.
