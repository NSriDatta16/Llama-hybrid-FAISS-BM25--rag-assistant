[site]: stackoverflow
[post_id]: 4594526
[parent_id]: 
[tags]: 
The right way to expose a complex short-lived object

I am developing a Darwinian evolution simulation. For performance reasons, it's written in C++. The sim is represented by an instance of World. The animals are represented by instances of Animal, a fairly complicated object. World has two important methods: animal_at(int i) and evolve(int n). animal_at returns a non-null raw pointer to the instance of Animal that represents the i-th animal. evolve advances the simulation possibly invalidating any pointer returned by animal_at . I want to make the sim and the animals easily accessible from outside. I have python-specific bindings, but i'm considering learning CORBA or Ice to implement a more generic interface. The problem is how I should expose the animals. I have two ideas, none of which feels satisfactory: 1) Rewrite the code slightly to use shared_ptr instead of a raw ptr and use a middleware that understands shared_ptr semantics. 2) Generate a "deep lazy proxy" that has the same structure as Animal. Its members would be proxies to members of Animal, recursively. animal_at would be actually called in the last moment before referring to the actual data -- the pointer would be used and immediately tossed away. This would implement the "last moment" semantics. I dislike 1) because I would have to introduce a "zombie" state of the object, which looks inelegant to me. I dislike 2) because the sole purpose of the proxy is to implement the "last moment" semantics. I am looking for an automatic non-intrusive way (using code-generation) to achieve this, because I don't want to obscure the meaning of the original code. Is there any "official" name for what I call "last moment" semantics?
