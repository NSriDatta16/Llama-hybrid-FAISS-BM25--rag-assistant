[site]: stackoverflow
[post_id]: 966899
[parent_id]: 966800
[tags]: 
There is no such thing as a silver bullet. A single metric like that is useless by itself. For instance, I have my own class library. Currently, the following statistics are true: Total lines: 252.682 Code lines: 127.323 Comments: 99.538 Empty lines: 25.821 Let's assume I don't write any comments at all, that is, 127.323 lines of code. With your ratio, that code library would take me around 10610 days to write. That's 29 years. I certainly didn't spend 29 years writing that code, since it's all C#, and C# hasn't been around that long. Now, you can argue that the code isn't all that good, since obviously I must've surpassed your 12 lines a day metric, and yes, I'll agree to that, but if I'm to bring the timeline down to when 1.0 was released (and I didn't start actually making it until 2.0 was released), which is 2002-02-13, about 2600 days, the average is 48 lines of code a day. All of those lines of code are good? Heck no. But down to 12 lines of code a day? Heck no. Everything depends. You can have a top notch programmer churning out code in the order of thousands of lines a day, and a medium programmer churning out code in the order of hundreds of lines a day, and the quality is the same. And yes, there will be bugs. The total you want is the balance. Amount of code changed, versus the number of bugs found, versus the complexity of the code, versus the hardship of fixing those bugs.
