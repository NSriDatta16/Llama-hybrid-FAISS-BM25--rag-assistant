[site]: stackoverflow
[post_id]: 4019934
[parent_id]: 4019770
[tags]: 
To solve your problem this way you should use #include "Test1.cpp" in Test2.cpp instead of including Test1.h and then only call g++ with Test2.cpp. That way you'll be compiling just one compilation unit consisting of all the source from both Test1.cpp and Test2.cpp. However - that's a pretty bad idea, so don't do that. What you should do instead is organize your utility functions into individual files, say, initially just in one single file Common.cpp with header file Common.h to keep things really simple. Then you compile and link those files into each executable you're going to make. That's the right way to do it, it's much easier to understand and work with, and using several source-files doesn't make you apps any bigger. In your case, having moved your common methods into say Common.cpp/h, you'll then do something like this: g++ Test1.cpp Common.cpp # to build Test1.exe g++ Test2.cpp Common.cpp # to build Test2.exe
