[site]: stackoverflow
[post_id]: 2647758
[parent_id]: 2647472
[tags]: 
The safest way to handle date/time correctly is to store everything as UTC and display it in local time. All date/time math should be done in UTC as Guffa suggests. Store in UTC and convert to local time on the fly as you display it. How to make a Time Zone aware date/time Microsoft has an article on how to encapsulate a DateTime and TimeZoneInfo variable into a structure here . Here's Microsoft's sample structure with 1 property added to easily get local time. This needs more work to be a fully useful, but it's a good start. public struct TimeZoneTime { public TimeZoneInfo TimeZone; public DateTimeOffset Time; public TimeZoneTime(DateTimeOffset time) { this.TimeZone = TimeZone.Local; this.Time = time; } public TimeZoneTime(TimeZoneInfo tz, DateTimeOffset time) { if (tz == null) throw new ArgumentNullException("The time zone cannot be a null reference."); this.TimeZone = tz; this.Time = time; } public TimeZoneTime AddTime(TimeSpan interval) { // Convert time to UTC DateTimeOffset utcTime = TimeZoneInfo.ConvertTime(this.Time, TimeZoneInfo.Utc); // Add time interval to time utcTime = utcTime.Add(interval); // Convert time back to time in time zone return new TimeZoneTime(this.TimeZone, TimeZoneInfo.ConvertTime(utcTime, this.TimeZone)); } public DateTime LocalDate { get { return Time.ToOffset(TimeZone); } } } Your Scenario Yes, use either the mail object's ReceivedTime or SentOn and convert it to UTC for storage & calculations. This is much less complex than the samples above. Message msg = new Message(); DateTime received = msg.ReceivedTime.ToUniversalTime(); received.AddDays(7); Console.WriteLine(received.ToLocalTime());
