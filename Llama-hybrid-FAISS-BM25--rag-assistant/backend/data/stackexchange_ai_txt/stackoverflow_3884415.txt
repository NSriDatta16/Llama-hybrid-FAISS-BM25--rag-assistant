[site]: stackoverflow
[post_id]: 3884415
[parent_id]: 2280049
[tags]: 
This is not actually a bubbling issue. I've seen this before. Even when you tell the event that you handled it, it continues to keep bubbling up. Except that I don't think that it's actually bubbling up, but rather firing the node above's own double click event. I could be totally wrong on that. But in either case, it's important to know that saying: e.handled = true; Does nothing to stop this from happening. One way to prevent this behavior is to note that when you are double clicking, you are first single clicking and that the selected event should fire first. So while you can't stop the Double Click events from occurring, you should be able to check inside the handler to see whether the event logic should run. This example leverages that: TreeViewItem selectedNode; private void MouseDoubleClickEventHandler(object sender, MouseButtonEventArgs e) { if(selectedNode = e.Source) { //do event logic } } private void TreeViewSelectedEventHandler(object sender, RoutedEventArgs e) { selectedNode = (TreeViewItem)e.Source; } Sometimes however you have situations where the nodes are being selected by other beans than through the TreeView SelectedItemChanged event. In that case you can do something like this. If you happen to have a TreeView with a single declared top node, you can give that node a specific name and then do something like this: bool TreeViewItemDoubleClickhandled; private void MouseDoubleClickEventHandler(object sender, MouseButtonEventArgs e) { if (!TreeViewItemDoubleClickhandled) { //do logic here TreeViewItemDoubleClickhandled = true; } if (e.Source == tviLoadTreeTop) { TreeViewItemDoubleClickhandled = false; } e.Handled = true; } Regardless of the method you use, the important thing is to note that for whatever reason with TreeViewItem double clicking that you can't stop the events from firing up the tree. At least I haven't found a way.
