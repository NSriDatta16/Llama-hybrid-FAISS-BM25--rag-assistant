[site]: stackoverflow
[post_id]: 2016476
[parent_id]: 1999765
[tags]: 
Here's some code to get you the essential functionality: making the WMI query and retrieving the Version string. Note that this sample doesn't bother with error checking -- and with all these COM calls, you'll need many lines of it. For examples see Uros' link, and also Example: Getting WMI Data from the Local Computer #include #include // For ATL autorelease classes (CComBSTR, CComPtr) #include // For WMI #pragma comment(lib, "wbemuuid.lib") // Link to WMI library. (Can do in library includes instead) std::string GetOsVersionString() { HRESULT hr = ::CoInitializeSecurity(NULL, -1, NULL, NULL, RPC_C_AUTHN_LEVEL_DEFAULT, RPC_C_IMP_LEVEL_IMPERSONATE, NULL, EOAC_NONE, NULL); CComPtr pWbemLocator; hr = pWbemLocator.CoCreateInstance(CLSID_WbemLocator); CComPtr pWbemServices; hr = pWbemLocator->ConnectServer(CComBSTR(L"root\\cimv2"), NULL, NULL, 0, NULL, 0, NULL, &pWbemServices); CComPtr pEnum; CComBSTR cbsQuery = L"Select Version from Win32_OperatingSystem"; hr = pWbemServices->ExecQuery(CComBSTR("WQL"), cbsQuery, WBEM_FLAG_FORWARD_ONLY, NULL, &pEnum); ULONG uObjectCount = 0; CComPtr pWmiObject; hr = pEnum->Next(WBEM_INFINITE, 1, &pWmiObject, &uObjectCount); CComVariant cvtVersion; hr = pWmiObject->Get(L"Version", 0, &cvtVersion, 0, 0); std::string sOsVersion = CW2A(cvtVersion.bstrVal); return sOsVersion; } int _tmain(int argc, _TCHAR* argv[]) { HRESULT hr = ::CoInitializeEx(NULL, COINIT_MULTITHREADED); std::string sOsVersion = GetOsVersionString(); ::CoUninitialize(); return 0; }
