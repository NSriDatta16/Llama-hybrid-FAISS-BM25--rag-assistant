[site]: stackoverflow
[post_id]: 1207027
[parent_id]: 1206829
[tags]: 
How do I increase my code understanding/reading skills? Read read read. Learn from your mistakes. Review answers on SO and elsewhere. When you can think back on a piece of code you wrote and go "aha! I should've done xyz instead!" then you're learning. Read a good book for your language of choice, get beyond the basics and understand more advanced concepts. Then, apart from reading: write write write! Coding is like math: you won't fully grock it without actually solving problems. Glancing at a math problem's solution is different than getting out a blank piece of paper and solving it yourself. If you can, do some pair programming too to see how others code and bounce ideas around. Also will it improve the code quality I will write? See above. As you progress you should get more efficient. It won't happen by reading a book on design patterns. It will happen by solving real world problems and understanding why what you read works. Is there better code notation than Hungarian one? It depends. Generally I avoid them and use descriptive names. The one exception where I might use Hungarian type of notations is for UI elements such as Windows Forms or ASP.NET controls, for example: using btn as a prefix for a Submit button ( btnSubmit ), txt for a TextBox ( txtFirstName ), and so on but it differs from project to project depending on approach and patterns utilized. With regards to UI elements, some people like to keep things alphabetical and may append the control type at the end, so the previous examples become submitButton and firstNameTextBox, respectively. In Windows Forms many people name forms as frmMain, which is Hungarian, while others prefer naming it based on the application name or form purpose, such as MainForm, ReportForm, etc. EDIT: be sure to check out the difference between Apps Hungarian and Systems Hungarian as mentioned by @Tobias Langner in a comment to an earlier response. Pascal Case is generally used for method names, classes, and properties, where the first letter of each word is capitalized. For local variables Camel Case is typically used, where the first letter of the first word is lowercase and subsequent words have their first letters capitalized. You can check out the naming conventions and more from the .NET Framework Design Guidelines. There is a book and some of it is on MSDN . And is there any really good books for C++ design patterns(or the language doesn't matter?)? Design patterns should be applicable to any language. Once you understand the concept and the reasoning behind that pattern's usefulness you should be able to apply it in your language of choice. Of course, don't approach everything with a "written in stone" attitude; the pattern is the goal, the implementation might differ slightly between languages depending on language features available to you. Take the Decorator pattern for example, and see how C# extension methods allow it to be implemented differently than without it . Design Pattern books: Head First Design Patterns - good beginner intro using Java but code is available for C++ and C# as a download (see "book code and downloads" section on the book's site ) Design Patterns: Elements of Reusable Object-Oriented Software - classic gang of four (GOF) Patterns of Enterprise Application Architecture - Martin Fowler If you're looking for best practices for quality coding in C++ and C# then look for the " Effective C++ " and " More Effective C++ " books (by Scott Meyers) and " Effective C# " and " More Effective C# " books (by Bill Wagner). They won't hold your hand along the way though, so you should have an understanding of the language in general. There are other books in the "Effective" series so make sure you see what's available for your languages. I'm sure you can do a search here for other recommended reading so I'll stop here. EDIT: added more details under the Hungarian Notation question.
