[site]: stackoverflow
[post_id]: 4961209
[parent_id]: 4929753
[tags]: 
The "screen.scss" and "print.scss" files are nothing magical. These are just example filenames given to the output which you can link from your HTML, but you don't have to: just delete them and create your own files if you prefer, or add your own styles to them. The intent with these 2 files is to keep the style concerns organized separately: you could add a "mobile.scss" and then link all these in your HTML, or import them together into one master file under @media blocks. I can't use mixins in my HTML. Mixins don't apply to your HTML. They are a helpful technique used for writing your SCSS source code: the compiled CSS output or the HTML doesn't know anything about them. You should be using mixins to take advantage of Sass. I have researched SASS and Blueprint seperately It's important to understand what the Blueprint classes do first, but when you use Compass there are different approaches for how you apply frameworks like Blueprint: 1. Use Blueprint's original non-semantic class names throughout your HTML This is not considered best-practice, but it's a way to get started especially when wireframing/scaffolding: screen.scss @import "blueprint"; // This outputs Blueprint's classes into your stylesheet: @include blueprint; #sidebar { background: $blue; } #main { background: $yellow; } screen.css (compiled) .column { float: ... } .span-6 { width: ... } .span-12 {width: ... } /* ...etc., all of Blueprint's classes ... */ #sidebar { background: #ccf; } #main { background: #ffc; } index.html sidebar content main content The result is the same as using Blueprint without Sass/Compass. Your HTML would contain the presentational classes, which are really not too different from just using style="width:120px" on your elements: it's just done using classes instead. 2. Use Blueprint as mixins into your own semantic class names: screen.scss @import "blueprint"; // Do not output Blueprint's classes into your stylesheet. // Instead, write your own classes and mixin the functionality: #sidebar { @extend .column; @include span(6); background: $blue; } #main { @extend .column; @include span(12); background: $yellow; } screen.css (compiled) .column, #sidebar, #main { float: left; ... } #sidebar { width: 240px; background: #ccf; } #main { width: 480px; background: #ffc; } index.html sidebar content main content As you can see, the second method moves Blueprint's presentation logic out of the HTML and into the stylesheet. The judicious use of @extend (instead of @include ) is an optimization that lets you group common styles together, e.g. all the elements that are "columns" are defined once as a list of selectors; only their different widths are included directly into each element.
