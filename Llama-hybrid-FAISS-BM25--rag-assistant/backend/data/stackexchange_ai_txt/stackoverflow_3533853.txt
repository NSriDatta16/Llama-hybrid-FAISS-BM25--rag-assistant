[site]: stackoverflow
[post_id]: 3533853
[parent_id]: 3171919
[tags]: 
I know this is old, but it came up as unanswered. Essentially: The OS uses a separate address spaces for every process. Retrieving information from any other address space requires a system call or page fault. **(see below) The DBMS is a process with its own address space. The OS buffer pool Stonebraker describes is in the kernel address space. So ... to get data from the kernel address space to the DBMS's address space, a system call or page fault is unavoidable. You're correct that accessing data from the OS buffer pool manager is no more expensive than a normal read() call. (In fact, it's done with a normal read call.) However, Stonebraker is not talking about that. He's specifically discussing the caching needs of DBMSes, after the data has been read from the disk and is present in RAM. In essence, he's saying that the OS's buffer pool cache is too slow for the DBMS to use because it's stored in a different address space. He's suggesting using a local cache in the same process (and therefore same address space), which can give you a significant speedup for applications like DBMSes which hit the cache heavily, because it will eliminate that syscall overhead. Here's the exact paragraph where he discusses using a local cache in the same process: However, many DBMSs including INGRES [20] and System R [4] choose to put a DBMS managed buffer pool in user space to reduce overhead. Hence, each of these systems has gone to the trouble of constructing its own buffer pool manager to enhance performance. He also mentions multi-core issues in the excerpt you quote above. Similar effects apply here, because if you can have just one cache per core, you may be able to avoid the slowdowns from CPU cache flushes when multiple CPUs are reading and writing the same data. ** BTW, I believe Stonebraker's 1981 paper is actually pre-mmap. He mentions it as future work. "The trend toward providing the file system as a part of shared virtual memory (e.g., Pilot [16]) may provide a solution to this problem."
