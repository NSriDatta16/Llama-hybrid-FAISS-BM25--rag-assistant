[site]: datascience
[post_id]: 113258
[parent_id]: 113180
[tags]: 
One option would be to simplify the problem and build a solution for the simpler version. Then evolve the framing of the problem and associated solutions towards complexity. If you organize all your features into a tidy dataframe where the columns are features and the rows of individual instances, the data is in a format more amenable to classic machine learning. In this framing, since time will be shattered into features the data won't be organized for time-series modeling. A simpler way is to predict the following targets: start time, duration (start time plus duration = stop time), and in-service/not in-service. Build a separate model for each of the three targets. Again, start with more straightforward algorithms like tree-based models. After building simple models, you'll have something that could be useful for the business. The model will be capable of predictions that could be used for planning. An added bonus is you'll have learned more about the domain and which features are most predictive. You can build more complex and (hopefully) better models later. Given the continuous and dynamic nature of the problem, Kalman filtering modeling would probably be an improvement over classical machine learning. The current cutting edge of complexity might be reinforcement learning (RL). RL could be useful because there is a time component and the vehicles could be modeled as agents.
