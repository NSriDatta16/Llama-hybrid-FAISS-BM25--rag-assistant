[site]: stackoverflow
[post_id]: 5241890
[parent_id]: 5171931
[tags]: 
So, if I understand you correctly: You have a rolling 50-70 million records in your logging data store. The read latency is not critical (sub-second) as you check it daily, based on triggers such as site anomalies or customer requests. Your logging database and OLTP database currently reside on the same server. Based on your profile and your answers above, I'm going to guess that it's MySQL, not MSSQL that you're using. I also assume that since you cap your logging database at seven days, backup is not something that you care about (as much) with it. A couple things about non-relational solutions and document-oriented stores in particular: 1. They don't require you to be Facebook or Twitter. Setup for both MongoDB and CouchDB does not have to be an enterprise undertaking. 2. They are well-suited to storing log and event data. 3. Both CouchDB and MongoDB will take advantage of as much memory as is available to cache their indexes. 4. MongoDB offers a "capped" collection, which sets size limits on the data stored and then rolls of data rows/messages as they age out. This seems particularly suited to your needs, were you to implement MongoDB, as it doesn't require you to continually run heavy deletes against your relational database. 5. The query interface is materially different from the SQL you are used to. Both can take JSON-based query documents and bring back results. MongoDB's function library is easier for a relational developer to pick up, IMHO. That said, here's the rub: 1. If you aren't going to set it up on a different machine, you won't solve the load issue. Non-relational stores are not as efficient with disk or memory as your MySQL instance is. 2. Both store data in JSON. If your logging component doesn't speak JSON, you'll need to code that. 3. If you rely on regex, Couch won't do it. Mongo will. Mindas is right when he says that non-relational stores achieve their scale by ripping out the foundational aspects of relational stores: ACID transactions, strongly-typed data, well-defined structures, optimized join relations, efficient data storage. That said, things like log records that have a finite lifespan, variant content and a flat structure are ideal for a document store and don't require as much infrastructure. I've spent literally decades building relational structures that work well for 90% of a system and shoe-horning the rest in through a series of work-arounds. For me, non-relational stores offer the chance to keep flat, schema-variant data in a more natural form. I hope this helps you find a path that works for you.
