[site]: stackoverflow
[post_id]: 3907612
[parent_id]: 3903538
[tags]: 
As the absolute deviation between x and the mean can be defined as the square root of the squared difference, the adaptation is trivial if you are happy with a consistent but biased estimate (meaning the limit to infinity is the expected value) : n = 0 mean = 0 M2 = 0 def calculate_online_avg_abs_dev(x): n = n + 1 delta = x - mean mean = mean + delta/n M2 = M2 + sqrt(delta*(x - mean)) avg_abs_dev_n = M2/n This is for the case of the average absolute deviation. Normally the mad is used (median absolute deviation), which is impossible to program recursively. but the average absolute deviation is as useful in most cases. When we're talking about hundreds of values from close-to-normal distributions, both values are very close. If you just want the sum of the absolute devations, life is even simpler: just return M2. Be aware of the fact that BOTH the algorithm you gave and the trivial adaptation for the absolute deviation are slightly biased. A simulation in R to prove the algorithm works this way : The red line is the true value, the black line is the progressive value following the algorithm outlined above. Code : calculate_online_abs_dev
