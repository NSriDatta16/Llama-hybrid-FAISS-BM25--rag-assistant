[site]: datascience
[post_id]: 124619
[parent_id]: 
[tags]: 
Does it make sense to tune a model in scikit-learn and copy/paste the parameters into Rust's linfa?

I have a situation where my data can only be read from in a hosted Python environment, due to data security reasons. However, I am constrained to run ML models in a Rust environment due to work-related factors such as the expertise of the team. Does it make sense to do ML model training in scikit-learn, and then use those parameters in Rust. I have 2 types of models I need to use: logistic regression and SVM. Based on the documentation for both scikit-learn and linfa, I think I can simply return the trained parameters, then manually copy over the parameters into my rust system and run inference using linfa. I want to know if anyone else has faced this problem before, and whether there could be a more streamlined way to do this? linfa examples: Logistic regression https://github.com/rust-ml/linfa/blob/master/algorithms/linfa-logistic/examples/logistic_cv.rs#L17 SVM https://github.com/rust-ml/linfa/blob/master/algorithms/linfa-svm/examples/winequality.rs#L16 Proposal: Derive optimal model parameters in scikit-learn > Save these parameters in a file > Read these parameters into Rust code > Initialize linfa model using parameters > Store linfa model From what I understand, there might be a problem in storing and loading linfa models: https://github.com/rust-ml/linfa/issues/67 Would be keen to hear from people's experience on this.
