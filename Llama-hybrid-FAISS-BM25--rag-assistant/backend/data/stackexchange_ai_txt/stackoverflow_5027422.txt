[site]: stackoverflow
[post_id]: 5027422
[parent_id]: 5027129
[tags]: 
An alternative solution to Maverik's is : 1 Define a dependency property in your customer view : public partial class CustomerView : UserControl { public CustomerView() { InitializeComponent(); } public static DependencyProperty FirstNameProperty = DependencyProperty.Register("FirstName", typeof(string), typeof(CustomerView), new PropertyMetadata(string.Empty, CustomerView.FirstNameChanged)); public string FirstName { get { return (string)GetValue(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } private static void FirstNameChanged(object sender, DependencyPropertyChangedEventArgs e) { } } 2 Modify the customer view's textbox to bind to this dependency property (note the element binding "this") 3 Modify the parent view and bind it's DataContext to the new dependency property 4 Set the parent's DataContext public partial class MyParentView : UserControl { public MyParentView() { InitializeComponent(); ContactTabControl.DataContext = "A name"; } } Voila' it works. Not the most elegant solution but it gets the job done for your scenario
