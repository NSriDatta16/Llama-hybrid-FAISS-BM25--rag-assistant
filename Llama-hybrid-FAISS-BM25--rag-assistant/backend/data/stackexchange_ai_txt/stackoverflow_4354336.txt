[site]: stackoverflow
[post_id]: 4354336
[parent_id]: 4354214
[tags]: 
Lately I've been thinking that this aspect of TDD is the same as the concept of programming by "wishful thinking" that I've read about in Structure and Interpretation of Computer Programs . For example, in lecture 2A of the MIT course taught by the authors, the following example is given for computing square roots as a function of fixed points: (define (sqrt x) (fixed-point (lambda (y) (average (/ x y) y)) 1)) This is shown before the fixed-point procedure is defined. You don't really need the definition to understand that you can use a fixed-point procedure to compute square roots. Once you see how you're going to use it, you can go about defining it. (define (fixed-point f start) (define tolerance 0.00001) (define (close-enuf? u v) ( This is the same simple idea used in TDD. By writing tests for your methods before you write the methods themselves, you're showing yourself how those methods are to be used.
