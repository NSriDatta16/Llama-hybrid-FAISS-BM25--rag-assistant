[site]: stackoverflow
[post_id]: 2319611
[parent_id]: 
[tags]: 
When do you need to create abstractions in the form of interfaces?

When do you encourage programming against an interface and not directly to a concrete class? A guideline that I follow is to create abstractions whenever code requires to cross a logical/physical boundary, most especially when infrastructure-related concerns are involved. Another checkpoint would be if a dependency will likely change in the future, due to possible additional concerns code (such as caching, transactional awareness, invoking a webservice instead of in-process execution) or if such dependencies have direct references to infrastructure integration points. If code depends on something that does not require control to cross a logical/physical boundary, I more or less don't create abstractions to interact with those. Am I missing anything?
