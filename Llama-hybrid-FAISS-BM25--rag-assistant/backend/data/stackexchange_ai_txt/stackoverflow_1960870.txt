[site]: stackoverflow
[post_id]: 1960870
[parent_id]: 
[tags]: 
Associative array with multiple keys types, possible?

Ive got a large bunch of objects (potentially 1000's) which I need to store in a container. I need to be able to find specific instances in two ways, either by its ID number (64bit unsigned int), or its name (std::string). Generally by ID will be the most common, however in some cases the name is known, but not the ID. std::map can provide a single value, however I'm not sure if having 2 sets of std::map containers, one for the Ids and another for the strings is the best approach here. EDIT - REVISED code and error: Ok, I figured i'd give the multi index a try since I have boost anyways, however I can't seem to get it to compile even though I've done it exactly the same as in the documentation as far as I can tell :( test code: namespace common { class MyBaseClass { public: typedef boost::uint64_t Id; //name and id are constant, at least for the period im intrested in //when I want it in the container... const std::string &getName()const{return name;} Id getId()const{return id;} ...other stuff... }; } class MyClass : public common::MyBaseClass { ...other stuff... }; typedef boost::multi_index_container >, boost::ordered_unique > > >MyClassList; and your average boost template error... c:\lib\c++\boost\boost\aligned_storage.hpp(69) : error C2872: 'detail' : ambiguous symbol could be 'boost::detail' or 'boost::multi_index::detail' c:\lib\c++\boost\boost\multi_index\detail\index_node_base.hpp(42) : see reference to class template instantiation 'boost::aligned_storage' being compiled with [ size_=4, alignment_=4 ] c:\lib\c++\boost\boost\multi_index\detail\index_node_base.hpp(47) : see reference to class template instantiation 'boost::multi_index::detail::pod_value_holder' being compiled with [ Value=MyClass * ] c:\lib\c++\boost\boost\multi_index\detail\ord_index_node.hpp(582) : see reference to class template instantiation 'boost::multi_index::detail::index_node_base' being compiled with [ Value=MyClass *, Allocator=std::allocator ] c:\lib\c++\boost\boost\multi_index\ordered_index.hpp(137) : see reference to class template instantiation 'boost::multi_index::detail::ordered_index_node' being compiled with [ Super=boost::multi_index::detail::index_node_base> ] c:\lib\c++\boost\boost\multi_index\ordered_index.hpp(119) : see reference to class template instantiation 'boost::multi_index::detail::ordered_index' being compiled with [ KeyFromValue=boost::multi_index::const_mem_fun, Compare=std::less,std::allocator>>, SuperMeta=boost::multi_index::detail::nth_layer ,boost::multi_index::ordered_unique>>,std::allocator>, TagList=boost::mpl::vector0, Category=boost::multi_index::detail::ordered_unique_tag ] c:\lib\c++\boost\boost\multi_index_container.hpp(86) : see reference to class template instantiation 'boost::multi_index::detail::ordered_index' being compiled with [ KeyFromValue=boost::multi_index::const_mem_fun, Compare=std::less, SuperMeta=boost::multi_index::detail::nth_layer ,boost::multi_index::ordered_unique>>,std::allocator>, TagList=boost::mpl::vector0, Category=boost::multi_index::detail::ordered_unique_tag ] c:\projects\bad_angle_studios\brak3\trunk\source\source\server\MyClass.cpp(18) : see reference to class template instantiation 'boost::multi_index::multi_index_container' being compiled with [ Value=MyClass *, IndexSpecifierList=boost::multi_index::indexed_by>,boost::multi_index::ordered_unique>> ] c:\lib\c++\boost\boost\aligned_storage.hpp(53) : error C2872: 'detail' : ambiguous symbol could be 'boost::detail' or 'boost::multi_index::detail' c:\lib\c++\boost\boost\aligned_storage.hpp(56) : see reference to class template instantiation 'boost::detail::aligned_storage::aligned_storage_imp::data_t' being compiled with [ size_=4, alignment_=4 ] c:\lib\c++\boost\boost\aligned_storage.hpp(69) : see reference to class template instantiation 'boost::detail::aligned_storage::aligned_storage_imp' being compiled with [ size_=4, alignment_=4 ] c:\lib\c++\boost\boost\aligned_storage.hpp(73) : error C2872: 'detail' : ambiguous symbol could be 'boost::detail' or 'boost::multi_index::detail' c:\projects\bad_angle_studios\brak3\trunk\source\source\server\MyClass.cpp(44) : error C2676: binary '[' : 'MyClassList' does not define this operator or a conversion to a type acceptable to the predefined operator
