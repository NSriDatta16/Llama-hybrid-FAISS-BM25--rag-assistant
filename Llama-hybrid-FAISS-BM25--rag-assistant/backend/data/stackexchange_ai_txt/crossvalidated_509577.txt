[site]: crossvalidated
[post_id]: 509577
[parent_id]: 
[tags]: 
Can I transform the Viterbi score from tensorflow into a probability?

I understand the Viterbi algorithm as it is explained in Wikipedia However, the TensorFlow implementation is different: def viterbi_decode(score, transition_params): """Decode the highest scoring sequence of tags outside of TensorFlow. This should only be used at test time. Args: score: A [seq_len, num_tags] matrix of unary potentials. transition_params: A [num_tags, num_tags] matrix of binary potentials. Returns: viterbi: A [seq_len] list of integers containing the highest scoring tag indices. viterbi_score: A float containing the score for the Viterbi sequence. """ trellis = np.zeros_like(score) backpointers = np.zeros_like(score, dtype=np.int32) trellis[0] = score[0] for t in range(1, score.shape[0]): v = np.expand_dims(trellis[t - 1], 1) + transition_params trellis[t] = score[t] + np.max(v, 0) backpointers[t] = np.argmax(v, 0) viterbi = [np.argmax(trellis[-1])] for bp in reversed(backpointers[1:]): viterbi.append(bp[viterbi[-1]]) viterbi.reverse() viterbi_score = np.max(trellis[-1]) return viterbi, viterbi_score In the "traditional" Viterbi algorithm we basically keep multiplying probabilities and take the maximum. But the Viterbi score of Tensorflow is consistently greater than 1 and increases with sequence length. Where is the Tensorflow implementation coming from? How can the Viterbi score retrieved by Tensorflow be consistently >1 and increase with the sequence length? Is there a way of transforming the TensorFlow Viterbi score into a probability? I want to compare the confidence of several sequence predictions in a Deep Learning architecture whose final layer is a CRF.
