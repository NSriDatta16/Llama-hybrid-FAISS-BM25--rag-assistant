[site]: stackoverflow
[post_id]: 383576
[parent_id]: 382878
[tags]: 
OK, I made it work... The base knowledge is to use DropHandler UUID in the registry. I made a base setting, as follow: Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\.class] @="JavaClass" [HKEY_CLASSES_ROOT\JavaClass\DefaultIcon] @="C:\\Java\\jdk1.6.0_05\\bin\\java.exe,1" [HKEY_CLASSES_ROOT\JavaClass\shell\open] @="Run Java class" [HKEY_CLASSES_ROOT\JavaClass\shell\open\command] @="\"C:\\Java\\jdk1.6.0_05\\bin\\java.exe\" \"%1\" %*" [HKEY_CLASSES_ROOT\JavaClass\shellex\DropHandler] @="{86C86720-42A0-1069-A2E8-08002B30309D}" and... it didn't work! I just forgot that java.exe wants a class name, not a file name! But I see no way to do that in the registry. Fortunately, there is a workaround, which still need a script file if we want to be generic, to work on any/all class files (with static main function, of course!). Not batch, I avoid them when I can. I chose to use WSH, as it should be available on any modern Windows system. I also chose to make a JS script, it could have been a VB script as well. So I made the following script (LaunchJavaClass.js): if (WScript.Arguments.count() == 0) { WScript.StdOut.Write("No parameters"); WScript.Quit(1); } var className = WScript.Arguments.Item(0); //~ WScript.StdOut.Write(className + "\n"); var m = className.match(/^(.*)\\(.+?)\.class$/); if (m == null) { WScript.StdOut.Write("Not a class file"); WScript.Quit(1); } var classPath = m[1]; className = m[2]; //~ WScript.StdOut.Write(classPath + " >>> " + className + "\n"); var params = new Array(); for (i = 1; i I left some output, not useful in this context, but usable for debugging (run with cscript). Of course, the path to the JRE must be adjusted. And I changed the command in the registry, as follow: [HKEY_CLASSES_ROOT\JavaClass\shell\open\command] @="\wscript -b "D:\\_PhiLhoSoft\\WSH\\LaunchJavaClass.js\" %1 %*" Of course, adjust path, and keep the above other lines. Now, if I drag'n'drop some files to a .class file, it gets the short file paths as arguments of the main() function. import java.io.*; class TestDnD { public static void main(String[] args) { Writer output = null; try { output = new BufferedWriter(new FileWriter(new File("LogFile.txt"))); for (String arg : args) { output.write(arg + "\n"); } } catch (IOException ioe) { ioe.printStackTrace(); return; } finally { try { output.close(); } catch (IOException e) {} } } } I think the first version of the .reg file can be used for something else, eg. to drag'n'drop on .jar files (adapting it, of course). This technique has limited use: we rarely make one-class programs in Java! But it looked like a good and interesting challenge, so I didn't resist to solve it. Note: you can add stuff like -Djava.ext.dirs="some path;another path" if you ever need to use external libraries (in jar files).
