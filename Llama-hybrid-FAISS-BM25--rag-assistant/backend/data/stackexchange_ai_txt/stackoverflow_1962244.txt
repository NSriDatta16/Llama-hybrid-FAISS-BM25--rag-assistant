[site]: stackoverflow
[post_id]: 1962244
[parent_id]: 1962031
[tags]: 
Update : as of PHP8, you can use str_starts_with â€” Checks if a string starts with a given substring Example from Manual: Original answer from 2009: Since someone mentioned efficiency, I've benchmarked the functions given so far out of curiosity: function startsWith1($str, $char) { return strpos($str, $char) === 0; } function startsWith2($str, $char) { return stripos($str, $char) === 0; } function startsWith3($str, $char) { return substr($str, 0, 1) === $char; } function startsWith4($str, $char){ return $str[0] === $char; } function startsWith5($str, $char){ return (bool) preg_match('/^' . $char . '/', $str); } function startsWith6($str, $char) { if (is_null($encoding)) $encoding = mb_internal_encoding(); return mb_substr($str, 0, mb_strlen($char, $encoding), $encoding) === $char; } Here are the results on my average DualCore machine with 100.000 runs each // Testing '_string' startsWith1 took 0.385906934738 startsWith2 took 0.457293987274 startsWith3 took 0.412894964218 startsWith4 took 0.366240024567 As you can see, treating the haystack as array to find out the char at the first position is always the fastest solution. It is also always performing at equal speed, regardless of string length. Using strpos is faster than substr for short strings but slower for long strings, when the string does not start with the prefix. The difference is irrelevant though. stripos is incredibly slow with long strings. preg_match performs mostly the same regardless of string length, but is only mediocre in speed. The mb_substr solution performs worst, while probably being more reliable though. Given that these numbers are for 100.000 runs, it should be obvious that we are talking about 0.0000x seconds per call. Picking one over the other for efficiency is a worthless micro-optimization, unless your app is doing startsWith checking for a living.
