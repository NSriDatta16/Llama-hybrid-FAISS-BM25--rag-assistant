[site]: stackoverflow
[post_id]: 5173310
[parent_id]: 937511
[tags]: 
Santi is correct that Selenium returns the first element matching your specified locator and you have to apply the appropriate expression of the locator type you use. I thought it would be useful to give the details here, though, for in this case they do border on being " gory details ": CSS The :nth-child pseudo-class is tricky to use; it has subtleties that are little-known and not clearly documented, even on the W3C pages. Consider a list such as this: petrel platypus albatross shearwater Then the selector css=li.bird:nth-child(3) returns the albatross element not the shearwater ! The reason for this is that it uses your index (3) into the list of elements that are siblings of the first matching element-- unfiltered by the .bird class ! Once it has the correct element, in this example the third one, it then applies the bird class filter: if the element in hand matches, it returns it. If it does not, it fails to match. Now consider the selector css=li.bird:nth-child(2) . This starts with the second element--platypus--sees it is not a bird and comes up empty. This manifests as your code throwing a "not found" exception! What might fit the typical mental model of finding an indexed entry is the CSS :nth-of-type pseudo-class which applies the filter before indexing. Unfortunately, this is not supported by Selenium, according to the official documentation on locators . XPath Your question already showed that you know how to do this in XPath. Add an array reference at any point in the expression with square brackets. You could, for example use something like this: //*[@id='abc']/div[3]/p[2]/span to find a span in the second paragraph under the 3rd div under the specified id. DOM DOM uses the same square bracket notation as XPath except that DOM indexes from zero while XPath indexes from 1: document.getElementsByTagName("div")[1] returns the second div, not the first div! DOM offers an alternate syntax as well: document.getElementsByTagName("div").item(0) is exactly equivalent. And note that with getElementsByTagName you always have to use an index since it returns a node set, not a single node.
