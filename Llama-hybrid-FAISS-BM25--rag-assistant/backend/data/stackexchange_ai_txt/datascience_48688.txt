[site]: datascience
[post_id]: 48688
[parent_id]: 
[tags]: 
Issues with using stateful in StackedRNN cells

I am having issues with using the 'stateful' feature when building stacked RNN using LSTMCell object. I am following the instructions on tensorflow on how to set 'stateful = True' by passing the 'batch_shape' to the input layer and the 'batch_input_shape' to the first cell, and also tried to set it in the second cell but it still does not work; tried various combinations but nothing works. The code only works with one cell but not with more than one. I am not sure what I am missing. The problem I am working on is Sentiment Analysis. 292 is the sequence length I am passing to predict if the sentiment is 1 or 0. I realize I could use the Sequential model of Keras but I would like to learn the finer features of tensorflow. import tensorflow as tf tf.reset_default_graph() batch_size = 10 embed_size = 5 dropout = 0.5 n_unique_words = 102966 ntimesteps = 292 x = tf.placeholder(dtype = tf.int32, shape = (batch_size, ntimesteps), name='tf_x') print(x) y = tf.placeholder(dtype = tf.float32, shape = (batch_size), name = 'tf_y') print(y) embed_variable = tf.get_variable(name = 'embedding', shape = [n_unique_words, embed_size], initializer=tf.glorot_uniform_initializer) print(embed_variable) embed_x = tf.nn.embedding_lookup(embed_variable, x, name = 'embedded_x') print(embed_x) cell1 = tf.keras.layers.LSTMCell(units = 256, batch_input_shape = (10,292,5), dtype = tf.float32)#, dropout=dropout, name = 'lstm1') print(cell1) cell2 = tf.keras.layers.LSTMCell(units = 512, batch_input_shape = (10,292,5), dtype = tf.float32)#, name='lstm2', recurrent_dropout=0.5) print(cell2) rnn_input = tf.keras.Input(batch_shape = (batch_size, 292, 5), dtype = tf.float32) #shape = (batch_size, 292))# rnn_object = tf.keras.layers.RNN(cell = [cell1, cell2], batch_size = 10, return_sequences = True, \ return_state = True, stateful = True, dtype = tf.float32)(rnn_input) print(rnn_object) Output: Tensor("tf_x:0", shape=(10, 292), dtype=int32) Tensor("tf_y:0", shape=(10,), dtype=float32) Tensor("embedded_x/Identity:0", shape=(10, 292, 5), dtype=float32) --------------------------------------------------------------------------- AttributeError Traceback (most recent call last) in 32 rnn_input = tf.keras.Input(batch_shape = (batch_size, 292, 5), dtype = tf.float32) #shape = (batch_size, 292))# 33 rnn_object = tf.keras.layers.RNN(cell = [cell1, cell2], batch_size = 10, return_sequences = True, \ ---> 34 return_state = True, stateful = True, dtype = tf.float32)(rnn_input) 35 36 ~/anaconda3/envs/condapy36/lib/python3.6/site-packages/tensorflow/python/keras/layers/recurrent.py in __call__(self, inputs, initial_state, constants, **kwargs) 699 700 if initial_state is None and constants is None: --> 701 return super(RNN, self).__call__(inputs, **kwargs) 702 703 # If any of `initial_state` or `constants` are specified and are Keras ~/anaconda3/envs/condapy36/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs) 536 if not self.built: 537 # Build layer if applicable (if the `build` method has been overridden). --> 538 self._maybe_build(inputs) 539 # We must set self.built since user defined build functions are not 540 # constrained to set self.built. ~/anaconda3/envs/condapy36/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py in _maybe_build(self, inputs) 1601 # Only call `build` if the user has manually overridden the build method. 1602 if not hasattr(self.build, '_is_default'): -> 1603 self.build(input_shapes) 1604 1605 def __setattr__(self, name, value): ~/anaconda3/envs/condapy36/lib/python3.6/site-packages/tensorflow/python/keras/layers/recurrent.py in build(self, input_shape) 634 ] 635 if self.stateful: --> 636 self.reset_states() 637 self.built = True 638 ~/anaconda3/envs/condapy36/lib/python3.6/site-packages/tensorflow/python/keras/layers/recurrent.py in reset_states(self, states) 904 K.set_value(state, 905 np.zeros([batch_size] + --> 906 tensor_shape.as_shape(dim).as_list())) 907 else: 908 K.set_value(self.states[0], np.zeros( ~/anaconda3/envs/condapy36/lib/python3.6/site-packages/tensorflow/python/keras/backend.py in set_value(x, value) 2831 (of the same shape). 2832 """ -> 2833 value = np.asarray(value, dtype=dtype(x)) 2834 if ops.executing_eagerly_outside_functions(): 2835 x.assign(value) ~/anaconda3/envs/condapy36/lib/python3.6/site-packages/tensorflow/python/keras/backend.py in dtype(x) 1013 ``` 1014 """ -> 1015 return x.dtype.base_dtype.name 1016 1017 AttributeError: 'list' object has no attribute 'dtype'
