[site]: crossvalidated
[post_id]: 582982
[parent_id]: 
[tags]: 
How to implement exponentially weighted rolling linear regression?

I have been looking for a simple moving windows exponentially weighted regression implementation. I came across this: # This gist demonstrate the use of a linear algorithm to compute exponentially weighted rolling linear regression between two time-series. # benchmark rolling linear model using R's lm function # output 2 regression coefficients + R2, ie 3 value per row # alpha: decay coefficient (last weight = (1 - alpha) * previous weight) # miny: minimum number of sample required to calculate an output value rlm $coefficients[2,1], s$ coefficients[1,1], s$r.squared) } res } # implementation of rolling exponentially weighted linear model in linear time # arguments and outputs: same as above rlm2 = miny) { mx 1e-10, na.rm = TRUE) I have concerns this code might have issues. E.g. at cursory understanding sw*mx*my - swx*my = 0 as sw*mx*my = swx*my and mx . So my question is how can a optimal implementation of rolling exponentially weighted moving linear regression for time series data when one axis is time. Are there any special optimisations when the x-axis it time? How can this be extended to have higher powers terms of time? What are the calculations for coefficients, SSR, SSE, SST, R2 confidence internals in both multiple and single x variable cases? If possible can C/C++ code examples be given?
