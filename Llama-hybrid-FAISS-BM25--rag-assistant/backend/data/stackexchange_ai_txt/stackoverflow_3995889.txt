[site]: stackoverflow
[post_id]: 3995889
[parent_id]: 3995748
[tags]: 
I would work at class level (or file level for C) and embed all the various versions in the same working software (no #ifdef) and choose one implementation or the other at runtime through some configuration file or command line options. It should be quite easy as optimizations should not change anything at internal API level. Another way if you'are using C++ can be to instantiate templates to avoid duplicating high level code or selecting a branch at run-time (even if this is often an acceptable option, some switches here and there are often not such a big issue). In the end various optimized backend could eventually be turned to libraries. Unit Tests should be able to work without modifying them with every variant of implementation. My rationale is that embedding every variant mostly change software size, and it's very rarely a problem. This approach also has other benefits : you can take care easily of changing environment. An optimization for some OS or some hardware may not be one on another. In many cases it will even be easy to choose the best version at runtime.
