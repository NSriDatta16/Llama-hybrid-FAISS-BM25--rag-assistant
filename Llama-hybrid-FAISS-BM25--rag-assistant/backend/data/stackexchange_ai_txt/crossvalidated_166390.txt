[site]: crossvalidated
[post_id]: 166390
[parent_id]: 
[tags]: 
How to calculate weights for RNN?

I'm trying to implement a Recurrent Neural Network to get a better understanding of what is doing. I have taken some code from a FFNN, in order to extend it to a RNN. Following this equation: I have made some progress, but I'm stuck when I need to update the weights. I don't know how to do the calculation. import numpy as np def nonlin(x,deriv=False): if(deriv==True): return x*(1-x) return 1/(1+np.exp(-x)) ''' Add two binary numbers Each column is a time step. 00110100 01001101 10000001 ''' X = np.array([[0,1], [0,0], [1,1], [0,1], [1,0], [1,0], [0,1], [0,0]]) Y = np.array([[1], [0], [0], [0], [0], [0], [0], [1]]) np.random.seed(1) # randomly initialize our weights with mean 0 syn0 = 2*np.random.random((1,2)) - 1 syn1 = 2*np.random.random((1,1)) - 1 l1_t = 2*np.random.random((1,1)) - 1 # past example syn2 = 2*np.random.random((1,1)) - 1 for x, y in zip(X, Y): # Feed forward through layers 0, 1, and 2 l0 = x.reshape(2, 1) l1 = nonlin(np.add(np.dot(syn0, l0), np.dot(syn1, l1_t))) l2 = nonlin(np.dot(syn2, l1)) # how much did we miss the target value? l2_error = y - l2 print "Error:" + str(np.mean(np.abs(l2_error))) # in what direction is the target value? # were we really sure? if so, don't change too much. l2_delta = l2_error*nonlin(l2,deriv=True) # how much did each l1 value contribute to the l2 error (according to the weights)? l1_t_error = l2_delta.dot(syn1.T) l1_t_delta = l1_t_error *nonlin(l1,deriv=True) l1_error = l2_delta.dot(syn0) # in what direction is the target l1? # were we really sure? if so, don't change too much. l1_delta = l1_error * nonlin(l1,deriv=True) syn2 += l2.T.dot(l2_delta) syn1 += l1.T.dot(l1_t_delta) syn0 += l0.T.dot(l1_delta) # Save l1 for next iteration l1_t = l1 I also tried to search for clues, but so far the tutorials are very academic and I get lost in the notation of the derivatives.
