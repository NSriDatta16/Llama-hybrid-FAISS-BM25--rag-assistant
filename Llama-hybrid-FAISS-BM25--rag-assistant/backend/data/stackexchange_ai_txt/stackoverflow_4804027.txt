[site]: stackoverflow
[post_id]: 4804027
[parent_id]: 4803783
[tags]: 
FWIW there are Purely functional data structures , which benefit from functional programming. There's also a nice book on Purely Functional Data Structures by Chris Okasaki, which presents data structures from the point of view of functional languages. Another interesting article Announcing Intel Concurrent Collections for Haskell 0.1 , about parallel programming, they note: Well, it happens that the CnC notion of a step is a pure function . A step does nothing but read its inputs and produce tags and items as output. This design was chosen to bring CnC to that elusive but wonderful place called deterministic parallelism . The decision had nothing to do with language preferences. (And indeed, the primary CnC implementations are for C++ and Java.) Yet what a great match Haskell and CnC would make! Haskell is the only major language where we can (1) enforce that steps be pure, and (2) directly recognize (and leverage!) the fact that both steps and graph executions are pure. Add to that the fact that Haskell is wonderfully extensible and thus the CnC "library" can feel almost like a domain-specific language. It doesn't say about performance – they promise to discuss some of the implementation details and performance in future posts, – but Haskell with its "pureness" fits nicely into parallel programming.
