[site]: stackoverflow
[post_id]: 3159721
[parent_id]: 3159586
[tags]: 
You seem to use DataStructures like some kind of global storage. I don't know what you store in there so I'm going to assume you have good reasons for this global storage. If so, I would replace each list with a new kind of object, which deals with additions of data and does the checks relevant for it. Something like: interface IObjectStorage { void Add(object obj); void Remove(object obj); } Each object storage type would derive from this and provide their own logic. Or it could derive from Collection or something similar if collection-semantics makes sense. As your example is right now, I can't see the use for ObjectFeed, it serves as a fancy property accessor. Selecting which property to access through a string sounds iffy to me. It is very prone to typos; I would rather use Type -objects available from any object in C# through the GetType-method or typeof() construct. However. The whole setup feels a bit wrong to me, DataStructures et al. First, testing your static class will be hard. I would pass around these stores to the types that need them instead. Replacing them with other stuff will also be hard, using interfaces will at least not tie you to a concrete implementation, but what if you want to use another location to store the objects in other code? Your static class is no longer relevant and you'll need to change a lot of code. Maybe these things are out of your control, I don't know, the example code is a bit vague in that sense.
