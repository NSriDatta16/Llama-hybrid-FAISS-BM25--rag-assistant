[site]: stackoverflow
[post_id]: 3388343
[parent_id]: 
[tags]: 
iPhone - creating a tableview sectioned and in alphabetical order

I am pretty new to programming any sort of device and am on a steep learning curve, so please forgive me if this doesnt make too much sense or the code in the question is awful - we all ave to start somewhere, and beleive me, i have read and read and read! I am creating a table from a plist which is an array of dictionarys - i need it in this format as later i wish to be able to change some of the values and write back to the relevant plist 'key'. I am hoping that someone will be able to look at this and give me some pointers as to how to... Make the table sort the data under the key/value 'name' from the plist in the fashion A to Z in a grouped style - this seems to be ok, however, it creates the number of sections according to the number of dictionaries in the array in the plist whereas some of the dictionaries should be grouped together under the same section (see below) Divide the table up into sections according to the items in the plist ie. if i have 7 items, ranging across the alphabet then i want 7 sections. have an index on the right hand side that only has the relevant number of entries - if i dont have any data under 'Q' then I dont want 'Q' to show in the index! Obviously i'm a long way from sorting all this out - the code itself is a bit of a 'dogs-dinner' at the moment as i have been trying so many different things without much success, so if you see something you dont like please let me know! I have been trying to read up on all the relevant sections such as UILocalizedIndexedCollation and sortedArrayUsingDescriptors but i guess my brain just isnt up to it... Any and all advice (except 'give it up you're not bright enough for this' as i never give up on anything i start!) would be much appreciated! (there are lots of unused variables synthesized at the beginning - i have taken the relevant code out in order to simplify what i have posted here, the code compiles with no problems, and works given me the following result: a table with 27 letters indexed on the right hand side of which only A-J work (which correlates to the number of sections produced in the table - there are only section A-J. The contents of the cells are exactly what i want.) #import "RootViewController.h" #import "View2Controller.h" #import "tableviewsAppDelegate.h" #import "SecondViewController.h" #import "HardwareRootViewController.h" #import "HardwareSecondViewController.h" #import "SoftwareRootViewController.h" @implementation SoftwareRootViewController @synthesize dataList2; @synthesize names; @synthesize keys; @synthesize tempImageType; @synthesize tempImageName; @synthesize finalImageName; @synthesize tempSubtitle; @synthesize finalSubtitleName; @synthesize tempSubtitleType; @synthesize finalSubtitleText; @synthesize sortedArray; @synthesize cellName; @synthesize rowName; //Creates grouped tableview// - (id)initWithStyle:(UITableViewStyle)style { if (self = [super initWithStyle:UITableViewStyleGrouped]) { } return self; } - (void)viewDidLoad { //loads in backgroundimage and creates page title// NSString *backgroundPath = [[NSBundle mainBundle] pathForResource:@"background1" ofType:@"png"]; UIImage *backgroundImage = [UIImage imageWithContentsOfFile:backgroundPath]; UIColor *backgroundColor = [[UIColor alloc] initWithPatternImage:backgroundImage]; self.tableView.backgroundColor = backgroundColor; [backgroundColor release]; self.navigationController.navigationBar.tintColor = [UIColor colorWithRed:.5 green:.4 blue:.3 alpha:5]; self.title = @"Software"; [super viewDidLoad]; //Defines path for DATA For ARRAY// NSString *path = [[NSBundle mainBundle] pathForResource:@"DataDetail3" ofType:@"plist"]; //initialises the contents of the ARRAY with the PLIST// NSMutableArray* nameArray = [[NSMutableArray alloc] initWithContentsOfFile:path]; //Sorts the items in the list alphabetically// NSSortDescriptor *nameSorter = [[NSSortDescriptor alloc] initWithKey:@"name" ascending:YES selector:@selector(caseInsensitiveCompare:)]; [nameArray sortUsingDescriptors:[NSArray arrayWithObject:nameSorter]]; [nameSorter release]; self.dataList2 = nameArray; [nameArray release]; } - (void)didReceiveMemoryWarning { // Releases the view if it doesn't have a superview. [super didReceiveMemoryWarning]; // Release any cached data, images, etc that aren't in use. } - (void)viewDidUnload { // Release anything that can be recreated in viewDidLoad or on demand. // e.g. self.myOutlet = nil; } #pragma mark Table view methods // Customize the appearance of table view cells. - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { static NSString *SectionsTableIdentifier = @"SectionsTableIdentifier"; UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier: SectionsTableIdentifier ]; if (cell == nil) { cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier: SectionsTableIdentifier ] autorelease]; } // Configure the cell. cell.indentationLevel = 1; cell.textLabel.text = [[self.dataList2 objectAtIndex:indexPath.row] objectForKey:@"name"]; cell.accessoryType = UITableViewCellAccessoryDetailDisclosureButton; //Detremines the cell color according to the value in 'owned' in the plist// NSString *textColor = [[self.dataList2 objectAtIndex:indexPath.row] objectForKey:@"owned"]; if ([textColor isEqualToString: @"greenColor"]) { [cell setBackgroundColor:[UIColor colorWithRed:0.1 green:0.7 blue:0.1 alpha:1]]; } if ([textColor isEqualToString: @"blackColor"]) { [cell setBackgroundColor:[UIColor whiteColor]]; } return cell; } // Code For Loading of The View2Controller// - (void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath { NSString *CellIdentifier = [[self.dataList2 objectAtIndex:indexPath.row] objectForKey:@"name"]; NSString *rowTitle = CellIdentifier; NSLog(@"rowTitle = %@", rowTitle); [tableView deselectRowAtIndexPath:indexPath animated:YES]; SecondViewController *second = [[SecondViewController alloc] init]; [second setCategory: rowTitle]; [self.navigationController pushViewController:second animated:YES]; [second release]; } - (void)dealloc { [dataList2 release]; [super dealloc]; } - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView { return [dataList2 count]; } // Customize the number of rows in the table view. - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { return [dataList2 count]; ///Tells the table that it only needs the amount of cells listed in the DATALIST1 ARRAY// }// - (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)help { return [[[UILocalizedIndexedCollation currentCollation] sectionTitles] objectAtIndex:help]; } - (NSArray *)sectionIndexTitlesForTableView:(UITableView *)tableView { return [[UILocalizedIndexedCollation currentCollation] sectionIndexTitles]; } - (NSInteger)tableView:(UITableView *)tableView sectionForSectionIndexTitle:(NSString *)title atIndex:(NSInteger)index { return [[UILocalizedIndexedCollation currentCollation] sectionForSectionIndexTitleAtIndex:index]; } @end Any advice would be greatly appreciated - at the moment i have been working on this for about a week with no success and am close to just giving up, which i really dont want to do! If the worst come to the worst and i cant get this done would ayone be willing to write the functionality in for me, for a small fee of course!! Cheers, and heres hoping... Chubs
