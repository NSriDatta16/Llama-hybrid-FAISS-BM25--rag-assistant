[site]: stackoverflow
[post_id]: 5275424
[parent_id]: 
[tags]: 
Restarting agent program after it crashes

Consider a distributed bank application, wherein distributed agent machines modify the value of a global variable : say "balance" So, the agent's requests are queued. A request is of the form wherein value is added to the global variable on behalf of the particular agent. So,the code for the agent is of the form : agent { look_queue(); // take a look at the leftmost request on queue without dequeuing lock_global_variable(balance,agent_machine_id); ///////////////////// **POINT A** modify(balance,value); unlock_global_variable(balance,agent_machine_id); /////////////////// **POINT B** dequeue(); // once transaction is complete, request can be dequeued } Now, if an agent's code crashes at POINT B, then obviously the request should not be processed again, otherwise the variable will be modified twice for the same request. To avoid this, we can make the code atomic, thus : agent { look_queue(); // take a look at the leftmost request on queue without dequeuing *atomic* { lock_global_variable(balance,agent_machine_id); modify(balance,value); unlock_global_variable(balance,agent_machine_id); dequeue(); // once transaction is complete, request can be dequeued } } I am looking for answers to these questions : How to identify points in code which need to be executed atomically 'automatically' ? IF the code crashes during executing, how much will "logging the transaction and variable values" help ? Are there other approaches for solving the problem of crashed agents ? Again,logging is not scalable to big applications with large number of variables. What can we in those case - instead of restarting execution from scratch ? In general,how can identify such atomic blocks in case of agents that work together. If one agent fails, others have to wait for it to restart ? How can software testing help us in identifying potential cases, wherein if an agent crashes, an inconsistent program state is observed. How to make the atomic blocks more fine-grained, to reduce performance bottlenecks ?
