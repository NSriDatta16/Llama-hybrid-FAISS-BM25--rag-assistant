[site]: stackoverflow
[post_id]: 3865185
[parent_id]: 3865116
[tags]: 
This sounds like homework or an interview question ... so rather than giving away the answer, here's a hint. What calculations can you do on a range of integers whose answer you can determine ahead of time? Once you realize the answer to this, you should be able to figure it out .... if you still can't figure it out ... (and it's not homework) I'll post the solution :) EDIT: Ok. So here's the elegant solution ... if the list contains ALL of the integers within the range. We know that all of the values between 1 and N must exist in the list. Using Guass' formula we can quickly compute the expected value of a range of integers: Sum(1..N) = 1/2 * (1 + N) * Count(1..N). Since we know the expected sum, all we have to do is loop through all the values and sum their values. The different between this sum and the expected sum is the duplicate value. EDIT: As other's have commented, the question doesn't state that the range contains all of the integers ... in this case, you have to decide whether you want to optimize for memory or time. If you want to perform the operation using O(1) storage , you can perform an in-place sort of the list. As you're sorting you have to check adjacent elements. Once you see a duplicate, you know you can stop. Optimal sorting is an O(n log n) operation on average - which establishes an upper bound for find the duplicate in this manner. If you want to optimize for speed, you can use an additional O(n) storage . Using a HashSet (or similar structure), insert values from your list until you determine you are inserting a duplicate into the HashSet. Inserting n items into a HashSet is an O(n) operation on average, which establishes that as an upper bound for this method.
