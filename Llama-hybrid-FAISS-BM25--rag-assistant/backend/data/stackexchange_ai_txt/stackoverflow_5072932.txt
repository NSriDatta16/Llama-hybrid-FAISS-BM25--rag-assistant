[site]: stackoverflow
[post_id]: 5072932
[parent_id]: 
[tags]: 
Optimized datastructure for arbitrary data

I need to store data in a manner similar to a dataset, i.e you should be able to access items/rows by number and then different fields of that item by field name. What's keeping me up at night however is how much such a structure could be optimized from a memory/casting/performance point of view. Some might see this as a uneccessary micro-optimization but please bear with me, see it as an exercise :) (and no, its not homework) I want to allocate as little memory per item as possible, that means optimally not even empty fields and as few instances as possible I want to avoid casting as much as possible, preferably using generics I want to be able to access fields in a nice, type-safe way, ie items[0].Field ("fieldname") or items[0].Field.Int("fieldname") (seems less elegant) I need to be able to access items by index and it needs to be an IEnumerable It needs to support concurrent reading/enumerating if we start with this (simplified example) structure: public class Items : IEnumerable { private List items = new List (); public Item this[int index] { get { return this.items[index]; } } public IEnumerator GetEnumerator() { return this.items.GetEnumerator(); } } public class Item { private Dictionary fields = new Dictionary (StringComparison.OrdinalIgnoreCase); public T Field (string fieldName) { return (T)this.fields[fieldName]; } } Can you: a) Do something similarily with generics (or other way to avoid casting)? without storing additional fields, ie without storing one variable per type and field b) Have the items class but eliminate the need for Item instances instead using a List directly in Items, and still be able to enumerate the class and access it's data using the Field method. I guess extensions methods somehow is the only way to go here. One idea was to have a yield enumerator with a flyweight to avoid Item instances but I soon realized the potential problems that would mean if accessing items in parallel through things like PLINQ (or am I mistaken) c) use some completely different approach?
