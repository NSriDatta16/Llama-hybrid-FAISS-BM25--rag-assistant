[site]: stackoverflow
[post_id]: 2353992
[parent_id]: 1982533
[tags]: 
Years ago, we wrote a control system framework and the Agent objects caught runtime exceptions, logged them if they could and continued. Yes we caught Runtime exceptions including OutOfMemory in our framework code( and forced a GC, and it's surprising how well that kept even quite leaky code running.) We had code that was doing very mathematical things involving the real world; and from time to time a Not-A-Number would get in due to tiny rounding errors and it coped okay with that too. So in framework / "must not exit" code I think it can be justifiable. And when it works it's pretty cool. The code was pretty solid, but it ran hardware, and hardware tends to give screwy answers sometimes. It was designed to run without human intervention for months at a time. It worked extremely well in our tests. As part of the error recovery code, it could resort to rebooting the entire building using the UPS's ability to turn off in N minutes and turn on in M minutes. Sometimes hardware faults need to power cycled :) If I remember, the last resort after an unsuccessful power cycle was it sending an email to it's owners, saying "I tried to fix myself and I can't; the problem is in subsystem XYZ", and included a link to raise a support call back to us. Sadly the project got canned before it could become self aware :)>
