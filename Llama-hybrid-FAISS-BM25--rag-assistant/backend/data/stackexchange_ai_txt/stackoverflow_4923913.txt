[site]: stackoverflow
[post_id]: 4923913
[parent_id]: 4916847
[tags]: 
As others have pointed out, the problem is that the control flow does not do what you think it does. This is a common beginner problem. My suggestion to you is learn how to use your debugger . Beginners often have this strange idea that they're not allowed to use tools to solve their coding problems; that rather, they have to reason out the defect in the program by simply reading it. Once the programs become more than a page long, that becomes impossible for humans. The debugger is your best friend, so get to know its features really well . In this case if you'd stepped through the code in the debugger you'd see that the loop condition was being evaluated and then the loop was being skipped. At that point you wouldn't be asking "why does this return zero?", you'd be asking "why is the loop body always skipped?" Clearly that is a much more productive question to ask since that is actually the problem here. Don't write any code without stepping through it in the debugger. Watch every variable, watch how it changes value (the debugger highlights variables in the watch windows right after they change value, by the way) and make sure that the control flow and the variable changes are exactly as you'd expect. Pay attention to quiet doubts; if anything seems out of the ordinary, track it down , and either learn why it is correct, or fix it until it is. Regarding the actual problem: remember that 15, 30, 45, 60... are all multiples of both three and five, but you only want to add them to the sum once. My advice when solving Project Euler problems is to write code that is as like what you are trying to solve as is possible. Try writing the problem out in "pseudocode" first. I'd pseudocode this as: sum = 0 for each positive number under 1000: if number is multiple of three or five then: add number to sum Once you have that pseudocode you can notice its subtleties. Like, is 1000 included ? Does the problem say "under 1000" or "up to 1000"? Make sure your loop condition considers that. And so on. The closer the program reads like the problem actually being solved, the more likely it is to be correct.
