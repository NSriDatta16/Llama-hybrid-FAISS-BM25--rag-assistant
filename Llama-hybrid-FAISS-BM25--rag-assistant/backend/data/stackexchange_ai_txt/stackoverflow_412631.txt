[site]: stackoverflow
[post_id]: 412631
[parent_id]: 169020
[tags]: 
For me TDD has an ace pseudocoding just can't compete with - both help you abstract and plan the development, but once you're finished development in TDD land you still have the unit tests . AS useful an approach as CC2 described pseudocoding is, it just can't match that. TDD is only half about designing, it's also providing a rigorous scaffold you can evolve the project forward from. However I see no reason why you can't pseudocode to solve the problems TDD sets. I must not develop organically. Pseudocode is the mind-killer. It is the little-death that brings project memory oblivion. I will face my 90's methodology. I will permit it to pass over me and through me. And when it has gone past I will turn the inner eye to see its path. Where the pseudocode has gone there will be TDD. Only unit-tests will remain. (please don't flame me for that, I'm only half serious :P )
