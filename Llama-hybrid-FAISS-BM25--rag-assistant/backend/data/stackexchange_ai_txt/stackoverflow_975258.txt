[site]: stackoverflow
[post_id]: 975258
[parent_id]: 975211
[tags]: 
You're not the first person to want to build their own circuit simulator ;-). My suggestion is to settle on a minimal set of primitives. When I began mine (which I plan to resume one of these days...) I had two primitives: Source: zero inputs, one output that's always 1. Transistor: two inputs A and B , one output that's A and not B . Obviously I'm misusing the terminology a bit, not to mention neglecting the niceties of electronics. On the second point I recommend abstracting to wires that carry 1s and 0s like I did. I had a lot of fun drawing diagrams of gates and adders from these. When you can assemble them into circuits and draw a box round the set (with inputs and outputs) you can start building bigger things like multipliers. If you want anything with loops you need to incorporate some kind of delay -- so each component needs to store the state of its outputs. On every cycle you update all the new states from the current states of the upstream components. Edit Regarding your concerns on scalability, how about defaulting to the first principles method of simulating each component in terms of its state and upstream neighbours, but provide ways of optimising subcircuits: If you have a subcircuit S with inputs A[m] with m B[n] and no loops, generate the truth table for S and use that. This could be done automatically for identified subcircuits (and reused if the subcircuit appears more than once) or by choice. If you have a subcircuit with loops, you may still be able to generate a truth table. There are fixed-point finding methods which can help here. If your subcircuit has delays (and they are significant to the enclosing circuit) the truth table can incorporate state columns. E.g. if the subcircuit has input A, inner state B, and output C, where C A B | B C 0 0 | 0 0 0 1 | 0 0 1 0 | 1 0 1 1 | 1 1 If you have a subcircuit that the user asserts implements a particular known pattern such as "adder", provide an option for using a hard-coded implementation for updating that subcircuit instead of by simulating its inner parts.
