[site]: datascience
[post_id]: 47051
[parent_id]: 
[tags]: 
Why is Reward Engineering considered "bad practice" in RL?

Reward engineering is an important part of supervised learning: Coming up with features is difficult, time-consuming, requires expert knowledge. "Applied machine learning" is basically feature engineering. â€” Andrew Ng However tweaking the reward function by hand is generally frowned upon in RL. I'm not sure I understand why. One argument is that we generally don't know, a priori, what will be the best solution to an RL problem. So by tweaking the reward function, we may bias the agent towards what we think is the best approach, while it is actually sub-optimal to solve the original problem. This is different from supervised learning, where we know from the start what we want to optimize. Another argument would be that it's conceptually better to consider the problem as a black box, as the goal is to develop a solution as general as possible. However this argument could also be made for supervised learning! Am I missing anything?
