[site]: stackoverflow
[post_id]: 427171
[parent_id]: 427083
[tags]: 
I've been seeing a lot of this sort of thing on SO these days. (See here , here , and here for a few examples.) According to Wikipedia , Lisp is the second oldest programming language still in common use today (beaten out by Fortran). Functional programming is no more a fad than the transistor, the mouse, the computer monitor, the hard drive, or, indeed, the very notion of a personal computer, none of which were present at Lisp's inception in 1958. It is true that functional programming may not be particularly useful in a typical business environment, but its waxing and waning levels of popularity do not make it a fad, nor do they make it a toy. Programmers with a keen appreciation of computing science understand that functional programming isn't so much an invention as it is a discovery--a deep insight into the fundamental nature of computation. More to the point of your question, if programming is your day job (as opposed to a true passion), is F# a waste of your time? It probably is, in the sense that it is not likely to ever become popular enough to warrant including on your resume. It's also worth noting that if you do invest the time to learn F#, but none of your colleagues can understand your work, you may be doing more harm than good by choosing it as a development tool. That still doesn't make it a "fad." :) As for MVC, that's been around for a long time now--probably over a decade, but I haven't been keeping track. It's not a silver bullet, nor is it difficult to grasp; it's just another development pattern. It's also worth paying attention to the fact that MVC is not a standard or even a very well specified tech. There are many different ways to interpret MVC, and I would even venture to say that there is more than one right way to do it. MVC happens to be particularly useful for web development because web applications tend to have very messy front-end code (supporting all of those different browsers is a royal pain) and the last thing you want is to have your business logic mired in with the front-end unnecessarily. Unlike F#, learning MVC is not a waste of time even if programming is strictly just a day job for you, because if you ever find yourself working on a web application, adherence to MVC (even simply loose adherence to it) can save your ass from professional embarrassment.
