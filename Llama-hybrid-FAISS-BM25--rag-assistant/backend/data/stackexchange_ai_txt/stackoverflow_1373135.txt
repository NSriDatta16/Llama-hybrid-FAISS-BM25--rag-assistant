[site]: stackoverflow
[post_id]: 1373135
[parent_id]: 1372811
[tags]: 
I'll throw my hat into the ring for a simple explanation of this: An array is a series of contiguous storage locations for the same type A pointer is the address of a single storage location Taking the address of an array gives the address of (i.e a pointer to) its first element. Elements of an array can be accessed through a pointer to the array's first element. This works because the subscript operator [] is defined on pointers in a way designed to facilitate this. An array can be passed where a pointer parameter is expected, and it will be automatically converted into a pointer-to-first-element (although this is not recursive for multiple levels of pointers, or multi-dimensional arrays). Again, this is by design. So, in many cases, the same piece of code can operate on arrays and contiguous blocks of memory that were not allocated as an array because of the intentionally special relationship between an array and a pointer to its first element. However they are distinct types, and they do behave differently in some circumstances, e.g. pointer-to-array is not at all the same as pointer-to-pointer. Here's a recent SO question that touches on the pointer-to-array versus pointer-to-pointer issue: Whats the difference between "abc" and {"abc"} in C?
