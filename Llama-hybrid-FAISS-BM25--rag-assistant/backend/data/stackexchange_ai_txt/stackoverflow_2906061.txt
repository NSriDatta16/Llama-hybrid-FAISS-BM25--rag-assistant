[site]: stackoverflow
[post_id]: 2906061
[parent_id]: 1856830
[tags]: 
I have an almost identical model Manager to thornomad, and the same problem with generic views. I have to point out that neither of the suggestions above work: doing Video.objects.all without parentheses gives an error doing queryset.filter(pub_date__lte=datetime.utcnow), again without the parentheses, does not give an error but does not fix the problem I have also tried another way, which is to use a lambda to return the queryset, eg: qs = lambda *x: Video.objects.all() url(r'^video/(?P \d+)$', list_detail.object_detail, { 'queryset': qs(), }, name='video_detail', ), ...it didn't work either and I can see now I must have been desperate to think it would :) lazy_qs = lambda *x: lazy(Post.live_objects.all, QuerySet) blog_posts = { 'queryset': lazy_qs(), ...doesn't work either (gives an error) as utils.functional.lazy doesn't know how to convert the result to a QuerySet properly, as best I can tell. I think Roberto's answer of wrapping the generic view is the only one that will help. The django docs should be amended to point out the limitations of the queryset used by generic views (currently the docs have a special note to tell you everything will be okay!)
