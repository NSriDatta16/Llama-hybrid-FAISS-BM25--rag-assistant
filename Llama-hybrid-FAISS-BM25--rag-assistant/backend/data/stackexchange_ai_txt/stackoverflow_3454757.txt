[site]: stackoverflow
[post_id]: 3454757
[parent_id]: 3454746
[tags]: 
I've never seen them decrease performance, unless you do something foolish like have each user control be responsible for it's own DB look-up, and then bind them in a Repeater or something like that. If you use common sense, they should not degrade performance noticeably. If you're talking optimizing down to the processor cycle, however, I would guess they would not because of how everything gets compiled down to MSIL, and then to Machine code, so I would guess the compiler can sort it out and would treat a user control no differently than if you had all the constituent controls directly on the page. Edit - added This article argues for how they can actually improve performance. Interesting. In addition to their reusability and flexibility, Web user controls can take advantage of the ASP.NET caching engine to implement what is referred to as “fragment caching.” Essentially, fragment caching allows a Web developer to control the HTML caching of individual controls on a page, including setting the duration and caching various versions of the control based on query string, control properties, browser type, and even custom strings. The ability to cache only portions of pages is powerful since a portion of a page will often access relatively static data stored in a relational database or accessed through an XML Web service, while other portions of the same page manipulate dynamic data. For these static portions, creating a Web user control and setting caching options greatly reduces the number of database round trips, thereby increasing performance. In most instances, using ASP.NET caching judiciously is the single biggest performance improvement that can be made. Good question. Again, I learned something new. Thank you.
