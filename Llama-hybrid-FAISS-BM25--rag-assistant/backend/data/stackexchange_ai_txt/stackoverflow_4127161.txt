[site]: stackoverflow
[post_id]: 4127161
[parent_id]: 4127075
[tags]: 
How processor intensive does the query to get a User's reputation have to be before it would be worthwhile to keep track of it incrementally with its own column? There really are two questions here in guise of one: (1) Will this change improve the performace and (2) Will the performance improvement be worth the effort? As far as whether the performance improvement, this is basically a standard pros/cons analysis. The benefits of normalization are basically two-fold: Easier data integrity No issues with re-calculation (e.g. if the underlying data changes, the derived column needs to be re-calculated). If you cover the data integrity with a robustly implemented solution (e.g. trigger, Sstored-proc-only data changes with revoked direct table change perms, etc...), then this becomes a straightforward calculation of whether the cost of verifying whether the source data change warrants the derived data re-calculation vs. recalculating the derived data every time. (NOTE: Another approach to keeping data integrity is to force the recalculation of derived data on schedule, where that data can afford to be inaccurate with some time tolerance. StackExchange takes this approach with some of its numbers). In a typical scenario (many more retrieval of data and far less changes to the underlying data) the math pretty obviously skews in favor of keeping de-normalized derived data in the table. In some rare cases where the underlying data changes VERY often yet the derived data is not retrieved that often, doing that might be detrimental. Now, we are onto the far more important question: Will the performance improvement be worth the effort? Please note that, as with ALL optimizations, the biggest question is "is the optimization even worth it at all?", and as such is the subject to two main considerations: Measuring exact performance difference and generally profiling. Context of this specific optimization in the big picture of your system. E.g. if the difference in query performace - which as always when optimizing must first be measured - is 2% between cached derived data and computed one, the extra system complexity in implementing the reputation cache column may not be worth it in the first place. But what the threshold of caring vs. not caring is as far as marginal improvement depends on the big picture of your app. If you can take steps to improve query performance 10% in a different place, concentrate on that vs. 2%. If you're Google and extra 2% of query performance carries cost of 2 billion dollars in extra hardware to bear it, it needs to be optimized anyway.
