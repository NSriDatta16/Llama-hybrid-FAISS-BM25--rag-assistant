[site]: stackoverflow
[post_id]: 4486005
[parent_id]: 4485488
[tags]: 
It's late, so here's a partial solution to a partially specified function: f[l_List, compFun_Symbol, el_] := Sort[l, compFun] /. {a___, b_ /; compFun[b, el], c_ /; compFun[el, c], d___} -> {b, c} I've taken the liberty of not requiring that the list supplied to the function f be sorted, since the input arguments include the comparison function. This function works well as long as (a) the element el is not a member of l and (b) there are elements in l sorted to both left and right of el . It probably doesn't work for LessEqual or GreaterEqual either. If you care to clarify what you'd like the function to return when either or both of (a) and (b) is not met, I'll be happy to have another look at this in the morning. EDIT: I think this satisfies the revised requirements. As before, it doesn't require that the input list be already sorted. f2[l_List, compFun_, el_] := Sort[Append[l, el], compFun] /. {a___, el, b___} :> {If[{a}==={}, Null, Last@{a}], If[{b}==={}, Null, First@{b}]} I'll leave it to others to judge the elegance and efficiency of this solution (I can see some obvious improvements in the latter respect). Now to get back to work.
