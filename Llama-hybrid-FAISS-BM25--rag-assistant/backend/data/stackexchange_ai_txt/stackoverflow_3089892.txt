[site]: stackoverflow
[post_id]: 3089892
[parent_id]: 3072264
[tags]: 
Got it. You need to wrap your XML with a ToString. It will put the XML declaration at the beginning of the XML to make it a valid XML document. I just tried it on my end and it worked. Since the above didn't work, I tried several other things and here is where I am at. I used Fiddler to monitor the HTTP requests that Poster makes that we know is a good request and here is the request header: POST https://workplace.intuit.com/db/main HTTP/1.1 Host: workplace.intuit.com User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3 ( .NET CLR 3.5.30729) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip,deflate Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7 Keep-Alive: 115 Connection: keep-alive QUICKBASE-ACTION: API_GetUserInfo Content-Type: application/xml; charset=UTF-8 Content-Length: 109 Cookie: scache=Jun 3 2010 18:30:57_3; ptest=1277297927934; stest=1277298582509 Pragma: no-cache Cache-Control: no-cache c4abnsdepseds7hdzurwvjjb4m jimmyhogoboom@gmail.com The next thing I tried was mimicking as much of the request as I could but it is still not returning the XML. Some things you will notice changed is the use of CFSAVECONTENT to get rid of the XML declaration and the addition of a number of header and cookie properties to try to simulate the Poster request: c4abnsdepseds7hdzurwvjjb4m jimmyhogoboom@gmail.com ---> CFHTTP is not translating some property as expected and I am just not sure which one it is. Maybe a second set of eyes will help. Might have to use CreateObject and Java directly (java.net classes) to do the HTTP request and bypass CFHTTP and what every wonky default it is adding to the HTTP request to cause it to fail.
