[site]: stackoverflow
[post_id]: 1408966
[parent_id]: 
[tags]: 
How to trigger a rebind of gridview from javascript or jQuery on markup page?

Is there a way to trigger a GridView rebind from an html markup page using jQuery or jscript? I have an ActiveX download control which passes all events via jscript. So, a have a download complete event on the markup page but not the code behind. Here is the main aspx page: function FileDownloader_DownloadStep(Step){ //The file list is going to be downloaded - "2 = About to Start" if (Step == 2){ //Dynamically build the filelist for the downloader getFileDownloader("FileDownloader").setFileList("GetFileList.aspx"); } //The user has confirmed the download - "6 = File Download About to Start" if (Step == 6){ //Perform the initialization updates to the first file only var xmlhttp; if (typeof XMLHttpRequest != 'undefined') { xmlhttp = new XMLHttpRequest(); } if (!xmlhttp) { throw "Browser doesn't support XMLHttpRequest."; } var data = ""; xmlhttp.open("POST", "UpdateVideoInitiated.aspx", true); //Send the proper header information along with the request xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); //xmlhttp.setRequestHeader("Content-length", data.length); xmlhttp.setRequestHeader("Connection", "close"); xmlhttp.send(data); } } function onDownloadItemComplete(Result, ErrorPage, Url, FileName, ContentType, FileSize){ var xmlhttp; var data; //The handler will display the error description or updates as noted switch (Result){ //Update the completed file as complete and then perform initialization updates to the next file only case 1: if (typeof XMLHttpRequest != 'undefined') { xmlhttp = new XMLHttpRequest(); } if (!xmlhttp) { throw "Browser doesn't support XMLHttpRequest."; } data = FileName; xmlhttp.open("POST", "UpdateVideoDownloaded.aspx?FileName=" + FileName + "&FileSize=" + FileSize, true); //Send the proper header information along with the request xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); //xmlhttp.setRequestHeader("Content-length", data.length); xmlhttp.setRequestHeader("Connection", "close"); xmlhttp.send(data); break; case 2: alert("An error has occurred while downloading the file " + FileName); break; //Update any skipped files to back off the initialization updates to the passed file only case 3: if (typeof XMLHttpRequest != 'undefined') { xmlhttp = new XMLHttpRequest(); } if (!xmlhttp) { throw "Browser doesn't support XMLHttpRequest."; } data = FileName; xmlhttp.open("POST", "UpdateVideoSkipped.aspx?FileName=" + FileName, true); //Send the proper header information along with the request xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); //xmlhttp.setRequestHeader("Content-length", data.length); xmlhttp.setRequestHeader("Connection", "close"); xmlhttp.send(data); break; case 4: alert("The server returned a wrong MIME type (should be " + ContentType + ") for the file " + FileName); break; case 5: alert("The server returned a wrong size (should be " + FileSize + ") for the file " + FileName); break; case 6: alert("An error has occurred while writing the file " + FileName + " to disk"); break; case 7: alert("The file " + FileName + " could not be found on the " + "server"); break; case 8: alert("Access to the file " + FileName + " denied"); break; case 9: alert("Time out while downloading the file " + FileName); break; } } function onDownloadComplete(Result){ //The handler will display the error description switch (Result){ //Update the member download statistics and rebind the grid??? case 0: if (typeof XMLHttpRequest != 'undefined') { xmlhttp = new XMLHttpRequest(); } if (!xmlhttp) { throw "Browser doesn't support XMLHttpRequest."; } data = ""; xmlhttp.open("POST", "UpdateDownloadsComplete.aspx", true); //Send the proper header information along with the request xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); //xmlhttp.setRequestHeader("Content-length", data.length); xmlhttp.setRequestHeader("Connection", "close"); xmlhttp.send(data); break; case 1: alert("An error has occurred while creating the file list"); break; case 2: alert("An error has occurred while downloading the file list"); break; case 3: alert("The file list is empty"); break; case 7: alert("The file list could not be found on the server"); break; case 8: alert("Access to the file list denied"); break; case 9: alert("Time out while downloading the file list"); break; } } Member Video Download Detail &nbsp;&nbsp;&nbsp;&nbsp; Current Escrow Balance (Available for Future Use): &nbsp;&nbsp; $280.00 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; Number of Files Selected for Download: &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Total MBytes: &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Estmated Download Time: &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Create JavaScript object that will embed File Downloader to the page var fd = new FileDownloaderWriter("FileDownloader", 170, 28); //For ActiveX control full path to CAB file (including file name) should be specified fd.activeXControlCodeBase = "aurigma/FileDownloader2.cab"; fd.activeXControlVersion = "2,0,16,0"; //Set the Download button text fd.addParam("ButtonDownloadText", "DOWNLOAD NOW"); //Set the Download button background color //fd.addParam("BackgroundColor", "#E0EBFF"); fd.addParam("BackgroundColor", "White"); //Set the Download button regular image fd.addParam("ButtonDownloadImageFormat", "width=170;height=28;BackgroundColor=White;" + "urlNormal=App_Themes/Default/images/BtnDownload.jpg;" + "urlHover=App_Themes/Default/images/BtnHover.jpg;" + "urlPressed=App_Themes/Default/images/BtnPressed.jpg;" + "urlDisabled=App_Themes/Default/images/BtnPressed.jpg"); //Set license key fd.addParam("LicenseKey", "13550-77033-55676-789DB-8332"); //Set reconnect attampts count fd.addParam("ReconnectAttemptsCount", "360"); //Set reconnect timeout value (30000 = 10 seconds) fd.addParam("ReconnectTimeOut", "10000"); //The following listener will perform some actions when the file list is about to be downloaded fd.addEventListener("DownloadStep", "FileDownloader_DownloadStep"); //The following listener will perform some actions when download of a single file is finished fd.addEventListener("DownloadItemComplete", "onDownloadItemComplete"); //The following listener will perform some actions when download process is complete fd.addEventListener("DownloadComplete", "onDownloadComplete"); //The following listener will perform some actions when a general error is detected //fd.addEventListener("Error", "onError"); //Add page load listener //fd.fullPageLoadListenerName = "fullPageLoad"; //Set instructions property fd.instructionsEnabled = true; //Tell File Downloader writer object to generate all necessary HTML code to embed File Downloader into the page fd.writeHtml(); ' /> &nbsp;&nbsp;&nbsp; ' CommandName="CheckUncheckVideo" ImageUrl=' ' Enabled=' ' Visible=' '/> Topic" HtmlEncode="false" > YYMMDD" HtmlEncode="false" DataFormatString="{0:00-00-00}" > Type" HtmlEncode="false" > &nbsp;&nbsp; (or) Support-File Name" HtmlEncode="false" > Password" HtmlEncode="false" > Download" htmlEncode="False" DataFormatString="{0:d}" > Downloads" htmlEncode="False" DataFormatString="{0:##0}" > &nbsp;&nbsp;&nbsp; And then here is the code behind (with basics): Imports System Imports System.Data Imports System.Data.SqlClient Imports System.Text Imports System.Text.RegularExpressions Imports System.Security.Permissions Imports System.IO Imports System.Net Partial Class MemberVideoDownloads Inherits System.Web.UI.Page Dim strConnection As String = ConfigurationManager.ConnectionStrings("MYTest").ConnectionString Dim cnnSQL As SqlConnection Dim cmdSQL As SqlCommand Dim dadSQL As SqlDataAdapter 'Member table Dim dtMember As New DataTable Dim drMember As DataRow 'Session Order table Dim dtSessionOrder As New DataTable Dim drSessionOrder As DataRow 'Member Order table for download Dim dtSessionOrdersForDownload As New DataTable Dim drSessionOrdersForDownload As DataRow Dim dvSessionOrdersForDownload As DataView 'Session Folder table Dim dtSessionFolder As New DataTable Dim drSessionFolder As DataRow 'Session Detail table Dim dtSessionDetail As New DataTable Dim drSessionDetail As DataRow 'Session Orders Selected table Dim dtSessionOrdersSelected As New DataTable Dim drSessionOrdersSelected As DataRow 'Constants Private Const BYTES_PER_MEGABYTE As Integer = 1048576 'Class Modules Dim sp As New StoredProcs Dim so As New SessionObjects Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load If Not (IsPostBack) Then 'Set the current and return pages so.Ppage = so.Cpage so.Cpage = "MemberVideoDownloads.aspx" 'Load the page information LoadPageInfo() 'Rebind the GridView RebindGridView() End If End Sub Private Sub LoadPageInfo() End Sub Protected Sub DisplaySelectedDownloadStats() End Sub Protected Sub grvSessionOrderDownloads_RowCommand(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs) Handles grvSessionOrderDownloads.RowCommand 'Display the statistics for the orders selected for download DisplaySelectedDownloadStats() 'Rebind the GridView RebindGridView() End Sub Private Sub RebindGridView() Dim maxDownloadsPerSession As Integer = Convert.ToInt32(ConfigurationManager.AppSettings("MaximumDownloadsPerSession")) cnnSQL = New SqlConnection(strConnection) If rblMemberMachine.SelectedValue = "3" Then cmdSQL = New SqlCommand("GetSessionOrdersForDownloadMachine3", cnnSQL) ElseIf rblMemberMachine.SelectedValue = "2" Then cmdSQL = New SqlCommand("GetSessionOrdersForDownloadMachine2", cnnSQL) Else cmdSQL = New SqlCommand("GetSessionOrdersForDownloadMachine1", cnnSQL) End If cmdSQL.CommandType = CommandType.StoredProcedure cmdSQL.Parameters.Clear() cmdSQL.Parameters.Add("@MEMB_ID", SqlDbType.VarChar, 20).Value = so.MEMB_ID cmdSQL.Parameters.Add("@DOWNLOAD_LIMIT", SqlDbType.Int).Value = maxDownloadsPerSession cnnSQL.Open() dadSQL = New SqlDataAdapter(cmdSQL) dadSQL.SelectCommand = cmdSQL dadSQL.Fill(dtSessionOrdersForDownload) cnnSQL.Close() drSessionOrdersForDownload = dtSessionOrdersForDownload.Rows(0) Dim Flag As Boolean = drSessionOrdersForDownload("SORD_EnableSelectionCheckBox") dvSessionOrdersForDownload = dtSessionOrdersForDownload.DefaultView dvSessionOrdersForDownload.Sort = "SORD_EnableSelectionCheckBox desc, SORD_Session desc, SORD_Topic, SORD_SessionTitle" grvSessionOrderDownloads.DataSource = dvSessionOrdersForDownload grvSessionOrderDownloads.DataBind() End Sub Private Sub Page_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.PreRender End Sub Protected Sub rblMemberMachine_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) 'Rebind the GridView RebindGridView() End Sub Protected Sub grvSessionOrderDownloads_OnRowDataBound(ByVal sender As Object, ByVal e As GridViewRowEventArgs) 'Color the selected rows End Sub End Class
