[site]: stackoverflow
[post_id]: 1253077
[parent_id]: 1253043
[tags]: 
The simple way to avoid instanceof testing is to dispatch polymorphicly; e.g. public class Client { void messageReceived(IMessage message) { message.doOperations(this); } } where each message class defines an appropriate doOperations(Client client) method. EDIT: second solution which better matches the requirements. An alternative that replaces a sequence of 'instanceof' tests with a switch statement is: public class Client { void messageReceived(IMessage message) { switch (message.getMessageType()) { case TYPE_A: // process type A break; case TYPE_B: ... } } } Each IMessage class needs to define an int getMessageType() method to return the appropriate code. Enums work just as well ints, and are more more elegant, IMO.
