[site]: stackoverflow
[post_id]: 2217686
[parent_id]: 264243
[tags]: 
First, I would define configuration elements representing the monitors: public class MonitorElement : ConfigurationElement { // ...whatever schema you prefer... } public class MonitorElementCollection : ConfigurationElementCollection { // ...standard implementation... } And a configuration section to host them: public class YourSection : ConfigurationSection { [ConfigurationProperty("monitors")] [ConfigurationCollection(typeof(MonitorElementCollection))] public MonitorElementCollection Monitors { get { return (MonitorElementCollection) this["monitors"]; } } } Then, I would define an interface representing the set of monitors: public interface IMonitorRepository { IEnumerable GetMonitors(); } And create an implementation which reads the configuration file: public sealed class ConfiguredMonitorRepository : IMonitorRepository { private readonly string _sectionName; public ConfiguredMonitorRepository(string sectionName) { _sectionName = sectionName; } public IEnumerable GetMonitors() { var section = (YourSection) ConfigurationManager.GetSection(_sectionName); if(section != null) { foreach(var monitor in section.Monitors) { yield return ...create and configure monitor... } } } } This defines where you turn the configuration into actual instances, which was only half your question. I think the XML syntax you have for setting constructor arguments and properties is fine. You might be able to glean some API and implementation ideas from Autofac's XML configuration system . Really, what you're doing is a forte of IoC containers; you could look into leveraging one of those.
