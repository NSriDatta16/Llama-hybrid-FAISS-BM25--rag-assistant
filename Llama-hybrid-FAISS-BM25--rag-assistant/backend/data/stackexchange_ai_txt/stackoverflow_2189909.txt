[site]: stackoverflow
[post_id]: 2189909
[parent_id]: 2188265
[tags]: 
First, your best bet would be to define a paragraph. Whether it is a line break, a double line break, or a line break followed by a tab. Assuming that you have no control over the input and want to determine the number of paragraphs in various samples of text, any of these situations may exist. Furthermore, they might be used to the same purpose within the same document. So some analysis is needed for this, and keep in mind it won't be 100% accurate all the time. Start by initializing the various possible paragraph breaks: "\r" "\n\r" "\n" System.getProperty("line.seperator") and all of those, but twice, and all those variations with an additional tab character ('\t') on the end. The inefficient way to do this would be to load the input into a string and then call buffer.split().length to determine how many paragraphs there were. The efficient, scalable way would be to use a stream and go over the input, taking into account how long the paragraph is, and throwing out those paragraphs beneath a given "threshold". A more advanced algorithm might even switch what it considers to be a paragraph after it encounters a switch in the way line breaks are handled (several very short lines, or several very long ones, for example). And all of this is assuming that you are dealing with unformatted text without section titles, etc. What it comes down to is the concept of asking how many paragraphs are in a particular piece of text is like asking how many weeks are in a year. It's not exactly 52, but it's around there.
