[site]: crossvalidated
[post_id]: 631373
[parent_id]: 631324
[tags]: 
The problem is twofold. Technically it is possible to create these decision boundaries for hand-drawn digits. The problem is the input size is too large. You have 784 pixel for the hand-drawn digit set. But you only have an x and y axis. So which pixels would you want to put on the axis? As you can see in this example form the scikit documentation: https://scikit-learn.org/stable/auto_examples/tree/plot_iris_dtc.html It is possible to generate these decision boundaries for the Iris dataset even tho in contains 3 classes. But here we only use two input variables. It is not like for hand-drawn digits these decision boundaries do not exist, but rather we can not visualize them because they exist in such a high-dimensional space. The intuition with a decision boundary works very well when you try to separate between two classes because you only need to predict a single value 1 or 0 or True or False . These Neural Networks require only a single output neuron that produces this classification. In the case of hand-written digits you need to differentiate between 10 digits, hence the neural network requires 10 output neurons (you could technically get away with 9). So the first output is responsible for the first digit ( 0 ). The second neuron is responsible for the second digit ( 1 ) and so on. Each individual neuron "makes" a simple prediction is the input image showing the digit I am assigned to. In the case of the first output neuron, it would decide whether the image shows a 0 or not. So the decision boundary for the first output neuron would just highlight the boundary for "being a 0 " or "being not a 0 ". The same goes for all other output neurons and their assigned digit. So each output neuron, and hence each digit, receives its own decision boundary if you will. However , in the case of the digits the neurons should not necessarily be independent. If the first neuron predicts the image to be a 0 , then technically it is also possible for other neurons to also predict their assigned digit. So both the neuron for 0 and 7 could at the same time predict that the image is shown a 0 and 7 . We use a special softmax function on the output neurons, that (tries) ensure that these cases do not happen. In this cases, you could, in theory, highlight the decision boundary, if we were able to see in 784 dimensions.
