[site]: stackoverflow
[post_id]: 4171420
[parent_id]: 
[tags]: 
Why isn't my JSP displaying in the German (de_DE) locale when I use ?

I've created the following JSP: Insert title here Your locale is . "> When I try to visit the page with this URL: http://localhost:8080/SamsTeachYourselfJSP/pages/ResourceBundlesJSTL.jsp?languageOverride=de_DE This is displayed to the screen: Hello! Welcome to our web site. Please take a moment to fill out our survey Your locale is de_DE. What is your name: How old are you: Where do you live: The page is evidently finding and using the English properties file instead of the German one even though the server picked up my parameter to set the locale to de_DE and accepted the command to set the locale. The resource I expect it to call contains: # /src/hu/flux/locale/resources/TestResources_de.properties namePrompt=Wie hei[gb]en Sie: agePrompt=Wie alt sind Sie: placePrompt=Wo wohnen Sie: greetHeading=Guten Tag! welcomeText= Willkommen bei unserer Web-Site. Bitte, dauern Sie einen Moment Um unsere Umfrage auszuf√ºllen submitButtonText=Senden I'm pretty sure the problem isn't in my LanguageToolkit class since that works fine with a non-JSTL version of this page, but if anyone wants to see it: /** * /src/hu/flux/locale/LanguageToolkit.java */ package hu.flux.locale; import java.util.Locale; import java.util.StringTokenizer; import javax.servlet.http.HttpServletRequest; /** * @author Brian Kessler * */ public class LanguageToolkit { /** * */ public LanguageToolkit() { // TODO Auto-generated constructor stub } public static Locale getLanguage(HttpServletRequest request) { Locale locale = Locale.getDefault(); // Get the browser's preferred language. String acceptLangString = request.getHeader("ACCEPT-LANGAUGE"); // Allow the user to override the browser's langauge setting. // This lets you test with tools such as Babelfish // (which isn't that great at translating to begin with). String override = request.getParameter ("languageOverride"); if (override != null) { acceptLangString = override; } // If there is an ACCEPT-LANGUAGE header, parse it. if (acceptLangString != null) { Locale acceptedLocale = parseLangString (acceptLangString); if (acceptedLocale != null) {locale = acceptedLocale;} } return locale; } public static String getLanguageString(HttpServletRequest request) { String locale = "EN-uk"; // Get the browser's preferred language. String acceptLangString = request.getHeader("ACCEPT-LANGAUGE"); // Allow the user to override the browser's langauge setting. // This lets you test with tools such as Babelfish // (which isn't that great at translating to begin with). String override = request.getParameter ("languageOverride"); if (override != null) { acceptLangString = override; } // If there is an ACCEPT-LANGUAGE header, parse it. if (acceptLangString != null) {locale = acceptLangString;} return locale; } private static Locale parseLangString(String acceptLangString) { // The accepted languages should be separated by commas, but also // add space as a separator to eliminate whitespace. StringTokenizer localeParser = new StringTokenizer(acceptLangString, " ,"); // See whether there is a language in the list (you need only the first one). if (localeParser.hasMoreTokens()) { // Get the locale. String localeStr = localeParser.nextToken(); // The local should be in the format ll-CC where 11 is the language // and CC is the country, like en-US for English in the U.S. and // de-DE for German in Germany. Allow the browser to use _ instead // of -, too. StringTokenizer localeSplitter = new StringTokenizer (localeStr, "_-"); // Assume both values are blank. String language = ""; String country = ""; // See whether a language is specified. if (localeSplitter.hasMoreTokens()) {language = localeSplitter.nextToken(); } // See whether a country is specified (there won't always be one). if (localeSplitter.hasMoreTokens()) {country = localeSplitter.nextToken(); } // Create a local based on this language and country (if country is blank, // you'll still get locale-based text, but currencies won't display correctly. return (new Locale(language, country)); } return null; } /** * @param args */ public static void main(String[] args) { // TODO Auto-generated method stub } } Any ideas why I am seeing English and how to fix it?
