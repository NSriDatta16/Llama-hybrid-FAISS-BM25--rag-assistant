[site]: crossvalidated
[post_id]: 220129
[parent_id]: 219980
[tags]: 
The problem here is that given the fact that the first stage has not reached significance, the second stage has less chance than its theoretical 0.049 to reach significance. Intuitively one can think that preferences are more likely to be centered on half-half if stage 1 has not reached significance. If it was not the case, your computation of your real alpha would have been 1-(1-0.049)*(1-0.049). By the way this number is the type I error, not a p value (anyway, I guess you wrote p-value by inattention) : $$1-(1-P(X1))*((1-P(X2|\bar{X1})$$ where X1 represents the event "statistical significance reached as step 1" X2 represents the event "statistical significance reached as step 2" Adding probabilities as you did is not correct, X1 and X2 are not disjoincted events. They can be true together. The tricky part, here, is to compute $(1-P(X2|\bar{X1})$. I do not know if there is a direct formula giving it. However, a simulation, or a crude calculation both gives the alpha you are looking for. I computed both on python. I hope the code is not too hard to grasp. Simulation import random success=0 random.seed(44) trials=1000000 for i in range(trials): preferences=[bool(random.getrandbits(1)) for j in range(44)] countTo_17=sum(preferences[:17]) countTo_44=sum(preferences) if((countTo_17) =13)or((countTo_44) 28): success+=1 print(success/float(trials)) This gave 0.084878 Crude computation We want to compute $(1-P(X2|\bar{X1})$. The idea is to enumerate all the possible cases giving significance and associating their probabilities. The probability of each number of preferences got at stage 1 is given by the binomial law. But one must not forget the fact that significance has not been reached at stage 1, so the probabilities have to be "normalized" by a coefficient allowing that the sum of the different oucomes reach 1. This is what coeff in the code below do. After the computation have been done, one must do the same for the number of preferences accumulated at stage 2 and multiply both probabilities. from scipy.stats import binom probaReachingStage1=0.049 coeff=(1/(1-probaReachingStage1)) probaReachingStage2=0 for sumOfPref_stage1 in range(5,13): p1=coeff*binom.pmf(sumOfPref_stage1, 17,0.5) for sumOfPref_stage2 in range(27): TotalsumOfPreferences=sumOfPref_stage1+sumOfPref_stage2 if(TotalsumOfPreferences>28)or(TotalsumOfPreferences Which also gives 0.08488
