[site]: stackoverflow
[post_id]: 3142852
[parent_id]: 3141733
[tags]: 
Releasing memory that is not needed anymore is an ideal goal, but it is not possible to do it automatically in all generality. Even in the absence of external input (which may affect whether some piece of data will be needed or not), deciding, given the complete state of the memory and the complete code, whether some piece of memory will be needed is equivalent to the halting problem , which is impossible to solve for a computer. Needless to say, the same problem also exceeds the capacities of the average programmer brain quite fast, as the application size grows. Perfectly correct memory management can be achieved, in practice, only in two situations: the problem is simple (e.g. short-lived command-line application) and the programmer disciplined enough; the programmer is Donald Knuth . In all other cases, we have to use approximations. A garbage collector relies on the following approximation: it detects unreachable blocks of memory. It cannot tell whether a reachable block will be used or not, but an unreachable block will not be used (because using implies reaching). Another common approximation (used by many programmers who feel they are wise enough) is to simply assume that they thought of every block, and then pray for the best (a variant being: educate your users into believing that memory leaks are a feature, and that a reboot every now and then is normal).
