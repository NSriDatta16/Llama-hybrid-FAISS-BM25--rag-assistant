[site]: stackoverflow
[post_id]: 5506078
[parent_id]: 5505894
[tags]: 
Using dynamic programming you can do this in O(n). Ground truth is that no values of i and j can give us 0, and to get 1 both values must be 0; TwoCount[1] = 0 FiveCount[1] = 0 // function returns two values i, and j FindIJ(x) { if (TwoCount[x / 2]) { i = TwoCount[x / 2] + 1 j = FiveCount[x / 2] } else if (FiveCount[x / 5]) { i = TwoCount[x / 2] j = FiveCount[x / 5] + 1 } } Whenever you call this function check if i and j are set, if they are not null, then populate TwoCount and FiveCount C++ answer. Sorry for bad coding style, but i'm in a hurry :( #include #include #include int * TwoCount; int * FiveCount; using namespace std; void FindIJ(int x, int &i, int &j) { if (x % 2 == 0 && TwoCount[x / 2] > -1) { cout -1) { cout -1 && j > -1) { cout Obviously you can use data structures other than array to dynamically increase your storage etc. This is just a sketch to prove that it works.
