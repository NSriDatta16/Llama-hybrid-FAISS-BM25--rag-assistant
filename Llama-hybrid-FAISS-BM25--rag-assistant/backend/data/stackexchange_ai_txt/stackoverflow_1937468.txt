[site]: stackoverflow
[post_id]: 1937468
[parent_id]: 1937362
[tags]: 
You can define True and False with objects (in a pseudo-python): class True: def if(then,else): return then def or(a): return True() def and(a): return a def not(): return False() class False: def if(then,else): return false def or(a): return a def and(a): return False() def not(): return True() I think it is an elegant way to construct booleans, and it proves that you can replace every if by polymorphism, but that's not the point of the anti-if campaign. The goal is to avoid writing things such as (in a pathfinding algorithm) : if type == Block or type == Player: # You can't pass through this else: # You can But rather call a is_traversable method on each object. In a sense, that's exactly the inverse of pattern matching. "if" is useful, but in some cases, it is not the best solution.
