[site]: stackoverflow
[post_id]: 5638088
[parent_id]: 5635849
[tags]: 
OK, I somehow misunderstood your question. So bye bye Fedorov, hello applied Fedorov. The following algorithm is based on the second iteration of the Fedorov algorithm : calculate all possible permutation for every set, and store them in the C0 list draw a first possible solution from the C0 space (one permutation for every set). This can be the original one, but as I need the indices, I rather just start at random. calculate the score for every new solution, where the first set is replaced by all permutations. replace the first set with the permutation giving the lowest score repeat 3-4 for every other set repeat 3-5 until score reaches 0 or for n iterations. Optionally, you can restart the procedure after 10 iterations and start from another starting point. In you test case, it turned out that few starting points converged very slowly to 0. The function below found balanced experimental designs with a score of 0 in on average 1.5 seconds on my computer : > X balanceScore(balanceMatrix(X)) [1] 0 > mean(replicate(20, system.time(X So this is the function now (given your original balanceMatrix and balanceScore functions) : findOptimalDesign 0){ for(i in 1:nsets){ nn HTH EDIT : fixed small bug (it restarted immediately after every round as I forgot to condition on IT). Doing that, it runs a bit faster still.
