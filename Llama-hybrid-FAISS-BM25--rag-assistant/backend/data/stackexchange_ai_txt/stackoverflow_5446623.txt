[site]: stackoverflow
[post_id]: 5446623
[parent_id]: 
[tags]: 
C Function Pointers - What happens when you drop an argument?

all. I'm currently working with an old established code base for a new project which is basically undocumented (i.e. averages 1 one-line comment per file). I just ran into something which I haven't seen before and am not quite sure how to interpret. Firstly, they define a function type and a function in the header file (.h) in the form: typedef void (*SOME_FUNCTION)(void *data, EXECUTION_CONTEXT *ec); void add_function(SOME_FUNCTION aFunction, void *data); In the main source file (.c), there is a function defined: void add_function(void (*f)(void *data), void *data) { (Some code here) } So okay, there's a function pointer... but what the heck happened to the second argument, ec? Why would someone use a code design like this? For reference, when the function add_function is used, it is used in this sort of form: void passedFunction(void *data, EXECUTION_CONTEXT *ec) { (Stuff the function does.) } void CallingFunction() { data = (some data stuff); add_function((SOME_FUNCTION)passedFunction, data); } So, as you can see, the passed functions use the correct form that fits the original SOME_FUNCTION argument signature, but the definition for the add_function arguments is short by one argument.
