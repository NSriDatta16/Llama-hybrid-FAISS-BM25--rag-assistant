[site]: stackoverflow
[post_id]: 5213883
[parent_id]: 4759387
[tags]: 
The dragleave event doesn't actually do what it implies. It's not until you move a draggable object over a dropzone, then move it out without dropping that dragleave fires. It hasn't been implemented for detecting a previously dropped item being dragged out of a dropzone. It is simply part of the event chain falling somewhere between dragstart and dragend. From the spec, it occurs if "the drag operation failed". (Firefox apparently has a known issue in that the dragleave event is called even if the drop succeeded). http://www.w3.org/html/wg/drafts/html/master/editing.html#drag-and-drop-processing-model So you're both partially correct. "It is an indicator that a draggable object was dragged out of another object." is true, so long as that draggable object was not previously dropped. Also, to determine that no drop happened is a valid use for the dragleave event. If what you're trying to accomplish is knowing that after a draggable object has been dropped, it was later removed from the dropzone (i.e. user put something in a trash bin, then decided they wanted to drag it out later), you'll basically be reversing the previous drag/drop events... i.e. your container of draggable items will now become a dropzone, and your original dropzone will contain draggable items or however you figure out based on your setup. EDIT: Philosophical reasoning... If you can assume that not all Zinks are Zorks, then you can assume that not all applications which implement drag/drop functionality will want to allow a user who dropped something somewhere to remove that dropped item later. Therefore, using drag/drop in certain scenarios would incur the memory overhead by the browser to maintain state of which items had been previously dropped at all times. (Picture a jigsaw puzzle where there is no concept of "state").
