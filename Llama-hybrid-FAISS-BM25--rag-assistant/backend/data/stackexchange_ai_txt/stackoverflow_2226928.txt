[site]: stackoverflow
[post_id]: 2226928
[parent_id]: 2226664
[tags]: 
The code: (while *s++ = *t++); is roughly equivalent to: while (*s = *t) { ++s; ++t; } The second is exactly the same -- the extra parens don't change anything (in this case). For the parens to do anything, they'd have to be like: while ((*s)++ = (*t)++); . This would do roughly the same as your third example (covered in the paragraph below). The last example: while(++*s = ++*t); is completely different. Since the dereference ( * ) is closer to the operand, this dereferences the operand, and increments the result of the dereference, which means it increments what the pointer points AT, instead of incrementing the pointer itself. As a result, this would copy the first character, then increment that character, then check whether that character was non-zero and continue the same until it was zero. The result would be both the source and the destination becoming empty strings (since the first character of both would now be a zero, which is used to terminate strings).
