[site]: stackoverflow
[post_id]: 3123977
[parent_id]: 3123939
[tags]: 
The terminology can be confusing because "slot" is often a metaphor for a memory location or a single place. With TLS, the slot is merely a "name" to a place in the thread's private storage. On x86/x84 there is no real thread local storage - all memory is global - so the system takes care of mapping each "slot" in TLS to a different actual memory location, according to the thread that is accessing it. Requests from the same thread for a slot result in the same memory location - accesses from different threads to the same slot results in different memory locations. Synchronization is then not necessary since each thread is seeing different data. Unless of course you choose to store the same object in the TLS of two different threads, then that's a different story, but that's quite contrived case - the sharing is not because of TLS.
