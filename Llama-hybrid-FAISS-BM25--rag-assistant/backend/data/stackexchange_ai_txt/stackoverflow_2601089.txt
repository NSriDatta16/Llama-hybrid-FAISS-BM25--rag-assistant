[site]: stackoverflow
[post_id]: 2601089
[parent_id]: 2600161
[tags]: 
I don't think it is one answer I think it's a combination: The registry at the time of creating it looked like a good idea to store all settings for all programs in one place as oppose to the .ini files generally used before. At the time this increased performance as small .ini file reads from slow hard drives were costly, a single registry file somewhat increased performance. This is now different as hard drives are far faster and more and more settings have been dumped in the registry making it a burden on the system. You will see this if you install and uninstall lots of programs in windows it begins to slow down and eventually you probably end up reformatting. An incorrect write to the registry even in the current user settings can ruin your system. The registry doesn't help xcopy deployment of programs without specific code to handle lack of registry keys... This includes removing programs by simply deleting the folder in many cases Greater permissions can be needed to install an application if it needs access to the registry A .config file easily allows default application and user setting which can be modified on first run of the program by the end user Allows .NET to potentially run on other systems without OS specific code. This can somewhat be seen with Silverlight and isolated storage. Greater security through the use of Isolated Storage for the application and users Gives Microsoft the possibility way in the future to have a managed code only OS without many old dependencies. Think of the framework as a layer between any OS and the managed code.
