[site]: stackoverflow
[post_id]: 4504856
[parent_id]: 4504529
[tags]: 
It is difficult to begin an explanation here, since you seem to have a whole stack of misconceptions. First question (how to compose symbol names): Lisp macros do not operate on text but on code . In a backquote form, ,class evaluates to the code passed into the class parameter of the macro, most likely a class name in this case. Writing another symbol after that does not magically merge the symbol names; why should it? If you want to compose a new symbol name, you have to construct it: ,(intern (string-upcase (concatenate 'string (symbol-name class) "-insert"))) Second question (why it seems to expand only the second part): the contents of a defmacro form are evaluated in an implicit progn (that is why it does not complain about an invalid number of arguments here). The return value of the last form is the return value of the whole defmacro form. In this case, the return value is the code produced by that backquote form. A macro defines a function that expands a form into a new form; you cannot expand it into two unrelated forms. You have to produce a progn form that contains the two forms you want to have. Third question (why your code looks so different from what Lispers write): do not throw around parentheses like nail clippings. There are several Lisp style guides flying around on the net. Read them. Wer die Form beherrscht, kann mit ihr spielen (roughly: when you know the proper way, you can play with it). Fourth question (how to come around the perceived limitation of clsql): you could ask that question directly, no? What limitation do you mean?
