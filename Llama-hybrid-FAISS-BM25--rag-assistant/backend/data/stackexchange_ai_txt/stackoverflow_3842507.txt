[site]: stackoverflow
[post_id]: 3842507
[parent_id]: 3842452
[tags]: 
Code Complete is a book which is part of the Microsoft Collection. It contains advice advocating peer review and brushing upon unit testing as a concept. It does not go too far into detail with unit tests, but it may warm him up to the idea and you can further explore the topic from there. Ultimately you need somebody who is a programmer directly involved in automating testing... I mean, that's by definition. Unit tests are most effectively written by the people who are most familiar with the subsystems they are written for, when someone else is chosen to write unit tests it takes them time to ramp up, and they may miss intention not documented or clear in the code which could result in worse coverage. On the flip side, the owner of the subsystem can be blind to certain deficiencies as well (but this is what peer code reviews are for!) The rest of this is really just idle discussion about ethics, but it's important to consider. Some people like to try and "sneak shit in" to the build when management makes silly decisions. This makes me not only uneasy, but also kind of wary about those programmers. I understand the motivation, I think we've all been there, but ultimately you should educate rather than participate in subterfuge. Management plays an important role in scheduling and they rely on you for both accurate estimates and a general understanding of work being done. If you pad your estimates to sweep extra work under the rug is that really a good thing? What was a simple lie becomes this elaborate hoax you're playing on the people directly involved in helping your career progress. What was a problem with process and estimation for legitimate work has now become a sticky ethics issue. I strongly recommend going about your planned approach of convincing your manager to see your point of view through reason, logic, and appealing to his love of Microsoft. ;) Over the long term if you find yourself constantly fighting management on decisions about programming process (which really isn't their job to make decisions on) it would probably be best to polish up that resume and find a better job. Part of a programmer's job is to educate the people involved who have less expertise. Explaining that to your manager may help break down some of the intellectual barriers he has on the subject and soften him up to accepting your advice on the matter.
