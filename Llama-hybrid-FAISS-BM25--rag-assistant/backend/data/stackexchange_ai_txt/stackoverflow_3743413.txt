[site]: stackoverflow
[post_id]: 3743413
[parent_id]: 3743329
[tags]: 
Don't store the class itself, store the import path as a string in the database (e.g. 'django.forms.CharField') I started doing this same thing for another project, and saved off the code in my local repository. To address the security concerns I was going to add an argument to the field constructor of allowed base classes. If you do implement this, let me know, I'd love to have it. helpers.py def get_class_from_concrete_classpath(class_path): # Unicode will throw errors in the __import__ (at least in 2.6) class_path = str(class_path) mod_list = class_path.split('.') module_path = '.'.join(mod_list[:-1]) class_name = mod_list[-1] base_mod = __import__(module_path, fromlist=[class_name,]) return getattr(base_mod, class_name) def get_concrete_name_of_class(klass): """Given a class return the concrete name of the class. klass - The reference to the class we're interested in. Raises a `TypeError` if klass is not a class. """ if not isinstance(klass, (type, ClassType)): raise TypeError('The klass argument must be a class. Got type %s; %s' % (type(klass), klass)) return '%s.%s' % (klass.__module__, klass.__name__) fields.py class ClassFormField(forms.Field): def to_python(self, value): return get_concrete_name_of_class(value) class ClassField(models.CharField): __metaclass__ = models.SubfieldBase """Field used for storing a class as a string for later retrieval""" MAX_LENGTH = 255 default_error_messages = { 'invalid': _(u'Enter a valid class variable.'), } def __init__(self, *args, **kwargs): kwargs['max_length'] = kwargs.get('max_length', ClassField.MAX_LENGTH) super(ClassField, self).__init__(*args, **kwargs) def get_prep_value(self, value): if isinstance(value, (basestring, NoneType)): return value return get_concrete_name_of_class(value) def to_python(self, value): if isinstance(value, basestring): return get_class_from_concrete_classpath(value) return value def formfield(self, **kwargs): defaults = {'form_class' : ClassFormField} defaults.update(kwargs) return super(ClassField, self).formfield(**defaults)
