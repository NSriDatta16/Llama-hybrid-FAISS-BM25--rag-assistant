[site]: stackoverflow
[post_id]: 3237021
[parent_id]: 3236889
[tags]: 
Theoretically you compare algorithms using the big O notation , which lets you compare which algorithm will be faster for "almost infinite" problem. In practise in most cases this is a very good staring point to compare how the algorithms will behave in real life. The two most popular fast sort algorithms are MergeSort and quick sort. Merge Sort is guaranteed to be O(n log n) for any data, whereas quick sort has average time of O(n log n) and pessimistic time O(n^2). In practise most people use quick sort, because: It happens almost in place naturally (I think you can make merge sort in place but it is tedious and will make it slower - it will increase the constant hidden in the O notation) - for large data sets this is an issue if the data does not fit into memory It is faster in practise in most cases You can modify it slightly (i.e. take the median of first, middle and last element for partitioning) so that it is very difficult to get data that would make it slow To sum up I think quick sort will be quicker for your random floats, even though only looking at the O notation it seems worse - because you will get the expected O(n log n) and it will have a smaller constant than merge sort.
