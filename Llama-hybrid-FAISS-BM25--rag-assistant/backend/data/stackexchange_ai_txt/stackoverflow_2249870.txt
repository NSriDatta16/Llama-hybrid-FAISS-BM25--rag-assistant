[site]: stackoverflow
[post_id]: 2249870
[parent_id]: 
[tags]: 
How to improve maintainability of functions

I will expand here on a comment I made to When a method has too many parameters? where the OP was having minor problems with someone else's function which had 97 parameters. I am a great believer in writing maintainable code (and it is often easier to write than to read, hence Steve McConnell(praise be upon his name)'s phrase "write only code"). Since statistics how that most car accidents happen at junctions and my experience (ymmv) shows that most "anomalies" occur at interfaces, I will list some things that I do to attempt to avoid misunderstandings at interfaces and invite your comments if I am going badly wrong. But, more importantly, I invite your suggestions for making things even more prophylactic (see, there is a question after all - how to improve things?). Adequate documentation, in the form of (up to date) DoxyGen format comments describing the nature and porpoise of each parameter. absolutely NO back-door shenanigans with global variables as hidden parameters. try to limit parameters to six or eight. If more, pass related parameters as a structure; if they are not related then seriously reconsider the function. If it needs so much information, is it too complex to maintain? Can it be broken down into several smaller functions? use the CONST as often as possible and meaningful. a coding standard that says that input parameters come first, then output only, and finally input/output, which are modified by the function. I also #define some empty macros to make declarations even easier to read: # define INPUT # define OUTPUT # define MODIFY bool DoSomething(INPUT int howOften, MODIFY Wdiget *myWidget, OUTPUT WidgetPtr * const nextWidget) Just a few ideas. How can I improve on these? Thanks.
