[site]: stackoverflow
[post_id]: 1968037
[parent_id]: 1968014
[tags]: 
One could argue that testing the whole registration process is too high-level. Small pieces of functionality tend to be far easier to write tests for whereas more complicated tests often require a fair amount of scaffolding. The strict approach would be to aim for 100% (or close to it) code coverage on your unit tests (many IDEs either have the capability to measure this directly or via some kind of plug-in). In practice you may not want to be so strict but instead pick key classes that you need to work because so much else depends on them. One of the advantages of dependency injection ("DI") or inversion of control ("IoC") is that it encourages you to break your code up into pluggable pieces, which not only makes your code easier to test (because you can easily plug-in mocks) but also tends to make those pieces smaller. Writing tests for many small pieces tends to be much quicker than for fewer large pieces. Testing a whole registration process is more about systems or integration testing.
