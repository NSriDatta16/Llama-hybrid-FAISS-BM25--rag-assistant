[site]: stackoverflow
[post_id]: 1682919
[parent_id]: 
[tags]: 
Removing url fragment from NSURL

I'm writing a Cocoa application, which uses NSURLs -- I need to remove the fragment portion of the URL (the #BLAH part). example: http://example.com/#blah should end up as http://example.com/ I found some code in WebCore that seems to do it by using CFURL functionality, but it never finds the fragment portion in the URL. I've encapsulated it in a extension category: -(NSURL *)urlByRemovingComponent:(CFURLComponentType)component { CFRange fragRg = CFURLGetByteRangeForComponent((CFURLRef)self, component, NULL); // Check to see if a fragment exists before decomposing the URL. if (fragRg.location == kCFNotFound) return self; UInt8 *urlBytes, buffer[2048]; CFIndex numBytes = CFURLGetBytes((CFURLRef)self, buffer, 2048); if (numBytes == -1) { numBytes = CFURLGetBytes((CFURLRef)self, NULL, 0); urlBytes = (UInt8 *)(malloc(numBytes)); CFURLGetBytes((CFURLRef)self, urlBytes, numBytes); } else urlBytes = buffer; NSURL *result = (NSURL *)CFMakeCollectable(CFURLCreateWithBytes(NULL, urlBytes, fragRg.location - 1, kCFStringEncodingUTF8, NULL)); if (!result) result = (NSURL *)CFMakeCollectable(CFURLCreateWithBytes(NULL, urlBytes, fragRg.location - 1, kCFStringEncodingISOLatin1, NULL)); if (urlBytes != buffer) free(urlBytes); return result ? [result autorelease] : self; } -(NSURL *)urlByRemovingFragment { return [self urlByRemovingComponent:kCFURLComponentFragment]; } This is used as such: NSURL *newUrl = [[NSURL URLWithString:@"http://example.com/#blah"] urlByRemovingFragment]; unfortunately, newUrl ends up being " http://example.com/#blah " because the first line in urlByRemovingComponent always returns kCFNotFound I'm stumped. Is there a better way of going about this? Working Code, thanks to nall -(NSURL *)urlByRemovingFragment { NSString *urlString = [self absoluteString]; // Find that last component in the string from the end to make sure to get the last one NSRange fragmentRange = [urlString rangeOfString:@"#" options:NSBackwardsSearch]; if (fragmentRange.location != NSNotFound) { // Chop the fragment. NSString* newURLString = [urlString substringToIndex:fragmentRange.location]; return [NSURL URLWithString:newURLString]; } else { return self; } }
