[site]: stackoverflow
[post_id]: 4567659
[parent_id]: 
[tags]: 
libpcap get MAC from AF_LINK sockaddr_dl (OSX)

I am trying to obtain the MAC addresses of all of my interface on OSX using C. The common ways to obtain it Linux dont work on BSD - from everything I have seen, you must obtain the interfaces and look for the ones that are of type AF_LINK. My problem is that the LLADDR(sockaddr_dl) gives me a whole bunch of data (which includes my MAC) and I dont know what format the data is in. For example; the following code will output: Device: en1 link sdl_alen: 101 mac: 31: f8:1e:df:d6:22:1d :00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:b0:06:10:00:01:00:00:00:c0:02:10:00:01:00:00:00:00:00:00:00:00:00:00:00:40 :03:10:00:01:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:03:00:6c:6f:30:00:00:00:00:00:00:00:00:00:00:00:00:00:70:03:10:00:01:00:00:00:e0: 02:10:00:01:00:00: My MAC is bolded. It seems that this is the format all of the time, but I would be a lot more comfortable if I could cast LLADDR(sockaddr_dl) to something. In the net/if_dl.h, LLADDR is defied as: #define LLADDR(s) ((caddr_t)((s)->sdl_data + (s)->sdl_nlen)) which, as far as I can tell, is saying that the results are of type (void *) - no help. Other posts like: Having a problem figuring out how to get Ethernet interface info on Mac OS X using ioctl/SIOCGIFADDR/SIOCGIFCONF? seem to think they have it figured out, but if you look through the code, you can see it will not work due to sdl_alen not being 6. int main() { pcap_if_t *alldevs; pcap_if_t *d; pcap_addr_t *alladdrs; pcap_addr_t *a; struct sockaddr_dl* link; char eb[PCAP_ERRBUF_SIZE]; char *addr_buf[40]; if (pcap_findalldevs(&alldevs, eb) == -1) { printf("no devs found\n"); return(-1); } for (d = alldevs; d != NULL; d = d->next) { printf("Device: %s\n", d->name); alladdrs = d->addresses; for (a = alladdrs; a != NULL; a = a->next) { if(a->addr->sa_family == AF_LINK && a->addr->sa_data != NULL){ // MAC ADDRESS //struct sockaddr_dl *sdl = (struct sockaddr_dl *) a->addr->sa_data; link = (struct sockaddr_dl*)a->addr->sa_data; char mac[link->sdl_alen]; caddr_t macaddr = LLADDR(link); memcpy(mac, LLADDR(link), link->sdl_alen); printf("link sdl_alen: %i\n", link->sdl_alen); int i; printf("mac: "); for(i = 0; i sdl_alen; i++){ printf("%02x:", (unsigned char)mac[i]); } printf("\n"); } } } }
