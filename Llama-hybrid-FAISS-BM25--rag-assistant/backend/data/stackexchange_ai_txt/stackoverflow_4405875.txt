[site]: stackoverflow
[post_id]: 4405875
[parent_id]: 4405757
[tags]: 
The official way of doing this is to handle the WM_NCPAINT message that Windows sends to your window when it wants you to draw the non-client area of the form (title bar, close button, borders, etc.) It can be quite a hassle but it may not be necessary. Scott has suggested a way to get a borderless WPF Window and the Windows Forms approach is similar. Refer to the FormBorderStyle property. In order to support dragging the window around as if the title bar were being dragged, you'll want to send a WM_NCLBUTTONDOWN message to the window passing the HT_CAPTION constant as the wParam. For example, handle the MouseDown event on the control that you want to be "draggable". if (e.Button == MouseButtons.Left) { SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0); } This requires the following P/Invoke declarations. const int WM_NCLBUTTONDOWN = 0xA1; const int HT_CAPTION = 0x2; [DllImportAttribute("user32.dll")] static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam); Finally, to achieve a non-rectangular window, you'll want to have a look at the Region property. You can assign a non-rectangular region to the form and it will be clipped to this region.
