[site]: crossvalidated
[post_id]: 184127
[parent_id]: 
[tags]: 
Detecting Change in Usage Patterns of an Application

Question Is there a way to determine if someone is outside of their normal patterns using some statistical/machine learning method? I wrote about the Bayesian method because I understand it the best, but I'm open to answers using other methods. Background I'm trying to come up with a way to detect when someone using a web application deviates from their normal usage pattern for that application. I'll be using a log created by the application to do the analysis. I'm not the creator of the application, so I can't make modifications to what gets logged. I'm looking into this project to catch malicious users stealing passwords and changing data to benefit themselves. The log contains the following fields for every logged event: IP Address, User, Program opened, Date/Time Program Opened, Permissions on the program . A sample log may look like this: IP Address, Username, Program, Date/Time, Program Permission 192.168.0.1, User A, Login, 2015-11-29 07:00:00 AM, Read/Write 192.168.0.1, User A, Employee Demographics, 2015-11-29 07:00:20 AM, Read/Write 192.168.0.1, User A, Employee Leaves, 2015-11-29 07:05:00 AM, Read-Only 192.168.0.2, User A, Login, 2015-11-29 09:00:00 AM, Read/Write What I have so far would be storing $ P(IP Address | User) $ and doing a basic comparison and check $ P(User | IP Address) $ for new entries. I could probably factor the Date/Time down to the Day of Week and Hour of the Day for doing a similar calculation. But when factoring in the Program used, should I calculate $ P( Program | User) $, $ P( Program | IP Address) $, $ P( Program | DoW) $, and $ P( Program | Hour) $? Am I risking creating something too complicated by tracking that much data? Am I approaching this problem in an inefficient way? I'm also trying to catch cases of a user with less rights logging in from one address, then a user with more rights logging in immediately afterwards in the sequence from the same IP Address. I think I'm just going to resort to a sequential scan of the data for that case. Note: Employee data is not the domain that this problem is in, I'm just using it as an example. Any pointers in the right direction would be of great help.
