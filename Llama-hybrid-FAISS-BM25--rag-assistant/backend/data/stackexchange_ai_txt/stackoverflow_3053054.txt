[site]: stackoverflow
[post_id]: 3053054
[parent_id]: 685271
[tags]: 
The average decent servletcontainer itself flushes the stream by default every ~2KB. You should really not have the need to explicitly call flush() on the OutputStream of the HttpServletResponse at intervals when sequentially streaming data from the one and same source. In for example Tomcat (and Websphere!) this is configureable as bufferSize attribute of the HTTP connector. The average decent servletcontainer also just streams the data in chunks if the content length is unknown beforehand (as per the Servlet API specification !) and if the client supports HTTP 1.1. The problem symptoms at least indicate that the servletcontainer is buffering the entire stream in memory before flushing. This can mean that the content length header is not set and/or the servletcontainer does not support chunked encoding and/or the client side does not support chunked encoding (i.e. it is using HTTP 1.0). To fix the one or other, just set the content length beforehand: response.setContentLengthLong(new File(path).length()); Or when you're not on Servlet 3.1 yet: response.setHeader("Content-Length", String.valueOf(new File(path).length()));
