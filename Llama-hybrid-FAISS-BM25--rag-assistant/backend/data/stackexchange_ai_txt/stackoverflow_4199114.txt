[site]: stackoverflow
[post_id]: 4199114
[parent_id]: 4198798
[tags]: 
The best method I've seen for this is to add a transparent subview that overlays the text view and handles the TouchesBegan first. You can then detect touches outside the text field and dismiss the keyboard by having the text field resign as first responder. For example, create the overlay subview in IB or programmatically, either way. Place and size it so that it covers the text view(s), and give it a clear color. If you add the view via IB, hide it when your main view loads so that it doesn't absorb touches just yet, like so: - (void)viewDidLoad { [super viewDidLoad]; overView.hidden = YES; } Then when the text field begins editing, unhide the view: - (void)textFieldDidBeginEditing:(UITextField *)textField { overView.hidden = NO; } When the text field ends editing, rehide the view: - (void)textFieldDidEndEditing:(UITextField *)textField { overView.hidden = YES; } Add a touchesBegan to detect when your unhidden overView is touched: - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event { UITouch *touch = [touches anyObject]; // Resign first responder if touch is outside text field if ([touch view] != myTextField) [myTextField resignFirstResponder]; // Send touches up the responder chain (pass them through) [self.nextResponder touchesBegan:touches withEvent:event]; } You can also do this through custom gestures, but that only works with iOS 4.x and, in my opinion, is more complicated.
