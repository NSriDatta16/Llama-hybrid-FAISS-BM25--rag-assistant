[site]: stackoverflow
[post_id]: 3326371
[parent_id]: 3326363
[tags]: 
The easiest solution is to pre-pend zeros Select ... From Table Order By Right( '0000000000' + YourColumn, 10) However, this will not account for alpha characters. In order to deal with alpha characters, then you'd need to know how many potential alpha characters you might have. If there is one, you could do something like: Select ... From #Test Order By Case When IsNumeric(NumVal) = 1 Then Right('0000000000' + NumVal + '0', 10) Else Right('0000000000' + NumVal, 10) End ADDITION Test run: If object_id('tempdb..#Test') is not null Drop Table #Test Create Table #Test ( NumVal varchar(10) ) Insert #Test(NumVal) Values('02') Insert #Test(NumVal) Values('03') Insert #Test(NumVal) Values('1a') Insert #Test(NumVal) Values('1b') Insert #Test(NumVal) Values('10') Insert #Test(NumVal) Values('11') Select NumVal From #Test Order By Case When IsNumeric(NumVal) = 1 Then Right('0000000000' + NumVal + '0', 10) Else Right('0000000000' + NumVal, 10) End Results: 1a 1b 02 03 10 11 A note about my solution. If it is the case that the alphabetic character(s) has special meaning, then as Erick Robertson suggested, you should break up the data into separate columns. The above solution will only handle two very specific cases: an all numeric value, a value with a single trailing alphabetic character. If the data might have multiple alphabetic characters or the alphabetic character is sometimes positioned other than the end of the value, my solution will not work. In addition, it should be noted that my solution will cause a table scan to evaluate the order-able string on each value. If what you seek is a one-time quick solution, then my approach will work. If you are seeking a long term solution, then either break up the data into separate columns, accept the goofy sort order or add a column that dictates the relative sort order for each value.
