[site]: stackoverflow
[post_id]: 3384574
[parent_id]: 3384485
[tags]: 
I doubt you will find a solution that is excellent in all measures. What you choose depends largely on what tradeoffs you're willing to make. If snapshots are infrequent, #3 is great; if they're frequent, probably not: O( S log U ) could be a killer for a source control repository, for instance. Here are some other ideas off the top of my head: 4. Periodic checkpoints. At a specified interval (every x hours, every y updates, whatever) make a checkpoint containing the current price for every stock. Figuring out the data at a past point in time means finding the most recent snapshot before that time and then adding in the individual updates afterward. This would have the same asymptotic performance as #2, but the constant of multiplication for updates and memory usage would be a lot lower since you'd be taking a lot fewer snapshots. 5. Delta-only checkpoints. Same as #4, but don't take a snapshot of the entire system. Instead store only the items that have changed since the previous checkpoint. The unchanged entries will be looked up in previous checkpoints. This saves a lot of time when writing a checkpoint and greatly reduces memory usage. If Δ U is the average number of updates between checkpoints then both of these are now O(Δ U ). This would effectively be a fixed amount; the database would grow over time, but not the average number of updates per checkpoint. You might consider updates time as amortized O(1) and memory usage as O( U ), then. For what it's worth, some years ago I wrote a wiki clone. One of the problems I encountered was how to store the page deltas. Do I store just the diffs, or do I store the full page text each update? How do I balance speed versus memory usage? Applying dozens or hundreds of diffs in a row to reconstruct a page could be overly slow, but storing the entire page if someone only changes one sentence would be quite wasteful. I wanted something that would scale well even for large, frequently updated pages. I ended up with a hybrid approach similar to #5. I store diffs with periodic full page snapshots. To figure out when to take the snapshots, I compare the new page text to the most recent snapshot's text. If the diff size is more than half as large as a full page text I store the full page text instead of the diff. That way, if people are making small updates then I can store diffs, but eventually once the page has changed enough I'll take a new snapshot.
