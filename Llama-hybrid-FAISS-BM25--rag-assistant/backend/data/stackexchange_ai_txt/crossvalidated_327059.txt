[site]: crossvalidated
[post_id]: 327059
[parent_id]: 326063
[tags]: 
This is all true but doesn't address the main problem: a PRNG with any sort of resultant structure or predictability in the sequence will cause the simulations to fail. Carl Witthoft Jan 31 at 15:51 If this is your concern then maybe the title of the question should be changed to "Impact of RNG choice on Monte Carlo results" or something like that. In this case, already considered on SE cross validation , here are some directions If you are considering poorly designed RNGs like the infamous RANDU they will clearly negatively impact the Monte Carlo approximation. To spot deficiencies in RNGs, there exist banks of benchmarks like Marsaglia's Diehard tests . (For instance Park & Miller (1988) use of the Lehmer congruential generator with the factor 16807 has been found lacking , to be replaced with 47271 or 69621. Of course this has been superseded by massive period generators like the Mersenne Twister PRNG .) A SE question on maths provides a link on the impact (or lack thereof) on estimation and precision, if not a very helpful answer. Jeff Rosenthal (U Toronto) has a paper where he studies the impact on an RNG on the convergence of (Monte Carlo) Markov chains but I cannot find it. I recently ran a small experiment on my blog with no visible impact of the RNG type. As an aside, a lottery scheme in Ontario used poorly designed random generation, which was spotted by a statistician, Mohan Srivastava of Toronto, Canada, who notified the Ontario Lottery and Gaming Corporation of the issue, rather than making a hefty profit out of this loophole. Here is an illustration of a case where a classic network simulator is impacted by a poor default choice (linked to Park and Miller above). There are specific issues with the structure of RNGs used in parallel computing . Using several seeds is usually not good enough, especially for linear congruential generators. Many approaches can be found in the computer literature, including the scalable parallel random number generation (SPRNG) packages of Michael Mascagni (including an R version) and Matsumotoâ€™s dynamic creator , a C program that provides starting values for independent streams when using the Mersenne twister. This has also been addressed on SE stack overflow . Last year, I saw a talk by Paula Whitlock on the impact of the GNU Scientific Library on the convergence of high dimension random walks, but cannot. To end up on a light note, there also is some literature on the distinction between software and hardware RNGs, with claims that psychics can impact the later !
