[site]: crossvalidated
[post_id]: 324810
[parent_id]: 324564
[tags]: 
These two regressions will not give parameter values that can be transformed into one another exactly: $ln(y) ~ vs. ~ A + B ~ x$ $y ~ vs. ~ a ~ exp(b ~ x)$ because they minimize different sums of squares, namely, the following respectively: $\Sigma_i(ln(y_i) - (A + B ~ x_i))^2$ $\Sigma_i(y_i - a ~ exp(b ~ x_i))^2$ and those are not equivalent minimization problems. The first regression can be solved for $A$ and $B$ using linear regression. To solve the second regression, begin by solving the first. Then use $a = exp(A)$ and $b = B$ as starting values to solve the second regression problem using a non-linear regression solver (i.e. in Excel that would be Solver). Also, if the nonlinear regression model is sufficiently far from the linear regression model then it is possible that these starting values will not be adequate in which case you will need to try other starting values. Added The data has been added to the question so we can now carry out the suggested action discussed in the paragraph above. Below we show the R code to do this. If you install R on your machine just copy and paste that code into the R console. First we read the data into DF and then run a linear model, i.e. regression, of log(Total) vs. Year . Note that log in R is log base e. We see that the regression coefficients that are produced are A = -369.977814 and B = 0.187693 for the intercept and slope. Then we extract the slope out into variable b to use as a starting value in the nonlinear regression. We don't need the intercept as a starting value since the nonlinear regression algorithm, plinear, only requires starting values for non-linear parameters. Then we run the nonlinear regression of Total vs. a * exp(b * Year) . The coefficients it produces are b = 2.838264e-01 and a = 3.117445e-245. We then plot the result and we see that it seems reasonably close to the data. In general, when performing nonlinear optimization numerical considerations imply that we want the parameters to be roughly of the same magnitude which is not the case. This suggests re-parameterizing the model to be: $y ~ vs. ~ exp(a ~ + ~ b ~ x_i)$ [re-parameterized nonlinear model] and at the end of the code below we do that. We see that now the parameters are a = -562.9959733 and b = 0.2838263 where now a is as defined in the definition of the re-paramaterized nonlinear model. These parameters are much more comparable values so our re-parameterized nonlinear model seems preferable. The graph would look similar to the one shown for the first nonlinear regression model. Lines Now run this: # run linear regression model fit.lm
