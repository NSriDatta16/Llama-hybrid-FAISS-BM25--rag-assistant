[site]: stackoverflow
[post_id]: 4842472
[parent_id]: 
[tags]: 
Can we turn such structure into typed class/function?

So in structure like struct RenderCastedDataFunctor { simpleRendererGraphElement* obj_; RenderCastedDataFunctor(simpleRendererGraphElement* obj) : obj_(obj) { } void operator()(char* castedChar, int castedCharLength) { obj_->renderCastedData(castedChar, castedCharLength); } }; can we turn simpleRendererGraphElement* into abstract type and make its function name we use in structure ( renderCastedData ) abstract too? So I have a function inside charGenerator class template void AddSubscriberToGeneratedData(Function f) I want to pass to it functions from different classes of type void (differentClass::*)(char*, int) With that structure inside some simpleRendererGraphElement I can subscribe function called renderCastedData to data with charGenerator->AddSubscriberToGeneratedData(RenderCastedDataFunctor(this)); I want to have a way to be capable to pass abstract class function that takes char* and int to AddSubscriberToGeneratedData . How to do such thing?
