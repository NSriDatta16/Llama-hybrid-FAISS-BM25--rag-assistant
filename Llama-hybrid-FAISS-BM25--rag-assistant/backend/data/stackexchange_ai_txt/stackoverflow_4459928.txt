[site]: stackoverflow
[post_id]: 4459928
[parent_id]: 
[tags]: 
How to Deep clone in javascript

How do you deep clone a JavaScript object? I know there are various functions based on frameworks like JSON.parse(JSON.stringify(o)) and $.extend(true, {}, o) but I don't want to use a framework like that. What is the most elegant or efficient way to create a deep clone. We do care about edge cases like cloning array's. Not breaking prototype chains, dealing with self reference. We don't care about supporting copying of DOM objects and like because .cloneNode exists for that reason. As I mainly want to use deep clones in node.js using ES5 features of the V8 engine is acceptable. [Edit] Before anyone suggests let me mention there is a distinct difference between creating a copy by prototypically inheriting from the object and cloning it. The former makes a mess of the prototype chain. [Further Edit] After reading your answer I came to the annoying discovery that cloning entire objects is a very dangerous and difficult game. Take for example the following closure based object var o = (function() { var magic = 42; var magicContainer = function() { this.get = function() { return magic; }; this.set = function(i) { magic = i; }; } return new magicContainer; }()); var n = clone(o); // how to implement clone to support closures Is there any way to write a clone function that clones the object, has the same state at time of cloning but cannot alter the state of o without writing a JS parser in JS. There should be no real world need for such a function anymore. This is mere academic interest.
