[site]: crossvalidated
[post_id]: 595187
[parent_id]: 
[tags]: 
What's the best method to identify outliers and influential cases for linear mixed models?

I've seen many many many different questions on how to extract Leverage and Cook's distance for Lmers. I'm able to do that with different packages and functions by now, but how should I interpret them ? I've seen many different answers to that ... A more general question should be: What's the best method to identify outliers and influential cases for linear mixed models? . For now, I believe Leverage and Cook's distance would do the job, but I'm open to better methods. A reproducible example: ### fit model: ModAdditive extracting Leverage and Cook's values: ### Check for outliers and influential cases: ### Check for general outliers: data %>% dplyr::select(ID, SCORE, PROFICIENCY_c, TASK_TYPE) %>% group_by(TASK_TYPE) %>% rstatix::identify_outliers(SCORE) ### leverage: ### library(HLMdiag) ## or library(influence.ME) ## or # with: library(HLMdiag): influential Questions: Question1 : is this the best approach to account for outliers in the data? Question2 : For Cook's distance, I've seen that no obs should have and absolute value greater than 1, so would this be correct: ### check if there is any value bigger than 1: ### ref: no greater than 1 (FIELD, 2012) or 4/n (the whole internet) if (any(abs(cooksd) > 1)) { print('yey') } else { print('no') } Question 3 : for Leverage values, I've seen: # Leverage values can lie between 0 (indicating that the case has no influence whatsoever) # and 1 (indicating that the case has complete influence over prediction). If no cases exert undue influence over the model then we would expect all of the leverage values to be close to the average value ((k + 1)/n). (FIELD, 2012) So, should I check if any values in influential$leverage.overall is > 1 ? Would that be enough? How should I interpret influential$mdffits influential$covtrace influential$covratio ? Question4 : how good is performance check_outilers() function? data: dput(data) structure(list(ID = structure(c("PART_1", "PART_1", "PART_2", "PART_2", "PART_3", "PART_3", "PART_4", "PART_4", "PART_5", "PART_5", "PART_6", "PART_6", "PART_7", "PART_7", "PART_8", "PART_8", "PART_9", "PART_9", "PART_10", "PART_10", "PART_11", "PART_11", "PART_12", "PART_12", "PART_13", "PART_13", "PART_14", "PART_14", "PART_15", "PART_15", "PART_16", "PART_16", "PART_17", "PART_17", "PART_18", "PART_18", "PART_19", "PART_19", "PART_20", "PART_20", "PART_21", "PART_21", "PART_22", "PART_22", "PART_23", "PART_23", "PART_24", "PART_24", "PART_25", "PART_25", "PART_26", "PART_26", "PART_27", "PART_27", "PART_28", "PART_28", "PART_29", "PART_29", "PART_30", "PART_30", "PART_31", "PART_31", "PART_32", "PART_32", "PART_33", "PART_33", "PART_34", "PART_34", "PART_35", "PART_35", "PART_36", "PART_36", "PART_37", "PART_37", "PART_38", "PART_38", "PART_39", "PART_39", "PART_40", "PART_40", "PART_41", "PART_41", "PART_42", "PART_42", "PART_43", "PART_43", "PART_44", "PART_44", "PART_45", "PART_45", "PART_46", "PART_46", "PART_47", "PART_47", "PART_48", "PART_48", "PART_49", "PART_49", "PART_50", "PART_50", "PART_51", "PART_51", "PART_52", "PART_52", "PART_53", "PART_53", "PART_54", "PART_54", "PART_55", "PART_55", "PART_56", "PART_56", "PART_57", "PART_57", "PART_58", "PART_58", "PART_59", "PART_59", "PART_60", "PART_60", "PART_61", "PART_61", "PART_62", "PART_62", "PART_63", "PART_63", "PART_64", "PART_64", "PART_65", "PART_65", "PART_66", "PART_66", "PART_67", "PART_67", "PART_68", "PART_68", "PART_69", "PART_69", "PART_70", "PART_70", "PART_71", "PART_71"), class = c("glue", "character")), SCORE = c(65.7, 65.08, 65.8, 61, 74.45, NA, 68, 71.18, NA, 68.46, NA, NA, 53.75, 62.75, 73.94, 66.32, 67.24, 73.42, 58.22, 59.83, NA, NA, NaN, 51.8, 71.07, 64.77, 68.07, 67.88, NaN, NaN, 69.88, 72.27, 71.32, 64.25, 62.18, NaN, 58.65, 62.6, 76.45, 54.75, 71.13, 64.74, 67.25, NA, NaN, NaN, 51.76, 51.58, 69.33, 67.05, 68.17, 62.38, 58, 64.57, 54.27, NA, 68.05, 65.56, NaN, NaN, NA, NA, 61, 70.71, 61.67, NA, NA, NA, 67.79, 68.1, 65.93, NA, NA, 58.43, NA, NA, 59.27, 55, 69.67, 65.29, 71.38, NA, 70, 58.86, NaN, NaN, 64.88, 64.18, 68.19, NA, 62.06, 70.33, 61, 58.5, 55.48, 64.84, 65.67, 65.19, 67.72, 63.14, 68.47, 59.12, 64, NaN, 65.11, 62.75, 66, NA, 67.5, NaN, 66.33, 68.82, NA, 65.04, 69.61, 66.78, 69.33, 64.86, 75.67, 69.06, 68.17, 69.94, 63, 59.31, NA, 65.15, 58.81, 55.83, NA, 67.71, NA, NA, NA, NA, 66.5, 69, 62.33, 58.83, 65, 60.65, NA, NA), PROFICIENCY_c = c(41.32, 41.32, -22.68, -22.68, -26.68, -26.68, 37.32, 37.32, -47.68, -47.68, -46.68, -46.68, -26.68, -26.68, 13.32, 13.32, 41.32, 41.32, 5.32, 5.32, -56.68, -56.68, -39.68, -39.68, 40.32, 40.32, 27.32, 27.32, 1.32, 1.32, 49.32, 49.32, 36.32, 36.32, -23.68, -23.68, 1.32, 1.32, -49.68, -49.68, 19.32, 19.32, 2.32, 2.32, 2.32, 2.32, 8.32, 8.32, 46.32, 46.32, 40.32, 40.32, -7.68, -7.68, -37.68, -37.68, 6.32, 6.32, -28.68, -28.68, -57.78, -57.78, 18.32, 18.32, -4.68, -4.68, -44.68, -44.68, 44.32, 44.32, -10.68, -10.68, -57.98, -57.98, -56.68, -56.68, -19.68, -19.68, 35.32, 35.32, 21.32, 21.32, -50.68, -50.68, -28.68, -28.68, 44.32, 44.32, 54.32, 54.32, 32.32, 32.32, 0.32, 0.32, -2.68, -2.68, 27.32, 27.32, 40.32, 40.32, 13.32, 13.32, -24.68, -24.68, -26.68, -26.68, -52.68, -52.68, -14.68, -14.68, 40.32, 40.32, 6.32, 6.32, 39.32, 39.32, 51.32, 51.32, 43.32, 43.32, 28.32, 28.32, -8.68, -8.68, 30.32, 30.32, -22.68, -22.68, 34.32, 34.32, -50.68, -50.68, -47.68, -47.68, 19.32, 19.32, -10.68, -10.68, 18.32, 18.32, -54.68, -54.68 ), TASK_TYPE = structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c("N", "A"), class = "factor")), row.names = c(NA, -142L), class = c("tbl_df", "tbl", "data.frame"))
