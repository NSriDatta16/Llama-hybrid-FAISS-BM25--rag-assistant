[site]: stackoverflow
[post_id]: 232681
[parent_id]: 
[tags]: 
What does it take to be a better OO programmer?

I’ve almost 6 years of experience in application development using .net technologies. Over the years I have improved as a better OO programmer but when I see code written by other guys (especially the likes of Jeffrey Richter, Peter Golde, Ayende Rahien, Jeremy Miller etc), I feel there is a generation gap between mine and their designs. I usually design my classes on the fly with some help from tools like ReSharper for refactoring and code organization. So, my question is “what does it takes to be a better OO programmer”. Is it a) Experience b) Books (reference please) c) Process (tdd or uml) d) patterns e) anything else? And how should one validate that the design is good, easy to understand and maintainable. As there are so many buzzwords in industry like dependency injection, IoC, MVC, MVP, etc where should one concentrate more in design. I feel abstraction is the key. What else?
