[site]: stackoverflow
[post_id]: 5425381
[parent_id]: 1020312
[tags]: 
Software developers seem to be pretty evenly split into two camps, depending on whether they favor an idealistic coding style or a pragmatic one: Idealistic: Never use the singleton pattern. Pragmatic: Avoid the singleton pattern. Personally, I favor the pragmatic approach. Sometimes it makes sense to break the rules, but only if you really understand what you are doing and are willing to accept the associated risks. If you can answer "yes" to the questions below regarding your specific use case, the singleton pattern can yield some practical benefits. Is the singleton external to your app? Databases, queuing services, and ESBs are all perfectly valid macro examples of the singleton pattern. KISS: Is you entire app limited to 2-3 internal singletons? DRY: Are those singletons inherently global and would therefore result in having to plumb references into almost every object in your app? (e.g., a logger or component mediator)? Do your singletons depend only on each other, and/or the operating environment? Have you ensured proper start-up and shut-down sequences for each singleton, including memory management considerations? For example, a "Grand Central"-style thread pool may need to have instance Run() and Shutdown() methods in main() so that tasks are guaranteed to run only when the objects they operate on are in a valid state.
