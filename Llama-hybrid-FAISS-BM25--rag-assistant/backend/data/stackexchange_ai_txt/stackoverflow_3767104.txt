[site]: stackoverflow
[post_id]: 3767104
[parent_id]: 3765408
[tags]: 
Somewhere in your Bootstrap you're going to need to define where your form resources are going to go, I suggest using the autoloader: $autoloader->addResourceType('default_form', 'forms/', 'Form'); My entire method for loading the autoloader looks like this protected function _initAutoload() { $autoloader = new Zend_Application_Module_Autoloader(array( 'namespace' => 'Default_', 'basePath' => $this->_root, )); // Here a define a resource named 'default_form', this can be anything, // 2nd param is the path relative to my application folder, // and 3rd param is the prefix for the classes inside that folder $autoloader->addResourceType('default_form', 'forms/', 'Form'); Zend_Loader_Autoloader::getInstance()->setFallbackAutoloader(true); return $autoloader; } You can then create a folder inside this forms folder called Element and then a file called Default_Form_Element_Picker.php and define the class, you can override functions like isValid() , setValues() , getValue() , loadDefaultDecorators() and the __construct() Default_Form_Element_Picker extends Zend_Form_Element_Xhtml { } You can the extend this class to make your other form elements, by creating files with the names Default_Form_Element_ContactPicker.php and Default_Form_Element_OrganizationPicker.php Default_Form_Element_ContactPicker extends Default_Form_Element_Picker { } Default_Form_Element_OrganizationPicker extends Default_Form_Element_Picker { } You could also add a class for creating forms here too, call it Default_Form_A.php Default_Form_A extends Zend_Form { public function __construct() { // create form elements here suing Zend_Form_Element and your new Custom Elements } } File structure application |--forms |----Default_Form_A.php |----Element |------ Default_Form_Element_Picker.php |------ Default_Form_Element_ContactPicker.php |------ Default_Form_Element_OrganizationPicker.php
