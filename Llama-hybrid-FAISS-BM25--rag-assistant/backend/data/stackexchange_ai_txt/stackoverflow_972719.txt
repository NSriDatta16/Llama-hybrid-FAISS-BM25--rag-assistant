[site]: stackoverflow
[post_id]: 972719
[parent_id]: 972387
[tags]: 
Consolidating answers ... When, typically, do you use == equality on a reference typed variable in Java / C#? 1. To check for null: if (a == null) ... 2. For efficiency when you are constructing an equals implementation: boolean equals(Object o) { if (o == null) return false; if (this == o) return true; // Some people would prefer "if (!(o instanceof ClassName)) ..." if (getClass() != o.getClass()) return false; // Otherwise, cast o, leverage super.equals() when possible, and // compare each instance variable ... 3. For efficiency when you are comparing enums or comparing objects of a class designed such that comparing object identity is equivalent to checking object equivalence (e.g. Class objects): enum Suit { DIAMONDS, HEARTS, CLUBS, SPADES } class SomeCardGame { ... boolean static isATrumpCard(Card c) { return (c.getSuit() == TRUMP_SUIT); } } 4. When you really intend to check object identity, not object equivalence, e.g. a test case that wants to make sure a class isn't giving up a reference to an internal data structure instance. boolean iChoseNotToUseJUnitForSomeReasonTestCase() { final List externalList = testObject.getCopyOfList(); final List instanceVariableValue = getInstanceVariableValueViaCleverReflectionTrickTo(testObject, "list"); if (instanceVariableValue == externalList) { System.out.println("fail"); } else { System.out.println("pass"); } } Interestingly, for point #3, one article suggests using equals is safer than using .equals() because the compiler will complain if you attempt to compare to object references that are not of the same class ( http://schneide.wordpress.com/2008/09/22/or-equals/ ).
