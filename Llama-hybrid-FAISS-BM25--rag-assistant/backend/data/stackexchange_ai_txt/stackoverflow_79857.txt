[site]: stackoverflow
[post_id]: 79857
[parent_id]: 77632
[tags]: 
The best benefit to Generics is code reuse. Lets say that you have a lot of business objects, and you are going to write VERY similar code for each entity to perform the same actions. (I.E Linq to SQL operations). With generics, you can create a class that will be able to operate given any of the types that inherit from a given base class or implement a given interface like so: public interface IEntity { } public class Employee : IEntity { public string FirstName { get; set; } public string LastName { get; set; } public int EmployeeID { get; set; } } public class Company : IEntity { public string Name { get; set; } public string TaxID { get; set } } public class DataService where ENTITY : class, IEntity, new() where DATACONTEXT : DataContext, new() { public void Create(List entities) { using (DATACONTEXT db = new DATACONTEXT()) { Table table = db.GetTable (); foreach (ENTITY entity in entities) table.InsertOnSubmit (entity); db.SubmitChanges(); } } } public class MyTest { public void DoSomething() { var dataService = new DataService (); dataService.Create(new Employee { FirstName = "Bob", LastName = "Smith", EmployeeID = 5 }); var otherDataService = new DataService (); otherDataService.Create(new Company { Name = "ACME", TaxID = "123-111-2233" }); } } Notice the reuse of the same service given the different Types in the DoSomething method above. Truly elegant! There's many other great reasons to use generics for your work, this is my favorite.
