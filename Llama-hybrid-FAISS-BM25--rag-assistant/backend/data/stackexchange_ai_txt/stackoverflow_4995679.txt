[site]: stackoverflow
[post_id]: 4995679
[parent_id]: 4995586
[tags]: 
You're thinking about "relations" in the wrong way. While it's true that botany is not related to databases (except in some very, very rare corner cases), you're looking at the data , not the thing . How you model this depends on how you're viewing these keywords. Is this a strict single-parent relationship, where a child keyword can never have children and child keywords are fundamentally different from parent keywords (in other words, the parents serve only as a classification mechanism and are not, themselves, keywords)? Or could you "nest" these keywords arbitrarily deeply and use them as keywords at any level (in other words, "botany" might have children, and "SCIENCE" is just as much a keyword as "botany" is)? If it's the first, you'd want to model it something like this: Category ---------- CategoryID (PK) Name Keyword --------- KeywordID (PK) CategoryID (FK) Name If it's the second, you'd model it something like this: Keyword --------- KeywordID (PK) ParentKeywordID (FK) Name Where ParentKeywordID is a nullable foreign key back to Keyword . You've created a table that references itself, and structures like this define a tree structure with nodes that can be nested at any level. Side note Many will tell you that storing null values in the database is a bad idea, and I would agree with these people in general. If you truly want to go to a fully normalized storage format (normalized to 5NF, anyway), you'd have to do it like this: Keyword ----------- KeywordID (PK) Name KeywordParent ------------- KeywordID (PK, FK) ParentKeywordID (FK) Then your top-level keywords simply would not have rows in KeywordParent . This sort of design is generally regarded as "better" from a database design perspective, though it will slightly complicate your queries (only in their construction; they won't perform any worse, and may actually perform better without nullable columns).
