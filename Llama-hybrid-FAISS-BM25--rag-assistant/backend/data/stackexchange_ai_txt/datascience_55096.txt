[site]: datascience
[post_id]: 55096
[parent_id]: 
[tags]: 
Is there a Python memoization library that supports version control?

I'm doing a data science project in Python. I need to cache results to reduce computation time. In my code I'll use function foo to calculate y = foo(x) for different sets of parameters x . In addition to different parameters x , I an often modifying foo too. For example, I'll have one version of foo in git branch branch-1 and another version of foo in git branch branch-2 . I'll jump back-and-forth between these branches many times in a workday. I need a memoization library that caches the results of branch-1 and branch-2 separately iff foo has been called with different parameters or foo 's source code differs between branch-1 and branch-2 . In other words, I need a library the following features. Computations are saved to the cache. Computations are not recomputed if they are in the cache. Computations are recomputed if they are not in the cache or the code generating them has been updated. Cache results are written to disk so they survive between different runs of my program. Cache results for outdated code are preserved in case I revert the code with git. A few important points I'm okay with a system that detects whether the file containing soo has changed in place of detecting whether soo 's function definition has changed. But in that case "changed" has to depend solely on git commit history. It can't depend merely on unix timestamps because I use git and git does not preserve unix timestamps. I'm okay not using git history for versioning. It just seemed the most obvious approach to me. Does a library exist that to do this? I've already examined the following memoization libraries. functools.lru_cache and python-memoization don't work because neither of them write results to disk. Redis seems designed for web apps. Therefore I expect Redis is not designed to preserve caches for anything but the newest code.
