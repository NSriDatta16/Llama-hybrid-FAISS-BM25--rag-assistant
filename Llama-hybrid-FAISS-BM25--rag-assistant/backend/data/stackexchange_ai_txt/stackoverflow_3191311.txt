[site]: stackoverflow
[post_id]: 3191311
[parent_id]: 3187417
[tags]: 
As noted by Robert Bak, you're essentially on your own to implement such a mechanism for non-UI components. I've found this a very useful technique to use on model classes, since it can dramatically reduce the "thrashing" of bound-property updates when your model classes are not simple data transfer objects - i.e. they have any kind of multi-property logic encapsulated within them. Since my use-case is for model objects, I didn't need all the methods of IInvalidating. Here's my particular implementation as a starting point for your own efforts. Note that this comes from a "base model class" we use called RAFModel and that this is for the Flex 4 SDK. // INVALIDATION AND COMMITPROPERTIES PATTERN private var invalidatePropertiesFlag:Boolean; public function invalidateProperties():void { if (!invalidatePropertiesFlag) { invalidatePropertiesFlag = true; invalidateModelObject(this); } } protected function commitProperties():void { // override this } // -- INVALIDATION SUPPORT public static var invalidObjects:Dictionary = new Dictionary(true); public static var validatePending:Boolean = false; public static function invalidateModelObject(obj:RAFModel):void { invalidObjects[obj] = true; if (!validatePending) { validatePending = true; FlexGlobals.topLevelApplication.callLater(validateObjects); } } protected static function validateObjects():void { var invalidQueue:Dictionary = invalidObjects; // start a fresh tracker for further invalidations // that are a side effect of this pass invalidObjects = new Dictionary(true); // ready to receive another call validatePending = false; for (var o:* in invalidQueue) { var rm:RAFModel = o as RAFModel; if (rm) { // clear the flag first, in case we're reentrant // on any given instance rm.invalidatePropertiesFlag = false; rm.commitProperties(); } } }
