[site]: stackoverflow
[post_id]: 1186675
[parent_id]: 
[tags]: 
Pick up a cache implementation, or roll your own?

I'm doing a Java EE application, and I'm at a point where I've concluded that I need a cache for my objects. My current requirements aren't much more complicated than some kind of key-value storage, possibly something that can handle a tree. It would be tempting to write a simple custom static/singleton class containing one or more maps. But, since there are several implementations that do more or less just like this (Memcached comes to mind), I began wondering that there must be some added value into using Memcached, instead of just my own implementation. So, I'm asking for thoughts about this: why should I pick up a ready-made cache, when I can do my own static data? And vice versa; why should I write a static class, when I can pick up a ready-made cache?
