[site]: stackoverflow
[post_id]: 2776247
[parent_id]: 2774392
[tags]: 
The service war will need to be packaged to include the client api jar, together with javadocs (so that each version of the service is distributed with a bundled client jar and web documentation) You'll need to create a source jar of the client project and to include this source jar in the configuration of the javadoc plugin in the war module. The steps and the configuration of the various parts are explained in Aggregating Javadocs from Dependency Sources . The web interface war will need the ui jar and all the dependencies (webstart/applet deployment). For the applet that needs to be downloadable, use dependency:copy to copy it at the "right" place inside your webapp during pre-package . See the usage page. For the webstart application, have a look at Add JNLPs apps to an existing WAR . So I need a 5th project that does all the packaging (...) since I need different pieces from each sub-project I do not understand how this can be done using the assembly. Using a dedicated module is definitely the way to go to create an assembly including artifacts produced by other modules or even assemblies of other modules. I'm not 100% sure but creating an assembly of assemblies is probably what I would do here. Basically, this means setting up Maven to create an assembly of each module you want to assemble in the final bundle, possibly using the predefined assembly descriptor bin or a modified version (to bundle the jar, or war, the javadoc, etc). And then to assemble assemblies via assembly dependencies in an dedicated module (to unpack them, filter what you want or don't want, repack the filtered result). This will require to spend some time on a custom assembly descriptor but it's definitely possible. It's hard to be more precise though.
