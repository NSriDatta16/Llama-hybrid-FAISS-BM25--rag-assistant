[site]: stackoverflow
[post_id]: 5591380
[parent_id]: 5582585
[tags]: 
Got it! What got it working was : dragcontrol = new OpenLayers.Control.DragPan({'map':this.mymap, 'panMapDone':function(evt){ this.userdragged = true; console.log('drag'); }}); dragcontrol.draw(); this.mymap.addControl(dragcontrol); dragcontrol.activate(); Booyaka! Edit: Actually this.userdragged wont work in there... the scope of this is different there. you would need to do something like var that = this; before that object initialization and use that.userdragged = true.... Edit2: I later found, that this panMapDone function overwrites DragPans own method which has same name. With just my previous example, you can end up with map that results in vector features going out of sync with map, when user drags map. To stop that from happening, you should copy the original functionality into that function too... to make it look something like that: dragcontrol = new OpenLayers.Control.DragPan({'map':this.mymap, 'panMapDone':function(xy){ if(this.panned) { var res = null; if (this.kinetic) { res = this.kinetic.end(xy); } this.map.pan( this.handler.last.x - xy.x, this.handler.last.y - xy.y, {dragging: !!res, animate: false} ); if (res) { var self = this; this.kinetic.move(res, function(x, y, end) { self.map.pan(x, y, {dragging: !end, animate: false}); }); } this.panned = false; } that.userdragged = true; // do whatever you want here }}); dragcontrol.draw(); this.mymap.addControl(dragcontrol); dragcontrol.activate(); Alan
