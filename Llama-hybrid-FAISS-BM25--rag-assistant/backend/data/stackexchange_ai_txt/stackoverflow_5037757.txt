[site]: stackoverflow
[post_id]: 5037757
[parent_id]: 5037701
[tags]: 
const does not change where things are stored it's a keyword to tell the compiler to prevent variables or functions from modifying things. Example: std::string myNormalStr("Hello"); const std::string myConstStr("Don't Change Me"); myNormalStr = myConstStr; // this is ok myConstStr = myNormalStr; // this will give you a compile error That's a super simplistic example but the same thing applies to const objects which are passed into functions, returned from functions, or if the function itself is const . Here's a great article by Herb Sutter on all the correct ways to use the const keyword. Edit: Currently there is almost no reason to use the auto keyword as everything is implicitly auto within it's scope. This keyword is a storage class specifier for an automatic variable. However the auto keyword is changing as part of the new C++ standard in progress but is supported already by Visual Studio 2010 and some other compilers in it's new glorious form. It can be used like so in C++0x: std::vector numbers; for (std::vector ::const_iterator itr(numbers.begin()); itr != numbers.end(); ++itr) { // do something with each iterated element } // compiler auto deduces from rvalue // and determines that you want a // std::vector ::const_iterator type for (auto itr = numbers.cbegin(); itr != numbers.cend(); ++itr) { // do something with each iterated element }
