[site]: stackoverflow
[post_id]: 842472
[parent_id]: 841792
[tags]: 
It's hard to guess what the original author meant, but one thing that distinguishes a pure functional language is that you can always substitute equals for equals and apply algebraic laws. This means that you can calculate with programs in much the same way that you calculuate with formulas in high-school algebra. There are two good reasons to do this: You calculate a complicated fragment of code into something equivalent but simpler. You write a simple piece of code that "obviously has no faults", but it turns out to be inefficient. So you calculate an equivalent version that runs like a bat out of hell. The past master of the second technique is Oxford professor Richard Bird . Some of his stuff, like his Sudoku solver or his implementation of Burrows-Wheeler compression ( bzip2 ) is absolutely amazing. Read his papers!
