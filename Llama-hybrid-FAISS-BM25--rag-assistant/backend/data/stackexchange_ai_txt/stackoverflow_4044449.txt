[site]: stackoverflow
[post_id]: 4044449
[parent_id]: 4044419
[tags]: 
Should I put, say, every damn file operation in a try...catch block, in case something could have happened (file being locked by someone/something external to the application, disk corruption etc)? Generally, yes. Exceptions that must be handled File operations are inherently unsafe, all hell can break loose when you use it. Consider the case that you’re reading a file stored on an USB storage device and mid-read the user pulls off the USB stick. This will raise an exception, and you need to guard against that. This is also true in the particular example you mentioned. On the other hand , it’s usually only the high-level code that needs to handle this kind of error, not the code deep down in your business logic. It is often OK to let a method fail and propagate an exception as the result of an IO failure. It’s merely important to prevent this exception from crashing the application, and notifying the user that something has gone wrong, or try again, or take evasive actions. Which layers handle exceptions? An article from 2003 by Ned Batchelder explains which parts of the code should guard against exceptions, and which shouldn’t: He distributes code into three layers: The A layer, a dapting the API underneath it, The B layer, b uilding pieces of your system, and The C layer, c ombining it all together. I would choose slightly different layers: The low-level layer (consisting of layers A and half B) which builds the low-level API of your system and adapts even lower-level APIs), The middle layer that implements the bulk of the business logic (mostly layers B and C) and The UI layer that the user interacts with. In any case, the lowest layer should translate exceptions from the lower-level API into your domain. The middle layer should let exceptions pass through : no exception handling in the business layer. This should also be the bulk of your code, which means that you don’t need to handle exceptions in most of the code (but there may of course be exceptions to this rule). And the upper layer should catch exceptions and respond to them, or present them to the user in readable format. A good way of handling this kind of exceptions is by installing a global exception handler, or by offloading work in GUI applications into an extra thread (e.g. a BackgroundWorker) and catching an exception when the thread dies. Exceptions not to handle Not all exceptions need to be handled in this way. For example, you shouldn’t try to handle a StackOverflowException (you can’t!) or an OutOfMemoryException (you usually can’t). Such exceptions mean that there is something seriously wrong with either the code or the machine and your application has no chance of recovering from the failure.
