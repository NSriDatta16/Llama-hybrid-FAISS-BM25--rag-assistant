[site]: stackoverflow
[post_id]: 1748410
[parent_id]: 1748238
[tags]: 
PRO single point of definition for DB table - Object attribute mapping transparent possibility for DAO implementations to other storage types develop an interface pattern all DAO's follow developing a more or less standard JUnit test class for DAO's results in better test coverage full control over specifics no performance loss due to an overly generic solution CON less "sexy" than using the latest framework developers don't get to invent their own wheels (might be a PRO :-)) As with most development patterns, using DAO's takes some time to get used to. With experience comes the benefits of more robust code and developers that know why things work, not just that it seems to. That last point is the biggest advantage for me. Caveat, depending on your situation using a persistence framework might be a good alternative to coding your own DAO's.
