[site]: stackoverflow
[post_id]: 2277387
[parent_id]: 
[tags]: 
Seeking elegant way to remove any instances of 544 words from a string

I need to remove any instances of 544 full-text stopwords from a user-entered search string, then format it to run a partial match full-text search in boolean mode. input: "new york city", output: "+york* +city*" ("new" is a stopword). I have an ugly solution that works: explode the search string into an array of words, look up each word in the array of stopwords, unset them if there is a match, implode the remaining words and finally run a regex to add the boolean mode formatting. There has to be a more elegant solution. My question has 2 parts. 1) What do you think is the cleanest way to do this? 2) I solved part of the problem using a huge regex but this raised another question. EDIT: This actually works. I'm embarrassed to say that the memory issue I was having (and believed was my regex) was actually generated later in the code due to the huge number of matches after filtering out stopwords. $tmp = preg_replace('/(\b('.implode('|',$stopwords).')\b)+/','',$this->val); $boolified = preg_replace('/([^\s]+)/','+$1*',$tmp);
