[site]: stackoverflow
[post_id]: 2391376
[parent_id]: 2384550
[tags]: 
I'll play contrarian: YAGNI (You Aren't Going to Need It). What if the framework Is badly designed? Is buggy? Is too slow? Will be different in two years, and the old version won't be supported? Discussions of frameworks often assume that frameworks are great, where the reality is that frameworks vary just like anything else, and many frameworks are larded with stuff you are never going to need. Here's some advice that I hope bears on your more specific questions: Continue to make incremental improvements. It sounds like you are being productive with this approach and that it is paying off for you. Learn more about the framework. Or multiple frameworks. Maybe you can try a small pilot project in, say, 1 to 4 days. It is an honorable strategy to learn about a framework not in order to use the framework, but in order to cherry-pick the best ideas and adopt them into your own designs. If you decide for the time being not to adopt a framework, this is an easy decision to revisit later. If you decide to adopt a framework, backing away from it later can be very expensive. It may be worth paying some extra costs up front to reduce the probability of making a very expensive mistake. I think where I have been burned the most is by depending on somebody else's code base that changed out from under me. I call this the "every Perl script I ever wrote was broken a year later" problem. But I work on a lot of different small projects that tend to get bursty attention and have a very long lifetime compared to the time it took to create one. If you have one big project that you're working with daily for years, you can adapt more easily to changes in external frameworks.
