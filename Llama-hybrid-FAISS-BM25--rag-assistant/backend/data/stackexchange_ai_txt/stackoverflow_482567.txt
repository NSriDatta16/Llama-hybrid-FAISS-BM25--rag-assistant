[site]: stackoverflow
[post_id]: 482567
[parent_id]: 482506
[tags]: 
Frequent changes to a project's requirements, including adding or removing features, does not necessarily lead to spaghetti code, but it probably will if you don't write modular software (see Modular Programming ). The things to strive for include the following: Each module (whether it is a function, class, library, or complete application) has a well defined purpose . Each module is ideally no larger than it needs to be to serve its defined purpose. Modules are loosely coupled , meaning they can be substituted for other modules without causing the software to break. Modules can be tested individually to verify that they serve their purpose without error. Modules are organized in a way which helps to make the problem domain intuitive to other programmers. Given well organized modules (again, these can be functions, classes, libraries, and full applications) that work together while being loosely-coupled, the way to deal with changes in requirements is to write new modules, expand on existing modules, and connect modules in new ways. As for how you arrive at a situation of having these nice software modules in the first place, refactoring is key. Other practices such as unit testing and a development methodology (such as Scrum ) are also helpful, but refactoring is your bread and butter--and it is one thing that many business environments do not make enough time for. For good advice on writing loosely coupled code, do some research on dependency injection .
