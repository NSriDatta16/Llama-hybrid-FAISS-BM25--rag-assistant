[site]: stackoverflow
[post_id]: 3045866
[parent_id]: 3044339
[tags]: 
Identify which objects you would like to serialize, and cache to isolated storage. Specify the level of data isolation you would like (application level, user level, etc). Example: You could create a generic serializer, a very basic sample would look like this: public class SampleDataSerializer { public static void Deserialize (out T data, Stream stm) { var xs = new XmlSerializer(typeof(T)); data = (T)xs.Deserialize(stm); } public static void Serialize (T data, Stream stm) { try { var xs = new XmlSerializer(typeof(T)); xs.Serialize(stm, data); } catch (Exception e) { throw; } } } Note that you probably should put in some overloads to the Serialize and Deserialize methods to accomodate readers, or any other types you are actually using in your app (e.g., XmlDocuments, etc). The operation to save to IsolatedStorage can be handled by a utility class (example below): public class SampleIsolatedStorageManager : IDisposable { private string filename; private string directoryname; IsolatedStorageFile isf; public SampleIsolatedStorageManager() { filename = string.Empty; directoryname = string.Empty; // create an ISF scoped to domain user... isf = IsolatedStorageFile.GetStore(IsolatedStorageScope.User | IsolatedStorageScope.Assembly | IsolatedStorageScope.Domain, typeof(System.Security.Policy.Url), typeof(System.Security.Policy.Url)); } public void Save (T parm) { using (IsolatedStorageFileStream stm = GetStreamByStoredType (FileMode.Create)) { SampleDataSerializer.Serialize (parm, stm); } } public T Restore () where T : new() { try { if (GetFileNameByType ().Length > 0) { T result = new T(); using (IsolatedStorageFileStream stm = GetStreamByStoredType (FileMode.Open)) { SampleDataSerializer.Deserialize (out result, stm); } return result; } else { return default(T); } } catch { try { Clear (); } catch { } return default(T); } } public void Clear () { if (isf.GetFileNames(GetFileNameByType ()).Length > 0) { isf.DeleteFile(GetFileNameByType ()); } } private string GetFileNameByType () { return typeof(T).Name + ".cache"; } private IsolatedStorageFileStream GetStreamByStoredType (FileMode mode) { var stm = new IsolatedStorageFileStream(GetFileNameByType (), mode, isf); return stm; } #region IDisposable Members public void Dispose() { isf.Close(); } } Finally, remember to add the following using clauses: using System.IO; using System.IO.IsolatedStorage; using System.Xml.Serialization; The actual code to use the classes above could look like this: var myClass = new MyClass(); myClass.name = "something"; using (var mgr = new SampleIsolatedStorageManager()) { mgr.Save (myClass); } This will save the instance you specify to be saved to the isolated storage. To retrieve the instance, simply call: using (var mgr = new SampleIsolatedStorageManager()) { mgr.Restore (); } Note: the sample I've provided only supports one serialized instance per type. I'm not sure if you need more than that. Make whatever modifications you need to support further functionalities. HTH!
