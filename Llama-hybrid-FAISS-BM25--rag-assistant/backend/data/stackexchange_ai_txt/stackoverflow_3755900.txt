[site]: stackoverflow
[post_id]: 3755900
[parent_id]: 
[tags]: 
How careful should I be with thread-safety when creating methods/activities which interact with SQLite database?

I am creating an app which allows for many different Activities to be started from a TabActivity (up to ~25). Most of the activities require data from the sqlite database, so when onCreate is run, an AsyncTask creates an SQLiteOpenHelper object(which will open a readable/writable database), runs a query, data is retrieved, and everything is then closed. i was just testing messing around to see if i could break something, so i added every Activity to the TabActivity's TabHost . I then started mashing each tab as quickly as possible. i noticed that very quickly i began to see in the LogCat: Caused by: android.database.sqlite.SQLiteException: database is locked: BEGIN EXCLUSIVE; and the app proceeded to die. Typically there will only be about 4-6 tabs(i can just limit the user anyway) for the TabHost . I haven't been able to break anything with a small amount of tabs to mash, but i am still worried that maybe i am accessing the database in a poor way. How can i prevent my SQLiteDatabase objects to cause a lock? If i create a ContentProvider will that eliminate the possibility of database locking? Do you have any suggestions for changes I could make for accessing data from an SQLiteDatabase ? I ended up taking the approach of using the Application class and storing 1 SQLiteOpenHelper and trying my best to keep it synchronized. This seems to be working great - i put all my 25 activities in the TabHost and mashed away on them with no errors. I am calling ((SQLiteDbApplication)getApplication()).setDbHelper(new DBHelper(this, Constants.DB_NAME, null, Constants.DB_VERSION_CODE)); method(shown below) in every onCreate() in my activities Any further suggestions to this approach or to the changes i made using this Application class? import android.app.Application; import android.database.sqlite.SQLiteDatabase; public class SQLiteDbApplication extends Application { private DBHelper dbHelper; private SQLiteDatabase db; public synchronized DBHelper getDbHelper() { db = dbHelper.getDatabase();//returns the already opened database object while(db.isDbLockedByCurrentThread() || db.isDbLockedByOtherThreads()); return dbHelper; } public synchronized void closeDb() { if(null != dbHelper) dbHelper.close(); if(null != db) db.close(); } @Override protected void finalize() throws Throwable { if(null != dbHelper) dbHelper.close(); if(null != db) db.close(); super.finalize(); } public synchronized void setDbHelper(DBHelper dbHelper) { if(null == this.dbHelper) { this.dbHelper = dbHelper; this.dbHelper.setDb(this.dbHelper.getWritableDatabase());//creates and sets the database object via getWritableDatabase() } } }
