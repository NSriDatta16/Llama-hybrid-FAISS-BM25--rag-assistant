[site]: stackoverflow
[post_id]: 4824588
[parent_id]: 4824333
[tags]: 
Note that Robert's answer will probably work if you just replace var with DataListItem . Alternately, a for loop should work just as well: for (int i = 0; i Update : Just because the question was asked (in a comment): why didn't the foreach loop work? Here's how foreach works: It looks for the type's GetEnumerator method. In the type of object returned, it looks for the MoveNext method. Following a successful call to MoveNext , it looks for the Current property. Note that a strict implementation of IEnumerable or IEnumerable is not required —only those exact criteria I just listed. Now, a convenient way of equipping your type to be eligible for a foreach loop is by implementing either IEnumerable or IEnumerable ; in the case of the DataList.Items property which returns a DataListItemCollection , the designers chose to implement simply IEnumerable (I suspect there is a reason for this—basically all UI controls in the framework are non-generic). The GetEnumerator method returns an object whose type implements the simple IEnumerator interface, whose Current property is just object . What all this means is that if you foreach over a DataListItemCollection , and you declare the local variable using var , the compiler has no idea what type of object resides in the collection you're iterating. Therefore it makes a conservative choice: object (hover your mouse over the local in Visual Studio to confirm this). The way the foreach construct works, you can type the local variable more strongly if you choose (so: foreach (DataListItem item in ... ); the compiler inserts a cast in the background for you. To illustrate, I could attempt this: List integers = new List { 1, 2, 3 }; IEnumerable enumerable = integers; foreach (string s in enumerable) { Console.WriteLine(s); } The above will compile—the compiler is accepting on good faith that I knew what I was doing when I wrote foreach (string s ... —but it will throw an InvalidCastException at run-time. Make sense?
