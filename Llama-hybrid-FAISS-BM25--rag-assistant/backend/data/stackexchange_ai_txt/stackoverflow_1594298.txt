[site]: stackoverflow
[post_id]: 1594298
[parent_id]: 1594088
[tags]: 
Without taking performance into account - it's probably not an issue and anyway, we shouldn't optimise for performance until we know we have a problem - I'd say you might introduce a Bookmaker model (if only to store the name) and start making use of ActiveRecord associations. I'd also consider splitting Odds into the three individual result types, which could be more flexible, especially if you want to add more bets later. You might get something like: class Bookmaker What you look to be trying to do is calculate the best price for each result across all bookies making a price on that fixture, or the "overround". If it's less than 100% then a potential arbitrage exists. class Odd named_scope :for_result, lambda { |res_tp| {:conditions => ['type = ?', res_tp]}} end class Fixture def best_price(res_type) # assumes you have odds stored as a percentage odds.for_result(res_type).minimum(:pctage) end def overround [:home, :away, :draw].inject(0.0){|sum, res_tp| sum + best_price(res_tp)} end end I'm sure the above doesn't exactly fit your data, but it might give an idea of how you might go about it.
