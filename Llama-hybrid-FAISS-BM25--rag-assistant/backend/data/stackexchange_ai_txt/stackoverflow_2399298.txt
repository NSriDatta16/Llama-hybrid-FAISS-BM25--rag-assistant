[site]: stackoverflow
[post_id]: 2399298
[parent_id]: 2399215
[tags]: 
If your data collection isn't too big, the Entity-Attribute-Value (EAV) model may fit nicely the bill. In a nutshell, this structure allows the definition of Categories , the list of [required or optional] Attributes (aka properties) the entities in such category include etc, in a set of tables known as the meta-data , the logical schema of the data, if you will. The entity instances are stored in two tables a header and a values tables, whereby each attribute is stored in a single [SQL] record of the later table (aka "vertical" storage: what used to be a record in traditional DBMS model is made of several records of the value table). This format is very practical in particular for its flexibility: it allows both late and on-going changes in the logical schema (addition of new categories, additions/changes in the attributes of a given category etc.), as well the implicit data-driven handling of the underlying catalog's logical schema, at the level of the application. The main drawbacks of this format are the [somewhat] more sophisticated, abstract, implementation and, mainly, some limitations with regards to scaling etc. when the catalog size grows, say in the million+ entities range. See the EAV model described in more details in this SO answer of mine .
