[site]: stackoverflow
[post_id]: 4963747
[parent_id]: 
[tags]: 
Caching strategy for heavily used web-site

We’re in process of designing caching strategy for a heavily used web-site. The site consists of a mix of dynamic and static content. The front-end is PHP, middle tier is Tomcat and mysql on the back. Only user login screen is done over HTTPS to secure the credentials. After that, all content is served over plain HTTP. Some of the screens are specific to the customer (let’s say his last orders), while other screens are common to everybody (most popular products, promotions, rules, etc). Given the expected traffic volume it’s clear that we need a comprehensive caching strategy. So we’re considering following options: Put Squid or Varnish in front of PHP and configure it to cache all public content and even order submission form of a customer . Use memcached by PHP to cache page fragments (such as most popular products) Implement caching in the middle tier/tomcats (i.e. before returning content to web-servers, try to fetch it from local cache such as ehcache) Use PHP-level cache like Zend Cache and store there fragments of the pages. This is close to the second option that i mentioned but it's built into the Zend framework. It’s possible that we will use a combination of those strategies. So the question is whether it's worthwhile to add front cache like Varnish, or just use Zend Cache inside? The other option that i forgot to mention is to use PHP-level cache like Zend Cache and store there fragments of the pages. This is close to the second option that i mentioned but it's built into the Zend framework. So the question is whether it's worthwhile to add front cache like Varnish, or just use Zend Cache inside? Thanks again, Philopator.
