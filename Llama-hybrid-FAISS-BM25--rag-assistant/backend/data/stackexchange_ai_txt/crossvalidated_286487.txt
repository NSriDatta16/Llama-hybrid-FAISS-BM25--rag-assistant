[site]: crossvalidated
[post_id]: 286487
[parent_id]: 
[tags]: 
Learning the relationship between binary vector variables

I have a black-box model of a system with an internal state that is characterized by a $n-$dimensional binary vector variable $\vec{x}=(x_1,x_2,\dots,x_n)$ (i.e. $x_i\in\{0,1\},\;i=1,\dots,n$). However, I have access only to an external binary vector of obsevations $\vec{y}=(y_1,y_2,\dots,y_n)$ of the same size ($y_i\in\{0,1\}$). Which algorithm/technique would be most suited for determining their relationship $\vec{y}=f(\vec{x})$? I am especially interested in the inverse relationship $\vec{x}=f^{-1}(\vec{y})$, i.e. how to infer the internal state from external observations. Extra information : the binary variables $\vec{x},\vec{y}$ are sparse, i.e. most of their entries are zero. Variation of the problem : the variables are still sparse, however the non-zero elements are not 1, but real numbers between 0 and 1. I am new to machine learning, so I apologize if the question is too general. I am trying to decide between neural networks, support vector machines, or hidden markov models. Maybe there are special implementations or versions of the above (or other) methods which are more suitable to the specific nature of my problem (i.e. binary sparse vectors). I appreciate any suggestions.
