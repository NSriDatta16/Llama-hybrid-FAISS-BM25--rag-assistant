[site]: crossvalidated
[post_id]: 525151
[parent_id]: 525149
[tags]: 
Notice that you can compute this by directly sampling the predictions and true values for a sample of size $n$ at a desired recall $r$ and precision $p$ . Of the values that are truly positive, $r$ will be predicted positive on average, so use $r$ as the parameter for a bernoulli, conditioned on the label being true. Now getting the precision is a bit trickier: note that given a base rate and a fixed recall, the precision is determined by the choice of $\mathbb P(\hat Y = 1 | Y = 0)$ . Which can then be used as the threshold for prediction conditioned on the true label being false. Putting it together we have the following code: from collections import defaultdict import numpy as np import numpy.linalg as la import pandas as pd import numpy.random as rn import matplotlib.pyplot as plt def hmean(a, b): return np.nan_to_num(2 / (1/a + 1/b)) p = 0.01 n_iter = 1000 r_steps = 30 p_steps = 40 recall = np.linspace(0, 1, r_steps + 1)[1:] precision = np.linspace(0, 1, p_steps + 1)[1:] p_1_0 = recall * p / precision[:, np.newaxis] - recall * p recall_neg = p_1_0 / (1 - p) f1s = defaultdict(list) precisions = defaultdict(list) sample_sizes = [100, 1000, 10000] for i in range(n_iter): for n in sample_sizes: samples = rn.rand(n, p_steps, r_steps) pos = (samples
