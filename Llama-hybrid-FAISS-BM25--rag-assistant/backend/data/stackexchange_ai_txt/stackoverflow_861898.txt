[site]: stackoverflow
[post_id]: 861898
[parent_id]: 861382
[tags]: 
Good question. I've just started a large project at work and part of previous projects was to introduce modularity to our code-base. I've heard bad things about maven. In fact, it's all I've ever heard about it. I looked at introducing it to solve the dependency nightmare we're currently experiencing. The problem I've seen with Maven is that it is quite rigid in its structure, i.e. you need to conform to its project layout for it to work for you. I know what most people will say - you don't have to conform to the structure. Indeed that's true but you won't know this until you're over the initial learning curve at which point you've invested too much time to go and throw it all away. Ant is used a lot these days, and I love it. Taking that into account I stumbled across a little known dependency manager called Apache Ivy . Ivy integrates into Ant very well and it's quick and easy to get basic JAR retrieval setup and working. Another benefit of Ivy is that it's very powerful yet quite transparent; you can transfer builds using mechanisms such as scp or ssh quite easily; 'chain' dependency retrieval over filesystems or remote repositories (Maven repo compatibility is one of its popular features). That all said, I found it very frustrating to use in the end - the documentation is aplenty, but it's written in bad English which can add to frustration when debugging or attempting to work out what's gone wrong. I'm going to revisit Apache Ivy at some point during this project and I hope to get it working properly. One thing it did do was allow us as a team to work out what libraries we're dependent on and get a documented list. Ultimately I think it all comes down to how you work as an individual/team and what you need to resolve your dependency issues. You might find the following resources relating to Ivy useful: Apache Ivy vs Maven 2 comparison Apache Ivy FAQ Apache Ivy feature list
