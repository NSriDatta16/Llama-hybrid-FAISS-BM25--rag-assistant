[site]: stackoverflow
[post_id]: 4312299
[parent_id]: 4312019
[tags]: 
If the ids are uniformly incremented without gaps, join the table to itself on id+1: SELECT d.id, d.date, n.date, datediff(d.date, n.date) FROM dates d JOIN dates n ON(n.id = d.id + 1) Then GROUP BY and average as needed. If the ids are not uniform, do an inner query to assign ordered ids first. I guess you'll also need to add a subquery to get the total number of rows. Alternatively Create an aggregate function that keeps track of the previous date, and a running sum and count. You'll still need to select from a subquery to force the ordering by date (actually, I'm not sure if that's guaranteed in MySQL). Come to think of it, this is a much better way of doing it. And Even Simpler Just noting that Vegard's solution is much better.
