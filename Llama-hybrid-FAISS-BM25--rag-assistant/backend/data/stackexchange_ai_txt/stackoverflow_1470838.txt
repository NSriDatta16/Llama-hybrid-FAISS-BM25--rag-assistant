[site]: stackoverflow
[post_id]: 1470838
[parent_id]: 1470770
[tags]: 
Blair's answer regarding reverting to the Win32 API, and calling the RegOpenKeyEx function within is about the best way of achieving this. Windows itself will map specific registry locations into logical views using a Registry Redirector and Registry Reflection . You can read more about this process in the following MSDN article: 32-bit and 64-bit Application Data in the Registry Despite the Win32 API being the best way to achieve this, this is the possibility of "hard-coding" the location of the registry that you are seeking to retrieve, although this is fraught with possible problems (Microsoft themselves do not support this method). You can read more about this in this Stack Overflow Question: How to open a WOW64 registry key from a 64-bit .NET application Ultimately, the Win32 API seems about the best solution (if not the most elegant) at the moment. Heath Stewart from Microsoft gives the following answer in this MSDN Social question: Unfortunately there isn't a way to pass those flags to the managed registry APIs under the Microsoft.Win32 namespace. You would have to P/Invoke the native API such as RegCreateKeyEx that you mentioned. Consider, however, if you need to store data in a 32- or 64-bit view of the registry. The topic Registry Redirector in MSDN has the keys that are redirected, which you're probably familiar with, and the topic Registry Reflection has the keys in which values are copied between 32- and 64-bit keys. If indeed you need separate views, you might also consider enabling registry reflection for your keys if you desire both your 32- and 64-bit applications to share at least some registry data. See the documentation for RegEnableReflectionKey for more details.
