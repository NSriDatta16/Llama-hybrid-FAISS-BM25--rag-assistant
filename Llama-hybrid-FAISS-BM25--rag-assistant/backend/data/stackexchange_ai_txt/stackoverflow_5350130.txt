[site]: stackoverflow
[post_id]: 5350130
[parent_id]: 995183
[tags]: 
There is an incredible compatibility issue with using keystrokes to detect the character pressed... see quirksmode to know more about that. I would suggest using keyup to create your filter because then you have the $(element).val() method you can use to evaluate actual universal characters. Then you can filter out any NON digits using a regex like: replace(/[^0-9]/g,''); This takes care of all issues like shift and paste problems because there is always a keyup and so the value will always be evaluated (unless javascript is turned off). So... to turn this into JQuery... Here is a little unfinished plugin I'm writing, it is called inputmask and will support more masks when finished. For now it has the digits mask working. Here it goes... /** * @author Tom Van Schoor * @company Tutuka Software */ (function($) { /** * @param {Object} * $$options options to override settings */ jQuery.fn.inputmask = function($$options) { var $settings = $.extend( {}, $.fn.inputmask.defaults, $$options); return this.each(function() { // $this is an instance of the element you call the plug-in on var $this = $(this); /* * This plug-in does not depend on the metadata plug-in, but if this * plug-in detects the existence of the metadata plug-in it will * override options with the metadata provided by that plug-in. Look at * the metadata plug-in for more information. */ // o will contain your defaults, overruled by $$options, // overruled by the meta-data var o = $.metadata ? $.extend( {}, $settings, $this.metadata()) : $settings; /* * if digits is in the array 'validators' provided by the options, * stack this event handler */ if($.inArray('digits', o.validators) != -1) { $this.keyup(function(e) { $this.val(stripAlphaChars($this.val())); }); } /* * There is no such things as public methods in jQuery plug-ins since * there is no console to perform commands from a client side point of * view. Typically only private methods will be fired by registered * events as on-click, on-drag, etc... Those registered events could be * seen as public methods. */ // private method var stripAlphaChars = function(string) { var str = new String(string); str = str.replace(/[^0-9]/g, ''); return str; } }); }; // static public functions //jQuery.fn.inputmask.doSomething = function(attr) { //}; // static public members //jQuery.fn.inputmask.someStaticPublicMember; // some default settings that can be overridden by either $$options or // metadata // If you need callback functions for the plug-in, this is where they get // set jQuery.fn.inputmask.defaults = { validators : [] }; })(jQuery); To use it just do: $('#someElementId').inputmask({ validators: ['digits','someOtherNotYetImplementedValidator'] }); The 'someOtherNotYetImplementedValidator' is just there to show how this can be expanded for extra future masks/validators. You can add it or leave it out, it doesn't break anything ;-) Appologies for the extra clutter of comments, I'm using a template I created for the guys here at work. Hope this helps, Cheers
