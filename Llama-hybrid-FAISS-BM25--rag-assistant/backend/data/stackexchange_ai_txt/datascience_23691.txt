[site]: datascience
[post_id]: 23691
[parent_id]: 
[tags]: 
Neural network for peak identification problem not training successfully

I'm trying to build a program that can identify peaks in a signal. It's my first attempt at machine learning so I'm starting with a toy problem where I'm generating a gaussian curve of random width and position with a small amount of added noise and trying to identify what part of the signal looks like a peak but I'm facing some issues. I'm using Theano+Lasagne and adapted my code from the MNIST.py example. Here's an example of what I feed to my code and what I get as a result: My idea is to feed the signal (1D vector of 512 values) to a simple neural network composed of 5 dense layers (3 linear followed by 2 sigmoids) of 128 neuron each. And training it on tens of thousands of generated examples. But the issue I'm facing is that no matter what I try regarding weight initialization or learning parameters I always converge to the same result : a network that seem to only spit out the average value of the "goal output" of all the examples it was trained with. I would assume that given the structure of my neural net and what data I'm feeding to it, it would easily converge to something that does a bit of averaging and thresholding to give me something reasonably close to the expected output. Is that foolish to assume ? Or am I missing something important ?
