[site]: crossvalidated
[post_id]: 211480
[parent_id]: 109796
[tags]: 
Since you asked for lowest possible details, I think you want mathematics or concepts. I think all answers above are relatively high level in a sense that they discuss tools. Fundamentally you wish to estimate a program $p$ that once you give it some input $\mathbf{x}$, it outputs a number in $[0,1]$ which is the probability of deal represented in $\mathbf{x}$ is going to be a winning one. There are possibly infinitely many estimations of $p$ that work equally accurately on your learning set. You need to use your domain knowledge to eliminate as much as possible from those infinitely many possible estimations of $p$ so that your space of possibilities shrink. Of course, you need to only remove bad ones (and keep good estimations). Once you get a set of possible estimations of $p$ that you could find, you use them in a voting ensemble where their votes are weighted based on the probability of how likely they are to predict correctly. As you see this is a very big problem. Simply choosing an algorithm that suggests to you estimations of $p$ limits your ability in seeing those estimations. There is no single algorithm to recommend in your case in my view. You need to explore your data, and try things out. Essentially, this is a game of guessing. Personally I'd give Random Forests-based ensembles in Regression mode a try first. If tinkering with their parameters doesn't help, I'll then try various designs of Artificial Neural Networks as some of them are known to be Turing complete. I think there is a reason why Deep Learning is heavily focused on Artificial Neural Network designs. I think it can do more than any other family of learnins methods.
