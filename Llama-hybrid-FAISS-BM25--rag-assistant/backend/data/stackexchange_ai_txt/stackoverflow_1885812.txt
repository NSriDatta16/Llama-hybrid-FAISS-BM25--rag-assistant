[site]: stackoverflow
[post_id]: 1885812
[parent_id]: 1885019
[tags]: 
The PLT solution is elegant, and ordinarily I prefer to use built-in higher-order functions as opposed to writing my own recursive functions. But if you want an efficient recursive solution with no allocation and no arithmetic, here it is: (define (all-but-one pred l) (if (null? l) #f ((if (pred (car l)) all-but-one all) pred (cdr l)))) The recursive call is in tail position, so both Scheme and Common LISP will compile this code into a tight loop. Some people might prefer this equivalent code: (define (all-but-one pred l) (if (null? l) #f (if (pred (car l)) (all-but-one pred (cdr l)) (all pred (cdr l)))))
