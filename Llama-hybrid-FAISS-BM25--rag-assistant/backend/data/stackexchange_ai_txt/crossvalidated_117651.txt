[site]: crossvalidated
[post_id]: 117651
[parent_id]: 117641
[tags]: 
It looks like what you have done in the second method is to have computed confidence intervals for the regression coefficients, then transformed those to obtain CIs for the predictions. This ignores the covariances between the regression coefficients. Try fitting the model without an intercept, so that the batch effects will actually be the predictions, and confint will return the intervals you need. Addendum 1 I did exactly what I suggested above: > fm2 confint(fm2) Computing profile confidence intervals ... 2.5 % 97.5 % .sig01 0.000000 1.637468 .sigma 2.086385 3.007380 batchA 60.234772 64.298581 batchB 57.268105 61.331915 batchC 60.018105 64.081915 batchD 57.668105 61.731915 batchE 53.868105 57.931915 batchF 59.001439 63.065248 batchG 57.868105 61.931915 batchH 61.084772 65.148581 batchI 56.651439 60.715248 batchJ 56.551439 60.615248 These intervals seem to jibe with the results from effects . Addendum 2 Another alternative is the lsmeans package. It obtains degrees of freedom and an adjusted covariance matrix from the pbkrtest package. > library("lsmeans") > lsmeans(fm1, "batch") Loading required namespace: pbkrtest batch lsmean SE df lower.CL upper.CL A 62.26667 1.125709 40.45 59.99232 64.54101 B 59.30000 1.125709 40.45 57.02565 61.57435 C 62.05000 1.125709 40.45 59.77565 64.32435 D 59.70000 1.125709 40.45 57.42565 61.97435 E 55.90000 1.125709 40.45 53.62565 58.17435 F 61.03333 1.125709 40.45 58.75899 63.30768 G 59.90000 1.125709 40.45 57.62565 62.17435 H 63.11667 1.125709 40.45 60.84232 65.39101 I 58.68333 1.125709 40.45 56.40899 60.95768 J 58.58333 1.125709 40.45 56.30899 60.85768 Confidence level used: 0.95 These are even more in line with the effect results: the standard errors are identical, but effect uses different d.f. The confint results in Addendum 1 are even narrower than the asymptotic ones based on using $\pm1.96\times\mbox{se}$. So now I think those are not very trustworthy. Results from effect and lsmeans are similar, but with an unbalanced multi-factor situation, lsmeans by default averages over unused factors with equal weights, whereas effect weights by the observed frequencies (available as an option in lsmeans ).
