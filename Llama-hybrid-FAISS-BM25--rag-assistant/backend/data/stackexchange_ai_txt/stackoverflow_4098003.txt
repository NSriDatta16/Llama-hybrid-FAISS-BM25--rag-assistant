[site]: stackoverflow
[post_id]: 4098003
[parent_id]: 4096091
[tags]: 
Hi here is a method that is tested and compiled using VC++9 #pragma pack( 1 ) union { struct { unsigned short val1:3; unsigned short val2:4; unsigned short val3:3; unsigned short val4:6; } vals; struct { unsigned char octet1:8; unsigned char octet2:8; } octets; short oneVal; } u = {0xFFFF}; unsigned char octet1 = 0xFF; //1 1111 111 unsigned char octet2 = 0x03; //000000 11 //000000 111 1111 111 0 7 15 7 u.octets.octet1 = octet1; u.octets.octet2 = octet2; cout Also note that I uses #pragma pack( 1 ) to set the structure packing to 1 byte. I also included a way of assigning the two octets into the one short value. Did this using bitwise shift " You can simplify the access to u by dropping the named structures. But I wanted to show the sizes that is used for the structures. Like this: union { struct { unsigned short val1:3; unsigned short val2:4; unsigned short val3:3; unsigned short val4:6; }; struct { unsigned char octet1:8; unsigned char octet2:8; }; short oneVal; } u = {0xFFFF}; Access would now be as simple as u.oneVal = 0xFACC; or u.octet1 = 0xCC; u.octet2 = 0xFA; you can also drop either oneVal or octet1 and octet2 depending on what access method you like.
