[site]: stackoverflow
[post_id]: 2802109
[parent_id]: 2801953
[tags]: 
My preference is to do as follows: Create a dedicated enum table in your database with columns: YourEnumId smallint, YourEnumName varchar(32). Within your business object table add foreign key references to the enum table. Implement your Java DAO to map enum values to database-specific smallint values when persisting data OR implement stored procedures that accept the enum name (i.e. varchar) and translate it into a smallint when writing the data. Advantages Increased normalisation (and hence lower storage overhead) compared with storing the string value explcitly in your database table. Your database data will not be corrupted if your java enum definition changes (e.g. if you change the ordering of the values). Your DAO class can fail-fast during initialisation by checking that the Java enum definition matches the contents of the YourEnum table. You can provide views onto the database that return the String enum values (e.g. If you or a user wishes to query the table directly). This is similar to cletus's solution except that the enum encoding is stored explicitly in the database rather than being defined as part of the enum definition.
