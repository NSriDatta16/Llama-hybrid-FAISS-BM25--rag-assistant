[site]: stackoverflow
[post_id]: 1904728
[parent_id]: 1049889
[tags]: 
Here's what I put together, that does allow pinch zooms in the simulator (haven't tried on a real iPhone), but I think would be fine: - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event { NSLog(@"Touch Began %d", [touches count]); reportTrackingPoints = NO; startTrackingPoints = YES; [viewTouched touchesBegan:touches withEvent:event]; } - (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event { if ([[event allTouches] count] == 2) { reportTrackingPoints = YES; if (startTrackingPoints == YES) { BOOL setA = NO; NSEnumerator *enumerator = [[event allTouches] objectEnumerator]; id value; while ((value = [enumerator nextObject])) { if (! setA) { startPointA = [value locationInView:mapView]; setA = YES; } else { startPointB = [value locationInView:mapView]; } } startTrackingPoints = NO; } else { BOOL setA = NO; NSEnumerator *enumerator = [[event allTouches] objectEnumerator]; id value; while ((value = [enumerator nextObject])) { if (! setA) { endPointA = [value locationInView:mapView]; setA = YES; } else { endPointB = [value locationInView:mapView]; } } } } //NSLog(@"Touch Moved %d", [[event allTouches] count]); [viewTouched touchesMoved:touches withEvent:event]; } - (void) updateMapFromTrackingPoints { float startLenA = (startPointA.x - startPointB.x); float startLenB = (startPointA.y - startPointB.y); float len1 = sqrt((startLenA * startLenA) + (startLenB * startLenB)); float endLenA = (endPointA.x - endPointB.x); float endLenB = (endPointA.y - endPointB.y); float len2 = sqrt((endLenA * endLenA) + (endLenB * endLenB)); MKCoordinateRegion region = mapView.region; region.span.latitudeDelta = region.span.latitudeDelta * len1/len2; region.span.longitudeDelta = region.span.longitudeDelta * len1/len2; [mapView setRegion:region animated:YES]; } - (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event { if (reportTrackingPoints) { [self updateMapFromTrackingPoints]; reportTrackingPoints = NO; } [viewTouched touchesEnded:touches withEvent:event]; } The main idea is that if the user is using two fingers, you track the values. I record the starting and ending points in startPoints A and B. Then I record the current tracking points, and when I'm done, on touchesEnded, I can call a routine to calculate the relative lengths of the line between the points I start with, and the line between the point I end with using simple hypotenuse calc. The ratio between them is the zoom amount: I multiply the region span by that amount. Hope it's useful to someone.
