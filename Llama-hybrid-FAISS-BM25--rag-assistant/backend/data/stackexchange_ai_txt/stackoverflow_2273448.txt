[site]: stackoverflow
[post_id]: 2273448
[parent_id]: 2273380
[tags]: 
The standard containers use allocators to seperate allocation/deallocation from construction/destruction. The standard library supplies a single allocator which allocates on the heap. This code declares an array big enough to hold SIZE elements of type T with the correct allignment: typedef typename std::tr1::aligned_storage ::value>::type aligned_storage; aligned_storage array[SIZE]; The solution using std::allocator can't be used to declare an array on the stack, and as the standard containers require that custom allocators hold no state, a custom allocator can't be portably used to allocate on the stack either. If your compiler doesn't support std::tr1::alignment_of you can use boost::alignment_of instead.
