[site]: stackoverflow
[post_id]: 1856709
[parent_id]: 1851239
[tags]: 
Here's what I came up with: import java.util.*; public class PhoneMmemonics { /** * Mapping between a digit and the characters it represents */ private static Map > numberToCharacters = new HashMap >(); static { numberToCharacters.put('0',new ArrayList (Arrays.asList('0'))); numberToCharacters.put('1',new ArrayList (Arrays.asList('1'))); numberToCharacters.put('2',new ArrayList (Arrays.asList('A','B','C'))); numberToCharacters.put('3',new ArrayList (Arrays.asList('D','E','F'))); numberToCharacters.put('4',new ArrayList (Arrays.asList('G','H','I'))); numberToCharacters.put('5',new ArrayList (Arrays.asList('J','K','L'))); numberToCharacters.put('6',new ArrayList (Arrays.asList('M','N','O'))); numberToCharacters.put('7',new ArrayList (Arrays.asList('P','Q','R'))); numberToCharacters.put('8',new ArrayList (Arrays.asList('T','U','V'))); numberToCharacters.put('9',new ArrayList (Arrays.asList('W','X','Y','Z'))); } /** * Generates a list of all the mmemonics that can exists for the number * @param phoneNumber * @return */ public static List getMmemonics(int phoneNumber) { // prepare results StringBuilder stringBuffer = new StringBuilder(); List results = new ArrayList (); // generate all the mmenonics generateMmemonics(Integer.toString(phoneNumber), stringBuffer, results); // return results return results; } /** * Recursive helper method to generate all mmemonics * * @param partialPhoneNumber Numbers in the phone number that haven't converted to characters yet * @param partialMmemonic The partial word that we have come up with so far * @param results total list of all results of complete mmemonics */ private static void generateMmemonics(String partialPhoneNumber, StringBuilder partialMmemonic, List results) { // are we there yet? if (partialPhoneNumber.length() == 0) { //Printing the pnemmonics //System.out.println(partialMmemonic.toString()); // base case: so add the mmemonic is complete results.add(partialMmemonic.toString()); return; } // prepare variables for recursion int currentPartialLength = partialMmemonic.length(); char firstNumber = partialPhoneNumber.charAt(0); String remainingNumbers = partialPhoneNumber.substring(1); // for each character that the single number represents for(Character singleCharacter : numberToCharacters.get(firstNumber)) { // append single character to our partial mmemonic so far // and recurse down with the remaining characters partialMmemonic.setLength(currentPartialLength); generateMmemonics(remainingNumbers, partialMmemonic.append(singleCharacter), results); } } }
