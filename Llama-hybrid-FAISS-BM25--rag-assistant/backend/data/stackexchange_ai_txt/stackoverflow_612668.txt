[site]: stackoverflow
[post_id]: 612668
[parent_id]: 612468
[tags]: 
‘super’ is a builtin. Unless you went out of your way to delete builtins, you shouldn't ever see “global name 'super' is not defined”. I'm looking at your user web link where there is a dump of IntrospectionHelper. It's very hard to read without the indentation, but it looks like you may be doing exactly that: built_in_list = ['__builtins__', '__doc__', '__file__', '__name__'] for i in built_in_list: if i in module.__dict__: del module.__dict__[i] That's the original module dict you're changing there, not an informational copy you are about to return! Delete these members from a live module and you can expect much more than ‘super’ to break. It's very hard to keep track of what that module is doing, but my reaction is there is far too much magic in it. The average Python program should never need to be messing around with the import system, sys.path, and monkey-patching __magic__ module members. A little bit of magic can be a neat trick, but this is extremely fragile. Just off the top of my head from browsing it, the code could be broken by things like: name clashes with top-level modules any use of new-style classes modules supplied only as compiled bytecode zipimporter From the incredibly round-about functions like getClassDefinitions, extractModuleNames and isFromBase, it looks to me like you still have quite a bit to learn about the basics of how Python works. (Clues: getattr, module.__name__ and issubclass, respectively.) In this case now is not the time to be diving into import magic! It's hard . Instead, do things The Normal Python Way. It may be a little more typing to say at the bottom of a package's mypackage/__init__.py: from mypackage import fooplugin, barplugin, bazplugin plugins= [fooplugin.FooPlugin, barplugin.BarPlugin, bazplugin.BazPlugin] but it'll work and be understood everywhere without relying on a nest of complex, fragile magic. Incidentally, unless you are planning on some in-depth multiple inheritance work (and again, now may not be the time for that), you probably don't even need to use super(). The usual “IPlugin.__init__(self, ...)” method of calling a known superclass is the straightforward thing to do; super() is not always “the newer, better way of doing things” and there are things you should understand about it before you go charging into using it.
