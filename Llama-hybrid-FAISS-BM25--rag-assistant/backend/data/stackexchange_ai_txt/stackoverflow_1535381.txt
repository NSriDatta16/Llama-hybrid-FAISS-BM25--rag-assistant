[site]: stackoverflow
[post_id]: 1535381
[parent_id]: 1535212
[tags]: 
You didn't mention if you were going to be test-driving code.. Go with NUnit if you're not familiar with any of the xUnit frameworks. Smallest learning curve. It has been around for longer. Charlie Poole is active on NUnit (open source) and has a good history of good updates. VS2008 has MSTest integrated inside it. It's not the same as NUnit. I've never had reason to switch from NUnit. I'd argue that NUnit definitely has the biggest user-base. NUnit has something bundled for Mocks but I'd definitely point you to Moq . Rhino Mocks has been the top dog for a while now but Moq has an easier learning curve (from online docs) although it may not always handle edge scenarios... yet IMHO Asserting exceptions is supported in both. I'd recommend getting a thin book 'Pragmatic Unit Testing in C# with NUnit' and going through it atleast once. On the NUnit v MSTest line, I'm not fit to comment. 0 flying-time with MSTest. Although I hear that VS2010 will offer trinkets like automated code-coverage reports.. only if you've MSTest tests. But that's the kind of argument I keep hearing in MSTests favor.. more on the lines of IDE Support and integration. There are great add-ins like Resharper and TestDriven that can patch that in but at a price. Also IMHO, Microsoft's unit testing tooling has a subtle way of leading you down the dark path. so be careful. See my comment to Dale on this thread.
