[site]: crossvalidated
[post_id]: 545253
[parent_id]: 545227
[tags]: 
The distance row in the summary() output corresponds to the propensity score. This terminology is a bit confusing, but I explain it in this post . The average difference between pairs is in the Std. pair dist. column. This is consistent with previous research finding that there is not a big difference in bias between using nearest neighbor and optimal matching because they tend to use the same control units as matches, though not necessarily matched to the same treated units. I'm not sure how you're judging which method yields better pairs, but it's not uncommon for the default use of method = "optimal" to yield pairs with a higher average pairwise propensity score difference than method = "nearest" . This is because optimal matching relies on a tolerance value; the lower the tolerance, the closer the resulting pairs will be (but the longer the matching will take). Set tols = 1e-7 when using method = "optimal" and the pairwise difference should be smaller. No, the ideal match is covariate balance if you are trying to form similar groups. Closer propensity scores facilitate finding balanced samples, but for a given pair of units, you would not expect the units to be similar with respect to any given covariate even if they had very similar propensity scores. In fact, this is exactly the reason King and Nielsen (2019) recommend against using propensity scores for matching. I discuss this finding a bit here . If you want pairs that are matched closely on specific covariates, you need to match directly on them, e.g., using the Mahalanobis distance or using genetic matching. It sounds like what you want is a caliper, which can be specified using the caliper argument. When you set a caliper to be, e.g., X, units can only be paired if the difference between their propensity scores is less than X. Any units that don't have a match due to the caliper are dropped. This is a very common method of matching. You can also place calipers on the covariates directly rather than on the propensity scores. All this is explained in the matchit() documentation, and there is an example of using calipers directly on covariate at ?method_nearest . Note that calipers are not allowed with optimal matching.
