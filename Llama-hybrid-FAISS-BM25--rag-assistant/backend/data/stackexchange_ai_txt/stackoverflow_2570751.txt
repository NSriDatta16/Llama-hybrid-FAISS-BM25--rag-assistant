[site]: stackoverflow
[post_id]: 2570751
[parent_id]: 2570691
[tags]: 
I agree with Anders: invert the condition and return early. "Single return point" used to be valuable when you needed to explicitly do a bunch of resource clean-up at that return point; with finally blocks, using statements and garbage collection it's not even a useful guideline any more, IMO. Any time you find yourself doing something just to get a single return point, consider whether it's actually making the code more readable. I almost always find that if at some point in the code I know the return value and there are no other actions I want to take within the method, the best thing is to return immediately. Forcing readers to look through the rest of the method just in case there's another action is neither elegant nor useful, IMO. I think it's a good thing that a method can't indicate that it should cause the caller to return - that ability sounds like a readability nightmare. Having said that, I have considered a new sort of conditional return statement: return? expression; This would return the evaluateed value of expression if it's non-null; you could use it for non-nullable types like this: int Foo() { return? Bar(); // Where Bar() has a return type of int? ... } Basically it would be the return statement equivalent of the null-coalescing operator. This wouldn't help in your case, mind you - you want to return null early...
