[site]: stackoverflow
[post_id]: 856931
[parent_id]: 856821
[tags]: 
As the above answer says, the import effectively does nothing regarding the Foo in the other package; regardless of whether you import or not, you can't refer to that other Foo via the short classname and you can refer to it via a fully-qualified classname. Conceptually you can think of import mypackage.* not necessarily as "import all classes from mypackage ", but perhaps "import all non-conflicting classes from mypackage ". I don't know how Sun's compiler implementation does it, but it could definitely decide not to match mypackage.Foo as part of the wildcard (and thus not import it at all) and the code would work the same either way. Importing is really just setting up an alias from short class name to fully qualified class name (e.g. when I say Date interpret that as java.util.Date ). It's to be expected that you get a warning if you do something that's completely redundant, such as importing just the conflicting class would be. However, if you're pulling in a whole package with * , it would seem wrong to me for the compiler to complain that one of the classnames clashes; this would happen so often in practice, and be harmless 99%+ of the time, that it would engender a "boy who cried wolf" syndrome to the point where you'd be less likely to pay attention to these and other warnings since you just get used to being bombarded with them. By the way, if you import both java.util.* and java.sql.* , this is allowed and does not in itself lead to any warnings; but if you then try to refer to just Date (without such a class in your local package), you'll get a compilation error as the name is ambiguous.
