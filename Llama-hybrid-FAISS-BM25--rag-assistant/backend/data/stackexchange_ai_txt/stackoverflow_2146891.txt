[site]: stackoverflow
[post_id]: 2146891
[parent_id]: 
[tags]: 
Stored procedures vs JDO for data warehousing project

In the old days we used to access the database through stored procedures. They were seen as `the better' way of managing the data. We keep the data in the database, and any language/platform can access it through JDBC/ODBC/etc. However, in recent years run-time reflection/meta-data based storage retrieval mechanisms such as Hibernate/DataNucleus have become popular. Initially we were worried that they'd be slow because of the extra steps involved (reflection is expensive) and how they retrieve unnecessary data (the whole object) when all we need is one field. I'm starting to plan for a large data warehousing project that uses J2EE, but I'm a bit unsure whether to go for Stored Procedures or JDO/JPA and the like. Recently, I've been working with Hibernate, and to be quite honest, I don't miss writing CRUD stored procedures! It essentially boils down to: Stored procedures + Can be optimised on the server (although only the queries) - There's likely to be more than a thousand stored procedures: add, delete, update, getById, etc, for each table. JDO + I won't spend the next few months writing parameters.add("@firstNames", customer.getFirstName()); ... - Will be slower than SPs (but most support paging) What would you plump for in my situation. In this case I think it's a much of a muchness. Thanks, John
