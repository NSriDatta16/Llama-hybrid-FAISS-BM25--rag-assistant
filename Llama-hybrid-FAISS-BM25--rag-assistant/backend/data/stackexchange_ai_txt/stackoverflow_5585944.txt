[site]: stackoverflow
[post_id]: 5585944
[parent_id]: 
[tags]: 
Cocoa: looking for a general strategy for programmatic manipulation of NSTextView storage without messing up undo

I am writing a special-purpose text editor in cocoa that does things like automatic text substitution, inline text completions (ala Xcode ), etc. I need to be able to programmatically manipulate the NSTextView ’s NSTextStorage in response to 1) user typing, 2) user pasting, 3) user dropping text. I have tried two different general approaches and both of them have caused the NSTextView ’s native undo manager to get out of sync in different ways. In each case, I am only using NSTextView delegate methods. I have been trying to avoid subclassing NSTextview or NSTextStorage (though I will subclass if necessary). The first approach I tried was doing the manipulations from within the textView delegate ’s textDidChange method. From within that method, I analyzed what had been changed in the textView and then called a general purpose method for modifying text that wrapped the changes in the textStorage with calls to shouldChangeTextInRange: and didChangeText: . Some of the programmatic changes allowed clean undo’s but some did not. The second (and maybe more intuitive because it makes changes before the text actually appears in the textView ) approach I tried was doing the manipulations from within the delegate ’s shouldChangeTextInRange: method, again using the same general purpose storage modification method that wraps changes in the storage with a call to shouldChangeTextInRange: and didChangeText: . Since these changes were being triggered originally from within shouldChangeTextInRange: , I set a flag that told the inner call to shouldChangeTextInRange: to be ignored so as not to enter recursive blackholeness. Again, Some of the programmatic changes allowed clean undo’s but some did not (though different ones this time, and in different ways). With all that background, my question is, can someone point me to a general strategy for programmatically manipulating the storage of an NSTextview that will keep the undo manager clean and in sync? In which NSTextview delegate method should I pay attention to the text changes in the textView (via typing, pasting, or dropping) and do the manipulations to the NSTextStorage ? Or is the only clean way to do this by subclassing either NSTextView or NSTextStorage ?
