[site]: datascience
[post_id]: 6933
[parent_id]: 6929
[tags]: 
1) If you want to build a model with: Input: Items bought Output: Win/Loss then you will probably want to learn a non-linear combination of the inputs to represent a build. For example item_X may have very different purpose when paired with item_Y than with item_Z . For the input format, you may consider creating a binary vector from the item list. For example if there were only ten items, a game in which the champion purchased items 1,4,5,9 (in any order) would look like row 1; a game where he also purchased item 2 and 7 would look like row 2: item_ID | 0 1 2 3 4 5 6 7 8 9 ________________________________________ champion_1| 0 1 0 0 1 1 0 0 0 1 champion_1| 0 1 1 0 1 1 0 1 0 1 There are a variety of models that might suit this task. You might use decision trees for interpretability. A simple neural net or SVM would likely also do a good job. These should all be found in most basic ML packages. 2) The win rates of various items are directly computable. Simply count the number of times a champion used the items in question and won and divide by the total number of times a champion used that item combination. You can do this for any given group size (1 to 6)
