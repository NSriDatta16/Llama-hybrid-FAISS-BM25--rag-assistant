[site]: stackoverflow
[post_id]: 4383120
[parent_id]: 4289749
[tags]: 
These are very messy. Here is a very simple and elegant solution. Say your grid needs to display data in a table with 3 columns. The data is coming from an object with the following structure: [Serializable] public class Foo { public string Bar1 { get; set; } public string Bar2 { get; set; } public string Bar3 { get; set; } } Then your user control will have the following markup: Markup (GridDisplayRow.ascx): Notice all the div tags. The children div's are floated... so that they display side by side. Codebehind (GridDisplayRow.ascx.cs): class GridDisplayRow:UserControl { public event EventHandler SomethingHappened; protected void Page_Load(object sender, EventArgs e) { //Initialize the drop down with something; } //this is where we handle internal events generated by children controls. //Eg: the drop down's index changed. protected void DDLProperty2_OnSelectedIndexChanged(object sender, EventArgs e) { //we update some other child control in this... this.TxtProperty1.Text = this.DDLProperty2.Value; //and maybe we want to signal the page that some event happened if(SomethingHappened != null) { //Notify the page that SomethingHappened event occured SomethingHappened(this, EventArgs.Empty); } } //This is where the binding happens public object BindingObject { set { Foo temp = (Foo)value; this.TxtProperty1.Text = temp.Bar1; this.DDLProperty2.Value = temp.Bar2; this.RadProperty3.Value = temp.Bar3; this.ViewState["Foo"] = temp; } } } So in the code above we are handling the binding to Foo, in other words we are displaying Foo's properties in each cell (div) of the control. The cast is needed because the property above is of type object, and in the ItemTemplate of the Grid/Repeater/What have you, you will bind an instance of the GridDisplayRow to the Container.DataItem object as shown bellow. Just keep in mind that if your data source is a DataSet for example, you have to cast to DataRow, or whatever appropriate data type is needed: Page Markup: Header 1 Header 2 Header 3 ' OnSomethingHappened="Row_SomethingHappened" /> I don't like working with grids because they are messy and cumbersome. In this instance we tricked the grid to create a Table with a single cell per row, and took care of the layout within that cell via style sheets. Please note that this works better with a Repeater as it is super efficient and has less overhead! Now binding the grid: Any source that implements IEnumerable can be used to bind to the grid. As such a collection such as List will suffice. When the GridRow control fires its events, a reference to the control itself is sent via the object sender, thus if you cast sender to its right type you can grab the control's inner properties.... possibilities are endless. The advantage of such method is abstraction. Each control can handle its own events, or chose to notify the page of events that occured inside of it.... bla bla bla. You get the idea.
