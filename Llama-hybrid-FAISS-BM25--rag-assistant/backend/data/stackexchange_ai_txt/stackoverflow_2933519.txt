[site]: stackoverflow
[post_id]: 2933519
[parent_id]: 2930206
[tags]: 
Your method of hex-decoding in Java using BigInteger will produce the wrong result much of the time because the Java BigInteger class encodes a value whose high-order byte is >= 128 with an extra zero byte at the front. Use the Apache commons codec for hex en/de-coding. EDIT: Your C# code is not correct. There is a .NET class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary that will do the hex en/de-coding for your C# code. The following C# code fragment should work better public static String execute(String content) { ASCIIEncoding encoding = new ASCIIEncoding(); byte[] plainbytes = System.Text.Encoding.ASCII.GetBytes(content); byte[] cipherbytes = rsa.Encrypt(plainbytes, false); SoapHexBinary hexBinary = new SoapHexBinary(cipherbytes); String cipherHex = hexBinary.ToString(); // This String is used on java side to decrypt Console.WriteLine("CIPHER HEX: " + cipherHex); return cipherHex; } EDIT 2: Seems that SoapHexBinary class might have had a short life in .NET. There are a number of good solutions to the problem at this msdn link .
