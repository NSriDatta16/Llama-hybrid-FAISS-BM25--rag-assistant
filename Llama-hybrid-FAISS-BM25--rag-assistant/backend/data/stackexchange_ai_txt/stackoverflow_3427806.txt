[site]: stackoverflow
[post_id]: 3427806
[parent_id]: 3427750
[tags]: 
No, because the characters "jgkl" from Statement A are used to initialize a , it does not create storage in the executable for a character string (other than the storage you created by declaring a ). This declaration creates an array of characters in read-write memory which contain the bytes {'j','g','k','l','\0'} , but the string which was used to initialize it is otherwise not present in the executable result. In Statement B, the string literal's address is used as an initializer. The variable char *b is a pointer stored in read-write memory. It points to the character string "jhdfjnfnsfnnkjdf" . This string is present in your executable image in a segment often called ".sdata", meaning "static data." The string is usually stored in read-only memory, as allowed by the C standard. That is one key difference between declaring an array of characters and a string constant: Even if you have a pointer to the string constant, you should not modify the contents. Attempting to modify the string constant is "undefined behavior" according to ANSI C standard section 6.5.7 on initialization.
