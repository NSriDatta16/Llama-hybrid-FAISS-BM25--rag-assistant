[site]: stackoverflow
[post_id]: 2315665
[parent_id]: 2315488
[tags]: 
You can iterate over each character in the text, examining each one to look for word breaks. The following example does this, counting each Chinese/Japanese/Korean (CJK) ideograph as a single word, and treating all alphanumeric strings as single words. Some notes on my implementation: It probably doesn't handle accented characters correctly. They will probably trigger word breaks. You can modify the wordBreakRegEx to fix this. cjkRegEx doesn't include some of the more esoteric code point ranges, since they require 5 hex digits to reference and JavaScript's regex engine doesn't seem to let you do that. But you probably don't need to worry about these, since I don't even think most fonts include them. I deliberately left Japanese Hiragana and Katakana out of cjkRegEx , since I'm not sure how you want to handle these. Depending on the type of text you're dealing with, it might make more sense to treat strings of them as single words. In that case, you'd need to add logic to recognize being in a "kana word" versus in a "alphanumeric word". If you don't care, then you just need to add their code point ranges to cjkRegEx . Of course, you could try to recognize word breaks within kana strings, but that quickly becomes Very Hard. Example implementation: function getWordCount(text) { // This matches all CJK ideographs. var cjkRegEx = /[\u3400-\u4db5\u4e00-\u9fa5\uf900-\ufa2d]/; // This matches all characters that "break up" words. var wordBreakRegEx = /\W/; var wordCount = 0; var inWord = false; var length = text.length; for (var i = 0; i The Unihan Database is very helpful for learning about CJK in unicode. Also of course the Unicode home page has loads of info.
