[site]: stackoverflow
[post_id]: 762346
[parent_id]: 762276
[tags]: 
Right now, the Entity Framework is really limited in terms of what kind of many to many relationships it can handle. The only thing that the Visual Studio designer will recognize is a table consisting of only two columns, both foreign keys to the other two tables, and where the primary key is a compound key on both of the foreign keys. So, if you have control of your database schema, one thing you could do is change your Org_Building_Relation table to drop the Building_org_ID column and make the primary key a compound key on Org_ID and Building_ID. If you do that, then when you map the tables the Entity Framework will recognize this as a many to many relationship. If you can't do that (e.g., you don't have control of the database schema), then you will need to make sure that the only fields that you map in your EDMX are the fields which relate to the other tables, and that you do not map the primary key. This is difficult, because the mapping wizard will discard and re-create the storage mapping every time you update. Another option would be to not use a "proper" many to many mapping in the Entity Framework and instead just treat the relationship as another entity instead of having it subsumed into the relationship. I can't remember if this has been improved in the forthcoming .NET 4.0.
