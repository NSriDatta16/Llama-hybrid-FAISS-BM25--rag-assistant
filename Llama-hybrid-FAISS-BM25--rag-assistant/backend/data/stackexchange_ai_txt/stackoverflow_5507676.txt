[site]: stackoverflow
[post_id]: 5507676
[parent_id]: 5507505
[tags]: 
The constructor does not call Initialize. IIRC What calls initialize is the Execute/ExecuteCore method. Here is the code from the MVC source: protected virtual void Execute(RequestContext requestContext) { if (requestContext == null) { throw new ArgumentNullException("requestContext"); } if (requestContext.HttpContext == null) { throw new ArgumentException(MvcResources.ControllerBase_CannotExecuteWithNullHttpContext, "requestContext"); } VerifyExecuteCalledOnce(); Initialize(requestContext); using (ScopeStorage.CreateTransientScope()) { ExecuteCore(); } } This is basically called from the MvcHandler in the BeginProcessRequest method. Update: RequestContext does not exist in a unit test, because you're not going through ASP.NET. If I remember correctly you'd need to mock it. Another problem in using Initialize in a test is the membership provider, which I haven't used myself, but I would guess that AccountMembershipService would fail you in a test? It seems to me that this would create fragile tests. It would probably also slow you down if it has to contact a server, and might fail you on a CI server. IMO,from a basic look around the Init method, it shouldn't be there. The easiest solution,without breaking anything, that comes to mind is using dependency injection to inject the CurrentUserId in the Controller ctor.
