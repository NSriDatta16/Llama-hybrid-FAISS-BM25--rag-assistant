[site]: stackoverflow
[post_id]: 460222
[parent_id]: 371445
[tags]: 
Heya dude - does this work? IEnumerable posts; IEnumerable categories; using (BlogContext ctx = new BlogContext(...)) { ctx.DeferredLoadingEnabled = false; // THIS IS IMPORTANT. IMultipleResults results = ctx.GetPostByID(...); posts = results.GetResult ().ToList(); categories = results.GetResult ().ToList(); } // Now we need to associate each category to the post. // ASSUMPTION: Each post has only one category (1-1 mapping). if (posts != null) { foreach(var post in posts) { int postId = post.PostId; post.Category = categories .Where(p => p.PostId == postId) .SingleOrDefault(); } } Ok. lets break this down. First up, a nice connection inside a using block (so it's disposed of nicely). Next, we make sure DEFERRED LOADING is off . Otherwise, when u try and do the set (eg. post.Category == blah ) it will see that it's null, lazy-load the data (eg. do a rountrip the database) set the data and THEN override the what was just dragged down from the db, with the result of there Where(..) method. phew! Summary: make sure deferred loading is off for the scope of the query. Last, for each post, iterate and set the category from the second list. does that help? EDIT Fixed it so that it doesn't throw an enumeration error by calling the ToList() methods.
