[site]: stackoverflow
[post_id]: 2460728
[parent_id]: 2450069
[tags]: 
So it seems i did a very weird thing in my OrganizationDomainServiceFactory. The code which did NOT work is this: public DomainService CreateDomainService(Type domainServiceType, DomainServiceContext context ) { WindsorContainer container = new WindsorContainer(new XmlInterpreter(new ConfigResource("castle"))); IRepository cultureRepository = container.Resolve >(); IRepository currencyRepository = container.Resolve >(); DomainService ds = (DomainService)Activator.CreateInstance(domainServiceType, new object[] { cultureRepository,currencyRepository }); ds.Initialize(context); return ds; } This is apparently not working, because of the creation of a new Container (which should not take place). OK! So i thought i try to use ServiceLocator to get a reference to the Windsor Container (used in the WindsorControllerFactory - that's how i call it ... in the boot up of the ASP.NET MVC application), and changed the code to this: public DomainService CreateDomainService(Type domainServiceType, DomainServiceContext context ) { IRepository cultureRepository = ServiceLocator.Current.GetInstance >(); IRepository currencyRepository = ServiceLocator.Current.GetInstance >(); DomainService ds = (DomainService)Activator.CreateInstance(domainServiceType, new object[] { cultureRepository,currencyRepository }); ds.Initialize(context); return ds; } and guess what: it works(!!!) multi-tenancy as it should be! The only thing i don't know is: is there another way to "inject" the container (constructor injection seems not to work here , the compiler complains) BTW: moved the project from VS2010Beta2 to VS2010RC (with RIA Services support), but this should not affect the outcome!
