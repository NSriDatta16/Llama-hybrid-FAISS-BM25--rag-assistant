[site]: stackoverflow
[post_id]: 3795860
[parent_id]: 3795561
[tags]: 
I'm guessing you're using monads-fd . $ ghci t.hs -hide-package mtl *Main Data.List> testMyDiv1 1 0 "*** Exception: My divison by zero *Main Data.List> :i Either ... instance Monad (Either e) -- Defined in Control.Monad.Trans.Error ... Looking in the transformers package, which is where monads-fd gets the instance, we see: instance Monad (Either e) where return = Right Left l >>= _ = Left l Right r >>= k = k r So, no definition for Fail what-so-ever. In general, fail is discouraged as it isn't always guaranteed to fail cleanly in a monad (many people would like to see fail removed from the Monad class). EDIT: I should add that it certainly isn't clear fail was intentioned to be left as the default error call. A ping to haskell-cafe or the maintainer might be worth while. EDIT2: The mtl instance has been moved to base , this move includes removing the definition of fail = Left and discussion as to why that decision was made. Presumably, they want people to use ErrorT more when monads fail, thus reserving fail for something more catastrophic situations like bad pattern matches (ex: Just x where e -->* m Nothing ).
