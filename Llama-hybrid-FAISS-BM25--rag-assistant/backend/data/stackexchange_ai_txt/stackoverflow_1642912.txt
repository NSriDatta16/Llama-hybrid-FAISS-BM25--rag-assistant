[site]: stackoverflow
[post_id]: 1642912
[parent_id]: 1642659
[tags]: 
I doubt either call will really significantly impact your application unless you really are creating something on a grand scale. Both techniques are creating a new string, however int.ToString() has to perform a lot less tasks than int.Parse(). int.ToString() is performed internally in the CLR (comnumber). int.Parse() is done inside the BCL source using Number.ParseInt32() -> Number.StringToNumber() -> Number.ParseNumber() . ParseNumber performs a huge number of checks so from a finger in the air guess you would imagine int.ToString() is faster. As others have mentioned, a proper performance test with the StopWatch class will be a better way to find out. You will want to try this out with the number format you are expecting: decimal, hex. You can compare the C++ that the CLR is using for ToString() here : Look for NumberToString (that's used for ToString() and other formats) which is used in FCIMPL3 , called by int.ToString() as an extern call. Int32ToDecStr is used for the "D" formatter. The C# var x = 5.ToString("D"); var y = 5.ToString(); I could be wrong about FCIMPL3, please correct me if I am.
