[site]: stackoverflow
[post_id]: 5072618
[parent_id]: 5071400
[tags]: 
I have come up with a solution by directly using the timer functionality provided by QObject . I suspect that there is a more elegant solution, but this will probably work for what I need. import sys from PyQt4 import QtCore class Test(QtCore.QObject): def __init__(self, parent=None): QtCore.QObject.__init__(self, parent) self.timers = {} def timerEvent(self, event): function = self.timers.pop(event.timerId()) self.killTimer(event.timerId()) function() def addDelayedCall(self, time, function): timer_id = self.startTimer(time) self.timers[timer_id] = function def clearPendingCalls(self): print(' Clearing pending function calls.') while self.timers: timer_id, function = self.timers.popitem() self.killTimer(timer_id) def setupCalls(self): self.addDelayedCall(500, self.dummy) self.addDelayedCall(1000, self.dummy) self.addDelayedCall(1500, self.dummy) self.addDelayedCall(2000, self.dummy) def dummy(self): print('dummy just got called.') if __name__ == '__main__': app = QtCore.QCoreApplication(sys.argv) test = Test(app) QtCore.QTimer.singleShot(0, test.setupCalls) QtCore.QTimer.singleShot(1250, test.clearPendingCalls) QtCore.QTimer.singleShot(5000, app.quit) sys.exit(app.exec_())
