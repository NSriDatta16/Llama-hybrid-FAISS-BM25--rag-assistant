[site]: stackoverflow
[post_id]: 2330576
[parent_id]: 2283937
[tags]: 
open a DB on a standalone server and give an encrypted remote connection to each web server that requires this feature. it does not have to be a relational DB, it can be a file system with FTP access, using folders and files instead of tables and rows. give the web servers write-only permissions if you can. Store the non-retrievable encryption of the password in the site's DB (let's call it "pass-a") like normal people do :) on each new user (or password change) store a plain copy of the password in the remote DB. use the server's id, the user's ID and "pass-a" as a composite key for this password. you can even use a bi-directional encryption on the password to sleep better at night. now in order for someone to get both the password and it's context (site id + user id + "pass-a"), he has to: hack the website's DB to get a ("pass-a", user id ) pair or pairs. get the website's id from some config file find and hack into the remote passwords DB. you can control the accessibility of the password retrieval service (expose it only as a secured web service, allow only certain amount of passwords retrievals per day, do it manually, etc.), and even charge extra for this "special security arrangement". The passwords retrieval DB server is pretty hidden as it does not serve many functions and can be better secured (you can tailor permissions, processes and services tightly). all in all, you make the work harder for the hacker. the chance of a security breach on any single server is still the same, but meaningful data (a match of account and password) will be hard to assemble.
