[site]: stackoverflow
[post_id]: 5515337
[parent_id]: 5515050
[tags]: 
The reasoning for the SCJP answer is that at line 6 there are no remaining statements in the scope of arr that refer to it. Under normal circumstances, this would make the array and its elements eligible for garbage collection. (The Java Language Spec (12.6.1) says this: "A reachable object is any object that can be accessed in any potential continuing computation from any live thread. Optimizing transformations of a program can be designed that reduce the number of objects that are reachable to be less than those which would naively be considered reachable. For example, a compiler or code generator may choose to set a variable or parameter that will no longer be used to null to cause the storage for such an object to be potentially reclaimable sooner. " As you can see, the real definition of reachability is not actually based on scoping.) There is another twist to this question ... If they had assigned i to myInt , autoboxing will use Integer.valueOf(i) , and that method would have recorded the Integer object in a static cache. This cache would have caused the object to remain reachable ... However, the Integer instance is created using new , so caching does not occur. And the object is unreachable at line 6.
