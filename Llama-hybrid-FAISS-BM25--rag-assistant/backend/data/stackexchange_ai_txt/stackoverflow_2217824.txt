[site]: stackoverflow
[post_id]: 2217824
[parent_id]: 2215712
[tags]: 
OK, this shows how it can be done (but it is very inelegant in my opinion): Func func = null; Expression > bind = (x) => func(x); Expression expr = Expression.Invoke(bind, Expression.Constant(5)); Expression > lambda = Expression.Lambda >(expr); Func compiled = lambda.Compile(); Console.WriteLine(expr); func = x => 3 * x; Console.WriteLine(compiled()); func = x => 7 * x; Console.WriteLine(compiled()); Console.Read(); Essentially I use (x) => func(x); to make a function that calls what the delegate points to. But you can see that expr is overly complicated. For this reason I don't consider this answer good, but maybe it can be built upon?
