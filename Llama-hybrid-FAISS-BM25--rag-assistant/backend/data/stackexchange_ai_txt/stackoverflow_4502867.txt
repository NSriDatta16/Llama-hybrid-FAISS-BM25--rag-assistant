[site]: stackoverflow
[post_id]: 4502867
[parent_id]: 4502425
[tags]: 
If blackberry's traditional corporate integration features are of interest you might look at that. Otherwise android is probably your best bet in terms of currently popular platforms (some of the more traditional linux-based phone stacks might be technically preferable, but their future is uncertain). You have full authority to independently deploy applications Most Android phones either accept an SD card up to 32GB or give you 16GB of built in storage. You can use wifi or mount it to a pc as a usb disk for updates (in addition of course to mobile data) While android promotes java development, its not actually necessary to use this except for application lifecycle and user interface purposes. You can write all your core code in C using most normal unprivileged unix-type capabilities, or in C++ - though there's a slowly shrinking list of limitations on C++. OpenGL ES is available for display. And actually, the latest version of android offers the necessary java wrappers already written to enable you to create a C/C++ application without writing any java code yourself. Another reason for going with android would be the potential of deploying your own customized device, not necessarily a smartphone but perhaps a tablet/pda or ruggedized system at some point in the future. Also, if the bulk of your code is C/C++ and your developers use reasonable abstractions, you should be able to create a project that will build as both a desktop and a mobile application, by wrapping the core code with either UI and application container.
