[site]: stackoverflow
[post_id]: 404802
[parent_id]: 404795
[tags]: 
Personally, and I think this is backed up by convention, EAFP is never a good way to go. You can look at it as an equivalent to the following: if (o != null) o.doSomething(); else // handle as opposed to: try { o.doSomething() } catch (NullPointerException npe) { // handle } Moreover, consider the following: if (a != null) if (b != null) if (c != null) a.getB().getC().doSomething(); else // handle c null else // handle b null else // handle a null This may look a lot less elegant (and yes this is a crude example - bear with me), but it gives you much greater granularity in handling the error, as opposed to wrapping it all in a try-catch to get that NullPointerException , and then try to figure out where and why you got it. The way I see it EAFP should never be used, except for rare situations. Also, since you raised the issue: yes, the try-catch block does incur some overhead even if the exception is not thrown.
