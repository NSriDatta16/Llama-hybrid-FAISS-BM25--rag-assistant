[site]: stackoverflow
[post_id]: 4924316
[parent_id]: 4923936
[tags]: 
Generic types with assignable type arguments are not assignable themselves. For instance, you cannot cast List to List , although string is an object . It is not immediately obvious why such casting is not supported so let me give you an example: var words = new List { "Serve God", "love me", "mend" }; var objects = (List ) words; // C# compiler wouldn't allow this objects.Add (new Car()); // we just added a Car to Shakespeare's work and the universe exploded C# doesn't encourage universe explosion, however since C# 4.0 a light version of this idea is implemented. You see, in some cases such casting would actually be safe. .NET 4.0 brings concepts of covariance and contravariance in generics only for interfaces and delegates , you may want to check this out. Example (doesn't work prior to .NET 4.0): void HandleCollection (IEnumerable collection) { // ... } var words = new List { "Serve God", "love me", "mend" }; // IEnumerable is defined as IEnumerable in .NET 4.0 // 'out' keyword guarantees that T is only used for return values // and therefore client code can't explode the universe var objects = (IEnumerable ) words; HandleCollection (objects);
