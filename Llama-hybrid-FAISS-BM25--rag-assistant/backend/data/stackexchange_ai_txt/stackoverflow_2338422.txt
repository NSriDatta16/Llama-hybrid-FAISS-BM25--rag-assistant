[site]: stackoverflow
[post_id]: 2338422
[parent_id]: 2338369
[tags]: 
Perl has two entirely separate but largely compatible variable systems, package variables, as in your first example, and lexical variables, as in the second. There are a few things that each can do but the other cant: Package variables are the only ones that can be: localized (with local ) used as the target for a symbolic reference (the reason the OP's second example doesnt work) used as barewords (sub definitions, file handles) used with typeglobs (because that's what the symbol really is under the hood) Lexical variables are the only ones that can be closed over (used in a lexical closure). Using strict would help by forcing you to declare package variables with our , making the difference clearer. There are several times where symbolic references are useful in Perl, most center around manipulating the symbol table (like writing your own import in a module rather than using Exporter , monkey-patching modules at runtime, various other meta-programming tasks). All of these are advanced topics. For other tasks, there is usually a better way to do it such as with a hash. The general rule of thumb is to always run under use warnings; use strict; unless you know there isn't any other way but to disable a portion of the pragma (such as using no strict 'refs'; in as small a scope as possible).
