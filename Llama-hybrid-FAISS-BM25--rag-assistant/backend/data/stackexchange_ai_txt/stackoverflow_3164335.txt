[site]: stackoverflow
[post_id]: 3164335
[parent_id]: 3148274
[tags]: 
Edit: This works only on concrete classes (the class to inspect has its own .class file). I changed the code below to reflect this. Until diving deeper into the ClassFileAnalyzer library to work with classes directly instead of reading them from a temporary file this limitation exists. Following approach works for me: Download and import following libarary ClassFileAnalyzer Add the following two static methods (Attention! getClussDump() needs a little modification for writing out the class file to a temporary file: I removed my code here because it's very special at this point): public static String getClassDump(Class c) throws Exception { String classFileName = c.getSimpleName() + ".class"; URL resource = c.getResource(classFileName); if (resource == null) { throw new RuntimeException("Works only for concreate classes!"); } String absolutePath = ...; // write to temp file and get absolute path ClassFile classFile = new ClassFile(absolutePath); classFile.parse(); Info infos = new Info(classFile, absolutePath); StringBuffer infoBuffer = infos.getInfos(); return infoBuffer.toString(); } public static > S sortMethodsBySourceOrder(Class c, S methods) throws Exception { String classDump = getClassDump(c); int index = classDump.indexOf("constant_pool_count:"); final String dump = classDump.substring(index); Collections.sort(methods, new Comparator () { public int compare(Method o1, Method o2) { Integer i1 = Integer.valueOf(dump.indexOf(" " + o1.getName() + lineSeparator)); Integer i2 = Integer.valueOf(dump.indexOf(" " + o2.getName() + lineSeparator)); return i1.compareTo(i2); }}); return methods; } Now you can call the sortMethodsBySourceOrder with any List of methods (because sorting arrays is not very comfortable) and you will get the list back sorted. It works by looking at the class dumps constant pool which in turn can be determined by the library. Greetz, GHad
