[site]: stackoverflow
[post_id]: 1791686
[parent_id]: 1789389
[tags]: 
Johnson is a RubyGem that turns the Mozilla SpiderMonkey JavaScript engine into an MRI C extension and allows very deep integration between Ruby and JavaScript, there is a fork of Johnson which replaces the SpiderMonkey engine with the Mozilla TraceMonkey engine and Lyndon is like Johnson but with JavaScriptCore instead of SpiderMonkey and MacRuby instead of MRI. I think I also remember someone working on embedding V8 with MRI, but I can't find the reference right now. The main problem with Johnson is that MRI is an incredibly crappy language implementation that leaks memory left and right, and the only language implementation in the world that could possibly be even more crappy is SpiderMonkey. Thus, the TODO list in the Johnson Git repository doesn't exactly inspire confidence; it only contains one item, and I quote literally: Stop freaking segfaulting. Lyndon is built on a much better foundation, but it obviously requires running OSX on the server. Plus, MacRuby hasn't been released yet. I think JRuby+Rhino is probably the most stable option, although you will have to build the integration yourself: they are just two independent language implementations that happen to live on the same VM, but there is no integration between them. A different take on the problem is RKelly which is a JavaScript parser and execution engine written in Ruby. As an alternative you could try to approach the problem from a different direction: instead of keeping your application logic in JavaScript and running that both on the client and the server, you could keep your application logic in Ruby and run that on the server and the client: there are a couple of compilers out there that can compile (a subset of) Ruby to JavaScript. On of them is RubyJS . (There is also HotRuby , which is a YARV bytecode interpreter written in JavaScript, but that would very likely be tremendous overkill for what you are doing.) And last but not least you could do what Rails originally did with their JavaScript helpers: you neither define your logic in Ruby nor JavaScript, instead you define it once in an internal Ruby DSL and generate both the Ruby and JavaScript logic from that.
