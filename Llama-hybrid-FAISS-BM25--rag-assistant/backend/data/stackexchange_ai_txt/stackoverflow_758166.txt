[site]: stackoverflow
[post_id]: 758166
[parent_id]: 758036
[tags]: 
This could be overkill, but Markov chains can lead to some pretty cool pattern recognition stuff. It's better suited to, well, chains of events: the idea is, based on the last N steps in a chain of events, what will happen next? This is well suited to text: process a large sample of Shakespeare, and you can generate paragraphs full of Shakespeare-like nonsense! Unfortunately, it takes a good deal more data to figure out sparsely-populated events. (Detecting patterns with a period of a month or more would require you to track a chain of at least a full month of data.) In pseudo-python, here's a rough sketch of a Markov chain builder/prediction script: n = how_big_a_chain_you_want def build_map(eventChain): map = defaultdict(list) for events in get_all_n_plus_1_item_slices_of(eventChain): slice = events[:n] last = events[-1] map[slice].append(last) def predict_next_event(whatsHappenedSoFar, map): slice = whatsHappenedSoFar[-n:] return random_choice(map[slice])
