[site]: stackoverflow
[post_id]: 1614485
[parent_id]: 1614422
[tags]: 
It depends a lot on how you implement your objects/validation, but your option number 5 is probably the best idea. If AJAX isn't your thing, you can accomplish the same thing by writing the relevant data of already-added-but-not-saved entries to hidden fields. In other words, the flow ends up something like this: User enters an item. Item is sent to the server and validated. The view is returned with the data entered by the user in hidden fields. User enters a second item. Item is sent to the server, and both items are validated. The view is returned with the data for both items in hidden fields. etc. So far as F5/Refresh killing entered data... In my experience this isn't too much of a problem. A more pressing concern is the back/forward buttons, which need to be managed with something like Really Simple History. If you DO want to make the page continue to work after a refresh, you need to do one of the following: Persist the records to the database, associated with the current user in some way. Persist the records to session. Persist the records to the query string. These are the only storage locations available that persist through both redirection and refreshes.
