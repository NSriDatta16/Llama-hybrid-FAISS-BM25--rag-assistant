[site]: stackoverflow
[post_id]: 595755
[parent_id]: 593228
[tags]: 
Back, as promised. Here are a few more ideas: You could chain the choices together with yield to do an in order traversal of the permutations. In other words, choose could build a set of nested iterators out of the options passed to it, and they would just yield to the next one in the chain. Exiting the enclosed block puts you right back after the yield; if you need more (e.g. failure reasons) you could raise and rescue. A funky arrangement of the three 'r's (rescue, raise, and retry) might do it, again with the idea that choose is nesting the option bodies or embedding them in a nested structure. If the options are cheap and side effect free, you might want to look at just producing all the permutations and iterating through them. If they aren't side effect free, you may want to try some sort of pseudo-monad solution, where you lazily produce lambdas for each permutation. More or less equivalent (but straying ever farther from your initial question) you might be able to assign them an index (easiest if you could determine the cardinality of each choice, but possible with a segmented index in any case) and iterate through the indexes. Fibers have been backported to 1.8.x But all things considered, I think your best answer would be to wrap the functionality you want in a class or function, implement it with callcc , and then do version detection in or around the definition of this as needed so that the right implementation is used in the right version of ruby.
