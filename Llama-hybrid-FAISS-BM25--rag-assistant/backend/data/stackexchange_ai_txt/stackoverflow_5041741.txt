[site]: stackoverflow
[post_id]: 5041741
[parent_id]: 5038581
[tags]: 
This is a convenient convention for many projects, and one which some tools support or expect. However, this isn't the full story. Although it's a good default, I don't think it should be regarded as inviolable best practice, because there are some circumstances which might motivate doing things another way. Additional factors to think about include: Unnecessary namespace proliferation and deeply nested namespace hierarchies can be a pain for users of your types. In a large library you may want to start organising the source code files into some folder structure before you feel the need to impose multiple namespaces on your clients. Related to this, namespace hierarchies in .NET are supposed to work such that dependencies between types go from child namespace to parent, not the other way around. This isn't always the natural way to organise source code into folders/directories. For example, one often sees people creating namespaces such as MyNamespace.Foo.Common containing utility types used both by types in MyNamespace.Foo.Bar1 and those in MyNamespace.Foo.Bar2. It seems sensible to them at the source code organisation level, but it breaks the namespace dependency convention. Sometimes you may want to provide additional functionality by adding some types to a library namespace by distributing a supplementary assembly rather than releasing a completely new version of the full library assembly. It's likely to be more convenient to keep source code files for the respective assemblies separate from each other in the repository, rather than to store them together just so as to keep all types for the namespace in the same folder. In short, I'd say follow the usual practice unless you have a good reason to do otherwise. But don't let it deter you, if you have a good reason to make use of the fact that Namespaces can provide a grouping of types completely orthogonal to their grouping into deployable assemblies and the source code which builds those.
