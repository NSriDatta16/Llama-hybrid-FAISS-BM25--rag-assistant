[site]: stackoverflow
[post_id]: 2637902
[parent_id]: 2636955
[tags]: 
I would think that an Observer Pattern might be adapted. The idea would be that each Node maintains a precomputed list and is simply notified by its parent of any update so that it can recompute this list. This can be done in 2 different ways: notify that a change occurred, but don't recompute anything recompute at each update I would advise going with 1 if possible, since it does not involve recomputing the whole world when root is updated, and only recomputing when needed (lazy eval in fact) but you might prefer the second option if you update rarely but need blazing fast retrieval (there are more concurrency issues though). Let's illustrate Solution 1: Root ___ Node1 ___ Node1A \ \__ Node1B \_ Node2 ___ Node2A \__ Node2B Now, to begin with, none of them has precomputed anything (there are all in a dirty state), if I ask for Node2A rules: Node2A realizes it is dirty: it queries Node2 rules Node2 realizes it is dirty: it queries Root Root does not have any parent, so it cannot be dirty, it sends its rules to Node2 Node2 caches the answer from Root , merges its rules with those received from Root and cleans the dirty bit, it sends the result of the merge (cached now) to Node2A Node2A caches, merges, cleans the dirty bit and returns the result If I subsequently asks for Node2B rules: Node2B is dirty, it queries Node2 Node2 is clean, it replies Node2B caches, merges, cleans the dirty bit and returns the result Note that Node2 did not recomputed anything. In the update case: I update Node1 : I use the Root cached rules to recompute the new rules and send a beat to Node1A and Node1B to notify them their cache is outdated Node1A and Node1B set their dirty bit, they would also have propagated this notification had they had children Note that because I cached Root rules I don't have to query the Root object, if it's a simple enough operation, you might prefer not to cache them at all: if you're not playing distributed here, and querying Root only involves a memory round-trip you might prefer not to duplicate it in order to save up some memory and book-keeping. Hopes it gets you going.
