[site]: stackoverflow
[post_id]: 2039658
[parent_id]: 2039169
[tags]: 
Update: This example is for winforms, and I believe the OP is asking about asp.net. I will revise my answer once I've had some feedback from my comments. You guessed it. I've found that an elegant way of multi-threading code in .Net is to use the BackgroundWorker class. It's really quite simple compared to implementing threads in say native C++. The example on the MSDN page is maybe a little overwhelming to be honest, and you could sum it up like so (pseudo code - may not compile): private BackgroundWorker bw; private void foobar() { bw = new BackgroundWorker(); // should be called once, in ctor bw.DoWork += new DoWorkEventHandler(bw_DoWork); bw.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bw_Completed); int i = 0; bw.RunWorkerAsync(i); } private void bw_DoWork(object sender, DoWorkEventArgs e) { int i = (int)e.Argument; i++; e.Result = i; } private void bw_Completed(object sender, RunWorkerCompletedEventArgs e) { if (e.Error != null) { MessageBox.Show(e.Error.Message); } else { int i = (int)e.Result; MessageBox.Show(i.ToString()); } } As for keeping repeated code to a minimum, you could use the same background worker for all methods I suppose, but you may be heading into smelly code territory with a big shiny golden hammer. Providing you only have a few methods, then creating event handlers for each operation shouldn't look too messy.
