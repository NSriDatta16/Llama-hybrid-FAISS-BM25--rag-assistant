[site]: stackoverflow
[post_id]: 4153718
[parent_id]: 
[tags]: 
Is there a name for this design pattern?

I keep finding myself solving something similar to the diamond inheritance problem (but without any inheritance!) as follows: type I = abstract member Foo : 'a type a = | A interface I with member this.Foo = this type b = | B interface I with member this.Foo = this The commonality between the types a and b is exposed via the I interface but members of the interface can return values of the specific underlying types a or b rather than having to be generalizing to any type implementing the interface. For example, this returns a value of the type a : > (A :> I ).Foo;; val it : a = A and this returns a value of the type b : > (B :> I ).Foo;; val it : b = B even though the values were upcast to the interface type. Is there a name for this? Are other people doing this?
