[site]: stackoverflow
[post_id]: 4695128
[parent_id]: 4685610
[tags]: 
It's probably better to use an average over a small number of frames. You mentioned that you want to calculate an average, but there is really no reason to keep such a larger number of samples around to calculate an average. Just keep a running total of frametimes over some small period of time (where small could be something between 10-50 frames - we typically use 16). You can then use that total to calculate an average frames per second. This method also helps smooth out frame time reports so that the numbers don't jump all over the place. One thing to watch out for though is that if you average over too long of a time period, frame rate spikes become more "hidden", meaning it might be tougher to spot frames which cause framerate to drop if those frames only happen every so often. Something like this would be totally sufficient I think (non-tested code to follow): // setup some variables once const int Max_samples = 16; // keep at most 16 frametime samples int FPS_Samples = 0; int Current_sample = 0; int Total_frametime = 0.0f; float Frametimes[Max_samples]; for ( int i = 0; i Then when you calculate your frametime, you could do something like this: // current_frametime is the new frame time for this frame Total_frametime -= Frametimes[Current_sample]; Total_frametime += current_frametime; Frametimes[Current_sample] = current_frametime; Current_sample = ( Current_sample + 1 ) % Max_samples; // move to next element in array Frames_per_second = Max_samples / Total_frametime; It's a rough cut and could probably use some error checking, but it gives the general idea.
