[site]: stackoverflow
[post_id]: 3886032
[parent_id]: 3885480
[tags]: 
I created a short test for this, with surprising results. At least for me, anyway, I would've thought it was the other way round. So, I wrote two versions of a program iterating over a function nothing(), that did nothing interesting (inc on a variable). The first used proper loops (a million iterations of 1000 iterations, two nested fors), the second one did a million iterations of 1000 consecutive calls to nothing(). I used the time command to measure. The version with the proper loop took about 3.5 seconds on average, and the consecutive calling version took about 2.5 seconds on average. I then tried to compile with optimization flags, but gcc detected that the program did essentially nothing and execution was instantaneous on both versions =P. Didn't bother fixing that. Edit: if you were actually thinking of writing 8 consecutive calls in your code, please don't. Remember the famous quote: "Programs must be written for people to read, and only incidentally for machines to execute.". Also note that my tests did nothing except nothing() (=P) and are no proper benchmarks to consider in any actual program.
