[site]: stackoverflow
[post_id]: 3653848
[parent_id]: 3652829
[tags]: 
I don't think it's too bad. Triangle lost some generality and became a peripheral class of Scene , but if it's not used as an external interface (and that sort of linkage to internal buffers suggests not), that's just a natural evolution. My solution would be similar to yours under the hood, but with more sugar. struct Triangle { Triangle( ... ) { ... } Vertex *a(),*b(),*c() ; // trivia: this is valid syntax! Getters adjust… private: size_t ax, bx, cx; // … offsets… Scene *client; // … into the Scene object's master vertex list. } ; This way, you don't have to reorganize things in memory, and adapting old code merely requires adding () to ->a and .a , etc, which can be done by search-and-replace, and improves OO style anyway. Or, do away with the constructor and private and make it POD.
