[site]: stackoverflow
[post_id]: 635563
[parent_id]: 635409
[tags]: 
I don't recommend trying to learn CUDA first since it's a new technology and you don't have much background in programming. Since you don't have much experience in C (or C++), CUDA will be a pain to learn since it lacks maturity, libs, nice error messages, etc. CUDA is meant for people who are familiar with C (C++ experience helps too) and have a problem which needs performance improvement by recoding or rethinking the solution of a well known problem. If you're trying to solve "ANN/Bayesian" problems I would recommend creating your solution in C++ or C, your choice. Don't bother about creating threads or multithreading. Then, after evaluation the response times of your serial solution try to make it parallel by using OpenMP, Boost threads, w/e. After this, if you still need more performance, then I would recommend learning CUDA. I think these are valid points because CUDA has some pretty cryptic errors, hard to debug, totally different architecture, etc. If you're still interested, these are some links to learn CUDA: Online courses: GPGP CIS 665 Richard Edgar's GPU Computing Pages Forum (the best source of information): NVIDIA CUDA Forum Tools: CUDPP Problems solved in CUDA: gpuDG Histogram Computation
