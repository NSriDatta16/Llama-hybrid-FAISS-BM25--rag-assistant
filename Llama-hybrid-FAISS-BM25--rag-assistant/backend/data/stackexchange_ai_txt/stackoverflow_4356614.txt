[site]: stackoverflow
[post_id]: 4356614
[parent_id]: 4356458
[tags]: 
Since you're new to programming in general, I'll tell you what I should have heard when I was a beginner: do it all the OO (Object Oriented) way. Someday you may be advanced enough to look at things like Functional programming, but until then, OO is the way to follow, it helps a lot. So what is this OO thing? Well, everything is an object. This means you are creating a Person object. And how do you do that? Defining a Class . Here's how it works: class Person { public Person(string name, string age, string city) { this.Name = name; this.Age = age; this.City = city; } public string Name { get; private set; } public string Age { get; private set; } public string City { get; private set; } public void SerializeToFile() { //Do the serialization (saving the person to a file) here. } } Then (for example in the "save" button), you create a Person from the values in the text fields and save it like so: private void buttonSave_Click(object sender, EventArgs e) { Person p = new Person(textBoxName.Text, textBoxAge.Text, textBoxCity.Text); p.SerializeToFile(); } This all may seem strange, but now you can do many things in a cleaner way, like maybe saving the person to a database or passing it as an argument without messy, fragmented and hard to mantain code. As a sidenote, this also allows inheritance: class Employee : Person { public string Job { get; private set; } } See, that class has the same code of the person class, but also a Job property. As a bonus to the clean code, you can pass an Employee to a method that takes a Person as an argument, because an employee "is a" person.
