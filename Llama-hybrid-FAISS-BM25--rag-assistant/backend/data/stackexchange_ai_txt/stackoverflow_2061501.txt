[site]: stackoverflow
[post_id]: 2061501
[parent_id]: 
[tags]: 
jQuery plugin design pattern (common practice?) for dealing with private functions

I've been developing jQuery plugins for quite some time now, and I like to think I know how to design one well by now. One issue keeps nagging me though, and that is how to deal with private functions in a powerful yet elegant manner. My plugins generally look something like this: (function($) { $.fn.myplugin = function(...) { ... // some shared functionality, for example: this.css('background-color', 'green'); ... }; $.fn.mypluginAnotherPublicMethod = function(...) { ... // some shared functionality, for example: this.css('background-color', 'red'); ... }; }(jQuery)); Now my question is: how to neatly DRY up that shared functionality? An obvious solution would be to put it in a function within the plugin's namespace: var fill = function($obj, color) { $obj.css('background-color', color); }; Although this solution is effective and nicely namespaced, I really dislike it. For one simple reason: I have to pass it the jQuery object. I.e. I have to call it like this: fill(this, 'red'); , while I would like to call it like this: this.fill('red'); Of course we could achieve this result by simply putting fill into jQuery.fn . But that feels very uncomfortable. Imagine having ten plugins developed based on this approach and each plugin putting five of those 'private' functions into the jQuery function namespace. It ends up in a big mess. We could mitigate by prefixing each of these functions with the name of the plugin they belong to, but that doesn't really make it more attractive. These functions are supposed to be private to the plugin, so we do not want to expose them to the outside world at all (at least not directly). So there's my question: does anyone of you have suggestions for how to get the best of both worlds. That is; plugin code being able to call 'private' plugin functions in a way similar to this.fill('red') (or this.myplugin.fill('red') or even this.myplugin().fill('red') etc.), while preventing jQuery function namespace pollution. And of course it should be light-weight, as these private functions might be called very frequently. UPDATE : Thanks for your suggestions. I especially like David's idea of defining an object type that holds the 'private' functions and wraps a jQuery object. The only problem with it is that it still disallows me from chaining 'private' and 'public' functions. Which was big reason to want a syntax like this.fill('red') to begin with. I ended up with a solution which I consider not tremendously elegant, but appealing to the 'best of both worlds' cause: $.fn.chain = function(func) { return func.apply(this, Array.prototype.slice.call(arguments, 1)); }; Which allows for constructs like: this. find('.acertainclass'). chain(fill, 'red'). click(function() { alert("I'm red"); }); I cross-posted my question in other places, which also collected some interesting responses: http://forum.jquery.com/topic/jquery-plugin-design-pattern-common-practice-for-dealing-with-private-functions http://groups.google.com/group/jquery-en/browse_thread/thread/fa8ccef21ccc589a
