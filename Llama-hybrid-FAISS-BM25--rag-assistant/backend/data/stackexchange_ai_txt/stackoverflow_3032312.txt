[site]: stackoverflow
[post_id]: 3032312
[parent_id]: 3031358
[tags]: 
There is a problem with your question: there are as many types of hash map as there are uses. There are many strategies to deal with hash collision and reallocation, depending on the constraints you have. You may find an average solution, of course, that will mostly fit, but if I were you I would look at wikipedia (like Dennis suggested) to have an idea of the various implementations subtleties. As I said, you can mostly think of the strategies in two ways: Handling Hash Collision: Bucket, which kind ? Open Addressing ? Double Hash ? ... Reallocation: freeze the map or amortized linear ? Also, do you want baked in multi-threading support ? Using atomic operations it's possible to get lock-free multithreaded hashmaps as has been proven in Java by Cliff Click ( Google Tech Talk ) As you can see, there is no one size fits them all. I would consider learning the principles first, then going down to the implementation details. C++ std::unordered_map use a linked-list bucket and freeze the map strategies, no concern is given to proper synchronization as usual with the STL. Python dict is the base of the language, I don't know of the strategies they elected
