[site]: datascience
[post_id]: 104926
[parent_id]: 
[tags]: 
Not sure how I can get class labels from Neural Network predictions. Would this be an acceptable alternative to the old method

I am currently working with a dataset that has over 300 variables and a target variable with 10 different classes. My goal is to use said variables and produce a prediction for the target variable. Since the target variable has mutually exclusive classes, I've come up with the following script: y_train_1 = pd.get_dummies(y_train["Class_target"]) y_train_1.columns = [f"Class_{i}" for i in y_train_1.columns] model = keras.Sequential([ keras.layers.Dense(250, activation = "relu", input_shape = [X_train.shape[1]]), keras.layers.Dense(250, activation = "relu"), # Softmax is used as the target variable has 10 different mutually exclusive classes keras.layers.Dense(10, activation = "softmax") ]) early_stopping = callbacks.EarlyStopping( min_delta = 0.001, patience = 20, restore_best_weights = True ) model.compile( loss = keras.losses.CategoricalCrossentropy(), optimizer = "adam", metrics = ["accuracy"] ) model.fit( X_train_1, y_train_1, validation_data = ( X_test_1, y_test_1 ), batch_size = 32, epochs = 3, callbacks = [early_stopping], verbose = 1 ) # The predictions are converted into a dataset and as the sum of each row is 1, I transpose the dataset and reset the index of the dataset to get a column of class labels. I used y_train_1.columns to get column labels for the probability dataset. predicted_df = pd.DataFrame(model.predict(X_train)) predicted_df.columns = y_train_1.columns predicted_df_1 = predicted_df.T.reset_index() new_list = [] # I then use the following loop to get the class labels for each row based on the maximum probability for each column values = list(predicted_df_1["index"]) for i in predicted_df_1.columns: if i != "index": column_list = list(predicted_df_1[i]) max_index = column_list.index(max(column_list)) new_list.append(values[max_index]) df_1 = pd.DataFrame({ "Predicted Classes":new_list }) The part that I'm particularly uneasy about is the part where I use y_train's column names as the predicted tables column names. I have no idea whether this is the correct way to get class labels or not as the old way of getting class labels (model.predict_classes()) is deprecated. I'd very much appreciate any form of assistance regarding this matter.
