[site]: stackoverflow
[post_id]: 4555085
[parent_id]: 4555036
[tags]: 
There are quite a few issues I see here. You have a parameter of type nvarchar without a size declared. When this happens, SQL Server defaults to 1 character, which is probably not what you want. I encourage you to specify the size. Your function returns an nvarchar, but you did not declare the size. You have declared local variables of type nvarchar without declaring the size. You are assigning variables without using the set key word. SET @ReturnValue = 'Y' EDIT You pass in @inIndicatorMode as an integer, but then you compare it to an nvarchar variable. This will cause SQL Server to do a type conversion prior to the compare. Type conversions are generally pretty fast, but it's best to avoid them when you can. You appear to be hard coding values just for the purpose of comparisons. Each declare and variable assignment will take a small amount of time to execute. The only advantage I see to this method is self documenting code. Instead of declaring variables, assigning variables, and then comparing those variables, I would suggest that you change the comparison to a hard coded value and then use comments in the code. IF (@inIndicatorMode = 1) --Alcohol Indicator BEGIN --select statment IF (@@ROWCOUNT > 0) BEGIN SET @ReturnValue = 'Y' END END It appears as though there are only 2 valid returns from this procedure, 'N' or 'Y'. I would encourage you to change the return data type to a bit. This allows you to write other code that treats the output of this function as a boolean instead of a string. In your post, you show 3 blocks of code. In the code you have a comment of "select statement". I assume each select statement is different. You also appear to be checking the @@RowCount afterwards, and if the row count is greater than 0, you set the output of the function to 'Y'. Instead, I would encourage you to use the Exists function instead. There is a slight performance gain when you use exists because it returns true as soon as SQL finds a single row that satisfies the query. For example: IF (@inIndicatorMode = 1) -- Alcohol Indicator BEGIN If Exists(-- Your select statement Here) BEGIN SET @ReturnValue = 'Y' END END
