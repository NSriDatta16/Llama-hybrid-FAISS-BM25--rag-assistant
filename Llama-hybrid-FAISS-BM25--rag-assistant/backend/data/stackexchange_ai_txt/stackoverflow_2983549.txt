[site]: stackoverflow
[post_id]: 2983549
[parent_id]: 2983530
[tags]: 
Let me rephrase to see if I understood the problem. You have a master thread which spawns 3 worker threads which each do a long running (infinite) job. At a certain point you want to interrupt processing, save the state of all threads to resume where they left off at a later time. I think the best way of doing this is organize your threads work in transactionally bound chunks. When restarting, you check the last completed transaction, and go from there. But since I suspect this to be a homework assignment in low level thread plumbing, may i suggest a shared boolean which is checked on every time you go through the loop to exit and store the state afterwards. Aternatively "kill" the thread and catch the exception and store the state. The last option is messy.
