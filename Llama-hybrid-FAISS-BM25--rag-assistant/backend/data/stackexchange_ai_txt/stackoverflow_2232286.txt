[site]: stackoverflow
[post_id]: 2232286
[parent_id]: 2232006
[tags]: 
Manual QA, more commonly known as Blackbox QA, is far from dead. It's true that unit tests and general automated tests can cover at least 90% of code-path testing. What many don't realize is that the last manual 10% can be the some of the most important work a software and hardware organization can do. Let's take the user interface, for example. A unit test can tell you that a check box is placed in the right location, and turns on and off as expected. What the test can't tell you is that it's horribly bitmapped and looks terrible with the hideous purple and yellow color scheme in the application. The most important reason for Blackbox QA is that you end up with strong customer advocate inside your organization. Many of these QA people (myself included), have more of a creative background than a programming background. While some may think of this as a failing, these are the people who don't care about how the code works - they care about how the product works. They spend time thinking like a customer, rather than a developer; "Oh, my almost dead iPod is finished syncing, that means I can close my laptop and just let it charge. Yup, and then I'll just pull it out when my machine is asleep (even though I was playing music from it on my computer) and everything will be fine." Developers and testers know how a product is supposed to work, and all exercise a product to specification. It's a good tester's job to use the product in a careless way, to make sure that bad stuff doesn't happen. Yank a USB drive from a computer while you're copying data, are you crazy?!? Sure, that's a really stupid idea. But people do it all the time. And a good QA person will do just that, to make sure that pulling a hard drive doesn't take a whole system down. Or turning off WiFi when downloading a movie, or syncing music while purchasing new content and then changing your account password and email address at the same time. Or installing an OS on an MP3 player and trying to boot from it, then pulling the player from the system while it's booted from the device (Yup, I did that, and found a really good bug from it). Joel on Software says "Why QA" much more eloquently than I do - http://www.joelonsoftware.com/items/2010/01/26.html
