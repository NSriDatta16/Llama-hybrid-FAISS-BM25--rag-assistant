[site]: stackoverflow
[post_id]: 744772
[parent_id]: 744637
[tags]: 
I use UDP a lot, and the main "reliability" issue I end up seeing is lost packets (particularly in fragmented IP packets). You could probably do 90% of what needs to be done by preventing fragmenting (add a layer that chops up datagrams into IP-sized chunks), and by having the recipeint detect and request resends for lost "chunks". However, this kind of thing is really what TCP was invented for. UDP is best used for time-sensitive data that would be stale on a resend anyway. There is a network topological solution. Just arrange things so that there can't be any collisions (the #1 source of lost packets on a LAN). Here's what we do where I work to make UDP reliable: Put one client and server on a dedicated ethernet link (perhaps a switch between them, but no other systems on their private LAN). Keep a strict client-server communications protocol on the UDP LAN. The server is never allowed to talk, except in response to the client. Turn off all exteranious networking garbage on that UDP link (Netbios, etc). Make ARP entries on both ends static (so ARP won't interfere once every 10 minutes). (Note: The last one is particularly important. On many systems IP packets that cause an ARP request are just thrown away, rather than sent after ARP is resolved).
