[site]: stackoverflow
[post_id]: 3128352
[parent_id]: 3128269
[tags]: 
Why 5 lines? Clean doesn't have a number attached to it. In fact, clean code might take more lines in the utility classes, which can then be reused over and over. Don't restrict yourself unnecessarily. class by_name { public: by_name(const std::string& pName) : mName(pName) {} template bool operator()(const T& pX) { return pX.name == pName; } private: std::string mName; }; Then: const Armature* SceneFile::findArmature(const char* name) { // whatever the iterator type name is auto iter = std::find_if(armatures.begin(), armatures.end(), by_name(name)); return iter == armatures.end() ? 0 : &(*iter); } Within restriction: class by_name { public: by_name(const std::string& pName) : mName(pName) {} template bool operator()(const T& pX) { return pX.name == pName; } private: std::string mName; }; Then: const Armature* SceneFile::findArmature(const char* name) { // whatever the iterator type name is auto iter = std::find_if(armatures.begin(), armatures.end(), by_name(name)); return iter == armatures.end() ? 0 : &(*iter); } :) C++0x has ranged-based for-loops, which I think would make the most elegant solution: const Armature* SceneFile::findArmature(const std::string& pName) const { for (auto a : armatures) { if (a.name = pName) return &a; } return 0; }
