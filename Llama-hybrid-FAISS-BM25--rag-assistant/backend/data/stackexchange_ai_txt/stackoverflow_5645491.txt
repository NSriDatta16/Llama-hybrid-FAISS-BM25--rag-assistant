[site]: stackoverflow
[post_id]: 5645491
[parent_id]: 5644730
[tags]: 
You can generally use the clock() function to get the start and end times of a single call to your function being tested. If, however, do_some_work() is particularly fast, it needs to be put in a loop and have the cost of the loop itself factored out, something like: #define COUNT 10000 // Get cost of naked loop. clock_t start_base = clock(); for (int i = count; i > 0; i--) ; clock_t end_base = clock(); // Get cost of loop plus work. clock_t start = clock(); for (int i = count; i > 0; i--) do_some_work() ; clock_t end = clock(); // Calculate cost of single call. double elapsed_time = end - start - (end_base - start_base); elapsed_time = elapsed_time / CLOCKS_PER_SEC / COUNT; This has at least two advantages: you'll get an average time which is more representative of the actual time it should take; and you'll get a more accurate answer in the case where the clock() function has a limited resolution.
