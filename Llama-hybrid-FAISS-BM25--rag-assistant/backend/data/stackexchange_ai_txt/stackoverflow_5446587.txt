[site]: stackoverflow
[post_id]: 5446587
[parent_id]: 5446316
[tags]: 
I think the differences are: Code first Very popular because hardcore programmers don't like any kind of designers and defining mapping in EDMX xml is too complex. Full control over the code (no autogenerated code which is hard to modify). General expectation is that you do not bother with DB. DB is just a storage with no logic. EF will handle creation and you don't want to know how it does the job. Manual changes to database will be most probably lost because your code defines the database. Database first Very popular if you have DB designed by DBAs, developed separately or if you have existing DB. You will let EF create entities for you and after modification of mapping you will generate POCO entities. If you want additional features in POCO entities you must either T4 modify template or use partial classes. Manual changes to the database are possible because the database defines your domain model. You can always update model from database (this feature works quite well). I often use this together VS Database projects (only Premium and Ultimate version). Model first IMHO popular if you are designer fan (= you don't like writing code or SQL). You will "draw" your model and let workflow generate your database script and T4 template generate your POCO entities. You will lose part of the control on both your entities and database but for small easy projects you will be very productive. If you want additional features in POCO entities you must either T4 modify template or use partial classes. Manual changes to database will be most probably lost because your model defines the database. This works better if you have Database generation power pack installed. It will allow you updating database schema (instead of recreating) or updating database projects in VS. I expect that in case of EF 4.1 there are several other features related to Code First vs. Model/Database first. Fluent API used in Code first doesn't offer all features of EDMX. I expect that features like stored procedures mapping, query views, defining views etc. works when using Model/Database first and DbContext (I haven't tried it yet) but they don't in Code first.
