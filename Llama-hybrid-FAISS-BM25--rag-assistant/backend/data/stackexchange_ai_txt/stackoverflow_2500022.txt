[site]: stackoverflow
[post_id]: 2500022
[parent_id]: 2499990
[tags]: 
No it shouldn't: Integer i1 = 128; Integer j1 = 128; Autoboxing causes two distinct Integer objects to be created in the implementation of Java that you are using. If the integer values were in the range -128 to 127, then the JLS states that the same Integer object would be used; see JLS 1.5.7 . However, the JLS does not require that i1 and i2 must have different values outside of that range. Indeed the following discussion in the JLS says this: Ideally, boxing a given primitive value p, would always yield an identical reference. In practice, this may not be feasible using existing implementation techniques. The rules above are a pragmatic compromise. The final clause above requires that certain common values always be boxed into indistinguishable objects. The implementation may cache these, lazily or eagerly. For other values, this formulation disallows any assumptions about the identity of the boxed values on the programmer's part. This would allow (but not require) sharing of some or all of these references. This ensures that in most common cases, the behavior will be the desired one, without imposing an undue performance penalty, especially on small devices. Less memory-limited implementations might, for example, cache all characters and shorts, as well as integers and longs in the range of -32K - +32K.
