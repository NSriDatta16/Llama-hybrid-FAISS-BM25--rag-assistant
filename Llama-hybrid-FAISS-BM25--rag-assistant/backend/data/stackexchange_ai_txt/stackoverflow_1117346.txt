[site]: stackoverflow
[post_id]: 1117346
[parent_id]: 1116974
[tags]: 
python is not a particularly functional language, and with the GIL, it's not very parallel, either, but combined with the multiprocessing module (standard since 2.6), you get both, but it's not quite as elegant as pure functional languages. Brief example: from multiprocessing import Pool def f(x): return x*x if __name__ == '__main__': pool = Pool(processes=4) # start 4 worker processes result = pool.apply_async(f, [10]) # evaluate "f(10)" asynchronously print result.get(timeout=1) # prints "100" unless your computer is *very* slow print pool.map(f, range(10)) # prints "[0, 1, 4,..., 81]"
