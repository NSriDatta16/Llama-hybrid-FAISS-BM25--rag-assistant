[site]: stackoverflow
[post_id]: 4785617
[parent_id]: 4785502
[tags]: 
Let foo::fact(n, res) denote your routine. Let baz::fact(n, res) denote someone else's override of your routine. The compiler is telling you that the semantics allow baz::fact() to be a wrapper, that MAY upcall (?) foo::fact() if it wants to. Under such a scenario, the rule is that foo::fact() , when it recurs, must activate baz::fact() rather than foo::fact() , and, while foo::fact() is tail-recursive, baz::fact() may not be. At that point, rather than looping on the tail-recursive call, foo::fact() must return to baz::fact() , so it can unwind itself.
