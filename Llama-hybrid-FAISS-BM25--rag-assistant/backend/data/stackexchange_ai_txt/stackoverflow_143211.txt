[site]: stackoverflow
[post_id]: 143211
[parent_id]: 143183
[tags]: 
I'm having a similar problem testing workflow-heavy MOSS-based application. Workflows in our case are based on WWF. My idea is to mock pretty much everything that you can't control from unit tests - documents storage, authentication, user rights and actions, sharepoint-specific parts of workflows for sharepoint (these mocks should be thoroughly tested to mirror behavior of real components). You use inversion of control to make code choose which component to use at runtime - real or mock. Then you can write system-wide tests to test workflows behavior - setting up your own environment, checking how workflow engine reacts. These tests are too big to call them unit-tests, still it is automated testing. This approach seems to work on trivial cases, but I still have to prove it is worthy to use in real-world workflows.
