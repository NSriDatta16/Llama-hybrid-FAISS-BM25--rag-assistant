[site]: stackoverflow
[post_id]: 5023981
[parent_id]: 5022956
[tags]: 
(I might be stating the obvious to some people ... but here goes.) If you are doing to reduce the size long values in some external serialization, go ahead. However, if you are trying to save memory in an Java program you are probably wasting your time. The smallest representation of a byte[] in Java is either 2 or 3 32-bit words. And that is for a byte array of length zero. Add some multiple of 32 bit words to for any array length greater than zero. Then you've got to allow at least 1 32-bit word to hold the reference to the byte[] object. If you add that up, it takes at least 4 words to represent any given long other than 0L as a byte[] . The only case where you are going to get any saving is if you are representing a number of long values in a single byte[] . You will need at least 3 long values before you can possibly break even, and even then if you will lose if the values turn out to be too large on average.
