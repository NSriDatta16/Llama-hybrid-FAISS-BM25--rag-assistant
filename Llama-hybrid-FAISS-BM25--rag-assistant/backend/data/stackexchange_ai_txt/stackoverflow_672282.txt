[site]: stackoverflow
[post_id]: 672282
[parent_id]: 671369
[tags]: 
The accepted answer will work, but I do recommend using variable names to keep track of section structure. My personal preference would be a context processor . If, for example, your site's section organization is transparently reflected in the url, try something like: # It may be convenient to make this function live in or near your url conf. def convert_url_path_to_folder_path(path): # fill in the magic here def sub_folder_available(request): folder = convert_url_path_to_folder_path(request.path) return {'subsection': folder, 'local_base':folder+'/base.html'} Then in your template, just call {% extends local_base %} There are probably a dozen other ways to do this, but the main thing is to think about avoiding hard-coding the folder name into the template. This will get you a lot of mileage, especially since you can just drag and drop template between sections if they happen to be similar enough. Another thing you might add insert is: def sub_folder_available(request): folder = convert_url_path_to_folder_path(request.path) # Check if local base exists: if os.access(folder+'/base.html',os.F_OK): base = folder+'/base.html' else: # revert to your global base base = 'base.html' return {'subsection': folder, 'base':base} The nice advantage of this strategy is of course that you can get a fly-weight section up and running without any local base template at all.
