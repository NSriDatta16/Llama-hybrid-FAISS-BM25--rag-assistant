[site]: stackoverflow
[post_id]: 4355627
[parent_id]: 4354758
[tags]: 
Let's say you want to parse a flat text file containing numbers separated by spaces. You'd like to parse this into a 2d array of int 's where each line is a "row" in your array. The ANTLR grammar for such a "language" could look like: grammar Number; parse : line* EOF ; line : Number+ (LineBreak | EOF) ; Number : ('0'..'9')+ ; Space : (' ' | '\t') {skip();} ; LineBreak : '\r'? '\n' | '\r' ; Now, you'd like to have the parse rule return an List of List objects. Do that by adding a returns [List > numbers] after your parse rule which can be initialized in an @init{ ... } block: parse returns [List > numbers] @init { $numbers = new ArrayList >(); } : line* EOF ; Your line rule looks a bit the same, only it returns a 1 dimensional list of numbers: line returns [List row] @init { $row = new ArrayList (); } : Number+ (LineBreak | EOF) ; The next step is to fill the List s with the actual values that are being parsed. This can be done embedding the code {$row.add(Integer.parseInt($Number.text));} inside the Number+ loop in your line rule: line returns [List row] @init { $row = new ArrayList (); } : (Number {$row.add(Integer.parseInt($Number.text));})+ (LineBreak | EOF) ; And lastly, you'll want to add the List s being returned by your line rule to be actually added to your 2D numbers list from your parse rule: parse returns [List > numbers] @init { $numbers = new ArrayList >(); } : (line {$numbers.add($line.row);})* EOF ; Below is the final grammar: grammar Number; parse returns [List > numbers] @init { $numbers = new ArrayList >(); } : (line {$numbers.add($line.row);})* EOF ; line returns [List row] @init { $row = new ArrayList (); } : (Number {$row.add(Integer.parseInt($Number.text));})+ (LineBreak | EOF) ; Number : ('0'..'9')+ ; Space : (' ' | '\t') {skip();} ; LineBreak : '\r'? '\n' | '\r' ; which can be tested with the following class: import org.antlr.runtime.*; import java.util.List; public class Main { public static void main(String[] args) throws Exception { String source = "1 2 \n" + "3 4 5 6 7 \n" + " 8 \n" + "9 10 11 "; ANTLRStringStream in = new ANTLRStringStream(source); NumberLexer lexer = new NumberLexer(in); CommonTokenStream tokens = new CommonTokenStream(lexer); NumberParser parser = new NumberParser(tokens); List > numbers = parser.parse(); System.out.println(numbers); } } Now generate a lexer and parser from the grammar: java -cp antlr-3.2.jar org.antlr.Tool Number.g compile all .java source files: javac -cp antlr-3.2.jar *.java and run the main class: // On *nix java -cp .:antlr-3.2.jar Main // or Windows java -cp .;antlr-3.2.jar Main which produces the following output: [[1, 2], [3, 4, 5, 6, 7], [8], [9, 10, 11]] HTH
