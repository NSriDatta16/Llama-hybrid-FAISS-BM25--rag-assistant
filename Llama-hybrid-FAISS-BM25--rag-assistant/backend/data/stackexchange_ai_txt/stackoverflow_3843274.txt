[site]: stackoverflow
[post_id]: 3843274
[parent_id]: 3805453
[tags]: 
you are not fill-rate bound (well you might be but there's a much bigger problem). You said you have 2000 sprites. For each you set the vertex/fragment shader seperately, you calculate the projection and other matrices for EACH sprite and you only render a single sprite with each render call. That way you will never be able to render a decent amount of sprites no matter whether you actually use textures/complex shaders or just plain flat shading. What you have to do: batching. Batching means that you must try to accumulate as many sprites into a single vertex buffer object and then draw as many of them as possible with a single call to glDrawElements/glDrawArrays. There's a couple of things that might keep you from batching sprites: they use different textures (they shouldn't use a texture atlas), they use different shaders (unlikely for 2000 sprites unless you do something really really weired) and so on. These can be solved to some extend. Sort by z-order, then by material, where material is texture/shader. Then you can send bigger groups of sprites over to the GPU in one call. The last thing i should mention: you will have to do the transformations on the CPU yourself instead of setting a new Matrix for each sprite and let the CPU do the work. For an example of how such a sprite batch might look you can check-out my SpriteBatch class i wrote for an Android game dev lib. It's not 100% optimal but pretty close and works for both GL ES 1.x and 2.0 (uses a static shader in the later case for now though). In there you can find how to easily transform the vertices of your sprites yourself without matrices. You can find the code at http://code.google.com/p/libgdx/source/browse/trunk/gdx/src/com/badlogic/gdx/graphics/SpriteBatch.java hth, Mario
