[site]: stackoverflow
[post_id]: 2432105
[parent_id]: 2432083
[tags]: 
This cannot be done, since what you're asking is declaring a variable ( magic ) of an unclosed generics type. One can work with unclosed generics but only at the type level, e.g.: delegate T FactoryDelegate (string name); var magicType = typeof (FactoryDelegate<>); and then "close" the type at a later point: var stringMagic = magicType.MakeGenericType(typeof(string)); Update: that said, here's a sample on how you can use the above technique to also work with unclosed method "types". Still not as elegant as it would be if we could assign unclosed types though..: public class UnclosedMethod { private readonly MethodInfo _method; public UnclosedMethod(Type type, string method) { _method = type.GetMethod(method); } public T Invoke (string name) { var fact = _method.MakeGenericMethod(typeof(T)); return (T)fact.Invoke(this, new object[] { name }); } } And then in code do this: var magic = new UnclosedMethod(typeof(Foo), "Factory"); var x = magic.Invoke ("bar");
