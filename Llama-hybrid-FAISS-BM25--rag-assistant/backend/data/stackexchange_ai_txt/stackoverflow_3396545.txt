[site]: stackoverflow
[post_id]: 3396545
[parent_id]: 3395588
[tags]: 
It actually all depends on the scheduler, type of multiprocessing, and current running environment. Assume nothing, test, test, test! If you're the only multi-threaded process on the system, multi-threading is generally a good idea. However, from the perspective of the ease of development, sometimes you want separate address spaces and shared data, especially in NUMA systems. One thing for sure: If it's a 'HyperThreaded' system, threads are much more efficient by virtue of close memory sharing. If it is a regular multi-core processing.. it should be similar. If it is a NUMA system, you're better off keeping data shared and code separate. Again, it's all architecture dependent, and it doesn't matter performance-wise unless you're in the HPC business. If you are in the HPC (supercomputing) business, TEST!. It's all machine dependent (and benefits are 10-25% on average, it matters if you're talking days of difference)
