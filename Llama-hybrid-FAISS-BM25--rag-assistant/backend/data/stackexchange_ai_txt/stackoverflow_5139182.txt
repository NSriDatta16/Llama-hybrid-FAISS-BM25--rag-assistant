[site]: stackoverflow
[post_id]: 5139182
[parent_id]: 5033344
[tags]: 
Try this simple rule: All the local variables like int a, float b etc in your kernel are stored in registers. This is only when local variables in your code remains within the limit of available registers in a multiprocessor, See Limits . However, if you declare a thousand integers like int a[1000] then a will not be stored in registers rather it will be stored in local memory (DRAM). The amount of shared memory used in your kernel code is Shared Memory/Block. For example if you define __shared__ float shMem[256] then you are using 256*4(size of float) = 1024 bytes of shared memory. The following sample code (it'll not work properly, just for example) uses 9 32-bit-registers per thread which are: int xIndex, yIndex, Idx, shY, shX, aLocX, aLocY and float t, temp . The code uses 324 bytes of shared memory per block, as BLOCK_DIM = 16. __global__ void averageFilter (unsigned char * outImage, int imageWidth, int imageHeight, cuviPoint2 loc){ unsigned int xIndex = blockIdx.x * BLOCK_DIM + threadIdx.x; unsigned int yIndex = blockIdx.y * BLOCK_DIM + threadIdx.y; unsigned int Idx = yIndex*imageWidth + xIndex; float t = INC; if(xIndex>= imageWidth|| yIndex>=imageHeight) return; else if(xIndex==0 || xIndex== imageWidth-1 || yIndex==0 || yIndex==imageHeight-1){ for (int i=-1; i
