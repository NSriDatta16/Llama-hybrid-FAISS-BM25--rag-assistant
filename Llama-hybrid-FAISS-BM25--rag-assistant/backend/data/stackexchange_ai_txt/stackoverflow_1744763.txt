[site]: stackoverflow
[post_id]: 1744763
[parent_id]: 
[tags]: 
Passing objects as parameters - Cannot NIL an object

I have this two functions: procedure TDisplay.CubAssign(VAR Obj: TCubObj; CONST bReleaseOnExit: boolean); begin ReleaseCubOnExit:= bReleaseOnExit; FCub:= Obj; if CubReady then begin Init; SetScrollBar; end else Clear; end; procedure TDisplay.CubRelease; begin if FCub<> NIL then TRY FreeAndNil(FCub); EXCEPT MesajErrDetail('CubRelease', 'Cannot free object'); END else FCub:= NIL; Clear; end; I place my TDisplay on a form and I create and assign a Cube object to TDisplay via CubAssign. Later I free that Cube by calling TDisplay.CubRelease. Now, when I close the form I don't know if my Cube was freed or not so I check it and if not NIL, I free it: procedure TForm1.FormDestroy(Sender: TObject); begin Display.CubRelease; if Cub<> NIL then FreeAndNil(Cub); end; However, at this point, the Cube is empty but not NIL. When FormDestroy is called, the program gives an 'Multi Free memory leak' error. Why? I already called TDiplay.CubRelease. Shouldn't it be NIL? The message I got suggests that the object was correctly freed, however it is not NIL. Which is the correct way to implement this? Edit/Clarifications The owner of the Cube cannot be determined exactly because the parent of Display is freeing the Display while still keeping the cube(s) for a while. In other words displaying the cube in display may be a life-time operation or it may take place only for a while. Also, in some cases I may not display the cube at all. In other words, when the main form closes, the display may be or may not be present. In other implementations (a simple viewer where all I want to do is only to display the cube), I want to let the Display to handle the destruction of the cubes because I don't want to keep and extra list of objects to store the cubes. In this case, basically, the Displays act like storage (owners) for cubes.
