[site]: stackoverflow
[post_id]: 4754578
[parent_id]: 4754558
[tags]: 
You are right - avoiding using a static class is a good idea. The only framework implemented way to hold onto the object on a per-user user basis is to store it as a session variable. That said, I should point out the following best practice recommendations: Don't use session variables. Don't keep database connections open (I assume this is what you are planning). Using session variables damages the scalability of your application, as does holding onto disposable objects. There is a limit to the number of database connections your database can handle, so if your site ever experiences high usage, you'll start to see failures if you are holding those connections open between requests. Also, session variables occupy memory for a certain timespan after the user has finished left the website. This is an unavoidable side-effect of session variables, and means that if you have had a lot of users within a certain time period, your application will be using quit a lot more RAM than it really needs to. You can configure sessions to use database storage instead of memory, but this will just create a different set of issues (and presumably you still need to hold onto a database connection!). Another problem with using sessions is that if you have more than two servers running the application, you need to maintain session state in the database, which will affect the performance of your app.
