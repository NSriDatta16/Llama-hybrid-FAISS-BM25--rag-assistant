[site]: stackoverflow
[post_id]: 2016197
[parent_id]: 1751588
[tags]: 
When you are repeating the same task many times, your CPU tends to run very efficiently. This is because your cache miss times and warm up of the CPU doesn't appear as a factor. Its is also possible you are not considering your JVM warm time either. If you try the same thing when the JVM and/or the CPU is not warmed up. You will get a very different results. Try doing the same thing say 25 times (Less than your compile threshold) and sleep(100) between tests. You should expect to see much higher times, closer to what you see in the real application. The behaviour of your app will differ but to illustrate my point. I have found waiting for IO can be more disruptive than a plain sleep. When you performing your benchmark, you should try to ensure you are comparing like with like. import java.io.*; import java.util.Date; /** Cold JVM with a Hot CPU took 123 us average Cold JVM with a Cold CPU took 403 us average Cold JVM with a Hot CPU took 314 us average Cold JVM with a Cold CPU took 510 us average Cold JVM with a Hot CPU took 316 us average Cold JVM with a Cold CPU took 514 us average Cold JVM with a Hot CPU took 315 us average Cold JVM with a Cold CPU took 545 us average Cold JVM with a Hot CPU took 321 us average Cold JVM with a Cold CPU took 542 us average Hot JVM with a Hot CPU took 44 us average Hot JVM with a Cold CPU took 111 us average Hot JVM with a Hot CPU took 32 us average Hot JVM with a Cold CPU took 96 us average Hot JVM with a Hot CPU took 26 us average Hot JVM with a Cold CPU took 80 us average Hot JVM with a Hot CPU took 26 us average Hot JVM with a Cold CPU took 90 us average Hot JVM with a Hot CPU took 25 us average Hot JVM with a Cold CPU took 98 us average */ public class HotColdBenchmark { public static void main(String... args) { // load all the classes. performTest(null, 25, false); for (int i = 0; i
