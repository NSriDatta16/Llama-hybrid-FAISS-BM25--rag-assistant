[site]: stackoverflow
[post_id]: 2901170
[parent_id]: 2887193
[tags]: 
Upon further inspection with Web Developent Helper , it appears that the web service requests are being made at the interval I set (5 secs), but the first request during the long-running task takes the duration of the task to return a result, while subsequent requests continue to return nothing. When the task completes, the first web service request sent when the task began returns with the status data. I've been trying to figure out why the initial request to the web service doesn't return until the task completes. Session variables may not be updated until the end of the AsyncPostBack request, so I tried the ASP.NET cache, but that doesn't work either. I tried a local variable with the web service, both in InstanceContextMode.PerSession and InstanceContextMode.Single modes. I've been following the example from MSDN Mag: July 2007: Cutting Edge , but using the ASP.NET cache doesn't seem to help with the AsyncPostBack. I'm going to try calling WebMethod methods in my code-behind directly instead of the AsyncPostBack, but the articles says it should work, so I'd like to figure out why my implementation doesn't. So: Page loads. setInterval('getUpdate()', 5000) starts. getUpdate() calls a web service and returns emtpy data every 5 secs. User clicks the button to start an AsyncPostBack in an UpdatePanel. Server-side processing starts on the long-running task. getUpdate() calls the web service. The request is pending. The long-running task proceeds. getUpdate() continues to call the web service every 5 secs. Each request returns empty data. The long-running task completes. The AsyncPostBack completes and returns a response to the browser. The outstanding web service request is sent a response. getUpdate() returns the web service response and updates the page to display the result.
