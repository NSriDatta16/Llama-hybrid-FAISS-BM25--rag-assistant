[site]: stackoverflow
[post_id]: 2138710
[parent_id]: 2138410
[tags]: 
Summarized and extended my comments from below the question here Like others said, it is not a Factory , simply because a pattern with this name does not exist. It's either an AbstractFactory or a FactoryMethod , though pragmatically people often refer to either or by just saying Factory and that's fine with me. Session, Cache and DB are usually something you will initialize early in your application flow, so this is basically bootstrap work. I get the impression what you are looking for is not so much the creation of objects, but their handling throughout the application. That's a somewhat different concern from what a FactoryWhatever does. Like I said in the comments, just because it isnt exactly a FactoryWhatever , doesn't mean that your code is bad. If it solves your problem, it's cool. But I still think, what you are trying to do, e.g. creating and managing resources at runtime is best used with a DI Service Container . If you don't want to use a DI Container now for this, you could have a look at Zend_Application and how they bootstrap resources . It's an alternative and leaves the possibility to add DI containers later. In fact, quite a lot of the topics in your previous questions have been solved in Zend Framework already, e.g. Config classes. I am not saying use ZF, but you could check it out to see how they do things. Of course, you can look at the other frameworks too. Some pattern sites with PHP examples: http://sourcemaking.com/creational_patterns http://www.fluffycat.com/PHP-Design-Patterns/ http://www.ibm.com/developerworks/library/os-php-designptrns/?S_TACT=105AGX44&S_CMP=ART http://www.ibm.com/developerworks/opensource/library/os-php-designpatterns/index.html?ca=drs-tp1308
