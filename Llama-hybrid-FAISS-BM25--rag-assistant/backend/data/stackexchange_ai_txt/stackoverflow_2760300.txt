[site]: stackoverflow
[post_id]: 2760300
[parent_id]: 2758704
[tags]: 
I was a in a very similar position to yourself a few years ago, with a complex, monolithic application consisting of a mix of EJB 1.x and a home-grown MVC framework. Migrating the whole thing at once was never an option, I needed a way of doing it a bit at a time, without breaking anything, and without requiring approval for a mega-budget project. The tool that let me do this was Spring (v1.2 as it was at the time). When you strip away all the buzzwords from Spring, what you're left with is a simple framework for integrating disparate application components, making it easier to swap these components out for alternatives, modernising as you go. For example, Spring gives you integration with Struts 1 , making it easier to introduce Struts 1 components into the "Spring way". Your Struts apps should operate as before, but now they've got the leverage to get themselves modernised from the bottom up. Next, Spring's data access abstractions will allow you to plug in your existing JDBC DAOs, and start introducing the DA abstractions to make them easier to modernise. If you choose to stick with JDBC, that's fine, Spring provides extensive JDBC support to make it feel less stone-age. If you want to tinker with JPA or Hibernate, then those will integrate with the Spring-managed application just as easily as JDBC will. For EJB, Spring can wrap the EJB access layer into something a bit less prehistoric, making them easier to swallow. Once you've isolated the client layer from the specifics of EJB data access, you could, if you choose, replace the EJBs (one at a time) with simpler Spring-managed components (with any of remoting, transactions, security, or none of them), or you can retain EJB (using EJB3, perhaps) if you choose to. In summary, let Spring take over the role of application "backbone", while starting off using the same legacy components you already have. You then have increased freedom to modernise, at the pace and risk you dictate. It won't be easy, but with some patience and perseverance you can get to where you want to go without too much disruption.
