[site]: stackoverflow
[post_id]: 4954025
[parent_id]: 4953983
[tags]: 
You've to use insert to populate the vector with your different arrays. Here is how you should do it. //initialized with one array std::vector vMasterList(gTestMenu, gTestMenu + 3); //adding more items vMasterList.insert( vMasterList.end(), gBrowseMenu , gBrowseMenu + 3); And then reimplement your pressKeyPair function, so that you can use std::for_each from header file as, //pressKeyPair will be called for each item in the list! std::for_each(vMasterList.begin(), vMasterList.end(), pressKeyPair); Here is how you can write the pressKeyPair function: void pressKeyPair(KeyPair &keyPair) //takes just one item! { //press key pair! } In my opinion, this is better design, as it doesn't need "manual" loop anymore at the calling site! You can even call pressKeyPair for first 5 items in the list as, //pressKeyPair will be called for first 5 items in the list! std::for_each(vMasterList.begin(), vMasterList.begin() + 5, pressKeyPair); One more example: //pressKeyPair will be called for 5 items after the first 5 items, in the list! std::for_each(vMasterList.begin()+5, vMasterList.begin() + 10, pressKeyPair); EDIT: If you want to use manual loop, then you've to use this: std::vector ::iterator it; for( it = vMasterList.begin(); it != vMasterList.end(); ++it) { pressKeyPair(*it); } But I would say it's not as elegant as the approach described earlier. Remember, this assumes that the function pressKeyPair has this signature: void pressKeyPair(KeyPair &keyPair); //it doesn't accept array!
