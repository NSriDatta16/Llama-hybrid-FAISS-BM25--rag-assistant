[site]: stackoverflow
[post_id]: 4984188
[parent_id]: 
[tags]: 
An alternative way to use Azure Table Storage?

I'd like to use for table storage an entity like this: public class MyEntity { public String Text { get; private set; } public Int32 SomeValue { get; private set; } public MyEntity(String text, Int32 someValue) { Text = text; SomeValue = someValue; } } But it's not possible, because the ATS needs Parameterless constructor All properties public and read/write. Inherit from TableServiceEntity; The first two, are two things I don't want to do. Why should I want that anybody could change some data that should be readonly? or create objects of this kind in a inconsistent way (what are .ctor's for then?), or even worst, alter the PartitionKey or the RowKey. Why are we still constrained by these deserialization requirements? I don't like develop software in that way, how can I use table storage library in a way that I can serialize and deserialize myself the objects? I think that as long the objects inherits from TableServiceEntity it shouldn't be a problem. So far I got to save an object, but I don't know how retrieve it: Message m = new Message("message XXXXXXXXXXXXX"); CloudTableClient tableClient = account.CreateCloudTableClient(); tableClient.CreateTableIfNotExist("Messages"); TableServiceContext tcontext = new TableServiceContext(account.TableEndpoint.AbsoluteUri, account.Credentials); var list = tableClient.ListTables().ToArray(); tcontext.AddObject("Messages", m); tcontext.SaveChanges(); Is there any way to avoid those deserialization requirements or get the raw object? Cheers.
