[site]: stackoverflow
[post_id]: 3721838
[parent_id]: 3721085
[tags]: 
Be aware that converting durations that contain Days, Months, and/or Years into a duration like seconds can not be done accurately without knowing an actual starting date/time. For Example 1 SEP 2010: +P1M2D means +2764800 seconds 1 OCT 2010: +P1M2D means +2851200 seconds That's because September has 30-days, and October has 31-days. The same problem occurs with converting Year intervals, because of leap-years and leap-seconds. Leap-years introduce further complexity to the Month conversion as well - since February is one day longer in leap-years than it is otherwise. Days are problematic in areas where daylight saving time is practiced - a one-day period occurring during the DST transition, is actually 1-hour longer than it would be otherwise. All that being said -- you can, of course, compress values containing only Hours, Minutes, and Seconds into values containing just Seconds. I'd suggest that you build a simple parser to do the job (or maybe consider a regular expression). Just be aware of the pitfalls outlined above -- there there be dragons. If you intend to deal with Days, Months, and/or Years, you need to use one of the built-in mechanisms to do the math for you in the context of a known date/time. As others have mentioned: the DateInterval class, in combination withe the functions provided on the DateTime class is probably the most intuitive way to deal with this. But that's only available in PHP version 5.3.0 or greater. If you have to work with less than v5.3.0, you can try to build something around this little gem: $startDateTime = '19700101UTC'; $duration = strtotime( $startDateTime.'+1Year1Day1Second' ) - strtotime($startDateTime); print("Duration in Seconds: $duration"); strtotime won't work with the ISO 8601 format directly (eg. P1Y1DT1S ), but the format that it does understand ( 1Year1Day1Second ) is not too far off -- it would a pretty straight-forward conversion. (a little "hacky"... but that's PHP for you). good luck!
