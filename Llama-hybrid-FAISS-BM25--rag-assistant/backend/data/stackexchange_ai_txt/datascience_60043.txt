[site]: datascience
[post_id]: 60043
[parent_id]: 59001
[tags]: 
You have two separate problems going on. Use sigmoid First, when performing a binary classification problem, you should set the activation of your final layer to sigmoid (or softmax , which is equivalent in the binary classification case). Scale your data Second, when using neural networks, it's important to make sure your data is of a "reasonable" scale. A "reasonable" scale is usually something in the range of a 0-mean, unit-variance normal distribution. Effect of fixing these issues Let's look at the effect of fixing these issues after 5 epochs. If I change your last layer to sigmoid : model.add(Dense(3, input_dim=1, activation='relu')) model.add(Dense(5, activation='relu')) model.add(Dense(1, activation='sigmoid')) I get ~94% accuracy: Epoch 1/5 10000/10000 [==============================] - 1s 127us/sample - loss: 107.2031 - acc: 0.5594 Epoch 2/5 10000/10000 [==============================] - 1s 118us/sample - loss: 0.8730 - acc: 0.6688 Epoch 3/5 10000/10000 [==============================] - 1s 118us/sample - loss: 0.6432 - acc: 0.7455 Epoch 4/5 10000/10000 [==============================] - 1s 119us/sample - loss: 0.5688 - acc: 0.7899 Epoch 5/5 10000/10000 [==============================] - 1s 119us/sample - loss: 0.3340 - acc: 0.8631 10000/10000 [==============================] - 0s 10us/sample - loss: 0.2087 - acc: 0.9440 Accuracy: 94.40 If I change keep the last activation as sigmoid , but also scale your input values to be between 0 and 1: train_data.append([random.randrange(0, threshold) / 100000, 0]) train_data.append([random.randrange(threshold, 2 * threshold) / 100000, 1]) Then I get 99.8% accuracy. Epoch 1/5 10000/10000 [==============================] - 1s 128us/sample - loss: 0.5206 - acc: 0.7013 Epoch 2/5 10000/10000 [==============================] - 1s 114us/sample - loss: 0.2051 - acc: 0.9732 Epoch 3/5 10000/10000 [==============================] - 1s 115us/sample - loss: 0.1083 - acc: 0.9943 Epoch 4/5 10000/10000 [==============================] - 1s 116us/sample - loss: 0.0697 - acc: 0.9953 Epoch 5/5 10000/10000 [==============================] - 1s 116us/sample - loss: 0.0512 - acc: 0.9967 10000/10000 [==============================] - 0s 10us/sample - loss: 0.0450 - acc: 0.9980 Accuracy: 99.80
