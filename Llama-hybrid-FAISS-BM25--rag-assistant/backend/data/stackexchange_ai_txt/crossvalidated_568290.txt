[site]: crossvalidated
[post_id]: 568290
[parent_id]: 568286
[tags]: 
The main obstacle to implementing this in Keras or another modern NN library will be formalizing the relationship between the model predictions and the "actions" that are executed. At a high level of generality, the standard approach uses a loss function , and seeks to minimize the discrepancy between the model's predictions and the target. The target is the thing that you're predicting, such as a classification label. Sometimes this is called a "dependent variable." Once you have your target value and a loss function, Keras has optimizers that you can use to update the weights of your network for you. As an aside, you describe your model as "taking action." There are specialized methods for training neural networks to interact with an environment and receive feedback about the quality of the network's decisions. A recent example is Alpha Go, Google's neural network that learned how to play the game Go. This neural network was trained using reinforcement learning . I don't know if this is relevant to your specific task, but I thought I would mention it in case it was.
