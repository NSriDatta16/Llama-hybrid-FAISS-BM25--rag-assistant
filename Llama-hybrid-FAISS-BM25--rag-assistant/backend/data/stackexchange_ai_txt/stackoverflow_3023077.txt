[site]: stackoverflow
[post_id]: 3023077
[parent_id]: 3022715
[tags]: 
The title of your thread talks about C arrays, so here's a modification of jsumners' answer that will deal wiith C arrays. myArray is assumed to be an ivar declared thusly: int* myArray; storage for myArray is assumed to be malloc'd at some point and the size of it is in an ivar declared: int myArraySize; The code for description goes something like - (NSString *)description { NSMutableString *returnString = [[[NSMutableString alloc] init] autorelease]; for (int i = 0 ; i 0) { [returnString appendString: @", "]; } [returnString appendFormat: @"%d", myArray[i]]; } return [NSString stringWithFormat: @"[%@]", returnString]; } There are variations. The above version formats the string with bracket delimiters and commas between elements. Also, it returns an NSString instead of an NSMutableString which is not a big deal, but I feel that if you say you are returning an immutable object, you probably should.
