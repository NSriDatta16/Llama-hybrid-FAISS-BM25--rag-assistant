[site]: stackoverflow
[post_id]: 1743599
[parent_id]: 1741598
[tags]: 
Myth: "Ruby on Rails doesn't scale" Bust: That is not a specific, answerable question. Please clarify. Saying that whatever-technology "doesn't scale" sounds very professional and very enterprisey - but it's not a clear question. It's just a lazy way of dismissing the unknown/unproven I'd ask for clarification: "What precisely do you mean by 'scale'? and how do you measure it at the moment?" It could mean: Maximum user sessions Average response time given load Throughput of given concurrent scenarios per server in a fixed time. ... difficulties organising the project so a large team of developers could work on it. There are lots of ways of dealing with "scale" but until you know which one you're dealing with it's not always obvious what to do about it. There are loads of ruby-based solutions, including caching fragments of HTML sharding the application across multiple databases pre-computing work that's shared between users pushing lots of view-rendering work off into AJAX/Javascript land so it happens on the client using a front-end web server more efficiently just use more hardware (i.e. developer time is expensive & hardware prices fall) but this approach depends on a shallow rate of growth in demand doing less interactively and having more batch work doing only part of the work in ruby - e.g. existing legacy backend+rails frontend, or maybe the transactions through a functional programming system+rails frontend If the challenger can't come up with a specific meaning of "scale" then it isn't a valid concern. However if the challenger does come up with something specific and measurable , then I'd use a timeboxed, spike solution ( http://c2.com/xp/SpikeSolution.html ) to come back with some numbers - and possibly a few options on how to do it.
