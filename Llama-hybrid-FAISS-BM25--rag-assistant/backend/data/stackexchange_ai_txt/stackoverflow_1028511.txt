[site]: stackoverflow
[post_id]: 1028511
[parent_id]: 1028443
[tags]: 
It's completely legal. It will not be destructed until the program ends. EDIT: Yes , it's guaranteed: "All objects which do not have dynamic storage duration, do not have thread storage duration, and are not local have static storage duration. The storage for these objects shall last for the duration of the program (3.6.2, 3.6.3)." -- 2008 Working Draft, Standard for Programming Language C++ , § 3.7.1 p. 63 As Martin noted, this is not the whole answer. The standard draft further notes (§ 12.2, p. 250-1): "Temporaries of class type are created in various contexts: binding an rvalue to a reference (8.5.3) [...] Even when the creation of the temporary object is avoided (12.8), all the semantic restrictions shall be respected as if the temporary object had been created. [...] Temporary objects are destroyed as the last step in evaluating the full-expression (1.9) that (lexically) contains the point where they were created. [...] There are two contexts in which temporaries are destroyed at a diﬀerent point than the end of the full-expression. [...] The second context is when a reference is bound to a temporary. The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference except as speciﬁed below." I tested in g++ if that makes you feel any better. ;)
