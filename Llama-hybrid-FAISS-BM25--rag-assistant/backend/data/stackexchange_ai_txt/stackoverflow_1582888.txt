[site]: stackoverflow
[post_id]: 1582888
[parent_id]: 1582580
[tags]: 
For the first: static IEnumerable Permute(int x, int y, int z) { yield return x * 100 + y * 10 + z; yield return x * 100 + z * 10 + y; yield return y * 100 + x * 10 + z; yield return y * 100 + z * 10 + x; yield return z * 100 + x * 10 + y; yield return z * 100 + y * 10 + x; } static void Main() { var divs = new[] {3,5,7,11,13,17}; // combinations of 1-9 var combinations = from x in Enumerable.Range(1, 7) from y in Enumerable.Range(x + 1, 8 - x) from z in Enumerable.Range(y + 1, 9 - y) select new { x, y, z }; // permute var qry = from comb in combinations where !Permute(comb.x, comb.y, comb.z).Any( i => divs.Any(d => i % d == 0)) select comb; foreach (var answer in qry) { Console.WriteLine("{0}, {1}, {2}", answer.x, answer.y, answer.z); } } For the second - not elegant, but it works (returns the 8 permutations of the sample): static void Main() { var data = Enumerable.Range(1, 9); var magicSquares = // generate 1st row and deduce the target from a in data let arrA = new[] { a } from b in data.Except(arrA) let arrB = new[] { a,b } from c in data.Except(arrB) let arrC = new[] { a,b,c } let target = a + b + c // generate 2nd row and filter to target matches from d in data.Except(arrC) let arrD = new[] { a,b,c,d } from e in data.Except(arrD) let arrE = new[] { a,b,c,d,e } from f in data.Except(arrE) let arrF = new[] { a,b,c,d,e,f } where d + e + f == target // generate 3rd row and filter to target matches from g in data.Except(arrF) let arrG = new[] { a,b,c,d,e,f,g } from h in data.Except(arrG) let arrH = new[] { a,b,c,d,e,f,g,h } from i in data.Except(arrH) where g + h + i == target // filter columns && a + d + g == target && b + e + h == target && c + f + i == target // filter diagonals && a + e + i == target && c + e + g == target select new {a,b,c,d,e,f,g,h,i}; foreach (var row in magicSquares) { Console.WriteLine("{0} {1} {2}", row.a, row.b, row.c); Console.WriteLine("{0} {1} {2}", row.d, row.e, row.f); Console.WriteLine("{0} {1} {2}", row.g, row.h, row.i); Console.WriteLine(); } }
