[site]: stackoverflow
[post_id]: 1870663
[parent_id]: 1870557
[tags]: 
Unit tests are a good thing. However, the code has to be in a certain state before you can even unit test it. I bet you have data validation that talks to the persistence layer inside the message-handling functions. I'm sure you have thousands of lines of business logic that interrupts the user with confirmation message boxes. You have to separate the business logic from the user interface layer, and that can be a lot of work. Now you've got a classic Catch-22 situation - you're not supposed to refactor it without unit test coverage, and you can't write unit tests until it's refactored. So the only solution is to be very patient. Understand exactly how the application is supposed to work. Try and understand what each piece of messy code is doing. Accept the fact that sometimes you will not be able to make sense of some code, and the reason for this is that the code actually is pointless. But the pointless code will look exactly the same as the fundamentally useful code, and only extreme hard work will give you the insight to tell the difference. Work towards the goal of having unit test coverage - but the lack of unit tests should not stop you starting. Accept the fact that you may never get the unit test coverage you want, but keep the ideal in mind. And every day you will say to yourself "This would be so much faster if I just rewrote the whole thing". DO NOT ACT ON THIS FEELING. (See Joel's article, already mentioned).
