[site]: stackoverflow
[post_id]: 2671620
[parent_id]: 2671474
[tags]: 
The short answer is: IE and other browsers differ in their implementations of selecting text using JavaScript (IE has its proprietary methods). Have a look at Selecting text with JavaScript . Also, see setSelectionRange at MDC. EDIT : After making a little test case, the problem becomes clear. addRange test #trigger { background: lightgreen } This is some (rather short) text. Trigger testCase(). var origRange; var reselectFunc = function () { var savedRange = origRange; savedRange.removeAllRanges(); savedRange.addRange(origRange); }; var testCase = function () { // Before modifying selection, save it var userSelection,selectedText = ''; if(window.getSelection){ userSelection=window.getSelection(); } else if(document.selection){ userSelection=document.selection.createRange(); } selectedText=userSelection; if(userSelection.text){ selectedText=userSelection.text; } if(/msie|MSIE/.test(navigator.userAgent) === false){ /* you shouldn't do this kind of browser sniffing, users of Opera and WebKit based browsers can easily spoof the UA string */ selectedText=selectedText.toString(); } origRange = userSelection; window.setTimeout(reselectFunc, 1000); }; window.onload = function () { var el = document.getElementById("trigger"); el.onmouseover = testCase; }; When testing this in Firefox, Chromium and Opera, the debugging tools show that after invoking removeAllRanges in reselectFunc , both savedRange and origRange are reset. Invoking addRange with such an object causes an exception to be thrown in Firefox: uncaught exception: [Exception... "Could not convert JavaScript argument arg 0 [nsISelection.addRange]" nsresult: "0x80570009 (NS_ERROR_XPC_BAD_CONVERT_JS)" location: "JS frame :: file:///home/mk/tests/addrange.html :: anonymous :: line 19" data: no] No need to say that in all three browsers no text is selected. Apparently this in intended behaviour. All variables assigned a (DOM)Selection object are reset after calling removeAllRanges .
