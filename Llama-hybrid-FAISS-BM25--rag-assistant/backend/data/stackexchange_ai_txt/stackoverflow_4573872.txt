[site]: stackoverflow
[post_id]: 4573872
[parent_id]: 4573831
[tags]: 
I would say that these 2 courses found at MIT's open courseware give a pretty good picture of what's needed (2nd link is in comment): http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2005/lecture-notes/ I would say that you at least need everything mentioned in the 1st course "mathematics for computer science" (week 12-14). These topics have been very important for me for Algorithm Analysis, and will be the foundation if you want to learn the more advanced stuff in the 2nd course (as well as some calculus). The second course I wouldnt say you necessarily need, it depends on which direction you want to go, e.g. you will probably need it if you want to get into machine learning. (I am myself at the level where I need to learn a lot of the stuff from the 2nd course, so I don't know much about it's applicability beyond what I wrote) As to actually learning it, I've used Kenneth Rosen's book "Discrete Mathematics and it's applications", which is a nice book because it has a lot of exercises, with answers in the back for half of them. Exercises are really what's needed to learn this material, reading will only get you halfway. The book "Algorithm Design" by Jon Kleinberg and Eva Tardos is a nice book after having learnt some of it, to actually try and apply it in computer science. It has a chapter on randomized algorithms where probability theory is used extensively. Another suggestion for this would be "Introduction to Algorithms" by Leiserson, Cormen, Rivest and Stein. As for the more advanced probability theory, I'm currently reading "Probability and Statistics for Computer Science" by James L. Johnson, but I'm not completely sold on that book yet (I have only read the 1st 100 pages so far).
