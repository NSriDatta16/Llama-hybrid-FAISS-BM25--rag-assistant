[site]: stackoverflow
[post_id]: 718842
[parent_id]: 718739
[tags]: 
Working for 12 hours is a reality in many wealthier nations too. I wouldnt put this down to a culture thing. I live in a country with one of the highest standards of living in the world. I create software for the resources industry. Within this industry a 12 hour work day is often standard regardless of whether you are a truck driver or a programmer. If you are working in a remote area is it common to work 8 (or up to 14) 12 hour days in a row before having a few days off at home. It is totally counter productive and very unhealthy - I wouldnt recommend it to anyone. But yes, you can manage to still learn stuff. Here are my tips: If you have a problem that you are unsure how to approach, read MSDN, blogs, stackoverflow etc and really try to get a grip on ways to solve your problem. Then try and implement a solution immediately. This is essential to reinforce your learning. If you leave the implementation till 8 hours later you are likely to have forgotten what you have learnt and you'll just end up wasting time. If you dont have a particularly daunting problem you need to solve - try and figure out how to implement at least one part of your code in a more efficient or elegant way. For instance, if you have a trivial task such as creating some code to consume a web service, perhaps look at how to load this web service dynamically. Formulate your problem or question and post on Stackoverflow just before you leave work, This way when you arrive back at work you will hopefully have a number of responses to guide you with your challenge. Which brings me to my next point: Do your learning in the morning whilst you are fresh and alert. So here are the steps that work for me: find some small part of my code that I think can be improved in some way research it (30 minutes max) implement it immediately to gain the benefits of reinforcement learning Now even though you may only learn what seems like a trivial amount, if you do this everyday your knowledge of programming will gradually increase and with it the complexity of the ideas you can tackle within 30 minutes. I have found 30 minutes is a good window because it is generally small enough to avoid interruptions from phone calls or colleagues. If I find that what I want to achieve involves more than 30 minutes research, generally I have to push it aside and look at it another time when I am unencumbered by work. Some concepts are difficult and cant be easily digested in your 30 minute lunch break. There's not much anyone can do about that.
