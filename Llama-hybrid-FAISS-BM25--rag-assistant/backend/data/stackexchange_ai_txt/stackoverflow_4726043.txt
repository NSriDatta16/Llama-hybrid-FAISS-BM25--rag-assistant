[site]: stackoverflow
[post_id]: 4726043
[parent_id]: 4679028
[tags]: 
The trick is to "mark" the Reader. If your reader does not support marking you can wrap it in a BufferedReader which does: http://download.oracle.com/javase/6/docs/api/java/io/BufferedReader.html#markSupported%28%29 OPTION #1 - Check for BOM and Remove It I believe my original code was writing the BOM incorrectly. The source code below makes more sense: import java.io.*; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.xml.transform.stream.StreamResult; import javax.xml.transform.stream.StreamSource; public class Demo { private static char[] UTF32BE = {0x00, 0x00, 0xFE, 0xFF}; private static char[] UTF32LE = {0xFF, 0xFE, 0x00, 0x00}; private static char[] UTF16BE = {0xFE, 0xFF}; private static char[] UTF16LE = {0xFF, 0xFE}; private static char[] UTF8 = {0xEF, 0xBB, 0xBF}; public static void main(String[] args) throws Exception { // Create an XML document with a BOM FileOutputStream fos = new FileOutputStream("bom.xml"); writeBOM(fos, UTF16LE); OutputStreamWriter oswUTF8 = new OutputStreamWriter(fos, "UTF-8"); oswUTF8.write(" "); oswUTF8.close(); // Create a Source based on a Reader to simulate source.getRequest() StreamSource attachment = new StreamSource(new FileReader(new File("bom.xml"))); // Wrap reader in BufferedReader so it will support marking Reader reader = new BufferedReader(attachment.getReader()); // Remove the BOM removeBOM(reader); TransformerFactory tf = TransformerFactory.newInstance(); Transformer t = tf.newTransformer(); t.transform(new StreamSource(reader), new StreamResult(System.out)); } private static void writeBOM(OutputStream os, char[] bom) throws Exception { for(int x=0; x OPTION #2 - Find ' Read until you hit the ' import java.io.*; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.xml.transform.stream.StreamResult; import javax.xml.transform.stream.StreamSource; public class Demo2 { private static char[] UTF32BE = {0x00, 0x00, 0xFE, 0xFF}; private static char[] UTF32LE = {0xFF, 0xFE, 0x00, 0x00}; private static char[] UTF16BE = {0xFE, 0xFF}; private static char[] UTF16LE = {0xFF, 0xFE}; private static char[] UTF8 = {0xEF, 0xBB, 0xBF}; public static void main(String[] args) throws Exception { // Create an XML document with a BOM FileOutputStream fos = new FileOutputStream("bom.xml"); writeBOM(fos, UTF16BE); OutputStreamWriter oswUTF8 = new OutputStreamWriter(fos, "UTF-8"); oswUTF8.write(" "); oswUTF8.close(); // Create a Source based on a Reader to simulate source.getRequest() StreamSource attachment = new StreamSource(new FileReader(new File("bom.xml"))); // Wrap reader in BufferedReader so it will support marking Reader reader = new BufferedReader(attachment.getReader()); // Remove the BOM removeBOM(reader); TransformerFactory tf = TransformerFactory.newInstance(); Transformer t = tf.newTransformer(); t.transform(new StreamSource(reader), new StreamResult(System.out)); } private static void writeBOM(OutputStream os, char[] bom) throws Exception { for(int x=0; x
