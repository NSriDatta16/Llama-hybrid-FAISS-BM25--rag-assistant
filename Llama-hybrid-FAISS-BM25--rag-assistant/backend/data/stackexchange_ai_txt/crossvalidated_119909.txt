[site]: crossvalidated
[post_id]: 119909
[parent_id]: 119883
[tags]: 
In your question you are assigning a value to y[i] , not describing how the y's are distributed. If I understand you correctly, you want to describe the deterministic/predicted value Yhat using the function M(t,u,v) , with the stochastic/sampling process determined by a normal distribution (i.e. the actual observations). This can be accomplished by: y[i] ~ dnorm(Yhat[i], tau.sigma_y) Yhat[i] In more general terms: $$y_i \sim \mathcal{N}(\hat{y}_i,\sigma^2_y) \\ \hat{y}_i = M(t,u,v)$$ You then need to feed the correct values from the function M to each observation (through Yhat ), but that can be accomplished in several different ways. I don't know the specifics of your function, but as an made-up example case a function M(t,u,v) could be written as: Yhat[i] Here values of u , v and t for observation i is fed to Bugs as data and the parameters beta1, beta2 and beta3 are estimated (and you need to supply initial values of these). Or do you have a function M that truly cannot be specified in Bugs? You can also "pre-calculate" the values of M for each observation (from the t,v & u of the observation) and supply this as data to the model as: Yhat[i] This means that Yhat[i] is directly calculated from your simulation, and the step is redundant. You could just as well give Yhat as data (directly in Openbugs or e.g. called from R through R2Openbugs). Without knowing the exact purpose of your modelling exercise it is difficult to know what you want to accomplish with the MCMC model. If you need more flexibility to create user-defined functions, maybe to make external calls, you should look at STAN , where I think this is possible to a larger extent (I haven't used STAN though).
