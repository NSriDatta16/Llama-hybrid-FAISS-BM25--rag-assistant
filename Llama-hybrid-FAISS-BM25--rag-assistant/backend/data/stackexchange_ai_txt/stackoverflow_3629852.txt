[site]: stackoverflow
[post_id]: 3629852
[parent_id]: 3629553
[tags]: 
Firstly, the only initializer you can use in the array new-expressions is () . So, these are you only options if you want to use new-expression foo *bar = new foo[x]; // 1. no initializer foo *bar = new foo[x](); // 2. `()` initializer Depending on how foo is defined, these two might behave identically or differently. Secondly, since you can't pass the constructor arguments (y,z) in new-expression, you have to default-construct your array (as shown above) and then use assignment to give your array elements specific values. For this your foo has to be default-constructible and copy-assignable. The code will look pretty much like what your "experienced friend" suggested, but with proper types (instead of int ). What you have now is useless (where did that int come from?). Most likely you misunderstood your experienced friend. This is how it is supposed to look foo *bar = new foo[x]; for (int i = 0; i Thirdly, in your specific case std::vector will do the same thing in a much more elegant way.
