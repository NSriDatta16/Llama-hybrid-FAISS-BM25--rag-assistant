[site]: stackoverflow
[post_id]: 4046454
[parent_id]: 
[tags]: 
Possible risk with asynchronous request and delegation

I would like to add to UIImageView the capacity to set an image with an url. As result I would like to do something like. [anImageView setImageWithContentAtUrl:[NSURL URLWithString:@"http://server.com/resource.png"]]; So I created a category (code below). NSString *kUserInfoImageViewKey = @"imageView"; NSString *kUserInfoActivityIndicatorKey = @"activityIndicator"; @implementation UIImageView (asynchronous) #pragma mark - - (void)setImageWithContentAtUrl:(NSURL *)imageUrl andActivityIndicator:(UIActivityIndicatorView *)activityIndicatorOrNil { [activityIndicatorOrNil startAnimating]; NSMutableDictionary *dict = [[NSMutableDictionary alloc] init]; [dict setValue:self forKey:kUserInfoImageViewKey]; [dict setValue:activityIndicatorOrNil forKey:kUserInfoActivityIndicatorKey]; ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:imageUrl]; request.delegate = self; request.userInfo = dict; [dict release]; [request startAsynchronous]; } #pragma mark - #pragma mark private - (void)requestFinished:(ASIHTTPRequest *)aRequest { // get concerned view from user info NSDictionary *dictionary = aRequest.userInfo; UIImageView *imageView = (UIImageView *)[dictionary valueForKey:kUserInfoImageViewKey]; UIActivityIndicatorView *activityIndicator = (UIActivityIndicatorView *) [dictionary valueForKey:kUserInfoActivityIndicatorKey]; [activityIndicator stopAnimating]; NSData *responseData = [aRequest responseData]; UIImage * image = [[UIImage alloc] initWithData:responseData]; imageView.image = image; [image release]; } - (void)requestFailed:(ASIHTTPRequest *)request { } An ASIHTTPRequest is created and launched with the image as delegate. I think there is a risk if image is deallocated before ASIHTTPRequest return a result. So, maybe adding a retain in setImageWithContentAtUrl: and adding a release in requestFinished: and requestFailed: but I'm not very confident. How is it possible to do such things ? Regards, Quentin
