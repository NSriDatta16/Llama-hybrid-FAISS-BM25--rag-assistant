[site]: stackoverflow
[post_id]: 378480
[parent_id]: 378420
[tags]: 
No, not really. Not that I'm aware of anyway (though I'm interested to hear any of DDD's proponents' responses to the contrary). In my own experience, and that of the very experienced team that I work with, if you want optimal performance from a database-backed application the transformation of its architecture to be service-oriented is inevitable. I wrote more about this here (the article talks about lazy loaded properties, but you could consider the point to apply to any method on the class that needs to retrieve more data to do its job). So much as you're doing now, you could start with a rich domain model and transform it to be service-oriented where necessary for performance reasons. As long as you have defined performance goals and you're meeting them, there's no need to transform everything. I think it's a pretty decent pragmatic approach.
