[site]: stackoverflow
[post_id]: 392987
[parent_id]: 390481
[tags]: 
Javier made an interesting comment on my earlier answer (the one quoting Wordsworth): I think while(true){} is a more 'pure' construct than while(condition){}. and I couldn't respond adequately in 300 characters (sorry!) In my teaching and mentoring, I've informally defined "complexity" as "How much of the rest of the code I need to have in my head to be able to understand this single line or expression?" The more stuff I have to bear in mind, the more complex the code is. The more the code tells me explicitly, the less complex. So, with the goal of reducing complexity, let me reply to Javier in terms of completeness and strength rather than purity. I think of this code fragment: while (c1) { // p1 a1; // p2 ... // pz az; } as expressing two things simultaneously: the (entire) body will be repeated as long as c1 remains true, and at point 1, where a1 is performed, c1 is guaranteed to hold. The difference is one of perspective; the first of these has to do with the outer, dynamic behavior of the entire loop in general, while the second is useful to understanding the inner, static guarantee which I can count on while thinking about a1 in particular. Of course the net effect of a1 may invalidate c1 , requiring that I think harder about what I can count on at point 2, etc. Let's put a specific (tiny) example in place to think about the condition and first action: while (index The "outer" issue is that the loop is clearly doing something within someString that can only be done as long as index is positioned in the someString . This sets up an expectation that we'll be modifying either index or someString within the body (at a location and manner not known until I examine the body) so that termination eventually occurs. That gives me both context and expectation for thinking about the body. The "inner" issue is that we're guaranteed that the action following point 1 will be legal, so while reading the code at point 2 I can think about what is being done with a char value I know has been legally obtained. (We can't even evaluate the condition if someString is a null ref, but I'm also assuming we've guarded against that in the context around this example!) In contrast, a loop of the form: while (true) { // p1 a1; // p2 ... } lets me down on both issues. At the outer level, I am left wondering whether this means that I really should expect this loop to cycle forever (e.g. the main event dispatch loop of an operating system), or whether there's something else going on. This gives me neither an explicit context for reading the body, nor an expectation of what constitutes progress toward (uncertain) termination. At the inner level, I have absolutely no explicit guarantee about any circumstances that may hold at point 1. The condition true , which is of course true everywhere, is the weakest possible statement about what we can know at any point in the program. Understanding the preconditions of an action are very valuable information when trying to think about what the action accomplishes! So, I suggest that the while (true) ... idiom is much more incomplete and weak, and therefore more complex, than while (c1) ... according to the logic I've described above.
