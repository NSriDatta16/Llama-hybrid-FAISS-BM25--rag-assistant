[site]: crossvalidated
[post_id]: 442981
[parent_id]: 
[tags]: 
Heuristics for approximating the epsilon parameter for the DBSCAN algorithm

The classic heuristic for approximating the epsilon parameter for DBSCAN consists of manually visualizing a k-nn distances plot as proposed by the original authors of the algorithm [1]. I want to use DBSCAN for clustering 50 distinct datasets and I was wondering if there exist other heuristics which let us get the approximate values programmatically. I've tried looking at the 50 distinct plots and most of them don't clearly show the famous "knee" to take as the epsilon value and I didn't really feel like I was making a good estimation most of the time. I'm not worried too much about the minimum points parameter as all my datasets are 2-dimensional and the authors state that 4 minimum points should be ok most of the time for these cases. For the epsilon I've thought about a possible heuristic, but its really time consuming to compute and I don't feel like just pulling a method out of my sleeve like that as I very much rather just use an already existing method with a proper reference. What I thought of doing was to take each dataset and compute the eucledian distance between each pair of points combinatorially, then average all those distances and use that as the epsilon for that particular dataset. My biggest dataset has about 800 data points so this process isn't all that bad to compute, but then again I don't even know if it would be a good estimation of the parameter (a very obvious problem I see with this approach is that noisy points/outliers could throw my parameter off significantly). Does anyone know any published heuristics for automated estimation of the epsilon parameter for DBSCAN? Guess I could try looking at OPTICS too, but I'm more familiar with DBSCAN. [1] Martin Ester, Hans-Peter Kriegel, Jorg Sander, and Xiaowei Xu. A density-based algorithm for discovering clusters in large spatial databases with noise. In Proceedings of the Second International Conference on Knowledge Discovery and Data Mining, KDD’96, page 226–231. AAAI Press, 1996.
