[site]: stackoverflow
[post_id]: 4693004
[parent_id]: 4692845
[tags]: 
I'm not sure I understand quite what you're asking here. As an alternative to BadObject 's statefulness, could you not simply declare the method as public void execute(Map data) { ... } or similar? In general, when I think of functional and/or stateless idioms, the overwhelming code pattern that crops up is to have methods take parameters for everything they depend on (instead of getting them from fields or static methods or train wrecks ( getFoo().getCustomer().getAddress().getHouseName() )). That and return the result, rather than modifying the state of other objects. At this point, all the data classes can be immutable since there's nothing to modify, which makes the code much easier to understand and reason about. This wouldn't be one of the original GoF patterns, but I believe Josh Bloch has a paragraph on this in Effective Java entitled something like "Prefer immutability", which is catchy enough.
