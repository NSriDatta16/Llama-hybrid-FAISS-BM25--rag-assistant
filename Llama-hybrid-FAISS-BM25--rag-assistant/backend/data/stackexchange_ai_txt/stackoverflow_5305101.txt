[site]: stackoverflow
[post_id]: 5305101
[parent_id]: 5304925
[tags]: 
Sorry but I still don't get the point of this design. If a method is added to a class, its implementation will probably use private data to this class only, and therefore no guarantee can be made to 'sibling' classes that this data is also available for them. In other words, if your wish was granted, how would you guarantee that constructor Account(Object arg0) implementation won't use private data to Account class? (and therefore invisible to Accounts class) It seems to me like you desire your code to provide the same interface for a single account and a list of accounts - extending SomeEntity class. That can be accomplished more elegantly with a composite pattern. http://en.wikipedia.org/wiki/Composite_pattern if your intent however is to provide a custom constructor that only subclasses will use, why not declare the custom constructor in SomeEntity and making this class abstract? also, remember you can do this: public Account() { this(new arg0()); } Account(Object arg0) { } Not sure if this helps, though.
