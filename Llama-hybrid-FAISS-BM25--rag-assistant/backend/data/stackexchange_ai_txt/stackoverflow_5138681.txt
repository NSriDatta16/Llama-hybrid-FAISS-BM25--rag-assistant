[site]: stackoverflow
[post_id]: 5138681
[parent_id]: 5117248
[tags]: 
Hopefully, I have the perfect answer for you -- Berkeley DB and the SQL API . Last year Berkeley DB combined it's storage engine with the SQL layer of SQLite, providing a combined product that offers the best of both worlds. The ubiquity and ease of use of SQLite, with the concurrency, performance, scalability and reliability of Berkeley DB. Why will this address your problem? Because Berkeley DB is completely SQLite compatible, but implements a different, more concurrent lock manager. This means that in Berkeley DB you can have multiple update threads accessing the database at the same time. There are a couple of interesting white papers on the subject, written by Mike Owens (the author of "The Definitive Guide to SQLite"): Technical & Performance Evaluation and Benefits and Differences . Disclaimer: I'm the Product Manager for Berkeley DB, so I'm slightly biased. However, you will find that the Berkeley DB SQL API addresses exactly the issue that you bring up -- how to allow concurrent read/write operations in SQLite.
