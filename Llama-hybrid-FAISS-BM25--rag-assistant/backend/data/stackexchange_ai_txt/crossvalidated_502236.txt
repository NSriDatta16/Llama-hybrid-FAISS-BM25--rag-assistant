[site]: crossvalidated
[post_id]: 502236
[parent_id]: 502197
[tags]: 
You can use optuna for this: https://optuna.org Its a bayesian optimization framework generally used to optimize model parameters. But actually you can use Bayesian Opt. to optimize any function. Below code should fix your problem. Note that I am assuming you are trying to minimize mean squared error here. import optuna import numpy as np def objective(trial): w_1 = trial.suggest_uniform('w_1', -1, 1) w_2 = trial.suggest_uniform('w_2', -1, 1) w_3 = trial.suggest_uniform('w_3', -1, 1) w_4 = trial.suggest_uniform('w_4', -1, 1) convex_comb = w_1*pred_0+w_2*pred_1+w_3*pred_2+w_4*pred_3 if convex_comb==1: return np.mean((y_true - convex_comb)**2) return float('inf') study = optuna.create_study() study.optimize(objective, n_trials=2000, n_jobs=-1) Alternatively: import optuna import numpy as np def objective(trial): w_1 = trial.suggest_uniform('w_1', -1, 1) w_2 = trial.suggest_uniform('w_2', -1, 1) w_3 = trial.suggest_uniform('w_3', -1, 1) w_4 = 1-(w_1+w_2+w_3) convex_comb = w_1*pred_0+w_2*pred_1+w_3*pred_2+w_4*pred_3 if convex_comb==1: return np.mean((y_true - convex_comb)**2) return float('inf') study = optuna.create_study() study.optimize(objective, n_trials=2000, n_jobs=-1) Later one should be faster.
