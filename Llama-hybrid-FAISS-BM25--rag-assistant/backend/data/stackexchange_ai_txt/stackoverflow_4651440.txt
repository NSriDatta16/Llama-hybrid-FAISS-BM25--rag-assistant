[site]: stackoverflow
[post_id]: 4651440
[parent_id]: 4651299
[tags]: 
What I would do is have the results be an array of KeyValuePair objects that you would then serialize to JSON. So you create the javascript object type like so: function KeyValuePair(key, value){ this.Key = key; this.Value = value; } Then you would build up an array of KeyValuePairs like so: //This array is declared in the global scope var ValueArray = new Array(); function someFunction(){ //this assumes that the key and value variables are created earlier in the function var valueToStore = new KeyValuePair(key, value); ValueArray[ValueArray.length] = valueToStore; } So at the point when you are done with all your checks you would use the json2 serializer to serialize the array to json for storage in your hidden field. var jsonToSaveToHiddenField = JSON.stringify(ValueArray); //Logic to store resulting json and trigger the serverside evaluation here On the server side you would use JavascriptSerializer to deserialize your json to an array of KeyValuePairs. Here is the msdn doc on that: JavaScriptSerializer Class Reference So with this approach you only need one hidden field. So you don't need to dynamically create it which should simplify the server side retrieval quite a bit. The above should work with minimal changes however I haven't run this through a compiler so there might be some minor syntax errors preset.
