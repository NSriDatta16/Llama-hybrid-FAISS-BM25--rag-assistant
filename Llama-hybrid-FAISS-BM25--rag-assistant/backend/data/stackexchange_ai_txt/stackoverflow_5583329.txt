[site]: stackoverflow
[post_id]: 5583329
[parent_id]: 5583131
[tags]: 
You might want to use "preventDefault()" on a "click" handler for a "submit" button, but not return false. Why? Because you may have a "local" handler for the button that makes some decision about whether to proceed with form submission. However, there may be other handlers set up with ".delegate()" or ".live()", that do other interesting things based on button clicks, so I would want to allow the event to bubble up to those. edit â€” it's very important to note that the convention of having a false return value stop both propagation (bubbling) and default behavior is a jQuery thing, and not native. edit more By way of illustration, consider the following HTML: Now if I wanted to have some sort of fancy animation happen on any button click on the page, I might have some code that wires that up via ".delegate()": // provide entertaining animation upon button clicks $('body').delegate('input:submit, input:button, button', 'click', function() { $(this).performExcitingAnimation(); }); For that submit button in the form, I may want to do form validation to decide whether the form can really be submitted: $('#mainSubmit').click(function(e) { if ($(this).closest('form').valid()) return true; $('#errorBox').text("Uh oh something is wrong"); e.preventDefault(); // ... instead of return false }); If that handler had used return false; instead of calling the "preventDefault()" method, then the event would not bubble up to the delegated handler and the user would be sadly deprived of some exciting button animation.
