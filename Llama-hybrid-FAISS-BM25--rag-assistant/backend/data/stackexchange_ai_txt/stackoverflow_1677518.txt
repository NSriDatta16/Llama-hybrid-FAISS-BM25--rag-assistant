[site]: stackoverflow
[post_id]: 1677518
[parent_id]: 1677325
[tags]: 
Avoid if possible JavaScriptResult is considered an anti-pattern that Asp.net MVC introduced (complete separation of concerns), because it couples Controller and View back together to make them dependable on eachother. In a pure Asp.net MVC application where the UI is build on Asp.net MVC and server side serves this client implementation only it is thus advised to avoid this functionality. It may be useful in other scenarios. I can remember I've been reading something related to Ruby on Rails clients. Anyway. An example that does make sense An actual example would be to return javascript code to an Ajax request that would simply provide some functionality that will get executed immediately upon response without any data manipulation. Where could you possibly benefit from it? Well think of an application that has huge amounts of various client classes used thoughout the application. But certain pages use only a small fraction (or even a dynamic fracion) of them. In this case you would have two possibilities: Load the whole client class tree upfront - either in a huge single file or fragmented in separate files (this would be ok if views would use a small sub set of up-front known classes, because otherwise this would result in lots of server requests) Load classes on demand when they are needed - or maybe even execute certain class functions on demand when and if they are needed. In this particular case, the second scenario would be much better and much more efficient in terms of network traffic, client memory resources and processor load.
