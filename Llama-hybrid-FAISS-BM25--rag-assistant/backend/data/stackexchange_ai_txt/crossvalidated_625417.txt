[site]: crossvalidated
[post_id]: 625417
[parent_id]: 
[tags]: 
Can I fit a Poisson distribution to a continuous variable to apply event detection algorithm?

Preprocessing: I have a time series of number of tweets per 10 minutes time interval that are all taken from a given discussion on a specific topic in a specific region. I preprocessed the data by applying log(x+c) transformation and decomposed the series into trend, season and residuals as I want to get rid of the trend and season. Goal: I now want to detect peaks or events in the remaining residuals - to apply a reasonable criterion I want the peaks to be significantly different from my background noise. I assume that the noise in the decomposed dataset is generally poisson distributed when there is no major (external) events that lead to correlation of the tweeting behaviour of the distinct users. Checking the autocorrelation of my time series supports this assumption. Approach: So I now want to make a statistical test on a sliding window in my residuals time series to check if the values in the given sliding window differ significantly from the noise (testing with chi-squared-test) - if yes I assign this subsequence to be an event [similar to this approach with red and white noise] . To get a representative distribution of the noise in my time series I want to do the following: Transform Residual signal into frequency domain and cut the remaining most important frequencies (i.e. only the noise is left) From the resulting signal, calculate the mean and fit a Poisson distribution to the data. Apply this distribution as the noise in the event detection algorithm described above. Problem/ Question : After the preprocessing of my data the time series does not hold discrete count values anymore but continuous values. How can I fit a Poisson distribution to these continuous data (if possible I would be very thankful for an example in Python). Is it valid to fit an exponential distribution to the data as an alternative for the Poisson distribution. For example by numpy function: np.random.exponential(freq, length) . How would you evaluate in general the described approach? Thanks a lot for your help!
