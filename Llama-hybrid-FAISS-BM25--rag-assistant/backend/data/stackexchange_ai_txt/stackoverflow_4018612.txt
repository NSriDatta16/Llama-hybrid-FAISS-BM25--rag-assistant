[site]: stackoverflow
[post_id]: 4018612
[parent_id]: 4018568
[tags]: 
You're talking about Big-O notation. This notation is a way of describing the worst possible running time of an algorithm as a function of its input size. O(n^2) means that if the input has a size of n (such as a list with n elements in it), the algorithm will require n^2 passes through to execute in the worst-case scenarion (Big-O is worst case; there are other notations for best-case and average case). This could happen if you have a a for loop nested inside another, and both run from 1 to n . O(nlogn) is similar. It usually happens when you are traversing a tree structure (such as a binary tree). Note that you will probably never see something like O(3n) because for very large values of n, the constant 3 doesn't matter much, so it would be simplified to O(n). Many of the others have already posted good links to read at.
