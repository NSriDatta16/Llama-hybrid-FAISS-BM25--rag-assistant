[site]: stackoverflow
[post_id]: 5231781
[parent_id]: 
[tags]: 
Efficient / elegant two dimensional container

Need for two dimensional array of objects that could be something like: myContainer *a = new myArray ( 20, 20 ); // passing int's as width & height later accessing values would be done with methods such as: mylist getRow( int ); mylist getColumn( int ); mylist getDiagonalRow( int ); implementations of those could be something like: myList myContainer::getRow( int a ){ if( a =this->height ) return; myList hlp; for( int i=0; i width; i++) hlp.append( this->arr[a][i] ); return hlp; // returns a copy. Could also be a pointer if created with new. } Other methods could follow similar lines, ie. creating a list object and filling it with what was requested. My questions: Can anyone think of elegant way to create a container class I'm describing here. Which could for example avoid creating and filling of list-objects but still maintaining the abstraction and/or usability. Or please advice if I have missed something in STL etc. that has something like this.
