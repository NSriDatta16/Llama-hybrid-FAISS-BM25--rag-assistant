[site]: stackoverflow
[post_id]: 2417987
[parent_id]: 2417652
[tags]: 
Depending on your UseCase, this might be an alternative to the given solutions as well: class A extends ArrayObject {} This way, all properties in the array will be accessible by object notation and array notation, e.g. $a = new A( array('foo' => 'bar'), 2 ); // the 2 enables object notation echo $a->foo; echo $a['foo']; As you can see by the class declaration, ArrayObject implements a number of interfaces that allow you to use the class like an Array: Class [ class ArrayObject implements IteratorAggregate, Traversable, ArrayAccess, Countable ] It also adds a number of methods to complete array access capabilities. Like said in the beginning, this might not be desirable in your UseCase, e.g. when you don't want the class to behave like an array.
