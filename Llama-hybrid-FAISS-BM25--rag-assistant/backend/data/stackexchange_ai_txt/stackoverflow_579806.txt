[site]: stackoverflow
[post_id]: 579806
[parent_id]: 
[tags]: 
Simulation design - flow of data, coupling

I am writing a simulation and need some hint on the design. The basic idea is that data for the given stochastic processes is being generated and later on consumed for various calculations. For example for 1 iteration: Process 1 -> generates data for source 1: x1 Process 2 -> generates data for source 1: x2 and so on Later I want to apply some transformations for example on the output of source 2, which results in x2a, x2b, x2c. So in the end up with the following vector: [x1, x2a, x2b, x2c]. I have a problem, as for N-multivariate stochastic processes (representing for example multiple correlated phenomenons) I have to generate N dimensional sample at once: Process 1 -> generates data for source 1...N: x1...xN I am thinking about the simple architecture that would allow to structuralize the simulation code and provide flexibility without hindering the performance. I was thinking of something along these lines (pseudocode): class random_process { // concrete processes would generate and store last data virtual data_ptr operator()() const = 0; }; class source_proxy { container_type processes; container_type data; // pointers to the process data storage data operator[](size_type number) const { return *(data[number]);} void next() const {/* update the processes */} }; Somehow I am not convinced about this design. For example, if I'd like to work with vectors of samples instead of single iteration, then above design should be changed (I could for example have the processes to fill the submatrices of the proxy-matrix passed to them with data, but again not sure if this is a good idea - if yes then it would also fit nicely the single iteration case). Any comments, suggestions and criticism are welcome. EDIT: Short summary of the text above to summarize the key points and clarify the situation: random_processes contain the logic to generate some data. For example it can draw samples from multivariate random gaussian with the given means and correlation matrix. I can use for example Cholesky decomposition - and as a result I'll be getting a set of samples [x1 x2 ... xN] I can have multiple random_processes, with different dimensionality and parameters I want to do some transformations on individual elements generated by random_processes Here is the dataflow diagram random_processes output x1 --------------------------> x1 ----> x2a p1 x2 ------------transform|----> x2b ----> x2c x3 --------------------------> x3 p2 y1 ------------transform|----> y1a ----> y1b The output is being used to do some calculations.
