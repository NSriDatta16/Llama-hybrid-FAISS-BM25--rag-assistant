[site]: stackoverflow
[post_id]: 3937935
[parent_id]: 3937897
[tags]: 
With the enum keyword you are actually defining a type, not defining storage like a data member. It's like defining an inner class, like this: class X { private: class InnerClass { ... }; }; The InnerClass definition is just a definition. It just defines the type within the context of the outer class X, so InnerClass can only be referred to as X::InnerClass. But it definitely doesn't take any space in the instances of class X. Regarding the remark on enums: The enum values are actually integers, and these integers are used in the code where needed. Normally there is no central storage of all the enum values. The enum just defines a mapping between a token and a numerical value and everywhere the token is used in your code, the compiler replaces it with the numerical value.
