[site]: stackoverflow
[post_id]: 4251074
[parent_id]: 4241729
[tags]: 
F#, in many regards, may be better than most "other classical functional programming language[s]". Since you already know .NET, you'll be able to fully leverage all your .NET knowledge while picking up two useful things from F#: The functional programming paradigm. That is, how to program in the style of FP. You can use that in any language. I often learn towards FP in my C# code, because I find it to be a much more maintainable and reusable way to write software. One language's functional programming syntax. F# is very similar to OCAML, and the ML family makes up one of the 3 or so major dialects of FP languages. The other two biggies are the Miranda family (of which Haskell is the major modern representative) and the LISP family (where Common Lisp and Scheme are the two big reps). In F#, it might help you to make the distinction very clearly between F# types and .NET types. Records, Tuples, and Discriminated Unions are (pretty much) purely F# things, and they're used in almost all functional languages. Use these a lot if you want to learn FP. Classes, structs, and interfaces are also in there, but those are .NET concepts. Use them as needed, but try to avoid them in general, lest you end up writing "C# with a goofy syntax" instead of idiomatic F#. The things you'll really miss out on from Haskell are true purity (eh, not that big of a deal), lazy evaluation by default (a big change), and type classes. You can do lazy eval in F#, but you have to use the explicit Lazy<> classes to get it. Having lazy eval everywhere is one of the really unique and powerful things in Haskell, but it's not a strict FP concept. Type Classes are very powerful, but you can get by without them for most real world situations. They're just a higher level of abstraction that cuts down on some boiler plate and repetition. True purity is usually more academic. It has certain advantages, but if you're already used to .NET and impure techniques, you'll mostly just find it a pain to work around until you've fully bought into the FP mindset.
