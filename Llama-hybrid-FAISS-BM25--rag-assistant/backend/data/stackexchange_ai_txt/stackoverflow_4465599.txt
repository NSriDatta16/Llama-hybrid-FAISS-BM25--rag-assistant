[site]: stackoverflow
[post_id]: 4465599
[parent_id]: 4451689
[tags]: 
The original question is tagged .net, so I'll submit a pragmatic approach for the context where you'd like to bind your entities directly to a view. I know that that's bad practice, and that you should probably have a view model (as in MVVM) or the like, but for some small apps it just makes sense to not over-patternize IMHO. Using properties is the way out-of-the box data binding works in .net. Maybe the context stipulates that the data binding should work both ways, and hence implementing INotifyPropertyChanged and raising PropertyChanged as a part of the setter logic makes sense. The entity could e.g. add an item to a broken rule collection or the like (I know CSLA had that concept a few years back and maybe still does) when the client sets an invalid value, and that collection could be shown in the UI. The unit of work would later refuse to persist invalid objects, if it should come that far. I'm trying to justify decoupling, immutability, and so forth to a large extent. I'm just saying that in some contexts a simpler architecture is called for.
