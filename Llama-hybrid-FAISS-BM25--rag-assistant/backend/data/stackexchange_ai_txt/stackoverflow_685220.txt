[site]: stackoverflow
[post_id]: 685220
[parent_id]: 685102
[tags]: 
I found the solution after hacking my way through. I found out that you can use the "execute" function inside of a migration. This is infinitely useful and allowed me to put together an non-elegant solution to this problem. If anyone has a more elegant, more Rails-like solution, please let me know. Here's the solution in the form of a migration: class Make false t.column :game_id, :integer, :null => false end execute "ALTER TABLE cards_games DROP COLUMN id" execute "ALTER TABLE cards_games ADD PRIMARY KEY (card_id, game_id)" drop_table :cards_players create_table :cards_players do |t| t.column :card_id, :integer, :null => false t.column :player_id, :integer, :null => false end execute "ALTER TABLE cards_players DROP COLUMN id" execute "ALTER TABLE cards_players ADD PRIMARY KEY (card_id, player_id)" drop_table :cards_rules create_table :cards_rules do |t| t.column :card_id, :integer, :null => false t.column :rule_id, :integer, :null => false end execute "ALTER TABLE cards_rules DROP COLUMN id" execute "ALTER TABLE cards_rules ADD PRIMARY KEY (card_id, rule_id)" end def self.down drop_table :cards_games create_table :cards_games do |t| t.column :card_id, :integer t.column :game_id, :integer end drop_table :cards_players create_table :cards_players do |t| t.column :card_id, :integer t.column :player_id, :integer end drop_table :cards_rules create_table :cards_rules do |t| t.column :card_id, :integer t.column :rule_id, :integer end end end
