[site]: stackoverflow
[post_id]: 4118737
[parent_id]: 4114695
[tags]: 
The best way that I've found for one process to check and see if another is alive and running is to use a lock file, as was suggested in comments with the addition of signals. This is useful when program B should not bother starting if program A is not already started, alive and responsive, or when program A is not responsible for starting program B but should do something different if program B doesn't start in a set amount of time. That's actually a very common scenario. Try this: Program A starts, writes its PID to /var/run/a.pid Program B starts, writes its PID to /var/run/b.pid Program B reads /var/run/a.pid and sends it a SIGUSR1 Program A's signal handler for SIGUSR1 reads /var/run/b.pid and sends it a SIGUSR1 as an ACK Program B knows program A is running and can continue Program A knows program B has started, and can alter its behaviour That is extremely simplified and basic IPC, but works. A much more elegant approach would be a shared memory segment between the processes via mmap() but even then you should not trust a lock as as sign that the other process is actually responsive, especially without dealing with starvation in the second process. The reverse situation also holds true. This is also a very POSIX centric answer, if it doesn't apply, please describe your platform in more detail.
