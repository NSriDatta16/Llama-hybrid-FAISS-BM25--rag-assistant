[site]: stackoverflow
[post_id]: 1430666
[parent_id]: 1430475
[tags]: 
Lua 130 char function, 147 char functioning program Lua doesn't get enough love in code golf -- maybe because it's hard to write a short program when you have long keywords like function / end , if / then / end , etc. First I write the function in a verbose manner with explanations, then I rewrite it as a compressed, standalone function, then I call that function on the single argument specified at the command line. I had to format the code with tags because Markdown does a horrible job of formatting Lua. Technically you could get a smaller running program by inlining the function, but it's more modular this way :) t = "The quick brown fox jumps over the lazy dog. Supercalifragilisticexpialidocious!" T = t:gsub("%S+", -- for each word in t... function(w) -- argument: current word in t W = "" -- initialize new Word for i = 1,#w do -- iterate over each character in word c = w:sub(i,i) -- extract current character -- determine whether letter goes on right or left end W = (#w % 2 ~= i % 2) and W .. c or c .. W end return W -- swap word in t with inverted Word end) -- code-golf unit test assert(T == "eTh kiquc nobrw xfo smjup rvoe eth yalz .odg !uioiapeislgriarpSueclfaiitcxildcos") -- need to assign to a variable and return it, -- because gsub returns a pair and we only want the first element f=function(s)c=s:gsub("%S+",function(w)W=""for i=1,#w do c=w:sub(i,i)W=(#w%2~=i%2)and W ..c or c ..W end return W end)return c end -- 1 2 3 4 5 6 7 8 9 10 11 12 13 --34567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 -- 130 chars, compressed and written as a proper function print(f(arg[1])) --34567890123456 -- 16 (+1 whitespace needed) chars to make it a functioning Lua program, -- operating on command line argument Output: $ lua insideout.lua 'The quick brown fox jumps over the lazy dog. Supercalifragilisticexpialidocious!' eTh kiquc nobrw xfo smjup rvoe eth yalz .odg !uioiapeislgriarpSueclfaiitcxildcos I'm still pretty new at Lua so I'd like to see a shorter solution if there is one. For a minimal cipher on all args to stdin, we can do 111 chars: for _,w in ipairs(arg)do W=""for i=1,#w do c=w:sub(i,i)W=(#w%2~=i%2)and W ..c or c ..W end io.write(W ..' ')end But this approach does output a trailing space like some of the other solutions.
