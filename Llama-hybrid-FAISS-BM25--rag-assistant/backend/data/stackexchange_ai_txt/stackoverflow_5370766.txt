[site]: stackoverflow
[post_id]: 5370766
[parent_id]: 5365385
[tags]: 
First of all, it is a matter of design. If your table view always loads a specific number of cells with static content, like in a "Settings" view, create a custom cell for every row you want and connect each one with an outlet. If this is not the case, then you have two options: Create a class that inherits the UITableViewCell and every view you want in it programmatically, forgetting Interface Builder. Add a new iPhone View with Controller , replace the view in there and treat it like you did. Except for the fact that you will have to connect your cell with an outlet in the File's Owner. So when you instantiate that controller, all your cell's subviews will be ok. It is not an overkill, or at least, Apple recommends it: click and go to the "Loading Custom Table-View Cells From Nib Files" paragraph PS: Just had a similar situation and this is the way I've done it. In MonoTouch, for this example, you do not have to LoadNib anything. Just do this inside the GetCell override in your table's source: using (CellController controller = new CellController()) { cell = (CustomCell)controller.View; } Maybe even declare an extra outlet inside the CellController object to avoid casting from UIView.
