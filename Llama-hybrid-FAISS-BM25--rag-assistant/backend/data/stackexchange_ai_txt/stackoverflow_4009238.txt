[site]: stackoverflow
[post_id]: 4009238
[parent_id]: 4009089
[tags]: 
Rather than thinking of what can be supported in Azure, it might be more helpful to think about its challenges as you decide to port your app over: Web applications. Since a Web Role hosts IIS, you'll generally have little issue porting a general-purpose asp.net or asp.net mvc website to Azure. There are some glitches you'll run into - see my related answer for more details. UI. If your app has specific output similar to a WinForms app, you won't be able to run it since you have no video output. GPU dependencies. If you're doing some background processing dependenton a specific GPU, you won't be able to run in an Azure VM. Registry and other system-level access. If your app needs to update the registry or run an MSI, you won't be able to install your app. Instance affinity. If your app requires session stickiness (e.g. a logged-in user MUST visit the same server instance with each access), you won't be able to accomplish this. COM interop. COM interop is very limited, since you can't install anything via the registry. If you rely on Excel Services, you won't have that capability. SQL limitations. SQL Azure is limited to 50GB today, and offers no ability to custom-tune the server instance. Also, while it does support a big subset of SQL Server, it doesn't support 100% of SQL Server, so it's possible some of your sprocs may no longer work. There's no SQL Agent today, so you'd need to recreate that functionality in a worker process. That's just a quick braindump of some challenges you might run into - I'm sure there are others. Just keep in mind that Azure is providing Windows 2008 Server images for your app to run on, so if your app can run in that environment today, and doesn't require things I listed, you should be in pretty good shape.
