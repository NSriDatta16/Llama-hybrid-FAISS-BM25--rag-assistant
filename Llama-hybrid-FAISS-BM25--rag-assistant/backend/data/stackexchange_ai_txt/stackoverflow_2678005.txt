[site]: stackoverflow
[post_id]: 2678005
[parent_id]: 2535687
[tags]: 
Create a new Id2EntityConverter public class Id2EntityConverter : ITypeConverter where TEntity : EntityBase { public Id2EntityConverter() { Repository = ObjectFactory.GetInstance >(); } private IRepository Repository { get; set; } public TEntity ConvertToEntity(int id) { var toReturn = Repository.Get(id); return toReturn; } #region Implementation of ITypeConverter public TEntity Convert(ResolutionContext context) { return ConvertToEntity((int)context.SourceValue); } #endregion } Configure AM to auto create maps for each type public class AutoMapperGlobalConfiguration : IGlobalConfiguration { private AutoMapper.IConfiguration _configuration; public AutoMapperGlobalConfiguration(IConfiguration configuration) { _configuration = configuration; } public void Configure() { //add all defined profiles var query = this.GetType().Assembly.GetExportedTypes() .Where(x => x.CanBeCastTo(typeof(AutoMapper.Profile))); _configuration.RecognizePostfixes("Id"); foreach (Type type in query) { _configuration.AddProfile(ObjectFactory.GetInstance(type).As ()); } //create maps for all Id2Entity converters MapAllEntities(_configuration); Mapper.AssertConfigurationIsValid(); } private static void MapAllEntities(IProfileExpression configuration) { //get all types from the my assembly and create maps that //convert int -> instance of the type using Id2EntityConverter var openType = typeof(Id2EntityConverter<>); var idType = typeof(int); var persistentEntties = typeof(MYTYPE_FROM_MY_ASSEMBLY).Assembly.GetTypes() .Where(t => typeof(EntityBase).IsAssignableFrom(t)) .Select(t => new { EntityType = t, ConverterType = openType.MakeGenericType(t) }); foreach (var e in persistentEntties) { var map = configuration.CreateMap(idType, e.EntityType); map.ConvertUsing(e.ConverterType); } } } Pay attention to MapAllEntities method. That one will scan all types and create maps on the fly from integer to any type that is of EntityBase (which in our case is any persistent type). RecognizePostfix("Id") in your case might be replace with RecognizePrefix("Id")
