[site]: stackoverflow
[post_id]: 175956
[parent_id]: 622
[tags]: 
@Matt: log(log(10000)) is ~2 From the wikipedia article (which you cited) Sieve of Atkin : This sieve computes primes up to N using O(N/log log N) operations with only N 1/2+o(1) bits of memory. That is a little better than the sieve of Eratosthenes which uses O(N) operations and O(N 1/2 (log log N)/log N) bits of memory (A.O.L. Atkin, D.J. Bernstein, 2004) . These asymptotic computational complexities include simple optimizations, such as wheel factorization, and splitting the computation to smaller blocks. Given asymptotic computational complexities along O(N) (for Eratosthenes) and O(N/log(log(N))) (for Atkin) we can't say (for small N=10_000 ) which algorithm if implemented will be faster. Achim Flammenkamp wrote in The Sieve of Eratosthenes : cited by: @num1 For intervals larger about 10^9, surely for those > 10^10, the Sieve of Eratosthenes is outperformed by the Sieve of Atkins and Bernstein which uses irreducible binary quadratic forms. See their paper for background informations as well as paragraph 5 of W. Galway's Ph.D. thesis. Therefore for 10_000 Sieve of Eratosthenes can be faster then Sieve of Atkin. To answer OP the code is prime_sieve.c (cited by num1 )
