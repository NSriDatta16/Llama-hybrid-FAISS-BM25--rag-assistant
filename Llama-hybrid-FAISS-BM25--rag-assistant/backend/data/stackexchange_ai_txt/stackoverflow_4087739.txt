[site]: stackoverflow
[post_id]: 4087739
[parent_id]: 4085089
[tags]: 
I wouldn't worry too much about specific API details like individual methods of ConcurrentHashMap, unless you're interviewing for a job that is advertised as needing a lot of advanced threading logic. A thorough understanding of the basic Java API's is more important, and books like Effective Java can help there. At least as important though is to know higher level concepts like Object Orientation and Design Patterns. Understanding what Polymorphism, Encapsulation and Inheritance are, and when and how to use them, is vital. Know how to decide between Polymorphism and Delegation ( is-a versus has-a is a decent start, but the Liskov Substitution Principle is a better guide), and why you may want to favor composition over inheritance. I highly recommend "Agile Software Development" by Robert Martin for this subject. Or check out this link for an initial overview. Know some of the core patterns like singleton, factory, facade and observer. Read the GoF book and/or Head First Design Patterns. I also recommend learning about refactoring, unit testing, dependency injection and mocking. All these subject won't just help you during interviews, they will make you a better developer.
