[site]: stackoverflow
[post_id]: 1415214
[parent_id]: 1415013
[tags]: 
This is looks like a case of Test Driven Design in action. An interface with only an 'insert' method is untestable, because it is also unusable. Building a tree, without being able to see, or do anything with, the tree you have built doesn't get you anywhere. Work out how you want clients to access the tree (access methods, visitor interface, or whatever). Then test it through them. If there is internal complexity you can't easily get at through the public interface (i.e. the tree is more like a Java TreeMap than the type of tree you put in a TreeView), you can use: assertions and invariants something like an exposed debugVerifyTree method. brute force: insert 36542 pseudo-random items, use a coverage tool to check that covers all cases. Whichever way, any time you write a test, make sure you ask the question 'will any client of this code care if this test fails?'. If not, delete it.
