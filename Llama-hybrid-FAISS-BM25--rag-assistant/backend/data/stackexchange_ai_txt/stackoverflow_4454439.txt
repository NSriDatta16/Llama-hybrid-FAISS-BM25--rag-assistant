[site]: stackoverflow
[post_id]: 4454439
[parent_id]: 
[tags]: 
What is the advantage to declaring an object of one type as in instance of another?

Possible Duplicate: What does Base b2 = new Child(); signify? I'm a Java beginner. I understand the concepts of class inheritance, but there's one thing I don't quite understand. I'm reading through Java for Dummies, and it's explaining polymorphism. It gives this code as an example: class Player { public void move() {... class BetterPlayer extends Player { public void move() {... public class TicTacToeApp { public static void main(String[] args) { Player p1 = new Player(); Player p2 = new BetterPlayer(); playTheGame(p1, p2); } public static void playTheGame(Player p1, Player p2) { p1.move(); p2.move(); } } Why was p2 created as a Player object? Here's my understanding: If p2 were a BetterPlayer object (declared like this: BetterPlayer p2 = new BetterPlayer...): -upcasting is automatic, so it would still work with the playTheGame method -p2 can be used by any methods requiring a BetterPlayer object But since it was created as a Player object, now any time p2 is used by a method requiring a BetterPlayer object, it must be explicitly cast to a BetterPlayer object, right? That seems like more work with no benefit, so I'm guessing there has to be some benefit to doing it that way; what is it?
