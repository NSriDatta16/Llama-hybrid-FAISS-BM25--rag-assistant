[site]: stackoverflow
[post_id]: 1154488
[parent_id]: 962821
[tags]: 
The approach on how much a test tests is definitely something that you need to decide up front and stick to it. I don't believe that everyone should follow the same approach uniformly, since different teams and/or projects have different priorities towards coding, performance, troubleshooting, test infrastructure, etc. But being consistent will always help: quicker identify problems since you know in advance how deep to dig; spend less time in constructing your tests; employ the same set of test helper classes while implementing tests. run tests quick enough: not too fast and not too slow. organizing tests (suites, packages, etc.) If you decide that performance is more important then implement thicker tests with more validations/asserttions. If you decide that troubleshooting is a paramount then isolate your tests as much as needed. I can't see why thick and well structured tests are flawed. Such tests would get the same job done as greater amount of thinner tests and just as well. Of course, every test still needs to focus on particular function/feature but this is not really topic of this thread.
