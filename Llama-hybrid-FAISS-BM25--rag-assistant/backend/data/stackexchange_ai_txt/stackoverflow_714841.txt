[site]: stackoverflow
[post_id]: 714841
[parent_id]: 714757
[tags]: 
I've been working in tool support for traceability in software engineering on and off for the last fifteen years, and the best that's widely available is DOORS+SysML. They all require manual connection to be made (though you can add IDs to your code and unit tests, and get some coverage metrics back). It's quite easy to make a simple tool which associates a specific test with a requirement ID, and then reports that requirement as tested. Similarly you can add markers to say what parts of your code map to your design elements (though that has mostly been automated by reverse engineering tools). Then you can tell whether you have markers for all your requirements and all your design elements. These are extensions to COTS UML tools, so probably not designed in quite the same spirit as git. What no tool I'm aware of currently gives you is any means to actually determining whether the tests exercise the parts of the design which are supposed to implement the hyperlinked requirement (which is practicable, as you can log the coverage in the code which is linked to the design elements when the test is run). There are other tools, such as CaDiZ and Cog which are theorem proving tools which can take a formal description of your requirements and annotated model of your code and verify that the model matches the specification. This works for sufficiently simple code, but is fairly time consuming (of the order of weeks for a few dozen lines of code) for post-doc level computer scientists. None of the tools I know of integrate with git.
