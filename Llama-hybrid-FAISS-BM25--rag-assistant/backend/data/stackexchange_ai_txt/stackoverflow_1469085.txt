[site]: stackoverflow
[post_id]: 1469085
[parent_id]: 
[tags]: 
Complexity of Exceptions

I am playing around with C++ code in my spare time, working on putting together a library that could be used somewhat generically for building RPG type games. Mostly it is focusing on the underlying data structures and functions. I am still a long ways off from working with graphics. My question is this: How complicated should exceptions be. I have a basic exception that looks like this: Header: #include class Exception { protected: std::string messageM; public: Exception() throw(); Exception(std::string message) throw(); Exception(std::string file, int line) throw(); Exceptoin(Exception & exception) throw(); virtual ~Exception(); virtual std::string getMessage(void) throw(); virtual void setMessage(std::string message) throw(); }; The constructors are mostly just a bunch of "messageM = message" and that sort of thing. Exception(std::string, int) uses stringstream to convert the number to a string. Is this too complex? I want the average exception call to be something along the lines of: Exception exception("Message Here"); throw exception; or Exceptoin exception(__FILE__, __LINE__); throw exception; Also, on a related note, does C++ allow you to create the exception and throw it at the same time. Things along the lines of throw(Exception exception("My Message")); seem to give me errors. ^_^ Thanks.
