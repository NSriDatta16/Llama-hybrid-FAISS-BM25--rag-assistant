[site]: stackoverflow
[post_id]: 5242816
[parent_id]: 5242465
[tags]: 
Merhaba Onur Another idea would be to use some preprocessor symbols to switch class A code between normal and unit-testing mode. For example: File A.hpp #ifndef UNIT_TESTING # include "B.hpp" // contains "normal" class B #else # include "Testable_B.hpp" // contains "fake" class B, dedicated for unit testing. #endif UNIT_TESTING would be a preprocessor symbol which you would enable only when building the unit test. In case if file Testable_B.hpp contains class with another name than "B" (for example, Testable_B) you would also need to add these directives in the definition of class A. The drawback is that if more such modifications were needed, this would make a mess in class definition. Yet another way would be to use typedef: #ifndef UNIT_TESTING # include "B.hpp" // contains "normal" class B #else # include "Testable_B.hpp" // contains "fake" class B, dedicated for unit testing. typedef Testable_B B; #endif I know it is not very elegant solution, but maybe you will find it useful if you don't want to modify class A code. In case you absolutely don't want to make any changes to the source code, then probably stefaanv's solution is the way to go.
