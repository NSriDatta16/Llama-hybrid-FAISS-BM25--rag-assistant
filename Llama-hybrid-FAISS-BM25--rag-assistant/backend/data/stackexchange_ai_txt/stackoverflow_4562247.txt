[site]: stackoverflow
[post_id]: 4562247
[parent_id]: 4556151
[tags]: 
Ok, I tested all ways (jay RegEx way, not LINQ one) also I got exception by Dan taos way when I set a maintainWords to true for all position so I skip it. This is what I'd done: List smallStrings = new List (); List mediomStrings = new List (); List largeStrings = new List (); for (int i = 0; i x.saeed)); Console.WriteLine("average small for Jay: {0}", smallStrings.Average(x => x.Jay)); Console.WriteLine("average small for Simmon: {0}", smallStrings.Average(x => x.Simmon)); Console.WriteLine("/////////////////////////"); Console.WriteLine("average mediom for saeed: {0}", mediomStrings.Average(x => x.saeed)); Console.WriteLine("average mediom for Jay: {0}", mediomStrings.Average(x => x.Jay)); Console.WriteLine("average mediom for Simmon: {0}", mediomStrings.Average(x => x.Simmon)); Console.WriteLine("/////////////////////////"); Console.WriteLine("average large for saeed: {0}", largeStrings.Average(x => x.saeed)); Console.WriteLine("average large for Jay: {0}", largeStrings.Average(x => x.Jay)); Console.WriteLine("average large for Simmon: {0}", largeStrings.Average(x => x.Simmon)); And: private static DifferentTypes Approachs(string stringToDecompose, string text2Write) { DifferentTypes differentTypes; Stopwatch sw = new Stopwatch(); sw.Start(); for (int i = 0; i The results: average small for saeed: 4.6 average small for Jay: 33.9 average small for Simmon: 5.6 average mediom for saeed: 28.7 average mediom for Jay: 173.9 average mediom for Simmon: 38.7 average large for saeed: 115.3 average large for Jay: 594.2 average large for Simmon: 138.7 Test it simply in your PCs and feel free to edit this to leave your test result or improve current function. I'm sure if we test it with larger strings we can see very difference between my approach and yours. Edit: I edited my approach to use foreach and yield, see my code above. the result is: average small for saeed: 6.5 average small for Jay: 34.5 average small for Simmon: 5.9 average mediom for saeed: 30.6 average mediom for Jay: 157.9 average mediom for Simmon: 35 average large for saeed: 122.4 average large for Jay: 584 average large for Simmon: 157 Here is my (Jay's) test: class Program { static void Main() { var s = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit, " + "sed diam nonummy nibh euismod tincidunt ut laoreet dolore " + "magna aliquam erat volutpat. Ut wisi enim ad minim veniam, " + "quis nostrud exerci tation ullamcorper suscipit lobortis nisl " + "ut aliquip ex ea commodo consequat. Duis autem " + "vel eum iriure dolor in hendrerit in vulputate velit " + "esse molestie consequat, vel illum dolore eu feugiat " + "nulla facilisis at vero eros et accumsan et iusto " + "odio dignissim qui blandit praesent luptatum zzril delenit augue " + "duis dolore te feugait nulla facilisi. Nam liber tempor " + "cum soluta nobis eleifend option congue nihil imperdiet doming id " + "quod mazim placerat facer possim assum. Typi non habent " + "claritatem insitam; est usus legentis in iis qui facit " + "eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod " + "ii legunt saepius. Claritas est etiam processus dynamicus, " + "qui sequitur mutationem consuetudium lectorum. Mirum est notare quam " + "littera gothica, quam nunc putamus parum claram, anteposuerit " + "litterarum formas humanitatis per seacula quarta decima et quinta decima" + ". Eodem modo typi, qui nunc nobis videntur parum clari" + ", fiant sollemnes in futurum."; s += s; s += s; s += s; var watch = new Stopwatch(); watch.Start(); for (int i = 1; i Results: 4 lorem ipsums (as shown): Jay: 317 Saeed: 1069 Simon: 599 3 lorems ipsums: Jay: 283 Saeed: 862 Simon: 465 2 lorem ipsums: Jay: 189 Saeed: 417 Simon: 236 1 lorem ipsum: Jay: 113 Saeed: 204 Simon: 118
