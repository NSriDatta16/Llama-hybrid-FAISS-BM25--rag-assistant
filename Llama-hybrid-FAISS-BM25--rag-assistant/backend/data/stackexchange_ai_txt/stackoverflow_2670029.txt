[site]: stackoverflow
[post_id]: 2670029
[parent_id]: 2669978
[tags]: 
I usually have a Factory class that’s responsible for wiring all the objects together. The Factory is created by the application delegate in the applicationDidFinishLaunching: - (void) applicationDidFinishLaunching: (UIApplication*) app { // Creates all the objects that are needed to wire // the application controllers. Can take long. We are // currently displaying the splash screen, so that we // can afford to block for a moment. factory = [[Factory alloc] init]; // Now that we have the building blocks, we can wire // the home screen and start the application. home = [[factory wireHomeScreen] retain]; [window addSubview:home.view]; [window makeKeyAndVisible]; } Now if the Factory creation takes long, I simply wait under the splash screen or put up another view that displays spinner until everything is ready. I guess you could use this very scheme if you can perform the initialization synchronously: @implementation Factory - (id) init { [super init]; // Takes long, performs the network I/O. someDataSource = [[DataSource alloc] init…]; return self; } - (id) wireHomeScreen { // Data source already loaded or failed to load. HomeScreen *home = [[HomeScreen alloc] init…]; [home setDataSource:someDataSource]; return [home autorelease]; } @end With a bit of luck there’s just a single long operation in your startup routine, so that you won’t lose anything by serializing the init. If you want to perform the data source init in background, you can display some introductory screen that will cue the home screen once the data has been loaded: - (void) applicationDidFinishLaunching: (UIApplication*) app { // Create the basic building blocks to wire controllers. // Will not load the data from network, not yet. factory = [[Factory alloc] init]; // Display something while the data are being loaded. IntroScreen *intro = [[IntroScreen alloc] init]; // Main screen, will get displayed once the data are loaded. home = [[factory wireHomeScreen] retain]; // The intro screen has to know what do display next. [intro setNextScreen:home]; // Start loading data and then notify the intro screen // that we are done loading and the show can begin. [factory.someDataSource startLoadingAndNotify:intro]; [window addSubview:intro.view]; [window makeKeyAndVisible]; } Now when the data source has finished loading the data, it will tell the intro screen to cue the real content (home screen, in this case). This is just a rough sketch (for example the memory management might be different in the real case), but in principle it should work fine.
