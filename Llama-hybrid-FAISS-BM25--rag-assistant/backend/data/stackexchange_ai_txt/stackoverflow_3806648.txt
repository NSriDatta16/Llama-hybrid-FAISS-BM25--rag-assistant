[site]: stackoverflow
[post_id]: 3806648
[parent_id]: 3806614
[tags]: 
I don't believe there is a class in the framework that does this, directly. Also, considering the elegant answer to this question, would it be worthwhile for me to create a class to represent this invertible dictionary, when I could just as easily use LINQ to convert any dictionary to its value-key equivalent? The answer to both of your questions really depends on how you are going to be accessing your data. If you need fast, constant time access based on key and value, you are most likely going to want to make your own collection. This could be done very, very easily, though. Just wrap two Dictionary instances inside your class, and when you add in a new element, add to both - one with key/value and one with value/key. Your lookup routines can just pull from the appropriate collection, and it will remain near O(1) for access time. If, however, memory is more of a concern, you could just use a single collection, and use LINQ to parse it. This is going to make your "reverse" lookup quite a bit slower, as you'll need to re-parse each time.
