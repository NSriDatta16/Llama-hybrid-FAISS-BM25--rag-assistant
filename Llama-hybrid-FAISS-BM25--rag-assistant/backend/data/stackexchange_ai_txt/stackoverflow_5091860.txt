[site]: stackoverflow
[post_id]: 5091860
[parent_id]: 5091804
[tags]: 
As usual, it depends. If you're writing a public API, this approach is extremely powerful. An example of this is the Progistics / Connectship API. At the time that I used it, there was a single concrete class. The rest of the public interface was all interfaces. They were able to rip out the entire implementation of the product and rewrite it, leaving the interfaces untouched. Of course, there is a cost associated with this. You have to put a lot of up front time and effort into making an elegant API if you're going to want to cast it in stone (of course, this is the case whether you choose to use interfaces or not). On the other hand, if you're writing the data access layer for an internal business application, you might not reap as many rewards.
