[site]: stackoverflow
[post_id]: 5237053
[parent_id]: 
[tags]: 
MVC; Arbitrary routing path levels and parameters

I'm working on an ( oh no, not another ) MVC framework in PHP, primarily for education, but also fun and profit. Anyways, I'm having some trouble with my Router , specifically routing to the correct paths, with the correct parameters. Right now, I'm looking at a router that (using __autoload() ) allows for arbitrarily long routing paths: "path/to/controller/action" "also/a/path/to/a/controller/action" Routing starts at the application directory, and the routing path is essentially parallel with the file system path: "/framework/application/path/to/controller.class.php" => "action()" class Path_To_Controller{ public function action(){} } "/framework/application/also/a/path/to/a/controller.class.php" => "action()" class Also_A_Path_To_A_Controller{ public function action(){} } This will allow for module configuration files to be available at varying levels of the application file system. The problem is of course, when we introduce routing path parameters, it becomes difficult differentiating where the routing path ends and the path parameters begin: "path/to/controller/action/key1/param1/key2/param2" Will obviously be looking for the file: "/framework/application/path/to/controller/action/key1/param1/key2.class.php" => 'param2()' //no class or method by this name can be found This ain't good. Now this smells like a design issue of course, but I'm certain there must be a clean way to circumvent this problem. My initial thoughts were to test each level of the routing path for directory/file existence. If it hits 1+ directories followed by a file, additional path components are an action followed by parameters. If it hits 1+ directories and no file is found, 404 it. However, this is still susceptible to erroneously finding files. Sure this can be alleviated by stricter naming conventions and reserving certain words, but I'd like to avoid that if possible. I don't know if this is the best approach. Has anyone solved such an issue in an elegant manner?
