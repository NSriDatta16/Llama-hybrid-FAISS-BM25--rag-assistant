[site]: stackoverflow
[post_id]: 4682104
[parent_id]: 4681995
[tags]: 
There is nothing that would allow you to do class Foo extendsIfExist Bar But you can monkeypatch Foo with runkit 's runkit_class_adopt â€” Convert a base class to an inherited class, add ancestral methods when appropriate Example from PHP Manual: class myParent { function parentFunc() { echo "Parent Function Output\n"; } } class myChild { } runkit_class_adopt('myChild','myParent'); myChild::parentFunc(); The runkit extension is available from PECL. However, it's use is discouraged because needing it is almost always an indicator for a flawed design. Disclaimer: I am only assuming something like the following example is the reason why you are asking your question. Disregard that part of the answer if it's not. If you need certain functionality conditionally at runtime, consider aggregating the class you want to extend from, e.g. try something along the lines of interface Loggable { public function log($message); } class Foo implements Loggable { protected $logger; public function setLogger($logger) { $this->logger = $logger; } public function log($message) { if($this->logger !== NULL) { return $this->logger->log($message); } } } In the example above, the functionality we want is log() . So instead of detecting if a logger class is available and then monkeypatching this functionality into our Foo class, we tell it to require this functionality by adding an interface Loggable. If a Logger class exists, we instantiate and aggregate it in Foo. If it doesnt exist, we can still call log but it wont do anything. This is much more solid .
