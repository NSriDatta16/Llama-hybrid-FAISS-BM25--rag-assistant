[site]: stackoverflow
[post_id]: 4027393
[parent_id]: 4026968
[tags]: 
Some comments... indentation Please try to be consistent with your indentation style. It makes your code much easier to read. whitespace Be careful how you manage your whitespace. When you read a book or a magazine or a web page, blank spaces are used to separate ideas - paragraphs, sections, etc. Similarly, empty space should be used to separate your functions, or ideas within functions. For example: void f1() { do(); domore(); } void f2() { doAnotherThing(); andYetAnother(); } void f3() { do1(); do2(); do3(); do4(); } Note that it's easy to see that there are 3 separate functions, and the third function has two separate groups of things it's doing - do1() and do2() are separated from do3() and do4() with empty space, visually indicating that there's something similar about do1() and do2(), something else similar about do3() and do4(), and that 1&2 are somehow different from 3&4. If that doesn't make sense, feel free to ignore :) (but I would suggest you read a basic visual design book) braces It's a good idea to get into the habit of using braces around all conditional blocks - it makes it very clear where the block begins and ends. For example, if(condition) line1; line2; is different from if(condition) { line1; line2; } In the first case, line1 will execute if and only if the condition is true, but line2 will evaluate no matter what - the indentation is deceiving. In the second case, both line1 and line2 will execute if and only if the condition is true. In the first case, the intention is unclear - did the original developer screw up indentation (for the pedantic, ignore languages that use indentation to manage loops)? Or did s/he forget the braces? If the first case were written as follows, we'd know the answer: if(condition) { line1 } line2 Of course, if indentation were consistent through the file, the intention of the following code would be clear, as well: if(condition) line1 line2 infinite loop Note the trailing semicolon that you have on while (score1 100); The trailing semicolon ends the block. If score1 is invalid, the loop will never exit. compilation I'm not sure that while score2 100; is valid code. You should place parens around the condition. You've also got the infinite loop problem with the trailing semicolon, again. getting grades When you ask for grades, your code currently looks like score = readLine() while(...) System.out.println(...) This means that you read user input, then enter the loop, in which you print a message. Remember: the loop starts where the while starts, so reading input never happens after the first iteration. You need to read the value the user writes every iteration of the loop. score = readline() while(score is invalid) { print error score = readline() } variable naming Ignore this section if it doesn't make sense right now - consider it a bad introduction to stuff you'll learn later. If you have the option, you should always name your variables meaningfully. The GradeReport constructor has 4 variables, whose purpose is totally unclear if you don't have access to the source code: public GradeReport (String v1, int v2, int v3, int v4) You could use the same name for the variable as the class slot, and you can differentiate with the this keyword. If we first insert this for all class variables in the constructor, and leave the rest unchanged, it becomes: public GradeReport (String v1, int v2, int v3, int v4) { this.name = v1; //these are to initialize the variables so that I don't get null for the second set of results. this.score1 = v2; this.score2 = v3; this.score3 = v4; } and if we replace v1 with "name"... public GradeReport (String name, int v2, int v3, int v4) { this.name = name; //these are to initialize the variables so that I don't get null for the second set of results. this.score1 = v2; this.score2 = v3; this.score3 = v4; } and then replace v2 with score1... public GradeReport (String name, int score1, int v3, int v4) { this.name = name; //these are to initialize the variables so that I don't get null for the second set of results. this.score1 = score1; this.score2 = v3; this.score3 = v4; }
