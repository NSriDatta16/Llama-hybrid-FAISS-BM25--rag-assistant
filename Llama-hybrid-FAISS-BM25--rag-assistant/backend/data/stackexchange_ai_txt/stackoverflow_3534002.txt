[site]: stackoverflow
[post_id]: 3534002
[parent_id]: 3487071
[tags]: 
The way you should organize code in ruby is by using modules as namespace, and class inheritance for subclasses and inheriting behavior. I don't think ruby supports namespace inheritance (which is basically what you are doing by saying Tree inherits from BaseTree and referencing NodeA as Tree::NodeA), and hence this weird edge case where the bindings are not correct. In any case, I don't think there's a valid scenario in which you need to organize the code the way you present it. The 'proper' way would be organizing it through modules defining the namespace, and classes defining behavior. So, the way one would go by defining a tree as such is either simply declare the classes only, without namespaces, or with a namespace that differentiates them from classes that my have a name clash: module UserInterface class Container; end class Tree; end class BaseTree
