[site]: stackoverflow
[post_id]: 756763
[parent_id]: 734474
[tags]: 
The way to add custom config (if you require more than just simple types) is to use a ConfigurationSection, within that for the schema you defined you need a ConfigurationElementCollection (set as default collection with no name), which contains a ConfigurationElement, as follows: public class UserElement : ConfigurationElement { [ConfigurationProperty( "firstName", IsRequired = true )] public string FirstName { get { return (string) base[ "firstName" ]; } set { base[ "firstName" ] = value;} } [ConfigurationProperty( "lastName", IsRequired = true )] public string LastName { get { return (string) base[ "lastName" ]; } set { base[ "lastName" ] = value; } } [ConfigurationProperty( "email", IsRequired = true )] public string Email { get { return (string) base[ "email" ]; } set { base[ "email" ] = value; } } internal string Key { get { return string.Format( "{0}|{1}|{2}", FirstName, LastName, Email ); } } } [ConfigurationCollection( typeof(UserElement), AddItemName = "user", CollectionType = ConfigurationElementCollectionType.BasicMap )] public class UserElementCollection : ConfigurationElementCollection { protected override ConfigurationElement CreateNewElement() { return new UserElement(); } protected override object GetElementKey( ConfigurationElement element ) { return ( (UserElement) element ).Key; } public void Add( UserElement element ) { BaseAdd( element ); } public void Clear() { BaseClear(); } public int IndexOf( UserElement element ) { return BaseIndexOf( element ); } public void Remove( UserElement element ) { if( BaseIndexOf( element ) >= 0 ) { BaseRemove( element.Key ); } } public void RemoveAt( int index ) { BaseRemoveAt( index ); } public UserElement this[ int index ] { get { return (UserElement) BaseGet( index ); } set { if( BaseGet( index ) != null ) { BaseRemoveAt( index ); } BaseAdd( index, value ); } } } public class UserInfoSection : ConfigurationSection { private static readonly ConfigurationProperty _propUserInfo = new ConfigurationProperty( null, typeof(UserElementCollection), null, ConfigurationPropertyOptions.IsDefaultCollection ); private static ConfigurationPropertyCollection _properties = new ConfigurationPropertyCollection(); static UserInfoSection() { _properties.Add( _propUserInfo ); } [ConfigurationProperty( "", Options = ConfigurationPropertyOptions.IsDefaultCollection )] public UserElementCollection Users { get { return (UserElementCollection) base[ _propUserInfo ]; } } } I've kept the UserElement class simple, although it really should follow the pattern of declaring each property fully as described in this excellent CodeProject article . As you can see it represents the "user" elements in your config you provided. The UserElementCollection class simply supports having more than one "user" element, including the ability to add/remove/clear items from the collection if you want to modify it at run-time. Lastly there is the UserInfoSection which simply stats that it has a default collection of "user" elements. Next up is a sample of the App.config file: As you can see, in this example I've included some userInfo/user elements in the App.config. I've also added settings to say they can be defined at machine/app/user/roaming-user levels. Next we need to know how to update them at run-time, the following code shows an example: Configuration userConfig = ConfigurationManager.OpenExeConfiguration( ConfigurationUserLevel.PerUserRoamingAndLocal ); var userInfoSection = userConfig.GetSection( "userInfo" ) as UserInfoSection; var userElement = new UserElement(); userElement.FirstName = "Sample"; userElement.LastName = "User"; userElement.Email = "Sample.User@company.com"; userInfoSection.Users.Add( userElement ); userConfig.Save(); The above code will create a new user.config file if needed, buried deep inside the "Local Settings\Application Data" folder for the user. If instead you want the new user added to the app.config file simply change the parameter for the OpenExeConfiguration() method to ConfigurationUserLevel.None. As you can see, it's reasonably simple, although finding this information required a bit of digging.
