[site]: stackoverflow
[post_id]: 2289603
[parent_id]: 
[tags]: 
What are best practices for including parameters such as an accumulator in functions?

I've been writing more Lisp code recently. In particular, recursive functions that take some data, and build a resulting data structure. Sometimes it seems I need to pass two or three pieces of information to the next invocation of the function, in addition to the user supplied data. Lets call these accumulators. What is the best way to organize these interfaces to my code? Currently, I do something like this: (defun foo (user1 user2 &optional acc1 acc2 acc3) ;; do something (foo user1 user2 (cons x acc1) (cons y acc2) (cons z acc3))) This works as I'd like it to, but I'm concerned because I don't really need to present the &optional parameters to the programmer. 3 approaches I'm somewhat considering: have a wrapper function that a user is encouraged to use that immediately invokes the extended definiton. use labels internally within a function whose signature is concise. just start using a loop and variables. However, I'd prefer not since I'd like to really wrap my head around recursion. Thanks guys!
