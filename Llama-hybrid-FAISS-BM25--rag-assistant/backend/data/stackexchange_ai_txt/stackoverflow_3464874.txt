[site]: stackoverflow
[post_id]: 3464874
[parent_id]: 23931
[tags]: 
In the form described by you, the problem is tough. Do you consider copy, paste of part of the image into another larger image as a copy ? etc. What we loosely refer to as duplicates can be difficult for algorithms to discern. Your duplicates can be either: Exact Duplicates Near-exact Duplicates. (minor edits of image etc) perceptual Duplicates (same content, but different view, camera etc) No1 & 2 are easier to solve. No 3. is very subjective and still a research topic. I can offer a solution for No1 & 2. Both solutions use the excellent image hash- hashing library: https://github.com/JohannesBuchner/imagehash Exact duplicates Exact duplicates can be found using a perceptual hashing measure. The phash library is quite good at this. I routinely use it to clean training data. Usage (from github site) is as simple as: from PIL import Image import imagehash # image_fns : List of training image files img_hashes = {} for img_fn in sorted(image_fns): hash = imagehash.average_hash(Image.open(image_fn)) if hash in img_hashes: print( '{} duplicate of {}'.format(image_fn, img_hashes[hash]) ) else: img_hashes[hash] = image_fn Near-Exact Duplicates In this case you will have to set a threshold and compare the hash values for their distance from each other. This has to be done by trial-and-error for your image content. from PIL import Image import imagehash # image_fns : List of training image files img_hashes = {} epsilon = 50 for img_fn1, img_fn2 in zip(image_fns, image_fns[::-1]): if image_fn1 == image_fn2: continue hash1 = imagehash.average_hash(Image.open(image_fn1)) hash2 = imagehash.average_hash(Image.open(image_fn2)) if hash1 - hash2 If you take a step-back, this is easier to solve if you watermark the master images. You will need to use a watermarking scheme to embed a code into the image. To take a step back, as opposed to some of the low-level approaches (edge detection etc) suggested by some folks, a watermarking method is superior because: It is resistant to Signal processing attacks ► Signal enhancement – sharpening, contrast, etc. ► Filtering – median, low pass, high pass, etc. ► Additive noise – Gaussian, uniform, etc. ► Lossy compression – JPEG, MPEG, etc. It is resistant to Geometric attacks ► Affine transforms ► Data reduction – cropping, clipping, etc. ► Random local distortions ► Warping Do some research on watermarking algorithms and you will be on the right path to solving your problem. ( Note: You can benchmark you method using the STIRMARK dataset. It is an accepted standard for this type of application.
