[site]: stackoverflow
[post_id]: 1758735
[parent_id]: 1758619
[tags]: 
Another way would be to use a hash as an intermediate storage area. IE: my $hash = {}; foreach(@array1) { $hash->{id} = $array1[$_]; $hash->{name} = $array2[$_]; $hash->{address} = $array3[$_]; } foreach( keys %$hash ) { $sql = "insert into table values(?,?,?)"; $sth = $dbh->prepare($sql) or die; $sth->execute($hash->{id}, $hash->{name}, $hash->{address}) or die; } Though again this depends on the three arrays being synced up. However you could modify this to do value modifications or checks or greps in the other arrays within the first loop through array1 (ie: if your values in array2 and array3 are maybe stored as "NN-name" and "NN-address" where NN is the id from the first array and you need to find the corresponding values and remove the NN- with a s// regex). Depends on how your data is structured though. Another note is to check out Class::DBI and see if it might provide a nicer and more object oriented way of getting your data in.
