[site]: stackoverflow
[post_id]: 3427520
[parent_id]: 3427351
[tags]: 
The main problem I see is that you're going to do a lot of repeating yourself. If your actions and views are doing similar things, they're going to maintain nearly duplicate code, which after 5 or 6 years can become a monstrous nightmare. I have a project inherited from 2001 (back when an include flat-scripts idea was one of the more common ways of separating tasks in PHP) that has a similar structure. Now, after 9 years, here's a summary: vlad:~/workspace/myproj% find . -name '*.php' | wc -l 4357 vlad:~/workspace/myproj% du -hs 1.8G . You can imagine how fun it is to try and pick through this. Even if you manage to successfully separate all of your actions into the appropriate flat files, you're still losing out in that data isn't compartmentalized properly, and therefore can't be shared across the entire app in an organized way. Essentially, without using classes to manage your organization, and functions to control what actions can effect which data, you're setting yourself up for a pile of spaghetti code once your app thrives and grows. In addition, you're going to end up with an app where 1/3 of the lines of your code are include statements, none of which really indicate what's going on directly. This can lead to confusing wild goose chases while hunting down bugs. You may want to take a gander at http://wshell.wordpress.com/2009/10/12/encapsulation-in-php/ , which appears to take a good look at why your organizational model may be a bad idea. There's also the ever-fantastic developerWorks articles, one of which covers some good habits to get into as your project grows: http://www.ibm.com/developerworks/opensource/library/os-php-7oohabits/
