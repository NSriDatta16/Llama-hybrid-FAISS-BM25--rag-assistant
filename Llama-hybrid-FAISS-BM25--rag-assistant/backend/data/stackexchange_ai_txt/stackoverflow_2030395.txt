[site]: stackoverflow
[post_id]: 2030395
[parent_id]: 2030295
[tags]: 
You should definitely introduce TDD on new projects - it's easier. Show them how it would help not just pressuring people into doing it . Having technical leadership setting an example every day makes a big difference. Arbitrary measures like "we need 80% coverage" don't cut it. Why not 81%? It's all about developing a sense of judgement about code coverage and what's worth testing. You have to have a genuine interest in helping the other person and capitalize on a teachable moment : A pupil was scolded every day by the TDD guru. He said "Why aren't you doing test first development? You're a developer. You should be doing developer testing!" The guru hit the pupil with rolled-up newspaper and scolded the pupil every day like this for a year, until one day a jolly, extreme programming coach turned up. The extreme programming coach heard the developer say "I'm struggling with this damn feature and I can't get it quite right." The coach smiled and said "show me again how you got to that..." The pupil set his example up again and ran the failing code. "When I press this, and move the slider to 4 it should output 42 not 41!. What do you think I should do?" The jolly XP coach smiled again (he did a lot of that), and said "do that again, but this time let me type..." Before you know it, the pupil and the coach had written a TDD test together but since the pupil was motivated to get his work done he forgot to resist and was distracted away from having a meta-discussion about the philosophy of agile. The pupil then said "aha! I get it. So that's why we write unit tests" ... and in that moment the pupil was enlightened. ka-ching! ;-)
