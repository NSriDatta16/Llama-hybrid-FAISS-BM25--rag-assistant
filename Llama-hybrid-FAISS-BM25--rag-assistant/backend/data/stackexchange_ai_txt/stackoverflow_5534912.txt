[site]: stackoverflow
[post_id]: 5534912
[parent_id]: 5533923
[tags]: 
According to this page , you can use XSLTProcessor.addParameter("Parameter Name", "Parameter Value"); where XSLTProcessor is created with var XSLTCompiled = new ActiveXObject("MSXML2.XSLTemplate"); XSLTCompiled.stylesheet = XSL.documentElement; var XSLTProcessor = XSLTCompiled.createProcessor(); The transform call is also different. XSLTProcessor.transform(); Anyway, it looks like there's a quite elaborate explanation of what you're asking for. I did cross-browser XSLT transforms a while back, and here's the code I used. createDocument is just a function to return a DOM document. I didn't do stylesheet parameters, so maybe this is a little off-topic, but anyway it works on IE6+ and Firefox 1.5+. // arguments can be string (uri of document) or document node function xslTransform( content, transform, options ) { if ("string" == typeof content) content = createDocument( content ); if ("string" == typeof transform) transform = createDocument( transform ); var targetEle; if (options && options.target) targetEle = document.getElementById(options.target); if (targetEle && options.replace) while (targetEle.hasChildNodes()) targetEle.removeChild( targetEle.firstChild ); if (window.XSLTProcessor) { var processor = new XSLTProcessor(); processor.importStylesheet( transform ); var frag = processor.transformToFragment( content, document ); if (targetEle) targetEle.appendChild( frag ); } else if (window.ActiveXObject) { if (targetEle) targetEle.innerHTML = content.transformNode( transform ); } else return "XSLT not supported"; }
