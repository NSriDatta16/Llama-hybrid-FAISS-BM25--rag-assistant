[site]: stackoverflow
[post_id]: 4098304
[parent_id]: 4098192
[tags]: 
I think, if i understand you, an NSMutableDictionary would work. (as NR4TR said) but, i think the object would be the description and the key would be the count. you could check for the key and get the count in the same gesture. if the return value of objectForKey is nil, it doesn't exist. NSMutableDictionary *tableDictionary = [[NSMutableDictionary alloc] init]; NSString *displayKey = @"1/June/2001"; NSNumber *displayCount = [tableDictionary objectForKey:displayKey]; if (displayCount != nil) { NSNumber *incrementedCount = [[NSNumber alloc] initWithInteger:[displayCount integerValue] + 1]; [tableDictionary removeObjectForKey:displayKey]; [tableDictionary setValue:incrementedCount forKey:displayKey]; [incrementedCount release]; } else { NSNumber *initialCount = [[NSNumber alloc] initWithInteger:1]; [tableDictionary setValue:initialCount forKey:displayKey]; [initialCount release]; } EDIT: Hopefully this isn't pedantic, but I think a couple pointers will help. Dictionaries, Sets, and Arrays all hold objects for retrieval. The manner of holding and retrieval desired drives the decision. I think of it based on the question 'what is the nature of the information that I have when I need an object being held?' NSDictionary and NSMutableDictionary Hold n objects per key. (I think...I haven't had to test a limit, but i know you can get an NSSet back as a value.) KEY is more important than INDEX. I don't think of dictionaries as ordered. they know something and you need to ask the correct question. NSArray and NSMutableArray hold n objects in order. INDEX is most important bit of information. (you can ask for the index of an object but, even here, the index is the important part) you will typically drive table views with an array because the ordered nature of the array fits. NSSet, NSMutableSet, and NSCountedSet A collection of objects without order. You can change any of these into the other with something like [nsset setFromArray:myArray]; and all of these things can hold the other as objects. I think an array as your top level is the correct thinking, but beyond that, it becomes an issue of implementation
