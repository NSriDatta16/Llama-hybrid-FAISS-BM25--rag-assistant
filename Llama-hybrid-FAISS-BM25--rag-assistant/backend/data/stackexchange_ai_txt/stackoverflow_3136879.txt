[site]: stackoverflow
[post_id]: 3136879
[parent_id]: 3133649
[tags]: 
Maybe my confusion stems from my belief that auto is a dynamic type, comparable to var i javascript, but when in reality, it's something else? auto is a storage class . In fact, it's the default storage class; it doesn't mean anything beyond 'this has a storage class'. Now if the compiler can infer the type unambiguously, then everything is fine. Otherwise, it's an error: auto i = 42; // An integer literal is inferred to be of type 'int'. auto j; // Error! So auto isn't a type at all. Remember that this all has to happen at compile time, not run time. So let's look at a function: auto add(auto a, auto b) { return a + b; } Can the compiler automatically infer the types of a , b , or the return value? Nope. In addition to the primitives that work with the add operator ( int , byte , double , and so on), user defined types could overload it, and so on. Because the compiler cannot unambiguously infer any of these types, it is an error. Types must be specified in parameters because in general, they cannot be inferred (unlike declarations, for example).
