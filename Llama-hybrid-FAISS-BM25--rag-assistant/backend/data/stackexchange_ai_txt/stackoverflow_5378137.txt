[site]: stackoverflow
[post_id]: 5378137
[parent_id]: 5377992
[tags]: 
According to the documentation , the "extra-heap" bytes are as follows: The number of extra heap bytes allocated at that point. This reflects the number of bytes allocated in excess of what the program asked for. There are two sources of extra heap bytes. First, every heap block has administrative bytes associated with it. The exact number of administrative bytes depends on the details of the allocator. By default Massif assumes 8 bytes per block, as can be seen from the example, but this number can be changed via the --heap-admin option. Second, allocators often round up the number of bytes asked for to a larger number, usually 8 or 16. This is required to ensure that elements within the block are suitably aligned. If N bytes are asked for, Massif rounds N up to the nearest multiple of the value specified by the --alignment option. This doesn't sound like memory fragmentation to me. Memory fragmentation is typically caused by lots of small allocations. You end up with small gaps between each unit of allocated memory and then it becomes difficult to get a contiguous region of memory for larger allocations. To prevent memory allocation basically make less allocations! Use the stack space wherever possible (e.g. don't needlessly use new) and if possible consider pooling frequently allocated objects so that you don't keep allocating memory.
