[site]: stackoverflow
[post_id]: 1445369
[parent_id]: 
[tags]: 
Avoiding floating point arithmetic

I wrote a small software synth for the iPhone. To further tune performance I measured my application with Shark and found that I am losing a lot of time in float/SInt16 conversions. So I rewrote some parts to get around the conversions by pre-calculating lookup tables that return "ready-to-use" SInt16 samples. This works fine so far. Currently I am trying to rewrite some filters and my ADSR envelope implementation to use only integer arithmetic but I could use some tips on how to perform multiplications/divisions without floats. I am targetting the iPhone canonical format : LPCM 16-bit integer samples What are good approaches to apply an amplitude to my final sample without using a float? Edit: The only thing I figured out so far is, that I can divide by powers of 2 by right-shifting my current sample. inBuffer[frame] = wavetable[i % cycleLengthInSamples] >> 4; But I can't think of any elegant way to create a smooth ADSR envelope with that. Edit2: Thanks for all your great answers! My current approach: bring all my ADSR envelope values into the positive SInt16 range multiply with the current value from the wavetable (store intermediates as SInt32 ) shift the result by 16 to the right this seems to work :)
