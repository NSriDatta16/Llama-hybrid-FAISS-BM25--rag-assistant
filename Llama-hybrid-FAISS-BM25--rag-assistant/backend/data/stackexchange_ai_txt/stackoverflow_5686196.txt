[site]: stackoverflow
[post_id]: 5686196
[parent_id]: 5686155
[tags]: 
I'd say the following code would be clearer: if ((!ignorePath) && (tempPath != null) && (tempPath.Length != 0)) { // do something here } First you verify that ignorePath is false (because you don't want the code to execute when it is true), then you check that tempPath is not null and that its length is non-zero. The advantage here is that you've moved the check of the ignorePath variable to be first . Since it is apparently the most important thing to you (it overrides the other two conditions), it ought to come first for clarity and readability (and performance, I suppose, but that hardly matters here). Remember that there's no reason to check Boolean types against the literal values true or false . An if statement already evaluates whether the value of the statement inside the ( ) is true or false . Specifying it explicitly is just redundant. The only problem I see with the above code is that !ignorePath is a little difficult to read. It creates a double negative, as you're "not-ignoring" something. What exactly does that mean? That's why most coding standards (including Microsoft's recommended standards for .NET) encourage you to name Boolean variables with positive grammar. I'd call that variable something like checkPath , instead.
