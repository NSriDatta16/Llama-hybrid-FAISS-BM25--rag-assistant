[site]: stackoverflow
[post_id]: 2485843
[parent_id]: 2485719
[tags]: 
You are at a disadvantage. Windows Explorer almost certainly uses FindFirstFile / FindNextFile to both traverse the directory structure and collect size information (through lpFindFileData ) in one pass, making what is essentially a single system call per file. Python is unfortunately not your friend in this case. Thus, os.walk first calls os.listdir (which internally calls FindFirstFile / FindNextFile ) any additional system calls made from this point onward can only make you slower than Windows Explorer os.walk then calls isdir for each file returned by os.listdir (which internally calls GetFileAttributesEx -- or, prior to Win2k, a GetFileAttributes + FindFirstFile combo) to redetermine whether to recurse or not os.walk and os.listdir will perform additional memory allocation , string and array operations etc. to fill out their return value you then call getsize for each file returned by os.walk (which again calls GetFileAttributesEx ) That is 3x more system calls per file than Windows Explorer, plus memory allocation and manipulation overhead. You can either use Anurag's solution, or try to call FindFirstFile / FindNextFile directly and recursively (which should be comparable to the performance of a cygwin or other win32 port du -s some_directory .) Refer to os.py for the implementation of os.walk , posixmodule.c for the implementation of listdir and win32_stat (invoked by both isdir and getsize .) Note that Python's os.walk is suboptimal on all platforms (Windows and *nices), up to and including Python3.1. On both Windows and *nices os.walk could achieve traversal in a single pass without calling isdir since both FindFirst / FindNext (Windows) and opendir / readdir (*nix) already return file type via lpFindFileData->dwFileAttributes (Windows) and dirent::d_type (*nix). Perhaps counterintuitively, on most modern configurations (e.g. Win7 and NTFS, and even some SMB implementations) GetFileAttributesEx is twice as slow as FindFirstFile of a single file (possibly even slower than iterating over a directory with FindNextFile .) Update: Python 3.5 includes the new PEP 471 os.scandir() function that solves this problem by returning file attributes along with the filename. This new function is used to speed up the built-in os.walk() (on both Windows and Linux). You can use the scandir module on PyPI to get this behavior for older Python versions, including 2.x.
