[site]: stackoverflow
[post_id]: 3576047
[parent_id]: 3575780
[tags]: 
It looks like you're using this as a conditional escape from the control flow of the code. You can do this in Scala too (just annotate the method with the type to return) if it's really the most elegant solution to the problem. Sometimes code needs to act like a multi-stage filter, and this pattern works well for that. Of course you can always nest if-statements, but that gets awkward. There are a couple of other things to consider in Scala, however. One can methodReturningOption.getOrElse( // All the code for the None case goes in here ) which usually works pretty well at consolidating different branches in the case that there is a sensible default (or you'll end up throwing an exception if there's not). Alternatively, you can abuse pattern matching for this: None match { // Could use a real variable instead of None if it helped case _ if (Predicate1) => Action1; Value1 case _ if (Predicate2) => Action2; Value2 . . . case _ => ErrorHandlingPerhaps } But you also might be able to think about your problem in a different way so that these sort of predicates become less useful. (Without knowing more details, I can't suggest something.)
