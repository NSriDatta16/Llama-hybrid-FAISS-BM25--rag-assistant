[site]: stackoverflow
[post_id]: 3659437
[parent_id]: 3659046
[tags]: 
All of your encoders are using BitmapFrame class for creating frames that will be added to Frames collection property of encoder. BitmapFrame.Create method has variety of overloads and one of them accepts parameter of BitmapSource type. So as we know that TransformedBitmap inherits from BitmapSource we can pass it as a parameter to BitmapFrame.Create method. Here are the methods which works as you have described: public bool WriteTransformedBitmapToFile (BitmapSource bitmapSource, string fileName) where T : BitmapEncoder, new() { if (string.IsNullOrEmpty(fileName) || bitmapSource == null) return false; //creating frame and putting it to Frames collection of selected encoder var frame = BitmapFrame.Create(bitmapSource); var encoder = new T(); encoder.Frames.Add(frame); try { using (var fs = new FileStream(fileName, FileMode.Create)) { encoder.Save(fs); } } catch (Exception e) { return false; } return true; } private BitmapImage GetBitmapImage (BitmapSource bitmapSource) where T : BitmapEncoder, new() { var frame = BitmapFrame.Create(bitmapSource); var encoder = new T(); encoder.Frames.Add(frame); var bitmapImage = new BitmapImage(); bool isCreated; try { using (var ms = new MemoryStream()) { encoder.Save(ms); ms.Position = 0; bitmapImage.BeginInit(); bitmapImage.StreamSource = ms; bitmapImage.CacheOption = BitmapCacheOption.OnLoad; bitmapImage.EndInit(); isCreated = true; } } catch { isCreated = false; } return isCreated ? bitmapImage : null; } They accept any BitmapSource as the first parameter and any BitmapEncoder as a generic type parameter. Hope this helps.
