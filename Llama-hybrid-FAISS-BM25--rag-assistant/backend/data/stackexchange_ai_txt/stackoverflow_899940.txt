[site]: stackoverflow
[post_id]: 899940
[parent_id]: 869324
[tags]: 
Larger and more distributed or more flexible teams need stricter coding and testing standards, small teams can (and should) use less. Coding and testing standards should exist regardless of the team size. They improve maintainability of the code, and make it easier to bring new resources up to speed. Process documentation should be minimal, real-time and current. Agreed. Detailed statistical control indicators are an unnecessary overhead: early release of incomplete software is a better indication of progress. There aren't many statistical control indicators for software development that are consistently valuable. I would be looking for variance to time and budget, defect rate in test and in production, and variance to estimates. Ideally developers should be close to the customer with no specialised intermediate roles. Additional roles should only be used if customers are specialised in a way that stops developers from also being users. So often this is impractical or impossible. Customers have so much to do in their own jobs that they rarely have the time to be extremely hands on with development staff. Business Analysts have the skills necessary to consolidate business questions and get clear answers much more time effectively. If your release cycles are short enough, customers will have plenty of opportunity for feedback. Iterations should be flexible unless it benefits coordination of releases with other departments or other processes. There should be some flexibility, but not much. One of the benefits of an agile approach is that it forces the team to limit scope to the most valuable requirements. Adding flexibility to iteration timing introduces increased risk of scope creep. Developers should be able to easily and regularly communicate but meetings should be infrequent (monthly and weekly, rather than daily). Daily meetings are effective with larger teams. They keep people on track and increase collaboration. They help prevent team members from getting stuck on a problem without asking for help. They also help maintain control around the iteration, which is very useful considering the lack of other controls available. Pair programming should only be used for training and investigational tasks. I don't have much to say about this one. These guidelines are a starting point only: continuous improvement should be used to further tailor the agile variant to the exact circumstances.** EXACTLY! Agile is meant to flex to the organization's needs. Constant tweaking is essential to perfecting the process. Good luck to you on your thesis.
