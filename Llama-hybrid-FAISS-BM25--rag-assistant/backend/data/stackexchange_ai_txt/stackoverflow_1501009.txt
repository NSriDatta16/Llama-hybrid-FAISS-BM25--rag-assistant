[site]: stackoverflow
[post_id]: 1501009
[parent_id]: 1500976
[tags]: 
It means that make will not start any new thread until the number of runnable processes, averaged over some period of time is below 2.5. Edit, following vines' remark a runnable process , in Unix parlance, is a process that is either waiting for CPU time or readily running. Technically it is a process which is in TASK_RUNNING state. However... this prompted me to re-read the original question, and note its " on Windows " part.... Whereby my original answer is, loosely , correct for GNU Make on Unix-like hosts, it is plain short of factual on Windows. The discrepancy of behavior is due to the fact the the two operating systems provide very different metrics to describe their "current" CPU load. Consequently Make's logic has to interpret these CPU load readings differently, to serve its --load-average feature. The purpose of the --load-average parameter is to provide guidance to Make as to when it can start new threads; causing Make to share CPU resources with other applications (and within itself) more elegantly. In Linux, the semantic of this parameter is very close to its name: new Make threads are allowed when the load-average , as reported by the kernel (I'm assuming this is the "one minute" load average, though it could be the five minutes one), is less than the parameter value. In Windows, Make computes the load average from the weighed-average of the CPU Load (as reported by GetSystemTimes function) and the memory load (eg. from GlobalMemoryStatusEx function).
