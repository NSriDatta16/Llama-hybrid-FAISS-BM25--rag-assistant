[site]: stackoverflow
[post_id]: 4767327
[parent_id]: 4767288
[tags]: 
They are both ways of structuring your code. If your interested in function-oriented programming and want to understand it a bit better, I'd take a look at lisp. C++ isn't truly function oriented as every function should return a value yet C++ functions can return void (making it a procedure rather than a function), so it's not a true functional programming language in the sense. "I have never done modular programming so I just know modules by definition that it contains functions". Modules are a level higher than functions. That's a good start. Think of a function as a unit of work that does something and when you have several functions that you can group in a certain way, you put them in a module. So, string.h has a bunch of functions for working with strings, but you simply include the header and you have access to all those functions directly. You can then reuse those modules in other projects as you'd already used the modules previously and they've been (I assume) debugged and tested and stop people from reinventing the wheel. The whole point is to benefit from the cumulative experience. I'd suggest you think of a project you'd like and write some functions and think about how you'd like to organize the code for another developer to use. Hope this is of some use to you.
