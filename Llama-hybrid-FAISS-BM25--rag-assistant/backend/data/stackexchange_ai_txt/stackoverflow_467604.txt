[site]: stackoverflow
[post_id]: 467604
[parent_id]: 467557
[tags]: 
A hook is functionality provided by software for users of that software to have their own code called under certain circumstances. That code can augment or replace the current code. In the olden days when computers were truly personal and viruses were less prevalent (I'm talking the '80's), it was as simple as patching the operating system software itself to call your code. I remember writing an extension to the Applesoft BASIC language on the Apple II which simply hooked my code into the BASIC interpreter by injecting a call to my code before any of the line was processed. Some computers had pre-designed hooks, one example being the I/O stream on the Apple II. It used such a hook to inject the whole disk sub-system (Apple II ROMs were originally built in the days where cassettes were the primary storage medium for PCs). You controlled the disks by printing the ASCII code 4 ( CTRL-D ) followed by the command you wanted to execute then a CR , and it was intercepted by the disk sub-system, which had hooked itself into the Apple ROM print routines. So for example, the lines: PRINT CHR(4);"CATALOG" PRINT CHR(4);"IN#6" would list the disk contents then re-initialize the machine. This allowed such tricks as protecting your BASIC programs by setting the first line as: 123 REM XIN#6 then using POKE to insert the CTRL-D character in where the X was. Then, anyone trying to list your source would send the re-initialize sequence through the output routines where the disk sub-system would detect it. That's often the sort of trickery we had to resort to, to get the behavior we wanted. Nowadays, with the operating system more secure, it provides facilities for hooks itself, since you're no longer supposed to modify the operating system "in-flight" or on the disk. They've been around for a long time. Mainframes had them (called exits) and a great deal of mainframe software uses those facilities even now. For example, the free source code control system that comes with z/OS (called SCLM) allows you to entirely replace the security subsystem by simply placing your own code in the exit.
