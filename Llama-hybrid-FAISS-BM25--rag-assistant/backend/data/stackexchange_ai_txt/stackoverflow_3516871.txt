[site]: stackoverflow
[post_id]: 3516871
[parent_id]: 3516836
[tags]: 
Neither is clearly better than the other. From a technical standpoint they are equivalent. The number 0 in a pointer context does not mean all bits zero; it is defined to be equivalent to whatever bit pattern is used to represent null pointers. NULL can either be defined as 0 or (void *) 0 . Either definition is syntactical and says nothing about the underlying bit representation. So if (!p) is the same as if (p == NULL) is the same as if (p == 0) as far as technical correctness goes. The issue is one of style. Like all style issues, your first inclination should be to match whatever the prevailing coding standards are. Do the same thing as the rest of the codebase. If there is no prevailing standard then it comes down to personal preference and you would be encouraged to develop a coding standard with your peers. (Personally I like to use explicit comparisons and reserve the shorter syntax for boolean values, but I'll gladly use if (!p) that's what everyone else is doing.)
