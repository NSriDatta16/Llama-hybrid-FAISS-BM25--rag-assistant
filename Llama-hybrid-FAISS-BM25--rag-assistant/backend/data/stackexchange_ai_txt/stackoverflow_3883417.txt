[site]: stackoverflow
[post_id]: 3883417
[parent_id]: 173400
[tags]: 
I've used both array_keys($obj) !== range(0, count($obj) - 1) and array_values($arr) !== $arr (which are duals of each other, although the second is cheaper than the first) but both fail for very large arrays. This is because array_keys and array_values are both very costly operations (since they build a whole new array of size roughly that of the original). The following function is more robust than the methods provided above: function array_type( $obj ){ $last_key = -1; $type = 'index'; foreach( $obj as $key => $val ){ if( !is_int( $key ) || $key Also note that if you don't care to differentiate sparse arrays from associative arrays you can simply return 'assoc' from both if blocks. Finally, while this might seem much less "elegant" than a lot of "solutions" on this page, in practice it is vastly more efficient. Almost any associative array will be detected instantly. Only indexed arrays will get checked exhaustively, and the methods outlined above not only check indexed arrays exhaustively, they duplicate them.
