[site]: stackoverflow
[post_id]: 5339178
[parent_id]: 
[tags]: 
PHPUnit - How to mock PDO prepared statement

I'm trying to unit test a mapper class with PHPUnit. I can easilly mock the PDO instance that will be injected in the mapper class, but I can't figure out how to mock the PreparedStatement class, as it's generated by the PDO class. In my case I've extended the PDO class, so I have this: public function __construct($dsn, $user, $pass, $driverOptions) { //... parent::__construct($dsn, $user, $pass, $driverOptions); $this->setAttribute(PDO::ATTR_STATEMENT_CLASS, array('Core_Db_Driver_PDOStatement', array($this))); } The point is that Core_Db_Driver_PDOStatement is not injected in the constructor of the PDO Class, it's instanciated statically. And even if I do this: public function __construct($dsn, $user, $pass, $driverOptions, $stmtClass = 'Core_Db_Driver_PDOStatement') { //... parent::__construct($dsn, $user, $pass, $driverOptions); $this->setAttribute(PDO::ATTR_STATEMENT_CLASS, array($stmtClass, array($this))); } ... it's still a static instanciation as I can't pass my own mocked instance of the prepared statement class. Any idea ? Edit: Solution, adapted from the anwser: /** * @codeCoverageIgnore */ private function getDbStub($result) { $STMTstub = $this->getMock('PDOStatement'); $STMTstub->expects($this->any()) ->method('fetchAll') ->will($this->returnValue($result)); $PDOstub = $this->getMock('mockPDO'); $PDOstub->expects($this->any()) ->method('prepare') ->will($this->returnValue($STMTstub)); return $PDOstub; } public function testGetFooById() { $arrResult = array( ... ); $PDOstub = $this->getDbStub($arrResult); }
