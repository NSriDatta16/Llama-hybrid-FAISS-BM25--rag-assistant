[site]: stackoverflow
[post_id]: 5572308
[parent_id]: 5572144
[tags]: 
The ClassLoader class uses a delegation model to search for classes and resources. Each instance of ClassLoader has an associated parent class loader. When requested to find a class or resource, a ClassLoader instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine's built-in class loader, called the "bootstrap class loader", does not itself have a parent but may serve as the parent of a ClassLoader instance. (From the javadoc of ClassLoader ) The paragraph above means that normally, your class loaders form a tree and each one asks its parent before trying to load a class. So in theory, if your dependencies are visible by either the class loader that is loading the plugin, or any of the upstream class loaders, it will work. However, there are two caveats with this: If your plugin calls Thread.setContextClassLoader() , that might mess things up. But this should be more of the plugin writers' concern rather than yours. Web servers typically don't obey this delegation rule to ensure maximum separation between different webapps and the server itself. (I could probably give a less generic answer if there was some code I could look at.)
