[site]: stackoverflow
[post_id]: 2564371
[parent_id]: 1517490
[tags]: 
What version of OVal are you using? I ask because the FieldContext class does have a getField() method: http://oval.sourceforge.net/api/net/sf/oval/context/FieldContext.html#getField%28%29 The return type is a java.lang.reflect.Field which has a getName() accessor: http://java.sun.com/j2se/1.5.0/docs/api/java/lang/reflect/Field.html#getName%28%29 So you seem to be trying to re-invent the wheel by using a squared boulder :) Also, unless you are implementing a generic framework, or you need to implement an emergency hack, you should avoid accessing non-public fields with reflection. Privates are (meant to be) subject to change within the enclosing class; protected ones are subject to change within the inheritance tree; and package-scoped ones are subject to change vertically. The author of such code does not make any guarantees (syntactically and semantically) if his artifacts are accessed via reflection. Tying your code to them via reflection is a good way to make it brittle and fragile like a pretty petunia blasted by the winder wind of the Siberian tundra ;)
