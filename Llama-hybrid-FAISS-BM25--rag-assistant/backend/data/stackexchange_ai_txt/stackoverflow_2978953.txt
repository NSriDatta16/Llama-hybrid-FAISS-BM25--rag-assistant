[site]: stackoverflow
[post_id]: 2978953
[parent_id]: 2978886
[tags]: 
I would not say that your design, as you speculate, is totally wrong, in fact Administrator and End-User are valid domain objects that should be represented somehow in the Class Diagrams. Just because you identify those two entities as actors doesn't mean they should be excluded from the Domain, remember, your domain is your scope, or "relevant context", that is, the set of useful objects that play a relevant role in your solution. You may start with basic objects that comprise your model, just write them down, without further analysis, like brain storming... Vacation Location Travel Agent Schedule User Reservation Reservation Service (This can be an interface for accessing the vacation reservation stuff) Then try to establish the relationships between those objects, if you can not find any relationship that means you are not choosing the right objects, if they are part of the same problem domain then they must be related somehow. After some time, you will discover that there are objects missing, try to encapsulate as much as possible, and represent the correct abstractions, Design Patterns might help you out with that. When every possible object is represented with all its properties and methods, then you should have a fully, although not yet finished, functional design. I know you should have a lot of theory in your mind, so get going, without fear, I myself have used this approach successfully many times at work. Finally get a copy of UML Distilled Regards,
