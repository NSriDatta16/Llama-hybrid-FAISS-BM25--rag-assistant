[site]: stackoverflow
[post_id]: 1269563
[parent_id]: 
[tags]: 
Using Boost Graph Library: property_map in boost::mutable_queue

I'm trying to instantiate a simple version of boost::mutable_queue with a custom Node type that I've defined. I have no trouble instantiating a mutable_queue instance using the following snippet (using std and boost namespaces, and all needed includes): int N = 100; mutable_queue *q = new mutable_queue (N, less (), identity_property_map()); However, when I try to switch double to Node (for which I've overloaded operator and operator== ), I'm no longer able to get it working. Here's one representative example of what I'm trying: typedef Node entry_t; typedef vector storage_t; typedef less comp_t; typedef identity_property_map prop_map_t; //typedef iterator_property_map ::type > prop_map_t; typedef mutable_queue queue_t; queue_t *q = new queue_t(N, comp_t(), prop_map_t()); This gives me errors along these lines: error: no matching function for call to ‘boost::mutable_queue >, std::less, boost::identity_property_map>::push(Node*&)’ mutable_queue.h:100: note: candidates are: void boost::mutable_queue::push(const IndexedType&) [with IndexedType = UnitTest::Node_test()::entry_t, RandomAccessContainer = std::vector >, Comp = std::less, ID = boost::identity_property_map] My suspicion is that I'm not understanding how to use property_map . Could somebody help me fix this snippet, and maybe give a little explanation for why it's the right thing to do?
