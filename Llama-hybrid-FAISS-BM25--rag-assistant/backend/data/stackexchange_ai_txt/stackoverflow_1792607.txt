[site]: stackoverflow
[post_id]: 1792607
[parent_id]: 1792198
[tags]: 
I agree with everyone else (the first three posts, at least). However, IT is a universe made up of "it depends", so I'll play some devil's advote. There are circumstances--extreme circumstances--where this could make sense. If you were updating the database with new structures and a mandate to clear out old data, sure -- though of course you'd have to do this during a maintenance (outage) window. If you were deleting all but a very few rows out of a massively large data set (and that's with regards to storage space, not merely number of rows) -- but, as per below, there are better options If there was so much data and so little hard drive space you were in danger of running out due to transaction log file bloat If you didn't have to worry about foreign keys If you could take the database offline for the duration of the process. Failing that, if you could ensure that locking the table or tables affected for a minute or more would not cause undue disruption of service. (Can you ever truly be 100% certain that, at the point in time you want to do the work, no one and no [scheduled] thing is actually going to use your database?) If "chunkifying" the deletes (e.g. DELETE TOP 1000...) was somehow not an option If TRUNCATE TABLE was not an option If table partioning-based solutions were not an option Then, maybe, it might make sense. But probably not. To mention, I could almost see a DBA hitting situations based on some of the above early in their career, and thereafter using their "lessons learned" in all similar situations.
