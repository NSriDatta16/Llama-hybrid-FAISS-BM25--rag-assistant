[site]: stackoverflow
[post_id]: 4329444
[parent_id]: 4328660
[tags]: 
A common way to provide indirect communication in WPF is to leverage the Mediator pattern. You can use a mediator to publish the selection of your category, and have the temp view subscribe to notification of a change in selection of your category. See http://www.eggheadcafe.com/tutorials/aspnet/ec832ac7-6e4c-4ea8-81ab-7374d3da3425/wpf-and-the-model-view-vi.aspx for a simple example of a concrete mediator. There are also several popular MVVM frameworks available that provide Mediator pattern implementations if you want a more robust implementation. Simple Mediator implementation: public sealed class Mediator { private static Mediator instance = new Mediator(); private readonly Dictionary >> callbacks = new Dictionary >>(); private Mediator() { } public static Mediator Instance { get { return instance; } } public void Register(string id, Action action) { if (!callbacks.ContainsKey(id)) { callbacks[id] = new List >(); } callbacks[id].Add(action); } public void Unregister(string id, Action action) { callbacks[id].Remove(action); if (callbacks[id].Count == 0) { callbacks.Remove(id); } } public void SendMessage(string id, object message) { callbacks[id].ForEach(action => action(message)); } } SelectList.xaml code-behind: private void DataGrid_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e) { var category = e.AddedItems.FirstOrDefault() as Category; if(category != null) { Mediator.Instance.SendMessage("Category Selected", category); } } Temp.xaml code-behind: public Temp() { InitializeComponent(); Mediator.Instance.Register ( "Category Selected", OnCategorySelected ); } private void OnCategorySelected(object parameter) { var selectedCategory = parameter as Category; if(selectedCategory != null) { } }
