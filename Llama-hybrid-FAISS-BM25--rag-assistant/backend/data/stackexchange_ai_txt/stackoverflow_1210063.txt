[site]: stackoverflow
[post_id]: 1210063
[parent_id]: 1180796
[tags]: 
What happens if you just move to OS threads? Is performance that bad? You could use a single pointer-sized TLS slot to store the base of your lightweight thread's storage area. You'd just have to swap out one pointer during your context switch. Load one of the new temp registers from there whenever you need the value, and you don't have to worry about using one of the few preserved across function calls. Another supported solution would be to use the Fiber APIs to schedule your lightweight threads. You would then change the JIT to make proper calls to FlsGet/SetValue . Sorry, it sounds like the old code is written to rely on segment prefixes for addressing and now the LDT is just not available for that sort of thing. You're going to have to fix the code generation a little bit. the existing code makes heavy use of scaled-index + base addressing, with the GS term as a 3rd term. I think I can use use 'lea' followed by a two-register form Sounds like a good plan. cases like "mov eax, mem", which accept a prefix but need completely replaced to use register-based addressing Perhaps you could move those to address + offset addressing. The offset register could be the register holding the base of your TLS block.
