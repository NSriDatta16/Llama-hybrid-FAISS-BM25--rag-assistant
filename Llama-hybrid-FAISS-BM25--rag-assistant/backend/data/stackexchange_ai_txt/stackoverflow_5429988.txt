[site]: stackoverflow
[post_id]: 5429988
[parent_id]: 
[tags]: 
Populating a Wrappannel Dynamically in MVVM

this is regarding a best practice advice regarding using MVVM. I am in need to populate a wrappanel as and when elements are dropped in to it. The elements are not uniform, they can be either labels or text boxes. Depending on a value of a parameter the element added varies. I did this in code behind. Now I am in the process of moving the entire thing to an MVVM model am stuck with the way to do this without affecting the MVVM core principals. In this code I have both UI elements and logic content to gether which are tightly related; and I have become incapable to seperate the two to suite MVVM. I tried creating the UI elements in the VM, populating a ObservableCollection of type UIElement and binding it to the itemssource property (Subsequently I changed wrappanel to be a listview to be effective in the whole thing). But this did not work out since when I bind the elements there is no way the code can understand which UIelement. Posted below is the section of the code which I need to seperate: private void CreateVisulaQueryContent() { VisualQueryObject visualQueryData = new VisualQueryObject(); VisualQueryObject helperVisualQueryObject = DraggedData as VisualQueryObject; //***Taking a copy of the static DraggedData object to be bound visualQueryData.ColumnDiscriptor = helperVisualQueryObject.ColumnDiscriptor; visualQueryData.ComparedValue = helperVisualQueryObject.ComparedValue; visualQueryData.JoinWithColumnDescriptor = helperVisualQueryObject.JoinWithColumnDescriptor; visualQueryData.LabelType = helperVisualQueryObject.LabelType; visualQueryData.OperatorValue = helperVisualQueryObject.OperatorValue; if (visualQueryData.LabelType == "column") { ColumnDescriptionObject descriptionValue = visualQueryData.ColumnDiscriptor; Label droppedElement = new Label(); Binding binding = new Binding(); binding.Source = visualQueryData; binding.Path = new PropertyPath("ColumnDiscriptor"); binding.Mode = BindingMode.TwoWay; droppedElement.SetBinding(Label.DataContextProperty, binding); droppedElement.Content = visualQueryData.ColumnDiscriptor.TableName + "." + visualQueryData.ColumnDiscriptor.ColumnName; droppedElement.Foreground = Brushes.White; droppedElement.Background = Brushes.DarkOrange; droppedElement.BorderThickness = new Thickness(5); droppedLabel.MouseDoubleClick += columnLabel_MouseDown; ViewUIElements.Add(droppedElement); } else if (visualQueryData.LabelType == "controller") { Label droppedElement = new Label(); Binding binding = new Binding(); binding.Source = visualQueryData; binding.Path = new PropertyPath("OperatorValue"); binding.Mode = BindingMode.TwoWay; droppedElement.SetBinding(Label.DataContextProperty, binding); droppedElement.Content = draggedContent.OperatorValue; droppedElement.Foreground = Brushes.White; droppedElement.Background = Brushes.Crimson; droppedElement.BorderThickness = new Thickness(5); droppedElement.MouseDoubleClick += columnLabel_MouseDown; ViewUIElements.Add(new Label()); } else if (visualQueryData.LabelType == "value") { TextBox droppedElement = new TextBox(); Binding binding = new Binding(); binding.Source = visualQueryData; binding.Path = new PropertyPath("ComparedValue"); binding.Mode = BindingMode.TwoWay; droppedElement.SetBinding(TextBox.TextProperty, binding); droppedElement.MouseDoubleClick += columnLabel_MouseDown; ViewUIElements.Add(droppedElement); } QueryDesignerModel.QueryDesignHelperCollection.Add(visualQueryData); } Any help is deeply appreciated!
