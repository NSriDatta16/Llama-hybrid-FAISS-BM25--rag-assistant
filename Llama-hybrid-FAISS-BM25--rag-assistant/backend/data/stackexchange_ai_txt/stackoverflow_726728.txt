[site]: stackoverflow
[post_id]: 726728
[parent_id]: 726654
[tags]: 
This is more informational than anything else. What you've posted is the double-checked locking algorithm - and what you've posted will work, as far as I'm aware. (As of Java 1.5 it works there, too.) However, it's very fragile - if you get any bit of it wrong, you could introduce very subtle race conditions. I usually prefer to initialize the singleton in the static initializer: public class Singleton { private static readonly Singleton instance = new Singleton(); public static Singleton Instance { get { return instance; } } private Singleton() { // Do stuff } } (Add a static constructor if you want a bit of extra laziness.) That pattern's easier to get right, and in most cases it does just as well. There's more detail on my C# singleton implementation page (also linked by Michael). As for the dangers - I'd say the biggest problem is that you lose testability. Probably not too bad for logging.
