[site]: stackoverflow
[post_id]: 1230754
[parent_id]: 1230413
[tags]: 
The processModel configuration element is specific to ASP.NET processes and is not applicable to other .NET processes. If you are running a 32-bit process on a 64-bit OS, your still subject to the process limit of a 32-bit process, which is 2GB. The practical limit is actually closer to 1.5 to 1.8GB, depending on your application characteristics - in other words, its very unlikely you will ever actually reach the 2GB process barrier. In order for your Windows service to take advantage of the full 4GB of process space your expecting you will need to: mark your process as LARGE_ADDRESS_AWARE. Believe this can be done using editbin.exe, but I've never done it! It also might open up a new can of worms... :) I'll see if I can't validate. add /3GB in boot.ini reboot server Also consider the memory allocation profile of your application. If you are allocating objects greater than 85K in size, then these objects will be allocated in the large object heap. The large object heap is swept, but not compacted like other heaps, meaning that you could be experiencing fragmentation which will eventually keep the .net memory manager from allocating a continuous block of memory to satisfy the request. You likely want to take snaps of the process and review what objects are in what heaps to get a better idea of whats going on within your process memory space. Also, check the size of the page file on the server. An inadequately sized page file can also cause problems considering its shared across all processes, though that tends to error with system exceptions with some verbiage around 'virtual memory'. Good luck! Z References: Memory Limits for Windows Releases Tess Ferrandez, .NET Debugging: Memory
