[site]: stackoverflow
[post_id]: 2503328
[parent_id]: 2427037
[tags]: 
It's hard to know what went wrong for you without seeing any of your code but here's an example of it being used correctly (from: http://msdn.microsoft.com/en-us/library/system.diagnostics.performancecountertype.aspx ) using System; using System.Collections; using System.Collections.Specialized; using System.Diagnostics; public class App { private static PerformanceCounter PC; private static PerformanceCounter BPC; public static void Main() { ArrayList samplesList = new ArrayList(); // If the category does not exist, create the category and exit. // Performance counters should not be created and immediately used. // There is a latency time to enable the counters, they should be created // prior to executing the application that uses the counters. // Execute this sample a second time to use the counters. if (SetupCategory()) return; CreateCounters(); CollectSamples(samplesList); CalculateResults(samplesList); } private static bool SetupCategory() { if (!PerformanceCounterCategory.Exists("RawFractionSampleCategory")) { CounterCreationDataCollection CCDC = new CounterCreationDataCollection(); // Add the counter. CounterCreationData rf = new CounterCreationData(); rf.CounterType = PerformanceCounterType.RawFraction; rf.CounterName = "RawFractionSample"; CCDC.Add(rf); // Add the base counter. CounterCreationData rfBase = new CounterCreationData(); rfBase.CounterType = PerformanceCounterType.RawBase; rfBase.CounterName = "RawFractionSampleBase"; CCDC.Add(rfBase); // Create the category. PerformanceCounterCategory.Create("RawFractionSampleCategory", "Demonstrates usage of the RawFraction performance counter type.", PerformanceCounterCategoryType.SingleInstance, CCDC); return (true); } else { Console.WriteLine("Category exists - RawFractionSampleCategory"); return (false); } } private static void CreateCounters() { // Create the counters. PC = new PerformanceCounter("RawFractionSampleCategory", "RawFractionSample", false); BPC = new PerformanceCounter("RawFractionSampleCategory", "RawFractionSampleBase", false); PC.RawValue = 0; BPC.RawValue = 0; } private static void CollectSamples(ArrayList samplesList) { Random r = new Random(DateTime.Now.Millisecond); // Initialize the performance counter. PC.NextSample(); // Loop for the samples. for (int j = 0; j = 9) PC.Increment(); // Copy out the next value every ten times around the loop. if ((j % 10) == 9) { Console.WriteLine("; NextValue() = " + PC.NextValue().ToString()); OutputSample(PC.NextSample()); samplesList.Add(PC.NextSample()); } else Console.WriteLine(); System.Threading.Thread.Sleep(50); } } private static void CalculateResults(ArrayList samplesList) { for (int i = 0; i
