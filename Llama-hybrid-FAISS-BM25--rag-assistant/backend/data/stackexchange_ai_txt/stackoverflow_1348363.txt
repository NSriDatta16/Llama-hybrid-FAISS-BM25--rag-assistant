[site]: stackoverflow
[post_id]: 1348363
[parent_id]: 1339747
[tags]: 
I assume you mean "XML in a sequential text file". Otherwise it's not really an either/or question: you could store XML in a relational database, you could export a relational database to XML, etc. That said ... XML is great for complex data streams with unpredictable data. Like a text file: at any point it could be meaningful to start a new chapter, include a footnote, switch to italics etc. You would not normally expect every chapter to have the same number of footnotes, or even that every text document would include footnotes. You would not expect every document to have six words of plain text followed by three words in italics followed by a footnote, etc. XML allows tags to occur in a very flexible way. Relational databases are great for data in consistent formats. For, say, a customer order, you would expect to have a customer name, address, item ordered, price, etc. An order with no customer specified is almost surely not processable. Many people today are using XML for all data storage and transfer. I think this is a big mistake. XML is not only very cumbersome for data that comes in predictable formats -- the so-called "bracket tax" -- but it also creates all sorts of opportunities for error. A fixed format like CSV provides no way to even say that you want two customer names on the same order. There's only one place to put it, there's no way to put it twice. But in XML you could include two "customer" tags or attributes. CSV gives no way to specify undefined attributes. There's no way that the customer name is in italics or the price is in kilograms. But in XML there could be any arbitrary set of attributes. Thus a program trying to process an XML stream for fixed data has to deal with all sorts of possible errors that would not even come up in other formats.
