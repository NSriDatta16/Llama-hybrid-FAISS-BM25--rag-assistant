[site]: stackoverflow
[post_id]: 516041
[parent_id]: 516007
[tags]: 
First, maps are guaranteed to be stable; i.e. the iterators are not invalidated by element insertion or deletion (except the element being deleted of course). However, stability of iterator does not guarantee stability of pointers! Although it usually happens that most implementations use pointers - at least at some level - to implement iterators (which means it is quite safe to assume your solution will work), what you should really store is the iterator itself . What you could do is create a small object like: struct StringPtrInMap { typedef std::map ::iterator iterator; StringPtrInMap(iterator i) : it(i) {} const string& operator*() const { return it->first; } const string* operator->() const { return &it->first; } iterator it; } And then store that instead of a string pointer.
