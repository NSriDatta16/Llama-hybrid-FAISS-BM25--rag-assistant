[site]: stackoverflow
[post_id]: 563437
[parent_id]: 560845
[tags]: 
C++ is not a typical object oriented language. Don't believe me? look at the STL, way more templates than objects. It's almost impossible to use Java/C# ways of writing object oriented code; it simply doesn't work. In Java/C# programming, there's alot of new ing, lots of utility objects that implement some single cohesive functionality. In C++, any object new ed must be deleted, but there's always the problem of who owns the object As a result, objects tend to be created on the stack But when you do that, you have to copy them around all the time if you're going to pass them around to other functions/objects, thus wasting a lot of performance that is said to be achieved with the unmanaged environment of C++ Upon realizing that, you have to think about other ways of organizing your code You might end up doing things the procedural way, or using metaprogramming idioms like smart pointers At this point, you've realized that OO in C++ cannot be used the same way as it is used in Java/C# Q.E.D. If you insist on doing oop with pointers, you'll usually have large (gigantic!) classes, with clearly defined ownership relationships between objects to avoid memory leaks. And then even if you do that, you're already too far from the Java/C# idiom of oop. Actually I made up the term "object-oriented", and I can tell you I did not have C++ in mind. -- Alan Kay (click the link, it's a video, the quote is at 10:33) Although from a purist point of view (e.g. Alan Kay), even Java and C# fall short of true oop
