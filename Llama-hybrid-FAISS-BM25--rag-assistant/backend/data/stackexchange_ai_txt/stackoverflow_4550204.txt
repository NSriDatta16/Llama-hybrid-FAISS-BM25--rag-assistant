[site]: stackoverflow
[post_id]: 4550204
[parent_id]: 4105036
[tags]: 
The exact technical details of sequence points can get hairy, yes. But following these guideline solves almost all the practical issues: If an expression modifies a value, there must be a sequence point between the modification and any other use of that value. If you're not sure whether two uses of a value are separated by a sequence point or not, break up your code into more statements. Here "modification" includes assignment operations on the left-hand value in = , += , etc., and also the ++x , x++ , --x , and x-- syntaxes. (It's usually these increment/decrement expressions where some people try to be clever and end up getting into trouble.) Luckily, there are sequence points in most of the "expected" places: At the end of every statement or declaration. At the beginning and end of every function call. At the built-in && and || operators. At the ? in a ternary expression. At the built-in , comma operator. (Most commonly seen in for conditions, e.g. for (a=0, b=0; a .) A comma which separates function arguments is not the comma operator and is not a sequence point. Overloaded operator&& , operator|| , and operator, do not cause sequence points. Potential surprises from that fact is one reason overloading them is usually discouraged.
