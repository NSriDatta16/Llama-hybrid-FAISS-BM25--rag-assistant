[site]: stackoverflow
[post_id]: 4340506
[parent_id]: 
[tags]: 
Cache Optimization of C++ Code

This might seem kind of open-ended, but I'm having trouble with optimizing a piece of C++ code for multiple processors and the cache. More important than multiple processors is the cache: I am iterating over 2 nested loops for(int i=0; i My arrays (array and otherArray) are of very large size. n is their size. Is there a way to make this more cache friendly? I already switched from using linked-lists, which are terrible for cache. I read somewhere that my access order [i][j] is also cache efficient. FWIW, this is part of a negative-weight cycle detection algorithm. I was thinking maybe since my arrays are so huge (they're arrays of integers btw), would it be better to break them up a bit so that they fit in the cache better? But I'm not sure if that's right or if it is, how to go about it. I've also started to use openmp. The only thing I've been doing is adding #pragma omp parallel for before the right for loops, and I'm getting decent utilization. I'd like to learn how to better use parallelism but beyond for loops in my code I am not sure what I can do. And all the time: I am trying to be cache friendly.
