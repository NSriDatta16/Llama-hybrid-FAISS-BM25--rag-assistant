[site]: stackoverflow
[post_id]: 1331447
[parent_id]: 1314576
[tags]: 
Complete answer is: Is there a way to determine/set the number of Bytes that this enum takes up? Yes: [Flags] public enum MyColor : byte // sets the underlying type. { Red = 1; Green = 2; Blue = 4; White = 8; Magenta = 16; ... (etc) } Also, what byte order would it end up in? Whatever it's compiled in, so for my case, x86 (little). Also, in order to call HostToNetwork, can i cast as a byte array and iterate? This is where it's tricky. I found out a few things: the enum's underlying type will expand (or be expanded by the ": long" you have to tag at the end of the declaration) and it must be a type. So it is actually impossible to do what I was really trying to do (an enum of 6 bytes). the serialization of this structure to an array of bytes (to be converted to network order, and sent over the wire) is incredibly not straightforward. The BitConverter class does the trick, but this is pretty helpful for dancing in between endianness: http://snipplr.com/view/15179/adapt-systembitconverter-to-handle-big-endian-network-byte-ordering-in-order-to-create-number-types-from-bytes-and-viceversa/
