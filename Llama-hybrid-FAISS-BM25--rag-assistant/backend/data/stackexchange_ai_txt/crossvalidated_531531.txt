[site]: crossvalidated
[post_id]: 531531
[parent_id]: 
[tags]: 
Reproduce results of bayesglm with stan_glm

As indicated in the title, I am trying to reproduce the results of the bayesglm function with the stan_glm . In principle, the the two functions can perform bayesian logistic regression, which is useful when data are linearly separated for example. The bayesglm function uses the EM algorithm to provide point estimates of the unknown parameter as described in Gelman et al. (2008) . It uses the t distribution with 1 dof as priors (also known as Cauchy prior). Continuous predictors are rescaled so that they have a standard deviation of 0.5. The scale of the t distribution prior is set to 10 for intercept and to 2.5 for the rescaled predictors. As a result, the scale for the default prior for a continuous predictor is: $$ \lambda = \text{prior.scale} / 2 * \text{sd}(x) $$ with prior.scale = 2.5. Here is a full example with data that are linearly separated and that yields a warning message when fitted with glm . library(arm) # bayesglm library(rstanarm) # stan_glm # simulated data set with linear separation dat Additional information on the priors used by bayesglm : # prior tmp It is easy to verify the scale of the predictor for the continuous predictor lambda The function stan_glm from the rstanarm package uses Markov Chain Monte-Carlo methods to obtain the full posterior distribution of the parameters. fit.sglm The coefficients corresponds to the median of the posterior distribution. It is also possible to obtain the mean of the posterior distribution bayestestR::point_estimate(fit.sglm, centrality = "mean")$Mean # [1] -21.928522 8.766372 The results are very different from these obtained with bayesglm . I selected this example with a small linearly separated data set to emphasize this differences. I expect to obtain slightly different values due to the difference in underlying algorithms but I would not expected such a large difference if the priors are the same and the point estimates are computed correctly. I have tried also to rescale the intercept but it did not help. I would like to know how to reproduce the results of bayeglm with stan_glm and, if it is not possible, why.
