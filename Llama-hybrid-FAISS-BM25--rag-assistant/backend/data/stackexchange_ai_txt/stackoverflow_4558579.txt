[site]: stackoverflow
[post_id]: 4558579
[parent_id]: 4558539
[tags]: 
If you are doing this for fun or a project, fine. If you are doing this for a real extensible application to be used by chemists then you will need to cater for > 100 elements, many reagents and products and fractional amounts. There are a lot of Open Source Java chemistry libraries and I'd be happy to introduce you. Do not re-invent the wheel. See http://www.blueobelisk.org To do this seriously requires a Bond/Electron matrix as developed by Ugi. Your best place is Ugi's own paper: www.iupac.org/publications/pac/1978/pdf/5011x1303.pdf see - e.g. p 1307. EDIT: This is overkill for the current problem! A simple matrix approach would include 2 coupled matrices R (reactants) and P (products) with nelem (say 100) columns for known elements and an indefinite number of rows (nR, nP) as many reactants and products. The matrices would therefore generally not be of equal dimensions. reactant[nR][nelem] and product [nP][nelem]. There would also be two column vectors for the multipliers nreact[nR] and nprod[nP]. Note that in general chemical formulae and multipliers are commonly integral but need not be (may compounds do not have simple integer ratios of elements). I would use my own CMLFormula and CMLReaction Java classed (see http://www.xml-cml.org ) to tackle this. You are welcome to start there - it will make life easier
