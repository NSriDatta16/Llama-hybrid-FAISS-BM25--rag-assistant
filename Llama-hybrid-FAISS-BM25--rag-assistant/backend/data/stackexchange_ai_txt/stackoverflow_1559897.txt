[site]: stackoverflow
[post_id]: 1559897
[parent_id]: 1559255
[tags]: 
It's easier to hurt yourself. As others have stated, it raises an exception in the code, which can occur at any point. This might be fine if you expect this and have coded in a way that elegantly handles this exception at any point, but some people don't: Monitor.Enter(obj); // some code - if exception is raised here, then the lock isn't released Monitor.Exit(obj) IDisposable someCriticalResource = GetResource(); // some code - if exception is raised here, then the object isn't disposed someCriticalResource.Dispose(); Additionally, if you're working with many people on a team, unless you have good code reviews, you cannot guarantee the quality of the code you'll be working with. Hence it is a good idea to preach the gospel of "no Thread.Abort()" than it is to get people to remember to write code that is robust against exceptions occurring anywhere within that code.
