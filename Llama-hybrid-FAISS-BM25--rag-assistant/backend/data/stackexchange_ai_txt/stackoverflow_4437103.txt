[site]: stackoverflow
[post_id]: 4437103
[parent_id]: 4437042
[tags]: 
The default allocator, std::allocator<> , will handle all allocations made by std::vector<> (and others). It will make new allocations from the heap each time a new allocation is needed. By providing a custom allocator, you can for instance allocate a big chunk of memory up front and then slice it up and hand out smaller pieces when separate allocations are needed. This will increase the allocation speed dramatically, which is good for example in games, at the cost of increased complexity as compared to the default allocator. Some std type implementations have internal stack-based storage for small amounts of data. For instance, std::basic_string<> might use what is called a small string optimization , where only strings longer than some fixed length, say 16 characters (just an example!), gets an allocation from the allocator, otherwise an internal array is used.
