[site]: stackoverflow
[post_id]: 2071758
[parent_id]: 2071646
[tags]: 
It is usually best to draw out your relationships so it is easier to understand how the 2 entities relate. This will let you easily say this is a one-to-one, many-to-one, one-to-many, or many-to-many, etc. That being said once you figure that out, it is trivial to setup. If you were using Java or .Net, you could use Hibernate/NHibernate to automatically build the tables for you by specifying the relationships. Here is how I would design the tables from what you outline: (Keep in mind, this is following the Java naming schema) MemberType id (int11, auto increment, primary key) name (varchar31, unique) One note about MemberType, if you're using Java and you will not dynamically add/remove member types, you should use an enum here. Member id (int11, auto increment, primary key) memberType_id (int11, on update cascade, on delete cascade) Organization id (int11, auto increment, primary key) name (varchar31, unique) -- Depends on how you want this structured (I would design it as a many-to-many relationship MemberOrganization member_id (int11, on update cascade, on delete cascade, this links to the member id) organization_id (int11, on update cascade, on delete cascade, this links to the organization id) To get a list of all the members of a particular organization ... SELECT * FROM Organization o INNER JOIN MemberOrganization mo ON mo.organization_id = o.id INNER JOIN Member m ON m.id = mo.member_id WHERE o.name = 'StackOverFlow.com' After looking at your question again, I think you're looking for a different answer. Walter
