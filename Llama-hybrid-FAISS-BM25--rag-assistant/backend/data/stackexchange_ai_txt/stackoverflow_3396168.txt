[site]: stackoverflow
[post_id]: 3396168
[parent_id]: 3393589
[tags]: 
I think the main problem (as I think Mauricio Scheffer's comment is alluding to) is that there can be multiple instances of the HttpApplication object, and because of this there can be multiple copies of the IWindsorContainer _container and WebSessionStorage _webSessionStorage created, when (if I understand the code correctly) you only want a single instance. Also bare in mind your HttpApplication's Init() method can also get called multiple times because of this. This is basically a fundamental misunderstanding of the HttpApplication's lifecycle. When incoming HTTP requests come into the application, the ASP.NET worker process will fire up multiple HttpApplication instances to deal with those requests, and once done will put them into a pool, ready to be used again (it won't destroy them). This is similar to database connection pooling. But fundamentally you have to be aware that the HttpApplication IS NOT a Singleton , there can be multiple instances. This is quite a common mistake and has tripped me up as well, which is why I wrote a blog post on it . Try setting your IWindsorContainer and WebSessionStorage as static. EDIT: OK, more detailed answer having studied the code more carefully. See your Application_Start event, in it you're initialising an instance of private IWindsorContainer _container; ...but because it's not a static variable, it will only get initialised for the very first HttpApplication object that is instantiated. As additional HttpApplication objects get instantiated, their copies of the _container variable will be NULL. Why? Because the _container variable is only initialsed in the Application_Start event, which has already been fired. So _container will be set to an object for the first HttpApplication instance, but will be NULL for each HttpApplication instance after that. Hope this makes sense.
