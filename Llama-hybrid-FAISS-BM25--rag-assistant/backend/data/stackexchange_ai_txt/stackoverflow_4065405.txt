[site]: stackoverflow
[post_id]: 4065405
[parent_id]: 4063592
[tags]: 
Consider using ExceptT from Control.Monad.Trans.Except (instead of using Either). import Control.Monad.State import Control.Monad.Trans.Except import Control.Monad.Identity data MyState = S type MyMonadT e m a = StateT MyState (ExceptT e m) a runMyMonadT :: (Monad m) => MyMonadT e m a -> MyState -> m (Either e a) runMyMonadT m = runExceptT . evalStateT m type MyMonad e a = MyMonadT e Identity a runMyMonad m = runIdentity . runMyMonadT m If you aren't comfortable with Monads and Monad transformers then I'd do that first ! They are a huge help and programmer productivity performance win.
