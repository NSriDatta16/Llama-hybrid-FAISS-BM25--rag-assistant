[site]: stackoverflow
[post_id]: 2957037
[parent_id]: 2956796
[tags]: 
Use a hash table for copying a general graph: h = new HashTable() def copyAll(node): if h has key node: return h[node] copy = node.copy() h[node] = copy for each successor of node: copy.addSuccessor(copy(successor)) return copy Your particular graph seems to be acyclic with special structure so you don't need a hash table (you can use an array instead) and the approach you are describing seems to be the best way to copy it. If you are writing a neural network you should just use vectors and matrices of floats to represent the neurons. It may seem less elegant now, but trust me it's much more elegant (and several orders of magnitude faster too). Consider a neural network with 2 layers, the input (n nodes) and the output (m nodes). Now suppose we have a vector of floats called in that represents the values of the input layer, and we want to compute a vector called out that represents the values of the output layer. The neural network itself consists of an n by m matrix M of floats. M[i][j] represents how strong the connection between input node i and output node j is. The beauty is that evaluating a network is the same as matrix multiplication followed by applying the activation function to every element of the result vector: out = f(M*in) Where f is the activation function and where * is matrix multiplication. This is neural network evaluation in 1 line! You cannot get it this elegant with OO design of a neural network.
