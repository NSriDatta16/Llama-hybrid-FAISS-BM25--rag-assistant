[site]: stackoverflow
[post_id]: 5342947
[parent_id]: 5326525
[tags]: 
I had a similar case like these. My suggestion is, that you have 2 "base classes" or "super classes". The first class, very general class, represents the "conceptual root" for all containers classes, almost not methods, similar to an interface, and should be like: containers.hpp class Container { protected: int GetValue(); void SetValue(int newValue); size_t GetSize(); void Resize(size_t); }; The second class, starts to be a little less conceptual and more "real world": mcontainers.hpp #include "containers.hpp"; class MethodContainer: public Container { protected: void Replace(const std::size_t Start, const std::size_t End, const T Value); void Replace(const std::size_t Start, const std::size_t End, const MyClass Other); void Insert(const std::size_t Index, const T Value); void Insert(const std::size_t Index, const MyClass Other); void Delete(const std::size_t Index); void Delete(const std::size_t Start, const std::size_t End); } And, finally, some classes that are concrete: stacks.hpp #include "containers.hpp"; #include "mcontainers.hpp"; #define pointer void* class Stack: public MethodContainer { public: // these methods use "mcontainer::Insert", "mcontainer::Replace", etc void Push(pointer Item); void Pop(); pointer Extract(); } AS @Chris mentioned, there are several libraries for doing this, but there is always an exception to the rule, and you may want to "reinvent the wheel" if you need it. I had an application, with its set of libraries, that included some containers / collections. It was made in another progr. langr. and need it to migrate it to C++. Altought, I also check the c++ standard libraries, I ended migrating my libraries to C++, because I had several libraries calling my container libraries, and need it to do it fast. When using "base classes", you may want to "protect" its members, and "take it to the public", in child classes. I usually don't make "private" fields or methods, unless necessarily. Summary: Some very common complex stuff (like memory allocation or storage) may be done in your base classes, but, most of those complexity should be leave it to child classes.
