[site]: datascience
[post_id]: 69683
[parent_id]: 
[tags]: 
LogisticRegression NotImplementedError on fit function

im a newbie in data science or machine learning. i try to implement code from here , but i got error when try to call fit function here is the code: classification_data = dataset.drop([10], axis=1).values classification_label = dataset[10].values class LogisticRegression: def __init__(self, lr=0.01, num_iter=100000): self.lr = lr self.num_iter = num_iter self.weights = None self.bias = None def fit(self, X, y): '''Build a logistic regression classifier from the training set (X, y)''' # YOUR CODE HERE n_samples, n_features = X.shape # init parameters self.weights = np.zeros(n_features) self.bias = 0 # gradient descent for _ in range(self.num_iter): # approximate y with linear combination of weights and x, plus bias linear_model = np.dot(X, self.weights) + self.bias # apply sigmoid function y_predicted = self.predict_proba(linear_model) # compute gradients dw = (1 / n_samples) * np.dot(X.T, (y_predicted - y)) db = (1 / n_samples) * np.sum(y_predicted - y) # update parameters self.weights -= self.lr * dw self.bias -= self.lr * db raise NotImplementedError() def predict_proba(self, X): '''Predict class probabilities of the input samples X''' '''hint: you can put or call your sigmoid function here to predict probablity of input sample X''' # YOUR CODE HERE return 1 / (1 + np.exp(-X)) raise NotImplementedError() def predict(self, X, threshold=0.5): # default threshold adalah 0.5 '''Predict class value for X''' '''hint: you can use predict_proba function to classify based on given threshold''' # YOUR CODE HERE linear_model = np.dot(X, self.weights) + self.bias y_predicted = self.predict_proba(linear_model) y_predicted_cls = [1 if i > threshold else 0 for i in y_predicted] return np.array(y_predicted_cls) raise NotImplementedError() then i tried to run model = LogisticRegression(lr=0.1, num_iter=300000) %time model.fit(classification_data, classification_label) but i got error: 31 self.weights -= self.lr * dw 32 self.bias -= self.lr * db ---> 33 raise NotImplementedError() 34 35 def predict_proba(self, X): NotImplementedError apparently, it raised the NotImplementedError() on the fit function.
