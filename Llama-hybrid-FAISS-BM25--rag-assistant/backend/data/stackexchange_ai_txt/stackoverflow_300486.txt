[site]: stackoverflow
[post_id]: 300486
[parent_id]: 299296
[tags]: 
Actually metrics are just one feature of NDepend, did you try to use VisualNDepend that lets you analyze your project much more in depth than the report? By reading your comment, I am almost sure you didn't play with NDepend UI (standalone or integrated in Visual Studio) which is the best way to filter data about your code base. I am one of the developers of NDepend and we use it a lot to analyze our own code. Basically we write our own quality rules with Code Rules over LINQ Queries (CQLinq) . These rules automatically make sure that we don't have regression on our design. Here you'll find the list of around 200 default code rules . Here are some unique features of NDepend and not related to code metrics: Write CQLinq rules to make sure we don't have architectural flaws, such as dependency cycles between our components , UI using directly the DB or DB entangled with the business objects. Make sure we don't have problem with code coverage by tests (like we make sure with a CQLinq rule that if a class is supposed to be 100% covered, it will remain 100% covered in the future ) Enforce side-effects-free code ( immutable class /pure methods) Use the ability to compare 2 analysis to code review changes since the last release, before doing a new release. More specifically, I enjoy using NDepend to know which method has been added and refactored since the last release, and is not 100% covered by tests . Having an optimal encapsulation for all our members and types (like knowing which internal methods can be declared as private ). This is also related to dead-code detection that NDepend also supports. For a complete list of features if NDepend, see here .
