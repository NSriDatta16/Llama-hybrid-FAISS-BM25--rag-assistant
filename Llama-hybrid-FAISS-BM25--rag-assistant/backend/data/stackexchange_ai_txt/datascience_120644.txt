[site]: datascience
[post_id]: 120644
[parent_id]: 120618
[tags]: 
One way to approach the problem would be to first classify the time series according to whether the event did or did not happen. Then for those where the event did happen, run a regression to predict when it happened. While you can use standard classification and regression techniques for this, as you point out, these ignore the temporal dimension of the time series. There are many classifiers designed for classifying time series. The classic one is a one nearest neighbour classifier that uses dynamic time warping (DTW) as the distance measure (1-NN DTW). If you're using python, both the sktime and tslearn packages include implementations of 1-NN DTW (as well as other time series classifiers). Some more recent, state-of-the-art classifiers include HIVE-COTE 2.0 and MultiRocket . There's been less research into non-forecasting regression (sometimes called extrinsic regression) for time series, however many time series classifiers can be fairly easily adapted for extrinsic regression. For instance, using 1-NN DTW, you can simply replace the 1-NN classifier with a 1-NN regressor. Tan et al.'s paper Time series extrinsic regression benchmarks a number of time series extrinsic regression methods. If you are interested in deep learning methods, you might find Foumani et al.'s survey paper Deep Learning for Time Series Classification and Extrinsic Regression: A Current Survey useful (disclaimer: I'm a co-author of this paper).
