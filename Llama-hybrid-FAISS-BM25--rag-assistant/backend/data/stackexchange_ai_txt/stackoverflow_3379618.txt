[site]: stackoverflow
[post_id]: 3379618
[parent_id]: 3350628
[tags]: 
There are more reasons than just these, but some major ones are: O&M costs: Most "engineers" don't give a rats A about this because they are development-centric, but the fact is that O&M is by far the leading cost of running IT systems. With a VM approach like Flex (or Silverlight, or JavaFX) you don't have to worry about updating libraries, testing, applying fixes, and so on every time a new browser comes out . Using legacy technologies which are harder to keep running day-to-day directly hurts your clients' bottom line. Performance: Flash (Flex) is JIT compiled, (wouldn't be surprised if SL is too), and Java is as well. Interpreted JavaScript dependent libraries such as GWT simply cannot hold a candle to the performance you get out of a compiled VM client--it's not even a close comparison. "AJAX" (esp when using XML) is not "fast". (Just look pay attention to how slow Gmail typically loads--a very simple AJAX-enabled script.) The proof is in the benchmarks. Consistency/Reliability: Everyone knows that when you write anything using JavaScript or HTML, it has to be tested in every browser (including some older versions if you really want to be safe). No such problem when you're targeting a VM platform. With AJAX: worry whenever a new browser or version of a browser is released. If there's problems, it'll create work for you. Richer components and a better user experience: This is one of Adobe's big selling points, but it's true. While some of the stuff that has been done purely with browser scripting (JavaScript) is impressive, Flex or Silverlight components are just better. It's also easy to create your own custom components when you don't need to write (and maintain!) cross-browser JavaScript magic. Flex specific, but worthy of mention--AMF: This is the Flex Data Services binary protocol which can be used to talk to servers. Benchmarks (ask Google) have demonstrated this protocol to be much faster and more bandwidth efficient than protocols used by AJAX frameworks. In today's world where networks are becoming the major bottleneck (if not clearly already), this is quite a big win. It's a sensitive topic for many. Most AJAX/DHTML/JavaScript 'engineers' or whatever they call themselves will howl and throw feces at the mere suggestion that this 1990's technology they have spent years becoming an expert in is outdated and flawed (quite frankly they have a lot to lose). But based on pure technical merit, even HTML5 is a counter productive waste of time compared to any mature VM based solution. I'm sure some will show up shortly to defend their cult of denial by voting this down. But it's hard holding back the future. AJAX/DHTML frameworks all rely essentially on legacy hacks and complex, slow, fragile, constantly maintained libraries to keep them running reasonably well in multiple browsers. HTML5, when it's finally "complete" in 2022 (!!!) won't even be caught up to Silverlight 2 in terms of features--never mind the huge amount of stuff Flex will have out there by then. Basically the AJAX stuff is a maintenance quagmire and a fragile development environment that you can completely avoid by using a VM solution like Flex, Silverlight, or JavaFX.
