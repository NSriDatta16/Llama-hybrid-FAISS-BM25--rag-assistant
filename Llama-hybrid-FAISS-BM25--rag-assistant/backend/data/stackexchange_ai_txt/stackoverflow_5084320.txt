[site]: stackoverflow
[post_id]: 5084320
[parent_id]: 
[tags]: 
Is validates_presence_of the preferred technique to require a has_many relationship

Basically: My model requires at least one instance of an associated model be present. Should I use validates_presence_of to assert this validation, or should I write some custom validation code? Here are the essentials of my model: class Event "can't be empty" end (I assume things would be the same if I used has_many in place of has_and_belongs_to_many .) Instead of the validates_presence_of line I could do this: def validate errors.add(:channels, "can't be empty") if channels.size I replaced the latter with the former in the Rails app I'm working on and am wondering if there might be any problems. So to be more sure, I wrote the following rspec coverage, and both implementations respond the same: describe Event do before do @net = Factory.create(:network) @net_config = Factory.create(:network_config, :network => @net) end it "must have a channel" do e = Factory.build(:event, :network => @net, :channels => []) e.should have(1).error_on(:channels) end end That is, if I remove the validation code, the above spec fails; if I put in either version of the validation code, the above spec passes. So I might assume that my new implementation is ok. But I've read that validates_presence triggers a database load which, in turn, would wipe out any in-memory objects constructed from nested attributes. The proxy_target method , on the other hand, will return the in-memory objects without triggering a load. Some links on proxy_target : http://rubydoc.info/docs/rails/ActiveRecord/Associations/AssociationProxy http://withoutscope.com/2008/8/22/don-t-use-proxy_target-in-ar-association-extensions In my particular case I'm not using ActiveRecord::Relation , but I wonder if I need to be cautious about this.
