[site]: stackoverflow
[post_id]: 1306248
[parent_id]: 1305488
[tags]: 
Okay, I found an alternative (but not elegant) solution. I use an ObjectDataSource instead of a LinqDataSource. I have then defined an class public class RuleInstanceProjection { public RuleInstanceProjection(){} // Bind properties from the LINQ object. public RuleInstanceProjection(RuleInstance instance) { ... } public int RuleInstanceId {get; set;} public string Rule_Name {get;set;} ... } The object above takes a RuleInstance as constructor, and updates its own properties with all the values that I need in the FormView. I then configure the ObjectDataSource to use another custom class, RuleInstanceProjectionDS, as data source. This class handles updates and inserts of my custom RuleInstanceProjection class: public class RuleInstanceProjectionDS { public RuleInstanceProjectionDS() { } public RuleInstanceProjection GetRuleInstance(int ruleInstanceId) { /* Retrieve the RuleInstance, and instantiate a RuleInstanceProjection object */ } public void SaveInstanceProjection(InstanceProjection projection) { /* Map fields back to the LINQ objects and submit. */ } } I can therefore handle all mappings in these two classes. Now, I only have to decide if this is actually better than updating the GUI controls directly... I must say it isn't the most elegant solution, and I hope there will be a better data binding framework in later versions of ASP.NET. The current one only seems to handle the most trivial cases :(.
