[site]: datascience
[post_id]: 60953
[parent_id]: 60952
[tags]: 
The solutions seems to be fairly straight forward. The only thing that is missing in your pivot is, what are the columns you want to put on top to access the pivot. In your case instead of using mypivot = pd.pivot_table(dftest, values=['Sales'], index=['State', 'City']) which produces Sales State City CT Hartford 1500 KY Lexington 1500 Louisville 3000 ME Portland 2000 TX Dallas 2300 you can write mypivot = pd.pivot_table(dftest, values=['Sales'], index=['State', 'City'], columns=['Product Type']) which gives you Sales Product Type Consumer Educational Industrial Scientific State City CT Hartford NaN 1500.0 NaN NaN KY Lexington 2000.0 NaN 1000.0 NaN Louisville 3000.0 NaN NaN NaN ME Portland NaN 2000.0 NaN NaN TX Dallas NaN NaN NaN 2300.0 You can now use .fillna method on chaining to replace non-zero values in your pivot. Hope this helps. Edit : If you want to take only a specific set of columns, I can seem to have a not so elegant but workable solution like mypivot['Sales'][['Consumer', 'Educational']] Which unfortunately removes the higher column Sales from picture producing something like Product Type Consumer Educational State City CT Hartford 0.0 1500.0 KY Lexington 2000.0 0.0 Louisville 3000.0 0.0 ME Portland 0.0 2000.0 TX Dallas 0.0 0.0 If I can think of anything, I will add later.
