[site]: stackoverflow
[post_id]: 1563879
[parent_id]: 1563872
[tags]: 
Neither - provide a centralized service which can decide which mechanism to use, then the application doesn't care, and you are free to choose hardcoding, sliding window or database mechanisms. To expand, typically, I would do something like this: Define IPopulatableYear interface which has a single AddYear method taking an int and constructing an appropriate ListItem or whatever. Make MyYearListBox inherit from regular ListBox implement IPopulatableYear (this works for winForms or WebForms) Create static method or singleton or method in your DAL or whatever. Like this: PopulateYears(IPopulatableYear pl) { // Very simple implementation - change at will for (int lp = 2009 ; lp or PopulateYears(IPopulatableYear pl) { // A DB implementation SQLDataReader dr = DAL.YearSet() ; // Your choice of mechanism here while ( dr.Read() ) { pl.Add(dr[YEAR]); } } or PopulateYears(IPopulatableYear pl) { // A DB limits implementation with different ranges defined in database by key - key determined by control itself - IPopulatableYear needs to implement a .YearSetKey property SQLDataReader dr = DAL.YearLimits(pl.YearSetKey) ; // Your choice of mechanism here for ( int lp = dr[YEAR_MIN] ; lp The mechanism is now centrally managed. Use MyYearListBox on your forms and call PopulateYears() on it. If your forms are smart, they can detect all MyYearListBox instances and call it, so you no longer have any new code - just drag it on.
