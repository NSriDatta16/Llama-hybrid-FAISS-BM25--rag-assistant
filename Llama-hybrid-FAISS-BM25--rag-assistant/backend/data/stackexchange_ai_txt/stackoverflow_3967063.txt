[site]: stackoverflow
[post_id]: 3967063
[parent_id]: 3966685
[tags]: 
I think you shouldn't use AJAX for that, since you want the user to get the XML in response and be able to save it. It should work as a form submit button or link. The form would send a POST request with the XML (I assume the XML is already in the document somewhere?) to your xmlsave method. Normally this would render the response as application/xml and the browser would probably display the contents (default configuration). To avoid it, you could set content type to application/octet-stream - this way the browser would prompt to save the file and the page wouldn't be refreshed (so no AJAX required). To "cut/paste" fragments of the incoming XML into the result, you'd probably have to parse the incoming data and then pass the resulting DOM model or its fragment into a template of the new XML. You can use hpricot or nokogiri to parse and then render xmlsave.xml.erb as a result. Here's a rough idea how it could work: xmlsave.html.erb: :xml) do %> test content '%> model_controller.rb: def xmlsave input = Hpricot.XML(params[:data]) respond_to do |format| format.html format.xml {render :content_type => 'application/octet-stream', :locals => { :input => input } } end end xmlsave.xml.erb: NOTE: this code is using Rails 3 templates
