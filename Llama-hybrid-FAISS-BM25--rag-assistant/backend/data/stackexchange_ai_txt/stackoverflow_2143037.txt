[site]: stackoverflow
[post_id]: 2143037
[parent_id]: 
[tags]: 
WPF Toolkit DataGrid: how to get ColumnHeader width to be the same as GridColumn width

For my WPF Toolkit DataGrid I use the following custom column header style: The header's DataContext is set in code and the Name and Data string properties are displayed correctly using the initial width of the DataGrid like this: --------------- |Name | | Data| --------------- However, when I resize the column, the header display does not reflow, but instead remains the same: -------------------- |Name | | Data | -------------------- where as I expected it to looks like this: -------------------- |Name | | Data| -------------------- What do I need to do to get the desired behavior above? Similarly, the header content doesn't seem to stretch in the vertical direction either. Update: Adding Bottom to the Style seems to properly align the header to the bottom. Unfortunately, setting the HorizontalAlignment property in the fashion to 'Stretch' doesn't seem to do what I am looking for. Details for Repro: Below are code snippets that demonstrate the behavior. Window1.xaml: | and the code-behind in Window1.xaml.cs using System; using System.Collections.Generic; using System.Windows; using System.Windows.Data; using Microsoft.Windows.Controls; using SLModel; namespace GridTest { /// /// Interaction logic for Window1.xaml /// public partial class Window1 : Window { public Window1() { InitializeComponent(); this.Loaded += new RoutedEventHandler(Window1_Loaded); } void Window1_Loaded(object sender, RoutedEventArgs e) { Inputs = new List (); Outputs = new List (); Input i1 = new Input() { Name = "I 1", Data = "data 1" }; Input i2 = new Input() { Name = "I 2", Data = "data 2" }; Input i3 = new Input() { Name = "I 3", Data = "data 3" }; Inputs.Add(i1); Inputs.Add(i2); Output o1 = new Output() { Name = "O 1", Data = "data 1" }; Output o2 = new Output() { Name = "O 2", Data = "data 2" }; Output o3 = new Output() { Name = "O 3", Data = "data 3" }; Outputs.Add(o1); Outputs.Add(o2); Outputs.Add(o3); Relationship r1 = new Relationship() { Formula = "F1" }; Relationship r2 = new Relationship() { Formula = "F2" }; Relationship r3 = new Relationship() { Formula = "F3" }; Relationship r4 = new Relationship() { Formula = "F4" }; Relationship r5 = new Relationship() { Formula = "F5" }; Relationship r6 = new Relationship() { Formula = "F6" }; i1.Relationships.Add(r1); i1.Relationships.Add(r2); i2.Relationships.Add(r3); i2.Relationships.Add(r4); i3.Relationships.Add(r5); i3.Relationships.Add(r6); CreateColumn(o1, 0); CreateColumn(o2, 1); CreateColumn(o3, 2); dg.Items.Add(i1); dg.Items.Add(i2); dg.Items.Add(i3); dg.ColumnWidth = DataGridLength.SizeToHeader; } private void CreateColumn(Output output, int index) { Binding textBinding = new Binding(); textBinding.Path = new PropertyPath(string.Format("Relationships[{0}].Formula", index)); textBinding.Mode = BindingMode.TwoWay; DataGridTextColumn tc = new DataGridTextColumn(); tc.Binding = textBinding; dg.Columns.Add(tc); tc.Header = output; } private List Outputs { get; set; } private List Inputs { get; set; } } } With simple classes Input, Output, and Relationship as such: public class Input { public Input() { Relationships = new ObservableCollection(); } public string Name { get; set; } public string Data { get; set; } public ObservableCollection Relationships { get; set; } } public class Output { public Output() { } public string Name { get; set; } public string Data { get; set; } } public class Relationship { public Relationship() { } public string Formula { get; set; } } Repro steps: Launch application Observe column headers 'O 1data 1', 'O 2data 2', and 'O 3data 3' Make first column wider by dragging the column separator to the right Observe that the distance between the 'Name' TextBlock (in this case 'O 1') and the 'Data' TextBlock ('data 1') is not changing, i.e., the 'Data' TextBlock is not 'docked' to the right edge of the column header.
