[site]: stackoverflow
[post_id]: 5618262
[parent_id]: 
[tags]: 
How to skip well-formed for java DOM parser

I know this has been asked multiple times here, but I've a different issue dealing with it. In my case, the app receives a non well-formed dom structure passed as a string. Here's a sample : http://www.youtube.com/watch?v=U_QLu_Twd0g&feature=abcde_gdata As you can see, the content is not well-formed. Now, if I try to parse using a normal SAX or DOM parse it'll throw an exception which is understood. org.xml.sax.SAXParseException: The reference to entity "feature" must end with the ';' delimiter. As per the requirement, I need to read this document,add few additional div tags and send the content back as a string. This works great by using a DOM parser as I can read through the input structure and add additional tags at their required position. I tried using tools like JTidy to do a pre-processing and then parse, but that results in converting the document to a fully-blown html, which I don't want. Here's a sample code : StringWriter writer = new StringWriter(); Tidy tidy = new Tidy(); // obtain a new Tidy instance tidy.setXHTML(true); tidy.parse(new ByteArrayInputStream(content.getBytes()), writer); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder(); Document doc = db.parse(new ByteArrayInputStream(writer.toString().getBytes())); // Traverse thru the content and add new tags .... Transformer transformer = TransformerFactory.newInstance().newTransformer(); transformer.setOutputProperty(OutputKeys.INDENT, "yes"); transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes"); StreamResult result = new StreamResult(new StringWriter()); DOMSource source = new DOMSource(doc); transformer.transform(source, result); This completely converts the input to a well-formed html document. It then becomes hard to remove html tags manually. The other option I tried was to use SAX2DOM, which too creates a HTML doc. Here's a sample code . ByteArrayInputStream is = new ByteArrayInputStream(content.getBytes()); Parser p = new Parser(); p.setFeature(IContentExtractionConstant.SAX_NAMESPACE,true); SAX2DOM sax2dom = new SAX2DOM(); p.setContentHandler(sax2dom); p.parse(new InputSource(is)); Document doc = (Document)sax2dom.getDOM(); I'll appreciate if someone can share their ideas. Thanks
