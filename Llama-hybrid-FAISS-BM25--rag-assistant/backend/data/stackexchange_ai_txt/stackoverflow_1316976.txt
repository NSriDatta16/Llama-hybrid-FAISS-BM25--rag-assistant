[site]: stackoverflow
[post_id]: 1316976
[parent_id]: 1080859
[tags]: 
JavaScriptMVC is an excellent choice for organizing and developing a large scale JS application. The architecture design is very pragmatic. There are 4 things you will ever do with JavaScript: Respond to an event Request Data / Manipulate Services (Ajax) Add domain specific information to the ajax response. Update the DOM JMVC splits these into the Model, View, Controller pattern. First, and probably the most important advantage, is the Controller. Controllers use event delegation, so instead of attaching events, you simply create rules for your page. They also use the name of the Controller to limit the scope of what the controller works on. This makes your code deterministic, meaning if you see an event happen in a '#todos' element you know there has to be a todos controller. $.Controller.extend('TodosController',{ 'click' : function(el, ev){ ... }, '.delete mouseover': function(el, ev){ ...} '.drag draginit' : function(el, ev, drag){ ...} }) Next comes the model. JMVC provides a powerful Class and basic model that lets you quickly organize Ajax functionality (#2) and wrap the data with domain specific functionality (#3). When complete, you can use models from your controller like: Todo.findAll({after: new Date()}, myCallbackFunction); Finally, once your todos come back, you have to display them (#4). This is where you use JMVC's view. '.show click' : function(el, ev){ Todo.findAll({after: new Date()}, this.callback('list')); }, list : function(todos){ $('#todos').html( this.view(todos)); } In 'views/todos/list.ejs' JMVC provides a lot more than architecture. It helps you in ever part of the development cycle with: Code generators Integrated Browser, Selenium, and Rhino Testing Documentation Script compression Error reporting
