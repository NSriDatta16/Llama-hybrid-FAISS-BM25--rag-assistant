[site]: stackoverflow
[post_id]: 467042
[parent_id]: 466972
[tags]: 
Use cell arrays. This has an advantage over 3D arrays in that it does not require a contiguous memory space to store all the matrices. In fact, each matrix can be stored in a different space in memory, which will save you from Out-of-Memory errors if your free memory is fragmented. Here is a sample function to create your matrices in a cell array: function result = createArrays(nArrays, arraySize) result = cell(1, nArrays); for i = 1 : nArrays result{i} = zeros(arraySize); end end To use it: myArray = createArrays(requiredNumberOfArrays, [500 800]); And to access your elements: myArray{1}(2,3) = 10; If you can't know the number of matrices in advance, you could simply use MATLAB's dynamic indexing to make the array as large as you need. The performance overhead will be proportional to the size of the cell array, and is not affected by the size of the matrices themselves. For example: myArray{1} = zeros(500, 800); if twoRequired, myArray{2} = zeros(500, 800); end
