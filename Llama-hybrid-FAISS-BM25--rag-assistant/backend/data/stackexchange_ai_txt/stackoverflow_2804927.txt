[site]: stackoverflow
[post_id]: 2804927
[parent_id]: 2804561
[tags]: 
Well, sqlalchemy doesn't, by default. Consider the following self-contained example code. from sqlalchemy import Column, Integer, Unicode, create_engine from sqlalchemy.orm import create_session from sqlalchemy.ext.declarative import declarative_base e = create_engine('sqlite://') Base = declarative_base(bind=e) class User(Base): __tablename__ = 'users' id = Column(Integer, primary_key=True) name = Column(Unicode(50)) # create the empty table and a session Base.metadata.create_all() s = create_session(bind=e, autoflush=False, autocommit=False) # assert the table is empty assert s.query(User).all() == [] # create a new User instance but don't save it to database: u = User() u.name = 'siebert' # I could run s.add(u) here but I won't s.flush() s.commit() # assert the table is still empty assert s.query(User).all() == [] So I'm not sure what's implicity adding your instances to the session. Normally you have to manually call s.add(u) to make it go to the session. I'm not familiar with elixir so perhaps this is some elixir trickery... Maybe you could remove it from the session, by using session.expunge() .
