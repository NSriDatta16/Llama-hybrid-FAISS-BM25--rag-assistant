[site]: crossvalidated
[post_id]: 203168
[parent_id]: 203142
[tags]: 
He might refer to a situation like the following one, where I generate a trajectory of length $n=20$ for an $AR(1)$ process, but fit a complex and overfitting $ARIMA(8,9)$ model that has almost as many parameters as data points, which creates NAs. > n arima.sim(list(ar=.5),n) Time Series: Start = 1 End = 20 Frequency = 1 [1] 1.31055599 1.00629714 1.77500865 1.33925176 1.53007733 -1.77301333 -2.05737682 -3.64929708 -2.50377420 0.04239328 0.60926584 [12] 0.65004994 -1.90275516 -0.71533665 1.68576490 0.15163504 0.10553876 -0.17432651 0.57484940 0.21879489 > arima(x,c(8,0,9)) Call: arima(x = x, order = c(8, 0, 9)) Coefficients: ar1 ar2 ar3 ar4 ar5 ar6 ar7 ar8 ma1 ma2 ma3 ma4 ma5 ma6 ma7 ma8 -0.1135 0.0412 0.2174 0.5372 -0.1091 -0.3093 0.0316 -0.5688 0.1141 -0.0150 -0.2202 -0.5838 0.1465 0.3096 -0.0186 0.5180 s.e. NaN 0.1695 NaN NaN 0.1977 0.1391 NaN 0.1938 NaN 0.1741 NaN NaN 0.2031 0.1554 NaN 0.1996 ma9 intercept -0.0326 1.0031 s.e. 0.0213 0.0308 sigma^2 estimated as 1.036: log likelihood = -1436.78, aic = 2911.55 Warning messages: 1: In arima(x, c(8, 0, 9)) : evtl. Konvergenzproblem: optim lieferte Kode = 1 2: In sqrt(diag(x$var.coef)) : NaNs produced
