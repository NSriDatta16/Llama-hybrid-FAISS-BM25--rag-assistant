[site]: stackoverflow
[post_id]: 891092
[parent_id]: 883562
[tags]: 
Although I agree with n3rd and voted him up, I understand what you are saying that you have a specific challenge where you cannot add an id to the html divisions, unless by script. So this would be my suggestion for inlining a script aware of its place in the DOM hierarchy, in that case: Add an id to your script tag . (Yes, script tags can have ids, too.) ex. Add one line to your inline script function that gets the script element by id. ex. this.script = document.getElementById('specialagent'); ...And another that gets the script element's parentNode. ex. var targetEl = this.script.parentNode; Consider restructuring your function to a self-executioning function, if you can. Ideally it executes immediately, without the necessity for an 'onload' call. see summary example, next. SUMMARY EXAMPLE: var callMe = function(arg1,arg2,arg3) { this.script = document.getElementById('specialagent'); var targetEl = this.script.parentNode.nodeName=="DIV" && this.script.parentNode; //...your node manipulation here... }('arg1','arg2','arg3'); The following TEST code, when run, proves that the function has identified its place in the DOM, and, importantly, its parentNode. The test has division nodes with an id, only for the purpose of the test. They are not necessary for the function to identify them, other than for testing. TEST CODE: Test In place node creation with JS Child of one Child of two var callMe = function(arg1,arg2,arg3) { this.script = document.getElementById('specialagent'); var targetEl = this.script.parentNode; /*BEGIN TEST*/ alert('this.script.id: ' + this.script.id); alert('targetEl.nodeName: ' + targetEl.nodeName + '\ntargetEl.id: '+targetEl.id); alert('targetEl.childNodes.length: ' + targetEl.childNodes.length); var i = 0; while (i
