[site]: stackoverflow
[post_id]: 2350745
[parent_id]: 2349592
[tags]: 
Here's a solution using a standard WinForms TabControl, where the Tabs are hidden at run-time, but of course they are available at design-time. Assumptions : You don't want to get into creating OwnerDrawn Tabs, which is possible. A standard WinForms TabControl will meet all your design-time needs. Code : In the Form Load event of the Form that hosts your TabControl use code like this : tabControl1.Region = new Region(tabControl1.DisplayRectangle); To hide the Tabs. Then, "wire" up your buttons to handle selecting the different TabPages in the TabControl. Obviously you could do this in a more elegant way than this : private void button1_Click(object sender, EventArgs e) { tabControl1.SelectedTab = tabControl1.TabPages[0]; } private void button2_Click(object sender, EventArgs e) { tabControl1.SelectedTab = tabControl1.TabPages[1]; } Note : if you want to insert secondary Forms or UserControls into the TabPages of a TabControl : that's not a problem : of course simpler to use UserControls. Insert them into the Controls collection of each TabPage and set their 'Dock Property to 'DockStyle.Fill. Note : there are fancier ways you can hide the Tabs, like using a derived TabControl as shown here on CodeProject : TabControl on a WinForm without showing the Tab header? There are other solutions out there that use a modified WndProc. They're not hard to find.
