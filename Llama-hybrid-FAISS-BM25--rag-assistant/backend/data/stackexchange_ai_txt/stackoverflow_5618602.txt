[site]: stackoverflow
[post_id]: 5618602
[parent_id]: 
[tags]: 
How to add django-like Formfields to a Backbone App?

I'm developing a single-page-app in backbone.js, that uses a lot of html forms to collect user input. To save coding time, I'd like to have a FormField model/collection similar to Django's Form fields My requirements: declarative specification of the form elements and their behaviour (e.g. required true/false, events,...) default views/templates for all form fields (but overrideable through configuration) all fields belonging to a form should be stored in one Backbone.Collection for easier field retrieval validation of the entire form or individual elements Here is what my simple form field implementation might look like: FormField = Backbone.Model.extend({ initialize: function (attributes, options){ //TODO: initialize form field according to type, // i.e. set up correct view, validation etc. } defaults: { type: "TextField", label: "Unknown Label", required: false, } }); FormFields = Backbone.Collection.extend({model: FormField}) MyPlugin = new PluginModel({ //TODO: render a form with these config options within the edit view of the PluginModel config: FormFields([ {type: "TextField", id:"store_name", label: "Name of Store", required: true}, {type: "SelectField", id:"store_type", label: "Type of Store", required: true, choices: ['local','http']}, ]), //runs after user "submits" form run: function (){ if this.config.isValid(){ } } }); However, I ran into the following issues: A Backbone.Collection can only host Models of the same type. What is the best way to store different form fields in one collection? (My approach is to use just one FormField class, all differentiation happens based on the formfield type in the initialize() method, but this seems a bit messy to me) How can i setup the correct view for each FormField instance?
