[site]: stackoverflow
[post_id]: 553378
[parent_id]: 550919
[tags]: 
Robert Martin's article on Open Closed Principle provides another viewpoint: SOFTWARE ENTITIES (CLASSES, MODULES, FUNCTIONS, ETC.) SHOULD BE OPEN FOR EXTENSION, BUT CLOSED FOR MODIFICATION. In your code example, you are effectively switching on the customer 'Category Type' boolean investible ; switch (customer.getCategory()) { case SUB_PRIME: case MID_PRIME: investible = customer.getSavingsAccount().getBalance() > 1e6; break; case PRIME: investible = customer.isCeo(); break; } In this current climate, new customer categories might be springing up ;-). This means having to open this class, and continually modify it. It might be OK if you only have a single switch statement, but what happens if you want to use similar logic elsewhere. Rather than other suggestions, where isInvestible is made a method on Customer , I would say that Cagtegory should become a fully-fledged class, and used for making these decisions: boolean investible ; CustomerCategory category = customer.getCategory(); investible = category.isInvestible(customer); class PrimeCustomerCategory extends CustomerCategory { public boolean isInvestible(Customer customer) { return customer.isCeo(); } }
