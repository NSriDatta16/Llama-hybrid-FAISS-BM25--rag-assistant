[site]: stackoverflow
[post_id]: 4246288
[parent_id]: 
[tags]: 
Average performance measurements for local IPC

We are now assessing different IPC (or rather RPC) methods for our current project, which is in its very early stages. Performance is a big deal, and so we are making some measurements to aid our choice. Our processes that will be communicating will reside on the same machine . A separate valid option is to avoid IPC altogether (by encapsulating the features of one of the processes in a .NET DLL and having the other one use it), but this is an option we would really like to avoid, as these two pieces of software are developed by two separate companies and we find it very important to maintain good "fences", which make good neighbors. Our tests consisted of passing messages (which contain variously sized BLOBs) across process boundaries using each method. These are the figures we get (performance range correlates with message size range): Web Service (SOAP over HTTP): 25-30 MB/s when binary data is encoded as Base64 (default) 70-100 MB/s when MTOM is utilized .NET Remoting (BinaryFormatter over TCP): 100-115 MB/s Control group - DLL method call + mem copy: 800-1000 MB/s Now, we've been looking all over the place for some average performance figures for these (and other) IPC methods, including performance of raw TCP loopback sockets, but couldn't find any. Do these figures look sane? Why is the performance of these local IPC methods at least 10 times slower than copying memory? I couldn't get better results even when I used raw sockets - is the overhead of TCP that big?
