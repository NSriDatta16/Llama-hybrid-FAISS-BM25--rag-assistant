[site]: stackoverflow
[post_id]: 4556265
[parent_id]: 4556160
[tags]: 
If what you are doing is from MSDN on Enumerable.Reverse() then you've probably got the most simple solution. If you're not using .NET 3.5 (read LINQ (not sure if F# was around before then anyway)) you could use the Array.Reverse() method, however, the resulting code is very much the same. Suffice it to say, what you have is the most elegant way I can come up with to reverse a string, I have used Enumerable.Reverse() many times to reverse order of strings in my projects. Obviously, if the String constructor took an IEnumerable we could skip the .ToArray() bit which would in my opinion make the code a bit better, but as it stands, an extra .ToArray() isn't all that bad. If you really wanted, you could write an extension method in C# and add a reference to that library in your F# project, that C# extension method would look something like this: public static String ReverseString(this String toReverse) { return new String(toReverse.Reverse().ToArray()); } That adds an extra dependency who's only real benefit is making your F# code a bit more simple, if you're reversing strings all over the place, it might be worth it, otherwise, I'd just wrap up what you've got in a normal F# method and use it that way. Although, someone much smarter than I may have a more beautiful way to do it.
