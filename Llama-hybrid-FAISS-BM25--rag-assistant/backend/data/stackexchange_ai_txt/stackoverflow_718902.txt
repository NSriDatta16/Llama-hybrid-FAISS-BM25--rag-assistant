[site]: stackoverflow
[post_id]: 718902
[parent_id]: 718896
[tags]: 
sizeof is not a real operator in C++. It is merely special syntax which inserts a constant equal to the size of the argument. sizeof doesn't need or have any runtime support. Edit: do you want to know how to determine the size of a class/structure looking at its definition? The rules for this are part of the ABI , and compilers merely implement them. Basically the rules consist of size and alignment definitions for primitive types; structure, size and alignment of the various pointers; rules for packing fields in structures; rules about virtual table-related stuff (more esoteric). However, ABIs are platform- and often vendor-specific, i.e. on x86 and (say) IA64 the size of A below will be different because IA64 does not permit unaligned data access. struct A { char i ; int j ; } ; assert (sizeof (A) == 5) ; // x86, MSVC #pragma pack(1) assert (sizeof (A) == 8) ; // x86, MSVC default assert (sizeof (A) == 16) ; // IA64
