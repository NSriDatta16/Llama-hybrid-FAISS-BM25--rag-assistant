[site]: stackoverflow
[post_id]: 5043724
[parent_id]: 5043221
[tags]: 
Scalability is a very broad term here. I think the reason could be that those frameworks strongly encourage programming to an interface and assembling the application of several loosely coupled components. They also provide containers which can transparently tie components together regardless of networking etc. This makes it easy to distribute components (and hence load) over several servers or transparently dispatch similar tasks to multiple servers . In other words you can start with a very simple application that fits in a single jar, but later if you decide to scale out you don't need to change much more than container configuration (lookup paths etc.). They also provide many handy "tools" or features which usually can be easily combined and used together with minimum effort. Easy-to-configure application servers or containers, also providing connection pools and transaction management, monitoring etc. Messaging. Timers. Object-relational mapping. Security. And so on. Another benefit of this architecture is extensibility . If you decide you need to introduce something new (say, caching or background computations), the changes in existing code are usually minimal. Very often you can simply alter a component by another implementation of the same interface. Such code is also much easier to test and more maintainable. Loosely coupled components are very well covered with automated unit tests. It's a very broad and shallow description, each of the topics can take a whole book to explain in detail (and most of them do).
