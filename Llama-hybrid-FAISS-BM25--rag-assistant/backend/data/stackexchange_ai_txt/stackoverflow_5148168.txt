[site]: stackoverflow
[post_id]: 5148168
[parent_id]: 
[tags]: 
Regression confidence using SVMs in python

I'm using regression SVMs in python and I am wondering if there is any way to get a "confidence-measure" value for its predictions. Previously, when using SVMs for binary classification, I was able to compute a confidence-type value from the 'margin'. Here is some pseudo-code showing how I got a confidence value: # Begin pseudo-code import svm as svmlib prob = svmlib.svm_problem(labels, data) param = svmlib.svm_parameter(svm_type=svmlib.C_SVC, kernel_type = svmlib.RBF) model = svmlib.svm_model(prob, param) # get confidence confidence = self.model.predict_values_raw(sample_to_classify) I imagine that the further the new sample is from the training data, the worse the confidence, but I'm looking for a function that might help compute a reasonable estimate for this. My (high-level) problem is as follows: I have a function F(x), where x is a high-dimensional vector F(x) can be computed but it is very slow I want to train a regression SVM to approximate it If I can find values of 'x' that have low prediction confidence, I can add these points and retrain (aka. active learning) Has anyone obtained/used regression-SVM confidence/margin values before?
