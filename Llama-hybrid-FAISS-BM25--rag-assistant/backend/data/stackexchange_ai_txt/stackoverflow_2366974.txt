[site]: stackoverflow
[post_id]: 2366974
[parent_id]: 2366884
[tags]: 
You need to have your data indexed properly or this will never work efficiently. If you're using a granularity of "day" then it pays to have a Date column. You can then use a standard SQL GROUP BY operation to get the values you need directly. For example, a migration could be done like: self.up add_column :posts, :created_on_date add_index :posts, :created_on_date execute "UPDATE posts SET created_on_date=created_at" end Then retrieval is really fast since it can exercise the index: def sparkline_data self.class.connection.select_values(" SELECT created_on_date, COUNT(id) FROM posts WHERE created_on_date>DATE_SUB(UTC_TIMESTAMP(), INTERVAL 14 DAY) GROUP BY created_on_date ").collect(&:to_i) end Keep in mind if you're potentially missing a day you'll have to account for that by inserting a zero value into your results. The date is returned here, so you should be able to compute the missing values and fill them in. Typically this is done by iterating over a group of days using collect. When you need to retrieve a thin slice of data quickly, loading instances of the models will always be a huge bottleneck. Often you need to go directly to SQL if there's no simple way to fetch what you need.
