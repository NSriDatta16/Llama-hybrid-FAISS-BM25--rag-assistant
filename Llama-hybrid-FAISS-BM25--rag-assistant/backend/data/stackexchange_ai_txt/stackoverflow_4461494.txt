[site]: stackoverflow
[post_id]: 4461494
[parent_id]: 4419128
[tags]: 
The solution I have implemented for now is this: whenever a user logs in, iterate through each 100 block of friends and put them in the Rails.cache. They stay there until the user logs out and logs back in. Now that I know that the API requests are counted against the logged in user, I shouldn't need to worry about hitting the rate limit API since each user will have 350 requests per hour. However, I have found a few problems with this, and I have a few thoughts on solutions: Problem: We are storing a large amount of data to cache someone's friends. Solution: It would be best if we could cache all twitter users who are friends of one of our users in one object (or hash) and also cache only the IDs of the friends for each user (which can be grabbed with far less API calls). This would create a bit of a slowdown, but would be far less storage required. Then, whenever a user logs in, we would simply update the global friend cache with any changes (i.e. picture, name, etc.). Problem: My application still has to store this and figure out how to parse it; it's not very organized. Solution: Extract this functionality into a new application that creates a better API for searching. If I accomplish this, I'll post an update here with a link.
