[site]: stackoverflow
[post_id]: 6193
[parent_id]: 6126
[tags]: 
@tweakt It's no better, but what I've done in the past: boolean ok = cond1; ok &= cond2; ok &= cond3; ok &= cond4; ok &= cond5; ok &= cond6; Which is the same as: ok = (cond1 && cond2 && cond3 && cond4 && cond5 && cond6); Actually, these two things are not the same in most languages. The second expression will typically stop being evaluated as soon as one of the conditions is false, which can be a big performance improvement if evaluating the conditions is expensive. For readability, I personally prefer Mike Stone's proposal above. It's easy to verbosely comment and preserves all of the computational advantages of being able to early out. You can also do the same technique inline in a function if it'd confuse the organization of your code to move the conditional evaluation far away from your other function. It's a bit cheesy, but you can always do something like: do { if (!cond1) break; if (!cond2) break; if (!cond3) break; ... DoSomething(); } while (false); the while (false) is kind of cheesy. I wish languages had a scoping operator called "once" or something that you could break out of easily.
