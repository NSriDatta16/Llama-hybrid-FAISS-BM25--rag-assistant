[site]: stackoverflow
[post_id]: 247926
[parent_id]: 247875
[tags]: 
This is something of a trick question, which makes me like it a lot more than I thought I would. :) Let's start with the basics: Declaring a variable does not directly allocate memory* for it on reference types. It does do so on value types, because value types are initialized at the point of declaration. For reference types, storage for the object is allocated at the point of entering their constructors. *When does this not apply? On the first usage of a given class (which may well be your first line), any class-level static data is initialized, and if the class has a static constructor (which presumably allocates memory), it will be called as well. Therefore, you may actually allocate some memory (for the static members) at a variable declaration. Technically, declaring your reference type variable does allocate some memory, on the stack (as Nicholas Mancuso mentioned) -- the memory allocated is the stack-level storage for the reference to the object. (Admittedly, said reference is null , but once you initialize your object, a valid reference will exist in the allocated memory.) I highly recommend this C-Sharp Corner article regarding stack and heap allocation for more information.
