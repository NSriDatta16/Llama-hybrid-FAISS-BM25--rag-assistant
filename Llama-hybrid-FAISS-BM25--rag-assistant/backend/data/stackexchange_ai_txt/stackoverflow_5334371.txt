[site]: stackoverflow
[post_id]: 5334371
[parent_id]: 5334273
[tags]: 
If you mean from an information theory point of view, then the easy answer is: log(number) / log(2) (It doesn't matter if those are natural, binary, or common logarithms , because of the division by log(2) , which calculates the logarithm with base 2 .) This reports the number of bits necessary to store your number. If you're interested in how much memory is required for the efficient or usual encoding of your number in a specific language or environment, you'll need to do some research. :) The typical C and C++ ranges for integers are: char 1 byte short 2 bytes int 4 bytes long 8 bytes If you're interested in arbitrary-sized integers, special libraries are available, and every library will have its own internal storage mechanism, but they'll typically store numbers via 4- or 8- byte chunks up to the size of the number.
