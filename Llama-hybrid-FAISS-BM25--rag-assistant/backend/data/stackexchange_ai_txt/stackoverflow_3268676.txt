[site]: stackoverflow
[post_id]: 3268676
[parent_id]: 3268292
[tags]: 
My first recommendation would be that unless you have a really good reason to learn C specifically, learn C++ instead. I realise that is probably going to be contentious amongst some; just something to consider if you have not already done so. For resources, in the first instance a good book is always best, but if you are looking for on-line resources then you will find that many are C++ related, some deal with C and C++; different styles of writing and presentation suit different users; try some of these: http://www.cprogramming.com/ http://www.howstuffworks.com/c.htm http://www2.its.strath.ac.uk/courses/c/ The C Book (online) The C Book (HTML download) The C Book (PDF) The following C++ related sites include excellent coverage of the C standard library: http://www.cplusplus.com/ http://www.cppreference.com/wiki/ With respect to GDB, I applaud the appreciation of the benefits of using a symbolic debugger, it is remarkable how many developers avoid this essential tool, but suggest that using raw GDB may put you off such tools for life. If you are able to use VC++ on Windows its debugger is second to none, and VC++ Express is free. If you must use GDB (because you are using Linux for example) I suggest that you use GDB integrated into an IDE such as Eclipse, or KDevelop, or use the stand-alone Insight debugger. If you do choose to be hardcore and use GDB directly, there seems to be few resources on how to use it effectively beyond the GDB manual itself. There is also Debugging with GDB: The GNU Source-Level Debugger at $30.
