[site]: stackoverflow
[post_id]: 1824050
[parent_id]: 1824001
[tags]: 
I like namespaces -- so I think that import b should only get what's in b itself (presumably in b/__init__.py ). If there's a reason to segregate other functionality in b.c , b.c.d , or whatever, then just import b should not drag it all in -- if the "drag it all in" does happen, I think that suggests that the namespace separation was probably a bogus one to start with. Of course, there are examples even in the standard library ( import os , then you can use os.path.join and the like), but they're ancient, by now essentially "grandfathered" things from way before the Python packaging system was mature and stable. In new code, I'd strongly recommend that a package should not drag its subpackages along for the ride when you import it. (Do import this at the Python prompt and contemplate the very last line it shows;-).
