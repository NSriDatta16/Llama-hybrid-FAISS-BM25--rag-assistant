[site]: stackoverflow
[post_id]: 4258159
[parent_id]: 4246489
[tags]: 
I had this standalone script, enabling me to send xml request, but requiring a server: require 'rubygems' require 'net/http' require 'json' url = URI.parse('http://localhost:3030/myresource.xml') request = Net::HTTP::Post.new(url.path) request.content_type="text/xml" request.basic_auth('user', 'secret') request.body = " Test Name 1 Some data for testing " response = Net::HTTP.start(url.host, url.port) {|http| http.request(request)} puts response finally I was able to do this without starting up a server, using rspec 2. Putting this in a spec file under spec/requests enables me to do it in my app without webrat or capybara. for XML post("/myresource.xml", some_xml_string, {"CONTENT_TYPE" => "text/xml", "HTTP_AUTHORIZATION" => ActionController::HttpAuthentication::Basic.encode_credentials("user", "secret")}) and JSON post("/myresource.json", some_json_string, {"CONTENT_TYPE" => "application/json", "HTTP_AUTHORIZATION" => ActionController::HttpAuthentication::Basic.encode_credentials("user", "secret")}) Now I guess I can build the some_xml_string from a remote resource like my documentation xml or json file (some http:// resource) , for instance. Yes, it's more to maintain and the test will be fragile. I'll have to think more about this... Changing APIs used by external people isn't something to be taken upon lightly, always a lot of trade-offs. Better suggests are welcome!
