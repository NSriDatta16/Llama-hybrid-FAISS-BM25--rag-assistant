[site]: stackoverflow
[post_id]: 4295418
[parent_id]: 
[tags]: 
Rotating a 2-d array by 90 degrees

A frequent question that props up during array manipulation exercises is to rotate a two dimensional array by 90 degrees. There are a few SO posts that answer how to do it in a variety of programming languages. My question is to clarify one of the answers that is out there and explore what sort of thought-process is required in order to get to the answer in an organic manner. The solution to this problem that I found goes as follows: public static void rotate(int[][] matrix,int n) { for( layer = 0;layer I have somewhat of an idea what the code above is trying to do, it is swapping out the extremities/corners by doing a four-way swap and doing the same for the other cells separated by some offset. Stepping through this code I know it works, what I do not get is the mathematical basis for the above given algorithm. What is the rationale behind the 'layer','first','last' and the offset? How did 'last' turn out to be n-1-layer ? Why is the offset i-first ? What is the offset in the first place? If somebody could explain the genesis of this algorithm and step me through the thought process to come up with the solution, that will be great. Thanks
