[site]: stackoverflow
[post_id]: 765676
[parent_id]: 765459
[tags]: 
You may find some helpful code on my A* tutorial website . Although the code I wrote to support this uses STL in should be easy to strip the STL support out. In addition there is a pool allocator included with it (fsa.h) that I wrote to speed up STL on game consoles. It is C++ code, but I ported it originally from C and I don't think it would be hard to do it the other way. The code is tested by over 10,000 people so it's a good base to start from. Replacing the STL structures I'm using is no problem since it is limited to Vectors. I use one of the vectors as a priority queue using the heap functions (make_heap and push_heap). You can replace that with my old C code which has a priority queue implemented in C that should just drop into your code. (Which only does one alloc, so you can replace that with a pointer to a reserved area of your memory. As you can see in this code fragment from the header, the main difference in C code is that there's no this pointer, no object, so your code typically takes an object pointer as the first argument. void PQueueInitialise( PQUEUE *pq, int32 MaxElements, uint32 MaxRating, bool32 bIsAscending ); void PQueueFree( PQUEUE *pq ); int8 PQueuePush( PQUEUE *pq, void *item, uint32 (*PGetRating) ( void * ) ); int32 PQueueIsFull( PQUEUE *pq ); int32 PQueueIsEmpty( PQUEUE *pq ); void *PQueuePop( PQUEUE *pq, uint32 (*PGetRating) ( void * ) );
