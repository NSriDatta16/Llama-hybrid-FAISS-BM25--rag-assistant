[site]: stackoverflow
[post_id]: 3015234
[parent_id]: 3015124
[tags]: 
Hm, I do not mean to be glib or reject Java-native solutions out of hand, but when it comes to the Wcf stack, the best advice is typically to use the Wcf stack. More to the point: generate a CLR Wcf client [in language of choice auto-generate client via VS or svcutil against static wsdl or service endpoint] and then invoke this CLR proxy through some Java-CLR interop. There are several reasons for this, not the least of which Immediate compliance [by Wcf for Wcf] Flexibility [it is not unreasonable to expect your remote service to change or leverage sophisticated communication protocols, such as message-level encryption, you want your client to change as easily as the service] ps: I have strong misgivings about modifying existing service wsdls by hand. If the wsdl is indeed "the problem", then this indicates either a problem with service definition [ie server-side code] or service interpretation [ie an option on autogeneration utility]. Avoid manual manipulations of service contracts. Doing so would be like modifying IL byte code post-build.
