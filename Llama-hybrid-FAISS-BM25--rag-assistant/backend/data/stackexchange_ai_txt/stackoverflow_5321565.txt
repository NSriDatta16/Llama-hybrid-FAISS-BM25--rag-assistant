[site]: stackoverflow
[post_id]: 5321565
[parent_id]: 5321211
[tags]: 
(not an answer, just commenting. please ignore.) Testing should not be the center of programming. Especially for young students. Whenever we can, we should first focus intensely on the logic and reasoning of the implementation. We should practice our skills to such confidence that we know the code is correct, simply because we wrote it. Is that an improbable goal? Many people can actually approach it very closely. But even if it's too unreachable for a person, he should practice this way at least when he's a student. It won't hurt. In TDD, it seems to encourage students to do a good enough job to pass the tests. You don't really have to think carefully about your algorithm; just tweak it until it passes the tests, which is quite easy. Everything bad will come out of it. I'm not saying testing is not important. But it should not be the 1st line of defense for correctness. In another related topic, some people argue that TDD is good for design: if a code is easy to test, it's very likely a good design. That's also very puzzling - when can't one directly focus on good design?
