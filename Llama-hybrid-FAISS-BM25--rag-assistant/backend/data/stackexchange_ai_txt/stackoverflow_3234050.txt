[site]: stackoverflow
[post_id]: 3234050
[parent_id]: 3231809
[tags]: 
In addition to the suggestions of Disabling Nagling , there is an extremely nice post on improving performance of Azure Table Storage . Actually improving the speed of ADO.NET Deserialization provided 10x speed-up for Sqwarea (massive online multiplayer game built with Lokad.Cloud framework). However, table storage might not be the best solution for huge storage scenarios (more than millions of records). Latency is the killing factor here . To work around that, I've been successfully using file-based database storages, where changes are done locally (without any network latency of CLAP) and are committed to BLOB by uploading the file back (concurrency and scaling out was enforced here by Lokad.CQRS App Engine for Windows Azure). Inserting 10 millions of records to SQLite database at once (within transaction, where each record was indexed by 2 fields and had arbitrary schema-less data serialized via ProtoBuf) took only 200 seconds in total on the average. Uploading/downloading resulting file - roughly 15 seconds on the average. Random reads by index - instantaneous (provided the file is cached in the local storage and ETag is matching).
