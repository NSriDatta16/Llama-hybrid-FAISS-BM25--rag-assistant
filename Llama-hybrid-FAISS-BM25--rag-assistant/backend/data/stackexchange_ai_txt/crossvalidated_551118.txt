[site]: crossvalidated
[post_id]: 551118
[parent_id]: 551107
[tags]: 
Personally, I think making a model to compute cut probability for each team, then using the two highest probabilities to predict who will be cut is your best bet. I have a few ideas, in no particular order, so I'll list them here: I agree that contextualizing other teams is important. You may want to think of this problem as a classification problem, where your input vector includes features about the team being predicted upon, as well as features describing the other teams Having a model be able to support variable numbers of things is hard. So I would either summarize all features for all other teams, or train different models for different numbers of teams. From a feature reduction perspective, the former seems more practical. How exactly you set up your features, I think, will be your most difficult challenge. You can probably use almost any classification model, but how you choose to create your feature space (weather you're including temporal qualities, what features you're using, etc.) is your biggest issue. You can find resources to guide you in feature engineering, but, really, it will probably come down to a lot of "aha" moments and guess and check.
