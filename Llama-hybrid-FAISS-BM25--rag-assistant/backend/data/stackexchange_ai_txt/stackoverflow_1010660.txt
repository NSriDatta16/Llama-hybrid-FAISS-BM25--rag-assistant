[site]: stackoverflow
[post_id]: 1010660
[parent_id]: 1010652
[tags]: 
Moving your images into a database and writing the code to extract the image may be more hassle than it's worth. It will all go back to the business requirements surrounding the need to protect the images, or the requirement for performance. I'd suggest sticking to the tried and true system of storing the filepath or directory location in the DB, and keeping the files on disk. Here's why: A filesystem is easier to maintain. Some thought has to be put into the structure and organization of the images. i.e. a directory for each customer, and a subdirectory for each [Attribute-X] and another subfolder for each [Attribute-Y]. Keeping too many images in one directory will end up slowing down the file access (i.e. hundreds of thousands) If the idea of storing in a DB is a counter-measure against filesystem loss, (i.e. a disk goes down, or a directory is deleted by accident), then I'd counter with the suggestions that when you use source control, it's no problem to retrieve any lost/missing/delete files. If you ever need to scale and move to a content distribution scenario, you'd have to move out back to the filesystem or perform a big extract to push out to the providers. It also goes with the saying: "keep structured data in a database". Microsoft has an article on Managing Unstructured Data . If security is an issue to be addressed, the filesystem has a whole structure with ACLs. Reinventing the wheel on security may be out of scope in the business requirements. A large amount of discussion for this topic is also found at: Question 3748 Question 561447 Having your images stored as varbinary or a blob of some kind (depending on your platform), I'd suggest it's more hassle than it's worth. The effort that you'll need to extend means more code that you'll have to maintain, unit test, and defend against defects. If your environment can support SQL Server 2008, you can have the best of both worlds with their new FileStream datatype in SQL 2008. An MSDN article is touting the FileStream datatype in SQL 2008 as high performance. SQL Skills has a great article with some SQL 2008 Filestream performance measurements . Here is an article addressing varbinary vs. FileStream and performance of both datatypes . If you are a SQL Mag subscriber, you can see a great article at SQL Mag on SQL 2008 FileStream . Microsoft Research article:To Blob or Not To Blob I'd love to see studies in real-world scenarios with large user bases like Flickr or Facebook. Again, it all goes back to your business requirements. Good luck!
