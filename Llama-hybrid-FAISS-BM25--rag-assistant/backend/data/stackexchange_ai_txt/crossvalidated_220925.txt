[site]: crossvalidated
[post_id]: 220925
[parent_id]: 219908
[tags]: 
What I think is happening is that these nodes or edges are also labeled. In the paper you mentioned they apply it to some biologicial data. From the paper: ``Edges are labeled by the distance they represent in angstroms. Node bear labels representing their type, namely helix, sheet or loop, and their length in amino acids.''. So the edges have a (one dimensional) feature vector, that is the length, and nodes have a type. I was reading the paper you mentioned, but I find on page 6 that they use a delta kernel and a brownian bridge kernel for the nodes and edges. So what are they doing? When they compute the kernel between two nodes (delta kernel), they check if they have the same structure. If so, $k = 1$, otherwise $k = 0$. Now to compare edges they have this formula: $$k(x,x') = max(0, c − |length(x) − length(x')|)$$ So I guess they put in the length of the first edge in $length(x)$ and the length of the second edge in $length(x')$. In general, I guess you can have a graph where feature vectors are associated to edges and nodes. For example, let's say you want to classify the map of a city: is it a city in the US or somewhere else? The input is a graph: each building is a node, and the node has a featurevector associated to it, for example: (height, width, length, cost, built year, ...). If this vector is numeric, we can define a kernel between two nodes for example by using the Gaussian kernel, or any other 'regular' kernel you like. Let's say the featurevector is given by $x$ and $x'$, the Gaussian kernel is defined as: $$K(x,x') = \exp(||x-x'||^2/2\sigma^2)$$ where $\sigma$ is a parameter that determines the length scale. The same goes for the edges. In this example the edges are roads, the feature vector of an edge could be: (built year, average # of traffic weekly, road quality, number of roadsigns, length). As long as this featurevector is numerical, again you can just take a regular kernel to compare them. The intersection kernel is used typically for images. Compute the histogram of an image. Then the kernel between two images with two histograms $a_i$ and $b_i$ is given by: $$K(a,b) = \sum_i min(a_i,b_i)$$ You seem to have unlabeled and undirected graphs. Thus you cannot really make meaningful kernels between your nodes and edges (unless your edges are labeled / weighted / have a length). I would try setting the kernel values of the edges and nodes all to 1, and see if then the shortest path kernel still gives you something sensible.
