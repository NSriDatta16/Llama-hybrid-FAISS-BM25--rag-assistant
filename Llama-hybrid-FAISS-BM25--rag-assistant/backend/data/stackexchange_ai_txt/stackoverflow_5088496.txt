[site]: stackoverflow
[post_id]: 5088496
[parent_id]: 5088358
[tags]: 
I'd probably do something like this: Edit: after some thought, I've decided the duplication really did bother me too much, so I've eliminated it. I'm not sure it's technically allowed ( std::string isn't a POD) but it seems to work, and strikes me as nicer and more scalable. #include #include #include #include #include #include struct name { std::string first, middle, last; }; std::istream &operator>>(std::istream &is, name &n) { char ch; is.ignore((unsigned)-1, ':'); is.ignore(1); std::getline(is, n.first, ','); std::getline(is, n.middle, ','); std::getline(is, n.last); return is; } struct item { size_t offset; char *caption; }; void show(name const &n, item const &i) { // as predicted, eliminating the duplication did lead to one gnarly line of code: std::string &name = *(std::string *)((char *)&n+i.offset); std::cout names; std::string raw_data("Full Name 1: John, Smith, Flynn\nFull Name 2: Walter, Kennedy, Roberts\nFull Name 3: Sam, Bass, Clinton"); std::istringstream infile(raw_data); std::copy(std::istream_iterator (infile), std::istream_iterator (), std::back_inserter(names)); item items[] = { {offsetof(name, first), "First Name: "}, {offsetof(name, middle), "Middle Name: "}, {offsetof(name, last), "Last name: "} }; for (int i=0; i
