[site]: datascience
[post_id]: 126813
[parent_id]: 
[tags]: 
How to optimize my CNN classification architecture

I have this CNN based model architecture that takes an RGB image. Now I'm trying to change it for a color classification case on an object (10 color classes: white, black, yellow, etc). This current architecture has achieved good accuracy for a binary classification task before, but I think for color case, it doesn't need to be this complex. So trying to shrink it and make it faster. I want it to be very fast. How would you change it to make it smaller and faster? Anything like reducing layers, filters, kernel sizes, functions, etc as appicable. Also, feel free to propose other efficient approaches for the purpose of object color classification. Objects are already cropped but can be under different light conditions. def create_model(): channels = 3 model = Sequential() #change first one to 64 model.add(Conv2D(16, kernel_size = (3, 3), activation='relu', input_shape=(IMAGE_SIZE, IMAGE_SIZE, channels))) model.add(MaxPooling2D(pool_size=(2,2))) model.add(BatchNormalization()) model.add(Conv2D(32, kernel_size=(3,3), activation='relu')) model.add(MaxPooling2D(pool_size=(2,2))) model.add(BatchNormalization()) model.add(Conv2D(64, kernel_size=(3,3), activation='relu')) model.add(MaxPooling2D(pool_size=(2,2))) model.add(BatchNormalization()) model.add(Conv2D(128, kernel_size=(3,3), activation='relu')) model.add(MaxPooling2D(pool_size=(2,2))) model.add(BatchNormalization()) model.add(Conv2D(32, kernel_size=(3,3), activation='relu')) model.add(MaxPooling2D(pool_size=(2,2))) model.add(BatchNormalization()) model.add(Dropout(0.2)) model.add(Flatten()) model.add(Dense(128, activation='relu')) model.add(Dropout(0.2)) model.add(Dense(64, activation='relu')) model.add(Dense(4, activation = 'softmax')) return model
