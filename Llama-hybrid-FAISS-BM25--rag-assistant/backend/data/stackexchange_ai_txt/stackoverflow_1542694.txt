[site]: stackoverflow
[post_id]: 1542694
[parent_id]: 1540960
[tags]: 
Nowadays, Test Driven Development is the approach for managing big software projects with ease. TDD built on unit tests but they are different. You don't need to be use TDD to make use of unit tests. My personal preference is to write test first, but I don't feel I do the whole TDD thing. What is a Unit Test? A Unit Test is a bit of code that tests the behaviour of one unit. How one unit is defined differs between people. But in general they are: Quick to run Independent from each other Test only a small part (a unit ;) of your code base. Binary outcome - That is it passes or fails. Should only test one outcome of the unit (for each outcome create a different unit test) Repeatable Are their any frameworks which can create unit tests To write the tests - Yes but I've never seen anyone say anything nice about them. To help you write & run tests, a whole bunch of them. Should there be a unit test for each and every function in a class? You have a few different camps in this - the 100%ers would say yes. Every method must be tested and you should have 100% code coverage . The other extreme is that unit tests should only cover areas that you have even encounter bugs or you expect to find bugs. The middle ground (and the stand I take) is to unit tests everything that is not "too simple to break". Setters/getters and anything that just calls a single other method. I aim to have 80% code coverage and a low CRAP factor (so a low chance I've been naughty and decided to not test something as it was "too complex to test). The book that helped me "get" unit tests JUnit in Action . Sorry I don't do much in the C++ world, so I can not suggest a C++ based alternative.
