[site]: crossvalidated
[post_id]: 217589
[parent_id]: 
[tags]: 
XGBoost: how to interpret these results?

I'm using XGBoost package (under Python) on a Kaggle set. I'm running the following code import xgboost as xgb data_train = np.array(traindata.drop('Category',axis=1)) labels_train = np.array(traindata['Category'].cat.codes) data_valid = np.array(validdata.drop('Category',axis=1)) labels_valid = np.array(validdata['Category'].astype('category').cat.codes) weights_train = np.ones(len(labels_train)) weights_valid = np.ones(len(labels_valid )) dtrain = xgb.DMatrix( data_train, label=labels_train,weight = weights_train) dvalid = xgb.DMatrix( data_valid , label=labels_valid ,weight = weights_valid ) param_train = {'bst:max_depth':5, 'bst:eta':0.3, # eta [default=0.3] #'min_child_weight':1,'gamma':0,'subsample':1,'colsample_bytree':1,'scale_pos_weight':0, # default # max_delta_step:0 # default 'min_child_weight':5,'scale_pos_weight':0, 'max_delta_step':2,'lambda':2, 'subsample':0.8,'colsample_bytree':0.8, 'silent':1, 'objective':'multi:softprob','eval_metric':'mlogloss','num_class':39,'nthread':4, 'evals_result':['eval_metric'],'evallist': [(dtrain,'train'),(dvalid,'eval')]} param_CV = {'bst:max_depth':5, 'bst:eta':0.3, 'min_child_weight':5,'scale_pos_weight':0, 'max_delta_step':2,'lambda':2, 'subsample':0.8,'colsample_bytree':0.8, 'silent':1, 'objective':'multi:softprob','eval_metric':'mlogloss','num_class':39,'nthread':4, 'evals_result':['eval_metric'], 'verbose_eval':True} evallist = [(dtrain,'train'),(dvalid,'eval')] # if there is a validation set # evallist = [(dtrain,'train')] # if there is no validation set num_round = 100 bst = xgb.train( param_train, dtrain, num_round, evallist,early_stopping_rounds=5 ) # early_stopping_rounds=10 # when there is a validation set res=xgb.cv(param_CV,dtrain=dtrain,num_boost_round=num_round,nfold = 5,early_stopping_rounds=5) so the params are the same, except that in CV i don't need to print the evallist ? (its not an accepted parameter i think ?) then here is what i get > Will train until eval error hasn't decreased in 5 rounds. > [0] train-mlogloss:3.222158 eval-mlogloss:3.331301 > [1] train-mlogloss:2.884756 eval-mlogloss:3.097502 > [2] train-mlogloss:2.632060 eval-mlogloss:2.945249 > [3] train-mlogloss:2.470736 eval-mlogloss:2.850051 > [4] train-mlogloss:2.358537 eval-mlogloss:2.791360 > [5] train-mlogloss:2.278458 eval-mlogloss:2.753927 > [6] train-mlogloss:2.214835 eval-mlogloss:2.728683 > [7] train-mlogloss:2.164496 eval-mlogloss:2.712738 > [8] train-mlogloss:2.123897 eval-mlogloss:2.702676 > [9] train-mlogloss:2.091214 eval-mlogloss:2.694672 > [10] train-mlogloss:2.064233 eval-mlogloss:2.689833 > [11] train-mlogloss:2.040527 eval-mlogloss:2.690605 > [12] train-mlogloss:2.020167 eval-mlogloss:2.693260 > [13] train-mlogloss:2.003255 eval-mlogloss:2.697917 > [14] train-mlogloss:1.988390 eval-mlogloss:2.704585 > [15] train-mlogloss:1.975163 eval-mlogloss:2.712515 Stopping. Best > iteration: [10] train-mlogloss:2.064233 eval-mlogloss:2.689833 res test-mlogloss-mean test-mlogloss-std train-mlogloss-mean train-mlogloss-std 0 3.249529 0.011871 3.201333 0.002639 1 2.929290 0.016930 2.829826 0.006743 2 2.696570 0.023819 2.546634 0.008640 3 2.542200 0.030709 2.347780 0.008460 4 2.440506 0.034024 2.203404 0.009297 5 2.368498 0.033255 2.095443 0.010717 6 2.311877 0.034071 2.006866 0.010142 7 2.270071 0.034105 1.933655 0.010083 8 2.237238 0.037012 1.872254 0.009957 9 2.211688 0.038777 1.819701 0.008550 10 2.190893 0.038745 1.774208 0.009258 11 2.173965 0.037626 1.732723 0.008969 12 2.159105 0.038843 1.694437 0.009346 13 2.148262 0.039140 1.660285 0.008647 14 2.139713 0.039134 1.628401 0.007815 15 2.133940 0.040289 1.601097 0.007548 16 2.129378 0.040396 1.575236 0.006340 17 2.127329 0.041668 1.551052 0.008037 18 2.125965 0.041890 1.525768 0.007868 19 2.124177 0.042267 1.504649 0.008013 20 2.123374 0.042020 1.483685 0.009100 I don't understand why the result in the single run has a much higher logloss (eval-mlogloss 2.689) than in the CV run (test-mlogloss 2.123) while i'm running it on the same set right and same parameters right ? also why are there 20 lines in res ? i specified 5 folders, but is the CV always running 20 times ? (this 20 doesn't seem to be a parameter and i haven't seen this number in any doc ?) thank you
