[site]: stackoverflow
[post_id]: 3931359
[parent_id]: 3877024
[tags]: 
This is not hard: private IPagedList FindPaged (DetachedCriteria criteria, int pageIndex, int pageSize, IResultTransformer resultTransformer) { int firstResult = pageIndex == 1 ? 0 : (pageIndex - 1) * pageSize; var countCriteria = CriteriaTransformer .Clone(criteria) .SetProjection(Projections.RowCount()); countCriteria.ClearOrders(); IMultiCriteria multiCriteria = Session.CreateMultiCriteria(); multiCriteria.Add(countCriteria); criteria.SetFirstResult(firstResult).SetMaxResults(pageSize); if (resultTransformer != null) { criteria.SetResultTransformer(resultTransformer); } multiCriteria.Add(criteria); var result = multiCriteria .List() .Cast () .ToList(); PagedList list = new PagedList ( result[1].Cast ().ToList (), pageIndex, pageSize, (int)result[0][0]); return list; } Where IPagedList is: public interface IPagedList : ICollection { int TotalPages { get; } int TotalCount { get; } int PageIndex { get; } int PageSize { get; } bool HasPreviousPage { get; } bool HasNextPage { get; } bool IsFirstPage { get; } bool IsLastPage { get; } } and implementation: public class PagedList : List , IPagedList { public PagedList(IEnumerable source, int pageIndex, int pageSize) : this(source, pageIndex, pageSize, source.Count()) { } public PagedList(IEnumerable source, int pageIndex, int pageSize, int totalCount) { this.TotalCount = totalCount; this.PageSize = pageSize; this.PageIndex = pageIndex; double pc = this.TotalCount / this.PageSize; if (this.TotalCount % this.PageSize > 0) { pc++; } this.TotalPages = (int)pc; this.HasPreviousPage = (PageIndex > 1); this.HasNextPage = (PageIndex * PageSize)
