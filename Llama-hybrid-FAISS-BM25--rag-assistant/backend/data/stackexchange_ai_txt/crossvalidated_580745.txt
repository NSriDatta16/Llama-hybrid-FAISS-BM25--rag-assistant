[site]: crossvalidated
[post_id]: 580745
[parent_id]: 
[tags]: 
Probabilistic Machine Learning: Product of gaussian pdfs of samples is equal to gaussian pdf of sample mean

I'm currently reading the book Probabilistic Machine Learning: An Introduction by Kevin P. Murphy and I'm stuck on the derivation of a formula in section 3.3.4 ( Example: inferring an unknown vector ) Given $N$ noisy but independent measurements $\boldsymbol{y}_{n}$ of a quantity $\mathbf{z}\in\mathbb{R}^D$ with $\boldsymbol{y}_{n} \sim \mathcal{N}\left(\boldsymbol{z}, \boldsymbol{\Sigma}_{y}\right)$ the following equality apparently holds: $$\prod_{n=1}^{N} \mathcal{N}\left(\boldsymbol{y}_{n} \mid \boldsymbol{z}, \boldsymbol{\Sigma}_{y}\right)=\mathcal{N}\left(\overline{\boldsymbol{y}} \mid \boldsymbol{z}, \frac{1}{N} \boldsymbol{\Sigma}_{y}\right)$$ I tried to algebraically verify the equation, which failed, then I coded a simulation in Python in order to empirically verify the above equation. It turns out however that the simulation doesn't result in both sides of the equation being equal. I believe that my simulation is just wrong or ran into numerical issues, but I would be glad if someone could enlighten me, especially by deriving the above formula. See also my code here: #%% 3.3.4 Example: Inferring an unknown vector. import numpy as np from scipy.stats import multivariate_normal, norm Sigma_y = np.array([[1,0], [0,1]]) Z = np.array([1,1]) Y = np.array([[1,1],[1,1]]) py = lambda y: multivariate_normal.pdf(y, Z, Sigma_y) N_prod = np.prod([py(y) for y in y]) N_avg = multivariate_normal.pdf(np.mean(Y,axis=0), Z, 1/len(Y)*Sigma_y) print(f"N_prod: {N_prod}\nN_avg: {N_avg}")
