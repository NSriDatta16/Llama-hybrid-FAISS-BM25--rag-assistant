[site]: stackoverflow
[post_id]: 132483
[parent_id]: 130789
[tags]: 
A decision table is a cluster of conditions and actions. A condition can be simple enough that you can represent it with a simple "match a column against this value" string. Or a condition could be hellishly complex. An action, similarly, could be as simple as "move this value to a column". Or the action could involve multiple parts or steps or -- well -- anything. A CASE function in a SELECT or WHERE clause is a decision table. This is the first example of decision table "in" a relational database. You can have a "transformation" table with columns that have old-value and replacement-value. You can then write a small piece of code like the following. def decision_table( aRow ): result= connection.execute( "SELECT replacement_value FROM transformation WHERE old_value = ?", aRow['somecolumn'] ) replacement= result.fetchone() aRow['anotherColumn']= result['replacement_value'] Each row of the decision table has a "match this old_value" and "move this replacement_value" kind of definition. The "condition" parts of a decision table have to be evaluated somewhere. Your application is where this will happen. You will fetch the condition values from the database. You'll use those values in some function(s) to see if the rule is true. The "action" parts of a decision table have to be executed somewhere; again, your application does stuff. You'll fetch action values from the database. You'll use those values to insert, update or delete other values. Decision tables are used all the time; they've always been around in relational databases. Each table requires a highly customized data model. It also requires a unique condition function and action procedure. It doesn't generalize well. If you want, you could store XML in the database and invoke some rules engine to interpret and execute the BPEL rules. In this case, the rules engine does the condition and action processing. If you want, you could store Python (or Tcl or something else) in the database. Seriously. You'd write the conditions and actions in Python. You'd fetch it from the database and run the Python code fragment. Lots of choices. None of the "academic". Indeed, the basic condition - action stuff is done all the time.
