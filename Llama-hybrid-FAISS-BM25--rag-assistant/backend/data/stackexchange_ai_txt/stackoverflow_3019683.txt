[site]: stackoverflow
[post_id]: 3019683
[parent_id]: 3019411
[tags]: 
You aren't setting a bucket. It's in your s3.yml file, but you aren't reading that value from your call to has_attached_file . Paperclip S3 docs: http://rubydoc.info/gems/paperclip/Paperclip/Storage/S3#s3_protocol-instance_method Also, pay attention to those people who are telling you not to use a s3.yml file with Heroku. It's a waste and just added abstraction that buys you nothing. You already have your ENV set up with the values you need, so use them. I've done this before where I don't want to push an s3.yml file to Heroku, but I do want to use one for test and development. In an initializer you can do something like this: # If an s3.yml file exists, use the key, secret key, and bucket values from there. # Otherwise, pull them from the environment. if File.exists?("#{Rails.root}/config/s3.yml") s3_config = YAML.load_file("#{Rails.root}/config/s3.yml") S3[:key] = s3_config[Rails.env]['key'] S3[:secret] = s3_config[Rails.env]['secret'] S3[:bucket] = s3_config[Rails.env]['bucket'] else S3[:key] = ENV['S3_KEY'] S3[:secret] = ENV['S3_SECRET'] S3[:bucket] = ENV['S3_BUCKET'] end Then when you're setting up Paperclip in your model, you reference the value like this: ... :s3_credentials => { :access_key_id => S3[:key], :secret_access_key => S3[:secret] }, :bucket => S3[:bucket] Obviously, this means that you do not want to have your s3.yml file in your git repository (which really, you shouldn't anyway).
