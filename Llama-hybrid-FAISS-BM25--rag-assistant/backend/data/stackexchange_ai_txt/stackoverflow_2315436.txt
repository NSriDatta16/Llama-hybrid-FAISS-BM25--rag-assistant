[site]: stackoverflow
[post_id]: 2315436
[parent_id]: 2315261
[tags]: 
I don't know if you saw this blog post so I'm adding it here as reference and I'll just quote the end: Update 2009/03/12: those interested in securing Wicket applications should also be aware that there is an alternative to Wicket-Security, called wicket-auth-roles. This thread will give you a good overview of the status of the two frameworks. Integrating wicket-auth-roles with Spring Security is covered here . One compelling feature of wicket-auth-roles is the ability to configure authorizations with Java annotations. I find it somehow more elegant than a centralized configuration file. There is an example here . Based on the information above and the one your provided, and because I prefer annotations too, I'd go for Wicket-Auth-Roles with Spring Security (i.e. guide 2 ). Extending AuthenticatedWebApplication shouldn't be a problem as this class extends WebApplication . And pulling your application object out of spring context using SpringWebApplicationFactory should also just work. And if your concerns are really big, this would be pretty easy and fast to confirm with a test IMO :)
