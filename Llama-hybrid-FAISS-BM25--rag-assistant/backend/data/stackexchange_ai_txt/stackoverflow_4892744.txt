[site]: stackoverflow
[post_id]: 4892744
[parent_id]: 
[tags]: 
How to serve data to an iPhone app for conversion to Core Data

I'm writing an iPhone app to display the location of items on Google Maps using MapKit. I have a set of items which are to be displayed on the map. These items can change over time so I'd like to manage them centrally on a webserver and allow the client to fetch it as new versions become available. There are a few ways I could do this and I'd like some input on my current ideas or suggestions for better alternatives. Firstly, I want to use Core Data to store the items on the iPhone because I'm using this as a learning opportunity for Core Data as much as anything else. I would however like to hear thoughts on the server-side storage and formatting of the data for conversion by iOS to Core Data objects. Keep a flat XML file on the server containing all the items. Get the app to periodically check for new versions (I'll do a GET from the phone to check), when a new version is detected, I'll download the whole XML file (~1MB) and parse it using NSXMLParser and basically wipe the existing Core Data objects and populate the store with the new objects. Store the objects in a database on the server, serve them using PHP as an XML file. Have the app check periodically for new/updated entries and just fetch those, parse them and add to the store. Store the objects in a database on the server, serve them using JSON or some other format which would be better than the previous methods using XML and the NSXMLParser (I'm looking for suggestions in this area if there are better ways than XML etc.) So, I'd like the solution to use Core Data on the phone, I understand NSXMLParser so I know how I can implement that solution really. I'd like to know if there are alternative ways of serving the data which reduces the amount of manipulation required to convert the server-side data to Core Data objects.
