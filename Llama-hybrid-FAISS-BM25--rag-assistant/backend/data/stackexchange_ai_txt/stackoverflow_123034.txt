[site]: stackoverflow
[post_id]: 123034
[parent_id]: 116684
[tags]: 
First rule of cryptography and password storage is " don't invent it yourself ," but if you must here is the absolute minimum you must do to have any semblance of security: Cardinal rules: Never store a plain text password (which means you can never display or transmit it either.) Never transmit the stored representation of a password over an unsecured line (either plain text, encoded or hashed). Speed is your enemy. Regularly reanalyze and improve your process as hardware and cryptanalysis improves. Cryptography and process is a very small part of the solution. Points of failure include: storage, client, transmission, processing, user, legal warrants, intrusion, and administrators. Steps: Enforce some reasonable minimum password requirements. Change passwords frequently. Use the strongest hash you can get - SHA-256 was suggested here. Combine the password with a fixed salt (same for your whole database). Combine the result of previous step with a unique salt (maybe the username, record id, a guid, a long random number, etc.) that is stored and attached to this record. Run the hash algorithm multiple times - like 1000+ times . Ideally include a different salt each time with the previous hash. Speed is your enemy and multiple iterations reduces the speed. Every so often double the iterations (this requires capturing a new hash - do it next time they change their password.) Oh, and unless you are running SSL or some other line security then don't allow your password to be transmitted in plain text. And if you are only comparing the final hash from the client to your stored hash then don't allow that to be transmitted in plain text either. You need to send a nonce (number used once) to the client and have them hash that with their generated hash (using steps above) hash and then they send you that one. On the server side you run the same process and and see if the two one time hashes match. Then dispose of them. There is a better way, but that is the simplest one.
