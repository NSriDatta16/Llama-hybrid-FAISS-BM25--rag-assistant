[site]: crossvalidated
[post_id]: 419199
[parent_id]: 
[tags]: 
How to Reduce Number of Variables Before Running Random Forrest or XGBoost

I've simplified the problem I'm working on for this post, so that the focus is on the issue I'm having. I'm trying to predict if a patient will be diagnosed with arthritis in 2019, based on the ICD-10 diagnosis codes found on claims in 2018. My strategy was to build a model off of a training set based on 2017 claims, with a target variable that indicates if the patient had arthritis in 2018. I would then score patients based on their 2018 claims. Below is a screenshot of the way I wanted to structure my data, with some made up diagnosis data. Patient ID Arthritis_Ind Age Gender Diag_A00_Ind Diag_A000_Ind Diag_A001_Ind […] 100000001 0 75 F 0 0 1 […] 100000002 0 60 M 0 0 0 […] 100000003 1 71 F 0 1 0 […] 100000004 0 80 M 1 0 0 […] 100000005 0 91 F 0 0 0 […] […] […] […] […] […] […] […] […] The columns in my table are as follows: Patient ID: Uniquely identifies a patient. There will be one row for one patient. Arthritis_Ind: Indicates of the patient was diagnosed with arthritis in 2018, with a 1 or 0. Age: Patient age (Integer). Gender: Patient gender (M or F). Diag_XX_Ind: An indicator variable, 1 or 0, that indicates that a member received a diagnosis at sometime in 2017, where XX represents an ICD-10 diagnosis code. The problem is, there are 18,000 ICD-10 diagnosis codes, and I have data on hundreds of thousands of patients. I'm running into memory issues creating a table with this many columns and creating a random forest or xgboost model off of it. I strongly suspect that, at most, only a few dozen ICD-10 diagnosis codes will predict if a patient has arthritis. Any advice as to how I can reduce the list of 18,000 potential ICD-10 diagnosis codes down to a more manageable number, before creating a random forest or xgboost model? Are there any methods I could use to reduce the number of variables before hand? Should I restructure my data in some way? Any advice would be much appreciated. Thanks!
