[site]: crossvalidated
[post_id]: 521855
[parent_id]: 521853
[tags]: 
F(k, r) = y where k = Z and r = R In python: input: print(type(k), type(r)) output: correct? Assuming running this function is not too costly to compute, why not have it generate results using sklearn's randomsearch, store the input and output in a table (columns = [y, k, r]) and use that table to train a neural network (or one of many other model types for that matter)? A sensible use case for this type of application would likely be where you have a bunch of measurements of a system F(k, r) and you would like to fill in the blanks in between the measurements. Or if there is a time dimension, maybe you would like to forecast y_t+1. In your question it reads as if you plan to have a neural network with at most 2 inputs and 1 output. Most likely not the best way to go about solving whatever problem you want this to solve. Option 1 sounds like a worse option than option two, but its hard to judge not knowing the problem or the properties of F (like, how difficult is F to compute to generate training data, what is the application of your model?)
