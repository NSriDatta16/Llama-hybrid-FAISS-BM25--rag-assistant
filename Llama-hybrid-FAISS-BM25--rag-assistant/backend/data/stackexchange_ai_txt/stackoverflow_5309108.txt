[site]: stackoverflow
[post_id]: 5309108
[parent_id]: 
[tags]: 
Gnu Makefile, compile should fail

I have a collection of examples that I want to make sure they fail to compile . What is the best way to to that with a * GNU Makefile ? test_nocompile: $(NOCOMPILE_CPP) for cpp in $(NOCOMPILE_CPP) ; do \ echo === $$cpp === ; \ if $(CXX) $(CXXFLAGS) -c -o fail.o $$cpp ; then echo ok ; else exit 1; fi ; \ done As you can see, I have several difficulties here: Accessing the shell-for variable cpp : $cpp , \$cpp and $$cpp both do not work. Even with my if the make stops after the first g++-compile fails. But thats exactly what I want. I want failing to g++-compile to be considered the correct behaviour. Shell-for-loops in Makefiles are not the best idea. Is there a better way? I can not think of one, because since I expect the compiles to fail, I do not have a correct target, right? Advanced and optional: If I could manage to have the fail-check above working, I could try a second pass of compilation, this time with an additional -DEXCLUDE_FAIL , which takes out the offending line from my examples, and then the code should compile. Any idea? or should write a Python script for that...? ;-) Edit: I think my "advanced and optional" gave me a very good idea right now. I could use makes dependency checking again. Just a rough sketch here: NOCOMPILE_CPP := $(wildcard nocompile/ *.cpp) NOCOMPILE_XFAILS := $(addsuffix .xfail,$(basename $(NOCOMPILE_CPP))) %.xfail: %.cpp if $(CXX) $(CXXFLAGS) -o $@ $ Is this elegant? Then I only have to work out how -DEXCLUDE_FAILCODE can make the failing tests work.... Non-trivial, but doable. I think that could do it, right?
