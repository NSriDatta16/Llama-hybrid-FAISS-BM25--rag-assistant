[site]: stackoverflow
[post_id]: 400945
[parent_id]: 
[tags]: 
Namespaces and folder structures in c# solutions: how should folders on disk be organised?

First off, let’s agree that namespace should match folder structure and that each language artefact should be in its own file. (see Should the folders in a solution match the namespace? ). The next question is how the folders should actually be organised on disk. Suppose I have ClassC in the A.B.C namespace and ClassD in the A.B.C.D namespace. Let’s also assume that each namespace is built into its own assembly (project) and that namespaces have dependencies from right to left as per accepted best practice (A.B.C.D can depend on A.B.C which can depend on A.B which can depend on A). I appreciate that each namespace doesn’t have to be in a separate assembly but in the general case we will have some namespaces in separate assemblies and my example illustrates that. I can see (at least) two ways to create the folder tree – which I’ll call “nested folders” and “flat folders”: 1 - Nested folders: A --A.csproj --B ----A.B.csproj ----C ------A.B.C.csproj ------classC.cs ------D --------A.B.C.D.csproj --------classD.cs OR 2 – Flat folders: A --A.csproj A.B --A.B.csproj A.B.C --A.B.C.csproj --classC.cs A.B.C.D --A.B.C.D.csproj --classD.cs You will see I’ve made a few assumptions already: Each project file has a fully qualified name (FQN) based on the namespace. Each class file uses a non-FQN Nested folders seems more natural (we all like hierarchies), but may be a bit harder to navigate in large solutions: When you look at your solution in VS, it shows a flat list of projects rather than a nested view. This looks more like “flat folders” so there may be merit in organising the folders on disk to match the view in VS. If you look in each folder on disk you will see the folder artefacts for that project plus the sub folder for the namespace: taking C as an example: C --bin --D --obj --Properties --A.B.C.csproj --classC.cs Depending on D’s real name it may not be obvious that D is a namespace folder rather than an organisational folder in the C namespace. I know we’ve had folders and namespaces from day one in .NET (8 or 9 years ago) and Java before that, but, personally speaking, we don’t appear to have come to a consensus on best practice project organisation for large solutions. I’d be really interested to find out what you all think. Thanks Michael
