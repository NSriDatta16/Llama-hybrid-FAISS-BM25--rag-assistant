[site]: stackoverflow
[post_id]: 2134109
[parent_id]: 2133245
[tags]: 
My preferred way is: final boolean result; final Collection c; result = test(foo); if(result) { c = cOne;; } else { c = cOther;; } c.add(foo); First off I don't like making calls and not assigning the value to temp variable (the test(foo) call) for two reasons: it is easier to debug (System.out.println, or even the debugger - if the method has side effects then just looking at it in a debugger will call it again - thus causing the side effects). even if there are no side effects, it discourages you from calling it more than once, which make the code more efficient. The compiler/hotspot should deal with the removal of the unneeded temp variable. Secondly I don't like having code where, if you blur your eyes, it looks the same. Having cOne.add(foo) and cOther.add(foo) "look" the same if you "blur" your eyes. If, for example, you were changing it to a List and using add(int, E) instead of add(E) then you only have one place to change the code, which means less change of making a mistake (like cOne.add(1, foo) and cOther.add(2, foo) when they should both be add(1, foo)). EDIT (based on the comment) There are a couple of choices, it depends on how you have the code layed out. I would probably go with something like: private Collection chooseCollection(final Whatever foo, final Collection a, final Collection b) { final boolean result; final Collection c; result = test(foo); // could use a conditional - I just hate using them if(result) { c = a; } else { c = b; } return (c); } and then have something like: for(......) { final Collection c; final Whatever foo; foo = ...; c = chooseCollection(foo, cOne, cOther); c.add(foo; } Essentially I make a method for anything inside of a { } block if it makes sense (and usually it does). I like to have a lot of small methods.
