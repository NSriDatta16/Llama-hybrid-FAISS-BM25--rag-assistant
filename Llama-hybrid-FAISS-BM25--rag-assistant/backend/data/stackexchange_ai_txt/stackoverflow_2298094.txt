[site]: stackoverflow
[post_id]: 2298094
[parent_id]: 2297598
[tags]: 
Here's an example from my personal stuff. It can be really complicated. Note that its not easy to move arrays over as pointers, so you should look at how one does that in the c# side. This should hit a lot of the major data types. You must make sure your elements line up EXACTLY. Otherwise it will look like its working, but you'll get bad ptrs (at best). I had a great deal of trouble when moving this struct, and this was the only approach that worked. Good luck Function sig - [DllImport("stochfitdll.dll", EntryPoint = "Init", ExactSpelling = false, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)] public static extern void Init([MarshalAs(UnmanagedType.LPStruct)] ModelSettings settings); C++ side #pragma pack(push, 8) struct ReflSettings { LPCWSTR Directory; double* Q; double* Refl; double* ReflError; double* QError; int QPoints; double SubSLD; double FilmSLD; double SupSLD; int Boxes; double FilmAbs; double SubAbs; double SupAbs; double Wavelength; BOOL UseSurfAbs; double Leftoffset; double QErr; BOOL Forcenorm; double Forcesig; BOOL Debug; BOOL XRonly; int Resolution; double Totallength; double FilmLength; BOOL Impnorm; int Objectivefunction; double Paramtemp; LPCWSTR Title; }; #pragma pack(pop) C# side - [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 8)] public class ModelSettings:IDisposable { #region Variables public string Directory; public IntPtr Q; public IntPtr Refl; public IntPtr ReflError; public IntPtr QError; public int QPoints; public double SubSLD; public double SurflayerSLD; public double SupSLD; public int Boxes; public double SurflayerAbs; public double SubAbs; public double SupAbs; public double Wavelength; public bool UseAbs; public double SupOffset; public double Percerror; public bool Forcenorm; public double Forcesig; public bool Debug; public bool ForceXR; public int Resolution; public double Totallength; public double Surflayerlength; public bool ImpNorm; public int FitFunc; public double ParamTemp; public string version = "0.0.0"; [XmlIgnoreAttribute] private bool disposed = false; #endregion public ModelSettings() { } ~ModelSettings() { Dispose(false); } #region Public Methods public void SetArrays(double[] iQ, double[] iR, double[] iRerr, double[] iQerr) { //Blank our arrays if they hold data if (Q == IntPtr.Zero) ReleaseMemory(); int size = Marshal.SizeOf(iQ[0]) * iQ.Length; try { QPoints = iQ.Length; Q = Marshal.AllocHGlobal(size); Refl = Marshal.AllocHGlobal(size); ReflError = Marshal.AllocHGlobal(size); if (iQerr != null) QError = Marshal.AllocHGlobal(size); else QError = IntPtr.Zero; Marshal.Copy(iQ, 0, Q, iQ.Length); Marshal.Copy(iR, 0, Refl, iR.Length); Marshal.Copy(iRerr, 0, ReflError, iRerr.Length); if (iQerr != null) Marshal.Copy(iQerr, 0, QError, iQerr.Length); } catch (Exception ex) { //error handling } } #endregion #region IDisposable Members public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } private void Dispose(bool disposing) { if (!this.disposed) { // Call the appropriate methods to clean up // unmanaged resources here. // If disposing is false, // only the following code is executed. ReleaseMemory(); // Note disposing has been done. disposed = true; } } private void ReleaseMemory() { if (Q != IntPtr.Zero) { Marshal.FreeHGlobal(Q); Marshal.FreeHGlobal(Refl); Marshal.FreeHGlobal(ReflError); if (QError != IntPtr.Zero) Marshal.FreeHGlobal(QError); } } #endregion }
