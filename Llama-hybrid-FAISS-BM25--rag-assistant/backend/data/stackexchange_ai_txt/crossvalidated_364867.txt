[site]: crossvalidated
[post_id]: 364867
[parent_id]: 
[tags]: 
Is Reinforcement Learning the right choice for painting like Bob Ross?

My workplace is having a 2-week code challenge that involves producing an algorithm to reproduce 100 sample Bob Ross paintings as closely as possible given some constraints: "Paintings" are submitted as a JSON file containing a background color and a series of "brush strokes". Brush strokes have a start point, end point, radius, and color. There is a 500 stroke limit per painting. All 100 reference paintings have the exact same size and aspect ratio: 450x337. The server "paints" each submission and then does a per-pixel diff with the reference painting. Each pixel in the submitted painting is scored on a scalar 0-1 range based on how similar it is to the value of the source pixel and the score for the painting is an average of all of the pixel scores. The folks running the competition have released libraries for both painting and scoring images that can be run on the command line in MacOS / Linux. I feel like this problem should be amenable to ML since we have a mechanism for fine-grained scoring of each attempt that the algorithm tries. Generating and scoring a painting only takes about 200ms. Unfortunately, I'm mostly just an ML fanboy (I listen to a lot of podcasts) and don't know how I should model the problem. Letting the algorithm make 500 completely random strokes and then grading the output would take forever to converge on something useful. I thought about limiting the color space of the strokes to a set of the 64 most frequent colors in each painting (by running a histogram before I start painting) and also limiting the algorithm's brush size selection. For the record, simply submitting a image that is a solid field of the most common color earned me a 65% score. The currently winning algorithms are mostly just converting the paintings into grids and putting a dot of the average color in each sector on top of each one.
