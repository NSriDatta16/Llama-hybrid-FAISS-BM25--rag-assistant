[site]: stackoverflow
[post_id]: 1050281
[parent_id]: 1049989
[tags]: 
If you sum the formula you have over all vertices (and then divide by the number of verts) you will have calculated the average percentage error in position for all vertices. However, this percentage error is probably not quite what you want, because vertices closer to the origin will have a greater "percentage error" for the same displacement because their magnitude is smaller. If you don't divide by anything at all, you will have the average drift in world units, which may be exactly what you want: average_drift = sum(1->numvertices, |actual - reference|) / numvertices You may want to divide by something more appropriate to your particular situation to get a meaningful unitless number. If you divide average_drift by the height of your model, you will have the error as a percentage of the model size, which could be useful. If individual vertices are likely to have more error if they are a long distance from a vertex 'parented' to them, as could be the case if they are vertices of a jointed model, you could divide each error by the length of their parent joint to get the average error normalised for joint orientation -- i.e. what the average drift would be if each joint were of unit length: orientation_drift = sum(1->numvertices, |actual - reference| / jointlength) / numvertices
