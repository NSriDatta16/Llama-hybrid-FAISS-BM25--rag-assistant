[site]: stackoverflow
[post_id]: 3838555
[parent_id]: 
[tags]: 
How to better organize a class with a lot of fields?

I am currently implementing something similar to an hospital intra site, where doctors can see info about their patients. Currently, I have a LOT of info regarding each Client: his full name, date of birth, blood type, where he lives, diseases he had, etc. My first attempt was something of the form: class Client { private string fullName; private Date dateOfBirth; ... public Get/Set FullName() public Get/Set DateOfBirth() ... } which is basically putting everything together under the same class. After a while I decided that maybe I should pack together similar concepts into a more general one. For example, I can encapsulate both userName and password into the same concept -- LoginInfo , for example. If doing this, should I provide all the getters/setters on the Client class that delegate the work to the correct inner concepts, or should I just put getters for the concepts themselves? The first approach would shield the outside world to the Client class implementation, but then maybe, we wouldn't win that much by having all these innner concepts. Should code outside the Client class even know the different kinds of concepts that'd use inside it? Any other idea / approach? I still don't know much about what methods I'll need to have on the Client class. Maybe if there are a lot, it'd be definetely good idea to use small inner concepts to group similar methods in themselves, instead of having such a loose coupled big class. The data of Client will all be persisted using a standard database, if that makes any difference.
