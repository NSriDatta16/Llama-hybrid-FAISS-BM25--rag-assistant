[site]: stackoverflow
[post_id]: 410257
[parent_id]: 409495
[tags]: 
Here's another possibility. Validation is done through a proxy or decorator on the Domain object: public class ServiceValidationProxy : Service { public override DateTime EndDate { get {return EndDate;} set { if(value > Contract.EndDate) throw new InvalidOperationexception(); base.EndDate = value; } } } Advantage: Instant validation. Can easily be configured via an IoC. Disadvantage: If a proxy, validated properties must be virtual, if a decorator all domain models must be interface-based. The validation classes will end up a bit heavyweight - proxys have to inherit the class and decorators have to implement all the methods. Naming and organization might get confusing.
