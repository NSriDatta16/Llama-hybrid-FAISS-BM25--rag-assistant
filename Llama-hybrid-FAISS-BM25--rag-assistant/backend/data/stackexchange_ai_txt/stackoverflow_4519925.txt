[site]: stackoverflow
[post_id]: 4519925
[parent_id]: 4513672
[tags]: 
This seems to work for me. r = re.compile(ur'[^\x09\x0A\x0D\x20-\x7E\x85\xA0-\xFF' \ + ur'\u0100-\uD7FF\uE000-\uFDCF\uFDE0-\uFFFD]') def escapeInvalidXML(string): def replacer(m): return " "+('%04X' % ord(m.group(0)))+" " return re.sub(r,replacer,string) example: >>> s='this is a \x01 test \x0B of something' >>> escapeInvalidXML(s) 'this is a 0001 test 000B of something' >>> s2 = u'this is a \x01 test \x0B of \uFDD0' >>> escapeInvalidXML(s2) u'this is a 0001 test 000B of FDD0 ' Character ranges from http://www.w3.org/TR/2006/REC-xml-20060816/#charsets , and I haven't escaped everything, just the ones below \uFFFF. Update: Oops, forgot to adapt to the startElement/characters methods of SAX, & deal properly with multiple lines: import re import xml.sax.xmlreader import xml.sax.saxutils r = re.compile(ur'(.*?)(?:([^\x09\x0A\x0D\x20-\x7E\x85\xA0-\xFF' \ + ur'\u0100-\uD7FF\uE000-\uFDCF\uFDE0-\uFFFD])|([\n])|$)') attr0 = xml.sax.xmlreader.AttributesImpl({}) def splitInvalidXML(string): list = [] def replacer(m): g1 = m.group(1) if (len(g1) > 0): list.append(g1) g2 = m.group(2) if (not g2 == None): list.append(ord(g2)) g3 = m.group(3) if (not g3 == None): list.append(g3) return "" re.sub(r,replacer,string) return list def submitCharacters(x, string): for fragment in splitInvalidXML(string): if (isinstance(fragment,int)): x.startElement("u", attr0) x.characters('%04X' % fragment) x.endElement("u") else: x.characters(fragment) def test1(fname): with open(fname,'w') as f: x = xml.sax.saxutils.XMLGenerator(f) x.startDocument() x.startElement('document',attr0) submitCharacters(x, 'this is a \x01 test\nof the \x02\x0b xml system.') x.endElement('document') x.endDocument() test1('test.xml') This produces: this is a 0001 test of the 0002 000B xml system.
