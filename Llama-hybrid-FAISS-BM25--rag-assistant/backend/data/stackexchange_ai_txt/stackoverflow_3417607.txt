[site]: stackoverflow
[post_id]: 3417607
[parent_id]: 3416701
[tags]: 
The question of whether to make use of an explicit threading implementation is normally a design consideration as others have mentioned here. Trying to implement concurrency as an afterthought usually requires a lot of radical and wholesale changes. Keep in mind that simply throwing threads into an application doesn't inherently increase performance or speed, given that there is a cost in managing each thread, and also perhaps some memory overhead (not to mention, debugging it can be fun). From my experience, the most common place to implement a threading design has been in Windows Services (background applications) and on applications which have had use case scenarios where a volume of work could be easily split up into smaller parcels of work (and handed off to threads to complete asynchronously). As for examples, you could check out the Microsoft Robotics Studio (as far as I know there's a free version now) - it comes with an redistributable (I can't find it as a standalone download) of the Concurrency and Coordination Runtime , there's some coverage of it on Microsoft's Channel 9 . As mentioned by others the Parallel Extensions team ( blog is here ) have done some great work with thread safety and parallel execution and you can find some samples/examples on the MSDN Code site .
