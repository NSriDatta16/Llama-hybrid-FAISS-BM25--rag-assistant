[site]: stackoverflow
[post_id]: 1735519
[parent_id]: 1568500
[tags]: 
There is a way with Criteria to return a list of Invoices along with the total payments for that invoice. In theory, the answer is that you can use a grouping property on a projection query to group the result into total payment by invoice. The second part is that you could use a transient "totalPayment" value on the Invoice and select the projection into the Invoice structure using a transformer. This would be easier than dealing with an ArrayList of different properties but would depend on what you needed to use the results for. To demonstrate this, here is the important part of a small Invoice class: public class Invoice{ private String name; @Transient private int totalPayments; @OneToMany Set payments = new HashSet (); // getters and setters ... } Then this is the criteria that you could use Criteria criteria = session.createCriteria(Invoice.class) .createAlias("payments", "pay") .setProjection(Projections.projectionList() .add(Projections.groupProperty("id")) .add(Projections.property("id"), "id") .add(Projections.property("name"), "name") .add(Projections.sum("pay.total").as("totalPayments"))) .setResultTransformer(Transformers.aliasToBean(Invoice.class)); List projected = criteria.list(); And this is the sql that is generated Hibernate: select this_.id as y0_, this_.id as y1_, this_.name as y2_, sum(pay1_.total) as y3_ from invoice this_ inner join invoice_payment payments3_ on this_.id=payments3_.invoice_id inner join payment pay1_ on payments3_.payments_id=pay1_.id group by this_.id
