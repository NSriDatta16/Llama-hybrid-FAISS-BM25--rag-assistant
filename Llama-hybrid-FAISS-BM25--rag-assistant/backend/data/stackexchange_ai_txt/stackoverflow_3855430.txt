[site]: stackoverflow
[post_id]: 3855430
[parent_id]: 3855334
[tags]: 
I usually use nested classes to embed finders objects (to use with std::find_if ) into my specific types. Something like: // Dummy example class Foo { public: class finder { public: finder(int value) : m_value(value) {}; bool operator()(const Foo& foo) { return (foo.m_int_value == value); } private: int m_value; }; private: int m_int_value; friend class finder; }; Then: vector foo_list; vector ::iterator foo = std::find_if(foo_list.begin(), foo_list.end(), Foo::finder(4)); This could of course be done without the use of nested classes. But I find it quite elegant because the finder has no use outside of the class definition: If I ever delete the class in case of code-refactoring the finder should be deleted as well.
