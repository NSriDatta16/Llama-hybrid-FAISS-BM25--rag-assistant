[site]: stackoverflow
[post_id]: 573583
[parent_id]: 573543
[tags]: 
Well, I have to say, regardless of whether the C#, Scala, or Groovy fans would like to agree or not, I think some of the suggestions here are completely daft. 1) Anyone who makes the mistake of calling Thread.run instead of Thread.start should NOT be programming. Here the programmer is at fault not the framework or language. 2) Disallow overloading? Why, why on earth would you do this. Again this makes no sense, what problems does it cause? I find overloading very very useful in any number of scenarios. 3) What is the real difference between factory methods and constructors. This is what constructors are, they are factory methods that create instances of the object. If you want or prefer factory methods, then IMPLEMENT THEM...not hard 4) == invoking equals(), operator overloading is one of the worst ideas to ever come in to the domain of object orientation. Do you realise how complex C++ programs can become with an array of overloaded operators. Its not obvious, and requires time consuming analysis. 5) Java would completely die if deprecated methods were removed. Why not just ignore them? Every language is heading in this direction, no language is perfect and mistakes can only be deprecated if developers are to continue with it and upgrade. Although some of your comments make sense, I find that inexperience tends people twards principles and ideals and with experience you realize that pragmatism is what matters. Why is making Java perfect what matters, surly its what you can do with it. I see closures, reified generics, and properties as the only fundamental enhancements needed. Java is not a toy for recreation, its here and popular because businesses are build on it and rely on it.
