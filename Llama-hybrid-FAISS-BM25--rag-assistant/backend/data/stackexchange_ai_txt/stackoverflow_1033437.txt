[site]: stackoverflow
[post_id]: 1033437
[parent_id]: 1033359
[tags]: 
Databases (I'm guessing you're talking about relational DBs) will be useful when you have to store data in a STRUCTURED way, having relations between elements stored and kept on disk. The idea is that you'll be able to manipulate this data while keeping things CONSISTENT. How would you process a 1 Tb data set made of : menus dishes ingredients ? How will you remove a dish from a given menu ? How to add simply a price to a menu without rewriting all your data and your code base ? All this while keeping fast-paths on your data to be able not to read it all from disk to find menus more expensive than X ? (they're called index) ? All of this allowing two users to access (ie read, modify) the data concurrently ? Some alternatives, such as storing an XML file (with a structure) or a memory dump on disk, or some kind of serialization will need you to load everything to memory, process it with structure and dump everything to disk to change your data while keeping it organized. From there, you can use different databases, (relational in-memory or on disk, in process or not, document based such as couchdb, ...) with different scalability / simplicity tradeoffs, ranging from sqlite to Oracle/postgresql. The approach I'd propose is to learn what a relational DB really is, understand it, play wit it a little bit (use sqlite) then try to understand how it might apply to a given problem. Just understand that firefox browser bookmarks, iPhone data or the backend of most enterprise apps (booking tickets) are stored as a database ... If you ever stored a list of things not number-related in excel and used some filters, well you should maybe have used a DB for this information.
