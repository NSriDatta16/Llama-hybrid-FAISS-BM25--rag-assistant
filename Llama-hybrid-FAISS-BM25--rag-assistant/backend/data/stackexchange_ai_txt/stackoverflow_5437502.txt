[site]: stackoverflow
[post_id]: 5437502
[parent_id]: 5434721
[tags]: 
As was mentioned in the comments, I'd write a custom collection that uses both a SortedDictionary and a regular Dictionary as its backing store. It doubles your memory usage, but it's the best performance for lookups and iteration. Modifications will be slower, but it sounds like you're mostly interested in fast accesses. public class DoubleDictionary : IDictionary { private Dictionary backingHash = new Dictionary (); private SortedDictionary backingTree = new SortedDictionary (); // For all the modify methods, do it in both. // For all retrieval methods, pick one of the backing dictionaries, and just use that one. // For example, contains and get on the Hash, iteration on the Tree. }
