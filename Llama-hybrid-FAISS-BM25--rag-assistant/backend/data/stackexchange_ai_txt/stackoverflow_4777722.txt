[site]: stackoverflow
[post_id]: 4777722
[parent_id]: 4777698
[tags]: 
MSDN Page on GetSchema and the collection PrimaryKeys . However it does not work with SQL Server, as it says at the top Some schema collections are incomplete, such as SQL Server, which does not contain a collection for primary keys. In fact, the reading of it implies that GetSchema is not reliable as a means of cross-db schema retrieval. MSDN: The following code listing shows how to use the custom SqlClientSchema.xml file to override the default GetSchema operations and return a PrimaryKeys collection. The other option which is supported by most major RDBMS is to query information_schema for all the primary keys. select * from information_schema.TABLE_CONSTRAINTS where CONSTRAINT_TYPE = 'PRIMARY KEY' You can join this to KEY_COLUMN_USAGE for the columns by position order select PK.TABLE_SCHEMA, PK.TABLE_NAME, C.ORDINAL_POSITION, C.COLUMN_NAME from information_schema.TABLE_CONSTRAINTS PK inner join information_schema.KEY_COLUMN_USAGE C on C.TABLE_SCHEMA = PK.TABLE_SCHEMA and C.TABLE_CATALOG = PK.TABLE_CATALOG and C.TABLE_NAME = PK.TABLE_NAME where PK.CONSTRAINT_TYPE = 'PRIMARY KEY' Take note that even though information_schema has good support, it can be different in small ways. In SQL Server, table_catalog (=db name) is always limited to the current db, whereas in MySQL, it will return tables from any catalog (db), so you may need a catalog filter to be accurate.
