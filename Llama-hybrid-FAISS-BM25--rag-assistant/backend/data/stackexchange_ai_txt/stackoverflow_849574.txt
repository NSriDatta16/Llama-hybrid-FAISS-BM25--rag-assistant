[site]: stackoverflow
[post_id]: 849574
[parent_id]: 849463
[tags]: 
Generally, using include s is not the answer with Django templates. Let me answer your question on several fronts. First, let me address the sidebar. Are nearly all the common pages going to be using that sidebar? Put it in Base . Don't override those sidebar blocks (i.e. don't write them at all in your Story_* templates). Is this sidebar unique to the Story_* templates? Make another template called, say, Story_base and extend that. This is akin to making an abstract superclass in Java. (Answer was in my head, but wording was mercilessly ripped off from jpwatts.) Next, let me address template inheritance. Say you have a template named Story_list that extends Base . At this point, after just putting {% extends "Base" %} , Story_list is exactly Base . Anything else you put in Story_list is ignored, because the template is already complete. The only thing you can do now is override blocks that have been defined in Base . Finally, let me address include s. Try to always avoid them. Other templating engines, such as PHP, seem to encourage using include s. However, this can lead to less manageable templates in the long run. It's slightly harder to glance at an included snippet and immediately ascertain its place in your template hierarchy. They're also harder to refactor into the template hierarchy, especially if you include them at several levels (once in Base , twice in Story_base , once in some of the Story_* , etc.).
