[site]: stackoverflow
[post_id]: 557655
[parent_id]: 555807
[tags]: 
Code Coverage doesn't mean much. What matters is whether all (or most) of the argument values that affect the behavior are covered. For eg consider a typical compareTo method (in java, but applies in most languages): //Return Negative, 0 or positive depending on x is y int compareTo(int x, int y) { return x-y; } As long as you have a test for compareTo(0,0) , you get code coverage. However, you need at least 3 testcases here (for the 3 outcomes). Still it is not bug free. It also pays to add tests to cover exceptional/error conditions. In the above case, If you try compareTo(10, Integer.MAX_INT) , it is going to fail. Bottomline: Try to partition your input to disjoint sets based on behavior, have a test for at least one input from each set. This will add more coverage in true sense. Also check for tools like QuickCheck (If available for your language).
