[site]: crossvalidated
[post_id]: 26659
[parent_id]: 26430
[tags]: 
In order to fully understand my answer and the references that I will provide, I will first (informally) introduce some concepts related to biology - most of the techniques that I will refer to are used in computational biology and therefore most of the reference you will find will assume a basic familiarity with the terms. A gene is a unit from a living organism that can be "expressed" when required - that is, the gene will perform the action that it is associated with (often by coding the proteins that it represents that will perform the desired action). e.g. a cell may build a variable amount of proteins from a gene that regulate its metabolism. Biologists are often interested in tracking these genes and/or their expressions through time or evolution. In your case, you are interested in understanding how the individual actions of the users (similar to a gene) are expressed through activity over time. A user (similar to the organism) has several different actions that he can perform and we are assuming that the type of user and his current situation has some form of correlation with the actions that he will perform. I would consider looking at two or three different techniques that are available - biclustering (sometimes row and column clustering, see figure 1 in link) and perhaps some sort of evolutionary tree (which is taken from this article ) or a Hidden Markov Model. In the case of biclustering, the idea is as follows, place the users on one axis and the actions on another axis of a matrix. The values in this matrix will represent the number of actions that said user has made of the relevant type. Reorder the users and actions in a way that groups similar items near each other 1 , 2 and then use some form of clustering to group your users automatically ( some algorithms can be find here ). The result of biclustering is that you can group users into subgroups and identify their traits in terms of actions. Note that in this case, you will only have a "snapshot" of users and their actions - in order to better understand the trends through which user actions evolve, you might need to perform several biclusters for different scenarios. Perhaps you might create biclusters for users that have spent a particular amount of time using Stack Exchange (say 1month, 3months, 6months, 1year) or users that have undergone a particular event (say just been awarded a badge yesterday). This will allow you to analyse the trends better - although the exact statistics and interpretation should be properly interpreted. As @AndyW pointed out in his link to How can I improve my analysis of the effects of reputation on voting? there are several problems that can arise from the data. Misrepresentation, missing data, inaccurate data and small amount of data are but some problems that you might encounter. Baldi and Brunak explain some of the problems that are typically encountered in data found in biological databases. In particular note that there might be non-trivial redundancies in your data that you might need to normalise in some way (e.g. the same user in different stack exchange forums). The alternative technique that I might suggest is based on evolutionary trees and/or Markov Models (HMM) - I grouped the discussion on these techniques because you could potentially use them in a similar manner. In this case, we might visualise a starting point from which all users start and the users "evolve" or "change state" due to different phenomena. After each state change, they are likely to perform a different volume and/or proportion of actions. The main problem here will be creating the ideal taxonomy or HMM topology. If (perhaps through biclustering as above) we identify four different types of user, a user will start by being assigned to one of these states and while in each of these state he will perform a different volume and proportion of actions. From this point onwards I will focus on the use of HMMs as evolutionary trees are not designed to model cycles or transfers from one groups to another - which might make them better suited. The work to be done in this case is to train the HMM from the data and identify how likely a user is to move from one state to another - notably from one state to the inactive user end state, where a user is no longer active. This will allow you to create a model of user behaviour. Now, once you have this HMM trained, all you need to do is get the list of user actions and trace this user through the most probable path - while in a particular state a user will be considered to be "of that type". HTH
