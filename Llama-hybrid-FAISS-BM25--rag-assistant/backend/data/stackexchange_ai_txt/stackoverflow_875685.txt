[site]: stackoverflow
[post_id]: 875685
[parent_id]: 
[tags]: 
Simplifying algorithm testing for researchers.

I work in a group that does a large mix of research development and full shipping code. Half the time I develop processes that run on our real time system ( somewhere between soft real-time & hard real-time, medium real-time? ) The other half I write or optimize processes for our researchers who don't necessarily care about the code at all. Currently I'm working on a process which I have to fork into two different branches. There is a research version for one group, and a production version that will need to occasionally be merged with the research code to get the latest and greatest into production. To test these processes you need to setup a semi complicated testing environment that will send the data we analyze to the process at the correct time (real time system). I was thinking about how I could make the: Idea Implement Test GOTO #1 Cycle as easy, fast and pain free as possible for my colleagues. One Idea I had was to embed a scripting language inside these long running processes. So as the process run's they could tweak the actual algorithm & it's parameters. Off the bat I looked at embedding: Lua (useful guide ) Python (useful guide ) These both seem doable and might actually fully solve the given problem. Any other bright idea's out there? Recompiling after a 1-2 line change, redeploying to the test environment and restarting just sucks. The system is fairly complicated and hopefully I explained it half decently.
