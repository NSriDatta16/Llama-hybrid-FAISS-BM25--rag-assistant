[site]: stackoverflow
[post_id]: 3692019
[parent_id]: 3691641
[tags]: 
No - there are three specific experiences that you can offer the user, and there's reasons in many apps not to muddle them up Lightweight - pure web, client just needs to be able to run a browser - this can be further broken down into mobile clients, clients running in challenged environments (low cpu, low bandwidth,etc) Rich Internet Applications - Much heavier weight web applications - not so much traditional asp.net anymore (I hope) because the apps beat the hell out of the comms channel (viewstate) and the host server (often postbacks cause scads of code to run on the server just for 3 lines of 'real' functionality) - I'd propose jQuery for it's wide playing field, Silverlight for the more limited playground but the undeniably rich experience, and wonder when the promises of HTML 5 will really be in the market Thick Client Applications - custom code, access to the file system, 3D rendering, all the bits that really need local code with access to local resources Now that that is said, the positive spin on your question relates to factoring your applications well - pay attention to the separation between your tiers, especially with respect to the separation between your presentation tier and the logic tiers it talks to - 1) Use a global communications mechanism - errr, that means REST, cause anyone can speak it - all your clients can use it - SOAP isn't so globally usable 2) Don't be monolithic, be service oriented - break your functionality up so specific bits can be accessed directly - this means its easy for jQuery and rich clients to easily access the bits they need when they need them - you want to be in the position that you don't care who/what the client is (for lightweight you, for all else them) you create the service once and everybody uses it in more or less the same fashion 3) Make presentation unique for the different media/delivery types/ make services uniform - (that said, with rich clients it sometimes pays to offload service processing onto the client to spare your server and increase your scalability)
