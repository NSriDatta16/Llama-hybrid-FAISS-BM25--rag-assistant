[site]: stackoverflow
[post_id]: 1819945
[parent_id]: 1819523
[tags]: 
Use neither min nor max but something in between. Erring on the side of overestimation is better. It has much nicer cost behavior in the long term. To overcome the stress due to underestimation, people may take shortcuts that are not beneficial in the long term. For example, taking extra technical debt thast has to be paid back eventually, and it comes back with an interest. The costs grow exponentially. The extra cost from inefficiency due to student's syndrome behaves linearly. Estimates and targets are different. You (or your managers and customers) set the targets you need to achieve. Estimates tell you how likely you are to meet those targets. Deadline is one sort of target. The deadline you choose depends on what kind of confidence level (risk of not meeting the deadline) you are willing to accept. P50 (0.5 probability of meeting the deadline) is commonplace. Sometimes you may want to schedule with P80 or some other confidence level. Note that the probability curve is a long-tailed one and the more confidence you want, the longer you will need to allocate time for the project. Overall, I wouldn't spend too much time tracking individual tasks. With P50 targets half of them will be late in any case. What matters most is how the aggregate behaves. When composing individual tasks estimates into an aggregate, neither min or max is sensible. It's extremely unlikely that either all tasks complete with minimum time (most likely something like P10 time) or maximum time (e.g. P90 time): for n P10/P90 tasks the probability is 0.1^n. PERT has some techniques for coming up with reasonable task duration probability distributions and aggregating them to larger wholes. I won't go into the math here. Here's some pointer for further reading: Steve McConnell: Software Estimation - Demystifying the Black Art . It's quite readable and pragmatic but at least the 1st edition I have has some quirks in its math and otherwise. Richard D. Stutzke: Estimating Software-Intensive Systems - Projects, Products and Processes . It's a little more academic, harder read but for example explains the math better.
