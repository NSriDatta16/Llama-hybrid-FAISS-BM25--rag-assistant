[site]: stackoverflow
[post_id]: 1787751
[parent_id]: 1787725
[tags]: 
The Framework Design Guidelines recommend that properties should not depend on each other. It should always be possible to set the values of multiple properties in arbitrary order . Here are the options that is see: In this specific case: public class Travel { public int MinAirportArrival { get; set; } public int MinFlightTime { get; set; } public int AdditionalTravelTime { get; set; } public int TotalTravelTime { get { return MinAirportArrival + MinFlightTime + AdditionalTravelTime; } } } This takes advantage of the effect that the TotalTravelTime can be reconstructed from the three other values which can be indivually set without dependencies. A solution for the general case is to accept any value and validate the values when, for example, the instance is sent to storage. public class Travel { public int MinAirportArrival { get; set; } public int MinFlightTime { get; set; } public int TravelTime { get; set; } public void Save() { // validate TravelTime > MinAirportArrival + MinFlightTime } } Another option is to make the properties read-only and provide a method to batch update the values of the properties. public class Travel { public int MinAirportArrival { get; private set; } public int MinFlightTime { get; private set; } public int TravelTime { get; private set; } public void UpdateTimes( int minAirportArrival, int minFlightTime, int travelTime) { // validate travelTime > minAirportArrival + minFlightTime MinAirportArrival = minAirportArrival; MinFlightTime = minFlightTime; TravelTime = travelTime; } } Alternatively, you can make Travel objects immutable and use a constructor, factory method or mutable builder object to create instances. Constructor: public class Travel { public Travel(int minAirportArrival, int minFlightTime, int travelTime) { // validate travelTime > minAirportArrival + minFlightTime } public int MinAirportArrival { get; } public int MinFlightTime { get; } public int TravelTime { get; } } Factory method: public class Travel { public static Travel CreateTravel( int minAirportArrival, int minFlightTime, int travelTime) { // validate travelTime > minAirportArrival + minFlightTime return new Travel(minAirportArrival, minFlightTime, travelTime); } private Travel(int minAirportArrival, int minFlightTime, int travelTime); public int MinAirportArrival { get; } public int MinFlightTime { get; } public int TravelTime { get; } } Builder class: public class TravelBuilder { public int MinAirportArrival { get; set; } public int MinFlightTime { get; set; } public int TravelTime { get; set; } public Travel BuildTravel() { // validate TravelTime > MinAirportArrival + MinFlightTime return new Travel(MinAirportArrival, MinFlightTime, TravelTime); } } Examples of all three options can be found in the .NET framework.
