[site]: stackoverflow
[post_id]: 225112
[parent_id]: 225088
[tags]: 
Guids for filenames, automatically expanding folder hierarchy with no more than a couple of thousand files/folders in each folder. Backing up new files is done by backing up new folders. You haven't indicated what environment and/or programming language you are using, but here's a C# / .net / Windows example: using System; using System.IO; using System.Xml.Serialization; /// /// Class for generating storage structure and file names for document storage. /// Copyright (c) 2008, Huagati Systems Co.,Ltd. /// public class DocumentStorage { private static StorageDirectory _StorageDirectory = null; public static string GetNewUNCPath() { string storageDirectory = GetStorageDirectory(); if (!storageDirectory.EndsWith("\\")) { storageDirectory += "\\"; } return storageDirectory + GuidEx.NewSeqGuid().ToString() + ".data"; } public static void SaveDocumentInfo(string documentPath, Document documentInfo) { //the filestream object don't like NTFS streams so this is disabled for now... return; //stores a document object in a separate "docinfo" stream attached to the file it belongs to //XmlSerializer ser = new XmlSerializer(typeof(Document)); //string infoStream = documentPath + ":docinfo"; //FileStream fs = new FileStream(infoStream, FileMode.Create); //ser.Serialize(fs, documentInfo); //fs.Flush(); //fs.Close(); } private static string GetStorageDirectory() { string storageRoot = ConfigSettings.DocumentStorageRoot; if (!storageRoot.EndsWith("\\")) { storageRoot += "\\"; } //get storage directory if not set if (_StorageDirectory == null) { _StorageDirectory = new StorageDirectory(); lock (_StorageDirectory) { string path = ConfigSettings.ReadSettingString("CurrentDocumentStoragePath"); if (path == null) { //no storage tree created yet, create first set of subfolders path = CreateStorageDirectory(storageRoot, 1); _StorageDirectory.FullPath = path.Substring(storageRoot.Length); ConfigSettings.WriteSettingString("CurrentDocumentStoragePath", _StorageDirectory.FullPath); } else { _StorageDirectory.FullPath = path; } } } int fileCount = (new DirectoryInfo(storageRoot + _StorageDirectory.FullPath)).GetFiles().Length; if (fileCount > ConfigSettings.FolderContentLimitFiles) { //if the directory has exceeded number of files per directory, create a new one... lock (_StorageDirectory) { string path = GetNewStorageFolder(storageRoot + _StorageDirectory.FullPath, ConfigSettings.DocumentStorageDepth); _StorageDirectory.FullPath = path.Substring(storageRoot.Length); ConfigSettings.WriteSettingString("CurrentDocumentStoragePath", _StorageDirectory.FullPath); } } return storageRoot + _StorageDirectory.FullPath; } private static string GetNewStorageFolder(string currentPath, int currentDepth) { string parentFolder = currentPath.Substring(0, currentPath.LastIndexOf("\\")); int parentFolderFolderCount = (new DirectoryInfo(parentFolder)).GetDirectories().Length; if (parentFolderFolderCount
