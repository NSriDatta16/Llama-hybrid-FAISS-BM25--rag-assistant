[site]: stackoverflow
[post_id]: 1755462
[parent_id]: 1755437
[tags]: 
What "values" are you talking about suggesting? Code coverage works by inspecting which lines/methods/classes etc are executed during a particular session. This is typically used when running automated unit tests, but it needn't be (e.g. you can instrument a webapp before deploying it for smoke testing, to get an idea of what code paths you didn't cover in your ad-hoc tests). The way to increase coverage is simply to make sure you're calling more methods with arguments that execute more of the internal branches, within the context of whatever it is you're measuring (e.g. unit tests). No tool is going to tell you exactly what to write to do this - they highlight what hasn't been tested, and it's up to you to write the test that will do so. Unless your question was "which coverage tool gives the highest measurements for coverage", in which case it's a bad criterion for assessing suitability. EDIT - you also need to realise that the goal of tests is not to get good coverage scores . Code coverage is only useful to show what code is definitely not tested. A class can still have 100% coverage without having any useful tests (e.g. trivially, ones without any assertions - or more usually, ones whose assertions also pass for some failing values). Thus if you write tests solely with the intention of getting coverage up, your tests will be garbage and not give you anything. Write the tests initially thinking solely about the functionality of the class, and only when you think "I'm done", run it through a coverage tool. Use the output of the tool to let you see blocks of code that haven't been exercised, which may suggest you need to write more tests passing in different inputs. And above all, when writing tests always be sure of what it is you're testing and what output should constitute a pass and fail.
