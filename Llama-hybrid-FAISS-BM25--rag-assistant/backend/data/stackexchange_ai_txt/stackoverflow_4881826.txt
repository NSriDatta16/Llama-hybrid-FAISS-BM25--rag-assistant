[site]: stackoverflow
[post_id]: 4881826
[parent_id]: 4881784
[tags]: 
The upcase , reverse , next and swapcase methods all return String objects and all those methods are for... you guessed it, String objects! When you call a method (more often than not, like 99.9999% of the time) it returns an object. This object has methods defined on it which can then be called which explains why you can do this: "Test".upcase.reverse.next.swapcase You can even call reverse as many times as you like: "Test".reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse All because it returns the same kind of object, a String object! But you can't do this with your MyClass : x = My_Class.new x.a.b.c For that to work, the a method would have to return an object which has the b method defined on it. Right now, that seems like only instances of MyClass would have that. To get this to work you could make the return value of a the object itself, like this: def a @b += 2 self end Extrapolating this, the b method would also need to return self as the c method is available only on instances of the MyClass class. It's not important what c returns in this example, because it's the end of the chain. It could return self , it could not. Schr√∂dinger's cat method. Nobody knows until we open the box.
