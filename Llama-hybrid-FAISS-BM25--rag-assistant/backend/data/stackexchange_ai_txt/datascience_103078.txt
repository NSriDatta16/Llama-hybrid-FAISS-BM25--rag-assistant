[site]: datascience
[post_id]: 103078
[parent_id]: 103077
[tags]: 
You can try applying your preprocessor to your X_train and X_test : preprocessor = ColumnTransformer( transformers=[ ('num', numeric_transformer, numericas_all) ,('cat', categorical_transformer, categoricas_all) ]) X_train_pipe = preprocessor.transform(X_train) X_test_pipe = preprocessor.transform(X_test) Edit: Since you did not use any transformer that creates new columns like for example OneHotEncoder, this is very simple to get the feature names since those would be the same as the input matrix X (In case of using other encoders like the mentioned before you can use get_feature_names property) Just to make all in a single step I'm going to add an additional step to this preprocessor: from sklearn.preprocessing import FunctionTransformer from sklearn.pipeline import Pipeline names = X_train.columns.tolist() preprocessor = ColumnTransformer( transformers=[ ('num', numeric_transformer, numericas_all) ,('cat', categorical_transformer, categoricas_all) ]) pipe_preprocessor = Pipeline([("preprocessor", preprocessor), ("pandarizer", FunctionTransformer(lambda x: pd.DataFrame(x, columns = names)))]).fit(X_train) X_train_pipe = pipe_preprocessor.transform(X_train) X_test_pipe = pipe_preprocessor.transform(X_test)
