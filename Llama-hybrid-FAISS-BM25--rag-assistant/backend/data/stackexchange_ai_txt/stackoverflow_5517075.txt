[site]: stackoverflow
[post_id]: 5517075
[parent_id]: 
[tags]: 
POCO LinqToSQL ERROR: System.InvalidOperationException: Bad Storage property:

What am i missing? City.cs [Table(Name = "City")] public class City { [Column(IsDbGenerated = true, IsPrimaryKey = true)] public int CityId { get; set; } [Column(CanBeNull = false)] public string CityName { get; set; } private EntitySet _cityLocalities; [Association(Storage = "_CityLocality", OtherKey = "CityId", Name = "City_CityLocality")] public EntitySet CitiyLocalities { get { return _cityLocalities; } set { _cityLocalities.Assign(value);} } CityLocality [Table(Name = "CityLocality")] public class CityLocality { [Column(IsPrimaryKey = true, IsDbGenerated = true)] public int LocalityId { get; set; } [Column(CanBeNull = false)] public string LocalityName { get; set; } [Association(Name = "FK_CityLocation_City", Storage = "_City", ThisKey = "CityId", OtherKey = "CityId", IsForeignKey = true)] [Column(CanBeNull = false)] public int CityId { get; set; } } SqlCityRepository public class SqlCityRepository : ICityRepository { private Table _citys; public SqlCityRepository(string connectionString) { _citys = (new DataContext(connectionString)).GetTable (); } public IQueryable Cities { get { return _citys; } } public void Add(City city) { if(city.CityId == 0) { _citys.InsertOnSubmit(city); } else { _citys.Attach(city); _citys.Context.Refresh(RefreshMode.KeepCurrentValues,city); } _citys.Context.SubmitChanges(); } public City GetById(int cityId) { return (from c in _citys where c.CityId == cityId select c).FirstOrDefault(); } } TestFixture [Test] public void CityAddFunctionalityShouldWork() { var repository = new SqlCityRepository(_connectionSting); var city = new City(); city.CityName = "BagChenDil"; using(var scope = new TransactionScope()) { repository.Add(city); var banChenDil = (from c in repository.Cities select c).FirstOrDefault(); Assert.AreEqual(banChenDil.CityName, city.CityName); scope.Dispose(); } } Error Message: System.InvalidOperationException: Bad Storage property: '_CityLocality' on member 'Entities.Location.City.CitiyLocalities'.
