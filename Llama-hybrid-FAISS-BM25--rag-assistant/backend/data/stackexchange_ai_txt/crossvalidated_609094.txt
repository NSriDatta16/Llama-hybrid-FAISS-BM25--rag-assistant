[site]: crossvalidated
[post_id]: 609094
[parent_id]: 
[tags]: 
How to use slopes in PCA?

I would like to use slope values in PCA. The problem I face is that the slopes I calculate per group could be within different ranges of values. We know that it is important to normalize your data before PCA discussed here: Why do we need to normalize data before principal component analysis (PCA)? . So my groups could have values within a range of 0 to 1 or for example 1-10 (these are examples). So let's assume I have 5 ID's with each 4 features. Each ID has 10 observations per feature, but these could be within different ranges. Here I created some reproducible data: set.seed(7) df = data.frame(ID = rep(LETTERS[1:5], each = 10), time = c(1:10), V1 = c(runif(10, 0, 1), sample(5:20, 10, replace=T), runif(10, 0.2, 0.5), sample(1:100, 10, replace=T), sample(1:20, 10, replace=T)), V2 = c(runif(10, 0, 0.2), runif(10, 0, 0.3), sample(1:10, 10, replace=T), runif(10, 0.2, 0.3), runif(10, 0.7, 0.9)), V3 = c(runif(10, 0, 0.4), sample(1:10, 10, replace=T), runif(10, 0.2, 0.3), sample(1:10, 10, replace=T), runif(10, 0.5, 0.8)), V4 = c(runif(10, 0, 0.1), sample(1:5, 10, replace=T), runif(10, 0.2, 0.9), sample(1:20, 10, replace=T), runif(10, 0.5, 1))) Now we calculate the slopes for each ID for each feature like this: library(tidyverse) library(broom) library(factoextra) slopes = df %>% pivot_longer(cols = V1:V4) %>% group_by(ID, name) %>% nest() %>% mutate(modelout = map(data, ~lm(value ~ time, data = .x) %>% tidy %>% filter(term == "time") %>% select(slope = estimate))) %>% unnest() %>% summarise(slope = unique(slope)) %>% pivot_wider(names_from = name, values_from = slope) %>% column_to_rownames('ID') slopes #> V1 V2 V3 V4 #> A -0.004548211 0.0023702846 -0.005529712 0.002792688 #> B 0.660606061 0.0013715805 -0.200000000 -0.278787879 #> C -0.003737507 0.2666666667 0.001533572 -0.026828235 #> D 6.084848485 -0.0003168725 0.236363636 -0.757575758 #> E -0.054545455 0.0005361159 0.003567638 0.012812879 Let's check PCA results: res_pca = prcomp(slopes) res_pca #> Standard deviations (1, .., p=4): #> [1] 2.692459114 0.139136216 0.104503624 0.001634561 #> #> Rotation (n x k) = (4 x 4): #> PC1 PC2 PC3 PC4 #> V1 0.99196373 0.04004058 0.02126357 -0.11812097 #> V2 -0.01267253 0.50183843 -0.86005381 -0.09113202 #> V3 0.04364794 0.67949821 0.32636990 0.65563689 #> V4 -0.11807716 0.53370134 0.39158396 -0.74019096 fviz_eig(res_pca) Created on 2023-03-11 with reprex v2.0.2 As we can see the first component has a big contribution probably due to the scale problem. I also found this PCA with variables in different Likert scales , but I think the difference here is that for mine the scales could also differ within each feature. So I don't know how you should scale these kinds of values within ranges for PCA. Could anyone please explain how to normalize this kind of problem? Edit: clarification I think the problem I may face is that I have multiple ID's per variable V1, V2 and each ID has a different range 0-1 and 5-20 (these are examples that could be anything). I would like to calculate the slope for each ID of each variable, but when I calculate it with these values, the IDs with a wider range will have more contribution in the PCA. Let's see the distribution of V1: set.seed(7) df = data.frame(ID = rep(LETTERS[1:5], each = 10), time = c(1:10), V1 = c(runif(10, 0, 1), sample(5:20, 10, replace=T), runif(10, 0.2, 0.5), sample(1:100, 10, replace=T), sample(1:20, 10, replace=T)), V2 = c(runif(10, 0, 0.2), runif(10, 0, 0.3), sample(1:10, 10, replace=T), runif(10, 0.2, 0.3), runif(10, 0.7, 0.9))) library(tidyverse) df %>% ggplot(aes(x = V1, fill = ID)) + geom_histogram() + labs(title = 'Distribution of V1') As you can see, for example, ID D has a bigger range. This will mean that it has a higher slope which will result in a different contribution, but each slope should have an equal contribution within each variable. But they could have different contributions across variables. I think my question is how to normalize these slopes within each variable? To have an equal contribution of each slope within each variable, otherwise, the PCA will be misleading I think right?
