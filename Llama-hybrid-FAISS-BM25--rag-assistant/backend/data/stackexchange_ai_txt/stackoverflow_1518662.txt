[site]: stackoverflow
[post_id]: 1518662
[parent_id]: 1109237
[tags]: 
In my experience, any software-engineering organization will create DSLs in response to repeated problems and too much template code being written. A short extract from my personal experience: Compiler bottom-up rewrite-system generators Assembler generators Object-code generators (implemented as a C++ library with operator overloading) CPU simulator generator Simulator device model generator Command-line languages for interactive tools Also note that many file formats can be considered DSLs if you look closely. There was a good article by Mark Shapiro in ACM Queue a while back about this phenomenon too. Yet another example is the way in which users end up writing big programs in things not intended for it... like test benches using the old "SNIFF" debugger scripting language.
