[site]: stackoverflow
[post_id]: 469466
[parent_id]: 468863
[tags]: 
I recommend the book "Zend Framework in Action" from Manning Publications as a great, up-to-date, introduction to this. It's available as PDF download, so you can have it now :) But to answer this particular question: Let's start by defining two key terms. The "Auth" in Zend_Auth refers to Authentication, which proves someone is who they say they are (i.e. login). The "A" in Zend_Acl refers to Authorization, which proves someone has the right to do what they're trying to do (i.e. access control). Assuming the user has a single role... Store the user's roles in the "identity" you get as part of Zend_Auth. At login: $auth = Zend_Auth::getInstance(); $identity = new stdClass(); $identity->user_pk = $user->getPrimaryKey(); $identity->user_name = $user->getName(); $identity->role = $user->getRole(); // select * from user_role where user_pk=xxx $auth->getStorage()->write($identity); In Controller: $acl->add(new Zend_Acl_Resource('news')) ->allow('defaultRole', 'news'); Everything is denied by default, so you don't really need to specify: ->deny('defaultRole', 'news', 'add'); Further on in the Controller's code: $identity = Zend_Auth::getInstance()->getIdentity(); if(!$acl->isAllowed($identity->role, 'news', 'add')) { header('Location: http://www.yoursite.com/error/unauthorized'); } If the user's identity is not allowed to do "news->add", it will redirect them to the unauthorized page (assuming you've made such a page). If the user had >1 role, you'd store an array of roles in their identity. Then your check would go something like this: $identity = Zend_Auth::getInstance()->getIdentity(); $isAllowed = false; foreach($identity->role as $role) { if($acl->isAllowed($role, 'news', 'add')) { $isAllowed = true; } } if(!$isAllowed) { // if NO ROLES have access, redirect to unauthorized page header('Location: http://www.yoursite.com/error/unauthorized'); } Hope that helps.
