[site]: stackoverflow
[post_id]: 5212178
[parent_id]: 5201069
[tags]: 
I am surprised nobody has mentioned this, but if we are sorting a phonebook, we probably don't really want a pure ASCII sort. Does Bob DeCarlo really belong before Ralph Dearborn ? If you sort by using cmp Mr. DeCarlo winds up first in the results. Even if you normalize for case, you've still got issues. There are a host of complications with sorting and filing things. Different organizations have rules for handling these issues. Since sort is an expensive operation, you'll want to make each comparison work as quickly as possible. The way to do this is to use the simplest code possible for all your comparisons. Since cmp won't give us the desired result by itself, we need to generate and cache a normalized sort term for each item in the phone book. So, assuming you've already got your phone book data in an array: sub extract_and_normalize { # Do stuff here to embody your alphabetization rules. return [ $normed, $line ]; } # Generate your sort terms my @processed = map extract_and_normalize($_), @lines; # Sort by the normalized values my @sorted = sort {$a->[0] cmp $b->[0]}, @processed; # Extract the lines from the sorted set. @lines = map $_->[1], @sorted; Or use the Schwartzian Transform, as hobbs suggests, to avoid making all the intermediate variables: @lines = map $_->[1], sort { $a->[0] cmp $b->[0] } map extract_and_normalize($_), @lines;
