[site]: stackoverflow
[post_id]: 3960059
[parent_id]: 3959953
[tags]: 
Just for a comparison, Google's Protocol Buffers uses a combination of both but leans hard toward your second example. If you have distinctly different data that needs to be sent over the channel, you use the tool to generate a derivitive of the "message" class, but each message can contain other messages, and you can nest message definitions in themselves. When a message is sent out, the receiver checks the fields to determine what type of message it is and what fields are contained within. The downside is that your code becomes overly verbose very quickly, as you can't really use inheritance to automate the process of acting on an incoming message, but the upside is that your protocol messages stay highly organized and easy to DEBUG since you're using a reflexive attribute list of sorts.
