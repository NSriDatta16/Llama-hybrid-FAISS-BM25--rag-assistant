[site]: stackoverflow
[post_id]: 1427104
[parent_id]: 1424833
[tags]: 
My performance-enhanced implementation is below. It is about 4.5 times as fast as the DecimalFormatter-based solution: running on my machine, using Eclipse with a decent home-brewed test harness, the results are: Old way took 5421 ms to make 600,000 calls (average 0.009035 ms per call) New way took 1219 ms to make 600,000 calls (average 0.002032 ms per call) Some notes: My solution makes use of a fixed-size block of zeroes for padding. If you anticipate needing more padding on either side than the thirty or so I used, you'd have to increase the size... clearly you could increase it dynamically if required. Your comments above didn't quite match the code. Specifically, if a sign character was returned, the returned length is one greater than requested (your comments say otherwise). I have chosen to believe the code rather than the comments. I made my method static, since it requires no instance state. That's a personal taste thing - ymmv. Also: in order to mimic the behavior of the original (but not given in the comments), this: If there are more fractional digits in the incoming value than fit in scale, throws an ArithmeticException If there are more whole digits in the incoming value than fit in (len-scale), the returned string is longer than len. If signed is true, the returned string will be one longer than len However : if len is negative, the original returns a comma-delimited string. This throws an IllegalARgumentException package com.pragmaticsoftwaredevelopment.stackoverflow; ... final static String formatterZeroes="00000000000000000000000000000000000000000000000000000000000"; protected static String getFormattedDecimal ( String value, int len, int scale, Boolean signed ) throws IllegalArgumentException { if (value.length() == 0) throw new IllegalArgumentException ("Cannot format a zero-length value"); if (len 0) retVal.append(formatterZeroes.substring(0, wholePartPadLength)); retVal.append (value.substring(numStartIdx)); if (scale > 0) retVal.append(formatterZeroes.substring(0, scale)); } else { int wholePartPadLength = (requestedWholePartLength - (dotIdx - numStartIdx)); if (wholePartPadLength > 0) retVal.append(formatterZeroes.substring(0, wholePartPadLength)); retVal.append (value.substring(numStartIdx, dotIdx)); retVal.append (value.substring (dotIdx+1)); int fractionalPartPadLength = (scale - (value.length() - 1 - dotIdx)); if (fractionalPartPadLength > 0) retVal.append(formatterZeroes.substring(0, fractionalPartPadLength)); } return retVal.toString(); }
