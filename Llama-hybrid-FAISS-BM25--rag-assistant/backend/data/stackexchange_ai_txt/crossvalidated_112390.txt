[site]: crossvalidated
[post_id]: 112390
[parent_id]: 112374
[tags]: 
I'd suggest you use Time as a 6-level factor, and then use appropriate contrasts to compare the phases, e.g., Post vs Instruction would be examined using contrast coefficients $(0,0,-.5,-.5,+.5,+.5)$. It's potentially important to use Time itself in the model because of the repeated measures. For example, some people might want to put some kind of time-series error structure on these -- or possibly a model that assumes greater correlation within a phase than between them. Example Toy dataset for 3 subjects, 6 times: > fake = expand.grid(time=1:6, subj=letters[1:3]) > fake$y = c(18,15,30,28,48,49,19,18,27,28,49,52,19,18,27,25,48,49) Fit a model with time as a 6-level factor and subj as a random effect: > library(lme4) > fake.lmer = lmer(y ~ factor(time) + (1|subj), data = fake) I'll do it in three stages using the functions in the lsmeans package. First, get the LS~means (aka predictions) for each time > library(lsmeans) > (time.lsm = lsmeans(fake.lmer, "time")) time lsmean SE df lower.CL upper.CL 1 18.66667 0.8388705 12 16.83890 20.49444 2 17.00000 0.8388705 12 15.17223 18.82777 3 28.00000 0.8388705 12 26.17223 29.82777 4 27.00000 0.8388705 12 25.17223 28.82777 5 48.33333 0.8388705 12 46.50556 50.16110 6 50.00000 0.8388705 12 48.17223 51.82777 As a convenience, here are the predictions averaged together in each phase. The function is contrast , but it can estimate linear functions whether or not they are contrasts: > (phase.lsm = contrast(time.lsm, list(base = c(.5,.5,0,0,0,0), + instr = c(0,0,.5,.5,0,0), post = c(0,0,0,0,.5,.5)))) contrast estimate SE df t.ratio p.value base 17.83333 0.5947299 9.86 29.986 Now obtain pairwise comparisons of these: > pairs(phase.lsm) contrast estimate SE df t.ratio p.value base - instr -9.666667 0.83666 10 -11.554 Note that I could have gone directly to the types of contrasts I mentioned before. For example: > contrast(time.lsm, list(`base-instr` = c(.5,.5, -.5,-.5, 0,0))) contrast estimate SE df t.ratio p.value base.instr -9.666667 0.83666 10 -11.554
