[site]: crossvalidated
[post_id]: 637614
[parent_id]: 637503
[tags]: 
You should try to make $N_{train} \gg N_{test}$ , since you stated that there are the same number of signals in train and test. The neural network will perform better if you train with more signals and test with fewer (but you do have to monitor over-fitting). Recall, in 10-fold cross-validation (CV), objects are randomly assigned to 10 folds. Objects in the first 9 folds are used for training, while objects in the 10th fold are used for testing. Then objects in folds 1-8 and 10 are used for training, and objects in fold 9 used for testing. This is repeated until objects in each fold are used for testing (while remaining are used for training). So, during 10-fold CV, $N_{train} = 9 N_{test}$ . What you are saying regarding the test targets being a matrix is not an issue, since most testing will take each test signal (from the test matrix), determine how accurate the prediction is, and then test the next signal, until all signals in the test matrix are evaluated. For terminology, just say you have $N_{train}$ signals and $N_{test}$ signals, or basically "training data" and "test data." Test data always form a matrix, but each signal in the matrix is evaluated singly. If you want to see another type of analysis that crams all of the information that you have into one analysis and then outputs an entire predicted matrix, look at sound-source separation using non-negative matrix factorization ( NMF ), where each signal, $N$ , is at one frequency value (Hertz, frequency domain) and each dimension $M$ is in the time domain, or the other way around (transpose). NMF would likely be able to perform approximately 80-90% of what you are doing with an RNN, in order to first understand more about the data. The key matrix to work with from NMF is the $\mathbf{H}$ matrix.
