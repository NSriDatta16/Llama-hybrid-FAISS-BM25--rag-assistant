[site]: stackoverflow
[post_id]: 4920670
[parent_id]: 
[tags]: 
OpenGL multiple textures with VBOs

I'm trying to figure out how to render an object (a cube) with different textures for each face. For simplicities sake, I have 2 textures that are applied to 3 faces of the cube each. I understand that I should be using texture arrays with 3 coordinates to represent the relevant texture to be used. I'm just unsure of how to do this and how to code my fragment shader. Here is the relevant part of my init() function: final String textureName = model.getTextures().get(i).textureName; final FileTexture textureGenerator = new FileTexture(this.getClass().getResourceAsStream(textureName), true, context); textureId = textureGenerator.getTextureId(); width = textureGenerator.getWidth(); height = textureGenerator.getHeight(); textureMap.put(model.getTextures().get(i).matName, textureId); context.getGL().glActiveTexture(GL.GL_TEXTURE0 + i); context.getGL().glBindTexture(GL.GL_TEXTURE_2D, textureId); I am slightly confused here however because the Orange Book (OpenGL Shading Language) gives examples in which the glActiveTexture and glBindTexture is used but the GLSL common mistakes says you shouldn't do this. From there, my display() function looks like this: gl.glBindBuffer(GL.GL_ARRAY_BUFFER, getVertexBufferObject()); gl.glBufferData(GL.GL_ARRAY_BUFFER, getNoOfVertices() * 3 * 4, getVertices(), GL.GL_STREAM_DRAW); gl.glBindBuffer(GL.GL_ARRAY_BUFFER, getTexCoordBufferObject()); gl.glBufferData(GL.GL_ARRAY_BUFFER, getNoOfVertices() * 2 * 4, getTexCoords(), GL.GL_STREAM_DRAW); gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER, getIndicesBufferObject()); gl.glBufferData(GL.GL_ELEMENT_ARRAY_BUFFER, getNoOfIndices() * 4, getIndices(), GL.GL_STREAM_DRAW); gl.glBindBuffer(GL.GL_ARRAY_BUFFER, getColorBufferObject()); gl.glBufferData(GL.GL_ARRAY_BUFFER, getNoOfVertices() * 4 * 4, getColors(), GL.GL_STREAM_DRAW); layerTextureShader.use(gl); gl.glEnableClientState(GL.GL_VERTEX_ARRAY); gl.glBindBuffer(GL.GL_ARRAY_BUFFER, getVertexBufferObject()); gl.glVertexPointer(3, GL.GL_FLOAT, 0, 0); gl.glEnableClientState(GL.GL_COLOR_ARRAY); gl.glBindBuffer(GL.GL_ARRAY_BUFFER, mask ? getMaskColorBufferObject() : getColorBufferObject()); gl.glColorPointer(4, GL.GL_FLOAT, 0, 0); gl.glClientActiveTexture(GL.GL_TEXTURE0); gl.glEnableClientState(GL.GL_TEXTURE_COORD_ARRAY); gl.glTexCoordPointer(3, GL.GL_FLOAT, 0, 0); gl.glClientActiveTexture(GL.GL_TEXTURE1); gl.glEnableClientState(GL.GL_TEXTURE_COORD_ARRAY); gl.glTexCoordPointer(3, GL.GL_FLOAT, 0, 0); gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER, getIndicesBufferObject()); final int count = getNoOfIndices(); gl.glDrawElements(GL.GL_TRIANGLES, count, GL.GL_UNSIGNED_INT, 0); gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER, 0); gl.glBindBuffer(GL.GL_ARRAY_BUFFER, 0); gl.glClientActiveTexture(GL.GL_TEXTURE0); gl.glDisableClientState(GL.GL_TEXTURE_COORD_ARRAY); gl.glClientActiveTexture(GL.GL_TEXTURE1); gl.glDisableClientState(GL.GL_TEXTURE_COORD_ARRAY); gl.glDisableClientState(GL.GL_VERTEX_ARRAY); gl.glDisableClientState(GL.GL_COLOR_ARRAY); gl.glDisableClientState(GL.GL_TEXTURE_COORD_ARRAY); layerTextureShader.release(gl); I am unsure of what to put in my GLSL shaders. My vertex shader has the standard gl_TexCoord[0] = gl_MultiTexCoord0; and my fragment shader looks like: uniform sampler2D texture; void main() { gl_FragColor = texture2D(texture, gl_TexCoord[0].st); } How do I instruct the fragment shader on which texture to use? I assume it's when I'm populating the vertex, index, textures buffers etc and I do it by passing in this 3rd texture coordinate for each point? Is the value of this 3rd coordinate the value of the relevant texture coordinate? I hope my question makes sense and thanks for any help. Chris
