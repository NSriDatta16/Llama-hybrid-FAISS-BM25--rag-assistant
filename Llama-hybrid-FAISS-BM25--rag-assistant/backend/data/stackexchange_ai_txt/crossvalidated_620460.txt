[site]: crossvalidated
[post_id]: 620460
[parent_id]: 
[tags]: 
Handling a dependent null in linear regression

I have a linear regression model where I predict a user's completion rate for a specific game. The training data looks like this: User Predictor variables Game Predictor Variables Completion rate of user i for game j user 1 features i.e. age, gender game 1 features i.e. prize_amount( USD), entry_amount( USD) value from 0 to 100% user 1 features game 2 features value from 0 to 100% user 2 features game 1 features value from 0 to 100% user 2 features game 2 features value from 0 to 100% Audience: Every user in my training data has at least seen the game. Users who just view a game but don't start are given a completion rate of 0. Use case: I take n users and match them to 10 games. So I get 10n rows. Each user gets 10 predicted completion rates. 1 for each game. For each user, the game with the highest predicted completion rate is recommended to them. My question is: For some games, the prize_amount is fixed (i.e. USD100) and the entry_amount is fixed (i.e. USD10). And that's fine. My problem is that some other games have a prize_amount twice the entry_amount that the user decides to pay, this could be as small as USD0.1. In other words, the user decides how much to pay as an entry_amount , and will win twice the entry_amount as their prize_amount . Note that there is a maximum prize_amount for these 'double reward' games. So I don't know what value to put as prize_amount and entry_amount . My solution would be to create a new dummy feature call it reward_type that takes a 1 for the 'double reward' games and a zero for the 'fixed reward' games. And to put a zero for the prize_amount of the 'double reward' games. for example: Age reward_type prize_amount entry_amount 24 1 0 0 23 0 USD1000 USD10 23 1 0 0 25 0 USD200 USD100 Doesn't this result in a bias for prize_amount ? i.e. if the double reward games are very popular then the model will favour a prize_amount of 0. Note here the missing values of prize_amount and entry_amount are entirely dependent on reward_type . I do not know the entry_amount at the time of prediction. This is similar to but not a duplicate of Handling Null value in Logistic Regression .
