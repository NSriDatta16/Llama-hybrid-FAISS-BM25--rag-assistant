[site]: stackoverflow
[post_id]: 4639451
[parent_id]: 4639336
[tags]: 
Change self.lt = threading.Thread(target=self.loop()) to self.lt = threading.Thread(target=self.loop) target=self.loop() calls the loop method before passing the result to threading.Thread . Passing target=self.loop passes the method object to threading.Thread without calling it. This lets threading.Thread call the method in a new thread. Here is some code which uses threads to ping some ips, and displays the average ping times in an animated matplotlib bar chart, embedded in a Tkinter window: import Tkinter import threading import subprocess import Queue import shlex import re import matplotlib.pyplot as plt import matplotlib.backends.backend_tkagg as tkagg import atexit import numpy as np pingers=[] def cleanup(): print('terminating ping subprocesses...') for pinger in pingers: pinger.proc.terminate() atexit.register(cleanup) class Pinger(threading.Thread): def __init__(self,app,queue): threading.Thread.__init__(self) self.app=app self.queue=queue def run(self): # One ping subprocess is started by each Pinger thread. # The ping subprocess runs indefinitely, terminated by the cleanup function # which is called by atexit right before the main program terminates. ip = self.queue.get() cmd="ping %s" % ip self.proc = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE) for line in iter(self.proc.stdout.readline,''): match=re.search('time=(.*)\s+ms',line) if match: avg=float(match.group(1)) self.app.update(ip,avg) class App(object): def __init__(self,master,ips): self.ips=ips self.fig = plt.Figure(figsize=(5,4), dpi=100) self.fig.subplots_adjust(bottom=0.25) self.ax=self.fig.add_subplot(1,1,1) self.canvas = tkagg.FigureCanvasTkAgg(self.fig, master=master) self.canvas.get_tk_widget().pack(side='top', fill='both', expand=1) self.canvas.show() N=len(self.ips) self.idx=dict(zip(self.ips,range(N))) # I set an initial ping time of 200 just to make the initial bar chart times=[200]*N self.rects=self.ax.bar(range(N), times) self.ax.set_xticks(np.arange(N)+0.8*0.5) self.ax.set_xticklabels(self.ips, rotation=25) def update(self,ip,avg): # This is called by Pinger threads, each time a new ping value is obtained print(ip,avg) self.rects[self.idx[ip]].set_height(avg) self.canvas.draw() def main(): root = Tkinter.Tk() root.wm_title("Connection Speed") ips=['bbc.co.uk', 'google.co.uk', 'nhgs.co.uk', 'bing.co.uk', 'msn.com'] app = App(root,ips) queue = Queue.Queue() for ip in ips: queue.put(ip) # This starts one Pinger for each ip. pinger=Pinger(app,queue) pingers.append(pinger) pinger.daemon=True pinger.start() Tkinter.mainloop() if __name__=='__main__': main()
