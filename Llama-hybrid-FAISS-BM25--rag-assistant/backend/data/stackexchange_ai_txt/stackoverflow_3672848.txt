[site]: stackoverflow
[post_id]: 3672848
[parent_id]: 3672792
[tags]: 
Namespaces serve several key purposes: They help avoid naming collisions between types that different developers and different organizations create and share. They help to organize types into groups to make it easier to understand what they do and which types relate to one another or are used together. Now to your specific question. Referring to types in an inner namespace from the outer one isn't highly desirable - but it's not horrible either. While I can't think of one now, I wouldn't be surprised if there are cases in the .NET framework itself where this situation exists. As a general design principle, it a good idea to build code in layers; and often those layers are structured such that less "specialized" code is unaware of more "specific code". Namespace nesting is one way of separating more specialized types from less specialized ones. So the namespace System contains very general and broadly applicable types - while System.Drawing is more specialized and contains types relating to image and visual manipulation. What you should avoid doing, however, is using namespaces to group types based on accessibility. This is definitely an abuse of namespaces - and is likely to cause problems over the long run (particularly since it's common to widen the accessibility of a type - but it can be quite difficult to change what namespace it's part of). In my opinion, however, as long as you are consistent in what your doing, and there's a sensible of division of types between namespaces, I think you'll be alright.
