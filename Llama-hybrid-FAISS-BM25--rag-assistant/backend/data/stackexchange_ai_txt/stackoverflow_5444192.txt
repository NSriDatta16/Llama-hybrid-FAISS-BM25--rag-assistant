[site]: stackoverflow
[post_id]: 5444192
[parent_id]: 5444023
[tags]: 
So-called "text" files are simply files that follow certain conventions: the bytes are usually a subset of all the possible bytes, generally ASCII or Unicode values, and are organized into "lines" with "line terminators". The standard line terminators vary by platform - Unix uses \n , Mac \r , and Windows \r\n - so part of the convention is to translate these on the fly. This works fine with text files, but will clobber other kinds of files, because an 0x0a ( \n ) byte in a sound file or something won't take well to being converted to 0x0d 0x0a ( \r\n ). Of course, if you've only been using Unix, this won't have come up. In Python 3, all strings are Unicode, and opening a file as text means you have to read and write Unicode strings, and perhaps specify an encoding (it defaults to UTF-8). Opening a file as binary means you have to use bytes objects, which are simple lists of 8-bit bytes and don't get encoded. Does this clarify things?
