[site]: stackoverflow
[post_id]: 2138595
[parent_id]: 2138410
[tags]: 
That is the factory pattern alright, but you might need a better naming convention than just calling it Factory . Also it contains traces of dependency injection. Though you could technically call it the factory pattern, it's probably not a good usage of the pattern. Factory is a creational pattern that encapsulates your code from directly referencing class names and object creation as in exact constructor parameters etc. To get the best results, keep that in mind while designing your classes and factories. For example, StackOverflow gives users different rights depending on their reputation score. Hypothetically speaking, it could have the following types of users: NewbieUser [1-100] BeginnerUser [101-1000] AverageJoeUser [1001-5000] VeteranUser [5001-20000] PowerUser [20001-50000] GodModeUser [50001-100000] and a user could be created by looking up their rep. and instantiating the corresponding user object by directly referencing the class. Jon Skeet does not appear in any category in case you're wondering. Here's a crappy implementation with direct instantiation: if(reputation >= 1001 and reputation If later down the road we were to change the class names or the way users were instantiated, every such instance where the object was created would have to be found and changed. Quite a lot of work if you ask me. Instead, if we had used the Factory pattern here, the change would go in a single method inside the Factory class. class UserFactory { public static User createUser(Integer reputation) { ... } }
