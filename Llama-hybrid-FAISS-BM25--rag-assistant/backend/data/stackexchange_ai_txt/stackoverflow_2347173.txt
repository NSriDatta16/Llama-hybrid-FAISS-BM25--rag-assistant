[site]: stackoverflow
[post_id]: 2347173
[parent_id]: 2347039
[tags]: 
To explain AJAX you have to understand the non AJAX way and see the difference so I will give the same example in the traditional form post way and the AJAX way. The scenario you have a list of phone numbers you want to be able to add any number of phone numbers for a client, each record has two fields, type and number. Type is a description e.g. Mobile Home Work. The Traditional The user see a list of phone numbers with the last one being empty and editable. They want to add one more phone number so they fill in the empty fields and click the add button. The form is submitted, so the data is wrapped up in an http post and sent to the server, the server code adds the phone record to the database and starts to construct the html for the new page so it starts with the htm, head, all the script includes, and then the table with the data in including the new row with the new phone number and another empty field. Request POST /addPhoneNumberForm Http 1.1 HOST:www.host.com USER-AGENT:... ... newPhoneType=Home&newPhoneNumber=00649123456 Response ... .... .... Description Number Mobile 0044987654331 Work 0044987654332 Holiday 0044987654333 Home 00649123456 .... ... Once the users browser receives this response it throws away all the user can see replaces this with a white, blank screen. And start parsing the html received as a completely new page. Any Images/Css/Javascript files have to be re-fetched (or at least check if the cache is valid). Any javascript files have to be run and all the accompanying DOM events need to file (document.onLoad etc). So what has happened is the user has submitted data and the server has replied with a completely new page. There has been a cost of doing this of a lot of network activity and time and cpu cycles on both the server and the client as they have had to generate, and parse a complete html page. The AJAX Way The user see a list of phone numbers with the last one being empty and editable. They want to add one more phone number so they fill in the empty fields and click the add button. That bit was the same as the traditional, from now on in it gets different. When the user clicks the button instead of the form submitting a peice of javascript collects up the relavent information from the form and make an AJAX request to the server using a XMLHttpRequest, this sends a request similar to a form post but the result will be returned as a javascript string not as a web page. Request POST /addPhoneNumberAJAX Http 1.1 HOST:www.host.com USER-AGENT:... ... newPhoneType=Home&newPhoneNumber=00649123456&ajax=true&type=json There are a large number of choices of what the server can return I have picked one example Response {phoneType:"home",phoneNumber:"00649123456"}; This is in JavaScript Object Notation (JSON) and represents an object with two types phoneType and phoneNumber. Once this is received JavaScript is used to dynamical add a new row to the existing table. The javascript would look something like this. addPhoneViaAjax(type, number, reqObj, xmlhttp){ // Construct url and declare parameters for our request xmlhttp.open("POST","addPhoneNumberAJAX?newPhoneType="+type ...,false); // Send the request and wait for the response xmlhttp.send(null); // For example assume response successful // Get the response as text var responseStr = xmlhttp.responseText; // Convert the response to object, preferably using one of the JSON parsing libaries var responseObj = eval(responseStr); // Please use one of the JSON parsing libaries look at Jquery.forms plugin // Use jquery javascript libary to update the table in place. // by finding the last row of the table and instering html before it. jQuery("table#addPhoneRecords tr:last-child").before( " " + responseObj.phoneType + " " + responseObj.phoneNumber + " "); } Summary So with traditional method the browser considers the response a whole new page and must do everything required to draw a new page. With the ajax approach the browser stays on the same page and you use javascript to alter one very small piece of the page.
