[site]: stackoverflow
[post_id]: 3713770
[parent_id]: 
[tags]: 
Static abstract methods in C# (alternatives for particular use case)

Like a lot of C# programmers, I eventually found myself in need of what would essentially be static abstract method functionality. I'm fully aware of why it can't be done, and it makes sense, but I'm in need of a workaround. I'm working on an XNA game, but the problem doesn't involve too much XNA code, fortunately. I have an abstract base class Note, and various subclasses derived from it. At a certain point, I'll be drawing these to the screen, so I'll have to load textures (each subclass would have different textures and different amounts of textures), have the user input a size parameter, scale the textures to size, and then iterate over my List and Draw() each one. These textures are pretty large, and each instance of a given subclass would be using the same textures at the same scaled size until the user specifies a different size, hence my motivation for taking a static approach. As I've found out, abstract static methods aren't available. I would have liked to been able to do a single texture resize at a time (whenever the user changed the size parameter) for each subclass, save the scaled texture as a static Texture2D object, and just reference each time I would draw an instance of the Note subtype. That way I could have avoided having a Texture2D object in every instance of a given Note-derived class, as well as having to scale the Texture2D in each instance as well. In addition, I would have liked being able to effectively enforce "all concrete subclasses of Note must implement this static method". I'm not exactly sure what would be the best approach. I'd prefer a way to do that didn't involve needing to have a static method in each subclass, e.g.: NoteA.LoadScaledTex(scale); NoteB.LoadScaledTex(scale); NoteC.LoadScaledTex(scale); ... foreach(Note n in notes) {..} but I'm not sure of any other elegant solution.
