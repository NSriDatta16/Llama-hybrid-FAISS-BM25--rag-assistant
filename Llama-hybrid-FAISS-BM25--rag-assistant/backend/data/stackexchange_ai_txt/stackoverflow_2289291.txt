[site]: stackoverflow
[post_id]: 2289291
[parent_id]: 2288849
[tags]: 
The suitability of a given task to be handled in multi-process fashion depends on the nature of the task and the interdependency (or lack thereof) of various subtasks, not on the way the list of subtasks is produced . In other words, using the question's wording, the ability for this problem to not be so slow by involving concurrency depends on the fact that the process_it() method is either such that: it produces the exact same outcome (direct and by side-effect) each time it is called with a given set of parameters. (this is the typical case for a multi-processable task) its overall outcome for a series of calls is independent of the order of the series (this is a bit of a odd case of a multi-processable task). And it doesn't depend on the fact that the order in which the series of calls to process_it() is produced by cartesian product of a list (the Every-to-Every of the question) or by some preconstructed list, or some other fashion. Also, the complexity of the problem (O(n^2) in the question) does not diminish because the problem is handed in a multi-process fashion . In fact the multi-process logic often introduces additional complexity (to "pay" for organizing and feeding the multiple threads and to combine their results); such added difficulty is however typically of an other order of magnitude of the problem (say constant, or maybe linear in n) and therefore doesn't change the overall complexity. Unrelated to the ability for the process to be split in multiple asynchronous subtasks, it may be such that the complexity of the problem can be reduced , as hinted in some other answers (for example if process_it(a,b) is the same as process_it(b,a), or if the underlying data is such that sorting it first could reduce the number of times process_it needs to be called etc.) Also, and while some programming languages or libraries/environments make it easier to manage multi-processing, the question is generally language-agnostic; maybe the python tag and the illustrative snippet confuse the issue somehow.
