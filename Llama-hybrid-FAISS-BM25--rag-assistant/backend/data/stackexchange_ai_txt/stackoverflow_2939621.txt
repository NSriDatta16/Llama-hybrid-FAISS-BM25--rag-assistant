[site]: stackoverflow
[post_id]: 2939621
[parent_id]: 2939601
[tags]: 
You can't do this. The class declarations are Java-like. You have to put everything in one file or, at minimum, have some helper classes -- be they only static methods to which you forward or calls or with you deferring some implementation to encapsulated objects. You can also use the __call and __callstatic magic methods to reduce the size of your stubs, but that only works for public methods and I would recommend that you avoid magic methods. EDI2: As RobertPitt pointed in a comment, you should consider alternative strategies that divide the functionality between several classes. It has the added advantage that it can make your code more decoupled. If you need, you can still unify the functionality of the several classes behind a faÃ§ade. EDIT: By using magic methods, I mean something like this: class MyClassHelper { public function method_one(array $args) { ... } public function method_two(array $args) { ... } } class MyClass { /** * @var MyClassHelper */ private $helper; private static $ALLOWED_METHODS = array("method_one" => NULL, "method_two" => NULL); public function __call($name, $arguments) { $name = strtolower($name); if (array_key_exists($name, self::$ALLOWED_METHODS) { $helper->$name($arguments); } else throw new Exception(...); } } I should recommend that you avoid this, there are many pitfalls to this (handling of references, no code completion).
