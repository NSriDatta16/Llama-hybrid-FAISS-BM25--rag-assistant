[site]: stackoverflow
[post_id]: 1634813
[parent_id]: 
[tags]: 
A Good Way to Store C++ CLI Arguments? (W/O using libraries)

So, I'm writting a CLI application in C++ which will accept a bunch of arguments. The syntax is pretty typical, -tag arg1 arg2 -tag2 arg1 ... Right now, I take the char** argv and parse them into an std::map > > The key is the tag, and the list holds each token behind that tag but before the next one. I don't want to store my args as just std::strings; but I need to make it more interactive. By interactive, I mean when a user types './myprog -help' a list of all available commands comes up with descriptions. Currently, my class to facilitate this is: class Argument { public: Argument(std::string flag, std::string desc); std::string getFlag(); std::string getDesc(); std:;list > getArgs(); void setArgs(std::list > args); bool validSyntax()=0; std::string getSyntaxErrorDesc()=0; }; The std::map structure is in a class ProgramCommands which goes about handling the these Arguments. Now that the problem description is over, my 4 questions are: How do I give the rest of the program access to the data in ProgramCommands? I Don't want to make a singleton, at all; and I'd prefer to not have to pass ProgramCommands as an arg to almost every function in the program. Do you have better ideas about storing how I'm doing this? How best can I add arguments to the program, without hardcoding them into the ProgramCommands, or main? std::string only allows for 1 line descriptions, does anyone have an elegant solution to this besides using a list of strings or boost? EDIT I don't really want to use libraries because this is a school project (sniffing & interpreting packets). I could, if I wanted to, but I'd rather not.
