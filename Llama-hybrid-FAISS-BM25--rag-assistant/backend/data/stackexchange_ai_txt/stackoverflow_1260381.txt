[site]: stackoverflow
[post_id]: 1260381
[parent_id]: 1260104
[tags]: 
For sending dynamic data across the network you have the following options. First option in the same packet. void SendData() { int size; char payload[256]; Send(messageType) Send(size); Send(payload) } Second option: void SendData() { char payload[256]; Send(messageType) Send(payload) } Though in either situation, you will be faced with more of a design choice. In the first example you would send the message type, and the payload size and also then the payload. The second option you have is you can send the message type and then you can send the string that has a delimiter of null terminator. Though either option does not cover fully the problem your facing I think. Firstly, you need to determine if you're building a game what type of protocal you will be using, UDP? TCP? The second problem you will be facing is the maximum packet size. Then on top of that you need to have the framework in place so that you can calculate the optimum packet size that will not be fragmented and lost to the inter web. After that you have bandwidth control in regards to how much data you can transmitted and receive between the client and server. For example the way that most games approach this situation is each packet is identified with the following. MessageType MessageSize CRCCheckSum MessageID void buffer[payload] In situation where you need to send dynamic data you would send a series of packets not just one. For example if you were to send a file accross the network the best option would to use TCP/IP because its a streaming protocal and it garnentees that the complete stream arrives safly to the other end. On the other hand UDP is a packet based protocal and is does not do any checking that all packets arrived in order or at all on the other end. So in conclusion. For dynamic data, send multiple packets but with a special flag to say more data is to arrive to complete this message. Keep it simple and if your working with C++ dont assume the packet or data will contain a null terminator and check the size compared to the payload if you decide to use a null terminator.
