[site]: stackoverflow
[post_id]: 3935769
[parent_id]: 3934340
[tags]: 
It looks like you put some decent effort into this, so hats off to you. I recognize some beginner LINQ mistakes or misunderstandings from your code and hope to address them below. When you expect one element to exist, do not use Descendants . Use Element instead. Everyting from "Pool Num" to "WA CAP" is a stand-alone XML element that can be retrieved directly in this manner: parent.Element(p + "PoolNumber") where parent is the desired element's parent element. To get the element's value use the Value property: parent.Element(p + "PoolNumber").Value . Using the (string) cast is not incorrect, however it's preferable to use it when you suspect that the element may or may not exist. If it doesn't exist calling Value would return a NullReferenceException since it would be null. Casting it gets around this. Easy way to test this in my code below is to add a pool.Element(p + "PoolNumber").Remove(); after the declaration of pool and watch it break. Then use your (string) approach and watch it happily continue. Related to point #1, the Element approach effectively replaces the need to foreach over the result just to get one value. I recommend playing around with First , Single , FirstOrDefault and SingleOrDefault methods. You have LINQPad so check out the examples and play with them. Apart from that, your local variable names should begin with a lowercase per the standard formatting expectations. It's also helpful to line up your LINQ method calls on separate lines and align them at the start of the dot notation. How do I get the queried elements to appear horizontal and with some delimiter? Use the String.Join method. With .NET 4.0 there's no need to call ToArray since the method accepts an overload for IEnumerable . Currently my code only works for 1 XML file. How can this be altered to loop for multiple files? Place your pool number values in a list then foreach over it and place the logic in the body of the loop. See my code below. Here's the cleaned up version of your code. I wasn't sure whether you wanted all the headers to be horizontal or were only concerned with using a delimiter on items with multiple values. // load from websites based on pool numbers in list var list = new List { "510299", "510300"}; foreach (var poolNumber in list) { XElement tags=XElement.Load("http://fapt.efanniemae.com/epooltalk-hvd/pool.xml?type=XML&pn=" + poolNumber + ".XML"); XNamespace p = tags.GetDefaultNamespace(); // export process XElement pool = tags.Element(p + "Pool"); Console.WriteLine("Pool Num |" + pool.Element(p + "PoolNumber").Value); Console.WriteLine("CUSIP |" + pool.Element(p + "CUSIP").Value); Console.WriteLine("PoolPrefix |" + pool.Element(p + "PoolPrefix").Value); Console.WriteLine("Orig. Bal |" + pool.Element(p + "OriginalSecurityBalance").Value); Console.WriteLine("Orig. Term |" + pool.Element(p + "WeightedAverageOrigLoanTerm").Value); Console.WriteLine("Remain Term |" + pool.Element(p + "WAMnthsRemainingToAmortization").Value); Console.WriteLine("WALA |" + pool.Element(p + "WeightedAverageLoanAge").Value); Console.WriteLine("Net Rate |" + pool.Element(p + "CurrentAccrualRate").Value); Console.WriteLine("WA Margin |" + pool.Element(p + "WeightedAverageLoanMarginRate").Value); Console.WriteLine("SubType |" + pool.Element(p + "SubType").Value); Console.WriteLine("Updated CAP |" + pool.Element(p + "UpdatedCap").Value); Console.WriteLine("Issue Date |" + pool.Element(p + "IssueDate").Value); Console.WriteLine("Maturity Date |" + pool.Element(p + "MaturityDate").Value); Console.WriteLine("Rate Adj Freq |" + pool.Element(p + "RateAdjustmentFrequency").Value); Console.WriteLine("Period Cap |" + pool.Element(p + "PerAdjustmentCap").Value); Console.WriteLine("Pymt Chg Freq |" + pool.Element(p + "PaymentChangeFrequency").Value); Console.WriteLine("WA MTR |" + pool.Element(p + "WeightedAverageMonthsToRoll").Value); Console.WriteLine("WA CAP |" + pool.Element(p + "WeightedAverageCap").Value); var poolFactors = pool.Element(p + "PoolFactors"); var months = poolFactors.Descendants(p + "Month") .Select(m => m.Value); Console.WriteLine("Months |" + String.Join(", ", months.ToArray())); var wacs = poolFactors.Descendants(p + "WAC") .Select(wac => wac.Value); Console.WriteLine("WAC |" + String.Join(", ", wacs.ToArray())); var wams = poolFactors.Descendants(p + "WAM") .Select(wam => wam.Value); Console.WriteLine("WAM |" + String.Join(", ", wams.ToArray())); var factors = poolFactors.Descendants(p + "Factor") .Select(f => f.Value); Console.WriteLine("Factor |" + String.Join(", ", factors.ToArray())); Console.WriteLine(); }
