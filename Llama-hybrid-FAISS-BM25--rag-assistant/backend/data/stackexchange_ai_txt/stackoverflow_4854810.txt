[site]: stackoverflow
[post_id]: 4854810
[parent_id]: 4739875
[tags]: 
There is nothing wrong with having different models for different "tiers" and mapping between them. In fact, many patterns encourage this. Take, for example, MVVM (Model - View - ViewModel). The idea is there is a business (or domain) model that contains object state that is useful for your business logic. Think of this as the model for the business tier. When bound, you may have to combine models or prune models of information not needed for a particular view. This is a view model and corresponds to the UI tier. You also have a persistance mechanism that has its own representation, most often identical, or at least very close, to the relational database the data comes from (although you can persist to other types). In a very simple implementation, you can muddy the waters by having a single model describe all tiers. The main issue with this type of model is it ends up very relational and not OO. In addition, it focuses on the needs of the persistance mechanism and not of the actual domain you are working in (ie, the business needs of the application). I, personally, have altered the view to a circle representing the "application", which is most akin to the business layer in the typical n-tier diagram. I then can then swap out persistance mechanisms (database, XML file, etc) without impacting the core "application" code. I can also swap out different UIs without changing the core application. Back to your question. There are cases where the UI "model" needs to be different from the business model. In these cases, I create a means of translating the model back and forth (mapping is another good word here). The same basic pattern works between the persistance and business "layers". Now, someone mentioned service as a separate concept. From the perpsective of an application as business logic, I find this problematic. A Service, when viewed from the core of the business flow, is a persistance mechanism. Encapsulated in the service is a domain model that is used by the service "application", but when viewed from your "application", you most often use a service to persist objects. Going back to the separation of the business "layer" and data/persist "layer", you should be able to swap a service for a database without a huge amount of effort. This is just my two cents and your mileage may vary.
