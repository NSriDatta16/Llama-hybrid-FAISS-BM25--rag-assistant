[site]: stackoverflow
[post_id]: 4999598
[parent_id]: 4999533
[tags]: 
It depends on what you mean by "lambda". The following paragraph from the Wikipedia page you linked to describes the relationship clearly from a type theoretic standpoint. "In the untyped lambda calculus, all functions are higher-order; in a typed lambda calculus, from which most functional programming languages are derived, higher-order functions are generally those with types containing more than one arrow. In functional programming, higher-order functions that return other functions are said to be curried." In other words, in type theoretic terms, a function (lambda) is always higher-order in untyped lambda calculus, and may be higher order in typed lambda calculus ... depending on its type signature. If we are talking about the "lambda" construct implemented by some programming languages, then it depends on 1) the actual language you are talking about, and 2) on the particular usage in a particular language. In languages where lambdas are anonymous first class functions, you would expect them to be capable of expressing higher-order functions. But a higher-order function is a function that takes other functions as arguments and / or returns them as results. And not all uses of "lambda" in an application will do that.
