[site]: stackoverflow
[post_id]: 4763663
[parent_id]: 4763503
[tags]: 
If you're using Visual Studio then... Open the designer, and, from the toolbox, drag a TextBox and a Button onto the page (along with any other TextBox items you need, I'll assume you have them from now on. Double click the button you just placed on the page. This creates an event handler, code within the scope of this block will execute when the button has been clicked. Place the following code within the generated event handler code block, changing appropriately (e.g. TextBox names (You can change these using the Property Explorer within VS)): var direction = 0; if (int.TryParse(DirectionTextBox.Text, out direction)) { //further validate input here, as necessary Move(direction); XTextBox.Text = X_Coordinate.ToString(); YTextBox.Text = Y_Coordinate.ToString(); } else { //handle invalid input, if not already done elsewhere. } Presumably here X_Coordinate and Y_Coordinate are accessible variables. So, now, alter your move method to accept a parameter, like so: public void Move(int direction) { double radians = direction * Math.PI / 180; //change the x location by the x vector of the speed X_Coordinate += (int)(speed * Math.Cos(radians)); //change the y location by the y vectior of the speed Y_Coordinate -= (int)(speed * Math.Sin(radians)); } Note that by this point I have no idea which of the elements of the Move method you wish to be variable input, but I'll keep thinking along the lines of this being an idea to can extend to as many elements as you like/need. Also note that there are many other ways to go about this - what I suggest is neat enough (given the information we have) and not too far altered from your initially posted code, hence, hopefully, easier for you to implement; but you could return a composite type from this method, and set visual outputs with the directly returned result to make things more concise.
