[site]: crossvalidated
[post_id]: 195263
[parent_id]: 
[tags]: 
How can I scale the $k$-th moment of a time series to a different time frequency?

I have a time series, let's say N daily log-returns. I want to study the moments (possibly the distribution) of the weekly returns. I have two ways: 1) Using the time-additivity property of logarithms, I just add 5 consequent daily log-returns to get a weekly return. I will get a series of length N/5, so I will lose data. But I can calculate the descriptive stats on this weekly series. Displayed hereby are the histograms of the series calculated as described above. I also add the table of the descriptive statistics of the three series. 2) I'm not familiar with this method, hence the question. I know I can scale the moments of the daily returns in order to obtain the moments for other time frequencies, i.e. from the first column of the table to pass to the second and third thanks to a scaling law which is a function of the tail exponent $\alpha$ here . I obtained my $\alpha$ by fitting a Lèvy-Stable distribution to my time series, and what I got is $\alpha = 1.596$ Here is the scaling laws I found to pass from the distribution of the daily returns $f_{day}$ to the distribution of the weekly returns $f_{week}$ For $\alpha Since I'm interested in the numerical implementation though, I cannot use this formula. But I could calculate the general law that governs the scaling of the $k$-th moment. I managed for the case $\alpha $$ E[r_{\tau}^k] = (\tau)^{k/ \alpha} E[r_{day}^k] $$ My question is: Does this relation hold? Once I implement it should I expect the same values I got in the above table? Why someone even studied this if I can get the moment by aggregating the log-returns? Any comment is very much appreciated, I can't find literature to help me in the empirical analysis, just very theoretical stuff. Edit Here is the way I implemented it in Python ( ptf being my daily time series), and alpha is the parameter obtained by fitting a Lèvy-Stable distribution to ptf ( alpha = 1.596 ) # Scaling: methods of moments # mean mu = np.mean(ptf) # empirical daily mean (see table) mu_t= [(np.mean(ptf))*(i**(1/alpha)) for i in range(1,40)] # scales daily mean up to 40 days # std std = np.std(ptf) # daily std std_t= [std*(i**(1/alpha)) for i in range(1,40)] # skewness r_skew=[ptf[i]**3 for i in range(len(ptf))] # daily skew skew_t= [np.mean(r_skew)*(i**(3/alpha))for i in range(1,40)] # kurtosis r_kurt=[ptf[i]**4 for i in range(len(ptf))] # daily kurt kurt_t= [np.mean(r_kurt)*(i**(4/alpha))for i in range(1,40)] And here it the graphical result, which seems pretty wrong to me (the point being the values obtained as in method 1, see Table above)
