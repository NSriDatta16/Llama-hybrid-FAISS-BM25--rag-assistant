[site]: stackoverflow
[post_id]: 659649
[parent_id]: 642989
[tags]: 
Interfaces should be clearly defined before the code is written. An interface definition can be altered later if necessary, but this should only be done with the collaboration of all teams that develop for and use that interface. Having a consistent, well-defined interface helps encapsulate parts of the system, and can make it much easier to re-use common components or libraries. Good encapsulation and modularization are a necessary prerequisite for effective code re-use between independent teams (I'm assuming some sort of version control system is used). Easy access to up-to-date documentation is a must. For an agile/XP environment, my personal recommendation would be to set up a project wiki to be used for a central documentation hub. As a feature/interface/function is created or modified, part of the development process should be to create or update the documentation for that component. A developer taking half an hour to adequately document something can save a half dozen other developers half an hour each trying to figure it out on their own. Using a wiki for documentation can make it easier to make fast edits, allow multiple editors for a single page, and ensure that everyone is using the most up-to-date documentation (no potentially outdated 'local' copies of documents floating around). We've grown very organically and as a result the user interface greatly reflects the organization of our company as opposed to the organization of content which our client would find intuitive. That situation can occur when the interface is not treated as a separate, modular component. An interface should plug into the functionality beneath it but should not necessarily represent the structure of the underlying organization. I often see this sort of thing when an interface is built by 'hacking'; that is, a developer builds a new feature and modifies the UI just enough to support their feature, then the next developer does the same, etc etc until the entire UI has been cobbled together with no overarching design goals or principles. Do not underestimate the importance of the user interface or the difficulty of creating a high-quality, consistent interface. Dedicating an engineer (or small team in the case of a larger project) to design and maintain the user interface can greatly enhance the value of your product from the customer's point of view. Since the customer typically sees the user interface and none of the internal workings, the interface should be more than the product of 1% of the team's labor. Implementing a "scrum of scrums" structure is fairly easy if you get all of the individual teams on the same track. Each day, each small group/team meets for a brief status report/scrum meeting, after which each small group's designated "leader" meets for another scrum on the next level "up the food chain". Since this can be repeated up numerous levels of hierarchy, it tends to work best when the small group scrums happen first thing in the morning, and each level of scrum has a hard and fast time limit (usually 15 minutes, or 2-3 minutes per person will suffice). The time limits are useful to prevent one team going overtime and delaying their leader from the next level of scrum meeting, etc.
