[site]: stackoverflow
[post_id]: 2075208
[parent_id]: 2075151
[tags]: 
Just to play devils advocate - I have found a great use for using Exceptions for flow control: The 'cancel' button. If you have a function running on some service that may take 10-120 minutes, which is doing a bunch of different things, I've found that doing if(hasCanceled) throw new JobCancelledException() inside of my Log() function (which logs at each step that I'm at) to work just friggan awesome. It bails out of the current execution of code and stops running the job - exactly what I need. I'm sure there's some better way to do it, maybe somehow using events - but for my case it works great (especially since jobs are not regularly cancelled). Other then that though - I'm 100% in agreement that Exceptions should never be used as a flow control tool.. @Kornel - I have two words for that post... Holy $hit =) here's a simple pseudo code sample: Class Job { Public Run(param1,param2,etc...) { Try { Log("Doing Something") DoSomething() Log("Doing Another") DoAnother() Log("This keeps going, etc, inside of these function we make the same Log calls where it makes sense") Etc() } Catch(JobCancelledException) { status="Cancelled" } } Private Log(ByVal str As String) { MessateToUser(str) if(hasCancelled) throw new JobCancelledException } private SomeEvent_WhenUserPushesCancelButton() { hasCancelled=True } }
