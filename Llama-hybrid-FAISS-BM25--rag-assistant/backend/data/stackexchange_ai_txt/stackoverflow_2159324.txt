[site]: stackoverflow
[post_id]: 2159324
[parent_id]: 2159267
[tags]: 
The example below uses the following Bar.pm : package Foo::Quux::Bar; use warnings; use strict; sub one { 1 } sub two { "zwei" } sub three { 0x3333 } 1; In your test-bar program, you can install a hook that will use the current directory's Bar.pm with #! /usr/bin/perl use warnings; use strict; use File::Basename; BEGIN { sub find_bar { my(undef,$name) = @_; if (basename($name) eq "Bar.pm") { open my $fh, " \&find_bar; } Hooks in @INC are documented in the perlfunc documentation for require . Now to import all subs, ignoring any import in Foo::Quux::Bar , # fake use Foo::Quux::Bar BEGIN { require Foo::Quux::Bar; { no strict 'refs'; while (my($name,$glob) = each %Foo::Quux::Bar::) { if (*{ $glob }{CODE}) { *{ __PACKAGE__ . "::" . $name } = *{ $glob }{CODE}; } } } } Back out in the test code where the strict pragma is enabled, we can print map "$_\n", one, two, three; and get the following output: 1 zwei 13107
