[site]: crossvalidated
[post_id]: 595553
[parent_id]: 
[tags]: 
Should I use transformer.fit_transform(X_test, y_test) or not?

tl-dr: The function model.fit() is different from transformer.fit(). My idea is to make all transformations needed on the training set and after that on the test set with fit_transform in both. Hi! I'm learning about machine learning and I'm pretty confused about one thing. I read in a book that we should split the dataset into train/test set. We must use the training set to train the model. The test one is used to evaluate the performance of the trained model. The idea is that we leave the test set as isolated from training as possible. That is, if I chose Decision Tree as a model I should train it using 'dt_classifier.fit(X_train, y_train)' in the training set and never in the test set. The testing process is a comparison between what my already trained model can predict taking the test set as input with the true values ​​of this set. So I can only use 'y_pred = dt_classifier.predict(X_test)'. My question more specifically is when I want to use transformers in the data processing step. Let's say I have a dataset already splitted into train/test and there are nan values ​​in both and in the same feature. I chose to use the SimpleImputer(strategy='mean') class to fill these fields. In all the websites I read and videos I watched it was stated that I should use fit() or fit_transform() only on the training set and use transform() on the test set. They say we don't want our model to learn patterns from the test set and fit() would do that. This would be true if i use model.fit(X_test), but it is no the case. Even if I just predict values from test set to evaluate the model imputing nan values using the 'mean' of the training set wouldn't be some kind of data leakage? Because information from the training set is contaminating the test set. My impression is this advice is not that simple. Depending on the transformation I definitely should use fit_transform on the test set too like imputations. As long as I know the difference between transformer.fit() is different from model.fit() and never use this last one on the test set. One case that I shouldn't do this and use only transform() on the test set is OneHot Encoding. Because
