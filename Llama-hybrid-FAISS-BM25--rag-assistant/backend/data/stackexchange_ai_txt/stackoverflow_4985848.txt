[site]: stackoverflow
[post_id]: 4985848
[parent_id]: 4925433
[tags]: 
At the end of the day taking an image and performing three multiplies and five additions on each pixel sequentially is always going to be relatively slow. Luckily, what you're doing can be thought of as a special case of interpolating an image from one size to another - i.e. the average pixel of an image is the same as that image resized to a size of 1x1 (assuming the resizing is using some form of linear interpolation, but that's usually the standard way to do it) and there's a few highly optimized (or at least more optimized than you're likely to get without enormous effort) options for doing that that are part of the iPhone's graphics libraries. At first I'd try using the Quartz methods to resize an image: CGImageRef sourceImage = yourImage; int numBytesPerPixel = 4; u_char* scaledImageData = (u_char*)malloc(numBytesPerPixel); CGColorSpaceRef colorspace = CGImageGetColorSpace(sourceImage); CGContextRef context = CGBitmapContextCreate (scaledImageData, 1, 1, 8, numBytesPerPixel, colorspace, kCGImageAlphaNoneSkipFirst); CGColorSpaceRelease(colorspace); CGContextDrawImage(context, CGRectMake(0,0,1,1), sourceImage); int a = scaledImageData[0]; int r = scaledImageData[1]; int g = scaledImageData[2]; int b = scaledImageData[3]; (this just scales the original image down to 1 pixel and doesn't show the cropping of the sub regions but unfortunately I don't have time for that code right now - if you try to implement it and get stuck add a comment and I can show you how you would do that). If that doesn't work you could always try using OpenGL ES to do this (create a texture out of the part of your image you need to scale, render it to a 1x1 buffer, and test the result from the buffer). This is a lot more complicated but might have some advantages in that it gives you access to the GPU, which might be a lot faster for large images. Hope that makes sense and helps... P.S. - Definitely follow y0prst's suggestion and only read the image in once - that is an easy fix that is going to buy you a ton of performance. P.P.S - I haven't tested the code so usual caveats apply.
