[site]: stackoverflow
[post_id]: 1736959
[parent_id]: 1736904
[tags]: 
The short answer to your question is: you don't have to do anything to share a variable between multiple thread. All the global variables are shared among all threads by default. When a variable has to be different for each thread, if you are using a ISO-C99 compliant implementation (like GCC), you only need to add the __thread storage class keyword to your variable declaration, as in: __thread char *variable; This will instruct all the tiers in the building chain (cc, ld, ld.so, libc.so and libpthread.so) to manipulate this variable in a special thread-specific way. The following compilers support this syntax (cf wikipedia ): Sun Studio C/C++ IBM XL C/C++ GNU C Intel C/C++ (Linux systems) Borland C++ Builder
