[site]: stackoverflow
[post_id]: 2686890
[parent_id]: 2678166
[tags]: 
Usually when I mock I end up having a triad of objects. The first object would be a coordinator BillsPaidLastMonthCoordinator this object has two dependencies BillRetrievalService and BillPaidValidator . You would mock the two dependencies and your test would be for the interaction of retrieval and passing bills to the validation. So for this test you will not care what the data is. This helps separate responsibilities. Your original object was responsible for retrieving Bills and then seeing if it was a isPaid Bill. With the way you described the problem you can end up is a noisy and brittle test. The brittleness comes from it being able to be broken in two ways. With the corrdinator, it doesn't have to change if Bill implementation changes, Just the objects that actually use a Bill . My 2centavos. [EDIT] This is more aligned with using event handlers (the coordinator)
