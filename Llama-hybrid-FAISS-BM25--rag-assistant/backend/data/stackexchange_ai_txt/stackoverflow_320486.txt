[site]: stackoverflow
[post_id]: 320486
[parent_id]: 262279
[tags]: 
MDD can be really complex or relatively simple. If you want to automate transformation from your various models (in UML, for example) to code and do round-trip engineering and all that, you can get some pretty fancy tools. Or You can draw the models and build the code more-or-less by hand, using a one-way (model to code) transformation. The idea of building a model first is a well-established best practice. It's often called "design". The problems arise when people conflate design with specification. The model of what will be built is not a programming specification. It's an abstraction that can be used for evaluating correctness, defining test cases, writing specifications, etc. You don't have to model everything. You can start MDD by having a data model -- independent of any specific implementation. You draw your model using UML. You transform the UML to class definitions. You use an ORM layer (or ODBMS) to map your models to some kind of storage. You don't need a lot more than this. What you do need to do is focus on getting the model right before you tackle too many other issues. The issues usually arise from all kinds of premature optimization that happens during software development. Early leaps into RDBMS physical design. Early leaps into web page design and using that to drive the data model. Early leaps into defining the server architecture and allocating storage.
