[site]: stackoverflow
[post_id]: 3094465
[parent_id]: 3092929
[tags]: 
Simply don't use Erlang for such a thing. Reading from here : What sort of applications is Erlang particularly suitable for? Distributed, reliable, soft real-time concurrent systems. Telecommunication systems, e.g. controlling a switch or converting protocols. Servers for Internet applications, e.g. a mail transfer agent, an IMAP-4 server, an HTTP server or a WAP Stack. Telecommunication applications, e.g. handling mobility in a mobile network or providing unified messaging. Database applications which require soft realtime behaviour. Erlang is good at solving these sorts of problems because this is the problem domain it was originally designed for. Stating the above in terms of features: Erlang provides a simple and powerful model for error containment and fault tolerance (supervised processes). Concurrency and message passing are a fundamental to the language. Applications written in Erlang are often composed of hundreds or thousands of lightweight processes. Context switching between Erlang processes is typically one or two orders of magnitude cheaper than switching between threads in a C program. Writing applications which are made of parts which execute on different machines (i.e. distributed applications) is easy. Erlang's distribution mechanisms are transparent: programs need not be aware that they are distributed. The OTP libraries provide support for many common problems in networking and telecommunications systems. The Erlang runtime environment (a virtual machine, much like the Java virtual machine) means that code compiled on one architecture runs anywhere. The runtime system also allows code in a running system to be updated without interrupting the program. What sort of problems is Erlang not particularly suitable for? People use Erlang for all sorts of surprising things, for instance to communicate with X11 at the protocol level, but, there are some common situations where Erlang is not likely to be the language of choice. The most common class of 'less suitable' problems is characterised by performance being a prime requirement and constant-factors having a large effect on performance. Typical examples are image processing, signal processing, sorting large volumes of data and low-level protocol termination. Another class of problem is characterised by a wide interface to existing C code. A typical example is implementing operating system device drivers. Most (all?) large systems developed using Erlang make heavy use of C for low-level code, leaving Erlang to manage the parts which tend to be complex in other languages, like controlling systems spread across several machines and implementing complex protocol logic. As suggested by Andrzej, you should look into other directions. Maybe a different question on StackOverflow asking "which language would be good for..." could be the first step... UPDATE If you still intend to use Erlang to reset your passwords you might want to have a look to the Erlang SSH Channel Behaviour as well. Reading from the doc: Ssh services are implemented as channels that are multiplexed over an ssh connection and communicates via the ssh connection protocol. This module provides a callback API that takes care of generic channel aspects such as flow control and close messages and lets the callback functions take care of the service specific parts.
