[site]: stackoverflow
[post_id]: 3327923
[parent_id]: 3327885
[tags]: 
Which one do you prefer more (within bounds of your functional -- and political -- requirements)? Which one requires more initial investment? Which one do you want to maintain (long-term investment)? And which one will help you solve your problem(s) the best? IronPython is, well, Python. That also means it is considerably more dynamic -- which adds run-time overhead -- than F#. If you prefer Python over F#, and it runs fast enough for you, then why not use it? As you mentioned, it does have better 'Python library' support, so if you can leverage that to your advantage, then score IronPython. On the other hand, "just" being constrained to the .NET (and F#-friendly) libraries really isn't so bad for a language like F#, as long as the libraries to do what you need to do exist or can be marginalized. However, it really does come down to the paradigm as well as the preference and experience of the developers. I personally avoid dynamic languages where I can :-)
