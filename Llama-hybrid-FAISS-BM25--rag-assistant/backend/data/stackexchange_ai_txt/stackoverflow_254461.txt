[site]: stackoverflow
[post_id]: 254461
[parent_id]: 
[tags]: 
.NET : How do you get the Type of a null object?

I have a method with an out parameter that tries to do a type conversion. Basically: public void GetParameterValue(out object destination) { object paramVal = "I want to return this. could be any type, not just string."; destination = null; // default out param to null destination = Convert.ChangeType(paramVal, destination.GetType()); } The problem is that usually someone would call this like: string output; GetParameterValue(output); This will fail because of: destination.GetType() destination is null, so we can't call .GetType() on it. We also can not call: typeof(destination) because destination is a variable name not a type name. So is there any way to get the type of an object that is set to null? I would think there would have to be a way to know what type a storage location is without it being assigned anything. Just to give a bit more info, I am trying to make a utility method that will grab the output parameters of an Oracle stored procedure. The issue is that DbParameter.Value is of type object. What would be ideal would be for the developers to do something like: string val = GetParameterValue("parameterName"); The notable thing is that there is no casting of types. In practice, you don't know the lparam of the "equals", so I went with: string val; GetParameterValue("parameterName", out val); And figured within the method, I would know the destination type of the output variable. I guess that was a bad assumption. As an alternative, I also wrote the method: public T GetParameterValue (string paramName) So the developers can do: string val = GetParameterValue ("parameterName"); I find the explicit "string" declaration to be repetitive, especially since in practice, the destination if probably an object property and the oracle data type could change (think ORM): MyObj.SomeProp = GetParameterValue ("parameterName"); But again, if MyObj.SomeProp is null, that .GetType() call fails. The VM has to know the type of MyObj.SomeProp , even when its null, right? or else how would it catch cast exceptions? To partially solve my own problem, I can do: MyObj.SomeProp = GetParameterValue ("parameterName"); The whole idea was to not have to explicitly use the Type in more than one place, so that if the data type changes, it only has to be changed in the destination object ( MyObj.SomeProp ) and in the DB. There has to be a better way...
