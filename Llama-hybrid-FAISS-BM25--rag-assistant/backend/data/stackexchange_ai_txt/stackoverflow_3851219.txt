[site]: stackoverflow
[post_id]: 3851219
[parent_id]: 3848705
[tags]: 
First, try not to worry too much about performance until you see an actual bottleneck somewhere. Have faith in the multitude of caching systems. Put more cynically, Magento's already a bit of a SQL beast, so if you have a store tuned well a few extra queries won't hurt. Second, the database hit might not even be a problem. The shipping/rate_request Model doesn't appear to be backed by a database. If you look at the two times it's used in the core code Mage_Shipping_Model_Shipping::collectRatesByAddress Mage_Sales_Model_Quote_Address::requestShippingRates you can see the shipping/rate_request model is being instantiated, and then populated from already loaded fields. Additionally, all the models used in Mage_Shipping_Model_Carrier_Tablerate::collectRates don't load anything from a database, they just do calculations. It's admirable that you want to build something that's as performant as possible in the first go around, but there's too many complex interactions in a modern OO system to magically know the most performant way to do something. Do what you need to to get the information you need, and handle performance tuning (if needed) during a maintenance release (or if you're not lucky enough to have maintenance release, when someone with power in your organization grumbles about the speed somewhere) Third, when the system doesn't provide access to something yo need, that's what the class override system is for. Something like class Package_Module_Model_Carriertablerate extends Mage_Shipping_Model_Carrier_Tablerate { public function getRate(Mage_Shipping_Model_Rate_Request $request) { $rate = parent::getRate($request); Mage::register('package_module_carriertablerates', $rate); return $rate; } } ... //later, retrieve the rate $rates = Mage::registry('package_module_carriertablerates'); You're basically calling the same code as before, but stowing the results away somewhere for later access. About as safe as an override can get.
