[site]: stackoverflow
[post_id]: 3995596
[parent_id]: 3995302
[tags]: 
The most elegant and flexible solution is to put the sizes in a separate table and use JOINs. For example a table definition can look like this: CREATE TABLE sizes ( id INT PRIMARY KEY AUTO_INCREMENT, ord INT, name VARCHAR(8) ); And in those tables where you previously used sizes, you should use size_id: CREATE TABLE tshirts ( id INT PRIMARY KEY AUTO_INCREMENT, colour VARCHAR(16), price INT, size_id INT ); And when you query, you JOIN it with sizes, order by sizes.ord and display sizes.name to the user like this: SELECT colour, price, sizes.name FROM tshirts JOIN sizes ON tshirts.size_id = sizes.id ORDER BY sizes.ord; This way, the order of sizes can be independent of the name, and you can still manage them using the separate table.
