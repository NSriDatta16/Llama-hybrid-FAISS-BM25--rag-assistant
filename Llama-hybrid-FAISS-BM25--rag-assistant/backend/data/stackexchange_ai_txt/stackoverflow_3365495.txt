[site]: stackoverflow
[post_id]: 3365495
[parent_id]: 3340423
[tags]: 
Some good answers, but... To Robert W : the master page impl works, but it does require strong coupling (knowledge of) with the master page type. Master pages should generally affect style only, right? E.g. I should be able to change master pages without breaking my app. SubPortal : yes, very clever, but... too clever for me. Also has master page issue. RPM1984 : again, too clever for me! MGOwen didn't mention any special DHTML requirements (e.g. update from client side). So why not just implement a simple server-side helper method as he mentioned, find the target control which displays the message, and display it? The following ShowMessage will find the target message control wherever it is on the page, as well as enable any page to override the default application's ShowMessage behavior if desired. public static class ASPHelper { // Defines something that shows a message public interface IShowMessage { void ShowMessage(string msg); } // default implementation: finds a target message display control // wherever it is on the page. static void ShowMessage_Default(string msg) { const string SHOWMESSAGE_CONTROL_ID = "ctlShowMessage"; // or whatever // find the control Page currentPage = HttpContext.Current.CurrentHandler as Page; Control ctlMessage = currentPage.FindControlRecursive(SHOWMESSAGE_CONTROL_ID); if (ctlMessage == null) throw new Exception("ShowMessage control not found!" ); Literal ctlMessageLiteral = ctlMessage as Literal; if (ctlMessageLiteral == null) throw new Exception("ShowMessage control must be a Literal!"); // Message control should not implement viewstate -- unneccesary Debug.Assert(ctlMessageLiteral.EnableViewState == false); // show it ctlMessageLiteral.Text = msg; ctlMessageLiteral.Visible = true; } // public version for use across app & in pages static public void ShowMessage(string msg) { // Allow the current page to implement its own way of showing // messages -- provides flexibility. Page currentPage = HttpContext.Current.CurrentHandler as Page; IShowMessage showMessageImpl = currentPage as IShowMessage; if (showMessageImpl != null) { // Show using custom message displayer showMessageImpl.ShowMessage(msg); } else { // static/global/default version ShowMessage_Default(msg); } } } // end ASPHelper To use, simply place a literal control on the page, as in: To use, simply call ShowMessage , as in ASPHelper.ShowMessage("insufficient credit") . Hope this is what you're looking for... Keith
