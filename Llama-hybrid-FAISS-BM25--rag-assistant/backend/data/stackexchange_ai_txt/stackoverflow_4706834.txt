[site]: stackoverflow
[post_id]: 4706834
[parent_id]: 4706766
[tags]: 
In general, you should use one DataContext per database conversation. Only you can decide exactly what a conversation is, but typically it is a complete request (fetch the user's wish list, or fetch the user's closed orders, for example) that you might think of as a "unit of work." Typically what happens is something like this: WishList wishlist; using(var context = new DataContext(connectionString)) { var service = new UserWishListService(context); wishlist = service.GetUserWishList(); } Also, what exactly would happen if I don't use using within the calls? The DataContext won't be disposed of properly (unless you've wrapped in a try-catch-finally , but generally you should just use using ). Does this means that each DataClassesDataContext call makes a separate connection? Not quite. Your application will benefit from the SQL Server ADO.NET provider's built-in connection pooling . Don't worry about this, let the provider manage it for you. It seems inefficient, so is the right way to actually make the DataClassesDataContext object a static within each class being used? Absolutely not. DataContext s are not thread-safe (in fact, they are thread-unsafe) and this has "there be dragons" written all over it. Additionally, even a single-threaded context, a static DataContext is a bad choice because the DataContext maintains a cache (for object tracking purposes) of all the entities it has pulled from the database. Over time, the memory consumption will become ginormous.
