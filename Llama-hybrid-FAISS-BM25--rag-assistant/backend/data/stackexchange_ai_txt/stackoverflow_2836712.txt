[site]: stackoverflow
[post_id]: 2836712
[parent_id]: 2831617
[tags]: 
First, VFP doesn't support a case-when construct at the field level. Additionally, your sub-select at the field level has comma after the from table and before the where, and after the where clause, before the order... such as select * from MyTable, where SomeCondition, Order by ... If doing a VFP report, you don't have to manually add lines to your groups into your raw data, that should be done in the report itself by datagrouping and add your ItemID as the basis of the group. Then have your "summable" columns copy/pasted into the group footer band of the report per item. Double click on the field, and for the calculation, tell it to sum(), and to reset at the end of each group (ie: ItemID). Then, include a report summary band. This prints once for the entire report... Like the summary items at the item level, copy/paste again, but put into the report summary band. Double click those elements to sum() and reset at the END OF REPORT. However, since you are running in VFP9, and you might want to DUMP the data out with the lines already included in their respective positions, I would break into separate queries and merge the results together as I've sampled below. Pre-extract what would be the line-item support for the report data without any necessary aggregates. SELECT ; qItemSaleLines.ItemID, ; qItemSaleLines.SaleID, ; qCustomers.CardRecordID, ; qItems.ItemNumber AS ProdCODE, ; qItems.ItemName AS StkNAME, ; qCustomers.LastName AS CUSTOMER, ; qSales.InvoiceNumber AS SaleINVNo, ; qSales.InvoiceDate AS SaleDATE, ; qItemSaleLines.Quantity AS SaleQTY, ; qItemSaleLines.TaxExclusiveTotal AS SALE, ; qItemSaleLines.CostOfGoodsSoldAmount AS COGS, ; qItemSaleLines.TaxExclusiveTotal - qItemSaleLines.CostOfGoodsSoldAmount AS MARGIN, ; (qItemSaleLines.TaxExclusiveTotal - qItemSaleLines.CostOfGoodsSoldAmount) / qItemSaleLines.TaxExclusiveTotal AS MPERCENT, ; "1" as TierLevel,; "1" as SubTier,; SPACE(50) as GroupCaption; FROM ; qSales, ; qCustomers, ; qItemSaleLines, ; qItems, ; WHERE ; qSales.CardRecordID = qCustomers.CardRecordID ; AND qSales.SaleID = qItemSaleLines.SaleID ; AND qItemSaleLines.ItemID = qItems.ItemID ; AND qSales.InvoiceDate > {^2009-06-30} ; ORDER BY ; qItems.ItemNumber, ; qSales.InvoiceDate ; INTO ; CURSOR C_TmpAllLineItemResults READWRITE */ NOW, get your individual "ITEM GROUP" totals from ABOVE results... SELECT ; TR.ItemID, ; TR.ItemNumber AS ProdCODE, ; TR.ItemName AS StkNAME, ; "1" as TierLevel,; "2" as SubTier,; "Subtotal by " + TR.ItemNumber as GroupCaption; SUM( TR.SaleQty ) as SaleQty,; SUM( TR.Sale ) as Sale,; FROM ; C_TmpAllLineItemResults TR; GROUP BY ; 1, 2, 3, 4, 5, 6; ORDER BY ; 1; INTO ; CURSOR C_SubTotalPerItem READWRITE */ NOW, get your REPORT totals from ABOVE results... SELECT ; "2" as TierLevel,; "Report Totals " as GroupCaption; SUM( STBI.SaleQty ) as SaleQty,; SUM( STBI.Sale ) as Sale,; FROM ; C_SubTotalPerItem STBI; GROUP BY ; 1, 2; INTO ; CURSOR C_ReportTotals READWRITE */ Finally, merge them together... since the append from will add records with matching columns, */ even though a subtotal cursor doesn't have all the same columns, VFP doesn't care, just */ adds for columns that DO match the table its going into. SELECT C_TmpAllLineItemResults APPEND FROM DBF( "C_SubTotalPerItem" ) APPEND FROM DBF( "C_ReportTotals" ) */ Now, they are all merged... Finally, build an index for your report INDEX on TierLevel + ItemID + SubTier TAG RptOrder */ Now, browse / review the order and adjust as needed...
