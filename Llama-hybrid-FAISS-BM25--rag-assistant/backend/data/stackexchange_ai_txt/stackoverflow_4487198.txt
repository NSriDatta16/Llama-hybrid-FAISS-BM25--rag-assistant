[site]: stackoverflow
[post_id]: 4487198
[parent_id]: 4487099
[tags]: 
def average(x: List[Int]) : Float = x.foldLeft(0)(_ + _) / x.length.toFloat UPDATE: While I was aiming to show how an iterative code can be made into a functional expression, @soc rightly commented that an even shorter version is x.sum / x.length.toFloat I usually find that in Scala I have less need to "return in the middle". Furthermore, a large function is broken into smaller expressions that are clearer to reason. So instead of var x = ... if (some condition) x = ... else x = ... I would write if (some condition) ... else .... Similar thing happens using match expressions. And you can always have helper nested classes. Once you are comfortable with many forms of expressions that evaluate to a result (e.g., 'if') without a return statement, then having one in your methods looks out of place. At one place of work we had a rule of not having 'return' in the middle of a method since it is easy for a reader of your code to miss it. If 'return' is only at the last line, what's the point of having it at all?
