[site]: stackoverflow
[post_id]: 5087183
[parent_id]: 
[tags]: 
Does using Implicit / Explicit conversion operators violate Single Responsibility Pattern in favor of DRY?

I need to convert between these two classes, and want to maintain DRY but not violate the Single Responsibility Pattern... public class Person { public string Name {get;set;} public int ID {get;set;} } public class PersonEntity : TableServiceEntity { public string Name {get;set;} public int ID {get;set;} // Code to set PartitionKey // Code to set RowKey } More Info I have some Model objects in my ASP.NET MVC application. Since I'm working with Azure storage I see the need to convert to and from the ViewModel object and the AzureTableEntity quite often. I've normally done this left-hand-right-hand assignment of variables in my controller. Q1 Aside from implicit/explicit conversion, should this code be in the controller (x) or the datacontext (y) ? Person View Controller.ConverPersonHere(x?) StorageContext.ConvertPersonHere(y?) AzurePersonTableEntity Q2 Should I do an implicit or explicit conversion? Q3 What object should contain the conversion code? Update I'm also implementing WCF in this project and am not sure how this will affect your recommendation . Please also see this question.
