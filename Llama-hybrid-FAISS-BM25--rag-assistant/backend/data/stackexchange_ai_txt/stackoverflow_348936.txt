[site]: stackoverflow
[post_id]: 348936
[parent_id]: 348867
[tags]: 
I think you can also leverage the mvc framework for most of your code. Correct me if I'm wrong because I'm gonna make a few assumptions about your classes because I can't deduct it from your post. My assumptions: Request.Form["action"] is a single value selectbox Request.Form["value"] is a multy value selectbox action is the kind of action you want to be taken on all the messages message is the list of values that should go with the action I would try to leverage the framework's functionality where possible [AcceptVerbs(HttpVerbs.Post)] public ActionResult SaveMemberAction(SelectList selectedMessages, MemberMessageAction actionType){ //Refactors mentioned by others } If you then give your inputs in your Html the correct name (in my example that would be selectedMessages and actionType) the first few rules become unnessecary. If the default modelBinder cannot help you, you might want to consider putting the parsing logic in a custom modelbinder. You can search SO for posts about it. As a side note: you might want to reconsider your variable namings. "action" might be confusing with MVC's action (like in ActionResult) and MemberMessageSaveAction might look like it's a value of MemberMessageAction enum. Just a thought.
