[site]: stackoverflow
[post_id]: 1395675
[parent_id]: 1365276
[tags]: 
A couple things that might be worth noting: Unless you have all optimization turned off, this is going to compile away to nothing. The memory will not be written to at all - you might as well have written: #pragma warning(push,4) int main(){ return 0; } #pragma warning(pop) As mentioned elsewhere, doing analysis like this is hard (as in non-computable-trying-to-solve-the-halting-problem). When doing optimizations, it's OK to only do them in the cases where the analysis is easy. When you're looking for warnings, there is a trade-off between being able to find the easy cases, and letting people get dependent on the warnings. At what point is it ok to stop giving the warnings? Yes the locally declared variable being accessed by a constant offset is trivial - but by virtue of being trivial, it's also less important. What if the access is in a trivially inlined function? Or if the access is in a for-loop with constant bounds? These are both easy enough to look for, but they each represent a whole new set of tests, possible regressions, etc... for very little benefit (if any). I'm not saying that this warning isn't useful - it's just not as clear-cut as you seem to think it is.
