[site]: stackoverflow
[post_id]: 3788858
[parent_id]: 3788744
[tags]: 
They might not be public in the strictest sense of the word, but using internal members seems like a copout to me. Personally, I'd just make the wrappers internal, and treat your whole set of classes as a single public API. I understand the desire to avoid this - it forces you to create classes, which, for you during your development, violate the single responsibility principles. However, from the POV of the "outside" world, anybody using your software will see each class you provide having a single, clear responsibility, and a single purpose. The API can be at least as clean as the ones you're wrapping (probably much simpler, given the managed code). My main motivation for doing this, in this situation, is one of practicality. Yes, I agree with the guidelines you're trying to follow here - but, they're guidelines , and guidelines are something worth following provided they don't cause more harm than good. I commend you for trying to keep this as clean and elegant as possible, but unfortunately, it sounds like, in this situation, trying to make this "more elegant" is going to lead to more code, which will equate to less maintainable. I'd stick with the shortest, simplest solution here - making the native wrappers internal, so you can get to the data structures you need in your wrapper classes. Just document what you're doing, and why.
