[site]: stackoverflow
[post_id]: 2945036
[parent_id]: 2942927
[tags]: 
I'd probably set up a "normal" table structure for the "normal" bits of data (name, address, phone, etc..) and then have a one->many relation to a separate table "custom_fields" that contains three columns: user_id(foreign ey), fieldtype(string), data(string/blob) As an alternative, you could just add a blob or text field in the main contacts table that contains a formatted list of custom field/value mappings (you can use BSON, JSON, or YAML to make life easy). Then just unpack the data when the user opens the contact. If you need faster performance and the ability to sort your contacts by custom field easily, you might want to look into document-centric database backends like MongoDB, or even a search engine proper (SOLR or Google.. idk..) Might be overkill, but might also be an interesting project! There are many, many, many ways to associate custom fields and values with entries in a "normal" database. Just pick one that you understand and can write quickly and go for it. I've never seen a company/employer care about "standards compliance" of the backend data storage system.. As long as you write some sort of export script, or (as mentioned) write plugins to support seamless VCARD/XML import/export, you can claim that your app is "standards compliant."
