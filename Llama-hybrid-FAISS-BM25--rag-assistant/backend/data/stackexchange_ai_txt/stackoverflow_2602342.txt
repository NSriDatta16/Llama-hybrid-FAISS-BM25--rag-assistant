[site]: stackoverflow
[post_id]: 2602342
[parent_id]: 2601268
[tags]: 
If your project is truly imperative, you probably don't want a purely functional language. But you probably still want a language with functional features; functional style addresses low-level code structure in the same way that object-oriented style addresses high-level structure. Both allow you to package certain common patterns in a language-supported way. In a primarily imperative project, functional style is useful at the expression and statement level, allowing you to abstract common loops and sequences: For example, take this common pattern: newlist = [] for x in oldlist: y = dosomething(x) newlist.append(y) That's map : newlist = map(dosomething, oldlist) Or this: total = 1 for n in numbers: total = total * n Becomes fold (also known as reduce ): total = fold(*, 1, numbers) Imperative style does not address this low-level duplication all that well--hence the "I wish I had a nickel for every time I typed for(int i = 0; ...) ". Even in OO languages without functional features, code inside methods doesn't differ much from similar non-OO languages. Some IDEs for address this by providing code snippets. This addresses the lack of abstraction power in the wrong way. The way to handle a repeated pattern is not to encourage cut-and-paste with little holes for variable names, but to abstract the pattern into a reusable unit. Note: I addressed embedding functional code in an imperative project. A top-to-bottom project in functional style will look different. Here are some links taken from similar Stack Overflow questions: http://www.25hoursaday.com/weblog/2008/06/16/FunctionalProgrammingInC30HowMapReduceFilterCanRockYourWorld.aspx http://www.joelonsoftware.com/items/2006/08/01.html
