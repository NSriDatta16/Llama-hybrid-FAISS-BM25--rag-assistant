[site]: stackoverflow
[post_id]: 4282682
[parent_id]: 4282416
[tags]: 
Alright. I've had a look at the code you posted on GitHub and found a few issues with your DetailView controller, which I am outlining below. Firstly, you were not passing your managed object context to the detail view properly, meaning that when you were trying to save your objects there was no context for them to be saved from. Think of the Managed Object Context as a "draft" of your persistent store. Any changes you make to an NSManagedObject will be tracked and kept on your context until you persist them with the [managedObjectContext save] command. So just to be clear, you are creating your context in your AppDelegate, then you passed a reference to it to your RootViewController with rootViewController.managedObjectContext = self.managedObjectContext From the RootViewController, you need to pass the managedObjectContext down to the DetailView using the same technique. So in your tableView:didSelectRowAtIndexPath: method, you should pass a reference to the context so any changes you make on that view will be tracked and can eventually be persisted: - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath { DetailView *detailView = [[DetailView alloc] initWithNibName:@"DetailView" bundle:nil]; detailView.event = (Event *)[[self fetchedResultsController] objectAtIndexPath:indexPath]; detailView.managedObjectContext = self.managedObjectContext; // ... [self.navigationController pushViewController:detailView animated:YES]; [detailView release]; } I've also updated all the other references to managedObjectContext where you were instantiating a new context object to simply point to self.managedObjectContext,i.e: JustString *_justString = [NSEntityDescription insertNewObjectForEntityForName:@"JustString" inManagedObjectContext:self.managedObjectContext]; Once that's out of the way, there is only one more thing that was preventing you from saving the image object properly, which TechZen touched on above. In your DetailView controller, you have a imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info{ method where you transform the UIImage into NSData and then assign it to your Image entity instance. The problem with that is that you already have a transformer method in your object model (see Event.m) called -(id)transformedValue:(id)value . So basically you were trying to transform the UIImage into NSData and then passing NSData to the entity, which was actually expecting an UIImage. In this case, I'd recommend that you let your object model deal with the data transformation so in your DetailView controller, comment out the UIImage to NSData transformer code, and pass the image directly to your managed object: - (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info{ UIImage *selectedImage = [info objectForKey:@"UIImagePickerControllerOriginalImage"]; // Transform the image to NSData // ImageToDataTransformer *transformer = [[[ImageToDataTransformer alloc] init] autorelease]; // NSData *imageData = [transformer transformedValue:selectedImage]; Image *_image = [NSEntityDescription insertNewObjectForEntityForName:@"Image" inManagedObjectContext:self.managedObjectContext]; _image.justImage = selectedImage; [event addEventToImageObject:_image]; [picker dismissModalViewControllerAnimated:YES]; } After that, you should be good to go so give it a try and let us know if it solves your problems. CoreData can have a bit of a steep learning curve but once you 'get it' you will realise it's one of the most beautifully crafted APIs available in iOS development. Good luck with it and let us know how you go! Rog
