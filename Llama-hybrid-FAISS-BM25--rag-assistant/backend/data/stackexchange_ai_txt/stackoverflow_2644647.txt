[site]: stackoverflow
[post_id]: 2644647
[parent_id]: 2644290
[tags]: 
Frankly I feel like I've been pitched in at the deep end and I'm sinking. I'm not sure if this is because I lack the educational background to understand this stuff, if I'm simply not mathematically minded enough for modern computing (my maths was never great - my approach to design is often to simply debug until it works, then refactor until it looks neat), or whether I've simply been presented with too much of too radical a nature at once. But the only way to find out which it is is to try and learn it. For me it's because of your lack of educational background. People learning themselves or at work often don't have the necessary background to really understand what is behind the scene of a framework. Some concepts are general to all informatic systems and we learn them at school, thus we can understand how these concept works in every languages... You seem more like a pragmatic (and efficient?) programmer, but you will make mistakes is you don't have that general background (but you should know you aren't alone in this case... particulary php dev i think don't have either this background). How to understand relation of code with DB, ORM like Hibernate, if you don't exactly know what is a transaction (i guess you know how to use it... (pragmatic i said!) but you prolly never heard of concepts like ACID: http://en.wikipedia.org/wiki/ACID , i guess you don't know a lot about transaction isolation ). How to use soa architecture with webservices, rpc, rmi, corba... efficiently and be able to have consistent data in your db if you don't know some concepts like the 2 phaze commit http://en.wikipedia.org/wiki/Two-phase_commit_protocol How to write good code if you don't know many design patterns, best practices, and you don't know when to use them? We could say many things. The fact is just you miss a part of informatic general knowledge that engineer students all (normally?) have. When we are start working after an engineer school we are not expert in these things, but the only difference with you is that we know very important concept exist and when they should be used. Thus we just have to read about that and apply what we learn from the web or our team (because at school we barely see the basics, but on many techs). I really think nothing is impossible for you, you just should real a lot of things about general concepts that you don't know and you heard a lot of. Without this knowledge you'll just tend to reinvent the wheel and with your pragmatism find alternative solutions that certainly works but are just a little bit dirty... For exemple your dev could work but when you introduce high load on your system, you may have concurrency problems, performances problems. This lack of knowledge is not a matter when you'r on a simple context but is really needed when you have lot of responsabilities on a complex system...
