[site]: stackoverflow
[post_id]: 4963989
[parent_id]: 4897800
[tags]: 
OK, so here's how I do it: row.xml (Used for each row in the list view): I extend CursorAdapter to create or re-use existing ListActivity rows (supplied by the ListActivity ) defined in row.xml. bindView is used if Android wants you to re-use an existing row resource, newView is used if it wants you to create a new one: class BarcodeAdapter extends CursorAdapter { BarcodeAdapter(Cursor c) { super(kitchenListInventoryActivity.this, c); } @Override public void bindView(View row, Context ctxt, Cursor c) { BarcodeHolder holder=(BarcodeHolder)row.getTag(); holder.populateFrom(c, helper); } @Override public View newView(Context ctxt, Cursor c, ViewGroup parent) { LayoutInflater inflater=getLayoutInflater(); View row = null; row = inflater.inflate(R.layout.row, parent, false); BarcodeHolder holder=new BarcodeHolder(row); row.setTag(holder); return(row); } } BarcodeHolder is just a convenience class to hold a Java representation of the row, which I associate with the ListActivity item with setTag above. Not necessarily the most elegant way, but it simplifies things.: static class BarcodeHolder { private TextView description=null; private TextView manufacturer=null; private TextView EAN = null; private TextView category = null; private View row=null; BarcodeHolder(View row) { this.row=row; description=(TextView)row.findViewById(R.id.itemDescription); manufacturer=(TextView)row.findViewById(R.id.itemManufacturer); EAN=(TextView)row.findViewById(R.id.EAN); category = ( TextView )row.findViewById(R.id.Category); } void populateFrom(Cursor c, BarcodeHelper helper) { Cursor invCursor = helper.getByInventoryEAN(helper.getBarcode(c)); Cursor dbCursor = helper.getByEAN(helper.getBarcode(c)); dbCursor.moveToFirst(); invCursor.moveToFirst(); int qty = helper.getQuantity ( invCursor ); String desc = helper.getDescription(dbCursor) + " (" + String.valueOf( qty ) + ")" ; description.setText( desc ); manufacturer.setText(helper.getManufacturer(dbCursor)); category.setText(helper.getCategory(dbCursor)); } } To bring this all together, I call initList in my onCreate of the ListActivity : private void initList ( ) { if ( model != null ) { stopManagingCursor(model); model.close(); } model = helper.getAllInventory(); startManagingCursor(model); adapter = new BarcodeAdapter(model); setListAdapter(adapter); } model is a Cursor , and adapter is an instance of BarcodeAdapter , which I've shown above. I tell the ListActivity to use this adapter so that I can correctly populate the rows. getAllInventory is a member of BarcodeHelper which overrides SQLiteOpenHelper : public Cursor getAllInventory( ) { String sql = "SELECT _id, EAN, quantity FROM Inventory ORDER BY EAN"; return(getReadableDatabase().rawQuery(sql, null)); } The helper object just contains a collection of convenience functions. All of this is based on CommonsWare's excellent Android tutorial book which I cannot recommend enough, but there should be enough here to get you going.
