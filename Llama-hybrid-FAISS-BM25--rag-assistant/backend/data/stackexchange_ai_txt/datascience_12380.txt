[site]: datascience
[post_id]: 12380
[parent_id]: 10841
[tags]: 
Question 1) Is this a good idea in general? Solving this problem as a supervised learning regression problem is a fantastic idea and is the type of solution that will greatly benefit your company since it will translate to other similar and dissimilar problems much more easily than deterministic methods. However using a neural network to solve this supervised learning regression problem is probably a very bad idea. Neural networks can add great value to certain problems, are among the very best algorithms for complex problems where computing power is not an issue, and have fascinating implications for the future of machine learning and artificial intelligence. But... they can be very tricky to train, require a lot of computing power, require a lot of data, and perform poorly in many cases. I suggest you scope the problem using linear regression and then try a support vector regressor (SVM, SVR) or naive Bayes regressor. The analogue methods in SVR work very well with limited data and provide surprisingly accurate results. Question 2) If yes, what type of NN would be most suited for such a problem? If you must use a neural network then try playing with the problem. Start with a feed forward neural network. Note that it will likely underperform an SVR. Then think about moving toward a convolution neural network. Again, this is probably a very bad way to go. Try linear regression followed by other methods first. Moving forward The documentation for either Scikit-Learn in python, H20 in Java, or Weka provide very shallow learning curves to jump on the merry-go-round and take a spin or two. Please make sure that you thoroughly understand cross validation and scoring metrics as this is essential to continued, adequate progress. Hope this helps!
