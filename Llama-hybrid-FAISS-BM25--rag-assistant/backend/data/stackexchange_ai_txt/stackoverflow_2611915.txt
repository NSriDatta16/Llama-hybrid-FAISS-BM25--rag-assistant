[site]: stackoverflow
[post_id]: 2611915
[parent_id]: 2186411
[tags]: 
I also followed the same guide at toroid.org, but I'd like to note that although you started with a bare repository, by adding a working directory, extra handling will most likely be needed. I found that the following hook is useful if you have content that may change dynamically or otherwise and don't want to lose data when using git checkout -f pre-receive #!/bin/sh git add -A git diff --quiet --cached if [ $? -gt 0 ]; then git commit --quiet -m "autocommit" echo "Working Directory was out of sync. Pull to receive updated index." exit 1 fi This will stop a push if there are changes in the remote working directory. Think of it as someone (the web server) making changes but forgetting to commit them. Using checkout with the -f will discard those changes. This hook is a good place to prevent this from happening, but it would be nice if there was also a hook called on the remote server prior to a pull so that you would receive these changes seamlessly. post-receive #!/bin/sh git checkout -f echo "Working directory synced." Regarding have two branches, I thought your first solution was more elegant than having to deal with multiple repositories. If you really want to keep your production site isolated, you could use rsync locally which has similar delta patching. I would have a testing and stable branch in the repository with only the testing site as the working directory. When ready to release merge the testing into the stable branch, push, and have a hook looking for commits to stable branch make the call to rsync.
