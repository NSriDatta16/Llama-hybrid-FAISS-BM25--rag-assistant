[site]: stackoverflow
[post_id]: 3313754
[parent_id]: 
[tags]: 
static abstract methods in c++

I have an abstract base class class IThingy { virtual void method1() = 0; virtual void method2() = 0; }; I want to say - "all classes providing a concrete instantiation must provide these static methods too" I am tempted to do class IThingy { virtual void method1() = 0; virtual void method2() = 0; static virtual IThingy Factory() = 0; }; I know that doesnt compile, and anyway its not clear how to use it even if it did compile. And anyway I can just do Concrete::Factory(); // concrete is implementation of ITHingy without mentioning Factory in the base class at all. But I feel there should be some way of expressing the contract I want the implementations to sign up to. Is there a well known idiom for this? Or do I just put it in comments? Maybe I should not be trying to force this anyway Edit: I could feel myself being vague as I typed the question. I just felt there should be some way to express it. Igor gives an elegant answer but in fact it shows that really it doesn't help. I still end up having to do IThingy *p; if(..) p = new Cl1(); else if(..) p = new Cl2(); else if(..) p = new Cl3(); etc. I guess reflective languages like c#, python or java could offer a better solution
