[site]: stackoverflow
[post_id]: 4368487
[parent_id]: 4368138
[tags]: 
This is really a subjective question and you will get varied answers. A few things to keep in mind. Keep the test code short and sweet. I try to fit all my unit test functions in one screen. If I can do that, than I put anything in there I want to. I certainly test more than one thing in a particular function as long the overlying method is short. duplicating code unit tests, with only one variable difference is a maintenance nightmare. Imagine having 5 unit tests, each containing 40 lines of code, and the only difference between them is a silly return value. If you do that, you will be scratching your head in 6 months. Use a code coverage tool while writing unit tests. I can't over emphasize that. It will help you identify areas that are you not testing. I have found it helps me eliminate dead code as well, since less code is less potential bugs. The most complicated logic I ever put in a unit test, is a for loop. And that is only to initialize a simple array, if it is needed for something specific to the test. I always steer clear of if statements in unit tests. But if are using data driven tests, a for loop is just fine to feed data into your tests, if you need to do it. But if the for loop is small, feel free to unroll the loop too. I hope some of that advice helps.
