[site]: stackoverflow
[post_id]: 1771523
[parent_id]: 1771216
[tags]: 
tl;dr IMHO, Avoiding exceptions for performance reasons hits both categories of premature and micro- optimizations. Don't do it. Ah, the religious war of exceptions. The various types of answers to this are usually: the usual mantra (a good one, IMHO): "use exceptions for exceptional situations" (IOW, not part of "normal" code paths). If your normal user paths involved intentionally using exceptions as a control-flow mechanism, that's a smell. tons of detail, without really answering the original question if you really want detail: http://blogs.msdn.com/cbrumme/archive/2003/10/01/51524.aspx http://blogs.msdn.com/ricom/archive/2006/09/14/754661.aspx etc. someone pointing at microbenchmarks showing that something like i/j with j == 0 is 10x slower catching div-by-zero than checking j == 0 pragmatic answer of how to approach performance for apps in general usually along the lines of: make perf goals for your scenarios (ideally working with customers) build it so it's maintainable, readable, and robust run it and check perf of goal scenarios if a set of scenarios aren't making goal, USE A PROFILER to tell you where your time is being spent and go from there. IOW, any perf changes, especially micro-optimizations like this, made without profiling data driving that decision, is typically a huge waste of time. Keep in mind that your perf wins will typically come from algorithmic changes (adding an index to a table to avoid table scans, moving something with large n from O(n^3) to O(n ln n), etc.). More fun links: http://en.wikipedia.org/wiki/Program_optimization http://www.flounder.com/optimization.htm
