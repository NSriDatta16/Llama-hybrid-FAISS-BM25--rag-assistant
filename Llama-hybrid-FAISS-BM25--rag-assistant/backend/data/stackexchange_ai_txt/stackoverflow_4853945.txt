[site]: stackoverflow
[post_id]: 4853945
[parent_id]: 
[tags]: 
updating mvcarray on marker move

I am tryign to figure out MVCArray() in google maps v3. I'm using code written by GeoJason as an example. I attached a click event to the markers to get its LatLng postion. It works well but I need to update the MVCArray on the new postion if a marker is dragged to a new location. This part has me stumped.. Anyone know how to do this or can point me to a good resource which explains using MVCArray's? (besides coode docs, its not designed for newbies.. lol) GeoJason - Line Length and Polygon Area with Google Maps API v3 Demo var map; var markerImageDefault = new google.maps.MarkerImage('images/markers/measure-vertex.png',null, null, new google.maps.Point(5,5)); var markerImageHover = new google.maps.MarkerImage('images/markers/measure-vertex-hover.png',null, null, new google.maps.Point(8,8)); var measure = { ll:new google.maps.MVCArray(), markers:[], line:null, poly:null }; function Init(){ map = new google.maps.Map(document.getElementById('map-canvas'), { zoom: 15, center: new google.maps.LatLng(34.96762, -80.47372), mapTypeId: google.maps.MapTypeId.ROADMAP, /* Make the map cursor a crosshair so the user thinks they should click something */ draggableCursor:'crosshair' }); google.maps.event.addListener(map,'click',function(evt){ measureAdd(evt.latLng); }); } function measureAdd(ll){ var marker = new google.maps.Marker({ map:map, position:ll, draggable:true, /* Let the user know they can drag the markers to change shape */ title:'Drag me to change the polygon\'s shape', icon: markerImageDefault }); var count = measure.ll.push(ll); var llIndex = count-1; if (count>2) /* We've got atleast 3 points, we can measure area */ measureCalc(); /* when dragging stops, and there are more than 2 points in our MVCArray, recalculate length and area measurements */ google.maps.event.addListener(marker,'dragend',function(evt){ if (measure.ll.getLength()>2) measureCalc(); }); /* when the user 'mouseover's a marker change the image so they know something is different (it's draggable) */ google.maps.event.addListener(marker,'mouseover',function(evt){ marker.setIcon(markerImageHover); }); google.maps.event.addListener(marker,'mouseout',function(evt){ marker.setIcon(markerImageDefault); }); // This will allow us to click on the first element to close the polygon google.maps.event.addListener(marker,'click',function(evt){ //alert(ll + " : " + measure.markers[0].position); console.log(ll.LatLng); if(ll == measure.markers[0].position) // Only for the first item { alert("You clicked!"); } }); /* when we drag a marker it resets its respective LatLng value in an MVCArray. Since we're changing a value in an MVCArray, any lines or polygons on the map that reference this MVCArray also change shape ... Perfect! */ google.maps.event.addListener(marker,'drag',function(evt){ measure.ll.setAt(llIndex,evt.latLng); }); measure.markers.push(marker); /* find out of the user placed a marker at the end of the polygon. */ if (measure.ll.getLength()>1){ /* We've got 2 points, we can draw a line now */ if (!measure.line){ measure.line = new google.maps.Polyline({ map:map, clickable:false, strokeColor:'#FF0000', strokeOpacity:0.5, strokeWeight:3, path:measure.ll }); } if (measure.ll.getLength()>2){ /* We've got 3 points, we can draw a polygon now */ if (!measure.poly){ measure.poly = new google.maps.Polygon({ clickable:false, map:map, fillOpacity:0.25, strokeOpacity:0, paths:measure.ll }); } } } } function measureReset(){ /* Remove Polygon */ if (measure.poly) { measure.poly.setMap(null); measure.poly = null; } /* Remove Line */ if (measure.line) { measure.line.setMap(null); measure.line = null; } /* remove all LatLngs from the MVCArray */ while (measure.ll.getLength()>0) measure.ll.pop(); /* remove all markers */ for (i=0;i 0){ /* calculate and inject values in their corresponding "span"s */ //var length = parseFloat(data.rows[0].row.length); var area = parseFloat(data.rows[0].row.area); //$('#measure-area-sqft').text(area.toFixed(0)); $('#measure-area-acres').text((area/43560).toFixed(3)); //$('#measure-length-feet').text(length.toFixed(0)); //$('#measure-length-meters').text((length*0.3048).toFixed(1)); } }); } Home - Back to Demos Line Length and Polygon Area with Google Maps API v3 Length: 0 &nbsp;ft. Length: 0 &nbsp;met. Area: 0 &nbsp;ft.&sup2 Area: 0 &nbsp;ac.
