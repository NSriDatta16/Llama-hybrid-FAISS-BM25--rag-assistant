[site]: crossvalidated
[post_id]: 143091
[parent_id]: 
[tags]: 
GridWalk sampler with pymc3

I am trying to build a GridWalk sampler (actually PolicyWalk as in BIRL by Ramachandran et. al. . Edit More info: The distribution I am interested in is the reward posterior given by, $$ P(R|D) = \frac{1}{Z} P(D|R) P(R)$$ where $R$ is the reward which I want to sample, $D$ is observed data(demonstrations). The likelihood $P(D|R)$ is easily computed via standard RL schemes and so is the prior $P(R)$. PolicyWalk samples $R$ by 'walking over' a grid defined by some fixed step size $\delta$, i.e. the chain is generated on $\mathbb{R}^{|S|} / \delta$. The algorithm is based on GridWalk (see. Vempala ). I understand that I have to make a custom density distribution to represent my reward posterior and then a custom step method. I have made a custom grid walk proposal as follows; class Proposal(object): """ Proposal for MCMC sampling """ def __init__(self, dim): self.dim = dim class GridWalkProposal(Proposal): """ GridWalk MCMC proposal """ def __init__(self, dim, delta, bounded=True): super(GridWalkProposal, self).__init__(dim) self.delta = delta self.bounded = bounded def __call__(self, loc): new_loc = np.array(loc) d = choice([-self.delta, 0, self.delta]) i = randint(self.dim) if self.bounded: if -1 Now am trying to make a custom step method with something like this; class PolicyWalk(object): def __init__(self, reward, demos, proposal_dist=GridWalkProposal): self.reward = reward self.proposal_dist = proposal_dist(S) def step(self, ...): # This is where I am stuck with how to add a likelihood that # is a function of `demos`and the new sample Edit I need help with writing the code for the step method and incorporating the likelihood while doing that.
