[site]: stackoverflow
[post_id]: 1633323
[parent_id]: 1626846
[tags]: 
Here's the code I ended up writing: #include #include #include using namespace std; struct ArrayOfThese { int e; int f; }; struct DataPoint { int a; int b; int c; int numDPars; ArrayOfThese d[0]; DataPoint(int numDPars) : numDPars(numDPars) {} DataPoint* next() { return reinterpret_cast (reinterpret_cast (this) + sizeof(DataPoint) + numDPars * sizeof(ArrayOfThese)); } const DataPoint* next() const { return reinterpret_cast (reinterpret_cast (this) + sizeof(DataPoint) + numDPars * sizeof(ArrayOfThese)); } }; int main() { const size_t BUF_SIZE = 1024*1024*200; char* const buffer = new char[BUF_SIZE]; char* bufPtr = buffer; const int numDataPoints = 1024*1024*2; for (int i = 0; i a = i; bufPtr += sizeof(DataPoint) + numArrayOfTheses * sizeof(ArrayOfThese); } DataPoint* dp = reinterpret_cast (buffer); for (int i = 0; i a == i); dp = dp->next(); } // Here, send it out. delete[] buffer; return 0; }
