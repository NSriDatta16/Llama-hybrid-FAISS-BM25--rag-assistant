[site]: stackoverflow
[post_id]: 5374276
[parent_id]: 5374207
[tags]: 
There's nothing that forces you to have a DAO layer. UI Service DAO persistence The code in your session layer is what normally goes into a DAO layer. I.e. small (almost atomic) operations such as store, delete, etc. The service layer is for isolating business logic that would be awkward in a simple storage layer. For instance, if you want to operate on multiple Person instances at a time, or some very specific business logic before saving the object. Another common use with RDBM is to have transaction management in the service layer, coordinating possibly multiple DAO requests into transactions. In many simple applications the service layer is somewhat pointless. It just proxies operations, like your above, from the UI to the DAO - no logic added. In these cases I would personally not necessarily create the DAO layer, keep the storage in the service, but refactor it out the very minute it grows beyond being just a simple persistence layer. Another aspect is unit testing. A simple DAO layer can easily be mocked away which is an argument for keeping business logic and persistence strictly separate.
