[site]: stackoverflow
[post_id]: 3145912
[parent_id]: 3145867
[tags]: 
Edit: Encrypting sensitive data in a sql database defends against 3 major threats. Internal Threats: Sys admin and developers. SQL Injection: If your database is configured properly sql injection should only provide the attacker with access to the application's database, and nothing else. In mysql make sure you revoke FILE privileged as this could be used to read a hard-coded key or configuration file. Even More Secure Backups: Security in layers. So obviously I can encrypt the passwords with a one way salted hash. Encryption is not the same as hashing. Encryption implies that there is a means of decrypting the data. Using an encryption function for passwords is a vulnerablity recognized by CWE-257 . Passwords must always use a salted hash, and sha-256 is a great algorithm. The salt should be a Cryptographic nonce , as in a very random value that is only used 1 per hash. MySQL's AES_ENCRYPT() sucks, its using ECB mode which is terrible. If the function call doesn't have an IV its probably ECB mode, if the IV is null then its a violation of CWE-329. Plain text: encrypted with ECB mode: Encryption is difficult, you have to worry about Initialization vectors, modes of operations, key storage, and string2key functions. The vast majority of programmers think cryptography is easy, but they manage seriously mess things up . Get a copy of Practical Cryptography, its straight to the point and not math heavy. If you enjoy math then go with "The Handbook" . EDIT: I don't like your nonce generation very much because it has a bad entropy/size ratio. A base16 salt is a waste when you could have base 256 salt. Keep in mind that most (probably all) message digest implementations are binary safe. Also uniqid() uses a lot of time in its calculation, and if it only used time it would be a violation of CWE-337. Now on the other hand mt_rand() kicks ass . Also keep in mind you should probably store this as a base64 and then base64 decode it before use in your hash function. public function nonce($size=32){//256 bit == 32byte. for($x=0;$x
