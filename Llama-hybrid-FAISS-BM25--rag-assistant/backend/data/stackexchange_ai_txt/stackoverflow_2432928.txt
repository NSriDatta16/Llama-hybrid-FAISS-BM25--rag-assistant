[site]: stackoverflow
[post_id]: 2432928
[parent_id]: 2389183
[tags]: 
There are multiple algorithmic methods that may work well, depending upon your situation: Preprocess the artwork and mark points every 20 pixels or so. This is to reduce the number of distance tests you need to perform. If the drag object is outside the bounds, then determine the closest reference point. Determine which of its two neighboring reference points is closest to the drag object. Pick some point between them based upon the ratio of distance (if they are nearly equidistant, it would imply the closest point is almost halfway). Something like this: Point.interpolate(closestRef, nextClosestRef, factor) . The drawbacks of this method would be that it would not be 100% accurate, since areas in between the reference points would be reduced to straight lines (which may influence the placement of reference points). In other words, if your bounding art has lots of complex edges, this method is not good, if on the other hand it has lots of straight lines, it's great. On an abstract level, your problem is called the " nearest-neighbor problem". A google search may turn up some efficient solution. Similar to what shortstick described above, attach a circular hitdetect sprite to the cursor position. However, rather than incrementing the radius by 5px each time, double it each time until it intersects the bounding shape. Then perform a binary search using the last two radius lengths used as the lower and upper bounds. This will give you the distance to the closest point on the bounding shape. To translate that to an actual point is a bit more difficult, but not impossible. You just need a secondary partial circle (not sure exactly how this is called) hitdetect sprite attached. Adjust the arc length in a similar binary search to determine the angle. Now do Point.polar(radius, angle).add(cursorPosition) to get the actual point on the border of the shape. I'm pretty sure that there's a way to do 3, but using rectangles, which have a native implementation in the Flash Platform. I'm not entirely sure though, but it's worth some thought. Just for reference, it's always a good idea to dig through the API first and see if there's already a library that does what you need.
