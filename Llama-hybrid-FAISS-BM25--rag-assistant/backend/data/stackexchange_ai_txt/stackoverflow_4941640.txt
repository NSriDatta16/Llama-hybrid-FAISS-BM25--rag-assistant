[site]: stackoverflow
[post_id]: 4941640
[parent_id]: 
[tags]: 
Help understanding C# optimization

I was playing with C# and wanted to speed up a program. I made changes and was able to do so. However, I need help understanding why the change made it faster. I've attempted to reduce the code to something easier to understand in a question. Score1 and Report1 is the slower way. Score2 and Report2 is the faster way. The first method first stores a string and an int in a struct in parallel. Next, in a serial loop, it loops through an array of those structs and writes their data to a buffer. The second method first writes the data to a string buffer in parallel. Next, in a serial loop, it writes the string data to a buffer. Here are some sample run times: Run 1 Total Average Time = 0.492087 sec Run 2 Total Average Time = 0.273619 sec When I was working with an earlier non-parallel version of this, the times were almost the same. Why the difference with the parallel version? Even if I reduce the loop in Report1 to write a single line of output to the buffer it is still slower (total time about .42 sec). Here is the simplified code: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Diagnostics; using System.Threading.Tasks; using System.IO; namespace OptimizationQuestion { class Program { struct ValidWord { public string word; public int score; } ValidWord[] valid; StringBuilder output; int total; public void Score1(string[] words) { valid = new ValidWord[words.Length]; for (int i = 0; i 0) { outputBuffer.AppendLine(String.Format("{0} {1}", wordInfo.word.ToString(), wordInfo.score)); total += wordInfo.score; } } outputBuffer.AppendLine(string.Format("Total = {0}", total)); } public void Score2(string[] words) { output = new StringBuilder(); total = 0; for (int i = 0; i (program, p => { p.Score1(words); }); for (int k = 0; k (program, p => { p.Score2(words); }); for (int k = 0; k
