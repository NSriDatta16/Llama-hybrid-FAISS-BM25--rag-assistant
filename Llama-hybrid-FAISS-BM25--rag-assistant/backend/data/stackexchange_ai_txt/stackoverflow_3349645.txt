[site]: stackoverflow
[post_id]: 3349645
[parent_id]: 3348535
[tags]: 
You can do the following: class X; class Y; class Foo { public: //! This function validates the input, and returns an error status if //! the Foo can not be created. Otherwise we return a successful status //! and output points to a newly constructed Foo. The Foo constructor //! is only called once the inputs are validated. //! No exceptions are thrown. static Status buildInstance(X const& x, Y const& y, std::auto_ptr & output); private: Foo(X const& x, Y const& y); }; I have used this pattern frequently in the past (because I had to), but that said, I much prefer my constructors to throw exceptions. The above is inelegant at best and quite cumbersome at worst.
