[site]: stackoverflow
[post_id]: 3878025
[parent_id]: 3800347
[tags]: 
So you don't want to save them till the end? You're adding the clone to #frame on drop, at this point give it a class to indicate its a dropped item. I'd put a reference to the intial object in the 'ref' attr, instead of as a class. Droppable $("#frame").droppable({ drop: function(ev, ui) { if (ui.helper.attr('id').search(/drag[0-9]/) != -1) { var pos = $(ui.helper).offset(); counter++; var element = $(ui.helper).clone(); $(this).append(element); element.attr("id", "clonediv" + counter); // Get the dynamic item id draggedNumber = ui.helper.attr('id').search(/drag([0-9])/) itemDragged = "dragged" + RegExp.$1 element.attr('ref', itemDragged); } } }); The click method should be similar to (assuming a single post to save all the dropped items (x,y,width,height,original object id)): OnClick $("#saveDrops").click(function () { var dObjects = []; $.each('#frame .droppedClass', function(i) { dObjects[i] = { x: $(this).offset().left, y: $(this).offset().top, height: $(this).width(), width: $(this).height(), identifier: $(this).attr('ref'); } }); $.post('savemystuff.aspx', dObjects, function(data){ // Do something with the results }); });
