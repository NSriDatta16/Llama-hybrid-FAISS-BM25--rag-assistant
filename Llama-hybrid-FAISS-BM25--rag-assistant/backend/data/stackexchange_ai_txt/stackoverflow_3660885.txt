[site]: stackoverflow
[post_id]: 3660885
[parent_id]: 3660824
[tags]: 
Would your checks be at compile time or at runtime? If you check at runtime, you could use a security manager with permissions. Have a look at Security Manager Tutorial . There is a wide list of permissions. You can disallow file access, even open frames. As for base classes, you would have to be careful with java.lang.Runtime and java.lang.System , java.lang.ProcessBuilder . These create java.lang.Process . Also java.io.File , java.io.FileDescriptor , maybe even Sockets and java.nio.* operate on the OS/file system. I would also disallow reflection, java.lang.reflect.* , and some methods of java.lang.Class are reflective too. Loading classes by name might workaround your checks. Some classes in java.beans.* are using reflection as well. Depending on your needs, you might even want the user code to run in a sandbox . But that might go too far for you. Checking for class usage (constant pool) might be an easy way. As Colin HEBERT pointed out before, native is also dangerous. But some of them are definitely needed, like Object 's methods.
