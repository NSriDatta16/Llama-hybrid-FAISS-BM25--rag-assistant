[site]: stackoverflow
[post_id]: 3072644
[parent_id]: 
[tags]: 
Split Python source into separate directories?

Here are some various Python packages my company "foo.com" uses: com.foo.bar.web com.foo.bar.lib com.foo.zig.web com.foo.zig.lib com.foo.zig.lib.lib1 com.foo.zig.lib.lib2 Here's the traditional way to store the source on disk: pysrc/ com/ foo/ bar/ web/ lib/ zig/ web/ lib/ lib1/ lib2/ PYTHONPATH=pysrc But for organizational purposes (different teams, different revision control, etc.), we want to store these as follows: bar/ pysrc/ com/ foo/ bar/ web/ lib/ zig/ pysrc/ com/ foo/ zig/ web/ lib/ lib1/ lib2/ PYTHONPATH=bar/pysrc:zig/pysrc The question is: Are there any issues with this second method of organization? For example, if we import com.foo , where would Python look for the __init__.py ? Would symlinking these directories make sense? e.g.: pysrc/ com/ foo/ bar/ -> symlink to /bar/pysrc/com/foo/ zig/ -> symlink to /zig/pysrc/com/foo/ Any general code organizational suggestions are welcome.
