[site]: stackoverflow
[post_id]: 1771336
[parent_id]: 
[tags]: 
Big Table Advice (SQL Server)

I'm experiencing massive slowness when accessing one of my tables and I need some re-factoring advice. Sorry if this is not the correct area for this sort of thing. I'm working on a project that aims to report on server performance statistics for our internal servers. I'm processing windows performance logs every night (12 servers, 10 performance counters and logging every 15 seconds). I'm storing the data in a table as follows: CREATE TABLE [dbo].[log]( [id] [int] IDENTITY(1,1) NOT NULL, [logfile_id] [int] NOT NULL, [test_id] [int] NOT NULL, [timestamp] [datetime] NOT NULL, [value] [float] NOT NULL, CONSTRAINT [PK_log] PRIMARY KEY CLUSTERED ( [id] ASC )WITH FILLFACTOR = 90 ON [PRIMARY] ) ON [PRIMARY] There's currently 16,529,131 rows and it will keep on growing. I access the data to produce reports and create graphs from coldfusion like so: SET NOCOUNT ON CREATE TABLE ##RowNumber ( RowNumber int IDENTITY (1, 1), log_id char(9) ) INSERT ##RowNumber (log_id) SELECT l.id FROM log l, logfile lf WHERE lf.server_id = #arguments.server_id# and l.test_id = #arguments.test_id#" and l.timestamp >= #arguments.report_from# and l.timestamp (for not CF devs #value# inserts value and ## maps to # ) I basically create a temporary table so that I can use the rownumber to select every x rows. In this way I'm only selecting the amount of rows I can display. this helps but it's still very slow. SQL Server Management Studio tells me my index's are as follows (I have pretty much no knowledge about using index's properly): IX_logfile_id (Non-Unique, Non-Clustered) IX_test_id (Non-Unique, Non-Clustered) IX_timestamp (Non-Unique, Non-Clustered) PK_log (Clustered) I would be very grateful to anyone who could give some advice that could help me speed things up a bit. I don't mind re-organising things and I have complete control of the project (perhaps not over the server hardware though). Cheers (sorry for the long post)
