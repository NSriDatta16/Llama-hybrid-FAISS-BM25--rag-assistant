[site]: stackoverflow
[post_id]: 363861
[parent_id]: 363596
[tags]: 
You have a number of options. Which one is best depends on details that aren't clear from your question. test modify just as if it were an unrelated method. Advantage: it might at some point become one. just test that you got the if-statement right. That is, just test enough that the tests force you to write the implementation you need (where calling replaceit and changeit is just the simplest implementation that could possibly work . If your are practicing TDD, this should come naturally to you. Advantage: high test coverage without much duplicated effort. Subclass and Override Method (this is a dependency breaking technique from the book "Working Effectively With Legacy Code"): Test the method on a subclass that you introduce solely for testing purposes, which overrides replaceit and changeit with canned answers or so that they set sensing variables (variables that indicate whether the method has been called with the right value(s)). Advantage: might possibly simplify your tests (or not), sometimes even just make testing possible. Extract a new class for the replaceit and changeit methods, including an interface for that class. Stub or Mock that interface when testing modify . Advantage: might both make your design more testable and better decoupled/reusable in general (or not).
