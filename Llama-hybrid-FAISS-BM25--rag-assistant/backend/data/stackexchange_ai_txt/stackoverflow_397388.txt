[site]: stackoverflow
[post_id]: 397388
[parent_id]: 397253
[tags]: 
Looking at this from strictly memory centric point of view, what are the pro’s and con’s of using a System.IO.MemoryStream versus a System.String as my in memory representation. Some factors I am trying to research are: How these objects act in a [hypothetical] highly fragmented low memory environment IMO, a MemoryStream is only useful when the encoding is trivial (e.g. ASCII, ISO-8859-X, etc.). If the encoding is UTF-8 and you have non-ASCII characters then processing will become more difficult. Sure, the MemoryStream will almost certainly consume less memory, but otherwise there's not much of a difference. Under the hood, a MemoryStream uses a byte array, which also needs to be allocated in the contiguous chunck of memory. Actual size in memory (if stream is UTF8, have we nearly halved size) Right, with purely ASCII chars, a MemoryStream will consume half of what the equivalent string consumes. Is there another object I have not thought about? List // has a nicer interface for processing How are the strings stored in the database? varchar or nvarchar? Regards, Andreas
