[site]: datascience
[post_id]: 47449
[parent_id]: 
[tags]: 
RL: Collecting States (training data) in real-life. Must use fixed timestep?

I am using a Reinforcement Learning agent to play a 3D game, but have trouble with collecting the "current and next state" pairs. To decide what action to perform, the network must perform a forward pass. It performs forward pass in time $t$ , but in the meantime the actual environment might have evolved significantly. In computer games this means something like 10 frames or more have already passed (a varying amount). The situation is worsened if I run, say 100 games at once on the same computer. I don't have the ability to stop the game at each frame to do forwardprop. Anyway it wouldn't be possible were I to train, say a real-life robot to walk. Question: Should I stick to a 'fixed timestep' approach, only asking to provide an action every 0.1 seconds? While it computes next action, I could pretend the network keeps outputting the most recent action for all the skipped frames. Good idea? If that's the only option, then should I avoid at all costs situations where forward prop takes more than the 'fixed timestep'? (more than 0.1 sec in my case) So it's better to choose say, 0.2 seconds just to be safe. Seems quite unreliable - is there a better way to do it? Is there a paper that explores the alternatives? (I guess such a paper will be about real-life robot training)
