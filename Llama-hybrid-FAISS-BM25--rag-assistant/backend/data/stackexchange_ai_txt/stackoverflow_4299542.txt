[site]: stackoverflow
[post_id]: 4299542
[parent_id]: 4298206
[tags]: 
I can't really post any sample code as I am working from my iPhone right now, but I do have a suggestion (don't know if it's good or bad) ... For each line, determine each vertex's position (percentage) along the line. After getting those values, per line, compute new vertices along each line using all of the OTHER lines' percentage values. At this point, each line should contain the same number of vertices and the Nth vertex of each line corresponds directly with the Nth vertex of every other line. Now just average vertex 0 for every line to get vertex 0 of the "averaged" line. Repeat for vertex1 of each line, etc. This should work for lines as well as polygons. Note that you could also employ a weighted averaging algorithm if you could determine an accuracy value for each line. In the past I have used this approach when trying to average two lines. We had the ability to allow each line to be weighted, typically 50:50, but could go all the way to 100:0 or 0:100, depending on the accuracy if the sources. I went back and reread your question and saw that you already talked about interpolation. The way you talked about doing it seems like it could smooth or generalize the lines before computing the averages of the interpolated points (the fixed interval points). With my approach you would be densifying each line first and then computing the averages. It seems like that might be more accurate, but maybe not.
