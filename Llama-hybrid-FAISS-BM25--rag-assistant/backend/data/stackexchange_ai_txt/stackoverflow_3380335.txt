[site]: stackoverflow
[post_id]: 3380335
[parent_id]: 3380233
[tags]: 
unfortunately, I didn't find a nice way to do this with just a single macro. IMO, the easiest solution is to put default methods into macro. Like this: #include #define DEFAULT_CLASS_METHODS(C) public: \ virtual ~C(){}; \ protected: \ C(){}; \ private: \ inline C(const C& rhs){}; \ inline void operator=(const C& other){}; class Output{ DEFAULT_CLASS_METHODS(Output) public: virtual void write(const std::vector &data) = 0; }; This way you'll need only one macro per class definition in *.h file. You will need additional macro to actually declare copy constructor and assignment operator in some *.cpp file or you could make default copy constructor and assignment operators inline, which will wrap everything into single macro. The only problem is that you'll need to type class name twice. There is a less elegant way to do that without typing class name twice: #include #define BEGIN_INTERFACE(C) class C{ \ public: \ virtual ~C(){}; \ protected: \ C(){}; \ private: \ inline C(const C& rhs){}; \ inline void operator=(const C& other){}; BEGIN_INTERFACE(Output) public: virtual void write(const std::vector &data) = 0; }; As you can see, in this case macro eats opening { bracket, which will be very misleading.
