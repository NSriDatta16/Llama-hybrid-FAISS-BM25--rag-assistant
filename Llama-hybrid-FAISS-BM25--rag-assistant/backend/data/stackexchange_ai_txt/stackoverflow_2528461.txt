[site]: stackoverflow
[post_id]: 2528461
[parent_id]: 2527439
[tags]: 
Well, I can suggest a somewhat hackish way to do it. First, note that you can put UI elements into a FlowDocument . So that makes something like this possible: This is your label: And this is the editable text. The problem now becomes keeping the user from editing the InlineUIContainer . That's really two problems. The first problem is keeping the user from selecting it. To do that, you have to handle the SelectionChanged event. In the event, find the first InlineUIContainer in the RTB's document, and if Selection.Start is before that, change it. private void RichTextBox_SelectionChanged(object sender, RoutedEventArgs e) { RichTextBox rtb = (RichTextBox) sender; if (rtb == null) return; InlineUIContainer c = rtb.Document .Blocks .Where(x => x is Paragraph) .Cast () .SelectMany(x => x.Inlines) .Where(x => x is InlineUIContainer) .Cast () .FirstOrDefault(); if (c == null) return; if (rtb.Selection.Start.CompareTo(c.ElementEnd) There's probably an easier way to formulate that LINQ query, but I kind of like it. And this isn't 100% perfect; if you select inside the text and drag left over the TextBlock , it will lose the selection. I'm sure that can be fixed. But it works pretty well. It even handles the case where the user navigates around with arrow keys. Just this much gets you almost all the way there. The other thing that can mess you up, though, is if the user positions the cursor at the very beginning of the text and presses BACKSPACE. Handling that requires something similar: compare the caret position with the end of the first InlineUIElement , and cancel the BACKSPACE (by marking the event as handled) if the caret's at that position: private void RichTextBox_PreviewKeyDown(object sender, KeyEventArgs e) { if (e.Key != Key.Back) { return; } RichTextBox rtb = (RichTextBox)sender; if (rtb == null) return; InlineUIContainer c = rtb.Document .Blocks .Where(x => x is Paragraph) .Cast () .SelectMany(x => x.Inlines) .Where(x => x is InlineUIContainer) .Cast () .FirstOrDefault(); if (c == null) return; if (rtb.CaretPosition.CompareTo(c.ElementEnd.GetInsertionPosition(LogicalDirection.Forward))
