[site]: stackoverflow
[post_id]: 1526790
[parent_id]: 1526617
[tags]: 
I wouldn't use PaddedForm for this. In fact, I'm not sure that PaddedForm is good for much of anything. Instead, I'd use good old ToString , Characters and PadLeft , like so: toFixedWidth[n_Integer, width_Integer] := StringJoin[PadLeft[Characters[ToString[n]], width, "0"]] Then you can use StringForm and ToString to make your file name: toNumberedFileName[n_Integer] := ToString@StringForm["filename_``", toFixedWidth[n, 5]] Mathematica is not well-suited to this kind of string munging. EDIT to add: Mathematica proper doesn't have the required functionality, but the java.lang.String class has the static method format() which takes printf -style arguments. You can call out to it using Mathematica's JLink functionality pretty easily. The performance won't be very good, but for many use cases you just won't care that much: Needs["JLink`"]; LoadJavaClass["java.lang.String"]; LoadJavaClass["java.util.Locale"]; sprintf[fmt_, args___] := String`format[Locale`ENGLISH,fmt, MakeJavaObject /@ Replace[{args}, {x_?NumericQ :> N@x, x : (_Real | _Integer | True | False | _String | _?JavaObjectQ) :> x, x_ :> MakeJavaExpr[x]}, {1}]] You need to do a little more work, because JLink is a bit dumb about Java functions with a variable number of arguments. The format() method takes a format string and an array of Java Object s, and Mathematica won't do the conversion automatically, which is what the MakeJavaObject is there for.
