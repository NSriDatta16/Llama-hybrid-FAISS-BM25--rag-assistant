[site]: stackoverflow
[post_id]: 2787459
[parent_id]: 2787316
[tags]: 
It's easiest to extract from the two different locations as two separate matching steps. It's also by far easiest if you split the whole text up into paragraphs first. Employee Id--> Employee16 (I need 16) I'd extract a single one like this: regexp -line {^Employee(\d+),} $paragraph -> employeeNumber (You want line matching mode for this task, rather than the default "whole string" matching mode.) Employee links--> Employee links:2 (I need 2) For this one, again already assuming that we're only looking at the overall record for a single employee: regexp -line {^\s+Employee links:\s*(\d+)(.*)$} $paragraph -> links rest In this case, I've extracted not just the $links but also the $rest of the line, since it seems that you might need to be able to think about whether that matters. Of course, it might be that the following is even more useful: regexp -line {^\s+Employee links:\s*(\d+)(?:\s+active,\s+(\d+)\s+inactive)?} \ $paragraph -> activeLinks inactiveLinks In this case, the $inactiveLinks will have an empty string if only the first number was present (which seems to happen when the employee is inactive; you'll need to do a trivial bit of logic to tidy up in that case). Finally, when using regexp , don't forget to check the result to see if it matched! Hope this helps.
