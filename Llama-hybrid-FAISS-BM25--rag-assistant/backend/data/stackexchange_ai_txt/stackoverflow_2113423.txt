[site]: stackoverflow
[post_id]: 2113423
[parent_id]: 2111128
[tags]: 
I'm wondering where the code begins executing (like why does an NSView subclass execute and draw without me explicitly calling it?) and if I'm not supposed to stick my main loop in int main() where does it go? In an xcode project you have a main.m file that contains the 'int main' function. You won't actually find the code that calls the NSView draw explicitly, this code is hidden deep within an iPhone or Mac OS X framework. Just know that there is an event loop hidden deep within your 'int main' that checks for changes so that it knows when to update your view. You don't need to know where this event loop is, it's not useful information since you can override methods or create and assign delegates that can do things when this happens. To get a better answer, you'll need to explain what you mean by a 'main loop' that you wanted to put inside the 'int main' function. It's just weird to me coming off a little experience in C++. It looks unnatural that the main function would be so empty. You can encapsulate a billion lines of code into one function and put it into 'int main'. Don't be deceived by a main only having a few lines, that is done on purpose. Good programming teaches us to keep code in specific containers so that it is well organized. Apple chose to make the "real" launch point of their iPhone apps in this single line of code inside the main.m file: int retVal = UIApplicationMain(argc, argv, nil, @"SillyAppDelegate"); From that one piece of code, an app's delegate is launched and won't return control to the main function until it is done.
