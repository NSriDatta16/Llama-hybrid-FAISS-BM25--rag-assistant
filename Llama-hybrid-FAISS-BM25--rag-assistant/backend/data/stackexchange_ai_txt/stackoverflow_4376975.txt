[site]: stackoverflow
[post_id]: 4376975
[parent_id]: 4366276
[tags]: 
You lost me here... I see you use a Container of some sort, so why don't you just inject a singleton instance of that settings class every time you need reference to it? Static class + methods is bad for unit testing (which you will need for this). Also, I don't get why you want to use Reflections/string matching for setting storage/retrieval. If you truly have significant amount of settings with complex grouping between them, you will need to invest the time to come up with a proper DAL. Just a note, your "key" (eg. FirmSettings_ShowDocumentTaxStatement_Title) doesn't contain namespace, so if two classes have the same name and same method, you will end up with a bug that will be hard to catch. That's just a simple scenario. My point is, string matching your class + method name for the purpose of identification isn't a good idea. (Because I am assuming you have a big complicated project to resort to this kind of settings management.) Lastly, "I don't know how else would you assign a value to static (or regular) properties at runtime other than with the use of reflection." You can use class/method/property attributes and have a factory class pump out (in your case) singleton of your desired settings class. The appropriate DB column/row association information can be contained in the attributes. P.S. Reflection is fine in terms of performance. Just don't use static class, use singleton instead, and do a background task on initialization of the settings classes. Once the singleton are initiated, you won't have to initialize it again. But whatever you do, I strongly advise you to lose the string matching with class/method names. P.P.S. Look into AoP / policy injection (or was it intervention in Microsoft Unity DI container). I believe those maybe of help to you? P.P.P.S. Lastly into 3 post script is bad English...
