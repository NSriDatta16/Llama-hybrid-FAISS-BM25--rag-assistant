[site]: stackoverflow
[post_id]: 4914679
[parent_id]: 4909721
[tags]: 
To your 1st question: I also want to point out that ReminderTypes is a enum. I am wondering so it seems I can't do src.ReminderTypes. I am wondering how can I do that as well? CreateMap () .ForMember(d => d.Text, o => o.MapFrom(x => x)) .ForMember(d => d.Value, o => o.MapFrom(x => (int) x)); Then you have to loop through each ReminderType and set the value for SelectListItem . I do this within a wrapper ("MappingService") around AutoMapper. Here is a part of it: public object Map(object source, Type sourceType, Type destinationType) { if (source is IEnumerable) { IEnumerable input = ((IEnumerable)source).OfType (); Array a = Array.CreateInstance(destinationType.GetElementType(), input.Count()); int index = 0; foreach (object data in input) { a.SetValue(AutoMap(data, data.GetType(), destinationType.GetElementType()), index); index++; } return a; } return AutoMap(source, sourceType, destinationType); } AutoMap is a public static delegate to the real implementation Mapper.Map . Keep attention that this code does only work with arrays! In your controller you now could write: public ActionResult Reminders() { ReminderService reminderService = new ReminderService(); ReminderType[] reminderTypes = reminderService.GetReminderTypes(); SelectListItem[] selectListItems = _mappingService.Map(reminderTypes, reminderTypes.GetType(), typeof(SelectListItem[])) as SelectListItem[]; RemindersViewModel remindersViewModel = new RemindersViewModel { Reminder = selectListItems, SelectedReminder = ReminderType.CReminder }; return View(remindersViewModel); } View: x.SelectedReminder, new SelectList(Model.Reminder, "Value", "Text")) %> 2nd question: Is it possible to somehow use automapper to say take this "map" and map it 5 times to my viewModel? As far as I know this is not possible. But let me know if there is a way of doing this.
