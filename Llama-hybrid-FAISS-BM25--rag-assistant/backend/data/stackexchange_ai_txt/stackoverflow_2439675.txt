[site]: stackoverflow
[post_id]: 2439675
[parent_id]: 66165
[tags]: 
To the comment that it didn't start until 2005... I suppose it depends on if you count Parrot as Perl6. The original team did, but we didn't get buy in from the "Perl6 Language" folks for years. We were doing real work on Parrot in 2000-2004 and much of the VM groundwork was there. By 2002 we had continuations, co-routines, a JIT, an intermediate compiler and a dozen languages besides Perl6, including a BASIC interpreter written in Parrot's PIR. By then we could compile and run pretty much any sort of language in the world, short of highly concurrent languages, and our capability far exceeded the needs of Perl6 for an implementation platform. The VM itself has been capable for years. Perl6 as a language is a different story since it is a very complex beast to parse. That has no reflection on Parrot. It is simply a reflection on the culture of Perl and it is why the rise of other scripting languages has accelerated and Perl5 is in decline and people who once chose Perl5 for new systems implementation moved to Ruby, Python and Groovy, and languages like Java and C# evolved frameworks that make a heavy use of reflection for runtime dispatching. As much as I love Perl, if a language is so difficult to implement that a production quality compiler cannot be written in less than a decade, something is wrong! C++ is easier to parse and was implemented in a fraction of the time of Per6. That should tell us something. Derek Jones writes in his blog "The Shape of Code" that C++ may have gotten "Too Big to Fail" ( http://shape-of-code.coding-guidelines.com/2008/12/c-goes-for-too-big-to-fail/ ). C++ can afford to do that since it got successful first before it got big. Perl6 may be "Too Big to ever Succeed" because the scope was so grandiose that the project has trouble retaining contributors due to the fact that the attention span of the typical contributor is probably 2-3 years, not 10.
