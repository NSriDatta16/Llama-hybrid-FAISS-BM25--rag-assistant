[site]: stackoverflow
[post_id]: 3251073
[parent_id]: 3250974
[tags]: 
Adding to eruciforms answer . First remark, you don't need to generate the indices for the all_list list. You can just iterate over it directly: for list in all_lists: for item in list: # magic stuff Second remark, you can make your string splitting much more succinct by splicing the list: values = item.split()[-2:] # select last two numbers. Reducing it further using map or a list comprehension; you can make all the items a float on the fly: # make a list from the two end elements of the splitted list. values = [float(n) for n in item.split()[-2:]] And tuplify the resulting list with the tuple built-in: values = tuple([float(n) for n in item.split()[-2:]]) In the end you can collapse it all to one big list comprehension as sdolan shows . Of course you can manually index into the results as well and create a tuple, but usually it's more verbose, and harder to change. Took some liberties with your variable names, values would tmp_list in your example.
