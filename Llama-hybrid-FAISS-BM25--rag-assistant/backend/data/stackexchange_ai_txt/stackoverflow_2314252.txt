[site]: stackoverflow
[post_id]: 2314252
[parent_id]: 2314148
[tags]: 
Hibernate, the most popular ORM tool in the Java ecosystem, usually allows you to do this: class House { String color; Double price; Integer squareFeet; RealEstateAgent realEstateAgent; } This translates to a DB-table that looks like this: house(id, color, price, squareFeet, real_estate_agent_id) If you need to print the name of the agent you just walk traverse the object graph: house.getRealEstatAgent().getName() Through lazy loading, this is done quite efficiently. I wouldn't worry about the fact that an extra query trip to the database may have to be done until your stress tests prove this to be a problem. Edit after your edit: All the solutions out there have dealt with the paradigm mismatch (between the OO and Relational worlds) in a similar fashion. The designs have been made, the problem is solved. And yes, it remains a pain in the butt to deal with as an application developer but I suppose it is just the way it is as long as we want to use relational databases and object oriented persistence together.
