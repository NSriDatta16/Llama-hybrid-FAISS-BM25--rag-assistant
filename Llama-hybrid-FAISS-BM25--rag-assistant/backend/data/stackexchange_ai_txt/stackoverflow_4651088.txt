[site]: stackoverflow
[post_id]: 4651088
[parent_id]: 4578185
[tags]: 
You are correct that javascript is client side. However, it does have abilities to communicate with a server. I'm unable to access the source referenced in this question (it's showing up as a blank screen), I'm forced to work with the answers above and my own knowledge of javascript. First, Google ads are not hosted only on Google domain sites. That removes ANY possibility of using AJAX without a PHP proxy located within the domain being used. As I never remembered using such a proxy when I set up Adsense, I can safely assume that the cross domain limitations (you can read about the same source origin policy here ) will apply (i.e. a javascript file from somedomain.com cannot communication to anotherdomain.com, unless using a workaround), and the .js file does not contain any references to XMLHttpRequest . However, there are ways to work around this, not just using the PHP proxy that I noted above. Cross domain workarounds: Using a tracking pixel. I noticed that someone above said a image tag was seen in the source. What the code does is generate a link to an image file (say www.googleAdTracker.com/trackingPixel.gif?userid=XXX&site=yourSite ) and the parameters within the URL will be used to identify the user, the site, and all the other parameters Google Adsense needs to work. Alternatively, it can capture the user's IP address (as this is submitted with any transaction within HTTP (that I can remember)), as well as set cookies that enable Adsense to not just track the website, but the users. In Firefox, to go Tools->Options->Privacy->remove individual cookies, and you can view, search, and possible edit (if you install a certain plugin, I believe) the individual cookies. That's how Google has become a target of privacy groups, their ads and their cookies are spread all over the net, and they can track everything I'm doing, the general type of sites I go to, what I'm interested in. This is not just so Google can handle over info to the U.S. government (yes, it does do that, just search it up on any credible news site) when asked, but also to see what I'm interested in, and thus serve up applicable ads to me. A second workaround is via the setting of an iframe. You create a new iframe object frame=document.createElement("iframe") , and then set the src value of the iframe to a URL, and that will enable them to send a one way communication to the server (well, the server can reply, but it'll be in the iframe, which will not be accessible from the Javascript code in the page). Like above, the parameters in the request URL, and the cookies/content of the iframe will enable tracking of users and sites. Last week, I found this interesting site that claims to have found a way using jQuery to work around the cross domain restrictions, you can read about it here , but I'm certain Google Adsense does not use it I've also heard of workarounds using adobe Flash, but the problem is that not all users have flash installed Back to your question regarding the requests. Simplest way I can think of (without decompiling pages of javascript code) is to install Live HTTP Headers into Firefox (if you don't have Firefox, install it). I suggest Firebug as well, not just for this project, as it is very useful. After you install Live HTTP Headers, and restarted Firefox, go to Tools->Live HTTP Headers, and then go to the site in question, the one with the ads. Then, you can go to the LHH window, and you can see exactly what requests are being made, and all the behind-the-scene communications your browser makes, and all the parameters being passed to the Google Adsense servers. (Like I said above, I haven't seen the source of the .js file in question, so most of what I said above is from experience and intuitive guessing). Now, you've also mentioned above using PHP. Well, when Javascript communications with PHP, say load up a page: yoursite.com/test.php?foo=bar&testing=123 , the PHP file receives the arguments in a variable, stored in an array in $_REQUEST (and other variables hold the same info, but that's not my point). For example, the test.php file in the example link above has the $_REQUEST array containing two interesting keys and values. $_REQUEST['foo'] is set to bar and $_REQUEST['testing'] is set to 123 . So, the receiving PHP file can use this, and if the user_id, or google_ad_client was in the URL, it would be in that array, and the PHP file can process the request. It can also access the cookies (cookies data is sent with the request), and also track you down that way. Moreover, the client's IP address is stored in the PHP variable $_SERVER['REMOTE_ADDR'] . All this info is probably used in processing and logged in a database (probably MySQL or something similar), and stored on Google servers. Using this knowledge, you can fake the adsense requests, as in sending the request that you got from Live HTTP Headers via a proxy to the destination (be careful, as cookies data is hard to replicate and still seem authentic, and also the fact that a timestamp may be included within the request, sometimes in encrypted form). It's definitely against the Terms of Service, but I'm only giving you knowledge, it's your choice on what you want to use it on. On another slightly related subject, to send requests manually, you can send GET requests manually on your browser, and use javascript or PHP to send POST requests. If you're using PHP, look into cURL. Below is an example of sending a POST requests to a site (in this case, it's my old code to log in to a Facebook account using an email and password, can be adapted to basically any request to any site: $postData = "charset_test=%E2%82%AC%2C%C2%B4%2C%E2%82%AC%2C%C2%B4%2C%E6%B0%B4%2C%D0%94%2C%D0%84&lsd=" . $lsd . "&locale=en_US&email=" . $login[$i][0] . "&pass=" . $login[$i][5] . "&persistent=1&default_persistent=1&charset_test=%E2%82%AC%2C%C2%B4%2C%E2%82%AC%2C%C2%B4%2C%E6%B0%B4%2C%D0%94%2C%D0%84&lsd=" . $lsd; $postDataLength = "Content-Length: " . strlen($postData); $login = curl_init("https://login.facebook.com/login.php?login_attempt=1"); curl_setopt($login, CURLOPT_RETURNTRANSFER, TRUE); curl_setopt($login, CURLOPT_FOLLOWLOCATION, TRUE); curl_setopt($login, CURLOPT_COOKIEFILE, "FBcookies.txt"); curl_setopt($login, CURLOPT_COOKIEJAR, "FBcookies.txt"); curl_setopt($login, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13"); curl_setopt($login, CURLOPT_ENCODING, "gzip,deflate"); curl_setopt($login, CURLOPT_REFERER, "http://www.facebook.com/"); curl_setopt($login, CURLOPT_POSTFIELDS, $postData); curl_setopt($login, CURLOPT_HTTPHEADER, array('Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Language: en-us,en;q=0.5', 'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Content-Type: application/x-www-form-urlencoded', $postDataLength )); $response = curl_exec($login); curl_close($login); Read more about CURL here . Link to contact me if you want to notify me if anything above is unclear and I need to elaborate more. As a final note, here's my Disclaimer: "I have NEVER tried to send fake adsense headers, and I'm not encouraging you to do so. I am also not responsible for any physical injury, death, or maiming that may happen to you, your possessions, your computer, your Google account, your general well being, or your happiness that occurs from the use of the above knowledge." I think I've safely covered my own behind with that statement. Any more questions, just let me know using that contact link above.
