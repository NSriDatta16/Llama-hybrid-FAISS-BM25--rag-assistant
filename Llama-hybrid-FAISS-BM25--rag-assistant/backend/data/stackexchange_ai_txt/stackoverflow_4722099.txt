[site]: stackoverflow
[post_id]: 4722099
[parent_id]: 4722016
[tags]: 
It is not a unit test for purists (rather an integration test ), but still it may be a perfectly fine test :-) And technically you can run it with JUnit (or whichever your favourite unit testing framework is), so IMHO the difference is only in terminology. If you write your code from scratch, it is best indeed to start by writing unit tests for individual methods in isolation (mocking out dependencies), then at the next stage maybe add higher level integration tests such as the one you describe, to verify that your classes work together well. However, in legacy projects (i.e. lots of inherited code without tests), it is often not feasible to start with fine grained low-level unit tests; instead it is more efficient to write higher-level, more complex tests which clarify and "lock" the behaviour of a larger component. Unfortunately the majority of projects in this industry by far is legacy :-( For me, in these cases, pragmatism wins over purity of approach hands down :-)
