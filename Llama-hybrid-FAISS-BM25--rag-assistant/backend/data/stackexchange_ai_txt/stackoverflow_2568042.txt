[site]: stackoverflow
[post_id]: 2568042
[parent_id]: 2567784
[tags]: 
Can't fit this into a comment on Neil's answer, so I'm gonna have to go into more detail here. Regarding your expand() function. It looks like this function's job is to expand the internal storage, which has comp elements, by n elements, while maintaining the size of the Vector. So let's walk through what you have. void Vector::expand(int n) { int * newdata = new int [comp * 2]; Okay, you just created a new array that is twice as big as the old one. Error: Why doesn't the new size have anything to do with n ? if (*data != NULL) { Error: *data is the first int element in your array. It's not a pointer. Why is it being compared to NULL ? Concept Error: Even if you said if (data != NULL) , which could be a test to see if there is an array at all, at what point in time is data ever set to NULL ? new [] doesn't return NULL if it's out of memory; it throws an exception. for (int i = 0; i Warning: You're copying the whole array, but only the first size elements are valid. The loop could just run up to size and you'd be fine. newdata -= comp; Error: Bad pointer math. newdata is set to a pointer to who knows where ( comp int s back from the start of newdata ?!), and almost certainly a pointer that will corrupt memory if given to delete [] . comp += n; This is fine, for what it is. data = newdata; delete newdata; } Error: You stored a pointer and then immediately deleted its memory, making it an invalid pointer. else if ( *data == NULL || comp == 0) { data = new int [DEFAULT_VECTOR_SIZE]; comp = DEFAULT_VECTOR_SIZE; size = 0; } } Error: This should be in your constructor, not here. Again, nothing ever sets data to NULL , and *data is an int , not a pointer. What this function should do: create a new array of comp + n elements copy size elements from the old array to the new one delete the old array set data to point to the new array Good luck.
