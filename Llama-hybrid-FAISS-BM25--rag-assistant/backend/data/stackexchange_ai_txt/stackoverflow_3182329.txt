[site]: stackoverflow
[post_id]: 3182329
[parent_id]: 3172574
[tags]: 
After my previous answer, I realized that if you wanted to get really fancy you could use a really simple but powerful idea: Markov Chains. The intuitive idea behind using a Markov Chain goes something like this: Create a graph G=(V,E) Let each vertex in V represent an entity Let each edge in E represent a transitioning probability between entities. This means that the sum of the out degrees of each vertex must be 1. At the start (time t=0) assign each entity a unit value of 1 At each time step, transition form entity i, j by the transition probability defined in 3. Let t->infinity then the value of each entity at t=infinity is the equilibrium (that is the chance of a transition into an entity is the same as the total chance of a transition out of an entity.) This idea has for example been used successfully to implement Google's page rank algorithm. To describe how you can use it consider the following: V = players E = probability of transitioning form player to player based on relative win/loss ratios Each player is a vertex. An edge from player A to B (B is not equal to A) has probability X/N where N is the total number of games played by A and X is the total games lost to B. Add an edge from A to A with probability M/N where M is the total number of games won by A. Assign a skill level of 1 to each player at the start. Use the Power Method to find the dominant eigenvector of the link matrix constructed from the probabilities defined in 3. The dominant eigenvector is the amount of skill each player has at t=infinity, that is the amount of skill each player has once the markov chain has come to equilibrium. This is a very robust measure of each players skill using the topology of the win/loss space. Some caveats: there are several problems when applying this directly, the biggest problem will be seperated webs (that is your markov chain will not be irreducible and so the power method will not be guaranteed to converge.) Lucky for you, google has dealt with all these problems and more when implementing their page rank algorithm and all that remains for you is to look up how they circumvent these problems if you are so inclined.
