[site]: stackoverflow
[post_id]: 1355145
[parent_id]: 1355101
[tags]: 
Hmm... I usually consider these sort of "external" refactorings separate from the TDD cycle itself. After finishing up feature XYZ using TDD, one ought to have a healthy set of tests to prevent from introducing bugs via refactoring (assuming code coverage is optimal, etc.). Performance bottlenecks and hard-to-understand code usually crop up after the fact anyway, so doing refactoring at that point would be ideal, I think. You can improve performance, make the code easier to understand, and do whatever else that needs doing while using the tests to make sure that you're not introducing bugs into the system. So to answer your question, I do not believe that external refactoring fits into the TDD pattern, although the identifiers (code smells if you will) are definitely items to keep track of as you are developing the code.
