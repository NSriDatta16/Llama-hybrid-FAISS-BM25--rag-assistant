[site]: stackoverflow
[post_id]: 3040414
[parent_id]: 3034730
[tags]: 
All you need - is to check one aspect of the SUT (System Under Test) in separate test. [TestFixture] public class XmlParserTest { [Test, ExpectedException(typeof(XmlException))] public void FailIfXmlIsNotWellFormed() { Parse(" "); } [Test] public void ParseShortTag() { var doc = Parse(" "); Assert.That(doc.DocumentElement.Name, Is.EqualTo("doc")); } [Test] public void ParseFullTag() { var doc = Parse(" "); Assert.That(doc.DocumentElement.Name, Is.EqualTo("doc")); } [Test] public void ParseInnerText() { var doc = Parse(" Text 1 "); Assert.That(doc.DocumentElement.InnerText, Is.EqualTo("Text 1")); } [Test] public void AttributesAreEmptyifThereAreNoAttributes() { var doc = Parse(" "); Assert.That(doc.DocumentElement.Attributes, Has.Count(0)); } [Test] public void ParseAttribute() { var doc = Parse(" "); Assert.That(doc.DocumentElement.Attributes[0].Name, Is.EqualTo("attribute11")); Assert.That(doc.DocumentElement.Attributes[0].Value, Is.EqualTo("attribute 11 value")); } [Test] public void ChildNodesInnerTextAtFirstLevel() { var doc = Parse(@" Text 1 Text 2 "); Assert.That(doc.DocumentElement.ChildNodes, Has.Count(2)); Assert.That(doc.DocumentElement.ChildNodes[0].InnerText, Is.EqualTo("Text 1")); Assert.That(doc.DocumentElement.ChildNodes[1].InnerText, Is.EqualTo("Text 2")); } // More tests ..... private XmlDocument Parse(string xml) { var doc = new XmlDocument(); doc.LoadXml(xml); return doc; } } Such approach gives lots of advantages: Easy defect location - if something wrong with attribute parsing, then only tests on attributes will fail. Small tests are always easier to understand UPD: See what Gerard Meszaros (Author of xUnit Test Patterns book) says about topic: xunitpatterns One possibly contentious aspect of Verify One Condition per Test is what we mean by "one condition". Some test drivers insist on one assertion per test. This insistence may be based on using a Testcase Class per Fixture organization of the Test Methods and naming each test based on what the one assertion is verifying(E.g. AwaitingApprovalFlight.validApproverRequestShouldBeApproved.). Having one assertion per test makes such naming very easy but it does lead to many more test methods if we have to assert on many output fields. Of course, we can often comply with this interpretation by extracting a Custom Assertion (page X) or Verification Method (see Custom Assertion) that allows us to reduce the multiple assertion method calls into one. Sometimes that makes the test more readable but when it doesn't, I wouldn't be too dogmatic about insisting on a single assertion.
