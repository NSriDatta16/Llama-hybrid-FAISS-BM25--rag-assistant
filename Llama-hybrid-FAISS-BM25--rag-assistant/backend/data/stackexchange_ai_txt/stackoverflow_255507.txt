[site]: stackoverflow
[post_id]: 255507
[parent_id]: 253475
[tags]: 
This "feature" will never be adopted by future C standards for one reason only: it would badly break backward compatibility. In C, struct tags have separate namespaces to normal identifiers, and this may or may not be considered a feature. Thus, this fragment: struct elem { int foo; }; int elem; Is perfectly fine in C, because these two elems are in separate namespaces. If a future standard allowed you to declare a struct elem without a struct qualifier or appropriate typedef, the above program would fail because elem is being used as an identifier for an int. An example where a future C standard does in fact break backward compatibiity is when C99 disallowed a function without an explicit return type, ie: foo(void); /* declare a function foo that takes no parameters and returns an int */ This is illegal in C99. However, it is trivial to make this C99 compliant just by adding an int return type. It is not so trivial to "fix" C programs if suddenly struct tags didn't have a separate namespace.
