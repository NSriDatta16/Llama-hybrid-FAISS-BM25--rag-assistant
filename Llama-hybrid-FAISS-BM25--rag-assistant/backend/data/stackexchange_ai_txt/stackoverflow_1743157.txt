[site]: stackoverflow
[post_id]: 1743157
[parent_id]: 1742599
[tags]: 
We just had a hard time to find the answer to exactly this question in our project. This is the story: We thought that reusing classes is great and will reduce many repetitive stuff. NHibernate allows to detach and reattach classes from sessions, so it seemed to be trivial. First and biggest problem we had was that you can't send the whole database around, so we had to split the entity model into pieces and linked them by guids instead of normal references. This made queries very complicated. We had to implement some tricks because serialization, persistency and data binding all had their issues. This rather ugly hacks went all into the same classes. They became larger and larger. Attributes seem to be harmless, until you see a large list of attributes on each class and each property, because every layer adds its attributes. Entities implicitly started to support two "modes": an DTO-mode and a persistency-mode . This got evident when methods like PrepareSerialization or AfterDatabaseRetrieval and others of this kind showed up. Some properties could only be used in the server, others only in the client. Obviously, maintenance became a nightmare. Nobody took the risk of changing an entity anymore, because you had to change things in the whole system. Then we started to switch to Dtos. After a huge amount of work we managed to rewrite some important parts of the system to use Dtos. And - suddenly everyone got happy. You can maintain the serialization. You can maintain the database model and optimize queries. You could make changes on the cient model without breaking anything. Conclusion: The effort to maintaining similar classes for each layers is ridiculous compared to the loss of maintainability when the same classes are used through all the layers. There are still some trivial entities and value-type kind of classes which are used as entities and Dtos at the same time. I could imagine that a small application that consists of only trivial entities could live without Dtos.
