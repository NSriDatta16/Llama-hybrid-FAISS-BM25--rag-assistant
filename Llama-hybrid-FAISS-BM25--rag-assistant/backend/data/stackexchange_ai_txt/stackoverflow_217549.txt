[site]: stackoverflow
[post_id]: 217549
[parent_id]: 
[tags]: 
Which Typesafe Enum in C++ Are You Using?

It is common knowledge that built-in enums in C++ are not typesafe. I was wondering which classes implementing typesafe enums are used out there... I myself use the following "bicycle", but it is somewhat verbose and limited: typesafeenum.h: struct TypesafeEnum { // Construction: public: TypesafeEnum(): id (next_id++), name("") {} TypesafeEnum(const std::string& n): id(next_id++), name(n) {} // Operations: public: bool operator == (const TypesafeEnum& right) const; bool operator != (const TypesafeEnum& right) const; bool operator typesafeenum.cpp: int TypesafeEnum::next_id = 1; bool TypesafeEnum::operator== (const TypesafeEnum& right) const { return id == right.id; } bool TypesafeEnum::operator!= (const TypesafeEnum& right) const { return !operator== (right); } bool TypesafeEnum::operator Usage: class Dialog { ... struct Result: public TypesafeEnum { static const Result CANCEL("Cancel"); static const Result OK("Ok"); }; Result doModal(); ... }; const Dialog::Result Dialog::Result::OK; const Dialog::Result Dialog::Result::CANCEL; Addition: I think I should have been more specific about the requirements. I'll try to summarize them: Priority 1: Setting an enum variable to an invalid value should be impossible (a compile-time error) with no exceptions. Priority 2: Converting an enum value to/from an int should be possible with a single explicit function/method call. Priority 3: As compact, elegant and convenient declaration and usage as possible Priority 4: Converting enum values to and from strings. Priority 5: (Nice to have) Possibility to iterate over enum values.
