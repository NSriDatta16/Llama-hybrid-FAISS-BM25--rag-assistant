[site]: stackoverflow
[post_id]: 2967909
[parent_id]: 
[tags]: 
Exception throws: encapsulate them or not?

Once I read an MSDN article that encouraged the following programming paradigm (its not 100% true... see edit): public class MyClass { public void Method1() { NewCustomException(); } public void Method2() { NewCustomException(); } void NewCustomException() { throw new CustomException("Exception message"); } } Do you think this paradigm makes sense? Wouldn't it be enough to store the exception message in a static const field and then pass it to the exception's constructor, instead of encapsulating the whole exception throw? EDIT: Use exception builder methods. It is common for a class to throw the same exception from different places in its implementation. To avoid excessive code, use helper methods that create the exception and return it. I just noticed (see citation), that the article tells to return an exception: public class MyClass { public void Method1() { throw NewCustomException(); } public void Method2() { throw NewCustomException(); } CustomException NewCustomException() { return new CustomException("Exception message"); } } What do you think about this?
