[site]: stackoverflow
[post_id]: 2219512
[parent_id]: 2218994
[tags]: 
Honestly? I wouldn't have refactored at all. Maybe it's just because I used to be a math wonk but I find the first version much easier to read. It often does not make much sense to refactor an algorithm . When you refactor code it means you expect to reuse or change parts of it. In this case the entire block of code is static and immutable - the only thing you might change is to swap out the entire function with a different algorithm. One-line functions like notCrossed seem particularly useless; they merely serve to make the code more verbose without helping to explain anything that isn't already obvious. Actually, maybe there are two refactorings I would do: Change the class name GeneratePrimes into PrimeGenerator , as you already did. Verb class names always throw me for a loop - is it a class, or a method? Change it to either return an IList or IEnumerable . Returning array types is Considered Harmful . Edit - one more third refactoring would be to remove some of the useless comments and use meaningful variable names instead (where appropriate). Other than that - stick with the original version! Edit - actually, the more I look at the original, the more I dislike it. Not because of the way it's organized, just the way it's written. Here's my rewrite: public class PrimeGenerator { public static IEnumerable GeneratePrimes(int maxValue) { if (maxValue (); bool[] primes = new bool[maxValue + 1]; for (int i = 2; i primes[i]); } } There, much better!
