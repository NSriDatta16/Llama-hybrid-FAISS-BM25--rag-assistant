[site]: stackoverflow
[post_id]: 5386471
[parent_id]: 5385966
[tags]: 
What happens in a C# program if an exception is not caught. Does the program 'crash' with something like a run-time error? Maybe. Maybe not. What happens is implementation-defined . For example, you might get a dialog box that says "there was an unhandled exception, and I see you have Visual Studio installed. Do you want to start up the debugger and examine the program state?" You might get a dialog box that says "there was an unhandled exception, do you want to report this to Microsoft?" If you are already running in the debugger, the debugger probably does something to bring it to your attention. The runtime is allowed to do whatever it wants, and that includes asking you what to do. Note that the runtime is aware of whether there's going to be a catch block or not before the finally blocks run. You can easily demonstrate this with a console app. Write an app that crashes, and outputs in the finally block: Unhandled Exception: System.Exception: Exception of type 'System.Exception' was thrown at ConsoleApplication1.Program.Main(String[] args) finally running now See what happens? The runtime reports the error, gives the debugger a chance to run, or reports the problem to Microsoft, or whatever, before it runs the finally blocks. If they run at all. They might not. Anything can happen . The user could decide to destroy the process, or start a debugger and fix the exception, or whatever. If you really want to understand how exceptions work in C# you should read this: http://blogs.msdn.com/b/cbrumme/archive/2003/10/01/51524.aspx
