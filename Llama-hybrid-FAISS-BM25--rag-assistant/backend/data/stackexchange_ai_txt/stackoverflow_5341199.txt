[site]: stackoverflow
[post_id]: 5341199
[parent_id]: 5333280
[tags]: 
The comment() function might be useful here. It can set and query a comment attribute on an object, but has the advantage other normal attributes of not being printed. dat which gives: > dat A B C 1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 > dat$A [1] 1 2 3 4 5 > comment(dat$A) [1] "Label 1" > comment(dat) [1] "data source is, sampled on 1-Jan-2011" Example of merging: > dat2 comment(dat2$D) dat3 comment(dat3$D) [1] "Label 4" but that looses the comment on dat() : > comment(dat3) NULL so those sorts of operations would need handling explicitly. To truly do what you want, you'll probably either need to write special versions of functions you use that maintain the comments/metadata during extraction/merge operations. Alternatively you might want to look into producing your own classes of objects - say as a list with a data frame and other components holding the metadata. Then write methods for the functions you want that preserve the meta data. An example along these lines is the zoo package which generates a list object for a time series with extra components holding the ordering and time/date info etc, but still works like a normal object from point of view of subsetting etc because the authors have provided methods for functions like [ etc.
