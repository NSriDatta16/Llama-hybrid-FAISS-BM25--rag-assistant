[site]: stackoverflow
[post_id]: 3261769
[parent_id]: 282329
[tags]: 
Perl 5 In order from most annoying to least. 1.) Backwards compatibility police . Yes backcompat is a strength but Perl 5 takes it too far. Now we don't really even get new features in our language without having to enable them explicitly. I'm much prefer the inverse, if a new feature causes a problem let me disable it or enforce old behavior. e.g. perl 5.10 added say I'd rather have no feature 'say' if I have my own say implemented than have to put use feature 'say'; or use 5.010; also if 5.8 worked but 5.10 didn't. I'd rather have use 5.008; to restrict my code to only use features available up to and including 5.8 if no use version; was defined then it should be defaulted to whatever version you're running, and a recommended practice of not to restrict it unless you have to. 2.) Excessive Boilerplate . #!/usr/bin/perl use strict; use warnings; use utf8; use autodie; use English '-no_match_vars'; use 5.010; package Package::Name; BEGIN { Package::Name::VERSION = 0.1; } sub somesub { my $self = shift; my ( $param1, $param2 ) = @_; } 1; now you may start coding. This won't change due to #1. of course there are shortcuts to this stuff like use common::sense; or use modern::perl; which will shorten the above and you may want some slightly different modules or pragma's. But because of #1 we'll never be able to reduce it to. #!/usr/bin/perl package Package::Name 0.01; sub somesub ( $param1, $param2 ) { } some modules are helping with this, and there is the new package version in 5.0.12 which allows exactly that syntax though I think it requires use 5.012; first, and Method::Signatures but it'll never be completely resolved, (in language). 3.) Poor variable choices slurp a file #!/usr/bin/perl use strict; use warnings; open my $fh, " ; close $fh; wtf is $! and $/ ? rewrite to be legible. #!/usr/bin/perl use strict; use warnings; use English '-no_match_vars'; open my $fh, " ; close $fh; and lest not forget that the '-no_match_vars' must be there if you don't want to take a performance hit. How 'bout no direct way to create an anonymous scalar? #!/usr/bin/perl my $scalar_ref = \do{ my $anon_scalar }; couldn't they have come up with something? #!/usr/bin/perl my $scalar_ref = <>; oh and how about how perl is thread unfriendly because all the variables (including special ones) are global by default. At least now you can use my $_; to lexical scope that and use local on the others. 4.) really ugly syntax MooseX::Declare is a much nicer syntax. Also I wish for -> to be replaced with . (personal preference doesn't matter much) 5.) Too much TIMTOWTDI or Too many best practices Seems like you have to read 3-5 books just to figure out all of how you should be doing things . 6.) Previous (no longer applies). Un-sane releases . 5.10.0 had features 5.10.1 had features no set time 'till the next release. Now it's yearly feature releases with quarterly updates. 7.) Ivory Tower perspective . community problem, seems to be a large number of devs who want high barriers to entry and thinks it's ok to treat n00bs ( or really anyone who disagrees with them ) disrespectfully. 8.) Insane Version Numbers/Strings Perl has floating point version numbers and they're ugly. Oh and the dev's don't know that not all downstream deals with version comparison the same way. Not really a language problem 0.012 # simple 5.012001 # semantic 4.101900 # time based + version (for multiple versions in a day) 0.035_002 # prerelease all valid versions in perl.. can't we just use like... 0.12 # simple 5.12.1 # semantic 20100713 # time based (just use the date and be careful not to need to release more than 1 a day) 0.35-beta2 # prerelease addition 9.) No obvious way to reinstall all XS modules after an upgrade
