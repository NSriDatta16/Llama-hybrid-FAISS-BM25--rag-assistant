[site]: stackoverflow
[post_id]: 3374473
[parent_id]: 3374413
[tags]: 
There's a whole paragraph in the docs detailing how Log4j initializes itself: The exact default initialization algorithm is defined as follows: Setting the log4j.defaultInitOverride system property to any other value then "false" will cause log4j to skip the default initialization procedure (this procedure). Set the resource string variable to the value of the log4j.configuration system property. The preferred way to specify the default initialization file is through the log4j.configuration system property. In case the system property log4j.configuration is not defined, then set the string variable resource to its default value "log4j.properties". Attempt to convert the resource variable to a URL. If the resource variable cannot be converted to a URL, for example due to a MalformedURLException, then search for the resource from the classpath by calling org.apache.log4j.helpers.Loader.getResource(resource, Logger.class) which returns a URL. Note that the string "log4j.properties" constitutes a malformed URL. See Loader.getResource(java.lang.String) for the list of searched locations. If no URL could not be found, abort default initialization. Otherwise, configure log4j from the URL. The PropertyConfigurator will be used to parse the URL to configure log4j unless the URL ends with the ".xml" extension, in which case the DOMConfigurator will be used. You can optionaly specify a custom configurator. The value of the log4j.configuratorClass system property is taken as the fully qualified class name of your custom configurator. The custom configurator you specify must implement the Configurator interface. This is, admittedly, confusing as hell to understand. Basically, the simplest thing you can do is put log4j.properties on the classpath of your app, and it will be found. Everything else is... finesse. Personally, I sometimes explicitly call the BasicConfigurator class in my main , sometimes configuring (hard coded) some of the stuff that might otherwise appear in a file... whatever my circumstances call for. You can initialize log4j completely programmatically, and that would kind of make the question of the configuration file moot. Though it would also make your configuration completely less flexible.
