[site]: stackoverflow
[post_id]: 2129958
[parent_id]: 2129840
[tags]: 
In reference to other answers: Using upcase is not a good idea: it will allocate a new string, it will not find if the string has non-alphabetic characters (it seems that you want to forbid that), and it works on integers too (which Emacs uses for characters). Using string-match is better -- it fixes all of these issues. As Trey shows, you need to do that when case-fold-search is nil otherwise Emacs might treat it as a case-insensitive search. But string-match-p is even better since it avoids changing the match data. (Emacs keeps that data around after any match, and if you use string-match then you'll overwrite it, which might break code that uses your function.) Another issue is the regexp itself. Using "^...$" means that Emacs will look for some line with a matching content -- and if your string has newline characters, this might make it return a bogus result. You need to use backslash-unquote and backslash-quote which match only the beginning and end of the string. So a correct version is: (defun string-is-capitalized (str) (let ((case-fold-search nil)) (string-match-p "\\`[A-Z]*\\'" str))) (BTW, the usual convention in Emacs Lisp is to use a -p for predicates, as in string-capitalized-p .)
