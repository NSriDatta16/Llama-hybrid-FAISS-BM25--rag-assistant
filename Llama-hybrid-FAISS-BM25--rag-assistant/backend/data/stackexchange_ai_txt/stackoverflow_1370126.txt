[site]: stackoverflow
[post_id]: 1370126
[parent_id]: 1370096
[tags]: 
The Queue is the right idea. Your approach of "leave it in the queue, locked, but still kind-of-available" is wrong. You may need multiple queues. Process A enqueues something in Queue 1 Process B dequeues from Queue 1 and starts work. If B is successful, that's it. Otherwise, it gets queued somewhere else (perhaps the same queue, or perhaps Queue 2) for follow-up work. If it went back into Queue 1, B will find it again, eventually. If it went to another Queue, then another process does cleanup, logging, error fixup or whatever, possibly putting something back in Queue 1. A Queue isn't a database -- there's nothing stateful (no "don't look at me, I'm being processed"). A Queue is transient storage. Someone writes, someone else reads, and that's it. If you want reliability, read this: http://msdn.microsoft.com/en-us/library/ms978430.aspx And this: http://blogs.msdn.com/shycohen/archive/2006/02/20/535717.aspx And this: http://www.request-response.com/blog/PermaLink,guid,03fb0e40-b446-42b5-ad90-3be9b0260cb5.aspx Reliability is a feature of the queue, not your application. You can do a "recoverable read". It's a transaction that's part of the queue API.
