[site]: stackoverflow
[post_id]: 1865272
[parent_id]: 1865078
[tags]: 
Deciding how often you transfer the order across is a business decision not a technical one. But it is hard to see what competitive advantage you might gain from not processing your customers' orders as soon as possible, so it ought to be a no brainer. Without knowing a lot more about your infrastructure and architecture we cannot give you definitive advice about approach. I would expect a decently written ERP package to include interfaces for importing and exporting information. Alas such expectations are often confounded. If you do need to write your own interface, avoid web services. Unless you have a very peculiar set-up all WS will mean is that it will take longer to satisfy your customers. I think we have already agreed that is not a good idea. Considerations for a Syncronization API: You need to track which new orders have not been transferred to the ERP database. A flag is clumsy, a queue is perhaps more elegant. Have a job/daemon polling continuously to identify orders which need to be transferred and transfer them in near-real time. Have a plan for handling the unavailability of the ERP database. Construct the mapping in a modular fashion so you do not have to rewrite the entire thing just because of a change to the structure of one of your tables. The inventory data will probably have to be pulled from the MySQL database, as it seems unlikely that the third party will allow you to put code into their database. But it's worth reading the contract.
