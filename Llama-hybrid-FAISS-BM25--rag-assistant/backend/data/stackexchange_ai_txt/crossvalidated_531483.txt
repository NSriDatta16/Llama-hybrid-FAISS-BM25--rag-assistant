[site]: crossvalidated
[post_id]: 531483
[parent_id]: 530423
[tags]: 
The paper by Clemens and colleagues (2018) suggests they're working with multiple state-time pairs. On page 1478 of their paper they state the following: "We use difference-in-differences with continuous treatment...where $y_{st}$ is the outcome in state $s$ in year, quarter, or month $t$ ..." It follows from this statement that they're estimating separate equations using different time units. I encourage you to read the corresponding notes under their tabular results. Table 1 is a regression using state-quarter observations. Table 2 is a regression using state-month observations. They did not estimate one model. In fact, they estimated separate DiD equations using different time units. Later, the authors state they use state and quarter-by-year (month-by-year) fixed effects. I understand how this sounds confusing, as it may suggest they estimated, concurrently, quarter and year fixed effects, or month and year fixed effects, separately. But you'd be wrong. The reason they use the term quarter-by-year (month-by-year) fixed effects is because we must assign a separate time-specific intercept for all quarters (months). Note how it shouldn't be a repeating interval. For instance, say you observe 100 U.S. counties over 10 years (i.e., 1960 – 1969) but your data is in quarterly time units. The model should include 99 (i.e., $N - 1$ ) county effects and 39 (i.e., $T - 1$ ) quarter effects. To obtain 39 unique quarter effects, we often instantiate a quarter-year variable. Now quarter 1 in 1960 is distinct from quarter 1 in 1961, hence the term quarter-by-year fixed effect. The "time" fixed effect should be either at the month, quarter, or year level. And, if it's at a level lower than the year, it shouldn't be a repeating interval (e.g., 1 – 12 months). Rather, if you're observing counties from 1960 – 1969 at monthly time units, then your model should be estimating 119 (i.e., $T - 1$ ) month effects. Again, this is capturing the common shocks affecting all counties in each month-year period , not just in, say, September. Now in your specific case, your model includes both year fixed effects and quarter fixed effects. If estimated in the order provided in your post, then the year effects would absorb the quarter effects. Any one year effect is a linear combination of the 4 quarter effects. To demonstrate this, the abridged data frame below shows Napa county from 1960 – 1961. $$ \begin{array}{ccc} county & year & quarter & y_{1960} & y_{1961} & q_1 & q_2 & q_3 & q_4 & \sum_{t = 1}^{4}q_t \\ \hline \text{Napa} & 1960 & 1 & 1 & 0 & 1 & 0 & 0 & 0 & 1 \\ \text{Napa} & 1960 & 2 & 1 & 0 & 0 & 1 & 0 & 0 & 1 \\ \text{Napa} & 1960 & 3 & 1 & 0 & 0 & 0 & 1 & 0 & 1 \\ \text{Napa} & 1960 & 4 & 1 & 0 & 0 & 0 & 0 & 1 & 1 \\ \text{Napa} & 1961 & 1 & 0 & 1 & 1 & 0 & 0 & 0 & 1 \\ \text{Napa} & 1961 & 2 & 0 & 1 & 0 & 1 & 0 & 0 & 1 \\ \text{Napa} & 1961 & 3 & 0 & 1 & 0 & 0 & 1 & 0 & 1 \\ \text{Napa} & 1961 & 4 & 0 & 1 & 0 & 0 & 0 & 1 & 1 \\ \end{array} $$ The data frame includes a full set of year indicators (i.e., $y_{1960}$ , $y_{1961}$ , etc.) and a full set of quarter indicators (i.e., $q_1$ , $q_2$ , etc.). In the last column, I summed across the quarter dummies. Note how the year effect in 1960 is a linear combination of the 4 quarter effects (i.e., $y_{1960} = q_1 + q_2 + q_3 + q_4$ ). We can't include both in a linear equation! I hope the redundancies are a bit more evident once we instantiate all the different time effects. In practice, R should drop the quarter effects for you without any additional work on your part. Examine your summary output and you should see NA values for the quarter effects. However, if you want to estimate a model using the quarterly data, then drop the year fixed effects. I would suggest including county fixed effects, quarter fixed effects, and a continuous policy variable. The quarter fixed effects are, technically, quarter-by-year fixed effects. In the previous data frame, you'd be estimating 7 (i.e., $T - 1$ ) quarter effects, not 4! Instantiating a quarter-year variable is appropriate, and it will distinguish between the effect in $q_1$ in 1960 and $q_2$ in 1961. Coding suggestions: I have no problems with you interacting the proportion of new arrivals with a post-treatment variable. Technically, this is what the continuous policy variable represents. It should equal 0 in the pre-period before any new arrivals emerge, then take on positive values at time $t$ to reflect the proportion of immigrants settling into a treated region in 1980. If, however, different counties experience a Vietnamese influx at different times, then the post variable isn't well-defined and I'd recommend instantiating the interaction term manually. Let's call the new continuous treatment variable immigration , which is the interaction of post and viet_perc just defined in a different way. The basic structure is as follows: lm(wage ~ as.factor(county_code) + as.factor(quarter_year) + immigration + control_variables, data = ...) On the other hand, if post is well-defined and the interaction term is expressed inside of the model formula, then post will be absorbed by the quarter fixed effects. Similarly, if viet_perc is expressed as a simple jump in intensity and exhibits no variation over time, then it will be absorbed by the county fixed effects. In other words, the constituent terms won't show up in your output, but the interaction term will remain. The basic structure is as follows: lm(wage ~ as.factor(county_code) + as.factor(quarter_year) + viet_prop * post + control_variables, data = ...) ​ I would need to review a subset of your data to offer further guidance. Again, it's permissible to instantiate the interaction term before feeding it into the lm() function. The resulting model is a two-way fixed effects equation with a continuous policy variable. In fact, the first code block should have no redundant terms. Lastly, I would avoid using as.factor(post) and wrapping the multiplicative term in parentheses, though it won't affect your results. The variable post should be either 0 or 1. It could enter the model as is and requires no further modification inside of the lm() function.
