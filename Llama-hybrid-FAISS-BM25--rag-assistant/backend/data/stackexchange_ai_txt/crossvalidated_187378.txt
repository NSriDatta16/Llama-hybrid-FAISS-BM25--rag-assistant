[site]: crossvalidated
[post_id]: 187378
[parent_id]: 187347
[tags]: 
This part of your code is incorrect: for (i in 3:17){ gamma[i] ~ dnorm(2*gamma[i-1]-gamma[i-2],1000000*tau.g) } gamma[1] ~ dnorm(0,1000000*tau.g) gamma[2] ~ dnorm(0,1000000*tau.g) you have only gamma[1] and gamma[2] declared, while you refer to values from 1 to 17. "For-loops" in BUGS and JAGS are not for-loops as known from programming languages, they do not allow you to do operations sequentially. JAGS/BUGS are declarative languages, you use them only to declare structure of your model, rather then the procedure that is to be followed for estimating it. So what for-loop in BUGS/JAGS means is only the declaration that something is applied to cases i in 1:n and not that it is applied sequentially. Quoting Plummer (2003) himself 3.2 For loops The existence of “for” loops in the BUGS language is somewhat incongruous, since it is a declarative language, not a procedural one. For loops can be thought of as a kind of macro that succinctly describes repetitive structures. For example, the loop: for (i in 1:2) { mu[i] can be thought of as expanding to mu[1] Plummer, M. (2003, March). JAGS: A program for analysis of Bayesian graphical models using Gibbs sampling. In Proceedings of the 3rd international workshop on distributed statistical computing (Vol. 124, p. 125). Technische Universit at Wien.
