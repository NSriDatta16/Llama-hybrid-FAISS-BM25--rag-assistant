[site]: stackoverflow
[post_id]: 3400652
[parent_id]: 3400525
[tags]: 
Importing file2 in file1.py makes the global (i.e., module level) names bound in file2 available to following code in file1 -- the only such name is SomeClass . It does not do the reverse: names defined in file1 are not made available to code in file2 when file1 imports file2 . This would be the case even if you imported the right way ( import file2 , as @nate correctly recommends) rather than in the horrible, horrible way you're doing it (if everybody under the Sun forgot the very existence of the construct from ... import * , life would be so much better for everybody). Apparently you want to make global names defined in file1 available to code in file2 and vice versa. This is known as a "cyclical dependency" and is a terrible idea (in Python, or anywhere else for that matter). So, rather than showing you the incredibly fragile, often unmaintainable hacks to achieve (some semblance of) a cyclical dependency in Python, I'd much rather discuss the many excellent way in which you can avoid such terrible structure. For example, you could put global names that need to be available to both modules in a third module (e.g. file3.py , to continue your naming streak;-) and import that third module into each of the other two ( import file3 in both file1 and file2 , and then use file3.foo etc, that is, qualified names, for the purpose of accessing or setting those global names from either or both of the other modules, not barenames). Of course, more and more specific help could be offered if you clarified (by editing your Q) exactly why you think you need a cyclical dependency (just one easy prediction: no matter what makes you think you need a cyclical dependency, you're wrong;-).
