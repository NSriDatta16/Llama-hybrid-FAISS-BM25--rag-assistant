[site]: stackoverflow
[post_id]: 4980963
[parent_id]: 
[tags]: 
Database: Insert new rows or update existing ones?

Object-oriented design encourages the use of immutable objects to improve thread-safety and performance. I'm wondering whether this carries over to relational databases. Am I better off updating existing rows, or inserting new ones that act as overrides? Use-case Each employee is associated with exactly one company Employees change their company over time. The employee name should be unique. Schema Employee[name, company] Option 1 : Every time an employee changes companies, insert a new Employee[name, company] row. The application is instructed to skip older rows (which are pruned up in a background thread over time). Option 2 : Every time an employee changes companies, update the existing row. Option 1 reminds me of immutable objects in that it's thread-safe (no need for locks). On the other hand, every time the employee changes companies, I have to clone all associated objects and point them at the new record. Furthermore, it's not clear how to prevent duplicate Employees from getting created by mistake. Option 2 makes it easy to prevent duplicate employees but has the downside of returning potentially inconsistent associations in READ_COMMITTED transaction isolation.
