[site]: stackoverflow
[post_id]: 2518121
[parent_id]: 2517999
[tags]: 
In a different make tool such as CMake, you can express something like that much more easily. For instance, you could well do set(sources ABC.cpp DEF.cpp XYZ.cpp) ADD_LIBRARY(mylib STATIC ${sources}) add_executable(myExecutable ${sources} main.cpp) Or, you could repeatedly build the same directory with different flags by including it several times from the directory's logical parent, i.e. set(MyTweakFlag 2) add_subdirectory("libDir" "libDir2") set(MyTweakFlag 3) add_subdirectory("libDir" "libDir3") ...and then use if() or whatnot in the child directory to set the right flags. Particularly if you have many such configurations, using make becomes quite fragile; make won't correctly find the transitive closure of recursive make dependancies (and certainly won't correctly find the dependancy on the makefile itself - if you change flags, say) so if you're going to do complicated makefile magic: do it with a better tool! (CMake simply happens to be what I replaced make with, but there are various other replacements possible, of course)
