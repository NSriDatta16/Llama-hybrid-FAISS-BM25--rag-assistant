[site]: stackoverflow
[post_id]: 2009705
[parent_id]: 2009416
[tags]: 
You're going about this the wrong way. Don't re-invent the wheel by trying to manually get -> serialize and unserialize -> set the session data Instead, create a new session handler that will do the database work for you. The serialization/unserializtion is also handled for you - you won't have to explicitly call these functions. Also, by not using the established mechanism for this process, you're missing out on some functionality (like the session garbage collector) But before doing that, let's make a database table that will act as our session storage CREATE TABLE IF NOT EXISTS `user_session` ( `user_session_id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `sess_id` VARCHAR(64) NOT NULL , `sess_data` TEXT NOT NULL , `sess_time` INT UNSIGNED NOT NULL , PRIMARY KEY (`user_session_id`) , INDEX `idx_sess_id` (`sess_id` ASC) , INDEX `idx_sess_time` (`sess_time` ASC) ) ENGINE = InnoDB; Next is to make a class with the methods we need. I'm not going to fill them all out - that's an exercise for you ;) class MysqlSessionHandler { protected $db; public function __construct( $db ) { $this->db = $db } public function open() { } public function close() { } public function read() { } public function write() { } public function destroy() { } public function gc() { } public function register() { return session_set_save_handler( array( $this, 'open' ) , array( $this, 'close' ) , array( $this, 'read' ) , array( $this, 'write' ) , array( $this, 'destroy' ) , array( $this, 'gc' ) ); } } And the basic usage would be $sessionHandler = new MysqlSessionHandler( $db ); $sessionHandler->register(); And as a final note, you can always get the current session ID just by calling session_id()
