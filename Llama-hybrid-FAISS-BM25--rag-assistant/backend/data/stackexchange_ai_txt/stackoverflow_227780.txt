[site]: stackoverflow
[post_id]: 227780
[parent_id]: 70992
[tags]: 
Have you tried using a result transformer? If you use Criteria queries, you can apply a result transformer (although there are some problems with pagination and result transformer ): Criteria c = ((Session)em.getDelegate()).createCriteria(Order.class); c.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY); c.list(); the em.getDelegate() is a hack that only works if you are using hibernate. Perhaps more importantly, is there a way to pull in all child objects, no matter how deep? We have around 10-15 classes and for the server we will need everything loaded... I was avoiding using FetchType.EAGER as that meant its always eager and in particular the web front end loads everything - but perhaps that is the way to go - is that what you do? I seem to remember us trying this before and then getting really slow webpages - but perhaps that means we should be using a second-level cache? If you are still interested, I responded a similar question in this thread how to serialize hibernate collections . Basically you use a utility called dozer that maps beans onto another beans, and by doing this you trigger all your lazy loads. As you can imagine, this works better if all collections are eagerly fetched.
