[site]: stackoverflow
[post_id]: 987731
[parent_id]: 
[tags]: 
POSTing an HTML form to remote.cgi - written in Ruby?

I am working on a website hosted on microsoft's office live service. It has a contact form enabling visitors to get in touch with the owner. I want to write a Ruby script that sits on a seperate sever and which the form will POST to. It will parse the form data and email the details to a preset address. The script should then redirect the browser to a confirmation page. I have an ubuntu hardy machine running nginx and postfix. Ruby is installed and we shall see about using Thin and it's Rack functionality to handle the script. Now it's come to writing the script and i've drawn a blank. It's been a long time and if i remember rightly the process is something like; read HTTP header parse parameters send email send redirect header Broadly speaking, the question has been answered. Figuring out how to use the answer was more complicated than expected and I thought worth sharing. First Steps: I learnt rather abruptly that nginx doesn't directly support cgi scripts. You have to use some other process to run the script and get nginx to proxy requests over. If I was doing this in php (which in hind sight i think would have been a more natural choice) i could use something like php-fcgi and expect life would be pretty straight forward. Ruby and fcgi felt pretty daunting. But if we are abandoning the ideal of loading these things at runtime then Rack is probably the most straight forward solution and Thin includes all we need. Learning how to make basic little apps with them has been profoundly beneficial to a relative Rails newcomer like me. The foundations of a Rails app can seem hidden for a long time and Rack has helped me lift the curtain that little bit further. Nonetheless, following Yehuda's advice and looking up sinatra has been another surprise. I now have a basic sinatra app running in a Thin instance. It communicates with nginx over a unix socket in what i gather is the standard way. Sinatra enables a really elegant way to handle different requests and routes into the app. All you need is a get '/' {} to start handling requests to the virtual host. To add more (in a clean fashion) we just include a routes/script.rb into the main file. # cgi-bin.rb # main file loaded as a sinatra app require 'sinatra' # load cgi routes require 'routes/default' require 'routes/contact' # 404 behaviour not_found do "Sorry, this CGI host does not recognize that request." end These route files will call on functionality stored in a separate library of classes: # routes/contact.rb # contact controller require 'lib/contact/contactTarget' require 'lib/contact/contactPost' post '/contact/:target/?' do |target| # the target for the message is taken from the URL msg = ContactPost.new(request, target) redirect msg.action, 302 end The sheer horror of figuring out such a simple thing will stay with me for a while. I was expecting to calmly let nginx know that .rb files were to be executed and to just get on with it. Now that this little sinatra app is up and running, I'll be able to dive straight in if I want to add extra functionality in the future. Implementation: The ContactPost class handles the messaging aspect. All it needs to know are the parameters in the request and the target for the email. ContactPost::action kicks everything off and returns an address for the controller to redirect to. There is a separate ContactTarget class that does some authentication to make sure the specified target accepts messages from the URL given in request.referrer. This is handled in ContactTarget::accept? as we can guess from the ContactPost::action method; # lib/contact/contactPost.rb class ContactPost # ... def action return failed unless @target.accept? @request.referer if send? successful else failed end end # ... end ContactPost::successful and ContactPost::failed each return a redirect address by combining paths supplied with the HTML form with the request.referer URI. All the behaviour is thus specified in the HTML form. Future websites that use this script just need to be listed in the user's own ~/cgi/contact.conf and they'll be away. This is because ContactTarget looks in /home/:target/cgi/contact.conf for the details. Maybe oneday this will be inappropriate, but for now it's just fine for my purposes. The send method is simple enough, it creates an instance of a simple Email class and ships it out. The Email class is pretty much based on the standard usage example given in the Ruby net/smtp documentation; # lib/email/email.rb require 'net/smtp' class Email def initialize(from_alias, to, reply, subject, body) @from_alias = from_alias @from = "cgi_user@host.domain.com" @to = to @reply = reply @subject = subject @body = body end def send Net::SMTP.start('localhost', 25) do |smtp| smtp.send_message to_s, @from, @to end end def to_s All I need to do is rack up the application, let nginx know which socket to talk to and we're away. Thank you everyone for your helpful pointers in the right direction! Long live sinatra!
