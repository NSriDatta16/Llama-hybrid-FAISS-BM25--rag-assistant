[site]: stackoverflow
[post_id]: 4671374
[parent_id]: 3793643
[tags]: 
I don't know of any such standard tool, but since you haven't gotten an answer for a while, here are some ideas: So first, trying to avoid a CHANGELOG file, as you suggest, is probably a good idea in general because of all the merge conflicts such a file tends to cause. (Unless you happen to have a smart automatic merge tool.) Something like a CL: or Log: prefix for easy extraction is probably a good idea. Regarding Add/Ref/Rem/Fix: (I assume that Ref and Rem stand for "Refactor" and "Remove", right?) When you're writing a changelog, I'd rather stick with free-form entries. For example, I'm not sure that refactorings belong into a changelog, and features that are high-level enough to warrant changelog entries don't usually get removed outright -- they rather get changed into some other form. But then, how would you approach the possibility of having commit messages written just for changelogs (i.e. too high level); I'd say, put the ( CL: -tagged) high-level description in one paragraph of the commit message, and the lower level technical description in another paragraph. or multiple messages concerning the same changelog issue. We're talking about something like this, right? (2011-01-03) CL: Changed whizbar default to 200. (2011-01-11) CL: Changed whizbar default to 150, or 250 if foosnub is true. And this is where I think the "automatic changelog" thing gets tricky. Unless you're willing to rebase and edit commit messages after the fact (like removing "CL:" from commit (1) above), I'd suggest that the only practical way to go about this is, every time you make a release, to extract all tagged paragraphs from the git log since your last release, and manually edit the resulting list, merging things like (1) and (2) above together, and turning, say, "Fixed #145", "Fixed #153", "Fixed #164" into a single line "Fixed #145, #153, and #164." Hope I've been able to provide some inspiration. Let us know what you end up doing!
