[site]: stackoverflow
[post_id]: 2997160
[parent_id]: 2996754
[tags]: 
As an alternative, I managed to cobble together a version using array_* functions. At some point though, 'elegance', 'efficiency' and 'readability' all packed up and left. It does, however, handle the edge cases I mentioned in the other answer, and it left me with a nice warm glow for proving it could be done in a functional manner (yet at the same time a sense of shame...) $days = array_keys($arr); $dayIndices = array_flip($days); var_dump(array_flip(array_map( function ($mydays) use($days, $dayIndices) { return array_reduce($mydays, function($l, $r) use($days, $dayIndices) { if ($l == '') { return $r; } if (substr($l, -3) == $days[$dayIndices[$r] - 1]) { return ((strlen($l) > 3 && substr($l, -4, 1) == '-') ? substr($l, 0, -3) : $l) . '-' . $r; } return $l . ',' . $r; }, ''); }, array_map( function ($day) use ($arr) { return array_keys($arr, $arr[$day]); }, array_flip($arr) ) ))); I tested it with this input: 'Mon' => '12noon-2:45pm, 5:30pm-10:30pm', 'Tue' => '12noon-2:45pm, 5:30pm-10:30pm', 'Wed' => '12noon-2:45pm, 5:30pm-10:00pm', 'Thu' => '12noon-2:45pm, 5:30pm-10:30pm', 'Fri' => '12noon-2:45pm, 5:30pm-10:00pm', 'Sat' => '12noon-2:45pm, 5:30pm-10:30pm', 'Sun' => '12noon-9:30pm' And got this: ["Mon-Tue,Thu,Sat"]=> string(29) "12noon-2:45pm, 5:30pm-10:30pm" ["Wed,Fri"]=> string(29) "12noon-2:45pm, 5:30pm-10:00pm" ["Sun"]=> string(13) "12noon-9:30pm" Basically, the array_map at the end transforms the input into an associative array of times to an array of days that they occur on. The large block of code before that reduces those days into a nicely formatted string using array_reduce , consulting the $days and $dayIndices arrays to check if days are consecutive or not.
