[site]: stackoverflow
[post_id]: 3277719
[parent_id]: 3271641
[tags]: 
You could listen to the event for when the cell ends the edit and then save your data source. i.e. place this in your constructor of the control that hosts the grid (probably a user control, window, page etc) after the InitializeComponent() call this.myDataGrid.CellEditEnding += new EventHandler (grid_CellEditEnding); and then have the handler save the data source void grid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e) { //save my data source } personally i prefer the approach where you can perform your edits and then hit save at the end, but in your case you could use String.Join to create a CSV String and then write it to a file. To do this, make a property which is your List, so your building of your data for the grid would look like this: public Collection MyPersonDataSource {get; private set; } public MyWindowsConstructor() { //build the grid data before you initialize the window, as the PersonDataSource //does not implement NotifyPropertyChanged, if you build the data afterwards //the binding won't be updated BuildGridData(); InitializeComponent(); } private void BuildGridData(){ this.MyPersonDataSource = new Collection (); Person p = new Person(); string[] str = new string[] { "Stacey", "Olivia", "Dylan", "Lauryn", "Beth", "Caitlin" }; var data = from s in str select s; Person pers; foreach (var d in data) { pers = new Person(); pers.Name = d; pers.Age = 22; this.MyPersonDataSource.Add(pers); } } then in your cell end edit function void grid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e) { //save my data source var nameArray = this.MyPersonDataSource.Select(item => item.Name).ToArray(); //create the csv string String csvString = String.Join("," nameArray); //write it to a file System.IO.File.WriteAllText(@"C:\SomeFolderYouHavePermissionsOn\names.csv", csvString); } I would bind my grid straight to the property MyPersonDataSource, like so.. And i would probably look at more robust data storage than CSV, you can use xml and bind to it using XPath, but I haven't used this enough to frame an appropriate answer.
