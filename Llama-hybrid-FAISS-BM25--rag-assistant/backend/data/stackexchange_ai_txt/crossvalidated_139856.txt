[site]: crossvalidated
[post_id]: 139856
[parent_id]: 139834
[tags]: 
I'm working exactly on the same task now, implementing ConvNet for NLP ) Regarding reference implementations, there is a lot of general-purpose ConvNets out there, they are can be readily found with google. I think most of them don't support things like dynamic k-max pooling, most run only on GPU and some come as part of big machine learning libs. I know only one publicitly avaliale implementation of CNN tailored to NLP tasks ( http://riejohnson.com/cnn_download.html ), but it only runs on GPU and uses somewhat different approach. To debug my own implementation I created a simplest possible syntetic task and simple convnet with one feature map (2x1) and one pooling layer, and then manually checked all problematic parts, step by step. After that I picked up more complex synthetic problem, added second feature map and so on, until whole thing seemed to work ok. It always good idea to start from simple cases. It is also important to debug convolutional layer together with pooling layer, to ensure that backprop error correctly passed to convolutional layer. Otherwise system will fail to work, even when convolutional layer itself works fine. I'm currently in process of testing it on sentiment classification task, again starting from simple architectures, to see whats really important and what is not. PS. its difficult to say anything more about your problem in general, many things are very implementation specific, but if you are interested, you can contact me directly so we can compare notes...
