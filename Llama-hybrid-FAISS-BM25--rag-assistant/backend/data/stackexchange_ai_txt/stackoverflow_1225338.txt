[site]: stackoverflow
[post_id]: 1225338
[parent_id]: 
[tags]: 
Model instantiation question when using Core Data

I'm slightly confused in one aspect of Core Data. That is, when do I use the rudimentary alloc/init routine vs created an object with core data and saving it into the current managed object context. I know that's a rather vague question, so let me give you an example. I have an application I'm currently working on that iterates through all of a user's contact book on the iPhone. From there, I wrote a model class called 'Person'. I used to do something like this in a loop of people: Person *person = [[Person alloc] initWithWrapper:mywrapper]; mywrapper would contain an NSDictionary with the attributes for person. Later I'd be able to populate the address book in my app with the person objects. Now I've started rebuilding parts of the app with Core Data. Do I continue using the strategy above to populate my address book? Or do I do something like this instead: Person *person = (Person *)[NSEntityDescription insertNewObjectForEntityForName:@"Person" inManagedObjectContext:managedObjectContext]; [person setName:name]; [person setDob:dob]; // Commit the change. NSError *error; if (![managedObjectContext save:&error]) { // Handle the error. } The problem is, this code gets executed everytime the app gets started. Should I not be using core data as it will populate the storage mechanism with redundant instances of person everytime the app loads? Should I modify my NSManagedObject (Person class) and add my initWithWrapper: method and continue as I normally would there? Slightly confused, would love clarification.
