[site]: crossvalidated
[post_id]: 503440
[parent_id]: 50807
[tags]: 
The TSFEL package provides this very comprehensive list of possible time series features. The source code shows how every feature is calculated in detail. You can find a comprehensive list below: * abs_energy(signal) Computes the absolute energy of the signal. * auc(signal, fs) Computes the area under the curve of the signal computed with trapezoid rule. * autocorr(signal) Computes autocorrelation of the signal. * calc_centroid(signal, fs) Computes the centroid along the time axis. * calc_max(signal) Computes the maximum value of the signal. * calc_mean(signal) Computes mean value of the signal. * calc_median(signal) Computes median of the signal. * calc_min(signal) Computes the minimum value of the signal. * calc_std(signal) Computes standard deviation (std) of the signal. * calc_var(signal) Computes variance of the signal. * distance(signal) Computes signal traveled distance. * ecdf(signal[, d]) Computes the values of ECDF (empirical cumulative distribution function) along the time axis. * ecdf_percentile(signal[, percentile]) Computes the percentile value of the ECDF. * ecdf_percentile_count(signal[, percentile]) Computes the cumulative sum of samples that are less than the percentile. * ecdf_slope(signal[, p_init, p_end]) Computes the slope of the ECDF between two percentiles. * entropy(signal[, prob]) Computes the entropy of the signal using the Shannon Entropy. * fft_mean_coeff(signal, fs[, nfreq]) Computes the mean value of each spectrogram frequency. * fundamental_frequency(signal, fs) Computes fundamental frequency of the signal. * hist(signal[, nbins, r]) Computes histogram of the signal. * human_range_energy(signal, fs) Computes the human range energy ratio. * interq_range(signal) Computes interquartile range of the signal. * kurtosis(signal) Computes kurtosis of the signal. * lpcc(signal[, n_coeff]) Computes the linear prediction cepstral coefficients. * max_frequency(signal, fs) Computes maximum frequency of the signal. * max_power_spectrum(signal, fs) Computes maximum power spectrum density of the signal. * mean_abs_deviation(signal) Computes mean absolute deviation of the signal. * mean_abs_diff(signal) Computes mean absolute differences of the signal. * mean_diff(signal) Computes mean of differences of the signal. * median_abs_deviation(signal) Computes median absolute deviation of the signal. * median_abs_diff(signal) Computes median absolute differences of the signal. * median_diff(signal) Computes median of differences of the signal. * median_frequency(signal, fs) Computes median frequency of the signal. * mfcc(signal, fs[, pre_emphasis, nfft, â€¦]) Computes the MEL cepstral coefficients. * negative_turning(signal) Computes number of negative turning points of the signal. * neighbourhood_peaks(signal[, n]) Computes the number of peaks from a defined neighbourhood of the signal. * pk_pk_distance(signal) Computes the peak to peak distance. * positive_turning(signal) Computes number of positive turning points of the signal. * power_bandwidth(signal, fs) Computes power spectrum density bandwidth of the signal. * rms(signal) Computes root mean square of the signal. * skewness(signal) Computes skewness of the signal. * slope(signal) Computes the slope of the signal. * spectral_centroid(signal, fs) Barycenter of the spectrum. * spectral_decrease(signal, fs) Represents the amount of decreasing of the spectra amplitude. * spectral_distance(signal, fs) Computes the signal spectral distance. * spectral_entropy(signal, fs) Computes the spectral entropy of the signal based on Fourier transform. * spectral_kurtosis(signal, fs) Measures the flatness of a distribution around its mean value. * spectral_positive_turning(signal, fs) Computes number of positive turning points of the fft magnitude signal. * spectral_roll_off(signal, fs) Computes the spectral roll-off of the signal. * spectral_roll_on(signal, fs) Computes the spectral roll-on of the signal. * spectral_skewness(signal, fs) Measures the asymmetry of a distribution around its mean value. * spectral_slope(signal, fs) Computes the spectral slope. * spectral_spread(signal, fs) Measures the spread of the spectrum around its mean value. * spectral_variation(signal, fs) Computes the amount of variation of the spectrum along time. * sum_abs_diff(signal) Computes sum of absolute differences of the signal. * total_energy(signal, fs) Computes the total energy of the signal. * wavelet_abs_mean(signal[, function, widths]) Computes CWT absolute mean value of each wavelet scale. * wavelet_energy(signal[, function, widths]) Computes CWT energy of each wavelet scale. * wavelet_entropy(signal[, function, widths]) Computes CWT entropy of the signal. * wavelet_std(signal[, function, widths]) Computes CWT std value of each wavelet scale. * wavelet_var(signal[, function, widths]) Computes CWT variance value of each wavelet scale. * zero_cross(signal) Computes Zero-crossing rate of the signal.
