[site]: stackoverflow
[post_id]: 2285734
[parent_id]: 2283610
[tags]: 
Although the comments about multiprocessing being a very useful new package that allows easily taking advantage of multi-core systems, your requirements for multithreaded behaviour may not require that, and may also be entirely unaffected by the "limitations of the GIL". We've built many applications, all of them multithreaded, which are used for various types of machine control (or "instrumentation", if you wish). The GIL is entirely a non-issue for us, perhaps because we're generally not CPU-bound though in the few areas where we are it's also never been an issue as the external packages we take advantage of release the GIL when required. (The intensity of the negative comments about the GIL always surprises me, probably because we work in somewhat atypical areas and ways.) Python's threading support is highly effective, very easy to work with, and very robust. Not only is it rare that we have to concern ourselves with the lower-level concurrency issues (in some languages you have to spend half your time thinking about what to lock and when to lock it), but in the few areas where we still need to pay attention to it the available support makes it all relatively easy. One key thing is to leverage the Queue class, since using it where possible often eliminates any remaining concerns about critical sections, race conditions, etc. Python's primitive objects (integers, dicts, lists, etc) are all about as thread-safe as one would like, though if you are new to threaded applications they won't protect you from your own ignorance. For experienced programmers in this area, I think Python's highly effective and easy to use.
