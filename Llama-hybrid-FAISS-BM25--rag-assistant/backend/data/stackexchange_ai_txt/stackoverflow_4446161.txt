[site]: stackoverflow
[post_id]: 4446161
[parent_id]: 
[tags]: 
hibernate: list of child ids retrieval for parent

Technology: Hibernate 3.0 Suppose i have Entity class Company @Entity @Table(name="tbl_companies") public class Company { @Id @Column(name="id") @GeneratedValue(strategy=GenerationType.IDENTITY) int id; @Column(name="name") String companyName; @OneToMany(mappedBy = "company") List empList; @OneToMany(mappedBy = "company") List projectList; @OneToMany(mappedBy = "company") List deptList; @OneToMany(mappedBy = "company") List branchList; } In Entity Company which is mapped to database by hibernate annotation contains list of of other entities related to it. Since objects of these Entities like Branch, Project, Employee itself are heavy objects, it will make Company object very heavy and contains almost whole of db data. One way to avoid this is to use lazy loading. One other approach can be to use List branchIdList, List projectIdList that is list of ids for objects. My question which approach is standard practice and better to use in such situation. Better to use includes factors like performance in term of memory mainly, flexibility for programmer(first one is one flexible for programmer and second one uses less memory). Another question is if i use second approach what will be change in annotation. I doubt if hibernate supports list of ids or support full fledged objects only. Thanks
