[site]: stackoverflow
[post_id]: 5327433
[parent_id]: 5319400
[tags]: 
Both the answers from dmarkow and Unixmonkey get me what I need - Thank You! I tried both out in my real app and got timings for them - Here are the two scopes: class Person has_many :contacts has_many :friends, :through => :contacts, :uniq => true scope :without_friends_v1, -> { where("(select count(*) from contacts where person_id=people.id) = 0") } scope :without_friends_v2, -> { where("id NOT IN (SELECT DISTINCT(person_id) FROM contacts)") } end Ran this with a real app - small table with ~700 'Person' records - average of 5 runs Unixmonkey's approach ( :without_friends_v1 ) 813ms / query dmarkow's approach ( :without_friends_v2 ) 891ms / query (~ 10% slower) But then it occurred to me that I don't need the call to DISTINCT()... I'm looking for Person records with NO Contacts - so they just need to be NOT IN the list of contact person_ids . So I tried this scope: scope :without_friends_v3, -> { where("id NOT IN (SELECT person_id FROM contacts)") } That gets the same result but with an average of 425 ms/call - nearly half the time... Now you might need the DISTINCT in other similar queries - but for my case this seems to work fine. Thanks for your help
