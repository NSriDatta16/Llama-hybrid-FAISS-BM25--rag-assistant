[site]: stackoverflow
[post_id]: 5544321
[parent_id]: 5544115
[tags]: 
I had troubles too to try to build true reusable pieces of UI code in my winforms projects. Then I managed to achieve this goal more or less by using UserControls, but it is cumbersome sometimes because it often requires a lot of properties / method to be subclassed when it is aimed to be reused in different projects with a very different layout. That's why I use Helper classes which set some controls properties, passing the control in parameter this way. For example: void SetupEditableGrid(UltraGrid myGrid) { myGrid.BackColor... } Also, for the most complex objects that requires more work, I am using controller classes associated with some specific controls. For example, I use a MyEditableUltraGridController to prepare a raw Infragistic's UltraGrid to be fully editable. public class MyEditableUltraGridController() { UltraGrid _myGrid; public MyEditableUltraGridController(UltraGrid myGrid) { _myGrid = myGrid; _myGrid.InitializeLayout += ... // some common initialization code _myGrid.KeyPressed += ... // some keystroke handling code ... etc ... } void InitializeLayout(object sender, EventArgs e) { ... some specific UltraGrid common initialization code } ... // some code that make my UltraGrid editable, etc... } Then, considering an existing UltraGrid1 control on my form, I will have : Form_Load(object sender, EventArgs e) { var MyEditableUltraGridController = new MyEditableUltraGridController(UltraGrid1); } I feel confortable with this class based approach, because it allows me to maintain control behaviour a confortable way with a good flexibility.
