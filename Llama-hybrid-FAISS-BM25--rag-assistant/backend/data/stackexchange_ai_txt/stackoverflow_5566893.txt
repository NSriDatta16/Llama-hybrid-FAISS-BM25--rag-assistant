[site]: stackoverflow
[post_id]: 5566893
[parent_id]: 5566198
[tags]: 
Well, references become dangling when the referent goes away. You have a very fragile design if object A has a reference to some part of object B, unless object A in some way can guarantee the lifetime of object B (for instance, when A holds a shared_ptr to B anyway, or both are in the same scope). References in lambda's are no magical exception. If you plan to return a reference to x+=y , you'd better make sure that x lives long enough. Here it's the argument int x initialized as part of the call accumulator(1) . The lifetime of a function argument ends when the function returns.
