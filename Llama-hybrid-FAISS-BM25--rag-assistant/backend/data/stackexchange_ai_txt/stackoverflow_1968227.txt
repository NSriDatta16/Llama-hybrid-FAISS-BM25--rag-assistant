[site]: stackoverflow
[post_id]: 1968227
[parent_id]: 1967283
[tags]: 
You might run into problems as you make classes that are derived on multiple classes that use events, should those parent classes use the same events. Of other note, you will need to use the following syntax to define your abstract callback function: template class Base { virtual void listener() = 0; } class Derived : public class Base , public class Base { void Base ::listener(){...} void Base ::listener(){...} } If you then need to call either of those from Derived, you probably would need to use similar syntax (Although I honestly don't know), but if you call it from a Base or Base reference, it'll all work nicely. As an added bonus, you won't compile unless the listener functions are actually defined. More or less, multiple inheritance means you need to pay more attention, but it's a valuable feature of the language. I think there might also be more template shenanigans you can do to prevent diamond inheritance, at the cost of elegance.
