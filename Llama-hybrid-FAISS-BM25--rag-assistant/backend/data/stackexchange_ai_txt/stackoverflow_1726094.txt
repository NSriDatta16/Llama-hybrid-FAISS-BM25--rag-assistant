[site]: stackoverflow
[post_id]: 1726094
[parent_id]: 1620355
[tags]: 
1) How do you manage object identity when working with db4o stored objects? In db4o you have normally no id. db4o uses the object-identity to distinguish the object apart. So the same object in memory is going to be the same object for the database. As long a you don't serialize object this works fine. However as soon as objects are serialized / disconnected this doesn't work anymore. For example in a web-scenario: You send the data to the browser. Now you need to identify the objects later again by some ids. I think this three options are possible: - Use the db4o internal id . However this id isn't forever. Defragmenting the database changes this id. - Using db4o's UUIDs . But db4o UUIDs are quite large - Creating ids by yourself 2) There's a Object-Manager Tool to look at the database. However it extremely limited in its current state. In my opinion this is a huge drawback for db4o. 3) You can create aliases, rename classes and fields etc . However changing the inheritance-hierarchy doesn't work. Then you need to copy the old data to new instances. 4) Yes. You can mark fields as transient with the .NET-NonSerialized attribute or custom attributes.
