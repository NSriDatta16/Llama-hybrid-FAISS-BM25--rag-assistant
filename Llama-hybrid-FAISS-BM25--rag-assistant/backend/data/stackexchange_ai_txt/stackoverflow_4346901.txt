[site]: stackoverflow
[post_id]: 4346901
[parent_id]: 
[tags]: 
Suggestion for solving fragile pattern matching

I often need to match a tuple of values that should have the same constructor. The catchall _,_ always winds-up at the end. This of course is fragile, any additional constructor added to the type will compile perfectly fine. My current thoughts are to have matches that connect the first but not second argument. But, is there any other options? For example, type data = | States of int array | Chars of (char list) array let median a b = match a,b with | States xs, States ys -> assert( (Array.length xs) = (Array.length ys) ); States (Array.init (Array.length xs) (fun i -> xs.(i) lor ys.(i))) | Chars xs, Chars ys -> assert( (Array.length xs) = (Array.length ys) ); let union c1 c2 = (List.filter (fun x -> not (List.mem x c2)) c1) @ c2 in Chars (Array.init (Array.length xs) (fun i -> union xs.(i) ys.(i))) (* inconsistent pairs of matching *) | Chars _, _ | States _, _ -> assert false
