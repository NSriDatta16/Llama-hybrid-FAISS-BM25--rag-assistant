[site]: stackoverflow
[post_id]: 2257095
[parent_id]: 2257086
[tags]: 
Architects blueprints a building before starting any real work on it, and they do so by following standards. That's because with many fields there is the exact knowledge beforehand. What is involved, which rules, what laws of physics, what regulations to consider. That's why it is possible to blueprint the whole thing up to the last nail. With software it is very much different. You can do whatever you want. You can reach anything and nobody can tell you that it is good or bad. Because there are no standards. Only subjective opinion. Every time I have coded something, I did so by starting up my editor and improvise. Writing methods, classes as I go. Off course, I think about it beforehand, I take out sketch paper and write my ideas down, do a little list of things to do, etc That's how it usually done. You can experiment with some frameworks, tools, architectures before starting with the project. For example, do a few test projects to learn what you need to attempt to "blueprint" your future software. I don't want opinions. Every answer here is going to be an opinion. Because there are no standards to fall back to. Experience and opinion. I'd like something specific: Charts? Maps? Tools? Techniques? Step-by-steps process? What has worked for most is: Involve users from the beginning into your project. Collect regular feedback to adjust your course. Be agile and follow some kind of iterative process. First, you sketch the UI. Get the feedback. Then you implement some general functionality. Get feedback. Adjust your course. Implement some more features. And so on. Sooner or later there will be enough meat to go v.1. If you absolutely need some strict guidelines, then use UML (Unified Modeling Language) for charts and diagrams and adopt the RUP (Rational Unified Process) or its analogues. You can follow Scrum , there is also some organizational activity ivolved.
