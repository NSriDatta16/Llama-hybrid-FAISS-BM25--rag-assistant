[site]: crossvalidated
[post_id]: 138247
[parent_id]: 138223
[tags]: 
The things to worry about include: The size of the dataset. It is not tiny, not large. The dependence of what you see on histogram origin and bin width. With only one choice evident, you (and we) have no idea of sensitivity. The dependence of what you see on kernel type and width and whatever other choices are made for you in density estimation. With only one choice evident, you (and we) have no idea of sensitivity. Elsewhere I have suggested tentatively that credibility of modes is supported (but not established) by a substantive interpretation and by the ability to discern the same modality in other datasets of the same size. (Bigger is better too....) We can't comment on either of those here. One small handle on repeatability is to compare what you get with bootstrap samples of the same size. Here are the results of a token experiment using Stata, but what you see is arbitrarily limited to Stata's defaults, which themselves are documented as plucked out of the air . I got density estimates for the original data and for 24 bootstrap samples from the same. The indication (no more, no less) is what I think experienced analysts would just guess any way from your graph. The left-hand mode is highly repeatable and the right-hand is distinctly more fragile. Note that there is an inevitability about this: as there are fewer data nearer the right-hand mode, it won't always reappear in a bootstrap sample. But this is also the key point. Note that point 3. above remains untouched. But the results are somewhere between unimodal and bimodal. For those interested, this is the code: clear set scheme s1color set seed 2803 mat data = (10346, 13698, 13894, 19854, 28066, 26620, 27066, 16658, 9221, 13578, 11483, 10390, 11126, 13487, 15851, 16116, 24102, 30892, 25081, 14067, 10433, 15591, 8639, 10345, 10639, 15796, 14507, 21289, 25444, 26149, 23612, 19671, 12447, 13535, 10667, 11255, 8442, 11546, 15958, 21058, 28088, 23827, 30707, 19653, 12791, 13463, 11465, 12326, 12277, 12769, 18341, 19140, 24590, 28277, 22694, 15489, 11070, 11002, 11579, 9834, 9364, 15128, 15147, 18499, 25134, 32116, 24475, 21952, 10272, 15404, 13079, 10633, 10761, 13714, 16073, 23335, 29822, 26800, 31489, 19780, 12238, 15318, 9646, 11786, 10906, 13056, 17599, 22524, 25057, 28809, 27880, 19912, 12319, 18240, 11934, 10290, 11304, 16092, 15911, 24671, 31081, 27716, 25388, 22665, 10603, 14409, 10736, 9651, 12533, 17546, 16863, 23598, 25867, 31774, 24216, 20448, 12548, 15129, 11687, 11581) set obs `=colsof(data)' gen data = data[1,_n] gen index = . quietly forval j = 1/24 { replace index = ceil(120 * runiform()) gen data`j' = data[index] kdensity data`j' , nograph at(data) gen(xx`j' d`j') } kdensity data, nograph at(data) gen(xx d) local xstuff xtitle(data/1000) xla(10000 "10" 20000 "20" 30000 "30") sort local ystuff ysc(r(0 .0001)) yla(none) `ystuff' local i = 1 local colour "orange" foreach v of var d d? d?? { line `v' data, lc(`colour') `xstuff' `ystuff' name(g`i', replace) local colour "gs8" local G `G' g`i' local ++i } graph combine `G'
