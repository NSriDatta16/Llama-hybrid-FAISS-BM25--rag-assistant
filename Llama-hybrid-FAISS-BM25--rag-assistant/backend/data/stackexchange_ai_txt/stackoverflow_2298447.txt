[site]: stackoverflow
[post_id]: 2298447
[parent_id]: 184729
[tags]: 
Here's a good read on it: "Principle: Don't modify the SUT" at http://xunitpatterns.com/Principles%20of%20Test%20Automation.html#Don Modifying the class you're testing by mocking or stubbing portions of its implementation is a code smell. The refactoring to get away from it is to move the part you're mocking/stubbing to another class. That said its not always a terrible thing. Its a code smell but its not always inappropriate. For languages like C# or Java where you have good refactoring tools its easy to fix this code smell and I normally would (in C#, assuming Java is similar). I do a lot of development in Lua and Javascript though, where things are a little different. Creating and managing lots of classes in those languages are more difficult, so I am more tolerant of modifying the SUT in tests. Its always something I can fix later once the initial test coverage is there. It does require extra care.
