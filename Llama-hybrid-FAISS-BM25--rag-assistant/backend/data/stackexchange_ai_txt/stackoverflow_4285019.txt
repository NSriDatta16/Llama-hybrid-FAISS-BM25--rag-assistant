[site]: stackoverflow
[post_id]: 4285019
[parent_id]: 4284944
[tags]: 
Instead of having unique method names, you should instead have the same method names, and leverage the type system to your advantage! For example: abstract class Operation { public abstract bool DoOperation(bool left, bool right); } class OrOperation { public override bool DoOperation(bool left, bool right) { return left || right; } } class DoOperationStuff { Dictionary mappedObjects = new Dictionary () { {"OR", new OrOperation()} }; public bool resultOfOperation(bool left, bool right, string operation) { if(mappedObjects.ContainsKey(operation)) { return mappedObjects[operation].DoOperation(left, right); } throw new ArgumentException("Something has gone very wrong."); } } This should be fairly explanitory, but: Abstract classes are classes that cannot be instantiated directly, but are intended to be inherited by other classes. Abstract (and virtual) methods are methods that are intended to be overridden in inherited classes. Because DoOperation is marked abstract, the program knows to look at the real type of the object in order to know what to call. So, even though the program has a bunch of Operation objects, each one is actually an OrOperation or whatever, and gets its respective method called.
