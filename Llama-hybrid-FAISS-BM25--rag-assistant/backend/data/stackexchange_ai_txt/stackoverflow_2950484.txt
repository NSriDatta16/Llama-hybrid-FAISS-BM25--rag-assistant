[site]: stackoverflow
[post_id]: 2950484
[parent_id]: 2950260
[tags]: 
However, using exception is forbidden in our coding standard (also in Google's C++ standard BTW). Is there an alternative design I can consider? Short answer is no . Long answer yes :). You can make all functions return an error code (similar to the implementation of Microsoft's COM platform. The main disadvantages of this approach are: you have to handle all exceptional cases explicitly your code size increases dramatically the code becomes more difficult to read. Instead of: initialize(); while (true) { Message msg,out; recieve(msg); process(msg,out); //no global state is saved between loop iterations! send(out); } you have: if( !succeedded( initialize() ) ) return SOME_ERROR; while (true) { Message msg,out; if( !succeeded( RetVal rv = recieve(msg) ) ) { SomeErrorHandler(rv); break; } if( !succeeded( RetVal rv = process(msg,out) ) ) { SomeErrorHandler(rv); break; } //no global state is saved between loop iterations! if( !succeeded( RetVal rv = send(out) ) ) { SomeErrorHandler(rv); break; } } furthermore, the implementation all your functions will have to do the same: surround each function call with an if . In the example above, you also have to decide if the rv value on each iteration constitutes an error for the current function and (eventually) return it directly from the while , or break the while on any error, and return the value. In short, except for possibly using RAII in your code and templates (are you allowed to use them?), you end up close to "C code, using the C++ compiler". Your code transforms each function from a two-liner into an eight-liner and so on. You can improve this with use of extra functions and #define d macros but macros have their own idiosyncrasies that you have to be really careful about. In short, your coding standards are making your code unnecessarily longer, more error prone, harder to understand and more difficult to maintain. This is a good case to present to whoever is in charge of the coding standards in your company :( Edit : You can also implement this with signals but they are a bad replacement for exceptions: they do the same thing as exceptions, only they also disable RAII completely and make your code even less elegant and more error prone.
