[site]: stackoverflow
[post_id]: 2761209
[parent_id]: 2301841
[tags]: 
Patterns of Enterprice Application Architecture covers this as well in its chapters on Single-table inheritance , Class-table inheritance , and Concrete-table inheritance . The coverage is similar to what Pascal has said. There's no One True Way, but the book does give you a good breakdown of costs and benefits, e.g. The strengths of Concrete Table Inheritance are: Each table is self-contained and has no irrelevant fields. As a result it makes good sense when used by other applications that aren't using the objects. There are no joins to do when reading the data from the concrete mappers. Each table is accessed only when that class is accessed, which can spread the access load. The weaknesses of Concrete Table Inheritance are: Primary keys can be difficult to handle. You can't enforce database relationships to abstract classes. If the fields on the domain classes are pushed up or down the hierarchy, you have to alter the table definitions. You don't have to do as much alteration as with Class Table Inheritance (285), but you can't ignore this as you can with Single Table Inheritance (278). If a superclass field changes, you need to change each table that has this field because the superclass fields are duplicated across the tables. A find on the superclass forces you to check all the tables, which leads to multiple database accesses (or a weird join).
