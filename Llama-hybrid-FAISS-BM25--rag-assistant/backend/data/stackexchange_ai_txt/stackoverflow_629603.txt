[site]: stackoverflow
[post_id]: 629603
[parent_id]: 559437
[tags]: 
A couple of suggestions after implementing something similar (a long time ago!): The following assumes that you are looping through all bots on the battlefield (not a particularly nice practice, but quick and easy to get something working!) 1) Its a lot easier to check if a bot is in range then if it can currently be seen within the FOV e.g. int range = Math.sqrt( Math.abs(my.Location.X - bots.Location.X)^2 + Math.abs(my.Location.Y - bots.Location.Y)^2 ); if (range This ensures that it can potentially short-cuircuit a lot of FOV checking and speed up the process of running the simulation. As a caveat, you could have some randomness here to make it more interesting, such that after a certain distance the chance to see is linearly proportional to the range of the bot. 2) This article seems to have the FOV calculation stuff on it. 3) As an AI graduate ... nave you tried Neural Networks, you could train them to recognise whether or not a robot is in range and a valid target. This would negate any horribly complex and convoluted maths! You could have a multi layer perceptron [1] , [2] feed in the bots co-ordinates and the targets cordinates and recieve a nice fire/no-fire decision at the end. WARNING: I feel obliged to tell you that this methodology is not the easiest to achieve and can be horribly frustrating when it goes wrong. Due to the (simle) non-deterministic nature of this form of algorithm, debugging can be a pain. Plus you will need some form of learning either Back Propogation (with training cases) or a Genetic Algorithm (another complex process to perfect)! Given the choice I would use Number 3, but its no for everyone!
