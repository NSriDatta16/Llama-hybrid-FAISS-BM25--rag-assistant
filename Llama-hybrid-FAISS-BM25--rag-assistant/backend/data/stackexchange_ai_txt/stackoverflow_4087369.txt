[site]: stackoverflow
[post_id]: 4087369
[parent_id]: 4087304
[tags]: 
The conditional operator (as with any other operator) has to define the type that its expression represents. In the case of the conditional operator, it has a two-step process: Are the operands of the same type? If so, that is the type of the expression. Is there an implicit conversion from one of the operand types to the other (but not in both directions)? If so, then the "other" is the type of the expression. There's no ancestry search, as implementing that could lead down a slippery slope of ambiguity in what you, as a developer, could specify in that expression. Should everything lead to object ? What about value types, which would then be implicitly boxed? What about interfaces? If there's more than one common interface between the two types, which one should be chosen? In your case, as you've discovered, you need to upcast one of the operands to the parent type. Once you do that, rule 2.) is satisfied (there is always an implicit conversion going from a more specific type to a less specific type). Note that you only need to apply the cast to one of the operands, not both.
