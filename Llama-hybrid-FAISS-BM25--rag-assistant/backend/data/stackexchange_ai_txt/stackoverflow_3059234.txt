[site]: stackoverflow
[post_id]: 3059234
[parent_id]: 3049110
[tags]: 
Eric's description of layered architecture is indeed somewhat confusing. As I understand him, he pointed that good application have some layers and these layers should be decoupled. The sole subject of layers is worth is own book and is not described further (beside the small fragment you've quoted) in the book. In fact DDD does not depend on layered architecture, but I bet all real-world implementations of DDD do use layers in architecture. A better (than Evans) explanation on architecting DDD-based solutions it the one from Jeffrey Palermo: the onion architecture . Palermo talks in details about responsibilities of each layer and about paths of communication. I personally use this approach with much success in my own projects. If you want to see how this can look in practice, take a look at DDDSample (if you are Java guy) or DDDSample.Net (the .NET port of DDDSample I've written)
