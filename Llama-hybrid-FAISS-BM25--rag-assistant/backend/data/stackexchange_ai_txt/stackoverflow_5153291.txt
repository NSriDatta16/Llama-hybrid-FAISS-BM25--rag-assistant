[site]: stackoverflow
[post_id]: 5153291
[parent_id]: 5089841
[tags]: 
The passwords are for a hardware device, so checking against hashes are out of the question Eh? I don't understand. Do you just mean that passwords must be recoverable? As others have said, the mcrypt extension provides access to lots of cryptographic functions - however you are inviting your users to put all their eggs in one basket - one which will be potentially be a target for attackers - and if you don't even know how to start solving the problem then you are doing your users a disservice. You are not in a position to understand how to protect the data. Most security vulnerabilities come about not because the underlying algorithm is flawed or insecure - but because of problems with the way the algorithm is used within the application code. Having said that, it is possible to build a reasonably secure system. You should only consider asymmetric encryption if you have a requirement for a user to create a secure message which is readable by another (specific) user. The reason being that itâ€™s computationally expensive. If you just want to provide a repository for users to enter and retrieve their own data, symmetric encryption is adequate. If, however, you store the key for decrypting the message in the same place as the encrypted message (or where the encrypted message is stored) then the system is not secure. Use the same token for authenticating the user as for the decryption key (or in the case of asymmetric encryption, use the token as the private key pass phrase). Since you will need to store the token on the server where the decryption takes place at least temporarily, you might want to consider using a non-searchable session storage substrate, or passing the token directly to a daemon associated with the session which would store the token in memory and perform the decryption of messages on demand.
