[site]: stackoverflow
[post_id]: 2606909
[parent_id]: 2606787
[tags]: 
Ask yourself this: Where else is the Version detail of the software available if not in the registry? If it is available somewhere else other than registry, ask us if you could get that detail using C++. I guess this would be a better approach to solve your issue. Added the information below since OP is looking for file version See if the below code could help you. CString GetFileVersionInfo(CString strFile, CString strProperty) { int rc; UINT nLen; DWORD nSize; DWORD dwHandle = 0; CString strBuffer; CString strValue; CString strBlock; void *lpPropertyBuffer; struct LANGANDCODEPAGE { WORD wLanguage; WORD wCodePage; } *lpTranslate; nSize = GetFileVersionInfoSize(strFile.GetBuffer(strFile.GetLength()), &dwHandle); ::GetFileVersionInfo(strFile.GetBuffer(strFile.GetLength()), 0, nSize, strBuffer.GetBuffer(nSize)); // Read the list of languages and code pages. if (VerQueryValue(strBuffer.GetBuffer(strBuffer.GetLength()), "\\VarFileInfo\\Translation", (LPVOID *) &lpTranslate, &nLen)) { strBlock.Format("\\StringFileInfo\\%04x%04x\\%s", lpTranslate->wLanguage, lpTranslate->wCodePage, strProperty); rc = VerQueryValue(strBuffer.GetBuffer(strBuffer.GetLength()), strBlock.GetBuffer(nSize), &lpPropertyBuffer, &nLen); if (rc != 0 && nLen > 0) { strncpy(strValue.GetBuffer(nLen + 1), (char *) lpPropertyBuffer, nLen); strValue.ReleaseBuffer(nLen); } } return strValue; } user version.lib while linking and you might need winver.h for compilation. You can call the function like this int _tmain(int argc, TCHAR* argv[], TCHAR* envp[]) { int nRetCode = 0; // initialize MFC and print and error on failure if (!AfxWinInit(::GetModuleHandle(NULL), NULL, ::GetCommandLine(), 0)) { // TODO: change error code to suit your needs cerr
