[site]: stackoverflow
[post_id]: 3339819
[parent_id]: 3339800
[tags]: 
IMHO, the best way would be to have a PartialView for each table and for the View to have a form view model that has each table object as a property FormViewModel Company company {get;set;} Contact contact {get;set;} address address {get;set;} You would return the above model to the view in the controller return View(FormViewModel); Then when you render each partial you pass in the appropriate model. Html.RenderPartial("ContactEntry", Model.contact); When you submit the form you then do a TryUpdateModel to grab the values and begin saving to your data layer. EDIT In response to Robert Sam, you'd also need to ensure that either fields are enabled / disabled as data is filled in. For example you can't have a contact w/out a company first. You could, if you got fired up enough, check for data as it's filled in. So as the user completes the form you activate fields w/out saving first. You can do this with jQuery and even client side validators that you can write in MVC.
