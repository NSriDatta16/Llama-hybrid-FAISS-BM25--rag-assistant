[site]: stackoverflow
[post_id]: 5304385
[parent_id]: 4820095
[tags]: 
Instead of using the built-in D+D functionality and trying to override its behavior with PInvoke and other events you could instead create your own drag and drop system based on mouse down and up events in a away that will retain the form's mouse-wheel scrolling capabilities. Here is a very simple example from a test form that contains a label, which is the mock drag source ("activates" drag on mouse down), and a list box populated with arbitrary items, which is the mouse wheel scrollable drop destination. If you run a sample like this you'll notice that changing the cursor in the mouse down event on the label, dragging it over the list box and then scrolling with the mouse wheel will behave as expected. The list box will scroll. using System; using System.Windows.Forms; public partial class Form1 : Form { public Form1() { InitializeComponent(); } private void Form1_Load(object sender, EventArgs e) { for (int i=0; i Of course you have to wire up your own logic for dropping items (such as a mouse up handler to define the drop process) and you probably don't want to use the SizeAll cursor but something that is more indicative of dragging and dropping. This sample is just to show that managing your own D+D may be simpler than trying to override an API blackbox.
