[site]: stackoverflow
[post_id]: 3484379
[parent_id]: 3484185
[tags]: 
You're missing the prolog. Add this to beginning of your XML: By the way, you don't need the SAX parser here. You aren't modifying the XML at all. Get rid of the parser and just write xml directly to the response. You are also not handling JDBC resources correctly in try -with-resources . Here's a basic example of the improvement: response.setContentType("text/xml;charset=UTF-8"); PrintWriter writer = response.getWriter(); writer.append(" "); writer.append(" "); try ( Connection connection = dataSource.getConnection(); Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery("SELECT sale_id, home_id, agent_id, customer_id FROM sale"); ) { if (resultSet.next()) { writer.append(" "); writer.append(" ").append(resultSet.getString("sale_id")).append(" "); writer.append(" ").append(resultSet.getString("home_id")).append(" "); writer.append(" ").append(resultSet.getString("agent_id")).append(" "); writer.append(" "); } } catch (SQLException e) { throw new ServletException(e); } writer.append(" "); To write all records, just replace if (resultSet.next()) by while (resultSet.next()) . To handle the exception more gracefully, i.e. throwing an ServletException which ends in an error page instead of a halfbaked XML, you'd like to build the XML using StringBuilder . Just replace PrintWriter by new StringBuilder() and then at end, do response.getWriter().write(builder.toString()) .
