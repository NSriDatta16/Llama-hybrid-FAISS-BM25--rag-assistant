[site]: stackoverflow
[post_id]: 4846539
[parent_id]: 4846468
[tags]: 
A worthy point on a modern architecture: A Hash table will usually, if its load factor is low, have fewer memory reads than a binary tree will. Since memory access tend to be rather costly compared to burning CPU cycles, the Hash table is often faster. In the following Binary tree is assumed to be self-balancing, like a red black tree, an AVL tree or like a treap . On the other hand, if you need to rehash everything in the hash table when you decide to extend it, this may be a costly operation which occur (amortized). Binary trees does not have this limitation. Binary trees are easier to implement in purely functional languages. Binary trees have a natural sort order and a natural way to walk the tree for all elements. When the load factor in the hash table is low, you may be wasting a lot of memory space, but with two pointers, binary trees tend to take up more space. Hash tables are nearly O(1) (depending on how you handle the load factor) vs. Bin trees O(lg n). Trees tend to be the "average performer". There are nothing they do particularly well, but then nothing they do particularly bad.
