[site]: stackoverflow
[post_id]: 4240565
[parent_id]: 4237021
[tags]: 
I believe that binaries should not be stored along with their source code in version control. Disadvantages: it encourages bad build practices in large projects. The best practice is to fully automate your full build (not just source compilation, but also running automated tests, the packaging of documentation, generation of a setup etcetera). Committing binaries enables you to ignore that: "just manually do the build for the parts that have changed". slower updates and commits need to deal with conflicts on binary files each time you update after doing a build commits which change source code but not the corresponding binaries will cause confusion among developers. How do you detect that there is a mismatch? svn update will update the timestamp of your binaries, confusing your build tools which will erroneously think the binaries are newer than your source code changes. it uses more disk space in the repository. (This may be negligible depending on your project.) In general, I think you should avoid committing anything that is generated automatically in a deterministic way from other versioned resources. No redundancy -> no opportunity for inconsistencies. Instead, use a continuous integration server to automatically rebuild (and run the tests) on each commit. Let this build server publish the binaries somewhere (outside SVN) if necessary, like a shared folder on the network.
