[site]: datascience
[post_id]: 25908
[parent_id]: 
[tags]: 
Keras dense layer input shape mismatch

I try to construct the following neural network: img_rows = 63 img_cols= 494 img_channels = 1 nb_classes = 12 nb_positions = 13 conv_filters = 16 kernel_size = (3, 3) pool_size = 2 time_dense_size = 32 rnn_size = 512 minibatch_size = 32 act = 'relu' input_shape = (img_channels, img_rows, img_cols) input_data = Input(name='the_input', shape=input_shape, dtype='float32') inner = Conv2D(conv_filters, kernel_size, padding='same', activation=act, kernel_initializer='he_normal', name='conv1', data_format="channels_first")(input_data) inner = MaxPooling2D(pool_size=(pool_size, pool_size), name='max1', data_format="channels_first")(inner) inner = Conv2D(conv_filters, kernel_size, padding='same', activation=act, kernel_initializer='he_normal', name='conv2', data_format="channels_first")(inner) inner = MaxPooling2D(pool_size=(pool_size, pool_size), name='max2', data_format="channels_first")(inner) #"inner" shape here: TensorShape([Dimension(None), Dimension(16),Dimension(15), Dimension(123)]) conv_to_rnn_dims = (img_rows // (pool_size ** 2), (img_cols // (pool_size ** 2)) * conv_filters) inner = Reshape(target_shape=conv_to_rnn_dims, name='reshape')(inner) inner = Dense(time_dense_size, activation=act, name='dense1')(inner) gru_1 = GRU(rnn_size, return_sequences=True, kernel_initializer='he_normal', name='gru1')(inner) gru_1b = GRU(rnn_size, return_sequences=True, go_backwards=True, kernel_initializer='he_normal', name='gru1_b')(inner) gru1_merged = add([gru_1, gru_1b]) gru_2 = GRU(rnn_size, return_sequences=True, kernel_initializer='he_normal', name='gru2')(gru1_merged) gru_2b = GRU(rnn_size, return_sequences=True, go_backwards=True, kernel_initializer='he_normal', name='gru2_b')(gru1_merged) inner = Dense(nb_classes+1, kernel_initializer='he_normal', name='dense2')(concatenate([gru_2, gru_2b])) y_pred = Activation('softmax', name='softmax')(inner) However, in case of the two Dense layers I got error messages like this: Dimensions must be equal, but are 15 and 32 for 'dense1_12/add' (op: 'Add') with input shapes: [?,15,32], [1,32,1]. I cannot interpret this message; isn't Dense layers' node numbers are independent of the previous layers and free to define? What is not passing here? Addition: the whole error message is: ValueError Traceback (most recent call last) in () ----> 1 inner = Dense(time_dense_size, activation=act, name='dense1')(inner) /home/dsshow/anaconda2/lib/python2.7/site-packages/keras/engine/topology.pyc in __call__(self, inputs, **kwargs) 601 602 # Actually call the layer, collecting output(s), mask(s), and shape(s). --> 603 output = self.call(inputs, **kwargs) 604 output_mask = self.compute_mask(inputs, previous_mask) 605 /home/dsshow/anaconda2/lib/python2.7/site-packages/keras/layers/core.pyc in call(self, inputs) 843 output = K.dot(inputs, self.kernel) 844 if self.use_bias: --> 845 output = K.bias_add(output, self.bias) 846 if self.activation is not None: 847 output = self.activation(output) /home/dsshow/anaconda2/lib/python2.7/site-packages/keras/backend/tensorflow_backend.pyc in bias_add(x, bias, data_format) 3578 if data_format == 'channels_first': 3579 if len(bias_shape) == 1: -> 3580 x += reshape(bias, (1, bias_shape[0], 1)) 3581 else: 3582 x += reshape(bias, (1, bias_shape[1], bias_shape[0])) /home/dsshow/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/math_ops.pyc in binary_op_wrapper(x, y) 819 if not isinstance(y, sparse_tensor.SparseTensor): 820 y = ops.convert_to_tensor(y, dtype=x.dtype.base_dtype, name="y") --> 821 return func(x, y, name=name) 822 823 def binary_op_wrapper_sparse(sp_x, y): /home/dsshow/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/gen_math_ops.pyc in add(x, y, name) 71 A `Tensor`. Has the same type as `x`. 72 """ ---> 73 result = _op_def_lib.apply_op("Add", x=x, y=y, name=name) 74 return result 75 /home/dsshow/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords) 766 op = g.create_op(op_type_name, inputs, output_types, name=scope, 767 input_types=input_types, attrs=attr_protos, --> 768 op_def=op_def) 769 if output_structure: 770 outputs = op.outputs /home/dsshow/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in create_op(self, op_type, inputs, dtypes, input_types, name, attrs, op_def, compute_shapes, compute_device) 2336 original_op=self._default_original_op, op_def=op_def) 2337 if compute_shapes: -> 2338 set_shapes_for_outputs(ret) 2339 self._add_op(ret) 2340 self._record_op_seen_by_control_dependencies(ret) /home/dsshow/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in set_shapes_for_outputs(op) 1717 shape_func = _call_cpp_shape_fn_and_require_op 1718 -> 1719 shapes = shape_func(op) 1720 if shapes is None: 1721 raise RuntimeError( /home/dsshow/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in call_with_requiring(op) 1667 1668 def call_with_requiring(op): -> 1669 return call_cpp_shape_fn(op, require_shape_fn=True) 1670 1671 _call_cpp_shape_fn_and_require_op = call_with_requiring /home/dsshow/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/common_shapes.pyc in call_cpp_shape_fn(op, input_tensors_needed, input_tensors_as_shapes_needed, debug_python_shape_fn, require_shape_fn) 608 res = _call_cpp_shape_fn_impl(op, input_tensors_needed, 609 input_tensors_as_shapes_needed, --> 610 debug_python_shape_fn, require_shape_fn) 611 if not isinstance(res, dict): 612 # Handles the case where _call_cpp_shape_fn_impl calls unknown_shape(op). /home/dsshow/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/common_shapes.pyc in _call_cpp_shape_fn_impl(op, input_tensors_needed, input_tensors_as_shapes_needed, debug_python_shape_fn, require_shape_fn) 674 missing_shape_fn = True 675 else: --> 676 raise ValueError(err.message) 677 678 if missing_shape_fn: ValueError: Dimensions must be equal, but are 15 and 32 for 'dense1_17/add' (op: 'Add') with input shapes: [?,15,32], [1,32,1].
