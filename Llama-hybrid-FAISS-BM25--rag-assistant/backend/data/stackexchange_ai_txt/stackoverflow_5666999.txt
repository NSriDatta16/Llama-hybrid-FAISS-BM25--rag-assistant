[site]: stackoverflow
[post_id]: 5666999
[parent_id]: 5666549
[tags]: 
If you use the data for binding, there shouldn't be a problem storing the converted values into the row: list.Add(new Row() { Column1 = int.Parse(strCols[0]), ... Whatever UI stuff you put on top, it will call ToSTring() on it anyway and display the thing as string. Consequently, your row object has 6 ints. On a minor note, in C# you can denote a char with single quotes, the split then becomes : str.Split(' ') For more elegance, you can have the line interpretation inside your Row object by passing a single line of the file into the constructor and performing the split in the constructor. Then you can make the setters on row private. The foreach loop then becomes: dg.ItemsSource = File.ReadLines(filename).Select(line => new Row(line)).ToList();
