[site]: stackoverflow
[post_id]: 5736117
[parent_id]: 5736105
[tags]: 
Not recommended. If you need a globally accessible variable or property, that's more suited to a base class that your classes inherit from. This link gives an example of a controller base class. EDIT: Based off your edit, it's tough to recommend something specific because how those settings are used can drive your approach. Here's some general tips: I'd split out your settings into a series of base classes that are distinct in their area of concern. So settings regarding FunctionalityX lives within the class dealing with FunctionalityX. I'd leverage your web.config. I'm sure you're already doing this, but just make sure that you're not duplicating configuration efforts. The Web.Config is the right place for most of it and you can add more. Classes already exist for pulling configuration information out of the web config. Alright, with that having been said, barring those two paths: I'd set your class to static so you can just reference your class from anywhere without instantiation like this: ApplicationSettings.SettingValue . I'd have explicit settings properties on your ApplicationSettings class and reference them directly that way. If they aren't instantiated, you can lazy load them from the XML as they are needed. I'd cache your settings if they aren't dynamic. So there's some general tips that might yield a better solution. It's hard to recommend something concrete without further information on how it'll be used. FINAL EDIT: After some discussion in the comments below, we found that this resource here fixed the OP's issue: http://haacked.com/archive/2007/03/12/custom-configuration-sections-in-3-easy-steps.aspx
