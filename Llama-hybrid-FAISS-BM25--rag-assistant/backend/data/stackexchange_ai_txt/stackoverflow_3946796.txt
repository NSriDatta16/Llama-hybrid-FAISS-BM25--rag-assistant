[site]: stackoverflow
[post_id]: 3946796
[parent_id]: 3946752
[tags]: 
There's the willAnimateRotationToInterfaceOrientation:duration: method, from the docs: The default implementation of this method does nothing. If you override this method, you should not override either the willAnimateFirstHalfOfRotationToInterfaceOrientation:duration: or willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration: method. This method is called from within the animation block that is used to rotate the view. You can override this method and use it to configure additional animations that should occur during the view rotation. For example, you could use it to adjust the zoom level of your content, change the scroller position, or modify other animatable properties of your view. I guess you can modify it from here, and before and after with – willRotateToInterfaceOrientation:duration: and – didRotateFromInterfaceOrientation: . This seems inefficient and sub-par to me, as it does not actually replace the transition at all. I would make a category on UIView, that includes methods such as - willRotateUsingTransition: and pass a parameter that will tell it to fade, then set the view's alpha to zero. In each subclass override this to include any subviews that need their alpha changed, if that is applicable. Call this method when the views are about to be rotated (with the methods above) and then a clean-up method that restore the alphas when they will appear again. Edit: Docs Docs Docs. A quick look, again, reveals this method: - (void)willAnimateSecondHalfOfRotationFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation duration:(NSTimeInterval)duration , which I thought to be deprecated. As part of the discussion it has the text from the second paragraph I posted from the docs earlier.
