[site]: stackoverflow
[post_id]: 1596205
[parent_id]: 1596020
[tags]: 
Ok, I have three approaches for you: 1) Queues In your AJAX Handler, write the simplest method possible (use a Rack Middleware or Rails Metal) to push the query params to a queue. Then, poll the queue and gather the messages. Queue pushes from a rack middleware are blindingly fast. We use this on a very high traffic site for logging of similar data. An example rack middleware is below (extracted from our app, can handle request in class TrackingMiddleware CACHE_BUSTER = {"Cache-Control" => "no-cache, no-store, max-age=0, must-revalidate", "Pragma" => "no-cache", "Expires" => "Fri, 29 Aug 1997 02:14:00 EST"} IMAGE_RESPONSE_HEADERS = CACHE_BUSTER.merge("Content-Type" => "image/gif").freeze IMAGE_RESPONSE_BODY = [File.open(Rails.root + "public/images/tracker.gif").read].freeze def initialize(app) @app = app end def call(env) if env["PATH_INFO"] =~ %r{^/track.gif} request = Rack::Request.new(env) YOUR_QUEUE.push([Time.now, request.GET.symbolize_keys]) [200, IMAGE_RESPONSE_BODY, IMAGE_RESPONSE_HEADERS] else @app.call(env) end end end For the queue I'd recommend starling , I've had nothing but good times with it. On the parsing end, I would use the super-poller toolkit , but I would say that, I wrote it. 2) Logs Pass all the params along as query params to a static file (/1x1.gif?foo=1&bar=2&baz=3). This will not hit the rails stack and will be blindingly fast. When you need the data, just parse the log files! This is the best scaling home brew approach. 3) Google Analytics Why handle the load when google will do it for you? You would be surprised at how good google analytics is, before you home brew anything, check it out! This will scale infinitely, because google buys servers faster than you do. I could rant on this for ages, but I have to go now. Hope this helps!
