[site]: stackoverflow
[post_id]: 4219562
[parent_id]: 178976
[tags]: 
I would put your effort into making sure it cannot happen in the first place or minimizing the chances that it can. For example from jonSkeet's post. If you expect a not-null condition for a column is there a constraint on that column? If no, you probably expect it because the DBA/DB developer told you it will be that way. I would tell them that you'll be relying on that fact and encourage, prod, cajole them into adding the not null constraint. If you're expect unique values, then ask for a unique constraint. Only uppercase characters, add a check constraint. There's little sense in your code checking for all uppercase and then the next app and the next app and the next app when it can be done once. Remember DRY -- Don't Repeat Yourself. For the missing column error, my proactive approach is to make sure that there's an understanding by the db development team as to which tables and views and procedures are used by applications. Each application should have it's own username, each app's username should be granted select on only the tables it needs - not as a security feature but as documentation. If you change THIS table, it's used by these apps. Same with procs, grant execute to the apps which use it. If you keep this tight, and inculcate a "check for external dependencies when making changes" attitude, you'll head a lot of those errors off.
