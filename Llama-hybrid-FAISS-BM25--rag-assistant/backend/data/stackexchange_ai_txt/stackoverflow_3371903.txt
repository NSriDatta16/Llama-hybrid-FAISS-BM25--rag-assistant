[site]: stackoverflow
[post_id]: 3371903
[parent_id]: 3371090
[tags]: 
Since you are searching for the best design approach, why not follow the advice of C++ FAQ Lite and make your array dense (rather than ragged). You're not expecting to have to handle rows of different size, are you? #include #include #include template class TwoDArray { std::vector data; const size_t cols; public: TwoDArray(size_t R, size_t C) : data(R*C), cols(C) {} T operator()(size_t r, size_t c) const { return data[cols*r+c]; } T& operator()(size_t r, size_t c) { return data[cols*r+c]; } }; int main() { // Make it const size_t numRows = 10; const size_t numCols = 10; TwoDArray Arr2D(numRows, numCols); // Fill in test data std::random_device rd; std::mt19937 eng(rd()); std::uniform_int_distribution<> unif(0,9); for (size_t i=0; i Or you could even make size part of type, just like std::array .
