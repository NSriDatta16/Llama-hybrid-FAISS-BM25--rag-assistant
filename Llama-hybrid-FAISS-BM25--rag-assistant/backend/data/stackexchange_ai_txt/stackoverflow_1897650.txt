[site]: stackoverflow
[post_id]: 1897650
[parent_id]: 1894839
[tags]: 
I am going to try the below: by putting the iterator in a function I can use it repeatedly for known folders to be included in order to build the result array. Still I hope one day I will find a solution that will more elegantly use the PHP iterators without a function nested in my method. $filelist = array(); $filelist[$this->_jrootpath.DS.'index.php'] = date("d-m-Y H:i:s",filemtime($this->_jrootpath.DS.'index.php')); $filelist[$this->_jrootpath.DS.'index2.php'] = date("d-m-Y H:i:s",filemtime($this->_jrootpath.DS.'index2.php')); $joomlafolders = array( $this->_jrootpath.DS.'administrator', $this->_jrootpath.DS.'cache', $this->_jrootpath.DS.'components', $this->_jrootpath.DS.'images', $this->_jrootpath.DS.'includes', $this->_jrootpath.DS.'language', $this->_jrootpath.DS.'libraries', $this->_jrootpath.DS.'logs', $this->_jrootpath.DS.'media', $this->_jrootpath.DS.'modules', $this->_jrootpath.DS.'plugins', $this->_jrootpath.DS.'templates', $this->_jrootpath.DS.'tmp', $this->_jrootpath.DS.'xmlrpc' ); foreach ( $joomlafolders as $folder ) { $iterator = new RecursiveDirectoryIterator( $folder ); foreach(new RecursiveIteratorIterator($iterator) as $file) { if ( !$file->isDir() ) { if ( preg_match( "/.(html|htm|php)$/", $file->getFilename() ) ) { $filelist[$file->getPathname()] = $file->getMTime(); } } } } arsort($filelist); foreach ($filelist as $key => $val) { $resultoutput .= ' '.$key.' '.date("d-m-Y H:i:s",$val).' '; }
