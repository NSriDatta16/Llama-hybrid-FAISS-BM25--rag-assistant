[site]: stackoverflow
[post_id]: 4467064
[parent_id]: 4467038
[tags]: 
It may be bad form, depending on the "bigger picture" of the applications using the header. By putting implementation into the header you're requiring modifications to the header when that implementation changes... such modifications trigger/require client object recompilation with many build systems (e.g. make ). By way of contrast, out-of-line changes may require relinking, and when shared libraries are used those libraries may be able to be replaced without any changes to the client apps. Consequently, when there's no particular reason to use inlining, low-level headers shared by many applications tend to prefer out of line implementation. This is particularly true when the implementation can be expected to need changes. Another reason some people prefer separating implementation is to avoid confusing people reading the API as a form of documentation. When there's less to read it's generally clearer, although sometimes the implementation helps in understanding the functionality. But, programmers who see the implementation tend to think about the behavioural/performance implications and build client code that depends on that, even if the interface doesn't make as strict guarantees: this makes the client code fragile should the implementation change.
