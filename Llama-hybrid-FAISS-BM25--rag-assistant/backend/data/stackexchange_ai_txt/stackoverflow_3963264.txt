[site]: stackoverflow
[post_id]: 3963264
[parent_id]: 3962177
[tags]: 
Obviously some of these are 3rd party, and dealing with them by sequestering them in /apps (or even in subdirectories of that, if there are very many) is a good solution for keeping your directory structure sane, as lazerscience points out. As for your own apps, this is a great question that comes up in #django twice a day or so, and I'd love to see a synthesis of the range of viewpoints. When I am deciding whether or not to make a separate app, I generally ask myself: Will this new app have models that are a completely different type of knowledge than the apps that came before it? If one app is about people (say, authors) and another is about material possessions (say, books) - it makes sense to separate them. Does 'chapter' need its own app? Clearly not. I know other developers who focus more on the views that an app has - they ask themselves, "how many top-level terms will I have in my dispatcher?" and go from there. I think this is also a good approach in many cases, but for many projects, some 90% of the models and views will be primarily or exclusively associated with 10% of the top-level URL terms. As a general matter, having a boatload of apps isn't bad per se. It only becomes bad when it becomes an organizational problem for your group.
