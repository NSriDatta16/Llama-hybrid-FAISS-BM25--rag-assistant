[site]: stackoverflow
[post_id]: 3432305
[parent_id]: 3432253
[tags]: 
Since you're doing LINQ to SQL you can... Define the blogs and comments tables on your database with the appropriate foreign key relationship. Drag and drop both onto your dbml designer surface. Click the save button; that's when the code is generated. When you populate your viewmodel (or however you're getting your data back to the result of a controller action) only query the information you need at the time. For a single view of a blog entry with associated comments ithe LINQ query might look like so... YourDataContext dataContext = new YourDataContext(); var blogData = (from b in dataContext.Blogs where b.BlogId == 1 select b).SingleOrDefault(); // you should now have a single blog instance with a property named Comments. Set the // fetch mode to eager if you plan to always show the comments; leave it lazy to only do // the lookup if necessary. Execute all of your queries/accesses before you pass // data to the view
