[site]: stackoverflow
[post_id]: 3018523
[parent_id]: 3017176
[tags]: 
It's a trivial code but i think it is short and pretty in Python, so here is how i'd write it: ip = '192.168.1.2' lookFor = ip + '\n' f = open('ips.txt', 'a+') for line in f: if line == lookFor: print 'found', ip, 'before.' break else: print ip, 'not found, adding to file.' print >>f, ip f.close() It opens the file in append mode, reads and if not found (that's what else to a for does - executes if the loop exited normally and not via break) - appends the new IP. ta-da! Now will be ineffective when you have a lot of IPs. Here is another hack i thought of, it uses 1 file per 1 IP as a flag: import os ip = '192.168.1.2' fname = ip + '.ip' if os.access(fname, os.F_OK): print 'found', ip, 'before.' else: print ip, 'not found, registering.' open(fname, 'w').close() Why is this fast? Because most file systems these days (except FAT on Windows but NTFS is ok) organize the list of files in a directory into a B-tree structure, so checking for a file existence is a fast operation O(log N) instead of enumerating whole list. (I am not saying this is practical - depends on amount of IPs you expect to see and your sysadmin benevolence.)
