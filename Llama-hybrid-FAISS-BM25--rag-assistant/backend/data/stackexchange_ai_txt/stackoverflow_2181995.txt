[site]: stackoverflow
[post_id]: 2181995
[parent_id]: 2173238
[tags]: 
Here's some quite (IMHO quite elegant) code that runs in O(n). If word 1 has N occurrences of the letter x, it removes the first N x's from word 2 (and vice versa) -- I think this is what you want, but I could be wrong. from collections import defaultdict def build(s, chars_s, chars_t): """Return characters of s, with duplicate characters from t removed.""" for i, char in enumerate(s): indexes_s, indexes_t = chars_s[char], chars_t[char] if len(indexes_s) > len(indexes_t) and i >= indexes_s[len(indexes_t)]: yield char def rm_dup(a, b): """Pairwise remove duplicate letters in a and b.""" chars_a, chars_b = defaultdict(list), defaultdict(list) for i, char in enumerate(a): chars_a[char].append(i) for i, char in enumerate(b): chars_b[char].append(i) return (''.join(build(a, chars_a, chars_b)), ''.join(build(b, chars_b, chars_a))) print rm_dup('naveen', 'darshana')
