[site]: stackoverflow
[post_id]: 3114946
[parent_id]: 3108204
[tags]: 
SQL Stored Procedures and LINQ-SQL are not mutually exclusive. Generally for complex, greedy and resource-intenstive operations you still use SQL Stored Procedures (for example, an INSERT operation that relies on complex sub queries/db logic) and drag them onto the LINQ-SQL canvas. In terms of patching - you can certainly then patch these Stored Procedures directly in SQL Server, and the LINQ-SQL classes dont need to be recompiled - as long as the signature doesnt change (params/return type). In terms of updating version numbers from certain assemblies - not ideal. Gets very messy, may even cause problems (strong naming). You should put all your DB logic/LINQ/CRUD operations in one assembly (DAL). If you really want to isolate the LINQ logic and enable independant deployment of these assemblies - maybe you should consider partitioning your solution into web/app servers? I.e have your LINQ DAL Assembly and facade-like Assembly which exposes these operations on an application server, then your website on a seperate web server. Depending on your architecture, you could then use either ASMX/WCF/.NET Remoting to faciliate calls between your web/app servers. (WCF doesnt work cross-domain). Having said that, if you have your LINQ-SQL classes done right (good mix of simple LINQ CRUD operations, views, stored procedures), as mentioned you are still able to easily patch the stored procedures without affecting your application.
