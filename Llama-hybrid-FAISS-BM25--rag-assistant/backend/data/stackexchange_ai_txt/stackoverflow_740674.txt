[site]: stackoverflow
[post_id]: 740674
[parent_id]: 740030
[tags]: 
This is mostly implementation specific. The idea is to minimize allocation requests and memory fragmentation. It's easy to prove that by doubling the existing size every time the block is expanded, both allocation count and memory fragmentation are minimized. Therefore typically STL container implementations will double the existing block when expanding. One thing you can do is use a custom allocator that will not allocate more than necessary, next, construct your std::string objects when you no longer need to manipulate them (or when done manipulating, just swap into a new std::sting object - this is basically what others have done in their answers) and finally, you can use a pooled memory allocator to minimize memory fragmentation, wasted slack and improve performance. See: http://www.codeguru.com/cpp/cpp/cpp_mfc/stl/article.php/c4079 http://www.sjbrown.co.uk/2004/05/01/pooled-allocators-for-the-stl/ http://www.codeproject.com/KB/stl/blockallocator.aspx Search for "STL Allocator" and "Memory Pool"
