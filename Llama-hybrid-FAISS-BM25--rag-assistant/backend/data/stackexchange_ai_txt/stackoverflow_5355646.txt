[site]: stackoverflow
[post_id]: 5355646
[parent_id]: 
[tags]: 
Asp.net Mvc, Razor and Localization

I know this matter has already been brought on these pages many times, but still I haven't found the "good solution" I am required to find. Let's start the explanation. Localization in .net, and in mvc, is made in 2 ways that can even be mixed together: Resource files (both local or global) Localized views with a viewengine to call the appropriate view based on culture I'll explain the solutions I tried and all the problems I got with every one of them. Text in resource files, all tags in the view This solution would have me put every text in resources, and every tag in the view, even the inline tags such as [strong] or [span]. Pros: Clean separation, no structure whatsoever in localization. Easy encoding: everything that is returned from the resource gets html encoded. Cons: If I have a paragraph with some strongs, a couple of link etc I have to split it in many resource keys. This is considered to make the view too unreadable and also takes too much time to create it. For the same reason as above, if in two different languages the [strong] text is in different places (like "Il cane di Marco" and "Marcos's dog "), I can't achieve it, since all my tags are in the view. Text and inline tags in resource files, through parameters This method will have the resources contain some placeholders for string.Format, and those placeholders will be filled with inline tags post-encoding. Pros: Clean separation, with just placeholders in the text, so if I am ever to replace [strong] with [em] I do it in the view where I pass it as parameter and it gets changed in every language Cons: Encoding is a bit harder, I have to pre-encode the value from the resource, then use string.Format, and finally return it as MvcHtmlString to tell the view engine to not re-encode it when displaying. For the same reason as above, including, for instance, an ActionLink as parameter would be troublesome. Let's say I get the text for my actionlink from a resource. My method already encodes it. But then, the ActionLink method would re-encode it again. I would need a distinct method to get resources without encoding them, or new helper methods that get an MvcHtmlString instead of a string as text parameter, but both are rather unpractical. Still takes a whole lot of time to build views, having to create all the resource keys and then fill them. Localized views Pros: All views are plain html. No resources to read. Cons: Duplicated html everywhere. I don't even need to explain how this is totally evil. Have to manually encode all troublesome characters like grave vowels, quotes and such. Conclusions A mix of the above techinques inherits pros and cons, but it's still no good. I am challenged to find a proper productive solution, while all of the above are considered "unpractical" and "time consuming". To make things worse, I found out that there isn't a single tool that refactors "text" from aspx or cshtml (or even html) views/pages into resources. All the tools out there can refactor System.String instances in code files (.cs or .vb) into resources only (resharper for instance, and a couple of others I can't remember now). So I'm stuck, can't find anything appropriate on my own, and can't find anything on the web either. Is it possible noone else got challenged with this problem before and found a solution?
