[site]: stackoverflow
[post_id]: 4681231
[parent_id]: 
[tags]: 
Android: Widget Config Activity Getting Launched Twice?

I have an Android widget that has a configure activity. I also have an ImageView "button" set up on the widget to launch the configure activity, in case the user wants to change his/her preferences after initializing them. So, basic lifecycle: User adds the widget Configure activity pops up, user fills in fields and clicks "Submit" Widget is added on screen User taps the ImageView to launch the configure activity Configure activity pops up, user edits fields After either hitting "Submit" or backing out, the widget is updated User can continue to go through steps 5 and 6 as needed. My problem is at step 5. The very first and only the first time that the user taps the ImageView, it looks like two configure activities are launched. That is, when I back out of the first one, there's still another one "behind" it. On all subsequent launches of the configure activity, however, only one is launched and everything works great. What could be the problem? I'll post relevant code below. AndroidManifest.xml AppWidget-Provider widget.xml ConfigActivity.java @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); // Get the data we were launched with Intent launchIntent = getIntent(); Bundle extras = launchIntent.getExtras(); if (extras != null) { appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID); Intent cancelResultValue = new Intent(); cancelResultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId); setResult(RESULT_CANCELED, cancelResultValue); } else { // Only launch if it's for configuration finish(); } setContentView(R.layout.myconfig); // Create Buttons/EditTexts SubmitBTN = (Button) findViewById(R.id.BTNSubmit); SampleET= (EditText) findViewById(R.id.ETSample); SubmitBTN.setOnClickListener(submitListener); loadPreferences(ConfigActivity.this, appWidgetId); } private OnClickListener submitListener = new OnClickListener() { public void onClick(View v) { final Context context = PriorityViewConfig.this; // Save strings in our prefs String sample = SampleET.getText().toString(); SharedPreferences.Editor prefs = context.getSharedPreferences(PREFS_NAME, 0).edit(); prefs.putString(PREF_PREFIX_KEY + appWidgetId + "sample", sample); prefs.commit(); if (appWidgetId != AppWidgetManager.INVALID_APPWIDGET_ID) { // Tell the AppWidgetManager that we're now configured Intent resultValue = new Intent(); //resultValue.setAction(AppWidgetManager.ACTION_APPWIDGET_UPDATE); resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId); setResult(RESULT_OK, resultValue); // Get an instance of the AppWidgetManager AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context); // Update the App Widget with the layout RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widgetlayout); Widget.updateDisplayState(context, appWidgetId); } // Activity is now done finish(); } }; private void loadPreferences(Context context, int appWidgetId) { SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, 0); String sample = prefs.getString(PREF_PREFIX_KEY + appWidgetId + "sample", null); if (sample != null) { SampleET.setText(sample); } else { // Nothing stored, don't need to do anything } } Widget.java @Override public void onReceive(Context context, Intent intent) { final String action = intent.getAction(); Log.d(LOG_TAG, "OnReceive:Action: " + action); if (ACTION_WIDGET_CONTROL.equals(action)) { // Pass this on to the action handler where we'll figure out what to do and update the widget final int appWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID); if (appWidgetId != AppWidgetManager.INVALID_APPWIDGET_ID) { this.onHandleAction(context, appWidgetId, intent.getData()); } } super.onReceive(context, intent); } public static void updateDisplayState(Context context, int appWidgetId) { Intent configIntent = new Intent(context, ConfigActivity.class); configIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId); // Make this unique for this appWidgetId configIntent.setData(Uri.withAppendedPath(Uri.parse(Widget.URI_SCHEME + "://widget/id/"), String.valueOf(appWidgetId))); PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, configIntent, PendingIntent.FLAG_UPDATE_CURRENT); views.setOnClickPendingIntent(R.id.IVConfig, pendingIntent); AppWidgetManager.getInstance(context).updateAppWidget(appWidgetId, views); } private void onHandleAction(Context context, int appWidgetId, Uri data) { String controlType = data.getFragment(); // Nothing here yet updateDisplayState(context, appWidgetId); } I think these are the most relevant sections. The places I'm going to be looking further into are in ConfigActivity.java in the submitListener and in the updateDisplayState method in Widget.java Any help would be awesome! Thanks!
