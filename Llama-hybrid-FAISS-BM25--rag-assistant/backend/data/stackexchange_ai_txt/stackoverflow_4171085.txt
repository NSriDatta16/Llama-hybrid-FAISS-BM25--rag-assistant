[site]: stackoverflow
[post_id]: 4171085
[parent_id]: 4150596
[tags]: 
sha1($user_salt . $password) This is very common , but it isn't good. A typical end user password is ~8 characters long, and mostly keeps to the 7-bit ASCII character set. So a typical password is about 64 bit of random data or less. Modern parallel brute-force attacks can defeat this, by simply trying out all possible passwords. Using a SHA256 or SHA512 instead does not materially change the outcome because the end users password is the limiting factor. From my reading here at Stack Overflow, there seems to be 2 schools of thought regarding password storage: You should use a computationally expensive approach like BCrypt or scrypt . That way brute force attacks become infeasible. This works, at the expense of requiring much more CPU power from your server when a user logs in. See this excellent article for an overview of the rationale . The second school of thought is that while BCrypt and scrypt certainly work, they are undesirable for multiuser apps because they take too much CPU time -- making the end user wait, or potentially opening up for a denial-of-service attack by sending lots of authentication requests. See the lengthy discussion here (be sure to read the comments as well). At the moment, I have an encrypted cookie, that looks up a session in a DB. In this session, there is an user_id and an user_token. I then query the DB using the user_id -- if the sha1 of the user_id+hash in DB === user_token, then the user is allowed through. One main point of secure session handling that you're not mentioning is SSL everywhere to guard against Sidejack . And User IDs are generally not good for security, because they are often guessable (auto-incrementing primary key) or they end up in URLs etc by mistake. Instead of rolling your own session handling system, isn't there a peer reviewed codebase you could use?
