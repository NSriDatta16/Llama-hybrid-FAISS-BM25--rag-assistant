[site]: stackoverflow
[post_id]: 751453
[parent_id]: 751437
[tags]: 
A repository is only responsible for data retrieval/storage. A factory is responsible for creating new objects. In your case, immutable objects are ok. However you need some method to invalidate superseeded products and remove them from the repository cache. Any dangling references can be neglected in most cases, as they were valid at retrieval time. In case of a product update you need to make sure that you create a new product via the factory. Your repository would only include three operation kinds: Retrieve (or Find), Save and Supersede. Where Save stores a new product, which is not changed. And Supersede would store the new product, invalidate the old and purge it from the cache. In terms of a C# signature I could imagine the two storage methods to take the following appearance: void Save(Product product); void Supersede(Product oldProduct, Product newProduct); I hope this helps.
