[site]: stackoverflow
[post_id]: 1364112
[parent_id]: 
[tags]: 
sizeof on a class inheriting from a base class with a virtual function

For the following code fragment. /*This program demonstartes how a virtual table pointer * adds to a size of a class*/ class A{ }; class X{ public: void doNothing(){} private: char a; }; class Z:public X { public: void doNothing(){} private: char z; }; class Y{ public: virtual void doNothing(){} private: char a; }; class P:public Y { public: void doNothing(){} private: char pp[4]; }; int main(){ A a; X x; Y y; Z z; P p; std::cout The behaviour I seem to notice is that whenever an empty class is instantiated or an empty class is inherited from byte boundaries are not considered(ie: an object of size 1 byte is allowed), in every other case object size seems to be determined by byte boundaries. Whats the reason for this? I ask since at this point I am guessing.
