[site]: stackoverflow
[post_id]: 1120413
[parent_id]: 1117622
[tags]: 
Make it private until it needs to be protected. This is an abstraction problem with languages like C#, C++ and Java where protected/private is tied to the implementation. Private members can be safely automatically inlined whereas protected cannot. This is similar to the abstraction problem in C# and C++ with monomorphism and polymorphism needing the virtual keyword. This essentially makes a fragile base class problem. Defining everything as protected/virtual is the safest in terms of reuse but hinders optimizations. Defining everything as private/non-virtual is the most efficient. In a language like Eiffel, the compiler automatically detects if functions can be inlined and automatically detects if a feature is polymorphic or monomorphic. http://dev.eiffel.com
