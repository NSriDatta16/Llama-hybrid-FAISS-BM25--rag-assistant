[site]: stackoverflow
[post_id]: 5602182
[parent_id]: 5602066
[tags]: 
Use of duck typing is common in Python, so checking the type is usually discouraged unless absolutely necessary. Generally, if an argument must be of some specific type, it is best to assume that the user has provided the correct type. This allows the user to provide something that isn't quite right but still works, and it allows you to use mock objects for testing purposes. In some cases, it might be useful to just try to convert whatever the user has given you into what you want. In your example case, you might just do: self.tagged = list(input) . The list constructor will accept a wide variety of sequences (which the user might want to use, but might not be sufficient for your needs) and makes a list out of it. Sometimes, though, you do need some kind of check. E.g., if the function is supposed to accept lists or dicts and do something different depending on which you provided. In these situations, you can use Python's abstract base class system. See the classes in the collections and numbers module. Using these, you could do an isinstance check to see if something is a Sequence , Mapping , or Number without explicitly naming all the possibilities. You may have noticed that the list , dict , and int classes do not actually derive from Sequence , Mapping , and Number , but that's ok - abstract classes get to determine what classes count as subclasses for the purposes of the isinstance function. You can use the abc module to define new abstract classes of this sort. So if you have to do a lot of checks for a specific set of classes, you might find it easier and cleaner to define an abstract class that claims them as its own. Then, later, you can add more classes (or programmatic checking) to the abstract class to cover more cases without needing to update all the places where you needed to make the check.
