[site]: stackoverflow
[post_id]: 2696498
[parent_id]: 2696482
[tags]: 
Sure, it's secure but there are precautions you should take to prevent insecure circumstances/attacks. There is nothing wrong with the mechanism you've described, at all. But the implementation is incomplete/unspecific. You have to consider password storage, and the procedures you'll use for login. In response to a complaint, here's some issues OWASP brings up about authentication/sessions. 1. Are credentials always protected when stored using hashing or encryption?. Yes, store your users passwords as salted hashes. 2. Can credentials be guessed or overwritten through weak account management functions (e.g., account creation, change password, recover password, weak session IDs)? No, those functions should be protected by a security question/email link. 3. Are session IDs exposed in the URL (e.g., URL rewriting)? Nope, they shouldn't be. 4. Are session IDs vulnerable to session fixation attacks? Nope, don't allow users to set their session id through any means besides login. 5. Do session IDs timeout and can users log out? In cases where the user hasn't otherwise specified "to stay logged in for two weeks", sessions should expire soonish. 6. Are session IDs rotated after successful login? Yes, using session_destroy() and session_start() will accomplish this. 7. Are passwords, session IDs, and other credentials sent only over TLS connections? Sure. Ultimately, you have to consider the kind of data you'll be handling. Never allow someone to gain access to a user's password, since it could compromise their data elsewhere. But, if you're running colorakitten.com, don't loose sleep over the possibility of hijacked sessions: "Oh no, someone hacked my account and discolored my kittens." Read: PHP Session Security
