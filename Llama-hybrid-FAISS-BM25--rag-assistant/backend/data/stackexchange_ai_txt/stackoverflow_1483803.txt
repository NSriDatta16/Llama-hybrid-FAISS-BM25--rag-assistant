[site]: stackoverflow
[post_id]: 1483803
[parent_id]: 1483690
[tags]: 
The output from a query should be a table, which is a set of rows, each row with the same set of column names and types. (There are some DBMS that support ragged rows - with different sets of columns, but that is not a mainstream feature.) You have to decide how to handle two sets of four rows with different sets of columns in the two sets. The simplest option, usually, is to do the two standalone queries. The two result sets are not comparable, and should not be conflated. If you choose your Version 1, then you should decide which set of column names is appropriate, or create a composite set of names using 'AS x' column aliases. If you choose your Version 2, then you should probably name the trailing columns of the first clause of the UNION; at the moment, they all have no name: SELECT Table1.*, '' AS e, '' AS f, '' AS g, '' AS h, '' AS i, '' AS j FROM Table1 WHERE 1 LIMIT 0,4 UNION SELECT '' AS a, '' AS b, '' AS c, '' AS d, Table2.* FROM Table2 WHERE 1 LIMIT 0,4 (The AS comments in the second are redundant, but self-consistent; the two halves of the UNION have the same column headings explicitly.) Except that you have provided empty strings instead of NULL, the notation you have chosen corresponds to an 'OUTER UNION'. You can find occasional references to it in selected parts of the literature (E F Codd in the RM/V2 book; C J Date in critiques of all things OUTER). SQL 1999 provided it as a UNION JOIN; SQL 2003 removed UNION JOIN (that's pretty unusual - and damning of the feature). I'd use two separate queries.
