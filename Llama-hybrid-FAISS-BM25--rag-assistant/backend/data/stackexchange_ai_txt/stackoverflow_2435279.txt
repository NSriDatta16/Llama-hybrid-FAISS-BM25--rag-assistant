[site]: stackoverflow
[post_id]: 2435279
[parent_id]: 2435261
[tags]: 
The JSON array will be dumped without a name / assignment. That is, in order to give it a name, in your JavaScript code you would do something like this: var my_json_data_dump = function_that_gets_json_data(); If you want to visualize it, for example, substitute: var my_json_data_dump = { 'first_name' : Bob, 'last_name': smith }; Also, like Iganacio said, you're going to need something like json2.js to parse the string into the object in the last example. You could wrap that parsing step inside of function_that_gets_json_data , or if you're using jQuery you can do it with a function like jQuery.getJSON() . json2.js is still nice to have, though. In response to the comment (I need space and markup): Yes, of course. All the Python side is doing is encoding a string representation (JSON) for you. You could do something like 'var blah = %s' % json.dumps(obj_to_encode) and then on the client side, instead of simply parsing the response as JSON, you parse it as JavaScript. I wouldn't recommend this for a few reasons: You're no longer outputting JSON. What if you want to use it in a context where you don't want the variable name, or can't parse JavaScript? You're evaluating JavaScript instead of simply parsing JSON. It's an operation that's open to security holes (if someone can seed the data, they might be able to execute a XSS attack). I guess you're facing something I think every Ajax developer runs in to. You want one place of truth in your application, but now you're being encouraged to define variables and whatnot in JavaScript. So you have to cross reference your Python code with the JavaScript code that uses it. I wouldn't get too hung up on it. I can't see why you would absolutely need to control the name of the variable from Python in this manner. If you're counting on the variable name being the same so that you can reference it in subsequent JavaScript or Python code, it's something you might obviate by simply restructuring your code. I don't mean that as a criticism, just a really helpful (in general) suggestion!
