[site]: stackoverflow
[post_id]: 2381774
[parent_id]: 2381692
[tags]: 
As Neil's comment implies, the overhead in hashtable implementations depends heavily on the particular implementation of a hash table. Typically, though, there will be storage overhead from unused hashes, and both storage and time overhead from dealing with hash collisions. There is of course also time overhead from computing the hash values. In answer to your second question, this depends very much on the details of your stream of numbers, and the other aspects of your program. Some questions to consider: Is the set of possible numbers large or small? (How big an array would you need to create?) Out of the range of possible numbers, do you expect most of them to be used, or only a few? If you expect most of the possible numbers in the range to be used, then using a hash table will not save you much space. Do you know the range of possible numbers before you start? Or is this unknown? Hash tables can deal with unknown ranges much more easily. How important is saving storage space in this program? Can you easily afford to allocate an array of the necessary size? If you can easily afford to allocate the array, why bother with a hash table? How important is runtime speed in this program? Arrays will be usually be faster.
