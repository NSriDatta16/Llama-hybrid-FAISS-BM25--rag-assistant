[site]: stackoverflow
[post_id]: 4021578
[parent_id]: 3869828
[tags]: 
USB ports come in two flavors; host which is the controller of the bus and is found on PC's and device or in Linux speak a gadget (there is a version commonly found in stills cameras where the port can switch type at connection called USB on the go). A host port can connect to multiple gadget ports (via hubs). The host is aways very much in control with gadgets operating as slaves. The hardware for the two port types is very different and many embedded cores contain examples of each type of controller. The Linux kernel contains host drivers for OHCI EHCI and UHCI host controller hardware and various protocol drivers (printers, keyboards etc). For some device types the USB organization has implemented standard protocols so you don't need manufacturers drivers for USB disk drives as they should all comply to a free and publicly available standard. If you want your device to talk to a PC host you will need to implement a device/gadget interface, there is far greater variety in hardware designs for the other end of the cable, but you should find the Linux kernel supports a selection of the more common ones. The gadget directory also includes a selection of protocol drivers as well. One trick that could save a lot of work would be to configure your device to appear as a USB network interface, this avoids writing a lot of low level stuff and you can take advantage of the network diagnostic tools and the USB layer is abstracted out of your application on both ends. This even works with a Windows host without needing to write custom Windows drivers (XP only supports the Microsoft RNDIS USB protocol and the Windows driver is buggy and can hang on disconnects but the kernel includes a RNDIS wrapper and this solution can be made to work well). I wasn't sure from your question is the video source was an independent USB device in which case it will need a separate USB host port on your device or if it was supplied by the host. Get your self set of kernel sources and study the USB gadget directory, also download the USB specifications from USB.org You will want to understand chapters 8 9 10 11 as they explain what happens once a host detects a gadget and also the concept of endpoints. Mindshare did USB book that was a ok as a quick introduction to USB.
