[site]: stackoverflow
[post_id]: 471549
[parent_id]: 471313
[tags]: 
You want to think about performance regarding a particular issue as often as you might have to deal with performance issues on each issue one day. Meaning -- if it isn't going to get a ton of use, worry accordingly. Don't be incredibly lazy or inefficient, and don't over obsess in getting algorithmic nirvana each time. It's often best to code simplest and make it faster/optimized as needs arise. In the meantime simple code can be worked on by any developer and it's something worth considering. If you see it's importance increasing, now you know to think about it some more as it will come to bite you in the rear. As developers we have an issue of wanting a perfect v1.0. A working v1.0 is soemthing that works, not perfect for every situation the future may ever bring. A good example for me was when I started playing with databases many years ago. I didn't know what additional indexes were or the great performance boosts they give when queries unimaginably slow down. We can't predict every problem. I try to do good design, and let problems fight for my attention. Hope something was of use.
