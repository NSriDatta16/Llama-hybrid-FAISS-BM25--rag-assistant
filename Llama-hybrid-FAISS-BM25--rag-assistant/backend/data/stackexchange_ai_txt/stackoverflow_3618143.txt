[site]: stackoverflow
[post_id]: 3618143
[parent_id]: 3618066
[tags]: 
Rule of thumb. Do not include other header files from your header files if you don't need to. Pre-Compiled header file stuff being a notable exception. If your class only depends on a pointer or a reference you do not need the header file: Use forward declaration in this situation. In the source file include only the header files you need to make it work Include them from most specific to least specific. This will prevent the problem of hiding a dependency. Other notes: Do not use Underscore followed by a capitol letter. This is reserved for the implementation. see As in #define _Timing_h Also note it is traditional that macros are all upper case. Do not put using namespace X; in a header file If you do this you pollute the namespace for everybody that uses your header file. This is a real easy way to PO other developers who now have to re-factor their code to make sure it does not use any of a bunch of new classes/functions/templates that are suddenly being resolved against that was not there before. So try this: Timing.h #ifndef TIMING_H #define TIMING_H class Agent; class Timing{ // STUFF }; #endif Agent.h #ifndef AGENT_H #define AGENT_H #include class Agent{ // STUFF }; #endif Timing.cpp #include "Timing.h" #include "Agent.h" // STUFF Agent.h #include "Agent.h" using std::string; // Bring as little as possable into the the global namespace. // prefer to prefix all cases with std:: // STUFF.
