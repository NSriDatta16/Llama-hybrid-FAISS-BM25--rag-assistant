[site]: stackoverflow
[post_id]: 4285116
[parent_id]: 4284681
[tags]: 
I think I figured out what it is you want, although I still have no idea what array_size , element_indexer , array_start_index and TestStuff are for. def test_stuff letters = { "0" => " A ", "1" => " B ", "2" => " C " } position = {"1" => "one ", "2"=> " two ", "3"=> " three ", "4"=>" four " } my_array = [0, 1, 2, 2] "**#{my_array.map.with_index {|e, i| "#{letters[e.to_s].strip} #{position[(i+1).to_s].strip}" }.join(' ')}**" end [I took the liberty of reformatting your code to standard Ruby coding style.] However, everything would be much simpler, if there weren't all those type conversions, and all those superfluous spaces. Also, the method would be much more useful, if it actually had a way to return different results, instead of always returning the same thing, because at the moment, it is actually exactly equivalent to def test_stuff '**A one B two C three C four**' end Something along these lines would make much more sense: def test_stuff(*args) letters = %w[A B C] position = %w[one two three four] "**#{args.map.with_index {|e, i| "#{letters[e]} #{position[i]}" }.join(' ')}**" end test_stuff(0, 1, 2, 2) # => '**A one B two C three C four**' If you don't want to pollute the Object namespace with your method, you could do something like this: def (TestStuff = Object.new).test_stuff(*args) letters = %w[A B C] position = %w[one two three four] "**#{args.map.with_index {|e, i| "#{letters[e]} #{position[i]}" }.join(' ')}**" end TestStuff.test_stuff(0, 1, 2, 2) # => '**A one B two C three C four**'
