[site]: stackoverflow
[post_id]: 1367989
[parent_id]: 1366115
[tags]: 
So I've implemented my idea about using events and I am pretty satisfied with it so far. I was able to put all my customer-specific logic within a single class per customer, while my controller subscribe/unsubscribe the corresponding customer's specific functions -- if there are any. Furnishing my Manager classes with events was the easiest part. Only drawback is, I have to add/remove the subscription handling in the controller classes by hand. E.g. my SetStatus -method looks like this: foreach (Job job in form.SelectedJobs) { // Subscribe customer-specific methods to events switch (job.Customer.Code) { case "VNR": jobManager.JobStatusChanged += new JobManager .JobStatusChangedHandler(Vnr.OnStatusChanged); break; case "LS": jobManager.JobStatusChanged += new JobManager .JobStatusChangedHandler(Ls.OnStatusChanged); break; } jobManager.SetStatus(job, status); // Unsubscribe customer-specific methods from events switch (job.Customer.Code) { case "VNR": jobManager.JobStatusChanged -= new JobManager .JobStatusChangedHandler(Vnr.OnStatusChanged); break; case "LS": jobManager.JobStatusChanged -= new JobManager .JobStatusChangedHandler(Ls.OnStatusChanged); break; } } Which really isn't very elegant, but it's not that bad.
