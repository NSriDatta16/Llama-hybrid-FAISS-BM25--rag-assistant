[site]: stackoverflow
[post_id]: 3255537
[parent_id]: 3255389
[tags]: 
Yes, signal values can be hard to come up with. There's nothing special about NULL when you're talking about a non-pointer. It's just as hard to find a date that means "no date" or a string that means "no string" but is not an empty string. That's why using signal values is rare outside of database programming, where the popularity of positive integers for ids and keys makes -1 a handy signal value. I see you as having three choices. One, store pointers in your array. A null pointer is way different from a pointer to an integer with the value zero. But this has overhead (doubles the storage you need) and might mess with your head or the heads of others. Two, use your own class to represent this thing and have one member of the class hold whether there are 4 or 6 or whatever values, and use that member in your if statements. Three, use a readily available grows-itself-when-you-add-one container like std::vector and use its properties (eg size() ) in your if statements. This has the disadvantage that you'll need to rewrite the code that accesses elements of the array. So I would vote for door #2.
