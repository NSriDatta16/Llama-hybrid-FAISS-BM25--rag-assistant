[site]: stackoverflow
[post_id]: 4447451
[parent_id]: 
[tags]: 
how should i refactor a piece of code that is present in many different functions, but has return statement in it

The code snippet is coming from django view code, but it doesn't matter much. Let's say I have the following piece of code... def unsubscribe(request): #start of block user = request.user sid = request.POST.get('subscription_id') try: sub = Subscription.objects.get(id=sid) except ObjectDoesNotExist: return ajax_response(False, [('subscription', 'Given subscription does not exist.')]) if sub.user != user: return ajax_response(False, [('subscription', 'Invalid permission.')]) #end of block. sub.is_active = False sub.save() return ajax_response(True) and say, I have another function resubscribe() that does exactly same thing as the above function, except it does sub.is_active = True . In that case, what would be the best way to organize the code, so that code between #block and #endblock aren't duplicated? I guess in general, this question can be written as: There's a block of code that is copy-and-pasted over many different functions. however, this block of code contains return statement. in that case, what would be the best way to abstract this piece of logic out? EDIT: fixed code snippet. EDIT2: Actually, the easy way to solve this question is by creating a function say, toggle_active_status, which takes request and a boolean. (I figured it out after posting out the question). However, i'm wondering about the case where the different logic between the functions is more than 1 line... like, say, code between #block and #endlbock only does input validation, and potentially any arbitrary application logic can come after.
