[site]: stackoverflow
[post_id]: 2965102
[parent_id]: 2964852
[tags]: 
It's essentially the same principle as a buffer overflow; the OS allocates a fixed amount of memory for the stack, and when you run out (stack overflow) you get undefined behavior, which in this context means a SIGSEGV. The basic idea: int stack[A_LOT]; int rsp=0; void call(Func_p fn) { stack[rsp++] = rip; rip = fn; } void retn() { rip = stack[--rsp]; } /*recurse*/ for(;;){call(somefunc);} eventually rsp moves past the end of the stack and you try to put the next return address in unallocated storage and your program barfs. Obviously real systems are a lot more complicated than that, but that could (and has) take up several large books.
