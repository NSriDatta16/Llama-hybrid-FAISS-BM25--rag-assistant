[site]: stackoverflow
[post_id]: 1630743
[parent_id]: 976288
[tags]: 
I've done similar interfacing for a LIMS system to lab instruments (in my case, thermocyclers ). I don't know about the specific instruments you mentioned, but many lab instruments use a serial interface of some form. The physical layer could be either rs232 (if the instrument is intended to exist standalone on a bench) or it could be rs485 (if there are multiple instruments that need to be ganged together in a "daisy-chain" configuration). The protocol level can be a pretty wide variety of simple message/response patterns. Some of these are actually standards (ASTM 1394), others are "home-made" jobs that consist of simple blocks of bytes with op-codes, data and a checksum. Whatever it is, you'll need good documentation if you don't have API libraries you can use. You might have to make phone calls to get this stuff, it isn't always available on the internet. One of the problems that you'll have is that servers that run LIMS systems are often in a datacenter somewhere and your instruments are in a lab. To make it worse, the servers don't have serial ports, and the instruments don't have ethernet. To get around this, you'll want to use "serial terminal servers" or "serial device servers" (for example... link ). These are little metal boxes that take ethernet traffic and route it to one or more serial ports (the ports can be configured as rs232 or rs422 or rs485). On the server, you install a driver that makes these ports on the remote terminal server appear as an actual ports to the server application. Alternatively, you can also choose to route data to/from a specific TCP/IP socket to a specific serial port. If you get it to work, it is a pretty neat rewarding project that saves a lot of time. Good luck!
