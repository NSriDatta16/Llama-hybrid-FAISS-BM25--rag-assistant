[site]: stackoverflow
[post_id]: 4572512
[parent_id]: 1563838
[tags]: 
The code at this link seems to suggest that the names and ordinals form a matched pair of arrays, counted up to NumberOfNames, and that the functions are separate. So your loop may be iterating the wrong number of times, but that doesn't explain why you're seeing bad strings from the very beginning. For just printing names, I'm having success with a loop like the one shown below. I think the call to ImageRvaToVa may be what you need to get the correct strings? However I don't know whether that function will work unless you've actually loaded the image by calling MapAndLoad -- that's what the documentation requests, and the mapping did not seem to work in some quick experiments I did using LoadLibrary instead. Here's the pInvoke declaration: [DllImport("DbgHelp.dll", CallingConvention = CallingConvention.StdCall), SuppressUnmanagedCodeSecurity] public static extern IntPtr ImageRvaToVa( IntPtr NtHeaders, IntPtr Base, uint Rva, IntPtr LastRvaSection); and here's my main loop: LOADED_IMAGE loadedImage = ...; // populated with MapAndLoad IMAGE_EXPORT_DIRECTORY* pIID = ...; // populated with ImageDirectoryEntryToData uint* pFuncNames = (uint*) ImageRvaToVa( loadedImage.FileHeader, loadedImage.MappedAddress, pIID->AddressOfNames, IntPtr.Zero); for (uint i = 0; i NumberOfNames; i++ ) { uint funcNameRVA = pFuncNames[i]; if (funcNameRVA != 0) { char* funcName = (char*) (ImageRvaToVa(loadedImage.FileHeader, loadedImage.MappedAddress, funcNameRVA, IntPtr.Zero)); var name = Marshal.PtrToStringAnsi((IntPtr) funcName); Console.WriteLine(" funcName: {0}", name); } }
