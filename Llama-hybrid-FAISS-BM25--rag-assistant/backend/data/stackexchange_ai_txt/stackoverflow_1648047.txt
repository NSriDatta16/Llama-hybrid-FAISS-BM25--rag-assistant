[site]: stackoverflow
[post_id]: 1648047
[parent_id]: 1641316
[tags]: 
I have a factory class that makes the connections and caches them by hint for the next call. It would support creating multiple connections to the same database for the purpose of keeping connection credentials separate. class dbtool { private static $instance = false; private static $connections= false; private function __construct() { if( ! self::$instance ) { self::$instance = $this; self::$connections = array(); } } public function getInstance() { if( ! self::$instance ) self::$instance = new dbtool(); return self::$instance; } public static function getConnection( $hint ) { if( ! self::$instance ) return false; if( ! array_key_exists( $hint, self::$connections )) self::$connections[ $hint ] = self::$connectByHint( $hint ); return self::$connections[ $hint ]; } // a list of database creds by hint, etc... private static function connectByHint( $hint ) {} } Closing connections happens when the script exits. If you're running a batch process, like a daemon, you might want to wrap the connections themselves in a homegrown connector class that does a mysqli_ping() to assert the connection is still alive, and if not, reconnect. I also discourage keeping database passwords as member variables, as they can be exposed using a print_r() or var_export(). Can you guess what I would suggest for passwords?
