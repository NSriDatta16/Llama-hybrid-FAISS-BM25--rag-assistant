[site]: stackoverflow
[post_id]: 4590092
[parent_id]: 4590008
[tags]: 
Why don't you create a session wrapper class that handles the accessing and storing of data? This will produce much cleaner code and abstract so changes to storing methods down the line with be pretty easy. Here's an example of a wrapper: abstract class Session { private static $_started = false; private static $_driver; public static function start($driver = "native", $site = "default") { if(self::$_started === false) { require_once "drivers/" . $driver . ".php"; self::$_driver = new $driver($_site); } } public static function set($key,$value) { self::$_driver->set($key,$value); } public static function get($key) { self::$_driver->get($key); } public static function remove($key) { self::$_driver->remove($key); } } The above is only simple but you should get the idea, you would also have to create the native driver file that has the set of methods required, and they should store the session data accordingly. Example of using the Session class like so: Session::start("native"); /* * Generic Code */ Session::set("key","value (:"); When fetching your "User" Object you can just do simple like so: Session::get("userObj")->id; Produces much cleaner code and larger scope issues. After time goes by you can just create a new driver for storing in the database and then just change your driver from native to database. Note: Storing objects in the database can be a little buggy especially if your code is not organized as loading the session before the user class is on scope then you can get partial objects in the session which will lead to lack of functionality.
