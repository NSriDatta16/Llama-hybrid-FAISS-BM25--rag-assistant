[site]: stackoverflow
[post_id]: 4536286
[parent_id]: 
[tags]: 
Measuring Performance of an Extension Method. Is this right?

I'm testing the efficiency of an extension method to see which permutation would be the fastest in terms of processing time. Memory consumption isn't an issue at this point.. I've created a small console app to generate an array of of random strings, which then has the extension methods applied to it. I'm currently using the StopWatch class to measure the time taken to run the extension methods. I then average to total time of each method over a number of iterations. I'm not excluding highest or lowest results at this point. Extension Methods being tested: public static String ToString1(this String[] s) { StringBuilder sb = new StringBuilder(); foreach (String item in s) { sb.AppendLine(item); } return sb.ToString(); } public static String ToString2(this String[] s) { return String.Join("\n", s); } Program.cs static void Main(string[] args) { long s1Total = 0; long s2Total = 0; double s1Avg = 0; double s2Avg = 0; int iteration = 1; int size = 100000; while (iteration Other extensions methods used in the above code for completeness.. Random extension: public static String NextString(this Random r,int size) { return NextString(r,size,false); } public static String NextString(this Random r,int size, bool lowerCase) { StringBuilder sb = new StringBuilder(); char c; for (int i = 0; i Running the above code, my results indicate that the StringBuilder based method is faster than String.Join based method. My Questions: Is this the right way to be performing this type of measurement.. Is there a better way of doing this? Are my results in this instance correct, and if so is using a StringBuilder actually faster than String.Join in this situation? Thanks.
