[site]: stackoverflow
[post_id]: 5683443
[parent_id]: 5655774
[tags]: 
Everyone has given a wide range of opinions but I don't think anyone has really hit the nail on the head. When it comes down to storing data, the amount of data, the rate it is to be accessed, and several other factors all determine what's the best storage platform. Some people have suggested using memcached. Now although this is a valid answer (you can use it), I don't think that this is a good idea, solely based on the fact that memcached stores data within your server's memory. Your memory is not for data storage, it's for use of the actual applications, operating system, shared libraries, etc. Storing data within the memory can cause a lot of issues with other applications currently running. If you store too much data in your RAM your applications would not be able to complete operations assigned to them. Although this is faster then a disk based storage platform such as MySQL, it's not as reliable. I would personally use MySQL as your storage engine server-side. This would reduce the amount of problems you would come across and also makes the data very manageable. To speed up the responses to your clients I would look at running node on your server. This is because it's event driven and non-blocking. What does that mean? Well, when Client A requests some data that is stored on the hard drive, traditionally PHP might say to the C++, fetch me this chunk of data stored on this sector of the hard drive. C++ would say 'ok no problem', and while it goes of to get the information PHP would sit and wait for the data to be read and returned before it continues it's operations, blocking all other client's in the meantime. With node, it's slightly different. Node will say to the kernel, 'fetch me this chunk of information and when your done, give me call', and then it continues to take requests from other clients that may not need disk access. So suddenly because we have assigned a callback to the kernel, we do not have to wait :), happy days. Take a look at this image: This really could be the answer your looking for, please see the following for a more descriptive and detailed information regarding how node could be the right choice for you: http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/
