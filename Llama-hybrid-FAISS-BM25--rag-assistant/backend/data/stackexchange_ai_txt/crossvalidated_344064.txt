[site]: crossvalidated
[post_id]: 344064
[parent_id]: 280597
[tags]: 
Suppose that you have response $y_i$ and covariates $x_i$ for $i = 1 ...n$, and some loss function $\mathcal{L}$. The no information error rate of a model $f$ is the average loss of $f$ over all combinations of $y_i$ and $x_i$: $${1 \over n^2} \sum_{i=1}^n \sum_{j=1}^n \mathcal{L}\left(y_i, f(x_j)\right)$$ If you have a vector of predictions predicted and a vector of responses response , you can calculate the no info error rate by generating all the combinations of predicted and response and then evaluating some function loss on these resulting vectors. In R, supposing RMSE loss, (using the tidyr library) this looks like: predicted In Python this looks like import numpy as np predicted = np.arange(1, 4) response = np.arange(4, 7) combos = np.array(np.meshgrid(predicted, response)).reshape(2, -1) def loss(x, y): return np.sqrt(np.mean((x - y) ** 2)) loss(combos[0], combos[1])
