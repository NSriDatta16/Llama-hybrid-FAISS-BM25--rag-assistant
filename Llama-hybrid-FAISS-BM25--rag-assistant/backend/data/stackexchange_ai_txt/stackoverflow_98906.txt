[site]: stackoverflow
[post_id]: 98906
[parent_id]: 98687
[tags]: 
IMO, the "more obvious/more idiomatic/better solution" is to use an existing ORM rather than invent DAO-like classes. It appears to me that ORM's are more popular than "raw" SQL connections. Why? Because Python is OO, and the mapping from a SQL row to an object is absolutely essential. There aren't many use cases where you deal with SQL rows that don't map to Python objects. I think that SQLAlchemy or SQLObject (and the associated connection pooling) are the more idiomatic Pythonic solutions. Pooling as a separate feature isn't very common because pure SQL (without object mapping) isn't very popular for the kind of complex, long-running processes that benefit from connection pooling. Yes, pure SQL is used, but it's always used in simpler or more controlled applications where pooling isn't helpful. I think you might have two alternatives: Revise your classes to use SQLAlchemy or SQLObject. While this appears painful at first (all that work wasted), you should be able to leverage all the design and thought. It's merely an exercise in adopting a widely-used ORM and pooling solution. Roll out your own simple connection pool using the algorithm you outlined -- a simple Set or List of connections that you cycle through.
