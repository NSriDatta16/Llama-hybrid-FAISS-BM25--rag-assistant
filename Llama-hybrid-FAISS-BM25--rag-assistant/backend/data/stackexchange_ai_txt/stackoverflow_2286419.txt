[site]: stackoverflow
[post_id]: 2286419
[parent_id]: 
[tags]: 
How to output to a file with information from a pipe in C?

I'm confused about what I'm doing wrong when I'm attempting to output to a file after I've execed a second program. Say I have input file that has the following names: Marty B. Beach 7 8 zachary b. Whitaker 12 23 Ivan sanchez 02 15 Jim Toolonganame 9 03 After my programs finish, it will convert the student's names to their usernames and output it to a file such as this: mbb0708 zbw1223 is0215 jt0903 Currently as my program stands, it outputs nothing to the file and the terminal seems to be in an infinite loop despite self testing my converter program before and making sure it outputs names correctly to stdout. I'm not sure what I'm doing wrong here? First time programming with pipes. I know have to make use of the read and write commands extract the data, but with the dup2 command is that necessary for the read command alone? manager.c #include #include #include #include #include int main(int argc, char** argv) { pid_t pid; int nbytes; /*Buffer to hold data from pipe*/ char buffer[BUFSIZ + 1]; /*Pipe Information*/ int commpipe[2]; if(pipe(commpipe)) { fprintf(stderr, "Pipe failed.\n"); return EXIT_FAILURE; } if((pid = fork()) == -1) { fprintf(stderr,"Fork error. Exiting.\n"); exit(1); } else if(pid == 0) { /*This is the child process. Close our copy of the write end of the file descriptor.*/ close(commpipe[1]); /* Connect the read end of the pipe to standard input*/ dup2(commpipe[0], STDIN_FILENO); /*Program will convert the Student's name to their respective names*/ execl("converter","converter",NULL); /*Exit if failure appears*/ exit(EXIT_FAILURE); } else { FILE *file; file = fopen("usernames.txt","a+"); //append a file(add text to a file or create a file it does not exist) /*Close or copy of the read end of the file descriptor */ //close(commpipe[1]); nbytes = write(commpipe[1], buffer, BUFSIZ); //Read from pipe here first? //Output to usernames.txt the usernames of the user from the pipe. fprintf(file, "%s", buffer); /*Wait for the child process to finish*/ waitpid(pid, NULL, 0); } return 0; }
