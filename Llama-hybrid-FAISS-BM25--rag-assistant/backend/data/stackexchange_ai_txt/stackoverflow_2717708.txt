[site]: stackoverflow
[post_id]: 2717708
[parent_id]: 2713440
[tags]: 
You could change you method around to use document fragment style creation and an object to populate the properties on the elements , like this: var someElement = $("#someElement"); $(' ').append($(' ', { 'id': menuID, 'href': '#', click: function() { slideMenu(menuSlider); } }) ).appendTo(someElement); var div = $(' ', { 'id': menuSlider, css: {display: 'none'} }); $(' ').append(' aMenu1 ') .append(' aMenu2 ') .append(' aMenu3 ') .appendTo(div); div.appendTo(someElement); This is a very different way of doing it, first we're caching the $("#someElement") object so we're not searching for it repeatedly. Then we're creating the as an object, putting the link inside, then inserting then appending the whole thing to someElement . In the last, the same approach it's creating the , setting it's properties, then creates the menu and appends it inside...then appends that whole div to someElement as well. As a side note, I'm not sure how .slideMenu() works, but an event handler that works via $(this).parent().next() (or give the div a class) would work as well, and you wouldn't need a function with the slider argument passed.
