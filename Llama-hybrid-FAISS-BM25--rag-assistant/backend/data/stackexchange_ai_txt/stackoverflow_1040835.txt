[site]: stackoverflow
[post_id]: 1040835
[parent_id]: 1040731
[tags]: 
Flags enums can be treated as a simple integral type in which each individual bit corresponds to one of the flagged values. You can exploit this property to convert the bit-flagged enum value into an array of booleans, and then dispatch the methods you care about from a correlated array of delegates. EDIT: We could certainly make this code more compact through the use of LINQ and some helper functions, but I think it's easier to understand in the less sophisticated form. This may be case where maintainability trumps elegance. Here's an example: [Flags()]public enum CheckType { Form = 1, QueryString = 2, TempData = 4, } void PerformActions( CheckType c ) { // array of bits set in the parameter {c} bool[] actionMask = { false, false, false }; // array of delegates to the corresponding actions we can invoke... Action availableActions = { DoSomething, DoSomethingElse, DoAnotherThing }; // disassemble the flags into a array of booleans for( int i = 0; i Alternatively, if the order in which you evaluate doesn't matter, here is simpler, clearer solution that works just as well. If order does matter, replace the bit-shifting operations with an array containing the flags in the order you want to evaluate them in: int flagMask = 1 >= 1; // bit-shift the flag value one bit to the right }
