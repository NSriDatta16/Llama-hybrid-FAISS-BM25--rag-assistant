[site]: datascience
[post_id]: 126615
[parent_id]: 69169
[tags]: 
It's been three years, hopefully you you've found solution since then. This is for those who are having the same difficulty, as i was also too few days ago. When running PCA using sklearn in python, in pca.components_, you will find the correlation between principal component found and the original variable. See the code below. import pandas as pd import numpy as np from sklearn.preprocessing import StandardScaler from sklearn.decomposition import PCA # Here you read and initialize your dataset, it was a csv. df = pd.read_csv('./mystery.csv') # We scale our dataset to prepare it for pca scaler = StandardScaler() scaler.fit(np.asarray(df)) df_scaled = scaler.transform(df) # Your scaled dataset as dataframe if interested to see how it looks df=pd.DataFrame(df_scaled, columns=['V1','V2','V3']) #Now we apply our PCA to have two principal components (it will takes the two first one, leave PCA() without argument if you want to see all of them pca = PCA(n_components=2) df_projected = pca.fit_transform(df_scaled) pd.DataFrame(df_projected, columns=["F"+str(i+1) for i in range(2)])2 # our dataset with Principal Components as variables (columns) #And here finally, you could see the correlation, which is the weight of any of your original variables(columns/caracteristic) on any principal components. corr = pd.DataFrame(pca.components_, index=["F"+str(i+1) for i in range(2)], columns=["V"+str(j+1) for j in range(3)]) corr
