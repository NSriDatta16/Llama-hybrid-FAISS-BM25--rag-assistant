[site]: stackoverflow
[post_id]: 150811
[parent_id]: 150753
[tags]: 
If you are doing medical image processing it is likely that you are allocating big blocks at a time (512x512, 2-byte per pixel images). Fragmentation will bite you if you allocate smaller objects between the allocations of image buffers. Writing a custom allocator is not necessarily hard for this particular use-case. You can use the standard C++ allocator for your Image object, but for the pixel buffer you can use custom allocation that is all managed within your Image object. Here's a quick and dirty outline: Use a static array of structs, each struct has: A solid chunk of memory that can hold N images -- the chunking will help control fragmentation -- try an initial N of 5 or so A parallel array of bools indicating whether the corresponding image is in use To allocate, search the array for an empty buffer and set its flag If none found, append a new struct to the end of the array To deallocate, find the corresponding buffer in the array(s) and clear the boolean flag This is just one simple idea with lots of room for variation. The main trick is to avoid freeing and reallocating the image pixel buffers.
