[site]: stackoverflow
[post_id]: 2728405
[parent_id]: 2728346
[tags]: 
In Python 3.0+: I would go with a parameter to the base class's constructor like you have in the second example. As this forces classes which derive from Base to provide the necessary path property, which documents the fact that the class has such a property and that derived classes are required to provide it. Without it, you would be relying on this being stated (and read) somewhere in your class's docstrings, although it certainly does help to also state in the docstring what the particular property means. In Python 2.6+: I would use neither of the above; instead I would use: class Base(object): def __init__(self,path): self.path=path; class Sub(Base): def __init__(self): Base.__init__(self,"something/") In other words, I would require such a parameter in the base class's constructor, because it documents the fact that all such types will have/use/need that particular parameter and that the parameter needs to be provieded. However, I would not use super() as super is somewhat fragile and dangerous in Python , and I would also make Base a new-style class by inheriting from object (or from some other new-style) class.
