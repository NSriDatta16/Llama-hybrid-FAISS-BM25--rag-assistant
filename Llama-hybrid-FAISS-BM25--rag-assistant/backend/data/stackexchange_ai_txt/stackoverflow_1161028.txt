[site]: stackoverflow
[post_id]: 1161028
[parent_id]: 1147373
[tags]: 
Jagannath, The problem you're encountering is due to the fact that the backing store for the data from SPPersistedObject -derived types is the SharePoint farm configuration database. In a least privileges installation, the only account that has anything other than read access to this database is the farm service (timer service) account. Even elevating privileges in your code is only going to "raise" your security context to that of the application pool account under which the site is running within IIS. I've encountered the situation you're in before, and I'm only aware of two ways to work around it: Find a way to run your application code within the context of the farm service account. This normally translates to running the code as a custom timer job. Adjust the farm configuration database permissions to grant the application pool account (assumed when run as part of an elevated security block) write access. Of these two options, only the first option stays true to the "least privileges" principle of execution ... but it does entail re-architecting your code. I've generally had good creating a "sweep" custom timer job that gets created and scheduled to run at Feature activation time. That timer job then checks the site collection (typically sweeping an entire web application) to see if properties need to be persisted, updated, etc. If it finds updates are necessary, they are carried out by the timer job since it has the required access level. An example of what I'm describing appears in a Feature I put out on CodePlex ( http://blobcachefarmflush.codeplex.com/SourceControl/changeset/view/53851#797787 ). I needed to update the Properties bag on an SPWebApplication instance, and the only way to do so was from within the context of a timer job. When a user makes changes from within the UI, a flag gets set on Properties collection of the site collection's RootWeb. The timer job sweeps through the site collection, and when it sees such a flag set, it takes care of making the necessary changes from the appropriate security context. I hope this helps!
