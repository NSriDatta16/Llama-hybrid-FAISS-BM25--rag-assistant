[site]: stackoverflow
[post_id]: 1810850
[parent_id]: 1810835
[tags]: 
Sorry, but your looks like statements are false: the callback executes only after the event is completed. From the jQuery documentation for the callback parameter: A function to be executed whenever the animation completes , executes once for each element animated against. Source Try the following code on your computer. If this doesn't convince you that the docs are right, then I don't know what will. jQuery Animate, Callback Test $(function() { $(' Incoming! ') .appendTo(document.body) .css('font-size', '14px') .animate({ fontSize: '42px' }, 1500, 'linear', function() { $(this).text('Boom!').css('color', 'red'); }); }); The text will get bigger, then say "boom!" and turn red when the animation is complete. The animation will proceed without stopping by default because there is a queue . A queue is simply a list of pending animations that jQuery cycles through until it is empty. To forgo the queue, you need to use one of the overloaded versions of animate: $(this).animate({ opacity: 1.0, width: '234px' }, { queue: false, // This skips the queue duration: 'fast', complete: function() { alert('the callback'); } // Your callback goes here... }); Also, named functions must be passed without the parenthesis (the surrounding curly marks of this fragment) or else the function will be executed. var temp = myFunc(); // gets called and the result is assigned... var temp = myFunc; // but this doesn't get called, and the function is passed.
