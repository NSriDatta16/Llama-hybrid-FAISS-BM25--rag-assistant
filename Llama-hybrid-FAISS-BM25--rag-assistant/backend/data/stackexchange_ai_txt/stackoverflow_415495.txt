[site]: stackoverflow
[post_id]: 415495
[parent_id]: 415434
[tags]: 
Having 100% code coverage doesn't mean you have fully tested your application. Consider the following code: if (qty > 3) { applyShippingDiscount(); } else { chargeFullAmountForShipping(); } I can get 100% code coverage if I pump in values of qty = 1 and qty = 4. Now imagine my business condition was that "...for orders of 3 or more items I am to apply a discount to the shipping costs..". Then I would need to be writing tests that worked on the boundaries. So I would design tests where qty was 2,3 and 4. I still have 100% coverage but more importantly I found a bug in my logic. And that is the problem that I have with focusing on code coverage alone. I think that at best you end up with a situation where the developer creates some initial tests based on the business rules. Then in order to drive up the coverage number they reference their code when design new test cases.
