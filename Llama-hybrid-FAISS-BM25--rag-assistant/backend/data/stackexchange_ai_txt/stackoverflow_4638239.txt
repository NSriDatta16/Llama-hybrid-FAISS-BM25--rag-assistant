[site]: stackoverflow
[post_id]: 4638239
[parent_id]: 4635702
[tags]: 
Perhaps with your architecture a bad solution can be with IsolatedStorageFile which you may simulate ASP.NET's session! From my understanding, you are trying to overuse the MV-VM pattern in your app! One of the important reason ViewModel came in our life is because of unit testable! If I were you, I would have had a Customer ViewModel and use it in all my child-usercontrols ! Depending on the complexity and isolation if child controls requires it own separate ViewModel , you may consider a parent ViewModel and have properties of the child ViewModel . public class ParentViewModel : FrameworkElement { Child1ViewModel Child1 { get; set; } //Must be a dependency property Child1ViewModel Child2 { get; set; } //Must be a dependency property ICommand SaveButtonCommand; //Your delegate command of your save button public ParentViewModel() { Child1 = new Child1ViewModel(); Child2 = new Child2ViewModel(); } } And you can use this parent view on your Parent XAML You also have ICommand SaveButtonCommand in your ParentViewModel and manipulate with the properties in your child ViewModel when clicked! Hope it helped!
