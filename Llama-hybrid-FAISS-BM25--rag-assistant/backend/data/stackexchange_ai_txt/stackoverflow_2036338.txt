[site]: stackoverflow
[post_id]: 2036338
[parent_id]: 2036251
[tags]: 
I assume you're talking about actual binary search trees where the nodes are added using algorithms to maximize retrieval performance. As opposed to a simple tree where each node has a maximum of 2 child nodes. A linked list is often unsorted and so addition of new nodes is simply an O(1) operation normally by appending to the tail of the list. On the other hand a binary tree must store nodes in a specific ordering mechanism (and possibly enforce balancing) to provide for a more efficient searching/retrieval operation. If your algorithm does NOT need to retrieve items very efficiently while also provide efficient sorting of the items, a linked list is probably all you need. Queues and Stacks are examples of data structures that can be happily implemented using a linked list. Note: Insertion to a linked list is a different (slower) operation than basic addition/append. Insertion often requires traversal along the list until the correct position is found, O(n) where n is the list length. An append is simply adding to the tail of the list (hence O(1))
