[site]: stackoverflow
[post_id]: 3774277
[parent_id]: 3774204
[tags]: 
Interface inheritance is public inheritance, while implementation inheritance is private inheritance. If class B publicly inherits from A, B is an A: it inherits the whole interface of A, and a (reference/pointer to) a B object can be automatically be upcasted to A, and used wherever an object of A is expected. However, if B privately inherits from A, B is-implemented-in-terms-of A: only the implementation of A is inherited, not its interface. Thus (references/pointers to) B objects can not be used in places where A objects are expected. Update To reflect on @Michal's comment, here are some links (based largely on googling "c++ implementation inheritance" ) to demonstrate the common usage of these terms in the context of C++: C++ Design/Coding tips - Part 7 Interfaces Uses and Abuses of Inheritance, Part 1
