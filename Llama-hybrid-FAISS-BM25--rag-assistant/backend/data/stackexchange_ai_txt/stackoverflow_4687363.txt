[site]: stackoverflow
[post_id]: 4687363
[parent_id]: 
[tags]: 
Responding to an Event that May Have Already Occurred

I'm debating two approaches to a pretty typical problem: Knowing when an event occurs or responding to it immediately if it already HAS occurred. In approach one, a user of MyLoader1 adds an event listener which will be fired immediately if the loader is already complete. class MyLoader1 extends EventDispatcher { private var _isComplete:Boolean = false; public override function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void { super.addEventListener(type, listener, useCapture, priority, useWeakReference); // if the operation is already complete, immediately notify listeners if(_isComplete) { dispatchEvent(new Event(Event.COMPLETE)); } } } class Application1() { function main():void { new MyLoader1().addEventListener(Event.COMPLETE, onComplete); } } In approach 2, a user of MyLoader2 must first check the completion status of MyLoader2 before deciding whether to proceed or add a listener, which is fired later. class MyLoader2 extends EventDispatcher { private var _isComplete:Boolean = false; public function get isComplete():void { return _isComplete; } } class Application2() { function main():void { var loader:MyLoader2 = new MyLoader2(); if(loader.isComplete) { // passing null just to simplify the example onComplete(null); } else { loader.addEventListener(Event.COMPLETE, onComplete); } } } What advantages/disadvantages are there to each approach? Is there a design pattern out there that I could/should be using for this situation? I'm leaning towards the first because it requires less knowledge of the Loader class and less code to leverage it. It could potentially create unwanted side effects when there are multiple listeners though, because the event will fire once for each time a listener is added. The second method is understandable and easier to debug, but requires more up front work and seems to break encapsulation of the Loader.
