[site]: stackoverflow
[post_id]: 880104
[parent_id]: 880090
[tags]: 
All you have updated is a local variable; for that to work you would have to copy the member values from entity to item - not quite so simple. Something like below; the only reason I used TKey was that I tested on Northwind.Customer, which has a string key ;-p The advantage of using the meta-model is that it works even if you are using POCO classes (and the xml-based mapping), and it doesn't try to update anything unrelated to the model. For the purposes of the example, I have passed in the data-context, and you need to add a SubmitChanges at some point, but the rest should be directly comparable. BTW - if you are happy to take the ID from the passed in object, that would be easy too - and then you could support composite identity tables. static void Update (DataContext dataContext, int id, TEntity obj) where TEntity : class { Update (dataContext, id, obj); } static void Update (DataContext dataContext, TKey id, TEntity obj) where TEntity : class { // get the row from the database using the meta-model MetaType meta = dataContext.Mapping.GetTable(typeof(TEntity)).RowType; if(meta.IdentityMembers.Count != 1) throw new InvalidOperationException("Composite identity not supported"); string idName = meta.IdentityMembers[0].Member.Name; var param = Expression.Parameter(typeof(TEntity), "row"); var lambda = Expression.Lambda >( Expression.Equal( Expression.PropertyOrField(param, idName), Expression.Constant(id, typeof(TKey))), param); object dbRow = dataContext.GetTable ().Single(lambda); foreach (MetaDataMember member in meta.DataMembers) { // don't copy ID if (member.IsPrimaryKey) continue; // removed: || member.IsVersion // (perhaps exclude associations and timestamp/rowversion? too) // if you get problems, try using StorageAccessor instead - // this will typically skip validation, etc member.MemberAccessor.SetBoxedValue( ref dbRow, member.MemberAccessor.GetBoxedValue(obj)); } // submit changes here? }
