[site]: stackoverflow
[post_id]: 5729960
[parent_id]: 5729683
[tags]: 
The other answers have addressed the problem with your code, but I wanted to offer an alternative. If there are a limited, finite number of methods that your retrieval class is choosing from, and they have the same signatures, this can be done much more efficiently without using reflection: public int MethodIndex {get;set;} public static void Main() { PropertyRetrievalClass obj = new PropertyRetrievalClass(); Func getChartMethod; switch(MethodIndex) { case 1: getChartMethod = obj.get_chart_1; break; case 2: getChartMethod = obj.get_chart_2; break; } string output= getChartMethod("asldkl"); } If there were a lot, you could just create an array instead of using a switch. Obviously you could just run the appropriate function directly from the switch, but I assume that the idea is you may want to pass the delegate back to the caller, and a construct like this lets you do that without using reflection, e.g. public static Func GetMethod { ... just return getChartMethod directly }
