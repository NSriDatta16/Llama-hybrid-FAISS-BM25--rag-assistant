[site]: crossvalidated
[post_id]: 364720
[parent_id]: 364568
[tags]: 
The diagonal of the variance matrix of the model parameters contains the variances of all the coefficients. If you take the square root of the diagonal elements you'll get the standard errors of the intercept plus the spline coefficients: > fit vcov(fit) (Intercept) s(log2.time).1 s(log2.time).2 (Intercept) 3.122736e-04 -1.059763e-18 -3.707237e-20 s(log2.time).1 -1.059763e-18 3.968441e-03 3.479426e-08 s(log2.time).2 -3.707237e-20 3.479426e-08 3.122736e-04 > sqrt(diag(vcov(fit))) (Intercept) s(log2.time).1 s(log2.time).2 0.01767127 0.06299556 0.01767127 If you use vcov(fit, unconditional = TRUE) you'll get a (Bayesian) covariance matrix adjusted for having estimated the smoothness parameter, $\lambda$. Without this, the uncertainty on the spline coefficients is too small as it assumes $\lambda$ is known. The values shown by coef(fit) are the parameters for the two thin plate spline basis functions used in the model. They are not the slopes of the fitted spline itself however; the slope or first derivative of the spline is varying throughout the range of $x$. You can estimate the slope of the spline at any point using finite differences if you want that, and compute a confidence interval on that slope. There is only one spline here, built up from two basis functions (well three depending on how you look at it, but one of those is the intercept). Your use of "spline" and "slope" are a little confusing â€” if you care to clarify I will update this answer should elements of it be irrelevant or lacking. Note that your model was actually fitted using k = 3 and then the constant basis function was dropped, hence a maximum of 2 degrees of freedom for the smoother. However even this has been penalized a little; if you don't want penalization (smoothness selection, or estimation of $\lambda$), use fx = TRUE . Update: If you want piecewise-linear fits then you can achieve this with the b-spline basis bs = 'bs' : fit where m = 1 now refers to the order of the spline, not the penalty. In this model the hinge point of the fit is in the middle of the data. Removing the k = 3 results in the default fit with k = 10 . The coefficients are still not the slopes of the linear sections however. You should be able to extract the derivative of the spline from the b-spline basis but I haven't worked out how to coax mgcv into yielding that info just yet. However, you can get this with finite differences. library('mgcv') devtools::install_github('gavinsimpson/gratia') library('gratia') # for finite differences-based derivatives library('ggplot2') library('cowplot') theme_set(theme_bw()) ## fit piecewise-linear model fit
