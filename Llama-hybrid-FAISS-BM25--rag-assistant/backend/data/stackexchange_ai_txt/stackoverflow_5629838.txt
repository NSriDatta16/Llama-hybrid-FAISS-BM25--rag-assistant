[site]: stackoverflow
[post_id]: 5629838
[parent_id]: 
[tags]: 
Can't Seem To Fix This Basic Save/Fetch Request

Its been like 3 weeks now that I've been seeking help on this site for this simple save/fetch feature using Core Data but I can't get it to work. I keep getting different suggestions from people and change my code accordingly but can never get it working properly. Its very discouraging that its taken me this long for this simple error yet I did 100x the work in only the week prior to hit. Its really a bummer when learning how to program. Here is the scenario: TableView blank by default until user inputs a name string via the + button in nav bar. String entered should add a cell to the view with the name as the title. It should be saved to memory and fetched upon relaunch of application. The Problem: I get the following error @ line: cell.textLabel.text = [eventsArray objectAtIndex:indexPath.row]; in method of: - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath 2011-04-11 22:40:49.824 Curl[2244:207] -[Routine isEqualToString:]: unrecognized selector sent to instance 0x5c09ad0 2011-04-11 22:40:50.005 Curl[2244:207] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[Routine isEqualToString:]: unrecognized selector sent to instance 0x5c09ad0' My Data Model: ViewController Code: `@implementation RoutineTableViewController @synthesize tableView; @synthesize eventsArray; @synthesize entered; @synthesize managedObjectContext; #pragma mark - View lifecycle - (void)viewDidLoad { if (managedObjectContext == nil) { managedObjectContext = [(CurlAppDelegate *)[[UIApplication sharedApplication] delegate] managedObjectContext]; } NSFetchRequest *request = [[NSFetchRequest alloc] init]; NSEntityDescription *entity = [NSEntityDescription entityForName:@"Routine" inManagedObjectContext:managedObjectContext]; [request setEntity:entity]; NSError *error = nil; NSMutableArray *mutableFetchResults = [[managedObjectContext executeFetchRequest:request error:&error] mutableCopy]; if (mutableFetchResults == nil) { // Handle the error. } [self setEventsArray:mutableFetchResults]; [mutableFetchResults release]; [request release]; UIBarButtonItem * addButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(showPrompt)]; [self.navigationItem setLeftBarButtonItem:addButton]; [addButton release]; UIBarButtonItem *editButton = [[UIBarButtonItem alloc]initWithTitle:@"Edit" style:UIBarButtonItemStyleBordered target:self action:@selector(toggleEdit)]; self.navigationItem.rightBarButtonItem = editButton; [editButton release]; [super viewDidLoad]; } - (void)viewDidUnload { self.eventsArray = nil; [super viewDidUnload]; } -(void)toggleEdit { [self.tableView setEditing: !self.tableView.editing animated:YES]; if (self.tableView.editing) [self.navigationItem.rightBarButtonItem setTitle:@"Done"]; else [self.navigationItem.rightBarButtonItem setTitle:@"Edit"]; } - (void)dealloc { [managedObjectContext release]; [eventsArray release]; [super dealloc]; } - (void)didReceiveMemoryWarning { [super didReceiveMemoryWarning]; } #pragma mark - #pragma mark Add an event -(void)addEvent { Routine *routine = (Routine *)[NSEntityDescription insertNewObjectForEntityForName:@"Routine" inManagedObjectContext:managedObjectContext]; routine.name=entered; NSError *error = nil; if (![managedObjectContext save:&error]) { // Handle the error. } NSLog(@"%@", error); [eventsArray insertObject:routine atIndex:0]; NSIndexPath *indexPath = [NSIndexPath indexPathForRow:0 inSection:0]; [self.tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade]; [self.tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0] atScrollPosition:UITableViewScrollPositionTop animated:YES]; } -(void)showPrompt { AlertPrompt *prompt = [AlertPrompt alloc]; prompt = [prompt initWithTitle:@"Add Workout Day" message:@"\n \n Please enter title for workout day" delegate:self cancelButtonTitle:@"Cancel" okButtonTitle:@"Add"]; [prompt show]; [prompt release]; } - (void)alertView:(UIAlertView *)alertView willDismissWithButtonIndex:(NSInteger)buttonIndex { if (buttonIndex != [alertView cancelButtonIndex]) { entered = [(AlertPrompt *)alertView enteredText]; if(eventsArray && entered) { [eventsArray addObject:entered]; [tableView reloadData]; [self addEvent]; } } } #pragma mark - Table view data source - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView { return 1; } - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { return [eventsArray count]; } - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { static NSString *CellIdentifier = @"Cell"; // Dequeue or create a new cell. UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier]; if (cell == nil) { cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier] autorelease]; } cell.textLabel.text = [eventsArray objectAtIndex:indexPath.row]; cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator; return cell; } // Override to support conditional editing of the table view. - (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath { // Return NO if you do not want the specified item to be editable. return YES; } -(void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath { if (editingStyle == UITableViewCellEditingStyleDelete) { // Delete the managed object at the given index path. NSManagedObject *eventToDelete = [eventsArray objectAtIndex:indexPath.row]; [managedObjectContext deleteObject:eventToDelete]; // Update the array and table view. [eventsArray removeObjectAtIndex:indexPath.row]; [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:YES]; // Commit the change. NSError *error = nil; if (![managedObjectContext save:&error]) { // Handle the error. } } }`
