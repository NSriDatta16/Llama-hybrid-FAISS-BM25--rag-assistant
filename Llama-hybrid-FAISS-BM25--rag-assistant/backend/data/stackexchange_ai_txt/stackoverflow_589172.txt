[site]: stackoverflow
[post_id]: 589172
[parent_id]: 589145
[tags]: 
Given a global array of Color objects named colorTable, this function will find the color from the following colorspace that is the closest* to each one in that array, and then the one of those colors that was farthest away: Red, Green, Blue components a multiple of 4 Red+Green+Blue between 256 and 512 *:"closest" is defined as the lowest sum of squares of difference for each color component. As Paul determined, this seems like a plausible, if insanely inefficiently implemented, naive approach to finding a single color that provides a high contrast with the contents of colorTable. The same result could be found with a single pass through colorTable and a bit more math, instead of some 5 million passes through colorTable, and there are much better ways to find a different color that provides a much higher average contrast.
