[site]: stackoverflow
[post_id]: 1060128
[parent_id]: 1058848
[tags]: 
Update : The text below refers to a method of storing template and XML files outside of the app/design folder. Over the years since this answer was written, this has been strongly discouraged my the Magento core team. They've gone so far as to enforces this at the application level with code, and continued to block new techniques as they've been developed. It's strongly discouraged, but I'm leaving the answer as it is for historical reasons. First, you may want to consider placing your layout file somewhere in your module. I'm not sure how widespread the practice is, but it makes sense from distribution point of view. It also ensures your layout overrides will apply, even if someone changes the theme from default. Doing something like this should work ../../../../../code/local/Packagename/Modulename/layouts/tm.xml Second, as you've noted, with your XML above you're completely replacing checkout.xml in your magento install. You don't want to do this. Instead, you want to add your layout updates (the contents of that XML file) to Magento's list of available updates. So do something like this instead. ../../../../../code/local/Packagename/Modulename/layouts/tm.xml The big change here is we've changed to be . Magento loads all the XML specified in this section into something called a package layout. So with this, your XML will be living alongside the XML in checkout.xml. In tm.xml, you'll setup your specific rules for multi-shipping The big thing to keep in mind here is, the existing rules in checkout.xml for multi-shipping will still exist. You'll need to write rules to override what those rules are doing. This is how Magento's layout system works. I'd recommend looking over the Magento Designer's Guide if you haven't already, particularly the Intro to Layouts section. One final note, you mentioned you're overriding controllers. If you're verriding the multi-shipping controller, you'll need to use tags, you'll need to use tags that match the name of the action controller/action method combination for that page on your controller
