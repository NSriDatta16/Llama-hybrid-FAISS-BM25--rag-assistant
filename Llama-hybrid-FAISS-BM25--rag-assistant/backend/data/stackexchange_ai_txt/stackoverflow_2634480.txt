[site]: stackoverflow
[post_id]: 2634480
[parent_id]: 
[tags]: 
What is the fastest collection in c# to implement a prioritizing queue?

I need to implement a FIFO queue for messages on a game server so it needs to as fast as possible. There will be a queue for each user. The queue will have a maxiumem size (lets say 2000). The size won't change during runtime. I need to prioritize messages ONLY if the queue reaches its maximum size by working backwards and removing a lower priority message (if one exists) before adding the new message. A priority is an int with possible values of 1, 3, 5, 7, 10. There can be multiple messages with the same priority. A message cannot change its priority once allocated. The application is asynchronous so access to the queue needs to be locked. I'm currently implementing it using a LinkedList as the underlying storage but have concerns that searching and removing nodes will keep it locked for too long. Heres the basic code I have at the moment: public class ActionQueue { private LinkedList _actions = new LinkedList (); private int _maxSize; /// /// Initializes a new instance of the ActionQueue class. /// public ActionQueue(int maxSize) { _maxSize = maxSize; } public int Count { get { return _actions.Count; } } public void Enqueue(ClientAction action) { lock (_actions) { if (Count node = _actions.Last; while (node != null) { if (node.Value.Priority
