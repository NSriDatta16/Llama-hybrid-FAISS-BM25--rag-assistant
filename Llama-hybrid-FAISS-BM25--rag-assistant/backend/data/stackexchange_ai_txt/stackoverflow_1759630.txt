[site]: stackoverflow
[post_id]: 1759630
[parent_id]: 1451144
[tags]: 
It's possible to remove diacritics using Unicode normalization form D (NFD) and Unicode character properties. NFD converts something like the "ü" umlaut from "LATIN SMALL LETTER U WITH DIAERESIS" (which is a letter) to "LATIN SMALL LETTER U" (letter) and "COMBINING DIAERESIS" (not a letter). $test = implode('', array('á','à','â','ã','ª','ä','å','Á','À','Â','Ã','Ä','é','è', 'ê','ë','É','È','Ê','Ë','í','ì','î','ï','Í','Ì','Î','Ï','œ','ò','ó','ô','õ','º','ø', 'Ø','Ó','Ò','Ô','Õ','ú','ù','û','Ú','Ù','Û','ç','Ç','Ñ','ñ')); $test = Normalizer::normalize($test, Normalizer::FORM_D); // Remove everything that's not a "letter" or a space (e.g. diacritics) // (see http://de2.php.net/manual/en/regexp.reference.unicode.php) $pattern = '/[^\pL ]/u'; $result = preg_replace($pattern, '', $test); // Re-encode in NFC (we assume that "UTF-8" more or less means "UTF-8 in NFC"). // (I'm not 100 % sure this is necessary. But it won't do any harm.) $resultNfc = Normalizer::normalize($result, Normalizer::FORM_C); var_dump($resultNfc); // string(55) "aaaaªaaAAAAAeeeeEEEEiiiiIIIIœooooºøØOOOOuuuUUUcCNn" The Normalizer class is part of the PECL intl package . (The algorithm itself isn't very complicated but needs to load a lot of character mappings afaik. I wrote a PHP implementation a while ago.)
