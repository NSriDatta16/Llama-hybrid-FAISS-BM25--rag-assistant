[site]: stackoverflow
[post_id]: 3392910
[parent_id]: 
[tags]: 
Data structure for matching sets

I have an application where I have a number of sets. A set might be {4, 7, 12, 18} unique numbers and all less than 50. I then have several data items: 1 {1, 2, 4, 7, 8, 12, 18, 23, 29} 2 {3, 4, 6, 7, 15, 23, 34, 38} 3 {4, 7, 12, 18} 4 {1, 4, 7, 12, 13, 14, 15, 16, 17, 18} 5 {2, 4, 6, 7, 13, 15} Data items 1, 3 and 4 match the set because they contain all items in the set. I need to design a data structure that is super fast at identifying whether a data item is a member of a set includes all the members that are part of the set (so the data item is a superset of the set). My best estimates at the moment suggest that there will be fewer than 50,000 sets. My current implementation has my sets and data as unsigned 64 bit integers and the sets stored in a list. Then to check a data item I iterate through the list doing a ((set & data) == set) comparison. It works and it's space efficient but it's slow (O(n)) and I'd be happy to trade some memory for some performance. Does anyone have any better ideas about how to organize this? Edit: Thanks very much for all the answers. It looks like I need to provide some more information about the problem. I get the sets first and I then get the data items one by one. I need to check whether the data item is matches one of the sets. The sets are very likely to be 'clumpy' for example for a given problem 1, 3 and 9 might be contained in 95% of sets; I can predict this to some degree in advance (but not well). For those suggesting memoization: this is this the data structure for a memoized function. The sets represent general solutions that have already been computed and the data items are new inputs to the function. By matching a data item to a general solution I can avoid a whole lot of processing.
