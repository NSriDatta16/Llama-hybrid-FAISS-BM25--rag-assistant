[site]: stackoverflow
[post_id]: 5336458
[parent_id]: 5336320
[tags]: 
This is how dynamic languages work. It is not always a good thing though, especially if the documentation is poor - anyone tried to use a poorly documented python framework? Sometimes you have to revert to reading the source. Here are some strategies to avoid problems with duck typing: create a language for your problem domain this will help you to name stuff properly use types to represent concepts in your domain language name function parameters using the domain language vocabulary Also, one of the most important points: keep data as local as possible! There should only be a few well-defined and documented types being passed around. Anything else should be obvious by looking at the code: Don't have weird parameter types coming from far away that you can't figure out by looking in the vicinity of the code... Related, (and also related to docstrings), there is a technique in python called doctests . Use that to document how your methods are expected to be used - and have nice unit test coverage at the same time!
