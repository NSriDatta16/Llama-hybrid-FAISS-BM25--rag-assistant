[site]: stackoverflow
[post_id]: 4915657
[parent_id]: 4914704
[tags]: 
If you want to use .NET Sockets to create this server-client project, then this is a good outline of what's needed: Since the server will be transferring data to several clients simultaneously, you'll need to use the asynchronous Socket.Beginxxx methods or the SocketAsyncEventArgs class. You'll have clients connect to your server. The server will accept those connections and then add the newly connected client to an internal clients list. You'll have a thread running within the server, that periodically sends notifications to all sockets in the clients list. If any exceptions/errors occurs while sending data to a socket, then that client is removed from the list. You'll have to make sure that access to the clients list is synchronized since the server is a multithreaded application. You don't need to worry about buffering your send data since the TCP stack takes care of that. If you do not want to buffer your data at all (i.e. have the socket send data immediately), then set Socket.NoDelay to true. It doesn't seem like you need any data from your clients, but if you do, you'd have to make sure your server has a Socket.BeginReceive loop if using Socket.BeginXXX pattern or Socket.ReceiveAsync method if using SocketAsyncEventArgs . Once you have the connection and transmission of data between server and client going, you then need to worry about serialization and deserialization of objects between client and server. Serialization which occurs on the server is easy, since you can use the BinaryFormatter or other encoders to encode your object and dump the data onto the socket. Deserialization on the other hand, which occurs on the client, can be pretty complex because an object can span multiple packets and you can have multiple objects in one packet. You essentially need a way to identify the beginning and end of an object within the stream, so that you can pluck out the object data and deserialize it. One way to do this is to embed your data in a well known protocol, like HTTP, and send it using that format. Unfortunately, this also means you'd have to write a HTTP parser at the client. Not an easy task. Another way is to leverage an existing encoding scheme like Google's protocol buffers . This approach would require learning how to use the protocol buffers stack. You can also embed the data in an XML structure and then have a stream-to-XML decoder on your client side. This is probably the easiest approach but the least efficient. As you can see, this is not an easy project, but you can get started with the Socket.BeginSend examples here and here , and the SocketAsyncEventArgs example here Other Tips: You can improve the reliability of your communication by having the client maintain two connections to the server for redundancy purposes. The reason being that TCP connections take a while to establish, so if one fails, you can still receive data from the other one while the client attempts to reconnect the failed connection. You can look into using TCPClient class for the client implementation, since it's mostly reading a stream from a network connection.
