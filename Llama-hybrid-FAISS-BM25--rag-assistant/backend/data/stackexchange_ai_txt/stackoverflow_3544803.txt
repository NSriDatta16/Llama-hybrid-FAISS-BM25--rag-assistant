[site]: stackoverflow
[post_id]: 3544803
[parent_id]: 3544701
[tags]: 
The UIViewControllers that are pushed onto the navigation stack can do the something like the following: - (void)viewWillAppear:(BOOL)animated { self.tabBarController.tabBar.hidden = NO; // Or YES as desired. } EDIT: Added additional code below to deal with the frame. Don't think I particular recommend this idea since it relies on the internal default view structure of a UITabBarController. Define the following category on UITabBarController: @interface UITabBarController (Extras) - (void)showTabBar:(BOOL)show; @end @implementation UITabBarController (Extras) - (void)showTabBar:(BOOL)show { UITabBar* tabBar = self.tabBar; if (show != tabBar.hidden) return; // This relies on the fact that the content view is the first subview // in a UITabBarController's normal view, and so is fragile in the face // of updates to UIKit. UIView* subview = [self.view.subviews objectAtIndex:0]; CGRect frame = subview.frame; if (show) { frame.size.height -= tabBar.frame.size.height; } else { frame.size.height += tabBar.frame.size.height; } subview.frame = frame; tabBar.hidden = !show; } @end Then, instead of using the tabBar.hidden change I originally suggested, do the following: - (void)viewWillAppear:(BOOL)animated { [super viewWillAppear:animated]; [self.tabBarController showTabBar:NO]; } Obviously making sure that the implementation has included the category definition so that 'showTabBar' is known.
