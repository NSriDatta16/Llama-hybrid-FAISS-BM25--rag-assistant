[site]: stackoverflow
[post_id]: 2201715
[parent_id]: 2200912
[tags]: 
Writing Python types in C that are inheritable is explained in PEP 253 . It's not all that different from writing a normal builtin type as explained in the Extending/Embedding guide but you have to do certain things, like attribute access, through the Python API instead of accessing anything directly. Exposing the Python subclasses back to C++ code is a little more tedious. The Python classes won't be C++ subclasses, so you need a C++ wrapper class (that does inherit from Listener ) that contains a PyObject* for the Python subclass instance, and that has a notify method that translates the arguments to Python objects, calls the notify method of the PyObject* (using, e.g., PyObject_CallMethod ), translates the result back to C++ types, and returns.
