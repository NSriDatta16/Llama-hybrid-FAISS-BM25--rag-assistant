[site]: stackoverflow
[post_id]: 1235101
[parent_id]: 1234852
[tags]: 
You tagged the question as bash, so I'm going to assume you're asking how to do this in a bash script. Unfortunately, the built-in regular expression matching doesn't save string indices. However, if you're asking this in order to extract the match substring, you're in luck: if [[ "$var" =~ "$regex" ]]; then n=${#BASH_REMATCH[*]} while [[ $i -lt $n ]] do echo "capture[$i]: ${BASH_REMATCH[$i]}" let i++ done fi This snippet will output in turn all of the submatches. The first one (index 0) will be the entire match. You might like your awk options better, though. There's a function match which gives you the index you want. Documentation can be found here . It'll also store the length of the match in RLENGTH , if you need that. To implement this in a bash script, you could do something like: match_index=$(echo "$var_to_search" | \ awk '{ where = match($0, '"$regex_to_find"') if (where) print where else print -1 }') There are a lot of ways to deal with passing the variables in to awk. This combination of piping output and directly embedding one into the awk one-liner is fairly common. You can also give awk variable values with the -v option (see man awk ). Obviously you can modify this to get the length, the match string, whatever it is you need. You can capture multiple things into an array variable if necessary: match_data=($( ... awk '{ ... print where,RLENGTH,match_string ... }'))
