[site]: stackoverflow
[post_id]: 5608850
[parent_id]: 5608834
[tags]: 
For all intents and purposes, vectors are arrays with added niceties. Random access is as fast as the C-style array. Removing/inserting elements in the middle of a vector is slow - but the same applies to C-style arrays, too. Shell sort should be as fast on vectors as it is on arrays. To me, it sounds like you're doing something unorthodox. Quicksort or introsort ( std::sort is one) should be the fastest comparison-based sorts available to you. Mergesort is slightly slower than quicksort, but it does not have quicksort's susceptibility to pathological cases. On average, all of those take O(n lg n) time (with quadratic worst-case for quicksort). EDITED UPDATE Code: C-array and Vector based shellsorts. With optimisations or without, sorting 1 million elements takes twice as long for vectors, for a reason unbeknown to me. Looks like STL is doing a lot of error-checking when you access a vector.
