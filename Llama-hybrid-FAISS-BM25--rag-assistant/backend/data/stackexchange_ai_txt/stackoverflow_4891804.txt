[site]: stackoverflow
[post_id]: 4891804
[parent_id]: 4880691
[tags]: 
It helps with OOP to talk about the objects in terms of is a and has a . A World has a list of Agents and a list of Locations . A Location has an Agent . An Agent has a Location and a World . class Agent: def __init__(self, world): self.location = None self.world = world def move(self, new_location): if self.location is not None: self.location.agent = None new_location.agent = self self.location = new_location def update(self): for new_location in self.world.locations: if self.location_is_good(new_location): self.move(new_location) def location_is_good(self, location): if location.agent is not None: return False class Location: def __init__(self, x, y): self.x = x self.y = y self.agent = None Go through the mental exercise of adding a new attribute to a Location , such as terrain, and it's easy to see the benefits of such encapsulation. Likewise, adding new things to Agent , such as a weapon, just requires a weapon-specific function similar to move() . Note that the World doesn't need to get involved in the move() at all. The move is handled strictly between the Agent and the Location .
