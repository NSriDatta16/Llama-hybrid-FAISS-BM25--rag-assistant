[site]: stackoverflow
[post_id]: 4715298
[parent_id]: 4714387
[tags]: 
I am checking if the student filled the form in or not with the 'form_activated' attribute. I don't know if this a good approach but it is the only one I imagine. Firstly, the session is not a persistent data-store. It gets destroyed on logout. Any changes to session data after login will not be available at the next login, unless you persist and restore these somehow. It seems that it's not reading $this->Session->read('Auth.Student.id'),I guess that you can only use this with Auth.User, anybody knows how could it be to read the parameters of student with the SessionHelper? You are trying to access both Auth.User and Auth.Student during the login action of your application, which suggests (given the code provided) that you may be misunderstanding something. On login, AuthComponent copies the user from the database (typically a record in the users table) into the session (typically Auth.User ). (Aside: you can change this default behaviour slightly by setting the $this->Auth->userModel = 'Student' in your application. This would make AuthComponent read records from the Student model - the students table by default - on login and put them under Auth.Student in the session.) As such, during your login() action above, AuthComponent will have only set Auth.User (or Auth.Student if you were using a Student model) and not both! Do I have to use a query? Well, not that you can "query" sessions as such, but this may be the solution. MySQL is probably the persistent data-store your are using for your application. You need to store this information (ie. if a student has filled a form) in MySQL if it is to survive session destroys/timeouts (ie. logouts). If you can simply store this information in the user's record (in the users table by default), then AuthComponent will obviously copy the information to the session. Otherwise, it is up to you to determine if the information is only needed once (in which case, just query the database) or many times throughout you application (then you would query the database and store the information in the session for caching purposes). Basically, anything over and above AuthComponent's ability of copying a user's database record to the session (and destroying the session on logout) will involve writing extra code to store/retrieve/persist/restore the needed information. Each query performed hits the database server. If you need some information often (eg. you might show the name of a student's class on all pages) then it doesn't make sense to constantly hit the database asking for the same information, so using a user's session as storage can prevent that need. Since Model::find() returns arrays and SessionComponent::write() accepts arrays, moving data between the database and session (or back again) is fairly straightforward. An example of when you literally have to update the session is when a user edit's their own user record in the database. The user data you rely on in the session (eg. the person's name) may now be stale (if they changed their name). Without requiring the user to log out and back in again (to create a new session), you could do the following: class UsersController extends AppController { public function edit($id = null) { // .. if ($this->User->save($this->data)) { $user = $this->User->read(null, $this->User->id); // get latest record $this->Session->write('Auth.User', $user['User']); // overwrite session // .. } } } Another example might be an application that uses a user's address to deliver maps or localised results on most pages. You could look up their address, which we know we will be needing, and store this in the session (eg. when the user logs in). class UsersController extends AppController { public function login() { if ($this->Auth->login()) { $address = $this->User->Address->find('first', array( 'conditions' => array( 'Address.user_id' => $this->Auth->user('id'), 'Address.default' => true, ) )); if ($address) { $this->Session->write('Address', $address['Address']); } } } } We can now do things like $this->Session->read('Address.latitude') to retrieve this information frequently without the added overhead of talking to MySQL.
