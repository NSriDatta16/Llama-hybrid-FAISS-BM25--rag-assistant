[site]: stackoverflow
[post_id]: 2028600
[parent_id]: 2028524
[tags]: 
When a process wants to farm data and the processing of that data out to another process (possibly on a different host), there are 2 strategies: Stuff all your data into the queue item and let the receiving app worry about storing it in the database, among with whatever other processing. Update your database, and then queue a tiny message to the other process just to notify it that there's new data to be massaged. There are a number of factors that can be used to decide on which strategy: If your database is fully ACID (one would hope) but your queueing system (QS) is not, your data would be safer in the DB. Even if the queue message gets lost in a server crash, you could run a script to process unprocessed data found in the DB. This would be a case for option 2. If your data is quite large (say, 1 MB or more) then it might be cruel to burden your QS with it. If it's persistent, you'll end up writing the data twice, first to the QS's persister and later to the DB. This could be a drag on performance and influence you to go for option 1. If your DB is slow or not even accessible to your app's front end, then option 1 it is. If your second process is going to do something with the data but not store it in a DB, then option 1 may be the way to go. Can't think of any more, but I hope you get the idea.
