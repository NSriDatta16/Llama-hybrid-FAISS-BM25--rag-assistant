[site]: stackoverflow
[post_id]: 4146710
[parent_id]: 4142861
[tags]: 
Your way is readable and easy to understand which means it's easy to maintain. Restating your boolean using de Morgan's laws : if (not($a and $b and $c)) { warn(qq(Not all variables are initialized!)) } That way, you're not prefixing not in front of every variable, and it doesn't affect readability. You can use List::Util or List::MoreUtils , but they don't really add to the legibility. As Sinan Ünür stated, if you put the variables in a hash, you could parse through the hash and then list which variables weren't initialized. This might be best if there are a lot of these variables, and the list keeps changing. foreach my $variable qw(a b c d e f g h i j) { if (not $param{$variable}) { warn qq(You didn't define $variable\n); } } You can use Getopts::Long to put your parameter values inside a hash instead of separate variables. Plus, the latest versions of Getopts::Long can now operate on any array and not just @ARGV .
