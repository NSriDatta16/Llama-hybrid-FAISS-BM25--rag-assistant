[site]: stackoverflow
[post_id]: 1946918
[parent_id]: 
[tags]: 
Where would you use a Builder Pattern instead of an Abstract Factory?

I've seen this question rise here and there a few times, but I never found and answer I was happy with. From Wikipedia: Builder focuses on constructing a complex object step by step. Abstract Factory emphasizes a family of product objects (either simple or complex). Builder returns the product as a final step, but as far as the Abstract Factory is concerned, the product gets returned immediately. But to the client isn't it the same thing? He gets the full object once it's built, so to him there is no added functionality. The only way I see it is as a way or organizing the constructor code in steps, to force a structure for the implementation of the builders. Which is nice, but hardly a great step from the abstract factory. This next bit from Wikipedia is a good reference to get to my point: Often, designs start out using Factory Method (less complicated, more customizable, subclasses proliferate) and evolve toward Abstract Factory, Prototype, or Builder (more flexible, more complex) as the designer discovers where more flexibility is needed. If that's so, what kind of complexity would have to be introduced in your system where you would change from a Abstract Factory to a Builder? My point is that I can't find and example where it's clear that an Abstract Factory won't suffice and you would need a Builder instead.
