[site]: stackoverflow
[post_id]: 5007480
[parent_id]: 5007161
[tags]: 
You can develop directly from a submodule (as I explained in " true nature of submodules "). But each time you commit something in the submodule (and publish it somewhere), you need to make sure to commit as well in the parent repository. Now you have two submodules organizations: recursive includes A Common (Common could depend itself on other dependencies) B Common ... or direct includes (direct dependencies only) ParentA A Common Other A dependencies ParentB B Common Other B dependencies (Actually, if Common had dependencies of its own, A or B would depend on " ParentCommon " which would refer to Common and all its direct dependencies) Unless you have a structural imperative where Common must be a subdirectory of A , I would recommend the second organization, which is closer to your C:\dev\A , C:\dev\Common one. Actually, I prefer only one depth dependencies , where for ParentA , I list all dependencies, direct and indirect, as submodules. That is because, with any tool attempting to manage dependencies, you will still need to make decisions on: dependencies conflicts ( A depends on X which needs Z1 , and Y which needs Z2 : which version of Z do you want to use/compile in your project?) dependencies override (when A depends on X which needs Z1 , whereas A also choose to use X2 ) dependencies cycle (where A depends on B which relies on C which uses... A !)
