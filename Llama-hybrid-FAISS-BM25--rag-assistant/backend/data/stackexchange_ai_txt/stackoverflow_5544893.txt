[site]: stackoverflow
[post_id]: 5544893
[parent_id]: 5543003
[tags]: 
If you have control of your schema you can define a base abstract type that your other types can extend from. I haven't tried this myself so I'm not sure how it XmlBeans will handle it. Otherwise, it's a work-around (hack?) but you could use Commons BeanUtils provided your generated classes follow JavaBean naming convention. If these objects are getting passed around a lot you could create a wrapper class to make the calls a little more concrete. public class Department { XmlObject obj; public Department(XmlObject obj){ if(!obj instanceof DepartmentType || !obj instanceof OrganizatiopnType){ throw new IllegalArgumentException(); } this.obj = obj; } public String getName(){ return (String)PropertyUtils.getProperty(obj, "name"); } } Any problem can be solved with another layer of indirection.....except too much indirection.
