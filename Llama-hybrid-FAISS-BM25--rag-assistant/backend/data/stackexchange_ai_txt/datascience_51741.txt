[site]: datascience
[post_id]: 51741
[parent_id]: 51175
[tags]: 
The SVM.SVC() model is a good choice to go with, though obviously there is more than one option. https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC The 'Target' values I set as the countries included in the dataset, and then labeled using label_encoder as quantitative variables (1-76). After defining the model, I was then able to input via 'clf.predict' 6 variables and get a predicted outcome. Clearly, this model was unable to make an accurate prediction first-time around, but we'll work on it. I'm interested to get more ideas on how to implement this question and to compare the different approaches and improve upon them. Thanks! X = df[['patience','risktaking','posrecip','negrecip','altruism','trust']].values Y = df[['target']].values label_encoder = LabelEncoder() Y = label_encoder.fit_transform(Y) X_train , X_test, y_train, y_test = train_test_split(X,Y) clf = SVC(C=1.0, kernel='rbf').fit(X_train,y_train) prediction = int(clf.predict([[2.2529752, 2.466159, 0.95989114, -1.5864599, 0.47468176, 0.9504338]]))
