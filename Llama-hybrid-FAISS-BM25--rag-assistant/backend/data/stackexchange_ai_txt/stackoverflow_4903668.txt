[site]: stackoverflow
[post_id]: 4903668
[parent_id]: 
[tags]: 
Convert array of paths into UL list

I have a table in a database that contains a variety of paths to pages of my website. Each path is listed only one time. I currently have a very long and convoluted series of queries and PHP to pull all these and rewrite the data into an unordered list (to create a menu for my website). It seems that there is probably a relatively simple looping approach that would work MUCH more efficiently, but I cannot seem to get anything working. I have found TONS of PHP scripts that create UL lists from file trees, but all of them either don't work or can't handle the inherently not recursive nature of my query results (some require multi-dimensional arrays of my paths, which would be fine except for my trouble with creating those). I did find a script that works pretty close, but it formats the portion incorrectly by placing sub-lists outside of the section (I will explain below) Here is a sample: DB returns the following in results array: about/contact/ about/contact/form/ about/history/ about/staff/ about/staff/bobjones/ about/staff/sallymae/ products/ products/gifts/ products/widgets/ and I want to create the following output: about/ about/contact/ about/contact/form/ about/history/ about/staff/ about/staff/bobjones/ about/staff/sallymae/ products/ products/gifts/ products/widgets/ So I got very close with a script found here: http://www.daniweb.com/forums/thread285916.html but I have run into a problem. It turns out that the script that I found creates improperly formatted UL lists. In a CORRECT situation, a sub-list is contained within the of the parent element. In this scripting, the parent is closed and then a block is inserted. The overall script is actually fairly elegant in the way that it keeps up with the levels and such, but I cannot wrap my head around it enough to figure out how to fix it. I have the whole thing in a function here: function generateMainMenu() { global $db; $MenuListOutput = ''; $PathsArray = array(); $sql = "SELECT PageUrlName FROM `table`"; $result = mysql_query($sql, $db) or die('MySQL error: ' . mysql_error()); while ($PageDataArray = mysql_fetch_array($result)) { $PathsArray[] = rtrim($PageDataArray['PageUrlName'],"/"); //this function does not like paths to end in a slash, so remove trailing slash before saving to array } sort($PathsArray);// These need to be sorted. $MenuListOutput .= ' '."\n";//get things started off right $directories=array (); $topmark=0; $submenu=0; foreach ($PathsArray as $value) { // break up each path into it's constituent directories $limb=explode("/",$value); for($i=0;$i $i){ // the previous path had more directories, therefore more Unordered Lists. $MenuListOutput .= str_repeat(" ",$topmark-$i); // Close off the Unordered Lists $MenuListOutput .= "\n";// For neatness } $MenuListOutput .= ' '.$limb[$i]." \n";// Print the Leaf link $topmark=$i;// Establish the number of directories in this path }else{ // It's a directory if($directories[$i]!=$limb[$i]){ // If the directory is the same as the previous path we are not interested. if ($topmark>$i){// the previous path had more directories, therefore more Unordered Lists. $MenuListOutput .= str_repeat(" ",$topmark-$i);// Close off the Unordered Lists $MenuListOutput .= "\n";// For neatness } // (next line replaced to avoid duplicate listing of each parent) //$MenuListOutput .= " ".$limb[$i]." \n \n"; $MenuListOutput .= " \n"; $submenu++;// Increment the dropdown. $directories[$i]=$limb[$i];// Mark it so that if the next path's directory in a similar position is the same, it won't be processed. } } } } $MenuListOutput .= str_repeat(" ",$topmark+1);// Close off the Unordered Lists return $MenuListOutput."\n\n\n"; } and it returns something like this: about history job-opportunities mission privacy-policy giftcards locations main-office branch-office packages Anyone have an idea of where I need to add in some additional logic and how I can accomplish this? Other ideas on a better way to do this? It seems like this is such a common issue that there would be a simple/standard method of handling something like this. Maybe if I could figure out how to create a multi-dimensional array from my paths then those could be iterated to make this work? EDIT: More Complex :-( I tried casablanca's response and it worked perfectly...except I then realized that now I have a follow-up to make things more difficult. In order to display the "name" of the page, I need to also have that info in the array, thus the path probably works better as the array key and the name in the value. Any thoughts on changing like this: $paths = array( "about/contact/ " => "Contact Us", "about/contact/form/ " => "Contact Form", "about/history/ " => "Our History", "about/staff/ " => "Our Staff", "about/staff/bobjones/ " => "Bob", "about/staff/sallymae/ " => "Sally", "products/ " => "All Products", "products/gifts/ " => "Gift Ideas!", "products/widgets/ " => "Widgets" ); and then using something like this line within the buildUL function: echo ' '.$paths[$prefix.$key].' ';
