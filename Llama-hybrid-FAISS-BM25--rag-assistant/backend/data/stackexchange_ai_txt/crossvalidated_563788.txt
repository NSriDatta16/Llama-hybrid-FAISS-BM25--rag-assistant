[site]: crossvalidated
[post_id]: 563788
[parent_id]: 
[tags]: 
Modeling a functional relationship with Constrained Gaussian Process regression

I searched the site for an answer to this question, but the closest I could find was: Gaussian process where the output is constrained to be 0 or greater which doesn't have an answer. So, I have a dataset generated as $$y=f(\phi,x)+\epsilon$$ where $\phi$ is a $d-$ dimensional vector of parameters, $x$ is a scalar, and $y\in[0,1]$ . In other words, for each specific set of parameters $\phi$ , the relationship between $x$ and $y$ is a function plus some random noise. The function $f$ is highly nonlinear, so I would like to use a Machine Learning model to learn (an approximation to) $f$ from data. The data I have at my disposal are sequences of points $(x_i,y_i)$ , for fixed values of the parameter vector $\phi$ . In other words, I have $N$ sequences of $m$ points each, $$\begin{array}{cccc} (\phi_1,x_{11},y_{11}), (\phi_1,x_{12},y_{12}), \dots, (\phi_1,x_{1m},y_{1m})\\ (\phi_2,x_{21},y_{21}), (\phi_2,x_{22},y_{22}), \dots, (\phi_2,x_{2m},y_{2m})\\ .\\ .\\ .\\ (\phi_N,x_{N1},y_{N1}), (\phi_N,x_{N2},y_{N2}), \dots, (\phi_N,x_{Nm},y_{Nm})\\ \end{array}$$ where for each sequence we have $x_{i1} . Since Gaussian Processes are a good model for functional relationships, I was thinking of using a Gaussian Process as my Machine Learning model. However, the output of a Gaussian Process is not constrained to be in $[0,1]$ , since of course for each $(x,\phi)$ , $y$ would be distributed as a Normal random variable. How could I fit such a "nonGaussian" Process in Python? If you think a Gaussian Process is not the right model to use here, what other model could I use?
