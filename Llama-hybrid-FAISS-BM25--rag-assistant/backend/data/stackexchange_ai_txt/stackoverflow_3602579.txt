[site]: stackoverflow
[post_id]: 3602579
[parent_id]: 3602518
[tags]: 
an in-code approach could look something like this: def get_listings @listings ||= get_listings! end def get_listings! Hpricot.XML(open(xml_feed)) end which will cache the result on a per-request basis (new controller instance per request), though you may like to look at the 'memoize' helpers as an api option. If you want to share across requests don't save data on the class objects, as your app will not be threadsafe , unless you're good at concurrent programming & make sure the threads don't interfere with each other's data access to the shared variable. The "rails way" to cache across requests is the Rails.cache store . Memcached gets used a lot, but you might find the file or memory stores fit your needs. It really depends on how you're deploying and whether you want to prioritise cache hits, response time, storage (RAM), or use a hosted solution e.g. a heroku addon.
