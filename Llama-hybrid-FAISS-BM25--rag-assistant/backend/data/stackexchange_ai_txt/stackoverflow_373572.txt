[site]: stackoverflow
[post_id]: 373572
[parent_id]: 372731
[tags]: 
I found that I needed to use a stretchable image to accomplish this. Apple's UICatalog example has one or more colored buttons that are drawn in this fashion. You could use their template image and recolor it to suit your button needs. I'm not sure about doing this in Interface Builder, but I was able to create a button and use an image for its contents using the following code: downloadButton = [[UIButton alloc] initWithFrame:CGRectMake(36, 212, 247, 37)]; downloadButton.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter; downloadButton.contentHorizontalAlignment = UIControlContentHorizontalAlignmentCenter; [downloadButton setTitle:NSLocalizedStringFromTable(@"Download", @"Localized", nil) forState:UIControlStateNormal]; [downloadButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal]; [downloadButton setFont:[UIFont boldSystemFontOfSize:14.0]]; UIImage *newImage = [[UIImage imageNamed:@"greenButton.png"] stretchableImageWithLeftCapWidth:12.0f topCapHeight:0.0f]; [downloadButton setBackgroundImage:newImage forState:UIControlStateNormal]; [downloadButton addTarget:self action:@selector(downloadNewItem) forControlEvents:UIControlEventTouchDown]; downloadButton.backgroundColor = [UIColor clearColor]; [downloadDisplayView addSubview:downloadButton];
