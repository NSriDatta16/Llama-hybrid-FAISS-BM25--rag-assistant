[site]: stackoverflow
[post_id]: 5098607
[parent_id]: 5092736
[tags]: 
From this example, if your Mvc project was gone and replaced by a Wpf project, your other functionality is still available. If you have both projects they can reference core functionality. Have the implementation which has no relation to UI (MVC or WPF) in other projects. This way those UI projects can reference this functionality. public interface IConverter { TModel MapToDomain(TDataModel source);} public interface IPersonConverter : IConverter { } public interface IPersonRepository { Person GetById(int id); } public class PersonConverter : IPersonConverter { public Person MapToDomain(PersonEntity source) { return new Person { ID = source.ID, Name = source.Name }; //or use an AutoMapper implementation } } public class PersonRepository : IPersonRepository { private readonly IPersonConverter _personConverter; public PersonRepository(IPersonConverter personConverter) { _personConverter = personConverter; } public Person GetById(int id) { PersonEntity personEntity = new PersonEntity(); //get from storage return _personConverter.MapToDomain(personEntity); } } public class MvcController { private readonly IPersonRepository _personRepository; public MvcController(PersonRepository personRepository) { _personRepository = personRepository; } public ActionResult SomeMethod(int id) { Person person = _personRepository.GetById(id); //make your view model based on the person domain model //with another convert / map, to fit view as personForm //(if this is overkill you can use person). return View(personForm); } } Mvc or Wpf project PersonForm (ui model) Controller or Wpf Class Person -> PersonForm converter List item Core project Person IPersonRepository Infrastructure project Person Repository Person Entity Azure Person Table Entity Storage Context
