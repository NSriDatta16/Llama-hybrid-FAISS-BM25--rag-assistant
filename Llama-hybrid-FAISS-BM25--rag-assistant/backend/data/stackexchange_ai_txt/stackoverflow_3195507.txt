[site]: stackoverflow
[post_id]: 3195507
[parent_id]: 3191536
[tags]: 
In the following example you have to pass 3 values (backing field, new value, property as lambda) but there are no magic strings and property changed event is only raised when it truly isn't equal. class Sample : INotifyPropertyChanged { private string _name; public string Name { get { return _name; } set { this.SetProperty(ref _name, value, () => this.Name); } } protected void SetProperty (ref T backingField, T newValue, Expression > propertyExpression) { if (backingField == null && newValue == null) { return; } if (backingField == null || !backingField.Equals(newValue)) { backingField = newValue; this.OnPropertyChanged(propertyExpression); } } public event PropertyChangedEventHandler PropertyChanged; protected virtual void OnPropertyChanged (Expression > propertyExpression) { if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(propertyExpression.GetPropertyName())); } } } And the following code contains extension methods to get a property name from a lambda expression. public static class Extensions { public static string GetPropertyName (this Expression > propertyExpression) { return propertyExpression.Body.GetMemberExpression().GetPropertyName(); } public static string GetPropertyName(this MemberExpression memberExpression) { if (memberExpression == null) { return null; } if (memberExpression.Member.MemberType != MemberTypes.Property) { return null; } var child = memberExpression.Member.Name; var parent = GetPropertyName(memberExpression.Expression.GetMemberExpression()); if (parent == null) { return child; } else { return parent + "." + child; } } public static MemberExpression GetMemberExpression(this Expression expression) { var memberExpression = expression as MemberExpression; if (memberExpression != null) { return memberExpression; } var unaryExpression = expression as UnaryExpression; if (unaryExpression != null) { memberExpression = (MemberExpression)unaryExpression.Operand; if (memberExpression != null) { return memberExpression; } } return null; } public static void ShouldEqual (this T actual, T expected, string name) { if (!Object.Equals(actual, expected)) { throw new Exception(String.Format("{0}: Expected Actual .", name, expected, actual)); } } } Finally some test code: class q3191536 { public static void Test() { var sample = new Sample(); var propertyChanged = 0; sample.PropertyChanged += new PropertyChangedEventHandler((sender, e) => { if (e.PropertyName == "Name") { propertyChanged += 1; } } ); sample.Name = "Budda"; sample.Name.ShouldEqual("Budda", "sample.Name"); propertyChanged.ShouldEqual(1, "propertyChanged"); sample.Name = "Tim"; sample.Name.ShouldEqual("Tim", sample.Name); propertyChanged.ShouldEqual(2, "propertyChanged"); sample.Name = "Tim"; sample.Name.ShouldEqual("Tim", sample.Name); propertyChanged.ShouldEqual(2, "propertyChanged"); } }
