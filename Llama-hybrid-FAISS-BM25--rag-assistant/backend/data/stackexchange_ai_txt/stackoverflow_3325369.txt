[site]: stackoverflow
[post_id]: 3325369
[parent_id]: 3325306
[tags]: 
There are people who say you can write object oriented code in any language, and there are also people who say you can write horribly unstructured code in any language. Real "OO" language provide you with a handful of mechanisms for implementing OO design: The languages have built-in concepts for object and/or classes, for encapsulating code with data, for inheritance and so on. C has essentially none of this, but there's nothing stopping you from doing OO programming in C, given some techniques and self discipline (as your book surely tells you). But would you want to? My opinion is this: If you're just learning to do OO programming, it might make more sense to learn this while being "held by the hand" by a language which already deeply incorporates the concepts. A well-structured, simple and interactive language would be nice for this: Given a free choice, I'd recommend Ruby, Python or Groovy. Given a language with built-in OO "magic" it becomes very obvious when you're doing OO things and when you're just being structured, disciplined and well-organized. There may also be stuff to be learned when moving from C to another language: The commonalities, the differences. Some people would recommend learning C++ as the natural OO progression from C. I don't wholeheartedly support this, because I consider C++ a rather ugly bolting-on of OO capabilities on a language that was already more "practical" than elegant. When moving from "standard" C programming to OO programming, I think a programmer should consider moving away from direct manipulation of pointers, for example, and certainly I'd find it burdensome to have to manage memory for my data. Modern OO languages automate this so that a programmer has more brain cells left over for higher-level tasks. The appeal of C++, of course, is raw speed. Because it can drop to the same near-metal level as C, it is usually the "fastest" of OO languages. All that said: If you have a big project where the required language is C and you want to use and practice OO techniques, then by all means go ahead! If not, you might benefit from learning OO in an environment that encourages and supports this, and perhaps later coming back to C with your knowledge of OO. The techniques taught in the book will make sense to you then, and you'll be in a better position to decide if you really want to do this in C or in a "real" OO language.
