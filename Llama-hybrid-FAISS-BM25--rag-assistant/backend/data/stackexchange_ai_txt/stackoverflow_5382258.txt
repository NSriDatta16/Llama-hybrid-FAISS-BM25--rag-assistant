[site]: stackoverflow
[post_id]: 5382258
[parent_id]: 5381660
[tags]: 
If I understood you correctly I have implemented a system that works something like this. It sounds like you want to store an arbitrary JSON object in a GAE datastore model. To do this you need to encode the JSON into a string of some sort on the way into the database and decode it from a string into a python datastructure on the way out. You will need to use a JSON coder/decoder to do this. I think the GAE infrastructure includes one. For example you could use a "wrapper class" to handle the encoding/decoding. Something along these lines... class InnerClass(db.Model): jsonText = db.TextProperty() def parse(self): return OuterClass(self) class Wrapper: def __init__(self, storage=None): self.storage = storage self.json = None if storage is not None: self.json = fromJsonString(storage.jsonText) def put(self): jsonText = ToJsonString(self.json) if self.storage is None: self.storage = InnerClass() self.storage.jsonText = jsonText self.storage.put() Then always operate on parsed wrapper objects instead of the inner class def getall(): all = db.GqlQuery("SELECT * FROM InnerClass") for x in all: yield x.parse() (untested). See datastoreview.py for some model implementations that work like this.
