[site]: stackoverflow
[post_id]: 2473974
[parent_id]: 2473503
[tags]: 
I can't speak to the issues of printing, but your UI's not going to get updated at all while the UI thread is executing this code. It can't; it's busy executing this code. If you want to dynamically update the UI while a long-running task is executed, you need to execute the task on a background thread and periodically use Invoke() to update objects on the UI thread - or, for a saner, easier to manage experience, use a BackgroundWorker . There may be some totally different issue going on as well; I can't really tell from what you've posted. But I'm pretty sure that's a big part of your problem. Edit Jeez, maybe I should read your entire question, not just the bits of it that initially get my attention. Okay, I don't know how viable this approach will be in your situation, but: The BackgroundWorker can raise events as its task runs; if you call ReportProgress , it will raise the ProgressChanged event. The ProgressChanged event runs on the UI thread, and I believe that the DoWork method blocks and waits until the event handlers are done. What's a little odd about your situation is that the background process isn't really doing anything. Your DoWork method would basically just keep calling ReportProgress until it was done. Another way to do this would be to use a timer. Put the images that you want to update the UI (or objects that load the images) into a queue, and set a timer so that its Tick event handler processes the first item in the queue. The event handler would stop the timer, process the current work item, and then start the timer again with an interval of a tenth of a second. The end result would be that after every image was processed, the UI would have a tenth of a second to process any pending UI events - like drawing the image on the screen.
