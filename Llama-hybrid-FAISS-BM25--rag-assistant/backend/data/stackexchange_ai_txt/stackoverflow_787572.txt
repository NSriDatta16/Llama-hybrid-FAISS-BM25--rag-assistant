[site]: stackoverflow
[post_id]: 787572
[parent_id]: 787533
[tags]: 
The performance benefit is from not having to reopen the file once the #pragma once have been read. With guards, the compiler have to open the file (that can be costly in time) to get the information that it shouldn't include it's content again. That is theory only because some compilers will automatically not open files that didn't have any read code in, for each compilation unit. Anyway, it's not the case for all compilers, so ideally #pragma once have to be avoided for cross-platform code has it's not standard at all / have no standardized definition and effect. However, practically, it's really better than guards. In the end, the better suggestion you can get to be sure to have the best speed from your compiler without having to check the behavior of each compiler in this case, is to use both pragma once and guards. #ifndef NR_TEST_H #define NR_TEST_H #pragma once #include "Thing.h" namespace MyApp { // ... } #endif That way you get the best of both (cross-platform and help compilation speed). As it's longer to type, I personally use a tool to help generate all that in a very wick way (Visual Assist X).
