[site]: stackoverflow
[post_id]: 4433978
[parent_id]: 4422685
[tags]: 
A vector in Clojure vaguely means "this is data". The group of bindings for a let or fn is just that, data. It's a sequence of symbols, or sequence of symbol-value pairs. A list vaguely means "This is a function or macro call". When you see a list, you'll be pretty safe assuming the first thing in that list is something callable, and the rest of the things in the list are arguments to it. There are exceptions. You'll see both (ns foo (:use (bar baz))) and (ns foo [:use [bar baz]]) in idiomatic code. Not sure why other than that Clojure grew very quickly and semi-organically in some areas and is still growing. But it's a good rule of thumb. Vectors don't need to be quoted, which is a good way to avoid certain bugs, especially given that so many things in Clojure are callable as functions. (:foo :bar) is not a list of two keywords, but it'll compile, calling :foo as a keyword lookup on the keyword :bar , evaluating as nil . There's no way to screw up [:foo :bar] . It's always a vector of two keywords. The benefit of not having to quote the elements of a vector should not be understated. How would you like to write this with lists? (let [x 123 y 456] [[:foo x] [:bar y]]) One way is so verbose that your data is lost in a forest of list . The other way is an unnecessary mess of punctuation. (let [x 123 y 456] (list (list :foo x) (list :bar y))) (let [x 123 y 456] `((:foo ~x) (:bar ~y))) Clojure is perhaps less of a parenthesis soup than other Lisp dialects, thanks to [] and {} . Though some people dislike the ))])}) that Clojure ends up having, I think it's preferable to losing yourself in a long string of )))))))) . "Code is data" doesn't mean that all of your data has to look like all of your code and vice versa. You have access to code-as-data when you need it, which is rarely, usually in macros. In the meantime, if your data is not code, why should it look like code? A sequence of phone numbers is not code. There's no reason it has to be in a list. And as you said, there are performance issues with lists.
