[site]: stackoverflow
[post_id]: 3544166
[parent_id]: 3537205
[tags]: 
Your second code fragment is not correct. You're overwriting the new connection with the global connect, when you should be copying out the connection string. You're also freeing that global which will probably cause problems for the rest of your application. Something like this, depending on the details of your TSQLConnection class: SqlCon := TSQLConnection.Create(nil); // create Qry := TSQLQuery.Create(nil); try //SqlCon := FrmConnect.SQLConnection; // overwrite!!! SqlCon.ConnectionString := FrmConnect.SQLConnection.ConnectionString; SqlCon.Active := true; Qry.SQLConnection := SqlCon; ... If you want to have a databse connection pool it's quite tricky because the connections are usually thread-specific - you need one per thread and you can't pass them between threads. So you end up writing a lot of code to support that. I now use the OmniThreadLibrary and have a factory method that returns a new database connection. That gives me a thread pool that I feed tasks into, so my specific task is bound to an existing thread when it executes, but the thread is fairly long-lived. The code I had to write to get this is very small (I'm using ADO): type // a factory to generate new instances of our thread-specific data IThreadPoolData = interface ['{14917B01-6613-4737-B87E-0046789D4284}'] function GetConnection: TADOConnection; function GetStoredProc: TADOStoredProc; end; TThreadPoolData = class(TInterfacedObject, IThreadPoolData) strict private FADOConnection: TADOConnection; FStoredProc: TADOStoredProc; // lazy creation! public constructor Create(aConnectionString: string); overload; destructor Destroy; override; function GetConnection: TADOConnection; function GetStoredProc: TADOStoredProc; end; // create the connection here so thread creation is slow but using it // is (relatively) fast constructor TThreadPoolData.Create(aConnectionString: string); begin FADOConnection := TADOConnection.Create(nil); FADOConnection.LoginPrompt := false; FADOConnection.ConnectionString := aConnectionString; FADOConnection.ConnectOptions := coAsyncConnect; FADOConnection.Connected := true; end; destructor TThreadPoolData.Destroy; begin FADOConnection.Connected := false; if assigned(FStoredProc) then FreeAndNil(FStoredProc); FreeAndNil(FADOConnection); end; You will need to do something similar if you write your own thread or connection pool.
