[site]: stackoverflow
[post_id]: 870369
[parent_id]: 
[tags]: 
How to force GDI+ rendering of a ComboBox in C# on a DeskBand Taskbar Toolbar? (transparency issue)

I've implemented a DeskBand Taskbar Toolbar using the BandObjectLib ( Extending Explorer with Band Objects using .NET and Windows Forms ) from Codeproject, modified with support for the IDeskBand2 interface which allows the Start Menu in Windows Vista to retain transparency when my DeskBand taskbar toolbar is enabled. However, the text displayed in a combobox or textbox display the color of the underlying desktop background blended with the original color of the text. A label does not have this problem as it is normally drawn using GDI(+) which ignores DWMComposition on the rendered text (not the background of the label). I figured the problem is because the way DWM works on Vista regarding certain text elements which is explained on the following pages: Using Vista Controls on Aero Glass Windows Vista Aero Pt. 1 - Adding Glass to a Windows Forms Application Adding or Retrofitting Aero Glass into Legacy Windows Applications I am only using a combobox on my DeskBand toolbar so I would only need to know how to force the combobox to not display using DWM even though DWM is enabled on the system and is enabled on the DeskBand through the implementation of the IDeskBand2 interface. Update : I've looked into it further and the C++ code at Adding or Retrofitting Aero Glass into Legacy Windows Applications seems the most likely bet on getting this working so the combobox display text isn't transparent. If anyone can look at that code pertaining just to the combobox and help me get it working for a C# combobox, it would make my month! I have started a bounty to hopefully get an answer. Below is the EditProc.cpp class from the above mentioned project that should provide a quick sneak peek at what I'm looking at as a solution. To get the full picture, you'd need to look at the full project: /* * * $RCSfile: aeroedit.cpp,v $ * $Source: /cvs/common/aeroedit.cpp,v $ * $Author: cvs $ * $Revision: 1.12 $ * $Date: 2007/05/20 10:38:25 $ * $State: Exp $ * Copyright (c) Stefan Kuhr */ #include #include #include "safassrt.h" #include "aaeroint.h" #include "aerosubc.h" #include "aeroglss.h" #include #include using namespace Gdiplus; static void UpdateIfSelChanged(HWND hWnd, PAERO_SUBCLASS_WND_DATA pWndData) { DWORD dwFirst, dwLast; SendMessage(hWnd, EM_GETSEL, (WPARAM)&dwFirst, (LPARAM)&dwLast); if(dwFirst!=pWndData->m_dwSelFirst || dwLast!=pWndData->m_dwSelLast) { pWndData->m_dwSelFirst = dwFirst; pWndData->m_dwSelLast = dwLast; VERIFY(InvalidateRect(hWnd, NULL, TRUE)); VERIFY(UpdateWindow(hWnd)); } } static LRESULT CALLBACK EditProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) { PAERO_SUBCLASS_WND_DATA pWndData = (PAERO_SUBCLASS_WND_DATA)GetProp(hWnd, WINDOW_DATA_STRING); ASSERT(pWndData); ASSERT(pWndData->m_pDwmApiImpl); WNDPROC pOldProc = pWndData->m_oldWndProc; ASSERT(pOldProc); PAERO_SUBCLASS_WND_DATA pWndDataParent = (PAERO_SUBCLASS_WND_DATA)GetProp(GetParent(hWnd), WINDOW_DATA_STRING); /// /// if aero glass is turned off and if we are not in destruction code, /// just call the original wnd proc we had prior to subclassing: /// if(WM_DESTROY!=uMsg && WM_NCDESTROY!=uMsg && WM_DWMCOMPOSITIONCHANGED!=uMsg && pWndDataParent && !pWndData->m_pDwmApiImpl->IsDwmCompositionEnabled()) return CallWindowProc(pOldProc, hWnd, uMsg, wParam, lParam); if(pWndData->m_uiRedrawMsg==uMsg && pWndData->m_dwFlags & WD_IN_PAINT_CONTROL) { HDC hdc = GetDC(hWnd); hdc = GetDC(hWnd); if(hdc) { RECT rcClient; GetClientRect(hWnd, &rcClient); BP_PAINTPARAMS params = { sizeof(BP_PAINTPARAMS) }; params.dwFlags = 0L;//BPPF_ERASE; HDC hdcPaint = NULL; HPAINTBUFFER hBufferedPaint = pWndData->m_pUxTheme->BeginBufferedPaint(hdc, &rcClient, BPBF_TOPDOWNDIB, &params, &hdcPaint); if (hdcPaint) { LONG_PTR dwStyle = GetWindowLongPtr(hWnd, GWL_STYLE); DWORD_PTR dwSyscolorIdx = (dwStyle&WS_DISABLED || dwStyle&ES_READONLY)?COLOR_3DFACE:COLOR_WINDOW; VERIFY(FillRect(hdcPaint, &rcClient, (HBRUSH)(dwSyscolorIdx+1))); SendMessage(hWnd, WM_PRINTCLIENT, (WPARAM) hdcPaint, PRF_CLIENT|PRF_CHECKVISIBLE); /// Make every pixel opaque VERIFY(S_OK==pWndData->m_pUxTheme->BufferedPaintMakeOpaque_(hBufferedPaint, &rcClient)); VERIFY(S_OK==pWndData->m_pUxTheme->EndBufferedPaint(hBufferedPaint, TRUE)); } VERIFY(1==ReleaseDC(hWnd, hdc)); pWndData->m_dwFlags &= ~WD_IN_PAINT_CONTROL; } return 1; } switch(uMsg) { case WM_KEYDOWN: { LONG_PTR dwStyle = GetWindowLongPtr(hWnd, GWL_STYLE); if(dwStyle&WS_VSCROLL || dwStyle&ES_MULTILINE) { if(!(pWndData->m_dwFlags&WD_CARET_HIDDEN)) { HideCaret(hWnd); pWndData->m_dwFlags|=WD_CARET_HIDDEN; } } } break; case WM_KEYUP: case WM_LBUTTONDOWN: case WM_LBUTTONUP: case WM_MOUSELEAVE: { LONG_PTR dwStyle = GetWindowLongPtr(hWnd, GWL_STYLE); if(dwStyle&WS_VSCROLL || dwStyle&ES_MULTILINE) { if(pWndData->m_dwFlags&WD_CARET_HIDDEN) { ShowCaret(hWnd); pWndData->m_dwFlags&=~WD_CARET_HIDDEN; } UpdateIfSelChanged(hWnd, pWndData); } } break; case WM_NCPAINT: { LRESULT lRes = 0; lRes = CallWindowProc(pOldProc, hWnd, uMsg, wParam, lParam); DrawEditBorder(hWnd, pWndData); return lRes; } case WM_NCDESTROY: case WM_DESTROY: VERIFY(UnsubclassControl(hWnd, EditProc, pWndData)); break; } return CallWindowProc(pOldProc, hWnd, uMsg, wParam, lParam); } BOOL AeroSubClassEdit(HWND hwnd) { return AeroSubClassControl(hwnd, EditProc, WD_IN_PAINT_CONTROL); } Thank you, John Rennemeyer MuvEnum, LLC
