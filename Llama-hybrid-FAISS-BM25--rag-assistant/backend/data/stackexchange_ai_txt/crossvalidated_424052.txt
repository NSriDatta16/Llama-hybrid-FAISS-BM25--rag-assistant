[site]: crossvalidated
[post_id]: 424052
[parent_id]: 
[tags]: 
How to apply fuzzy membership function to binary images?

I'm implementing this paper " Neural Network-Based Edge Detection for Automated Medical Diagnosis by Lu et al " and it says it uses a fuzzy membership function to improve its generalization accuracy. It uses the following function: So using this function the authors are able to change their images as follows: I've tried recreating this data but unfortunately, I'm too much of a noob when it comes to fuzzy maths(never implemented something using fuzzy logic). I tried creating this by passing images through a numpy function as follows: def fuzzy_membership(images, e): return np.exp(-((images - e)**2/ (2*(0.25**2)))) Using this if I input an image I get the following: (Fuzzy function with e=1) | 0 0 1 | | 3.3456e-04 3.3456e-04 1 | | 0 0 1 |------------------------------> | 3.3456e-04 3.3456e-04 1 | | 0 0 1 | | 3.3456e-04 3.3456e-04 1 | (IMAGE) (Resultant image) and similarly with e=0 (Fuzzy function with e=0) | 0 0 1 | | 1 1 3.3456e-04 | | 0 0 1 |------------------------------> | 1 1 3.3456e-04 | | 0 0 1 | | 1 1 3.3456e-04 | (IMAGE) (Resultant image) Training dataset formed in this manner generalizes horribly and it's obvious why. Values never go as low as 3.3456x10^-4 in normalized grayscale images(grayscale images dived by 255). So, how do I go about implementing the fuzzy membership function correctly?
