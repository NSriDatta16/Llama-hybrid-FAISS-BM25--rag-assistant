[site]: stackoverflow
[post_id]: 3162070
[parent_id]: 3153390
[tags]: 
It is probably best to stick with a single datatype: either all floats, or all integers; this reduces the potential for confusion, and avoids a class of performance pitfalls. For all ints, you need to remember to re-scale the integer so the result fits back into the original range: int alpha_transparency(int alpha, int value1, int value2) { int unscaled= (255-alpha)*value1 + alpha*value2; return unscaled / 255; /* integer division */ } For all-floats, you need to remember to normalize integer inputs from a raw value in [0..255] (or whatever) to a float in [0.0 .. 1.0], do all the processing, then convert back to integer only at the end. float input_raw_value(unsigned char value) { return value/255.0; } ... float alpha_transparency(float alpha, float value1, float value2) { return (1.0-alpha)*value1 + alpha*value2; } ... unsigned char output_raw_value(float value) { return value*255.0; } Note that I have ignored rounding issues in each method; once you've got the basic math up and running, you should pay some attention to that. Also, there are various tricks to replace the divisions (which can be relatively slow) by multiplication or bit-fiddling.
