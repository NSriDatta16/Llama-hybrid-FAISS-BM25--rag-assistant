[site]: crossvalidated
[post_id]: 465994
[parent_id]: 
[tags]: 
Regression Model in python

I'm new to python and trying to perform a random forest regression task. I import my dataset that has 5 columns in total (including date column). My data is time dependant so i cannot use the train/test split. So instead i do the following feature_cols = [ 'Rainfall' ,'Temperature','Usage amount'] target_v = df['water levels'] X = df[feature_cols] y = target_v then i use the time series split in sklearn to split my data into train and test from sklearn.model_selection import TimeSeriesSplit tss = TimeSeriesSplit(n_splits = 3) for train_index, test_index in tss.split(X): X_train, X_test = X.iloc[train_index, :], X.iloc[test_index,:] y_train, y_test = y.iloc[train_index], y.iloc[test_index] Now i need to perform preprocessing such as scaling my data and removing the mean (detrend). So my question is what am i supposed to do first? i.e. do i remove the mean first then scale my data or i first scale then remove the mean? Also do i perform the 2 techniques on my entire dataframe (df) or on a subset of my data (i.e. just on the training data)? If it's a subset how do i do this? Here is an example of scaling and mean removal i had tried on my entire dataframe from sklearn.preprocessing import StandardScaler scaler = StandardScaler() df = pd.DataFrame(scaler.fit_transform(df), columns=df.columns, index=df.index) mean = np.mean((df.values), axis=-1, keepdims=True) detrended = df - mean Then i used detrended dataframe for spliting my data into train and test and ran my models. Am not sure if this is the correct approach?
