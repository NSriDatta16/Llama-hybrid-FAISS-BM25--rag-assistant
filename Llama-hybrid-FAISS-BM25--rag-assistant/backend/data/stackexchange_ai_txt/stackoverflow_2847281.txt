[site]: stackoverflow
[post_id]: 2847281
[parent_id]: 2847138
[tags]: 
Frequent garbage collection can be caused by a number of things. For example: Your application may be creating too many temporary object. Memory leaks caused by your application keeping references to objects that are no longer required. The heap may be too small. The first two problems will be revealed if you run a memory profiler on your application, and the solution will usually be self evident. The third problem can be seen by examining the GC logs, and noting that each GC run only succeeds in reclaiming a relatively small amount of memory. Ideally, you want the GC to reclaim 50% or more of the heap each time it runs. The fix is typically to increase the maximum heap size using the JVM's -Xmx command-line option. Will we speed up the code with object reusal? Generally speaking no. Recycling is painful, there is no guarantee that it will succeed. For example, you will have a hard time getting many classes in the Java standard library and 3rd-party libraries to recycle internal data structures. You should only resort to explicitly recycling objects if all other attempts to fix the problem have failed. The simplest solution is often just to give the application a bigger heap. EDIT One way to reduce memory usage for the code in the edited question is to change: StringBuilder sb = new StringBuilder(); to StringBuilder sb = new StringBuilder(s.length()); It might help to reuse the StringBuilder as well, but if this code is giving you excessive GC rates then the problem is more likely to be that there is a memory leak (somewhere else in your application) or that your heap is simply too small. (People don't realize this, but there is a significant memory overhead for every Java String ... something like 48 bytes if my mental arithmetic is correct.) EDIT 2 The GC logs say that you are reclaiming 50000Kb each time the GC runs, and they strongly suggest that the memory usage is not increasing. (The latter is good news; it pretty much rules out a memory leak.) I think you need to increase the heap size using the -Xmx and -Xms options. You want to be reclaiming a few megabytes in each GC cycle to reduce the average GC overhead per byte reclaimed. The other thing that struck me is that maybe you can change your removeAccents method so that it only creates a new String if the result String will be different to the input String. In other words, if there are no accents it should just return the input String.
