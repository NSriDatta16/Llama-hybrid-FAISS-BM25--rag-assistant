[site]: stackoverflow
[post_id]: 4423376
[parent_id]: 4423318
[tags]: 
There is no static Equals method in the Array class, so what you are using is actually Object.Equals , which determines if the two object references point to the same object. If you want to check if the arrays contains the same items in the same order, you can use the SequenceEquals extension method: childe1.SequenceEqual(grandFatherNode) Edit: To use SequenceEquals with multidimensional arrays, you can use an extension to enumerate them. Here is an extension to enumerate a two dimensional array: public static IEnumerable Flatten (this T[,] items) { for (int i = 0; i Usage: childe1.Flatten().SequenceEqual(grandFatherNode.Flatten()) If your array has more dimensions than two, you would need an extension that supports that number of dimensions. If the number of dimensions varies, you would need a bit more complex code to loop a variable number of dimensions. You would of course first make sure that the number of dimensions and the size of the dimensions of the arrays match, before comparing the contents of the arrays. Edit 2: Turns out that you can use the OfType method to flatten an array, as RobertS pointed out. Naturally that only works if all the items can actually be cast to the same type, but that is usually the case if you can compare them anyway. Example: childe1.OfType ().SequenceEqual(grandFatherNode.OfType ())
