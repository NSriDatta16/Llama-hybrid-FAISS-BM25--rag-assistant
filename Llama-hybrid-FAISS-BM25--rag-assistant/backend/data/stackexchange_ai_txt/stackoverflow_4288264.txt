[site]: stackoverflow
[post_id]: 4288264
[parent_id]: 4287226
[tags]: 
This is a simplified version of what's going on, but will hopefully be enough to get you going. Special Objects There are three types of Objects that Magento considers "special". These are Models, Blocks, and Helpers. Rather than use class names for these objects Magento uses URI-like strings called class aliases . So this page/html corresponds to the Block class Mage_Page_Block_Html Class here is referring to PHP classes, not CSS classes. Magento Page Rendering A Layout Object is responsible for creating all the HTML for a Magento page. A Layout Object is a collection of nested Block Objects. Most Block Objects are Template Blocks, that is, the Block class inherits from the base Magento template block Mage_Core_Block_Template . Template Blocks are objects responsible for rendering a phtml template file. So, when you specify a "type" in the XML Layout files, you're telling Magento. I want to add a block object with the class foo/bar, using the template baz.phtml In code, that's If all you want to do is render a template file, you can use type="core/template" However, by using a different value, like type="page/html" your phtml template file gets access to all the methods in Mage_Page_Block_Html Which means you could do something like File: template.phtml getBaseUrl();?>"> The core/template class doesn't have a getBaseUrl method, but the page/html class does. If you're doing custom module development (as opposed to just theming), I usually create a Block Object in my own module that extends one of the base Magento blocks. This allows me to add my own methods to the block as I see fit. If you're only theming, page/html is a decent default.
