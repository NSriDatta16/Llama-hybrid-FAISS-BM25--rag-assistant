[site]: stackoverflow
[post_id]: 1913145
[parent_id]: 1913007
[tags]: 
One criteria you can have to decide whether the classes for Engine, Chasis etc. needs to be present as an inner class (embedded class) is whether instance of these classes can be used elsewhere in your application. In such cases the decision is simple and it is to make these classes exist separately (not as inner classes). Even if these classes are not used elsewhere in your application then other criteria can be testability. With these classes embedded inside and with your design is it possible to have unit tests that can appropriately test your code providing a good coverage. For example say, if you have made an instance variable which references an Engine object and this variable is being initialized in the Constructor of Car.And your Engine class has some methods which needs to be tested. Then how can you add unit tests to check the code in Engine class ? Probably you would have some methods in Car class which expose the behavior or Engine class allowing you to write unit tests. Then the question is if there is a need to expose the behavior of Engine class wouldn't it be better that the Engine class stands on it own? Alternatively there might not be a need to explicitly test the methods in Engine class and unit testing the methods in Car covers the Engine class code as well. Then it reflects tight integration of Engine class with the Car class and would mean it can remain as an inner class.
