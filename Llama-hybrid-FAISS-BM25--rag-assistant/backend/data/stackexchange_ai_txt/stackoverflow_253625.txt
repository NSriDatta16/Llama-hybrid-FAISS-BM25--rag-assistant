[site]: stackoverflow
[post_id]: 253625
[parent_id]: 253587
[tags]: 
I think it is worthwhile to use a library where you can choose to ignore certain kinds of statements. For example, if you have a lot of: if(logger.isDebugEnabled()) { logger.debug("something"); } It is useful if you can turn off coverage calculations for those sorts of lines. It can also be (arguably) valid to turn off coverage calculations for trivial getters and setters (those that simply set or return a member variable with no other checks or side-effects). I do however think that if you have overridden equals and hashcode, those should be tested. You added non-trivial functionality, and it should be tested. Just to be clear, the reason I think the above situations should be excluded from coverage is that: Not testing that functionality is ok. You shouldn't have to run through your entire suite of tests 5 times, with the logging library set to each logging level, just to make sure that all your statements are hit. If you did the above, it would skew your coverage the other way. If 90% of your branches are if(log.isDebugEnabled()) , and you test them all but no other branches, it will look like you have 90% branch coverage (good), when in reality, you have 0% non-trivial branch coverage (bad!!).
