[site]: stackoverflow
[post_id]: 5311295
[parent_id]: 5310799
[tags]: 
Well, the answer to this question relates specifically with The Single Responsibility Principle . Basically, each and every class in your application should have exactly one responsibility. That doesn't mean that it can't be used in more than one situation, but it shouldn't be responsible for more than one abstract concept. So, from your examples, I would build a class structure similar to this: class UserFactory() getModel(); getUser($id, $model = null); getACL($user); class UserModel () edit($id = 0); load($id = 0); reload($id = 0); save($id = 0); class User ($data) getAll(); getField($field); class UserACL (User $user) isTrustedUser(); isAdminUser(); isBannedUser(); That way, everything is organized by responsibility and role, rather than by relation. The benefit to this, is that if you want to swap out an individual component later (for example, the ACL system, or the Model storage layer), you don't need to worry about testing a huge class. Just test that particular API and you're done.
