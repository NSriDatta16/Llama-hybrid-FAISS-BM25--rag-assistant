[site]: stackoverflow
[post_id]: 4063732
[parent_id]: 4060067
[tags]: 
The character that displays an Apple logo on Apple computers, ‹›, is code point 0xF0 in MacRoman. Despite appearances, MacRoman is not an Italian hamburger but rather an 8-bit legacy character set carried forward from Apple's pre-Unix days. The mapping tables for MacRoman to Unicode place MacRoman 0xF0 at Unicode U+F8FF, which is in the Private Use area. It has the Unicode regex properties \p{Co} (aka \p{Other} ) and \p{InPrivateUse} (aka \p{Private_Use} ). Its script type is unknown, corresponding to the Unicode property \p{Script=Unknown} , also known as \p{Unknown} , \p{Script=Zzzz} or \p{Zzzz} . Its only other general categories are \p{Graph} and \p{Print} . Besides its own logo at the very end of the private use area, Apple has other private use characters : ‹› at U+F804 for an "eject" glyph, ‹› at U+F802 for a "pencil" glyph, and ‹› at U+F803 for a glyph of a pointer into a sunburst. These have no mapping into MacRoman. There is nothing stopping a Linux system from grabbing some code point from the Private Use Area (which lies in plane 0 from U+E000 – U+F8FF), or from either of Supplementary Private Use Area A (plane 15: U+F0000 – U+FFFFD, or B (plane 16: U+100000 – U+10FFFD), and doing with it whatever it pleased. These wouldn't be meaningful for interchange, but they could do it. It might even be fun to watch all the miscoded Java programs break on characters from up in the astral planes that are too big to fit into Java's (oxy)moronic char data type. ☺ In the very recently release Unicode 6.0, the controversial Emoji block does include code point U+1F427, PENGUIN. Scant few fonts yet support Unicode 6.0, but you can see what it looks like here on page 1256 of Unicode 6.0. Being an astral character, it would also cause conniptions in all those programming languages and environments whose broken character abstractions misrepresent characters as 16-bit entities instead of abstract characters. (Hm, do we have a definitive list of those, those that expose the user to physical encodings instead of presenting abstract characters? What else besides Java?) So it's probably not a good idea except as an agent provocateur . Plus it doesn't really look all that much like Tux, anyway. Personally, I really don't see the need to encode corporate logos as single code points. That's why we have GIFs and the like.
