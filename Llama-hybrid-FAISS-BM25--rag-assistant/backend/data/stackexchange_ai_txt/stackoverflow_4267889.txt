[site]: stackoverflow
[post_id]: 4267889
[parent_id]: 4266227
[tags]: 
There's nothing inherently wrong with having multiple return's within a method, it can be elegant to do so. Most recursive functions will have muliple returns: public String flattenTree(Node currentNode, String stringSoFar) { // do our work on this node stringSoFar = stringSoFar + currentNode.getName(); // end condition- if we've got no children left we're done so leave now if (currentNode.countChildren() ==0) { return stringSoFar; } // recursive condition- keep digging through the children of our current node for (int i=0; i Looks nice and clean, and lets you clearly mark out your end condition... I quite like this approach simply because it's built to look like you were taught to do recursion back at school... Nothing wrong with compacting that into a single return: public String flattenTree(Node currentNode, String stringSoFar) { // do our work on this node stringSoFar = stringSoFar + currentNode.getName(); // loop through children if neccessary for (int i=0; i Less code, arguably better, arguably less obvious where your end-case lies... In terms of performance I couldn't claim to know that one is more/less performant than the other, but I have to say that unless I'm working on an uber-performance-critical piece of code I always pick readability over performance, and I would suggest that at least in this hypothetical example you pick multiple returns for ease of reading.
