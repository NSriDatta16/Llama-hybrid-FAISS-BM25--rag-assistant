[site]: stackoverflow
[post_id]: 2755946
[parent_id]: 2755916
[tags]: 
You have discovered the fragile base class problem. One way to deal with it is this pattern: public class Parent { public void OnLoad() { // Important load stuff goes here OnLoadInternal(); } protected virtual void OnLoadInternal() { // No implmentation in parent; child can override if needed } } public class Child : Parent { protected override void OnLoadInternal() { base.OnLoadInternal(); // Important load stuff, but can't break parent by omitting base call } } The parent is guaranteed to have it's OnLoad method do what it is supposed to do, but the child is given a way to add additional processing by overriding OnLoadInternal.
