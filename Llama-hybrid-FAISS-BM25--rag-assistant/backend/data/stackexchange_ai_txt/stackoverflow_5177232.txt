[site]: stackoverflow
[post_id]: 5177232
[parent_id]: 5176916
[tags]: 
I tested adding strings to a list, and benchmarked it with a LIST_SIZE of 1000000 (one million) items and a LIST_SIZE of 100000 (one hundred thousands) items. This way we can compare how it scales. I ran each test 5 times and averaged the running times. var l = new List (); for (var i = 0; i LIST_SIZE of 1000000 takes 1519 ms LIST_SIZE of 100000 takes 96 ms var l = new List (LIST_SIZE); for (var i = 0; i LIST_SIZE of 1000000 takes 1386 ms LIST_SIZE of 100000 takes 65 ms var l = new string[LIST_SIZE]; for (var i = 0; i LIST_SIZE of 1000000 takes 1510 ms LIST_SIZE of 100000 takes 66 ms So, we can notice 2 things: it really takes more time to add each items the longer the list gets larger the difference shouldn't be noticeable in a 1000 items list I would conclude then that the bottleneck is in one of the other methods you call.
