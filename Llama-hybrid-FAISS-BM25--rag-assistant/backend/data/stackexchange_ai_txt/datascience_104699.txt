[site]: datascience
[post_id]: 104699
[parent_id]: 104689
[tags]: 
This is a massive question. There are two basic approaches, with the key difference being the search algorithm. The first approach , currently used by the world's strongest engine Stockfish, involves minimax as the search algorithm. It then calls the NNUE to evaluate the position at the end of the search tree. The minimax algorithm involves a lot of human knowledge to prune off unnecessary branches, and is very complicated; it's not surprising that most people find Stockfish's search algorithm a black box. The second approach , used by the second-strongest engine Leela Chess Zero, involves Monte Carlo Tree Search. There is again a neural network that takes the current position and outputs a list of candidate moves, with win percentages for each. The engine then divides its time among the most promising moves, calling the neural network at each node. Leela's neural network is trained from self-play with zero prior human knowledge - something that is very computationally intensive. You can find a lot more details on the Chess Programming wiki, as well as several questions on the Chess.SE (such as this or this ).
