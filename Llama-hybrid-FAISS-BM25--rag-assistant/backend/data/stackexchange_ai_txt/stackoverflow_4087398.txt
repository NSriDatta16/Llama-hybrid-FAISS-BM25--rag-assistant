[site]: stackoverflow
[post_id]: 4087398
[parent_id]: 4082403
[tags]: 
It's hard to say how much load testing is needed. How important is the project? What are the implications if the site goes down when it is launched? What if the site is very slow under high volume? Only you and your organization can answer how much testing is needed. The answer should be based on the cost of failure, rather than the perceived simplicity/complexity of the site. We've seen a lot of seemingly simple sites fail spectacularly under load. Assuming that a successful site launch is relatively important, at least to you, I recommend: Determine the workflows that account for 75% of your peak traffic load. At an absolute minimum, try to simulate the page requests for those testcases Be sure you account for think-times properly. Think time is the time between page requests - when the user is reading the page or filling out a form. Think times that are too long or too short will greatly affect the page request rate, and therefore your test results. Use randomized think times if possible. It is tempting to leave out requests for static resources, since most web servers handle static content very efficiently. But if you have front-end load balancers, caching servers, etc, it is very important to test with those static resources - I can't tell you how many times we've seen sites break in this area. There are a lot of alternatives for load testing software (our Load Tester product is similar to NeoLoad, but less expensive), but make sure you account for the full cost - that is the number of hours it takes you to get it working. There is a wide gulf in productivity in such tools. Tools like ab or JMeter have little up-front cost, but can quickly get expensive when trying to simulate traffic against sophisticated web apps, such as typical .NET apps. You might also consider outsourcing the load testing. Of all development activities, load testing might be the easiest to outsource (we do it every day).
