[site]: stackoverflow
[post_id]: 904335
[parent_id]: 900919
[tags]: 
After some more research, I believe I've managed to find a solution. Marking an object for deletion when it's removed from a collection is controlled by the DeleteOnNull parameter of the Association attribute. This parameter is set to true when the relationship between two tables is marked with OnDelete Cascade. Unfortunately, there is no way to set this attribute from within the designer, and no way to set it from within the partial class in the *DataContext.cs file. The only way to set it without enabling cascading deletes is to manually edit the *DataContext.designer.cs file. In my case, this meant finding the Page association, and adding the DeleteOnNull property: [Association(Name="Page_PageTag", Storage="_Page", ThisKey="PageId", OtherKey="iPageId", IsForeignKey=true)] public Page Page { ... } And adding the DeleteOnNull attribute: [Association(Name="Page_PageTag", Storage="_Page", ThisKey="PageId", OtherKey="iPageId", IsForeignKey=true, DeleteOnNull = true)] public Page Page { ... } Note that the attribute needed to be added to the Page property of the PageTag class, not the other way around. See also: Beth Massi -- LINQ to SQL and One-To-Many Relationships Dave Brace -- LINQ to SQL: DeleteOnNull
