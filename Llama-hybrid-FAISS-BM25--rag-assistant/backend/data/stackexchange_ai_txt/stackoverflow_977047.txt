[site]: stackoverflow
[post_id]: 977047
[parent_id]: 
[tags]: 
Java-enum style classes in Objective-C?

I am new to Obj-C so forgive me if this is a stupid question: How do I implement some in the style of Javas enums? Or to be more precise: I want a class with some known properties which are fix at compile time and unique per instance. Additionally I only want one instance type. Let me give an example in Java: public enum MessageTypes { DEFAULT("white", "standard", 1), EXPRESS("red", "expressMessage", 2), BORADCAST("green", "broadcast", 3); String color; String tagName; int dbId; MessageTypes(String color, String tagName, int dbId) { // you get the idea } //some methonds like getEnumByTagName } How would you do something like this in Objective-C? Am I missing something? Is this a bad pattern at all? Thanks in advance! EDIT: I am sorry, if I did not made myself clear. I know, that obj-c enums are not what I am looking for (as they are only marginally more than a typedef to an int). I would like to create a set of (kind-of-singleton, immutable) instances of a specific class. The singleton pattern in Apples Dev-Docs is of no use as I want multiple distinct instances of a class each with individual values in their properties. The goal of that is to have multiple Message types (about 20) that can be assigned to a Message as a property. Each of my Message types has a (fix and predefined) color, attribute-value (in an XML-representation) and a numerical ID. In Java, I would use an enum as in my code sample. But how do I create different MessageTypes and associate them with their properties in Obj-C? Creating 20 Sublcasses of MessageType (each with a singleton-instance holding the properties) seems like a lot of work for such a simple task and total overkill. My current approach is to create a class with an NSArray holding the different instances. Up on first access of a method like +(id)messageTypeForId:NSInteger id_ the NSArray is prepopulated. But this feels totally clumsy and not at all elegant... Is there a more satisfying approach?
