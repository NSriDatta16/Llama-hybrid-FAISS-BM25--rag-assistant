[site]: stackoverflow
[post_id]: 5355545
[parent_id]: 5354466
[tags]: 
OK, so i've fixed it, although i'm not sure it's the best most 'zend' solution, but i think it's quite elegant and works, which is the best one. So now i check to see if the mobile version of the action view is available, if it is i change the extension to use a mobile suffix. This allows me to make sure i only load mobile views when i have them, meaning i reduce the potential for errors. class SQ_Plugins_Mobile extends Zend_Controller_Plugin_Abstract { public function dispatchLoopStartup(Zend_Controller_Request_Abstract $request) { $bootstrap = Zend_Controller_Front::getInstance()->getParam("bootstrap"); $useragent = $bootstrap->getResource("useragent"); $device = $useragent->getDevice(); Zend_Registry::set("useragent", $useragent); Zend_Registry::set("device", $device); /** * @todo change this to be Mobile */ if($device->getType() != "mobile") { /** * Set the layout to be mobile, here we make sure we streamline what is loaded * so as to not load things that arent needed. */ Zend_Layout::getMvcInstance()->setLayout("mobile_layout"); /** * Here we check to see if a mobile version of the template exists. if it does then we change the view suffix * this allows us to load the mobile view if it exists and the defgault view if it doesnt. */ $base = APPLICATION_PATH . "/views/scripts/"; $mobile = $base . $request->getControllerName() . "/" . $request->getActionName() . ".mobile.phtml"; if(is_readable($mobile)) { Zend_Controller_Action_HelperBroker::getExistingHelper('ViewRenderer')->setViewSuffix('mobile.phtml'); } } } }
