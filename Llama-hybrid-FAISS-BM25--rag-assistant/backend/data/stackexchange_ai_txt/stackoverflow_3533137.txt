[site]: stackoverflow
[post_id]: 3533137
[parent_id]: 3524759
[tags]: 
The Modern::Perl module touts itself with “enable all of the features of Modern Perl with one command,” where that command is use Modern::Perl; and those features are For now, this only enables the strict and warnings pragmas, as well as all of the features available in Perl 5.10. It also enables C3 method resolution order; see perldoc mro for an explanation. That's a lot for one line of code, which according to the perlmod documentation is exactly equivalent to BEGIN { require Module; import Module; } Consider Modern::Perl's implementation : package Modern::Perl; our $VERSION = '1.03'; use 5.010_000; use strict; use warnings; use mro (); use feature (); sub import { warnings->import(); strict->import(); feature->import( ':5.10' ); mro::set_mro( scalar caller(), 'c3' ); } 1; # End of Modern::Perl To adapt this to your situation, from your top-level module use all the other modules you want to load, and call their imports, if any, from MyTopLevelModule::import . Note that you don't necessarily need to copy use 5.010_000; into MyTopLevelModule.pm , but that would be a fine idea! According to the use documentation : In the peculiar use VERSION form, VERSION may be either a positive decimal fraction such as 5.006 , which will be compared to $] , or a v-string of the form v5.6.1 , which will be compared to $^V (aka $PERL_VERSION ). An exception is raised if VERSION is greater than the version of the current Perl interpreter; Perl will not attempt to parse the rest of the file. Compare with require , which can do a similar check at run time.
