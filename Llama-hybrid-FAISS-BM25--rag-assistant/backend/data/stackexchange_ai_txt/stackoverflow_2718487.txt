[site]: stackoverflow
[post_id]: 2718487
[parent_id]: 2717619
[tags]: 
There are several techniques to generate XML, each with their own advantages and disadvantages. The simplest to implement (but the hardest to make right) is to build the XML manually. Assuming you want your ingredient list to look something like: You need your code to walk the vector: System.out.println(" "); Vector ingredients; for (String name : ingredients) { System.out.print(" "); } System.out.println(" "); The problem with such a method is that when you modify the underlying data structure (in your case, the Vector of Arrays, you need to modify the XML generation code to match (which often leads to incorrect XML). It's much better to use an XML library to generate the XML. A good XML library will always generate valid XML. import java.io.FileWriter; import com.megginson.sax.XMLWriter; import org.xml.sax.helpers.AttributesImpl; public class GenerateXML { public static void main (String args[]) throws Exception { XMLWriter writer = new XMLWriter(new FileWriter("output.xml")); writer.startDocument(); writer.startElement("","ingredients","",null); for (String ingredient : ingredients) { AttributesImpl attribs = new AttributesImpl(); attribs.addAttribute("","name","","",ingredient); writer.startElement("", "ingredient","",attribs); writer.endElement("ingredient"); } writer.endElement("ingredients"); writer.endDocument(); } For a more complete description of what's possible with a DOM XMLWriter look at http://docstore.mik.ua/orelly/xml/sax2/ch02_02.htm with particular attention to Section 2.2.3. You could also do a DOM to XML transformation, but using DOM means that you must build a DOM representation of your data structure, which probably is (in your case) an unnecessary and unwelcome extra step. As an aside, while you may start off with something like a Vector of String arrays, such a data structure has little to do with the real world concepts of what a recipe entails. You might be better served in the long run to use a class Recipie, which contains classes for Ingredients, and Instructions (which in turn, contain steps). While it may seem like more work to lay out the three or four different types of classes, this work up front saves more than ten times the equivalent amount of work in getting the last 10% of the program done. Even for a "quick" proof of concept, the time savings of using a truly descriptive data structure can be significant; as the proof of concept may quickly become the beginning prototype, which then might become the foundation for the real release. Good luck, and happy programming!
