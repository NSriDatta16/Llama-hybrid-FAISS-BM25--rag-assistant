[site]: stackoverflow
[post_id]: 3226308
[parent_id]: 3226208
[tags]: 
Double.TryParse(t1.Text.Trim(), out tr1); will set tr1 to the text box's numeric value, or 0.0 if it failed to convert it for some reason. It'll also return true if the conversion succeeded or false if it failed, but you don't care about the return value if the default is 0.0. Added bonus: it won't throw an exception if someone decides to put "This is not a number." into a text box. It'll just see the value as 0. To do this in an array... TextBox t[] = { t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15 }; double tr[] = new double[t.Length]; for (int i = 0; i UPDATE: Note, it's perfectly reasonable to expect to be able to compute an average of numbers that includes 0. In order to do this: TextBox t[] = { t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15 }; double tr[] = new double[t.Length]; int valid_count = 0; for (int i = 0; i Set your TextBoxes' default values to blank (""), and then you'll know how many were legitimately 0's entered by the user and how many were blank. Divide the sum by valid_count to get an accurate average. (But be sure valid_count > 0 , or you'll likely get a divide-by-zero exception.)
