[site]: stackoverflow
[post_id]: 3938861
[parent_id]: 
[tags]: 
How to generate large files (PDF and CSV) using AppEngine and Datastore?

When I first started developing this project, there was no requirement for generating large files, however it is now a deliverable. Long story short, GAE just doesn't play nice with any large scale data manipulation or content generation. The lack of file storage aside, even something as simple as generating a pdf with ReportLab with 1500 records seems to hit a DeadlineExceededError. This is just a simple pdf comprised of a table. I am using the following code: self.response.headers['Content-Type'] = 'application/pdf' self.response.headers['Content-Disposition'] = 'attachment; filename=output.pdf' doc = SimpleDocTemplate(self.response.out, pagesize=landscape(letter)) elements = [] dataset = Voter.all().order('addr_str') data = [['#', 'STREET', 'UNIT', 'PROFILE', 'PHONE', 'NAME', 'REPLY', 'YS', 'VOL', 'NOTES', 'MAIN ISSUE']] i = 0 r = 1 s = 100 while ( i Nothing particularly fancy, but it chokes. Is there a better way to do this? If I could write to some kind of file system and generate the file in bits, and then rejoin them that might work, but I think the system precludes this. I need to do the same thing for a CSV file, however the limit is obviously a bit higher since it's just raw output. self.response.headers['Content-Type'] = 'application/csv' self.response.headers['Content-Disposition'] = 'attachment; filename=output.csv' dataset = Voter.all().order('addr_str') writer = csv.writer(self.response.out,dialect='excel') writer.writerow(['#', 'STREET', 'UNIT', 'PROFILE', 'PHONE', 'NAME', 'REPLY', 'YS', 'VOL', 'NOTES', 'MAIN ISSUE']) i = 0 s = 100 while ( i Any suggestions would be very much appreciated. Edit: Above I had documented three possible solutions based on my research, plus suggestions etc They aren't necessarily mutually exclusive, and could be a slight variation or combination of any of the three, however the gist of the solutions are there. Let me know which one you think makes the most sense, and might perform the best. Solution A: Using mapreduce (or tasks), serialize each record, and create a memcache entry for each individual record keyed with the keyname. Then process these items individually into the pdf/xls file. (use get_multi and set_multi) Solution B: Using tasks, serialize groups of records, and load them into the db as a blob. Then trigger a task once all records are processed that will load each blob, deserialize them and then load the data into the final file. Solution C: Using mapreduce, retrieve the keynames and store them as a list, or serialized blob. Then load the records by key, which would be faster than the current loading method. If I were to do this, which would be better, storing them as a list (and what would the limitations be...I presume a list of 100,000 would be beyond the capabilities of the datastore) or as a serialized blob (or small chunks which I then concatenate or process) Thanks in advance for any advice.
