[site]: stackoverflow
[post_id]: 215603
[parent_id]: 215584
[tags]: 
One possible approach would be to allow the user to grab and drag the midpoint of one of the connector lines, which would break the line into two segments (joined at the ends). That keeps things simple and avoids the need to deal with complex curves, and it would be pretty simple to implement. You could get fancy and allow additional subdividing of lines, so a single line could eventually be broken into any number of sub-lines. Some basic ideas on what would be required to do this: A representation of the line segments and the various points defining the ends. You might store one point for one end, one point for each of the intermediate segment break points, and a final point for the other end. A way to track where the cursor is, so that when it's close to the midpoint of a line you can prepare to grab and drag the line to split it. The "mouse move" event will play a role in this. Not sure which toolkit you're using, or I would be more specific about what the event would be named - it might be onMouseMove. A way to track drag operations. This will probably involve "mouse down", "mouse move", and "mouse up". As you drag, you'd be updating the coordinates of the relevant segment break point. Unfortunately I think the basic drawing/windowing system isn't going to be of much use in trying to detect paints that overlap each other. You can do it yourself, but I agree with your thought that it may be tricky and tedious to code. The final product might look something like this: (source: misterfoo.com )
