[site]: stackoverflow
[post_id]: 4838021
[parent_id]: 4823223
[tags]: 
I'd suggest using SVD, singular value decomposition, for PCA, because 1) it gives you directly values and matrices you need 2) it's robust. See principal-component-analysis-in-python on SO for an example with (surprise) iris data. Running it gives read iris.csv: (150, 4) Center -= A.mean: [ 5.84 3.05 3.76 1.2 ] Center /= A.std: [ 0.83 0.43 1.76 0.76] SVD: A (150, 4) -> U (150, 4) x d diagonal x Vt (4, 4) d^2: 437 138 22.1 3.09 % variance: [ 72.77 95.8 99.48 100. ] PC 0 weights: [ 0.52 -0.26 0.58 0.57] PC 1 weights: [-0.37 -0.93 -0.02 -0.07] You see that the diagonal matrix d from SVD, squared, gives the proportion of total variance from PC 0, PC 1 ... Does this help ?
