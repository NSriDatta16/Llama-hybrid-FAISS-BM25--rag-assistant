[site]: stackoverflow
[post_id]: 1549562
[parent_id]: 1549485
[tags]: 
A nested/inner class is just a class that's only ever used specifically in the context of another class, which doesn't have it's own class file. If it's linked to an instance, it can only be instantiated in the context of a parent class instance; it can see private data, or only private static data if it's a static class. The java developer site has a nested classes tutorial with one example: http://java.sun.com/docs/books/tutorial/java/javaOO/nested.html A couple examples of usage: Hide a concrete implementation of an interface: (Thinking of a database session for a tool like Hibernate): Suppose you have a Session interface, and a SessionFactory which returns an instance of a Session. The SessionImpl concrete class that implements the Session interface could be an innner class of the factory that knows how to construct and initialize it. Supply information by implementing an interface: In the Wicket web framework, each GUI component has an associated "model", whose job is to wire data to the component. The interface looks something like: public interface IModel extends IDetachable { public Object getObject(); public Object setObject(); } Suppose you have some special logic to retrieve data for a custom GUI component that you've written. Since no other component retrieves data the same way, you could use an anonymous class at the point where the IModel is supplied to take care of the data retrieval. If you have another point in the same class where you need to reuse your IModel implementation, you could make it an inner class. Later, if you need the model elsewhere, you could convert it to a top-level class. Generally you use an inner class in a situation where you need a class definition, but that class is only usable or only makes sense in the context of the parent class.
