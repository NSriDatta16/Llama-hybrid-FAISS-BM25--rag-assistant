[site]: stackoverflow
[post_id]: 1491264
[parent_id]: 1486141
[tags]: 
I think you have two questions here: What is the best way to store a constant global variable (with possible Multi-Threaded access) ? How to store your data (which container use) ? The solution described by sbi is elegant, but you should be aware of 2 potential problems: In case of Multi-Threaded access, the initialization could be skrewed. You will potentially attempt to access this variable after its destruction. Both issues on the lifetime of static objects are being covered in another thread . Let's begin with the constant global variable storage issue. The solution proposed by sbi is therefore adequate if you are not concerned by 1. or 2., on any other case I would recommend the use of a Singleton, such as the ones provided by Loki . Read the associated documentation to understand the various policies on lifetime, it is very valuable. I think that the use of an array + a map seems wasteful and it hurts my eyes to read this. I personally prefer a slightly more elegant (imho) solution. const char* find_language(Language lang) { typedef std::map map_type; typedef lang_map_type::value_type value_type; // I'll let you work out how 'my_stl_builder' works, // it makes for an interesting exercise and it's easy enough // Note that even if this is slightly slower (?), it is only executed ONCE! static const map_type = my_stl_builder () second; } And now on to the container type issue. If you are concerned about performance, then you should be aware that for small data collection, a vector of pairs is normally more efficient in look ups than a map. Once again I would turn toward Loki (and its AssocVector), but really I don't think that you should worry about performance. I tend to choose my container depending on the interface I am likely to need first and here the map interface is really what you want. Also: why do you use 'const char*' rather than a 'std::string'? I have seen too many people using a 'const char*' like a std::string (like in forgetting that you have to use strcmp) to be bothered by the alleged loss of memory / performance...
