[site]: stackoverflow
[post_id]: 5621048
[parent_id]: 5620386
[tags]: 
You converted your native string to a Managed string just fine. This article on MSDN , has samples on how to convert between all the different string types that ships on Microsoft platforms: Having said that, I took your code, and compiled it, and I couldn't get anything to fail. Of course I had to come up with my own way of initializing UnmanagedClass::_someString, which I did by just doing this: UnmanagedClass::UnmanagedClass(const float* /*flts*/, unsigned int /*fltlen*/, int /*offset*/) { _someString = "A few of my favorite things"; } When I did that, and stepped through this code: #include "stdafx.h" #include "Wrapper.h" int _tmain(int argc, _TCHAR* argv[]) { Wrapper^ w = gcnew Wrapper(NULL, 0, 0); System::String^ s = w->getSomeString(); return 0; } It worked just fine. Here is the rest of what I did: // UnmanagedClass.h #pragma once #pragma unmanaged #include class UnmanagedClass { public: UnmanagedClass(const float* flts, unsigned int fltlen, int offset); std::string getSomeString() { return _someString; } private: std::string _someString; }; And it's implementation: // UnmanagedClass.cpp #include "UnmanagedClass.h" #include UnmanagedClass::UnmanagedClass(const float* /*flts*/, unsigned int /*fltlen*/, int /*offset*/) { _someString = "A few of my favorite things"; } And the managed class // wrapper.h #pragma once #pragma unmanaged #include "UnmanagedClass.h" #pragma managed public ref class Wrapper { public: Wrapper(const float* flts, unsigned int fltlen, int offset) { _unmanagedClass = new UnmanagedClass(flts, fltlen, offset); } ~Wrapper() { delete _unmanagedClass; } System::String^ getSomeString() { std::string x = _unmanagedClass->getSomeString(); //1 System::String^ ret = gcnew System::String(x.c_str()); //2 return ret; //3 } private: UnmanagedClass* _unmanagedClass; }; I hope that helps a little.
