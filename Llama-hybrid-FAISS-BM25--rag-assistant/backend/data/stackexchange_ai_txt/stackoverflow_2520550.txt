[site]: stackoverflow
[post_id]: 2520550
[parent_id]: 2520018
[tags]: 
do you really need a machine learning algorithm for this? What is your metric for similarity? You've mentioned the dimensionality of the number of objects, what about the size of the trait set for each person? Are there a maximum number of trait types? I might try something like this: 1) Have a dictionary mapping trait to a list of names named map for each person p for each trait t in p map[t].add(p); 2) then when I want to find the closest person, I'd take my dictionary and create a new temp one: dictionary mapping name to count called cnt for each trait t in my person of interest for each person p in map[t] cnt[p]++; then the entry with the highest count is closest The benefit here is the map is only created once. if the traits per person is small, and the types of available traits are large, then the algorithm should be fast.
