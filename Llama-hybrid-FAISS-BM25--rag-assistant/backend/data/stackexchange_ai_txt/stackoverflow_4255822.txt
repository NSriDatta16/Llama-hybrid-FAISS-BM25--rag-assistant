[site]: stackoverflow
[post_id]: 4255822
[parent_id]: 4255740
[tags]: 
Solution 1: You are exposing the header of Door which is only an implementation detail of your class. If Door was part of the public interface of Garage you might assume users of Garage are going to use Door too, but where it is private, it is far better not to be exposed. Solution 2: Using shared_ptr it means if you copy a Garage your copy has the same door. Not just as similar one, the same one. If you paint the door green on one of your garages, both your garages will have green doors. You must understand that issue. Where your class sits in your code plays a major part as to which is better to use. If Garage is part of your public interface and Door is not anywhere in the public interface at all then it is very much beneficial to decouple it out, possibly using shared_ptr. If Garage is not part of your public interface anywhere but is an implementation detail I would not care so much about the coupling issue. If Garage and Door are both in your public interface. and Door is very commonly used with Garage,.and Door.h does not bring in even more headers but is fairly light, you can get away with the aggregation as an object (include the header).
