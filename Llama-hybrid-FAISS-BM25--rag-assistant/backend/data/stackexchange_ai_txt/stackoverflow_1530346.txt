[site]: stackoverflow
[post_id]: 1530346
[parent_id]: 1529810
[tags]: 
A key reason for applying DRY to improve maintainability is to ensure that when a code change is necessary, that change only needs to be made in one place, thus avoiding the risk that it doesn't get changed everywhere that needs it. But I'm not telling the whole story: This interview with Dave Thomas has DT saying: DRY says that every piece of system knowledge should have one authoritative, unambiguous representation. The first time I saw "DRY" was in The Pragmatic Programmer so I'm inclined to go with Dave on this. There's another article worth reading here But DRY is a principle, not a rule: the better we understand the principle, the more able we should be to recognise situations where it should be applied. (And finally, I think I'd want a little more than "more-or-less the same" before I started "DRY"ing that code: if I could see a clear way in which the two things might diverge in the future then I'd be inclined to leave them alone).
