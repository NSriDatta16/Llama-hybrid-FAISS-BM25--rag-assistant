[site]: stackoverflow
[post_id]: 2110093
[parent_id]: 2109969
[tags]: 
An underutilized (but perfectly valid) technique is to use a class which defines a set of constants. As a class, you can add additional properties that can describe other aspects of the enumerated value. Curiously, this is the way most enums are implemented in Java (which doesn't have a special keyword for them). If you go this route, it's generally a good idea to make the class sealed and define a private constructor, so that only the class itself can define instances. Here's an example: public static class Position { private PlayerPosition (string name, bool isDefensive ) { this.Name = name this.IsDefensive = isDefensive ; } // any properties you may need... public string Name { get; private set; } public bool IsDefensive { get; private set; } public bool IsOffensive { get { return !IsDefensive; } } // static instances that act like an enum public static readonly Quarterback = new PlayerPosition( "Quarterback", false ); public static readonly Runningback = new PlayerPosition( "Runningback", false ); public static readonly Linebacker = new PlayerPosition( "Linebacker", true ); // etc... } Using such an enum results in more elegant and simpler syntax than attributes: if( PlayerPosition.Quarterback.IsDefensive ) { // ... }
