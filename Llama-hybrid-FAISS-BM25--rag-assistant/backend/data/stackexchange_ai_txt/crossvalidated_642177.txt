[site]: crossvalidated
[post_id]: 642177
[parent_id]: 
[tags]: 
Two different senarios to train only the last layer of a convolutional neural network

I have a convolutional neural network that has already been trained on data A. The network consists of feature extraction layers and two classification layers. I have trained only it's last classification layer on data B from scratch(without initial weights trained on data A!). For that purpose, I followed two different scenarios which result significantly different. Could anyone help me figure out this big difference? Scenario 1 results AUC=0.53 Accuracy=0.50 Precision=0.58 F1-Score=0.51 Sensitivity=0.50 Specificity=0.44 Scenario 2 results AUC=0.66 Accuracy=0.63 Precision=0.70 F1-Score=0.64 Sensitivity=0.63 Specificity=0.56 Scenario 1 #creating a network: classifying_network = Classifier(parameters[0],parameters[1], parameters[2], parameters[3], parameters[4]) #get the state_dict: state_dict=classifying_network.state_dict() #load the optimal weights trained on data A for all feature extraction and two classification layers: optimal_weights=torch.load(folder_with_networks+network+'/optimal_weights') #create new weight dictionary that has weights for all the layers except the last one which would be random initial values from the state dict: optimal_weights_withfirstclassificationlayer_secondrandom=optimal_weights optimal_weights_withfirstclassificationlayer_secondrandom['classifier.2.weight']=state_dict['classifier.2.weight'] optimal_weights_withfirstclassificationlayer_secondrandom['classifier.2.bias']=state_dict['classifier.2.bias'] #load the weights: classifying_network.load_state_dict(torch.load(folder_with_networks+network+'/optimal_weights_withfirstclassificationlayer_secondrandom')) #training the last layer after freezing feature extraction layers and first classification layer classifying_network.freeze_feature_extraction_first_classification()``` Scenario 2 #read the weights trained on data A previously: optimal_weights=torch.load(folder_with_networks+network+'/optimal_weights') #delete last layer optimal_weights_withfirstclassificationlayer={k:v for k,v in optimal_weights.items() if k !='classifier.2.weight' and k !='classifier.2.bias'} torch.save(optimal_weights_withfirstclassificationlayer,folder_with_networks+network+'/optimal_weights_withfirstclassificationlayer') #creating a network without the last layer: classifying_network = Classifiernolastlayer(parameters[0],parameters[1], parameters[2], parameters[3], parameters[4]) #load the weights dictionary mentioned above classifying_network.load_state_dict(torch.load(folder_with_networks+network+'/optimal_weights_withfirstclassificationlayer')) #add a new layer classifying_network.classifier.append(nn.Linear(256,1)) #training the last layer after freezing feature extraction layers and first classification layer classifying_network.freeze_feature_extraction_first_classification()
