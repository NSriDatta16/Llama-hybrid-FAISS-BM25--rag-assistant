[site]: stackoverflow
[post_id]: 1510059
[parent_id]: 1510031
[tags]: 
EDIT: Updated based on what Marc said. Well you could get the coverage up by doing: // Helper extension method public static IEnumerable AsWeakEnumerable(this IEnumerable source) { foreach (object o in source) { yield return o; } } ... [Test] public void GetEnumerator_FirstFifteenNumbers_AreCorrect() { IEnumerable weak = new FibonacciSequence().AsWeakEnumerable(); var sequence = weak.Cast ().Take(15).ToArray(); CollectionAssert.AreEqual(sequence, new[] {1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610}); } Note that weak is declared to be the nongeneric IEnumerable type... which means you need to call Cast on it to cast each returned object to int . I'm not sure I'd bother though...
