[site]: stackoverflow
[post_id]: 5068245
[parent_id]: 
[tags]: 
Looking for suggestions on understanding a particular combinatorial optimization problem

Given a set of items (sized anywhere from 1 to 100) and a number of bins (1 to 15.) Each item having a subset of bins the item can be assigned to and a preference ordering of which bin is best, second best, etc., just for it. Items also have a natural order, represented below by naming, e.g., item1 before item2. Each bin has a capacity between 1 and 5 (every item has identical weight, i.e., 1.) An example input could be three bins and six items (- indicates a bin is not in the item's usable set, i.e., can't be packed with it): | bin1 bin2 bin3 | bin1 bin2 bin3 ------------------------ ---------------------------- item1 | 1 2 - capacity | 4 4 5 item2 | - 1 2 item3 | 2 1 3 item4 | 1 2 3 item5 | 1 - 2 item6 | 1 2 3 The goals are (in order with each goal completely overriding any lower goal when there's a conflict, e.g., packing five items is always better than four no matter what number of bins are used or preferences ignored): maximize number of items packed pack items in their natural order, e.g., if total bin capacity is one and there are two items, item1 will be packed and item2 not minimize number of bins used pack each item according to its bin preferences and natural order, i.e, item1 in its first preference and item2 in its second is better than item1 in its second and item2 in its first in cases where two solutions are indistinguishable by these goals, either solution is acceptable to rank higher, e.g, as a side-effect of implementation or just arbitrary tie-breaking. So the input above would be packed as: | bin1 bin2 bin3 ------------------------ item1 | x item2 | x item3 | x item4 | x item5 | x item6 | x The question then is for what to read/review to help me come up with algorithm ideas for solving this problem with the input sizes from the first paragraph and a time constraint of a few seconds, i.e., not brute force (or at least any brute force I've conceived of so far.) I'm using Ruby and C but language isn't overly relevant at this stage of woods stumbling. I'll be grateful of any reading suggestions, ideas on combinations of algorithms, or just thoughts on clarifying the problem statement... Update 1 To be less unclear, while there are many algorithms that cover various parts of this my difficulty is in finding (or perhaps recognizing) information handling all the criteria together, especially minimizing the number of bins used when there is excess capacity and conflicting item-to-bin sets and item preferences, which is hopefully more clearly shown in the following example: | bin1 bin2 bin3 | bin1 bin2 bin3 ------------------------ ---------------------------- item1 | 1 2 3 capacity | 3 2 3 item2 | 1 2 3 item3 | - 1 2 While bin1 is the most preferred, item3 can't be placed in it at all, and while bin2 is the next most preferred for all items, it can hold only two of the three items. So the correct set of assignments (x) is actually the least preferred bin: | bin1 bin2 bin3 ------------------------ item1 | x item2 | x item3 | x Update 2 I reworked the description with information on how the goals relate and removed the variable of bin priority as it only makes finding an answer less likely and can be worked around elsewhere in the system I'm working on.
