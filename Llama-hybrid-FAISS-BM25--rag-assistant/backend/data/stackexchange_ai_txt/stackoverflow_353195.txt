[site]: stackoverflow
[post_id]: 353195
[parent_id]: 353190
[tags]: 
Indirectly, like so . Personally, I leave the storage int public (for example as DbFoo , where the enum property is Foo ) - that way I can still write lambdas against the column for execution at the DB, for example: where row.DbFoo == SomeConstant If you don't expose the storage value, you can't do this as cleanly. You could equally leave it internal, and have some methods in the context to do the filtering... here's one I wrote earlier today: public IOrderedQueryable Administrators { get { return Users.Where(x => x.DbUserType == User.UserTypeAdmin) .OrderBy(x => x.Name); } where User.UserTypeAdmin is my internal constant. In this case, I couldn't use a discriminated subclass, as it was interfering with ADO.NET Data Services.
