[site]: stackoverflow
[post_id]: 1673542
[parent_id]: 1634995
[tags]: 
The previous answers describe quicksort and its running time pretty well, but I want to comment on the worst-case running time. It is true that quicksort in general is O(n log n) in the average case (given a random permutation of inputs) and O(n^2) in the worst case. However, quicksort in general doesn't specify which element to partition around at every step, so the O(n^2) case arises when you pick any element (usually the first or the last) as the pivot without regard to its relation to other elements in the list. You can implement quicksort to run in worst-case O(n log n) by choosing the pivot wisely. One method is to find the median in O(n) time. (See http://en.wikipedia.org/wiki/Selection_algorithm#Linear_general_selection_algorithm_-_.22Median_of_Medians_algorithm.22 ) Then if you always partition around the median, the number of times any element is examined is at most O(log n), so that the total running time is O(n log n).
