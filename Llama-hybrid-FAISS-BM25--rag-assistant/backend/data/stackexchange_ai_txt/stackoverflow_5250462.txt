[site]: stackoverflow
[post_id]: 5250462
[parent_id]: 
[tags]: 
Ninject not injecting and throwing null reference exceptions

I'm new to Ninject so I'm sure that it's something I'm doing wrong, I'm just not sure what. I'm using Ninject and Ninject.MVC3 in my MVC3 web application. Here's an example of what I'm trying to do. I'm using the Repository pattern: public interface IRepository { T Get(object id); IList GetAll(); void Add(T value); void Update(T value); void Delete(T value); } For a concrete type: public Customer { public int Id { get; set; } public string Name { get; set; } public string Address { get; set; } public Customer() { } } Now I have 2 separate repositories, a cached version that needs injection to the database repository: public CachedCustomerRepository : IRepository { private IRepository _repository; public Customer Get(object id) { Customer cust = new Customer(); IList custs = GetAll(); if (custs != null && custs.Count > 0) cust = custs.FirstOrDefault(c => c.Id == int.Parse(id.ToString())); return cust; } public IList GetAll() { IList custs = HttpRuntime.Cache["Customers"] as IList ; if (custs == null) { custs = _repository.GetAll(); if (custs != null && custs.Count() > 0) { double timeout = 600000d; HttpRuntime.Cache.Insert("Customers", custs, null, DateTime.UtcNow.AddMilliseconds(timeout), System.Web.Caching.Cache.NoSlidingExpiration); } else { throw new NullReferenceException(); } } return custs; } public void Add(Customer value) { throw new NotImplementedException(); } public void Update(Customer value) { throw new NotImplementedException(); } public void Delete(Customer value) { throw new NotImplementedException(); } public CachedCustomerRepository() { } [Inject] public CachedCustomerRepository(IRepository repository) { _repository = repository; } } public class CustomerRepository : IRepository { public Customer Get(object id) { Customer cust = new Customer(); IList custs = GetAll(); if (custs != null && custs.Count > 0) cust = custs.FirstOrDefault(c => c.Id == int.Parse(id.ToString())); return cust; } public IList GetAll() { //Customer retrieval code } public void Add(Customer value) { throw new NotImplementedException(); } public void Update(Customer value) { throw new NotImplementedException(); } public void Delete(Customer value) { throw new NotImplementedException(); } public CachedCustomerRepository() { } } I set up a NinjectModule like this: public class ServiceModule : NinjectModule { public override void Load() { Bind >().To (); } } and I modified the NinjectMVC3.cs in the AppStart folder to get the module when creating the kernel: private static IKernel CreateKernel() { var kernel = new StandardKernel(new ServiceModule()); RegisterServices(kernel); return kernel; } In my controller I am using this: public ViewResult Index() { IRepository custRepo = new CachedCustomerRepository(); return View(custRepo.GetAll()); } It blows up on the line _repository.GetAll() in my CachedCustomerRepository . I've set a breakpoint to make sure that the CreateKernel() is executing and getting the bindings, which it is. I'm just not sure why the injection isn't happening. One other side note, I don't know if it's important or not, the IRepository, the Repositories and the concrete type are in a separate class library and is referenced in the mvc3 web app. Both the web app and the class library have a reference to Ninject and the web app also has a reference to Ninject.MVC3. The binding and kernel creation is all taking place in the Web App.
