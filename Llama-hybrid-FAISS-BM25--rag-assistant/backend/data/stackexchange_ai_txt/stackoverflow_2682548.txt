[site]: stackoverflow
[post_id]: 2682548
[parent_id]: 2657899
[tags]: 
I know if I were using SVN I would just keep my entire "~/code/" directory in a large repository, but I understand this is not a good way to do things with Git. The reason git dissuade people from having single, monolithic repositories is you cannot clone sub directories of a repository (like you can with SVN) Say you have git://blah/somecorp_code.git which has millions of revisions, and is 15GB. If you just want a subdirectory of that code, tough - you either get all 15GB or nothing. For personal code, this really isn't an issue - I have one "monolithic" git repository, which is about 20MB, and I can happily have it cloned on all the machines I wish to use it on. No one else uses it, no one else commits, and I rarely do much in the way of branching. It's really just use it a fancy-undo-system with nice syncing and remote backup (private GitHub project) I organised it as follows: In the root level of the repository, I have a code folder (along with a sites folder, for web-dev stuff - this is why the repository is 20MB) In the code folder, I have folders for various languages ( python , ruby , c etc) In each language directory, I have two folders, snippets and projects . Inside snippets is a bunch of files, inside projects is a series of folders. These projects are random things I've written, but don't really work on much (toy projects, "I wonder if I could..."-projects etc) If it's a single Python file, it goes in code/python/snippets/ , if it's more than one file it goes in code/python/projects/{project name} When I want to publicly release a project (on Github, usually), I create a new repository, copy the code to this and sync it with Github. The separate "active project" repository is now unrelated to the monolithic repo. I looked into the submodule project, but it is not intended for this usage - it's designed to make cloning dependencies easy, not manage a series of unrelated repositories I do have a script that uses the Github API to automatically clone all my projects locally, or update them with git pull - it's just self-contained version of githubsync.py (I merged github.py into the same file). It can be found here as gist/373731 I used githubsync.py to clone my projects to my laptop and desktop initially, and also routinely run it inside Dropbox, as a backup.
