[site]: stackoverflow
[post_id]: 3886595
[parent_id]: 3886287
[tags]: 
If you're trying to calculate the value of pi to millions of places or something, you first want to pay close attention to choosing a series that converges quickly, and which is amenable to parallellization. Then, if you have enough digits, it will eventually become cost-effective to split them across multiple processors; you will have to find or write a bignum library that can do this. Note that you can factor out the variables in various ways; e.g.: atan(x)= x - x^3/3 + x^5/5 - x^7/7 + x^9/9 ... = x*(1 - x^2*(1/3 - x^2*(1/5 - x^2*(1/7 - x^2*(1/9 ... Although the second line is more efficient than a naive implementation of the first line, the latter calculation still has a linear chain of dependencies from beginning to end. You can improve your parallellism by combining terms in pairs: = x*(1-x^2/3) + x^3*(1/5-x^2/7) + x^5*(1/9 ... = x*( (1-x^2/3) + x^2*((1/5-x^2/7) + x^2*(1/9 ... = [yet more recursive computation...] However, this speedup is not as simple as you might think, since the time taken by each computation depends on the precision needed to hold it. In designing your algorithm, you need to take this into account; also, your algebra is intimately involved; i.e., for the above case, you'll get infinitely repeating fractions if you do regular divisions by your constant numbers, so you need to figure some way to deal with that, one way or another.
