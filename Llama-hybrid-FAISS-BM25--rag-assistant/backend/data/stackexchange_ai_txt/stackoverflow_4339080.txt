[site]: stackoverflow
[post_id]: 4339080
[parent_id]: 4338984
[tags]: 
The if-exists-then-update-else-insert approach may be more code than delete-insert , but (depending on how many and what kind of indexes are defined on the tables) it is a lot less work for the server. A DELETE or INSERT operation requires every index to be modified, period. An UPDATE operation only requires these indexes modified whose fields have been updated in this instance. So unless you modify every indexed field of the record with your updates, the longer approach is the more efficient one. EDIT: Your question update says that currently you do not have any indexes apart from the primary key (which I assume is a clustered key). So in comparison: When the row already exists, it's 1 clustered index seek (assuming you find records by their PK) and: delete-insert : 4 write operations (delete row, delete PK index row, insert row, insert PK index row) check-update/insert : 1 write operation (update row) When the row does not yet exist, it's 1 clustered index seek and: delete-insert : 2 write operations (insert row, insert PK index row) check-update/insert : 2 write operations (insert row, insert PK index row) The more indexes exist, the worse will delete/insert perform for rows that already exist. Plus it can cause non-clustered indexes to become unnecessarily fragmented due to avoidable write operations.
