[site]: stackoverflow
[post_id]: 475194
[parent_id]: 474063
[tags]: 
I tend to use these type of checks and returns at the beginning of the method. So that I sort of emulate Eiffel like design by contract preconditions and assertions , as described in Bertrand Meyer's book Object-Oriented Software Construction, second edition, Prentice Hall . For your example, instead of returning void, I would return an enum identifying the violation something like: enum Violation { inviolate = 0, p_unspecified_unavailable, p_B_unspecified_unavailable,..... }; Violation fun(A* p) { //__Preconditions:___________________________________ if (! p) return p_unspecified_unavailable: if (! p->getB()) return pB_unspecified_unavailable; //__Body:____________________________________________ .... //__Postconditions: _________________________________ ..(if any).. return inviolate; } My point being that, I consider the precondition (and any post condition) validation to be a wrapping around implementation of the body of method/function and tend to distinguish and separate the flow of control conditional logic from the expressions of the body.
