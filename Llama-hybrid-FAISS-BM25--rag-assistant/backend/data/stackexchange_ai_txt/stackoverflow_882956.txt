[site]: stackoverflow
[post_id]: 882956
[parent_id]: 
[tags]: 
getting a substruct out of a big struct in C

I'm having a very big struct in an existing program. This struct includes a great number of bitfields. I wish to save a part of it (say, 10 fields out of 150). An example code I would use to save the subclass is: typedef struct {int a;int b;char c} bigstruct; typedef struct {int a;char c;} smallstruct; void substruct(smallstruct *s,bigstruct *b) { s->a = b->a; s->c = b->c; } int save_struct(bigstruct *bs) { smallstruct s; substruct(&s,bs); save_struct(s); } I also wish that selecting which part of it wouldn't be too much hassle, since I wish to change it every now and then. The naive approach I presented before is very fragile and unmaintainable. When scaling up to 20 different fields, you have to change fields both in the smallstruct , and in the substruct function. I thought of two better approaches. Unfortunately both requires me to use some external CIL like tool to parse my structs. The first approach is automatically generating the substruct function. I'll just set the struct of smallstruct , and have a program that would parse it and generate the substruct function according to the fields in smallstruct . The second approach is building (with C parser) a meta-information about bigstruct , and then write a library that would allow me to access a specific field in the struct. It would be like ad-hoc implementation of Java's class reflection. For example, assuming no struct-alignment, for struct struct st { int a; char c1:5; char c2:3; long d; } I'll generate the following meta information: int field2distance[] = {0,sizeof(int),sizeof(int),sizeof(int)+sizeof(char)} int field2size[] = {sizeof(int),1,1,sizeof(long)} int field2bitmask[] = {0,0x1F,0xE0,0}; char *fieldNames[] = {"a","c1","c2","d"}; I'll get the i th field with this function: long getFieldData(void *strct,int i) { int distance = field2distance[i]; int size = field2size[i]; int bitmask = field2bitmask[i]; void *ptr = ((char *)strct + distance); long result; switch (size) { case 1: //char result = *(char*)ptr; break; case 2: //short result = *(short*)ptr; ... } if (bitmask == 0) return result; return (result & bitmask) >> num_of_trailing_zeros(bitmask); } Both methods requires extra work, but once the parser is in your makefile - changing the substruct is a breeze. However I'd rather do that without any external dependencies. Does anyone have any better idea? Where my ideas any good, is there some availible implementation of my ideas on the internet?
