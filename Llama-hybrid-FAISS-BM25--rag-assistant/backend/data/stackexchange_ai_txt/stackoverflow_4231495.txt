[site]: stackoverflow
[post_id]: 4231495
[parent_id]: 4231479
[tags]: 
There are many thing that define a PL, here I'l list a few: Is it procedural, OO, imperative? Does it has strong type checking(C#, C++, Delphi) or dynamic(PHP, Pythong, JS) How are references handled? (Does it hide pointers like C#?) Does it require a runtime (C#, Java) or is it native to the OS(C, C++) Does it support threads (E.g Eiffel needs extra libraries for it) There are may others like the prescense of garbage collectors, the handling of params, etc. The Eiffel language has an interesting feature which is Design By Contract, I haven't seen this on any other language(I think C# 4.0 has it now), but it can be pretty useful if well used. I would recommend you to take a look on Bertrand Meyer's work to get a deeper understanding on how PL's work and the things that define them. Another thing that can define a PL is the interaction level with the system, this what makes the difference between low-level languages and high-level languages. Hope I can help
