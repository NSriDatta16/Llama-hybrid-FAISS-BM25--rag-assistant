[site]: stackoverflow
[post_id]: 4727185
[parent_id]: 4727098
[tags]: 
Create a "bitset" of all the numbers which makes it constant time to check if a number is there. That is a start. The solution will then be at most O(N^2) to make all combinations of 2 numbers. The only tricky bit here is when the solution contains a repeat, but it doesn't really matter, you can discard repeats unless it is the same number 3 times because you will hit the "repeat" case when you pair up the 2 identical numbers and see if the unique one is present. The 3 times one is simply a matter of checking if M is divisible by 3 and whether M/3 appears 3 times as you create the bitset. This solution does require creating extra storage, up to MAX/8 where MAX is the highest number in your set. You could use a hash table though if this number exceeds a certain point: still O(1) lookup.
