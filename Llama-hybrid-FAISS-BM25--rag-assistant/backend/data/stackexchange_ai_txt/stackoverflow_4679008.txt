[site]: stackoverflow
[post_id]: 4679008
[parent_id]: 4678889
[tags]: 
The final keyword prevents the class being extended by other classes, example: class Parent { } class Mother extends Parent { } final class Brother extends Mother /* - This class cannot be extended - */ { } class Pet extends Brother { } The Pet class will throw an error stating: Fatal error: Class Pet may not inherit from final class (Brother) This is also available for methods, so if you do not want to allow the methods to be inherited causing the child class to have the same method acting as an override. http://php.net/manual/en/language.oop5.final.php Yo used that you would like some real world examples of what interfaces can be used for, well a database abstraction layer You have 1 base class which provides the basic methods to iterate your database data, but that would use a sub class for the the database type, such as MySql , MsSql etc, each database type would have its own class, but for the base class to make sure that it has these methods they would all implement the same interface. Example interface IDatabaseLayer { public function connect(); public function query(); public function sanitize(); //... } So the base class knows that MySql and MsSql have the above methods, thus reducing errors and being more organized. When passing in objects to classes you want to be sure that the Object is of a certain type, PHP5 allows you to define what type of object should be passed into the methods as params. lets say you have 3 classes DatabaseCredentials DatabaseConnection DatabaseQuery you can specifically define in the constructuin of DatabaseConnection that you require a DatabaseCredentials class like so: class DatabaseConnection implements Connectable { public function __construct(DatabaseCredentials $ConnectionDetails) { $this->Connect($ConnectionDetails->BuildDSN()); } } A good way to really get started is by reading here: http://php.net/manual/en/language.oop5.php Another feature of PHP5 you may wish to look at is name spaces, this will allow you to keep your code organized, have multiple objects with the same name, makes auto loading more efficiently Small Example: namespace Database\MySql { class Database{} } namespace Database\MsSql { class Database{} } And you can just use like: use Database; $Database = new MySql\Database();
