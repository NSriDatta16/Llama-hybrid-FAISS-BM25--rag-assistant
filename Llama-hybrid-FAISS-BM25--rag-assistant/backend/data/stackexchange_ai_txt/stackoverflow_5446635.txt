[site]: stackoverflow
[post_id]: 5446635
[parent_id]: 
[tags]: 
Silverlight MVVM Light Listbox item Click Event

I'm using the MVVM Light Toolkit with Silverlight. On my UserControl I have a ListBox that displays a list of files. Each file has a delete image next to the file name. In the DataTemplate for the listbox I have an image (or can use a button) and a TextBlock. So I want to capture using the event when the user will clicks on the image(or button with image) to remove the file from the list of files. But I cannot seem to capture the event. Maybe this is due to having the SelectedItem Event on the listbox? public class MainViewModel : ViewModelBase { #region Properties public const string SelectedListBoxFilePropertyName = "SelectedUploadFile"; private UploadFile _selectedUploadFile = null; public UploadFile SelectedUploadFile { get { return _selectedUploadFile; } set { if (_selectedUploadFile == value) return; _selectedUploadFile = value; RaisePropertyChanged(SelectedListBoxFilePropertyName); } } public const string UploadFilesPropertyName = "UploadFiles"; private ObservableCollection _uploadFiles = new ObservableCollection (); public ObservableCollection UploadFiles { get { return _uploadFiles; } set { if (_uploadFiles == value) return; _uploadFiles = value; RaisePropertyChanged(UploadFilesPropertyName); } } #endregion public static ICommand BrowseCommand { get; private set; } public static ICommand DragDropFileCommand { get; private set; } public static ICommand RemoveCommand { get; private set; } #region Constructor public MainViewModel() { if (IsInDesignMode) { // Code runs in Blend --> create design time data. UploadFiles = new UploadFileContainer().UploadFiles; } else { // Code runs "for real" } WireUpCommands(); } #endregion #region Event Handlers private void OnBrowseFileCommand() { var dialog = new OpenFileDialog(); dialog.ShowDialog(); if (dialog.Files != null) AddFiles(dialog.Files); } private void OnDropFileCommand(DragEventArgs e) { var files = e.Data.GetData(DataFormats.FileDrop) as FileInfo[]; AddFiles(files); } private void OnRemoveFileCommand() { UploadFiles.Remove(_selectedUploadFile); } #endregion #region Private Methods private void WireUpCommands() { BrowseCommand = new RelayCommand(OnBrowseFileCommand); DragDropFileCommand = new RelayCommand (e => OnDropFileCommand(e)); RemoveCommand = new RelayCommand(OnRemoveFileCommand); UploadCommand = new RelayCommand(OnClickUploadCommand); } #endregion }
