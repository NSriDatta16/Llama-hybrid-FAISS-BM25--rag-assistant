[site]: stackoverflow
[post_id]: 4915363
[parent_id]: 4913863
[tags]: 
Rather than store Event.id as a property, use the id automatically embedded in each entity's key , or set unique key names on entities as you create them. You have lots of options for modeling the relationship between Event and JournalEntry : you could use a ReferenceProperty , you could parent JournalEntries to Events and retrieve them with ancestor queries, or you could store a list of JournalEntry key ids or names on Event and retrieve them in batch with a key query. Try some things out with realistically-distributed dummy data, and use appstats to see what works best. UserComment references an Event , while JournalEntry references a list of UserComments , which is a little confusing. Is there a relationship between UserComment and JournalEntry ? or just between UserComment and Event ? Persisting so many counts is expensive. When I post a comment, you're going to write a new UserComment entity and also update my User entity and a JournalEntry entity and an Event entity. The number of UserComments you expect per Event makes it unwise to include everything in the same entity group, which means you can't do these writes transactionally, so you'll do them serially, and the entities might be stored across different network nodes, making the whole operation slow; and you'll also be open to consistency problems. Can you do without some of these counts and consider storing others in memcache? When you fetch an Event from the datastore, you don't actually care about its list of search index words, and retrieving and deserializing them from protocol buffers has a cost. You can get around this by splitting each Event 's search index words into a separate child EventIndex entity. Then you can query EventIndex on your search term, fetch just the EventIndex keys for EventIndexes that match your search, derive the corresponding Events ' keys with key.parent() , and fetch the Events by key, never paying for the retrieval or deserialization of your search index word lists. Brett Slatkin explains this strategy here at 14:35. Updating Event.viewCount will fail if you have a lot of views for any Event in rapid succession, so you should try out counter sharding . Good luck, and tell us what you learn by trying stuff out.
