[site]: datascience
[post_id]: 64053
[parent_id]: 
[tags]: 
Steps on how to use autoencoders to reduce dimensions

I have a dataset that contains text columns. I have used tf-idf to convert those text columns to numerical columns. I want to reduce the dimension of the dataset since tf-idf creates a multitude of new features/columns. I am thinking of using autoencoder to reduce the dimension of the data by using the output of the encoded layer, concatenate those output to my dataframe and use it as a training set for the random forest. My questions are: Do the above steps sound reasonable? In particular, should I train the autoencoder on the whole dataset and then use the output of the encoded layer (after training) as the new columns to feed random forest? [See code below] I am using Keras so after defining the autoencoder model, I fit the whole dataset and then also predict on the whole dataset using only the encoded layer. And then using those predictions as my updated data. Here is the code I am using: def autoencoder(df): #return the lower dimensional data to feed directly into train_test_split df_copy = df.copy() input_dim = Input(shape = (df_copy.shape[1], )) # DEFINE THE ENCODER LAYER encoded = Dense(int(df_copy.shape[1]/2), activation = 'relu')(input_dim) # DEFINE THE DECODER LAYER decoded = Dense(df_copy.shape[1], activation = 'sigmoid')(encoded) # COMBINE ENCODER AND DECODER INTO AN AUTOENCODER MODEL autoencoder = Model(input = input_dim, output = decoded) # CONFIGURE AND TRAIN THE AUTOENCODER autoencoder.compile(optimizer = 'adadelta', loss = 'mean_squared_error') autoencoder.fit(df_copy.values, df_copy.values, nb_epoch = 10, batch_size = int(df_copy.shape[1]/3)) # THE ENCODER TO EXTRACT THE REDUCED DIMENSION FROM THE ABOVE AUTOENCODER encoder = Model(input = input_dim, output = encoded) encoded_input = Input(shape = (int(df_copy.shape[1]/2), )) encoded_out = encoder.predict(df_copy.values) #Note how I am training on the same data I am predicting on return pd.DataFrame(encoded_out) I am new to autoencoders so any suggestions and help on how to use autoencoders in this context will be appreciated.
