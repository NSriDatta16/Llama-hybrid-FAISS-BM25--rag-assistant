[site]: stackoverflow
[post_id]: 650526
[parent_id]: 650461
[tags]: 
The main place I use macros is in my own testing framework. For example, when I want to assert that some code must throw, I use this macro: #define MUST_THROW( expr ) try { (expr); (myth_suite_).Fail( #expr + std::string( " should throw but didn't" ) ); } catch( ... ) { } And use it like this: MUST_THROW( some_bogus_stuff() ); MUST_THROW( more_bogus_stuff() ); The only other place I use them is in class declarations. I have a macro: #define CANNOT_COPY( cls ) \ private: \ cls( const cls & ); \ void operator=( const cls & ) \ which I use to specify that a class cannot be copied (or assigned): class BankAccount { CANNOT_COPY( BankAccount ); .... }; this doesn't do anything special but draws peoples attention and can easily be searched for.
