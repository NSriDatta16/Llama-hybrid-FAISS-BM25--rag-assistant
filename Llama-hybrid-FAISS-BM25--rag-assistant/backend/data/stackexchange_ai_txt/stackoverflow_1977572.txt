[site]: stackoverflow
[post_id]: 1977572
[parent_id]: 1977504
[tags]: 
Edit: Includes default JDK version The most efficient would be an XMLWriter which implements ContentHandler . In nutshell, you are reading and writing from and to IO buffers. There is an XMLWriter in DOM4J which is being used below. You can either subclass XMLWriter or use XMLFilter to do analysis. I am using XMLFilter in this example. Note that XMLFilter is also a ContentHandler . Here is the complete code. import org.dom4j.io.XMLWriter; import org.xml.sax.Attributes; import org.xml.sax.SAXException; import org.xml.sax.XMLReader; import org.xml.sax.helpers.XMLFilterImpl; import javax.xml.parsers.ParserConfigurationException; import javax.xml.parsers.SAXParserFactory; import java.io.IOException; import java.io.PrintStream; public class XMLPipeline { public static void main(String[] args) throws Exception { String inputFile = "build.xml"; PrintStream outputStream = System.out; new XMLPipeline().pipe(inputFile, outputStream); } //dom4j public void pipe(String inputFile, OutputStream outputStream) throws SAXException, ParserConfigurationException, IOException { XMLWriter xwriter = new XMLWriter(outputStream); XMLReader xreader = XMLReaderFactory.createXMLReader(); XMLAnalyzer analyzer = new XMLAnalyzer(xreader); analyzer.setContentHandler(xwriter); analyzer.parse(inputFile); //do what you want with analyzer System.err.println(analyzer.elementCount); } //default JDK public void pipeTrax(String inputFile, OutputStream outputStream) throws SAXException, ParserConfigurationException, IOException, TransformerException { StreamResult xwriter = new StreamResult(outputStream); XMLReader xreader = XMLReaderFactory.createXMLReader(); XMLAnalyzer analyzer = new XMLAnalyzer(xreader); TransformerFactory stf = SAXTransformerFactory.newInstance(); SAXSource ss = new SAXSource(analyzer, new InputSource(inputFile)); stf.newTransformer().transform(ss, xwriter); System.out.println(analyzer.elementCount); } //This method simply reads from a file, runs it through SAX parser and dumps it //to dom4j writer public void dom4jNoop(String inputFile, OutputStream outputStream) throws IOException, SAXException { XMLWriter xwriter = new XMLWriter(outputStream); XMLReader xreader = XMLReaderFactory.createXMLReader(); xreader.setContentHandler(xwriter); xreader.parse(inputFile); } //Simplest way to read a file and write it back to an output stream public void traxNoop(String inputFile, OutputStream outputStream) throws TransformerException { TransformerFactory stf = SAXTransformerFactory.newInstance(); stf.newTransformer().transform(new StreamSource(inputFile), new StreamResult(outputStream)); } //this analyzer counts the number of elements in sax stream public static class XMLAnalyzer extends XMLFilterImpl { int elementCount = 0; public XMLAnalyzer(XMLReader xmlReader) { super(xmlReader); } @Override public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException { super.startElement(uri, localName, qName, atts); elementCount++; } } }
