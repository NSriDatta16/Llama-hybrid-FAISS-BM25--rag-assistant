[site]: stackoverflow
[post_id]: 4861906
[parent_id]: 
[tags]: 
Optimizing Bitmap Loading in .Net Compact Framework

I'm in need to load an bunch of bitmaps in my application. The problem is that the loading make the form very slow. My actual class is as follows: public class ImagensDisponiveis { /// /// List of ImagemSygic struct /// private List _poolImagens; /// /// index of next avaiable image /// private int indiceProximoDisponivel; /// /// Path to image folder /// private string caminhoPasta; /// /// Number of found images that conforms to patterm /// private int MAXCOUNT; public ImagensDisponiveis(string caminhoPastaRecursos) { indiceProximoDisponivel = 0; caminhoPasta = caminhoPastaRecursos; PreencherPool(out _poolImagens, caminhoPasta); MAXCOUNT = _poolImagens.Count; } /// /// Preenche a lista de imagens com uma estrutura que contÃ©m a imagem e o caminho dessa imagem para o Sygic /// /// The _pool imagens. /// The filepath. private void PreencherPool(out List _poolImagens, string filepath) { DateTime momentoInicio = DateTime.Now; _poolImagens = new List (); string[] imagens = Directory.GetFiles(filepath); #if DEBUG //int counter = 0; //int numFiles = imagens.Length; #endif foreach (string caminhoImagem in imagens) { try { string filename = Path.GetFileName(caminhoImagem); //original image to show on .net [POI]anything.bmp //image that sygic tries to use on drive ?[POI]anything.bmp, where ? is an number between 1 to 6 bool valido = filename.StartsWith("[POI]", StringComparison.InvariantCulture); //Log.writeToLog(caminhoImagem + " " + valido.ToString()); if (valido) { var streamImagem = File.Open(caminhoImagem, FileMode.Open, FileAccess.Read); Bitmap temImagem = new Bitmap(streamImagem); ImagemSygic tempImgSygic = new ImagemSygic(); tempImgSygic.CaminhoImagemSygic = caminhoImagem; tempImgSygic.ImagemWindows = temImagem; tempImgSygic.SygicImageID = -1; _poolImagens.Add(tempImgSygic); #if DEBUG //counter++; #endif } } catch (ArgumentException aec) { Log.writeToLog("[EXCEPCAO ImagensDisp]: ArgumentException - " + aec.Message); } catch (UnauthorizedAccessException uae) { Log.writeToLog("[EXCEPCAO ImagensDisp]: UnauthorizedAccessException - " + uae.Message); } catch (Exception exc) { Log.writeToLog("[EXCEPCAO ImagensDisp]: Exception - " + exc.Message); } } DateTime tempoFim = DateTime.Now; TimeSpan duracao = tempoFim.Subtract(momentoInicio); Log.writeToLog("[Criacao da pool] Demorou " + duracao.TotalSeconds.ToString()); } /// /// OObtains the next avaianle ImagemSygic if there is an avaiable /// /// ImagemSygic if possible, else null public ImagemSygic ObterProximoDisponivel() { if (indiceProximoDisponivel > MAXCOUNT) return null; else { ImagemSygic imagemRetornar = _poolImagens[indiceProximoDisponivel]; indiceProximoDisponivel++; return imagemRetornar; } } public void ResetCounter() { indiceProximoDisponivel = 0; } } /// /// Class that contains the Bitmap preview and the original path to that image /// public class ImagemSygic { private volatile int _imageID; /// /// Gets or sets the imagem windows. /// /// The imagem windows. public Bitmap ImagemWindows { get; set; } /// /// Gets or sets the caminho imagem sygic. /// /// The caminho imagem sygic. public string CaminhoImagemSygic { get; set; } /// /// Gets or sets the sygic image ID. /// /// The sygic image ID. public int SygicImageID { get { return this._imageID; } set { this._imageID = value; } } } /// /// /// public class POISygic { private volatile int _latitude; private volatile int _longitude; /// /// Gets or sets the imagem. /// /// The imagem. public ImagemSygic Imagem { get; set; } /// /// Gets or sets the latitude. /// /// The latitude. public int Latitude { get { return this._latitude; } set { this._latitude = value; } } /// /// Gets or sets the longitude. /// /// The longitude. public int Longitude { get { return this._longitude; } set { this._longitude = value; } } /// /// Gets or sets the descricao. /// /// The descricao. public string Descricao { get; set; } /// /// Gets or sets a value indicating whether this instance is displayed now. /// /// /// true if this instance is displayed now; otherwise, false . /// public bool isDisplayedNow { get; set; } /// /// Gets or sets the elem ID. /// /// The elem ID. public int elemID { get; set; } } The objective of this class is to read an serie of bitmaps that have the [POI] prefix to allow .net to display an legend in an form control to the poi image appearing in an Sygic Drive window. The question is how i can optimize this code to load the images faster. At the moment it loads 26 315k bitmaps images in 10s. But probably in the final solution we could have as many as +260 images, so that is the reason of the need of optimization.
