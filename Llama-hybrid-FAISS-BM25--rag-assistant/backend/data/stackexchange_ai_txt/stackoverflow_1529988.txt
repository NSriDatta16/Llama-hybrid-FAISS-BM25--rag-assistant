[site]: stackoverflow
[post_id]: 1529988
[parent_id]: 
[tags]: 
Simple Type Inference in Scala

I have been looking at type inference in Scala and there are a couple of things I'd like to understand a bit better around why expression/method-return types have to be explicitly declared in a few cases. Explicit return declaration Example (works if return keyword is ommitted): def upCase(s: String) = { if (s.length == 0) return s // COMPILE ERROR - forces return type of upCase to be declared. else s.toUpperCase() } Why can't I use the explicitly typed parameter as a return value without declaring the return type? And that's not only for direct parameter references, just for any 'type-inferable' expression. Method overloading Example (fails to compile when the second joiner method is added): def joiner(ss: List[String], sep: String) = ss.mkString(sep) def joiner(ss: List[String]) = joiner(strings, " ") // COMPILE ERROR WHEN ADDED
