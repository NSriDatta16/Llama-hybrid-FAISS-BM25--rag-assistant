[site]: stackoverflow
[post_id]: 940896
[parent_id]: 
[tags]: 
Example usage where Lua fits much better than C/C++

I'm currently embedding Lua and using it as a glorified intelligent config file. However, I think I'm missing something since people rave about the uses of Lua. For example, I can easily explain why you might use shell scripting instead of C by showing this example (admittedly , boost regexp is overkill): #include #include #include int main(int argc, char * argv[]) { DIR *d; struct dirent *dir; boost::regex re(".*\\.cpp$"); if (argc==2) d = opendir(argv[1]); else d = opendir("."); if (d) { while ((dir = readdir(d)) != NULL) { if (boost::regex_match(dir->d_name, re)) printf("%s\n", dir->d_name); } closedir(d); } return(0); and compare it to: for foo in *.cpp; do echo $foo; done; Are there any examples that you can give in Lua which can make it 'click' for me? EDIT: Maybe my problem is that I don't know Lua well enough yet to use it fluently as I'm finding it easier to write C code. EDIT2: One example is a toy factorial program in C++ and Lua: #include int fact (int n){ if (n==0) return 1; else return (n*fact(n-1)); } int main (){ int input; using namespace std; cout > input; cout Lua: function fact (n) if n==0 then return 1 else return n * (fact(n-1)) end end print ("enter a number") a = io.read("*number") print ("Factorial: ",fact(a)) Here, the programs look alike, but there's clearly some cruft in the include, namespace and main() declarations you can get rid of. Also remove variable declarations and strong typing. Now are people saying this is the advantage which adds up over a larger program, or is there more to it? This doesn't stand out in the same way as the bash example.
