[site]: stackoverflow
[post_id]: 63587
[parent_id]: 62625
[tags]: 
Whilst it is possible to correctly guess where your code needs testing, I generally think you need metrics to back up this guess. Unit testing in my view goes hand in hand with code-coverage metrics. Code with lots of tests but a small coverage hasn't been well tested. That said, code with 100% coverage but not testing the boundry and error cases is also not great. You want a balance between high coverage (90% minimum) and variable input data. Remember to test for "garbage in"! Also, a unit-test is not a unit-test unless it checks for a failure. Unit-tests that don't have asserts or are marked with known exceptions will simply test that the code doesn't die when run! You need to design your tests so that they always report failures or unexpected/unwanted data!
