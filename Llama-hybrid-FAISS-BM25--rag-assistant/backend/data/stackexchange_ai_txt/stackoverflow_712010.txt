[site]: stackoverflow
[post_id]: 712010
[parent_id]: 711895
[tags]: 
No jQuery required: UE_replacer = function (node) { // just for performance, skip attribute and // comment nodes (types 2 and 8, respectively) if (node.nodeType == 2) return; if (node.nodeType == 8) return; // for text nodes (type 3), wrap words of the // form *xyzzy with a span that has class xyzzy if (node.nodeType == 3) { // in the actual text, the nodeValue, change // all strings ('g'=global) that start and end // on a word boundary ('\b') where the first // character is '*' and is followed by one or // more ('+'=one or more) 'word' characters // ('\w'=word character). save all the word // characters (that's what parens do) so that // they can be used in the replacement string // ('$1'=re-use saved characters). var text = node.nodeValue.replace( /\b\*(\w+)\b/g, ' *$1 ' // Updated: To contrast the direction of strager's answer , I got rid of my botched jQuery and kept the regular expression as simple as possible. This 'raw' javascript approach turns out to be much easier than I expected. Although jQuery is clearly good for manipulating DOM structure, it's actually not easy to figure out how to manipulate text elements.
