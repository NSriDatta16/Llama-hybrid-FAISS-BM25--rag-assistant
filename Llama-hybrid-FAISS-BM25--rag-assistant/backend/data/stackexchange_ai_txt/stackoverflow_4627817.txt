[site]: stackoverflow
[post_id]: 4627817
[parent_id]: 
[tags]: 
Singleton behavior with multi-user requests in ASP.NET

I need to create a singleton that would hold lots of data for a specific user. However, I am not unclear as to what the behavior of that singleton is in regard to multi-user app requests. Here is the scenario: On AppStart event I want to load common data for all users (from SQL) and store it as a collection somewhere within the ASP.NET storage mechanisms. (Any pointers as to where it should go would be greatly appreciated! I am thinking the cache.) If I store that data in the cache, I would also have to create a static property in the Global.asax that would provide access to that the data from the cache. This is not ideal because whenever an instance of any particular page, or generic handler, or what have you tries to query this data using Linq the property has to load the data from the cache... introducing latency. I need this data to be immediately available. (think of it as about 5K rows of data stored in collection of objects...) I was thinking to use a singleton to get that data, and store it but I don't know how it would behave between requests (and postbacks), as well as application instances, in terms of its persistence. On PostAuthenticate event I want to get user specific data from SQL in the form of a collection. If i store it as a singleton (in a similar manner as the common data) i am not clear as to: How is the data persisted? What is the scope of that singleton (it should be for the duration of the user session). How can I ensure that the data is immediately available to whatever needs to consume it? What happens between post-backs to that singleton? If another user logs in would another instance of that singleton be created for that specific application instance?
