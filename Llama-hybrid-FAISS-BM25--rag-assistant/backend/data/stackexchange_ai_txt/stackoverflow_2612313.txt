[site]: stackoverflow
[post_id]: 2612313
[parent_id]: 2603445
[tags]: 
With a little monkey-patching you could make this a lot cleaner without using any external framework. I have also taken the liberty to reshuffle the logic based on the assumption that the ordering of animations (if any) is unimportant. if Control is hidden loop through Controls as C hide if C != Control show if C = Control else hide Control Another way to interpret this algorithm is - as long as Controls contains at least one element (doesn't matter which), the visibility of Control will be toggled. And all (Controls minus Control) will be hidden. So I'm again taking the liberty to assume that there will always be one control in Controls, and that Control will always be toggled. Here's the monkey-patch++ code for it (also on jsfiddle ). This eliminates all ifs and elses from the function. The Toggle function now looks like this: function Toggle(Control) { var Controls = document.getElementsByTagName("ol" .. var Control = Control.getElementsByTagName("ol")[0]; Control.toggle(); Controls.filter(function(c) { return c != Control && c.isVisible(); }).hide(); }; Here is the code-behind. NodeList and Array that apply a property on a list of elements: â€‹NodeList.prototype.forEach = function(f) { for(var i = 0; i These methods apply a property on an individual element: Element.prototype.isVisible = function() { return this.style.visibility == 'visible' || this.style.visibility == ''; }; Element.prototype.show = function() { this.style.visibility = 'visible'; }; Element.prototype.hide = function() { this.style.visibility = 'hidden'; }; Element.prototype.toggle = function() { this.isVisible() ? this.hide() : this.show(); };
