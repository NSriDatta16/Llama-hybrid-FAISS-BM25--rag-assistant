[site]: stackoverflow
[post_id]: 1139232
[parent_id]: 1113611
[tags]: 
My python's rusty, so some of these may be in python and i just don't remember/never learned in the first place, but here are the first few that I thought of: Whitespace Ruby handles whitespace completely different. For starters, you don't need to indent anything (which means it doesn't matter if you use 4 spaces or 1 tab). It also does smart line continuation, so the following is valid: def foo(bar, cow) Basically, if you end with an operator, it figures out what is going on. Mixins Ruby has mixins which can extend instances instead of full classes: module Humor def tickle "hee, hee!" end end a = "Grouchy" a.extend Humor a.tickle Â» "hee, hee!" Enums I'm not sure if this is the same as generators, but as of Ruby 1.9 ruby as enums, so >> enum = (1..4).to_enum => # Reference: http://blog.nuclearsquid.com/writings/ruby-1-9-what-s-new-what-s-changed "Keyword Arguments" Both of the items listed there are supported in Ruby, although you can't skip default values like that. You can either go in order def foo(a, b=2, c=3) puts "#{a}, #{b}, #{c}" end foo(1,3) >> 1, 3, 3 foo(1,c=5) >> 1, 5, 3 c >> 5 Note that c=5 actually assigns the variable c in the calling scope the value 5, and sets the parameter b the value 5. or you can do it with hashes, which address the second issue def foo(a, others) others[:b] = 2 unless others.include?(:b) others[:c] = 3 unless others.include?(:c) puts "#{a}, #{others[:b]}, #{others[:c]}" end foo(1,:b=>3) >> 1, 3, 3 foo(1,:c=>5) >> 1, 2, 5 Reference: The Pragmatic Progammer's Guide to Ruby
