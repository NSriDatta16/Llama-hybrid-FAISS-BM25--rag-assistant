[site]: stackoverflow
[post_id]: 4907813
[parent_id]: 4907733
[tags]: 
Personally I use a very simple trick: struct EnumName { enum type { MemberOne, MemberTwo, ... }; }; typedef EnumName::type EnumName_t; // Usage EnumName_t foo = EnumName::MemberOne; In C++0x, you can have scoped enumerators directly: enum struct EnunName // note: struct and class equivalent here { MemberOne, MemberTwo, ... }; // Usage EnumName foo = EnumName::MemberOne; Which will be really great :) Note: scoped enum are also not subject to integral promotion, which is really great
