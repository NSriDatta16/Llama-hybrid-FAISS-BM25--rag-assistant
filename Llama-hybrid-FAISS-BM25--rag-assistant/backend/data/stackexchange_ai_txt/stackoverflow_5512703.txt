[site]: stackoverflow
[post_id]: 5512703
[parent_id]: 5512255
[tags]: 
Is it possible in your situation to implement some simple, high level API of your OpenCV native code, so that it is easly interoperable with C# using PInvoke? I had similar problem in the past, what I did was to pack my native code with about 15 functions that were easly usable from C# (using PInvoke). I don't know if it's possible to do it easly in your case, if not, you might try to code few classes in MC++ and try to compile your OpenCV code using MC++, afterall, main usage od C++/CLI is to create a bridge between native c++ and managed languages (altough, I personally still prefer to make nice native API and PInvoke it from C#. As for IplImage, if you are using EmguCV, there's a .Bitmap property that gives you managed System.Drawing.Bitmap class that can be used, without copying underlying buffers (I was rendering 5 live streams from cameras in my application and it worked pretty well). If on the other hand you want to do it manually, without using EmguCV, I encourage you to check their source code and see how they implement this functionality and do it by yourself (basically, you need to grab pointer to memory and get few properties, like image stride, width, height and create Bitmap class by yourself using those). Edit: I've found some code I've used to render an image that was processed in OpenCV: C++ code: void __stdcall GetRectifiedImage(Calibration* calib, int left, int** dataPtr, int* stride) { CvMat* mat = ((CalibrationImpl*)calib)->imagesRectified[left > 0 ? 0 : 1]; *dataPtr = mat->data.i; *stride = mat->step; } This code is basically filling dataPtr and stride (assuming that width and height is known) C# PInvoke: [DllImport("Stereo.dll")] public static extern void GetRectifiedImage(IntPtr calib, int left, out IntPtr data, out int stride); C# usage (with EmguCV): StereoNative.GetDepthImage(calib, out ptr, out stride); pictureBox5.Image = new Image (640, 480, stride, ptr).Bitmap; Without Emgu you would need to see how they implement .Bitmap property and just do it by yourself to make your own Bitmap object.
