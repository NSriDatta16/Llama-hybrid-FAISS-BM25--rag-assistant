[site]: stackoverflow
[post_id]: 4840676
[parent_id]: 4840566
[tags]: 
I'm just going to guess that you have some functions that are used in the constructor, but are not part of the public API. In this case, one option would be to simply store them as a property on the constructor. Then when calling them in the constructor, you'd use the .call() method to set the context of the current object being constructed. This way you automatically have access to public members via this , and to private variables if you pass them as an argument. var myClass = function() { this.someprop = 'prop value'; var privVar = 'private value'; myClass.func.call(this, privVar); }; myClass.func = function(priv){ alert(this.someprop); alert(priv); }; var inst = new myClass; So this just uses the MyClass function as namespace storage for a function that is used by the constructor. The constructor calls it from the context of this , which does something with this.someProperty and the privVar that is passed in. Not sure if this is what you're after, but it is one option. As correctly noted by @Raynos in the comments below, any properties added to the MyClass constructor as simple namespace storage are not private at all, and can be accessed by any code that can access the constructor. You could do some checking to help ensure it is called properly, like adding an instanceof check to make sure it is called from an instance of MyClass , but such checks are not at all secure and do not offer the protection of actual private members.
