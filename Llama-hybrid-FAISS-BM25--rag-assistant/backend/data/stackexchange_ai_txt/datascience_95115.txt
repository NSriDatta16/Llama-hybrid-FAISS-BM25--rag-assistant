[site]: datascience
[post_id]: 95115
[parent_id]: 19768
[tags]: 
You can implement MLPClassifier with GridSearchCV in scikit-learn as follows (other parameters are also available): GRID = [ {'scaler': [StandardScaler()], 'estimator': [MLPClassifier(random_state=RANDOM_SEED)], 'estimator__solver': ['adam'], 'estimator__learning_rate_init': [0.0001], 'estimator__max_iter': [300], 'estimator__hidden_layer_sizes': [(500, 400, 300, 200, 100), (400, 400, 400, 400, 400), (300, 300, 300, 300, 300), (200, 200, 200, 200, 200)], 'estimator__activation': ['logistic', 'tanh', 'relu'], 'estimator__alpha': [0.0001, 0.001, 0.005], 'estimator__early_stopping': [True, False] } ] PIPELINE = Pipeline([('scaler', None), ('estimator', MLPClassifier())]) You can then run GridSearch as the following: grid_search = GridSearchCV(estimator=PIPELINE, param_grid=GRID, scoring=make_scorer(accuracy_score),# average='macro'), n_jobs=-1, cv=split, refit=True, verbose=1, return_train_score=False) grid_search.fit(X, y)
