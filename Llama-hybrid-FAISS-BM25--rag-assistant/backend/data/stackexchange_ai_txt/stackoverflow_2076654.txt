[site]: stackoverflow
[post_id]: 2076654
[parent_id]: 2076605
[tags]: 
The problem is that the video capture has been added in 3.1, which means that the image picker from 3.0 does not support any of the video properties and methods (see the documentation and pay attention to the Availability sections). As for the solution, I guess you could try using the message syntax instead of the dot syntax: [picker setShowsCameraControls:YES]; This will give you warnings though (when compiled for 3.0 and older), and you have to be careful not to do it on older devices, because you’ll get an unknown selector exception. Or you can call the selector dynamically, which will get rid of the warnings and you can also check if the selector is supported first: SEL msg = @selector(setShowsCameraControls:); if ([picker respondsToSelector:msg]) [picker performSelector…]; There are already several questions about writing for different OS versions. Responding to comments: I think the main problem is that you are blindly pasting the code without understading it. Don’t do that. Sit and think about what the code does, until you understand each and every line. Now to explain your problem more thoroughly: The Image Picker in 3.0 has no video controls, since it can’t record video. Therefore when you try to compile a code such as picker.showsCameraControls , the compiler complains: There is no showsCameraControls property in the Image Picker class, that has only been added in 3.1. But there is a way around that, you can use the message syntax ( [foo setBar:…] ) instead of the dot syntax ( foo.bar=… ). If the foo object has no setBar method, the compiler will warn you, but the code will compile. Now let’s use the message syntax to set the camera controls: [picker setShowsCameraControls:YES]; When you compile this code for 3.1, it will compile without warning and run without error. When you compile for 3.0, you will get a warning from the compiler and if you run the code, it will fail (since there really is no showsCameraControls property). But that is not a problem, since you can only decide to run the fragile code if the OS supports it: BOOL videoSupported = [picker respondsToSelector:@selector(setShowsCameraControls:)]; if (videoSupported) { [picker setShowsCameraControls:YES]; // set all the other video properties } else { // do what makes sense without video support } This will work, but you’ll still get compiler warnings on 3.0. Now it depends on your default build target. If you build for 3.1, the warnings will disappear and the code should work on 3.0 just fine.
