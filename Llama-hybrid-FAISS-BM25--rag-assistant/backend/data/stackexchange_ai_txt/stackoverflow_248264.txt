[site]: stackoverflow
[post_id]: 248264
[parent_id]: 247769
[tags]: 
I disagree about starting with a book on design patterns or refactoring. In my opinion, for a solid OO design, you should first be familiar with the main OO design principles, then understand how your problem can be represented in those basic principles. Then you can start discovering opportunities for applying design patterns and refactoring techniques in order to achieve those fundamental principles. I would start with this book: Agile Software Development, Principles, Patterns, and Practices by Robert C. Martin In this book, Robert Martin describes the fundamental principles that make a good OO design, all of them related to encapsulation, coupling and modularity: The Open/Closed Principle Liskov Substitution Dependency Inversion Granularity Common Closure Reuse No Cyclic Dependency Stability Of Dependency Abstraction And Stability After all, almost every Design Pattern and Refactoring technique I have seen documented in GoF and Fowler is aimed at achieving one of several of these basic principles, depending on their relative priority for a given scenario.
