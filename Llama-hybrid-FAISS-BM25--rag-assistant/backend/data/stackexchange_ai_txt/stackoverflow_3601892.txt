[site]: stackoverflow
[post_id]: 3601892
[parent_id]: 3597747
[tags]: 
My answer is based on a few assumptions: The subject matter you're storing in source control is source code, and what you're doing with the code is professional software development. You should always use the best tool for the job; As the Joel Test says, you should use the best tools that money can buy - even if they're free. External factors are irrelevant to choosing what is the best tool for the job - these are the roadblocks you must overcome to adoption. Those reasons in the meantime are excuses to continue to use Subversion, not reasons why you should explicitly use it. Secondly, that a DVCS is considered a better, more powerful tool than Subversion. It has been discussed a lot on Stack Overflow in the past, and other answers have chimed in that most people agree that DVCS is "the better mousetrap." I don't feel it's necessary to prove this point; you can peruse the linked/similar questions already posted here. Of course, not every single DVCS will be better than Subversion in every aspect, but I believe that leading DVCS's like Mercurial, git, etc are better than Subversion is nearly every aspect. So by my logic, if you are going to choose the best tool for the job, and Subversion is an inferior tool, Subversion should no longer be used. That doesn't mean we'll see instant, worldwide adoption, but it is my contention that--if you believe in using the best tool for the job--all organizations should plan to move to a DVCS. Of course, many will not, and I expect people will continue to use Subversion for a long time.
