[site]: stackoverflow
[post_id]: 3020631
[parent_id]: 2988142
[tags]: 
Store the value in raw binary Store the value in a varbinary field by converting the data to its raw byte[] format. Why converting everything to strings sucks: Converting everything to strings is expensive because their is an actual conversion involved. For example: ints, doubles, floats, bools, dates, etc... all need to be cast to ASCII chars which can be expensive both in terms of storage and processing (especially since they'll need to be cast back). Believe me, I've done this before by converting everything to double (I was only using scalar values) and it worked, but it sucked. If you convert everything to bytes[] there is no 'real' format conversion because you're copying the primitive versions the types. The only addition is you'll have to store the type too so you'll know what to convert the data to when you pull it back out of the table. You have two options for this: Add another column with the type Concatenate the type to the front of the varbinary by adding a byte containing bitflags to indicate the type for example: 0000 0001 - int 0000 0010 - float 0000 0011 - double 0000 0100 - bool 0000 0101 - string 0000 0111 - date Option 1 adds another column, which you said you didn't want. Option 2 adds complexity. If you can handle bits and bytes it is the best/most efficient method. You use bitmath to set/read the type flags and you use an Array.Copy() and Convert.ToType() method to restore them back to their proper type. Sometimes, knowing how to work in binary and byte[]s can be a huge advantage. Update I'm not clear why this got down-voted. It satisfies the question's requirements of containing a simple per-row key-value pair relationship. It's also fast and efficient, considering that no unnecessary columns need to be added to the table and the values stored in the binary representation of their 'native' format. It adds an extra step to insert/extract items from the table but a normal dictionary/array would do the same on a lower level. The only major difference being, this method of storing values carries its type around with it. The only real downsides to this method are: values can't be searched in an efficient manner (because they need to be casted to be checked. It adds complexity because data needs to be cast into and cast out of binary format and the type would need to be stored. (which is still a marked improvement over adding a type column and casting everything as a string.
