[site]: stackoverflow
[post_id]: 2023638
[parent_id]: 
[tags]: 
How far do you go with YAGNI?

I am developing a new revolutionary web application for the enterprise market. Sure, many before me thought that their web app would be revolutionary only to find out it isn't. (Or it is, but the business is not good anyway). So I'm am thinking, in order to find out if my idea has any traction with the lowest cost, to follow an extreme YAGNI: No security features (i.e., no users, etc). For any new customer I install a new database instance and a new webapp instance. Each webapp instance is protected by a http server password (digest or basic authorization, perhaps over https). No internationalization. Just english string embedded in the source code. No decoupling. Just webpages that talk to the database. No performance tricks. No queues, caches, timers, background jobs, asynchronous calls, etc. No scalability. No database partitioning, no shards, no clustering or replication. Additionally, use YAGNI at the micro level whenever suitable. I just want to start the project and reach as fast as possible a point where I can sell (or try to sell) my innovative features with a simple and engaging UI. If the plan fails, I will know early. If it succeeds, I will see what customers want then. Do they want a french version? Or do they want users and roles within the organization? Is this what people mean by YAGNI, or is this a pathological and exagerated example of YAGNI?
