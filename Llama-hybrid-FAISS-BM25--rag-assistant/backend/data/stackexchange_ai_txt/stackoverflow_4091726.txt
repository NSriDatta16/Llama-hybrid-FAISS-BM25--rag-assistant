[site]: stackoverflow
[post_id]: 4091726
[parent_id]: 4073670
[tags]: 
Its an interesting question because it involves the fundamentals of functional design. My opinion: Try as much as possible to make the function return the messages, then send them. This separates the two different tasks nicely, and separates the purely functional task from the one that causes side effects. If this isn't possible, pass receivers as argument even if its a bit messy. If the broadcasting function uses that data, it should be given to it explicitly, for clarity and predictability. Using ETS as Peer Stritzinger suggests is really not any better than the PD, both hides the fact that the broadcasting function uses the receiver list and makes it dependent on global data. I'm not sure about the Erlang way of encapsulating some state in a process, as I GIVE TERRIBLE ADVICE suggests. Is it really any better that ETS or PD? clutters up my dispatcher with a bunch of {Msg, NewState} This is my experience also, that you often end up like this. It's not particularly pretty, but functional design seems to encourage this. Could some language feature be introduced to make it more beautiful and natural? EDIT: 6 years ago I wrote: Could some language feature be introduced to make it more beautiful and natural? After learning much more about functional programming I have realised that examples of this are state-monads and do-notation that are found in Haskell.
