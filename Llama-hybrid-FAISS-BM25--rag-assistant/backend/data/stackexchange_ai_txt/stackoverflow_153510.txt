[site]: stackoverflow
[post_id]: 153510
[parent_id]: 153394
[tags]: 
I've had the same thoughts myself. In the traditional MVC the most important thing is separating the View from the Model and Controller portions. It seems to be a good idea to separate the controller and the model simply because you can end up with bloated model objects: public class UserModel extends DatabaseModel implements XMLable, CRUDdy, Serializable, Fooable, Barloney, Baznatchy, Wibbling, Validating { // member fields // getters and setters // 100 interface methods } Whereas you can have separate controllers (or entire patterns) for many of the interfaces above, and yes, it's rather procedural in nature but I guess that's how things work these days. Alternatively you can realise that some of the interfaces are doing the same thing (CRUDdy - database storage and retrieval, Serializable - the same to a binary format, XMLable, the same to XML) so you should create a single system to handle this, with each potential backend being a separate implementation that the system handles. God, that's really badly written. Maybe there's something like "co-classes" that let you have separate source files for controller implementation that act as if they're a member of the model class they act on. As for business rules, they often work on multiple models at the same time, and thus they should be separate.
