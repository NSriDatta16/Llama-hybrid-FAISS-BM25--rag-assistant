[site]: stackoverflow
[post_id]: 5315848
[parent_id]: 5314230
[tags]: 
This isn't exactly what you want but may be expandable to meet your needs, the original code came from somewhere on msdn, can't remember where I'm afraid. I'm sure there must be a more elegant way of doing this (i.e. have a custom attribute on members of MyData) but I don't know it: public struct MyData { public int Num; public int Number; public string Name; public string Url; }; class XMLIgnore { static void SaveToXml(MyData obj) { XmlSerializer writer2 = customserialiser(obj); writer2.Serialize(Console.Out, obj); } static public XmlSerializer customserialiser(MyData d) { XmlAttributes attrs = new XmlAttributes(); attrs.XmlIgnore = true; XmlAttributeOverrides xmlOveride = new XmlAttributeOverrides(); if( d.Name.Length != 0 ) xmlOveride.Add(typeof(MyData), "Url", attrs); else xmlOveride.Add(typeof(MyData), "Name", attrs); if (d.Num != 0) xmlOveride.Add(typeof(MyData), "Number", attrs); else xmlOveride.Add(typeof(MyData), "Num", attrs); return new XmlSerializer(typeof(MyData), xmlOveride); } public static void go() { MyData d = new MyData(); d.Num = 1; d.Number = 2; d.Name = "John"; d.Url = "Happy"; SaveToXml(d); Console.WriteLine(); Console.WriteLine(); MyData d2 = new MyData(); d2.Num = 0; d2.Number = 2; d2.Name = ""; d2.Url = "Happy"; SaveToXml(d2); } }
