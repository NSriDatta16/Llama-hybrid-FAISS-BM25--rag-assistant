[site]: crossvalidated
[post_id]: 501899
[parent_id]: 
[tags]: 
How to decide what is a "good move" or a "bad move" with supervised learning on a game?

Let's take an example game, like connect $4$ , which is nice and simple. I know minimax is a super easy algorithm to program here, but let's say instead I wanted to create a Machine Learning model for it (which will probably run quicker also in this case tbh). Let's say I have a bunch of connect $4$ data with the moves during the game and who won. Is there any general sort of method to try and decide which move(s) were good during the game and which move(s) were bad? Obviously you could then use gradient descent / ascent to then make it more / less likely to make that move given the board position, but how you would actually decide what's good or bad seems rather difficult, since that's the whole purpose of what our model is meant to be doing in the first place! My (naïve) idea was that you would just say all the moves during the game the loser player made were bad, and all the moves the winning player made during the game were good. But obviously this is not how games work: the first ${10}$ moves could be fine, with only the last ${4}$ being the losing players demise. The only other idea I have so far had is maybe you could test and try different values of the whole "last ${n}$ moves were bad" approach (by which I mean you could tell your model that last $n$ moves the losing player made were undesirable moves, and tell your model the last $n$ moves by the winning player were desirable) and see which $n$ gives best performance, but it still seems a little arbitrary. It may/may not create a model that performs okay (haven't tried it yet), but it still seems rather arbitrary / naïve. Is there any general techniques / methods for what I am describing? Thanks! EDIT : the only other thing I can think of is maybe you could train your model on the moves suggested by minimax? So you end up with a Machine Learning model that will perform slightly worse than minimax, but will still do rather well considering how long it takes to process information. But eh, this still doesn't solve the problem in the general case where maybe we have a game where the "perfect move" is unknown.
