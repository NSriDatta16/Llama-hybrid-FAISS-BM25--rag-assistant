[site]: stackoverflow
[post_id]: 5162130
[parent_id]: 
[tags]: 
Elegant way of reducing list by averaging?

Is there a more elegant way of writing this function? def reduce(li): result=[0 for i in xrange((len(li)/2)+(len(li)%2))] for i,e in enumerate(li): result[int(i/2)] += e for i in range(len(result)): result[i] /= 2 if (len(li)%2 == 1): result[len(result)-1] *= 2 return result Here, what it does: a = [0,2,10,12] b = [0,2,10,12,20] reduce(a) >>> [1,11] reduce(b) >>> [1,11,20] It is taking average of even and odd indexes, and leaves last one as is if list has odd number of elements
