[site]: stackoverflow
[post_id]: 3453511
[parent_id]: 
[tags]: 
Optimal MySQL design for user-specific activity feeds

I'm building a website that constructs both site-wide and user-specific activity feeds. I hope that you can see the structure below and share you insight as to whether my solution is doing the job. This is complicated by the fact that I have multiple types of users that right now are not stored in one master table. This is because the types of users are quite different and constructing multiple different tables for user meta-data would I think be too much trouble. In addition, there are multiple types of content that can be acted upon, and multiple types of activity (following, submitting, commenting, etc.). Constructing a site-wide activity feed is simple because everything is logged to the main feed table and I just build out a list. I have a master feed table in MySQL that simple logs: type of activity; type of target entity; id of target entity; type of source entity (i.e., user or organization); id of source entity. (This is just a big reference table that points the script generating the feed to the appropriate table(s) for each feed entry). In generating the user-specific feed, I'm trying to figure out some way to join the relationship table with the feed table, and using that to parse results. I have a relationships table, comprised of 'following' relationships, that is similar to the feed table. It is simpler though b/c only one type of user is allowed to follow other content types/users. user/source id; type of target entity; id of target entity. Columns 2 & 3 in the feed and follow table are the same, and I have been trying to use various JOIN methodologies to match them up, and then limit them by any relationships in the follow table that the user has. This is has not been very successful. The basic query I am using is: SELECT * FROM (`feed` as fe) LEFT OUTER JOIN `follow` as fo ON `fe`.`feed_target_type` = `fo`.`follow_e_type` AND fo.follow_e_id = fe.feed_target_id WHERE `fo`.`follow_u_id` = 1 OR fe.feed_e_id = 1 AND fe.feed_e_type = 'user' ORDER BY `fe`.`feed_timestamp` desc LIMIT 10 This query also attempts to grab any content that the user has created (which data is logged in the feed table) that the user is, in effect, following by default. This query seems to work, but it took me sometime to get to it and am pretty sure I'm missing a more elegant solution. Any ideas?
