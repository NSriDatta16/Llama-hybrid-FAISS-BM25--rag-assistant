[site]: stackoverflow
[post_id]: 2765850
[parent_id]: 2765786
[tags]: 
Unfortunately, searching for an item with the highest value for a specified observable on a set of n items means that each item must be checked. So the complexity is O(n). This stands if no assumtion is made on the collection's order. Having m collections to scan, the complexity (as you already figured out) is O(m x n). EDIT [Erik Burigo] : This part of answer has been removed because it did not respond to the question's needs. [omissis] After having misunderstood the question I finally catched the point. I can't see a more compact and elegant syntax than the one I'm proposing below. var collection = new List > { new Dictionary {{"Field1", "Oarfish"}, {"Field2", "Atmosphere"}, {"Field3", "Pretty"}}, new Dictionary {{"Field1", "Raven"}, {"Field2", "Radiation"}, {"Field3", "Adorable"}}, new Dictionary {{"Field1", "Sunflower"}, {"Field2", "Flowers"}, {"Field3", "Cute"}} }; var fields = new[] {"Field1", "Field2", "Field3"}; var maximums = new List (fields.Length); foreach (var field in fields) { maximums.Add(Field(collection, field).OrderByDescending(fieldItem => fieldItem.Length).First()); } where static IEnumerable Field(IEnumerable > collection, String field) { foreach (var row in collection) { yield return row[field]; } } Thus relaying on an accumulator list. This solution needs the number of fields of the various rows not to be varying from row to row (but it seems to be the case). However, using an accumulator and an invoked method is not truly compact. What you really need is a steamlined way to transpose your data structure in order to figure the longest string for each field. As far as I know there is no shortcut in the framework to do this, thus the resulting method ( Field(...) ) will be tailored on your specific data structure (a collection of string-indexed strings). Being so, the Field(...) method could be further enhanced by making it provide the longest string, thus shortening the overall invocation statement. So, the more work we put in that specific method, the more the solution approaches what you already had in mind before posting the question. EDIT [Erik Burigo] : Changed in order to make the collection more similar to the one posted in the question.
