[site]: stackoverflow
[post_id]: 703524
[parent_id]: 703503
[tags]: 
std::list is definitely not a good (valid) choice for std::sort() , because std::sort() requires random-access iterators. std::map and friends are also no good because an element's position cannot be enforced; that is, the position of an element in a map cannot be enforced by the user with insertion into a particular position or a swap. Among the standard containers we're down to std::vector and std::deque . std::sort() is like other standard algorithms in that it only acts by swapping elements' values around ( *t = *s ). So even if list would magically support O(1) access the links wouldn't be reorganized but rather their values would be swapped. Because std::sort() doesn't change the container's size it should make no difference in runtime performance whether you use std::vector or std::deque . Primitive arrays should be also fast to sort, probably even faster than the standard containers -- but I don't expect the difference in speed to be significant enough to justify using them.
