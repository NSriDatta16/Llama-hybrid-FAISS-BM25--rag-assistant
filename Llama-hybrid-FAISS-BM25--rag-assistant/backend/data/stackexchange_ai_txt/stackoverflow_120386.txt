[site]: stackoverflow
[post_id]: 120386
[parent_id]: 114431
[tags]: 
Using the method in the answer provided by Steve Moyer I was able to produce the following solution. It is a rather inelegant hack I'm afraid and I feel that there must be a neater solution, but it works, and is much faster than simply counting all of the words in a buffer every time the status line is updated. I should note also that this solution is platform independent and does not assume a system has 'wc' or something similar. My solution does not periodically update the buffer, but the answer provided by Mikael Jansson would be able to provide this functionality. I have not, as of yet, found an instance where my solution becomes out of sync. However I have only tested this briefly as an accurate live word count is not essential to my needs. The pattern I use for matching words is also simple and is intended for simple text documents. If anyone has a better idea for a pattern or any other suggestions please feel free to post an answer or edit this post. My solution: "returns the count of how many words are in the entire file excluding the current line "updates the buffer variable Global_Word_Count to reflect this fu! OtherLineWordCount() let data = [] "get lines above and below current line unless current line is first or last if line(".") > 1 let data = getline(1, line(".")-1) endif if line(".") " for str in data let count_words = count_words + NumPatternsInString(str, pattern) endfor let b:Global_Word_Count = count_words return count_words endf "returns the word count for the current line "updates the buffer variable Current_Line_Number "updates the buffer variable Current_Line_Word_Count fu! CurrentLineWordCount() if b:Current_Line_Number != line(".") "if the line number has changed then add old count let b:Global_Word_Count = b:Global_Word_Count + b:Current_Line_Word_Count endif "calculate number of words on current line let line = getline(".") let pattern = "\\ " let count_words = NumPatternsInString(line, pattern) let b:Current_Line_Word_Count = count_words "update buffer variable with current line count if b:Current_Line_Number != line(".") "if the line number has changed then subtract current line count let b:Global_Word_Count = b:Global_Word_Count - b:Current_Line_Word_Count endif let b:Current_Line_Number = line(".") "update buffer variable with current line number return count_words endf "returns the word count for the entire file using variables defined in other procedures "this is the function that is called repeatedly and controls the other word "count functions. fu! WordCount() if exists("b:Global_Word_Count") == 0 let b:Global_Word_Count = 0 let b:Current_Line_Word_Count = 0 let b:Current_Line_Number = line(".") call OtherLineWordCount() endif call CurrentLineWordCount() return b:Global_Word_Count + b:Current_Line_Word_Count endf "returns the number of patterns found in a string fu! NumPatternsInString(str, pat) let i = 0 let num = -1 while i != -1 let num = num + 1 let i = matchend(a:str, a:pat, i) endwhile return num endf This is then added to the status line by: :set statusline=wc:%{WordCount()} I hope this helps anyone looking for a live word count in Vim. Albeit one that isn't always exact. Alternatively of course g ctrl-g will provide you with Vim's word count!
