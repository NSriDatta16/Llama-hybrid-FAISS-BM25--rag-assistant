[site]: stackoverflow
[post_id]: 5229157
[parent_id]: 5228859
[tags]: 
You are correct that either a java.sql.blob or a byte[] would be the most appropriate way to store an uploaded file in a database. You should not store a MultipartFile or a CommonsMultipartFile in a database because these are intended to be temporary objects. Note this from the MultipartFile javadoc: The file contents are either stored in memory or temporarily on disk. In either case, the user is responsible for copying file contents to a session-level or persistent store as and if desired. The temporary storages will be cleared at the end of request processing. I don't quite follow what you're doing with your HttpServletRequest but it doesn't sound like the easiest way to handle the upload. The easiest way to handle an upload is to make the MultipartFile a parameter on your controller method (if you're using Spring 3.0 or later, I think): @RequestMapping(value = "/upload", method = RequestMethod.POST) public void exampleFileUpload(@RequestParam("file") MultipartFile file) { if (!file.isEmpty()) { try { byte[] fileBytes = file.getBytes(); // Persist those bytes using JPA here } catch (IOException e) { // Exception handling here } } } This should work reliably because you've extracted the bytes into your byte[] array before the request has finished â€” and thus before the any temporary files used to handle the upload have been deleted.
