[site]: stackoverflow
[post_id]: 1835449
[parent_id]: 
[tags]: 
Why do Validation Errors persist?

A user submits registration information to the form: Create Fields Nbk: Name: Email: MailCode: TelephoneNumber: OrganizationId: OrganizationSponsorId: Controller: [Authorize] [AcceptVerbs(HttpVerbs.Post)] public ActionResult Create(DefectSeverityAssessmentBusiness.ModelRegistration registration) { registration.Nbk = StateController.GetNbk(Request); try { var errors = DataAnnotationsValidationRunner.GetErrors(registration); if (errors.Any()) foreach (var item in errors) { if( ModelState[item.PropertyName].Errors.Count==0) ModelState.AddModelError(item.PropertyName, item.ErrorMessage); //ModelState.SetModelValue(item.PropertyName,ViewData[item.PropertyName].ToValueProvider()); } if (ModelState.IsValid) { _RegistrationRepository.CreateRegistration(registration); return RedirectToAction("Index", "Assessment"); } } catch (Exception exception) { ModelState.AddModelError("Exception", exception); } return View(); } controller factory: ControllerBuilder.Current.SetControllerFactory(new Models.InMemoryRepositories.InMemoryControllerFactory()); public class InMemoryControllerFactory : IControllerFactory { private readonly Dictionary _controllers = new Dictionary (); private readonly Dictionary > _controllerFactoryDictionary = new Dictionary >(); public InMemoryControllerFactory() { InitializeDictionary(); } private void InitializeDictionary() { AddFactory(typeof(Controllers.HomeController), () => new Controllers.HomeController( new Models.InMemoryRepositories.Registration.InMemoryRegistrationRepository())); AddFactory(typeof(Controllers.RegistrationController),() => new Controllers.RegistrationController( new Models.InMemoryRepositories.Registration.InMemoryRegistrationRepository())); AddFactory(typeof(Controllers.AssessmentController),()=> new Controllers.AssessmentController( new Models.InMemoryRepositories.Registration.InMemoryDefectRepository(), new Models.InMemoryRepositories.Registration.InMemoryAssessmentRepository()) ); } private void AddFactory(Type type, Func creator) { const string Str_Controller = "Controller"; var fullname = type.Name; Debug.Assert(fullname.EndsWith(Str_Controller)); var controllerName= fullname.Substring(0, fullname.Length - Str_Controller.Length); Func > controllerFactoryFunc = (_controllerName) => { return () => { //var controllerName=ControllerNameFunc(type); if (!_controllers.ContainsKey(_controllerName)) _controllers.Add(_controllerName, creator()); return _controllers[_controllerName]; }; }; _controllerFactoryDictionary.Add(controllerName, controllerFactoryFunc(controllerName)); } #region IControllerFactory Members public IController CreateController(System.Web.Routing.RequestContext requestContext, string controllerName) { return _controllerFactoryDictionary[controllerName](); } /// /// Code via http://nayyeri.net/custom-controller-factory-in-asp-net-mvc /// /// public void ReleaseController(IController controller) { if (controller is IDisposable) (controller as IDisposable).Dispose(); else controller = null; } #endregion } Through the controller with an invalid value at first, then a valid one, but the error message stays and modelstate stays invalid. Why does this happen? i'm using the default model binder, but the included controller factory.
