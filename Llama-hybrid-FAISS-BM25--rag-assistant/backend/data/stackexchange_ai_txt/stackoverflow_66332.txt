[site]: stackoverflow
[post_id]: 66332
[parent_id]: 65458
[tags]: 
As of 2015, the most important factor is to use a Distributed Version Control System (DVCS). The main benefit of using a DVCS: allowing source code collaboration at many levels by reducing the friction of source code manipulation. This is especially important for a 1000+ developer organization. Reducing Friction Individual developer checkins are decoupled from collaboration activities. Lightweight checkins encourage clean units of independent work at a short-time scale (many checkins per hour or per day). Collaboration is naturally handled at a different, usually longer, time-scale (sync with others daily, weekly, monthly) as a system is built up in a distributed organization. Use Git Of the DVCS options, you should likely just use Git and take advantage of the great communities at GitHub or Bitbucket . For large private organizations, internal community and internal source code hosting may be important (there are vendors selling private hosting systems such as Atlassian Stash and probably others). The main reason to use Git is that it is the most popular DVCS. Because of this: Git is well-integrated into a wide range of development toolchains Git is known and used by most developers Git is well-documented Or Mercurial As an alternate to Git, Mercurial is also very good. Mercurial has a slightly cleaner, more orthogonal set of commands than Git. In the late 2000's, it used to be better supported than Git on Windows systems mostly due to having core developers that cared more about Windows. GUI For those who would like to use a GUI instead of git and hg on the command line, SourceTree is a great Windows and OS X application that presents a clean interface to both Git and Mercurial. Obsolete Recommendations As of 2010, I recommended Mercurial with TortoiseHG . It is the best combination of Windows support and distributed version control functionality. From 2006-2009, I recommended Subversion (SVN) because it is free and has great integration with most IDEs. For those in the organization who travel or prefer a more distributed model, they can use Git for all their local work but still commit to the SVN repository when they want to share code. This is a great balance between a centralized and distributed system. See Git-SVN Crash Course to get started. The final and perhaps most important reason to use SVN is TortoiseSVN , a Windows client for SVN that makes accessing repositories a right-click away for anyone. At my company, this has proven a great way to give repository access to non-developers.
