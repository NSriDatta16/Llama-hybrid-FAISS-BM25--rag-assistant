[site]: stackoverflow
[post_id]: 3608929
[parent_id]: 3590153
[tags]: 
I just wanted to add a couple of little comments to Nick's post : IDE : There is also now CFBuilder from adobe. Still no Visual Studio from what I hear of VS, but does include the likes of a line debugger if that's what you want. My personal preference is CFEclipse out of the two, but that is, as I say a personal preference. EDIT : And as Peter points out there is Fusion Debug available as a step debugger for ColdFusion "CF Long in the tooth" : is not a bad thing. Its a solid technology that gets regular version and point releases and has been around longer than most development languages, so has the benefit of maturity. CF9.0.1 was released recently. CF X is in the works. Railo and Open BlueDragon get regular updates as well, probably more regularly than Adobe ColdFusion, but that is the advantage of OSS. "Licence Costs" : In the context of this question, where CFML is already in use, licence costs don't really count. Plus it could be said, that if you were to put ColdFusion on say a CentOS server, then its actually cheaper to run ColdFusion than .Net after you figure in the cost of paying for a Windows Server licence. There are also Railo and OpenBlueDragon CFML servers both of which are free to use. Swings and roundabouts. To comment on something that Bigfellahull mentions. "Performance" : You can quite happily build some really badly performing applications in both .net and CFML. In both cases the performance comes down to knowing how to write good code and how to configure your server. As a CF developer, I can say that having your server engine based on a Java Server has a load of benefits for performance and extensibility. There are also products such as FusionReactor and SeeFusion that enable developers/server admins to monitor ColdFusion Servers to find and resolve applications and problems. Having only been involved in a few odds and ends of .net development I'm not sure whether there are equivalents with the .net framework and IIS. What I want to reiterate from Nick's answer is that really what it comes down to is the cost and risk associated with re-skilling and re-tooling developers and re-engineering a project in a different language. As Nick says : Rewrites are expensive and can go horribly wrong . Much ink has been spilled on this subject.
