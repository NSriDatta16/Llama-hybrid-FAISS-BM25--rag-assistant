[site]: stackoverflow
[post_id]: 4345732
[parent_id]: 3706938
[tags]: 
I've given this more thought and have a possible solution. I haven't implemented it yet, but I think it should work. Basically, it involves performing the following query (NOTE: this is MySQL specific): select * from members where hour(convert_tz(now(),'UTC',timezone)) = 3; This query selects all members that have a current local time between 3AM and 3:59AM by doing the following: It gets the current server time using now() , which is a time in UTC since the database server is configured for UTC time. It then converts that time with the convert_tz() function to the timezone of the member as specified in the timezone column of the members table. Note that the Member class contains a timezone field in the format "America/Los_Angeles". Next, it checks what hour it is with the hour() function to see if it is 3 , for 3AM. The query then returns all members which meet these requirements and sends email to each of them. I'm a little concerned about doing this timezone conversion and calculation for every member in the system every hour. I'll have to test things to see what kind of load it puts on the database, but it will probably choke with millions or even 10k's of users. An alternative that should significantly lighten the load, but isn't quite as elegant is to do the following (NOTE this code is UNTESTED!): @Scheduled(cron="0 2 * * * *") public void sendDailyReportEmail() { Query query = session.createQuery( "select distinct m.timezone from Member m"); List timezones = query.list(); for (String timezone : timezones) { DateTime now = new DateTime(DateTimeZone.forID(timezone)); if (now.getHourOfDay() == 3) { Query query2 = session.createQuery( "from Member where timezone = :zone"); query2.setParameter("zone", timezone); List members = query2.list(); // send email reports } } } This code does this: Execute method at 2 minutes past the hour, every hour of every day Query the database for a list of all unique timezones in the members table. For each timezone found, determine if it is currently in the 3AM hour. If a timezone is in the 3AM hour, select all of the members in that timezone and send email to them. This adds a little extra overhead at the beginning of each hour, but requires no per-user timezone processing. Chances are that there will only be a few dozen unique time zones actually used by the system. It's very unlikely that I'll have members in all 500+ timezones. One last thing. Instead of sending email during the 2AM hour, I moved it to 3AM. This is because when daylight savings time changes in the spring, time changes from 2AM to 3AM. So there is no such thing as 2:02AM, meaning emails wouldn't get sent that day. Furthermore, in the fall, the system could send out 2 emails per user since an hour repeats itself. I need to find out if non-USA timezones change time at different times, because the 3AM hour might be a problem elsewhere.
