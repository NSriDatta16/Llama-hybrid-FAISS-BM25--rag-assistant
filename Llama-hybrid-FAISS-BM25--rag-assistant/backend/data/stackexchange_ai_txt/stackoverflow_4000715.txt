[site]: stackoverflow
[post_id]: 4000715
[parent_id]: 3971752
[tags]: 
Close to your example, elegant and efficient: for (i = 2; i; --i) { /* Do stuff */ } Here's why I'd recommend that approach: It initializes the iterator to the number of iterations, which makes intuitive sense. It uses decrement over increment so that the loop test expression is a comparison to zero (the "i;" can be interpreted as "is i true?" which in C means "is i non-zero"), which may optimize better on certain architectures. It uses pre-decrement as opposed to post-decrement in the counting expression for the same reason (may optimize better). It uses a for loop instead of do/while or goto or XOR or switch or macro or any other trick approach because readability and maintainability are more elegant and important than clever hacks. It doesn't require you to duplicate the code for "Do stuff" so that you can avoid a loop. Duplicated code is an abomination and a maintenance nightmare. If "Do stuff" is lengthy, move it into a function and give the compiler permission to inline it if beneficial. Then call the function from within the for loop.
