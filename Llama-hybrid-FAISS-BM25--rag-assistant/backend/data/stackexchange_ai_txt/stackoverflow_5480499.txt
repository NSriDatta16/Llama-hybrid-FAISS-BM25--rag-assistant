[site]: stackoverflow
[post_id]: 5480499
[parent_id]: 5430707
[tags]: 
OK I'll give this a shot: I use Pydev and have been exploring using "nosetests" to launch tests so it's sort of relevant. My solution is a total hack, but does seem to work when saying "Debug as UnitTest" from within PyDev: print "before any tests (global) just once..." class MyTestCase(unittest.TestCase): class_setup_called = False def __init__(self, test_name): unittest.TestCase.__init__(self, test_name) if not self.__class__.class_setup_called: self.setUpClass() self.__class__.class_setup_called = True @staticmethod def setUpClass(): print "before first test only..." def setUp(self): print "before each test..." Unfortunately this will not work when using nosetests, but it does work when running from pydev. I'm guessing that nosetests is coded to instantiate test objects before each test method is run, in which case your init method would suffice. I can't say enough nice things about nosetests: support for exceptions and timed tests. support for annotation "attribution". integration with profile, coverage and xunit reporting of results. recursive discovery and attributed execution of test cases. examples: import unittest @raises(TypeError) def test_forexceptions(self): pass @attr('benchmark') @timed(5.0) def test_benchmark(self): pass # do something real slow and run nosetests --with-profile -a benchmark Additional On further investigation if you are using nosetests then it has you covered, see "http://somethingaboutorange.com/mrl/projects/nose/1.0.0/writing_tests.html". You can have: package level teardowns: (these live in package level init scripts) def setup_package() def teardown_package() module level teardowns: def setup_module() def teardown_module() class level: class MyTestCase(unittest.TestCase): @classmethod def setup_class(cls): pass @classmethod def teardown_class(cls): pass and test method level: class MyTestCase(unittest.TestCase): def setUp(self): pass def tearDown(cls): pass I like to use the the "setup_" names as it nicely delineates the nose specific entry points. I've verified these work nicely when run from nosetests via the command line. But they do NOT run from Pydev "run as unit test...". A potential solution may be writing a pydev plugin that uses nose to run the tests... perhaps someone has one? You could combine my hack with the nose ones calling common module functions to do the actual work. Ideally our init () would be aware of being launched from Pydev somehow.
