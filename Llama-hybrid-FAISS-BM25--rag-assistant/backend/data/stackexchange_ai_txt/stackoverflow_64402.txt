[site]: stackoverflow
[post_id]: 64402
[parent_id]: 64333
[tags]: 
I think the biggest problem for me is the HUGE loss of time it takes "getting in to it". I am still very much at the beginning of my journey with TDD (See my blog for updates my testing adventures if you are interested) and I have literally spent hours getting started. It takes a long time to get your brain into "testing mode" and writing "testable code" is a skill in itself. TBH, I respectfully disagree with Jason Cohen's comments on making private methods public, that's not what it is about. I have made no more public methods in my new way of working than before . It does, however involve architectural changes and allowing for you to "hot plug" modules of code to make everything else easier to test. You should not be making the internals of your code more accessible to do this. Otherwise we are back to square one with everything being public, where is the encapsulation in that? So, (IMO) in a nutshell: The amount of time taken to think (i.e. actually grok'ing testing ). The new knowledge required of knowing how to write testable code. Understanding the architectural changes required to make code testable. Increasing your skill of "TDD-Coder" while trying to improve all the other skills required for our glorious programming craft :) Organising your code base to include test code without screwing your production code. PS: If you would like links to positives, I have asked and answered several questions on it, check out my profile .
