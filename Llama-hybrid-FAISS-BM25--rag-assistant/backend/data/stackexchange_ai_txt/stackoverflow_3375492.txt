[site]: stackoverflow
[post_id]: 3375492
[parent_id]: 3371268
[tags]: 
What programming languages are testable by design? I'm having a hard time with this question, because I'm not sure what it means for a language to be testable by design. Testing is usually about tools and static analysis, not about language design. But to the extent that a language can be testable, I'm going to assume that this means the language includes some sort of independent specification that can be tested against the code, and moreover that these specifications have been designed with testing in mind, or at least not only for theorem proving. By these criteria, I know of three: Eiffel , where the "design by contract" encourages you to put preconditions and postconditions in your code, and they are tested. I consider Eiffel a successfully deployed language. Racket (formerly PLT Scheme), where some interesting research is going on in contracts and testing; the interesting bits are that when a test fails, the language tells you not only that a contract was violated, but it identifies what part of the code should be blamed. For more information, google for Robby Findler and for "blame". Racket is a research language, but it is an extension of Scheme, which is pretty widely used for a niche language. Ana , an extension of Ada done by David Luckham and his students, which supported some testing. As far as I know, Ana never made it beyond the research stage. In addition to these languages there are myriad languages that have had assertions for purposes of theorem proving. Many of these languages had assertions that were not testable in any efficient way (universal and existential quantifiers will do that to you).
