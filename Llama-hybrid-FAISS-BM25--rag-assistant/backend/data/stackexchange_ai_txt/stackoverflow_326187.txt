[site]: stackoverflow
[post_id]: 326187
[parent_id]: 326141
[tags]: 
Conceptually, I think you're very much on the right track. It's much easier to conceive of a page model in terms of some very simple containers (header, footer, content). You can take it a step further by defining blocks of display logic (top navbar, footer links, left ad bar, etc.) that you can use to populate the larger containers. Pragmatically, how would you do this? First, it depends on what platform and language you're using. Solutions for .NET, Java, PHP, or flat HTML could be implemented differently depending on where you choose to draw the lines. In flat HTML, one way is to use #include files. In the programming languages, you have to decide what your outermost container structure is going to be and how you're going to define the building blocks (which by default defines how you aggregate them). There are many possible ways to do this. And are you going to be the person creating & managing the site, or will you be delegating that responsibility to a team of non-technical content owners across your organization? That answer can bear heavily on your design choices. In many of the content management systems, the idea is to cleanly separate content from presentation. So there is a generic content storage paradigm typically in a database and then there is a dynamic way to present that content out through some display mechanism written in a lightweight platform.
