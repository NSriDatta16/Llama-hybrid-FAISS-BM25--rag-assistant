[site]: stackoverflow
[post_id]: 1701130
[parent_id]: 1671951
[tags]: 
Should every model correspond to a table? It doesn't have to but it often will depending on the complexity of your business logic. Since you're refactoring an existing application, think about how the model is used by the other layers. In MVC, the model is at the bottom of the dependency stack. How will the view access the model? How will the controller modify it? How will the model be populated? Should every view correspond to an html page? Again, it doesn't have to but it often will. What about the controller? How can I break this thousand line monster into more organized code. A common strategy is using the front controller pattern. The front controller deals with HTTP requests, application initialisation and site-wide logic (just as your thousand line monster is currently doing) - but then it delegates to more specialised controllers. These specialised controllers could be grouped by the models it uses, site page structure, or anything else that seems logical. They then interact with the model and select a view to display. Finally, +1 to frameworks as Leonid suggested. Even if you don't end up using one, there are some great implementations of controller patterns out there. Hope that helps.
