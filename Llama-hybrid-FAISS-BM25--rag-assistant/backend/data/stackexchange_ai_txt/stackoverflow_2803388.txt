[site]: stackoverflow
[post_id]: 2803388
[parent_id]: 2803231
[tags]: 
Here's an example of how you would do this with a top-level UITableView of orgs and a detailed table view of brands. At the top level, you do a fetch request for the orgs and display them. When a particular one is selected, you create the detail view of brands. The BrandsViewController object has a "org" property that tells is what to display; it can then refer to "org.brands" (which is the Core Data one-to-many relationship) to locate all the brands for that display. Note that you don't need to do an explicit Core Data fetch within the BrandsViewController to get the brands. - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath { BrandsViewController *targetViewController = [[BrandsViewController alloc] initWithNibName:@"BrandsView" bundle:nil]; // pass managedObjectContext along to new view controller targetViewController.managedObjectContext = self.managedObjectContext; // Pass the selected org to the new view controller targetViewController.org = (Organisation *)[fetchedResultsController objectAtIndexPath:indexPath]; [[self navigationController] pushViewController:targetViewController animated:YES]; [targetViewController release]; }
