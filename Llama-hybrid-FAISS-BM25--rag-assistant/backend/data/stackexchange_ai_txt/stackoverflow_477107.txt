[site]: stackoverflow
[post_id]: 477107
[parent_id]: 477096
[tags]: 
This does have a few disadvantages. Testing On the off chance you want to test your module through runtime modification, it may make it more difficult. Instead of doing import mymodule mymodule.othermodule = module_stub You'll have to do import othermodule othermodule.foo = foo_stub This means that you'll have to patch the othermodule globally, as opposed to just change what the reference in mymodule points to. Dependency Tracking This makes it non-obvious what modules your module depends on. This is especially irritating if you use many third party libraries or are re-organizing code. I had to maintain some legacy code that used imports inline all over the place, it made the code extremely difficult to refactor or repackage. Notes On Performance Because of the way python caches modules, there isn't a performance hit. In fact, since the module is in the local namespace, there is a slight performance benefit to importing modules in a function. Top Import import random def f(): L = [] for i in xrange(1000): L.append(random.random()) for i in xrange(10000): f() $ time python test.py real 0m1.569s user 0m1.560s sys 0m0.010s Import in Function Body def f(): import random L = [] for i in xrange(1000): L.append(random.random()) for i in xrange(10000): f() $ time python test2.py real 0m1.385s user 0m1.380s sys 0m0.000s
