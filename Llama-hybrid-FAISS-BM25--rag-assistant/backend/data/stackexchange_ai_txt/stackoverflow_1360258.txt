[site]: stackoverflow
[post_id]: 1360258
[parent_id]: 217437
[tags]: 
I find the DecimalFormat class (and Grails's formatNumber tag by extension) a bit opaque for certain use cases, and I still haven't found a reasonable way to do some pretty basic formatting with it without some ugly pre-processing to generate an appropriate format string. I threw together a simple number formatting tag several months ago which essentially constructs a format string and does some minimal processing to the number itself. It's not as generic or elegant as I'd like (it's all we needed at the time - it's super basic, but it still keeps some ugly processing out of GSPs), but it should be easy to read, and it's obvious where it could be trivially improved (i.e. making the scaling iterative instead of naive if-elseif slop, allowing the user to pass in custom scaling markers, allowing for a custom number validator as a parameter, etc.). // Formats a number to 3 significant digits, appending appropriate scale marker // (k, m, b, t, etc.). Defining var allows you to use a string representation // of the formatted number anywhere you need it within the tag body, and // provides the scale as well (in case highlighting or other special formatting // based upon scale is desired). def formatNumberScaled = {attrs, body -> // number, prefix, suffix, invalid, var Double number String numberString String scale try { number = attrs.'number'.toDouble() } catch (Exception e) { number = Double.NaN } if (number.isNaN() || number.isInfinite()) { numberString = scale = attrs.'invalid' ?: "N/A" } else { Boolean negative = number
