[site]: stackoverflow
[post_id]: 1360132
[parent_id]: 916902
[tags]: 
From the named systems the most suitable is MoglieFS. But perhaps you can get by w/out any special system at all. Say you have 4 AdobeFMS servers: {video0.exmple.com,video1.exmple.com,video2.exmple.com,video3.exmple.com}. You can distribute all your videos among those 4 servers using simple scheme, like /* * pseudo code */ $server_id = get_server_id(filename); ... ... int function get_server_id(filename) { return hash(filename) mod 4; } after you encode videos, your app would $server_id = get_server_id(file_name) copy file_name to /mnt/$server_id/ clients will access videos using something like http://videoN.example.com/filename.mp4 , where N is calculated from filename using get_server_id() . Luster/Gluster is really not what you should be looking for. Luster FS is more mature, but developers ask you to treat files on such FS as "cache", i.e. they can be lost at any time. Luster/Gluster are targeted for use in HPC to allow fast access for huge amounts of data w/out single storage server being performance bottle-neck. Another point for those systems is that they are POSIX-complaint. In HPC/Scientific research environment you usually do not have a time to waist for rewriting your apps because you installed new cool and fast FS.
