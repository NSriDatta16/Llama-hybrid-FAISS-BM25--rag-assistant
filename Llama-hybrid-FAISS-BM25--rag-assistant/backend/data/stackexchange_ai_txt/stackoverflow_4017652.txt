[site]: stackoverflow
[post_id]: 4017652
[parent_id]: 4017618
[tags]: 
The advantage of having multiple web services would be that each can have their own application pool (i.e. worker process) in IIS . So you can recycle one application pool for one web service without affecting the others. The advantage of having a single web service would be potentially easier maintenance, since the code is in one file, etc. Of course, if it's a lot of code, this can make maintenance harder too. So the question is, what's the right level of granularity? You can split the web services up per business function, and I've found that this is a good approach. For example, if you have some business methods that deal with invoicing, you could put those into an Invoicing web service. If you have other business methods that deal with shipping orders, you could put those into a Shipping web service. This creates a nice split, in my opinion, and also lets you leverage the application pool advantages discussed earlier. Example You can see a real world example of this type of split with FedEx . Note how they split their web services up by shipping, tracking and visibility, etc.
