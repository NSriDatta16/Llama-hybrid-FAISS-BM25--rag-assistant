[site]: stackoverflow
[post_id]: 4063011
[parent_id]: 4062845
[tags]: 
You're working on a hard and interesting problem! You may get some interesting ideas from looking at the Dublin Core Metadata Initiative. http://dublincore.org/metadata-basics/ To make it simple, think of your metadata items as all fitting in one table. e.g. Ballmer employed-by Microsoft Ballmer is-a Person Microsoft is-a Organization Microsoft run-by Ballmer SoftImage acquired-by Microsoft SoftImage is-a Organization Joel Spolsky is-a Person Joel Spolsky formerly-employed-by Microsoft Spolsky, Joel dreamed-up StackOverflow StackOverflow is-a Website Socrates is-a Person Socrates died-on (some date) The trick here is that some, but not all, your first and third column values need to be BOTH arbitrary text AND serve as indexes into the first and third columns. Then, if you're trying to figure out what your data base has on Spolsky, you can full-text search your first and third columns for his name. You'll get out a bunch of triplets. The values you find will tell you a lot. If you want to know more, you can search again. To pull this off you'll probably need to have five columns, as follows: Full text subject (whatever your user puts in) Canonical subject (what your user puts in, massaged into a standard form) Relation (is-a etc) Full text object Canonical object The point of the canonical forms of your subject and object is to allow queries like this to work, even if your user puts in "Joel Spolsky" and "Spolsky, Joel" in two different places even if they mean the same person. SELECT * FROM relationships a JOIN relationships b (ON a.canonical_object = b.canonical_subject) WHERE MATCH (subject,object) AGAINST ('Spolsky')
