[site]: stackoverflow
[post_id]: 1943871
[parent_id]: 1943847
[tags]: 
C++ standard: 7.1.1/6: "A name declared in a namespace scope without a storage-class-specifier has external linkage unless it has internal linkage because of a previous declaration" [or unless it's const]. In your first case, name is declared in a namespace scope (specifically, the global namespace). The first declaration therefore alters the linkage of the second declaration. The inverse is banned because: 7.1.1/7: "The linkages implied by successive declarations for a given entity shall agree". So, in your second example, the first declaration has external linkage (by 7.1.1/6), and the second has internal linkage (explicitly), and these do not agree. You also ask about C, and I imagine it's the same sort of thing. But I have the C++ book right here, whereas you're as capable of looking in a draft C standard online as I am ;-)
