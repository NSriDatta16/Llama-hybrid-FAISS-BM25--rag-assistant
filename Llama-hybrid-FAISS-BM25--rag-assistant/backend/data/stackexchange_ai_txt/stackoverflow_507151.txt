[site]: stackoverflow
[post_id]: 507151
[parent_id]: 506605
[tags]: 
I'm sure you will go with an OO package, but don't expect miracles. Here's why. I assume you start out with some application data, a set of application objects, let's call them objects A. You could use a package of OO graphical objects to represent the graphical view of objects A, call this new set of objects G. Now you have two sets of objects, A and G, either one of which could change dynamically, and you are faced with the problem of keeping them in correct correspondence. Not only do you have to generate G from A, you have to modify G when A changes, and modify A when G changes. This calls for lots of event-driven linkage code, and you can never be sure you've handled every case correctly. You can easily get into situations where what you see is not what you get. (WYSINWYG) I have two suggestions: What you're doing Have a "paint" routine that directly renders objects A (using "blt" if you want to avoid flashing). Attach simple graphical information to objects A, like screen position and size. Handle mouse events yourself, for highlighting, dragging, creating wires, etc. This may seem like a lot of trouble, but it avoids all the linkage trouble you get into with redundant sets of objects. And, you have complete control of the code. An oddball method that I use: Differential Execution This is a general technique for managing redundant sets of objects. However, it has a tough learning curve. Most programmers are not up to it, but it does reduce code and guarantee correctness.
