[site]: stackoverflow
[post_id]: 5180863
[parent_id]: 
[tags]: 
Subclass ObservableCollection behaves strange (design view works, emulator not)

I have a strange problem with ObservableCollection in WP7 . I am trying to implement a serializeable collection. I found a good post here: http://kentb.blogspot.com/2007/11/serializing-observablecollection.html The problem is: It does not work on WP7. If it simply would not work, I was going to look for other ways. But its strange, it works "nearly". In the emulator I get: Notify about my CurrentItem implementation An updated count of the number of items NO update notifications for the bound ListBox [DEPRECATED, I used wrong class in DesignerContent, stupid mistake] In the designer view I get: Notify about my CurrentItem implementation An EMPTY count without any changes later WORKING update notifications for the bound ListBox The easiest way to test this is to download my test project here: http://www.filesavr.com/77B1RN0113044J4 The class you have to look at is ObsColl in SimpleTest and the design view of SerializerTestPage in AppA. Its really strange, it maybe a Silverlight thing, or a WP7 problem. Anyone know how to solve this, or has a link to an example for an serializable ObservableCollection for WP7? Thanks, Chris PS: Crosspost here, I will update both posts in case of answers: http://forums.create.msdn.com/forums/p/76981/467546.aspx [EDIT] I found a workaround for now, using a wrapper class. It might not be pretty, but it works ok. The wrapper (code below) can be serialized in a normal way (by marking as DataMember) and the ListBox can bind to the DataStorage, and behaves the normal way then. Currently I only implemented Add() because its only for testing. I should perhaps change the DataStorage to a readonly collection for "external use", otherwise you could make the mistake of trying to add to the DataStorage directly. Might be all a little confusing, I will try to get the examples a little bit nicer and update this post as soon as I got some time [/EDIT] public class ObsCollStorable : INotifyPropertyChanged where T : class { public ObservableCollection Storage { get; private set; } private List _objects; [DataMember] public List Objects { get { return _objects; } set { _objects = value; Storage = new ObservableCollection (); foreach (var s in _objects) Storage.Add(s); } } [DataMember] public int CurrentIndex { get; set; } public T CurrentString { get { if (Storage == null) return null; if (Storage.Count (); Storage = new ObservableCollection (); } public void Add(T t) { Objects.Add(t); Storage.Add(Objects.Last()); CurrentIndex = Objects.Count - 1; if (PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs("")); } public event PropertyChangedEventHandler PropertyChanged; }
