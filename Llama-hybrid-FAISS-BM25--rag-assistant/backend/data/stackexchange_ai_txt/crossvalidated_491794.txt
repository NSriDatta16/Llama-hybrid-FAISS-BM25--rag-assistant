[site]: crossvalidated
[post_id]: 491794
[parent_id]: 
[tags]: 
Why do these time series appear to be dependent?

Suppose that I simulate four different Ornstein-Uhlenbeck processes $X^1, \ldots, X^4$ using this example code (Euler-Maruyama). Using this code, it should be possible to ensure that the $X^1, \ldots, X^4$ are all stationary , by sampling their initial value from their respective stationary distributions; mutually statistically independent , by using different random seeds for their respective implementations. However, when testing the $X^i$ for independence by using independence tests such as dHSIC (which should be applicable as the $X^i$ are stationary), the null hypothesis of mutual independence is typically rejected with extremely low $p$ -value. Do you have an idea where my mistake is (and how to correct it)? Edit: Stationarity and independence of the $X^i$ are 'ensured' (I would think) as follows: For the stationarity of the $X^i$ , we choose the initial condition according to the stationary distribution of the Ornstein-Uhlenbeck process, i.e. if $X^i$ has the coefficients $(\theta_i, \mu_i, \sigma_i)$ then we set $X^i(0)\sim\mathcal{N}(\mu_i, \sigma_i^2/(2\theta_i))$ for each $i=1, \ldots, 4$ . In the given code, this corresponds to setting y_init = np.random.normal(loc=mu_i, scale=sigma_i**2/(2theta_i)) . The independence of $X^1, \ldots, X^4$ should be automatic as each $X^i$ is generated with a different random seed. The hypothesis test for mutual independence of the $X^i$ is conducted by applying the function $\texttt{dhsic.test()}$ from the $\texttt{R}$ -package $\texttt{dHSIC}$ to the data matrices $\mathfrak{R}_1, \ldots, \mathfrak{R}_4$ defined as R_i = Xi.reshape(n,b) , i.e. for each $i=1, \ldots, 4$ , the realisations Xi of the time series $X^i$ are 'chopped' into n -many rows which are treated as realisations of the random vector $R_i:=(X^i(1), \ldots, X^i(b))$ (with b some fixed length). The independence of the $X^i$ is then tested for by testing the independence of the random vectors $R_1, \ldots, R_4$ via dhsic.test(list(R_1, R_2, R_3, R_4), method="permutation", kernel=c("gaussian"), B=1000) .
