[site]: stackoverflow
[post_id]: 2554
[parent_id]: 2027
[tags]: 
Here is another article for the c# programming language c# passes its arguments by value (by default) private void swap(string a, string b) { string tmp = a; a = b; b = tmp; } calling this version of swap will thus have no result: string x = "foo"; string y = "bar"; swap(x, y); "output: x: foo y: bar" however, unlike java c# does give the developer the opportunity to pass parameters by reference , this is done by using the 'ref' keyword before the type of the parameter: private void swap(ref string a, ref string b) { string tmp = a; a = b; b = tmp; } this swap will change the value of the referenced parameter: string x = "foo"; string y = "bar"; swap(x, y); "output: x: bar y: foo" c# also has a out keyword , and the difference between ref and out is a subtle one. from msdn: The caller of a method which takes an out parameter is not required to assign to the variable passed as the out parameter prior to the call; however, the callee is required to assign to the out parameter before returning. and In contrast ref parameters are considered initially assigned by the callee. As such, the callee is not required to assign to the ref parameter before use. Ref parameters are passed both into and out of a method. a small pitfall is, like in java, that objects passed by value can still be changed using their inner methods conclusion: c# passes its parameters, by default, by value but when needed parameters can also be passed by reference using the ref keyword inner methods from a parameter passed by value will alter the object (if that method itself alters some values) useful links: http://msdn.microsoft.com/en-us/vcsharp/aa336814.aspx http://www.c-sharpcorner.com/UploadFile/saragana/Willswapwork11162005012542AM/Willswapwork.aspx http://en.csharp-online.net/Value_vs_Reference
