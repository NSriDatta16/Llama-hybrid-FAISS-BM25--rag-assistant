[site]: stackoverflow
[post_id]: 816637
[parent_id]: 690033
[tags]: 
We have a similar problem as we have 109 separate projects to deal with. To answer the original questions based on our experiences: 1. How do you best handle references between projects We use the 'add reference' context menu option. If 'project' is selected, then the dependency is added to our single, global solution file by default. 2. Should "copy local" be on or off? Off in our experience. The extra copying just adds to the build times. 3. Should every project build to its own folder, or should they all build to the same output folder(they are all part of the same application) All of our output is put in a single folder called 'bin'. The idea being that this folder is the same as when the software is deployed. This helps prevents issues that occur when the developer setup is different from the deployment setup. 4. Are solutions folders a good way of organizing stuff? No in our experience. One person's folder structure is another's nightmare. Deeply nested folders just increase the time it takes to find anything. We have a completely flat structure but name our project files, assemblies and namespaces the same. Our way of structuring projects relies on a single solution file. Building this takes a long time, even if the projects themselves have not changed. To help with this, we usually create another 'current working set' solution file. Any projects that we are working on get added in to this. Build times are vastly improved, although one problem we have seen is that Intellisense fails for types defined in projects that are not in the current set. A partial example of our solution layout: \bin OurStuff.SLN OurStuff.App.Administrator OurStuff.App.Common OurStuff.App.Installer.Database OurStuff.App.MediaPlayer OurStuff.App.Operator OurStuff.App.Service.Gateway OurStuff.App.Service.CollectionStation OurStuff.App.ServiceLocalLauncher OurStuff.App.StackTester OurStuff.Auditing OurStuff.Data OurStuff.Database OurStuff.Database.Constants OurStuff.Database.ObjectModel OurStuff.Device OurStuff.Device.Messaging OurStuff.Diagnostics ... [etc]
