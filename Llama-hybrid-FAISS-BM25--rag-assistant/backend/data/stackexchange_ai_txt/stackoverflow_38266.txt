[site]: stackoverflow
[post_id]: 38266
[parent_id]: 38239
[tags]: 
Nuclear/particle physics here. Major programing work used to be done mostly in Fortran using CERNLIB (PAW, MINUIT, ...) and GEANT3 , recently it has mostly been done in C++ with ROOT and Geant4 . There are a number of other libraries and tools in specialized use, and LabVIEW sees some use here and there. Data acquisition in my end of this business has often meant fairly low level work. Often in C, sometimes even in assembly, but this is dying out as the hardware gets more capable. On the other hand, many of the boards are now built with FPGA s which need gate twiddling... One-offs, graphical interfaces, etc. use almost anything ( Tcl/Tk used to be big, and I've been seeing more Perl/Tk and Python/Tk lately) including a number of packages that exist mostly inside the particle physics community. Many people writing code have little or no formal training, and process is transmitted very unevenly by oral tradition, but most of the software group leaders take process seriously and read as much as necessary to make up their deficiencies in this area. Version control for the main tools is ubiquitous. But many individual programmers neglect it for their smaller tasks. Formal bug tracking tools are less common, as are nightly builds, unit testing, and regression tests. To improve things: Get on the good side of the local software leaders Implement the process you want to use in your own area, and encourage those you let in to use it too. Wait. Physicists are empirical people. If it helps, they will (eventually!) notice. One more suggestion for improving things. Put a little time in to helping anyone you work directly with. Review their code. Tell them about algorithmic complexity/code generation/DRY or whatever basic thing they never learned because some professor threw a Fortran book at them once and said "make it work". Indoctrinate them on process issues. They are smart people, and they will learn if you give them a chance.
