[site]: stackoverflow
[post_id]: 2611632
[parent_id]: 2608594
[tags]: 
If you are not using Visual Studio 2010 for your application then I would suggest that you pick one of the following: Use msdeploy.exe Install Visual Studio 2010 on your build server and us the MSDeploy tasks themselves Let me explain it a bit more. Option 1 MSDeploy itself has no dependency on MSBuild so you could install it by itself on your build server to create the packages for you. You can download it from here . After that you can create an MSBuild deployment script using the Exec task to call msdeploy.exe with the command to create your package. About the second option The .targets files as well as the tasks for MSDeploy are not deployed with the .NET framework, but with Visual Studio 2010 itself. So if you wanted to leverage any of those you would have to install VS 2010 on your build server. You mentioned using the Package target in your post. You won't be able to use that because that target is a part of a bigger build process for .NET 4 projects. What you could do is to create a separate MSBuild file ( separate as in not your project file ) which uses MSBuild 4 to call the tasks that are delivered with VS 2010 for Web Deployment. Here I answer your numbered list specifically You would have to install Visual Studio 2010 since those tasks are shipped with VS itself and not the framework. These files are used to interact with your package. Your package presents your application as a whole. The deploy.cmd will invoke msdeploy.exe to perform the deployment for you. SourceManifest.xml and SetParameters.xml are used to customize the deployment of your app. deploy.cmd will use those files when invoking msdeploy.exe. In other words if you want to customize the path to where the web application would be installed you would set that in SetParameters.xml along with other options. Your right the settings can come from IIS, but many developers prefer to use the VS application server instead of IIS. That is my preference. What I would suggest in this case is to deploy your application to an environment which you will use as a template. Make all the IIS settings that you need, create your MSDeploy package and then grab the archive.xml file from the package and use that when you create your own package. Another option is to setup an IIS server which your build process could deploy to, then use MSDeploy to just sync the files that makeup your app, and then once again to generate the package from that IIS server.
