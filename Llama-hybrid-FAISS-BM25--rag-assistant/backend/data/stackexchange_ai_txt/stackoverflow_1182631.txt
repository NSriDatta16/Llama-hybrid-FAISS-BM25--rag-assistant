[site]: stackoverflow
[post_id]: 1182631
[parent_id]: 1182590
[tags]: 
Event handlers are called in the order they're added. So if you can guarantee that the parent handler is added first, you're fine. (I suspect you already know this.) You might save yourself some headaches by handling Button Command events in your base class, and then delegating them to your derived classes with a new ButtonCommand event implemented therein. The only real change from your existing derived code would be closer attention to the 'sender' parameter to the derived event handler. For example: class BaseClass { public event CommandEventHandler ButtonCommand = delegate { }; protected override void OnInit(EventArgs e) { foreach (Control possibleButton in Controls) { if (possibleButton is Button) { Button button = (Button) possibleButton; button.Command += AnyButtonCommandHandler; } } base.OnInit(e); } void AnyButtonCommandHandler(object sender, CommandEventArgs e) { // validation logic. if fails, return. ButtonCommand(sender, e); } } class DerivedClass : BaseClass { public DerivedClass() { base.ButtonCommand += base_ButtonCommand; } void base_ButtonCommand(object sender, CommandEventArgs e) { if (sender == button1) { ... } else if (sender == button2) { ... } // etc. } } You could also consider replacing the ButtonCommand event with protected void OnButtonCommand(object sender, CommandEventArgs e) (or do both); then you can simply override OnButtonCommand in your derived class.
