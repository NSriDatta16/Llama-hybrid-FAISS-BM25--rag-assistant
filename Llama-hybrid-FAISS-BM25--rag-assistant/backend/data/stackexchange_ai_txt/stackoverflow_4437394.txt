[site]: stackoverflow
[post_id]: 4437394
[parent_id]: 
[tags]: 
__package__ is None when importing a Python module

I want to import the modules dynamically, by the following way: I create a folder named pkg with this structure: pkg |__init__.py |foo.py In the head of __init__.py , add this code fragement: pkgpath = os.path.dirname(pkg.__file__); for module in pkgutil.iter_modules([pkgpath]): __import__(module[1], locals(), globals()); m = sys.modules[module[1]]; print m.__package__; I found m.__package__ is None in case there is no import statements in foo.py but if I add a simple import statement like this: import os then m.__package__ is "pkg" which is correct package name. why this happens? How to import a module and ensure its correct package attribute?
