[site]: stackoverflow
[post_id]: 383950
[parent_id]: 383876
[tags]: 
In general it always takes less time to do anything using Microsoft technologies, whether it's web applications, desktop applications or lately Silverlight applications. There are a few reasons: Microsoft provides wizards for everything. Microsoft raises the level of abstractions high, up to the point sometimes it is perceived that it "dumps down" the developers, although this is debatable. More on this in #5. Abundance of third party widgets, controls, etc. Tight integration with IDE such as Intellisense, Source Control, IE, Excel, SQL servers, etc is out of the box. Along the same line with #2, MS provides Drag-and-drop, point-and-click in its IDE. Microsoft also loves the concept of data binding, so as a result, you can end up with a table or grid of data with potentially very few lines of coding. Debugging is seamless, out of the box most of the time. I would say that if your application is somewhat simpler, then you can get done quicker using a Microsoft framework. In an Intranet environment, where you can control the browser (in case of web applications) the users must be using, or which framework to install (.NET framework and/or Silverlight plug-in), and development time is critical, then doing the Microsoft way might be the way to go. There are drawbacks (I have to say the followings with the exception of StackOverflow and a few sites that are built using ASP.NET which are really well done): Your applications tend to be bloated. A simple desktop application still requires a full installation of a .NET framework. Sometimes to do an easy thing can make you end up doing all kind of convoluted things, as Microsoft APIs are not always the cleanest. For web application using ASP.NET, you could end up with an applications that contain very ugly JavaScript codes. Although not directly related to this point, there was an instance that was discussed on Ajaxian.com a while back where someone discover some really ugly JavaScript code right inside SharePoint. In term of culture, most ASP.NET developers don't care, don't need to, or simply don't know JavaScript. That's because the framework encourages so (although this could changed in the future with jQuery integration). Your web application tend not to run on anything other than IEs, and this might be acceptable in your situation. If it does, that might be by accident and not by design. Microsoft replaces its own technologies every few years and offer very little backward compatibility. They force developers to re-learn in every few years or so and could be confusing in any given transition period where we try to sort things out. As an example. this is currently happening with ASP MVC and Silverlight. But this might be a good thing instead of a drawback.
