[site]: stackoverflow
[post_id]: 2278136
[parent_id]: 2275244
[tags]: 
If you must store SSNs and you want them to be encrypted I recommend using a symmetric key encryption mechanism like 3DES or AES. Have the encryption key be a derivation of some pass phrase that only those authorized to access the data know and that they must input each time they access the data. Ex: (10+ Character Pass Phrase) -> SHA-1 => KEY. Don't bother relying on the database itself to do the encryption (although certainly look into features like TDE or whatever host OS you run support for full-disk or file encryption as a secondary over-all security mechanism), rather use the built in crypto libraries of .NET and whatever programming language you are using to read and write to the DB. This gives you the advantage that you don't have to store a public and private key or generate those keys (which is computationally expensive) and they are relatively large so storage is more expensive (relatively), you also don't have to worry about the key being compromised when an unauthorized user gains access to the machine running your code (excluding MITM attacks occurring when a user is entering the pass phrase). Secondly, it ensures that when accessed the only way they can be decrypted is by a user who is authorized (knows the password). Depending on your budget (time, effort, resources) you can add multi-factor authentication where the encryption key is derived from both a pass phrase but also some token that authorized users would have like a smart card. Thirdly, encrypting and decrypting the data using a symmetric key encryption algorithm will be much much faster.
