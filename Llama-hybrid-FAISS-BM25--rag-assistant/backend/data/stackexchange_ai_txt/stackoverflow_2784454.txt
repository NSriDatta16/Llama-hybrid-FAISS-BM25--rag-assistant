[site]: stackoverflow
[post_id]: 2784454
[parent_id]: 2784267
[tags]: 
Here is an excerpt from the full source of String class from JDK 6.0: public final class String implements java.io.Serializable, Comparable , CharSequence { /** The value is used for character storage. */ private final char value[]; /** The offset is the first index of the storage that is used. */ private final int offset; /** The count is the number of characters in the String. */ private final int count; As you can see internally the value is already stored as an array of chars. An array of chars as a data structure has all the limitations of the String class for most string manipulations: Java arrays do not grow, i.e. every time (ok, may be not every single time) your string would need to grow you'd need to allocate a new array and copy the contents. As suggested earlier it makes sense to use StringBuilder or StringBuffer for most string manipulations. In fact the following code: String a = "a"; a=a+"b"; a=a+"c"; When compiled will be automatically converted to use StringBuilder, this can be easily checked with the help of javap . As a rule of thumb it's rarely advisable to spend time trying to improve performance of the core Java classes, unless you're a world class expert on the matter, simply because this code was written by the world class experts in the first place.
