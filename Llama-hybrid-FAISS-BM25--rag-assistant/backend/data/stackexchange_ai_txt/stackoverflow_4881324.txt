[site]: stackoverflow
[post_id]: 4881324
[parent_id]: 4880800
[tags]: 
The window proc doesn't have to be the same for all instances of a particular class name. Typically, you'd use the RegisterClass function to set the default window proc for windows of that class. When you create a new window that uses the class but you want it to override the default handling, you create the window and then call SetWindowLongPtr(hwnd, GWL_WNDPROC, newWndProc) , where newWndProc is a pointer to the new window's window proc. The new window's window proc can then handle the messages that it wants to override, and call DefWindowProc for the rest. To construct a window with a new class name, have the constructor copy the class info for the inherited class and create a new class that's identical to that one, except for the name. Then expose a method that will allow the client to change class-specific things. The API functions you're interested in would be GetClassInfoEx and SetClassLong , SetClassWord or SetClassLongPtr . Inheritance still makes sense in this world because the default processing is the same for every window of a particular class, and inherited classes inherit the default processing from their parents. You don't need anything like an abstract static method for this. All you need is the window handle. You can get the class name by calling GetClassName with the window handle, and then call GetClassInfoEx with the returned class name.
