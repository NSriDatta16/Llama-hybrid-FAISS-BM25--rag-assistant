[site]: datascience
[post_id]: 102138
[parent_id]: 
[tags]: 
Trouble with anomaly/novelty detection (on microscale) - need easy practical guide with Keras

I am relatively new to the field of machine learning. However, I already have solved simple image classification tasks with Keras (for example building CNNs and classifying MNIST...). The rough deep learning concepts (CNN, RNN, Autoencoder) are clear to me. Now, I am trying to solve a practical task with Keras: Recognizing little artifacts/defects/anomalies on images - for example see following images. My plan is to train an Autoencoder only with "good images" without any anomalies. After I feed the Autoencoder with "bad" images (with artefacts, defects) and compare the output of the Autoencoder with the input image, I hope to get a similarity score which tells me that this is an image with anomalies. I also have done some research: https://medium.com/analytics-vidhya/image-anomaly-detection-using-autoencoders-ae937c7fd2d1 https://www.mdpi.com/2076-3417/10/23/8660/pdf ... The first article feels a little bit rough. Comparing clothes with numbers is not the same as finding anomalies on a micro-scale. The second one is very complex without any code example. The image size is $512x256$ and the artifacts can be tiny. I have more than 50,000 "good" images. I played around with the architecture and the parameters. Firstly, I tried to build a CNN-Autoencoder with more features (middle of Autoencoder), but the problem here is that I always reproduce the anomalies as well. Secondly, I reduced the number of features (in middle of the Autoencoder), but then I only get a blurred output without any details of the image. So I feel I need a better starting point (practical guide) to build my autoencoder --> which detailed architecture, loss-function,...??? Maybe I am completely on the wrong track and an Autoencoder is not the right tool? Following a code example of my autoencoder: height_image = 256 width_image = 512 channels_image = 1 inputshape = (height_image, width_image, channels_image) POOL_SIZE = (2,2) FILTERS = 32 KERNEL_SIZE = (3,3) input_img = Input(shape=inputshape) x = Conv2D(FILTERS, KERNEL_SIZE, activation="relu", padding="same")(input_img) x = MaxPooling2D(POOL_SIZE, padding="same")(x) x = Conv2D(FILTERS*2, KERNEL_SIZE, activation="relu", padding="same")(x) x = MaxPooling2D(32, POOL_SIZE, padding="same")(x) x = Conv2D(FILTERS*4, KERNEL_SIZE, activation="relu", padding="same", activity_regularizer=regularizers.l1(10e-5))(x) x = MaxPooling2D(POOL_SIZE, padding="same")(x) x = Conv2D(FILTERS*4, KERNEL_SIZE, activation="relu", padding="same")(x) x = UpSampling2D(POOL_SIZE)(x) x = Conv2D(FILTERS*2, KERNEL_SIZE, activation="relu", padding="same")(x) x = UpSampling2D(POOL_SIZE)(x) x = Conv2D(FILTERS, KERNEL_SIZE, activation="relu", padding="same")(x) x = UpSampling2D(POOL_SIZE)(x) decoded = Conv2D(1, KERNEL_SIZE, activation="sigmoid", padding="same")(x) autoencoder = Model(input_img, decoded) autoencoder.compile(optimizer="adam", loss= 'binary_crossentropy') Thanks.
