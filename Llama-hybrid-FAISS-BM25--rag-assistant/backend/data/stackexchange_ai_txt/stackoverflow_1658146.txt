[site]: stackoverflow
[post_id]: 1658146
[parent_id]: 229472
[tags]: 
Test-Driven-Development - if by this you mean writing tests before code, not always Domain-Driven-Design - not pure DDD Model-Driven-Design/Architecture - never, but really NEVER, again Do you test? - yes, always Unit Testing - yes, always Integration Testing - it depends but we try to avoid them as they are typically slow Acceptance Testing - yes, ideally automated Code Reviews - yes, this is included in the definition of done Innovative Technologies (Spring, Hibernate, Wicket, JSF, WS, REST, ...) - not sure the mentioned technologies are innovative but yes to Spring, Hibernate, WS Agile - yes, this is in my DNA Pair Programming - not always but yes (on new subjects, with new team members, if explicitly asked) UML - a little (i.e. a class or a sequence diagram on a whiteboard from time to time), only if helpful Domain-specific languages - no real usage until now Requirement Specification (How?) - lightweight specifications (e.g. user stories) Continous Integration - of course (and according to our definition of done, the code must have been "integrated") Code-Coverage Tools - yes (cobertura), this is in the definition of done Aenemic Domain Model - no, we try to avoid that Communication (Wiki, Mail, IM, Mailinglists, other documents) - face to face, wiki, IM, mail, mailing list (but we try to avoid word documents) Effort estimates - yes, in story points at the backlog level, in hours at the iteration level Team size - 7+/-2 Meetings - yes, but only useful one and always time boxed (iteration planning, daily meeting, demo and retrospective) Code metrics - yes (cyclomatic complexity, code coverage, coding standards collected in sonar) Static code analysis - yes (findbugs, checkstyle) Bug tracking - yes, of course (but we try to fix bugs as soon as we discover them)
