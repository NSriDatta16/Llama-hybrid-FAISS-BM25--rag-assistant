[site]: stackoverflow
[post_id]: 276641
[parent_id]: 276620
[tags]: 
My OOP epiphany came from Grady Booch's book, way long time ago. Suddenly I realized why objects were good. While polymorphism is cool, encapsulation is 75% of why objects are cool. It is sort of like an interface: you see the buttons but not the wiring. Before objects, only the most disciplined coders kept their grubby fingers off the internal bits of other people's procedures (it was called "structured programming"). Object make it easy to Do the Right Thing. Inheritance and polymorphism are little bonuses. One way to learn about objects is to read other peoples' code. I learned a lot by reading the source code for the Delphi VCL framework. Even just looking at the documentation for Java will help you see what a single object class should do and how it is designed to be used by other objects. Start a project of your own and pay attention when you want to sub-class your own classes and find that you have to go back and break up some protected methods so you can override just one piece of a process instead of replacing all of it. See how ancestors talk to descendants by calling abstract functions. In other words, go make a lot of mistakes and learn from them. Enjoy!
