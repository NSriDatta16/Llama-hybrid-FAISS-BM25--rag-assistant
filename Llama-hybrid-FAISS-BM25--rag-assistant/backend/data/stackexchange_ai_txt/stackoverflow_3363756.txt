[site]: stackoverflow
[post_id]: 3363756
[parent_id]: 3361825
[tags]: 
Best practices in scheduling PHP scripts? 1) don't. It's a slippery slope - you end up spending far too much time trying to organise the scripts into available time slots, you end up with a system which changes state depending on which jobs have been run and haven't. Really you want all processing triggered directly in response to user requests. (that doesn't mean that they have to work synchronously and in the same execution thread as the user request though). 2) don't do it on MSWindows - Microsoft operating systems are OK for providing GUIs but do not have the range of tools available for job management and automation available on other Operating Systems I've seen a lot of cases where people shove stuff into scheduled batches simply because the performance of their code sucks. In a lot of cases a better solution would be to fix the performance problem. Having said that, since you're already in a hole, yes, you could duplicate all your code into command line and web versions - or you could download wget or cURL and schedule these programs to invoke your URLs passing the required values via GET or POST
