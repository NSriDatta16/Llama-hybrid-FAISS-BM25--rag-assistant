[site]: stackoverflow
[post_id]: 4564495
[parent_id]: 
[tags]: 
Filling a hierarchical class structure with data

I have a hierarchical class structure like this: Category -> Template -> Instance A category contains multiple templates, a template contains multiple instances. If I query the data from the database via a join over all 3 tables, the data looks something like this: CategoryID | CategoryName | CategoryType | TemplateID | TemplateName | TemplateXYZ | InstanceID | InstanceName 1 | "CatA" | "TypeX" | 1 | "TempA" | "X" | 1 | "InstA" 1 | "CatA" | "TypeX" | 1 | "TempA" | "X" | 2 | "InstB" 1 | "CatA" | "TypeX" | 1 | "TempA" | "X" | 3 | "InstC" 1 | "CatA" | "TypeX" | 1 | "TempB" | "Y" | 4 | "InstD" (just an example, the real data tables have a lot more columns) What is the best/common way in C# to fill the classes with this kind of data when cycling through it with a data reader? From the top of my head I would do it this way: while(data.Read()) { // Create new objects each time the ID changes and read the data from the first row if(data["CategoryID"] != lastCategoryID) { lastCategoryID = data["CategoryID"]; cat = new Category(data["CategoryName"], data["CategoryType"]); catList.Add(cat); } if(data["TemplateID"] != lastTemplateID) { lastTempateID = data["TemplateID"]; template = new Template(data["TemplateName"], data["TemplateXYZ"])); cat.Templates.Add(template); } template.Instances.Add(new Instance(data["InstanceID"], data["InstanceName"]); } Is there a better, more elegant solution to fill the hierarchical class objects? Maybe using LINQ or Dictionaries? Note: This question is related to my other question about the best way to gather hierarchical data from a DB . I split it up because this are two separate issues.
