[site]: stackoverflow
[post_id]: 4327223
[parent_id]: 
[tags]: 
How to build a mix-in architecture framework in C#?

I have a concept for a framework of controls that I would like to build. What makes this idea different is that I do not intend to take the "one size fits all" approach or the "one control to rule them all" approach. As an example, Telerik makes a very nice Grid control, as does ComponentOne, Xceed, etc.. However, they are all gigantic controls with hundreds or thousands of methods and properties, complex object model hiearchies, etc... All too often these grids are way overkill for what you need, but you still have to take on the herculean task of learning the entire grid to do something simple. My concept is more of an "mix-in" aproach. Where you create a very simple control, and then build features that you can "add-in" to the control a la carte. For example, you have a simple grid, and you want to add grid "sections" with headers and footers for each. Ok, so where's the problem? The traditional way of doing something like this is via multiple inheritance, which C# does not support. Even if it did support it, I'm still of the opinion that MI adds more problems than it solves. So I'm soliciting SO for opinions on how to approach this problem. Would MEF be a potential solution? EDIT: Something that occurs to me is that it could be possible to use expression trees to build the control from various expressions. I'd have to think through this some more, but it's an interesting concept. Another possible option might be a "Control Generator" that generates an assembly based on a the selected features. That seems more complex, but with T4 might be managable.
