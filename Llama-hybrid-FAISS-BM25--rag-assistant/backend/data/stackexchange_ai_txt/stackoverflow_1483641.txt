[site]: stackoverflow
[post_id]: 1483641
[parent_id]: 1483201
[tags]: 
I'd also recommend that you pay more attention to names. They matter a great deal and deserve careful thought. "subPerson" as a class name leaves me quite cold. Aside from the poor camel case style, the assignment explicitly calls for a class Student. Why did you go with "subPerson"? I would advise against the "displayal" (sic) method as well. The proper idiom is to override the toString() method in Object. I'd write it like this: /** * Person * User: Michael * Date: Sep 27, 2009 * Time: 10:00:00 AM */ public class Person { private String name; public static void main(String[] args) { Person s = new Student("Foo Bar", "35", "Intro To Java"); System.out.println(s); } public Person(String name) { if ((name == null) || (name.trim().length() == 0)) throw new IllegalArgumentException("name cannot be blank or null"); this.name = name; } public String getName() { return name; } public void setName(String name) { if ((name == null) || (name.trim().length() == 0)) throw new IllegalArgumentException("name cannot be blank or null"); this.name = name; } @Override public String toString() { return "Person{" + "name='" + name + '\'' + '}'; } } class Student extends Person { private String prn; private String course; Student(String name, String prn, String course) { super(name); this.prn = prn; this.course = course; } @Override public String toString() { return "Student{" + "name='" + getName() + '\'' + ", prn='" + prn + '\'' + ", course='" + course + '\'' + '}'; } }
