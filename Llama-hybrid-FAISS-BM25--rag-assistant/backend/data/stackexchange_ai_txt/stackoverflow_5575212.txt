[site]: stackoverflow
[post_id]: 5575212
[parent_id]: 
[tags]: 
Is there a difference in Java's writeInt when executed on Windows vs an Intel based Mac

I currently writing a Java TCP server to handle the communication with a client (which I didn't write). When the server, hosted on windows, responds to the client with the number of records received the client doesn't read the integer correctly, and instead reads it as an empty packet. When the same server code, hosted on my Mac, responds to the client with the number of records received the client reads the packet and responds correctly. Through my research I haven't found an explanation that seems to solve the issue. I have tried reversing the bytes (Integer.reverseBytes) before calling the writeInt method and that didn't seem to resolve the issue. Any ideas are appreciated. Brian After comparing the pcap files there are no obvious differences in how they are sent. The first byte is sent followed by the last 3. Both systems send the correct number of records. Yes I'm referring to the DataOutputStream.writeInt() method. //Code added public void run() { try { InputStream in = socket.getInputStream(); DataOutputStream datOut = new DataOutputStream(socket.getOutputStream()); datOut.writeByte(1); //sends correctly and read correctly by client datOut.flush(); //below is used to read bytes to determine length of message int bytesRead=0; int bytesToRead=25; byte[] input = new byte[bytesToRead]; while (bytesRead
