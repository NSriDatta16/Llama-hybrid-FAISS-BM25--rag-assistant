[site]: crossvalidated
[post_id]: 576368
[parent_id]: 45862
[tags]: 
In case somebody cares a Bayesian alternative, one possibility is the Bayesian trend detection method in the R package Rbeast ( https://github.com/zhaokg/Rbeast ), which is also available in Python and Matlab /Octave. Here is a test on the given sample data. set.seed(1234) t Rbeast deals with time series or 1D sequential data; it does time series decomposition (i.e., sperate trend from seasonality) and change detection simultaneously. But the example data doesn't have a periodic component, so season='none' is specified above. In the result below, the Pr(tcp) plots the probability of having a changepoint over time (along x), with the peaks giving the most likely locations of sudden change. The slpSign subplot gives the probabilities of the signs of the trend slope over time (along x): The upper red portion refers to the time-varying probability of slopes being positive, the middle green portion refers to the probabilities of slope being zero, and the bottom bluish portion refers to the probabilities of slope being negative. (At each point, the sum of the three equal 1.0) In the above, the trend is fitted via a piecewise linear model; the result shows at least three segments (i.e., two changepoints) are needed to adequately approximate the quadratic trend. If we know the underlying trend is of quadratic form, Rbeast also allows incorporating this prior knowledge by setting the min and max orders of the polynomials needed to fit the trend, as shown below out = beast(y, season='none', torder.minmax=c(2, 2) ) plot(out) In the result below, no changepoints are needed or detected to fit the trend if the quadratic model form is used; that is, the Pr(tcp) curve is close to zero. The probabilities of slopes being negative or positive are similar to the result of the first run.
