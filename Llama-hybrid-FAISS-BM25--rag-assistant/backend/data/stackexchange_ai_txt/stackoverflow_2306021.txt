[site]: stackoverflow
[post_id]: 2306021
[parent_id]: 2306005
[tags]: 
To answer question 2: using namespace std; map * > foo; vector * pointer= foo["thekey"]; If using smart (reference-counted) pointers is a requirement: #include using namespace std::tr1; using namespace std; map > > foo; shared_ptr > pointer= foo["thekey"]; To answer question #1, you can write a new allocator template class and declare your vectors to use that allocator, but I don't really know anything about writing allocators: map >* > foo; In particular I don't know how to design an allocator that will avoid fragmenting your memory pool. (But if you have that part answered, then writing a custom allocator would be the way to go.)
