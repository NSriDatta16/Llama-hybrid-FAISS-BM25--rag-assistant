[site]: stackoverflow
[post_id]: 4577977
[parent_id]: 4577507
[tags]: 
For me, I use the following workflow: Export a specific revision from repo and upload it to my webserver. So I have a live version . When I exported the revision, I create a tag indicating that this version is live now (e.g. live_from_xxyyzz where xxyyzz is the date of upload) When I have to do any changes, I change locally, check them in, then do a new export (i.e. go to step 1) Doing so, there's absolutely no need to turn an exported version back to a working copy since you have your tags that you can trust. On the other hand, you can simply take your live version (that one on the remote server) and copy it over your working directory . If something's different, you will notice it (as well as missing files or new files). Edit: When your exported version shall become a working copy, you have a little trouble using svn: svn (currently) needs an .svn folder of the checked out working copy. These .svn folders hold the versioning information. To put the whole exported version under version control, you'd have to create (and populate) these folders (i.e. copy them from a real working copy into the exported version). From Subversion 1.7 on, there will be a centralized metadata storage what means that all the versioning related files are stored in one folder per working copy (like for example Git does). That would make solving your problem easier, but for now, I see no other alternative but to copy the .svn folders from a working copy as described above (except really checking out the branch, of course).
