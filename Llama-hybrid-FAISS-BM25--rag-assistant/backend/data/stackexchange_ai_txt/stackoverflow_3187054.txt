[site]: stackoverflow
[post_id]: 3187054
[parent_id]: 3187019
[tags]: 
The compiler doesn't enforce this because you have knowledge about what paths are practically possible that the compiler doesn't. The compiler typically only knows about that particular file, not others that may affect the flow inside any given function. So, it isn't an error. In Visual Studio, though, it is a warning. And we should pay attention to all warnings.... right? :) Edit : There seems to be some discussion about when this could happen. Here's a modified but real example from my personal code library; enum TriBool { Yes, No, Maybe }; TriBool GetResult(int input) { if (TestOne(input)) { return Yes; } else if (TestTwo(input)) { return No; } } Bear with me because this is old code. Originally there was an "else return maybe" in there. :) If TestOne and TestTwo are in a different compilation unit then when the compiler hits this code, it can not tell if TestOne and TestTwo could both return false for a given input. You, as the programmer that wrote TestOne and TestTwo, know that if TestOne fails then TestTwo will succeed. Maybe there are side effects of those tests so they have to be done. Would it be better to write it without the "else if"? Maybe. Probably. But the point is that this is legal C++ and the compiler can't know if it is possible to exit without a return statement. It is, I agree, ugly and not good coding but it is legal and Visual Studio will give you a warning but it will compile. Remember that C++ isn't about protecting you from yourself. It is about letting you do what your heart desires within the constraints of the language even if that includes shooting yourself in the foot.
