[site]: stackoverflow
[post_id]: 402047
[parent_id]: 401464
[tags]: 
Object creation is cheap, yes, but sometimes not cheap enough. If you create a lot (and I mean A LOT) temporary objects in rapid succession, the costs for the garbage collector are considerable. However even with a good profiler you may not necessarily see the costs easily, as the garbage collector nowadays works in short intervals instead of blocking the whole application for a second or two. Most of the performance improvements I got in my projects came from either avoiding object creation or avoiding the whole work (including the object creation) through aggressive caching. No matter how big or small the object is, it still takes time to create it and to manage the references and heap structures for it. (And of course, the cleanup and the internal heap-defrag/copying also takes time.) I would not start to be religious about avoiding object creation at all cost, but if you see a jigsaw pattern in your memory-profiler, it means your garbage collector is on heavy duty. And if your garbage collector uses the CPU, the CPI is not available for your application. Regarding object pooling: Doing it right and not running into either memory leaks or invalid states or spending more time on the management than you would save is difficult. So I never used that strategy. My strategy has been to simply strive for immutable objects. Immutable things can be cached easily and therefore help to keep the system simple. However, no matter what you do: Make sure you check your hotspots with a profiler first. Premature optimization is the root of most evilness.
