[site]: stackoverflow
[post_id]: 2676274
[parent_id]: 2676209
[tags]: 
Your code seems to be acting as if BUILD is a constructor, which it isn't -- it's more like a post-construction hook where you can perform other things like read values from a DB. You should instead either: store the result of mia->load in an attribute, and optionally use delegated methods to access it, or use the result of mia->load as the object, rather than constructing a separate one. Here is an example of the first case, separating the MooseX::Storage object from the object that controls it: package miaController; use Moose; use mia; has 'nome' => ( is => 'rw', isa => 'Str', default =>'',); has 'stato' => ( is => 'rw', isa => 'Int', default =>1,); has 'mia' => ( is => 'rw', isa => 'mia', lazy => 1); sub BUILD { my $self = shift; if ($self->stato == 1) { $self->mia(mia->load("mia.dat")); } elsif ($self->stato == 2) { $self->stato(0); $self->nome("prova"); $self->mia->store("mia.dat"); } } sub stampa { my $self = shift; print $self->nome." ".$self->stato; } package mia; use Moose; use MooseX::Storage; with Storage(format => 'JSON', io => 'File'); package main: use miaController; my $m1=miaController->new(stato=>2); my $m2=miaController->new(); print "\nm1 \n"; $m1->stampa(); print "\nm2 \n"; $m2->stampa();
