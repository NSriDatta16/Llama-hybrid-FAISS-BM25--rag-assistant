[site]: stackoverflow
[post_id]: 3697169
[parent_id]: 1757381
[tags]: 
We do this for some of our internal tools What we do protects us from exception issues and discourages any attempts by the users to get overly creative in the config scripts. However it doesn't protect us from infinite loops or actively malicious third parties. The core of the approach here is to run the script in a locked down exec. First we go through the __ builtin __ module and del everything we don't want them to be able to touch, especially __ import __. We actually do this in a context manager which backs the original values up and dels them on the way in and then restores the original values on the way back out. Next we create an empty dictionary to be the config scripts namespace. Then we exec the config with the namespace. The exec is of course wrapped in a try except that will catch anything. And finally we inspect the namespace to extract the variables we are interested in. Points to note here: It might be tempting to prepopulate the namespace with stuff that might be useful to the config script, but you want to be very careful doing that you quickly open up hooks back into the host program. The config scripts can still create functions and classes so you might get back something that looks like a string for example, but is actually an arbitrary blob of executable code. Because of these we impose the restriction that our config scripts are expected to produce pure primitive data structures (generally just ints, strings, lists, tuples and None) that we then separately verify.
