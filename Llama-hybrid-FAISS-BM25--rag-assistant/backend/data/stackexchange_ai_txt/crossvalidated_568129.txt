[site]: crossvalidated
[post_id]: 568129
[parent_id]: 568107
[tags]: 
In R you can use the brms package (a really great tool for incredibly flexible modelling) to create such a (Bayesian) time-to-event regression model with notation like this: brm( formula = event_time | trunc(lb = burn_in_time) + cens(censored) ~ predictors, family = weibull(link = "log", link_shape = "log") where I assume there is a variable that gives a burn_in_time during which items were not at risk in order to be part of your dataset (and that it is always and you assume that from time zero all records have the same Weibull distribution, you just start being in the current datasets after different times) and a variable with a censored indicator with 0 for non-censored observations and 1 for right-censored ones (see the brms documentation ). Sure, this is not a Python package, but what it actually does in the background is create Stan code for the model and compile it. You can get the Stan code via the make_stancode function and then use it with a Python interface to Stan like PyStan (or you call R from Python using something like rpy2 ). There's also the alternative of using pybrms , but I have no experience with that. For all of the above, you of course need to be comfortable with a Bayesian framework and would probably want to at least specify weakly informative priors.
