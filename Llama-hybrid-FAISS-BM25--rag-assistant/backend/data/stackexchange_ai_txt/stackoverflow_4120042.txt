[site]: stackoverflow
[post_id]: 4120042
[parent_id]: 3451028
[tags]: 
I do not entirely understand how to read the (init (x ∷ xs) | (initLast (x ∷ xs) | initLast xs)) component. I suppose my questions are; is it possible, how and what does that term mean. This tells you that the value init (x ∷ xs) depends on the value of everything to the right of the | . When you prove something about in a function in Agda your proof will have to have the structure of the original definition. In this case you have to case on the result of initLast because the definition of initLast does this before producing any results. init : ∀ {a n} {A : Set a} → Vec A (1 + n) → Vec A n init xs with initLast xs -- ⇧ The first thing this definition does is case on this value init .(ys ∷ʳ y) | (ys , y , refl) = ys So here is how we write the lemma. module inithead where open import Data.Nat open import Data.Product open import Data.Vec open import Relation.Binary.PropositionalEquality lem-headInit : {A : Set} {n : ℕ} (xs : Vec A (2 + n)) → head (init xs) ≡ head xs lem-headInit (x ∷ xs) with initLast xs lem-headInit (x ∷ .(ys ∷ʳ y)) | ys , y , refl = refl I took the liberty of generalizing your lemma to Vec A since the lemma doesn't depend on the contents of the vector.
