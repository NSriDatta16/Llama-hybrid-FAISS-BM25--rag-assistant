[site]: stackoverflow
[post_id]: 4385282
[parent_id]: 
[tags]: 
Is this design pattern logical?

The following C# is abstract so you can see the structure of what I am trying to accomplish This is the Composite (GoF) Pattern I am using to represent a FileSystem tree interface IComponent { void Render(); void Add(INode); void Remove(INode); } class Folder : IComponent { List filesAndFolders = new List (); void Render() { Console.WriteLine("This is a folder, num childs: " + } void Add(IComponent add) { filesAndFolders.Add(add); } void Remove(IComponent rem) { filesAndFolders.Remove(rem); } } class File : IComponent { void Render() { Console.WriteLine("This is a file"); } void Add(IComponent add) { //do nothing... cant add folder to file } void Remove() { } //same as above } My problem with the above code is now I have File which does not implement Add or Remove... I could: Remove the add and remove from Component , but then I believe I am breaking the pattern a bit. Use a complement pattern (decorator?) to change Add in the leaf and composite classes. For example, force Folder somehow to have a method Folder.AddFileOrFolder(Component) and File to have File.AddSibling(File). Look at a different pattern . Perhaps I am doing it wrong or trying to accomplish something impossible without knowing more about my requirements? For example some questions would be how is/should the pattern I use interact with the Viewing of the objects and how the user input affects the objects. These files and folders are really representations of objects on a remote host, they are not acctual files and folders on the hard disk. One user interaction will be when a "file" in the application is dragged onto the desktop, a file is downloaded. Bonus (some what related) question: What would be a good trick or technique to cache the files in my application so that if the user does interact with the "virtual" file they see the result faster. Thank You.
