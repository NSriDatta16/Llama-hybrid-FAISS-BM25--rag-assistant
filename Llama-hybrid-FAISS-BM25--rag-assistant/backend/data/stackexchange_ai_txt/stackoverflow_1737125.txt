[site]: stackoverflow
[post_id]: 1737125
[parent_id]: 1129006
[tags]: 
No (but...) But that is because Java's NIO FileChannel and MappedByteBuffer are not nearly as complex or difficult to understand and use as the networking and Selector stuff java.nio . Here is an example of creating a disk backed map (known as a 'mapped byte buffer' in NIO-land) that would be appropriate for your exercise: File file = new File("/Users/stu/mybigfile.bin"); FileChannel fc = (new FileInputStream(file)).getChannel(); MappedByteBuffer buf = fc.map(MapMode.READ_WRITE, 0, file.length()); You can access the buffer like any other Buffer . Data moves magically and quickly between disk and memory, all managed by Java and the underlying OS's virtual memory management system. You do have a degree of control of this, though. E.g.: MappedByteBuffer's .force() ( 'Forces any changes made to this buffer's content to be written to the storage device containing the mapped file.' ) and .load() ( 'Loads this buffer's content into physical memory.' ) I've never needed these personally.
