[site]: datascience
[post_id]: 96815
[parent_id]: 92724
[tags]: 
I am also trying to do a similar thing. The code below should work. After loading the pretrained weights on COCO dataset, we need to replace the classifier layer with our own. num_classes = # num of objects to identify + background class model = torchvision.models.detection.retinanet_resnet50_fpn(pretrained=True) # replace classification layer in_features = model.head.classification_head.conv[0].in_channels num_anchors = model.head.classification_head.num_anchors model.head.classification_head.num_classes = num_classes cls_logits = torch.nn.Conv2d(out_channels, num_anchors * num_classes, kernel_size = 3, stride=1, padding=1) torch.nn.init.normal_(cls_logits.weight, std=0.01) # as per pytorch code torch.nn.init.constant_(cls_logits.bias, -math.log((1 - 0.01) / 0.01)) # as per pytorcch code # assign cls head to model model.head.classification_head.cls_logits = cls_logits No change is needed for the regression box network because the number of anchor boxes per spatial location does not change as when the model was pretrained on COCO dataset. The code is a little cumbersome as compared to Faster R-CNN. Would hope to see a solution that is more elegant. Hope this helps.
