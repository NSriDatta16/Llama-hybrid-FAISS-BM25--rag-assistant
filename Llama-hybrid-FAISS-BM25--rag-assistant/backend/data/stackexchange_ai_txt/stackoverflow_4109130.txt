[site]: stackoverflow
[post_id]: 4109130
[parent_id]: 3198651
[tags]: 
I think I know what you are asking for. You need to pass a company and multiple employees to the view so that they are strongly typed. Let me know if I am wrong. What I do when I need multiple objects in a view is I create a "ViewModel" class. I usually create domain model stuff in a separate project and then I use the models folder in the MVC project to house my ViewModels. So create a class like this public class SampleViewModel { public SampleViewModel() { } public Company Company { get; set; } public IEnumerable Employees { get; set; } } Now bind your view to the sample view model. public ViewResult SampleAction(SampleViewModel svm) { if (svm == null) svm = new SampleViewModel() { Company=/*getcompany*/, Employees=/*get ienumerable employees */ }; } This technique has served my purposes quite well. Hopefully this is what you were looking for. EDIT: I read one of your comments Fred and I must not have enough rep to reply to other answers or something (sorry, I'm new). To generate these fields on the fly in the view you would obviously bind UI to the company field (Model.Company) first, then enumerate through the IEnumerable (Model.Employees) and creating whatever UI is necessary on each of them. I'm relatively new to ASP.NET MVC so I'm not sure how this affects model binding on POST, but at the very lease I'm sure you could iterate through the post values in your action method and create an IEnumerable list to bind back to your ViewModel. If the number of fields on the view is dynamic and you get an X number of employees back then you would have to iterate through the post collection to bind them to your ViewModel. From there you can do whatever you need to with the company and the employees, plugging them into your domain model, etc. If you are loading the form for the first time you are probably not going to have any employees in the list so no UI would load. You would need to check the size of the list, if zero you would generate one set of UI components bound for Employee. You would then probably have javascript button for adding another employee that duplicates this set of UI for as many times as they need to.
