[site]: stackoverflow
[post_id]: 4359671
[parent_id]: 
[tags]: 
SQL search design

I am building a documents archive form my company in SQL database. I need the design to allow be fast stable and scalable search ability. there are 2 options that came in mind: Option 1: Fields Table key Name Type allow Null (pk) field_id bigint FALSE field_name varchar(100) FALSE field_type tinyint FALSE field_max_length int TRUE (fk) field_label_keyId decimal TRUE field_rules xml TRUE field_defaults xml TRUE field_hierarchy hierarchyid TRUE Fields for Site Table key Name Type allow Null (pk) field_site_id bigint FALSE (fk) field_id bigint FALSE (fk) site_id varchar(50) FALSE Fields Values Table key Name Type allow Null (pk) doc_field_value_id bigint FALSE (fk) field_id bigint FALSE (fk) doc_id varchar(50) FALSE field_value nvarchar(4000) TRUE Where I would go: SELECT * FROM [Fields Values Table] WHERE doc_id IN (SELECT doc_id FROM [Fields Values Table] WHERE [field_id] = 1 AND [field_value]=1) AND (doc_id IN (SELECT doc_id FROM [Fields Values Table] WHERE [field_id] = 2 AND [field_value]=2 ... ) ) . . . (For as many search parameters as needed) This option is scalable and more storage efficient. The problem is searching the data based on different search criteria. Option 2: Fields Values Table key Name Type allow Null (pk) doc_field_value_id bigint FALSE S1 nvarchar(50) TRUE S2 nvarchar(50) TRUE S3 nvarchar(50) TRUE S4 nvarchar(50) TRUE S5 nvarchar(50) TRUE S6 nvarchar(50) TRUE . . . . . . . . . S(N) nvarchar(50) TRUE where I will go: SELECT * FROM [Fields Values Table] WHERE [S1]=1 AND [S2]=2 AND [S3]=3 This option is less scalable and less storage efficient, but is also less IO demanding and might be easier to maintain. Question: Each design has its drawbacks, but I need to know which is best and is there another option that I haven't considered.
