[site]: stackoverflow
[post_id]: 48458
[parent_id]: 
[tags]: 
Project structure for Google App Engine

I started an application in Google App Engine right when it came out, to play with the technology and work on a pet project that I had been thinking about for a long time but never gotten around to starting. The result is BowlSK . However, as it has grown, and features have been added, it has gotten really difficult to keep things organized - mainly due to the fact that this is my first python project, and I didn't know anything about it until I started working. What I have: Main Level contains: all .py files (didn't know how to make packages work) all .html templates for main level pages Subdirectories: separate folders for css, images, js, etc. folders that hold .html templates for subdirecty-type urls Example: http://www.bowlsk.com/ maps to HomePage (default package), template at "index.html" http://www.bowlsk.com/games/view-series.html?series=7130 maps to ViewSeriesPage (again, default package), template at "games/view-series.html" It's nasty. How do I restructure? I had 2 ideas: Main Folder containing: appdef, indexes, main.py? Subfolder for code. Does this have to be my first package? Subfolder for templates. Folder heirarchy would match package heirarchy Individual subfolders for css, images, js, etc. Main Folder containing appdef, indexes, main.py? Subfolder for code + templates. This way I have the handler class right next to the template, because in this stage, I'm adding lots of features, so modifications to one mean modifications to the other. Again, do I have to have this folder name be the first package name for my classes? I'd like the folder to be "src", but I don't want my classes to be "src.WhateverPage" Is there a best practice? With Django 1.0 on the horizon, is there something I can do now to improve my ability to integrate with it when it becomes the official GAE templating engine? I would simply start trying these things, and seeing which seems better, but pyDev's refactoring support doesn't seem to handle package moves very well, so it will likely be a non-trivial task to get all of this working again.
