[site]: stackoverflow
[post_id]: 4890971
[parent_id]: 
[tags]: 
Allow "third party" plugins for my Django app, that don't require config changes?

I would like to know of a good approach, or programming "pattern" to apply, to allow users of my Django application to drop in "plugins" or "extensions" for my app, without having to add anything to 'installed apps' or edit any configuration. WordPress plugins probably being the best example. New options/settings/menus become available, but I don't have to edit the WordPress config or core files - they just show up in my admin. In Django/Python, what approach or programming "pattern" would you use to begin to develop a type of plugin architecture? I know that WordPress (the example given) is a 'platform' itself, and provides a plugin API, etc. My question is about the patterns involved, and the early stages - preparing for plugins before the application is built, rather than trying to add that functionality later. To be specific, my app accepts "content", and I'd like to provide a way for users to drop in modular "transformers" that provide additional outputs of that content (not just a filter) that may or may not need to accept a few basic settings.
