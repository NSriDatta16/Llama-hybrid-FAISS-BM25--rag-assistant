[site]: stackoverflow
[post_id]: 120048
[parent_id]: 119867
[tags]: 
Read good quality code. Locate other projects (open source or proprietary projects within your organizations) and look for how other engineers have approached particular issues. Look for idioms, design patterns, styles that you find particularly good and adopt them in your coding practices. Concentrate on the basics. Sure knowing how to perform a particular operation best in C# is good, but knowing how and when to abstract, avoiding duplication, following style rules, and giving your identifiers appropriate names are more important skills. These are also more valuable because you can apply them to any language. Improve your code. When you find in code something complicated or suboptimal try to think of a better way to write it. For instance, if you write a lot of boilerplate code, examine how you can use abstraction mechanisms, like subroutines, methods, or classes, to avoid the code duplication. If an expression is particularly long, think whether putting some of it into a separate function can increase its readability. Use tools. There are tools, like FindBugs, that can locate suboptimal or downright wrong code constructs. Make it a habit to have your code pass cleanly through these tools, and also from your compiler's highest warning setting. Have your code reviewed. Find a mentor and have him or her review your code. Be ready to accept criticism and learn from this experience. Later repay this favor to the community by acting as a mentor.
