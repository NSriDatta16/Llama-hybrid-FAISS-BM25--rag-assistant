[site]: stackoverflow
[post_id]: 5239233
[parent_id]: 5164867
[tags]: 
As to the abstract classes, I've actually used them in the domain in GORM. Abstract classes should lie outside of the whole domain folder. Also note that because of that, GORM doesn't perform any of its magic on them. Therefore if you supply fields like "static constaints = ..." or "static mapping = ..." they might be taken into consideration only as long as the derived class doesn't shadow them. One more thing worth noting: base classes outside of the domain package SHOULD be abstract. If they aren't, GORM complains about it. As to interfaces, I don't really see much of the problem. You can implement as many interfaces as you wish on your domain classes. You cannot declare fields that use interfaces as their types, not unless you give a hint about their actual type (not entirely sure this is possible). This is a limitation of an underlying Hibernate stack, and is a direct effect of how it handles inheritance (i.e. table per hierarchy). However bare in mind that dynamic languages such as Groovy REALLY make interfaces much less useful. If you supply a method with a common name to all of your domain classes, you will be able to write something like organisationStructureItem.findPeople() and the compiler won't complain about it. This wouldn't be the case in a strongly typed language, like Java.
