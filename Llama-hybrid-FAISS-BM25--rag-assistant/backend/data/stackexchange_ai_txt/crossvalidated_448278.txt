[site]: crossvalidated
[post_id]: 448278
[parent_id]: 447206
[tags]: 
I wonder about using a random effects model to model the time of each horse in each race. A key prequisite is that you would see most horses multiple times and ideally a good number of both tracks. You would assume that each horse has a certain "quality" that varies across horses, but unless you know more about a horse a single stand-out performance is scaled back a little to average. This rating/quality could either be fixed across all time or allowed to vary across time (seems more realistic), but would probably be (almost) fixed for some reasonable time period like a few months or a year (a very simplistic way of achieving that would be to assign a horse a different ID for each year of its age or something like that). Each race probably also has a random effect (things you do not know about that race on that day like the weather might have some effect). Additionally, the track has an effect (if you had enough tracks you could make that random, but with two tracks that dose not make sense). The next question would be how to account for how competitive the race is - maybe the race class variable you have for that would be suitable. Perhaps that's too simplistic, e.g. a really good horse may not have to try so hard in a less competitive race. Another question is what kind of distribution is suitable for modeling race times for each horse. I have no domain knowledge, so this is just a wild guess, but modeling log(time) and assuming normally distributed residuals might be a good first try. Using the notation used in the lme4 R package (one possible package one could use, there's of course also e.g. rstanarm and many other modeling tools that may be suitable), a reasonable model might thus look like this: glmer(logtime ~ (1|horse+race) + track + raceclass) . You would then want to extract the estimated random effects for each horse and those would give you a rating. Note that there could be quite a few things wrong with this model. For a start, we assume that if a horse is better on one track than another horse, it is also better on the other track (that does not mean it always needs to win on both tracks, there is of course randomness, but if you could hypothetically re-do races lots of times, the same horse would win more often on both tracks). That may not be true, if one horse can somehow cope better with the conditions on one track (e.g. longer vs. shorter, more sloped, requiring more burst speed vs. endurance, or whatever else may be different across these tracks). If there are issues like that, then a single number may simply be incapable of capturing them. Then, you may need a more complex model that ideally models these differences between tracks (and ideally across even more tracks).
