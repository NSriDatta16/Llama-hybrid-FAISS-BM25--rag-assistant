[site]: stackoverflow
[post_id]: 4734456
[parent_id]: 4734406
[tags]: 
There is currently a popular style of thinking that says " favour composition over inheritance ". There is too much information on Google to really list it all here, but let's just say that with the rare exception of the occasional abstract base class, I haven't used inheritance in 2-3 years. The main idea is that any given class, rather than extending base classes that allow it to deliver required functionality, will have dependencies on other classes. In actual fact, to keep things SOLID , it'll have dependencies on interfaces that provide a contract that says they'll perform a function. You then get to a point where your Controller class has services/components passed-in, which it delegates to in order to get specific jobs done. Note you can go too far the other way as well. If you have a class that depends on lots of external services especially if not every public method on the class ends up using all of them, you might in fact have two classes after all. I.e. your controller is "violating" the single responsibility principle by doing more than one job. This is especially easy to do by accident with controllers in web frameworks because they kind of encourage it. At this point, I reckon it's advisable to read up on: Favour composition over inheritance . Dependency Injection and Inversion of Control . Inversion of Control containers (e.g. StructureMap and my personal favourite: Castle Windsor ).
