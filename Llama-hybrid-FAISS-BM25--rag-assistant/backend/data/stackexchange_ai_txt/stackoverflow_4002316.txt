[site]: stackoverflow
[post_id]: 4002316
[parent_id]: 3895032
[tags]: 
(2) Is there a legitimate pattern that leverages the fact that the target can be null? I ask this as a consequence of wondering why calling an extension method on a null reference wouldn't generate the runtime exception the same way as if you called an instance method on a null reference. Well, here's one use of it. public static class UtilityExtensions { public static void ThrowIfNull( this object obj, string argName ) { if ( obj == null ) { throw new ArgumentNullException( argName ); } } } Now you can write null checks easily and on one line (helpful if your coding convention forces you to use braces with all if statements). public void Foo(string bar) { bar.ThrowIfNull("bar"); // ... } Whether or not you consider that a "legitimate" pattern is up to you, but I'd be very sad if the runtime was changed to make extension method invocations on null references throw exceptions.
