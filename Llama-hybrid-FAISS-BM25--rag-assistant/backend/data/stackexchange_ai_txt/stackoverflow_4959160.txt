[site]: stackoverflow
[post_id]: 4959160
[parent_id]: 4958714
[tags]: 
In my opinion the best solution would be a separate routine that builds knowledge about all container controls, allowing the dialog validation routine to stay generic and at the same time being focused enough to be easily tested and maintained. Something along the lines of: procedure ForceControlVisible(C: TControl); begin // Recursive code if Assigned(C.Parent) then ForceControlVisible(C.Parent); // Code specific to each container control class if C is TTabSheet then begin // Code that makes sure "C" is the active page in the PageControl // goes here. We already know the PageControl itself is visible because // of the recursive call. end else if C is TYourCollapsibleBox then begin // Code that handles your specific collapsible boxes goes here end end; OOP-style methods that rely on virtual methods or implementing interfaces would be way more elegant, but require access to the source code of all the controls you want to use: even if you do have access to all required sources, it's preferable not to introduce any changes because it makes upgrading those controls difficult (you'd have to re-introduce your changes after getting the new files from the supplier).
