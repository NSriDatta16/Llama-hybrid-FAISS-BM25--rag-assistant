[site]: stackoverflow
[post_id]: 5566515
[parent_id]: 5565568
[tags]: 
The jQuery function returns an object. It has numeric properties whose values are references to DOM elements, not copies. So given the following: p0 p1 var paragraphs = $('p'); paragraphs will be an object that has a '0' property whose value is a reference to the p element with id p0, and a '1' property that is a reference to the p element with id p1. You could reference the first p using: paragraphs['0']; jQuery helps with "traversing the DOM" in that you can use a selector (or multiple selectors) to "collect" elements as properties of an object, then iterate over the numeric properties of that object and do something with them. So to add a class to the p elements above, you can do: paragraphs.each(function(i,el){$(el).addClass('newClass')}) The equivalent in plain javascript would be: var paragraphs = document.getElementsByTagName('p'); var i = paragraphs.length; while (i--) { myLib.addClass(paragraphs[i], 'newClass'); } Where myLib.addClass is a simple function to add a class to the className property. If the addClass function is a little smarter so it could accept an array (or array-like object) of element references, then the POJS version would be: myLib.addClass(document.getElementsByTagName('p'), 'newClass'); So building equivalent ad hoc "DOM traversal" capability is not particularly difficult.
