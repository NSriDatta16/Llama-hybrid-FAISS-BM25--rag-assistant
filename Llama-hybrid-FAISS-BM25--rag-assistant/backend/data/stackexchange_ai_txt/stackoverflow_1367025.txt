[site]: stackoverflow
[post_id]: 1367025
[parent_id]: 749760
[tags]: 
Justin Angel wrote about "advanced" TreeView uses, among them finding arbirtraty elements in a treeview by their bound object. Since I am comparatively new to Silverlight, I am not sure if there is a better, more elegant way, but you could use one of his methods to find the parent. I imagine using a call this way: TreeViewItem trvi = ContainerFromItem(tree, tree.SelectedItem); MySubCollectionItem parentItem = ItemFromContainer(tree, trvi.Parent); // note the "Parent" here With the extension methods below available from somewhere: public static TreeViewItem ContainerFromItem(this TreeView treeView, object item) { TreeViewItem containerThatMightContainItem = (TreeViewItem)treeView.ItemContainerGenerator.ContainerFromItem(item); if (containerThatMightContainItem != null) return containerThatMightContainItem; else return ContainerFromItem(treeView.ItemContainerGenerator, treeView.Items, item); } private static TreeViewItem ContainerFromItem(ItemContainerGenerator parentItemContainerGenerator, ItemCollection itemCollection, object item) { foreach (object curChildItem in itemCollection) { TreeViewItem parentContainer = (TreeViewItem)parentItemContainerGenerator.ContainerFromItem(curChildItem); if (parentContainer == null) return null; TreeViewItem containerThatMightContainItem = (TreeViewItem)parentContainer.ItemContainerGenerator.ContainerFromItem(item); if (containerThatMightContainItem != null) return containerThatMightContainItem; TreeViewItem recursionResult = ContainerFromItem(parentContainer.ItemContainerGenerator, parentContainer.Items, item); if (recursionResult != null) return recursionResult; } return null; } public static object ItemFromContainer(this TreeView treeView, TreeViewItem container) { TreeViewItem itemThatMightBelongToContainer = (TreeViewItem)treeView.ItemContainerGenerator.ItemFromContainer(container); if (itemThatMightBelongToContainer != null) return itemThatMightBelongToContainer; else return ItemFromContainer(treeView.ItemContainerGenerator, treeView.Items, container); } private static object ItemFromContainer(ItemContainerGenerator parentItemContainerGenerator, ItemCollection itemCollection, TreeViewItem container) { foreach (object curChildItem in itemCollection) { TreeViewItem parentContainer = (TreeViewItem)parentItemContainerGenerator.ContainerFromItem(curChildItem); if (parentContainer == null) return null; TreeViewItem itemThatMightBelongToContainer = (TreeViewItem)parentContainer.ItemContainerGenerator.ItemFromContainer(container); if (itemThatMightBelongToContainer != null) return itemThatMightBelongToContainer; TreeViewItem recursionResult = ItemFromContainer(parentContainer.ItemContainerGenerator, parentContainer.Items, container) as TreeViewItem; if (recursionResult != null) return recursionResult; } return null; }
