[site]: stackoverflow
[post_id]: 2321569
[parent_id]: 2307243
[tags]: 
All better! The problem is with binding my observable collection to the ItemsSource property of my ItemsControl. For whatever reason (and maybe someone can explain this), every time I add an item to the observable collection, the ItemsControl has to re-create all of the items in my list. This was resulting in very irregular memory issues (doubling sometimes, increasing slowly, or even descreasing with each item added). Due to my requirements, I was able to accept the less-elegant solution of manually managing the Items collection. (I am able to keep each item's binding to a studyunit object without issue, which was the core need of my application. To force changes in the ObservableCollection to update the UI, I simply needed to add this code (I've only shown the code necessary for ADDING a single item): Private Sub obscolchanged(ByVal sender As Object, ByVal e As System.Collections.Specialized.NotifyCollectionChangedEventArgs) If e.Action = NotifyCollectionChangedAction.Add Then 'q added Dim newSU As studyUnit newSU = e.NewItems(0) dim newIndex as Integer = _ObsCol.IndexOf(newSU) If newIndex Similar code can be written to handle move events and deletion events. This obviously isn't as convenient as using the ItemsSource property, but I have experienced no Memory Issues, and adding an items is remarkably faster, because the ItemsControl does not have to regenerate each DataTemplate when I alter the Collection. And thank you, ItemsControl, for absorbing nearly 40 hours when I scoped out 30 minutes :)
