[site]: stackoverflow
[post_id]: 784941
[parent_id]: 784886
[tags]: 
There are some Reflection based methods you can use to deep-copy a custom object, google for "Reflection deep copy". This article, for example: http://alpatrick.blogspot.com/2005/01/prototype-pattern-using-reflection.html , clones all properties marked with a custom attribute [DeepCopy], but you can easily change that behavior yourself. Also, there is a similar thread on SO: How to deep copy between objects of different types in C#.NET [Edit] Note than in your example it may not be wise to simply create a complete deep copy of your tree node. A node may contain references to the tree, and other internal stuff which could possibly be unique and not copied to a different node. In that case, you should simply create a new node (using a constructor), assign the data from the source node, and then add the new node to the tree. The best way overall would be to bind your tree to you data, so that you never manually change the tree, but make it update automatically whenever you change your data. Check your Infragistics documentation on "data binding", that should be the best approach.
