[site]: stackoverflow
[post_id]: 3418757
[parent_id]: 3417203
[tags]: 
LINQ isn't intended to replace the use of the correct data structures for a given job. It just makes dealing with those data structures easier. If you're storing the data in a SQL database, you'd still be expected to use intelligent indexes on your DB to improve performance. Likewise, with LINQ to Objects you need to leverage data structures like SortedSet where appropriate. So the answer to your question is: A LINQ query to simulate the Contains method would be: var exists = handledChanges.Any(c => c.Recordid = recordId && c.Tablename == tableName); But if you're using LINQ to Objects, this will never achieve the same performance as using a Contains method on a data structure that is specially tailored to have quick lookups. If you're using LINQ to SQL or LINQ to Entities, this will provide an optimized SQL query, which can run very quickly. By the way, if your goal is to get faster lookups on an in-memory collection, you may want to consider using a HashSet with a custom IEqualityComparer. Its Contains method should take just as long on a collection of millions of objects as it will on a collection of 10.
