[site]: stackoverflow
[post_id]: 3417362
[parent_id]: 3416952
[tags]: 
As has been mentioned, scalability of an application depends on many factors. Some options may be application dependent, but proper planning is always important from the start. There are two types of scaling, vertical and horizontal. Vertical scaling is the old "throw more hardware at it" approach, meaning upgrade the server processor and/or memory. Horizontal scaling is the proper way to scale, by adding redundancy and spanning resources across multiple servers. Usually when people talk about scaling, they mean horizontal scaling. A typical Web architecture for scaling requires at least one load balancer, two or more Web servers, and one or more database servers. Each layer scales independently, and has to be handled differently. For example, you might add more load balancers to make the site more highly available (so if one balancer fails, the others are unaffected); this layer shouldn't require changes to your application, but will require other changes to your DNS and Web server software. Conversely, adding database servers may add to high availability, increase response times, or both. Changes to the database layer will probably require changes to the application so it can split reads and writes across multiple servers. Of course, there are many other tools which may be used for scaling and/or high availability. Examples include application level caching (memcached), HTTP accelerators (basically HTTP level caching), and alternative data storage methods. The best thing to do is keep these things in mind when planning and building the foundation of the application. Will it need to read and write from different database servers eventually? How are sessions stored, on the local filesystem (not scalable) or in a central cache (scalable)? Can these data objects be cached and if so, for how long before they are too stale? If you pay attention to these main things, most of the time your application will be able to scale without much additional work to the code base.
