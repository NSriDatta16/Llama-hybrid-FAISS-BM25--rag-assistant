[site]: stackoverflow
[post_id]: 4379673
[parent_id]: 4379430
[tags]: 
I'm really very confused by your LINQ Query, and it seems like the behavior you describe in the first paragraph doesn't really reflect what your code is trying to do. I believe the problem you're having with your code has more to do with the placement of your Double.Parse method than anything else, because the following code compiles and runs just fine: var myHoldingsDistribution = new Dictionary (); var rows = new[] {new {Descendants = new[]{new {Name = new {LocalName = "test"}, Value = 0.05}}}}; var keyName = "test"; var valueName = "test"; var multiplier = 2d; foreach (var row in rows) { myHoldingsDistribution.Add(row.Descendants .Where(y => y.Name.LocalName == keyName) .Select(q => q.Value).Max(), row.Descendants.Where(y => y.Name.LocalName == valueName) .Select(q => q.Value).Max() * multiplier); } Edit I'm still very confused by this question. So far you've given the following requirements: have 2 where clauses in a linq xml statement have two where clauses in one add statement for a dictionary object SELECT * FROM my dataset filter out those that are not 1 Percentile I'll ignore the first two because I don't think they're necessary. The third requirement is relatively simple, assuming your data format is somewhat fixed. (Did you really mean to have one "Year" tag and one "ALMRunResults_Year" tag?) // Move the data into an object that can easily be manipulated. var transform = from r in rows select new { key = r.Element(keyName).Value, value = Double.Parse(r.Element(valueName).Value), statistic = r.Element(statisticName).Value }; Once you've selected values out like this, you can just use LINQ to Objects to perform the filter you were describing, and create a dictionary from the resulting collection with a call to ToDictionary : var myHoldingsDistribution = transform // Filter out anybody that's not 1 percentile .Where(r => r.statistic == statisticFilter) // Create a dictionary out of the keys and values .ToDictionary(r => r.key, r => r.value); The two code blocks I gave you compile and run just fine given the following setup: var text = @" 1 0 Percentile 0.0535644000000 2 1 Percentile 0.0535644000000 "; var doc = XDocument.Parse(text); var rows = doc.Descendants("Table"); var keyName = "ALMRunResults_Year"; var valueName = "Return_Value"; var statisticName = "Statistic"; var statisticFilter = "1 Percentile"; Does that make sense? Edit 2 WHERE Statistic only = "0 percentile, 25 percentile, 50 percentile, 75 percentile" etc So when you were talking about 2 where clauses, you meant you want "where percentile = 0 or percentile = 25", for example? There are a few ways to do this. The simplest is probably using the Contains method: var statisticFilters = new[]{ "0 Percentile", "25 Percentile", "50 Percentile", "75 Percentile" }; ... var myHoldingsDistribution = transform .Where(r => statisticFilters.Contains(r.statistic)) .ToDictionary(r => r.key, r => r.value);
