[site]: stackoverflow
[post_id]: 4467080
[parent_id]: 
[tags]: 
Oracle XMLType generation with null values from trigger to advanced queue

Good Afternoon. I have been working with Oracle Advanced Queues to create a messaging system that we can use to determine when new lines are passed into the databse, when updates occur and when deletes occur. I am using a single consumer queue and using correlations to control what data is looked for at certain times and my payload is of xmltype. To generate the xml, I originally was using an xmlsequence to generate the message as below. 9999 S Test Location T&amp;L SA N N SYSADMIN 04/MAR/08 SA 223 Road Ridsonville 1234 08 SYSADMIN 21/APR/09 TRANS N However, it has come to my attention that xmlsequence leaves out null elements, which is not ideal, as when it comes time for the messages to be picked up at the other end, they cannot be mapped on data field easily. To try and work around this, I have tried to employ the use of DBMS_XMLGEN within my trigger, as it allows the handling of nulls in exactly the way I would want it handled. ctx := dbms_xmlgen.newContext('SELECT * FROM LOCATIONS WHERE LOCATION_ID = ' || :new.LOCATION_ID); dbms_xmlgen.setrowsettag(ctx, 'MESSAGE'); dbms_xmlgen.setrowtag(ctx, 'LOCATIONS'); dbms_xmlgen.setnullhandling(ctx, dbms_xmlgen.EMPTY_TAG); l_xml:=dbms_xmlgen.getxmltype(ctx); The problem with this approach is that it will generate an exception, as it is trying to operate on the same table that the trigger has been executed from. ORA-04091: table RIT.LOCATIONS is mutating, trigger/function may not see it So I moved on to trying to use the new and old objects to get the data out and place it in to the context, but I am running in to a few hiccups with the values that are null, as they are playing havoc with my concatenating them in to the query string. ... REFERENCING NEW AS NEW OLD AS OLD for each row DECLARE l_xml xmltype; ctx dbms_xmlgen.ctxHandle; begin ctx := dbms_xmlgen.newContext('SELECT '||:new.id||'as id, '||:new.nullfield||' as nullfield from dual'); dbms_xmlgen.setrowsettag(ctx, 'MESSAGE'); dbms_xmlgen.setrowtag(ctx, 'INT_CREDIT_CLAIMS'); dbms_xmlgen.setnullhandling(ctx, dbms_xmlgen.EMPTY_TAG); l_xml:=dbms_xmlgen.getxmltype(ctx); ... end; So my question is: How can I go about solving this so that I can see my empty elements for my xml type? I'm also open to suggestions along the way on how to solve it and will be checking back for any clarification requests.
