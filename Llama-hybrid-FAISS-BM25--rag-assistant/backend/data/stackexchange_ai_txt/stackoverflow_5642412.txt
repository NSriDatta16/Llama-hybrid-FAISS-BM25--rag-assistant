[site]: stackoverflow
[post_id]: 5642412
[parent_id]: 5639794
[tags]: 
The general solutions suggested in the comments by @Chase and @bill_080 need a little bit of enhancement to (partially) fulfil the needs of the OP. A reproducible example: require(MASS) set.seed(1) dat Compute the dissimilarity matrix of the standardised data using Eucildean distances dij and then calculate a hierarchical clustering of these data using the group average method clust Next we compute the ordering of the samples on basis of forming 3 ('k') groups from the dendrogram, but we could have chosen something else here. ord Next compute the dissimilarities between samples based on dendrogram, the cophenetic distances: coph Here are 3 image plots of: The original dissimilarity matrix, sorted on basis of cluster analysis groupings, The cophenetic distances, again sorted as above The difference between the original dissimilarities and the cophenetic distances A Shepard-like plot comparing the original and cophenetic distances; the better the clustering at capturing the original distances the closer to the 1:1 line the points will lie Here is the code that produces the above plots layout(matrix(1:4, ncol = 2)) image(as.matrix(dij)[ord, ord], main = "Original distances") image(as.matrix(coph)[ord, ord], main = "Cophenetic distances") image((as.matrix(coph) - as.matrix(dij))[ord, ord], main = "Cophenetic - Original") plot(coph ~ dij, ylab = "Cophenetic distances", xlab = "Original distances", main = "Shepard Plot") abline(0,1, col = "red") box() layout(1) Which produces this on the active device: Having said all that, however, only the Shepard plot shows the "correlation between clustered data and [dis]similarity matrix", and that is not an image plot (levelplot). How would you propose to compute the correlation between two numbers for all pairwise comparisons of cophenetic and original [dis]similarities?
