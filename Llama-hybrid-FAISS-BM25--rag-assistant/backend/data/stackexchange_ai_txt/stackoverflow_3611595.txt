[site]: stackoverflow
[post_id]: 3611595
[parent_id]: 3610688
[tags]: 
I see two issues that may be causing your problems: dialog('close') merely closes the dialog, but doesn't empty its contents. If you want to empty the dialog and return it to a clean state, you want to use dialog('destroy') . You have several load() function calls strung together, but don't have any callbacks. So your load that tries to load the content from /Events/Edit/eventID is fired, but then you immediately display the dialog again. The load() function has a callback parameter that will get executed when the content is returned from the url passed in to the load() function. This way, your dialog would display once the content has been received from the server. A way that I thought you could organize your code so that it's a little more maintainable (but it also involves breaking out some of your anonymous functions into named functions) is below: eventClick: function(event) { if(event.url) { $("#details").load(event.url, loadDialog(event.id)); //call loadDialog once you get content back from your URL } } function loadDialog(eventId) { $("#details").dialog({ title: "Event Details", buttons: { "OK" : function() { $(this).dialog("close"); }, //this just closes it - doesn't clean it up!! "Edit" : function() { $(this).dialog("destroy"); //this completely empties the dialog //and returns it to its initial state $("#details").load("/Events/Edit/" + eventId, loadEditDialog($(this))); } } }); } function loadEditDialog(theDialogContainer) { //this is a simple dialog display function -- could be inlined $(theDialogContainer).dialog({ title: "Edit" }); } I hope this helps! All the code above wasn't tested, so there could be typos -- it's mainly pseudo-code to explain my reasoning. If there are questions, let me know and I'll update my question accordingly.
