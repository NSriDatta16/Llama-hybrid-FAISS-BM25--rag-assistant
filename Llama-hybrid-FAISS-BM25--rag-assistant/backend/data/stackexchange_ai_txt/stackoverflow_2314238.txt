[site]: stackoverflow
[post_id]: 2314238
[parent_id]: 2314148
[tags]: 
I can tell about Hibernate, because this is the ORM tool I am most familiar with. I believe that other ORM tools also support similar behaviour to some extent. Hibernate solves your problem with lazy loading. You add your agent as a property to the house, and by default, when the house object is loaded, the agent is represented by a proxy object generated by Hibernate, which contains only the ID. If you query some other property of the agent, Hibernate loads the full object in the background: class House { String color; Double price; Integer squareFeet; RealEstateAgent realEstateAgent; // getters, setters,... } House house = (House) session.load(House.class, new Long(123)); // at this point, house refers to a proxy object created by Hibernate // in the background - no house or agent data has been loaded from DB house.getId(); // house still refers to the proxy object RealEstateAgent agent = house.getRealEstateAgent(); // house is now loaded, but agent not - it refers to a proxy object String name = agent.getName(); // Now the agent data is loaded from DB OTOH if you are sure that for a specific class you (almost) always need a specific property, you can specify eager loading in the ORM mapping for that property, in which case the property is loaded as soon as the containing object. In the mapping you can also specify whether you want a join query or a subselect query.
