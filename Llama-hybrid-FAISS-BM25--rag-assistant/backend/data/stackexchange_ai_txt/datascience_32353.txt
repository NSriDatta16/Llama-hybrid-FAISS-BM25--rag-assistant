[site]: datascience
[post_id]: 32353
[parent_id]: 
[tags]: 
Getting same result for all predictions in cnn

This is my first time training a model in cnn and predicting results but I am getting same value for images I have input. Here is my code import numpy as np import pandas as pd import matplotlib.pyplot as plt %matplotlib inline from keras.datasets import mnist from keras.models import Sequential from keras.layers import Dense, Dropout, Activation, Flatten from keras.optimizers import Adam from keras.layers.normalization import BatchNormalization from keras.utils import np_utils from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D from keras.layers.advanced_activations import LeakyReLU from keras.preprocessing.image import ImageDataGenerator from keras.models import Sequential from keras.layers import Convolution2D from keras.layers import MaxPooling2D from keras.layers import Flatten from keras.layers import Dense classifier=Sequential() (X_train, y_train), (X_test, y_test) = mnist.load_data() X_train = X_train.reshape(X_train.shape[0], 28, 28, 1) X_test = X_test.reshape(X_test.shape[0], 28, 28, 1) X_train = X_train.astype('float32') X_test = X_test.astype('float32') X_train/=255 X_test/=255 number_of_classes = 10 Y_train = np_utils.to_categorical(y_train, number_of_classes) Y_test = np_utils.to_categorical(y_test, number_of_classes) classifier.add(Convolution2D(32,3,3,input_shape= (28,28,1),activation='relu')) classifier.add(BatchNormalization(axis=-1)) classifier.add(MaxPooling2D(pool_size=(2,2))) classifier.add(Convolution2D(32,3,3,activation='relu')) classifier.add(BatchNormalization(axis=-1)) classifier.add(MaxPooling2D(pool_size=(2,2))) classifier.add(Flatten()) classifier.add(Dense(output_dim=256,activation='relu')) classifier.add(BatchNormalization()) classifier.add(Dense(output_dim=10,activation='softmax')) classifier.compile(optimizer='adam',loss='categorical_crossentropy',metrics= ['accuracy']) gen = ImageDataGenerator(rotation_range=8, width_shift_range=0.08, shear_range=0.3, height_shift_range=0.08, zoom_range=0.08) test_gen = ImageDataGenerator() train_generator = gen.flow(X_train, Y_train, batch_size=64) test_generator = test_gen.flow(X_test, Y_test, batch_size=64) classifier.fit_generator(train_generator, steps_per_epoch=60000, epochs=1, validation_data=test_generator, validation_steps=10000) import cv2 image = cv2.imread("pitrain.png") gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY) # grayscale ret,thresh = cv2.threshold(gray,150,255,cv2.THRESH_BINARY_INV) #threshold kernel = cv2.getStructuringElement(cv2.MORPH_CROSS,(3,3)) dilated = cv2.dilate(thresh,kernel,iterations = 13) # dilate im2,contours, hierarchy = cv2.findContours(dilated,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE) # get contours # for each contour found, draw a rectangle around it on original image for contour in contours: # get rectangle bounding contour [x,y,w,h] = cv2.boundingRect(contour) # discard areas that are too large if h>300 and w>300: continue # discard areas that are too small if h The output I am getting is array of zeros with 1 at third position. This is where I copied the contour part from https://www.quora.com/How-do-I-extract-a-particular-object-from-images-using-OpenCV Epoch is equal to 1 because I only wanted to test my model and still I got accuracy of above 99%
