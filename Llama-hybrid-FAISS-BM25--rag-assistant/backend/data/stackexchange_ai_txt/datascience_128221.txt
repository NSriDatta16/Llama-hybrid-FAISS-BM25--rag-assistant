[site]: datascience
[post_id]: 128221
[parent_id]: 
[tags]: 
Need to print kNN K's together with NNF / STFT covariance matrix

Challenge on printing print kNN K's together with NNF / STFT covariance matrix **Effort works for summary covariance but need solution to print print kNN K's together with NNF / STFT covariance matrix in a bar plot that has kNN and PCA on the x axis and the accuracy on the y axis. Question How to print kNN K's together with NNF / STFT covariance matrix such that the individual convergence prints on the accuracy of the kNN model with individual x axis on for example, PCA 5, 10, 15, 20, etc and that are in line with the NNF / STFT covariance matrix on the x axis for performance on each kNN or PCA. Here is an example of what I hope to achieve, but having problems in correctly formatting this approach: [![enter image description here][1]][1] Have the bar plot, say PCS mapped to partial (PA) and full covariance (C). Current working covariance bar plot y axis --> ...0.55|0.54.....0.65|0.63.....0.70|0.72....0.72|0.75 x axis --> ..........5...................10..................15.................20 [Note: ...for spacing here only] [![enter image description here][2]][2] [![enter image description here][3]][3] Code that generated bar chart: fig, ax = plt.subplots() bars1 = ax.bar(x - width/2, cov_diagonals, width, label='Diagonal Covariance Matrix') bars2 = ax.bar(x + width/2, cov_fulls, width, label='Full Covariance Matrix') ax.set_ylabel('Covariance') ax.set_title('Comparison of Diagonal and Full Covariance Matrices') ax.set_xticks(x) ax.set_xticklabels(methods) ax.legend() plt.show() Utilizing several custom code for the following functions: Base Functions from scipy.signal import stft from sklearn.decomposition import NMF def set_dft_matrix(dim_size): matrix = np.array([[np.exp(-1j * (2 * np.pi * f * n / dim_size)) for f in range(0, dim_size)] for n in range(0, dim_size)]) return matrix def set_blackman_window(signal, N, hop): matrix_blackman = np.blackman(N) data = [] window_hop = 0 while window_hop + N Data Samples 0.04931641, 0.01171875], [-0.00830078, 0.02441406, -0.015625 , ..., -0.10400391, 0.03320312, -0.02587891], [ 0.00634766, 0.0546875 , 0.01806641, ..., -0.15332031, -0.03222656, -0.01660156]], [[ 0.03466797, 0.01660156, -0.10742188, ..., -0.11669922, -0.00048828, -0.05615234], [-0.02197266, -0.00390625, -0.02685547, ..., -0.10595703, 0.04931641, -0.0546875 ], [-0.00146484, 0.03271484, -0.05224609, ..., -0.11132812, 0.02783203, -0.04345703]], [[-0.02441406, 0.01611328, -0.14013672, ..., -0.06933594, -0.01806641, -0.17041016], [-0.04882812, -0.01464844, -0.07080078, ..., -0.07666016, 0.07421875, -0.10498047], [-0.03369141, -0.01855469, -0.11474609, ..., -0.12646484, 0.07519531, -0.07617188]] [1]: https://i.stack.imgur.com/uHa7T.png [2]: https://i.stack.imgur.com/A5IEm.png [3]: https://i.stack.imgur.com/lOm9H.png
