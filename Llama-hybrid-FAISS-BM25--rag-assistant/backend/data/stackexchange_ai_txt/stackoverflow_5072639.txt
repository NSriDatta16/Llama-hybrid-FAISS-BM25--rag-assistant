[site]: stackoverflow
[post_id]: 5072639
[parent_id]: 
[tags]: 
Howto tell if generated event is sent by it's own class

Is there a way to tell if an event is raised in it's own caller. Essentially I have 1.N classes, all essentially the same, each run by a thread. I have an enum which differentiates the basic types. I have a delegate in the top level class, ExecutionState, which creates all the sub classes, (stores them in a collection). I have the following in each class. ExecutionState is the top level creator class which contains the delegate and the associated event as public void Subscribe(ExecutionState ExecState) { if (this.ExpressionInstance.IsMultiLine) { ExecState.MultiMatchEvent += new ExecutionState.MultiMatch(Signal); } } private void Signal(int ProcessorPosition) { } private void SendEvent(ExecutionState.MultiMatch Match) { if ((Status & RuleState.HasEnd) == RuleState.HasEnd) { Match(CurrentProcessorNumber); } } ExecutionState is the top level creator class which contains the delegate and the associated event as: public delegate void MultiMatch(int ProcessorPosition); public event MultiMatch MultiMatchEvent; When I call SendEvent, I assume an event will arrive at Signal, at its own class. Of course, Subscribe only needs to be called when the specific conditions I've setup in ExecutionState, exists, i.e. in 1 class, which won't be the event sender class (by design). I know it's probably been answered many times in the past. Is it a case of doing mechanically, perhaps setting a flag in the event parameters to define it as coming from it's own class, or is their a more elegant way of doing it. Thanks. Bob.
