[site]: crossvalidated
[post_id]: 245672
[parent_id]: 
[tags]: 
Complex inputs to neural networks

I'm quite new to machine learning and is trying to predict waiting times in a telephone-queue using a feedforward neural network. I have a lot of historical data for supervised training and i'm trying to map the data to an input-layer. Each person in the queue have some properties and are being prioritized by the secretaries based on these properties(meaning that the queue isn't FIFO). personInQueue { memberShip: 1, //platinum-membership seniority: 2, // an important customer minutesWaited: 12 } My initial thought of mapping the data to an input layer was to simply make every property available as an input. That would look something like the following: Inputs: PersonImCurrentlyTryingToEstimate-Membership PersonImCurrentlyTryingToEstimate-Seniority PersonImCurrentlyTryingToEstimate-MinutesWaited OtherPersonInTheQueue1-Membership OtherPersonInTheQueue1-Seniority OtherPersonInTheQueue1-MinutesWaited OtherPersonInTheQueue2-Membership OtherPersonInTheQueue2-Seniority OtherPersonInTheQueue2-MinutesWaited ... But the network can't have a flexible amount of inputs. Is this at all the right direction to go, or could it be that a neural network simply isn't the right approach, or should I do some sort of data-transformation? EDIT: Another approach could(as suggested by Hugh) be to use summery statistics: Inputs: PersonImCurrentlyTryingToEstimate-Membership PersonImCurrentlyTryingToEstimate-Seniority PersonImCurrentlyTryingToEstimate-MinutesWaited AmountOfPeopleWithSeniority1 MeanOfWaitingTimeForPeopleWithSeniority1 SDOfWaitingTimeForPeopleWithSeniority1 AmountOfPeopleWithSeniority2 MeanOfWaitingTimeForPeopleWithSeniority2 SDOfWaitingTimeForPeopleWithSeniority2 AmountOfPeopleWithSeniority3 MeanOfWaitingTimeForPeopleWithSeniority3 SDOfWaitingTimeForPeopleWithSeniority3
