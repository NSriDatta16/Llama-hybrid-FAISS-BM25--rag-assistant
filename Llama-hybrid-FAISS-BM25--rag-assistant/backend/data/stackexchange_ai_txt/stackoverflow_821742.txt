[site]: stackoverflow
[post_id]: 821742
[parent_id]: 521147
[tags]: 
I've had this same problem. The issue is indeed that a left button click on the window caption starts a drag, and thus mouse capture, which prevents WM_NCLBUTTONUP from arriving. The solution is to override WM_NCHITTEST: LRESULT CALLBACK WndProc(HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam) { switch (nMsg) { ... case WM_NCHITTEST: Point p(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam); ScreenToClient(p); if (myButtonRect.Contains(p)) { return HTBORDER; } break; } return DefWindowProc(hWnd, nMsg, wParam, lParam); } So essentially you inform Windows that the area occupied by your button is not part of the window caption, but a non-specific part of the non-client area (HTBORDER). Footnote: If you have called SetCapture() and not yet called ReleaseCapture() when you expect the WM_NCLBUTTONDOWN message to come in, it won't arrive even with the above change. This can be irritating since it's normal to capture the mouse during interaction with such custom buttons so that you can cancel the click/highlight if the mouse leaves the window. However, as an alternative to using capture, you might consider SetTimer()/KillTimer() with a short (eg. 100 ms) interval, which won't cause WM_NCLBUTTONUP messages to vanish.
