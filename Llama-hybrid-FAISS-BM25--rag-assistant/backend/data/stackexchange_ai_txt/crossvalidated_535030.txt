[site]: crossvalidated
[post_id]: 535030
[parent_id]: 534431
[tags]: 
You can calculate precision per class then take the average. from sklearn.metrics import precision_recall_curve from sklearn.metrics import average_precision_score # For each class precision = dict() recall = dict() average_precision = dict() for i in range(n_classes): precision[i], recall[i], _ = precision_recall_curve(Y_test[:, i], y_score[:, i]) average_precision[i] = average_precision_score(Y_test[:, i], y_score[:, i]) # A "micro-average": quantifying score on all classes jointly precision["micro"], recall["micro"], _ = precision_recall_curve(Y_test.ravel(), y_score.ravel()) average_precision["micro"] = average_precision_score(Y_test, y_score, average="micro") print('Average precision score, micro-averaged over all classes: {0:0.2f}' .format(average_precision["micro"])) Check these sklearn Precision-Recall examaples .
