[site]: stackoverflow
[post_id]: 1052383
[parent_id]: 1052298
[tags]: 
If the HTML you are parsing is valid and always follows a known standard format, you can use non-greedy patterns to remove most of what you don't want. These samples will have to be modified based on the tool/framework you're using to handle regular expressions. I am not escaping special characters for brevity. To match any paragraph tags: (.*?) You would replace these matches with $1 (or whatever your syntax requires to access groups). It's important to use non-greedy (?) patterns to avoid accidentally matching two unrelated start/end tags. For example: (.*) Would behave very differently. In the case of the following example HTML, it would not correctly match two paragraphs: Lorem ipsum. Lorem ipsum. Instead, it would match " Lorem ipsum. " as the first portion, which would result in losing content. If you need to match paragraphs with specific classes, you could use something like this: (.*?) Where things get sticky is when you start working with non-standardized HTML. For example, this is all valid HTML, but the pattern to clean it up would be ugly: no class no quotes double quotes single quotes space in closing tag no closing tag
