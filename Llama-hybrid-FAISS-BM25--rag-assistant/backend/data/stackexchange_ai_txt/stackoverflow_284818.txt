[site]: stackoverflow
[post_id]: 284818
[parent_id]: 284428
[tags]: 
If I had to think of a reason to avoid them, I'd say don't use it for computed attributes where the computation involved is significant. Properties encourage code like: if (foobar.weight > 100) { goober.capacity = foobar.weight; } In this example, foobar.weight is called twice. If it's just returning a cached value, no problem. But if it needs to block the thread while it deploys a robot to manually weigh the foobar each time, the above snipped of code would waste two robot deployments when only one is needed. In such cases, I'd recommend NOT using a property, and also naming the method differently, so that the code would look more like: int w = [foobar computeWeight]; if (w > 100) { goober.capacity = w; } With a name like computeWeight it is easier to remember that it is a long running operation.
