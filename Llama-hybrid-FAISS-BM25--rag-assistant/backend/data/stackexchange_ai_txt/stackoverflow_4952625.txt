[site]: stackoverflow
[post_id]: 4952625
[parent_id]: 4947891
[tags]: 
The Dimension Problem with CSS3 Rotation When a DOM element is rotated using the CSS3 transform properties (or the equivalent browser specific routines), the object is rotated to a given angle, but the computed width and height are left untouched. Presumably because the transformations happen after all other redraw events and the original size variables are left as they were. Rotation does not alter the actual size of an object, however, in the HTML DOM, all objects must be within a rectangular bounding box; the size of this bounding box will alter to accommodate the new extent of the rotated image. Routines that calculate the position of elements in the DOM tend to rely solely on the position of the element (left & top), and the size of the element (width & height), as all elements are rectangles, this is fine, the rectangular bounding box is identical to the object itself. When the item is rotated this ceases to be true, so routines no longer work correctly, as the width and height of the bounding box are potentially different to the object itself. Rotation with Bounding Box The bounding box width and height is simple enough to calculate mathematically, there was a question some time ago on this topic , with an answer given by casablanca stating the mathematics to calculate the new widths and heights. (He also states how to calculate the new positions, but with CSS rotatation, unless you change the origin of rotation, the left/top stay the same.) The maximum extent is given by the diagonal of a rectangle: Based on the code the OP gave above, I have created a little demonstration of this in action - note the size of the bounding box as it rotates, and how the .draggable() container fails to contain the item over the extent to which it is beyond it's original dimensions. Square Demo: http://jsfiddle.net/pkHFZ/ Rectangular Demo: http://jsfiddle.net/pkHFZ/2/
