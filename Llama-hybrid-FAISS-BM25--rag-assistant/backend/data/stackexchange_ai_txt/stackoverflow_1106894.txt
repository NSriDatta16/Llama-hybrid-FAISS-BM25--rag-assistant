[site]: stackoverflow
[post_id]: 1106894
[parent_id]: 1105522
[tags]: 
The old fashioned view: 'it' is interactive computation with symbolic expressions . Lisp enables easy representation of all kinds of expressions: english sentence (the man saw the moon) math (2 * x ** 3 + 4 * x ** 2 - 3 * x + 3) rules ( and also Lisp itself (mapcar (function sqr) (quote (1 2 3 4 5))) and many many many more. Lisp now allows to write programs that compute with such expressions : (translate (quote (the man saw the moon)) (quote german)) (solve (quote (2 * x ** 3 + 4 * x ** 2 - 3 * x + 3)) (quote (x . 3))) (show-all (quote ( Interactive means that programming is a dialog with Lisp . You enter an expression and Lisp computes the side effects (for example output) and the value. So your programming session is like 'talking' with the Lisp system. You work with it until you get the right answers. What are these expressions? They are sentences in some language. They are part descriptions of turbines. They are theorems describing a floating point engine of an AMD processor. They are computer algebra expressions in physics. They are descriptions of circuits. They are rules in a game. They are descriptions of behavior of actors in games. They are rules in a medical diagnosis system. Lisp allows you to write down facts, rules, formulas as symbolic expressions. It allows you to write programs that work with these expressions. You can compute the value of a formula. But you can equally easy write programs that compute new formulas from formulas (symbolic math: integrate, derive, ...). That was Lisp designed for. As a side effect Lisp programs are represented as such expressions too. Then there is also a Lisp program that evaluates or compiles other Lisp programs. So the very idea of Lisp, the computation with symbolic expressions, has been applied to Lisp itself. Lisp programs are symbolic expressions and the computation is a Lisp expression. Alan Kay (of Smalltalk fame) calls the original definition of Lisp evaluation in Lisp the Maxwell's equations of programming .
