[site]: stackoverflow
[post_id]: 3339083
[parent_id]: 
[tags]: 
How does temporary storage work in C when a function returns?

I know C pretty well, however I'm confused of how temporary storage works. Like when a function returns, all the allocation happened inside that function is freed (from the stack or however the implementation decides to do this). For example: void f() { int a = 5; } // a's value doesn't exist anymore However we can use the return keyword to transfer some data to the outside world: int f() { int a = 5; return a; } // a's value exists because it's transfered to the outside world Please stop me if any of this is wrong. Now here's the weird thing, when you do this with arrays , it doesn't work. int []f() { int a[1] = {5}; return a; } // a's value doesn't exist. WHY? I know arrays are only accessible by pointers, and you can't pass arrays around like another data structure without using pointers. Is this the reason you can't return arrays and use them in the outside world? Because they're only accessible by pointers? I know I could be using dynamic allocation to keep the data to the outside world, but my question is about temporary allocation. Thanks!
