[site]: stackoverflow
[post_id]: 372962
[parent_id]: 372933
[tags]: 
Any time you allow a user to enter data into a query string like this you are vulnerable to SQL injection and it should be avoided like the plague! You should be very careful how you allow your searchStrings[] array to be populated. You should always append variable data to your query using parameter objects: + field1 like @PropertyVal Or field2 like @PropertyVal Or field3 like @PropertyVal etc... And if you're using SQL Server for example Query.Parameters.Add(new SqlParameter("PropertyVal", '%' + searchStrings[i] + '%')); Be very wary how you build a query string that you're going to run against a production server, especially if it has any data of consequence in it! In your example you mentioned Little Bobby Tables Robert');DROP TABLE students;-- And cited that because it needs white space, you couldn't do it - but if the malicious user encoded it using something like this: Robert');Exec(Replace('Drop_Table_students','_',Char(32)));-- I would say - better to be safe and do it the right way. There's no simple way to make sure you catch every scenario otherwise...
