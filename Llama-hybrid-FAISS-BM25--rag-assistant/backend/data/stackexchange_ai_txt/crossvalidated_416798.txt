[site]: crossvalidated
[post_id]: 416798
[parent_id]: 
[tags]: 
Formulating a mixed integer programming problem with a binary maximization term

Real-world description of the problem: In the US, funding for school lunch programs is given to local school districts by the Federal government. If >=40% of students in a school or group of schools is low income then all students in the school get free lunch automatically. A district has many schools (50 in a mid-sized district up to 1800 in the largest, NYC) and can group them in any way and form any number of groups to maximize the number of students provided lunch. For each group, the low income percentage is calculated by dividing all low income students in a group by the total number of students in the group (it is a weighted average not a simple average of the low income percentage.) Example: School A: total students = 1000, low income students = 500, percent = 50% School B: total students = 500, low income students = 100, percent = 20% School C: total students = 800, low income students = 312, percent = 39% No grouping: {A}, {B}, {C} Free lunch schools: A Number of free lunch students: 1000 Number of low income students with free lunch: 500 Grouping all: {A, B, C} Low income percent= 39.6 Free lunch schools: 0 Number of free lunch students: 0 Number of low income students with free lunch: 0 Group: {A, B}, {C} Low income percent= 40.0%, 39% Free lunch schools: 2 Number of free lunch students: 1500 Number of low income students with free lunch: 600 Group: {A, C}, {B} Low income percent= 45%, 20% Free lunch schools: 2 Number of free lunch students: 1800 Number of low income students with free lunch: 812 Group: {B, C}, {A} Low income percent= 31%, 50% Free lunch schools: 1 Number of free lunch students: 1000 Number of low income students with free lunch: 500 Abstract description of the problem There are n elements s where: $$ \{ S \in \mathbb{Z} | s >0, ( s_{1} \ldots s_{n} ) \} $$ Each element, s has two values t and l: $$ \{ t \in \mathbb{Z} | t > 0 \} $$ $$ \{ l \in \mathbb{Z} | l > 0, l \leq t \} $$ Each element must be placed into exactly 1 group. A group can have between 0 and all elements. $$ \{ G \in \mathbb{Z} | g >0, g \leq S_{n}, ( g_{1} \ldots g_{n} ) \} $$ Scoring: if the sum(l)/sum(t) in a group >= 0.4 then the score for that group is sum(t), else it is 0 $$ g(l,t) = \left\{\begin{array}{lr} \sum t, & \text{for } \frac{\sum l}{\sum t} \geq 0.4\\ 0, & \text{for } \frac{\sum l}{\sum t} Objective: Maximize the sum of the group scores $$ \begin{array}{lr} \text{maximize} & \sum_{i=1}^{g_{n}} g(l,t) \end{array} $$ Question This seems to be a mixed integer linear program problem. However, the maximization function is more complicated than I have seen in most examples. How would I formulate this for a solver like OR-tools for python?
