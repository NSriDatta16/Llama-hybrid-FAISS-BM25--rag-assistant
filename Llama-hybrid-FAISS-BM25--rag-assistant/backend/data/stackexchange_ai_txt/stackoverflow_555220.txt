[site]: stackoverflow
[post_id]: 555220
[parent_id]: 554868
[tags]: 
You can design your classes to have their dependencies injected (via a constructor or properties) without having to use a dependency injection framework. Just instantiate the dependency yourself and pass it in or grab it from a service locator or registry class that you toss together. But instead of having the class itself resolve its dependencies by calling the service locator, have the class that's instantiating the class resolve the dependencies for it. You maintain a testable class design without the overhead and complexity of another library and framework. I for one know that whenever I've tried using a DI framework, that's essentially all that I really ended up using it for. I've also seen cases where people wrap their DI container in a static IoC class to build up objects way down in the hierarchy, and in my mind this sort of defeats the purpose; isn't it just right back to being a service locator at that point? I guess I don't quite get the difference in practical usage. I say shenanigans, you're using reflection and taking a big start-up hit to do the same thing. You can't eliminate the dependencies, but you sure can obfuscate the heck out of them in an XML configuration file. At some point something is going to call new . Are you really going to swap out an implementation of an interface without recompiling or retesting your application anyway? If not, keep it simple. It's nice to click "Find Definition" and see something actually getting instantiated in a service locator class with explicit singleton or ThreadStatic or some other behavior. Just my two cents--I'm still pretty new to DI frameworks, but that's my current train of thought: inversion of control is useful, but the actual frameworks themselves probably only for very large projects.
