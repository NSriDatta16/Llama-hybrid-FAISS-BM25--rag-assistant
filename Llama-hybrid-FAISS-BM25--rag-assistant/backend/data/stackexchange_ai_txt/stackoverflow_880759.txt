[site]: stackoverflow
[post_id]: 880759
[parent_id]: 880652
[tags]: 
It's an interesting approach. You may want to pay attention to two things: Like Philip mentioned, when you have a lot of methods to define, you will end up with a big constructor. This will cause deep coupling between classes. One more or one less delegate will require everyone to modify the signature. You should consider making them public properties and using some DI framework. Breaking down the implementation to the method level can be too granular sometimes. With class/interface, you can group methods by the domain/functionality. If you replace them with delegates, they can be mixed up and become difficult to read/maintain. It seems the number of delegates is an important factor here.
