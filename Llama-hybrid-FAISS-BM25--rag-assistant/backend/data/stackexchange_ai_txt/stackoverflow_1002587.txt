[site]: stackoverflow
[post_id]: 1002587
[parent_id]: 
[tags]: 
Can I use the Curiously Recurring Template Pattern here (C++)?

I have a C++ application that can be simplified to something like this: class AbstractWidget { public: virtual ~AbstractWidget() {} virtual void foo() {} virtual void bar() {} // (other virtual methods) }; class WidgetCollection { private: vector widgets; public: void addWidget(AbstractWidget* widget) { widgets.push_back(widget); } void fooAll() { for (unsigned int i = 0; i foo(); } } void barAll() { for (unsigned int i = 0; i bar(); } } // (other *All() methods) }; My application is performance-critical. There are typically thousands of widgets in the collection. The classes derived from AbstractWidget (of which there are dozens) typically leave many of the virtual functions not overridden. The ones that are overridden typically have very fast implementations. Given this, I feel I can optimize my system with some clever meta-programming. The goal is to leverage function inlining and to avoid virtual function calls, while keeping the code managable. I've looked into the Curiously Recurring Template Pattern (see here for description). This seems to almost do what I want, but not quite. Is there any way to make the CRTP work for me here? Or, is there any other clever solution anyone can think of?
