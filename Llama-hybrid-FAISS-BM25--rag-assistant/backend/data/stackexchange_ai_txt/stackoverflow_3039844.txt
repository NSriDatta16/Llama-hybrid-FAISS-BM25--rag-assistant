[site]: stackoverflow
[post_id]: 3039844
[parent_id]: 3038606
[tags]: 
You want Exuberant ctags (old ctags doesn't generate tags for Python). Once you've installed (the way to do that depends on your platform), run it on your files: $ /usr/local/bin/ctags *py (you can run it multiple times to append tags to an existing tag file, have it recurse into subdirectories, etc, all with command-line options) and it makes a tags file like the following (for brevity I'm using a single Python file with one class defining a single method): $ cat tags !_TAG_FILE_FORMAT 2 /extended format; --format=1 will not append ;" to lines/ !_TAG_FILE_SORTED 1 /0=unsorted, 1=sorted, 2=foldcase/ !_TAG_PROGRAM_AUTHOR Darren Hiebert /dhiebert@users.sourceforge.net/ !_TAG_PROGRAM_NAME Exuberant Ctags // !_TAG_PROGRAM_URL http://ctags.sourceforge.net /official site/ !_TAG_PROGRAM_VERSION 5.7 // Foo a.py /^class Foo(object):$/;" c amethod a.py /^ def amethod(self): pass$/;" m class:Foo Now, quoting this article : Let say when you discover a function call which you wanna see the definition, simply point the cursor to that function and press ctrl ] and it will bring you there. If you want to go back to where you came from, simply press ctrl t. Instead of ctrl t, I like to use ctrl i and ctrl o to travel to forward and backward of the check points. Also, control-P does (some attempt at) code completion for identifiers found in tags . ( :help tags in vim will give you more details).
