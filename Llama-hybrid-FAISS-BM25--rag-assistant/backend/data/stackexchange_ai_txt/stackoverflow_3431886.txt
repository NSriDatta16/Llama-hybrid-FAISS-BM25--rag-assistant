[site]: stackoverflow
[post_id]: 3431886
[parent_id]: 3431654
[tags]: 
Michal's answer is excellent, but I thought I'd add a couple other neat examples I've personally found helpful/interesting. The first is a post (and code) about functional fluid dynamics by Lau Jenson. Though he definitely goes the mutable route for speed here, the style is rather functional. I'd bet by Clojure 1.3 this could be done (mostly!) immutably with reasonable performance. The next is a simple Snake game implemented in Clojure. Easy enough to read though in an hour or so, and the style is really pleasant and cohesive. Also, some neat code to look at (I think!) is code modeling neural networks. Jeff Foster has some single layer perceptron code, and some more idiomatic revisions of the code . Worth looking at, even if you're not acquainted with NNs. He also has some more recent posts regarding fluid dynamics, though this time in Haskell. ( Part I and Part II ) Also fun, I think, is his implementation of the Game of Life (& Part II ). Finally, as Michal mentioned before me, Brian Carper is working on a RPG in Clojure . he recently posted some artwork for the game, so I'm betting it's still being worked on ;) I love using the sequence libraries for working with tons of data; it feels more natural using abstractions like map and reduce , and fun, handy tools like juxt rather than simple imperative iterations. You do pay a tax, I've found, by using Clojure/functional langs in reimplementing well-known and well-implemented imperative algorithms. Have fun!
