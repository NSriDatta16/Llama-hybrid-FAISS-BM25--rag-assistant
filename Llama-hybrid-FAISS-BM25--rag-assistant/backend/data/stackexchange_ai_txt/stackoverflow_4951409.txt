[site]: stackoverflow
[post_id]: 4951409
[parent_id]: 4951260
[tags]: 
Meaningful ids are not against "db design policies"! Quite the opposite, it's exactly what the real relational databases were about from the day one. If your data contains some combination of attributes that is - from the business point of view - unique, NOT making it an ID will usually break the Boyce-Codd normal form. And bring the anomalies that go with it. Unless the information encoded in ID is redundant with what's in other fields, just use it. If it is redundant, make a multiple column primary key. They are not very handy with ORMs, but in data driven applications they are a blessing. ADDENDUM: (after the edit of original question) In your case, for a data driven application, I would do: Type ========== Fruit Veggie Product ========== Apple Fruit Banana Fruit Orange Fruit Lettuce Veggie Onion Veggie Carrot Veggie Isle ========== 4 5 Shelf ========== top bottom Location ========== 4 top 4 bottom 5 top 5 bottom ProductLocation ========== Apple 4 top Banana 4 top With such setup: the data is normalized you can SEE the location of any product in the ProductLocation table - you can even see the shelf no surrogates depending on types of queries, this structure can actually perform better than other propositions, because it requires less joins (or it may be slower, because it requires more storage). this will work best with RDBMSs that support an "on replace update" constraint. if you want to treat names as ids, you probably need to add some column like 'display name". That's because people want to change what's displayed more often than they want to change identity of thigns.
