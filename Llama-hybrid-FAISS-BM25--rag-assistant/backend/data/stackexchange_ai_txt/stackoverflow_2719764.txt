[site]: stackoverflow
[post_id]: 2719764
[parent_id]: 2719466
[tags]: 
So the application that you have designed has what I would say is one major gap in the design principal: It assumes a single usage dataset. By this I mean that it assumes, there are only two possible tasks, each has a hard coded price (something that in the business world simply doesn't exist), and each task calculates is "hours" deterministically against against a constant set of sizes. My advise is to make almost all of this configurable either by use of a database to store new possible tasks/properties/prices/hourly ratios/sizes or by some other storage means and write a configuration form for managing it. This will almost immediately remove the design problem you are implying by the fact that you remove all hard coded domain contexts and instead set a configuration precedent that can then be exposed via API if someone doesn't like your configuration method or wants to use this in some other way. Edit: I wanted to comment this below but ran out of room: extend the depth of your xml to meaningfully represent the larger datastructures (WritingTask and AnalysisTask) as well as their component parts (properties and methods). The methods can often be defined by a set of rules. You can tokenize properties and rules so they can be interacted with independently. Example: Anyway it is entirely too late in the morning for me to try this any further but I will follow up tomorrow with you. By setting resultant properties and associating methods in configuration with rules, you leave the reconciliation of the if's to your dataset (it should know best) and tune your code to interpret this data accurately. It stays flexible enough to handle growth (through a sudo language for dataset creation) but remains unchanged internally without great need to improve a more universal operation.
