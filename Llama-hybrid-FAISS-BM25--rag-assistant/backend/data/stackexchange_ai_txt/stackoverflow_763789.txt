[site]: stackoverflow
[post_id]: 763789
[parent_id]: 762167
[tags]: 
It looks to me your problem is in this line; repositoryMock.Setup( r => r.Add(It.IsAny ())).Callback(() => match.Id = 1); What you're actually doing here is setting the id of the first match object you have declared in your test, NOT the new match created in your service. Because the Match object you will be supplying to the Repository is created internally, I can't think of an easy way to reference it in your Test method to setup a callback for it. To me, this is a sign you may be trying to test too much in one unit test. I think you should simply test that the Add method is called and write a separate test to ensure that it works as exepected. I propose something like this; [Test] public void ServiceAddsNewMatchToRepository() { var repositoryMock = new Mock (); bool addCalled = false; repositoryMock .Expect(r => r.Add(It.Is (x => x.Id == 0)) .Callback(() => addCalled = true); var serviceFacade = new DefaultServiceFacade(repositoryMock.Object); serviceFacade.CreateMatch(User); Assert.True(addCalled); } .... [Test] public void AddingANewMatchGeneratesANewId() { var match = new Match(user); var matchRepository = new MatchRepository(); var returnedMatch = matchRepository.Add(match); Assert.That(returnedMatch.Id, Is.GreaterThan(0)); }
