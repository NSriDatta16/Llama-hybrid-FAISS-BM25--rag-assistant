[site]: stackoverflow
[post_id]: 940345
[parent_id]: 79999
[tags]: 
This question seems to keep appearing with different wording - maybe there are different constituencies within StackOverflow. Flow-Based Programming (FBP) is a concept/methodology that has been around for over 30 years, and is being used to handle most of the batch processing at a major Canadian bank. It has thread-based implementations in Java and C#, although earlier implementations were fiber-based (C++, and mainframe Assembler - the one used at the bank). Most approaches to the problem of taking advantage of multicore involve trying to take a conventional single-threaded program and figure out which parts can run in parallel. FBP takes a different approach: the application is designed from the start in terms of multiple "black-box" components running asynchronously (think of a manufacturing assembly line). Since the interface between components is data streams, FBP is essentially language-independent, and therefore supports mixed-language applications, and domain-specific languages. For the same reason, side-effects are minimized. It could also be described as a "share nothing" model, and a MOM (message-oriented middleware). MapReduce seems to be a special case of FBP. FBP differs from Erlang mostly in that Erlang operates in terms of many short-lived threads, so green threads are more appropriate there, whereas FBP uses fewer (typically a few 10s to a few hundred) longer-lived threads. For a piece of a batch network that has been in daily use for over 30 years, see part of batch network . For a high-level design of an interactive app, see Brokerage app high-level design . FBP has been found to result in much more maintainable applications, and improved elapsed times - even on single core machines!
