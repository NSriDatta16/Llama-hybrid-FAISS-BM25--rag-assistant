[site]: datascience
[post_id]: 37841
[parent_id]: 
[tags]: 
Keras CNN TypeError: float() argument must be a string or a number, not 'JpegImageFile'

I try to set up a multiclass CNN with Keras which relies on ImageDataGenerator and flow_from_directory . Unfortunately I receive the following error: Traceback (most recent call last): File "/home/torben/.local/lib/python3.6/site-packages/keras/utils/data_utils.py", line 578, in get inputs = self.queue.get(block=True).get() File "/usr/lib/python3.6/multiprocessing/pool.py", line 644, in get raise self._value File "/usr/lib/python3.6/multiprocessing/pool.py", line 119, in worker result = (True, func(*args, **kwds)) File "/home/torben/.local/lib/python3.6/site-packages/keras/utils/data_utils.py", line 401, in get_index return _SHARED_SEQUENCES[uid][i] File "/home/torben/.local/lib/python3.6/site-packages/keras_preprocessing/image.py", line 1296, in __getitem__ return self._get_batches_of_transformed_samples(index_array) File "/home/torben/.local/lib/python3.6/site-packages/keras_preprocessing/image.py", line 1773, in _get_batches_of_transformed_samples x = img_to_array(img, data_format=self.data_format) File "/home/torben/.local/lib/python3.6/site-packages/keras_preprocessing/image.py", line 423, in img_to_array x = np.asarray(img, dtype=backend.floatx()) File "/home/torben/.local/lib/python3.6/site-packages/numpy/core/numeric.py", line 501, in asarray return array(a, dtype, copy=False, order=order) TypeError: float() argument must be a string or a number, not 'JpegImageFile' The above exception was the direct cause of the following exception: Traceback (most recent call last): File "cnn.py", line 145, in Cnn() File "cnn.py", line 23, in __init__ self.train_model() File "cnn.py", line 69, in train_model validation_steps=50) File "/home/torben/.local/lib/python3.6/site-packages/keras/legacy/interfaces.py", line 91, in wrapper return func(*args, **kwargs) File "/home/torben/.local/lib/python3.6/site-packages/keras/engine/training.py", line 1415, in fit_generator initial_epoch=initial_epoch) File "/home/torben/.local/lib/python3.6/site-packages/keras/engine/training_generator.py", line 230, in fit_generator workers=0) File "/home/torben/.local/lib/python3.6/site-packages/keras/legacy/interfaces.py", line 91, in wrapper return func(*args, **kwargs) File "/home/torben/.local/lib/python3.6/site-packages/keras/engine/training.py", line 1469, in evaluate_generator verbose=verbose) File "/home/torben/.local/lib/python3.6/site-packages/keras/engine/training_generator.py", line 327, in evaluate_generator generator_output = next(output_generator) File "/home/torben/.local/lib/python3.6/site-packages/keras/utils/data_utils.py", line 584, in get six.raise_from(StopIteration(e), e) File " ", line 3, in raise_from StopIteration: float() argument must be a string or a number, not 'JpegImageFile' This is my Keras code: train_datagen = ImageDataGenerator(rescale=1. / 255) test_datagen = ImageDataGenerator(rescale=1. / 255) train_generator = train_datagen.flow_from_directory('../image-classifier-files/train', target_size=(constants.IMG_SIZE, constants.IMG_SIZE), batch_size=32) validation_generator = test_datagen.flow_from_directory('../image-classifier-files/val', target_size=(constants.IMG_SIZE, constants.IMG_SIZE), batch_size=32) model = models.Sequential() model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(constants.IMG_SIZE, constants.IMG_SIZE, 3))) model.add(layers.MaxPooling2D((2, 2))) model.add(layers.Dropout(0.25)) model.add(layers.Conv2D(64, (3, 3), activation='relu')) model.add(layers.MaxPooling2D((2, 2))) model.add(layers.Conv2D(64, (3, 3), activation='relu')) model.add(layers.MaxPooling2D((2, 2))) model.add(layers.Dropout(0.25)) model.add(layers.Conv2D(128, (3, 3), activation='relu')) model.add(layers.MaxPooling2D((2, 2))) model.add(layers.Conv2D(128, (3, 3), activation='relu')) model.add(layers.MaxPooling2D((2, 2))) model.add(layers.Dropout(0.25)) model.add(layers.Flatten()) model.add(layers.Dense(1024, activation='relu')) model.add(layers.Dropout(0.5)) model.add(layers.Dense(self.simterm_count, activation='sigmoid')) model.summary() model.compile(loss='binary_crossentropy', optimizer=optimizers.Adam(), metrics=['acc']) history = model.fit_generator(train_generator, steps_per_epoch=100, epochs=30, verbose=2, validation_data=validation_generator, validation_steps=50)
