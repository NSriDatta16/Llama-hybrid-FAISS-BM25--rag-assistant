[site]: stackoverflow
[post_id]: 4925954
[parent_id]: 
[tags]: 
The NSManagedObject with ID:[...] has been invalidated

I am building an app with use of core data. My RootViewController, loaded by the appDelegate is mostly stock from the template. However I have changed the entity name to "Clocks" and added a bunch of rows. My RootViewController presents an MVC which has a UINavigationController. When I save data to my database the UINavigationController class saved the data using [[UIApplication sharedApplication]delegate] to access my appDelegate which actually preforms the save action. Editing data goes the same way, but instead of calling the insert function in my app delegate, it calls the update function. Now, all this goes fine.. perfectly actually. BUT... after a few times just opening edit and saving in the view my app crashes. It does this both in the simulator and on my iPhone 4. This is an example of what I mean (Movie): http://dl.dropbox.com/u/3077127/has_been_invalidated.mov This is the code of my RootViewController.m: #import "RootViewController.h" #import "RootViewControllerClockCell.h" #import "RootViewControllerClockCellFooter.h" #import "configuration.h" #import "AddClockViewController.h" #import "clockAppDelegate.h" #import "AddClockNavigationController.h" @interface RootViewController () - (void)configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath; @end @implementation RootViewController @synthesize fetchedResultsController=fetchedResultsController_, managedObjectContext=managedObjectContext_; #pragma mark - #pragma mark View lifecycle - (void)viewDidLoad { [super viewDidLoad]; [self setTitle:NSLocalizedString(@"Alarms", @"AddClockNavigationController")]; // Set up the edit and add buttons. self.navigationItem.leftBarButtonItem = self.editButtonItem; UIBarButtonItem *addButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(showAddAlarmView)]; self.navigationItem.rightBarButtonItem = addButton; [addButton release]; [self.tableView setSeparatorStyle:UITableViewCellSeparatorStyleNone]; [self.tableView setBackgroundColor:[UIColor clearColor]]; [self.tableView setBackgroundView:[[[UIImageView alloc] initWithImage:[UIImage imageNamed:@"clockTableBackground"]] autorelease]]; [self.tableView setAllowsSelectionDuringEditing:YES]; if (managedObjectContext_ == nil) { managedObjectContext_ = [(ClockAppDelegate *)[[UIApplication sharedApplication] delegate] managedObjectContext]; NSLog(@"After managedObjectContext: %@", managedObjectContext_); } locationManager = [[CLLocationManager alloc] init]; locationManager.delegate=self; locationManager.desiredAccuracy=kCLLocationAccuracyBest; [locationManager startUpdatingLocation]; } - (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation { location = newLocation.coordinate; [locationManager stopUpdatingLocation]; [self.tableView reloadData]; } - (void)viewWillDisappear:(BOOL)animated { [locationManager stopUpdatingLocation]; [super viewWillDisappear:animated]; } // Implement viewWillAppear: to do additional setup before the view is presented. - (void)viewWillAppear:(BOOL)animated { [locationManager startUpdatingLocation]; [super viewWillAppear:animated]; } - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation { if ([Configuration isIpad]) { return YES; } else { return (interfaceOrientation == UIInterfaceOrientationPortrait); } } - (void)configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath { // @TODO // Remove unused function } - (void)showAddAlarmView { AddClockNavigationController *viewController = [[AddClockNavigationController alloc] initWithNibName:@"AddClockNavigationController" bundle:nil]; [[self navigationController] presentModalViewController:viewController animated:YES]; [viewController release]; } #pragma mark - #pragma mark Add a new object - (void)setEditing:(BOOL)editing animated:(BOOL)animated { [super setEditing:(BOOL)editing animated:(BOOL)animated]; self.navigationItem.rightBarButtonItem.enabled = !editing; } #pragma mark - #pragma mark Table view data source - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView { return [[self.fetchedResultsController sections] count]; } - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { id sectionInfo = [[self.fetchedResultsController sections] objectAtIndex:section]; int retValue = [sectionInfo numberOfObjects]; retValue++; return retValue; } // Customize the appearance of table view cells. - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { id sectionInfo = [[self.fetchedResultsController sections] objectAtIndex:indexPath.section]; if (indexPath.row sectionInfo = [[self.fetchedResultsController sections] objectAtIndex:indexPath.section]; if ((indexPath.row > [sectionInfo numberOfObjects]-1) || [self.tableView numberOfRowsInSection:indexPath.section] == 1) return NO; else return YES; } // Override to support editing the table view. - (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath { if (editingStyle == UITableViewCellEditingStyleDelete) { // Delete the managed object for the given index path NSManagedObjectContext *context = [self.fetchedResultsController managedObjectContext]; [context deleteObject:[self.fetchedResultsController objectAtIndexPath:indexPath]]; // Save the context. NSError *error = nil; if (![context save:&error]) { /* Replace this implementation with code to handle the error appropriately. abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. If it is not possible to recover from the error, display an alert panel that instructs the user to quit the application by pressing the Home button. */ NSLog(@"Unresolved error %@, %@", error, [error userInfo]); abort(); } if ([self.tableView numberOfRowsInSection:0] == 1) { [self.tableView reloadData]; } } } - (void)updateAlarm:(NSManagedObject*)originalAlarm withAlarm:(NSManagedObject*)newAlarm { NSLog(@"Update!"); NSManagedObjectContext *context = [self.fetchedResultsController managedObjectContext]; [context deleteObject:originalAlarm]; [context insertObject:newAlarm]; // Save the context. NSError *error = nil; if (![context save:&error]) { /* Replace this implementation with code to handle the error appropriately. abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. If it is not possible to recover from the error, display an alert panel that instructs the user to quit the application by pressing the Home button. */ NSLog(@"Unresolved error %@, %@", error, [error userInfo]); abort(); } } - (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath { // The table view should not be re-orderable. return NO; } #pragma mark - #pragma mark Table view delegate - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath { NSLog(@"Did select row"); if ([self.tableView isEditing]) { // Show editing mode NSManagedObject *managedObject = [self.fetchedResultsController objectAtIndexPath:indexPath]; AddClockNavigationController *viewController = [[AddClockNavigationController alloc] initWithNibName:@"AddClockNavigationController" bundle:nil editManagedObject:managedObject]; [[self navigationController] presentModalViewController:viewController animated:YES]; [viewController release]; } } - (void)cancelAddAlarmView { [self.modalViewController dismissModalViewControllerAnimated:YES]; } #pragma mark - #pragma mark Fetched results controller - (NSFetchedResultsController *)fetchedResultsController { if (fetchedResultsController_ != nil) { return fetchedResultsController_; } /* Set up the fetched results controller. */ // Create the fetch request for the entity. NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init]; // Edit the entity name as appropriate. NSEntityDescription *entity = [NSEntityDescription entityForName:@"Clocks" inManagedObjectContext:self.managedObjectContext]; [fetchRequest setEntity:entity]; // Set the batch size to a suitable number. [fetchRequest setFetchBatchSize:20]; // Edit the sort key as appropriate. NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@"addDate" ascending:NO]; NSArray *sortDescriptors = [[NSArray alloc] initWithObjects:sortDescriptor, nil]; [fetchRequest setSortDescriptors:sortDescriptors]; // Edit the section name key path and cache name if appropriate. // nil for section name key path means "no sections". NSFetchedResultsController *aFetchedResultsController = [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest managedObjectContext:self.managedObjectContext sectionNameKeyPath:nil cacheName:@"Root"]; aFetchedResultsController.delegate = self; self.fetchedResultsController = aFetchedResultsController; [aFetchedResultsController release]; [fetchRequest release]; [sortDescriptor release]; [sortDescriptors release]; NSError *error = nil; if (![fetchedResultsController_ performFetch:&error]) { /* Replace this implementation with code to handle the error appropriately. abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. If it is not possible to recover from the error, display an alert panel that instructs the user to quit the application by pressing the Home button. */ NSLog(@"Unresolved error %@, %@", error, [error userInfo]); abort(); } return fetchedResultsController_; } #pragma mark - #pragma mark Fetched results controller delegate - (void)controllerWillChangeContent:(NSFetchedResultsController *)controller { [self.tableView beginUpdates]; } - (void)controller:(NSFetchedResultsController *)controller didChangeSection:(id )sectionInfo atIndex:(NSUInteger)sectionIndex forChangeType:(NSFetchedResultsChangeType)type { switch(type) { case NSFetchedResultsChangeInsert: [self.tableView insertSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade]; break; case NSFetchedResultsChangeDelete: [self.tableView deleteSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade]; break; } } - (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject atIndexPath:(NSIndexPath *)indexPath forChangeType:(NSFetchedResultsChangeType)type newIndexPath:(NSIndexPath *)newIndexPath { UITableView *tableView = self.tableView; switch(type) { case NSFetchedResultsChangeInsert: [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath] withRowAnimation:UITableViewRowAnimationFade]; break; case NSFetchedResultsChangeDelete: [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade]; break; case NSFetchedResultsChangeUpdate: [self configureCell:[tableView cellForRowAtIndexPath:indexPath] atIndexPath:indexPath]; break; case NSFetchedResultsChangeMove: [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade]; [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath]withRowAnimation:UITableViewRowAnimationFade]; break; } } - (void)controllerDidChangeContent:(NSFetchedResultsController *)controller { [self.tableView endUpdates]; } - (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath { id sectionInfo = [[self.fetchedResultsController sections] objectAtIndex:indexPath.section]; if (indexPath.row EDIT This is the code of the save button, AddClockNavigationController.m : - (IBAction)saveAlarm { [self saveTheAlarm]; } - (void)saveTheAlarm { AddClockViewController *viewController = [navigationController.viewControllers objectAtIndex:0]; UITableView *alarmTable = viewController.theTable; NSIndexPath *textFieldIndexPath = [NSIndexPath indexPathForRow:0 inSection:0]; UITextField *textField = (UITextField*)[[alarmTable cellForRowAtIndexPath:textFieldIndexPath] accessoryView]; ClockAppDelegate *appDelegate = (ClockAppDelegate*)[[UIApplication sharedApplication] delegate]; RootViewController *parentView = [[RootViewController alloc] init]; [appDelegate addNewAlarmWithTitle:textField.text sound:@"" recurring:[viewController hasRecurring] recurringDays:viewController.recurringDictionary]; [parentView.tableView reloadData]; [self.parentViewController dismissModalViewControllerAnimated:YES]; [parentView release]; } ClockAppDelegate.m - (void)addNewAlarmWithTitle:(NSString*)alarmTitle sound:(NSString*)sound recurring:(BOOL)isRecurring recurringDays:(NSDictionary*)days { NSManagedObjectContext *context = managedObjectContext_; NSManagedObject *newManagedObject = [NSEntityDescription insertNewObjectForEntityForName:@"Clocks" inManagedObjectContext:context]; [newManagedObject setValue:alarmTitle forKey:@"title"]; [newManagedObject setValue:sound forKey:@"alarm"]; [newManagedObject setValue:[NSNumber numberWithBool:TRUE] forKey:@"active"]; [newManagedObject setValue:[[NSDate alloc] init] forKey:@"addDate"]; [newManagedObject setPrimitiveValue:[NSNumber numberWithBool:isRecurring] forKey:@"recurring"]; NSArray *myKeys = [days allKeys]; NSArray *sortedKeys = [myKeys sortedArrayUsingSelector:@selector(caseInsensitiveCompare:)]; for (id key in sortedKeys) { if ([(NSString*)[days objectForKey:key] isEqualToString:@"1"]) { if ([key isEqualToString:@"0"]) { [newManagedObject setPrimitiveValue:[NSNumber numberWithBool:TRUE] forKey:@"mon"]; } else if ([key isEqualToString:@"1"]) { [newManagedObject setPrimitiveValue:[NSNumber numberWithBool:TRUE] forKey:@"tue"]; } else if ([key isEqualToString:@"2"]) { [newManagedObject setPrimitiveValue:[NSNumber numberWithBool:TRUE] forKey:@"wed"]; } else if ([key isEqualToString:@"3"]) { [newManagedObject setPrimitiveValue:[NSNumber numberWithBool:TRUE] forKey:@"thu"]; } else if ([key isEqualToString:@"4"]) { [newManagedObject setPrimitiveValue:[NSNumber numberWithBool:TRUE] forKey:@"fri"]; } else if ([key isEqualToString:@"5"]) { [newManagedObject setPrimitiveValue:[NSNumber numberWithBool:TRUE] forKey:@"sat"]; } else if ([key isEqualToString:@"6"]) { [newManagedObject setPrimitiveValue:[NSNumber numberWithBool:TRUE] forKey:@"sun"]; } } } // Save the context. NSError *error = nil; if (![context save:&error]) { NSLog(@"Unresolved error %@, %@", error, [error userInfo]); abort(); } } What is it I am doing wrong? Best regards, Paul Peelen
