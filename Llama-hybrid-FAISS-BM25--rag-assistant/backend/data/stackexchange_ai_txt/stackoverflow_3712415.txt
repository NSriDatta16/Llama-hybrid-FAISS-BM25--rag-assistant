[site]: stackoverflow
[post_id]: 3712415
[parent_id]: 3697096
[tags]: 
I have created a plugin to handle line counting and wrap detection in a . I hope someone can use it. Code on BitBucket Sample Usage var result = $.countLines("#textarea"); result.actual // The number of lines in the textarea. result.wraps // The number of lines in the textarea that wrap at least once. result.wrapped // The total number of times all lines wrap. result.blank // The number of blank lines. result.visual // The approximate number of lines that the user actually sees in the textarea Working Demonstration /*! Textarea Line Count - v1.4.1 - 2012-12-06 * https://bitbucket.org/MostThingsWeb/textarea-line-count * Copyright (c) 2012 MostThingsWeb (Chris Laplante); Licensed MIT */ (function($) { $.countLines = function(ta, options) { var defaults = { recalculateCharWidth: true, charsMode: "random", fontAttrs: ["font-family", "font-size", "text-decoration", "font-style", "font-weight"] }; options = $.extend({}, defaults, options); var masterCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"; var counter; if (!ta.jquery) { ta = $(ta); } var value = ta.val(); switch (options.charsMode) { case "random": // Build a random collection of characters options.chars = ""; masterCharacters += ".,?!-+;:'\""; for (counter = 1; counter "); var span = $("#s" + id); // Hide the span span.hide(); // Apply the font properties of the textarea to the span class $.each(options.fontAttrs, function(i, v) { span.css(v, ta.css(v)); }); // Get the number of lines var lines = value.split("\n"); var linesLen = lines.length; var averageWidth; // Check if the textarea has a cached version of the average character width if (options.recalculateCharWidth || ta.data("average_char") == null) { // Get a pretty good estimation of the width of a character in the textarea. To get a better average, add more characters and symbols to this list var chars = options.chars; var charLen = chars.length; var totalWidth = 0; $.each(chars, function(i, v) { span.text(v); totalWidth += span.width(); }); // Store average width on textarea ta.data("average_char", Math.ceil(totalWidth / charLen)); } averageWidth = ta.data("average_char"); // We are done with the span, so kill it span.remove(); // Determine missing width (from padding, margins, borders, etc); this is what we will add to each line width var missingWidth = (ta.outerWidth() - ta.width()) * 2; // Calculate the number of lines that occupy more than one line var lineWidth; var wrappingLines = 0; var wrappingCount = 0; var blankLines = 0; $.each(lines, function(i, v) { // Calculate width of line lineWidth = ((v.length + 1) * averageWidth) + missingWidth; // Check if the line is wrapped if (lineWidth >= ta.outerWidth()) { // Calculate number of times the line wraps var wrapCount = Math.floor(lineWidth / ta.outerWidth()); wrappingCount += wrapCount; wrappingLines++; } if ($.trim(v) === "") { blankLines++; } }); var ret = {}; ret["actual"] = linesLen; ret["wrapped"] = wrappingLines; ret["wraps"] = wrappingCount; ret["visual"] = linesLen + wrappingCount; ret["blank"] = blankLines; return ret; }; }(jQuery)); result = jQuery.countLines("#textarea"); jQuery('#display').html( ' Actual: ' + result.actual + ' ' + ' Blank: ' + result.blank + ' ' + ' Visual: ' + result.visual + ' ' + ' Wrapped: ' + result.wrapped + ' ' + ' Wraps: ' + result.wraps + ' ' ); #textarea { width: 150px; height: 80px; } #display span { display: block; } text here this is a longer line so that it will wrap in the box longer longer longer
