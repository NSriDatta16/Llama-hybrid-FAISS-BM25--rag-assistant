[site]: crossvalidated
[post_id]: 55460
[parent_id]: 29519
[tags]: 
Let me start by answering your question, then I will add some comments and suggestions. First, I believe that when you say "weight" you actual mean "input"/ "output". This is because you asked how to transform the time series to weights and how to transform output weights into a prediction. Neural network terminology uses "weight" to mean something else (pat's answer uses the term "weight" correctly). This is what people usually suggest: If your time series looks like X_1, X_2, ..., X_n, ... then you do the following: Step 1: Decide how many observations you want to use to make a prediction. Step 2: Decide how many steps forward you want to predict. Both these choices are fixed for the NN. For this example let's say you want to use the last 5 readings to make 2 predictions. Then you will Step 3. Create a neural network with 5 input nodes and 2 output nodes. Step 4. Create your training set with each element consisting of 5 sequential readings as input and the next two readings as output. Here are the first TWO elements of the training set: Input = X_1, X_2, X_3, X_4, X_5 Output = X_6, X_7 Input = X_2, X_3, X_4, X_5, X_6 Output = X_7, X_8 etc. Hopefully that answers your question. Now for some gyan . If your data is noisy e.g. stock ticks, then my feeling is that this will be hard to train. I know I have had bad luck trying to train neural networks on noisy data. So here is another strategy: First model your time series using the ARIMA framework. This views a time series as Polynomial base + Cyclic component + Bounded randomness (Take a look at the Weka example in pat's answer from this point of view.) Now my feeling (and I am still experimenting) is that the random component(s) are interfering with the training of the NN. So I want to avoid trying to predict them directly. Picture your series data coming in. On every reading you feed it into your ARIMA black box, which figures out the underlying model and then spits out the ARIMA model parameters. So at time 0 you have a set of parameters, and then at time 1 you have an updated set of parameters, etc. Note: The ARIMA black box is slow. Question 1: Would it be possible for a neural network to learn how these parameters change? My feeling is that they will change slowly, so this may be doable. Question 2: Could you train a different neural network to discern any patterns in the ARIMA error? I.e. If ARIMA predicts 5.4 and the actual next reading is 5.5, could you train a neural network to figure out that 0.1?
