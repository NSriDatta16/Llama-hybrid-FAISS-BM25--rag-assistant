[site]: crossvalidated
[post_id]: 364803
[parent_id]: 
[tags]: 
Similarities / suggestions of multi-attribute entities

Dataset: I have 200 000 entites, these have zero or more of 1000 attributes (commonly 1-20 of them) The attibute relation is weighted 1-3 Its stored in a relational database modeles as Entity, Attribute, EntityAttrubuteRelation The data set has additions over time (neglible subtractions) Problem 1: Given N attributes, what other attributes can i suggest based how much they appear together (on entities)? Ex: If all entities with attribute A, B, C also have attribute D and half have E. Querying for A, B, C would return D as top weighted and E as half weighted. Problem 2: Given N weighted attributes, what entities have this set of attributes or fewer, in a ranked list? Weighted input means that the ranking should favor these attributes. Ex: Qeury for A, E in the example dataset in problem 1 should return all those entities, but score those matching both higher. Entity-attribute weight should also be taken into consideration. I have very basic knowledge of mathematical concepts, machine learning and its notations, and may have mislabeled something above. Here are my approaches so far: Graph approach, problem 1 An attempt could be an undirected weighted graph where the attributes are nodes, and edges are co-occurance frequency (normalized?). But with this i can "only" lookup a single attribute, and suggest other attributes based on this single one. This could possibly be done for all the N attributes in the problem and joined / ranked (?) Cosine similarity approach, problem 2 An approach could be to query for entites that contain one or more of the N attributes. Plot each of the resulting entities into vector space based on the attribute weights [0,0,0,1,2,3,1,0,0...] and do a cosine similarity on them to rank them. Since the attributes are pretty sparse, i would only have to retrieve a small set of entites to do the calcs. This approach could possibly be used for problem 1, where i count (?) and rank attributes from the resulting entities as suggestions These problems seem related to me, is there a solution i can use for both? One Class Classifiation? Are there other obvious solutions im missing? Given the additive nature of the dataset i get the feeling that i should train some kind of model, that can provide my answers
