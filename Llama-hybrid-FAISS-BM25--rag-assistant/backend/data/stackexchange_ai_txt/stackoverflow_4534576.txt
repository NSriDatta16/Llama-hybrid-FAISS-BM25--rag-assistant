[site]: stackoverflow
[post_id]: 4534576
[parent_id]: 
[tags]: 
Question for Ruby Gurus (help with Enum-like implementation)

I am trying to make a sort of "enum". Here is my implementation: # Format of input hash to AnEnum::initialize is : # { # Symbol => [Fixnum => String] # } # Example: # { # :active => [1 => "Active"] # } class AnEnum @@values = nil def initialize(hash) @@values = hash end def values @@values end def [](symbol) values[symbol][0] # return the number for the symbol. e.g. 1 end def text(symbol) values[symbol][1] # return the text for the symbol. e.g. "Active" end end Example Usage: class MyClass1 @@status = AnEnum.new({ :open => [1, 'Active'], :closed => [2, 'Closed'] }) def self.Status @@status end end # test it (it works!) MyClass1.Status[:open] # => 1 MyClass1.Status.text(:open) # => "Active" This works, but I want to make it more "elegant" and "dynamic" : Is it possible to define AnEnum in MyClass2 like this: class MyClass2 define_enum "Status", :as => { :open => [1, 'Active'], :closed => [2, 'Closed'] } end So that these will work: MyClass2.Status[:open] # => 1 MyClass2.Status.text(:open) # => "Active" Thus, the @@status and self.Status defined in MyClass1 above are automatically included in the class by the "macro"-like call to define_enum . define_enum is intended to be working like for example the before_filter call in Rails. Is this possible??
