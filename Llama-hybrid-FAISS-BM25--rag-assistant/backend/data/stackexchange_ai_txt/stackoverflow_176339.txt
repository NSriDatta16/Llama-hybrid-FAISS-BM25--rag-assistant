[site]: stackoverflow
[post_id]: 176339
[parent_id]: 176267
[tags]: 
Code coverage will ensure I'm hitting every functional piece of code "Hit" does not mean "Testing" The problem with only doing web-testing is that it only ensures that you hit the code, and that it appears to be correct at a high-level. Just because you loaded the page, and it didn't crash, doesn't mean that it actually works correctly. Here are some things I've encountered where 'web tests' covered 100% of the code, yet completely missed some very serious bugs which unit testing would not have. The page loaded correctly from a cache, but the actual database was broken The page loaded every item from the database, but only displayed the first one - it appeared to be fine even though it failed completely in production because it took too long The page displayed a valid-looking number, which was actually wrong, but it wasn't picked up because 1000000 is easy to mistake for 100000 The page displayed a valid number by coincidence - 10x50 is the same as 25x20, but one is WRONG The page was supposed to add a log entry to the database, but that's not visible to the user so it wasn't seen. Authentication was bypassed to make the web-tests actually work, so we missed a glaring bug in the authentication code. It is easy to come up with hundreds more examples of things like this. You need both unit tests to make sure that your code actually does what it is supposed to do at a low level, and then functional/integration (which you're calling web) tests on top of those, to prove that it actually works when all those small unit-tested-pieces are chained together.
