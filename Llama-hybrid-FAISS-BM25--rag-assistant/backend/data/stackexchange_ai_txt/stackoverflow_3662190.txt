[site]: stackoverflow
[post_id]: 3662190
[parent_id]: 3661395
[tags]: 
I've had a similar problem in the past; the advantage I had was that my ranges were distinct. I've got several IP_RANGES tables, each for a specific context, and the largest is ~10 million or so records, unpartitioned. Each of the tables I have is index-organized, with the primary key being (END_NUM, START_NUM). I've also got a unique index on (START_NUM, END_NUM), but it's not used in this case. Using a random IP address (1234567890), your query takes about 132k consistent gets. The query below returns in between 4-10 consistent gets (depending on IP) on 10.2.0.4. select * from ip_ranges outr where :ip_addr between outr.num_start and outr.num_end and outr.num_end = (select /*+ no_unnest */ min(innr.num_end) from ip_ranges innr where innr.num_end >= :ip_addr); --------------------------------------------------------------------------------------------------- | Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time | --------------------------------------------------------------------------------------------------- | 0 | SELECT STATEMENT | | 1 | 70 | 6 (0)| 00:00:01 | |* 1 | INDEX RANGE SCAN | IP_RANGES_PK | 1 | 70 | 3 (0)| 00:00:01 | | 2 | SORT AGGREGATE | | 1 | 7 | | | | 3 | FIRST ROW | | 471K| 3223K| 3 (0)| 00:00:01 | |* 4 | INDEX RANGE SCAN (MIN/MAX)| IP_RANGES_PK | 471K| 3223K| 3 (0)| 00:00:01 | --------------------------------------------------------------------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 1 - access("OUTR"."NUM_END"= (SELECT /*+ NO_UNNEST */ MIN("INNR"."NUM_END") FROM "IP_RANGES" "INNR" WHERE "INNR"."NUM_END">=TO_NUMBER(:IP_ADDR)) AND "OUTR"."NUM_START" =TO_NUMBER(:IP_ADDR)) 4 - access("INNR"."NUM_END">=TO_NUMBER(:IP_ADDR)) Statistics ---------------------------------------------------------- 0 recursive calls 0 db block gets 7 consistent gets 0 physical reads 0 redo size 968 bytes sent via SQL*Net to client 492 bytes received via SQL*Net from client 2 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 1 rows processed The NO_UNNEST hint is key ; it tells Oracle to run that subquery once, not once for each row, and it gives an equality test for the index to use in the outer query.
