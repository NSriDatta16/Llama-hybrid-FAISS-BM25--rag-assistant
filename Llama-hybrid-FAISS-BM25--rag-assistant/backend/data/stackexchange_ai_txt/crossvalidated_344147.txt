[site]: crossvalidated
[post_id]: 344147
[parent_id]: 
[tags]: 
Compare ML methods in a simulation study in R

I'm currently working on a simulation study where I want to compare 5 ML methods. The methods are NN, SVR, XGBoost (2 different settings) and Random forrest. I have a 3x2 factor design so 8 different settings for my data. Of all settings, I created 50 datasets and 1 testset. I now have all test RMSE results of all methods, but I need a good way to compare these methods. I expected that the RMSE would be normally distributed, but this is not the case. This is why an ANOVA or lmer() to compare groups is out of the question. What do you guys recommend? Here is the data of 50 datasets of one of my settings: structure(list(XG_BLOCK_TRAIN_RMSE = c(11.5875, 11.3483, 8.904, 8.9396, 7.1759, 7.4928, 8.0995, 11.599, 7.3108, 9.1379, 7.0262, 6.2308, 10.1225, 9.8441, 8.2559, 12.702, 9.0903, 10.2334, 11.4377, 7.3973, 11.8055, 8.3743, 8.0515, 14.6697, 6.457, 10.2076, 12.0126, 7.1919, 8.8063, 9.6316, 6.8513, 8.4188, 9.1442, 9.6077, 7.4645, 8.0439, 11.455, 7.3191, 6.86, 9.1895, 9.8612, 8.542, 7.6377, 10.1127, 10.8239, 8.5709, 6.8737, 7.5037, 8.4118, 10.7165), XG_BLOCK_TEST_RMSE = c(9.7299, 9.8484, 9.6863, 9.6627, 9.6194, 9.6517, 9.6533, 9.6923, 9.6505, 9.6848, 9.6403, 9.5466, 9.948, 10.0497, 14.5254, 9.746, 9.6056, 9.6538, 9.6801, 9.7147, 9.9226, 9.6968, 10.7047, 9.7147, 9.8119, 9.6951, 9.7248, 9.7262, 9.6397, 9.6217, 9.7103, 9.9268, 9.6751, 9.7603, 9.7081, 9.6507, 9.7065, 9.7028, 10.2016, 9.6604, 9.6955, 9.7153, 9.6894, 9.9188, 9.7572, 10.0628, 12.068, 9.7177, 9.9017, 9.6792), XG_BLOCK_TEST_MAE = c(2.6947, 2.785, 2.403, 2.4045, 2.5897, 2.4526, 2.4082, 2.4044, 2.5863, 2.3993, 2.4246, 2.5422, 2.6549, 2.5937, 3.1664, 2.4064, 2.534, 2.7309, 2.4154, 2.4194, 2.65, 2.4134, 3.6221, 2.5064, 2.8462, 2.4011, 2.4413, 2.5348, 2.6583, 2.4757, 2.4173, 2.4914, 2.4004, 2.4578, 2.4105, 2.3971, 2.4152, 2.4029, 3.4666, 2.6025, 2.6451, 2.4953, 2.4518, 2.8215, 2.4563, 2.6737, 2.9341, 2.4511, 2.5649, 2.6496), XG_BLOCK_TIME = c(10.1, 12.55, 1.05, 1.7, 2.25, 2.31, 0.92, 0.95, 15.16, 0.91, 1.23, 4.62, 2.46, 2.07, 6.3, 1.3, 1.39, 1.47, 1.38, 1.05, 2.5, 1.05, 4.44, 1.06, 8.91, 0.9, 1.04, 1.75, 3.86, 3.03, 1.06, 2.07, 1.39, 1.14, 1.06, 1.03, 1.04, 1.37, 14.6, 11.9, 6.14, 1.57, 2.02, 6.03, 1.07, 9.57, 10.19, 1.42, 7.19, 2.07), XG_BLOCK_TUNE = c(6, 4, 8, 8, 4, 8, 4, 6, 8, 4, 6, 6, 4, 8, 8, 8, 4, 6, 8, 8, 4, 8, 4, 4, 6, 4, 8, 8, 6, 6, 8, 8, 8, 8, 8, 4, 8, 8, 6, 6, 6, 8, 8, 4, 8, 6, 4, 8, 6, 4), XG_BLOCK_INDEX = c(36, 67, 1, 3, 9, 4, 1, 1, 42, 1, 2, 15, 10, 4, 16, 2, 4, 3, 2, 1, 10, 1, 22, 2, 31, 1, 1, 3, 12, 9, 1, 4, 2, 1, 1, 2, 1, 2, 53, 43, 21, 2, 4, 30, 1, 34, 44, 2, 25, 7), XG_RANDOM_TRAIN_RMSE = c(6.2712, 6.543, 4.8818, 5.6357, 4.2568, 4.9748, 4.1635, 6.6937, 4.7857, 5.7702, 4.2247, 4.3153, 5.825, 6.3054, 5.4469, 7.0507, 5.324, 5.7314, 6.5066, 4.4239, 6.9588, 5.3742, 5.5817, 7.828, 4.0983, 6.3574, 6.3139, 3.6677, 5.8659, 5.4145, 4.792, 5.6397, 5.2252, 5.478, 4.684, 4.873, 6.8349, 4.6268, 5.1106, 5.5259, 5.609, 4.8547, 4.8441, 6.1834, 6.3605, 5.6299, 4.9081, 4.6144, 5.0228, 7.122 ), XG_RANDOM_TEST_RMSE = c(9.7654, 9.7418, 9.6243, 9.843, 9.7665, 9.725, 9.9287, 9.5965, 9.6336, 9.8735, 9.6574, 9.5343, 10.1339, 10.2114, 12.5834, 9.9812, 11.3325, 10.1454, 10.317, 9.6427, 9.7313, 10.3913, 10.3261, 11.3057, 9.8541, 9.6529, 10.0826, 10.0618, 9.7353, 9.7686, 9.7881, 10.0633, 9.7173, 10.1763, 9.6283, 9.6949, 9.7394, 9.9743, 10.204, 9.6662, 9.8056, 9.9076, 9.7992, 9.8941, 10.1462, 9.9494, 12.0803, 9.9066, 9.9404, 10.2951), XG_RANDOM_TEST_MAE = c(2.715, 2.7459, 2.6254, 2.8463, 2.7212, 2.708, 2.9934, 2.7503, 2.5516, 2.7599, 2.8883, 2.6008, 2.7804, 2.7814, 3.0657, 2.8291, 2.8103, 3.1557, 3.0311, 2.6351, 2.8044, 3.3415, 3.4064, 3.2184, 2.9707, 2.7829, 2.9025, 2.984, 3.1292, 2.6678, 2.6102, 2.713, 2.6872, 2.6893, 2.7056, 2.622, 2.6537, 2.7366, 3.4754, 2.6305, 2.7187, 2.6855, 2.538, 3.0281, 2.6923, 2.6805, 2.9479, 2.9662, 2.5934, 3.0082), XG_RANDOM_TIME = c(13.7, 9.51, 13.61, 13.66, 9.44, 13.75, 17.82, 14.09, 13.67, 9.55, 13.62, 13.75, 13.8, 18.15, 13.67, 17.55, 13.62, 13.64, 13.74, 9.57, 13.77, 9.6, 13.4, 9.78, 18.11, 14.19, 18.12, 17.92, 18.3, 17.81, 9.6, 13.84, 14.1, 9.72, 13.62, 9.35, 17.92, 13.86, 14.45, 18.06, 17.89, 9.43, 9.34, 17.99, 13.59, 9.71, 9.61, 14.07, 13.83, 19.15), XG_RANDOM_TUNE = c(6, 4, 6, 6, 4, 6, 8, 6, 6, 4, 6, 6, 6, 8, 6, 8, 6, 6, 6, 4, 6, 4, 6, 4, 8, 6, 8, 8, 8, 8, 4, 6, 6, 4, 6, 4, 8, 6, 6, 8, 8, 4, 4, 8, 6, 4, 4, 6, 6, 8), XG_RANDOM_INDEX = c(74, 108, 136, 124, 215, 169, 115, 100, 145, 147, 105, 196, 124, 95, 150, 82, 120, 89, 117, 209, 80, 173, 114, 146, 114, 56, 83, 178, 153, 107, 106, 132, 125, 189, 98, 220, 158, 113, 106, 88, 156, 184, 208, 137, 150, 188, 109, 137, 102, 96), SVR_RMSE = c(9.6556, 9.6368, 9.6393, 9.6476, 9.6422, 9.6723, 9.6182, 9.6642, 9.6687, 9.6758, 9.6706, 9.6545, 9.6747, 9.6525, 9.6195, 9.6518, 9.6642, 9.6471, 9.6075, 9.6241, 9.6423, 9.6234, 9.6623, 9.6533, 9.6648, 9.6476, 9.6653, 9.6758, 9.6574, 9.6998, 9.6521, 9.6757, 9.6175, 9.6242, 9.6454, 9.6882, 9.6314, 9.6773, 9.6294, 9.6179, 9.6722, 9.6639, 9.678, 9.6516, 9.6597, 9.6537, 9.6768, 9.6257, 9.6547, 9.6514), SVR_MAE = c(2.3415, 2.2776, 2.2816, 2.3122, 2.288, 2.3048, 2.2688, 2.3171, 2.3066, 2.3441, 2.3052, 2.3489, 2.3084, 2.2897, 2.2807, 2.3222, 2.308, 2.283, 2.2767, 2.2825, 2.29, 2.2871, 2.315, 2.2981, 2.3058, 2.3116, 2.3104, 2.3257, 2.3142, 2.3446, 2.2877, 2.3071, 2.2849, 2.2817, 2.2841, 2.3636, 2.2829, 2.3275, 2.2866, 2.2724, 2.3109, 2.2935, 2.3197, 2.2893, 2.2895, 2.3298, 2.3125, 2.2629, 2.2944, 2.2904 ), SVR_TIME = c(37.55, 37.05, 36.94, 37.11, 36.92, 37.41, 37.04, 37.25, 37.06, 37.47, 37.04, 37.31, 37.19, 37.7, 36.82, 36.93, 37.11, 36.97, 37.31, 37.27, 37.59, 37.8, 37.35, 37.22, 36.87, 37.25, 37.7, 37.03, 37.06, 36.64, 37.14, 36.86, 37.61, 37.52, 37.01, 36.55, 37.6, 37.03, 37.23, 37.3, 36.93, 36.53, 37.1, 37.03, 37.03, 37.25, 37.25, 37.03, 37.28, 37.26), SVR_TUNE = c(5, 10, 5, 10, 5, 5, 10, 5, 10, 5, 10, 5, 10, 5, 10, 5, 10, 10, 10, 5, 5, 5, 5, 10, 10, 10, 5, 5, 5, 10, 10, 10, 5, 5, 5, 10, 5, 5, 5, 10, 10, 10, 5, 10, 10, 5, 10, 5, 5, 10), RF_RMSE = c(9.3671, 9.9279, 9.5132, 9.1437, 8.0885, 8.8976, 9.4317, 9.6107, 8.6699, 8.9042, 9.4163, 8.4425, 9.4814, 9.7849, 9.5705, 7.8991, 9.9243, 9.3078, 9.9116, 9.3143, 9.188, 9.2354, 9.5295, 10.1415, 9.2558, 10.0127, 9.2324, 8.4857, 12.6682, 9.8399, 9.0132, 9.2711, 11.6759, 8.6895, 8.5145, 8.4714, 8.1012, 9.2158, 9.3335, 11.4831, 11.349, 9.1341, 8.4745, 8.9694, 9.4086, 8.6475, 9.3465, 8.9651, 9.278, 8.9693), RF_MAE = c(2.314, 3.0197, 2.6166, 2.7278, 2.3924, 2.6208, 2.6981, 2.9246, 2.6076, 2.4658, 2.7366, 2.407, 2.8378, 2.7828, 2.7842, 2.5986, 2.9058, 2.7843, 3.0125, 2.6033, 2.711, 2.7383, 2.513, 3.0913, 2.4275, 2.8243, 2.756, 2.4778, 3.0381, 2.9235, 2.5884, 2.6803, 2.9211, 2.7561, 2.4922, 2.5331, 2.7761, 2.4549, 2.675, 2.9269, 2.8265, 2.6566, 2.5015, 2.61, 2.8661, 2.5339, 2.498, 2.519, 2.7088, 2.9344), RF_TIME = c(321.84, 95.61, 147.38, 90.8, 153.77, 132.16, 157.26, 114.1, 116.87, 158.11, 136.72, 145.01, 82.66, 127.36, 125.12, 101.47, 98.5, 99.78, 107.41, 124.99, 106.01, 112.36, 316.29, 94.66, 167.34, 113.88, 106.7, 157.95, 318.5, 104.64, 150.71, 97, 324.19, 94.36, 135.38, 132.23, 83.52, 161.52, 121.77, 319.51, 312.6, 112.09, 131.03, 109.55, 107.65, 115.65, 155, 134.1, 93.71, 70.2), RF_TUNE = c(294, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 293.5, 24, 24, 24, 24, 24, 296.5, 24, 24, 24, 297.5, 24, 24, 24, 24, 24, 24, 298, 296.5, 24, 24, 24, 24, 24, 24, 24, 24, 24), NN_RMSE = c(9.4483, 9.5819, 9.4469, 10.0483, 9.443, 9.8957, 9.6442, 9.4623, 29.759, 9.3438, 21.6469, 9.4772, 18.377, 10.367, 9.6046, 15.916, 15.5903, 11.6275, 10.2384, 9.454, 14.4676, 9.423, 9.4017, 13.5383, 9.3665, 10.6832, 9.462, 9.4707, 27.1545, 9.444, 9.4503, 9.5498, 9.6263, 9.5315, 9.456, 14.5866, 9.2077, 10.3911, 25.1748, 10.1113, 38.838, 9.5207, 14.5008, 11.3527, 10.1487, 12.1623, 9.4365, 9.9466, 12.6392, 8.3339), NN_MAE = c(2.9036, 3.0597, 2.8544, 2.6059, 2.6751, 3.0803, 2.7568, 3.0802, 3.3627, 2.5194, 3.3631, 2.8998, 3.7029, 2.8744, 3.4253, 3.5338, 3.0111, 2.8943, 2.8125, 2.9408, 3.3338, 2.5988, 2.5956, 4.0569, 2.582, 2.7657, 2.9018, 3.0786, 3.4617, 2.5189, 2.6369, 3.0171, 3.435, 2.9304, 2.9215, 2.9413, 3.104, 3.0004, 3.4916, 2.7054, 3.5564, 2.6499, 3.0019, 3.171, 2.8789, 3.1003, 2.8845, 2.8438, 3.0691, 2.7943), NN_TIME = c(46.29, 35.86, 44.1, 43.13, 42.66, 45.34, 41.83, 40.34, 40.78, 37.75, 44.58, 43.82, 44.01, 43.53, 44.44, 41.45, 41.64, 43.44, 44.06, 45.37, 43.19, 43.47, 42.83, 42.48, 43.16, 44.71, 44.7, 44.64, 44.03, 41.46, 45.75, 44.45, 44.32, 42.89, 43.85, 41.53, 43.17, 42.67, 43.62, 42.75, 41.85, 44.18, 60.59, 43.69, 42.69, 42.44, 44.81, 42.14, 43.42, 45.67), NN_TUNE = c(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2)), .Names = c("XG_BLOCK_TRAIN_RMSE", "XG_BLOCK_TEST_RMSE", "XG_BLOCK_TEST_MAE", "XG_BLOCK_TIME", "XG_BLOCK_TUNE", "XG_BLOCK_INDEX", "XG_RANDOM_TRAIN_RMSE", "XG_RANDOM_TEST_RMSE", "XG_RANDOM_TEST_MAE", "XG_RANDOM_TIME", "XG_RANDOM_TUNE", "XG_RANDOM_INDEX", "SVR_RMSE", "SVR_MAE", "SVR_TIME", "SVR_TUNE", "RF_RMSE", "RF_MAE", "RF_TIME", "RF_TUNE", "NN_RMSE", "NN_MAE", "NN_TIME", "NN_TUNE"), row.names = c(NA, 50L), class = "data.frame")
