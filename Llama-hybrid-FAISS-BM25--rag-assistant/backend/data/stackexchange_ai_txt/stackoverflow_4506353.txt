[site]: stackoverflow
[post_id]: 4506353
[parent_id]: 
[tags]: 
Understanding an imperative list example in Ocaml

I am a newcomer to the ocaml. appreciate if anyone can help me understand the material presented on page 94 of the book "developing applications with objective caml". having trouble to grasp the meaning of the following paragraph: Just that the evaluation of (itl l) has taken place before the evaluation of (ihd l) , so that on the last iteration of imap , the list referenced by l became the empty list before we examined its head. The list example is henceforth definitely empty even though we have not obtained any result The imap (function x ! x) example returns Uncaught exception: Failure("hd") instead of - : string ilist = {c=["one"; "two"; "three"]} I would think that the else icons (f (ihd l)) (imap f (itl l))` would become icons("one") ( ( icons("two") ( ( icon("three")([]) ) ) ) and return - : string ilist = {c=["one"; "two"; "three"]}
