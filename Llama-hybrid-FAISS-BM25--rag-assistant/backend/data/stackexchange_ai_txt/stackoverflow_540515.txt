[site]: stackoverflow
[post_id]: 540515
[parent_id]: 
[tags]: 
Named constructor and inheritance

I'm working on C++ framework and would like to apply automatic memory management to a number of core classes. So far, I have the standard approach which is class Foo { public: static shared_ptr init() { return shared_ptr (new Foo); } ~Foo() { } protected: Foo() { } }; // Example of use shared_ptr f = Foo::init(); However, the above breaks when I subclass Foo, since even tho init() is inherited, it still returns shared_ptr which contains a pointer to instance of Foo . Can anyone think of an elegant solution to this? Should I perhaps just stick with (semi-)manually wrapping instances of class with shared_ptr ? This would also give ability to expose parameterized constructors without declaring new named constructors... Ie. template shared_ptr make_shared(T* ptr) { return shared_ptr (ptr) } // Example shared_ptr f1 = make_shared(new Foo()), f2 = make_shared(new Foo(1,2));
