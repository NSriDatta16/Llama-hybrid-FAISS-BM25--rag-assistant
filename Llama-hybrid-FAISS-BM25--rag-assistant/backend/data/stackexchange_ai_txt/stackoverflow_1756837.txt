[site]: stackoverflow
[post_id]: 1756837
[parent_id]: 1738870
[tags]: 
Like the OP, I came from an OOP/imperative background before jumping to functional programming around 2006ish. I had lots of C# and Java under my belt, and wanted to learn a new language. I started on Python, picked up on Perl, and cut my teeth on C++. It was all fine and dandy, but there wasn't anything new to learn, I was basically re-learning the same language over and over again with a little different syntax. By accident, I stumbled on Paul Graham's classic article Beating the Averages , where he talks about Lisp and functional programming. I thought it'd be fun to learn one of these "obscure" functional programming languages. So, between Erlang, Lisp, Haskell, and OCaml, I picked up OCaml for no particular reason except that camels are wicked cuteness (totally!). Lots and lots of new stuff to struggle with here: Graaaaah, why I have to fight the compiler to get type-inference to work right? Arrrragh, why aren't there any decent IDEs for this language? Why doesn't emacs have a GUI editor? Where's my intellisense! Currying? Is that just a gimmick, or is it supposed to be useful? Waaaaah, how can I do anything practical with algebraic data types? [] -> ... | x::xs -> ... , WTF does that mean? For me, moving from Java to Python was easy: similar architectural idioms, similar programming style, etc. The hardest part was really learning a new library, which takes all of 6 weeks to go from n00b to pro. Moving from Java to OCaml was really really hard, because there's nothing build on, its like starting from step 0. It took about 6 months of waffling around with the language before I stopped saying to myself " now how would I do this in OCaml? " In retrospect, I probably wouldn't have struggled as much had I started with Haskell. Optional mutability + OOP makes OCaml seem superficially like familiar territory, and monads are still a mystery to me.
