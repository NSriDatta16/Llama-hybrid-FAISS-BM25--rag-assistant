[site]: stackoverflow
[post_id]: 4937952
[parent_id]: 4902793
[tags]: 
For the case with two words, the problem can be solved by just considering all possible ways of splitting the word into two, then checking each half to see if it's a valid word. If the input string has length n, then there are only O(n) different ways of splitting the string. If you store the strings in a structure supporting fast lookup (say, a trie, or hash table). The more interesting case is when you have k > 2 words to split the word into. For this, we can use a really elegant recursive formulation: A word can be split into k words if it can be split into a word followed by a word splittable into k - 1 words. The recursive base case would be that a word can be split into zero words only if it's the empty string, which is trivially true. To use this recursive insight, we'll modify the original algorithm by considering all possible splits of the word into two parts. Once we have that split, we can check if the first part of the split is a word and if the second part of the split can be broken apart into k - 1 words. As an optimization, we don't recurse on all possible splits, but rather just on those where we know the first word is valid. Here's some sample code written in Java: public static boolean isSplittable(String word, int k, Set dictionary) { /* Base case: If the string is empty, we can only split into k words and vice- * versa. */ if (word.isEmpty() || k == 0) return word.isEmpty() && k == 0; /* Generate all possible non-empty splits of the word into two parts, recursing on * problems where the first word is known to be valid. * * This loop is structured so that we always try pulling off at least one letter * from the input string so that we don't try splitting the word into k pieces * of which some are empty. */ for (int i = 1; i This code, in the worst case, runs in time O(n k ) because it tries to generate all possible partitions of the string into k different pieces. Of course, it's unlikely to hit this worst-case behavior because most possible splits won't end up forming any words.
