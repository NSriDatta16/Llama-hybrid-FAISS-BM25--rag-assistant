[site]: stackoverflow
[post_id]: 5258130
[parent_id]: 5246587
[tags]: 
I have solved my own problem, albeit not as elegantly as I had hoped: struct FCreateBind { typedef boost::_bi::bind_t , boost::arg > > result_type; result_type operator()( Callable const& c ) const { return boost::bind (c, _1); } }; BOOST_AUTO(generate, boost::bind(FCreateBind(), _1)); BOOST_AUTO(fn, generate(Callable()); bool b = fn(Arg()); Of course, in this simple example I could just write BOOST_AUTO(generate, boost::lambda_1) since Callable itself is the callable object. But I was looking for a way to set the arguments of Callable beforehand so the generated function fn is a nullary function. This solution would let me do this inside FCreateBind . FCreateBind can probably be eliminated as well, but I have not yet figured out how to define the pointer to the overloaded global function boost::bind .
