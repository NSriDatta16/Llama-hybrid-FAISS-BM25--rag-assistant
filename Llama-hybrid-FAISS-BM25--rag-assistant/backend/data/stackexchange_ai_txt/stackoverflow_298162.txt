[site]: stackoverflow
[post_id]: 298162
[parent_id]: 
[tags]: 
Help needed for LINQ To SQL operations (insert/update) with nested POCO's

Ok well I've been trying to convert my model to use LINQ but didn't want to throw away my current DTO's and their interfaces which are scattered through the domain. I managed to find this blog post which has outlined the process quite nicely: Achieving POCOs in LINQ To SQL I have the managed to get the retrieval of records to objects working properly, however, due to the nested nature of my my model, I can't seem to get addition working for the child objects. That is, if I create a child object, and set the reference to the desired parents object, LINQ to SQL still throws an exception stating the child's reference to the parent is null. If I attempt to add a plain old parent object, it succeeds, but adding child objects directly fails Here is my failing test: [Test] public void AddSelectionShouldAddSelectionToMarket() { Market market = (Market) new Repository().GetMarket(1); Selection selection = new Selection(); selection.Market = market; new Repository().AddSelection(selection); Assert.IsTrue(selection.SID > 0); } Here is the error message: System.InvalidOperationException: An attempt was made to remove a relationship between a Market and a Selection. However, one of the relationship's foreign keys (Selection.MID) cannot be set to null. The relevant parts of the 2 objects: [DataContract] public class Selection : ISelection { private int mID; [DataMember] public int MID { get { return this.mID; } set { this.mID = value; } } private Market market; [DataMember] public Market Market { get { return this.market; } set { this.market = value; this.mID = value.MID; } } } [DataContract] public class Market : IMarket { private int mID; [DataMember] public int MID { get { return this.mID; } protected set { this.mID = value; } } private List selections; [DataMember] public List Selections { get { return this.selections; } set { this.selections = value; // For LINQ foreach (Selection selection in selections) { selection.MID = mID; selection.Market = this; } } } } My DA code: MarketsDataContext context = new MarketsDataContext(); DataLoadOptions options = new DataLoadOptions(); options.LoadWith (s => s.Prices); options.LoadWith (m => m.Selections); context.LoadOptions = options; return context; and; public void AddSelection(ISelection selection) { using (MarketsDataContext context = MarketsDataContext.GetContext()) { context.Selections.InsertOnSubmit((Selection) selection); context.SubmitChanges(); } } And finally my XML mapping: So, can anyone point me in the right direction? I've been searching for hours... Edit: Here's my stacktrace for my test failure: at System.Data.Linq.ChangeTracker.StandardChangeTracker.StandardTrackedObject.SynchDependentData() at System.Data.Linq.ChangeProcessor.ValidateAll(IEnumerable`1 list) at System.Data.Linq.ChangeProcessor.SubmitChanges(ConflictMode failureMode) at System.Data.Linq.DataContext.SubmitChanges(ConflictMode failureMode) at System.Data.Linq.DataContext.SubmitChanges() at BetMax.DataModel.Repository.AddSelection(ISelection selection) in Repository.cs: line 68 at BetMax.DataModel.Test.ModelTest.AddSelectionShouldAddSelectionToMarket() in ModelTest.cs: line 65 And my GetMarket method: public IMarket GetMarket(int MID) { Market market; using (MarketsDataContext context = MarketsDataContext.GetContext()) { market = context.Markets.Single(m => m.MID == MID); } return market; } Edit 2: Well, adding DeleteOnNull="true" to Selections foreign key in the XML mapping has removed the foreign key error, but now I'm getting a null reference on one of Selections's child objects, saying its reference to Selection is null even though Selection is being initialised with none of its variables set (outside the foreign keys). I even tried creating a child object, and set its references correctly but am still getting this error: System.NullReferenceException: Object reference not set to an instance of an object. at BetMax.DTO.Price.set_Selection(Selection value) in Price.cs: line 25 at System.Data.Linq.Mapping.PropertyAccessor.Accessor`3.SetValue(ref T instance, V value) at System.Data.Linq.Mapping.MetaAccessor`2.SetBoxedValue(ref Object instance, Object value) at System.Data.Linq.ChangeProcessor.ClearForeignKeysHelper(MetaAssociation assoc, Object trackedInstance) at System.Data.Linq.ChangeProcessor.ClearForeignKeyReferences(TrackedObject to) at System.Data.Linq.ChangeProcessor.PostProcessUpdates(List`1 insertedItems, List`1 deletedItems) at System.Data.Linq.ChangeProcessor.SubmitChanges(ConflictMode failureMode) at System.Data.Linq.DataContext.SubmitChanges(ConflictMode failureMode) at System.Data.Linq.DataContext.SubmitChanges() at BetMax.DataModel.Repository.AddSelection(ISelection selection) in Repository.cs: line 68 at BetMax.DataModel.Test.ModelTest.AddSelectionShouldAddSelectionToMarket() in ModelTest.cs: line 69 Price is another object, constructed in the same that that Selection is related to Market (1 selection has many prices, 1 market has many selections) etc etc.
