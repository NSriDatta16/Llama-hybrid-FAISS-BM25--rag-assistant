[site]: stackoverflow
[post_id]: 2190097
[parent_id]: 2182455
[tags]: 
Your proposal is called "copy in - copy out" reference semantics. Copy-in-copy-out semantics are subtly different from what we might call "ref to variable" semantics; different enough to be confusing and wrong in many situations. Others have already given you some examples; there are plenty more. For example: void M() { F(ref this.p); } void F(ref int x) { x = 123; B(); } void B() { Console.WriteLine(this.p); } If "this.p" is a property, with your proposal, this prints the old value of the property. If it is a field then it prints the new value. Now imagine that you refactor a field to be a property. In the real language, that causes errors if you were passing a field by ref; the problem is brought to your attention. With your proposal, there is no error; instead, behaviour changes silently and subtly. That makes for bugs. Consistency is important in C#, particularly in parts of the language that people find confusing, like reference semantics. I would want either references to always be copy-in-copy-out or never copy-in-copy-out. Doing it one way sometimes and another way other times seems like really bad design for C#, a language which values consistency over brevity.
