[site]: stackoverflow
[post_id]: 1989388
[parent_id]: 1989344
[tags]: 
I have done a detailed analysis of this problem in the context of a decoupled design. I'll try to summarize my points: If your Singleton carries a significant global state, don’t use Singleton. This includes persistent storage such as Databases, Files etc. In cases, where dependency on a Singleton Object is not obvious by the classes name, the dependency should be injected. The need to inject Singleton Instances into classes proves a wrong usage of the pattern (see point 1). A Singleton’s life-cycle is assumed to be the same as the application’s. Most Singleton implementations are using a lazy-load mechanism to instantiate themselves. This is trivial and their life-cycle is unlikely to change, or else you shouldn’t use Singleton.
