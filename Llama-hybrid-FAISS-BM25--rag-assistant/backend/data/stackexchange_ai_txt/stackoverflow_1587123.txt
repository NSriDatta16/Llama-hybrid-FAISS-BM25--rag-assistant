[site]: stackoverflow
[post_id]: 1587123
[parent_id]: 1587120
[tags]: 
My Code, not elegant. public enum forEachExeuction { Concurrent, Seperate } public delegate void forEachDelegate(object o); public static void forEach( IList collection, forEachDelegate function, forEachDelegate before, forEachDelegate first, forEachDelegate evens, forEachDelegate odds, forEachDelegate last, forEachDelegate after, forEachExeuction when) { bool doBefore = before != null; bool doFirst = first != null; bool doEvens = evens != null; bool doOdds = odds != null; bool doLast = last != null; bool doAfter = after != null; bool conCurrent = when == forEachExeuction.Concurrent; int collectionCount = collection.Count; for (int i = 0; i Simple call to it: string[] testCollection = {"1", "2", "3", "4", "5"}; forEachDelegate primaryFunction = delegate(object o) { Response.Write(o.ToString()); }; forEachDelegate first = delegate(object o) { Response.Write("first"); }; forEachDelegate odd = delegate(object o) { Response.Write("odd"); }; forEachDelegate after = delegate(object o) { Response.Write("after"); }; Randoms.forEach(testCollection, primaryFunction, null, first, null, odd, null, after, Randoms.forEachExeuction.Concurrent); You would need to cast each object in each delegate to the proper object. Default parameters and named parameters would make this look much better. /wait for C# 4.0
