[site]: stackoverflow
[post_id]: 168565
[parent_id]: 31672
[tags]: 
Legacy Fortran Soapbox I helped maintain/improve a legacy Fortran code base for quite a while and for the most part think sixlettervariables is on the money. That advice though, tends to the technical; a tougher row to hoe is in implementing "good practices". Establish a required coding style and coding guidelines. Require a code review (of more than just the coder!) for anything submitted to the code base. (Version control should be tied to this process.) Start building and running unit tests; ditto benchmark or regression tests. These might sound like obvious things these days, but at the risk of over-generalizing, I claim that most Fortran code shops have an entrenched culture, some started before the term "software engineering" even existed, and that over time what comes to dominate is "Get it done now". (This is not unique to Fortran shops by any means.) Embracing Gotchas But what to do with an already existing, grotty old legacy code base? I agree with Joel Spolsky on rewriting, don't . However, in my opinion sixlettervariables does point to the allowable exception: Use software tools to transition to better Fortran constructs. A lot can be caught/corrected by code analyzers ( FORCHECK ) and code rewriters ( plusFORT ). If you have to do it by hand, make sure you have a pressing reason. (I wish I had on hand a reference to the number of software bugs that came from fixing software bugs, it is humbling. I think some such statistic is in Expert C Programming .) Probably the best offense in winning the game of Fortran gotchas is having the best defense: Knowing the language fairly well. To further that end, I recommend ... books! Fortran Dead Tree Library I have had only modest success as a "QA nag" over the years, but I have found that education does work, some times inadvertently, and that one of the most influential things is a reference book that someone has on hand. I love and highly recommend Fortran 90/95 for Scientists and Engineers , by Stephen J. Chapman The book is even good with Fortran 77 in that it specifically identifies the constructs that shouldn't be used and gives the better alternatives. However, it is actually a textbook and can run out of steam when you really want to know the nitty-gritty of Fortran 95, which is why I recommend Fortran 90/95 Explained , by Michael Metcalf & John K. Reid as your go-to reference (sic) for Fortran 95. Be warned that it is not the most lucid writing, but the veil will lift when you really want to get the most out of a new Fortran 95 feature. For focusing on the issues of going from Fortran 77 to Fortran 90, I enjoyed Migrating to Fortran 90 , by Jim Kerrigan but the book is now out-of-print. (I just don't understand O'Reilly's use of Safari , why isn't every one of their out-of-print books available?) Lastly, as to the heir to the wonderful, wonderful classic, Software Tools , I nominate Classical FORTRAN , by Michael Kupferschmid This book not only shows what one can do with "only" Fortran 77, but it also talks about some of the more subtle issues that arise (e.g., should or should not one use the EXTERNAL declaration). This book doesn't exactly cover the same space as "Software Tools" but they are two of the three Fortran programming books that I would tag as "fun".... ( here's the third ). Miscellaneous Advice that applies to almost every Fortran compiler There is a compiler option to enforce IMPLICIT NONE behavior, which you can use to identify problem routines without modifying them with the IMPLICIT NONE declaration first. This piece of advice won't seem meaningful until after the first time a build bombs because of an IMPLICIT NONE command inserted into a legacy routine. (What? Your code review didn't catch this? ;-) There is a compiler option for array bounds checking, which can be useful when debugging Fortran 77 code. Fortran 90 compilers should be able to compile almost all Fortran 77 code and even older Fortran code. Turn on the reporting options on your Fortran 90 compiler, run your legacy code through it and you will have a decent start on syntax checking. Some commercial Fortran 77 compilers are actually Fortran 90 compilers that are running in Fortran 77 mode, so this might be relatively trivial option twiddling for whatever build scripts you have.
