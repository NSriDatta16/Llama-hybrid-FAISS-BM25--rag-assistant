[site]: stackoverflow
[post_id]: 4071583
[parent_id]: 
[tags]: 
return a computed field in a serialized django object?

I'm writing an API using Django, and I'm running into some issues around returning data that isn't stored in the database directly, or in other cases organized differently than the database schema. In particular, given a particular data request, I want to add a field of computed data to my model before I serialize and return it. However, if I just add the field to the model, the built-in serializer (I'm using json) ignores it, presumably because it's getting the list of fields from the model definition. I could write my own serializer, but what a pain. Or I guess I could run model_to_dict, then serialize the dict instead of the model. Anyone have any better ideas? Here's what the code vaguely looks like right now: squidlets = Squidlet.objects.filter(stuff) for i in range(len(squidlets)): squidlets[i].newfield = do_some_computation(squid) return HttpResponse(json_serializer.serialize(squidlets,ensure_ascii=False), 'text/json') But newfield ain't in the returned json.
