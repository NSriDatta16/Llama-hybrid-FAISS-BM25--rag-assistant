[site]: stackoverflow
[post_id]: 1161972
[parent_id]: 1161930
[tags]: 
My experience is that OOP is mostly useful on a small scale - defining a class with certain behavior, and which maintains a number of invariants. Then I essentially just use that as yet another datatype to use with generic or functional programming. Trying to design an entire application solely in terms of OOP just leads to huge bloated class hierarchies, spaghetti code where everything is hidden behind 5 layers of indirection, and even the smallest, most trivial unit of work ends up taking three seconds to execute. OOP is useful --- when combined with other approaches. But ultimately, every program is about doing , not about being . And OOP is about "being". About expressing that "this is a car. The car has 4 wheels. The car is green". It's not interesting to model a car in your application. It's interesting to model *the car doing stuff. Processes are what's interesting, and in a nutshell, they are what your program should be organized around. Individual classes are there to help you express what your processes should do (if you want to talk about car things, it's easier to have a car object than having to talk about all the individual components it is made up of, but the only reason you want to talk about the car at all is because of what is happening to it. The user is driving it, or selling it, or you are modelling what happens to it if someone hits it with a hammer) So I prefer to think in terms of functions. Those functions might operate on objects, sure, but the functions are the ones my program is about . And they don't have to "belong" to any particular class.
