[site]: stackoverflow
[post_id]: 5281418
[parent_id]: 
[tags]: 
Using mock objects in PHP inside functions that instantiate their own objects

I have been looking into how to add unit testing coverage to a large, existing codebase written in PHP. Many functions in both static and instantiable classes make a call to a library or instantiate an object in order to obtain connections to memcache and the database. They typically look something like this: public function getSomeData() { $key = "SomeMemcacheKey"; $cache = get_memcache(); $results = $cache->get($key); if (!$results) { $database = new DatabaseObject(); $sql = "SELECT * from someDatabase.someTable"; $results = $database->query($sql); $cache->set($key, $results); } return $results; } My colleagues and I are currently trying to implement coverage via PHPUnit for a few of the new classes we are writing. I have attempted to find a way to create unit tests in an isolated manner for functions in our existing codebase that resemble the pseudo-code above, but have been unsuccessful. The examples I've seen in the PHPUnit documentation all rely on having some method in the class by which a mock object can be attached to it, such as: $objectBeingTested->attach($mockObject); I looked at SimpleUnit, and saw the same thing there, the mock objects were being passed into the class via its constructor. This doesn't leave much room for functions which instantiate their own database objects. Is there any way to mock out these sorts of calls? Is there another unit testing framework we can use? Or are we going to have to change the patterns we are using in the future in order to facilitate unit testing? What I'd like to do is be able to swap out an entire class with a mock class when running tests. For instance, the DatabaseObject class could be replaced with a mock class, and any time it's instantiated during a test, it would actually be an instance of the mock version. There has been talk in my team of refactoring our methods of accessing the database and memcache in new code, perhaps using singletons. I suppose that could help if we were to write the singleton in such a way that its own instance of itself could be replaced with a mock object... This is my first foray into unit testing. If I'm doing it wrong, please say so. :) Thanks.
