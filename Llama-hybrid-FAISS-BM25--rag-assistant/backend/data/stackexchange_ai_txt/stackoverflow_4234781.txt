[site]: stackoverflow
[post_id]: 4234781
[parent_id]: 4234269
[tags]: 
function __autoload($class) { $classfile = $class.'.class.php'; $path = './includes/classes/system/'; if (is_file($path.$classfile)) require_once($path.$classfile); if (is_file($path.'baseclasses/'.$classfile)) require_once($path.'baseclasses/'.$classfile); if (is_file($path.'systementities/'.$classfile)) require_once($path.'systementities/'.$classfile); } ...which is still not the greatest way, but it gets you around using glob(). If you are commonly loading all of your systementities there should be a hard-coded require() list in a boot/config script. There are a lot of options on how to organize and fetch class files. To reduce the time searching for scripts you could think of your filetree as an interface. For the sake of simplicity, you could put all non-mandatory classes in the same folder, reducing the is_file() calls down to one. In my system I have object classes grouped in folders with their respective control scripts and views. My __autoload() function has a simpler job -- $classfile = $path.$class.'/'.$class.'_class.php'; if (is_file($classfile)) require_once($classfile);
