[site]: stackoverflow
[post_id]: 5625241
[parent_id]: 5625199
[tags]: 
In C, just because you have a pointer to an array, doesn't mean you know its length (how many entries it has). Somehow you must know to avoid array indexing errors. There are only a small number of ways to do this: Agree on an array length. The code just knows certain arrays have a certain length, e.g., 17. This is generally considered bad practice, but people do it for arrays that are problem-domain specific such as translation matrices for 3D graphics, which tend to have 4 rows. Document the array length with a constant declaration or a macro definition, and use that symbol to control loops accessing the array. Implicitly associate a well-known variable containing the runtime array size with the array. The program consults the variable when it needs to know the array size. Pass the pointer to the array, and the length known by the caller to the callee. Now the callee knows the length, and can in turn pass it to whoever the callee calls. Package the array and its length in a struct, and pass a pointer to the struct. Now the callee can consult the struct to determine the array size. This discussion is a little confusing for the C language, because we tend in general conversation to treat array length and array size as being synonyms. But in C, "size" has a specific meaning; it is the number of storage units occupied by an entity. It is easily computed from an array length, and sometimes programs will pass "size" rather than length. IMHO you should pass array lengths to functions that manipulate arrays by indexing them, as length is more abstract and easier to understand.
