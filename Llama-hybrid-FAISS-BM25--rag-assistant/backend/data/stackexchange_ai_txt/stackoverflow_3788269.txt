[site]: stackoverflow
[post_id]: 3788269
[parent_id]: 3787960
[tags]: 
One thing I really like and miss in other languages is the support of typclasses, which are an elegant solution for many problems (including for instance polyvariadic functions). Using typeclasses, it's extremely easy to define very abstract functions, which are still completely type-safe - like for instance this Fibonacci-function: fibs :: Num a => [a] fibs@(_:xs) = 0:1:zipWith (+) fibs xs For instance: map (`div` 2) fibs -- integral context (fibs !! 10) + 1.234 -- rational context map (:+ 1.0) fibs -- Complex context You may even define your own numeric type for this.
