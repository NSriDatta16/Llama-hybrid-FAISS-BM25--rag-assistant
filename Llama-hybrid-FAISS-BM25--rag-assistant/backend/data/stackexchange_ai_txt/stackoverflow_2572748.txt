[site]: stackoverflow
[post_id]: 2572748
[parent_id]: 2561963
[tags]: 
So, here is what worked for me: First, I think this is a bug because an input field that starts out like new dijit.form.NumberTextBox({ id: "fieldID", style: "width:60px", constraints: { places: 0 } }, "fieldID"); that is then changed on the fly with code like: NOTE: ntbArry - Array of dijit.form.NumberTextBox objs tied to a html input tag id. for (var x=0;x Does not exhibit the same behavior as a field created this way (no constraints mods on the fly): new dijit.form.NumberTextBox({ id: "fieldID", style: "width: 60px", constraints: { places: 2, pattern: '#####.0#' } }, "fieldID"); It's close in behavior but every time you type a decimal point, the error message pops up stating invalid entry. This message doesn't pop up when typing the decimal point on a field that was originally created with the constraints places=2 and pattern '#####.0#'. So, to get original behavior I wanted: fieldIDEvents is an array of dojo events tied to NumberTextBox fields. Before continuing disconnect dojo events for (var x=0;x then destroy the NumberTextBox dojo objects for (var x=0;x Next, place the input tag back into the html because it gets destroyed: NOTE: tdtag and an id on a html td tag which should contain the input tag. var fld1 = this.document.getElementById("tdtag"); if (fld1) { //alert("\""+fld1.innerHTML+"\""); fld1.innerHTML = " "; } Now, create the NumberTextBox object again: ntbArry[0] = new dijit.form.NumberTextBox({ id: "fieldID", style: "width: 60px", constraints: { places: 2, pattern: '#####.0#' } }, "fieldID"); It's a few extra steps but, at least I know this is what works for me..If I'm missing something basic, let me know, it's easy to miss the small details with this stuff.
