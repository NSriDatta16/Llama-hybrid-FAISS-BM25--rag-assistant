[site]: stackoverflow
[post_id]: 2151633
[parent_id]: 2151597
[tags]: 
I am not sure this is what should want, I have used code generators to produce C++ code. In particular, python cheetah. You basically embed straight python code inside your C++ code and run through cheetah preprocessor.it allows to do pretty complex computations much easier than using templates or C++ preprocessor, plus you get all python libraries and extensions. on the other hand it makes debugging harder if something goes wrong.if you are interested I could provide some examples and Emacs mode for editing cheetah C++ programs. If you need something less powerful and want to stay within C++ C only, take a look at boost preprocessor, here . It takes a bit of time to get used to it, but could make life really easy when the repetitive code is involved okay, I am pasting cheetah example, give me a few minutes: #if defined (__INTEL_COMPILER) #pragma vector aligned #endif for(int a = 0; a produces (after running cheetah ... ) #if defined (__INTEL_COMPILER) #pragma vector aligned #endif for(int a = 0; a which is a regular C++ code lines starting with % are interpreted as python statements by cheetah preprocessor. /// are cheetah comments. Defaults use # as python statements, but I changed them to avoid collision with C preprocessor directives. %end must be used to terminate python blocks. Variables in C++ code which start with $ are replaced by python variables. Do you want examples using boost preprocessor?
