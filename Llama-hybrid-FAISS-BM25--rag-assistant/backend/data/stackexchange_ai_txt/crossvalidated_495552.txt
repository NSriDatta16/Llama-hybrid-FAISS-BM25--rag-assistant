[site]: crossvalidated
[post_id]: 495552
[parent_id]: 
[tags]: 
Predicting next value using monte carlo

I'm new to monte carlo simulations and have attempted to implement the simplest model in order to validate my current understanding. Generate some price data and plot it: import pandas as pd from matplotlib import pyplot as plt import numpy as np prices = [234,2,34,2344,23,42,423,43,25,3245,325,32,532,5,235,2345,3245,23,52,345,423 , 32] plt.plot(prices) which generates: I will as Assuming the dataset is normally distributed I calculate the mean and standard deviation of the prices dataset and execute 10000 simulations. The result of each simulation is stored in test_preds. The normality assumption may be incorrect and leveraging ARIMA ( https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average ) could assist in determining which distribution the dataset more closely following, but for this test will assume normality. mean = np.mean(prices) std = np.std(prices) number_simulations = 10000 test_preds = np.random.normal(mean, std, number_simulations) To generate the range of predictions I use : import matplotlib.pyplot as plt count, bins, ignored = plt.hist(test_preds, 30, density=True) plt.plot(bins, 1/(std * np.sqrt(2 * np.pi)) *np.exp( - (bins - mean)**2 / (2 * std**2) ), linewidth=2, color='r') plt.show() which renders: In order to predict the next price is it correct to take the mean of sampled values? Therefore, for this example, the prediction of the next price or expected value is the mean of all previous values : np.mean(test_preds) which is 634.022 To predict the price after the previous price (634.022) then recompute the simulated values stored in test_preds with 634.022 appended to the prices list prices Update: To calculate $$Y_t = \mu + \varepsilon_t, \quad \varepsilon_t \sim^{\text{iid}} \mathcal{N}(0,\sigma^2)$$ I calculate the mean and variance based on the existing prices data: prices_mean = np.mean(prices) variance = np.std(prices) * np.std(prices) which is : mean = 140.82 variance = 19004.06 To calculate : $$E(Y_{t+1}|\mathcal{F}_t) = \mu$$ I run 10'000'000 simulations: simulations = prices_mean + np.random.normal(0, variance, 10000000) then take the mean of the simulations: prediction = np.mean(simulations) which works out to be 149.55. 149.55 is the prediction for $E(Y_{t+1}|\mathcal{F}_t)$ . Have I implemented the steps correctly?
