[site]: stackoverflow
[post_id]: 2139334
[parent_id]: 2139121
[tags]: 
You can't use @Autowired directly because both your jsps and servlets are instantiated by the servlet conainer. So they are not part of the spring context and hence their dependencies aren't injected. You can: move all code that to pure servlets, rather than in jsps - leave only presentation in the jsps. use @Configurable on your servlets (and add a javaagent, as described in the linked docs) Another way, is to make the servlet part of the current context manually. This is possible in both jsps and servlets: public void init() { WebApplicationContext ctx = WebApplicationContextUtils .getRequiredWebApplicationContext(getServletContext()); AutowireCapableBeanFactory bf = ctx.getAutowireCapableBeanFactory(); bf.autowireBean(this); } This will resolve the @Autowired annotated dependencies. Now, I'm not sure whether servlet containers are required to use only one instance of a servlet class. If not, you'd better place the above code in a getter-method for the dependency ( getDao() ) and if the @Autowired property is null (i.e. another instance of the servlet-class is used by the container) - perform the above operation. That all said, really consider using a web framework (any of the ones you listed). Having logic in jsps is completely wrong, hard to support, hard to read, etc.
