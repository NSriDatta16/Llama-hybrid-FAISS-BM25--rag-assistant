[site]: stackoverflow
[post_id]: 2130108
[parent_id]: 2129874
[tags]: 
First: why are you compiling C code as C++? . Please compile it with a C compiler. The prototype of list_sort() is: void list_sort(INTLIST* list); and list_map() has the prototype: void list_map(INTLIST* list, void (*f)(void *)); This means that the second argument to list_map() is a function that takes a void * argument, and returns void (nothing). Now, the C standard guarantees that a conversion of any object pointer to void * and back is OK, so given: INTLIST *l; /* make l point to a valid INTLIST */ void *pl = l; this is OK: list_sort(pl); Note that, list_sort() could have been declared as: void list_sort_generic(void *l); In fact, since your professor is using void * in some places, he wants to extend your lists to be of a generic type at some point. Anyway, you can pass an INTLIST * to list_sort() or list_sort_generic() , but list_sort_generic() can be passed any object pointer, whereas list_sort() can only be passed INTLIST * (or a void * which was converted from an INTLIST * ). Even though list_sort() can take a void * , the signature of list_sort() is not: void list_sort(void *l); So, the function types of list_sort() and list_sort_generic() are not the same, and cannot be interchanged. list_map() expects a function of the kind that list_sort_generic() is, but is getting a function of a different kind. Since you can't change any prototypes, you need a cast. Now, void * is a generic type in C, so you would think such a cast would work. But, as I said before, only object pointers can be converted to void * and back portablyâ€”not function pointer type. So, you need to cast list_sort() to the correct type when calling list_map() . That correct type is void (*)(void *) . This is a function returning void and taking a void * . Hence, the call should be: list_map(aList[i], (void (*)(void *))list_sort); But, since the type of list_sort() and the type expected by list_map() for its second parameter are not the same, the cast may or may not work. Your professor has given you "not-so-nice" (i.e., wrong ) prototypes. Either he should have gone all the way in declaring type-generic functions, or he should have kept everything INTLIST * . By going half-way, he has introduced a complicated cast that shouldn't have been there, and may not work. I am sure if you bring this to your professor's attention, he will admit this oversight. Hope that helped.
