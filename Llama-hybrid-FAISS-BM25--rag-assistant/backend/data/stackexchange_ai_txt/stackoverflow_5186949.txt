[site]: stackoverflow
[post_id]: 5186949
[parent_id]: 4124441
[tags]: 
First, use indexes . Second, you need to reduce your memory requirements. That means first provide a short alias for your VARCHAR(50), such as int which is 4 bytes instead of 50. That will get you a 10x speedup. declare @tmpPeople table( ixPerson int identity primary key, UserNodeID varchar(50), unique(UserNodeID, ix) -- this creates an index ) Insert @tmpPeople(UserNodeID) select UserNodeID from NormalPeopleTable declare @relationships table( ixParent int, ixChild int, unique(ixParent, ixChild), unique(ixChild, ixParent) ) insert @relationships(ixParent, ixChild) select distinct p.ixPerson, c.ixPerson from NormalRelationshipsTable nr inner join @tmpPeople p on p.UserNodeID = nr.ParentUserNodeID inner join @tmpPeople c on c.UserNodeID = nr.ChildUserNodeID -- OK now got a copy of all relationships, but it is a fraction of the size -- because we are using integers for the keys. -- if we need to we can insert the reverse relationships too. You need to write a query which does what you want, not something "generic". If you want to find the shortest distance between two nodes, you can cut your search time by searching from both ends at once. declare @p1 table( ix int identity primary key, ixParent int, ixChild int, nDeep int, -- Need indexes unique(ixParent, ixChild, nDeep, ix), unique(ixChild, ixParent, nDeep, ix) ) -- That's now indexed both ways. -- If you only need one, you can comment the other out. -- define @p2 the same insert @p1 (ixParent, ixChild, nDeep) select @ixUserFrom, @ixUserFrom, 0 insert @p2 ..... @ixUserTo, @ixUserTo, 0 -- Breadth first goes like this. -- Just keep repeating it till you get as far as you want. insert @p1 (ixParent, ixChild, nDeep) select p1.ixChild, r.ixChild, p1.nDeep+1 from @p1 p1 inner join @relationships r on r.ixParent = p1.ixChild -- may want to exclude those already in the table where not exists ( select 1 from @p1 p1 where p1.ixParent = p.ixChild and p1.ixChild = r.ixChild ) For a "distance from Alice to Bob" you do two searches in parallel, and stop when Alice's search contains anyone also contained in Bob's search. That also cuts your time down by a factor of n^2 where n is the average number of connections. Don't forget to stop if the depth gets too much.
