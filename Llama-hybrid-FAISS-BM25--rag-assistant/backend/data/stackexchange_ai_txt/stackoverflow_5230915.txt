[site]: stackoverflow
[post_id]: 5230915
[parent_id]: 5230497
[tags]: 
First you should put your integration tests into a single module let us assume you use Module A than you you should run the integration test phase also on the same module and not into a different module. You can use cargo-plugin to make a startup for an application server during the pre-integration-test phase run your integration-tests via the maven-failsafe-plugin and shut down you applcation server during the post-integration-test via the cargo plugin. The following is a snippet to configure the cargo plugin to start/stop a tomcat server, but cargo supports also JBoss, Glassfish etc. org.codehaus.cargo cargo-maven2-plugin 1.0.5 false tomcat${tomcat.major}x http://www.apache.org/dist/tomcat/tomcat-${tomcat.major}/v${tomcat.version}/bin/apache-tomcat-${tomcat.version}.tar.gz ${installDir} ${project.build.directory}/tomcat${tomcat.major}x.log ${project.build.directory}/cargo.log ${project.build.directory}/tomcat-${tomcat.version}/container high 9080 -DHUDSON_HOME=${project.build.directory}/hudson-storage start-container pre-integration-test start deploy org.jvnet.hudson.main hudson-war war http://localhost:9080/hudson 60000 hudson stop-container post-integration-test stop The following snippet gives you an impression of how to use maven-surefire plugin and the compiler plugin: Important in this case to name the integration tests (like XYZ*IT.jav) org.apache.maven.plugins maven-compiler-plugin 2.3.2 testCompile org.apache.maven.plugins maven-failsafe-plugin 2.6 integration-test integration-test verify verify You don't need exec plugin etc. or a shell script to run Integration tests in maven.
