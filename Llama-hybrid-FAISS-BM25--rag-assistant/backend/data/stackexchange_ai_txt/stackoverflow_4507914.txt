[site]: stackoverflow
[post_id]: 4507914
[parent_id]: 4507735
[tags]: 
Compilers will "pad" the struct's fields and subfields, i.e., organize them in memory with blank chunks of memory that hold nothing in the middle. It does this to increase efficiency as Hans Passant's answer explains. Different compilers/targets/optimization settings may pad differently, transforming equal 'logical' structs in unequal memory representations, so if two communicating machines pass the struct between them, they may not understand each other. #pragma pack is your way to limit the compiler's freedom to pad. #pragma pack(push, 1) orders the compiler to not pad at all. If you do this to two identical structs defined in different codes, they will be identically represented in memory. Then you can safely send the contents of a struct in one application throught some protocol using a pointer and sizeof(), getting it on the other side and writing it right over an identical struct, also using a pointer and sizeof().
