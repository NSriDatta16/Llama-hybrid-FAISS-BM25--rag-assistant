[site]: stackoverflow
[post_id]: 933125
[parent_id]: 925075
[tags]: 
I think that keeping the names in a flat text file, and loading them at runtime would be a good alternative. I try to stick to the lowest level of complexity possible with my data, starting with plain text and working up to a RDMS (I lifted this idea from The Pragmatic Programmer ). Dictionaries are very efficient in python. It's essentially what the whole language is built on. 300 items is well within the bounds of sane dict usage. names.txt: A = AAA B = BBB C = CCC getname.py: import sys FILENAME = "names.txt" def main(key): pairs = (line.split("=") for line in open(FILENAME)) names = dict((x.strip(), y.strip()) for x,y in pairs) return names.get(key, "Not found") if __name__ == "__main__": print main(sys.argv[-1]) If you really want to keep it all in one module for some reason, you could just stick a string at the top of the module. I think that a big swath of text is less distracting than a huge mess of dict initialization code (and easier to edit later): import sys LINES = """ A = AAA B = BBB C = CCC D = DDD E = EEE""".strip().splitlines() PAIRS = (line.split("=") for line in LINES) NAMES = dict((x.strip(), y.strip()) for x,y in PAIRS) def main(key): return NAMES.get(key, "Not found") if __name__ == "__main__": print main(sys.argv[-1])
