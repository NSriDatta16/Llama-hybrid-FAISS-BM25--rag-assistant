[site]: stackoverflow
[post_id]: 4632539
[parent_id]: 4624554
[tags]: 
I have given up on DataReader and all that. After writing a program a couple years ago where I had to provide all of the logic for change tracking and concurrency and relationship tracking and everything I threw up my hands because it is so time intensive. Nowadays I use an O/RM framework; that is Object/Relation Mapping. Two of the biggies right now are Entity Framework (my personal favored framework) and NHibernate (originally written for Java but ported for .NET). These frameworks allow you to map database tables to .NET classes. Either ones you write yourself or ones generated by the tool (in Entity Frameworks case. EF in Visual Studio 2010 allows you to do Model-First and Database-First development. Model-First allows you to create a diagram of how you want your classes to relate to each other (e.g. A Customer class that has a collection of Addresses, Phone Numbers and Events) then generates a database to store that data. Database-First is the opposite. You create your database, and EF tries to make a model that reflects the Database structure. It takes care of connection string creation, entity change tracking and concurrency, and it presents the data in nice objects that in my opinion are generated pretty darned fast. Personally I have found EFs data retrieval faster than my own hand executed data retrieval and object population. WPF, with it's databinding capabilities, is geared more toward these dataobjects (here after I will just call them entities) than to DataReaders and DataAdapters. If you want to dive right in, here is a little Microsoft video on getting started with EF. Also be sure to check out WindowsClient.net as they have some good stuff there too. Later on, once you get the hang of EntityFramework, check out the MVVM design pattern.
