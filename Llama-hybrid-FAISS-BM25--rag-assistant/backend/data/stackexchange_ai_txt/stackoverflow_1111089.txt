[site]: stackoverflow
[post_id]: 1111089
[parent_id]: 1110844
[tags]: 
I have recently written a small terrain rendering engine in OpenGL that does something similar to what you are talking about. The technique I use is best described as texture splatting . I use five textures to accomplish this. Four of these textures are detail textures: grass, rock, water, and sand. These textures are smallish, 512x512 textures, and they are tiled across the terrain. The fifth texture is a mixmap. The mixmap is a giant texture that covers the entire terrain, in my case is 4096x4096. MixMap This mixmap uses all 4 color channels (r,g,b,a) to describe how much of a detail texture to display at that specific location. I am using the red color channel to determine how opaque the sand is, green is for grass, blue is for water, and alpha is for rock. This mixmap is calculated based off of the heightmap at initialization and I use altitudes to determine these values. For instance, close to the sea level, I mostly want water, so I set a high value in the blue channel and low values in the other channels. As I get higher into the mountains, I set the alpha color channel to a high value since I want a lot of rock texture, but I set all of the other color channels to lower values. Fragment Shader This mixmap is then put to use in the fragment shader, where I take these color channels of the mixmap and use them to combine the detail textures. Here is the GLSL code I am using for the fragment shader: uniform sampler2D alpha; uniform sampler2D grass; uniform sampler2D water; uniform sampler2D rock; uniform sampler2D sand; uniform float texscale; varying vec3 normal, lightDir ; void main() { // Get the color information vec3 alpha = texture2D( alpha, gl_TexCoord[0].st ).rgb; vec3 texSand = texture2D( sand, gl_TexCoord[0].st * texscale ).rgb; vec3 texGrass = texture2D( grass, gl_TexCoord[0].st * texscale ).rgb; vec3 texWater = texture2D( water, gl_TexCoord[0].st * texscale ).rgb; vec3 texRock = texture2D( rock, gl_TexCoord[0].st * texscale ).rgb; // Mix the colors together texSand *= mixmap.r; texGrass = mix(texSand, texGrass, mixmap.g); texWater = mix(texGrass, texWater, mixmap.b); vec3 tx = mix(texWater, texRock, mixmap.a); // Lighting calculations vec3 dl = gl_LightSource[0].diffuse.rgb; vec3 al = gl_LightSource[0].ambient.rgb; vec3 n = normalize(normal); vec3 d = tx * (dl * max( dot ( n, lightDir), 0.0 ) + al ); // Apply the lighting to the final color vec4 finalColor = vec4( min(d, 1.0), 1.0); gl_FragColor = mix(gl_Fog.color, finalColor, fogFactor); } The uniform texscale is a value that determines how many times the detail textures are tiled across the terrain. Higher values will make the detail textures look more crisp at the risk of making them look more repetitious.
