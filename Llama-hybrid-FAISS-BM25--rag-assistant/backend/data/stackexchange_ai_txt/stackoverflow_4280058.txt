[site]: stackoverflow
[post_id]: 4280058
[parent_id]: 4279975
[tags]: 
Should I only pass dependency of mocked type (Using MOQ) or I should pass proper class type. In your unit tests, you should pass a mock. There are several reasons: A mock is transparent : it allows you to check that the code under test did the right thing with the mock. A mock gives you full control , allowing you to test scenarios that are difficult or impossible to create with the real server (e.g. throw IOException ) A mock is predictable . A real server is not - it may not even be available when you run your tests. Things you do on a mock don't influence the outside world . You don't want to change data or crash the server by running your tests. A test with mocks is faster . No connection to the server or real database queries have to be made. That being said, automated integration tests which include a real server are also very useful. You just have to keep in mind that they will have lower code coverage, will be more fragile, and will be more expensive to create/run/maintain. Keep your unit tests and your integration tests separate. edit: some collaborator objects like your Cache object may also be very unit-test friendly. If they have the same advantages as that of a mock that I list above, then you don't need to create a mock. For example, you typically don't need to mock a collection .
