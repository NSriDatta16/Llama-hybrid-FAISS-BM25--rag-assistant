[site]: stackoverflow
[post_id]: 5106797
[parent_id]: 5073601
[tags]: 
So, lets look at you error messages, they are quite clear saying what is wrong. task.java:25: task.Cones is not abstract and does not override abstract method getVolumeCylinder() in task.GeometricShapes public static class Cones extends ThreeDShapes ^ task.java:58: task.Cylinder is not abstract and does not override abstract method getVolumeCylinder() in task.GeometricShapes public static class Cylinder extends ThreeDShapes ^ So, your interface GeometricShapes defines a method getVolumeCylinder() . (Why?) This means, every (non-abstract) class implementing this interface needs to have this method, too (if not some superclass is already implementing this). Why did you put these methods in the Interface? What does your GeometricShapes interface represent? A collection of shapes? A single shape (then the name should be in singular, not plural)? Think about this first, then you'll get the answer about which methods are useful here, and how to structure your subclasses. task.java:64: cannot find symbol symbol : variable cylinderBase location: class task.Cylinder return cylinderBase * cylinderHeight; ^ This error message (and all the following ones) mention variables that are not declared anywhere. Think about where you are using these variables, and of what object they would be properties. Then declare them in this object, and organize giving the right values to them. task.java:126: cannot find symbol symbol : class Cylinders location: class task new Cylinders() ^ This last message complains because you are trying to create an object of class Cylinders , and there is no such class. (You have a class named Cylinder , though.)
