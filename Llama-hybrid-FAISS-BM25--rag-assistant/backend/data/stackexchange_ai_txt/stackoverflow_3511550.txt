[site]: stackoverflow
[post_id]: 3511550
[parent_id]: 3511120
[tags]: 
Summarizing other answers I think that: Inmutability facilitates correctness (structs can be passed by reference and you know nothing will be destroyed by a faulty/malicious client) and code simplicity Mutability facilitates homogeneity : Spring and other frameworks create an object with no arguments, set object properties, and voi l√† . Also make interfaces easier using the same class for giving data and saving modifications (you don't need get(id): Client and save(MutableClient) , being MutableClient some descendant of Client. If there were an intermediate point (create, set properties, make inmutable) maybe frameworks would encourage more an inmutable approach. Anyway I suggest thinking in inmutable objects as "read only Java Beans" stressing the point that if you are a good boy and don't touch that dangerous setProperty method all will be fine.
