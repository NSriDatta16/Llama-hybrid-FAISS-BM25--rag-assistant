[site]: stackoverflow
[post_id]: 3605752
[parent_id]: 3605745
[tags]: 
You will get properites for any parameters defined and they will be vals (i.e., finals) case class User(name: String, group: String) val user = User("jsmith", "admins") // access both properties println("name: %s group: %s".format(user.name, user.group)) You can get this behavior with regular (i.e., non-case classes) as well: // creates two final public properties as well class User(val name: String, val group: String) // creates read/write public properties class User(var name: String, var group: String) val user = new User("jsmith", "admins") user.group = "guests" Case classes also bring a lot of other things as well such as a useful implementations of equality, hashcode and toString and a companion object with a factory method that eliminates the need to use new among other things. As you can see, a case class is not required to achieve what you want but it gets you there quickly. As for side effects, defining a case class generates some bit of code behind the scenes to give you what was described in the previous paragraph. These are often useful and I tend not to worry about them but it is good to know about them.
