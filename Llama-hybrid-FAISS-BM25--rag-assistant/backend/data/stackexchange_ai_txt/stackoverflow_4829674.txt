[site]: stackoverflow
[post_id]: 4829674
[parent_id]: 
[tags]: 
Are NHibernate ICriteria queries cached or put in the identity map?

Using NHibernate I usually query for single records using the Get() or Load() methods (depending on if I need a proxy or not): SomeEntity obj = session.Get (new PrimaryKeyId(1)); Now, if I execute this statement twice, like the example below, I only see one query being executed in my unittests: SomeEntity obj1 = session.Get (new PrimaryKeyId(1)); SomeEntity obj2 = session.Get (new PrimaryKeyId(1)); So far, so good. But I noticed some strange behaviour when getting the same object using a ICriteria query. Check out my code below: I get the first object instance. I then change the value of a property to 10 (the value in the database is 8), get another instance and finally check the values of the second object instance. //get the first object instance. SomeEntity obj1 = session.CreateCriteria(typeof(SomeEntity)) .Add(Restrictions.Eq("Id", new PrimaryKeyId(1))) .UniqueResult (); //the value in the database and the property is 8 at this point. Let's set it to 10. obj1.SomeValue = 10; //get the second object instance. SomeEntity obj2 = session.CreateCriteria(typeof(SomeEntity)) .Add(Restrictions.Eq("Id", new PrimaryKeyId(1))) .UniqueResult (); //check if the values match. Assert.AreEqual(8, obj2.SomeValue); Now, for some reason the assert fails, because the value is 10 of obj2 even though I asked for the object with a new query. the funny thing is, there are 2 exactly the same select queries being executed according to my unit test output window. My question: why are there 2 queries being executed if the second object is fetched from the first level cache? Am I missing something or is this a bug? Regards, Ted edit #1: using NHibernate v2.1.2GA edit #2: I added some extra explanation about the 2 queries being executed to the last paragraph.
