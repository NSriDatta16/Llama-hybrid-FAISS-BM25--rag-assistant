[site]: stackoverflow
[post_id]: 5144166
[parent_id]: 5010093
[tags]: 
The problem as you describe it boils down to avoiding what are called double-adds . As mentioned by others, you need to make your posts idempotent. This can be easily implemented at the framework level. The framework can keep a cache of completed responses. The requests have to have a request unique so that any retries are treated as such, and not as new requests. If the successful response gets lost on its way to the client, the client will retry with the same request unique, the server will then respond with its cached response. You are left with durability of the cache, how long to keep responses, etc. One approach is to remove responses from the server cache after a given period of time, this will depend on your app domain and traffic and can be left as a configurable step on the framework piece. Another approach is to force the client to sent acknowledgements. The acks can be sent either as separate requests (note that these could be lost too), or as extra data piggy backed on real requests. Although what I suggest is similar to what others suggest, I strongly encourage you to keep this layer of network resiliency to do only that, deal with drop requests/responses and not allow it to deal with duplicate resources from separate requests which is an application level task. Merging both pieces will mush all functionality and will not leave you with a clear separation of responsibilities. Not an easy problem, but if you keep it clean you can make your app much more resilient to bad networks without introducing too much complexity. And for some related experiences by others go here . Good luck.
