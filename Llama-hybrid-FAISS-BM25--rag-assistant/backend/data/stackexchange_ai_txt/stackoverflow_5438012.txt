[site]: stackoverflow
[post_id]: 5438012
[parent_id]: 4551135
[tags]: 
I think option 1, or something very close to it, is likely to be the most elegant solution available. Option 1 and the sample code should work, but the pattern is susceptible to being inadvertently used with the dialog changed to setCancelable(true) . If that happens then it is possible to dismiss the dialog by using the Back button and therefore skip the removeDialog(CONFIRM_DELETE_DIALOG) . That would cause the dialog to open next time with potentially the wrong value for position. For that reason, I think the option 1 approach should be adjusted to relocate the removeDialog(CONFIRM_DELETE_DIALOG) from the DialogInterface.onClickListener of onCreateDialog to a DialogInterface.OnDismissListener , set up in onPrepareDialog : protected void onPrepareDialog(int id, Dialog dialog, Bundle args) { switch (id) { case CONFIRM_DELETE_DIALOG: dialog.setOnDismissListener(new DialogInterface.OnDismissListener() { public void onDismiss(DialogInterface dialog) { removeDialog(CONFIRM_DELETE_DIALOG); } }); break; default: super.onPrepareDialog(id, dialog, args); } } An alternative, avoiding the use of onPrepareDialog , is to bind the DialogInterface.OnDismissListener in onCreateDialog : Dialog dialog = builder.create(); dialog.setOnDismissListener(new DialogInterface.OnDismissListener() { public void onDismiss(DialogInterface dialog) { removeDialog(CONFIRM_DELETE_DIALOG); } }); return dialog;
