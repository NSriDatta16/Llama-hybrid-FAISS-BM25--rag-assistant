[site]: stackoverflow
[post_id]: 5461231
[parent_id]: 1265857
[tags]: 
Great answer by David Glenn. Many thanks for putting me on the right track with creating custom Html helpers in Mvc. But, there are a couple issues with David's extension out of the box (in MVC3 w/Razor): Returning just a string will not work; it will actually display the string, tags and all, unless you wrap it on the view (UI) with MvcHtmlString.Create(). A more elegant approach is to change the return type of the helper function as an MvcHtmlString. You could also overload the Helper functions to accommodate both return types as well. If you are doing additional errors on a single model field, such as a RegEx check, etc., the helper method will fail because the initial "If..Then.." fails to check for an error count; just checking if it "Is Null" will not suffice. The Errors object will not be null, but all of it's properties will on the non-failing fields. So below is the CustomHtmlHelper class refactored to accommodate for the above two issues and also injects the correct css class name: #Region "Imports" Imports System.Runtime.CompilerServices #End Region Namespace Laddawn.Web.Mvc.Extensions Public Module CustomHtmlHelpers Public Function ValidationImage(ByVal helper As HtmlHelper, ByVal name As String) As MvcHtmlString If helper.ViewData.ModelState(name) Is Nothing _ OrElse helper.ViewData.ModelState(name).Errors Is Nothing _ OrElse helper.ViewData.ModelState(name).Errors.Count = 0 Then Return MvcHtmlString.Empty End If Dim tag As New TagBuilder("img") With tag .Attributes.Add("src", "/Content/Images/Mobile/alert.png") .Attributes.Add("alt", helper.ViewData.ModelState(name).Errors(0).ErrorMessage) .Attributes.Add("title", helper.ViewData.ModelState(name).Errors(0).ErrorMessage) .Attributes.Add("class", HtmlHelper.ValidationMessageCssClassName) End With Return MvcHtmlString.Create(tag.ToString(TagRenderMode.SelfClosing)) End Function End Module End Namespace In your Css file, create a class as such: img.field-validation-error { vertical-align: text-bottom; margin-left: 5px; } Now your Css can manipulate the image separately from the massage css too. Notes: Don't forget to change the image path to suit the needs of your project. This is another area where you could potentially add an additional parameter for imagePath and use a default in the helper method if one is not passed in. Apologies for the VB version (for you C# developers), my current project is all VB/NET and if you want to use the above code, just use the converter over at Telerik ( http://converter.telerik.com/ )
