[site]: stackoverflow
[post_id]: 724284
[parent_id]: 724209
[tags]: 
My instincts tell me that the closer a test is to the code being tested the more likely you are to get complete test coverage. In the comments to Scott's blog posting is a remark that just testing the public interface is considered best practice by some, but I would argue the test framework is not a typical class consumer. If your code cannot be tested using only public entry points, then you have a design problem. You should read more about TDD and SOLID principles (especially single responsibility principle and dependency inversion). Then you will understand that following TDD approach will help you write more testable, flexible and maintainable code, without the need for using such "hacks" as testing classes' private parts. I also highly recommend reading Google's guide to testability by Mi≈°ko Hevery , it has plenty of code samples which cover these topics.
