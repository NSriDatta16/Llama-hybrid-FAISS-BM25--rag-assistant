[site]: stackoverflow
[post_id]: 2736954
[parent_id]: 2736666
[tags]: 
1 Does file downloading becomes fast when multiple threads is used? In this code i am not able to see the benefit. No. I would be very surprised if that was the case. The CPU would never have a problem of keeping up with the feeding the network-buffer. 2 How should i decide how many threads should i create ? In my opinion, 0 extra threads. 4 The file which file receiver receives is valid and not corrupted but checksum (i used FileUtils of common-io) does not match. Whats the problem? Make sure you don't accidentally rely on strings and specific encodings. 5 This code gives out of memory when used with large file(above 100 Mb) i.e. because byte array which is created. How can i avoid? The obvious solution would be to read smaller chunks of the file. Have a look at the read method of DataInputStream http://java.sun.com/j2se/1.4.2/docs/api/java/io/DataInputStream.html#read%28byte[],%20int,%20int%29 And, finally, some general pointers in the matter: Instead of using multiple threads for this kind of thing, I strongly encourage you to have a look at the java.nio package, specifically java.nio.channels and the Selector class. EDIT: If you're really keen on getting it super-efficient, and have very large files, you could benefit from using UDP, and handle packet order and acknowledgements yourself. TCP does for instance guarantee that the packets received come in the same order as the packets sent. This is not something that you rely heavily on (since you could easily encode the "byte-offset" for each datagram yourself) and thus don't need to "pay" for.
