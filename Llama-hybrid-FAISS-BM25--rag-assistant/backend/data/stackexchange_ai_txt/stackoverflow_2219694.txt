[site]: stackoverflow
[post_id]: 2219694
[parent_id]: 
[tags]: 
Cyclic serialisation with Many to Many relationship with Hibernate

I have a parent (Program) pojo with a many-to-many relationship with their children (Subscriber). The problem is when it serialises a Program, it also serialises the Program's Subscribers, which involves serialising their Programs, which involves serialising their Subscribers, until it has serialised every single Program & Subscriber in the database. The ERD looks like: Program Subscriber This means what was a tiny 17KB block of data (json) being returned has become a 6.9MB return. Thus in turn blows out the time to serialise the data and then return it. Why is my parent returning children returning parents returning children? How can I stop this so I only get the Subscribers for each Program? I'm assuming I've done something wrong with my annotations, perhaps? I would like to maintain a many-to-many relationship but without this deeply nested data retrieval. (Note: I have prior tried adding as many Lazy annotations I can find just to see if that helps. It doesn't. Perhaps I'm doing that wrong too?) Program.java @Entity @Table(name="programs") public class Program extends Core implements Serializable, Cloneable { ... @ManyToMany() @JoinTable(name="program_subscribers", joinColumns={@JoinColumn(name="program_uid")}, inverseJoinColumns={@JoinColumn(name="subscriber_uid")}) public Set getSubscribers() { return subscribers; } public void setSubscribers(Set subscribers) { this.subscribers = subscribers; } Subscriber.java @Entity @Table(name="subscribers") public class Subscriber extends Core implements Serializable { ... @ManyToMany(mappedBy="subscribers") public Set getPrograms() { return programs; } public void setPrograms(Set programs) { this.programs = programs; } Implementation public Collection list() { return new Programs.findAll(); }
