[site]: stackoverflow
[post_id]: 2119003
[parent_id]: 2117651
[tags]: 
Most of the (earlier) answers here are a reflection of the fact that most people do not know what SQL is (its an implementation of Relational Calculus) or what that means (that it's a form of Predicate Logic). The following statements are true of both Prolog and SQL: they are both logic-driven they can both store, express and use relations (logical relationships in Prolog) they can both store and express complex logical conditions they both have facts(data in SQL) and can derive conclusions from those facts they both have queries, that do in fact mean the same thing they both have data(facts in Prolog) and use them similarly they are both programming languages they are both turing-complete (though it is somewhat difficult to access this in both of them) etc, etc.. Generally, people are not aware of these equivalences between them: "Facts" and "Data" are the same thing. This is straight out of Codd's original paper. A "Relation" in Relational Theory is the same thing as a "Table" in SQL, is the same thing as a Relation or relational function in Predicate Logic and is the same thing as a tuple-set in Set Theory An aliased table-expression (i.e., a View, etc.) in SQL is the same thing as a Rule in Prolog. So what are their differences? Although they operate across the same conceptual domains, their focuses are in completely different directions. In Prolog terms, SQL is primarily a Fact and Relation(set) engine, whereas Prolog is primarily a Rules and Inferencing engine. Each can do the other, to a limited extent, but it becomes increasingly difficult with even small increases in complexity. For instance, you can do inferencing in SQL, but it is almost entirely manual in nature and not at all like the automatic forward-inferencing of Prolog. And yes, you can store data(facts) in Prolog, but it is not at all designed for the "storage, retrieval, projection and reduction of Trillions of rows with thousands of simultaneous users" that SQL is. Plus, SQL is primarily a Server-language paradigm, whereas Prolog is primarily a Client-language paradigm.
