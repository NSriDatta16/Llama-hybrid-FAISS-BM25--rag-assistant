[site]: stackoverflow
[post_id]: 3375612
[parent_id]: 3375494
[tags]: 
See following links CouchDB Vs MongoDB MongoDB or CouchDB - fit for production? DB-Engines - Comparison CouchDB vs. MongoDB Update : I found great comparison of NoSQL databases. MongoDB (3.2) Written in: C++ Main point: JSON document store License: AGPL (Drivers: Apache) Protocol: Custom, binary (BSON) Master/slave replication (auto failover with replica sets) Sharding built-in Queries are javascript expressions Run arbitrary javascript functions server-side Has geospatial indexing and queries Multiple storage engines with different performance characteristics Performance over features Document validation Journaling Powerful aggregation framework On 32bit systems, limited to ~2.5Gb Text search integrated GridFS to store big data + metadata (not actually an FS) Data center aware Best used : If you need dynamic queries. If you prefer to define indexes, not map/reduce functions. If you need good performance on a big DB. If you wanted CouchDB, but your data changes too much, filling up disks. For example : For most things that you would do with MySQL or PostgreSQL, but having predefined columns really holds you back. CouchDB (1.2) Written in: Erlang Main point: DB consistency, ease of use License: Apache Protocol: HTTP/REST Bi-directional (!) replication, continuous or ad-hoc, with conflict detection, thus, master-master replication. (!) MVCC - write operations do not block reads Previous versions of documents are available Crash-only (reliable) design Needs compacting from time to time Views: embedded map/reduce Formatting views: lists & shows Server-side document validation possible Authentication possible Real-time updates via '_changes' (!) Attachment handling Best used : For accumulating, occasionally changing data, on which pre-defined queries are to be run. Places where versioning is important. For example : CRM, CMS systems. Master-master replication is an especially interesting feature, allowing easy multi-site deployments.
