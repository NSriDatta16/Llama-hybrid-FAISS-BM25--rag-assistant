[site]: stackoverflow
[post_id]: 3572358
[parent_id]: 3571887
[tags]: 
Mr. Hankin's answer is more elegant, but the following is more in keeping with the approach you began with: import sys import string import nltk from nltk.corpus import gutenberg def longest_element(p): """return the first element of p which has the greatest len()""" max_len = 0 elem = None for e in p: if len(e) > max_len: elem = e max_len = len(e) return elem def downcase(p): """returns a list of words in p shifted to lower case""" return map(string.lower, p) def unique_words(): """it turns out unique_words was never referenced so this is here for pedagogy""" # there are 2.6 million words in the gutenburg corpus but only ~42k unique # ignoring case, let's pare that down a bit for word in gutenberg.words(): words.add(word.lower()) print 'gutenberg.words() has', len(words), 'unique caseless words' return words print 'loading gutenburg corpus...' sentences = [] for sentence in gutenberg.sents(): sentences.append(downcase(sentence)) trigger = sys.argv[1:] target = longest_element(trigger).lower() last_target = None while target != last_target: matched_sentences = [] for sentence in sentences: if target in sentence: matched_sentences.append(sentence) print '===', target, 'matched', len(matched_sentences), 'sentences' longestSentence = longest_element(matched_sentences) print ' '.join(longestSentence) trigger = longestSentence last_target = target target = longest_element(trigger).lower() Given your sample sentence though, it reaches fixation in two cycles: $ python nltkgut.py Thane of code loading gutenburg corpus... === target thane matched 24 sentences norway himselfe , with terrible numbers , assisted by that most disloyall traytor , the thane of cawdor , began a dismall conflict , till that bellona ' s bridegroome , lapt in proofe , confronted him with selfe - comparisons , point against point , rebellious arme ' gainst arme , curbing his lauish spirit : and to conclude , the victorie fell on vs === target bridegroome matched 1 sentences norway himselfe , with terrible numbers , assisted by that most disloyall traytor , the thane of cawdor , began a dismall conflict , till that bellona ' s bridegroome , lapt in proofe , confronted him with selfe - comparisons , point against point , rebellious arme ' gainst arme , curbing his lauish spirit : and to conclude , the victorie fell on vs Part of the trouble with the response to the last problem is that it did what you asked, but you asked a more specific question than you wanted an answer to. Thus the response got bogged down in some rather complicated list expressions that I'm not sure you understood. I suggest that you make more liberal use of print statements and don't import code if you don't know what it does. While unwrapping the list expressions I found (as noted) that you never used the corpus wordlist. Functions are a help also.
