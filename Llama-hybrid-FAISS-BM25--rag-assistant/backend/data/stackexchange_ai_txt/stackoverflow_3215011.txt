[site]: stackoverflow
[post_id]: 3215011
[parent_id]: 3161380
[tags]: 
I strongly prefer feature by feature development. Mostly because if you finish 80% of the features, you have a working app, but if you finish 80% of the layers, you've got nothing. It's all a question of what you're optimizing for. Developing feature-by-feature allows you to get a new version out faster. It also helps you find gaps in your architecture where it doesn't support your features. But it requires people to have general skills -- Everyone needs to be able to do a little database design, a little middleware coding, and a little front-end layout. They don't have to be brilliant, but they have to be able to know when they're at the edge of their skill and call for help. Developing layer-by layer allows you to get the most out of your exports, but you run into some dangers. If your database guy doesn't understand the front-end requirements, you DB may be organized in ways that require the front end to make many queries. If your middleware is developed in an OO manner, you may have the "Impedance Mismatch" with your database or front end. You may also end up with things being built in the wrong layer, because "we can't wait for the middleware to be updated, so we'll just do it in the front end." In my experience, there's always more we want to do than we have time for. I prefer feature-by-feature development, because I can delay features to version 2 and release a useful site. I can't delay a layer, leaving me with schedule slips.
