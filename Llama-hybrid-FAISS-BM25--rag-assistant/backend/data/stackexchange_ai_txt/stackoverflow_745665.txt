[site]: stackoverflow
[post_id]: 745665
[parent_id]: 745357
[tags]: 
I'd avoid the key/value Zend style approach you mentioned before. The problem is it becomes trivial to create two different URLs http://www.example.com/controller/action/var1/value1/var2/value2 http://www.example.com/controller/action/var2/value2/var1/value1 that point to the same resource. While this works, part of the success of MVC style frameworks for web applications is they make it easier to provide a clean URL structure, and to associate a single URL on your site with every resource. The var1/value1/var2/value2 approach offers little advantage over key/value query strings. The approach I'd take here is to eschew keys, and just just use values http://www.example.com/example/list/value1/value2/value3 which will be passed into the action method as an array class example extends Controller{ public function list($args){ //$args[0] = 'value1'; //$args[1] = 'value2'; //$args[2] = 'value3'; } } By doing it this way, you're leaving it up to the end users of your system to decide how they want to handle $GET style variables, while encouraging a design that leads to cleaner, more stable, single resource URLs.
