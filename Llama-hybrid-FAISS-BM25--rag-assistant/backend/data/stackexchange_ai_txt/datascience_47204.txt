[site]: datascience
[post_id]: 47204
[parent_id]: 
[tags]: 
How do I calculate the weight values for a piece-wise linear ReLU network approximating function?

I'm currently studying ReLU neural networks and their ability to approximate functions. Specifically, I'm looking at using ReLU networks to approximate a function using piece-wise linear components. I've been referencing this paper and specifically the excerpt in the snippet below. Let's say I have a known function, how would I go about actually generating a ReLU network that approximates it? That is, I want a ReLU neural network that outputs a linear piece-wise function. For example, looking at the right plot on the image below: My issue here is that even when I know the function, it's very difficult to to determine the weights to turn on the ReLU with the correct slopes at the correct time. I can cause delays using the ReLUs by modifying the b parameter (per the equation), however, it seems like the current slope must be calculated such that all the previous ReLU slopes are negated.. this is due to the fact that once a ReLU turns on for some X input, it doesn't turn off as X increases. So my question: Assuming I know a function perfectly (can calculate slopes, etc.) and I want to approximate it piece-wise linear using a ReLU network, how do I actually determine the weight values (i.e. slopes of each ReLU)? This appears to be a non-trivial task.
