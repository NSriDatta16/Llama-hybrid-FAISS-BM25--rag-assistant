[site]: stackoverflow
[post_id]: 4958624
[parent_id]: 
[tags]: 
Deserialization of structure data sent by Big Endian system in Little Endian system

I have a C program that receives data from a mainframe in a UDP packet over sockets. The host of the C program is changing from Unix (big endian) to Linux (little endian) and the program no longer works. I do not currently have the option of changing the mainframe client program. The program performs a recvfrom and receives data into a char array. Previously we were able to simply cast this buffer to a structure matching what was passed from MF and everything worked perfect. Now, due to the different byte alignments the mapping to the structure fails. Here is the structure and some code. struct CCClntPkt { unsigned short packet_type; unsigned short reply_socket; unsigned long msg_ID; unsigned short msg_length; unsigned char client_string[250]; }; The code previously used to cast the received data buffer to this structure looks something like: char BCpacket_in[MAX_PACKET]; struct CCClntPkt *pClntPkt; rcv_cnt = recvfrom(BCServerSocket, BCpacket_in, sizeof(BCpacket_in),0x0,(struct sockaddr *)&from, &fromlen); if (rcv_cnt > 0) { pClntPkt = (struct CCClntPkt *) &BCpacket_in; } I was able to get the correct values for packet_type and reply_socket by using ntohs but the character field client_string is mangled. I also tried putting a pragma pack(1) before and pragma pack(0) after the structure but there still seems to be an alignment problem. I also tried bit shifting values from BCpacket_in and was able to get the correct values for packet_type and reply_socket but cannot figure out how to pull out the ulong msg_ID. Code for that was: packet_type = BCpacket_in[0] I am pretty stumped at this point so any help is appreciated. I am not the original author of this program and my C knowledge is pretty limited. I don't mind doing the work though so I would appreciate being provided any relevant references as well. Thanks!
