[site]: stackoverflow
[post_id]: 453938
[parent_id]: 453879
[tags]: 
I think the main point is in the second-to-last paragraph in Jon's response: Most people think of "designing for inheritance" in terms of application design, i.e. they just want it to work, and if it doesn't, it can be fixed. But it's a whole different beast to design an inheritable class as an API for other people to work with - because then the proteced fields and a whole lot of implementation details implicitly become part of the API contract which people using the API have to understand, and which cannot be changed without breaking the code using the API. If you make a mistake in the design or the implementation, chances are you can't fix it without breaking code that depends on it.
