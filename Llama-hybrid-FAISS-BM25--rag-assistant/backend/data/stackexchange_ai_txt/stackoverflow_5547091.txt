[site]: stackoverflow
[post_id]: 5547091
[parent_id]: 5546732
[tags]: 
You've mentioned a number of problems, several of which IMO have little to do with Xcode or Subversion. Let's take your numbered items: Subversion can absolutely handle resource files, and you should use it to control those files. The designers can and should be taught to use svn to check files in and out at the command line, or should be given (and trained on) one of the GUI svn clients such as Versions . It sounds like your junior developers should also be trained on Subversion. It is true that merging can cause problems, but nothing that should ever cause you to start from scratch in any respect. Many shops have a set of simple rules like: a) The main development branch should always build without errors or warnings; b) If you break the main dev branch while merging (or doing anything else), it's up to you to fix it ASAP. Developers can merge their changes and fix whatever problems crop up before they commit to the main branch, so there's little excuse for the main branch to ever be broken. The conventional Subversion setup has trunk , branches , and tags directories. You don't have to do it this way, but people do because it works well. Please read (and have your team read) Version Control with Subversion for a thorough treatment of all these issues. Printed copies are available from O'Reilly -- buy several, at least. Exactly how you organize your repository isn't as important as getting the team to agree to (and stick to) some organization scheme. I don't have an opinion on Hudson or continuous integration generally. However, I doubt that implementing CI is going to help much until you get the other issues sorted. Other thoughts: It's time for your senior developers to learn some Objective-C. Get the junior developers to teach them -- both groups will learn a lot. Xcode really shouldn't be much of a factor here. Sure, it has integrated support for Subversion, but it's still just a svn client, and the user still needs to know how to branch, how to merge, how to resolve conflicts, what the conventions are for creating branches and naming tags and such in your organization, etc. To address your actual question, a typical work flow is something like this, depending on local convention: Developer starts working on a task. Opens the task in the defect tracking system, enters analysis of the bug to be fixed or feature to be implemented, enters a plan or design for the code to be changed or added, enters a time estimate or level of difficulty or similar, possibly enters a test plan for the change. Developer creates a new branch for the change, or brings their own branch up to date with the main branch. Developer implements changes, committing to their development branch often to avoid losing work and so that they can easily go back to previously committed versions. When ready, developer checks out main development branch to another directory on their machine. They can then merge changes to that directory to ensure that the project builds and nothing has been broken by their change. Developer commits the changed main dev branch. Developer updates task in defect tracking system. There's usually some informal communication between developers so that two people don't end up making major conflicting changes to the same part of the code at the same time. Some of this can be handled by the person assigning the tasks, but developers who are working well as a team usually have some idea of who is working on what. If that's not the case, or even if it is, you might need to implement some practices to improve communication, like periodic code reviews, going to lunch together, etc.
