[site]: stackoverflow
[post_id]: 1378387
[parent_id]: 1373980
[tags]: 
I've probably missed the point of this whole discussion, I frequently do, but here goes, an invitation for brickbats and downvoting ... If it's throwaway code, throw it away ! If you don't want to throw it away then follow the good advice above. For me, and I write a fair amount of throwaway code, the question of whether it gets thrown away or put into a reusable state and kept against a rainy day boils down to the economics. Can I foresee circumstances in which this code will be useful again ? Once in a blue moon, twice a year, every month ? Will I be able to rewrite this code in less time than it takes to make it reusable ? If the answer to this question is No, then how many times will I have to reuse it to make it worth while enhancing it now ? (Back to the previous question.) If I do make this code reusable, will I be able to find it again when I next want it ? (Anyone ever had the experience of knowing, with absolute certainty, that somewhere in your code repository there is just the fragment you want, but not having a clue what it was called, nor where to look nor what to grep for ?) Finally, the 3 step approach to making quickly-written code reusable. Stop after whichever of these steps you like: 1) Document the code as a black-box. Inputs, outputs, operation(s). File this document carefully. 2) Write instructions about how to build/interpret/install the code, in case you ever have to port it. File these instructions carefully. 3) Only if worth the effort -- improve the source code quality to make the code maintainable in future. Make sure the sources are in the source control system and findable. Regards Mark
