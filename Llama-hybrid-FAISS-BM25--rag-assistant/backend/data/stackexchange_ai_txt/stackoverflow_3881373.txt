[site]: stackoverflow
[post_id]: 3881373
[parent_id]: 3881077
[tags]: 
When using sessions, the session ID is the only information used to identify a session. Because of this, the session ID is a sensitive information. Now both attacks, session hijacking and session fixation , aim for a valid session ID of a victim to gain access on that session. As for session hijacking, the attacker tries to obtain a victims session ID, and as for session fixation, the attacker tries to foist a prepared session on the victim. To protect your application from those session attacks, there are two common safety measures: protect valid session IDs, and authenticate usage of sessions. With PHPâ€™s default session settings, the session ID is transmitted using a cookie (see session.use_only_cookies ). You can protect this cookie by using a secure connection with SSL/TLS and by setting session.cookie_httponly to true so that the cookie can only be read when sent via HTTP and not by a client side program like JavaScript. Additionally, you could authenticate the use of a session by associating a fingerprint of the client with the session. This could be a combination of user agent identifier and other request header fields. Furthermore, you should change the ID of a session with every verification of authenticity or change of authorization. You can use session_regenerate_id(true) for this with an invalidation of the old session ID.
