[site]: stackoverflow
[post_id]: 3331611
[parent_id]: 3330215
[tags]: 
I don't know if you can do exactly what you want, which seems to be binding the DataGridView to two different DataTable instances simulataneously. I don't think the DataGridView class supports that -- or if it does it's a ninja-style move I haven't seen. Per MSDN , your best bet is probably using the CellFormatting event on the DataGridView and check for when the cell being formatted is in the lookup column, then you could substitute your value from the other table. Use an unbound column for the WorkplaceName column, hide the UserWorkplaceID column and then implement the CellFormatting event handle to look up the value in the row, e.g.: private void dgv_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e) { if (dgv.Columns[e.ColumnIndex].Name.Equals("WorkplaceName") { // Use helper method to get the string from lookup table e.Value = GetWorkplaceNameLookupValue( dataGridViewScanDetails.Rows[e.RowIndex].Cells["UserWorkplaceID"].Value); } } If you've got a lot of rows visible, this might impact performance but is probably a decent way to get it working. If this doesn't appeal to you, maybe use the DataTable.Merge() method to merge your lookup table into your main table. A quick glance at one of my ADO.NET books suggests this should work, although I have not tried it. But I'm not sure if this is too close to the idea suggested previously which you shot down. As for your second question about the lookup combobox, you should really post it in a separate question so it gets proper attention.
