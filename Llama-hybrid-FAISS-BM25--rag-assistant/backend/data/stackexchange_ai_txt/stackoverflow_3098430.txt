[site]: stackoverflow
[post_id]: 3098430
[parent_id]: 3095679
[tags]: 
Basically, for an authentic Pong feel, you need to implement your own physics. Classic games generally implement physics as simple 2D velocity and position (and maybe acceleration), and then fake everything else. (It's worth noting that even modern games fake as much as they can get away with. It's not worth implementing something the hard way if you can do it the easy way and still get the same gameplay feel.) The "faked" physics for Pong should be fairly simple. Here is a very basic, not necessarily complete bit of simplistic physics for you: Vector2 position; Vector2 velocity; protected override void Update(GameTime gameTime) { position += velocity * (float)gameTime.ElapsedGameTime.TotalSeconds; if((IsInsideLeftBat(position) && velocity.X = 0) { velocity.X = -velocity.X; // Bounce the other way // To change things up, maybe you can change velocity.Y too. } // And of course handle the ball going out of the play field, scoring, etc... } Now, say you really have need for real physics in your game. A pong game with real physics could be fun ( in fact somebody has already done it, even real-er ). The thing I said about "faking it" still applies. Physics in games is usually more about tweaking things to get something that feels right than actual realism. Perhaps you need to increase your bounce coefficient to 1.1, and maybe add some linear drag to the ball so it doesn't fly out of control? (Or if you're having trouble getting the ball to the other side, try reducing linear drag.) Actually what is more likely for a "main character" in a game - you want to keep it in the physics simulation so it can interact with things (perhaps your play field is littered with obstacles - that could be fun) - but you want to have complete control over its motion. To do this simply, after your physics engine update runs, go in and change any values you don't like! In Pong's case this might be something simple like resetting the velocity of the ball so it moves with a constant speed each frame. I imagine you're already doing something like this for the paddles - to set their position each frame. (I used this approach when I made a platformer on a physics engine .) Another alternative way to fake things might be to add a collision handler to the paddles that sets the ball's velocity just how you like it.
