[site]: crossvalidated
[post_id]: 615673
[parent_id]: 
[tags]: 
What do I do when a false negative is far more expensive than a false positive?

I'm not sure how to 'responsibly' balance my model to account for this. I could predict a probability and give that to the business ('predict_proba' in SKlearn) but experience in the past has thought me that I should be the one (they put it on 0.9 because they felt more safe that way). I'm considering resampling the training data in some way... Let's say I'm in charge of an algorithm that removes rotten apples, which is extremely hard (let's say that without bootstrapping it classifies 10% of the rotten apples incorrectly as good apples, and 20% of the good apples as bad apples, but not relevant for this question I think). The ratio between good & bad apples is 1000/1. The company sells apples for 50 cnts. Selling a rotten apple costs them on average 30 dollars as a customer will often return it and not come back. Catching a rotten apple also costs them 1 cnt for returning it too the farmer. Sending a good apple to the farmer costs them 4 euro's as it kills the relationship with the farmer and the apple gets returned. Without any additional work on the features and modelling, could I resample (bootstrap) training data (ratio good & bad is 1000/1) in such a way to align with the cost ratio of the apple value, such that a model is most likely to create the most value? Or are there other ways?
