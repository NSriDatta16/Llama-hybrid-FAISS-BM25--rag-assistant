[site]: stackoverflow
[post_id]: 1749863
[parent_id]: 1749657
[tags]: 
As the commenters on the question point out - you don't have the necessary RAM, and you don't need to store it all. Covering the permutations in sort sequence is not the most efficient approach to password cracking, although it will ultimately be effective. An approach to achieving full coverage is to iterate 0 through the number of permutations and encode the value with the size of your character set as a base. This can be scaled to the size of your character set quite easily. (pseudocode, but you get the idea) passChars = '[all characters used in this attempt]' permutationCount = 8^len(passChars) #crypt(3) only uses 8 chars output = '' for looper = 0 to permutationCount - 1 localTemp = looper while localTemp > 0 output += passchars[localTemp%len(passchars)] # % being modulus localTemp = floor(localTemp/len(passChars))
