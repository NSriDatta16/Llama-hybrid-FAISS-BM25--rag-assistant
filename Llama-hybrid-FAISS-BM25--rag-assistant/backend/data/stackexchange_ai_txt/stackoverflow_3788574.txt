[site]: stackoverflow
[post_id]: 3788574
[parent_id]: 3785802
[tags]: 
You need to keep in mind that App Engine's datastore requires you to rethink your usual way of designing databases. It goes against intuition at first but you must denormalize your data as much as possible if you want your application to be scalable. The datastore has been designed this way. The approach I usually take is to consider first what kind of queries will need to be done in different use cases, eg. what data do I need to retrieve at the same time ? In what order ? What properties should be indexed ? If I understand correctly, your main goal is to fetch a list of products with complete details. BTW, if you have other query scenarios - ie. filtering on price, type, etc - you should take them into account too. In order to fetch all the data you need from only one query, I suggest you create one model which could look like this : class ProductPart(db.Model): product_name = db.StringProperty() product_image_url = db.StringProperty() product_active = db.BooleanProperty(default=True) product_description = db.StringListProperty(indexed=False) # Contains product description in all languages part_name = db.StringProperty() part_image_url = db.StringProperty() part_type = db.StringListProperty(indexed=False) # Contains part type in all languages part_label = db.StringListProperty(indexed=False) # Contains part label in all languages part_price = db.ListProperty(float, indexed=False) # Contains part price in all currencies part_default = db.BooleanProperty() part_optional = db.BooleanProperty() About this solution : ListProperties are set to indexed=False in order to avoid exploding indexes if you don't need to filter on them. In order to get the right description, label or type, you will have to set list values always in the same order. For example : part_label[0] is English, part_label[1] is Spanish, etc. Same idea for prices and currencies. After fetching entities from this model you will have to do some in-memory manipulations in order to get the data nicely structured the way you want, maybe in a new dictionary. Obviously, there will be a lot of redundancy in the datastore with such a design - but that's okay, since it allows you to query the datastore in a scalable fashion. Besides, this is not meant as a replacement for the architecture that you had in mind, but rather an additional Model designed specifically for the user-facing kind of queries that you need to do, ie. retrieving lists of complete product/parts information. These ProductPart entities could be populated by background tasks, replicating data located in your other normalized entities which would be the authoritative data source. Since you have plenty of data storage on App Engine, this should not be a problem.
