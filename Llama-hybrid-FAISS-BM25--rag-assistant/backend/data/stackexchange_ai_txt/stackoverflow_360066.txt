[site]: stackoverflow
[post_id]: 360066
[parent_id]: 360040
[tags]: 
The answers by Bobby, Bill and Corbin are wrong. O(1) is not slower than O(log n) for a fixed/bounded n: log(n) is constant, so it depends on the constant time. And for a slow hash function, ever heard of md5? The default string hashing algorithm probably touches all characters, and can be easily 100 times slower than the average compare for long string keys. Been there, done that. You might be able to (partially) use a radix. If you can split up in 256 approximately same size blocks, you're looking at 2k to 40k binary search. That is likely to provide much better performance. [Edit] Too many people voting down what they do not understand. String compares for binary searching sorted sets have a very interesting property: they get slower the closer they get to the target. First they will break on the first character, in the end only on the last. Assuming a constant time for them is incorrect.
