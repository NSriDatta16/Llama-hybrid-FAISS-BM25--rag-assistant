[site]: stackoverflow
[post_id]: 844215
[parent_id]: 
[tags]: 
How do you manage non-user facing work in a strict scrum shop?

We're a medium sized engineering shop (10-20). We are great at prioritizing and structuring work on our user facing stories and making customers happy. But the cobbler's children have no shoes. If it isn't about customers, we have 0 process. I'm looking for systems to ensure we correctly prioritize and accomplish the non user facing work to keep a dev shop running: QA environments (pretty heavy, in our case), continuous integration systems, the packaging, and so forth. Now, resources are always limited. We don't want to give the cobblers children 10 pair of the fanciest shoes, and specialized bike shoes to boot. We want to do the right, necessary work, with the same scrummy discipline that is applied to the rest of our development. Tell me what system works for you: how to you prioritize and organize non-user facing work ? I want systems that are simple and integrate smoothly with scrum. (I'm aware of a red box at the top of this text, indicating that Stack Overflow's automated question parser thinks this is a subjective question that can't be answered - I think there are likely 2 or 3 excellent answers that can be or have been proven viable - and process is integral to programming. So here is some psuedocode representing our process. Fix this algorithym). IBacklog GetBacklogForWork(IWork requestedWork) { if(requestedWork.IsUserFacing) return new PrioritizedBacklogRepository(); // Everything else. Priority largely based on spare time and who thinks its a neat idea return new RandomizedPriorityRepository(); } void HandleIncomingSuggestionsForWork(IEnumerable(IWork) ideas) { foreach(work in ideas) GetBacklogForWork(work).Insert(work); }
