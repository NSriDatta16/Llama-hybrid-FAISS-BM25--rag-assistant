[site]: stackoverflow
[post_id]: 2766134
[parent_id]: 2765779
[tags]: 
First of all, the real question: what are you trying to achieve (at a higher level) ? Now, for this peculiar question there is a number of alternative. Containers cannot store heterogeneous data, so you can: give all Hello a common base class and add virtual methods, then use pointers, take care of memory ownership ( unique_ptr or boost::ptr_list would be great) if there is a precise set of types, use boost::variant , it's statically checked so you have reasonable guarantees else you should consider wrapping it into a storage class which would use boost::any under the covers The common base class is the usual approach in this situation. If there is no reason to have polymorphism, then use preferably variant and if nothing else any .
