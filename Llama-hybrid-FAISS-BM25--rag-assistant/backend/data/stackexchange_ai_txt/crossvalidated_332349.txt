[site]: crossvalidated
[post_id]: 332349
[parent_id]: 
[tags]: 
Deep learning/Machine Learning to Predict Function Values

Let $f$ be a mapping from dataset space $\mathcal{D}$ to $\mathbb{R}$, where $$ \mathcal{D}:=\{M_1,M_2,\ldots,M_k\} $$ with $M_i\in\mathbb{R}^{n\times n}$ a symmetric matrix. Typically, $n=36$. We can, for a given matrix $M$, compute $f(M)$; however, even though the function $f$ is well-defined, it is computationally pretty complicated, so it costs usually a lot of time to determine the function values when we are dealing with large dataset spaces $\mathcal{D}$, i.e. large$=k=1$mill. Hence, I am exploring new fields to speed up this process. I came across a machine learning cheat-sheet and I think that ML might be able to help us out here to solve our problem. So, I am aiming at predicting the function value of $f$ for a given matrix $M$. My, probably naive, idea was to divide the dataset space into disjunct spaces \begin{align} \mathcal{D}&:=\{M_1,M_2,\ldots,M_k\}\\ &=\{M_1,M_2,\ldots,M_\ell\}\cup \{M_{\ell+1},\ldots,M_k\}\\ &=\mathcal{D}_{train-test}\cup \mathcal{D}_{predict}. \end{align} Additionally, I was thinking of representing matrices $M$ of the train/test set as rows of data using its elements $m_{ij}$, i.e. to write the space $\mathcal{D}_{train-test}$ as a "proper dataset": \begin{align} \text{matrix } M_1:\quad & m_{11}^1\quad & m_{12}^1 \quad& \cdots &m_{nn}^1 \quad & f(M_1)\\ \text{matrix } M_2:\quad & m_{11}^2\quad & m_{12}^2 \quad& \cdots &m_{nn}^2 \quad & f(M_2)\\ \vdots\quad & \vdots\quad & \vdots \quad& \cdots &\vdots \quad & \vdots\\ \text{matrix } M_\ell:\quad & m_{11}^\ell\quad & m_{12}^\ell \quad& \cdots &m_{nn}^\ell \quad & f(M_\ell) \end{align} to predict by using some machine learning methods (SVR according to the scikit-learn algorithm cheat-sheet) the function values in the following table: \begin{align} \text{matrix } M_{\ell+1}:\quad & m_{11}^{\ell+1}\quad & m_{12}^{\ell+1} \quad& \cdots &m_{nn}^{\ell+1} \quad & ?\\ \vdots\quad & \vdots\quad & \vdots \quad& \cdots &\vdots \quad & \vdots\\ \text{matrix } M_k:\quad & m_{11}^k\quad & m_{12}^k \quad& \cdots &m_{nn}^k \quad & ? \end{align} On the other hand, deep learning methods might be interesting as well, but I am by no means an expert. Therefore, I would really appreciate your suggestions. How can I approach this problem?
