[site]: stackoverflow
[post_id]: 3082281
[parent_id]: 3081764
[tags]: 
Look at the has_many options in the ActiveRecord::Associations::ClassMethods API located here: http://rails.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M001316 This is the most interesting quote: :conditions Specify the conditions that the associated object must meet in order to be included as a WHERE SQL fragment, such as authorized = 1. Record creations from the association are scoped if a hash is used. has_many :posts, :conditions => {:published => true} will create published posts with @blog.posts.create or @blog.posts.build. So I believe your conditions must be specified as a hash, like so: class Post { :context => 'featured' } has_many :assets, :through => :post_assets has_many :featured_images, :through => :featured_post_assets, :class_name => "Asset", :source => :asset, end And you should also do the following: @post.featured_images.build(:title => "An asset") instead of: @post.featured_images "An Asset") This should call the scoped asset build, as suggested in the quote above to add the context field to asset. It will also save both the join model object (post_asset) and the asset object to the database at the same time in one atomic transaction.
