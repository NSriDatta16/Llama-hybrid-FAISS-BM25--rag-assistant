[site]: stackoverflow
[post_id]: 2350676
[parent_id]: 2348120
[tags]: 
Disclaimer: My answer is of philosophical nature which should encourage you to avoid touching CMAKE_C_FLAGS directly. For the direct answer that just solves your problem look what Bill ( the lead architect of the CMake btw. ) wrote. The thing about CMake is, that it lets you describe what you want to do without referring to a specific compiler or platform. What CMake does is building the compiler and linker flags from your usage of include_directories add_definitions add_library add_executable target_link_libraries If there are no external dependencies, other than the compiler itself, this is all you need. For external dependencies use find_package It defines a set of variables, like find_package(SDL) defines SDL_INCLUDE_DIR SDL_LIBRARY for usage with respectively include_directories and target_link_libraries. CMake ships with a bunch of so called module files, like FindSDL.cmake and many others can be googled. The next lower level is to use find_path find_library which are used in the Find???.cmake modules itself. The CMAKE_C_FLAGS variable is composed by CMake from these commands. Modifying it means you bypass CMake. There are cases, like for special optimization flags, you want to do this, but at this point all power and thus responsibility transfered from CMake to you.
