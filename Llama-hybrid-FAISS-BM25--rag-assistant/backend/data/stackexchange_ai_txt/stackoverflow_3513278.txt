[site]: stackoverflow
[post_id]: 3513278
[parent_id]: 3504848
[tags]: 
After a lot of searching and piecing together different partial solutions, I figured out how to do it. First you need to define the COM coclass for the object you're trying to access: [ComImport, Guid("..."), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)] internal interface ISomeCOMInterface { // Define interface methods here, using PInvoke conversion between types } Next you need to instantiate the COM object. There are a couple of ways to do that. Since I was interested in DirectSound, I used: [DllImport("dsound.dll", EntryPoint = "DirectSoundCreate", ...] static extern void DirectSoundCreate(IntPtr GUID, [Out, MarshalAs(UnmanagedType.Interface)] out IDirectSound directSound, IntPtr pUnkOuter); IDirectSound directSound; DirectSoundCreate(IntPtr.Zero, out directSound, IntPtr.Zero); Since I now had my COM object, I could then use Hans' suggestion of Marshal.GetComInterfaceForObject() : IntPtr comPtr = Marshal.GetComInterfaceForObject(directSound, typeof(IDirectSound)); IntPtr vTable = Marshal.ReadIntPtr(comPtr); As an added bonus, you can then iterate through the vtable functions like this: int start = Marshal.GetStartComSlot(typeof(IDirectSound)); int end = Marshal.GetEndComSlot(typeof(IDirectSound)); ComMemberType mType = 0; for (int i = start; i Extra Reading / References: http://msdn.microsoft.com/en-us/library/aa645736(VS.71).aspx [Info on COM coclass declarations] http://www.codeproject.com/KB/COM/com_in_c1.aspx [Info on VTables and COM in general] http://naudio.codeplex.com/ [Info specific to the DirectSound COM Interfaces]
