[site]: stackoverflow
[post_id]: 670901
[parent_id]: 670872
[tags]: 
There are two dogmas to steer clear of: Don't release until you are finished. and Release as soon as you have anything, no matter how small. I like the latter approach, but it needs to be taken with a grain of common sense. There's an overhead to any release, depending on your organization and product. You certainly have to do testing, preferably of the complete delivery (as opposed to unit testing â€“ do you integrate with other systems? target a range of O/S's? have complex and/or large amounts of business data?). If you release a commercial product you certainly will have to have some sort of documentation in place and updated. But even in-house software requires user documentation (even if it's of the half-a-page variety). Packaging for commercial software and/or change management processes if you are lucky enough to have them (no, seriously!) for in-house deployment require time and attention. Not least, your end users will have to pay attention and possibly re-learn your application. People can get pretty tired of new features all the time, even if they acknowledge their value. For complex in-house software, you'll want to schedule end user training sessions, which are kinda expensive if done once every two weeks... Don't get me wrong: releasing early and often has great advantages, particularly since we never get the business requirements quite right, but you need to weight those benefits against the real costs of a release. This is one of the reasons I like internal releases interspersed among the 'real' releases: they have lower (if nonzero) costs, but keep you development process honestly progressing. In the end, I guess I end up with the classic consultant's answer: "It depends"!
