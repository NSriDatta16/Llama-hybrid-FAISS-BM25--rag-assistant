[site]: stackoverflow
[post_id]: 1298963
[parent_id]: 1297797
[tags]: 
byte (or any other) arrays must use contiguous address space , in this case contiguous virtual address space. This is an area that can make fragmentation becomes an issue, and is actually exacerbated by virtualization of memory. Since the various 'redirections' inherent in a such a system system and the performance considerations in making it efficient lead to actual allocation of physical address space mapped to virtual address space in chunks (commonly pages). So requesting a 10 byte chunk of virtual address space might actually lead to a whole 4K page being reserved and mapped. Since the physical memory within the page must be contiguous this can lead to a whole 4K of virtual address space being 'blocked off'. Multiple small allocations can be placed within one page (and good memory managers will try to achieve this) but none the less address space has in effect been reserved over and above what was strictly required. Consider the allocation of a single byte at the start f a page, then 4K - 2 bytes followed by another single byte. This occupies (efficiently) the whole page. Consider if the middle allocation is no longer necessary, and is thus freed. Until the 'top' and 'tail' values are either freed or moved elsewhere a gap has been created in the virtual address space which can only be filled by something actual total really used memory does. You are correct in that there is nothing stopping you, the user, mapping your (limited in 32bit land) address space to the much larger disk or memory space that the CPU/OS supports . Some chips make this possible with more than 4GB of physical address space via mechanisms like PAE . Windows itself provides an API to deal with most aspects of 'changing the mapping of your address space to get a different 'window' onto a wider pool (be it via things like PAE, running WoW64, disk or a mixture). This is called AWE . But mechanisms like this have existed for years (as those who remember the days of EMS with conventional memory or indeed the days of segmented memory . Even without CPU and OS support you can still do it yourself by hand by a variety of techniques (see below). A great deal of the more complex aspects of this in windows were dealt with by ever interesting Raymond Chen. A useful list of the relevant articles He follows it up with some specifics and links to how you can actually allocate more than 2GB of memory Also worth remembering is that you aren't the only person consuming address space in your process
