[site]: crossvalidated
[post_id]: 337516
[parent_id]: 336216
[tags]: 
Rephrasing the question (see if I understood it correctly): It is a classification problem There are 16 classes, $y_j$ where $j \in \{1,2, 3, ...16\}$ Training data has 400 examples, $x_i$, where $i \in \{1,2,3,...400\}$ Each training example, $x_i$ has 12 attributes. i.e. $x_i \in R^{12}$ Now, the task is to to classify each $x_i$ into $y_j$. Your model descibed in (a) of question involves this: Transform the 12 dimentional features (i.e. $R^{12}$) to 45 dimensional feature space ($R^{45}$) For each class, assign a the point in $R^{45}$ -- these are the parameters of this model. Let us call this as class centre Compute Cosine Similarity between your new (or test) data point with the class centre . Which ever the class centre yields lesser similarity will be the label for the data test data point. Answer for part (a) of the question: What is the proof that the assumption in step 2 holds? i.e. what is the gaurantee that the test data vectors yields a higher cosine similarity(i.e. minimal angle) with the correct class centre vectors. If this assumption is true, then ensure that: a. the transformation done by tsfresh is consistent with test and training example. b. Parameters of the model (or the class centres ) are properly estimated. Sometimes skewed data results in bad estimation so proper normalizations are needed c. Does magnitude of vector has anything to do? Cosine similarity is a measure on angle of vectors, it doesnt consider vector magnitude Answer for part (b) of question: Does a neural network help in solving this problem? It depends! Neural network(NN) is a generic term, so I wont be will be able to precisely tell you an answer to this question. You can have a NN model that is bad in learning, hence it requires large number of examples to learn parameters. IMHO, unless you are an expert, 400 examples is too small to let it learn its parameters. If you build a Suggestions: Try simpler models, like multi class logistic regression. It will similar to a simple neural network you want to fit If you want to do transformation of feature space (like $R^{12} \rightarrow R^{45}$), try SVM with RBF kernel.
