[site]: stackoverflow
[post_id]: 1534432
[parent_id]: 1530904
[tags]: 
I've been doing multilingual stuff for the last ten years and my impression is that you're trying to overdo it: you're looking at it the wrong way. You shouldn't care what language (either for the OS or the browser) is installed on the user's machine: OS language doesn't matter, and modern browsers support practically all languages around (and, since the demise of NN4, all the writing systems/alphabets that found a place in the Unicode standard). What you should pursue is what language does the user prefers. The user is the bottleneck regarding the number of 'supported' languages. The Accept-Language header could be a good solution - if it worked. To my experience, it does not - much too often. The average user of today still has to learn that the URL goes into the address bar and not into his homepage search form - I wouldn't expect more than 1-2% of the Net population to know about HTTP headers (yes, I'm in an optimistic mood tonight). Users will happily come to your website with whatever language their browser has been originally set up to claim. This includes tourists from cybercaf√®s around the world, expatriates working abroad for companies with strong "don't mess with the config" policies, old folks whase IT-capable grandsons have a bizzarre sense of humour, shared machines and so on. You're going to guess wrong more often than not. The concept of displaying a message for unsupported languages is dubious too. If the user with a, say, Punjabi browser is able to navigate to your site he would probably be able to see you don't supply Punjabi on its own - no need to interrupt his browsing with messages. All that said, sometimes the simplest solution is the best: I'd suggest you let the user choose. Put out the list of available languages and the user will be more than happy to take the guesswork out of your code. And he/she will get it right every time.
