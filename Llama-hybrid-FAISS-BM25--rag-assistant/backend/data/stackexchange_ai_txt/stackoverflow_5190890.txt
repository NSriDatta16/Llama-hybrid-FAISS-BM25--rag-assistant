[site]: stackoverflow
[post_id]: 5190890
[parent_id]: 5190807
[tags]: 
Really, what you're proving is that one case of your algorithm is working, eg you're proving that a subset of your execution paths are valid. Testing will never help you prove correctness in the strict mathematical sense (except for very simple cases). In the general case, this is impossible . Testing is a pragmatic approach to this problem where we try to show representative cases are correct (boundary values, values somewhere in the middle, etc.) and hope that that works. Still, some tools such as findbugs etc. manage to give you conservative proof of some properties of your code. If you would like formal proof of your stuff, there's always Coq , Agda and similar languages, but that's a hell of a stretch from writing a unit test :) One great, simple introduction to testing vs proofs is Abstract Interpretation in a Nutshell Patrick Cousot.
