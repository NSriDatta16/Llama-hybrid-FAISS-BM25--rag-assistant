[site]: stackoverflow
[post_id]: 4861791
[parent_id]: 4861375
[tags]: 
The target image that the software should find should be the "same" image as the given image, but it should still be able to "forgive" slight processing on either of them. If "slight processing" doesn't involve rotation, but only "cropping", then simple cross-correlation should work, if there could be perspective correction, rotation, lens distortion correction, then things are more complicated. I think this method is quite forgiving to slight color corrections. Anyway, you can always convert both images to grayscale and compare grayscale versions if you want. To focus my question further - I'm not asking which algorithms to use, at this point I would rather use an existing tool/API/service. You can start from cvMatchTemplate from OpenCV library (the link points to the C version of the API, but it's available also for C++ and Python). Use the cropped image as a template, and look for it in all your images. If the images you compare have dark features on light backgrounds, you may benefit from using CV_TM_CCOEFF or CV_TM_CCOEFF_NORMED methods. They both subtract the average over the template area from both images. Normalized methods ( CV_TM_*_NORMED ) generally work better but are slower than their non-normalized counterparts. You may consider to do some preprocessing with the images before the cross-correlation. If you normalize them first, the cross-correlation will be less sensitive to slight brightness/contrast modification. If you detect edges first, as suggested by @misha, you'll lose color/lightness information, but the results for contour overlapping will be much better.
