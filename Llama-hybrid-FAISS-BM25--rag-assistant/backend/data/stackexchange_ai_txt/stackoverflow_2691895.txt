[site]: stackoverflow
[post_id]: 2691895
[parent_id]: 2690400
[tags]: 
Using LINQ: DateTime startDate = new DateTime(2010, 1, 1); DateTime endDate = new DateTime(2010, 12, 31); int monthCount = (endDate.Month - startDate.Month + 1) + (endDate.Year - startDate.Year) * 12; Enumerable .Range(0, monthCount) .Select(x => new DateTime(startDate.Year, startDate.Month, 1).AddMonths(x)) .ToList() .ForEach(d1 => { string month = d1.ToString("MMMM"); // here should be your code // to work with months Enumerable .Range(0, d1.AddMonths(1).AddDays(-1).Day) .Select(x => d1.AddDays(x)) .ToList() .ForEach(d2 => { string dayOfWeek = d2.ToString("ddd"); string day = d2.Day.ToString(); // here should be your code // to work with days }); }); OK, the next variant without LINQ : StringBuilder sb = new StringBuilder(); DateTime startDate = new DateTime(2010, 1, 1); DateTime endDate = new DateTime(2012, 12, 31); int monthCount = (endDate.Month - startDate.Month + 1) + (endDate.Year - startDate.Year) * 12; for (int i = 0; i {0} ", month); int daysInMonth = d1.AddMonths(1).AddDays(-1).Day; StringBuilder daysOfWeekRow = new StringBuilder(); StringBuilder daysRow = new StringBuilder(); for (int j = 0; j {0} ", dayOfWeek); daysRow.AppendFormat(" {0} ", day); } sb.AppendFormat( " {0} {1} ", daysOfWeekRow.ToString(), daysRow.ToString() ); } string result = sb.ToString(); You may change output formatting as you want I provided the basic example only. The main thing is to iterate through the necessary dates (to use or not to use LINQ is you option, but you could agree solution with LINQ is more elegant) and add custom formatting in the necessary places (I put comments where to do it with the first example).
