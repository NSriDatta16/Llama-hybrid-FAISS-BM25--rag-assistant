[site]: stackoverflow
[post_id]: 1049007
[parent_id]: 1030876
[tags]: 
Spring is there to help not to hinder or restrict you, but to clean up all the boiler plate code no-one wants to see or write as well as testing/db support etc etc. It's true it technically is possible to swap out a persistence implementation for example, but in reality this rarely happens and it will have an impact on your interfaces no matter how agnostic you think they are. A better reason here for using Spring is as I have already mentioned; testing... I don't following your comment regarding everything is a singleton, it if the case this is certainly a decision made by your architect because you can have non-singleton's or prototypes in Spring and are encouraged to do so where needed to avoid anemic domain models and classes which look procedural or scripted. It is certainly not difficult to work with prototypes objects in Spring. Remember, under all the glossy exterior and IoC, Spring is simply a Factory.
