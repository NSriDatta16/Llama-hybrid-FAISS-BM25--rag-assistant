[site]: stackoverflow
[post_id]: 1585766
[parent_id]: 1585717
[tags]: 
Here is a nice definition of closures: A "closure" is an expression (typically a function) that can have free variables together with an environment that binds those variables (that "closes" the expression). I think you are confusing definitions, as, in javascript for example, my closures may often have non-local side effects, as I am changing the DOM. Closures are very useful, which is why C# added them to the language. In languages such as the functional programming language, they seem to not necessarily create threads, which you have to pay a price for due to context switching, but create light-weight processes. The framework, or compiler, will have control over what to create to ensure that the processor is best utilized. Whether you write with closures is less important than if you use immutable data. For example, if I have an application that has no global data, but every thread uses it's own local copy, then it is up to the OS and the scheduler to determine which cores my application will use. Unfortunately, in C/C++ the compilers don't see to know how to do that well, so by moving to FP then we can go with frameworks, such as Erlang, that have been dealing with distributed processing for a long time, and leverage their experience. Actors, in something like Erlang, will have less overhead than a C/C++ thread, as the switching seems to be faster with actors.
