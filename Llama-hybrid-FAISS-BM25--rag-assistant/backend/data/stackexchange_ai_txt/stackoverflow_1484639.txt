[site]: stackoverflow
[post_id]: 1484639
[parent_id]: 1441458
[tags]: 
This can elegantly be accomplished with jquery.Metadata . You'd simply need to push a form on each page with one element containing all your data that you'll append to each form once it's getting submitted: On each page you would have: Now you can do something with similar fashion: // Bind to the submit event of each form $('form').submit(function () { // Append all input fields from `_settings` $(this).append('form[name="settings"]:input'); return true; }); Or append the settings to a specific form, or all forms if none specified: function appendSettings(form) { if (form) $(form).append('form[name="_settings"]:input'); else $('form').append('form[name="_settings"]:input'); } ...after which you can submit the form as part of an AJAX request (that may not have triggered the forms submit event otherwise) EDIT: As for GET/POST request via links: $('a').click(function(event) { href = $(this).attr('href'); event.stopPropagation(); event.preventDefault(); if (!href.match('?')) // Change the form's action to the link's reference $('form[name="_settings"']).attr('action', href).submit(); else { /* Sanitize the form's data into GET paramaters and change the window's location*/ } }); If you wouldn't like to use jquery.Metadata, you can make as many hidden fields with name/value pairs on the _settings form and it would still work. I've used it as a good example of portable data since both JS and Django can speak JSON. Also, I'm assuming too much by writing a jQuery example, but I'm somewhat hoping that your already using some framework and that this could neatly be translated to the framework of your choice.
