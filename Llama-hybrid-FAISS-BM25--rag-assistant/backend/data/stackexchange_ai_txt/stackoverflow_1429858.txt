[site]: stackoverflow
[post_id]: 1429858
[parent_id]: 1428348
[tags]: 
from ejspencer's Idea I put this together // Build the dictionary/data structure // O( [average split length]*n ) public static Dictionary > BuildDictionary(String[] data) { String[] temp; Dictionary > dict = new Dictionary >(); for(int i = 0; i ()); dict.get(temp[j]).add(i); } } return dict; } // find all the matches // O( [average number of matches per key]*[input split length]) public static List FindMatches(String input, Dictionary dict) { String[] temp = input.split(" "); List ret = new List (); for(int i = 0; i match = dict.get(temp[i]); for(int j = 0; j it probably won't compile right off, but I figure you're going to have to futz with it anyway and this gives you a pretty good idea for fast access and simple code (no offense alphazero). This search is case sensitive, but you can just as eaily use toUpper or toLower to change it.
