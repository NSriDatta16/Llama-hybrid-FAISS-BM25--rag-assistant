[site]: stackoverflow
[post_id]: 353709
[parent_id]: 353646
[tags]: 
I wouldn't say Cocoa follows the passive view pattern as it's described there. It's saying that the controller does all the work in preparing the view and sending change notifications. In Cocoa a view object will typically respond to KVO notifications (through bindings) from the model, refresh data from the controller that it's bound to, prepare it through data formatters or value transformers, and finally display it on the screen. Cocoa follows MVC pretty well, although typically the 'controller' aspect is divided into view controllers and model controllers. You can read more about this here . If you have any specific examples on where you're confused, maybe I can provide more detail on the way Cocoa does things. From the same guide, this section explains some additional design patterns you might find useful. In my own experience though after working through a few projects MVC in Cocoa tends to come pretty naturally, I wouldn't be too concerned about it.
