[site]: stackoverflow
[post_id]: 3215311
[parent_id]: 3215028
[tags]: 
With respect to your suspicions: 1) I think the default binding behavior of a TextBox is TwoWay , with a LostFocus update trigger, meaning that your UI focus will have to change to another control before the binding will update, if changes are made in the UI. If changes are made in the code you need to raise the NotifyPropertyChanged event in order for the binding system to see it. 2) This is probably not the case, but it leaves the impression that you're trying to set bindings on your UserControl properties, which is not the way data binding was designed to be used in this particular kind of use case. What you want is to bind data from non-UI classes to dependency properties on your UserControl s. 3) This will never matter, as long as your UI project has a reference to your classes. 4) This is a common reaction people have when beginning to use XAML and WPF. It's like instead of being handed a box of Legos, you just got handed an injection molding machine with insufficient instructions, isn't it? Overall, this is a situation where you might need to examine your design; elements of the "Model-View-ViewModel" pattern will come in handy. If you're unfamiliar with this, it's a development pattern in which you introduce a "ViewModel" class, perhaps you can call it MasterPartsVM which contains an implementation of INotifyPropertyChanged. The DataContext of your UserControl would be set to this MasterPartsVM class. A brief code example, using some generic names. Given a ViewModel class with a small backing class that looks like this: class PartViewModel : INotifyPropertyChanged { #region INotifyPropertyChanged Members public event PropertyChangedEventHandler PropertyChanged; #endregion public PartClass Data { get; set; } public String SomeVMProperty { get { return Data.SomeProperty; } set { if (Data.SomeProperty != value) Data.SomeProperty = value; this.PropertyChanged(this, new PropertyChangedEventArgs("SomeVMProperty")); } } } class PartClass { public string SomeProperty { get; set; } } The XAML of a basic UserControl would look like this: To connect your data class to this UserControl, you set the UserControl's DataContext property. If you do this in code, it's a matter of having a reference to your user control and the ViewModel, and then setting the property: MyUserControlInstance.DataContext = new PartViewModel(); // or some existing PartViewModel That combination of code should work to produce a textbox whose Text property changes every time the SomeVMProperty property is changed.
