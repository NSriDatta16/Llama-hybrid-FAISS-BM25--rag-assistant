[site]: stackoverflow
[post_id]: 1612481
[parent_id]: 1612430
[tags]: 
This is another example of people writing FORTRAN in an object-oriented language. Java's about objects. You'd be much better off if you started using objects to abstract your problem, hide details away from clients, and reduce coupling. What sensible object, with meaningful behavior, do those three items represent? I'd start with that, and worry about the data structures and persistence later. All data will probably be strings or cast as strings. This is fine if they really are strings, but I'd encourage you to look deeper and see if you can do better. For example, if you write an application that uses credit scores you might be tempted to persist it as a number column in a database. But you can benefit from looking at the problem harder and encapsulating that value into a CreditScore object. When you have that, you realize that you can add something like units ("FICO" versus "TransUnion"), scale (range from 0 to 850), and maybe some rich behavior (e.g., rules governing when to reorder the score). You encapsulate everything into a single object instead of scattering the logic for operating on credit scores all over your code base. Start thinking less in terms of tables and columns and more about objects. Or switch languages. Python has the notion of tuples built in. Maybe that will work better for you.
