[site]: stackoverflow
[post_id]: 4036995
[parent_id]: 
[tags]: 
Best way to define a configuration object using Google Closure

I love how Google Closure compiler will optimize symbols in code. However, I have not found a good way to define public, exported functions that take configuration objects as parameters. Consider this code snippet: goog.provide('foo'); goog.require('goog.dom'); /** @typedef {{ * id : string, * clazz : string * }} */ foo.config; /** * Does some neat stuff * @param {foo.config} config */ foo.myFoo = function(config) { var el = goog.dom.getElement(config.id); goog.dom.classes.add(el, config.clazz); } goog.exportSymbol('foo.myFoo', foo.myFoo); Now assume we load this script, and want to call myFoo as follows: foo.myFoo({ id: 'unique-id', clazz: 'pretty' }); If compiled, this would fail because id and clazz properties were compressed. Does anyone know of an elegant way to implement and export configuration objects using the Google Closure compiler?
