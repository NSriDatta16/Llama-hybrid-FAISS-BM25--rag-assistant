[site]: stackoverflow
[post_id]: 5577780
[parent_id]: 5576698
[tags]: 
some more suggestions, which i see as common problems in objc programs: favor protocols over subclassing more than the average objc developer does (very important) favor smaller objects, which are more specialized minimize global objects (e.g singletons) reuse and test often realize and embrace the dynamic nature of objc types/runtime. don't just apply/approximate the idioms of your most familiar language to objc. chances are, your programs will suffer. for code reuse/backend: favor C, C++, apple's distributed types, and protocols stub out packages/sub-libraries in nontrivial programs. these should build independently. be mindful of what you are re-implementing, and move the common implementation to a library keep libraries small, focused, and be mindful of their dependencies. also write with the expectation that the library may be used in many contexts. keep the warnings low, the public interfaces simple, and use nice lengthy descriptive names and prefixes to avoid clashes in the flat namespace.
