[site]: stackoverflow
[post_id]: 4963781
[parent_id]: 4963025
[tags]: 
No, this isn't possible as far as I can tell. There are several reasons for this: Ownership of shared objects would be a dubious affair, so the per-thread memory limit would be unenforceable. If a thread dies, that's a serious problem. Threads don't die unexpectedly just like that, not if you install a catch-all exception handler. The only reason threads die unintentionally in a well-written system is if an Error is thrown, and that means that the system is unstable and usually also means that the VM should be stopped as quickly as possible. Some very special cases aside (app/webservers in particular) It is unlikely that any system can carry on running after losing one of its threads. More often than not this could have dire consequences. Update: Having found out that it is a webserver a solution is needed for, I'll try to go a bit further. Although Java was not designed for a level of isolation as high as you need. some of the functionality can be achieved by a JVMTI agent. Specifically, threads can be stopped , objects reachable by a thread can be checked , query the time used up by each thread and so on. The bad news is that your agent will have to be written in C or something similar, it is notoriously hard to debug and any errors are likely to crash the virtual machine.
