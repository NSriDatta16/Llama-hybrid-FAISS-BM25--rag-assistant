[site]: stackoverflow
[post_id]: 2284127
[parent_id]: 2283849
[tags]: 
Part of the trouble with understanding Object Oriented programming is not so much grasping the concept of objects and classes, but how these are to be used effectively. The best strategies are outlined in the Design Patterns book. While this reference is fairly technical, it is very thorough and details how to approach many common situations from a strategic software-design standpoint. You can see that this kind of approach was fully embraced in the Apple iPhone SDK, a framework largely built upon the work done at NeXT. Although Ruby, and especially Ruby on Rails are not as strongly biased towards the design patterns conventions, the same principles can be applied. If you're up for a challenge, it is a very useful reference book. For a new developer there are many advantages to Ruby over Objective-C. Being interpreted, it is very hard to crash Ruby because of a simple mistake, and the interactive command line is a powerful tool for quick experimentation. On the other hand, the debugging abilities of Ruby are severely limited to the Objective-C and XCode environment. Ruby on Rails in particular suffers from incomplete documentation and a sprawling feature set that is not always organized very well. Objective-C is not especially hard to learn, but the complete SDK is enormous. The good news is it is extremely well documented and there are many video tutorials and code samples. I would say it is more challenging to absorb enough to be an effective iPhone developer, but you may find that to be more rewarding. The good news is that both are well supported by their respective communities and on places like Stack Overflow. Ultimately, I would look at the kinds of projects you are intending to try out and see which platform is the best suited.
