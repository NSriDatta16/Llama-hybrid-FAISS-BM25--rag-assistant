[site]: stackoverflow
[post_id]: 1435038
[parent_id]: 
[tags]: 
Testing Javascript that Manipulates the DOM

I've been looking into javascript test suites and I have found QUnit to be very interesting. I understand how to test computational code, but... How do you test javascript applications written primarily for DOM manipulation? it seems like testing the position/color/etc of DOM elements would be a moot point because you'd end up doing somethign like this: $("li.my_element").css("background-color", "#f00"); and then in your test... $(function() { module("coloring"); test("test_my_element", function() { var li_element_color = $("li.my_element").css('background-color'); equals(li_element_color, "#f00"); }); }); this just doesn't feel right because it basically just doing this: var my_li= $("li.my_element"); my_li.css("background-color", "#f00"); if ( my_li.css("background-color") == "#f00" ) { return true; } Am I nuts? How is this supposed to be done? edit : the heart of the question: I guess what I'm getting at is, I need to make sure the code isn't broken before I deploy, but the vast majority of it is UI helpers and ajax. How do I test that things are appearing correctly? A few examples: test that a JQuery UI dialog is appearing on top of all other elements test that the drag-n-drop is working properly test that the color of a droppable changes when an element is dropped on it test that the ajax is all working properly test that there are no extraneous commas that will break IE
