[site]: stackoverflow
[post_id]: 3793957
[parent_id]: 3793400
[tags]: 
Here's one way. public class Rolling { private int size; private double total = 0d; private int index = 0; private double samples[]; public Rolling(int size) { this.size = size; samples = new double[size]; for (int i = 0; i public class RollingTest extends TestCase { private final static int SIZE = 5; private static final double FULL_SUM = 12.5d; private Rolling r; public void setUp() { r = new Rolling(SIZE); } public void testInitial() { assertEquals(0d, r.getAverage()); } public void testOne() { r.add(3.5d); assertEquals(3.5d / SIZE, r.getAverage()); } public void testFillBuffer() { fillBufferAndTest(); } public void testForceOverWrite() { fillBufferAndTest(); double newVal = SIZE + .5d; r.add(newVal); // get the 'full sum' from fillBufferAndTest(), add the value we just added, // and subtract off the value we anticipate overwriting. assertEquals((FULL_SUM + newVal - .5d) / SIZE, r.getAverage()); } public void testManyValues() { for (int i = 0; i
