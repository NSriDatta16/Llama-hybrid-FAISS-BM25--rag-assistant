[site]: stackoverflow
[post_id]: 5447814
[parent_id]: 5447755
[tags]: 
I'll describe all in details. int* storage = 0; - creates a Pointer on the stack with zero value (points to NULL in other words). stateof* un = (stateof*)&storage; - un points to the location of storage which is a pointer. So un points to the storage 's value which is now equals 0. un->foo = 300; - assigns 300 into storage (lets think about storage like about some int value because it doesn't matter that it is a pointer in fact here), so storage == 300 now. un->bar = 600; - the same as the previous, because un is a union and all its fields in fact just different names for only one field (well, its union 's definition). h->first = 1200; and h->second = 1600; are like the previous cases with only one exception that here values are assigned to DIFFERENT fields in the struct (different places in memory). write(storage); - printing the value of storage (which is a pointer) but not the value where storage points to ( *storage ). And of course, the last but not the least: NEVER CODE LIKE THAT ANYMORE! :)
