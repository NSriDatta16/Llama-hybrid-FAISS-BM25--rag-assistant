[site]: stackoverflow
[post_id]: 3277258
[parent_id]: 
[tags]: 
Beyond NARC: When to retain, when to assign, when to copy

I finally understand whether I must release an object, and how to keep my retain counts as low as possible in a trivial application (by knowing whether the object comes back with an extra 'retain' already called or not). So the NARC rules are working pretty well in that regard. On the other hand, I can't wrap my head around whether to retain (using retain properties, usually) or just assign instance variables. Are there any rules of thumb there? I know of only two: If I made the instance within my class (e.g., in an init), then I should retain it and release it in the dealloc . Delegates get assigned, not retained But what I don't understand is whether I should retain stuff that I have passed from another instance. I know that the risk is that the retain count goes down to zero and I am left holding the bag (or left holding many extra bags and memory), but... how should I organize my application so that this doesn't happen? I've seen some related questions , but nothing general. While I'm Here: What about things that have been added to a UIWindow or UIView that I am not personally retaining? If their superview gets removed from all superviews, will the "naturally" retained instances get deallocated?
