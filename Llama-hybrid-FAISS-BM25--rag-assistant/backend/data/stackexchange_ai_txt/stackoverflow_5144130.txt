[site]: stackoverflow
[post_id]: 5144130
[parent_id]: 5143950
[tags]: 
If they are all status tables of a particular type of status class, it is simplest to have a single status table and have each of the three tables declare foreign keys to it. You can always add constraints to a particular table that references the status table in terms of which status(es) are not applicable. You can do this even more elegantly by breaking down the status-es categorically, so that a query can the basis of your constraint (i.e., no hard-coded "IN" clause). You will probably need at least one extra column in your status table to help break down the status classes into sub-categories. If table3 is really using a different kind of status, then it needs its own table. There's a semantic element to all of this -- you need to ask yourself if a particular type of status is even conceivable/relevant for a particular table. If not, then it may not be feasible to consolidate all statuses. For example, in my system I might have ORDER STATUS and SYSTEM STATUS. These are two very different classes and I can't imagine a case where some line item somewhere might have either an order status or a system status. I would need two tables here. However, if I had ORDER PRE-PROCESSING_STATUS and ORDER POST-PROCESSING STATUS, those can probably be merged into a single class. So there's a sanity check you'll need to do at a logical level here.
