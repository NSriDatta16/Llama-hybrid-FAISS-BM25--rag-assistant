[site]: stackoverflow
[post_id]: 5197835
[parent_id]: 5197794
[tags]: 
Your code sample uses break; not return; - break won't do the job. Also, since you're recursing: return will not return more than one call level. If you want to exit all recursive calls immediately, you'll need to signal this to the caller. E.g. public boolean rand_Function(List tree, List array) { if (array.isEmpty()) { return true; } if (array.size() == 1) { preorder = (List ) new ArrayList (tree); preorder.addAll((Collection ) array); for (Element e : preorder) { e.setLevel(0); } E1 = getAverageAccessTime(preorder); listTwo = new ArrayList (preorder); if ((E1 newList = new ArrayList (array); newList.remove(i); //create a list by adding the ith element to beginning List newBeginning = new ArrayList (tree); newBeginning.add(array.get(i)); if (!rand_Function(newBeginning, newList)) return false; } } return true; }
