[site]: stackoverflow
[post_id]: 4643770
[parent_id]: 3477522
[tags]: 
There is a ticket in lighthouse for this problem, and the resolution is to append _html to the i18n key in the locales/xx.yml file and use the t alias 1 to denote an html_safe string. For example: en: hello: "This is a string with an accent: &oacute;" becomes: en: hello_html: "This is a string with an accent: &oacute;" And it would create the following output: This is a string with an accent: รณ This would prevent you from having to write raw t('views.signup.organisation_details') and would result in a cleaner output of: t('views.signup.organisation_details_html') . And while exchanging raw for _html doesn't seem like the greatest of trades, it does make things clear that you're outputting what is assumed to be an html_safe string. 1 I've tested the code suggested in the lighthouse ticket. What I found was that you had to specifically use the t alias. If you used I18n.t or I18n.translate the translation didn't treat _html as html_safe: I18n.t('hello_html') I18n.translate('hello_html') # Produces => "This is a string with an accent: &oacute;" t('hello_html') # Produces => "This is a string with an accent: รณ" I don't think this is the intended behavior per the RoR TranslationHelper documentation .
