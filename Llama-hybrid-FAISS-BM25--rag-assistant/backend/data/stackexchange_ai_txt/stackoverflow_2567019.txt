[site]: stackoverflow
[post_id]: 2567019
[parent_id]: 2566821
[tags]: 
Your C# class uses parameters with default value which is slightly different than overloaded constructors. In any case, F# supports both overloaded constructors and default parameters. Using default values of a parameters, the code would look like this: type SharedRegistry(?useCache: bool) = do // constructor logic inherit PageRegistry(defaultArg useCache true) Now you can create an instance as follows: let r1 = new SharedRegistry() // using the default value let r2 = new SharedRegistry(false) // specified explicitly let r3 = new SharedRegistry(useCache=false) // using named parameter I belive that using named parameters is slightly more elegant in F#. The way it works is that the parameter useCache becomes an option under the cover (This may be a problem if you wanted to use the class from C#) Regarding overloaded constructors - Your F# code should be correct (see the answer from kvb ). In general, it is probably better to have at least one implicit constructor (as that allows you to access constructor parameters inside the body of the class automatically, declare fields using let and implement constructor logic using do ). The implicit constructor should be the one that takes all the parameters. In some cases, you may want to make it private, which can be done like this: type SharedRegistry private (useCache: bool) = inherit PageRegistry(useCache) do // constructor logic new () = SharedRegistry(true)
