[site]: stackoverflow
[post_id]: 2330432
[parent_id]: 2277056
[tags]: 
You should really have automated unit tests before making any changes. In fact, you should make no changes for code that isn't covered by unit tests at least 80%. In the real world, unit tests often do not exist. On the other hand, doing any refactoring without unit tests can totally screw up your code, making Management even less likely to permit you to make changes in the future. What to do? Using a tool like ReSharper, you can begin by applying some of the "safer" refactorings. With care, there's no reason you can't be successful in repeatedly using "Extract Method" to move your ADO.NET code into separate methods, "Make Method Static" if it wasn't already static, then either "Move Method" or "Make Method Non-Static" to move the method into a separate class. Once you've got the code moved out, you can begin to write some automated tests. At this stage, they don't need to be "unit tests" in the strict sense of the word. In particular, these tests should be allowed to work with the database. When you're left only with code that can't easily be unit tested, you can then, very carefully start making that code more testable. You can do things like turn sets of static methods into instance methods of new classes. You can also begin to introduce dependency injection, to make it easier to test using mock objects. But be very careful here - you're modifying code which has no automated tests, and you'll be using refactorings that can actually break stuff. Once you've got the code adequately tested, then you can reorganize the code to make better sense, and then modify it to make it use LINQ if you like.
