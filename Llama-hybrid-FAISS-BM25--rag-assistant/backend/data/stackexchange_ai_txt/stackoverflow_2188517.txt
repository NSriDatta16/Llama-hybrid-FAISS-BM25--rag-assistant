[site]: stackoverflow
[post_id]: 2188517
[parent_id]: 
[tags]: 
How can I make a property declarable as any inheriting type in ASP.NET markup?

I've seen various controls in ASP.NET with "collections" of objects, which you can use markup to define. For example: ... In the above example, you can add any number of triggers, and they can be of any type that extends UpdatePanelTrigger. I'd like to do something similar, but with only a single item instead of a collection: --or-- I am thirsty The idea is that the Request could be given a single object of any type that inherits a particular interface or class. Is there any way to do this? Update To clarify, I want a PortalLink to be able to do accept anything that is a sub-class of a Request, which represents the parameters that a particular page accepts. For example: public class AdminMenuRequest : Request {} // No parameters for the main menu page. public class ViewProductsRequest : Request { public string ProductCategory {get;set;} public bool? ShowOutOfStock {get;set;} } And in markup: So far I've figured out that I can either make the Requests controls unto themselves, or make PortalLinks accept a collection of requests (but not restricted to a single request). If I make the Requests controls, it sort of breaks the single-purpose rule: requests represent both a request on the server side and a link on the client side. Plus, since I want to have one request per "page", as it were, it would also end up polluting the intellisense list in most circumstances. If I make PortalLinks accept a collection of requests, then I can simply use the first item in the list and ignore the rest. That works, but it would be nice to be able to enforce that each PortalLink should have one (and only one) value in it. It would also be easier when creating or initializing links in the codebehind to be able to say: ((ViewProductsRequest)FoodOrDrinkLink.Request).ShowOutOfStock = OOSCheckBox.Checked; This is something I can sort of fake with additional properties, but I was hoping for something just a tad more elegant.
