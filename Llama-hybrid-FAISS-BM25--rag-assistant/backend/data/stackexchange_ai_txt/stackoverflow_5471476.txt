[site]: stackoverflow
[post_id]: 5471476
[parent_id]: 
[tags]: 
Smart-pointer template operator overload failing due to error C2244: "unable to match function definition to an existing declaration"

I have looked for dupes of this but forgive me if I missed a solution. I have a smart pointer that has 2 comparison overloads, "==" and " Error 4 error C2244: 'SmartRef::operator ==' : unable to match function definition to an existing declaration q:\projs\ha\src\SmartRef.cpp 114 The following code works fine in VC4.2 (I am porting to VC2008... courage). SmartRef.h #ifndef HA_INCL_REFERENCE #define HA_INCL_REFERENCE 1 template class SmartRef { public: //@cmember Default constructor inline SmartRef(); //@cmember Constructor inline SmartRef( TypeRefObj * pThePointer ); //@cmember Destructor inline ~SmartRef(); //@cmember Copy constructor inline SmartRef( const NIEB_clReference & roTheValue ); //@cmember inline const SmartRef & operator= ( const SmartRef & roTheValue ); //@cmember inline SmartRef & operator= ( const SmartRef * pTheValue ); //@cmember inline int operator== ( const SmartRef & roTheValue ) const; //@cmember inline int operator & roTheValue ) const; //@cmember inline TypeRefObj & operator* () const; //@cmember inline TypeRefObj * operator-> () const; private: //@cmember Reference pointer TypeRefObj * m_pRefPointer; }; #include "SmartRef.cpp" #endif //HA_INCL_REFERENCE SmartRef.cpp template inline int SmartRef ::operator== ( SmartRef & roTheValue ) const { return m_pRefPointer == roTheValue.m_pRefPointer; } My first thought was that there was a problem because there was no comparison in the specialised classes, but then I realised that I am comparing pointers not objects. Then I thought maybe I need to be very explicit about that so I case both sides of the comparison to `void* but that made no difference. So now I am thinking that there is some reason that the definition is not valid in VC 2008. But I cannot for the life of me figure out what is wrong with the definition. Any help is much appreciated. Thanks, Dennis. * EDIT: *I'm embarrassed that it was so simple. I was missing a const from the definition. Thanks all, I don't know how I failed to spot it! Prize goes to first correct answer.
