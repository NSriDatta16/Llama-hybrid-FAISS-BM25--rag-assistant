[site]: stackoverflow
[post_id]: 2337779
[parent_id]: 2311883
[tags]: 
You are correct - the headers method of ActionController::Request returns an instance of ActionController::Http::Headers , which is inherits from Hash. If we crack open the source, we see this: class Headers So when accessing the Hash via [] , there's a second check to see if value from env_name (which just upcases the key and prepends HTTP_ ) exists. This is why you can't get a true value from request.headers.include?('Authorization') -- include? is not overridden in the subclass to check for both the normal and upcased version of the header. I imagine you could follow suit and implement it yourself like this: module ActionController module Http class Headers Throw that into lib/extensions/action_controller.rb or something, require it in environment.rb if necessary, and you should be good to go. I'd recommend just modifying your controller code to use [] and present? to do the check, though :) The reason that the headers are upcased and prefixed with HTTP_ , I believe, stems from Rack, Rails' HTTP middleware. It probably does this to remain impartial about case, additionally prepending HTTP_ to avoid conflicts with other non-header environment stuff that comes in. So, yes, a bit magical, but not too hard to understand after glancing at the source, which I'd always recommend :) Rails has some very nice source that I've learned a lot from over the years.
