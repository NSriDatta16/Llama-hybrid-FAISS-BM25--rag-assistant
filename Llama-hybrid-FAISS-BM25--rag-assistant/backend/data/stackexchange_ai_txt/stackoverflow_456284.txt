[site]: stackoverflow
[post_id]: 456284
[parent_id]: 456216
[tags]: 
This is a very good question. Organizing code into classes is one way for a development team to create small, reusable modules. Also these modules have expressive and limited interfaces that express only what the class is capable of and not how it does it. Each class is orthogonal to the others and is therefore highly testable and modular in case of error. Now what I have just described is a strange scene from a perfect world. But any good developer doing OOP work ought to be striving for something like this. OOP is an acknowledgment that we, the developers, are simply human and cannot comprehend an entire system at once. So we break the system up into tiny reusable parts and focus on those. Take a ten-digit US phone number as an example. It is difficult to remember a ten digit number in you head so we do what psychologists call "chunking". This means we mentally break down the numbers into chunks that we can better remember. So 1234567890 becomes 123-456-7890 . Fortunately for us, the phone companies also break these numbers down the same way and assign the chunks meaning. 123 is the area code, 456 is the prefix, and 7890 is the line number. Each of these chunks is like a class, they all have individual responsibilities, formats, and meanings. So in conclusion the best thing I can say is that OOP allows us to build large, scalable systems that have centralized and encapsulated functionality. It allows us to not have to see the big picture all the time and be able to focus on doing one thing and doing it well.
