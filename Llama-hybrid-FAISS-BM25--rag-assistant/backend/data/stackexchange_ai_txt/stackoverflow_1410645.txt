[site]: stackoverflow
[post_id]: 1410645
[parent_id]: 
[tags]: 
Are public fields ever OK?

Before you react from the gut, as I did initially, read the whole question please. I know they make you feel dirty, I know we've all been burned before and I know it's not "good style" but, are public fields ever ok? I'm working on a fairly large scale engineering application that creates and works with an in memory model of a structure (anything from high rise building to bridge to shed, doesn't matter). There is a TON of geometric analysis and calculation involved in this project. To support this, the model is composed of many tiny immutable read-only structs to represent things like points, line segments, etc. Some of the values of these structs (like the coordinates of the points) are accessed tens or hundreds of millions of times during a typical program execution. Because of the complexity of the models and the volume of calculation, performance is absolutely critical. I feel that we're doing everything we can to optimize our algorithms, performance test to determine bottle necks, use the right data structures, etc. etc. I don't think this is a case of premature optimization. Performance tests show order of magnitude (at least) performance boosts when accessing fields directly rather than through a property on the object. Given this information, and the fact that we can also expose the same information as properties to support data binding and other situations... is this OK? Remember, read only fields on immutable structs. Can anyone think of a reason I'm going to regret this? Here's a sample test app: struct Point { public Point(double x, double y, double z) { _x = x; _y = y; _z = z; } public readonly double _x; public readonly double _y; public readonly double _z; public double X { get { return _x; } } public double Y { get { return _y; } } public double Z { get { return _z; } } } class Program { static void Main(string[] args) { const int loopCount = 10000000; var point = new Point(12.0, 123.5, 0.123); var sw = new Stopwatch(); double x, y, z; double calculatedValue; sw.Start(); for (int i = 0; i result: Direct field access: 3262 Property access: 24248 Total difference: 20986 Average difference: 0.00020986 It's only 21 seconds, but why not?
