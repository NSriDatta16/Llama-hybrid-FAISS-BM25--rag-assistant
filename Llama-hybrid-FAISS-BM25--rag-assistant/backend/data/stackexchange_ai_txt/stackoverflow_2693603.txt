[site]: stackoverflow
[post_id]: 2693603
[parent_id]: 2693442
[tags]: 
well if you were trying to evenly distribute by date then make sure all your objects are in the date class then do array[29].getTime()-array[0].getTime() /7 for your average step, then do something like array.forEach() with a comparason function to try and get the closest to each step. --edit-- try something like: //dateArray is array of dates var targetTime:Number; var filteredarray:Array = new Array(); var step = dateArray[29].getTime()-dateArray[0].getTime() /7 var smallestdist:Number; var currentIndex:int; filteredarray.push(dateArray[0]); //Add the first entry targetTime = dateArray[29].getTime(); //set the lowest point for(var i=1; i of course this is dealing with a preumed even spread of dates, there could be the posibility of adding the same date to several different points if all of dateArray are clumped together, could be optimised, but see what you can do with it. i havnt tested this code, but it should work pretty out of the box. have a look at these if you have a problem: Array::forEach() Date::getTime()
