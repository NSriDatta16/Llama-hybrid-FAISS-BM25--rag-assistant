[site]: stackoverflow
[post_id]: 2850646
[parent_id]: 
[tags]: 
Fill container with template parameters

I want to fill the template parameters passed to a variadic template into an array with fixed length. For that purpose I wrote the following helper function templates template void fill(ForwardIterator i) { } template void fill(ForwardIterator i) { *i = head; fill (++i); } the following class template template struct params_to_array; template struct params_to_array { static const std::size_t SIZE = 1; typedef std::array array_type; static const array_type params; private: void init_params() { array_type result; fill (result.begin()); return result; } }; template struct params_to_array { static const std::size_t SIZE = params_to_array ::SIZE + 1; typedef std::array array_type; static const array_type params; private: void init_params() { array_type result; fill (result.begin()); return result; } }; and initialized the static constants via template const typename param_to_array ::array_type param_to_array ::params = param_to_array ::init_params(); and template const typename param_to_array ::array_type param_to_array ::params = param_to_array ::init_params(); Now the array param_to_array ::params is a std::array and contains the values 1 , 3 and 4 . I think there must be a simpler way to achieve this behavior. Any suggestions? Edit: As Noah Roberts suggested in his answer I modified my program like the following: I wrote a new struct counting the elements in a parameter list: template struct count; template struct count { static const std::size_t value = count ::value + 1; }; template stuct count { static const std::size_t value = 1; }; and wrote the following function template std::array ::value> params_to_array() { std::array ::value> result; fill ::value>::iterator, T, args...>(result.begin()); return result; } Now I get with params_to_array () a std::array with the content 10 , 20 and 30 . Any further suggestions?
