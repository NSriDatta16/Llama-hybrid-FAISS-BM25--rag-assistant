[site]: stackoverflow
[post_id]: 4596603
[parent_id]: 4336721
[tags]: 
What advantages i do get if i choose Modules over MXML Component? Modules and components are two very different things. A module is like a DLL in Windows or a Jar file in Java. In that it carries a section of code that can be loaded and unloaded at runtime. So modules can contain one or more MXML components. They don't replace the use of MXML components. You will still build your application using MXML whether you use modules or not. Unfortunately, modules are packed with a lot other "features" that don't make working with them as simple as say a Jar file in Java. They have an upside and downside to them. You can reduce your memory footprint by loading and unloading code, but these days byte code size is NOT the main culprit of memory bloat. It's actually how the statements use the heap that causes memory to go up. You can easily share code between projects without Modules using a SWC or just simple sharing code through shared SVN projects. Other downsides with modules is it creates more boundaries in your program. Referring to objects from within a Module can be a problem. Objects that uses a Module can refer to objects defined within the module, but not vice a versa so if you're not careful in how you organize your modules you can end up dumping code into the module that doesn't belong there. I would start out not using modules then refactor if I have a clear need for them. Modules will only make the overhead of developing your overhead go up once you start using them. What is the prefered and the best way to Architect an Flex Application? MVC or MVCS. Model View Controller or Model View Controller Service. Some people get hung up on Commands are better than Controller, but really a Command is a Controller with only a single controller method. It's a degenerative controller. I like Controllers because it's very easy to add a new command to the Controller by just adding a method rather than a whole new class as Commands dictate. Plus a Controller allows you to group common functionality together for a screen, subsystem, etc. You can pick how fine grain you want your controllers. Also Controllers can easily be split when they get too big. MVCS is easy to do without a framework, but using a framework is a good idea since it helps your team understand how the application is put together. Also open source software does a pretty good job of documenting the framework for you so you don't have to answer a lot of low level questions about your framework. Good choices are Swiz, Parsley, or Mate. However, most are moving to Swiz or Parsley now away from Mate and Caringorm. Caringorm will be Parsley in the future FYI. Presentation Model pattern will help you when you want to do more unit testing so looking at how that works would be beneficial to your research. Although I'm more of a unit test the Controller and Model and do either traditional QA for the View or integration testing. QA is much easier. Since the Application is going to communicate with Backend, do we need to make the frontend more complex? You'll have to make a decision about how much complexity you want the front end to handle. Background processing is a weakness in Flex so sometimes that makes sense to pass to the backend. I think you'll be surprised at how much work goes into the front end. Flex is a RIA which means more work will be taking place in the Front end that's normal, but you'll have to decide what makes sense to do where. My suggestion is front end calls simple services on the backend using JSON or AMF (Blaze DS). If you need something like a server push you can use ActiveMQ as it has connectors to Flex. Is there any Modules based Architecture for a sample preview or any example where they have defined a good Architecture. Modules and architecture are influenced by each other, but using modules doesn't mean you have a well defined architecture. You just have buckets you dump code in. Modules will not designate responsibilities or organization in your code which is what architecture does. As I said Modules are like DLLs and you don't see a DLL based architecture you can pick up off the shelf. Frameworks like Swiz will help define your Architecture more than Modules. I would say stop focusing on Modules and look at architecture then see if you need them.
