[site]: stackoverflow
[post_id]: 1207005
[parent_id]: 1206937
[tags]: 
While I usually advocate avoiding using frameworks unless necessary, I'd say using one in this case is perfectly fine. Here's jQuery: $(function () { // do stuff after DOM has loaded }); Note that it is NOT the same as an window.onload event, since onload executes first after other resources have been loaded (images etc.) The code I used in my example will execute when the DOM has finished loading, i.e., when the full HTML structure is available (not necessarily when images, CSS, etc. is available.) If you want a checkable variable, you can set one in the ready-function: var documentIsReady = false; $(function () { documentIsReady = true; }); Of course you can find even more light-weight libraries than jQuery if all you want to do is to check for DOM-ready. But use a library in cases where different browsers behave very differently (this is one such case.) Using some code from the DOMAssistant library , making your own "DOM is ready" function shouldn't be too hard: var domLoaded = function (callback) { /* Internet Explorer */ /*@cc_on @if (@_win32 || @_win64) document.write(' '); document.getElementById('ieScriptLoad').onreadystatechange = function() { if (this.readyState == 'complete') { callback(); } }; @end @*/ /* Mozilla, Chrome, Opera */ if (document.addEventListener) { document.addEventListener('DOMContentLoaded', callback, false); } /* Safari, iCab, Konqueror */ if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) { var DOMLoadTimer = setInterval(function () { if (/loaded|complete/i.test(document.readyState)) { callback(); clearInterval(DOMLoadTimer); } }, 10); } /* Other web browsers */ window.onload = callback; }; Not tested, but it should work. I simplified it from DOMAssistant, because DOMAssistant allows multiple callbacks and has checking to make sure you can't add the same function twice etc.
