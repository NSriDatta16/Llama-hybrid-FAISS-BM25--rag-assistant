[site]: stackoverflow
[post_id]: 635582
[parent_id]: 634775
[tags]: 
Both are programming languages (both Turing complete depending on your exact SQL dialect), however... C (C++, C#, Java, Visual Basic) are Procedural programming languages. You specify a sequence of steps for the computer to take. The computer doesn't understand the goal, it just does what you tell it. Think of this as a bottom up approach to programming. SQL (Haskell, LISP when it feels like it) are Functional programming languages. You specify a goal, and the computer figures out the best sequence of events to reach it. Think of this as a top down approach to programming. Both approaches have their pros and cons. Functional languages suffer from the fact that it's hard to create a language that understands all types of a problems - if this was possible, all programming languages would be functional and we'd just describe what we need done. Instead most functional languages focus on a small problem set, like math, or in the case of SQL, reading and writing a relational dataset. Procedural languages suffer from the fact that the programmer has to micromanage everything. While the compiler might take care of register assignment and other small optimizations, it can't do bigger things, like reorganizing your entire program to better suit the dataset, or automatically restructure it to run on multiple parallel CPUs.
