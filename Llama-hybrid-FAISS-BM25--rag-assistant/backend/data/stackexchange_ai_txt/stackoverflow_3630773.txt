[site]: stackoverflow
[post_id]: 3630773
[parent_id]: 3582089
[tags]: 
I would recommend you using strongly typed helpers everywhere so that you don't have to worry about naming your controls. Here's how to proceed: Models: public class DisplayEntityViewModel { public int Id { get; set; } public string Path { get; set; } public string PathLevel { get; set; } public string Description { get; set; } } public class StructureViewModel { public IEnumerable DisplayEntitiesWithRadioboxesViewModel { get; set; } } Controller: public class HomeController : Controller { public ActionResult Index() { var moveDepartment = new StructureViewModel(); moveDepartment.DisplayEntitiesWithRadioboxesViewModel = new[] { new DisplayEntityViewModel { Id = 1, Path = "some path 1", PathLevel = "some path level 1", Description = "some description 1" }, new DisplayEntityViewModel { Id = 2, Path = "some path 2", PathLevel = "some path level 2", Description = "some description 2" }, }; return View(moveDepartment); } [HttpPost] public ActionResult Index(StructureViewModel StructureViewModel) { return View(StructureViewModel); } } Main View ( ~/Views/Home/Index.aspx ): " %> x.DisplayEntitiesWithRadioboxesViewModel) %> Editor Template ( ~/Views/Home/EditorTemplates/DisplayEntityViewModel.ascx ) " %> em"> x.Description) %> x.Path) %> Now submit the form and everything should be bound correctly. An important thing to note is that the editor template is strongly typed to DisplayEntityViewModel and not IEnumerable as in your case. When in your main view you write: x.DisplayEntitiesWithRadioboxesViewModel) %> the framework automatically detects that the property is a collection and will call the editor template for each item of this collection so you no longer need to loop through the elements which makes your code more elegant. UPDATE: Using dropdown lists is also very easy: checkout this answer .
