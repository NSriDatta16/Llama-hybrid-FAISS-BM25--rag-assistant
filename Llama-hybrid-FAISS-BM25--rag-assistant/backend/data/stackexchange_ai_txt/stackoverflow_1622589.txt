[site]: stackoverflow
[post_id]: 1622589
[parent_id]: 1622530
[tags]: 
1) Am I right in thinking that what I implemented would be considered a "stack-based machine" given the terminology used in the quotation above? Not really. A stack of some sort is pretty much the only way to implement recursive function calls. But a "stack-based machine" goes much further in doing everything via the stack. Not just function calls, but also arithmetic operations. In a way, they behave as if every machine instruction is a function call handled via the stack. It makes for a very simple machine design, but rather hard-to-write assembler/machine code. 2) If my assumption in point (1) was right, how does a "register machine" work? i.e. how is it different from a stack-based machine? A register machine has some fast internal storage (registers) and performs most of its operations on data in these registers. There are additional machine instructions for copying data between registers and main memory. IIRC there are two kinds of stack machines: Accumulator machines have an "accumulator", which is basically a single register that holds the result of calculations (and may also supply an operand), with most machine instructions operating on the accumulator. "Pure" stack machines put the result of calculations on top of the stack after consuming the operands.
