[site]: stackoverflow
[post_id]: 741907
[parent_id]: 741857
[tags]: 
Basically, any graphics compression algorithm is going to do what you want. They're heavily optimized for compressing 2D arrays of numbers into the smallest possible footprint. Edited to add: The other thing to consider, since you're looking to use compression to reduce processing time, is that getting really high compression ratios generally involves more calculation to compress and decompress the array. You may reach a point where you're spending more time compressing and decompressing the array than running the neural network. Edited again to add: Based on your comments, it sounds like what you may want is a space-filling curve . Use the curve to turn your 50x50* array into a 1x2500 line and then come up with a formula that approximates the values you want for each cell of the array. *Does the array have to be 50x50? It may be much easier to fill with a space filling curve if it's a square of slightly different dimensions. The Hilbert curve works nicely for dimensions that are powers of two, for instance.
