[site]: stackoverflow
[post_id]: 4357742
[parent_id]: 4356273
[tags]: 
Ok, let's see. 1) Entity Framework - it's mostly an ORM (Object-Relational Mapper). The idea of EF is actually a little more ambitious than that; the true goal is to create the uber-be-all modelling framework for all kinds of data (that's EDM) and then provide software that implements and supports that model (EF). In practice, though, it's an ORM. 2) Umm, is there actually a question here? 3) Run, don't walk, to buy Eric Evan's Domain Driven Design . This is the book that defined the DDD vocabulary everyone uses today. Want to know what a repository really is? It's in here. 4) Hell yes. Agile is the ideas embodied in the Agile Manifesto . It's the underlying principles. SCRUM is a particular methodology (well, methodology framework) that conforms to those principles. There are lots of agile methods (Extreme Programming and Crystal Clear are two examples off the top of my head), but they all share the same underlying principles. 5) Well, it should be the first thing you think of, but you should be doing Test Driven Design, not Unit Testing. TDD is a design / development activity, Unit Testing is a test activity. Web UI testing is a pain, granted. Although your question is a little vague and it looks like multipart. You might want to split this one out into separate, more specific questions. 6) I'm not really a SQL guy, but I've gotten pretty far with just the basics - SELECT is remarkably complicated just for starters. Although I'm of the opinion that if you need conditional logic or loops inside your TSQL sprocs, something has gone terribly, terribly wrong. You're better off really understanding the theory - the relational model, normal forms, and the various data types and how they behave. 7) Yes, for most of them. Each one plays a different part in the software stack. Assuming you're doing a RIA style client, you'd have the silverlight app running in the browser providing the UI, communicating back to a web server that's responding via an MVC site. Entlib is useful in implementing that MVC app. If you're using Silverlight, you will be using EF for data access most likely. You can also use it to hit the database inside the MVC app. Sharepoint may be a little problematic - it's also a web server thing, so you could consider it a competitor for the MVC app. But you could also use it as a data store. 8) LINQ rocks. It's a different way of thinking about certain problems around managing sequence of data. The thing I like about it is that it's very composable - you can filter, transform, and operate on data in lots of ways, and pass those things around and do more filtering / transforming along the way and it just all slots together seamlessly. Plus, the language stuff needed to implement LINQ brought in a whole TON of new power to C# / VB.NET which is really, really cool. 9) Hello world is always useful just to make sure you've got the editor-compiler-debugger toolchain nailed down and working. After that, I tend to dive into whatever I feel like. When I first tried Silverlight I did a little game. I may do a small parser. Or just try to throw some windows on the screen. I don't have a standard new project. 10) Agreed on the recommendations for Design Patterns and POEAA. I also strongly recommend The Pragmatic Programmer by Hunt and Thomas. It's not about the theory of programming, it's about the craftsmanship of building software.
