[site]: stackoverflow
[post_id]: 2180136
[parent_id]: 2179849
[tags]: 
Here's a basic idea: expected_number_of_elements = 10^6 spread_factor = 100 first element gets position = spread_factor * expected_number_of_element each following element inserted: if its inserted in last position, give it the last element's position + spread_factor if its inserted in the first position, give it the first element's position - spread_factor otherwise, put it in the middle between its 2 closest neighbors if you don't have any space left: expand_the_array expand_the_array: spread_factor = spread_factor * 10 iterate over all the elements, and multiply position by 10. expanding the array is an expensive operation, but since it multiplies the size of the array, on average (assuming your input is random, and not crafted by an adversary) you'll have to do this operation very rarely. the major drawback of this solution, is that you'll have to watch out for int overflow....
