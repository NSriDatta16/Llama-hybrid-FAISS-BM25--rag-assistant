[site]: stackoverflow
[post_id]: 4257763
[parent_id]: 
[tags]: 
Unresolved reference when using inheritance

How can I get the template definition into a seperate header files? My code compiles when it is included in a single main.cpp. maip.cpp #include #include template class Base { public: virtual ~Base() {} virtual T1 f1(); virtual T2 f2(); }; template T1 Base ::f1() {return T1();} template T2 Base ::f2() {return T2();} class Derived : public Base { public: virtual ~Derived() {} }; int _tmain(int argc, _TCHAR* argv[]) { int i; Derived d; i = d.f1(); return 0; } However, when I break it up I get unresolved external symbols: main.cpp #include #include #include "Base.h" #include "Derived.h" int _tmain(int argc, _TCHAR* argv[]) { int i; Derived d; i = d.f1(); return 0; } Base.h #pragma once template class Base { public: Base(); virtual ~Base() {} virtual T1 f1(); virtual T2 f2(); }; template T1 Base ::f1() {return T1();} template T2 Base ::f2() {return T2();} Derived.h #pragma once class Derived : public Base { public: virtual ~Derived() {} }; This results in: Error 1 error LNK2019: unresolved external symbol "public: __thiscall Base::Base(void)" (??0?$Base@HH@@QAE@XZ) referenced in function "public: __thiscall Derived::Derived(void)" (??0Derived@@QAE@XZ)
