[site]: stackoverflow
[post_id]: 2602265
[parent_id]: 2602045
[tags]: 
Arg, answer-fying my previous comment above. To your third question "measures ... to prevent someone from logging in as another user ...", as I understand OpenId, you never accept an OpenId Url from an untrusted source. In implementation, your site hosts a provider's login, provider's site contacts you directly , so you are accepting an OpenId Url from a trusted site, always. In other words, even if a malicious user collects OpenIds like Pokemon, they have no means by which to access your system. To your second question "how do I store ..." your schema will work, though it looks a little relaxed. For instance, by using a many-to-many mapping [ie UserID to OpenID ] you permit a user to belong to many OpenIds, and a single OpenId to belong to many users. You want the former without the latter. A simple foreign key constraint will suffice. UserID Email ------ --------------- 86000 bob@yahoo.com 86001 alice@yahoo.com UserID Identifier ------ ---------------- 86000 https:\\me.yahoo.com\bob#d36bd 86000 https:\\me.yahoo.com\bigbobby#x75af 86001 https:\\me.yahoo.com\alice#c19fd Provided UserID is a foreign key to Users table and there is a unique key constraint on Identifier , this essentially states a User owns zero or many unique Identifier s. On principle, I would probably slap a primary key on that table too, but that's gravy. Hope this helps :) PS if you have doubts about integrating or leveraging OpenId, then step through an implementation. Identify every bit of source that takes in an OpenId Url, then ask yourself if it is possible for a malicious user to access that entry point. I would hope there is only one such entry point and it is inaccessible to everyone except trusted OpenId providers.
