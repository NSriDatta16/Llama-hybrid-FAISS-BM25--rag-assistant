[site]: crossvalidated
[post_id]: 82678
[parent_id]: 
[tags]: 
From one-dimension-SVR to multi-dimension-SVR (?) using MATLAB/LibSVM

this is my first post here. I already checked the Thread-Tags but I did not find any answer... My problem/question is how I can upgrade my SVR from one-dimension- to multi-dimension-regression. Its more a basic question. So let me introduce you into this. First I built a one-dim-SVR using MATLAB/LibSVM recording to an already existing Thread: LibSVM and matlab for time series prediction x = [1:10]'; //full data set y = [11:11:110]'; //full label set TrainingSet = x(1:end-3); //training data for SVR (70%) TrainingSetLabels = y(1:end-3); //training labels for SVR (70%) TestSet = x(8:end); //test data (30%) TestSetLabels = [0;0;0]; //test labels options = ' -s 3 -t 0 -c 100 -p 0.001 -h 0'; model = svmtrain(TrainingSetLabels, TrainingSet, options); [predicted_label, accuracy, decision_values] = ... svmpredict(TestSetLabels, TestSet, model); This is a simple code for one-dim-regression. With a data amount of 10 values. To train the machine it uses the first 7 values with its labels. After this the last 3 values are used for regression. With this code I get pretty good regression and accuracy. This works. Fine! Now, I want to simply upgrade this into a multi-dim-regression. To understand this I want a 2-class-regression. Lets say each class has also 10 values like the first code above. And the values are the same (from 1 to 10). The labels are the products of coresponding values like: labels X1 X2 1 1 1 4 2 2 9 3 3 16 4 4 25 5 5 36 6 6 49 7 7 ? 8 8 ? 9 9 ? 10 10 The questionmarks representing the "unknown labels". (Of course we know them; not the machine) So I created this code... just by reading the LibSVM-Readme. x = [1:10; 1:10]'; //full data set with two classes y = [1; 4;9;16;25;36;49;64;81;100]; // full label set TrainingSet = x(1:end-3, :); //training data set TrainingSetLabels = y(1:end-3); //training label set TestSet = x(8:end, :); //test data set TestSetLabels = [0;0;0]; //test label set options = ' -s 3 -t 0 -b 1 -c 100 -p 0.001 -h 0'; model = svmtrain(TrainingSetLabels, TrainingSet, options); [predicted_label, accuracy, decision_values] = ... svmpredict(TestSetLabels, TestSet, model); Here I get no single good regression and accuracy. Of course I used several Kernels. But there was no exceptable change. So here is my question/problem: Is my code wrong? Did I miss something? Why do I not get better regression? Please help me to get into this. Thank you!
