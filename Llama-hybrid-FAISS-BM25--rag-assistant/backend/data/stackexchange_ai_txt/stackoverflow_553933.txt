[site]: stackoverflow
[post_id]: 553933
[parent_id]: 553877
[tags]: 
If there is an ENUM type available, go with that. Otherwise, I suggest two options: Store it as a single byte (or the smallest integral type available). Then you can convert to and from an enum in your application at will. I think this is the cleanest approach and binds quite well to ComboBox es as a key-value pair. You can also store the strings in a separate table and have the existing column be a foreign key into this new table. It's then easy to JOIN on this table and get a fast string lookup to display on your form. However, it is additional overhead and possibly puts your strings in two locations - your application and the database. Moreover, if you ever want to localize, you're in for a real hassle. I can't recommend going with the string (VARCHAR / CHAR) option if you want to build any application logic around this column. You'll be stuck comparing strings all day, which IMHO is rather ugly and slow. They're also slower to sort and query on than a simple integral type. (You are safe in your example, however, because you can just compare the first character 'S', 'M', or 'L' - a single byte. But you'll have to specifically instruct it to sort and query that way.) If you simply are looking to display the value, you can go with the string, but keep in mind the size. Your database can easily blow up in size by storing the strings: 1,000,000 rows of a CHAR(6) is 5,000,000 bytes more than using a single byte. Using VARCHAR(6) would yield an average length of 5 = 4,000,000 bytes extra for 1,000,000 rows.
