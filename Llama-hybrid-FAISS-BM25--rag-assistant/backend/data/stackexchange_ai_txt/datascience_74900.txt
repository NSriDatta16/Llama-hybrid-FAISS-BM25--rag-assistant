[site]: datascience
[post_id]: 74900
[parent_id]: 
[tags]: 
NLP+Non Text Features . How to give more weight to non NLP features?

I have some text and some metadata associated with it. Before classification I have made feature matrix in such way: Non Text features + TFIDF vectorizer matrix So if had 5 non text features (like position of text, does text contain digits etc) and TFIDF matrix contains 100 columns then total columns fed to classifier is 105. I am using DecisionTree classifier. Now, the problem is that, the classifier is using only features derived from text to make decisions. In some cases of mis-classifications I observed that the non text feature (position of text) was actually the decision factor. I think it is because the number of features generated by TFIDF vectorizer are too many (1800+). Any idea on how to make other features also contributor to classification. In case you want to see code : train_x = train[["Diff","col9","col10", "col6"]] # Non text features tfidf_vect = TfidfVectorizer(analyzer='word', token_pattern=r'\w{1,}', use_idf=False, ngram_range=(1,3)) train_x1 = pd.concat([train_x, xtrain_tfidf_ngram_df], axis=1) #Merge non text and text features model.fit(train_x1, y=train_y) predicted=model.predict(test_x1) Sample training matrix after merge: index Diff col9 col10 col6 0 1 2 3 4 5 6 7 ... 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 0 0 -2158 1 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1 1 15 1 1 1 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2 2 27 1 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
