[site]: stackoverflow
[post_id]: 414042
[parent_id]: 356035
[tags]: 
I would suggest using a mean-shift kernel to find the density center of your dots. Mean-shift illustration http://cvr.yorku.ca/members/gradstudents/kosta/compvis/file_mean_shift_path.gif This figure shows a mean-shift kernel (centered initially on the edge of the cluster) converge towards the cluster's point of highest density. In theory (in a nutshell): Several answers to this questions already hinted at the mean-shift way of doing it: P Daddy's blurring the image and finding the darkest spot is actually a kernel density estimation (KDE) method, which is the theoretical basis of the mean-shift. Both j0rd4n and Bill the Lizard suggested to discretize your space into blocks and inspect their densities. What you see in the animated figure is a combination of these two suggestions: it uses a moving "block" (i.e. the kernel) to seek the locally highest density. The mean-shift is an iterative method that uses a pixel neighborhood called the kernel (similar to this one ) and uses it to compute the mean of the underlying image data. The mean in this context is the pixel-weighted average of the kernel coordinates. In each iteration the kernel's mean defines its center coordinates for the next iteration - this is called the shift . Hence the name mean-shift . The stop condition for the iterations is when the shift distance drops to 0 (i.e. we are at the most dense spot in the neighborhood). A comprehensive introduction to mean-shift (both in theory and application) can be found in this ppt presentation. In practice: An implementation of the mean-shift is available in OpenCV : int cvMeanShift( const CvArr* prob_image, CvRect window, CvTermCriteria criteria, CvConnectedComp* comp ); O'Reilly's Learning OpenCv (google book excerpts) also has a nice explanation on how it works. Basically just feed it your dots image (prob_image). In practice, the trick is to choose the adequate kernel size . The smaller the kernel, the closer you need to initiate it to the cluster. The bigger the kernel, the more random your initial position can be. However, if there are several clusters of dots in your image, the kernel might converge right between them.
