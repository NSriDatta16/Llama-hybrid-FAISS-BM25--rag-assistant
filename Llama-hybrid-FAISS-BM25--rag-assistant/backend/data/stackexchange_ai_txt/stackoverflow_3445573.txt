[site]: stackoverflow
[post_id]: 3445573
[parent_id]: 
[tags]: 
plists vs Core Data for holding parameters

I am writing an iPad app that will be expandable with new items via in-app purchasing. For example, my current plan is to have a jpg pattern and a matching plist file with the parameters I need to expand that pattern into a full picture. The user will select one jpg/png from a list of small thumbnails - the list is held in Core Data - and the app will find the matching plist for displaying the jpg/png correctly. I'll only have about 10 of these open at one time. But I could end up with storing 1000s of jpgs and plists. Does storage of lots of small files cause app problems? I'm going the plist way, rather than storing the parameters in Core Data, so that if I need to add parameters later, I don't have to migrate the database, just change the access in code. (And when I'm creating the patterns, it's easier to concentrate on a plist file rather than a Core Data row.) The app seems to work really well at the moment, but I'm worried about futures... My app does also use Core Data for other things, so I could change over if the app will get bogged down with number of files. Thanks.
