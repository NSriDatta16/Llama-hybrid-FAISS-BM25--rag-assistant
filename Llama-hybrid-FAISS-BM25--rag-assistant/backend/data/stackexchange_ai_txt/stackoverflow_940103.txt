[site]: stackoverflow
[post_id]: 940103
[parent_id]: 939605
[tags]: 
I'm going to skip the standard "don't worry about optimizations" since everyone else has covered that. It will be fastest to declare your buffer as a local to your function, and use memset to 0 it. With a local buffer, the space is "allocated" by the compiler simply by moving the stack pointer the right number of bytes. Allocation doesn't get any faster than that. With visual studio you can add the #pragma intrinsic( memset ). I know gcc supports intrinsics too, but I don't remember how to tell it to use them. I think the latest versions will use them where ever possible without being told to. The intrinsic memset expands to a few inlined instructions that tell the processor to 0 a range of memory. You won't get any faster than that. That said, don't zero the memory if you don't need to. In addition, your code will be far clearer simply using a locally declared buffer. From what you've said, your buffer does not need to persist outside of the scope of the routine that is going to use it. 1000 bytes is tiny in modern terms. Using dynamic instead of automatic memory will add a bunch of code that has to be tested and maintained. Don't do it. Automatic memory is the obvious choice.
