[site]: stackoverflow
[post_id]: 5194464
[parent_id]: 
[tags]: 
How to programatically control an object's add-menu list of allowed content types?

I would like pragmatically to control individual objects' add-menu list of allowed content types. I am building a collection of content types with archgenxml. In one case, I have a simulation class composed of a RangeBase class which has three realizations, valueRange, vectorRange and uniformRange. A simulation can contain exactly one range, i.e., RangeBase's multiplicity is one, so a simulation's add-menu should offer either all three range types or none at all. To achieve this, I thought to subscribed to the IObjectInitializedEvent and IObjectRemovedEvent events; placing their respective handlers, initializedHook and removedHook, in the RangeBase class. The handlers would solicit an object's list of locally allowed types and remove or add the three ranges accordingly. After perusing the Plone's 'Community Developer Documentation', I thought the initializedHook code might look something like this: # Set allowed content types from Products.ATContentTypes.lib import constraintypes def initializedHook(obj, event): # Get this range's parent simulation parent = obj.aq_parent # Enable constraining parent.setConstrainTypesMode(constraintypes.ENABLED) # Remove the three ranges allowedTypes = parent.getLocallyAllowedTypes() ranges = ('valueRange','vectorRange','uniformRange') for range in ranges: allowedTypes.remove(range) # Tweak the menu parent.setLocallyAllowedTypes(allowedTypes) parent.setImmediatelyAddableTypes(allowedTypes) Unfortunately, my simulation class has none of these functions. Is there an adaptor that will provide my simulation class with this functionality, or are there other altogether different approaches to achieve the desired menu behaviour? Any suggestions would be appreciated.
