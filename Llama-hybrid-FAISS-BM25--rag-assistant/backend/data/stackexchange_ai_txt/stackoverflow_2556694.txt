[site]: stackoverflow
[post_id]: 2556694
[parent_id]: 2556520
[tags]: 
Think of IB as an Object Creator and not a code generator. That really helps. What IB does is actually create instances of objects as they are dragged on to the desktop/view/XIB window. It then allows you to start creating various connections (with a control drag on the mouse) from one object to another object. You then instantiate the entire XIB by unarchiving it from your bundle. This is highly automatic and reading up on UIViewController should move you along a bit. Look at: initWithNibName:bundle: You basically have two types of connections: Outlet: This is how you teach one object about the existence of another object. For example, you might have a controller object that needs access to a button. You create an outlet (either in XCode Text Edit in the controller.h file/property area or in IB by adding an outlet) in your controller and then control-click-drag from the outlet to the button. Actions: This is how you trigger an event on one object to call a method on another object. Actions will have a prototype of: - (IBAction) someMethod:(id) sender; I think the ":(id) sender" is optional if your method does not need a link to the object causing the event. Within IB, you can arrange objects and set various attributes like size, color, position, target/actions, user interactions, Files Owner... That brings me to files owner. Big concept here. It tends to be the Controller that loads the NIB (OK: I have a custom window controller I have used for over 15 years but Apple has a really good one UIViewController that does all sorts of goodness.) and acts as a proxy in IB. It is not actually instantiated in IB but it will be when you alloc and request it to load the NIB (XIB files are XML files that are turned into NIB files by the compile process)
