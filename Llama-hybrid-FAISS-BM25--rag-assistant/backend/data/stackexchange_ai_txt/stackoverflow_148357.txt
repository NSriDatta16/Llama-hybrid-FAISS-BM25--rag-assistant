[site]: stackoverflow
[post_id]: 148357
[parent_id]: 148298
[tags]: 
I prefer (i == 0), but I still sort of make a "rule" for myself to do (0 == i), and then break it every time. "Eh?", you think. Well, if I'm making a concious decision to put an lvalue on the left, then I'm paying enough attention to what I'm typing to notice if I type "=" for "==". I hope. In C/C++ I generally use -Wall for my own code, which generates a warning on gcc for most "=" for "==" errors anyway. I don't recall seeing that warning recently, perhaps because the longer I program the more reflexively paranoid I am about errors I've made before... if(DialogResult.OK == MessageBox.Show("Message")) seems misguided to me. The point of the trick is to avoid accidentally assigning to something. But who is to say whether DialogResult.OK is more, or less likely to evaluate to an assignable type than MessageBox.Show("Message")? In Java a method call can't possibly be assignable, whereas a field might not be final. So if you're worried about typing = for ==, it should actually be the other way around in Java for this example. In C++ either, neither or both could be assignable. (0==i) is only useful because you know for absolute certain that a numeric literal is never assignable, whereas i just might be. When both sides of your comparison are assignable you can't protect yourself from accidental assignment in this way, and that goes for when you don't know which is assignable without looking it up. There's no magic trick that says "if you put them the counter-intuitive way around, you'll be safe". Although I suppose it draws attention to the issue, in the same way as my "always break the rule" rule.
