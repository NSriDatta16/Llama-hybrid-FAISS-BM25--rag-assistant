[site]: stackoverflow
[post_id]: 2168539
[parent_id]: 473958
[tags]: 
Although most of you indicate that you shouldn't write your own memory manager, it could still be useful if: you have a specific requirement or situation in which you are sure you can write a faster version you want to write you own memory-overwrite logic (to help in debugging) you want to keep track of the places where memory is leaked If you want to write your own memory manager, it's important to split it in the following 4 parts: a part that 'intercepts' the calls to malloc/free (C) and new/delete (C++). This is quite easy for new/delete (just global new and delete operators), but also for malloc/free this is possible ('overwrite' the functions of the CRT, redefine calls to malloc/free, ...) a part that represents the entry point of your memory manager, and which is called by the 'interceptor' part a part that implements the actual memory manager. Possibly you will have multiple implementations of this (depending on the situation) a part that 'decorates' the allocated memory with information of the call stack, overwrite-zones (aka red zones), ... If these 4 parts are clearly separated, it also becomes easy to replace one part by another, or add a new part to it e.g.: add the memory manager implementation of Intel Tread Building Blocks library (to part 3) modify part 1 to support a new version of the compiler, a new platform or a totally new compiler Having written a memory manager myself, I can only indicate that it can be really handy having an easy way to extend your own memory manager. E.g. what I regularly have to do is finding memory leaks in long-running server applications. With my own memory manager I do it like this: start the application and let it 'warm up' for a while ask your own memory manager to dump an overview of the used memory, including the call stacks at the moment of the call continue running the application make a second dump sort the two dumps alphabetically on call stack look up the differences Although you can do similar things with out-of-the-box components, they tend to have some disadvantages: often they seriously slow down the application often they can only report leaks at the end of the application, not while the application is running But, also try to be realistic: if you don't have a problem with memory fragmentation, performance, memory leaks or memory overwrites, there's no real reason to write your own memory manager.
