[site]: stackoverflow
[post_id]: 4357297
[parent_id]: 
[tags]: 
Use of Vectors in java

I've been working on this problem and it involves the implementation of the markov chain algorithm in java. It gives me an error when I assign the variable r the value of a vector's element. (Line 54).The error reads "array required but java.unit.Vector found). The code is pasted below. import java.io.*; import java.util.*; class Chain { static final int NPREF = 2; // size of prefix static final String NONWORD = "\n"; // "word" that can't appear Hashtable statetab = new Hashtable(); // key = Prefix, value = suffix Vector Prefix prefix = new Prefix(NPREF, NONWORD); // initial prefix //Random rand = new Random(); // Chain build: build State table from input stream void build(BufferedReader in) throws IOException { StreamTokenizer st = new StreamTokenizer(in); st.resetSyntax(); // remove default rules st.wordChars(0, Character.MAX_VALUE); // turn on all chars st.whitespaceChars(0, ' '); // except up to blank while (st.nextToken() != st.TT_EOF) add(st.sval); add(NONWORD); } // Chain add: add word to suffix list, update prefix void add(String word) { Vector suf = (Vector) statetab.get(prefix); if (suf == null) { suf = new Vector(); statetab.put(new Prefix(prefix), suf); } suf.addElement(word); prefix.pref.removeElementAt(0); prefix.pref.addElement(word); } // Chain generate: generate output words void generate(int nwords, PrintWriter out, Vector random_num) { prefix = new Prefix(NPREF, NONWORD); for (int i = 0; i random_num = new Vector (); static BufferedReader random_reader; public static void main(String[] args) throws IOException { BufferedReader in = new BufferedReader (new FileReader ("../alice30.txt")); PrintWriter out = new PrintWriter (new FileWriter ("../output/markov_java_out.txt")); BufferedReader random_reader = new BufferedReader (new FileReader ("../random_num.txt")); String s; s= random_reader.readLine(); while(s != null) { int element = Integer.parseInt(s.trim()); random_num.addElement(new Integer(element)); s = random_reader.readLine(); } Chain chain = new Chain(); int nwords = MAXGEN; chain.build(in); in.close(); chain.generate(nwords,out, random_num); out.close(); } }
