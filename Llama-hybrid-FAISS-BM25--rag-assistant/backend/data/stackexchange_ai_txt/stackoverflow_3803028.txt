[site]: stackoverflow
[post_id]: 3803028
[parent_id]: 530215
[tags]: 
I have recently evaluated and picked a persistence framework for a java project and my findings are as follows: What I am seeing is that the support in favour of JDO is primarily: you can use non-sql datasources, db4o, hbase, ldap, bigtable, couchdb (plugins for cassandra) etc. you can easily switch from an sql to non-sql datasource and vice-versa. no proxy objects and therefore less pain with regards to hashcode() and equals() implementations more POJO and hence less workarounds required supports more relationship and field types and the support in favour of JPA is primarily: more popular jdo is dead doesnt use bytecode enhancement I am seeing a lot of pro-JPA posts from JPA developers who have clearly not used JDO/Datanucleus offering weak arguments for not using JDO. I am also seeing a lot of posts from JDO users who have migrated to JDO and are much happier as a result. In respect of JPA being more popular, it seems that this is due in part due to RDBMS vendor support rather than it being technically superior. (Sounds like VHS/Betamax to me). JDO and it's reference implementation Datanucleus is clearly not dead, as shown by Google's adoption of it for GAE and active development on the source-code (http://sourceforge.net/projects/datanucleus/). I have seen a number of complaints about JDO due to bytecode enhancement, but no explanation yet for why it is bad. In fact, in a world that is becoming more and more obsessed by NoSQL solutions, JDO (and the datanucleus implementation) seems a much safer bet. I have just started using JDO/Datanucleus and have it set up so that I can switch easily between using db4o and mysql. It's helpful for rapid development to use db4o and not have to worry too much about the DB schema and then, once the schema is stabilised to deploy to a database. I also feel confident that later on, I could deploy all/part of my application to GAE or take advantage of distributed storage/map-reduce a la hbase /hadoop / cassandra without too much refactoring. I found the initial hurdle of getting started with Datanucleus a little tricky - The documentation on the datanucleus website is a little hard to get into - the tutorials are not as easily to follow as I would have liked. Having said that, the more detailed documentation on the API and mapping is very good once you get past the initial learning curve. The answer is, it depends what you want. I would rather have cleaner code, no-vendor-lock-in, more pojo-orientated, nosql options verses more-popular. If you want the warm fussy feeling that you are doing the same as the majority of other developers/sheep, choose JPA/hibernate. If you want to lead in your field, test drive JDO/Datanucleus and make your own mind up.
