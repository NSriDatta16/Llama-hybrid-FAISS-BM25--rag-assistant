[site]: stackoverflow
[post_id]: 2968317
[parent_id]: 
[tags]: 
Multiple independent embedded Python Interpreters on multiple operating system threads invoked from C/C++ program

Embedding Python interpreter in a C/C++ application is well documented . What is the best approach to run multiple python interpreter on multiple operating system threads (i.e. one interpreter on one operating system thread within the same process) which are invoked from the C/C++ application? Such applications may also have problems related to memory fragmentation and limitations of Py_Finalize() . One such approach can be the following: Python thread and hence GIL disabled in pyconfig.h to keep it simple (#undef WITH_THREAD) All mutable global variables of Python Interpreter source code moved to heap-allocated struct referenced via Thread Local Storage (Reference: Python on a Phone ). My questions are: Is there any better approach? Are there any tools which can automate conversion of global variables of Python Interpreter source code to heap-allocated struct referenced via TLS (Thread Local Storage)? Similar topics are discussed here: Multiple independent Python interpreters in a C/C++ program? Multiple python interpreters within the same process Lua Versus Python
