[site]: stackoverflow
[post_id]: 1338611
[parent_id]: 1338542
[tags]: 
At some line of code, someone, sometime, will decide if it's appropriate to type the SQL. But instead of doing that, you'll use LINQ. So it's not a matter if LINQ should be inlined when SQL should not. The question is where you want your data storage access representation to be. If you're writing LINQ at some line of code, and you don't feel confortable of this scope having access to the stored data, then it's the wrong place. LINQ is just an abstraction for data manipulation. It's a shortcut for filtering sets. Just like databases understand SQL, the .NET environment has a language to talk with data. What's the difference between LINQ and doing if statements inside a loop, on data that came from a file, or a network socket? None, it's just the syntax. If you SELECT * FROM table , filtering every row against a function, what's the difference from doing where c.SomeProperty with LINQ? Just the syntax. Sure, LINQ knows and do more than simply returning rows from a database. It lets you instantiate objects from a collection, but so does = new ClassName(column1, colum2) from SQL statement results. In short, if somewhere writing inline SQL in your code is a no-no, so it should be writing LINQ. But this varies from project to project. Databases mostly understand SQL, so at least somewhere in your code, library or environment there are inlined SQLs.
