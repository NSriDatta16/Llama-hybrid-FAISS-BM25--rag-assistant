[site]: stackoverflow
[post_id]: 269296
[parent_id]: 266570
[tags]: 
I got very curious about your question, even after my previous answer. So I decided to check it myself too. I wrote this small piece of code (please ignore math correctness about checking if a number is prime ;-)): public class TestEnhancedFor { public static void main(String args[]){ new TestEnhancedFor(); } public TestEnhancedFor(){ int numberOfItems = 100000; double[] items = getArrayOfItems(numberOfItems); int repetitions = 0; long start, end; do { start = System.currentTimeMillis(); doNormalFor(items); end = System.currentTimeMillis(); System.out.printf("Normal For. Repetition %d: %d\n", repetitions, end-start); start = System.currentTimeMillis(); doEnhancedFor(items); end = System.currentTimeMillis(); System.out.printf("Enhanced For. Repetition %d: %d\n\n", repetitions, end-start); } while (++repetitions Running the app gave the following results for me: Normal For. Repetition 0: 5594 Enhanced For. Repetition 0: 5594 Normal For. Repetition 1: 5531 Enhanced For. Repetition 1: 5547 Normal For. Repetition 2: 5532 Enhanced For. Repetition 2: 5578 Normal For. Repetition 3: 5531 Enhanced For. Repetition 3: 5531 Normal For. Repetition 4: 5547 Enhanced For. Repetition 4: 5532 As we can see, the variation among the results is very small, and sometimes the normal loop runs faster, sometimes the enhanced loop is faster. Since there are other apps open in my computer, I find it normal. Also, only the first execution is slower than the others -- I believe this has to do with JIT optimizations. Average times (excluding the first repetition) are 5535,25ms for the normal loop and 5547ms for the enhanced loop. But we can see that the best running times for both loops is the same (5531ms), so I think we can come to the conclusion that both loops have the same performance -- and the variations of time elapsed are due to other applications (even the OS) of the machine.
