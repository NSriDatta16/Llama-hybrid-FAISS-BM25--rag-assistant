[site]: crossvalidated
[post_id]: 581076
[parent_id]: 
[tags]: 
PDF of the linear combination of two order statistics

I have just started to learn order statistics so please feel free to correct my notation/terminology. In my field is common to provide data as the median of some sample (for example several simulations of an experiment) and the uncertainties in therms of $16th$ and $84th$ percentiles. The problem that I am facing is that these percentiles are clearly asymmetric from the median, so the distribution seem to be strongly non gaussian. I decided to model the data from the point of view of order statistics. After some tedious algebra I managed to get the joint pdf of there order statistics, but after that I realized that the percentiles do not need to match with any real number from the sample i.e. if I have $9$ data the $50th$ percentile will be the $5th$ point, but if I have $10$ data the $50th$ percentiles is usually the average between the $5$ th and the $6$ th data. In general any percentile will be the weighted mean of two consecutive data points. For simplicity I want to start with obtaining the probability distribution of one of the percentiles (I will try to get the joint probability of three percentiles later). The idea I have is start from the the joint distribution of two consequent data. Which can be written as: $$f_{X_{i}, X_{i+1}}\left(x_i, x_{i+1}\right) = \frac{N!}{(i-1)!(N-i-1)!}F(x_i)^{i-1}[1-F(x_{i+1})]^{N-i-1}f(x_i)f(x_{i+1})$$ As commented before the percentile will (in general) be the weighted mean of those two variables. Explicitly: $$X_{i+\alpha}=(1-\alpha)X_{i} + \alpha X_{i+1},\hspace{2em} \alpha\in[0,1].$$ Following this post about the pdf of the sample median , I tried to make a change of variables to this new set: $(U, X_{i+\alpha}) = \left(X_{i+1} , (1-\alpha)X_{i} + \alpha X_{i+1}\right)$ , and integrate out the $U$ . Which lead to (I think): $$f_{X_{i+\alpha}} = \frac{N!}{(i-1)!(N-i-1)!}\int_{X_{i+\alpha}}^{\infty} \frac{dU}{(1-\alpha)}F\left(\frac{X_{i+\alpha}-\alpha U}{1 -\alpha}\right)^{i-1}\left[1-F(U)\right]^{N-i-1}f\left(\frac{X_{i+\alpha}-\alpha U}{1 -\alpha}\right)f(U)$$ I am integrating from $X_{i}$ to $\infty$ as by definition $X_{i+1}>X_{i}$ . Is this right or should I integrate from $-\infty$ ? Can I continue simplifying the pdf? or do I need to asume a shape for $f$ and $F$ ? EDIT I have tried to program it to check wether it works or not, and it seems a little bit biased and I am not sure why. I have computed the 10th percentile of 128 samples from a uniform distribution 10K times. You can see it in the histogram of the figure. In orange I also show the expected pdf from the equation derived before. For this particular dataset $\alpha=0.8$ , $i=12$ and $N=128$ . You can clearly see how it deviates one from another. I have also included some code to reproduce the plot. import matplotlib.pyplot as plt import numpy as np from scipy.integrate import quad def log_fac(x): """ Auxiliar function to compute the logarithm of the factorial of x: """ return np.sum(np.log(np.arange(1, x+1))) def percentile_statistic(xx, perc, N, FF, ff, ubound=np.inf): """ Compute the provability of the -th percentile at given that we had samples from the underlaying distribution described via the PDF ( ) and CDF ( ). params : -------- xx : array-like, at which points do we want the probability perc : float, which percentile we are interested in. Should be between [0, 100] N : int, number of samples we got from the distribution FF : callable, Objective CDF. FF(xx) ff : callable, Objective PDF. ff(xx) ubound : float, user bound of the domine. Default np.inf. It will be pass to spicy.integrate.quad as the upper limit of the integral """ ii = int(np.floor(perc*N/100)) assert ii > 0, "If ii==0 we should compute the PDF of the minima." # we end up having a 0^-1, as is implemented right now assert ii samples from a Uniform distribution and computes the -th percentile, times. params: ------- perc : float, the percentile we are interested in N : int, number of samples per realization itt : int, number of realizations """ rnd = np.zeros(itt) for ii in range(itt): _rd = np.random.random(N) rnd[ii] = np.percentile(_rd, perc) return rnd def pdf_uniform(x, ulim=1, llim=0): """ PDF of uniform distribution """ if (x = ulim): return 0 else: return 1/(ulim-llim) def cdf_uniform(x, ulim=1, llim=0): """ CXDF of uniform distribution """ if x = ulim: return 1 else: return (x-llim)/(ulim-llim) ## Lets start N = 128 perc = 10 Nreal = 10000 FF = cdf_uniform ff = pdf_uniform xx = np.linspace(0, 1, 200) analytical_pdf = percentile_statistic(xx, perc, N, FF, ff, ubound=1) numerical_sampling = empirical_percentile_statistics(perc, N, itt=Nreal) # start ploting f, ax = plt.subplots() ax.hist(numerical_sampling, bins=100, range=(0, 1), density=True) ax.plot(xx, analytical_pdf) ax.set_xlabel(r" $x_{{{}th}}$ ".format(perc)) ax.set_ylabel(r" $f(x_{{{}th}}| N={})$ ".format(perc, N)) ax.set_xlims(0, .2)
