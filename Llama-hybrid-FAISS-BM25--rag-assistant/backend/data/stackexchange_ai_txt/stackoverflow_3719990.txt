[site]: stackoverflow
[post_id]: 3719990
[parent_id]: 3606366
[tags]: 
Updating (after more than 10 years!) with an improved version using suggestions from the comments: This gives you a list of all your tables in order of reserved size, ordered from largest to smallest. This uses the same method as the previous one, but makes the results table a variable so it doesn't have to be cleaned up when done. Also it converts all the values to actual integers so they can be easily viewed and sorted. DECLARE @tmpTableSizes TABLE ( tableName VARCHAR(100), numberofRows VARCHAR(100), reservedSize VARCHAR(50), dataSize VARCHAR(50), indexSize VARCHAR(50), unusedSize VARCHAR(50) ) INSERT @tmpTableSizes EXEC sp_MSforeachtable @command1="EXEC sp_spaceused '?'" SELECT tableName, CAST(numberofRows AS INT) 'numberOfRows', CAST(LEFT(reservedSize, LEN(reservedSize) - 3) AS INT) 'reservedSize KB', CAST(LEFT(dataSize, LEN(dataSize) - 3) AS INT) 'dataSize KB', CAST(LEFT(indexSize, LEN(indexSize) - 3) AS INT) 'indexSize KB', CAST(LEFT(unusedSize, LEN(unusedSize) - 3) AS INT) 'unusedSize KB' FROM @tmpTableSizes ORDER BY [reservedSize KB] DESC Previous Version before 2023-02-21: Combining the answers from ratty's and Haim's posts (including comments) I've come up with this, which for SQL Server seems to be the most elegant so far: -- DROP TABLE #tmpTableSizes CREATE TABLE #tmpTableSizes ( tableName varchar(100), numberofRows varchar(100), reservedSize varchar(50), dataSize varchar(50), indexSize varchar(50), unusedSize varchar(50) ) insert #tmpTableSizes EXEC sp_MSforeachtable @command1="EXEC sp_spaceused '?'" select * from #tmpTableSizes order by cast(LEFT(reservedSize, LEN(reservedSize) - 4) as int) desc This gives you a list of all your tables in order of reserved size, ordered from largest to smallest.
