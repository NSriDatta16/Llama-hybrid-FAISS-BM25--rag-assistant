[site]: stackoverflow
[post_id]: 5254647
[parent_id]: 5252202
[tags]: 
This was actually quite a bit of fun to play with and hopefully the solution is somehow what you were looking for. This is flexible enough to cater not only for links, but also other patterns where you may want to replace a word for another using certain conditions: I have commented most of the code so it should be pretty self explanatory. If not, feel free to leave a comment and I will try my best to help: - (NSString*)replacePattern:(NSString*)pattern withReplacement:(NSString*)replacement forString:(NSString*)string usingCharacterSet:(NSCharacterSet*)characterSetOrNil { // Check if a NSCharacterSet has been provided, otherwise use our "default" one if (!characterSetOrNil) characterSetOrNil = [NSCharacterSet characterSetWithCharactersInString:@" !?,()]"]; // Create a mutable copy of the string supplied, setup all the default variables we'll need to use NSMutableString *mutableString = [[[NSMutableString alloc] initWithString:string] autorelease]; NSString *beforePatternString = nil; NSRange outputrange = NSMakeRange(0, 0); // Check if the string contains the "pattern" you're looking for, otherwise simply return it. NSRange containsPattern = [mutableString rangeOfString:pattern]; while (containsPattern.location != NSNotFound) // Found the pattern, let's run with the changes { // Firstly, we grab the full string range NSRange stringrange = NSMakeRange(0, [mutableString length]); NSScanner *scanner = [[NSScanner alloc] initWithString:mutableString]; // Now we use NSScanner to scan UP TO the pattern provided [scanner scanUpToString:pattern intoString:&beforePatternString]; // Check for nil here otherwise you will crash - you will get nil if the pattern is at the very beginning of the string // outputrange represents the range of the string right BEFORE your pattern // We need this to know where to start searching for our characterset (i.e. end of output range = beginning of our pattern) if (beforePatternString != nil) outputrange = [mutableString rangeOfString:beforePatternString]; // Search for any of the character sets supplied to know where to stop. // i.e. for a URL you'd be looking at non-URL friendly characters, including spaces (this may need a bit more research for an exhaustive list) NSRange characterAfterPatternRange = [mutableString rangeOfCharacterFromSet:characterSetOrNil options:NSLiteralSearch range:NSMakeRange(outputrange.length, stringrange.length-outputrange.length)]; // Check if the link is not at the very end of the string, in which case there will be no characters AFTER it so set the NSRage location to the end of the string (== it's length) if (characterAfterPatternRange.location == NSNotFound) characterAfterPatternRange.location = [mutableString length]; // Assign the pattern's start position and length, and then replace it with the pattern NSInteger patternStartPosition = outputrange.length; NSInteger patternLength = characterAfterPatternRange.location - outputrange.length; [mutableString replaceCharactersInRange:NSMakeRange(patternStartPosition, patternLength) withString:replacement]; [scanner release]; // Reset containsPattern for new mutablestring and let the loop continue containsPattern = [mutableString rangeOfString:pattern]; } return [[mutableString copy] autorelease]; } And to use your question as an example, here's how you could call it: NSString *firstString = @"OMG!!!! this is the best convenience method ever, seriously! It even works with URLs like http://www.stackoverflow.com"; NSCharacterSet *characterSet = [NSCharacterSet characterSetWithCharactersInString:@" !?,()]"]; NSString *returnedFirstString = [self replacePattern:@"OMG" withReplacement:@"Oh my God" forString:firstString usingCharacterSet:characterSet]; NSString *returnedSecondString = [self replacePattern:@"http://" withReplacement:@"LINK" forString:returnedFirstString usingCharacterSet:characterSet]; NSLog (@"Original string = %@\nFirst returned string = %@\nSecond returned string = %@", firstString, returnedFirstString, returnedSecondString); I hope it helps! Cheers, Rog
