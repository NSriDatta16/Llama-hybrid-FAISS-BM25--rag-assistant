[site]: datascience
[post_id]: 115886
[parent_id]: 
[tags]: 
Can I use clustering after classification to improve the performance of my classifier?

Say I have a classifier that segments my feature vectors (e.g. representing applicants) into 3 distinct segments A, B, C by assigning each applicant a score between 0 (worst) and 1 (best) with e.g. a logistic regression trained on historical data (ground-truth labels: 1 = great, 0 = bad) and then applying 2 thresholds (A/B, B/C). Applicants in segments A are approved, while applicants in segments C are rejected. I'm unsure about applicants in segment B, so I reject them. But I am worried of missing out on some good applicants from segment B. So I'm wondering if the following approach makes sense: I cluster all applicants with e.g. k-means. For every "good" cluster, i.e. with a high proportion of applicants from segment A, I re-assign all applicants from segment B in that cluster to segment A, and approve them. My question is: Are there any intuitions or examples or better yet theoretical results why this approach can or cannot work, i.e. lead to a better classification accuracy based on the ground-truth labels (1 = great, 0 = bad)? What I've tried so far: Experiments show that indeed I can find some good applicants from segment B with clustering (using a large amount of clusters), however never better on average than simply taking the top x% segment B applicants based on assigned score. In a first research, I couldn't find any papers or questions on this site related to applying clustering after classification. What seems common instead is to apply clustering as a pre-processing step.
