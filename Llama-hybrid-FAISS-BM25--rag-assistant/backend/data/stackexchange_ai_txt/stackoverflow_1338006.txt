[site]: stackoverflow
[post_id]: 1338006
[parent_id]: 
[tags]: 
Handling dropped TCP packets in C#

I'm sending a large amount of data in one go between a client and server written C#. It works fine when I run the client and server on my local machine but when I put the server on a remote computer on the internet it seems to drop data. I send 20000 strings using the socket.Send() method and receive them using a loop which does socket.Receive(). Each string is delimited by unique characters which I use to count the number received (this is the protocol if you like). The protocol is proven, in that even with fragmented messages each string is correctly counted. On my local machine I get all 20000, over the internet I get anything between 17000-20000. It seems to be worse the slower connection that the remote computer has. To add to the confusion, turning on Wireshark seems to reduce the number of dropped messages. First of all, what is causing this? Is it a TCP/IP issue or something wrong with my code? Secondly, how can I get round this? Receiving all of the 20000 strings is vital. Socket receiving code: private static readonly Encoding encoding = new ASCIIEncoding(); ///... while (socket.Connected) { byte[] recvBuffer = new byte[1024]; int bytesRead = 0; try { bytesRead = socket.Receive(recvBuffer); } catch (SocketException e) { if (! socket.Connected) { return; } } string input = encoding.GetString(recvBuffer, 0, bytesRead); CountStringsIn(input); } Socket sending code: private static readonly Encoding encoding = new ASCIIEncoding(); //... socket.Send(encoding.GetBytes(string));
