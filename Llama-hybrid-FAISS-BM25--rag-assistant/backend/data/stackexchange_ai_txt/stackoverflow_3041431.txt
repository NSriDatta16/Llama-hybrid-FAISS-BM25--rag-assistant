[site]: stackoverflow
[post_id]: 3041431
[parent_id]: 3035506
[tags]: 
There are at least a couple of established and usable MVC frameworks for JavaScript JavaScriptMVC and pureMVC . There are probably more. I've used JavaScriptMVC for browser based and Air apps and keep coming back to it - it has its problems but I've found it to be quite useful. There are other solutions too, have a look at Sammy , a new thing I've heard good things about. I haven't used myself but intend to try soon. I don't know enough about it to describe it properly, but to me it seems like a front controller which works on routes, a templating system and ReSTful data stores. I'm not sure if it is MVC but has similar ingredients. I have to disagree with mway's answer . MVC may be a bit diferent to implement in JavaScript but its benefits are very important to organising this mess . The design patterns usually associated with OO languages don't go out the window just because js isn't class based. I would say that MVC is more suitable for JavaScript apps than for request based (server side) applications. Those objects can hang around for a while in a one page JavaScript app - minutes if not hours - and having a well organised way of organising their interaction will make your code much more robust and easy to deal with. There are books on the subject. A couple of other points regarding the code you posted. The view objects have responsibility for applying event listeners to DOM elements. This is the controller's job. The view just renders the HTML - the controller listens for the events and acts accordingly. Your models seem to know your views. The model layer should have minimal knowledge of the view layer (perhaps being registered as observers ). Keep your model clean and to the point, I mean the business point - business logic. In js apps you may just be proxying for a sever side model layer but it is important for your sanity to keep your model to the business logic and nothing else. Application logic is the controllers job
