[site]: stackoverflow
[post_id]: 1371347
[parent_id]: 
[tags]: 
Get the actual type of a generic object parameter

No doubt elements of this question have been asked before, but I'm having trouble finding an answer. (Disclaimer: this is related, but separate from a recent question I asked). I have a method like this: public static void Method (MethodInfo m, T value) { Type memberType = m.GetValueType(); if (memberType.IsAssignableFrom(typeof(List )) { object memberValue = Activator.CreateInstance(memberType); ((List )memberValue).Add(value); } } This works fine when I call it like this: string s = "blah"; Method(memberInfo, s); However, I need to call this method using a generic type, so I'm calling it like this: Type valueType = someType; object passValue = someMethod.MakeGenericMethod(new Type[] { valueType }).Invoke(this, new object[] { }); /* Call my original method */ Method(memberInfo, passValue ); Now, intellisense knows that 'value' in Method is whatever type valueType is (say 'FooObject'). But 'T' is object, which means that a List is not assignable from a List (i.e. a List ). I've tried using Convert.ChangeType on the variable ('passValue') beforehand but that wasn't any more useful. As there is no way to cast a variable to the Type of a type variable, how do I get around this? Is the best solution to somehow not rely on IsAssignableFrom and do a looser type check of whether this will work? The problem with this is that I'm not sure I'll be able to cast the memberValue properly unless 'T' is truly the element type of memberValue.
