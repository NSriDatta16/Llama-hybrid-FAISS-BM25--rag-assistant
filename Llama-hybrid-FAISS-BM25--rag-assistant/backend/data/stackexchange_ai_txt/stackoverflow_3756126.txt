[site]: stackoverflow
[post_id]: 3756126
[parent_id]: 2066541
[tags]: 
Here is a simple comparison of bubble and gnome sort of an array of random values, values in reverse order, 3 concatenated arrays of ordered values and ordered values. Gnome sort on average seems to be a bit cheaper on the comparison side of things. Note that the comparisons/swaps when sorting random values is always a bit different, but close to these results. N = 100, attempts = 1000 random: bubble sort: comparisons = 8791794, swaps = 2474088 gnome sort: comparisons = 5042930, swaps = 2474088 reversed: bubble sort: comparisons = 9900000, swaps = 4950000 gnome sort: comparisons = 9900000, swaps = 4950000 3 ordered sets: bubble sort: comparisons = 6435000, swaps = 1584000 gnome sort: comparisons = 3267000, swaps = 1584000 ordered: bubble sort: comparisons = 99000, swaps = 0 gnome sort: comparisons = 99000, swaps = 0 ... And here is the code used to get these results: #include #include #include const int N = 100; int x[N]; int main() { srand((unsigned int)time(0)); int comparisons = 0; int swaps = 0; int attempts = 1000; while (--attempts >= 0) { // random: for (int i = 0; i x[i + 1]) { ++swaps; int t = x[i]; x[i] = x[i + 1]; x[i + 1] = t; swapped = true; } } } while (swapped); }*/ // gnome sort: { int i = 1; while (i = x[i - 1]) ++i; else { ++swaps; int t = x[i]; x[i] = x[i - 1]; x[i - 1] = t; if (i > 1) --i; } } } } printf("comparisons = %d\n", comparisons); printf("swaps = %d\n", swaps); } Obviously this is not a full test by far, but it gives an idea.
