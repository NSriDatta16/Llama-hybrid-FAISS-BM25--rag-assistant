[site]: crossvalidated
[post_id]: 285759
[parent_id]: 
[tags]: 
multi-factor time-varying CAPM using kalman filter

I am trying to implement a time-varying CAPM model using the kalman filter. I have already found numerous examples in R and python using the DLM and the pykalman packages but the problem is that they include a single independent variable while I am aiming for multiple factors. I gave it a shot modifying these examples so as to include another factor (or independent variable) but the betas of the factors don't necessarily sum up to one (which is a constraint when decomposing returns) Is there any way to impose this constraint during the kalman filter calculation using DLM or pykalman? Or, in general, is there any way to impose this constraint in the kalman filter algorithm? EDIT: - response to Mr F. Tusell: Thanks a lot for sharing your paper and the corresponding code, just a couple of questions: As far as I understand from the code, the application of the paper is still univariable, correct?...meaning, the 'market' variable in the code is one-dimensional. If I would like to analyze one variate (let's say 'Telecom' industry) and use all the three factors from the Fama French would a similar approach work? In case I am OK with negative betas, should I just set the 'lower' in the optimization process to '-100'? Could you please give more regarding the use of the control variable during the optimization? Could you also share the reasoning behind initializing the 'ini' vector with the values '0.05' and '8'? EDIT2: - response to Mr F. Tusell No2: Thanks again for the help. Regarding the rationale of having the betas of a univariate analysis with multiple factors: Imagine a mutual fund for which we have the returns and we are trying to drill into these so as to get a better understanding. So let's say we know that they are investing in three indices and we want to decompose the return in these... in this case, the 'betas' (which are not really betas anymore) will tell us that they are +50% in index1, +80% in index2 and -30% in index3. I tried to incorporate in your code the multifactor approach, but I am getting the following issues: i. The 'betas' don't sum up to 1. I tried multiple approaches with upper/lower limits, initial values etc and in all of them the average of the sum is close to zero with a volatility of around 5-10. ii. The betas have unrealistic values... around 1k - pending on the volatility I enter on the 'C0' array. I am copying the code below (skipped the data reading part which is exactly the same as in your code) - any comment welcome RWs
