[site]: stackoverflow
[post_id]: 1074803
[parent_id]: 1074739
[tags]: 
You can't do it in the general case - always make strings smaller would require impossible compression. However, I can see two options: Firstly, just store the key in a map: shared state: map contract(id) { key = generateNewUniqueShortString(); map.put(key, id); return key; } expand(key) { return map.remove(key); } This requires some shared storage but might work fine. If you know something about your strings (like for example you only ever use A-Za-z0-9_ then you could use a lookup table to reduce the size. This would mean each character only needs 6 bits, whereas in Java you have 16 bits per character. Using some sort of Huffman encoding based on frequency would work even better, but wouldn't be guaranteed.
