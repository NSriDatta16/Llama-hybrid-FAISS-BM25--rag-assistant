[site]: stackoverflow
[post_id]: 4299398
[parent_id]: 2886783
[tags]: 
Is FP still applicable here? You can certainly write this in a functional style with decent asymptotic algorithmic efficiency but you are not likely to get with 10Ã— the performance of a decent imperative solution because purely functional programming makes it difficult to use CPU caches effectively. I mean in fp we can't modify variables and only able to return new variables not changing previous values. Does this mean I have to recreate whole network on every weight update? No, for two reasons: Purely functional data structures can be updated efficiently because they decompose large structures (e.g. a hash table) into many small recursively-defined structures (e.g. a balanced binary tree). When you update a single node within an immutable tree, you copy data from every node in the path from the root to the destination but refer back to all other branches by reference safe in the knowledge that they cannot be changed under you because they are immutable. So you only do O( log n ) work instead of O( n ) work. Purely functional data structures usually offer functions like map that allow every element to be updated in the same way and avoid rebalancing by copying the structure of the source tree. So the time for n updates is O( n ) instead of O( n log n ). So you should be able to achieve similar or even equal asymptotic time complexity but, in absolute terms, you will be using several times as much space and time as an imperative solution. I described these basics in detail in my book Visual F# 2010 for Technical Computing and I wrote the article Artificial Intelligence: Neural Networks (8th May 2010) for the OCaml Journal .
