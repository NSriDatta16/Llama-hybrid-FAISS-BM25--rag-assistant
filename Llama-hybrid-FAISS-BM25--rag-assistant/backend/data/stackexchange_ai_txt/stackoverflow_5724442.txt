[site]: stackoverflow
[post_id]: 5724442
[parent_id]: 5724371
[tags]: 
A slightly more elegant approach is this: from __future__ import with_statement from collections import defaultdict print "Enter the file path:" thefile = raw_input() with open(thefile, "r") as f: chars = defaultdict(int) for line in f: for c in line: chars[c] += 1 print dict(chars) This uses a defaultdict to simplify the counting process, uses two loops to make sure we read each character separately without needing to read the entire file into memory, and uses a with block to ensure that the file is closed properly. Edit : To compute a histogram of the letters, you can use this version: from __future__ import with_statement from string import ascii_letters print "Enter the file path:" thefile = raw_input() chars = dict(zip(ascii_letters, [0] * len(ascii_letters))) with open(thefile, "r") as f: for line in f: for c in line: if c in ascii_letters: chars[c] += 1 for c in ascii_letters: print "%s: %d" % (c, chars[c]) This uses the handy string.ascii_letters constant, and shows a neat way to build the empty dictionary using zip() as well.
