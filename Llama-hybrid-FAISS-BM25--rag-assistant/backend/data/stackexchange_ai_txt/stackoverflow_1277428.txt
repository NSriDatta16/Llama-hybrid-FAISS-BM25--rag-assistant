[site]: stackoverflow
[post_id]: 1277428
[parent_id]: 1274206
[tags]: 
You are not going to find any way to save a Throwable stack trace on a Nokia Series40 handset. The usual brute force way of debugging JavaME application on Series40 is to modify your code to create a stack trace yourself in memory. What I'm talking about is: Each Thread that you can identify (including system callback threads) needs its own Stack object, containing strings. Obviously, this increases the memory footprint of your application somewhat but keeping it in memory should limit the impact on race conditions. When your code enters a method, it adds the method signature to the current Thread Stack. When the method exits (and you better only have one exit point per method) it pops the top of the Stack. You can add aditional debug info on the stack, like values of variables in different places of the code. You don't necessarily need to add this to every single method in your code. You can add try{}catch(Throwable){} to the entry point of every thread you identified and either dump the stack in a file or on the screen (in a Form). Obviously, this is not the kind of change you want to manually add in a lot of places in a large existing codebase. You can however make it part of your organisation coding standards for the future and write a source code parsing script to automatically add it to existing code.
