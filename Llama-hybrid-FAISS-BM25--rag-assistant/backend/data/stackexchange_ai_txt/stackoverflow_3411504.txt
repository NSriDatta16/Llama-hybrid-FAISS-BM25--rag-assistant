[site]: stackoverflow
[post_id]: 3411504
[parent_id]: 3388379
[tags]: 
The key is 'protected' The app is not financial nor highly critical, The app is 'high-volume'. Creating a wide-number number of hash permutations is both prohibitively high-storage (16bytes x several permutations) and time-consuming probably overkill Random digits is a scheme I am considering to avoid key-loggers. It is not possible to attempt more than a limited number of retries. Other elements help secure and authenticate access. You seem to be arguing for storing the PIN in the clear. I say go for it. You're basically describing a challenge-response authentication method, and cleartext storage on the server side is common for that use-case. Something similar to this is a one-time-pad, or a secret key matrix. The difference is that the user has to keep / have the pad with them to access. The benefit is that as long as you get the key distribution sufficiently secure, you're very safe from keyloggers. If you want to make it so that exposure of the matrix / pad doesn't cause compromise alone, have the user use a short (3-4 number) PIN with the pad, and keep your sensitive locking mechanism. Example of a matrix: 1 2 3 4 5 6 7 8 A ; k j l k a s g B f q 3 n 0 8 u 0 C 1 2 8 e g u 8 - A challenge might be: "Enter your PIN, and then the character from square B3 from your matrix." The response might be: 98763
