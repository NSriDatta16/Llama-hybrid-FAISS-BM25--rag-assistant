[site]: stackoverflow
[post_id]: 3254750
[parent_id]: 3254713
[tags]: 
There is no "sha" algorithm. The sha1 algorithm is much stronger than md5, since md5 is completely broken. I believe there is an algorithm that takes microseconds to generate a collision. Sha1 has been considerably weakened by cryptanalysts, and the search is on for the next big thing, but it is still currently suitable for all but the most paranoid. With regard to their use in passwords, the purpose is to prevent discovery of the original password. So it doesn't really matter much that md5 collisions are trivial to generate, since a collision simply yields an alternate password that has the same md5 hash as the original password, it doesn't reveal the original password. Important note: Your version is missing an important component: the salt. This is a random string that is concatenated to the original password in order to generate the hash, and then concatenated to the hash itself for storage. The purpose is to ensure that users with the same password don't end up with the same stored hash. import random print('Username: ' + os.environ['USER']) passwd = getpass('Password: ') salt = ''.join(random.choice('BCDFGHJKLMNPQRSTVWXYZ') for range(4)) h = hashlib.md5() h.update(salt) h.update(passwd.encode()) passwd_encrypt = salt + h.hexdigest() You then verify the password by reusing the stored salt: passwd = getpass('Password: ') salt = passwd_encrypt[:4] h = hashlib.md5() h.update(salt) h.update(passwd.encode()) if passwd_encrypt != salt + h.hexdigest(): raise LoginFailed()
