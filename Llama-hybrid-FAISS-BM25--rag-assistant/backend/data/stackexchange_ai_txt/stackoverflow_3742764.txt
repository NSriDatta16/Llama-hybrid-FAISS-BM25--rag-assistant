[site]: stackoverflow
[post_id]: 3742764
[parent_id]: 3742449
[tags]: 
To return the first 10 results, surround your code above with parentheses and put a .Take(10) on the end var foo = ( from x in Titles... ).Take(10); There is no way to do take using query syntax in C# currently. As for the genre filter, as klabranche points out, oData does not support many of the same Linq constructs you can use locally with a regular IEnumerable or IQueryable. klabranche's solution doesn't support contains. It does however make 2 round trips to the server to get results. (see my comment on his answer as to why this seems necessary) Here is an alternative which makes one roundtrip to the server to get data, then it processes that data locally. Because some of the query runs locally, you can use string.Contains, "or" clauses, and other goodness. The downside of this approach is it retrieves more data over the wire than is needed to answer the query. On the other hand, it's easy to understand and it works. When I combine "Family" and "Children", it returns 21 results. var oDataQuery = from x in Titles where x.AverageRating >= 4 && x.Instant.Available==true orderby x.AverageRating descending select new {x.Name, x.Rating, x.AverageRating, x.ShortSynopsis, x.Genres}; var localQuery = from o in oDataQuery.ToList() where o.Genres.Any(g => g.Name.Contains("Family")) && o.Genres.Any(g => g.Name.Contains("Children")) select new {o.Name, o.Rating, o.AverageRating, o.ShortSynopsis }; localQuery.Dump();
