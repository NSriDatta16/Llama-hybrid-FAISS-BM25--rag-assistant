[site]: stackoverflow
[post_id]: 1611651
[parent_id]: 1611628
[tags]: 
He's contrasting it to mark-compact : Generational garbage collectors is the best answer I've got for that, because it reduces the pauses, and frankly, the garbage collectors for all the [new] dynamic languages today are crap. They're mark-and-sweep, or they're reference counted. Plain mark & sweep GCs aren't so good because they have a problem of heap fragmentation. With high allocation levels common of GC-enabled languages, this usually becomes an issue faster than it does in e.g. C++, where a lot of objects just live on the stack. That said, mark-compact is really mark & sweep with compacting tackled on it, so the terminology could be better. Non-compacting collectors are normally called "conservative" to distinguish them.
