[site]: stackoverflow
[post_id]: 2278439
[parent_id]: 2278360
[tags]: 
There are some people who will tell you to go with a roles based permission structure but I prefer binary permissions myself. Way back in the day I would use an int field which would give me 32 distinct flags that I could set. The permissions table would contain the name and value of each flag and a permits table would hold all the permissions applicable to each user. I also implemented a groups structure and split the permissions fields into allow and deny which gave me a great deal of flexibility. Essentially the permissions would be calculated like so: AllowMask = userPermit.AllowPermissions; DenyMask = userPermit.DenyPermissions; foreach(groupPermit in groups.UserMemberOf(UserID)) { AllowMask = AllowMask | groupPermit.AllowPermissions; DenyMask = DenyMask | groupPermit.DenyPermissions; } Permissions = AllowMask & ~DenyMask From there it was a simple matter of getting the flag value and checking Permissions & FlagValue > 0; As you've noted in your question however it's possible that 32 flags aren't enough. I ran into the same issue and began working with varchar fields which held base64 encoded numbers. Since base64 characters hold 6 bits I would simply make sure that the character lengths were some multiple of four since 4x6 = 24 / 8 = 3. This gave me enough space to convert 4 char chunks into ints and run the above function on them. If a flag was greater than 2^24 I'd just shear off 4 characters and work with a smaller number. Hope that makes sense. It's kind of a confusing system to put in place but once it's running it makes permissions handling a dream.
