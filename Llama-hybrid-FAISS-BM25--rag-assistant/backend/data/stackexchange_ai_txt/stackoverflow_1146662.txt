[site]: stackoverflow
[post_id]: 1146662
[parent_id]: 1114229
[tags]: 
First you should start by defining some security properties you want to provide, for example: Is it ok to give different users access to the same secret key? Aka if File1 is AES encrypted with key K, is it a problem if user Alice and user Bob both are given K. How do I revoke users from the system? (It turns out Bob from scenario 1 is actually a Chinese spy working for our company, how do I securely kick him out of the system). Does the encrypted data that is saved in the database need to be searched? (This problem is well researched and hard to solve!) How much (if any) and what plaintext data will be placed into the database to help organize it? Databases expect data to have unique keys associated with them. You need to make sure these keys don't leak information, but are useful enough to retrieve the data later. How often should secret keys be changed? If you are storing files and multiple users are allowed access to encrypted files, what happens when user X modifies a file? Does the secret key change? Should the new key be sent to all users? What happens when 2 users modify the same data at the same time? Will the database be able to handle this without modification? There are many others. If the server is not trusted and must never see plaintext data, then here's a general overview of a possible solution. Let the clients managed the crypto completely. Clients authenticate with the server and are allowed to store data into the database. It is the responsibility of the client to make sure the data is encrypted. In this scenario, keys should be saved securely only on the clients computer. If they must be placed elsewhere, a "master key" could be created.
