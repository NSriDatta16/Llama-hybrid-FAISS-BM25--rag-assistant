[site]: crossvalidated
[post_id]: 387793
[parent_id]: 
[tags]: 
Using PCA in domain adaptation

In literature, I see people using (Kernelized) Principle Component Analysis, not for feature extraction, but for domain adaptation. In other words, I have data from a source domain and I would like to match different, but similar data from a target domain to this source data, before applying my model(obtained with source data) on it. I'm not sure how PCA is applied in this context. My guess would be as follows: Transform source and target data with PCA $y_{source} = V_{source}^TX_{source}$ and $y_{target} = V_{target}^TX_{target}$ where $X$ is the input feature vectors/data, $y$ the PCA transformed feature vectors and $V$ the transformation matrix with eigenvectors as columns. Use the transformation of the source, $V_{source}$ , obtained through PCA.fit(X) in sci-kit learn, to inverse transform the Principle Components of the target data back to the original feature space $X_{target,transformed} = V_{source}^{-T}y_{target}$ Would this be a way to use PCA in a domain adaptation/transfer learning setting?
