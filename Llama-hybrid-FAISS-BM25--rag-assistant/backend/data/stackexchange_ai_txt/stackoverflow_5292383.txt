[site]: stackoverflow
[post_id]: 5292383
[parent_id]: 5291436
[tags]: 
Using agents for background recurring tasks seems neater to me (def my-ref (ref 0)) (def my-agent (agent nil)) (defn my-background-task [x] (do (send-off *agent* my-background-task) (println (str "Before " @my-ref)) (dosync (alter my-ref inc)) (println "After " @my-ref) (Thread/sleep 1000))) Now all you have to do is to initiate the loop (send-off my-agent my-background-task) The my-backgound-task function is sending itself to the calling agent after its invocation is done. This is the way how Rich Hickey performs recurring tasks in the ant colony example application: Clojure Concurrency
