[site]: stackoverflow
[post_id]: 2662668
[parent_id]: 2624769
[tags]: 
You have three requirements that need to be balanced: users must be able to return to their survey at any time answers entered by users must be saved with the least possible chance of data loss need to minimize database hits Any solution that involves caching answers in a volatile place (cookies, session, etc) will increase the risk of data loss. The final solution depends on how you rank the three requirements in importance. If the db issue is at the top, then you will either need to risk data loss, or spend a lot of extra time coding a solution using some temporary storage scheme (like Kevin's flat file idea). A couple of folks suggested that you may be optimizing prematurely. I suggest you consider that idea first - maybe this whole thing is moot. However, assuming that your db situation is a real problem, I think your best balance of requirements will be a system that saves answer to the db immediately (to prevent data loss) but carefully manages when you actually have to hit the db. When the app starts up (or when the first user requests the survey) load the survey and its questions into application cache. If any of the questions have a pick list of possible answers, load these also. You will only have to hit the db once during the application lifetime (or your cache duration) to load survey data. When a user starts their survey, run a single query to load any existing answers (in case they are a returning user) into an object in session - could be as simple as a string . (If you can somehow identify a new user without having to hit the db, then you can skip this step for new users.) Use the session answer object along with the survey question object in app cache to populate each page without hitting the db again. When the user submits an answer, compare it to the session answer object to see if it has changed (she may be just clicking 'next' on a page with a previously entered answer). If the answer is new, or has changed, the save it to the db and to the session answer object. When the user leaves the survey, you don't need to do anything - everything is saved already. With this scheme, you hit the db once to load the survey, once for each user when they start (or restart) the survey, and once for each new or modified answer. Probably not as much of a reduction as you were hoping for, but it gives you the best data protection.
