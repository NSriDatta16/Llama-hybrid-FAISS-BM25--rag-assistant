[site]: crossvalidated
[post_id]: 583514
[parent_id]: 583097
[tags]: 
I don't think it's a recommendation problem, but a regression one. Could you elaborate on why you think it's a recommendation problem? In recommendation problems you usually fit a ranking of results to a query, like search engines, Netflix and Amazon recommendations, etc. the question usually asked in recommendation is: "for a query with the following features, rank the most relevant results". The question you are asking here (as I understand it) is: "given the player and team features, what is the value of minutes played?" This is a regression problem of the form: $minutes = f(features_{player}, features_{team})$ The curve fitting approach is therefore the correct one IMHO. So this is how I would approach the problem: We assume there's a surface, as you did, that a player's career follows. This is expected to be something of the following form: at constant ELO, a player at age 18 should have $X$ minutes played, then it should increase as his skill improves with age, speak at some age, and then decrease as the player approaches retirement. at constant age, minutes played should decrease with ELO. each player has some parameter that sets their skill level apart from other players, i.e. a bias term. players that have the same history should share the same curve and get the same predictions. So one approach you can do is regression of the following form: $minutes(age,ELO,player) = a_1*age + a_2*ELO + a3*age*ELO + a4*age^2 + a5*ELO^2 + b_{player}$ Here you represent the surface as a full second-degree polynomial and a learned bias term for every user. You can of course add more interaction terms. for example: $minutes(age,ELO,player) = a_1*age + a_2*ELO + a3*age*ELO + a4*age^2 + a5*ELO^2 + b_{player} + b_1*player*age + b_2*player*ELO$ If you're very set on using factorization machines you can do the regression with them using the same model while replacing the interaction terms with embedding for the ELO, age, and player (see rendle ). This model though has a problem with cold start, as for every new player not in the training set, you need to fit their player parameters before being able to predict. An alternative model would be to embed the user history and then run regression on the embeddings. This could be done with an autoencoder that has an input of the user history and output that predicts all the player values (a matrix of minutes played for every ELO and age). This can also be solved with different approaches, but still as a regression problem. Personally, I would go for the first approach as it's simpler and I believe would give good results, and then I could tinker with neural networks to solve it for fun.
