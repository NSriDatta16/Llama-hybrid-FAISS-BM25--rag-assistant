[site]: stackoverflow
[post_id]: 4993382
[parent_id]: 4987694
[tags]: 
Arrays in Ada can be declared with any bounds the coder desires, even by a call to a routine (perhaps reading the proper size out from the user at runtime). The bounds can be retrived by the coder using attributes like 'first , 'last , and 'length . By convention arrays in Ada generally do not use terminator sentinal values. What this all adds up to is that usually every element in an Ada array is assumed to contain a valid value. If there are some reasons why that may not always be true, then it is the coder's responsibility to come up with a scheme to keep track of which elements have good values in them. In the case of the code you presented, it looks like every element in that array is assumed to have valid values of soldier_type , which apparently is a record type that has a boolean field named Alive . Other than the fact that he uses it to terminate his loop, there isn't much I can tell you about it. Well, I suppose I can tell you that if no records in that entire array have the Alive flag set, then you've got an infinite loop. That probably isn't what you'd want to happen. Also, if it was me, I'd make the array go from 1..max_number_of_soldiers, just because it reads better. Either there's much more code dealing with that array that looks better when its 0-based, or someone is a C coder and is having trouble letting go of old habits. For documentation, I'd suggest looking at the sites listed in the Ada tag's wiki . If you have a particular interest in language-defined functions and whatnot, then you should know that entire language reference manual is available online (unlike for many other languages I could name). I'd highly suggest looking over annexes A (Predefined Language Environment), K (Language-Defined Attributes), and L (Language-Defined Pragmas). K in particular should be read thouroughly.
