[site]: stackoverflow
[post_id]: 907558
[parent_id]: 906077
[tags]: 
There are a number of ways you could do this without loops. Most solutions involve expanding the vectors x and y into larger matrices of indices and would likely use one or more of the functions REPMAT , BSXFUN , or SUB2IND . A good tutorial for matrix indexing can be found here . However, since you asked for an elegant solution, here's one that's somewhat unusual. It uses anonymous functions as well as the functions ARRAYFUN and CAT : indexFcn = @(r,c) cam1(r:(r+99),c:(c+99)); result = arrayfun(indexFcn,x,y,'UniformOutput',false); result = cat(3,result{:}); EXPLANATION: The first line creates an anonymous function . This is a simple one line function that can be created on-the-fly without having to put it in an m-file. The function defines two inputs r and c which are used to extract a 100-by-100 submatrix from cam1 . The variable indexFcn stores a function handle which is used to call the function. Note that the values of cam1 used by the anonymous function are static . Even if the values in the variable cam1 change, the anonymous function still uses the values that were in cam1 when the function was created. The second line makes a call to ARRAYFUN, which applies a function to every element of an array. ARRAYFUN loops over each entry in x and y , passing the values to indexFcn . The output is stored in result , a 15-element cell array where each cell contains a 100-by-100 matrix. The third line uses the CAT function to concatenate the 100-by-100 matrices into a 100-by-100-by-15 matrix.
