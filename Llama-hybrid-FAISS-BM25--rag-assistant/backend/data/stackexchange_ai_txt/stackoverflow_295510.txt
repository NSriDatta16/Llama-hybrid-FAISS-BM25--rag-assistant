[site]: stackoverflow
[post_id]: 295510
[parent_id]: 294852
[tags]: 
Short answer: The fundamental reading list for a lisp interpreter is SICP. I would not at all call it overkill, if you feel you are overqualified for the first parts of the book jump to chapter 4 and start interpreting away (although I feel this would be a loss since chapters 1-3 really are that good!). Add LISP in Small Pieces (LISP from now on), chapters 1-3. Especially chapter 3 if you need to implement any non-trivial control forms. See this post by Jens Axel SÃ¸gaard on a minimal self-hosting Scheme: http://www.scheme.dk/blog/2006/12/self-evaluating-evaluator.html . A slightly longer answer: It is hard to give advice without knowing what you require from your interpreter. does it really really need to be an interpreter, or do you actually need to be able to execute lisp code? does it need to be fast? does it need standards compliance? Common Lisp? R5RS? R6RS? Any SFRIs you need? If you need anything more fancy than a simple syntax tree walker I would strongly recommend embedding a fast scheme subsystem. Gambit scheme comes to mind: http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Main_Page . If that is not an option chapter 5 in SICP and chapters 5-- in LISP target compilation for faster execution. For faster interpretation I would take a look at the most recent JavaScript interpreters/compilers. There seem to be a lot of thought going into fast JavaScript execution, and you can probably learn from them. V8 cites two important papers: http://code.google.com/apis/v8/design.html and squirrelfish cites a couple: http://webkit.org/blog/189/announcing-squirrelfish/ . There is also the canonical scheme papers: http://library.readscheme.org/page1.html for the RABBIT compiler. If I engage in a bit of premature speculation, memory management might be the tough nut to crack. Nils M Holm has published a book "Scheme 9 from empty space" http://www.t3x.org/s9fes/ which includes a simple stop-the-world mark and sweep garbage collector. Source included. John Rose (of newer JVM fame) has written a paper on integrating Scheme to C: http://library.readscheme.org/servlets/cite.ss?pattern=AcmDL-Ros-92 .
