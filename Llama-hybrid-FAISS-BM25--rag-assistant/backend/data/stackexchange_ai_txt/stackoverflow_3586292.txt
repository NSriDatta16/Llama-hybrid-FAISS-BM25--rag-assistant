[site]: stackoverflow
[post_id]: 3586292
[parent_id]: 
[tags]: 
Strange problem with the vector when calculating values to a member

This is an updated follow-up from my last question: Fatal error from incrementing loop I've finished the sorting algorithm, which seems to work fine. Now my problem is trying to calculate the health for each fighter(in the getHealth() function) based on levels in my vector to calculate correctly. Fighter.h #ifndef FIGHTER_H #define FIGHTER_H #include #include #include #include #include #include class Fighter { protected: std::vector x; std::string name; int health, level; //int damage; public: int getHealth(int); void getEnemies(/*std::vector &*/); void printFighter(/*std::vector &*/); void sortFighters(/*std::vector &*/); //friend std::istream & operator >> (std::istream & strm, Fighter & x); //friend std::ostream & operator Fighter.cpp This is where the getHealth() function resides: //dynamically locate an array that holds the number of fighters, and for each fighter in the array, assign from the .txt //file the name and level from the fighter. #include "Fighter.h" #pragma region getEnemies void Fighter::getEnemies(/*std::vector &baddie*/) { Fighter y; std::ifstream inputFile; inputFile.open("EnemyFighters.txt"); if(!inputFile) { std::cout > line; if (line == " ") { do { inputFile >> line; y.name = line; inputFile >> line; y.level = atoi(line.c_str()); inputFile >> line; y.health = getHealth(y.level); x.push_back(y); inputFile >> line; }while(line != " "); } } inputFile.close(); } } #pragma endregion #pragma region getHealth int Fighter::getHealth(int lv) //The main problem { if(lv >= 6) { //std::cout health = lv * 2; std::cout health 1) { for (int i=1; i health += 2;} std::cout health &baddie*/) { //std::cout &x*/) { Fighter * temp = new Fighter; bool swap; do { swap = false; //std::cout x[i+1].level)//I get a fatal error here when it tries to compare //the iterator with 1 that's outside its range { //assign the stats from the first to temp temp->name = x[i].name; temp->health = x[i].health; temp->level = x[i].level; //assign the stats from the next to the first x[i].name = x[i+1].name; x[i].health = x[i+1].health; x[i].level = x[i+1].level; //assign the ones in temp(the first) to the next x[i+1].name = temp->name; x[i+1].health = temp->health; x[i+1].level = temp->level; std::cout = x[i+1].level) { temp->name = x[i].name; temp->health = x[i].health; temp->level = x[i].level; x[i].name = x[i+1].name; x[i].health = x[i+1].health; x[i].level = x[i+1].level; x[i+1].name = temp->name; x[i+1].health = temp->health; x[i+1].level = temp->level; std::cout name = x[i].name; // temp->health = x[i].health; // temp->level = x[i].level; // x[i].name = x[i+1].name; // x[i].health = x[i+1].health; // x[i].level = x[i+1].level; // x[i+1].name = temp->name; // x[i+1].health = temp->health; // x[i+1].level = temp->level;*/ // std::cout name = x[i].name; // temp->health = x[i].health; // temp->level = x[i].level; // x[i].name = x[i+1].name; // x[i].health = x[i+1].health; // x[i].level = x[i+1].level; // x[i+1].name = temp->name; // x[i+1].health = temp->health; // x[i+1].level = temp->level;*/ // std::cout >(std::istream & strm, Fighter x) //{ // //x.name += strm.c_str(); // //x.level += atoi(strm.c_str()); // strm >> x.name; // strm >> x.level; // return strm; //} //std::ostream & operator () //{ //} // //void operator =() //{ //} // // // int Player::getHealth(int lv) { if(lv >= 6) { std::cout health = lv * 2; } /*else if (lv > 1) for (int i = 1; i health += 2;}*/ return health; } void Player::printFighter() { //std::cout level health experience = (level * 10)) { std::cout Fighter.txt Tito 5 Cthulu 99 Gererweq 2 dnbq 3 hrbsrx 4 Flamer 4 fdhjje 1 hrbsrx 6 main.cpp #include "Fighter.h" int main() { unsigned seed = time(0); srand(seed); /*std::vector baddie;*/ Fighter * enemy = new Fighter; Player * me = new Player; enemy->getEnemies(/*baddie*/); enemy->sortFighters(/*baddie*/); enemy->printFighter(/*baddie*/); me->printFighter(); delete enemy; delete me; return 0; }
