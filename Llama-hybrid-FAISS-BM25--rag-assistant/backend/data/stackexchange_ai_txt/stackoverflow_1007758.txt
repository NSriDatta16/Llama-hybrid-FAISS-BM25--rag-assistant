[site]: stackoverflow
[post_id]: 1007758
[parent_id]: 1007458
[tags]: 
To prepare your code to be testable: Document your assumptions and exclusions. Avoid large complex classes that do more than one thing - keep the single responsibility principle in mind. When possible, use interfaces to decouple interactions and allow mock objects to be injected. When possible, make pubic method virtual to allow mock objects to emulate them. When possible, use composition rather than inheritance in your designs - this also encourages (and supports) encapsulation of behaviors into interfaces. When possible, use dependency injection libraries (or DI practices) to provide instances with their external dependencies. To get the most out of your unit tests, consider the following: Educate yourself and your development team about the capabilities of the unit testing framework, mocking libraries, and testing tools you intend to use. Understanding what they can and cannot do will be essential when you actually begin writing your tests. Plan out your tests before you begin writing them. Identify the edge cases, constraints, preconditions, postconditions, and exclusions that you want to include in your tests. Fix broken tests as near to when you discover them as possible. Tests help you uncover defects and potential problems in your code. If your tests are broken, you open the door to having to fix more things later. If you follow a code review process in your team, code review your unit tests as well. Unit tests are as much a part of your system as any other code - reviews help to identify weaknesses in the tests just as they would for system code.
