[site]: stackoverflow
[post_id]: 3337275
[parent_id]: 3336508
[tags]: 
The first part here is not answering the question you are asking but my be helpful if haven't considered it before. Have you looked at not doing your reverse geocoding using your server (i.e. through Geokit) but instead having this done by the client? In other words some Javascript loaded into the user's browser making Google geocoder API calls on behalf of your service. If your application could support this approach than this has a number of advantages: You get around the quota problem because your distributed users each have their own daily quota and don't consume yours You don't expend server resources of your own doing this If you still would like to log your geocoder queries and you are concerned about the performance impact to your primary application database then you might consider one of the following options: Just create a separate database (or databases) for logging (which write intensive) and do it synchronously. Could be relational but perhaps MongoDB or Redis might work either Log to the file system (with a custom logger) and then cron these in batches into structured, queriable storage later. The storage could be external such as on Amazon's S3 if that works better. Just write a record into SimpleGeo each time you do a Geocode and add custom meta-data to those records to tie them back to your own model(s)
