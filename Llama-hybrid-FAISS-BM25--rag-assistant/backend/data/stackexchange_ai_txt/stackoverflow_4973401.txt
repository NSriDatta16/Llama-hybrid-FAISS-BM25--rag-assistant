[site]: stackoverflow
[post_id]: 4973401
[parent_id]: 
[tags]: 
How to best synchronize game engine and network server in Haskell?

I am designing a little soccer game where the game engine (that computes player moves etc.) runs on a server, and rendering and keyboard/mouse handling is done by the client. For the server (Haskell) I want to use Happstack for client-server communication Yampa / Reactimate for the game engine Every 20ms or so, the client should send keyboard and mouse events to the server via HTTP GET, receive the current game status (JSON-encoded ball and player positions) and render it. I am thinking about using SDL infrastructure for the game loop, input handling and rendering. The server basically runs two threads: A happstack server receives the HTTP GET, puts the keyboard / mouse commands in a queue, reads the current game status from a second queue and answers the HTTP GET request. The second thread runs a Yampa game engine, as described in the Yampa Arcade paper : The game engine computes the new round as quickly as possible (no ticks) and puts the result in the render queue. General question: Does this look like a feasible architecture? Specific question: How would one design the server side rendering queue: Would one use a Chan for this? If the game engine is quicker on average than the "ticking" on the client side, the queue will get longer and longer. How could this be handled with Chan? Your comments are very welcome!
