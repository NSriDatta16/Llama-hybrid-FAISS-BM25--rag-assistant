[site]: stackoverflow
[post_id]: 1367717
[parent_id]: 1347302
[tags]: 
For such situations, I use projections instead. I've never mapped two types to the same table (unless for inheritance reasons). So, what I do in such a situation is: create the FunderSimple class, and import it so that it is known by NHibernate: Once you've done this, you can create a query on your 'Funder' type, with the ICriteria API, but, you could specify that you would like NHibernate to return instances of FunderSimple. By doing so, NHibernate is smart enough to generate a simplified SQL query, that only retrieves the columns that are necessary to populate instances of the FunderSimple class. This is done like this: ICriteria crit = session.CreateCriteria (typeof(Funder)); // add some expressions ... crit.Add ( ... ); // Now, set the projection, and specify that FunderSimple should be returned crit.SetProjection (Projections.ProjectionList() .Add (Projections.Property ("Id"), "Id") .Add (Projections.Property ("funder_name"), "funder_name") .Add (Projections.Property ("phone_number"), "phone_number")); crit.SetResultTransformer (Transformers.AliasToBean (typeof(FunderSimple))); crit.List ();
