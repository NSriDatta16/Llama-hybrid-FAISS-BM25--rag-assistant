[site]: stackoverflow
[post_id]: 2320593
[parent_id]: 2318498
[tags]: 
In my experience, large enterprises are concerned with RISK, PREDICTABILITY, and MEASURABLE RESULTS. You'll have an easier (though maybe not easy ) time introducing Agile if show how it aligns with those metrics better than existing practices. Make it possible to ship often, even if you don't do it yet: Leverage CI tools and automated build scripts to build and package your application. This way you're primed to capitalize on any opportunity to incrementally release new code that might come up. Measure your productivity now so that you have a baseline: The more you can measure the better. Average # of programmer hours per "feature". Average length of time between code checkin and the discovery of defects against that code. Average length of time between defect discovery and defect resolution in production. Average amount of time needed to identify, resolve, and deploy defect fixes. etc. Project the changes in these metrics under an Agile process : For instance, in most cases the sooner we find a bug the easier/cheaper it is to fix, so benefits from TDD and rapid releases to QA should be easy to quantify. Start small : You may have a waterfall schedule handed to you, but you can still break that down into iterations, so do so. Get your engineering practices in place, then start trying to adjust process. See if you can try Agile on a small auxiliary project as a proof of concept. Find a sponsor : Try and convince someone higher in the pecking order than yourself of the merits of Agile. Engage their help in framing the "Agile vs. Waterfall" arguments in terms familiar to the decision makers. Be patient ... it may take time to see results. ... or don't. If you're deeply interested in Agile and are getting zero support, find a new job. Yes it's rewarding to effect change from the belly of the beast, but it's also rewarding to work with people that share your ideas about building software.
