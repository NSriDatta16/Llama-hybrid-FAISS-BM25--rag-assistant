[site]: stackoverflow
[post_id]: 4560945
[parent_id]: 4560709
[tags]: 
I've seen this question a few times, and the result always seems to be that css doesn't (yet) support distribution of elements across a dynamic width. There are hacks out there, but honestly I believe the quickest way around this would be to use javascript for the positioning. something like this (written in the prototype library) should do what you want: $(document).observe('dom:loaded',function(){ spaceSquares(); }); window.onresize = function(){spaceSquares();} function spaceSquares(){ // this is the minimum margin per square. var minMargin = 20; // this tells you how many squares will fit on the top row var topRowSquares = Math.floor(document.viewport.getWidth() / ($$('.test')[0].getWidth()+minMargin)); // this will tell you how much space is left over var remainderWidth = document.viewport.getWidth() - (($$('.test')[0].getWidth()+minMargin)*topRowSquares); // this will tell you how much margin to put on each item var marginWidth = (remainderWidth / topRowSquares) + minMargin; // this will put the margin on the top row for(var i=0;i I'm sure there's more elegant ways to do it, but essentially I'm just calculating the remaining space and dividing it between the squares. I've wrapped the first call to the function in an observer so that it won't try to fire before the dom is loaded, and I'm calling it on the window.onresize event, so that if you resize the window, it will always keep the top row perfectly distributed. Hopefully that will get you headed in the right direction!
