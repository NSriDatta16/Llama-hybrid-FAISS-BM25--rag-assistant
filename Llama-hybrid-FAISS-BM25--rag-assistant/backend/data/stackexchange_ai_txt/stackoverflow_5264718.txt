[site]: stackoverflow
[post_id]: 5264718
[parent_id]: 
[tags]: 
JavaEE6: using @Asynchronous to speed up the web application. When?

I really want to abuse @Asynchronous to speed up my web application, therefore I want to understand this a bit more in order to avoid incorrectly using this annotation. So I know business logic inside this annotated method will be handled in a separated thread, so the user wont have to wait. So I have two method that persist data public void persist(Object object) { em.persist(object); } @Asynchronous public void asynPersist(Object object) { em.persist(object); } So I have couple scenario I want to ask which one of these scenario is not ok to do 1. B is not depend on A A a = new A(); asynPersist(a); //Is it risky to `asynPersist(a) here?` B b = new B(); persist(b); //Cant asynPersist(B) here because I need the `b` to immediately //reflect to the view, or should I `asynPersist(b)` as well? 2. Same as first scenario but B now depend on A. Should I `asynPersist(a)` 3. A and B are not related A a = new A(); persist(a); //Since I need `a` content to reflect on the view B b = new B(); asynPersist(b); //If I dont need content of b to immediately reflect on the view. Can I use asyn here? EDIT: hi @arjan, thank you so much for your post, here is another scenario I want to ask your expertise. Please let me know if my case does not make any sense to u. 4. Assume User has an attribute call `count` type `int` User user = null; public void incVote(){ user = userDAO.getUserById(userId); user.setCount(u.getCount() + 1); userDAO.merge(user); } public User getUser(){ //Accessor method of user return user; } If I understand you correctly, if my method getUserById use @Asynchronous , then the line u.setCount(u.getCount() + 1); will block until the result of u return, is it correct? So in this case, the use of @Asynchronous is useless, correct? If the method merge (which merge all changes of u back to database) use @Asynchronous , and if in my JSF page, I have something like this So the button will invoke method incVote() , then send and ajaxical request to tell the outputText to update itself. Will this create an race condition (remember we make merge asynchronous)? So when the button tell the outputText to update itself, it invoke the accessor method getUser() , will the line return user; block to wait for the asynchronous userDAO.merge(user) , or there might possible a race condition here (that count might not display the correct result) and therefore not recommend to do so?
