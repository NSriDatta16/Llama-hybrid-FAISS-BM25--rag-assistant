[site]: stackoverflow
[post_id]: 908157
[parent_id]: 907997
[tags]: 
I took the liberty to translate a piece of C# code I've written to calculate the Levenshtein distance into Java code. It uses only two single-dimension arrays that alternate instead of a big jagged array: public static int getDifference(String a, String b) { // Minimize the amount of storage needed: if (a.length() > b.length()) { // Swap: String x = a; a = b; b = x; } // Store only two rows of the matrix, instead of a big one int[] mat1 = new int[a.length() + 1]; int[] mat2 = new int[a.length() + 1]; int i; int j; for (i = 1; i It is not rigorously tested, but it seems to be working okay. It was based on a Python implementation I made for a university exercise. Hope this helps!
