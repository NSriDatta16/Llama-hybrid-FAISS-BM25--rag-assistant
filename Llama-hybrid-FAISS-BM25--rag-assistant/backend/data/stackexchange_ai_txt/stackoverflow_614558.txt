[site]: stackoverflow
[post_id]: 614558
[parent_id]: 613954
[tags]: 
Indeed, checked exceptions on the one hand increase robustness and correctness of your program (you're forced to make correct declarations of your interfaces -the exceptions a method throws are basically a special return type). On the other hand you face the problem that, since exceptions "bubble up", very often you need to change a whole lot of methods (all the callers, and the callers of the callers, and so on) when you change the exceptions one method throws. Checked exceptions in Java do not solve the latter problem; C# and VB.NET throw out the baby with the bathwater. A nice approach that takes the middle road is described in this OOPSLA 2005 paper (or the related technical report .) In short, it allows you to say: method g(x) throws like f(x) , which means that g throws all the exceptions f throws. Voila, checked exceptions without the cascading changes problem. Although it is an academic paper, I'd encourage you to read (parts of) it, as it does a good job of explaining what the benefits and downsides of checked exceptions are.
