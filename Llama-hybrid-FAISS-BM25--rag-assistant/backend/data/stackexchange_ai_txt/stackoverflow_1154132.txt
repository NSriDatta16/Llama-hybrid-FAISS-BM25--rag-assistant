[site]: stackoverflow
[post_id]: 1154132
[parent_id]: 1144703
[tags]: 
Perhaps the better question is if deadlines are meaningful in the face of inaccurate estimates? Businesses do a lousy job of estimating software --that is a fact. Both management and developers play a part in this and neither one seems willing to own-up to their responsibility in this problem. But to answer your specific questions: 1.What actions have you seen applied as 'penalty' for missed deadline, and which of these eventually resulted in more-good-code? The 'penalty' I've seen for missed deadlines for managers and developers range from nothing, to promotion, to simple transfer. The most severe penalties I've personally witnessed was a manager "transferred" to a less important project and for the business-unit to lose a financial bonus. The only time I have ever seen someone fired over a missed deadline was when the employee was already going to be fired--the deadline gave the business a legal reason to fire the employee. 2.What project-management responses caused the project to fail outright? This is a whole separate discussion on its own... but there is some inherent bias in this question-- project management is at fault . The three top things I have personally seen PM's do that sabotage a project are (in order of severity): Ignore data/recommendations/warnings from their technical staff. Ask for estimates early in the development process. This results in estimates with an error-bar of 10x (it'll take one month, give or take ten months). Reject/modify/demand software estimates so that they fit an arbitrary budget and schedule. This is not to say Developers should ignore business demands--but rather the business demands need to be set equally by Developers and non-Developers. 3.What responses restored working order and resulted in code that could be maintained afterward? I have yet to see a functional software development organization. So the fix is usually a lot of blood, sweat, and tears from a couple of heroic developers working with a highly-capable PM who knows how to defend against politics within the company (i.e. deflect BS from their staff). 4.What responses resulted in more-bad-code? Yelling. Cursing. Insults. (Sadly, this still happens in some workplaces) More "project management"--either by way of people, meetings, status reports. Getting software estimates earlier in the process so "we can plan better." Estimates need to come later when your staff has more data and a better understanding of the problem. Coddling the developers (it's not your fault, the manager screwed up). Coddling the project managers (it's not your fault, the developers screwed up). Adding additional, unqualified staff to the project.
