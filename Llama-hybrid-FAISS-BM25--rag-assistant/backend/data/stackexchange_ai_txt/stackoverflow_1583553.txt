[site]: stackoverflow
[post_id]: 1583553
[parent_id]: 
[tags]: 
How to properly do private key management

Has anyone got practical experience or a reference for a scheme that implements a key management scheme that would comply with the PCI DSS security standard? There are obviously quite a few implementations around given the number of companies compliant with PCI DSS but trying to find details of them is tough. When it gets down to storing private data the discussion normally stops at which encryption algorithm to use. After that there's normally a statement about appropriately storing the private key but no discussion about practical ways to do it or things like periodically changing the key or providing the key to applications etc. Specificlly I'm interested in thee requirements from sections 3.5 and 3.6 of the PCI DSS standard. 3.5.2 Store cryptographic keys securely in the fewest possible locations and forms. 3.6.a Verify the existence of key-management procedures for keys used for encryption of cardholder data. Note: Numerous industry standards for key management are available from various resources including NIST, which can be found at http://csrc.nist.gov . 3.6.4 Verify that key-management procedures are implemented to require periodic key changes at least annually. I've had a look at the NIST Cryptographic publications as the PCI DSS requirements document suggests but apart from recent notes of a Cryptographic Key Management Workshop there doesn't appear to be much there in the way of real implementable schemes or standards. As to what I'm trying to do it's not: Store passwords + salts as one way hashes for authentication, Choose a strong symmteric algorithm for data encryption, Avoid needing to store private data in the first place. Avoid the need for key management with other mechanisms: physical security, database security, dragons and wizards etc. All of which are valid concerns but in this case are not the answer. The nuts and bolts of my requirements are in a different SO question .Net Design pattern for storing and retrieving sensitive per user data but it all boils down to key management hence this more refined question.
