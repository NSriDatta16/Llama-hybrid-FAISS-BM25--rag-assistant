[site]: stackoverflow
[post_id]: 2036453
[parent_id]: 2036421
[tags]: 
That term refers to the call stack . You might learn more about the concepts in a low level programming or computer architecture/organization course, were you to take one. Whenever a function is called, the return address (where it's being called from), as well as parameters for the function, are pushed onto "the stack" (a stack in memory, but no, not a C# Stack data structure that you'd read about on MSDN). When a function terminates, the address is popped from the stack and control resumes where it was originally (at the popped address). The bunde of information pertaining to a function call (local variables, return address, parameters, etc) is called a "stack frame". So, when you use recursion (and it gets caught in an infinite recursive loop), you literally just fill the stack up with return addresses (and other data) until there is no space left. Edit - You mentioned the heap also. This is where data structures are stored (dynamic memory allocation, through the new keyword in most languages these days, or malloc in C). In C/C++, for instance, data on the heap is there until it is explicitly freed. This is to be contrasted with local/automatic variables which are stored on the stack (and are therefore destroyed when their scope terminates... they are popped off the stack out of existence).
