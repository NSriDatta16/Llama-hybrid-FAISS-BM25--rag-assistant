[site]: stackoverflow
[post_id]: 3702457
[parent_id]: 
[tags]: 
How to Implement Exchange like availability monitoring of internal SQL Server

We have an internal app( Thick Client ) that relies on our central SQL server. The app is a Desktop app that allows the users to work in "Offline" mode (e.g. Outlook). What I need to accomplish is a way to accurately tell if SQL is available or not. What I have so far: I currently use the following method --> internal static void CheckSQLAvailability() { using (TcpClient tcpc = new TcpClient()) { try { tcpc.Connect(Settings.Default.LiveSQLServer, Settings.Default.LiveSQLServerPort); IsSQLAvailable = true; } catch { IsSQLAvailable = false; } } } I am not crazy about this approach for the following reasons. Prone to false Negatives Needs to be " manually " called Seems "smelly" ( the try/catch ) I had thought to use a timer and just call this every X(3??) minutes and also, if a negative result, try a second time to reduce the false negatives. There is a similar question here --> Detecting if SQL server is running but it differs from mine in these ways: I am only checking 1 server I am looking for a reactive way versus proactive So in the end, is there a more elegant way to do this? It would all be "in-network" detection. P.S. To offer some background as requested in an answer below: My app is a Basic CRUD app that can connect to our Central SQL Server or a local SQLExpress Server. I have a Merge Replication Module that keeps them in Sync and the DAL is bound to a User.Setting value. I can, already, manually flip them from Central to Local and back. I just want to implement a way to have it automatically do this. I have a NetworkChangeDetection class that works quite well but, obviously, does not detect the Remote SQL's.
