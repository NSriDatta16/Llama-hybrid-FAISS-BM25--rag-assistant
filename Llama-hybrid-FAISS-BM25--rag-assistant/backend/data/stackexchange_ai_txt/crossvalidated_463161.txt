[site]: crossvalidated
[post_id]: 463161
[parent_id]: 463119
[tags]: 
Considering your case, the input to an SVM model (assuming you are using scikit-learn) is a 2D array with a shape of (n_samples, n_features). Now given the dimensions of your data, think about how it can be brought to this form so that the fit method from sklearn.svm.SVC can be used directly. The quickest idea that comes to the mind is to somehow change the dimension of the matrix ( 50x120 ) because we already have 200 as the number of samples. The way it is done in machine learning is the data is "flattened" such that it can be represented by a vector. Another interesting way to think about this is when you vectorize your data, you are essentially representing it by a point in that dimensional space (that is, in 50x120 -dimensional space, each example becomes a point). So, with the help of "flattening", the input to the model is nothing but 200 data points, each in 50x120 -dimensional space. Here are some quick references for training an SVM model: 1) Scikit-SVM 2) SVM code examples
