[site]: stackoverflow
[post_id]: 4368313
[parent_id]: 
[tags]: 
Modifying the service host base addresses without rewriting the application configuration file

I am trying to adjust the host base address prior to launching the WCF service host to add an instanceName to the base address: var baseAddresses = Utils .EmptyList; var cfg = ConfigurationManager.OpenExeConfiguration( ConfigurationUserLevel.None); var serviceModelGroup = cfg.GetSectionGroup("system.serviceModel") as ServiceModelSectionGroup; var wcfPortalServiceElement = serviceModelGroup.Services. Services[typeof(WcfPortal).FullName]; if (wcfPortalServiceElement != null && wcfPortalServiceElement.Host != null) { baseAddresses = wcfPortalServiceElement.Host .BaseAddresses .Cast () .Select(e => new Uri(e.BaseAddress + "/" + instanceName, UriKind.Absolute)) .ToArray(); } The app.config file looks as following: Motivation: I want to be able to run the same agent process several times on the same machine. Each instance has distinct name (given on the command line), which should be incorporated in the host base address. Now, this is easy to do if the app.config does not include the baseAddresses collection at all. However, I would like it to be there in case a single agent process is run without being given the instance name. The problem is that the service host merges the base addresses given in its constructor with those appearing in app.config. Naturally it fails with an exception, because it discovers two addresses with the http scheme. Also: am I following the mainstream WCF philosophy, when trying to modify the WCF address, depending on a running instance? If I am lost in the labyrinth of hacks - please show the way back to the main road.
