[site]: stackoverflow
[post_id]: 5591189
[parent_id]: 
[tags]: 
code review request , storing anything into void* storage area

I need help in reviewing following code. I am trying to store anything into memory allocated ( void * ) and retrive the same. Please take a look at the code and let me know if there is anything wrong, Or if it will not work, of if there is better approach to achieve the same. #include #include #include #include typedef struct __c_object { void *data; size_t size; } c_object; c_object *new_c_object(void *inObject, size_t obj_size) { c_object *tmp = (c_object*)malloc(sizeof(c_object)); tmp->size = obj_size; tmp->data = (void*)malloc(obj_size); memcpy ( tmp->data, inObject, obj_size); return tmp; } void get_raw_c_object ( c_object *inObject, void **tmp) { *tmp = (void*)malloc(inObject->size); memcpy ( *tmp, inObject->data, inObject->size ); } void delete_c_object ( c_object *inObject ) { if (inObject ) { free ( inObject->data ); free ( inObject); } inObject = ( c_object *)0; } int main() { int in = 0; c_object *co = new_c_object ( &in, sizeof(int)); void *ptrOut = (void*)0; void *ptr = (void*)0; get_raw_c_object( co , &ptrOut); printf ( "Interger = [%d]\n", *(int*)ptrOut); delete_c_object ( co ); float float_in = 10.99; co = new_c_object ( &float_in, sizeof(float)); get_raw_c_object( co, &ptrOut); printf ( "Float = [%f]\n", *(float*)ptrOut); delete_c_object ( co ); int *ptr_int = ( int*) malloc ( sizeof ( int )); in = 999; ptr = &in; co = new_c_object ( ptr, sizeof(int*)); get_raw_c_object( co,&ptrOut ); printf ( "Interger Pointer = [%d]\n", *(int*)ptrOut); delete_c_object ( co ); char *inStr = "Hello Hello Hello"; char *inStrDup = _strdup (inStr); co = new_c_object ( inStrDup, strlen(inStr) + 1); free ( inStrDup ); get_raw_c_object( co ,&ptrOut); printf ( "Character = [%s]\n", (char*)ptrOut); delete_c_object ( co ); char *inStr2 = "Hello Hello Hello"; co = new_c_object ( inStr2, strlen(inStr2) + 1); get_raw_c_object( co,&ptrOut ); printf ( "Character = [%s]\n", (char*)ptrOut); delete_c_object ( co ); }
