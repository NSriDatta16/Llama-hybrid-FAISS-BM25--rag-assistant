[site]: datascience
[post_id]: 122745
[parent_id]: 
[tags]: 
What machine learning technique can help generate spectrum line profiles?

I'm trying to work with Calcium-K line profiles from the Sun. Image for reference. Please ignore the labels on the image and note that my profiles are not in image format (more info below). I have over 1500 profiles like these for various latitudes and dates. The profiles are saved as 2D numpy arrays, where each array has two rows: the first row contains the wavelength values, and the second row contains the intensity values. So, plotting against each other, we get the profiles as shown above. I would like to use an ML model to train latitude and time with line profiles. So, given future date and latitude, the model generates a possible line profile. I'm stuck with how I can map latitude and time with the line profiles. If I flatten each numpy array and make a list of 1D numpy arrays, ANN, LSTM, and CNN models totally fail and show garbage. Random Forest, XGBoost, and KNN don't fare well either. What algorithm can I use to solve this? And more importantly, how do I retain line profile info (that is lost if flattened) while training? Any pointers would help. Thanks! Edit 1: My line profiles are of the shape (512, 2), where row 1 = wavelength; row 2 = intensity. Edit 2: Including the architectures of my LSTM network. num_samples = X.shape[0] # Number of samples/sequences timesteps = 5 # Length of each sequence num_features = 4 # Number of input features num_sequences = num_samples - timesteps + 1 X_reshaped = np.empty((num_sequences, timesteps, num_features)) #Reshape input features for LSTM input shape for i in range(num_sequences): X_reshaped[i] = X[i:i+timesteps] y_reshaped = y[timesteps-1:] model = Sequential() model.add(InputLayer((5, 4))) model.add(LSTM(1024,activation='leaky_relu')) model.add(Dropout(0.2)) model.add(Dense(512, activation='leaky_relu')) model.add(Dense(1024, activation='linear')) model.compile(loss='mape', optimizer='adam', metrics=['mape'])
