[site]: stackoverflow
[post_id]: 1677713
[parent_id]: 1677258
[tags]: 
UTF-8 has the property that sorting a UTF-8 string byte-by-byte according to the byte value gives the same ordering as sorting it codepoint-by-codepoint according to the codepoint number. That is, I know without looking that the UTF-8 representation of U+2345 is lexicographically after the UTF-8 representation of U+1234. As for normalization, the Perl core doesn't know anything about it; to get accurate sorting and comparison among the different forms you would want to run all of your strings through Unicode::Normalize and convert them all to the same normalization form. I can't comment on which is best for any given purpose, mostly because I have no clue. Also, sorting and cmp are affected by the locale pragma if it's in use; it uses the POSIX collation order. Using use locale , an 8-bit locale, and unicode all together is a recipe for disaster, but using use locale , a UTF-8 locale, and unicode should work usefully. I can't say I've tried it. There's an awful lot of info in perllocale and perlunicode anyway.
