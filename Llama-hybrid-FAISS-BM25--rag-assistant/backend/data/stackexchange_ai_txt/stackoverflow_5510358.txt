[site]: stackoverflow
[post_id]: 5510358
[parent_id]: 5493500
[tags]: 
Another approach which might be useful to move extensive computations outside the dosync is to use delay . (defn fetch-posts [& options] @(dosync (or @posts (ref-set posts (delay (apply fetch :posts options)))))) Also note that your original code is not thread-safe since you access the ref outside the dosync and modify it based on this value afterwards in the dosync . But the value might have changed already between the deref and the dosync . Eg. by another thread calling fetch-posts in parallel. Also the agent approach is questionable, because you cannot reliably read an agent. The value you get is consistent, but the access is not synchronised. Consider Laurent's example: between await-for and the deref another thread might already call reset-posts and you get nil instead of the post data. In this example this is probably a) far fetched and b) maybe a case one has to consider anyway, but there might be other use cases where this introduces a subtle race condition in more critical code. tl;dr: Be careful what you do! Clojure is not magically thread-safe. Reason thoroughly about your solution and be aware of the implications.
