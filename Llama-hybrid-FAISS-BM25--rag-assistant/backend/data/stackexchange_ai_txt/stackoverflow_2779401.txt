[site]: stackoverflow
[post_id]: 2779401
[parent_id]: 1081325
[tags]: 
I went for this approach (in vb) Public Class SerialisableClass Public Sub SaveToXML(ByVal outputFilename As String) Dim xmls = New System.Xml.Serialization.XmlSerializer(Me.GetType) Using sw = New IO.StreamWriter(outputFilename) xmls.Serialize(sw, Me) End Using End Sub Private tempState As Object = Me Public Sub ReadFromXML(ByVal inputFilename As String) Dim xmls = New System.Xml.Serialization.XmlSerializer(Me.GetType) Using sr As New IO.StreamReader(inputFilename) tempState = xmls.Deserialize(sr) End Using For Each pi In tempState.GetType.GetProperties() Dim name = pi.Name Dim realProp = (From p In Me.GetType.GetProperties Where p.Name = name And p.MemberType = Reflection.MemberTypes.Property).Take(1)(0) realProp.SetValue(Me, pi.GetValue(tempState, Nothing), Nothing) Next End Sub End Class I can then simply use something like this: Public Class ClientSettings Inherits SerialisableClass Public Property ZipExePath As String Public Property DownloadPath As String Public Property UpdateInstallPath As String End Class and call it like this: Dim cs As New ClientSettings cs.ReadFromXML("c:\myXMLfile.xml") or even better (if I add the necessary constructor): Dim cs as New ClientSettings("c:\myXMLFile.xml") It seems nice and clean to me and works well in my situation. Cheers
