[site]: stackoverflow
[post_id]: 3030787
[parent_id]: 3030767
[tags]: 
the latter would make it much more general and allow lookup to be used in list comprehensions The latter is also more unsafe, as the majority of monad classes define fail as error . That is, the common case of not finding an element in the Map is a program-terminating error for most monads. That, coupled with the increased likelihood of the wrong type context being inferred, means we tend to discourage the 'monadic fail return' style now. Is there any way to mimic this behavior with the newer version Indeed there is! Simply lift Maybe a into Monad a, like so: lift :: Monad m => Maybe a -> m a lift Nothing = fail "you die now" lift (Just a) = return a And now you can write, e.g. lift . lookup
