[site]: stackoverflow
[post_id]: 1832347
[parent_id]: 1830736
[tags]: 
I think the bit you're missing is here, SA_OAuthTwitterEngine.m:103: //This generates a URL request that can be passed to a UIWebView. It will open a page in which the user must enter their Twitter creds to validate - (NSURLRequest *) authorizeURLRequest { if (!_requestToken.key && _requestToken.secret) return nil; // we need a valid request token to generate the URL OAMutableURLRequest *request = [[[OAMutableURLRequest alloc] initWithURL: self.authorizeURL consumer: nil token: _requestToken realm: nil signatureProvider: nil] autorelease]; [request setParameters: [NSArray arrayWithObject: [[[OARequestParameter alloc] initWithName: @"oauth_token" value: _requestToken.key] autorelease]]]; return request; } You will have to "fake" this user login out yourself, I believe by sending twitter the login credentials as a separate request. It appears that the setUsername method you're calling is actually called as a post operation once a valid access token has been received. See SA_OAuthTwitterEngine.m:185 // // access token callback // when twitter sends us an access token this callback will fire // we store it in our ivar as well as writing it to the keychain // - (void) setAccessToken: (OAServiceTicket *) ticket withData: (NSData *) data { if (!ticket.didSucceed || !data) return; NSString *dataString = [[[NSString alloc] initWithData: data encoding: NSUTF8StringEncoding] autorelease]; if (!dataString) return; if (self.pin.length && [dataString rangeOfString: @"oauth_verifier"].location == NSNotFound) dataString = [dataString stringByAppendingFormat: @"&oauth_verifier=%@", self.pin]; NSString *username = [self extractUsernameFromHTTPBody:dataString]; if (username.length > 0) { [[self class] setUsername: username password: nil]; if ([_delegate respondsToSelector: @selector(storeCachedTwitterOAuthData:forUsername:)]) [(id) _delegate storeCachedTwitterOAuthData: dataString forUsername: username]; } [_accessToken release]; _accessToken = [[OAToken alloc] initWithHTTPResponseBody:dataString]; } So the steps are as follows: Request request token Fake user login to twitter and get the pin value Set the pin on the engine Request access token You can see where SA_OAuthTwitterController parses the pin out of the webview content in SA_OAuthTwitterController.m:156 #pragma mark Webview Delegate stuff - (void) webViewDidFinishLoad: (UIWebView *) webView { NSError *error; NSString *path = [[NSBundle mainBundle] pathForResource: @"jQueryInject" ofType: @"txt"]; NSString *dataSource = [NSString stringWithContentsOfFile:path encoding:NSUTF8StringEncoding error:&error]; if (dataSource == nil) { NSLog(@"An error occured while processing the jQueryInject file"); } [_webView stringByEvaluatingJavaScriptFromString:dataSource]; //This line injects the jQuery to make it look better NSString *authPin = [[_webView stringByEvaluatingJavaScriptFromString: @"document.getElementById('oauth_pin').innerHTML"] stringByTrimmingCharactersInSet: [NSCharacterSet whitespaceAndNewlineCharacterSet]]; if (authPin.length == 0) authPin = [[_webView stringByEvaluatingJavaScriptFromString: @"document.getElementById('oauth_pin').getElementsByTagName('a')[0].innerHTML"] stringByTrimmingCharactersInSet: [NSCharacterSet whitespaceAndNewlineCharacterSet]]; [_activityIndicator stopAnimating]; if (authPin.length) { [self gotPin: authPin]; } if ([_webView isLoading] || authPin.length) { [_webView setHidden:YES]; } else { [_webView setHidden:NO]; } } hope this helps.
