[site]: stackoverflow
[post_id]: 2808736
[parent_id]: 2808678
[tags]: 
I would implement stand-alone windows service for long running tasks. Web application delegates long-running tasks to this service via queue approach. It's up to you how you will organize tasks queue. Will queued task have priority, maximum execution time or not. Queue can be implemented as ordinary table(s) in DBMS, that contains job execution status info properties (pretty straightforward approach). So common scenario may look the following: Client sends all required information to web-server Web-server delegates task to service and notifies client - task was successfully queued (task id is sent to client also) External service starts task processing, updating progress information. Client starts polling web server with short execution requests about job (with id received earlier) status and progress. You can choose different technologies (Windows Service + DB / WCF Service) and different communication approaches (polling, pushing, callbacks) but I advise to delegate long-running tasks to external service (not perform them within web app). Executing long running tasks brings thread-per-request model (in multithreaded programming terms). This model has poor scalability and thread pool maximum number of threads limitations. It's not your case though :)
