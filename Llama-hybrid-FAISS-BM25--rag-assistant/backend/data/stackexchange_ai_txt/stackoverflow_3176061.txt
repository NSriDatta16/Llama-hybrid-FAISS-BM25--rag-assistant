[site]: stackoverflow
[post_id]: 3176061
[parent_id]: 3175583
[tags]: 
Regarding the implicit Prelude import, you could add the following language pragma, and then explicitly import things from Prelude , but it might get uglier than simply hiding things from the Prelude or using an qualified import of Data.Foldable . {-# LANGUAGE NoImplicitPrelude #-} import Prelude (someFunction) Why it might get uglier? Because you might have to import data types and functions that are taken for granted, or even functions that aren't explicitly used in the code: {-# LANGUAGE NoImplicitPrelude #-} module Main (main) where -- we import fromInteger although it's not explicitly used import Prelude (Int, foldl, fromInteger, (+), putStrLn, (.), ($), IO, show) sum :: [Int] -> Int sum = foldl (+) 0 main :: IO () main = putStrLn . show $ sum [1,2,3] I told you about this not because it's a good solution, but just to know that there's such a thing.
