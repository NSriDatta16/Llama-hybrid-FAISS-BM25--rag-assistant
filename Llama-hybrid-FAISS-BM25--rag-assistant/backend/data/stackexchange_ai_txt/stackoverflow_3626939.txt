[site]: stackoverflow
[post_id]: 3626939
[parent_id]: 3625936
[tags]: 
I recommend this article (and pattern): Pimp my Library Whenever a Java library has an interface that is just a little bit cumbersome in Scala, this is a great way to make it more convenient and your code more elegant. Here's a very simple example. I want to use the Scala XML pretty printer all the time in my code to return nicely formatted XML. This is the normal way to do that: class Service { val pp = new scala.xml.PrettyPrinter(80,2) def content = pp.format( {something()} ) } however since I do this all the time I add this to my package import scala.xml.Elem object PrettyXml { val pp = new scala.xml.PrettyPrinter(80,2) } trait PrettyXml { case class Formatted(xml:Elem) { def pretty = PrettyXml.pp.format(xml) } implicit def toFormatted(xml:Elem) = Formatted(xml) } and now I can replace my original code with class Service extends PrettyXML { val pp = new scala.xml.PrettyPrinter(80,2) def content = {something()} pretty } If I didn't want to make it a trait I could probably put PrettyXML in a package object.
