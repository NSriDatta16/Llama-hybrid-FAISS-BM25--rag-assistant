[site]: stackoverflow
[post_id]: 3540341
[parent_id]: 3540331
[tags]: 
I'm totally fine with each thread using its own rand variable but that's just a huge pain to make happen. It's not necessarily so difficult to do it that way. Some compilers (e.g. GCC) support thread-local storage , which allows each thread to have its own copy of a given variable. Having said that, there's only one problem that I can think of — other than the one you mentioned — with your current way of doing it. If each thread is run on a different core, and the random value is stored in each core's non-shared cache, the updates may fail to be propagated among the cores for an indefinite amount of time. You can avoid this by using a memory barrier (which can be created via the use of locks), but this will probably be bad for performance.
