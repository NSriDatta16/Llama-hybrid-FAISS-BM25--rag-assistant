[site]: stackoverflow
[post_id]: 2200969
[parent_id]: 2200236
[tags]: 
Even though dynamic programming looks like an attractive way of approaching the problem (and makes it an interesting coding challenge), a bit of creative thinking about data structures lends itself to giving an immediate answer. [ the rest of this is essentially an explanation of why Tim Goodman's answer is best, for some value of "best" ] If we have an nXm grid, we can represent each valid corner-to-corner route as an n+m bit-string, using either 0 or 1 to represent "down". A bit more thinking gives at hand that the exact number of routes is the number of ways to take N items from N+M items and this, conveniently, happens to be the standard simple combinatorial M over N. So, for any N+M rectangle, the number of possible routes from the top-left to the bottom-right corner is (n+m) (n+m-1) ...(m+1)/(n * (n-1) * ... 1). The fastest program is the one that doesn't have to store very much, use much in the way of storage and (ideally) has a closed-form answer.
