[site]: stackoverflow
[post_id]: 3123228
[parent_id]: 3122010
[tags]: 
A few suggestions: Use tr/,//d instead of s/,//g as it is faster. This is essentially the same as ysth's suggestion to use y/,//d Perform split only as much as is needed. If $position = 1 , and you have 10 fields, then you're wasting computation performing unnecessary splits and joins. The optional third argument to split can be leveraged to your advantage here. However, this does depend on how many consecutive empty fields you are expecting. It may not be worth it if you don't know ahead of time how many of these you have You're quite right in wanting to perform multiple appends with one sub-call. There is no need to perform multiple splits and joins when one will do just as well You really ought to be using Text::CSV , but here's how I would revise the implementation of your sub in pure Perl (assuming a maximum of one consecutive empty field): sub push_csv { my ( $items, $positions ) = @_[1..2]; # Test inputs warn "No. of items to add & positions not equal" and return unless @{$items} == @{$positions}; my $maxPos; # Find the maximum position number for my $position ( @{$positions} ) { $maxPos ||= $position; $maxPos = $position if $maxPos [$_], 1, $items->[$_] ) for 0 .. $#{$items}; $_[0] = join ',' , @fields; print $_[0],"\n"; } Usage use strict; use warnings; my $csvString = 'one,two,,four,,six'; my @missing = ( 'three', 'five' ); my @positions = ( 2, 4 ); push_csv ( $csvString, \@missing, \@positions ); print $csvString; # Prints 'one,two,three,four,five,six'
