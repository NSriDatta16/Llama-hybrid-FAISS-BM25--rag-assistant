[site]: stackoverflow
[post_id]: 609167
[parent_id]: 609100
[tags]: 
An interesting "cut point" for your application is you say "the user fills out a form." If you want to test, you should refactor your code to construct an explicit representation of that form as a data structure. Then you can start collecting forms and testing that the system responds appropriately to each form. It may be that the actions taken by your system are not observable until something hits the file system. Here are a couple of ideas: Set up something like a git repository for the initial state of the file system, run a form, and look at the output of git diff. It's likely this is going to feel more like regression testing than unit testing. Create a new module whose only purpose is to make your program's actions observable. This can be as simple as writing relevant text to a log file or as complex as you like. If necessary, you can use conditional compilation or linking to ensure this module does something only when the system is under test. This is closer to traditional unit testing as you can now write tests that say upon receiving form A, the system should take sequence of actions B . Obviously you have to decide what actions should be observed to form a reasonable test. I suspect you'll find yourself migrating toward something that looks more like regression testing than unit testing per se . That's not necessarily bad. Don't overlook code coverage! (A final parenthetical remark: in the bad old days of interactive console applications, Don Libes created a tool called Expect , which was enormously helpful in allowing you to script a program that interacted like a user. In my opinion we desperately need something similar for interacting with web pages. I think I'll post a question about this :-)
