[site]: stackoverflow
[post_id]: 3343771
[parent_id]: 3341032
[tags]: 
Yeah, that doesn't work. Here's a class that improves it somewhat: using System; using System.Windows.Forms; class MyFlowLayoutPanel : FlowLayoutPanel { public MyFlowLayoutPanel() { this.DoubleBuffered = true; } protected override void OnScroll(ScrollEventArgs se) { this.Invalidate(); base.OnScroll(se); } } Compile and drop it from the top of the toolbox onto your form. It however cannot fix the fundamental problem, the "Show window content while dragging" option. That's a system option, it will be turned on for later versions of Windows. When it is on, Windows itselfs scrolls the content of the panel, then asks the app to draw the part that was revealed by the scroll. The OnScroll method overrides that, ensuring that the entire window is repainted to keep the background image in place. The end-result is not pretty, you'll see the image doing the "pogo", jumping up and down while scrolling. The only fix for this is turning the system option off. That's not a practical fix, users like the option and it affects every program, not just yours. If you can't live with the pogo then you'll have to give up on the transparency.
