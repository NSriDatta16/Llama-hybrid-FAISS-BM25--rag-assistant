[site]: stackoverflow
[post_id]: 1009095
[parent_id]: 1008740
[tags]: 
Like molf is saying with :include, .find() has the advantage of eager loading of children. Also, there are several plugins, like pagination, that will wrap the find function. You'll have to use .find() to use the plugins. If you have a really complex sql query remember that .find() uses your exact parameter string. You can always inject your own sql code: :conditions => ["id in union (select * from table... And don't forget there are a lot of optional parameters for .find() :conditions - An SQL fragment like "administrator = 1", [ "user_name = ?", username ], or ["user_name = :user_name", { :user_name => user_name }]. See conditions in the intro. :order - An SQL fragment like "created_at DESC, name". :group - An attribute name by which the result should be grouped. Uses the GROUP BY SQL-clause. :having - Combined with +:group+ this can be used to filter the records that a GROUP BY returns. Uses the HAVING SQL-clause. :limit - An integer determining the limit on the number of rows that should be returned. :offset - An integer determining the offset from where the rows should be fetched. So at 5, it would skip rows 0 through 4. :joins - Either an SQL fragment for additional joins like "LEFT JOIN comments ON comments.post_id = id" (rarely needed), named associations in the same form used for the :include option, which will perform an INNER JOIN on the associated table(s), or an array containing a mixture of both strings and named associations. If the value is a string, then the records will be returned read-only since they will have attributes that do not correspond to the table‘s columns. Pass :readonly => false to override. :include - Names associations that should be loaded alongside. The symbols named refer to already defined associations. See eager loading under Associations. :select - By default, this is "*" as in "SELECT * FROM", but can be changed if you, for example, want to do a join but not include the joined columns. Takes a string with the SELECT SQL fragment (e.g. "id, name"). :from - By default, this is the table name of the class, but can be changed to an alternate table name (or even the name of a database view). :readonly - Mark the returned records read-only so they cannot be saved or updated. :lock - An SQL fragment like "FOR UPDATE" or "LOCK IN SHARE MODE". :lock => true gives connection‘s default exclusive lock, usually "FOR UPDATE". src: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M002553
