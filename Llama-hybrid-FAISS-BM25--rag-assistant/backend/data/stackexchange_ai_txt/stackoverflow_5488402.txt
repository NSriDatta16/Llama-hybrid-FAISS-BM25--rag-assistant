[site]: stackoverflow
[post_id]: 5488402
[parent_id]: 
[tags]: 
How to handle character encoding with XML, JDom, JNI and C++

I am developing an application that reads in an XML document and passes the contents with JNI to a C++-DLL which validates it. For this task I am using JDom and JUniversalChardet to parse the XML file in the correct encoding. My C++ accepts a const char* for the contents of the XML file and needs it in the encoding "ISO-8895-15", otherwise it will throw an exception because of malformed characters. My first approach was to use the shipped OutputFormatter of JDom and tell it to use Charset.forName("ISO-8859-15") while formatting the JDom document to a String. After that the header part of the XML in this String says: The Problem is that it is still stored in a Java String and therefore UTF-16 if I got that right. My native method looks something like this: public native String jniApiCall(String xmlFileContents); So I pass the above mentioned String from the OutputFormatter of JDom into this JNI-Method. Still everything UTF-16, right? In the JNI-C++-Method I access the xmlFileContents String with const string xmlDataString = env->GetStringUTFChars(xmlFileContents, NULL); So, now I got my above mentioned String in UTF-16 or UTF-8? And my next question would be: how can I change the character encoding of the std::string xmlDataString to ISO-8859-15? Or is the way I am doing this not exactly elegant? Or is there a way to do the character encoding completely in Java? Thanks for your help! Marco
