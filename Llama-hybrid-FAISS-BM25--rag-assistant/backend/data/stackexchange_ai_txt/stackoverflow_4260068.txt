[site]: stackoverflow
[post_id]: 4260068
[parent_id]: 484355
[tags]: 
"For manipulating files and moving stuff around, you want the OS on your side" Be careful following this advice without understanding the proper context! The OS supports programming API like man (2) and (3) and user commands man (1). Having a Perl script for example drive a sequence of man(1) is not going to run as fast as a JVM effectively issue a sequence of man(2) or man(3). Consider this example: At the company I joined I found they had a Perl module calling Java utility in a loop - part of a make/perl/java hybrid build contraption. On the surface, it must have seemed reasonable to have the perl read in metadata and exec/call into a JVM to do the heavy lifting (a proprietary form of file merging in a perl loop). The overhead (setup/teardown) of this multi-process approach was significant and was especially bad under Windows OS. The perf issue had to be addressed. The teams dealt with the perf issue by "reusing" the java program by hosting it in a servlet and creating a protocol to send commands from the perl to the java servlet. Now the iterative JVM setup/teardown in a loop was reduced an everyone was happy until there were edge use cases like timeout issues where the team added sleeps into the mix. The culture encourages tool teams to use perl and the service team to use Java. The best approach of replacing the perl with Java and eliminate all the overhead either was lost to everyone or political forces influenced the rube-goldberg solution... Doing the build in a JVM language like ANT or Maven avoids all this. Again, be warned :-)
