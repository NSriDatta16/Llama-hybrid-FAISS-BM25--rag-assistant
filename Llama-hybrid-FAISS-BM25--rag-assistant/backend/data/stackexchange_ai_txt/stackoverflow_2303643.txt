[site]: stackoverflow
[post_id]: 2303643
[parent_id]: 2303581
[tags]: 
A c++ class with iterators has to provide at least two functions if they have to work with the std library iterator begin() //returns an iterator at starting pos iterator end() //returns an iterator one past end or just invald The iterator has to overload the increment operators, equals and * iterator operator++() iterator operator==()//make sure that an invalid iterator equals end() T& operator*() You can use the iterator class to wrap around the iterator of the internal storage to ensure that the user is limited to these methods. template iter { iter(T::iterator& intern) T::value_type& operator*(){return *intern} iter operator++(){return iter(++intern);} bool operator==(iter const& other)const{return intern == other.intern;} } Where T is the type of your container.(The class is incomplete and I may have mixed something up)
