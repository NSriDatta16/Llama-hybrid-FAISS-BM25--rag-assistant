[site]: stackoverflow
[post_id]: 2301589
[parent_id]: 2301523
[tags]: 
You'll need to convert the values to Integers, which can be done by the fromIntegral function (numeric casting for Haskell): fromIntegral :: (Integral a, Num b) => a -> b It converts any type in the Integral class to any type in the (larger) Num class. E.g. fromIntegral (maxBound::Int) - fromIntegral (minBound::Int) However, I would not really trust the approach you're taking -- it seems very fragile. The behaviour in the presence of types that admit wraparound is pretty suspect. What do you really mean by: "the size of the list of finite Ints". What is the size in this sense, if it isn't the length of the list?
