[site]: stackoverflow
[post_id]: 1456980
[parent_id]: 1456869
[tags]: 
In order to achieve such goals, I create a simple 'View' class, for example CustomerView, which just contains the properties that are needed to display an overview. My Repository then has a method which returns a collection of these CustomerView objects. I mostly use NHibernate in my projects. Nhibernate allows you to use 'projections'. So, what I do in my repository is this: (note that the code below is just some pseudo-code; it won't compile). public IList GetAllCustomers() { ICriteria crit = _session.CreateCriteria (typeof(Customer)); crit.AddProjection ( ... ); crit.SetResultTransformer (new EntityToBeanTransformer(typeof(CustomerView)); return crit.ToList(); } In fact, it comes down to this: I tell my O/R mapper that it should query Customers, but that it should return entities of type 'CustomerView'. In the defintion of the projection, I also define which properties of the Customer class map to which properties of the CustomerView class. Then, the O/R mapper is smart enough to generate a very simple query, which only retrieves those fields that are required to populate the CustomerView class. For instance, the query that is executed can be as simple as: SELECT customerid, customername FROM tblCustomer
