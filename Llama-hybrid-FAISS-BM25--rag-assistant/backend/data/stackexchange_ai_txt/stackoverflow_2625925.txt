[site]: stackoverflow
[post_id]: 2625925
[parent_id]: 2624082
[tags]: 
Ordering your tests like this is bad design. Most unit testing frameworks won't let you order your tests for this very reason. It sounds like you should be organising your tests like this: Test 1: Test that a user can log in. Test 2: Fake a logged in user, make sure that GetUser returns that faked user. You should make sure your system is designed to allow this kind of testing (faking/mocking out of parts for tests). Otherwise you will end up with unmaintainable tests that will all break when something core does. Think of it this way: in your second test, you aren't testing the login process, so why should the test break if login is broken? It shouldn't, so you need to make sure you can remove the dependency on the real login process, and instead use some method of setting up a user as logged in that cannot fail.
