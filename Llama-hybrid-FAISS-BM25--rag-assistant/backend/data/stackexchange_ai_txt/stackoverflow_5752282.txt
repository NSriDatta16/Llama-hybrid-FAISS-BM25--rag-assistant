[site]: stackoverflow
[post_id]: 5752282
[parent_id]: 5752020
[tags]: 
In this case it makes more sense to use a mapping function (in this case Array.Map() ) and pipelining instead of recursion since you have to apply a function (character shifting) to each character in your string. Below should work for uppercase characters: let shift(c, shiftAmount) = let num = int(c) - int('A') let offsetNum = (num+shiftAmount)%26 let result = offsetNum + int('A') if offsetNum Array.map (fun c -> shift( int(c), shiftAmount)) |> String.Concat There might be a much more elegant solution (especially to cover both clock-wise and counter-clock wise shifting), still learning myself.
