[site]: stackoverflow
[post_id]: 2057116
[parent_id]: 5727
[tags]: 
The reason I had a hard time understanding pointers, at first, is that many explanations include a lot of rubbish about passing by reference. All this does is confuse the issue. When you use a pointer parameter, you're still passing by value; but the value happens to be an address rather than, say, an int. Someone else has already linked to this tutorial, but I can highlight the moment when I began to understand pointers: A Tutorial on Pointers and Arrays in C: Chapter 3 - Pointers and Strings int puts(const char *s); For the moment, ignore the const. The parameter passed to puts() is a pointer, that is the value of a pointer (since all parameters in C are passed by value), and the value of a pointer is the address to which it points, or, simply, an address. Thus when we write puts(strA); as we have seen, we are passing the address of strA[0]. The moment I read these words, the clouds parted and a beam of sunlight enveloped me with pointer understanding. Even if you're a VB .NET or C# developer (as I am) and never use unsafe code, it's still worth understanding how pointers work, or you won't understand how object references work. Then you'll have the common-but-mistaken notion that passing an object reference to a method copies the object.
