[site]: stackoverflow
[post_id]: 4316478
[parent_id]: 4168002
[tags]: 
Here is my idea, for a fairly basic chess game : class GameBoard { IPiece config[8][8]; init { createAndPlacePieces("Black"); createAndPlacePieces("White"); setTurn("Black"); } createAndPlacePieces(color) { //generate pieces using a factory method //for e.g. config[1][0] = PieceFactory("Pawn",color); } setTurn(color) { turn = color; } move(fromPt,toPt) { if(getPcAt(fromPt).color == turn) { toPtHasOppositeColorPiece = getPcAt(toPt) != null && getPcAt(toPt).color != turn; possiblePath = getPcAt(fromPt).generatePossiblePath(fromPt,toPt,toPtHasOppositeColorPiece); if(possiblePath != NULL) { traversePath(); changeTurn(); } } } } Interface IPiece { function generatePossiblePath(fromPt,toPt,toPtHasEnemy); } class PawnPiece implements IPiece{ function generatePossiblePath(fromPt,toPt,toPtHasEnemy) { return an array of points if such a path is possible else return null; } } class ElephantPiece implements IPiece {....}
