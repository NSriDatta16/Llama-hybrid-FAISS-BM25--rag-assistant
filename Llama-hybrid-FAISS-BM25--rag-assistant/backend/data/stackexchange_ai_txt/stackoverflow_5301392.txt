[site]: stackoverflow
[post_id]: 5301392
[parent_id]: 5300079
[tags]: 
Localization can be a huge pain in embedded systems. There are a couple of things to first consider: will your translated languages require alternate character sets? Are you displaying text to a graphical display or a something like a serial console? If the set of translated languages is relatively small and the set of text strings is well-defined, you might avoid a full-blown translation library. I inherited an embedded product that used a set of language-specific string tables. Each text element had a position in the table, thus a particular translated piece of text could be looked up in a 2D table by language, then by element. (These tables were stored in ROM in this application.) If you go this route, there are a number of other issues to consider. Some languages can express content more or less concisely than English. German is a good example - simple phrases can take on sentence-like lengths. As a result, you should be prepared for the case in which one text element varies substantially in length from language to language. In my inherited app, this was done by extending the table to 3D such that a text element could have more than one "line". Of course, text layout (abbreviations, sentence length, pagination, etc.) extend from this, as well. If ROM space is limited, you might consider translated snippets of phrases, then pasting them together as needed. This so-called string consolidation approach can be tricky because the desired localized phrase might translate clumsily into snippets. In other words, be prepared for "Engrish" if you paste snippets of translated text together willy-nilly. Babelfish, et al, can help - but the defense is a good in-country review of the end product by a native speaker. (Note: the native speaker should represent an "average" dialect.)
