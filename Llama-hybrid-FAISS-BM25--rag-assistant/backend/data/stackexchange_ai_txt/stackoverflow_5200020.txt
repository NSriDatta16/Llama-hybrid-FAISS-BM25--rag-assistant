[site]: stackoverflow
[post_id]: 5200020
[parent_id]: 2750005
[tags]: 
Usually I organize tests with one test executable per class under test. and eventually one test program is capable of testing just one test class. This is a good thing. It isolates your tests from each other, preventing things like a crash in one test from blocking all your other tests. That crash could be caused by a common component in several classes under test. The pattern of the failures would then tip you off to the underlying origin of the problem. Basically, you have better diagnostic information for failures if your tests are independent of each other. Make it easy to set up multiple executables and run each test separately. Use a test runner to spawn off all the test processes. Update: I've changed my mind on this somewhat. Once you have a big program with lots of tests, linking hundreds of test executables becomes very slow. My new preference is to put all the tests for a library into an executable and choosing which tests to invoke using command-line arguments passed to the test executable. That cuts down the number of executables from hundreds to dozens, but retains the advantages of running tests separately.
