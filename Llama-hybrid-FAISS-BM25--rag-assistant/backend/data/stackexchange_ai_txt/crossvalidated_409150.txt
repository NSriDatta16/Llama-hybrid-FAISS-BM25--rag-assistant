[site]: crossvalidated
[post_id]: 409150
[parent_id]: 408172
[tags]: 
I believe you would be best served by transforming the data to have something like "amount of work done" and "time spent working" and then predict "amount of work done per time unit" - this would mostly get rid of the problems with 100 percent complete. Obviously we can use "percent complete" to estimate the amount of work done, but that won't be without problems (especially if tasks differ). In this case, we can transform the data by subtracting the measured time steps to get something like: WorkerID DayDiff CompleteDiff PercentStarted 1 1 2 0 1 1 0 2 1 1 3 2 ... 2 1 1 5 2 1 1 6 ... DayDiff may be unnecessary if you have no gaps in your data. Now you could use a hierarchical model to predict WorkPerDay = CompleteDiff / DayDiff . What should be the response distribution? This is hard to say without looking at the complete dataset, but it is possible normal wouldn't be terrible. I would however guess it would be better fit by a mixture - one component to model the negative steps and one to model the positive steps, as I would assume negative steps occur for very different reason than positive steps. If your data are discrete, it is possible something like negative binomial would work good for either component. The neat part about using a mixture model is that the mixture parameter itself would be of interest (how likely is the worker to have negative progress). If you cannot easily fit mixtures, it could make sense to fit a separate model to predict a binary outcome "positive" vs. "negative" progress and then separately regress on the positive and negative outcomes. In any case, you should check the predictions of your model against the actual dataset (known as posterior predictive checks in the Bayesian world, but works also in the frequentist case) to see if your model fits. E.g. what is the maximum progress your model predicts compared to maximum in the data, does it predict similar number of zeroes as are in the data etc. If those checks are way off you are likely to be using a wrong response distribution.
