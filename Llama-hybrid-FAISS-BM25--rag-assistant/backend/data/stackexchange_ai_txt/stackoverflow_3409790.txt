[site]: stackoverflow
[post_id]: 3409790
[parent_id]: 
[tags]: 
MVC/HMVC and Object Oriented programming

I've been reading and learning about Object-Oriented programming ( Head First Object-Oriented Analysis and Design and Code Complete: A Practical Handbook of Software Construction â€“ thanks to suggestions found on StackOverflow). I've also been learning how to use a couple PHP MVC frameworks (specifically Codeigniter and Kohana ). Some of the principals of Object-Oriented that I've read about are handled differently by the MVC frameworks. I think I've managed to understand the differences and why the decisions were made (complete and easy to use solution), but I wanted to test my assumptions...so if you'll humour me...please comment or correct. Assumption #1: Thinking about the right abstraction for a web application, the directory containing the library of classes should be located outside of the directory containing the presentation files. This organization adheres to the DRY ("Don't Repeat Yourself") principal allowing for multiple presentation folders (www.domain.com, management.domain.com, api.domain.com, etc.) to work with the same objects. Assumption #2: If all your classes are located outside of your presentation folders, then the models in your MVC implementation just use instances of those classes. If that's true, then the MVC framework is just a presentation class (the controller) that helps to manage the input (GET & POST requests), the response (models or instances) and output (views or templates). Assumption #3: If the MVC framework is just a presentation class, then the database class that the controller instance initializes breaks the abstraction of the controller class. A model (of the controller instance) shouldn't have a ("has a") database, it should have a thing (user, product) from the library of classes and that thing should have a database. Assumption #4: Furthermore, if the MVC framework is just a presentation class, the database class that the controller instance initializes is too tightly coupled with the controller class. Changing from one method of storage to another requires re-factoring of all the models. Assumption #5: With a HMVC framework, the issues with the controller containing the database is worse, because your models are more module (more models, more re-factoring). UPDATE: Sorry, I may have used the terms controller and model a little loosely...maybe that speaks to the tight coupling. The source of my confusion stems from the database class syntax . With a model, shouldn't it be: $user = new User($id); $data['name'] = $user->getName(); $data['title'] = $user->getTitle(); return $data Instead of: $query = $this->db->get_where('user', array('id' => $id), 1, 0); $row = $query->row_array(); $data['name'] = $row['name']; $data['title'] = $row['title']; return $data
