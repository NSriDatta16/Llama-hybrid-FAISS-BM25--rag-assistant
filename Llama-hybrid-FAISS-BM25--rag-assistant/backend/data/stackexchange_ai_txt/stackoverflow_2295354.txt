[site]: stackoverflow
[post_id]: 2295354
[parent_id]: 2295290
[tags]: 
In answer to your second question, the most elegant way to do this would be to use a function that takes two parameters instead of an array: add = lambda a, b: a + b add(1, 3) However, using lambda here is a bit silly. Python gives us the operator module, which provides a functional interface to the basic operators. The lambda above has unnecessary overhead just to call the addition operator: from operator import add add(1, 3) I understand that you're playing around, trying to explore the language, but I can't imagine a situation I would use an array of functions where Python's scoping weirdness would get in the way. If you wanted, you could write a small class that uses your array-indexing syntax: class Adders(object): def __getitem__(self, item): return lambda a: a + item adders = Adders() adders[1](3)
