[site]: stackoverflow
[post_id]: 3512593
[parent_id]: 3512517
[tags]: 
Attribute matches are applied when you ask for it (you are pulling with complex and unneeded for-each resulting in no attribute matching at all), otherwise they are ignored. That's why the copy idiom is used with specific attribute apply-templates: When it comes to the order in which they are applied, the order is the document order, which means: after the element is applied, its attributes will be applied (in undetermined order) and then the element's children are applied. Attributes never have children and their parent is the containing element. "it defines what part of the xml tree that will be enclosed in the template." No. It is called when the processor encounters input that matches the specification, or when you specifically apply this input by using xsl:apply-templates . Your code should not use xsl:for-each , that's rarely needed. Instead, use xsl:apply-templates . This will also give you the possibility to match the attributes when you like. Normally, you don't (need to) specify the parent in the match-attribute of apply-templates. And you surely don't write down the whole path inside the templates each time, that will wreak havoc on usability of your stylesheet... Try something like this instead and have a look at some XSL tutorials on the net (w3schools provides some basic information and Tennison's book is next to invaluable to learn about this variant of functional programming): Error: ( ) "It doesn't work any more, why, and how can I make it work again?" Because your if-statement is probably always true (or always false). Reason: if anywhere in your document the XPath is correct, it will always be false, if it is never correct, it will always be true. Using xsl:if with an XPath that starts in the root will, for the live of the transformation, always yield the same result. Not sure what you are after, so I cannot really help you further here. Normally, instead of xsl:if , we tend to use a matching template (again, yes, I know it gets boring ;). Note: you ask something about attributes in your question, this I tried to answer in the opening paragraph (before this edit). However, there's nothing about attributes inside your code, so I don't know how to really help you. Note on the note: LarsH suggests that you perhaps mean to ask about the match -attribute inside xsl:template . If so, the answer lies in the text above anywhere, where I talk about apply-templates and the sort. In short: the input document is processed, node by node, possibly directed by xsl:apply-templates , and it tries to find a matching template for each node it's currently at. That's all there is to it.
