[site]: stackoverflow
[post_id]: 1718887
[parent_id]: 1691059
[tags]: 
First off, there is nothing in the language really that prohibits garbage collection. Secondly some implementations do perform garbage collection . In particular, all the implementations that target the JVM garbage collect. Thirdly, there is a way to get some amount of garbage collection with all compilers. You see, when an access type goes out of scope, if you specifially told the language to set aside a certian amount of space for storage of its objects, then that space will be destroyed at that point. I've used this in the past to get some modicum of garbage collection. The declaration voodo you use is: type Foo is access Blah; for Foo'storage_size use 100_000_000; --// 100K If you do this, then all (100K of) memory allocated to Blah objects pointed to by Foo pointers will be cleaned up when the Foo type goes out of scope. Since Ada allows you to nest subroutines inside of other subroutines, this is particularly powerful. To see more about what storage_size and storage pools can do for you, see LRM 13.11 Fourthly, well-written Ada programs don't tend to rely on dynamic memory allocation nearly as much as C programs do. C had a number of design holes that practicioners learned to use pointers to paint over. A lot of those idioms aren't nessecary in Ada.
