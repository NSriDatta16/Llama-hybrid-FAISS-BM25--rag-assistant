[site]: stackoverflow
[post_id]: 3489138
[parent_id]: 
[tags]: 
C++: How do I prevent a function from accepting a pointer that is allocated in-line?

Couldn't figure out how to word the question accurately, so here's an example: Given this function prototype: void Foo(myClass* bar); I want to prevent this usage: Foo(new myClass()); and instead require a previously created object: myClass* bar = NULL; bar = new myClass(); Foo(bar); or myClass bar; Foo(&bar); Thanks. EDIT Here's a clarified example: void Mouse::SetImage(BITMAP* image, int focusX, int focusY) { if(_image) { set_mouse_sprite(NULL); set_mouse_sprite_focus(0, 0); show_mouse(NULL); destroy_bitmap(_image); _image = NULL; } if(image) { _image = create_bitmap(image->w, image->h); clear_bitmap(_image); blit(image, _image, 0, 0, 0, 0, image->w, image->h); } if(image == NULL) { focusX = 0; focusY = 0; } _focusX = focusX; _focusY = focusY; _dirtyImage = true; } Whatever image the user passes in gets copied to the object's image. If I deallocate the passed in image after copying it and the image is used elsewhere in the program it will crash the program with an access violation. If they allocate the storage in-line and I don't deallocated it, a memory leak occurs. The problem is compounded if they call the SetImage method multiple times over the course of the running program. Comments about using alternative libraries or on the Allegro Library itself will be ignored, I already know it's horrible. I don't have a choice.
