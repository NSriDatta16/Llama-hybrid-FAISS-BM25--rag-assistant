[site]: stackoverflow
[post_id]: 2394061
[parent_id]: 
[tags]: 
STL set not adding properly c++

I am adding musicCD information to a set. I have two different functions for this. The problem is adding the musicians. Its only adding the last musician being passed in like its copying over the first ones. here is the required output to give you an idea of the info. Only ringo starr is adding and not "George Harrison" "John Lennon". -MusicCD- band: Beatles musicians: "George Harrison" "John Lennon" "Ringo Starr" songs: 10 title: Sergeant Pepper's Lonely Hearts Club Band keywords: acid rock, sixties here is main() item = library->addMusicCD("Sergeant Pepper's Lonely Hearts Club Band", "Beatles", 10); if (item != NULL) { library->addKeywordForItem(item, "acid rock"); library->addKeywordForItem(item, "sixties"); library->addBandMember(item, "John Lennon"); library->addBandMember(item, "George Harrison"); library->addBandMember(item, "Ringo Starr"); library->printItem(cout, item); } here is the libray.h file where i am adding the info #include "Library.h" #include "book.h" #include "cd.h" #include "dvd.h" #include // general functions ItemSet allBooks; ItemSet allCDS; ItemSet allDVDs; ItemSet* temp; ItemSetMap allBooksByAuthor; ItemSetMap allmoviesByDirector; ItemSetMap allmoviesByActor; ItemSetMap allMusicByBand; ItemSetMap allMusicByMusician; const Item* Library::addMusicCD(const string& title, const string& band, const int nSongs) { ItemSet* obj = new ItemSet(); CD* item = new CD(title,band,nSongs); allCDS.insert(item); obj->insert(item); //allMusicByBand[band] = obj; ItemSetMap::iterator myband = allMusicByBand.find(band); if(myband != allMusicByBand.end()) { myband->second->insert(item); } else{ allMusicByBand.insert(make_pair(band, obj)); } return item; } void Library::addBandMember(const Item* musicCD, const string& member) { ItemSet* obj = new ItemSet(); (((CD*) musicCD)->addBandMember(member)); obj->insert((CD*) musicCD); ItemSetMap::iterator MByMusician = allMusicByMusician.find(member); if(MByMusician != allMusicByMusician.end()) { MByMusician->second->insert((CD*) musicCD); } else { allMusicByMusician.insert(make_pair(member, obj)); } } and here is the cd.cpp class #include "CD.h" using namespace std; CD::CD(const string& theTitle, const string& theBand, const int snumber) : Item(theTitle), band(theBand),number(snumber) { } CD::~CD() { } const string CD::getBand() const { return band; } const string CD::getMusician() const { return musicians; } const int CD::getNumber() const { return number; } void CD::addBandMember(const string &member) { this->musicians = member; } void CD::print(ostream &out) const { out getBand() getMusician() getNumber() getTitle() printKeywords(this->getKeywords()) print(out); return out; } finally, here is the cd.h #ifndef CD_H #define CD_H #pragma once #include "item.h" class CD : public Item { public: CD(const string& theTitle, const string& theBand, const int snumber); void addBandMember(const string& member); const int getNumber() const; const string getMusician() const; const string getBand() const; virtual void print(ostream& out) const; ~CD(); private: string band; string musicians; string title; int number; }; ostream& operator I have to assume my problem lies in the Library::addBandMember function? Keep in mind i cannot change that function in the library class.
