[site]: stackoverflow
[post_id]: 3544208
[parent_id]: 3543921
[tags]: 
Are you sure it's complete code? I don't see where you're creating threads or where BuildKCData is being called from. You ought to have a memory barrier after pthread_kill(), even though I doubt it makes a difference in this case. EDIT: You're confusing in-order execution and cache-consistency. Cache consistency: x86 (currently) guarantees that aligned 4-byte accesses are atomic, so a[0]=123 in thread A and a[1]=456 in thread B will work â€” thread C will eventually see "123,456". There are various cache-consistency protocols around, but I believe it's approximately a MRSW lock. Out-of-order execution: x86 doesn't guarantee ordering of reads (and possibly writes; there was a debate about whether sfence was needed in the linux kernel). This lets the CPU prefetch data more effectively, but it means a[0]=123,a[1] in thread A and a[1]=456,a[0] in thread B could both return 0, because the fetch of a[1] can happen before the load of a[0]. There are two general ways to fix this: Only access shared data when you're holding the lock. In particular, do not read shared data outside of the lock. Whether this means a lock for each entry or a lock for the entire array is up to you, and what you think lock contention is likely to be like (tip: it's not usually very big). Stick a memory barrier between things that need to be in order. This is difficult to get right (pthread doesn't even have memory barriers; pthread_barrier more like a sync point). While memory barriers are a recent trend, locking is far easier to get right ( I am holding the lock, therefore nobody else is allowed to change the data under my feet ). Memory barriers are all the rage in some circles, but there's a lot more to get right ( I hope this read is atomic , I hope other threads write atomically , I hope other threads use a barrier , and oh yeah, I need to use a barrier too ). And if locking's too slow, reducing contention will be much more effective than replacing locks with barriers and hoping you got it right.
