[site]: stackoverflow
[post_id]: 4959487
[parent_id]: 
[tags]: 
Best way to capture all key events for a web application?

I'm a little distraught at the current state of key capturing for web applications. It works great as long as you know your user is going to be typing in a specific place (e.g. an input field), but as soon as you want to do global shortcuts for an entire "application", it seems to fall apart. I'm trying to find out if there is a better way to capture all the key events for a web page than the method I am currently using. My current method is to use the JQuery Hotkeys plugin, bound to the document element, i.e.: $(document).bind("keyup", "delete", function() {}); That works great for most purposes, but for example on Firefox, if the user happens to absentmindedly move their mouse over the navigation bar, the delete key will sometimes result in the user going "back", and the key is never received by the handler so that I can stop propagation. Is there a different element I should be binding to? Is there a better plugin out there for this? Should I just avoid using any keys that are bound to things in common web browsers? As more and more web applications look to mimic their desktop counterparts, it seems like this is a basic feature that web developers will increasingly require. EDIT: I should point out that I am already using e.stopPropagation() and e.preventDefault() . The main problem seems to be that sometimes the event is never even passed to the bound function. I am basically wondering if anyone has figured out a "higher" element to bind to other than document . Or is there an alternative I have never even thought of? Embedding an invisible Flash element on the page and then passing all keys from that to JavaScript, for example (I don't think this would work). I think, at this point, I am doing things the "standard, well-known way." I am trying to see if there is an outside-the-box way that isn't widely known that maybe someone on Stack Overflow knows about :-).
