[site]: stackoverflow
[post_id]: 1589567
[parent_id]: 1589373
[tags]: 
JSON strings cannot represent objects with member functions, so the only thing you will get out of a JSON string is raw data. Assuming the toJSON method results in a JSON string representing an object with all the non-function members of your class instance, you should be able to take the resulting object and attach the prototype to get all the functions back. For example, using jQuery's handy extend function: var o = new someObj("objName"); var json = Object.toJSON(o); var json_obj = eval(json); $.extend(json_obj, someObj.prototype); json_obj.someMethodDefinedOnsomeObj() Depending on how the framework you are using to represent classes in JavaScript makes use of the prototypal object model, your milage may very with the above example. Also, using eval() creates a security hole, so if you do not trust where the JSON string is coming from, you should use a different de-serialization method. Just for full coverage, here is how I did it with raw prototypes: function Animal(name){ this.name = name; } Animal.prototype.talk = function(){ console.log("My name is "+this.name); } var a = new Animal("Brendan Eich"); a.talk(); var json = '{name: "Tim Berners-Lee"}' var b = eval(b); $.extend(b, Animal.prototype); b.talk(); In a firebug console this produces the output: My name is Brendan Eich My name is Tim Berners-Lee
