[site]: stackoverflow
[post_id]: 973486
[parent_id]: 973292
[tags]: 
No-one else has said this: My understanding is that in .NET, an Exception's stack trace isn't filled in until the Exception is thrown . See Best Practices for Handling Exceptions where it says: The stack trace begins at the statement where the exception is thrown and ends at the catch statement that catches the exception. Be aware of this fact when deciding where to place a throw statement. Use exception builder methods. It is common for a class to throw the same exception from different places in its implementation. To avoid excessive code, use helper methods that create the exception and return it. In .NET, if you simply instantiate an Exception and return it, you won't have any stack information in that Exception. This is a benefit when you use this feature to make an Exception builder method, a loss when you use Exceptions the way you are asking about. By comparison, in Java, the stack information is added when the Exception is instantiated, whether or not it is ever thrown. Thus, in .NET when you return an Exception that was never thrown, you forgo the very stack trace that tells you where the problem occurred. Maybe you don't care, in this instance, but I thought it was worth pointing out. The performance overhead of a thrown Exception is reasonably small in any modern JVM and in any recent .NET release. Returning an Exception rather than throwing it -- for performance reasons -- is an inappropriate optimization ... unless you have profiled your program and have found that a specific throw truly is a bottleneck, and that returning the Exception makes a meaningful difference. (Which would surprise me, but anything is possible.) Note: Let's say you make a method that would otherwise be void that returns an Exception on error. This means if you want to check for error, you have to check against null to see whether there was an error or not. As a general rule, methods that return null on error contribute to fragile code. For example, a method that returns a List should return an empty List, rather than null. Also note that in .NET when you rethrow an Exception, because the stack is filled in at a throw clause, you will usually lose the original stack trace. To avoid this, use the bare throw without specifying the Exception instance. If you throw ex then you will lose the original stack trace.
