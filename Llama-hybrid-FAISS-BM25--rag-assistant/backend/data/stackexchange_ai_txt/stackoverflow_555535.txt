[site]: stackoverflow
[post_id]: 555535
[parent_id]: 272973
[tags]: 
So effectively you want to wrap the two LinqDataSources in a single transaction. There is a sneaky way to leverage the LinqDataSource databinding and events and still do only one commit. Using this method you can still use Dynamic Data, FormView, GridView, validation, etc. It only relies on hooking into the data sources. Example markup: ... ... Now in the code behind you are using the single Submit button to mimic the behaviour of the LinqDataSources. You use the datasource to insert the item, which creates the new object, snaffle the object, do it again for the second object. Link the two items together and any other logic you want and then insert it into the database as a single transaction. The key is to set the Cancel flag in the Inserting event so that the datasource doesn't actually insert into the database. protected void btnSubmit_Click(object sender, EventArgs e) { Event evt = null; Contact contact = null; dsEvent.Inserting += (o,ea) => { evt = (ea.NewObject as Event); ea.Cancel = true; }; dsEvent.InsertItem(true); dsContact.Inserting += (o, ea) => { contact = (ea.NewObject as Contact); ea.Cancel = true; }; dsContact.InsertItem(true); evt.Contacts.Add(contact); using (var dbContext = new ContactsCalendarEventsXtabs()) { dbContext.Events.InsertOnSubmit(evt); dbContext.SubmitChanges(); } }
