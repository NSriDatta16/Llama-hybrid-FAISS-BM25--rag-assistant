[site]: stackoverflow
[post_id]: 675548
[parent_id]: 552371
[tags]: 
For better or worse, the answer is simplicity. When the 2.0 Framework came out and TableAdapters were included in the process, it became ridiculously easy to get your basic CRUD type application, or even a front page showing data, rolling. Simply connect to your sever, drag your table(s) over, and the structure was in place, including foreign/primary/unique key references. Need to perform updates on this data? Use the wizard, specify your existing procedures, or let the wizard generate the adhoc/stored procedures for you. And you're done, hook that up to a GridView and you can quickly do lots of things: resort, requery, edit multiple records while disconnected, and update in single or bulk. This kind of convenience is hard to pass up when you're working on projects that want to get done fast. Plus having things in this native "DataTable" format become convenient for XML shenanigans if that is what you need since the DataSet model uses XML under the hood for a lot of stuff. I will admit that I have not checked out the latest versions of the ORMs out there, and I'm not sure if there is a wizard for LINQ that will do this much within a few clicks. And most people are a little slow to adapt newer technology as is, so it easy to see how it is still being used heavily. Seeing that new Dynamic Data Service site/project is built off of LINQ to SQL or LINQ to EF, I think the tide might finally change to the newer model.
