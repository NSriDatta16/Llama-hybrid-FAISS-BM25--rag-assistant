[site]: stackoverflow
[post_id]: 1895283
[parent_id]: 1892324
[tags]: 
Here's a short summary of positive answers when/why to program functionally. List comprehensions were imported from Haskell, a FP language. They are Pythonic. I'd prefer to write y = [i*2 for i in k if i % 3 == 0] than to use an imperative construct (loop). I'd use lambda when giving a complicated key to sort , like list.sort(key=lambda x: x.value.estimate()) It's cleaner to use higher-order functions than to write code using OOP's design patterns like visitor or abstract factory People say that you should program Python in Python, C++ in C++ etc. That's true, but certainly you should be able to think in different ways at the same thing. If while writing a loop you know that you're really doing reducing (folding), then you'll be able to think on a higher level. That cleans your mind and helps to organize. Of course lower-level thinking is important too. You should NOT overuse those features - there are many traps, see Alex Martelli's post. I'd subjectively say the most serious danger is that excessive use of those features will destroy readability of your code, which is a core attribute of Python.
