[site]: stackoverflow
[post_id]: 3355994
[parent_id]: 3355928
[tags]: 
Using generic arrays, this can get a bit cumbersome. One alternative is using the Array.Sort() method that takes an array of keys and an array of values to sort. It first sorts the key array into ascending order and makes sure the array of values is reorganized to match this sort order. If you're willing to incur the cost of converting your List s to arrays (and then back), you could take advantage of this method. Alternatively, you could use LINQ to combine the values from multiple arrays into a single anonymous type using Zip() , sort the list of anonymous types using the key field, and then split that apart into separate arrays. If you want to do this in-place, you would have to write a custom comparer and create a separate index array to maintain the new ordering of items.
