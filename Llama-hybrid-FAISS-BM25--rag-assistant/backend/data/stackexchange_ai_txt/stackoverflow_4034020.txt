[site]: stackoverflow
[post_id]: 4034020
[parent_id]: 
[tags]: 
How do you pass options through a fields_for?

I am trying to run this.. - f.fields_for :referrals do |qf| But I would like to pass this, @organization.referrals.select{|ref|ref.new_record?} as well. This is so that the forms passed are exclusively new objects, and not older ones. I've tried to do this.. - f.fields_for :referrals do |qf| - if qf.object.new_record? = render :partial => 'referral_fields', :locals => {:qf => qf} Which makes it display correctly in the view, but the params are still populated with every single previously created nested object. Which leads me to believe that I need to pass this option within the fields_for statement itself. I have also tried this : - f.fields_for @organization.referrals.select{|ref|ref.new_record?} do |qf| = render :partial => 'referral_fields', :locals => {:qf => qf} As well as this : - f.fields_for :referrals, @organization.referrals.select{|ref|ref.new_record?} do |qf| = render :partial => 'referral_fields', :locals => {:qf => qf} The first example will show and only allows to pass one object. Where as my form is to allow a dynamic number of duplicate nested forms. The second will display and pass all nested objects App Info #organization.rb has_many :referrals accepts_nested_attributes_for :referrals, :reject_if => proc { |attributes| attributes.all? { |k, v| v.blank? } }, :allow_destroy => true #referral.rb belongs_to :organization #referrals_controller.rb def new 2.times { @organization.referrals.build } .... def create @referral = Referral.new(params[:referral]) if @referral.valid? && @organization.referrals :new, :layout => 'manage' end end
