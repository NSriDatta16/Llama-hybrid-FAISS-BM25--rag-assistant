[site]: stackoverflow
[post_id]: 1573498
[parent_id]: 1573382
[tags]: 
You can modify the collection of Inlines exposed via the TextBlock's Inlines property . The above XAML sample would look a little something like this: TextBlock tb = new TextBlock { Text = "This is some Green text up front.", Foreground = Brushes.Green }; InlineCollection tbInlines = tb.Inlines; tbInlines.Add(new Run { Text = "This is some Blue text.", TextWrapping = TextWrapping.Wrap, Foreground = Brushes.Blue }); tbInlines.Add(new Run { Text = "This is some Green text following the Blue text." }); Run hyperlinkRun = new Run("And finally, this is a Hyperlink."); tbInlines.Add(new Hyperlink(hyperlinkRun)); As for your related questions: 1A) While it's possible to hook an event handler to every single Hyperlink instance using the RequestNavigate event on the class, that can be costly to setup and use more memory than is necessary. Instead I recommend leveraging routed events and simply hooking the RequestNavigate event at the container where all of your hyperlinks will be. You can do this like so: myContainer.AddHandler( Hyperlink.RequestNavigateEvent, new RequestNavigateEventHandler( (sender, args) => { /* sender is the instance of the Hyperlink that was clicked here */ })); 2A) In your XAML example it's treating the inner TextBlock as an element that needs to be wrapped all together. If you're using my Run based approach the wrapping should be inherited from the containing text block.
