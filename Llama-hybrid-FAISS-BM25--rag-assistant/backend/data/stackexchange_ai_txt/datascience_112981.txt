[site]: datascience
[post_id]: 112981
[parent_id]: 
[tags]: 
Supervised recommender system design feedback

I am facing a challenge that I am not quite sure how to solve and would like to hear feedback. Basically, I have to implement a recomendation system for certain courses to be recommended to users of certain companies website. There are some limitations that have proved challenging, namely that the history of courses taken were only valid for each year, that is, a course which was imparted in 2021 may or may not(most likely not) be valid for the year). Initially, I had designed a collaborative filtering system which certain similar users were recommended courses that were contextually similar(using NLP) to courses previouly taken by those similar users, and looked to be ok as a solution. Very simplified example of original design: User1 in 2021 took a course 'Excel for data analytics' User2 which is similar to User1, found a similar course for year 2022 titled 'Spreadsheet data analytics', so recommend that course. Now, as I was working on this, one of the stakeholders in the project wanted instead for this to be a supervised model, so he could measure any of the metrics associated with such models. After some research, which took me some time, I found a type of models called Learn To Rank, which seemed in line with what that stakeholder wanted, so I set out trying to fit an XGBRanker into the original design, reusing the contextually similar embeddings(as it makes no sense to me to train on no longer valid data). The problem that arose now is labeling: I have been trying to use the frequency of each similar course taken as the LTR score, however, evidently my first version of the model ended up predicting exactly the frenquency of the similar courses taken by similar users, which beats the purpose of the supervised model altogether, because that frenquency was computed already(as per original collaborative design), and can just be assigned without a supervised model. I am not sure how to overcome this and make the supervised model fit into the overall system design as requested, except only by having someone manually asign a score instead of computing it. How would you approach this problem and its complexities?
