[site]: stackoverflow
[post_id]: 563768
[parent_id]: 563724
[tags]: 
I think the question is what kind of model you're going for. If you're going for a relational model where you know the entire structure ahead of time and it will not change, option 1 is acceptable. That is, the data/methods in A in a particular organizational pattern is required for C. Option 2 may seem like a good idea. but you're essentially saving two references to the same object. Now if B gets mapped to a different A, B has to notify C to change its reference as well. No good. Option 4 seems like the correct way to go for a truly OO approach, however. The point being that A can change its structure and you only have to adapt B - the immediate child. C doesn't know and doesn't care how A is implemented, it's enough that A simply exists and B knows what to do with it.
