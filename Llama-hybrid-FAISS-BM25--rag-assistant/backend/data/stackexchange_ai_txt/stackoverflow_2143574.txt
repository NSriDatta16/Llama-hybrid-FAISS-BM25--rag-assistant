[site]: stackoverflow
[post_id]: 2143574
[parent_id]: 2142979
[tags]: 
You can also compute new values of the cached value in the background and then atomically switch readers to use the new value. For some applications, this can help out. Eg, it might take a while to write a large file that is cached. Using this technique enables the new version of the file to be written while the old one is still be served up from the cache. Here's the technique: Use a version number as part the cache key. This can be done with either the fragment cache or memcache. Steps: Add a 'cache_ver' to the appropriate model Include the cache_ver when computing the key for the cache. Remember that the fragment 'cache' method can use any string. To update the cache: compute next value of the cache_ver compute new value for the cache and store it in cache using new cache_ver as part of the key update the model's cache_ver. -- the next time a request comes in, the controller will look up the cache_ver and use the new value, and return the new results Don't forget to flush the old cached value at some point. Perhaps nightly.... The cache_ver can be stored in mem_cache if you want, instead of the db.
