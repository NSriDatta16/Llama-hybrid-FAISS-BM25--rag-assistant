[site]: stackoverflow
[post_id]: 3276603
[parent_id]: 3276426
[tags]: 
I am not sure what exactly bothers you with the code, but here is what the code you presented seems to do: 1) It reads the lines of a text file, and organizes them as a list of strings, preserving their order (supposedly, because we don't see how TextFileUtils.readTextFile(..) is actually implemented). 2) Sorts the list in ascending name order. Each line is assumed to consist of a sequence of words delimited by comma, where the first word is the first name, and the second is the last name. The primary ordering is by the first name, and the secondary ordering is by the last name. The usage of String.Split() is part of the FirstNameComparator implementation. 3) Writes back the original lines after being sorted, into a different text file. A note about Comparators: A Comparator defines a mechanism for comparing two items. Once the mechanism is implemented, you can use it for a variety of purposes where ordering matters (sorting, looking for maximum/minimum, search trees, priority queues etc). Your explanation of the steps is not really accurate; the code does not read a file into a list, performs split, and then sorts. The splitting is actually a part of the sorting. The sorting algorithm invokes your comparator many times until it determines that the sorting is complete. Furthermore, the way it is implemented now it will probably split the same line multiple times, in order to compare it against different lines (not so efficient, but I suppose this is not the focus here). Two more comments Regarding the way you parse lines: The current code deals only with commas. It doesn't remove whitespaces. You can use a more complex regex to deal with other kind of delimiters and whitespaces as well. I don't see in the code anything that removes duplicates
