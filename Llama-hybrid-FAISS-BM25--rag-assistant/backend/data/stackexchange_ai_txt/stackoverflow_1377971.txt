[site]: stackoverflow
[post_id]: 1377971
[parent_id]: 1376003
[tags]: 
Number 1 -- analyse your SQL. You need to look at the SQL being thrown at the DB to work out which indexes could possibly be useful. You cannot work out what is required just by looking at the plan analyzer. Number 2 -- Table space scans are very often good things! If the table is "small" or you are accessing 30% or more of the rows then a scan is often the most efficient access path. Number 3 -- Indexing "small" tables is pointless. Number 4 -- Indexes are useful for retrieval too. Tack commonly retreived values to the back of an index -- often the DB will just pick values from the index and not bother retreiving the actual row. e.g. if a common SQL is "select max(item_no) where invoice = ?" if you build an index with invoice and item_no then the query can be satisfied without any access to the actual table. The current value of "small" is approx 2000 rows. Always remember there is a severe performance penalty on INSERT for every index you build.
