[site]: stackoverflow
[post_id]: 3930005
[parent_id]: 665499
[tags]: 
Even though an old question, thought I would still answer. String (reference-type storage) Puts the value of the string on the managed heap, and points to it, using a pointer. If you change the value of the string, the new value is stored on the managed heap, in another location, and the pointer is changed to point to the new location. The old value remains on the heap, without any pointer to its location. Eventually one can run out of heap memory. This is a security safeguard. It ensures that unless the programmer physically alters the string (actually putting a new value on the stack and changing the pointer), the string cannot be altered by the system. I don't think there is a way to change the pointer from the new value on the heap, to the old value on the heap. Edited 10-20-2010 StringBuilder (value-type storage) Does not use the managed heap, and therefore, does not use a pointer to a value. It creates a value, in a single location. The value in that single location can be manipulated in many different ways. StringBuilder (reference-type storage) Puts an object on the managed heap, and points to it, using a pointer. The value is placed in the object by way of the pointer. The value can be manipulated by way of the pointer. I think this means that if the value is changed, address space on the heap is allocated to accommodate the expansion or contraction of the value. The Trade Off Stringbuilder uses negligibly more processing time, less memory for storage [on the heap], and its values can be byte-wise manipulated. String uses negligibly less processing time, and more memory for storage, because it cannot change its old values, nor can it dispose of them. Assigning a new value to a string simply directs the pointer to another place on the heap, and stores the new value there. Old values stay on the heap forever, without pointers. Comparison of reference-type storage and value-type storage. Rule of Thumb Anything inside System.ValueType, is a value type. Anything outside system.ValueType, is a reference type. Finally, an article showing some code tests to prove these points .
