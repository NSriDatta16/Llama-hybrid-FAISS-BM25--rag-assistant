[site]: stackoverflow
[post_id]: 2373133
[parent_id]: 2363245
[tags]: 
Complete Python program using K-means, a tool meant for finding optimal quantization intervals: from scipy.misc import imread, imsave def kmeans(file_in, file_out, maxiter): X = imread(file_in) thresh = X.mean() for iter in range(maxiter): thresh = (X[X =thresh].mean())/2.0 X[X =thresh] = 255 imsave(file_out, X) return X, thresh During each iteration, K-means computes the center of each "cluster" then reassigns elements to clusters based upon the recomputed centers. In the simple case where each element (i.e., pixel) is one-dimensional, and only two clusters are required, the threshold is simply the average of the two cluster centers. I should add that this method works for the example image you posted, but may not for others (such as the one you posted in another question). But without further information, I think that this solution works. Output: binary.bmp http://up.stevetjoa.com/binary.bmp
