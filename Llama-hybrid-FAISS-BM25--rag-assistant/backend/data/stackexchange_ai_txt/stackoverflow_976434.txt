[site]: stackoverflow
[post_id]: 976434
[parent_id]: 902984
[tags]: 
Someone has once said something to the effect of: "If learning a programming language doesn't change the way you think about programming, it's not worth learning." That's one metric (out of many) to judge the value of learning new languages (or other technology) by. Using this, one might suggest learning the following languages: C, because it makes you understand the Von Neumann architecture better than any other language (and it's sort-of random-access Turing Machine like, sorta'...). LaTeX (as a programming language, not only as a typesetting system) because it makes you learn about string rewriting systems as a model of computation. Here, sed is similar; learn both, because they're also both useful tools :-) Haskell, because it teaches you about functional programming, lambda calculus (yet another model of computation), lazy evaluation, type inference, algebraic datatypes (done with ease), decidability of type systems (i.e. learn to fear C++) Scheme `(or (another) ,Lisp) for its macro system, and dynamic typing, and functional programming done somewhat differently. SmallTalk, to learn Object-orientation (so I hear) Java, to learn what earning money feels like :D Forth, because wisdom bestowed forth learned implies . ... that doesn't explain why I learn python or shell scripting, though. I think you should take enlightenment with a grain of salt and a shovelful of pragmatism :)
