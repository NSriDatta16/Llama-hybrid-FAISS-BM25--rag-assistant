[site]: stackoverflow
[post_id]: 1710723
[parent_id]: 1644776
[tags]: 
If I understand your question properly, I have a solution. I struggled quite a bit with this same problem. Let me quickly describe the problem I had, to make sure we're on the same page. My problem came down to paging. I want to display 10 records in the UI, but I also want to know the total number of records that matched the filter criteria. I wanted to accomplish this using the NH criteria API, but when adding a projection for row count, my query no longer worked, and I wouldn't get any results (I don't remember the specific error, but it sounds like what you're getting). Here's my solution (copy & paste from my current production code). Note that "SessionError" is the name of the business entity I'm retrieving paged data for, according to 3 filter criterion: IsDev, IsRead, and IsResolved. ICriteria crit = CurrentSession.CreateCriteria(typeof (SessionError)) .Add(Restrictions.Eq("WebApp", this)); if (isDev.HasValue) crit.Add(Restrictions.Eq("IsDev", isDev.Value)); if (isRead.HasValue) crit.Add(Restrictions.Eq("IsRead", isRead.Value)); if (isResolved.HasValue) crit.Add(Restrictions.Eq("IsResolved", isResolved.Value)); // Order by most recent crit.AddOrder(Order.Desc("DateCreated")); // Copy the ICriteria query to get a row count as well ICriteria critCount = CriteriaTransformer.Clone(crit) .SetProjection(Projections.RowCountInt64()); critCount.Orders.Clear(); // NOW add the paging vars to the original query crit = crit .SetMaxResults(pageSize) .SetFirstResult(pageNum_oneBased * pageSize); // Set up a multi criteria to get your data in a single trip to the database IMultiCriteria multCrit = CurrentSession.CreateMultiCriteria() .Add(crit) .Add(critCount); // Get the results IList results = multCrit.List(); List sessionErrors = new List (); foreach (SessionError sessErr in ((IList)results[0])) sessionErrors.Add(sessErr); numResults = (long)((IList)results[1])[0]; So I create my base criteria, with optional restrictions. Then I CLONE it, and add a row count projection to the CLONED criteria. Note that I clone it before I add the paging restrictions. Then I set up an IMultiCriteria to contain the original and cloned ICriteria objects, and use the IMultiCriteria to execute both of them. Now I have my paged data from the original ICriteria (and I only dragged the data I need across the wire), and also a raw count of how many actual records matched my criteria (useful for display or creating paging links, or whatever). This strategy has worked well for me. I hope this is helpful.
