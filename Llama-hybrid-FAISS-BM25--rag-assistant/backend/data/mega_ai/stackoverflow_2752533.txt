[site]: stackoverflow
[post_id]: 2752533
[parent_id]: 2752517
[tags]: 
I don't have the book in front of me, but I'm suspect that quoted sentence isn't really talking about files, directories, or other file system structures. (Note that a partition isn't a file system concept, generally). I think your quoted sentence is really just pointing out something about how the data structures stored in disk blocks are chained together. It means just what it says. Each block (usually 4k, but maybe just 512B) looks very roughly like this: +------------------+------------- . . . . --------------+ | next blk pointer | another 4k - 4 or 8 bytes of stuff | +------------------+------------- . . . . --------------+ The stuff after the next block pointer depends on what's stored in this particular block. From just the sentence given, I can't tell how the code figures that out. With regard to file system structures: A disk is an array of sectors , almost always 512B in size. Internally, disks are built of platters , which are the spinning disk-shaped things covered in rust, and each platter is divided up into many concentric tracks . However, these details are entirely hidden from the operating system by the ATA or SCSI disk interface hardware. The operating system divides the array of sectors up into partitions . Partitions are contiguous ranges of sectors, and partitions don't overlap. (In fact this is allowed on some operating systems, but it's just confusing to think about.) So, a partition is also an array of sectors . So far, the file system isn't really in the picture yet. Most file systems are built within a partition. The file system usually has the following concepts. (The names I'm using are those from the unix tradition, but other operating systems will have similar ideas.) At some fixed location on the partition is the superblock . The superblock is the root of all the file system data structures, and contains enough information to point to all the other entities. (In fact, there are usually multiple superblocks scattered across the partition as a simple form of fault tolerance.) The fundamental concept of the file system is the inode , said "eye-node". Inodes represent the various types of objects that make up the file system, the most important being plain files and directories. An inode might be it's own block, but some file system pack multiple inodes into a single block. Inodes can point to a set of data blocks that make up the actual contents of the file or directory. How the data blocks for a file is organized and indexed on disk is one of the key tasks of a file system. For a directory, the data blocks hold information about files and subdirectories contained within the directory, and for a plain file, the data blocks hold the contents of the file. Data blocks are the bulk of the blocks on the partition. Some are allocated to various inodes (ie, to directories and files), while others are free. Another key file system task is allocating free data blocks as data is written to files, and freeing data blocks from files when they are truncated or deleted. There are many many variations on all of these concepts, and I'm sure there are file systems where what I've said above doesn't line up with reality very well. However, with the above, you should be in a position to reason about how file systems do their job, and understand, at least a bit, the differences you run across in any specific file system.
