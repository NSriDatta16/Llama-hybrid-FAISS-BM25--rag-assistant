[site]: stackoverflow
[post_id]: 291385
[parent_id]: 290779
[tags]: 
What you are experiencing is that tests exert forces on the design. That's actually the reason why TDD is mainly a design strategy - writing the tests forces a better decoupled design, if you pay attention and know how to read the signs. Injecting "helper objects" into classes is in fact a good thing. You shouldn't think of them as helper objects, though. They are regular objects, hopefully at a different level of abstraction. They are basically Strategies, that configure how the details of the higher level algorithms get filled in. (I typically inject them using a constructor, and also provide another constructor that automatically uses the default production implementation, if there is one.) Beware though - mocking can also be overdone, in my experience. Take a look at http://martinfowler.com/articles/mocksArentStubs.html for some interesting thoughts on the topic. Regarding private methods, I don't fully understand what this has to do with your mocking framework - typically, you should mock interfaces, which only have public methods, anyway, which are part of the public contract. Anyway, complex private methods are a code smell, in my opinion - it's a sign that the class probably is taking on too much responsibility, violating the Single Responsibility Principle. Think about on what kind of class it would actually not be a violation of encapsulation to make it public. Moving the method to that class (possibly creating it on the way) is likely going to improve your design in terms of coupling and cohesion.
