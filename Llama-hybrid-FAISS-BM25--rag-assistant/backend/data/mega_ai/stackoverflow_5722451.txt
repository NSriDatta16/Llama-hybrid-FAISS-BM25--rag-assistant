[site]: stackoverflow
[post_id]: 5722451
[parent_id]: 5721700
[tags]: 
It's a COM object. You just need to create it, and pass it interfaces (with enough implementation behind it) it make it work. Explorer (i.e. you) will ask the shell extension to add items to an different HMENUs. Then Explorer (i.e. you) invokes a menu item in response to the user. Fortunately everything in the shell is an interface - so you can pretend to be whatever you want. You just need to read the SDK contract from the other side . Remember : A shell extension doesn't have to be hosted in Explorer . Many aren't. A lot are hosted in the "Save As" dialog from CommCtrl. In your case it's even simpler . Create the COM Object query for its IShellExtInit interface, and call .Initialize . query for its IContextMenu interface call IContextMenu.QueryContextMenu , allowing it to add items to an HMENU call IContextMenu.Invoke Again, a case of reading the contract from the other side. Some pseudo-code: var ClassID: TGUID; unk: IUnknown; shellext: IShellExtInit; dataObject: IDataObject; hkeyProgID: HKEY; contextMenu: IContextMenu; commandInfo: CMINVOKECOMMANDINFO; begin ClassID := ProgIDToClassID('PDFTransformer3.PDFTContextMenu'); unk := CreateComObject(ClassID); shellExt := unk as IShellExtInit; { For shortcut menu extensions, pdtobj identifies the selected file objects, hkeyProgID identifies the file type of the object with focus, and pidlFolder is either NULL (for file objects) or specifies the folder for which the shortcut menu is being requested (for folder background shortcut menus). } shellExt.Initialize( nil, //pidlFolder, null for file objects dataObject, //IDataObject of the selected file hkeyProgID); //HKEY of the file type of the object with focus contextMenu := unk as IContextMenu; contextMenu.QueryContextMenu( menuHandle, //HMENU, A handle to the shortcut menu. The handler should specify this handle when adding menu items. 0, //integer, The zero-based position at which to insert the first new menu item. 100, //The minimum value that the handler can specify for a menu item identifier. 200, //The maximum value that the handler can specify for a menu item identifier. CMF_NORMAL); //optional flags contextMenu.InvokeCommand(commandInfo); That's as far as i get from reading documentation and guessing what to do. Now i have to pee, and go home to play Portal 2
