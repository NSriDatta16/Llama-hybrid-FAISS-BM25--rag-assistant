[site]: stackoverflow
[post_id]: 637828
[parent_id]: 637757
[tags]: 
If you want to do this very well, it will be very hard. In an ideal world your program could look at each keyword and determine it's meaning, thus determining which column it should match. But that takes some ingenuity — natural language recognition. Your example of a search for "Bill Seattle" would require the program to identify "Bill" as a part of a person name, and "Seattle" as a city name. A simple take on that would be to build lists of all known cities and look for keywords there, mark them as city names if found. You could do the same for companies, and then consider all keywords which neither look like cities nor companies to be partial person names. Using this classification building the SQL query should be easy. But I'm pretty confident that a simple process like I described above will be fragile. So unless you employ some more intelligent parsing solutions (check out the example parser from the OpenCalais project for an idea), I recommend the easy way: The easy way would be to do full-text search against all the text-fields of your table, as mentioned above, and ordering the results by ranking — that probably is a good 80-20 solution.
