[site]: stackoverflow
[post_id]: 1870628
[parent_id]: 1870557
[tags]: 
Working is the only kind of project you should be refactoring. If you're fixing bugs, you're changing the behavior, and refactoring is explicitly about not changing behavior. But working has different definitions. The good one - the useful one for refactoring - is well-unit-tested. If you've got good test coverage ( automated tests!), you're ready to refactor. If you don't... Read Michael Feathers' Working Effectively with Legacy Code . Nibble away at the code. Pick a WTF that particularly offends you, and test the hell out of it, with automated unit tests. Then replace the WTF with something reasonable, ensuring that the tests continue to pass. Lather, rinse, repeat. Refactor the low-hanging fruit.
