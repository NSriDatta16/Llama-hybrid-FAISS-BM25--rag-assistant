[site]: stackoverflow
[post_id]: 3097320
[parent_id]: 
[tags]: 
Dealing nested transactions using NHibernate in Sharp Architecture

I would like to know how to deal with nested transactions e.g. Between one begin and commit, I have another begin and commit. The reason I am asking you is because in my ApplicationServices project I have services that depends on other services. And a method of a parent service begins a transaction and depending upon some logic, it might have to call one of the methods of the dependent child services, that also in turn perform begin and commit. The Child services method are also being used independently as well directly from the controllers, therefore I have to use begin and commit in the child services. So in short, basically I will end up having something like this using( Repository1.DbContext.BeginTransaction() ) { try { ..... ..... using( Repository2.DbContext.BeginTransaction() ) { try { ..... ..... Repository2.DbContext.CommitTransaction() } catch { Repository2.DbContext.RollBack(); throw; } } Repository1.DbContext.CommitTransaction() } catch { Repository1.DbContext.RollBack(); throw; } } So there are nested begins and commits. I would like to know -what would be the behavior, when the nested Repository2 gets committed successfully but the parent Repository1 is rollbacked ? How can I control this behavior in code e.g. -if I don't want to make child transaction part of the parent transaction. -how to figure out wether a transaction is already running before creating a child transaction or if there is another elegant solution to this problem? Thanks Nabeel
