[site]: stackoverflow
[post_id]: 411746
[parent_id]: 
[tags]: 
RubyOnRails 2.2 + Jquery UI Sortable & AJAX: This is how I did it. Is there a better way?

In a Rails 2.2 project, I'm having users put together a list of projects into a portfolio object (i.e.: PortfolioHasManyProjects ). On the page is a Rails form for regular text, titles etc., as well as 2 sortable lists; the lists are used for dragging projects from the global-project-list into your portfolio-project-list. It is similar to what's done here: http://ui.jquery.com/latest/demos/functional/#ui.sortable . I have the portfolio list (#drag_list) updating on change and submitting its serialized data through an AJAX call. This is done in the application.js file: jQuery.ajaxSetup({ 'beforeSend': function(xhr) {xhr.setRequestHeader("Accept", "text/javascript")} }) jQuery.fn.submitDragWithAjax = function() { this.submit(function() { $.post(this.action, $("#drag_list").sortable('serialize'), null, "script"); return false; }) return this; }; $(document).ajaxSend(function(event, request, settings) { if (typeof(AUTH_TOKEN) == "undefined") return; // settings.data is a serialized string like "foo=bar&baz=boink" (or null) settings.data = settings.data || ""; settings.data += (settings.data ? "&" : "") + "authenticity_token=" + encodeURIComponent(AUTH_TOKEN); }); /-------------------------------------------/ $(document).ready(function(){ $(".ajax_drag").submitDragWithAjax(); $("#drag_list").sortable({ placeholder: "ui-selected", revert: true, connectWith:["#add_list"], update : function () { $("#drag_list").submit(); } }); $("#add_list").sortable({ placeholder: "ui-selected", revert: true, connectWith:["#drag_list"] }); Here is where things got tricky. I wasn't sure how to deal with the serialized data and have it submit with the form to the controller in the new.html.erb file. So what I did was have the new.js.erb insert hidden form fields into new.html.erb with the data that I would extract in the controller. here's the new.js.erb: $("#projects").html(""); $("#projects").append(" ] value= />"); which edits new.html.erb: New portfolio The List All Available Projects "projects/add_list" %> Projects currently in your new portfolio "projects/drag_list" %> Portfolio details Portfolio Name URL Details The form then submits to the create method in the portfolio controller: def new @projects = Project.find(:all) @portfolio = Portfolio.new respond_to do |format| format.html # new.html.erb format.xml { render :xml => @portfolio } format.js end end def create @portfolio = Portfolio.new(params[:portfolio]) proj_ids = params[:proj] @portfolio.projects = [] @portfolio.save proj_ids.each {|key, value| puts "Key:#{key} , Value:#{value} " } proj_ids.each_value {|value| @portfolio.projects "index" } format.xml { render :xml => @portfolio, :status => :created, :location => @portfolio } else format.html { render :action => "new" } format.xml { render :xml => @portfolio.errors, :status => :unprocessable_entity } end end end So finally my question: Is this a proper way of doing this? For some reason I feel it isn't, mostly because doing everything else in Rails seemed so much easier and intuitive. This works, but it was hell to get it to. There has to be a more elegant way of sending serialized data to the controller through AJAX calls. How would I call for different AJAX actions on the same page? Let's say I had a sortable and an autocomplete AJAX call, could I have a sortable.js.erb and autocomplete.js.erb and call them from any file? I'm not sure how to setup the controllers to respond to this.
