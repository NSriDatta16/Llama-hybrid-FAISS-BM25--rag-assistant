[site]: stackoverflow
[post_id]: 2735261
[parent_id]: 2732845
[tags]: 
I worked on a team that created an FPU (hardware design) that passed testfloat level 3 for single, double, and extended precision. There are many bad fpus out there, mostly patched in software if they can catch the instruction or exception, that kind of thing. I think the testfloat guy said the primary fpu errors are in the int to float and float to int conversions, I remember the pentium 4 failed for that reason. The pentium III I had passed testfloat though. I have not tried it in a while, dont know what the state of these multicore processors is. Dont be fooled into thinking that the pentium I was the only one with errors, almost all, certainly the bigger named companies, have fpu errors. IEEE 754 is a horrible standard, getting an fpu to meet that standard is very difficult and very expensive, after that experience I avoid floating point math as much as possible. compilers and c libraries (atof, ftoa, strtod, printf, etc) are are part of the problem, not just the hardware. single precision float has only 23 bits of mantissa, you are going to start throwing away pennies or dollars or thousands of dollars often. With or without rounding. The rounding should average out if the data is random enough gain a penny here lose a penny there. If the items being tracked are always in some fixed size or a limited of number of units. say widgets at 9.99 or two for 15.99 then the randomness goes away and rounding as well as the mantissa will cost someone in accuracy, either the company or the customers. Sure there are probably lots of numbers between 0.00 and 0.99 that you cannot represent, if you are dealing with small quantities you will be into the rounding sooner rather than later. Using floats for money is just a bad idea, perhaps you are looking for ammo to change that? We had a motor controller that was driven by software that used a single precision fpu, there was one section of the control algorithm that the constants had to add up to 1.0, I didnt know this rule, I simply let a C program compute the constants. We had to adjust the lsbit of the mantissa on one of the constants by hand to get the motor controller to stabilise.
