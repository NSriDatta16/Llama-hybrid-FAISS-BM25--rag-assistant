[site]: stackoverflow
[post_id]: 3041564
[parent_id]: 3040000
[tags]: 
Since a read-modify-write operation against hardware always is a huge risk to do in several instructions, most processors offer an instruction to manipulate a register/memory with one single instruction that can't be interrupted. Depending on what type of register you are manipulating, it could change during your modify phase and then you would write back a false value. I would recommend as dwelch suggest to write your own read-modify-write function in assembly if this is critical. I have never heard of a compiler that optimizes a type (doing a type conversion with purpose to optimize). If it is declared as an int32 it is always a int32 and will always be aligned right in memory. Check your compiler documentation to see how the various optimizations work. I think I know where your concern comes from, structures. Structures are usually padded to the optimal alignment. This is why you need to wrapp a #pragma pack() around them to get them byte aligned. You can just single step through the assembly and then you will see how the compiler translated your code. I'm pretty sure it has not changed your type.
