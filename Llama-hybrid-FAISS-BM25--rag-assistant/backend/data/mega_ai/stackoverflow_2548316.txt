[site]: stackoverflow
[post_id]: 2548316
[parent_id]: 2548128
[tags]: 
Program specialization is the process of specializing a program when you know in advance what are the arguments you're going to have. One example is if you have a test and you know that with your arguments, you're never going to enter the block, you can eliminate the test. You create a specialized version of the program for a certain kind of input. Basically, it helps to get rid off useless with your input. However, with the modern architectures and compilers (at least in C), you're not going to win a lot in terms of performance. From the same authors, i would recommend the Tempo work. EDIT From the Toplas paper: Program specialization is a program transformation technique that optimizes a pro- gram fragment with respect to information about a context in which it is used, by generating an implementation dedicated to this usage context. One approach to automatic program specialization is partial evaluation, which performs aggressive inter-procedural constant propagation of values of all data types, and performs constant folding and control-flow simplifications based on this information [Jones et al. 1993]. Partial evaluation thus adapts a program to known (static) informa- tion about its execution context, as supplied by the user (the programmer). Only the program parts controlled by unknown (dynamic) data are reconstructed. Par- tial evaluation has been extensively investigated for functional languages [Bondorf 1990; Consel 1993], logic languages [Lloyd and Shepherdson 1991], and imperative languages [Andersen 1994; Baier et al. 1994; Consel et al. 1996].
