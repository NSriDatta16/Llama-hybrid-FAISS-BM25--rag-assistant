[site]: stackoverflow
[post_id]: 402397
[parent_id]: 402364
[tags]: 
Functions are the first-class objects in Python therefore you can pass them as arguments to other functions as you would with any other object such as string or an integer. There is no single-precision floating point type in Python. Python's float corresponds to C's double . def process(anobject): if isinstance(anobject, basestring): # anobject is a string fun = process_string elif isinstance(anobject, (float, int, long, complex)): # anobject is a number fun = process_number else: raise TypeError("expected string or number but received: '%s'" % ( type(anobject),)) return fun(anobject) There is functools.singledispatch that allows to create a generic function: from functools import singledispatch from numbers import Number @singledispatch def process(anobject): # default implementation raise TypeError("'%s' type is not supported" % type(anobject)) @process.register(str) def _(anobject): # handle strings here return process_string(anobject) process.register(Number)(process_number) # use existing function for numbers On Python 2, similar functionality is available as pkgutil.simplegeneric() . Here's a couple of code example of using generic functions: Remove whitespaces and newlines from JSON file Make my_average(a, b) work with any a and b for which f_add and d_div are defined. As well as builtins
