[site]: crossvalidated
[post_id]: 60608
[parent_id]: 53135
[tags]: 
Consider the problem as a Markov chain with states for: 0, 1, ..., 7 heads at the end of the string, and a state for 8 heads seen in a row. Design the transition matrix such that seeing a tail with probability half sends you back to state 0, and otherwise with probability half advances you to the next state (the final state is an absorbing state). Raise this matrix to the $n$th power. The value in the first row, and last column is the probability of seeing 8 heads in a row. In Python: import numpy as np a = np.zeros((9, 9)) for i in range(8): a[i, 0] = a[i, i + 1] = 0.5 a[8, 8] = 1.0 print(np.linalg.matrix_power(a, 100)[0, 8]) gives 0.170207962419. Using the Fraction type gives an exact answer of 6742632053880245534447059849/39614081257132168796771975168.
