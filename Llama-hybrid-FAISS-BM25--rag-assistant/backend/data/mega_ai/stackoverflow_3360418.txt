[site]: stackoverflow
[post_id]: 3360418
[parent_id]: 3360304
[tags]: 
Programming is about writing software for business use. The more we can focus on business logic and presentation and less with technicalities that only matter at certain points in time (when software goes down, when software needs upgrading, etc), the better. Recently I read about talks of scalability from a Reddit founder, from here , and one line of him that caught my attention was this: "Having to deal with the complexities of relational databases (relations, joins, constraints) is a thing of the past." From what I have watched, maintaining a complex database schema, when it comes to scalability, becomes a major pain as the site grows (you add a field, you reassign constraints, re-map foreign keys...etc). It was not entirely clear to me as to why is that. They're not using a NOSQL database though, they're in Postgres. Add to that, here comes ORM, another layer of abstraction. It simplifies code writing, but almost often at a performance penalty. For me, a simple database abstraction library will do, much like lightweight AR libs out there together with database-specific "plain text" queries. I can't show you any benchmark but with the ORMs I have seen, most of them say that "ORM can often be slow". Richard covers both sides of the coin, so I agree with him. As for the fields, I really don't quite get the context of the "fields" you are asking about.
