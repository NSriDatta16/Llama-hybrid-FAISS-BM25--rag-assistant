[site]: stackoverflow
[post_id]: 5677097
[parent_id]: 
[tags]: 
Can anyone explain this paragraph of the current C++0x standard draft?

Can anyone explain this statement from ISO N3242 ยง3.3.3, 2nd point The potential scope of a function parameter name (including one appearing in lambda-declarator) or of a function-local predefined variable in a function definition (8.4) begins at its point of declaration. If the function has a function-try-block the potential scope of a parameter or of a function-local predefined variable ends at the end of the last associated handler, otherwise it ends at the end of the outermost block of the function definition. A parameter name shall not be redeclared in the outermost block of the function definition nor in the outermost block of any handler associated with a function-try-block. ISO Standard 2003 says: The potential scope of a function parameter name in a function definition (8.4) begins at its point of declaration. If the function has a function-try-block the potential scope of a parameter ends at the end of the last associated handler, else it ends at the end of the outermost block of the function definition. A parameter name shall not be redeclared in the outermost block of the function definition nor in the outermost block of any handler associated with a function-try-block. What is the actual difference in these statements? Any one explain the above added point in terms of example/program...? I noticed that it belongs to function-local predefined variable what actually he is saying .. there ,regarding this ?
