[site]: stackoverflow
[post_id]: 4840082
[parent_id]: 4840058
[tags]: 
You can use gcc or cpp in dependency mode. For example cpp -MM produces Makefile rules for C files: $ cpp -MM abstract.c abstract.o: abstract.c differ.h overrides.h debug.h settings.h abstract.h \ abstract/posix.h abstract/linux.h misc.h command.h queue.h list.h \ storage.h sqlite3.h You can parse this output to get a list of the included files. cpp works fine with C++ source files, as well, so you should have no problems in that front. You should take care to provide the same preprocessor options as when compiling normally, however. EDIT: Since zip updates files with the same name within an archive, you could use something like this: $ for i in *.c *.cc; do cpp -MM "$i"; done | tr ' ' '\n' | sort -u | grep -v ':$' | xargs -r zip test.zip updating: test2.cc (deflated 61%) adding: greater.c (deflated 38%) adding: test.cc (deflated 61%) adding: yyy.h (stored 0%) adding: zzz.h (stored 0%) $ for i in *.c *.cc; do cpp -MM "$i"; done | tr ' ' '\n' | sort -u | grep -v ':$' | xargs -r zip test.zip updating: test2.cc (deflated 61%) updating: greater.c (deflated 38%) updating: test.cc (deflated 61%) updating: yyy.h (stored 0%) updating: zzz.h (stored 0%) This stores the files that are included in the specified source files, along with the source files themselves, in a zip archive. Note that you have to take care, so that each source file is processed with the correct cpp options.
