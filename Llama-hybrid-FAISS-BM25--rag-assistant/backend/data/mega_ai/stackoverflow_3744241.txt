[site]: stackoverflow
[post_id]: 3744241
[parent_id]: 3743893
[tags]: 
hsh.values.select {|v| v.type == :x}.map(&:value).reduce(:+) / hsh.size I am trying to design an efficient function that can get the average of the values of all of objects of a certain type within the hash Unless I misunderstood what you are trying to say, this is not what the code you posted does. The average value of the :x robots is 21 (there's 3 :x robots, with values 5 , 25 and 35 ; 5 + 25 + 35 == 65 and 65 divided by 3 robots is 21 ), but your code (and mine, since I modeled mine after yours) prints 13 . is there a better way to get only objects of type :x ? Yes. To select elements, use the select method. is there a better way to do this that does not involve looping through the entire hash? No. If you want to find all objects with a given property, you have to look at all objects to see whether or not they have that property. Do you have actual hard statistical evidence that this method is causing your performance bottlenecks?
