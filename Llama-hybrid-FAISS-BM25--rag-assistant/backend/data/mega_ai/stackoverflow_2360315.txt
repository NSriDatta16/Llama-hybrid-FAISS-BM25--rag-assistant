[site]: stackoverflow
[post_id]: 2360315
[parent_id]: 2360200
[tags]: 
A program hangs usually due to two reasons: dead loop inefficient code In a FP language, like F#, it is very rare that you write a dead loop that runs forever. This is my debugging straggle when doing Euler: test each function using small test cases. When you have written a function, test it. It is very unlikely a algorithm works for 1 - 100 and fails at 101 especially when you are using a 'safe' language like F#. estimate the running time of your algorithm. If it is O(n^2), then n=10000 may be the upper limit for your algorithm. In this problem, the answer is over 70M, a brute force O(n^2) algorithm runs forever. And F# interactive provides #time to profile the running behaviors of your program, like running time and number of garbage collections. As Brain said, you need a more efficient NumberOfDivisors implementation: http://en.wikipedia.org/wiki/Euler%27s_totient_function
