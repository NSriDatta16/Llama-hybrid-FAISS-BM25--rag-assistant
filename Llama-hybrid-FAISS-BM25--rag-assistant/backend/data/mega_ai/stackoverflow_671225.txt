[site]: stackoverflow
[post_id]: 671225
[parent_id]: 670948
[tags]: 
The antcontrib VerifyDesign task will help you do what you want: For example, if there are three packages in one source tree * biz.xsoftware.presentation * biz.xsoftware.business * biz.xsoftware.dataaccess and naturally presentation should only depend on business package, and business should depend on dataaccess. If you define your design this way and it is violated the build will fail when the verifydesign ant task is called. For example, if I created a class in biz.xsoftware.presentation and that class depended on a class in biz.xsoftware.dataaccess, the build would fail. This ensures the design actually follows what is documented(to some degree at least). This is especially nice with automated builds So once you have decided how things should be organized you can enforce the requirements at compile time. You also get fine-granied control so you can allow certain cases to break these "rules". So you can allow some cycles. Depending on how you want to do things, you might find that "utils" package makes sense. For the particular case that you cite... I might do something like this: package nn contains Nueron and Connection package nn.neurons contains the subclasses of Nueron Neuron and Connection are both high-level concepts used in the NeuralNetowrk, so putting them all together makes sense. The Neuron and Connection classes can refer to each other while the Connection class has no need to know about the Neuron subclasses.
