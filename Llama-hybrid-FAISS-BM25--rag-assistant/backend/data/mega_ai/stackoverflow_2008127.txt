[site]: stackoverflow
[post_id]: 2008127
[parent_id]: 2007831
[tags]: 
What you're describing sounds a lot like the the kind of thing that enterprise integration patterns solve. In order be distributed, you'd use some kind of messaging system like JMS. In order to listen for events from other protocols, you'd use a Channel Adapter . Your "services" can either be strung together using Pipes and Filters and Message Routers or you could use a Process Manager (often some BPM or Workflow engine). Lightweight Java libraries that support these patterns are things like Apache Camel or Spring Integration or you could use a full Enterprise Service Bus like ServiceMix or Mule. Here's a rough translation of your terms: Main Class - In a full ESB this would be the ESB itself, i.e. the application server. You could write this yourself or you could use an existing ESB or general purpose application server like OSGI. Providers - Channel Adapters. Services - These will be various components. Some may be EIP components like Message Transformers as well as Service Activators or other Channel Adapters.
