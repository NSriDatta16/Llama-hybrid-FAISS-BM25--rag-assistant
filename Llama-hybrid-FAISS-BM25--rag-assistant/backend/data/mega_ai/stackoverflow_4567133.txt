[site]: stackoverflow
[post_id]: 4567133
[parent_id]: 4566999
[tags]: 
Why not use forward declarations? Your example is perfectly ok if you declare X and Y this way: struct Y; struct X { Y func(); }; struct Y { X func(); }; You could put every type declaration into its own header, prepend it by forward declarations of every type used in the declaration and then in the implementation file include all headers of used types. If you forward-declare every type used in the type declaration you no longer need to worry about what file to include first. It doesn't matter. To sum it up: headerA.h #pragma once class B; class A { B b; public: void myfunc(); }; headerB.h #pragma once class A; class B { A a; }; implA.cpp #include "headerA.h" #include "headerB.h" void A::myfunc() { // ... } This way when using type A in unrelated code, you have to include both headerA.h and headerB.h . If you just want to include headerA.h when you use type A, adjust the headers this way: headerA.h #pragma once class B; #include "headerB.h" class A { B b; public: void myfunc(); }; headerB.h #pragma once class A; #include "headerA.h" class B { A a; }; The inclusion guards will take care of the rest.
