[site]: stackoverflow
[post_id]: 4817244
[parent_id]: 
[tags]: 
Django best practices replacing old files with file uploads

In summary, what I'm trying to accomplish here is: To perform transformation over uploaded files' names for organization and security's sake Not to keep old files in storage forever Let's say that you have a Company model which has a logo. Something like class Company(models.Model): name = ... logo = models.FileField(blank=True, null=True) Now, since I'm a bit paranoid and I don't really like the fact that uploaded files get the name given by the (potentially evil) user, I add a upload_to parameter that points to a function that's something like def logo_getfilename(instance, filename): extension = ... # get just the original extension from the file return 'logos/' + str(uuid.uuid4()) + extension Ok, so now only the view is missing! def company_edit(request, ...): company = ... # get the company and stuff if request.method == 'POST': form = CompanyAdminForm(request.POST, request.FILES, instance=company) last_file_path = None if not company.logo is None: last_file_path = company.logo.path # ^^ after calling is_valid(), file_path gets changed to # the would-be-default-behavior if form.is_valid(): # first we write the new file form.save() # now we remove the old one os.unlink(last_file_path) Although this is currently working, I'm not really comfortable with it because I'm using os.unlink() instead of FieldFile.delete() which seems wrong I'm assuming a local filesystem storage I'm still not doing anything against naming collisions (they may still happen) I'm disregarding multiple chunks and assuming that form.save() will deal with everything I'm not considering transactional behavior (previous file should be deleted only after the .save() model changes are commited to the database I feel there are some problems there I don't even know about So to acheive these simple (and not as uncommon as that) goals, what would be your recommendations?
