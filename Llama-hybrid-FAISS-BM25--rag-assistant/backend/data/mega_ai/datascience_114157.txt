[site]: datascience
[post_id]: 114157
[parent_id]: 
[tags]: 
Training and validation accuracy extremely low for Autonomous Lane Navigation via Deep Learning

Using a SmartCar running on RPI4 i collected all the images necessary for training. Training is done using CNN Nvidia's Model with Tensorflow and Python. Took about 900 Images for Up and 800sh for the down run. See sample Image here: The steering log files were also generated with the pictures between -1 and 1 and both saved to Lists. The data was then balanced using samples per Bin to throw away extra images which are only going straight. The following two images before and after balancing the data: In the next step I split the data for Training and Validation: xTrain, xVal, yTrain, yVal = train_test_split(imagesPath, steering, test_size=0.2, random_state=5) print('Total Training Images: ',len(xTrain)) print('Total Validation Images: ',len(xVal)) After using random Augmentation and Preprocessing the Images the following model is created: def createModel(): model = Sequential() model.add(Convolution2D(24, (5, 5), (2, 2), input_shape=(66, 200, 3), activation='elu')) model.add(Convolution2D(36, (5, 5), (2, 2), activation='elu')) model.add(Convolution2D(48, (5, 5), (2, 2), activation='elu')) model.add(Convolution2D(64, (3, 3), activation='elu')) #model.add(Dropout(0.2)) #extra for stability model.add(Convolution2D(64, (3, 3), activation='elu')) #connected fully Layers model.add(Flatten()) #model.add(Dropout(0.2)) model.add(Dense(100, activation = 'elu')) model.add(Dense(50, activation = 'elu')) model.add(Dense(10, activation = 'elu')) #output layer model.add(Dense(1)) model.compile(Adam(lr=0.0001),loss='mse',metrics=['accuracy']) return model model = createModel() And lastly the Training: checkpoint_callback = tensorflow.keras.callbacks.ModelCheckpoint('model.h5', verbose=1, save_best_only=True) history = model.fit_generator(dataGen(xTrain, yTrain, 100, 1), steps_per_epoch=300, epochs=10, validation_data=dataGen(xVal, yVal, 100, 0), validation_steps=200, verbose=1, shuffle=1, callbacks=[checkpoint_callback]) Somehow the Training Accuracy and the Validation accuracy are really low at about 50%. The Augmentation and Preprocessing is done according to Nvidia. The steps I took to solve the issue: Decrease the Number of images from 5000 up to 700 which increased the Train and Validation accuracy to about 69% but even after training for 30 epochs it only improved very slightly. Changed the samples per Bin of data threshold from 300 to 600. This somehow increased the accuracy but the other steering angles were negligible and only going straight 0 was dominant. The resulting Mean Squared Error was 0.098 and $R^2$ value was 73.52% max after all the tweaking. Any suggestions on how to increase the Training and Validation accuracy would be greatly appreciated.
