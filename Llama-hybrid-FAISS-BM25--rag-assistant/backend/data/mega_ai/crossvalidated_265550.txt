[site]: crossvalidated
[post_id]: 265550
[parent_id]: 
[tags]: 
Apply moving average on the indepdentent variable too if its non-equidistant?

Given some XY-data where X is the non-equidistant independent variable and Y the dependent variable. Let say the data comes from a physical experiment. I want to smooth this data using a rolling/smoothing average filter. How should I proceed? What I often do in this case is to apply the same filter on both Y and X, but I'm not sure whether this is statistically correct. I think it's clear that I cannot just apply normal running average on Y alone given the non-uniform spacing of the independent variable. Filtering the independent variable has also the advantage that I can easily use even-sized windows without introducing a lead/lag. As an alternative I think interpolating the data on a regular grid, but like this I feel that as I change the sampling of my data, I actually generate artificial data-points ("measurements") which get the same weight as the actual measurements, which I find strange. So, what is the correct way to apply a filter as e.g. running average in this case? EDIT: One of my reason is the following: In a physical experiment, every variable is an "experiment", so if smooth one variable, I can (should) also smooth the other variable. Because what is dependent and independent is just a point of view... here an example, it's obvious that only smoothing Y gives unreasonable results, whereas smoothing X and Y seems to give represent the original data much better. import numpy as np import matplotlib.pyplot as plt # position x = np.array([1.0,2.0,3.0,4.0,5.0,7.8,8,9,10.0,11.0]) # velocity y = np.array([0.9,4.1,9.5,15.8,25.0,60.4,64.7,81.5,70.4,85.4]) N=3 # window size # convolution with rectangular window (= moving average) y_rm= np.convolve(y, np.ones((N,))/N, mode='valid') x_rm= np.convolve(x, np.ones((N,))/N, mode='valid') plt.plot(x,y,'-o',label="original", lw=2) plt.plot(x[0+(N-1)/2:(x.size-(N-1)/2)],y_rm,'-o',label="smooth Y") plt.plot(x_rm,y_rm,'-o',label="smooth X & Y") plt.grid(True) plt.xlabel("position (m)") plt.ylabel("velocity (m/s)") plt.legend(loc="upper left") plt.show()
