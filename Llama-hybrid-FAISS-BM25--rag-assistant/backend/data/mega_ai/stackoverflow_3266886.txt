[site]: stackoverflow
[post_id]: 3266886
[parent_id]: 
[tags]: 
how to specialize templated member functions of non-templated classes?

suppose I have a file alpha.h: class Alpha { public: template void foo(); }; template<> void Alpha::foo () {} template<> void Alpha::foo () {} If I include alpha.h in more than one cpp file and compile with GCC 4.4, it complains there are multiple definitions of foo and foo across multiple object files. Makes sense to me, so I change the last two lines to: template<> extern void Alpha::foo () {} template<> extern void Alpha::foo () {} But then GCC says: explicit template specialization cannot have a storage class ok... so how am I supposed to do this correctly? I'm worried that C++ doesn't allow what I'm trying to do in the first place, in which case is there a good idiom that will accomplish the same thing?
