[site]: stackoverflow
[post_id]: 2737426
[parent_id]: 2737361
[tags]: 
Roughly speaking, top-down comes from a decomposition of the problem space into sub-problems, while bottom-up comes from organizing parts of the solution space into larger chunks. To be able to effectively use top-down, you need a very solid understanding of the problem, i.e. have solid requirements in hand. For bottom-up to be effective, you need to be solving a 'standard' problem whose pieces are well-known, but where the exact assembly might need some experimentation before you get it right. You should read Parnas' brilliant paper A rational design process and how to fake it for much more on this issue. The answer is: use both, as appropriate. When you're done, make it all look like (in your specifications, design documentation and user documentation) as if you had done everything top-down.
