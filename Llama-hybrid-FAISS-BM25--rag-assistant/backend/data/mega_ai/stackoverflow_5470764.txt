[site]: stackoverflow
[post_id]: 5470764
[parent_id]: 
[tags]: 
libclang parsing generates wrong output

I am trying to build a small parsing program using libclang. The source file to parse (Node.h): #pragma once struct Node { int value; struct Node *next; }; The main program simple invokes the clang parser and walks all elements in the AST: int main(int argc, char *argv[]) { CXIndex index = clang_createIndex(0, 0); const char *filename = "Node.h"; CXTranslationUnit TU = clang_parseTranslationUnit(index, filename, NULL, 0, NULL, 0, CXTranslationUnit_None); CXCursor rootCursor = clang_getTranslationUnitCursor(TU); clang_visitChildren(rootCursor, printVisitor, NULL); clang_disposeTranslationUnit(TU); clang_disposeIndex(index); return 0; } The visitor: CXChildVisitResult printVisitor(CXCursor cursor, CXCursor parent, CXClientData client_data) { CXSourceRange range = clang_getCursorExtent(cursor); CXSourceLocation startLocation = clang_getRangeStart(range); CXSourceLocation endLocation = clang_getRangeEnd(range); CXFile file; unsigned int line, column, offset; clang_getInstantiationLocation(startLocation, &file, &line, &column, &offset); printf("Start: Line: %u Column: %u Offset: %u\n", line, column, offset); clang_getInstantiationLocation(endLocation, &file, &line, &column, &offset); printf("End: Line: %u Column: %u Offset: %u\n", line, column, offset); return CXChildVisit_Recurse; } However, the output shows some weird parts: Start: Line: 99 Column: 9 Offset: 3160 End: Line: 99 Column: 122 Offset: 3273 Kind: A field (in C) or non-static data member (in C++) in a struct. Filename: (null) Where does this come from? When removing the pragma, nothing changes. The same happens with a completely empty header file to parse. Do I have to bypass all found node in the AST until I get a "first statement"- or "first expression"-node?
