[site]: stackoverflow
[post_id]: 3043348
[parent_id]: 3042549
[tags]: 
A programming model must have concurency and/or memory model . For instance Java has threads and this memory model (overview in wikipedia). This clearly belongs to the semantics of the programming language, its specification. Other programming language may have other concurrency abstractions (think of clojure with agents, etc.) or other memory model. The simpler the memory model is, the simpler the language is to use. Inversly, a complicated memory model makes concurrency pretty hard to do right (think of the definition of volatile in Java). So some people argue that programming languages should have no memory model. The actual implementation of the concurrency and/or memory model is up to the implementer of the language. You can use OS process/thread , or the VM can emulate threads (so-called green thread ). There are even other approach to have ultra-light threads , for instance Kilim . However, to really leverage multicore , you must OS threads (one per core), otherwise there is not hardware parallelism. But the "logical" threads used by the program can be scheduled in a lightweight fashion on the N OS threads. To my knowledge, it is not possible to tell the JVM how many OS threads to use to schedule the green threads. If somebody has a pointer for that, it would be interesting. In summary: Multi-threading is a logical concept. An application can be multi-threaded but run on one core. Multicore parallelism is a hardware concept. To leverage mutlicore parallelism, the VM must implement threading so that OS process are used, which will run on different core. EDIT Actually the Java threading and memory model is now described in a dedicated specification JSR-133 , instead of Chapter 17 of the Java Language Specification. More info on JSR-133 FAQ
