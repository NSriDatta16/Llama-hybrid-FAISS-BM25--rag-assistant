[site]: stackoverflow
[post_id]: 530732
[parent_id]: 515608
[tags]: 
Make your Site object an Aggregate Root to encapsulate the complex association and ensure consistency. Then create a SiteRepository that has the responsibility of retrieving the Site aggregate and populating its children (including all Pages). You will not need a separate PageRepository (assuming that you don't make Page a separate Aggregate Root), and your SiteRepository should have the responsibility of retrieving the Page objects as well (in your case by using your existing Mappers). So: $siteRepository = new SiteRepository($myDbConfig); $site = $siteRepository->findById(1); // will have Page children attached And then the findById method would be responsible for also finding all Page children of the Site. This will have a similar structure to the answer CodeMonkey1 gave, however I believe you will benefit more by using the Aggregate and Repository patterns, rather than creating a specific Service for this task. Any other retrieval/querying/updating of the Site aggregate, including any of its child objects, would be done through the same SiteRepository. Edit: Here's a short DDD Guide to help you with the terminology, although I'd really recommend reading Evans if you want the whole picture.
