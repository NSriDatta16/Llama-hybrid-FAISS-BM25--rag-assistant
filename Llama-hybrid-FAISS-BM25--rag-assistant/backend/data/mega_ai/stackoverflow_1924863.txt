[site]: stackoverflow
[post_id]: 1924863
[parent_id]: 
[tags]: 
Nested complex-type elements never get populated when calling AXIS-based web service from .NET

I've been trying for a couple of days now to get a .NET client working fully with a Web Server provided by my Coldfusion-based web app. I'm not a .NET developer, per se, but I happen to have a copy of VS 2003, which seems like it should do the trick. I can use a simple multiplier() method in my web service that takes two numbers and returns a number, so simple types are working fine. It's the complex types that are killing me. I'm basically trying to return an associative array from a method called get_struct(). I get an object of type Map back, but the property (called item), which is supposed to be an array with two elements (of type mapItem) always has an "undefined value". Here's the WSDL that is generated by ColdFusion: This is a collection of test methods to allow remote developers to evaluate datatype support, etc in their programming environment. The WSDL endpoint for this web service is [YOUR PEERFOCUS SITE]/remote_api/pfapi/v/trunk/remote_io_test.cfc?wsdl and here's the web service stub generated when I add a web reference in VS: //------------------------------------------------------------------------------ // // This code was generated by a tool. // Runtime Version: 1.1.4322.2443 // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // //------------------------------------------------------------------------------ // // This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2443. // namespace pfapi_test.remote_io_test { using System.Diagnostics; using System.Xml.Serialization; using System; using System.Web.Services.Protocols; using System.ComponentModel; using System.Web.Services; /// [System.Diagnostics.DebuggerStepThroughAttribute()] [System.ComponentModel.DesignerCategoryAttribute("code")] [System.Web.Services.WebServiceBindingAttribute(Name="remote_io_test.cfcSoapBinding", Namespace="http://trunk.v.pfapi.remote_api")] [System.Xml.Serialization.SoapIncludeAttribute(typeof(QueryBean))] [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFCInvocationException))] public class remote_io_testService : System.Web.Services.Protocols.SoapHttpClientProtocol { /// public remote_io_testService() { this.Url = "http://leon.cupahr.tafkan.nooch/remote_api/pfapi/v/trunk/remote_io_test.cfc"; } /// [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://trunk.v.pfapi.remote_api", ResponseNamespace="http://trunk.v.pfapi.remote_api")] [return: System.Xml.Serialization.SoapElementAttribute("multiplierReturn")] public System.Double multiplier(System.Double factor1, System.Double factor2) { object[] results = this.Invoke("multiplier", new object[] { factor1, factor2}); return ((System.Double)(results[0])); } /// public System.IAsyncResult Beginmultiplier(System.Double factor1, System.Double factor2, System.AsyncCallback callback, object asyncState) { return this.BeginInvoke("multiplier", new object[] { factor1, factor2}, callback, asyncState); } /// public System.Double Endmultiplier(System.IAsyncResult asyncResult) { object[] results = this.EndInvoke(asyncResult); return ((System.Double)(results[0])); } /// [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://trunk.v.pfapi.remote_api", ResponseNamespace="http://trunk.v.pfapi.remote_api")] [return: System.Xml.Serialization.SoapElementAttribute("get_structReturn")] public Map get_struct() { object[] results = this.Invoke("get_struct", new object[0]); return ((Map)(results[0])); } /// public System.IAsyncResult Beginget_struct(System.AsyncCallback callback, object asyncState) { return this.BeginInvoke("get_struct", new object[0], callback, asyncState); } /// public Map Endget_struct(System.IAsyncResult asyncResult) { object[] results = this.EndInvoke(asyncResult); return ((Map)(results[0])); } /// [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://trunk.v.pfapi.remote_api", ResponseNamespace="http://trunk.v.pfapi.remote_api")] [return: System.Xml.Serialization.SoapElementAttribute("struct_keycountReturn")] public System.Double struct_keycount(Map theStruct) { object[] results = this.Invoke("struct_keycount", new object[] { theStruct}); return ((System.Double)(results[0])); } /// public System.IAsyncResult Beginstruct_keycount(Map theStruct, System.AsyncCallback callback, object asyncState) { return this.BeginInvoke("struct_keycount", new object[] { theStruct}, callback, asyncState); } /// public System.Double Endstruct_keycount(System.IAsyncResult asyncResult) { object[] results = this.EndInvoke(asyncResult); return ((System.Double)(results[0])); } } /// [System.Xml.Serialization.SoapTypeAttribute("Map", "http://xml.apache.org/xml-soap")] public class Map { /// public mapItem[] item; } /// [System.Xml.Serialization.SoapTypeAttribute("mapItem", "http://xml.apache.org/xml-soap")] public class mapItem { /// public object key; /// public object value; } /// [System.Xml.Serialization.SoapTypeAttribute("QueryBean", "http://rpc.xml.coldfusion")] public class QueryBean { /// public string[] columnList; /// public object[] data; } /// [System.Xml.Serialization.SoapTypeAttribute("CFCInvocationException", "http://rpc.xml.coldfusion")] public class CFCInvocationException { } } And finally, my CLI app that tests the service: using System; namespace pfapi_test { /// /// Summary description for Class1. /// class Class1 { /// /// The main entry point for the application. /// [STAThread] static void Main(string[] args) { // // TODO: Add code to start application here // Console.WriteLine("Instantiating WS"); remote_io_test.remote_io_testService testWS = new remote_io_test.remote_io_testService(); Console.WriteLine("Calling multiplier(3,15)"); Console.WriteLine(testWS.multiplier(3,15)); Console.WriteLine("Calling get_struct()"); remote_io_test.Map theStruct = testWS.get_struct(); Console.Write("result: "); Console.WriteLine(theStruct); Console.Write("result.item: "); Console.WriteLine(theStruct.item); Console.WriteLine("Press Enter to exit..."); Console.ReadLine(); } } } No matter what I try, theStruct.item is always "undefined value" according to the debugger. The printed output looks like: Instantiating WS Calling multiplier(3,15) 45 Calling get_struct() result: pfapi_test.remote_io_test.Map result.item: Press Enter to exit... I've tried using ColdFusion 8, and there's no difference. I've tried returning a real custom database with two properties instead of my ad-hoc associative array, and that works fine, but rewriting my API to avoid associative arrays isn't really an option at this time. The API works fine with ColdFusion, PHP/NuSOAP, and Ruby on Rails, so it seems like it should be possible to get it working with .NET as well. I hope someone can provide some insight. I have the suspicion that there's some kind of namespace issue here, but I don't know SOAP and XML well enough to figure out what it is. I've also searched like mad for a solution online, but I haven't found a single person who's solved this problem, which is very disheartening! Request: POST /remote_api/pfapi/v/trunk/remote_io_test.cfc HTTP/1.1 VsDebuggerCausalityData: [snip] User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; MS Web Services Client Protocol 1.1.4322.2443) Content-Type: text/xml; charset=utf-8 SOAPAction: "" Content-Length: 488 Expect: 100-continue Host: leon.cupahr.tafkan.nooch Response: HTTP/1.1 200 OK Date: Thu, 17 Dec 2009 15:14:33 GMT Server: Apache/2.2.11 (Unix) mod_ssl/2.2.11 OpenSSL/0.9.7l DAV/2 PHP/5.2.8 JRun/4.0 Phusion_Passenger/2.2.7 Set-Cookie: CFID=21543;expires=Sat, 10-Dec-2039 15:14:33 GMT;path=/ Set-Cookie: CFTOKEN=479cc311ca4875db-9D346355-ED36-6183-C8895635E4EE1252;expires=Sat, 10-Dec-2039 15:14:33 GMT;path=/ Transfer-Encoding: chunked Content-Type: text/xml; charset=utf-8 FOO bar ANOTHERKEY another value Update: I heard from the .NET developer on the other end, and he's tried all of the following to no avail: using WCF instead of ASMX using .NET 3.5 using VB.NET to communicate with the web service instead of C# He did send me a screenshot of the "Data Type" section of the Service Reference Settings dialog. Is it possible that changing the settings for Collection type and Dictionary collection type might resolve this issue? Update 2: here's the ColdFusion code for remote_io_test.cfc Thanks for reading, and thanks in advance for your replies! Cross-posted at link text
