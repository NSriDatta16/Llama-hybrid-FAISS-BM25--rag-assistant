[site]: stackoverflow
[post_id]: 4670100
[parent_id]: 4645706
[tags]: 
More important than learning an assembler, learn at least two. There is a wide variety in existing architectures, and knowing several assemblies looks like a good way to avoid making over-generalized assumptions. Many assembly courses use MIPS. The MIPS instruction set is simple, and the high-end PIC microcontrollers (from Microchip) use it. MIPS processors are commonly found in home routers. OpenWRT is a replacement firmware for many such home routers, based on Linux. An OpenWRT-compatible router costs 50$ and is a cheap and easy way to enter the world of embedded systems. Many mobile platforms, in particular mobile phones, use ARM processors (actually, all smartphones and tablets use an ARM derivative, but I read that about 15% of the cheap, non-smart phones still use something else, usually a MIPS). The ARM platform is a bit complex; there are several instruction sets (original 26-bit ARM, 32-bit ARM, Thumb, Thumb-2), and several call conventions (ATPCS, AAPCS...). ARM-based development kits can be bought from several vendors, e.g. Gumstix . There are a few ARM-based routers on which OpenWRT runs, but they are much less common than MIPS-based routers. The automobile and airplane industries seem to be quite fond of PowerPC processors for their embedded systems. Also, the current major game consoles all use the PowerPC architecture (PS3, Xbox 360, Wii). For a PowerPC development platform, I recommend buying an old Mac, e.g. on Ebay or from a refurbished computer dealer. There are pointers from Low End Mac ; look for a machine with a G3 or a G4. I bought a G3-based "clamshell" iBook for 60$ on Ebay; with NetBSD on it, this is a perfect PowerPC-based development platform. The x86 CPU, as found in any PC, should be studied as well, if only because it is so prevalent. The machine your are using, bet it a PC or a post-2005 Mac, is your development platform, so that's cheap (you already have the hardware). The instruction set is "inelegant". Do not learn it as your first assembly, but have a look at it for your second or third. Every other year or so, x86 processor develop a new set of additional instructions, so now they have hundreds of those, which can be quite overwhelming; I recommend beginning with the instructions for the original 80386 . Some other architectures have been used and are still used for embedded products, e.g. the 68000, but they are rarer. Note that I talk here about the "big" embedded products. There are also smaller systems with architectures such as AVR, pre-MIPS PIC, 80C51... It depends on whether, when you say "embedded", you think "home router" or "programmable toaster". Anyway, I also recommend using QEMU . QEMU is a software emulator. It is able to run a fully functional virtual ARM or MIPS-based machine, complete with operating system (e.g. a Debian Linux ), on a basic PC. It will not help you for timing-related optimization, but it makes development and correction testing much easier.
