[site]: stackoverflow
[post_id]: 3886949
[parent_id]: 3886907
[tags]: 
I'd suggest adding the function to convert to HTML type to each class. So you'd have a virtual Convert function as a member of Sprite and each derived class can override it. Then when you call the Convert function on your list of Sprite * s, it will call the appropriate converter. You'll need to forward declare the return type ( HTMLSprite ). There are probably more elegant ways, but this idea allows you to use virtual functions. The problem with your suggestion is that the pointers in the array are all type Sprite * regardless of what they actually point to, so a Sprite * is what will be passed to your function. Instead, use something like mem_fun to make a struct that will call the member; this will call the appropriate function through a virtual call: std::transform(sprites.begin (), sprites.end (), html.begin (), mem_fun(&Sprite::Convert)); Comment if you need me to clarify anything.
