[site]: stackoverflow
[post_id]: 508356
[parent_id]: 
[tags]: 
Determining allowable moves on a grid

Can anyone suggest a suitable way of figuring out a pieces allowable moves on a grid similar to the one in the image below. Assuming piece1 is at position a1 and piece2 is at position c3, how can I figure out which grid squares are allowable moves if piece1 can move (say) 3 squares and piece2 can move 2? I've spent way too long developing text based MUDS it seems, I simply can't get my brain to take the next step into how to visualise potential movement even in the most simple of situations. If it matters, I'm trying to do this in javascript, but to be perfectly honest I think my failure here is a failure to conceptualise properly - not a failure in language comprehension. Update - I'm adding the first round of code written after the below responses were posted. I thought it might be useful to people in a similar situation as me to see the code It's sloppy and it only works for one item placed on the board so far, but at least the check_allowable_moves() function works for this initial run. For those of you wondering why the hell I'm creating those weird alphanumeric objects rather than just using numeric x axis and y axis - it's because an id in HTML can't start with a number. In fact pretending I could use numbers to start ids helped a great deal in making sense of the functionality and concepts described by the fantastic answers I got. Test page #chessboard { clear: both; border:solid 1px black; height: 656px; width:656px; /*width = 8*40 + 16 for border*/ } #chessboard .row { overflow: auto; clear: both; } #chessboard .row span { display: block; height: 80px; width: 80px; float: left; border:solid 1px black; } .allowable { background: blue; } google.load("jquery", "1.2.6"); google.load("jqueryui", "1.5.3"); $(document).ready(function() { (function() { var global = this; global.Map = function(container) { function render_board() { var max_rows = 8; var cols = new Array('a','b', 'c', 'd', 'e', 'f', 'g', 'h'); var jqMap = $(' '); jqMap.attr('id', 'chessboard'); var x=0; for(x; x '); jqRow.addClass('row'); var i=0; for(i; i '); jqCol.attr('id', cols[i]+(x+1)); jqCol.addClass(cols[i]); jqRow.append(jqCol); } jqMap.append(jqRow); } $('#'+container).append(jqMap); } function add_piece(where, id) { var jqPiece = $(' MY PIECE'+id+' '); var jqWhere = $('#'+where); jqPiece.attr('id', 'piece-'+id); jqPiece.addClass('army'); jqPiece.draggable({cursor: 'move', grid:[82, 82], containment: '#chessboard', revert: 'invalid', stop: function(ev, ui) { //console.log(ev.target.id); } }); jqWhere.append(jqPiece); check_allowable_moves(where); } function check_allowable_moves(location) { var x_axis = { 'a':1,'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8 }; var x_axis_alpha = { 1:'a',2:'b', 3:'c', 4:'d', 5:'e', 6:'f', 7:'g', 8:'h' }; $('.allowable').droppable("destroy"); $('.allowable').removeClass('allowable'); //get the x,y values of the piece just placed var x = parseInt(x_axis[location[0]], 10); var y = parseInt(location[1], 10); var x_min = x-2; var y_min = y-2; for(x_min; x_min
