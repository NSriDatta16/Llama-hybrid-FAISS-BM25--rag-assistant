[site]: crossvalidated
[post_id]: 214955
[parent_id]: 
[tags]: 
Bag of Features / Visual Words + Locality Sensitive Hashing

PREMISE: I'm really new to Computer Vision/Image Processing and Machine Learning (luckily, I'm more expert on Information retrieval), so please be kind with this filthy peasant! :D MY APPLICATION: We have a mobile application where the user takes a photo (the query ) and the system returns the most similar picture thas was previously taken by some other user (the dataset element ). Time performances are crucial, followed by precision and finally by memory usage. MY APPROACH: First of all, it's quite obvious that this is a 1-Nearest Neighbor problem (1-NN). LSH is a popular, fast and relatively precise solution for this problem. In particular, my LSH impelementation is about using Kernalized Locality Sensitive Hashing to achieve a good precision to translate a d -dimension vector to a s -dimension binary vector (where s ) and then use Fast Exact Search in Hamming Space with Multi-Index Hashing to quickly find the exact nearest neighbor between all the vectors in the dataset (transposed to hamming space). In addition, I'm going to use SIFT since I want to use a robust keypoint detector&descriptor for my application. WHAT DOES IT MISS IN THIS PROCESS? Well, it seems that I already decided everything, right? Actually NO : in my linked question I face the problem about how to represent the set descriptor vectors of a single image into a vector . Why do I need it? Because a query/dataset element in LSH is vector, not a matrix (while SIFT keypoint descriptor set is a matrix). As someone suggested in the comments , the commonest (and most efficient) solution is using the Bag of Features (BoF) model, which I'm still not confident with yet. So, I read this article , but I have still some questions (see QUESTIONS below)! QUESTIONS: First and most important question: do you think that this is a reasonable approach? Is k-means used in the BoF algorithm the best choice for such an application? What are alternative clustering algorithms? The dimension of the codeword vector obtained by the BoF is equal to the number of clusters (so k parameter in the k -means approach)? If 2. is correct, bigger is k then more precise is the BoF vector obtained? There is any "dynamic" k-means? Since the query image must added to the dataset after the computation is done (remember: the dataset is formed by the images of all submitted queries) the cluster can change in time. Given a query image, is the process to obtain the codebook vector the same as the one for a dataset image, e.g. we assign each descriptor to a cluster and the i-th dimension of the resulting vector is equal to the number of descriptors assigned to the i-th cluster?
