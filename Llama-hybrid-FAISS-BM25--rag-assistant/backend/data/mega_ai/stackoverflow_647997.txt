[site]: stackoverflow
[post_id]: 647997
[parent_id]: 647988
[tags]: 
The easiest way to modify it is to create an array for your storage, and then copy the string into it. For example: char buf[128]; const char *src = "Hello World"; strncpy(buf, src, 127); // one less - we always 0-terminate buf[127] = '\0'; // you can now modify buf buf[0] = 'W'; The reason your code doesn't work is that you haven't allocated any memory for the copy of the string - you've just made a second pointer to the same read-only memory. (And then tried to copy it? I'm not quite sure what the rest of the code is doing.) You need to get some non-read-only memory somewhere, and it's much easier to use the standard library to copy it into that new memory, rather than writing the loop yourself. In the case when you don't know the length of the string beforehand, you can also use malloc (or, even better, do what drschnz's answer says and use new char[] ): const char *src = "Hello world"; char *buf = malloc(strlen(src) + 1); // or = new char[strlen(src) + 1]; strcpy(buf, src); // you can now modify buf // later, you need to free it free(buf); // or delete [] buf; Also, if you're using C++, you can just use a std::string: std::string myString("Hello world"); myString[0] = "W"; Hope that helps.
