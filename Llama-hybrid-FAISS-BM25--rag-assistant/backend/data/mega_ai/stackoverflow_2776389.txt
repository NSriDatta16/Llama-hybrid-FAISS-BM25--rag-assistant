[site]: stackoverflow
[post_id]: 2776389
[parent_id]: 
[tags]: 
Operator+ for a subtype of a template class

I have a template class that defines a subtype. I'm trying to define the binary operator+ as a template function, but the compiler cannot resolve the template version of the operator+ . #include template struct c { c(other_type v) : cs(v) {} struct subtype { subtype(other_type v) : val(v) {} other_type val; } cs; }; template typename c ::subtype operator+(const typename c ::subtype& left, const typename c ::subtype& right) { return typename c ::subtype(left.val + right.val); } // This one works // c ::subtype operator+(const c ::subtype& left, // const c ::subtype& right) // { return c ::subtype(left.val + right.val); } int main() { c c1 = 1; c c2 = 2; c ::subtype cs3 = c1.cs + c2.cs; std::cerr I think the reason is because the compiler (g++4.3) cannot guess the template type so it's searching for operator+ instead of operator+ . What's the reason for that? What elegant solution can you suggest?
