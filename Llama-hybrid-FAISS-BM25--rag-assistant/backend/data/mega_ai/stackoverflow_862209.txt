[site]: stackoverflow
[post_id]: 862209
[parent_id]: 
[tags]: 
How can I edit immutable objects in WPF without duplicating code?

We have lots of immutable value objects in our domain model, one example of this is a position, defined by a latitude, longitude & height. /// When I grow up I want to be an F# record. public class Position { public double Latitude { get; private set; } // snip public Position(double latitude, double longitude, double height) { Latitude = latitude; // snip } } The obvious way to allow editing of a position is to build a ViewModel which has getters and setters, as well as a ToPosition() method to extract the validated immutable position instance. While this solution would be ok, it would result in a lot of duplicated code, especially XAML. The value objects in question consist of between three and five properties which are usually some variant of X, Y, Z & some auxiliary stuff. Given this, I had considered creating three ViewModels to handle the various possibilities, where each ViewModel would need to expose properties for the value of each property as well as a description to display for each label (eg. "Latitude"). Going further, it seems like I could simplify it to one general ViewModel that can deal with N properties and hook everything up using reflection. Something like a property grid, but for immutable objects. One issue with a property grid is that I want to be able to change the look so I can have labels and textboxes such as: Latitude: [ 32 ] Or put it in a DataGrid such as: Latitude | Longitude | Height 32 115 12 So my question is: Can you think of an elegant way to solve this problem? Are there any libraries that do this or articles about something similar? I'm mainly looking for: Code duplication to be minimized Easy to add new value object types Possible to extend with some kind of validation
