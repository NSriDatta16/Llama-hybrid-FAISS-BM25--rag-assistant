[site]: stackoverflow
[post_id]: 449275
[parent_id]: 449202
[tags]: 
Relations are not hash tables; they are sets. I wouldn't organize the database using the coordinates as the key. What if an object changes location? Instead, I would probably treat coordinates as attributes of an object. Also, I assume there is a fixed number of dimensions, for example, three. If so, then you can store these attributes of an object in fixed columns: CREATE TABLE SpaceQuadrant ( quadrant_id INT NOT NULL PRIMARY KEY, quadrant_name VARCHAR(20) -- other attributes ); CREATE TABLE SpaceObject ( object_id INT NOT NULL PRIMARY KEY, x NUMERIC(9,2) NOT NULL, y NUMERIC(9,2) NOT NULL z NUMERIC(9,2) NOT NULL, object_name VARCHAR(20) NOT NULL, -- other attributes quadrant_id INT NOT NULL, FOREIGN KEY (quadrant_id) REFERENCES SpaceQuadrant(quadrant_id) ); In your object-oriented class, it's not clear why your objects are in a dictionary. You mention accessing them in O(1) time, but why do you do that by coordinate? If you're using that to optimize finding objects that are near a certain point (the player's spaceship, for instance), you could also build into your SQL query that populates this SpaceQuadrant a calculation of every object's distance from that given point, and sort the results by distance. I don't know enough about your program to know if these suggestions are relevant. But are they at least making you think of different ways of organizing the data?
