[site]: stackoverflow
[post_id]: 1559469
[parent_id]: 1559165
[tags]: 
The STL didn't initially include a hash table among the containers as hash tables are more complex - you have to choose between open and closed addressing, not to mention the hash function, etc. At the time, Stepanov and Stroustrup were trying to speed up progress on it so that it was quickly accepted into the standard. Trees on the other hand, are relatively simpler. It was already known that since these are in-memory data structures, we can just use a binary tree instead of a B-tree. Then it was a choice between AVL and RB trees. RB trees tend to be chosen due to better performance characteristics which I am not in a position to comment on, but the Wikipedia articles on both structures ( AVL and RB ) will tell you more in relatively good detail. Otherwise, trees and hash tables are good for different things. If you need fast inserts or retrievals, and couldn't care about the order they are stored in, hash tables are good. If you need ordering characteristics and strong guarantees on inserts and retrievals, then binary trees are good. Another good rule of thumb is to profile. Since most uses of either would be interface compatible, profiling to see which gives you better performance helps too.
