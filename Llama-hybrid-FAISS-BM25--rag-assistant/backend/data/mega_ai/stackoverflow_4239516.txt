[site]: stackoverflow
[post_id]: 4239516
[parent_id]: 4239454
[tags]: 
What is the point of the declaration class Component; if you include Component.h , anyway? You cannot inherited from an incomplete type, so this declaration makes no sense. A wild guess is circular include issues, but it's really hard to tell without more information. I recommend reading this article on Organizing Code Files in C and C++ if you are unclear on the subject. Edit: Player.addComponent(StaticSprite, new StaticSprite()); You cannot pass the type StaticSprite to a method. That's probably the source of the error. Show us the declaration of addComponent . What is the first parameter type? Edit: void Entity::addComponent(TYPE type, void* component) Okay, so what is the definition of TYPE ? I guess it's just a typedef for int or something? In that case it should be clear that you cannot assign the type StaticSprite to an int . Edit: enum TYPE{Base = 0, StaticSprite, DynamicSprite, Physics, Collision, Input, Particle, Audio, Scriptable, MaxType}; Yep, there you have it. The enumerator TYPE::StaticSprite has absolutely nothing to do with the type StaticSprite , even though they have the same name. Give the enumerator some other name, for example T_StaticSprite , and the following code should work: Player.addComponent(T_StaticSprite, new StaticSprite()); (Whether this whole type enumeration thing is a good idea is a different question.)
