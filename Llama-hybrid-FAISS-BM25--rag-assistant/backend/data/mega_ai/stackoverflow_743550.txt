[site]: stackoverflow
[post_id]: 743550
[parent_id]: 743545
[tags]: 
Try to organize your recursive function to have tail recursion . That is to say, make sure the last operation of your recursive function is the recursive call. By doing this, the compiler can optimize it into simply iterations. Tail recursion will help you because iterations will dramatically decrease the stack space used. With tail recursion, you typically pass your value UP all the way, calculating 1 step at a time. So when the recursion is done, all that needs to be done is to return. Example: Convert the following code: unsigned fact(unsigned x) { if(x == 1) return 1; //--> Not tail recursive, multiply operation after the recursive call return fact(x-1) * x; } To this: unsigned fact(unsigned x) { return tail_fact(x, 1); } unsigned tail_fact(unsigned x, unsigned cur_val) { if(x == 1) return cur_val; return tail_fact(x-1, x * cur_val); }
