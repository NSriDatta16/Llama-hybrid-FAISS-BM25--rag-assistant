[site]: stackoverflow
[post_id]: 4081062
[parent_id]: 4080842
[tags]: 
Keep in mind that .net adheres to " Fusion " as the model for locating libraries (which, in .net, are essentially all dynamically linked). On the Windows platform, native code does not follow the fusion load model. Check the LoadLibraryEx documentation , reading from where it says: The LoadLibraryEx function performs a standard search for modules if the file name is specified without a path and the base file name does not match the base file name of a loaded module, or there is a path specified but LOAD_WITH_ALTERED_SEARCH_PATH is not used. ...and the following paragraphs. The way I have built the C# to C++/CLI, is to have my C# loader check whether it is currently being JITted as x86 or x64, and then I explicitly load the C++/CLI assembly matching that architecture. If you don't do that, then you cannot compile as "AnyCPU" on the C# side. How this plays out outside of Windows I don't know...
