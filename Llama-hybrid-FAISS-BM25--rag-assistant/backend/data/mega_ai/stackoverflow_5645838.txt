[site]: stackoverflow
[post_id]: 5645838
[parent_id]: 5644157
[tags]: 
This will probably irk the "you don't need no stinkin' UML, just write code" crowd. But anyway... You don't need to learn Java - or any other programming language - before learning the principles of Object Orientation. In fact, there are some advantages to not learning java (or similar) first. I wouldn't worry about Sun stating Java as a pre-req for UML. Their perspective is different to yours (i.e. they want to steep you in Java then "progress" to "design"). It is, of course, a balance. Here are some things to bear in mind: Perhaps the most important skill in designing OO software well is being able to identify good abstractions from the problem domain. (see e.g. domain driven design ). UML class diagrams are a good way to illustrate those abstractions (classes) and their relationships. The relationships bit is hugely important - and far too often understated. The key to understanding a domain - and representing it well - is to understand the relationships. They are the secret sauce. UML class diagrams give you a far better vocabulary and notation for documenting relationships than any programming language provides. Learn the principles of encapsulation. In particular, the separation of interface from implementation. This isn't specific to UML (and in fact UML isn't particularly good at encouraging it). However, java is worse - much worse. Java fails spectacularly in supporting encapsulation of properties. To really understand it, read the first few chapters of Bertrand Meyer's Object Oriented Software Construction . Learn about distributing behavioural responsibility among classes. If identifying static relationships is the first key tenet of good OO, this is the second (and builds on encapsulation). Application-level functionality is achieved by interaction among objects. Again, that's independent of any programming language. UML Activity and Sequence diagrams are good for this. Those are the pros for an OO-first approach. UML is a good language for visualing these things. The biggest downside: lack of executability. Nothing reinforces understanding better than seeing your design "run". There are very few UML tools that support execution of your models (aka "simulation"). This is where programming languages are far better - see e.g. the plethora of unit test frameworks. There are however some UML tools that do support execution, might be worth checking them out. Bit of a long answer, apologies for that. To answer your initial question in summary however: do you need to learn java before learning UML? No. Definitely not. hth.
