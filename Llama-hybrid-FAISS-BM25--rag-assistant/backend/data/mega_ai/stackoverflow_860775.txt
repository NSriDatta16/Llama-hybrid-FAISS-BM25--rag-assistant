[site]: stackoverflow
[post_id]: 860775
[parent_id]: 512262
[tags]: 
Most enterprise-class document management systems do NOT store the object file in the database. Just because you can doesn't mean you should . If scalability and performance are important to you and you have a large document set you need to be very careful about storing the objects in the db. Consider the following: In the case case of document imaging, 200 million TIFF files can be considered a relatively large, but not massive, system. Larger-scale systems can have over 1 billion object files. At, say, 20KB per bitonal TIFF you could have 4TB of object file storage. How long are your DB backups going to take? How long are your queries going to take? What is the frequency of access for these objects? If these objects have a high access frequency, do you want your high-end DB server spending all its time serving up files? If you have millions of objects then you need to be pretty darn careful about how you architect a solution where the objects are stored in the db. Suppose that you are now tasked with converting those 200M TIFF files to PDF files. Be prepared to bring your solution to its knees as your database server wastes its time serving up each and every object file to the conversion process and then re-saving the results. Just as an example, Sharepoint is famous for storing objects in the db. Sharepoint is also famous for scalability issues. My answer: For small systems ( 1M files) storing files in the DB is a mistake.
