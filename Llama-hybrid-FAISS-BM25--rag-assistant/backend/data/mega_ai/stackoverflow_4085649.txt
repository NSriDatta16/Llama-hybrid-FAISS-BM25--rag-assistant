[site]: stackoverflow
[post_id]: 4085649
[parent_id]: 4085511
[tags]: 
The first thing is that random does not exclude repetition in and of itself - random distribution is just that, random, and no evenly distributed set that means no item would occur again. So I would start (for simplicity's sake) by flattening the 6x6 2d array into a 36x 1d array, and then reorganising it later. So using a 1d array, you can loop through, and for each position, in a do loop, generate a random number, then you can have an inner for loop that iterates through the existing array from 0 up to the current position, and if the random number is seen at one of those positions, mark a flag to say it's already been seen. That way you can end the do loop with "while(notUnique)". Ok - show me the code! int board1d[36]; int pos; for(pos = 0; pos 0 && notUnique==0; innerPos--) { notUnique = (newRand == board1d[innerPos]); } } while(notUnique); board1d[pos] = newRand; } This does, as mentioned above, potentially mean that if the random generator generates a sequence that repeated, then the loop would take more cycles. There is no guaranteed even distribution in a random set.
