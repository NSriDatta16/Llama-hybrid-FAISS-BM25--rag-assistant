[site]: stackoverflow
[post_id]: 453676
[parent_id]: 430809
[tags]: 
What you are talking about is doing a stateless transformation of a request representation (list of numbers) into a response representation (single number). Lets categorize your resource: Stateless -- The request is stateless, but so is the resource. It should be able to take your request, process it, and return a response without maintaining any internal state. Further discussion below. Unlikely to be cacheable -- I am making an assumption here that your lists of numbers are never/seldom identical. Idempotent -- Requests have no side effects. This is because the resource is stateless. Now lets examine the different HTTP methods: GET - Gets the state of a resource. Since your resource has no state, it is not appropriate for your situation. (idempotent, cacheable) DELETE - Removes a resource or clears its state. Also not appropriate for your situation. (not idempotent, not cacheable) PUT - Used to set the state of a resource (or create it if it does not exist). (idempotent, not cacheable) POST - Used to process requests which may or may not modify the state of a resource. May create other resources. (no guarantee of idempotence -- depends on whether the resource is stateful or stateless, not cacheable) As you see in the other answers, POST is most popularly used as a synonym for 'create'. While this is ok, POST is not limited to just 'create' in REST. Mark Baker does a good job of explaining this here: http://www.markbaker.ca/2001/09/draft-baker-http-resource-state-model-01.txt (Section 3.1.4). While POST does not have a perfect semantic mapping to your problem, it is the best of all the HTTP methods for what you are trying to do. It also leads to a simple, stateless, and scalable solution, which is the point of REST. In summary, the answer to your question is: Method: POST Request: A representation of a list of numbers Response: A representation of a single number (average of the list) While this may look like a SOAP-style web service invocation, it is not. Don't let your visceral reaction to SOAP cloud your use of the POST method and place unnecessary constraints on it. KISS (Keep it simple, stupid).
