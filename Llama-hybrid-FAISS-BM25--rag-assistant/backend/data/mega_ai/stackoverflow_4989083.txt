[site]: stackoverflow
[post_id]: 4989083
[parent_id]: 
[tags]: 
VB.NET: starting lots of threads takes a long time?

I'm trying to write a multithreading application. Consider the following code: Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click Dim sw As New Stopwatch Dim sw2 As New Stopwatch sw.Start() For x As Integer = 0 To 150 Dim th As Thread = New Thread(New ThreadStart(AddressOf work)) th.Start() Next sw.Stop() MsgBox(sw.Elapsed.ToString()) End Sub Private Sub work() End Sub If you press the button on the form, 150 threads are started in a loop. Their work sub doesn't actually do anything...it's just an exercise in starting a lot of threads. I'm running this on a 16 core machine and it takes nearly half a second to complete. This is pretty outrageous considering that when this code is implemented in my app, it takes a shorter amount of time to run the work sub (when it actually contains useful routines) on a single thread than it does using all 16 cores. Why is it taking so long to start the threads? As soon as you take out the "th.start()" line, the code executes in a half a millisecond. Is there a faster way to start threads? Should I be using a threadpool system instead? Seems like multithreading is pointless when it can actually result in much slower speeds than single-threading....given that it can take so long to simply boot up all the threads.
