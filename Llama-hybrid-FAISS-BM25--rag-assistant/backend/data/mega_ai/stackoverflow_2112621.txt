[site]: stackoverflow
[post_id]: 2112621
[parent_id]: 2104639
[tags]: 
I was able to figure out a partial quantitative answer without having to do an obscene amount of work. Here is my (hair-brained) methodology: 1) Use the following command to generate a list of packages with their installed size and list of dependencies: dpkg-query -Wf '${Package}\t${Installed-Size}\t${Depends} 2) Parse the results and build a map of statistics for each package: struct PkgStats { PkgStats() : kbSize(0), dependantCount(0) {} int kbSize; int dependentCount; }; typedef std::map PkgMap; Where dependentCount is the number of other packages that directly depend on that package. Results Here is the Top 20 list of packages with the most dependants on my system: Package Installed KB # Deps Dup'd MB libc6 10096 750 7385 python 624 112 68 libatk1.0-0 200 92 18 perl 18852 48 865 gconf2 248 34 8 debconf 988 23 21 libasound2 1428 19 25 defoma 564 18 9 libart-2.0-2 164 14 2 libavahi-client3 160 14 2 libbz2-1.0 128 12 1 openoffice.org-core 124908 11 1220 gcc-4.4-base 168 10 1 libbonobo2-0 916 10 8 cli-common 336 8 2 coreutils 12928 8 88 erlang-base 6708 8 46 libbluetooth3 200 8 1 dictionaries-common 1016 7 6 where Dup'd MB is the number of megabytes that would be duplicated if there was no sharing ( = installed_size * (dependants_count - 1) , for dependants_count > 1 ). It's not surprising to see libc6 on top. :) BTW, I have a typical Ubuntu 9.10 setup with a few programming-related packages installed, as well as some GIS tools. Some statistics: Total installed packages: 1717 Average # of direct dependents: 0.92 Total duplicated size with no sharing (ignoring indirect dependencies): 10.25GB Histogram of # of direct dependents (note logarithmic Y scale): Note that the above totally ignores indirect dependencies (i.e. everything should be at least be indirectly dependent on libc6). What I really should have done is built a graph of all dependencies and use that as the basis for my statistics. Maybe I'll get around to it sometime and post a lengthy blog article with more details and rigor.
