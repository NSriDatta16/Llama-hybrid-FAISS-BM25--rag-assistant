[site]: stackoverflow
[post_id]: 3833326
[parent_id]: 3833077
[tags]: 
Because it lets you have code do this: struct S { int count; // length of array in data int data[1]; }; struct S * foo; foo = malloc(sizeof(struct S) + ((len - 1)*sizeof(int)) ); strcpy(foo->data, buf); Which only requires one call to malloc and one call to free. This is common enough that the C99 standard allows you do not even specify a length of the array. It's called a flexible array member . From ISO/IEC 9899:1999, Section 6.7.2.1, paragraph 16: "As a special case, the last element of a structure with more than one named member may have an incomplete array type; this is called a flexible array member." called a flexible array member." struct S { int count; // length of array in data int data[]; }; And gcc has allowed 0 length array members as the last members of structs as an extension for a while.
