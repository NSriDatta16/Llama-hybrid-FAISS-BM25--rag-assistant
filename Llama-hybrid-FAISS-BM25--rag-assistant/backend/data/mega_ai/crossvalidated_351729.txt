[site]: crossvalidated
[post_id]: 351729
[parent_id]: 
[tags]: 
PCA - Background removal

I saw this example in a python notebook on Fast.ai . In the notebook they are removing the background and keeping objects in the foreground in a video sequence by using different methods(SVD, random SVD, robust PCA etc). I tried to implement it using the regular PCA by doing the following: Reshape all frames in the video to vectors and concatenate the vectors into a matrix $A$. Calculating the covariance matrix of $A$ with dimension(no of frames x no of frames) Calculating the eigenvectors and eigenvalues by SVD (I'm only using the first principal component) Obtain the projection $Z =AU$ Reconstruct the matrix with the background vectors. $\hat{X} = ZU^T$ To get the foreground objects it is $A-\hat{X}$. It works for me, although the result is not as good as robust-PCA. But i am not sure about what I am exactly are doing. I have read some a articles of post about PCA but I could not find some (that i understand) about background removal and PCA. So my questions are: Why is the PC1 the background of all the picture frames? And what is the intuition by calculating the eigenvectors of the covariance matrix? What happens if they camera shakes a little, so the positions of the background pixels change, can PCA still be used? Does it help to subtract the mean when working with images? (I could see that you are doing that in other PCA examples).
