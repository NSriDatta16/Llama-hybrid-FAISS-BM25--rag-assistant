[site]: stackoverflow
[post_id]: 4015952
[parent_id]: 4013638
[tags]: 
Based on my understanding of the ruby method lookup algorithm I do not believe that it is possible to achieve what you are trying to do without using different method names or without over-ridding the bar method in the subclass also. The problem is that the "self" that receives the foo message when called by the bar method in class A will always be the instance of class B (when called from an instance of class B). Since class B's own foo method will always be found first by ruby's method lookup algorithm there is no way call class A's original foo method (class B is after all overriding the inherited foo method from class A). A not so elegant solution would be to use "around aliases" as shown below but it does require over-riding the bar method also: class B
