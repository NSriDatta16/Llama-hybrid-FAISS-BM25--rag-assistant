[site]: crossvalidated
[post_id]: 5241
[parent_id]: 5238
[tags]: 
If you are comfortable with R, you can create your basic data.frame and then use the fix() function on it to input data. Along the same line as #5, once you set up the data.frame you can use a series of readLines(n=1) (or whatever) to get your data in, validate it, and the provide the opportunity to add the next row. Then leave the fixing to fix(). See an implemented example below using scan(). Another option in excel would be messy, but you could type in 12/9, then have another column evaluate =IFERROR(MONTH(DateEntryCell)/DAY(DataEntryCell),DataEntryCell). But then you'll have to maintain the excel sheet AND the csv sheet and all of the complaining as you write the csv will persist. Alternatively, so long as your fields are relatively short and have a consistent length a regular text editor should serve you well with TSV. You can always load it up in excel when you are done and make sure the number of columns for each row is what you expect it to be. Emacs is available on a number of platforms and probably has something just for this, e.g. http://www.emacswiki.org/emacs/CsvMode . If you are a hearty soul, programming something quick up in a programming language to do the data entry is trivial, the data editing will be a lot harder. A quick google search shows software with just this purpose, but no free software seemed to be any good. It sounds insane, but someone on superuser suggested editing tables in access and then exporting them as CSV... that is just crazy enough to work. It doesn't stop excel from complaining as you save as .csv, but you can type a single apostrophe before your data entry field and that makes it leave it alone in terms of auto-formatting. Nicely, this (in Office 2007 at least) doesn't leave apostrophes in the csv file. Update: I've been poking around a lot on this problem because it is an issue I also have. So far the best/easiest solution for data-entry I've seen so far is KillinkCSV . It isn't "free" software, it is shareware with a 30 day trial duration and a reasonable price (~$27). I'm not sure how much I trust it for editing existing CSVs though - I handed it an insanely large (and presumably well formatted) CSV and it failed to read all of the rows. However it seemed to work well for one that was reasonably large (20 MB) and the problem with the larger file may be user error on my part. R Example: #This function takes a what argument like in scan, #a list with the types to be used, see usage example #at the end of this code block #dataEntry will keep reading in values until #the values it reads in matches what is in #"terminateon". #limitations: Many dataEntry
