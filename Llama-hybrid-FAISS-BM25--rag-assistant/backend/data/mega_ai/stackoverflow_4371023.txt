[site]: stackoverflow
[post_id]: 4371023
[parent_id]: 4370760
[tags]: 
I wouldn't do it for many of the reasons you already know, personally I don't like the fact of mixing the semantic meaning of arguments vs. variables, although at the implementation level, when the function is executed, they are just properties of the current variable object, they have different meaning IMO. Now, answering the question, I don't think there's any performance impact . Let me talk a bit about the the Variable Instantiation process , it takes place for Function Code, just before the function is executed (commonly known as "hoisting"), at first, all the Formal Parameters described for the function are bound to the current Variable Object (the current scope), and they are initialized with the values passed in the function call or undefined if not supplied. After that, all the identifiers that belong to all var statements within the function are declared in the current scope, and initialized with undefined (note that the assignments are made after this, the function body isn't actually being executed yet). The third step are FunctionDeclarations, all the identifiers of function declarations are bound to the local scope, if an identifier was previously declared, its value is replaced, for example: (function (a) { return typeof a; // "function", not "string" function a () {} })('foo'); // I would recommend instead simply to use a single var statement, at the top of the function: function howManyMatch(arr, pattern) { var l = arr.length, total = 0, i; for (i = 0, i That doesn't just organize your code, it would help you to prevent unwanted results due the function-only scope of JavaScript and the "hoisting" nature of var , some tools like JSLint encourage this also.
