[site]: datascience
[post_id]: 23545
[parent_id]: 23534
[tags]: 
Assuming that letters are indicative of "motifs" and numbers are considered as digits and not exact numbers, this is what I would do: First - transform numbers into a digit placeholder ( # ) import re s = re.sub("\d",s,"#") Then I would transform a string into a bag-of-bigrams vector in the char level from sklearn.feature_extraction.text import CountVectorizer vecs = CountVectorizer(s, analyzer="char_wb", ngram_range=(1,3)) After these 2 steps, we got a sparse vector from any string: 'ab123' --> {" a":1,"ab":1,"b#","##":2,"# ":1} Next we want to convert those vectors to a pairwise distance matrix and cluster by that distance. from sklearn.metrics.pairwise import pairwise_distances from scipy.cluster import hierarchy def link_cluster(X, threshold=0.1, metric="cosine", algo="average"): X = X.todense() Z = hierarchy.linkage(X, algo, metric=metric) C = hierarchy.fcluster(Z,threshold, criterion="distance") return C Your end result would be C = link_cluster(vecs)
