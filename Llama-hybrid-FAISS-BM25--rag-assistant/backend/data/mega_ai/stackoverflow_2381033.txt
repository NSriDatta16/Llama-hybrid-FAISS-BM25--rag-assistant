[site]: stackoverflow
[post_id]: 2381033
[parent_id]: 
[tags]: 
How to create a full Audit log in Rails for every table?

We recently began a compliance push at our company and are required to keep a full history of changes to our data which is currently managed in a Rails application. We've been given the OK to simply push something descriptive for every action to a log file, which is a fairly unobtrusive way to go. My inclination is to do something like this in ApplicationController : around_filter :set_logger_username def set_logger_username Thread.current["username"] = current_user.login || "guest" yield Thread.current["username"] = nil end Then create an observer that looks something like this: class AuditObserver and in general this works great , but it fails when using the "magic" _ids method that is tacked to has_many :through => associations. For instance: # model class MyModel has_many :runway_models, :dependent => :destroy has_many :runways, :through => :runway_models end #controller class MyModelController {:my_model => {:runways_ids => ['1', '2', '3', '5', '8']}} def update respond_to do |format| if @my_model.update_attributes(params[:my_model]) flash[:notice] = 'My Model was successfully updated.' format.html { redirect_to(@my_model) } format.xml { head :ok } else format.html { render :action => "edit" } format.xml { render :xml => @my_model.errors, :status => :unprocessable_entity } end end end # ... end This will end up triggering the after_create when new Runway records are associated, but will not trigger the before_destroy when a RunwayModel is deleted. My question is... Is there a way to make it work so that it will observe those changes (and/or potentially other deletes)? Is there a better solution that is still relatively unobtrusive?
