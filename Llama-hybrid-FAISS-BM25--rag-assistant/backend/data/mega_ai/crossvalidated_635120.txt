[site]: crossvalidated
[post_id]: 635120
[parent_id]: 
[tags]: 
Fast Cholesky decomposition of a Toepllitz matrix via embedding in a circulant & fft

As I understand it, the Cholesky decomposition of a Toeplitz matrix can be computed more efficiently by first embedding it in a circulant matrix then using FFT, but I'm having trouble finding any implementations of this approach anywhere, nor description of the specific series of operations I'd need to implement it myself. Help? Here’s code to construct a Toeplitz, compute the Cholesky decomposition the standard way, then do the circulant embedding: #imports import numpy as np from scipy.linalg import toeplitz, circulant, cholesky from scipy.fftpack import fft, ifft # construct the Toeplitz matrix t = toeplitz(np.array([1., 0.5])) + ( 1e-6 * np.eye(2) ) print(t) # [[1.000001 0.5 ] # [0.5 1.000001]] # compute the cholesky the standard way chol_ltri_std = cholesky(t,lower=True) print(chol_ltri_std) # [[1.0000005 , 0. ] # [0.49999975, 0.86602613]] # verify: chol_ltri_std @ chol_ltri_std.T # should == t #embed in circulant (maybe needs to be a different embedding? Reflected & periodic don’t seem to work either) c = circulant(np.concatenate([t[0,:],t[0,:-1][::-1]])) print(c) # [[1.000001 1.000001 0.5 ] # [0.5 1.000001 1.000001] # [1.000001 0.5 1.000001]] #attempt at fft-based cholesky decomposition eigenvalues = fft(c) sqrt_eigenvalues = np.sqrt(eigenvalues) inverse_fft_real = ifft(sqrt_eigenvalues).real print(inverse_fft_real) # yields: # [[0.93529519 0.52704649 0.11879779] # [0.52704649 0.11879779 0.93529519] # [0.93529519 0.11879779 0.52704649]] #but none of these values match the elements of chol_ltri_std
