[site]: stackoverflow
[post_id]: 3406003
[parent_id]: 3405681
[tags]: 
The problem I see with the first approach is that it would become difficult to extract those tests when you make a full build of the system You could always filter classes based on some naming convention like a special suffix or prefix when packaging (e.g. don't include **/*Test.class with Java). I don't really like this approach though, I find it messy and fragile. for the second, how would you test functionality that is only visible at the package level? Unless I'm missing something, I don't see the issue. You CAN have classes in the same package and have them living in different trees , e.g.: src/main/java for application sources src/main/java/foo/Bar.java src/test/java for tests sources src/test/java/foo/BarTest.java Both Bar.java and BarTest.java are in the same foo package but in different directories. This is the approach I use. Is there a decent way to organize unit tests so that you can easily automate the build process and still access everything that needs to be tested? Well, as hinted, my test sources and application sources live in the same project but in distinct directory trees and this works really well for me. This is actually the default layout suggested by Maven (see the Introduction to the Standard Directory Layout ). Whatever language you use, this might give you some ideas.
