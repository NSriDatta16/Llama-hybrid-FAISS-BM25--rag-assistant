[site]: stackoverflow
[post_id]: 4175641
[parent_id]: 4174791
[tags]: 
The problem here is essentially one of types. One function produces a bad output (incorrect type) which is then fed into many subsequent functions producing lots of errors. While Mathematica doesn't have user defined types like in other languages, you can do pattern matching on function arguments without too much work. If the match fails the function doesn't evaluate and thus doesn't beep with errors. The key piece of syntax is "/;" which goes at the end of some code and is followed by the test. Some example code (and output is below). Input: Average[x_] := Mean[x] /; VectorQ[x, NumericQ] Average[{1, 2, 3}] Average[$Failed] Output: 2 Average[$Failed] If the test is simpler, there is another symbol that does similar pattern testing "?" and goes right after an argument in a pattern/function declaration. Another example is below. Input: square[x_?NumericQ] := x*x square[{1, 2, 3}] square[3] Output: square[{1, 2, 3}] 9
