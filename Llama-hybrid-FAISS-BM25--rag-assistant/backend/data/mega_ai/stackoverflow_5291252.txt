[site]: stackoverflow
[post_id]: 5291252
[parent_id]: 
[tags]: 
Identifying UISegmentedControl embedded in custom UITableViewCell when calling selector

I've a custom UITableViewCell which has a UISegmentedControl added as a subview via the cell's contentView property as follows: #define TABLECELL_SEGMENT_TAG 1 ... - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { UISegmentedControl *testSegmentedControl; // Check for a reusable cell first, use that if it exists UITableViewCell *tableCell = [tableView dequeueReusableCellWithIdentifier:@"OurCustomCell"]; // If there is no reusable cell of this type, create a new one if (!tableCell) { tableCell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@"OurCustomCell"] autorelease]; // Create our segmented control NSArray *segmentItems = [NSArray arrayWithObjects:@"Option 1", @"Option 2", nil]; UISegmentedControl *testSegmentedControl = [[UISegmentedControl alloc] initWithItems:segmentItems]; [testSegmentedControl setTag:TABLECELL_SEGMENT_TAG]; [[tableCell contentView] addSubview:testSegmentedControl]; [testSegmentedControl release]; } // Set the selected segment status as required testSegmentedControl = (UISegmentedControl *)[tableCell.contentView viewWithTag:TABLECELL_SEGMENT_TAG]; ... [testSegmentedControl addTarget:self action:@selector(segmentedControlUpdated:) forControlEvents:UIControlEventValueChanged]; return tableCell; } What I need to be able to do is somewhat set the addTarget selector for each segmented control so that it identifies the row in question, an obvious solution being to use the segmented control's tag. However as you can see I'm already using the tag to retrieve the control from within the custom cell's contentView if an existing cell is returned via the UITableView's dequeueReusableCellWithIdentifier: method. As such, I'm just wondering what the best way to achieve this? (I presume I could simply extend the UISegmentedControl class to add an associatedTableRow property, but I'm wondering if there's a more elegant solution.)
