[site]: stackoverflow
[post_id]: 4376728
[parent_id]: 4355210
[tags]: 
I doubt that users of your application will see this. First thing you need is functionality. This is what you will sell at the end. Also you need to make maintenance expenses as low as possible. And here comes how your code is organized. Second thing - minimize maintenance expenses. So to decide how to organize your solution you should answer some questions: How picked structure will help me to do a maintenance and adding new features? How will it help new developers to start coding inside my solution? Is all that assembly/folder/class names are recognizable and descriptive? Questions that I forgot. This is your goals. But not the rules you are looking for. You may pick any names if new developer will understand them. Probably (as a heuristic and if you use some refactoring tools like Resharper or Refactor! Pro) you can start with single assembly and single name space. During development you will see how you may change structure of your project to better meet your needs. Then refactor it. Go watch this talk at 38:18-39:45 (~1.5 minute). There are good practice about how to answer some questions.
