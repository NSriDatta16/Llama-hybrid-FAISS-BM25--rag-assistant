[site]: stackoverflow
[post_id]: 1315874
[parent_id]: 
[tags]: 
In enterprise Java/.Net projects, does every developer have all dependencies in their classpath?

On large-scale Java/.Net Enterprise projects, does every developer need to have all the components/libraries/dependencies in their classpath/local development environment, in order to make it build? Or are they divided up into smaller sections can be built in isolation (so that they don't need to reference all the dependencies)? In other words: if they want to run the whole application, they need all the components; but if they are only running a subset of the app, they'll only need the corresponding subset of components. Are large enterprise projects usually organized in the first way or the second way? A possible organization is if you are working on a module of the whole project that is self-contained, but referenced by other modules (in other words, a leaf-node in the dependency tree). Another organization is if you dynamically load classes that you use, you can build without having any of them in your classpath. To run it, your classpath only needs to access the ones that you actually load (there might be many others that form different parts of the project, that you don't load). These are theoretical possibilities; but what's standard practice for enterprise projects, in... well, in practice? I've expanded this to include .Net, because I think the same issues would arise there (DLL hell?)
