[site]: stackoverflow
[post_id]: 2336518
[parent_id]: 2333160
[tags]: 
Pros Allows you to store arbitrary complex objects Simplified your db schema (no need to represent those complex objects) Cons Complicates your models and data layer Potentially need to handle multiple versions of serialized objects (changes to object definition over time) Inability to directly query serialized columns Alternatives As the previous answer stated, an object database or document oriented database may meet your requirements. Difficulties If your objects are quite large you may run into difficulties when moving data between your DBMS and your program. You could minimize this by separating the storage of the object data and the meta data related to the object. Memory Issues Running out of memory is definitely a possibility with large enough objects. It also depends on the type of serialization you use. To know how much memory you'd be using, you'd need to profile your app. I'd suggest ruby-prof, bleak_house or memprof. I'd suggest using a non-binary serialization wherever possible. You don't have to use only one type of serialization for your entire database, but that could get complex and messy. If this is how you want to proceed, using an object oriented dbms like ObjectStore or a document oriented dbms like CouchDB would probably be your best option. They're better designed and targeted for object serialization.
