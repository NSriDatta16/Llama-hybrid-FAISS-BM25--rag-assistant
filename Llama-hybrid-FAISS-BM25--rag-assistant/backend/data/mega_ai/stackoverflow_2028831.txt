[site]: stackoverflow
[post_id]: 2028831
[parent_id]: 2028683
[tags]: 
Pros of Storing binary files in a DB: Some decrease in complexity since the data access layer of your system need only interface to a DB and not a DB + file system. You can secure your files using the same comprehensive permissions-based security that protects the rest of the database. Your binary files are protected against loss along with the rest of your data by way of database backups. No separate filesystem backup system required. Cons of Storing binary files in a DB: Depending on size/number of files, can take up significant space potentially decreasing performance (dependening on whether your binary files are stored in a table that is queried for other content often or not) and making for longer backup times. Pros of Storing binary files in file system: This is what files systems are good at. File systems will handle defragmenting well and retrieving files (say to stream a video file to through a web server) will likely be faster that with a db. Cons of Storing binary files in file system: Slightly more complex data access layer. Needs its own backup system. Need to consider referential integrity issues (e.g. deleted pointer in database will need to result in deletion of file so as to not have 'orphaned' files in the filesystem). On balance I would use the file system. In the past, using SQL Server 2005 I would simply store a 'pointer' in db tables to the binary file. The pointer would typically be a GUID. Here's the good news if you are using SQL Server 2008 (and maybe others - I don't know): there is built in support for a hybrid solution with the new VARBINARY(MAX) FILESTREAM data type. These behave logically like VARBINARY(MAX) columns but behind the scenes, SQL Sever 2008 will store the data in the file system.
