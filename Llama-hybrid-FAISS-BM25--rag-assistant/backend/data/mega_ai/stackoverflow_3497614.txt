[site]: stackoverflow
[post_id]: 3497614
[parent_id]: 3490181
[tags]: 
This is a snippet of a function that takes the type of the dataset (WOName) and returns the appropriate SQL string. Many Cases exist but have been removed for readability. Private Function GetMainSQLString(ByVal WOName As String) As String Dim Result As String = "" Select Case WOName Case "Monthly Site Inspection" Dim sb As New StringBuilder sb.Append("UPDATE WorkOrders SET ") sb.Append("CompletedPersonID = :CompletedPersonID, CompletedPersonName = :CompletedPersonName, CompleteDate = :CompleteDate, ") sb.Append("SupervisorID = :SupervisorID, SupervisorName = :SupervisorName ") sb.Append("WHERE WorkOrderNumber = :WorkOrderNumber") Result = sb.ToString End Select Return Result End Function This is a snippet of a function that takes the Oracle command object byRef and adds the required parameters to it, depending upon which of the possible 15 types of dataset(WOName) is received from the client program. Many Cases exist but have been removed for readability. The updated Cmd object is then returned to the main program logic, where ExecuteNonQuery() is called. The test values of params below are as follows: dr.Item("CompletedPersonID") 21 dr.Item("CompletedPersonName") Pers Name dr.Item("CompleteDate") #8/16/2010# dr.Item("SupervisorID") 24 dr.Item("SupervisorName") Sup Name dr.Item("WorkOrderNumber") 100816101830 Private Function addMainCmdParams(ByVal WOName As String, ByRef cmd As OracleCommand, ByVal dr As DataRow) As OracleCommand Select Case WOName Case "Monthly Site Inspection" cmd.Parameters.Add(":CompletedPersonID", Oracle.DataAccess.Client.OracleDbType.Int32).Value = dr.Item("CompletedPersonID") cmd.Parameters.Add(":CompletedPersonName", Oracle.DataAccess.Client.OracleDbType.Varchar2).Value = dr.Item("CompletedPersonName") cmd.Parameters.Add(":CompleteDate", Oracle.DataAccess.Client.OracleDbType.Date).Value = dr.Item("CompleteDate") cmd.Parameters.Add(":SupervisorID", Oracle.DataAccess.Client.OracleDbType.Int32).Value = dr.Item("SupervisorID") cmd.Parameters.Add(":SupervisorName", Oracle.DataAccess.Client.OracleDbType.Varchar2).Value = dr.Item("SupervisorName") cmd.Parameters.Add(":WorkOrderNumber", Oracle.DataAccess.Client.OracleDbType.Varchar2).Value = dr.Item("WorkOrderNumber") End Select Return cmd End Function While running this today, this precise code WAS successful; but another similar case was not. I still distrust any implicit typecasting performed by Oracle (if any) - and I'm especially suspicious of how Oracle handles any of these parameters that are passed with a dbNull.value - and I know it's going to happen. so if that's the problem I'll have to work around it. There are too many optional parameters and columns that don't always get values passed in for this system to break on nulls.
