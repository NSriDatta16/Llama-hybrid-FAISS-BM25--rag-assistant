[site]: stackoverflow
[post_id]: 2783316
[parent_id]: 2782862
[tags]: 
public ActionResult Show(int id) { Attachment attachment = attachmentRepository.Get(id); return new DocumentResult { BinaryData = attachment.BinaryData, FileName = attachment.FileName }; } Which uses this custom class, probably similar to FileResult : public class DocumentResult : ActionResult { public DocumentResult() { } public byte[] BinaryData { get; set; } public string FileName { get; set; } public string FileContentType { get; set; } public override void ExecuteResult(ControllerContext context) { WriteFile(BinaryData, FileName, FileContentType); } /// /// Setting the content type is necessary even if it is NULL. Otherwise, the browser treats the file /// as an HTML document. /// /// /// /// private static void WriteFile(byte[] content, string filename, string fileContentType) { HttpContext context = HttpContext.Current; context.Response.Clear(); context.Response.Cache.SetCacheability(HttpCacheability.Public); context.Response.ContentType = fileContentType; context.Response.AddHeader("content-disposition", "attachment; filename=\"" + filename + "\""); context.Response.OutputStream.Write(content, 0, content.Length); context.Response.End(); } }
