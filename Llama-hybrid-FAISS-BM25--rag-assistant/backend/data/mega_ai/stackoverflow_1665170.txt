[site]: stackoverflow
[post_id]: 1665170
[parent_id]: 1665015
[tags]: 
There's a huge concept that the relational database people use. It's called breaking the architecture into "Logical" and "Physical" layers. Your structs are both a logical and a physical layer mashed together into a hard-to-change thing. You want your program to depend on a logical layer. You want your logical layer to -- in turn -- map to physical storage. That allows you to make changes without breaking things. You don't need to reinvent SQL to accomplish this. If your data lives entirely in memory, then think about this. Divorce the physical file representation from the in-memory representation. Write the data in some "generic", flexible, easy-to-parse format (like JSON or YAML). This allows you to read in a generic format and build your highly version-specific in-memory structures. If your data is synchronized onto a filesystem, you have more work to do. Again, look at the RDBMS design idea. Don't code a simple brainless struct . Create a "record" which maps field names to field values. It's a linked list of name-value pairs. This is easily extensible to add new fields or change the data type of the value.
