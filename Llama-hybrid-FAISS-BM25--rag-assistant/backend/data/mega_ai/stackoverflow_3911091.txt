[site]: stackoverflow
[post_id]: 3911091
[parent_id]: 3909602
[tags]: 
SQLite3 uses B+ Trees internally, but it sounds like you may want a key-value store. Try Berkeley DB for that. If you don't need transactions, try HDF5. If you want a distributed key-value store, there is also http://scalien.com/keyspace/ , but that is a server-client type system which would open up all sorts of NoSQL key-value stores. All of these systems will be O(log(n)) for insertion and retrieval, so they will probably be slower than the hash tables that you're currently using. Kyoto Cabinet offers a hash tree, so that may be more of what you're looking at since it should be O(1) for insertion and retrieval, but you can't do in-order traversal if you need that (although since you're currently using hash trees, this shouldn't be an issue). http://fallabs.com/kyotocabinet/ If you're looking for performance, you will need to have the speed critical items implemented in a compiled language and then have a wrapper API in Python.
