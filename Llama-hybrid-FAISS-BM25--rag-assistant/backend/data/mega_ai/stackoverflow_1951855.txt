[site]: stackoverflow
[post_id]: 1951855
[parent_id]: 1950763
[tags]: 
"I need an algorithm for sorting lines which are arranged in different order but are making contact with each other. These lines are stored in list." I think ratty is talking about geometry, specifically a series of start-end line coords, some of which presumably intersect each other. If ratty means that he has a list of the edges of a polygon, and wants to sort them to get the closed shape, then this would work once translated to c# and using ratty's storage system: from math import sqrt origpoly = [( (0,0),(7,8) ), ( (7,8),(1,2) ), ( (1,2),(3,0) ), ( (3,0),(0,0) )] shuffledpoly = [origpoly[2],origpoly[0],origpoly[3],origpoly[1]] def r(vertex): return sqrt(vertex[0]^2 + vertex[1]^2) # dict of starting vertices, and find starting vertex nearest 0,0 startmap = {} minstate = ( r(shuffledpoly[0][0]) , 0 ) for idx,pair in enumerate(shuffledpoly): startmap[pair[0]] = idx thisr = r(pair[0]) if(thisr Output: >>> ((0, 0), (7, 8)) ((7, 8), (1, 2)) ((1, 2), (3, 0)) ((3, 0), (0, 0))
