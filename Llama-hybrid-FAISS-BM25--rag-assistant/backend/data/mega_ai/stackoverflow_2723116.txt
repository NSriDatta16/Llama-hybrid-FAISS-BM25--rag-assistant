[site]: stackoverflow
[post_id]: 2723116
[parent_id]: 2722346
[tags]: 
I use a custom UserPrinciple to embed more information about the current user into my pages than the standard GenericPrinciple allows. I didn't find a need to implement my own IIdentity as you can easily leverage the built in FormsIdentity similar to my fashion (I'm not sure if this is divergent from standard practices of Auth for .NET it's worked great in practice for myself though). I did create a custom GuestIdentity that returns a hardcoded IsAuthenticated = false perhaps this could be replaced by just GenericPrinciple I'm not sure off hand if it's abstract or not. public class UserPrincipal : IPrincipal { private readonly IIdentity _identity; public UserPrincipal() { _identity = new GuestIdentity(); var guest = //my custom object User = guest; } public UserPrincipal(HttpContext context) { var ident = context.User.Identity as FormsIdentity; string msg1 = "Context.User.Identity is null for authenticated user."; if (ident == null) throw new ApplicationException(msg1); _identity = ident; string msg2 = "Forms Identity Ticket is null"; if (ident.Ticket == null) throw new AccessViolationException(msg2); var userData = ident.Ticket.UserData; ... User = jsonSerializer.Deserialize (userJson); } #region IPrincipal Members public bool IsInRole(string role) { return User.Roles.FirstOrDefault(x => x.RoleName == role) != null; } public IIdentity Identity { get { return _identity; } } #endregion } Random aside, you can cache data in the Forms Authentication ticket like extended UserData, if you follow this type of idea though make sure you have logic in place that can correctly expire stale data since it's stored on the client computer.
