[site]: stackoverflow
[post_id]: 3359944
[parent_id]: 3354175
[tags]: 
As I understand it, you're using 2d or 3d space, and your objects aren't placed on a some kind of grid (i.e. coordinates are floats). In this case there are 2 solutions: Solution #1: Use Physics engine, such as PhysX. Solution #2: Repeat 10 or 20 times or until there are no more collisions: 1.1 Find all overlapping (colliding) objects. That includes player and boxes. Also boxes colliding with other boxes. 1.2 For each object create "move" vector (how much object should move in response to collision)m and initilize it to all zeroes (x: 0, y: 0, z: 0). 1.3 For each pair of colliding(overlapping) objects A and B, calculate vector(say "pushAwayVector") that would push them away from each other. Add that vector to A.move and B.move. Keep in mind that objects are pushed away to each other, so you should be careful about signs and magnitude. i.e. A.move += pushAway*0.5f; B.move += -0.5f*pushAway; . Do not replace .move with pushAway vector, but add pushAway to move. Otherwise results will be less reliable. You can also take object's mass into account, like this: A.move += (B.mass/(A.mass + B.mass))*pushAway; B.move += -(A.mass/(A.mass+B.mass))*pushAway; , in this case it will be more difficult for lighter object to push heavier object; 1.4 Once all overlapping objects are processed, for all objects do obj.position += obj.move; Note that in each case boxes are not guaranteed to maintain exact relative positions. But they will be pushed away when player moves, and they will block player's movement. Note that using physics engine will yield results that are closer to what you want. Another solution is once player touches a box, find group of boxes that collide to each other and a player, then remove boxes that wouldn't be affected by current player movement. However, I do not like that solution - it is messy, lacks elegance, although it will maintain relative object positions (which will also look unrealistic). I'd recommend using Physics Engine.
