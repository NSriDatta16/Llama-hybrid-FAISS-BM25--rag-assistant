[site]: stackoverflow
[post_id]: 855218
[parent_id]: 854653
[tags]: 
The 'D' in the name means debug. This is a clear indicator of Visual Studio's Debug build. Use the Release build, and all will be well. If the target system doesn't have the C runtime yet, you should generally use the official installer to put it there. Some of the versions of the runtime you might want to know about are these: VS2005 x86 VS2005 SP1 x86 VS2008 x86 x64 VS2008 SP1 x86 You can also develop a complete installation package that includes the redistributable DLLs (but never a debug DLL) needed by your application and handles the installation of side by side (SxS) assemblies into the system assembly cache correctly, using a technique known as merge modules. This approach is easier if you have the full installation of Visual Studio (not the free VS Express edition) but the resulting installation packages still may not handle installation of the runtime on older (such as Win 2K or 9x) platforms well at all. The MSDN article Redistributing Visual C++ Files describes what the rules are, and how to comply with them as easily as possible. It provides a starting point to learn more about many issues related to deployment. If the original DLL whose functionality you are replacing did not have a reference to MSVCR90.DLL, then it must have been statically linked to the runtime. You probably should check on the assumptions of the intended application that will be calling your DLL. Mixing C runtime libraries in a single process is not always easy. If the hosting application is already using MSVCR90.DLL, then you really should too. This is a larger issue than fits in an answer to the specific question at hand, however, so I'd encourage you to research it and ask new questions as needed. Another approach to avoiding the installation of the later runtime DLLs is to link to MSVCRT.DLL, which is distributed with modern versions of windows as a system component. This is the runtime that was shipped with Visual C 6.0, lightly updated for critical issues and kept current to match the OS. It isn't available for 64-bit builds at all, and it is quite difficult to trick Visual Studio into using it in place of the newer runtime.
