[site]: stackoverflow
[post_id]: 1038807
[parent_id]: 1038252
[tags]: 
Here is my variant, in PHP: $str = implode(file('c.txt')); $tok = strtok($str, " .,;()\r\n\t"); $splitters = '\s.,\(\);?:'; // string splitters $array = preg_split( "/[" . $splitters . "]*\\\"([^\\\"]+)\\\"[" . $splitters . "]*|[" . $splitters . "]+/", $str, 0, PREG_SPLIT_DELIM_CAPTURE ); foreach($array as $key) { $res[$key] = $res[$key]+1; } $splitters = '\s.,\(\)\{\};?:'; // string splitters $array = preg_split( "/[" . $splitters . "]*\\\"([^\\\"]+)\\\"[" . $splitters . "]*|[" . $splitters . "]+/", $str, 0, PREG_SPLIT_DELIM_CAPTURE ); foreach($array as $key) { $res[$key] = $res[$key]+1; } unset($res['the']); unset($res['and']); unset($res['to']); unset($res['of']); unset($res['by']); unset($res['a']); unset($res['as']); unset($res['is']); unset($res['in']); unset($res['']); arsort($res); //var_dump($res); // concordance foreach ($res AS $word => $rarity) echo $word . ' x ' . $rarity . ' '; foreach ($array as $word) { // words longer than n (=5) // if(strlen($word) > 5)echo $word.' '; } And output: statement x 7 be x 7 C x 5 may x 5 for x 5 or x 5 The x 5 as x 5 expression x 4 statements x 4 code x 4 function x 4 which x 4 an x 4 declarations x 3 new x 3 execution x 3 types x 3 such x 3 variables x 3 can x 3 languages x 3 operators x 3 end x 2 programming x 2 evaluated x 2 functions x 2 definitions x 2 keywords x 2 followed x 2 contain x 2 several x 2 side x 2 most x 2 has x 2 its x 2 called x 2 specify x 2 reinitialization x 2 use x 2 either x 2 each x 2 all x 2 built-in x 2 source x 2 are x 2 storage x 2 than x 2 effects x 1 including x 1 arguments x 1 order x 1 even x 1 unspecified x 1 evaluations x 1 operands x 1 interleaved x 1 However x 1 value x 1 branches x 1 goto x 1 directly x 1 designated x 1 label x 1 non-structured x 1 also x 1 enclosing x 1 innermost x 1 loop x 1 skip x 1 There x 1 within x 1 switch x 1 Expressions x 1 integer x 1 variety x 1 see x 1 below x 1 will x 1 on x 1 selects x 1 case x 1 executed x 1 based x 1 calls x 1 from x 1 because x 1 many x 1 widespread x 1 familiarity x 1 C's x 1 mimicked x 1 Although x 1 reliable x 1 obtain x 1 results x 1 needed x 1 other x 1 syntax x 1 often x 1 Introduction x 1 say x 1 Programming x 1 Language x 1 C, like any other language, has its blemishes. Some of the operators have the wrong precedence; some parts of the syntax could be better. x 1 Ritchie x 1 Kernighan x 1 been x 1 criticized x 1 For x 1 example x 1 care x 1 more x 1 leave x 1 return x 1 call x 1 && x 1 || x 1 entry x 1 include x 1 next x 1 before x 1 sequence point x 1 sequence x 1 points x 1 comma x 1 operator x 1 but x 1 compiler x 1 requires x 1 programmers x 1 exert x 1 optimization x 1 object x 1 This x 1 permits x 1 high x 1 degree x 1 occur x 1 Structured x 1 using x 1 struct x 1 union x 1 enum x 1 define x 1 Declarations x 1 file x 1 contains x 1 Function x 1 turn x 1 assign x 1 perhaps x 1 Keywords x 1 char x 1 int x 1 Sections x 1 name x 1 variable x 1 reserve x 1 usually x 1 writing x 1 type x 1 Each x 1 line x 1 format x 1 rather x 1 column-based x 1 text-line-based x 1 whitespace x 1 arbitrary x 1 FORTRAN x 1 77 x 1 free-form x 1 allows x 1 restrictions x 1 Comments x 1 C99 x 1 following x 1 // x 1 until x 1 */ x 1 /* x 1 appear x 1 between x 1 delimiters x 1 enclosed x 1 braces x 1 supported x 1 if x 1 -else x 1 conditional x 1 Unlike x 1 reserved x 1 sequential x 1 provides x 1 control-flow x 1 identified x 1 do-while x 1 while x 1 any x 1 omitted x 1 break x 1 continue x 1 expressions x 1 testing x 1 iterative x 1 looping x 1 separate x 1 initialization x 1 normal x 1 modify x 1 control x 1 structures x 1 As x 1 imperative x 1 single x 1 act x 1 sometimes x 1 curly brackets x 1 limit x 1 scope x 1 language x 1 uses x 1 evaluation x 1 assigned x 1 values x 1 To x 1 effect x 1 semicolon x 1 actions x 1 common x 1 consisting x 1 used x 1 var_dump statement simply displays concordance. This variant preserves double-quoted expressions. For supplied file this code finishes in 0.047 seconds. Though larger file will consume lots of memory (because of file function).
