[site]: stackoverflow
[post_id]: 5535198
[parent_id]: 5461648
[tags]: 
UPDATE: As others suggested, from 10.9 you can use NSSharingService that supports attachments as well! Swift example: let emailImage = NSImage.init(named: "ImageToShare")! let emailBody = "Email Body" let emailService = NSSharingService.init(named: NSSharingServiceNameComposeEmail)! emailService.recipients = ["support@myapp.com"] emailService.subject = "App Support" if emailService.canPerform(withItems: [emailBody,emailImage]) { // email can be sent emailService.perform(withItems: [emailBody,emailImage]) } else { // email cannot be sent, perhaps no email client is set up // Show alert with email address and instructions } OLD UPDATE : My old answers worked fine until I had to sandbox my apps for the App Store.~~ Since then the only solution I found was using simply a mailto: link. - (void)sendEmailWithMail:(NSString *) senderAddress Address:(NSString *) toAddress Subject:(NSString *) subject Body:(NSString *) bodyText { NSString *mailtoAddress = [[NSString stringWithFormat:@"mailto:%@?Subject=%@&body=%@",toAddress,subject,bodyText] stringByReplacingOccurrencesOfString:@" " withString:@"%20"]; [[NSWorkspace sharedWorkspace] openURL:[NSURL URLWithString:mailtoAddress]]; NSLog(@"Mailto:%@",mailtoAddress); } Disadvantage: No attachment! If you know how to make it work on Mac let me know! OLD ANSWER: You can Apple Script, Apple's scripting bridge framework (Solution 2) or a Python script (Solution 3) Solution 1 (Apple script): attachments is an array of stings containing file paths - (void)sendEmailWithMail:(NSString *) toAddress withSubject:(NSString *) subject Attachments:(NSArray *) attachments { NSString *bodyText = @"Your body text \n\r"; NSString *emailString = [NSString stringWithFormat:@"\ tell application \"Mail\"\n\ set newMessage to make new outgoing message with properties {subject:\"%@\", content:\"%@\" & return} \n\ tell newMessage\n\ set visible to false\n\ set sender to \"%@\"\n\ make new to recipient at end of to recipients with properties {name:\"%@\", address:\"%@\"}\n\ tell content\n\ ",subject, bodyText, @"McAlarm alert", @"McAlarm User", toAddress ]; //add attachments to script for (NSString *alarmPhoto in attachments) { emailString = [emailString stringByAppendingFormat:@"make new attachment with properties {file name:\"%@\"} at after the last paragraph\n\ ",alarmPhoto]; } //finish script emailString = [emailString stringByAppendingFormat:@"\ end tell\n\ send\n\ end tell\n\ end tell"]; //NSLog(@"%@",emailString); NSAppleScript *emailScript = [[NSAppleScript alloc] initWithSource:emailString]; [emailScript executeAndReturnError:nil]; [emailScript release]; /* send the message */ NSLog(@"Message passed to Mail"); } Solution 2 (Apple scriptingbridge framework): You can use Apple's scriptingbridge framework to use Mail to send your message Apple's exmaple link it's pretty straightforward, you only need to fiddle with adding a rule and Mail.app to your project. Read Readme.txt carefully. Change "emailMessage.visible = YES;" to "emailMessage.visible = NO;" so it sends it in the background. Disadvantage: users need to have valid accounts under Mail. Solution 3 (Python Script (no user account): You can also use a python script to send a message. Disadvantage: users have to enter SMTP details unless you grab them from Mail (but then you can use Solution 1 above directly), or you have to have a reliable SMTP relay hardcoded in your app (you can set up a gmail account and use it for that purpose, however if your apps send too many emails google can delete your account (SPAM)) I use this python script: import sys import smtplib import os import optparse from email.MIMEMultipart import MIMEMultipart from email.MIMEBase import MIMEBase from email.MIMEText import MIMEText from email.Utils import COMMASPACE, formatdate from email import Encoders username = sys.argv[1] hostname = sys.argv[2] port = sys.argv[3] from_addr = sys.argv[4] to_addr = sys.argv[5] subject = sys.argv[6] text = sys.argv[7] password = getpass.getpass() if sys.stdin.isatty() else sys.stdin.readline().rstrip('\n') message = MIMEMultipart() message['From'] = from_addr message['To'] = to_addr message['Date'] = formatdate(localtime=True) message['Subject'] = subject #message['Cc'] = COMMASPACE.join(cc) message.attach(MIMEText(text)) i = 0 for file in sys.argv: if i > 7: part = MIMEBase('application', 'octet-stream') part.set_payload(open(file, 'rb').read()) Encoders.encode_base64(part) part.add_header('Content-Disposition', 'attachment; filename="%s"' % os.path.basename(file)) message.attach(part) i = i + 1 smtp = smtplib.SMTP(hostname,port) smtp.starttls() smtp.login(username, password) del password smtp.sendmail(from_addr, to_addr, message.as_string()) smtp.close() And I call it form this method to send an email using a gmail account - (bool) sendEmail:(NSTask *) task toAddress:(NSString *) toAddress withSubject:(NSString *) subject Attachments:(NSArray *) attachments { NSLog(@"Trying to send email message"); //set arguments including attachments NSString *username = @"my.gmail.account@gmail.com"; NSString *hostname = @"smtp.gmail.com"; NSString *port = @"587"; NSString *fromAddress = @"my.gmail.account@gmail.com"; NSString *bodyText = @"Body text \n\r"; NSMutableArray *arguments = [NSMutableArray arrayWithObjects: programPath, username, hostname, port, fromAddress, toAddress, subject, bodyText, nil]; for (int i = 0; i I hope it helps
