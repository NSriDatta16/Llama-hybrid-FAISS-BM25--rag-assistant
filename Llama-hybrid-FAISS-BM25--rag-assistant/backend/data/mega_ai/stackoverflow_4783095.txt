[site]: stackoverflow
[post_id]: 4783095
[parent_id]: 2026857
[tags]: 
Both are invocation stack based languages and both support object oriented and procedural styles of programming. However you will find very little benefit of porting to Java if you just rewrite procedural code in a giant main() method with static subroutines. You will likewise find very little Cobol code that takes advantage of the object oriented features of the language. As Cobol is primarily used for applications involving money, Cobol shops and programmers tend to focus more on the business side of things, less on the write-elegant-and-beautiful-code side of things. The Cobol to Java ports I have seen tend to have one class, all variables are declared at the top as static and the main() method calls a bunch of static methods much in the same way it was performed paragraphs or call subprograms. The Java to Cobol ports I have seen tend to be the exact opposite -- they use the OO extensions that most Cobol programmers never use, at all. If you are in an IBM Enterprise Cobol shop, there really isn't a need to port. The two languages inter-operate nicely and you can replace new parts with Java and still interact well. But the best way to truly port from Cobol to Java is to learn both languages and paradigms well; document the existing functionality of the Cobol system in great detail; then design and write a new OO style Java system that will also have that functionality.
