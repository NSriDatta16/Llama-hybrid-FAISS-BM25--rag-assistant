[site]: stackoverflow
[post_id]: 4959346
[parent_id]: 
[tags]: 
How to clean up AVCaptureSession in applicationDidEnterBackground?

I have an app that uses AVCaptureSession to process video. I like to write with zero memory leaks, and proper handling of all objects. That's why this post - How to properly release an AVCaptureSession - was tremendously helpful - Since [session stopRunning] is asynchronous, you can't just stop the session and continue to release the holding object. So that's solved. This is the code: // Releases the object - used for late session cleanup static void capture_cleanup(void* p) { CaptureScreenController* csc = (CaptureScreenController*)p; [csc release]; // releases capture session if dealloc is called } // Stops the capture - this stops the capture, and upon stopping completion releases self. - (void)stopCapture { // Retain self, it will be released in capture_cleanup. This is to ensure cleanup is done properly, // without the object being released in the middle of it. [self retain]; // Stop the session [session stopRunning]; // Add cleanup code when dispatch queue end dispatch_queue_t queue = dispatch_queue_create("capture_screen", NULL); dispatch_set_context(queue, self); dispatch_set_finalizer_f(queue, capture_cleanup); [dataOutput setSampleBufferDelegate: self queue: queue]; dispatch_release(queue); } Now I come to support app interruptions as a phone call, or pressing the home button. In case application enters background, I'd like to stop capturing, and pop my view controller. I can't seem to do it at the applicationDidEnterBackground context. dealloc is never called, my object remains alive, and when I reopen the app the frames just start coming in automatically. I tried using beginBackgroundTaskWithExpirationHandler but to no avail. It didn't change much. Any suggestions? Thanks!
