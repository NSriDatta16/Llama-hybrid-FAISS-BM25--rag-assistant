[site]: crossvalidated
[post_id]: 88173
[parent_id]: 88171
[tags]: 
Look at $\chi$ distribution, it's a square root of $\chi^2$ distribution, which is in turn a sum of squared normals. CORRECTION: $R(n)^2=\sum_{i=1}^n x_i+\sum_{i=1}^n y_i = \sum_{i=1}^{2n}z_i$, where $z_i=x_i$ for $i=(1,n)$ and $z_i=y_{i-n}$ for $i=(1+n,2n)$. Hence, $R(n) = \sigma r(2n)$, where $r(k)\sim \chi(k)$. $E[r(2n)]=\mu$, where $\mu=\sqrt{2}\Gamma((2n+1)/2)/\Gamma(n)$ The variance $Var[r(2n)]=(2n-\mu^2)$, see $\chi$ distribution . Subsequently, $E[R(n)]=\sigma E[r(2n)]$ and so on. UPDATE: the CDF is given by the regularized gamma function : $P(n,r(2n)^2/(2))$. To compute the confidence bounds CB you have to solve for CB in $P(2n,CB^2/2)=\alpha$, where $\alpha$ is the confidence, such as 5% or 95%. CB will be in units of $\sigma$. Your math library should have the regularized gamma function, if it doesn't have its inverse then use the solver to find the CBs. RESTATED problem I think that it's best to redefine the $R(n)=\frac{1}{n}\sum_{i=1}^n r_i=\frac{1}{n}\sum_{i=1}^n\sqrt{X_i^2+Y_i^2}$. This means that you compute the distance $r_i$ for each pair of $(X_i,Y_i)$ coordinates, then average it acorss $n$ observation to get $R(n)$. Now, it's clear that $r_i^2\sim\chi^2_2$, assuming that X and Y are standardized normals, while $r_i\sim\chi_2$, i.e. chi distribution with 2 degrees of freedom. I gave the links to this distribution, you should be able to work out the math for non-standard normals. Next, $R(n)$ is the sum of $\chi_2$ distributed numbers, so CLT should be applicable. For n=30 CLT should work great. I would run Monte Carlo then test it with Jarque-Bera or similar tests of normality for smaller n. If it's normal enough, then do the CLT for R(n), while working with closed-forms of $r_i$. Example: $(\mu_X,\mu_Y)=(0,0)$, $\sigma_X=\sigma_Y=1$, $\sigma_{X,Y}=0$. $E[R(1)]=E[r_1]=\mu=\sqrt{2}\frac{\Gamma(\frac{2+1}{2})}{\Gamma(1)}=1.2533$ $Var[R(1)]=Var[r_1]=2\cdot 1-\mu^2= 0.4292$ You can test this with the following Matlab/Octave code: m=1e6 % number of samples n=1 % number of X and Y to compute R mu = 0*ones(2,1); % set ZERO means Sig = eye(2); % set unit variance x = mvnrnd(mu,Sig,m*n)'; % generate X,Y pairs x = permute(reshape(x,2,n,m),[3,2,1]); % X and Y in 3 dim matrix r = sqrt(sum(x.^2,3)); R = mean(r,2); % R(n) hist(R) % show the histogram jbtest(R) % test normality [mean(R) std(R) var(R)] Which outputs: ans = 1.2519 0.6551 0.4291 Now you can run the same for higher n=30, and get the output: ans = 1.2534 0.1197 0.0143 Applying the CLT approximation you get $Var[R(30)]_{CLT}=Var[R(1)]/30=0.0143$, very good match, and here's the histogram:
