[site]: stackoverflow
[post_id]: 655494
[parent_id]: 
[tags]: 
Inheritance Mapping with Fluent NHibernate

Given the following scenario, I want map the type hierarchy to the database schema using Fluent NHibernate. I am using NHibernate 2.0 Type Hierarchy public abstract class Item { public virtual int ItemId { get; set; } public virtual string ItemType { get; set; } public virtual string FieldA { get; set; } } public abstract class SubItem : Item { public virtual string FieldB { get; set; } } public class ConcreteItemX : SubItem { public virtual string FieldC { get; set; } } public class ConcreteItemY : Item { public virtual string FieldD { get; set; } } See image The Item and SubItem classes are abstract. Database Schema +----------+ +---------------+ +---------------+ | Item | | ConcreteItemX | | ConcreteItemY | +==========+ +===============+ +===============+ | ItemId | | ItemId | | ItemId | | ItemType | | FieldC | | FieldD | | FieldA | +---------------+ +---------------+ | FieldB | +----------+ See image The ItemType field determines the concrete type. Each record in the ConcreteItemX table has a single corresponding record in the Item table; likewise for the ConcreteItemY table. FieldB is always null if the item type is ConcreteItemY . The Mapping (so far) public class ItemMap : ClassMap { public ItemMap() { WithTable("Item"); Id(x => x.ItemId, "ItemId"); Map(x => x.FieldA, "FieldA"); JoinedSubClass ("ItemId", MapConcreteItemX); JoinedSubClass ("ItemId", MapConcreteItemY); } private static void MapConcreteItemX(JoinedSubClassPart part) { part.WithTableName("ConcreteItemX"); part.Map(x => x.FieldC, "FieldC"); } private static void MapConcreteItemY(JoinedSubClassPart part) { part.WithTableName("ConcreteItemX"); part.Map(x => x.FieldD, "FieldD"); } } FieldB is not mapped. The Question How do I map the FieldB property of the SubItem class using Fluent NHibernate? Is there any way I can leverage DiscriminateSubClassesOnColumn using the ItemType field? Addendum I am able to achieve the desired result using an hbm.xml file: How do I accomplish the above mapping using Fluent NHibernate? Is it possible to mix table-per-class-hierarchy with table-per-subclass using Fluent NHibernate?
