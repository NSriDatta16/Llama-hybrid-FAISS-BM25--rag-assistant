[site]: stackoverflow
[post_id]: 4714737
[parent_id]: 4714625
[tags]: 
At the surface, yes the design makes sense ... but in my experience (YMMV of course) I've found that trying to start by designing a deep object hierarchy from the get-go results in decisions that will limit you later. Since every game is unique, I have better results when I just start coding, adding elements to the game, and refactoring as I go. If there are two classes with similar functionality, then I either make them inherit from a common base, or refactor out into a common class which can be re-used. That gives you the best of both worlds. to your second question, the way that I wholehearted suggest you organize your game is by using the game state management sample: http://create.msdn.com/en-us/samples/gamestatemanagement download the sample, and learn it well ... it's a tried and true pattern
