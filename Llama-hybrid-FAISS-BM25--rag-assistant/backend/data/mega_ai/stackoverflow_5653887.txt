[site]: stackoverflow
[post_id]: 5653887
[parent_id]: 5552426
[tags]: 
I found what I was looking for (I made use of Brian Wilson's Stateful Storage class from his blog post http://bradwilson.typepad.com/blog/2011/02/advanced-aspnet-mvc-3-presentation.html ): [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)] public class MaximumAttemptBeforeRedirectAttribute : FilterAttribute, IActionFilter { readonly IStatefulStorage _storage = StatefulStorage.PerSession; private readonly int _maxAttempt; private readonly RedirectToRouteResult _newRoute; private string _keyName; public MaximumAttemptBeforeRedirectAttribute(int attempts, string controller, string action) { _maxAttempt = attempts; var rvDic = new RouteValueDictionary {{"action", action}, {"controller", controller}}; _newRoute = new RedirectToRouteResult(rvDic); } Attempts GetCount(string name) { return _storage.GetOrAdd(name, () => new Attempts()); } public void OnActionExecuted(ActionExecutedContext filterContext) { _keyName = string.Format("{0}{1}Attempts", filterContext.RouteData.Values["controller"], filterContext.RouteData.Values["action"] ); var errCount = filterContext.Controller.ViewData.ModelState.Values.Where(v => v.Errors.Count != 0).Count(); if (errCount > 0) //If errors, increment attempt count by 1 { GetCount(_keyName).Increment(); } else //If no errors, reset attempt count. { GetCount(_keyName).Reset(); } if (GetCount(_keyName).Number This allows me to add the following to my ActionResult or to my Controller: [HttpPost, MaximumAttemptBeforeRedirect(4, "MyController", "SomeAction")]
