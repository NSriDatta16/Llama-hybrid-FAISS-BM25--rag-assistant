[site]: stackoverflow
[post_id]: 684687
[parent_id]: 684302
[tags]: 
It sounds to me like you are just asking if a path exists between two vertices in an undirected graph, but not necessarily what that path might be. This is the same as asking if the two vertices are in the same connected component of the graph. If you really do only need to know if the two vertices are in the same connected component, then there is a simple and efficient algorithm using a Disjoint-set data structure . initialize the disjoint set structure (DSS) for each edge: for each vertex in edge: if the vertex does not exist in the DSS: create a new subset in the DSS containing only the vertex merge the subsets of the two vertices To determine if a path exists between two vertices after processing all the edges, just check if the two vertices are in the same subset. If they are, then some path exists between them. With an efficient implementation of the DSS, this algorithm achieves just slightly worse than linear time, and even with a simple linked-list implementation of the DSS it's O(n * log(n)). As j _ random _ hacker mentions, Floyd-Warshall is O(n^3) time and O(n^2) storage no matter if you are only calculating transitive closure or not, and using Dijkstra's algorithm requires an O(n * log(n)) calculation for each query.
