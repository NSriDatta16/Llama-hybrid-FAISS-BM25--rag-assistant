[site]: stackoverflow
[post_id]: 1338463
[parent_id]: 1338281
[tags]: 
Assuming that your database is assigning sequential IDs to the comments, you can do this: class Comment named_scope :most_recent, lambda { lastest_comments = Comment.maximum :id, :group => "user_id, post_id" { :conditions => [ "comment_id in ?", lastest_comments.map(&:last) ] } } end This gives you a two-query method that you can use in a variety of ways. The named_scope above pulls back the most recent comments for all users on all posts. This might be a problem if your database is gigantic, but you can certainly add conditions to make it more specific. As it stands, it is a flexible method that allows you to do the following: Comment.most_recent.find_by_user @user #-> the most recent comments on all posts by a user @user.comments.most_recent #-> same as above Comment.most_recent.find_by_post @post #-> the most recent comments on a single post by all users @post.comments.most_recent #-> same as above Comment.most_recent.find_by_user_and_post @user, @post #-> the specific most recent comment by a certain user on a certain post @post.comments.most_recent.find_by_user @user #-> you get the idea
