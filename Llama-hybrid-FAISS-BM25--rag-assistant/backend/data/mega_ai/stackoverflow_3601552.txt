[site]: stackoverflow
[post_id]: 3601552
[parent_id]: 3489907
[tags]: 
Firstly - as Michael pointed out, you should be using a div for msg status: Second - assuming the example file is called test.php, you're loading the entire content of the page back into the msgstatus sub-element (rather than just the SQL). You'd actually be doing this to infinity, except that browsers don't allow executable code to be posted in an AJAX reply (so the second embedded tier is being ignored). I'm assuming you've simplified out of your code, but following is the updated code based on what you posted. NOTE there's a bit of a style difference (feel free to ignore ;)!), you also included a BR in p.MESSAGEPOSTER when the paragraph was handling the newline (so I removed it). ".$row["Forename"]." ".$row["Surname"]." ".stripslashes($row["message"]." \n"; } } //Test for AJAX on the post - only output the values. if ($_REQUEST['ajax']==1) { latestPosts(); exit(); } ?> function createRequestObject() { var req; if(window.XMLHttpRequest){ // Firefox, Safari, Opera... req = new XMLHttpRequest(); } else if(window.ActiveXObject) { // Internet Explorer 5+ req = new ActiveXObject("Microsoft.XMLHTTP"); } else { // There is an error creating the object, // just as an old browser is being used. alert("Your Browser Does Not Support This Script - Please Upgrade Your Browser ASAP"); } return req; } // Make the XMLHttpRequest object var http = createRequestObject(); function sendRequest(page,vars) { // Open PHP script for requests http.open('get', page+'?'+vars); http.onreadystatechange = handleResponse; http.send(null); } function handleResponse() { if(http.readyState == 4 && http.status == 200){ // Text returned FROM the PHP script var response = http.responseText; if(response) { // UPDATE ajaxTest content document.getElementById("msgstatus").innerHTML = response; } } } function repeatloop() { sendRequest('test.php','ajax=1'); // replace "inbox-status.php" with your php page's url setTimeout("repeatloop()", 10000); } window.onload=function() {repeatloop();} Home Edit Profile Community Wall Logout Community Wall ?> Some other points: If you're going with an AJAX solution, you might want to consider leaving the box empty in the starting HTML (drop latestsPosts(); at line 118), and then load the list once the page is rendered. The way this is currently coded, every 10 seconds the complete list is reloaded by AJAX, you may want to track the latest post (perhaps by ID?) and pass that back to the AJAX command so that either: An update is only provided when there's been a change. (JS response processing would ignore an empty return - current code would overwrite status with blank) Only new entries are provided. (JS response processing would prepend the new response to the existing msgstatus object). Because this is a dynamic AJAX script you should be using the POST verb, not GET (it also requires some changes to how you post variables - the +'?'+vars in the http.open line needs to be in the body instead). Technically GET allows the browser to cache the results - I particularly notice this on Internet Explorer (ironically it seems they followed the W3C spec on this while the others don't). Long story short - some users may complain the messages don't stay up to date.
