[site]: stackoverflow
[post_id]: 3874183
[parent_id]: 3874117
[tags]: 
It still seems tome that there's some format in your files: >>> regex = r'^(.+)\b\s{2,}\b(.+)\s+(\d+)\s+(\d+)\s+(.+)\s+(\d+)' >>> for line in s.splitlines(): lst = [i.strip() for j in re.findall(regex, line) for i in j if j] print(lst) [] [] ['John Marshall', 'CSC', '78659944', '89989', 'BE', '900'] ['Think Code DB I10', 'MSC', '87782', '1231', 'MS', '878'] ['Mary 200 Jones', 'CIVIL', '98993483', '32985', 'BE', '898'] ['John G. S', 'Mech', '7653', '54', 'MS', '65'] ['Silent Ghost', 'Python Ninja', '788505', '88448', 'MS Comp', '887'] Regex is quite straightforward, the only things you need to pay attention to are the delimiters ( \s ) and the word breaks ( \b ) in case of the first delimiter. Note that when the line wouldn't match you get an empty list as lst . That would be a read flag to bring up the user interaction described below. Also you could skip the header lines by doing: >>> file = open(fname) >>> [next(file) for _ in range(2)] >>> for line in file: ... # here empty lst indicates issues with regex Previous variants: >>> import re >>> for line in open(fname): lst = re.split(r'\s{2,}', line) l = len(lst) if l in (2,3): lst[l-1:] = lst[l-1].split() print(lst) ['Name', 'Degree', 'CLASS', 'CODE', 'EDU', 'Scores'] ['--------------------------------------------------------------------------------------'] ['John Marshall', 'CSC', '78659944', '89989', 'BE', '900'] ['Think Code DB I10', 'MSC', '87782', '1231', 'MS', '878'] ['Mary 200 Jones', 'CIVIL', '98993483', '32985', 'BE', '898'] ['John G. S', 'Mech', '7653', '54', 'MS', '65'] another thing to do is simply allow user to decide what to do with questionable entries: if l Uhm, I was all the time under the impression that the second element might contain spaces, since it's not the case you could just do: >>> for line in open(fname): name, _, rest = line.partition(' ') lst = [name] + rest.split() print(lst)
