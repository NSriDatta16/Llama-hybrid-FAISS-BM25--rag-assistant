[site]: stackoverflow
[post_id]: 1269038
[parent_id]: 1220655
[tags]: 
Serialization won't help you, unless you are happy to store the serilized data somewhere, maybe as an xml fragment in a db table or as a file (yuk). It seems like the wrong approach to me but if you really wanted to use serialization there are many options. The simplest I can think of would be to serialize request.form collection to xml, either by using the xmlserializer or by looping though it and building an xml string yourself. My suggestion would be... If you are happy to use javascript, why not try and do this on the client? You could collect the data from the form on the click of a 'save' button, for example and save it in a cookie. When the user comes back you can check for the cookie and reload the data from the cookie. You'd only post the form data back to the server when the form is complete. This would avoid your DB constraints issue. Try this: http://www.bigresource.com/Tutorial/PHP/Saving_Form_Data_Into_A_Cookie.htm UPDATE Following comments: OK, if you want to take the approach of serializing your form you need to store the data somewhere. Based on what I think you want to do: If your form data fits in one single table I'd suggest that you have a 'replica table' without the db constraints and call it something like formDataHolding (where your original was fomrData). You'd read and write from this table and only migrate the data when the form data is complete, I use the word migrate meaning that data leaves the holding table and goes into the complete table somehow. If your form comprises of data that fits in several tables, then serialization may well be the right answer but be prepared to store this data somewhere, in a way that might not sit well with your existing data model, or be prepared to create 'replica tables' without the constraints, for all the tables that store the data. Serializing the data doesn't necassarily mean that you are creating xml, but I'll assume this is what you want. I'd take the approach of getting back the NameValueCollection from Request.Form and then serializing it. You may want to do this different if you're using webforms. Here is a url for someone who has serialized a NameValueCollection: http://nayyeri.net/blog/Serialize-NameValueCollection/
