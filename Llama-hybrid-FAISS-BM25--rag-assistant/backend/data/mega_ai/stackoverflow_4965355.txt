[site]: stackoverflow
[post_id]: 4965355
[parent_id]: 
[tags]: 
Converting statvfs to percentage free correctly

I have a terribly uncomplicated test program that prints out the following numbers. i.e. int main(int argc, char* argv[]) struct statvfs vfs; statvfs(argv[1], &vfs); printf("f_bsize (block size): %lu\n" "f_frsize (fragment size): %lu\n" "f_blocks (size of fs in f_frsize units): %lu\n" "f_bfree (free blocks): %lu\n" "f_bavail free blocks for unprivileged users): %lu\n" "f_files (inodes): %lu\n" "f_ffree (free inodes): %lu\n" "f_favail (free inodes for unprivileged users): %lu\n" "f_fsid (file system ID): %lu\n" "f_flag (mount flags): %lu\n" "f_namemax (maximum filename length)%lu\n", vfs.f_bsize, vfs.f_frsize, vfs.f_blocks, vfs.f_bfree, vfs.f_bavail, vfs.f_files, vfs.f_ffree, vfs.f_favail, vfs.f_fsid, vfs.f_flag, vfs.f_namemax); return 0; } Prints out: f_bsize (block size): 4096 f_frsize (fragment size): 4096 f_blocks (size of fs in f_frsize units): 10534466 f_bfree (free blocks): 6994546 f_bavail free blocks for unprivileged users): 6459417 f_files (inodes): 2678784 f_ffree (free inodes): 2402069 f_favail (free inodes for unprivileged users): 2402069 f_fsid (file system ID): 12719298601114463092 f_flag (mount flags): 4096 f_namemax (maximum filename length)255 df prints out for the root fs: Filesystem 1K-blocks Used Available Use% Mounted on /dev/sda5 42137864 14159676 25837672 36% / But here is where I'm confused. 25837672+14159676 != 42137846 (actually 39997348) Therefore if I were to do the calc 14159676 / 42137864 * 100 I get 33% not 36% as df prints. But if I calc 14159676 / 39997348 * 100 I get 35%. Why all the discrepencies and where is df getting the number 42137864? Is it related to some conversion to 1k blocks vs the actual system block size which is 4k? This will be integrated into my caching app to tell me when the drive is at some threshold... e.g. 90% before I start freeing fixed size blocks that are sized in 2^n sizing. So what I'm after is a function that gives me a reasonably accurate %used. EDIT: I can now match what df prints. Except for the %Used. It makes we wonder how accurate all this is. What is the fragment size? unsigned long total = vfs.f_blocks * vfs.f_frsize / 1024; unsigned long available = vfs.f_bavail * vfs.f_frsize / 1024; unsigned long free = vfs.f_bfree * vfs.f_frsize / 1024; printf("Total: %luK\n", total); printf("Available: %luK\n", available); printf("Used: %luK\n", total - free); EDIT2: unsigned long total = vfs.f_blocks * vfs.f_frsize / 1024; unsigned long available = vfs.f_bavail * vfs.f_frsize / 1024; unsigned long free = vfs.f_bfree * vfs.f_frsize / 1024; unsigned long used = total - free; printf("Total: %luK\n", total); printf("Available: %luK\n", available); printf("Used: %luK\n", used); printf("Free: %luK\n", free); // Calculate % used based on f_bavail not f_bfree. This is still giving out a different answer to df??? printf("Use%%: %f%%\n", (vfs.f_blocks - vfs.f_bavail) / (double)(vfs.f_blocks) * 100.0); f_bsize (block size): 4096 f_frsize (fragment size): 4096 f_blocks (size of fs in f_frsize units): 10534466 f_bfree (free blocks): 6994182 f_bavail (free blocks for unprivileged users): 6459053 f_files (inodes): 2678784 f_ffree (free inodes): 2402056 f_favail (free inodes for unprivileged users): 2402056 f_fsid (file system ID): 12719298601114463092 f_flag (mount flags): 4096 f_namemax (maximum filename length)255 Total: 42137864K Available: 25836212K Used: 14161136K Free: 27976728K Use%: 38.686470% matth@kubuntu:~/dev$ df Filesystem 1K-blocks Used Available Use% Mounted on /dev/sda5 42137864 14161136 25836212 36% / I get 38% not 36. If calculated by f_bfree I get 33%. Is df wrong or is this just never going to be accurate? If this is the case then I want to lean on the side of being conservative.
