[site]: stackoverflow
[post_id]: 4749982
[parent_id]: 
[tags]: 
Generic POST request using Microsoft.HttpClient and HttpContentExtensions

I am using the extremely awesome HttpClient provided in the WCF REST Starter Kit. I have the following method that is working against the HelloTxt API: public UserValidateResponse Validate() { HttpClient client = new HttpClient(baseUrl); HttpMultipartMimeForm form = new HttpMultipartMimeForm(); form.Add("app_key", this.AppKey); form.Add("user_key", this.UserKey); HttpResponseMessage response = client.Post("user.validate", form.CreateHttpContent()); return response.Content.ReadAsXmlSerializable (); } I have a nice generic GetRequest method that looks like this: public T GetRequest (string query) { HttpClient client = new HttpClient(baseUrl); client.DefaultHeaders.UserAgent.AddString(@"http://www.simply-watches.co.uk/"); HttpResponseMessage response = client.Get(query); response.EnsureStatusIsSuccessful(); T data = default(T); try { data = response.Content.ReadAsXmlSerializable (); return data; } catch (Exception ex) { Console.Write(String.Format("{0}: {1}", ex.Message, ex.InnerException.Message)); } return data; } The benefit of which is that you can pass it T as the response type as per this random example: public List GetUsers(int deptid) { string query = String.Format("department.getUsers?api_key={0}&dept_id={1}", this.APIKey, deptId); return GetRequest >(query); } I now want to the same generic style POST method, rather than GET and I'm sure I can use the HttpContentExtensions, but I can't figure out how to transform the request into a HttpMultipartMimeForm. this is what I have so far: public T PostRequest (string query, K request) { HttpClient client = new HttpClient(baseUrl); // the following line doesn't work! Any suggestions? HttpContent content = HttpContentExtensions.CreateDataContract (request, Encoding.UTF8, "application/x-www-form-urlencoded", typeof(HttpMultipartMimeForm)); HttpResponseMessage response = client.Post(query, content); response.EnsureStatusIsSuccessful(); T data = default(T); try { data = response.Content.ReadAsXmlSerializable (); return data; } catch (Exception ex) { Console.Write(String.Format("{0}: {1}", ex.Message, ex.InnerException.Message)); } return data; } It would be called like this: UserValidateResponse response = PostRequest ("user.validate", new UserValidateRequest(this.AppKey, this.UserKey)); It is to work against this API: http://hellotxt.com/developers/documentation . Any suggestions are extremely welcome! I could define a different form for each POST, but it would be nice to do this generically.
