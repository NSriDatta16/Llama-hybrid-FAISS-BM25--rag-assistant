[site]: stackoverflow
[post_id]: 2074964
[parent_id]: 2064735
[tags]: 
Thanks for your suggestions. The problem I was having was accessing the value of my custom filter so that I could use it to change the columns displayed. In the end, this is how I achieved it: In my FormFilter class, I configured my custom widget and added a validator. This forced me to add a method (add%sColumnQuery) to process the value, in which I added the value to the user object in order to store it for retrieval elsewhere (usually this method would be used to alter the query). See below: class ExpenditureFormFilter extends BaseExpenditureFormFilter { public function configure() { parent::configure(); $years = range((int)date("Y", strtotime(sfConfig::get('app_view_min_period'))), (int)date("Y", strtotime(sfConfig::get('app_view_max_period')))); $this->widgetSchema['start_period'] = new sfWidgetFormDate(array( 'format' => '%month%/%year%', 'can_be_empty' => false, 'months' => array_combine(range(1, 12), array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')), 'years' => array_combine($years, $years) )); $this->widgetSchema->setLabels(array( 'start_period' => 'Start period', )); $this->validatorSchema['start_period'] = new sfValidatorMonthYear( array( 'min' => strtotime(sfConfig::get('app_view_min_period')), 'max' => strtotime(sfConfig::get('app_view_main_period')) ), array( 'required' => true ) ); } public function getFields() { $fields = parent::getFields(); $fields['start_period'] = 'Date'; return $fields; } protected function addStartPeriodColumnQuery($query, $field, $value) { sfContext::getInstance()->getUser()->setAttribute('start_period', $value); } } I then overrode the auto-generated _list_td_tabular.php partial (easily done just by creating a copy with the same name in the modules template directory), and within this I was able to access the user object, and therefore my filter value like so: $start_period = sfContext::getInstance()->getUser()->getAttribute('start_period'); So now I am able to use this value to dynamically generate the columns to display in the list template - mission accomplished :) I would love to know if there is a better way of course, but this works for me! Regards, Matt.
