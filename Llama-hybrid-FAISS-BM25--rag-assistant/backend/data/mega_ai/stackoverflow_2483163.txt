[site]: stackoverflow
[post_id]: 2483163
[parent_id]: 2481664
[tags]: 
Using ASPNET MVC can make this super easy. Even if you've never used ASPNET MVC, it will be easy for you to employ it in your ASP.NET app. You'll need a Controller, and at least one Action. The action should return a JsonResult. it looks like this in code: using System.Collections.Generic; using System.Web.Mvc; using System.Web.Mvc.Ajax; namespace MvcApplication1.Controllers { public class DemoController : Controller // the name is used in the URL { public JsonResult LinkList(int? arg) // the name is used in the URL { var = new List (); // build the list here. You could also use an existing one. foreach (string link in linkSet) list.Add(link); return this.Json(list, JsonRequestBehavior.AllowGet); } } } Drop that into the App_Code sub-directory of the ASPNET app. That method is like a [WebMethod] in ASMX, but it generates JSON. To invoke it, do a GET on http://server/vdir/Demo/LinkList . The "Demo" part is the name of the Controller class, less the suffix "Controller". The "LinkList" in the url path is the name of the method on the controller. It needs to be public. The json this method generates will look like this: [ "http://jvcpbdvcj/scbwkthoxlng/lhxktjght/zgfd/cuuenirukwag", "http://vskwkzpwaxn/eeitpup/twwshynjjcw/lblxdx/rwljaqicfgpz", "http://foczucekdl/ljap/napvchbkcs", .... ] It's just a simple 1-D array of links. To make the necessary request from the browser is very simple using jQuery. $.ajax({ url : "http://myserver/vdir/Demo/LinkList", type : "GET", // http method cache : false, success : function(result) { // called on successful (200) reply .... } }); In the success function, you can iterate on the list, emitting elements or whatever you like into your document. Like this: success : function(result) { if (result !== null){ for(var i = 0; i link ' + i + ' '; $('#output').append(onelink); } } } Of course, you can add to that to make it more elaborate. You can parameterize the GET request. You could change the shape of the outgoing JSON so that it's an object with various properties (timestamp, id, whatever you like), and not just a simple array. You can be more elegant on the browser side when producing the list of links. There are lots of other options. But you get the idea. ASPNET MVC is much preferable to ASMX when servicing browser clients, because of its built-in support for JSON serialization, and because of the super simple model. Notice I did not have to set the content type explicitly, or create JSON manually, or fiddle with other stuff on the Response, and so on. It just works. Related: How can I implement a site with ASP.NET MVC without using Visual Studio?
