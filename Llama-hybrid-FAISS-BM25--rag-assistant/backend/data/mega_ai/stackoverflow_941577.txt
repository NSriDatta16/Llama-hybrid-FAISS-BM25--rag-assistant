[site]: stackoverflow
[post_id]: 941577
[parent_id]: 941536
[tags]: 
Domain Driven Design books (the quickly version is freely avaible here ) can give you insights into this. In a nutshell, they suggest the following approach: the model objects transverse from model tier to view tier seamlessly (this can be tricky if you are using static typed languages or different languages on clinet/server, but it is trivial on dynamic ones). Also, services should only be used to perform action that do not belong to the model objects themselves (or when you have an action that involves lots of model objects). Also, business logic should be put into model tier (entities, services, values objects), in order to prevent the famous anemic domain model anti pattern. This is another approach. If it suits you, it depends a lot on the team, how much was code written, how much test coverage you have, how long the project is, if your team is agile or not, and so on. Domain Driven Design quickly discusses it even further, and any decision would be far less risky if you at least skim over it first (getting the original book from Eric Evans will help if you choose to delve further).
