[site]: stackoverflow
[post_id]: 2886583
[parent_id]: 2879879
[tags]: 
Here's a version that combines going fast with using minimal memory. I use fwrite/fread so that you still can use parfor (and this time, I made sure it works :) ) %# assume data is loaded an k is known %# find the index pairs for comparisons. This could be done more elegantly, I guess. %# I'm constructing a lower triangular array, i.e. an array that has ones wherever %# we want to compare i (row) and j (col). Then I use find to get i and j [iIdx,jIdx] = find(tril(ones(k,k),-1)); %# create a directory to store the comparisons mkdir('H_matrix_elements') savePath = fullfile(pwd,'H_matrix_elements'); %# loop through all comparisons in parallel. This way there may be a bit more overhead from %# the individual function calls. However, parfor is most efficient if there are %# a lot of relatively similarly fast iterations. parfor ct = 1:length(iIdx) %# make the comparison - do double b/c there shouldn't be a memory issue currentComparison = compare(data{iIdx(ct)},data{jIdx{ct}); %# create save-name as H_i_j, e.g. H_104_23 saveName = fullfile(savePath,sprintf('H_%i_%i',iIdx(ct),jIdx(ct))); %# save. Since 'save' is not allowed, use fwrite to write the data to disk fid = fopen(saveName,'w'); %# for simplicity: save data as vector, add two elements to the beginning %# to store the size of the array fwrite(fid,[size(currentComparison)';currentComparison(:)]); % ' #SO formatting %# close file fclose(fid) end %# to read e.g. comparison H_104_23 fid = fopen(fullfile(savePath,'H_104_23'),'r'); tmp = fread(fid); fclose(fid); %# reshape into 2D array. data = reshape(tmp(3:end),tmp(1),tmp(2));
