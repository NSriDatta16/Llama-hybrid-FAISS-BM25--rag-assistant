[site]: crossvalidated
[post_id]: 125528
[parent_id]: 3069
[tags]: 
I also have been an avid Matlab user for 10+ years. For many of those years I had no reason to work beyond the toolbox I had created for my job. Although many functions were created for a toolbox, I often needed to create algorithms for quick turnaround analysis. Since these algorithms often utilize matrix math, Matlab was an ideal candidate for my job. In addition to my Matlab toolbox of code, others in my group worked extensively in Java since there was clear interoperability between the languages. For years I was completely happy with Matlab, but about 3 years ago I decided to start the slow transition away from Matlab and happy to say I haven't opened it in about a year now. Here are the reason for my move: I work with online and offline computing systems, the licensing system was always a headache. It always seemed to happen that when we most needed Matlab, the license would expire or suddenly have issues. This was always a headache. Also, if we ever needed to share code, and the other party did not have licenses for the same toolboxes, this created a headache. It's not free I often need to create presentations. Even though Matlab provides extensive tools for creating figures, which makes it very powerful for algorithm design, but saving the figure such that it could be inserted into a presentation and look nice is no simple task. I often had to insert an EPS file into Adobe illustrator to remove all the garbage, fix the fonts, and clean up the lines. There are some tools to help with this on the file exchange though (export_fig.m). I often get Matlab code from others. When this happens, I almost always rewrite it because: their API is not compatible with my data, their code doesn't make sense, it's slow, it doesn't output what I need,... Basically people who develop in Matlab are not software engineers and Matlab does not encourage any type of design principle. I'm a power user. I like terminals. I hate the GUI--hate it. And when they added the "windows" style ribbon, I hated it some more. Basically their tweaks to the GUI and terrible memory management pushed my last button and I decided to leave. Using the -nodesktop option is good most of the time, but has it's issues. Many possibilities to design of functions (using OO, or functional design), but none feel right, most feel adhoc. I do not get satisfaction from designing good functions in Matlab The community is big, but isn't easy to share and find good code. The file exchange isn't that great. This is only a few of my many gripes with Matlab. It's one shining attribute: it's easy, really easy to write code quickly (if not ugly). I did leave it though, and my quest led me through Clojure->JavaScript->Python Julia ; yeah, I've been all over the place. Clojure: beautiful functional language. My reason for using Clojure was its ability to script Java. A lot of our "big" code base is in Java, so this made a lot of sense. At the time a lot of scientific processing was not readily available, and not a lot with visualization either. But I think this is changing. Javascript: after seeing the benchmarks at http://julialang.org/ , and since I was definitely interested in the visualization capability of D3 , I decided to try JavaScript. JavaScript is surprisingly very fast. But if you really want to hate yourself, learn JavaScript. Python: Python has an amazing community and has lots of great projects going on. The IPython Notebook is amazing for many reason (one of them being simple copy/past of figures into powerpoint). Projects like NumPy/SciPy/Scikit-Learn/Pandas have really made Python fun and easy to use. It's so easy to use on multiple cores or clusters. I've been really happy for the switch. Julia: Julia is amazing. Especially for Matlab users. It's in it's infancy though, so lots of changes going on. One of the major drawbacks to Python is it does not have all the built-in functionality that Matlab has. Sure NumPy/SciPy bring that functionality, but it's not built-in and you have to make decisions on whether to be pure python objects or numpy objects. Julia basically has everything you wish Python had coming from Matlab. I'd wait, but this is the best option for Matlab users in the future.
