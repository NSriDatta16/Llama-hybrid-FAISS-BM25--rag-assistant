[site]: stackoverflow
[post_id]: 929698
[parent_id]: 928563
[tags]: 
Common Lisp (SBCL) Number of characters: 251 (defun g(e)(if(numberp e)e(let((m (g (pop e)))(o(loop for x in e by #'cddr collect x))(n(loop for x in (cdr e)by #'cddr collect (g x))))(mapcar(lambda(x y)(setf m(apply x(list m y))))o n)m)))(defun w(e)(g(read-from-string(concatenate'string"("e")")))) Proper version (387 chars): (defun wrapper (exp) (golf-eval (read-from-string (concatenate 'string "(" exp ")")))) (defun golf-eval (exp) (if (numberp exp) exp (let ((mem (golf-eval (pop exp))) (op-list (loop for x in exp by #'cddr collect x)) (num-list (loop for x in (cdr exp) by #'cddr collect (golf-eval x)))) (mapcar (lambda (x y) (setf mem (apply x (list mem y)))) op-list num-list) mem))) Input is form w() , which takes one string argument. It uses the trick that nums/operands and operators are in the pattern N O N O N ... and recursively evaluates all operands, and therefore getting nesting very cheap. ;)
