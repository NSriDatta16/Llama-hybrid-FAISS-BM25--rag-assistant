at instead the consequent of the rule is represented through a polynomial function (usually constant or linear). An example of a rule with a constant output would be:In this case, the output will be equal to the constant of the consequent (e.g. 2). In most scenarios we would have an entire rule base, with 2 or more rules. If this is the case, the output of the entire rule base will be the average of the consequent of each rule i (Yi), weighted according to the membership value of its antecedent (hi): ∑ i ( h i ⋅ Y i ) ∑ i h i {\displaystyle {\frac {\sum _{i}(h_{i}\cdot Y_{i})}{\sum _{i}h_{i}}}} An example of a rule with a linear output would be instead:In this case, the output of the rule will be the result of function in the consequent. The variables within the function represent the membership values after fuzzification, not the crisp values. Same as before, in case we have an entire rule base with 2 or more rules, the total output will be the weighted average between the output of each rule. The main advantage of using TSK over Mamdani is that it is computationally efficient and works well within other algorithms, such as PID control and with optimization algorithms. It can also guarantee the continuity of the output surface. However, Mamdani is more intuitive and easier to work with by people. Hence, TSK is usually used within other complex methods, such as in adaptive neuro fuzzy inference systems. Forming a consensus of inputs and fuzzy rules Since the fuzzy system output is a consensus of all of the inputs and all of the rules, fuzzy logic systems can be well behaved when input values are not available or are not trustworthy. Weightings can be optionally added to each rule in the rulebase and weightings can be used to regulate the degree to which a rule affects the output values. These rule weightings can be based upon the priority, reliability or consistency of each rule. These rule weightings may be static or can be changed dynamically, even based upon the output from other rules. Applications Fuzzy logic is used in control systems to allow experts to contribute vague rules such as "if you are close to the destination station and moving fast, increase the train's brake pressure"; these vague rules can then be numerically refined within the system. Many of the early successful applications of fuzzy logic were implemented in Japan. A first notable application was on the Sendai Subway 1000 series, in which fuzzy logic was able to improve the economy, comfort, and precision of the ride. It has also been used for handwriting recognition in Sony pocket computers, helicopter flight aids, subway system controls, improving automobile fuel efficiency, single-button washing machine controls, automatic power controls in vacuum cleaners, and early recognition of earthquakes through the Institute of Seismology Bureau of Meteorology, Japan. Artificial intelligence Neural networks based artificial intelligence and fuzzy logic are, when analyzed, the same thing—the underlying logic of neural networks is fuzzy. A neural network will take a variety of valued inputs, give them different weights in relation to each other, combine intermediate values a certain number of times, and arrive at a decision with a certain value. Nowhere in that process is there anything like the sequences of either-or decisions which characterize non-fuzzy mathematics, computer programming, and digital electronics. In the 1980s, researchers were divided about the most effective approach to machine learning: decision tree learning or neural networks. The former approach uses binary logic, matching the hardware on which it runs, but despite great efforts it did not result in intelligent systems. Neural networks, by contrast, did result in accurate models of complex situations and soon found their way onto a multitude of electronic devices. They can also now be implemented directly on analog microchips, as opposed to the previous pseudo-analog implementations on di