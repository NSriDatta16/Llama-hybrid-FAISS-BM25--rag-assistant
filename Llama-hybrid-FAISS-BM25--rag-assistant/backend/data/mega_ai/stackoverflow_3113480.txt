[site]: stackoverflow
[post_id]: 3113480
[parent_id]: 3113409
[tags]: 
And yet, of all the programming languages of which I am aware, none of them have gone all-out and decided that their main design goal would be to conquer the complexity of developing and maintaining programs. Almost every single language is based on conquering complexity. There is no other aim worth pursuing. Assembly, C++, Java, Python, and virtually every other language in existence is based on making programming easier. How is python good at conquering complexity? Python definitely has some of the most intuitive syntax of any language IMHO. Its use of block indenting solves a lot of problems, and most of it is as close to plain language as you should get . M = [x for x in S if x % 2 == 0] is a good example, see any python book for countless more. Is the shorter and more terse syntax of Python a key way to conquer complexity? I believe the simple syntax of python is a good way of conquering complexity. However, that's the only definitive answer I can give to your other query: What do you think about conquering complexity? You are asking the question that is the entire core of language theory, which encompasses battles that will probably rage until the end of time. static vs dynamic typing is one such debate. There are mounds of other developments in language theory like Procedural vs OO vs Functional languages and Aspect Oriented Programming that try to simplify programming. Look at the latest (or any) release of a language to see some examples of what's being done to 'conquer complexity'. There is never going be one definitive answer, and a full discussion of each approach would take a few months to read, and would probably completely change by the time your were done. :D
