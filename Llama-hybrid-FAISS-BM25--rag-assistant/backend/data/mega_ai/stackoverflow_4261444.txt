[site]: stackoverflow
[post_id]: 4261444
[parent_id]: 4261194
[tags]: 
A1-a? Brave man. A1-b was annoying enough... where I shoehorned everything into RGB. Inelegant, but effective. IIRC, output intents take over when you don't have Something Else specified. So if you have an RGB intent, any deviceRGB color you use will fall under that intent. From a strictly logical standpoint, I wouldn't think a black-n-white image would need color correction. It's... BLACK AND WHITE. Hard to go wrong there. Color precision isn't much of a goal at that point. OTOH, the PDF/A1 spec requires that all colors have the proper output intent: "All colours shall be specified in a device-independent manner, either directly by the use of a device-independent colour space, or indirectly by the ouse of an OutputIntent. " Is there such a thing as a device-independant BW color space? It seems ludicrous. Ah, this sounds promising. "6.2.4 Images: .... Use of the Intent key shall conform to the rules given in 6.2.9" "6.2.9 Rendering intents Where a rendering intent is specified, its value shall be one of the four values defined in PDF Reference RelativeColorimetric, AbsoluteColorimetric, Perceptual or Saturation . NOTE: The default rendering intent is RelativeColorimetric . " Err, wait. That's a rendering intent, not an output intent. Fooey. Ah, there's a way to map colors from the image to some specific color space, right? So just map it to your existing OutputIntent. Time to switch references... Ah, Image Dictionaries, General, table 89. ColorSpace. name or array. /DeviceGray should do the trick. If that doesn't do the trick, you might have to create an /Indexed color space with DeviceGray or DeviceRGB values that will pass whatever validation system you're using (presumably Acrobat pro 9's preflight check, that's what I used). Short answer: Set the image's ColorSpace to DeviceGray. Failing that, whip up an /Indexed color space with values defined within a color space that your validator will accept.
