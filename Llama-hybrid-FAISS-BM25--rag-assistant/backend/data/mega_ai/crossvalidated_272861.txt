[site]: crossvalidated
[post_id]: 272861
[parent_id]: 271161
[tags]: 
Thank you for the comments which were helpful. I don't have a general answer, and it could be interesting to know how to manage this problem in general (for example, how to detect roads from satellite mapping?). For my data, I rotate the figure to obtain a relation of the form Latitude = f(Longitude). This is not very general but worked for my task. One way to automate this rotation is to do some PCA (see How to perform dimensionality reduction with PCA in R for example), however it will not work for the example plotted here. After rotation, I can apply a regression (I lose the symmetry between Longitude and Latitude though). Finally, I get back to the original data. Here is the code and the result: rotate = function(x, theta) { exp_theta = cos(theta)+ 1i * sin(theta) out = ((x[1]+1i*x[2])*exp_theta)[[1]] return(c(Re(out), Im(out))) } theta = -0.15 k_gam = 15 rotate_M = t(apply(M, 1, rotate, theta = theta)) colnames(rotate_M) = c("x", "y") ## Smooth this rotated line with gam library(mgcv) smooth_line = gam(y ~ s(x, k = k_gam), data = data.frame(rotate_M)) ## Predict for all the range range_predict = range(rotate_M[,1]) to_predict = seq(from = range_predict[1], to = range_predict[2], length.out = 1000) fitted_line = cbind(to_predict, predict(smooth_line, newdata = data.frame(x = to_predict))) ## Get back to the original space out = t(apply(fitted_line, 1, rotate, theta = -theta)) ## Output result plot(M) lines(out, col = "red")
