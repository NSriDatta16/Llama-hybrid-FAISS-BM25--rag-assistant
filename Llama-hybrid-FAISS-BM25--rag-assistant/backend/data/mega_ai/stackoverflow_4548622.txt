[site]: stackoverflow
[post_id]: 4548622
[parent_id]: 4548515
[tags]: 
There's no way to just write a binary struct out like that and have it readable by any system. While you can use some library that defines types like int32 , that doesn't solve your problem. Different processors use different byte orders, and may require different alignment. Further, padding is implementation-dependent. Fortunately, all current processors I'm aware of use twos-complement for integer representation rather than ones-complement or sign-magnitude, so integers at least have the same binary representation (modulo byte order). No #pragma can be a truly portable solution, since they're by definition implementation-defined, and you can't be certain that different compilers will treat them the same. There are some more specifiers being worked on for the next C++ standard, but they're not going to be all that common for some time. What you are going to have to do is specify the struct with something like int32 , and then break it down into a stream of bytes and build it back up again on the other end. Look up "serialization".
