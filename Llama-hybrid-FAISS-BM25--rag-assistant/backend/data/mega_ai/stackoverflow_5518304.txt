[site]: stackoverflow
[post_id]: 5518304
[parent_id]: 5517698
[tags]: 
When writing assignment operators and copy constructors, always do this: struct MyClass { MyClass(const MyClass& x) { // Implement copy constructor. Don't check for // self assignment, since &x is never equal to *this. } void swap(MyClass& x) throw() { // Implement lightweight swap. Swap pointers, not contents. } MyClass& operator=(MyClass x) { x.swap(*this); return *this; } }; When passing x by value to the assignment operator, a copy is made. Then you swap it with *this , and let x 's destructor be called at return, with the old value of *this . Simple, elegant, exception safe , no code duplication, and no need for self assignment testing. If you don't know yet about exceptions, you may want to remember this idiom when learning exception safety (and ignore the throw() specifier for swap for now).
