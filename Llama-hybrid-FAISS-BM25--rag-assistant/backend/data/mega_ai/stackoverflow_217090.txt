[site]: stackoverflow
[post_id]: 217090
[parent_id]: 216094
[tags]: 
bbxbby, the best solution is usually the simplest one. You are definitely not overcomplicating things creating separate iterator object. In fact, PHP supports and encourages such aggregation providing IteratorAggregate interface. Objects implementing IteratorAggregate must contain getIterator() method returning Iterator . It is really what your getChocolated() method does. The nice thing about IteratorAggregate is that you can pass an object of it directly to foreach loop. Your code might look like like this one when using it: class BoxOfChocolates implements IteratorAggregate private $chocolates = array(); public function getIterator() { return new ArrayIterator(new ArrayObject($this->chocolates))); } } And then, somewhere in the code: $box = new BoxOfChocolates(); foreach ($box as $chocolate) { ... }
