[site]: stackoverflow
[post_id]: 5198448
[parent_id]: 3659451
[tags]: 
This must be an issue with the transformer implementation. I've created a small test class that reads a String with no whitespace or line breaks as XML and creates a transformer from an XSLT stylesheet (also from a String). The stylesheet specifies that indentation must happen. This is basically another way of achieving what you've done with transformer.setOutputProperty(OutputKeys.INDENT, "yes"); Here it is: package transformation; import java.io.StringReader; import javax.xml.transform.Result; import javax.xml.transform.Source; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.xml.transform.stream.StreamResult; import javax.xml.transform.stream.StreamSource; public class TransformerTest { public static void main(String[] args) throws Exception { final String xmlSample = " hello "; final String stylesheet = " "; final TransformerFactory factory = TransformerFactory.newInstance(); final Source xslSource = new StreamSource(new StringReader(stylesheet)); final Transformer transformer = factory.newTransformer(xslSource); final Source source = new StreamSource(new StringReader(xmlSample)); final Result result = new StreamResult(System.out); transformer.transform(source, result); } } Now the curious thing is, results vary based on the transformer I use. If I don't place any TransformerFactory implementation on the classpath (using the default implementation in the JRE libs), the result is this: hello Not correct, since the tag isn't indented. Then, by adding a recent Xalan implementation on the classpath (xalan.jar and serializer.jar, still using JRE default parsers/DOM builders), I get this: hello Still not correct, the first tag is on the same line as the XML declaration AND isn't indented. To be honest, this quite shocked me. I'd understand if whitespace between tags or around text nodes would influence the indentation, as the transformer might assume some of it is non-ignorable. But to see a straightforward XML like that mangled is plain weird. I thought perhaps using the console output might have something to do with it, so I tried streaming to a file. Same result. Kind of weird how long-standing transformer implementations still have such behaviour. But not nearly as bad as when I noticed using a Validator of a Schema resulted in attributes being dropped from the "enhanced" XML output. So it would seem there's not much to be done about this, apart from trying to find other processors and see if they're having the same problem. Maybe Saxon is worth a shot. This bug report is interesting too (it is for Java 1.5, however): https://bugs.java.com/bugdatabase/view_bug?bug_id=6296446
