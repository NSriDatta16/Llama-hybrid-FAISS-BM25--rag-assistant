[site]: stackoverflow
[post_id]: 1442816
[parent_id]: 1442786
[tags]: 
Er, yes - trivially (rough code warning): // your class function function MyClass(params) { this.foo = params.foo; this.bar = params.bar; // etc... } // object or array to maintain dynamic list o instances var instances = []; // create instances in storage object instances.push(new MyClass({foo:123, bar:456})); instances.push(new MyClass({foo:'abc', bar:'def'})); // or alternately by key instances['mykey'] = new Myclass({foo:'argle',bar'bargle'}); Don't create a static array because there's just no need when a dynamic structure is trivial enough. Perhaps I'm missing something from your question? Edit: update with more illustrative code based on your earlier question, yet another way to solve the problem. At this point however this is kind of a teaching thing only. If this was real application I would advise you to model all of this in a server side language - JS is really for controlling UI behaviour not business object modelling. var Restaurant = { Order : function (params) { this.id = params.id; this.table = params.table; this.items = []; this.number_of_items = 0; if(!Restaurant.Order.prototype.addItem) { Restaurant.Order.prototype.addItem = function (item) { // assuming name is unique let's use this for an associative key this.items[item.name] = item; this.number_of_items++; //returning the item let's you chain methods return item; } } }, Item : function (params) { this.name = params.name; this.quantity = params.quantity; this.unit_price = params.unit_price; if(!Restaurant.Item.prototype.price) { Restaurant.Item.prototype.price = function () { return this.quantity * this.unit_price; } } }, orders : [], addOrder : function (order) { // assuming id is unique let's use this for an associative key this.orders[order.id] = order; //returning the item let's you chain methods return order; } } with (Restaurant) { with (addOrder( new Restaurant.Order({id:123, table:456}) )) // chaining! { addItem( new Restaurant.Item({name: 'foo', quantity: 10, unit_price: 10}) ); addItem( new Restaurant.Item({name: 'bar', quantity: 100, unit_price: 1}) ); } } var num_items = Restaurant.orders[123].items['foo'].price(); // returns 100
