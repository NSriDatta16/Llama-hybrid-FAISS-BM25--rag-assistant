[site]: stackoverflow
[post_id]: 1894376
[parent_id]: 1894217
[tags]: 
Is it memory safe to provide an object as a function result? It is possible, but it needs attention from the implementor and the call. Make it clear for the caller, the he controls the lifetime of the returned object Make shure you don't have a memory leak when the function fails. For example: function CreateBibleNames: TStrings; begin Result := TStringList.Create; try Result.Add('Adam'); Result.Add('Eva'); Result.Add('Kain'); Result.Add('Abel'); except Result.Free; raise; end; end; But in Delphi the most commen pattern for this is: procedure GetBibleNames(Names: TStrings); begin Names.BeginUpdate; try //perhaps a Names.Clear here //but I don't use it often because the other //way is more flexible for the caller Names.Add('Adam'); Names.Add('Eva'); Names.Add('Kain'); Names.Add('Abel'); finally Names.EndUpdate; end; end; so the caller code can look like this: procedure TForm1.btn1Click(Sender: TObject); var Names: TStrings; i:integer; begin Names := CreateBibleNames; try for i := 0 to Names.Count -1 do ShowMessage(Names[i]); finally Names.Free; end; end; and the other, more common version: procedure TForm1.btn1Click(Sender: TObject); var Names: TStrings; i:integer; begin Names := TStringList.Create; try GetBibleNames(Names); for i := 0 to Names.Count -1 do ShowMessage(Names[i]); finally Names.Free; end; end; (I have no compiler at the moment, so perhaps there are some errors)
