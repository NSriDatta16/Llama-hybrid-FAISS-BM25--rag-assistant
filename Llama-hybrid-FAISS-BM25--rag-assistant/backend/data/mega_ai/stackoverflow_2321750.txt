[site]: stackoverflow
[post_id]: 2321750
[parent_id]: 2263417
[tags]: 
Gregor Hohpe wrote a nice summary of the various approaches for handling errors remotely: Your Coffee Shop Doesnâ€™t Use Two-Phase Commit In brief: Write-off : do nothing, or discard the work done. Retry : retry the parts that failed. Easier if you design your service to be idempotent , so that it may be run repeatedly with the same input with no ill effects. Compensating action : provide a service with a compensating action that lets you undo the work so far. Transaction coordinator : the traditional two-phase commit. Theoretically ideal, hard to pull of in practice, lots of buggy middleware out there. However, in your case, it may be that the remote API is too fine grained. Do you really need setGroupCapacity as a separate service? How about just providing addUserToGroup , and letting the service handle any necessary capacity increase internally? That way, the entire transaction could be contained in a single service call. Your current API also opens for concurrency issues and race conditions. What if, between the call to getNumberOfItemsInGroup and setGroupCapacity , some other thread manages to add a user? Your request will fail because the other thread "stole" your capacity increase.
