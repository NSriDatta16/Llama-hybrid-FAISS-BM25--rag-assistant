[site]: stackoverflow
[post_id]: 4697658
[parent_id]: 4697170
[tags]: 
I can see decorator comes into play here, but I am not too sure about using observer here. It seems forced. Several things: CondimentDecorator need to a have a beverage to decorate. It doesn't show in your UML. Think of it as a wrapper around something, similar to Adapter pattern. A wrapper need something to wrap on. You clearly didn't show that. On your cost behavior interface, why would the concrete decorators implemented it, but the concrete beverages do not, and yet, the beverage has cost also in it? I'd just have beverage interface inherit from cost behavior interface and be done with it. #2 also applies to the getDescription method... create an IDescribable? or something and have beverage implement that. Decorator will get it through inheritance. You need to convince me why would a condiment need to know when the price change? At the moment, this seems a bit forced to me. I don't see how observer is needed here (logically / design-wise). It seems to me that you want to force an observer pattern into this design for no good reason other than you must have it. This is a classic pattern gung-ho thing for someone that just learn about design pattern. Not trying to be offensive, just stating the fact. I was once such a person as well :). My suggestion is to read up again on the Head First Design Pattern book (which I think where you get this examples :), very similar domain) and get a better understanding on both patterns and when to use them. Below is an example of decorator and observer working together. The drink combination is an implementation of decorator. The ordering system is an observer (where the order will notify the pager and the pager will do something). The scenario here is a StarBuck coffee shop where they'll give you a pager so you can go around doing something while your drink is being processed and you will get notified by the pager once the drink is ready. Save the sample as drink.cs and you can easily compile this using csc ( C:\Windows\Microsoft.Net\Framework\v3....\csc /target:exe /out:drink.exe drink.cs) and run it or use VS or whatever :). using System; using System.Collections.Generic; public interface IBeverage { string GetDescription(); decimal GetCost(); } public abstract class Beverage : IBeverage { protected string _name; protected decimal _cost; public Beverage(string name, decimal cost) { _name = name; _cost = cost; } public virtual string GetDescription() { return _name; } public virtual decimal GetCost() { return _cost; } } public class Macchiato : Beverage { public Macchiato() : base("Macchiato", 3.50m) {} } public abstract class BeverageDecorator : Beverage { IBeverage _baseBeverage; public BeverageDecorator(IBeverage baseBeverage) : base("", 0m) { _baseBeverage = baseBeverage; } public override string GetDescription() { return _name + " " + _baseBeverage.GetDescription(); } public override decimal GetCost() { return _cost + _baseBeverage.GetCost(); } } public class Caramel : BeverageDecorator { public Caramel(IBeverage baseBeverage) : base(baseBeverage) { _name = "Caramel"; _cost = 0.50m; } } public class Venti : BeverageDecorator { public Venti(IBeverage baseBeverage) : base(baseBeverage) { _name = "Venti"; _cost = 1.00m; } } public class Iced : BeverageDecorator { public Iced(IBeverage baseBeverage) : base(baseBeverage) { _name = "Iced"; _cost = 0.25m; } } public class Order { IBeverage _beverage; IPager _pager; public Order(IBeverage beverage, IPager pager) { _beverage = beverage; _pager = pager; } public IPager Pager { get { return _pager; } } public IBeverage Beverage { get { return _beverage; } } } public class OrderProcessing { Queue orders = new Queue (); public void NewOrder(IBeverage beverage, IPager pager) { orders.Enqueue(new Order(beverage, pager)); } public void ProcessOrder() { if (orders.Count > 0) { var order = orders.Dequeue(); order.Pager.Update(order); } } } public interface IPager { void Update(Order order); } public class VibratingPager : IPager { string _number; public VibratingPager(string number) { _number = number; } public void Update(Order order) { Console.WriteLine("BUZZZ"); Console.WriteLine("Your {0} is ready. Please pay {1} at the cashier after picking it up.", order.Beverage.GetDescription(),order.Beverage.GetCost()); } } public class Program { public static void Main(string[] args) { var orders = new OrderProcessing(); var pager1 = new VibratingPager("1"); var pager2 = new VibratingPager("2"); orders.NewOrder(new Iced(new Venti(new Caramel(new Macchiato()))), pager1); orders.NewOrder(new Venti(new Macchiato()), pager2); orders.ProcessOrder(); orders.ProcessOrder(); } }
