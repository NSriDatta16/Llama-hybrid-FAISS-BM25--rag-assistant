[site]: stackoverflow
[post_id]: 3844278
[parent_id]: 3844196
[tags]: 
There isn't one -- and that's a feature. eval is doing an evaluation of a form that was generated dynamically at runtime. So, if it needs to know about local bindings, then you'd need to compile (lamba (x) x) and (lambda (y) y) differently -- because the name matter. But this is just the tip, there's a whole bunch of issues around implementing this kind of feature. As for your problem -- even if it was possible to do what you want to, it's a fragile solution that depends on name. Remember that in Scheme you can use functions like any other value -- so instead of calling get-type and combining it with some symbol to get a name, make your objects contain the function that is needed (which at that point would be better called "method"). Something like: (define (area object) ((get-area-method object) object)) Obviously doing this means that there's little point in not going the whole way with: (define (area object) (get-area object)) which is just (define area get-area) But the first might be more typical of a general OO-like system, with a way to get methods, so it might be useful for you. That direction could take you to: (define (area object) ((get-method object 'get-area) object))
