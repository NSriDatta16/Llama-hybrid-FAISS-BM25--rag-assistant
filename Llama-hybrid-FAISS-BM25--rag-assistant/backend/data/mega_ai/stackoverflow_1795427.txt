[site]: stackoverflow
[post_id]: 1795427
[parent_id]: 377632
[tags]: 
XSLT is your friend for converting the XML database file to the format you want to display on the web-page. You create an XSL template that includes all the HTML you want for each record and then iterate through the XML file with a for-each statement. I'll give a rough overview and can help with more details if needed. Here's the generic PHP file I use to do XSLT (process an XML file with an XSL file) via AJAX. This one is setup to work with required (and optional, if desired) inputs passed in a GET call from the browser. p#n and p#v (see comments at top of code below) are parameter and value pairs to be passed into the XSL document in cases where you want to use some input parameter to affect the output. In this case output is echoed back to the browser. Here's the PHP to run the XML database through and XSLT transformation to create the HTML for your web display (table, or whatever you put in the XSL file template): load($xmlPath); $xsl = new DOMDocument; $xsl->load($xslPath); // Configure the transformer $proc = new XSLTProcessor; $proc->importStyleSheet($xsl); // attach the xsl rules //Set Parameter(s), if present $xslParamCount = $_GET['pCount']; //Check number of xsl parameters specified in GET for ($i=1; $i setParameter( '', $xslParamName, $xslParamValue); //Set parameters for XSLTProcessor } // TRANSFORM echo $proc->transformToXML($xml); // SET Mime Type $mime = "application/xhtml+xml"; $charset = "iso-8859-1"; header("Content-Type: $mime;charset=$charset"); ?> Below is an example of an XSL file template taking an XML database document and converting it to HTML for insertion in a web page. Note the HTML span tags. All the xsl tags are processing instructions that determines what goes in and around the HTML tags in the template. In this case, we are filtering results and choosing appropriate data to display based on input parameters passed into the XSL file (see xsl:param items at near top): preferredTest Preferred test for this product Alternate (not preferred) test for this product - see note to right Preferred test for this product Alternate (not preferred) test for this product - see note to right Server Error: GET must specify matchType parameter value of 'localUse', 'notLocalUse', 'nottestId', or '' (for all) matchType received: Note that all the xsl tests are XPath expressions. To delete a row you can have a button on that row that calls a JavaScript function with the "this" argument (see onClick='remProdLink(this)' in code above) to reference the row, and then grab the unique identifier of the row in JavaScript something like this: function remProdLink(obj){ //get unique id via Dom from passed in object reference //edit everything after "obj" below to get to the unique id in the record var testCode = obj.parentNode.parentNode.firstChild.nextSibling.innerHTML; //code to send AJAX POST to server with required information goes here } On the server end, your PHP receives the AJAX POST with the unique identifier, loads the XML database file into simpleXml, finds the node via XPath, and removes it, something like this: xpath("//testCode[@id=$testCode]"); //import simpleXml reference into Dom to do removal $dom2 = dom_import_simplexml($targets[0]); $dom2->parentNode->removeChild($dom2); //format xml to save indented tree (rather than one line) and save $dom = new DOMDocument('1.0'); $dom->preserveWhiteSpace = false; $dom->formatOutput = true; $dom->loadXML($xml->asXML()); $dom->save('yourDatabase.xml'); ?> As for editing an item, you can have another JavaScript function called similarly to the one for deleting as noted above, create a form under that item on the web page with a save changes button, and when that button is pressed call another JavaScript function to AJAX POST to the server, again similarly to deleting. Only this time your POST will need to include all the information that could have been edited in the record along with the record's unique ID. PHP file will find the appropriate record (same as for deleting), and then you can either edit parts of that record in PHP, or just remove it and the create and append the new version of the record. I'm not sure how many details you need. Hopefully this gives you a good start. Please comment on my answer if you need more details on any part of it. Good luck!
