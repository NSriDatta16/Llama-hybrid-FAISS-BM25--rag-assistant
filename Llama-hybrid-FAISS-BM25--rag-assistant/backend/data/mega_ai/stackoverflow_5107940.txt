[site]: stackoverflow
[post_id]: 5107940
[parent_id]: 5105217
[tags]: 
There is no "standard" csv reader/writer for C or C++. That doesn't mean you can't find some preexisting library code to use, but there is no one library to rule them all. In my job we make heavy use of csv files so I went ahead and rolled my own so as to have as fit for my workflow as possible. I can tell you some of the things I've done in my library that have worked out reasonably well, should you want to also do your own thing: I keep the data as a vector of vectors of boost::any. I let the user specify what the format of the data is in the constructor, similar to how you would pass a format to scanf. This keeps the user from having to do their own casts. I use boost::tokenize and boost::lexical_cast to the actual splitting and casting. This obviously won't work well if your csv files can't fit in memory, but that is rarely a problem for me. I can have a templated get() that does the any_cast and returns the correct data. I have a hash of column names to their index so as to support look ups by column name rather than just positional look ups I allow the user to specify a "primary key" of some combination of columns and then keep a hash such that for each row you have a mapping of the values in the key -> row number. For instance, if you are reading equities data, you might want to find the row based on the CUSIP or ticker, rather than interate over the entire data to find your row. Let the user specify a size hint so you can reserve() in your storage Let the user specify callback functions so that he can process and filter lines he doesn't want as you read/write them Allow the user to specify if the file needs to be locked when reading/writing Allow the user to pass in his own column header for files that do not have the header in the file Not to get into a language debate, but this library was really a port of something I originally did in perl, and damned if it wasn't 10 times easier to write and 10 times more user friendly to use in perl. I don't recommend doing csv processing in C++ if you can help it.
