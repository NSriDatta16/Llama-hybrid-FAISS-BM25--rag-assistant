[site]: stackoverflow
[post_id]: 4971644
[parent_id]: 4958173
[tags]: 
There are a couple things that require correction in the original sample: By default, Ext.NET Button Components do not AutoPostBack (ie, reload the entire page). It is encouraged to use DirectEvents (Ajax call) if you want to communicate with the server and avoid a complete page reload. Ext.NET Components should be added to the parent .Items Collection, instead of the .Controls Collection. Here's a complete demo with both these corrections. Example protected override void OnInit(EventArgs e) { Ext.Net.Button btn = new Ext.Net.Button(); btn.Text = "Submit (AutoPostBack)"; btn.Click += Button1_Click; // 1. Set to AutoPostBack, default is "false" btn.AutoPostBack = true; // 2. Add Button to .Items Collection this.ViewPort1.Items.Add(btn); base.OnInit(e); } protected void Button1_Click(object sender, EventArgs e) { X.Msg.Notify("Server Time", DateTime.Now.ToLongTimeString()).Show(); } Ext.NET Example Now, I'd recommend changing your AutoPostBack Button Click event to a DirectEvent Click. That would require making the following three revisions to the code-behind. Example protected override void OnInit(EventArgs e) { Ext.Net.Button btn = new Ext.Net.Button(); btn.Text = "Submit (DirectEvent)"; // 2. CHANGE to .DirectClick btn.DirectClick += Button1_Click; // 3. REMOVE btn.AutoPostBack = true; this.ViewPort1.Items.Add(btn); base.OnInit(e); } // 3. CHANGE "EventArgs" to "DirectEventArgs" protected void Button1_Click(object sender, DirectEventArgs e) { X.Msg.Notify("Server Time", DateTime.Now.ToLongTimeString()).Show(); } Hope this helps.
