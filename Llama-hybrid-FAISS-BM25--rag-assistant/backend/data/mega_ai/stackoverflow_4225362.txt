[site]: stackoverflow
[post_id]: 4225362
[parent_id]: 4223500
[tags]: 
Thre are a few options, but the first question is whether you want to use task-based or data-parallel solution. I recently wrote a few articles about parallel programming in F# , so you may find a few articles from the series useful. Data-parallel . If you have a purely CPU-bound operation that is data-parallel , then the best options are Use the PSeq module from F# PowerPack if you have some more complicated declarative data processing. You can find an introduction in my article Using PLINQ and Tasks from F# . Use Array.Parallel.map function from the standard F# librar if you need just a simple map operation. Task-based CPU-bound . If data-parallel doesn't fit your problem very well, then you can use .NET 4.0 Tasks or F# asynchronous workflows and the StartAsChild member. Tasks do not support cancellation and look a bit ugly in F#, but they are probably more optimized (if you want to create a really large number of them). On the other hand, F# asynchronous workflows look more elegant in F#. I wrote two articles that compare the options. The first one explains basic features and the second one talks about cancellation. There is also message passing using F# agents, which may work quite well if you have something that requires complicated coordination (and would be otherwise written using a lot of synchronization primitives and mutable state)
