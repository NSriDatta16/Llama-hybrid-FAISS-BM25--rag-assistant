[site]: stackoverflow
[post_id]: 3167557
[parent_id]: 3167162
[tags]: 
If you construct the whole HTML text using simple steps, some of the difficulties will disappear. So, by taking your example, you want to encode the following query parameter: M&S When you embed this string as a query parameter in a URL, you have to urlencode it, as you already know. The urlencoded string is M%26S . The complete URL then looks like this: http://10.0.0.195/program.exe?Qry147=M%26S&sortmethod1=147 Now this URL is embedded in JavaScript code, and in this case you only need single quotes at both ends: 'http://10.0.0.195/program.exe?Qry147=M%26S&sortmethod1=147' The whole JavaScript code looks like this: AJAX_Get('http://10.0.0.195/program.exe?Qry147=M%2526S&sortmethod1=147') Now this whole text is used in an HTML context that is interpreted as a URL, so you need to urlencode it again: AJAX_Get('http://10.0.0.195/program.exe?Qry147=M%2526S&sortmethod1=147') And finally, since you are embedding this text in HTML, you need to htmlescape it: AJAX_Get('http://10.0.0.195/program.exe?Qry147=M%2526S&amp;sortmethod1=147') That's why you end with: Refresh I usually avoid these encoding challenges by not putting the string M&S directly into the onclick event or the anchor. In general, you cannot encode the onclick event and the anchor in the same way, since the decoding process for both is different: onclick: html -> js -> url anchor: html -> url -> js -> url But wait ... if you write a helper function like this, it works: function myQuery(q) { var encodedQ = encodeURIComponent(q); // TODO: which character encoding is used here? var url = 'http://10.0.0.195/program.exe?Qry147=' + encodedQ + '&sortmethod1=147'; var response = AJAX_Get(url); // TODO: handle errors } Now you can write: anchor event This trick works because there is no % anymore in the anchor case.
