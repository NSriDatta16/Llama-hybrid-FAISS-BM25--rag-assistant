[site]: stackoverflow
[post_id]: 303648
[parent_id]: 303456
[tags]: 
Write Code: In this article Jeff Atwood talks about how to become better at designing and writing software by designing and writing a lot of software. His is stated more elegantly, but it is a valid point. The more you do something, the better you will get at it. Hardware: Any modern PC/Mac hardware should suffice. If you plan to run Windows or Linux I would use a PC over Mac. There is a lot of clamor over which is better, but use the one you like the best. It should be a moot point in this day and age, but make sure you have some sort of reliable internet connectivity (cable, dsl, whatever...). Then you will have access to Google and stackoverflow ; both good resources for programmers. Make sure you have a keyboard and mouse which are comfortable to you. This includes setting up your desk and chair to accommodate your height and hand position. You will be at the computer for long stretches of time, and you want to be comfortable. Editor/IDE: Choose an editor: Vim, EMACS, KATE, Eclipse, whatever . It doesn't really matter which one, but whichever one you do pick learn it well. The editor is your main tool and you want to be comfortable and knowledgeable when using it. The better you know your editor the faster you can create/edit code. It helps to have an editor that runs on all platforms you may be developing on, but it is not necessary. Build Tools: At some point you will find your self face to face with having to create or fix a build stystem. Make is pretty standard for *nix and C/C++, but for your own personal projects find the one that suits you best. There are a lot to choose from: Scons, Ant, Make, Jam, ... I personally use SCons, since it is python based, and I like python. Books: When learning a new topic I would recommend getting a good book on it. This will generally give you a good overview of what you are getting into, and give you a good foundation to learn from. Google and Stackoverflow are good for specific questions, but a general overview of a topic is harder to get. This of course assumes you have the luxury of time and money. For the monetarily constrained you can often find free versions of electronic books online. Languages: I used to have strong feelings about which languages to learn, but now I realize you should write in the language you enjoy most. However don't be afraid to try new languages. I personally like C++, python, and C# in no particular order. Since you are just starting out pick the languages which you can get for free, which I actually think is most languages these days. In the business world the language of choice tends to fluctuate on about a 5-7 year cycle. However you can find a job (at least currently) in all the "big" languages (C++, JAVA, C# VB.net, python, ruby, perl, ...). If you learn one of the modern languages well, it is typically not a problem to transition to another language quickly. The libraries tend to take longer to learn than the language itself. So pick a language you like learning in and learn it. Miscellaneous Thoughts: As Marc Charbonneau said set up source control. There are plenty of free source control offerings, so pick the one you like best. Personally I use Perforce , which is free for two or less people. I ahve heard good things about Subversion and git as well. The specific one is not as important, but choose one of them. If you want to get a deeper knowledge of computing I would recommend Sipser's Book and Knuth . Whichever language you choose I would spend time learning the debugger for it as well. If you are doing web development, then make sure you know how to minimally setup and run Apachie (or IIS). Avoid holy wars if you can. They are a waste of time, and you don't learn anything from it except that people are stubborn. Some Holy war topics (bracket style, editors, endianess, "best" language, "best" OS, ...). My personal setup: Standard PC (Windows XP Pro) Visual Studio 2007 (a little behind). VIM Python C/C++ C# Scons Standard PC (FreeBSD runs headless: no GUI) gnu tool chain (Make, C/C++ etc) VIM python Scons
