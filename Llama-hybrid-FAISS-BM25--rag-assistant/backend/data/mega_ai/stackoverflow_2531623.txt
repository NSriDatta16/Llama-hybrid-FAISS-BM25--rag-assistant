[site]: stackoverflow
[post_id]: 2531623
[parent_id]: 2531619
[tags]: 
As the saying goes, there is no free lunch. Although some services offer free private Subversion repositories ( RiouxSVN , Springloops , etc.), these typically come with significant limitations (either in terms of the maximum storage size or number of users who may access the repository). Really, the decision comes down to whether you pay for a fully managed Subversion repository that is pre-configured (such as that offered by Cloud Forge or Beanstalk ) or whether, instead, you pay for an Infrastructure-as-a-Service (IaaS) cloud hosting service (such as Compute Engine , AWS EC2 , or Azure ) for a virtual machine and take responsibility for the setup of the Subversion server on that virtual machine instance, take responsibility for the security and access control of that virtual machine, and take responsibility for the domain name, SSL certificates, etc. that are used to access that server remotely over the Internet. There is also an in-between approach, such as using a third-party virtual machine image / configuration specifically for running a Subversion server on a cloud hosting provider (such as is the case with using the Cloud Launcher Subversion image provided by Bitnami , which simplifies the provisioning, maintenance, deployment, etc. of Subversion on Compute Engine). For all the different options / approaches, the tradeoff is typically between costs and hassle; using a cloud hosting provider and setting up a Subversion server yourself is more hassle but also cheaper. There is also a tradeoff in terms of risk / security; if you deploy a Subversion server on Compute Engine or in a VPC on AWS and do not expose the machine to the public Internet (so that it is only accessible to other VMs provisioned in that subnet / VPC), then the risk is relatively low; once you configure it to be accessible to the public Internet, however, then you need to consider whether you prefer owning that risk and the security of the VM yourself vs paying extra for a third party to manage that risk. Another trade-off to consider is flexibility; the do-it-yourself approach may allow you to customize elements of the Subversion server's behavior (such as details of how it authorizes users) that you may not be able to control as easily with a fully hosted option. Lastly, another trade-off to consider is the costs and ease of backing up the repository; if it's worth storing in a repository, it is likely also worth it to back-up; some solutions make it easier/cheaper to backup than others.
