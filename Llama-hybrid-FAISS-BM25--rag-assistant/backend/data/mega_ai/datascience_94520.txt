[site]: datascience
[post_id]: 94520
[parent_id]: 
[tags]: 
Incompatible shape error when trying to fit my model

I am using keras to make a CNN model. I have a dataset of images which consists of training and validation tfrecord files, the images in the tfrecords are grayscale. I load in the my 2 datasets by following the code from this kaggle notebook def decode_image(image_data): image = tf.image.decode_jpeg(image_data, channels=1) image = tf.cast(image, tf.float32) / 255.0 # convert image to floats in [0, 1] range image = tf.reshape(image, [75,75,1]) # explicit size needed for TPU return image def read_labeled_tfrecord(example): LABELED_TFREC_FORMAT = { # tf.string means bytestring 'height': tf.io.FixedLenFeature([], tf.int64), 'width': tf.io.FixedLenFeature([], tf.int64), 'channels': tf.io.FixedLenFeature([], tf.int64), "label": tf.io.FixedLenFeature([], tf.string), 'class': tf.io.FixedLenFeature([], tf.int64), "raw_img": tf.io.FixedLenFeature([], tf.string), } example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT) image = decode_image(example['raw_img']) label = tf.cast(example['class'], tf.int32) return image, label # returns a dataset of (image, label) pairs def load_dataset(filenames, ordered=False): # Read from TFRecords. For optimal performance, reading from multiple files at once and # disregarding data order. Order does not matter since we will be shuffling the data anyway. ignore_order = tf.data.Options() if not ordered: ignore_order.experimental_deterministic = False # disable order, increase speed dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order dataset = dataset.map(read_labeled_tfrecord, num_parallel_calls=AUTO) # returns a dataset of (image, label) pairs return dataset def get_training_dataset(): dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '/Data/train/*.tfrec')) dataset = dataset.repeat() # the training dataset must repeat for several epochs dataset = dataset.shuffle(2048) dataset = dataset.batch(BATCH_SIZE) dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size) return dataset def get_validation_dataset(): dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '/Data/valid*.tfrec'), ordered=False) dataset = dataset.batch(BATCH_SIZE) dataset = dataset.cache() dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size) return dataset training_dataset = get_training_dataset() validation_dataset = get_validation_dataset() After loading my data, I define a model and fit it like so: model = Sequential([ Conv2D(filters=64, kernel_size=(3, 3), activation='relu', padding='valid', input_shape=[75,75,1]), MaxPool2D(pool_size=(2, 2), strides=2), Conv2D(filters=32, kernel_size=(3, 3), activation='relu', padding='valid'), MaxPool2D(pool_size=(2, 2), strides=2), Flatten(), Dense(units=585, activation='softmax') ]) model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy']) model.fit( training_dataset, steps_per_epoch=STEPS_PER_EPOCH, epochs=EPOCHS, validation_data=validation_dataset ) But when I try to run my code, I am faced with the following error ValueError: Shapes (None, 1) and (None, 585) are incompatible How can I solve this issue?
