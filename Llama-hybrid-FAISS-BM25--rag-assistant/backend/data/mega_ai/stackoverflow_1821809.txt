[site]: stackoverflow
[post_id]: 1821809
[parent_id]: 1728160
[tags]: 
A related question was asked before: "Does functional programming replace GoF design patterns" , with great responses. The equivalent of "design patterns" is very vague in FP. In general, every time you see a "pattern" in your code you should create something to cover all of its uses in a uniform way. Often it will be a higher-order function. For example, the following C code for (int i = 0; i can be thought of some basic "design pattern" - checking if there's some special element on the list. This snippet could appear many times in code with different conditions. In FP, you simply use a higher order function several times. It's not a "pattern" anymore. Functional programming has its own practices, but they are much different from "design patterns" in OOP. They include use of polymorphism, lists, higher-order functions, immutability/purity, laziness [not all are essential or specific to FP]... See also "what are core concepts of FP" . Also, type classes (Haskell), modules and functors (OCaml), continuations , monads , zippers , finger trees , monoids , arrows , applicative functors , monad transformers , many purely functional data structures ( book ) etc. Functional pearls , already mentioned by Randall Schulz, form a very rich resource of FP at its best. To learn how to write idiomatic code, any book/resource on a functional programming language will suffice IMHO (for example, RWH and LYAH ); differences between thinking imperatively and functionally are always explained there. In dynamic languages, Jeff Foster's link is a good collection; here is a very clever use of memoization in JavaScript that could be considered a "design pattern".
