[site]: stackoverflow
[post_id]: 4541486
[parent_id]: 
[tags]: 
How do I create a class in Python that behaves like Django's abstract base class?

I'm using an existing Django library and I'm creating a class that I'd like to be abstract. Let's say the class in question is BaseFoo . Currently, the implementation has a base class BaseFoo . Each time a class extending BaseFoo is created, a metaclass adds it to a list of classes. It explicitly doesn't add BaseFoo by doing a hard-coded test for the class name: if name not in ('BaseFoo',): class_list.append(new_cls) I'd like to be able to write something like: class MyBaseFoo(BaseFoo): class Meta: abstract = True And have the metaclass skip all BaseFoo objects that are abstract. So I guess I'm wondering how Django does the same thing with models and whether there is an easy, elegant way to do this myself. I've looked through some of the code Django uses to define models but I could use some pointers. Also if there is an even easier way of doing this without necessarily using class Meta I'm open to that too. Note that I am not particularly thrilled by this solution: class MyBaseFoo(BaseFoo): abstract = True class ActualFoo1(MyBaseFoo): abstract = False class ActualFoo2(MyBaseFoo): abstract = False
