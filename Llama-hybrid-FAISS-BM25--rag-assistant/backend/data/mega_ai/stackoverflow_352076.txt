[site]: stackoverflow
[post_id]: 352076
[parent_id]: 
[tags]: 
Most pythonic form for mapping a series of statements?

This is something that has bugged me for some time. I learnt Haskell before I learnt Python, so I've always been fond of thinking of many computations as a mapping onto a list. This is beautifully expressed by a list comprehension (I'm giving the pythonic version here): result = [ f(x) for x in list ] In many cases though, we want to execute more than a single statement on x, say: result = [ f(g(h(x))) for x in list ] This very quickly gets clunky, and difficult to read. My normal solution to this is to expand this back into a for loop: result = [] for x in list: x0 = h(x) x1 = g(x0) x2 = f(x1) result.append(x2) One thing about this that bothers me no end is having to initialize the empty list 'result'. It's a triviality, but it makes me unhappy. I was wondering if there were any alternative equivalent forms. One way may be to use a local function(is that what they're called in Python?) def operation(x): x0 = h(x) x1 = g(x0) x2 = f(x1) return x2 result = [ operation(x) for x in list ] Are there any particular advantages/disadvantages to either of the two forms above? Or is there perhaps a more elegant way?
