[site]: stackoverflow
[post_id]: 3278569
[parent_id]: 3278238
[tags]: 
There's nothing directly in Key-Value Coding that will help you maintain inverse relationships. You could leverage Key-Value Observing to do so however. The main things you'll want to do are: Implement your own class equivalent to NSManagedObject, rather than just subclassing NSObject directly for your entity classes, since after all you can't be guaranteed arbitrary NSObject subclasses will work with the system you come up with. (Alternatively, you could codify everything they need in a protocol. EOF did this with the EOEnterpriseObject protocol.) Implement your own class equivalent to NSManagedObjectContext to handle the observation of instances of your entity classes, so it can tell them to do inverse maintenance at the appropriate time. Note that inverse maintenance triggered by KVO needs to not re-trigger KVO which would trigger inverse maintenance and so on. Implement your own class hierarchy equivalent to NSManagedObjectModel so your equivalent to NSManagedObjectContext knows what properties of instances of your entity classes can have inverse relationships, and what those are. Given all of that, you'll probably just want to use Core Data, because it already does all of that and has been extensively tuned over the years to do it quite well.
