[site]: crossvalidated
[post_id]: 502310
[parent_id]: 
[tags]: 
Designing an ML model for solving nonograms

The Problem I am trying to create a model to solve nonograms . I want to solve nonograms of any size $N\times N$ where $ \mathbb{N} \ni N\leq 10$ . (but actualy I will be happy with a fixed size for example being only able to solve $8\times 8$ nonograms. Which model Would be the best for this and how should the idea be implemented? Could you also recommend a platform for building such model? Should I use RL? Can a neural network solve such problem? I tried once but couldn't make it work, I will list my attempt here What I've tried I came up with this idea for an NN model to solve any board whos length is smaller than 10: I can represent each board of a size smaller than $N=10$ using a $10\times 10$ board (since if for example $N=5$ , meaning I only want a $5\times 5$ I can the $10\times 10$ board and simply focus only on the first five rows and column, giving me a 5x5 board as needed). So I will represent the board as a $10\times 10$ 2-D array (so when flat is of length 100), where at the end each cell should be colored either 1 or 0 (black or white). A colored board (solved board) should be the output of the NN. As you know, for each row and column we have constraints of how the board should be colored. We should use the constraints as input. since we have a $10\times 10$ board we will have maximum 5 constraints for each row/column ( $1, 1, 1, 1, 1, 1$ is already impossible since you can't color a row of length 10 like that, you may try it to convince yourselves). so for each row/column we will have an array of length 5 representing the constraints of that row/col (if we only have 3 constraints, for example 1,2,1 we will simply pad the array with zeros: $[1,2,1,0,0]$ . the amount of constraints arrays we will have is $cols + rows$ and since we have 10 of each we will have $10+ 10=20$ arrays. since each array has 5 elements we will feed the network with $20\cdot 5=100$ inputs. each input will be divided by 10 to normalize the data (since the highest element can be 10, meaning we color the whole row/col in 1's). so we will have 100 inputs and 100 outputs (is that problematic? not having more input than output?). Since we are kinda trying to classify each cell on the board (saying if its 1 or 0) I tried using Log Loss. I tried to train this model and it didn't work well at all, I gave it hours and hours to train and there was $0$ improvement, the model wasn't good at all. I can share the python-tensorflow code if this is relevant. How can this model be improved? Here's a link to the repo with the code
