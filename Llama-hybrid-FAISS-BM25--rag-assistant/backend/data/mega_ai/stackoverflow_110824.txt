[site]: stackoverflow
[post_id]: 110824
[parent_id]: 110684
[tags]: 
On most of embedded system i worked there was no profiling tools, so it's nice to say use profiler but not very practical. First rule in speed optimization is - find your critical path . Usually you will find that this path is not so long and not so complex. It's hard to say in generic way how to optimize this it's depend on what are you doing and what is in your power to do. For example you want usually avoid memcpy on critical path, so ever you need to use DMA or optimize, but what if you hw does not have DMA ? check if memcpy implementation is a best one if not rewrite it. Do not use dynamic allocation at all in embedded but if you do for some reason don't do it in critical path. Organize your thread priorities correctly, what is correctly is real question and it's clearly system specific. We use very simple tools to analyze the bottle-necks, simple macro that store the time-stamp and index. Few (2-3) runs in 90% of cases will find where you spend your time. And the last one is code review a very important one. In most case we avoid performance problem during code review very effective way :)
