[site]: stackoverflow
[post_id]: 3630743
[parent_id]: 3608403
[tags]: 
The correct answer was already given, you have to add the components to the AjaxTarget. However, for the sake of creating more "Wickety" code, you could rewrite your class to something like this: public class TestPage extends WebPage { private AjaxLink link1; private AjaxLink link2; public TestPage() { super(); final Model link1Model = new Model (Boolean.True); final Model link2Model = new Model (Boolean.False); link1 = new AjaxLink ("link1", link1Model) { private static final long serialVersionUID = 1L; @Override public void onClick(AjaxRequestTarget target) { this.getModel().setObject(!this.getModel().getObject()); target.addComponent(this); } }; link2 = new AjaxLink ("link2", link2Model) { private static final long serialVersionUID = 1L; @Override public void onClick(AjaxRequestTarget target) { this.getModel().setObject(!this.getModel().getObject()); target.addComponent(this); } }; link1.setOutputMarkupId(true); link2.setOutputMarkupId(true); link1.add(new AttributeModifier("class", true, new Model () { public String getObject() { return link1Model.getObject() ? "active" : "inactive"; } })); link2.add(new AttributeModifier("class", true, new Model () { public String getObject() { return link1Model.getObject() ? "active" : "inactive"; } })); add(link1); add(link2); } } It makes use of models and that is recommended in Wicket. However, there is heavy code duplication going on there, so I would maybe suggest going for a distinct component: public final class ActiveInactiveLink extends AjaxFallbackLink { public ActiveInactiveLink(String id) { super(id, new Model (Boolean.True)); this.add(new AttributeModifier("class", true, new Model () { public String getObject() { Model model = ActiveInactiveLink.this.getModel(); return model.getObject() ? "active" : "inactive"; } })); this.setOutputMarkupId(true); } @Override public void onClick(AjaxRequestTarget target) { this.getModel().setObject(!this.getModel().getObject()); target.addComponent(this); } @Override public void setModel(IModel model) { if(model == null) return; this.model = model; } } public class TestPage extends WebPage { private AjaxLink link1; private AjaxLink link2; public TestPage() { link1 = new ActiveInactiveLink("link1"); link2 = new AjaxLink ("link2"); add(link1); add(link2); } } All this stuff is not tested or compiled, of course, so no guarantees. :) Also, the guys from the Wicket mailing list will most definitely come up with something more elegant... Enjoy.
