[site]: crossvalidated
[post_id]: 386897
[parent_id]: 386765
[tags]: 
To your first point, you should not treat this problem as a regression one. The numbers 1-10 are being used to classify the wines into categories , and running a regression analysis will simply give you spurious output that has no meaning. The best way to treat this is as a classification problem, since the purpose of this exercise is to classify the wines into separate categories. Since you are training a neural network, the first task is to normalize the data. This is necessary for the neural network to have a common scale to interpret the output, otherwise the results will be spurious. I am using R for this example, but this could be accomplished with max-min normalization as follows: #Max-Min Normalization normalize For this example, I split the data into training and test, and used a (5,5) configuration to train the model with a 0.046 error: #Training and Test Data trainset Here are some sample results and a visual interpretation: > nn$result.matrix 1 error 0.046648449255 reached.threshold 0.009349419960 steps 231.000000000000 Intercept.to.1layhid1 0.483625433010 alcohol.to.1layhid1 -1.468753801323 malicacid.to.1layhid1 -0.929985197517 ash.to.1layhid1 -0.044339445361 ... 1layhid.4.to.2layhid5 -1.903071654581 1layhid.5.to.2layhid5 -0.018605013954 Intercept.to.wine -0.744974377985 2layhid.1.to.wine 7.280155712308 2layhid.2.to.wine 2.762637258209 2layhid.3.to.wine -5.718285548975 2layhid.4.to.wine 0.462473919655 2layhid.5.to.wine -1.786270757017 Neural Network Now that the network has been built, the next step is to test the resulting output against the test set, and use what is known as a confusion matrix to determine how accurately the model classifies the wines. > nn.results results $wine, prediction = nn.results$ net.result) > results actual prediction 101 0.5 0.2330174892958 102 1.0 0.9950191304006 103 1.0 0.9994186571103 104 1.0 0.9987668317395 105 0.5 0.5910452601308 ..... 174 1.0 0.9978374795947 175 0.0 0.0020009597702 176 0.0 0.0036695908245 177 0.0 0.0100022572455 178 0.5 0.3734674904247 > roundedresults roundedresultsdf=data.frame(roundedresults) > attach(roundedresultsdf) > table(actual,prediction) prediction actual 0 1 0 39 16 1 0 23 From the above, we can see that of the 78 test observations, 62 of them are indicated to have been classified correctly - giving us an accuracy rate of nearly 80% . As has been mentioned, this is assuming that there is no order between the observations in the dependent variable. If there are, it may be possible to use a regression-based neural network, but the danger is that your model would not have enough variation in the dependent variable (since there are only 10 values), and classification may be a better solution altogether for this reason.
