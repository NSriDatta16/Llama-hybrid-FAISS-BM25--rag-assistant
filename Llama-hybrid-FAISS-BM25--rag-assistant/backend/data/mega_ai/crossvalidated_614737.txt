[site]: crossvalidated
[post_id]: 614737
[parent_id]: 
[tags]: 
Compare blocks of different sizes from block averaging

This question is more generally related to block averaging but to set the scene: I am doing molecular dynamics simulations (e.g. computer simulations of atoms) wherein i have 3 repeats of a system. The repeats have identical starting structures but they have had their starting velocities generated independently. From these simulations i do various analyses for each "frame" of the simulation, leading to a situation where data for each frame is dependent on the previous frame. To account for this i decided to use block averaging. I am using a python package called "pyblock" to obtain the optimal number of blocks per repeat. The optimal number of blocks is however not the same for each repeat. Note that i am not highly skilled in statistics, so some of my questions may seem trivial to you, or be a bit unclear. My questions: Is there any statistical problem related to comparing multiple sets of block averaged data that contain different number of blocks (but the same number of underlying data points). What would be the "correct" way to go about doing statistics across all data sets (e.g. mean, standard deviation, variance, creating a box plot, etc.). Should one simply use the same number of blocks per dataset instead, and if so, then how would one choose which number of blocks to use, when the optimal number of blocks varies. Edit made on request for clarification on block averaging: Block averaging is the process of dividing a dataset into a number of smaller datasets, such that (in my case) the time-dependence of individual data points is eliminated. I took the following image from a quick google search which clearly shows the original data (blue), blocks (dashed vertical lines) and the block averages (yellow). The reason for why i am using block averaging is that i need to go from multiple sets of time-dependent data to a single time-independent statistical representation, such as a box plot. A more thorough explanation can be found in the documentation for pyblock :
