[site]: stackoverflow
[post_id]: 3082302
[parent_id]: 3082126
[tags]: 
Yes, except in cases where you know your stack can blow up. You can also change the size of the stack if necessary, it's different how on every OS but it's possible. The advantages of VLA are: Fast : adjusting the stack pointer and/or the frame pointer would have been done anyway so the cost of a VLA is nearly 0. Easy : a simple definition, no pointer to initialize, to check to free and no risk of memory leaks. It's automatically thread safe as each thread has its own stack. It has also better scaling as there's no need of locking, one problem that can arise when using malloc/free . Readable : it's really a simple concept, so less likely to introduce subtle bugs. It has some drawbacks: Size limited : as already said, the stack can blow up. Buffer overflows are a bit more serious than on heap memory (one can argue that it's an advantage, as a crashing application is better than a one silently corrupting data and eventually crashing on unrelated instructions). Portability : not all compilers implement it, but it can often be simulated by alloca (attention the semantic is a little bit different but nothing really serious).
