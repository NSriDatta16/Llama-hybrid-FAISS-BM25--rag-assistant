[site]: stackoverflow
[post_id]: 5238061
[parent_id]: 5238007
[tags]: 
It sounds like you might be confusing the class StringBuilder and the Builder Design Pattern. They are actually two very different ideas. StringBuilder is a class in Java and .NET that allows more performant string operations: (From MSDN) The String object is immutable. Every time you use one of the methods in the System.String class, you create a new string object in memory, which requires a new allocation of space for that new object. In situations where you need to perform repeated modifications to a string, the overhead associated with creating a new String object can be costly. The System.Text.StringBuilder class can be used when you want to modify a string without creating a new object. For example, using the StringBuilder class can boost performance when concatenating many strings together in a loop. The Builder Pattern on the other hand is a design pattern which is a set of classes and/or interfaces meant to organize complex code: The builder pattern is a software design pattern. The intention is to abstract steps of construction of objects so that different implementations of these steps can construct different representations of objects. Often, the builder pattern is used to build products in accordance to the composite pattern, a structural pattern. The Append method of StringBuilder simply adds more characters to the existing string. There are no new objects created (basic function of the builder pattern ) and there is no design pattern involved. It's a single method call to a single object instance.
