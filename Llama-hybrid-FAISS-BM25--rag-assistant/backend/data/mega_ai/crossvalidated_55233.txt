[site]: crossvalidated
[post_id]: 55233
[parent_id]: 50172
[tags]: 
Here's an approach which doesn't use any "contextual" information i.e. it fails to take into account the fact that "a sub is following a ship". On the other hand it is easy to start with: Denote by $x_{sub}(t), y_{sub}(t)$ $x_{ship}(t), y_{ship}(t)$ the coordinates of the submarine and the ship at time $t$, and define the "distance-series" by $x_{dist} (t) = x_{ship} (t) - x_{sub} (t)$ $y_{dist} (t) = y_{ship} (t) - y_{sub} (t)$ My suggestion is that you predict each of these separately (you can tie them together later). Let's take a moment to picture what these look like. Let's focus on the $x$-coordinate, and let's say that the ship is moving towards the right with the sub following behind it. Suppose the sub is around 100 meters behind the ship, with a deviation of say 10 meters. Then $x_{dist} (t) = 100 \pm 10 \cdot wiggle(t)$ You could then model the "$wiggle$" function as a Gaussian white-noise variable having zero mean and unit variance. Now (still focussing on the $x$ coordinate, the story for $y$ is the same) if the $wiggle$ function were white noise, you would be able to compute the mean $\mu$ and the standard deviation $\sigma$ of the series $x_{dist}$ and write $x_{dist}(t) = \mu + \sigma \cdot W_x(t)$ Since you have actual data, you can compute the time-series $W_x(t)$ and see if it follows a Gaussian (i.e. Normal) distribution. If it does, or even if it is any distribution you recognize, you could then generate values and make predictions for $x_{dist}$. Another strategy people employ (which I think will work for you) is that they break up their series into Polynomial base + Cyclic pattern + Bounded randomness In the case of a submarine and a ship, the polynomial part would probably be constant and the cyclic part a sum of sines and cosines (from the waves of the ocean...). This may not be the case for eye-tracking. There are tools which can figure this out for you. Here are two that I know of: DTREG (30 day evaluation license) Microsoft Time Series Algorithm which is part of their SQL Server product. I am currently using their 180-day evaluation edition, it is easy to use. Here is a screenshot from the SQL Server tool (the dotted part is the prediction): One algorithm they use is called ARIMA. Wanting to learn how it works, I did some Googling and found this book: First Course on Time Series (and don't worry, you don't need to have SAS to follow along. I don't.). It is very readable. You don't have to know how ARIMA works to use these tools, but I think it is always easier if you have context, since there are "model parameters" to be set etc.
