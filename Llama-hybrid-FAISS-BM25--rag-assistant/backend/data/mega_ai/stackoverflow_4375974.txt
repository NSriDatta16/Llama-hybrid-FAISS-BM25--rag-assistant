[site]: stackoverflow
[post_id]: 4375974
[parent_id]: 4355210
[tags]: 
If I'm not mistaken, you are asking two questions: How to structure a DDD application? What about those long namespace names? My answer is rather lengthy - I took the liberty of splitting it into two anwsers. This is an answer to the second question: 2. What about those long namespace names I don't think long namespace names are necessarily messy. IMHO what looks messy in your names are: the repeating of the words "Product" and "Core" The use of the general term "Impl" A first improvement could be: // The Domain objects go here; MyCompany.MyProduct.Core.Domain; // DataAccess interfaces go here: MyCompany.MyProduct.Core.DataAccess; // a Linq implementation of the DataAcces interfaces go here: MyCompany.MyProduct.Core.DataAccess.LinqImpl; // The Core service go here: MyCompany.MyProduct.Core.Services; // Some general purpose infrastructure goes here (e.g. emailing code) Mycompany.MyProduct.Infra; Furthermore, I find that the use of a commercial product name (such as MyProduct) in the code structure is bad (what if marketing chooses a different name?); I like to use the name of logical subsystems instead. Let's assume your building car rental system. Then CarRental will be considered the core functionality of this app. Then I'd use the following namespace structure (Serra is the name of my company): // For classes Customer, Account, Car Serra.CarRental.Domain; // I use Dao as a general abbreviation for "Data Access Objects" // Dao interfaces go here: Serra.CarRental.Dao; // Linq implementation for Dao interfaces Serra.CarRental.Dao.Linq; // For Services specific to the car rental domain: // AccountService and RentalService and CarAvailabilityService Serra.CarRental.Services; // For UI objects (not relevant in you situation?) Serra.CarRental.UI; // general service code; ignorant of the CarRental domain (e.g. an EmailService) Serra.Infra.Service;
