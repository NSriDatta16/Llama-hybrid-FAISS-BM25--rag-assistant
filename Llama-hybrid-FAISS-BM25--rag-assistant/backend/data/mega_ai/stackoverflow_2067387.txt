[site]: stackoverflow
[post_id]: 2067387
[parent_id]: 1725925
[tags]: 
When you use the default session state mode of "InProc" (In Process), as you are, the Session State data is very fragile and is lost whenever the AppPool recycles. Consider using the other built-in session state modes, which run out-of-process and are therefore immune to the AppPool recycling. These are the "StateServer" mode (runs in memory in a separate process) and "SqlServer" mode (state data stored in SQL Server DB). You will want to use one of these out-of-process session state modes in order to give your session data more robustness, especially if you require longer session timeouts. This doesn't answer your question of why your session times out prematurely, but it will be part of the solution. The various session state modes all have their strengths and weaknesses in terms of robustness, memory requirements, scalability and performance, so you need to become familiar with them in order to identify the right choice for your application. As a side note, always consider whether your data needs to go into the session at all. Its generally better to use ViewState when the data is required between postbacks on the same page, provided the amount of data is not too excessive. It is entirely possible to develop ASP.NET applications that don't use Session at all, or use it very sparingly, and generally I find things work a lot more intuitively when you don't use Session eg. the browser Back button. Your DB is there to persist your data, so don't be shy about using it. If you are passing tables or datasets between pages using Session, consider whether you really need to. Could you pass parameters via the query string and then use the parameters to fetch the data from your DB when the page is requested? Refer : MSDN Session State Modes
