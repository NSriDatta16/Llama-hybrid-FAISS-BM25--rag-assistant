[site]: stackoverflow
[post_id]: 352551
[parent_id]: 352540
[tags]: 
Nothing easy about it. But it can be done. I've got some (sadly, still buggy) sample code and information on my blog for creating the document in memory. Here's some code I whipped up for testing that encapsulates everything (it writes a collection of FixedPages to an XPS document in memory). It includes code for serializing the document to a byte array, but you can skip that part and just return the document: public static byte[] ToXpsDocument(IEnumerable pages) { // XPS DOCUMENTS MUST BE CREATED ON STA THREADS!!! // Note, this is test code, so I don't care about disposing my memory streams // You'll have to pay more attention to their lifespan. You might have to // serialize the xps document and remove the package from the package store // before disposing the stream in order to prevent throwing exceptions byte[] retval = null; Thread t = new Thread(new ThreadStart(() => { // A memory stream backs our document MemoryStream ms = new MemoryStream(2048); // a package contains all parts of the document Package p = Package.Open(ms, FileMode.Create, FileAccess.ReadWrite); // the package store manages packages Uri u = new Uri("pack://TemporaryPackageUri.xps"); PackageStore.AddPackage(u, p); // the document uses our package for storage XpsDocument doc = new XpsDocument(p, CompressionOption.NotCompressed, u.AbsoluteUri); // An xps document is one or more FixedDocuments containing FixedPages FixedDocument fDoc = new FixedDocument(); PageContent pc; foreach (var fp in pages) { // this part of the framework is weak and hopefully will be fixed in 4.0 pc = new PageContent(); ((IAddChild)pc).AddChild(fp); fDoc.Pages.Add(pc); } // we use the writer to write the fixed document to the xps document XpsDocumentWriter writer; writer = XpsDocument.CreateXpsDocumentWriter(doc); // The paginator controls page breaks during the writing process // its important since xps document content does not flow writer.Write(fDoc.DocumentPaginator); // p.Flush(); // this part serializes the doc to a stream so we can get the bytes ms = new MemoryStream(); var writer = new XpsSerializerFactory().CreateSerializerWriter(ms); writer.Write(doc.GetFixedDocumentSequence()); retval = ms.ToArray(); })); // Instantiating WPF controls on a MTA thread throws exceptions t.SetApartmentState(ApartmentState.STA); // adjust as needed t.Priority = ThreadPriority.AboveNormal; t.IsBackground = false; t.Start(); //~five seconds to finish or we bail int milli = 0; while (buffer == null && milli++ Note the crappy threading code. You can't do this on MTA threads; if you are on an STA thread you can get rid of that as well.
