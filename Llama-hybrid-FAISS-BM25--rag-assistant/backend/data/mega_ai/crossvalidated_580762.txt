[site]: crossvalidated
[post_id]: 580762
[parent_id]: 580673
[tags]: 
Your original data are counts of bleached versus unbleached colonies. It's typically best to work close to the original data. In this case, you could use a binomial model based on those counts directly. That takes into account the fact that a proportion based on 10 colonies is a lot less reliable than a proportion based on 1000 colonies, something that the proportions themselves don't represent. With glm() in R, you can use a 2-column matrix of outcomes for such data, one for the number of "successes" (e.g., bleached colonies) and one for the number of "failures" (e.g., not-bleached colones). Alternatively, you can specify the fraction of bleached colonies and provide the total number of colonies examined in a weights argument to the generalized linear model. A quick check of the gam() function in the R mgcv package indicates that such handling of observation numbers works there, too. The way you have coded the data, omitting weights, each row of your data is weighted equally. Make sure that is fair treatment of your data. Pay attention to whether you might be close to overfitting your data with so many predictors. The coefficients for variables in smooths are penalized by the model fitting. But unless you specify otherwise, the other "parametric" terms aren't penalized. There's a danger that you might end up with an overfitted model that fits your data but doesn't generalize well. With about 19 degrees of freedom used up in the smooths, according to the model summary, and 10 more used up for the parametric coefficients, you've used up 29 degrees of freedom with 200 observations. That's only 7 observations per degree of freedom, perhaps a bit on the low side. Consider penalizing some of the "parametric" coefficients as well. In terms of visualizing model-predicted versus observed values, it wasn't originally clear what plots you generated. Now that the plots have been added to the question, it's clear that the plot for the quasibinomial model isn't appropriate. The output of the predict() function applied to a gam object (with the implicit defaults implied by the code) is in terms of the linear predictor, not in terms of the response. What you get with the linear predictor is the logit of the response with a quasibinomial model. So the observed and default "predicted" shouldn't agree for the quasibinomial model. For the Gaussian model (when no family is specified), the linear predictor is the same as the predicted response. For visualization, the R gratia package , designed to complement gam() models, might be helpful; the package author frequently visits this site. For further guidance, start with the nearly 800 questions tagged on this site with generalized-additive-model and refine the search with the things you'd like to learn more about.
