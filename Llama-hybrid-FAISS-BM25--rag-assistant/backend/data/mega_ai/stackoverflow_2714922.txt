[site]: stackoverflow
[post_id]: 2714922
[parent_id]: 2712340
[tags]: 
I would say it really depends on your application. &I know a bit about UML and I know you can model relation multiplicity as well as primary keys just using standard UML class diagrams, so often class diagram is enough. I like starting with class diagram, because I like to use object oriented analysis and design, use cases, use case realizations and analytical classes. On the other side, good database design asks for normalization and sometimes denormalization, different optimizations for data querying... But for that, first I would need to know what I will be querying for and possibly how. I personally see the relational part of most of application just as a storage mechanism, I think about the system in terms of object oriented programming. This is especially usefull with for example Ruby on Rails, which thanks to the Active Record pattern totally abstracts from the relational model, so I don't have to model twice.
