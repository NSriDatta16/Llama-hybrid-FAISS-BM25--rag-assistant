[site]: stackoverflow
[post_id]: 2769225
[parent_id]: 2769174
[tags]: 
Well, your first one should only take N log(N) , so it's clearly the better worse case scenario for this application. However, you should be able to get a better best case if you check as you add things to the set: template bool is_unique3(vector X) { set Y; typename vector ::const_iterator i; for(i=X.begin(); i!=X.end(); ++i) { if (Y.find(*i) != Y.end()) { return false; } Y.insert(*i); } return true; } This should have O(1) best case, O(N log(N)) worst case, and average case depends on the distribution of the inputs.
