[site]: stackoverflow
[post_id]: 2319006
[parent_id]: 2318667
[tags]: 
Note that to leverage the full power of numpy, you'd be much better off with a 3-dimensional numpy array. Breaking apart the 3-d array into a 2-d array with 1-d values may complicate your code and force you to use loops instead of built-in numpy functions. It may be worth investing the time to refactor your code to use the superior 3-d numpy arrays. However, if that's not an option, then: import numpy as np storageMatrix=np.empty((4,9),dtype='object') By setting the dtype to 'object' , we are telling numpy to allow each element of storageMatrix to be an arbitrary Python object. Now you must initialize each element of the numpy array to be an 1-d numpy array: storageMatrix[column,row]=np.arange(4096) And then you can access the array elements like this: storageMatrix[column,row][0] = 1 storageMatrix[column,row][4092] = 2
