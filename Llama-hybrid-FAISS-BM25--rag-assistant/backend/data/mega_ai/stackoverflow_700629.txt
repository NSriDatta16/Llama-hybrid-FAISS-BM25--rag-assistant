[site]: stackoverflow
[post_id]: 700629
[parent_id]: 
[tags]: 
How can I connect the ModelView to the Model in this Silverlight MVVM example?

I'm using the article Model View View-Model (MVVM) in Silverlight as a basis to create my own MVVM example in Silverlight. I've got all the pieces below: main page (loads everything) View (XAML file with bindings) Model (a Customer class generating a fake List collection) ModelView (inherits INotifyPropertyChanged and has the PropertyChanged for the two fields that View needs) In my main page I: create the ViewModel bind the ViewModel to the DataContext of the View create the Model (customers) But now how do I connect the ModelView to the Model? I feel as though I need to inject my customers Model somehow into the CustomerViewModel, is that right? But how exactly? What is the next step here to finish this MVVM example so that I can start using the advantages of the MVVM pattern, e.g. swapping out the model with a test model, swapping out the view with new views, etc. MainPage.xaml.cs: creates the ViewModel, attaches View to ViewModel using System.Windows.Controls; using System.Collections.Generic; namespace TestMvvm345 { public partial class MainPage : UserControl { private CustomerViewModel customerData; public MainPage() { InitializeComponent(); customerData = new CustomerViewModel(); customerHeaderView.DataContext = customerData; List customers = Customer.GetCustomers(); } } } MainPage.xaml: displays the View within the context of the main page CustomerViewModel.xaml: the ViewModel using System.ComponentModel; namespace TestMvvm345 { public class CustomerViewModel : INotifyPropertyChanged { private string firstName; private string lastName; public string FirstName { get { return firstName; } set { firstName = value; RaisePropertyChanged("FirstName"); } } public string LastName { get { return lastName; } set { lastName = value; RaisePropertyChanged("LastName"); } } public event PropertyChangedEventHandler PropertyChanged; private void RaisePropertyChanged(string property) { if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(property)); } } } } CustomerHeaderView.xaml the View Customers.cs the Model using System; using System.Collections.Generic; namespace TestMvvm345 { public class Customer { public int ID { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public int NumberOfContracts { get; set; } public static List GetCustomers() { List customers = new List (); customers = new List (); customers.Add(new Customer { FirstName = "Jim", LastName = "Smith", NumberOfContracts = 23 }); customers.Add(new Customer { FirstName = "Jane", LastName = "Smith", NumberOfContracts = 22 }); customers.Add(new Customer { FirstName = "John", LastName = "Tester", NumberOfContracts = 33 }); customers.Add(new Customer { FirstName = "Robert", LastName = "Smith", NumberOfContracts = 2 }); customers.Add(new Customer { FirstName = "Hank", LastName = "Jobs", NumberOfContracts = 5 }); return customers; } } }
