[site]: stackoverflow
[post_id]: 3511694
[parent_id]: 3511526
[tags]: 
This special technique to avoid if-else-if constructs like shown in the example on that campaigns website can be found in in Clean Code by Robert C. Martin . If you follow his basic advices, you don't need to join the campaign ;) The example at the referenced page looks dramatic mainly because the code is poorly formatted. This is how it should look like: // Bond class double calculateValue() { if(_type == BTP) { return calculateBTPValue(); } else if(_type == BOT) { return calculateBOTValue(); } else { return calculateEUBValue(); } } The recommendation is to replace the condition with polymorphism, which isn't even the best ideas. A better design is to use composition: public interface BondType { public double calculate(); } public class BOT implements BondType { //... } public class Bond { private BondType type; public Bond(BondType type) { this.type = type; } public doublce calculateValue() { return type.calculate(); } } Here we got rid of the conditions and delegated the calculation to a new type class.
