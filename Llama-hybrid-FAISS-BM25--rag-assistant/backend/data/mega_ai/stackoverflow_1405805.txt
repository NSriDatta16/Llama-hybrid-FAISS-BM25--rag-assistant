[site]: stackoverflow
[post_id]: 1405805
[parent_id]: 1405738
[tags]: 
Basically what you're doing is named parameters, so I'd suggest one class per function, with members for each parameter. The call site would then look something like this: foo(new foo_arguments().Name("John").Street("Broadway").B1(true).B2(false)); And then you'd use arguments.Name() and such inside the function. This has the additional advantage of letting you give default arguments without massive numbers of overloads, and lets the arguments be specified in any order, so this works: foo(new foo_arguments().Street("Sesame").Name("Monster")); The required class: public class foo_arguments { private string _name = "John Doe"; public foo_arguments Name(string name) { _name = name; return this; } public string Name() { return _name; } private string _street = "Pennsylvania Ave NW"; public foo_arguments Street(string street) { _street = street; return this; } public string Street() { return _street; } private string _b1 = false; public foo_arguments B1(string b1) { _b1 = b1; return this; } public boolean B1() { return _b1; } private string _b2 = true; public foo_arguments B2(string b2) { _b2 = b2; return this; } public boolean B2() { return _b2; } } As an aside, in C# you can do this really elegantly with auto-properties and object initializers.
