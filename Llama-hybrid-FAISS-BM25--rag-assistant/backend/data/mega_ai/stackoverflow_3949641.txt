[site]: stackoverflow
[post_id]: 3949641
[parent_id]: 3949618
[tags]: 
Orthogonality implies that two things are unrelated. It comes from mathematics where it means perpendicular . In common usage it can mean two decisions are unrelated or that one subject is irrelevant when considering another subject. As used here, orthogonal means that one concept doesn't either imply or exclude the other. The two concepts object oriented programming and functional programming are not incompatible with each other. Object orientedness does not imply mutability. Many people who are introduced to object oriented programs the traditional way often first use C++, Java, C# or similar languages where mutability is common and even encouraged (standard libraries provide a varierty of mutable classes for people to use). Therefore it is understandable that many people associate object oriented programming with imperative programming and mutability, as this is how they have learned it. However object oriented programming covers topics like: Encapsulation Polymorphism Abstraction None of this implies mutability, and none of it excludes functional programming. So yes they are orthogonal in that they are different concepts. They are not opposites - you can use one, or the other, or both (or even neither). Languages like Scala and F# attempt to combine both paradigms into a single language: Scala is a multi-paradigm programming language designed to integrate features of object-oriented programming and functional programming . Source F# is a succinct, expressive and efficient functional and object-oriented language for .NET which helps you write simple code to solve complex problems. Source
