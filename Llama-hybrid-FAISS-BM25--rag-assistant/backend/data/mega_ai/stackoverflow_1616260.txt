[site]: stackoverflow
[post_id]: 1616260
[parent_id]: 1616147
[tags]: 
Interesting post and shows that you've put in a lot of work. Almost the ideal SO post. I do not have ready answers, so please bear with me. I will have to ask a few more questions :P 1). If I know the size of the types, is there a way to modify push and pull function to exactly synchronize with struct padding? (modify to let compiler takes care of it like Datasize and Endians problems). Is this from a performance point of view only? Are you planning to introduce pointers along with native arithmetic types? 2). If I pack structure by one (using #pragma pack(1)); (2.1) Will the performance penalty be acceptable? and (2.2) Will the program stability be at risk? This is an implementation-defined thing. Not something you can count on across platforms. 3). How about padding by 2,4, or 8? Which should be good for general 32 or 64 bits system? The value that matches with the native word size ought to give you optimal performance. 4). Can you guide me to a documentation for an exact padding algorithm let say for GCC on x86? I don't know of any of the top of my head. But I have seen code similar to this being used. Note, that you can specify attributes of variables using GCC (which also has something called default_struct __attribute__((packed)) that turns off padding).
