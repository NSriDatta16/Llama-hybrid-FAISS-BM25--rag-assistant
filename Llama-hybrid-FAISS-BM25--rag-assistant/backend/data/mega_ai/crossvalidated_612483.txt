[site]: crossvalidated
[post_id]: 612483
[parent_id]: 612405
[tags]: 
There are already some great answers here. Another way to do this would be to use MCMC a la the Metropolis Hastings Algorithm. See my implementation below import numpy as np import matplotlib.pyplot as plt from scipy.stats import beta @np.vectorize def target_distribution(x): a = 5 b = .999 top = -(a+1)**2 * x**a * np.log(b*x) bottom = 1 - (a+1)*np.log(b) return top/bottom # Initialize the Metropolis-Hastings algorithm with an initial value of x = 0 and a number of iterations x = 0.5 iterations = 100000 # Initialize an array to store the samples samples = np.zeros(iterations) # Run the Metropolis-Hastings algorithm for i in range(iterations): # Sample from the proposal distribution x_proposal = beta(a=1, b = 1).rvs() # Calculate the acceptance ratio acceptance_ratio = target_distribution(x_proposal) / target_distribution(x) # Accept or reject the proposal if np.random.uniform()
