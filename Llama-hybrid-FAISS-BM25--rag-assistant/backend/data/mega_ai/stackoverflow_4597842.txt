[site]: stackoverflow
[post_id]: 4597842
[parent_id]: 4597630
[tags]: 
There are a number of git workflows open to you because it's a flexible tool, but a simple workflow is to have a 'master' branch and a 'develop' branch. You can both push and pull directly to your repo without forking on github and without your collaborator having to constantly submit Github pull requests. You can both make the majority of your local commits on the develop branch but frequently pull down from the remote develop branch in order to merge each other's code - it's at this stage that you can deal with merge conflicts, before pushing to remote. Less frequently, you can pull down master and merge that with develop. The idea is that the master branch is more stable and can be prepped for release at any time, so active development does not occur on it. That's all there is to it. If you want to go further you can both make "feature branches" from your develop branch, but the principle is the same - merge back 'up' to develop, and from there 'up' to master. The important thing is to synchronise (merge) your work often, otherwise the differences in your separate copies of the codebase are likely to be greater, which means a greater chance of conflicts. If you continue to have conflicts, push and pull more frequently so the differences are smaller and easier to handle. Conflicts are especially likely to occur if you are both working heavily on the same files. In such cases, it sometimes pays to be organised and divide up the work into features that change different parts (files) of the codebase, so you are less likely to step on each other's toes. Remember to commit your local changes before pulling, otherwise the changes will be considered to be in "staging" and will not be merged automatically during the pull. Fortunately, git is fairly forgiving and very good at dealing with merge conflicts.
