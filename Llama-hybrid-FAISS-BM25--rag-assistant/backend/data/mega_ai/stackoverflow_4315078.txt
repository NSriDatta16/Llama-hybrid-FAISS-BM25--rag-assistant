[site]: stackoverflow
[post_id]: 4315078
[parent_id]: 1463018
[tags]: 
Database and log files are portable across different endian systems. Berkeley DB will recognize the kind of system it is on and swap bytes accordingly for data structures it manages that make up the database itself. Berkeley DB's region files, which are memory mapped, are not portable. That's not such a big deal because they region files hold the cache and locks which, because your application will not be running during the transition, will be re-created on the new system. But, be careful, Berkeley DB doesn't know anything about the byte-order or types in your data (in your keys and values, stored at "DBTs"). Your application code is responsible for knowing what kind of system it is running on, how it stored the data (big or little endian) and how to transition it (or simple re-order on access). Also, pay close attention to your btree comparison function. That too may be different depending on your system's architecture. Database and log files are also portable across operating systems with the same caveat as with byte-ordering -- the application's data is the application's responsibility. You might consider reviewing the following: Selecting a Byte Order DB->set_lorder() Berkeley DB's Getting Started Guide for Transactional Applications Berkeley DB's Reference Guide Voice-over presentation about Berkeley DB/DS (Data Store) Voice-over presentation about Berkeley DB/CDS (Concurrent Data Store) Berkeley DB's Documentation Disclosure: I work for Oracle as a product manager for Berkeley DB products. :)
