[site]: stackoverflow
[post_id]: 2075690
[parent_id]: 2075602
[tags]: 
Let's try to analyse them: C++ Pros: Generates native code, so it's fast. Allows very low-level access to go all out in optimizations. Can be highly cross-platform. More prone to unreadable code. (Personally, I think that the fact a utility like cdecl even EXISTS, is a good sign that parts of C is not meant to be readable - and since C++ is mostly a superset of C, the same applies here.) Cons: You need to manage a lot on your own, which can easily introduce memory leaks and the like if you aren't careful to get all of this managed somehow (smart pointers, for example). Compiling is sloooow. Delphi Pros: Fast compilation. Generates native code with no runtime dependencies by default. Allows you to easily integrate low-level assembly if you want to. You generally don't need to mess with pointers, but you can if you want to. Very nice GUI builder, and the VCL is a nice toolbox which serves most of your basic component needs. Delphi code is generally pretty easy to read. Cons: Delphi isn't as widespread of a language, so references might be a problem. If you need to interface with external DLLs, you're less likely to find finished Delphi code that allows you to call the DLL methods; you are more likely to need to write the required declarations yourself (there are tools, apparently, but I don't know how well they work...) VB6 Pros: There are still a LOT of references out there. Let's face it, while we may not like the language, it is pretty easy to read. Cons: Extremely outdated environment. Not supported anymore. Not suitable for code needing to be overly efficient. VB.NET (C# as well) Pros: Due to the architecture of the .NET framework, you could theoretically get more performance, because it is able to optimize the code for the specific CPU it's being run on. Gigantic library at your disposal (.NET framework). Memory is pretty much managed for you. That means it's a lot harder to mess something up there. Popular languages, so lots of references out there. Cons: Memory is pretty much managed for you. This means some performance aspects are out of your control. You can't really drop down to low-level assembler code, because it's compiled to an intermediary format. Sure, you could implement your own method in IL, but there's usually not as much to be gained as with assembler. My personal vote goes to Delphi, because it lets me build fast applications quickly, and the latest releases have really improved on the feature set and the usability of the IDE.
