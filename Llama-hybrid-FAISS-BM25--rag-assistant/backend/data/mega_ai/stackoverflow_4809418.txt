[site]: stackoverflow
[post_id]: 4809418
[parent_id]: 4808989
[tags]: 
its going to have a bunch of unnecessary folders These uncessary folders are stored in one folder and are needed for the framework to work, is that the 10, 20, 200 Mb which is problem? Storage is cheap nowadays, why cares? it requires anyone who wants to modify my program to know the framework You got it! It is an advantage, not an inconvenient. If it doesn't, the guy which will read your code will need to understand your habits, your convention, and they probably are not so common. If you are able to write consistent code, following any conventions, why not. But it can also gives your customer a real plus value since he knows that anyone could take back your work if you have to leave for any reasons. they've got a mountain to move if they want to update it to the latest version of the framework. In any case upgrading a framework, an application to a new version is most of the time a moutain since in a production environment, you need to test, and test again, to be sure your application is stable. Most of the framework give releases notes which should let you know about backward compatibility. It just seems to me that frameworks were designed mostly for super large projects. Zend or Code Igniter fit well for medium sized project, with time you developed framework extensions and you'll be able to save time and bugs on smaller project. It seems like all the big packaged php products out there make their own frameworks (vbulletin, etc). PHP framework are youngs, most of them are 3/4 years old (Zend, Symfony). A lot of application like Vbulletin are older. There a lot application based on common framework, but they don't target the same people. Joomla, Drupal, Wordpress have their own framework (procedural, or object) but they target more the end-user. However a solution like Magento, which uses Zend Framework, is designed to be extended and very customizable with extensions.
