[site]: stackoverflow
[post_id]: 2879573
[parent_id]: 2879192
[tags]: 
Tip: If you allow debugging, the exception will tell you the exact line in the source code where the Error is being thrown. Assuming you're using the Flash IDE, go to publish settings and in the Flash tab check "Permit debugging". This will makes thing much easier for you. Anyway, you have an error message. If you read it carefully, you can narrow down where the problem is. I don't know if you are a programmer or you have any interest in being one; if you're not, this answer will hopefully solve this particular problem. Anyway, if you don't mind the rambling, let me tell you that if you're interested in becoming a better programmer, paying attention to errors and learning how to debug / troubleshoot problems is one of the most important abilities you need to develop (if not the most important one); so maybe this will give you a few hints you can use to solve other problems as well. The message says: Cannot access a property or method of a null object reference. This means, at some point, you did something like this: someobject.someMethod(); or someobject.someProperty = "foo"; And someobject happened to be null. You can't call methods or access properties of null . Ok, so now you know, somewhere, a variable had null as its value. Notice that the fact that you define a variable of property doesn't mean it actually holds an object. This just says that a variable called mySprite can hold an object of the type Sprite: var mySprite:Sprite; But until at some point you create a Sprite and assign it to mySprite, the value held by mySprite will be null. If you do: mySprite.x = 0; Before initializing mySprite (i.e. before assigning a Sprite to it), you will have this same Null Reference error. This error message also offers some helpul context, which you can use to your advantage ( in them old days ... errors in Flash were silent; when things didn't work, you had to manually trace down the problem). Ok, let's break this error message down: at com.senocular.utils::KeyObject/construct() at com.senocular.utils::KeyObject() at com.asgamer.basics1::Ship() at com.asgamer.basics1::Engine() What you have above is called a stack trace. It basically tells you where the code blew up, and also gives you some context: how did you get there. The first line tells where the error actually occurred. That is, the construct method in the KeyObject object. That method was called from the KeyObject constructor, which was in turn called from the Ship constructor, which was in turn called from the Engine constructor. Now, let's analyze how you got there, following the stack trace, bottom-up: Code in Engine constructor: ourShip = new Ship(stage); This creates a new Ship object. It passes a reference to the stage to the Ship constructor method. Code in Ship constructor: this.stageRef = stageRef; key = new KeyObject(stageRef); It grabs the ref passed in the previous step. It stores it and creates a new KeyObject object. The KeyObject constructor is passed a reference to the stage (which is the same ref that was passed from Engine to Ship). Code in KeyObject constructor: KeyObject.stage = stage; keysDown = new Object(); stage.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed); stage.addEventListener(KeyboardEvent.KEY_UP, keyReleased); Now we got to the point where the error message told you the problem was. So, somewhere, you are using a variable that holds null and trying to access one of its methods or properties. This KeyObject stores the reference to stage it was passed in a static variable and creates a new Object object. So far, no problems. KeyObject cannot be null (it's a reference to a Class). The second line itself cannot have this null problem either. So, if this is all the code in that method, the problem has to be either in the third or the fourth line. Both access the stage reference you passed and try to call a method (addEventListener) on it. So if one fails, the other will fail as well. Then, the third line: that's where the problem has to be. So, at that point stage is null. As said previously, you can't call a method on null, and that's what the error is telling you. Now, if you get back to the first method call, you can see this is the origin of the problem: ourShip = new Ship(stage); You can be pretty sure that, at this point, stage was null. Add that to the fact that Engine extends MovieClip (which is in turn a DisplayObject), and to the fact that any DisplayObject has a reference to the stage object only while it's added to the display list . The conclusion: an instance of Engine was not attached to the display list when its constructor was ran. A way to fix this (there might be others) could be moving the code in the Engine constructor to a separate function that will be executed only if / when the Engine object has a valid reference to the stage object. public function Engine() : void { if(stage) { initialize(); } else { addEventListener(Event.ADDED_TO_STAGE,initialize); } } private function initialize(e:Event = null):void { removeEventListener(Event.ADDED_TO_STAGE,initialize); // here goes the code that's currently in Engine constructor } Hope this helps.
