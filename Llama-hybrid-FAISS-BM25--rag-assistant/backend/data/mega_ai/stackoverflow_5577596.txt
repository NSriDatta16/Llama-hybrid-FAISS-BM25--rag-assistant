[site]: stackoverflow
[post_id]: 5577596
[parent_id]: 
[tags]: 
Paint View Zoom with Image problem

anyone knows how to zoom paint view with image correctly? At following code, I used canvas zoom in order to zoom paint view with image including using setImageMatrix(). But problem arised, that is entire screen became to zoom in/out but not paint view and image only. So If anyone knows this issue, reply plz. PaintScreen.java public class PaintScreen extends Activity implements ColorPickerDialog.OnColorChangedListener{ Context mContext; private Paint mPaint; MaskFilter mEmboss; MaskFilter mBlur; private ImageView mImageView; private LinearLayout mPaintBaseLayout; private FrameLayout mTouchBaseLayout; private PaintView mPaintView; private int[] mPixels; private Bitmap mBitmapImage; private DisplayMetrics mDisplayMetrics = new DisplayMetrics(); MultiTouchListener multiTouchLitener = new MultiTouchListener(this); private static final String TAG = "Touch"; // These matrices will be used to move and zoom image Matrix matrix = new Matrix(); Matrix savedMatrix = new Matrix(); Matrix savedMatrix2 = new Matrix(); private int WIDTH = 0; private int HEIGHT = 1; // We can be in one of these 3 states static final int NONE = 0; static final int DRAG = 1; static final int POINT2 = 2; static final int ZOOM = 3; int mode = NONE; // Remember some things for zooming PointF start = new PointF(); PointF mid = new PointF(); float oldDist = 1f; float newDist; float distanceOffset = 50f; float minOffset = 50f; float maxOffset = 10000f; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.paint_mode1_paint); this.initialize(); this.PaintSet(); } private void initialize() { mPaintBaseLayout = (LinearLayout) findViewById(R.id.paint_paint_base_layout); mTouchBaseLayout = (FrameLayout) findViewById(R.id.paint_touch_base_layout); mContext = this; mPaint = new Paint(); mPaintView = new PaintView(mContext); mPaintView.setBackgroundColor(Color.TRANSPARENT); mPaintBaseLayout.addView(mPaintView, new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT)); mPaintBaseLayout.setBackgroundColor(Color.TRANSPARENT); mPaintView.setScaleType(ScaleType.MATRIX); mPaintView.setMPaint(mPaint); Intent intent = getIntent(); Bundle itstr = intent.getExtras(); String imagePath = itstr.getString("image_path"); Drawable d = Drawable.createFromPath(imagePath); mPaintView.setBackgroundDrawable(d); mPaintView.setOnTouchListener(new OnTouchListener() { @Override public boolean onTouch(View v, MotionEvent event) { dumpEvent(event); PaintView view = (PaintView) v; switch (event.getAction() & MotionEvent.ACTION_MASK) { case MotionEvent.ACTION_DOWN: savedMatrix.set(matrix); start.set(event.getX(), event.getY()); break; case MotionEvent.ACTION_POINTER_DOWN: oldDist = spacing(event); if (oldDist > 10f) { start.set(event.getX(), event.getY()); savedMatrix.set(matrix); midPoint(mid, event); mode = POINT2; } break; case MotionEvent.ACTION_UP: case MotionEvent.ACTION_POINTER_UP: mode = NONE; distanceOffset = minOffset; break; case MotionEvent.ACTION_MOVE: if (mode == POINT2) { newDist = spacing(event); if (newDist - oldDist > 5f || newDist - oldDist 10f) { matrix.set(savedMatrix); float scale = newDist / oldDist; matrix.postScale(scale, scale, mid.x, mid.y); } } else { view.onTouchEvent(event); } break; } matrixTurning(matrix, view); view.setImageMatrix(matrix); view.cMatrix(matrix); return true; } }); } /** Show an event in the LogCat view, for debugging */ private static void dumpEvent(MotionEvent event) { String names[] = { "DOWN", "UP", "MOVE", "CANCEL", "OUTSIDE", "POINTER_DOWN", "POINTER_UP", "7?", "8?", "9?" }; StringBuilder sb = new StringBuilder(); int action = event.getAction(); int actionCode = action & MotionEvent.ACTION_MASK; sb.append("event ACTION_").append(names[actionCode]); if (actionCode == MotionEvent.ACTION_POINTER_DOWN || actionCode == MotionEvent.ACTION_POINTER_UP) { sb.append("(pid ").append( action >> MotionEvent.ACTION_POINTER_ID_SHIFT); sb.append(")"); } sb.append("["); for (int i = 0; i 0) value[2] = 0; if(value[5] > 0) value[5] = 0; if(value[0] > 10 || value[4] > 10){ value[0] = savedValue[0]; value[4] = savedValue[4]; value[2] = savedValue[2]; value[5] = savedValue[5]; } if(imageWidth > width || imageHeight > height){ if(scaleWidth = TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) { mPath.quadTo(mX, mY, (x + mX)/2, (y + mY)/2); mX = x; mY = y; } } private void touchUp() { mPath.lineTo(mX, mY); // commit the path to our offscreen mCanvas.drawPath(mPath, mPaint); // kill this so we don't double draw mPath.reset(); } @Override public boolean onTouchEvent(MotionEvent event) { float x = event.getX(); float y = event.getY(); Log.d("PaintView", "ev ->" + event.getAction()); switch (event.getAction()) { case MotionEvent.ACTION_DOWN: touchStart(x, y); invalidate(); break; case MotionEvent.ACTION_MOVE: touchMove(x, y); invalidate(); break; case MotionEvent.ACTION_UP: touchUp(); invalidate(); break; } return true; } public void cMatrix(Matrix matrix) { mCanvas.setMatrix(matrix); } }
