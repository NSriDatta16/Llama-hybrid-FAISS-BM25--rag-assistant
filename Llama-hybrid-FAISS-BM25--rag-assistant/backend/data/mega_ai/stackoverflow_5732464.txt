[site]: stackoverflow
[post_id]: 5732464
[parent_id]: 
[tags]: 
Should I use metaclasses here?

I'm reading some data, which I want to create classes out of - this is done at load-time. The classes are grouped into a Special class, which can only be instantiated using run-time information. The classes depend on this Special class, so they can only be useful once it is created. Here is some simplified code that shows how I want it to work, using random instead of actual run-time info: import random def make_foo(param1, param2): class Foo: def __init__(self, special): self.param1 = param1 self.param2 = param2 self.special = special def do(self): print "%s is doing" % self def __str__(self): return "Foo " % (self.param1, self.param2, self.special) return Foo def make_bar(foo): class Bar: def __init__(self, special): self.foo = foo(special) def do(self): print "%s is doing" % (self,) def __str__(self): return "Bar " % self.foo return Bar def make_grouper(foobars): class Grouper: def __init__(self, special): self.foobars = [foobar(special) for foobar in foobars] return Grouper def make_special(howtomake, groups): class Special: def __init__(self): self.important = random.choice(howtomake) self.groups = [group(self) for group in groups] def __str__(self): return "Special " % self.important return Special Foo10_20 = make_foo(10, 20) Foo30_40 = make_foo(30, 40) Bar = make_bar(Foo10_20) Grouper1 = make_grouper([Foo10_20, Foo30_40]) Grouper2 = make_grouper([Bar, Bar]) Special = make_special("IMPORTANTINFO", [Grouper1, Grouper2]) s = Special() s.groups[0].foobars[0].do() s.groups[0].foobars[1].do() s.groups[1].foobars[0].do() s = Special() s.groups[0].foobars[0].do() s.groups[0].foobars[1].do() s.groups[1].foobars[0].do() Sample output: Foo > is doing Foo > is doing Bar >> is doing Foo > is doing Foo > is doing Bar >> is doing It can be summarized as having to create a set of classes which need to be bound to a special argument (so all the constructors, once the classes are done, just take a special argument). Can this be done more elegantly using meta-classes, or is this code fine the way it is?
