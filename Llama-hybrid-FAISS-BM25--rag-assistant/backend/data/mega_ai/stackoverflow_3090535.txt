[site]: stackoverflow
[post_id]: 3090535
[parent_id]: 3090043
[tags]: 
You can use jQuery's special events to package everything nicely and optimize things in the process. A mousedown and mousemove combo also commonly goes by the name "drag", so here's an example of creating a drag event that you can bind to elements. Note, that this code is specific to jQuery 1.4.2 One of the advantages to using this is that you only bind the mousemove , mouseout , and mousedown handlers once each element, no matter how many times that element is bound to the drag event. Now this isn't the most optimal way of doing it, and you can setup just 3 handlers on the document and manage everything with it, which is equally easy to do with the special events API. It just provides a nicely packaged way of building complex interactions than would be possible with just native events or custom events, in the jQuery sense. $("..").bind("drag", function() { ... }); I will try and add more documentation on what's actually going on, as it looks pretty unintuitive, I must confess. Checkout another nice article on the topic. See an example of this here . To create this custom special event, use: jQuery.event.special.drag = { // invoked each time we bind drag to an element add: function(obj) { var originalHandler = obj.handler; obj.handler = function(event) { var el = jQuery(this); if(el.data('mousePressed')) { return originalHandler.apply(this, arguments); } }; }, // invoked only the first time drag is bound per element setup: function(data, namespaces) { var el = jQuery(this); el.data('mousePressed', false); el.bind('mousedown', function() { jQuery(this).data('mousePressed', true); }); jQuery(document).bind('mouseup', function() { el.data('mousePressed', false); }); el.bind('mousemove', jQuery.event.special.drag.handler); }, // invoked when all drag events are removed from element teardown: function(namespaces) { var el = jQuery(this); jQuery.removeData(this, 'mousePressed'); el.unbind('mousedown'); el.unbind('mouseup'); }, // our wrapper event is bound to "mousemove" and not "bind" // change event type, so all attached drag handlers are fired handler: function(event) { event.type = 'drag'; jQuery.event.handle.apply(this, arguments); } };
