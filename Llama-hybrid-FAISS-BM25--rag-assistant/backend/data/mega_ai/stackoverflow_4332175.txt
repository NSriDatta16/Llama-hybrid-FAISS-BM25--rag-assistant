[site]: stackoverflow
[post_id]: 4332175
[parent_id]: 4331353
[tags]: 
Try this: Insert of Row into Database Failed - #'.mysql_errno().': '.mysql_error().' '; }else{ echo ' Person\'s Information Inserted ' } # Prepare the SELECT Query $selectSQL = 'SELECT * FROM `names`'; # Execute the SELECT Query if( !( $selectRes = mysql_query( $selectSQL ) ) ){ echo 'Retrieval of data from Database Failed - #'.mysql_errno().': '.mysql_error(); }else{ ?> Name Address Line 1 Address Line 2 Email Id No Rows Returned '; }else{ while( $row = mysql_fetch_assoc( $selectRes ) ){ echo " {$row['name']} {$row['addr1']} {$row['addr2']} {$row['mail']} \n"; } } ?> Notes, Cautions and Caveats Your initial solution did not show any obvious santisation of the values before passing them into the Database. This is how SQL Injection attacks (or even un-intentional errors being passed through SQL) occur. Don't do it! Your database does not seem to have a Primary Key. Whilst these are not, technically, necessary in all usage, they are a good practice, and make for a much more reliable way of referring to a specific row in a table, whether for adding related tables, or for making changes within that table. You need to check every action, at every stage, for errors. Most PHP functions are nice enough to have a response they will return under an error condition. It is your job to check for those conditions as you go - never assume that PHP will do what you expect, how you expect, and in the order you expect. This is how accident happen... My provided code above contains alot of points where, if an error has occured, a message will be returned. Try it, see if any error messages are reported, look at the Error Message, and, if applicable, the Error Code returned and do some research. Good luck.
