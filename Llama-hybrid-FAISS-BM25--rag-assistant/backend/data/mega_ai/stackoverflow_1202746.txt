[site]: stackoverflow
[post_id]: 1202746
[parent_id]: 1200214
[tags]: 
You have (at least) two solutions : The quite "na√Øve" one is using microtime(true) tobefore and after a portion of code, to get how much time has passed during its execution ; other answers said that and gave examples already, so I won"t say much more. This is a nice solution if you want to benchmark a couple of instructions ; like compare two types of functions, for instance -- it's better if done thousands of times, to make sure any "perturbating element" is averaged. Something like this, so, if you want to know how long it take to serialize an array : $before = microtime(true); for ($i=0 ; $i Not perfect, but useful, and it doesn't take much time to set up. The other solution, that works quite nice if you want to identify which function takes lots of time in an entire script, is to use : The Xdebug extension, to generate profiling data for the script Software that read the profiling data, and presents you something readable. I know three of those : Webgrind ; web interface ; should work on any Apache+PHP server WinCacheGrind ; only on windows KCacheGrind ; probably only Linux and linux-like ; That's the one I prefer, btw To get profiling files, you have to install and configure Xdebug ; take a look at the Profiling PHP Scripts page of the documentation. What I generally do is not enable the profiler by default (it generates quite big files, and slows things down) , but use the possibility to send a parameter called XDEBUG_PROFILE as GET data, to activate profiling just for the page I need. The profiling-related part of my php.ini looks like this : xdebug.profiler_enable = 0 ; Profiling not activated by default xdebug.profiler_enable_trigger = 1 ; Profiling activated when requested by the GET parameter xdebug.profiler_output_dir = /tmp/ouput_directory xdebug.profiler_output_name = files_names (Read the documentation for more informations) This screenshot is from a C++ program in KcacheGrind : (source: sourceforge.net ) You'll get exactly the same kind of thing with PHP scripts ;-) (With KCacheGrind, I mean ; WinCacheGrind is not as good as KCacheGrind...) This allows you to get a nice view of what takes time in your application -- and it sometimes definitly helps to locate the function that is slowing everything down ^^ Note that Xdebug counts the CPU time spent by PHP ; when PHP is waiting for an answer from a Database (for instance), it is not working ; only waiting. So Xdebug will think the DB request doesn't take much time ! This should be profiled on the SQL server, not PHP, so... Hope this is helpful :-) Have fun !
