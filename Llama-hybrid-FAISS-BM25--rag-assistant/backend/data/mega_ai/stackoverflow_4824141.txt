[site]: stackoverflow
[post_id]: 4824141
[parent_id]: 
[tags]: 
How do I calculate a 3D centroid?

Is there even such a thing as a 3D centroid? Let me be perfectly clearâ€”I've been reading and reading about centroids for the last 2 days both on this site and across the web, so I'm perfectly aware at the existing posts on the topic, including Wikipedia . That said, let me explain what I'm trying to do. Basically, I want to take a selection of edges and/or vertices, but NOT faces. Then, I want to place an object at the 3D centroid position. I'll tell you what I don't want: The vertices average, which would pull too far in any direction that has a more high-detailed mesh. The bounding box center, because I already have something working for this scenario. I'm open to suggestions about center of mass, but I don't see how this would work, because vertices or edges alone don't define any sort of mass, especially when I just have an edge loop selected. For kicks, I'll show you some PyMEL that I worked up, using @Emile's code as reference, but I don't think it's working the way it should: from pymel.core import ls, spaceLocator from pymel.core.datatypes import Vector from pymel.core.nodetypes import NurbsCurve def get_centroid(node): if not isinstance(node, NurbsCurve): raise TypeError("Requires NurbsCurve.") centroid = Vector(0, 0, 0) signed_area = 0.0 cvs = node.getCVs(space='world') v0 = cvs[len(cvs) - 1] for i, cv in enumerate(cvs[:-1]): v1 = cv a = v0.x * v1.y - v1.x * v0.y signed_area += a centroid += sum([v0, v1]) * a v0 = v1 signed_area *= 0.5 centroid /= 6 * signed_area return centroid texas = ls(selection=True)[0] centroid = get_centroid(texas) print(centroid) spaceLocator(position=centroid)
