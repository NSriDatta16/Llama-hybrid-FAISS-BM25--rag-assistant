[site]: stackoverflow
[post_id]: 2250974
[parent_id]: 2250545
[tags]: 
on the other hand I can imagine that internally a DBMS will compute hash keys to reduce the penalty. The DB needs to maintain a B-Tree (or a similar structure) with the key in a way to have them ordered. If the key is hashed and stored it in the B-Tree that would be fine to check rapidly the uniqueness of the key -- the key can still be looked up efficiently. But you would not be able to search efficient for range of data (e.g. with LIKE ) because the B-Tree is no more ordered according to the String value. So I think most DB really store the String in the B-Tree, which can (1) take more space than numeric values and (2) require the B-Tree to be re-balanced if keys are inserted in arbitrary order (no notion of increasing value as with numeric pk). The penalty in practice can range from insignificant to huge. It all depends on the usage, the number of rows, the average size of the string key, the queries which join table, etc.
