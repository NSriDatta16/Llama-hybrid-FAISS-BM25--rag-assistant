[site]: datascience
[post_id]: 106164
[parent_id]: 
[tags]: 
How do you train a semantic segmentation model to optimize for IoU rather than accuracy?

I am currently building a U-NET semantic segmentation model on Tensorflow Keras to classify pixels as belonging to or not belonging to a class. For this problem, I've isolated the masks for only one class (even if multiple mask classes exist) because my aim is for the model to excel at recognizing the presence of the one class in unseen images. In the current training regimen, it appears that the model's accuracy plateaus after maybe 20 epochs of training. However, the mean Intersection over Union appears to be flat from the very first epoch to the last. The validation accuracy ends up around 70% when the model is done training, but I suspect this is because of imbalanced classes more than that my model is any good at classifying the image pixels. I'm relatively new to machine learning and deep learning, so really I'm hoping to get some high-level advice on how you'd typically go about solving this problem. Is my problem that I've misspecified something in the UNET architecture? I chose a sigmoid activation function in the output layer and am using the Adam optimizer and binary crossentropy in the compile call. Metrics in the compile call are currently 'accuracy' and the keras.metrics.meanIoU with num_classes = 2. Is Intersection Over Union even the metric I should be optimizing for in this kind of problem? Are there common-sense image augmentation steps I should be attempting to improve my model's classification efficacy?
