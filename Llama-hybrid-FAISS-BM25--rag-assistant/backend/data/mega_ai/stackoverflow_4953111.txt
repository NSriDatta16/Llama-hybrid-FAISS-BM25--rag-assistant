[site]: stackoverflow
[post_id]: 4953111
[parent_id]: 4952997
[tags]: 
For this to work, you'll need to add a MouseListener to your painting JPanel (and this can be coded in a single class that extends MouseAdapter). Then you would override mousePressed and mouseReleased (if those are the methods desired), and in those methods get the mouse position Point from the MouseEvent object passed into it. You will then use the values of the Points to draw a line in your BufferedImage. My guess is that you will want to get the starting point on mousePressed and the end point on mouseReleased and then draw the line in the buffer after mouseReleased. You would need a MouseMotionListener (again the MouseAdapter class above would work for this) if you need to draw a line dynamically on mouseDragged. Check out the tutorials for excellent sample code and explanations: How To Write a MouseListener The semi-pseudocode for doing this is something like: // assuming a private inner class private class MyMouseAdapter extends MouseAdapter { @Override public void mousePressed(MouseEvent e) { // get your starting point from e, the MouseEvent and store it in variable } @Override public void mouseReleased(MouseEvent e) { // get your end point from e, the MouseEvent // get the Graphics object from the BufferedImage // set the color // set rendering hints for antialiasing if desired // draw your line using the starting and end points // **** dispose your graphics object **** don't forget! // repaint your JPanel } }
