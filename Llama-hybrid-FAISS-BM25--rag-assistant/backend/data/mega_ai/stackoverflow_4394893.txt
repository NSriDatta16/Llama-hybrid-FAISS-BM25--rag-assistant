[site]: stackoverflow
[post_id]: 4394893
[parent_id]: 4394651
[tags]: 
Ahh I think I remember. If you think of a 2d array as a table in memory, the first value is the row, the second value is a column. [0, 0] [0, 1] [0, 2] [0, 3]... [1, 0] [1, 1] [1, 2] [1, 3]... When you iterate over it, the first loop is the row, the second loop is the column. It's quicker to iterate by doing foreach row, assign each column. In the second scenario it's values are assigned as [0, 0] [1, 0] [2, 0] [3, 0]... [0, 1] [1, 1] [2, 1] [3, 1]... So this is slower because your looping, you're assigning foreach column, foreach row. You're only assigning the first column, for each row. Does that make sense? Edit: This was one of the things I was looking for: http://en.wikipedia.org/wiki/Row-major_order In row-major storage, a multidimensional array in linear memory is accessed such that rows are stored one after the other. So when iterating over a row at a time, it's not jumping around memory looking for each next row to assign the value to the column, it has the row, assigns all columns, then jumps to the next row in memory.
