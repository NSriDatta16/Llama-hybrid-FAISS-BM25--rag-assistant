[site]: stackoverflow
[post_id]: 1351942
[parent_id]: 1350816
[tags]: 
JNDI is a very powerful mechanism for both organizing configuration information and discovering and listening to services via using the EventContext . In JNDI you can lookup and listen to any object (not just DataSource s), assuming your JNDI service provider supports it. Of course, the only issue is actually having a JNDI service provider; the great thing about this is that it surprisingly easy to roll your own. After all you can encode any Java instance into XML using the JavaBeans XMLEncoder and XMLDecoder : you don't need to rely on running within an application server! So what is the difference between this an having configuration files? Well, it can be much cleaner because all of your applications can get their configuration from the same place . If they need to share configuration information (e.g. database locations) then this can be defined once in JNDI . Suppose you moved database servers: you don't need to remember the gazillion config files with the location in it. You just go to the one place: JNDI.
