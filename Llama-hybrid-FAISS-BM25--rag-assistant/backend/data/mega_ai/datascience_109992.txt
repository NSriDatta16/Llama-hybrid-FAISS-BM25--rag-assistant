[site]: datascience
[post_id]: 109992
[parent_id]: 109987
[tags]: 
Upon first glance, this model is likely overfitting. Not always, but many times, whenever you have better training metrics than validation metrics (lower training loss, higher training accuracy), it is indicative of some level of overfitting because the model essentially "memorized" some portion of the training data, and it is not generalizing well to data it has not seen before. However, looking at the charts, your validation loss (on average) is several orders of magnitude larger than the training loss. Depending on what loss you are using, there should typically not be this big of a difference in the scale of the loss. Consider the following: Make sure your validation and training data are preprocessed identically . If you applied certain transformations/preprocessing steps to your training data, do the same to your validation data. This is extremely important, and, if I had to guess, this may be what went wrong in your training. If you normalized your training data, for example, but you didn't normalize your validation data (for example), then your training loss will be several orders of magnitude smaller than the validation loss. Once you check that your training and validation data are consistent before input, make sure to add in regularization (a dropout layer is typical for neural networks) so that your model is not exposed to all of the training data at every layer. A dropout of 0.1-0.3 is pretty typical but a reasonable amount should be ok. Shuffle and randomly split the train and validation data. If the model recognizes some pattern that's in the training data, but not in the validation, this would also cause some overfitting.
