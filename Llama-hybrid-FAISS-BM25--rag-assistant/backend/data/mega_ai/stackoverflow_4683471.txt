[site]: stackoverflow
[post_id]: 4683471
[parent_id]: 4670873
[tags]: 
This is not ready. Similar question but main focus on graph libraries here and similar question but in C# , maybe useful. The files that are relevant to this question are ./networkx/generators/degree_seq.py (997 lines, about generating graps with given degree sequence) and ./networkx/algorithms/mixing.py (line 20, function degree_assortativity(G) about probability based graphs) and also note that its source code refer to 92 references, not sure whether you want to reinvent the wheel. For igraph, please, read the line 835 of the file convert.c about weighted edges. You can get the source for Networkx here and the source for igraph here . Please, note that the former is under BSD license and done in Python while igraph under GNU (GPL) and done in C. To get started with Networkx, a helpful line about creating weighted graph from its jUnits test_convert_scipy.py -file: def create_weighted(self, G): g = cycle_graph(4) e = g.edges() source = [u for u,v in e] dest = [v for u,v in e] weight = [s+10 for s in source] ex = zip(source, dest, weight) G.add_weighted_edges_from(ex) return G So to create your Markov Chain, help about directed weighted graph here , something like this perhaps: >>> DG=nx.DiGraph() >>> DG.add_weighted_edges_from([(0,0,0.5),(1,1,0.5),(3,3,1),(0,1,0.5),(1,2,0.5),(2,3,0.5), (2,1,0.5)]) or perhaps there is some ready markov chain generation tool as there are for some other stochastic processes, more here . Cannot find an algorithm to analyze the graph with excepted value or do trials with different sets as in your example, perhaps there is none, and you must stick with other repliers' solutions.
