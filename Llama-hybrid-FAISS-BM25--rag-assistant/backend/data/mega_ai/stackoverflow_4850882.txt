[site]: stackoverflow
[post_id]: 4850882
[parent_id]: 4850578
[tags]: 
I'm going to assume that you are using a static library and by binary you mean a .lib that will be linked at compile time (as opposed to a dll or the like that might be mismatched at run-time). Seems to me the easiest way is to have this sort of a construct in your .h file #ifdef _RELEASE //or whatever your compiler uses #define InitialiseLibrary InitialiseLibraryRelease #else #define InitialiseLibrary InitialiseLibraryDebug #endif Similarly in the cpp file of the library: #ifdef _RELEASE //or whatever your compiler uses void InitialiseLibraryRelease() { CommonInitialise(); } #else void InitialiseLibraryDebug() { CommonInitialise(); } #endif Now in the main exe which is using the library: InitialiseLibrary(); If the release-ness of the library and exe don;t match then the linker will report not matching one or other InitialiseLibrary... function. A different option is to ensure that the release and debug libraries compile to differently named files and then get the link to work using #pragma in the .h file (as opposed to explicitly including the library in a project). Using the #ifdef as above you can select at compile time which library to link by choosing which #pragma is used. This second technique doesn't exactly address your question (as it doesn't STOP the link happening if the programmer tries to force it) but it is a normal way of dealing with difficulties of this sort (and has advantages in complex build environments)
