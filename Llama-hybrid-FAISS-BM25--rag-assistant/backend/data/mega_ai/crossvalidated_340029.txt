[site]: crossvalidated
[post_id]: 340029
[parent_id]: 340010
[tags]: 
Even the first plot is slightly off: the 'peaks' are being undersampled. There's a piece missing in the algorithm you used. It should be: Define $h(x| \mu_1, \sigma_1, \mu_2, \sigma_2) = \frac{1}{2}\Big(\frac{1}{\sigma_1}\text{exp}\big(-\frac{(x-\mu_1)^2}{2 \sigma_1^2}\big) + \frac{1}{\sigma_2}\text{exp}\big(-\frac{(x-\mu_2)^2}{2 \sigma_2^2}\big)\Big)$ Use proposal distribution $u \sim \text{Unif}(-10, 10)$, initialize $u_0 = 0$ While $\text{i} Draw candidate, $\text{v}$, from the proposal distribution Compute $\text{p} = \text{min}\big(1, \frac{h(v)}{h(u)}\big)$ If $\text{r} \sim \text{Unif}(0,1) Else $\text{sample}_i = \text{u}$ Increment $\text{i}$ Note the addition of the "Else $\text{sample}_i = \text{u}$" piece. If you only add samples where $\text{r} def compute_mcmc(mu1, sig1, mu2, sig2): args = mu1, sig1, mu2, sig2 num_samples = 10000 low, high = -10, 10 # Draw samples samples_ = np.zeros(num_samples) sample_idx = 0 u = 0.0 while sample_idx then the plots will verify the correct distribution (I increased the sample size to 30k and the number of bins in the histogram to 40 to show more detail).
