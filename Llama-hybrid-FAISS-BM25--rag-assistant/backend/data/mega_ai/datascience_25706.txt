[site]: datascience
[post_id]: 25706
[parent_id]: 22314
[tags]: 
There are various ways to handle string inputs to neural networks, but since you are trying to predict spelling difficulty, I suggests representing your words as a sequence of characters. This will preserve information about the particular spelling of the words including the order of the letters. To represent a sequence of characters you can one-hot encode each character, so each word will be represented as a sequence of one-hot length 26 vectors. To handle this kind of input I suggest either a 1D Convolutional Neural Network or some flavor of a Recurrent Neural Network. If you choose a 1D CNN you will have to feed it fixed sized inputs. To do this choose a max word length, k , and either cut off or pad with zeros each input word to fit into a k*26 input matrix. Here is an example of a CNN architecture you might use in Keras: model = Sequential() model.add(Convolution1D(nb_filter=32, filter_length=5, activation='relu', input_shape=(k, 26)) model.add(MaxPooling1D()) model.add(Convolution1D(nb_filter=32, filter_length=5, activation='relu') model.add(MaxPooling1D()) model.add(Dropout(0.25)) model.add(Flatten()) model.add(Dense(64, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(3, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
