[site]: stackoverflow
[post_id]: 4552218
[parent_id]: 
[tags]: 
XPath string for all children of namespaced elements

Just getting started with XPath, and using it's implementation with PHP's SimpleXML objects. Right now I'm using //zuq:* to create an array of SimpleXML objects with the zuq prefix in a given document. However, I'd like the SimpleXML objects to reference all descendants regardless of namespace. I tried using //child::zuq:* , but the SimpleXML trees it creates don't seem to be complete. Essentially, the objects captured should be all the top level objects of the zuq namespace throughout the document, containing all descendant elements regardless of namespace, including zuq . tl;dr: How can I create a SimpleXML object tree from a given document where each SimpleXML root object is the highest level document element of a given namespace (such as zuq ) containing all descendants of said element regardless of the descendant namespace? XPath is not a requisite but appears to be the best choice based on my reading. test.html Untitled Document Heading Paragraph ... $sxml = simplexml_load_file('test.html'); $sxml_zuq = $sxml->xpath('//zuq:*/descendant-or-self::node()'); print_r($sxml_zuq); Produces: Array ( [0] => SimpleXMLElement Object ( [@attributes] => Array ( [name] => myRegion ) [div] => SimpleXMLElement Object ( [@attributes] => Array ( [class] => myClass ) [h1] => SimpleXMLElement Object //I don't know why these don't contain their zuq descendants ( ) [p] => SimpleXMLElement Object ( ) ) ) [1] => SimpleXMLElement Object ( [@attributes] => Array ( [name] => myRegion ) [div] => SimpleXMLElement Object ( [@attributes] => Array ( [class] => myClass ) [h1] => SimpleXMLElement Object ( ) [p] => SimpleXMLElement Object ( ) ) ) [2] => SimpleXMLElement Object ( [@attributes] => Array ( [class] => myClass ) [h1] => SimpleXMLElement Object ( ) [p] => SimpleXMLElement Object ( ) ) [3] => SimpleXMLElement Object ( [@attributes] => Array ( [class] => myClass ) [h1] => SimpleXMLElement Object ( ) [p] => SimpleXMLElement Object ( ) ) [4] => SimpleXMLElement Object ( ) [5] => SimpleXMLElement Object ( [@attributes] => Array ( [name] => myDataHeading ) ) [6] => SimpleXMLElement Object ( [@attributes] => Array ( [class] => myClass ) [h1] => SimpleXMLElement Object ( ) [p] => SimpleXMLElement Object ( ) ) [7] => SimpleXMLElement Object ( ) [8] => SimpleXMLElement Object ( ) [9] => SimpleXMLElement Object ( [@attributes] => Array ( [name] => myDataParagraph ) ) [10] => SimpleXMLElement Object ( [@attributes] => Array ( [name] => myDataParagraph ) ) [11] => SimpleXMLElement Object ( [@attributes] => Array ( [type] => trim ) ) [12] => SimpleXMLElement Object ( [@attributes] => Array ( [type] => trim ) ) [13] => SimpleXMLElement Object ( [@attributes] => Array ( [name] => length [value] => 200 ) ) [14] => SimpleXMLElement Object ( [@attributes] => Array ( [type] => trim ) ) [15] => SimpleXMLElement Object ( [@attributes] => Array ( [name] => append ) [span] => ... ) [16] => SimpleXMLElement Object ( [@attributes] => Array ( [name] => append ) [span] => ... ) [17] => SimpleXMLElement Object ( [@attributes] => Array ( [class] => paragraphTrimOverflow ) [0] => ... ) [18] => SimpleXMLElement Object ( [@attributes] => Array ( [class] => paragraphTrimOverflow ) [0] => ... ) [19] => SimpleXMLElement Object ( [@attributes] => Array ( [name] => append ) [span] => ... ) [20] => SimpleXMLElement Object ( [@attributes] => Array ( [type] => trim ) ) [21] => SimpleXMLElement Object ( [@attributes] => Array ( [name] => myDataParagraph ) ) [22] => SimpleXMLElement Object ( ) [23] => SimpleXMLElement Object ( [@attributes] => Array ( [class] => myClass ) [h1] => SimpleXMLElement Object ( ) [p] => SimpleXMLElement Object ( ) ) [24] => SimpleXMLElement Object ( [@attributes] => Array ( [name] => myRegion ) [div] => SimpleXMLElement Object ( [@attributes] => Array ( [class] => myClass ) [h1] => SimpleXMLElement Object ( ) [p] => SimpleXMLElement Object ( ) ) ) )
