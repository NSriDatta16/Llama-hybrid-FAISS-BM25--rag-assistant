[site]: stackoverflow
[post_id]: 1197679
[parent_id]: 1197616
[tags]: 
This is a huge topic and even the best answers from the best SOers could only hope to scratch the surface, but I'll give my two cents. Classes are the foundation of OOP . They are, in a very basic way, object blueprints. They afford many features to the programmer, including encapsulation and polymorphism. Encapsulation, inheritance, and polymorphism are very key aspects of OOP, so I'm going to focus on those for my example. I'll write a structured (functions only) and then an OOP version of a code snippet and I hope you will understand the benefits. First, the structured example 'adult' , 'name' => 'John' ); $baby = array( 'type' => 'baby' , 'name' => 'Emma' ); speak( $adult ); speak( $baby ); And now, the OOP example abstract class Person { protected $name; public function __construct( $name ) { $this->name = $name; } abstract public function speak(); } class Adult extends Person { public function speak() { echo "Hello, my name is " . $this->name; } } class Baby extends Person { public function speak() { echo "Goo goo ga ga"; } } $adult = new Adult( 'John' ); $baby = new Baby( 'Emma' ); $adult->speak(); $baby->speak(); Not only should it be evident that just creating new data structures (objects) is easier and more controlled, pay attention to the logic in the speak() function in the first example, to the speak() methods in the 2nd. Notice how the first one must explicitly check the type of person before it can act? What happens when you add other action functions, like walk(), sit(), or whatever else you might have for your data? Each of those functions will have to duplicate the "type" check to make sure they execute correctly. This is the opposite of encapsulation. The data and the functions which use/modify them are not connected in any explicit way. Whereas with the OOP example, the correct speak() method is invoked based on how the object was created. This is inheritance/polymorphism in action. And notice how speak() in this example, being a method of the object, is explicitly connected to the data it's acting upon? You are stepping into a big world, and I wish you luck with your learning. Let me know if you have any questions.
