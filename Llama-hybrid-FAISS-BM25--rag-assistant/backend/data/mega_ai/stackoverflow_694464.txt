[site]: stackoverflow
[post_id]: 694464
[parent_id]: 694449
[tags]: 
You can't upcast A to B in your example, because: return (T)new A(/*some int */); Instantiates an A, which is not a B. Just because a "B is an A" does not mean "A is a B". You would have to first instantiate a B, cast it to an A, do what you want, and then upcast it back to a B. I'm not sure if this is will compile, but you could try this: T blah = new T(5); //this means your B will need to implement a int constructor A blah2 = (A)blah; //operate on A specific operations in blah2 T upcasted = (T)blah2; //alternatively T upcasted = blah2 as T; Consider refactoring your contructor such that you initialize the integer as a property, instead of a parameter of the constructor. I strive to have default(no parameters) contructors so that generic code can instantiate the class easily.
