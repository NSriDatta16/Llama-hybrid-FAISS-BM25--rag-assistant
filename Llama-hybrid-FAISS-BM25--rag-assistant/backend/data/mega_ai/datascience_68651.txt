[site]: datascience
[post_id]: 68651
[parent_id]: 
[tags]: 
De-Normalizing Predicted Values from Neural Network

When fitting the neural network model I normalized the data using the min/max formula: normalized = (data - min(data)) / (max(data) - min(data)) I fitted the neural network model and got the predicted values (values ranging from 0 to 1, since the data was normalized). Now I would like to get the Root-Mean-Square-Error (RMSE). I could calculate it with predictions and the normalized data, but since I want to compare it to RMSE from some other models (where I didn't normalize the data), the result doesn't really help me. So I tried to de-normalize the predicted data but am really not sure if this is the right way of doing it (it just seemed right, and the RMSE looks like it could be correct). This is how I did it: nn = neuralnet (function, data = train_normalized) Predictions prediction_train = predict (nn, train_normalized) prediction_test = predict (nn, test_normalized) In-sample RMSE predicted_de_normalized_train = predicted_train * (max(data_train) - min(data_train)) + min(data_train) #data_train is the original train data (un-normalized) on which the model is based sqrt(mean((predicted_de_normalized_train - data_train)^2)) Out-of-Sample RMSE predicted_de_normalized_test = predicted_test * (max(data_test) - min(data_test)) + min(data_test) #data_train is the original test data (un-normalized) sqrt(mean((predicted_de_normalized_test - data_test)^2)) Thanks for the help
