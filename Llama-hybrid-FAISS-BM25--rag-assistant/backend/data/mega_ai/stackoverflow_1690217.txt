[site]: stackoverflow
[post_id]: 1690217
[parent_id]: 499694
[tags]: 
There are 2 keys to dealing with timezones: Store all of your date/times in the same timezone (can be any timezone, but using UTC does simplify things.) Decide where in your application date/times will be converted to/from the storage timezone to the user display timezone. This can be done in the database abstraction layer, the application code, or in the page templates (any part of the MVC stack basically). The important thing is to be consistent. Also remember that php has its own timezone setting independent of MySQL. If you're running php >5.1, you can change the php timezone at runtime using date_set_default_timezone(). If you decide to do the timezone conversion when you retrieve/store information in the database, MySQL's convert_tz() function will become your new best friend. For me it's has been easiest to do the timezone conversions as part of the page templates. Date/times get stored in the database in the UTC timezone, and all application logic is in UTC as well. When outputting a date in HTML, I use a wrapper function for php's date() to output the date in the user's timezone: function getTimezoneOffset($time, $timezone) { $t = new DateTime(date('Y-m-d H:i:s', $time)); $tz = new DateTimeZone($timezone); $t->setTimeZone($tz); return $t->getOffset(); } function myDate($timezone, $format, $timestamp=false) { if (!$timestamp) $timestamp = time(); return date($format, $timestamp+getTimezoneOffset($timestamp, $timezone)); } Likewise, when taking input from the user via forms, do the timezone conversion first so that your application has UTC date/times to work with. Another option is to use PostgreSQL -- unlike MySQL it has timezone support for datetimes built-in.
