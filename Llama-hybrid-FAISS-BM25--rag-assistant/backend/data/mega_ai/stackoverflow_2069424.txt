[site]: stackoverflow
[post_id]: 2069424
[parent_id]: 2069249
[tags]: 
I came up with this solution. I think your idea with the Map may be more elegant, but run this an lets see if we can refine: import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.Map.Entry; public class Main { private static List inputWords = new ArrayList (); private static Map > result = new HashMap >(); public static void main(String[] args) { collectInput(); process(); generateOutput(); } /* * Modify this method to collect the input * however you require it */ private static void collectInput(){ // test code inputWords.add("abc"); inputWords.add("def"); inputWords.add("abc"); inputWords.add("ghi"); inputWords.add("abc"); inputWords.add("def"); inputWords.add("abc"); } private static void process(){ // Iterate through every word in our input list for(int i = 0; i ()); } // Add nextWord to the list of adjacent words to thisWord: result.get(thisWord).add(nextWord); } } /* * Rework this method to output results as you need them: */ private static void generateOutput(){ for(Entry e : result.entrySet()){ System.out.println("Symbol: " + e.getKey()); // Count the number of unique instances in the list: Map count = new HashMap (); List words = (List)e.getValue(); for(String s : words){ if(!count.containsKey(s)){ count.put(s, 1); } else{ count.put(s, count.get(s) + 1); } } // Print the occurances of following symbols: for(Entry f : count.entrySet()){ System.out.println("\t following symbol: " + f.getKey() + " : " + f.getValue()); } } System.out.println(); } }
