[site]: stackoverflow
[post_id]: 4744810
[parent_id]: 4721487
[tags]: 
Truthfully, this is a fairly substantial build, and there are some best practices that I use to keep all this stuff organized. First, I would partition your code into several modules, and lay it out as follows: pom.xml /src /app /app-name pom.xml /src ... /app-name-sdk pom.xml /src ... /deployment pom.xml /src /assembly image.xml /main /app-folder /bin startup-script.sh startup-script.bat /etc config.conf ... /plugins /plugin-A pom.xml /src ... /plugin-B pom.xml /src ... An this point, you've logically separated out all the various component pieces, leaving it clear where everything is, packaged into logical groups. (Now it doesn't look like folder vomit when I check this out again, since I can now keep /doc and /bin directories at the top level and know that the sub-directories under /src describe what's in each associated submodule.) At this point, the top level pom.xml should look approximately like this: 4.0.0 app-name-parent com.mycompany.my-app 1.3.2-SNAPSHOT pom [Parent] My App src/app/app-name src/app/my-app-sdk src/plugins/plugin-A src/plugins/plugin-B src/app/distribution USER true false UTF-8 1.1 1.3 maven-compiler-plugin 2.3 1.6 1.6 ${compiler.debug} ${compiler.optimize} true maven-surefire-plugin 2.5 **/*Test.java junit junit 4.3.1 test release false true ci-server env.SVN_REVISION ${env.SVN_REVISION} Then, all of your child modules need to have defined the link to the parent, like so: 4.0.0 app-name-parent com.mycompany.my-app 1.3.2-SNAPSHOT ../../.. com.mycompany.my-app app-name [App] My App TODO ${project.parent.groupId} app-name-sdk ${project.version} junit junit test For the love of all that is holy and right in this world, do not try to package up everything in one of the modules associated with a jar output. This is wrong, and all those who do this are shunt . I'm kidding. But seriously: break out the packaging process into its own separate module, here the src/app/deployment module to package up the other artifacts of the build. Then, it really only has dependencies on other components in the system, and can look something like: 4.0.0 app-name-parent com.mycompany.my-app 1.3.2-SNAPSHOT ../../.. com.mycompany.my-app deployment pom [App] Deployment Image TODO maven-assembly-plugin image package single gnu src/assembly/image.xml ${project.parent.groupId} my-app ${project.version} ${project.parent.groupId}.plugins plugin-A ${plugin-A.version} ${project.parent.groupId}.plugins plugin-B ${plugin-B.version} Then you can use an assembly descriptor file (here, image.xml) to package up everything into one coherent whole, like so: image tar.gz false /app-folder/jars false 0644 0644 compile dependencies --> ${project.parent.groupId}:* /app-folder/bin unix 0755 0744 false src/main/app-folder/bin **/* *.*.formatted /app-folder/etc unix 0640 0744 true src/main/app-folder/etc **/* *.*.formatted You can get a lot fancier with the packaging, but this is the bare bones that gets you 90% of the way there. Sorry for the length of this, but I do this a lot , and following this practice really makes everything much cleaner and easier to figure out, particularly if I have to come back to it months afterwards.
