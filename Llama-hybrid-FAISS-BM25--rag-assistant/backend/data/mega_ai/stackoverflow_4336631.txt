[site]: stackoverflow
[post_id]: 4336631
[parent_id]: 4336285
[tags]: 
I understand your frustration, but keep in mind that there is a lot of bad code out there, so keep your chin-up. not all code is bad :) this is the process that I tend to follow: look for any unit tests as they should document what the code is supposed to do... navigate through the code using code rush / resharper / visual studio shortcuts - this should give you some ideas about the logical and physical tiers involved... scan the code first, looking for common patterns, naming conventions, and code styles - this should give you insight into the teams standards and maybe the original coders mind set... as I navigate through the code heirarchy I make a note of the the objects being used... typically with pen & paper drawing a simple activity diagram : I tend to start from a common entry point, so if it is a UI, start from the view and work your way through to the data access code, if its a service start from the service boundary and work your way through to the data access code... look for code that could be refactored - if you can see code that can be refactored, you have learned how to simplify it without changing its behavior... practice building the same thing that you are reviewing, but in a different way... as you read through untested code, think of ways to make it testable... use code rush diagnostics tools to find methods that are of high maintenance complexity or cyclomatic complexity and pay special attention to these areas because chances are, this is where the most bugs are... Good luck
