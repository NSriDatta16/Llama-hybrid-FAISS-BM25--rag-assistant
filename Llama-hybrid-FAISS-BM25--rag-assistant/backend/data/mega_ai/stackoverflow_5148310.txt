[site]: stackoverflow
[post_id]: 5148310
[parent_id]: 5146046
[tags]: 
Divide and conquer, see if you can get the target test server attached to the same switch as your developers. Use divide the clients across those machines and get everyone to run against the test server. (sticking to the same switch removes network effects from distorting the results on the hardware) Developers usually have pretty grunty machines and there are normally a few of them. That way you will not destroy the test machine and can monitor what occurs. Ideally you would be able to use Visual Studio 2010 Load Test agent on the dev machines. This tool will give you the ability to monitor stats from all the machine in the test and give a really good picture of how your server responds. If the machines running test test host a webpage on localhost that calls the required web service may be the best bet for getting the test going. This depends on the exact nature of your dev environment and Visual Studio licencing arrangments. One of the key things to figure out is how many requests/second each client would make of the WCF web service. Once you have that number you can divide that number be the maximum requests/second of each test machine in order to figure out how many test machines are required. For the purposes of load testing, you do not need to have "actual" clients of your web service. As the web service is an interface you can simulate the activity of a normal client and run that without the normal "think time" pauses giving you the ability test the load of 1000 clients without needing an instance of each client running. E.g. if each client accesses the web service once every minute for a total of 1000/60 = 16.7 calls per second. IF each call completes in 3 seconds, 50 virtual users would be able to create the same load (50/3=16.7). From experience, two machines running Visual Studio load test would be able to generate the load and not overload thier CPU.
