[site]: stackoverflow
[post_id]: 4763014
[parent_id]: 
[tags]: 
Search highlighter in Java

boldHighlight method takes text string and highlights in it q keywords via tags colorHighlight method takes text string and highlights int q keywords via with 12 alternating colors String text = "The use of hello as a telephone greeting has been credited to Thomas Edison; according to one source, he expressed his surprise with a misheard Hullo. Alexander Graham Bell initially used Ahoy (as used on ships) as a telephone greeting" String keywords = "HELLO Surprise" boldHighlight(text, keywords); // will produce: The use of hello as a telephone greeting has been credited to Thomas Edison; according to one source, he expressed his surprise with a misheard Hullo. Alexander Graham Bell initially used Ahoy (as used on ships) as a telephone greeting` colorHighlight(text, keywords); // will produce: The use of hello as a telephone greeting has been credited to Thomas Edison;>according to one source, he expressed his surprise with a misheard Hullo. Alexander Graham Bell initially used Ahoy (as used on ships) as a telephone greeting The question: is there something I could use like third party library that would do similar job as bellow methods? Or if you look at the code, is there something that can be improved, to make the performance better and/or make it more elegant?` private static final String[] colors = new String[]{"ffff66", "a0ffff", "99ff99", "ff9999", "ff66ff", "880000", "00aa00", "886800", "004699", "990099", "ffff66", "a0ffff"}; public static String safeCharWithSpace(String input) { input = input.trim(); return Normalizer.normalize(input.toLowerCase(), Normalizer.Form.NFD) .replaceAll("\\p{InCombiningDiacriticalMarks}+", "") .replaceAll("[^\\p{Alnum}]+", " "); } private static String prepQuery(String q) { try { log.debug("qr encoded: " + q); q = URLDecoder.decode(q, "UTF-8"); } catch (UnsupportedEncodingException ignore) { } log.debug("qr decoded: " + q); return removeIgnoreCase(q, stopWords); } public static String boldHighlight(String text, String q) { return highlight(text, q, false); } public static String colorHighlight(String text, String q) { return highlight(text, q, true); } private static String replaceWord(String text, String keyword, int colorNumber, boolean useColor) { String color = ""; keyword = safeCharWithSpace(keyword); if (StringUtils.isNotEmpty(keyword) && !StringUtils.isWhitespace(keyword)) { if (useColor) color = " style='background-color: " + colors[colorNumber] + "'"; return text.replaceAll("(?i)(" + keyword + ")(?!([^ >)", " $1 "); } else return text; } public static String highlight(String text, String q, boolean useColor) { String qr = prepQuery(q); String rtn = null; int i = 0; if (qr.startsWith("\"")) { String keywords = StringUtils.remove(qr, "\""); rtn = replaceWord(text, keywords, 0, useColor); } else { String[] keywords = qr.split("\\s"); for (String keyword : keywords) { rtn = replaceWord(text, keyword, i, useColor); if (useColor) { if (i for removal of stop words removeIgnoreCase() in prepQuery() method refer to my other post: Removing strings from another string in java
