[site]: stackoverflow
[post_id]: 5287932
[parent_id]: 5285758
[tags]: 
I'm still not entirely sure what the problem is, other than for some reason dijit.DialogUnderlay code is getting confused. FWIW, this doesn't happen in Dojo 1.6. While I was poking at some potential solutions, I seemed to accidentally find out that avoiding this problem is perhaps as easy as calling hide() on the dialog immediately before destroying it, e.g.: this.actionDialog.hide(); this.actionDialog.destroyRecursive(); Alternatively, you might be interested in hiding the dialog, then destroying it once the hide animation finishes. Here's how you can do it on Dojo 1.5 and earlier (tested 1.3+): dlg.connect(dlg._fadeOut, 'onEnd', function() { this.destroyRecursive(); }); dlg.hide(); In 1.6, the fadeOut animation is no longer exposed on the instance (granted, it was technically private earlier anyway), but onHide now triggers once the animation ends (whereas before it triggered as soon as it began). Unfortunately a setTimeout is needed to get around an error that occurs due to other code in the branch calling onHide , which assumes that something still exists on the instance which won't after we've destroyed it (see #12436 ). dlg.connect(dlg, 'onHide', function() { setTimeout(function() { dlg.destroyRecursive(); }, 0); }); dlg.hide(); See it in action on JSFiddle: http://jsfiddle.net/3MNRu/1/ (See the initial version for the original error in the question)
