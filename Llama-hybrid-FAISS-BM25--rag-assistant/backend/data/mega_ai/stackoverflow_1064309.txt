[site]: stackoverflow
[post_id]: 1064309
[parent_id]: 1062893
[tags]: 
I fully agree to Adam Tuttle's post. I've removed the "solution part" part of my answer in favor of his. So here's my two cents regarding the "general part": Avoiding Evaluate() altogether is the best thing you can do. There is no reason to use it apart from actually evaluating pieces of code (which is another bag of hurt that should be avoided). If that's not what you are doing, then there is no situation that could not be resolved through something more appropriate than Evaluate() , e.g.: is equal to: All of the "conveniency" misuses of Evaluate() can be addressed like this. A few more tips: Avoid meaningless variable names like "x" or "y" (unless you refer to 2D-coordinates, of course). Don't do "#variable#" - you can simply use variable instead. Use Structs wherever you can when you need to access items with a key, e.g. is a lot less elegant than You don't really need " variables.instance " - every component instance has it's own VARIABLES scope. Whatever you stick in there is "instance-only" by default. No need to pass in the FORM scope to a component. The scope is global, so CFCs can see it anyway. Why do you store database stuff in an extra array instead of using the Query object you got when you retrieved them? No need to self-close ( "/>" ) CFML statements - you are not writing XML (though that's a matter of taste).
