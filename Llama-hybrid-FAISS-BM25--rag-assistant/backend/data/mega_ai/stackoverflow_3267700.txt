[site]: stackoverflow
[post_id]: 3267700
[parent_id]: 3267638
[tags]: 
What about a 'Game' class which would hold the majority of the information like a Player and a current room. For an operation such as moving the player, the Game class could move the player to a different room based on the room's level map. The game class would manage all the interactions between the various components of the games. Using events for something like this brings the danger that your events will get tangled. If you're not careful you'll end up with events firing each other off and overflowing your stack, which will lead to flags to turn events off under special circumstances, and a less understandable program. UDPATE: To make the code more manageable, you could model some of the interactions between the main classes as classes themselves, such as a Fight class. Use interfaces to enable your main classes to perform certain interactions. (Note that I have taken the liberty of inventing a few things you may not want in your game). For example: // Supports existance in a room. interface IExistInRoom { Room GetCurrentRoom(); } // Supports moving from one room to another. interface IMoveable : IExistInRoom { void SetCurrentRoom(Room room); } // Supports being involved in a fight. interface IFightable { Int32 HitPoints { get; set; } Int32 Skill { get; } Int32 Luck { get; } } // Example class declarations. class RoomFeature : IExistInRoom class Player : IMoveable, IFightable class Monster : IMoveable, IFightable // I'd proably choose to have this method in Game, as it alters the // games state over one turn only. void Move(IMoveable m, Direction d) { // TODO: Check whether move is valid, if so perform move by // setting the player's location. } // I'd choose to put a fight in its own class because it might // last more than one turn, and may contain some complex logic // and involve player input. class Fight { public Fight(IFightable[] participants) public void Fight() { // TODO: Logic to perform the fight between the participants. } } In your question, you identified the fact that you'd have many classes which have to know about each other if you stuck something like a Move method on your Player class. This is because something like a move neither belongs to a player or to a room - the move affects both objects mutually. By modelling the 'interactions' between the main objects you can avoid many of those dependencies.
