[site]: stackoverflow
[post_id]: 4952509
[parent_id]: 4951920
[tags]: 
All Cocoa NS/CFStrings are Unicode-compliant (UCS-2 internally), Russian and Korean alphabets included. So unless your data are, at some point, passed through a single-byte-char format (a C char[] string, for example), all sensible languages and charsets should be supported automatically. Pay careful attention to your storage and wire formats; that's where ASCII usually lurks. If downloading data from the Web or from an HTTP-based API, pay close attention to the charset within Content-Type header. When converting from NSData or raw memory chunks to NSString, encoding is always one of the parameters. And, like CajunLuke said, start by reproducing the issue. If you need a "lorem ipsum"-type text, copy and paste some random nonsense from the respective Wikipedia. I have an app in the store that deals with Russian and Japanese at the same time (it's a Japanese-Russian dictionary). No special measures were taken to ensure national charset support; however, whenever working with single-byte string, I'd keep in mind what charset is it in.
