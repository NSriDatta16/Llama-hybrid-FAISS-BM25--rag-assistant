[site]: stackoverflow
[post_id]: 3677536
[parent_id]: 3677514
[tags]: 
You can expand the ANY term to include , &> , and another nonterminal (call it ANY_WITHIN_BLOCK say). Then you just use ANY = " " codeblock = " " And then the meaning of {ANY} is unchanged if you really need it later. Okay, I didn't know anything about CocoR and gave you a useless answer, so let's try again. As I started to say later in the comments, I feel that the real issue is that your grammar might be too loose and not sufficiently well specified. When I wrote the CFG for the one language I've tried to create, I ended up using a sort of "meet-in-the-middle" approach: I wrote the top-level structure AND the immediate low-level combinations of tokens first, and then worked to make them meet in the mid-level (at about the level of conditionals and control flow, I guess). You said this language is a bit like Java, so let me just show you the first lines I would write as a first draft to describe its grammar (in pseudocode, sorry. Actually it's like yacc/bison. And here, I'm using your brackets instead of Java's): /* High-level stuff */ program: classes classes: main-class inner-classes inner-classes: inner-classes inner-class | /* empty */ main-class: class-modifier "class" identifier class-block inner-class: "class" identifier class-block class-block: " " class-decls: field-decl | method method: method-signature method-block method-block: " " statements: statements statement | /* empty */ class-modifier: "public" | "private" identifier: /* well, you know */ And at the same time as you do all that, figure out your immediate token combinations, like for example defining "number" as a float or an int and then creating rules for adding/subtracting/etc. them. I don't know what your approach is so far, but you definitely want to make sure you carefully specify everything and use new rules when you want a specific structure. Don't get ridiculous with creating one-to-one rules, but never be afraid to create a new rule if it helps you organize your thoughts better.
