[site]: stackoverflow
[post_id]: 5327686
[parent_id]: 5305102
[tags]: 
Here's what I found... my SetParagraphSpacing wasn't setting everything I needed. It was enough to get the RichTextBox to display properly, but I guess there were some flags not being set. Instead, I changed it to the following, and it seems to be working PERFECTLY, now. You have to use dyLineSpacing IN CONJUNCTION with bLineSpacingRule. bLineSpacing rule seems to be the display side of life, while dyLineSpacing is the flag that is used during the save/load. If you leave off either of these, it doesn't save/load properly or doesn't display properly. I'm not sure the mechanics behind all of this, (if someone can explain, I'd be grateful), but for now, this is the change I've made. public void SetParagraphSpacing(RichTextBox rtb, int Spacing) { PARAFORMAT2 paraform = new PARAFORMAT2(); paraform.cbSize = Marshal.SizeOf(paraform); // NOTE: You need both of these! paraform.bLineSpacingRule = Convert.ToByte(Spacing); paraform.dyLineSpacing = Spacing; paraform.wReserved = 0; paraform.dwMask = ParaMessages.PFM_LINESPACING; IntPtr res = IntPtr.Zero; IntPtr wparam = IntPtr.Zero; //Get the pointer to the FORMATRANGE structure in memory IntPtr lparam = IntPtr.Zero; lparam = Marshal.AllocCoTaskMem(Marshal.SizeOf(paraform)); Marshal.StructureToPtr(paraform, lparam, false); //Send the rendered data for printing res = SendMessage(rtb.Handle, ParaMessages.EM_SETPARAFORMAT, wparam, lparam); //Free the block of memory allocated Marshal.FreeCoTaskMem(lparam); }
