[site]: stackoverflow
[post_id]: 4600151
[parent_id]: 4599971
[tags]: 
You would usually normalize your data entries to their respective range. Since there is no fixed range for them, you'll have to use a sliding range - or, to keep it simpler, normalize them to the daily ranges. For each day, get all entries for a given type, get the highest and the lowest of them, determine the difference between them. Let Bottom=value of the lowest, Range=difference between highest and lowest. Then you calculate for each entry (value - Bottom)/Range, which will result in something between 0.0 and 1.0. These are the numbers you can continue to work with, then. Pseudocode (brackets replaced by indentation to make easier to read): double maxvalues[5]; double minvalues[5]; // init arrays with any item for(i=0; i item[i]) minvalues[i] = item[i]; if (maxvalues[i] =0; --j) scaledItems[j][i] = (items[j][i] - minvalues[i]) / delta; // linear normalization something like that. I'll be more elegant with a good library (STL, boost, whatever you have on the implementation platform), and the normalization should be in a separate function, so you can replace it with other variations like log() as the need arises.
