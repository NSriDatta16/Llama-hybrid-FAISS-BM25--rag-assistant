[site]: stackoverflow
[post_id]: 568622
[parent_id]: 568596
[tags]: 
In short, $^ isn't what you want here. It evaluates to the "names of all the prerequisites, with spaces between them." In the problem Makefile, that causes all three targets to use almost identical command lines, that each look like g++ Tools.cpp Code1.cpp Code2.cpp Code3.cpp Tools.hh makefile -o Code1 From the error message quoted, g++ has decided that makefile should be passed to the linker as if it were an object. It isn't. Without makefile on the line, you would still be compiling and linking all four of your source files, and quite likely leaving the linker to decide which of four main() functions to use. You probably want to leverage the fact that make has a huge number of builtin rules for common cases. Compiling two source files and linking the result fits neatly into those common cases. Its untested, but the following should do all you want (assuming a recent build of gnu make, at least), and have the advantage of only compiling each object once. all: Code1 Code2 Code3 Code1: Code1.o Tools.o Code2: Code2.o Tools.o Code3: Code3.o Tools.o Code1.o Code2.o Code3.o Tools.o: Tools.hh If you needed to set some compiler options you could add a definition for CXXFLAGS, traditionally near the top of the file.
