[site]: stackoverflow
[post_id]: 4447551
[parent_id]: 4099169
[tags]: 
With a pinch of Guava library , the solution is simple and elegant. We can improve the below code by objectifying the key, handling errors etc etc but you can do that yourself import java.io.File; import java.io.IOException; import java.util.Iterator; import java.util.Map; import com.google.common.base.CharMatcher; import com.google.common.base.Charsets; import com.google.common.base.Joiner; import com.google.common.base.Splitter; import com.google.common.collect.Maps; import com.google.common.io.Files; import com.google.common.io.LineProcessor; public class FileProcessor { private static final Splitter SPLITTER = Splitter.on(CharMatcher.WHITESPACE); private static final Joiner KEY_BUILDER = Joiner.on("_").skipNulls(); @SuppressWarnings("unchecked") public static void main(final String[] args) throws IOException { Map result = Files.readLines(new File("c:/1.txt"), Charsets.ISO_8859_1, new LineProcessor() { private final Map result = Maps.newHashMap(); public Object getResult() { return result; } public boolean processLine(final String line) throws IOException { Iterator columns = SPLITTER.split(line).iterator(); String id = columns.next(); String name = columns.next(); String dept = columns.next(); String key = KEY_BUILDER.join(id, name, "null".equals(dept) ? null : dept); result.put(key, new SalaryAndDesignation(columns.next(), columns.next())); return true; } }); System.out.println(result.size()); } final static class SalaryAndDesignation { String salary; String designation; public SalaryAndDesignation(final String salary, final String designation) { super(); this.salary = salary; this.designation = designation; } } } I see using groovy results in lesser code as sample below ( copy/pasted from here ) but never used it myself new File("simple.tab").withReader{r-> line = r.readLine(); println "first line: $line" r.splitEachLine("\t"){fields-> println "fields on line: $fields" } }
