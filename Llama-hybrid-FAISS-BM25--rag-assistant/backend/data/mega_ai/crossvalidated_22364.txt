[site]: crossvalidated
[post_id]: 22364
[parent_id]: 12962
[tags]: 
There are many possible approaches, but it is hard to know what may be best in your situation without more information. It sounds like, for each image, you receive a feature vector, which is an element of $\mathbb{R}^n$. If that's the case, here are a handful of candidate solutions: Store the feature vectors of all prior images, along with their classification, on disk. Periodically (say, once a day) train a learning algorithm on this data, and use the resulting algorithm to classify new images. Disk space is cheap; this solution might be a pragmatic and effective to convert an offline learning algorithm into one that can be used in your online setting. Store the feature vectors of a random sample of 1,000 (or 1,000,000) prior images, along with their classification. Periodically train a learning algorithm on this subsample. Note that you can efficiently update this subsample in an online fashion using standard tricks . This is only interesting if there is some reason why it is hard to store all of the feature vectors of all prior images (which seems hard to imagine, for me, but who knows). For each of the $n$ vectors, keep track of the running average and standard deviation of the non-defective images seen so far. Then, when you receive a new image, if any of its features is at least $c$ standard deviations beyond the mean for that feature, classify it as defective, otherwise classify it as non-defective. You can choose $c$ based upon $n$ and the desired tradeoff between false positives and false negatives. In other words, you maintain a $n$-vector $\mu$ of means, and a $n$-vector $\sigma$ of standard deviations, where $\mu_i$ is the mean of the $i$th feature vector and $\sigma_i$ is the standard deviation of that feature. When you receive a new feature vector $x$, you check whether $|x_i - \mu_i| \ge c \sigma_i$ for any $i$. If not, you classify it as non-defective and you update $\mu$ and $\sigma$. This approach assumes that each parameter from a non-defective image has a Gaussian distribution, and that the parameters are independent. Those assumptions may be optimistic. There are many more sophisticated variants of this scheme which will eliminate the need for these assumptions or improve performance; this is just a simple example to give you an idea. In general, you could look at online algorithms and streaming algorithms.
