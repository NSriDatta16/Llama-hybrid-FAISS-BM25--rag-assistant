[site]: datascience
[post_id]: 63904
[parent_id]: 45174
[tags]: 
There is a seperate module for classes stratification and no one is going to suggest you to use the train_test_split for this. This could be achieved as follows: from sklearn.model_selection import StratifiedKFold train_all = [] evaluate_all = [] skf = StratifiedKFold(n_splits=cv_total, random_state=1234, shuffle=True) for train_index, evaluate_index in skf.split(train_df.index.values, train_df.coverage_class): train_all.append(train_index) evaluate_all.append(evaluate_index) print(train_index.shape,evaluate_index.shape) # the shape is slightly different in different cv, it's OK # Getting each batch def get_cv_data(cv_index): train_index = train_all[cv_index-1] evaluate_index = evaluate_all[cv_index-1] x_train = np.array(train_df.images[train_index].map(upsample).tolist()).reshape(-1, img_size_target, img_size_target, 1) y_train = np.array(train_df.masks[train_index].map(upsample).tolist()).reshape(-1, img_size_target, img_size_target, 1) x_valid = np.array(train_df.images[evaluate_index].map(upsample).tolist()).reshape(-1, img_size_target, img_size_target, 1) y_valid = np.array(train_df.masks[evaluate_index].map(upsample).tolist()).reshape(-1, img_size_target, img_size_target, 1) return x_train,y_train,x_valid,y_valid # Training loop for cv_index in range(cv_total): x_train, y_train, x_valid, y_valid = get_cv_data(cv_index+1) history = model.fit(x_train, y_train, validation_data=[x_valid, y_valid], epochs=epochs) This is a simple code snippet for using StratifiedKFold with your code. Just replace the required parameters and hyper-parameters accordingly.
