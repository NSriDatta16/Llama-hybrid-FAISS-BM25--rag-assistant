[site]: crossvalidated
[post_id]: 495959
[parent_id]: 
[tags]: 
Coefficients in Functional Regression

I would like to estimate the effect of DoE factors in my response which is a function. For this reason, I tried to apply the Functional Data Analysis method. As example, I have a 12 treatment DoE, library(dplyr) library(mgcv) library(AlgDesign) library(reshape2) library(ggplot2) set.seed(123) cand_list = expand.grid( x1 = c('Level_1', 'Level_2'), x2 = c(0, 1.5, 3), x3 = c(2, 7)) doe_grid $design doe_grid$ Run and I measured the temperature/response through time at each treatment. Also, each response has different length which should be ok for FDA. for(i in LETTERS[1:12]) { time_stamp % mutate_if(is.character, as.factor) find_max_Run % table %>% which.max Then, I am fitting splines regression ( gam ) with Temperature ~ Time and I save the predictions/Functions smooth_curves $Run%>% levels %>% length, ncol = 12) for(j in 1 : (dat1$ Run %>% levels %>% length)){ # j = 1 fit $Time_id, dat4$ Temperature) # lines(dat4 $Time_id, fit$ fitted) smooth_curves[j,] % filter(Run == unique(dat1 $Run)[find_max_Run])) # fit$ fitted %>% length } smooth_curves %>% t %>% .[,1:3] %>% matplot Next, I am getting the eigenvectors ( fpca_loadings ) and scores ( fpca_scores ) for the first 2 FPCA, fpca_res $x[,1:2] fpca_loadings rotation[,1:2] I fit linear model on each FPCA (using AIC to determine the "best" lm model). Like FPCA1 ~ DOE_factors . Then using the linear models I am predicting the new scores (FPCA_new = pred_scores ) for some new data (ok, here I don't really have new data but it doesn't matter). lm_PC1 % as.matrix Finally, using the fpca_loadings from before and the new scores ( pred_scores ) I predict the functions. mean_hat So far, so good (please comment otherwise). I have the coefficients from FPCA1 ~ DOE_factors and FPCA2 ~ DOE_factors but I would like to have the coefficients for Temperature ~ DOE_factors . Any ideas how to get the effect of DoE factors in Functional Regression? Thanks. UPDATE I have found the functional coefficients by multiplying the loadings with the coefficients from the two liner models ( lm_PC1 & lm_PC2 ). lm_coef % as.matrix pred_coef % melt %>% ggplot(aes(y = value, x = Var2, colour = Var1)) + geom_point() Now, the coefficient here are functions as should be. Also, some of the resources I used is this1 , this2 , this3 and, this4 one (lecture 13).
