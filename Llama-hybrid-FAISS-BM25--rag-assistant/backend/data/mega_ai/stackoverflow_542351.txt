[site]: stackoverflow
[post_id]: 542351
[parent_id]: 542296
[tags]: 
One way to do this would be to simply execute a normal query this way using INTO in SQL: SELECT * INTO NewTableName FROM ExistingTableName This automatically creates a new table and inserts the rows of the old one. Another way would be to use SqlBulkCopy from the System.Data.SqlClient namespace. There is a nice CodeProject article explaining how to do this: SQL Bulk Copy with C#.Net Programmers usually need to transfer production data for testing or analyzing. The simplest way to copy lots of data from any resources to SQL Server is BulkCopying. .NET Framework 2.0 contains a class in ADO.NET "System.Data.SqlClient" namespace: SqlBulkCopy. The bulk copy operation usually has two separated phases. In the first phase you get the source data. The source could be various data platforms such as Access, Excel, SQL.. You must get the source data in your code wrapping it in a DataTable, or any DataReader class which implements IDataReader. After that, in the second phase, you must connect the target SQL Database and perform the bulk copy operation. The bulk copy operation in .Net is a very fast way to copy large amount of data somewhere to SQL Server. The reason for that is the Bulkcopy Sql Server mechanism. Inserting all data row by row, one after the other is a very time and system resources consuming. But the bulkcopy mechanism process all data at once. So the data inserting becomes very fast. The code is pretty straightforward: // Establishing connection SqlConnectionStringBuilder cb = new SqlConnectionStringBuilder(); cb.DataSource = "SQLProduction"; cb.InitialCatalog = "Sales"; cb.IntegratedSecurity = true; SqlConnection cnn = new SqlConnection(cb.ConnectionString); // Getting source data SqlCommand cmd = new SqlCommand("SELECT * FROM PendingOrders",cnn); cnn.Open(); SqlDataReader rdr = cmd.ExecuteReader(); // Initializing an SqlBulkCopy object SqlBulkCopy sbc = new SqlBulkCopy("server=.;database=ProductionTest;" + "Integrated Security=SSPI"); // Copying data to destination sbc.DestinationTableName = "Temp"; sbc.WriteToServer(rdr); // Closing connection and the others sbc.Close(); rdr.Close(); cnn.Close();
