[site]: stackoverflow
[post_id]: 4307584
[parent_id]: 4306886
[tags]: 
10.000 triangles is really not a big amount even for your average notebook GPU of today. Display lists are kind of obsolete, that's not the most useful approach. The first thing to do is draw your trianges in a single draw call - that should easily be possible. So: 1) Keep all your triangle data (vertex coordinates) in a single Buffer (that's how JOGL handles vertex arrays it, IIRC). Then either: Update this buffer each frame on CPU and render all of it using glVertexPointer and glDrawArrays , Create a VBO and ( GL_DYNAMIC_DRAW type) and update it each frame with this buffer. A more modern approach, but not really a big difference from the above in terms of speed in this case. And after that, you'd render all of that 10.000 triangles via a single glDrawArrays call. This would still leave the calculation of triangles on the CPU, but would save you a lot of CPU time spent on driver calls - all of the triangles would be sent via your PCI-E at once and rendered in a blink. If that's still too slow: 2) Think if you can/want to move some of the operations done on the triangles to the GPU and have the computations in the vertex shader. I cannot say too much here until I know what calculations you're doing, but I really hope that 1) would be enough. If you had like 10.000 calls to CallList each frame, that's definitely the culprit of your low performance.
