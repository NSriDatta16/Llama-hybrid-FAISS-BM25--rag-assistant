[site]: stackoverflow
[post_id]: 2863416
[parent_id]: 1565635
[tags]: 
Adaptive tesselation. There are many algorithms to this. But here's one: def line_angle((x0,y0),(x1,y1)): return atan2(y1-y0,x1-x0) def adaptive_bezier(p0,p1,p2,lev=32): p01 = midpoint(p0,p1) p12 = midpoint(p1,p2) m = midpoint(p01, p12) da = abs(line_angle(p0,p1) - line_angle(p1,p2)) if da For tesselating triangles this way there are complications to the matter. You need to drive the adaptive tesselator algorithm according to the angles of the edge beziers. There's three unique ways how your triangle can split when tesselating. 2 edges one edge 3 edges -------- --------- -------- \ ...// \ | / \ / \ / \/___/ \ | / \____/ \ / \ | / \ / \/ \|/ \/ Define tesselation results for these patterns and you're well off. Only the tesselation with one edge is described in wikipedia article. Two other tesselation results can be obtained by studying the case of one edge split. "2 edges" can be obtained straight out by splitting first one edge and then another. "3 edges" is a bit more work to find out. But you can see the "2 edges" -case brings you a mid-edge. In the case of quadratic bezier triangle it is an averaged sum of diamond appearing there: -------- /\ \ / / \ \____/ -____- \ / \ / \/ \/
