[site]: stackoverflow
[post_id]: 3467341
[parent_id]: 3458824
[tags]: 
As an aside, org.jfree.chart.plot.PolarPlot appears to have been designed for navigational and geodetic applications. Using the transformation θ' = π/4 – θ and overriding refreshAngleTicks() , as suggested by @mort, produces reasonable results. Addendum: See also this variation using the new PolarPlot API. import java.awt.Color; import java.awt.Dimension; import java.util.ArrayList; import java.util.List; import javax.swing.JFrame; import org.jfree.chart.ChartPanel; import org.jfree.chart.JFreeChart; import org.jfree.chart.axis.NumberAxis; import org.jfree.chart.axis.NumberTick; import org.jfree.chart.axis.ValueAxis; import org.jfree.chart.plot.PolarPlot; import org.jfree.chart.renderer.DefaultPolarItemRenderer; import org.jfree.chart.renderer.PolarItemRenderer; import org.jfree.data.xy.XYDataset; import org.jfree.data.xy.XYSeries; import org.jfree.data.xy.XYSeriesCollection; import org.jfree.ui.TextAnchor; /** * @see http://en.wikipedia.org/wiki/Polar_coordinate_system * @see https://stackoverflow.com/questions/3458824 */ public class ArchimedesSpiral extends JFrame { private static final String title = "Archimedes' Spiral"; public ArchimedesSpiral(String title) { super(title); JFreeChart chart = createChart(createDataset()); ChartPanel panel = new ChartPanel(chart); panel.setPreferredSize(new Dimension(500, 500)); panel.setMouseZoomable(false); this.add(panel); } private static XYDataset createDataset() { XYSeriesCollection result = new XYSeriesCollection(); XYSeries series = new XYSeries(title); for (int t = 0; t ticks = new ArrayList (); int delta = (int) this.getAngleTickUnit().getSize(); for (int t = 0; t
