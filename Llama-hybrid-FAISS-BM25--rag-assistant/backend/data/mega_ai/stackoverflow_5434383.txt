[site]: stackoverflow
[post_id]: 5434383
[parent_id]: 
[tags]: 
Why Can't I delete the bottom row of my UITableView?

When the user presses Edit, my UITableView adds an insert row at the top (with a green plus), and puts all the other rows into delete mode (red minus). Alternatively, the user can swipe-to-delete without pressing the edit button. I am using a couple of Ivars to keep track of whether the table is in edit mode from a swipe, or from pressing the edit button, and act accordingly (e.g. updating numberOfRowsInTableView: with the extra insert row when Edit has been pressed). Everything works perfectly except on thing: when in Edit mode (i.e. the user has explicitly hit the edit button, and the insert row has appeared at the top), if the user tries to delete the bottom row, the next row up gets deleted instead. Deleting any other row is fine. EDIT -- It appears to delete the row above, but if I immediately quit and reload the app, it turns out the bottom row has gone after all. So I'm guessing my UITableView is going out of sync with my NSFetchedResultsController somewhere. Here's the code I'm using: #import "ChecklistsViewController.h" #import "Checklist.h" @interface ChecklistsViewController (private) - (void)configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath; - (void)addingView; @end @implementation ChecklistsViewController @synthesize category, managedObjectContext, fetchedResultsController; - (id)initWithStyle:(UITableViewStyle)style { self = [super initWithStyle:style]; if (self) { editingFromSwipe = NO; tableIsEditing = NO; } return self; } - (void)dealloc { [category release]; [managedObjectContext release]; [fetchedResultsController release]; [super dealloc]; } #pragma mark - View lifecycle - (void)viewDidLoad { [super viewDidLoad]; editingFromSwipe = NO; tableIsEditing = NO; self.navigationItem.rightBarButtonItem = self.editButtonItem; self.tableView.allowsSelectionDuringEditing = YES; } - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation { // Return YES for supported orientations return (interfaceOrientation == UIInterfaceOrientationPortrait); } #pragma mark - Table view data source - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView { return [[self.fetchedResultsController sections] count]; } - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { id sectionInfo = [[self.fetchedResultsController sections] objectAtIndex:section]; int rows = [sectionInfo numberOfObjects]; if (self.editing) { if (!editingFromSwipe && tableIsEditing) { return rows +1; } return rows; } tableIsEditing = NO; return rows; } - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { static NSString *CellIdentifier = @"Cell"; UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier]; if (cell == nil) { cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier] autorelease]; } // Configure the cell... cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator; NSLog(@"Should go into if statement here! \n"); if (tableView.editing) { // if ((indexPath.row == 0) && (!editingFromSwipe)) { NSLog(@"Configuring Add Button Cell while editing \n"); cell.textLabel.text = @"Add New Checklist"; cell.detailTextLabel.text = nil; } else { NSLog(@"Configuring other cells while editing \n"); [self configureCell:cell atIndexPath:indexPath]; } } else { NSLog(@"Configuring Cell Normally While Not Editing \n"); [self configureCell:cell atIndexPath:indexPath]; } return cell; } - (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath { if (editingStyle == UITableViewCellEditingStyleDelete) { // Delete the managed object for the given index path NSManagedObjectContext *context = [self.fetchedResultsController managedObjectContext]; int numberOfRows = [self tableView:tableView numberOfRowsInSection:indexPath.section]; int rowBeingDeleted = indexPath.row +1; if (tableIsEditing && !editingFromSwipe && numberOfRows == rowBeingDeleted) { [context deleteObject:[self.fetchedResultsController objectAtIndexPath:[NSIndexPath indexPathForRow:indexPath.row-1 inSection:indexPath.section]]]; } else { [context deleteObject:[self.fetchedResultsController objectAtIndexPath:indexPath]]; } // Save the context. NSError *error = nil; if (![context save:&error]) { // TO DO: Fix error code. NSLog(@"Unresolved error %@, %@", error, [error userInfo]); abort(); } } else if (editingStyle == UITableViewCellEditingStyleInsert) { [self addingView]; } } - (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath { int row = indexPath.row; if (self.editing && row == 0) { if (!editingFromSwipe && tableIsEditing) { return UITableViewCellEditingStyleInsert; } else if (editingFromSwipe) { return UITableViewCellEditingStyleDelete; } } return UITableViewCellEditingStyleDelete; } - (void)tableView:(UITableView *)tableView willBeginEditingRowAtIndexPath:(NSIndexPath *)indexPath { editingFromSwipe = YES; [super tableView:tableView willBeginEditingRowAtIndexPath:indexPath]; } - (void)tableView:(UITableView *)tableView didEndEditingRowAtIndexPath:(NSIndexPath *)indexPath { [super tableView:tableView didEndEditingRowAtIndexPath:indexPath]; editingFromSwipe = NO; } - (void)setEditing:(BOOL)editing animated:(BOOL)animated { [super setEditing:editing animated:animated]; NSArray *addRow = [NSArray arrayWithObjects:[NSIndexPath indexPathForRow:0 inSection:0], nil]; [self.tableView beginUpdates]; if (!editingFromSwipe) { if (editing) { tableIsEditing = YES; [self.tableView insertRowsAtIndexPaths:addRow withRowAnimation:UITableViewRowAnimationLeft]; } else { [self.tableView deleteRowsAtIndexPaths:addRow withRowAnimation:UITableViewRowAnimationLeft]; } } [self.tableView endUpdates]; } #pragma mark - Table view delegate - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath { if (indexPath.row != 0) { TO DO: Code for when row is selected } } #pragma mark - Data - (void)configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath { Checklist *aChecklist = [self.fetchedResultsController objectAtIndexPath:indexPath]; cell.textLabel.text = aChecklist.name; cell.detailTextLabel.text = aChecklist.category.name; } - (void) addingView// :(id)sender { AddingViewController *viewController = [[AddingViewController alloc] initWithNibName:@"AddingViewController" bundle:nil]; viewController.delegate = self; viewController.title = @"Add Checklist"; // Create the navigation controller and present it modally UINavigationController *navigationController = [[UINavigationController alloc] initWithRootViewController:viewController]; [self presentModalViewController:navigationController animated:YES]; viewController.textLabel.text = @"Enter new checklist name"; [navigationController release]; [viewController release]; } #pragma mark - AddingViewDelegate - (void)addingViewController:(AddingViewController *)addingViewController didAdd:(NSString *)itemAdded { if (itemAdded != nil) { // Turn off editing mode. if (self.editing) [self.navigationController setEditing:NO animated:NO]; // Add the category name to our model and table view. // Create a new instance of the entity managed by the fetched results controller. NSManagedObjectContext *context = [self.fetchedResultsController managedObjectContext]; NSEntityDescription *entity = [[self.fetchedResultsController fetchRequest] entity]; Checklist *newChecklist = [NSEntityDescription insertNewObjectForEntityForName:[entity name] inManagedObjectContext:context]; [category addChecklistsObject:newChecklist]; newChecklist.name = itemAdded; // [newChecklist setDateStamp:[NSDate date]]; // Save the context. NSError *error = nil; if (![context save:&error]) { TO DO: fix error code. NSLog(@"Unresolved error %@, %@", error, [error userInfo]); abort(); } } [self dismissModalViewControllerAnimated:YES]; } #pragma mark - Fetched results controller - (NSFetchedResultsController *)fetchedResultsController { if (fetchedResultsController != nil) { return fetchedResultsController; } // Set up the fetched results controller. // Create the fetch request for the entity. NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init]; // Edit the entity name as appropriate. NSEntityDescription *entity = [NSEntityDescription entityForName:@"Checklist" inManagedObjectContext:self.managedObjectContext]; [fetchRequest setEntity:entity]; // Set 4* the predicate so we only see checklists for this category. NSPredicate *requestPredicate = [NSPredicate predicateWithFormat:@"category.name = %@", self.category.name]; [fetchRequest setPredicate:requestPredicate]; // Set the batch size to a suitable number. [fetchRequest setFetchBatchSize:20]; // Edit the sort key as appropriate. NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@"name" ascending:YES]; NSArray *sortDescriptors = [[NSArray alloc] initWithObjects:sortDescriptor, nil]; [fetchRequest setSortDescriptors:sortDescriptors]; // Edit the section name key path and cache name if appropriate. // nil for section name key path means "no sections". NSFetchedResultsController *aFetchedResultsController = [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest managedObjectContext:self.managedObjectContext sectionNameKeyPath:nil cacheName:nil]; aFetchedResultsController.delegate = self; self.fetchedResultsController = aFetchedResultsController; [aFetchedResultsController release]; [fetchRequest release]; [sortDescriptor release]; [sortDescriptors release]; NSError *error = nil; if (![self.fetchedResultsController performFetch:&error]) { // TO DO: error stuff NSLog(@"Unresolved error %@, %@", error, [error userInfo]); abort(); } return fetchedResultsController; } #pragma mark - Fetched results controller delegate - (void)controllerWillChangeContent:(NSFetchedResultsController *)controller { [self.tableView beginUpdates]; } - (void)controller:(NSFetchedResultsController *)controller didChangeSection:(id )sectionInfo atIndex:(NSUInteger)sectionIndex forChangeType:(NSFetchedResultsChangeType)type { switch(type) { case NSFetchedResultsChangeInsert: [self.tableView insertSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade]; break; case NSFetchedResultsChangeDelete: [self.tableView deleteSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade]; break; } } - (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject atIndexPath:(NSIndexPath *)indexPath forChangeType:(NSFetchedResultsChangeType)type newIndexPath:(NSIndexPath *)newIndexPath { UITableView *tableView = self.tableView; switch(type) { case NSFetchedResultsChangeInsert: [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath] withRowAnimation:UITableViewRowAnimationFade]; break; case NSFetchedResultsChangeDelete: [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade]; break; case NSFetchedResultsChangeUpdate: [self configureCell:[tableView cellForRowAtIndexPath:indexPath] atIndexPath:indexPath]; break; case NSFetchedResultsChangeMove: [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade]; [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath]withRowAnimation:UITableViewRowAnimationFade]; break; } } - (void)controllerDidChangeContent:(NSFetchedResultsController *)controller { [self.tableView endUpdates]; } @end
