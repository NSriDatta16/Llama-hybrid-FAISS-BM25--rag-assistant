[site]: stackoverflow
[post_id]: 886356
[parent_id]: 825100
[tags]: 
Yes, you can set up a button-- with a listener, where when the button is clicked, you can stop the submission of the form. The submission of the form is the default behavior for a ' button ' of type submit (important) in a form. The event method, preventDefault (or returnValue=false for the window event, depending on the event model the browser follows), will prevent that default, submission behavior. I also stopPropagation (MSIE evt. model = cancelBubble). For example, for the following button of type ' submit ': Log Out Add an x-browser event listener for that particular button. For example, assuming that testlogout is the name of your function that controls what happens when the button is clicked, something like the following might be used to set up the listener: var logoutBtn = (document.getElementById && document.getElementById('logout')) || (document.all && document.all['logout']) || document.forms[formname].elements['logout'] || null; if (logoutBtn) { if (logoutBtn.addEventListener) { logoutBtn.addEventListener('click',testlogout,false); } else if (window.attachEvent) { logoutBtn.attachEvent('onclick',testlogout); } else { //legacy: logoutBtn.onclick = testlogout; //...logic for document.layers support, etc. } } Then in the testlogout function, which will automatically be passed the event, you would test whatever conditions. Upon the conditions you set, use the event.preventDefault or returnValue, depending again on which the browser supports. These take the place of inline ' return false '. For example: function testlogout(e) { e = e || window.event; //... your logic here... e.stopPropagation?e. stopPropagation():(e.cancelBubble?e.cancelBubble():""); e.preventDefault?e.preventDefault():e.returnValue=false; return false; // in case all else fails? } The event passed has its own set of properties of course, whose names vary, again, depending on the model the browser follows. These properties will identify the target button clicked, for example. The current event listening models do not pay attention to ' return false '. A ' return false ' command will fall on deaf ears, so to speak. But no worries, as long as you use what they do understand. Hope that helps solve the present, underlying problem. Reading up on DOM Events and event models will clarify the methods and properties available.
