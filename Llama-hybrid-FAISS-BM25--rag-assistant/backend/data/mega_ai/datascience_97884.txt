[site]: datascience
[post_id]: 97884
[parent_id]: 97269
[tags]: 
I just found myself the perfect solution. All you need to do is to write an embedding layer and a bi-Directional LSTM mine is this, input_layer = tf.keras.Input(shape = (max_len,)) embeding_layer = tf.keras.layers.Embedding(top_wordings, embeding_length, input_length= max_len) (input_layer) lstm_layer = tf.keras.layers.Bidirectional( tf.keras.layers.LSTM(15, return_sequences=True) ) (embeding_layer) out_layer = tf.keras.layers.TimeDistributed( tf.keras.layers.Dense(2, activation= "softmax") ) (lstm_layer) model = tf.keras.Model(input_layer, out_layer) model.compile (optimizer= "adam", loss = "sparse_categorical_crossentropy", metrics=["accuracy"]) Then start creating random sentences yourself with location names with all location prepositions, that is sentences like this "I am at/above/under/between somelocation" and then change somelocation with all your location dataset names. for the target part you only need two tag, wether it is a location or not so (0,1) then let the network train. Then it will even find locations even out of your vocabulary based on the preposition. Hope it helps you too/ remember to make all train dataset in lower case to avoid the sensitivity Also, please use open-street-map for extracting street names
