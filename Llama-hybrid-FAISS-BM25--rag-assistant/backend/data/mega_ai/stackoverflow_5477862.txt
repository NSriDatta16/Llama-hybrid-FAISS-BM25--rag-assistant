[site]: stackoverflow
[post_id]: 5477862
[parent_id]: 
[tags]: 
Creating initial task on Arduino RTOS

I'm writing a real-time operating system for a course in school. I'm having a lot of problems getting the initial process' context switch (the handover from OS to process) so I've simplified the problem to try and find out where I'm making a mistake. In the following code, what I'm trying to accomplish is placing the test_func address on the stack pointer and then returning, thus loading that function's address into the program counter. What's happening is that the board is re-invoking the Arduino setup() method, which repeats the whole process. void test_func(void) { while(1 == 1){ digitalWrite(13,HIGH);// to let me know everything has worked DEBUG("test_func"); } } //... volatile void *programcounter; //... programcounter = (void *)(&test_func); asm volatile( "lds r26, programcounter \n\t" \ "lds r27, programcounter+1 \n\t" \ "ld r28, x+ \n\t" \ "out __SP_L__, r28 \n\t" \ "ld r29, x+ \n\t" \ "out __SP_H__, r29 \n\t" \ "ret"); This was done following the examples from the FreeRTOS project -guide located here (pdf). I'm writing this in the Arduino IDE as a C file. Thank so much for any input you have. EDIT: Trying another, simpler example. I'm looking at the Bertos implementation: http://dev.bertos.org/wiki/ArduinoHowto . I'm starting out with a fresh sketch: #include #include void test_func() { while(true){ Serial.write("Testing ..."); digitalWrite(13, HIGH); } } volatile void (*tempcounter)(void); volatile void (**programcounter)(void); void setup() { // put your setup code here, to run once: Serial.begin(9600); pinMode(13, OUTPUT); digitalWrite(13, LOW); tempcounter = (volatile void (*)())(&test_func); programcounter = &tempcounter; Serial.println("Setting up ..."); asm volatile ( "cli\n\t"\ "lds r24, programcounter \n\t" \ "lds r25, programcounter+1 \n\t" \ "movw r26,r24\n\t"\ "ld r18,X+\n\t"\ "ld r19,X\n\t"\ "out __SP_L__,r18\n\t"\ "out __SP_H__,r19\n\t"\ "sei\n\t"\ "ret"); Serial.println("This should never appear"); } void loop() { // put your main code here, to run repeatedly: Serial.println("looping"); }
