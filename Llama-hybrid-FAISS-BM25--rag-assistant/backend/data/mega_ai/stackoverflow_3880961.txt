[site]: stackoverflow
[post_id]: 3880961
[parent_id]: 
[tags]: 
NSTokenField representing Core Data to-many relationship

I'm having a problem figuring out how to represent a many-to-many relationship model in a NSTokenField. I have two (relevant) models: Item Tag An item can have many tags and a tag can have many items. So it's an inverse to-many relationship. What I would like to do is represent these tags in a NSTokenField. I would like to end up with a tokenfield automatically suggesting matches (found out a way to do that with tokenfield:completionsForSubstring:indexOfToken:indexOfSelectedItem) and being able to add new tag entities if it wasn't matched to an existing one. Okay, hope you're still with me. I'm trying to do all this with bindings and array controllers (since that makes most sense, right?) I have an array controller, "Item Array Controller", that is bound to my app delegates managedObjectContext. A tableview showing all items has a binding to this array controller. My NSTokenField's value has a binding to the array controllers selection key and the model key path: tags. With this config, the NSTokenField won't show the tags. It just gives me: : Unknown object type assigned (Relationship objects for {( (entity: Tag; id: 0x10016d6e0 ; data: ) )} on 0x100169660). Ignoring... This makes sense to me, so no worries. I've looked at some of the NSTokenField delegate methods and it seems that I should use: - (NSString *)tokenField:(NSTokenField *)tokenField displayStringForRepresentedObject:(id)representedObject Problem is, this method is not called and I get the same error as before. Alright, so my next move was to try and make a ValueTransformer. Transforming from an array with tag entity -> array with strings (tag names) was all good. The other way is more challenging. What I've tried is to look up every name in my shared app delegate managed object context and return the matching tags. This gives me a problem with different managed object contexts apparently: Illegal attempt to establish a relationship 'tags' between objects in different contexts (source = (entity: Item; id: 0x1003b22b0 ; data: { author = "0x1003b1b30 "; createdAt = nil; filePath = nil; tags = ( ); title = "Great presentation"; type = "0x1003b1150 "; }) , destination = (entity: Tag; id: 0x100146b40 ; data: )) Where am I going wrong? How do I resolve this? Is it even the right approach (seems weird to me that you woud have to use a ValueTransformer?) Thanks in advance!
