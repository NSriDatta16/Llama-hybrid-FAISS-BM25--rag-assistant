[site]: stackoverflow
[post_id]: 2637439
[parent_id]: 2637377
[tags]: 
In fact, using interfaces instead of classes allows you three things : Dstinguish the contract from its implementation : the contract is the interface (it's what you declare you'll do) and the class is obviously the implemenation Provide easily altrnative implementation. Typical examples of this imply replacing a storage mechanism by another without modifying user code (like repalcing MySQL by, say, Project Voldemort) As a benefit of 2 (and this time easily extendable to model elements), interfaces allow you to do kind of white box testing : by using a mocking framework (JMock, EasyMock, ...), you'll repalce your implementation of the interface, which behaviour may be suspicious, by a so-called "mock" returning exactly what you expect for your test. This will allow your test to not only check one component, but also ensure the error come from that component, and not from its inner contractors (the interface you give him).
