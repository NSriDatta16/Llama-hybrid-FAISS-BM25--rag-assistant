[site]: stackoverflow
[post_id]: 5514776
[parent_id]: 5514366
[tags]: 
Brute force algorithm... First check if the rect is to the left or right of the line endpoints: Establish the leftmost and rightmost X values of the line endpoints: XMIN and XMAX If Rect.Left > XMAX, then no intersection. If Rect.Right Then, if the above wasn't enough to rule out intersection, check if the rect is above or below the line endpoints: Establish the topmost and bottommost Y values of the line endpoints: YMAX and YMIN If Rect.Bottom > YMAX, then no intersection. If Rect.Top Then, if the above wasn't enough to rule out intersection, you need to check the equation of the line, y = m * x + b , to see if the rect is above the line: Establish the line's Y-value at Rect.Left and Rect.Right: LINEYRECTLEFT and LINEYRECTRIGHT If Rect.Bottom > LINEYRECTRIGHT && Rect.Bottom > LINEYRECTLEFT, then no intersection. Then, if the above wasn't enough to rule out intersection, you need to check if the rect is below the line: If Rect.Top Then, if you get here: Intersection. N.B. I'm sure there's a more elegant algebraic solution, but performing these steps geometrically with pen and paper is easy to follow. Some untested and uncompiled code to go with that: public struct Line { public int XMin { get { ... } } public int XMax { get { ... } } public int YMin { get { ... } } public int YMax { get { ... } } public Line(Point a, Point b) { ... } public float CalculateYForX(int x) { ... } } public bool Intersects(Point a, Point b, Rectangle r) { var line = new Line(a, b); if (r.Left > line.XMax || r.Right line.YMax) { return false; } var yAtRectLeft = line.CalculateYForX(r.Left); var yAtRectRight = line.CalculateYForX(r.Right); if (r.Bottom > yAtRectLeft && r.Bottom > yAtRectRight) { return false; } if (r.Top
