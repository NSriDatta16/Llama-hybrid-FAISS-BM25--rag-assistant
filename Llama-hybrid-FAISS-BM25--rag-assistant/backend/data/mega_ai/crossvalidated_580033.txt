[site]: crossvalidated
[post_id]: 580033
[parent_id]: 
[tags]: 
Is it any meaningful taking the histogram of many histograms?

So I’m working on pixel-level assessment of chest x-ray images from the NIH Chest X-ray dataset. The diseases labels on the images are a set of z different categories (i.e. Pneumonia, effusion, etc…). I’ve already been analyzing the histograms of images per each category, but then I wanted to go through all the histograms per disease class and average it into one histogram, producing a histogram of histograms for each of the disease class set, ending up with z collective histograms. Does this make any sense statistically, I wanted to get Image analysis SMEs’ opinions on this approach. Have anyone did that before? Any pitfalls I should be careful with? Below is the code I used: figure, m_axis = plt.subplots(int((len(all_labels)+1)/2), 2, figsize= (10, 15), sharex=True, sharey=True, constrained_layout=True) if len(all_labels)%2!=0: figure.delaxes(m_axis[int((len(all_labels)+1)/2)-1][1]) bins = np.arange(-0.5, 255+1, 1) idx = img_ind = axis_ind = fig_ind = 0 # Building the histogram data dictionary categories_histograms = {} for idx, c_label in enumerate(all_labels): imgs = sample_df[sample_df['Finding Labels'] == c_label]['path'] imgs_count=len(imgs) #print(io.imread(imgs.iloc[0]).ravel().shape) hist_accumulator = np.zeros_like(exposure.histogram(img_as_float( io.imread(imgs.iloc[0])), nbins=256)[0]) for img in imgs: img_io = io.imread(img) img_hist = exposure.histogram(img_as_float(img_io), nbins=256) hist_accumulator = np.add(hist_accumulator, img_hist[0]) img_ind = img_ind+1 print("\r{}: Image {} of {}{:>20}".format(c_label, img_ind, imgs_count,'\r'), end='', flush=True) # Normalization of compund histogram hist_norm = hist_accumulator / imgs_count # Building the histogram dictionary for the categories categories_histograms[c_label] = hist_norm img_ind, axis_ind = 0, idx%2 if idx > 1: fig_ind = fig_ind+(idx+1)%2 m_axis[fig_ind, axis_ind].plot(hist_norm) m_axis[fig_ind, axis_ind].set_title(c_label) ```
