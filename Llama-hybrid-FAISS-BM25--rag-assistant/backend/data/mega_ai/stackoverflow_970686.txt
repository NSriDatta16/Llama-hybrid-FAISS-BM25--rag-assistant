[site]: stackoverflow
[post_id]: 970686
[parent_id]: 948959
[tags]: 
One of the principles of Dependency Injection is that dependencies of a class should be made explicit to the outside world. When a class resolves a dependency itself (as in your second example) it goes against that principle, and is headed back down the road of using singleton services - though admittedly you are somewhat better off because you do have the IoC container as an "escape hatch" for mocking the service objects. Obviously having a whole load of parameters in the constructors of all your objects is rather burdensome, but that's where the IoC Container steps in. If it supports auto-wiring, and you're using it as it was designed, you usually find yourself having to resolve very few instances yourself: you pull the first object out, and it comes ready-configured with all its dependencies - and they're ready configured with all their dependencies, and so on. For this reason, Joshua Flanagan makes the argument that IoC Containers really ought to be called IoC Composers. If you want to avoid burdening the users of your API, how about having a focal object that wraps up your IoC container and pulls configured instances out of it for consumption by calling code?
