[site]: stackoverflow
[post_id]: 4979592
[parent_id]: 4979137
[tags]: 
The answer to your question is yes, threads have access to global data and static data in the same compilation unit, but there is more to this topic about "sharing data between threads" that is important to understand. For each thread, there is a corresponding function (the "thread function") that a thread will execute in parallel with other threads. A thread has access to whatever that function can access, either through pointer or reference parameters, global data, static data in the same compilation unit as the thread function, or global and/or static data that is readable/modifiable via other functions that the thread function can call. You should be able to determine every memory region that a given function can read or modify. Those memory regions of a given thread function are exactly the memory regions that the thread has access to. It is easy to see that global data and static data in the same compilation unit are accessible to a thread function, so that's why the answer to your question is "yes". One thing that you might want to look into is OpenMP, which has built-in constructs for parallelizing a countOccurrences operation (a so-called "reduction"): #include #include #include size_t countOccurrences(const int *arr, size_t n, int which) { size_t count, i; count = 0; #pragma omp parallel for reduction(+:count) for (i = 0; i
