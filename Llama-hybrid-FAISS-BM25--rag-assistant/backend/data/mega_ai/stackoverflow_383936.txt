[site]: stackoverflow
[post_id]: 383936
[parent_id]: 379172
[tags]: 
Alien01 wrote: Currently I am working on a project where goto statements are heavily used. The main purpose of goto statements is to have one cleanup section in routine rather than multiple return statements. In other words, you want to separate the program logic from simple repetitive tedious routines, like freeing a resource which might be reserved in different locations of code. The exception handling technique is an error handling logic which works in parallel with program logic. It's a more elegant solution since it provides such separation while offering the ability to move control to other blocks of code exactly as the goto statement does, so I modified your script to look like this: class auxNullPtrException : public std::exception { public: auxNullPtrException::auxNullPtrException() : std::exception( " OOM \n") {} }; BOOL foo() { BOOL bRetVal = FALSE; try { int *p = NULL; p = new int; if (p == NULL) { throw auxNullPtrException(); } // Lot of code... } catch(auxNullPtrException & _auxNullPtrException) { std::cerr
