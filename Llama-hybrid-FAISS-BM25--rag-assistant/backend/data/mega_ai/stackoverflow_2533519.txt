[site]: stackoverflow
[post_id]: 2533519
[parent_id]: 2533496
[tags]: 
Use thread-local storage to hold a reference to a System::Random object. Give each thread its own RNG (you can tell easily enough if you've not yet allocated one) and you can pull values from each one merrily for as long as you like. It's probably a good idea to wrap up the code to get a thread-specific random number in a method so that you only need to get it right once. [Edit: Include example] class example { [ThreadStatic] static Random threadLocalRandom; private int GimmeARandomNumber(int upperBound) { Random r = threadLocalRandom; if (r == null) { r = threadLocalRandom = new Random(); } return r.Next(0, upperBound); } }
