[site]: stackoverflow
[post_id]: 3559478
[parent_id]: 
[tags]: 
Should a C# accessor use a private variable or calculate on the fly?

Which is a better programming practice and why? I have a class like this: class data { public double time { get; internal set; } public double count { get; internal set; } public average_count { ... } } Where average_count should be read_only and give a calculation of count / time. Is it better to write the accessor as: public average_count { get { return (time == 0) ? 0 : (count / time); }} Or should I do something like: private _avg_count; public average_count { get { return _avg_count; } internal set { return _avg_count; } } Where _avg_count is updated when in the time and count set accessors? It seems like the first is easier to read but may be slower if average_count is accessed often. Will the compiler optimizations make the difference insignificant?
