[site]: stackoverflow
[post_id]: 4950165
[parent_id]: 
[tags]: 
I need a pattern for constructing trees of objects

I've got some code (C#) that builds a tree of polymorphic objects. Depending on the type, an object may have 0-7 children. Right now, the objects' constructors do nothing, and I construct the whole object tree using a recursive helper function: // pseudocode void BuildTree(Node root) { if(root is A) { root.a_data = ... root.a_child = GenerateNewNode(some_constraints); BuildTree(root.a_child) } else if(root is B) { // same stuff, for B. Note B may have different chldren, etc } } This all seems really inelegant, so basically I'm looking for a pattern that can help me here. The BuildTree function seems to be a policy of some kind, and I'd like to be able to use different policies in the future. Oh, another complicating factor. There are things in BuildTree which are conditional on earlier things BuildTree has done. For example, if I've ever generated a B, then I need to do XYZ to C nodes. Or if I'm currently generating children of an A, then don't generate a D.
