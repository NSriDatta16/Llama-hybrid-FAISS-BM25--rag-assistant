[site]: stackoverflow
[post_id]: 1820549
[parent_id]: 1820505
[tags]: 
From a planning perspective, I think you have three basic choices: take a cycle to retrofit the code with unit tests designate part of the team to retrofit the code with unit tests introduce unit tests gradually as you work on the code The first approach may well last a lot longer than you anticipate, and your visible productivity will take a hit. If you use it, you will need to get buy-in from all your stakeholders. However, you might use it to kickstart the process. The problem with the second approach is that you create a distinction between coders and test writers. The coders will not feel any ownership for test maintenance. I think this approach is worth avoiding. The third approach is the most organic, and it gets you into test-driven development from the get go. It may take some time for a useful body of unit tests to accumulate. The slow pace of test accumulation might actually be an advantage in that it gives you time to get good at writing tests. All things considered, I think I'd opt for a modest sprint in the spirit of approach 1, followed by a commitment to approach 3. For the general principles of unit testing I recommend the book xUnit Test Patterns: Refactoring Test Code by Gerard Meszaros.
