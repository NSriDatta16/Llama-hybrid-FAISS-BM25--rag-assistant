[site]: stackoverflow
[post_id]: 1539948
[parent_id]: 1444469
[tags]: 
If I understand your question correctly, you want to conditionally accept the dropped element based on custom code. Aberon's answer is the typical case: you want to allow only certain draggable options to be dropped based on their class, and all others will revert. If that answers your question, then fine. However, there is a case for having the revert animation happen conditionally based on something more complex than a class match. In my own project, I am using drag-drop to add users to a group. If the dropped user is already in the group, I want the user helper element to revert back. Otherwise, I go ahead with an AJAX action to insert them. This is no substitute for back-end checking, but it's nice visual feedback. I have looked elsewhere for a simple answer to this. Note to JQuery maintainers: to me, the most straightforward way would be to add some property to the event object in the drop function, like this: $('.target').droppable({ accept: '.valid' drop: function(event, ui) { if(isDropOK() == true) { // add child here } else { event.revert = true; } } }); Sadly that doesn't work. Here's what does "work", though: set the draggable element to always revert, and then hide the helper if the condition is met. You can get a reference to the helper by looking for the only element on the page that has the class ".ui-draggable-dragging". Here's an example, replace "isDropOK()" with your own logic: $('.valid').draggable({ revert: true, helper: 'clone', opacity: 0.5 }); $('.target').droppable({ accept: '.valid' drop: function(event, ui) { if(isDropOK() == true) { $('.ui-draggable-dragging').hide(); // add child here } } }); So to recap, every element will always revert unless you step in on the drop event and manually hide the helper. The revert animation will still happen, but your users won't see it. It's a little hack, but the end result seems to work all right.
