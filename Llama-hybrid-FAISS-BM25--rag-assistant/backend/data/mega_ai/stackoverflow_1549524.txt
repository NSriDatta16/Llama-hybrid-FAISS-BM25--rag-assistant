[site]: stackoverflow
[post_id]: 1549524
[parent_id]: 
[tags]: 
Java: Problems with TreeSet

I have a class Odp. I want to use TreeSet to keep a sorted collection of Odp objects. However, I've been having problems. public class OdpStorage { private TreeSet collection = new TreeSet (); public addOdp(Odp o) { return collection.add(o); } public int size() { return collection.size(); } } collection.add(Odp o) is supposed to do nothing if it's already in the tree, right? Somehow, this unit test fails: OdpStorage ts = new OdpStorage(); Odp ftw = new Odp("LOL"); Odp ktr = new Odp("OMG"); ts.addOdp(ftw); ts.addOdp(ftw); //should do nothing ts.addOdp(ftw); //should do nothing ts.addOdp(ftw); //should do nothing ts.addOdp(ktr); assertEquals(2, ts.size()); The assertion fails. It expects 2, but the return value is 5. Why? Could the odp.equals() function be messed up? Similarly, calling collection.contains(o) fails, even when the there is an object in the set X for which o.equals(X) returns true. The .equals() function of Odp: (generated by Eclipse) public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (!(obj instanceof Odp)) return false; Gene other = (Odp) obj; if (sequence == null) { if (other.sequence != null) return false; } else if (!sequence.equals(other.sequence)) return false; return true; } compareTo: /** * this = g0 * if they are equal, g1 is presumed to come first * * @return -1 if g0 comes before g1; 1 if g0 comes after g1 */ @Override public int compareTo(Odp g1) { if (sequence.length() g1.getSeq().length()) { return 1; } if (sequence.compareTo(g1.getSeq()) hashCode() is not overridden. Problem? UPDATE hashCode() is as follows: @Override public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((sequence == null) ? 0 : sequence.hashCode()); return result; } But that still doesn't solve the problem.
