[site]: stackoverflow
[post_id]: 4242981
[parent_id]: 4239785
[tags]: 
You folks who are using \s in Java to detect whitespace in Java code are making at least one and maybe several mistakes. First of all, the Java compiler’s idea of whitespace in its own doesn’t line up with what \s matches in Java. You may access the Java Character.isWhitespace() through the \p{JavaWhitespace} property. Secondly, Java does not allow \s to match Unicode whitespace; as implemented in the Java Pattern class, \s only matches ASCII whitespace. In fact, Java does not support any property that corresponds to Unicode whitespace. Here’s a table showing some of the problem areas: 000A 0085 00A0 2029 J P J P J P J P \s 1 1 0 1 0 1 0 1 \pZ 0 0 0 0 1 1 1 1 \p{Zs} 0 0 0 0 1 1 0 0 \p{Space} 1 1 0 1 0 1 0 1 \p{Blank} 0 0 0 0 0 1 0 0 \p{Whitespace} - 1 - 1 - 1 - 1 \p{javaWhitespace} 1 - 0 - 0 - 1 - \p{javaSpaceChar} 0 - 0 - 1 - 1 - What you’re looking at on the x-axis is four different code points: U+000A: LINE FEED (LF) U+0085: NEXT LINE (NEL) U+00A0: NO-BREAK SPACE U+2029: PARAGRAPH SEPARATOR The y-axis has eight different regex tests, mostly properties. For each of those code points, there is both a J-results column for Java and a P-results column for Perl or any other PCRE-based regex engine. It’s a big problem. Java is just messed up, giving answers that are "wrong" according to existing practice and also according to Unicode. Plus Java doesn’t even give you access to the real Unicode properties. For the record, these are the code points with the Unicode whitespace property: % unichars '\pP{Whitespace}' 0009 CHARACTER TABULATION 000A LINE FEED (LF) 000B LINE TABULATION 000C FORM FEED (FF) 000D CARRIAGE RETURN (CR) 0020 SPACE 0085 NEXT LINE (NEL) 00A0 NO-BREAK SPACE 1680 OGHAM SPACE MARK 180E MONGOLIAN VOWEL SEPARATOR 2000 EN QUAD 2001 EM QUAD 2002 EN SPACE 2003 EM SPACE 2004 THREE-PER-EM SPACE 2005 FOUR-PER-EM SPACE 2006 SIX-PER-EM SPACE 2007 FIGURE SPACE 2008 PUNCTUATION SPACE 2009 THIN SPACE 200A HAIR SPACE 2028 LINE SEPARATOR 2029 PARAGRAPH SEPARATOR 202F NARROW NO-BREAK SPACE 205F MEDIUM MATHEMATICAL SPACE 3000 IDEOGRAPHIC SPACE If you want, feel free to grab the unichars program and play around with it and its companion programs, uniprops and uninames . I haven’t added the Java-only properties yet, but I intend to. There are just too many nasty surprises like those described above. For kicks and grins, would you believe there’s a \p{javaJavaIdentifierStart} property in Java? I kid you not. But you wouldn’t believe the characters the compiler actually lets you use in identifiers; really you wouldn’t. Somebody wasn’t paying attention. Again. :(
