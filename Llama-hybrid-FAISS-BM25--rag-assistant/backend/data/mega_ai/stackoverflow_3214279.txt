[site]: stackoverflow
[post_id]: 3214279
[parent_id]: 3214159
[tags]: 
Not sure how this relates to separation of concerns. I can see where it might seem the abstraction is leaky; is it your concern that it seems users must know a little too much about how the repository holds your Articles? Until someone comes up with a performant method of separating implementation from models, storage abstractions will always be leaky. You can beat yourself up over it or just do your best and deal. Your second method is, IMHO, worse than the first. You still have to stipulate the category and position in your Article, so you still have the leak in addition to a weird API that confuses parameters with entities. I'd definitely go with the first version over the second. If I were to do anything, I would refactor to make CategoryIndex and ArticlePosition entities (Category and Position tables linked to the Article table). You could then refactor your API to the more appealing: var cat = CategoryRepository.GetCategory("foo"); var pos = PositionRepository.GetPosition("bar"); var article = ArticleRepository.GetArticle(cat, pos); Is this any better than what you already have? Probably not.
