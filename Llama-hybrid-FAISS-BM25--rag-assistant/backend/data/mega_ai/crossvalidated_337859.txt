[site]: crossvalidated
[post_id]: 337859
[parent_id]: 
[tags]: 
Johansen Test - What is a lag?

I am new to the Johansen Test, have been using the ADF test but due to its limitations I am trying to switch over. I have taken data (1 hour bars) for 4 symbols and passed it through this function link the results are bellow. Also is a chart of the data plotted. To plot I took the eigenvectors results for $r = 0$ and multiplied it by the symbol value. The reason the chart is Red/Blue is because red is the data I tested on and blue is the data I did not pass into the test. Now the questions are: is my logic in how I have done this correct? when i call the function coint_johansen(df, 0,1) df being the data, but there is also a 0 and 1, which is classified as followed. We then call the coint_johansen function by passing the data frame storing the time series data (df), 0 and 1 as its three arguments. The second term in the arguments represents the order of null hypothesis, a value of 0 implies that it is a constant term, there is no time trend in the polynomial. The third term specifies the number of lagged difference terms used when computing the estimator, here we use a single lagged difference term. What is the best way to determine the number of lags? When i search I keep running into something called a VAR model, could someone reference me a none PHD version of this? Or some other simple explanation/example. When I change the lags to 11 I get a totally different plot path (charted bellow) and obviously this is far more enticing. --> Trace Statistics variable statistic Crit-90% Crit-95% Crit-99% r = 0 51.9614 44.4929 47.8545 54.6815 r = 1 19.7861 27.0669 29.7961 35.4628 r = 2 5.4724 13.4294 15.4943 19.9349 r = 3 1.1118 2.7055 3.8415 6.6349 --> Eigen Statistics variable statistic Crit-90% Crit-95% Crit-99% r = 0 32.1752 25.1236 27.5858 32.7172 r = 1 14.3137 18.8928 21.1314 25.865 r = 2 4.3606 12.2971 14.2639 18.52 r = 3 1.1118 2.7055 3.8415 6.6349 eigenvectors: [[ 1.64822424e-01 -3.02248875e-01 -4.98243215e-02 4.94890919e-04] [ -5.56290345e-01 6.57055787e-02 -5.19231801e-02 4.65781352e-02] [ 1.27230050e-02 -8.17785528e-03 3.41343963e-02 -6.60752179e-02] [ 1.59919621e-01 1.24338818e-01 1.52753375e-01 2.07462450e-02]] eigenvalues: [ 0.01011763 0.00451371 0.00137726 0.00035132] just after posting this, i found this snippet of code. Would this be the best way to test statistically for the best number of lags: I presume the question still is what is and how does a lag effect the johansen_test results. do we just choose the lowest AIC? or is there some other common method? var_mod = VAR(df0) var_mod.select_order(15) # check autocorrelation of residuals res_df = pd.DataFrame(index=np.arange(1,16), columns=df0.columns) for k in range(1,16): var_res = var_mod.fit(k) pvals = [] for c in df0.columns: stat, pval = acorr_ljungbox(var_res.resid[c],8) res_df.ix[k][c] = round(pval[-1],3) print ("Residuals auto-corr test.. Ljung-Box test p-values") print(res_df) which gives an output of something like the following in the example above. VAR Order Selection ====================================================== aic bic fpe hqic ------------------------------------------------------ 0 2.834 2.846 17.02 2.839 1 -15.26 -15.20 2.366e-07 -15.23 2 -15.48 -15.37* 1.889e-07 -15.44* 3 -15.49* -15.33 1.883e-07* -15.43 4 -15.48 -15.27 1.901e-07 -15.40 5 -15.47 -15.22 1.908e-07 -15.38 6 -15.47 -15.17 1.912e-07 -15.36 7 -15.47 -15.12 1.918e-07 -15.34 8 -15.46 -15.06 1.933e-07 -15.31 9 -15.45 -15.00 1.949e-07 -15.29 10 -15.44 -14.94 1.971e-07 -15.26 11 -15.44 -14.89 1.978e-07 -15.24 12 -15.43 -14.83 1.999e-07 -15.21 13 -15.42 -14.78 2.010e-07 -15.18 14 -15.42 -14.73 2.014e-07 -15.16 15 -15.42 -14.68 2.013e-07 -15.15 ====================================================== * Minimum Residuals auto-corr test.. Ljung-Box test p-values sys0 sys1 sys2 sys3 1 0.706 0.844 0.7 0.088 2 0.953 0.89 0.823 0.162 3 0.955 0.85 0.873 0.179 4 0.966 0.971 0.922 0.18 5 0.968 0.953 0.918 0.461 6 0.981 0.971 0.993 0.508 7 0.997 0.98 0.998 0.799 8 1 0.993 0.998 0.998 9 1 1 1 1 10 1 1 1 1 11 1 1 1 1 12 1 1 1 1 13 1 1 1 1 14 1 1 1 1 15 1 1 1 1
