[site]: stackoverflow
[post_id]: 2702166
[parent_id]: 2697254
[tags]: 
If you want to use an ordered datastructure, binary search is optimal in an asymptotic sense. However, if you use an auxiliary tree, you can gain a large constant factor in time performance if you pay attention to locality. Specifically, if you are accessing your data from disk, then disk access time will dominate everything else. In that case, you want to reduce the number of distinct blocks of data that need to be randomly accessed from the disk. This is what B trees, B+ trees, and similar do: they store the data in the form of a tree, and make sure that the nodes have a large fanout so they can limit the depth, and therefore don't need to do very many random seeks. If accessing data in ram, you can do something similar by paying attention to the cache lines; Judy trees are one example of this. If you're doing an exact match, you can do hashing in constant time -- whether your numbers are ordered or not. Hashing can have significant overhead in time and space, though, and ordered methods are often competitive, so you really want to decide on a case-by-case basis.
