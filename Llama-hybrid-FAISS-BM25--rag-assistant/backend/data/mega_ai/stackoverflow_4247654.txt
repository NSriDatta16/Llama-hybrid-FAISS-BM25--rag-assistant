[site]: stackoverflow
[post_id]: 4247654
[parent_id]: 4247606
[tags]: 
Basically I get it that your operator looks like: Object& operator=(Object const& rhs) { try { // something return *this; } catch(std::exception& e) { std::cerr Now the question is, which value do you return when an exception is thrown (and caught) ? The response is, you do not return anything, so what is the compiler supposed to do ? You need to decide what to do on the catch path: either throw something (perhaps the same exception, or another of your liking) or return *this if you could live with the error But in the case of an assignment operator, I would strongly encourage you NOT to have any exception thrown in, which is subtly different than blindly applying a try / catch block. EDIT : A much simpler approach to your issue would be to check first, throw your exception (without modifying anything) if it doesn't match, and then go about your code without any worry about an exception occurring. It's a general way of developing in exception-land: do what may throw first, and then you won't have to worry about exceptions popping here and there. Also, as a remark, don't you dare throwing bad_alloc ! You cannot blindly pick an existing exception and use it for your own convenience: an exception type carry meaning and bad_alloc means that the system could not fulfill your request for memory, not that some matrix implementation has gone awry.
