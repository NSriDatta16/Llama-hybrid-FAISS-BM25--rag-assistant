[site]: stackoverflow
[post_id]: 204150
[parent_id]: 203912
[tags]: 
There is no such thing as "multiprocessor" or "multicore" programming. The distinction between "multiprocessor" and "multicore" computers is probably not relevant to you as an application programmer; it has to do with subtleties of how the cores share access to memory. In order to take advantage of a multicore (or multiprocessor) computer, you need a program written in such a way that it can be run in parallel, and a runtime that will allow the program to actually be executed in parallel on multiple cores (and operating system, although any operating system you can run on your PC will do this). This is really parallel programming, although there are different approaches to parallel programming. The ones that are relevant to Python are multiprocessing and multithreading. In languages like C, C++, Java, and C#, you can write parallel programs by executing multiple threads. The global interpreter lock in the CPython and PyPy runtimes preclude this option; but only for those runtimes. (In my personal opinion, multithreading is dangerous and tricky and it is generally a good thing that Python encourages you not to consider it as a way to get a performance advantage.) If you want to write a parallel program which can run on multiple cores in Python, you have a few different options: Write a multithreaded program using the threading module and run it in the IronPython or Jython runtime. Use the processing module, (now included in Python 2.6 as the multiprocessing module), to run your code in multiple processes at once. Use the subprocess module to run multiple python interpreters and communicate between them. Use Twisted and Ampoule . This has the advantage of not just running your code across different processes, but (if you don't share access to things like files) potentially across different computers as well. No matter which of these options you choose, you will need to understand how to split the work that your program is doing up into chunks that make sense to separate. Since I'm not sure what kind of programs you are thinking of writing, it would be difficult to provide a useful example.
