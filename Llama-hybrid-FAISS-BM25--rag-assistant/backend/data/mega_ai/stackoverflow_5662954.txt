[site]: stackoverflow
[post_id]: 5662954
[parent_id]: 
[tags]: 
Parallel Producer / Consumer with fault tolerance?

I have a requirement to chunk large csv files up into several different db inserts using SqlBulkCopy. I'm intending on doing this via 2 separate Tasks, 1 for batching up the CSV file and another for inserting into the database. As an example here is what I'm thing of: public class UberTask { private readonly BlockingCollection > _store = new BlockingCollection >(); public void PerformTask() { var notifier = new UINotifier(); Task.Factory.StartNew(() => { for (int i =0; i Console.WriteLine(string.Format("Reading '{0}' from file", description))); // represents reading the CSV file. Thread.Sleep(500); notifier.PerformOnTheUIThread(() => Console.WriteLine(string.Format("Enqueuing '{0}'", description))); _store.Add(new Tuple (description, i)); } _store.CompleteAdding(); }); var consumer = Task.Factory.StartNew(() => { foreach (var item in _store.GetConsumingEnumerable()) { var poppedItem = item; notifier.PerformOnTheUIThread(() => Console.WriteLine(string.Format("Sending '{0}' to the database", poppedItem.Item1))); // represents sending stuff to the database. Thread.Sleep(1000); } }); consumer.Wait(); Console.WriteLine("complete"); } } Is this a good way of pairing 2 sets of related tasks? What the above code does not handle (which it needs to): If the Task that represents the CSV reading faults, the other task needs to stop (even if there is still items in _store.) If the Task that represents the db inserts faults, the other process can just stop processing. If either of the paired tasks faults I will need to perform some action to roll back the db updates (I'm not worried about how I will rollback), it's more a question of how do I code "a fault happened in one of the paired tasks, so I need to do some tidy up". Any help on the above would be greatly appreciated!
