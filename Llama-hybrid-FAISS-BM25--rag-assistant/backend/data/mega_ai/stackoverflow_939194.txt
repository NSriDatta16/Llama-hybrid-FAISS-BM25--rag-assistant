[site]: stackoverflow
[post_id]: 939194
[parent_id]: 
[tags]: 
Preserving parameter/argument names in compiled Java classes

When I compile something like this: public class MyClass { void myMethod(String name, String options, String query, String comment) { ... } } and compile this to a class file, it seems that argument names are lost. That is, when some other Java code references MyClass and wants to call or overwrite myMethod , my IDE (currently Eclipse) seems to get this method signature from the class-file: void myMethod(String arg0, String arg1, String arg2, String arg3); I know that Eclipse (and possibly other IDEs too) allows me to provide a link to the source or the Javadoc (as Bishiboosh pointed out) of MyClass and can take advantage of this. But I'm curious if there is some way to tell javac to include the names into the class-file, so that users of that class can see the argument names even if they only have the class file. Solution for classes When I compile a class with java -g:vars , the names of parameters are included in the class file. -g:vars seems to be equivalent to Eclipse -> project properties -> Java compiler -> Add variable attributes to generated class files . This solution was suggested by several authors, but the answer from Nick finally made me believe. On my machine, Eclipse sometimes used this info, sometimes it didn't, which was probably my fault or a bug in Eclipse, but not a problem with the class files or the compiler. Anyway, now I know that the information is definitely present. But no solution for interfaces While this works (kind of) fine for classes, it's not working for interfaces. For me, the logical reason seems to be, that -g:vars only provides the names of local variables, which is what the documentation for javac also states. In the body of a method, it's parameters are very similar to local variables, thus they are covered by -g:vars . interface methods don't have bodies, so they can't have local variables. My initial question only asked for classes, because I was not aware that there might be any difference. Class file format As gid pointed out, the class file format does not support storage of parameter names. I found a section in the class file spec that describes a data structure which should hold the parameter names of methods, but this is definitely not used when compiling interfaces. When compiling a class, I can't tell if the mentioned data structure is used, or if Eclipse infers the parameter names from the usage of parameters inside the method body. An expert could clarify this, but it's not that relevant I think.
