[site]: stackoverflow
[post_id]: 148194
[parent_id]: 24675
[tags]: 
General Do not try to optimize before you start to see real world load. You might guess right, but if you don't, you've wasted your time. Use jmeter , xdebug or another tool to benchmark the site. If load starts to be an issue, either object or data caching will likely be involved, so generally read up on caching options (memcached, MySQL caching options) Code Profile your code so that you know where the bottleneck is, and whether it's in code or the database Databases Use MYSQLi if portability to other databases is not vital, PDO otherwise If benchmarks reveal the database is the issue, check the queries before you start caching. Use EXPLAIN to see where your queries are slowing down. After the queries are optimized and the database is cached in some way, you may want to use multiple databases. Either replicating to multiple servers or sharding (splitting the data over multiple databases/servers) may be appropriate, depending on the data, the queries, and the kind of read/write behavior. Caching Plenty of writing has been done on caching code, objects, and data. Look up articles on APC , Zend Optimizer , memcached , QuickCache , JPCache . Do some of this before you really need to, and you'll be less concerned about starting off unoptimized. APC and Zend Optimizer are opcode caches, they speed up PHP code by avoiding reparsing and recompilation of code. Generally simple to install, worth doing early. Memcached is a generic cache, that you can use to cache queries, PHP functions or objects, or entire pages. Code must be specifically written to use it, which can be an involved process if there are no central points to handle creation, update and deletion of cached objects. QuickCache and JPCache are file caches, otherwise similar to Memcached. The basic concept is simple, but also requires code and is easier with central points of creation, update and deletion. Miscellaneous Consider alternative web servers for high load. Servers like lighthttp and nginx can handle large amounts of traffic in much less memory than Apache , if you can sacrifice Apache's power and flexibility (or if you just don't need those things, which often, you don't). Remember that hardware is surprisingly cheap these days, so be sure to cost out the effort to optimize a large block of code versus "let's buy a monster server." Consider adding the "MySQL" and "scaling" tags to this question
