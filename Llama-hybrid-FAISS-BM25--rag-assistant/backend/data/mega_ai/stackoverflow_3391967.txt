[site]: stackoverflow
[post_id]: 3391967
[parent_id]: 
[tags]: 
How do I turn Moose objects into JSON for use in Catalyst?

I have a series of Moose objects that I'm looking to feed to JSON::XS by way of Catalyst::View::JSON . JSON::XS is unable to encode blessed data-structures. I know that there is MooseX::Storage::Format::JSON which can -- kinda -- do what I want; but, it seems pretty overly heavy. What I'm looking for is essentially the same information that XXX.pm provides. I just want the raw-data structures recursively unblessed so JSON::XS (the driver for JSON::Any that C:V:JSON uses internally) can display it. What is the best way go about using Catalyst::View::JSON and JSON::XS with Moose objects? It seems I have four obvious choices: Make Catalyst::View::JSON work with Moose Objects, by patching C:V:JSON to read from freeze and finalize the request if the argument exposed is a Moose Object. Patch JSON::XS to fallback to return value of $obj->freeze if $obj->isa('Moose') && $obj->does('MooseX::Storage::Format::JSON') . I should look into MX:S:F:JSON to make sure that the class used by JSON::Any , and by proxy MX:S:F:JSON , is JSON::XS (hate to think of the bugs galore if JSON::Any choses a different internal encoder for the Moose object that JSON::XS is called to use. Figure out how to recursively-unbless and let Catalyst::View::JSON do its thing. Don't use Catalyst::View::JSON at all. Just write to STDOUT $obj->freeze and manually finalize requests.. This seems the most hackish. I'm sure there are some other options, any ideas? What is my best bet?
