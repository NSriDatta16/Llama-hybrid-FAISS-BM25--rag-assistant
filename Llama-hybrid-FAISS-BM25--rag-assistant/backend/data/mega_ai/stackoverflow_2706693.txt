[site]: stackoverflow
[post_id]: 2706693
[parent_id]: 2703528
[tags]: 
This is very similar to sbi's answer but has some additional features. I've used the following set of macros with #pragma message on Microsoft Visual C++ for some time: #define EMIT_COMPILER_WARNING_STRINGIFY0(x) #x #define EMIT_COMPILER_WARNING_STRINGIFY1(x) EMIT_COMPILER_WARNING_STRINGIFY0(x) #define EMIT_COMPILER_MESSAGE_PREFACE(type) \ __FILE__ "(" EMIT_COMPILER_WARNING_STRINGIFY1(__LINE__) "): " type ": " #define EMIT_COMPILER_MESSAGE EMIT_COMPILER_MESSAGE_PREFACE("message") #define EMIT_COMPILER_WARNING EMIT_COMPILER_MESSAGE_PREFACE("warning") #define EMIT_COMPILER_ERROR EMIT_COMPILER_MESSAGE_PREFACE("error") Used as: #pragma message(EMIT_COMPILER_WARNING "This code sucks; come back and fix it") which results in the following text in the build output: 1>z:\sandbox\test.cpp(163): warning : This code sucks; come back and fix it The output matches the Visual C++ error message format, so errors, warnings, and messages show up in the Error List along with all the other compiler warnings and errors. The "warning" macro is far more obnoxious than a simple // todo fix this in the code, and helps me to remember to come back and fix something. The "error" macro is useful because it causes compilation to fail but does not immediately stop the compilation process like the #error directive does.
