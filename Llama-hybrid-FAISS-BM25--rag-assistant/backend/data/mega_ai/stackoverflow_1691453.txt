[site]: stackoverflow
[post_id]: 1691453
[parent_id]: 
[tags]: 
How can I use the Clojure REPL together with Qt Jambi?

I have not found a solution to use the Clojure REPL with Qt on the web. Basically the problem is that the REPL hangs as soon as you call QApplication/exec in order to get the UI to display. You cannot C-c C-c back into the REPL, and closing the active Qt window seems to kill the whole Clojure process. Now simply calling QApplication/processEvents from within an agent is not possible, unless the agent runs in exactly the same thread in which you created your Qt widgets. It took me two days to figure this out and I have seen others have the same issue/problem but without a solution. So here is mine, in code: (add-classpath "file:///usr/share/java/qtjambi.jar") (ns qt4-demo (:import (com.trolltech.qt.gui QApplication QPushButton QFont QFont$Weight) (com.trolltech.qt.core QCoreApplication) (java.util Timer TimerTask) (java.util.concurrent ScheduledThreadPoolExecutor TimeUnit)) (:require swank.core)) (defn init [] (QApplication/initialize (make-array String 0))) (def *gui-thread* (new java.util.concurrent.ScheduledThreadPoolExecutor 1)) (def *gui-update-task* nil) (def *app* (ref nil)) (defn update-gui [] (println "Updating GUI") (QApplication/processEvents)) (defn exec [] (.remove *gui-thread* update-gui) (def *gui-update-task* (.scheduleAtFixedRate *gui-thread* update-gui 0 150 (. TimeUnit MILLISECONDS)))) (defn stop [] (.remove *gui-thread* update-gui) (.cancel *gui-update-task*)) (defmacro qt4 [& rest] `(do (try (init) (catch RuntimeException e# (println e#))) ~@rest )) (defmacro with-gui-thread [& body] `(.get (.schedule *gui-thread* (fn [] (do ~@body)) (long 0) (. TimeUnit MILLISECONDS)))) (defn hello-world [] (with-gui-thread (qt4 (let [app (QCoreApplication/instance) button (new QPushButton "Go Clojure Go")] (dosync (ref-set *app* app)) (doto button (.resize 250 100) (.setFont (new QFont "Deja Vu Sans" 18 (.. QFont$Weight Bold value))) (.setWindowTitle "Go Clojure Go") (.show))))) (exec)) Basically it uses the ScheduledThreadPoolExecutor class in order to execute all Qt-code. You can use the with-gui-thread macro to make it easier to call functions from within the thread. This makes it possible to change the Qt UI on-the-fly, without recompiling.
