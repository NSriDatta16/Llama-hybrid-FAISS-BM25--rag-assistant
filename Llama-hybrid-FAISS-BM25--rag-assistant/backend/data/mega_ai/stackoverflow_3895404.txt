[site]: stackoverflow
[post_id]: 3895404
[parent_id]: 3895359
[tags]: 
There's not enough detail here to be certain of what's best, but in general I'd store the actual object registry as a module-level (global) variable in the top class, and have a method in the base class to access it. _entities = [] class entity(object): @staticmethod def get_entity_registry(): return _entities Alternatively, hide _entites entirely and expose a few methods, eg. get_object_by_id , register_object , so you can change the storage of _entities itself more easily later on. By the way, a tip in case you're not there already: you'll probably want to look into weakrefs when creating object registries like this.
