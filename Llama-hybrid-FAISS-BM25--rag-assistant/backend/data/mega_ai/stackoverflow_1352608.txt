[site]: stackoverflow
[post_id]: 1352608
[parent_id]: 1352593
[tags]: 
Sure; implementors of classes are free to implement any number of methods as a part of a class's internal implementation. But that doesn't mean that you should use them. You can use the Objective-C runtime's API for figuring out all the methods and classes, including those that aren't publicly declared. But don't bother. Specifically, if a method is not declared in the provided header files and is not documented in the documentation, don't use it. Using such a method will lead to fragility and maintenance headaches; your app may likely break at the next software update. On the iPhone, your are expressly directed not to use private interfaces and your app will run the risk of rejection if you do so. But I don't think that is what you are really asking. You mention: Say for example. UITableView methods includes didSelectRowAtIndexPath cellForRowAtIndex Path numberOfSectionsInTableView titleForHeaderInSection However, UITableView does not declare any of those methods. Instead, it declares: - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView - (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section Or, succinctly, tableView:didSelectRowAtIndexPath: , etc...
