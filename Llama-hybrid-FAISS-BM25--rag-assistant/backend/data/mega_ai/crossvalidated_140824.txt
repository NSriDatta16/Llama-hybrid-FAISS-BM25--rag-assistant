[site]: crossvalidated
[post_id]: 140824
[parent_id]: 
[tags]: 
FFT for speeding up kernel density estimation

One of the method for speeding up Kernel Density Estimation calculations is based on using FFT. This is implemented for example in kde{ks} R function. But unfortunately, a serious problem exists while trying to use this kde{ks} for unconstrained (full) bandwidth matrices. Below I try to explain it. First, load a sample dataset and set some inputs: library(ks) library(mvtnorm) data(unicef) x Now execute kde with binned=F and plot a contour. H is the unconstrained bandwidth matrix. The density seems quite good ( Fig. 1 ). H Now I do the same, but now with binned=T . I get an alert: Binned estimation for non-diagonal bandwidth matrix H can be inaccurate. fhat2$H shows that the unconstrained bandwidth was used as an input. The density seems rather strange ( Fig. 2 ). fhat2 Now I change manually H into a diagonal form and execute kde again. Fig. 3 is almost identical (or at least similar) to Fig. 2 . This suggests that kde uses (internally) a form of the diagonal H , instead of the unconstrained H . H Now I become suspicious that turning on the binning makes some difficulties while using kde . After a short inspection of ks source codes I realized that FFT was used to speed up the calculations and this FFT procedure is not "ready" for supporting unconstrained H bandwidths. Is it true? To check my suspicions I have create a simple code for calculating fhat WITH binning and WITHOUT using FFT (that is with radially symmetric kernels). Below is the code (not optimized for speed, literal implementation of the definition in fact): bkde.no.fft.radial Execute the above function (works very slow): H It can be observed that Fig. 1 is identical with Fig. 4 and it proves that the unconstrained H was used correctly. This experiment shows that kde with binned=T and the unconstrained bandwidth H used CAN NOT make use of radially symmetric kernels if this is implemented with FFT! And now my the most interesting and fascinating question: Is it possible to utilize FFT for implementing fast kde with the unconstrained bandwidth H support? Below I enclose the image generated after executing all the code fragments given above. ![figures][5] The problem described above seems similar to the one given here , as in both posts FFT-like-nature seems to be responsible for "noise effects".
