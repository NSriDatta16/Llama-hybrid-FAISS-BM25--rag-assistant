[site]: stackoverflow
[post_id]: 5344477
[parent_id]: 
[tags]: 
Unable to delete child entities from a POCO using Unit Of Work pattern

I am using POCO classes on an EF4 CTP5 project and I am having trouble deleting child properties. Here's my example (hopefully not too long). Relevant Portions of the Tour Class public partial class Tour { public Guid TourId { get; private set; } protected virtual List _agents { get; set; } public void AddAgent(Agent agent) { _agents.Add(agent); } public void RemoveAgent(Guid agentId) { var a = Agents.Single(x => x.AgentId == agentId); _agents.Remove(Agents.Single(x => x.AgentId == agentId)); } } Command Handler public class DeleteAgentCommandHandler : ICommandHandler { private readonly IRepository _repository; private readonly IUnitOfWork _unitOfWork; public DeleteAgentCommandHandler( IRepository repository, IUnitOfWork unitOfWork ) { _repository = repository; _unitOfWork = unitOfWork; } public void Receive(DeleteAgentCommand command) { var tour = _repository.GetById(command.TourId); tour.RemoveAgent(command.AgentId); // The following line just ends up calling // DbContext.SaveChanges(); on the current context. _unitOfWork.Commit(); } } Here's the error that I get when my UnitOfWork calls DbContext.SaveChanges() The operation failed: The relationship could not be changed because one or more of the foreign-key properties is non-nullable. When a change is made to a relationship, the related foreign-key property is set to a null value. If the foreign-key does not support null values, a new relationship must be defined, the foreign-key property must be assigned another non-null value, or the unrelated object must be deleted. This is happening because EF wont just automatically delete the an Agent entity from the database just because it has been removed from the Agents collection in my Tour class. I need to explicitly call dbContext.Agents.DeleteObject(a); , but my problem is, I don't have access to the dbContext from within my POCO. Is there any way to handle this scenario?
