[site]: stackoverflow
[post_id]: 1861865
[parent_id]: 1861560
[tags]: 
This is the souce code i ussed FMP.AspNetJsonReader = Ext.extend(Ext.data.JsonReader, { read: function(response) { // Assuming ASP.NET encoding - Data is stored as var json = response.responseText; var o = Ext.decode(json); if (!o) { throw { message: "AspNetJsonReader.read: Json object not found" }; } if (!o.d) { throw { message: "AspNetJsonReader.read: Root element d not found" }; } return this.readRecords(o.d); } }); FMP.AspNetJsonStore = Ext.extend(Ext.data.GroupingStore, { /** * @cfg {Ext.data.DataReader} reader @hide */ constructor: function(config) { FMP.AspNetJsonStore.superclass.constructor.call(this, Ext.apply(config, { reader: new FMP.AspNetJsonReader(config) })); } }); Iam using AS.NET for server side Here is my webservice public PagedResult buildGrid(int start, int limit, string sortfield, string dir) { var a=5; Guid AccountID = (Guid)Session["AccountID"]; //string sortdir; //if( dir == "DESC") //{ // sortdir = dir.Substring(0, 4).Trim().ToUpper(); //} //else //{ // sortdir = dir.Substring(0, 3).Trim().ToUpper(); //} string SortExpression = sortfield + " " + (!String.IsNullOrEmpty(dir) ? dir : String.Empty); //string whereClause = "SELECT value a FROM XSP_AssetList_V AS a WHERE a.AccountID = GUID'" + AccountID + "' order by a.PageCount = '" + + "'"; string whereClause = "SELECT value a FROM XSP_AssetList_V AS a WHERE a.AccountID = GUID'" + AccountID + "' Order By a."+SortExpression; //string whereClause = "SELECT value a , ROW_NUMBER() OVER(ORDER BY" + " " + SortExpression + ") As RowNumber FROM XSP_AssetList_V AS a WHERE a.AccountID = GUID'" + AccountID + "'"; //string whereClause = "SELECT value a FROM XSP_AssetList_V AS a WHERE a.AccountID = GUID'" + AccountID + "'"; List fmpAssets = new List (); using (XSPAssetModel.XSPAssetEntities assetEntities = new XSPAssetEntities(b.BuildEntityConnectionString1("XSMDSN"))) { ObjectQuery assets = new ObjectQuery (whereClause, assetEntities); //var assetOrder = assets.OrderBy(x => x.StatusName).ToList(); var assetPage = assets.Skip(start).Take(limit); //var totalAssetCount = assets.Count(); currentAssets = assetPage.ToList(); int currentAssetsCount = currentAssets.Count; string imgprefix = System.Configuration.ConfigurationManager.AppSettings["ImgPrefix"]; char[] separators = { '/' }; string appname = ""; int lastloc = imgprefix.Substring(0, imgprefix.Length - 1).LastIndexOfAny(separators); if (lastloc > 6) { appname = imgprefix.Substring(lastloc + 1); } FMPAsset asset = new FMPAsset(); //StreamWriter sw = new StreamWriter("C:\\test.txt"); XSPPrinterMarkerSupplyModel.XSPPrinterMarkerSupplyEntities markerCtx = new XSPPrinterMarkerSupplyModel.XSPPrinterMarkerSupplyEntities(b.BuildEntityConnectionString1("XSMDSN")); for (int x = 0; x -1) { asset.Customer = asset.Customer.Substring(0, asset.Customer.IndexOf(Environment.NewLine)); } } else { asset.Customer = currentAssets[x].CustomerChargeBackEntryName; } if (this.b.UsePricePlanDescription && !String.IsNullOrEmpty(currentAssets[x].PricePlanDescription)) { asset.Program = currentAssets[x].PricePlanDescription; if (asset.Program.IndexOf(Environment.NewLine) > -1) { asset.Program = asset.Program.Substring(0, asset.Program.IndexOf(Environment.NewLine)); } } else { asset.Program = currentAssets[x].Program; } asset.BlackPct = -3; asset.CyanPct = -3; asset.MagentaPct = -3; asset.YellowPct = -3; Guid id = currentAssets[x].AssetID; asset = SetCMYKvalues(asset, x); BuilldImpressionsValues(currentAssets[x], ref asset); fmpAssets.Add(asset); } var totalAssetCount = assets.Count(); var y = new PagedResult (); y.Records = fmpAssets; y.TotalCount = totalAssetCount; return y; // CommonGrid1.BindDataSource(SortByStatusName(fmpAssets)); } }
