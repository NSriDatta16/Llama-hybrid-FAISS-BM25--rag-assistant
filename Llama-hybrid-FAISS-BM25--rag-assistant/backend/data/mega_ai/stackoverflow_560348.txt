[site]: stackoverflow
[post_id]: 560348
[parent_id]: 559332
[tags]: 
If the current process is copying a folder and giving it a date, isn't that so that you get some sort of development history, so isn't that basically a simple form of source control? So to answer any criticisms about source control, you're already doing it. Now you just need to point out the weaknesses in the current system and suggest a better one. Why do you need to re-invent the wheel when people have really thought about a lot of the complex scenarios which can occur during development and developed the tools which let them handle them. What you're currently doing is very fragile and will fall over if any sort of complex scenario comes up, at which point you'll have to expend a lot of energy working out how to do something that the tools already do. VSS is better than what you're doing, but doesn't have the very useful conventions that SVN, git or mercurial has which allows multiple projects to live together in a well organised manner - I'm talking branches, tags and merging, both of which are fragile and basically a nightmare under vss. SVN does have plugins for visual studio. Some are free. But I find that tortoise-svn just eclipses anything else. The only benefit I find with a plugin is that new files get added to svn automatically. So, weaknesses of your current system: If you have to make a change to a file, you are likely to overwrite or be overwritten by the other dev's changes. You may not even notice this. If you have to remember which files you've changed to copy them over some 'master' copy, you're likely to miss one at some point. Good luck ever finding any documentation about when you made a change and why. How could you ever build a stable automated build system on your current system? Cruise control and hudson work really well, you're hobbling yourself VSS doesn't group changes to multiple files together very well. Everything modern does this extremely well and with atomic consistency. VSS branch and merge support is awful. When we used it we ended up bracketing every change with comments in source code and manually copying code around rather than relying on VSS merge. It's going to be very hard, near impossible in your current system, to have some version of the code in live maintenance and some other, later version, in heavy development. Think about what's needed to keep two projects in sync like this, you'll need a good tool. SVN can do it, git can do it really well. That might be enough to go on with, can do more.
