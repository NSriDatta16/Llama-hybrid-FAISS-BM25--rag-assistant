[site]: stackoverflow
[post_id]: 2223757
[parent_id]: 2217589
[tags]: 
From C++/CLI in Action The C++/CLI Dispose pattern has these rules (paraphrased): If a class has a finalizer or a destructor the compiler generates Dispose(bool) that will call either the finalizer or destructor based on the bool value. If it has just a d'tor (~type) then the compiler calls Dispose(true) so the d'tor is called. If it has just a finalizer (!type) then the compiler calls Dispose(false) so the finalizer is called Also for the second rule: The compiler will implement the IDisposable interface for you (by generating Dispose() ). It then uses SuppressFinalize to make sure the finalizer isn't called. I did this to your code and the only way I could get it to compile was to make person_data a instance member. The error i got when it was static was error C2039: '{dtor}' : is not a member of 'System::IDisposable' which doesn't make much sense. Also, do you even need to delete the person_data vector since is a managed object? Maybe you do but I haven't used the cliext enough to say. Edit Perhaps the first paragraph of this article has the answer (emphasis mine): When you declare a member variable as static and when the application starts, the compiler creates a copy of that member. This member would be maintained by the compiler while the program is running. If you declare an instance of a class, like the above vehicle variable, the static member is not part of the object: the compiler creates and maintains the static member, whether you use it or not, whether you declare a class variable or not.
