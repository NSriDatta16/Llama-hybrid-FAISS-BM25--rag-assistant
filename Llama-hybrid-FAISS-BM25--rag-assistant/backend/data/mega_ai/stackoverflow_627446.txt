[site]: stackoverflow
[post_id]: 627446
[parent_id]: 
[tags]: 
How to organize API?

I am designing an API and I would like it to be simple to use. So, if I have Customers, Statements, and Payments. Does it make sense to have objects such as: Customer, CustomerHandler, Statement, StatementHandler, Payment, PaymentHandler? This way when the developer wants to do something with customers he/she knows to create a CustomerHandler and then all of the possible functions that one would like to perform with a customer are inside the handler. Methods like: CustomerHandler: AddCustomer(customer) GetCustomer(customerID) GetCustomerCount() StatementHandler: AddStatement(customerID) GetStatement(statementID) GetStatementCount(customerID) PaymentHandler: GetPaymentsByCustomer(customerID) GetPayment(paymentID) GetPaymentCountByCustomer(customerID) This way if the developer wants to work on receiving payments he/she knows to go to the PaymentHandler. My coworker thought that functions like GetPayments(customerID) belong in a class that manages the customer. So, it would be like Customer.GetPayments() AS Payments. But if I have some other entity like Worker, there would be Worker.GetPayments() AS Payments. So, I see the logic with both approaches. The first one groups things together so that if no matter whom the payment is coming from you get it all from one class by having functions like GetPaymentsByCustomer(CustomerID) and GetPaymentsByWorker(WorkerID). This way one does not have to stumble through different handler or manager objects to get payments. Both approaches make sense to me, how about you? Or, are we both off and there is a better way to do this? Thanks in advance!
