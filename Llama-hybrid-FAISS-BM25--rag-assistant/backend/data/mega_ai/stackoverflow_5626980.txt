[site]: stackoverflow
[post_id]: 5626980
[parent_id]: 5626882
[tags]: 
A pop quiz: Given a small HTML form snippet: and your server-side code: $studentID = $_POST['studentID']; $gender = $_POST['gender']; $sql = "UPDATE Students SET gender='$gender' WHERE studentID=$studentID"; $res = mysql_query($sql); How many ways is this code wrong? @Basic, at mininum, here's the 'big' errors: failure to confirm that the student ID is an integer. Failing to confirm that the studentID actually is valid and exists in the DB. inserting the studentID directly into the query, potentially allowing a direct SQL injection attack. Round-tripping a critical value (studentID) through a client-side form, allowing the user to hack the form and change the gender of any student. Failure to validate the gender value, allowing arbitrary data into the database (e.g. little Bobby Tables is now of gender 'n/a') inserting the gender value directly into the query string, leading to a direct SQL injection attack (in this case, the Students table gets deleted). Failure to check the return value from mysql_query(). Queries can be syntactically perfect, yet still fail for other reasons. Never forget to check a query call's status after it completes. Not so big a deal when only the gender of a student is at issue. Maybe a form letter goes out about "Ms. Robert" and "her" latest detention. Very big deal if it's an online banking site and the SQL injection just transferred your chequeing account's balance to some offshore account in the Cayman Islands.
