[site]: stackoverflow
[post_id]: 4163441
[parent_id]: 
[tags]: 
Sqldataapter advice

At present i have a the following code populating a datagridview showing the user account information on our system. What i want to do do is have a checkbox on the datagridview for the option "accountenabled" and a update button at the bottom of the form so it will update all users that have had changes made against them. I am currently pulling the data back using an sqldatareader however from what i have read i need to use a sqldataadapter. I`ve created the column names on the datagridview and the reader is currently pulling everything back correctly. Could someone please point me in the right direction of doing this with an sqldatadapter? Thanks public UserAdmin() { InitializeComponent(); //Load user list // Locals Functionality func = new Functionality(); SqlConnection supportDB = null; SqlCommand CheckUser = null; SqlDataReader rdr; DataSet ds = new DataSet(); DataTable dt = new DataTable(); string User = System.Environment.UserName.ToString(); string spName = "gssp_ShowAllUsers"; try { using (supportDB = new SqlConnection(GSCoreFunc.ConnectionDetails.getConnectionString(ConnectionType.SupportDB))) { using (CheckUser = new SqlCommand(spName, supportDB)) { // Set the command type CheckUser.CommandType = CommandType.StoredProcedure; // Populate the parameters. CheckUser.Parameters.Add(func.CreateParameter("@spErrorID", SqlDbType.Int, ParameterDirection.Output, DBNull.Value)); // Open the connection and populate the reader with the SP output supportDB.Open(); rdr = CheckUser.ExecuteReader(); if (CheckUser.Parameters["@spErrorID"].Value != null) { throw new InvalidOperationException(); } // If the data reader has rows display output on label if (rdr.HasRows) { //Output values while (rdr.Read()) { //Bind to data table dgvUsers.Rows.Add(rdr["agentID"].ToString(), rdr["createdon"].ToString(), rdr["firstname"].ToString(), rdr["lastname"].ToString(), rdr["username"].ToString(), rdr["emailaddress"].ToString(), rdr["Departments"].ToString(), rdr["accountenabled"].ToString(), rdr["AgentAccountLevel"].ToString()); } } // Close reader and connection. rdr.Close(); supportDB.Close(); } } } catch (Exception ex) { //Show error message string error = ex.ToString(); //Real error string FriendlyError = "There has been error loading the user list"; // Error user will see GSCoreFunc.ShowMessageBox.msgBoxErrorShow(FriendlyError); //Log error to ExceptionDB GSCoreFunc.ReportException.reportEx(GSCoreFunc.ApplicationInformation.ApplicationName, error, FriendlyError, GSCoreFunc.ApplicationInformation.ComputerName, GSCoreFunc.ApplicationInformation.OperatingSystem, GSCoreFunc.ApplicationInformation.screenSize, GSCoreFunc.ApplicationInformation.IPAdddress, GSCoreFunc.ApplicationInformation.domainName);// Pass error to GSCoreFunc to log to the ExceptionDB } } private void btClose_Click(object sender, EventArgs e) { //Close window Close(); } } }
