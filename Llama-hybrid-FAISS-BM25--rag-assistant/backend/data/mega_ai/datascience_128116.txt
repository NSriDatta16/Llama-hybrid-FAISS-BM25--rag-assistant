[site]: datascience
[post_id]: 128116
[parent_id]: 
[tags]: 
Min-Max Scaling more sensitive to outliers than 'Simple Feature Scaling'?

I am confused as to the pros and cons of two different approaches to normalization: Min-Max Scaling, and what the lecturer in the course I am taking refers to as 'Simple Feature Scaling'. The latter he defined to be Xnew = Xold/Xmax , and the former is defined to be: Xnew = (Xold-Xmin)/(Xmax-Xmin). I am looking for a simple code example that demonstrates that the former is more sensitive to outliers. Before I bother the kind folks on stackexchange I usually ask chatGPT and often get useful answers. On this occasion, chatGPT told me that Min-Max Scaling was more sensitive to outliers than 'Simple Feature Scaling'. That seemed reasonable, so I asked for an illustrative code example, with a plot. chatGPT gave me various versions of the code below, but in each case there was no visual difference between the plots that I could detect. I am hoping human expertise could help me in tweaking the code snippet below with some data that would illustrate the trade-off that chatGPT said exists between the two approaches. (Assuming chatGPT was right on that score). Thanks in advance.. Code is show below: import pandas as pd import numpy as np import matplotlib.pyplot as plt # Create a DataFrame with a feature and introduce outliers data = {'Feature': [1, 2, 3, 4, 5, 6, 100, 120]} df = pd.DataFrame(data) # Min-Max Scaling min_max_scaled = (df - df.min()) / (df.max() - df.min()) # Max Scaling max_scaled = df / df.max() # Plot the original, Min-Max Scaled, and Max Scaled data plt.figure(figsize=(10, 6)) plt.subplot(3, 1, 1) plt.scatter(df.index, df['Feature'], color='blue') plt.title('Original Data') plt.xlabel('Index') plt.ylabel('Feature') plt.subplot(3, 1, 2) plt.scatter(min_max_scaled.index, min_max_scaled['Feature'], color='green') plt.title('Min-Max Scaled Data') plt.xlabel('Index') plt.ylabel('Feature') plt.subplot(3, 1, 3) plt.scatter(max_scaled.index, max_scaled['Feature'], color='red') plt.title('Max Scaled Data') plt.xlabel('Index') plt.ylabel('Feature') plt.tight_layout() plt.show() Here is what the plot looks like when I run the code:
