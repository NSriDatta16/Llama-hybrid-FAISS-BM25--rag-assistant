[site]: stackoverflow
[post_id]: 5130906
[parent_id]: 5130873
[tags]: 
Your pseudocode looks correct. Are you just having trouble translating it into C? Firstly, your pseudocode uses the word "add" which implies that the pixel is being put into some new array, but it doesn't specify where this array comes from. So allow me to expand your pseudocode a bit: Create a new_image FOREACH row in new_height FOREACH col in new_width IF larger_image AND smaller_image do not contain (row,col) in new_image, set (row,col) to white pixel ELSE IF overlap contains (row,col) in new_image, set (row,col) to average of pixels ELSE IF only larger_image contains (row,col) in new_image, set (row,col) to larger_image pixel ELSE in new_image, set (row,col) to smaller_image pixel Now the problem is this "do not contain (row,col)". What does it mean for an image to not contain a particular coordinate? It means that the (row,col) coordinate lies outside the space in the source image. I think it would help if you wrote a function which takes an image (the large or the small) and a match struct, and a (row,col) coord in the new image space, and returns either the corresponding pixel from the source image, or indicates that the pixel is not in that image. (In C, you can do this by having the function return an int, 1 if there is a pixel there and 0 if there isn't, and have an argument which is a pointer to a pixel which you fill in if you are returning 1.) Now you can ask this function whether the large_image and small_image contain (row,col), and also get the pixel from each, if they do, and apply your four different cases.
