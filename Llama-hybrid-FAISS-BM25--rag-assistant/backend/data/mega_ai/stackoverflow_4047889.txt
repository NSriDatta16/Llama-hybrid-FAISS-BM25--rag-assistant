[site]: stackoverflow
[post_id]: 4047889
[parent_id]: 4047197
[tags]: 
Depending on the quality of the result, I would recommend different solutions. I doubt that most people can learn programming + learn do make a game within the tight timeframe and budget you say, but if we lower the expectations "something" should be possible. First of all, I think groups learn faster if competing. Secondly source code of a solution should be open to others on the course. I learned to program back when I was 14-15 years old. Together with a friend of mine, we wrote a little piece of code each, then demonstrated our idea and the other one learned from it. Later on we formed a "small group" with more friends, and started to build small games and compete to see who could come up with the best idea and build a small game with a few levels. We got inspiration from every game we liked at that time (Commodore 64) and tried to build something similar with BASIC. It was a challenge as we had no teachers, no skills, internet, just friendship and bragging about how we did something cool - and then showing our code to the friends, so they could learn this too. I've learned that to start developing a game would require something different than a "language/platform" from a start. The idea/plan/goal is much more important than selecting a tool. A game needs logic and rules to follow. So you'll have to decide what kinda game, before choosing the platform/tool.platform/tool. Ideas for game types PAC-MAN games (collect things in a maze, avoid monsters) needs some map or collision logic to work Platform games (run sideways, jump, duck, shoot) needs a tile-based platform, these has to be coded right to work Shooters (things crossing the screen, points for hitting) needs a mouse input, some collision detection Simple adventure (multiple scenes, inventory with object you pickup/use, objects with state) needs a 2D viewer, a little click action 3D FPS, needs a real 3D engine ( Unity3D or similar frameworks will make this possible, but far reach for newbie programmers) - perhaps a map/level for an existing game such as Quake or better might be more fun to make. Turn-based (simple games where player makes a move, then AI or other player) requires less from the framework/hardware as delay does not hurt the game itself. Very possible with HTML/Javascript. Advise: I would go for some simple game made with HTML5 and whats possible with that. You have Canvas object if you need vector. You have Javascript for interaction/movement. You have sound for effect, but the best part is that it can be written using NOTEPAD if needed and EVERYONE on the course can learn from each others' coding. If you want to design a simple adventure, HTML could do much of the trick itself. Just finding my way around the internet/wikis is like a maze game sometimes :-) But perhaps you might need a little extra for the inventory part (bookmarks) (if no server-side, you might need some sort of pre-made objects) so the course is more about designing a game and using a framework, than learning to program in Javascript. If the idea is to learn game-design, more than coding, then I would go for simple editors like Gamemaker 8 which uses a graphical editor to produce loops and events. Very easy for new designers + able to do tile-based games. Again, depending on ambitions and time/effort, go for the right type of assignment and choose the appropriate tool/framework based on that.
