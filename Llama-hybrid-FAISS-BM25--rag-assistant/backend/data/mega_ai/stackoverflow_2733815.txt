[site]: stackoverflow
[post_id]: 2733815
[parent_id]: 2733676
[tags]: 
One way to do this is to setup a delegate on the UIWebView which has the shouldStartLoadEvent. Inside that event, you check what URL the UIWebView is trying to navigate to. Now to communicate from JavaScript to Objective-C, you need to specify your own custom anchors which will trigger different actions. For example, to log something, you might decide to use the anchor "#FAPI_LogEvent_Click_Rainbows". In JavaScript, you could have methods defined like such: function flurryTrackEvent(text) { window.location.href = 'FAPI_LogEvent' + text; } function flurrySetUserID(userID) { window.location.href = 'FAPI_SetUserID' + userID; } Next, in Objective-C, you would implement the shouldStartLoadEvent and "capture" these href navigations, and tell the browser not to load them. You will need to split the string up yourself and call the appropriate function. Here's some code: - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType () { NSString *theAnchor = [[request URL] fragment]; if ([theAnchor hasPrefix:@"FAPI_LogEvent"]) { NSString *textToLog = [theAnchor substringFromIndex:[@"FAPI_LogEvent" length]]; [FlurryAPI logEvent:textToLog]; return NO; // prevent the UIWebView from navigating to this anchor } else if ([theAnchor hasPrefix:@"FAPI_SetUserID"]) { NSString *userID = [theAnchor substringFromIndex:[@"FAPI_SetUserID" length]]; [FlurryAPI setUserID:userID]; return NO; // prevent the UIWebView from navigating to this anchor } } The fact that the events are already defined in Objective-C doesn't really help much since you need to implement your own routing behavior to call the appropriate Objective-C method. The only way you could take advantage of the fact that the methods are already defined in Objective-C and avoid hard coding the routing logic, would be using @selectors or similar dynamic function calling which is available in Objective-C. However, this is much more complicated to implement and probably presents a security risk. I would recommend implementing the routing logic like is shown in the code above.
