[site]: stackoverflow
[post_id]: 1306947
[parent_id]: 
[tags]: 
Closures and Lambda in C#

I get the basic principles of closures and lambda expressions but I'm trying to wrap my mind around what is happening behind the scenes and when it is/isn't practical to use them in my code. Consider the following example, that takes a collection of names and returns any names that begin with the letter C... static void Main(string[] args) { List names = new List (); names.AddRange(new string[] { "Alan", "Bob", "Chris", "Dave", "Edgar", "Frank" }); names.FindAll(x => x.StartsWith("C")).ForEach( i => Console.WriteLine(i)); } First, is there a more direct way that I could have written this expression? Secondly, isn't "FindAll" going to allocate memory for a new collection that holds the matching items? I definitely see that the syntax is more elegant, but I want to make sure I'm not walking into performance issues later down the road when working with larger collections. Does the compiler do some optimization voodoo behind the scenes that makes my concerns invalid?
