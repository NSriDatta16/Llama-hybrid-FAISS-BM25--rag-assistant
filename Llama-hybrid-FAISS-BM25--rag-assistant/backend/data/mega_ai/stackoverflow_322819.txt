[site]: stackoverflow
[post_id]: 322819
[parent_id]: 322807
[tags]: 
"a study that shows which 'best' practices when adopted have a better ROI, and improves software quality faster" Wouldn't that be great! If there was such a thing, we'd all be doing it, and you'd simply read it in DDJ. Since there isn't, you have to make a painful judgement. There is no "do X for an ROI of 8%". Some of the techniques require a significant investment. Others can be started for free. Unit Testing (in its real sense) - Free - ROI starts immediately. Automated unit testing - not free - requires automation. Test Driven Design & Development - Free - ROI starts immediately. Static code analysis - requires tools. Continuous integration capabilities - inexpensive, but not free You can't know the ROI. So you can only prioritize on investment. Some things are easier for people to adopt than others. You have to factor in your team's willingness to embrace the technique. Edit. Unit Testing is Free. "time spend coding the test could have been taken to code the next feature on the list" True, testing means developers do more work, but support does less work debugging. I think this is not a 1:1 trade. A little more time spent writing (and passing) formal unit tests dramatically reduces support costs. "What about legacy code?" The point is that free is a matter of managing cost. If you add unit tests to legacy code, the cost isn't free. So don't do that. Instead, add unit tests as part of maintenance, bug-fixing and new development -- then it's free. "Traning is an issue" In my experience, it's a matter of a few solid examples, and management demand for unit tests in addition to code. It doesn't require more than an all-hands meeting to explain that unit tests are required and here are the examples. Then it requires everyone report their status as "tests written/tests passed". You aren't 60% done, you're 232 out of 315 tests. "it's only free on average if it works for a given project" Always true, good point. "require more time, time aren't free for the business" You can either write bad code that barely works and requires a lot of support, or you can write good code that works and doesn't require a lot of support. I think that the time spent getting tests to actually pass reduces support, maintenance and debugging costs. In my experience, the value of unit tests for refactoring dramatically reduces the time to make architectural changes. It reduces the time to add features. "I do not think either that it's ROI immediately" Actually, one unit test has such a huge ROI that it's hard to characterize. The first test to pass becomes the one think that you can really trust . Having just one trustworthy piece of code is a time-saver because it's one less thing you have to spend a lot of time thinking about. War Story This week I had to finish a bulk data loader; it validates and loads 30,000 row files we accept from customers. We have a nice library that we use for uploading some internally developed files. I wanted to use that module for the customer files. But the customer files are enough different that I could see that the library module API wasn't really suitable. So I rewrote the API, reran the tests and checked the changes in. It was a significant API change. Much breakage. Much grepping the source to find every reference and fix them. After running the relevant tests, I checked it in. And then I reran what I thought was an not-closely-related test. Ooops. It had a failure. It was testing something that wasn't part of the API, which also broke. Fixed. Checked in again (an hour late). Without basic unit testing, this would have broken in QA, required a bug report, required debugging and rework. Look at the labor: 1 hour of QA person to find and report the bug + 2 hours of developer time to reconstruct the QA scenario and locate the problem + 1 hour to determine what to fix. With unit testing: 1 hour to realize that a test didn't pass, and fix the code. Bottom Line . Did it take me 3 hours to write the test? No. But the project got three hours back for my investment in writing the test.
