[site]: stackoverflow
[post_id]: 651732
[parent_id]: 651696
[tags]: 
Usercontrols facilitate reusability, and they incidentally break up functionality into smaller parts which can make the codebase more easy to manage. You can also do this by carefully planning out your code on one monolithic page as well, using regions and other organizational techniques. In the past I've done both, and both can work. I find the best method of doing control-to-page communication is with events - i.e. given a page with BoxA (grid display,) BoxB (grid options) and Grid (a usercontrol with the gridview in it,) BoxA could define an event "DisplaySettingsChanged," which it would throw during a postback whenever its settings have changed. The hosting page would create event subscriptions between the different components, for example catching DisplaySettingsChanged and calling Grid.Refresh or whatever. For all the extra infrastructure, if you're sure you don't want to re-use any of these components anywhere, I would probably put it in one monolithic page with extra care taken to keep everything organized and readable.
