[site]: stackoverflow
[post_id]: 3200136
[parent_id]: 3200117
[tags]: 
cerr is the C++ stream and stderr is the C file handle, both representing the standard error output. You write to them the same way you write to other streams and file handles: cerr I'm not sure what you mean by "recover" in this context, the output goes to standard error and that's it. The program's not meant to care about it after that. If you mean how to save it for later, from outside the program, see the next paragraph. By default, they'll go to your terminal but the output can be redirected elsewhere with something like: run_my_prog 2>error.out And, yes, the "screen" output is a stream (or file handle) but that's generally only because stdout/cout and stderr/cerr are connected to your "screen" by default. Redirection will affect this as in the following case where nothing will be written to your screen: run_my_prog >/dev/null 2>&1 (tricky things like writing directly to /dev/tty notwithstanding). That snippet will redirect both standard output and standard error to go to the bit bucket.
