[site]: stackoverflow
[post_id]: 1710981
[parent_id]: 1710932
[tags]: 
C# mutable collections do not support variance on the collection element type. Consider what would happen if you did this: IList kids = new List { new Egg("Shelly"), new Egg("Egbert"), new Egg("Yoko") }; var parents = kids as IList ; parents.Add(new Sloth("Sid")); // what would happen here? If the cast succeeded, the run-time type of parents would still be List which would not accept something that does not implement IChild , and would have to throw an exception. An acceptable conversion would be: using System.Linq; var parents = kids.Cast ().ToList(); which would create a copy of the original list, but with List as its run-time type. Generic variance is supported in C# 4.0, but mutable collections cannot safely be made variant. Only pure read-only interfaces like IEnumerable can safely be made covariant, and pure write-only interfaces (are there any?) can safely be made contravariant.
