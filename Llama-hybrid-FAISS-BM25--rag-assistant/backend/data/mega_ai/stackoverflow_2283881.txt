[site]: stackoverflow
[post_id]: 2283881
[parent_id]: 2171185
[tags]: 
I have been using CodeIgniter for over a year now. For the most part I really like it (I contribute to the forum and use it in every instance that I can) but I HATE the ARROGANCE of that statement in the manual: Destroys the global GET array. Since CodeIgniter does not utilize GET strings, there is no reason to allow it. The presumption that you will never need GET in a CodeIgniter application is asinine! Already in just a few days, I've had to deal with post back pages from PayPal and ClickBank (I'm sure there are a million others.) Guess what, they use GET!!! There are ways to stop this GET squashing, but they are things that tend to screw other things up. What you don't want to hear is that you have to recode all your views because you enabled querystrings and now your links are broken! Read the manual carefully on that option! One that I like (but didn't work because setting REQUEST_URI in config.php broke my site) is extending the Input class: class MY_Input extends CI_Input { function _sanitize_globals() { $this->allow_get_array = TRUE; parent::_sanitize_globals(); } } But the best no-nonsense way is to test with print_r($_SERVER) at the URL where you need the GET variables. See which URI Protocol option shows your GET variables and use it. In my case, I can see what I need in REQUEST_URI // defeat stupid CI GET squashing! parse_str($_SERVER['REQUEST_URI'], $_GET); This places your query string back into the $_GET super global for that page instance (You don't have to use $_GET, it can be any variable.) EDIT Since posting this I found that when using REQUEST_URI, you will lose your first query string array key unless you remove everything before the ?. For example, a URL like /controller/method?one=1&two=2 will populate the $_GET array in this example with array('method?one'=>1,'two'=>2). To get around this, I used the following code: parse_str(substr(strrchr($_SERVER['REQUEST_URI'], "?"), 1), $_GET); I suppose I should have provided an example, so here goes: class Pgate extends Controller { function postback() { parse_str(substr(strrchr($_SERVER['REQUEST_URI'], "?"), 1), $_GET); $receipt = $this->input->xss_clean($_GET['receipt']); } }
