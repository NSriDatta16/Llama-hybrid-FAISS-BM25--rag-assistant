[site]: stackoverflow
[post_id]: 5466562
[parent_id]: 5466523
[tags]: 
No. In fact all your local variables are initialized at the beginning of your function. Your example code will be executed like this: function xyz() { var h; var f; if (!z) { z+=5; h=15; } else { f=h+7; alert(f); } z++; return z; } You get NaN because in f=h+7 h is declared but it's value is undefined . There is a more elegant way: using objects. There are may ways you can create objects, I use the most compact method here: function MyObject() { this.z = 0; // it's safer to initialize all your variables (even if you dn't use the initial value) this.h = 0; this.f = 0; this.xyz = function () { if (!this.z) { this.z += 5; this.h = 15; } else { this.f = this.h + 7; alert(this.f); } this.z++; return this.z; } } var o = new MyObject(); o.xyz(); o.xyz(); There are many-many docs about OOP in JS if you are interested.
