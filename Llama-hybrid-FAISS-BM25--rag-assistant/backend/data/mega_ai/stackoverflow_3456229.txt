[site]: stackoverflow
[post_id]: 3456229
[parent_id]: 3339300
[tags]: 
If i'm going to built up some dynamic gui i'm always going to do so in code. But at a starting point i just start with the designer on a dummy form and style each control the way i (or better the customer) like(s). Afterwards i take a look into the Designer.cs file and copy the necessary property settings out of it into some factory function like private TextBox CreateTextBox(string name, /* maybe other parameters */) { var textBox = new TextBox(); textBox.Name = name; //Other settings from given parameters... //Further settings which are all the same for these kind of control textBox.KeyDown += (sender, e) => {}; return textBox; } So i make sure that every control feels and looks the same on my GUI. This will be done on each level within my surface (starting with the small controls like TextBox and goes up to the containers like GroupBox or TableLayoutPanel . In some cases this leads to a point where a factory function calls several other factory functions. If this is becoming true it's time to think about encapsulating these controls into a single UserControl , but as always it depends if this is needed or not. From my side i can only encourage you to move your code out of the designer into a self-written function. At the beginning it is (as always) more work, but afterwards it is easier to make even bigger changes to the layout.
