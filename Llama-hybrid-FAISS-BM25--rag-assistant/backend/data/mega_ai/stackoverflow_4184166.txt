[site]: stackoverflow
[post_id]: 4184166
[parent_id]: 4184147
[tags]: 
The SortedDictionary class does not directly support (fast) retrieval by index; it is internally implemented as a binary search tree. Consequently, every call to the LINQ Enumerable.ElementAt method you've got there creates a new enumerator that iterates each value of the sequence represented by the key-value pairs in the collection (sorted by key) from the beginning until it reaches the desired index. This means that the loop is going to have to pull something like 1 + 2 + 3 + ... + Count (roughly 2 trillion) elements before it completes, making it (atleast) quadratic in its time-complexity. Try this instead, which should run in roughly linear time: foreach(var myClass in dic.Values) Debug.WriteLine(myClass); If you really do want fast access by index (from the provided code, there doesn't seem to be any reason to indicate this), consider using a SortedList instead. There are downsides to this choice (slower non-appending inserts and deletes) that you should evaluate. I also notice that the loop condition is i rather than the more common i . This is either an off-by-one bug, or perhaps you intend to not consider the last value in the dictionary. In the latter case, you could maintain a local variable serving as a counter, or with LINQ: foreach(var myClass in dic.Values.Take(dic.Count - 1)) Debug.WriteLine(myClass);
