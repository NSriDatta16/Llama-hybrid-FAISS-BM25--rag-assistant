[site]: stackoverflow
[post_id]: 1254525
[parent_id]: 542934
[tags]: 
I remember reading somewhere that there are problems which are provably harder when solved in a purely functional manner, but I can't seem to find the reference. As noted above, the primary problem is array updates. While the compiler may use a mutable array under the hood in some conditions, it must be guaranteed that only one reference to the array exists in the entire program. Not only is this a hard mathematical fact, it is also a problem in practice, if you don't use impure constructs. On a more subjective note, stating that all Turing complete languages are equivalent is only true in a narrow mathematical sense. Paul Graham explores the issue in Beating the Averages in the section "The Blub Paradox." Formal results such as Turing-completeness may be provably correct, but they are not necessarily useful. The travelling salesman problem may be NP-complete, and yet salesman travel all the time. It seems they don't feel the need to follow an "optimal" path, so the theorem is irrelevant. NOTE: I am not trying to bash functional programming, since I really like it. It is just important to remember that it is not a panacea.
