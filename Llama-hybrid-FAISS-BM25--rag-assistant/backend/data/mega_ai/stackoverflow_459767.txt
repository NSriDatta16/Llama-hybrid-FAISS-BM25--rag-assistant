[site]: stackoverflow
[post_id]: 459767
[parent_id]: 458954
[tags]: 
Here is a way to do what you intend, using an and otherwise following your method two. The sample input file (data.xml): 001 002 005 The sample map file (map.xml): RZ TH SC The sample XSL stylesheet, explanation follows: What this does is: use document() to open map.xml , saving the resulting node-set to a variable save the default value for further reference prepare an to work against the "map" node set use not as a loop, but as a means to switch the execution context before calling the key() function - otherwise key() would work against the "data" document and return nothing find the corresponding node with the key() function, save it in a variable check the variable value on output - if it is empty, use the default value repeat (through ) The credit for the neat trick goes to Jeni Tennison , who described the technique on the XSL mailing list. Be sure to read the thread. Output of running the stylesheet against data.xml: RZ TH ?? All of this is XSLT 1.0. I'm convinced a better/more elegant version exists that makes use of the advantages XSLT 2.0 offers, but unfortunately I'm not overly familiar with XSLT 2.0. Maybe someone else posts a better solution. EDIT Through Dimitre Novatchev's hint in the comments, I was able to create a a considerably shorter and more preferable stylesheet: However, this one requires a slightly different map file to work in XSLT 1.0: RZ TH SC ??
