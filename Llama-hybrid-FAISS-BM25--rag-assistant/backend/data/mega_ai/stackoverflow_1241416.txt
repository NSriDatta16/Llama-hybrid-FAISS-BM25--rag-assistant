[site]: stackoverflow
[post_id]: 1241416
[parent_id]: 665860
[tags]: 
Shallow cloning a collection is easy, but if you want to deep clone, a library will probably do you better than hand coding it (since you want to clone the elements inside the collection as well). Just like this answer , I've used the Cloner library and specifically performance tested it against XStream (which can 'clone' by serializing then deserializing) and binary serialization. Though XStream is very fast at serializing to/from xml, Cloner is much faster at cloning: 0.0851 ms : xstream (clone by serializing/deserializing) 0.0223 ms : binary serialization (clone by serializing/deserializing) 0.0017 ms : cloner * average time to clone a simple object (two fields) and no default, public constructor. Run 10,000 times. In addition to being fast, here are more reasons to choose cloner: performs a deep clone of any object (even those you don't write yourself) you don't have to keep your clone() method up-to-date each time you add a field you can clone objects that don't have a default public constructor works with Spring (optimization) doesn't clone known immutable objects (like Integer, String, etc.) easy to use. Example: cloner.deepClone(anyObject);
