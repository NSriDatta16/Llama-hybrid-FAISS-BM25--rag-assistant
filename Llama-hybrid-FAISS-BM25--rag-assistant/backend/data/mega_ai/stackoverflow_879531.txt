[site]: stackoverflow
[post_id]: 879531
[parent_id]: 877524
[tags]: 
It seems like these are the issues in your code: You need to convert lat1 and lon1 to radians before calling your function. You may be scaling radialDistance incorrectly. Testing a floating-point number for equality is dangerous. Two numbers that are equal after exact arithmetic might not be exactly equal after floating-point arithmetic. Thus abs(x-y) is safer than x == y for testing two floating-point numbers x and y for equality. I think you want to convert lat and lon from radians to degrees. Here is my implementation of your code in Python: #!/usr/bin/env python from math import asin,cos,pi,sin rEarth = 6371.01 # Earth's average radius in km epsilon = 0.000001 # threshold for floating-point equality def deg2rad(angle): return angle*pi/180 def rad2deg(angle): return angle*180/pi def pointRadialDistance(lat1, lon1, bearing, distance): """ Return final coordinates (lat2,lon2) [in degrees] given initial coordinates (lat1,lon1) [in degrees] and a bearing [in degrees] and distance [in km] """ rlat1 = deg2rad(lat1) rlon1 = deg2rad(lon1) rbearing = deg2rad(bearing) rdistance = distance / rEarth # normalize linear distance to radian angle rlat = asin( sin(rlat1) * cos(rdistance) + cos(rlat1) * sin(rdistance) * cos(rbearing) ) if cos(rlat) == 0 or abs(cos(rlat)) Here is the output: lat1 lon1 bear dist lat2 lon2 0.00 0.00 0.0 1.0 0.01 0.00 0.00 0.00 90.0 1.0 0.00 -0.01 0.00 0.00 0.0 100.0 0.90 0.00 0.00 0.00 90.0 100.0 0.00 -0.90 49.26 -123.14 225.0 1.0 49.25 -123.13 49.26 -123.14 225.0 100.0 48.62 -122.18 49.26 -123.14 225.0 1000.0 42.55 -114.51
