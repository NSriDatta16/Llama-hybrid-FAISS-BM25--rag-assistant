[site]: stackoverflow
[post_id]: 5192331
[parent_id]: 
[tags]: 
Best practice with Math.Pow

I'm working on a n image processing library which extends OpenCV, HALCON, ... . The library must be with .NET Framework 3.5 and since my experiences with .NET are limited I would like to ask some questions regarding the performance. I have encountered a few specific things which I cannot explain to myself properly and would like you to ask a) why and b) what is the best practise to deal with the cases. My first question is about Math.pow. I already found some answers here on StackOverflow which explains it quite well (a) but not what to do about this(b). My benchmark Program looks like this Stopwatch watch = new Stopwatch(); // from the Diagnostics class watch.Start(); for (int i = 0; i The result was not very nice (~300ms on my computer) (I have run the test 10 times and calcuated the average value). My first idea was to check wether this is because it is a static function. So I implemented my own class class MyMath { public static double Pow (double x, double y) //Using some expensive functions to calculate the power { return Math.Exp(Math.Log(x) * y); } public static double PowLoop (double x, int y) // Using Loop { double res = x; for(int i = 1; i THe third thing I checked were if I would replace the Math.Pow(4,7) directly through 4*4*4*4*4*4*4. The results are (the average out of 10 test runs) 300 ms Math.Pow(4,7) 356 ms MyMath.Pow(4,7) //gives wrong rounded results 264 ms MyMath.PowLoop(4,7) 92 ms MyMath.Pow7(4) 16 ms 4*4*4*4*4*4*4 Now my situation now is basically like this: Don't use Math for Pow. My only problem is just that... do I really have to implement my own Math-class now? It seems somehow ineffective to implement an own class just for the power function. (Btw. PowLoop and Pow7 are even faster in the Release build by ~25% while Math.Pow is not). So my final questions are a) am I wrong if I wouldn't use Math.Pow at all (but for fractions maybe) (which makes me somehow sad). b) if you have code to optimize, are you really writing all such mathematical operations directly? c) is there maybe already a faster (open-source^^) library for mathematical operations d) the source of my question is basically: I have assumed that the .NET Framework itself already provides very optimized code / compile results for such basic operations - be it the Math-Class or handling arrays and I was a little surprised how much benefit I would gain by writing my own code. Are there some other, general "fields" or something else to look out in C# where I cannot trust C# directly.
