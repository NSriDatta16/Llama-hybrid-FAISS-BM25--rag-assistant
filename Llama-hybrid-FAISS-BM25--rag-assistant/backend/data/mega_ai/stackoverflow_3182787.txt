[site]: stackoverflow
[post_id]: 3182787
[parent_id]: 3182733
[tags]: 
I think you mean double pointer as in "pointer to a pointer" which is very efficient for inserting at the end of a singly linked list or a tree structure . The idea is that you don't need a special case or a "trailing pointer" to follow your traversal pointer once you find the end (a NULL pointer). Since you can just dereference your pointer to a pointer (it points to the last node's next pointer!) to insert. Something like this: T **p = &list_start; while (*p) { p = &(*p)->next; } *p = new T; instead of something like this: T *p = list_start; if (p == NULL) { list_start = new T; } else { while (p->next) { p = p->next; } p->next = new T; } NOTE: It is also useful for making efficient removal code for a singly linked list. At any point doing *p = (*p)->next will remove the node you are "looking at" (of course you still need to clean up the node's storage).
