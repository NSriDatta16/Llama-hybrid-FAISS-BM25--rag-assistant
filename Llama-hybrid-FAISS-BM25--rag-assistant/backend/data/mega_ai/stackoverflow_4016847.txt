[site]: stackoverflow
[post_id]: 4016847
[parent_id]: 4016416
[tags]: 
Short answer: You will need to create a new nethod with the new signature, and mark the current as obsolete. Longer answer What you want to avoid at all cost is a code break! Then, particularly in a company framework, you want to advertise that your method will no longer be supported, for example, but you do not want to be responsible for depending solutions to crash because of an architecture or design decision or your side, right? The ObsoleteAttribute class will do the trick for you. Once a class member marked as obsolete, a warning will be raised on the client-side, the ones who use your framework, to continue that way, or even one of your colleague under the same project. public class MyClass { [Obsolete("This method should no longer be used, please use MyNewMethod() instead.")] public void MyMethod(string name, long phoneNumber, long faxNumber) { } public void MyNewMethod(string name, long phoneNumber, long faxNumber, string email) { } } This will advertise that MyMethod is no longer supported throughout your code users. After a certain period of time, reasonable enough to allow everyone to change his/her code, you may tell this attribute to throw an error message when your obsolete method is still used in the code. public class MyClass { [Obsolete("This method should no longer be used, please use MyNewMethod() instead.", true)] public void MyMethod(string name, long phoneNumber, long faxNumber) { } public void MyNewMethod(string name, long phoneNumber, long faxNumber, string email) { } } By setting the second ObsoleteAttribute class constructor parameter to true , you tel the compiler to advertise the use of this method as an error. After some time only, you can completely remove your method from your code to clean it up a little. This is part of the refactoring methods encouraged by the Agile Software Development methodology. Does this help?
