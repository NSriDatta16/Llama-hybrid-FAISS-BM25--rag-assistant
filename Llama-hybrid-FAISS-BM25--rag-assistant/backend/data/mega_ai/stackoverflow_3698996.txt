[site]: stackoverflow
[post_id]: 3698996
[parent_id]: 3698594
[tags]: 
1 & 2 I think it wrong approach to eiher just blindly decide on a favourite pattern, or first code and then refactor to a known pattern. When you see a problem you will have to recognize the similarity to other problems that might be solved using known patterns. Patterns are not a cookbook for success; it's a rule of thumb. Reading about cases in a book about pattern may help you to recognise problems, saving you from a misstake or two. 3: What patterns that are predominant depends very much on the domain. State patterns, proxies and facades are very common when doing applications that communicates alot to other systems. GUI application have different requirements, etc. In my industry (Banking): I see a lot of the following GOF patterns: Factory Method, Singleton, Adapter, and Facade. Behaviour patterns are more or less killed by the predominant java-ee 14 layers of antipatterns that were mode du jour 10 years ago. 4: While refactoring - if a pattern will help you, use that. There isn't a class of patterns that are better suited when refactoring. 5: I think that the main indicator for a specific pattern is more related to the problem, and its similarity to other problems that have been solved by a particular pattern. Yes, If the code smells, that indicates that it might be needing a rewrite, and the problem should be analyzed again. While some problems are complicated, and can't be reduced, most can and a pattern may help to organize the problem a bit. However. As a consequence of the observation that complex problems require complex solutions, thick people tend to write complex code; What out for that. Eg. State-patterns (which I am fond of) can complicate things to unimaginable levels if they are overused. 6: My collegues seems to like me, so I am probably not overdoing anything. I am myself rather annoyed by the overuse of Factories and Factory Methods in code that is not likely to change or exist in different implementations at the same time - and if it eventually will be changed, it will require a rewrite anyway. That's just a waste of time, and complicates the code and delays bug hunting.
