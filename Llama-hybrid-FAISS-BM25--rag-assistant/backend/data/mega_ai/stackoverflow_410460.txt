[site]: stackoverflow
[post_id]: 410460
[parent_id]: 410437
[tags]: 
Stopwatch benchmarking is fine, provided you measure enough iterations to be meaningful. Typically, I require a total elapsed time of some number of single digit seconds. Otherwise, your results are easily significantly skewed by scheduling, and other O/S interruptions to your process. For this I use a little set of static methods I built a long time ago, which are based on System.currentTimeMillis() . For the profiling work I have used jProfiler for a number of years and have found it very good. I have recently looked over YourKit , which seems great from the WebSite, but I've not used it at all, personally. To answer the question on scheduling interruptions, I find that doing repeated runs until consistency is achieved/observed works in practice to weed out anomalous results from process scheduling. I also find that thread scheduling has no practical impact for runs of between 5 and 30 seconds. Lastly, after you pass the few seconds threshold scheduling has, in my experience, negligible impact on the results - I find that a 5 second run consistently averages out the same as a 5 minute run for time/iteration. You may also want to consider prerunning the tested code about 10,000 times to "warm up" the JIT, depending on the number of times you expect the tested code to run over time in real life.
