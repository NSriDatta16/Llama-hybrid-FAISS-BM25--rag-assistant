[site]: stackoverflow
[post_id]: 83715
[parent_id]: 78278
[tags]: 
It really depends on what you mean by "clean implementation". As in any other language, you can use Perl's object system with polymorphism to do this for you. However, since Perl has first class functions, this pattern isn't normally coded explicitly. Leon Timmermans' example of sort { lc($a) cmp lc($b) } @items demonstrates this quite elegantly. However, if you're looking for a "formal" implementation as you would do in C++, here's what it may look like using Perl+ Moose . This is just a translation of the C++ code from Wikipedia -- Strategy pattern , except I'm using Moose's support for delegation. package StrategyInterface; use Moose::Role; requires 'run'; package Context; use Moose; has 'strategy' => ( is => 'rw', isa => 'StrategyInterface', handles => [ 'run' ], ); package SomeStrategy; use Moose; with 'StrategyInterface'; sub run { warn "applying SomeStrategy!\n"; } package AnotherStrategy; use Moose; with 'StrategyInterface'; sub run { warn "applying AnotherStrategy!\n"; } ############### package main; my $contextOne = Context->new( strategy => SomeStrategy->new() ); my $contextTwo = Context->new( strategy => AnotherStrategy->new() ); $contextOne->run(); $contextTwo->run();
