[site]: stackoverflow
[post_id]: 5195131
[parent_id]: 5171521
[tags]: 
I think you are looking for ServiceLocator functionality, which I don't think you can achieve with spring.net by only changing the configuration. Note that the ServiceLocator pattern is generally discouraged from a dependency-injection point of view, because it makes your object aware of its di container. If you do need a ServiceLocator and don't mind tying your object to the Spring DI container, following could be a solution. I assume your current code is something like this: public class CommandManager { Dictionary { get; set; } // set using DI public Command GetBy(CommandType cmdKey) { return Dictionary[cmdKey]; } } Map the enum values to names of objects in you spring config by replacing your current Dictionary with a Dictionary . Then use the current spring context to get the desired object: using Spring.Context; using Spring.Context.Support; public class CommandManager { Dictionary { get; set; } // set using DI; values are object names public Command GetBy(CommandType cmdKey) { string objName = Dictionary[cmdKey]; IApplicationContext ctx = ContextRegistry.GetContext(); return (Command)ctx.GetObject(objName); } } Don't forget to set the scope of your command objects to prototype : Now every time CommandManager.GetBy(myKey) is called, a new instance is created.
