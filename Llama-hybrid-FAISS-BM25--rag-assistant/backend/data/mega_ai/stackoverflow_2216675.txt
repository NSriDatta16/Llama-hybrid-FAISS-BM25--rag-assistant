[site]: stackoverflow
[post_id]: 2216675
[parent_id]: 
[tags]: 
What is the convention for designating the primary relationship in a one-to-many relation between tables?

I understand how to design a database schema that has simple one-to-many relationships between its tables. I would like to know what the convention or best practice is for designating one particular relationship in that set as the primary one. For instance, one Person has many CreditCards. I know how to model that. How would I designate one of those cards as the primary for that person? Solutions I have come up with seem inelegant at best. I'll try to clarify my actual situation. (Unfortunately, the actual domain would just confuse things.) I have 2 tables each with a lot of columns, let's say Person and Task. I also have Project which has only a couple of properties. One Person has many Projects, but has a primary Project. One Project has many Tasks, but sometimes has one primary Task with alternates, and other times has no primary task and instead a sequence of Tasks. There are no Tasks that are not part of a Project, but it isn't strictly forbidden. PERSON (PERSON_ID, NAME, ...) TASK (TASK_ID, NAME, DESC, EST, ...) PROJECT (NAME, DESC) I can't seem to figure a way to model the primary Project, primary Task, and the Task sequence all at the same time without introducing either overcomplexity or pure evil. This is the best I've come up with so far: PERSON (PERSON_ID, NAME, ...) TASK (TASK_ID, NAME, DESC, EST, ...) PROJECT (PROJECT_ID, PERSON_FK, TASK_FK, INDEX, NAME, DESC) PERSON_PRIMARY_PROJECT (PERSON_FK, PROJECT_FK) PROJECT_PRIMARY_TASK (PROJECT_FK, TASK_FK) It just seems like too many tables for a simple concept. Here's a question I've found that deals with a very similar situation: Database Design: Circular dependency . Unfortunately, there didn't seem to be a consensus about how to handle the situation, and the "correct" answer was to disable the database consistency checking mechanism. Not cool.
