[site]: stackoverflow
[post_id]: 2122878
[parent_id]: 2121860
[tags]: 
This is an horrible design and I'm really not recommending it (you should just create another table) but it is possible. First, you'll need to use a byte[] attribute to hold a serialized version of the list of persons that will be stored in a BLOB in the database. So annotate it's getter with @Lob (I would make the getter and setter private to not expose them). Then, expose "fake" getter and setter to return or set a List from the byte[] . I'm using SerializationUtils from Commons Lang in the sample below (provide you own helper class if you don't want to import this library) to serialize/deserialize on the fly to/from the byte[] . Don't forget to mark the "fake" getter with @Transcient or Hibernate will try to create a field (and fail because it won't be able to determine the type for a List ). @Entity(name = "family") class Family implements Serializable { // ... private byte[] familyMembersAsByteArray; public Family() {} @Lob @Column(name = "members", length = Integer.MAX_VALUE - 1) private byte[] getFamilyMembersAsByteArray() { // not exposed return familyMembersAsByteArray; } private void setFamilyMembersAsByteArray((byte[] familyMembersAsByteArray() { // not exposed this.familyMembersAsByteArray = familyMembersAsByteArray; } @Transient public List getFamilyMembers() { return (List ) SerializationUtils.deserialize(familyMembersAsByteArray); } public void setParticipants(List familyMembers) { this.familyMembersAsByteArray = SerializationUtils.serialize((Serializable) familyMembers); } } Don't forget to make the Person class Serializable and to add a real serialVersionUID (I'm just showing a default here): public class Person implements Serializable { private static final long serialVersionUID = 1L; // ... private String firstName, lastName; private int age; } But, let me insist, this is an horrible design and it will be very fragile (changing Person might require to "migrate" the content of the BLOB to avoid deserialization issues and this will become painful. You should really reconsider this idea and use another table for the Person instead (or I don't get why you use a database).
