[site]: stackoverflow
[post_id]: 1308057
[parent_id]: 
[tags]: 
Is there any way to have persistent (regardless of how small) client-side storage via the web?

Okay, since none of you guys like my question, let me rephrase it. User logs into an HTML form. With JavaScript, their password is hashed locally (salted too). The server knows what the password + salt should be, user is already registered, blahblahblah. Now the user requests a page. The server sends a random ID to the user. When the user loads the next page, this random ID is appended to the key they have locally stored, it's hashed, and THAT is sent to the server. The server knows what they key is and the random ID, performs the same hash, and compares. If they match, congrats, it came from the proper computer. If not, then someone's been sniffing your TCP/IP traffic. All of this is obviously without SSL, otherwise this would be highly redundant. My question - HOW DO I STORE THE KEY ON A CLIENT PC? Original Post: Hello; I'm working on developing a PHP Content Management System, and came up with a secure login system. The only problem is that it would require some form of client-side storage (for a very small key, 40 characters in length) - otherwise the user would have to type in their password on every page load. Is there a way that, using either PHP or JavaScript, I can store a small 40-character string on a client's PC an retrieve it later? EDIT: COOKIES ARE NOT AN OPTION. This 40-character string can NOT leave the client's computer, and all set cookies are sent with each HTTP header. I REPEAT - COOKIES ARE INSECURE AND NOT A VIABLE OPTION FOR THIS. Let me rework it like this - client submits an HTTP form. With some scripting language (e.g. JavaScript), the password is stripped from the form, NOT sent to the server, encrypted, and is kept CLIENT-SIDE, which I can retrieve and verify (by hashing it with a key sent to the user from the server). This verification is sent to the server, never the key .
