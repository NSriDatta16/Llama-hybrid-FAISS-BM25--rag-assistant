[site]: stackoverflow
[post_id]: 2358065
[parent_id]: 2003127
[tags]: 
Why use DoDragDrop at all? As I was reading your description, using Mouse.Capture by itself seemed the obvious solution: Handle OnMouseLeftButtonDown on the tab and start capture Handle OnMouseMove on the tab and update the cursor based on hit testing Handle OnMouseLeftButtonUp on the tab, and stop the capture and make the appropriate change The reasons you might ever consider DoDragDrop over simple mouse capture are: Integration with Windows' OLE drag and drop so you can drag and drop between applications and technologies Modal nature of DoDragDrop call (which actually seems to be more of a disadvantage to me) Automated hit testing of targets Standardized "drop operation" API to allow unrelated applications to handle copy vs move, etc. You apparently don't need the OLE integration or multi-application support and you want to customize the hit testing, so it seems that DoDragDrop has no advantages over directly handling the mouse capture.
