[site]: stackoverflow
[post_id]: 1923151
[parent_id]: 
[tags]: 
Strategies for dealing with URIs when building an application that sits behind a reverse proxy

I'm building an application with a self-contained HTTP server which can be either accessed directly, or put behind a reverse proxy (like Apache mod_proxy ). So, let's say my application is running on port 8080 and you set up your Apache like this: ProxyPass /myapp http://localhost:8080 ProxyPassReverse /myapp http://localhost:8080 This will cause HTTP requests coming into the main Apache server that go to /myapp/* to be proxied to my application. If a request comes in like GET /myapp/bar , my application will see GET /bar . This is as it should be. The problem that arises is in generating URIs that have to be translated from my application's URI-space in order to work correctly via the proxy (i.e. prepending /myapp/ ). The ProxyPassReverse directive takes care of handling this for URIs in HTTP headers (redirects and so forth.) But that doesn't handle URIs in the HTML generated by my application, or in static files and templates. I'm aware of filters like mod_proxy_html , but this is a non-standard Apache module, and in any case, such filters may not be available for other front-end web servers which are capable of acting as a reverse proxy. So I've come up with a few possible strategies: Require an environment variable be set somewhere that contains the proxy path, and prepend this to all generated URIs. This seems inelegant; it breaks the encapsulation provided by the reverse proxy. Put the proxy path in a configuration file for my application. Same objection as above. Use only relative URIs in my application. This can get somewhat tricky; I would have to calculate the path difference between the current resource and where the link is going and add the appropriate number of ../ 'es. Seems messy. Another problem is that some things must generate absolute URIs, like RSS feeds and generated emails. Use some hacky Javascript on the front-end to mungle URIs in the document text. This seems like a really horrible idea from an interoperability standpoint. Use a singe URI-generating function throughout my code, and require "static" files like Javascript, CSS, etc. to be run through my templating system. This is the idea I'm leaning towards now. This must be a fairly common problem. How have you approached it in the past? What has worked and what has made things more difficult?
