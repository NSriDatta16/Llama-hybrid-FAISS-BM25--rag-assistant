[site]: stackoverflow
[post_id]: 5682113
[parent_id]: 
[tags]: 
Java threading problem using ConcurrentLinkedQueue

I have a problem with the following code fragment. It's intended to handle events (provided via calls on processEvent method) which are added to an event queue (ConcurrentLinkedQueue). Events are added to an event queue and processed periodically in the run method. All is fine almost always. But sometimes after a call on the processEvent method, when an event is added to the queue, the run part fails to see there is a new event. Any idea on what is wrong? Besides the obvious mistake in using a String constant as a lock? import java.util.concurrent.ConcurrentLinkedQueue; public class MyCommunicator implements Runnable { private ConcurrentLinkedQueue eventQueue = null; private boolean stopped = false; private String lock = ""; private Thread thread = null; public MyCommunicator() { eventQueue = new ConcurrentLinkedQueue (); } public void start() { thread = new Thread(this, "MyCommunicatorThread"); thread.start(); } public void stop() { stopped = true; synchronized (lock) { lock.notifyAll(); } eventQueue.clear(); } public void run() { while (!stopped) { try { MyEvent event = null; while (!stopped && ((event = eventQueue.peek()) != null)) { sendEvent(event); eventQueue.poll(); } if (!stopped) { synchronized (lock) { lock.wait(10000L); } } } catch (Exception e) { } } } /** * START EVENT JOB - ADD A NEW EVENT TO BE PROCESSED */ public void processEvent(MyEvent event) { eventQueue.offer(event); synchronized (lock) { lock.notifyAll(); } } /** * END EVENT JOB */ private void sendEvent(MyEvent event) { // do send event job } }
