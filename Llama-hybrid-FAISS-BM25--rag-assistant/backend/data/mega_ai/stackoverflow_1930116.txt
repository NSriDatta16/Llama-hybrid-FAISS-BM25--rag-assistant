[site]: stackoverflow
[post_id]: 1930116
[parent_id]: 1930081
[tags]: 
Using STL, especially when using vectors and other nice utility classes, is probably always going to be slower than hand-rolled C code using malloc and inlined functions. There is no real way around it. That being said, performance is not everything - not nearly so. Using STL provides many other benefits, including: Better maintainability: It's more expressive, so you get more done in less code, in a more elegant, clean fashion. Safety: Using vectors is much, much safer than dealing with pointers and malloc directly. Flexibility: By using vectors with functors, you'd have a much easier time if you needed to grow this collection on the fly, for example. Productivity: By making the code cleaner, STL promotes reuse much more effectively than lots of individual C routines to do similar functions. You're really trying to argue about working at a higher level of abstraction - there are tradeoffs here, typically in terms of performance, but there is a reason nearly all development has gone to higher abstraction levels; the gains are far more valuable than the sacrifices in most cases.
