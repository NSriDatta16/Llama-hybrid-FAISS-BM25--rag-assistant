[site]: stackoverflow
[post_id]: 2546777
[parent_id]: 2526714
[tags]: 
I ran into the same problems yuk did trying to modify the figure from SEQLOGO , so here's my attempt at my own version to mimic its appearance. It's a function seqlogo_new.m that you give two arguments: your sequence and an optional minimum bit value. It requires an image file ACGT.jpg that can be found at this link . Here's the code for the function: function hFigure = seqlogo_new(S,minBits) %# SEQLOGO_NEW Displays sequence logos for DNA. %# HFIGURE = SEQLOGO_NEW(SEQS,MINBITS) displays the %# sequence logo for a set of aligned sequences SEQS, %# showing only those columns containing at least one %# nucleotide with a minimum bit value MINBITS. The %# MINBITS parameter is optional. SEQLOGO_NEW returns %# a handle to the rendered figure HFIGURE. %# %# SEQLOGO_NEW calls SEQLOGO to perform some of the %# computations, so to use this function you will need %# access to the Bioinformatics Toolbox. %# %# See also seqlogo. %# Author: Ken Eaton %# Version: MATLAB R2009a %# Last modified: 3/30/10 %#--------------------------------------------------------- %# Get the weight matrix from SEQLOGO: W = seqlogo(S,'DisplayLogo',false); bitValues = W{2}; %# Select columns with a minimum bit value: if nargin > 1 highBitCols = any(bitValues > minBits,1); %# Plot only high-bit columns bitValues = bitValues(:,highBitCols); else highBitCols = true(1,size(bitValues,2)); %# Plot all columns end %# Sort the bit value data: [bitValues,charIndex] = sort(bitValues,'descend'); %# Sort the columns nSequence = size(bitValues,2); %# Number of sequences maxBits = ceil(max(bitValues(:))); %# Upper plot limit %# Break 4-letter image into a 1-by-4 cell array of images: imgACGT = imread('ACGT.jpg'); %# Image of 4 letters [nRows,nCols,nPages] = size(imgACGT); %# Raw image size letterIndex = round(linspace(1,nCols+1,5)); %# Indices of letter tile edges letterImages = {imgACGT(:,letterIndex(1):letterIndex(2)-1,:), ... imgACGT(:,letterIndex(2):letterIndex(3)-1,:), ... imgACGT(:,letterIndex(3):letterIndex(4)-1,:), ... imgACGT(:,letterIndex(4):letterIndex(5)-1,:)}; %# Create the image texture map: blankImage = repmat(uint8(255),[nRows round(nCols/4) 3]); %# White image fullImage = repmat({blankImage},4,2*nSequence-1); %# Cell array of images fullImage(:,1:2:end) = letterImages(charIndex); %# Add letter images fullImage = cat(1,cat(2,fullImage{1,:}),... %# Collapse cell array cat(2,fullImage{2,:}),... %# to one 3-D image cat(2,fullImage{3,:}),... cat(2,fullImage{4,:})); %# Initialize coordinates for the texture-mapped surface: X = [(1:nSequence)-0.375; (1:nSequence)+0.375]; X = repmat(X(:)',5,1); %'# Surface x coordinates Y = [zeros(1,nSequence); cumsum(flipud(bitValues))]; Y = kron(flipud(Y),[1 1]); %# Surface y coordinates Z = zeros(5,2*nSequence); %# Surface z coordinates %# Render the figure: figureSize = [602 402]; %# Figure size screenSize = get(0,'ScreenSize'); %# Screen size offset = (screenSize(3:4)-figureSize)/2; %# Offset to center figure hFigure = figure('Units','pixels',... 'Position',[offset figureSize],... 'Color',[1 1 1],... 'Name','Sequence Logo',... 'NumberTitle','off'); axes('Parent',hFigure,... 'Units','pixels',... 'Position',[60 100 450 245],... 'FontWeight','bold',... 'LineWidth',3,... 'TickDir','out',... 'XLim',[0.5 nSequence+0.5],... 'XTick',1:nSequence,... 'XTickLabel',num2str(find(highBitCols)'),... %' 'YLim',[-0.03 maxBits],... 'YTick',0:maxBits); xlabel('Sequence Position'); ylabel('Bits'); surface(X,Y,Z,fullImage,... 'FaceColor','texturemap',... 'EdgeColor','none'); view(2); end And here are a few examples of its usage: S = ['ATTATAGCAAACTA'; ... %# Sample data 'AACATGCCAAAGTA'; ... 'ATCATGCAAAAGGA']; seqlogo_new(S); %# A normal plot similar to SEQLOGO seqlogo_new(S,1); %# Plot only columns with bits > 1
