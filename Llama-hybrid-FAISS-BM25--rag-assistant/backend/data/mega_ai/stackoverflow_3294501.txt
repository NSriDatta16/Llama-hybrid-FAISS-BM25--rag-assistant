[site]: stackoverflow
[post_id]: 3294501
[parent_id]: 3294370
[tags]: 
Categories would not help anyway because replacing the real touchesBegan method on UIButton would be pretty bad... you can't call [super] from a category. Another solution would be to inject a method into those class definitions with something like: Method origMethod = class_getClassMethod([UIButton class], @selector(touchesBegan)); Method newMethod = class_getClassMethod([TemplateClass class], @selector(replacementTouchesBegan)); method_exchangeImplementations(origMethod, newMethod); But that's pretty fiddly. Although if it's really where you want to go, it's worth looking into... What I would do is make a MovableView class that inherits from UIView, and simply add whatever you want movable as a subview of that view (which I think might be slightly different than what quixoto was saying, my apologies if not). It gets to respond to touches first and passes along whatever it doesn't need to the next responder... no need to build up a special class with a single subview. Then in IB you can just place these movable views wherever and put things inside of them. In general compositional techniques like this are very handy across UIKit rather than modifying core classes.
