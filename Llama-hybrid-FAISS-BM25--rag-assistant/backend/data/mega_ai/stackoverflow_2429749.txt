[site]: stackoverflow
[post_id]: 2429749
[parent_id]: 2429692
[tags]: 
Here's a case where I used zip() to useful effect, in a Python class for comparing version numbers: class Version(object): # ... snip ... def get_tuple(self): return (self.major, self.minor, self.revision) def compare(self, other): def comp(a, b): if a == '*' or b == '*': return 0 elif a == b: return 0 elif a 0: return False return False def __gt__(self, other): for x in self.compare(other): if x > 0: return True elif x I think zip() , coupled with all() and any() , makes the comparison operator implementations particularly clear and elegant. Sure, it could have been done without zip() , but then the same could be said about practically any language feature.
