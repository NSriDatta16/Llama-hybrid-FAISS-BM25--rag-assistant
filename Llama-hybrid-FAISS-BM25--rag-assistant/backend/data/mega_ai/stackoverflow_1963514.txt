[site]: stackoverflow
[post_id]: 1963514
[parent_id]: 1963507
[tags]: 
See Time Complexity . The python dict is a hashmap, its worst case is therefore O(n) if the hash function is bad and results in a lot of collisions. However that is a very rare case where every item added has the same hash and so is added to the same chain which for a major Python implementation would be extremely unlikely. The average time complexity is of course O(1). The best method would be to check and take a look at the hashs of the objects you are using. The CPython Dict uses int PyObject_Hash (PyObject *o) which is the equivalent of hash(o) . After a quick check, I have not yet managed to find two tuples that hash to the same value, which would indicate that the lookup is O(1) l = [] for x in range(0, 50): for y in range(0, 50): if hash((x,y)) in l: print "Fail: ", (x,y) l.append(hash((x,y))) print "Test Finished" CodePad (Available for 24 hours)
