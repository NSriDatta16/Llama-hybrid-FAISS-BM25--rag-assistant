[site]: stackoverflow
[post_id]: 5430353
[parent_id]: 5429963
[tags]: 
You have to know that usually, if you want to implement a WPF application the "correct" way, your XAMLs will be bound to a ViewModel, keeping the properties. I know it seems kinda heavy for the small amount of property you have to keep here, but believe me, it's awesome when you have bigger UIs. You can also look around about Triggers which can help you validate something without adding a class (but would be VERY heavy if you have many fields to validate) I'd advise you to check out this article which really helped me learn more about validation in WPF, if you haven't already read it: http://www.codeproject.com/KB/WPF/wpfvalidation.aspx EDIT For the default value: Your Project data class has to implement the interface "INotifyPropertyChanged" This allows to fire an event each time the text is changed, and therefore update the binding. Once you have done that (I'd encourage you to look around using Google, unfortunately I don't have any specific article to suggest, but you'll find a nice one for sure), just initialize your string in the constructor, something like that: public ProjectData() { opcServerAddress = "Hello!"; } Then, thanks to the binding, the textbox will have the default value you just specified, and each time you modify it, opcServerAddress value will be updated following the value in the text box. This will especially allow you to use this string in the ProjectData class (commonly called ViewModel, if you have time, check out the MVVM model: Need good MVVM tutorial for WPF MVVM: Tutorial from start to finish? it is very useful, and it is considered to be the "proper" way to work in WPF) Have fun! :)
