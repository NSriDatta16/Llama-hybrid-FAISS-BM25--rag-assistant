[site]: stackoverflow
[post_id]: 4654054
[parent_id]: 4617775
[tags]: 
Start by pointing wget/curl/lwp/etc. at http://velecloudserver/fortress/dragnetwebservice.asmx?WSDL and see if you get a WSDL file back. If you do, then compare it to the four types listed in the SOAP::Lite POD. Your Request example looks like the Docment/Literal form, so you might end up writing something like this: use SOAP::Lite; my $soap = SOAP::Lite->new( file => 'http://velecloudserver/fortress/dragnetwebservice.asmx?WSDL'); $soap->on_action( sub { "urn:dragnetservice#LoginPlainText" }); $soap->autotype(0); $soap->default_ns('urn:LoginPlainText'); my $som = $soap->call("LoginPlainText", SOAP::Data->name('strLogin')->value( 'admin' ), SOAP::Data->name('strPassword')->value('Adm1234'), ); die $som->fault->{ faultstring } if ($som->fault); print $som->result, "\n"; If you don't get WSDL back, I'd try replacing the constructor call with: my $soap = SOAP::Lite->new( proxy => 'http://velecloudserver/fortress/dragnetwebservice.asmx'); The last time I worked with SOAP::Lite, I wrote a short program similar to the one above, and I ran it under the debugger. Before I executed the $soap->call() line, I peeked at the guts of the $soap object and looked at the request payload to see if the XML matched some working XML that I had by using the soapUI.org java client. I had to read the POD a couple of times, and I dug into the source to figure our how some of the methods like default_ns() affected the generated XML. Once I did that, it all made a lot more sense. Note: SOAP::Lite likes to die() when it fails. Wrap your calls in an eval{} for production use.
