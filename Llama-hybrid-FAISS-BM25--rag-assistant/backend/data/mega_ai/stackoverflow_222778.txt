[site]: stackoverflow
[post_id]: 222778
[parent_id]: 
[tags]: 
Adding Boost makes Debug build depend on "non-D" MSVC runtime DLLs

I have an annoying problem which I might be able to somehow circumvent, but on the other hand would much rather be on top of it and understand what exactly is going on, since it looks like this stuff is really here to stay. Here's the story: I have a simple OpenGL app which works fine: never a major problem in compiling, linking, or running it. Now I decided to try to move some of the more intensive calculations into a worker thread, in order to possibly make the GUI even more responsive — using Boost.Thread, of course. In short, if I add the following fragment in the beginning of my .cpp file: #include void dummyThreadFun() { while (1); } boost::thread p(dummyThreadFun); , then I start getting "This application has failed to start because MSVCP90.dll was not found" when trying to launch the Debug build. (Release mode works ok.) Now looking at the executable using the Dependency Walker, who also does not find this DLL (which is expected I guess), I could see that we are looking for it in order to be able to call the following functions: ?max@?$numeric_limits@K@std@@SAKXZ ?max@?$numeric_limits@_J@std@@SA_JXZ ?min@?$numeric_limits@K@std@@SAKXZ ?min@?$numeric_limits@_J@std@@SA_JXZ Next, I tried to convert every instance of min and max to use macros instead, but probably couldn't find all references to them, as this did not help. (I'm using some external libraries for which I don't have the source code available. But even if I could do this — I don't think it's the right way really.) So, my questions — I guess — are: Why do we look for a non-debug DLL even though working with the debug build? What is the correct way to fix the problem? Or even a quick-and-dirty one? I had this first in a pretty much vanilla installation of Visual Studio 2008. Then tried installing the Feature Pack and SP1, but they didn't help either. Of course also tried to Rebuild several times. I am using prebuilt binaries for Boost (v1.36.0). This is not the first time I use Boost in this project, but it may be the first time that I use a part that is based on a separate source. Disabling incremental linking doesn't help. The fact that the program is OpenGL doesn't seem to be relevant either — I got a similar issue when adding the same three lines of code into a simple console program (but there it was complaining about MSVCR90.dll and _mkdir , and when I replaced the latter with boost::create_directory , the problem went away!!). And it's really just removing or adding those three lines that makes the program run ok, or not run at all, respectively. I can't say I understand Side-by-Side (don't even know if this is related but that's what I assume for now), and to be honest, I am not super-interested either — as long as I can just build, debug and deploy my app... Edit 1: While trying to build a stripped-down example that anyway reproduces the problem, I have discovered that the issue has to do with the Spread Toolkit , the use of which is a factor common to all my programs having this problem. (However, I never had this before starting to link in the Boost stuff.) I have now come up with a minimal program that lets me reproduce the issue. It consists of two compilation units, A.cpp and B.cpp. A.cpp: #include "sp.h" int main(int argc, char* argv[]) { mailbox mbox = -1; SP_join(mbox, "foo"); return 0; } B.cpp: #include Some observations: If I comment out the line SP_join of A.cpp, the problem goes away. If I comment out the single line of B.cpp, the problem goes away. If I move or copy B.cpp's single line to the beginning or end of A.cpp, the problem goes away. (In scenarios 2 and 3, the program crashes when calling SP_join , but that's just because the mailbox is not valid... this has nothing to do with the issue at hand.) In addition, Spread's core library is linked in, and that's surely part of the answer to my question #1, since there's no debug build of that lib in my system. Currently, I'm trying to come up with something that'd make it possible to reproduce the issue in another environment. (Even though I will be quite surprised if it actually can be repeated outside my premises...) Edit 2: Ok, so here we now have a package using which I was able to reproduce the issue on an almost vanilla installation of WinXP32 + VS2008 + Boost 1.36.0 (still pre-built binaries from BoostPro Computing ). The culprit is surely the Spread lib, my build of which somehow requires a rather archaic version of STLPort for MSVC 6 ! Nevertheless, I still find the symptoms relatively amusing. Also, it would be nice to hear if you can actually reproduce the issue — including scenarios 1-3 above. The package is quite small, and it should contain all the necessary pieces. As it turns out, the issue did not really have anything to do with Boost.Thread specifically, as this example now uses the Boost Filesystem library. Additionally, it now complains about MSVCR90.dll, not P as previously.
