[site]: stackoverflow
[post_id]: 2394978
[parent_id]: 
[tags]: 
matching keys in association lists in emacs lisp

I'm using folding-mode in emacs and was trying to make a function to insert the appropriate folding marker (start or end) depending on mode. So far I have (defun insert-folding-mode-mark () (interactive) (let ((st "##{{{") (en "##}}}") string-to-insert) (save-excursion (setq string-to-insert (let ((here (point)) sp ep) (setq sp (search-backward st)) (goto-char here) (setq ep (search-backward en)) (if ( This inserts "##{{{" at (point) unless "##{{{" precedes it, in which case it inserts "##}}}". I'd like to replace the first (let) assignment with something that determines the start and end markers with something like (let* ((match (assoc (intern mode-name) folding-mode-marks-alist)) (st (nth 1 match)) (en (nth 2 match))) [is (intern) meant to be called in this way?] A truncated version of my folding-mode-marks-alist looks something like ((ess-mode "##{{{" "##}}}") (tex-mode "%{{{" "%}}}") (python-mode "# {{{" "# }}}") (emacs-lisp-mode ";;{{{" ";;}}}") (TeX-mode "%{{{" "%}}}") (LaTeX-mode "%{{{" "%}}}")) while the mode-name returned from various modes are {"Emacs-Lisp", "ESS[S]", "PDFLaTeX", "Python", ...}. Seems like I might want to do some partial matching with strings using (downcase), (concat x "-mode"), and so on, but was wondering if there was an idiomatic way in emacs lisp to do this sort of matching with keys of an alist, or do I just have to have a separate block of code by which I extract the keys with (mapcar 'car folding-mode-marks-alist) and convert each symbol to string (how?) to do the matching? Thanks much!
