[site]: stackoverflow
[post_id]: 5185502
[parent_id]: 
[tags]: 
Template Factory Pattern in C++

I am trying to make a factory that will have the type passed in, rather then having it hard coded for types. However, when I attempt to add the type to the factory inside of the types .cpp file, I will get a linker error. For example, he is a linker error I am currently getting. 1>RandomClass.obj : error LNK2019: unresolved external symbol "public: short __thiscall TemplatedFactory::AddType(char const *)" (??$AddType@VRandomClass@@@TemplatedFactory@@QAEFPBD@Z) referenced in function "void _ cdecl `dynamic initializer for 'private: static short RandomClass::ID''(void)" (?? _E?ID@RandomClass@@0FA@@YAXXZ) I tried to make the test case as small as possible, though it does cross five files, they are very small BaseClass.h : http://codepad.org/MhZMw7t0 #pragma once class BaseClass{ }; RandomClass.h : http://codepad.org/xoObzP8G #pragma once #include "BaseClass.h" class RandomClass : public BaseClass { private: static short ID; public: RandomClass(); virtual ~RandomClass(); }; TemplatedFactory.h : http://codepad.org/qkcTBw24 #pragma once #include using std::map; #include "BaseClass.h" template BaseClass* createType() { return new Type; } class TemplatedFactory { private: typedef BaseClass* (*ComponentFactoryFuncPtr)(); typedef map map_type; map_type m_Map; public: static TemplatedFactory &GetInstance(); template short AddType(const char* componentName); }; RandomClass.cpp : http://codepad.org/ALoF3Ysb #include "RandomClass.h" #include "TemplatedFactory.h" short RandomClass::ID = TemplatedFactory::GetInstance().AddType ("RandomClass"); RandomClass::RandomClass() { } RandomClass::~RandomClass() { } TemplatedFactory.cpp : http://codepad.org/iqgNqa6H #include "TemplatedFactory.h" TemplatedFactory &TemplatedFactory::GetInstance() { static TemplatedFactory instance; return instance; } template short TemplatedFactory::AddType(const char* componentName) { ComponentFactoryFuncPtr function = &createType ; m_Map.insert(std::make_pair(componentName, function)); return 0; } I can remove the the linker error if I move short RandomClass::ID = TemplatedFactory::GetInstance().AddType ("RandomClass"); from RandomClass.cpp to TemplatedFactory.cpp, however, I would like to have the declaration in RandomClass.cpp. Does anyone know of a way to fix this or perhaps a better design (without the use of external libraries).
