[site]: stackoverflow
[post_id]: 374498
[parent_id]: 374464
[tags]: 
I helped develop one for a system that used C# and Remoting, the client (a service or GUI) could send a message complete with some custom data and the recipient(s) would receive it, either when they next connected or instantly). They could then process the message (by taking ownerships of it in the case of the load-balancing services). It was also used to update GUIs when long running processes had finished. The messaging system itself had configurable pipelines that processed each message, here are some examples of a few of the pipelines we developed: Storage (created/ saved the message to the database) Routing (worked out where the message needs to be sent) Security (worked out if the client was allowed to receive it) Delete (works out if the message needs to be deleted from the system, which means clients need to be notified and the message removed from it's cache and flagged in the DB). TakeOwnership (deals with making sure only one client can modify the state of a message at a time as only messages that are owned can be changed) So in answer to your question, messaging systems are a brilliant means of sending information about when you don't know or care the who client is.
