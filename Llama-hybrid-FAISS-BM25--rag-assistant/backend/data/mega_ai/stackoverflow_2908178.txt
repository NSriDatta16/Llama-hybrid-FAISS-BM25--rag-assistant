[site]: stackoverflow
[post_id]: 2908178
[parent_id]: 2905081
[tags]: 
There are quite a few points that you can use for comparing the two (or three). First, here are some notable points that I can think of: Syntax Syntactically, F# and OCaml are based on the functional programming tradition (space separated and more lightweight), while Scala is based on the object-oriented style (although Scala makes it more lightweight). Integrating OO and FP Both F# and Scala very smoothly integrate OO with FP (because there is no contradiction between these two!!) You can declare classes to hold immutable data (functional aspect) and provide members related to working with the data, you can also use interfaces for abstraction (object-oriented aspects). I'm not as familiar with OCaml , but I would think that it puts more emphasis on the OO side (compared to F#) Programming style in F# I think that the usual programming style used in F# (if you don't need to write .NET library and don't have other limitations) is probably more functional and you'd use OO features only when you need to. This means that you group functionality using functions, modules and algebraic data types. Programming style in Scala In Scala, the default programming style is more object-oriented (in the organization), however you still (probably) write functional programs, because the "standard" approach is to write code that avoids mutation.
