[site]: stackoverflow
[post_id]: 901207
[parent_id]: 
[tags]: 
jQuery: swap images - almost done

Overview The user can drag an image from "#products" to "#container". They will fall into the normal flow of elements. All images inside of "#container" can be dragged around in side that container in a grid. In the "#container", If an image is dropped where another image is, they swap places. Problem When I start to move the images around in "#container" a problem arise. Next time I drag an image from "#products" to "#container" the image will fall into the normal flow of elements WITHOUT being aware the elements has been moved around. That result in the image may be lying on top of another image thus covering it. It's probably something to do with position:relative stays the same when moving elements. Your help will be much appreciated. I plan to release it as an jQuery plugin. Anyone helping with making it work will be credited if they want to. Code Drag drop 1 $(document).ready(function() { // -------------- // - Image swap - // -------------- // The user can drag an image from "#products" to "#container". They will fall into the normal flow of elements. // All images inside of "#container" can be dragged around in side that container in a grid. // If an image is dropped where another image are, they swap places. // Setting global variables. var dragged = null; // Make a clone of a image from the "#products" container. $(".product").draggable({ helper: 'clone' }); // Make "#container" a droppable and only accept images with ".product" class. $("#container").droppable({ // Only accept images with ".product" class. accept: '.product', drop: function(event, ui) { // When clone of image from "#products" gets dropped on "#container" it is added to "#container". // After that we change the class name to "item". $(this).append(ui.draggable.clone().addClass("item").removeClass("product")); // Images with class "item" in "#container" are made draggable. $(".item").draggable({ // Prevent draggables to go outside "#container". containment: 'parent', // Make sure that draggables only can be in 9 positions in a grid. grid: [150,150], start:function(event, ui) { // When image is dragged, make sure it is always on top. $(this).css({'z-index' : '100'}); // Get position where the dragging got started. dragged = $(this).position(); // Below line can be uncommeted if you use Firebug and Firefox so you can trace variable "dragged". //console.debug("Dragged: ",dragged); }, stop: function(event, ui) { // Revert to original layer position. $(this).css({'z-index' : '10'}); } }); // Inside the "#container" we make all images droppables. $(".item").droppable({ drop: function(event, ui) { // If a clone dragged from "#products" over an existing image in "#container" do not do below. if(dragged!=null) { // Get position of the image where another image from "#container" was dropped on. var dropped_on = $(this).position(); var drop_top = $(this).css("top"); var drop_left = $(this).css("left"); // All images has the css property position:relative. Therefore it is needed to calculate the // where to move the dropped on image relative to it's current position. var newTop = dragged.top - (dropped_on.top - parseInt(drop_top)); var newLeft = dragged.left - (dropped_on.left - parseInt(drop_left)); // Only move dropped on image since dragged image has been dropped in the right position. $(this).css({'top' : newTop, 'left' : newLeft}); // Below lines can be uncommeted if you use Firebug and Firefox so you can trace variables. // console.debug("newTop: ",newTop," newLeft: ",newTop); // console.debug("drop_top: ",drop_top," drop_left: ",drop_left); } } }); } }); }); body { } #container { width:450px; height:450px; border:1px solid #000; } .item { width:150px; height:150px; z-index:10; cursor:move; } #products { position:absolute; width:450px; height:450px; top:9px; left:550px; border:1px solid #000; } .product { } #testarea { position:absolute; width:450px; height:450px; top:9px; left:1100px; border:1px solid #000; }
