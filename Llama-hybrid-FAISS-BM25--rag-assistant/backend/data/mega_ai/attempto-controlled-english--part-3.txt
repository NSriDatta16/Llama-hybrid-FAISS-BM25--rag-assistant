 To negate a complete statement one uses sentence negation: It is false that a customer inserts a card. These forms of negation are logical negations, i.e. they state that something is provably not the case. Negation as failure states that a state of affairs cannot be proved, i.e. there is no information whether the state of affairs is the case or not. It is not provable that a customer inserts a card. Queries ACE supports two forms of queries: yes/no-queries and wh-queries. Yes/no-queries ask for the existence or non-existence of a specified situation. If we specified: A customer inserts a card. then we can ask: Does a customer insert a card? to get a positive answer. Note that interrogative sentences always end with a question mark. With the help of wh-queries, i.e. queries with query words, we can interrogate a text for details of the specified situation. If we specified: A trusted customer inserts a valid card manually in the morning in a bank. we can ask for each element of the sentence with the exception of the verb. Who inserts a card? Which customer inserts a card? What does a customer insert? How does a customer insert a card? When does a customer enter a card? Where does a customer enter a card? Queries can also be constructed by a sequence of declarative sentences followed by one interrogative sentence, for example: There is a customer and there is a card that the customer enters. Does a customer enter a card? Commands ACE also supports commands. Some examples: John, go to the bank! John and Mary, wait! Every dog, bark! A brother of John, give a book to Mary! A command always consists of a noun phrase (the addressee), followed by a comma, followed by an uncoordinated verb phrase. Furthermore, a command has to end with an exclamation mark. Constraining ambiguity To constrain the ambiguity of full natural language ACE employs three simple means: Some ambiguous constructs are not part of the language; unambiguous alternatives are available in their place. All remaining ambiguous constructs are interpreted deterministically on the basis of a small number of interpretation rules. Users can either accept the assigned interpretation, or they must rephrase the input to obtain another one. Avoidance of ambiguity In natural language, relative sentences combined with coordinations can introduce ambiguity: A customer inserts a card that is valid and opens an account. In ACE the sentence has the unequivocal meaning that the customer opens an account, as reflected by the paraphrase: A card is valid. A customer inserts the card. The customer opens an account. To express the alternative—though not very realistic—meaning that the card opens an account, the relative pronoun that must be repeated, thus yielding a coordination of relative sentences: A customer inserts a card that is valid and that opens an account. This sentence is unambiguously equivalent in meaning to the paraphrase: A card is valid. The card opens an account. A customer inserts the card. Interpretation rules Not all ambiguities can be safely removed from ACE without rendering it artificial. To deterministically interpret otherwise syntactically correct ACE sentences we use a small set of interpretation rules. For example, if we write: A customer inserts a card with a code. then with a code attaches to the verb inserts, but not to a card. However, this is probably not what we meant to say. To express that the code is associated with the card we can employ the interpretation rule that a relative sentence always modifies the immediately preceding noun phrase, and rephrase the input as: A customer inserts a card that carries a code. yielding the paraphrase: A card carries a code. A customer inserts the card. or—to specify that the customer inserts a card and a code—as: A customer inserts a card and a code. Anaphoric references Usually ACE texts consist of more than one sentence: A customer enters a card and a code. If a code is valid then SimpleMat accepts a card. To ex