[site]: stackoverflow
[post_id]: 5032917
[parent_id]: 5032474
[tags]: 
for the c/c++ family: the 'cost' of the call is not important. if it needs to be fast, you just have to make sure the compiler is able to inline it. that means that: the body must be visible to the compiler the body is indeed small enough to be considered an inline candidate. the method does not require dynamic dispatch there are a few ways to break this default ability. for example: huge instruction count already in the callsite. even with early inlining, the compiler may pop a trivial function out of line (even though it could generate more instructions/slower execution). early inlining is the compiler's ability to inline a function early on, when it sees the call costs more than the inline. recursion the inline keyword is more or less useless in this era, regarding its original intent. however, many compilers offer a means to restore the meaning, with a compiler specific directive. using this directive (correctly) helps considerably. learning how to use it correctly takes time. if in doubt, omit the directive and leave it up to the compiler. assuming you are using a modern compiler, there is no excuse to avoid the function, unless you're also willing to go down to assembly for this particular program. as it stands, and if performance is crucial, you really have two choices: 1) learn to write well organized programs for speed. downside: longer compile times 2) maintain a poorly written program i prefer 1. any day. (yes, i have spent a lot of time writing performance critical programs)
