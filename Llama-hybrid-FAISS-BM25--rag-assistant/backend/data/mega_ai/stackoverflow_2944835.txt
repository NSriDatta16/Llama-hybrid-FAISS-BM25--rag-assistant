[site]: stackoverflow
[post_id]: 2944835
[parent_id]: 2928908
[tags]: 
Frameworks generally aims to better code organization, reusability of components, testability, and to generalize, application quality & maintenability. This can not be the more performance oriented choice. I got sites running with symfony that are pretty fast, the benchmarks comes close to the original static HTML template. Performance issue could happen more quickly when using a framework (and an ORM like Doctrine) than when putting spagetti code inside an HTML static page. That's sound normal to me : more treatements, more verifications, mode dependencies, more code to parse, etc. If you mant to make application faster, they're is basically to ways : Get faster hardware, it costs, but can be worth it if this cost is under programmers & engineers cost, which is generally the case. Optimize software, the bigger step to this way is to use caching on multiple level : opcode, database query results, any heavy objects, html rendering (partial and whole). With a well designed MVC application you can manage performance as an isolated issue, using profiler to views application's bottlenecks and treat them one by one (once again, optimization can be on hardware side too). The choice of a PHP framework should not be made on various performance tests seens on blogs arcticles, they can not be objective. From my point of view, all major MVC frameworks can be used to build performant websites, it's all matter of optimization. If you and your team better known Symfony, CakePHP or Zend, then go for it. You'll handle performance optimization once your application is functionnal, there are solutions for any frameworks. If team experience is too wide and anyone has its own preference, then I would personnaly suggest Symfony, as its caching capabilities comes built-in with the framework (I don't know for others)
