[site]: stackoverflow
[post_id]: 2996926
[parent_id]: 2996727
[tags]: 
I think you do not need to debug FluentNhibernate. The issue could be in you conventions. As I understand you have an object Region and it is referenced to other object Workflow. So set a convention for all reference link e.q.: private Action GetConventions() { return c => { c.Add (); c.Add (); c.Add (); c.Add (); c.Add (); }; } Use this private method into your implementation of the public AutoPersistenceModel Generate() And the reference convention should be something like: using FluentNHibernate.Conventions; using FluentNHibernate.Conventions.Instances; public class ReferenceConvention : IReferenceConvention { public void Apply(IManyToOneInstance instance) { instance.Column(Inflector.Net.Inflector.Camelize(instance.Property.Name) + "Id"); } } Also check that you override the mappings, if is the case. I have an unittest witch export the mappings. Unfortunately bellow is an old version: [Test, Ignore("Run this test only if you want to see mappings")] public void ShouldExportMappings() { const string mappingPath = @"mappings"; if (!Directory.Exists(mappingPath)) Directory.CreateDirectory(mappingPath); var sessionFactory = Fluently.Configure() .Database(SQLiteConfiguration.Standard.InMemory) .Mappings(m => { m.FluentMappings .AddFromAssemblyOf () .ExportTo(mappingPath); m.AutoMappings .Add(new AutoPersistenceModelGenerator().Generate()) .ExportTo(mappingPath); }).BuildSessionFactory(); } And finally if you really want to debug, copy the FluentNHibernate sources from their storage and include it into your sln. But this is not good idea as the problem is in your code rather in their. This will not help, you only will loose time.
