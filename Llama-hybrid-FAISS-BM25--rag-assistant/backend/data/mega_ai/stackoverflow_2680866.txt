[site]: stackoverflow
[post_id]: 2680866
[parent_id]: 2680635
[tags]: 
A TStringList. Pros: has extended functionality, allowing to dynamically grow, sort, save, load, search, etc. Cons: on large amount of access to the items by the index, Strings[Index] is introducing sensible performance lost (few percents), comparing to access to an array, memory overhead for each item cell. A Dynamic Array of strings. Pros: combines ability to dynamically grow, as a TStrings, with the fastest access by the index, minimal memory usage from others. Cons: limited standard "string list" functionality. A Linked List of strings (singly linked). Pros: the linear speed of addition of an item to the list end. Cons: slowest access by the index and searching, limited standard "string list" functionality, memory overhead for "next item" pointer, spead overhead for each item memory allocation. TList . As above. TStringBuilder. I does not have a good idea, how to use TStringBuilder as a storage for multiple strings. Actually, there are much more approaches: linked list of dynamic arrays hash tables databases binary trees etc The best approach will depend on the task . Which is best for small lists (under 10 items)? Anyone, may be even static array with total items count variable. Which is best for large lists (over 1000 items)? Which is best for huge lists (over 1,000,000 items)? For large lists I will choose: - dynamic array, if I need a lot of access by the index or search for specific item - hash table, if I need to search by the key - linked list of dynamic arrays, if I need many item appends and no access by the index Which is best to minimize memory use? dynamic array will eat less memory. But the question is not about overhead, but about on which number of items this overhead become sensible. And then how to properly handle this number of items. Which is best to minimize loading time to add extra items on the end? dynamic array may dynamically grow, but on really large number of items, memory manager may not found a continous memory area. While linked list will work until there is a memory for at least a cell, but for cost of memory allocation for each item. The mixed approach - linked list of dynamic arrays should work. Which is best to minimize access time for accessing the entire list from first to last? dynamic array. On this basis (or any others), which data structure would be preferable? For which task ?
