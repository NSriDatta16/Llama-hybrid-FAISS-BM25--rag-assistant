[site]: stackoverflow
[post_id]: 2699841
[parent_id]: 2699774
[tags]: 
It sounds like you're asking about a general philosophy of Object-Oriented Programming. In general, you'll find that modelling real-world objects to classes doesn't always make the best sense for your code. One guideline that's helped me figure this stuff out is a dialogue between two anthropomorphic classes (if someone knows the original source of this quote, I'd appreciate a link!): Class A says to Class B: "Give me the value of x." Class B: "Why do you want the value of x?" Class A: "So I can flange it." Class B: "Ask me, and I'll flange it for you." This helps drive home the point that a class is meant to encapsulate the data and perform manipulations on it. In general, this is a parable that's helped me organize my code better. Another thing you may want to look at are some common Object-Oriented Design Patterns . Something like game dice might make more sense as a Singleton , since you don't need more than one instance of it. If you'd like a good introduction to Design Patterns, I'd recommend picking up the excellent Head First Design Patterns book.
