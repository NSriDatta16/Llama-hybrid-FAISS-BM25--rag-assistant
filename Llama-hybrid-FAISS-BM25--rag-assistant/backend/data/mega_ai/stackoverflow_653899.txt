[site]: stackoverflow
[post_id]: 653899
[parent_id]: 653868
[tags]: 
If all your UI elements are using the same Brush , why not just modify the Brush to reduce the brightness? For example: public void ReduceBrightness() { var brush = Application.Resources("Brush") as SolidColorBrush; var color = brush.Color; color.R -= 10; color.G -= 10; color.B -= 10; brush.Color = color; } Edit after your comment on the Brush being frozen: If you're using one of the built-in brushes (via the Brushes class) then it will be frozen. Instead of using one of them, declare your own Brush without freezing it: White Edit after Robert's comment on Application-level resources: Robert is right. Resources added at the Application level are automatically frozen if they are freezable. Even if you explicitly ask for them not to be frozen: There are two ways around this that I can see: As Robert suggested, put the resource at a lower level in the resource tree. For example, in a Window 's Resources collection. This makes it harder to share though. Put the resource in a wrapper that is not freezable. As an example of #2 consider the following. App.xaml : Window1.xaml : Here is some text in the foreground color. Dim Window1.xaml.cs : public partial class Window1 : Window { public Window1() { InitializeComponent(); _button.Click += _button_Click; } private void _button_Click(object sender, RoutedEventArgs e) { var brush = (FindResource("ForegroundBrushContainer") as FrameworkElement).Tag as SolidColorBrush; var color = brush.Color; color.R -= 10; color.G -= 10; color.B -= 10; brush.Color = color; } } It's not as pretty, but it's the best I can come up with right now.
