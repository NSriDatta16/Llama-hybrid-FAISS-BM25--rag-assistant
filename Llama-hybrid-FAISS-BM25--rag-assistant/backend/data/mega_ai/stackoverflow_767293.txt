[site]: stackoverflow
[post_id]: 767293
[parent_id]: 766627
[tags]: 
Consider looking at NSURLConnection and its delegate methods. You can use these to check on the status of a download. @interface ... NSURLConnection *connectionInProgress; NSData *googleRequestResponseData; NSURL *googleURL; ... @implementation ... - (void) setUpRequest { googleURL = [[NSURL URLWithString:@"http://www.google.com/"] retain]; googleRequestResponseData = [[NSMutableData data] retain]; NSURLRequest *request = [NSURLRequest requestWithURL:url cachePolicy:NSURLRequestReturnCacheDataElseLoad timeoutInterval:30.0]; connectionInProgress = [[NSURLConnection alloc] initWithRequest:request delegate:self startImmediately:YES]; } #pragma mark NSURLConnection delegate methods - (void) connection:(NSURLConnection *)connection didReceiveData:(NSData *)data { [googleRequestResponseData appendData:data]; } - (void) connectionDidFinishLoading:(NSURLConnection *)connection { [web_screen loadData:googleRequestResponseData MIMEType:@"application/octet-stream" textEncodingName:@"utf-8" baseURL:googleURL]; NSString *js_result = [web_screen stringByEvaluatingJavaScriptFromString:@"document.getElementsByTagName('input')[1].value='test';"]; NSLog (js_result); [googleURL release]; [googleRequestResponseData release]; [connectionInProgress release]; connectionInProgress = nil; } - (void) connection:(NSURLConnection *)connection didFailWithError:(NSError *)error { NSLog (@"Connection failed to load data from Google!"); [googleURL release]; [googleRequestResponseData release]; [connectionInProgress release]; connectionInProgress = nil; } Alternatively, check out Ben Copsey's ASIHTTPRequest wrapper, which includes a simplified approach to asynchronous downloads (see ASINetworkQueue , specifically). You can use ASINetworkQueue to run a method of your choice (to run the Javascript code, for example), once the request download is complete.
