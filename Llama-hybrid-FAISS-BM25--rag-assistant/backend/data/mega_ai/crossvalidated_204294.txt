[site]: crossvalidated
[post_id]: 204294
[parent_id]: 18576
[tags]: 
I've changed the answer to this as neither @DWin's or @Zach's answers fully answers how to model time-varying coefficients. I've recently wrote a post about this. Here's the gist of it. The core concept in the Cox regression model is the hazard function , $h(t)$. It is defined as: $$h(t) = \frac{f(t)}{S(t)}$$ Where the $f(t)$ is the risk of having an event at any given time while the $S(t)$ is the probability of surviving that fare. The number is thus a fraction with a theoretical range from $0$ to $\infty$. An interesting feature of the hazard function is that we can include observations at other points in time than $time_0$, e.g. if "Peter" is operated with a hip arthroplasty in England, arrives after 1 year to Sweden, he has been alive for 1 year when we choose to include him. Note that any patient that would have died prior to that would never have come to our attention and we can therefore not include Peter in the $S(t)$ when looking at the hazard prior to 1 year. After 1 year we may include Peter. When allowing subjects entering at other time points we must change the Surv from Surv(time, status) to Surv(start_time, end_time, status) . While the end_time is strongly correlated with the outcome the start_time is now available as an interaction term (just as hinted in the original suggestions). In a regular setting the start_time is 0 except for a few subjects that appear later but is we split each observation into several periods we suddenly have plenty start times that are non-zero. The only difference is that each observation occurs multiple times where all but the last observation has the option of a non-censored outcome. Time splitting in practice I've just published on CRAN the Greg package that makes this time-split easy. First we start with some theoretical observations: library(Greg) test_data We can show this graphically with * being an indicator of event: If we apply the timeSplitter as following: library(dplyr) split_data % select(id, event, time, age, date) %>% timeSplitter(by = 2, # The time that we want to split by event_var = "event", time_var = "time", event_start_status = "alive", time_related_vars = c("age", "date")) We get the following: As you can see each object has been split into multiple events where the last time span contains the actual event status. This allows us to now build models that have simple : interaction terms (do not use the * as this expands to time + var + time:var and we're not interested in the time per se). There is no need for using the I() function although if you want to check nonlinearity with time I often create a separate time-interaction variable that I add a spline to and then display using rms::contrast . Anyway, your regression call should now look like this: coxp(Surv(start_time, end_time, event) ~ var1 + var2 + var2:time, data = time_split_data) Using the survival package's tt function There is also a way to model time dependent coefficients directly in the survival package using the tt function. Prof. Therneau provides a thorough introduction to the subject in his vignette . Unfortunately in large datasets this is hard to do due to memory limitations. It seems that the tt function splits the time into very fine pieces generating in the process a huge matrix.
