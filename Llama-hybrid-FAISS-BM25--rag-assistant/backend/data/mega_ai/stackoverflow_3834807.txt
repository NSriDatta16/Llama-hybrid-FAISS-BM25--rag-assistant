[site]: stackoverflow
[post_id]: 3834807
[parent_id]: 
[tags]: 
Modifying attributes on the join model with accepts_nested_attributes_for

Simply, a Contact can have various associated Time Windows, which may or may not be Active as a Schedule. To wit: Models class Contact :schedules accepts_nested_attributes_for :schedules, :allow_destroy => true end class TimeWindow :schedules end class Schedule View This submits something like this: Parameters: { "commit" => "Update", "contact" => { "group_ids" => ["2"], "enabled" => "1", "schedules_attributes" => [ { "time_window_id"=>"1", "id"=>"46"}, { "time_window_id" => "2", "id" => "42", "active" => "on" }, { "time_window_id" => "3", "id" => "43"}, { "time_window_id" => "4", "id" => "44", "active" => "on"}], "last_name" => ... The update action in the controller is basically stock, except to handle another instance of another related model which I coded using the "Handling Multiple Models" example from the Advanced Rails Recipes book. According to this API doc , I think the above ought to work. However, nothing about the Schedules is getting updated. This shows up in the server log: [4;35;1mSchedule Update (0.2ms)[0m [0mUPDATE `schedules` SET `updated_at` = '2010-09-30 20:39:49', `active` = 0 WHERE `id` = 42[0m [4;36;1mSchedule Update (0.1ms)[0m [0;1mUPDATE `schedules` SET `updated_at` = '2010-09-30 20:39:49', `active` = 0 WHERE `id` = 44[0m (NetBeans is giving me those stupid "[0m"'s in the output. I don't know what's wrong there.) The SQL shows that the "active" boolean field is getting set to 0 where checked. How do I get this to correctly set the active bit? As a followup, how would I organize this to get rid of the Schedule "connection" at all? I'm thinking I need to submit a :_delete with the Schedule from the form, but how would I do that conditionally when a checkbox is involved? Thanks for any help you can provide. Rails is turning out to be a vast subject for me, and I want to do it "right." I'm really close here, but there's got to be a way to make this -- not just correct -- but elegant. The view code just feels way too cumbersome to be proper Rails. ;-)
