[site]: stackoverflow
[post_id]: 3689458
[parent_id]: 3689435
[tags]: 
You want extern. When you extern a variable name you're making a "promise" that the variable will exist when you link. You want to give it storage in a .c file but extern it in a header. That way it's just instantiated once, in the .c's object file. You don't want to have two different .o's using the same name to refer to different locations in memory. (As noted above it's nearly always bad form to require something like this for a library.) So in a common header you'd have common.h extern Foo bar; Then in prog.c Foo bar; And when you included common.h in log.c you could access bar from prog.c Note that static is very different in C than in Java. In Java it's global to an Class and available for anyone, even without an instance of the class. In C static means that variable is not visible outside of the compilation unit.
