[site]: stackoverflow
[post_id]: 434112
[parent_id]: 432922
[tags]: 
I think the best ideas invented since the 1980's will be the ones that we're not aware of. Either because they are so small and ubiquitous as to be unnoticable, or because their popularity hasn't really taken off. One example of the former is Clicking and Dragging to select a portion of text . I believe this first appeared on the Macintosh in 1984. Before that you had seperate buttons for picking the beginning of a selection, and the end of a selection. Quite onerous. An example of the latter is (may be) Visual Programming languages . I'm not talking like hypercard, I mean like Max/MSP, Prograph, Quartz Composer, yahoo pipes, etc. At the moment they are really niche, but how I see it, is that there's really nothing stopping them from being just as expressive and powerful as a standard programming language, except for mindshare. Visual programming languages effectively enforce the functional programming paradigm of referential transparency. This is a really useful property for code to have. The way they enforce this isn't artificial either- it's simply by virtue of the metaphore they use. VPL's make programming accessible to people who would not otherwise be able to program, such as people with language difficulties, like dyslexia, or even just laymen that need to whip up a simple time-saver. Professional programmmers may scoff at this, but personally, I think it would be great if programming became a really ubiquitous skill, like literacy. As it stands though, VPL's are reall a niche interest, and haven't really got particularly mainstream. What we should do differently all computer science majors should be required to double major- coupling the CS major with one of the humanities . Painting, literature, design, psychology, history, english, whatever. A lot of the problem is that the industry is populated with people that have a really narrow and unimaginative understanding of the world, and therefore can't begin to imagine a computer working any significantly differently than it already does. (if it helps, you can imagine that I'm talking about someone other than you, the person reading this.) Mathematics is great, but in the end it's just a tool for achieving. we need experts who understand the nature of creativity, who also understand technology . But even if we have them, there needs to be an environment where there's a possibility that doing something new would be worth the risk. It's 100 times more likely that anything truly new gets rejected out of hand, rather viciously . ( the newton is an example of this). so we need a much higher tolerance for failure . We should not be afraid to try an idea which has failed in the past. We should not fully reject our own failures- and we should learn to recognize when we have failed. We should not see failure as a bad thing, and so we shouldn't lie to ourselves or to others about it. We should just get used to it, because it is just about the only constant in this ever changing industry. Post mortems are useful in this regard. One of the more interesting things, about smalltalk, I think, was not the language itself, but the process that was used to arrive at the design of smalltalk. The iterative design process, going through many many revisions- But also very carefully and critically identifying the flaws of the existing system, and finding solutions in the next one. The more perspectives, and the broader the perspectives we have on the situation, the better we can judge where the mistakes and problems are. So don't just study computer science. Study as many other academic subjects as you can get yourself to be interested in.
