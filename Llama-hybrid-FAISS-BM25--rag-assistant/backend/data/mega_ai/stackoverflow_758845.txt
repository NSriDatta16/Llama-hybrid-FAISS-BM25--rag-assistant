[site]: stackoverflow
[post_id]: 758845
[parent_id]: 758473
[tags]: 
I think this depends on whether the framework genuinely solves a "difficult problem" for you, and solves it easily. People always find this a terribly controversial thing to say for some reason, but most of the frameworks I've considered using I've ending up ditching halfway through because it's just easier to Write Some Code to do exactly what I want. Later, when I have a problem in my code, I can just go to where the problem is and add a line of code to fix it, rather than wading through pages of documentation to find the magic configuration parameter. If I have a problem with (insert favourite framework), I generally find I'm p*ssing around for ages when the underlying problem that the framework is supposed to be solving was never that complicated in the first place. My favourite useless frameworks are ones that require lots of configuration and clumsy boilerplate code to do basic tasks such as sending some bytes down a socket or stuffing some parameters into a prepared statement and firing it off to a database. Another of my favourites are the whole raft of "XML technologies", especially ones that are "pluggable" or "configurable". (Why do I want a "pluggable parser framework" rather than just one parser that always works...?) Call me Victor Meldrew, but it's amazing how people can turn a 10-minute regular expression problem into a 2-day how-do-you-make-this-framework-with-X-in-the-title-do-it problem. Now that said, there are people who absolutely thrive on Spring, Hibernate, JSF, MVCJammer, Joomajamaventilate, things with 'X' in them etc etc. So clearly for some people in some situations, they're a miracle, and I'm just missing out in life. Possibly it depends on whether you or your organisation primarily have "configuration" and "plugging things together" expertese or "programming" expertese? I suppose I have more of the latter.
