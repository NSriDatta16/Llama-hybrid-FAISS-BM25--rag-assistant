[site]: stackoverflow
[post_id]: 1623825
[parent_id]: 1621744
[tags]: 
I began on QTMovieLayer, but being less powerfull (of course) than QTMovieView it opened another box of issues. The solution was to use NSAnimation on the QTMovieView. I have a NSAnimation class looking somewhat like this: AlphaAnimation.h #import NSString * const AAFadeIn; NSString * const AAFadeOut; @interface AlphaAnimation : NSAnimation { NSView *animatedObject; NSString *effect; } - (id)initWithDuration:(NSTimeInterval)duration effect:(NSString *)effect object:(NSView *)object; @end AlphaAnimation.m #import "AlphaAnimation.h" NSString * const AAFadeIn = @"AAFadeIn"; NSString * const AAFadeOut = @"AAFadeOut"; @implementation AlphaAnimation - (id)initWithDuration:(NSTimeInterval)aDuration effect:(NSString *)anEffect object:(NSView *)anObject { self = [super initWithDuration:aDuration animationCurve:0]; if (self) { animatedObject = anObject; effect = anEffect; } return self; } - (void)setCurrentProgress:(NSAnimationProgress)progress { if ([effect isEqual:AAFadeIn]) [animatedObject setAlphaValue:progress]; else [animatedObject setAlphaValue:1 - progress]; } @end Which can then be used like this: animation = [[AlphaAnimation alloc] initWithDuration:0.5 effect:AAFadeIn object:movieView]; [animation setAnimationBlockingMode:NSAnimationNonblocking]; [animation startAnimation]; If your QTMovieViews are in full screen it isn't very smooth, though.
