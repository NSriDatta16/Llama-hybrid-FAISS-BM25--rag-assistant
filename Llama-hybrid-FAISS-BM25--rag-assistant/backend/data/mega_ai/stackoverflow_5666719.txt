[site]: stackoverflow
[post_id]: 5666719
[parent_id]: 
[tags]: 
Special case of reaching definitions data flow problem

The problem of reaching definitions is one of the most fundamental problem in data flow analysis. Given a control flow graph which contains variable definitions and uses, the problem results into calculating which variable definitions may reach a specific use. For example consider the flow graph: ____________ 1:| x The use of variable x in block 3 may be reached from either definitions in block 1 or block 2. The algorithm for computing which definitions may reach a use is classic data flow problem. Using the notation from the dragon compiler book (new edition) the reaching definitions data flow problem is as follows: Domain : Sets of definitions (e.g. {x Direction : Forward Transfer function : fb(x) = gen(B) U (x - kill(B)) where gen(B) is the set of definitions that block B generates and kill(B) the set of definitions that block B kills Boundary : OUT[ENTRY] = {} i.e. no definitions flow for entry to a function Meet operator: U(union), i.e. the definitions that flow to a block is the union of definitions out of predecessor blocks. Equations : OUT[B] = fb(IN[B]), IN[B] = U(P in pred)OUT[P] Initialize: OUT[B] = {} However, not all definitions are the same. For example the definition in block 1 may never reach the use in block 3 as it may be killed by the definition in block 2. On the other hand, the definition in block 2, if executed, will preserve its value until its usage in block 3. I want to find the reaching definitions of a usage for which there is no killing definitions on any path from the definition to the usage. My question is whether a similar data flow problem exists (maybe propagation etc.). How it can be solved in terms of data flow analysis. I do have one possible solution to the problem but I would not want to reinvent the wheel if a solution already exists.
