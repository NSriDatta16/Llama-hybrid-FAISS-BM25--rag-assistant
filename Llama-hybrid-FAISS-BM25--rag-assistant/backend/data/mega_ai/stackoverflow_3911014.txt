[site]: stackoverflow
[post_id]: 3911014
[parent_id]: 
[tags]: 
Eclipse RCP p2 update not working

I have a personal Eclipse RCP product ( com.example.product ) based on one personal feature ( com.example.feature ) which is composed of one personal plugin ( com.example.plugin ) and a bunch of others from Eclipse Helios (3.6). I want the app to check for updates and update itself if necessary from a p2 site. I want it to be headless, ie the user does not interact in the update process, but may see progress in a dialog. I based my implementation for the updates on the RCP Mail application . I changed the P2Util.checkForUpdates method a bit to include some logging so I can see what, if anything, is going wrong there: static IStatus checkForUpdates(IProvisioningAgent agent, IProgressMonitor monitor) throws OperationCanceledException, InvocationTargetException { ProvisioningSession session = new ProvisioningSession(agent); UpdateOperation operation = new UpdateOperation(session); SubMonitor sub = SubMonitor.convert(monitor, "Checking for application updates...", 200); IStatus status = operation.resolveModal(sub.newChild(100)); if (status.getCode() == UpdateOperation.STATUS_NOTHING_TO_UPDATE) { return status; } if (status.getSeverity() == IStatus.CANCEL) throw new OperationCanceledException(); if (status.getSeverity() != IStatus.ERROR) { try { logger.info( "Status is " + status ); Update[] updates = operation.getPossibleUpdates(); for( Update u : updates){ logger.info( "Update is " + u ); } ProvisioningJob job = operation.getProvisioningJob(null); if( job == null ){ logger.error( "Provisioning Job is null" ); } status = job.runModal(sub.newChild(100)); if (status.getSeverity() == IStatus.CANCEL) { throw new OperationCanceledException(); } } catch ( Exception e ){ logger.error( "Exception while trying to get updates", e); } } return status; } I have a p2.inf file in my feature at the same level as my example.product file. It contains: org.eclipse.equinox.p2.touchpoint.eclipse.addRepository": instructions.configure=\ org.eclipse.equinox.p2.touchpoint.eclipse.addRepository(type:0,location:file${#58}/C${#58}/workspace/updatesite/);\ org.eclipse.equinox.p2.touchpoint.eclipse.addRepository(type:1,location:file${#58}/C${#58}/workspace/updatesite/); I build the product with plugin, feature and product IDs set to 1.0.0. I can export and run my product from eclipse using the product export wizard. I tick generate metadata repository when I do this. I create my update site using the Create an Update Site Project option in the Feature Manfiest Editor. I add my `com.example.feature' and build it. Just to see if it works I try browsing it via eclipse IDE Install New Software option and I can see the feature there. I build the update site with all 3 IDs changed to 1.0.1. When I start the app it says there are no updates to install, there are no errors in the logs. I don't know why it doesn't update from the update site, but things that have crossed my mind are: 1) I may need more info in the p2.inf file, but I'm not sure what, maybe something like namespace, name and range, but I can't find a good practical example. 2) In the checkForUpdates method I may need to do something with profiles to change what installable units are being updated. Again, I only found comments hinting at this and not any example code that shows how. Any hints or ideas are much appreciated here, this is eating a lot of time.
