[site]: crossvalidated
[post_id]: 291336
[parent_id]: 291328
[tags]: 
The algorithm you have described at the bottom is basically one "chaining" iteration of MICE [1], so it is less crazy than you'd guess... From your description, you have a lot of columns and they are of mixed type (categorical, numeric). Now, if the proportion of missing values is large per column, then it is close to hopeless to let an algorithm solve that problem. On the other hand, if the amout of missing values is typically small per column (5% or so), then you can give a try to MICE with e.g. random forest as model technique. Why? Because it can deal with categorical (not dummy coded!) and numeric fiels. Furthermore, they work quite well without tedious hyperparameter tuning. Then, depending on the purpose of the analysis, you can use multiple imputed versions of the data set, run your analysis on each of them and then pool the results of the analyses (this is the tricky part of multiple imputation). Let me illustrate with my own R version [2] of imputation by random forests, a fast alternative to [3] based on the very efficient ranger package [4]: # install.packages(devtools) library(devtools) install_github("mayer79/missRanger") library(missRanger) # Generate data with missing values in all columns set.seed(39) head(irisWithNA 6 5.4 3.9 1.7 NA setosa # Impute missing values head(irisImputed Just run with different seeds to get realisticly varying versions of the same data. The "predictive mean matching" aspect is crucial if you are doing multiple imputation. [1] Van Buuren, S., Groothuis-Oudshoorn, K. (2011). mice: Multivariate Imputation by Chained Equations in R. Journal of Statistical Software, 45(3), 1-67. http://www.jstatsoft.org/v45/i03/ [2] https://github.com/mayer79/missRanger [3] Stekhoven, D.J. and Buehlmann, P. (2012), 'MissForest - nonparametric missing value imputation for mixed-type data', Bioinformatics, 28(1) 2012, 112-118, doi: 10.1093/bioinformatics/btr597 [4] Wright, M. N. & Ziegler, A. (2016). ranger: A Fast Implementation of Random Forests for High Dimensional Data in C++ and R. Journal of Statistical Software, in press. http://arxiv.org/abs/1508.04409 .
