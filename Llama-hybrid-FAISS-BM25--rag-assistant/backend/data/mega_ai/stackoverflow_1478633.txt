[site]: stackoverflow
[post_id]: 1478633
[parent_id]: 1476128
[tags]: 
for /f %%i in ('dir /b Client\Javascript\*_min.js') do ( Iterate over every file in the Client\Javascript folder that match "*_min.js". The dir command and for /f` are totally unneeded here, though and only complicate things, especially when file names contain spaces, commas and the like. A more robust and simpler alternative would be for %%i in (Client\Javascript\*_min.js) do ( But that's just beside the point. People tend to write unelegant batch files sometimes, ignoring the pitfalls and common errors. That's just one example of that. set n=%%~ni Creates a variable n , containing the file name (without any directory information or extension) of the file currently processed. We remember that the for statement iterates over every file it finds. With this line starts what it does with those files. set t=!n:~0,-4! Creates a second variable, t , containing everything but the last four characters of the file name. This essentially strips away the "_min" cp Client\Javascript\%%i build\Client\Javascript\!t!.js Finally, this copies the original file to the directory build\Client\Javascript with the new name, just constructed. So a file like Client\Javascript\foo_min.js will be copied to Client\Javascript\foo.js . The !t! here is just a delayed-evaluated environment variable. More on that below. Here it should suffice that it just inserts the contents of said variable at that point in the line. Again, bad practice here that will break in numerous interesting ways: cp is not a command on Windows so this batch will assume cygwin, GNUWin32 or similar things installed. I tend to avoid having too many unneeded dependencies and stick to what Windows provides; in this case the copy command. Two bytes won't kill anyone here, I think. No quotes are around either argument. Leads to interesting results when spaces start appearing in the file name. Not good, either. As for why delayed expansion was used ( ! instead of % surrounding the variables: The for command consists of everything in the block delimited by parentheses here as well. The entire block is parsed at once and normal variable expansion takes place when a line/command is parsed. That would mean that every variable in the block would be evaluated before the loop even runs, leaving just the following: for /f %%i in ('dir /b Client\Javascript\*_min.js') do ( set n=%%~ni set t= cp Client\Javascript\%%i build\Client\Javascript\.js ) which is certainly not what you want in this case. Delayed expansion is always needed when creating and using variables in a loop such as this. A workaround not needing delayed expansion would be to offload the loop interior into a subroutine: for /f %%i in ('dir /b Client\Javascript\*_min.js') do call :process "%%i" goto :eof :process set n=%~n1 set t=%n:0,-4% copy "Client\Javascript\%~1" "build\Client\Javascript\%t%.js" goto :eof Since the subroutine is not a single "block" (something delimited by parentheses) it will be parsed line by line as usual. Therefore it's safe to use normal expansion instead of delayed expansion here.
