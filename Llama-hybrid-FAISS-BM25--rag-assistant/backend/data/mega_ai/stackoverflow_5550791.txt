[site]: stackoverflow
[post_id]: 5550791
[parent_id]: 5537832
[tags]: 
The jQuery sortable widget does not provide the capability for controlling the allowed drop zone behaviour. The problem can however be solved hackish-ly by subclassing the the widget: $.widget("ui.custom_list", $.ui.sortable, { _mouseDrag: function(event) { // copy this code from the source code of jquery.ui.sortable.js //Rearrange for (var i = this.items.length - 1; i >= 0; i--) { //Cache variables and intersection, continue if no intersection var item = this.items[i], itemElement = item.item[0], intersection = this._intersectsWithPointer(item); if (!intersection) continue; if(itemElement != this.currentItem[0] //cannot intersect with itself && this.placeholder[intersection == 1 ? "next" : "prev"]()[0] != itemElement //no useless actions that have been done before && !$.ui.contains(this.placeholder[0], itemElement) //no action if the item moved is the parent of the item checked && (this.options.type == 'semi-dynamic' ? !$.ui.contains(this.element[0], itemElement) : true) // add this line && this._allowDropping(itemElement, (intersection == 1 ? "down" : "up")) //&& itemElement.parentNode == this.placeholder[0].parentNode // only rearrange items within the same container ) { this.direction = intersection == 1 ? "down" : "up"; // Rest of the function }, _allowDropping: function(itemElement, direction) { if(this.options.allowDropping) { return this.options.allowDropping(itemElement, direction); } return true; } }); The _mouseDrag function is mostly copied from the sortable source. The only adjustment is the line: && this._allowDropping(itemElement, (intersection == 1 ? "down" : "up")) The allowed drop zone behaviour can then be customized by providing a function for the allowDropping parameter: $("ul").custom_list({ allowDropping: function(element, direction) { // element refers to the item that would be moved but not the one being dragged if(direction == "up") { ... } else { ... } } })
