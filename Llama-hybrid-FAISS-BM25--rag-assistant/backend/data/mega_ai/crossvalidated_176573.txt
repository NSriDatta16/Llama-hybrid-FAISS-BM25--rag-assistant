[site]: crossvalidated
[post_id]: 176573
[parent_id]: 175988
[tags]: 
As Marc Claesen points out, some kind of certainty measure is needed. Below I have showed two approaches of how to form ROC curves. If the classifier can output a probabilistic measure, such one can be used in e.g. 5-fold cross validation to form a ROC plot. If the classifier only outputs predicted labels, then the certainty of predictions can be estimated with bagging. The training set is bootstrapped and modeled e.g. 100 times and the cross validated out-of-bag predictions are used for ROC curves. (1,probabilistic svm, black curve) and (2,bagged svm, red curve) For multi-class ROC curves use e.g. "1 vs. rest" method, check out this post rm(list=ls()) set.seed(1) library(e1071) library(AUC) data(iris) iris = iris[1:100,] #remove one species, to simplify to a 2-class problem iris[1:4] = lapply(iris[1:4],jitter,amount=2) #add noise, otherwise too easy #NB ROC PLOT will change for each new random noise component (jitter) X = iris[1:100,names(iris)!="Species"] y = iris[1:100,"Species"] #cross-validated SVM-probability plot folds = 5 test.fold = split(sample(1:length(y)),1:folds) #ignore warning all.pred.tables = lapply(1:folds,function(i) { test = test.fold[[i]] Xtrain = X[-test,] ytrain = y[-test ] sm = svm(Xtrain,ytrain,prob=T) #some tuning may be needed prob.benign = attr(predict(sm,X[test,],prob=T),"probabilities")[,2] data.frame(ytest=y[test],ypred=prob.benign) #returning this }) full.pred.table = do.call(rbind,all.pred.tables) plot(roc(full.pred.table[,2],full.pred.table[,1])) #bagged OOB-cross validated SVM AUC plot n.bootstraps=100 #how many models to train inbag.matrix = replicate(n.bootstraps,sample(1:length(y),replace=T)) all.preds = sapply(1:n.bootstraps,function(i) { inbag = inbag.matrix[,i] outOfBag = which(!1:length(y) %in% inbag) Xtrain = X[inbag,] ytrain = y[inbag ] sm = svm(Xtrain,ytrain) #some tuning may be needed pred.label = rep(NA,length(y)) pred = predict(sm,X[outOfBag,]) pred.label[outOfBag] = levels(pred)[as.numeric(pred)] addNA(factor(pred.label)) }) bag.prob = apply(all.preds,1,function(aRow){ inbag = which(is.na(aRow)) mean(aRow[-inbag] == levels(y)[2]) }) plot(roc(bag.prob,y),col="red",add=TRUE)
