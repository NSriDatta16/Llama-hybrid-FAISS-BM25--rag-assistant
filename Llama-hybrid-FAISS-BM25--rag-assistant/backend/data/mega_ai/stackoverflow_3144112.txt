[site]: stackoverflow
[post_id]: 3144112
[parent_id]: 3138957
[tags]: 
The getTypeInstance allows you to retrieve an object that describes the type of the product, where type is the internal magento type. So, you can use this method to determine if a products is a simple product, a bundled product, a configurable product, etc. You can then use these objects to determine information about a product that's specific to it's type. For example, if you call this method on a bundled product object, you'll get an object whose class is Mage_Bundle_Model_Product_Type This class has a number of methods on it, which are specifically designed to deal with bundled products. For example, you have the getWeight method public function getWeight($product = null) { if ($this->getProduct($product)->getData('weight_type')) { return $this->getProduct($product)->getData('weight'); } else { $weight = 0; if ($this->getProduct($product)->hasCustomOptions()) { $customOption = $this->getProduct($product)->getCustomOption('bundle_selection_ids'); $selectionIds = unserialize($customOption->getValue()); $selections = $this->getSelectionsByIds($selectionIds, $product); foreach ($selections->getItems() as $selection) { $weight += $selection->getWeight(); } } return $weight; } } This method has specific rules for determining the weight of a bundled product. Then, in the catalog/product Model ( Mage_Catalog_Model_Product ), you can see that getWeight just wraps a calls to the type's getWeight public function getWeight() { return $this->getTypeInstance(true)->getWeight($this); } The is a prime example of Object Oriented Programming in action. So, end of the day? If you don't know why you'd need to use this method, you don't need to use this method.
