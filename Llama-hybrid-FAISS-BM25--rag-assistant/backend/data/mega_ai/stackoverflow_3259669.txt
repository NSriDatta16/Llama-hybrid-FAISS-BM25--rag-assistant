[site]: stackoverflow
[post_id]: 3259669
[parent_id]: 3257021
[tags]: 
Level Format As far as the format that you save the data in, this is up to you. If you can represent your level data as flat text, perhaps a series of lines and numbers, go for it. Many level editors represent level data using a custom class/struct or XML. Preparing to save If the data is flat text or XML then your job is easy, there isn't any prep-work to do. If the data is contained in a class/struct then you will need to first serialize the data before writing it out to storage. Serialization basically makes it easy to persist the data in your class by converting your class to a format that is easy to write to storage (de-serialization goes the other direction). Serialization is often done with the XMLSerializer class. For a simple example of this you might want to see the MSN example where they demonstrate how to save/load save game data. Note: Some folks don't like serializing to XML because it exposes their data to prying eyes, for a level editor this is probably a non-issue and perhaps even desirable. Saving the Data The final consideration is the method used to save the data. On the PC, you can write data to any arbitrary location using standard .NET libraries, however this is not the case on the 360. If you've played many 360 games, you'll know that every game pops-up a dialog asking you which storage device to use. You will need to use the same classes & methods as other 360 games, namely the XNA StorageContainer class. Microsoft has some great examples here that should help you along. As you plan on leaving your level editor in as a user feature, I would recommend that you use the XNA libraries (Guide.BeginShowStorageDeviceSelector, StorageContainer) to implement your saving/loading of level data for the PC and 360. This is just to avoid having to write separate save/load code for the PC and 360.
