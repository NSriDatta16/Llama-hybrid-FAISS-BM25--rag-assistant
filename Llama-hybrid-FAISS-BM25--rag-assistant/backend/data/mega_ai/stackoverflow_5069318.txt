[site]: stackoverflow
[post_id]: 5069318
[parent_id]: 
[tags]: 
Magento - addStoreFilter not working?

When getting a product collection in Magento, I would expect the StoreFilter to do just that, filter by the current store. But I can't get it to work. Say I have 2 stores set up like so: And both stores have a different root category. Main Store is the default sample data, Store2 has just one product I added. I would have thought that using the store filter, only products within the root category of the current store would show up. But I'm getting every product showing. I'm testing this by placing the following in my category view template: $store_id = Mage::app()->getStore()->getId(); $_testproductCollection = Mage::getResourceModel('reports/product_collection') ->setStoreId($storeId) ->addStoreFilter($store_id) ->addAttributeToSelect('*'); $_testproductCollection->load(); foreach($_testproductCollection as $_testproduct){ echo $this->htmlEscape($_testproduct->getName()); }; If I echo the store ID, it's giving me the correct number. I have only one product in Store 2, so why am I getting every product from all stores returned? I can set every product in Main Store to not show in Store2 and then add a visibility filter, but that would take forever. Also, I just noticed, if I echo the products store ID, I get the current ID, not the store it's assigned to: echo $_testproduct->getStoreId() What's going on? UPDATE (April 8 2011): OK, so I tried joining the fields so that the store_id is included (as suggested below), the section of code {{table}}.store_id = 1 is just setting all the products to have a store_id of 1. How can I just get the store_id associated with the product? $_testproductCollection = Mage::getResourceModel('catalog/product_collection'); $_testproductCollection->joinField('store_id', 'catalog_category_product_index', 'store_id', 'product_id=entity_id', '{{table}}.store_id = 1', 'left'); $_testproductCollection->getSelect()->distinct(true); $_testproductCollection->addAttributeToSelect('*')->load(); foreach($_testproductCollection as $_testproduct){ echo $this->htmlEscape($_testproduct->getName())." "; echo "STORE IS ".$_testproduct->getData('store_id')." "; }; If I check the catalog_category_product_index table of my db, the store_id's are correct.
