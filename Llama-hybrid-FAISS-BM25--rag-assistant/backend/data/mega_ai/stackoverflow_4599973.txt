[site]: stackoverflow
[post_id]: 4599973
[parent_id]: 
[tags]: 
MySQL: how to determine which rows in tables A and B are referenced by rows in table C in linear time?

I am working with a poorly designed database that I am not at liberty to restructure. In this database, there are three tables (let's call them ' companiesA ', ' companiesB ', and ' items ') that are involved in a query that I need to optimize. ' companiesA ' and ' companiesB ' describe companies in the same way in that the column values are the same, but they represent two different groups of companies and have different column names. Essentially, the ID and company name columns are ' aID ' and ' aName ' in ' companiesA ', and ' idB ' and ' nameB ' in ' companiesB '. ' items ' contains a column, ' companyID ', that contains a foreign key value from one of the two company tables. The query I need to optimize gets a page's worth of company IDs and names from the union of the two tables, sorted by the names column, with an added column that states whether the row's company has any items associated with it. This query can also filter by the company names if the user requests it in the front-end. In its current state, I think it runs in THETA(companies * items) time, which is prohibitively slow: select a.aID as companyID, a.aName as companyName, (select count(companyID) from items where companyID = a.aID ) as items from companiesA as a where a.aName like '% %' union select b.idB as companyID, b.nameB as companyName, (select count(companyID) from items where companyID = b.idB ) as items from companiesB as b where b.nameB like '% %' order by companyName ASC limit [optional_starting_index, ] 50; It is not important that the items column contain the actual counts as this query returns (it was the only way I could figure out to cleanly return a value regarding the entire ' items ' table). I suppose that I can count myself fortunate that with 1500 companies and 9000 items, this algorithm only takes seven seconds. If I were writing this in another language in which I had access to the tables myself, I could easily write this in O(companies + items) time, but I am finding it difficult to figure out how to do so in MySQL. Is it possible to do this, preferably without stored functions or procedures? I CAN add them if necessary, but I have had a hard time adding them through phpMyAdmin now that the server's host only allows that interface to access the database by GUI.
