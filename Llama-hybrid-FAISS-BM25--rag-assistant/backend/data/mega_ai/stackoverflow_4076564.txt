[site]: stackoverflow
[post_id]: 4076564
[parent_id]: 
[tags]: 
Calling a JAX-WS webservice from inside Matlab

I have a Vanguard webservice which I can call (using basic authentication) using a custom java class. The java wsimport tool was used to generate the java proxy stubs and this all works perfectly. The java code (All classes below are generated by wsimport given a url + authentication info): Authenticator.setDefault(new SimpleAuth(username,pass)); MyWSObject obj = new MyWSObject(url); -> triggers the exception ServicePortType port = obj.getServicePort(); OutputType result = port.MyWSMethod(params); OutputData data = result.getOutputData(); When I run the exact same java function (containing the above code) from matlab the webservice call fails with an obscure error: ??? Java exception occurred: com.sun.xml.internal.ws.streaming.XMLStreamReaderException: XML reader error: com.ctc.wstx.exc.WstxUnexpectedCharException: Unexpected character '"' (code 34) in DOCTYPE declaration; expected a space between public and system identifiers at [row,col,system-id]: [1,63," "] at com.sun.xml.internal.ws.streaming.XMLStreamReaderUtil.wrapException(XMLStreamReaderUtil.java:256) at com.sun.xml.internal.ws.streaming.XMLStreamReaderUtil.next(XMLStreamReaderUtil.java:84) at com.sun.xml.internal.ws.streaming.XMLStreamReaderUtil.nextContent(XMLStreamReaderUtil.java:99) at com.sun.xml.internal.ws.streaming.XMLStreamReaderUtil.nextElementContent(XMLStreamReaderUtil.java:89) at com.sun.xml.internal.ws.wsdl.parser.RuntimeWSDLParser.hasWSDLDefinitions(RuntimeWSDLParser.java:209) at com.sun.xml.internal.ws.wsdl.parser.RuntimeWSDLParser.parse(RuntimeWSDLParser.java:119) at com.sun.xml.internal.ws.client.WSServiceDelegate.parseWSDL(WSServiceDelegate.java:254) at com.sun.xml.internal.ws.client.WSServiceDelegate. (WSServiceDelegate.java:217) at com.sun.xml.internal.ws.client.WSServiceDelegate. (WSServiceDelegate.java:165) at com.sun.xml.internal.ws.spi.ProviderImpl.createServiceDelegate(ProviderImpl.java:93) at javax.xml.ws.Service. (Service.java:56) at edu.soton.decode.activities.vanguardws.MyWSObject. (MyWSObject.java:42) at edu.soton.decode.activities.VanguardActivity.execute(VanguardActivity.java:80) If I use wireshark to monitor the requests/reponses in both cases I see: == Java function called directly == All the calls/reponses below happen automatically by the JAX-WS code generated by wsimport. My code just calls the webservice method on the generated service proxy, nothing fancy. GET /bin/ws.dsb?wsdl/mywebservice HTTP/1.1 User-Agent: Java/1.6.0_22 Host: myhost Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive ... HTTP/1.1 401 Authorization Required Server: Vanguard Server/5.1.10 Connection: close Content-Length: 608 Date: Mon, 01 Nov 2010 15:04:17 GMT Last-Modified: Mon, 01 Nov 2010 15:04:17 GMT Expires: Mon, 01 Nov 2010 15:04:17 GMT Cache-Control: no-cache WWW-Authenticate: Basic realm="Local Library" Auto-Studio-Login: 0 Content-Type: text/html ... GET /bin/ws.dsb?wsdl/mywebservice HTTP/1.1 User-Agent: Java/1.6.0_22 Host: myhost Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive Authorization: Basic Z29yaXNzZW46ZGlyaw== ... HTTP/1.1 200 OK Server: Vanguard Server/5.1.10 Connection: close Content-Length: 5408 Date: Mon, 01 Nov 2010 15:04:17 GMT Last-Modified: Mon, 01 Nov 2010 15:04:17 GMT Expires: Mon, 01 Nov 2010 15:04:17 GMT Cache-Control: no-cache Set-Cookie: KillIDws=lpvovmb3oa9; path=/ Content-Type:text/xml ... POST /bin/ws.dsb?soap/mywebservice HTTP/1.1 Content-type: text/xml;charset="utf-8" Soapaction: "" Accept: text/xml, multipart/related, text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 User-Agent: JAX-WS RI 2.1.6 in JDK 6 Host: myhost Connection: keep-alive Authorization: Basic Z29yaXNzZW46ZGlyaw== Content-Length: 214 ... HTTP/1.1 200 OK Server: Vanguard Server/5.1.10 Connection: close Content-Length: 851 Date: Mon, 01 Nov 2010 15:04:18 GMT Last-Modified: Mon, 01 Nov 2010 15:04:18 GMT Expires: Mon, 01 Nov 2010 15:04:18 GMT Cache-Control: no-cache Set-Cookie: KillIDws=lpvovmb3oi2; path=/ Content-Type:text/xml; charset=utf-8 ... -> the last response is where the results are returned == Exactly the same Java function called from inside Matlab == GET /bin/ws.dsb?wsdl/mywebservice HTTP/1.1 Accept: */* Accept-Encoding: gzip Accept-Language: en User-Agent: Mozilla/5.0 (Java 1.6.0_22; Windows XP 5.2 amd64; en_GB) ICEbrowser/v6_0_2 Host: myhost Connection: Keep-Alive ... HTTP/1.1 401 Authorization Required Server: Vanguard Server/5.1.10 Connection: close Content-Length: 608 Date: Mon, 01 Nov 2010 15:02:42 GMT Last-Modified: Mon, 01 Nov 2010 15:02:42 GMT Expires: Mon, 01 Nov 2010 15:02:42 GMT Cache-Control: no-cache WWW-Authenticate: Basic realm="Local Library" Auto-Studio-Login: 0 Content-Type: text/html ... -> everything stops here with the exception shown above. So when running inside Matlab, it seems Matlab is doing something to the JVM environment that stops the generated proxy from making a second, authenticated call. It simply bails out after the 401 instead of authenticating like in the pure java case. I have set MATLAB_JAVA environment variable so that the same JVM (sun 1.6) is used in both cases. I have also noticed that Matlab does not respect the http.agent property when sending requests.
