[site]: stackoverflow
[post_id]: 847382
[parent_id]: 847279
[tags]: 
Jem answer is a little more simpler than this solution. But it is possible to substitute the use of a preprocessor macro with the use of templates. Something like this (more refinements you could made): template class CatchWrapper { public: static void WrapCall(T* instance) { try { (instance->*FUNC)(); } catch (std::bad_alloc&) { // Do Something 1 } catch (std::exception& e) { // Do Something 2 } catch (...) { // Do Something 3 } } }; class Foo { public: void SomeCall() { std::cout ::WrapCall(&i); return 0; }
