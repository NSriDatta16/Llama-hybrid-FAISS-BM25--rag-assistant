[site]: stackoverflow
[post_id]: 1949469
[parent_id]: 1948489
[tags]: 
This may be a case of premature optimization. In my opinion, it's hard to create a quality web site if you design it around using session state. HTTP is "stateless," and although there are abstractions designed to disguise this fact (such as the ASP.NET Session), you will often be confronted with the truth. The Session object is an OK tool for doing in-memory caching, but you should never count on it being reliable. In other words, you can use it to optimize code, but you'll still always also need the code to do the full database retrievals as a fall back. In-SQL storage of Session is a way to try to work around server farm issues, but why bother that if you're trying to avoid the database in the first place? Keep in mind that although you may be repeating queries for the same shopping cart data across requests, the SQL server itself can do a lot of the caching and optimization for you. It may not be as slow as you think. As far as static data goes, use caution. App pool recycling can sometimes break this in-memory data, and you have to be very careful that access to static data that needs startup initialization is reentrant.
