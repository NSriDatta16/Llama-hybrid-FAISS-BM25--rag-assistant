[site]: stackoverflow
[post_id]: 2976888
[parent_id]: 
[tags]: 
Help needed with Spring/Hibernate Lazy-loading

I know that this has been discussed lot of times. I just can't understand how this work or where my mistake is. I think giving you a reduced example is the best way to show you what I'm trying to do and what assumptions I'm taking... I have a Product class with a name. The name is a String property that is lazy. My DAO: public abstract class HibernateProductDAO extends HibernateDaoSupport implements ProductDAO { public List getAll() { return this.getHibernateTemplate().find("from " + this.getDomainClass().getSimpleName()); } } My Service Interface: public interface ProductService { //This methods are Transactional, but same exception error is thrown if there weren't @Transactional public Product getProduct(); @Transactional public String getName(Product tp); } My Service Implementation: public class ProductServiceImpl implements ProductService { private ProductDAO productDAO; public Product getProduct() { List ps = this.productDAO.getAll(); return (Product) ps.get(0); } public String getName(Product p){ return p.getName(); } } My Main class: public class Main { private ProductService productService; public static void main(String[] args) { Main main= new Main(); main.productService= (ProductService)(new ClassPathXmlApplicationContext("applicationContext.xml")).getBean("productProxy"); //load the product without the name Product p = main.productService.getProduct(); //load the lazy name System.out.println(main.productService.getName(p)); //EXCEPTION IS THROWN IN THIS LINE } public void setProductService(ProductService productService) { this.productService= productService; } public ProductService getProductService() { return productService; } My applicationContext.xml: oracle.jdbc.driver.OracleDriver jdbc:oracle:thin:@${hostname}:${port}:${schema} ${username} ${password} hibernate.cfg.xml org.hibernate.cfg.AnnotationConfiguration product.services.ProductService hibernateInterceptor The exception fragment: 11:59:57,775 [main] DEBUG org.springframework.orm.hibernate3.SessionFactoryUtils - Opening Hibernate Session 11:59:57,775 [main] DEBUG org.hibernate.impl.SessionImpl - opened session at timestamp: 12749723977 11:59:57,777 [main] ERROR org.hibernate.LazyInitializationException - could not initialize proxy - no Session org.hibernate.LazyInitializationException: could not initialize proxy - no Session at org.hibernate.proxy.AbstractLazyInitializer.initialize(AbstractLazyInitializer.java:108) at org.hibernate.proxy.AbstractLazyInitializer.getImplementation(AbstractLazyInitializer.java:150) at org.hibernate.proxy.pojo.cglib.CGLIBLazyInitializer.invoke(CGLIBLazyInitializer.java:150) Am I right if I assume that the HibernateInterceptor keeps the Hibernate Session Open among the different calls? If I'm so, Why is the session closed after loading the product object? I read somewhere that I also can use OpenSessionInViewInterceptor, but I can't make it work. How would you add that interceptor to this little example? Is there any code mistake or missunderstanding on how this work? Do you know any simple example code I can download to check how this work? Thanks in advance, Neuquino
