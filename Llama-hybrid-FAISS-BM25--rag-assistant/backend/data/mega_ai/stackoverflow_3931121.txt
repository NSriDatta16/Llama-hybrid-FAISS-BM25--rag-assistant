[site]: stackoverflow
[post_id]: 3931121
[parent_id]: 3930833
[tags]: 
Upcasting (from sub to base) is commonly done when you want to access a set of derived instances in a uniform way (for example, you are building a list of Animal instances, but you have instances of Lion, Cow and Cat). If you need to access the instances just through the Animal interface, there's no problem. You can call Animal methods on upcasted instances. The opposite happens when all you get is a bunch of Animal instances, but you have to operate only on the subset of them having a particular type. This is called downcasting, I read a general tendency to frown upon it, but in some cases it just works. You perform a safe downcasting with dynamic_cast . If the object is not of the instance you request, it returns null (if you are working with pointers, otherwise it raises an exception). In C you don't have classes. With casting, you just tell the compiler to reinterpret the contents of the byte array you have in memory. I've seen it done a lot in GTK. This is an example in C. IMPORTANT: this is ugly C. My C is rustier than a 1870 truck and I am in a hurry. There's plenty of don'ts in this code. #include #include #include #include struct a { int an_int; char a_string[8]; char another_string[16]; char a_third_string[16]; }; struct b { int an_int; char first_four[4]; char last_four[4]; }; int main() { struct a *a_ptr=NULL; struct b *b_ptr=NULL; a_ptr = malloc(sizeof(struct a)); bzero(a_ptr, sizeof(struct a)); a_ptr->an_int =10; strncpy(a_ptr->a_string,"hello", 8); a_ptr->a_string[strlen("hello")] = 0; strncpy(a_ptr->another_string,"hello2", 16); a_ptr->another_string[strlen("hello2")] = 0; strncpy(a_ptr->a_third_string,"hello3", 16); a_ptr->a_third_string[strlen("hello3")] = 0; b_ptr = (struct b *)a_ptr; printf("%n\n", b_ptr->an_int); printf("%s\n", b_ptr->last_four); } When you cast to struct b *, you overlay the memory area you previously referred with a_ptr with the new "vision" through b. Via b, you cannot access another_string nor a_third_string.
