[site]: stackoverflow
[post_id]: 3165572
[parent_id]: 3165275
[tags]: 
In addition to using an existing implementation of the plumbing code, such as the Membership Provider it might be wise to add an extra level of abstraction in order to make the solution less fragile. If the authorization is widespread it might be wise to map the roles to functionalities and in your code check if any of the user's roles has access to a certain functionality. If Authorizer.UserHasAccessToFunctionality(user, "Sensitive") Then ' Display sensitive material Else If ... The authorization logic in pseudo code: public Shared Function UserHasAccessToFunctionality(user as IPrincipal, _ functionality as string) as Boolean functionalities = Authorizationrepository.GetFunctionalityForRoles(user.Roles) Return functionalities.Contains(functionality) End Function The AuthorizationRepository would be loading the functionalities that an array of roles have access to. In the database you would map the functionalities to the roles that have access to them Table: Functionalities ID Name 1 Sensitive 2 Protected 3 Public Table: RoleFunctionalities Role Functionality 1 1 1 2 2 2 3 3
