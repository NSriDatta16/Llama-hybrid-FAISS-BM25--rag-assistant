[site]: stackoverflow
[post_id]: 4319099
[parent_id]: 4318401
[tags]: 
There are many things in NHibernate.Linq for NHibernate 2.1.2.4000 that just won't work. You could use HQL or ICriteria instead, or upgrade to NHibernate 3.0, or if you're going to use all the data, force your Linq query to execute after the Select by adding a ToList . tags .Select(t = new { t.Name, t.Posts.Count }) .ToList() .OrderBy(x => x.Count); The anonymous object by itself is something that NHibernate.Linq can definitely handle. By the way, you don't have to specify the field name in an anonymous object if it's the same as the field/property you're dragging it from. EDIT: An ICriteria version of this query would look like this... var tags = session.CreateCriteria(typeof(Tag), "tag") .SetProjection( Projections.GroupProperty("tag.Name"), Projections.Count("tag.Posts")) .AddOrder(Order.Asc(Projections.Count("tag.Posts"))) .List(); EDIT: With a proper mapping I'm getting the same SQL, Arch. My earlier mapping was wrong. This one seems to work however. var tags = session.CreateCriteria(typeof(Tag), "tag") .CreateCriteria("tag.Posts", "post") .SetProjection( Projections.GroupProperty("tag.Name"), Projections.Count("post.Id")) .AddOrder(Order.Asc(Projections.Count("post.Id"))) .List(); The SQL I get is this... SELECT this_.Name as y0_, count(post1_.Id) as y1_ FROM Tag this_ inner join Post_Tags posts3_ on this_.Id=posts3_.Tag inner join Post post1_ on posts3_.Post=post1_.Id GROUP BY this_.Name ORDER BY count(post1_.Id) asc
