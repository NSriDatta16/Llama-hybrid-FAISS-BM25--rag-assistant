[site]: stackoverflow
[post_id]: 373681
[parent_id]: 372003
[tags]: 
I've found the best way to unit test stuff in Global.asax is to make sure the whole thing is in a testable static method. Then pass in to that method everything it needs from Global.asax. So for example, if you were doing a check of Session on Application Start, you could have a method like this: public static void CheckSession(HttpSessionStateBase session) { ... } Then, your Application Start would just be this: protected void Application_Start(object sender, EventArgs e) { CheckSession(new HttpSessionStateWrapper(Session)); } This example is obviously a little silly as you'd probably do something like this in Session Start :) You could pass into that method whatever it needs, Request, Response, Cache, etc. However, it gets the point across. The only code that wouldn't be covered would be the actual single line call in Application_Start. Everything else could be covered in a test using Moq like so: var session = new Moq (); ...Set Expectations... Global.CheckSession(session.Object); ...Do Asserts... You wouldn't achieve the 100% code coverage you're looking for, but you'd be darned close, and you would be fulfilling the "spirit" of TDD law if not exactly the letter :)
