[site]: stackoverflow
[post_id]: 3932024
[parent_id]: 3931936
[tags]: 
Unfortunately there is nothing in C# that has so much power like const in C/C++ to make sure (at compile time) that a value won't be changed. The only thing that comes them nearly is immutability (like mentioned by yourself and Itay), but it doesn't have the flexibility like const . :( If you need it mutable in some scenarios you can only do something at runtime like this class Thing { public bool IsReadOnly {get; set;} private int _X; public int X { get { return _X; } set { if(IsReadOnly) { throw new ArgumentException("X"); } _X = value; } } } but it pollutes your code with try/catch and changing the value of IsReadOnly . So not very elegant, but maybe something to consider.
