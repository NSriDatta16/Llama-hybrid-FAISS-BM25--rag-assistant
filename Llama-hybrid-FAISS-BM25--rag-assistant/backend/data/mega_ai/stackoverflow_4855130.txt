[site]: stackoverflow
[post_id]: 4855130
[parent_id]: 4855021
[tags]: 
I suspect you're assuming that the entire message is delivered in one call to receiveData . This is not, in general, the case. Fragmentation, delays, etc can end up meaning that the data arrives in dribbles, so that you might get your receiveData function called when there's only, e.g. 900 bytes ready. Your call sock.Receive(buffer, n, SocketFlags.None); says "Give me the data into the buffer, up to n bytes" - you might receive fewer, and the number of bytes actually read is returned by Receive . This explains why decreasing b , adding more delay or using the same host seems to "fix" the problem - the odds are vastly increased that the entire message will arrive in one go using these methods (smaller b , smaller data; adding a delay means there's less overall data in the pipe; there's no network in the way for the local address). To see if this is indeed the problem, log the return value of Receive . It will occasionally be less than 1024 if my diagnosis is correct. To fix it, you need to either wait until the local network stack's buffer has all your data (not ideal), or just receive data as and when it arrives, storing it locally until a whole message is ready and processing it then.
