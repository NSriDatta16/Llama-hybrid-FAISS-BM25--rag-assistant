[site]: crossvalidated
[post_id]: 487241
[parent_id]: 
[tags]: 
Getting the probability or accuracy from each prediction in random forest?

I have a random forest model to predict MLB player's fantasy points. I have the MSE and R^2 score, but I would like to know the accuracy of each individual prediction as opposed to the accuracy of the entire model. Is there a way to do this? Here is the code import pandas as pd import numpy as np import json from sklearn.ensemble import RandomForestRegressor from sklearn.model_selection import train_test_split from sklearn.metrics import r2_score, mean_squared_error from sklearn.preprocessing import StandardScaler training_data = pd.read_csv('/Users/aus10/Desktop/MLB_Data/ML/Data/Training_Data/Batter_FPTS.csv') df_model = training_data.copy() scaler = StandardScaler() features = [['Line', 'Total', 'Team_Total', 'Percent_Difference_TT' ]] for feature in features: df_model[feature] = scaler.fit_transform(df_model[feature]) test_data = pd.read_csv('/Users/aus10/Desktop/MLB_Data/ML/Data/Test_Data/Test_Data_Batter_FPTS.csv') X = training_data.iloc[:,1:5] #independent columns y = training_data.iloc[:,-1] #target column results = [] # fit final model model = RandomForestRegressor(n_estimators=1000, random_state=4) model.fit(X, y) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=4) y_train_pred = model.predict(X_train) y_test_pred = model.predict(X_test) model.fit(X_train, y_train) y_pred = model.predict(X_test) print('MSE train: %.3f, test: %.3f' % ( round(mean_squared_error(y_train, y_train_pred),2), round(mean_squared_error(y_test, y_test_pred),2) )) print('R^2 train: %.3f, test: %.3f' % (r2_score(y_train, y_train_pred), r2_score(y_test, y_test_pred))) # define one new data instance index = 0 count = 0 while count I would like to be able to return an object like { 'Team': team, 'Projected_FPTS': (round(ynew[0],2)) 'Projection_Accuracy': # accuracy or probability of prediction here }
