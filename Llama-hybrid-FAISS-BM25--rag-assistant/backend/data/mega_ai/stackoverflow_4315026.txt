[site]: stackoverflow
[post_id]: 4315026
[parent_id]: 
[tags]: 
Test 32-bit assembly on a 64 bit windows with NUnit

I'm using C# and .NET 4.0 to build my current application. For unit testing I use NUnit in its latest version. In my application I have to make use of a 32-bit DLL, and therefore I have to create the assembly with target 'x86'. The application itself works fine under both 32-bit and 64-bit Windows, but I can't use NUnit as I get the following exception upon loading the 'x86' assembly: In Settings->Assembly Isolation I use 'Run tests in separate process per Assembly', but to no use. System.BadImageFormatException... Server stack trace: bei System.Reflection.Assembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, Assembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection) bei System.Reflection.Assembly.InternalLoad(AssemblyName assemblyRef, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection) bei System.Reflection.Assembly.Load(AssemblyName assemblyRef) bei NUnit.Core.Builders.TestAssemblyBuilder.Load(String path) bei NUnit.Core.Builders.TestAssemblyBuilder.Build(String assemblyName, Boolean autoSuites) bei NUnit.Core.Builders.TestAssemblyBuilder.Build(String assemblyName, String testName, Boolean autoSuites) bei NUnit.Core.TestSuiteBuilder.BuildSingleAssembly(TestPackage package) bei NUnit.Core.TestSuiteBuilder.Build(TestPackage package) bei NUnit.Core.SimpleTestRunner.Load(TestPackage package) bei NUnit.Core.ProxyTestRunner.Load(TestPackage package) bei NUnit.Core.ProxyTestRunner.Load(TestPackage package) bei NUnit.Core.RemoteTestRunner.Load(TestPackage package) bei System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Int32 methodPtr, Boolean fExecuteInContext, Object[]& outArgs) bei System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg, Int32 methodPtr, Boolean fExecuteInContext) Exception rethrown at [0]: bei System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg) bei System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type) bei NUnit.Core.TestRunner.Load(TestPackage package) bei NUnit.Util.TestDomain.Load(TestPackage package) bei NUnit.Core.ProxyTestRunner.Load(TestPackage package) bei NUnit.Util.RemoteTestAgent.AgentRunner.Load(TestPackage package) bei System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Int32 methodPtr, Boolean fExecuteInContext, Object[]& outArgs) bei System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg, Int32 methodPtr, Boolean fExecuteInContext) Exception rethrown at [1]: bei System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg) bei System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type) bei NUnit.Core.TestRunner.Load(TestPackage package) bei NUnit.Core.ProxyTestRunner.Load(TestPackage package) bei NUnit.Util.ProcessRunner.Load(TestPackage package) bei NUnit.Util.AggregatingTestRunner.Load(TestPackage package) bei NUnit.Util.TestLoader.LoadTest(String testName) How to get those tests running on a 64-bit version of Windows?
