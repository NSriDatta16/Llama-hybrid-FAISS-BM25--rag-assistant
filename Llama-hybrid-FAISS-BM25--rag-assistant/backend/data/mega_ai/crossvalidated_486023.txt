[site]: crossvalidated
[post_id]: 486023
[parent_id]: 485895
[tags]: 
Yes, your interpretation is correct; s(x) + s(z) + ti(x,z) includes the main effects of x and z as separate terms from the interaction term ti(x,z) , in the same sense as x + z + x:z would in an linear model. From some tests I did a while back, ti(x) or s(x) in a model like y ~ s(x) + s(z) + ti(x, z) is close to the smooth effect of x averaged over the values of z . By that I mean say you fitted this model y ~ te(x, z) and then evaluated the smooth effect of x at a set of values for z from this model (using a grid of points x' and a very fine set of values for z , and then average the estimated smooth effect of x over z at each value of x' ) you would get something very close to s(x) in the first model. I haven't quite worked out why there is more of a discrepancy than I would have expected, but this may just related to the first model not being exactly equal to the second model; there are more smoothness parameters in the first model than the second for example. What you are doing seems valid to me. Another option, which seems much more involved would be to fit the model with s(x, z, bs = 'tp') or s(x, z, bs = 'ds') or te(x, z) . Create some vector of new values for x that you want to evaluate the model at, and combine it with a fine set of values for z . Then simulate from the model posterior at this grid of x and z points, and the average the predicted values over z for each value of x , yielding the average posterior effect of x . Increasing k works as you say, up to a point; you're assuming that the effect of ti(x, z) is smooth so there becomes a point where increasing k will lead to a rough surface and the penalty will start to dominate the penalised likelihood of the model. If you have a large amount of data then you can have a k that is higher, but there's still some limit imposed by the definition of smoothness. There isn't a difference between y ~ s(x) + s(z) + ti(x, z) and y ~ ti(x) + ti(z) + ti(x, z) At one time Simon Wood indicated that he didn't like having ti() work for single terms, but this warning seems to have been removed from the Changelog, so perhaps he has changed his mind about that.
