[site]: stackoverflow
[post_id]: 3635306
[parent_id]: 3635167
[tags]: 
NUnit supports that scenario: public static IEnumerable SumTestData() { return new List { new TestCaseData( 1, 1, 2), new TestCaseData(-1, 1, 0), new TestCaseData( 1, 2, 3), new TestCaseData( 1, -1, 0) }; } [Test] [TestCaseSource("SumTestData")] public void SumTest(int first, int second, int expected) { } The parameters can be any type. The TestCaseData constructor takes a param array of objects, so you just have to make sure that your test values are castable to the actual test method parameter types. Non-void parametrised test method (by @RobertKoritnik) Upper code can be even further enhanced by having a non void test method and provide results along test data. I also provided an alternative of creating test data method. public static IEnumerable SumTestData() { yield return new TestCaseData( 1, 1).Returns(2); yield return new TestCaseData(-1, 1).Returns(0); yield return new TestCaseData( 1, 2).Returns(3); yield return new TestCaseData( 1, -1).Returns(0); } [Test] [TestCaseSource("SumTestData")] public int SumTest(int first, int second) { return Sum(first, second); }
