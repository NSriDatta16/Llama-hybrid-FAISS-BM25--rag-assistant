[site]: crossvalidated
[post_id]: 257510
[parent_id]: 257509
[tags]: 
I recommend you a simple tf-idf system representation of your documents , first calculate TF(Term Frequency) from each of your element and IDF(inverse document frequency) , then tf * idf for each word will give you a weight , now each document is a vector of word features , you have two approach here , 1) Train a classifier with these features + each time every document downloaded as documents feature and predict new document , you can use SVM , and Naive Bayes classifier 2)with some of similarity functions like cosine calculate similarity of new document with all of your documents then assign the most similar one downloaded time to new document, for example you have 3 documents : 1) How to choose a machine learning algorithm -> 4 times downloaded 2) Maradona is best football player! -> 2 times downloaded 3) Tomorrows weather is snowy! -> 1 times downloaded new_document -> best machine learning algorithms cosine_similarity(1,new) -> 0.95 cosine_similarity(2,new) -> 0.01 cosine_similarity(3,new) -> 0.20 So because the similarity of first one is outnumber others then probably the new document will be download 4 times. There are so many tricks to improve your performance and accuracy , so its your times to get your hand dirty!
