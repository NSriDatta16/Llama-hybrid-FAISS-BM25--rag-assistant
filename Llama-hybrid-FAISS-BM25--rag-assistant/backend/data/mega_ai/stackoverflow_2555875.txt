[site]: stackoverflow
[post_id]: 2555875
[parent_id]: 2539441
[tags]: 
I think most Java web frameworks let you reuse components and/or tags. They differ in flexibility, control, the availability of standard components and features like search engine friendly URL’s. There are basically two categories of frameworks: component based (JSF, Wicket, Tapestry, GWT) and action based (Struts, Stripes, Webworks, Spring). Both allow you to reuse components, but the component based frameworks hide the low-level http stuff and let you use state full server components. What type is the best depends on what you needs. Do you need maximum control over you’re HTML, high performance, search engine friendly URL’s then I would prefer an action based framework. If you prefer to hide the http side and want to program more high level as if you’re building a windows application, then I think you’re better off with an component based framework. JSF: a complex framework, most programmers think it’s not very elegant. But as it’s part of the Java EE standard it’s a defacto standard. Wicket: just like JSF a component-based framework. But it’s much more straightforward and elegant (You might also want to consider Click). Tapestry: also a component framework, it’s seems especially strong in it’s library of standard components for building powerful web applications. Stripes: my personal favorite, it’s a simple, very elegant and an easy to learn MVC framework. As it’s not a component based, but an action based framework, it offers maximum flexibility. It gives you full control over the generated HTML (as most component based frameworks can’t). It let you reuse components, by reusing templates used by the Java controller. End user can simply customize the HTML templates or use you’re custom tags. I choose this framework as it supports search engine friendly link generation.
