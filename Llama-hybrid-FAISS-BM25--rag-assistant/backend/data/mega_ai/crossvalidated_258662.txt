[site]: crossvalidated
[post_id]: 258662
[parent_id]: 250865
[tags]: 
I think you can also use something like the followings for nested loop classification.. using the iris data & kernel SVC as an example.. from sklearn.model_selection import GridSearchCV from sklearn.model_selection import cross_val_score from sklearn.datasets import load_iris from sklearn.preprocessing import StandardScaler from sklearn.model_selection import StratifiedKFold from sklearn.pipeline import Pipeline from sklearn.svm import SVC import numpy as np iris = load_iris() X = iris.data y = iris.target pipe_svc = Pipeline([('scl', StandardScaler()), ('clf', SVC(random_state=1))]) param_range = [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000] param_grid = [{'clf__C': param_range, 'clf__gamma': param_range, 'clf__kernel': ['rbf']}] N_outer=10 N_inner=10 scores=[] for i in range(N_outer): k_fold_outer = StratifiedKFold(n_splits=10,shuffle=True,random_state=i) for j in range(N_inner): k_fold_inner = StratifiedKFold(n_splits=10,shuffle=True,random_state=j) gs = GridSearchCV(estimator=pipe_svc, param_grid=param_grid, scoring='accuracy', cv=k_fold_inner) score=cross_val_score(estimator=gs,X=X,y=y,cv=k_fold_outer) scores.append(score) np.shape(scores)
