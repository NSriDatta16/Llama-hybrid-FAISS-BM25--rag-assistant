[site]: stackoverflow
[post_id]: 1235385
[parent_id]: 615100
[tags]: 
Many languages are quite similar to others, but to move between imperitave and functional / dynamic and static / Object and Procedural languages you do need to train yourself to think within the constraints of the language you are using. Since most projects are at least a few weeks, this is generally not a problem after the first few days. You will find it more difficult to switch away from a language+environment you enjoy in your after-hours / hobby development. C, Macro Assembler => basically the same - difference is mainly libraries C++, Java, C#, Delphi => basically the same paradigm - you learn quickly how to leverage the features of the specific language and adopt concepts from one syntax to another. It's basically the same way of thinking, the biggest exception is how you think of memory manangement. Python - good language, strategically a better choice than ruby, although there are other aspects of ruby that can be argued to be superior. What make python a good choice is the presence of a formal language body which keeps python environments on different platforms very compatible to one another. If you are interested, read this http://cmdematos.com/?p=120 on making a strategic language choice.
