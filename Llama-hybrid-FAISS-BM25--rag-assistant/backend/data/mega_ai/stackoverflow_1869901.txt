[site]: stackoverflow
[post_id]: 1869901
[parent_id]: 1869744
[tags]: 
Firstly, the physical structure of the memory doesn't need defragmenting - the OS manages the pages of physical memory and presents it to the application as a continuous 2GB address space. How this memory is then managed is up to the application (or the CLR in the case of a .NET application) The GC in most of the CLRs (I believe the .NET 4.0 CLR has made some changes in this area) uses a traditional "linked-list" allocation for the large object heap and it doesn't compact the heap due to the cost of moving large amounts of memory around. This means that if you are allocating lots of large objects that have varying sizes and varying lifetimes you can easily end up with fragmented memory and out of memory exceptions as you've seen. I've never seen a memory "defragmenter" DLL as to be able to do this you would have to have full control over the GC and CLR to ensure it updates any references. Two things worth trying are: 1) if you can clear objects from the cache then when you get an out of memory exception release some of the objects. 2)Try the .NET 4.0 CLR to see if that improves the situation.
