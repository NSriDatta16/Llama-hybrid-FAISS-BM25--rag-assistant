[site]: stackoverflow
[post_id]: 4261596
[parent_id]: 4261219
[tags]: 
there are several "correct" OOP designs for this, depending on how you want to model the game process and the game-playing-agent's AI personally, i would take the minimum number of cards for a valid round in the game and implement those as instances of a Card class, and implement the players as instances of an Agent class, and implement a few simple playing strategies as instances of a Strategy (pattern) class, and then see what happens run through some tests, have a totally random player as a foil, look at short-term gain/loss max/min operators, try mutating the agent's strategies using a genetic algorithm, download an XCS classifier and see if it is useful to derive strategies... ...the notion of a correct model depends strongly on how it will be used. Once you understand how you need to use the elements of the game and model/manipulate the player strategies/tactics, then you'll know what the 'correct' structure is for your solution
