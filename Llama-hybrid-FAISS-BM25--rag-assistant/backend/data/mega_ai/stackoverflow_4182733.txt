[site]: stackoverflow
[post_id]: 4182733
[parent_id]: 4179110
[tags]: 
Here is an obvious concern. Your application needs to be able to read and understand the data. Therefore, if anyone is able to mess with your application (sniff its communication, decompile it and so on), he can access the database using the same way. Even if you use some external storage for key data (like Windows Data Protection API), you still need to authenticate to this storage somehow. Therefore, if anyone is able to control the authentication mechanism (for example, Windows domain), can gain the same access. Basically, if an adversary has complete control of the environment (and they do if you use a shared hosting and try to protect your data from their staff), you cannot stop them from doing whatever they want. Here are some good overviews of encryption in SQL Server: Understanding Transparent Data Encryption (TDE) , Encryption Hierarchy . In any case, you still need a way to store an "ultimate start key" inaccessible to your adversary, but stil be able to use this key in your app.
