[site]: stackoverflow
[post_id]: 474993
[parent_id]: 474613
[tags]: 
I like to encourage the use of singletons where necessary while discouraging the use of the Singleton pattern. Note the difference in the case of the word. The singleton (lower case) is used wherever you only need one instance of something. It is created at the start of your program and is passed to the constructor of the classes that need it. class Log { void logmessage(...) { // do some stuff } }; int main() { Log log; // do some more stuff } class Database { Log &_log; Database(Log &log) : _log(log) {} void Open(...) { _log.logmessage(whatever); } }; Using a singleton gives all of the capabilities of the Singleton anti-pattern but it makes your code more easily extensible, and it makes it testable (in the sense of the word defined in the Google testing blog). For example, we may decide that we need the ability to log to a web-service at some times as well, using the singleton we can easily do that without significant changes to the code. By comparison, the Singleton pattern is another name for a global variable. It is never used in production code.
