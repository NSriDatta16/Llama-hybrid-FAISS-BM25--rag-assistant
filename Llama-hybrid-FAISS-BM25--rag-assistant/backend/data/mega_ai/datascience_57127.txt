[site]: datascience
[post_id]: 57127
[parent_id]: 
[tags]: 
ANN structure for a multi-domain problem

I have certain problem that is composed of a steps A , B , C and D , i.e.: y = (A º B º C º D) x The analytical expression of these steps involves the use of Fourier Transform (FT) (actually the discrete variant, of course) to simplify the computations. One could say that some steps are expressed in simpler terms in the image domain and some in its Fourier dual. Some steps are both non-linear and non-invertible. I am interested in solving the inverse problem: x = (A º B º C º D)⁻¹ y Both x and y are actually 3D arrays. Since I could generate an arbitrarily large number of instances of x and y , an Artificial Neural Network (ANN) seems like an excellent candidate for efficiently solving this problem. While, in principle, a multi-layer perceptron could do the trick, it seems like this would be suffering from serious memory constrains. I know that for similar problems Convolutional Neural Networks (CNNs) have been used. To my understanding, the CNN-based approaches are exploiting the fact that some (hidden) convolutional transform of the data is sort-of-sparse and it will be modeled well by the hidden layers. This works under the assumption that the convolution kernel is small enough that a traditional fully-connected layer results in a substantial amount of weights being 0 as soon as they are far from the position of the neuron being trained. However, given the fact that some steps are simple in the Fourier domain, and hence the global Fourier transformation is used for some of the steps, I already know for sure that a local kernel is likely to fail. Hence, I thought a multi-domain approach, where the image and its Fourier transform are given as input, could have better odds at modeling this transformation. However, I am not clear how this could be modeled and implemented. Could anyone point me out to a reference dealing with a similar problem? The closest source I have found is this paper , but it looks to me that this is an even more complex approach (using wavelet transform) which is ultimately applied for classification (and not regression) and I find it quite hard to adapt this to my current problem.
