[site]: stackoverflow
[post_id]: 4174651
[parent_id]: 
[tags]: 
Weird segmentation fault errors

Ok, so im working on an assignment and for the life of me I cannot figure out why I am getting these segmentation faults. Im still in the process of learning c++, programming in general, so I was hoping someone wiser than me can help me out. The program is a self organizing binary search tree and I wasn't having too much difficulty with it until now. Here is the beginning of a main program I am using to test my class BST, I cannot alter the mian program since it is an assignment. int main() { string input; // get a list of integer values cout bst1(input); if (!bst1.empty()) { cout I have yet to get past the printInOrder() function, here is the code for that template void BST ::printInOrder(BSTNode* t) const { if (t->left != NULL) printInOrder(t->left); std::cout data right != NULL) printInOrder(t->right); } The really strange thing that is confusing me if that when I add a quick cout cout and it will also start printing some of the numbers in the tree before finally giving me a segmentation fault again. :/ So, I would be really grateful if someone could explain to me WTF is going on. The adding or subtracting of a simple cout line shouldn't change things like that should it? Also, I feel like there are better ways of debugging this, if anyone has techniques that they use to figure this stuff out, please share :) Thanks in advance! EDIT: I have tried the debugger GDB, I was unable to figure it out, but then again im not very well versed in the advanced features of debuggers so I might have missed something. The only other function that is even run, is the constructor to build from the string input. From what I could tell from the debugger is that the constructor seems to be working fine but nonetheless here's the code template BST ::BST(const std::string input, int th) { threshold = th; root = NULL; T v; // Make Input String Stream for easy use of >> operator std::istringstream iss (input); do { iss >> v; insert(v, root); }while(iss.good()); } EDIT2: Here is the code for my insert function, Thanks for the help everybody! :) template void BST ::insert(const T& v, BSTNode *&t) { if(t == NULL) { t = new BSTNode; t->left = NULL; t->right = NULL; t->data = v; t->searchCount = 0; } else if( v data ) insert(v, t->left); else insert(v, t->right); }
