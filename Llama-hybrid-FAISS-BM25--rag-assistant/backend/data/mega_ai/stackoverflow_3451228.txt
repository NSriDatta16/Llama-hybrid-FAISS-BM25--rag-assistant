[site]: stackoverflow
[post_id]: 3451228
[parent_id]: 
[tags]: 
Anonymous classes, temporary data, and collections of anonymous classes

I'm new to anonymous classes, and today I think I ran into the first case where I felt like I could really use them. I'm writing a method that would benefit from storing temporary data inside of a class, and since that class doesn't have any meaning outside of that method, using an anonymous class sure made sense to me (at least at the time it did). After starting on the coding, it sure seemed like I was going to have to make some concessions. I like to put assign things like calculations to temporary variables, so that during debugging I can verify bits of calculations at a time in logical chunks. Then I want to assign something simpler to the final value. This value would be in the anonymous class. The problem is that in order to implement my code with anonymous classes concisely, I'd like to use LINQ. The problem here is that I don't think you can do such temporary calculations inside of the statement. or can you? Here is a contrived example of what I want to do: namespace AnonymousClassTest { /// /// Interaction logic for Window1.xaml /// public partial class Window1 : Window { ObservableCollection Points { get; set; } public class RectanglePoints { public Point UL { get; set; } public Point UR { get; set; } public Point LL { get; set; } public Point LR { get; set; } } public class DontWantThis { public double Width { get; set; } public double Height { get; set; } } private Dictionary properties = new Dictionary (); private Dictionary scaling_factors = new Dictionary (); private void Sample() { // not possible to do temp variables, so need to have // longer, more unreadable assignments var widths_and_heights = from rp in Points select new { Width = (rp.UR.X - rp.UL.X) * scaling_factors[properties["dummy"]], Height = (rp.LL.Y - rp.UL.Y) * scaling_factors[properties["yummy"]] }; // or do it in a for loop -- but then you have to use a concrete // class to deal with the Width and Height storage List other_widths_and_heights = new List (); foreach( RectanglePoints rp in Points) { double base_width = rp.UR.X - rp.UL.X; double width_scaling_factor = scaling_factors[properties["dummy"]]; double base_height = rp.LL.Y - rp.UL.Y; double height_scaling_factor = scaling_factors[properties["yummy"]]; other_widths_and_heights.Add( new DontWantThis { Width=base_width * width_scaling_factor, Height=base_height * height_scaling_factor }); } // now we want to use the anonymous class, or concrete class, in the same function foreach( var wah in widths_and_heights) Console.WriteLine( String.Format( "{0} {1}", wah.Width, wah.Height)); foreach( DontWantThis dwt in other_widths_and_heights) Console.WriteLine( String.Format( "{0} {1}", dwt.Width, dwt.Height)); } public Window1() { InitializeComponent(); Points = new ObservableCollection (); Random rand = new Random(); for( int i=0; i NOTE: don't try to run this unless you actually add the keys to the Dictionary :) The creation of the anonymous class in LINQ is awesome, but forces me to do the calculation in one line. Imagine that the calc is way longer than what I've shown. But it is similar in that I will do some Dictionary lookups to get specific values. Debugging could be painful. The usage of a concrete class gets around this problem of using temporary variables, but then I can't do everything concisely. Yes, I realize that I'm being a little contradictory in saying that I'm looking for conciseness, while asking to be able to save temp variables in my LINQ statement. I was starting to try to create an anonymous class when looping over Points, but soon realized that I had no way to store it! You can't use a List because that just loses the entire anonymity of the class. Can anyone suggest a way to achieve what I'm looking for? Or some middle ground? I've read a few other questions here on StackOverflow, but none of them are exactly the same as mine.
