[site]: stackoverflow
[post_id]: 5759296
[parent_id]: 5759232
[tags]: 
Does the C++03 standard mandate that std::vector must have a constructor defined as above, i.e. with a default argument? In particular is there a guarantee that the entries of the vector object get copied instead of default constructed? Yes, the specified behavior is that x is copied n times so that the container is initialized to contain with n elements that are all copies of x . What does the C++11 Standard say about this same point? In C++11 this constructor has been turned into two constructors. vector(size_type n, const T& x, const Allocator& = Allocator()); // (1) explicit vector(size_type n); // (2) Except for the fact that it no longer has a default argument for the second parameter, (1) works the same way as it does in C++03: x is copied n times. In lieu of the default argument for x , (2) has been added. This constructor value-initializes n elements in the container. No copies are made. If you require the old behavior, you can ensure that (1) is called by providing a second argument to the constructor invocation: std::vector v(42, S()); I see this as a possibility for a breaking change between C++03 and C++11. I see this as a possibility for a breaking change between C++03 and C++11. Has this issue been investigated? Solved? Yes, as your example demonstrates, this is indeed a breaking change. As I am not a member of the C++ standardization committee (and I haven't paid particularly close attention to library-related papers in the mailings), I don't know to what degree this breaking change was discussed.
