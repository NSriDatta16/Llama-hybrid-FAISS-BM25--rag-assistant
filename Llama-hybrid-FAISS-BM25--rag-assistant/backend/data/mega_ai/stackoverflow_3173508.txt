[site]: stackoverflow
[post_id]: 3173508
[parent_id]: 3173228
[tags]: 
You thought right, master Javascript/CSS resources are the way to go. They can be easily updated, and you don't have to retype common functions, etc. If you have a sort of library such as script.aculo.us or jQuery, functions that are frequently used can stay up to date while saving bandwidth. For example, view-based applications (e.g. games, complex programs) load and display different "views" that may contain interactive HTML, images, and more. The actions of transitioning, showing, and transferring between views are pretty much universal and only have to be declared once. This also makes it easier to develop and focus more on the content rather than basic coding that is repetitive. Another handy technique is incorporating a common "structure" throughout the apps; things like icons, sounds, and views can have a predetermined "place" in the package/directory that are simple drag-n-drops. In my experience, bottlenecks aren't really a problem when dealing with simple javascript files The only trouble exists when server-side operations get involved. They are absolutely necessary, especially for finance, as well as games (logins, accounts, high scores). However, trying to create convenient universal server-side scripts are not a good idea. When a server has to filter several thousand scores (or accounts) and has other functions as well (that are also simultaneously requested), they get slow and cause bottlenecks which in turn slow everything down. The trick here is to have many low-function scripts that perform tasks efficiently, that can still be multi-purpose. Basically, creating and maintaining lots of applications demands lots of organization - but only at first. Once you've got something to build on, you're on a roll.
