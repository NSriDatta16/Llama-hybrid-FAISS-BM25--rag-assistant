[site]: stackoverflow
[post_id]: 1370464
[parent_id]: 1349640
[tags]: 
I would look at the article by Jeffrey Palermo on the Onion Architecture here . This basic architecture works well in any project and will allow you to separate your core project (domain layer, persistence, etc.) from your web project. We use this with MVC/StructureMap/FluentNHibernate and have had great success. We end up having a structure similar to the one below. > trunk + build (build scripts) + lib (external libraries) > src (source code) >> Organization.App (solution name) >> Organization.App.Core (code library) + Config > Domain > Model > Persistence > Queries > Services > Persistence > Services >> Organization.App.Web (mvc web app) > Assets + Images + Scripts + Stylesheets + Controllers + Views + ViewModels That's the basic idea. The web app references the core app for domain entities our repository/unit of work. Check out this older project on google code for a similar example. The great part about this is we have been able to add new "UI" project types to the same solution and re-use our core project as intended. Like a console app or a second web app, or whatever you need.
