[site]: stackoverflow
[post_id]: 456198
[parent_id]: 
[tags]: 
Code Ordering in Source Files - Forward Declarations vs "Don't Repeat Yourself"?

If you code in C and configure your compiler to insist that all functions are declared before they are used (or if you code in C++), then you can end up with one of (at least) two organizations for your source files. Either: Headers Forward declarations of (static) functions in this file External functions (primary entry points) Static - non-public - functions Or: Headers Static - non-public - functions External functions (primary entry points) I recognize that in C++, the term 'static' is not preferred, but I'm primarily a C programmer and the equivalent concept exists in C++, namely functions in an anonymous namespace within the file. Question: Which organization do you use, and why do you prefer it? For reference, my own code uses the second format so that the static functions are defined before they are used, so that there is no need to both declare them and define them, which saves on having the information about the function interfaces written out twice - which, in turn, reduces (marginally) the overhead when an internal interface needs to change. The downside to that is that the first functions defined in the file are the lowest-level routines - the ones that are called by functions defined later in the file - so rather than having the most important code at the top, it is nearer the bottom of the file. How much does it matter to you? I assume that all externally accessible functions are declared in headers, and that this form of repetition is necessary - I don't think that should be controversial.
