[site]: datascience
[post_id]: 18585
[parent_id]: 18581
[tags]: 
You can use something like this from sklearn.feature_extraction.text import TfidfVectorizer import pandas as pd tfidf_vectorizer = TfidfVectorizer() raw_data = pd.DataFrame(*raw_data, columns = ['id', 'is_identical', 'q1', 'q2']) data['tf_idf_q1'] = tfidf_vectorizer.fit_transform(data['q1']) data['tf_idf_q2'] = tfidf_vectorizer.fit_transform(data['q2']) data_for_model = data[['tf_idf_q1', 'tf_idf_q2', 'is_identical']] X = data_for_model[['tf_idf_q1', 'tf_idf_q2']].as_matrix() Y = data_for_model['is_identical'].as_matrix() model = Sklearn.LogisticRegression() model.fit(X, Y) Combined Model - here you actually learn the transformation for all questions. Then transform each one(question) separately to create features for your model training. from sklearn.feature_extraction.text import TfidfVectorizer import pandas as pd tfidf_vectorizer = TfidfVectorizer() raw_data = pd.DataFrame(*raw_data, columns = ['id', 'is_identical', 'q1', 'q2']) tf_train_data = pd.concat([data['q1'], data['q2']]) trained_tf_idf_transformer = tfidf_vectorizer.fit_transform(tf_train_data) data['tf_idf_q1'] = trained_tf_idf_transformer.transform(data['q1']) data['tf_idf_q2'] = trained_tf_idf_transformer.transform(data['q2']) data_for_model = data[['tf_idf_q1', 'tf_idf_q2', 'is_identical']] X = data_for_model[['tf_idf_q1', 'tf_idf_q2']].as_matrix() Y = data_for_model['is_identica'l].as_matrix() model = Sklearn.LogisticRegression() model.fit(X, Y)
