[site]: stackoverflow
[post_id]: 5311850
[parent_id]: 
[tags]: 
Reinitializing Java Class

We are working on a JVMTI Java Agent, that is used to instrument java class files. A small part of it is (obviously) native c++ code, but the larger part is Java code, which is loaded over the network and called from the native agent code. We use a code coverage tool to collect test coverage for the java part, which does source code instrumentation. Now when our agent starts, some classes get initialized, specifically java.lang.ref.Reference, which starts a Thread. Our Agent instruments the Thread start method with custom java code, which is instrumented by the code coverage tool. The coverage tool puts some static inner classes with static initializers in our java agent code, so this gets executed as a consequence of java.lang.ref.Reference getting initialized. The Problem is, that at this time (when java.lang.ref.Reference gets initialized), some basic functionality of the JVM is not in place yet. Specifically, the code coverage tools initializer wants to access System.getProperty(String name), but System.props is still null, so the call results in a NullPointerException. This leads to the static inner class of the code coverage tool is being left uninitialized, the class is in state initialization_error, the result is NoClassDefFoundError. Each follow up access to this class results in a NoClassDefFoundError. My intention now is to ignore this initial initialization error, and wait until VM_Start and then reset the ClassState of the class in question to "linked". This way i hope that the JVM will try to initialize the class again in follow up accesses to the class. Does anyone have an idea, if this can be done from the JVMTI Agent, and give me some suggestions how this could be done?
