[site]: crossvalidated
[post_id]: 304330
[parent_id]: 303888
[tags]: 
This will be a case of answering what you literally asked instead of solving your real problem. For the record, I think you need to learn to manage your boss better and protect him from making stupid decisions. To your literal question of how machine learning can imitate the current route planning: I think classification is your best shot (but most likely inferior to optimizing a relevant objective function heuristically). Since you need to imitate the human route planning approach in software, you need to schedule meetings with that employee. First find out how he does his decisions. If it turns out that he blindly applies a set of fixed rules that deterministically lead to the route planning, that's very easy to imitate. Just hard code those rules into some nested if-then-else statements inside loops and you're done imitating the status quo. (Which is likely a horribly inefficient status quo.) You will have put that employee out of a job. One the one hand, a job that consists solely of manual mechanic application of if-then-else statements doesn't deserve to be done by a human in the 21st century. On the other hand, the employee will be smart enough to know he is helping you destroy his own job so he might be reluctant to truly cooperate. If the decision making is quasi deterministic and there are only some rare cases where the deterministic rules don't apply you can still hard code the rules and implement a crude heuristic for the rest. More likely however, the employee has some considerable wiggle room for subjective assessment in many decisions. Classification can learn from his past decisions how he did use that wiggle room and imitate it. You need to transform your data in a standardized format with multiple predictor columns (which can be discrete or continuous) and one outcome column. Each line will be one tour and the outcome column can contain a number from $1,\ldots, k$ because it represents the decision you take on the tour level: which bus to assign this tour to. There is some subtlety involved in the $k$ classes. It would be better if your past data reflected bus 1 as "the first bus we filled with tours that day in our current planning heuristic" than if bus 1 meant "the physical object we call bus 1". It matters which bus you fill first, a heuristic optimization would automatically reflect that. Classification cannot do that unless your classes to learn from reflect that fill order. If you only have data on buses as physical objects, so be it, it will be one of many gross approximations you need to do. Ask the employee which information he considers when deciding which bus he wants to add a tour to. You can also ask him to rank those pieces of information in order of importance, but that's not so important since your classifier will be able to tell that from past data anyway. Whatever he tells you, be sure that start and end coordinates and start and end times are among the variables as they are strictly necessary. On that data-set you can train a classifier that needs to be able to find out on its own which variables were most important in making the decisions output not only classes but probability estimates for those classes Decision trees can do that. Random forests satisfy those conditions as well and are usually better at it, but are more difficult to interpret. Make use of the usual cross validation or bootstrapping techniques when tuning your classification algorithm. Usually in classification, you would assign each record to the class that it has the highest probability of belonging to. You obviously cannot do that here since you would schedule overlapping tours on a bus. You need to subject the classification outcomes to constraints to prevent that. Take the planned tours for one day and apply the following heuristic to the classification outcomes. (If you want to be able to decide to move tours to another day, forget it. A global optimization heuristic with an objective function could do that for you, but classification will not.) Look only at the early morning tours first. Select the the highest probability that any of those tours belongs to any bus as estimated by your classifier. Assign the tour of that probability to that bus and take it out of your list of tours to be assigned. Continue filling up that bus. Among the tours that start late enough so that the bus can get to their starting coordinates on time (you need a method to compute that) but not too late so that the bus doesn't have to wait too much and/or drive too far (you need to set an arbitrary limit whereas a more adequate optimization algorithm would compare that to a relevant objective function) select the one with the highest probability of belonging to your bus, assign it to the same bus and take it out of your list of tours to be assigned. Fill the bus till no more tour can be added after the last in the evening. Restart procedure at point 1. With the remaining tours and buses. Repeat till there are no more tours and buses. Repeat the entire procedure from 1-7 the next day on the classification outcomes of all tours for that day. I feel horrible suggesting this because you will be imperfectly imitating the imperfect status quo. There is no good reason to think the two imperfections would cancel out, but rather that they will add up. You will be hammering screws into the wall because your boss refuses to give you a screwdriver.
