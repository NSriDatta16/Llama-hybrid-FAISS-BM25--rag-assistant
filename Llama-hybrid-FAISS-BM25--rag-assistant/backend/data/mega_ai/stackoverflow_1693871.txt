[site]: stackoverflow
[post_id]: 1693871
[parent_id]: 
[tags]: 
Problem with priority_queue - Writing memory after heap

I am trying to use priority_queue, and program constantly fails with error message HEAP CORRUPTION DETECTED. here are the snippets: class CQueue { ... priority_queue , less ::value_type> > m_messages; ...}; class Message has overloaded operators > and Here I fill up queue: CQueue & operator+=(Message &rhv) { m_messages.push(rhv); //This is where program fails return *this; } and in the main program: string str; CQueue pq; for(int i = 0; i > str; Message p(str.c_str(), rand()%12); //Create message with random priority pq += p; //add it to queue } I have no idea what seems to be the problem. It happens when I push about 8 items, and it fails on line push_heap(c.begin(), c.end(), comp); in :( Here is the definition of message class - it's very simple: #pragma once #include #include #include using namespace std; class Poruka { private: char *m_tekst; int m_prioritet; public: Poruka():m_tekst(NULL), m_prioritet(-1){} Poruka(const char* tekst, const int prioritet) { if(NULL != tekst) { // try{ m_tekst = new char[strlen(tekst) + 1]; //} //catch(bad_alloc&) // { // throw; // } strcpy(m_tekst, tekst); } else { // try // { m_tekst = new char[1]; // } // catch(bad_alloc&) // { // throw; // } m_tekst[0] = '\0'; } m_prioritet = prioritet; } Poruka(const Poruka &p) { if(p.m_tekst != NULL) { //try //{ m_tekst = new char[strlen(p.m_tekst) + 1]; //} //catch(bad_alloc&) //{ // throw; //} strcpy(m_tekst, p.m_tekst); } else { m_tekst = NULL; } m_prioritet = p.m_prioritet; } ~Poruka() { delete [] m_tekst; } Poruka& operator=(const Poruka& rhv) { if(&rhv != this) { if(m_tekst != NULL) delete [] m_tekst; // try //{ m_tekst = new char[strlen(rhv.m_tekst + 1)]; //} //catch(bad_alloc&) //{ // throw; //} strcpy(m_tekst, rhv.m_tekst); m_prioritet = rhv.m_prioritet; } return *this; } friend ostream& operator (const Poruka& p1, const Poruka& p2) { return p2 =(const Poruka& p1, const Poruka& p2) { return !(p1 p2); } friend inline bool operator==(const Poruka& p1, const Poruka& p2) { return (!(p1 }; Poruka - Message
