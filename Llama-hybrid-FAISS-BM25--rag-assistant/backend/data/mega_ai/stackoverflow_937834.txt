[site]: stackoverflow
[post_id]: 937834
[parent_id]: 936400
[tags]: 
I would say that it isn't dead, but it's now fallen into the toolset of the architect as it is now understood where it can help and were it may not. There is no point using SOA to talk with your database because you want that integration to be tight and performant. But using it at the right spots can allow you to have nice clean interfaces between different parts of your organisations and possibly allow you to upgrade each system irrespective of the other. But in real life if your payroll system goes down, everyone would be most unhappy, just because your app may be able to limp without one of it's components doesn't mean that it won't affect your system. It's not possible to create systems that have knowledge only of an interface but not of the underlying system (I'll caveat that statement with: "that work well and are performant"). Take a web browser as an interesting example of this, every good website starts with "what browser are they using and fix my website and take advantage of feature xyz".
