[site]: stackoverflow
[post_id]: 1148777
[parent_id]: 1148631
[tags]: 
I think that Common Lisp fits your description quite well. 1.1: Performance: Modern CL implementations are almost on par with C. There are also foreign function interfaces to interact with C libraries, and many bindings are already done (e.g. the GNU Scientific Library). 1.2: High-level and elegant: Yep. 1.3: Primarily functional: Yes, but you can also "get imperative" wherever the need arises; CL is "multi-paradigm". 1.4: Portability: There are several implementations with differing support for each platform. Some links are at CLiki and ALU Wiki . 1.5: Object-oriented, preferably under the "everything is an object" philosophy: CLOS, the Common Lisp Object System, is much closer to being "object oriented" than any of the "curly" languages, and also has features you will sorely miss elsewhere, like multimethods. 2.1: "Not-too-strong" typing: CL has dynamic, strong typing, which seems to be what you want. 2.2: Tools: Emacs + SLIME (the Superior Lisp Interaction Mode for Emacs) is a very nice free IDE. There is also a plugin for Eclipse (Cusp), and the commercial CL implementations also oftem bring an own IDE. 2.3: Garbage collected, but translated or compiled without a virtual machine. The Lisp image that you will be working on is a kind of VM, but I think that's not what you mean. A further advantage is the incremental development: you have a REPL (read-eval-print-loop) running that provides a live interface into the running image. You can compile and recompile individual functions on the fly, and inspect the current program state on the live system. You have no forced interruptions due to compiling.
