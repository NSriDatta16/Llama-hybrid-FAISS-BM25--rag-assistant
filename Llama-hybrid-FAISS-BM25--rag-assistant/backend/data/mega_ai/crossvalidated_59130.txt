[site]: crossvalidated
[post_id]: 59130
[parent_id]: 58419
[tags]: 
I was writing my own weighted average algorithm yesterday and it applies to what you’re looking to do. Your problem is what you're calling returns_rate and the logic behind it. For these examples we have a new field called weighted_score or you could call it weighted_returns if you wanted. The point is that its weighted. id | name | count | returns | weight | weighted_score ----------------------------------------------------- 1 A 150 10 0.2 2 2 B 250 50 0.3 15 3 C 350 60 0.4 24 4 D 550 100 0.4 40 5 E 150 80 0.2 16 6 F 50 10 0.1 1 ----------------------------------------------------- sums 1.6 98 weighted_average 61.3 Logic: weighted_score = returns*weight weighted_average = sum(weighted_scores)/sum(weights) I see that you have some logic to determine the weight however your upper limit is 40%. There really should be 0% through 100% in there. You can also calculate the weight on the fly for any given data set by finding the highest “count” and dividing the “count” in each row by that highest number and this gives you the appropriate 0% - 100% weights. Example: id | name | count | returns | weight | weighted_score ----------------------------------------------------- 1 A 150 10 0.2727 2.7 2 B 250 50 0.4545 22.7 3 C 350 60 0.6364 38.2 4 D 550 100 1.0000 100 5 E 150 80 0.2727 21.8 6 F 50 10 0.0909 0.9 ----------------------------------------------------- sums 2.7273 186.3636 weighted_average 68.3 Logic: weight = count/550 Another simpler option that doesn’t require so much processing trying to figure out the appropriate weight is to just create a static variable to use as your ceiling. Any count lower than the ceiling will be weighted with lower importance and anything above the ceiling is weighted at 100%. id | name | count | returns | weight | weighted_score ----------------------------------------------------- 1 A 150 10 0.4983 2.7 2 B 250 50 0.8306 22.7 3 C 350 60 1.0000 38.2 4 D 550 100 1.0000 100 5 E 150 80 0.4983 21.8 6 F 50 10 0.1661 0.9 ----------------------------------------------------- sums 3.9934 248.0399 weighted_average 62.1 Logic: if(count 301) weight = count/count
