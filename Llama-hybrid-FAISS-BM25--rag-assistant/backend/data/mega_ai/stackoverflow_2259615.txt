[site]: stackoverflow
[post_id]: 2259615
[parent_id]: 2259544
[tags]: 
No. Technically, no. Unicode is a standard that defines code points and it does not require a particular encoding. So, you could use unicode with the UTF-8 encoding and then everything would fit in a one or a short sequence of char objects and it would even still be null-terminated. The problem with UTF-8 and UTF-16 is that s[i] is not necessarily a character any more, it might be just a piece of one, whereas with sufficiently wide characters you can preserve the abstraction that s[i] is a single character, tho it does not make strings fixed-length under various transformations. 32-bit integers are at least wide enough to solve the code point problem but they still don't handle corner cases, e.g., upcasing something can change the number of characters. So it turns out that the x[i] problem is not completely solved even by char32_t, and those other encodings make poor file formats. Your implied point, then, is quite valid: wchar_t is a failure, partly because Windows made it only 16 bits, and partly because it didn't solve every problem and was horribly incompatible with the byte stream abstraction.
