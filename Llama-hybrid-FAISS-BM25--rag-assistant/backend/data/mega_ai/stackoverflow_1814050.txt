[site]: stackoverflow
[post_id]: 1814050
[parent_id]: 1814035
[tags]: 
Others will probably tell you more specific stuff about PHP. However, I would argue that the most important thing to figure out is "who is going to read this and when". If you are writing some major API that you expect a lot of people to use and read, you need to offer a complete specification. A nice formal style that shows clearly what the parameters are, what the return values are, etc., may almost be mandatory. If you are not writing a world-class API but rather internal code, think about your readers. Most people who are ever going to read this are going to gloss through the code. They're going to instantiate a class or call a method to accomplish something, and they wouldn't care two cents about everything that they can probably figure out on their own. You're going to get only a second or two of attention while they skimming, and you have to make the best use of this. In these cases, a complete description, a full parameter listing, and so on are just going to be "visual noise". If you actually write something surprising or unique or important, it maybe missed. so you are better opting for just documenting what is unique, and not documenting otherwise. The presence of documentation would then be indicative to your reader that they actually want to read, rather than notice things that they expect otherwise. Beyond that, I would argue that you should always carefully design your class and especially your function so that nobody needs to read the documentation. If somebody needs to read "the short description" to know what your function does or what it takes, you've done a bad job of naming it or distinguishing it from others. Documentation should be a last resort, for conveying things that there is just no way to make obvious in the signature.
