[site]: stackoverflow
[post_id]: 3371410
[parent_id]: 3371342
[tags]: 
Depends what you mean by side effect - I mean, maybe PokeAround() does something important which needs to be done. How do you classify a side effect? Anyway, there's no particular technology/technique I'm aware of to guard against side effects as such in a single unit test, but as long as you have test coverage for all of your code, any unwanted side effects will hopefully get picked up by at least one test. BDD/Integration test tools will also help against this, as they (usually) test larger areas of functionality and not just individual classes/methods. One thing you might want to look at is Design By Contract (DBC). This lets you specify pre and post conditions, and also invariants, so that if a method is ever called with invalid parameters, returns invalid values, or the object gets into an invalid state, an error of some kind will be thrown.
