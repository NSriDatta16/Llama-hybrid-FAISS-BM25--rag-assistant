[site]: stackoverflow
[post_id]: 2332764
[parent_id]: 2332690
[tags]: 
You need help from macros. #include template struct cMemberExtractor { MemberType extract(const StructType* pStruct) const { const char* member_loc = reinterpret_cast (pStruct) + member_offset; return *(reinterpret_cast (member_loc)); } }; #define M_MEMBER_EXTRACTOR(STRU, MEMTYPE, MEMNAME) \ (cMemberExtractor ()) ... int data = M_MEMBER_EXTRACTOR(tStructA,int,memberB).extract(pUpdate); If your compiler supports the typeof operator, the MEMTYPE argument can be eliminated to help type safety. #define M_MEMBER_EXTRACTOR(STRU, MEMNAME) \ (cMemberExtractor MEMNAME),offsetof(STRU,MEMNAME)>()) ... int data = M_MEMBER_EXTRACTOR(tStructA,memberB).extract(pUpdate);
