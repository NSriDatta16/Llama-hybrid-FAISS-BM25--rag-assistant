[site]: stackoverflow
[post_id]: 2918766
[parent_id]: 2859766
[tags]: 
Hibernate will almost always retrieve object hierarchies using a single query; I don't recall seeing it do otherwise. It's easy to test, anyway. With this very simple mapping: @Entity public static class Person { @Id public String name; } @Entity public static class Student extends Person { public float averageGrade; } @Entity public static class Teacher extends Person { public float salary; } Then Hibernate gives me the following results for a very simple browse query ( sessionFactory.openSession().createCriteria(Person.class).list(); ). With @Inheritance(strategy = InheritanceType.SINGLE_TABLE) on the parent: select this_.name as name0_0_, this_.averageGrade as averageG3_0_0_, this_.salary as salary0_0_, this_.DTYPE as DTYPE0_0_ from HibernateTest$Person this_ With @Inheritance(strategy = InheritanceType.JOINED) on the parent: select this_.name as name0_0_, this_1_.averageGrade as averageG1_1_0_, this_2_.salary as salary2_0_, case when this_1_.name is not null then 1 when this_2_.name is not null then 2 when this_.name is not null then 0 end as clazz_0_ from HibernateTest$Person this_ left outer join HibernateTest$Student this_1_ on this_.name=this_1_.name left outer join HibernateTest$Teacher this_2_ on this_.name=this_2_.name With @Inheritance(strategy = InheritanceType.JOINED) on the parent: select this_.name as name0_0_, this_.averageGrade as averageG1_1_0_, this_.salary as salary2_0_, this_.clazz_ as clazz_0_ from ( select null as averageGrade, name, null as salary, 0 as clazz_ from HibernateTest$Person union select averageGrade, name, null as salary, 1 as clazz_ from HibernateTest$Student union select null as averageGrade, name, salary, 2 as clazz_ from HibernateTest$Teacher ) this_ As you can see, each is one query, with JOIN s or UNION s as appropriate depending on the mapping type.
