[site]: datascience
[post_id]: 9272
[parent_id]: 9169
[tags]: 
In the vein of bayesian optimization, I prefer Hyperopt, available on github at https://github.com/hyperopt/hyperopt or through pip, homepage of author at https://github.com/hyperopt/hyperopt . The tree-parzen-estimator algorithm behind it is described in the paper at http://papers.nips.cc/paper/4443-algorithms-for-hyper-parameter-optimization.pdf . You can define an arbitrary nested search space, and then tell it to find the optimum of a black-box function. Hyperopt also supports a built-in sklearn search space out of the box, but I have not used that, I've typically defined my own. There's also a few other bayesian optimization schemes around. I can't claim to know which one of them will come out on top as the "best" in the long run.
