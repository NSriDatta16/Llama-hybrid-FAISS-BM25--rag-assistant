[site]: crossvalidated
[post_id]: 630721
[parent_id]: 
[tags]: 
How would you deal with sparse and scattered 2d data in a way that makes physical sense?

I am currently analyzing rainfall data which is in longitude/latitude/value format i.e. a 2d matrix. That is, I have a series of values x,y,z such that x is the longitude, y is the latitude, and z is the value of the rainfall in mm at a certain time at that date. For example, a data point is 16.3738,48.2081,38 is the rainfall in mm in Vienna. I have lon/lat data to 4-decimal accuracy because the recordings stations are located there. I want to extrapolate this data to predict the rainfall over a given region and see how it compares to physical images of cloud coverage that we have of the region. However I do not know how to quite proceed because my data has the following characteristics: I have a lot of observations over Austria and almost none over Germany. I have some observations over Switzerland (more than Germany, less than Austria) and similarly for Hungary I tried to approach this as a matrix completion problem - I first bin my observations to a 2d matrix and then try imputation methods. However, none of my imputation methods tried so far (nearest neighbors, natural neighbors, splines) correspond to rainfall observed in terms of cloud coverage images over a region at a particular time. What kind of interpolation and extrapolation or other techniques would be useful in this situation to make the extrapolation physically relevant? Posed more formally, the problem is somewhat like: Given a list x,y,z of points where x,y correspond to element indices in an irregularly-filled matrix M , and z is the value of the element at that point, I want to construct a matrix M' such that M is completely filled and the values make physical sense when compared to real-life observations of how data should be distributed. I am stuck on this problem because the next step in my procedure would just be forecasting future rainfall and comparing it to cloud coverage and making predictive models, but I am not sure how to approach this at all.
