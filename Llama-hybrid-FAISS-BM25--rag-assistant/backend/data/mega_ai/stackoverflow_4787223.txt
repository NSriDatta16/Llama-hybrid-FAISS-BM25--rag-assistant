[site]: stackoverflow
[post_id]: 4787223
[parent_id]: 
[tags]: 
template functions with shared private data

I'm looking for 'best-practice' in the following situation: In general, there are three common ways to share private data between two (or more) non-member functions with differential advantages and disadvantages: // Example 1: using 'static' class // HPP namespace foo { class bar { private: static const char* const s_private; bar(); public: static void s_method0(); static void s_method1(); }; /* class bar */ } /* namespace foo */ // CPP namespace foo { const char* const bar::s_private = "why do I need to be visible in HPP?"; void bar::s_method0() { std::cout I prefer 'Example 3' because it's as close to the intention as it could be. But now I'm running in some problem's using templated functions. 'Example 1' seems to be the only way to solve this: // HPP namespace foo { class bar { private: static const char* const s_private; bar(); public: template static void s_method0() { std::cout static void s_method1() { std::cout That's unsatisfying. Especialy because there are other (in this case methods) non-member function which should be in the same (in this case class-) scope, which don't need to access this private data. Does anybody know an elegant solution? Thanks for any help. Best regards.
