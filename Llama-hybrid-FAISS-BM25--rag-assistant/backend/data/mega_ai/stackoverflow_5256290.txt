[site]: stackoverflow
[post_id]: 5256290
[parent_id]: 4564622
[tags]: 
Non of those methods you mention really worked for me... Currently I'm using pear to install and manage upgrades of core and community modules, and committing entire magento structure into the git repository with the following .gitignore file: # Dynamic data that doesn't need to be in the repo /var/* /media/* /downloader/pearlib/cache/* /downloader/pearlib/download/* /app/etc/use_cache.ser local.xml and using the following shell command to keep empty directories: for i in $(find . -type d -regex ``./[^.].*'' -empty); do touch $i"/.gitignore"; done; Another idea I thought about it's to give a try a vendor branching model, but I'm afraid it will add extra headache especially in case of some large dependency trees, i.e. for the real efficiency it's must be integrated on the pear level, i.e. every downloaded module must be branched automatically, so, for now it's seems good to use with paid extensions only. I was tried to fire up the subject on magento forum, but also didn't got any replies: http://www.magentocommerce.com/boards/viewthread/78976/ Update: Magento Composer Installer - worth looking. Composer becoming standard dependency management tool for PHP, so, you'll get much more advantages utilizing it with in your project. You won't need commit nor branch extensions, themes, libs into your project tree, but always have proper versions and dependencies. Thanks.
