[site]: stackoverflow
[post_id]: 518165
[parent_id]: 517977
[tags]: 
Unit Testing (UT) != Test Driven Design (TDD) This confusion seems to be fairly common. UT is all about code coverage. TDD is concerned with features . They are not the same thing [sorry Joel!] With UT, you write whatever code you want to, then go back and test every single function (even some of the trivial ones). With TDD, you select the next feature and write the test for that feature first . Write only the test for that feature, and test coverage is irrelevant . You write the test first to force interface decisions to be made up front. Then you write the code to pass the test (bearing in mind the 'simplest thing that can possibly work'). Then you refactor the code based on what you've learned. Then you go on to the next feature (presumably after check-in and re-running all unit tests). If desired, develop using TDD then go back and complete coverage with UT tools. If you're creating a class library or other API for developers to use, the more test coverage the better ;-) If you're just writing an app to do five specific things, TDD alone should be sufficient.
