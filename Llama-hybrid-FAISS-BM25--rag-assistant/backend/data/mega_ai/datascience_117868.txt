[site]: datascience
[post_id]: 117868
[parent_id]: 
[tags]: 
Measure distance between teeth using Machine Learning

I'm a newbie in ML and I have a problem I am stuck on. I want to train a ML model to recognize dental diagnosis based on photos and x-rays of the patient. Specifically right now, I want to find a way to measure the overbite . It is defined as The length on the bottom tooth that is covered by the top tooth So if my top tooth slightly covers the bottom one, the overbite will be low. Here's an example of a small 1-2mm overbite and another of a large 5-7mm overbite . A typical x-ray might look like this: You can see the ruler on the top right as a reference object to measure the gap between the top frontal jaw vs. bottom jaw. In this case, the overbite is measured to be 5-7mm . In my dataset I have about 7,000 x-rays where the overbite is one of seven values: (-3)mm+ | 0-(-2)mm | 1-2mm | 3-4mm | 5-7mm | 8mm+ | Normal Keep in mind my classes are not balanced. (-3)mm+ 99 0-(-2)mm 515 1-2mm 2376 3-4mm 3059 5-7mm 846 8mm+ 8 Normal 36 How can I train an ML model to find the distance better? Things I have tried: Increase how much data I use. (Went from 900 -> 3,800 -> 7,000) Using a simple CNN (Val accuracy 46%) Tweak the layers setup and hyper-parameters (No difference) Apply class_weights Fine-tuning a pre-trained ResNet50 model (Val accuracy 51%) EDIT: To add context my images are (512,512,3) and this is my latest architecture: OG_IMG_SHAPE = (IMG_SIZE, IMG_SIZE, color_channels) input_shape = (None,) + OG_IMG_SHAPE num_classes = len(class_names) inputs = tf.keras.Input(shape=OG_IMG_SHAPE) x = data_augmentation(inputs) x = resize_and_rescale(x) x = tf.keras.applications.resnet50.preprocess_input(x) x = resnet50_base_model(x, training=False) x = layers.GlobalAveragePooling2D()(x) x = layers.Dropout(0.2)(x) outputs = layers.Dense(num_classes)(x) model = tf.keras.Model(inputs, outputs) base_learning_rate = 0.0001 model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=base_learning_rate), loss=tf.keras.losses.CategoricalCrossentropy(), metrics=['accuracy', 'mse']) model.build(OG_IMG_SHAPE) model.summary()
