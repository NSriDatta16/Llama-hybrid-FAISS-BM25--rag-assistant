[site]: stackoverflow
[post_id]: 4323585
[parent_id]: 4322688
[tags]: 
. The problem with your code is that every ComboBox is using the same instance of CollectionViewSource ; that means, the resource with key "DetailScopes" is shared by all ComboBox, so whenever you select one value from a particular ComboBox, it automatically selects the same value in all ComboBox. It's because the underlying collection which is shared, keeps track of the selected item, and since it changes on selecting from one ComboBox, the CollectionViewSource notifies the change to ALL ComboBox . So the solution is very simple. All you need to make DetailScopes resource unsharable . Here is the fix: Hope it solves your problem! However, this solution will cause another problem. Let me quote something from MSDN, so that you'll understand what x:Shared does. x:Shared Attribute When set to false, modifies WPF resource-retrieval behavior so that requests for the attributed resource create a new instance for each request instead of sharing the same instance for all requests. Since x:Shared causes to create a new instance (a new copy) of the resource whenever you attempt to access it, that means, the Filter handler method is attached only to the instance which you get in the code-behind, not all the instances. So in order to work your handler properly, you need to attach the Handler from XAML itself, like this: Hope it solves all your problems. Let me know if you still face any.:-) Oh by the way, the following code-behind is not needed anymore. So please remove it. // Attach filter to the collection view source detailScopes = this.Resources["DetailScopes"] as CollectionViewSource; detailScopes.Filter += new FilterEventHandler(DetailScopesFilter); .
