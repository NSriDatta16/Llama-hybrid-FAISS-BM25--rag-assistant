[site]: crossvalidated
[post_id]: 493030
[parent_id]: 
[tags]: 
Estimating tracing observation with low probability

A short version of the question: y likelihood 0 161.711019 1.000000 1 163.758187 0.999991 2 293.081999 0.000392 3 293.300179 0.000544 4 293.419239 0.000496 ... ... ... 3856 480.109953 0.114462 3857 457.955736 0.000998 3858 482.110017 0.000090 3859 483.876531 0.000039 3860 479.902427 0.000019 I just need someone to direct me to resources on how to solve this problem. Or even as short as what is the name is this kind of question: As you can see from the table above, there are y-coordinates and their likelihood accordingly. How do I use a (machine learning) model to learn the pattern and rates of changes (acceleration) to estimate and replace the y values with low likelihood ? More background: For example, one naive approach will be replacing y values y_t with a likelihood of less than 0.8 with the mean of the points before and after it, i.e. y_t = (y_{t-1} + y_{t+1})/2 . Not only this method has lots of problems such as "What if two points in a row have low likelihood?", but more importantly, it doesn't take any characteristic of the data into account. What if we learn from the data that it's more of a parabola looking curve, as a simple example. The above data is y coordinates of a mouse's foot on a rotarod observed and generated by DeepLabCut (DLC). DLC uses DNN to learn and mark a body part of an object that we specify. Because the mouse is on the rotarod and the camera is only seeing their rear, the foot will sometimes disappear from the frame (going to the front of the rotarod). In which case, DLC gives crazy non-sense value with (thankfully) low likelihood, such as the rows with index 2 or 3865. (The labellings with likelihood > 0.9 is 50% of the data, as per calculation. The near end of the data gives blizzard values with low likelihood because the mouse fell off from the rotarod.) Hence, I would like to know the answer to my question posed at the beginning of the post. I have looked into the followings: Continuous-Time Hidden Markov Model State Space Model GPS tracing Kalman filter I am still not sure which one's most appropriate. They all don't seem to fit my situation perfectly. Any suggestions will be appreciated. Thank you!!!
