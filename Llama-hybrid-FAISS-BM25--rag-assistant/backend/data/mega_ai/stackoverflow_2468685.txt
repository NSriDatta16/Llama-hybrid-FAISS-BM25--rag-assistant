[site]: stackoverflow
[post_id]: 2468685
[parent_id]: 2468606
[tags]: 
One method that I would use is that you implement your own authentication system - almost like the ASP.NET 1.x days. However, the trick is that you establish a cookie for each domain (host part of the URL) with an authentication cookie. If all of those systems are running on the same server, I am sure you will be able to use all the FormsAuthentication methods and the Membership API. If they are not [edit: hosted on the same server], then ensure that they configured to encrypt the authentication cookies with the same keys. Implementation of this bit will be by what mileage you need to do... One thing to notice is that you may also establish only one cookie is sent to the browser but shared by all the applications. Imagine that you have the following URL's: dashboard.com myapp1.dashboard.com myapp2.dashboard.com myapp3.dashboard.com Setting a single cookie to the domain "dashboard.com" will send and share the same cookie to all the other domains. The shared session states as described by the other posters will not work. The way session variables work on the server is that an unique key is generated on the server for your data storage (whatever the medium is: in proc, out of proc, SQL server). That unique key is stored in a cookie where it is sent to your browser as the host part. I hope that gives you some insight on how to go about tackling the single sign in solution that you are making.
