[site]: stackoverflow
[post_id]: 4318775
[parent_id]: 4318206
[tags]: 
Well, why don't you try something like this? HierarchicalDataTemplate Node Class public class Node { public string Name { get; set; } public ObservableCollection SubItems { get; set; } public SolidColorBrush ForegroundColor { get; set; } public Node(string name, Color foregroundColor, params Node[] items) { this.Name = name; this.SubItems = new ObservableCollection (items); this.ForegroundColor = new SolidColorBrush(foregroundColor); } } Example Data public partial class MainPage : UserControl { public ObservableCollection Nodes { get; set; } public MainPage() { InitializeComponent(); this.Nodes = new Node("Root", Colors.Blue, new Node("File1", Colors.Black), new Node("File2", Colors.Black), new Node("Archive1", Colors.Red, new Node("File3", Colors.Magenta), new Node("File4", Colors.Magenta)) ).SubItems; treeView1.DataContext = this; } } In your case maybe could help an interface (INode for example) that has all the properties for styling nodes (like ForegroundColor, or whatever) that will be implemented by each type of subclass (Archive, Photo, Music). Hope this helps.
