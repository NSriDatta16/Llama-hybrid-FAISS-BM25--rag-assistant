[site]: stackoverflow
[post_id]: 4015942
[parent_id]: 3799930
[tags]: 
To add a few more (less PHP orientated) points to the mix, which will enhance both the user experience and make your app more professional, but which handle the back-end: Good compression/minification Often Web Apps send a large number of requests both at load and through the course of their use. Minification can help reduce initial load weight as can the use of CSS sprites and GZipping content. A great way of helping you streamline and make your Application as quick as possible is Yahoo's YSlow plugin for Firefox's Firebug Extension: Firebug: http://getfirebug.com/ YSlow: http://developer.yahoo.com/yslow/ Also- some good practices: http://developer.yahoo.com/performance/rules.html YSlow will help identify how you can really make your Application neat and tidy, quick and clean. I'd also recommend PHP Minify to take care of much of the file compression, its a very capable tool: PHP Minify: http://code.google.com/p/minify/ Plus another reason for getting Firebug is the huge benefits it gives when developing any Web App, not least of which is identifying exactly how secure the App is, as during operation as you can track the data flows created. Obfuscation ---split out to more detailed answer below Good use of Apache rewrite Apart from the basic benefits of serving up clean URLs to enhance the browsing experience and giving the impression of logically filed content, a good .htaccess file can add additional layers of security to your site, compress content server side and add additional identifiers (E-Tags for example, though their benefit is arguable). Every Web App should also have a well written .htaccess. Compatability/Validation I would always strongly urge any developer to go to the most extensive (reasonable) lengths to make sure all their output code is Valid, Commented, Logical and Clean. The W3C do a fantastic job of clearly speccing not only HTML, but also how Web Apps should operate. Follow their guidance to increase the compatability of anything you write, to ensure it works for everyone how you envisage it to. Some great tools: HTML validator: http://validator.w3.org/ Other validation: http://validator.w3.org/unicorn/ Some specs to be aware of: The W3C Web Applications (WebApps) Working Group: http://www.w3.org/2008/webapps/ W3C Accessibility Guidelines: http://www.w3.org/WAI/guid-tech.html W3C WAI-ARIA initiative: http://www.w3.org/WAI/intro/aria.php On the Javascript side, JS lint is a great tool to make sure any bugs in your JS (that may not impact performance when you check) are squashed: JSLint: http://www.jslint.com/ And by proxy, to aid development, beautified JS can help you structure your code better for development, pre minification: http://jsbeautifier.org/ Or beautified PHP of course... http://beta.phpformatter.com/ Finally- something a little less black and white Humanisation Perhaps one of the greatest benefits of producing web based applications is the connectivity they can provide, not only between users (in order to encourage collaborative work), but also between users and the app itself as well as those responsible for its ongoing development and maintenance. If you think of projects like 37 Signals- one of the appealing factors is they impart the feeling to the user that the project (code) itself has been humanised and has a character, helping to draw the user in and associate with the app, encouraging enjoyment of use and communication of it to others. I dont mean that the app seems 'alive', but more that it feels more 'approachable' and users can 'identify' with it. However, this is only one side of the humanisation coin, the quest to almost make users 'empathise' with the app/code/framework/experience so they are drawn in an encouraged to use it. The other side is to break down the boundary between the app, and those behind it. We all like to know the person, people etc behind what we use- as we impart much information from them and often illogically apply it to the app itself, and indeed our 'like' of it (i.e. like Steve Jobs, buy Apple etc..though admittedly a wayward example). Having a route by which we can contact a real person in event of difficulty is one simple step, having a developers blog, news stream etc- building out a humanised metaverse around the app gives it credibility and the feeling that it is perhaps greater than the sum of its parts. Admittedly humanisation may be neither here or there- and it's certainly very difficult to build (in the same way different people have different friends), but any way a developer can sand down the edges of a more clinical, surgical app and make it more comfortable and approachable and fun for the every day user is a winner in my book.
