[site]: stackoverflow
[post_id]: 1306279
[parent_id]: 
[tags]: 
Pros & Cons of Google App Engine

[An Updated List 21st Aug 09] Help me Compile a List of all the Advantages & Disadvantages of Building an Application on the Google App Engine Pros: No need to buy servers or server space (no maintenance). Makes solving the problem of scaling easier. Free up to a certain level of consumed resources. Cons: Locked into Google App Engine ? Developers have read-only access to the filesystem on App Engine. App Engine can only execute code called from an HTTP request (except for scheduled background tasks). Users may upload arbitrary Python modules, but only if they are pure-Python; C and Pyrex modules are not supported. App Engine limits the maximum rows returned from an entity get to 1000 rows per Datastore call. ( Update - App Engine now supports cursors for accessing larger queries) Java applications may only use a subset (The JRE Class White List) of the classes from the JRE standard edition. Java applications cannot create new threads. Known Issues!! : http://code.google.com/p/googleappengine/issues/list Hard limits Apps per developer - 10 Time per request - 30 sec Files per app - 3,000 HTTP response size - 10 MB Datastore item size - 1 MB Application code size - 150 MB Update Blob store now allows storage of files up to 50MB Pro or Con? App Engine's infrastructure removes many of the system administration and development challenges of building applications to scale to millions of hits. Google handles deploying code to a cluster, monitoring, failover, and launching application instances as necessary. While other services let users install and configure nearly any *NIX compatible software, App Engine requires developers to use Python or Java as the programming language and a limited set of APIs. Current APIs allow storing and retrieving data from a BigTable non-relational database; making HTTP requests; sending e-mail; manipulating images; and caching. Most existing Web applications can't run on App Engine without modification, because they require a relational database.
