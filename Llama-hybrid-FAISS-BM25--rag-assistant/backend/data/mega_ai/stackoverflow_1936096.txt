[site]: stackoverflow
[post_id]: 1936096
[parent_id]: 1936085
[tags]: 
This page on the Python wiki highlights the main differences and the common elements between Python and PHP: Compared as Languages What strengths does PHP have that Python doesn't? the 'switch' statement and 'do ... while' construct. increment and decrement and assignment operators (assignment is a statement only in Python). the ternary operator/statement (... ? ... : ...). Retort: Python 2.5 has conditional expressions. an expedient (commonly installed) environment one array type that doubles as a list and a dictionary. Dictionary keys are iterated in their original order. private, protected and public modifiers for both properties and methods abstract and final modifiers for both classes and methods interfaces. Note: as Python has multiple inheritance, there's less need for interfaces. Also Python 2.6 has introduced Abstract Base Classes. variable variables default arguments in functions embedding in HTML (Note: mod_python has this as well). a wide range of byte-code caches available. What weaknesses does PHP have that Python doesn't? (more verbose) syntax from C/C++ and Perl, with lots curly braces and dollar signs and "->"-s confused tableau of function names. The builtin library has a wide variety of naming conventions. Functions often have prefixes to denote their source (but often not). Functions are often placed into classes to simulate namespaces. a somewhat weak type system (not to be confused with dynamic types). What does Python have that PHP doesn't? indentation is used to mark out block structure rather than curly braces. Retort: PHP curly braces make it work with HTML more easy. modules Rules that help catching typos more; reading an undefined variable is an error, it's not silently treated as if it was null. Retort: PHP will issue E_NOTICE. This will be shown in a develop environment. Counter-retort: It's still dangerous in production environment. As of the development, it's extra hassle to configure, watch logs, etc., when it could just stop, as you are supposed to eliminate these problems anyway. That PHP still has the more easy-going approach is probably because people have utilized undefined vars a lot in existing code base, so they couldn't fix this. a small core (language or runtime?) retort: it is not entirely true (substance needed) very clear, concise, and orthogonal syntax keyword arguments (i.e., parameters passed by name instead of by position) to functions and methods, easy support for default arguments Retort: PHP have default arguments Counter-retort: Defaults are much less useful without keyword arguments true object orientation and 'first class' classes and functions Retort: OO has been completely revamped in PHP 5 Counter-retort: But it's still painful, obviously a hack classes are used extensively in the standard library. Retort: PHP 5 has SPL which is fully class-based multiple inheritance object-oriented file handling excellent introspection Retort: PHP 5 Reflection Counter-retort: We said excellent introspection everything is a reference! (references are painful in PHP) Retort: Not in PHP 5 Counter-retort: note that arrays are still passed around by value (unless you add an explicit &) Retort: You won't accidentally modify it. consistent case sensitivity (PHP functions are case insensitive, but variables are case sensitive) a simple array slicing syntax iterators Retort: in PHP 5 structured exception handling Retort: in PHP 5 Counter-retort: where are PHP 5's equivalent of else and finally? Counter-retort 2: unfortunately most standard PHP functions don't use exceptions for reporting errors, which makes structured exception handling much less useful 'finally' made it in PHP 5.5 operator overloading Retort: In PHP you can use runkit extension to emulate the same feature Counter-retort: "In PHP you have to use runkit extension to emulate the same feature" SWIG integration threading Retort: Python have Global Interpreter Lock so it's not really parallel "with ... as" statement to deal with resources that need closing reliably and concisely an excellent profiler Retort: XDebug, a debugging and profiling extension, that supports both PHP4 and PHP5 is extremely popular lots of high-level data types (lists, tuples, dicts, DateTimes, NumPy arrays, etc.) Retort: PHP had SPL Types which is included in PHP5 as a standard library differentiation between arrays (lists) and associative arrays (dictionaries). Retort: PHP array is more flexible. In case developer want a true array, just use FixedArray in PHP SPL support for all major GUI frameworks strong internationalization and UNICODE support Retort: PHP 6 will include Unicode support. This feature is available in PHP5.2 and PHP5.3 via intl extension which can be found at pecl.php.net Retort: PHP have mbstring for Unicode tends to lead to much more scalable applications -- importing modules is safer than textually including code as in PHP: global variables are not used to exchange information. Compared as Web Development Frameworks Unlike PHP, which has web development features built directly into the core language, Python's web development capabilities are provided by add-on modules. Basic CGI capabilities are provided by the 'cgi' module which comes in Python's standard library. There's also a wide range of third-party modules available for Python; some are complementary, others compete. As a result, Python provides a more flexible base for web development. There are some adverse side effects of this flexibility. First, the range of choices can be bewildering. Unless you are working experienced Python web developers, PHP is easier to get started with. Second, support for PHP is more common with shared-hosting companies than support for the various Python options. Another difference is that PHP is embedded in the web server, whereas Python web applications can either be embedded in the web server like PHP or run in a separate process. Here's a simple classification of Python web development platforms: emdedded in the web server process Apache modules (eg. mod_python) embed the Python interpreter in Apache and allow other Apache modules to be written with Python. This is the same idea as mod_perl. PyWX is an extension to AOLServer that serves the same purpose as the Apache modules above. MS ASP scripts can be written using Python via Active Scripting Host. running in a separate process non-persistent process (a new process is spawned for each request) custom CGI scripts persistent process (all requests are sent from the web server to one persistent process) custom Fast-CGI scripts 'Application Servers' (eg. Zope, Webware, SkunkWeb) (Note: It's possible to write a long-running server in PHP, but there are precious few examples of it.) The vast majority of Python Web applications are run in a separate process. This has some important implications. Security PHP has historically had a horrible history when it comes to security. See the following article as an example: http://old.lwn.net/2001/0704/a/study-in-scarlet.php3 (Note: This article was published 10 years ago, and is no longer valid for more than an idea of PHPs history with security). Community Support PHP: huge installed user base, but the figures are probably distorted by shared hosting low signal-to-noise ratio -- because PHP is so expedient, many of the users are not invested in the technology (or even their own code) or the community Python: sizable, but not huge, installed user base Python Software Foundation lots of specialized interest groups very high signal-to-noise ratio Commercial Support PHP http://www.zend.com Python See the CommercialServices page for more information.
