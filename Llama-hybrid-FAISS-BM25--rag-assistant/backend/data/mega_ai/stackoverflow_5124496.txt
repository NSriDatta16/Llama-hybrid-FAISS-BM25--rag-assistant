[site]: stackoverflow
[post_id]: 5124496
[parent_id]: 
[tags]: 
Garbage collection was invented by John McCarthy around 1959 to solve problems in lisp . Garbage collection is often portrayed as the opposite of manual memory management, which requires the programmer to specify which objects to deallocate and return to the memory system. However, many systems use a combination of the two approaches, and other techniques such as stack allocation and region inference can carve off parts of the problem. There is an ambiguity of terms, as theory often uses the terms manual garbage collection and automatic garbage collection rather than manual memory management and garbage collection, and does not restrict garbage collection to memory management, rather considering that any logical or physical resource may be garbage collected. Garbage collection does not traditionally manage limited resources other than memory that typical programs use, such as network sockets, database handles, user interaction windows, and file and device descriptors. Methods used to manage such resources, particularly destructors, may suffice as well to manage memory, leaving no need for GC. Some GC systems allow such other resources to be associated with a region of memory that, when collected, causes the other resource to be reclaimed; this is called finalization. Finalization may introduce complications limiting its usability, such as intolerable latency between disuse and reclaim of especially limited resources, or a lack of control over which thread performs the work of reclaiming. Real-time garbage collection While garbage collection is generally nondeterministic, it is possible to use it in hard real-time systems. A real-time garbage collector (while being a daemon thread) should guarantee that even in the worst case it will dedicate a certain number of computational resources to mutator threads. Constraints imposed on a real-time garbage collector are usually either work based or time based. A time based constraint would look like: within each time window of duration T, mutator threads should be allowed to run at least for Tm time. For work based analysis, MMU (minimal mutator utilization) is usually used as a real time constraint for the garbage collection algorithm. References General Garbage collection (Wikipedia) The Garbage Collection Page , by Richard Jones The Garbage Collection Handbook: The Art of Automatic Memory Management , by Richard Jones, Antony Hosking, & Eliot Moss (2011) Garbage Collection: Algorithms for Automatic Dynamic Memory Management by Richard Jones & Rafael D. Lins (1996) A Real-Time Garbage Collector Based on the Lifetimes of Objects Paul Wilson's survey of "Uniprocessor Garbage Collection Techniques" (1992, LNCS vol. 637) .NET Garbage Collection on MSDN Java Java Concurrency In Practice Tuning Garbage Collection with the 8.0 JVM (Java) Smalltalk Squeak: Open Personal Computing and Multimedia by Mark J. Guzdial & Kimberly M. Rose, covering the Squeak Smalltalk garbage collector and other Smalltalk design issues. Squeak is almost exclusively written in Smalltalk and all of the source—including the garbage collector—is freely available and easy to study using Smalltalk browsers. Theoretical/Academic Professor Kathryn McKinley maintains a list of papers for her Memory Management course at the University of Texas online. (Note that the links to these papers that are provided below are from freely available versions; almost all of which are hosted by a university and retrieved using Google Scholar.) If you want to gain a complete theoretical understanding of garbage collection, you should read these papers in order—they are arranged in progressive difficulty of subject matter (not chronologically): List processing in real time on a serial computer , Baker, CACM, 21(4) 280--294, 1978. A nonrecursive list compacting algorithm , Cheney, CACM, 13(11): 677--678, 1970. A Real-time garbage collector based on the lifetimes of objects , Lieberman & Hewitt, CACM, 26(6): 419--429, 1983. (This one downloads) Generation scavenging: A non-disruptive high-performance storage reclamation algorithm , Ungar, Proceedings of the first ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, 1984, pages 157--167. Simple generational garbage collection and fast allocation , Appel, Software--Practice and Experience 19(2):171-183, February 1989. Age-Based Garbage Collection , D. Stefanovic, K. S. McKinley, J. E. B. Moss, ACM Conference on Object-Oriented Programming Systems, Languages and Applications. (OOPSLA), pp. 370--381. Denver CO, November 1999. Older-first Garbage Collection in Practice: Evaluation in a Java Virtual Machine , D. Stefanovic, M. Hertz, S. M. Blackburn, K. S. McKinley, and J. E. B. Moss, Memory System Performance, Berlin, Germany, pp. 175--184, June 2002. Beltway: Getting Around Garbage Collection Gridlock , S. M. Blackburn, R. Jones, K. S. McKinley, and J. E. B. Moss, ACM Conference on Programming Language Design and Implementation, Berlin, Germany, pp. 153--164, June 2002. An efficient machine-independent procedure for garbage collection in various list structures , Schorr & Waite, CACM, 10(8): 501--506, 1967. Comparison of compacting algorithms for garbage collection , Cohen & Nicolau, ACM Transactions on Programming Languages and Systems (TOPLAS), Volume 5, Issue 4, pages 532--553, October 1983. MC2: High-Performance Garbage Collection for Memory-Constrained Environments , Sachindran, Berger & Moss, ACM Conference on Object-Oriented Programming Systems, Languages and Applications, pp. 81-96, Vancouver, BC, October 2004. Immix: A Mark-Region Garbage Collector with Space Efficiency, Fast Collection, and Mutator Performance , Blackburn & McKinley, ACM Conference on Programming Language Design and Implementation, pp.22--32, Tucson, AZ, June 2008. An Efficient Incremental Automatic Garbage Collector , Deutsch & Bobrow, CACM, 19(9): 522--526, September 1976. Ulterior Reference Counting: Fast Garbage Collection without the Wait , S. M. Blackburn and K. S. McKinley , Proceedings of the ACM 2003 SIGPLAN Conference on Object-Oriented Programming Systems, Languages and Applications, pp. 344-359, Annehiem, CA, October 2003. Cycle Tracing: Efficient Concurrent Mark-Sweep Cycle Collection , Frampton & Blackburn, 2009. (In submission to ISMM.) Multiprocessing compactifying garbage collection , Guy L. Steele, Jr., CACM 18(9): 495-508, 1975. On-the-fly garbage collection: an exercise in cooperation , E. W. Dijkstra, L. Lamport, A. J. Martin, C. S. Scholten, and E. F. M. Steffens, Communications of the ACM, 21(11):966--975, November 1978. Correctness-Preserving Derivation of Concurrent Garbage Collection Algorithms , Vechev, Yahav, and Bacon, ACM Conference on Programming Language Design and Implementation, Ottawa, Ontario, pp. 341-353, 2006. A Real-time Garbage Collector with Low Overhead and Consistent Utilization , Bacon, Cheng, and Rajan, ACM Symposium on Principles of Programming Languages, New Orleans, Louisiana, pp. 285-298, 2003. (This one downloads) Tax-and-spend: democratic scheduling for real-time garbage collection , Auerbach, Bacon, Cheng, Grove, Biron, Gracie, McCloskey, Micic, and Sciampacone, ACM International Conference On Embedded Software, Atlanta, GA, pp. 245-254, 2008. (This one downloads) Garbage collection in an uncooperative environment , H. Boehm and M. Weiser, Software Practice and Experience, 18(9):807-820, 1988. Hoard: A Scalable Memory Allocator for Multithreaded Applications , E. D. Berger, K. S. McKinley, R. D. Blumofe, and P. R. Wilson, The Ninth International Conference on Architectural Support for Programming Languages and Operating Systems, Cambridge, MA, pp. 117--128, November 2000. Cork: Dynamic Memory Leak Detection for Garbage-Collected Languages ,Jump & McKinley, In submission to ACM Transactions on Software Practice & Experience, 2009. (Abbreviated version appears in ACM Conference on Programming Languagesm, Nice, France, January 2009.) Leak Pruning , Bond & McKinley, ACM Conference on Architecture Support for Programming Languages and Operating Systems, Washington, DC, March 2009. (To appear.) Free-me: A Static Analysis for Individual Object Reclamation , Guyer & McKinley, ACM Conference on Programming Language Design and Implementation, Ottawa, Canada, pp. 364-375, June 2006. Garbage collection can be faster than stack allocation , Appel, Information Processing Letters 25(4):275-279, 17 June 1987. The Garbage Collection Advantage: Improving Program Locality Huang, Blackburn, McKinley, Moss, Wang, & Cheng, ACM Conference on Object-Oriented Programming Systems, Languages, & Applications, Vancouver, BC, pp. 69-80, October 2004. Demystifying Magic: High-level Low-level Programming , Daniel Frampton, Stephen M. Blackburn, Perry Cheng, Robin Garner, David P. Grove, J. Eliot B. Moss & Sergey I. Salishev. ACM International Conference on Virtual Execution Environments, Washington DC, March 2009. (To appear.) Myths and Realities: The Performance Impact of Garbage Collection , S. M. Blackburn, P. Cheng, and K. S. McKinley, ACM SIGMETRICS Conference on Measurement & Modeling Computer Systems, pp. 25--36, New York, NY, June 2004. A unified theory of garbage collection , Bacon, Cheng, & Rajan, ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications, Vancouver, BC, Canada, pp. 50-68, 2004.
