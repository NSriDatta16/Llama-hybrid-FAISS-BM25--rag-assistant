[site]: stackoverflow
[post_id]: 2863986
[parent_id]: 2863775
[tags]: 
By RESTful design, I assume you mean RESTful web services, since a REST-based architecture has a much broader sense than that. The main thing to consider is that REST-based architectures rely on the HTTP protocol, in virtually all cases. Since HTTP specifies a set of methods, sometimes these methods are used to create the so called RESTful web services. But the RESTful web services don't follow any concrete standard (unlike SOAP). It is common to use: GET - for fetching existent items POST - for creating new items PUT - for updating existent items DELETE - for removing existent items Create, Read, Update and Delete (CRUD) are the basic functions of any persistent storage. It is easy to see that in common RESTful web services, each HTTP method is being used to match one of the basic functions, but the point is: it doesn't have to be this way. There are other things to consider, URL mapping is one of them (as this is the concern of your question), security is another. POST requests send the content of the request in the HTTP body (which can be encrypted), but GET requests send it in the URL, visible for everyone to see. If one wants to develop a secure (encrypted) RESTful web service, one could make all requests HTTPS POST, and then specify within the request, which of the CRUD operations one wants to perform, and on what resources. One could also expand the CRUD concept to a wider range, in fact, in almost every application, one has to. Remember CRUD are just the four basic operations in which all other actions can build upon. There's no standard you have to follow, you can specify your own protocol, according to what makes sense in your context, and keeping all the relevant considerations in mind (security, URLs, etc.) Specifically regarding your question, you can have your own actions, like show_by_x, show_by_y, etc. The REST police is not coming to arrest you :-)
