[site]: stackoverflow
[post_id]: 3743279
[parent_id]: 3739572
[tags]: 
When it comes to caching there is no easy solution. You might cache every variant of the result, and thats ok if you implement auto-expiration of entries. You can't just use all_posts, because this way you will have to expire dozens of keys if posts will get changed. Every AR model instance has the .cache_key based on updated_at method, which is prefered way, so use this instead of last record. Also don't base your key on last record, because if some post in the middle will get deleted your key wont change. You can use logic like this instead. class ActiveRecord::Base def self.newest order("updated_at DESC").first end def self.cache_key newest.nil? ? "0:0" : "#{newest.cache_key}:#{count}" end end Now you can use Post.cache_key, which will get changed if any post will get changed/deleted or created. In general I would just cache Post.all and then paginate on this object. You really need to do some profiling to find bottle necks in your application. Besides, if you want to cache every variant, then do fragment/page caching instead. If up to you how and where to cache. No one-way here. As for the second part of the question, there is way to few hints for me to figure an answer. Check if the browser is making a call at all LiveHTTPHeaders, tcpdump, etc.
