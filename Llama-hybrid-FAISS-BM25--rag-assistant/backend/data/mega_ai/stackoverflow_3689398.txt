[site]: stackoverflow
[post_id]: 3689398
[parent_id]: 3688912
[tags]: 
How about this? (just a dirty example and untested, should work in principle) // MyButton.xaml.cs public partial class MyButton : Button { public MyButton() { InitializeComponent(); this.DataContextChanged += DataContext_Changed; } private void DataContext_Changed(Object sender,DependencyPropertyChangedEventArgs e) { INotifyPropertyChanged notify = e.NewValue as INotifyPropertyChanged; if(null != notify) { notify.PropertyChanged += DataContext_PropertyChanged; } } private void DataContext_PropertyChanged(Object sender,PropertyChangedEventArgs e) { if(e.PropertyName == "MySubProperty") MySubPropertyChanged((sender as YourClass).MySubProperty); } public void MySubPropertyChanged(string newValue) { // ... } } EDIT: for binding something in codebehind you can use: Binding binding = new Binding(); // directly to myproperty binding.Source = MyProperty; binding.Path = new PropertyPath("MySubProperty"); // or window binding.Source = mainWindow; // instance binding.Path = new PropertyPath("MyProperty.MySubProperty"); // then wire it up with (button is your MyButton instance) button.SetBinding(MyButton.MyStorageProperty, binding); //or BindingOperations.SetBinding(button, MyButton.MyStorageProperty, binding);
