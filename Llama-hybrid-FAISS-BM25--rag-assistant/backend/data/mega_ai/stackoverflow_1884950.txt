[site]: stackoverflow
[post_id]: 1884950
[parent_id]: 1884795
[tags]: 
You speak as though "Common" and "Utility" have well understood meanings. I don't recognise that there should be such a separation, or if do some organisation of reusable code that there should be two such categories. First I would distinguish between a body of code that tends to get reused in production applications and a a body of code that might only be used for testing. Then to focus on production applications I would expect there to be Business Domain common code (for example code to deal with Foreign Exchange, or Car Hire Mileage Rates, or whatever your business happens to be.) and more general purpose utilities such as Logging, or String Formatting, or Some Clever Math). I think you'll find pieces of code that in some way "belong together" and some you want to keep separate. Some possible criteria: Rate of change: when this changes, that probably changes too, so we need to release them together Overhead - this chunk is big, only apps that need should pay the price of including or deploying it. Scope - this is UI code, that is database code, keep them separately Dependency - if you use this, then you also use that, so keep theOther separate, he doesn't need that Avoid cyclic dependencies, decompose and recorganise to avoid those
