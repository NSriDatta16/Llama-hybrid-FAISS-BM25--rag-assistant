[site]: stackoverflow
[post_id]: 742201
[parent_id]: 741029
[tags]: 
As an alternative to using ExpectedException attribute, I sometimes define two helpful methods for my test classes: AssertThrowsException() takes a delegate and asserts that it throws the expected exception with the expected message. AssertDoesNotThrowException() takes the same delegate and asserts that it does not throw an exception. This pairing can be very useful when you want to test that an exception is thrown in one case, but not the other. Using them my unit test code might look like this: ExceptionThrower callStartOp = delegate(){ testObj.StartOperation(); }; // Check exception is thrown correctly... AssertThrowsException(callStartOp, typeof(InvalidOperationException), "StartOperation() called when not ready."); testObj.Ready = true; // Check exception is now not thrown... AssertDoesNotThrowException(callStartOp); Nice and neat huh? My AssertThrowsException() and AssertDoesNotThrowException() methods are defined on a common base class as follows: protected delegate void ExceptionThrower(); /// /// Asserts that calling a method results in an exception of the stated type with the stated message. /// /// Delegate that calls the method to be tested. /// The expected type of the exception, e.g. typeof(FormatException). /// The expected exception message (or fragment of the whole message) protected void AssertThrowsException(ExceptionThrower exceptionThrowingFunc, Type expectedExceptionType, string expectedExceptionMessage) { try { exceptionThrowingFunc(); Assert.Fail("Call did not raise any exception, but one was expected."); } catch (NUnit.Framework.AssertionException) { // Ignore and rethrow NUnit exception throw; } catch (Exception ex) { Assert.IsInstanceOfType(expectedExceptionType, ex, "Exception raised was not the expected type."); Assert.IsTrue(ex.Message.Contains(expectedExceptionMessage), "Exception raised did not contain expected message. Expected=\"" + expectedExceptionMessage + "\", got \"" + ex.Message + "\""); } } /// /// Asserts that calling a method does not throw an exception. /// /// /// This is typically only used in conjunction with . (e.g. once you have tested that an ExceptionThrower /// method throws an exception then your test may fix the cause of the exception and then call this to make sure it is now fixed). /// /// Delegate that calls the method to be tested. protected void AssertDoesNotThrowException(ExceptionThrower exceptionThrowingFunc) { try { exceptionThrowingFunc(); } catch (NUnit.Framework.AssertionException) { // Ignore and rethrow any NUnit exception throw; } catch (Exception ex) { Assert.Fail("Call raised an unexpected exception: " + ex.Message); } }
