[site]: stackoverflow
[post_id]: 4981979
[parent_id]: 4981403
[tags]: 
I think the one element you left out that may have confused others is the actual score of the game a given team was playing against. So basically you want one team, and through the course of the season, you want the average # points they scored... select t.teamnumber, t.teamname, avg( s.totalpoints ) TeamAvgPoints from teams t join matches m on t.teamnumber = m.teamnumber join scored s on m.matchresultid = s.matchresultid where t.teamnumber = SomeValue If you want a comparison of ALL teams averages, ignore the WHERE clause and just do a group by... group by t.teamnumber, t.teamname If the scored table has multiple rows per game, then a pre-aggregate would need to be done per game to have total points first, THEN get the average... something like select PreQuery.TeamNumber, PreQuery.TeamName, avg( ifnull( PreQuery.MatchTotalPoints, 0 ) ) AvgPerGame from ( select t.teamnumber, t.teamname, m.matchresultid, count(*) MatchTotalPoints from teams t left join matches m on t.teamnumber = m.teamnumber left join scored s on m.matchresultid = s.matchresultid where t.teamnumber IN( SomeValue, AnotherValue, MoreValues, EtcValue ) group by t.teamnumber, t.teamname, m.matchresultid ) PreQuery group by PreQuery.TeamNumber, PreQuery.TeamName In THIS version of the query, if you wanted to compare all teams, remove the inner WHERE clause for a specific team, and apply the group by to the OUTER query by teamnumber and teamname. To get your extra qualifier for the entire list, I've changed to LEFT joins, and finished with an IFNULL() for the average...
