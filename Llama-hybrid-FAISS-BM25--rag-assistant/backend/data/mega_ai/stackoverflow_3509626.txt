[site]: stackoverflow
[post_id]: 3509626
[parent_id]: 3501130
[tags]: 
Your mappings and table structure are (roughly) correct for a JOINED inheritance strategy and I cannot reproduce your problem. I use the following mappings (which are basically the one you provided): @Entity @Table(name = "object") @Inheritance(strategy = InheritanceType.JOINED) public class ObjectClass { @Id @GeneratedValue private Long id; public ObjectClass() { } public Long getId() { return id; } public void setId(Long id) { this.id = id; } } And @Entity @ForeignKey(name = "id") @Table(name = "code_table") public class CodeTable extends ObjectClass{ private String description; public CodeTable() { } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } @Override public String toString() { return "CodeTable [getDescription()=" + getDescription() + ", getId()=" + getId() + "]"; } } The following tables: create table code_table ( description varchar(255), id bigint not null, primary key (id) ) create table object ( id bigint not null, primary key (id) ) alter table code_table add constraint id foreign key (id) references object And the following parent/child records: insert into object values (1); insert into code_table(id, description) values (1, 'foo'); And running your criteria query: session.createCriteria(CodeTable.class) .setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY) .list(); Returns: CodeTable [getDescription()=foo, getId()=1] Everything works as expected. References JPA 1.0 Specification 2.1.10 Inheritance Mapping Strategies Hibernate Annotations Reference Guide 2.2.4. Mapping inheritance
