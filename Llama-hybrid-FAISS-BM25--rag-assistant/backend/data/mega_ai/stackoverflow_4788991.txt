[site]: stackoverflow
[post_id]: 4788991
[parent_id]: 
[tags]: 
Using variables globally throughout all files set up in a header file

Hey everyone! I've recently started using header files in my c++ programs (fairly new to it) and was wondering what the best way to initialize global variables across all your files. I currently have a header file outlining a program class with: init(), render(), loop(), event()... (etc) Each of these is set up within their own own file, init.cpp etc.. So whats the best way to initialize variables so that all of the files can use them? Should I do it in the header file? Or is that a bad way to go about it. Thanks in advance! -Devan Edit with organization info, didn't want to do it in the comments because there are no code blocks. Here is my header file (CGame.h) class CGame { public: CGame(); int execute(); bool init(); void event(); void loop(); void render(); void cleanUp(); protected: private: bool running; } And then each of those methods is defined within their own .cpp file #include "CGame.h" void CGame::render() { } Then all of them are called upon within my main.cpp CGame::CGame() { running = true; } int CGame::execute() { if(init() == false) { return -1; } while(running) { loop(); render(); } cleanUp(); return 0; } int main (void) { CGame app; return app.execute(); } Is this not the correct way to do it? I think I read it in an old SDL tutorial.
