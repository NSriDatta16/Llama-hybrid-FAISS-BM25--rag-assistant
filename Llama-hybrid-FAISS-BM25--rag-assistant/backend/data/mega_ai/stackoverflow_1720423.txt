[site]: stackoverflow
[post_id]: 1720423
[parent_id]: 1687253
[tags]: 
I think that the other answers may be good at helping to tune the performance, although I suppose what method you use to access the TClientDataSet doesn't really matter, since either way, the actual database update is separate (and automatically generated). If the update works as a separate prepare for each line, then it seems that was a poor design choice by Borland, as it's obvious that updating many rows will require the same query, only with different parameters each time. On the other hand, TClientDataSet was meant for in-memory databases, which means relatively small databases. Using something like a million rows probably goes beyond the intended use case. On the other hand, swapping out the ClientDataSet from your application at this point might be troublesome. I would say that for the performance sensitive part of your application, I would track the modified rows myself and write a manual update routine using the routines mentioned above. Besides that, you could try modifying the TClientDataSet's source code to make it more efficient, or sub-classing it and overriding the method which applies the changes. (Personally, I use SQLite3 for storage in my programs, so ClientDataSet is of little use and I haven't played with it much).
