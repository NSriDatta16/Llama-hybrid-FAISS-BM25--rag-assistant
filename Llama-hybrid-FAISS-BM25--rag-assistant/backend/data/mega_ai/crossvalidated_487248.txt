[site]: crossvalidated
[post_id]: 487248
[parent_id]: 
[tags]: 
K-Means output the similar to each other cluster

I am trying to run K-Means on my data set of house price prediction problem. After running it, the output of the model seems wrong because the graphs look the same as each other. This is my code: from sklearn.cluster import KMeans n_clusters = 4 kmeans = KMeans(n_clusters=n_clusters, random_state=0, verbose=0, n_jobs=int(0.8*n_cores)).fit(X_train) c_train = kmeans.predict(X_train) c_pred = kmeans.predict(X_val) You guys can try with my Colab . Just create a copy of my notebook and then you can run my code. The data set is cleaned and only contains numerical values. Below is the example of the graph. Do you guys know what is wrong about this? Thanks. Update: This is how I visualize the plot: import matplotlib.pyplot as plt n_clusters = 8 color = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'] for i in range(0, n_clusters): plt.scatter( X_train[c_train == i, 0], X_train[c_train == i, 1], s=50, c=color[i], marker='s', edgecolor='black', label='cluster '+str(i) ) plt.legend(scatterpoints=1) plt.grid() plt.show() plt.scatter( kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=250, c='red', edgecolor='black', label='centroids' ) Update 2: Thanks to @StupidWolf answer, I can see the pattern of my dataset. from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler pca = PCA(n_components=2) sc = StandardScaler() X_scaled = sc.fit_transform(X_train) PCs = pca.fit_transform(X_scaled) n_clusters = 4 kmeans = KMeans(n_clusters=n_clusters).fit(X_scaled) c_train = kmeans.predict(X_scaled) sns.scatterplot(x=PCs[:, 0], y=PCs[:, 1], hue=c_train)
