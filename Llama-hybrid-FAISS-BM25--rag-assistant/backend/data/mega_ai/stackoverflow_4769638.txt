[site]: stackoverflow
[post_id]: 4769638
[parent_id]: 4769599
[tags]: 
Assuming it's at file scope it's a 'tentative definition'. From 6.9.2/2 "External object definitions": A declaration of an identifier for an object that has file scope without an initializer, and without a storage-class specifier or with the storage-class specifier static, constitutes a tentative definition. If a translation unit contains one or more tentative definitions for an identifier, and the translation unit contains no external definition for that identifier, then the behavior is exactly as if the translation unit contains a file scope declaration of that identifier, with the composite type as of the end of the translation unit, with an initializer equal to 0. This means that it would be valid to also have the following in the translation unit: int i = 42; since that declaration has an explicit initializer, it's the definition of the variable i . As far as if the declaration is in a block scope, the standard says the following (6.2.2/2 "Linkages of identifiers"): Each declaration of an identifier with no linkage denotes a unique entity. ... (paragraph 6) The following identifiers have no linkage: ... a block scope identifier for an object declared without the storage-class specifier extern. So in block scope, the declaration would be a definition as well.
