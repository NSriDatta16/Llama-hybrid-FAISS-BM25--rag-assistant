[site]: stackoverflow
[post_id]: 5307322
[parent_id]: 5305543
[tags]: 
An admin user is required to create a database and assign database admins. Dominic's answer is great. However an alternative is to keep the direct couchapp architecture and run your admin code external , outside the user-couch chain. For example, in NodeJS, connect to CouchDB as an admin. Query /_users/_changes?feed=continuous&include_docs=true . You will receive a data event in real-time when users are created. When you see a new user, create the database and assign them as the admin. The client code can poll for their new database. Or, the client can also query /_users via the _changes COMET feed too. Either way, once the browser knows that the account is set up, you can show it to the user in the UI. Proxies (3-layer architecture) are great. There's nothing they can't do. However, I often prefer the architecture of "CouchDB with an external agent" for two reasons: It is simple. There is one web server. Users connect to CouchDB. You connect to CouchDB. Everything is in the database. There are fewer configuration and maintenance issues. It is flexible. You can write the external client in any language, running from any server. You write one big app to do everything, or many small apps to focus on one task each (e.g. creating new databases, emailing users for lost passwords, notifying you if a database is too large, etc. etc.).
