[site]: stackoverflow
[post_id]: 1600092
[parent_id]: 1599895
[tags]: 
More than one object file is providing the implementation for LCD::Split . This is because the definition is in a header file. Inlining, or making the function static, will restrict the visibility to each object file that uses it, and prevent clashes. However this will mean that each and every object file will contain the implemenation for that function if it's used. Furthemore, inlining will increase the amount of generated binary at every callsite. Making the function static, will create a single copy of LCD::Split for each object file. The best solution is to put the implementation for LCD::Split , in its own source file, so that the implementation is present in a single object file after compilation. Furthermore, you may want to ensure that your header contains an include guard, such as #pragma once , to prevent compile time conflicts for multiple declarations.
