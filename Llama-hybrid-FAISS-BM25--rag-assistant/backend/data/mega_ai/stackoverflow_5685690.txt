[site]: stackoverflow
[post_id]: 5685690
[parent_id]: 
[tags]: 
How to make an outer class inherited from an inner class?

How can I make something like this work: class Outer { int some_member; abstract class InnerBase { abstract void method(); } } class OuterExtendsInner extends Outer.InnerBase { OuterExtendsInner(Outer o) { o.super(); } void method() { // How do I use some_member here? // Writing Outer.this.some_member -> error about Outer not being an enclosing class // Writing just some_member -> no-go, either } } The workaround is to have a method in InnerBase that returns Outer.this and call THAT from derived classes, but is there another way? I primarily want to extend the InnerBase from outside in order to have better code-organization, but I could move all derived classes into Outer.
