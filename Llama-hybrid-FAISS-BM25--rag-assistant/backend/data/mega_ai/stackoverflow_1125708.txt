[site]: stackoverflow
[post_id]: 1125708
[parent_id]: 1125564
[tags]: 
As others have already pointed out In general, an application can have zero or multiple top-level windows. If you're creating the window yourself you can just remember the HWND somewhere. But maybe your code is in a DLL, so you didn't actually create the top-level window yourself. So what to do? I would suggest the following: Use EnumWindows to enumerate all top-level windows. Use GetWindowLongPtr to get the HINSTANCE for each top-level window. Compare this against the HINSTANCE of the application, which you can get using GetModuleHandle(NULL) . If they're identical, you've found your main window. Edit: Here is some code. Turns out you also have to use IsWindowVisible because there seem to be quite a few invisible "helper" windows. HWND hwndMain; BOOL CALLBACK EnumWindowProc(HWND hwnd, LPARAM lParam) { HINSTANCE hinst=(HINSTANCE)GetModuleHandle(NULL); if((HINSTANCE)GetWindowLongPtr(hwnd, GWL_HINSTANCE)==hinst && IsWindowVisible(hwnd)) { hwndMain=hwnd; return FALSE; } else return TRUE; } Then in the place you want to find the window: hwndMain=NULL; EnumWindows(EnumWindowProc, 0); And after this, hwndMain should contain the handle of the window, or NULL if none exists. Using EnumWindows is a bit burdensome but is recommended over calling GetWindow in a loop because, as MSDN notes: "An application that calls GetWindow to perform this task risks being caught in an infinite loop or referencing a handle to a window that has been destroyed."
