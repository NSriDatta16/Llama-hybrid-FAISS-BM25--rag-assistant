[site]: stackoverflow
[post_id]: 1955655
[parent_id]: 1955584
[tags]: 
Practically all the SOLID patterns apply here, but particularly the Single Responsibility Principle (SRP) and Open/Closed Principle (OCP). The OCP specifically states that the type should be open for extension, but closed for modification - that sounds like a good fit in your case, because this would be a way to ensure backwards compatibility. The SRP is also very helpful here because it means that if a class does only one thing, and that thing becomes obsolete, it doesn't drag along a lot of other problems. It can just be left to die on its own. On a more practical level, I would suggest that you follow two principles: Program against interfaces (or even better for backwards compatibility: abstract base clasess ) Make all (or most) public members virtual TDD (or just a comprehensive unit test suite) will help protect you against breaking changes.
