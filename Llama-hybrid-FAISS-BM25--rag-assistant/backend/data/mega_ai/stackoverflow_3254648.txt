[site]: stackoverflow
[post_id]: 3254648
[parent_id]: 3254517
[tags]: 
Assuming you have "infinite" images, putting them all there at or before launch time in a huge UIScrollView will not be an option. (there is a limit to the size of a UIView) The way I solved it: Make a UIScrollView covering the whole screen. It's content should be a UIView of 3*320 width and 480 height, extending 320px left and 320px right. Put 3 UIImageView's in it, left, middle and right. Set paging=YES, so the uiscrollview clips to the 3 "pages" you've created. Make sure your class is the delegate of the uiscrollview, and listen for -(void)scrollViewDidEndDragging:(UIScrollView*)sv willDecelerate:(BOOL)notFinished -(void)scrollViewDidEndDecelerating:(UIScrollView*)sv -(void)scrollViewDidEndScrollingAnimation:(UIScrollView*)sv and make the appropriate transitions on hitting paging boundaries; shift images and set ContentOffset so you're looking at the center image again. I suggest you make this first, and only then read on... Then you will hit on a bug, documented here UIScrollView - (bounces = NO) seems to override (pagingEnabled = YES) and here http://www.iphonedevsdk.com/forum/iphone-sdk-development/935-paging-uiscrollview.html , which makes that you cannot disable bouncing and have paging enabled at the same time. So enable bouncing, and subclass UIScrollView, overruling setContentOffset in there to prevent bouncing. (having bouncing really enabled will make for a rather unusual user experience)
