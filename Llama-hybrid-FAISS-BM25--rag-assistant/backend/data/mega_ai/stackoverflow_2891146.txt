[site]: stackoverflow
[post_id]: 2891146
[parent_id]: 2889804
[tags]: 
As Web Logic suggested, I would rather give the PHP DOM Extension a try, especially if you are working with a whole HTML document. You can either pass some HTML fragment to an instance of PHP DOM or the contents of a complete HTML page. One example of how to do what you suggest if you just have a string of an image element like and want to set the src attribute of it to the image-filename without the file extension prefixed by cid: loadHTML(' '); // Find all images in the loaded document $imageElements = $doc->getElementsByTagName('img'); // Temp array for storing the html of the images after its src attribute changed $imageElementsWithReplacedSrc = array(); // Iterate over the found elements foreach($imageElements as $imageElement) { // Temp var, storing the value of the src attribute $imageSrc = $imageElement->getAttribute('src'); // Temp var, storing the filename with extension $filename = basename($imageSrc); // Temp var, storing the filename WITHOUT extension $filenameWithoutExtension = substr($filename, 0, strrpos($filename, '.')); // Set the new value of the src attribute $imageElement->setAttribute('src', 'cid:' . $filenameWithoutExtension); // Save the html of the image element in an array $imageElementsWithReplacedSrc[] = $doc->saveXML($imageElement); } // Dump the contents of the array print_r($imageElementsWithReplacedSrc); Prints this result (using PHP 5.2.x on Windows Vista): Array ( [0] => ) If you want to set the value of the src attribute to the value of the alt attribute prefixed by cid: , look at this: loadHTML(' '); // Find all images in the loaded document $imageElements = $doc->getElementsByTagName('img'); // Temp array for storing the html of the images after its src attribute changed $imageElementsWithReplacedSrc = array(); // Iterate over the found elements foreach($imageElements as $imageElement) { // Set the new value of the src attribute $imageElement->setAttribute('src', 'cid:' . $imageElement->getAttribute('alt')); // Save the html of the image element in an array $imageElementsWithReplacedSrc[] = $doc->saveXML($imageElement); } // Dump the contents of the array print_r($imageElementsWithReplacedSrc); Prints: Array ( [0] => ) I hope that gets you started. These are only examples of what to do with the DOM extension, your description of what you need to parse (HTML fragments or complete HTML document) and what you need to output/store were a bit vague.
