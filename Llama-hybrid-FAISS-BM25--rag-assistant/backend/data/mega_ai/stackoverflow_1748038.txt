[site]: stackoverflow
[post_id]: 1748038
[parent_id]: 1743526
[tags]: 
My main reason for trying out go is the supposed ease of introducing concurrency into programs. I think that will be the 'next big thing', as processor speeds will tail off, and increasingly multiple cores are available. If you want to make use of multicore processors, you need to write your program so that it can run things concurrently. I earlier looked at Erlang, but despite being used to Prolog I find it a bit strange still; it is so different from your 'average' programming language (of the C or Pascal family). But its concurrency features are easy to use, once you get the hang of it. With very little effort I was able to write a parallel parser, which does not use a stack, but spawns a new 'thread/process' every time there were multiple options. So far go looks quite alright, despite some slight inconsistencies. And it's also fast, which is a bonus. So unless Cython also makes concurrency easy, I'd favour go...
