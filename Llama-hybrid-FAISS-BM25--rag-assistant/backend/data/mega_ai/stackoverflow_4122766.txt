[site]: stackoverflow
[post_id]: 4122766
[parent_id]: 2282427
[tags]: 
The fact that it is an NP-hard problem doesn't really matter when there are only about 150 currencies currently in existence , and I suspect your FX broker will only let you trade at most 20 pairs anyway. My algorithm for n currencies is therefore: Make a tree of depth n and branching factor n . The nodes of the tree are currencies and the root of the tree is your starting currency X . Each link between two nodes (currencies) has weight w , where w is the FX rate between the two currencies. At each node you should also store the cumulative fx rate (calculated by multiplying all the FX rates above it in the tree together). This is the FX rate between the root (currency X ) and the currency of this node. Iterate through all the nodes in the tree that represent currency X (maybe you should keep a list of pointers to these nodes to speed up this stage of the algorithm). There will only be n^n of these (very inefficient in terms of big-O notation, but remember your n is about 20). The one with the highest cumulative FX rate is your best FX rate and (if it is positive) the path through the tree between these nodes represents an arbitrage cycle starting and ending at currency X . Note that you can prune the tree (and so reduce the complexity from O(n^n) to O(n) by following these rules when generating the tree in step 1: If you get to a node for currency X , don't generate any child nodes. To reduce the branching factor from n to 1, at each node generate all n child nodes and only add the child node with the greatest cumulative FX rate (when converted back to currency X ).
