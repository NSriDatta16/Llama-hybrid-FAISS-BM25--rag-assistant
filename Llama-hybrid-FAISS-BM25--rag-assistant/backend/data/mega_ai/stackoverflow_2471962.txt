[site]: stackoverflow
[post_id]: 2471962
[parent_id]: 2471839
[tags]: 
Assuming you're wanting to use a class to handle all this, you have 3 options: Have a base class called something like, ReadConfigurationBase then 3 implementation classes, ReadConfigurationXML , ReadConfigurationINI , and ReadConfigurationDatabase and you'd have to choose the right one Same as above, but using a factory to choose, based off of something passed in. Like if you pass config.xml it would know to return ReadConfigurationBase implemented using ReadConfigurationXML Have a class called ReadConfiguration and it acts as step 2, but creates, contains, and owns, the 3 other classes. The 3 non-base classes would simply know how to read that type of configuration file, and pass the information back in a generic manner. think along the lines of an interface: You know you can get the data, but you don't care how. I'd suggest option 3, since it would make life easiest. You would have to do a little bit of modification every time you want to add a storage method, but that would just be adding a little bit into the ReadConfiguration class. There is a way you could make it 100% dynamic, but that would complicate matters, and I don't think you really need it for this.
