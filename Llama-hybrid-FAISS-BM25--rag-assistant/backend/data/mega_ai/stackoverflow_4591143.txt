[site]: stackoverflow
[post_id]: 4591143
[parent_id]: 4591030
[tags]: 
I'd choose F# when it was a better fit for the company I was working for, the team who'll be using it, and the task at hand. Otherwise I'd choose something else. I can't be more specific than that without more details, but I can suggest a few questions you should ask: What is the problem you're solving? In which language is it easier to express the solution to the problem? Are existing staff F# developers themselves (i.e. consider the learning curve involved)? Will the people maintaining this code be administrators (who are usually quite familiar with Powershell, & not at all familiar with F#)? A related hint: don't allow a profusion of languages to develop in your production code and infrastructure. By all means experiment to find the best language to solve the problem you're having, but if you find in five years time that someone has written a core component of your solution in a language that is no longer understood by anyone in the company, you may have a serious problem on your hands. My personal rule of thumb (of course there are exceptions) is that a project should have a core language and a scripting language to hold it all together, & that those languages should be chosen first to fit the problem domain, and secondly to maximise proficiency across the team. 'Pet languages' should be strongly discouraged in production code or infrastructure.
