[site]: stackoverflow
[post_id]: 1402875
[parent_id]: 1401373
[tags]: 
Create a class that implements IClientMessageInspector . In the BeforeSendRequest method, add your custom header to the outgoing message. It might look something like this: public object BeforeSendRequest(ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel) { HttpRequestMessageProperty httpRequestMessage; object httpRequestMessageObject; if (request.Properties.TryGetValue(HttpRequestMessageProperty.Name, out httpRequestMessageObject)) { httpRequestMessage = httpRequestMessageObject as HttpRequestMessageProperty; if (string.IsNullOrEmpty(httpRequestMessage.Headers[USER_AGENT_HTTP_HEADER])) { httpRequestMessage.Headers[USER_AGENT_HTTP_HEADER] = this.m_userAgent; } } else { httpRequestMessage = new HttpRequestMessageProperty(); httpRequestMessage.Headers.Add(USER_AGENT_HTTP_HEADER, this.m_userAgent); request.Properties.Add(HttpRequestMessageProperty.Name, httpRequestMessage); } return null; } Then create an endpoint behavior that applies the message inspector to the client runtime. You could apply the behavior as an attributes, or using a behavior extension element. Here is a great example of how to add an HTTP user-agent header to all request messages. I am using this in a few of my clients. You could undoubtedly do something similar for just about any header. You can also do the same on the service side by implementing the IDispatchMessageInspector . Is this what you had in mind?
