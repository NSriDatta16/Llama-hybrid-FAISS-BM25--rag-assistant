[site]: stackoverflow
[post_id]: 4438758
[parent_id]: 
[tags]: 
C++: The choices of initializing a member class with no implicit default constructor (more constraints in question body)

boost::posix_time::time_duration has three constructor overloads, and no implicit constructor. I need to make some calculations in a class which has some time_duration members before I can initialize them. All of this implies that without a default constructor I do not have the luxury of preparing input for my class members in my composing class constructor. The pattern might be described as follows (which is eroneous): class X { public: x(int i,int j){} }; class Y { x _x; public: y() {i = 1+1; j=1-1; _x(i,j);} }; int main() { return 0; } I would like some relevant ways of constructing Y (with motivation), where X does not have a default constructor. X cannot be altered directly (but can be subclassed). The generated code is deterministic (no unnecesary expensive constructs malloc/vtables etc). crucial point The class Y has n X members and m possible calculations. Where n >1 and m > 1. So elegance is important. Unit testing considerations are important. At this point I am leaning towards either subclassing , or calling functions to do the calculations and calling these functions in the initialization list (if that is even possible). You can comment on these approaches :D.
