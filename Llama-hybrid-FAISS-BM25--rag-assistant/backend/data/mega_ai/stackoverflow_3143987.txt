[site]: stackoverflow
[post_id]: 3143987
[parent_id]: 3141487
[tags]: 
I'm not sure what's proper , either. I tried an approach where the calling code creates the connection object and passes it to the function. The caller is responsible for disposing of both the connection and recordset objects. It's quick & dirty because I didn't want to invest more in it only to find out my approach is just plain boneheaded. Public Sub test_GetDataFromSP() Dim cnn As ADODB.Connection Dim rs As ADODB.Recordset Set cnn = New ADODB.Connection cnn.ConnectionString = "DRIVER=SQL Server;SERVER=VM2003\SQLEXPRESS;" & _ "Trusted_Connection=Yes;DATABASE=Inventory" cnn.Open Set rs = GetDataFromSP("GetCenterCodes", cnn, "14, 14, 501") rs.MoveLast Debug.Print rs.RecordCount rs.Close Set rs = Nothing cnn.Close Set cnn = Nothing End Sub Public Function GetDataFromSP(ByVal pProc As String, _ ByRef pConnection As ADODB.Connection, _ Optional ByVal pArguments As String) As ADODB.Recordset Dim rs As ADODB.Recordset Dim strStatement As String strStatement = "EXEC " & pProc If Len(pArguments) > 0 Then strStatement = strStatement & " " & pArguments End If strStatement = strStatement & ";" Set rs = New ADODB.Recordset Set rs.ActiveConnection = pConnection rs.Source = strStatement rs.LockType = adLockOptimistic rs.CursorType = adOpenStatic rs.CursorLocation = adUseClient rs.Open Set GetDataFromSP = rs End Function
