[site]: stackoverflow
[post_id]: 2044378
[parent_id]: 2002567
[tags]: 
In general case the array will not be initialized. However, keep in mind that the initial value of the object of class type depends not only on how the class itself is defined (constructor, etc), but might also depend on the initializer used when creating the object. So, in some particular cases the answer to your question might depend on the initializer you supply when creating the object and on the version of C++ language your compiler implements. If you supply no initializer, the array will contain garbage. A* pa = new A; // Garbage in the array A a; // Garbage in the array If supply the () initializer, in C++98 the array will still contain garbage. In C++03 however the object will be value-initialized and the array will contain null-pointers A* pa = new A(); // Null-pointers in the array in C++03, still garbage in C++98 A a = A(); // Null-pointers in the array in C++03, still garbage in C++98 Also, objects with static storage duration are always zero-initialized before any other initialization takes place. So, if you define an object of A class with static storage duration, the array will initially contain null-pointers.
