[site]: stackoverflow
[post_id]: 4083903
[parent_id]: 4083751
[tags]: 
It sounds like you understand the subject quite well. I agree with your argument that there might be an implementation which does not have the dependency and so it's best not to be tied down. I typically prefer the first approach, like you, for that very same reason and typically encourage that choice. In general, I would say that if the dependency is an implementation detail, then it should be passed to the constructor of the concrete implementation. If the parameter is intrinsic to the very definition / nature of the computation, then it is better to pass in the parameter. Another situation where it is a good idea to pass the parameter in the interface is where mutation is concerned; for reentrance, it is better to pass a parameter that you modify over modifying the state of the implementation, so if any side-effects are expected, then I would encourage passing the object to be mutated. That aside, I agree with your view.
