[site]: datascience
[post_id]: 123951
[parent_id]: 113484
[tags]: 
short answer: here they proposed to use: This is the correct way to generate predictions by providing the exogenous data: forecast = model.predict(n_periods=len(df_test), >exogenous=df_test[exogenous_features]) When you are missing the exogenous data, hence the error (X array should contain >your exogenous_features): model.predict(n_periods=365) Long answer: In my experiment to reach out-of-sample forecasting (predicting beyond the training dataset) over future data (unseen test-set), I separated your generated data into train, test. There are lots of posts without accepted answers for this topic. Time series forecast for everyday for till a distant future A timestep's prediction depends on future data There is no solid guide on how one can use sklearn regressors for the concept of out-of-sample forecasting : Simple prediction using linear regression with python True out-of-sample forecasting of time series in Python Nevertheless, I found some good workarounds like: ...model generates forecasts for the next 7 days, only the 7-day-ahead forecast makes efficient use of the past data ref I checked sktime package documentation , but I could not find how one can use out-of-sample using this library as well as skforecast documentation. Note: As it is mentioned here by Jason Brownlee , one of the approaches is Multi-Step Out-of-Sample Forecast which is available in skforecast lib under the title of Recursive multi-step forecasting which you can see how: Time series transformation, including an exogenous variable. It is unclear to me which parameter (maybe lag or step in skforecast ) in those packages we should use with(out) exogenous variable to achieve out-of-sample forecasting i.e. for the next 10 steps. just note that here there is good workaround about impact of exogenous variable. Some mainly old ARIMA-related posts help for our goal: How to forecast a time series out-of-sample using an ARIMA model in Python? Creating an out of sample forecast in Python based on ARIMA model built on train and test data ARMA out-of-sample prediction with statsmodels True out-of-sample forecasting of time series in Python ARMA.predict for out-of sample forecast does not work with floating points? I just found ARIMA-based example in sktime package that corresponds clearly to the parameter of out-of-sample : out_of_sample_size=10 as follows: #!pip install sktime #!pip install pmdarima #!pip install sktime[all_extras] import warnings import numpy as np import pandas as pd import pmdarima as pm from pmdarima import model_selection import matplotlib.pyplot as plt # hide warnings warnings.filterwarnings("ignore") # Generate data data = np.random.random(365 * 2,) df = pd.DataFrame({'y': data}) df['daily_growth'] = np.random.random(365 * 2,) #fh = [1,2,3,4] #forecast horizon object #df ################################### #| | y | daily_growth | #|---:|---------:|---------------:| #| 0 | 0.213322 | 0.394769 | #| 1 | 0.878436 | 0.00674871 | #| 2 | 0.174274 | 0.759531 | #| 3 | 0.212685 | 0.23475 | #| 4 | 0.86434 | 0.0325546 | # ############################################################################# # Load the data and split it into separate pieces train, test = model_selection.train_test_split(data, train_size=600) # ############################################################################# # Fit with some validation (cv) samples arima = pm.auto_arima(train, start_p=1, start_q=1, d=0, max_p=5, max_q=5, out_of_sample_size=10, suppress_warnings=True, stepwise=True, error_action='ignore') # Now plot the results and the forecast for the test set preds, conf_int = arima.predict(n_periods=test.shape[0], return_conf_int=True) fig, axes = plt.subplots(2, 1, figsize=(12, 8)) x_axis = np.arange(train.shape[0] + preds.shape[0]) axes[0].plot(x_axis[:train.shape[0]], train, alpha=0.75 , label='train') axes[0].scatter(x_axis[train.shape[0]:], preds, alpha=0.4, marker='o', label='forecast' ,color='m') axes[0].scatter(x_axis[train.shape[0]:], test, alpha=0.4, marker='x', label='test',color='red') axes[0].fill_between(x_axis[-preds.shape[0]:], conf_int[:, 0], conf_int[:, 1], alpha=0.2, color='m' ,label = 'interval') # fill the section where we "held out" samples in our model fit axes[0].set_title("Train samples & forecasted test samples") axes[0].legend(loc='upper left') # Now add the actual samples to the model and create NEW forecasts arima.update(test) new_preds, new_conf_int = arima.predict(n_periods=100, return_conf_int=True) new_x_axis = np.arange(data.shape[0] + 100) axes[1].plot(new_x_axis[:data.shape[0]], data, alpha=0.75 , label='train') axes[1].scatter(new_x_axis[data.shape[0]:], new_preds, alpha=0.4, marker='o' , label='new forecast' ,color='lime') axes[1].fill_between(new_x_axis[-new_preds.shape[0]:], new_conf_int[:, 0], new_conf_int[:, 1], alpha=0.2, color='lime',label = 'interval') axes[1].set_title("Added new observed values with new forecasts") axes[1].legend(loc='upper left') plt.show()
