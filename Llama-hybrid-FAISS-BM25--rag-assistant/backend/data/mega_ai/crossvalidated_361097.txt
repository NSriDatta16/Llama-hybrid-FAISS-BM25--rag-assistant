[site]: crossvalidated
[post_id]: 361097
[parent_id]: 361082
[tags]: 
I think it will be easier if you transform your data. Think of "hours" as angles on a clock. Each hour is 1/24 of the full circle = 15° or 0.26180 in radians. Now the problem is that the mean value of two angles can be somewhat misleading. In your case: the average of 30° and 330° = 180° (noon). But the CLOSEST mean is 0° (midnight). What does the trick really is converting your data into cartesian coordinates using trigonometry. Proceed through the following steps: sum up all cos(hour_angle) for all angles you want to calculate your mean of. Remember to use radians for that. Let's call that sum "x" sum up all sin(hour_angle) likewise. The sum shall be "y" Calculate the arctan2 of x and y, which is the angle of your average hour Convert the angle back to an actual time The arctan2 gives you the arcus-tangens of a cartesian coordinate between -pi and +pi, so there is no 2pi, 4pi, 6pi, ... which is exactly what we want - a clean transition over midnight. Let's give it a try for your test data. Remember that 1 hour equals 15° on a 24h-clock or a radians of 0.2618 x = cos(0.52360)*5 + cos(2.0944) + ... = 7.16025 y = sin(0.52360)*5 + sin(2.0944) + sin(3.1416) + sin(5.7596)*5 = 0.86603 arctan2(y, x) = arctan2(0.86603, 7.16025) = 0.12036 (rad) = 6.89637° 6.89637° = 0.45976 hours = 27.59min = 00h 27min 35sec Brief validation: 5*22:00 and 5*2:00 and 12:00 cancel each other out. Without the 8:00 time, your result would be 0° = midnight. So you have one value of 8:00 out of 12 in total which slightly inclines the average towards early morning. Looks good to me. You might want to double check my numbers and be sure to do it all in one calculation (e.g. Excel, python, Java ...) to avoid rounding problems.
