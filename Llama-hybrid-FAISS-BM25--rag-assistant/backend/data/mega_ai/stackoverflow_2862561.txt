[site]: stackoverflow
[post_id]: 2862561
[parent_id]: 2862450
[tags]: 
In reading your explanation part of me thinks that you might be still be thinking in a Delphi kind of paradigm if you have that many classes you think should be static or singletons. I don't know if I've ever encountered a project where there was just one of most objects. So my inclination is that your object decomposition might be flawed. Really you should start thinking about what you are representing in your program. Ask yourself, if you have a lot of objects that only have one instance why is there only one instance? Is it because you are holding data in an odd way like having multiple arrays whose indexes matches. That being said C# does have some good built in semantics for singletons in that you don't have to do the null checking in your instance method public class SingletonClass{ private static SingletonClass _instance; private SingletonClass(){} public static Instance { get { if(_instance == null){ _instance = new SingletonClass(); } } } } In C# can be written as: public class SingletonClass{ private static SingletonClass _instance = new SingletonClass(); private SingletonClass(){} public static Instance { get { return _instance; } } } So I would recommend leaning towards using Singletons if you insist on using the pattern. Singletons, like everything have a time and place, I wouldn't write a whole app where the majority objects are singletons. I'd highly encourage you to think of why you have a global state with static methods or singletons.
