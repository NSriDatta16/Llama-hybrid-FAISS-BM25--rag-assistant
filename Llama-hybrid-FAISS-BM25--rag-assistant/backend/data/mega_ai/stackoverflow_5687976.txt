[site]: stackoverflow
[post_id]: 5687976
[parent_id]: 
[tags]: 
Advanced Preprocesor Tokenization in C

I'm having problem building C macro for my PIC. It's the same for other C-based system's, so non-PIC C experts are also more than welcome. Lets assume that I have defined my LED_1 pin : #define LED_1 A1 //A1 as output for LED_1 So if I want to light a LED I would write: PORTAbits.RA1 = 1; And if I would like to do it using my LED_1 definition I have to add two more macros: #define change_PORT_(var) PORTAbits.R##var #define change_PORT(var) change_PORT_(var And to use it: change_PORT(LED_1) = 1; And it works like a charm. But the problem is that in definitions above I have PORT A bits.##var So what if I want to change PORTB values? I would have to build separate macros for PORTs A and B. But it's not even close to be a robust solution. And I came up with an idea which, I don't know why, doesnt work. #define LED_1 A1 #define LED_2 B1 #define __A1 A //This would be defined for all PORTA's pins such as A2,A3,A4 etc #define __B1 B #define ___change_PORT(var,var2) PORT##var2 bits.R##var #define __change_PORT(var,var2) ___change_PORT(var,var2) #define _change_PORT(var) __change_PORT(var,__##var) // creating e.g. __A1 #define change_PORT(var) _change_PORT(var) And when I try to run this: change_PORT(LED_1); The compiler changes __##var to ___A1 but it never changes __A1 to A so this MACRO doesn't work as it supposed to. I spent a lot of time trying to fix it so I'd appreciate any help :) EDIT:: I might have found a solution to my problem: (LAT is just another register name, but it works same as PORT, so this name-change is irrelevant) #define ___PORTchange(var,var2) PORT##var2##bits.R##var #define __PORTchange(var,var2) ___PORTchange(var,var2) #define CHANGE_TO_PORT_NAME(var) ___##var #define _PORTchange(var) __PORTchange(var,CHANGE_TO_PORT_NAME(var)) #define PORTchange(var) _PORTchange(var) but I get a compiler error: 100: PORTAbits.RA0 = 1; ^ (374) missing basic type; int assumed (warning) ^ (983) storage class redeclared ^ (984) type redeclared ^ (239) identifier "PORTAbits" redefined (from line 3900) ^ (314) ";" expected So no it does substitute it correctly but I get a compiler warning telling me that I redefine PORTAbits which I cannot understand. I just wanted preprocessor to change PORTchange(var) to PORTxbits.Rvar where x is A or B. But instead it seems that I'm redeclaring something. I don't get it.
