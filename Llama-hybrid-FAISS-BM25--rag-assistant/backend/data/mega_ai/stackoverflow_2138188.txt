[site]: stackoverflow
[post_id]: 2138188
[parent_id]: 2136998
[tags]: 
Above answers seem to give a complete overview, this regards only your second question: Map element retrieval by key has O(log n) complexity. Hashmap retrieval by key has O(1) complexity + a little stuff on the side in case of collisions. So if theres a good hash function for your function names, use it. Your implementation will have a standard one. It should be fine. But be aware, that anything below a hundred elements will not benefit all too much. The only downside of a hash map is collision. In your case, the hashmap will be relatively static. You know the function names you support. So I advise you to create a simple test case, where you call unordered_map ::hash_function with all your keys to make sure that nothing collides. After that, you can forget about it. A quick google for potential improvements on hash functions got me there: A fiew good hash functions Maybe, depending on your naming conventions, you can improve on some aspects of the function.
