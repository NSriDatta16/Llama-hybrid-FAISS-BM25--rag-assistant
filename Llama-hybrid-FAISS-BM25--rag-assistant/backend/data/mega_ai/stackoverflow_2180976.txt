[site]: stackoverflow
[post_id]: 2180976
[parent_id]: 2180934
[tags]: 
Hashtables, scope linked lists, references ... there is alot to it. What you are asking is half-abstract, and the implementation is variable. Depending on the implementation: Identifiers may be compiled into memory addresses, or relative memory addresses, or nameless locations referenced by bytecode. Identifiers may be looked-up dynamically in the scope at runtime In a basic scripting language, variable names when encoutered would be put into a scope structure such as a linked-list containing a hashtable implementation for looking up identifiers in that scope. When a variable is referenced, the runtime code looks it up in the hashtable and obtains some value (a memory address of a struct for example) which relates to that value. Structs can be used to implement scalar variables: enum stype = { INT, STRING, FLOAT, BOOL }; struct scalar { enum stype type; generic_blob_t *heap_blob; }; Or some variation of my poor example source. Some good books are " Modern Compiler Implementation in C " and the Dragon Book . Reading up on this topic is a good idea; I would recommend it to any programmer.
