[site]: stackoverflow
[post_id]: 2922090
[parent_id]: 2921846
[tags]: 
Whilst I'm not sure what your whereSql might entail, it would seem far easier (as well as quicker) to do this sort of thing using simple joins. Don't resort to subqueries until you really need to. The trick is to exclude the 0-price columns you don't want using a CASE condition to return NULL (which the aggregate functions will ignore), instead of trying to put that condition in a subquery WHERE clause: SELECT p.product_id, p.sku, p.type_id, COUNT(l.listing_id) AS listing_count, AVG(CASE WHEN l.current_price>0 THEN l.current_price ELSE NULL END) AS average_bid_price, MIN(CASE WHEN l.current_price>0 THEN l.current_price ELSE NULL END) AS lowest_bid_price, MAX(CASE WHEN l.current_price>0 THEN l.current_price ELSE NULL END) AS highest_bid_price, AVG(CASE WHEN l.buy_it_now_price>0 THEN l.buy_it_now_price ELSE NULL END) AS average_buyout_price, MIN(CASE WHEN l.buy_it_now_price>0 THEN l.buy_it_now_price ELSE NULL END) AS lowest_buyout_price, MAX(CASE WHEN l.buy_it_now_price>0 THEN l.buy_it_now_price ELSE NULL END) AS highest_buyout_price, AVG(CASE WHEN l.status_id=2 THEN 100 ELSE 0 END) AS sold_percent FROM product_master AS p JOIN ebay_archive_product_listing_assoc AS pl ON pl.product_id=p.product_id JOIN ebay_archive_listing AS l ON l.listing_id=pl.listing_id GROUP BY p.product_id WHERE '.$whereSql.'
