[site]: stackoverflow
[post_id]: 579589
[parent_id]: 579244
[tags]: 
The "best practice" is: Measure performance, isolating the relevant subsystem as well as you can. Identify the root cause of the bottleneck. Are you I/O bound? CPU bound? Memory bound? Waiting on locks? Make changes to alleviate the root cause you discovered. Measure again, to demonstrate that you fixed the bottleneck and by how much . Go to step 2 and repeat as necessary until the system works fast enough. Subscribe to the RSS feed at http://www.mysqlperformanceblog.com and read its historical articles too. That's a hugely useful resource for performance-related wisdom. For example, you asked about InnoDB vs. MyISAM. Their conclusion: InnoDB has ~30% higher performance than MyISAM on average. Though there are also a few usage scenarios where MyISAM out-performs InnoDB. InnoDB vs. MyISAM vs. Falcon benchmarks - part 1 The authors of that blog are also co-authors of "High Performance MySQL," the book mentioned by @Andrew Barnett. Re comment from @ʞɔıu: How to tell whether you're I/O bound versus CPU bound versus memory bound is platform-dependent. The operating system may offer tools such as ps, iostat, vmstat, or top. Or you may have to get a third-party tool if your OS doesn't provide one. Basically, whichever resource is pegged at 100% utilization/saturation is likely to be your bottleneck. If your CPU load is low but your I/O load is at its maximum for your hardware, then you are I/O bound. That's just one data point, however. The remedy may also depend on other factors. For instance, a complex SQL query may be doing a filesort, and this keeps I/O busy. Should you throw more/faster hardware at it, or should you redesign the query to avoid the filesort? There are too many factors to summarize in a StackOverflow post, and the fact that many books exist on the subject supports this. Keeping databases operating efficiently and making best use of the resources is a full-time job requiring specialized skills and constant study. Jeff Atwood just wrote a nice blog article about finding bottlenecks in a system: The Computer Performance Shell Game
