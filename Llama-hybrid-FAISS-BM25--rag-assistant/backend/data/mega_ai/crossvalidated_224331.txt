[site]: crossvalidated
[post_id]: 224331
[parent_id]: 223718
[tags]: 
Let's simulate some data with your data dimensions: library(forecast) set.seed(1) demand I would suggest you plot intraday curves first. For this, simply recode your time series to have a single seasonality of 48, then call seasonplot() : seasonplot(ts(demand,frequency=48),col=rainbow(length(demand)/48)) Next, aggregate demands within days and plot their seasonality within weeks: demand.daily Finally, you can plot either daily or weekly aggregates and their seasonality over the year. The problem here is that a year has 365.25 days and 52.18 weeks, so you will need to drop a few data points here and there. These graphics may already give you some ideas. However, you still have a lot of data (5 years are 1800 days, so the first plot has 1800 lines, and that's not really easy to look at). So one alternative might be to plot, e.g., beanplots of half-hourly data, then add lines connecting, say, the 10%, 25%, 50%, 75% and 90% quantiles. library(beanplot) beanplot(demand~rep(1:48,length(demand)/48),what=c(0,1,0,0),col="lightgray") probs Finally, in your plot, you can suppress the x axis annotation by using the xaxt="n" parameter in your plotting command, then add a custom axis using the axis() command. (I wouldn't add all "Monday", "Tuesday" etc. x axis labels for a full year, though.)
