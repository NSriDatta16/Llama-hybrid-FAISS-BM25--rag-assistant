[site]: stackoverflow
[post_id]: 4862873
[parent_id]: 4862709
[tags]: 
You'll need to read about Repository design pattern: http://martinfowler.com/eaaCatalog/repository.html http://msdn.microsoft.com/en-us/library/ff649690.aspx That's creating a kind of in-memory-like object collection which translates your domain objects (aka "business objects", "business entities") to some format that may understand an underlying storage. Repository will be providing the access to domain objects, meaning that your managers, models and others will understand the access to some repository as an actual collection, and that's a total abstraction letting you to separate data access logic from the business. Your model will have methods that are going to fill, store or look for DTO translated into domain objects and later, using your repositories, to data.
