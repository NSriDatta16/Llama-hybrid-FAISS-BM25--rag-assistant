[site]: stackoverflow
[post_id]: 2990896
[parent_id]: 2990601
[tags]: 
Nothing particularly Ruby specific, but in general keep your methods short.. I would extract the loop contents into a separate method. The method name is used to describe what is going on. I would also extract the calculation into a separate method to describe what it is you are trying to do and keep the complicated bits (the parts most likely to need changing) separate.. Something like : 0.upto(((to_date-from_date)/(60*60*24)).to_i) do |j| 0.upto(48) do |i| status = get_availability_on_date_and_hour(@templates, @availabilities, from_date+j.days, i).downcase add_event(from_date, to_date, i, j, status) if status != 'unavailable' end end def add_event(from_date, to_date, i, j, status) event = Icalendar::Event.new event.dtstart = whatever_i_am_trying_to_calculate(from_date, i, j) event.dtend = event.dtstart + 30.minutes event.summary = status.upcase cal.add_event(event) end def whatever_i_am_trying_to_calculate(from_date, i, j) bias_date_time = DateTime.civil(from_date.year, from_date.month, from_date.day) bias_date_time + j.day + (i/2).to_i.hour + (i%2*30).to_i.minutes end Also give your variables i and j useful names. i and j don't mean very much.
