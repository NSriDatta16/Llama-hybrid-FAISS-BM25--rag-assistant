[site]: stackoverflow
[post_id]: 5254006
[parent_id]: 2664975
[tags]: 
Ok, so I know this is an old question, but I stumbled across this when trying to do the same thing, and it helped me get started - so I thought I would provide an answer. I think the code in the question was on the right track but there are a couple of problems. The interpolator was not completely initialised with the ResourceManager and Culture details, and it doesn't seem to allow for the fact that you can only have one DefaultMessageInterpolator per validation attribute. Also, you don't need an instance of the object you are validating to get an interpolated message. In the code in the question, where you are initialising the interpolator with the attribute value, you also need to initialise the interpolator with details of the ResourceManager to be used. This can be done using the overloaded Initialize method on DefaultMessageInterpolator which has the following signature: public void Initialize(ResourceManager messageBundle, ResourceManager defaultMessageBundle, CultureInfo culture) The first parameter is a user-defined ResourceManager in case you want to use your own resource file for error messages, you can pass a null if you just want to use the default ResouceManager, the second parameter is the default ResourceManager - you can pass new ResourceManager( NHibernate.Validator.Cfg.Environment.BaseNameOfMessageResource, Assembly.GetExecutingAssembly()); for this, the last parameter is the culture to use, (NHibernate.Validator comes with resource files with validation messages in several languages) - if you pass a null in to this it will just use CultureInfo.CurrentCulture Lastly, you can only have one DefaultMessageInterpolator per attribute, so you will need to create a new DefaultMessageInterpolator for each validation attribute. You could make use of the DefaultMessageInterpolatorAggregator to handle this, or just roll your own. I hope this helps someone.
