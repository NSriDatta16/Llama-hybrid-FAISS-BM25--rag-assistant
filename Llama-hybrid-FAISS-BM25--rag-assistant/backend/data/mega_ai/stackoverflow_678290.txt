[site]: stackoverflow
[post_id]: 678290
[parent_id]: 532447
[tags]: 
This is the code I ended up using. I basically ported the examples from MSDN to use WiX. Note: This specific solution is only for a Word 2007 addin, but the case for Excel is very similar. Simply modify the registry/component checks and keys/values according to the aforementioned MSDN Article . Inclusion List Custom Action In order to run addins with full trust, it must be added to the Inclusion List for the current user. The only way to do this reliably is with a custom action. This is a port of the custom action in the article to the new Deployment Tools Foundation included with WiX. To use it, create a new DTF project called VSTOCustomAction and add CustomAction.cs. CustomAction.cs using System; using System.Security; using System.Security.Permissions; using Microsoft.Deployment.WindowsInstaller; using Microsoft.VisualStudio.Tools.Office.Runtime.Security; namespace VSTOCustomActions { public class CustomActions { private static string GetPublicKey(Session session) { return session["VSTOCustomAction_PublicKey"]; } private static string GetManifestLocation(Session session) { return session["VSTOCustomAction_ManifestLocation"]; } private static void ErrorMessage(string message, Session session) { using (Record r = new Record(message)) { session.Message(InstallMessage.Error, r); } } [CustomAction] public static ActionResult AddToInclusionList(Session session) { try { SecurityPermission permission = new SecurityPermission(PermissionState.Unrestricted); permission.Demand(); } catch (SecurityException) { ErrorMessage("You have insufficient privileges to " + "register a trust relationship. Start Excel " + "and confirm the trust dialog to run the addin.", session); return ActionResult.Failure; } Uri deploymentManifestLocation = null; if (Uri.TryCreate(GetManifestLocation(session), UriKind.RelativeOrAbsolute, out deploymentManifestLocation) == false) { ErrorMessage("The location of the deployment manifest is missing or invalid.", session); return ActionResult.Failure; } AddInSecurityEntry entry = new AddInSecurityEntry(deploymentManifestLocation, GetPublicKey(session)); UserInclusionList.Add(entry); session.CustomActionData.Add("VSTOCustomAction_ManifestLocation", deploymentManifestLocation.ToString()); return ActionResult.Success; } [CustomAction] public static ActionResult RemoveFromInclusionList(Session session) { string uriString = session.CustomActionData["VSTOCustomAction_ManifestLocation"]; if (!string.IsNullOrEmpty(uriString)) { Uri deploymentManifestLocation = new Uri(uriString); UserInclusionList.Remove(deploymentManifestLocation); } return ActionResult.Success; } } } Wix Fragment We obviously need the actual WiX file to install the addin. Reference it from your main .wcs file with Addin.wcs ... ... Take note: There should be no whitespace in the key! --> Hope that this saves some time for someone out there.
