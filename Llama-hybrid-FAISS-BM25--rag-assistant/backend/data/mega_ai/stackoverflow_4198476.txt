[site]: stackoverflow
[post_id]: 4198476
[parent_id]: 4198326
[tags]: 
I dunno about tabs, but you could certainly set up a row of Buttons or LinkButtons for A-Z. Tabs are used to organize controls into pages more than data; using tabs would require you to have a ListView on each TabPage. I would create a lookup UserControl, especially if this functionality will be used in several places. For the layout, all you do is create the UserControl, and drop in your ListView and any navigation controls you want as Buttons, LinkButtons, whatever. You may consider doing this dynamically using a FlowLayoutPanel or similar. For the codebehind, you need to be able to get your results in pages. The go-to way is with Linq: var onePage = userDataSource.Skip((pageNumber-1)*perPage).Take(perPage); Now, your navigation controls manipulate pageNumber and tell the ListView to rebind itself to the new page's data using the above Linq. For quick access by first character, that's again easy to do in Linq. Instead of skipping X rows until you're in the Cs, just filter out all rows that don't begin with C: var startswithC = userDataSource .Where(x=>x.StringID.StartsWith('C')) .Skip((pageNumber-1)*perPage).Take(perPage); If you know the data source returns ordered results, it is possible to use SkipUntil() to find the Cs, but you'll iterate through a lot of records, and a lot of Linq providers can translate Skip and Take but not SkipWhile, SkipUntil, etc.
