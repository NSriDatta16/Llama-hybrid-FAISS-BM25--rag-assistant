[site]: stackoverflow
[post_id]: 2202120
[parent_id]: 2201973
[tags]: 
1) Write a utility that reads the serialized objects in the old object definition. 2) The utility writes your objects into the DB in a non-serialized manner (ie, with one piece of data in every field, etc...). Don't get into the habit of serializing objects, and storing the somewhere in persistent storage for retrieval (much) later. Serialization was not built for that. You have run into the problem of C programmers in the old days: they would create a struct in memory, save that struct into a file. Then the struct's members would change, and they woudl wonder how to read it back, since the data was encoded differently. then along came database formats, INI files, and so on, specifically to address this need, so saving data in one format, and then being able to read it without error. So don't repeat errors of the past. Serialization was created to facilitate short-term binary storage and the ability to, say, transmit an object over TCP/IP. At worst, store your data as XML, not as serialized binary stream. Also, there is no assurance that I know about from MS that says that serialized data from one version of .NET will be able to be read from another. Convert your data to a legible format while you can.
