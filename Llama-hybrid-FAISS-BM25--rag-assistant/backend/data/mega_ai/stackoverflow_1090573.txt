[site]: stackoverflow
[post_id]: 1090573
[parent_id]: 1088855
[tags]: 
Use whatever client side language you want (a Java App, Flex, etc.), and push to the server with HTTP PUT (no Flex) or POST . In the server side Java code, regulate the flow of bytes in your input stream loop. A crude, simple, sample snippet that limits bandwidth to no faster than an average InputStream is = request.getInputStream(); OutputStream os = new FileOutputStream(new File("myfile.bin")); int bytesRead = 0; byte[] payload = new byte[10240]; while (bytesRead >= 0) { bytesRead = is.read(payload); if (bytesRead > 0) os.write(payload, 0, bytesRead); Thread.currentThread().sleep(1000); } (With more complexity one could more accurately regulate the single stream bandwidth, but it gets complex when considering socket buffers and such. "Good enough" is usually good enough.) My application does something similar to the above--we regulate both up ( POST and PUT ) and ( GET ) down stream bandwidth. We accept files in the 100s of MB every day and have tested up to 2GB. (Beyond 2GB there is the pesky Java int primitive issues to deal with.) Our clients are both Flex and curl . It works for me, it can work for you. While FTP is great and all, you can avoid many (but not all) firewall issues by using HTTP.
