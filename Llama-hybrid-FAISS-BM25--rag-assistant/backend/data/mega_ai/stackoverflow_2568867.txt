[site]: stackoverflow
[post_id]: 2568867
[parent_id]: 2568834
[tags]: 
Typically when coding up a prototype you may be a little less careful with your testing and coding standards. The object is to quickly get something working to prove the concept or start a discussion on various aspects of the project. If you determine that it isn't feasible or decide to go in a different direction you've put in less effort to get the decision. Prototypes have a different standard of quality than a finished (or in-progress) product. Sometimes you will take the prototype and simply refactor it into the actual product. It really depends on how carefully structured the prototype is. Often is best just to use the prototype as the concept and start over, building the real app using your regular process and standards. That way you're product isn't "infected" with the short cuts you took in getting the prototype out quickly. It's also harder to be sure that you've tested adequately when retrofitting a prototype with unit tests because it's much easier to simply write the few "normal" case tests and let it go at that, especially if the code as written is difficult to test. Writing the tests before the code and using coverage analysis helps to make sure that you've both adequately tested it and thought through the design from a testability perspective.
