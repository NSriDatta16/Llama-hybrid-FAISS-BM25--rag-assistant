[site]: stackoverflow
[post_id]: 953518
[parent_id]: 953127
[tags]: 
I'm working on a big xCode project right now. It isn't for the iPhone, but I don't think that matters for the sake of file structure layout :) I started out with option #1 and later moved to something like option #2 when the number of files increased. I tend to group things by "interfaces" i.e., all of the sources associated with a particular area of functionality within the application, and then create sub-groups for larger sections if need be. As far as naming goes, I prefer to identify Model, View and Controller using as little class name real-estate as possible, so my class names look similar to: AM_DillPickle // model class AV_Sasquatch // view class AC_DirtBike // controller class This still allows for a quick visual check to see the type of a class (M, V, or C) but it leaves more room for the descriptive part of the name. I've also found it useful to specify some classes that do not fit into the MVC pattern ( gasp !): AU_Helper // utility class (text formatting, high-level math, etc.) AD_Widget // device class (used to represent hardware drivers) Anyway, that's already more information than you asked for, but I find the naming issue to be relevant to the layout issue, since the real question is: what is the best way to organize my code for a large xCode project? Hope it helps. Here is how it all looks when put together: [+] Project [-] Target One [+] Target Two [-] Preferences [-] Login [+] Main Window # MainWindow.XIB # AC_MainWindow.h # AC_MainWindow.m # AC_DisplayScreen.h # AC_DisplayScreen.m [-] Home Screen # HomeScreen.XIB # AC_HomeScreen.h # AC_HomeScreen.m # AV_FancyDisplay.h # AV_FancyDisplay.m [+] Widget Screen [+] Other Screen
