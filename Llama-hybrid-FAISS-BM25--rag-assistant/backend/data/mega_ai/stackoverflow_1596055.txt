[site]: stackoverflow
[post_id]: 1596055
[parent_id]: 1595971
[tags]: 
This is the convention in ASP.NET MVC. When using the DefaultControllerFactory this convention is buried inside the internal sealed class System.Web.Mvc.ControllerTypeCache (typical for Microsoft to write internal sealed classes). Inside you will find a method called EnsureInitialized which looks like this: public void EnsureInitialized(IBuildManager buildManager) { if (this._cache == null) { lock (this._lockObj) { if (this._cache == null) { this._cache = GetAllControllerTypes(buildManager).GroupBy (delegate (Type t) { return t.Name.Substring(0, t.Name.Length - "Controller".Length); }, StringComparer.OrdinalIgnoreCase).ToDictionary , string, ILookup >(delegate (IGrouping g) { return g.Key; }, delegate (IGrouping g) { return g.ToLookup (t => t.Namespace ?? string.Empty, StringComparer.OrdinalIgnoreCase); }, StringComparer.OrdinalIgnoreCase); } } } } Pay attention how the grouping is made. So basically the DefaultControllerFactory will look inside all the referenced assemblies for types implementing the Controller base class and will strip the "Controller" from the name. If you really want to dissect in details ASP.NET MVC's pipeline I would recommend you this excellent article .
