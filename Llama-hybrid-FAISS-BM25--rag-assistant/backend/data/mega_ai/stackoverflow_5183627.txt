[site]: stackoverflow
[post_id]: 5183627
[parent_id]: 
[tags]: 
GL_ALPHA_TEST replacement in OpenGL ES 1.1 (no shaders)

So it seems like the performance of GL_ALPHA_TEST on iOS is very poor. To quote Apple : Graphics hardware often performs depth testing early in the graphics pipeline, before calculating the fragment’s color value. If your application uses an alpha test in OpenGL ES 1.1 or the discard instruction in an OpenGL ES 2.0 fragment shader, some hardware depth-buffer optimizations must be disabled. In particular, this may require a fragment’s color to be completely calculated only to be discarded because the fragment is not visible. An alternative to using alpha test or discard to kill pixels is to use alpha blending with alpha forced to zero. This effectively eliminates any contribution to the framebuffer color while retaining the Z-buffer optimizations. This does change the value stored in the depth buffer and so may require back-to-front sorting of the transparent primitives. If you need to use alpha testing or a discard instruction, draw these objects separately in the scene after processing any primitives that do not require it. Place the discard instruction early in the fragment shader to avoid performing calculations whose results are unused. I am wondering: what exactly do they mean by "use alpha blending with alpha forced to zero". How can you accomplish this? Alternatively, is there any other way to omit/hide pixels based on their alpha value? I have considered using texture combiners or various blend modes (including glBlendFuncSeparateOES ). However, nothing seems right for the job. I suppose having a separate alpha texture and using texture combiners could work. I would really prefer having only one texture, though.
