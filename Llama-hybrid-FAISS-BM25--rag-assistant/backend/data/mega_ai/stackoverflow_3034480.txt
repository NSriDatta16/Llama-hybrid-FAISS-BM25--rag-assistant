[site]: stackoverflow
[post_id]: 3034480
[parent_id]: 3034423
[tags]: 
Javascript - You need to work on the client side. I suggest the book Javascript The Good Parts . Javascript is also an interesting language due to its prototypical nature. If you want to do Javascript on the server side, look at node.js , which is interesting due to code reuse possibilities. Python - Multi-faceted language with great web toolkits. Not as expressive as other languages (doesn't match the DSL capability of Ruby), but clean and expandable. Look at Pylons, Django, CherryPy. Perl - Perl web applications work great, even if the language isn't "cool". Mason, Template Toolkit are contenders. Ruby - Rails is a great RAD framework. There are questionable practices galore (monkey patching), but they don't ruin the platform from a usability point of view (maintainability on the other hand...). If you don't want rails, there are minimal Ruby web frameworks as well. PHP - Tragedy of the commons. It works, its installed everywhere, but the language and runtime is terrible. Factor - Be non traditional, use concatenative languages! Smalltalk - Seaside is fun to use. Common LISP - UnCommonWeb is a great continuation style web framework. Erlang - This language is fantastic for its integral hot reloading and high availability features. You can also use the built in database (Mnesia) or CouchDB. Scala/Groovy/Clojure - More JVM languages to try, to stay true to the Java platform. The most interesting language in that grouping is Clojure. C/C++ - Why not, it works, and can be fast. Bourne Shell - Perl with less features. C#/VB.Net/Other CLR language - An easy jump from Java in terms of model. Good RAD support in in ASP.NET MVC. Using all of ASP.NET restricts you to Windows only (Mono is good, but not 100%). Drinking vendor kool-aid is always fun. ColdFusion - When just Java and all of the inherent flexibility is not enough, throw in some bizarre database table to website middleware. It works just as well as the ColdFusion reactor on my desk.
