[site]: stackoverflow
[post_id]: 4764871
[parent_id]: 4764773
[tags]: 
First of all, if you can possibly change the database, I would encourage the removal of the ID column from ApptCPT. It's useless, and even if kept as a PK it's a bad idea to make it the clustered index. Instead, I think the table should be clustered on ApptID and CPTID (whichever one first that is accessed most often). Then put an index on the one that is second in the list. I do not think that you should add Patient to the Appt table if ApptID already fully implies patient. The reason for this is that doing so violates normalization rules, allowing an ApptCPT row to simultaneously point to a patient and an appointment that are not related. You would be mixing two different levels/granularities of data in doing so. It also seems to me that a ton of pain can be avoided if you don't name columns "ID" because then you don't have to deal with aliasing and column confusion. It took some real staring to figure out the below query for you because there were so many ID columns. Name columns the same everywhere they are used! Your query is probably already the fastest it can be. If you had an index on ApptCPT with both CPTID and ApptID in it, then it would be a covering index and the main table could be completely avoided, which could speed up your query (because as it is now the engine has to access indexes twice from that table). What does your execution plan look like? Are you getting seeks or scans or what? Also, why do you need to return 7 million rows? This can't be for a user sitting there ready to consume it, so I don't see why a 1 minute response time is all that bad. If you were only going to be selecting certain patients or certain CPTs, then this query could be an improvement over the entire-table query. But if you do need all 7 million rows, this is probably going to perform abysmally: SELECT P.ID PatientID, X.ID ApptCPTID, X.CPTID FROM Patient P CROSS JOIN CPTs C -- your master CPT table listing all CPTs CROSS APPLY ( SELECT TOP 1 AC.ID, AC.CPTID FROM Appt A INNER JOIN ApptCPT AC ON A.ID = AC.ApptID WHERE A.PatientID = P.ID AND C.CPTID = AC.CPTID ORDER BY AC.ID DESC ) X WHERE P.Something = 'Z' AND CPT.Code IN ('A', 'B') However, one benefit of this query is that the column you use to choose the latest item doesn't have to be the one in the SELECT clause. You could say ORDER BY AC.Date DESC if you wanted. I don't know enough about what you're doing to really know for sure, but that could be important to you. Note: I just realized that the CROSS JOIN with OUTER APPLY would have returned a bunch of spurious rows. So I switched it to CROSS APPLY and everything should be okay. There's probably something else that could be done to make nonqualifying patients included but I don't have time to think about it right now.
