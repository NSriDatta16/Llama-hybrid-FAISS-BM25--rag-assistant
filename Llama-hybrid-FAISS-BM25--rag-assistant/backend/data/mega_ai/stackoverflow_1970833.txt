[site]: stackoverflow
[post_id]: 1970833
[parent_id]: 1970806
[tags]: 
Just one possible correction: To use the interface one can simply call the methods on an instance of the concrete class. One would call the methods on a reference of the type interface, which happens to use the concrete class as implementation: List l = new ArrayList (); l.add("foo"); l.add("bar"); If you decided to switch to another List implementation, the client code works without change: List l = new LinkedList (); This is especially useful for hiding implementation details, auto generating proxies, etc. You'll find that frameworks like spring and guice encourage programming to an interface. It's the basis for ideas like aspect-oriented programming, auto generated proxies for transaction management, etc.
