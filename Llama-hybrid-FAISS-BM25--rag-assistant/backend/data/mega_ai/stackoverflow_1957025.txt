[site]: stackoverflow
[post_id]: 1957025
[parent_id]: 1956998
[tags]: 
Yes, I think you should care about it, to what degree is a completely subjective matter. All layers of your application should be given consideration, especially if you believe your code will be in place for any significant amount of time, or if you believe your application will have significant growth. As far as your specific questions: I have a few projects which use various different storage systems and frameworks for managing data and it would be nice if there was a consistent strategy among them, but we work on what we have time to accomplish. My general guidance to teams that I work with is to pick an ORM only if it makes sense for the project and to put abstractions in place to make it convenient to use. Generally I prefer NHibernate (I have more experience with it) but there are many good solutions available Yes, I have worked on at least two projects where we were brought in with the sole-purpose of removing existing third-party components (including ORM frameworks) and replacing them with other components. In one case we were moving from a home-built ORM to NHibernate, and in the other we were moving from a third party ORM to one the customer asked us to design for them. Both projects were complex and involved lots of changes which the application(s) did not handle gracefully. Some of this (not all) can be attributed to the fact that the code was closely coupled with its data storage strategy.
