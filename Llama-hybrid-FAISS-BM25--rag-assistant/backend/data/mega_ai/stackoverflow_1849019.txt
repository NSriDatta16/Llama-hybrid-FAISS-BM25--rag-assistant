[site]: stackoverflow
[post_id]: 1849019
[parent_id]: 1848694
[tags]: 
You could add an implicit argument as a second parameter to the constructor: class SparseVector[A](size: Int) (implicit default: () => A) { private var storage = scala.collection.mutable.Map[Int, A]() def apply(i: Int) = storage.getOrElse(i, default()) def update(i: Int, v: A) = storage.update(i, v) } implicit def strDefault(): String = "default" And provide implicits for the types you care about. This also allows callers to provide their own defaults, by passing their own default values in: val sparseWithCustomDefault = new SparseVector[String](10) (() => "dwins rules!");
