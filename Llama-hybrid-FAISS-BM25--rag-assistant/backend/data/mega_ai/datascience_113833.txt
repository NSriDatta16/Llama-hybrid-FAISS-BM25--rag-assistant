[site]: datascience
[post_id]: 113833
[parent_id]: 
[tags]: 
Poor predictions on second dataset from trained LSTM model

I have a dataset of just numerical values, 8 input features(EMG signals of leg muscles) and 1 output (joint torque). I've created an LSTM model, because the data I'm using is time series, to predict joint torque. I have split up my dataset into two separate files. One file to train my model, and the other file to test it. The data used to test my model is supposed to act as if it's data from a completely different subject for the model to predict joint torque from unseen data. For my training dataset, I still ran the train_test_split function to get testing and training data for that data as well and I get good predictions for the training set and the testing set. Then for the second file (data not involved in training), I get very poor predictions. I do not get why my the testing set in the first training file would get good results and my second file would not seeing that they're both supposed to be unseen by my model. I understand this is most likely overfitting and I've tried many solutions for overfitting, however I can't seem to figure this out. Dataset, both full and split up datasets at this link:[https://drive.google.com/drive/folders/1BQOXffFYioCiPug2VcBZEZVD-u3y9bcl][1] file = r'/content/drive/MyDrive/only_force_pt1.csv' df = pd.read_csv(file) df.head() X = df.iloc[:, 1:9] y = df.iloc[:,9] print(X.shape) print(y.shape) plt.figure(figsize = (20, 6), dpi = 100) plt.plot(y) WINDOW_LEN = 50 def window_size(size, inputdata, targetdata): X = [] y = [] i=0 while(i + size) Importing second dataset: tests = r'/content/drive/MyDrive/only_force_pt2.csv' df_testing = pd.read_csv(tests) X_testing = df_testing.iloc[:4038,1:9] torque = df_testing.iloc[:4038,9] print(X_testing.shape) print(torque.shape) plt.figure(figsize = (20, 6), dpi = 100) plt.plot(torque) X_testing = X_testing.to_numpy() X_testing_series, y_testing_series = window_size(WINDOW_LEN, X_testing, torque) X_testing_series = np.array(X_testing_series) y_testing_series = np.array(y_testing_series) scores = model.evaluate(X_testing_series, y_testing_series, verbose =1) X_prediction = model.predict(X_testing_series, batch_size = 32) [1]: https://drive.google.com/drive/folders/1BQOXffFYioCiPug2VcBZEZVD-u3y9bcl
