[site]: stackoverflow
[post_id]: 5254446
[parent_id]: 5254356
[tags]: 
You can find out how much memory your application is using - see this About page. Summary: uses PsAPI; //current memory size of the current process in bytes function CurrentMemoryUsage: Cardinal; var pmc: TProcessMemoryCounters; begin pmc.cb := SizeOf(pmc) ; if GetProcessMemoryInfo(GetCurrentProcess, @pmc, SizeOf(pmc)) then Result := pmc.WorkingSetSize else RaiseLastOSError; end; ShowMessage(FormatFloat('Memory used: ,.# K', CurrentMemoryUsage / 1024)) ; If you log that value periodically in your server you'll at least get an idea of what is happening. There is more info in that result that should help you learn more about what your program is doing. The fix will be to look at what is actually using the memory and manage that more aggressively. I suspect there will be somewhere that you're creating objects and only freeing them on shutdown, when you can (and should) free them as soon as you're finished with them. One possible fix is to use the /3GB switch on the full version of FastMM and see if the problem takes longer to occur. If you are spectacularly unlucky you will have "broken" FastMM's memory pool management algorithm so it never releases memory ( a related question ). Trying different memory managers might help you in that some are more aggressive about reclaiming unused memory. But if you're fragmenting your heap the only real solution is to work out how to avoid doing that. Which is a complex topic, so again: try the simple things above first.
