[site]: stackoverflow
[post_id]: 5439685
[parent_id]: 5439374
[tags]: 
It looks like you have a mandatory 1:1 relation with the MemberID and all of the attributes, which means that you could store them all in the same table (memberprofile). Doing so will make coding a lot easier. Know that it is hard to enforce true 1:1 relations, but it can be done using triggers. Have a look at questions with the [database-design] tag. There are two recent questions on 1:1 relations. I have some comments on the identifiers. If you go with additional tables for member settings,login information etcetera, you should drop the keys from MemberProfile, and instead use the MemberID in those tables, referencing MemberProfile with a foreign key. That will let you use those tables directly without joining to memberprofile. Like this: create table memberprofile( member_id ,membertype_id ,primary key(member_id) ,foreign key(membertype_id) references membertype(membertype_id) ); create table profile_settings( member_id ,some_setting ,other_setting ,primary key(member_id) ,foreign key(member_id) references memberprofile(member_id) ); Now that I'm thinking of it, I think AboutMeID isn't 1:1. Do you mean to link to a forum post made by the user to introduce himself? In that case, it is 1:0 cardinality, because you typically have to register before creating a post :) You can implement this as a NULLable column in MemberProfile, or as a separate table with member_id as primary key and the ID of the forum post. If you expect most rows to eventually have value I would personally go with the nullable column. Whether to use one or several tables for your (1:1) attributes is an implementation choice. Depending on your query patterns, it can impact performance good or bad.
