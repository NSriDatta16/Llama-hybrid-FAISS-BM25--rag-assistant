[site]: stackoverflow
[post_id]: 2833522
[parent_id]: 2735134
[tags]: 
A note on Keith Randall's method, expanding shells or cubes around the startpoints: One can expand in various orders. Here's some python-style pseudocode: S = set of 1m startpoints near = grid 500x500x500 -> nearest s in S initially s for s in S, else 0 for r in 1 .. D: for s in S: nnew = 0 for p in shell of radius r around s: if near[p] == 0: near[p] = s nnew += 1 if nnew == 0: remove s from S # bonk, stop expanding from s "Stop expanding from s early" is fine in 1d (bonk left, bonk right); but 2d / 3d shells are irregular. It's easier / faster to do whole cubes in one pass: near = grid 500x500x500 -> { dist, nearest s in S } initially { 0, s } for s in self, else { infinity, 0 } for s in S: for p in approximatecube of radius D around s: if |p - s| Here "approximatecube" may be a full DxDxD cube, or you could lop off the corners like (here 2d) 0 1 2 3 4 1 1 2 3 4 2 2 3 4 4 3 3 4 4 4 4 4 Also fwiw, with erik's numbers, there are on average 500^3/1M ~ 2^7 ~ 5^3 empties per sample point. So I at first thought that 5x5x5 cubes around 1M sample points would cover most of the whole grid. Not so, ~ 1/e of the gridpoints stay empty -- Poisson distibution.
