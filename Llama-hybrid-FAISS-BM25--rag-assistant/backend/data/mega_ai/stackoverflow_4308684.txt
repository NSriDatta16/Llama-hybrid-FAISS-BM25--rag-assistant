[site]: stackoverflow
[post_id]: 4308684
[parent_id]: 4308576
[tags]: 
When I used to program C, I would use a divide and conquer debugging technique for this kind of problem to try to isolate the offending operation (paying attention to whether the symptoms change as debugging code is added, which is indicative of dangling pointer type bugs). Essentially, start with the first line where the value is known to be good (and prove that it is consistently good at that line). Then identify where is it known to be bad. Then approx. halfway between the two points insert a test to see if it's bad. If not, then insert a test halfway between the mid-point and the known bad location, if it is bad then insert a test halfway between the mid-point and the known good location, and so on. If the line identified is itself a function call, this process can be repeated in that called function, and so on. When using this kind of approach, it's important to minimize the amount of added code and the artificial "noise", which can create timing changes. Use this if you don't have (or can't use) an interactive debugger, or if the problem does not manifest when using one.
