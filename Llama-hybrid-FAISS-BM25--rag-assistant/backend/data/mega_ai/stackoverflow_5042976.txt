[site]: stackoverflow
[post_id]: 5042976
[parent_id]: 
[tags]: 
Is there anything between key-value-stores and full SQL databases?

I frequently run into the problem, that I have arrays of simple (POD) objects and need to save it to the disk, search the contents by one column and retrieve it. Let's take a simple cache as example: id: Integer expires: Date query: String result: String The common operations are saving an object (#1), retrieving an object by id (#2) and deleting everything after a specific date (#3), without using a DSL that has to be parsed at runtime (#4). Since I know the format my data has I don't need any support for storing arbitrary documents (#5). This should be common enough to lead to a flood of libraries doing just this, but all I'm seeing is key-value-stores like bdb, tokyocabinet, etc. (which don't work, because of #3), full-fletched SQL-databases including SQLite, MySQL etc. (#4), and completely schemaless databases like CouchDB, MongoDB and so on (#5). Storing it as plain CSV/XML/JSON works reasonably well, but doesn't do #2 and #3 well. I'm looking for something like Boost's Multi-Index (but using the disk as storage) or Squeryl but using a native backend instead of a glorified DSL-to-SQL-Compiler. Is there anything like that or am I damned to either parse CSV by hand or write massive amounts of boilerplate just to get to use the benefits of a SQL-database?
