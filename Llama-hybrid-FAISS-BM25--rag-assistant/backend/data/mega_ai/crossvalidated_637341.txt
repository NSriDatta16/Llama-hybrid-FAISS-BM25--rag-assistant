[site]: crossvalidated
[post_id]: 637341
[parent_id]: 637210
[tags]: 
I've asked about this on the XGBoost forum, but also wondered if anyone here had any insight into whether using XGBClassifier with objective='rank:map' is actually equivalent to using XGBRanker with a single query group. As per the documentation , the default objective for XGBRanker is rank:ndcg . In this regard, XGBRanker and XGBClassifier need to have the same objective set for the results to be equivalent. To illustrate this, consider that both XGBRanker and XGBClassifier are used to build models on a different dataset (Antonio, Almeida, Nunes, 2019) with the aim of predicting hotel cancellations (i.e. 1 if the customer cancels, 0 if not). When running the below with no objective specified for XGBRanker and rank:map specified as the objective for XGBClassifier - an Assertion Error is yielded. ranker = xgb.XGBRanker(lambdarank_num_pair_per_sample=8) ranker.fit(x1, y, qid=qid_sorted) classif = xgb.XGBClassifier(lambdarank_num_pair_per_sample=8, objective="rank:map") classif.fit(x1, y) rank_prediction = ranker.predict(x1) classif_prediction = classif.predict(x1) classif_prediction_proba = classif.predict_proba(x1)[:, 1] assert np.array_equal(rank_prediction, classif_prediction_proba) Additionally, np.array_equal(rank_prediction, classif_prediction_proba) returns a value of False . This also holds if the objective for XGBRanker is set to the default of rank:ndcg . However, let us now specify the objective as rank:map for XGBRanker: ranker = xgb.XGBRanker(lambdarank_num_pair_per_sample=8, objective="rank:map") When XGBClassifier is set to the same objective, no Assertion Error is yielded and np.array_equal(rank_prediction, classif_prediction_proba) returns a value of True . In this regard, XGBClassifier can be used to output the same results as XGBRanker - but the objective needs to be identical in both cases.
