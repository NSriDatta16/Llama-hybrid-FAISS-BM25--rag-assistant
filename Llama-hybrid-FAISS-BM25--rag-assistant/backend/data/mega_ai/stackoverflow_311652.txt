[site]: stackoverflow
[post_id]: 311652
[parent_id]: 310981
[tags]: 
If you find that gcc changes the order of execution in your code, you should consider using a memory barrier. Just don't assume that volatile variables will protect you from that issue. They will only make sure that in a single thread, the behavior is what the language guarantees, and will always read variables from their memory location to account for changes "invisible" to the executing code. (e.g changes to a variable done by a signal handler). GCC supports OpenMP since version 4.2. You can use it to create a memory barrier with a special #pragma directive. A very good insight about locking free code is this PDF by Herb Sutter and Andrei Alexandrescu: C++ and the Perils of Double-Checked Locking
