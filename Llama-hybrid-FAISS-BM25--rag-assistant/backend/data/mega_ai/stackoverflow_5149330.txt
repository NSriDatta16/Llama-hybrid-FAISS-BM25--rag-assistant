[site]: stackoverflow
[post_id]: 5149330
[parent_id]: 5131118
[tags]: 
Based on Elad Katz's recommendations, I have created some code to scan up the VisualTree to attempt to total any uniform ScaleTransform s. If any one has some optimizations for this algorithms or can think of a few things I may not be considering, let me know. Again, my goal is to get a RenderAtScale that is actually apropriate given the currently applied ScaleTransform s. OnRenderSizeChanged seems to be an OK place to do this, as it happens AFTER all the layout stuff has run. But, perhaps there is a better place to trigger GetTotalTransformScale()? protected override void OnRenderSizeChanged(SizeChangedInfo sizeInfo) { base.OnRenderSizeChanged(sizeInfo); double totalTransformScale = GetTotalTransformScale(); BitmapCache bitmapCache = (BitmapCache)MyCachedCanvas.CacheMode; if (bitmapCache.RenderAtScale != totalTransformScale) bitmapCache.RenderAtScale = totalTransformScale; } private double GetTotalTransformScale() { double totalTransform = 1.0d; DependencyObject currentVisualTreeElement = this; do { Visual visual = currentVisualTreeElement as Visual; if (visual != null) { Transform transform = VisualTreeHelper.GetTransform(visual); // This condition is a way of determining if it // was a uniform scale transform. Is there some better way? if ((transform != null) && (transform.Value.M12 == 0) && (transform.Value.M21 == 0) && (transform.Value.OffsetX == 0) && (transform.Value.OffsetY == 0) && (transform.Value.M11 == transform.Value.M22)) { totalTransform *= transform.Value.M11; } } currentVisualTreeElement = VisualTreeHelper.GetParent(currentVisualTreeElement); } while (currentVisualTreeElement != null); return totalTransform; }
