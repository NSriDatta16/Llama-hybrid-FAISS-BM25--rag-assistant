[site]: stackoverflow
[post_id]: 876091
[parent_id]: 874064
[tags]: 
JPA entities being just Java Beans (classes defining getters and setters) with optional supporting code (constructors, hashCode, equals, named queries, copy methods, what else?) could hardly be considered polluted even with all types of JPA annotations included. The real purpose of splitting metadata between Java annotations and xml would be simplification and optimization of deployment policies. The price that you will incur is two-fold: enforcement of development policies regarding what metadata belongs to which place and cross referencing java and xml when creating and especially maintaining metadata (more or less but always inconvenience). Both are rather serious considerations when working in average to large size development team. If recompiling for database changes presents a significant challenge in your deployment process then it sounds as a reasonable approach. But the price will be more complex development environment and process and maintenance policies.
