[site]: stackoverflow
[post_id]: 4383512
[parent_id]: 
[tags]: 
Program Structure -- Simple Commandline To Do List App -- What's the Haskell way?

Background: I am working on my first complete program in Haskell, a simple to do list application on the command line. My question is one of structure and has two levels: (1) What is the best way to do it? and (2) What is the Haskell (functional) way to do it? The reason I phrase it this way is because I suspect that there may be a faster or easier way to do it that ignores the principles of functional programming. I'd like to do it in the more elegant and clear way, as it is more of a learning exercise than anything else. Keep in mind that I'd (obviously) like the application to be somewhat persistent. The two options on the table right now are to store information in a flat text file or alternately in a Sqlite database. The first structure that came to mind was something like this, where a ToDoList type object is simply a list of ToDo items: import Data.List import Data.Time data ToDo = ToDo { todoId :: Int, todoDue :: ZonedTime, todoCreated :: UTCTime, todoItem :: String, todoPriority :: Priority, todoStatus :: Status } deriving (Show, Read) type ToDoList = [ToDo] data Priority = Low | Medium | High deriving (Show, Read, Eq, Ord) data Status = Complete | InProgress | Open deriving (Show, Read, Eq, Ord) But then I began to wonder how best to store objects of this type. Would this imply that I store them in a flat file? Is there some way to relate objects of highly specified types like this to fields/columns in a database? When I think about using a Sqlite database, it seems that all of the work will be done in the database calls, and Haskell types will have comparatively little to do with it. This seems bad. In summary, the question is how best can I model the data structure of my simple to do list application in keeping with the notions of functional programming and Haskell ideals that I am seeking to practice with this project?
