[site]: stackoverflow
[post_id]: 2843604
[parent_id]: 2843553
[tags]: 
Re your comment: Autoloading in conjunction with strict file naming would be totally enough in this case IMO. You could define a specific namespace (not in the new PHP 5.3 namespace way, just in the sense of a common prefix to names), e.g. Module_* for module class names. You could then organize your modules in directories with class files that contain exactly one class definition, for example: /modules/Mail/index.php // defines class Module_Mail /modules/Database/index.php // defines class Module_Database /modules/Image/index.php // defines class Module_Image Your autoloader function would then, whenever a Module_* class is requested: $Database = new Module_Database("localhost", .....); include the correct file from the right directory. That's the way e.g. the Zend Framework does it, and does so pretty well. Consider choosing a more specific namespace than Module_ to assure interoperability with other scripts and applications if that is an option in the future. Slightly related: In a PHP project, how do you organize and access your helper objects?
