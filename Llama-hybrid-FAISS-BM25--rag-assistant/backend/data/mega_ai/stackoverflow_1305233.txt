[site]: stackoverflow
[post_id]: 1305233
[parent_id]: 1305075
[tags]: 
Ok. If you open the 3rd party library dll in VS 2008 (make sure it chooses OpenWith>Resource Editor) does it contain a manifest of its own? If it does, or even if it does not, its also useful to get DependencyWalker to see which exact runtime dlls this third party library is attempting to link to. The fact that it worked with VS2005, and not VS2008, implies the dll wants to use the releasemode versions of the VS2005 runtime: msvcr80.dll You mention msvc690.dll, which doesn't ring a bell with me: Visual Studio 6 used the simply named msvcrt.dll - the first version of Visual Studio to use a versioned dll runtime was VS 2003 .NET or something: msvcrt7.dll Anyhow, IF the 3rd party library does not contain its own manifest resource, then the easiest thing to do would be to add the dependent assembly references to your applications manifest. There are a number of ways of doing this - you can create a manifest fragement as a XML file and add it to your applications "Configuration Properties > Manifest Tool > Input and Output > Additional Manifest Files" I find the most convenient way of merging additional dependent assembly directives in VS2008 is to use the linkers /manifestdependency command line option. If you add the following code snippet to a file in your project, it will give the linker the necessary hint: #define X_CRT_ASSEMBLY_VERSION "9.0.21022.8" #pragma comment(linker,"/manifestdependency:\"type='win32' "\ "name='"Microsoft.VC80.CRT' " "version='8.0.??.??' " \ "processorArchitecture='x86' " \ "publicKeyToken='????????'\"") The ??'s are there because I don't know the version numbers or public key token of the VS2005 libraries off hand. if you can look them up and fill them in, it should go swimmingly.
