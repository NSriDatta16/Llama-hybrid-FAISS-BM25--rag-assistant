[site]: stackoverflow
[post_id]: 3085667
[parent_id]: 3085277
[tags]: 
I think the distinction is somewhat fuzzy, but here's what the goto perldoc states about the (frowned upon) goto statement: The goto-LABEL form finds the statement labeled with LABEL and resumes execution there. ... The author of Perl has never felt the need to use this form of goto (in Perl, that is; C is another matter). (The difference is that C does not offer named loops combined with loop control. Perl does, and this replaces most structured uses of goto in other languages.) The perlsyn perldoc , however, says this: The while statement executes the block as long as the expression is true. The until statement executes the block as long as the expression is false. The LABEL is optional, and if present, consists of an identifier followed by a colon. The LABEL identifies the loop for the loop control statements next, last, and redo. If the LABEL is omitted, the loop control statement refers to the innermost enclosing loop. This may include dynamically looking back your call-stack at run time to find the LABEL. Such desperate behavior triggers a warning if you use the use warnings pragma or the -w flag. The desperate behaviour bit doesn't look too good to me, but I may be misinterpreting its meaning. The Learning Perl book (5th edition, page 162) has this to say: When you need to work with a loop block that's not the innermost one, use a label. ... Notice that the label names the entire block; it's not marking a target point in the code. [This isn't goto after all.] Does that help clear things up? Probably not... :-)
