[site]: stackoverflow
[post_id]: 2424824
[parent_id]: 2422468
[tags]: 
Introduction To browse and select a file for upload you need a HTML field in the form. As stated in the HTML specification you have to use the POST method and the enctype attribute of the form has to be set to "multipart/form-data" . After submitting such a form, the binary multipart form data is available in the request body in a different format than when the enctype isn't set. Before Servlet 3.0 (Dec 2009), the Servlet API didn't natively support multipart/form-data . It supports only the default form enctype of application/x-www-form-urlencoded . The request.getParameter() and consorts would all return null when using multipart form data. This is where the well known Apache Commons FileUpload came into the picture. Don't manually parse it! You can in theory parse the request body yourself based on ServletRequest#getInputStream() . However, this is a precise and tedious work which requires precise knowledge of RFC2388 . You shouldn't try to do this on your own or copypaste some homegrown library-less code found elsewhere on the Internet. Many online sources have failed hard in this, such as roseindia.net. See also uploading of pdf file . You should rather use a real library which is used (and implicitly tested!) by millions of users for years. Such a library has proven its robustness. When you're already on Servlet 3.0 or newer, use native API If you're using at least Servlet 3.0 (Tomcat 7, Jetty 9, JBoss AS 6, GlassFish 3, etc, they exist already since 2010), then you can just use standard API provided HttpServletRequest#getPart() to collect the individual multipart form data items (most Servlet 3.0 implementations actually use Apache Commons FileUpload under the covers for this!). Also, normal form fields are available by getParameter() the usual way. First annotate your servlet with @MultipartConfig in order to let it recognize and support multipart/form-data requests and thus get getPart() to work: @WebServlet("/upload") @MultipartConfig public class UploadServlet extends HttpServlet { // ... } Then, implement its doPost() as follows: protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String description = request.getParameter("description"); // Retrieves Part filePart = request.getPart("file"); // Retrieves String fileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString(); // MSIE fix. InputStream fileContent = filePart.getInputStream(); // ... (do your job here) } Note the Path#getFileName() . This is a MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name. In case you want to upload multiple files via either multiple="true" , or the old-fashioned way with multiple inputs, ... then you can collect them as below (unfortunately there is no such method as request.getParts("files") ): protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // ... List fileParts = request.getParts().stream().filter(part -> "files".equals(part.getName()) && part.getSize() > 0).collect(Collectors.toList()); // Retrieves for (Part filePart : fileParts) { String fileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString(); // MSIE fix. InputStream fileContent = filePart.getInputStream(); // ... (do your job here) } } When you're not on Servlet 3.1 yet, manually get submitted file name Note that Part#getSubmittedFileName() was introduced in Servlet 3.1 (Tomcat 8, Jetty 9, WildFly 8, GlassFish 4, etc, they exist since 2013 already). If you're not on Servlet 3.1 yet (really?), then you need an additional utility method to obtain the submitted file name. private static String getSubmittedFileName(Part part) { for (String cd : part.getHeader("content-disposition").split(";")) { if (cd.trim().startsWith("filename")) { String fileName = cd.substring(cd.indexOf('=') + 1).trim().replace("\"", ""); return fileName.substring(fileName.lastIndexOf('/') + 1).substring(fileName.lastIndexOf('\\') + 1); // MSIE fix. } } return null; } String fileName = getSubmittedFileName(filePart); Note the MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name. When you're not on Servlet 3.0 yet, use Apache Commons FileUpload If you're not on Servlet 3.0 yet (isn't it about time to upgrade? it's released over a decade ago!), the common practice is to make use of Apache Commons FileUpload to parse the multpart form data requests. It has an excellent User Guide and FAQ (carefully go through both). There's also the O'Reilly (" cos ") MultipartRequest , but it has some (minor) bugs and isn't actively maintained anymore for years. I wouldn't recommend using it. Apache Commons FileUpload is still actively maintained and currently very mature. In order to use Apache Commons FileUpload, you need to have at least the following files in your webapp's /WEB-INF/lib : commons-fileupload.jar commons-io.jar Your initial attempt failed most likely because you forgot the commons IO. Here's a kickoff example how the doPost() of your UploadServlet may look like when using Apache Commons FileUpload: protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { try { List items = new ServletFileUpload(new DiskFileItemFactory()).parseRequest(request); for (FileItem item : items) { if (item.isFormField()) { // Process regular form field (input type="text|radio|checkbox|etc", select, etc). String fieldName = item.getFieldName(); String fieldValue = item.getString(); // ... (do your job here) } else { // Process form file field (input type="file"). String fieldName = item.getFieldName(); String fileName = FilenameUtils.getName(item.getName()); InputStream fileContent = item.getInputStream(); // ... (do your job here) } } } catch (FileUploadException e) { throw new ServletException("Cannot parse multipart request.", e); } // ... } It's very important that you don't call getParameter() , getParameterMap() , getParameterValues() , getInputStream() , getReader() , etc on the same request beforehand. Otherwise the servlet container will read and parse the request body and thus Apache Commons FileUpload will get an empty request body. See also a.o. ServletFileUpload#parseRequest(request) returns an empty list . Note the FilenameUtils#getName() . This is a MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name. Alternatively you can also wrap this all in a Filter which parses it all automagically and put the stuff back in the parametermap of the request so that you can continue using request.getParameter() the usual way and retrieve the uploaded file by request.getAttribute() . You can find an example in this blog article . Workaround for GlassFish3 bug of getParameter() still returning null Note that Glassfish versions older than 3.1.2 had a bug wherein the getParameter() still returns null . If you are targeting such a container and can't upgrade it, then you need to extract the value from getPart() with help of this utility method: private static String getValue(Part part) throws IOException { BufferedReader reader = new BufferedReader(new InputStreamReader(part.getInputStream(), "UTF-8")); StringBuilder value = new StringBuilder(); char[] buffer = new char[1024]; for (int length = 0; (length = reader.read(buffer)) > 0;) { value.append(buffer, 0, length); } return value.toString(); } String description = getValue(request.getPart("description")); // Retrieves Saving uploaded file (don't use getRealPath() nor part.write() !) Head to the following answers for detail on properly saving the obtained InputStream (the fileContent variable as shown in the above code snippets) to disk or database: Recommended way to save uploaded files in a servlet application How to upload an image and save it in database? How to convert Part to Blob, so I can store it in MySQL? Serving uploaded file Head to the following answers for detail on properly serving the saved file from disk or database back to the client: Load images from outside of webapps / webcontext / deploy folder using or tag How to retrieve and display images from a database in a JSP page? Simplest way to serve static data from outside the application server in a Java web application Abstract template for static resource servlet supporting HTTP caching Ajaxifying the form Head to the following answers how to upload using Ajax (and jQuery). Do note that the servlet code to collect the form data does not need to be changed for this! Only the way how you respond may be changed, but this is rather trivial (i.e. instead of forwarding to JSP, just print some JSON or XML or even plain text depending on whatever the script responsible for the Ajax call is expecting). How can I upload files to a server using JSP/Servlet and Ajax? Send a file as multipart through XMLHttpRequest HTML5 drag and drop file upload to Java Servlet
