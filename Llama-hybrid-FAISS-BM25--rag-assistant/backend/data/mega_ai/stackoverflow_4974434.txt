[site]: stackoverflow
[post_id]: 4974434
[parent_id]: 4957718
[tags]: 
Sounds like you want to write a test that demonstrates coverage of your Linq statement. You've already pointed out that your repository is a interface (IRepository ) and should be mocked. You just need some examples of how to demonstrate that your service layer filters the contents of the repository correctly. Here's your ServiceLayer as I understand it. public class ServiceLayer { private readonly IRepository _gameRepository; public SerivceLayer(IRepository repository) { _gameRepository = repository; } public IEnumerable FindAllActiveGamesFiles() { return _gameRepository .Find() // method we need to mock .Where( gameFile => gameFile.IsActive) .ToList(); } } Let's write some tests.... (NUnit and Moq) [TestFixture] public class ServiceLayerFixture { protected IRepository Repository; protected ServiceLayer Subject; protected ICollection Results; [Setup] public void Setup() { // create our mock Repository = new Mock >().Object; // initialize our test subject Subject = new ServiceLayer(Repository); } [Test] public void WhenRepositoryDoesNotContainItems_ServiceLayer_ReturnsAnEmptyCollection() { Mock.Get(Repository) .Setup( r => r.Find()) .Returns( new List ().AsQueryable() ); Results = Subject.FindAllActiveGameFiles(); Assert.AreEqual(0, Results.Count); } [Test] public void WhenRepositoryDoesNotContainActiveItems_ServiceLayer_ReturnsAnEmptyCollection() { Mock.Get(Repository) .Setup( r => r.Find()) .Returns( new List () { new GameFile { IsActive = false }, new GameFile { IsActive = false } }.AsQueryable() ); Results = Subject.FindAllActiveGameFiles(); Assert.AreEqual(0, Results.Count); } [Test] public void WhenRepositoryContainActiveItems_ServiceLayer_FiltersItemsAppropriately() { Mock.Get(Repository) .Setup( r => r.Find()) .Returns( new List () { new GameFile { IsActive = true }, new GameFile { IsActive = false } }.AsQueryable() ); Results = Subject.FindAllActiveGameFiles(); Assert.AreEqual(1, Results.Count); } } Where your code stops short is that you could be handling exceptions from your IRepository more gracefully. So consider: [Test] public void WhenTheRepositoryFails_ServiceLayer_ShouldHandleExceptionsGracefully() { Mock.Get(Repository) .Setup( r => r.Find()) .Throws( new InvalidOperationException() ); Results = Subject.FindAllActiveGameFiles(); Assert.AreEqual(0, Results.Count); } Or, maybe you want to wrap the exception? [Test] [ExpectedException(typeof(GameFileNotFoundException))] public void WhenTheRepositoryFails_ServiceLayer_ShouldReportCustomError() { Mock.Get(Repository) .Setup( r => r.Find()) .Throws( new InvalidOperationException() ); Subject.FindAllActiveGameFiles(); }
