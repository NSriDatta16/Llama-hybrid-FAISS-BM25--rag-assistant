[site]: stackoverflow
[post_id]: 3478705
[parent_id]: 3474949
[tags]: 
I tend to avoid using macros as much as possible because of their obvious safety / debugging issues, however there are times when macros offer something that no other facility within the language does as elegantly, in which case I prefer to use a macro just because it makes my life (and those of my fellow developers) easier. For example, I have created an Enum class, which wraps an enum in a struct (scope) and adds some functionality: possibility of iteration (which implies an order of the values) conversion to / from string (handy to read/write to a file, write to logs) In order to create the enum, I use a macro which will automatically generate the converter (to and from) and the vector for iteration. Of course I could do without one, after all the macro is only for code generation. But doing without one would mean violating DRY, and in my little own preferences "DRY" > "Don't use macros". Because once debugged the macro is safe, whereas a DRY violation is a nightmare for maintenance. Now, I am all for ditching this macro as soon as I find how not to violate DRY. Ideas are obviously welcome... and an external script is NOT better ;) My 2 cents.
