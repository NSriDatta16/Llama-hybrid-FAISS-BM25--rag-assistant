[site]: crossvalidated
[post_id]: 108310
[parent_id]: 108295
[tags]: 
My understanding of your problem : You have m (let say 10) users who have rated n(10 for now) books. In ideal scenario where each user had similar rating styles, you could simply take average of all users' ratings for every book as the rating of that book. But, different people have different rating styles. It's difficult to suggest what would work best for you without looking at the distribution of data, however you should start with a weighted average approach. So, each user will have a weight based on the ratings that he/she has provided. Computing weights for users: Use cosine distance formula to find distances between all the users based on their ratings. Feature vector for every user should look something like this user1 - {rating_movie1, rating_movie2, rating_movie3 ....} and so on. Now that you have distances between all the users, all you have to decide is : who should have maximum and minimum weight respectively? - For this you should look at the probability distributions (histograms) of ratings for every user. Assuming population standard deviation is not too erratic, you should be able to compute weight of every user based on cosine similarity/dissimilarity + distribution center of every user. User with highest mean should have highest weight, keeping in mind that it should have significantly different weight than users who according to cosine distance are not very similar to the particular user. Once you have assigned weight to every user, you can compute rating for each book by taking a weighted average.
