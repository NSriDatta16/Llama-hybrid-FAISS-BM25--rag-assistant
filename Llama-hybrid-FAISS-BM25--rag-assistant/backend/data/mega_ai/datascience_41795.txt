[site]: datascience
[post_id]: 41795
[parent_id]: 
[tags]: 
Value of loss and accuracy does not change over Epochs

I am trying to work on a CNN model for churn. Here is my code. NO matter what optimizer I choose, change the learning rate, learning decay, loss function etc, losses and accuracy do not change over epoch. I am feeding following array as input to model, which are encoded ( label encoded and then CSC) x_train.shape = (27999, 1, 500, 10) y_train.shape = (27999,) x_test.shape = (57540, 1, 500, 10) y_test.shape = (57540,) Original input is a CSV file of shape (28770155, 11) Code is as follows: label Encoder lab=LabelEncoder() lab1=LabelEncoder() train_label=train_table.apply(lab.fit_transform) test_label=test_table.apply(lab1.fit_transform) one_hot_array = csc_matrix(train_label, dtype=np.int8).toarray() one_hot_test = csc_matrix(test_label, dtype=np.int8).toarray() Fit now of rows as image rows_per_image = 500 cols_per_image = oh_cols-1 cols_per_image_test = ot_cols-1 num_colors_per_pixel = 1 num_of_images = oh_rows // rows_per_image num_of_images_test = ot_rows // rows_per_image image_shape = (num_colors_per_pixel, rows_per_image, cols_per_image) image_shape_test = (num_colors_per_pixel, rows_per_image, cols_per_image_test) Drop tail rows that wont fit into a 500 row image truncated_one_hot_array = one_hot_array[:rows_per_image * num_of_images, :] truncated_one_hot_test = one_hot_test[ :rows_per_image * num_of_images_test, :] # x_train is the image array x_train = truncated_one_hot_array[:, :-1].reshape(num_of_images, image_shape[0], #num_colors_per_pixel, image_shape[1], #rows_per_image, image_shape[2] #cols_per_image 187 ) x_test = truncated_one_hot_test[:, :-1].reshape( num_of_images_test, image_shape_test[0], #num_colors_per_pixel, image_shape_test[1], #rows_per_image, image_shape_test[2] #cols_per_image ) ...Some code for Y train and Y test ..... Model : model = Sequential() K.set_image_dim_ordering('th') # th = (channels, rows, cols) ; tf = (rows, cols, channels) model.add(Conv2D(20, (3, 3), input_shape = image_shape, activation= 'relu', padding="same" )) model.add(MaxPooling2D(pool_size=(2, 2))) model.add(Conv2D(20, (3, 3), activation='relu')) model.add(Dropout(0.2)) model.add(Flatten()) model.add(Dense(32, activation= 'relu' )) model.add(Dense(25, activation= 'relu' )) model.add(Dense(1, activation= 'sigmoid' )) opt = SGD(lr =0.01,decay = 1e-6,momentum = 0.9) model.compile(loss= 'binary_crossentropy' , optimizer=opt, metrics=[ 'accuracy' ]) print ('model.input_shape ', model.input_shape) model.summary() model.fit(x_train, y_train, validation_data =(x_test,y_test), epochs=10, # 20:1 batch_size=8) #160 #change training epochs model.input_shape (None, 1, 500, 10) Layer (type) Output Shape Param # conv2d_1 (Conv2D) (None, 20, 500, 10) 200 max_pooling2d_1 (MaxPooling2 (None, 20, 250, 5) 0 conv2d_2 (Conv2D) (None, 20, 248, 3) 3620 dropout_1 (Dropout) (None, 20, 248, 3) 0 flatten_1 (Flatten) (None, 14880) 0 dense_1 (Dense) (None, 32) 476192 dense_2 (Dense) (None, 25) 825 dense_3 (Dense) (None, 1) 26 Total params: 480,863 Trainable params: 480,863 Non-trainable params: 0 WARNING:tensorflow:Variable *= will be deprecated. Use variable.assign_mul if you want assignment to the variable value or 'x = x * y' if you want a new python Tensor object. Train on 27999 samples, validate on 57540 samples Epoch 1/10 27999/27999 [==============================] - 37s 1ms/step - loss: 2.5676 - acc: 0.8407 - val_loss: 2.2765 - val_acc: 0.8588 Epoch 2/10 27999/27999 [==============================] - 36s 1ms/step - loss: 2.5652 - acc: 0.8409 - val_loss: 2.2765 - val_acc: 0.8588 Epoch 3/10 27999/27999 [==============================] - 36s 1ms/step - loss: 2.5652 - acc: 0.8409 - val_loss: 2.2765 - val_acc: 0.8588 Epoch 4/10 27999/27999 [==============================] - 36s 1ms/step - loss: 2.5652 - acc: 0.8409 - val_loss: 2.2765 - val_acc: 0.8588 Epoch 5/10 27999/27999 [==============================] - 36s 1ms/step - loss: 2.5652 - acc: 0.8409 - val_loss: 2.2765 - val_acc: 0.8588 Epoch 6/10 27999/27999 [==============================] - 36s 1ms/step - loss: 2.5652 - acc: 0.8409 - val_loss: 2.2765 - val_acc: 0.8588 Epoch 7/10....... Kindly help. Tried all possible scenarios.
