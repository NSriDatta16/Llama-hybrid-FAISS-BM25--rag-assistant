[site]: stackoverflow
[post_id]: 5558829
[parent_id]: 5556773
[tags]: 
The best thing to do is to abstract away from using raw function pointers. There are two usual approaches: The first is to use std::bind + std::function (or their boost:: counterparts on older compilers lacking std:: or std::tr1:: implementations): #include #include #include class GroceryStorage { public: void sendGroceryItemsToGUI(std::function const& itemAdder) { for (groceryItems_t::const_iterator iter = groceryItems.begin(), iter_end = groceryItems.end(); iter != iter_end; ++iter) itemAdder(*iter); } private: typedef std::vector groceryItems_t; groceryItems_t groceryItems; }; class GroceryListDisplay { public: void repopulateFromModel(GroceryStorage* const gs_) { gs = gs_; clearList(); gs_->sendGroceryItemsToGUI(std::bind(&GroceryListDisplay::addItemToList, this, std::placeholders::_1)); } void addItemToList(std::string const&); void clearList(); private: GroceryStorage* gs; }; (Note that I've changed addItemToList to take the std::string by const& because passing a std::string by value is just silly 99% of the time, but this wasn't a strictly necessary step.) The second is to make sendGroceryItemsToGUI a function template rather than taking a std::function : #include #include #include class GroceryStorage { public: template void sendGroceryItemsToGUI(F const& itemAdder) { for (groceryItems_t::const_iterator iter = groceryItems.begin(), iter_end = groceryItems.end(); iter != iter_end; ++iter) itemAdder(*iter); } private: typedef std::vector groceryItems_t; groceryItems_t groceryItems; }; class GroceryListDisplay { public: void repopulateFromModel(GroceryStorage* const gs_) { gs = gs_; clearList(); gs_->sendGroceryItemsToGUI(std::bind(&GroceryListDisplay::addItemToList, this, std::placeholders::_1)); } void addItemToList(std::string const&); void clearList(); private: GroceryStorage* gs; }; The latter approach will always be more efficient, but is sometimes impractical/undesirable due to the fact that function templates must always be defined in header files.
