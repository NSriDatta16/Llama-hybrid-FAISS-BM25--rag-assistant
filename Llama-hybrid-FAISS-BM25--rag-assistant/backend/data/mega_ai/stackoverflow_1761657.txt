[site]: stackoverflow
[post_id]: 1761657
[parent_id]: 1761480
[tags]: 
One approach I can think of without using the Observer classes is as below: public class GUI { private JButton loadButton, showButton; private JComboBox nameBox; ... loadButton.addActionListener(new Controller(GUI)); public void enableShow(boolean b) { // enable Show button if b is true } public void enableName(boolean b) { // display Name combo box if b is true } } public class Controller implements ActionListener { private GUI view; public Controller(GUI v) { this.view = v; } public void actionPerformed(ActionEvent pActionEvt) { boolean status = loadFile(); if (status) { view.enableShow(true); view.enableName(true); } } private boolean loadFile(String file) { // loads the specified file and return true if load is successful } } Swing framework takes care of calling the actionPerformed method in controller when user clicks the load button. You can also put the loadFile method in a seperate class which would act as a Model. One advantage with seggeragation of the Controller is that you can unit test the Controller indpendently using some mock framework. Or you can make a GUI class to implement an interface and then use dependency injection to unit test the logic in Controller class.
