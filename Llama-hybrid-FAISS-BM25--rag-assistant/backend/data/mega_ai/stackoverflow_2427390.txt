[site]: stackoverflow
[post_id]: 2427390
[parent_id]: 2426844
[tags]: 
The way you get the JSON is using an AJAX retrieval. This can be accomplished using hand coded JavaScript , but is far far easier using jQuery . Here's a quick example: $(document).ready(function() { $.ajax({ url: "http://maps.google.com/maps/api/geocode/json", type: "GET", dataType: "json", data: { address: "1600+Amphitheatre+Parkway,+Mountain+View,+CA", sensor: "false" }, success: function(data, textStatus, XMLHttpRequest) { console.log(textStatus); alert(data); }, error: function(XMLHttpRequest, textStatus, errorThrown) { console.log(textStatus); }}); }); BUT BUT BUT this will NOT work, because of the same origin policy . The way around that is to use a server side language of your choice (Perl, PHP, ColdFusion, ASP) to act as a proxy. That way the url value would be "yourproxy.php", "yourproxy.cfm", "yourproxy.asp" or whatever. That script would simply take the request it receives, act as a user agent to send the request to Google and retrieve the response (aka the URL that is the url value in the code above), and send out the results to your script. The jQuery library handles the JSON processing for you, or you can use the information provided by Bob along with the hand rolled AJAX listed above. Note that hand rolled AJAX will need the same proxy solution to be able to get information from Google. Also note that the Geocoding API you linked to is not meant for lots of dynamic queries. They lead you to the API V2 Client Geocoder , the API V3 Client Geocoder , and the Maps API for Flash Client Geocoder .
