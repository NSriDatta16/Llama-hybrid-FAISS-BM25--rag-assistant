[site]: crossvalidated
[post_id]: 133675
[parent_id]: 132960
[tags]: 
Probably found the answer. Question 1. What this tool does is: given sets of label/feature_parameters, chooses the most "efficient" and "minimum" feature_parameters by performing grid search. Am I correct? The answer is No. grid.py performs grid search and estimates the best cost and gamma value. So it helps making SVM "efficient" anyway, but not doesn't help finding minimum set of features (well, there's no "absolute minimum" probably, because accuracy and the number of features is probably in proportion). Question 2. If the answer of the question above is YES, how can I know which parameters are efficient and minimum? I see some output files but doesn't make sense for me. If it's NO, are there any de facto standard method for doing what I want? There probably isn't any de facto standard method. Perhaps when deciding feature parameters, we should first take approach from domain's perspective, and then adjust them in mathematical approach. (e.g. if you're making SVM to descriminate malwares and benign apps, you should think of the behaviour and tendency of malwares, and decide the "parameter candidates" first, then apply mathematical approach like calculating average and deviation of each features.)
