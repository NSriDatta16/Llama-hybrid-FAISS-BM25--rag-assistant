[site]: stackoverflow
[post_id]: 1589354
[parent_id]: 1589321
[tags]: 
You could do something such as make a custom class (for your list), that stores the Item plus a weighting. Default the weighting to 1 when you add an item, and store (in the "list") the total of all of the weightings of all items. You could then, when you select an item at random, just pick a number between 0 -> total weightings of all items in the list, and walk through the list to find the item at that "position" (by weighting). Decrement the weighting of that item (this can be some falloff, ie: multiply it's weighting by 0.8, or 0.5 - you'd have a lot of control over how fast it's probability of select falls off), and return it. The downside here, if you have lots of items, is that your selection is O(n) (since you have to walk through the list). Because of this, I'd probably use a linked list for the storage (you're going to have to walk for retrieval anyways, so this gives you faster insertion/removal). If you're not storing a huge number of options, though, this would be very easy to implement, and give you a lot of control over probabilities plus probability reduction at selection time.
