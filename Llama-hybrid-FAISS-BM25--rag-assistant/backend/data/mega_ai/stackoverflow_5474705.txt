[site]: stackoverflow
[post_id]: 5474705
[parent_id]: 
[tags]: 
Storing large amount of data in database

I have question regarding the storage of large amount of data. The situation is the following: I want to store GPS Coordinates(latitude and longitude) (every minute or even less interval, but I'm considering every minute) Event, which can be repeated for several coordinates Datetime or timestamp of entry(dunno which is better to use in my case) (user id) I want to be able to query: Event by zone(defining the range of latitude and longitude, for example from (1,1) to (2,2)) User tracking from date X to date Y (one or more users) So far I was thinking on the solution: Solution 1 id_user (int) id_experince (int) id_event (int) dt (datetime) latitude (decimal) longitude (decimal) I started to do some calculations and that would be something like: - around 500 entries per day/user - since I'm preparing application for some load, there can be around 100-150 users, which will be 75000 entries/day - after one month there will be millions of entries Probably, Solution 1 is not good solution, since the size of database with grow very fast. Solution 2 Have 2 tables, one of which will be aggregate coordinates according to event, for example I have event "dinner" and it takes 30 minutes, so 30 entries will be grouped in one field with BLOB type. This table will look like: id_user (int) id_experience (int) id_event (int) dt (datetime) coordinates(blob) And another table, which have have calculated locations with some "width" and "length", having pointer to the first table latitude (decimal) longitude (decimal) id_entry_in_first_table (int) This solution only partially solves my problem, imagine, that some events will not be more several minutes and there is a need for the second database.. Solution 3 This is probably not very correct solution, but it seems making some sense. I have user associated with some kind of experience, which has start date and end date. When experience adds, I will create dump of data for that experience and save to the file, deleting the entries related to the experience. When the user will want to consult "archived" experience, I will load data into some temporary table and drop it within one day(for example), in this case I will save the data according to the solution 1. The main question is: are any of the presented solutions acceptable in terms of performance of the database? Is there any better solution for my problem?
