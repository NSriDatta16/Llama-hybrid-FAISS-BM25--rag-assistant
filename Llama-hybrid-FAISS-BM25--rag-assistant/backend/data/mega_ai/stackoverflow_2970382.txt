[site]: stackoverflow
[post_id]: 2970382
[parent_id]: 
[tags]: 
Simple / Smart, Pythonic database solution, can use Python types + syntax? (Key / Value Dict, Array, maybe Ordered Dict)

Looking for solutions that push the envelope and: Avoid Manually writing SQL queries(Python can be more OO not passing DSL strings) Using non-Python datatypes for a supposedly required model definition Using a new class of types rather than perfectly good native Python types Boast Using Python objects Using Object Oriented and key based retrieval and creation Quick protoyping No SQL table to make Model /Type inference or no model Less lines and characters to type Easily output to and from JSON , maybe XML or even Protocol Buffers . I do web, desktop and mobile software development so the more portable the better. python >> from someAmazingDB import * >> db.taskList = [] >> db['taskList'].append({title:'Beat old sql interfaces','done':False}) >> db.taskList.append({title:'Illustrate different syntax modes','done':True}) #at this point it should autosave #we should be able to reload the console and access like: python >> from someAmazingDB import * >> print 'Done tasks' >> for task in db.taskList: >> if task.done: >> print task 'Illustrate different syntax modes' Here is the challenge: The above code should work with very little modification or thinking required. Like a different import statement and maybe a little more but Django Models and SQLAlchemy DO NOT CUT IT . I'm looking for more interesting library suggestions than just " Try Shelve " or " use pickle " I'm not opposed to Python classes being used for models but they should be really straight forward, unlike the stuff you see with Django and similar.
