[site]: stackoverflow
[post_id]: 3302086
[parent_id]: 
[tags]: 
Calculate QGraphicsTextItem font size based on scale

I have QGraphicsTextItem objects on a QGraphicsScene . The user can scale the QGraphicsTextItem objects by dragging the corners. (I am using a custom "transformation editor" to do this.) The user can also change the size of the QGraphicsTextItem by changing the font size from a property panel. What I would like to do is unify these so that when the user scales the object by dragging the corner with the mouse, behind the scenes it actually is calculating "What size font is necessary to make the resulting object fit the target size and keep the scale factor at 1.0?" What I am doing now is letting the object scale as normal using QGraphicsItem::mouseMoveEvent and then triggering a FinalizeMapScale method in QGraphicsItem::mouseReleaseEvent once the mouse scale is complete. This method should then change the font to the appropriate size and set the scale back to 1.0. I have a solution that appears to be working, but I'm not crazy about it. I'm relatively new to both Qt and C++, so would appreciate any comments or corrections. Is there a better way to architect this whole thing? Are there Qt methods that already do this? Is my method on the right track but has some Qt or C++ errors? Feel free to comment on my answer below on submit your own preferred solution. Thanks! [EDIT] As requested in comment, here is the basics of the scaling code. We actually went a different direction with this, so this code (and the code below) is no longer being used. This code is in the mouseMoveEvent method, having previously set a "scaling_" flag to true in mousePressEvent if the mouse was clicked in the bottom-right "hot spot". Note that this code is in a decorator QGraphicsItem that holds a pointer to the target it is scaling. This abstraction was necessary for our project, but is probably overkill for most uses. void TransformDecorator::mouseMoveEvent(QGraphicsSceneMouseEvent *event) { ... if (scaling_) { QGraphicsItem *target_item = target_->AsQGraphicsItem(); target_item->setTransformOriginPoint(0.0, 0.0); QPointF origin_scene = mapToScene(target_item->transformOriginPoint()); QPointF scale_position_scene = mapToScene(event->pos()); qreal unscaled_width = target_item->boundingRect().width(); qreal scale_x = (scale_position_scene.x() - origin_scene.x()) / unscaled_width; if (scale_x * unscaled_width setScale(scale_x); } else { QGraphicsObject::mouseMoveEvent(event); } }
