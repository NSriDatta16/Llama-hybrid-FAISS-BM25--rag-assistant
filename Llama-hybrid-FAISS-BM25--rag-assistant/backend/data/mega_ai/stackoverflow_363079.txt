[site]: stackoverflow
[post_id]: 363079
[parent_id]: 
[tags]: 
How many simultaneous threads in an application is a lot?

5, 100, 1000? I guess, "it depends", but on what? What is common in applications that run as server daemons / services? What are hard limits? Given that the machine can handle the overall workload, how do I determine at how many threads the overhead starts to have an impact on performance? What are important differences between OS's? What else should be considered? I'm asking because I would like to employ threads in an application to organize subcomponents of my application that do not share data and are designed to do their work in parallel. As the application would also use thread pools for parallelizing some tasks, I was wondering at what point I should start to think about the number of threads that's going to run in total. I know the n+1 rule as a guideline for determining the number of threads that simultaneously work on the same task to gain performance. However, I want to use threads like one might use processes in a larger scope, i. e. to organize independent tasks that should not interfere with each other. In this related question , some people advise to minimise the number of threads because of the added complexity. To me it seems that threads can also help to keep things sorted more orderly and actually reduce interference. Isn't that correct?
