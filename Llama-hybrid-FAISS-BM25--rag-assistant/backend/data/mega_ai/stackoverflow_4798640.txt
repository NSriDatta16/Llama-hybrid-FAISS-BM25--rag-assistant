[site]: stackoverflow
[post_id]: 4798640
[parent_id]: 
[tags]: 
Embedded C data storage module design

I'm in the process of designing a embedded C data storage module. It will be included by files/modules who want access to this "shared" system-wide data. Multiple tasks aggregate dozens of inputs (GPIO, CAN, I2C/SPI/SSP data, etc) and stores those values off using the API. Then, other tasks can access the data safely through the API. The system is an embedded app with an RTOS, so mutexes are used to protect the data. These ideas will be used regardless of the implementation I've designed something like this in the past, and I'm trying to improve upon it. I'm currently halfway through a new implementation and I'm running into a few hiccups and would really benefit from a fresh perspective. Quick rundown of the requirements of this module: Ideally, there would be one interface that can access the variables (one get, one set). I'd like to return different variable types (floats, ints, etc). This means macros are probably needed. I'm not pressed for code space, but it's always a concern Quick gets/sets are absolutely paramount (which means storing in strings ala xml/json is out) No new variables need to be added during runtime. Everything is statically defined at boot The question is how would you go about designing something like this? Enumerations, structures, accessors, macros, etc? I'm not looking for code here, just discussing general overall design ideas. If there's a solution on the internet that addresses these sorts of things, perhaps even just a link is sufficient.
