[site]: stackoverflow
[post_id]: 1253036
[parent_id]: 
[tags]: 
ASP.NET MVC: creating controls dynamically

This is the control builder class... public class ControlBuilder { /// /// Html Control class for controlbuilder Control . /// protected HTMLControl formControl; /// /// Html Control class for the label. /// private HTMLControl labelControl; /// /// Getting the property for the Control . /// /// /// [LuckyR] 10/8/2009 Created /// public HTMLControl Form { get { return formControl; } } /// /// Creating a label for the Control. /// /// /// [LuckyR] 10/8/2009 Created /// public HTMLControl Label { get { return labelControl; } } /// /// Creating a construtor for the controlbuilder taking in Zero /// arguments it creates a labl for the Control . /// /// /// [LuckyR] 13/8/2009 Created /// public ControlBuilder() { } /// /// A construtor for the controlbuilder which /// creates a label for the Control . /// /// /// [LuckyR] 10/8/2009 Created /// public ControlBuilder(string labelName) { Label label = new Label(); label.Text = labelName; label.Width= 200; labelControl = new HTMLControl(label); } /// /// Control build property that is used to biuld the Html /// markup for the created Control. /// /// /// [LuckyR] 10/8/2009 Created /// public string BuildControl() { this.CreateControl(); this.SetAttribute(); return this.RenderHTML(); } /// /// Render Html tags for the Control with label . /// /// /// [LuckyR] 10/8/2009 Created /// public string RenderHTML() { return labelControl.RenderHTML() + ": " + formControl.RenderHTML(); } /// /// Used to Set Attributes for the Control . /// /// /// [LuckyR] 13/8/2009 Created /// protected virtual void SetAttribute() { } /// /// Used to create the Control . /// /// /// [LuckyR] 13/8/2009 Created /// protected virtual void CreateControl() { } /// /// A list of all the Controls that will be created during the /// program run . /// private IList Controls = new List (); /// /// A property to add Control to the ControlBuilder that are created by /// the user. /// /// /// [LuckyR] 13/8/2009 Created /// /// Controls from the controlbuilder class public void AddControl(ControlBuilder Control) { Controls.Add(Control); } /// /// A property to display the Controls that are created by /// the user. /// /// /// [LuckyR] 13/8/2009 Created /// public string Display() { string Html = string.Empty; foreach (ControlBuilder builder in Controls) { Html += builder.BuildControl(); Html += " "; } return Html; } } } this is how i build a control public class TextBoxBuilder : ControlBuilder { /// /// Creating a web Control textBox. /// private TextBox textBox; /// /// Creating an Id to add as an attribute . /// private string Id; /// /// Creating an Value to add as an attribute . /// private string Value; /// /// Creating a Textbox constructor which takes in LabelName and Id. /// to create a label for the Control. /// /// /// [LuckyR] 10/8/2009 Created /// public TextBoxBuilder(string labelName, string id , string value): base(labelName) { this.Id = id; this.textBox = new TextBox(); this.Value = value; } /// /// Used to Set properties for the Control . /// /// /// [LuckyR] 10/8/2009 Created /// protected override void SetAttribute() { this.textBox.ID = this.Id; this.textBox.Text = this.Value; } /// /// Used to create the Control . That is done by calling the HtmlControl class /// which inturn renders the particular Control for us . /// /// /// [LuckyR] 10/8/2009 Created /// protected override void CreateControl() { this.formControl = new HTMLControl(this.textBox); } } } In my home controller i did this ... public ActionResult Create() { ///Where i am contacting the linq to sql classs for performing ths operagtion foreach (var control in Rep.GetData(ScreenName)) { string Type = control.Type; string value = null; if (id != Guid.Empty) { value = DataObj.GetValue(control.TableName, control.ControlName, id); } switch (Type) { case ("TextBox"): /// Buliding a textBox box controlbuilder.AddControl(new TextBoxBuilder(control.Field, control.ControlName, value)); break; case ("CheckBox"): /// Bulidig a CheckBox . controlbuilder.AddControl(new CheckBoxBuilder(control.Field, control.ControlName , value)); break; case ("DatePicker"): /// Bulidig a DatePicker . controlbuilder.AddControl(new DatePicker(control.Field, control.ControlName, value)); break; case ("DropDownList"): ///Building a dropdownlist. List list = DataObj.GetDropDownValues(control.Id); controlbuilder.AddControl(new DropDownListBuilder(control.Field, control.ControlName, list,value)); break; case ("TextArea"): /// Building a textBox area . controlbuilder.AddControl(new TextArea(control.Field, control.ControlName , value)); break; default: break; } } return View(controlbuilder); } The view page looks like this ... Fields since i am passing my class into the view i can retrieve all the data there with .display .
