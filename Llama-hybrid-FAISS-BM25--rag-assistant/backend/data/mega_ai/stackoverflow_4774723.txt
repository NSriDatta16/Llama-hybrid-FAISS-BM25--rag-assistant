[site]: stackoverflow
[post_id]: 4774723
[parent_id]: 4774646
[tags]: 
Suggest that your data-access code should be contained in its own project/assembly . That is referenced by the UI tier (ASP.NET MVC application). That'll help achieve the goal of keeping your Controllers thin, and keep all the data access code out of your MVC UI project. That typically leads to another question/discussion about domain entities: when mapping to the data store. Some architects like to have the entities in their own separate assembly. This encourages reuse in other applications. Some like to keep the entity model and data access code in the same project/assembly. This is totally up to you and your environment. For an example, let's say it's a billing application; holding customers, invoices, etc. Your implementation will be different, depending on your data access strategy (an ORM like LINQ To SQL, EF, nHibernate, SubSonic, or plain old ADO.NET, or reading from a flat file). // Assembly: InvoicingDL public class CustomerRepo { public IQueryable ListCustomers() { return MyDatabase.Customers(); //however you'd get all your customers } //etc } // Assembly: InvoicingDL public class InvoicingRepo { public IQueryable GetCustomerInvoices(int custID) { return MyDatabase.Invoices.Where(i=>i.CustomerID==custID); } //etc }
