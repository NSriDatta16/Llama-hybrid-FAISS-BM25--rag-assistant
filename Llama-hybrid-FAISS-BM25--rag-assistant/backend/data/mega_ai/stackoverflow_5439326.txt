[site]: stackoverflow
[post_id]: 5439326
[parent_id]: 5438734
[tags]: 
Just as a note: making viewAccount to assign can cause a Zombie down the road (in the original code snippet) because you release it in the last line. I would suggest the following approach: Make viewAccounts retain again Don't use autorelease because you are not returning it from that method Pay attention to dealloc method of the method in the snippet This is how I would write the snippet with viewAccounts retaining if(!self.viewAccounts) { ViewAccounts *objViewAccounts= [[ViewAccounts alloc] initWithFrame:CGRectMake(0, yViews, 320, 400) withViewController:self]; [self.view addSubview:objViewAccounts]; self.viewAccounts = objViewAccounts; [objViewAccounts release]; } ... - (void) dealloc { [super dealloc]; [viewAccounts release]; ... } What happened in your original code was that the retaining variable viewAccounts was not released properly at the end of the this class life cycle and so dealloc was not called. BTW when you only assign the variable then you have to manage the retain yourself if you re-assign that variable especially if you NIL it. Assume that you set the variable to NIL then the snippet could be executed again. But then you overwrite the variable and you are not able to release the first value. If you use retain the Object-C will do that for you. As a rule of thumb I would always use retain for properties until you have enough experience to handle the other cases.
