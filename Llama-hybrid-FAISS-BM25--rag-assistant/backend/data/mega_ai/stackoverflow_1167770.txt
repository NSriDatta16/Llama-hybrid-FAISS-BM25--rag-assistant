[site]: stackoverflow
[post_id]: 1167770
[parent_id]: 1167589
[tags]: 
Polymorphism is the right way to go when the logic must be baked into the classes. But since many applications these days already interact with their own database, another solution is to use table-based logic. Advantages of using tables: Adjust business logic without recompile. Database instances can share the same code but different logic. I'm not talking about directly embedding source code in a database varchar() field and compiling it on the fly. But let's say you have a list of input fields, and for each one, you need to perform (a) some RegEx to scrub the value, and (b) one or more tests to validate the result. In a code-only world, you would have a subclass for each type of field, each implementing, say, it's own methods called ScrubValue() and Validate(). In a table-based pattern, a single Field class would reach into the database (cached of course) based on a FieldType property and retrieve a set of RegEx search/replace strings, and a list of validation test parameters (minimum and maximum length, regex patterns to match, etc.). This works well for any situation where the number of subtypes is increasing over time and the logic can be expressed as a set of configurable strings, numbers, etc. rather than having to be directly implemented as code.
