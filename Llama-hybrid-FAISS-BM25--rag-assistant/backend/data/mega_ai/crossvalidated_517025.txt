[site]: crossvalidated
[post_id]: 517025
[parent_id]: 517019
[tags]: 
If a chain is irreducible (has only one class of intercommunicating states) and any one of the states is recurrent, then one can show that all are recurrent and the chain is called recurrent. Consider the three-state chain with transition matrix $\mathbf{P}$ entered into R below. I will show some computations in R that may be relevant to this questions and to your further study of Markov Chains. P = matrix(c(0.5, 0.5, 0, 0.5, 0, 0.5, 0, 0.5, 0.5), nrow = 3, byrow=T) P [,1] [,2] [,3] [1,] 0.5 0.5 0.0 [2,] 0.5 0.0 0.5 [3,] 0.0 0.5 0.5 In R, matrix multiplication is indicated as %*% . We find the 2-step transition matrix $\mathbf{P}^2.$ Because all entries are positive, it is clear that all states intercommunicate. P2 = P %*% P; P2 [,1] [,2] [,3] [1,] 0.50 0.25 0.25 [2,] 0.25 0.50 0.25 [3,] 0.25 0.25 0.50 As the power of the transition matrix increases, the rows become more similar: P4 = P2 %*% P2; P4 [,1] [,2] [,3] [1,] 0.3750 0.3125 0.3125 [2,] 0.3125 0.3750 0.3125 [3,] 0.3125 0.3125 0.3750 P8 = P4 %*% P4; P8 [,1] [,2] [,3] [1,] 0.3359375 0.3320312 0.3320312 [2,] 0.3320312 0.3359375 0.3320312 [3,] 0.3320312 0.3320312 0.3359375 Eventually, each row converges to the steady state vector $\sigma= (1/3, 1/3, 1/3),$ indicating that over the long run, the chain is in each state about $1/3$ of the time: $\sigma\mathbf{P} = \sigma.$ This is an 'ergodic' chain. Its limiting distribution is the same as its steady state distribution. This particular chain has a doubly-stochastic transition matrix $\mathbf{P};$ each column sums to $1.$ If the transition matrix is doubly stochastic, then in the long run each state is equally likely. More generally, one can use eigen vectors to find the stationary distribution of an ergodic chain. Because R finds right eigen vectors, and we want a left eigen vector, we use the transpose of the transition matrix, denoted t(P) below: g = eigen(t(A)) sg = as.numeric(g$vec[,1]) # 1st col of vector output is vector you want # 'as.numeric' gets rid of any complex-nr notation sg = sg/sum(sg) # scale so elements add to 1 sg [1] 0.3333333 0.3333333 0.3333333 sg %*% A # check [,1] [,2] [,3] [1,] 0.3333333 0.3333333 0.3333333
