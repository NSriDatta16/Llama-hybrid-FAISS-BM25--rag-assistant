[site]: stackoverflow
[post_id]: 3329002
[parent_id]: 3321842
[tags]: 
I have found an 'inelegant' solution. There is an open source utility 7zip (www.7-zip.org) that is free to use. You can download the command line version ( http://www.7-zip.org/download.html ). 7-zip is only supported on Windows, but it looks like this has been ported to other platforms (p7zip). Obviously this solution is not ideal since it is platform specific and relies on an executable. However, the speed compared to doing the unzip in Java is incredible. Here is the code for the utility function that I created to interface with this utility. There is room for improvement as the code below is Windows specific. /** Unpacks the zipfile to the output directory. Note: this code relies on 7-zip (specifically the cmd line version, 7za.exe). The exeDir specifies the location of the 7za.exe utility. */ public static void unpack(File zipFile, File outputDir, File exeDir) throws IOException, InterruptedException { if (!zipFile.exists()) throw new FileNotFoundException(zipFile.getAbsolutePath()); if (!exeDir.exists()) throw new FileNotFoundException(exeDir.getAbsolutePath()); if (!outputDir.exists()) outputDir.mkdirs(); String cmd = exeDir.getAbsolutePath() + "/7za.exe -y e " + zipFile.getAbsolutePath(); ProcessBuilder builder = new ProcessBuilder(new String[] { "cmd.exe", "/C", cmd }); builder.directory(outputDir); Process p = builder.start(); int rc = p.waitFor(); if (rc != 0) { log.severe("Util::unpack() 7za process did not complete normally. rc: " + rc); } }
