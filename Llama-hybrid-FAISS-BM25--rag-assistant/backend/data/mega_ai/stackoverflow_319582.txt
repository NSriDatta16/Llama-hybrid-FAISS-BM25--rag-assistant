[site]: stackoverflow
[post_id]: 319582
[parent_id]: 319513
[tags]: 
The over-arching rule is: Do the riskiest items first. Doing the test-cases first is, implicitly, arguing that the riskiest part of the coding is miscommunications and misunderstandings of the interfaces and behaviour of the objects that are being created. For many projects, that may well be true, and TDD is very appropriate in those cases. However, in many projects that is not the case, and applying TDD in those cases is a poor choice. If your highest risk is usability, stop futzing about with unit tests and do some UI prototyping. If your highest risk is performance, do some performance prototypes first, and don't worry about interfaces. This list goes on. Doing the risky items first has many advantages: Projects that are inevitably doomed die early, before many resources are wasted. Projects that are in trouble but are salvageable get the project management focus early, when it can do some good. The business side of your organization will value a project higher when it has a low risk of failure; there's less chance that it will be cancelled early unnecessarily.
