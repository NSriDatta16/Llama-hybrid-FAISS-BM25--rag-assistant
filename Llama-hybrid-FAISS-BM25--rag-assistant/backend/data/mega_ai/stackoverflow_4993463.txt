[site]: stackoverflow
[post_id]: 4993463
[parent_id]: 4977038
[tags]: 
Ok, I think I've resolved this upgrading to NHibernate 3 and using QueryOver. Here's what my code looks like now: //Declare entities Email email = null; EmailAttachment attachment = null; UploadedFile file = null; Byte[] fileData = null; //Select data from parent and child objects var results = mSession.QueryOver (() => email) .JoinAlias(() => email.Attachments, () => attachment, JoinType.LeftOuterJoin) .JoinAlias(() => attachment.File, () => file, JoinType.LeftOuterJoin) .JoinAlias(() => file.Data, () => fileData, JoinType.LeftOuterJoin) .TransformUsing(Transformers.DistinctRootEntity) .List () //Loop through results projecting fields onto POCO .Select(x => new EmailDataModel() { Id = x.Id, Body = x.Body, AttachmentCount = x.Attachments.Count(), FromAddress = x.FromAddress, //Loop through child collection projecting fields onto POCO Attachments = x.Attachments.Select(attach => new EmailAttachmentDataModel() { Data = attach.File.Data.Data, Filename = attach.File.Filename, Id = attach.Id }).ToArray() //NB Now projecting this collection as an array, not a list }).ToArray(); So there it is. Our result is a flattened class which contains the data we need, plus a collection of attachments (which each contain just two fields from our data structure - nicely flattened). Why should you do this? It simplifies the result by flattening into only the fields I really want. My data is now safely encapsulated in a class which can be passed around without fear of accidentally updating my data (which could happen if you just pass back NH data entities). Finally (and most importantly), because the code above only generates one SELECT statement. Had I stuck with my original Criteria query, it would have generated one SELECT for each row, plus more for the children further down the chain. That's fine if you're dealing with small numbers, but not if you're potentially returning thousands of rows (as I will in this instance - it's a web service for an email engine). I hope this has been useful for anybody wishing to push a bit further into NHibernate querying. Personally I'm just happy I can now get on with my life!
