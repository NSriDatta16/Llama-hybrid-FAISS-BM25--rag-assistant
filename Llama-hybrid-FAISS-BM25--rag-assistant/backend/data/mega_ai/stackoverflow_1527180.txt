[site]: stackoverflow
[post_id]: 1527180
[parent_id]: 1520055
[tags]: 
This is, unfortunately, a lot harder than it should be. In my application I accomplished this by doing the following: A small, "bootstrap" context that is responsible for loading a PropertyPlaceholderConfigurer bean and another bean that is responsible for bootstrapping the application context. The 2nd bean mentioned above takes as input the "real" spring context files to load. I have my spring context files organized so that the configurable part is well known and in the same place. For example, I might have 3 config files: one.onpremise.xml, one.hosted.xml, one.multitenant.xml. The bean programmatically loads these context files into the current application context. This works because the context files are specified as input the the bean responsible for loading them. It won't work if you just try to do an import, as you mentioned, but this has the same effect with slightly more work. The bootstrap class looks something like this: public class Bootstrapper implements ApplicationContextAware, InitializingBean { private WebApplicationContext context; private String[] configLocations; private String[] testConfigLocations; private boolean loadTestConfigurations; public void setConfigLocations(final String[] configLocations) { this.configLocations = configLocations; } public void setTestConfigLocations(final String[] testConfigLocations) { this.testConfigLocations = testConfigLocations; } public void setLoadTestConfigurations(final boolean loadTestConfigurations) { this.loadTestConfigurations = loadTestConfigurations; } @Override public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException { context = (WebApplicationContext) applicationContext; } @Override public void afterPropertiesSet() throws Exception { String[] configsToLoad = configLocations; if (loadTestConfigurations) { configsToLoad = new String[configLocations.length + testConfigLocations.length]; arraycopy(configLocations, 0, configsToLoad, 0, configLocations.length); arraycopy(testConfigLocations, 0, configsToLoad, configLocations.length, testConfigLocations.length); } context.setConfigLocations(configsToLoad); context.refresh(); } } Basically, get the application context, set its config locations, and tell it to refresh itself. This works perfectly in my application. Hope this helps.
