[site]: stackoverflow
[post_id]: 2052808
[parent_id]: 2050286
[tags]: 
Although, at least in theory, I still think that a behavior is the right approach, I can't find a sufficient level of documentation about their implementation in Symfony 1.4.x to give me a warm and fuzzy that it can be accomplished without a lot of heartburn, if at all. Even looking at Propel's own documentation for behaviors, I see no pre- or post-retrieval hook on which to trigger the action I need to take. As a result, I took my fallback path. After some source code sifting, though, I realized that it wasn't quite as laborious as I'd first thought. Every retrieval method goes through the BasePeer model's doSelect() method, so I just overrode that one in the customizable Peer model: static public function doSelect( Criteria $criteria, PropelPDO $con = null ) { $all_widgets = parent::doSelect( $criteria, $con ); $widgets = array(); foreach ( $widgets as $i => $widget ) { #if( authorized ) { # array_push( $widgets, $widget ); #} } return $widgets; } I haven't wired up the service call for authorization yet, but this appears to work as expected for modifying result sets. When and if I have to provide authorization for additional model instances, I'll have to revisit behaviors to remain DRY, but it looks like this will suffice nicely until then.
