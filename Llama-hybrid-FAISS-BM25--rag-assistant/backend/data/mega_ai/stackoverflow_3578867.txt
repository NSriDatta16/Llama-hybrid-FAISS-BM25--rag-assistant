[site]: stackoverflow
[post_id]: 3578867
[parent_id]: 3577882
[tags]: 
It really depends on what you are trying to accomplish. The problem with writing your own framework for a project like this is that you are the only one who knows where everything is. So you get the task of not only writing the framework, but documenting it, and then putting all of the functionality in on top of that. Not to mention trying to ramp up any new member of the development team. Why A Framework A framework already has many developers (and others) behind it. Why not leverage the framework? There is a large community of people behind most frameworks. And if you pick the right framework, you will also get plenty of excellent documentation. In addition, there are third party plugins, components, addons that the community develops as well. All of which will be easy to understand because they will (mostly) follow the standards of the framework. In addition to the community and leveraging the man hours used to create an open source framework, it allows you to focus on the bits of your application that are most important: the functions the pertain specifically to the application. Why waste time writing all of the mundane parts: ie. database connections, apis, email senders, templating, etc. Use what is out there and go to market much faster. My Suggestion I use CakePHP. It is OOP and very structured. They may be a small learning curve as with every framework. But the implementation makes development very fast. There are some high profile sites that use it and it works great. ( https://addons.mozilla.org/ )
