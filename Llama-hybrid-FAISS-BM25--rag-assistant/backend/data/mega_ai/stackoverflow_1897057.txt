[site]: stackoverflow
[post_id]: 1897057
[parent_id]: 1834599
[tags]: 
I don't have Windows 7 but here is something that might get you started: On the Java side: package com.stackoverflow.homework; public class MyApplication { static native boolean setAppUserModelID(); static { System.loadLibrary("MyApplicationJNI"); setAppUserModelID(); } } And on the native side, in the source code of the `MyApplicationJNI.dll library: JNIEXPORT jboolean JNICALL Java_com_stackoverflow_homework_MyApplication_setAppUserModelID(JNIEnv* env) { LPCWSTR id = L"com.stackoverflow.homework.MyApplication"; HRESULT hr = SetCurrentProcessExplicitAppUserModelID(id); return hr == S_OK; } Your question explicitly asked for a JNI solution. However, since your application doesn't need any other native method, jna is another solution which will save you from writing native code just for the sake of forwarding to the windows api. If you decide to go jna, pay attention to the fact that SetCurrentProcessExplicitAppUserModelID() is expecting a UTF-16 string. When it works in your sandbox, the next step is to add operating system detection in your application as SetCurrentProcessExplicitAppUserModelID() is obviously only available in Windows 7: you may do that from the Java side by checking that System.getProperty("os.name"); returns "Windows 7" . if you build from the little JNI snippet I gave, you can enhance it by dynamically loading the shell32.dll library using LoadLibrary then getting back the SetCurrentProcessExplicitAppUserModelID function pointer using GetProcAddress . If GetProcAddress returns NULL , it means the symbol is not present in shell32 hence it's not Windows 7. EDIT: JNA Solution . References: The JNI book for more JNI examples Java Native Access (JNA)
