[site]: crossvalidated
[post_id]: 210904
[parent_id]: 209437
[tags]: 
Ok, I'm not sure if this will work in your case, but I made a minimal working example that at least works for my generated data. Outline Normalize all your 1000 variables separately for each point cloud, ( it is shown in the code below ) Calculate the k nearest neighbours between the two normalized sets. Find the 10 closest points based on a threshold. Estimate the transformation for these 10 points. Apply the transformation on the smaller data set, so it should be aligned with the bigger one. Do PCA on the larger dataset and plot the first two PCs Project the smaller data set onto the first two PCs you got in the last step. Visually inspect where you have close matches and if there is an obvious structure. Here is some code to achieve much of this! library('RANN') library(MASS) # Generate X data X What I get: If I now look at the nearest$nn.idx object, the first column represents the best match and it looks as follows: > nearest$nn.idx [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [1,] 1 65 42 70 21 59 52 29 57 54 [2,] 2 73 39 67 45 58 48 54 80 74 [3,] 3 44 74 67 54 38 78 22 48 1 [4,] 4 73 25 33 50 5 75 45 54 55 [5,] 5 52 64 55 57 47 61 24 58 50 [6,] 6 62 57 73 50 71 59 69 37 79 [7,] 7 29 38 35 50 67 28 45 25 47 [8,] 8 66 74 25 37 64 67 39 31 63 [9,] 9 52 58 39 57 67 40 51 62 19 [10,] 10 62 38 74 41 65 42 70 61 25 [11,] 11 43 54 37 32 19 51 38 30 73 [12,] 12 67 19 65 59 24 58 68 31 38 [13,] 13 41 43 24 57 25 30 51 22 76 [14,] 14 30 58 33 24 38 52 27 26 64 [15,] 15 76 24 75 44 67 65 68 50 38 [16,] 16 67 72 73 53 74 39 31 23 79 [17,] 17 39 54 76 79 52 21 41 33 67 [18,] 18 40 31 67 54 52 39 57 75 47 [19,] 19 71 65 29 58 54 42 23 36 70 [20,] 20 67 56 58 48 66 18 30 23 31 [21,] 50 57 60 25 29 75 1 31 58 38 [22,] 75 25 50 48 53 39 69 67 38 68 [23,] 24 38 77 71 58 57 67 50 60 55 [24,] 67 74 38 50 24 37 65 44 30 23 [25,] 66 60 28 50 65 36 62 4 40 26 [26,] 31 57 30 40 22 38 27 37 67 64 [27,] 57 37 36 1 58 29 26 50 21 67 [28,] 66 67 74 24 36 55 31 58 60 69 [29,] 57 37 36 52 48 51 29 80 40 62 [30,] 44 66 70 55 57 40 35 31 59 30 You can see that I have correctly found the match for the first twenty points, like I constructed this dummy data. Now you have to follow the steps as I described above to proceed. This is probably not robust to rotations of the dataset... But if your dataset is very high dimensional, and you do not have too collinear variables, I think this will work well.
