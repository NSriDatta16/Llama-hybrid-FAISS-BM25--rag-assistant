[site]: stackoverflow
[post_id]: 3103003
[parent_id]: 
[tags]: 
Issue with i18n in JSF 2.0 (ukrainian & russian)

Goal: I want to use jsf`s i18n Scenario: creating resource bundle (utf-8) file info: file -I ./messages.properties ./messages.properties: text/plain; charset=utf-8 using it by faces-config: uk_UA en_US ru_RU ua.eset.oasys.hydra.i18n.messages i18n in some index.xhtml : ... ... Problem: In result I get wrong encoded text for those buttons. I was tried to use native2asciiin maven pom.xml : 4.0.0 oasys ua.co.oasys 1.0 ua.co.oasys hydra war Hydra UTF-8 UTF-8 org.slf4j slf4j-api 1.6.0 org.slf4j slf4j-jdk14 1.6.0 org.jboss.weld weld-logger 1.0.0-CR2 --> org.jboss.weld --> weld-extensions --> 1.0.0.Alpha2 --> --> --> org.jboss.weld --> weld-api --> 1.0-CR4 --> --> javax.enterprise cdi-api provided 1.0-CR1 javax.faces jsf-api 2.0 provided javax javaee-api 6.0 provided org.eclipse.persistence javax.persistence 2.0.0 provided org.glassfish javax.ejb 3.0 provided org.glassfish javax.servlet 3.0-b70 jar provided hydra org.apache.maven.plugins maven-compiler-plugin 2.0.2 utf8 1.6 1.6 org.codehaus.mojo native2ascii-maven-plugin 1.0-alpha-1 target/classes src/main/resources native2ascii-utf8 native2ascii UTF8 --> I got different symbols, but still wrong. I made I trick by passing messages with : String (value.getBytes("ISO-8859-1"),"UTF-8") ; Messages.java : public class Messages { private static final String BUNDLE_NAME = "ua.eset.oasys.hydra.i18n.messages"; private static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME); private Messages() { } public static String getString(String key) { try { String value = (String) RESOURCE_BUNDLE.getString(key); try { return new String (value.getBytes("ISO-8859-1"),"UTF-8") ; } catch (UnsupportedEncodingException e) { e.printStackTrace(); return null; } } catch (MissingResourceException e) { return '!' + key + '!'; } } } it was successful, I got a valid text, but it is ugly to use in jsf.. info: I am using glassfish v3, mac osx (so defaulst encoding latin1 or ISO-8859-1,- no shure.) Q1: what could be a cause of problem (bad encoding for jsf i18n)? [closed] Q2: is it possible to do a trick like String (value.getBytes("ISO-8859-1"),"UTF-8") for jsf with the help of maven or by some jsf futures ? Q3: what is wrong with maven configuration? Thank you!
