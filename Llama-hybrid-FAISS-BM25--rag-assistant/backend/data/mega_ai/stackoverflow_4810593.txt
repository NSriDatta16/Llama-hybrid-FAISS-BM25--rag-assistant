[site]: stackoverflow
[post_id]: 4810593
[parent_id]: 4810516
[tags]: 
The std::cout object has a fixed meaning, and that is to output to the standard out stream. The user of your program gets to control where standard out is connected to, not you. What you can do is decide whether you wish to write to a file, to standard out or to any other output stream. So in your code you switch what stream you write to. Again, the point of writing to the standard out stream is to give the user a flexibility in choosing where the output goes to. You're not supposed to redirect standard out; this is something the user is supposed to have the freedom to do. Another thing is that you shouldn't mix C IO and C++ IO in a C++ program. Choose which IO library you wish to work with and stick to it. That said, you can in C++ quite elegantly switch streams for a function to take input from by templating the handler function on the template parameters of std::basic_istream<> . Then the function will read its input from the input stream independently of the real kind of stream it's working with. Here's an example: #include #include #include template void dodge_this(std::basic_istream & in) { // in is an input stream. read from it as you read from std::cin. } int main(int argc, char* argv[]) { if( std::string(argv[1]) == "cin" ) { dodge_this(std::cin); } else if( std::string(argv[1]) == "file" ) { std::ifstream file("input.txt"); dodge_this(file); } else { dodge_this(dev_null_stream); // i just made that up. you get the idea. } }
