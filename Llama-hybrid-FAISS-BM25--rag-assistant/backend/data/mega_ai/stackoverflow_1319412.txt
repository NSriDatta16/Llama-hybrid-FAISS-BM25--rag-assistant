[site]: stackoverflow
[post_id]: 1319412
[parent_id]: 1319273
[tags]: 
It is for internal use as it depends on the MemoryManager used. BTW, that's why you need to use the pair GetMem/FreeMem from the same MemoryManager; there is no canonical way of knowing how the memory has been reserved. In Delphi, if you look at FastMM4, you can see that the memory is allocated in small, medium or large blocks: the small blocks are allocated in pools of fixed size blocks (block size is defined at the pool level in the block type) TSmallBlockType = packed record {True = Block type is locked} BlockTypeLocked: Boolean; {Bitmap indicating which of the first 8 medium block groups contain blocks of a suitable size for a block pool.} AllowedGroupsForBlockPoolBitmap: byte; {The block size for this block type} BlockSize: Word; the medium blocks are also allocated in pools but have a variable size {Medium block layout: Offset: -8 = Previous Block Size (only if the previous block is free) Offset: -4 = This block size and flags Offset: 0 = User data / Previous Free Block (if this block is free) Offset: 4 = Next Free Block (if this block is free) Offset: BlockSize - 8 = Size of this block (if this block is free) Offset: BlockSize - 4 = Size of the next block and flags {Get the block header} LBlockHeader := PCardinal(Cardinal(APointer) - BlockHeaderSize)^; {Get the medium block size} LBlockSize := LBlockHeader and DropMediumAndLargeFlagsMask; the large blocks are allocated individually with the required size TLargeBlockHeader = packed record {Points to the previous and next large blocks. This circular linked list is used to track memory leaks on program shutdown.} PreviousLargeBlockHeader: PLargeBlockHeader; NextLargeBlockHeader: PLargeBlockHeader; {The user allocated size of the Large block} UserAllocatedSize: Cardinal; {The size of this block plus the flags} BlockSizeAndFlags: Cardinal; end;
