[site]: stackoverflow
[post_id]: 951462
[parent_id]: 951311
[tags]: 
Have a table containing all the possible stats names (which I think you should have anyway, with an fkey constraint from tb_rAQTORStatsItem onto it) Then you can have something like: SELECT astats.QTORStatsID, astats.ServerName, astats.Remarks, astats.StatsBeginDateTime, astats.StatsEndDateTime, max(case item.AQTORStatName when 'QtCPU_Average' then AQTORStatValue end) as QtCPU_Average, max(case item.AQTORStatName when 'QtCPU_TopQuintile' then AQTORStatValue end) as QtCPU_TopQuintile, /* repeat for each statistic... */ FROM tb_dAQTORStats astats CROSS JOIN tb_rAQTORStatNames statnames LEFT JOIN tb_rAQTORStatsItem item ON item.AQTORStatName = statnames.AQTORStatName AND item.AQTORStatsID = astats.AQTORStatsID GROUP BY astats.QTORStatsID, astats.ServerName, astats.Remarks, astats.StatsBeginDateTime, astats.StatsEndDateTime Although this is still pretty ugly, at least you can cut the N-way join to a 3-way join. Yes, this is a case of flexibility and simplicity begin at odds. Adding columns is in a way a neater way to solve the problem, because the database schema will precisely match what stats you collect and what type they are: but you need to keep them in sync. (nb syntax of query not tested, I'm assuming CROSS JOIN works in the way I expect)
