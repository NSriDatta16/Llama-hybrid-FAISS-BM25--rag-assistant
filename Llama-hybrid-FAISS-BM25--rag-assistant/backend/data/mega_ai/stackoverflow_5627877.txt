[site]: stackoverflow
[post_id]: 5627877
[parent_id]: 5627037
[tags]: 
I solved that problem by: adding file.db into project/assets folder; writing next class: public class LinnaeusDatabase extends SQLiteOpenHelper{ private static String DATABASE_NAME = "Dragonfly.db"; public final static String DATABASE_PATH = "/data/data/com.kan.linnaeus/databases/"; private static final int DATABASE_VERSION = 1; private SQLiteDatabase dataBase; private final Context dbContext; public LinnaeusDatabase(Context context) { super(context, DBActivity.DatabaseName, null, DATABASE_VERSION); this.dbContext = context; DATABASE_NAME = DBActivity.DatabaseName; // checking database and open it if exists if (checkDataBase()) { openDataBase(); } else { try { this.getReadableDatabase(); copyDataBase(); this.close(); openDataBase(); } catch (IOException e) { throw new Error("Error copying database"); } Toast.makeText(context, "Initial database is created", Toast.LENGTH_LONG).show(); } } private void copyDataBase() throws IOException{ InputStream myInput = dbContext.getAssets().open(DATABASE_NAME); String outFileName = DATABASE_PATH + DATABASE_NAME; OutputStream myOutput = new FileOutputStream(outFileName); byte[] buffer = new byte[1024]; int length; while ((length = myInput.read(buffer))>0){ myOutput.write(buffer, 0, length); } myOutput.flush(); myOutput.close(); myInput.close(); } public void openDataBase() throws SQLException { String dbPath = DATABASE_PATH + DATABASE_NAME; dataBase = SQLiteDatabase.openDatabase(dbPath, null, SQLiteDatabase.OPEN_READWRITE); } private boolean checkDataBase() { SQLiteDatabase checkDB = null; boolean exist = false; try { String dbPath = DATABASE_PATH + DATABASE_NAME; checkDB = SQLiteDatabase.openDatabase(dbPath, null, SQLiteDatabase.OPEN_READONLY); } catch (SQLiteException e) { Log.v("db log", "database does't exist"); } if (checkDB != null) { exist = true; checkDB.close(); } return exist; } }
