[site]: datascience
[post_id]: 33182
[parent_id]: 
[tags]: 
advice on distance metric for knn w/image recognition

I'm getting my feet wet with machine learning and am implementing a knn algorithm on a dataset that i've created. I've created a set of images of circles and squares and want the knn algorithm to classify the test set. It does this by feature extracting the border of the circle/square with a canny algorithm from scikit-image library. This returns a numpy array of booleans. Right now my distance metric looks like so. distance = 1024 for x in range(length): for y in range(length): if(instance1[0][x,y]==instance2[0][x,y]): distance -=1 I understand it's poor for a bunch of reasons, but i'm having a difficult time figuring out how to do better since 1.) my images are black/white 2.) the canny edge detection algorithm returns a M x M matrix of booleans that determine if something is an edge or not. Because of number two, i'm checking every pixel and seeing if they match, if they do I mark them as closer in distance. As you can imagine, my accuracy rate is pretty close to 50 percent, hovering right around 58. Are there any distance algorithms I'm missing that are accurate for this type of condition?
