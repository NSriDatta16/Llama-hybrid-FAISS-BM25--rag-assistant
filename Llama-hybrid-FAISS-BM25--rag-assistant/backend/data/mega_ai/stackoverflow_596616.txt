[site]: stackoverflow
[post_id]: 596616
[parent_id]: 595748
[tags]: 
Remember that IPs are not a textual address, but a numeric ID. I have a similar situation (we're doing geo-ip lookups), and if you store all your IP addresses as integers (for example, my IP address is 192.115.22.33 so it is stored as 3228767777), then you can lookup IPs easily by using right shift operators. The downside of all these types of lookups is that you can't benefit from indexes and you have to do a full table scan whenever you do a lookup. The above scheme can be improved by storing both the network IP address of the CIDR network (the beginning of the range) and the broadcast address (the end of the range), so for example to store 192.168.1.0/24 you can store two columns: network broadcast 3232235776, 3232236031 And then you can to match it you simply do SELECT count(*) FROM bans WHERE 3232235876 >= network AND 3232235876 This would let you store CIDR networks in the database and match them against IP addresses quickly and efficiently by taking advantage of quick numeric indexes. Note from discussion below : MySQL 5.0 includes a ranged query optimization called " index merge intersect " which allows to speed up such queries (and avoid full table scans), as long as: There is a multi-column index that matches exactly the columns in the query, in order. So - for the above query example, the index would need to be (network, broadcast) . All the data can be retrieved from the index. This is true for COUNT(*) , but is not true for SELECT * ... LIMIT 1 . MySQL 5.6 includes an optimization called MRR which would also speed up full row retrieval, but that is out of scope of this answer.
