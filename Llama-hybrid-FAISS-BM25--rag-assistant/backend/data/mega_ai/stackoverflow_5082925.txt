[site]: stackoverflow
[post_id]: 5082925
[parent_id]: 5082907
[tags]: 
Doing the calls all the same time If you want to do all the ajax calls at the same time, you can simply call an ajax request right after the others. You could even assign them the same success handler. If you want a more "elegant" approach, I would do something like this: // define a set of requests to perform - you could also provide each one // with their own event handlers.. var requests = [ { url: 'http://someurl', data: yourParams }, { url: 'http://someurl', data: yourParams }, { url: 'http://someurl', data: yourParams }, { url: 'http://someurl', data: yourParams } ]; var successHandler = function (data) { // do something } // these will basically all execute at the same time: for (var i = 0, l = requests.length; i . Do a single request I don't know your use case, but of course what you really should be trying to do is retrieve all the data you're retrieving in a single request. That won't put a strain on your server, the site/application will seem faster to the user and is a better long term approach. I would try to combine checkAvailability and getWebTree into a single request. Instead of receiving the data in Javascript as text objects, a better approach would be to receive them as json data. Luckily PHP provides very easy functions to convert objects and arrays to json, so you'll be able to work with those objects pretty easily. edit : small modifications in the PHP code now that I understand your use case better. So something like this in the PHP/CI code: function getRequestData () { if (checkAvailability() == 'available') { $retval = array ( 'available' => '1', 'getWebTree' => getWebTree() ); } else { $retval = array ( 'available' => '0' ); } header('Content-type: text/javascript; charset=UTF-8'); echo json_encode($retval);); } And the Javascript code can then access those by a single ajax request: $.ajax({ url: 'http://yoururl/getRequestData', dataType: 'json', success: function (jsonData) { // we can now access the parameters like this: if (jsonData.checkAvailability) { // etc } //and of course do something with the web tree: json.getWebTree } }); . Execute the requests synchronously If you set the async parameter in the $.ajax options to false the functions will be made in a synchronous fashion so your code halts until execution has been completed.. or as the documentation says: asyncBoolean Default: true By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: "jsonp" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. See http://api.jquery.com/jQuery.ajax/
