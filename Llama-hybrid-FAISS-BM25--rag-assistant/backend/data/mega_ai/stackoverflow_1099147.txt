[site]: stackoverflow
[post_id]: 1099147
[parent_id]: 
[tags]: 
What research-operating-system features would you advocate including in Google Chrome Operating System

Imagine that a large player is undertaking the construction of a new operating system, where backward compatibility requirements are limited to: Run existing applications written in (or compiled to) JavaScript which are presented in HTML5 and styled with CSS3 Plug and play support for printers, external storage, and optical drives Degrade gracefully when disconnected from the internet Sufficient process quotas to support safely permitting tasks to run in the background, including timers What specific features from existing research operating systems (such as Plan 9 ) would you like to see enter the mainstream through this channel? Please limit your suggestions to things that have been implemented, and provide a link to the implementation (or at least search terms). From the Plan 9 docs : Plan 9 began in the late 1980â€™s as an attempt to have it both ways: to build a system that was centrally administered and cost-effective using cheap modern microcomputers as its computing elements. Netbooks qualify as cheap modern microcomputers, and The Cloud qualifies as centrally administered. There is an opportunity to implement the features (in DDaviesBrackett's words) that we want netbooks to have other than by extending a 1970's time-sharing OS; the research operating systems may have proved the value of alternatives by example. From the Plan 9 FAQ : Subject: What are its key ideas? Plan 9 exploits, as far as possible, three basic technical ideas: first, all the system objects present themselves as named files that are manipulated by read/write operations; second, all these files may exist either locally or remotely, and respond to a standard protocol; third, the file system name space - the set of objects visible to a program - is dynamically and individually adjustable for each of the programs running on a particular machine. The first two of these ideas were foreshadowed in Unix and to a lesser extent in other systems, while the third is new: it allows a new engineering solution to the problems of distributed computing and graphics. Plan 9's approach means that application programs don't need to know where they are running; where, and on what kind of machine, to run a Plan 9 program is an economic decision that doesn't affect the construction of the application itself. Does that not appear to be an excellent fit for the netbook/Cloud domain?
