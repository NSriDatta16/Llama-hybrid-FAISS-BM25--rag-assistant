[site]: stackoverflow
[post_id]: 852172
[parent_id]: 309884
[tags]: 
A few years ago I created this in C# for multi language applications. This one is base class: public abstract class ValueSource { public abstract object Value { get; } } This one is for wordify.. public abstract class NumberTextValueSource:ValueSource { public abstract decimal Number { get; } public abstract string Format { get; } public abstract string Negative { get; } public abstract bool UseValueIfZero { get; } public abstract string N0 { get; } public abstract string N1 { get; } public abstract string N2 { get; } public abstract string N3 { get; } public abstract string N4 { get; } public abstract string N5 { get; } public abstract string N6 { get; } public abstract string N7 { get; } public abstract string N8 { get; } public abstract string N9 { get; } public abstract string N10 { get; } public abstract string N11 { get; } public abstract string N12 { get; } public abstract string N13 { get; } public abstract string N14 { get; } public abstract string N15 { get; } public abstract string N16 { get; } public abstract string N17 { get; } public abstract string N18 { get; } public abstract string N19 { get; } public abstract string N20 { get; } public abstract string N30 { get; } public abstract string N40 { get; } public abstract string N50 { get; } public abstract string N60 { get; } public abstract string N70 { get; } public abstract string N80 { get; } public abstract string N90 { get; } public abstract string N100 { get; } public abstract string NHundred { get; } public abstract string N1000 { get; } public abstract string NThousand { get; } public abstract string NMillion { get; } public abstract string NBillion { get; } public abstract string NTrillion { get; } public abstract string NQuadrillion { get; } string getOne(Type t, string v) { if (v[0] == '0' && !UseValueIfZero) return ""; return (string)t.GetProperty("N" + v[0].ToString()).GetValue(this, null); } string getTwo(Type t, string v) { if (v[0] == '0') if (v[1] != '0') return getOne(t, v.Substring(1)); else return ""; if (v[1] == '0' || v[0] == '1') return (string)t.GetProperty("N" + v).GetValue(this, null); return (string)t.GetProperty("N" + v[0].ToString() + "0").GetValue(this, null) + getOne(t, v.Substring(1)); } string getThree(Type t, string v) { if(v[0] == '0') return getTwo(t,v.Substring(1)); if (v[0] == '1') return N100 + getTwo(t, v.Substring(1)); return getOne(t, v[0].ToString()) + NHundred + getTwo(t, v.Substring(1)); } string getFour(Type t, string v) { if (v[0] == '0') return getThree(t, v.Substring(1)); if (v[0] == '1') return N1000 + getThree(t, v.Substring(1)); return getOne(t, v[0].ToString()) + NThousand + getThree(t, v.Substring(1)); } string getFive(Type t, string v) { if (v[0] == '0') return getFour(t, v.Substring(1)); return getTwo(t, v.Substring(0, 2)) + NThousand + getThree(t, v.Substring(2)); } string getSix(Type t, string v) { if (v[0] == '0') return getFive(t, v.Substring(1)); return getThree(t, v.Substring(0, 3)) + NThousand + getThree(t, v.Substring(3)); } string getSeven(Type t, string v) { if (v[0] == '0') return getSix(t, v.Substring(1)); return getOne(t, v[0].ToString()) + NMillion + getSix(t, v.Substring(3)); } string getEight(Type t, string v) { if (v[0] == '0') return getSeven(t, v.Substring(1)); return getTwo(t, v.Substring(0, 2)) + NMillion + getSix(t, v.Substring(2)); } string getNine(Type t, string v) { if (v[0] == '0') return getEight(t, v.Substring(1)); return getThree(t, v.Substring(0, 3)) + NMillion + getSix(t, v.Substring(3)); } string getTen(Type t, string v) { if (v[0] == '0') return getNine(t, v.Substring(1)); return getOne(t, v.Substring(0, 1)) + NBillion + getNine(t, v.Substring(1)); } string getEleven(Type t, string v) { if (v[0] == '0') return getTen(t, v.Substring(1)); return getTwo(t, v.Substring(0, 2)) + NBillion + getNine(t, v.Substring(2)); } string getTwelve(Type t, string v) { if (v[0] == '0') return getEleven(t, v.Substring(1)); return getThree(t, v.Substring(0, 3)) + NBillion + getNine(t, v.Substring(3)); } string getThirteen(Type t, string v) { if (v[0] == '0') return getTwelve(t, v.Substring(1)); return getOne(t, v.Substring(0, 1)) + NTrillion + getTwelve(t, v.Substring(1)); } string getForteen(Type t, string v) { if (v[0] == '0') return getThirteen(t, v.Substring(1)); return getTwo(t, v.Substring(0, 2)) + NTrillion + getTwelve(t, v.Substring(2)); } string getFifteen(Type t, string v) { if (v[0] == '0') return getForteen(t, v.Substring(1)); return getThree(t, v.Substring(0, 3)) + NTrillion + getTwelve(t, v.Substring(3)); } string getSixteen(Type t, string v) { if (v[0] == '0') return getFifteen(t, v.Substring(1)); return getOne(t, v.Substring(0, 1)) + NQuadrillion + getFifteen(t, v.Substring(1)); } string getSeventeen(Type t, string v) { if (v[0] == '0') return getSixteen(t, v.Substring(1)); return getTwo(t, v.Substring(0, 2)) + NQuadrillion + getFifteen(t, v.Substring(2)); } string getEighteen(Type t, string v) { if (v[0] == '0') return getSeventeen(t, v.Substring(1)); return getThree(t, v.Substring(0, 3)) + NQuadrillion + getFifteen(t, v.Substring(3)); } string convert(Type t, string hp) { switch (hp.Length) { case 1: return getOne(t, hp); case 2: return getTwo(t, hp); case 3: return getThree(t, hp); case 4: return getFour(t, hp); case 5: return getFive(t, hp); case 6: return getSix(t, hp); case 7: return getSeven(t, hp); case 8: return getEight(t, hp); case 9: return getNine(t, hp); case 10: return getTen(t, hp); case 11: return getEleven(t, hp); case 12: return getTwelve(t, hp); case 13: return getThirteen(t, hp); case 14: return getForteen(t, hp); case 15: return getFifteen(t, hp); case 16: return getSixteen(t, hp); case 17: return getSeventeen(t, hp); case 18: return getEighteen(t, hp); } return ""; } public override object Value { get { decimal d = Number; decimal highPoint, lowPoint; bool isNeg = d 0 ? convert(t, lowPoint.ToString().Substring(2)) : UseValueIfZero ? N0 : ""; if (isNeg) strHigh = Negative + " " + strHigh; return string.Format(Format, strHigh, strLow); } } } And this one is for Turkish Lera (TRY): public class TRYNumberTextValueSource:NumberTextValueSource { decimal num; public TRYNumberTextValueSource(decimal value) { num = Math.Round(value, 2); } public override decimal Number { get { return num; } } public override string Format { get { if (num == 0) return N0 + " YTL"; if (num > -1 && num And it is used this way: MessageBox.show((string)(new TRYNumberTextValueSource(12345)).Value);
