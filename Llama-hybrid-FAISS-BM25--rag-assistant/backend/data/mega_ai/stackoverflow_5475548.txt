[site]: stackoverflow
[post_id]: 5475548
[parent_id]: 5383681
[tags]: 
I have the same task, so here is my solution: attach handler for datagrid's MouseLeftButtonDown event using AddHandler dataGrid.AddHandler(UIElement.MouseLeftButtonDownEvent, new MouseButtonEventHandler(DataGrid_MouseLeftButtonDown), true); , save SelectedIndex in private variable private int prevSelectedIndex; void DataGrid_MouseLeftButtonDown(object sender, System.Windows.Input.MouseButtonEventArgs e) { if (prevSelectedIndex != -1 && prevSelectedIndex == dataGrid.SelectedIndex) { dataGrid.SelectedIndex = -1; } prevSelectedIndex = dataGrid.SelectedIndex; } if you want reuse this logic you can create Behavior for DataGrid type Add System.Windows.Interactivity assembly reference, add class DataGridSecondClickUnselectBehavior public class DataGridSecondClickUnselectBehavior : Behavior { protected override void OnAttached() { base.OnAttached(); AssociatedObject.AddHandler(UIElement.MouseLeftButtonDownEvent, new MouseButtonEventHandler(AssociatedObject_MouseLeftButtonDown), true); } private int prevSelectedIndex; void AssociatedObject_MouseLeftButtonDown(object sender, System.Windows.Input.MouseButtonEventArgs e) { if (prevSelectedIndex != -1 && prevSelectedIndex == AssociatedObject.SelectedIndex) { AssociatedObject.SelectedIndex = -1; } prevSelectedIndex = AssociatedObject.SelectedIndex; } protected override void OnDetaching() { base.OnDetaching(); AssociatedObject.RemoveHandler(UIElement.MouseLeftButtonDownEvent, new MouseButtonEventHandler(AssociatedObject_MouseLeftButtonDown)); } } Now after you compile solution in blend you can add this behavior simply Drag'n'drop from Assets->Behaviors to DataGrid control
