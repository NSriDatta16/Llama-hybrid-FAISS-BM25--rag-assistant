[site]: stackoverflow
[post_id]: 3197659
[parent_id]: 3197614
[tags]: 
A trie has the following advantages over a Hash table: Looking up data in a trie is faster in the worst case, O(m) time, compared to an imperfect hash table. An imperfect hash table can have key collisions. A key collision is the hash function mapping of different keys to the same position in a hash table. The worst-case lookup speed in an imperfect hash table is O(N) time, but far more typically is O(1) , with O(m) time spent evaluating the hash. There are no collisions of different keys in a trie. Buckets in a trie which are analogous to hash table buckets that store key collisions are only necessary if a single key is associated with more than one value. There is no need to provide a hash function or to change hash functions as more keys are added to a trie. A trie can provide an alphabetical ordering of the entries by key. Tries have the following drawbacks: Tries can be slower in some cases than hash tables for looking up data, especially if the data is directly accessed on a hard disk drive or some other secondary storage device where the random access time is high compared to main memory. It is not easy to represent all keys as strings, such as floating point numbers - a straightforward encoding using the bitstring of their encoding leads to long chains and prefixes that are not particularly meaningful. If the drawbacks are something that you can live with, I'd suggest going with the trie. Source: Wikipedia: Trie#As a replacement of other data structures
