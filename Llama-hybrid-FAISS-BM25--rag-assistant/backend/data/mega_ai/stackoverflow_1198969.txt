[site]: stackoverflow
[post_id]: 1198969
[parent_id]: 
[tags]: 
Architecture Design for DataInterface - remove switch on type

I am developing a project that calculates various factors for a configuration of components. The configuration is set/changed by the user at runtime. I have a Component base class and all configuration items are derived from it. The information for each component is retrieved from data storage as and when it is required. So that the storage medium can change I have written a DataInterface class to act as an intermediary. Currently the storage medium is an Access Database. The DataInterface class thus opens the database and creates query strings to extract the relevant data. The query string will be different for each component. The problem I have is designing how the call to GetData is made between the component class and the DataInterface class. My solutions have evolved as follows: 1) DataInterface has a public method GetXXXXData() for each component type. (where XXX is component type). Sensor sensor = new Sensor(); sensor.Data = DataInterface.GetSensorData(); 2) DataInterface has a public method GetData(componentType) and switches inside on component type. Sensor sensor = new Sensor(); sensor.Data = DataInterface.GetData(ComponentType.Sensor); 3) Abstract component base class has virtual method GetData() which is overidden by each derived class. GetData() makes use of the DataInterface class to extract data. Sensor sensor = new Sensor(); sensor.GetData(); //populates Data field internally. Could be called in constructor For me solution 3 appears to be the most OOD way of doing things. The problem I still have however is that the DataInterface still needs to switch on the type of the caller to determine which query string to use. I could put this information in each component object but then this couples the components to the storage medium chosen. Not good. Also, the component should not care how the data is stored. It should just call its GetData method and get data back. Hopefully, that makes sense. What im looking for is a way to implement the above functionality that does not depend on using a switch on type. I'm still learning how to design architecture so any comments on improvement welcome. TIA
