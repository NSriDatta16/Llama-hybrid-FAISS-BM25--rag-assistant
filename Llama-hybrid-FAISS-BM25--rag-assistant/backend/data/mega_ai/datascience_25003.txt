[site]: datascience
[post_id]: 25003
[parent_id]: 24998
[tags]: 
First, to answer your questions directly 1) What M/L algorithms to try: Since number of people can be treated as a continuous variable, if you are using python, you can try everything from multiple linear regression from sklearn.linear_model import LinearRegression polynominal regression, first create polynomial features using sklearn.preprocessing library, then fit the model using linear regression again from sklearn.preprocessing import PolynomialFeatures support vector machine from sklearn.svm import SVR decision tree regressor from sklearn.tree import DecisionTreeRegressor random forest regressor from sklearn.ensemble import RandomForestRegressor AdaBoost regressor from sklearn.ensemble import AdaBoostRegressor XGBoost, this one needs to be installed separately, following the instructions on this link: http://xgboost.readthedocs.io/en/latest/build.html# from xgboost import XGBClassifier Deep neural network, I wouldn't recommend trying this in the beginning since it can be constructed into very flexible and complex models with way too many choices on the network layout. But if you feel adventurous, this one can be quite fun. Simplest way to get started on this is probably using the keras wrapper for TensorFlow. Here're just some of the most commonly used models and layers import keras from keras.models import Sequential from keras.layers import Dense from keras.layers import Dropout Recurrent neural network, since you do have time series sensor data, you can potentially use RNN to predict future occupancy based on the past sensor data. You would combine the above keras models, then add LSTM layers to get the 'memory' effect from keras.layers import LSTM 2) This one is very difficult to answer as it depends on the configuration of the sensors, setup of the room, how the sensor is placed, is the motion detector a PIR, if PIR, is it dual or quad sensor, what is the shape of the PIR lens, is there an ultrasound sensor, how many channels on the luminosity sensor module, does it read RGB ... etc. This one would require experience, tons of experimentation and ingenuity. You can maybe consult with someone with physics, electronics or electrical engineering background. Some wild ideas: if you know how many people are in the room (through your prediction), and you know the room setup, size and thermal characteristics, using temperature and humidity sensor, you can probably estimate the average mass of the individuals in the room. This one is interesting in that it combines a physics model and a machine learning model the luminosity sensor can probably tell you if the room has natural light or artificial light (looking at rate of illuminance change, does it follow diurnal patterns) motion sensor can probably tell you (other than yes or no motion), whether the motion is large, small, fast or slow, depending on the sensor setup Finally, some thoughts on training this model. Before starting to play with all the ML algorithms, it's probably good to spend a good week or two figuring out the 'preprocessing' of the sensor time series. The model accuracy is highly dependent on the preprocessing steps and feature selection / engineering, probably even more so than the choice of the algorithms. If you feed most algorithms with enough data and do a good job on cross-validation, you can get similar accuracy results (at least for simple regression-type applications). Some preprocessing issues to consider What is your window frame size? Will you simply take moving average, or combine some other statistics within each data window? How do you remove or reduce the noise from the sensors? e.g., how do you know the signal you are looking at results from actual physical phenomenon v.s. electronic noise? Does it help to do fourier transform and filtering? Is it better to use frequency-domain features or time-domain features? Or wavelets? What about dimensionality reduction techniques like PCA, LDA? Lots of things to consider, which is also why machine learning is both challenging and really fun.
