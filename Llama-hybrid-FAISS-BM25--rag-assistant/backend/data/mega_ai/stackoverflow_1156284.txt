[site]: stackoverflow
[post_id]: 1156284
[parent_id]: 1140796
[tags]: 
After researching this further, I found that the iframe is irrelevant. The same behaviour doesn't work on a normal button on the host page. I basically fixed it by using JSNI to replicate part of GWT's event handling mechanism. The following works: Element buttonElement = DOM.getElementById("externalButton"); new CustomElementWrapper(buttonElement).addClickHandler(new ClickHandler() { public void onClick(ClickEvent event) { Window.alert("GWT hooked into button"); } }); Where CustomElementWrapper is: public class CustomElementWrapper extends Widget implements HasClickHandlers { private ClickEventManager clickEventManager; public CustomElementWrapper(Element theElement) { setElement(theElement); clickEventManager = new ClickEventManager(theElement); } public HandlerRegistration addClickHandler(ClickHandler handler) { //The 'right' way of doing this would be the code below. However, this doesn't work // A bug in GWT? // // return addDomHandler(handler, ClickEvent.getType()); return clickEventManager.registerClickHandler(handler); } void invokeClickHandler() { clickEventManager.invokeClickHandler(); } public boolean isClickHandlerRegistered() { return clickEventManager.isClickHandlerRegistered(); } } Finally, the ClickEventManager, where the actual work happens is: public class ClickEventManager { private boolean clickHandlerRegistered = false; private ClickHandler clickHandler; private Element element; public ClickEventManager(Element element) { this.element = element; } public void invokeClickHandler() { //This shouldn't really be null but we are bypassing GWT's native event mechanism //so we can't create an event clickHandler.onClick(null); } public boolean isClickHandlerRegistered() { return clickHandlerRegistered; } HandlerRegistration registerClickHandler(ClickHandler handler) { clickHandler = handler; if (!clickHandlerRegistered) { registerClickHandlerInJS(element); clickHandlerRegistered = true; } return new HandlerRegistration() { public void removeHandler() { //For now, we don't support the removal of handlers throw new UnsupportedOperationException(); } }; } private native void registerClickHandlerInJS(Element element)/*-{ element.__clickManager = this; element.onclick = function() { var cm = this.__clickManager; cm.@com.talktactics.agent2.client.widgets.ClickEventManager::invokeClickHandler()(); } }-*/; } Personally, I hate this solution because I appear to be duplicating GWT's event handling and quite possibly introducing nasty javascript memory leaks. Any ideas on why my first post doesn't work (remembering that the iframe aspect is a red herring), would be appreciated. Thanks, Tin
