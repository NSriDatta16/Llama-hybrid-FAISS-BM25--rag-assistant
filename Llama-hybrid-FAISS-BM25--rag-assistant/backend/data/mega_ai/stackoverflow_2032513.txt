[site]: stackoverflow
[post_id]: 2032513
[parent_id]: 2032411
[tags]: 
As the others have said, you can use Enumerable.Range(int, int) to generate a sequence of integers returned as IEnumerable . And while you can convert the result to a List in the various ways that have been suggested already, you should only do that if you actually need a List . In this case, there is no need to do so. Your function could be rewritten as follows: IEnumerable intList = Enumerable.Range(1, 10); int intSum = intList.Sum(); int intSumOdds = intList.Where(x => x % 2 == 1).Sum(); double intAverage = intList.Average(); This is more efficient since the sequence returned by Enumerable.Range is generated "lazily" as it is enumerated. On the other hand, when the sequence is converted to a List then all of the values must be held in memory at once.
