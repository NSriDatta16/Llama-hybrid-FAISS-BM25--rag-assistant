[site]: stackoverflow
[post_id]: 4366592
[parent_id]: 
[tags]: 
Symfony 2 + Doctrine 2 + PHPUnit 3.5: Serialization of closure exception

I tried to find something about this on Google but nothing came out. I have a TestCase class that inherits from WebTestCase, with some methods that I want to use in all my unit/functional tests: getService( 'doctrine.orm.entity_manager' ); } public function getNetworkConfigurationRepository() { return $this->getEm()->getRepository( 'Application\FaxServerBundle\Entity\NetworkConfiguration' ); } public function loadNetworkConfigurationFixtures() { $loader = new Loader(); $loader->addFixture( new NetworkConfigurationData() ); $this->loadFixtures( $loader ); } public function loadFixtures( $loader ) { $purger = new ORMPurger(); $executor = new ORMExecutor( $this->getEm(), $purger ); $executor->execute( $loader->getFixtures() ); } protected function getService( $name, $kernel = null ) { return $this->getBootedKernel()->getContainer()->get( $name ); } protected function hasService( $name, $kernel = null ) { return $this->getBootedKernel()->getContainer()->has( $name ); } protected function getBootedKernel() { $this->kernel = $this->createKernel(); if ( !$this->kernel->isBooted() ) { $this->kernel->boot(); } return $this->kernel; } public function generateUrl( $client, $route, $parameters = array() ) { return $client->getContainer()->get( 'router' )->generate( $route, $parameters ); } } Then, my unit test: loadNetworkConfigurationFixtures(); } public function testGetConfiguration() { $config = $this->getNetworkConfigurationRepository()->getConfigurationArray(); $this->assertInternalType( 'array', $config ); $this->assertEquals( 6, count( $config ) ); $this->assertArrayHasKey( 'id', $config ); $this->assertArrayHasKey( 'ip', $config ); $this->assertArrayHasKey( 'gateway', $config ); $this->assertArrayHasKey( 'subnetMask', $config ); $this->assertArrayHasKey( 'primaryDns', $config ); $this->assertArrayHasKey( 'secondaryDns', $config ); } public function testGetConfigurationObject() { $config = $this->getNetworkConfigurationRepository()->getConfigurationObject(); $this->assertInternalType( 'object', $config ); } public function testGetConfigurationArray() { $config = $this->getNetworkConfigurationRepository()->getConfigurationArray(); $this->assertInternalType( 'array', $config ); } } It was working before, but, suddenly, after I updated my vendors (doctrine included), it began to throw this exception: 3) Application\FaxServerBundle\Tests\Entity\NetworkConfigurationRepositoryTest::testGetConfigurationArray RuntimeException: PHP Fatal error: Uncaught exception 'PDOException' with message 'You cannot serialize or unserialize PDO instances' in -:32 Stack trace: #0 [internal function]: PDO->__sleep() #1 -(32): serialize(Array) #2 -(113): __phpunit_run_isolated_test() #3 {main} Next exception 'Exception' with message 'Serialization of 'Closure' is not allowed' in -:0 Stack trace: #0 -(0): serialize() #1 -(113): __phpunit_run_isolated_test() #2 {main} thrown in - on line 0 I've found that the problem comes from the fixture loading. If I remove the code that loads fixtures, it works. Does anyone know what could be wrong in my code? Is this the best way of loading fixtures? Thanks!
