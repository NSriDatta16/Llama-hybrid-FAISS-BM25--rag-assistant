[site]: datascience
[post_id]: 48680
[parent_id]: 48671
[tags]: 
You cannot apply word2vec on multiple words. You should use something like doc2vec , which gives a vector for each phrase: phrase = model.infer_vector(['microsoft', 'visual', 'studio']) You can also average or sum the vectors of words (from word2vec) in each phrase, e.g. phrase = w2v('microsoft') + w2v('visual') + w2v('studio') This way, a phrase vector would be the same length as a word vector for comparison. But still, methods like doc2vec are better than a simple average or sum. Finally, you could proceed to compare each word in the first list to every phrase in the second list, and find the closest phrase. Note that a phrase like "cloud computing" has a completely different meaning than the word "cloud". Therefore, these phrases, specially if frequent, better to be treated as a single word, e.g. phrase = w2v('cloud_computing') Extra directions: Here is an answer by Astariul on stackoverflow that uses a function from word2vec package to calculate similarity between two sets of words. Take a look at fastText that works better when there is a lot of misspelled, or out-of-vocabulary words.
