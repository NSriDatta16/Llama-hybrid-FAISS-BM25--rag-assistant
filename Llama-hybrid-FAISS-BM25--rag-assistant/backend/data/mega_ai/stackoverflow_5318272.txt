[site]: stackoverflow
[post_id]: 5318272
[parent_id]: 5317747
[tags]: 
An indexed view is a copy of the data, stored (clustered) potentially (and normally) in a different way to the base table. For all purposes you now have two copies of the data SQL Server is smart enough to see that the view and table are aliases of each other for queries that involve only the columns in the indexed view if the indexed view contains all columns, it is considered a full alias and can be used (substituted) by the optimizer wherever the table is queried the indexed view can be used as just another index for the base table When you select only the 5 columns from tbl (which has an indexed view ivw ) SQL Server completely ignores your table, and just gives you data from ivw because the data pages are shorter (5 columns only), more records can be grabbed into memory in each page retrieval, so you get a 5x increase in speed When you select all 30 columns - there is no way for the indexed view to be helpful. The query completely ignores the view, and just selects data from the base table. IF you select data from all 30 columns, but the query filters on the first 4 columns of the indexed view,* and the filter is very selective (will result in a very small subset of records) SQL Server can use the indexed view (scanning/seeking) to quickly generate a small result set, which it can then use to JOIN back to the base table to get the rest of the data. However, similarly to regular indexes, an index on (a,b,c,d,e) or in this case clustered indexed view on (a,b,c,d,e) does NOT help a query that searches on (b,d,e) because they are not the first columns in the index.
