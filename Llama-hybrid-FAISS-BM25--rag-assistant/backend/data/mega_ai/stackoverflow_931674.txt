[site]: stackoverflow
[post_id]: 931674
[parent_id]: 931656
[tags]: 
To me, using the right tool for the job is key. If you need some kind of facility to generate links, which is basically a mapping of entity properties to formatted strings, then write a facility to do that. It doesn't have to be a service...on the contrary, having a full blown service for something like that is probably overkill. However, I wouldn't just lump this into your general "helpers". It sounds like this is something that has a specific purpose and intent, with a specific kind of behavior behind it. As such, put it in a location appropriately suited for that behavior...even if thats a new project. I try not to have a huge lump of "general" code in my applications. Everything has a purpose and implements a specific behavior. Sometimes that purpose and behavior are highly reusable, but I still try to organize those reusable elements of my domain logically. From a high level, I see most of my applications divided into the following: Client API/Service Domain Data Access (Optional) Framework A lot of this kind of reusable functionality falls in sort of a nether region between Framework and Domain. Part of it may exist as some base classes and/or interfaces and supporting types in Framework, with the other half, the concrete implementations, residing within my Domain. It sometimes seems odd, but organizing it this way helps me keep my domain as clean as possible (dedicated to business concerns), while still allowing me to abstract common and reusable concepts into lower level "framework" types.
