[site]: stackoverflow
[post_id]: 4298714
[parent_id]: 
[tags]: 
Function template bizzare problem

// UsingDirective.cpp : Defines the entry point for the console application. // #include "stdafx.h" #include using namespace std; #pragma once #include #pragma region CheckForFailureSignalPolicy template struct ThrowOnFailure; template struct NullOnFailure; template class FailureSignalPolicy> struct IsThrowOnFailure; template<> struct IsThrowOnFailure { enum {value = 1}; }; template<> struct IsThrowOnFailure { enum {value = 0}; }; #pragma endregion template struct Int2Type {}; template class FailurePolicy,class ExceptionType > struct IReportFailure { enum {isThrowing = IsThrowOnFailure ::value}; #pragma region empty static auto reportFailure()-> typename std::conditional ::type { return rprt_help(Int2Type ()); } static void rprt_help(Int2Type ) { throw ExceptionType(); } static std::nullptr_t rprt_help(Int2Type ) { return nullptr; } #pragma endregion //****************************************** template static auto reportFailure(const Argument& arg)-> typename std::conditional ::type { return rprt_help(const Argument& arg,Int2Type ()); } template static void rprt_help(const Argument& arg,Int2Type ) { throw ExceptionType(arg); } template static std::nullptr_t rprt_help(const Argument& arg,Int2Type ) { return nullptr; } #pragma region ExceptionType static auto reportFailure(const ExceptionType& ex)-> typename std::conditional ::type { return rprt_help(const ExceptionType& ex,Int2Type ()); } static void rprt_help(const ExceptionType& ex,Int2Type ) { throw ExceptionType(ex); } static std::nullptr_t rprt_help(const ExceptionType& ex,Int2Type ) { return nullptr; } #pragma endregion }; template class FailurePolicy, class ExceptionType> struct FailureSignalPolicy { enum {isThrowing = IsThrowOnFailure ::value}; static auto signalFailure() -> typename std::conditional ::value,void,std::nullptr_t>::type { return IReportFailure ::reportFailure(); } static auto signalFailure(const ExceptionType& ex) -> typename std::conditional ::value,void,std::nullptr_t>::type { return IReportFailure ::reportFailure(ex); } ///******************************************* template static auto signalFailure(const Argument& arg) -> typename std::conditional ::value,void,std::nullptr_t>::type { return IReportFailure ::reportFailure(arg); } }; template struct ThrowOnFailure : private FailureSignalPolicy { using FailureSignalPolicy ::signalFailure; }; template struct NullOnFailure : private FailureSignalPolicy { using FailureSignalPolicy ::signalFailure; }; int _tmain(int argc, _TCHAR* argv[]) { try { /*ThrowOnFailure ::signalFailure(); NullOnFailure ::signalFailure();*/ ThrowOnFailure ::signalFailure(1); } catch(...) { } return 0; } Trying to compile this I'm getting bizzare errors: Error 1 error C2143: syntax error : missing ')' before 'const' Error 2 error C2661: 'IReportFailure::rprt_help' : no overloaded function takes 0 arguments Error 3 error C2059: syntax error : ')' The problematic fnc is marked in code with * ** *
