[site]: crossvalidated
[post_id]: 447905
[parent_id]: 
[tags]: 
Probability that a population mean exceeds a threshold

In Googling this question, I see that there are a variety of similar tests but I couldn't find anything given the exact way I'm approaching this problem. This might be something obvious but I'm not sure. Here's the problem: Let's say that I have two normally distributed populations, A and B. For population A, the mean is known with absolute precision and the standard deviation can be determined from some number of samples (but not the mean - bear with me on that). For population B, the standard deviation will be derived from the same samples as population A, but the mean is completely unknown. What I'm trying to figure out is the likelihood that population B is greater than population A given only one sample from population B and the other information I know of both populations. What I'm trying to come up with is an alternative to the softmax function for classifying the likelihood that some Y value exceeds a threshold using a neural network. The threshold will never change, so I'm looking at it as the mean for population A, which has absolute precision. Obviously, standard deviation needs to be considered for both populations, but I'm making a subjective calculation, which is outside the scope of this question. It's sufficient to say that I can estimate the standard deviation through some number of samples. If I only label the Y values as 1 or 0 based on whether the threshold is exceeded or not, I'm missing additional information that can be gained from the true Y values. Rather than training the network using softmax or sparse categorial crossentropy , I could independently calculate probabilities of each category (above or below the threshold) given the observation, the threshold, and the presumed standard deviation and then train the network based on something like mean absolute error . I'm hoping someone can derive a formula and would be interested to know if there's already anything similar to this that can be used for training neural networks.
