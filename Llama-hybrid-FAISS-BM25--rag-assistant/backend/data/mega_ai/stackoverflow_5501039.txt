[site]: stackoverflow
[post_id]: 5501039
[parent_id]: 5497790
[tags]: 
You shouldn't find yourself "in a corner" with TDD. The eleventh test shouldn't so seriously change the design that the first ten tests need to change. Think hard about why so many tests need to change - look at it in detail, one by one - and see if you can come up with a way to make the change without breaking your existing tests. If, for instance, you need to add a parameter to a method that they all call: you could leave the existing fewer-parameter method in place, delegating to the new method and adding a default parameter; you could have all the tests call a utility method (or perhaps a setup method) that calls the old method, so you need to change the method call in only one place; you may be able to let your IDE do all the changes with a single command. TDD and Refactoring work symbiotically; each helps the other. Because you emerge from TDD with comprehensive unit tests, refactoring is safe; because you have the organizational, intellectual, and editing tools to refactor freely, you can keep your tests well synchronized with your design. You say you are a beginner at TDD; perhaps you need to be growing your refactoring skills while you learn TDD.
