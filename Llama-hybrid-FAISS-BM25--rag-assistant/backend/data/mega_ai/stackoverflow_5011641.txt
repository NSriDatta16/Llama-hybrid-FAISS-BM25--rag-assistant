[site]: stackoverflow
[post_id]: 5011641
[parent_id]: 5010631
[tags]: 
import re import textwrap class DefaultList(list): """ List having a default value (returned on invalid offset) >>> t = DefaultList([1,2,3], default=17) >>> t[104] 17 """ def __init__(self, *args, **kwargs): self.default = kwargs.pop('default', None) super(DefaultList,self).__init__(*args, **kwargs) def __getitem__(self, y): if y >= self.__len__(): return self.default else: return super(DefaultList,self).__getitem__(y) class SectionNumberer(object): "Hierarchical document numberer" def __init__(self, LineMatcher, Numbertype_list, defaultNumbertype): """ @param LineMatcher: line matcher instance (recognize section headings and parse them) @param Numbertype_list: list of Number classes (do section numbering at each level) @param defaultNumbertype: default Number class (if too few Number classes specified) """ super(SectionNumberer,self).__init__() self.match = LineMatcher self.types = DefaultList(Numbertype_list, default=defaultNumbertype) self.numbers = [] self.title = '' def addSection(self, level, title): "Add new section" depth = len(self.numbers) if depth turns # Section ## Subsection ## Subsection # Section ## Subsection ### Subsubsection ### Subsubsection # Section ## Subsection into 1 Section 1.I Subsection 1.II Subsection 2 Section 2.I Subsection 2.I.1 Subsubsection 2.I.2 Subsubsection 3 Section 3.I Subsection
