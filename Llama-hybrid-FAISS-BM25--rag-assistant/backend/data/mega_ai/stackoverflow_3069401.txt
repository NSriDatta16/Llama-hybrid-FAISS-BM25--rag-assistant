[site]: stackoverflow
[post_id]: 3069401
[parent_id]: 2937785
[tags]: 
I have a wrong example, too. It does not implement a clean actor model, and it has no concurrency issues, but it uses DF architecture, and extremly popular: any spreadsheet software (e.g. MS Excel). When you modify a cell, it sends "recalculate" signal to the cells which have reference to it. Altough, when you are working with a sheet, which becomes bigger and bigger, you can feel the real taste of the dataflow programming - the focus of the work will change: the formula creating looses its initial importance (you will find yourself just cloning the same 3-4 formulas), the layout becomes more important: re-organizing references, splitting long formulas to shorter ones, hiding parameters, finally form a graph from the data. If we realise, that formulas are components, and references are messages, we get the usual way of dataflow programming: first, we're creating some components, then we're building a dataflow graph with them. If components are too big, we split them into smaller ones. Finally, we're picking a visualization component for an eye-candy result presentation.
