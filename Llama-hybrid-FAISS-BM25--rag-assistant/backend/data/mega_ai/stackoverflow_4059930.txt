[site]: stackoverflow
[post_id]: 4059930
[parent_id]: 4059072
[tags]: 
Ok ,,, I've suffered from the same issue and I came up with a work around, check my answer in this question : Hierarchical menu in view based on parent child class I've been meaning to come up with a more generic elegant way of doing it since I've faced the problem but I've been busy ever since. I'm hoping I'll find some time in the next weeks to come up with something ,,, Note : for simplicity in my solution in the above question in the methods DisplayMenu and ConvertToItem particularity, I've removed the parts where it should check for the currentMenuID and the currentMenuItemID fields and add the current css class to the li element (or active class in your case). Since this is all what's your question is about, I've provided the full methods below. public static string DisplayMenu(this HtmlHelper helper, NavigationModel navigationMenu) { string classOfCurrentMenu; String result = " \n"; foreach(Menu menu in navigationMenu.Menus) { classOfCurrentMenu = ""; if (menu.ID == navigationMenu.currentMenuID) { classOfCurrentMenu = "current"; } result += " \n"; result += string.Format(" {1} \n", helper.AttributeEncode(classOfCurrentMenu),helper.AttributeEncode(menu.Name)); result += " \n"; foreach(MenuItem item in menu.MenuItems) { result += NavigationHelper.ConvertToItem(helper, item, navigationMenu.currentMenuID, navigationMenu.currentMenuItemID); } result += " \n"; result += " \n"; } result += " \n"; return result; } private static string ConvertToItem(this HtmlHelper helper,MenuItem item, int currentMenuID, int currentMenuItemID) { if (item.Show) { string classOfCurrentItem = ""; if (item.ID == currentMenuItemID && item.MenuID == currentMenuID) classOfCurrentItem = "current"; return string.Format(" {2} \n", helper.AttributeEncode(item.Link), helper.AttributeEncode(classOfCurrentItem), helper.AttributeEncode(item.Label)); } else { return ""; } } I don't consider this as a perfect solution to the problem, I hate writing HTML in C# code, I will try my best to come up with a more generic (multi level) cleaner solution for the problem, and of course make use of the TagBuilder class in the framework.
