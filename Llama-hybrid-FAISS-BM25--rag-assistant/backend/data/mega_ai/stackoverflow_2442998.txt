[site]: stackoverflow
[post_id]: 2442998
[parent_id]: 2442937
[tags]: 
Works fine here (returns a 403, it's at least not a 404): URL url = new URL("http://www.shefinds.com/files/Christian-Louboutin-Décolleté-100-pumps.jpg"); URLConnection connection = url.openConnection(); InputStream input = connection.getInputStream(); When I fix it so that it doesn't return a 403, the picture is correctly retireved: URL url = new URL("http://www.shefinds.com/files/Christian-Louboutin-Décolleté-100-pumps.jpg"); URLConnection connection = url.openConnection(); connection.setRequestProperty("User-Agent", "Mozilla/4.0"); InputStream input = connection.getInputStream(); OutputStream output = new FileOutputStream("/pic.jpg"); for (int data = 0; (data = input.read()) != -1;) { output.write(data)); } So your problem lies somewhere else. Converting is actually not needed. The initial URL is valid. Maybe you're obtaining the actual URL from some binary source using the wrong character encoding? The transition of é to Ã© namely suggests that the original source was UTF-8 encoded and that the code has incorrectly read it in in using ISO-8859-1 instead of UTF-8. Update : or maybe you've actually hardcoded it in the Java source code and saving the source file itself using the wrong encoding. I've configured my editor (Eclipse) to save files using UTF-8 and the -Dfile.encoding is also defaulted to UTF-8, that would explain why it works at my machine ;) Update 2 : as per the comments, in a nutshell, everything should work fine if the encoding used to save the source file matches the default -Dfile.encoding of the runtime platform (and the character encoding in question supports the é ). To avoid those unforeseen clashes whenever you like to distribute the code, it's indeed better to replace hardcoded non-ASCII chars by unicode escapes.
