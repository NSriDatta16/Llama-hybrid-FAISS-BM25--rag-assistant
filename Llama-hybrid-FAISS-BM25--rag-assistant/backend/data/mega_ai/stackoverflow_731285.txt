[site]: stackoverflow
[post_id]: 731285
[parent_id]: 731075
[tags]: 
Reasons to have separate assemblies: You can deploy them individually and load them at runtime using reflection (i.e., plugins). But make sure this level of added complexity is worth it. You can separate your business logic from your UI and theoretically (occasionally in practice) have a separate UI. You have an library of utility classes that you might want to use in both a Windows Forms and a ASP.NET application. You can put your business logic in a DLL and then have a DLL of unit tests to exercise that code. Along with the last point, you can configure some assemblies to only build in Debug or Release mode. So you might build your unit test assembly only in Debug mode and not ship it in Release mode. Or you might have an additional helper program (maybe for installation) that only builds for Release. Reasons to avoid separate assemblies: It adds complexity. Don't organize your code into multiple assemblies just based on a theoretical "modeling" of your program. Make sure the additional complexity actually buys you some greater value. It slows down compiles/builds. You can't have circular references between assemblies, so you have to jump through a lot of hoops and "plumbing abstractions" if you discover that your assembly needs to access classes and methods from a higher-level assembly. For instance, if your Windows Forms UI (.exe) assembly calls into a business logic DLL, the DLL can't reference the UI classes without a lot of messing around with interfaces and passing references across the layers. I think this is something that comes with experience. My own experience has been that as I've matured as a .NET developer, I've become less inclined to create more assemblies unless there's a very compelling reason.
