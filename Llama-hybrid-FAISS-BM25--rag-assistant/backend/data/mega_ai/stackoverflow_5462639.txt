[site]: stackoverflow
[post_id]: 5462639
[parent_id]: 5275082
[tags]: 
Re. your update: You don't need to fake the URL structure like that, unless you also want URLs like mainsite.com/secondarysite to be directly available to the user. I'll assume you're using name-based virtual hosting . One simple but very flexible approach would be to have each directive invoke a different wsgi script via the usual mod_wsgi configuration directives, and then each wsgi script can set os.environ['DJANGO_SETTINGS_MODULE'] pointing to a different settings file. Each of those settings files can have a different ROOT_URLCONF, so you can configure views at different paths if you need to. Leverage the include mechanism. If you want both domains to use the same database for everything, just have both settings files load the database config from a third file, eg. settings_shared.py. Or if you want to route some models to a shared database, and others not, that's possible too . It's easy to imagine how that could be configured for each domain: from settings_shared import DATABASES_SHARED DATABASES = DATABASES_SHARED.copy() DATABASES.update({ ... }) This approach takes care of configuring URLs and databases for each domain. But it doesn't take care of single sign-on. For the SSO portion, it really depends what sort of user experience you want and how much time you have ;) Try searching for "django sso". There are a lot of relevant questions here, eg: Implementing Single Sign On (SSO) using Django , How to build a secure Django single signon between different sites? , Django + Google SSO openid , Integrating Django and .Net applications using Single Sign On (SSO) , (Django) Sharing authentication across two sites that are on different domains
