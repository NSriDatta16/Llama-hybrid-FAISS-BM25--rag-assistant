[site]: stackoverflow
[post_id]: 5154494
[parent_id]: 5154371
[tags]: 
This question will invite many different answers, some based on how organisations work, some based on qualifications for planning and testing. There are many different ways to organise testing, especially since organisation sizes differ and may or may not have resources to hire different teams. There are different types of testing: Unit Testing Integration Testing Functional Testing Non-Functional Testing - stress, penetration and many other types User Acceptance Testing In my experience: Unit testing (atoms of functionality in isolation e.g. a single controller action) and Integration testing (those atoms working together e.g. a controller working with the domain tier objects, domain tier objects working with data tier objects,) should be done by the developer . Functional testing (system functions as the spec states) should be done by a separate QA team . Non-Functional testing can be done by a QA team or architect/tech lead . UAT (system is fit for purpose) should be done by the client . The reasoning behind this is, as automated Unit and Integration testing are white box (you can see inside the application e.g. the code), they will need to be completed by a developer (not neccessarily the developer responsible for the code under test). Functional testing and UAT are black box (you can't see inside the application) so are more likely to be done by someone non-technical, but skilled in test analysis. Non-functional testing can be either black or white box depending on what's under test and the overall strategy. It's important to note that more defects are found by testing another's work than testing your own. The tester will think differently and so look for/try things that would not have been accounted for during development, and people are naturally protective of their code (no matter how hard one tries to be objective). If there isn't a seperate test team, it's good to have developers test each others' code. To answer your question a bit more, when I was a tester I was responsible for test analysis (deciding what functional tests were required to test the specs) and writing test scripts and manually executing them tests. Once those scripts were written, any tester could execute them, but it was important that the test analysis was done separately to the developer's work on the application.
