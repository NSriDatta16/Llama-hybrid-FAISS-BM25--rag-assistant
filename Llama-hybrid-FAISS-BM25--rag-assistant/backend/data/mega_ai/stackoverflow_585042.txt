[site]: stackoverflow
[post_id]: 585042
[parent_id]: 585031
[tags]: 
Static methods make testing hard because they can't be replaced, it's as simple as that. How can static methods "mimic" functions as first class objects 1 ? Arguably they're worse than anything else on this front. You can "mimic" functions as first class objects by creating single-method interfaces, and indeed Google's Java Collections does exactly this in a number of places (for predicates, projections etc). That can't be done with static methods - there's no way (other than with reflection) to pass the concept of "when you want to apply a function, use this method. No, I can't see how static methods help here. They discourage state-changing (as the only state available is the global state and any mutable state passed in via the parameters) but they don't help on the "functions as first class objects" side. C# has better support for this (with lambda expressions and delegates) but even that's not as general as it might be. (Compare it with F#, for example.) 1 As of Java 8, method references will allow methods to be converted to instances of appropriate single-method interfaces, which will make all of this more relevant. Back in 2009 that was a long way off though...
