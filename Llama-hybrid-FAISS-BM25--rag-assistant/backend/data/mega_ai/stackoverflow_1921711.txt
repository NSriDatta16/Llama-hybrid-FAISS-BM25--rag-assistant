[site]: stackoverflow
[post_id]: 1921711
[parent_id]: 1921701
[tags]: 
As Luke said in comments, the particular List type already has a ToArray() method. But if you're using C# 3.0, you can leverage the ToArray() extension method on any IEnumerable instance (that includes IList , IList , collections, other arrays, etc.) var myList = new List {Guid.NewGuid(), Guid.NewGuid()}; Guid[] array = myList.ToArray(); // instance method IList myList2 = new List {Guid.NewGuid(), Guid.NewGuid()}; Guid[] array2 = myList2.ToArray(); // extension method var myList3 = new Collection {Guid.NewGuid(), Guid.NewGuid()}; Guid[] array3 = myList3.ToArray(); // extension method Regarding your second question: You can use the Select method to perform the needed projection: var list = new List {new MyClass(), new MyClass()}; Guid[] array = list.Select(mc => mc.value).ToArray();
