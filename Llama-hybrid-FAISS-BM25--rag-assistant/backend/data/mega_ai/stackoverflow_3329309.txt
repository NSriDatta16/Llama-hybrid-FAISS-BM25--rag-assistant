[site]: stackoverflow
[post_id]: 3329309
[parent_id]: 3329281
[tags]: 
Such a container-like class seems to be fairly easy to write (using an allocator to allocate uninitialized memory and placement new). And that is exactly what std::vector does. To use placement new , you would have to make a copy. void store(const T& value) { new (storage) T(value); // Perhaps boost::ptr_vector would work for non-copyable types (you'd give it pointers). #include #include #include struct X: boost::noncopyable { X(int x): x(x) {} int x; }; int main() { boost::ptr_vector vec; for (int i = 1; i And in C++0x, containers will accept non-copyable types as long as they are movable (which should normally be implementable for non-copyable types).
