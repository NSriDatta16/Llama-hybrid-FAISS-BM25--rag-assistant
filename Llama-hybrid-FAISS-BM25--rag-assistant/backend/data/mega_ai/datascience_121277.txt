[site]: datascience
[post_id]: 121277
[parent_id]: 
[tags]: 
How to use Keras Sequential with LocallyConnected layers

enter image description here I am trying to use locally connected neural networks to estimate finite elements of a mathematical function, using the Keras Sequential model. When I use dense layers all through, my code works perfectly and very accurately. But when I switch to use the LocallyConnected1D layers it brings the error shown in the picture. Yet, I expect it to be working fine for any type of layers I use, even dropout ones. So by the screenshot, I think the issue is with the dimensions, but I can't make sense of it. Any advice on what the error means in simple terms and possibly how to resolve the issue? Thanks. The code is: from keras.models import Sequential from keras.layers import Dense from keras.callbacks import EarlyStopping from keras.layers import Dense, LocallyConnected1D import numpy as np import tensorflow as tf import matplotlib.pyplot as plt import os import sys os.environ["KMP_DUPLICATE_LIB_OK"]="TRUE" # %% def LinearSampler(x_i_minus_1, x_i_plus_1, N): gamma=1/2; N0=int(N*gamma); Nrest=N-N0; p1 = x_i_minus_1 / (x_i_minus_1 + 1 - x_i_plus_1) p2 = (1 - x_i_minus_1) / (x_i_minus_1 + 1 - x_i_plus_1) x1 = np.linspace(0, x_i_minus_1, int(p1 * Nrest)) x2 = np.linspace(x_i_minus_1, x_i_plus_1, int(N0)) x3 = np.linspace(x_i_plus_1, 1, int(p2 * Nrest)) x = np.concatenate((x1, x2, x3)) return x # %% Defining the FEM tent functions def tent_function(x, x_i_minus_1, x_i_plus_1): """ Compute the tent function for a given point x and interval [x_i_minus_1, x_i, x_i_plus_1]. k = number of finite elements, k = 1, 2, ... m = x_i_plus_1: return 0 elif x_i_minus_1 k: print("The required finite element is outside the range of the available ones. That is, 'i' MUST always be less than or equal to 'k'") sys.exit() elif i == 0: x_i_minus_1 = 0 else: x_i_minus_1 = (i - 1)/(k + 1) x_i_plus_1 = x_i_minus_1 + (2 / (k + 1)) # %% Generate training data set train_x = LinearSampler(x_i_minus_1, x_i_plus_1, 50000) train_y = np.array([tent_function(xi, x_i_minus_1, x_i_plus_1) for xi in train_x]) # %% Define the model architecture model = Sequential() model.add(LocallyConnected1D(64, 3, input_shape=(10, 1), activation='relu')) model.add(Dense(16, activation='relu')) model.add(Dense(1, activation='linear')) # Compile the model model.compile(loss='mse', optimizer='Adam', metrics=['accuracy']) # Train the model on some data early_stop = EarlyStopping(monitor='loss', patience=10*i) ##Early stop model in case it isn't performing history = model.fit(train_x, train_y, epochs=50, verbose=1, callbacks=[early_stop]) and the error is; WARNING:tensorflow:Model was constructed with shape (None, 10, 1) for input KerasTensor(type_spec=TensorSpec(shape=(None, 10, 1), dtype=tf.float32, name='locally_connected1d_2_input'), name='locally_connected1d_2_input', description="created by layer 'locally_connected1d_2_input'"), but it was called on an input with incompatible shape (None,). Traceback (most recent call last): File C:\ProgramData\Anaconda3\envs\tf\lib\site-packages\spyder_kernels\py3compat.py:356 in compat_exec exec(code, globals, locals) File e:\desktop\...\file.py:111 history = model.fit(train_x, train_y, epochs=50, verbose=1, callbacks=[early_stop]) File C:\ProgramData\Anaconda3\envs\tf\lib\site-packages\keras\utils\traceback_utils.py:70 in error_handler raise e.with_traceback(filtered_tb) from None File ~\AppData\Local\Temp\__autograph_generated_filekrq21sck.py:15 in tf__train_function retval_ = ag__.converted_call(ag__.ld(step_function), (ag__.ld(self), ag__.ld(iterator)), None, fscope) ValueError: in user code: File "C:\ProgramData\Anaconda3\envs\tf\lib\site-packages\keras\engine\training.py", line 1160, in train_function * return step_function(self, iterator) File "C:\ProgramData\Anaconda3\envs\tf\lib\site-packages\keras\engine\training.py", line 1146, in step_function ** outputs = model.distribute_strategy.run(run_step, args=(data,)) File "C:\ProgramData\Anaconda3\envs\tf\lib\site-packages\keras\engine\training.py", line 1135, in run_step ** outputs = model.train_step(data) File "C:\ProgramData\Anaconda3\envs\tf\lib\site-packages\keras\engine\training.py", line 993, in train_step y_pred = self(x, training=True) File "C:\ProgramData\Anaconda3\envs\tf\lib\site-packages\keras\utils\traceback_utils.py", line 70, in error_handler raise e.with_traceback(filtered_tb) from None File "C:\ProgramData\Anaconda3\envs\tf\lib\site-packages\keras\engine\input_spec.py", line 232, in assert_input_compatibility raise ValueError( ValueError: Exception encountered when calling layer "sequential_2" " f"(type Sequential). Input 0 of layer "locally_connected1d_2" is incompatible with the layer: expected ndim=3, found ndim=1. Full shape received: (None,) Call arguments received by layer "sequential_2" " f"(type Sequential): • inputs=tf.Tensor(shape=(None,), dtype=float32) • training=True • mask=None
