[site]: stackoverflow
[post_id]: 3974188
[parent_id]: 3974152
[tags]: 
If all users must be registered I would go with a complete normalized solution. USERS TABLE OBJECTS TABLE --------------- ----------------- user_id (primary) object_id (primary) USERS_TO_OBJECTS TABLE -------------------- user_id (index) object_id (index) time (index) action (index) ? object_type (index) // could be useful to speed things up This setup will probably give you the best flexibility while charting and will also be pretty fast as you can leave out the user or the object if you don't need them. Edit: Say city X (id 9876) was updated by user 123 (id 1234)... 1234 - user_id (the user that did the action) 9876 - object_id (the object where the action was done) xyz - time updated - action type (so that you select only specific actions) city - object type (so that you select only specific objects) I've feed up this table with 40M rows and the results are pretty acceptable. 0.002 secs for a simple COUNT on the number of UPDATED cities in the last WEEK. Data was inserted randomly. Edit 2 If you find yourself with a really huge table you can resort to MySQL partitions and your schema is perfect. I really don't know how you're gonna use the tables but you could: PARTITION BY RANGE. Organize the partition on dates. Every new month or so you'd have a new partition. PARTITION BY KEY. Organize the partition by actions. Every action goes to it's proper partition. You can check out more on partitions on MySQL's site and this article gives you some detail into fine-tuning partitions.
