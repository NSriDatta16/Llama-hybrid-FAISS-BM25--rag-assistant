[site]: stackoverflow
[post_id]: 175874
[parent_id]: 155964
[tags]: 
Avoid autorelease Since you typically(1) don't have direct control over their lifetime, autoreleased objects can persist for a comparatively long time and unnecessarily increase the memory footprint of your application. Whilst on the desktop this may be of little consequence, on more constrained platforms this can be a significant issue. On all platforms, therefore, and especially on more constrained platforms, it is considered best practice to avoid using methods that would lead to autoreleased objects and instead you are encouraged to use the alloc/init pattern. Thus, rather than: aVariable = [AClass convenienceMethod]; where able, you should instead use: aVariable = [[AClass alloc] init]; // do things with aVariable [aVariable release]; When you're writing your own methods that return a newly-created object, you can take advantage of Cocoa's naming convention to flag to the receiver that it must be released by prepending the method name with "new". Thus, instead of: - (MyClass *)convenienceMethod { MyClass *instance = [[[self alloc] init] autorelease]; // configure instance return instance; } you could write: - (MyClass *)newInstance { MyClass *instance = [[self alloc] init]; // configure instance return instance; } Since the method name begins with "new", consumers of your API know that they're responsible for releasing the received object (see, for example, NSObjectController's newObject method ). (1) You can take control by using your own local autorelease pools. For more on this, see Autorelease Pools .
