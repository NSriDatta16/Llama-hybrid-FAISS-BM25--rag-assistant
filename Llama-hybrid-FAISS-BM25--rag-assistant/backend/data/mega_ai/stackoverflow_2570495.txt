[site]: stackoverflow
[post_id]: 2570495
[parent_id]: 2569187
[tags]: 
Sometimes using string constants is more trouble than it is worth. And IMO, this is one such example. But if you wish to pursue this, here are some ideas that may work for you: Use a Java DOM library to build the XML in memory, using the Java constants. Put the constants into a Properties object, then create an XML file template using Velocity, Freemarker or an equivalent Java compatible templating language that expands the properties values into the XML. 2a. In some circumstances JSPs could be used instead of a generic Java-compatible templating language. Generate the XML with placeholders for the named constants, then use XSLT to replace the placeholders with the actual values. But in each case, the steps you take in order to use the named constants leads to fragility in other areas, not to mention more code and extra processing. Which brings me back to my original point ... EDIT I think that the real reason that there is no really good solution to this problem is that it is a really hard problem. To illustrate, using JSPs to generate the XML (and discipline) would ensures that you only use valid Java constants, and is fail-fast with respect to the generated Java classes. However, the JSP approach does not guarantee that you generate well-formed XML. The root of the problem is that you need the expressiveness of embedding Java constructs in XML templates, combined with static checking of the well-formedness of both the Java and the XML aspects of the templates. You really need proper linguistic support for this, but in reality the available solutions just output characters without regard for (in this case) XML syntax rules.
