[site]: stackoverflow
[post_id]: 5011904
[parent_id]: 4251866
[tags]: 
I have accomplished this using ClientLogin. A basic class is below. This class returns an instance of Zend HTTP Client that is ready to make authenticated requests. get($token_name); if(!empty($token)) { //load a new HTTP client with our token $logger->info('Using cached token: ' . $token); $httpClient = new Zend_Gdata_HttpClient(); $httpClient->setConfig(array( 'maxredirects' => 0, 'strictredirects' => true, 'useragent' => 'uploader/v1' . ' Zend_Framework_Gdata/' . Zend_Version::VERSION ) ); $httpClient->setClientLoginToken($token); //attempt to use our token to make an authenticated request. If the token is invalid // an exception will be raised and we can catch this below $yt = new Zend_Gdata_YouTube($httpClient, 'uploader/v1', '', $youtube_api_key); $query = new Zend_Gdata_YouTube_VideoQuery(); $query->setFeedType('top rated'); $query->setMaxResults(1); $yt->getPlaylistListFeed(null, $query); //ignore the response! } else { $logger->info('Generating new HTTP client'); // Need to create a brand new client+authentication $authenticationURL= 'https://www.google.com/youtube/accounts/ClientLogin'; $httpClient = Zend_Gdata_ClientLogin::getHttpClient( $username = YOUTUBE_USERNAME_PROD, $password = YOUTUBE_PASSWORD_PROD, $service = 'youtube', $client = null, $source = 'uploader/v1', $loginToken = null, $loginCaptcha = null, $authenticationURL); // get the token so we can cache it for later $token = $httpClient->getClientLoginToken(); $tokenObj->destroy($token_name); $tokenObj->insert($token, $token_name); } return $httpClient; }catch(Zend_Gdata_App_AuthException $e) { $tokenObj->destroy($token_name); die("Google Authentication error: " . $e->getMessage()); }catch(Exception $e) { $tokenObj->destroy($token_name); die("General error: " . $e->getMessage()); } } // authenticate() } // GoogleAuthenticator ?> You'll need to have these constants defined: YOUTUBE_USERNAME_PROD YOUTUBE_PASSWORD_PROD Or modify the class to pass them in. The try/catch is needed because tokens can expire, so you need to a way to refresh them. Also, you need to make a dummy request to ensure the Token is valid even after you create it. Keep in mind that YouTube (well, as of 2 years ago or so) prevented you from uploading a video more of than every 10 minutes, which makes your use-case pretty difficult. That is, you cannot allow multiple videos being uploaded on a single accounts behalf, more of than every 10 min. But YouTube might have lifted this since then. Good luck
