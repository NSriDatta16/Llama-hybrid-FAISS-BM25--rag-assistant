[site]: stackoverflow
[post_id]: 5504967
[parent_id]: 
[tags]: 
Need help identifying what unit tests to write

I have the following method and am looking to write effective unit tests that also give me good coverage of the code paths: public TheResponse DoSomething(TheRequest request) { if (request == null) throw new ArgumentNullException("request"); BeginRequest(request); try { var result = Service.DoTheWork(request.Data); var response = Mapper.Map (result); return response; } catch (Exception ex) { Logger.LogError("This method failed.", ex); throw; } finally { EndRequest(); } } The Service and Logger objects used by the method are injected into the class constructor (not shown). BeginRequest and EndRequest are implemented in a base class (not shown). And Mapper is the AutoMapper class used for object-to-object mapping. My question is what are good, effective ways to write unit tests for a method such as this that also provides complete (or what makes sense) code coverage? I am a believer in the one-test-one-assertion principal and use Moq for a mocking framework in VS-Test (although I'm not hung up on that part for this discusion). While some of the tests (like making sure passing null results in an exception) are obvious, I find myself wondering whether others that come to mind make sense or not; especially when they are exercising the same code in different ways.
