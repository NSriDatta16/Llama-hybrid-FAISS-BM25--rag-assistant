[site]: stackoverflow
[post_id]: 2758909
[parent_id]: 2758850
[tags]: 
Using LINQ to build a CSV in a single statement may not be a great idea - particularly if the amount of data is signficant. Just because something is possible with LINQ does not mean it is automatically the best way to do so. Building a CSV string is, by it's nature, an operation that requires concatenating and reallocating strings. You can use String.Join() , but it won't automatically escape characters like commas or double quotes. In fact, there are a number of non-trivial rules that are part of generating well-formed CSV files. What you should really consider doing is using a proven library that generates correct CSV formatted data. If you do choose to write your own implementation, be aware that techniques that involve concatenating many strings (like the Enumerable.Aggregate() offered as an example) may result in a lot of intermediate, throw-away string instances which will drag down performance. You will probably still want to use a StringBuilder in any real-world implementation. Sometimes the clearest and simplest structure for code is still a loop.
