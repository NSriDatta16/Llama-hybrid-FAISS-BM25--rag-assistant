[site]: stackoverflow
[post_id]: 3946955
[parent_id]: 
[tags]: 
Unable to resolve overloaded class methods in template delegate

Background: I'm using a delegation technique to abstract access to arbitrary object methods, but I'm having some issues where the linker is concerned. Consider the following class, ContextNode . template class ContextNode: public ContextNodeBase { public: ContextNode(ObjectType* target, GetType (ObjectType::*getter)(void), void (ObjectType::*setter)(const SetType& ref) ): _target(target), _getter(getter), _setter(setter) { } virtual ~ContextNode(void) { } virtual void r(Datum& value) { value = (_target->*_getter)(); return; } virtual void w(const Datum& value) { (_target->*_setter)(value); return; } private: ObjectType* _target; GetType (ObjectType::*_getter)(void); void (ObjectType::*_setter)(const SetType& ref); }; The implementation of Datum is irrelevant. Also consider the trivial class Thing . class Thing { public: Thing(void); ~Thing(void); int getValue(void) { return _value; } void setValue(const int& x) { _value = x; } private: int _value; }; The problem: I can construct instantiations of ContextNode like so. Thing* thing = new Thing(); ContextNode * cn = new ContextNode (thing, &Thing::getValue, &Thing::setValue); This works well for my needs. I run into issues though, with overloaded methods. Assume I had written instead: class Thing { public: Thing(void); ~Thing(void); int value(void) { return _value; } void value(const int& x) { _value = x; } private: int _value; }; Thing* thing = new Thing(); ContextNode * cn = new ContextNode (thing, &Thing::value, &Thing::value); This fails to link. The issue, I believe, is that the linker is attempting name-based resolution only, thus I see errors. My question: is there some syntax sugar to explicitly specify to which of several overloaded methods I'm referring? I can't imagine that such a silly quirk would break such an elegant solution. I've been able to find nothing online, nor on the C++ FAQ, nor right here on SO regarding the topic. What's the fix, or am I hosed?
