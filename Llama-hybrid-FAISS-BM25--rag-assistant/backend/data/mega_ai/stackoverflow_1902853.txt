[site]: stackoverflow
[post_id]: 1902853
[parent_id]: 1899129
[tags]: 
I think you actually have three issues here. How to layout your project so that the artifacts make sense. How to best handle the sharing of these artifacts for each project. How to handle the loss in productivity while converting the development team to use the new project structure. For the first issue, try to use Maven conventions wherever possible and organize the project into multiple artifacts. If the artifacts should be nested under a parent, do so. Start off with the simplest artifact which has no dependencies and work your way through the code. I'm not sure why you believe the layout won't support the traditional Java hierarchy? It should work, especially if you use parent poms. Obviously the second issue can become quite a handful depending upon how you handle the first one. I would err on the side of creating more artifacts instead of fewer and using a repository manager like Nexus or Artifactory to manage them. At least that way, your team's builds can rely on pre-built and tested jars by hitting your repository to pull down the latest SNAPSHOT or RELEASE of the jar they are working with. For the third, make sure you're using IDEs that have Maven support. If you're stuck using something like Rational Application Developer 7.0.x or an IDE based on something less than Eclipse 3.4, then you won't be able to use the M2Eclipse plugin. Without M2Eclipse, the developers will have to jump through some manual hoops which are not ideal. Netbeans 6.7 and 6.8 have very good Maven support.
