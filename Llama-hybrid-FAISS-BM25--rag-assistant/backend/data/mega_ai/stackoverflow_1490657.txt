[site]: stackoverflow
[post_id]: 1490657
[parent_id]: 1438879
[tags]: 
Sorry, but you're doing it wrong. Your entire forum post is one code smell after another. 1. You're using Value Converters to convert a business entity to it's visual counterpart. That's a code smell in my book. 2. You're looking into sending a UI control to business logic. 3. Honest to god, someone here said "MultiBindings" (and beyond being right) my head imploded and there is now a black hole of nothingness where my brain used to be. For more on my religious convictions regarding Value Converters, Trigger, MultiBindings and other worst practices for real-world LOB development - feel free to read the following thread on WPF Disciples . However, Let's focus on getting you untangled. You need a - ViewModel . Here's what you need to put inside that ViewModel: 1. Controls don't bind to each other. It's an abomination unseen since biblical times. Whenever somthing on a control changes (ComboBox.SelectedItem, TextBox.Text, whatever) bind that directly to a ViewModel. So, instead of binding to PlaneSelector.SelectedItem and PlaneSelector.SelectedItem.VisibleElements, bind the selectedItem back to the ViewModel. 2. Convert between your business data and your correponding visual representation in the ViewModel. So, have the view model return the geometric data. Here's a rough draft of how a super simple ViewModel that does that look like: public class myFormViewModel : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged; private void InvokePropertyChanged(string propertyName) { PropertyChangedEventHandler changed = PropertyChanged; if (changed != null) changed(this, new PropertyChangedEventArgs(propertyName)); } private object _planeSelectedItem; public object PlaneSelectedItem { get { return _planeSelectedItem; } set { _planeSelectedItem = value; InvokePropertyChanged("PlaneSelectedItem"); } } public IEnumerable > VisibleElements { get { foreach(var slenderMember in PlaneSelectedItem.VisibleElements) { yield return new KeyValuePair (slenderMember.AsString, ToGeometry(slenderMember)); } } } } And here's roughly how that part of your control should look like: Obviously, there's some missing code here (Setting the this.DataContent = new myFormViewModel(), using KeyValuePairs, setting the ComboBox ItemsSource, etc). But the core here is to simplify these crazy binding shenanigans. Instead of trying to hack togather XAML to behave like code - just use code. It'll make your life much simpler.
