[site]: stackoverflow
[post_id]: 709297
[parent_id]: 
[tags]: 
What am I doing wrong with my serializing a vector with structs in it to a .dat file?

If I type in Description: Apple Quantity: 10 Wholesale Cost: 30 Retail Cost: 20 Date Added: December These are the contents in my .dat file: 1Apple103020December But when I load my program, it doesn't load the struct back in correctly resulting in there being 0 items in my list. Is that what it is suppose to look like or am I doing something seriously wrong. Code: #include "stdafx.h" #include #include #include #include using namespace System; using namespace std; #pragma hdrstop bool isValidChoice(int size, int choice); template void writeVector(ofstream &out, const vector &vec); template vector readVector(ifstream &in); template vector addItem(vector &vec); template void printItemDescriptions(vector &vec); template int displayRecord(vector &vec); struct InventoryItem { string Description; int Quantity; int wholesaleCost; int retailCost; string dateAdded; } ; int main(void) { cout structList = readVector ( in ); cout void writeVector(ofstream &out, const vector &vec) { out ::const_iterator i = vec.begin(); i != vec.end(); i++) { out >(istream &in, InventoryItem &i) { in >> i.Description; in >> i.Quantity; in >> i.wholesaleCost >> i.retailCost; in >> i.dateAdded; return in; } template vector readVector(ifstream &in) { size_t size; if (in.fail()) { in >> size; } else { size = 0; } vector vec; vec.reserve(size); for(unsigned int i = 0; i > tmp; vec.push_back(tmp); } return vec; } template vector addItem(vector &vec) { system("cls"); string word; unsigned int number; InventoryItem newItem; cout void printItemDescriptions(vector &vec) { int size = vec.size(); if (size) { cout int displayRecord(vector &vec) { string word = ""; string quit = "quit"; int choice = 1; int size = vec.size(); if (size) { printItemDescriptions(vec); cout
