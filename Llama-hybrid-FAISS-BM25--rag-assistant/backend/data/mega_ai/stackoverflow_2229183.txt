[site]: stackoverflow
[post_id]: 2229183
[parent_id]: 2228750
[tags]: 
The straightforward and oftenly not recomended way there is to use "eval". Simply doing: obj = eval('common.test.TestClass') Will give you the object as specified on the string. Other, more elegant ways, would involve querying each object on the chain for the next attribute - you can avoud eval in this way: string = 'common.test.TestClass' # this retrieves the topmost name, supposedly a module, as an object: obj = globals()[string.split(".")[0]] # And retrieve each subobject object therein: for part in string.split(".")[1:]: obj = getattr(obj, part) If part of your object path is an yet not-imported submodule, though, this won't work - You'd have to "exec" an import statement to retrieve the module - Exec being a "stronger" form of eval, wich supports statements, while eval is reserved only for expressions.
