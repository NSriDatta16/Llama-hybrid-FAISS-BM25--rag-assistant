[site]: stackoverflow
[post_id]: 5542781
[parent_id]: 3779720
[tags]: 
Here is another way of doing it that I think is more in line with the original question. No need for a complex data model, uses a simple QStringListModel instead. import sys from PyQt4 import QtCore, QtGui class test(QtGui.QWidget): def __init__(self, parent=None): QtGui.QWidget.__init__(self, parent) model = QtGui.QStringListModel() wordList = ['John Doe','Jane Doe','Albert Einstein', 'Alfred E Newman'] model.setStringList(wordList) layout = QtGui.QVBoxLayout(self) self.line = QtGui.QLineEdit(self) layout.addWidget(self.line) complete = CustomCompleter(self) complete.setModel(model) complete.setCaseSensitivity(QtCore.Qt.CaseInsensitive) complete.setCompletionMode(0) complete.setWrapAround(False) self.line.setCompleter(complete) class CustomCompleter(QtGui.QCompleter): def __init__(self, parent=None): QtGui.QCompleter.__init__(self, parent) def pathFromIndex(self, index): path = QtGui.QCompleter.pathFromIndex(self, index) lst = str(self.widget().text()).split(',') if len(lst) > 1: path = '%s, %s' % (','.join(lst[:-1]), path) return path def splitPath(self, path): path = str(path.split(',')[-1]).lstrip(' ') return [path] #=============================================================================== # Unit Testing #=============================================================================== if __name__ == '__main__': app = QtGui.QApplication(sys.argv) window = test() window.show() sys.exit(app.exec_())
