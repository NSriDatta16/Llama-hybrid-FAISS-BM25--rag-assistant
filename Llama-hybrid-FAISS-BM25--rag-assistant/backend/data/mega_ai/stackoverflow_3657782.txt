[site]: stackoverflow
[post_id]: 3657782
[parent_id]: 3657455
[tags]: 
This is just me taking more tangential look at this question but under the traditional guidelines for OO design a user is a person therefore you get inheritance. However, when we look at SOLID principles and especially the "Liskov Substitution Principle": "Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it." â€” Robert Martin, LSP paper linked from The Principles of OOD What does that mean? Well, we should be able to substitute an instance of a subclass for its parent class and everything should continue to work. In this case it won't work, there are extra properties that you are depending on for User that a Person does not have. In this case have you considered doing composition rather than inheritance? public class Person { public static void InputPerson(Person p) { // Do the input logic here } } public class User { public Person Person { get; private set; } public static void InputUser(User u) { if (u.Person == null) u.Person = new Person; Person.InputPerson(u.Person); Console.WriteLine("Telephone:"); u.Telephone = Console.ReadLine(); } } We could go further into SOLID and take a look at the Single Responsibility Principle and ask is the Person/User object handles the logic of being a person but should it know about creating that object from the console? What happens if you want to re-use the same logic for a windows application or a WPF application?
