[site]: stackoverflow
[post_id]: 1768605
[parent_id]: 1768485
[tags]: 
Not exactly sure what you want to achieve, but assuming you want to generate link simlar to this: MyForm/MyMethod.aspx based on WebForm (or any other class) like this: public class MyForm { public void MyMethod() { // Something here } public void MethodWithParams(int i, string str) { // Something here } } You can use this builder (test included): class UrlBuilder2 { private readonly Expression > callExpression; public UrlBuilder2(Expression > callExpression) { this.callExpression = callExpression; } public override string ToString() { MethodCallExpression call = (MethodCallExpression) callExpression.Body; StringBuilder sb = new StringBuilder(); sb.AppendFormat("{0}/{1}.aspx", call.Object.Type.Name, call.Method.Name); var delimiter = "?"; var formalParams = call.Method.GetParameters(); for (int i = 0; i (c => c.MyMethod()).ToString(); str.Should().Be.EqualTo("MyForm/MyMethod.aspx"); } [Test] public void CanBuildUrlByMethodWithParams() { var str = new UrlBuilder2 (c => c.MethodWithParams(2, "hello")).ToString(); str.Should().Be.EqualTo("MyForm/MyMethod.aspx?i=2&str=hello"); } All this will allow you to keep the links type-safe and refactoring advantages will be leveraged. You will probably need to enhance the UrlBuilder2 but this should get you started. If you just want to use name of a method to generate links you can do something like this: class MyClass { public void MyMethod() {} } class UrlBuilder3 { Expression > info; public UrlBuilder3(Expression > info) { this.info = info; } public override string ToString() { UnaryExpression exp = (UnaryExpression)info.Body; MethodCallExpression createDelegate = (MethodCallExpression)exp.Operand; // 0-Action,1-x,2-Delegate as Constant ConstantExpression methodArgument = (ConstantExpression)createDelegate.Arguments[2]; MethodInfo method = (MethodInfo)methodArgument.Value; return string.Format("{0}/{1}.aspx", typeof(T).Name, method.Name); } } [Test] public void UrlByDelegate() { new UrlBuilder3 (x => x.MyMethod).ToString() .Should().Be.EqualTo("MyClass/MyMethod.aspx"); } The tricky thing is correctly resolving the Expression tree. The code above works for this particular sample, but you will need to check it works for all your cases.
