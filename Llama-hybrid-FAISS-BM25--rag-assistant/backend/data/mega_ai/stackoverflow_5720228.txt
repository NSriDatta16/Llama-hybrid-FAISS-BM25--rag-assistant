[site]: stackoverflow
[post_id]: 5720228
[parent_id]: 5720037
[tags]: 
Boost.Function is more general and powerful than raw function pointers: they can store anything that is callable with a particular signature. However, there is a cost in storage and run-time associated with that flexibility. The Miscellaneous Notes section of the Boost.Function documentation talks a bit more about this, but to summarize: A Boost.Function object stores a member function pointer and two data pointers internally. It may require a heap allocation if storing a functor that is larger than a certain size. Calling a Boost.Function object results in either one or two calls through a function pointer, depending on what exactly was stored. Having said all that, I've used Boost.Function extensively and never had a situation where its storage or run-time costs actually showed up when profiling, so whether any of this is important or not will depend on your actual usage.
