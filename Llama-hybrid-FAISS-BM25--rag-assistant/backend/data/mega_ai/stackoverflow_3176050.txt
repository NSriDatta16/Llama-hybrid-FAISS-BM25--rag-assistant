[site]: stackoverflow
[post_id]: 3176050
[parent_id]: 3175189
[tags]: 
I guess although you could implement that using only one thread, it would be certainly cumbersome because all request will be processed sequentially, and when network is involved which has quite a large latency and prone to things like timeout, your app. can easily become very unresponsive. Let's say somebody gets disconnected from the internet. If you had only one thread, your entire app will hold up until the timeout is reached and you discover something is wrong with this client! Even if somebody decides to be quiet for a while, you'll have trouble (it's probably easily work-aroundable, but still extra complexity). So although not central, use of multiple thread is very much recommendable. However, use of ThreadGroup is discouraged by the concurrency expert group so you should probably not use it. I'm not clear what your current app's design is. If you could tell us a little bit more, we might be able to help you more. One simple approach will be using a combination of HTTP server and client. So each client is also a server, and passes its callback address (for its server) to the central server upon connection. Subsequently, client will push new messages to the central server through HTTP POST, and the central server will push these messages to clients through HTTP POST. If you'd chose such design, threading is unavoidable.. The thread which will make the HTTP POST request can be single threaded (per JVM), but the thread that will receive the HTTP request can not be the same thread (it is not impossible, but I don't think it's feasible). So the easiest thing would be to embed tokens to identify the group, and use this like this (just meant for VERY basic illustration!!!): class Chat { private final ConcurrentMap > rooms; { rooms = new ConcurrentHashMap >(); } public void connect(String roomKey, URI callbackAddr){ Set users = rooms.get(roomKey); if(users==null){ rooms.putIfAbsent(roomKey,new ConcurrentSkipListSet ()); } users = rooms.get(roomKey); users.add(callbackAddr); } public void say(String roomKey, String message){ if(rooms.get(roomKey)==null){ throw new RuntimeException("Room " + roomKey + " does not exist."); } for(URI dest : rooms.get(roomKey)){ HTTPPoster.postMessage(dest, roomKey, message); } } } You'll have a similar piece on your client.
