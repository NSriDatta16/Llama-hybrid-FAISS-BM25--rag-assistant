[site]: stackoverflow
[post_id]: 3588030
[parent_id]: 3585164
[tags]: 
For what it's worth, given your sample class, you could have just made use of the ArrayObject (which implements IteratorAggregate and ArrayAccess like we want). class Foo extends ArrayObject { public function __construct() { parent::__construct(array('foo' => 'bar', 'baz' => 'quux')); } } $objFoo = new Foo(); foreach ( $objFoo as $key => $value ) { echo "$key => $value\n"; } echo PHP_EOL; $objFoo['foo'] = 'badger'; $objFoo['baz'] = 'badger'; $objFoo['bar'] = 'badger'; foreach ( $objFoo as $key => $value ) { echo "$key => $value\n"; } With the output being, as expected: foo => bar baz => quux foo => badger baz => badger bar => badger
