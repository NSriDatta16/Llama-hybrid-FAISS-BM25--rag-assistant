[site]: stackoverflow
[post_id]: 2602201
[parent_id]: 1960696
[tags]: 
(I've been using this technique for quite a while - hence the vb.net code!) Although compression is not supported by IIS 6.0, most browsers support basic gzip compression and they notify the server of this ability by sending a header in each request. The following piece of code shows how to use the System.IO.Compression namespace to add a filter to the output stream that compresses the output whilst checking and setting the correct headers. context.Response.Clear() context.Response.Buffer = True context.Response.AddHeader("content-disposition", String.Format( "attachment;filename={0}", fileName)) context.Response.ContentEncoding = Encoding.UTF8 context.Response.Cache.SetCacheability(HttpCacheability.Private) 'Compress the output as it may be very large 'When flushing or closing+ending the stream, the compression filter does not have a chance to write the compression footer 'Therefore, make sure the compression filter stream is closed before flushing AddCompression(context) context.Response.ContentType = "application/vnd.ms-excel" 'This example was an excel doc 'Write to response context.Response.Write(your-data-here) 'context.Response.Flush() 'Do not flush if using compression 'context.Response.Close() context.Response.End() The AddCompression method checks the appropriate headers and adds a compression filter stream to the output: 'Add compression to the response stream Public Sub AddCompression(ByVal context As HttpContext) Dim acceptEncoding As String = context.Request.Headers("Accept-Encoding") If acceptEncoding Is Nothing OrElse acceptEncoding.Length = 0 Then Return 'Convert to lower to check acceptEncoding = acceptEncoding.ToLower 'Gzip or Compress compression 'Compress compression is quicker and performs better compression so try that first If (acceptEncoding.Contains("deflate")) Then context.Response.Filter = New DeflateStream(context.Response.Filter, CompressionMode.Compress) context.Response.AppendHeader("Content-Encoding", "deflate") ElseIf acceptEncoding.Contains("gzip") Then context.Response.Filter = New GZipStream(context.Response.Filter, CompressionMode.Compress) context.Response.AppendHeader("Content-Encoding", "gzip") End If End Sub
