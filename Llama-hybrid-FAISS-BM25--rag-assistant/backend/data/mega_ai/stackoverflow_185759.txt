[site]: stackoverflow
[post_id]: 185759
[parent_id]: 170799
[tags]: 
WCSF might be a good choice, but probably for reasons that have nothing to do with the possible feature needs you've listed. The best things in my opinion that WCSF has going for it is that it's built on the Model-View-Presenter-[Controller] pattern which gives you the separation of concerns between the view and presenter (just like MVC)... BUT at the same time it's not a total paradigm shift from the "Page Control" model that many .net'ers are used to. This means you can still use a lot of third party controls like Telerik or Infragistics pretty much like you did before (much more challenging with MVC). Because the MVP pattern uses a dependency injection container (ObjectBuilder) and inversion of control you get a pretty nice way to write unit tests without a web context (easy to mock objects). Also the container supports service location, so you can easily write WCSF services that will be shared (and WCF and or the WSSF fit in nicely here). It's highly modularized from a programatic standpoint and has many extensibility points. All that being said... it kind of sounds like you're looking for more of a templating, personalization, dynamic framework. You might check out WSS/SharePoint in this case, because it may get you further down the field out of the box.
