[site]: stackoverflow
[post_id]: 1285181
[parent_id]: 1285146
[tags]: 
First of all, the addUser() method is awful, allows sql injections because it doesn't use prepared statements nor escapes the contents. It should read something like function addUser($user) { $insQuery = 'INSERT INTO users(name,password)'; $insQuery.= " VALUES ('".mysql_real_escape_string($user->name)."',"; $insQuery.= " '".mysql_real_escape_string($user->password)."')"; @mysql_query($insQuery) or showError("user insert failed"); } This is awful because it teaches you bad practices, your teacher should teach you about SQL injections from day one, and not simplify them just for academic sake. That aside, the idea is to future proof the code, using abstractions. Abstractions allow you to think in a higher level. At this current level the User class might seem overkill, because it acts only as a storage facility, but it helps you think in term of domain instances instead of SQL sentences which then will help you make modifications shall such a need arise. These abstractions also create a single place to complexify the code without having the changes spread all over, for example if you'd then need something else about a user you need only change the User class, for example by adding a, say, printUser() method or whatever. function printUser() { return "Mr. ".$this->name; } But this being an easy and artificial academic example, it might not make much sense. You'd need a bigger scenario to really see the benefit of abstractions. About your edits: I'm glad that you are told about SQL injections, even if not in the right place :) The proper place to do the escaping for SQL injection is not in a previous 'formchecking' step, but to do it when sending the data to the SQL server. That 'formchecking' is the proper place to validate as you say, length of zipcodes, or empty fields and so on, but not to escape the strings to be SQL safe. A simple example should show why: $name = formcheck("John O'Donnell"); //Where you do all your checking step, //including mysql_real_escape_string $user = new User($name,"gandalf"); But, mysql_real_escape_string("John O'Donnell") = "John O\'Donnell"; Now you use your User instance to display the name on the screen: echo "Welcome ".$user->printUser(); and you get: Welcome Mr. John O\'Donell
