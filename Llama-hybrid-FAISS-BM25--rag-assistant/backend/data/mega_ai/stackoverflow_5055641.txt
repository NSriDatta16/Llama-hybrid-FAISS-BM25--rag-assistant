[site]: stackoverflow
[post_id]: 5055641
[parent_id]: 5054689
[tags]: 
I think RIA Services encourages great patterns (save maybe for DomainDataSource, which many will use to put data access logic in the view, but I know the RIA Services folks have been looking at ways to make DDS be more MVVM-friendly). Here's some specific points I like about it from an architecture perspective: Validation logic can be stated once, but applied both client-side (nice UX) and server-side (security and consistency for non-SL clients of the service). Queries are executed cross-tier, so you can think about what you want/need on the client, formulate a query, and know that it will be translated all the way to your database without over-fetching. You can do all this without having to think about optimizing SQL queries and such, but get a lot of difficult-to-achieve benefits. By making everything bindable, it becomes much easier to use MVVM to keep your views simple and stupid. Data binding is your friend, and RIA Services makes it not so annoying/tedious to implement INotifyPropertyChanged over and over, plus it adds lots of other great harder-to-implement interfaces like INotifyDataErrorInfo (I think), and IEditableObject and so forth, which many Silverlight controls respect out of the box to "do the right thing". I guess I don't follow what you mean by the service doubling as a DAL - the DAL is your model from LINQ-To-SQL or LINQ-To-Entities (or whatever DAL you like, NHibernate, etc..). The RIA Service is more of a business logic layer that sits atop the DAL, and exposes the data in a way that keeps the business logic consistent across consumers. In the case of Silverlight, it also adds the client-side codegen to do client-side validation and such, but that's just a value-add for Silverlight. There can be tight coupling between the business entities and the UI, but this can be done with any technology. Exposing the right data, then building a UI on top of it, is something you have to think about regardless of technology.
