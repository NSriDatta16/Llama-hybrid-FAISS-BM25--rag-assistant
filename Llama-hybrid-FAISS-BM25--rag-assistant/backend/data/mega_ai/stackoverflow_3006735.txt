[site]: stackoverflow
[post_id]: 3006735
[parent_id]: 3006617
[tags]: 
Instead of using the container explicitly, use it implicitly by leveraging constructor / property injection instead. Create a core class (or set of core classes) that depend on all the major pieces of your application. Most containers will let you put ISomething[] in your constructor and it will inject all instances of ISomething into your class. This way, when you bootstrap your application: Instantiate your container Register all your goodies Resolve the core classes (this will pull in all the other dependencies you need) Run the "main" part of the application Now, depending on the type of application you are writing, there are different strategies for avoiding marking the IoC container as "static". For ASP.NET web applications, you'll probably end up storing the container in the Application State. For ASP.NET MVC applications, you need to change out the Controller Factory. For desktop applications, things get more complicated. Caliburn uses an interesting solution to this problem using the IResult construct (this is for WPF applications but could be adapted for Windows Forms as well.
