[site]: stackoverflow
[post_id]: 5372125
[parent_id]: 5371926
[tags]: 
Insertion sort maintains the invariant that elements to the left of the current pointer are sorted. Progress is made by moving the element at the pointer to the left into its correct place and advancing the pointer. Your algorithm does this, but sometimes it also does an additional step of moving the element at the pointer to the right without advancing the pointer. This makes the algorithm as a whole not an insertion sort, though you could call it a modified insertion sort due to the resemblance. This algorithm runs in O( n Â²) on average like insertion sort (also like bubble sort). The best case for an insertion sort is O( n ) on an already sorted list, for this algorithm it is O( n ) but for a reverse-sorted list since you find the correct position for every element in a single comparison (but only if you leave the first, largest, element in place at the beginning when you can't find a good position for it).
