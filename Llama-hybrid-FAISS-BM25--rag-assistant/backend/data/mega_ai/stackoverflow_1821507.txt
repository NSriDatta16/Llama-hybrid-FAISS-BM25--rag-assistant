[site]: stackoverflow
[post_id]: 1821507
[parent_id]: 1820770
[tags]: 
Matti, you're asking multiple questions that point to the best structure for your application. I would summarize your questions as: How do I pre-load data needed by my service prior to handling any legitimate requests? How do I ensure the pre-loaded data is loaded "once"? How do I refresh the pre-loaded data on a schedule, i.e. every 24 hours? Understanding the Asp.Net pipeline and event structure will help you understand the answers to these questions. First, the Asp.Net pipeline provides a one-time execution region in Application_Start. This is fired once per application cycle. This would also fire in 'iisreset', which cycles every application for a given server. However, application cycles themselves will recycle on their own, based on their configuration. All of which are controlled through IIS settings. Second, Asp.Net is a request system; it won't fire refresh events for you, nor can you use it by itself as a scheduler. You need an outside agent to act on that for you. Here's what you could do: Add your pre-loaded data routine to Application_Start. Configure your web site's Application cycle settings for every 24 hours. This would ensure your data is loaded once, via Application_Start. It would ensure your data is loaded prior to your site serving any requests. Last, it would ensure your data is refreshed every 24 hours. Here's what I would do: Add pre-loaded data routine to Application_Start. Modify pre-loaded data routine to use Asp.Net Cache, instead of static usage. Modify lookup data to retrieve data from cache, and re-load if data is not found. Provide capability for diagnostic/monitoring system, i.e. nagios, to refresh data asynchronously via web method call, i.e. "preload_refresh()". This would provide essentially the same forward effect as the above solution, but with better reliability for your service. As always, your mileage may vary. Hope this helps.
