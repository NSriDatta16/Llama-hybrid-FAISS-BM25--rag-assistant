[site]: stackoverflow
[post_id]: 1371845
[parent_id]: 1371755
[tags]: 
It all depends on how much coverage you need / want and how much dependability is an issue. Here are the questions you should ask yourself: Does this unit test help implement a feature / code change that I don't already have? Will this unit test help regression test/debug this unit if I make changes later? Is the code to satisfy this unit test non-trivial or does it deserve a unit test? Regarding the 3rd one, I remember when I started writing unit tests (I know, not the same thing as TDD) I would have tests that would go like: string expected, actual; TypeUnderTest target = new TypeUnderTest(); target.PropertyToTest = expected; actual = target.PropertyToTest; Assert.AreEqual (expected, actual); I could have done something more productive with my time like choose a better wallpaper for my desktop. I recommend this article by ASP.net MVC book author Sanderson: http://blog.codeville.net/2009/08/24/writing-great-unit-tests-best-and-worst-practises/
