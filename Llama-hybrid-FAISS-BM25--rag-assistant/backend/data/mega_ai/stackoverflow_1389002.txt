[site]: stackoverflow
[post_id]: 1389002
[parent_id]: 1388474
[tags]: 
Please allow me to put two (hopefully helpful) comments first: I had some difficulties understanding your code, because some of the method names misled me. From looking at the names, I expected something else. May I suggest some refactoring: makePathList -> createPathList // you actually create a List here append -> createPathList // yes, same name as above because it creates the same // type of list, just with different parameters ( removed part of the answer that became obsolete after Robert's edit ) As Margus said, replacing the String concatenation with a StringBuilder append chain doesn't increase your performance. Compilers may optimize String concatenations to StringBuilder appends anyway (I've seen such byte code). You could try to convert the DAG into a tree structure. Introduce an invisible root with all nodes as direct children. Now for each node add it's successors (child and/or sibling). The number of leaves now should be equal to the number of path and every graph from the root to any leaf is one path in the DAG. Edit A small improvement - it's micro-optimization but at least it will leave less garbage: private List append(String node, List allPathsStartingAfterNode) { List allPathsStartingAtNode = new ArrayList (); String nodeWithSeparator = node + "/"; for (String aPathStartingAfterNode : allPathsStartingAfterNode) { allPathsStartingAtNode.add(nodeWithSeparator + aPathStartingAfterNode); } return allPathsStartingAtNode; }
