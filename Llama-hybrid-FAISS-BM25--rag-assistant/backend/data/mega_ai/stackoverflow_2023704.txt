[site]: stackoverflow
[post_id]: 2023704
[parent_id]: 2023596
[tags]: 
Servlets are meant to control, preprocess and/or postprocess requests, not to present the data. There the JSP is for as being a view technology providing a template to write HTML/CSS/JS in. You can control the page flow with help of taglibs like JSTL and access any scoped attributes using EL . First create a SearchServlet and map it on an url-pattern of /search and implement doGet() and doPost() as follows: protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // Preprocess request here and finally send request to JSP for display. request.getRequestDispatcher("/WEB-INF/search.jsp").forward(request, response); } protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // Postprocess request here. Get results from your DAO and store in request scope. String search = request.getParameter("search"); List results = searchDAO.find(search); request.setAttribute("results", results); request.getRequestDispatcher("/WEB-INF/search.jsp").forward(request, response); } Here's how the JSP /WEB-INF/search.jsp would look like, it makes use of JSTL (just drop JAR in /WEB-INF/lib ) to control the page flow. ... There are ${fn:length(results)} results. ${result.id} ${result.name} ${result.value} Note that JSP is placed in /WEB-INF to prevent users from direct access by URL. They are forced to use the servlet for that by http://example.com/contextname/search . To learn more about JSP/Servlets, I can recommend Marty Hall's Coreservlets.com tutorials . To learn more about the logic behind searchDAO , I can recommend this basic DAO tutorial . To go a step further, you could always consider to make use of a MVC framework which is built on top of the Servlet API, such as Sun JSF , Apache Struts , Spring MVC , etcetera so that you basically end up with only Javabeans and JSP/XHTML files. The average MVC frameworks will take care about gathering request parameters, valitate/convert them, update Javabeans with those values, invoke some Javabean action method to process them, etcetera. This makes the servlet "superfluous" (which is however still used as being the core processor of the framework).
