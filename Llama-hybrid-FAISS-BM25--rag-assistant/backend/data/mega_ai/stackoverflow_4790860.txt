[site]: stackoverflow
[post_id]: 4790860
[parent_id]: 4788897
[tags]: 
I think the problem may be in the way you've organized your models. I would also avoid the use of a model name ending in _set as that could get very confusing. What about this instead: from django.db import models from django.contrib.contenttypes.models import ContentType from django.contrib.contenttypes import generic from questionnaire.models import Questionnaire #project.models class Project(models.Model): name = models.CharField(max_length..... category = models.CharField(max_length questionnaires = generic.GenericRelation(Questionnaire) #questionnaire.models from django.db import models from django.contrib.contenttypes.models import ContentType from django.contrib.contenttypes import generic class Question(models.Model): question = models.CharField(max_length.... question_type = models.IntegerField(choices=..... class Questionnaire(models.Model): name = models.CharField(...) questions = models.ManyToManyField(Question) content_type = models.ForeignKey(ContentType) object_id = models.PositiveIntegerField() content_object = generic.GenericForeignKey() Once you have clearly defined the questionnaire as its own complete model, creating a URL becomes more straightforward: #questionnaire.urls #pattern for question_set_create url(r'^(?P [-\w]+)/(?P [-\w]+)/add_set/$', 'questionnaire_create' , name="questionnaire_create"), Where content_type is the name of the content type (say, 'projects.project' or something similar) and object_id is the primary key of the matching record. So the equivalent URL for creating a questionnaire for project id #1 would be /questionnaires/projects.project/1/add_set/
