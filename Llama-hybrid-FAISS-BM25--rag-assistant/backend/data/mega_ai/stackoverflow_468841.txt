[site]: stackoverflow
[post_id]: 468841
[parent_id]: 468779
[tags]: 
Regarding your 'more info': How many times must it check the modification-date of that specific file ? Only once (during startup for instance), or should it check the modification-date of that file multiple times during application execution ? If it has to be done only once, then it is useless to use a timer. If it has to be done multiple times, then yes, you could use a timer. The eventhandler of the Elapsed event could then check the ModificationDate of the file, and see if action needs to be taken. Another solution, which is probably more elegant, is using a FileSystemWatcher. This FileSystemWatcher could 'watch' that particalur file. Specify a Filter on the FileSystemWatcher so that, every time the particular File is changed, an event is raised. In the eventhandler of the FileSystemWatcher, you can then take the necessary action: FileSystemWatcher dataFileWatcher = new FileSystemWatcher(); dataFileWatcher.Path = "path to your file"; dataFileWatcher.Filter = "yourfilename"; dataFileWatcher.Changed += new FileSystemEventHandler(OnFileChanged); dataFileWatcher.NotifyFilter = NotifyFilters.LastWrite; dataFileWatcher.EnableRaisingEvents = true; private void OnFileChanged( object sender, FileSystemEventArgs e ) { // take action. } Note however, that there's a sublte bug / feature in the FileSystemWatcher which causes that the Changed event gets raised multiple times for one change to the File you're watching. You can resolve this like this
