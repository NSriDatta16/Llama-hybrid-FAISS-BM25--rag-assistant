[site]: stackoverflow
[post_id]: 4286968
[parent_id]: 4286933
[tags]: 
It sounds like you're asking whether you should continue to use ADO.NET containers or custom domain classes for your data. If you feel you need the strong typing of a class, and some validation of input, or other logic applied to your data before display, then consider writing a method to convert a DataTable into a collection of YourClass. Otherwise, if this is for display, then there's nothing wrong with sticking with the DataTable. If you're providing an interface for other components, or need the features that a class would give you, go for the strong typing of a class. public IEnumerable ConvertToTeachers(DataTable dt) { foreach (var row in dt.Rows.AsEnumerable()) { //create a teacher from this row. modify row indexers as required. yield return new Teacher{ TeacherName = row["Name"].Value, Location = row["Location"].Value }; } } On the presentation tier, consider leveraging the server controls that ASP.NET webforms provides you. They provide data-binding capabilities that remove all that looping. Ensure your gridview is designed as you like. Proper columns containing the data you want: regular bound fields and hyperlinks. bind your data to the grid. gridViewTeachers.DataSource = myDataSet.Tables(0).Rows gridViewTeachers.DataBind
