[site]: stackoverflow
[post_id]: 1328571
[parent_id]: 1328411
[tags]: 
Assigning @_ to a list can bring some helpul addtional features. It makes it slightly easier to add additional named parameters at a later date, as you modify your code Some people consider this a feature, similar to how finishing a list or a hash with a trailing ',' makes it slightly easier to append members in the future. If you're in the habit of using this idiom, then shifting the arguments might seem harmful, because if you edit the code to add an extra argument, you could end up with a subtle bug, if you don't pay attention. e.g. sub do_something { my ($foo) = @_; } later edited to sub do_something { my ($foo,$bar) = @_; # still works } however sub do_another_thing { my $foo = shift; } If another colleague, who uses the first form dogmatically (perhaps they think shift is evil) edits your file and absent-mindedly updates this to read sub do_another_thing { my ($foo, $bar) = shift; # still 'works', but $bar not defined } and they may have introduced a subtle bug. Assigning to @_ can be more compact and efficient with vertical space, when you have a small number of parameters to assign at once. It also allows for you to supply default arguments if you're using the hash style of named function parameters e.g. my (%arguments) = (user=>'defaultuser',password=>'password',@_); I would still consider it a question of style / taste. I think the most important thing is to apply one style or the other with consistency, obeying the principle of least surprise.
