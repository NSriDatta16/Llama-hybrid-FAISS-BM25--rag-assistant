[site]: stackoverflow
[post_id]: 4521983
[parent_id]: 
[tags]: 
Java: ExecutorService that blocks on submission after a certain queue size

I am trying to code a solution in which a single thread produces I/O-intensive tasks that can be performed in parallel. Each task have significant in-memory data. So I want to be able limit the number of tasks that are pending at a moment. If I create ThreadPoolExecutor like this: ThreadPoolExecutor executor = new ThreadPoolExecutor(numWorkerThreads, numWorkerThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue (maxQueue)); Then the executor.submit(callable) throws RejectedExecutionException when the queue fills up and all the threads are already busy. What can I do to make executor.submit(callable) block when the queue is full and all threads are busy? EDIT : I tried this : executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy()); And it somewhat achieves the effect that I want achieved but in an inelegant way (basically rejected threads are run in the calling thread, so this blocks the calling thread from submitting more). EDIT: (5 years after asking the question) To anyone reading this question and its answers, please don't take the accepted answer as one correct solution. Please read through all answers and comments.
