[site]: stackoverflow
[post_id]: 2958432
[parent_id]: 2958257
[tags]: 
The boolean or operator || binds tighter than the assignment operator, and puts the function call into a scalar context . my @array = read_file( $file ) || die "Cannot read $file\n"; That says: try to read the file, and return either the concatenation of the file or the "return" from die as the first element in @array . You don't die because it read the file and returned a true value, albeit a scalar one. The standard usage is the statement or operator ( or ), like so: my @array = read_file( $file ) or die "Cannot read $file\n"; This tries to assign @array in a list context, and then evaluates the assigned list in a scalar context, yielding the number of items in array. Thus, you assign the array first, and then you do not die because the array has entries. The second form does not try to assign the "return" from die to @array because the assignment is done first, so @array either holds the lines of the file or is an empty array. Notice that the documentation for File::Slurp read_file says: In list context it will return a list of lines (using the current value of $/ as the separator including support for paragraph mode when it is set to ''). In scalar context it returns the entire file as a single scalar. [ italics mine ] And gives the following examples: my $text = read_file( 'filename' ) ; my @lines = read_file( 'filename' ) ; But these are the simplest cases, and the most basic expressions of context. Assigning to a variable of a certain type does not ensure that @lines would be assigned to in a list context regardless of surrounding code.
