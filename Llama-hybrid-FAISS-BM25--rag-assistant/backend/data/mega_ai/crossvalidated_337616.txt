[site]: crossvalidated
[post_id]: 337616
[parent_id]: 337536
[tags]: 
You have 30k $(x_i,y_i)$ inputs and 30k $(r_i,g_i,b_i)$ targets. $i$ goes from 1 to 30k. Consider the following network. For each $((x,y), (r,g,b))$ pair you have 3 "linear neurons", each with 2 weights: $r = \omega_{r,x} x + \omega_{r,y} y$ $g = \omega_{g,x} x + \omega_{g,y} y$ $b = \omega_{b,x} x + \omega_{b,y} y$ The complete set of neurons: $r_i = \omega_{i,r,x} x + \omega_{i,r,y} y$ $g_i = \omega_{i,g,x} x + \omega_{i,g,y} y$ $b_i = \omega_{i,b,x} x + \omega_{i,b,y} y$ That's a total of 30k * 2 * 3 = 180k weights $\omega$. This will fit exactly. EDIT: Each of those three systems has 3 equatins and 6 parameters, so they're underdetermined. An alternative which is exactly determined would be: $r_i = \omega_{i,r} x + y$ $g_i = \omega_{i,g} x + y$ $b_i = \omega_{i,b} x + y$ This "neural network" now has $90k$ weights.
