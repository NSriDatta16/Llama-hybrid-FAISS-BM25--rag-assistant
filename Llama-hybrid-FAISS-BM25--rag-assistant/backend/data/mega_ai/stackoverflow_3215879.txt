[site]: stackoverflow
[post_id]: 3215879
[parent_id]: 2458440
[tags]: 
The link you have in your question provides most of what you need. However, there are a few things that need to be done in addition to that. Any class files that Jetty needs to start up will need to be located at the root of the war file when it's packaged. We can leverage Ant to do that for us before we the file. The war's manifest file will also need a Main-Class attribute to execute the server. Here's a step-by-step: Create your Jetty server class: This is adapted from the link you provided. package com.mycompany.myapp; import java.io.File; import java.net.URL; import java.security.ProtectionDomain; import org.mortbay.jetty.Server; import org.mortbay.jetty.webapp.WebAppContext; public final class EmbeddedJettyServer { public static void main(String[] args) throws Exception { int port = Integer.parseInt(System.getProperty("port", "8080")); Server server = new Server(port); ProtectionDomain domain = EmbeddedJettyServer.class.getProtectionDomain(); URL location = domain.getCodeSource().getLocation(); WebAppContext webapp = new WebAppContext(); webapp.setContextPath("/"); webapp.setDescriptor(location.toExternalForm() + "/WEB-INF/web.xml"); webapp.setServer(server); webapp.setWar(location.toExternalForm()); // (Optional) Set the directory the war will extract to. // If not set, java.io.tmpdir will be used, which can cause problems // if the temp directory gets cleaned periodically. // Your build scripts should remove this directory between deployments webapp.setTempDirectory(new File("/path/to/webapp-directory")); server.setHandler(webapp); server.start(); server.join(); } } To see what all you can configure here, have a look at the Jetty API documentation . Build the war with Ant: This uses a staging directory to unpack the necessary class files into the root of the war so they're accessible when the war is executed. Creates self-executing war"> Execute the war: If everything's set up properly above, you should be able to: java -jar myapp.war // or if you want to configure the port (since we are using the System property in the code) java -Dport=8443 -jar myapp.war
