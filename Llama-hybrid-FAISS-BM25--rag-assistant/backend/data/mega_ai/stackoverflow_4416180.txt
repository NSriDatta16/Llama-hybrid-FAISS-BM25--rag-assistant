[site]: stackoverflow
[post_id]: 4416180
[parent_id]: 4416135
[tags]: 
It's best to include every header with definitions that you are using directly. Relying on one of the other headers to include stuff makes your code more fragile as it becomes dependent on the implementation of classes that are external to it. EDIT: A short example: Class B uses class A, e.g. a hash table implementation B that uses a hashing mechanism A You create a class C that needs a hash table (i.e. B) and a hash algorithm (i.e. A) for some other purpose. You include B.h and leave out A.h since B.h includes it anyway. Mary, one of your co-workers, discovers a paper about this new fabulous hashing algorithm that reduces the probability of collisions, while it needs 10% less space and is twice as fast. She (rightly) rewrites class B to use class D, which implements that algorithm. Since class A is no longer needed in B, she also removes all references to it from B.h. Your code breaks. EDIT 2: There are some programmers (and I've occasionally been guilty of this too, when in a hurry) who deal with this issue by having an "include-all" header file in their project. This should be avoided, since it causes namespace pollution of unparalleled proportions. And yes, windows.h in MSVC is one of those cases in my opinion.
