[site]: stackoverflow
[post_id]: 1411005
[parent_id]: 1410563
[tags]: 
From the C++ standard section 3.1: A declaration introduces names into a translation unit or redeclares names introduced by previous declarations. A declaration specifies the interpretation and attributes of these names. The next paragraph states (emphasis mine) that a declaration is a definition unless... ... it declares a function without specifying the functionâ€™s body: void sqrt(double); // declares sqrt ... it declares a static member within a class definition: struct X { int a; // defines a static int b; // declares b }; ... it declares a class name: class Y; ... it contains the extern keyword without an initializer or function body: extern const int i = 0; // defines i extern int j; // declares j extern "C" { void foo(); // declares foo } ... or is a typedef or using statement. typedef long LONG_32; // declares LONG_32 using namespace std; // declares std Now for the big reason why it's important to understand the difference between a declaration and definition: the One Definition Rule . From section 3.2.1 of the C++ standard: No translation unit shall contain more than one definition of any variable, function, class type, enumeration type, or template.
