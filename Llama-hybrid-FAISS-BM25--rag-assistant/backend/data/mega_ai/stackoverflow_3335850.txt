[site]: stackoverflow
[post_id]: 3335850
[parent_id]: 3335626
[tags]: 
We are at exactly the same point, having used DAAB from 2.0 to 4.1. FWIW this is our thinking (we really are Pro ORM): There is a trade off between: productivity improvements that an ORM with code generation capabilities gives (notably by not having to hand code SProcs and Entities) improved flexibility that LINQ gives w.r.t. Eager and Lazy Loading, fetching just the required columns (narrowness of query allows for better hits on NC and Covering indexes etc) as far as we can tell, LINQ uses parameterized queries and thus performance w.r.t. plan cache and is not susceptible to SQL Injection attacks http://msdn.microsoft.com/en-us/library/bb386929.aspx However, on the down side Loss of control over Entities - they are not necessarily POCO (for LINQ2SQL) and although EF4 allows for your own POCOs, and lazy loading is still achievable with proxies. Lack of control / determinism in the queries that could be executed against the DB, meaning that coverage testing against the DB is a potential issue (whereas it is relatively simple to identify the indexing strategy for a SPROC) Unless you are careful, updating of entity graphs can have unintended "depth" consequence. LINQ2SQL could really do with an "SavesWith" analogy to the eager loading "LoadsWith" In summary, we are happy with an ORM for about 80% of our tables / entities, but would then look at custom work for the really sensitive, performance specific stuff. HTH
