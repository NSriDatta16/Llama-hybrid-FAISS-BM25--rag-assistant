[site]: stackoverflow
[post_id]: 1265744
[parent_id]: 1265631
[tags]: 
ASP.NET pages and modules can run within SharePoint however you can't just drop a web application into SharePoint. After learning the SharePoint system you may find most code can be integrated, but it will never be seamless. The only people who would believe that are the ones who are relying on white papers. The SharePoint site collection is the "owner" of the web application and you need to deploy ASPX pages and dlls into an existing web application. SharePoint owns and defines the web.config so you have to add to that. Code compiled into a DLL has to be deployed to SharePoint either to the GAC and then registered in the web.config with a 4 part-name, or to the bin folder of the web application in which case code access security directives need to be added to web.config. The most direct way to deploy ASPX pages is to drop them into the _layouts folder (better yet a subfolder). Code-behinds for pages can be added to the folder as well and they will resolve as in regular ASP.NET. The same model works for ASCX controls, although the guideline is to put them in _controltemplates. SharePoint integrates best with Windows Authentication. If your application uses its own security mechanism for authentication or authorization then there's going to be work to do. Deploying code beyond an intranet will require an understanding of alternate access mappings and possibly a proxy like ISA Server for authentication and SharePoint functionality to work. If you want to be able to export your code as web parts or make use of features such as letting folks add web parts or audience targeting to your pages then there are many more concepts to learn and new APIs to grasp. Having worked with SharePoint 2007 for 2 years I have found most ASP.NET features are usable but the development is more difficult (need to develop on Windows Server and design view, code-behinds and intellisense are not quite there yet). I think someone needs to gain an understanding of the SharePoint environment and the options for deploying code to fully leverage what it's capable of and be able to troubleshoot. It took me about 6 months of studying and fumbling around before I was able to start getting things right the first time through.
