[site]: stackoverflow
[post_id]: 1493246
[parent_id]: 1493162
[tags]: 
Not strictly an answer to your question, but have you considered using a List instead? List > maps = new ArrayList >(); ... maps.add(new HashMap ()); seems to work just fine. See Java theory and practice: Generics gotchas for a detailed explanation of why mixing arrays with generics is discouraged. Update: As mentioned by Drew in the comments, it might be even better to use the Collection interface instead of List . This might come in handy if you ever need to change to a Set , or one of the other subinterfaces of Collection . Example code: Collection > maps = new HashSet >(); ... maps.add(new HashMap ()); From this starting point, you'd only need to change HashSet to ArrayList , PriorityQueue , or any other class that implements Collection .
