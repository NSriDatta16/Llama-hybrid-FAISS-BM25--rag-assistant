[site]: stackoverflow
[post_id]: 1781403
[parent_id]: 1780672
[tags]: 
de Morgan's boolean logic theorem has two statements. 1. (A and B) is equiv to not(notA or notB) not(A and B) is equiv to (notA or notB) 2. (A or B) is equiv to not(notA and notB) not(A or B) is equiv to (notA and notB) .. buy sandwich if it is (less than $2 and it is salmon) = do not buy sandwich if it is (not less than $2 or not salmon). watch tv if (V is on or Avatar is on) = do not watch tv if (V is off and Avatar is off). Further boolean algebra, among others, (A and B) or (A and C) = A and (B or C) (A or B) or C = A or B or C Original logic: (controller == 'foos' && item.widgets.blank?) || (controller == 'foos' && item.doohickeys.blank?) || (controller == 'bars' && item.widgets.blank?) || (controller == 'bars' && item.doohickeys.blank?) || (controller == 'bazes' && item.widgets.blank?) || (controller == 'bazes' && item.contraptions.blank?) Reduction (foos and widgets) or (foos and hickeys) = foos and (widgets or hickeys): ( (controller == 'foos' && (item.widgets.blank? || item.doohickeys.blank?) ) || (controller == 'bars' && (item.widgets.blank? || item.doohickeys.blank?) ) || (controller == 'bazes' && (item.widgets.blank? || item.contraptions.blank?) ) ) Reduction (foos and items) or (bars and items) = (foos or bars) and items: ( (controller == 'foos' || controller == 'bars') && (item.widgets.blank? || item.doohickeys.blank?) ) || (controller == 'bazes' && (item.widgets.blank? || item.contraptions.blank?) ) The logic reduction has reduced to 3.5 lines from the original 6 lines. Even though, this exercise did not involve de Morgan's but plain boolean algebraic manipulation, de Morgan's is frequently applicable in other situations. You might say, why should I have to go thro such trouble every time we write a bunch of logic statements? The reduced logic does not bear any semblance to the original and that is not good self-documenting code. Exactly! The reduced logic let's you see it in simpler terms and the original bears no semblance to the simpler logic you should have had in the first place.
