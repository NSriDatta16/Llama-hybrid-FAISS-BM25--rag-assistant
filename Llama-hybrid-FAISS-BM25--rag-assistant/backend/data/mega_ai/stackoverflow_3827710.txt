[site]: stackoverflow
[post_id]: 3827710
[parent_id]: 3529858
[tags]: 
You asked this a month ago, but here's an answer anyway... There are a few issues here: Once you set the LoadOptions property on the context, you can't change it. You should create and configure your DataLoadOptions object, and when you're done, assign it to the context. LoadWith specifies what children get automatically loaded with the parent. So loadOptions.LoadWith (p => p.DataPointValues) would automatically load the DataPoint's children, and not wait until the DataPoint.DataPointValues (or whatever you name it) property is accessed. LoadWith makes the loading non-lazy (eager). AssociateWith allows you to filter and order the in children that automatically-loading relationship. For example loadOptions.AssociateWith (p => p.DataPointValues.OrderByDescending(v => v.TheValue)) would sort the DataPointValues by value. And finally, I'd probably break up your query into two, just to make it easier. // first setup a DataPoint -> DataPointValue relationship in your DBML // then set up the DataPointValues to automatically load with DataPoint: dataLoadOptions.LoadWith (dp => dp.DataPointValues); // then assign the load options to the context here // First query List listIDs = context.CategoryLists .Where(cl => categoryIDs.Contains(cl.CategoryListID)) .Select(cl => cl.ListID) .ToList(); // Second query(ies) - this isn't the most elegant, but simple is usually better :) List dataPoints = new List (); foreach (int listID in listIDs) { DataPoint foundDP = context.DataPoints .Where(dp => listIDs.Contains(dp.ListID)) .OrderByDescending(dp => dp.RecordedDateTime) .Take(1) .SingleOrDefault(); // Remember, at this point DataPointValues will already be loaded into the DataPoint if (foundDP != null) dataPoints.Add(foundDP); } Anyway, that's a longwinded answer that you may or may not even need! Ah well, it's practice for me, I guess. Hope it helps. EDIT: Sorry, started thinking about this... You could possibly do this instead (cleaner, faster): loadOptions.LoadWith (l => l.DataPoints); loadOptions.AssociateWith (l => l.DataPoints.OrderByDescending(dp => dp.RecordedDateTime).Take(1)); loadOptions.LoadWith (dp => dp.DataPointValues); // assign the LoadOptions here, // then: List dataPoints = context.CategoryLists .Where(cl => categoryIDs.Contains(cl.CategoryID)) .Select(cl => cl.List.DataPoints) .ToList();
