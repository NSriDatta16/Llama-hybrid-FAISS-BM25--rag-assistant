[site]: stackoverflow
[post_id]: 2305769
[parent_id]: 2305697
[tags]: 
A solution that attempts to address the problem is Kiln by FogCreek: http://www.fogcreek.com/Kiln/ - this shows that what you want is not at all unreasonable. Generically I think that this is more about how you organise things that about specific tools, that said if a tool has features that help support the workflow you need then obviously that's going to help. I believe (though right now I'm struggling to find references) that there are tools that have the notion of a stop point prior to commit - so that the developer commits but the changes are "held" 'til approved. Either that or there are code-review tools that manage the hooks for you (I'm frustrated because I've read this stuff but can't find it this morning). Generally, from what I've seen, this suggests that a DVCS (mercurial, git, bazaar et al) might be the most appropriate solution - with the review step being the push to your central repository, this resolves the conflict between "commit often" and "review before commit". The alternative - as suggested - is that you work on developer branches and review before merge. In both cases the key issue is more management than toolset - you need to ensure that backlogs don't build up (of potentially "poor" code) because of an inability or lack of will to get code reviewed and integrated.
