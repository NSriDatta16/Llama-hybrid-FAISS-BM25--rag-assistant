[site]: datascience
[post_id]: 25140
[parent_id]: 25124
[tags]: 
I will list possible ways to approach you problem: A- Naïve approach Save current date Extract day from string using regex and extract its rank in the week (example 0 for Monday 1 for Tuesday and/or so) Find preceding word to output 3 If output 3 is "Next" --> exact date = date for the output from 2 in the next calendar week If output 3 is "on"/"this" --> exact date = date for the output from 2 in the this calendar week. If you are using python, you will need re and calendar packages. Pros: Fast in developing Sufficient for most of the cases Cons: Slow in implementation, depending on how long is the length of text You have to account for all possible scenarios in output 4 above B- Classification Create a ground truth of strings with positive and negative examples and feed it into a classifier to learn from those examples. You would need to parse the text first as a pre-processing step (but this would be the case for most approaches, isn't it?) Pros: Fast in implementation Less rule-based Accuracy is expected to be high depending on the classifier Cons: Creating ground truth is a time consuming (could be minimised by combining this approach with the Naïve one or with some nlp ) LWill need time to train (but this is shouldn't be too long) C- Do it the Apple way Have a look at some information on the Apple Data Detectors
