[site]: crossvalidated
[post_id]: 103035
[parent_id]: 
[tags]: 
construct/load dataset that performs better with diffusion kernel than other kernel

I'm looking for a dataset on which a diffusion kernel (also called heat kernel), used via SVM, would get better accuracy than other kernels for the classification task. I want to use such a dataset to make sure my implementation of the diffusion kernel is working, and to get a better understanding of the diffusion kernel (does it classify as "similar" graphs that have the same expression on the same zones (doesn't care about the level expression as long as it's approximatively the same value on some part of the graph) ? Or can it understand substructure of the graphs, and say that for instance if 2 out of 3 connected features is present, it belongs in the same class ?). Does anyone know of such a dataset, or know how to construct it ? Thanks! Jess PS : For now, I've tried creating my own dataset in R, but the linear and gaussian kernel get similar results for classification. Here was the idea behind it : I'm trying to predict whether a pokemon is dragon type, based on this underlying graph : Here is the dataset, in R : charizard = c(70, 100, 80, 100, 80, 10, 95) dragonite = c(80, 80, 80, 60, 20, 20, 50) tyranitar = c(90, 0, 100, 80, 40, 5, 70) altaria = c(30, 95, 10, 80, 60, 70, 80) aerodactyl = c(65, 100, 100, 50, 60, 10, 40) salamence = c(100, 100, 100, 100, 90, 0, 70) rayquaza = c(100, 0, 100, 100, 80, 10, 40) lugia = c(100, 80, 90, 80, 70, 40, 30) gyarados = c(80, 0, 90, 80, 70, 2, 75) hydreigon = c(95, 90, 90, 90, 70, 15, 70) dratini = c(20, 0, 90, 60, 20, 60, 70) hooh = c(100, 90, 5, 90, 70, 20, 35) vibrava = c(60, 90, 20, 10, 100, 20, 50) entei = c(95, 0, 5, 100, 60, 10, 60) scyther = c(40, 40, 60, 0, 100, 20, 75) magikarp = c(0, 0, 40, 0, 20, 20, 10) butterfree = c(30, 100, 10, 5, 40, 90, 90) milotic = c(90, 0, 100, 20, 80, 80, 90) ponyta = c(15, 0, 30, 70, 70, 80, 60) blastoise = c(90, 0, 40, 10, 40, 50, 80) alakazam = c(95, 0, 60, 40, 100, 20, 60) sudowoodo = c(50, 0, 60, 5, 30, 40, 40) train = rbind(charizard, dragonite, tyranitar, altaria, aerodactyl, salamence, rayquaza, vibrava, entei, scyther, magikarp, butterfree, milotic, ponyta) test = rbind(lugia, gyarados, hydreigon, dratini, hooh, blastoise, alakazam, sudowoodo) cl_train = as.factor(c(rep('dragon', 7), rep('not_dragon', 7))) cl_test = as.factor(c(rep('dragon', 5), rep('not_dragon', 3 ))) Please note that I'm fully aware that Ho-oh is not a dragon pokemon, and neither is tyranitar nor lugia. It's just an example (and they kind of look like a dragon...). As mentionned earlier, this small dataset gets perfect accuracy for linear kernel, for instance, and not for the diffusion kernel, so it's not what I'm looking for even though I tried to buid it for this purpose...
