[site]: stackoverflow
[post_id]: 2750186
[parent_id]: 2750075
[tags]: 
The link Tejs provided ( http://www.jaggersoft.com/pubs/StructsVsClasses.htm ) is a good explanation (although it is a bit out of date, particularly on the explanation of events). The most import practical difference is that a struct is a value type, meaning it is passed by value rather than by reference. What this really means is that when a struct is passed as an argument, it is actually passed by copy. As a result, operations on one instance of a struct do not affect other instances. Consider the following code: struct NumberStruct { public int Value; } class NumberClass { public int Value = 0; } class Test { static void Main() { NumberStruct ns1 = new NumberStruct(); NumberStruct ns2 = ns1; ns2.Value = 42; NumberClass nc1 = new NumberClass(); NumberClass nc2 = nc1; nc2.Value = 42; Console.WriteLine("Struct: {0}, {1}", ns1.Value, ns2.Value); Console.WriteLine("Class: {0}, {1}", nc1.Value, nc2.Value); } } Because both ns1 and ns2 are of the NumberStruct value type, they each have their own storage location, so the assignment of ns2.Number does not affect the value of ns1.Number . However, because nc1 and nc2 are both reference types, the assignment of nc2.Number does affect the value of nc1.Number because they both contain the same reference. [Disclaimer: The above code and text taken from Sams Teach Yourself Visual C# 2010 in 24 Hours ] Also, as others have already pointed out, structs should always be immutable. (Yes, in this example the struct is mutable but it was to illustrate the point.) Part of that means that structs should not contain public fields. Since structs are value types, you cannot inherit from a struct. You also cannot derive a struct from a base class. (A struct can implement interfaces, however.) A struct is also not allowed to have an explicitly declared public default (parameterless) contstructor. Any additional constructors you declare must completely initialize all of the struct fields. Structs also cannot have an explicitly declared destructor. Since structs are value types, they shouldn't implement IDisposable and shouldn't contain unmanaged code.
