[site]: stackoverflow
[post_id]: 1515161
[parent_id]: 1515075
[tags]: 
Return value vs. throwing an exception The fundamental difference between an exception and a return value is that the return value is delivered to your immediate caller, whereas an exception is delivered to a catch clause anywhere in the call stack. This allows to reuse the same exception handler for many different kinds of exceptions. I recommend that you favor exceptions over return codes if and only if you need that feature. Performance impact. Every instruction has a negative effect on performance, including those in catch-blocks. However, any modern CPU can throw and handle millions of exceptions per second, so unless you throw thousands of them you won't notice a thing. Specific exceptions For throwing, be specific to allow specific handling. For handling, you can be generic, but you should be aware that arbitrary exceptions can be delivered to your handler, including unchecked ones not declared by your callees. checked The debate rages whether methods should use checked or unchecked exceptions. Never just swallow an exception. Handle or rethrow it. It simplifies maintenance if you don't discard evidence about failures. Example An application I worked on recently receives commands over the network which it then executes. This usually involves further interaction with remote systems, which might fail for a host of reasons. The methods to carry out the command don't catch any exceptions, letting them bubble of the call stack to the central exception handler in the command listener, which does the following: for (int retries = 0;; retries++) { try { commandService.execute(command); return; } catch (Exception e} Log.error(e); if (retries We intentionally did not catch & rethrow exceptions in the processing logic, as we felt this would have added no value.
