[site]: stackoverflow
[post_id]: 145192
[parent_id]: 142652
[tags]: 
I've seen many discussions over the years about how OODs are supposed to overtake Relational Databases "anytime soon"; that the Relational model is the way of the past; that inertia from the huge installed basis (ehm... legacy ) is what holds back progress on OODs. "It's just a matter of time before a 'good-enough' implementation finally comes out and succeeds at dethroning RDBMSs". I'm not an expert by any stretch; but I've thought about this many times, and I've come to believe that these views completely miss the point. In most "real world" scenarios, the big thing, the only thing that matters is the data . Programming techniques, tools and languages change; technology evolves. Corporate "Voice Response Systems" become the rage, then all but vanish behind the shadow of "The Web". Applications come and go; some of them good, some not so much; some critical, some merely convenient; some last 3 months, some last 3 decades. But at the end of the day, the information that feeds all these applications is the heart of the system and must survive the swings of fashion. The data stays . So, the core of the "System" must evolve around that one goal: keep and protect the data. Think about it: SQL databases in particular give us a free-standing, (mostly) standardized repository with a decades-old proven record, and can be accessed anytime with what is, far from obsolete, essentially a Functional language! That's a pretty good place to trust for your most valued component. Any approach that puts the priority in the programming tool, environment, or the application at the expense of saving the data in an obscured store -- anything that binds the application technology too closely to the data, is likely going to fall off the way-side. Not to say that I believe everything in the world must go into a SQL table. OOD-like solutions have a place too, and a lot of potential. But you need to look in places where the "application" is the king, and the "data" is secondary: games, one-off applications and tools, systems that hold not-critical data or data that has no long-term value past the life expectancy of the application. In particular, I think that systems that have a limited useful life (a few years at most) are prime candidates for OOD-like technologies. On the other hand, when working on anything that must one day "hand over" the data to its successor, I would be very leery of anything other than a good-old RDBMSs. To put it in a sound byte, it's never been about the "application"; It's always been about the "data".
