[site]: stackoverflow
[post_id]: 5438904
[parent_id]: 5438600
[tags]: 
As you wrap each element, you can save the wrapper in an array, then process the array rather than re-traversing the DOM: $(document).ready(function() { var wrappers = []; // iterate over each element with img.caption $('img.caption').each(function() { var $this = $(this); var classList = this.className; // grab the image's list of classes, if any $this.wrap(' '); // wrap the with and add the saved classes // Remember the wrapper here: wrappers.add($this.parent()); $this.after(' ' + $(this).attr('alt') + ' '); // add the caption $this.removeAttr('class'); // remove the classes from the original element }); // now iterate over each figure.caption we built, and relocate it to before its closest preceding paragraph $.each(wrappers, function(index, item) { $(item).parent('p').before(item); }); // And if you're done with it, release it: wrappers = null; }); Here's a simplified example: HTML: JavaScript: jQuery(function($) { var wrappers = []; $("img.caption").each(function() { var $this = $(this); $this.wrap(" "); wrappers.push($this.parent('figure')); }); $.each(wrappers, function(index, item) { $(item).addClass("foo"); }); wrappers = null; }); Live copy Off-topic: You seem to be interested in efficiency, so I'll mention: Every call to $(this) requires multiple function calls and a memory allocation. Rather than doing it repeatedly, do it once on each loop and cache the result. I've done that in the above as an example. Constantly writing $(this) in the same function isn't ideal from a performance perspective, although in 99% of cases, it doesn't matter. If you're dealing with a lot of elements, it does.
