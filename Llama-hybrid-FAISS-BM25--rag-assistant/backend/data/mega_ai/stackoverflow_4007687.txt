[site]: stackoverflow
[post_id]: 4007687
[parent_id]: 4007629
[tags]: 
The problem with your code is that in the server you are calling EndGetContext method which will set the WaitHandle and immediately close the server before it had any time to send the response. Here's a slight modification of your code. Server: class Program { private static ManualResetEvent _waitHandle = new ManualResetEvent(false); static void Main() { NonblockingListener(new string[] { "http://+:5432/" }); } public static void NonblockingListener(string[] prefixes) { using (var listener = new HttpListener()) { foreach (string s in prefixes) { listener.Prefixes.Add(s); } listener.Start(); var result = listener.BeginGetContext(new AsyncCallback(ListenerCallback), listener); Console.WriteLine("Waiting for request to be processed asyncronously."); // Block here until the handle is Set in the callback _waitHandle.WaitOne(); Console.WriteLine("Request processed asyncronously."); listener.Close(); } } public static void ListenerCallback(IAsyncResult result) { var listener = (HttpListener)result.AsyncState; var context = listener.EndGetContext(result); var response = context.Response; string responseString = " Hello World! "; byte[] buffer = Encoding.UTF8.GetBytes(responseString); response.ContentLength64 = buffer.Length; response.OutputStream.Write(buffer, 0, buffer.Length); // Finished sending the response, now set the wait handle _waitHandle.Set(); } } Client: class Program { static void Main(string[] args) { using (var client = new WebClient()) { client.Headers[HttpRequestHeader.UserAgent] = "linkToShare - HTTPWebRequest"; var valuesToPost = new NameValueCollection { { "param1", "value1" }, { "param2", "value2" }, }; var result = client.UploadValues("http://127.0.0.1:5432", valuesToPost); Console.WriteLine(Encoding.UTF8.GetString(result)); } } }
