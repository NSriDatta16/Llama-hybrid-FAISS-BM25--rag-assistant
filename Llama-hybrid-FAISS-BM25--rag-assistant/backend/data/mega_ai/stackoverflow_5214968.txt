[site]: stackoverflow
[post_id]: 5214968
[parent_id]: 5214875
[tags]: 
You're on the right track. You don't want brittle tests that have to be changed every time you refactor the system under test. In general I concentrate my testing on the public interface. If your public interface changes, you probably have to change more than just tests. I also try to do state testing instead of behavior testing whenever possible. So I'll usually use stubs instead of mocks . (Most isolation/mocking frameworks will let you create either.) I verify the state of the system (or class) under test rather than asking a mock object to verify itself. That said, I try to be flexible. If testing mock behavior makes sense in a given case, I'll use that. If I need to expose internals to get decent coverage, I will. EDIT : See also this article by Scott Bain .
