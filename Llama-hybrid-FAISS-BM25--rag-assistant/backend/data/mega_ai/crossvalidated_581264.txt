[site]: crossvalidated
[post_id]: 581264
[parent_id]: 581050
[tags]: 
Don't use a canned simulation function to conduct your power analysisâ€”just do your own simulation from scratch. Your situation isn't that difficult. There are various resources on CV to assist you with simulating a logistic regression model (in particular, see: Simulation of logistic regression power analysis - designed experiments ). The background information in your question is rather sparse, but I gather you think there is a linear (in log odds) relationship between a continuous $X$ and a binary $Y$ . You want to plan a subsequent study based on the same relationship found in your data, but wonder what would happen if you dichotomized $X$ . So just simulate that, but in one case leave $X$ as is, and in the other case dichotomize it. Then compare the observed power. Here is a simple example (coded in R ): set.seed(7309) # this makes the example exactly reproducible x = runif(30, min=0, max=2) # these are our original x-values lo = 0 + 1*x # I simulate the true underlying log odds p = exp(lo)/(1+exp(lo)) # I convert them to probabilities y = rbinom(30, size=1, prob=p) # I generate the observed, binomial y-values m = glm(y~x, family=binomial) # I'm pretending this is your original model B0 = coef(m)[1] # here I extract the fitted coefficients B1 = coef(m)[2] lo = B0 + B1*x # which I use to create a new set of log odds... p = exp(lo)/(1+exp(lo)) # ... and probabilities x.cat = ifelse(x>median(x), 1, 0) # here I dichotomize your x-values p.vect.cont = vector(length=1000) # these will store the p-values p.vect.cat = vector(length=1000) for(i in 1:1000){ y = rbinom(30, size=1, prob=p) # I simulate new observed y's each time, m.cont = glm(y~x, family=binomial) # refit the models, m.cat = glm(y~x.cat, family=binomial) p.vect.cont[i] = coef(summary(m.cont))[2,4] # and get the p-values p.vect.cat[i] = coef(summary(m.cat))[2,4] } mean(p.vect.cont
