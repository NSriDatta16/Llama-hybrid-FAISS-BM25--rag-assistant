[site]: stackoverflow
[post_id]: 30025
[parent_id]: 29971
[tags]: 
The approach I favour is the following setup (Actually assuming you are in a .NET project): CruiseControl.NET. NANT tasks for each individual step. Nant.Contrib for alternative CC templates. NUnit to run unit tests. NCover to perform code coverage. FXCop for static analysis reports. Subversion for source control. CCTray or similar on all dev boxes to get notification of builds and failures etc. On many projects you find that there are different levels of tests and activities which take place when someone does a checkin. Sometimes these can increase in time to the point where it can be a long time after a build before a dev can see if they have broken the build with a checkin. What I do in these cases is create three builds (or maybe two): A CI build is triggered by checkin and does a clean SVN Get, Build and runs lightweight tests. Ideally you can keep this down to minutes or less. A more comprehensive build which could be hourly (if changes) which does the same as the CI but runs more comprehensive and time consuming tests. An overnight build which does everything and also runs code coverage and static analysis of the assemblies and runs any deployment steps to build daily MSI packages etc. The key thing about any CI system is that it needs to be organic and constantly being tweaked. There are some great extensions to CruiseControl.NET which log and chart build timings etc for the steps and let you do historical analysis and so allow you to continously tweak the builds to keep them snappy. It's something that managers find hard to accept that a build box will probably keep you busy for a fifth of your working time just to stop it grinding to a halt.
