[site]: stackoverflow
[post_id]: 673980
[parent_id]: 673841
[tags]: 
I'm sure there is a more elegant way, but see if this works? import static org.junit.Assert.assertEquals; import java.text.ChoiceFormat; import java.text.DecimalFormat; import java.text.FieldPosition; import java.text.NumberFormat; import java.text.ParsePosition; import org.junit.Test; public class NumberFormatTest { @Test public void testNumberFormat() { NumberFormat nf = new MyNumberFormat(); assertEquals("-1234.4", nf.format(-1234.4)); assertEquals("0.0", nf.format(0)); assertEquals("+0.3", nf.format(0.3)); assertEquals("+12.0", nf.format(12)); } } class MyNumberFormat extends NumberFormat { private DecimalFormat df = new DecimalFormat("0.0#"); private ChoiceFormat cf = new ChoiceFormat(new double[] { 0.0, ChoiceFormat.nextDouble(0.0) }, new String[] { "", "+" }); @Override public StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition pos) { return toAppendTo.append(cf.format(number)).append(df.format(number)); } @Override public StringBuffer format(long number, StringBuffer toAppendTo, FieldPosition pos) { return toAppendTo.append(cf.format(number)).append(df.format(number)); } @Override public Number parse(String source, ParsePosition parsePosition) { throw new UnsupportedOperationException(); } } According to DecimalFormat The negative subpattern is optional; if absent, then the positive subpattern prefixed with the localized minus sign ('-' in most locales) is used as the negative subpattern Hence new DecimalFormat("0.0#") is equivalent to new DecimalFormat("0.0#;-0.0#") So this would give us: -1234.5 and 1234.5 Now, to add the '+' to positve numbers, I use a ChoiceFormat 0.0 will use a choice format of "" . ChoiceFormat.nextDouble(0.0) is the smallest number greater than 0.0 . ChoiceFormat.nextDouble(0.0) will use a choice format of "+" . If there is no match, then either the first or last index is used, depending on whether the number (X) is too low or too high. If the limit array is not in ascending order, the results of formatting will be incorrect. ChoiceFormat also accepts \u221E as equivalent to infinity(INF). Hence Double.NEGATIVE_INFINITY will use "" . 1 will use "+" .
