[site]: stackoverflow
[post_id]: 3790812
[parent_id]: 3790153
[tags]: 
There is nothing magical about MVC . It's purpose is to split user interface interaction into three distinct roles. The important separation is that between Model and Presentation layer. The presentation layer consists of Controller (handles and delegates request from the UI to the model) and View (renders Model data). Your model is your core application. It is likely layered itself, for instance into a Data Access layer (your AdoDB stuff), a Domain Model and a Service Layer . How you organize the Model is really up to the application you want to build. The important thing with MVC is to keep the model independent from the presentation. Your application should be able to solve the problem it was written for without the UI.The UI is just one interface on top. Basically, as long as your controller is kept thin and does this class SomeController { public function someAction() { $input = filter_input(/* ... */); $adoDb = $this->getModel('MyAdoDbClass'); $newData = $adoDb->doSomethingWithInput($input); $this->getView()->setData($newData); $this->getView()->render(); } } and not this class SomeController { public function someAction() { $input = filter_input(/* ... */); $adoDb = new AdoDb; /* all the code that belongs to doSomethingWithInput ... */ echo ' '; /* all the code that should belongs to the View ... */ } } you are fine. Like I said, there is nothing magical about. You gotta keep 'em separated. I suggest you have a look at other frameworks to see how they approach MVC. That's not to say you should copy or use them, but try to learn how they go about MVC. Also have a look at Rasmus Lerdorf's article The no-framework PHP MVC framework
