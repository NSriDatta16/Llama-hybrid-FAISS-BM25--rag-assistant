[site]: stackoverflow
[post_id]: 900656
[parent_id]: 900634
[tags]: 
In my experience, these decisions are always made on a case-by-case basis. Several factors are considered, including: How mature is the new technology? Does the organization like to be at the forefront working with bleeding edge new technologies, or does it prefer to work with proven tools and methodologies? What skill sets do your people have? Are they consistent with use of the new technology, or is more training needed? Will improved productivity outweigh the time it takes to come up to speed? What investment do you have in the existing technology? What is the cost of moving to the new technology? How much rework and rewriting of code is involved? What is the requirement? Is it supported by the existing techology, or are new tools needed to fulfill the requirement? What are the performance expectations? Does the new technology provide a performance improvement that cannot be met with the old technology? What about the technological culture? Is the organization vendor specific (e.g. a Microsoft shop)? Can open-source code be used? What is the scope of the project? Is it a large project that would benefit from supporting technologies like frameworks and tools, or is it a small project that would be unduly weighed down and complicated by these things? How is the new technology supported? Does the vendor have good documentation? Is there someone you can talk to if you have problems? Or are you an organization that has people that know how to solve problems without a support contract? Is the technology comfortable to work with? Does it seem to make sense? Is it clean and elegant? Do other people seem to like it? Are other people having problems with it? Is the technology the latest flavor of the week? Has it proven itself in the battlefield to produce tangible results, or is it just a religion? How much time do you have to learn the new technology and iron out the kinks? Do the benefits outweigh the costs? As a very brief example, I chose Link to SQL for my most recent project, because the project was complex enough to warrant an ORM, L2S performs well and is lightweight, we are a Microsoft Shop, and it is my sense that the Entity framework is not quite ready for prime time (even though Microsoft says that it will be the go-to framework for the future).
