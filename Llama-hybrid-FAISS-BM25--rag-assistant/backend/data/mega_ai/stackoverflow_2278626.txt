[site]: stackoverflow
[post_id]: 2278626
[parent_id]: 2278530
[tags]: 
Experience is often the best guide when it comes to such questions, because API design is still more an art than a science. There are opposing forces in play for every class you design: On the one side, we want classes to be cohesive encapsulations of related data and behavior. On the other side, we want to adhere to the Single Responsibility Principle to avoid God Objects . In your particular case it may seem like all the behavior relates to Accounts, which would be an argument for encapsulating it all into one class. However, in my personal experience, I often find it valuable to separate object creation and lifetime from the actual types. This allows Dependency Injection (DI) and DI Containers to take care of the lifetime aspect of instances, while the classes can concentrate on encapsulating data and behavior. In your specific case, the Accounts class looks a lot like a Repository , which is a type (often abstract) that we use to find instances in databases or other persistent storage. They are often better modeled as separate types than the classes they retrieve. On a final note, in OOD you should not worry about class explosion. Many small classes with distinct responsibilities are preferrable.
