[site]: stackoverflow
[post_id]: 466329
[parent_id]: 466296
[tags]: 
There are a few ways of doing this - depending on the answers to my comments in your question: Store the extra data in the database by converting the datatype from numeric to varchar/string. Advantages: Very simple in its implementation; You can treat all the values in the same way. Disadvantage: If you've got very large amounts of data, storage sizes will escalate; indexing and sorting on strings doesn't perform so well. Use if: Each number may have an arbitrary length (and hence number of zeros). Don't use if: You're going to be spending a lot of time sorting data, sorting numeric strings is a pain in the ass - look up natural sorting to see some of the pitfalls; Continue to store the data in the database as numeric but pad the numeric back to a set length (i.e. 10 as I have suggested in my example below): Advantages: Data will index better, search better, not require such large amounts of storage if you've got large amounts of data. Disadvantage: Every query or display of data will require every data instance to be padded to the correct length causing a slight performance hit. Use if: All the output numbers will be the same length (i.e. including zeros they're all [for example] 10 digits); Large amounts of sorting will be necessary. Add a field to your table to store the original length of the numeric, continue to store the value as numeric (to leverage sorting/indexing performance gains of numeric vs. string) in your new field store the length as it would include the significant zeros: Advantages: Reduction in required storage space; maximum use of indexing; sorting of numerics is far easier than sorting text numerics; You still get the ability to pad numerics to arbitrary lengths like you have with option 1. Disadvantages: An extra field is required in your database, so all your queries will have to pull that extra field thus potentially requiring a slight increase in resources at query/display time. Use if: Storage space/indexing/sorting performance is any sort of concern. Don't use if: You don't have the luxury of changing the table structure to include the extra value; This will overcomplicate already complex queries. If I were you and I had access to modify the db structure slightly, I'd go with option 3, sure you need to pull out an extra field to get the length. The slightly increased complexity pays huge dividends in the advantages versus the disadvantages. The performance hit of padding the string back out the correct length will be far superceded by the performance increase of the indexing and storage space required.
