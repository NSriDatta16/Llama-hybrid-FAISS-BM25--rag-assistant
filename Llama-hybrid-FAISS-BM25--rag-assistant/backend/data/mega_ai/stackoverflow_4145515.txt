[site]: stackoverflow
[post_id]: 4145515
[parent_id]: 4143749
[tags]: 
From the C standard ( n1256 ): 6.7.5.3 Function declarators (including prototypes) Constraints 1 A function declarator shall not specify a return type that is a function type or an array type. Functions cannot return array types or other function types. Functions can return pointers to those types, though: int (*func(void))[5]; The syntax is a little weird looking, but it breaks down as follows: func -- func func(void) -- is a function taking no parameters *func(void) -- returning a pointer (*func(void))[5] -- to a 5-element array int (*func(void))[5] -- of int This isn't as useful as it looks: if you try to return a pointer to a local array, such as int (*func(void))[5] { int arr[5] = {0,1,2,3,4}; return &arr; } the array no longer exists when the function returns; the pointer value you get back won't point to anything meaningful anymore. If you're trying to create an array of functions , you have a similar problem; you cannot have an array of function types (6.7.5.2, paragraph 1, which includes the sentence "The element type shall not be an incomplete or function type"), although you can have an array of pointers to functions: int (*func[5])(void); This breaks down as func -- func func[5] -- is a 5-element array *func[5] -- of pointers (*func[5])(void) -- to functions taking no parameters int (*func[5])(void) -- and returning int Example: int f0(void) { return 0; } int f1(void) { return 1; } int f2(void) { return 2; } int f3(void) { return 3; } int f4(void) { return 4; } int main(void) { int (*func[5])(void) = {f0, f1, f2, f3, f4}; int i; for (i = 0; i
