[site]: stackoverflow
[post_id]: 668301
[parent_id]: 
[tags]: 
Please help me solve my W3C validation API timeout issue

I'm using the W3C validation service to check that the text I type into a TextBox is valid markup. It's almost working. But, under particular conditions my input results in an error and then endless timeout exceptions. I have to close an re-open the program to get it working again. Please glance over my code and help me to solve this issue. I've got a pretty simple WPF application with a TextBox and a StatusBar. The StatusBar updates as I type to let me know if my typed markup is or is not valid. So that I'm not hammering the service, validations occur only after one second or longer has elapsed with no keystrokes. Invalid http://img9.imageshack.us/img9/3788/invalidr.gif It StatusBar may show: "Validating...", "Valid", "Invalid", or--if there's been one--an exception's message. Validating http://img7.imageshack.us/img7/5842/validating.gif The following validates successfully: XHTML Input Test Test This is a test If I break my paragraph like This is a test then I get this exception while trying to process the response XML: Name cannot begin with the '"' character, hexadecimal value 0x22. Line 86, position 40. XML Exception http://img11.imageshack.us/img11/3066/namecannotbegin.gif If validation fails like that twice in a row, then it seems I can't just fix my paragraph tags and continue on like normal. For some reason each subsequent validation fails with this exception: The operation has timed out Timed Out http://img21.imageshack.us/img21/7600/timedout.gif This is very strange. I'm sorry to post my whole project, but I don't know where my problem is coming from. It might be my threading, web service communication, exception handling... I just can't seem to find it. Am I closing my StreamWriter, HttpWebRequest, and ResponseStreams correctly? XAML Visual Basic Imports System.ComponentModel Imports Imports Class Window1 Private WithEvents Worker As BackgroundWorker Private _WorkerArgument As String Private Sub Window1_Loaded(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs) Handles MyBase.Loaded InitializeWorker() End Sub Private Sub InitializeWorker() Worker = New BackgroundWorker Worker.WorkerSupportsCancellation = True AddHandler Worker.DoWork, AddressOf Worker_DoWork AddHandler Worker.RunWorkerCompleted, AddressOf Worker_RunWorkerCompleted End Sub Private Sub TextBox_TextChanged(ByVal sender As System.Object, ByVal e As System.Windows.Controls.TextChangedEventArgs) TryToWork(DirectCast(sender, TextBox).Text) End Sub Sub TryToWork(ByVal Argument As String) If _WorkerArgument IsNot Nothing Then _WorkerArgument = Argument Exit Sub End If If Not Worker.IsBusy Then TextBlockResult.Text = "Validating..." Worker.RunWorkerAsync(Argument) Exit Sub End If _WorkerArgument = Argument Worker.CancelAsync() Dim RetryTimer As New Windows.Threading.DispatcherTimer AddHandler RetryTimer.Tick, AddressOf RetryTicker RetryTimer.Interval = New TimeSpan(1) '1 tick' RetryTimer.Start() End Sub Sub RetryTicker(ByVal sender As Object, ByVal e As System.EventArgs) If Not Worker.IsBusy Then DirectCast(sender, Windows.Threading.DispatcherTimer).Stop() TextBlockResult.Text = "Validating..." Worker.RunWorkerAsync(_WorkerArgument) _WorkerArgument = Nothing End If End Sub Private Sub Worker_DoWork(ByVal sender As Object, ByVal e As DoWorkEventArgs) 'wait for one second' Dim StartTime As DateTime = DateTime.Now() While Now.Subtract(StartTime) . . .Value = "true" Then Return "Valid" Else Return "Invalid" End If Catch ex As Exception Return ex.Message End Try End Function Private Function Communicate(ByVal Url As String, ByVal Post As String) As System.IO.Stream Dim Writer As System.IO.StreamWriter = Nothing Dim Request As System.Net.HttpWebRequest = System.Net.WebRequest.Create(Url) Request.Method = "POST" Request.ContentLength = Post.Length Request.ContentType = "application/x-www-form-urlencoded" Request.Timeout = 2000 '2 seconds' Try Writer = New System.IO.StreamWriter(Request.GetRequestStream()) Writer.Write(Post) Catch Finally If Not Writer Is Nothing Then Writer.Close() End If End Try Return Request.GetResponse.GetResponseStream() End Function Private Sub Worker_RunWorkerCompleted(ByVal sender As Object, ByVal e As RunWorkerCompletedEventArgs) If Not e.Cancelled Then TextBlockResult.Text = DirectCast(e.Result, String) End If End Sub End Class Thanks for any help!
