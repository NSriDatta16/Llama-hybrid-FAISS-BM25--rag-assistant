[site]: stackoverflow
[post_id]: 1217562
[parent_id]: 1216019
[tags]: 
MVC is a way of organizing source code. Where there is source code, you can have any of the three. There's no inherent client or server aspect to any part of the MVC pattern. For example, recently I implemented a gadget portal in pure javascript (like igoogle). I had a model class to load and save gadget configurations from a json data blob, and to manage the settings of those gadgets. Then I had a view that automatically rendered the gadgets currently loaded into the model based on events sent out by the model. Finally, I had a controller that relayed menu clicks in the rest of the application to update the model. That's MVC, but purely in javascript, and purely client-side.
