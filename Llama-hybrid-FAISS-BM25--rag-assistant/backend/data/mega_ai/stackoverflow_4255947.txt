[site]: stackoverflow
[post_id]: 4255947
[parent_id]: 4255740
[tags]: 
Some more points to consider: Solution 1 (assuming that CDoor is not a typedef for a pointer type): Is not "polymorphism friendly" since you will copy objects by value on initialization (even if you pass by reference). Please see "class slicing" issue: What is object slicing? You can not implement pimpl idiom for fast coping/initialization of CGarage In general, (1) means that CGarage is tightly compled with CDoor. Of course, you can achieve some more flexiblity if CDoor is some kind of adapter/decorator Solution 2: Classes coupled less tightly Expensive heap allocation Additional costs for smart pointer Neither design can be preferred "usually" this depends entirely on what is your class modeling what it's responsible for and how it will be used. If a may advise you further, please research "C++ design patterns" subject to get some more insight. Those should be good for starters: The gang of four classics Wikipedia Faqlite
