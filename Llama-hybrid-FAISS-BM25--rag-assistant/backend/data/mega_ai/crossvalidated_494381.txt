[site]: crossvalidated
[post_id]: 494381
[parent_id]: 493509
[tags]: 
Since I was unable to analytically answer the question, I performed several simulations. As it seems, by keeping the mutation rate constant, the frequency of mutants increases with increasing population limit (size). Conversely, by keeping the population limit (size) constant, the frequency of mutants decreases with decreasing mutation rate. It thus looks like that the frequency is dependent on both the population limit (size) and the mutation rate. The frequency probably approaches 1 as the population size (limit) approaches infinity and limits towards 0 with the decreasing mutation rate. The code below is a Python implementation of the above model. For each pair of the parameters 10000 simulations were performed. import random class Cell: """"Definition a cell object.""" def __init__(self, mutation): self.mutation = mutation def draw_mut(): """Draw a mutation or not.""" draw_m = random.choices(population=[True, False], weights=[mut_rate, norm_rate], k=1) if draw_m[0]: mutation = True else: mutation = False return mutation def cell_initialize(): """Initialize the first cell.""" mutation = draw_mut() cells.append(Cell(mutation)) def cell_division(): """Divide cells.""" for i in range(len(cells)): if cells[i].mutation: mutation = True cells.append(Cell(mutation)) elif not cells[i].mutation: mutation = draw_mut() cells.append(Cell(mutation)) def average(): """"Average frequency.""" avg_freq = 0 for frequency in frequencies: avg_freq += frequency return avg_freq / simulations def run(): """Run the simulations.""" for n in range(simulations): mutants = 0 global cells cells = [] cell_initialize() while len(cells)
