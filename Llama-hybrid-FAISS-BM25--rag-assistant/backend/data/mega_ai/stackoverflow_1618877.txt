[site]: stackoverflow
[post_id]: 1618877
[parent_id]: 1618816
[tags]: 
This is a tough question to answer. JavaScript's incredible flexibility's downside is that every programmer and his brother-in-law has a different way of doing things. The downside of pulling in a library for doing "Class" based OOP in JavaScript (Prototype library, Moo, Joose, JS.Class, Base2, etc.) is that you immediately cut down on the number of fellow JavaScript programmers who can read your code. Obviously, jQuery encourages you to think in terms of "collections." A collection is what you get back from a $() or jQuery() call. John Resig once considered adding a class system to jQuery, but finally decided against it. I think he's said that he's never needed a real "Class" system in JavaScript programming. For all but the largest JS projects, I'd say forget about a Class system. Leverage JS's incredible object and array system (including literals). Namespace heavily (variables and methods alike). I've had a lot of luck using arrays of objects for most situations I'd normally use Classes for. An interesting extension of the jQuery collection concept is in Ariel Flesler's jQuery.Collection plugin here . It lets you treat "normal" data much as you would treat DOM data in jQuery. I recently started using Underscore.js , which gives you a lot of functional tools to treat your data as collections.
