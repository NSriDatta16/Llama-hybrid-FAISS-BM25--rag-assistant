[site]: stackoverflow
[post_id]: 4440346
[parent_id]: 
[tags]: 
Java: Writing array to text file inconsistencies

For a class project, a group and I have been working on an application that reads in lines of text from a text file and can encrypt it, decrypt it (both using DES), and calculate an MD5 hash. The program reads in text and encrypts it just fine, writing the array of now encrypted strings back into the text file in the order in which they were read, line by line with all requisite carriage returns. However, when decrypting these strings, the program writes the plaintext to the file all on one line, with no spaces or carriage returns. Both the encrypt and decrypt methods use the same fileWrite class, which uses a buffered writer. I have added a System.out.println statement for debugging purposes to print out the contents of the arrays as they are being encrypted and decrypted to check for errors in storage, but I can't find any. Even when I artificially insert carriage returns by way of the "\n" symbol, the text file is all one line after it's decrypted. I cannot for the life of me figure out why the same class would behave in two different ways at different times. The code to write the array to the file is simple enough, and just proceeds element by element and probably doesn't really need to be included, but here it is anyway. for(int i=0;i From what I can gather, the issue potentially stems from how java and notepad handle new lines differently. When it is reading the plaintext strings from the file, I'm assuming it receives the line breaks from the text file and prints out the encrypted text in this manner, but here java denotes a new line differently than it was originally in the file, leading to this spacing issue when these encrypted lines are then read and processed, but again, I'm not really sure, which is why I'm here. Any help would be appreciated.
