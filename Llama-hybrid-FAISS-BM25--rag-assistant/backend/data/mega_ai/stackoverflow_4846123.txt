[site]: stackoverflow
[post_id]: 4846123
[parent_id]: 4845907
[tags]: 
One thing MSVC++ allows you to do is to explicitly specialize templates within a class. Eg. class X { public: template void doStuff(T value); template <> void doStuff (bool value) { // ..do something specific to bool. } }; This compiles fine in VS, but attempting to compile in GCC will give an error telling you that you have an explicit specialization in the non-namespace scope. The solution to which is to simply drag out the specialization. class X { public: template void doStuff(T value); }; template <> void X::doStuff (bool value) { // ..do something specific to bool. } GCC is correct on this issue though, according to the spec, which states that all explicit specializations should be in the namespace scope. Possibly worth noting that in the latter case, you must define your specialization within the header file, and not the implementation file like you would normally expect. Both the compilers mentioned are non compliant with the standard which would solve this problem, which is the export keyword declared on the specialization within an implementation file. This feature is not implemented by most compilers though, and there are plans to remove it from the next version of the specification.
