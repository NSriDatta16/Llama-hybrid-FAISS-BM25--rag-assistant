[site]: stackoverflow
[post_id]: 3859196
[parent_id]: 3859027
[tags]: 
The INTO TEMP clause is the last one - must go after FROM, WHERE, GROUP BY and HAVING clauses. It cannot appear with ORDER BY, but would come after that too. Hence (using just the first query as an example): select count(*) AS counter, -- Aggregates or expressions must be named pwd_trx_date, pwd_trx_type, pwd_last_type, pwd_last_amt, pwd_pawn_amt, pwd_cob1, pwd_cob2, pwd_cob3, pwd_cob4 from boletos where pwd_trx_date >= $sfecha and pwd_trx_date If, as seems plausible, you need more columns renamed, then: select count(*) AS rcount, pwd_trx_date AS rtrxdate, pwd_trx_type AS trxtype, pwd_last_type AS rlasttype, pwd_last_amt AS rlastamt, pwd_pawn_amt AS rpawnamt, pwd_cob1 AS rcob1, pwd_cob2 AS rcob2, pwd_cob3 AS rcob3, pwd_cob4 AS rcob4 from boletos where pwd_trx_date >= $sfecha and pwd_trx_date The answer to your question 'what does the final SELECT look like' depends on what the report is supposed produce. I've taken a copy of the entire report (253 lines), applied some minimal reformatting and reduced it to 193 lines (GROUP BY clause on a single line; use pwd_trx_date BETWEEN $sfecha AND $efecha for the date range). You have 6 temporary tables, all selecting from the same Boletos table, with the same date range, and with different sets of criteria on the pwd_trx_type and pwd_last_type fields. Unfortunately, those 6 queries exhibit 3 different sets of grouping columns, and that many different numbers of fields. It is not clear whether these results should be combined with a UNION or a set of joins. If the answer is a UNION, you will need to ensure that all the intermediate tables have the same number of columns as 'r' (the temp table with the most columns), or you will have to write your UNION with dummy fields provided for each of the 'narrow' tables to match the 'widest' table. If the answer is JOIN, you will need to define the joining conditions - those of us not familiar with your DBMS have zero chance of getting the joins right. Whatever the answer (JOIN or UNION), you will also need an ORDER BY clause in the SELECT. This will control the order in which the data is presented to the report. Your 'BEFORE GROUP OF' and 'AFTER GROUP OF' clauses can only list one variable at a time. Those variables will have to be in the ORDER BY clause of the final SELECT. It looks a bit as if you want to concatenate 6 separate reports: one report using the temp table r; the next using the temp table 'i', then 'f', etc. This is not a structure that lends itself to easy ACE reporting. It might be best to have 6 separate reports, each written to a separate file, and then combine (concatenate) those separate reports. You'd probably arrange for the dates to be provided as arguments rather than inputs, so the user is only obliged to enter the dates once, but the controlling shell script runs the 6 reports with the same two dates as parameters. Given the temp table 'r' shown above, the output formatting associated with that (in your mind - unfortunately, ACE has a different view on things) is: AFTER GROUP OF rtrxdate, rtrxtype, rlasttype, rlastamt, rpawnamt, rcob1, rcob2, rcob3, rcob4 PRINT COLUMN 1,"CANTIDAD INGRESOS TOTAL GANANCIA" PRINT COLUMN 1,"-------- --------- ------- --------" PRINT COLUMN 2,GROUP TOTAL OF rcount USING "###,###", COLUMN 10,"RETIROS", COLUMN 20,GROUP TOTAL OF rlastamt "###,###", COLUMN 42,( (GROUP TOTAL OF rcob1) + (GROUP TOTAL OF rcob2) + (GROUP TOTAL OF rcob3) + (GROUP TOTAL OF rcob4) ) - (GROUP TOTAL OF rpawnamt) USING "###,###" Most of the other formatting sections are somewhat similar - they have the same four columns. Two sections have just 3 columns. I think you are going to want to structure your query as a UNION query. I think this means that you will be revising your main series of queries like this: SELECT COUNT(*) AS rcount, pwd_trx_date AS rtrxdate, pwd_trx_type AS rtrxtype, pwd_last_type AS rlasttype, "RETIROS" AS rlabel, 1 AS rsequence, SUM(pwd_last_amt) AS rcol3, (SUM(pwd_cob1) + SUM(pwd_cob2) + SUM(pwd_cob3) + SUM(pwd_cob4) - SUM(pwd_pawn_amt) AS rcol4 FROM boletos WHERE pwd_trx_date BETWEEN $sfecha AND $efecha AND pwd_trx_type = "E" AND pwd_last_type = "R" GROUP BY rtrxdate, rtrxtype, rlasttype INTO TEMP r; Your other queries will produce the same number of columns. The rsequence ensures that the rows from 'r' will appear before the rows from 'i' (which will have rsequence = 2) and 'f' (which will have rsequence = 3) and so on. The rlabel values allow you to print the heading correctly. Your UNION will then be able to do: SELECT * FROM r UNION SELECT * FROM i UNION ... SELECT * FROM c ORDER BY rsequence, rtrxdate, rtrxtype, rlasttype Your FORMAT section will then contain: PAGE HEADER PRINT COLUMN 1,"CANTIDAD INGRESOS TOTAL GANANCIA" PRINT COLUMN 1,"-------- --------- ------- --------" BEFORE GROUP OF rsequence SKIP 1 LINE ON EVERY ROW PRINT COLUMN 2, rcount USING "###,###", COLUMN 10, rlabel, COLUMN 20, rcol3, COLUMN 42, rcol4 Since there are two groups where you don't have a 'real' value for rcol4 - you will probably simply select 0 or SUM(0) as a dummy column for them, you might instead need: ON EVERY ROW IF rsequence From here on, you are on your own, though.
