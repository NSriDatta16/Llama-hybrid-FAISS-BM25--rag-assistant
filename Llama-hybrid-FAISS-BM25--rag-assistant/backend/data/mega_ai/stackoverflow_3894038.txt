[site]: stackoverflow
[post_id]: 3894038
[parent_id]: 3893937
[tags]: 
Depends It depends on various things. But in general algorithms using a Divide-and-Conquer / dichotomic approach will perform well for sorting problems as they present interesting average-case complexities. Basics To understand which algorithms work best, you will need basic knowledge of algorithms complexity and big-O notation , so you can understand how they rate in terms of average case, best case and worst case scenarios . If required, you'd also have to pay attention to the sorting algorithm's stability . For instance, usually an efficient algorithm is quicksort. However, if you give quicksort a perfectly inverted list, then it will perform poorly (a simple selection sort will perform better in that case!). Shell-sort would also usually be a good complement to quicksort if you perform a pre-analysis of your list. Have a look at the following, for "advanced searches" using divide and conquer approaches: quicksort shellsort mergesort And these more straighforward algorithms for less complex ones: bubblesort selection sort insert sort Further The above are the usual suspects when getting started, but there are countless others. As pointed out by R. in the comments and by kriss in his answer, you may want to have a look at HeapSort , which provides a theoretically better sorting complexity than a quicksort (but will won't often fare better in practical settings). There are also variants and hybrid algorithms (e.g. TimSort ).
