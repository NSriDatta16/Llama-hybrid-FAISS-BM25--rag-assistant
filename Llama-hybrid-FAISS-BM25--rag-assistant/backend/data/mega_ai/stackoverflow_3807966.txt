[site]: stackoverflow
[post_id]: 3807966
[parent_id]: 3807791
[tags]: 
Long cold start times are pure hard disk problems. Finding the DLLs that your program needs. You cannot optimize the hard disk beyond running a defragging tool. Segmenting your program so that DLL loading overlaps UI time is quite difficult. Using COM servers or the linker's /DELAYLOAD option are obvious approaches but it is just not that easy to get a functional UI up on the screen without touching just about anything. Separating classes into DLLs that are triggered by toolbar or menu options is of course possible but MFC doesn't make it that easy with Idle time UI updating (sorry, forgot the exact phrase). You're not alone, good examples of programs that have this problem too are Microsoft Office and Acrobat Reader. They solve the problem with a very icky hack, they install an 'optimizer' in Run registry key or Startup folder shortcut. Which doesn't do anything but touch all the DLLs so that they are loaded in the file system cache. Giving the EXE a warm start after the user checked her email. I hate them and keep deleting them after they put it back again. But it does improve the user opinion, they'll think it is the email reader that is slow. Or the blasted Windows-shoulda-gotten-a-Mac of course. That said, 30 seconds is a helluva long time. Do make sure this isn't a problem on just your dev machine, induced by building the binaries over and over again and getting them scattered all over the disk. Run Defraggler. Next, check what all it is doing with the SysInternals' ProcMon utility.
