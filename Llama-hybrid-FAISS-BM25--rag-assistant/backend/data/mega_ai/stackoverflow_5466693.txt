[site]: stackoverflow
[post_id]: 5466693
[parent_id]: 5466361
[tags]: 
ItemID IN (SELECT ItemID FROM @T) AND RelatedItemID IN (SELECT RelatedItemID FROM @T) Now this is a very dangerous condition. It expresses the condition that the current ItemID is in @T and the RelatedItemID is also in @T, but note that they do no have to be on the same row in @T. To give an example, if @T contains: ItemID RelatedItemId 1 2 3 4 and in your table you have a row like: ItemID RelatedItemId 1 4 the WHERE condition will be TRUE. Are you sure this is the resolution you want? As for your original indexes question: unfortunately the answer to this is 'it depends'. A number of index combinations can be good, and exactly the same indexes can be bad, depending on your actual data. When approaching a question like yours you need to ask yourself the question 'which condition is most restrictive, and how restrictive it is?'. Say that your ManufacturerID = @ManufacturerID will restrict the number of candidate rows to about 10% (eg. you have 10 distinct manufacturers), the ItemID IN (SELECT ItemID FROM @T) restricts to a constant size of 100 rows in average, and the last condition does the same. Then even a single index on ItemID will be enough. Specially if is the clustered index, but even as a NC index, you're talking about an average 100 key lookps, which is small change. But now lets say that Say that your ManufacturerID = @ManufacturerID will restrict the number of candidate rows to about 10%, the ItemID IN (SELECT ItemID FROM @T) restricts to a about 5% of the total number of rows, and the last condition does the same, but the exact match of all three conditions is only .0001% of the rows. Now no single column index would help, you need a index that includes all three. In what order? Excellent question. I recommend you go over the General Index Design Guidelines .
