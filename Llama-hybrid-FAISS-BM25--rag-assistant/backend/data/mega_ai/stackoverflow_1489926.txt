[site]: stackoverflow
[post_id]: 1489926
[parent_id]: 1489089
[tags]: 
Let me start by saying this is totally doable. Ignore the naysayers. OK, so it seems you bit off more than you could chew here. I would suggest slightly re-evaluating your goal. It seems that you want to learn how compilers work, and writing a VB.net compiler is your project to get started. Try instead to write an interpreter, which is a much smaller and simpler task. Here's how you do it: Write a parser for a very very small language, maybe only supporting assignment statements. Use a parser toolkit, like Antlr . This will build an AST ("abstract syntax tree" - ie a few classes or objects representing the program's syntax, without the crap like semi-colons, as a tree), which will look something like this: then you go through the AST, and just execute it. Google for "AST walker". So for the assignment x = 5 , create a hashtable entry for 'x', assign 5 to it, then move on to the next statement. keep adding features as you go. Once you've got the full language, you'll probably have learned enough on the way to understand the compiler books. Don't use the dragon book, try Appel's book instead, or Cooper/Torczon. There are online books if you prefer, I've never tried them. When you go to write the compiler, you'll just be changing the bit that executes the AST into one which generates assembly (or C if you prefer) which will do the same action when it's run. I'll grant that it seems daunting, but if you stick to a something simple to start, you'll get something working in a few days at most. In a few months, you'll have built it up to something like what you're looking for. Good luck. To the final part of your question: It seems that you don't know how executables are made from code. People haven't messed with hex in their compilers since the 80s, and hopefully not much even then. Basically, after parsing the code, you go through a series of steps which make the code progressively simpler. At the end of that, you have something that is quite close to assembly. You then generate assembly, and the assembler and linker conspire to make it into an executable.
