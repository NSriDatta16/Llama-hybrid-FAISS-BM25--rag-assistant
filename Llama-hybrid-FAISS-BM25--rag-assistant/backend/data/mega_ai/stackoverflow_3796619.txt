[site]: stackoverflow
[post_id]: 3796619
[parent_id]: 3796520
[tags]: 
C# Iterator version (Very simple code to satisfy all conditions.) One function to rule them all! Doesn't use intermediate storage collection (see yield keyword). Orders the large numbers either to the middle, or to the sides depending on the argument. It's implemented as a C# iterator // Pass forward sorted array for large middle numbers, // or reverse sorted array for large side numbers. // public static IEnumerable CurveOrder(long[] nums) { if (nums == null || nums.Length == 0) yield break; // Nothing to do. // Move forward every two. for (int i = 0; i = 0; i-=2) yield return nums[i]; } Example Usage For example with array long[] nums = { 1,2,3,4,5,6,7,8,9,10,11 }; Start with forward sort order, to bump high numbers into the middle. Array.Sort(nums); //forward sort // Array argument will be: { 1,2,3,4,5,6,7,8,9,10,11 }; long[] arrLargeMiddle = CurveOrder(nums).ToArray(); Produces: 1 3 5 7 9 11 10 8 6 4 2 Or, Start with reverse sort order, to push high numbers to sides. Array.Reverse(nums); //reverse sort // Array argument will be: { 11,10,9,8,7,6,5,4,3,2,1 }; long[] arrLargeSides = CurveOrder(nums).ToArray(); Produces: 11 9 7 5 3 1 2 4 6 8 10 Significant namespaces are: using System; using System.Collections.Generic; using System.Linq; Note : The iterator leaves the decision up to the caller about whether or not to use intermediate storage. The caller might simply be issuing a foreach loop over the results instead. Extension Method Option Optionally change the static method header to use the this modifier public static IEnumerable CurveOrder(this long[] nums) { and put it inside a static class in your namespace; Then call the order method directly on any long[ ] array instance like so: Array.Reverse(nums); //reverse sort // Array argument will be: { 11,10,9,8,7,6,5,4,3,2,1 }; long[] arrLargeSides = nums.CurveOrder().ToArray(); Just some (unneeded) syntactic sugar to mix things up a bit for fun. This can be applied to any answers to your question that take an array argument.
