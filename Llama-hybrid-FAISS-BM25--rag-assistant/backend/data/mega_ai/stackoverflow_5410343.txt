[site]: stackoverflow
[post_id]: 5410343
[parent_id]: 5410291
[tags]: 
Why not use virtual functions? class Renderable { public: virtual void Render() = 0; }; class ARenderable : public Renderable { public: virtual void Render() { // implement this } } class BRenderable : public Renderable { public: virtual void Render() { // implement this } } // .. and then keep a list of Renderable's and call Render() on all of them std::vector rr; rr.push_back(new ARenderable()); rr.push_back(new BRenderable()); // (pseudocode) for each .. Renderable * r r->Render() The runtime overhead in all three cases is similar - basically, virtual functions are function pointers, just very elegant ones ;-) Using this strategy to solve such problems is idiomatic in C++ and fundamental in object-oriented programming.
