[site]: stackoverflow
[post_id]: 3505570
[parent_id]: 3502428
[tags]: 
Eduard. I'll try to answer your question. Firstly I'll give a little preamble and then point by point: I. It is practically obvious that a complete rewrite must be an optimization of system architecture, just to have some sense. In your particular case, introducing "some" modularity into the architecture IS an optimization of such kind. (I would also stress, that until you're bound with some AR-style application framework, there must be at least three recognizable corpora in your code: 1) model is a very "general" term nowadays, but it still makes sense to separate all the abstract knowledge of the domain (objects and relations) from anything that doesn't have much to do with that 2) data persistence organization, which is basically a "data access layer", but I hope that it can be not so thick due to an ORM framework of your choice. 3) other library code, which is none of the above With this setting, you could make all your massive code part redistributable and shareable across as many virtual nodes as it may be needed. II. A minor remark that I could make is concerning the general idea of application quality. You will be forced to find a balance between the conciseness of your system, the project deadline and the resulting performance metrics. These are all contradictory requirements, still I cannot say what is the main in your case. But too general and abstract code may turn out to be hard to maintain, so you will have to have at least a valid description of functional requirements of the resulting system.. valid for at least 3-5 months I guess. Now the relevant part: 1) Adequate? At least it must be more adequeate than the stuff you have now. Will it perform fast without caching? I don't know, really, but I think the short answer is "no" - I suppose you mean exactly target data caching (large data-sets), which I cannot see fitting to anything memcache-like. (BTW you have no 1.5 developer, but (1 - 0.25) developer, what gives you 0.75 I guess :)) 2) As a suggestion, you could write the business-logic-related agents in something less shitty than PHP. Other than that - depends on your personal experience with the technologies potentially involved. 3) I think that either way is possible, still I think that caching on the web side is better, cause you could eliminate a possible bottleneck 4) For that concrete example? Not in my vision. As an argument, I could state that integrating two websites(!) is an awful process in general.
