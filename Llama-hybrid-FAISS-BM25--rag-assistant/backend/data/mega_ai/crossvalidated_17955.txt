[site]: crossvalidated
[post_id]: 17955
[parent_id]: 
[tags]: 
SVM with unequal group sizes in training data

I am trying to build an SVM from training data where one group is represented more than the other. However, the groups will be equally represented in the eventual test data. Therefore, I'd like to use the class.weights parameter of the e1071 R package interface to libsvm to balance the influence of the two groups in the training data. Since I was unsure exactly how these weights should be specified, I set up a little test: Generate some null data (random features; 2:1 ratio between group labels) Fit an svm with the class.weights parameter set. Predict a bunch of new null datasets and look at the class proportions. Replicate the whole process many times for different null training sets. Here is the R code I'm using: nullSVM From this whole thing I was expecting an output ~ 0.5, however, that's not what I got: > mean(replicate(50, nullSVM(50, 300))) [1] 0.6429987 The class.weights paramter is working, sort of , as the lower I weight a , the lower it is represented in this simulation (and if I omit class.weights it returns close to 1)...but I do not understand why simply using weights of 1:2 (for training data that is 2:1) does not get me all the way down to 50%. If I'm misunderstanding SVMs, can someone explain this point? (or send some refs?) If I'm doing it wrong, can someone tell me the correct way to use the class.weights parameter? Could it possibly be a bug? (I think not, since I understand this software and the underlying libsvm to be quite mature)
