[site]: stackoverflow
[post_id]: 4595528
[parent_id]: 4586532
[tags]: 
I would argue BIRT is among the more data-agnostic tools out there. Any reporting tool is going to be data-centric; data are what you are trying to present to your users. BIRT (as you point out) has extensive support for both RBDMS and non-RDBMS sources (like POJOs). I think POJOs are a logical fit here given your application-driven data collection. The issue is not in accessing the data; BIRT can do this easily via a POJO (plenty of references to this at the BIRT Exchange ). The issue comes into play with how you then intend to use the data in the report itself. The most important dependency in the report's architecture is the ability for the various controls you are leveraging to communicate data to the user to apply the collected data in a meaningful way. The controls (charts, tables, etc...) care about two things: data types and column names (for access reasons). These two things are critical if a control is going to request an element from the data set and successfully apply it to the resulting canvas. The first issue of column names can be easily handled by creating generic column names and simply populating those columns from your POJO as the data set is assembled at run-time. There will need to be some consistency and logic as to how the columns are managed across the data set and component layers, but that is doable. You also cannot add columns to the data set at run-time, but you can try and architect a maximum number of columns at design time and populate what is needed at run-time. The second issue of data types can be a bit more limiting and requires more planning prior to implementation. If you were to name the first element in the data set Val1 (in keeping with the previous paragraph) and typed it as a string, it MUST remain a string each time you populate the data set or else you will see a run-time error. If you are not doing tons of calculations with the data, this can be overcome with data-type conversions as you translate the POJO into the data set at run-time. So there are ways to do what you are looking to do. The implementation requires a great deal of planning both for the structure of the data set and the layout of the controls that leverage the data set. Remember that every event in the report's life cycle can be overridden with scripting, giving you a lot of leverage and flexibility. Lastly, if you want to do all this at runtime, with a strongly-typed data set, you can. You will need to use the BIRT APIs to generate your reports with code. Anything you can do in the WYSIWYG Eclipse designer can be done with the extensive APIs in code. Check out BIRT Exchange for that as well. I would recommend looking into Report Libraries (another great feature of BIRT) to pull these complex items into a reusable portfolio so you only have to do a lot of this heavy lifting once.
