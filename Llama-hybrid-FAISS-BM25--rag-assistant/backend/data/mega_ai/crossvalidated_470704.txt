[site]: crossvalidated
[post_id]: 470704
[parent_id]: 457615
[tags]: 
If I understand your question correctly, you have mixed time-series and cross-sectional data, or in other words, panel/longitudinal data with time-constant features. There are a number of ways how to handle this type of data in supervised learning. You can Reduce the time series data to cross-sectional data by extracting features from the time series (using e.g. tsfresh ) or binning (e.g. treating each time point as a separate column, essentially ignoring that they are ordered in time), once you have purely cross-sectional data, you can directly apply regression algorithms like XGBoost's regressor; Apply a dedicated time series algorithm to the time-series data and ensemble it with some algorithm for the cross-sectional data; Use bespoke algorithms that can handle mixed data internally (I'm not aware of any algorithm that's available off-the-shelf, but it's certainly possible in principle to do that). We're developing a toolbox for exactly these use cases that extends scikit-learn to time series data, it's called sktime . For example, for the binning approach, you could write: from sktime.datasets import load_gunpoint from sktime.transformers.series_as_features.reduce import Tabularizer from sklearn.pipeline import make_pipeline from sklearn.model_selection import train_test_split from xgboost import XGBClassifier X, y = load_gunpoint(return_X_y=True) X_train, X_test, y_train, y_test = train_test_split(X, y) classifier = make_pipeline(Tabularizer(), XGBClassifier()) classifier.fit(X_train, y_train) classifier.score(X_test, y_test)
