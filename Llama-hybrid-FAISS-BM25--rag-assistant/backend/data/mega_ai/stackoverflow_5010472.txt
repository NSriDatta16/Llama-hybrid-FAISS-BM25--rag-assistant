[site]: stackoverflow
[post_id]: 5010472
[parent_id]: 5010216
[tags]: 
I don't think that there are general answers to your questions. I give one for C only, the rules for C++ are different. This depends a lot on the types of your constants. An important class are "integer constant expressions". These can be determined at compile time and in particular be used as values of "integer enumeration constants". Use that whenever you may enum { myFavoriteDimension = 55/2 }; For such constants the best thing should usually happen: they are realized as assembler immediates. They don't even have a storage location, are directly written into the assembler and your questions don't even make sense. For other data types the question is more delicate. Try to enforce that no address of your "const qualified variables" is taken. This can be done with the register keyword. register double const something = 5.7; may have the same effect as above. For composed types ( struct , union , arrays) there is no general answer or method. I have already seen that gcc is able to optimize small arrays (10 elements or so) completely.
