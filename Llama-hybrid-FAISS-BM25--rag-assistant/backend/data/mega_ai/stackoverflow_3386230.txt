[site]: stackoverflow
[post_id]: 3386230
[parent_id]: 3380096
[tags]: 
You can simplify the sorting algorithm by a great deal if you pre-process your array so that it will have a numeric representation of the column you want to sort by. Add a column to the table that contains the UTC equivalent of the dates for instance. Then you can safely sort the array by the UTC property, but you will still display the string value. for (var idx in _places) _places[idx].UTC = _places[idx].date ? new Date(_places[idx].date).UTC() : 0; _places.sort(function(a, b) { return a.UTC > b.UTC ? 1 : a.UTC If you don't want to use the Date object (pre-1970 dates): for (var idx in _places) { var row = _places[idx]; if (!row.date) { row.sortable = 0; continue; } var date = row.date.split('/'); row.sortable = 10000 * parseInt(date[2]) + 100 * parseInt(date[0]) + parseInt(date[1]); // year, month, day } _places.sort(function(a, b) { return a.sortable > b.sortable ? 1 : a.sortable Of course this assumes that your dates will always have the same M/D/Y format. Here's the above algorithm in action: http://jsfiddle.net/krNnn/
