[site]: stackoverflow
[post_id]: 5242769
[parent_id]: 5242601
[tags]: 
You can store the record properties into the DOM. For instance, you can do the following: //assuming you get your results via ajax/JSON search_filter = new Array(); $.ajax({ success: function(json) { for (var key in json) { search_filter.push(json[key]) //this loop might not be necessary depending on how json looks like } } }); //We define jRecords globally for performance gains, however, updates to the table are not registered var jRecords = $('table#relevant_table>tr'); $('input#search').bind('change', function() { var jExceptions = $; var this_value = $(this).val(); var size = jRecords.size(); for (var i=0; i this_value) { jExceptions.add(jRecords.eq(i)); }; } jRecords.not(jExceptions).hide(); jExceptions.show(); }) This showcases how you could use the DOM for filter storage and use that to filter the records via js. I tried to avoid lots of selectors and single actions to gain performance (since you are working with thousands of rows, it might be slow) and instead opted for searching the rows together and update them in one go. However, this example might still not be optimized for your specific task. I also have not tested if the example actually works, but I'm pretty confident it will (expect a few syntax errors though).
