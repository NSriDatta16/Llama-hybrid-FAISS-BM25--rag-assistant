[site]: crossvalidated
[post_id]: 467051
[parent_id]: 
[tags]: 
Light direction classifier

I have a dataset with light coming from 8 different directions, evenly distributed around the target object. I am looking into designing a classifier for determining the light direction. I tried looking at a CNN with a sequence of convolutional and pooling layers, followed by 2 dense layers. I've experimented with multiple number of layers (3-6) and various depths (one example would be something like 8, 16, 32, 64, all layers using 3x3 convolutions and 2x2 max pooling. I've been using Adam optimizer, with learning_rate=0.0001, beta_1=0.9, beta_2=0.999, epsilon=1e-07 (just examples, I've been trying to tweak these numbers a lot). This is the full Keras model: model = Sequential() model.add(Conv2D(8, kernel_size=(3, 3), activation='relu', input_shape=input_shape)) model.add(Conv2D(16, (3, 3), activation='relu')) model.add(MaxPooling2D(pool_size=(2, 2))) model.add(Conv2D(32, (3, 3), activation='relu')) model.add(MaxPooling2D(pool_size=(2, 2))) model.add(Conv2D(64, (3, 3), activation='relu')) model.add(MaxPooling2D(pool_size=(2, 2))) model.add(Dropout(0.25)) model.add(Flatten()) model.add(Dense(256, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(num_classes, activation='softmax')) The problem is that it converges quickly to 50% accuracy, and then the testing accuracy plateaus or slightly decreases, remaining around 45-50%, while the training accuracy keeps increasing. This happens only after about 20-50 epochs. I'm using a batch size of 16 in most experiments (cannot go much higher due to resource limitations). Any advice on improving the performance of this model or for solving this problem?
