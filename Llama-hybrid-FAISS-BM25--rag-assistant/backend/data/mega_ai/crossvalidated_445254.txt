[site]: crossvalidated
[post_id]: 445254
[parent_id]: 
[tags]: 
encoding categorical time series data with missing value

I am trying to pre-process (encode / normalize / standardize) my time series data where values are categorical and there exist, two types of nan values df = pd.DataFrame({'t1': ['a', 'a', np.nan], 't2': ['b', np.nan, 'b'], 't3': ['b', 'a', np.nan], 't4': ['c', 'c', np.nan]}, index=['u1', 'u2', 'u3']) df where rows are users and columns are time where users have done a set of activities, e.g. a , b or c Here we have two types of nan values u2 at time 2 or u3 after t2 - means the u2 was inactive u3 at time 1 - this user didn't existed - he has joined from t2 Does it really matter there are two different types of nan ? anyway, my goal is to use keras to build a sequence 2 sequence model. However, I am not sure about the processioning steps. Is there any need to normalize and / or standardize this data ? I read here , So you can assign zero to NaN elements, considering that zero is not used in your data (you can normalize the data to a range, say [1,2], and then assign zero to NaN elements; or alternatively, you can normalize all the values to be in range [0,1] and then use -1 instead of zero to replace NaN elements.) I wonder given the above answer, what is the best way to normalize and standardize the data. Based on my limited knowledge, I believe normalization in categorical setup doesn't make sense and approaches like one-hot-encoders are recommended. For example one can do pd.get_dummies(df,dummy_na=True) but I am not sure if this is the most recommended way.
