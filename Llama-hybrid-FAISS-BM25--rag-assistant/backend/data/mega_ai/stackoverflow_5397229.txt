[site]: stackoverflow
[post_id]: 5397229
[parent_id]: 5396471
[tags]: 
You probably want to read the file with something like: std::ifstream infile("yourfile.asm"); std::vector lines; std::copy(std::istream_iterator (infile), std::istream_iterator (), std::back_inserter(lines)); If you want to filter out everything that does not start with a '!' at the same time, that's fairly easy too: struct not_label { bool operator()(std::string const &line) { return line[0] != '!'; } }; std::remove_copy_if(std::istream_iterator (infile), std::istream_iterator (), std::back_inserter(lines), not_label()); Both of these use the line proxy I posted in a previous answer. Edit: Contrary to (apparently) popular belief, attempting to minimize re-allocations of std::vector is rarely worthwhile. In reality, the allocation strategy used by std::vector assures that (on average) there is a fixed maximum number of times that items in the vector are copied -- and that number is low enough to surprise most people (around 3 for a typical implementation). Especially when you're doing I/O at the same time anyway, optimizing the vector reallocation is usually fairly pointless -- if you really want to optimize something, the I/O is nearly always the part that deserves concentration.
