[site]: stackoverflow
[post_id]: 256274
[parent_id]: 256255
[tags]: 
You may probably want to try using it for yourself to be better able to see this, it may not be clear from the docs how Spring encourages interface use. Here are a couple of examples: Say you're writing a class that needs to read from a resource (e.g., file) that may be referenced in several ways (e.g., in classpath, absolute file path, as a URL etc). You'd want to define a org.springframework.core.io.Resource (interface) property on your class. Then in your Spring configuration file, you simply select the actual implementation class (e.g., org.springframework.core.io.ClassPathResource , org.springframework.core.io.FileSystemResource , org.springframework.core.io.UrlResource etc). Spring is basically functioning as an extremely generic factory. If you want to take advantage of Spring's AOP integration (for adding transaction interceptors for instance), you'll pretty much need to define interfaces. You define the interception points in your Spring configuration file, and Spring generates a proxy for you, based on your interface. These are examples I personally have experience with. I'm sure there are much more out there.
