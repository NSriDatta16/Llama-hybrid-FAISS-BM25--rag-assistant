[site]: crossvalidated
[post_id]: 236236
[parent_id]: 
[tags]: 
K Nearest Neighbor running-mean smoother

I am implementing a k-nearest neighbors KNN algorithm for a very simple question to see how it works. In textbooks it is mentioned like this: Suppose we have generated $10$ at random with $Y = \sin(4*X) + \epsilon$ with $X \sim \mathcal{U}(0,1)$ and $\epsilon \sim \mathcal{N}(0,1/3)$. Now a test set includes $X.TEST = cbind(seq(0.1,1,0.1))$ When I do $knn.predTest = knn(train = X.TRAIN , test = X.TEST , Y , k = 3)$ It should find for a test point $(x, y)$, the estimate $\hat{y} = \left(\sum_{i \in N_3(x)}x_i\right)/3$ but the plots do not show that. I have put the code here: X For example, I ran it and got this plot: It is clear that the $\hat{y}$ for $x = 0.1$ (the red circle), should be the average of $y$s at $0$, $0.02$, and $3.6$ but it does not seem to be their average, does it? (Unless I am making some silly mistake) The other important question is, if one runs the line, knn.predTest several times, can notice that each time the plots change but with test and train data fixed, isn't it supposed to produce the same prediction every time?
