[site]: stackoverflow
[post_id]: 3996488
[parent_id]: 3995593
[tags]: 
The short answer is that this cannot be done without manually creating the columns (and setting the DataPropertyName property) before binding. There is no attribute you can use to decorate your data source, the DataGridView will simply generate a DataGridViewTextBoxColumn for every data type (except Boolean which it will resolve to a checkbox column). This behaviour is internal and unchangeable. Your best bet is to disable AutoGenerateColumns on the grid and write your own method that dynamically generates appropriate column types, perhaps based on your own custom attribute, such as (from your example above): [DisplayName(@"Time"), ColumnType(typeof(DataGridViewButtonColumn))] public DateTime TimePosted { get; set; } The attribute class is easy to write (just extend Attribute , add a Type field and an appropriate constructor). In the method that will generate the columns (immediately before binding), you can use reflection to crawl for properties and check for the presence of the custom attribute. ( BindingSource.GetItemProperties() is very useful for obtaining information about the properties on objects in a collection.) This is not the most elegant solution (and it delves into some intermediate-level concepts), but it's the only way to get around this limitation with auto-generated columns in the DataGridView control.
