[site]: stackoverflow
[post_id]: 222676
[parent_id]: 
[tags]: 
Distributed Caching Help

I am trying to put some distributed caching into play, I'm using this indeXus.Net Shared Cache . It Requires that the object being cached is serializable, which it is here is the class object. [Serializable] public class Members { public Members() {} public Members(string aspnetusername, string aspnetpassword, string emailaddr,string location) : this(0,0,aspnetusername, aspnetpassword,emailaddr,DateTime.Now, location, 0,0,DateTime.Now,DateTime.Now,DateTime.Now,false) { } public Members(Int64? row,int memberid, string aspnetusername, string aspnetpassword, string emailaddr,DateTime datecreated, string location, int daimokugoal, int previewimageid, DateTime lastdaimoku, DateTime lastnotifed, DateTime lastactivitydate, bool isactivated) { this.Row = row; this.MemberID = memberid; this.Aspnetusername = aspnetusername; this.Aspnetpassword = aspnetpassword; this.EmailAddr = emailaddr; this.DateCreated = datecreated; this.Location = location; this.DaimokuGoal = daimokugoal; this.PreviewImageID = previewimageid; this.LastDaimoku = lastdaimoku; this.LastNotefied = lastnotifed; this.LastActivityDate = lastactivitydate; this.IsActivated = this.IsActivated; this.Details = new LazyList (); this.Blogs = new LazyList (); this.Daimoku = new LazyList (); this.Determinations = new LazyList (); this.Encouragements = new LazyList (); this.Entries = new LazyList (); this.Friends = new LazyList (); this.Stats = new LazyList (); } public Int64? Row { get; set; } public int MemberID { get; set; } public string Aspnetusername { get; set; } public string Aspnetpassword { get; set; } public string EmailAddr { get; set; } public DateTime DateCreated { get; set; } public string Location { get; set; } public int DaimokuGoal { get; set; } public int PreviewImageID { get; set; } public DateTime LastDaimoku { get; set; } public DateTime LastNotefied { get; set; } public DateTime LastActivityDate { get; set; } public bool IsActivated { get; set; } public LazyList Details { get; set; } public LazyList Blogs { get; set; } public LazyList Daimoku { get; set; } public LazyList Determinations { get; set; } public LazyList Encouragements { get; set; } public LazyList Entries { get; set; } public LazyList Friends { get; set; } public LazyList Stats { get; set; } } The LINQtoSql is this that populates this class. public IQueryable GetMemberInfo() { using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted })) { var results = from m in _datacontext.ViewMembers let details = GetMemberDetails(m.MemberID) let determinations = GetMemberDeterminations(m.MemberID) let daimoku = GetMemberDaimoku(m.MemberID) let entries = GetMemberEntries(m.MemberID) let blogs = GetMemberBlogs(m.MemberID) let encouragements = GetMemberEncouragements(m.MemberID) let friends = GetMemberFriends(m.MemberID) let points = GetMemberStats(m.MemberID) select new Members { Row = m.Row, MemberID = m.MemberID, Aspnetusername = m.Aspnetusername, Aspnetpassword = m.Aspnetpassword, EmailAddr = m.EmailAddr, DateCreated = m.DateCreated, Location = m.Location, DaimokuGoal = m.DaimokuGoal, PreviewImageID = m.PreviewImageID, LastDaimoku = m.LastDaimoku.Value, LastNotefied = m.LastNotefied.Value, LastActivityDate = m.LastActivityDate.Value, IsActivated = m.IsActivated, Details = new LazyList (details), Determinations = new LazyList (determinations), Daimoku = new LazyList (daimoku), Entries = new LazyList (entries), Blogs = new LazyList (blogs), Encouragements = new LazyList (encouragements), Friends = new LazyList (friends), Stats = new LazyList (points) }; return results; } } But for some reason I am getting this error System.Runtime.Serialization.SerializationException: Type 'System.Data.Linq.DataQuery`1[[DaimokuBeta.MVC.Data.MemberDetails, DaimokuBeta.MVC.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]' in Assembly 'System.Data.Linq, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' is not marked as serializable. MemberDetails is serializable too..so not sure why it thinks it can't be serialized Any ideas?
