[site]: stackoverflow
[post_id]: 2030332
[parent_id]: 2030132
[tags]: 
The reason why its not working is that when he hits events.Values.ToArray() not all of the queued delegates have executed and therefore not all AutoResetEvent instances have been added to the dictionary . When you call ToArray() on the Values property, you get only those ARE instances already added! This means you'll be waiting for only a few of the emails to be sent synchronously before the blocked thread continues. The rest of the emails have yet to be processed by the ThreadPool threads. There is a better way, but this is a hack it seems pointless to do something asynchronously when you want to block the calling thread in the end... var doneLol = new AutoResetEvent(); ThreadPool.QueueUserWorkItem( delegate { foreach (...) { var id = Guid.NewGuid(); var alert = HurrDurr.CreateAlert(...); alert.Send(); } doneLol.Set(); }); doneLol.WaitOne(); Okay, considering the following requirements: Console App Lots of emails Sent as fast as possible I'd create the following application: Load the emails from a text file (File.ReadAllLines). Next, create 2*(# of CPU cores) Threads. Determine the number of lines to be processed per thread; i.e., divide the number of lines (addy per line) by number of threads, rounding up. Next, set each thread the task of going through its list of addresses (use Skip(int).Take(int) to divvy up the lines) and Send()ing each email synchronously. Each thread would create and use its own SmtpClient. As each Thread completes, it increments an int stored in a shared location. When that int equals the number of threads, I know all threads have completed. The main console thread will continuously check this number for equality and Sleep() for a set length of time before checking it again. This sounds a bit kludgy, but it will work. You can tweak the number of threads to get the best throughput for an individual machine, and then extrapolate from that to determine the proper number of threads. There are definitely more elegant ways to block the console thread until complete, but none as simple.
