[site]: stackoverflow
[post_id]: 4431257
[parent_id]: 4379012
[tags]: 
We recently implemented something which we named "CSS compilation", which is something like what methodin has answered. Our compilation (done by the PHP backend) produces a single compiled css file for every module and thus a single CSS file is loaded at runtime. This gives us the liberty to define as many CSS files as we want without worrying about performance. For this we defined an array $moduleCssrelation containing module-CSS files relation in a config file of our project (module e.g. login, home etc. and the CSS files to be loaded for every module). Describing more details on that in the end because that is the core of the style-architecture. This is the basic CSS plan that we used:- Studied in detail all the modules noted style patterns/reusable components and saw that the header section, footer section and a left menu are needed in every module there are many modules which have a tabular display section of some lists at the center (leaving the common header,footer and left menu) and there are many modules which display some item details like user details page, class details page. We had all the styles in a single file delivered to us by a team of designers. Then we fragmented the single CSS file into a number of fragments as per the style patterns as studied in the previous step. So, we created some files like - common.css Containing header, footer, left menu styles listings.css Containing all the style definitions for components appearing only in the listing pages. details.css Like thedom has mentioned, if you have a .detailsRedHeading class which will be needed only in case of details pages, define it here. Any extra styles - suppose many modules need a popup with its style, then put those styles inside a popups.css instead of defining those styles in common.css or any other file. Remember the liberty we have to define as many css files as we want. For ease of later theme changes I have never applied your idea of "I've tried putting all layout (position, size, etc.) in 1 file while all decoration (color, background, etc.) in another", but if it helps you, you can add that to this architecture. Break common.css into common_layout.css , common_design.css and similarly for others. Also, make sure you do the maximum possible style reuse the first time. Avoid style declarations like this:- .listingsBody { font-family:Trebuchet MS,Liberation Sans,DejaVu Sans,sans-serif; font-size: 12px; .. some listing page styles .. } .detailsBody { font-family:Trebuchet MS,Liberation Sans,DejaVu Sans,sans-serif; font-size: 12px; .. some details page styles .. } Instead have this:- .siteMediumFont { font-family:Trebuchet MS,Liberation Sans,DejaVu Sans,sans-serif; font-size: 12px; } .detailsBody { .. some details page styles .. } .listingsBody { .. some listing page styles .. } I have seen that many designers do this. This habit in more complex cases can make things really difficult later. Details on compilation :- After we finish applying CSS changes, we run the compilation code which does the following:- $moduleCssrelation = array("class_details"=> array("details","popups")); Traverse the array $moduleCssrelation and create a compiled file from the contents of the css file names for every module. e.g. If the class_details module needs files details.css , popups.css , then it creates a file common-details-popups.css which will also be loaded for class_details as well as any other module needing these two css files.
