[site]: stackoverflow
[post_id]: 3670553
[parent_id]: 
[tags]: 
Connection Closed When trying to post over 1.5K of url encoded data on 8900, and maybe others

From the simulator, this all works. I'm using wifi on the device as i'm assuming it's the most stable. The problem occurs when i try to post more than 1.5K of urlencoded data. If i send less then it's fine. It seems to hang the .flush command(); It works on a physical 9700, so i'm presuming that it's possibly device specific In the example below i'm using form variables, but i've also tried posting the content type json, but still had the same issue I've written a small testapp, and using the main thread so i know that it's not threads getting confused If anyone has any ideas that would be great. private String PostEventsTest() { String returnValue = "Error"; HttpConnection hc = null; DataInputStream dis = null; DataOutputStream dos = null; StringBuffer messagebuffer = new StringBuffer(); URLEncodedPostData postValuePairs; try { postValuePairs = new URLEncodedPostData(null, false); postValuePairs.append("DATA",postData);// postData); hc = (HttpConnection) Connector.open(postURL, Connector.READ_WRITE); hc.setRequestMethod(HttpConnection.POST); hc.setRequestProperty("User-Agent", "BlackBerry"); hc.setRequestProperty("Content-Type", "application/x-www-form-urlencoded"); hc.setRequestProperty("Content-Length", Integer.toString(postValuePairs.getBytes().length)); //hc.setRequestProperty("Content-Length", Integer.toString(postData.length())); dos = hc.openDataOutputStream(); dos.write(postValuePairs.getBytes()); dos.flush(); dos.close(); // Retrieve the response back from the servlet dis = new DataInputStream(hc.openInputStream()); int ch; // Check the Content-Length first long len = hc.getLength(); if (len != -1) { for (int i = 0; i
