[site]: stackoverflow
[post_id]: 3144631
[parent_id]: 3144593
[tags]: 
Consider using an abstract base class with abstract or virtual members. Abstract members are essentially equivalent to interface members (they have no build-in behavior, they only guarantee the method exists) whereas virtual members have a default implementation which can be overridden by derived classes. Your question is really too vague to answer in full, but here's how you can leverage inheritance. If you want all classes to use the same implementation of a member then that member can be implemented in the base-class. If you want each class to have its own implementation of a member then you can either use a base-class with abstract members, or an interface. If you want some classes to use the same implementations and others to use different implementations then implementing the default behavior in the base-class and override it as needed. My main point is that OOP there is a spectrum of how much or little functionality is in base/abstract/concrete classes. There's no silver-bullet answer, sometimes your base classes will be skeletons and sometimes they'll be fully fleshed-out; it all depends on the specific problem at hand.
