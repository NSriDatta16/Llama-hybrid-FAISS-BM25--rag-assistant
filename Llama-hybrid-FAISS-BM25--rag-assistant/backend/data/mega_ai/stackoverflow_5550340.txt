[site]: stackoverflow
[post_id]: 5550340
[parent_id]: 5550286
[tags]: 
after status_items = models.StorageItem.objects .filter(client=client_id, itemstatushistory__isnull=False) .distinct().count() status_items will contain the count of items --> an int object using it in the template in {% for item in status_items %} will obviously generate an error. you can leave it without the count() and in the template access to the count like this: {{ status_items.count }} The template system will call status_items.count() for you. More infos here: rendering-a-context EDIT: @Shehzad009 : What I am trying to achieve, is to count all items that has their latest status not destroyed. Because of the one to many relationship, and because I want to count the latest statuses for each item only, it is a bit tricky you could define status_items like this: #storageItems where itemstatushistory__status != 'Destroyed' storage_items = models.StorageItem.objects .filter(client=client_id, itemstatushistory__isnull=False ) .distinct() # list of items with latest status != 'Destroyed' status_items = [item for item in storage_items if item.itemstatushistory_set.latest().description !='Destroyed'] # list of items with latest status not in ['Destroyed', 'Out'] status_items = [item for item in storage_items if item.itemstatushistory_set.latest().description not in ['Destroyed', 'Out']] then in the template: {# show items with latest status != destroyed #} {% for item in status_items %} {{ item }} {% endfor %} {# items with latest status != destroyed count #} {{ status_items|length }}
