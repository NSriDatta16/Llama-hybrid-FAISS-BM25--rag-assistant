[site]: stackoverflow
[post_id]: 3191125
[parent_id]: 
[tags]: 
Decorating arithmetic operators | should I be using a metaclass?

I'd like to implement an object, that bounds values within a given range after arithmetic operations have been applied to it. The code below works fine, but I'm pointlessly rewriting the methods. Surely there's a more elegant way of doing this. Is a metaclass the way to go? def check_range(_operator): def decorator1(instance,_val): value = _operator(instance,_val) if value > instance._upperbound: value = instance._upperbound if value " % (self.value) @check_range def __mul__(self, other): return self.value * other @check_range def __div__(self, other): return self.value / float(other) def __truediv__(self, other): return self.div(other) @check_range def __add__(self, other): return self.value + other @check_range def __sub__(self, other): return self.value - other
