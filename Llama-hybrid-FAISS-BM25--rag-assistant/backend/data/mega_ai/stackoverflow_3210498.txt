[site]: stackoverflow
[post_id]: 3210498
[parent_id]: 3179242
[tags]: 
We have been faced with the same problem in various organisations, where a team is not only working on multiple releases (like you are detailing in your example) but also where the team is involved in helping out the support organisation when customer issues are raised or when the User Acceptance Testing of previous releases, show issues that 'need to be dealt with' immediately. We therefore introduced a concept where issues are separated from tasks, but linked together using the 'issue linking' feature of JIRA. Issues (or specifications like we call them) are managed in a release project, while tasks are managed in a team project. The versioning in a release project denotes releases (i.e. 2.2-patch1, 1.1 ...) The versioning in a team project denotes sprints (sprint 10-15, sprint 10-20) The release project only contains bugs, feature requests, inquiries .. The team project only contains tasks, stories, ... Automation allows us to keep the specifications and related tasks in sync: The typical scenario runs as follows A specification is created in a release project. A support person creates one or more tasks in the team projects, and links the specification with the tasks using a 'is implemented by' link. From the moment that work is started on the task, the specification advances to a 'in development' state. The specification is considered resolved once that all related tasks have been addressed The transitions for the specifications are triggered automatically. This concept of separation between specification and task allow you to support many different project organisations - such as An epic which needs to be developed over a number of sprints. An issue which needs to be addressed by multiple teams in various locations A team which works on a new product and maintains an old. I can provide you more information on this subject if interested. Francis Martens
