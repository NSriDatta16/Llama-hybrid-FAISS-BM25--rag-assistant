[site]: stackoverflow
[post_id]: 2204432
[parent_id]: 2204157
[tags]: 
For one thing, you should rarely be typing the class name. You might have something like this: import DamnLongPackageNameThatIDontLikeTyping; class MyCoolClass() { DamnLongClassNameThatIDontLikeTyping dlc=new DamnLongClassNameThatIDontLikeTyping(); dlc.this(); dlc.that(); dlc.tOther(); dlc.damnLongAnnoyingMethodNameStillHasToBeTypedEveryTime(); } Okay, so that's not great, but you shouldn't be typing the entire class name very often, just when you first declare it; and the package import makes it so you don't have to type: DamnLongPackageNameThatIDontLikeTyping.DamnLongClassNameThatIDontLikeTyping every time. Still, that can be annoying to type. Enter the editor. If you aren't using Eclipse, Netbeans or IntelliJ then you really need to stop reading right now and go install it--load up your project. I'll wait.... Seriously. Go get it. The rest of this won't be any fun without it. Now, the really neat thing is that to get what I typed above, you just do this: class MyCoolClass() { DLC After typing that, your file will look like this: import DamnLongPackageNameThatIDontLikeTyping; class MyCoolClass() { DamnLongClassNameThatIDontLikeTyping Note that you didn't type damn long ANYTHING, just DLC It figured out what class you wanted to import, added an import for it and stuck the class in there. (You may have to choose from a list of classes if there is more than one match). On top of that, once you have an object named dlc instantiated you can type: dlc. and get a list of methods in that class. NEVER AGAIN TYPE A METHOD NAME. If there are a kagillion methods in your class, don't scroll over them, type: dlc.dLAM to get dlc.damnLongAnnoyingMethodNameStillHasToBeTypedEveryTime(); Never type a long method name again. No long method names, no long class names, no long package names. Yet you get extremely readable methods, packages and classes. This is why java programmers tend to use these long names, we also try to remember that we are coding for the next guy and don't want him to have to run all over our code trying to figure out what: g.m(); refers to -- forcing them to remember that in this class it means GreatClass.motion , but in the next class it means Grey.modifyColor -- that would be really cruel. Java being statically typed places a LOT of power into the editor. It can do things that you can't even dream of doing with dynamically typed languages, and you should play to the strength of your language to be an effective programmer -- not try to fit each language into some style you learned from using another language. Note that this works for static methods as well... DLC .dLM would be replaced by a call to DamnLongClass.damnLongMethod() , and it would even include the parens for you in 9 keystrokes.
