[site]: stackoverflow
[post_id]: 3628023
[parent_id]: 
[tags]: 
Verify that a URL maps to an actual route in ASP.Net MVC

To support legacy URLs in my application, I use a regex to convert URLs of the form /Repo/{ixRepo}/{sSlug}/{sAction} to the new form /Repo/{sName}/{sAction} , using the ixRepo to get the correct sName . This works well, and I can redirect the user to the new URL with a RedirectResult. However, I'd like to catch legacy URLs with an invalid action before I redirect the user. How can I verify if a URL string will map to a registered route? MVC clearly does this internally to map a request to the correct action, but I'd like to do it by hand. So far, I've come up with this: var rd = Url.RouteCollection.GetRouteData(new HttpContextWrapper(new HttpContext( new HttpRequest("", newPath, ""), new HttpResponse(null)))); which appears to always return a System.Web.Routing.RouteData , even for bad routes. I can't find a way to check if the route was accepted as a catch all, or if actually mapping to a route that's registered on the controller. How can I use MVC's routing system to check if a URL maps to a valid controller/action via a registered route? (I've seen ASP.NET MVC - Verify the Existence of a Route , but that's really inelegant. MVC has a routing system built in, and I'd like to use that.)
