[site]: stackoverflow
[post_id]: 1763411
[parent_id]: 
[tags]: 
Reactive Extensions (Rx) + MVVM =?

One of the main examples being used to explain the power of Reactive Extensions (Rx) is combining existing mouse events into a new 'event' representing deltas during mouse drag: var mouseMoves = from mm in mainCanvas.GetMouseMove() let location = mm.EventArgs.GetPosition(mainCanvas) select new { location.X, location.Y}; var mouseDiffs = mouseMoves .Skip(1) .Zip(mouseMoves, (l, r) => new {X1 = l.X, Y1 = l.Y, X2 = r.X, Y2 = r.Y}); var mouseDrag = from _ in mainCanvas.GetMouseLeftButtonDown() from md in mouseDiffs.Until( mainCanvas.GetMouseLeftButtonUp()) select md; Source: Matthew Podwysocki's Introduction to the Reactive Framework series . In MVVM I generally strive to keep my .xaml.cs file as empty as possible and one way of hooking up events from the view with commands in the viewmodel purely in markup is using a behavior: Source: Brian Genisio . The Reactive Framework seems to be more geared towards the traditional MVC pattern where a controller knows the view and can reference its events directly. But, I want to both have my cake and eat it! How would you combine these two patterns?
