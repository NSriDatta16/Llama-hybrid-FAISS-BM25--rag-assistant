[site]: datascience
[post_id]: 121852
[parent_id]: 121844
[tags]: 
So LinearRegression is essentially just trying to predict a line, y = mx + b. In your case, you’re feeding it y = [0,1,2,3,4,5,6,7,8,9], so once you’ve fit your model, when you call predict it’s going to return a very small number somewhere between 0 and 9 most likely. Then you feed this into timestamp and add 24 * 60 * 60, and interpret this as a date. Python (and other languages) interpret timestamp 0 as January 1st, 1970, so the timestamp you get back from LinearRegression is going to be somewhere in this neighborhood. It's entirely possible to use LinearRegression if you can formulate your problem as a line, i.e. y=mx+b, but I’d suggest an easier approach to get started. Instead of using LinearRegression, you can find the average differences between your last two times, add that to your last time, and use that as a first order prediction. A second order prediction would use the average of your last two differences, and so on. This would look something like the following: dates = [] dates.append(datetime.datetime(2004, 2, 4)) dates.append(datetime.datetime(2005, 3, 5)) dates.append(datetime.datetime(2006, 4, 6)) diff = dates[2].timestamp()- dates[1].timestamp() dates[2].timestamp() + diff datetime.datetime.fromtimestamp(dates[2].timestamp() + diff, tz=None) will return datetime.datetime(2007, 5, 7, 23, 0). Note that this is a very simplistic approach, there are a ton of more sophisticated ways to approach time series data (google SARIMAX for example), but should give you enough to get started. hth.
