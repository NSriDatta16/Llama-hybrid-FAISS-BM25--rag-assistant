[site]: stackoverflow
[post_id]: 5364755
[parent_id]: 
[tags]: 
Segmentation-fault error happening with Assembly code program

I keep getting a segmentation fault error when running my code. Everything has compiled well, but I can't seem to get it to do what I want. The program is to ask the user to enter 3 integers, then ask the user what they think the average of the numbers would be, take that into account and then come back with whether or not the user guessed correctly segment .data ; ; Output strings ; prompt1 db "Enter a positive integer: ", 0 prompt2 db "Enter a second positive integer: ", 0 prompt3 db "Enter a third positive integer: ", 0 prompt4 db "Enter a guess of their average: ", 0 outmsg1 db "You entered ", 0 outmsg2 db " and ", 0 outmsg3 db " and ", 0 outmsg4 db "You guessed that the average is ", 0 outmsg5 db "You did you guess correctly? (0 = no, 1 = yes)", 0 avermsg db "The average of the numbers is ", 0 segment .bss input1 resd 1 input2 resd 1 input3 resd 1 input4 resd 1 guess resd 1 segment .text Global main main: enter 0,0 ; setup routine pusha mov eax, prompt1 ; print out prompt1 call print_string call read_int ; read integer mov [input1], eax ; store integer into input1 mov eax, prompt2 ; print out prompt2 call print_string call read_int ; read integer mov [input2], eax ; store integer into input2 mov eax, prompt3 ; print out prompt3 call print_string call read_int ; read integer mov [input3], eax ; store integer into input3 mov eax, prompt4 ; print out prompt4 call print_string call read_int ; read integer mov [guess], eax mov eax, [input1] ; eax = dword at input1 add eax, [input2] ; eax += dword at input2 add eax, [input3] ; eax += dword at input3 mov ebx, 3 div ebx ; divides the sum by 3 mov ecx, eax ; freeing up eax, puts quotient into ecx dump_regs 1 ; print out register values ; next print out results mov eax, outmsg1 call print_string ; print out first message mov eax, [input1] call print_int mov eax, outmsg2 call print_string ; print out second message mov eax, [input2] call print_int mov eax, outmsg3 call print_string ; print out thrid message mov eax, [input3] call print_int mov eax, outmsg4 call print_string ; print out fourth message mov eax, [input4] call print_int xor ebx, ebx cmp ecx, [guess] sete bl neg ebx mov edx, ebx and ecx, edx not ebx and ebx, [guess] or edx, ebx mov eax, outmsg5 call print_string mov ecx, eax call print_int mov eax, [avermsg] call print_string ; print out final message mov ecx, edx call print_int ; print out average of ebx call print_nl ; print new line popa mov eax, 0 ; return back to C leave ret
