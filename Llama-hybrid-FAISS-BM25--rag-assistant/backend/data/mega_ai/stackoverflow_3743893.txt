[site]: stackoverflow
[post_id]: 3743893
[parent_id]: 
[tags]: 
selecting hash values by value property in ruby

In Ruby, I have a hash of objects. Each object has a type and a value. I am trying to design an efficient function that can get the average of the values of all of objects of a certain type within the hash. Here is an example of how this is currently implemented: #the hash is composed of a number of objects of class Robot (example name) class Robot attr_accessor :type, :value def initialize(type, value) @type = type @value = value end end #this is the hash that inclues the Robot objects hsh = { 56 => Robot.new(:x, 5), 21 => Robot.new(:x, 25), 45 => Robot.new(:x, 35), 31 => Robot.new(:y, 15), 0 => Robot.new(:y, 5) } #this is the part where I find the average total = 0 count = 0 hsh.each_value { |r| if r.type == :x #is there a better way to get only objects of type :x ? total += r.value count += 1 end } average = total / count So my question is: is there a better way to do this that does not involve looping through the entire hash? Note that I can't use the key values because there will be multiple objects with the same type in the same hash (and the key values are being used to signify something else already). If there is an easy way to do this with arrays, that would also work (since I can convert the hash to an array easily). Thanks! EDIT: fixed error in my code.
