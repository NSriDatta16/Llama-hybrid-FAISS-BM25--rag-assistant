[site]: stackoverflow
[post_id]: 670192
[parent_id]: 670167
[tags]: 
There's no right answer here, but most modern PHP systems for building web applications have some kind of Configuration object. This is often implemented as a singleton //brain dead config object class NamespaceConfiguration { public static function getInstance() { if (!self::$instance instanceof self) { self::$instance = new self; } return self::$instance; } public static function set($key,$value){ //code to set $key/$value paid } public static function get($key){ //code to get a $value based on a $key } } $config = NamespaceConfiguration::getInstance(); $config->set('myNumber',42); .... function somewhereElse(){ $config = NamespaceConfiguration::getInstance(); $myNumber = $config->set('myNumber'); } This class is loaded on every page requiest. This gives every developer a standard API to call when they want to get or set single configuration values, and allows a single developer to control the where of storage and the how of retrieval (which may be a flat file, XML file, memory cache, MySQL database, XML file stored in a MySQL Database, XML File stored in a MySQL Database that contains a node which points to a file that contains the value, etc.) The where and how of retrieval is going to depend on your application environment, although by using a configuration object you can create some efficiencies up front (storing already retrieved values in a property cache, pre-fetching certain values on instantiation, etc.)
