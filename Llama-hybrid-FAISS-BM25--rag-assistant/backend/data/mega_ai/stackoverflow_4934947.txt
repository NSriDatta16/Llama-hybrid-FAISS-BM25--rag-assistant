[site]: stackoverflow
[post_id]: 4934947
[parent_id]: 
[tags]: 
Linux fork/exec to application in same directory

Is there an exec variant that will use the current application directory to locate the target program? I am using C++ and Qt to implement a "last ditch" error reporting system. Using Google Breakpad , I can create a minidump and direct execution to a handler. Because my application is in an unstable state, I just want to fork and start a separate error handling process using minimal dependencies. The error reporting application will be deployed in the same directory as the application executable. I am quite unfamiliar with the fork and exec options, and am not finding an exec option that includes the current application directory in the search path. Here is what I have so far: static bool dumpCallback(const char* /*dump_path*/, const char* /*minidump_id*/, void* /*context*/, bool succeeded) { pid_t pid = fork(); if (pid == 0) { // This is what I would *like* to work. const char* error_reporter_path = "error_reporter"; // This works, but requires hard-coding the entire path, which seems lame, // and really isn't an option, given our deployment model. // // const char* error_reporter_path = "/path/to/app/error_reporter"; // This also works, but I don't like the dependency on QApplication at this // point, since the application is unstable. // // const char* error_reporter_path = // QString("%1/%2") // .arg(QApplication::applicationDirPath()) // .arg("error_reporter").toLatin1().constData(); execlp(error_reporter_path, error_reporter_path, (char *) 0); } return succeeded; } Any other suggestions on best practices for using fork and exec would be appreciated as well; this is my first introduction to using them. I'm only concerned about Linux (Ubuntu, Fedora) at this point; I will work on handlers for other operating systems later.
