[site]: stackoverflow
[post_id]: 1263105
[parent_id]: 1262906
[tags]: 
The dependency itself is not an expected behavior, but the actions called on the dependency most certainly are. You should test the stuff you (the caller) know about, and avoid testing the stuff that requires you to have intimate knowledge of the inner workings of the SUT. Expanding your example a little, lets imagine that our LinkStorageInterface has the following definition (Pseudo-Code): Interface LinkStorageInterface void WriteListToPersistentMedium(LinkList list) End Interface Now, since you (the caller) are providing the concrete implementation for that interface it is perfectly reasonable for you to test that WriteListToPersistentMedium() gets called when you invoke the Save() method on your LinkList . A test might look like this, again using pseudo-code: void ShouldSaveLinkListToPersistentMedium() define da = new MockLinkListStorage() define list = new LinkList(da) list.Save() Assert.Method(da.WriteListToPersistentMedium).WasCalledWith(list) end method You have tested expected behavior without testing implementation specific details of either your SUT, or your mock. What you want to avoid testing (mostly) are things like: Order in which methods were called Making a method, or property public just so you can check it Anything that does not directly involve the expected behavior you are testing Again, a dependency is something that you as the consumer of the class are providing, so you expect it to be used. Otherwise there is no point in having that dependency in the first place.
