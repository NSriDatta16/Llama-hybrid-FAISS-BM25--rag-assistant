[site]: crossvalidated
[post_id]: 586563
[parent_id]: 
[tags]: 
Do you refit the model after getting the best parameter from RandomizedSearchCV/GridSearchCV,?

I am reading a tutorial about RandomizedSerchCV here and I am still confused about what to do after getting the best parameter values. I hope that you could confirm my understanding. Here's the code referred from the blog post above from sklearn.model_selection import RandomizedSearchCV # Number of trees in random forest n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)] # Number of features to consider at every split max_features = ['auto', 'sqrt'] # Maximum number of levels in tree max_depth = [int(x) for x in np.linspace(10, 110, num = 11)] max_depth.append(None) # Minimum number of samples required to split a node min_samples_split = [2, 5, 10] # Minimum number of samples required at each leaf node min_samples_leaf = [1, 2, 4] # Method of selecting samples for training each tree bootstrap = [True, False] # Create the random grid random_grid = {'n_estimators': n_estimators, 'max_features': max_features, 'max_depth': max_depth, 'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf, 'bootstrap': bootstrap} pprint(random_grid) # Instantiate model with 1000 decision trees rfr = RandomForestRegressor() # Random search of parameters, using 3 fold cross validation, # search across 100 different combinations, and use all available cores rf_random = RandomizedSearchCV(estimator = rfr, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=0, n_jobs = -1) # Fit the random search model rf_random.fit(X_train, y_train()) After fitting the model, I've printed the best paramter rf_random.best_params_ and this is the result {'n_estimators': 400, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': 'sqrt', 'max_depth': None, 'bootstrap': False} My question is that, after getting the best parameters above, what do I have to do next between Option 1 : Use those parameters and refit the model again just like this. rfr = RandomForestRegressor(n_estimators = 400, min_samples_split = 2, min_samples_leaf = 1, max_features = 'sqrt', max_depth = None, bootstrap = False ) rfr.fit(X_train, y_train) pred_rfr = rfr.predict(X_test) OR Option 2 : I can just use .predict without having to do the whole process again pred_rfr = rf_random.predict(X_test) If both options are wrong, could you please guide me what to do next? Thank you so much for your kind answer.
