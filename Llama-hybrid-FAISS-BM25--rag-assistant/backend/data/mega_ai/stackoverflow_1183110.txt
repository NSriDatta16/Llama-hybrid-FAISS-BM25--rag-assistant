[site]: stackoverflow
[post_id]: 1183110
[parent_id]: 1183063
[tags]: 
The classic way to handle such a process is to treat the source code (input to the Perl filter) as a new language, with a new file suffix. You then tell make that the way to compile a C++ source file from this new file type is with the Perl script. For example: New suffix: .ccp New rule (assuming .cc suffix): .ccp.cc: ${FILTERSCRIPT} $ Add the new suffix to the suffix list - with priority over the normal C++ rules. The last point is the trickiest. If you just add the .ccp suffix to the list, then make won't really pay attention to changes in the .ccp file when the .cc file exists. You either have to remove the intermediate .cc file or ensure that .ccp appears before .cc in the suffixes list. (Note: if you write a ' .ccp.o ' rule without a ' .ccp.cc ' rule and don't ensure that that the ' .cc ' intermediate is cleaned up, then a rebuild after a compilation failure may mean that make only compiles the ' .cc ' file, which can be frustrating and confusing.) If changing the suffix is not an option, then write a compilation script that does the filtering and invokes the C++ compiler directly.
