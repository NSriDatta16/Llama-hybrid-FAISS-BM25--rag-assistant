[site]: datascience
[post_id]: 115969
[parent_id]: 
[tags]: 
How to properly use regression / tree based models for time-series data

Regression/tree-based models appear to treat each prediction as a memoryless process, namely given a feature vector $\hat{x}_i$ , predict $y_{i+1}$ , but previous states $\hat{x}_{i-1}$ , $\hat{x}_{i-2}, .. ,\hat{x}_0$ aren't accounted for. This is a problem for non-Markovian processes. One hack case is to attempt to mimic a Markovian process by adding features that are lagged versions of existing features, but more often than not this reduces the performance of the model, at least without serious feature engineering. Even if all the features are made to be perfectly stationary, it's not clear that the state/feature vector $\hat{x}_i$ holds enough information to accurately generate predictions for $y_{i+1}$ . What are the best practices to overcome these limitations? Are there other ways to model time-series data using regression/tree-based models that I'm not aware of?
