[site]: stackoverflow
[post_id]: 4751527
[parent_id]: 
[tags]: 
Which is fast : Query Syntax vs. Loops

The following code provides two approaches that generate pairs of integers whose sum is less than 100, and they're arranged in descending order based on their distance from (0,0). //approach 1 private static IEnumerable > ProduceIndices3() { var storage = new List >(); for (int x = 0; x (p2.Item1 * p2.Item1 + p2.Item2 * p2.Item2).CompareTo( p1.Item1 * p1.Item1 + p1.Item2 * p1.Item2)); return storage; } //approach 2 private static IEnumerable > QueryIndices3() { return from x in Enumerable.Range(0, 100) from y in Enumerable.Range(0, 100) where x + y This code is taken from the book Effective C# by Bill Wagner, Item 8. In the entire article, the author has focused more on the syntax, the compactness and the readability of the code, but paid very little attention to the performance, and almost didn't discuss it. So I basically want to know, which approach is faster? And what is usually better at performance (in general) : Query Syntax or Manual Loops? Please discuss them in detail, providing references if any. :-)
