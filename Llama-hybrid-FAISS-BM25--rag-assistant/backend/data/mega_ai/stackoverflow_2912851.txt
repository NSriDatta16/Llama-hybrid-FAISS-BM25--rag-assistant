[site]: stackoverflow
[post_id]: 2912851
[parent_id]: 
[tags]: 
What is the equivalent syntax in VB.NET for "yield return"?

Using the C# code below, how would you write it in Visual Basic? What is it trying to say? using System; using System.Collections.Generic; using System.IO; using System.Windows; using System.Windows.Media; using System.Windows.Media.Imaging; namespace Microsoft.LiveLabs.Pivot { /// /// Tile Builder class /// public static class TileBuilder { /// /// Specifies which images are required in the images array used in CreateTile /// according to the Morton fractal pattern used by Seadragon. /// /// /// Usage of this and CreateTile are kind of tricky. Here's an example: /// Say you have a results set that is a collection of items like so: { item1, item2, ..., item100 } /// Since Seadragon expects the tiles to be laid out in a Morton pattern, /// level 6 will look like the following: /// /// -------------------------- /// |0 1 4 5 | 16 17... /// |2 3 6 7 | 18 19 /// |8 9 12 13 | 24 25 /// |10 11 14 15 | 26 27 /// |----------------------- /// |32 33 36 37 | 48 49 /// |34 35 38 39 | 50 51... /// |. . /// |. . /// . . /// /// Each tile at level 6 is 4x4, so the dashes represent tile boundaries. Now, say /// you want to build 0,0. You need the images on that tile. The ids 0, 1, 4, 5... /// represent the ids in your result set, { item1, item2, ..., item100 }. Calling /// this method tells you the ids to use for a given tile. You then must retrieve /// the necessary images out the result set, and supply them in the order this /// method gave you to CreateTile. This will result in a correctly built tile /// that Seadragon can use. /// /// Number of images in the full set. /// The level to which each image will be downsampled. /// The row number which specifies what images to render. /// The row number which specifies what images to render. /// The size of the tile to return. public static IEnumerable GetTileIds( int imageCount, int level, int row, int column, int tileSize) { // Calculate upper-left hand corner of tile in image space (1 unit = 1 image) int levelSize = (int)Math.Pow(2, level); int imagePerSide = tileSize / levelSize; int xOffset = row * imagePerSide; int yOffset = column * imagePerSide; if (imagePerSide /// Create a tile for a collection according to the Morton fractal /// pattern used by Seadragon. /// /// /// See GetTileIds for more information. /// /// The total number of images in the collection. /// Jpeg images to render on this tile. /// If this is null, a blank tile will be returned. /// See GetTileIds remarks for more information. /// The level to which each image will be downsampled. /// The row number which specifies what images to render. /// The row number which specifies what images to render. /// The size of the tile to return. /// The stream to use to output the result. public static void CreateTile( int imageCount, IEnumerable images, int level, int row, int column, int tileSize, string fileType, Stream output) { // Calculate upper-left hand corner of tile in image space (1 unit = 1 image). int levelSize = (int)Math.Pow(2, level); int imagePerSide = tileSize / levelSize; int xOffset = row * imagePerSide; int yOffset = column * imagePerSide; if (imagePerSide imageEnumerator = images.GetEnumerator(); for (int x = 0; x /// Converts an x and y to a Morton number /// /// x location to convert. /// y location to convert. /// Returns the morton number which corresponds to the /// given x and y coordinates. private static int XYToMorton(int x, int y) { const uint BITS_PER_BYTE = 8; const uint BIT_PAIRS = sizeof(int) * BITS_PER_BYTE / 2; int morton = 0; for (int i = 0; i >= 1; y >>= 1; } return morton; } } }
