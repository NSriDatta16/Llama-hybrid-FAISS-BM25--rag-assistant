[site]: stackoverflow
[post_id]: 1249506
[parent_id]: 
[tags]: 
Alternatives to decorator pattern

I find decorator pattern to be most confusing. Please consider the example provided in "Head first design patterns book". So to get a DarkRoast with double mocha and a whip, you have to write Beverage beverage2 = new DarkRoast(); beverage2 = new Mocha(beverage2); beverage2 = new Mocha(beverage2); beverage2 = new Whip(beverage2); I feel this is unnecessary. Here is my implementation, interface Beverage { int Cost(); } class DarkRoast : Beverage { /* .... */ } class Mocha : Beverage { /* .... */ } class Whip : Beverage { /* .... */ } // here is the changed part class Order { List beverages = new List beverages(); public void AddItem(Beverage b) { beverages.Add(b); } public int Cost() { int cost; foreach(Beverage b in beverages) cost += b.Cost(); } } // use it like Order order = new Order(); order.AddItem(new DarkRoast()); order.AddItem(new Mocha()); order.AddItem(new Mocha()); order.AddItem(new Whip()); int cost = order.Cost(); IMO, both does same. If yes, what is the advantage of using decorator pattern here? Any thoughts?
