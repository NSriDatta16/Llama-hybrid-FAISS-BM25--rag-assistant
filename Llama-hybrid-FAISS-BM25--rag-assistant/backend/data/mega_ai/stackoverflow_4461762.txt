[site]: stackoverflow
[post_id]: 4461762
[parent_id]: 
[tags]: 
how to annotate a parent-child relationship with Code-First

When using the CTP 5 of Entity Framework code-first library (as announced here ) I'm trying to create a class that maps to a very simple hierarchy table. Here's the SQL that builds the table: CREATE TABLE [dbo].[People] ( Id uniqueidentifier not null primary key rowguidcol, Name nvarchar(50) not null, Parent uniqueidentifier null ) ALTER TABLE [dbo].[People] ADD CONSTRAINT [ParentOfPerson] FOREIGN KEY (Parent) REFERENCES People (Id) Here's the code that I would hope to have automatically mapped back to that table: class Person { public Guid Id { get; set; } public String Name { get; set; } public virtual Person Parent { get; set; } public virtual ICollection Children { get; set; } } class FamilyContext : DbContext { public DbSet People { get; set; } } I have the connectionstring setup in the app.config file as so: And finally I'm trying to use the class to add a parent and a child entity like this: static void Main(string[] args) { using (FamilyContext context = new FamilyContext()) { var fred = new Person { Id = Guid.NewGuid(), Name = "Fred" }; var pebbles = new Person { Id = Guid.NewGuid(), Name = "Pebbles", Parent = fred }; context.People.Add(fred); var rowCount = context.SaveChanges(); Console.WriteLine("rows added: {0}", rowCount); var population = from p in context.People select new { p.Name }; foreach (var person in population) Console.WriteLine(person); } } There is clearly something missing here. The exception that I get is: Invalid column name 'PersonId'. I understand the value of convention over configuration, and my team and I are thrilled at the prospect of ditching the edmx / designer nightmare --- but there doesn't seem to be a clear document on what the convention is. (We just lucked into the notion of plural table names, for singular class names) Some guidance on how to make this very simple example fall into place would be appreciated. UPDATE: Changing the column name in the People table from Parent to PersonId allows the Add of fred to proceed. Howerver you'll notice that pebbles is a added to the Children collection of fred and so I would have expected pebbles to be added to the database as well when Fred was added, but such was not the case. This is very simple model, so I'm more than a bit discouraged that there should be this much guess work involved in getting a couple rows into a database.
