[site]: stackoverflow
[post_id]: 1452399
[parent_id]: 1452084
[tags]: 
The way to go about this is to think of things from the COBOL programmer's perspective. This is a huge distance for them to traverse so putting out foot stools wherever possible to help them walk is paramount. Most COBOL programmers will have little or no desktop experience. The will have no OOP experience. Probably little or no networking. Etc. However, if they have written structured COBOL code they will have a very good feel for what a function is. Even though COBOL paragraphs aren't strictly the same as functions, most good COBOL programmers will grasp that notion quickly. Build on the structured programming concepts that have been drilled into them for 20 years. Structure leads to functions which leads to OOP. Most COBOL people with that much experience should have very good understanding of business logic. Use that. Get away from the bogus "squares and triangles are shapes" examples of OOP as soon as possible and make them focus on things they might already be very comfortable with - e.g. savings and checking are Accounts and they have these things in common...etc. They will certainly understand file based programs. Forget about fancy GUI stuff in the beginning. Make them write programs that mimic what they were doing in COBOL but eases them into OOP concepts. They understand records. Records are not very different from structs which are not very different from classes. And so on. Most COBOL programmers will understand transaction processing. Use that. It should provide a wealth of material to use in teaching OOP and many different APIs of .Net (or any other technology). Assign an experienced .Net developer as their mentor. Have him do code reviews, be available for advice, etc. Don't just throw a couple of books and a slew of new MS software at the COBOL people and expect them to swim. That's a prescription for disaster. They will need some hand holding and encouragement. But you might well find a couple of solid .Net people in that group a little down the line and keep your knowledge of current systems on board.
