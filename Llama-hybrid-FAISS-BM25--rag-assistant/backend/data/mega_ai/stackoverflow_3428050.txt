[site]: stackoverflow
[post_id]: 3428050
[parent_id]: 3427947
[tags]: 
You can't inherit an enum from another enum, although you can have your enum implement an interface. The technical problem (that all enums implicitly extend java.lang.Enum , thus they can't extend another class, only implement additional interfaces) is no accident: For the most part, extensibility of enums turns out to be a bad idea. It is confusing that elements of an extension type are instances of the base type and not vice versa. There is no good way to enumerate over all of the elements of a base type and its extension. Finally, extensibility would complicate many aspects of the design and implementation. From Effective Java 2nd Edition , Item 34. However, I don't fully understand your problem: haven't you used values() for iterating through your enum? Then you shouldn't worry about extending your enum with new values. Please specify more clearly what "broken" is supposed to mean. Update: so you need to have distinct sets of bands for different types of stars - this can be implemented using distinct enums extending a common interface, e.g.: interface Band { String getName(); void doStuff(); ... } enum BandsVI implements Band { V, I; public String getName() { return toString(); } public void doStuff() { /* do stuff as appropriate for these bands */ } ... } enum BandsJHK implements Band { J, H, K; public String getName() { return toString(); } public void doStuff() { /* do stuff as appropriate for these bands */ } ... } And you can use these by making your Star class generic: class Star & Band> { private Class bandType; public Star(Class bandType) { this.bandType = bandType; } public void printBandNames() { for (Band b : bandType.getEnumConstants()) System.out.println(b.getName()); } public void doStuffOnAllBands() { for (Band b : bandType.getEnumConstants()) b.doStuff(); } } ... Star star1 = new Star (BandsVI.class); Star star2 = new Star (BandsJHK.class); star1.printBandNames(); // prints V I star2.printBandNames(); // prints J H K This works nicely if the bands are organized into distinct groups. If there are stars with mixed band groups, however, you might prefer an alternative approach: class Star { private List bandTypes; public Star(List bandTypes) { this.bandTypes = bandTypes; } public void printBandNames() { for (Band b : bandTypes) System.out.println(b.getName()); } ... } ... Star star1 = new Star(Arrays.asList(BandsVI.values())); Star star3 = new Star(Arrays.asList(new Band[]{BandsVI.V, BandsVI.I, BandsJHK.K})); ... This allows you to set up stars with an arbitrary mix of bands. However, this way you can't use EnumSet or EnumMap on the bands.
