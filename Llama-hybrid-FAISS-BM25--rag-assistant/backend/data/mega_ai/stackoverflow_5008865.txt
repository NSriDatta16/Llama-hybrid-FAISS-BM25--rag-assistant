[site]: stackoverflow
[post_id]: 5008865
[parent_id]: 5008756
[tags]: 
There are a lot of ways to do this. I suggest that you get some open source frameworks, look at how they do things and decide on your preferences. Some techniques are considered "best practice", but a lot of a framework's structure boils down to developer preference. I have a framework I use for my own projects that is similar to what you describe, each of the smaller templates is termed as a "component". Each component is able to add any amount of javascript to itself using an addJS() method, likewise for css and html. A top-level controller loops through a given page's content (in terms of components). This give me a chance to have all the css, javascript, and html loaded ahead of time. Then, I can output them in whatever order I see fit. So: page controller handles request inits one or more components component load method populates html, javascript, and css class properties (arrays of file names, string for html) for itself components has its own set of templates, js, css outputs site-wide templates includes all component css within page header iterates through components, outputs component html, layout stuff outputs component JS for page footer I have a components folder, within it are folders for each component. Within each component folder is a php file (that component's handler), optionally one or more css/js files. This keeps everything organized nicely.
