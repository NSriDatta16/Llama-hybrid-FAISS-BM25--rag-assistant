[site]: stackoverflow
[post_id]: 3332131
[parent_id]: 3332102
[tags]: 
My initial reaction was to use LIMIT to restrict the average to 5 results, which led me to suggest: select a.host, avg(a.execution_time) from (select id, execution_time, host from jobs order by id desc limit 5) a group by a.host; But it is clear that this limits the average to the most recent 5 jobs, and not the most recent 5 jobs per host. It seems difficult to use LIMIT to restrict the average, without using some kind of stored procedure. This led me to consider assigning each job a per-host completion order, or position, using a mysql variable. This is untested, but the theory it illustrates should be a good starting point: First, we should assign each job a position based on its host: select host, execution_time, @current_pos := if (@current_host = host, @current_pos, 0) + 1 as position, @current_host := host from (select @current_host := null, @current_pos := 0) set_pos, jobs order by host, id desc; After establishing the position, just select the aggregate function, restricting results to the top 5 positions: select jt.host, avg(jt.execution_time) from ( select host, execution_time, @current_pos := if (@current_host = host, @current_pos, 0) + 1 as position, @current_host := host from (select @current_host := null, @current_pos := 0) set_pos, jobs order by host, id desc ) jt where jt.position Please let me know if this works for you, or if there are more aspects I have not considered. This is an intriguing problem.
