[site]: stackoverflow
[post_id]: 4105588
[parent_id]: 4105390
[tags]: 
You'll need to implement IDisposable correctly. Like the class below. using System.IO; /// /// Represents a temporary storage on file system. /// public sealed partial class TempStorage : IDisposable { #region Constructor private TempStorage() { } /// /// Initializes a new instance of the class. /// /// The path to use as temp storage. public TempStorage(string path) { this.Path = path; this.Clear(); this.Create(); } #endregion #region Properties private string Path { get; set; } #endregion #region Methods private void Create() { try { if (!Directory.Exists(this.Path)) { Directory.CreateDirectory(this.Path); } } catch (IOException) { } } public void Clear() { try { if (Directory.Exists(this.Path)) { Directory.Delete(this.Path, true); } } catch (IOException) { } } #endregion #region IDisposable /// /// An indicator whether this object is beeing actively disposed or not. /// private bool disposed; public void Dispose() { this.Dispose(true); GC.SuppressFinalize(this); } /// /// Throws an exception if something is tried to be done with an already disposed object. /// /// /// All public methods of the class must first call this. /// public void ThrowIfDisposed() { if (this.disposed) { throw new ObjectDisposedException(this.GetType().Name); } } /// /// Releases managed resources upon dispose. /// /// /// All managed resources must be released in this /// method, so after disposing this object no other /// object is beeing referenced by it anymore. /// private void ReleaseManagedResources() { this.Clear(); } /// /// Releases unmanaged resources upon dispose. /// /// /// All unmanaged resources must be released in this /// method, so after disposing this object no other /// object is beeing referenced by it anymore. /// private void ReleaseUnmanagedResources() { } private void Dispose(bool disposing) { if (!this.disposed) { /* Release unmanaged ressources */ this.ReleaseUnmanagedResources(); if (disposing) { /* Release managed ressources */ this.ReleaseManagedResources(); } /* Set indicator that this object is disposed */ this.disposed = true; } } #endregion } Then use the class inside a using-block in your main-method like this: using(TempStorage myStorage = new TempStorage("C:\temp") { // rest of the main method here... }
