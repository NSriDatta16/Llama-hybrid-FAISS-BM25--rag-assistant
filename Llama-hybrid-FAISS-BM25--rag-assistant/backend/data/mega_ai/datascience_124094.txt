[site]: datascience
[post_id]: 124094
[parent_id]: 
[tags]: 
Predicting a finite multi-set from a finite set given vector-valued data

I am unsure in how to approach this problem, which is a supervised learning task, and was looking for ideas on how to tackle it since I am kinda confused. Abstract description: I have a source set $S:=\{s_1, s_2,..., s_N\}$ of $N$ different objects. I am interested in the objects of each "event" $E$ , which is determined by a multiset $M(E)$ composed exclusively of elements from $S$ . Moreover, each event also has a few (~6) mixed-type properties (i.e. categorical and continuous), which will be defined in a property vector $\mathbf{v}(E)$ of event $E$ . My problem is, given some new event $E^*$ with known properties $\mathbf{v}(E^*)$ , can we predict the multi-set $M(E^*)$ based on the training data? The training data is composed of a bunch of events, their corresponding multi-set and property vector. All events draw the elements of their multi-set from the same source set $S$ , and it is not necessary that all elements of $S$ appear in a multi-set of some event. My first idea was, for each event $E$ , to transform its multiset into a graph, where each node corresponds to each element of the set $\mathbf{Set}(M(E))$ . Where $\mathbf{Set}$ is the functor that takes a multi-set and extracts a set containing all the elements of the multi-set (i.e. removes repetitions). Then, each node would have a value corresponding to the multiplicity of that element in the multi-set $M(E)$ . From here, I planned on embedding the graph into some embedding Euclidean vector space and use "non-graph" ML techniques, to see if I can try to reconstruct graphs based on the properties of the known events (assuming said properties do describe the phenomenon in question) in the embedding. Concrete example: As a concrete example, we can think of this as predicting what items a customer will purchase from a store based on its properties (age, sex, income, etc.). Where the event is a purchase, the multi-set represents the purchased items, and the connected nodes of the corresponding graph corresponds to the set of items purchased by a client. Is this a good approach or is it unnecessarily cumbersome? I am interested in predicting what nodes are a part of the resulting graph as well as the number of elements of each node based on the property vector of the event.
