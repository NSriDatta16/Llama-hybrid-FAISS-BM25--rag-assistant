[site]: stackoverflow
[post_id]: 1291965
[parent_id]: 1291870
[tags]: 
I will be paraphrasing from Effective C++ by Scott Meyers, which I have found to be the best advice I got: Adhere to the principle of least astonishment : strive to provide classes whose operators and functions have a natural syntax and an intuitive semantics. Preserve consistency with the behavior of the built-in types: when in doubt, do as the ints do. Recognize that anything somebody can do, they will do. They'll throw exceptions, they'll assign objects to themselves, they'll use objects before giving them values, they'll give objects values and never use them, they'll give them huge values, they'll give them tiny values, they'll give them null values. In general, if it will compile, somebody will do it. As a result, make your classes easy to use correctly and hard to use incorrectly . Accept that clients will make mistakes, and design your classes so you can prevent, detect, or correct such errors. Strive for portable code . It's not much harder to write portable programs than to write unportable ones, and only rarely will the difference in performance be significant enough to justify unportable constructs. Even programs designed for custom hardware often end up being ported, because stock hardware generally achieves an equivalent level of performance within a few years. Writing portable code allows you to switch platforms easily, to enlarge your client base, and to brag about supporting open systems. It also makes it easier to recover if you bet wrong in the operating system sweepstakes. Design your code so that when changes are necessary, the impact is localized . Encapsulate as much as you can; make implementation details private.
