[site]: stackoverflow
[post_id]: 2064592
[parent_id]: 2064550
[tags]: 
A boolean type normally follows the smallest unit of addressable memory of the target machine (i.e. usually the 8bits byte). Access to memory is always in "chunks" (multiple of words, this is for efficiency at the hardware level , bus transactions): a boolean bit cannot be addressed "alone" in most CPU systems. Of course, once the data is contained in a register , there are often specialized instructions to manipulate bits independently. For this reason, it is quite common to use techniques of "bit packing" in order to increase efficiency in using "boolean" base data types. A technique such as enum (in C) with power of 2 coding is a good example. The same sort of trick is found in most languages. Updated : Thanks to a excellent discussion, it was brought to my attention that sizeof(char)==1 by definition in C++. Hence, addressing of a "boolean" data type is pretty tied to the smallest unit of addressable memory (reinforces my point).
