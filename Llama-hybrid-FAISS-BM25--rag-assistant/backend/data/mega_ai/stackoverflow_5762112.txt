[site]: stackoverflow
[post_id]: 5762112
[parent_id]: 
[tags]: 
Android: circle drawing and touch event error

I am having an issue right now with drawing circles and handling touch events. Basically I am listening for touch events, which selects a circle and lets a user drag around to control the location/radius of the circle. I also have a menu option to "add a new circle" which changes the drag event to add a new circle to view. This keeps throwing a force close though when I test it. I do not know how to see what is causing the force close (sorry I am a newb who happens to be good at hacking things apart and making them work). Could someone please take a look at this, or point me in the direction of debugging this correctly? I think it might have something to do with the new circle being created inside the view that is currently in focus? If that makes any sense. Here is my code... initial values are coming from a previous activity (this is not where the problem lies though, the problem is in my TouchEventListener). /*this is the working example of playing audio * and adjusting the volume, although playback * is a bit choppy and the different sounds loose * sync after a bit */ package com.adam.PlaySound; import java.util.ArrayList; import java.util.Collections; import android.app.Activity; import android.content.Intent; import android.graphics.Color; import android.media.MediaPlayer; import android.net.Uri; import android.os.Bundle; import android.view.Menu; import android.view.MenuInflater; import android.view.MenuItem; import android.view.MotionEvent; import android.view.View; import android.view.View.OnTouchListener; import android.widget.AbsoluteLayout; import android.widget.TextView; @SuppressWarnings("deprecation") public class EditInterface extends Activity { /** Called when the activity is first created. */ /*do our web stuff*/ ConnectToUrl makeConnection = new ConnectToUrl(); TextView text; AbsoluteLayout circlesView; int numPlayers; ArrayList regionX = new ArrayList (); ArrayList regionY = new ArrayList (); ArrayList regionR = new ArrayList (); ArrayList soundFiles = new ArrayList (); ArrayList region = new ArrayList (); ArrayList border = new ArrayList (); MediaPlayer mediaPlayer = new MediaPlayer(); String key; int index; int actionState = 0; //We can be in one of these 3 states static final int NONE = 0; static final int DRAG = 1; static final int ZOOM = 2; int mode = NONE; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.edit); text = (TextView) findViewById(R.id.text); text.setText(""); circlesView = (AbsoluteLayout) findViewById(R.id.absoluteLayout1); circlesView.setOnTouchListener(Motion); Bundle extras = getIntent().getExtras(); if(extras != null) { numPlayers = extras.getInt("numPlayers"); } for (int i = 0; i distance = new ArrayList (); for (int i = 0; i (regionR.get(i) + 5)){ distance.add((float) 10000); } else { distance.add(distance(regionX.get(i), regionY.get(i), x1, y1)); } } Object object = Collections.min(distance); index = distance.indexOf(object); //for testing//text.setText("index: " + index); //set up sound String path = "http://soundclusters.adamlaskowitz.com/uploads/" + soundFiles.get(index); mediaPlayer = MediaPlayer.create(EditInterface.this, Uri.parse(path)); mediaPlayer.start(); region.get(index).setColor(true, Color.RED); region.get(index).invalidate(); border.get(index).setColor(false, Color.WHITE); border.get(index).invalidate(); } else if (actionState == 1){ region.add(new LoopRegion(EditInterface.this, x1, y1, 50 , true, Color.WHITE)); border.add(new LoopRegion(EditInterface.this, x1, y1, 50, false, Color.RED)); circlesView.addView(region.get(numPlayers)); circlesView.addView(border.get(numPlayers)); circlesView.clearFocus(); /////region.get(index).invalidate(); /////border.get(index).invalidate(); index = numPlayers; //since they are zero-indexed the previous //amount of Players will equal the index of the new larger array numPlayers = region.size(); text.setText("length:" + numPlayers + ", state:" + actionState); //text.setText("index:" + index + ", numPlayers:" + numPlayers + ", length:" + region.size()); } break; case MotionEvent.ACTION_POINTER_DOWN: /***initiate zoom***/ mode = ZOOM; //for testing//text.setText("action 2 down"); break; case MotionEvent.ACTION_UP: /***finish our current edit and deselect circle***/ mode = NONE; //for testing//text.setText("action up"); //stop and release current sound for region mediaPlayer.stop(); mediaPlayer.release(); region.get(index).setColor(true, Color.WHITE); region.get(index).invalidate(); border.get(index).setColor(false, Color.RED); border.get(index).invalidate(); actionState = 0; text.setText("index:" + index + ", state:" + actionState); break; case MotionEvent.ACTION_POINTER_UP: /***set mode Drag***/ mode = DRAG; //for testing//text.setText("action 2 up"); break; case MotionEvent.ACTION_MOVE: if (mode == DRAG){ /***Drag the circle based on radius***/ //for testing//text.setText("action move"); region.get(index).setCoordinate(x1, y1, regionR.get(index)); region.get(index).invalidate(); border.get(index).setCoordinate(x1, y1, regionR.get(index)); region.get(index).invalidate(); regionX.set(index, x1); regionY.set(index, y1); } else if (mode == ZOOM) { /***Zoom and move the circle***/ //for testing//text.setText("action 2 move"); regionR.set(index, distance(x1,y1,x2,y2)); float centerX = midpoint(x1,x2); float centerY = midpoint(y1,y2); float radius = regionR.get(index)/2; region.get(index).setCoordinate(centerX, centerY, radius); region.get(index).invalidate(); border.get(index).setCoordinate(centerX, centerY, radius); region.get(index).invalidate(); regionX.set(index, centerX); regionY.set(index, centerY); regionR.set(index, radius); } break; } return true; } }; //make our menu--------------------------------------------------------- @Override public boolean onCreateOptionsMenu(Menu menu) { MenuInflater inflater = getMenuInflater(); inflater.inflate(R.menu.edit_menu, menu); return true; } public float regionXNew[] = new float[numPlayers]; @Override public boolean onOptionsItemSelected(MenuItem item) { // Handle item selection switch (item.getItemId()) { case R.id.play: //return to the GraphicInterface---------------------------------------- Intent mIntent = new Intent(EditInterface.this, GraphicInterface.class); String num = Integer.toString(numPlayers); String xVal = ""; String yVal = ""; String rVal = ""; String files = ""; for (int i = 0; i Thank you for those who respond.
