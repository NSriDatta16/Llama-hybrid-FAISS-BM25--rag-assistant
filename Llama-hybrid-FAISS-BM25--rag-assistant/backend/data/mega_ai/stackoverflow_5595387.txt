[site]: stackoverflow
[post_id]: 5595387
[parent_id]: 5595048
[tags]: 
For that you need A data structure that holds all your json nodes on index and it should be accessible for all the activities you need [Reco: Use something like GlobalVariables or ConstantData where you have all your project properties and make it public static ]. Like : ConstantData.projectData which may be the arraylist or array that contains only Project objects Now from list view onItemClick method you will get an index ( position that denotes on which row its clicked), pass this on your single designed activity with help of bundles and extras. 2.Fetch the index in your desired activity. Fetch the project object on that index from ConstantData.projectData. Populate the UI components from your project object. By doing this you can inflate same view again and again only passing the index, only populating the list can be a heavy operation, but the rest will be quicker.... Edit : Let me provide you the snippets . for 1. on Main.java you use these line in itemClick methods Intent care = new Intent(Main.this, Organization.class); startActivity(care); Add this line between startActivity and Intent initialization. care.putExtra("yourPackageStructure.Organization.position",position); for 2. In Organization.java 2.1 create an integer member called mPosition[or the name you like] 2.2 in onCreate() method write mPosition = getIntent().getExtras().getInt("yourPackageStructure.Organization.position"); Project project = ConstantData.projectsData.get(mPosition); As I don't know how what is there in Organization.java and I wanted to say an array list or something that holds your Projects objects. Here is what you can have Organization.java 's onCreate method. onCreate(){ position = getIntent().getExtras().getInt("yourPackageStructure.Organization.position"); //Below line will get you the projects object Projects project = ConstantData.projectsList.itemAt(position); ImageView projectImage = (ImageView)findViewById(R.id.project_image); Bitmap image = getImageFromUrl(this,project.bigImageUrl); projectImage.setBitmapDrawable(image); TextView title = (TextView)findViewById(R.id.title); title.setText(project.title); TextView description = (TextView)findViewById(R.id.description); description .setText(project.description); } This is what i use for getImageFromUrl method public static Bitmap getImageFromUrl(Context context, String urlString) { try { if (haveInternet(context)) { URL url = new URL(urlString); HttpURLConnection conn = (HttpURLConnection) url .openConnection(); conn.setDoInput(true); conn.connect(); int length = conn.getContentLength(); InputStream is = conn.getInputStream(); Bitmap bmImg = BitmapFactory.decodeStream(is); return bmImg; } else { return null; } } catch (MalformedURLException e) { Log.e("Problem in image", e.toString(), e); e.printStackTrace(); } catch (Exception e) { Log.e("Problem in image", e.toString(), e); } return null; } This is the haveInternet Method private static boolean haveInternet(Context context) { NetworkInfo info = getNetworkInfo(context); if (info == null || !info.isConnected()) { return false; } if (info.isRoaming()) { // here is the roaming option you can change it if you want to // disable internet while roaming, just return false return true; } return true; } Hoping it helps you properly... Added ConstantData ConstantData.java public class ConstantData{ //All public static members will be here public static final long guid = A LONG VAL; public static String licenceText = A STRING VAL; //etc... etc... above members are just the idea that what kind of members can be there in //ConstantData... I normally use all public static properties here //Here is the variable you probably want public static ArrayList projectsList = new ArrayList (); } if you want to populate this array list you can do it from main.java check the lines for(Projects l : lst) { prjcts.add(l); } You can add or replace this line. ConstantData.projectsList.add(l); I recommend you to add the line rather to display the line.....
