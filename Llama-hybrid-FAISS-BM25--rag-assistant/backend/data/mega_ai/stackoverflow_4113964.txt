[site]: stackoverflow
[post_id]: 4113964
[parent_id]: 
[tags]: 
Two operations on an array of bits in C/C++

// b: uint32_t array of size n => 32*n bits // The bit index, i, is in the range 0 > 5] |= (1 > 5] &= (~(1 I'm looking for the most efficient, but still portable (across different targets, but only g++ compiler is used) way to implement these functions (especially the first one). Storage order of the bits (big, little endian or anything else) doesn't matter. Naive implementation (untested): uint32_t get_bit (uint32_t *b, unsigned n, unsigned i) { return b[i >> 5] & (1 Skipping all-1-elements: unsigned idx_of_first_zero_bit_before_or_at (uint32_t *b, unsigned n, unsigned i) { for (unsigned k = i >> 5; ~(b[k]) == 0; i = (--k
