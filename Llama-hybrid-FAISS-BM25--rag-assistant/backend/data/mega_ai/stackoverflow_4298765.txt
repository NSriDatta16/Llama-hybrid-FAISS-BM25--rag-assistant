[site]: stackoverflow
[post_id]: 4298765
[parent_id]: 4298686
[tags]: 
No problem. Many years ago, I spent a lot of time for this thing too. You can use Class.newInstance() only if you call default constructor. In all other cases you have to first find appropriate constructor by calling getConstructor() and the call its newInstance() . When you call getConstructor() use int.class , long.class , boolean.class , etc for primitives. If your class Foo has constructor Foo(int p) you have to say Constructor c = Foo.class.getConstructor(int.class); Once you have constructor call it using newInstance(): c.newInstance(12345); For multi-arguments constructor, say something like: `c.newInstance(new Object[] {12345, "foo", true})` Pay attention that we have a luck of autoboxing since java 5. For versions prior to 5, we had to use more verbose syntax: `c.newInstance(new Object[] {new Integer(12345), "foo", new Boolean(true)})` i.e. we used int.class to locate constructor and Integer type to call it. I hope this helps.
