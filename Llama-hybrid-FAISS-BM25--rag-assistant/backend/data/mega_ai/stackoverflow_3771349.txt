[site]: stackoverflow
[post_id]: 3771349
[parent_id]: 3770781
[tags]: 
Q: Why is a dog yellow? A: It's not necessarily. The size of a (an?) std::string object is implementation-dependent. I just checked MS VC++ 2010. It does indeed use 32 bytes for std::string. There is a 16 byte union that contains either the text of the string, if it will fit, or a pointer to heap storage for longer strings. If the implementers had chosen to keep 18 byte strings in the string object rather than on the heap, the size would be 34 bytes. The other 16 bytes comprise overhead, containing such things as the length of the string and the amount of memory currently allocated for the string. A different implementation might always allocate memory from the heap. Such an implementation would undoubtedly require less memory for the string object.
