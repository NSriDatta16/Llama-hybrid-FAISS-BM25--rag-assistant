[site]: stackoverflow
[post_id]: 3839812
[parent_id]: 3687113
[tags]: 
It sounds like you need to create a protocol for communicating between the 'bots and the PC. It could look something like this: Byte Value Description 1 0xAA First sync byte 2 0x55 Second sync byte 3 seq Message sequence number, increments for each new message transmitted 4 1 Message type (1 = Wheel encoder report) 5 5 Number of data bytes to follow 6 ID Bot ID 7 FL Front left wheel encoder 8 FR Front right wheel encoder 9 RL Rear left wheel encoder 10 RR Rear right wheel encoder 11 CS Checksum of bytes 1 - 10 Now if the messages are not sent in discrete packets (i.e. UDP), but asynchronously over a serial port, then the message bytes from different bots could become intermingled. The above protocol will at least verify the integrity of a received message, but the probability of receiving a valid message will decrease as the number of bots simultaneously transmitting to the PC increases. A method for solving the asynchronous problem involves embedding the bot ID in each byte transmitted. If there are no more than 16 bots, then their ID could be placed in the upper nibble of the transmit byte and 4-bits of data in the lower nibble. It would then require two transmit bytes to send one data byte: 0x1F + 0x13 = 0x3F from bot #1. This would double the size of your messages and require code on the receiving side to parcel the incoming data into separate receive queues for each bot.
