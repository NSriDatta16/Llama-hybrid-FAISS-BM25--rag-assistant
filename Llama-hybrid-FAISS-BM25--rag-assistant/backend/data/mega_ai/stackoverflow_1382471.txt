[site]: stackoverflow
[post_id]: 1382471
[parent_id]: 1382432
[tags]: 
Dependency Management : The build tools follow a component model that provides hints on where to look for dependencies. In Eclipse / Netbeans, you have to depend on a JAR and you don't really know if this JAR has been updated or not. With these build tools, they 'know' updates in dependencies (generally because of a good integration with your source control repository), recalculate transitive dependencies and ensure that everything is always built with the latest versions. Access Control : Java, apart from class level access control, has no higher abstraction. With these build tools you can specify exactly which projects you want to depend on you and control visibility and access at a higher level of granularity. Custom Control : The Eclipse / Netbeans build always builds JAR files. With custom build mechanisms, you could build your own custom (company-internal) archive with extra metadata information, if you so wish. Plugins : There are a variety of plugins that come with build tools which can do various things during build. From something basic like generating Javadocs to something more non-trivial like running tests and getting code coverage, static analysis, generation of reports, etc. Transport : Some build systems also manage transport of archives - from a development system to a deployment or production system. So, you can configure transport routes, schedules and such. Take a look at some continuous integration servers like CruiseControl or Hudson . Also, the features page of Maven provides some insight into what you want to know.
