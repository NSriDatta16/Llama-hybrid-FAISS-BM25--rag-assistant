[site]: crossvalidated
[post_id]: 534865
[parent_id]: 
[tags]: 
one-hot classify data depending on given classes

I'm trying to figure out if i can make a neural network that is able to match misspelled names together. So for example, Jon Smit and John Smith are probably the same person. I've already gotten the most simple implementation that i could think of running, which is a neural network that takes several stringdistance metrics between a dyad of names as input and outputs a 1 or 0 to determine whether it's a match or not. Here's an example of what my current network does: Take "Jon Smit" and "John Smith" Calculate the features (levenshtein distance, cosine distances, n-gram distances) The features will be something like (0.98, 0.95, 0.88, 0.78, 0.99) Run the model Output = 1, names are a match Or a negative example: Take "Jon Smit" and "Tom Holland jr." Calculate the features (levenshtein distance, cosine distances, n-gram distances) The features will be something like (0.25, 0.34, 0.18, 0.50, 0.23) Run the model Output = 0, names are not a match This implementation is severely limited. The biggest limitation for me is that the network can not decide a single most probable match if i give it a list of names to choose from . It can only say for each pair of names whether it's a yes or no. This makes it impossible for the network to tell me whether "Joan Lindberg" is referring to "Jonah Lindberg" or "Joanne Lindberg". It's easy to see that one is a better match than the other, but my network can only output a yes or a no. Is there a way to have a neural network decide on the best match, given a set of possibilities? edit: to clarify, this needs to work for any list of possibilities that is fed into the network. So essentially, i want a categorical model with a variable amount of categories.
