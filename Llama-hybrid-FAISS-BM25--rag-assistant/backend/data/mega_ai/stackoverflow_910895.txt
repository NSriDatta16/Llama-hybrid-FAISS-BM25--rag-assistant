[site]: stackoverflow
[post_id]: 910895
[parent_id]: 883305
[tags]: 
A survey of the literature should be a fine focus for a MS thesis. It sounds like you want to just talk about black-box GUI-driving customer-facing tools, which is a reasonably small niche. You /might/ want to have a page or two on the whole world of test tools - unit testing, security, load, etc, as someone mentioned above. But I think you targeted your niche pretty well. I would think with a 6-credit thesis you should have plenty of time to explore and try out some of the bigger commercial and open-source tools as well as survey the literature. I would encourage you to look into both commerical tools (quick test pro, test complete) and also keyword-driven automation - selenium RC, for example. Someone else mentioned testing "behind the GUI" eg FIT/Fitnesse, it might be worth discussing and evaluating. I cover black-box, functional test automation in my monthly column in the December 2008 issue of software test and performance magazine: http://www.stpmag.com/issues/stp-2008-12.pdf (page 7) That's the one page scratch-the-surface introduction. The five-sentence introduction is that screen record/playback tools compare everything, so if your GUI changes at all, in any way (even if you just change the screen resolution) that can come back as a false error. Keyword-driven tools only check what you tell them to check - they miss if a button is suddenly disabled for no good reason or an icon is not transparent. Only a human is good at checking that hidden assertion at the end of every test case "... and nothing else strange happened." So computer-based test execution and evaluation can have some value, but it should be part of a balanced breakfast. Other things to look into: James Bach's "Software Test Automation Snake Oil" Kaner, Bach and Pettichord's book "Lessons Learned in Software Testing" My blog post on test Frameworks - http://xndev.blogspot.com/2007/09/whats-test-framework.html (it's the number 4 google result for "what is a test framework", so I'm comfortable recommending it) The minefield analogy ( http://www.testingperspective.com/tpwiki/doku.php?id=minefield ) The papers of Doug Hoffman on test automation: http://www.softwarequalitymethods.com/H-Papers.html The classic "shelfware" problem of test automation The anti-intellectualism pushed by some proponents of the blackbox test automation community Kaner's Black Box Software Testing Course James Bach's work on /cognitive/ testing Context Driven Software Testing Jon Kohl's work on "Man and Machine", or the cyborg approach (instead of computer-alone test execution and evaluation) I hope that helps.
