[site]: stackoverflow
[post_id]: 3607000
[parent_id]: 
[tags]: 
Scala is a general-purpose programming language principally targeting the Java Virtual Machine. Designed to express common programming patterns in a concise, elegant, and type-safe way, it fuses both imperative-programming and functional-programming styles. Its key features are: Static typing Advanced type system with type inference and declaration-site variance Function types (including anonymous) which support lexical closures Pattern-matching Implicit parameters and conversions which support the typeclass and enrich-my-library patterns Mixin composition Full interoperability with Java Powerful concurrency constructs Advanced language constructs such as delimited continuations and an experimental macro system For more information, see the official Scala Introduction and Scala Documentation . To search for Scala symbols such as => in Stack Overflow, you can use symbolhound search . To search Scala documentation, you can use scalex . A community list of available libraries is available at Awesome Scala There is Scala Library Index by Scala Center: Scaladex . Free Scala programming books and guides Programming in Scala, First Edition Scala By Example (PDF) A Scala Tutorial for Java programmers Scala for Java refugees Scala School Scala Tutorials Scala Tour Scala for the Impatient (first part available for free at http://typesafe.com/resources/free-books ) Coursera Course - Functional Programming in Scala Scala Exercises Underscore books The Neophyte's Guide to Scala Stack Overflow Scala Tutorial Introduction to Scala What's so great about Scala? Variables/values Difference between val and var val-mutable versus var-immutable How to assign vals correctly? Multiple variable declarations Lazy vals What do they do? How are they implemented? Identifier rules Methods Equal sign in methods Operator notation and the rules Multiple ways to define a method/function ( leave parentheses in method calls ) Unary operators Multiple parameter lists Right-associative method names Side effect free methods Missing parentheses at methods Why no i++ in Scala? How to mix punctuation with alphanumeric characters in method names? Shortcut methods ( += , -= , *= , ...) List of "magic method" names ( apply , unapply/unapplySeq, update) Named arguments / optional parameters Type inference in return type Difference between ## and hashCode Literals, statements and blocks Difference between block and statement Weak conformance Symbols Difference between braces and parentheses Dereference keyword (backtick usage) Local definitions Uses of an underscore Identifier rules Punctuation (operator) overview Loops/recursion Loop Simple loop Break out of a loop How to call a function x times Tail recursion What is tail recursion? How to write tail recursive code? Performance Optimization rules Trampolining Data structures / Collections Collections design tutorial Collection standard practice Immutable Collections List Vector Range Tuple Map Set Mutable Collections Array and multi-dimensional Arrays Buffer How to use mutable Collections? Mutating a mutable collection using map? Lazy Collections Why are they needed? View Iterator Stream Streams vs Views vs Iterators Return a lazy collection Parallel Collections How do they work? Is it possible to change their behavior? Conversions Casting and ascription Java Collection to Scala Collection and vice versa Convert to another Collections breakout Memory footprint How are Scala collections able to return the correct collection type from an operation? For-comprehension Explanation nested for-expressions Use for inside expressions Enumeration Explanation Pattern matching Explanation Value binding ( x @ X ) / type binding ( x: X ) How to do a multi-match Guards How to match variables or values? How is pattern match implemented under the hood? Exhaustive pattern Pattern match in for-expressions Ignore cases / no default value Conjunction Pattern match PartialFunctions Match Regex Pattern matching with more than one match Classes, objects and types Difference between class and object Why is object a Singleton? Why are singleton objects more object-oriented? Companion objects Difference between class and type What's the difference between a class with a companion object and a class and object with the same name? Static initializer Constructor overloading Static data in non-objects How to get the static/runtime type of a class Type projection ( A#B ) Packages, imports and visibility identifiers Imports Multiple imports / import renames / hide imports Shorthand imports Local imports Packages Nested packages / multiple package definitions Package objects Visibility Explanation Private constructors Private variables Inheritance Explanation Early initializer Extractors Explanation (Example: conjunctions ) Infix notation for type parameters ( X[A, B] => A X B ) Case classes Explanation case classes vs. enums What are the disadvantages to declaring Scala case classes Compiler generated code for case classes Parameterized types How to declare them? Upper / lower bounds Unify numerics How to get around type erasure? Abstract Types vs Generics Variances Traits Usage Mixin multiple traits Traits vs abstract classes What does trait A mean? Linearization Mixin a trait with overridden behavior Dynamic mixins How are they implemented under the hood? How to access one of multiple traits of superclass? Self references Unify types Self reference naming Multiple self references Difference between self references and subtyping Error handling Exceptions Explanation Stand-alone try block Ignore an exception Try-catch-generalization Option Explanation Either Explanation How to use them? What to use? Type handling Context ( [A : B] ) and view bounds ( [A ) Types Non-Nullable type Existential type Structural type ("duck typing") Path-dependent type Union types (type disjunction) Monad type Compound type in structural type Compound type in self references Compound type in parameterized type Advantages of Scala's type system Annotations What are they? How to use them? Functions/Function literals Explanation Functions vs methods Pass functions Currying PartialFunction Placeholder syntax and their replacement rules Placeholder syntax with right-associative methods Difference between => Type , () => Type and Unit => Type Functional Quicksort Keyword return in higher order functions and performance problem with that Function composition Closures in Scala Type safety Manifest Explanation How do they work? Are Manifests possible in constructors? Generalized Type Constraints ( , , =:= ) Path-Dependent Types Enforce type difference Enforce no type bounds Implicits Implicit definitions / parameters Implicit conversions / Monkey patching Identifier implicitly Where does Scala look for implicits? Should implicits used? Style of implicits Convert multiple values with one implicit conversion Chaining implicits Reflection What is a TypeTag and how do I use it? How to work with Reflection? Enrich-my-library pattern (formerly known as pimp-my-library) Explanation CanBuildFrom Returning original types while extending the Collection API Concurrency overview Actors Differences between Actor implementations Design Patterns Worst practices Use Java from Scala and vice versa Iterate over Java collection Migrate Java to Scala Transparent conversions useful? Using Scala traits with implemented methods in Java How to work with javap for Scala/Java interop? Scala signatures How does abstract override work internally? XML literals Explanation Scala Swing Explanation Examples Type Programming Overview Functional Scala Is immutability expensive? Is Scala functional programming slower than traditional coding? OOP in a purely FP context? Continuations Explanation How to activate them? Design patterns for functional-oo hybrid languages? Type programming Higher kinded types Type lambdas ( SomeType[({type λ[α] = Either[A, α]})#λ] ) Virtual Classes forall in Scala Understanding for comprehension in Scala Further learning Learning Resources How can I learn more about Scala's type relationships? Scala Cheat Sheet Good examples of idiomatic scala code? Solidifying Scala knowledge REPL How does it work behind the scenes? Working with scalac and scala Show syntax trees Meaning of !# (bang-pound) in a shell script? Operator precedence Specification rules Actual scalac precedence implementation Understanding precedence rules in practice Scala style Scala Style Guide Elements of Scala Style Effective Scala Strategic Scala Style Functional Programming Principles in Scala , a functional programming course on Coursera taught by Martin Odersky, the creator of Scala. Principles of Reactive Programming , a reactive functional programming course on Coursera taught by Martin Odersky, Erik Meijer, Roland Kuhn. Parallel Programming , a parallel programming course on Coursera taught by Viktor Kuncak and Aleksandar Prokopec.
