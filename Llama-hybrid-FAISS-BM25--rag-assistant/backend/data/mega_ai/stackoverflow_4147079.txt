[site]: stackoverflow
[post_id]: 4147079
[parent_id]: 4146540
[tags]: 
You could leverage JAXBIntrospector to do the following: import javax.xml.bind.JAXBContext; import javax.xml.bind.JAXBElement; import javax.xml.bind.JAXBIntrospector; import javax.xml.bind.Marshaller; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.namespace.QName; public class Demo { public static void main(String[] args) throws Exception { Object value = "Hello World"; //Object value = new Bar(); JAXBContext jc = JAXBContext.newInstance(String.class, Bar.class); JAXBIntrospector introspector = jc.createJAXBIntrospector(); Marshaller marshaller = jc.createMarshaller(); if(null == introspector.getElementName(value)) { JAXBElement jaxbElement = new JAXBElement(new QName("ROOT"), Object.class, value); marshaller.marshal(jaxbElement, System.out); } else { marshaller.marshal(value, System.out); } } @XmlRootElement public static class Bar { } } With the above code when the JAXBElement is marshalled it will be qualified with an xsi:type attribute corresponding to the appropriate schema type: Hello World To eliminate the qualification you can simply change the line that creates the JAXBElement to: JAXBElement jaxbElement = new JAXBElement(new QName("ROOT"), value.getClass(), value); This will result in the following XML: Hello World
