[site]: datascience
[post_id]: 18330
[parent_id]: 18325
[tags]: 
If you are able to use python at all, I'd look into using a recurrent neural network variant such as LSTM or GRU to forecast their future timestamps. Chris Olah wrote a really nice blog post on LSTM / Recurrent nets http://colah.github.io/posts/2015-08-Understanding-LSTMs/ Using the python library Keras, it is actually very easy to code an LSTM network. The general "Sequential" model (most straighforward / basic model type) is described here: https://keras.io/getting-started/sequential-model-guide/ Your model could be made through the sequential model type, using recurrent layers instead of Dense ones. The only thing is your inputs need to be shaped correctly, so you'll be dealing with a 3D tensor (3d numpy array) for the time series input, where [N,T,K] is the shape of the tensor: N= # of samples, T = # of timesteps in the input and K = # of variables. You will probably have to zero pad / mask the timesteps for uneven sequences as well, which is fairly easy to do. Recurrent / LSTM / GRU layers in Keras are described on this page: https://keras.io/layers/recurrent/ Best of luck! If this is too much then I guess you can just work with time series models. But reccurrent nets have been known to perform incredibly with an array of temporal problems / prediction.
