[site]: stackoverflow
[post_id]: 1709480
[parent_id]: 1708878
[tags]: 
There are minor enhancements (bug fixes) I'd definitely do. In particular, getattr called with two arguments raises an ArgumentError if the attribute's not present, so you could get that exception if you were comparing two instances with different keys. You could just call it with three args instead (the third one is returned as the default value when the attribute is not present) -- just don't use None as the third arg in this case since it's what you normally have as the value (use a sentinel value as the third arg). __str__ is not allowed to return a dict: it must return a string. __eq__ between non-comparable objects should not raise -- it should return False. Bugs apart, you can get the object's state very compactly with self.__dict__ , or more elegantly with vars(self) (you can't reassign the whole dict with the latter syntax, though). This bit of knowledge lets you redo your class entirely, in a higher-level-of-abstraction way -- more compact and expeditious: class person(object): def __init__(self, keys): self.__dict__ = dict.fromkeys(keys) def __str__(self): return str(vars(self)) def __eq__(self, other): return isinstance(other, person) and vars(self) == vars(other)
