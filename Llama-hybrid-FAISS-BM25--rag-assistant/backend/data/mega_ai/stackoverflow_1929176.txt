[site]: stackoverflow
[post_id]: 1929176
[parent_id]: 1929141
[tags]: 
Because in your setter, you are calling ... the setter , which goes to the setter, and calls ... the setter ... and ... set { albums = value; // What you need to do is just use the the Session["albums"] as the persistent storage for the value... You don't need a private field - that's just creating a redundant copy of the value. Eliminate it entirely, and just put... private List Albums { get { if (Session["albums"] != null) return (List ) Session["albums"]; else return (Session["albums"] = AlbumCollection.GetAlbums()); } set { Session["albums"] = value; } } In certain scenarios where you do not have a persistent store, it's perfectly acceptable for a public property to have just a private member backing field. For more info on C# properties in general, check out the MSDN tutorial .
