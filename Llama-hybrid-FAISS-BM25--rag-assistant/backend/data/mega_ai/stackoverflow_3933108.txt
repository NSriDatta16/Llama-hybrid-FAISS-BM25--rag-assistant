[site]: stackoverflow
[post_id]: 3933108
[parent_id]: 
[tags]: 
Cancel a Java Webstart custom download

when you download a resource in a Java Webstart application there's usually a download progress window displayed which shows the progress of the download. If this window is the default progress window, it has a cancel button. I'm basically trying to implement this cancel button in a custom download progress window. As there is no method which you could call to cancel the download, I tried to find out how this was done in the default progress window. Because of the implementation with a ServiceManager it's a bit tricky to find the actual implementation. But I finally found this: [jdk-source on googlecode (DownloadServiceImpl)] . When you search for "cancel" or just scroll down to the progress method you will see that it should be as easy as throwing a RuntimeException. Sadly this doesn't really work. It just stops the progress method from being called. The resource is still downloaded in the background and the loadPart method never returns. If you want to try this for yourself, I've prepared a small example. You will need some sort of webserver though (a local webserver is sufficient of course). I have tried this on a Windows XP (32 bit) with Java 1.6.0_21 (and apache tomcat 6). A simple jnlp file would look like this (you probably want to change the port): DownloadTest Download Tester Next you will need a large file as resource (the content doesn't matter at all). For example on many windows machines you you will find "driver.cab" under "Windows\Driver Cache\i386". The file must be added to a jar archive ( jar -cf largeResource.jar ). The main program looks like this (you will need to include jnlp.jar as lib, which you can find at \sample\jnlp\servlet ): package downloadtest; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.io.IOException; import javax.jnlp.DownloadService; import javax.jnlp.DownloadServiceListener; import javax.jnlp.ServiceManager; import javax.jnlp.UnavailableServiceException; import javax.swing.JButton; import javax.swing.JDialog; import javax.swing.JFrame; import javax.swing.SwingWorker; public class Main { private static DownloadService downloadService; private static DownloadServiceListener customDownloadWindow; static { try { downloadService = (DownloadService) ServiceManager.lookup("javax.jnlp.DownloadService"); } catch (UnavailableServiceException ex) { System.err.println("DownloadService not available."); } customDownloadWindow = new CustomProgress(); } public static void main(String[] args) { JFrame frame = new JFrame("DownloadTest"); frame.setBounds(0, 0, 200, 100); frame.setDefaultCloseOperation(JDialog.EXIT_ON_CLOSE); frame.setLayout(null); JButton startDownload = new JButton("download"); startDownload.setBounds(20, 20, 150, 40); startDownload.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { new SwingWorker () { @Override protected Void doInBackground() { try { downloadService.loadPart("One", customDownloadWindow); //downloadService.loadPart("One", downloadService.getDefaultProgressWindow()); } catch (IOException ex) { ex.printStackTrace(); System.err.println("IOException loadPart."); } return null; } }.execute(); } }); frame.add(startDownload); frame.setVisible(true); } } You can try each download progress window by uncommenting one "downloadService.loadPart..." line and commenting out the other one. And finally the custom progress window itself: package downloadtest; import java.awt.BorderLayout; import java.awt.Color; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.net.URL; import javax.jnlp.DownloadServiceListener; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JProgressBar; import javax.swing.SwingUtilities; public class CustomProgress implements DownloadServiceListener { JFrame frame = null; JProgressBar progressBar = null; boolean uiCreated = false; boolean canceled = false; public CustomProgress() { } private void create() { JPanel top = createComponents(); frame = new JFrame(); // top level custom progress indicator UI frame.getContentPane().add(top, BorderLayout.CENTER); frame.setBounds(300,300,400,300); frame.pack(); updateProgressUI(0); } private JPanel createComponents() { JPanel top = new JPanel(); top.setBackground(Color.WHITE); top.setLayout(new BorderLayout(20, 20)); String lblText = " JDK Documentation " + " The one-stop shop for Java enlightenment! "; JLabel lbl = new JLabel(lblText); top.add(lbl, BorderLayout.NORTH); progressBar = new JProgressBar(0, 100); progressBar.setValue(0); progressBar.setStringPainted(true); top.add(progressBar, BorderLayout.CENTER); JButton cancelButton = new JButton("Cancel"); cancelButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { CustomProgress.this.canceled = true; } }); top.add(cancelButton, BorderLayout.SOUTH); return top; } public void progress(URL url, String version, long readSoFar, long total, int overallPercent) { updateProgressUI(overallPercent); } public void upgradingArchive(java.net.URL url, java.lang.String version, int patchPercent, int overallPercent) { updateProgressUI(overallPercent); } public void validating(java.net.URL url, java.lang.String version, long entry, long total, int overallPercent) { updateProgressUI(overallPercent); } public void downloadFailed(URL url, String string) { System.err.println("Download failed"); } private void updateProgressUI(int overallPercent) { if (overallPercent > 0 && overallPercent 0 and This is basically taken from an Oracle tutorial (http://download.oracle.com/javase/tutorial/deployment/webstart/customProgressIndicatorForAppln.html). I just added a cancel button. When you build this as a jar file and put it together with the largeResource.jar and DownloadTest.jnlp in a public folder of your webserver, you should be able to start the application via your web browser. Then click the download button and before it is finished click the cancel button in the download window. After trying the custom progress window you will need to remove the application (or just the resource) from your Java cache (because the resource is downloaded in the background regardless of clicking the cancel button). So, why is this working with the default progress window but not with the custom progress window? Is there an easy possibility to cancel a download with a custom download window? Any help or hints appreciated. Drax
