[site]: stackoverflow
[post_id]: 4160022
[parent_id]: 4159943
[tags]: 
I suggest that you check out this link . It's quite useful and contains very simple examples about Parameter passing in C# . Reference parameters don't pass the values of the variables used in the function member invocation - they use the variables themselves. Rather than creating a new storage location for the variable in the function member declaration, the same storage location is used , so the value of the variable in the function member and the value of the reference parameter will always be the same. Reference parameters need the ref modifier as part of both the declaration and the invocation - that means it's always clear when you're passing something by reference. Let's look at our previous examples, just changing the parameter to be a reference parameter: void Foo (ref StringBuilder x) { x = null; } ... StringBuilder y = new StringBuilder(); y.Append ("hello"); Foo (ref y); Console.WriteLine (y==null); // will write TRUE IN YOUR EXAMPLE int[] myArray = {1,2,3}; PassByVal(myArray); PassByRef(ref myArray); PassByVal(int[] array){ // the function copy the value of the pointer in a new location of memory // the "copied" pointer still points to the array 123 // now you are modifying the object pointed by THE COPY of the pointer // the original pointer still points to array 123 // the copy of the pointer will point to array 456 array = new int[] {7,8,9}; } // will not work PassByRef(ref int[] array){ // here you are passing the pointer without creating a copy of it in a // new location of memory // we have not a original pointer and a "copyed" pointer // we have only the original pointer and now whe point it to array 10,11,12 array = new int[] {10,11,12}; } // will work
