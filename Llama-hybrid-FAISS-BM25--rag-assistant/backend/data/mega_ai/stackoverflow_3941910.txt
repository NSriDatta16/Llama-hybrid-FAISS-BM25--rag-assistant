[site]: stackoverflow
[post_id]: 3941910
[parent_id]: 3938055
[tags]: 
Another solution that takes into account the "recalculation" of the median : test2 Now think about it for a second. You have three options : You have an even number of cases, and the median is defined as the average of the two middle cases. If these two are not equal to eachother, then no value is equal to the median. You have an odd number of cases, so the median is equal to 1 value in the data. If you remove that one, you have an even number of cases and you're back at case 1. You have a series of values equal to the median. You will end up with an even number of cases, of which the two middle ones are different. One is lower than the previous calculated median, one is higher. So you're back to case 1. So in fact, if you're really interested in the difference with the median, you can use my code. If you only want to know whether it's fast or slow, then you don't even have to recalculate the median. After removing the necessary values, cases that were higher/lower than the old median will still be higher/lower than the new median. So basically, although James' and John's code technically doesn't do what you asked, it doesn't make a difference. In fact, it makes it easier to reconstruct the dataframe afterwards. THe only case in which this doesn't function any more, is when you have 1 value left (that will be the median then, and should be removed so there is theoretically no result - see subject 1 in rt1), or when all values are equal (in that case, all values get removed and -again- there is no result.)
