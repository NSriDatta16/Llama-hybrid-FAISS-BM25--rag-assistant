[site]: stackoverflow
[post_id]: 4775203
[parent_id]: 
[tags]: 
Best sorting algorithm for sorting structs with byte comparisons?

I have an array of 64 structs that hold a decent amount of data (struct is around 128 bytes, so that's 8192 bytes that need to be re-arragned). The array needs to be sorted based off a single unsigned byte in each struct. An interesting property of my data is that it is likely that there will be many duplicates of sorted value - meaning that if you got rid of all duplicates, the array may only be 10 unique elements long, but this is not a given. Once sorted, I need to create a stack that stores the size and type that each unique byte-run starts: so if I ended up with sorted values: 4,4,4,9,9,9,9,9,14,14 the stack would be: (4,3), (9,5), (14,2) I figured that there would be some nice optimizations I could perform under these conditions. If I do heapsort, I can create the stack while I'm sorting, but would this be faster than a qsort and then build the stack afterwords? Would any sorting algorithm run slower because of the large structs I'm using? Any optimizations I can make because I'm only comparing bytes? BTW: language is c++ Thanks.
