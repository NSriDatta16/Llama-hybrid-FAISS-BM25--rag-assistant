[site]: stackoverflow
[post_id]: 4824934
[parent_id]: 4823223
[tags]: 
Taking Doug's answer to your previous question and implementing the following two functions, I get the output shown below: def pca_eig(orig_data): data = array(orig_data) data = (data - data.mean(axis=0)) / data.std(axis=0) C = corrcoef(data, rowvar=0) w, v = linalg.eig(C) print "Using numpy.linalg.eig" print w print v def pca_svd(orig_data): data = array(orig_data) data = (data - data.mean(axis=0)) / data.std(axis=0) C = corrcoef(data, rowvar=0) u, s, v = linalg.svd(C) print "Using numpy.linalg.svd" print u print s print v Output: Using numpy.linalg.eig [ 2.91081808 0.92122093 0.14735328 0.02060771] [[ 0.52237162 -0.37231836 -0.72101681 0.26199559] [-0.26335492 -0.92555649 0.24203288 -0.12413481] [ 0.58125401 -0.02109478 0.14089226 -0.80115427] [ 0.56561105 -0.06541577 0.6338014 0.52354627]] Using numpy.linalg.svd [[-0.52237162 -0.37231836 0.72101681 0.26199559] [ 0.26335492 -0.92555649 -0.24203288 -0.12413481] [-0.58125401 -0.02109478 -0.14089226 -0.80115427] [-0.56561105 -0.06541577 -0.6338014 0.52354627]] [ 2.91081808 0.92122093 0.14735328 0.02060771] [[-0.52237162 0.26335492 -0.58125401 -0.56561105] [-0.37231836 -0.92555649 -0.02109478 -0.06541577] [ 0.72101681 -0.24203288 -0.14089226 -0.6338014 ] [ 0.26199559 -0.12413481 -0.80115427 0.52354627]] In both cases, I get the desired eigenvalues.
