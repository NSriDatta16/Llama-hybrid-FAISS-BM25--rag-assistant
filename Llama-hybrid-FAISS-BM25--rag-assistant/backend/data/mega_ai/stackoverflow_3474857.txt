[site]: stackoverflow
[post_id]: 3474857
[parent_id]: 
[tags]: 
How can I use std::binary_search using just a key?

I have some data that is stored in a sorted vector. This vector is sorted by some key. I know the STL has an algorithm for checking if an element is in this sorted list. This means I can write something like this: struct MyData { int key; OtherData data; }; struct MyComparator { bool operator()( const MyData & d1, const MyData & d2 ) const { return d1.key &v ) { MyData thingToSearchFor; thingToSearchFor.key = key; return std::binary_search( v.begin(), v.end(), thingToSearchFor, MyComparator() ); } However I find the construction of the "thingToSearchFor" object inelegant. Is there a better way? Something similar to this? struct MyComparator2 { bool operator()( const MyData & d1, const MyData & d2 ) const { return d1.key &v ) { return std::binary_search( v.begin(), v.end(), key, MyComparator2() ); }
