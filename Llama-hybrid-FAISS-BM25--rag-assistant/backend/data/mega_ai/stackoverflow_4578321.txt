[site]: stackoverflow
[post_id]: 4578321
[parent_id]: 4578253
[tags]: 
Why do you need this? If you're embedding Python, you don't need to parse Python code yourself - not even remotely. But to answer the question: You could use Python's ast module (which uses a builtin module _ast internally - I don't know if and how you can use it from C). ast.parse("""... your code ...""") gives a Module object, which has a body attribute, which is a list of AST Nodes the module consist of. In this example, with Python 3 (don't have Python 2 at hand) it's (naming the classes only) [Import, Expr, Assign, While, Expr]. Not quite what you asked for, but as close as you get. Okay, with the addition: There are much easier ways than this. Proving that nothing reads from stdin is very hard, it requires extensive static analyses (and yes, if you would choose that path, using CPython's AST would still be a hundred times easier than building your own parser). That's the general case - so you might be able to get it almost working for your particular use case, with a lot of work. However, it will be much easier to just prevent it in the first place - I don't know the C API very well, but there must be some way to adjust the __builtins__ and remove input , raw_input , sys.stdin , etc.
