[site]: stackoverflow
[post_id]: 838345
[parent_id]: 
[tags]: 
How to reduce code duplication on class with data members with same name but different type?

I have trouble when designing classes like this class C1 { public: void foo(); } class C2 { public: void foo(); } C1 and C2 has the same method foo(), class Derived1 : public Base { public: void Update() { member.foo(); } private: C1 member; } class Derived2 : public Base { public: void Update() { member.foo(); } private: C2 member; } Update() of both Derived class are exactly the same, but the type of member is different. So i have to copy the Update implement for every new derived class. Is that a way to reduce this code duplication? I only come out with a solution with macro. I think there is a more elegant way to solve this with template but I can not figure it out.. EDIT: thanks a lot guys but i think i missed something.. 1.I'm using c++ 2.In reality each Derived class has about 5 members, they all afford the foo() method and are derived from the same base class. My situation is that i have already written a (very long) Update() method and it can work for every derived class without any modification. So i just copy and paste this Update() to every new class's Update() and this lead to terrible code duplication. I wonder if there is a way in which i need not to rewrite the Update() too much and can reduce the duplication. thx again
