[site]: stackoverflow
[post_id]: 5276701
[parent_id]: 
[tags]: 
Strategy for implementing a complex curve editor with XAML/WPF

I want to implement a rather complex CurveEditor that has to support the usual requirements like: freely scalable and moveable axis different interpolation types per curve point (Linear, Cubic, Spline) Tangents (joined and broken) Selecting one or several points to edit (move, scale, delete) via Fence or Click Only show handles and highlights for selected curve points I don't want to manipulate actual WPF curves but an existing model with key/value/tangents sets and sample the precise shape of the curve from our implementation. I already gathered some experience on implementing custom UserControls and Templates. But I want to make sure, I don't miss any apparent solution. I planned to have this general XAML-tree: CurveEditor - Window holding all content MainThumb : Enable dragging and scaling the editor range XAxis : UserControl rending some scale on the left side YAxis : UserControl rending some scale on the bottom Curves : Canvas holding the curves Curve : UserControl for a single curve CurveName - Label of the curve CurveLine - DrawingVisual that will render the actual curve by sampling the internal implementation of the spline function. CurveEditPoints - Canvas that holds all edit points CurveEditPoint - UserControl for a single edit point LeftTangent - UserControl for the left tangent handle LeftTangentThumb - For modifying the handle RightTangent - UserControl for the right tangent handle RightTangentThumb - For modifying the handle CurvePointCenter - Visualisation of the actual point, select state and interpolation type. CurvePointThumb - Thumb to select and drag point around I know, this is quite a complex question and I am not asking for an actual implementation. I am interested in the following questions: Can you recommend any tutorials or books that might help me (I already got Illustrated WPF, WPF Control Development Unleashed, and a couple of other) Should minor elements like the Tangents be individual UserControls? What container is best suited for hosting the individual "Curves", "EditPoints" and "Tangents". Right now, I use Canvas and Canvas.SetLeft/SetTop to position the children, but that feels "strange". Should I use "Shapes" like Path or DrawingVisual-Classes to implement actual representation. Path is straight forward, but I am concerned about performance with hundreds of CurvePoints. Should I use Transforms to rotate the tangents or is just fine to do some triangulation math in the code behind files? Does the structure roughly make sense, or do you suggest a completely different approach?
