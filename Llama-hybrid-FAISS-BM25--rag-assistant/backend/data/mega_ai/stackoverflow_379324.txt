[site]: stackoverflow
[post_id]: 379324
[parent_id]: 374386
[tags]: 
Here's how I did it in an old project in which I had to pass a matrix of integers to a C routine that would fill it with values and then I had to get back the values in managed code. I had a routine in unmanaged code that would fill a matrix of integers with some values: #include "stdafx.h" #include "TestLib.h" #include #include #include extern "C" __declspec(dllexport) void InitializeMatrix(int** matrix, int rows, int cols) { srand(time(NULL)); printf("rows: %d\ncols: %d\n", rows, cols); for (int i = 0; i And then in managed code I did something among the lines: class Program { [DllImport(@"TestLib.dll")] private static extern void InitializeMatrix(IntPtr ptr, int rows, int cols); static void Main(string[] args) { const int rowsCount = 3; const int colsCount = 4; // Allocate memory for the matrix: (rowsCount * sizeof(IntPtr)) * (colsCount * sizeof(int)) IntPtr ptr = AllocateMatrix(rowsCount, colsCount); try { // Call unmanaged routine to fill the allocated memory with data InitializeMatrix(ptr, rowsCount, colsCount); // Marshal back data int[][] matrix = GetMatrixFromPointer(ptr, rowsCount, colsCount); // Pretty-print the matrix for (int i = 0; i P/Invoke is a PITA. I would strongly recommend you to avoid it as much as possible and in cases where it is not possible try to organize your functions in a way to minimize marshaling data.
