[site]: stackoverflow
[post_id]: 5624320
[parent_id]: 
[tags]: 
I need to get a List of generic lazy loaders that will instantiate instances of their inferred type

Sorry for the cryptic title, but this is difficult to explain. The general rule is that I need a lazy loader that will give me N instances of a bound wildcard type. I'm calling the lazy loader a storage unit. import java.util.ArrayList; import java.util.List; public class StorageUnit implements Storable { private int count; public StorageUnit(int count) { this.count = count; } private List storables = new ArrayList (); public List getInstances(Class c) { try { if (storables.size() == 0) { for (int i = 0; i Elsewhere in my application I have another class that has a reference to several of these storage units. I need to get instances of the storage unit type, and then I will do something with that type. import java.util.ArrayList; import java.util.List; public class MyStorageUnitContainer { private List > storageUnits; public MyStorageUnitContainer(List > storageUnits) { this.storageUnits = storageUnits; } public List > getInstances() { List > instances = new ArrayList >(); for (StorageUnit storageUnit : storageUnits) { storageUnit.getInstances(/* I can't get the bound wildcard... */); // Now loop through those instances and do something with them... } return instances; } } That code sucks, so the best analogy I can think of is an actual storage unit container. That storage unit container has several individual storage units (think boxes). Each one of those boxes contains items of a certain type (think baseball cards). I know that a box contains 100 baseball cards, but until I open the box I don't know anything about the details of each baseball card. I'm basically trying to treat each box as a lazy loader. Opening the box loads N implementations if they don't exist already.
