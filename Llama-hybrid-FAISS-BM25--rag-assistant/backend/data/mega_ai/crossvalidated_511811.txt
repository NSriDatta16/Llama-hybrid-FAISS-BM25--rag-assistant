[site]: crossvalidated
[post_id]: 511811
[parent_id]: 499933
[tags]: 
There is a lot wrong with my question above that I came to realize after studying a bit more. I'll outline a different approach I've taken that works. The difference in this case is that I'm solving for a two parameter space instead of a single parameter space. The two parameters are the shape and scale parameter of a Weibull distribution for failures. This follows the blog entry: https://theoreticalecology.wordpress.com/2010/09/17/metropolis-hastings-mcmc-in-r/ I define a likelihood function that accepts failure data and a two parameter array. The first index in the array aligns to the shape parameter and the second to the scale parameter. These are used to define the Weibull density function that serves as the likelihood function, that is used across all the individual failure data points. likelihood I create a prior distribution. Here I use flat, uninformative priors. If I were using some other prior distribution, I may pass the function a 2-parameter params argument prior I create a posterior distribution which is the product of the likelihood and prior probabilities. (Since I'm use log values, this two probabilities are summed): posterior I then need a function to create a proposed new shape/scale combination for each step. Here I assume the potential parameters are normally distributed. proposalfunction I then create a function to iterate over a specified number of steps: MCMC_iter I can then create a markov chain using this function n = 10000 # number of iterations chain I define a burn-in: burnin To plot the posteriors for each post-burn-in: hist(mcmc[,1]) #shape posterior hist(mcmc[,2]) #scale posterior To calculate the final shape/scale estimate: mcmc.shape
