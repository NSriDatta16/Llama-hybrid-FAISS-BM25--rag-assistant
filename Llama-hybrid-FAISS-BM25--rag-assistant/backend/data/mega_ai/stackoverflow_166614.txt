[site]: stackoverflow
[post_id]: 166614
[parent_id]: 162753
[tags]: 
@PatrickvL: Sorry, but that is just plain wrong. Your code does not even compile because it tries to set two dimensions for the single-dimensional element List[x]. (PatrickvL updated his code so this part of the answer is no longer valid.) The following code demonstrates multidimensional array resizing. program TestDimensions; {$APPTYPE CONSOLE} uses SysUtils; var List: array of array of integer; begin //set both dimensions SetLength(List, 3, 2); Writeln('X = ', Length(List), ', Y = ', Length(List[0])); //X = 3, Y = 2 //set main dimension to 4, keep subdimension untouched SetLength(List, 4); Writeln('X = ', Length(List), ', Y = ', Length(List[0])); //X = 4, Y = 2 //set subdimension to 3, keep main dimenstion untouched SetLength(List, Length(List), 3); Writeln('X = ', Length(List), ', Y = ', Length(List[0])); //X = 4, Y = 3 //all List[0]..List[3] have 3 elements Writeln(Length(List[0]), Length(List[1]), Length(List[2]), Length(List[3])); //3333 //you can change subdimension for each List[] vector SetLength(List[0], 1); SetLength(List[3], 7); //List is now a ragged array Writeln(Length(List[0]), Length(List[1]), Length(List[2]), Length(List[3])); //1337 //this does not even compile because it tries to set dimension that does not exist! // SetLength(List[0], Length(List[0]), 12); Readln; end. The Delphi help also explains this quite nicely (Structured Types, Arrays). Multidimensional Dynamic Arrays To declare multidimensional dynamic arrays, use iterated array of ... constructions. For example, type TMessageGrid = array of array of string; var Msgs: TMessageGrid; declares a two-dimensional array of strings. To instantiate this array, call SetLength with two integer arguments. For example, if I and J are integer-valued variables, SetLength(Msgs,I,J); allocates an I-by-J array, and Msgs[0,0] denotes an element of that array. You can create multidimensional dynamic arrays that are not rectangular. The first step is to call SetLength, passing it parameters for the first n dimensions of the array. For example, var Ints: array of array of Integer; SetLength(Ints,10); allocates ten rows for Ints but no columns. Later, you can allocate the columns one at a time (giving them different lengths); for example SetLength(Ints[2], 5); makes the third column of Ints five integers long. At this point (even if the other columns haven't been allocated) you can assign values to the third column - for example, Ints[2,4] := 6. The following example uses dynamic arrays (and the IntToStr function declared in the SysUtils unit) to create a triangular matrix of strings. var A : array of array of string; I, J : Integer; begin SetLength(A, 10); for I := Low(A) to High(A) do begin SetLength(A[I], I); for J := Low(A[I]) to High(A[I]) do A[I,J] := IntToStr(I) + ',' + IntToStr(J) + ' '; end; end;
