[site]: stackoverflow
[post_id]: 2274911
[parent_id]: 2241822
[tags]: 
I've never worked in the videogames industry, but I've read quite a bit about it and I talk from time to time with friends that do, so I'll try to explain a more or less what's the difference between a game and other application, regarding programming methodologies. The first thing to understand is that a game is a one-off product. It's not like a spreadsheet or a word processor, where you can release new versions improving and extending the previous codebase. The second thing, is that you need to release the game as soon as possible. Usually, the more time you spend in a game, the worse will it be in comparison with the other games of the time. This is mostly true for PC games, where hardware evolves much faster than in the console world, but still applies to a large extent (games continue to get better even with the same hardware as better tools and algorithms are developed). The third thing is that usually games need to push the hardware to the limit. So screw all the elegant patterns that would make your code more beautiful and maintainable if they make it to run slower. So what I would expect after dissecting an old NES game source code is just spaghetti code, most of it written in assembly with plenty of low level hacks tightly tied to the architecture of the machine. I hope my answer is useful for you.
