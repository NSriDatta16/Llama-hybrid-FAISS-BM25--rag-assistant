[site]: stackoverflow
[post_id]: 1396314
[parent_id]: 1396265
[tags]: 
It' impossible to create a C variable in assembler: the C compiler has to know about the variable (ie its type and address), which means it has to be declared in the C code. What can be done is accessing symbols defined in assembler via extern declarations in C. That won't work for variables with automatic storage duration, though, as these don't have a fixed address but are referenced relative to the base pointer. If you don't want to access the variables outside of the asm block, you can use the stack for storing assembler-local data. Just keep in mind that you have to restore the stack pointer to its previous value when leaving the asm block, eg sub esp, 12 ; space for 3 asm-local 32bit vars mov [esp-8], 42 ; set value of local var [...] push 0xdeadbeaf ; use stack [...] ; !!! 42 resides now in [esp-12] !!! add esp, 16 ; restore esp If you don't want the relative addresses of the local variables to change whenever you manipulate the stack (ie use push or pop ), you have to establish a stack frame (ie save the base of the stack in ebp and address locals relative to this value) as described in cedrou's answer .
