[site]: crossvalidated
[post_id]: 434707
[parent_id]: 434675
[tags]: 
Just write unit tests. The scenario you're describing may not be that uncommon. For example, when a team works on putting machine learning algorithm into production, they may divide the tasks between several developers, e.g. someone prepares data preprocessing pipeline, someone else the machine learning model prototype, etc. In such scenario you may need to write some code before gathering all the needed data. What you can do in such case, is to follow the test-driven development approach, and start with writing series of unit tests for your code. Since you don't have data, just mock it. Mocking is creating objects that preserve face-value features of the real life objects (functions, methods, APIs, data) that are passed through your code as if they were real objects. For mocking the data you would just fill the files (database etc) with random data of similar properties, so if you have "age" in your input data, the values would be non-negative, years rather would be in thousands, categorical data would have few distinct categories etc. Then proceed as if this was real data and write unit tests followed by the code, so that the tests would assure you the code works as expected. This won't help you with testing if the model would be able to give any meaningful results, since it would train on random data. It would help you with preparing the prototype code that "works".
