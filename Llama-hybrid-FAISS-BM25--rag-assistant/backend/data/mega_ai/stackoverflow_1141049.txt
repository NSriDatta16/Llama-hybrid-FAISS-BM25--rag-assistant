[site]: stackoverflow
[post_id]: 1141049
[parent_id]: 
[tags]: 
Is it good form to expose derived values as properties?

I need to derive an important value given 7 potential inputs . Uncle Bob urges me to avoid functions with that many parameters, so I've extracted the class . All parameters now being properties, I'm left with a calculation method with no arguments. “That”, I think, “could be a property, but I'm not sure if that's idiomatic C#.” Should I expose the final result as a property, or as a method with no arguments ? Would the average C# programmer find properties confusing or offensive? What about the Alt.Net crowd? decimal consumption = calculator.GetConsumption(); // obviously derived decimal consumption = calculator.Consumption; // not so obvious If the latter: should I declare interim results as [private] properties , also? Thanks to heavy method extraction , I have several interim results. Many of these shouldn't be part of the public API. Some of them could be interesting, though, and my expressions would look cleaner if I could access them as properties: decimal interim2 = this.ImportantInterimValue * otherval; Happy Experiment Dept.: While debugging my code in VS2008, I noticed that I kept hovering my mouse over the method calls that compute interim results, expecting a hover-over with their return value. After turning all methods into properties, I found that exposing interim results as properties greatly assisted debugging. I'm well pleased with that, but have lingering concerns about readability. The interim value declarations look messier. The expressions, however, are easier to read without the brackets. I no longer feel compelled to start the method name with a verb. To contrast: // Clean method declaration; compulsive verby name; callers need // parenthesis despite lack of any arguments. decimal DetermineImportantInterimValue() { return this.DetermineOtherInterimValue() * this.SomeProperty; } // Messier property declaration; clean name; clean access syntax decimal ImportantInterimValue { get { return this.OtherInterimValue * this.SomeProperty; } } I should perhaps explain that I've been coding in Python for a decade. I've been left with a tendency to spend extra time making my code easier to call than to write. I'm not sure the Python community would regard this property-oriented style as acceptably “Pythonic”, however: def determineImportantInterimValue(self): "The usual way of doing it." return self.determineOtherInterimValue() * self.someAttribute importantInterimValue = property( lambda self => self.otherInterimValue * self.someAttribute, doc = "I'm not sure if this is Pythonic...")
