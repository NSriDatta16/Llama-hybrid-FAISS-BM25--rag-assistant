[site]: stackoverflow
[post_id]: 5329095
[parent_id]: 5328873
[tags]: 
This is an heated topic. Some people prefer to use the C++ IO since they are type-safe (you can't have divergence between the type of the object and the type specified in the format string), and flow more naturally with the rest of the C++ way of coding. However, there is also arguments for C IO functions (my personal favorites). Some of them are: They integrate more easily with localisation, as the whole string to localise is not broken up in smaller strings, and with some implementation the localizer can reorder the order of the inserted value, move them in the string, ... You can directly see the format of the text that will be written (this can be really hard with stream operators). As there is no inlining, and only one instance of the printf function, the generated code is smaller (this can be important in embedded environment). Faster than C++ function in some implementation. Personally, I wouldn't consider it bad practice to use C stream in C++ code. Some organisations even recommend to use them over C++ stream. What I would consider bad style is to use both in the same project. Consistency is the key here I think. As other have noted, in a relatively large project, you would probably not use them directly, but you would use a set of wrapper function (or classes), that would best fit your coding standard, and your needs (localisation, type safety, ...). You can use one or the other IO interface to implement this higher level interface, but you'll probably only use one. Edit: adding some information about the advantage of printf formatting function family relating to the localisation. Please note that those information are only valid for some implementation. You can use %m$ instead of % to reference parameter by index instead of referencing them sequentially. This can be used to reorder values in the formatted string. The following program will write Hello World! on the standard output. #include int main() { printf("%2$s %1$s\n", "World!", "Hello"); return 0; } Consider translating this C++ code: if (nb_files_deleted == 1) stream This can be really hard. With printf (and a library like gettext to handle the localization), the code is not mixed with the string. We can thus pass the string to the localization team, and won't have to update the code if there are special case in some language (in some language, if count of object is 0, you use a plural form, in other language, there are three forms one for singular, one when there is two object and a plural form, ...). printf (ngettext ("One file removed from directory \"%2$s\"", "%1$d files removed from directory \"%2$s\"", n), n, dir);
