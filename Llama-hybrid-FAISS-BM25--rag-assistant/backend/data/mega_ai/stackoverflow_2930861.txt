[site]: stackoverflow
[post_id]: 2930861
[parent_id]: 2930754
[tags]: 
A test that checks whether red rectangle resides completely outside the blue rectangle looks as follows bool outside = redBotX > blueTopX || redTopX blueTopY || redTopY Now, the negative of that will tell you whether red rectangle intersects the blue rectangle bool intersects = !(redBotX > blueTopX || redTopX blueTopY || redTopY If you wish, you can apply the De Morgan rule and rewrite it as bool intersects = redBotX = blueBotX && redBotY = blueBotY; Of course, the above tests assume that the coordinates are "normalized*, i.e. assert(redBotX Also, the comparisons might be strict or non-strict depending on whether you consider touching rectangles as intersecting or not. EDIT: I see that you use a different convention for rectangle coordinates: Top is the lower coordinate and Bot is the higher one, i.e. assert(redTopX To handle this case you just need to swap the Bot and Top coordinates in all conditions. For example, the last one will now look as follows bool intersects = redTopX = blueTopX && redTopY = blueTopY;
