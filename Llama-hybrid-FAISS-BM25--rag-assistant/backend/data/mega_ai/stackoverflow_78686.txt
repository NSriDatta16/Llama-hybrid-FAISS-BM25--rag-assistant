[site]: stackoverflow
[post_id]: 78686
[parent_id]: 78626
[tags]: 
This is a loaded question :) There's a couple of database programming architecture designs you should know of, and what their costs/benefits are. 2 Tier generally means you have a client connecting to a DB, issuing direct SQL calls. 3 Tier generally means you have an "application server" that is issuing direct SQL calls to the DB, but the client is talking to the app server. Generally, this affords "scaling out". Finally, you have 2 1/2 tiered apps that employ a 2 Tier like format, only the work is compartmentalized within stored procedures. Your process sounds like a "back office" kind of thing, and clients/processes just need results that are being aggregated and cached on a once a month basis. That is, there is no agent that connects, and connects often, and says "do these calculations". Instead you allude to a process that happens once in a while, and you can get away with non-real time. Therefore, given those requirements, I'd say that generally, it will be faster to be closer to the data, and let SQL server do all the calculations. I think you'll find that proximity to the data will serve you well. However, in performing these calculations, you may find that some calculations are not amenable to SQL Servers. Take for example calculating the accrued interest of a bond, or any fixed income instrument. Not very pretty in SQL, and much more suited for a richer programming language. However, if you just have simple averages and other relatively sane aggregates, I'd stick to stored procedures, on the SQL side. So again, there's not enough information as to the nature of your calculations, or what your house mandates in terms of SQL capabilities of devs for support, or what your boss says...but since I know my way around SQL, and like to stay close to the data, I'd stay pure SQL/Stored Procedures for a task like this. YMMV :)
