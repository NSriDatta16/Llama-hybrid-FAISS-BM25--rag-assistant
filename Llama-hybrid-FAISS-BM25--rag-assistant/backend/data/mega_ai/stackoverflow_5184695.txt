[site]: stackoverflow
[post_id]: 5184695
[parent_id]: 5184625
[tags]: 
This depends on the context but generally, an in-memory cache stores some value so that it can be retrieved later, instead of creating a new object. This is most often used in conjunction with databases – or really any application where the construction / retrieval of an object is expensive . For a simple memory cache, imagine the following dummy class (which violates tons of best practices, so don’t copy it!): class Integer { int value; public: Integer(int value) : value(value) { sleep(1000); // Simulates an expensive constructor } }; Now imagine that you need to create instances of this class: Integer one(1); Integer two(2); // etc. … but later (in another method) perhaps you need to create a new instance of 2: Integer two(2); This is expensive. What if you could recycle the old value? Using constructors, this isn’t possible but using factory methods we can do this easily: class Integer { int value; static std::map cache; Integer(int value) : value(value) { sleep(1000); // Simulates an expensive constructor } friend Integer make_int(int); }; Integer make_int(int value) { std::map ::iterator i = Integer::cache.find(value); if (i != Integer::cache.end()) return i->second; Integer ret = Integer(value); Integer::cache[value] = ret; return ret; } Now we can use make_int to create or retrieve an integer. Each value will only be created once: Integer one = make_int(1); Integer two = make_int(2); Integer other = make_int(2); // Recycles instance from above.
