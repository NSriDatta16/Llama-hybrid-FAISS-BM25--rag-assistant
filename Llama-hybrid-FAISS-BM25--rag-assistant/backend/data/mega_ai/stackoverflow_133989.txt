[site]: stackoverflow
[post_id]: 133989
[parent_id]: 133965
[tags]: 
[\r\n]+ should work too Update March, 26th, 2012, release date of Notepad++ 6.0 : OMG, it actually does work now!!! Original answer 2008 (Notepad++ 4.x) - 2009-2010-2011 (Notepad++ 5.x) Actually, no, it does not seem to work with regexp... But if you have Notepad++ 5.x, you can use the ' extended ' search mode and look for \r\n . That does find all your CRLF . (I realize this is the same answer as the others, but again, 'extended mode' is only available with Notepad++ 4.9, 5.x and more) Since April 2009, you have a wiki article on the Notepad++ site on this topic: " How To Replace Line Ends, thus changing the line layout ". Some relevant extracts include the following search processes: Simple search ( Ctrl + F ), Search Mode = Normal You can select an EOL in the editing window. Just move the cursor to the end of the line, and type Shift + Right Arrow. or, to select EOL with the mouse, start just at the line end and drag to the start of the next line; dragging to the right of the EOL won't work. You can manually copy the EOL and paste it into the field for Unix files ( LF -only). Simple search (Ctrl+F), Search Mode = Extended The "Extended" option shows \n and \r as characters that could be matched. As with the Normal search mode, Notepad++ is looking for the exact character. Searching for \r in a UNIX-format file will not find anything, but searching for \n will. Similarly, a Macintosh-format file will contain \r but not \n . Simple search (Ctrl+F), Search Mode = Regular expression Regular expressions use the characters ^ and $ to anchor the match string to the beginning or end of the line. For instance, searching for return;$ will find occurrences of "return;" that occur with no subsequent text on that same line. The anchor characters work identically in all file formats. The '.' dot metacharacter does not match line endings. [Tested in Notepad++ 5.8.5]: a regular expression search with an explicit \r or \n does not work (contrary to the Scintilla documentation ) . Neither does a search on an explicit (pasted) LF, or on the (invisible) EOL characters placed in the field when an EOL is selected. Advanced search ( Ctrl + R ) without regexp Ctrl + M will insert something that matches newlines. They will be replaced by the replace string. I recommend this method as the most reliable, unless you really need to use regexp. As an example, to remove every second newline in a double-spaced file, enter Ctrl + M twice in the search string box, and once in the replace string box. Advanced search ( Ctrl + R ) with Regexp. Neither Ctrl + M , $ nor \r\n are matched. The same wiki also mentions the Hex editor alternative : Type the new string at the beginning of the document. Then select to view the document in hex mode . Select one of the new lines and hit Ctrl + H . While you have the Replace dialog box up, select on the background the new replacement string and Ctrl + C copy it to paste it in the Replace with text input. Then Replace or Replace All as you wish. Note: the character selected for new line usually appears as 0a . It may have a different value if the file is in Windows Format. In that case, you can always go to Edit -> EOL Conversion -> Convert to Unix Format , and after the replacement switch it back and Edit -> EOL Conversion -> Convert to Windows Format .
