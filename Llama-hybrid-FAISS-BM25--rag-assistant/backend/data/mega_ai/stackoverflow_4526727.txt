[site]: stackoverflow
[post_id]: 4526727
[parent_id]: 4526501
[tags]: 
First step will be to throw out all that code and start fresh. I don't know what "ExtendArrayObject" is, but you don't need it for this - it only complicates things. The rest of the code is not really on the right track. In OOP, a class is supposed to model "something." Some kind of entity, which is often, but not always, a real-world thing. The first step in OO development is to sketch out the entities involved and model them in classes. In this case, your assignment tells you exactly what the entities are: Contact ContactList So, OK, what do we need to know about our contact - what properties do we need it to have? Let's say "name" and "email." Let's give it these properties then: class Contact { public $name; public $email; } A ContactList sounds pretty simple, it's just a list of Contacts, with a title that can be displayed in a tab. I'll write it so that it stores its Contacts internally in an array: class ContactList { public $title; public $contacts = array(); } You may be wondering, why do I need a ContactList if all it does is hold a title and store Contacts in an array? The answer is, because your assignment says you need it. :) Like many aspects of OOP, their usefulness will only be revealed as your projects increase in complexity. Just go along with it for now. Now, put these classes in 2 separate files: Contact.php and ContactList.php. (This is not strictly necessary but is generally considered best practice.) Create a 3rd file called whatever, and in it, add the following code to tie it all together: include("Contact.php"); include("ContactList.php"); // create a Contact object $contact = new Contact(); $contact->name = "Bill"; $contact->email = "bill@gmail.com"; // create a ContactList object $contact_list = new ContactList(); // set its title $contact_list->title = "My Great Contacts"; // add our contact to it $contact_list->contacts[] = $contact; print_r($contact_list); With this code, you are 80% of the way there - I didn't want to do exactly what your assignment specified because that would leave nothing left for you! I encourage you to play around with this until you feel like you really "get it." It often takes a while for OOP to "click" in one's head. But it's really crucial. Exercises: Add some different properties to the Contact class, like "phone" and "address" Create some more contacts and add them to the list Create a second ContactList object, containing a different list, with different contacts in it Extra credit: Write a method in ContactList that adds a Contact, but only if another one with the same email address doesn't already exist in the list.
