[site]: stackoverflow
[post_id]: 729924
[parent_id]: 
[tags]: 
Composition vs Inheritance for Equality & Hashcode providers

When comparing entities and aggregate roots I use an ABC, which I borrowed from Oren Eini: Generic Entity Equality . For value objects I was equally ingenious. I used Jimmy Bogard’s Value Object ABC: Generic Value Object Equality Now my question is; should I be favouring inheriting these ABCs or should I perhaps be using the generic equality / comparer and composing the aforementioned behaviour instead? I intend to reuse the above equality implementations. I think this comes back to System.Object having a default Equals implementation, which makes the language bloody easy to use but offers interesting quandaries too. Jon Skeet goes into detail here: Comparison methods Can anyone think of any pro or cons? Inheriting the ABCs is easier and offers operator overloads out of the box. Should I be “dragging” two abstract classes around with me so much? It makes my inheritance graph more complex / adds coupling. I could use DI to compose equality providers? So to summarise, does anyone have any experience with using custom equality implementations for entities? My aim is to garner a fuller understanding of the implementation choices and to implement a solution, which will prolong the life time of the project (reduce entropy) and improve maintainability.
