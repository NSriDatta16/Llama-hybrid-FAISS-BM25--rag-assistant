[site]: stackoverflow
[post_id]: 1677012
[parent_id]: 1676947
[tags]: 
I would agree with you in picking up the second option. Not because i know that the performance in this case is better, but because you said that you want to have a well architect-ed system. In case you use LINQ to SQL the problem you would face is that the classes you would be generating using LINQ drag and drop would be depending strongly on the schema of your database and your table structure. Anytime you make a change in your table structure you will have to regenerate the LINQ classes. This is not desirable from the point of view of a good architecture. You should consider using NHibernate with asp.net mvc. NHibernates provide you the power of mapping your business object properties with your database table fields via xml file. This adds an additional layer of abstraction where in your business entities don't directly depend on your table structure. There is a good project on codeplex that uses NHibernates. Here is the url for that project http://jscportal.codeplex.com/ . This is a very clean CMS portal built using asp.net mvc and NHibernates. Also this project will give you an idea of making a good design for your application. All the best !
