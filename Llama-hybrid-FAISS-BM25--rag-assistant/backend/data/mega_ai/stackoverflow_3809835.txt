[site]: stackoverflow
[post_id]: 3809835
[parent_id]: 3809820
[tags]: 
In .NET, GetHashCode is used in concert with the Equals method to determine object equality with regard to storage in collections. Note that a hash table is more complex than simply mapping a key to a single slot via a hash code. Due to the nature of hash codes, collisions can occur and do occur in practice (though with a good hash function this should not be very often). Thus most hash table implementations have to deal with the case of two different objects generating the same hash code and this is often achieved with a linked list at each "slot" in the hash table. The hash code is used to determine the slot and the Equals method is used to determine whereabouts the object is stored in the linked list (in most "standard" implementations of a hash table). A word of warning, however: there are very few good reasons to override the built-in behaviour of GetHashCode . I found this interesting SO thread discussing GetHashCode and Equals that should be worth a read: Why is it important to override GetHashCode when Equals method is overridden? . It discusses the merit/demerits of changing the behaviour, the properties of good and bad hash functions, the required properties of these two methods and other goodies.
