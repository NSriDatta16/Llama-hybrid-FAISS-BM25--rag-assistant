[site]: stackoverflow
[post_id]: 464837
[parent_id]: 456978
[tags]: 
I got this figured out. Apparently, this is a Papervision3D problem. There is a class deep inside Papervision3D called VirtualMouse , which is supposed to generate MouseEvent s programmatically. This happens, for example, when the user interacts with any of the interactive objects on stage, e.g., a Plane with an interactive material on it (as in my case). The problem is that the x and y coordinates of the generated event represent texture UV coordinates (just as I suspected) and not real world screen coordinates. When a TitleWindow (or any Panel object) is dragged, a "mouseMove" handler (among others) is added to the SystemManager , which then uses the stageX and stageY properties of the event object to determine the new position of the window. Unfortunately for VirtualMouse 's mouse events, these are invalid, since the original x,y coordinates, which are probably used to determine the global stage coordinates are, as I said, not screen coordinates . Honestly, I'm still unsure whether the events dispatched by VirtualMouse are used anywhere within Papervision3D itself, or they are just offered for convenience, but they sure make it difficult to integrate a viewport into a Flex program. Assuming that such events aren't necessary for PV3D itself, there is a one-liner fix for my problem, which must be added right after the creation of the viewport: viewport.interactiveSceneManager.virtualMouse. disableEvent(MouseEvent.MOUSE_MOVE); BTW., there was a very similar (or rather, as it turns out, the same) bug with dragging sliders, also fixed by this line.
