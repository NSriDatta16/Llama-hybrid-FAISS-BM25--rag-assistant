[site]: stackoverflow
[post_id]: 2039996
[parent_id]: 2039993
[tags]: 
This is a recursive function (one that calls itself repeatedly). The purpose of the return is to ensure that it doesn't attempt to do so forever, resulting in a null pointer exception as you run off the bottom of the tree. What will happen is that the first time you call this function with a node (usually, but not always, the root node), it will first print out the left sub-tree of that node, then the value of the node itself, then the right sub-tree of that node. The way it prints out the sub-trees is by calling itself with the top level node of that sub-tree. This is a very common method of elegantly processing recursive structures. The test for null is so that it has a condition where the search down through the levels of the tree stops when it reaches a node that has no children on the particular side you're examining (left or right). By way of example, let's say you have the following tree (uppercase letters with their numbers are real nodes with the numbers being their value, and === markers are nulls): A26 Level 0 | +------+------+ | | B14 C84 Level 1 | | +--+--+ +--+--+ | | | | D11 === === E99 Level 2 | | +--+--+ +--+--+ | | | | === === === === Level 3 Here's what will happen, when you call the function with A . You call the function (level 0) with A. The function will call itself (level 1) with B (A left). The function will call itself (level 2) with D (B left). The function will call itself (level 3) with null (D left). The function will return to level 2. The function will print out 11 from D. The function will call itself (level 3) with null (D right). The function will return to level 2. The function will return to level 1. The function will print out 14 from B. The function will call itself (level 2) with null (B right). The function will return to level 1. The function will return to level 0. The function will print out 26 from A. The function will call itself (level 1) with C (A right). The function will call itself (level 2) with null (C left). The function will return to level 1. The function will print out 84 from C. The function will call itself (level 2) with E (C right). The function will call itself (level 3) with null (E left). The function will return to level 2. The function will print out 99 from E. The function will call itself (level 3) with null (E right). The function will return to level 2. The function will return to level 1. The function will return to level 0. The function will return to you. The upshot is that it's printed out the sequence DBACE which, in a sorted tree, is the elements in sorted order (11, 14, 26, 84, 99) . Or a simpler version if you can't be bothered to read through my voluminous explanation above: A26 Level 0 | +------+------+ | | B14 === Level 1 | +--+--+ | | === === Level 2 You call the function (level 0) with A. The function will call itself (level 1) with B (A left). The function will call itself (level 2) with null (B left). The function will return to level 1. The function will print out 14 from B. The function will call itself (level 2) with null (B right). The function will return to level 1. The function will return to level 0. The function will print out 26 from A. The function will call itself (level 1) with null (A right). The function will return to level 0. The function will return to you. In that case, you'd get BA or (14,26) .
