[site]: stackoverflow
[post_id]: 1725203
[parent_id]: 1719077
[tags]: 
I want to refine this question some more, say we extend the situation with the following new Model What happens when our post is associated to another entity besides a Blog? Even if we take care to only remove the post via Blog.Posts.Remove, what is the general strategy for handling cleanup of other associations? Assume we cannot stuff all items into one aggregate root, if we could, we could clean them all up via the AR. So basically we have associations between aggregate roots, what is the best practice to clean those up? In this example, a user can list their favorite posts, but this is only a 1 way association from User to Post, there is no association back. Would we need a domain service, to delete/remove an entity from the domain (not just make it transient but get it GCed), that would remove all associations? This will make NHibernate happy when it persists the changes. In this case we would need to remove a post from not only a blog but from any user that has it marked as a favorite. Should this live in a domain service, application service? How do we leverage this service if a cascade delete happens, say we delete a blog that has posts that are marked favorites, should we tap into NHib events and detect posts were deleted and cleanup associations? I know some people suggest using FK cascading in the database but this will only work if associations are not loaded into a session. If they are loaded, they have to be removed. What I donâ€™t like about this approach is that it violates the idea of having a real model in memory that acts as it would even if NHib and the database were not there. Thoughts?
