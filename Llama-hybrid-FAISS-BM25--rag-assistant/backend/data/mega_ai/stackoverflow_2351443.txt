[site]: stackoverflow
[post_id]: 2351443
[parent_id]: 2351437
[tags]: 
Function objects were designed to allow a strong layer of abstraction over STL, and in that regard they are great. However, I prefer to use boost::bind and bind a function to the STL algorithms instead -- usually ( although not in cases where the object has a state ) that seems a more elegant solution. std::for_each( callback.begin(), callback.end(), boost::bind(&Callback::call(),_1) ); Also, another upcoming alternative are lambda's in C++0x (example shamelessly stolen from Wikipedia): std::vector someList; int total = 0; std::for_each(someList.begin(), someList.end(), [&total](int x) { total += x; }); std::cout Notice that due to closures, they do not have the restriction of bind about not having a state.
