[site]: stackoverflow
[post_id]: 1417710
[parent_id]: 1417665
[tags]: 
This will be a problem if you plan to make all logging calls from some blind error handler that doesn't know anything about the code that raised the error, which is what your question sounds like. How will you decide which logging calls get made and which don't? The more standard practice is to use such blocks to recover if possible, and log an error (really, if it is an error that you weren't specifically prepared for, you want to know about it; use a high level). But don't rely on these blocks for all your state/debug information. Better to sprinkle your code with logging calls before it gets to the error-handler. That way, you can observe useful run-time information about a system when it is NOT failing and you can make logging calls of different severity. For example: import logging from traceback import format_exc logger = logging.getLogger() # Gives the root logger. Change this for better organization # Add your appenders or what have you def handle_error(e): logger.error("Unexpected error found") logger.warn(format_exc()) #put the traceback in the log at lower level ... #Your recovery code def do_stuff(): logger.info("Program started") ... #Your main code logger.info("Stuff done") if __name__ == "__main__": try: do_stuff() except Exception,e: handle_error(e)
