[site]: stackoverflow
[post_id]: 665052
[parent_id]: 665049
[tags]: 
It's O(n 3 ). The big-O shows how execution time (or memory or whatever) is proportional to the size of the task (the proportionality coefficient is omitted). In this cases the inner statement is executed times proportional to (n 3 ). i runs from 1 to (n-1) - so everything inside the outer cycle is executed (n-1) times. j runs on average from (n/2) to (n) - so everything inside is executed (n-1)* (n/2) times. k runs on average from 1 to (3/4* n). This gets (n-1)* (n/2)* (3/4*n-1) executions of the inner statement. This is O(n 3 ).
