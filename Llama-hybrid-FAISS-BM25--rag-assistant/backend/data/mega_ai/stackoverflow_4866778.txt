[site]: stackoverflow
[post_id]: 4866778
[parent_id]: 4866400
[tags]: 
The exception is raised in TMemoStrings.SetTextStr procedure in 'stdctrls.pas', in response to a failing WM_SETTEXT message sent to the Memo. VCL looks to the return of 'SendMessage' and if it's '0' throws the exception. There's really no way to tell the actual reason of the failing, as you can see from the documentation only special error codes are for list boxes and combo boxes. If the user can consistently reproduce the error, you might consider sending him a special build that wraps the 'LoadFromFile' between 'SetLastError'/'GetLastError' calls. edit: I wondered what would GetLastError tell if I pushed the practical limit of setting text to a Memo (as opposed to the theoretical limit Jeroen's answer refers to). var s: array [0.. 1073741823] of Char; procedure TForm1.Button1Click(Sender: TObject); var i: Integer; begin FillChar(s[0], Length(s) - 1, Ord('a')); // without line breaks 'SendMessage' takes forever to return for i := 1 to Length(s) - 1 do if i mod 50 = 0 then begin s[i - 1] := #13; s[i] := #10; end; s[Length(s) - 1] := #0; SetLastError(0); try if SendMessage(Memo1.Handle, WM_SETTEXT, 0, Longint(@s[0])) = 0 then raise Exception.Create('set text fail'); except ShowMessage(SysErrorMessage(GetLastError)); end; end; The limit would change depending on specific conditions, but here, the above pops "Not enough storage is available to process this command" . (With f.i. half of that (0.5GB) there's no problem setting the text.)
