[site]: stackoverflow
[post_id]: 1855693
[parent_id]: 1855671
[tags]: 
Instead of trying to manipulate the Wilson's algorithm to do a 5 star rating system. Why don't you look into a different algorithm? This is what imdb uses for their top 250: Bayesian Estimate As for explaining the math in the Wilson's algorithm, below was posted on the link in your first post. It is written in Ruby. require 'statistics2' def ci_lower_bound(pos, n, power) if n == 0 return 0 end z = Statistics2.pnormaldist(1-power/2) phat = 1.0*pos/n (phat + z*z/(2*n) - z * Math.sqrt((phat*(1-phat)+z*z/(4*n))/n))/(1+z*z/n) end If you'd like another example, here is one in PHP: http://www.derivante.com/2009/09/01/php-content-rating-confidence/ Edit: It seems that derivante.com is no longer around. You can see the original article on archive.org - https://web.archive.org/web/20121018032822/http://derivante.com/2009/09/01/php-content-rating-confidence/ and I've added the code from the article below. class Rating { public static function ratingAverage($positive, $total, $power = '0.05') { if ($total == 0) return 0; $z = Rating::pnormaldist(1-$power/2,0,1); $p = 1.0 * $positive / $total; $s = ($p + $z*$z/(2*$total) - $z * sqrt(($p*(1-$p)+$z*$z/(4*$total))/$total))/(1+$z*$z/$total); return $s; } public static function pnormaldist($qn) { $b = array( 1.570796288, 0.03706987906, -0.8364353589e-3, -0.2250947176e-3, 0.6841218299e-5, 0.5824238515e-5, -0.104527497e-5, 0.8360937017e-7, -0.3231081277e-8, 0.3657763036e-10, 0.6936233982e-12); if ($qn 0.5) $w1 = 1.0 - $w1; $w3 = - log(4.0 * $w1 * (1.0 - $w1)); $w1 = $b[0]; for ($i = 1;$i 0.5) return sqrt($w1 * $w3); return - sqrt($w1 * $w3); } } As for doing this in SQL, SQL has all these Math functions already in it's library. If I were you I'd do this in your application though. Make your application update your database every so often (hours? days?) instead of doing this on the fly or your application will become very slow.
