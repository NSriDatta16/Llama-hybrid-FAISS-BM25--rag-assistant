[site]: stackoverflow
[post_id]: 1711384
[parent_id]: 1563434
[tags]: 
To get all of that requires a little bit of a hack. You have to store whether the mouse is off the stage or not and handle the Event.MOUSE_LEAVE event accordingly. Doing it this way gives you all the normal mouse functionality including not stopping the drag just because the mouse went off stage. Since the user might come back on stage and continue the drag it waits 'til the user releases the mouse either on or off stage. var mouseOffStage:Boolean; var bonk:YourDisplayObject = new YourDisplayObject() addChild(bonk); bonk.addEventListener(MouseEvent.MOUSE_DOWN, function():void { mouseOffStage = false; bonk.startDrag(); stage.addEventListener(MouseEvent.MOUSE_UP, mouseUp); stage.addEventListener(Event.MOUSE_LEAVE, mouseLeave); stage.addEventListener(MouseEvent.MOUSE_OUT, mouseOut); stage.addEventListener(MouseEvent.MOUSE_OVER, mouseOver); }) private function mouseUp(e:MouseEvent) :void { trace("Mouse Up On Stage") bonk.stopDrag() } private function mouseLeave(e:Event) :void { if(mouseOffStage){ trace("mouse up and off stage"); bonk.stopDrag(); }else{ trace("mouse has left the stage"); //no reason to stop drag here as the user hasn't released the mouse yet } } private function mouseOut(e:MouseEvent) :void { mouseOffStage = true; trace("mouse has left the stage") } private function mouseOver(e:MouseEvent) :void { mouseOffStage = false; trace("mouse has come back on stage"); } The hack is that the MOUSE_LEAVE event, not the MOUSE_UP event, gets fired when the mouse is released off stage so you have to keep track of whether or not the mouse was already off stage when it was released. after the drag is finished you of course want to remove all the event listeners associated with detecting mouse-outs and mouse-ups but that code was left out for readability.
