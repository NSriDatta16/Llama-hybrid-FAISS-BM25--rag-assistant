[site]: stackoverflow
[post_id]: 4840723
[parent_id]: 144661
[tags]: 
@Jason I respectively disagree. There are differences that make Ruby superior to Python for metaprogramming - both philosophical and pragmatic. For starters, Ruby gets inheritance right with Single Inheritance and Mixins . And when it comes to metaprogramming you simply need to understand that it's all about the self . The canonical difference here is that in Ruby you have access to the self object at runtime - in Python you do not! Unlike Python, in Ruby there is no separate compile or runtime phase. In Ruby, every line of code is executed against a particular self object. In Ruby every class inherits from both object and a hidden metaclass. This makes for some interesting dynamics: class Ninja def rank puts "Orange Clan" end self.name #=> "Ninja" end Using self.name accesses the Ninja classes' metaclass name method to return the class name of Ninja. Does metaprogramming flower so beautiful in Python? I sincerely doubt it!
