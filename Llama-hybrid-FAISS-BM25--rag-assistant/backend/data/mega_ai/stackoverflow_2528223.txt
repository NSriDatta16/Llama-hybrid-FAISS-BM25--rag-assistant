[site]: stackoverflow
[post_id]: 2528223
[parent_id]: 2528199
[tags]: 
Place 1: Use a pointer (*) instead of a reference (&) here. Pointer syntax more explicitly indicates a link. Place 2: What's known as a 'temporary' object will be created here. Yes, it will involve a call to the constructor of Object1. Also, yes, the storage will be 'auto' as it will be created on the stack. Be careful, however. The temporary will die before you can refer to it inside the constructor. This would surely crash your program. If you must pass a temporary, you may succeed by creating a copy it on the heap. Something like this: class Object1 { BaseClass* link; int i; Object1(int a) : i(a), link(NULL) {} Object1(int a, const Object1& o) : i(a), link(new new Object1(o)) {} Object1(const Object1& other) i(other.i) link(other.link) {} //Copy constructor virtual ~Object1() { delete link; } //Don't forget the 'delete' in destructor. }; Then in your main you can() do this: int main() { Object1 a(3, Object1(2)); .... } Do notice the destructor in Object1 class. Make sure to call delete operator on your link inside it. Such a call would cause deletion of all children down the chain, however. If this is not what you want, alter your deletion mechanism accordingly. In any case, don't forget to delete. Also, make sure the destructor is virtual. That's because you'll be calling delete on the base class pointer that points to a derived class object.
