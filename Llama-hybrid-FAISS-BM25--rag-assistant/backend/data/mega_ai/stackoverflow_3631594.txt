[site]: stackoverflow
[post_id]: 3631594
[parent_id]: 3631176
[tags]: 
because object interaction is superior to inheritance. James Gosling reportedly said that should he do Java over again he'd do without classes, and clarified that by "classes" he meant inheritance . protected is meaningless (or reduces to private ) without inheritance (although not in Java), but with inheritance, it explodes into a slimy public degenerate, and more so in Java ( Programming Scala chapter 5 ). Allen Holub writes (in Holub on Patterns which is a Java book, but great from a general OOP perspective) that protected is public by another name, especially in Java where . a protected symbol is one that can't be trusted to be what you see within the class it's declared in. other classes (descendants) can swap it under your nose. you're dealing with the yo-yo effect. Gosling and Holub hint at the notion that interaction among objects is superior to class inheritance. there might be a little more of it, but that code will be better in terms of the software quality metrics (more flexible, easier to adapt and extend to new requirements) than code based on inheritance-based code. of course you need to be pragmatic. Holub writes that inheritance ( protected ) has its place in production code, but as a code volume-optimization, not a design element. in fact, all design should be done in terms of interfaces, which means public -only.
