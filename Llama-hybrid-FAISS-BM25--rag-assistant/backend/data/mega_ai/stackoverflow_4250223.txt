[site]: stackoverflow
[post_id]: 4250223
[parent_id]: 4250144
[tags]: 
For the DataSource question I prefer the following pattern abstract class GridBase { public abstract object DataSource { get; } } class GenericGrid : GridBase { private T m_data; public override object DataSource { get { return m_data; } } public T DataSourceTyped { get { return m_data; } set { m_data = value; } } } Reasons Having the GridBase.DataSource member be writable is type unsafe. It allows me to break the contract of GenericGrid by setting the value to a non-T instance This is more of a matter of opinion but I dislike the use of new because it often confuses users. I prefer the suffix ~Type" for this scenario This only requires the data be stored once Doesn't require any unsafe casting. EDIT OP corrected that GridBase and GenericGrid are both usable types In that case I would say you need to reconsider your design a bit. Having them both as usable types opens you up to very easy to expose type errors. GenericGrid grid = new GenericGrid (); GridBase baseGrid = grid; baseGrid.DataSource = "bad"; Console.Write(grid.DataSource); // Error!!! The design will be a lot more reliable if separate the storage from the access of the values in a manner like my original sample. You could extend it further with the following code to have a usable non-generic container class Grid : GridBase { private objecm m_data; public override object DataSource { get { return m_data; } } public object DataSourceTyped { get { return m_data; } set { m_data = value; } } }
