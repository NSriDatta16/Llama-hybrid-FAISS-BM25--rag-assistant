[site]: stackoverflow
[post_id]: 1650548
[parent_id]: 1650475
[tags]: 
Does the uniq method remove duplicates in so far as these objects point to the same space in memory or that they contain identical information? The method relies on the eql? method so it removes all the elements where a.eql?(b) returns true. The exact behavior depends on the specific object you are dealing with. Strings, for example, are considered equal if they contain the same text regardless they share the same memory allocation. a = b = "foo" c = "foo" [a, b, c].uniq # => ["foo"] This is true for the most part of core objects but not for ruby objects. class Foo end a = Foo.new b = Foo.new a.eql? b # => false Ruby encourages you to redefine the == operator depending on your class context. In your specific case I would suggest to create an object representing a twitter result and implement your comparison logic so that Array.uniq will behave as you expect. class Result attr_accessor :text, :notes def initialize(text = nil, notes = nil) self.text = text self.notes = notes end def ==(other) other.class == self.class && other.text == self.text end alias :eql? :== end a = Result.new("first") b = Result.new("first") c = Result.new("third") [a, b, c].uniq # => [a, c]
