[site]: stackoverflow
[post_id]: 5086513
[parent_id]: 5086189
[tags]: 
I am using the same plugin and it's working without any problems for me. I will post the codes I am using so that can help you. The C# code I saw at Scott Hanselman's blog (and I made few changes). A class to store the properties of the file: public class ViewDataUploadFilesResult { public string Name { get; set; } public int Length { get; set; } public string Type { get; set; } } The upload code, which is called by the ajax: [HttpPost] public string UploadFiles() { var r = new List (); Core.Settings settings = new Core.Settings(); foreach (string file in Request.Files) { HttpPostedFileBase hpf = Request.Files[file] as HttpPostedFileBase; if (hpf.ContentLength == 0) continue; string savedFileName = Path.Combine(settings.StorageLocation + "\\Files\\", Path.GetFileName(hpf.FileName)); hpf.SaveAs(savedFileName); r.Add(new ViewDataUploadFilesResult() { Name = hpf.FileName, Length = hpf.ContentLength, Type = hpf.ContentType }); } return "{\"name\":\"" + r[0].Name + "\",\"type\":\"" + r[0].Type + "\",\"size\":\"" + string.Format("{0} bytes", r[0].Length) + "\"}"; } The javascript piece which makes the magic: $('#file_upload').fileUploadUI({ uploadTable: $('#files'), downloadTable: $('#files'), buildUploadRow: function (files, index) { return $(' ' + files[index].name + ' ' + ' ' + ' ' + ' ' + ' Cancel ' + ' '); }, buildDownloadRow: function (file) { return $(' ' + file.name + ' '); } }); Take a look and make some tests. -- EDIT I wrote an article about it .
