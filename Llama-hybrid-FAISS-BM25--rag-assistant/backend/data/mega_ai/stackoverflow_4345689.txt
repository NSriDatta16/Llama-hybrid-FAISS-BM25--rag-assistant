[site]: stackoverflow
[post_id]: 4345689
[parent_id]: 4345573
[tags]: 
The general "algorithm" assuming unlimited storage, for optimising this is to build up a tree on the data based on characters allowing you to search for your pattern recursively. In the tree index as you build, you traverse down until you reach a "unique" point and the "leaf" gives the location of where that unique occurrence is. In the above paragraph for example the word "index" appears once. If the tree is built one character at a time then the tree path we follow would start with the "i" character then "in". If it is case sensitive there are just 3 occurrences (assuming, optimising and index). When we next search for 'd' we hit our unique result. Of course we could start our search first with the space, then the i and then the n and we'd follow a different path. You could also make the tree case-insensitive, and you could use a "nybble" rather than a byte at each branch point.
