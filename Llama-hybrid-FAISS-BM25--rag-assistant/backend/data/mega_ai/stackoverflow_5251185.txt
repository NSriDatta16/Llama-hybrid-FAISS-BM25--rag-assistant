[site]: stackoverflow
[post_id]: 5251185
[parent_id]: 5250756
[tags]: 
In our contact adress search on esperanto.de we use a variant of this SQL statement (wrapped in PHP syntax): $demando = "SELECT DISTINCT id, [...]" . " AVG(tie.longitudo) AS longitudo, AVG(tie.latitudo) AS latitudo, ". " ROUND(111.3 * SQRT( POW(({$chi[latitudo]} - AVG(tie.latitudo)),2) + " . " POW((({$chi[longitudo]} - AVG(tie.longitudo)) * COS(({$chi[latitudo]} + AVG(tie.latitudo)) / 114.6 )),2) )) " . " AS efektiva_distanco " . " FROM MA_Adresoj, gxustaj_plzkoord AS tie " . " WHERE ( " . $pliaj_restriktoj . ") " . " and (tie.plz = urba_kodo) " . " GROUP BY id, urba_kodo, nomo_pers, nomo_fam, adresaldono, strato, loko," . " telefono, retadreso " . " HAVING efektiva_distanco to filter all entries within a given distance ( $distanco ). It is a bit complicated by the fact that we need to average out several coordinates for a single post code (which should have been done on the coordinate database, but isn't.) The core is the distance calculation depending on longitude and latitude (in degrees) here: 111.3 * SQRT( POW(here.latitude - there.latitude),2) + POW((here.longitude - there.longitude) * COS( (here.latitude + there.latitude) / 114.6 ),2) )) (The result is the distance in kilometers.) I'm not sure if this formula works universally or is somehow approximate for Germany (or only smaller distances - I think it will calculate a too big distance when one point is north and the other south of the equator with similar absolute latitudes ... and also when there is a big east-west difference). Of course, this will get quite slow if you have many points - then you'll either have to do some pre-filtering like in iluxas answer, or better use a database with spatial indexing.
