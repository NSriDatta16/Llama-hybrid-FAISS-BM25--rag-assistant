[site]: stackoverflow
[post_id]: 987368
[parent_id]: 983065
[tags]: 
When calling between classes within a C++/CLI project, you have to #include . The compiler is encountering the cross-reference for the first time . You should be #using ref classes between C++/CLI projects, rather than #include -ing. You're now beyond the compiler and managed referencing has taken over. (Here's a good discussion on the topic: MSDN forums ) A pattern I have found useful in solutions that straddle the mixed managed/native world is to go "implementation-less" rather than headerless. This makes the most sense on new solutions that will have a mix of C++ and pure managed languages, it makes the C++ code "feel" more like the other managed code. Write .h files with // MyClass.h header file #pragma once // full class implementation And .cpp files with #include "MyClass.h" // nothing else I think the .cpp is really optional and can be eliminated, though it is convenient to be able to Ctrl+F7 "build this file only." Whether or not it exists will affect build order. I do NOT think it makes sense to re-organize existing C++ projects that have recently had the /clr switch added.
