[site]: stackoverflow
[post_id]: 4974265
[parent_id]: 4974182
[tags]: 
It can be difficult to be sure without insight into what operations you are performing, but a more elegant design would be to have StoreHouse define method signatures for the different "operations". Then, instead of the if(instanceof) checks, you just execute the operations, and the concreteStorehouses would implement those operations. public abstract class Storehouse //add these definitions; public void operation1(); public void operation2(); public class ConcreteStorehouseA public void operation1() { //do operation } public void operation2() { //do operation } public class ConcreteStorehouseB public void operation1() { //do operation } public void operation2() { //do operation } In your calling code, instead of: if (storehouse instanceof ConcreteStorehouseA) { ConcreteStorehouseA concreteStorehouseA = (ConcreteStorehouseA) storehouse; // perform operations } else if (storehouse instanceof ConcreteStorehouseB) { ConcreteStorehouseB concreteStorehouseB = (ConcreteStorehouseB) storehouse; // perform operations } You can then use polymorphism to do the operations without caring which implementation is being executed. storehouse.operation1(); storehouse.operation2(); where concreteStorehouseA and ConcreteStorehouseB have defined implementations for those operations.
