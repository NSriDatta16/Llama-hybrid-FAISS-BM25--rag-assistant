[site]: stackoverflow
[post_id]: 1776379
[parent_id]: 
[tags]: 
Why does a string INotifyPropertyChanged property update but not a List ?

In the following WPF application, when you click the button, why does TheTitle TextBlock update but FilesCopied ListBox not update? XAML: code-behind: using System.Collections.Generic; using System.Windows; using System.ComponentModel; namespace TestList3433 { public partial class Window1 : Window, INotifyPropertyChanged { #region ViewModelProperty: FilesCopied private List _filesCopied = new List (); public List FilesCopied { get { return _filesCopied; } set { _filesCopied = value; OnPropertyChanged("FilesCopied"); } } #endregion #region ViewModelProperty: TheTitle private string _theTitle; public string TheTitle { get { return _theTitle; } set { _theTitle = value; OnPropertyChanged("TheTitle"); } } #endregion public Window1() { InitializeComponent(); DataContext = this; FilesCopied.Add("test1.txt"); TheTitle = "This is the title"; } private void Button_Click(object sender, RoutedEventArgs e) { FilesCopied.Add("test2.txt"); TheTitle = "title was changed"; } #region INotifiedProperty Block public event PropertyChangedEventHandler PropertyChanged; protected void OnPropertyChanged(string propertyName) { PropertyChangedEventHandler handler = PropertyChanged; if (handler != null) { handler(this, new PropertyChangedEventArgs(propertyName)); } } #endregion } } Answer: Thanks Robert, I forgot about ObservableCollection. Here is the answer: Change the FilesCopied block to this: #region ViewModelProperty: FilesCopied private ObservableCollection _filesCopied = new ObservableCollection (); public ObservableCollection FilesCopied { get { return _filesCopied; } set { _filesCopied = value; OnPropertyChanged("FilesCopied"); } } #endregion And add: using System.Collections.ObjectModel;
