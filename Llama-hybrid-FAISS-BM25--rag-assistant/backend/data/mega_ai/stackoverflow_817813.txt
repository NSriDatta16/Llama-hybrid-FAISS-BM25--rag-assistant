[site]: stackoverflow
[post_id]: 817813
[parent_id]: 817279
[tags]: 
The assumption in the question "Assume that the data requested from the Hard-Drive doesn't exist in any of the caches (hard-drive cache , Os Cache , Ram and whatever else it could be)" is difficult to assume and relatively rare. Even in this case, there is only a loose association between user mode file I/O operations and physical storage device operations. There are many user mode File I/O functions in various windows libraries. Some of the oldest are the C library low level I/O functions . There are also the C library stream I/O functions , the C++ iostreams classes , and the manged I/O classes . There are other I/O interfaces as well that are part of other packages. In general, all the user mode I/O Libraries are built on top of the Win32 file I/O functions including CreateFile() , SetFilePointer() , ReadFile() , and WriteFile() . Unless a file is opened in unbuffered mode the operating system can cache the files contents. This is done system wide, and not on a per-file basis. So, even if your program had not read or written a file, I/O to a file may be cached and not result in any physical storage device I/Os. There are many factors that determine how file I/Os map to actual I/O operations on a physical device. This includes, library level bufering, OS cashing, device driver caching, hardware level cashing, device block size, file size, hardware block/sector remapping, and other factors. The short story here is that you cannot assume that individual file level read or seek operations correspond to physical device operations, such as disk head seeking. This gets even trickier when writes are considered. Often writes are accompanied by a flush - which the application developer assumes will push the data all the way to the physical media. Developers often assume that when a flush call returns success, that the data is guaranteed to be persistent on the storage device. This is far from true as devices and drivers often ignore flush calls. There is more complexity with solid state drives which are not mechanical and therefore do not have 'seek' operations. Here, other physical characteristics manifest themselves such as the necessity to erase blocks before they are written to.
