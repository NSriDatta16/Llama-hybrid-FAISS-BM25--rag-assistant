[site]: stackoverflow
[post_id]: 4528835
[parent_id]: 4528808
[tags]: 
To define a function pointer, use the following syntax: return_type (*ref_name) (type args, ...) So, to define a function reference named "doSomething", which returns an int and takes in an int argument, you'd write this: int (*doSomething)(int number); You can then assign the reference to an actual function like this: int someFunction(int argument) { printf("%i", argument); } doSomething = &someFunction; Once that's done, you can then invoke it directly: doSomething(5); //prints 5 Because function pointers are essentially just pointers, you can indeed use them as instance variables in your classes. When accepting function pointers as arguments, I prefer to use a typedef instead of using the cluttered syntax in the function prototype: typedef int (*FunctionAcceptingAndReturningInt)(int argument); You can then use this newly defined type as the type of the argument for the function: void invokeFunction(int func_argument, FunctionAcceptingAndReturningInt func) { int result = func(func_argument); printf("%i", result); } int timesFive(int arg) { return arg * 5; } invokeFunction(10, &timesFive); //prints 50
