[site]: datascience
[post_id]: 116377
[parent_id]: 
[tags]: 
Using python AI mnist to recognize my picture, trained accuracy is 97.99%, but accuracy to my img is less than 20%

Questions like these are difficult to debug, but you'll hopefully find more help on datascience.stackexchange.com than here I see the suggestion that post in Data science is also a good option Using python AI mnist to recognize my picture, trained accuracy is 97.99%, but accuracy to my img is less than 20% I'm hoping can use MNIST doing 0~9 number recognition, and trainning accuracy rate reach up to 97% , I thought it will be fine to reconize my pic but predict/recognize my 2 picture as number 7 predict/recognize my 3 picture as number 6 predict/recognize my 5 picture as number 2 here is the share pic link : https://i.stack.imgur.com/DRH6G.jpg import keras from keras.datasets import mnist import matplotlib.pyplot as plt import PIL from PIL import Image (train_images,train_labels),(test_images,test_labels) = mnist.load_data() train_images.shape len(train_labels) train_labels test_images.shape len(test_labels) test_labels from keras import models from keras import layers network = models.Sequential() network.add(layers.Dense(512,activation='relu',input_shape=(28*28,))) network.add(layers.Dense(10,activation='softmax')) network.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy']) train_images = train_images.reshape((60000,28*28)) train_images = train_images.astype('float32')/255 test_images = test_images.reshape((10000,28*28)) test_images = test_images.astype('float32')/255 from keras.utils import to_categorical train_labels = to_categorical(train_labels) test_labels = to_categorical(test_labels) network.fit(train_images,train_labels,epochs= 3 ,batch_size=128) test_loss , test_acc = network.evaluate(test_images,test_labels) print('test_acc:',test_acc) network.save('m_lenet.h5') ######### import numpy as np from keras.models import load_model import matplotlib.pyplot as plt from PIL import Image model = load_model('/content/m_lenet.h5') picPath = '/content/02_a.png' img = Image.open(picPath) reIm = img.resize((28,28),Image.ANTIALIAS) plt.imshow(reIm) plt.savefig('/content/result.png') im1 = np.array(reIm.convert("L")) im1 = im1.reshape((1,28*28)) im1 = im1.astype('float32')/255 # predict = model.predict_classes(im1) predict_x=model.predict(im1) classes_x=np.argmax(predict_x,axis=1) print ("---------------------------------") print ('predict as：') print (predict_x) print ("") print ("") print ('predict number as：') print (classes_x) print ("---------------------------------") print ("Original img : ") what should I do for this? should I also import my img with ans for AI to trainning? add more layers? that all the idea I came up, if there is more, just let me know? If that the only two idea to slove, also tell me how to implement (ex:import my img with ans for AI to trainning) The discussion I read through https://stackoverflow.com/questions/69625822/mnist-trained-network-tested-with-my-own-samples
