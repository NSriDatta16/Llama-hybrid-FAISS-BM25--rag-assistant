[site]: stackoverflow
[post_id]: 177336
[parent_id]: 177205
[tags]: 
On UNIX, processes can share file descriptors with their child processes if the file descriptors are not set to close on exec ( FD_CLOEXEC ). Likewise, Windows supports sharing handles with child processes by setting lpSecurityAttributes->bInheritHandle to TRUE when calling CreateFile() and then setting bInheritHandles to TRUE when calling CreateProcess . Not to mention that the Microsoft C runtime _open() function accepts a _O_NOINHERIT flag. On Linux, the clone() syscall gives you a lot of control over what the child process shares with its parent: everything from the address space ( CLONE_VM ) to the file descriptor table ( CLONE_FILES ) to the parent process ID ( CLONE_PARENT ) can be either shared or not shared. Of course, this functionality was added to support kernel threads. Thread-local storage (TLS) is indexed differently for each thread in a process, but the actual memory is shared between threads.
