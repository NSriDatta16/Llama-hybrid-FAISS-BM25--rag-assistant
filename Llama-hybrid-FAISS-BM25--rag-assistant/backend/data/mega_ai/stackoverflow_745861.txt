[site]: stackoverflow
[post_id]: 745861
[parent_id]: 745850
[tags]: 
Well, the ideal would probably be to not need delete of any kind. Have a garbage-collected environment, let the programmer avoid the whole problem. The complaints in the rant seem to come down to "I liked the way malloc does it" "I don't like being forced to explicitly create objects of a known type" He's right about the annoying fact that you have to implement both new and new[] , but you're forced into that by Stroustrups' desire to maintain the core of C's semantics. Since you can't tell a pointer from an array, you have to tell the compiler yourself. You could fix that, but doing so would mean changing the semantics of the C part of the language radically; you could no longer make use of the identity *(a+i) == a[i] which would break a very large subset of all C code. So, you could have a language which implements a more complicated notion of an array, and eliminates the wonders of pointer arithmetic, implementing arrays with dope vectors or something similar. is garbage collected, so you don't need your own delete discipline. Which is to say, you could download Java. You could then extend that by changing the language so it isn't strongly typed, so type checking the void * upcast is eliminated, ...but that means that you can write code that transforms a Foo into a Bar without the compiler seeing it. This would also enable ducktyping, if you want it. The thing is, once you've done those things, you've got Python or Ruby with a C-ish syntax. I've been writing C++ since Stroustrup sent out tapes of cfront 1.0; a lot of the history involved in C++ as it is now comes out of the desire to have an OO language that could fit into the C world. There were plenty of other, more satisfying, languages that came out around the same time, like Eiffel. C++ seems to have won. I suspect that it won because it could fit into the C world.
