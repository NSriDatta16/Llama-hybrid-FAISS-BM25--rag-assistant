[site]: stackoverflow
[post_id]: 948455
[parent_id]: 948283
[tags]: 
Queued or not queued? What do you need from your messaging solution? Interoperability ? Do you need to be able to expose your solution to other applications? Then you'll need to go with one of the formats and protocols supported out there and that 99% of the cases means REST or SOAP Availability ? Does your client needs to be able to send message even when the server is down, unavailable or going through maintenance, then you'll certainly need a queued solution (MSMQ, MQ, SSB) Security ? Do the client and server need to authenticate across domains of trust? Then you need to make sure your solution has a non-domain based story for authentication (eg. certificates). Reliability ? If you client crashes, does it needs to resume sending pending messages? Again, only a queued solution will help here. Correlation ? Do you need to process correlated messages in order, do you need exclusive access to correlated messages, do you need to send back replies? Not all solutions offer a session semantics. Scalability ? Do you need to support one client or one million? Again, only a queued solution will work after a certain scale. Spikes ? Does your traffic has any spikes, like certain hours or days when it surges up? A coupled solution has to be planned for the capacity to accept the highest spike it can encounter or it will unceremoniously reject clients. If your hardware cannot cope with your regular spikes then you'll have to use a queued solution. If you like WCF then you going to get a lot for free from it. But basically there are two modes of doing messaging: queued and non-queued. WCF offers a huge matrix of interchangeable channels, bindings, formats, protocols and authentication methods that can be switched in and out at a simple change of the .config file. But they're all for the non queued mode. If your solution is OK with a coupled communication channel then probably there's nothing better than WCF at the moment for CLR applications. If your requirements impose a queued based solution then you'll loose all the cool interchangeable binding toys and you'll leverage from WCF the serialization and maybe the activation model of your service. And last but not least 90% of the messages sent in any messaging solutions end up in a database and quite a few also originate from a database. If you want a tight integration with SQL Server databases that offers performance while guaranteeing reliable delivery, there is a solution for that in SSB .
