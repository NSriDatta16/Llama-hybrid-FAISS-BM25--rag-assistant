[site]: datascience
[post_id]: 103323
[parent_id]: 
[tags]: 
Adding data in PyTorch that will not be in features or labels

I have a neural network that I'm training on a set of 7 features, but would like to also add an extra data array that is not going to be a feature or a label. Specifically, I'm training a network to recognize certain features of astrophysical simulations while blind to which redshift the simulation is in. But in post-processing, while running the model on my test data, I'd like to know the redshift of the tested simulation to see the performance of the model across redshifts. I'm using PyTorch for my model, and currently my data loader workflow is as follows: # This class creates the dataset class make_dataset(): def __init__(self, mode, seed, fin): # get data inp, out = read_data(fin, seed, mode, normalize=True) # get the corresponding bottlenecks and parameters self.size = inp.shape[0] self.input = torch.tensor(inp, dtype=torch.float32) self.output = torch.tensor(out, dtype=torch.float32) print ("size of input and output", np.shape(self.input), np.shape(self.output)) def __len__(self): return self.size def __getitem__(self, idx): return self.input[idx], self.output[idx] # This routine creates a dataset loader def create_dataset(mode, seed, fin, batch_size): data_set = make_dataset(mode, seed, fin) dataset_loader = DataLoader(dataset=data_set, batch_size=batch_size, shuffle=True) return dataset_loader I'm wondering if I can add a line in make_dataset() like so: def __init__(self, mode, seed, fin, redshiftname): # get data inp, out = read_data(fin, seed, mode, normalize=True) f = h5py.File(fin, 'r') rs = f[redshiftname] # get the corresponding bottlenecks and parameters self.size = inp.shape[0] self.input = torch.tensor(inp, dtype=torch.float32) self.output = torch.tensor(out, dtype=torch.float32) print ("size of input and output", np.shape(self.input), np.shape(self.output)) Where redshift name is the name of the dataset corresponding to redshift in the input file. The problem is, how would I access that data once the dataset has been created? I can't mess with the return statement or I'd have to modify hundreds of lines of code for my post-processing as well as for running the actual model. Is this feasible and/or is there a better way of doing this, perhaps a built in method in pytorch? I haven't been able to find something in the documentation.
