[site]: stackoverflow
[post_id]: 580188
[parent_id]: 580099
[tags]: 
It sounds like the key piece of information you're missing is the callback functionality of $.get. You can specify a function as the second or third argument which will fire when the request has completed $.get('http://example.com/data', {'foo':'bar'}, function(resonseData){ //code here will be called when the ajax call has completed }) So you'll want to setup a counter variable somewhere that gets incremented by one once for each request that's made, and then in the callback will decrement this value by one. Then, after you've made the final get request, setup a watcher using setInterval that will check periodically (once a second, say) to see if the counter is zero. If it is, you're done with all your requests. You could probably add this check to the $.get callback itself, but that seems like it might be susceptible to timing issues. That's the basic solution, but this could easily be abstracted out into a more robust/elegant queuing solution.
