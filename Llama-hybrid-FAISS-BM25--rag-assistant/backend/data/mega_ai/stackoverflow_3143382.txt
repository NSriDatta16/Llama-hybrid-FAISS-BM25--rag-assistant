[site]: stackoverflow
[post_id]: 3143382
[parent_id]: 
[tags]: 
What are benefits of JBoss AS-based application architecture?

I am trying to understand what does JBoss AS can bring into the project, comparing to standalone architecture? My model application is a solid thing, starting, running and stopping as a whole and solely at the host. It has a database storage, and communicates to user and other servers, clustering required. It has web-part. It's just a standard big application. JBoss for me is a shell for (in general) multiple applications, providing my application with some standard services. This shell is also a solid thing - "get all or nothing", something can be turned on/off (influencing your app unpredictably, or influencing other part of the JBoss) or replaced (very hard and is already kind a hack) with different version or other module. Standalone application for me is something combined of pieces with glue among them (Spring if you like) with IoC wiring. We can get everything we could have with JBoss, but separately. Spring or other glue serves here like an application server, but it's thinner and we still can replace parts or even Spring itself (IoC wiring is straightforward from coding point of view). For me, standalone, AS-free approach gives more control and flexibility. And further more, last versions of JBoss AS are purely documented, some features (most interested) are not documented at all. So, why somebody still choose JBoss - what are benefits? I favors more standalone application approach, but need more facts to understand better and convince others.
