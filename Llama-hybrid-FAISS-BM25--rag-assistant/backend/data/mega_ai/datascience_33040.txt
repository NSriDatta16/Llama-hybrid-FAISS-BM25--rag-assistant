[site]: datascience
[post_id]: 33040
[parent_id]: 33025
[tags]: 
Train an LSTM-RNN to perform direct sequence classification. This essentially means that it will have multiple inputs and 1 output, i.e. the label (0 or 1). In Keras/Python this is very easy to implement, just make sure that you have a Dense layer in the end with sigmoid activation so that the output is between 0 and 1. You train the network based on your labeled data and then it outputs the label by itself. A useful tutorial on how to do this can be found here . The most important thing is that it inherently deals with linear/nonlinear cross-correlation between inputs so you don't have to explore them yourself. It is also capable of learning the dynamics of the input signals, because of its inherent memory. Keep in mind that in overall it is a very convenient solution because it works like a black box that accepts time series and "spits" out their labels. This approach has worked successfully for me for time series classification :)
