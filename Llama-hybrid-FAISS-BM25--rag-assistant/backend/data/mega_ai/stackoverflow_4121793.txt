[site]: stackoverflow
[post_id]: 4121793
[parent_id]: 4121727
[tags]: 
You've allocated some storage, but you've not properly initialized any of it. You won't get anything reliable to print until you put reliable values into the structures. Additionally, as PaxDiablo also pointed out, you've allocated the space for the R_cidade structure, but not for the Radiof component of it. You're using scanf() to read a value into space that has not been allocated; that is not reliable - undefined behaviour at best, but most usually core dump time. Note that although the two types are linked, the C compiler most certainly doesn't do any allocation of Radiof simply because R_cidade mentions it. It can't tell whether the pointer in R_cidade is meant to be to a single structure or the start of an array of structures, for example, so it cannot tell how much space to allocate. Besides, you might not want to initialize that structure every time - you might be happy to have left pointing nowhere (a null pointer) except in some special circumstances known only to you. You should also verify that the memory allocation succeeded, or use a memory allocator that guarantees never to return a null or invalid pointer. Classically, that might be a cover function for the standard malloc() function: #undef NDEBUG #include void *emalloc(size_t nbytes) { void *space = malloc(nbytes); assert(space != 0); return(space); } That's crude but effective. I use non-crashing error reporting routines of my own devising in place of the assert: #include "stderr.h" void *emalloc(size_t nbytes) { void *space = malloc(nbytes); if (space == 0) err_error("Out of memory\n"); return space; }
