[site]: stackoverflow
[post_id]: 1930132
[parent_id]: 1926067
[tags]: 
There's no guarantee that you'll get the appropriate alignment. Arrays are in general only guaranteed to be aligned for the member type. A char array is aligned for storage of char . The one exception is that char and unsigned char arrays allocated with new are given maximum alignment, so that you can store arbitrary types into them. But this guarantee doesn't apply in your case as you're avoiding heap allocation. TR1 and C++0x add some very helpful types though: std::alignment_of and std::aligned_storage together give you a portable (and functioning) answer. std::alignment_of ::value gives you the alignment required for a type T . std::aligned_storage ::type gives you a POD type with alignment A and size S . That means that you can safely write your object into a variable of type std::aligned_storage ::type . (In TR1, the namespace is std::tr1 , rather than just std )
