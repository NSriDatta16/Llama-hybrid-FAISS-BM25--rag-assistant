[site]: stackoverflow
[post_id]: 4259574
[parent_id]: 741185
[tags]: 
Jeremy's answer wasn't quite working for me, I think because I had a navigation stack in a tab view with a modal dialog on top of it. I'm using the following right now and it is working for me, but your mileage may vary. // dismiss keyboard (mostly macro) [[UIApplication sharedApplication].delegate dismissKeyboard]; // call this in your to app dismiss the keybaord // --- dismiss keyboard (in indexAppDelegate.h) (mostly macro) - (void)dismissKeyboard; // --- dismiss keyboard (in indexAppDelegate.m) (mostly macro) // do this from anywhere to dismiss the keybard - (void)dismissKeyboard { // from: http://stackoverflow.com/questions/741185/easy-way-to-dismiss-keyboard UITextField *tempTextField = [[UITextField alloc] initWithFrame:CGRectZero]; UIViewController *myRootViewController = ; // for simple apps (INPUT: viewController is whatever your root controller is called. Probably is a way to determine this progragrammatically) UIViewController *uivc; if (myRootViewController.navigationController != nil) { // for when there is a nav stack uivc = myRootViewController.navigationController; } else { uivc = myRootViewController; } if (uivc.modalViewController != nil) { // for when there is something modal uivc = uivc.modalViewController; } [uivc.view addSubview:tempTextField]; [tempTextField becomeFirstResponder]; [tempTextField resignFirstResponder]; [tempTextField removeFromSuperview]; [tempTextField release]; }
