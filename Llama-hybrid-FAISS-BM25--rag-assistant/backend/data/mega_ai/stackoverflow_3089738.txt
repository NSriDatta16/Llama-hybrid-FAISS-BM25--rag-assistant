[site]: stackoverflow
[post_id]: 3089738
[parent_id]: 3089643
[tags]: 
On searching more, I found an answer to at least part of my question: Based on: http://wikis.onestepback.org/index.cgi/Tech/Ruby/RubyBindings.rdoc/style/print The rest is from experimentation after Jim Shubert's helpful pointers. This can be accomplished by eval -ing local_variables , instance_variables and global_variables inside the binding. You can do something as described below, given var_name , new_val , my_binding (syntax may be imperfect or improvable, feel free to suggest in comments. Also, I couldn't get the code formatting to work inside the list, suggestions for how to do that will also be implemented.) You can straightforwardly take (2) and loop the hash to do this. See the second code block below. The idea is to start with TOPLEVEL_BINDING, which I believe normally just includes the global variables. This does involve using string eval . However, no variable values are ever expanded into the strings involved, so it should be fairly safe if used as described, and should work to 'pass in' complex variable values. Also note that it's always possible to do eval var_name, my_binding to get a variable's value. Note that in all of these uses it's vital that the variable's name be safe to eval, so it should ideally not come from any kind of user input at all. Setting a variable inside a binding given var_name , new_val , my_binding : # the assignment to nil in the eval coerces the variable into existence at the outer scope setter = eval "#{var_name} = nil; lambda { |v| #{var_name} = v }", my_binding setter.call(new_val) Building a "bespoke" binding: my_binding = eval "lambda { binding }", TOPLEVEL_BINDING # build a nearly-empty binding # set_in_binding is based on the above snippet vars_to_include.each { |var_name, new_val| set_in_binding(var_name, new_val, my_binding) }
