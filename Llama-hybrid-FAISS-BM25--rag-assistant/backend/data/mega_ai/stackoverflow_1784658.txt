[site]: stackoverflow
[post_id]: 1784658
[parent_id]: 1517460
[tags]: 
But I'm also interested in what Justin stated that I can have a common extended view helper? That all my views or controllers can access for doing repetative tasks like some html divs/styles, etc.... How would I go about getting that set up? In the answers you ask this additional question. My answer deals with that too. First you need to ask yourselves why you want to have multiple helper functions in one class One reason is that you saves you extra classes and file includes. How could you do so? If they are related you can put them into one view helper. But don't do things like $this->htmlWrapper()->wrapParapgraph()->wrapContentBox() ->translateFromTo('NL', 'EN'); translateFromTo(…) has nothing to with html-wrapping. If you want to optimize your includes, you can put you common helper code into a derived View-class: class MyView extends Zend_View { function wrapParagraph() {} function otherFunction() {} } This option is also mentioned in the zend framework guide as a means of optimization. Please note that view helper reusability isn't affected by the choice to create view helpers as separate classes. You automatically get access to the current view oject if your helper extends Zend_View_Helper_Abstract . class My_View_Helper extends Zend_View_Helper_Abstract { function wrapParagraph($content) { // do something … return $this->someOtherViewHelper(); } } Further you wrote $formVars=$this->formVars(); This doesn't make sense actualy, since Zend_View registers only one view helper per view isntance. $formVars=$this->formVars(); $formVars->doOneThing(); $formVars->doSecondThing(); is equivalent to $this->formVars()->doOneThing(); $this->formVars()->doSecondThing(); The Singleton aspect has a severe impact on the way you design view helpers as you see.
