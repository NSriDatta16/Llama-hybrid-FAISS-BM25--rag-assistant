[site]: stackoverflow
[post_id]: 2990699
[parent_id]: 2990601
[tags]: 
You can get rid of the initializing and incrementing of the counter variables i and j like this: 0.upto(((to_date-from_date)/(60*60*24)).to_i) do |j| 0.upto(48) do |i| event = Icalendar::Event.new status = get_availability_on_date_and_hour(@templates, @availabilities, from_date+j.days, i).downcase if(status != 'unavailable') #Initialize start and end dates in DateTime's civil format bias_date_time = DateTime.civil(from_date.year, from_date.month, from_date.day) event.dtstart = bias_date_time + j.day + (i/2).to_i.hour + (i%2*30).to_i.minutes event.dtend = event.dtstart + 30.minutes event.summary = status.upcase cal.add_event(event) end end end This code is 6 lines shorter than yours, can't do anything about the code within the loops, because I don't really understand what you're doing there. Update: An Alternative that works too: ((to_date-from_date)/(60*60*24)).to_i.times do |j| 48.times do |i| event = Icalendar::Event.new status = get_availability_on_date_and_hour(@templates, @availabilities, from_date+j.days, i).downcase if(status != 'unavailable') #Initialize start and end dates in DateTime's civil format bias_date_time = DateTime.civil(from_date.year, from_date.month, from_date.day) event.dtstart = bias_date_time + j.day + (i/2).to_i.hour + (i%2*30).to_i.minutes event.dtend = event.dtstart + 30.minutes event.summary = status.upcase cal.add_event(event) end end end
