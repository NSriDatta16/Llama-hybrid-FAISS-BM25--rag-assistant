[site]: stackoverflow
[post_id]: 2497446
[parent_id]: 2497339
[tags]: 
My subjective viewpoint: MEF looks like a really nice plug-in framework; it's not designed to be a full-fledged DI framework. If you don't need the live swappable components, investigate full DI/IoC Container frameworks . Unity is Microsoft's alternative. Make sure you are not doing the Service Locator anti-pattern . Use constructor injection of interfaces whenever possible. See this great post by Mark Seemann and this one by Jimmy Bogard . Your statement that you "utilize the container as much as possible" is a concern - few classes need to know anything about the container. Get a really good mocking/isolation framework and learn to use it well. I love Moq . Try to do state verification on the system under test rather than behavior verification on the mock whenever possible. Read The Art of Unit Testing . Read other books and articles on unit testing. Practice TDD . Keep learning. Read Clean Code and insure that your classes follow the SOLID principles (especially the Single Responsibility Principle ). Lengthy mock setup is a code smell; your classes are probably doing too much. High code coverage is nice, but a better metric might be cyclomatic complexity . Don't worry about your unit tests taking longer to write than the production code. Treat your tests like production code, though, and remove duplication whenever you can preserve readability and maintainability.
