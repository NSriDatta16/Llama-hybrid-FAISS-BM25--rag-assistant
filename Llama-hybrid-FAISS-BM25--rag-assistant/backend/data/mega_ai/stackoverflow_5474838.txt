[site]: stackoverflow
[post_id]: 5474838
[parent_id]: 5474765
[tags]: 
It's all described in Tomcat's ClassLoading HOW-TO . It's not necessarily in alphabetic order. If you observed that behaviour, it should absolutely not be relied upon if you intend to keep your webapp portable across servers. For example, Tomcat 6 "coincidentally" orders it, but Tomcat 8 does not. Summarized, the loading order is as follows: bootstrap/system ( JRE/lib , then server.loader ) webapp libraries ( WEB-INF/classes , then WEB-INF/lib ) common libraries ( common.loader , then Tomcat/lib ) webapp-shared libraries ( shared.loader ) If you would like to guarantee that JAR X is loaded after JAR Y, then you'd need to put JAR X in one of the places which appears later in the listing above. There are exceptions however, which are mentioned in the tomcat docs Lastly, the web application class loader will always delegate first for JavaEE API classes for the specifications implemented by Tomcat (Servlet, JSP, EL, WebSocket). All other class loaders in Tomcat follow the usual delegation pattern. That means if a webapp contains any JavaEE classes ( javax.* ), then it will be ignored by tomcat. For each loader, the classes are just loaded by the JVM in the order whenever they needs to be imported/executed and are not loaded yet.
