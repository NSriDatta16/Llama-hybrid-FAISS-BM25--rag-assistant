[site]: stackoverflow
[post_id]: 2430589
[parent_id]: 2430552
[tags]: 
You can't really do that, because the this value by definition is immutable , you can't change in that way what it references to. A workaround would be to use the call or apply methods to run your ObjX constructor function in the this object of ObjY : function ObjY(a,b,c) { ObjX.call(this, a, b * 12); this.$c = c; } In the above example, the ObjX function is executed changing its this value, so all property extensions you make to that object in this function, will be reflected in the new object that the this value refers in the ObjY constructor. As soon the call method ends, the this object will be augmented and you can make more property extensions, like adding your $c value. Edit: About the prototypes, your sample will not work, because the prototype property has no special meaning for object in stances it will be just as any other property, it should be used on constructor functions . I think you might be confusing the prototype property of constructors with the internal [[Prototype]] property that all objects have. The [[Prototype]] property can only be set by the new operator (through the [[Construct]] internal operation), this property can't be changed, (although some implementations, like the Mozilla one, you can access it through obj.__proto__; , and in ECMAScript 5 , the Object.getPrototypeOf method has been introduced, but I wouldn't recommend you to mess directly with it). Actually, when your constructor function is executed, the internal [[Prototype]] property of the object that the this value refers, has already been set to its constructor's prototype property. So, as @Anurag comments, you could set the ObjY.prototype to a newly created ObjX object: function ObjY(a,b,c) { ObjX.call(this, a, b * 12); this.$c = c; } ObjY.prototype = new ObjX(); ObjY.prototype.constructor = ObjY; That will make that your ObjY inherit also the properties added to the ObjX.prototype , and as you see, I changed the ObjY.prototype.constructor , since the assignment in the line above will make this property to wrongly point to ObjX . Recommended articles: Constructors considered mildly confusing JavaScript Prototypal Inheritance
