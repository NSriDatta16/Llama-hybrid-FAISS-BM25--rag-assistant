[site]: stackoverflow
[post_id]: 1467810
[parent_id]: 1034343
[tags]: 
My solution is not pretty. Basically there is a scroll view who contains a content view. The scroll view does not implement touchesBegan,Moved,Ended at all. The content view maintains a pointer to his parent (called "parentScrollView" in this example). The content view handles the logic and uses [parentScrollView setCanCancelContentTouches:...] to determine whether or not to let the parent view cancel a touch event (and thus perform a scroll event). The tap count logic is there because users rarely place both fingers onscreen at exactly the same time so the first touch must be ignored if it is very quickly followed by a second. -(void)touchesBegan:(NSSet*)touches withEvent:(UIEvent*)event { if(parentViewIsUIScrollView) { UIScrollView * parentScrollView = (UIScrollView*)self.superview; if([touches count] == 1) { if([[touches anyObject] tapCount] == 1) { if(numberOfTouches > 0) { [parentScrollView setCanCancelContentTouches:NO]; //NSLog(@"cancel NO - touchesBegan - second touch"); numberOfTouches = 2; } else { [parentScrollView setCanCancelContentTouches:YES]; //NSLog(@"cancel YES - touchesBegan - first touch"); numberOfTouches = 1; } } else { numberOfTouches = 1; [parentScrollView setCanCancelContentTouches:NO]; //NSLog(@"cancel NO - touchesBegan - doubletap"); } } else { [parentScrollView setCanCancelContentTouches:NO]; //NSLog(@"cancel NO - touchesBegan"); numberOfTouches = 2; } //NSLog(@"numberOfTouches_touchesBegan = %i",numberOfTouches); } } -(void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event { if(touchesCrossed) return; if(parentViewIsUIScrollView) { UIScrollView * parentScrollView = (UIScrollView*)self.superview; NSArray * thoseTouches = [[event touchesForView:self] allObjects]; if([thoseTouches count] != 2) return; numberOfTouches = 2; /* compute and perform pinch event */ [self setNeedsDisplay]; [parentScrollView setContentSize:self.frame.size]; } } - (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event { touchesCrossed = NO; if(parentViewIsUIScrollView) { numberOfTouches = MAX(numberOfTouches-[touches count],0); [(UIScrollView*)self.superview setCanCancelContentTouches:YES]; //NSLog(@"cancel YES - touchesEnded"); //NSLog(@"numberOfTouches_touchesEnded = %i",numberOfTouches); } }
