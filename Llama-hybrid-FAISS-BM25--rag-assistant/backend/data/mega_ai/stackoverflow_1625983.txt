[site]: stackoverflow
[post_id]: 1625983
[parent_id]: 1625226
[tags]: 
3. This kind of linked list is not very practical nowadays. Its main benefit is to save memory, which is generally cheap and plentiful. The wikipedia article you linked to pretty clearly spells out the disadvantages: This form of linked list may be inadvisable: General-purpose debugging tools cannot follow the XOR chain, making debugging more difficult; The price for the decrease in memory usage is an increase in code complexity, making maintenance more expensive; Most garbage collection schemes do not work with data structures that do not contain literal pointers; XOR of pointers is not defined in some contexts (e.g., the C language), although many languages provide some kind of type conversion between pointers and integers; The pointers will be unreadable if one isn't traversing the list â€” for example, if the pointer to a list item was contained in another data structure; While traversing the list you need to remember the address of the previously accessed node in order to calculate the next node's address. Computer systems have increasingly cheap and plentiful memory, and storage overhead is not generally an overriding issue outside specialized embedded systems. Where it is still desirable to reduce the overhead of a linked list, unrolling provides a more practical approach (as well as other advantages, such as increasing cache performance and speeding random access).
