[site]: stackoverflow
[post_id]: 2488433
[parent_id]: 2376072
[tags]: 
The solution I came up with harnessed the django-hitcount app and a "wrapping" of the original view. Luckily, I have an object ( Page ) that I can associate with the view I'm trying to limit, so the hitcount app works well (and mostly as intended). The view I'm tracking is line_list -- so I called the new view to wrap it line_list_monitor and associated the original url for line_list with it. The new view is included below. If the IP in question is over the limit (20 views per week), I redirect to overlimit.html, else the original view just gets called like normal. def line_list_monitor(request, character, pagenum): LIMIT_HITS = 20 LIMIT_PERIOD = {'weeks': 1} obj, created = Page.objects.get_or_create(character=character, page=pagenum) obj_pk = obj.pk ctype = ContentType.objects.get_for_model(obj) hitcount, created = HitCount.objects.get_or_create(content_type=ctype, object_pk=obj_pk) hit = Hit(session="", hitcount=hitcount, ip=get_ip(request), user_agent="") hit.save() period = datetime.datetime.utcnow() - datetime.timedelta(**LIMIT_PERIOD) count = hitcount.hit_set.filter(ip=get_ip(request), created__gte=period).count() if count > LIMIT_HITS: template = "overlimit.html" return render_to_response(template, context_instance=RequestContext(request)) else: return line_list(request, character, page)
