[site]: stackoverflow
[post_id]: 4783315
[parent_id]: 
[tags]: 
C# attempt to reentrantly lock something deadlocked, apparent bug

Curious to know if anyone else has seen this problem. I have an application that locks a statically declared object, this way: lock(Group.IsisGroups) { do some stuff } do-some-stuff does various stuff and one of the routines I called attempts to lock the same lock. Thread deadlocks. My guess is that this issue is somehow tied to my use of reflection: mid-way down the call stack I do a call to a method by looking it up in the class definition and calling .Invoke(). The call stack that results is this: [In a sleep, wait, or join] [External Code] ConsoleApplication2.exe!Isis.Group.doLookup(Isis.Address gaddr) Line 3774 + 0x13 bytes ConsoleApplication2.exe!Isis.ReliableSender.GotIncoming(byte type, Isis.Address gaddr, Isis.Address sender, int minStable, Isis.Msg m) Line 10179 + 0x9 bytes ConsoleApplication2.exe!Isis.ReliableSender.doReceive.AnonymousMethod14(byte type, byte code, int seqn, int truePayLoadLen, int PreFragLen, Isis.Address sender, Isis.Address dest, Isis.Address gaddr, int minStable, int FID, int Fn, int nF, byte[] buf) Line 3120 + 0x80 bytes [External Code] ConsoleApplication2.exe!Isis.Msg.doInvokeSingle(System.Delegate del, byte[] barray, System.Type[] types) Line 11582 + 0x10 bytes ConsoleApplication2.exe!Isis.Msg.InvokeFromBArray(byte[] barray, System.Delegate del) Line 11527 + 0xf bytes ConsoleApplication2.exe!Isis.ReliableSender.doReceive(object os, Isis.Group g) Line 10034 + 0x71 bytes ConsoleApplication2.exe!Isis.ReliableSender.Receive(Isis.Group g) Line 10013 + 0xe bytes ConsoleApplication2.exe!Isis.ReliableSender.StartGroupReader.AnonymousMethod__6(object o) Line 9097 + 0xc bytes [External Code] So the initial call to lock(Group.IsisGroups) is in the top method on the stack ReliableSender.StartGroupReader and the code deadlocks when it calls lock in the bottom method, doLookup. The [External Code] blocks are from where I called the reflection Invoke() method, and from the call into lock() that caused things to deadlock. Definitely the same object being locked, etc (the object is statically allocated when my class is loaded and is of type List and while I do add and remove things, the actual List object remains througout. Any suggestions on what could cause this?
