[site]: stackoverflow
[post_id]: 4640556
[parent_id]: 
[tags]: 
How would one write down this mathematical expression programmatically?

The sum of f(i) for all integers i = k, k + 1, .., continuing only as long as the condition p(i) holds. I'm going for: for (i = 0; i based on the following Common LISP code: (sigma ((v sine-coeff) (w E-factor) (x solar-coeff) (y lunar-coeff) (z moon-coeff)) (* v (expt cap-E w) (sin-degrees (+ (* x solar-anomaly) (* y lunar-anomaly) (* z moon-argument))))))) where sigma is: (defmacro sigma (list body) ;; TYPE (list-of-pairs (list-of-reals->real)) ;; TYPE -> real ;; $list$ is of the form ((i1 l1)..(in ln)). ;; Sum of $body$ for indices i1..in ;; running simultaneously thru lists l1..ln. `(apply '+ (mapcar (function (lambda ,(mapcar 'car list) ,body)) ,@(mapcar 'cadr list)))) (for full source code, see Calendrical calculations source code Edit Thanks for all your answers. Investigating the code examples, I have come to the conclusion that, in programming terms, the author indeed ment that one has to loop over a certain set of values. From that, it was easy to conclude that p had to return False when it has run out of values, i.e. control has reached the end of the list.
