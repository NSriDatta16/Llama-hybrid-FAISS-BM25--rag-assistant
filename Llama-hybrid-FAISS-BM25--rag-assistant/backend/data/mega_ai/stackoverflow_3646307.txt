[site]: stackoverflow
[post_id]: 3646307
[parent_id]: 
[tags]: 
Python "ImportError: No module named" Problem

I'm running Python 2.6.1 on Windows XP SP3. My IDE is PyCharm 1.0-Beta 2 build PY-96.1055. I'm storing my .py files in a directory named "src"; it has an __init__.py file that's empty except for an " __author__ " attribute at the top. One of them is called Matrix.py: #!/usr/bin/env python """ "Core Python Programming" chapter 6. A simple Matrix class that allows addition and multiplication """ __author__ = 'Michael' __credits__ = [] __version__ = "1.0" __maintainer__ = "Michael" __status__ = "Development" class Matrix(object): """ exercise 6.16: MxN matrix addition and multiplication """ def __init__(self, rows, cols, values = []): self.rows = rows self.cols = cols self.matrix = values def show(self): """ display matrix""" print '[' for i in range(0, self.rows): print '(', for j in range(0, self.cols-1): print self.matrix[i][j], ',', print self.matrix[i][self.cols-1], ')' print ']' def get(self, row, col): return self.matrix[row][col] def set(self, row, col, value): self.matrix[row][col] = value def rows(self): return self.rows def cols(self): return self.cols def add(self, other): result = [] for i in range(0, self.rows): row = [] for j in range(0, self.cols): row.append(self.matrix[i][j] + other.get(i, j)) result.append(row) return Matrix(self.rows, self.cols, result) def mul(self, other): result = [] for i in range(0, self.rows): row = [] for j in range(0, other.cols): sum = 0 for k in range(0, self.cols): sum += self.matrix[i][k]*other.get(k,j) row.append(sum) result.append(row) return Matrix(self.rows, other.cols, result) def __cmp__(self, other): """ deep equals between two matricies first check rows, then cols, then values """ if self.rows != other.rows: return self.rows.cmp(other.rows) if self.cols != other.cols: return self.cols.cmp(other.cols) for i in range(0, self.rows): for j in range(0, self.cols): if self.matrix[i][j] != other.get(i,j): return self.matrix[i][j] == (other.get(i,j)) return True # if you get here, it means size and values are equal if __name__ == '__main__': a = Matrix(3, 3, [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) b = Matrix(3, 3, [[6, 5, 4], [1, 1, 1], [2, 1, 0]]) c = Matrix(3, 3, [[2, 0, 0], [0, 2, 0], [0, 0, 2]]) a.show() b.show() c.show() a.add(b).show() a.mul(c).show() I've created a new directory named "test" that also has an __init__.py file that's empty except for an " __author__ " attribute at the top. I've created a MatrixTest.py to unit my Matrix class: #!/usr/bin/env python """ Unit test case for Matrix class See http://jaynes.colorado.edu/PythonGuidelines.html#module_formatting for Python coding guidelines """ import unittest #use my unittestfp instead for floating point from src import Matrix # Matrix class to be tested __author__ = 'Michael' __credits__ = [] __license__ = "GPL" __version__ = "1.0" __maintainer__ = "Michael" __status__ = "Development" class MatrixTest(unittest.TestCase): """Unit tests for Matrix class""" def setUp(self): self.a = Matrix.Matrix(3, 3, [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) self.b = Matrix.Matrix(3, 3, [[6, 5, 4], [1, 1, 1], [2, 1, 0]]) self.c = Matrix.Matrix(3, 3, [[2, 0, 0], [0, 2, 0], [0, 0, 2]]) def testAdd(self): expected = Matrix.Matrix(3, 3, [[7, 7, 7], [5, 6, 7], [9, 9, 9]]) # need to learn how to write equals for Matrix self.a.add(self.b) assert self.a == expected if __name__ == '__main__': #run tests if called from command-line suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions) unittest.TextTestRunner(verbosity=2).run(suite) Yet when I try to run my MatrixTest I get this error: C:\Tools\Python-2.6.1\python.exe "C:/Documents and Settings/Michael/My Documents/Projects/Python/learning/core/test/MatrixTest.py" Traceback (most recent call last): File "C:/Documents and Settings/Michael/My Documents/Projects/Python/learning/core/test/MatrixTest.py", line 8, in from src import Matrix # Matrix class to be tested ImportError: No module named src Process finished with exit code 1 Everything I've read tells me that having the init .py in all my directories should take care of this. If someone could point out what I've missed I'd greatly appreciate it. I'd also like advice on the best way to develop and maintain source and unit test classes. I'm thinking about this the way I usually do when I write Java: /src and /test directories, with identical package structures underneath. Is this "Pythonic" thinking, or should I consider another organization scheme? UPDATE: Thanks to those who have answered, here's the solution that worked for me: Change import to from src import Matrix # Matrix class to be tested Add sys.path as an environment variable to my unittest configuration, with ./src and ./test directories separated by semi-colon. Change declarations in MatrixTest.py as shown.
