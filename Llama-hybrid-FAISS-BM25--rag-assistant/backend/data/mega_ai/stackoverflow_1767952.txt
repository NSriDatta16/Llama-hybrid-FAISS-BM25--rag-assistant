[site]: stackoverflow
[post_id]: 1767952
[parent_id]: 
[tags]: 
Algorithm to swap independent and dependent variables of function samples

Suppose you have several functions y1 = f1(x), y2 = f2(x), etc. and you want to plot their graphs together on one plot. Imagine now that for some reason it is easier to obtain the set of x for a given y; as in, there exists an oracle which given a y, will return all the x1, x2, etc. in increasing order for which y = f1(x1), y = f2(x2), etc.. In essence, it computes the inverse functions given a y. Suppose you uniformly sample in y, so you have a list of lists of x's. If you plot this data treating all the first x in each sublist as a function of y, and all the second x's in each sublist as a different function of y, etc., you obtain a plot like below. In the above plot, the horizontal axis is y, and the vertical axis is x. Note that the navy blue "curve" is the set of smallest x as a function of y (the set of points you would see looking up from underneath the plot), while the magenta curve is the set of second smallest x, etc. Obviously, the far left navy blue and magenta curves belong to a single function and should be connected. As you move towards the right, there are ambiguities and cross-overs. In those cases, it doesn't matter how the curves of the functions are connected, as long as it "looks" reasonable (there is a proper way, but I'll settle for this for now). Now, the algorithm output should be samples of y as a function of x for each function, which when you plot it would look like: (Apologies for the poor Paint edit job :) I was thinking I proceed going one column at a time in the first pic and trying to match adjacent values based on slopes and how close they are to each other, but I'm not sure if there is a better way. Also, if this is a solved or documented problem, then I have no idea what to Google for, so any pointers would be helpful. Aside The actual application is in the computation of band structures of crystals, for anyone who is curious. The functions are the bands of the crystal, with the horizontal axis of the first plot being frequency, and the vertical axis is the k-vector. It turns out solving an eigenvalue problem for each frequency to get the eigenvalues (the k's) is easier in this case. It is fairly common to need to "prettify" and connect the resulting band structure plots, and I was wondering if there is an algorithmic way of doing it instead of having to do it by hand.
