[site]: stackoverflow
[post_id]: 1629417
[parent_id]: 1629406
[tags]: 
To get a compile-time error implement it as: template T GetGlobal(const char *name) { T::unimplemented_function; } // `unimplemented_function` identifier should be undefined If you use Boost you could make it more elegant: template T GetGlobal(const char *name) { BOOST_STATIC_ASSERT(sizeof(T) == 0); } C++ Standard guarantees that there is no such type which has sizeof equal to 0, so you'll get a compile-time error. As sbi suggested in his comments the last could be reduced to: template T GetGlobal(const char *name) { char X[!sizeof(T)]; } I prefer the first solution, because it gives more clear error message (at least in Visual C++) than the others.
