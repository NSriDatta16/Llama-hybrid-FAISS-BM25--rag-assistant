[site]: stackoverflow
[post_id]: 4363998
[parent_id]: 4363361
[tags]: 
My 2c on the shared schema approach... This is my preferred approach(personal preference) but the way I see it is that the key differentiated factor is not the business logic but rather the retrieval of the data. This is one approach. The business logic will and should operate the same way regardless of the data provided. In terms of code, the data layer should be responsible for pulling only the correct tenants data based on the tenant id. There may be some opinions that this filtering of data by tenant be also done in the business layer. One advantage is that you have the added benefit of making sure you are working with the correct tenant's data. I don't think you will find a proper starter kit for a SAAS app. The best way in my opinion would be to read the code of a few completed projects to get you started. On to some resources (since you have not specified what technology exactly, I am providing asp.net-mvc-related links) If you planning on using asp.net-mvc, i suggest having a look at Mike Hadlows blog and Sutekishop application as well as Rob Ashton's series on some concepts of multi-tenancy. if you planning on using asp.net webforms, look at LitwareHR on codeplex ( I have not personally looked through the source code, but apparently it is built of the same principles of the linked article in the question). If I'm not mistaken, I think that Dot Net Nuke is also a multi tenant app.
