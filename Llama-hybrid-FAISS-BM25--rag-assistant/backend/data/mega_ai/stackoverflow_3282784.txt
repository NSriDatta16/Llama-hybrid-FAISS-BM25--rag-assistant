[site]: stackoverflow
[post_id]: 3282784
[parent_id]: 3277297
[tags]: 
Mystere Man, I read your question as asking how do we do it. For me, I have one word: Context. Keep it in context. I'll explain. You could build an entire web application from one page if you like. Technically it is possible even though it would be as confusing as all get out. I group my functionality together into logical pieces like "Selecting a Product". I used to make a single page grouping the process "Checking Out", but high discourage that now as my team has had to jump into the process at a specific points like automatically adding products to the shopping cart and then displaying the final page in the check-out process. (think of getting a free download: you don't need shipping information, billing formation or their name). With your numbered list above, if it is all on feature, then I would make it one physical page, but I'd break it into multipages if it turns out that I have to "jump into" the flow. If you make it one page, you need clear boundaries. I don't use cross-posting. I like to use multiview controllers. For me, it is important to clearly identify what each view needs for it to be active. In my page load event, I have one method call that looks at the querystring or session variables or cookies (these are my state holding containers) and, based on what is set, I make active one view. There is no more code in the page load, instead, I use the view's load event to be my pseudo page load. I code whatever that specific view is supposed to do. With that approach, I think ASP.NET's MVC pattern is where I should be going.
