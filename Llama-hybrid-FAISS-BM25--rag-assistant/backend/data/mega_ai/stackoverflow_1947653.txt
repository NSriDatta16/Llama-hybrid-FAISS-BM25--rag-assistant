[site]: stackoverflow
[post_id]: 1947653
[parent_id]: 
[tags]: 
ASP.NET MVC - Secure Temporary Storage of Credit Card Data

I have a checkout process for a shopping cart that is currently storing credit card data in the session for retrieval once the user finalizes the purchase. The purchase process is set up such that the user inputs the credit card, views a confirmation page, and then finalizes the order. The confirmation and finalization actions are the only two actions that need access to the credit card data and to be safe all other actions should discard it. Short of doing reflection in a base controller to check the current action the user is calling, I cannot think of an elegant way to discard the data on the disallowed requests. Additionally, if the user fails to make another request after entering the data it will linger in the session until they come back to the website- whenever that happens. One suggestion I was offered was encrypting the data into a hidden field and relying on the SSL ticket to prevent caching the markup. This seems like a fairly safe approach, but I don't much like the idea of placing the credit card data in a user-accessible location encrypted or not. Storing in the database is out because the client does not want credit card data saved. What is the ideal approach to temporarily persisting sensitive data like credit card information across more than one page request? Perhaps someone can tell me if this is a sufficient approach. I have set my Shopping Cart which is stored in the session to have a unique Guid generated every time the object is newed and that Guid is used as a key to encrypt and decrypt the credit card data which i am serializing with the Rijndael algorithm . The encrypted card data is then passed to the user in a hidden field and deserialized after finalize is clicked. The end result is a string much like this: VREZ%2bWRPsfxhNuOMVUBnWpE%2f0AaX4hPgppO4hHpCvvwt%2fMQu0hxqA%2fCJO%2faOEi%2bX3n9%2fP923mVestb7r8%2bjkSVZDVccd2AJzCr6ak7bbZg8%3d public static string EncryptQueryString(object queryString, Guid encryptionKey) { try { byte[] key = Encoding.UTF8.GetBytes(ShortGuid.Encode(encryptionKey).Truncate(16));//must be 16 chars var rijndael = new RijndaelManaged { BlockSize = 128, IV = key, KeySize = 128, Key = key }; ICryptoTransform transform = rijndael.CreateEncryptor(); using (var ms = new MemoryStream()) { using (var cs = new CryptoStream(ms, transform, CryptoStreamMode.Write)) { byte[] buffer = Encoding.UTF8.GetBytes(queryString.ToString()); cs.Write(buffer, 0, buffer.Length); cs.FlushFinalBlock(); cs.Close(); } ms.Close(); return HttpUtility.UrlEncode(Convert.ToBase64String(ms.ToArray())); } } catch { return null; } }
