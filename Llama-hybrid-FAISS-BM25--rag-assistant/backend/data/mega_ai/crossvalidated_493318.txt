[site]: crossvalidated
[post_id]: 493318
[parent_id]: 493284
[tags]: 
Broadly speaking, you are correct that in machine learning we are given some data $\mathbf{X}$ and labels $y$ and we want to learn some function $f$ , such that $$ y = f(\mathbf{X}) + \varepsilon $$ where $\varepsilon$ is some noise. More formally, this is an oversimplification, as noise does not have to be additive, and the structure of noise may be mroe complicated, though the take away message is that the function $f$ is noisy. So yes, $f$ is a mathematical function. For simple functions (decision tree, $k$ -NN, naive Bayes, linear regression) and small datasets you could solve the machine learning problems by pen and paper. For real life problems, this would be at best time demanding, if not impossible, so we use computers to help us. So machine learning does not have to be about "turning math into code", though it usually is. Machine learning usually does not "require you to create and think of math equation that will make accurate prediction and turn it into code". It is true, that in some cases we want to describe problems with custom mathematical functions, and use optimization algorithms to fit those functions to the data, though I'd say that this is usually realm of statistics rather than machine learning. In machine learning you usually choose among available models (naive Bayes, random forest, XGBoost, $k$ -NN, SVM, etc), or among deep learning architectures (feed forward, RNN, Transformer, CNN, etc), where you usually need to make some adjustments to the models (hyperparameter tuning, changes in the architecture), since out-of-the-box they do not need to give you perfect fit to the data. Those models are the "building blocks", similar to the "building blocks" you can use for web development in popular frameworks. There also are some frameworks you can use, e.g. scikit-learn , PyTorch , or Keras , but same as with web development frameworks, you need to learn to use them first. Would there in the future be a programming language or framework where we can learn set of tools to make certain outcome without knowing what's behind it? This is a rather philosophical question. You seem to be referring to something known as automated machine learning (AutoML), where the algorithms would "learn by themselves" without needing human supervision. It's hard to say if we'd ever achieve this, as machine learning problems usually require a lot of human expertise to done correctly. Another problem is that in machine learning we often see garbage in, garbage out issues, where bad data leads to poor results. In many cases machine learning algorithm by itself won't know that the results are bad, as this would need it to understand the world and have knowledge about the world, i.e. we would be talking rather about general artificial intelligence. Using web design analogy again, the available web design frameworks do not as well solve problems themselves, you need human developers that know how to use them to create a web page. You can check the open access Automated Machine Learning book by Hutter, Kotthoff, and Vanschoren for more detail. Finally, let me try to answer the general question I read between the lines. You seem to be asking if one needs to dive deep into mathematics to use machine learning. For doing basic stuff, you don't have to. You can simply pick some out-of-the-box model from scikit-learn and apply it to your data, same as you could use WordPress and some free layout to setup online blog in few clicks. On another hand, for many problems the simple solutions would be not enough.
