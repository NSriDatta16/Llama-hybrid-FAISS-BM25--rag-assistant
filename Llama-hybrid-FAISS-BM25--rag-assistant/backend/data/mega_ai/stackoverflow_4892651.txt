[site]: stackoverflow
[post_id]: 4892651
[parent_id]: 135834
[tags]: 
I have a rich experience of using swig. SWIG claims that it is a rapid solution for wrapping things. But in real life... Cons: SWIG is developed to be general, for everyone and for 20+ languages. Generally, it leads to drawbacks: - needs configuration (SWIG .i templates), sometimes it is tricky, - lack of treatment of some special cases (see python properties further), - lack of performance for some languages. Python cons: 1) Code style inconsistency . C++ and python have very different code styles (that is obvious, certainly), the possibilities of a swig of making target code more Pythonish is very limited. As an example, it is butt-heart to create properties from getters and setters. See this q&a 2) Lack of broad community . SWIG has some good documentation. But if one caught something that is not in the documentation, there is no information at all. No blogs nor googling helps. So one has to heavily dig SWIG generated code in such cases... That is terrible, I could say... Pros: In simple cases, it is really rapid, easy and straight forward If you produced swig interface files once, you can wrap this C++ code to ANY of other 20+ languages (!!!). One big concern about SWIG is a performance. Since version 2.04 SWIG includes '-builtin' flag which makes SWIG even faster than other automated ways of wrapping. At least some benchmarks shows this. When to USE SWIG? So I concluded for myself two cases when the swig is good to use: 2) If one needs to wrap C++ code for several languages . Or if potentially there could be a time when one needs to distribute the code for several languages. Using SWIG is reliable in this case. 1) If one needs to rapidly wrap just several functions from some C++ library for end use. Live experience Update : It is a year and a half passed as we did a conversion of our library by using SWIG. First, we made a python version. There were several moments when we experienced troubles with SWIG - it is true. But right now we expanded our library to Java and .NET. So we have 3 languages with 1 SWIG. And I could say that SWIG rocks in terms of saving a LOT of time. Update 2 : It is two years as we use SWIG for this library. SWIG is integrated into our build system. Recently we had major API change of C++ library. SWIG worked perfectly. The only thing we needed to do is to add several %rename to .i files so our CppCamelStyleFunctions() now looks_more_pythonish in python. First I was concerned about some problems that could arise, but nothing went wrong. It was amazing. Just several edits and everything distributed in 3 languages. Now I am confident that it was a good solution to use SWIG in our case. Update 3 : It is 3+ years we use SWIG for our library. Major change : python part was totally rewritten in pure python. The reason is that Python is used for the majority of applications of our library now. Even if the pure python version works slower than C++ wrapping, it is more convenient for users to work with pure python, not struggling with native libraries. SWIG is still used for .NET and Java versions. The Main question here "Would we use SWIG for python if we started the project from the beginning?". We would! SWIG allowed us to rapidly distribute our product to many languages. It worked for a period of time which gave us the opportunity for better understanding our users requirements.
