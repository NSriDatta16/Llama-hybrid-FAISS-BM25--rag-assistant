[site]: stackoverflow
[post_id]: 1359164
[parent_id]: 1359047
[tags]: 
Let me preface my response by saying that putting every possible combination in a database feels wrong. I'll get to why in a minute. I'd start with a table called Cards. There would be 1 record for every possible card and it would include fields for Suit, Face value, rank and yes, a CardID as a primary key. Also index the suit, and face value. If you want to table out every possible Hold'em hand, then I would make separate tables for the pocketCards(pocketID, pCardID1, pCardID2), flopCards(flopID, fCardID1, fCardID2, fCardID3) then a table for the TurnAndRiver(turnAndRiverID, turnCardID, riverCardID). Then a Hand table with (handID, pocketID, flopID, turnAndRiverID, handScore). HandScore would be a calculated field run off of a table or scalar value function. By separating out those bits, you avoid a great deal of the duplication, but you will still have to worry about card selection and overlap. Ideally, I would forgo the hand tables and calculate the hand and score in what ever application I was building to consume this data. Putting too much of your logic in the database may make it hard to adapt when the client asks you to model Omaha or five-card draw for example. In reguard to your index question, yes, I would use a primary key as that will allow you to quickly reference a specific hand in your code. Update In response to the OP's Edit: It sounds like you are using the wrong tool for this task. What is the value of having the data in a Database if you are always going to select the exact same recordset? Examine other options (like a flat XML file, or a static DataSet in your code for example). It will save you the connection time and the overhead of running a server for what is essentially static data.
