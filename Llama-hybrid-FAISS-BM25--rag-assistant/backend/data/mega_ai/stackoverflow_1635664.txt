[site]: stackoverflow
[post_id]: 1635664
[parent_id]: 
[tags]: 
C++ STL:map search by iterator to another map

I'm trying to jump through some hoops to organize data in a special way. I'm including a simplified piece of code that demonstrates my pain. I can't use boost. I'm using the latest version of g++ in cygwin. #include #include using namespace std; int main () { map genmap; map ::iterator genmapit; map ::iterator,int > itermap; // insert something into genmap genmap.insert (make_pair(1,500) ); // find and return iterator. genmapit=genmap.find(1); // insert the iterator/int into itermap. Dies on each of the following 3 versions of this line. //itermap[genmapit] = 600; // crash //itermap.insert ( pair ::iterator,int >(genmapit,600) ); // crash itermap.insert ( make_pair(genmapit,600) ); // crash return 0; } So as you can see, I have 1 simple map, an iterator to that map and another map that has the first argument as an iterator to the first map. It's clear from this: Why can't I put an iterator in map? That I can have an iterator as the second argument. However, the way shown above provides this: $ make g++ -c -o main.o main.cpp /usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/stl_function.h: In member fun ction `bool std::less ::operator()(const _Tp&, const _Tp&) const [with _Tp = std::_Rb_tree_iterator >]': /usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/stl_tree.h:871: instantiate d from `std::pair ::iterator, bool> std::_Rb_tree ::i nsert_unique(const _Val&) [with _Key = std::_Rb_tree_iterator >, _Val = std::pair >, int>, _KeyOfValue = std::_Select1st >, int> >, _Compare = std::less > >, _Alloc = std::allocator >, int> >]' /usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/stl_map.h:360: instantiated from `std::pair , std::_ Select1st >, _Compare, _Alloc>::iterator, bool> std:: map ::insert(const std::pair &) [wit h _Key = std::_Rb_tree_iterator >, _Tp = int, _Compare = std::less > >, _Alloc = std: :allocator >, i nt> >]' main.cpp:23: instantiated from here /usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/stl_function.h:227: error: no match for 'operator "instantiated from here" tells me nothing and a web search gives me no info on this. Does STL:map simply not allow for this? I can recode my app to work around this but it will be very inefficient and I would like to get this working. Is there another kind of pointer I can make for a map element I could use? Thanks for your time.
