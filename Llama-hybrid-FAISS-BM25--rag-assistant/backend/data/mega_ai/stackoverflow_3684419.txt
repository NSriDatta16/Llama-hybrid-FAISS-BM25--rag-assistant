[site]: stackoverflow
[post_id]: 3684419
[parent_id]: 3684346
[tags]: 
It's a shame you're stuck on .NET 2.0, because Rx extensions has a Throttle method that achieves this effect quite elegantly. Sadly Rx requires at least .NET 3.5 SP1. Oh well! You can always use a System.Threading.Timer to get this done instead. Synchronization can be provided by leveraging the current SynchronizationContext (this is what BackgroundWorker does). Here's a sketch of a LaggedMethodPair class to illustrate this approach. The class takes three inputs in its constructor: an Action to be performed on-demand, another Action to serve as the callback that will be invoked when a given timeout has elapsed, and, of course, the timeout itself: public sealed class LaggedMethodPair { private SynchronizationContext _context; private Timer _timer; private Action _primaryAction; private Action _laggedCallback; private int _millisecondsLag; public LaggedMethodPair(Action primaryAction, Action laggedCallback, int millisecondsLag) { if (millisecondsLag { }); // Do nothing by default. _laggedCallback = laggedCallback ?? new Action(() => { }); _millisecondsLag = millisecondsLag; _timer = new Timer(state => RunTimer()); } public void Invoke() { // Technically there is a race condition here. // It could be addressed, but in practice it will // generally not matter as long as Invoke is always // being called from the same SynchronizationContext. if (SynchronizationContext.Current == null) { SynchronizationContext.SetSynchronizationContext( new SynchronizationContext() ); } _context = SynchronizationContext.Current; ResetTimer(); _primaryAction(); } void ResetTimer() { _timer.Change(_millisecondsLag, Timeout.Infinite); } void RunTimer() { _context.Post(state => _laggedCallback(), null); } } I wrote a sample Windows Forms app to show this class in action. The form contains a LaggedMethodPair member with a timeout of 2000 ms. Its primaryAction adds an item to a list view. Its laggedCallback adds a highlighted item to the list view. You can see that the code runs as expected.
