[site]: stackoverflow
[post_id]: 4910939
[parent_id]: 4910917
[tags]: 
First, let's call the field n of the class Animal " Animal.n " to avoid confusion. Fields, unlike methods, are not subject to overriding. So in your Horse class, where you may think you are overriding the value of Animal.n with 7, you are actually declaring a new variable called n (let's call it Horse.n to avoid confusion). So really, you have a class called Horse with two fields: Animal.n and Horse.n . Which field you get when you say " n " depends upon the static type of the variable at the time. When you have an object whose type is Horse , but upcast to an Animal , the n field refers to Animal.n , and has a value of "5". Hence ah.n is "5". When you have the same object, downcast again to a Horse , the n field refers to Horse.n , and has a value of "7". Hence h.n is "7". To clarify : Indeed, h does point to the same object that ah points to -- downcasting does not change what object is being pointed at. However, the static type does affect which field of the object is being requested.
