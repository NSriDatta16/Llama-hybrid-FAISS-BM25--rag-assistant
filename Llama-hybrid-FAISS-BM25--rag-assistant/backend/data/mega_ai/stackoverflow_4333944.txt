[site]: stackoverflow
[post_id]: 4333944
[parent_id]: 4201825
[tags]: 
There is quite a lot of overhead in using cucumber for unit testing. Not only you have to write the features but then map them to the implementation using a separate bit of code. Unit testing is meant to be very fast to write and very fast to execute. Naturally, cucumber focuses on end user experience, mainly due to the language used in writing a feature. Just to refresh, a feature would contain the following: As some stakeholder of a system I would like to perform an activity So that I can get some benefit out of it Given a precondition When I perform an action Then something should happen The opening paragraph, that is often ignored, is very important as it sets a context for the operation and explains why something happens. Because of the use of natural language, these things are easy to show to non-programmers in order to get some feedback. Now, using these for unit tests would seem awkward at best. First of all, the end user focus suggests a more integration approach as the feature says nothing about mocks and UI/logic separation. I.e. a feature like the following just seems weird: Given a that a database mock is configured with the following data | ID | Username | | 0 | igor | When call FindAll on User Repository Then I get the following user back | ID | Username | | 0 | igor | Also, as your SUT gets smaller (i.e. a class), the context of operation is not as important. A User repository does not care about the context e.g. it doesn't care if the consumer of it is a normal user or a VIP user. A simple component (which it should be, following SRP), is completely deterministic based on its inputs. So, the unit test is there to validate that what you wrote is correct, and the cucmber test is there to validate that what you wrote satisfies some higher purpose by putting a behavior of the system in a context.
