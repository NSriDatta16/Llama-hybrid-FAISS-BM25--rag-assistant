[site]: stackoverflow
[post_id]: 166492
[parent_id]: 166356
[tags]: 
I usually have a drawOpenGl() function, per class that can be rendered, that contains it's opengl calls. That function gets called from the renderloop. The class holds all info needed for its opengl function calls, eg. about position and orientation so it can do its own transformation. When objects are dependent on eachother, eg. they make a part of a bigger object, then compose those classes in a other class that represents that object. Which has its own drawOpenGL() function that calls all the drawOpenGL() functions of its children, so you can have surrounding position/orientation calls using push- and popmatrix. It has been some time, but i guess something similar is possible with textures. If you want to switch between surface normals or vertex normals, then let the object remember if its one or the other and have 2 private functions for each occasion that drawOpenGL() calls when needed. There are certainly other more elegant solutions (eg. using the strategy design pattern or something), but this one could work as far as I understand your problem
