[site]: stackoverflow
[post_id]: 919117
[parent_id]: 
[tags]: 
How does code look when you don't use exceptions to control flow?

I've taken the advice I've seen in other answered questions about when to throw exceptions but now my APIs have new noise. Instead of calling methods wrapped in try/catch blocks (vexing exceptions) I have out argument parameters with a collection of errors that may have occurred during processing. I understand why wrapping everything in a try/catch is a bad way to control the flow of an app but I rarely see code anywhere that reflects this idea. That's why this whole thing seems so strange to me. It's a practice that is supposedly the right way to code but I don't see it anywhere. Added to that, I don't quite understand how to relate to client code when "bad" behavior has occured. Here's a snippet of some code I'm hacking around with that deals with saving pictures that are uploaded by users of a web app. Don't sweat the details (it's ugly), just see the way I've added these output parameters to everything to get error messages. public void Save(UserAccount account, UserSubmittedFile file, out IList errors) { PictureData pictureData = _loader.GetPictureData(file, out errors); if(errors.Any()) { return; } pictureData.For(account); _repo.Save(pictureData); } Is this the right idea? I can reasonably expect that a user submitted file is in some way invalid so I shouldn't throw an exception, however I'd like to know what was wrong with the file so I produce error messages. Likewise, any client that now consumes this save method will also want to find out what was wrong with the overall picture saving operation. I had other ideas about returning some status object that contained a result and additional error messages but that feels weird. I know having out parameters everywhere is going to be hard to maintain/refactor/etc. I would love some guidance on this! EDIT: I think the user submitted files snippet may lead people to think of exceptions generated by loading invalid images and other "hard" errors. I think this code snippet is a better illustration of where I think the idea of throwing an exception is being discouraged. With this I'm just saving a new user account. I do a state validation on the user account and then I hit the persistent store to find out if the username has been taken. public UserAccount Create(UserAccount account, out IList errors) { errors = _modelValidator.Validate(account); if (errors.Any()) { return null; } if (_userRepo.UsernameExists(account.Username)) { errors.Add(new ErrorMessage("Username has already been registered.")); return null; } account = _userRepo.CreateUserAccount(account); return account; } Should I throw some sort of validation exception? Or should I return error messages?
