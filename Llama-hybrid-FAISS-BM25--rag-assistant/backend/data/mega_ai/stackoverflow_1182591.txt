[site]: stackoverflow
[post_id]: 1182591
[parent_id]: 1177181
[tags]: 
Assuming by "firmware engineers" you mean "embedded software engineers", then my answer would be: they are software engineers, so they should - where possible - be doing the same things as any other software engineer. Obviously, writing software for embedded systems requires some different skills, such as a detailed knowledge of the target processor, and being able to deal with limited resources (compared to a PC or similar). As others have mentioned, unit testing is complicated by the fact that this may have to be done on a simulator running on a PC, which while very useful, can never be a substitute for thorough testing of the real system - especially given the asynchronous nature of events that an embedded system is subject to. One of my concerns as to why embedded software may appear to be "behind the curve" is because software engineering - and as part of that, embedded software - is not generally taught in any depth on electronic engineering degrees. Given how much of an electronic engineer's career is likely to be spent coding nowadays, this seems like a massive oversight. Fortunately, there are those who are trying to make up for this. I'd strongly recommend reading the articles of Jack Ganssle (on his website , and in his regular column on embedded.com ). In addition, MISRA-C was created a while ago to try to avoid common sources of bugs in C software for the automotive industry, and his since been adopted by many in the embedded software world. Add a static analysis checker like PC-Lint , and you've already gone some way to improving your code. The tools vendors have also not helped, in many cases by creating their own IDEs, when perhaps it would have been better to concentrate on the compiler and debugger, and leave the IDE to others, e.g. Eclipse. Incidentally, for more on the non-use of C++ in embedded systems see this question . Finally: because firmware engineers are software engineers, we face many of the same issues, challenges and concerns, so we should use the same resources; after all, there's plenty of them around, and you're reading one of them! Some of the other websites I frequent include: Stack Overflow blog and podcast The Daily WTF Talk About Quality Coding Horror Secret Geek Joel on Software A different Stack Overflow blog ; this is one is dedicated to embedded systems. EDIT: In response to Gabe's comment, "what tools should we be looking to adapt?", a couple of examples spring to mind: Compiler-independent IDEs: There are plenty of IDEs for C, but as far as I can tell, few of them can be used to their few potential without a compatible compiler. I'd like to see both the compiler developers and the IDE developers converge so that, ideally, any compiler can be used with any IDE. In the absence of a compatible compiler, I'd like to be able to use PC-Lint (or equivalent) as my "official" compiler with an IDE of my choice. Simulation and modelling: Simulation tools like Simulink allow simulation, modelling and testing of software for the PC and some higher-end embedded processors. Tools like this would be just as useful for the smaller chips, so it would nice to see them extended to that area of the market. PS: Jack Ganssle's column this week is entitled, " What makes embedded different? ", and so is (loosely) related to the question above.
