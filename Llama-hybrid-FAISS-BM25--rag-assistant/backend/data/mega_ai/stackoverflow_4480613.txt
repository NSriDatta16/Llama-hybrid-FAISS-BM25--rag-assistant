[site]: stackoverflow
[post_id]: 4480613
[parent_id]: 4480049
[tags]: 
Because you need to iterate on values of x you can't really vectorize this. At some point, R has to work on each value of x separately and in turn. You might be able to run the computations on separate CPU cores to speed things up, perhaps using foreach in the package of the same name. Otherwise, (and this is just hiding the loop from you), wrap the main body of your loop as a function, e.g.: wonderous 1) { if(isTRUE(all.equal(n %% 2, 0))) { n and then you can use sapply() to run the function on a set of numbers: > sapply(1:50, wonderous) [1] 0 1 7 2 5 8 16 3 19 6 14 9 9 17 17 [16] 4 12 20 20 7 7 15 15 10 23 10 111 18 18 18 [31] 106 5 26 13 13 21 21 21 34 8 109 8 29 16 16 [46] 16 104 11 24 24 Or you can use Vectorize to return a vectorized version of wonderous which is itself a function that hides even more of this from you: > wonderousV wonderousV(1:50) [1] 0 1 7 2 5 8 16 3 19 6 14 9 9 17 17 [16] 4 12 20 20 7 7 15 15 10 23 10 111 18 18 18 [31] 106 5 26 13 13 21 21 21 34 8 109 8 29 16 16 [46] 16 104 11 24 24 I think that is about as far as you can get with standard R tools at the moment. @Martin Morgan shows you can do a lot better than this with an ingenious take on solving the problem that does used R's vectorised abilities.
