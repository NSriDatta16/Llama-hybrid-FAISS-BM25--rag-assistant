[site]: stackoverflow
[post_id]: 3694387
[parent_id]: 3694022
[tags]: 
First let's talk about the regex you're using to remove the tags, . If you want the dot to match anything including a newline, you should use Singleline mode. It's also known as DOTALL mode in some flavors, because that's what it does: allows the dot to match newlines. You can use the RegexOptions.Singleline flag for that, or embed it in the regex with an inline modifier: `(?s) ` This is still pretty fragile, but I'll leave it at that because there's no way to make it bulletproof; regexes and HTML are fundamentally incompatible. As for the second replacement, the first thing you need to do is break up those chained method calls--in fact, I would say they never should have been chained. Feeding the result of a Regex.Replace directly to String.Replace is either an error or excessively clever. In either case, you have to split them up if you want to call Regex.Replace twice. You also need to escape any regex metacharacters the search expression, assuming you still want to do a literal search and not a regex search. You can use the Escape method for that. string searchText = Request.QueryString["search"].Trim(); string encodedValue = Server.HtmlEncode(searchText); string escapedValue = Regex.Escape(encodedValue); string contentText = Content.Text; contentText = Regex.Replace(contentText, @"(?s) ", string.Empty); contentText = Regex.Replace(contentText, escapedValue, " $& ", RegexOptions.IgnoreCase); Content.Text = contentText; There are a few other things in your code that don't seem right to me (like why you seem to be permanently removing all the tags), but I'm trying to stay focused on your actual question. To that end, I've tried to make the minimum necessary changes in the code to illustrate my answer. But there's one more thing I just have to comment on: catch { // do nothing } Don't do that. At the very least, send an error message to the console or rethrow the exception for the calling code to deal with, but never silently swallow them.
