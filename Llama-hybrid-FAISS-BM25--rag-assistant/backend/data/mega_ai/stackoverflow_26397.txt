[site]: stackoverflow
[post_id]: 26397
[parent_id]: 26301
[tags]: 
General algorithms: Quicksort (and it's average complexity analysis), shows that randomizing your input can be a good thing!; balanced trees ( AVL trees for example), a neat way to balance search/insertion costs; Dijkstra and Ford-Fulkerson algorithms on graphs (I like the fact that the second one has many applications); the LZ* family of compression algorithms ( LZW for example), data compression sounded kind of magic to me until I discovered it (a long time ago :) ); the FFT , ubiquitous (re-used in so many other algorithms); the simplex algorithm, ubiquitous as well. Numerical related: Euclid's algorithm to compute the gcd of two integers: one of the first algorithms, simple and elegant, powerful, has lots of generalizations; fast multiplication of integers ( Cooley-Tukey for example); Newton iterations to invert / find a root, a very powerful meta-algorithm. Number theory-related: AGM -related algorithms ( examples ): leads to very simple and elegant algorithms to compute pi (and much more!), though the theory is quite profound (Gauss introduced elliptic functions and modular forms from it, so you can say that it gave birth to algebraic geometry...); the number field sieve (for integer factorization): very complicated, but quite a nice theoretical result (this also goes for the AKS algorithm, which proved that PRIMES is in P). I also enjoyed studying quantum computing ( Shor and Deutsch-Josza algorithms for example): this teaches you to think out of the box. As you can see, I'm a bit biased towards maths-oriented algorithms :)
