[site]: stackoverflow
[post_id]: 953228
[parent_id]: 953191
[tags]: 
Gustavo, You're standing at the bottom of the first foothill of a mountain range of problems that you'll experience by forcing developers to inherit from a "base form class." From my experience, frameworks built in this way tend to be very fragile, and difficult for developers to use. I would imagine that you can overcome this particular obstacle by making the TabControl private and then implementing a public "Tabs" property on the form itself, but I also suspect that you'll get to the peak of this mountain and realize that you have many other even taller mountains in front of you. I would suggest you rethink the approach altogether. // set the Modifiers property on tabControl1 to "Private" then implement this public TabControl.TabPageCollection TabPages { get { return tabControl1.TabPages; } } Inheritance should be used provide common functionality, not to provide a uniform composition. You really should consider implementing a "core screen" and designing your framework to allow developers to "plug" their controls in to that screen. The Composite UI Application Block is a good place to start, although there may be something more recent that I'm not aware of.
