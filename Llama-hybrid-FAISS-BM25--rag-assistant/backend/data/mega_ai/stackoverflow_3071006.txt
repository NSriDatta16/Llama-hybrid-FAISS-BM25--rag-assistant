[site]: stackoverflow
[post_id]: 3071006
[parent_id]: 
[tags]: 
Blurring the depth buffer in OpenGL - how to access mipmap levels in a fragment shader?

I'm trying to blur a depth texture by blurring & blending mipmap levels in a fragment shader. I have two frambuffer objects: 1) A color frambuffer with a depth renderobject attached. 2) A z framebuffer with a depth texture attached. Once I render the scene to the color framebuffer object, I then blit to the depth buffer object, and can successfully render that (output is a GL_LUMINANCE depth texture). I can successfully access any given mipmap level by selecting it prior to drawing the depth buffer, for example, I can render mipmap level 3 as follows: // FBO setup - all buffer objects created successfully and are complete and the color // framebuffer has been rendered to (it has a depth renderbuffer attached), and no // OpenGL errors are issued: glBindFramebuffer(GL_READ_FRAMEBUFFER, _fbo_color); glBindFramebuffer(GL_DRAW_FRAMEBUFFER, _fbo_z); glBlitFramebuffer(0,0,_w, _h, 0, 0, _w, _h, GL_DEPTH_BUFFER_BIT, GL_NEAREST); glGenerateMipmap(GL_TEXTURE_2D); glBindFramebuffer(GL_FRAMEBUFFER, 0); // This works: // Select mipmap level 3 glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 3); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, 3); draw_depth_texture_on_screen_aligned_quad(); // Reset mipmap glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 0); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, 1000); As an alternative, I'd like to add the bias parameter to the texture2D() GLSL function, or use texture2DLod() and operate with a single texture sampler, but whenever I choose a level over than 0, it appears that the mipmap hasn't been generated: // fragment shader (Both texture2DLod and texture2D(sampler, tcoord, bias) // are behaving the same. uniform sampler2D zbuffer; uniform int mipmap_level; void main() { gl_FragColor = texture2DLod(zbuffer, gl_TexCoord[0].st, float(mipmap_level)); } I am not sure how the mipmapping works with the glBlitFramebuffer(), but my question is what is the proper way to setup the program such that calls made to texture2D/texture2DLod give the expected results? Thanks, Dennis
