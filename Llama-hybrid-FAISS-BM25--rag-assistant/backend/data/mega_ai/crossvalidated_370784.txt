[site]: crossvalidated
[post_id]: 370784
[parent_id]: 
[tags]: 
Forecasting data of export Wh

I am new to R. I am analyzing export Wh, data for my project. May I know how should I apply ARIMA forecasting method to this export Wh data analysing ? In the original csv file, there are 1,584,823 total records, with 157 meters. Recorded from 1-Oct-2015 00:00:10-05 to 31-Mar-2016 23:59:58 In the csv file, there are three columns: local minutes, dataID, meter_value. Local minutes is formatted with “yyyy-mm-dd hh:mm:ss-UTC time offset”. dataID represents the ID number for each 157 meter, meter_value represents the export Wh Quick view of original csv file, as below: localminute,dataid,meter_value 2015-10-01 00:00:10-05,739,88858 2015-10-01 00:00:13-05,8890,197164 2015-10-01 00:00:20-05,6910,179118 2015-10-01 00:00:22-05,3635,151318 2015-10-01 00:00:22-05,1507,390354 2015-10-01 00:00:29-05,5810,97506 2015-10-01 00:01:18-05,6910,179118 I tried using ARIMA method for forecasting meter value for next 6 months., but i could not get the forecast meter value, only I got next 10 local minutes. At first, I would like to get meter value to be foretasted for 24 hours, my code as below: I appreciate your help. > library(readxl) library(forecast) library(ggplot2) > library(tidyverse) library(lubridate) # easier to work with dates and > times in R library(data.table) > > #---------Data importing to R(Read csv file to R) -------------------- sensor_data #---------Data Processing: Converting variables -------------------- sensor_data % mutate(localminute > =lubridate::as_datetime(localminute),dataid=factor(dataid)) # convert dataid (integer type) to factor type # convert localminute to datetime > (fread imports it as character) > > str(sensor_data) #sensor_data is original data set > # str() function- to look at internal representation of numbers > # localminute: POSIXct, format: "2015-10-01 05:00:10" ... > # dataid : Factor w/ 157 levels "35","44" > # meter_value: int 88858, 197164 179118, ..... > > sensor_dataTS = ts(sensor_data $localminute) > #convert the POSIXct format to time series, > > meterValueTS = ts(sensor_data$ meter_value) > > Alldata I tried without adding frequency interval when converting meter_value into time series meter_value. meterValueTS = ts(sensor_data $meter_value) arima_fit=auto.arima(Alldata$ meterValueTS) arima_forecast = forecast(arima_fit, h = 10) arima_forecast PPoint Forecast Lo 80 Hi 80 Lo 95 Hi 95 1584824 202242.8 15172.63 389313.0 -83856.34 488342.0 1584825 163675.2 -25595.56 352946.0 -125789.46 453139.9 1584826 157226.5 -35231.01 349684.1 -137111.87 451564.9 1584827 156870.7 -40095.10 353836.6 -144362.52 458104.0 1584828 160228.8 -42799.01 363256.7 -150275.46 470733.2 1584829 159133.8 -51824.79 370092.3 -163499.50 481767.0 1584830 166694.8 -54544.42 387934.1 -171661.41 505051.1 1584831 160538.4 -65439.76 386516.5 -185065.35 506142.1 1584832 160058.2 -71226.73 391343.1 -193661.57 513777.9 1584833 160595.1 -76425.99 397616.2 -201897.36 523087.5
