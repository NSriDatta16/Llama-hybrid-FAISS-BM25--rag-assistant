[site]: crossvalidated
[post_id]: 614379
[parent_id]: 
[tags]: 
How to quantify the dissimilarity across different types of variables?

I have two dataframes with the same columns but with varying sample sizes. I want to compare corresponding columns for homogeneity (i.e., do they come from the same distribution?). There are different types of columns (variables) - I have categorical (nominal and ordinal) and numeric (discrete and continuous). I want to quantify the dissimilarity between the corresponding variables, and I would like for this dissimilarity measure to be comparable across all the different types of variables. For example, when comparing two dataframes with different samples that come from the same distributions, I want, on average, similar dissimilarity across all types of variables. For more context, this is for quantifying the covariate shift. How to accomplish the task? I was thinking about first Wasserstein distance , but I'm not sure if that's the right choice. I don't understand much of the math behind it. I've read from On Wasserstein Two Sample Testing and Related Families of Nonparametric Tests that I might need to compare differences between quantities that completely specify a distribution â€” (a) cumulative distribution functions (CDFs), (b) quantile functions (QFs), and (c) characteristic functions (CFs). Below are the two dataframes that we might wish to compare. Both sample independently from the same distributions but differ in their sample sizes. import pandas as pd from scipy.stats import norm, gamma, bernoulli, randint, poisson df1 = pd.DataFrame({ 'Normal': norm.rvs(loc=0, scale=1, size=100), 'Gamma': gamma.rvs(a=3, loc=1, scale=1, size=100), 'Bernoulli': bernoulli.rvs(p=0.6, size=100), 'Uniform Discrete': randint.rvs(low=1, high=50, size=100), 'Poisson': poisson.rvs(mu=5, size=100), }) df2 = pd.DataFrame({ 'Normal': norm.rvs(loc=0, scale=1, size=40), 'Gamma': gamma.rvs(a=3, loc=1, scale=1, size=40), 'Bernoulli': bernoulli.rvs(p=0.6, size=40), 'Uniform Discrete': randint.rvs(low=1, high=50, size=40), 'Poisson': poisson.rvs(mu=5, size=40), })
