[site]: stackoverflow
[post_id]: 3531866
[parent_id]: 3531374
[tags]: 
From the "too-much-time-on-my-hands" department: here is a little MedianGenerator class: /** * Methods to calculate the median value of a supplied {@link List}. */ public final class MedianGenerator{ private MedianGenerator(){ } /** * Calculate the median of a supplied list. * * A copy will be generated * this copy will be sorted with the supplied comparator * the median will be calculated, using the supplied averageCalculator * for collections with an even number of items * * * @param data * @param comparator * @param averageCalculator * @return the median */ public static T calculateMedian(final List data, final Comparator comparator, final AverageCalculator averageCalculator){ final List copy = new ArrayList (data); Collections.sort(copy, comparator); return doCalculateMedian(data, averageCalculator); } /** * Calculate the median of a supplied list. * * A copy will be generated * this copy will be sorted with the supplied comparator * the median will be calculated, using the {@link #ALWAYS_FIRST} {@link AverageCalculator} * for collections with an even number of items * * * @param data * @param comparator * @return the median */ @SuppressWarnings("unchecked") public static T calculateMedian(final List data, final Comparator comparator){ return calculateMedian(data, comparator, (AverageCalculator ) ALWAYS_FIRST); } /** * Calculate the median of a supplied list. * * A copy will be generated * this copy will be sorted using natural ordering * the median will be calculated, using the {@link #ALWAYS_FIRST} {@link AverageCalculator} * for collections with an even number of items * * * @param data * @return the median */ @SuppressWarnings("unchecked") public static > T calculateMedian(final List data){ return calculateMedian(data, (AverageCalculator ) ALWAYS_FIRST); } /** * Calculate the median of a supplied list. * * A copy will be generated * this copy will be sorted using natural ordering * the median will be calculated, using the supplied averageCalculator * for collections with an even number of items * * * @param data * @param averageCalculator * @return the median */ public static > T calculateMedian(final List data, final AverageCalculator averageCalculator){ final List copy = new ArrayList (data); Collections.sort(copy); return doCalculateMedian(copy, averageCalculator); } private static T doCalculateMedian(final List sortedData, final AverageCalculator averageCalculator){ T result; if(sortedData.isEmpty()){ result = null; } else{ final int size = sortedData.size(); if(size % 2 == 0){ result = averageCalculator.getAverage(sortedData.get(size / 2 - 1), sortedData.get(size / 2)); } else{ result = sortedData.get(size / 2 - 1); } } return result; } /** * Generic accessor method for {@link #ALWAYS_FIRST}. */ @SuppressWarnings("unchecked") public static AverageCalculator alwaysFirst(){ return ALWAYS_FIRST; } /** * {@link AverageCalculator} implementation that always returns the lower * bound unchanged. */ @SuppressWarnings("rawtypes") public static final AverageCalculator ALWAYS_FIRST = new AverageCalculator(){ @Override public Object getAverage(final Object first, final Object second){ return first; } }; /** * When there is an even number of items, this interface is used to generate * the average between the two middle items. */ public static interface AverageCalculator { E getAverage(E first, E second); } }
