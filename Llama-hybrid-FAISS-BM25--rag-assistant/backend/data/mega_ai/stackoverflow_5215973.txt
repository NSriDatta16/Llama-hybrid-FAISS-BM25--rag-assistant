[site]: stackoverflow
[post_id]: 5215973
[parent_id]: 5215268
[tags]: 
Your problem is much simpler to solve. You have not realized that you can read the entire list in memory at a very modest cost - your file is less than 1 MB, it fits perfectly well in memory. The solution to your problem is to read the entire thing into an array and use standard list methods to look for membership: # this is the only thing you need to get all the words in memory words = [w.strip() for w in open("words.txt", "rb").readlines()] # this is the only thing you need to find wether a word is in the list print 'aaron' in words # returns 'True' # now you can go around many times and ask for membership of any word, # or any list of words (use a loop) - the array is already in memory # and will stay there until you close the program - it's only 1 mega! It can be argued that my solution is not clever, but I think it is practical - premature optimization is the root of all evil , and by trying to write a clever loop, you are missing out in a perfectly simple approach that given your problem works perfectly well (by the way, the first call to the function takes less than a second for a 60-thousand-word text file, every search is also extremely fast). Notice: you don't need a set (you don't care if a word is repeated - the answer is the same). Don't solve the wrong problem! PS. A lot of people seem to think that 58k words is "a lot" - it is (58 + average length) kB (if the words are ~10 letters each, that's 580 kB - about half a meg). When I hear people saying that you should not open that in memory, I wonder how do they open their pictures! It is a paradigm that needs to be broken. People will claim " but your program is not robust, because if the list becomes 100 million gizillion lines, it will break ", and that's fair in a world where the English language will increase its vocabulary by 10 orders of magnitude. We often forget that general means general for your domain . Edit : As per @Chinmay comments, using a set over a list has dramatic access consequences. Using a 58K word list, I ran two 1000 access exercises: list , and set (access time in microseconds): container min max mean list 3 1646 724.4 set 1 31 1.6 So, as @Chinmay points out, the mean access time is almost three orders of magnitude smaller for a set. This can make a difference if you are accessing the words many times (which you presumably are). So, I sand corrected and modify the code to: # create a set of words words = set(w.strip() for w in open('file.txt').readlines()) # test access using the `in` operator, as : 'aaron' in words # will return True My point remains: the solution to this problem is much simpler than creating a class to implement the membership operator.
