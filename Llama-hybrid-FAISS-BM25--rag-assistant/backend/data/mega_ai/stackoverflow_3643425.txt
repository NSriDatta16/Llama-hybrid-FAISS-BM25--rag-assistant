[site]: stackoverflow
[post_id]: 3643425
[parent_id]: 3642540
[tags]: 
UPDATE: Since iOS 7 and TextKit , syntax highlighting has become easy as pie. Look no further than here for an introduction (by me). Assuming that you want an editable component, there is not too much hope. Giving a quick overview, just to make sure I cover everything: UITextView : plain text only, no (public) way around. But editable . No chance to alter anything, no chance to get geometry etc. Uses a web view internally. Each paragraph is a , which is altered by the editing engine. You could change the DOm in there but that's all private API. All private, hence no option. UIWebView : html , so it can be styled, have embedded images, etc. I guess (without looking into it) that this is what the previously mentioned Three 20 UI uses. The problem: cannot be edited . There's no (public) way around that. You canot get selections, acces the DOM, etc without private API and a lot of headaches. Editing would work like in UITextView but require a whole new level of headache. Still: private. CoreText Framework: Since iOS 3.2 a very very good rendering engine. But that's it. Can directly layout and render NSAttributesString s. However, there is no user interaction. No text selection, no text input, no spell checking, no replacements, no highlights, no no no no no. Just rendering. And quite a bit of work to make it fast on old devices with long texts. UITextInput Protocol: Allows interaction with the keyboard and to grab text input . Also features basic text replacements. Problem: text input only, badly documented. No text selection etc (see above). So here we are. Two fully functional components that lack a central function and two partial solutions that lack the missing link. Here are all viable approaches I can come up with: Have the user edit a UITextView unstyled and display the content styled in a UIWebView . For the latter you can use the Three20 thing. Build the missing link between CoreText and UITextInput . This includes, but is not limited to, text selection, highlight, background colors, text storage & management, efficiency, spell checking etc. Some of these are provided by system frameworks but still need a lot of integration. File a bug and wait for a nice public API to come (my personal approach). Convince Apple to allow private API again and mess with UItextView s DOM. The Omni Group has taken the second approach and created an editable text view. You can find it in the OmniUI framework. However, this implementation is far from perfect. (at least it was when I last checked a few months ago). They tried hard but still didn't manage to get to Apples perfection in user interaction. Apple must have invested at least a few man-years into doing only the UI-interaction with text selection and editing. Nothing to be done at home, and as it seems even for companies as the omni group. There is a interesting aspect to all of this: iWork. Apple claims to not use any private API in them. But the text selection is the very same as in the OS. So they must have copied framework source into the apps. Very honest approach ;)
