[site]: stackoverflow
[post_id]: 764424
[parent_id]: 764253
[tags]: 
Sometimes it ends up that way. I try to pay attention to all of the exit conditions for loops and so forth to see if I can simplify them. I also try to replace switches with polymorphism (where practical) and so forth. I also tend to keep my code as simple as possible through the inversion of logical statements (where it doesn't hurt readability). E.g. Instead of doing this: public string TransformString(string _input) { if(!string.IsNullOrEmpty(_input)) { // do work // etc. return answer; } return null; } Do this: public string TransformString(string _input) { if(string.IsNullOrEmpty(_input)) return null; // do work // etc. return answer; } It helps keep the nesting down and brace-mania away. Sometimes it's better to just keep the nested version (e.g. I don't like hitting a 'continue' keyword half way through a complicated loop body because it's easy to mess up and introduce a bug), but I generally prefer this approach :)
