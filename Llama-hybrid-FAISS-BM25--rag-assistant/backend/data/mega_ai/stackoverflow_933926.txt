[site]: stackoverflow
[post_id]: 933926
[parent_id]: 933872
[tags]: 
I have experience with both ways you have mentioned. ( I'm co-developer of iRealty http://www.irealtysoft.com/ ver 3. and ver 4 have two different storage methods). After several years of dealing with both ways I recommend to create a single table for all properties. This pattern is called Single Table Inheritance ( http://martinfowler.com/eaaCatalog/singleTableInheritance.html by Martin Fowler). I see only two disadvantages of this method: field names should be unique within all property types a lot of records will have NULL in about a have of their columns which wastes disk space a little bit A the same time with this database structure all CRUD routines are very simple and straightforward. You will save a lot of time building queries/ORM layer. With this structure you are free to create indexes and utilize arithmetic and other database functions in WHERE clauses and avoid costly JOINs. The disk space is cheap, the development time is expensive. The | property_id | feature_name | feature_value | allows to keep the same database structure when changing fields and property types, which is good when you have a complex upgrade/update routines. If you are going to build a single (production) instance application the upgrades should not be an issue. However this method make CRUD model complex and hence more expensive and bug-prone. (More code --- more bugs.)
