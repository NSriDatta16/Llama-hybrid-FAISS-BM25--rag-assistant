[site]: stackoverflow
[post_id]: 4085656
[parent_id]: 4080851
[tags]: 
I am also very interested in what other people have to say about this. The approach I've taken is to use object literal notation to store the bulk of the function, and store these in one file included on all pages (the library) uiHelper = { inputDefault:function(defaulttext){ // function to swap default text into input elements }, loadSubSection:function(url){ // loads new page using ajax instead of refreshing page }, makeSortable:function(){ // apply jQuery UI sortable properties to list and remove non javascript controls } } Then I include a .js file on any page that needs to use the library that ties the elements on that page to the function in the library. I've tried to make each function as reuseable as possible and sometimes the event binding function on the page calls several of my library functions. $(document).ready(function(){ $('#mybutton').live('click',uiHelper.loadSubSection); //more complicated helper $('#myotherbutton').live('click',function(){ uiHelper.doThisThing; uiHelper.andThisThing; }); }); edit: using jsDoc http://jsdoc.sourceforge.net/ notation for commenting for these functions can produce documentation for the 'library' and helps keep your code easy to read (functions split by comments). The following question is along similar lines to your own - you should check it out... Commonly accepted best practices around code organization in JavaScript
