[site]: stackoverflow
[post_id]: 122910
[parent_id]: 122877
[tags]: 
The temp variable doesn't point to any storage (memory) and it is uninitialized. if temp is declared as char temp[32]; then the code would work no matter where it is declared. However, there are other problems with declaring temp with a fixed size like that, but that is a question for another day. Now, why does it crash when declared globally and not locally. Luck... When declared locally, the value of temp is coming from what ever value might be on the stack at that time. It is luck that it points to an address that doesn't cause a crash. However, it is trashing memory used by someone else. When declared globally, on most processors these variables will be stored in data segments that will use demand zero pages. Thus char *temp appears as if it was declared char *temp=0 .
