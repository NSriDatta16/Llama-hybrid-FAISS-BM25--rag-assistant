[site]: stackoverflow
[post_id]: 1938580
[parent_id]: 1938567
[tags]: 
I've recently finished a similar app (at least in terms of database functionality), and I've found Core Data to be invaluable. It lets you define a data model - similar to a database schema from your remote database - then you can pull down data in whatever format is most suited to you and store it in Core Data. The framework will abstract away things like the underlying persistence mechanism, so you can use SQLite (the default) or a couple other data storage formats (XML is an option, IIRC). You can also manipulate the data records in an object-oriented manner, which is incredibly convenient when driving some other parts of your app (like the UI). Take a look at the Core Data Programming Guide for more info. As for the synchronization framework itself, I'm not aware of anything prebuilt that does what you're looking for. My solution was to let the SQL daemon on the server generate XML (MySQL happens to have a handy command-line option --xml for just this purpose), then use NSXMLParser on the iPhone end to parse the XML back into Core Data objects (of course other people will recommend libxml - I just stuck with what was most readily available).
