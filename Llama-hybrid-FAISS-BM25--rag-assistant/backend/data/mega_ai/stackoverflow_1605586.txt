[site]: stackoverflow
[post_id]: 1605586
[parent_id]: 1605093
[tags]: 
First: all the standard replies apply to this question: you (should|can|may) not parse/process html (valid or not) using regex. For a wide range of reasons not to do this, I recommend searching the web and/or SO. That said (and assuming your paragraph tags cannot be nested!), you can not do this in one replacement. You will first have to wrap and tags around your paragraphs that "look like" ordered lists. I assume that a paragraph is an ordered list when it starts with NUMBER. (a paragraph tag, some spaces, a number and a full stop). regex : (?s)((?: \s*\d+\.(?:(?! ).)* \s*)+) replacement : $1 A short explanation: // regex (?s) # enable DOT-ALL matching ( # open group 1 (?: # open non-matching group 1 \s*\d+\. # match ' ', zero or more spaces, a number and a full stop (?:(?! ).)* # [when looking ahead, if there's no ' ', only then match any character] zero or more times # match ' ' \s* # match zero or more white spaces ) # close non-matching group 1 + # non-matching group 1 one or more times ) # close group 1 // replacement # insert ' ' $1 # insert what is matched by the regex in group 1 # insert ' ' Now your string will contain: 1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Proin Facilisi Habitasse Hymenaeos Ligula Litora Luctus Mi 2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nulla Auctor Bibendum Suspendisse Commodo Cras Cursus Anno 3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ac Nec Netus Penatibus Purus Cras Mollis Next, replace all the paragraphs (including their numbers!) with and tags: regex : (?s) \s*\d+\.((?:(?! ).)*) replacement : $1 Again, a short explanation: // regex (?s) # enable DOT-ALL matching # match ' ' \s* # match zero or more white space characters \d+ # match one or more digits \. # match a dot ( # start group 1 (?:(?! ).)* # [when looking ahead, if there's no ' ', only then match any character] zero or more times ) # end group 1 # match ' ' // replacement # insert ' ' $1 # insert what is matched by the regex in group 1 # insert ' ' Now your string will look like: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Proin Facilisi Habitasse Hymenaeos Ligula Litora Luctus Mi &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nulla Auctor Bibendum Suspendisse Commodo Cras Cursus Anno &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ac Nec Netus Penatibus Purus Cras Mollis But again: be very very careful. When there's one little mistake in an opening or closing tag, you may very well end up with something that is far worse than what you've started with!
