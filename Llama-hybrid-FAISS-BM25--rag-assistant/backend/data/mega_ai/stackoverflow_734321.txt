[site]: stackoverflow
[post_id]: 734321
[parent_id]: 734255
[tags]: 
Django actually has 3 concepts here: Project (I think this is what you're calling site): This is the directory that contains all the apps. They share a common runtime invocation and can refer to each other. App : This is a set of views, models, and templates. Apps are often designed so they can be plugged into another project. Site : You can designate different behaviour for an app based on the site (ie: URL) being visited. This way, the same "App" can customize itself based on whether or not the user has visited 'StackOverflow.com' or 'RackOverflow.com' (or whatever the IT-targeted version will be called), even though it's the same codebase that's handling the request. How you arrange these is really up to your project. In a complicated case, you might do: Project: StackOverflowProject App: Web Version Site: StackOverflow.com Site: RackOverflow.com App: XML API Version Site: StackOverflow.com Site: RackOverflow.com Common non-app settings, libraries, auth, etc Or, for a simpler project that wants to leverage an open-source plugin: Project: StackOverflowProject App: Stackoverflow (No specific use of the sites feature... it's just one site) App: Plug-in TinyMCE editor with image upload (No specific use of the sites feature) Aside from the fact that there needs to be a Project, and at least one app, the arrangement is very flexible; you can adapt however suits best to help abstract and manage the complexity (or simplicity) of your deployment.
