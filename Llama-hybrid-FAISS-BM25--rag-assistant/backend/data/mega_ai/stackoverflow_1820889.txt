[site]: stackoverflow
[post_id]: 1820889
[parent_id]: 1820857
[tags]: 
(you mean just LINQ, not really LINQ-to-SQL) Sure, you can do it - but it is massive amounts of work. Here's how ; I recommend "don't". You could also look at the source code for DbLinq - see how they do it. If you just want Where , it is a bit easier - but as soon as you start getting joins, groupings, etc - it will be very hard to do. Here's just Where support on a custom LINQ implemention ( not a fully queryable provider, but enough to get LINQ with Where working): using System; using System.Collections.Generic; using System.Linq.Expressions; using System.Reflection; namespace YourLibrary { public static class MyLinq { public static IEnumerable Where ( this IMyDal dal, Expression > predicate) { BinaryExpression be = predicate.Body as BinaryExpression; var me = be.Left as MemberExpression; if(me == null) throw new InvalidOperationException("don't be silly"); if(me.Expression != predicate.Parameters[0]) throw new InvalidOperationException("direct properties only, please!"); string member = me.Member.Name; object value; switch (be.Right.NodeType) { case ExpressionType.Constant: value = ((ConstantExpression)be.Right).Value; break; case ExpressionType.MemberAccess: var constMemberAccess = ((MemberExpression)be.Right); var capture = ((ConstantExpression)constMemberAccess.Expression).Value; switch (constMemberAccess.Member.MemberType) { case MemberTypes.Field: value = ((FieldInfo)constMemberAccess.Member).GetValue(capture); break; case MemberTypes.Property: value = ((PropertyInfo)constMemberAccess.Member).GetValue(capture, null); break; default: throw new InvalidOperationException("simple captures only, please"); } break; default: throw new InvalidOperationException("more complexity"); } return dal.Find(member, value); } } public interface IMyDal { IEnumerable Find(string member, object value); } } namespace MyCode { using YourLibrary; static class Program { class Customer { public string Name { get; set; } public int Id { get; set; } } class CustomerDal : IMyDal { public IEnumerable Find(string member, object value) { Console.WriteLine("Your code here: " + member + " = " + value); return new Customer[0]; } } static void Main() { var dal = new CustomerDal(); var qry = from cust in dal where cust.Name == "abc" select cust; int id = int.Parse("123"); var qry2 = from cust in dal where cust.Id == id // capture select cust; } } }
