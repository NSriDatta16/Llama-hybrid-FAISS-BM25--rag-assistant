[site]: stackoverflow
[post_id]: 240158
[parent_id]: 240152
[tags]: 
There are a number of reasons to do so. When you use an interface, you're ready in the future when you need to refactor/rewrite the code. You can also provide an sort of standardized API for simple operations. For example, if you want to write a sort algorithm like the quicksort, all you need to sort any list of objects is that you can successfuuly compare two of the objects. If you create an interface, say ISortable, than anyone who creates objects can implement the ISortable interface and they can use your sort code. If you're writing code that uses a database storage, and you write to an storage interface, you can replace that code down the line. Interfaces encourage looser coupling of your code so that you can have greater flexibility.
