[site]: stackoverflow
[post_id]: 5621494
[parent_id]: 5621081
[tags]: 
In order to maximize the opportunities for shortcut evaluation, you need to do your own branch prediction. You might want to profile it, tallying which AND branches evaluate into false which OR branches result into true You can then reorder the tree relative to the weights that you found in the profiling step. If you want/need to be particularly nifty, you can devise a mechanism that detects the weighting for a certain dataset during runtime, so you can reorder the branches on the fly. Note that in the latter case, it might be advisable to not reorder the actual tree (with respect to storage efficiency and correctness of result while still executing), but rather devise a tree-node visitor (traversal algorithm) that is able to locally sort the branches according to the 'live' weights. I hope all of this makes sense, because I realize the prose version is dense. However, like Fermat said, the code example is too big to fit into this margin :)
