[site]: stackoverflow
[post_id]: 1864999
[parent_id]: 1864956
[tags]: 
Your assumption is flawed - sizeof(char) is defined to be 1 everywhere. From the C99 standard (TC3) , in section 6.5.3.4 ("The sizeof operator"): (paragraph 2) The sizeof operator yields the size (in bytes) of its operand, which may be an expression or the parenthesized name of a type. (paragraph 3) When applied to an operand that has type char, unsigned char, or signed char, (or a qualified version thereof) the result is 1. When these are taken together, it becomes clear that in C, whatever size a char is, that size is a "byte" (even if that's more than 8 bits, on some given platform). A char is therefore the smallest addressable type. If you need to address in units smaller than a char , your only choice is to read a char at a time and use bitwise operators to mask out the parts of the char that you want.
