[site]: stackoverflow
[post_id]: 4228439
[parent_id]: 
[tags]: 
Domain Object that needs more than one Data Mapper

I'm trying to figure out how to reuse Domain Models in different parts of the application and I have a feeling that the Data Mapper pattern is the way forward. The example below has methods that directly access the methods of the Mapper. class Groups { protected $_groups = array(); public function addGroup($name) { $this->_groups[] = $name; } public function doSomethingGroupy($cakes) { // get all the groups that have cake return $cakeyGroups; } } ... And a mapper to match the methods on the Groups class. class GroupMapper { public function find($id, Groups $group) { // Mappy type things, maybe some sql } public function fetchByNeediness($cuddles, Groups $group) { // More mappy type things } public function save(Groups $groups) { // Saves } } However if sometime later I wanted to use the same Groups Models but populate the groups using different queries I would use a different mapper. class AngryGroupMapper { public function find($id, Groups $group) { // Something similar but with other tables and joins } public function fetchByRage($anger, Groups $group) { // Something new but only needed here } public function isEditable(Groups $groups) { // Do some querying return $bool; { } Now I Know the aim is Skinny Controller - Fat Model, so would I have another model to Map the Mapper (so to speak) to the Model? class FatModelRepository { public function getHappyGroups() { $mapper = new GroupMapper(); return $mapper->fetchByNeediness('Puffy Shoes', new Groups()); } public function getSadGroups() { $mapper = new AngryGroupMapper(); return $mapper->fetchByRage('Aghh!', new Groups()); { public function save(Groups $groups) { $mapper = new GroupMapper(); return $mapper->save($groups); { }
