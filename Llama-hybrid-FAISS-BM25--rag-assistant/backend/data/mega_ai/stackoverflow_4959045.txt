[site]: stackoverflow
[post_id]: 4959045
[parent_id]: 4557843
[tags]: 
Actually, if we're dealing with pure hours here like a Abelian Ring from 0 to 23 and 0 again, I believe the following is actually a working solution: (start end && (start Complex though this is, it is essentially an if-else where you have a different algorithm depending on whether start t is the time you wish to test. In the first case, start and end are normal order, so t must be both greater than start and less than end. In the case where start is greater than end, the times outside the opposite range are what we want: NOT(end Using DeMorgan's theorem: NOT(end NOT(t t >= start or end >= t start This should solve your and my problems. @JonSkeet The thing is, looking at your algorithm, let's assume for a moment the time is 1am, day 1. Now holds 1am Day 1 Today holds midnight Day 1 Start holds 5pm Day 1 (given the original example) End holds 2am Day 1 (again from the example) End holds 2am Day 2 (since start > end) Now, unless I'm mistaken, start â‰° now since start is 5pm Day 1 and now is 1am Day 1 which is before now, therefore the test fails but the original question wanted 1am included in the range since 1am is between 5pm and 2am. Did I miss something? @Brian Also, looking at your code, I think you can detect 1am but now you would have a problem with 10pm (22:00) since your times become: Start is 17 End is 26 Now is 22 + 24 = 46! so you will fail in the less-than test. Clearly, the general case is very tricky! More so when you're restricted to Google Spreadsheets as I am.
