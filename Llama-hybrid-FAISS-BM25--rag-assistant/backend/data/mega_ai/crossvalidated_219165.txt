[site]: crossvalidated
[post_id]: 219165
[parent_id]: 218919
[tags]: 
Based on your last comment ("I'm hoping for a runtime translation of R-formula syntax into JAGS model specification"), I think runjags::template.jags does what you want (at least partly). It automatically generates a complete JAGS model (and data) representation of a (G)L(M)M based on lme4-style syntax and a data frame supplied by the user. For example: library('runjags') # Use an example from glmer: library('lme4') fitdata There are two obvious things missing: random slopes are not yet supported (but that is something I am looking to add), and non-linear models are not directly supported (but a linear model could be generated and then edited by the user). Note that it's not possible to include arbitrary R functions in the JAGS code, so these will have to be re-written in JAGS (or in C++ as a JAGS module). To repeat my earlier comment, the motivation is to help the user write their own code rather than doing all the work without the user having to think about or understand anything. To clarify: I see the benefit of helping a reasonably knowledgable user to quickly generate code which otherwise might be tedious to write (particularly if they struggle with BUGS syntax despite understanding the theory of MCMC), but I am uncomfortable with the idea of truly novice users using the automatically generated code without understanding what is happening (i.e. as a totally black box). But perhaps I am being overly cautious ... I would be very interested to hear others' opinions (privately by email to the maintainer of the runjags package if preferred) as I have not yet decided how far to develop these functions, and would certainly take on board useful comments and suggestions.
