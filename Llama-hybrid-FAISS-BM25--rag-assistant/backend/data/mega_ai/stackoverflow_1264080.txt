[site]: stackoverflow
[post_id]: 1264080
[parent_id]: 1264034
[tags]: 
When something is broken, the courageous language designer must not be afraid to break backward compatibility. I know of two good ways to do it: The Glasgow Haskell Compiler typically deprecates unwanted features and then drops support after two versions. The Lua team have a policy that each major release (there have been 5 since 1993) may break backward compatibility, but they typically provide a compatibility layer that helps users migrate to the latest version. (Plus they are scrupulous about keeping everything available; the current version is 5.1 but I have Lua 2.5 code that I still maintain, and if I find a bug in Lua 2.5, they will fix it.)
