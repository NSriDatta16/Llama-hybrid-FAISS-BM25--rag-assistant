[site]: stackoverflow
[post_id]: 1490028
[parent_id]: 
[tags]: 
iPhone dev -- performSelector:withObject:afterDelay or NSTimer?

To repeat a method call (or message send, I guess the appropriate term is) every x seconds, is it better to use an NSTimer (NSTimer's scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:) or to have the method recursively call itself at the end (using performSelector:withObject:afterDelay)? The latter doesn't use an object, but maybe its less clear/readable? Also, just to give you an idea of what I'm doing, its just a view with a label which counts down to 12:00 midnight, and when it gets to 0, it will blink the time (00:00:00) and play a beep sound forever. Thanks. Edit: also, what would be the best way to repeatedly play a SystemSoundID (forever) ? Edit: I ended up using this to play the SystemSoundID forever: // Utilities.h #import #import static void soundCompleted(SystemSoundID soundID, void *myself); @interface Utilities : NSObject { } + (SystemSoundID)createSystemSoundIDFromFile:(NSString *)fileName ofType:(NSString *)type; + (void)playAndRepeatSystemSoundID:(SystemSoundID)soundID; + (void)stopPlayingAndDisposeSystemSoundID; @end // Utilities.m #import "Utilities.h" static BOOL play; static void soundCompleted(SystemSoundID soundID, void *interval) { if(play) { [NSThread sleepForTimeInterval:(NSTimeInterval)interval]; AudioServicesPlaySystemSound(soundID); } else { AudioServicesRemoveSystemSoundCompletion(soundID); AudioServicesDisposeSystemSoundID(soundID); } } @implementation Utilities + (SystemSoundID)createSystemSoundIDFromFile:(NSString *)fileName ofType:(NSString *)type { NSString *path = [[NSBundle mainBundle] pathForResource:fileName ofType:type]; SystemSoundID soundID; NSURL *filePath = [NSURL fileURLWithPath:path isDirectory:NO]; AudioServicesCreateSystemSoundID((CFURLRef)filePath, &soundID); return soundID; } + (void)playAndRepeatSystemSoundID:(SystemSoundID)soundID interval:(NSTimeInterval)interval { play = YES AudioServicesAddSystemSoundCompletion(soundID, NULL, NULL, soundCompleted, (void *)interval); AudioServicesPlaySystemSound(soundID); } + (void)stopPlayingAndDisposeSystemSoundID { play = NO } @end Seems to work fine.. And for the label blinking I'll use an NSTimer I guess.
