[site]: stackoverflow
[post_id]: 759791
[parent_id]: 759734
[tags]: 
I had a similar problem a while ago, and did not find any easy way to do this using an import wizard. The way I resolved the import (as this was a one-off task, and not something that was going to hang around) was to create a simple macro (VBA) from excel that would simply call a stored proc, using each row as the parameters. The stored proc would intelligently insert each parameter (column), and then grab the ID to use as the foreign key on the next parameter insert. For example: DECLARE @CategoryID INT DECLARE @SubCategoryID INT -- Check that the Category exists IF NOT EXISTS (SELECT * FROM tblCategories WHERE CategoryName = @pCategoryName) BEGIN -- Your insert statement here, then grab the ID SET @CurrencyID = scope_identity() END ELSE BEGIN -- Set the category ID here END The VBA macro had code similar to: Private Sub CommandButton1_Click() Dim cnt As ADODB.Connection Dim wbBook As Workbook Dim wsSheet As Worksheet Dim intActiveRow As Long Dim intInsuranceProduct As Variant ' Get our connection Set cnt = CreateConnection() ' Read the input sheet Set wbBook = ActiveWorkbook Set wsSheet = wbBook.Worksheets(1) ' Ignore the header row intActiveRow = 2 ' process every row into the database Do While (wsSheet.Cells(intActiveRow, 1) "") ' execute the stored procedure, GenerateScript would create your SQL cnt.Execute (GenerateScript(wsSheet, intActiveRow)) ' increment i for row count intActiveRow = intActiveRow + 1 Loop End If 'Cleaning up. cnt.Close Set cnt = Nothing Set wbBook = Nothing Set wsSheet = Nothing End Sub
