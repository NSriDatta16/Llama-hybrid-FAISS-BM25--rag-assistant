[site]: stackoverflow
[post_id]: 1740962
[parent_id]: 1740788
[tags]: 
To answer your question in the comment, here's the query I would envision: SELECT users.name, users.email, addresses.street, addresses.city, addresses.state, addresses.zip FROM users LEFT JOIN addresses ON users.id = addresses.user_id WHERE users.id = 1 Since the sub-select is at most a projection of the addresses table, it seems redundant. As for the main question, I'm having a hard time coming up with anything that's elegant and non-hackish. In fact, the only things that do come to mind are downright ugly. You could, for instance, add prefixes to the column names in the query: SELECT users.name AS user_name, users.email AS user_email, addresses.street AS address_street, ... You'd have to parse the column names yourself. I suppose it wouldn't be too bad. Something like: function rowToObject($row) { $obj = new StdClass(); foreach ($row as $key => $val) { $keys = explode('_', $key); $o = $obj; for ($i=0; count($keys) > 1; ++$i) { $k = array_shift($keys); if (! isset($o->{$k})) { $o->{$k} = new StdClass(); } $o = $o->{$k}; } $o->{$keys[0]} = $val; } return $obj; } ... $result = rowToObject($mysql->query($query)->fetch_assoc());
