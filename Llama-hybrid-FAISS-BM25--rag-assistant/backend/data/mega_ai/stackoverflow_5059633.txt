[site]: stackoverflow
[post_id]: 5059633
[parent_id]: 5027045
[tags]: 
A nice explanation by Robert on Inheritance in Javascript here The way inheritance works in JavaScript is that it is prototype , instead of class-based . For e.g function Being () { this.living = true; } Being.prototype.breathes = function () { return true; An object which inherits Being Robert.prototype = new Being; function Robert () { this.blogs = true; } Robert.prototype.getsBored = function () { return "You betcha"; }; So, basically, if we create a new instance of the Robert object and call some of its methods, the result would be: // Create an instance of the Robert object var me = new Robert(); /* Returns "You betcha" as it's a method belonging to the Robert object */ me.getsBored(); /* Returns true. Since the Robert object doesn't have a breathes method of its own, it goes back in the prototype chain to its parent object, Being, and finds the method there */ me.breathes(); Also a good read of JavaScript inheritance : JavaScript Inheritance
