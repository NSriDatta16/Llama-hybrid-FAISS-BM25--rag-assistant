[site]: stackoverflow
[post_id]: 1951403
[parent_id]: 1950204
[tags]: 
I'll go ahead and assume we're talking about RESTful HTTP :) This is how you would expose a "list of resources with parameters that influence what is selected": /list?{search part} Where the search part is some arbitrary string which you use to target a 'section' of the list resource. The common way to do this (the way that browsers + html forms work) is to have key/value pairs for each parameter i.e: /list?name1=fred&name2=dave&name3=matt This convention for arranging your search part is not mandatory but you will find that following this pattern makes it easier to write HTML for your app. It would be no less valid in terms of HTTP and URI to use the following: /list?fred,dave,matt how to effectively structure urls for resources that may be referred to by themselves but are conceptually subordinate to some other entity In REST there is no such thing as 'structured' URIs. A URI is simply a unique identifier - similarities and patterns in URI structure can make organising server side logic easier and make it 'pretty' for users to look at and figure out - but if you're doing REST there is no relationship between the following: /foo /foo/bar .. unless you create a relationship with a hyperlink from one to the other. This rule of thumb is generally referred to as the 'hypertext constraint' or 'HATEOAS'. Having said that - there's nothing wrong with 'prettying' up your URIs. Just be aware that (if you want to 'do REST') you should be linking everything together. Most APIs expose 'nested resources' like this: /countries/england/cities/london Hope that's helpful :-)
