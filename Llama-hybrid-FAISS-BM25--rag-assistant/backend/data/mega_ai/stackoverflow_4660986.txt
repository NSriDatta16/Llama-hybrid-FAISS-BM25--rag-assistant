[site]: stackoverflow
[post_id]: 4660986
[parent_id]: 4659012
[tags]: 
There's no issue. If an expression is marked as always true, that does not mean that you have less than 100% coverage. As an example, I just wrote a small executable based on fac, then ran hpc on it and hpc report on the resulting tix file. Here's the source: fac n | n > 0 = n * (fac (n - 1)) | n == 0 = 1 | otherwise = 125 -- An arbitrary value. This of couse is demo code, and not actually a factorial. main = print (fac 12) >> print (fac (negate 100)) and here's the result: 100% expressions used (23/23) 66% boolean coverage (2/3) 66% guards (2/3), 1 always True 100% 'if' conditions (0/0) 100% qualifiers (0/0) 100% alternatives used (3/3) 100% local declarations used (0/0) 100% top-level declarations used (2/2) The key thing is 100% expressions used, and 100% alternative used, 100% top-level declarations used. The fact that you have 66% boolean coverage is irrelevant. That's why if you run hpc markup and look at the resulting hpc_index file, it reports top level, alternative, and expressions, but not boolean coverage.
