[site]: stackoverflow
[post_id]: 3440842
[parent_id]: 3440776
[tags]: 
As Josh K points out, that looks suspiciously like a JSON string. Maybe you should do a json_decode() on it to get the actual data you're looking for, all organized nicely into an array of objects. EDIT: it seems your string is itself wrapped in double quotes " , so you'll have to trim those away before you'll be able to decode it as valid JSON: $str_json = trim($str, '"'); $guests = json_decode($str_json); var_dump($guests); I get this output with the var_dump() , so it's definitely valid JSON here: array(2) { [0]=> object(stdClass)#1 (4) { ["firstname"]=> string(6) "guest1" ["lastname"]=> string(3) "one" ["age"]=> string(2) "22" ["gender"]=> string(4) "Male" } [1]=> object(stdClass)#2 (4) { ["firstname"]=> string(6) "guest2" ["lastname"]=> string(3) "two" ["age"]=> string(2) "22" ["gender"]=> string(6) "Female" } } JSON (JavaScript Object Notation) is not CSV (comma-separated values) . They're two vastly different data formats, so you can't parse one like the other. To get your two strings, use a loop to get the keys and values of each object, and then build the strings with those values: foreach ($guests as $guest) { $s = array(); foreach ($guest as $k => $v) { if ($k == 'gender') break; $s[] = "$k:$v"; } echo implode(',', $s) . "\n"; } Output: firstname:guest1,lastname:one,age:22 firstname:guest2,lastname:two,age:22 (Assuming you do want to exclude the genders for whatever reason; if not, delete the if ($k == 'gender') break; line.)
