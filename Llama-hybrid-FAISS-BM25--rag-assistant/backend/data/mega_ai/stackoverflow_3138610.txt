[site]: stackoverflow
[post_id]: 3138610
[parent_id]: 3138507
[tags]: 
Depends on the application and the effect you wish to achieve. Here are two scenarios: if you are dealing with a GUI then perhaps chunking is a good idea where a small chunk would update the visuals giving an illusion of 'speed' to human. Here you want to logically chunk up the data as per gui update requirements. You can apply this same concept to prioritizing any other pseudo-real-time scenario. If on the other hand you are just dumping this data then don't chunk, since 100 6 byte requests are overall significantly more time consuming than 1 600 byte request. Generally speaking however, network packet transportation (TCP) chunking and delivery is FAR more optimized than whatever you could come up with at the application transport layer (HTTP). Multiple requests / chunks means multiple fragments. It is generally a futile effort to try to do transport layer optimizations using application layer protocol. And, IMHO it defeats the purpose of both :-) If you have real time requirements for whatever reason, then you should take control of the transport itself and do optimization there (but that does not seem to be the case). Happy coding
