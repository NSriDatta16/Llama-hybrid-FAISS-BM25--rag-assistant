[site]: stackoverflow
[post_id]: 3576700
[parent_id]: 3575160
[tags]: 
Okay, researched this one a little bit. If you can get an instance of a DB_Adapter (which I believe that resource call will return), this shouldn't be too tough. Deep down inside, Magento is based on Zend Framework, and the DB adapter specifically is descended from Zend_Db_Adapter , so you can use those methods for free. See the link before for more examples, but here's the syntax provided in the docs, which should escape your input automagically: $write = Mage::getSingleton("core/resource")->getConnection("core_write"); // Concatenated with . for readability $query = "insert into mage_example " . "(name, email, company, description, status, date) values " . "(:name, :email, :company, :desc, 0, NOW())"; $binds = array( 'name' => "name' or 1=1", 'email' => "email", 'company' => "company", 'desc' => "desc", ); $write->query($query, $binds); Again, see the docs for more information. UPDATE: I've changed the example above. The object that you get back with your core_write request is a PDO object that exposes a query method (see above) that will let you used parameterized queries. This is BY FAR a better approach than attempting to use something like mysql_real_escape_string for data sanitization, and I've tested the above code for correctness. Note that, in contrast to most MySQL parameterized queries, the binding is done with :labels, and also that you need no quotes for your vars. In response to your other point, and as noted below, the "right" way to do it in Magento is not to use direct queries at all. The Magento object models are well development and meant to abstract this kind of implementation detail away from you, because you shouldn't need to concern yourself with it. To do it "correctly", create a new database-based model and save the headache.
