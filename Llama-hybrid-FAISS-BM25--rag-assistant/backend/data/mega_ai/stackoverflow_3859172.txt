[site]: stackoverflow
[post_id]: 3859172
[parent_id]: 3858956
[tags]: 
The thing is, your field must be private (I don't even know why the ability to create public non-final fields exists). So how could you possibly access it from another class? If you don't wish to break it during a refactor I can give you a little trick I use that kinda helps sometimes. When you create your class, make it either an inner class of the existing class or a second class in the same file. If you make it an inner class you can copy the methods over first and they can refer to the member in the other class. Once you get all the functionality ported over you can move the variable. At this point none of the references to the variable should be updated since you access it the same way regardless of which class it was in. Making a class a second class in the same file can be nice if you are splitting apart functionality as well--it lets you access everything at once without mousing between windows. When you are done just drag the new class into it's own java file, recalculate imports, reformat make it public and save it. I nearly always use one of these methodologies when creating a new class that interacts with existing classes.
