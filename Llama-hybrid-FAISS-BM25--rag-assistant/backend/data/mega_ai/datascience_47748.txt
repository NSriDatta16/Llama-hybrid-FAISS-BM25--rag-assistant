[site]: datascience
[post_id]: 47748
[parent_id]: 
[tags]: 
Advice on dealing with very large datasets - HDF5, Python

Recently, I've started working on an application for the visualization of really big datasets. While reading online it became apparent that most people use HDF5 for storing big, multi-dimensional datasets as it offers the versatility to allow many dimensions, has no file size limits and is transferable between operating systems. How could I effectively manage very large files? I am working with datasets that have 3 dimensions, all of which have a large number of components (example size: 62,500 x 500,000 x 3,500, 32-bit int) which is a little problematic. HDF5 is theoretically able to deal with this, however, I've discovered it is really slow to write the data into the file and subsequently slow to retrieve it. Because the number of items is very large, data must be compressed otherwise it becomes insanely large on the HDD, however, compression requires chunking and chunking is quite tricky to get right... I receive my data in (1 x 500,000 x 3500) chunks so it makes sense to write it one row at a time so with those dimensions and I ensure that chunks have dimensions (1 x n_values x 3500) to speed up writing and data retrieval and have a relatively small size ( Does anyone have any experience in how to efficiently write to HDF5 files when the size of each dimension is v. large? Are there any tricks that could help? I should also mention that Python is my primary programming language, but I would be happy to do it in another language. I have attempted to increase the chunk cache via the h5py_cache library.
