[site]: stackoverflow
[post_id]: 5624322
[parent_id]: 5557599
[tags]: 
I recommend using Ragel to handle the parsing smarts. It should be much easier than using NSScanner once you have the basic scaffolding in place to set up the parser and feed bytes into it until parsing finishes. What objects you want to use to store the parsed results in is up to you. It shouldn't be too hard to build your object graph using action functions triggered by state machine transitions. How you want to get bytes to feed into Ragel is also up to you. You can use C standard IO streams, Foundation streams, or Foundation file handles. All Ragel cares about is getting its hands on a buffer of characters so it can run it through the state machine your description was compiled into. NSCoder is likely to be more trouble than it's worth for your purposes. It expects to be used as a way to persist and decode an Obj-C object, with the coding/decoding driven by the object's demands ("Okay, now gimme an int, now a short, how's about an Obj-C object nowâ€¦").
