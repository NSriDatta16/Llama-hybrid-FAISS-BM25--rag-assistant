[site]: stackoverflow
[post_id]: 269242
[parent_id]: 269223
[tags]: 
Someone will have a much more verbose answer than I, but the quick response is two-fold: the compiler needs to know all the members of a struct to determine the storage space requirements, and the compiler needs to know the ordering of those members to generate offsets in a deterministic way. The language is already fairly complicated; I think a mechanism to split the definitions of structured data across the code would be a bit of a calamity. Typically, I've always seen policy classes used to define implementation behavior in a Pimpl-manner. I think there are some added benefits of using a policy pattern -- easier to interchange implementations, can easily combine multiple partial implementations into a single unit which allow you to break up the implementation code into functional, reusable units, etc.
