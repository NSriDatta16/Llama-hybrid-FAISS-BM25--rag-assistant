[site]: stackoverflow
[post_id]: 2425910
[parent_id]: 2383643
[tags]: 
Firstly, I would suggest to consider what is your primary concern, what is the problem that you are tying to solve by rolling out TFS. In terms of v ersion control I would recommend the blog post from Martin Fowler on Version Control Tools and a follow up results of a version control systems survey . Admittedly this might be and is a subjective view of the subject but one that seems to be pretty popular. TFS clearly looses in comparison to other Version Control Systems. I currently work with TFS2008 and we have migrated from SourceSafe and IBM ClearCase/ClearQuest and there is no doubt that TFS is far better then any of the previous tool, still it has its serious shortcomings and the new version will only partially address those. Addressing the individual point you have raised: TFS allows to link builds with changesets and work items, but so many other systems I have not used OnTime but the workflow customisation can be both an advantage and a hindrance. Potentially, there might be a lot of work involved in creating a custom process template and you would still need a sensible UI on top of it (Team Explorer or Web Access might not be sufficient) Integration with Visual Studio is an advantage but there are add-ons to Visual Studio that allow integration with other source control providers On the advantages of TFS I would probably mention Distributed builds and separate build agents - if you do many builds Full integration with Visual Studio via the Team Explorer Extensive reporting infrastructure (though you can only take full advantage of it when using MSTest for all the testing) SharePoint collaboration site for each project Given the substantial cost of rolling out full TFS installation I would really consider what real business benefit would this solution give you that others don't.
