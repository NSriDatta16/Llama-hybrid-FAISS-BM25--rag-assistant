[site]: stackoverflow
[post_id]: 2193845
[parent_id]: 
[tags]: 
C# NetworkStream.Read oddity

Can anyone point out the flaw in this code? I'm retrieving some HTML with TcpClient. NetworkStream.Read() never seems to finish when talking to an IIS server. If I go use the Fiddler proxy instead, it works fine, but when talking directly to the target server the .read() loop won't exit until the connection exceptions out with an error like "the remote server has closed the connection". internal TcpClient Client { get; set; } /// bunch of other code here... try { NetworkStream ns = Client.GetStream(); StreamWriter sw = new StreamWriter(ns); sw.Write(request); sw.Flush(); byte[] buffer = new byte[1024]; int read=0; try { while ((read = ns.Read(buffer, 0, buffer.Length)) > 0) { response.AppendFormat("{0}", Encoding.ASCII.GetString(buffer, 0, read)); } } catch //(SocketException se) { } finally { Close(); } Update In the debugger, I can see the entire response coming through immediately and being appended to my StringBuilder (response). It just appears that the connection isn't being closed when the server is done sending the response, or my code isn't detecting it. Conclusion As has been said here, it's best to take advantage of the offerings of the protocol (in the case of HTTP, the Content-Length header) to determine when a transaction is complete. However, I've found that not all pages have content-length set. So, I'm now using a hybrid solution: For ALL transactions, set the request's Connection header to "close", so that the server is discouraged from keeping the socket open. This improves the chances that the server will close the connection when it is through responding to your request. If Content-Length is set, use it to determine when a request is complete. Else, set the NetworkStream's RequestTimeout property to a large, but reasonable, value like 1 second. Then, loop on NetworkStream.Read() until either a) the timeout occurs, or b) you read fewer bytes than you asked for. Thanks to everyone for their excellent and detailed responses.
