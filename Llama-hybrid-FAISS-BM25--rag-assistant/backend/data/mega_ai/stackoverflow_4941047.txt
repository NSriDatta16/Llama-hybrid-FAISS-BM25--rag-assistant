[site]: stackoverflow
[post_id]: 4941047
[parent_id]: 4940874
[tags]: 
Although I can't believe they're actually still teaching COBOL (under the guise of C), I'll help you out, since, unlike some who seek help here, you've actually put in quite a bit of work :-) The trick is to not print after every update but rather wait until the account number transitions, the print out the previous final details. And, since you'll reach the end of the transaction file while processing the last account, you'll have to do that one more time after you exit the loop. Here's the detailed steps. Introduce three more variables, char lastname[30] , int lastaccount and double lastbalance . Ensure that lastaccount is initialised to -1 . Then your code can catch the transitions of account number by simply checking the values of lastaccount and account . The storage of all three fields is to ensure that you can print out details for the previous account even though you've already read in the new account details. Before matches = 1 , insert the following code: if (lastaccount != account) { if (lastaccount != -1) printf(" %-10d%-10s%.2lf\n", lastaccount, lastname, lastbalance); lastaccount = account; strcpy (lastname, name); } You'll also need to include string.h to get the prototype for strcpy . This will catch the transitions of account number and print the details for the last one (unless the last one was account number -1 of course since that means there is no previous one). But whether it prints or not, it sets up for the next transition. Immediately after balance = total , add lastbalance = balance; . This will maintain the most recent balance for the current account so that it can be printed on transition. Unlike the account number and name, this has to be done for every transaction rather than every account . That's because the account/name don't change for an account but the closing balance does (for every single transaction). Outside of the loop, immediately before fclose (cfPtr2); , put the code: if (lastaccount != -1) printf(" %-10d%-10s%.2lf\n", lastaccount, lastname, lastbalance); This prints the details for the final account, assuming that there were any processed at all. As mentioned earlier, this is needed because you'll reach the end of the file without having done a transition due to changed account number. And, please, as a final request: get rid of conio.h and use getchar() instead of getch() . if possible, ditch Turbo C and use gcc - it's so much better :-) don't fflush(stdin) . use the canonical int main (void) ... . return something from main (although I think that's relaxed in later versions of the standard). I won't post my actual code (unless you guarantee it's not homework) but the following transcript shows that those changes should be enough to fix your current issues: $ cat clients.dat 1 Pax 4.2 2 Roger 0 $ cat transactions.dat 1 1/2/3 112.3 1 2/3/4 -22.1 2 3/4/5 7 $ ./qq Account Name Balance |----------------------------------| 1 Pax 94.40 2 Roger 7.00 For what it's worth, I'm not sure I quite agree with treating the tranasction file as the primary element. Since your job is to copy the account file with needed modifications (as specified in the transaction file), I'd prefer to process the account file as the primary unit. It just seems cleaner to me that way. And, in the interests of completeness, here's the code I came up with. I wouldn't suggest handing this in as an assignment since there are numerous things likely to get your mark reduced, things that matter a whole lot less in the real world but which educators have a particular bee in their bonnet about :-) Things like multiple return points, using #define instead of enum , and so on. #include #include #define HDR_LINE 0 #define HDR_FULL 1 static void outHeader (int withHeading) { printf ("+-%-6s-+-%-10s-+-%-6s-+-%-6s-+-%-6s-+\n", "------", "----------", "------", "------", "------"); if (withHeading) printf ("| %-6s | %-10s | %-6s | %-6s | %-6s |\n", " Acct ", " Name ", " Date ", "Amount", "Balnce"); } static void closeFiles (FILE *pfCli, FILE *pfTxn, FILE *pfNew) { if (pfCli) fclose (pfCli); if (pfTxn) fclose (pfTxn); if (pfNew) fclose (pfNew); } static int openFiles (FILE **pfCli, FILE **pfTxn, FILE **pfNew) { *pfCli = *pfTxn = *pfNew = NULL; if ((*pfCli = fopen ("clients.dat", "r")) == NULL) { printf ("File clients.dat could not be opened\n"); closeFiles (*pfCli, *pfTxn, *pfNew); return 0; } if ((*pfTxn = fopen ("transactions.dat", "r")) == NULL) { printf ("File transactions.dat could not be opened\n"); closeFiles (*pfCli, *pfTxn, *pfNew); return 0; } if ((*pfNew = fopen ("clientupdate.dat", "w")) == NULL) { printf ("File clientupdate.dat could not be opened\n"); closeFiles (*pfCli, *pfTxn, *pfNew); return 0; } return 1; } static void outCli (int acct, char *nm, double bal, char *ind) { if (acct == -1) printf ("| %6s | %-10s | %6s | %6s | %6.2lf | %s\n", "", nm, "", "", bal, ind); else printf ("| %6d | %-10s | %6s | %6s | %6.2lf | %s\n", acct, nm, "", "", bal, ind); } static void outTxn (char *date, double amt, double bal) { printf ("| %6s | %10s | %-6s | %6.2lf | %6.2lf |\n", "", "", date, amt, bal); } static void getTxn (FILE *fh, int *acct, char *date, double *amt) { if (feof (fh)) *acct = -1; else fscanf (fh, "%d%s%lf\n", acct, date, amt); } static void getCli (FILE *fh, int *last, int *acct, char *nm, double *bal) { if (*last != -1) outCli (-1, "", *bal, "-->"); *last = *acct; fscanf (fh, "%d%s%lf\n", acct, nm, bal); } int main (void) { int cli_acct, txn_acct, last_acct = -1; char txn_date[10], cli_nm[10]; double cli_bal, txn_amt; FILE *fCli, *fTxn, *fNew; // Open all files, output header and load up first transaction. if (!openFiles (&fCli, &fTxn, &fNew)) return 1; outHeader (HDR_FULL); getTxn (fTxn, &txn_acct, txn_date, &txn_amt); // Process every account. while (!feof (fCli)) { // Bring in an account and print starting balance. getCli (fCli, &last_acct, &cli_acct, cli_nm, &cli_bal); outHeader (HDR_LINE); outCli (cli_acct, cli_nm, cli_bal, " "); outHeader (HDR_LINE); fscanf (fCli, "%d%s%lf\n", &cli_acct, &cli_nm, &cli_bal); outCli (cli_acct, cli_nm, cli_bal, " "); outHeader (HDR_LINE); // Close all files and exit successfully. closeFiles (fCli, fTxn, fNew); return 0; } Given the clients.dat of: 0 Mary 99.9 1 Pax 4.2 2 Bob 7 4 Roger 0 5 Nobody 9 and the transactions.dat of: 1 1/2/3 112.3 1 2/3/4 -22.1 4 3/4/5 7 this outputs: +--------+------------+--------+--------+--------+ | Acct | Name | Date | Amount | Balnce | +--------+------------+--------+--------+--------+ | 0 | Mary | | | 99.90 | +--------+------------+--------+--------+--------+ | 1 | Pax | | | 4.20 | +--------+------------+--------+--------+--------+ | 2 | Bob | | | 7.00 | +--------+------------+--------+--------+--------+ | 4 | Roger | | | 0.00 | +--------+------------+--------+--------+--------+ | 5 | Nobody | | | 9.00 | +--------+------------+--------+--------+--------+ and creates the clientupdate.dat of: 0 Mary 99.90 1 Pax 94.40 2 Bob 7.00 4 Roger 7.00 5 Nobody 9.00 Feel free to use that code for any purpose other than passing it off as your own homework.
