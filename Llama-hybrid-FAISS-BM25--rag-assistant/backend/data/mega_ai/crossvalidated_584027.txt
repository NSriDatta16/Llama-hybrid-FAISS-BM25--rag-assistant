[site]: crossvalidated
[post_id]: 584027
[parent_id]: 
[tags]: 
Learning a simple pattern with RNN

I am trying to make RNN in tensorflow capture a basic pattern in a simple time series in hours. I am trying to solve a bigger problem involving count time series of customer demand. The simple time series is as follows: Every 24 hours (1 day) there will be a small integer number either 1 or 2 from a random uniform distirbution. In between these 24 hours will be zero values. Every 168 hours (7 days) there will be a high integer number (5 or 6 or 7 or 8 or 9) from a random uniform distirbution. I tried following the code at https://r2rt.com/recurrent-neural-networks-in-tensorflow-i.html using dynamic_rnn. Is my test data correct? How can I feed the batches of output from previous times step as input to the next time step? I have 5 hyperparamters to play with batch_size = 8 num_steps = 192 state_size = 5 learning_rate = 0.00001 num_epochs=1 However, after training each time with the same hyperparameters I am getting different results. Each time the training error is very small. The different results seem quite random (local minima probably??). orange is actual, blue is predicted. Can my test batch start at any point in the sequence? Does the RNN learn the number of zeros inbetween non-zero values? if the test batch starts with a small non-zero number then the RNN should know that it should output 23 zero value steps after this and then after 167 steps output a high non-zero value. if I start my test sequence at 0 then it should wait 23 more zero value steps before outputing a small non-zero value and after 167 steps output a high non-zero value? or does it learn another pattern? I am not sure if my method of testing is correct? Is it better to just pass one time step integer value and let the network generate the remaining time steps integer values by passing the current time step output as input to the next time step? Currently, I just take a random sequence of X generated by the same method for training and check if my output Y is the shifted version of X by 1 time step. Could you please explain? My code is given below. you can just copy and paste and it should run. Basically, I just generate the data, build the model, train the network and test it. from data_generator import gen_data import tensorflow as tf tf.compat.v1.disable_eager_execution() import numpy as np import time import matplotlib.pyplot as plt num_classes = 11 batch_size = 8 num_steps = 192 state_size = 5 learning_rate = 0.00001 num_epochs=1 dem = gen_data(len=1576) def gen_batch(dem, batch_size, num_steps): raw_x = dem[:-1] raw_y = dem[1:] data_length = len(raw_x) num_of_win = data_length - num_steps - 1 # 1382 windows batch_partition_length = num_of_win // batch_size # 172 batches data_x = [] data_y = [] j=0 for i in range(batch_partition_length): windows_x = [] windows_y = [] k=0 while(k
