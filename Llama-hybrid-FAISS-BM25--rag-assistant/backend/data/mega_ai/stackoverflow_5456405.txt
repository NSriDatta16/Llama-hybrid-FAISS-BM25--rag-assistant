[site]: stackoverflow
[post_id]: 5456405
[parent_id]: 5456317
[tags]: 
Assign an empty string to it, set it to nil or call Finalize() on it. They are all equivalent and they will deallocate the storage thus removing your memory leak. In response to Marco's comment, the documentation is explicit on this: Dynamic variables that are ordinarily managed by the compiler (long strings, wide strings, dynamic arrays, variants, and interfaces) can be declared with threadvar, but the compiler does not automatically free the heap-allocated memory created by each thread of execution. If you use these data types in thread variables, it is your responsibility to dispose of their memory from within the thread, before the thread terminates. For example: threadvar S: AnsiString; S := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; ... S := ; // free the memory used by S Rather bizarrely the documentation contains a clear error in the final line which should read S := nil; It is of course easy to see for yourself that thread local variables are not disposed automatically: program LeakMe; {$APPTYPE CONSOLE} threadvar s: string; begin ReportMemoryLeaksOnShutdown := True; s := 'Leak me'; end.
