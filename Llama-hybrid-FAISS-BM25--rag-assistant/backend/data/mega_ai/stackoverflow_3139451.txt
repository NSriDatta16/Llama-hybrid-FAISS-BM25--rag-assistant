[site]: stackoverflow
[post_id]: 3139451
[parent_id]: 3139414
[tags]: 
If one or the other, I'd actually suggest Python in spite of being a C++ enthusiast. With Python code you don't have to bother with the MOC, portability, build times, etc. Just compare the work involved in implementing a QT slot in C++ vs. PyQT or PySide, e.g. I find it to be much less of a pain to deal with widgets this way (much greater productivity). You can still invoke C++ code from Python in cases where you need the added performance. If you do use a combination, consider extending Python rather than embedding it. Python is generally better suited to embed C/C++ code than to be embedded into a C/C++ system. It also tends to make more sense that way as applications are generally composed of far more mundane, non-performance critical code than performance-critical code, so writing your application primarily as a python application with C/C++ functions attached to it fits that kind of system design better.
