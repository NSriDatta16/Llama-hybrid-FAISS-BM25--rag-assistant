[site]: stackoverflow
[post_id]: 5349529
[parent_id]: 5349257
[tags]: 
Just an option: you could use reflection to get a list of properties, and then compare them bertween objects, something like: public static bool CompareExcept (T first, T second, params string[] excludeNames) { foreach (PropertyInfo pi in typeof(T).GetProperties()) { if (excludeNames.Contains(pi.Name)) // case sensitive continue; object propFirst = pi.GetGetMethod().Invoke(first, null); object propSecond = pi.GetGetMethod().Invoke(second, null); if (propFirst == null) { if (propSecond != null) return false; } else { if (!propFirst.Equals(propSecond)) return false; } } return true; } All the usual caveats connected to reflection apply, so this is slow, and it's best avoided in tight loops, but it's relatively easy to use Person p1 = new Person { ID = 1, FirstName = "John", LastName = "Doe", Age = 50 }; Person p2 = new Person { ID = 2, FirstName = "John", LastName = "Doe", Age = 50 }; Person p3 = new Person { ID = 3, FirstName = "Jane", LastName = "Roe", Age = 50 }; Person p4 = new Person { ID = 4, FirstName = "John", LastName = "Doe", Age = 60 }; bool areSame = CompareExcept(p1, p2, "ID"); // True areSame = CompareExcept(p1, p2, "Age"); // False areSame = CompareExcept(p1, p3, "ID"); // False areSame = CompareExcept(p1, p3, "ID", "FirstName", "LastName"); // True areSame = CompareExcept(p1, p4, "ID"); // False areSame = CompareExcept(p1, p4, "ID", "Age"); // True If you have lots of types you need compared, this is usefull. However, if this is a one time thing, you're better off explictly comparing all other fields.
