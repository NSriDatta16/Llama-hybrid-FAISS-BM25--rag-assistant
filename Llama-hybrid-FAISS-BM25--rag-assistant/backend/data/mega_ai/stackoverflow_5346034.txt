[site]: stackoverflow
[post_id]: 5346034
[parent_id]: 
[tags]: 
Problem with WPF Application and slow GUI response

I've been analyzing a WPF application which basically fetch data from a server and display the data in the GUI. This code is not mine, and the application has a problem related with slow response from the GUI, I'm trying to find the reason for that problem. I want to share with you my idea of which the problem could be and I'll like to hear what do you think about it, whether it makes any sense or not. To get the data from the server, the application is using 7 threads (this is done in this way mostly because of the application logic, so don't pay too much attention to why 7 and not just one...), now, each thread is created by calling a method, called CreateThreadForTask() public void StartAllThreads() { this.CreateThreadForTask(Tasks.Task1); this.CreateThreadForTask(Tasks.Task2); this.CreateThreadForTask(Tasks.Task3); this.CreateThreadForTask(Tasks.Task4); this.CreateThreadForTask(Tasks.Task5); this.CreateThreadForTask(Tasks.Task6); this.CreateThreadForTask(Tasks.Task7); } public void CreateThreadForTask(Tasks task) { ... // this part of the code is not important //! Initialize and start timer timer = null; timer = new DispatcherTimer(); timer.Tick += new EventHandler(RunMainSyncForTask); timer.Start(); } public void RunMainSyncForTask(object s, EventArgs e) { int sec = int.Parse(AppSettings.GetSetting("syncInterval")); timer.Interval = new TimeSpan(0, 0, sec); //threadCaller is a background worker threadCaller = InitializeThread(); threadCaller.DoWork += DoWorkEventHandler(StartSync); threadCaller.RunWorkerAsync(); } When I was debugging the code I noticed that all the threads are created using a DispatcherTimer; what I think is that the application is creating 7 DispatcherTimer's and is linking the Tick event of the timers with the RunMainSyncForTask() method, which inside, create a background worker that fetch the data from the server and save that data to a local database. Now, this was taken from the MSDN The DispatcherTimer is reevaluated at the top of every Dispatcher loop. Timers are not guaranteed to execute exactly when the time interval occurs, but they are guaranteed to not execute before the time interval occurs. This is because DispatcherTimer operations are placed on the Dispatcher queue like other operations. When the DispatcherTimer operation executes is dependent on the other jobs in the queue and their priorities. So, based on that I believe that the application is spamming threads every time a timer does a tick event, and this is done 7 times simultaneously; and all these operations, because of the DispatcherTimer nature, are being added to the Dispatcher queue, which makes the GUI response slow, due to the Dispatcher being busy. Also, another problem with the application is that, when it runs, it takes about 90-95% of the CPU, I think that if my hypothesis is right, this could be also the cause of for this problem. So if you can share some insides about this I'll appreciate it. Thanks.
