[site]: stackoverflow
[post_id]: 4467642
[parent_id]: 4467460
[tags]: 
XPath using this expression will easily solve your problem: String XPATH_EXPRESSION1 = "//name/text()"; e.g., public static final String PRODUCTS_NEW = "http://roberthan.host56.com/productsNew.xml"; public static final String XPATH_EXPRESSION1 = "//name/text()"; public XmlFun() { URL productsUrl; try { productsUrl = new URL(PRODUCTS_NEW); List nameList = xPathExtract(productsUrl.openStream()); } catch (MalformedURLException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (ParserConfigurationException e) { e.printStackTrace(); } catch (SAXException e) { e.printStackTrace(); } catch (XPathExpressionException e) { e.printStackTrace(); } } private List xPathExtract(InputStream inStream) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException { DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder builder = domFactory.newDocumentBuilder(); Document domDoc = builder.parse(inStream); XPathFactory xFactory = XPathFactory.newInstance(); XPath xpath = xFactory.newXPath(); XPathExpression xExpr = xpath.compile(XPATH_EXPRESSION1); NodeList nodes = (NodeList)xExpr.evaluate(domDoc, XPathConstants.NODESET); List resultList = new ArrayList (); for (int i = 0; i
