[site]: stackoverflow
[post_id]: 1769886
[parent_id]: 
[tags]: 
How to code a truly generic tree using Generics

Lets say I have a Node class as follows: class Node { T data; List > children; internal Node(T data) { this.data = data; } List > Children { get { if (children == null) children = new List >(1); return children; } } internal IEnumerable > GetChildren() { return children; } internal bool HasChildren { get { return children != null; } } internal T Data { get { return data; } } internal void AddChild(Node child) { this.Children.Add(child); } internal void AddChild(T child) { this.Children.Add(new Node (child)); } } The problem is that each and every node of the tree is confined to a single type. However, there are situations where the root node is of one type, which has children of another type which has children of a third type (example documents-->paragraphs-->lines-->words). How do you define a generic tree for such cases?
