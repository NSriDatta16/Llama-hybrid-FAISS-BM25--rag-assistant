[site]: stackoverflow
[post_id]: 4716286
[parent_id]: 4715266
[tags]: 
"The problem that I see with the above is that if we want a list of 500 items, it could potentially make 500 database requests. With all the network latency and that." True. Could also create unnecessary contention and consume server resources maintaining locks as you iterate over a query. "Another problem is that the users could have been deleted after we got the list from the database but before we are trying to get it from cache/db, which means that we will have null-problems." If I take that quote, then this quote: "The good thing is that it's highly cacheable." Is not true, because you've cached stale data. So strike off the only advantage so far. But to directly answer your question, the most efficient design, which seems to be what you are asking, is to use the database for what it is good for, enforcing ACID compliance and various constraints, most notably pk's and fk's, but also for returning aggregated answers to cut down on round trips and wasted cycles on the app side. This means you either put SQL into your app code, which has been ruled to be Infinite Bad Taste by the Code Thought Police, or go to sprocs. Either one works. Putting the code into the App makes it more maintainable, but you'll never be invited to any more elegant OOP parties.
