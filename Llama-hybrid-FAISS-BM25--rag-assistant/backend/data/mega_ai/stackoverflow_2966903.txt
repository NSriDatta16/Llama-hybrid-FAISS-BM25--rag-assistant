[site]: stackoverflow
[post_id]: 2966903
[parent_id]: 2965550
[tags]: 
I have used Standard ML both to implement decision trees and to write a compiler from a domain-specific language into decision trees. I've also compiled similar decision trees into C code. It really depends what you want to do with decision trees. If you are trying to do something sophisticated or you are trying to make the decision trees especially easy to read and write, I would suggest either creating a domain-specific language or embedding domain-specific operators into Haskell or Standard ML. If you just want to get going, you could start with ML (easier than Haskell for a beginner) and that preserves some options for later. In general, ML and Haskell are both very good at representing and manipulating trees of all kinds. I can't explain why someone would recommend a matrix-based language for decision trees.
