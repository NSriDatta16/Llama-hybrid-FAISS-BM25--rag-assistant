[site]: stackoverflow
[post_id]: 5595688
[parent_id]: 5594661
[tags]: 
I am using the same library for our company's application and as far as I know, also documented at http://wp7sqlite.codeplex.com (under Some Recommendations ) , if you close the connection you'll need to recreate it again. == ADDITIONAL COMMENTS == I've tracked down the cause of the error, created a fix and am testing it in our application. Briefly, in order to port the Community.CSharpSqlite library to WP7, the author wrote a FileStream wrapper around WP7 IsolatedStorageFileStream. When a db is opened, the db file stream is opened and read and closed by CSharpSqlite. But a handle to this stream is also stored in a Dictionary mapping the file path to stream. When a db is opened for a second time, the handle to the stream is retrieved but since it's closed (I'm assuming, haven't verified yet) the db fails to open. I will attempt to get my changes deployed to the wp7sqlite.codeplex.com project, but in the meantime if you have the source code make the following changes to Community.CsharpSqlite.FileStream change from public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int unused) { IsolatedStorageFileStream handler = null; if (FileStream.HandleTracker.TryGetValue(path, out handler)) { _internal = handler; } else { if (mode == FileMode.Create || mode == FileMode.CreateNew) { _internal = IsolatedStorageIO.Default.CreateFile(path); } else { _internal = IsolatedStorageIO.Default.OpenFile(path, FileMode.OpenOrCreate); } FileStream.HandleTracker.Add(path, _internal); } } to public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int unused) { IsolatedStorageFileStream handler = null; if(FileStream.HandleTracker.TryGetValue(path, out handler)) { _internal = handler; if(!_internal.CanRead) { FileStream.HandleTracker.Remove(path); CreateOpenNewFile(path, mode); } } else { CreateOpenNewFile(path, mode); } } private void CreateOpenNewFile(string path, FileMode mode) { if(mode == FileMode.Create || mode == FileMode.CreateNew) { _internal = IsolatedStorageIO.Default.CreateFile(path); } else { try { _internal = IsolatedStorageIO.Default.OpenFile(path, FileMode.OpenOrCreate); } catch(Exception ex) { var v = ex; } } FileStream.HandleTracker.Add(path, _internal); } This is the first time I'm attempting to debug and contribute to an open source project. Any comments or thoughts on these changes will be greatly appreciated. Alasdair.
