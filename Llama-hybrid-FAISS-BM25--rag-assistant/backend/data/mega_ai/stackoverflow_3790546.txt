[site]: stackoverflow
[post_id]: 3790546
[parent_id]: 3789866
[tags]: 
If you desire something like public class MyEntity { private String name; private Organization organization; // getter's and setter's public boolean equals(Object o) { if(!(o instanceof MyEntity)) return false; MyEntity other = (MyEntity) o; return new EqualsBuilder().append(getName(), other.getName()) .append(getOrganization(), other.getOrganization()) .isEquals(); } } But if you want to avoid it because you do now want to load a lazy loaded entity , you can rely on Hibernate.isInitialized method and supply your custom routine public boolean equals(Object o) { if(!(o instanceof MyEntity)) return false; MyEntity other = (MyEntity) o; boolean equals = new EqualsBuilder().append(getName(), other.getName()) .isEquals(); if(Hibernate.isInitialized(getOrganization())) { // loaded Organization } else { // supply custom routine } return equals; } I have a not-updated web page where Hibernate supply the following matrix no eq/hC at all eq/hC with the id property eq/hC with buisness key use in a composite-id No Yes Yes multiple new instances in set Yes No Yes equal to same object from other session No Yes Yes collections intact after saving Yes No Yes Where the various problems are as follows: use in a composite-id : To use an object as a composite-id, it has to implement equals/hashCode in some way, == identity will not be enough in this case. multiple new instances in set : Will the following work or not: HashSet someSet = new HashSet(); someSet.add(new PersistentClass()); someSet.add(new PersistentClass()); assert(someSet.size() == 2); equal to same object from another session : Will the following work or not: PersistentClass p1 = sessionOne.load(PersistentClass.class, new Integer(1)); PersistentClass p2 = sessionTwo.load(PersistentClass.class, new Integer(1)); assert(p1.equals(p2)); collections intact after saving : Will the following work or not: HashSet set = new HashSet(); User u = new User(); set.add(u); session.save(u); assert(set.contains(u)); It also highlight this Thread where equals/hashCode implementation is heavily discussed
