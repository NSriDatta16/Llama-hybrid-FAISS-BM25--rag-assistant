[site]: stackoverflow
[post_id]: 4818865
[parent_id]: 4818757
[tags]: 
A pointer is a variable that stores a memory address. So, yes, it has a value, and a memory address. int *p = 0; int **pp = &p . This is valid, p is a pointer that is stored in the stack and has a value of 0 and some memory address; pp is also allocated on the stack, has another memory addres and holds the memory address of p . A memory address must be stored somewhere and takes a fixed amount of storage. For example a memory address could, depending on your implementation, be stored on four bytes. In this case you have sizeof(char) = 1 sizeof(char *) = 4 sizeof( any other pointer type, including pointer to pointer ) = 4. so, by performing reinterpret_cast s your pointer can store any type that takes up to four bytes. But why would you like to do so?
