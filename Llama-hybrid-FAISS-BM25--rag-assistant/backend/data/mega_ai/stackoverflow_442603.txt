[site]: stackoverflow
[post_id]: 442603
[parent_id]: 442589
[tags]: 
The best idiom for threadsafe initialization code (imho) is the lazy inner class. The classic version is class Outer { class Inner { private final static SomeInterface SINGLETON; static { // create the SINGLETON } } public SomeInterface getMyObject() { return Inner.SINGLETON; } } because it's threadsafe, lazy-loading and (imho) elegant. Now you want testability and replaceability. It's hard to advise without knowing what exactly it is but the most obvious solution would be to use dependency injection, particularly if you're using Spring and have an application context anyway. That way your "singleton"'s behaviour is represented by an interface and you simply inject one of those into your relevant classes (or a factory to produce one) and then you can of course replace it with whatever you like for testing purposes.
