[site]: stackoverflow
[post_id]: 1472343
[parent_id]: 1471924
[tags]: 
I do not think sqlite would be "overkill" -- it comes with standard Python since 2.5, so no need to install stuff, and it can make and handle databases in either memory or local disk files. Really, how could it be simpler...? If you want everything in-memory including the initial values, and want to use dicts to express those initial values, for example...: import sqlite3 db = sqlite3.connect(':memory:') db.execute('Create table Users (Name, Location, Type)') db.executemany('Insert into Users values(:Name, :Location, :Type)', [ dict(Name="Mr. Foo", Location="Boston", Type="Secondary"), dict(Name="Mr. Bar", Location="New York", Type="Primary"), dict(Name="Mr. Quux", Location="Chicago", Type="Secondary"), ]) db.commit() db.row_factory = sqlite3.Row and now your in-memory tiny "db" is ready to go. It's no harder to make a DB in a disk file and/or read the initial values from a text file, a CSV, and so forth, of course. Querying is especially flexible, easy and sweet, e.g., you can mix string insertion and parameter substitution at will...: def where(w, *a): c = db.cursor() c.execute('Select * From Users where %s' % w, *a) return c.fetchall() print [r["Name"] for r in where('Type="Secondary"')] emits [u'Mr. Foo', u'Mr. Quux'] , just like the more elegant but equivalent print [r["Name"] for r in where('Type=?', ["Secondary"])] and your desired query's just: print [r["Name"] for r in where('Location="Boston" or Type="Primary"')] etc. Seriously -- what's not to like?
