[site]: stackoverflow
[post_id]: 3251909
[parent_id]: 
[tags]: 
Design to reduce code redundancy - Java/WebServices

Scenario: I'm working on a web services project. It supports SOAP and REST. The SOAP request and response are handled by XmlObjects. The REST architectures uses plain POJO's for request and Response. I have a common controller to handle the request from SOAP and REST. This controller understands a common object (Request Object). And , the controller sends back a Transfer Object. In front of the controller , I have a request translator to translate the SOAP/POJO objects to common Request Object. And also a response translator to convert the transfer objects to SOAP/REST view objects. Problem: I have 2 request and response translators. The SOAP/REST request and response translators look the same. But, they take a different object as input. So it looks like I have the same code 2 times. How to avoid this redundancy? Solutions that I thought of : Bean mapping. Is there anything else more elegant than this?
