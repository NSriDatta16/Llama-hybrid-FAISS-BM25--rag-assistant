[site]: stackoverflow
[post_id]: 2786833
[parent_id]: 2786794
[tags]: 
Your approach makes sense. I would normally decompose into a model (shared), numerous libraries, and then the applications consuming that code and the GUIs - all as separate projects. I tend to follow the Pragmatic Programmers' dictum of build toolsets, not applications . That way you can reassemble your components in lots of different ways. Each library/application would be its own project, with unit/functional tests and a deliverable (in your case, a Maven artifact that you can store and version appropriately). The only headache is managing the interfaces and linking between these components. An effective integration test environment is key here.
