[site]: stackoverflow
[post_id]: 5625017
[parent_id]: 
[tags]: 
Digraph arc list implementation

I'm trying to implement graph as the Arc List, and while this implementation works efficiency is horrible, anything i missed that's making it so slow? Time was measured as the average of looking for arcs from/to each node. struct Arc { int start; int end; Arc(int start,int end) : start(start), end(end) { } }; typedef vector ArcList; class AListGraph { public: AListGraph(IMatrix* in); //Fills the data from Incidence Matrix bool IsE(int va,int vb); //checks if arc exists a->b int CountEdges(); //counts all the arcs int CountNext(int v); //counts all outgoing arcs from v int CountPrev(int v); //counts all arcs incoming to v private: ArcList L; int VCount; }; //Cut out constructor for clarity int AListGraph::CountEdges() { return L.size(); } int AListGraph::CountNext(int v) { int result=0; for(ArcList::iterator it =L.begin();it!=L.end();it++) { if(it->end==v)result++; } return result; } int AListGraph::CountPrev(int v) { int result=0; for(ArcList::iterator it =L.begin();it!=L.end();it++) { if(it->start==v)result++; } return result; }
