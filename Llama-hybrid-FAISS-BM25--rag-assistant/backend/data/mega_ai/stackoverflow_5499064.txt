[site]: stackoverflow
[post_id]: 5499064
[parent_id]: 
[tags]: 
Prefix tree problem

I need to manage with nearly 1,300,000 words (some groups of words are similar). I'm doing something like small vocabulary, where each word has its description. The fast search through vocabulary is need. So I decided to use prefix tree. Firstly the preffix tree is needed to build up (it's a slow process, I know that), after this fast surf through vocabulary might be organised. But my problem - that preffix tree is building extremly slow (first 300,000 words builds up fast, but building of tail is very very slow, so slow that I couldn't wait until tree is build!!). Here is my prefix tree class: public class InverseVocabularyTree implements Serializable { private HashMap childs; private String description; public InverseVocabularyTree() { childs=new HashMap (); } public void addWord(String word, String description){ InverseVocabularyTree tr=this; InverseVocabularyTree chld=this; char[] letters=word.toCharArray(); for (int i=word.length()-1; i>=0; i--) { if (!tr.childs.containsKey(letters[i])) { for(int j=i; j>=0; j--) //a small optimisation.. { chld=new InverseVocabularyTree(); tr.childs.put(letters[j], chld); tr=chld; } break; } else tr=tr.childs.get(letters[i]); } tr.description=description; return; } public HashMap getChilds() { return childs; } public String[] getRemovableBasicParts() { return removableBasicParts; } public LinkedList getAllRemovableBasicParts() { LinkedList ret=new LinkedList (); if (removableBasicParts!=null) ret.add(removableBasicParts); if (childs.keySet().isEmpty()) return ret; for(char c : childs.keySet()) ret.addAll(childs.get(c).getAllRemovableBasicParts()); return ret; } } So, has anybody some ideas or advices how to optimize in this situation?
