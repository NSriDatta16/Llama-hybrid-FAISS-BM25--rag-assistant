[site]: stackoverflow
[post_id]: 1882974
[parent_id]: 
[tags]: 
Why can I assign structs but not compare them

Even though I am a long time C programmer, I only recently learned that one can directly assign structure variables to one another instead of using memcpy: struct MyStruct a,b; ... a = b; /* implicit memcpy */ Though this feels a bit "high-level" for C, it is definitely useful. But why can't I do equality and inequality comparison: if (a == b) ... if (a != b) ... Is there any good reason for the standard to exclude this? Or is this an inconsistency in the - otherwise very elegant - standard? I don't see why I can replace my memcpy's for clean assignments, but I have to keep those ugly memcmp's in place.
