[site]: stackoverflow
[post_id]: 5696214
[parent_id]: 
[tags]: 
Threaded plotting in Visual Studio C++ with Windows Forms

I'm writing an application using Visual Studio C++ 2010 to perform Data Acquisition and plot this information in real-time. I'm using Windows Forms to create the GUI. I am taking data from both the serial port and a DAQ card (which I have libraries for and have used) and want to plot them real-time. I've done this before in Python, but I must use another library which is done in C++ so I can't use Python this time around. My idea was to have the serial port and daq card in separate threads acquiring data and then sending updated information to the main program to update the plot with the new data. I have finally gotten threading to work correctly, but what I can't seem to figure out is how to update the plot from inside the thread, as what I have causes a crash. Here is what I have so far: #pragma once #include namespace PlotUpdate { using namespace System; using namespace System::ComponentModel; using namespace System::Collections; using namespace System::Windows::Forms; using namespace System::Data; using namespace System::Drawing; using namespace System::Threading; /// /// Summary for Form1 /// public ref class Form1 : public System::Windows::Forms::Form { public: Form1(void) { InitializeComponent(); // //TODO: Add the constructor code here // th1 = gcnew Thread(gcnew ThreadStart(this, &Form1::th1Method)); } delegate void UpdatePlot(); UpdatePlot^ myDelegate; protected: /// /// Clean up any resources being used. /// ~Form1() { if (components) { delete components; } } private: System::Windows::Forms::Button^ button1; protected: private: /// /// Required designer variable. /// System::ComponentModel::Container ^components; private: System::Windows::Forms::DataVisualization::Charting::Chart^ chart1; Thread ^th1; #pragma region Windows Form Designer generated code /// /// Required method for Designer support - do not modify /// the contents of this method with the code editor. /// void InitializeComponent(void) { System::Windows::Forms::DataVisualization::Charting::ChartArea^ chartArea1 = (gcnew System::Windows::Forms::DataVisualization::Charting::ChartArea()); System::Windows::Forms::DataVisualization::Charting::Series^ series1 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series()); this->button1 = (gcnew System::Windows::Forms::Button()); this->chart1 = (gcnew System::Windows::Forms::DataVisualization::Charting::Chart()); (cli::safe_cast (this->chart1))->BeginInit(); this->SuspendLayout(); // // button1 // this->button1->Location = System::Drawing::Point(291, 369); this->button1->Name = L"button1"; this->button1->Size = System::Drawing::Size(75, 23); this->button1->TabIndex = 0; this->button1->Text = L"button1"; this->button1->UseVisualStyleBackColor = true; this->button1->Click += gcnew System::EventHandler(this, &Form1::button1_Click); // // chart1 // chartArea1->Name = L"ChartArea1"; this->chart1->ChartAreas->Add(chartArea1); this->chart1->Location = System::Drawing::Point(32, 30); this->chart1->Name = L"chart1"; series1->ChartArea = L"ChartArea1"; series1->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Line; series1->Name = L"Series1"; series1->XValueMember = L"xvals"; series1->YValueMembers = L"yvals"; this->chart1->Series->Add(series1); this->chart1->Size = System::Drawing::Size(669, 314); this->chart1->TabIndex = 1; this->chart1->Text = L"chart1"; // // Form1 // this->AutoScaleDimensions = System::Drawing::SizeF(6, 13); this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font; this->ClientSize = System::Drawing::Size(778, 415); this->Controls->Add(this->chart1); this->Controls->Add(this->button1); this->Name = L"Form1"; this->Text = L"Form1"; (cli::safe_cast (this->chart1))->EndInit(); this->ResumeLayout(false); } #pragma endregion static double time = 0.0; private: System::Void th1Method() { for(int i=0;i chart1->Series["Series1"]->Points->AddXY(time, sin(time)); time += 0.1; Thread::Sleep(1); } } private: System::Void button1_Click(System::Object^ sender, System::EventArgs^ e) { th1->Start(); } }; } The code compiles and runs, until I start the thread, and it crashes. I know, I can't update the GUI from another process, so I don't really know how I am supposed to do this. I have tried (And I apologize for not having sample code) to create a temporary Collection of DataPoint Objects and then update the plot using a TimerEvent, but I ran into issues of not being able to use this-> notation inside a static method of the class. Any hints/tips/advice for this situation?
