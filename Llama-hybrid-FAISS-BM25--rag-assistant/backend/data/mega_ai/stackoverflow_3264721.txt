[site]: stackoverflow
[post_id]: 3264721
[parent_id]: 3264544
[tags]: 
In ASP.NET, static instances will live for the lifetime of the application, that being the web application itself, until it is recycled, or shutdown, e.g.: public class Global : HttpApplication { public static string MyString } Because of this, the static property is accessible for all requests made to the application. Not the place to be storing page-specific items. There are quite a few storage mechanisms available: HttpRuntime.Cache and HttpContext.Cache, both point to the same cache instance, and items exist for the lifetime of the application (so has the same issues as static instances). HttpContext.Items, a request specific collection of items. Each request made to the application will have its own collection of items. HttpSessionState session, persisted for the length of the user visit, or whenever it times out. This can be configured 4 ways: 3.a. InProc, session objects are stored in memory by the worker process itself. Fast accessing cache, doesn't require serialisation, but if the application recycles, the session data is lost. 3.b. SqlServer, session objects are serialised and stored in a Sql Server database. Requires all session-stored items to be serialisable. Session objects persist even when an application recycles. 3.c. StateServer, session objects are stored in a seperate process, and persists data through application recycles. 3.d. Custom session provider, that's up to you.... ViewState, this is where data is persisted to the client-side and is posted back to the server to rebuild control states between page views. I would avoid using static instances and the HttpRuntime cache for anything user related. Use these mechanisms for shared, common information, such as configuration, caching, etc. Session is likely the place you want to store things on a per-user basis. If you are looking for a per-page solution, its a lot simpler, because you simply make the variables part of the page structure itself, as properties or fields. You just have to manage the initialisation of these fields. Hope that helps.
