[site]: stackoverflow
[post_id]: 3050550
[parent_id]: 3049793
[tags]: 
Yes, this is possible. The web app istelf (MVC or Webforms) will likely remain the same (with config changes). If you are considering Windows Azure as the "cloud" deployment option then the major things to take into account are: Web app: Session management: you will have to use a web farm friendly approach (e.g. cannot use in-memory server side session state) Bandwidth use: when you deploy to the cloud, latencies are higher than 100% on-premises, you also pay more for more bits you send back and forth. There's an $ incentive for building more frugal apps. Authentication mechanism: if you want to offer SSO you probably need to move to claims based approach (using WIF). This is largely something you can isolate and change (e.g. Windows integrated security on-premises, claims based on the cloud) Use all standard providers (e.g. profile, membership, tracing, etc). There are Win Azure implementations of all, so you can just change them. Data: The simplest approach for maximum portability is to use SQL Azure which is a (big) subset of SQL Server. If you use another storage system (e.g. Windows Azure tables, etc), then you need to abstract all data access in the app (much harder work) Besides some features not available in SQL Azure (like SQLCLR, SQL Broker) there are limits to the database size (max = 50GB currently). So, if your customer's databases grown beyond that, you need to partition the db (which adds more complexity, but it is doable) Management: If you use standard methods for logging and tracing (e.g. Systems.Diagnostics,etc) the app will remain largely the same. Your processes will have to be adapted (and your scripts, etc) Much more details are available here . I don't know what you were trying to considering the message queues for, but that's something you can also abstract (e.g. MSMQ for on-premises, Windows Azure Queue for the cloud). You will have to accomodate for some semantic differences, but it is doable.
