[site]: crossvalidated
[post_id]: 7377
[parent_id]: 7358
[tags]: 
We have spent some time making the wrapping from C++ into R (and back for that matter) a lot easier via our Rcpp package. And because linear algebra is already such a well-understood and coded-for field, Armadillo , a current, modern, plesant, well-documted, small, templated, ... library was a very natural fit for our first extended wrapper: RcppArmadillo . This has caught the attention of other MCMC users as well. I gave a one-day work at the U of Rochester business school last summer, and have help another researcher in the MidWest with similar explorations. Give RcppArmadillo a try -- it works well, is actively maintained (new Armadillo release 1.1.4 today, I will make a new RcppArmadillo later) and supported. And because I just luuv this example so much, here is a quick "fast" version of lm() returning coefficient and std.errors: extern "C" SEXP fastLm(SEXP ys, SEXP Xs) { try { Rcpp::NumericVector yr(ys); // creates Rcpp vector Rcpp::NumericMatrix Xr(Xs); // creates Rcpp matrix int n = Xr.nrow(), k = Xr.ncol(); arma::mat X(Xr.begin(), n, k, false); // avoids extra copy arma::colvec y(yr.begin(), yr.size(), false); arma::colvec coef = arma::solve(X, y); // fit model y ~ X arma::colvec res = y - X*coef; // residuals double s2 = std::inner_product(res.begin(), res.end(), res.begin(), double())/(n - k); // std.errors of coefficients arma::colvec std_err = arma::sqrt(s2 * arma::diagvec( arma::pinv(arma::trans(X)*X) )); return Rcpp::List::create(Rcpp::Named("coefficients") = coef, Rcpp::Named("stderr") = std_err, Rcpp::Named("df") = n - k); } catch( std::exception &ex ) { forward_exception_to_r( ex ); } catch(...) { ::Rf_error( "c++ exception (unknown reason)" ); } return R_NilValue; // -Wall } Lastly, you also get immediate prototyping via inline which may make 'time to code' faster.
