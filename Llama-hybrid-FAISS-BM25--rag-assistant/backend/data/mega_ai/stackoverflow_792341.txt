[site]: stackoverflow
[post_id]: 792341
[parent_id]: 792228
[tags]: 
There are a couple of good posts already on how to get the lines of the file so I thought I would add a bit about efficiency. A couple of people have mentioned the File.ReadAllLines() method. This method is problematic from an efficiency standpoint because it will read the entire file into memory at one time. Additionally it uses an array as storage which requires contiguous memory. If the file is sufficiently large enough this will cause problems. A more efficient way to read the files is to use the StreamReader.ReadLine method repeatedly. It will return the lines one at a time and you only need to keep the lines you care about in memory. It's also relatively easy to turn this into a delay evaluated iterator. public static IEnumerable ReadLinesEnumerable(string path) { using ( var reader = new StreamReader(path) ) { var line = reader.ReadLine(); while ( line != null ) { yield return line; line = reader.ReadLine(); } } } In terms of LINQ. You can use LINQ to match on both the ReadAllLines and the ReadLinesEnumerable method equally since both return an enumerable data type. For instance var query = from line in ReadLinesEnumerable(@"c:\some\path\file.txt") where Regex.IsMatch(line, @"^(\d)+.*$") select line;
