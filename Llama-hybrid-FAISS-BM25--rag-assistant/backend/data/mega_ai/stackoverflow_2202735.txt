[site]: stackoverflow
[post_id]: 2202735
[parent_id]: 
[tags]: 
What are the advantages of instance-level thread-local storage?

This question led me to wonder about thread-local storage in high-level development frameworks like Java and .NET. Java has a ThreadLocal class (and perhaps other constructs), while .NET has data slots , and soon a ThreadLocal class of its own. (It also has the ThreadStaticAttribute , but I'm particularly interested in thread-local storage for member data.) Most other modern development environments provide one or more mechanisms for it, either at the language or framework level. What problems does thread-local storage solve, or what advantages does thread-local storage provide over the standard object-oriented idiom of creating separate object instances to contain thread-local data? In other words, how is this: // Thread local storage approach - start 200 threads using the same object // Each thread creates a copy of any thread-local data ThreadLocalInstance instance = new ThreadLocalInstance(); for(int i=0; i Superior to this? // Normal oo approach, create 200 objects, start a new thread on each for(int i=0; i I can see that using a single object with thread-local storage could be slightly more memory-efficient and require fewer processor resources due to fewer allocations (and constructions). Are there other advantages?
