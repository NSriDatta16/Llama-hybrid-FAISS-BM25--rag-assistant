[site]: stackoverflow
[post_id]: 4393484
[parent_id]: 
[tags]: 
Custom jQuery Request Object - should I move my implementation to my markup?

I am developing a front end request/data management system in order to clean up/organize my API calls/refactor how I interface with my backend platform. I am extending the jquery ajax api call to interface with it and I am looking for some advice on where to stick api-specific implementation. please keep in mind this is a web-application platform and I am trying to make it easier to manage front-end components The goal is to take defining a request from something like... var requestObj = new Object(); requestObj.callback = function(responseObj){deleteUserComplete(responseObj); }; requestObj[0] = new Object(); requestObj[0].module = "usermanager"; requestObj[0].context = "#someTable"; requestObj[0].action = "DELETE_USER"; requestObj[0].dataObj = new Object(); requestObj[0].dataObj.userId = $("#ui-tabs-4 .az-switch-panel-off input[name$=userId]").val(); To... $("button.apiSubmit").apiManager('submitApi'); or var options = {}; options.callback = someFunction; options.context = "#someTable"; //etc... $("button.apiSubmit").apiManager('submitApi', options); I'm sure you get the idea... but i want to move the ugly request object creation to a factory-type object (mainly just processing forms into objects my backend understands) and moving the api-specific implementation (module, action, context etc) to the markup. Now for the question(s)... 1) What are the benefits/pitfalls of moving my api-specific request information to the markup? 2) (again, pretty much convinced moving request info to the markup is the right move) class tags or html5 data attributes (x-browser isn't an issue... they are internal apps)? EX: of class attributes would be... class="apiButton apiButton-module-MODULE_NAME apiButton-action-ACTION_NAME" - obviously a bit ugly... but manageable straightforward way to go about htis. 3) Are there any alternatives to making my api requests more reusable/easier to read? It's the only way I communicate with php so it's very... very important this system is solid.
