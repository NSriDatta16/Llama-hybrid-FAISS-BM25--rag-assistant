[site]: stackoverflow
[post_id]: 2036950
[parent_id]: 2036906
[tags]: 
NUnit is a unit testing framework - rather than using it directly in your application, it allows you to write seperate suites of tests with which to test the components of your framework. Unit testing is a test approach whereby you are testing small individual units of your application, rather than testing the whole thing as one. The reason this helps improve the design of an application is that it encourages you to write your application in small units, each of which is decoupled from the others and so can be tested. This enforces the notion of "seperation of concerns"; making sure that each type is responsible for one task only. Furthermore, lots of people approach development using a "unit test first" philosphy, whereby you write your test for some code before you write the actual code. The idea here is the following sequence: Write your test. This is a failing (RED) test as there is no code to test. Write your code so that the test works (GREEN). Now you have a test to verify your code, you can easily re-write and improve your code, with a high level of confidence that you are not breaking it. (REFACTOR) You will here people refer to this RED-GREEN-REFACTOR approach There is lots of information on how to approach unit testing on the web. Just Goole "unit testing C#". However, have a look at the documentation on NUnit's site (down as I write this for some reason), and look at other SO posts related to unit testing. Also, here is a pretty extensive code project article, although I haven't dug deep into it so I don't know if it is any good. Maybe others with good references can add them as comments to this article.
