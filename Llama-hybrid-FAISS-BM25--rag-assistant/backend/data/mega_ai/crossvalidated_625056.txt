[site]: crossvalidated
[post_id]: 625056
[parent_id]: 624957
[tags]: 
Here is a paper that describes how you can carry out maximum likelihood with random likelihood approximations. If you already have code that can return likelihood approximations at each parameter input, coding up the most basic algorithm from that paper is pretty simple. From the abstract: We study the asymptotic performance of approximate maximum likelihood estimators for state space models obtained via sequential Monte Carlo methods. The state space of the latent Markov chain and the parameter space are assumed to be compact. The approximate estimates are computed by, firstly, running possibly dependent particle filters on a fixed grid in the parameter space, yielding a pointwise approximation of the log-likelihood function. There are some other approaches, but their suitability depends on the specifics of your model. Edit: here's some R code that estimates a stochastic volatility model using the first method. The approx. log likelihood function svol_lev$svol_leverage_bswc_approx_LL() uses my R package pfR . You'll have to change the first line of code to point to your three .cpp files . library(pfr) # compile c++ code svol_lev ```
