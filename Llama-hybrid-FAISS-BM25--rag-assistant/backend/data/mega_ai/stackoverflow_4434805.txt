[site]: stackoverflow
[post_id]: 4434805
[parent_id]: 4428413
[tags]: 
The answer was staring me in the face. ASP.NET Session State Overview : Access to ASP.NET session state is exclusive per session, which means that if two different users make concurrent requests, access to each separate session is granted concurrently. However, if two concurrent requests are made for the same session (by using the same SessionID value), the first request gets exclusive access to the session information. The second request executes only after the first request is finished. Annoyingly I'd skimmed paragraph this a couple of weeks ago not really taking in the full impact of the bold sentences. I had read that simply as "access to session state is serialised" and not "all requests, no matter whether you touch session state or not, are serialised" if the requests came from the same session. Fortunately there is a work around in ASP.NET MVC3 and its possible to create session-less controllers. Scott Guthrie talks about these here: Announcing ASP.NET MVC 3 (Release Candidate 2) I installed MVC3 RC2 and upgraded the project. Decorating the controller in question with [SessionState(SessionStateBehavior.Disabled)] solves the problem. And of course typically I just found this in Stack Overflow a few minutes ago: Asynchronous Controller is blocking requests in ASP.NET MVC through jQuery
