[site]: stackoverflow
[post_id]: 5477272
[parent_id]: 
[tags]: 
Desktop App w/ Database - How to handle data retrieval?

Imagine to have a Desktop application - could be best described as record keeping where the user inserts/views the records - that relies on a DB back-end which will contain large objects' hierarchies and properties. How should data retrieval be handled? Should all the data be loaded at start-up and stored in corresponding Classes/Structures for later manipulation or should the data be retrieved only at need, stored in mock-up Classes/Structures and then reused later instead of being asked to the DB again? As far as I can see the former approach would require a bigger memory portion used and possible waiting time at start-up (not so bad if a splash screen is displayed), while the latter could possibly subject the user to delays during processing due to data retrieval and would require to perform some expensive queries on the database, whose results and/or supporting data structures will most probably serve no purpose once used*. Something tells me that the solution lies on an in-depth analysis which will lead to a mixture of the two approaches listed above based on data most frequently used, but I am very interested in reading your thoughts, tips and real life experiences on the topic. For discussion's sake, I'm thinking about C++ and SQLite. Thanks! * assuming that you can perform on Classes/Objects faster operations rather than have to perform complicated queries on the DB. EDIT Some additional details: No concurrent access to the data, meaning only 1 user works on the data which is stored locally. Data is sent back depending on changes made humanly - i.e. with low frequency. This is not necessarily true for reading data from the DB, where I can expect to have few peaks of lots of reads which I'd like to be fast. What I am most afraid of is the user getting the feeling of slowness when displaying a complex record (because this has to be read in from the DB).
