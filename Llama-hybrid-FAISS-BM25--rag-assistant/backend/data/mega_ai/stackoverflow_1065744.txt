[site]: stackoverflow
[post_id]: 1065744
[parent_id]: 
[tags]: 
Drawing circles on a sphere

I'm trying to draw lots of circles on a sphere using shaders. The basic alogrith is like this: calculate the distance from the fragment (using it's texture coordinates) to the location of the circle's center (the circle's center is also specified in texture coordinates) calculate the angle from the fragent to the center of the circle. based on the angle, access a texture (which has 360 pixels in it and the red channel specifies a radius distance) and retrieve the radius for the given angle if the distance from the fragment to the circle's center is less than the retrieved radius then the fragment's color is red, otherwise blue. I would like to draw ... say 60 red circles on a blue sphere. I got y shader to work for one circle, but how to do 60? Here's what I've tried so far.... I passed in a data texture that specifies the radius for a given angle, but I notice artifacts creep in. I believe this is due to linear interpolation when I try to retrieve information from the data texture using: float returnV = texture2D(angles, vec2(x, y)).r; where angles is the data texture (Sampler2D) that contains the radius for a given angle, and x = angle / 360.0 (angle is 0 to 360) and y = 0 to 60 (y is the circle number) I tried passing in a Uniform float radii[360], but I cannot access radii with dynamic indexing. I even tried this mess ... getArrayValue(int index) { if (index == 0) { return radii[0]; } else if (index == 1) { return radii[1]; } and so on ... If I create a texture and place all of the circles on that texture and then multi-texture the blue sphere with the one containing the circles it works, but as you would expect, I have really bad aliasing. I like the idea of proceduraly generating the circles based on the position of the fragment and that of the circle because of virtually no aliasing. However, I do I do ore than one? Thx!!! ~Bolt
