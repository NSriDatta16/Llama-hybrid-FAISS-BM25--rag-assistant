[site]: stackoverflow
[post_id]: 3683177
[parent_id]: 
[tags]: 
How to avoid this stackoverflow exception?

Here is the situation, I am developing a binary search tree and in each node of the tree I intend to store the height of its own for further balancing the tree during avl tree formation. Previously I had an iterative approach to calculate the height of a node during balancing the tree like the following. (The following code belongs to a class called AVLTree which is a child class of BinarySearchTree ) protected virtual int GetBalance(BinaryTreeNode node) { if(node != null) { IEnumerable > leftSubtree = null, righSubtree = null; if (node.Left != null) leftSubtree = node.Left.ToEnumerable(BinaryTreeTraversalType.InOrder); if (node.Right != null) righSubtree = node.Right.ToEnumerable(BinaryTreeTraversalType.InOrder); var leftHeight = leftSubtree.IsNullOrEmpty() ? 0 : leftSubtree.Max(x => x.Depth) - node.Depth; var righHeight = righSubtree.IsNullOrEmpty() ? 0 : righSubtree.Max(x => x.Depth) - node.Depth; return righHeight - leftHeight; } return 0; } But it was incurring a lot of performance overhead. Performance of an AVL Tree in C# So I went for storing the height value in each node at the time of insertion in the BinarySearchTree . Now during balancing I am able to avoid this iteration and I am gaining the desired performance in AVLTree . But now the problem is if I try to insert a large number of data say 1-50000 sequentially in BinarySearchTree (without balancing it), I am getting StackoverflowException. I am providing the code which is causing it. Can you please help me to find a solution which will avoid this exception and also not compromise with the performance in its child class AVLTree ? public class BinaryTreeNode { private BinaryTreeNode _left, _right; private int _height; public T Value {get; set; } public BinaryTreeNode Parent; public int Depth {get; set; } public BinaryTreeNode() {} public BinaryTreeNode(T data) { Value = data; } public BinaryTreeNode Left { get { return _left; } set { _left = value; if (_left != null) { _left.Depth = Depth + 1; _left.Parent = this; } UpdateHeight(); } } public BinaryTreeNode Right { get { return _right; } set { _right = value; if (_right != null) { _right.Depth = Depth + 1; _right.Parent = this; } UpdateHeight(); } } public int Height { get { return _height; } protected internal set { _height = value; if (Parent != null) { Parent.UpdateHeight(); } } } private void UpdateHeight() { if (Left == null && Right == null) { return; } if(Left != null && Right != null) { if (Left.Height > Right.Height) Height = Left.Height + 1; else Height = Right.Height + 1; } else if(Left == null) Height = Right.Height + 1; else Height = Left.Height + 1; } } public class BinarySearchTree { private readonly Comparer _comparer = Comparer .Default; public BinarySearchTree() { } public BinaryTreeNode Root {get; set;} public virtual void Add(T value) { var n = new BinaryTreeNode (value); int result; BinaryTreeNode current = Root, parent = null; while (current != null) { result = _comparer.Compare(current.Value, value); if (result == 0) { parent = current; current = current.Left; } if (result > 0) { parent = current; current = current.Left; } else if (result 0) parent.Left = n; else parent.Right = n; } } } I am getting the StackoverflowException in calculating the height at the following line if (Parent != null) { Parent.UpdateHeight(); } in the Height property of BinaryTreeNode class. If possible please suggest me some work around. BTW, thanks a lot for your attention to read such a long question :)
