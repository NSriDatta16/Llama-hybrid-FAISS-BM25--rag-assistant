[site]: stackoverflow
[post_id]: 3276164
[parent_id]: 3263688
[tags]: 
DrawText is a macro that goes to either DrawTextW or DrawTextA depending on the UNICODE preprocessor setting. So maybe notepad is calling one, and you are hooking the other? I think DrawTextA forwards to DrawTextW, so try hooking that directly. edit, sample code below, compile with commands at top. run main.exe. run sysinternals debug view to see the output. The code compiles to a dll called t4.dll and an executable called main.exe, when you run main.exe, the dll is loaded into every running process by the SetWindowHookEx call, and then the CBTProc function is called on every thread at the appropriate time. /* t4.cpp cl.exe /Zi /EHa /c /DUNICODE /D_UNICODE /I "c:/program files/Microsoft Research/Detours Express 2.1/include/" t4.cpp link /DLL /DEBUG /LIBPATH:"c:/Program Files/Microsoft Visual Studio 10.0/VC/lib" /LIBPATH:"C:\Program Files\Microsoft SDKs\Windows\v7.0A\Lib" /LIBPATH:"c:/program files/Microsoft Research/Detours Express 2.1/lib" t4.obj user32.lib gdi32.lib link /OUT:main.exe /DEBUG /LIBPATH:"c:/Program Files/Microsoft Visual Studio 10.0/VC/lib" /LIBPATH:"C:\Program Files\Microsoft SDKs\Windows\v7.0A\Lib" /LIBPATH:"c:/program files/Microsoft Research/Detours Express 2.1/lib" t4.obj user32.lib gdi32.lib */ #include #define NOMINMAX #include #include #include #include "detours.h" #pragma comment(lib, "detours") #pragma comment(lib, "detoured") int (WINAPI *Real_DrawText)(HDC hDC, LPCTSTR lpchText, int, LPRECT, UINT) = DrawText; BOOL (WINAPI *Real_TextOut)( __in HDC hdc, __in int nXStart, __in int nYStart, __in LPCTSTR lpString, __in int cbString ) = TextOut; int (WINAPI *Real_DrawTextEx)( __in HDC hdc, __inout LPTSTR lpchText, __in int cchText, __inout LPRECT lprc, __in UINT dwDTFormat, __in LPDRAWTEXTPARAMS lpDTParams ) = DrawTextEx; BOOL (WINAPI *Real_ExtTextOut)( __in HDC hdc, __in int X, __in int Y, __in UINT fuOptions, __in const RECT *lprc, __in LPCTSTR lpString, __in UINT cbCount, __in const INT *lpDx ) = ExtTextOut; int WINAPI Mine_DrawText( __in HDC hDC, __inout LPCTSTR lpchText, __in int nCount, __inout LPRECT lpRect, __in UINT uFormat ) { OutputDebugString(TEXT("DrawText")); OutputDebugString(lpchText); return Real_DrawText(hDC, lpchText, nCount, lpRect, uFormat); } BOOL WINAPI Mine_TextOut( __in HDC hdc, __in int nXStart, __in int nYStart, __in LPCTSTR lpString, __in int cbString ) { OutputDebugString(TEXT("TextOut")); OutputDebugString(lpString); return Real_TextOut(hdc, nXStart, nYStart, lpString, cbString); } int WINAPI Mine_DrawTextEx( __in HDC hdc, __inout LPTSTR lpchText, __in int cchText, __inout LPRECT lprc, __in UINT dwDTFormat, __in LPDRAWTEXTPARAMS lpDTParams ) { OutputDebugString(TEXT("DrawTextEx")); OutputDebugString(lpchText); return Real_DrawTextEx(hdc, lpchText, cchText, lprc, dwDTFormat, lpDTParams); } BOOL WINAPI Mine_ExtTextOut( __in HDC hdc, __in int X, __in int Y, __in UINT fuOptions, __in const RECT *lprc, __in LPCTSTR lpString, __in UINT cbCount, __in const INT *lpDx ) { OutputDebugString(TEXT("ExtTextOut")); OutputDebugString(lpString); return Real_ExtTextOut( hdc, X, Y, fuOptions, lprc, lpString, cbCount, lpDx ); } #define DLLEXPORT extern "C" __declspec(dllexport) static DWORD dwTlsIndex; // address of shared memory // Stores a DWORD in thread local storage BOOL WINAPI StoreData(DWORD dw) { LPVOID lpvData; DWORD * pData; // The stored memory pointer lpvData = TlsGetValue(dwTlsIndex); if (lpvData == NULL) { lpvData = (LPVOID) LocalAlloc(LPTR, 256); if (lpvData == NULL) return FALSE; if (!TlsSetValue(dwTlsIndex, lpvData)) return FALSE; } pData = (DWORD *) lpvData; // Cast to my data type. // In this example, it is only a pointer to a DWORD // but it can be a structure pointer to contain more complicated data. (*pData) = dw; return TRUE; } // Retrieve a DWORD from thread local storage BOOL WINAPI GetData(DWORD *pdw) { LPVOID lpvData; DWORD * pData; // The stored memory pointer lpvData = TlsGetValue(dwTlsIndex); if (lpvData == NULL) return FALSE; pData = (DWORD *) lpvData; (*pdw) = (*pData); return TRUE; } DLLEXPORT LRESULT CALLBACK CBTProc(int nCode, WPARAM wParam, LPARAM lParam) { if (nCode > i; UnhookWindowsHookEx(hhookSysMsg); }
