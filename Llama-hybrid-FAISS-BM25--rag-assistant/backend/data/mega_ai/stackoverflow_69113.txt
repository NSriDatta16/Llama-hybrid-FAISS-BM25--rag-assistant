[site]: stackoverflow
[post_id]: 69113
[parent_id]: 65524
[tags]: 
If you're building a hash table in which to store your vertices, I can think of a couple of ways to avoid collisions: Generate IDs directly from the input data without throwing any bits away, and use a hash table that is large enough to hold all possible IDs. With 64-bit IDs, the latter will be extremely problematic: you will have to use a table that is smaller than your range of IDs, therefore you will have to deal with collisions. Even with 32-bit IDs, you would need well over 4GB of RAM to pull this off without collisions. Generate IDs sequentially as you read in the vertices. Unfortunately, this makes it very expensive to search for previously read vertices in order to update their probabilities, since a sequential ID generator is not a hash function. If the amount of data used to construct the Markov chain is significantly smaller than the amount of data that the Markov chain is used to generate (or if they are both small), this may not be an issue. Alternatively, you could use a hash table implementation that handles collisions for you (such as unordered_map / hash_map ), and concentrate on the rest of your application.
