[site]: stackoverflow
[post_id]: 2783438
[parent_id]: 2783420
[tags]: 
Try this: public class Microwave { public event EventHandler DoorClosed; public event EventHandler LightbulbOn; } This code leverages C#'s field-like event syntax : When compiling a field-like event, the compiler automatically creates storage to hold the delegate, and creates accessors for the event that add or remove event handlers to the delegate field. In C# 1, 2, and 3 this code will compile down to just what you have above. In C# 4 you will get functionally equivalent code that doesn't use explicit locks . Either way you can use this shortcut without changing the consumers of this type. Update: Unfortunately, the C# compiler does not allow you to use field-like events for explicit interface implementation. If you try you will get this compilation error: An explicit interface implementation of an event must use event accessor syntax Update: It's too bad that an explicit interface implementation requires the use of event accessor syntax. It would be kind of cool if C# added the ability to create automatically implemented field-like events like this: event EventHandler IAppliance.DoorClosed { add; remove; } But this syntax is already wordier than the existing field-like event syntax and would only be applicable in cases where an interface member was being explicitly implemented. The best thing I think would be if the compiler would simply allow us to do this: event EventHandler IAppliance.DoorClosed;
