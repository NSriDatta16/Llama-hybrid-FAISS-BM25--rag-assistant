[site]: stackoverflow
[post_id]: 5453512
[parent_id]: 
[tags]: 
Read a series of images row by row or entire image for performance?

I'm writing an application that takes a series of exposures of a target and computes their average and saves the resultant image. This technique is used extensively in astrophotography to reduce noise in the final image. Basically, one computes the average at pixel and writes out the value in the output file. The number of exposures can be quite high, from 20 to 30 (sometimes even more), and with today's large CCD sensors the resolution, too, can be quite high. So the amount of data can be very very large. My question is, when it comes to performance, should I read the images row by row (Method #1) or should I read the entire image array of all arrays (Method #2)? Using the former method, I will have to load every corresponding row. So, if I have 10 images and I'm reading row #1 - I will have to read the first row from each image, compute their average and write out the row. With the latter method, I read all images in their entirety, compute and write out the entire image. In theory, the latter method ought to be much faster but much more memory intensive. In practice however, I've found that the difference in performance isn't great and this was puzzeling. At most, Method #2 was only 2 to 3 seconds faster than Method #1. However, Method #2 was using upto 1.3 GB of memory for 24 8megapixel images. Method #1, on the other hand, was at most using 70MB. On average, both methods are taking about 20 seconds to process 24 8megapixel images. I am writing this in Objective-C with a good amount of C thrown in when calling CFITSIO. Here's Method #1: pixelRows = (double**)malloc(self.numberOfImages * sizeof(double*)); //alloc. pixel array. for(i=0;i Here's Method #2: imageArray = (double**)malloc(files.count * sizeof(double*)); for(i=0;i Any suggestions regarding this? Am I expecting too much of a gain by reading in every image in its entirety?
