[site]: stackoverflow
[post_id]: 4587124
[parent_id]: 4587049
[tags]: 
Subtract the target position from the camera position, then scale it, then add the target position in again. camera_position -= target_position; camera_position /= zoom_factor; camera_position += target_position; Regarding your second problem. My guess is that it's due to lack of precision in floats. When you get down to a certain point, multiplying by 1.02 is not enough to change the float's value to the next higher representable value, so it doesn't change at all. My tests indicate that this doesn't happen until the float is in the 10e-44 range, so you must be using some pretty gigantic units for this to be a problem. A few possible solutions. Use doubles instead of floats. You will still have the same problem. But it won't come into play until a much much closer zoom. Use smaller units. I usually just go with 1.0 = 1 meter and I've never run in to this problem. Enforce a maximum zoom. You would actually do this in combination with the other 2 above.
