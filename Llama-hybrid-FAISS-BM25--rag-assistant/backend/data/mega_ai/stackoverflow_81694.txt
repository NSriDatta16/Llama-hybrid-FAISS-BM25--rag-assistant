[site]: stackoverflow
[post_id]: 81694
[parent_id]: 77172
[tags]: 
I agree with (and upvote) Robert Paulson's practice. That is assuming you are in control of a development team with the responsibility and discipline to adhere to such a practice. To "force" that onto my teams, our solutions maintain at least one database project from Visual Studio Team Edition for Database Professionals . As with other projects in the solution, the database project gets versioned control. It makes it a natural development process to break the everything in the database into maintainable chunks, "disciplining" my team along the way. Of course, being a Visual Studio project, it is no where near perfect. There are many quirks you will run into that may frustrate or confuse you. It takes a fair bit of understanding how the project works before getting it to accomplish your tasks. Examples include deploying data from CSV files . selective deployment of test data based on build type . Visual Studio crashing on comparing with databases with certain type of CLR assembly embedded within . no means of differntiation between test/production databases that implement different authentication schemes - SQL users vs Active Directory users. But for teams who don't have a practice of versioning their database objects, this is a good start. The other famous alternative is of course, Red Gate's suite of SQL Server products , which most people who use them consider superior to Microsoft's offering.
