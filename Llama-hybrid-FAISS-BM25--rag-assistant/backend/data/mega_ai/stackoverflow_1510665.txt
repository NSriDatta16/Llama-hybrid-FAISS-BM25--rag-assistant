[site]: stackoverflow
[post_id]: 1510665
[parent_id]: 1510576
[tags]: 
The first thing to consider is that you will probably want to include a specific, known, tested, non-beta version of jQuery into your deployment instead of linking to some website. This will ensure that if they have access to your webapp, they can get to the javascript. Unfortunately by taking on this task, you are now subscribing to the maintenance and upkeep of that library. For example, if there is some security flaw that get's released, you may need to redeploy an update to your app just to include the latest copy of jQuery or some plug-in. The maintenance of this is probably minimal, but it should definitely be on somebody's spreadsheet somewhere because it will eventually happen. This is not a problem unique to jQuery, but really any "external library" generally speaking. If by backward compatibility you mean "with browsers" you don't really have to worry too much about it since most of that is done for you by the library itself. If by backward compatibility you mean with existing javascript deployed to production that is a case-by-case basis. As far as integration goes, we have found jQuery to be a terrific compliment to ASP.net development. It's a very natural fit because it allows you to apply an extra layer of functionality very easily while still leveraging a lot of the existing UI controls and not having to reinvent the wheel with new ones just to conform to some "jQuery protocol". Size? jQuery is probably the MOST lightweight and effective framework that packs a whopping punch in my opinion. Kudos to the devs, because when it comes to "bang for the buck" that is really where jQuery shines. See also this article on asp.net+jquery .
