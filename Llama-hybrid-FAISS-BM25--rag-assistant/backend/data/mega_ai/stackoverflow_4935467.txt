[site]: stackoverflow
[post_id]: 4935467
[parent_id]: 4928713
[tags]: 
I find it difficult to understand what you're trying to do exactly, but I have experience with javaEventing, and I will try to help you as best I can. Will Hartung is correct, you need to create your events somewhere. So if I understand you correctly, you wish to start your java-app from the command line, then you want to connect to a database and watch for some command to be inserted, and when inserted, you want to create an event. Is this correct? In that case, you will probably need to do some polling against the database, because ordinary databases have no way of notifying your application when some condition is true. This means you would probably need while{} clause, in which you perform queries against the database, waiting for a result set containing the command you are looking for. When found, you could create an event like this: Class ReceivedCommandEvent extends EventManager.EventObject {} // define your event while (command==null) { command = pollDataBaseForCommand(); //poll your databae for commands waitForSomePeriod(); } EventManager.triggerEvent(this, new ReceivedCommandEvent(command)); //trigger your event, with the command as payload Now, any other threads listening for your event (the ReceivedCommandEvent) will receive the event, and can retrieve the command from the event payload. Now, the question is, why do you want to use the database to communicate commands anyways? Do you simply use it to communicate between applications? If your other application is also written in Java, you could consider using distributed events, allowing one java app to send events to java apps running in other JVMs on other machines in the network. You might want to look at JED ( http://code.google.com/p/jed-java-event-distribution ), which does exactly that. I hope this helps, Bob
