[site]: stackoverflow
[post_id]: 345275
[parent_id]: 343468
[tags]: 
I can give you an ok solution and you can go with it, but before I do I'm going to try to explain why Document is not a DependencyProperty to begin with. During the lifetime of a RichTextBox control, the Document property generally doesn't change. The RichTextBox is initialized with a FlowDocument . That document is displayed, can be edited and mangled in many ways, but the underlying value of the Document property remains that one instance of the FlowDocument . Therefore, there is really no reason it should be a DependencyProperty , ie, Bindable. If you have multiple locations that reference this FlowDocument , you only need the reference once. Since it is the same instance everywhere, the changes will be accessible to everyone. I don't think FlowDocument supports document change notifications, though I am not sure. That being said, here's a solution. Before you start, since RichTextBox doesn't implement INotifyPropertyChanged and Document is not a DependencyProperty , we have no notifications when the RichTextBox 's Document property changes, so the binding can only be OneWay. Create a class that will provide the FlowDocument . Binding requires the existence of a DependencyProperty , so this class inherits from DependencyObject . class HasDocument : DependencyObject { public static readonly DependencyProperty DocumentProperty = DependencyProperty.Register("Document", typeof(FlowDocument), typeof(HasDocument), new PropertyMetadata(new PropertyChangedCallback(DocumentChanged))); private static void DocumentChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e) { Debug.WriteLine("Document has changed"); } public FlowDocument Document { get { return GetValue(DocumentProperty) as FlowDocument; } set { SetValue(DocumentProperty, value); } } } Create a Window with a rich text box in XAML. Give the Window a field of type HasDocument . HasDocument hasDocument; Window constructor should create the binding. hasDocument = new HasDocument(); InitializeComponent(); Binding b = new Binding("Document"); b.Source = richTextBox; b.Mode = BindingMode.OneWay; BindingOperations.SetBinding(hasDocument, HasDocument.DocumentProperty, b); If you want to be able to declare the binding in XAML, you would have to make your HasDocument class derive from FrameworkElement so that it can be inserted into the logical tree. Now, if you were to change the Document property on HasDocument , the rich text box's Document will also change. FlowDocument d = new FlowDocument(); Paragraph g = new Paragraph(); Run a = new Run(); a.Text = "I showed this using a binding"; g.Inlines.Add(a); d.Blocks.Add(g); hasDocument.Document = d;
