[site]: stackoverflow
[post_id]: 3639176
[parent_id]: 3639085
[tags]: 
Yes. When you set up the Primary Key (or any index) you can define this ALTER TABLE dbo.[Messages] ADD CONSTRAINT [PK_Messages] PRIMARY KEY CLUSTERED ( msg_for ASC, msg_from ASC, msg_id DESC ) SQL Server can scan in either direction so it only makes sense if you want to control the sort order combination for multiple columns. Edit: You say in the comments that the problem query is select top 10 msg_id from message_user where msg_for = @user_name and msg_from <> @user_name order by msg_id DESC The issue here isn't one of Ascending, Descending. To give an analogy. Phone books are listed in surname, forename order but if you needed to know the lexicographically last 10 forenames in the directory you would need to scan the whole book. This would be unavoidable regardless of whether or not within each section forenames were listed in ascending or descending order. Similarly the composite index keys would need to be msg_for, msg_id, msg_from to satisfy this query optimally not msg_for, msg_from, msg_id With this latter order it will still need to scan the whole section of the index satisfying the msg_for = @user_name criteria as it cannot know if there will be a later msg_id still to come belonging to a later msg_from Additionally regardless in which direction msg_id is sorted in their individual sub sections a sequential scan of the msg_for = @user_name part of the index will still require a sort as it they are fragmented by being in subsections according to msg_from .
