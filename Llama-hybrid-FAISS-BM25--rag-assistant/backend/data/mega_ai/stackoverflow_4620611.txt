[site]: stackoverflow
[post_id]: 4620611
[parent_id]: 419342
[tags]: 
It sounds like you're mixing things up here. A class (such as a Staff class) is used to represent a single entity. Eg: $john = new Staff('John'); How exactly does the paging fit into this? Being page-able (paginatable?) sounds like a property of whatever it is that allows access to these Staff entities, not of the entity itself. That way, the way is clear for each type of Staff class you create to inherit from the base class. So, what I believe would be the solution you need: A Staff class (Staff_Base, and its graph of children) A Staff Data Access Object (DAO\Staff would be a nice name, if you're using namespaces) An Interface, to signal to the world that a DAO can be paged Import to note is that there is no direct inheritance between the DAO class and the Staff class. You can still generate the Staff_Base class based on its properties in the database, and extend from there... as long as you don't include the actual data access in that class. The code using this would then look something like this: getPagedResult($start, $amount); ?> Edited to emphasize that the inheritance structure should be separate from the actual retrieval
