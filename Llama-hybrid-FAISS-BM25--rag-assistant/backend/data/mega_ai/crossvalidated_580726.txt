[site]: crossvalidated
[post_id]: 580726
[parent_id]: 580490
[tags]: 
It all started with a comment to always scale the input variables before doing principal components analysis.... The question asks why the PCA biplots generated with stats::biplot.prcomp (in base R) and factoextra::fviz_pca_biplot (built on ggplot2) "look different". It turns out that the plots differ in two ways: biplot.prcomp plots the principal components while fviz_pca_biplot plots the principal components scaled to have unit variance. biplot.prcomp and fviz_pca_biplot use different x:y aspect ratio to overlay principal components (points) and loadings (arrows) in an aesthetically pleasing way. Okay, let's do principle component analysis. Don't forget to scale the data beforehand or to set scale = TRUE in the prcomp call. None of what follows holds if the data $\mathbf{X}$ is not standardized. X Recall that principal component analysis decomposes the matrix $\mathbf{X}$ into three components: $$ \mathbf{X} = \mathbf{U}\mathbf{S}\mathbf{V}^\top $$ where $\mathbf{V}$ are the principal axes (the eigenvectors), $\mathbf{S}$ are the standard deviations of the principal axes (the square roots of the eigenvalues) and $\mathbf{U}\mathbf{S}$ are the principal components (aka scores). The standardized principal components $\mathbf{U}$ have unit variance. The loadings are defined as $\mathbf{V}\mathbf{S}/\sqrt{n-1}$ . # the standard deviations of the principal components (the square roots of the eigenvalues) S $sdev * sqrt(n - 1) # same as sqrt(eigen(t(X) %*% X, symmetric = TRUE)$ values) # the principal axes (the eigenvectors) V $rotation # same as eigen(t(X) %*% X, symmetric = TRUE)$ vectors # the principal components (the observations projected on the principal axes) US @amoeba explains all this in great detail in Positioning the arrows on a PCA biplot biplot.prcomp plots the "raw" principal components. # Compute the x:y ratio to overlay PCs and loadings into one plot # See source code for how biplot.prcomp computes the ratio # https://github.com/SurajGupta/r-source/blob/master/src/library/stats/R/biplot.R xy_ratio fviz_pca_biplot plots the standardized principal components. # Compute the x:y ratio to overlay standardized PCs and loadings into one plot # See source code for how factominer computes the ratio # https://rdrr.io/cran/factoextra/src/R/fviz_pca.R xy_ratio Complete R code listing to reproduce all figures. I use ggplot2. library("factoextra") library("tidyverse") plot_pcs $layers[[1]] xy_limits data[, unlist(p$labels)]) p + scale_x_continuous( limits = xy_limits ) + scale_y_continuous( limits = xy_limits ) + coord_fixed() } biplot_by_hand % add_points(x) %>% add_arrows(y / xy_ratio) %>% fix_aspect_ratio() } multiply $sdev * sqrt(n - 1) # same as sqrt(eigen(t(X) %*% X, symmetric = TRUE)$ values) # the principal axes (the eigenvectors) V $rotation # same as eigen(t(X) %*% X, symmetric = TRUE)$ vectors # the principal components (the observations projected on the principal axes) US
