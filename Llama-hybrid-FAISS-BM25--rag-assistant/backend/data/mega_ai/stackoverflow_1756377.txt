[site]: stackoverflow
[post_id]: 1756377
[parent_id]: 1756276
[tags]: 
big_static_data is created once at the beginning of the file (at least in the code that you show). This consumes memory. When you create an instance of StaticDataEarlyLoad, StaticDataEarlyLoad().static_data is a reference to big_static_data. It consumes a very minor amount of memory. It merely points at the same dictionary that big_static_data points to. No copy of big_static_data is made, there is no real "loading" going on. When instance StaticDataEarlyLoad() gets garbage-collected, a little memory is freed, but the big_static_data remains. StaticDataLazyLoad does much the same thing, but doesn't create an attribute static_data . It just references big_static_data directly. The difference in memory consumption between StaticDataEarlyLoad and StaticDataLazyLoad is very minor. And there will be essentially no difference in speed. it is always best to make explicit what a class depends upon. StaticDataEarlyLoad depends on big_static_data. Therefore, you should define class StaticDataEarlyLoad: def __init__(self,static_data): self.static_data = static_data And initialize instances with StaticDataEarlyLoad(big_static_data) . There is essentially no difference in speed between this definition and the one you posted. Putting dependencies into the call signature of __init__ is just a good idea for the sake of organization, and after all you are using Python's OOP for good control of organization, right?
