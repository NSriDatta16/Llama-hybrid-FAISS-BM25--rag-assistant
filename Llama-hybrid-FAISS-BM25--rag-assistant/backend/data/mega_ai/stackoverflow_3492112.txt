[site]: stackoverflow
[post_id]: 3492112
[parent_id]: 3491877
[tags]: 
You've asked how to do so elegantly, and further, how to do so better. Your nota bene suggests that the structure you're working with is still malleable. If you want to be able to do so more elegantly, I would suggest changing the way the data is stored. Some options are: Include an additional field in each list, which indicates whether it is an aggregate value or not: items = [ ['Schools', '', '', '32', True], ['Schools', 'Primary schools', '', '16', False], ['Schools', 'Secondary schools', '', '8', True], ['Schools', 'Secondary schools', 'Special ed', '4', False], ['Schools', 'Secondary schools', 'Non-special ed', '4', False], ] Split your data into two lists: items = [ [ ['Schools', '', '', '32'], ['Schools', 'Secondary schools', '', '8'], ], [ ['Schools', 'Primary schools', '', '16'], ['Schools', 'Secondary schools', 'Special ed', '4'], ['Schools', 'Secondary schools', 'Non-special ed', '4'], ], ] Make the aggregate values contain a list of their children (although this still wouldn't be much fun to reduce): items = [ ['Schools', '', '', '32', [ ['Schools', 'Primary schools', '', '16', []], ['Schools', 'Secondary schools', '', '8', [ ['Schools', 'Secondary schools', 'Special ed', '4'], ['Schools', 'Secondary schools', 'Non-special ed', '4'], ], ], ] I would say that the current structure of your data does not allow you to do anything elegant with it. You require logic along the lines of "if this index is blank but it isn't for another entry that has the same value at another of my indexes", and this has to be done twice per list entry, because that logic can occur at two separate pairs of index locations. Fix the way you store your information, and you will be able to write an elegant method of reducing that data. For example, if you went with the first option I listed (using booleans to indicate whether the entry is aggregate), you could reduce the list with: reduced = [item for item in items where item[4] == False]
