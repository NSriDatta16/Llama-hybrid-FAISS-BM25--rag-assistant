[site]: stackoverflow
[post_id]: 5319033
[parent_id]: 
[tags]: 
Python threading question

I have some python application with 2 threads. Each thread operates within a separate gui. The GUIs need to operate independently without blocking. I am trying to figure out how to make thread_1 trigger an event to happen in thread_2? Below is some code I want function foo to trigger function bar in the simplest, most elegant way as quickly as possible, without consuming unnecessary resources. Below is what I've come up with. bar_trigger=False #global trigger for function bar. lock = threading.Lock() class Thread_2(threading.Thread): def run(self): global lock, bar_trigger while(True): lock.acquire() if bar_trigger==True: Thread_2.bar() #function I want to happen bar_trigger=False lock.release() time.sleep(100) #sleep to preserve resources #would like to preserve as much resources as possible # and sleep as little as possible. def bar(self): print "Bar!" class Thread_1(threading.Thread): def foo(self): global lock, bar_trigger lock.acquire() bar_trigger=True #trigger for bar in thread2 lock.release() Is there a better way to accomplish this? I'm not a threadding expert so any advice on how to best trigger a method in thread_2 from within thread_1 is appreciated.
