[site]: stackoverflow
[post_id]: 5193762
[parent_id]: 5193368
[tags]: 
How to get a Thin Controller Refactor reusable functionalities that can apply to multiple types of output to ActionFilters . Consequence: Less repetitive code, thinner Controller actions, quicker future development Refactor reusable functionalities that apply to a specific type of output to a custom ActionResult . Consequence: Less repetitive code, thinner Controller actions, quicker future development Leverage ModelBinders to bind your input values to complex objects that are injected into your Controller action. Consequence: You don't need to handle the actual HTTP input (RouteData, Form values, querystring parameters) at all in your controller. You can also handle data validation in your model binder. Implement Dependency Injection via a custom ControllerFactory . Consequence: You don't need to construct services in your Controller. Refactor single Controllers with an excessive amount of Controller actions into multiple Controllers. Consequences: Your code becomes more maintainable. Move your static helper methods to static classes. Consequence: Your methods become reusable by multiple controllers and you have less bloated code in the Controller, so it is easier to maintain and make changes to your app. Other Notes Plenty of open source resources exist to help accomplish these tasks. I definitely suggest looking into the MvcContrib project. They have a FluentController base class that was designed with building thin Controllers in mind. Also, I upvoted Darin because the video he recommended is helpful, so check it out
