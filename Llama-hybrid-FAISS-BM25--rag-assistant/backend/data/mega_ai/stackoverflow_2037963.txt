[site]: stackoverflow
[post_id]: 2037963
[parent_id]: 2037908
[tags]: 
Binary or Text is the first question Historically applications used complex binary formats for structured data but the current trend is to define a text-based representation as this produces more developer- and user- friendly files. XML was created as a portable way to persist and interchange structured data. If it were me, I would use the XML-like but less clunky YAML. If the files are likely to get really large then you could do what OpenOffice does and keep them as text-based markup but written directly into a compressed (I think it's zip for OO) archive. Most languages already have serialization libraries; I'm sure there is some Boost library for C. Typically there are multiple serialization interfaces that use different representations. If you use a library, XML, or YAML, the links will be implicit in the tree-structured representation. If your data has a more general graph, then whether you use text or binary you may have to normalize links. This is the pointer problem you mentioned. One way to resolve it would be to keep temporary maps that are used when reading or writing the file. That is, you just name every link target, say, A1, A2, A3 ... and then use it as a tag at the destination and as a link name (think href=) at the source. I would not use file offsets as pointers, it just seems too fragile and naturally it makes sense to use XML or YAML or something else that already exists.
