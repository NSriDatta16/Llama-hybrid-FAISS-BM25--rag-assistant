[site]: stackoverflow
[post_id]: 5359663
[parent_id]: 5359367
[tags]: 
I think you are barking up the wrong tree here. All of Java's finalizer and Reference mechanisms based on reachability depend on the garbage collector to determine whether the respective objects are reachable. So if you use any of the Reference mechanisms for some kind of finalization, you run into much the same issues that make finalize a bad idea. It is technically possible to implement your own mechanisms for doing reachability; e.g. by implementing your own application-specific reference counting. However, it is likely to be expensive, fragile, and make your code look horrible. (Reference counting in Java is likely to be messier and more fragile than in C++, because you can't overload reference assignment operators to ensure that reference counts are adjusted transparently. So every reference assignment needs to be wrapped in a method call.) So I'd say that doing your own reachability analysis is a bad idea . So, to be practical you need to either: rethink your design so that you don't do things based on reachability, or live with the consequences of using finalize. The first option is clearly the best, IMO.
