[site]: stackoverflow
[post_id]: 807547
[parent_id]: 
[tags]: 
JPA Delete with 2 Interlocking Entity Classes

I have 2 EJB 3 Entity Beans: @Entity public class Organisation { @Id @Column(length = 64) private String guid; private String name; @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE) @JoinColumn(name = "home_unit_fk", nullable = true) private Unit homeUnit; } @Entity public class Unit { @Id @Column(length = 64) private String guid; private String name; @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = "organisation_fk", nullable = false) private Organisation organisation; @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = "parent_unit_fk", nullable = true) private Unit parentUnit; @OneToMany(mappedBy = "parentUnit", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE) @OrderBy("shortName") @OptimisticLock(excluded = true) private Set childUnits; } If I do a delete on the Organisation using standard Dao : public int deleteByGuid(final String guid) { final Query query = entityManager.createQuery("delete from " + getPersistentClass().getName() + " where guid = :guid"); query.setParameter("guid", guid); return query.executeUpdate(); } But I get the following exception: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails ( config . unit , CONSTRAINT FK27D184F5D4393D FOREIGN KEY ( organisation_fk ) REFERENCES organisation ( guid )) I don't get it. What am I doing wrong? Shouldn't JPA/Hibernate perform deletes on both the Unit and the Organisation within the same transaction?
