[site]: stackoverflow
[post_id]: 4840080
[parent_id]: 4838845
[tags]: 
A way of approaching this is to use a meta-layer, or reflection, or both. In addition you will need to provide a customisation application which will allow modification, by the users, of your business logic layer. Such a meta-layer does not really fit in your layered architecture - it is more like a layer orthoganal to your existing architecture, though the running application will probably need to refer to it, at least on initialisation. This type of facility is probably one of the fastest ways of screwing up the production application known to man, so you must: Ensure that the access to this editor is limited to people with a high level of rights on the system (eg administrator). Provide a sandbox area for the customer modifications to be tested before any changes they are testing are put on the production system. An "OOPS" facility whereby they can revert their production system to either your provided initial default, or to the last revision before the change. Your meta-layer must be very tightly specified so that the range of activities is closely defined - George Orwell's "What is not specifically allowed, is forbidden." Your meta-layer will have objects in it such as Business Object, Method, Property and events such as Add Business Object, Call Method etc. There is a wealth of information about meta-programming available on the web, but I would start with Pattern Languages of Program Design Vol 2 or any of the WWW resources related to, or emanating from Kent or Coplien.
