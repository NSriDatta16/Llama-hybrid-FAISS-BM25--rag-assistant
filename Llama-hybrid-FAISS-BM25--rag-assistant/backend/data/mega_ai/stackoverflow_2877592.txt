[site]: stackoverflow
[post_id]: 2877592
[parent_id]: 2877032
[tags]: 
Is there any particular reason you absolutely have to call this from your Linq-to-SQL model?? I would take the pragmatic approach: Linq-to-SQL is great for retrieving, handling, updating single records or small sets of data for bulk loads and/or stuff like this - why bother squeezing that into Linq-to-SQL?? Just new up a SqlConnection, a SqlCommand, and execute that stored proc.... UPDATE: to call the stored proc from straight ADO.NET, you'd use the standard ADO.NET stuff as any programming book on .NET data access or ADO.NET tutorial (just Google for that!) will teach you: using(SqlConnection con = new SqlConnection(your-connection-string-here)) { string sprocName = "UsersInsert"; using(SqlCommand cmd = new SqlCommand(sprocName, con)) { cmd.CommandType = CommandType.StoredProcedure; cmd.CommandType = System.Data.CommandType.StoredProcedure; SqlParameter param1 = new SqlParameter("@UpdateXml", SqlDbType.VarChar, int.MaxValue); param1.Value = YourXmlValueHere; cmd.Parameters.Add(param1); con.Open(); int result = cmd.ExecuteNonQuery(); con.Close(); } } Of course, you might want to wrap this into a try...catch block for exception handling and so forth - but that's basically the code you'd need to call that stored proc using straight ADO.NET.
