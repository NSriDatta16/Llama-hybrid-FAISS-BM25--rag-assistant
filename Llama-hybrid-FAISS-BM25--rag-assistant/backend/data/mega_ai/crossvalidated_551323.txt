[site]: crossvalidated
[post_id]: 551323
[parent_id]: 550251
[tags]: 
Interpolation But the index positions of the High and Low of each series are different, so I cannot simply subtract one OHLC candle, from the other, to get the High and Low prints of the difference series. If we would know the time points of the high and lows then we can estimate the level of the other series by interpolation. Then use the minimum and maximum value for the differences between te highs and lows and the interpolated values of the other series. This method requires storing twice the amount of data. The values and also the times. The example below shows that there are still some discrepancies. This is when the high and lows of the differences happen somewhere in between the high and lows of the series. The maximum discrepancy could be computed as 'high of series 1 minus low of series 2' and 'high of series 2 minus low of series 1'. Example The code below demonstrates this with the index of IBM and NIKE. The OHLC data are computed for the months based on the average (of opening and closing) for the daily values. For each month we compare all the differences, the opening, closing and the highs and lows with the interpolated values and then choose the minimum and maximum of these. Below you see an example of month 110. The data are the open dots. The lines is what is used for estimation of the highs and lows of the difference. The images below show how this interpolation method and comparing all differences (the new method), differs from taking the difference between the highs (the simple method). R Code library(tseries) ### get data ibm = get.hist.quote(instrument = "IBM", start = "1991-01-02", end = "2021-10-31") nike = get.hist.quote(instrument = "NKE", start = "1991-01-02", end = "2021-10-31") ibm_m = (as.numeric(ibm[,1]) + as.numeric(ibm[,4]))/2 nike_m = (as.numeric(nike[,1]) + as.numeric(nike[,4]))/2 #plot(ibm[1:100,2], ylim = c(1,40), type = "p") #lines(nike[1:100,2], col = 2) ### time stuff t = time(ibm) t_years = as.numeric(format(t, "%Y")) t_months = as.numeric(format(t, "%m")) t_days = as.numeric(format(t, "%d")) id_month = (t_years-min(t_years))*12+t_months ### extract OHLC ### includes the times of the points OHLC = function(id_month,t_days,series) { open = c() high = c() low = c() close = c() dopen = c() dhigh = c() dlow = c() dclose = c() for(mm in min(id_month):max(id_month)) { sel = which(id_month == mm) dh = which.max(series[sel]) dl = which.min(series[sel]) ### OHLC high = c(high, series[sel][dh]) low = c(low, series[sel][dl]) open = c(open, head(series[sel], n=1)) close = c(close,tail(series[sel], n=1)) ### times dhigh = c(dhigh, t_days[sel][dh]) dlow = c(dlow, t_days[sel][dl]) dopen = c(dopen, head(t_days[sel], n=1)) dclose = c(dclose,tail(t_days[sel], n=1)) } return(data.frame(open = open, high = high, low = low, close = close, dopen = dopen, dhigh = dhigh, dlow = dlow, dclose = dclose)) } info1 = OHLC(id_month,t_days,ibm_m) info2 = OHLC(id_month,t_days,nike_m) info_d = OHLC(id_month,t_days,nike_m-ibm_m) interpolate = function(v,t,int) { if (int %in% t) { out = v[which(t==int)] } else { k = max(which(t $high,type = "l", lwd = 2, ylim = c(-170,70), xlab = "month index", ylab = "price level difference", main = "highs nike-ibm") lines(highs,col = 2) lines(info2$ high-info1$high, col=4, lty = 2) legend(0,70, c("true highs of difference", "new method" ,"simple method"), lwd = c(2,1,1), col = c(1,2,4), lty = c(1,1,2), cex = 0.85) plot(info_d $low,type = "l", lwd = 2, ylim = c(-170,70), xlab = "month index", ylab = "price level difference", main = "lows nike-ibm") lines(lows,col = 2) lines(info2$ low-info1$low, col=4, lty = 2) legend(0,70, c("true highs of difference", "new method" ,"simple method"), lwd = c(2,1,1), col = c(1,2,4), lty = c(1,1,2), cex = 0.85) ### plot of month 110 n = 110 OHLC1 = info1[n,] OHLC2 = info2[n,] plotting = 1 comp_diffOHLC(OHLC1,OHLC2, plotting = 1) sel = which(id_month == n) points(t_days[sel], ibm_m[sel]) points(t_days[sel], nike_m[sel], col = 2) title("example month 110 ibm (black) and nike (red)")
