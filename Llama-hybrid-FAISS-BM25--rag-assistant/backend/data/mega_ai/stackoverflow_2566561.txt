[site]: stackoverflow
[post_id]: 2566561
[parent_id]: 2565572
[tags]: 
Welcome to the wonderful world of meta-programming :) Meta programming relates actually to many things. I will try to list what comes to my mind: Macro . The ability to extend the syntax and semantics of a programming language was explored first under the terminology macro . Several languages have constructions which resemble to macro, but the piece of choice is of course Lisp . If you are interested in meta-programming, understanding Lisp and the macro system (and the homoiconic nature of the languge where code and data have the same representation) is definitively a must. If you want a Lisp dialect that runs on the JVM, go for Clojure . A few resources: Clojure mini language Beating the Averages (why Lisp is a secret weapon) There is otherwise plenty of resource about Lisp. DSL . The ability to extend one language syntax and semantics is now rebranded under the term "DSL". The easiest way to create a DSL is with the interpreter pattern . Then come internal DSL with fluent interface and external DSL (as per Fowler's terminology). Here is a nice video I watched recently: DSL: what, why, how The other answers already pointed to resources in this area. Reflection . Meta-programming is also inseparable form reflection. The ability to reflect on the program structure at run-time is immensely powerful. It's important then to understand what introspection , intercession and reification are. IMHO, reflection permits two broad categories of things: 1. the manipulation of data whose structure is not known at compile time (the structure of the data is then provided at run-time and the program stills works reflectively). 2. powerful programming patterns such as dynamic proxy , factories, etc. Smalltalk is the piece of choice to explore reflection, where everything is reflective. But I think Ruby is also a good candidate for that, with a community that leverage meta programming (but I don't know much about Ruby myself). Smalltalk: a reflective language Magritte: a meta driven approach to empower developpers and end-users There is also a rich literature on reflection. Annotations . Annotations could be seen as a subset of the reflective capabilities of a language, but I think it deserves its own category. I already answered once what annotations are and how they can be used . Annotations are meta-data that can be processed at compile-time or at run-time. Java has good support for it with the annotation processor tool , the Pluggable Annotation Processing API , and the mirror API . Byte-code or AST transformation . This can be done at compile-time or at run-time. This is somehow are low-level approach but can also be considered a form of meta-programming (In a sense, it's the same as macro for non-homoiconic language.) DSL with Groovy (There is an example at the end that shows how you can plug your own AST transformation with annotations). Conclusion: Meta-programming is the ability for a program to reason about itself or to modify itself. Just like meta stack overflow is the place to ask question about stack overflow itself. Meta-programming is not one specific technique, but rather an ensemble of concepts and techniques. Several things fall under the umbrella of meta-programming. From your question, you seem more interested in the macro/DSL part. But everything is ultimately related, so the other aspects of meta-programming are also definitively worth looking at. PS: I know that most of the links I've provided are not tutorials, or introductory articles. These are resources that I like which describe the concept and the advantages of meta-programming, which I think is more interesting
