[site]: stackoverflow
[post_id]: 3836177
[parent_id]: 
[tags]: 
Preserving rotations in OpenGL

I'm drawing an object (say, a cube) in OpenGL that a user can rotate by clicking / dragging the mouse across the window. The cube is drawn like so: void CubeDrawingArea::redraw() { Glib::RefPtr gl_drawable = get_gl_drawable(); gl_drawable->gl_begin(get_gl_context()); glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); glPushMatrix(); { glRotated(m_angle, m_rotAxis.x, m_rotAxis.y, m_rotAxis.z); glCallList(m_cubeID); } glPopMatrix(); gl_drawable->swap_buffers(); gl_drawable->gl_end(); } and rotated with this function: bool CubeDrawingArea::on_motion_notify_event(GdkEventMotion* motion) { if (!m_leftButtonDown) return true; _3V cur_pos; get_trackball_point((int) motion->x, (int) motion->y, cur_pos); const double dx = cur_pos.x - m_lastTrackPoint.x; const double dy = cur_pos.y - m_lastTrackPoint.y; const double dz = cur_pos.z - m_lastTrackPoint.z; if (dx || dy || dz) { // Update angle, axis of rotation, and redraw m_angle = 90.0 * sqrt((dx * dx) + (dy * dy) + (dz * dz)); // Axis of rotation comes from cross product of last / cur vectors m_rotAxis.x = (m_lastTrackPoint.y * cur_pos.z) - (m_lastTrackPoint.z * cur_pos.y); m_rotAxis.y = (m_lastTrackPoint.z * cur_pos.x) - (m_lastTrackPoint.x * cur_pos.z); m_rotAxis.z = (m_lastTrackPoint.x * cur_pos.y) - (m_lastTrackPoint.y * cur_pos.x); redraw(); } return true; } There is some GTK+ stuff in there, but it should be pretty obvious what it's for. The get_trackball_point() function projects the window coordinates X Y onto a hemisphere (the virtual "trackball") that is used as a reference point for rotating the object. Anyway, this more or less works, but after I'm done rotating, and I go to rotate again, the cube snaps back to the original position, obviously, since m_angle will be reset back to near 0 the next time I rotate. Is there anyway to avoid this and preserve the rotation?
