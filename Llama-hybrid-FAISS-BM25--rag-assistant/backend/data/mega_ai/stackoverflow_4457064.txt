[site]: stackoverflow
[post_id]: 4457064
[parent_id]: 4457042
[tags]: 
You do not want to do this. Every request runs in its own thread. If the code that gets executed on a browser action modifies the list, then two requests can possibly modify the list at the same time, and corrupt the data. That is why it is not a good idea to access static resources from a non-static context, and probably why your tool is warning you. Look at this http://download.oracle.com/javase/6/docs/api/index.html?java/util/concurrent/package-summary.html specifically the part about how the ArrayList is not synchronized. Also note that the paragraph I mention has a solution, specifically List list = Collections.synchronizedList(new ArrayList(...)); Thats one way to do it. But its still not a good idea, namely because it can be slow. If its not a commercial-grade application, and you are not dealing in high volume, you can probably get by not making it better. If this is the type of app that only gets hit a few times per day, you can ignore the warning, with the understanding that its is possible that something bad will happen if two requests munge each other. A better solution: Since you have database, I would just get the information from the db as you need it, i.e. as the requests come in. You can use some caching technologies for performance. The reason I don't like the Singleton Pattern idea is that even if it makes the warning go away, it doesn't address the fundamental synchronization problem, by itself. There are thread safe http://en.wikipedia.org/wiki/Singleton_pattern#Traditional_simple_way_using_synchronization , however, which might work in this case.
