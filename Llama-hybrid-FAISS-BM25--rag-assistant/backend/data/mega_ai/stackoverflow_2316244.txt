[site]: stackoverflow
[post_id]: 2316244
[parent_id]: 2316148
[tags]: 
IMO, it's open to argument. Prior to templates, there were a fair number of cases that justified it. Basically, you could use base classes about like you can use policy classes with templates. For example, consider a template like: template class whatever { policy1 p1; policy2 p2; public: void dosomething() { if (p1.enquire()) p2.dosomething(); } }; If you'd rather not use templates for some reason, you can get (some) fairly similar capabilities with multiple inheritance: class whatever : policy1, policy2 { void dosomething() { if (enquire()) dosomething(); } }; In both cases, you're basically embedding an instance of the "policy" into your new object. Since we're using private inheritance, there's no concern with the LSP -- much like with policy-based templates, the intent isn't to create a large hierarchy that asserts anything about relationships between the members of the hierarchy -- rather, it's simply about creating the ability to create a large variety of unrelated classes on demand.
