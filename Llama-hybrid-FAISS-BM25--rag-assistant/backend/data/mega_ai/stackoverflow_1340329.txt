[site]: stackoverflow
[post_id]: 1340329
[parent_id]: 1340268
[tags]: 
Short answer: the hybrid infrastructure with the TCHAR type, the _TEXT() macro and the various _t* functions ( _tcscpy comes to mind) are a throwback to the times when Microsoft had two platforms coexisting: The Windows NT line was based on the Unicode string representation The Windows 95/98/ME line was based on ANSI string representation. String representation here means that all the Windows APIs that expected or returned string to your app used one or the other representation for these strings. COM added even more confusion as it was available on both platforms -- and expected Unicode strings on both! In those old times it was encouraged that you write "portable" code: you were instructed to use the hybrid infrastructure for your strings so that you can compile for both models just by defining/undefining UNICODE and/or _UNICODE for your app. As the Windows9x line is no more relevant (for the vast majority of the apps anyway) you can safely ignore the ANSI world and use the Unicode strings directly. Beware though that Unicode has multiple representations today: as it is pointed out above the Unicode convention implied by wchar_t is the UCS-2 representation (all characters encoded in 16-bit words). There are other, widely used representations where this is not necessarily true.
