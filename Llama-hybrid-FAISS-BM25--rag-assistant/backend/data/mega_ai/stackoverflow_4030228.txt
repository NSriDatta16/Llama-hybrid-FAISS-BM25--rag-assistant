[site]: stackoverflow
[post_id]: 4030228
[parent_id]: 4030084
[tags]: 
@Bragboy's answer is enough to fix the compilation error and get the program working. The problem that this fixes is that the BufferedReader.readLine() method can throw IOException, and that is a checked exception. Java insists that when a checked exception is thrown within a method (or some other method that the method calls), it must EITHER be caught in the method using a try / catch OR declared as thrown by the method. @Bragboy's answer does the latter in the capitalize , and then catches the IOException in the main method. However, there are other important issue too. Currently capitalize does not do what the method name and signature clearly implies. The signature implies that the method capitalizes its argument. In fact, it totally ignores its argument and reads (and capitalizes) a String from stand input instead. A better design would be to read the input String into input in the main method, and pass it as the s argument. Then change capitalize to just capitalize the argument String. Two other points of style: The class name should be MainClassExec ... not Mainclassexec ; refer to the Java Style Guide for an explanation of the Java naming conventions. The way that your application is dealing with missing input is ugly. Assuming that you've fixed capitalize as I suggested, then the main method should test that the input variable is not null before calling capitalize . Finally, in my opinion, there is rarely any point doing something like this: if (x == null) { throw new NullPointerException(...); } x.something(); Instead you should simply do this: x.something(); This will automatically throw an NullPointerException if x is null . Besides, it is a bad idea to use the message of NullPointerException to contain a user error message. Most NPEs happen as a result of programming errors somewhere. If you start using NPEs to report errors resulting from (for example) bad input from the user, you'll end up with a mess.
