[site]: stackoverflow
[post_id]: 2138221
[parent_id]: 2133193
[tags]: 
My order: Syntheses and @dynamic directives (I started doing these at the top sometime in 2011; previously, they were in with accessor implementations) Class methods ( +load , +initialize , +sharedFoo , others) Initializers dealloc finalize Custom accessor implementations Protocol conformance methods, grouped by protocol (usually with #pragma mark directives) Notification handler methods (usually declared in a class extension up at the top) Other methods (usually declared in a class extension up at the top) Within the dealloc method: Don't use accessor messages, implicit (property accesses) or explicit. Any impure custom accessor may not be safe to call on a partially-deallocated object. (The same goes for initializers.) Don't set ivars to nil . The object is partially deallocated; why are you still sending it messages? (If you aren't, then nothing is looking at the values of the ivars.) (If it were somehow appropriate to set ivars to nil ) Don't abuse the comma operator. An expression like [foo release], foo = nil mixes the types (first void from the message expression, then id from the assignment expression). These are separate statements; write them as such. [super dealloc] is always last and always has an empty line above it, emphasizing its presence. Of course, I also have “Treat Warnings as Errors” turned on, so if I forget [super dealloc] , I break my build.
