[site]: stackoverflow
[post_id]: 1205721
[parent_id]: 1205386
[tags]: 
The h:outputFormat tag will (as far as I know) only use f:param children as parameters. If the message was a link (instead of a h:commandLink ), you could use HTML literals: . I would not recommend trying to emulate h:commandLink by doing this. It might be possible to find a richer version of h:commandLink in a third party library that does exactly what you want. Just splitting the string into two is possible, but makes life difficult for translators and the quality of translation may suffer (especially if you're doing this a lot). I'd look at using a custom function like this: The rendered output is of the form: After waiting a few seconds, please update the page. The function is backed by a static method that splits the string and returns the requested fragment: public static String fragment(String string, int index) { // TODO: regex probably not complete; ask stackoverflow! // see http://java.sun.com/javase/6/docs/api/java/text/MessageFormat.html final String regex = "\\{\\d.*?\\}"; String[] fragments = string.split(regex, index + 2); return fragments[index]; // TODO: error handling } Depending on your view technology (Facelets or JSP), the function declaration is slightly different: Facelets tag library documentation Java EE 5 tutorial on JSP tag libraries EDIT: based on more info JSF takes a declarative approach to building interfaces. You want a dynamic UI with children ordered according to the order they appear in a translated string. These two things are at odds, but all is not lost. There are a few ways to approach this. Redesign the UI to use text above, input/control table below (the popular form approach). This is the simplest solution, but might not make your UI designer happy. Use the binding attribute on a panel to create and programmatically order everything. This might mean a lot of repetitive code in your backing beans. Write a reusable custom control which might look like this: . It is probably possible (and less work) to just replace the renderer for h:outputFormat to support arbitrary children instead of creating a full custom control, but I'd argue against it because it may lead to confusion during long-term maintenance. Someone may have already written a custom control that does what I suggest (it can hardly be an original idea).
