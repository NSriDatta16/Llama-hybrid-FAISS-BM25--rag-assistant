[site]: stackoverflow
[post_id]: 3931746
[parent_id]: 3930188
[tags]: 
A common "Pythonic" way to handle this kind of situation is known as EAFP for " It's easier to ask forgiveness than permission ". Which usually means writing code that assumes everything is fine, but then wrapping it with a try...except block to handle things—just in case—it's not. Here's that coding style applied to your problem: try: my_value = int(my_value) except TypeError: my_value = 0 # or whatever you want to do answer = my_value / divisor Or perhaps the even simpler and slightly faster: try: answer = int(my_value) / divisor except TypeError: answer = 0 The inverse and more traditional approach is known as LBYL which stands for " Look before you leap " is what @Soviut and some of the others have suggested. For additional coverage of this topic see my answer and associated comments to the question Determine whether a key is present in a dictionary elsewhere on this site. One potential problem with EAFP is that it can hide the fact that something is wrong with some other part of your code or third-party module you're using, especially when the exceptions frequently occur (and therefore aren't really "exceptional" cases at all).
