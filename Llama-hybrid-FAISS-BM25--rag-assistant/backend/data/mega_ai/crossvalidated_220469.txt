[site]: crossvalidated
[post_id]: 220469
[parent_id]: 220399
[tags]: 
The easiest way to simulate the system is directly -- draw a bin for each ball. If the bin is full, discard the ball. If there is no bin constraint, this reduces to a uniform discrete distribution. Now, you don't particularly care if 2 balls are in bin 0 or in bin 2 -- it seems that you are trying to compute the distribution of the bin counts E.g. if, for parameters (3,3,2), you get [2,0,1], your bin counts are 0=1 1=1 2=1 My approach was to simply use a monte carlo type simulation and to average the bin count distribution over 10000 runs, as shown below ##################### # Constrained N-nomial simulator # Copyright 2016 Gregory R. Bronner import numpy as np RUNS=10000 SEED=0 import random def compute_n_nomial_probabilities(b, B,z): if b>B*z: raise Exception("No place to put the extra balls") #probability distribution... results=np.zeros(z+1, dtype=int) for r in xrange(RUNS): arr=compute_one_bin(b,B,z) #now do the counts by bin... results+=np.bincount(arr,minlength=z+1) #now divide... results=results.astype(np.double)/float(RUNS*B) return results def compute_one_bin(b,B,z): arr=np.zeros(B, dtype=np.int) #compute a bunch of random integers rnums=np.random.randint(0,B,10*b) succ=0 for val in rnums: if arr[val]
