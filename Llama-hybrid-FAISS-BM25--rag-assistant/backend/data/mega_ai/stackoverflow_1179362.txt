[site]: stackoverflow
[post_id]: 1179362
[parent_id]: 1179346
[tags]: 
input = null deletes (let's the Garbage collector delete) the object in memory, while input = "" instantiates an String object containing the empty string "" . By setting input to null, you are making input an empty object, so it won't take any memory, while setting input = "", you are setting it to a new object, that will definitely take some memory (obviously it should be minimal). You could look into this article from IBM talking about Java GC and performance, that discourages my previous recommendation. It says: Explicit nulling is simply the practice of setting reference objects to null when you are finished with them. The idea behind nulling is that it assists the garbage collector by making objects unreachable earlier. Or at least that's the theory. There is one case where the use of explicit nulling is not only helpful, but virtually required, and that is where a reference to an object is scoped more broadly than it is used or considered valid by the program's specification. This includes cases such as using a static or instance field to store a reference to a temporary buffer, rather than a local variable, or using an array to store references that may remain reachable by the runtime but not by the implied semantics of the program. And furthermore, In the September 1997 "Java Developer Connection Tech Tips" column (see Resources), Sun warned of this risk and explained how explicit nulling was needed in cases like the pop() example above. Unfortunately, programmers often take this advice too far, using explicit nulling in the hope of helping the garbage collector. But in most cases, it doesn't help the garbage collector at all , and in some cases, it can actually hurt your program's performance.
