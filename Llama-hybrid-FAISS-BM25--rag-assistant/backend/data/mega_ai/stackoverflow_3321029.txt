[site]: stackoverflow
[post_id]: 3321029
[parent_id]: 
[tags]: 
Recursively walking a Python inheritance tree at run-time

I'm writing some serialization/deserialization code in Python that will read/write an inheritance hierarchy from some JSON. The exact composition will not be known until the request is sent in. So, I deem the elegant solution to recursively introspect the Python class hierarchy to be emitted and then, on the way back up through the tree, install the correct values in a Python basic type. E.g., A | |\ | \ B C If I call my "introspect" routine on B, it should return a dict that contains a mapping from all of A's variables to their values, as well as B's variables and their values. As it now stands, I can look through B.__slots__ or B.__dict__ , but I only can pull out B's variable names from there. How do I get the __slots__ / __dict__ of A, given only B? (or C). I know that python doesn't directly support casting like C++ & its descendants do-
