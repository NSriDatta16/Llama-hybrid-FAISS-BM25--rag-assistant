[site]: stackoverflow
[post_id]: 2207253
[parent_id]: 2206735
[tags]: 
Some compilers cna turn tail recursion into plain loops, and thus inline them normally. Non-tail recursion could be inlined up to a given depth, usually decided by the compiler. I've never encountered a practical application for that, as the cost of call isn't high enough anymore to offset the increase in code size. [edit] (to clarify that: even though I like to toy with these things, and often check what code my compiler generates for "funny stuff" just out of curiosity, I haven't encountered a use case where any such unrolling helped significantly. This doesn't mean they don't exist or couldn't be constructed. The only place where it would help is precalculating low iterations during compile time. However, in my experience this immensely increases compile times for often negligible runtime performance benefits. Note that Visual Studio 2008 (and earlier) gives you quite some control over this: #pragma inline_recursion(on) #pragma inline_depth(N) __forceinline Be careful with the latter, it can easily overload the compiler :)
