[site]: stackoverflow
[post_id]: 2141735
[parent_id]: 2141178
[tags]: 
For this kind of problems, I will have this approach: Keep the old script that using ob_start() and ob_flush() for a user that disable javascript in their browser. For a user that have javascript enable, load the predefined number content one at a time. To differentiate between js enable user and not, I'm thinking of 2 page. In first page you display a link to old script. Then put a jquery code in this page to intercept click on the link to old script, so click on that link will display (or create) a div , then load the content into that div . You can use a setTimeout to call AJAX code continuously, then after a certain condition reached (Ex, empty response), you can remove the setTimeout using clearTimeout . Each AJAX request will need to have an offset param, so it will fetch content from last AJAX call. After receive response, increment the offset for the next AJAX call. You can use global variable for this. You can use a simple global variable to prevent an AJAX request run while the last AJAX still waiting response, to prevent race condition. Example code: //lock variable var is_running = FALSE; //offset start with 0 var offset = 0; function load_content($) { //check lock if (! is_running) { //lock is_running = true; //do AJAX $.get(URL, { PARAM }, function(resp){ //put data to 'div' //... //if empty, then call clearTimeout //... //increase offset here offset = offset + NUM_ITEM_FETCHED //release lock is_running = false; }); } } The point you must pay attention that using AJAX call, you must determine the response manually, since ob_start and ob_flush will have no effect in this scenario. I hope this will help you create your own code.
