[site]: stackoverflow
[post_id]: 2537358
[parent_id]: 2536239
[tags]: 
Here is an anonymos block which - for a given schema - disables triggers and foreign keys, truncates all the tables and then re-enables triggers and foreign keys. It uses truncate for speed but obviously this means no rollback : so be careful which schema name you supply! It's easy enough to convert that call into a delete from statement if you prefer. The script is a fine example of cut'n'paste programming, and would no doubt benefit from some refactoring to remove the repetition. begin > for trgs in ( select owner, trigger_name from all_triggers where table_owner = '&&schema_name' ) loop execute immediate 'alter trigger '||trgs.owner||'.'||trgs.trigger_name ||' disable'; end loop dis_triggers; > for fkeys in ( select owner, table_name, constraint_name from all_constraints where owner = '&&schema_name' and constraint_type = 'R') loop execute immediate 'alter table '||fkeys.owner||'.'||fkeys.table_name ||' disable constraint '||fkeys.constraint_name; end loop dis_fkeys; > for tabs in ( select owner, table_name from all_tables where owner = '&&schema_name' ) loop execute immediate 'truncate table '||tabs.owner||'.'||tabs.table_name ||' reuse storage'; end loop zap_tables; > for fkeys in ( select owner, table_name, constraint_name from all_constraints where owner = '&&schema_name' and constraint_type = 'R') loop execute immediate 'alter table '||fkeys.owner||'.'||fkeys.table_name ||' enable constraint '||fkeys.constraint_name; end loop en_fkeys; > for trgs in ( select owner, trigger_name from all_triggers where table_owner = '&&schema_name' ) loop execute immediate 'alter trigger '||trgs.owner||'.'||trgs.trigger_name ||' enable'; end loop en_triggers; end; /
