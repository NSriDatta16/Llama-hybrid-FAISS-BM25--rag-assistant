[site]: stackoverflow
[post_id]: 1225436
[parent_id]: 1225000
[tags]: 
Just wondered what limit would be hit first by starting many threads. I wrote the following simple test program and tried it. Now I assume that memory is the limiting factor. I was able to run 1000 threads, but without the Thread.Sleep() the system became "a bit inresponsive". With 2000 threads I got an out of memory exception after starting around 1800 threads. (Notebook with a Intel Core 2 Duo T5800 2.0 GHz, 3.0 GiB RAM and a "few" applications running on WIndows XP SP3 with .NET Framework 3.5 SP1) UPDATE The out of memory exception is caused by the stack of the threads. After specifying the stack size on the thread constructor (I used 64 kB but got probably the minimum size I don't know at the moment) I was able to start 3500 threads (with Thread.Sleep() ). using System; using System.Linq; using System.Threading; namespace GeneralTestApplication { class Program { private static void Main() { Console.WriteLine("Enter the number of threads to start."); while (!Int32.TryParse(Console.ReadLine(), out Program.numberThreads)) { } Program.counters = new Int64[Program.numberThreads]; Console.WriteLine("Starting {0} threads.", Program.numberThreads); for (Int32 threadNumber = 0; threadNumber c > 0)); Console.ReadLine(); } private static Int32 numberThreads = 0; private static Int64[] counters = null; private static readonly ManualResetEvent manualResetEvent = new ManualResetEvent(false); private static volatile Boolean stop = false; public static void ThreadMethod(Object argument) { Int32 threadNumber = (Int32)argument; Program.manualResetEvent.WaitOne(); while (!Program.stop) { Program.counters[threadNumber]++; // Uncomment to simulate heavy work. Thread.Sleep(10); } } } }
