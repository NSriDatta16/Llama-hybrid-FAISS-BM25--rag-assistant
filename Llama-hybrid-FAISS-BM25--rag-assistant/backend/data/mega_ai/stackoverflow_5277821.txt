[site]: stackoverflow
[post_id]: 5277821
[parent_id]: 5277779
[tags]: 
I did that once in C++. I recommend that you read The Art of Computer Programming. Volume 2 has all the details of the algorithms for implementing big numbers. It's a great resource (for this and many other problems.) The book should be available from most public libraries around you (or any university library). BTW. No need to read the whole book, if you just want you can just use it as a reference for the algorithms that you need. UPDATE : As for the API you should try to mimic the existing APIs for number in .NET. Something like Int32 . As for the internal class design, it should be pretty straightforward because there should be very few units interacting. You could abstract the "storage" (byte array) part away and iterate over the "digits" using standard iterators over some generic storage provider. This would allow you to change to use int arrays for example. If you do this then you can automatically change the base of your numbers and enable your implementation to store "more" per digit. This implies that the base of the operations won't be static but would be determined by the "digit" size. I had fun implementing mine, it's a simple but nice project. In my case I didn't go fancy with the internal design. Good luck!
