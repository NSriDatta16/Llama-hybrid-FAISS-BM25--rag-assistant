[site]: stackoverflow
[post_id]: 1215832
[parent_id]: 1214818
[tags]: 
Anyone care to comment on whether we should be using | or || and & or && in our LINQ Where() extensions / queries? In lambda expressions (such as those frequently used in Linq), these operators act as they normally do in c#. | and & are logical operators while || and && are short-circuiting logical operators. Short circuiting is good if you want efficient code. Short-circuiting is bad if you want to avoid branching code (perhaps to UnitTest with 100% coverage). Most people use short-circuiting all the time and the branching doesn't bother them because they avoid using expressions that have side effects, thus they suffer no ill consequences when some of the expressions are not evaluated. Here's an example of useful branching by short circuiting: if (DatabaseIsAvailable() && QueryDataAndThereAreResults()) { //do something with Results } When DatabaseIsAvailable() is false, QueryDataAndThereAreResults() will not be evaluated. Any difference with LINQ to SQL? It doesn't matter which you use for Linq to Sql. The punctuation will be translated into T-Sql's AND and OR operators. After the query is sent to the database, the SqlServer Query Plan Optimizer will figure out whether or not to short circuit.
