[site]: crossvalidated
[post_id]: 407217
[parent_id]: 407001
[tags]: 
Although I agree with the other answers that it is likely that this method will approximate the mean BMI, I would like to point out this is only an approximation. I'm actually inclined to say you should not use the method you describe, as it is simply less accurate. It is trivial to calculate BMI's for each individual and then take the mean of that, giving you the real mean BMI. Here I illustrate two extremes, where the means of weight and length remain the same, but the average BMI is actually different: Using the following (matlab) code: weight = [60, 61, 62, 100, 101, 102]; % OUR DATA length = [1.5, 1.5, 1.5, 1.8, 1.8, 1.8;]; % OUR DATA length = length.^2; bmi = weight./length; scatter(1:size(weight,2), bmi, 'filled'); yline(mean(bmi),'red','LineWidth',2); yline(mean(weight)/mean(length),'blue','LineWidth',2); xlabel('Person'); ylabel('BMI'); legend('BMI', 'mean(bmi)', 'mean(weight)/mean(length)', 'Location','northwest'); We get: If we simply re-order the lengths, we get a different mean BMI while mean(weight)/mean(length^2) remains the same: weight = [60, 61, 62, 100, 101, 102]; % OUR DATA length = [1.8, 1.8, 1.8, 1.5, 1.5, 1.5;]; % OUR DATA (REORDERED) ... % rest is the same Again, using real data it is likely that your method will approximate the real mean BMI, but why would you use a less accurate method? Outside the scope of the question: It's always a good idea to visualise your data so you can actually see the distributions. If you notice certain clusters for example, you can also consider getting separate means for those clusters (e.g. separately for the first 3 and last 3 people in my example)
