[site]: stackoverflow
[post_id]: 2695644
[parent_id]: 2695526
[tags]: 
The problem is that in your -init method, your tableView variable will still be nil. When a nib file is loaded, it first creates and initializes all the objects declared in the nib and only then sets up the connections (outlets, bindings, actions) between them. Any initialization code of yours that depends on the various actions, outlets or bindings being set up needs to be placed in the -(void)awakeFromNib method not the -init method. You can also set the dataSource and delegate outlets of your table view right in Interface Builder, just by control-dragging from the tableView to your AppController in the main nib window, and choosing each outlet in turn. Also, whenever you change your underlying data, you need to call [tableView reloadData] to get the tableView to reflect those changes. In you case, you'd need to call it in your -addNewItem: method. So, your code should look something like this: @implementation AppController - (id)init { if (nil == (self = [super init])) return nil; myArray = [[NSMutableArray alloc] init]; return self; } - (void)dealloc { [myArray release]; [super dealloc]; } - (void)awakeFromNib { // assuming you're not just setting up these outlets in IB [tableView setDataSource:self]; [tableView setDelegate:self]; } -(IBAction)addNewItem:(id)sender { [myArray addObject:[textField stringValue]]; [tableView reloadData]; } // data source methods same as in your code @end
