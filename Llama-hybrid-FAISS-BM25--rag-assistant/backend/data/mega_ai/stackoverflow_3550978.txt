[site]: stackoverflow
[post_id]: 3550978
[parent_id]: 
[tags]: 
Lifecycle of objects passed by reference to STL containers

I'm an experienced coder, but am still relatively new to the STL, and have just come across this problem: As far as I'm aware, STL containers aren't meant to copy the objects which they contain, or otherwise affect their lifecycles, yet experimentally I'm seeing different results. In particular, string classes, which are meant to zero out the first character of their underlying storage upon destruction, are still accessible if they are stored in a container before they go out of scope. For instance, consider the following example: using namespace std; queue strQueue; const char *genStr(int i) { ostringstream os; os As the strings go out of scope when genStr() exits, I would expect the printf to just output "Retval is: ", or at the very least for the call to useStr() to give undefined results, as the memory was stomped on by the repeated allocations from the extra calls, yet both return the appropriate stored strings, without fail. I'd like to know why this happens, but in lieu of that, I'd be happy just to know whether I can rely on this effect happening with any old object. Thanks
