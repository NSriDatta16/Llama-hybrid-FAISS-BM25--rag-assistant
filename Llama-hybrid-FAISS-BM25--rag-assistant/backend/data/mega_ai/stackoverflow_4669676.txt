[site]: stackoverflow
[post_id]: 4669676
[parent_id]: 4669475
[tags]: 
Best structure for storing something in array-like style with keeping the constant acces time to any element is vector. It;s just like you got dynamic sized array. Second option to go is deque. If you plan having very much data go with this one as it have better storage managment and you can edit it from both front and back not just back as in vectors. Last one could be list. If you plan big editting of your data, like erasing inserting new elements (not just accesing them), you should consider this one as it have linear complexity in inserting/erasing elements, while previous 2 have linear plus additional linear time in up to the number of elements between position and the end. So conclusion: vector - easiest deque - good for big data storage list - good for big editting of storage Those are STL sequence containers and including of header should look like: #include here's reference for all STL containers Edit: I see that you meant something else but I leave that here and add to it. Do you really need consumption class? I mean it would be much more logical if you leave all data about line in Line class. That means I would either store services used each month in vector if needed, or I would immediately calculate price and remember just last month services. I would also make class called program that would store services used and let it handle number of services in use. It could either discard new service if there are 2 already, or rewrite the older one. You could also make then return price of program and multiply it by time used. Something like this: #include using namespace std; class Service{ public: int getPrice(){return monthPrice;} void setPrice(const int &p) { monthPrice = p; } private: int monthPrice; }; class Program{ public: Program(){servicesUsed = 0; monthTime = 0;} Program(const int &t) : monthTime(t) {servicesUsed = 0;} void setTime(int t){monthTime = t;} void addService(Service &s); int price(); //calculate price of program private: int monthTime; //time that program was used Service services[2]; //services used in program int servicesUsed; }; void Program::addService(Service &s){ if(servicesUsed monthList; //store data about services per month }; Program *Line::addMonth(const int &t){ monthList.push_back(Program(t)); return &monthList.back(); } int Line::consuption(){ int p = 0; for(unsigned int i = 0; i addService(s1); handle->addService(s2); handle->addService(s3); handle = line.addMonth(60); handle->addService(s3); handle->addService(s2); int p = line.consuption(); return 0; } should be working fine altought you may need modify it more ;)
