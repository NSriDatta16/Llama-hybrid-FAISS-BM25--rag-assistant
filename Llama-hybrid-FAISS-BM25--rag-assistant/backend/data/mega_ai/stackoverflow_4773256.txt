[site]: stackoverflow
[post_id]: 4773256
[parent_id]: 4773170
[tags]: 
I would say the rentals, prices, special offers etc. do not belong to the vehicle: these are separate abstraction(s) . Especially so as the kinds of offers you list above do not seem to be linked to a specific vehicle model, only to calendar days / length of rental etc. So don't try to add these as decorators to the vehicle. Instead, create a separate class (hierarchy) to deal with them. Note that based on your description you have two use cases: the rental agent needs to be able to enumerate all existing offers to the customer like "if you start your rental next Monday, you will get a 10% discount due to this offer, alternatively if you start on Tuesday but extend the rental to 3 days you will get 20% off" etc. the (estimated) price of a concrete rental needs to be calculated taking into account all applicable discounts. So on the one hand you should store an instance of each valid offer in a collection , which allows the agent to list them one by one, along with a textual description. (Note that as the offers are most likely stateless, you can have a single shared instance of each.) OTOH you need functionality for each offer to decide whether it is applicable for a given concrete rental. This can be implemented within the individual offer classes, then invoked polymorphically by e.g. an offer selector (a special kind of factory), which iterates over the collection of offers and selects the ones for the given rentals (nice, you can immediately reuse the collection of offers for a different purpose!). The applicable offers then in fact operate on the collection of rental charges (i.e. not necessarily directly on the rental object itself), modifying / removing charges as applicable. As a side note, if you represent each vehicle model with a separate derived class of IVehicleBase , you would have an awful lot of derived classes in real life, and moreover you would need to add new ones regularly as new models come out and get incorporated into the fleet. And requiring a code change whenever a new vehicle model appears is a maintenance headache in the long run. Of course, if this is just an experimental / toy project, maintenance may not be an issue.
