[site]: stackoverflow
[post_id]: 517895
[parent_id]: 517839
[tags]: 
I don't think this is actually your problem, but it seems like your making an extra method call on register and check_ allowable_moves return { register_map: function(ob) { map = ob; }, register_piece: function(ob) { ob.config.tracker = this; register_draggable(ob); }, register_draggable: function(ob) { register_draggable(ob); }, check_allowable_moves: function(location, jqPiece, ob) { check_allowable_moves(location, jqPiece, ob); } } can be shortened to return { register_map: function(ob) { map = ob; }, register_piece: function(ob) { ob.config.tracker = this; register_draggable(ob); }, register_draggable: register_draggable, check_allowable_moves: check_allowable_moves } Also you are doing a double lookup here: function remove_allowable_moves() { $('.allowable').droppable('destroy'); $('.allowable').removeClass('allowable'); } should be function remove_allowable_moves() { $('.allowable').droppable('destroy') .removeClass('allowable'); } Also Whats the purpose of parsing and int into a float? Take off the parseFloat. var x = parseInt(locs[1]); var y = parseInt(locs[2]); var x_min = parseFloat(x)-2; var y_min = parseFloat(y)-2; Finally Why are you re-registering as draggable on drop? This could be the culprit, if your registering the draggable multiple times and only destroying it once. jqCell.droppable({ accept: '#'+jqPiece.attr('id'), drop: function(ev, ui) { ob.config.jqLocation = $(this); register_draggable(ob); // why this? } }); Other thoughts Another thing I don't know if its going to help your performance, but it could clean up your code. the jquery selector allows commas so instead of $('#coord-1-1').doStuff(); $('#coord-1-2').doStuff(); $('#coord-1-3').doStuff(); you could do $('#coord-1-1, #coord-1-2, #coord-1-3').doStuff(); so your loop would only be concerned with generating the selector string and then you could run you operation on the entire set. IMO a cleaner init instead of var map = new Map('content'); var piece1 = new Piece(map); var piece2 = new Piece(map); var tracker = new Tracker; tracker.register_map(map); map.render(); piece1.render('coord-4-4', '1'); piece2.render('coord-1-1', '2'); tracker.register_piece(piece1); tracker.register_piece(piece2); I'd like to see $(document).ready(function() { $('#content').MapGame({ pieces : { '1' : 'coord-4-4', '2' : 'coord-1-1' } }); }); Now implementing that is a strech from what you have now, but when building a component for jQuery I like to start with a simple init and work from their. Thats one of the big goals of jQuery is to hide all the junk from the user and just let them spin up and instance of your plugin easily.
