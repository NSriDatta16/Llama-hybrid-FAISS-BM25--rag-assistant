[site]: stackoverflow
[post_id]: 3808708
[parent_id]: 
[tags]: 
Delete parts of a dynamic array and grow other

I need to have a dynamic array, so I need to allocate the necessary amount of memory through a pointer. What makes me wonder about which is a good solution, is that C++ has the ability to do something like: int * p = new int[6]; which allocates the necessary array. What I need is that, afterwards, I want to grow some parts of this array. A(n flawed) example: int *p1 = &p[0]; int *p2 = &p[2]; int *p3 = &p[4]; // delete positions p[2], p[3] delete [] p2; // create new array p2 = new int[4]; I don't know how to achieve this behavior. EDIT: std::vector does not work for me since I need the time of insertion/deletion of k elements to be proportional to the number k and not to the number of elements stored in the std::vector . Using pointers, in the general case, I would point to the start of any non continuous region of memory and I would keep account of how many elements it stores. Conceptually, I would fragment the large array into many small ones and not necessarily in continuous space in the memory (the deletion creates "holes" while the allocation does not necessarily "fill" them).
