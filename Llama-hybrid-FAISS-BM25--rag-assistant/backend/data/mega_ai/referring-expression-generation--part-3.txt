 } gender, female ⟩ {\displaystyle \rangle } or ⟨ {\displaystyle \langle } age, 10 years ⟩ {\displaystyle \rangle } . The problem then is defined as follows: Let r {\displaystyle r} be the intended referent, and C {\displaystyle C} be the contrast set. Then, a set L {\displaystyle L} of attribute–value pairs will represent a distinguishing description if the following two conditions hold: Every attribute–value pair in L {\displaystyle L} applies to r {\displaystyle r} : that is, every element of L {\displaystyle L} specifies an attribute–value that r {\displaystyle r} possesses. For every member c {\displaystyle c} of C {\displaystyle C} , there is at least one element l {\displaystyle l} of L {\displaystyle L} that does not apply to c {\displaystyle c} : that is, there is an l {\displaystyle l} in L {\displaystyle L} that specifies an attribute–value that c {\displaystyle c} does not possess. l {\displaystyle l} is said to rule out c {\displaystyle c} . In other words, to generate a referring expression one is looking for a set of properties that apply to the referent but not to the distractors. The problem could be easily solved by conjoining all the properties of the referent which often leads to long descriptions violating the second Gricean Maxim of Quantity. Another approach would be to find the shortest distinguishing description like the Full Brevity algorithm does. Yet in practice it is most common to instead include the condition that referring expressions produced by an algorithm should be as similar to human-produced ones as possible although this is often not explicitly mentioned. Basic algorithms Full Brevity The Full Brevity algorithm always finds a minimal distinguishing description meaning there is no shorter distinguishing description in regard to properties used. Therefore, it iterates over n = 1 , 2 , 3 , 4 , . . . {\displaystyle n=1,2,3,4,...} and checks every description of a length of n {\displaystyle n} properties until a distinguishing description is found. Two problems arise from this way of creating referring expressions. Firstly the algorithm has a high complexity meaning it is NP-hard which makes it impractical to use. Secondly human speakers produce descriptions that are not minimal in many situations. Greedy Heuristics The Greedy Heuristics algorithm approximates the Full Brevity algorithm by iteratively adding the most distinguishing property to the description. The most distinguishing property means the property that rules out most of the remaining distractors. The Greedy Heuristics algorithm is more efficient than the Full Brevity algorithm. Dale and Reiter(1995) present the following algorithm for the Greedy Heuristic: Let L {\displaystyle L} be the set of properties to be realised in our description; let P {\displaystyle P} be the set of properties known to be true of our intended referent r {\displaystyle r} (we assume that P {\displaystyle P} is non-empty); and let C {\displaystyle C} be the set of distractors (the contrast set). The initial conditions are thus as follows: C = { ⟨ {\displaystyle C=\{\langle } all distractors ⟩ } {\displaystyle \rangle \}} ; P = { ⟨ {\displaystyle P=\{\langle } all properties true of r ⟩ } {\displaystyle r\rangle \}} ; L = { } {\displaystyle L=\{\}} In order to describe the intended referent r {\displaystyle r} with respect to the contrast set C {\displaystyle C} , we do the following: 1. Check Success: if | C | = 0 {\displaystyle |C|=0} then return L {\displaystyle L} as a distinguishing description elseif P = ∅ {\displaystyle P=\emptyset } then fail else goto Step 2. 2. Choose Property: for each p i ∈ P {\displaystyle p_{i}\in P} do: C i ← C ∩ { x | p i ( x ) } {\displaystyle C_{i}\leftarrow C\cap \{x|p_{i}(x)\}} Chosen property is p j {\displaystyle p_{j}} , where C j {\displaystyle C_{j}} is the smallest set. goto Step 3. 3. Extend Description (wrt the chosen p j {\displaystyle p_{j}} ): L ← L ∪ { p j } {\displaystyle L\leftarrow L\cup \{p_{j}\}} C ← C 