[site]: stackoverflow
[post_id]: 5310620
[parent_id]: 
[tags]: 
PowerShell script runs from the shell, but not from my application

I am trying to create a Windows Application that will be able to run a variety of Powershell scripts. I have a script which works as it should (when run from the Powershell prompt), and my Windows Application seems to execute it like it should, but it is unable to find the methods on my OU. When I execute the script from the Windows Application, I get these messages out: ERROR: The following exception occurred while retrieving member "Create": "There is no such object on the server. " ERROR: The following exception occurred while retrieving member "Delete": "There is no such object on the server." Powershell script: function New-AdUser { param ( [string] $Username = $(throw "Parameter -Username [System.String] is required."), [string] $Password = $(throw "Parameter -Password [System.String] is required."), [string] $OrganizationalUnit = "Users", [string] $DisplayName, [string] $FirstName, [string] $LastName, [string] $Initials, [string] $MobilePhone, [string] $Description, [switch] $CannotChangePassword, [switch] $PasswordNeverExpires, [switch] $Disabled ) try { $currentDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain() $dn = $currentDomain.GetDirectoryEntry().distinguishedName $ou = [ADSI] "LDAP://CN=$OrganizationalUnit,$dn" $userAccount = $ou.Create("user", "cn=$Username") $userAccount.SetInfo() $userAccount.userAccountControl = ($userAccount.userAccountControl.Item(0) -bxor 0x0002) #Enable the account $userAccount.SetInfo() $userAccount.sAMAccountName = $Username $userAccount.SetInfo() $userAccount.userPrincipalName = ("{0}@{1}" -f $Username, $currentDomain.Name) if ($DisplayName) { $userAccount.displayName = $DisplayName } if ($Description) { $userAccount.description = $Description } if ($FirstName) { $userAccount.givenName = $FirstName } if ($LastName) { $userAccount.SN = $LastName } if ($Initials) { $userAccount.initials = $Initials } if ($MobilePhone) { $userAccount.mobile = $MobilePhone } $userAccount.SetInfo() $userAccount.SetPassword($Password) # Password if ($PasswordNeverExpires) { $userAccount.userAccountControl = ($userAccount.userAccountControl.Item(0) -bxor 0x10000) } if ($CannotChangePassword) { $everyOne = [System.Security.Principal.SecurityIdentifier]'S-1-1-0' $EveryoneDeny = new-object System.DirectoryServices.ActiveDirectoryAccessRule ($Everyone,'ExtendedRight','Deny', [System.Guid]'ab721a53-1e2f-11d0-9819-00aa0040529b') $self = [System.Security.Principal.SecurityIdentifier]'S-1-5-10' $SelfDeny = new-object System.DirectoryServices.ActiveDirectoryAccessRule ($self,'ExtendedRight','Deny', [System.Guid]'ab721a53-1e2f-11d0-9819-00aa0040529b') $userAccount.get_ObjectSecurity().AddAccessRule($selfDeny) $userAccount.get_ObjectSecurity().AddAccessRule($EveryoneDeny) $userAccount.CommitChanges() } $userAccount.SetInfo() if ($Disabled) { $userAccount.userAccountControl = ($userAccount.userAccountControl.Item(0) -bxor 0x0002) } $userAccount.SetInfo() } catch { Write-Error $_ $ou.Delete("user", "cn=$Username") return $false } return $true } The C# code I have is this: PowerShell ps = PowerShell.Create(); ps.AddScript(GetScript("New-AdUser.ps1")); ps.Invoke(); ps.AddCommand("New-AdUser").AddParameters( new List () { new CommandParameter("Username", username), new CommandParameter("Password", password), new CommandParameter("FirstName", firstName), new CommandParameter("LastName", lastName), new CommandParameter("DisplayName", realName), new CommandParameter("Initials", initials), new CommandParameter("MobilePhone", mobilePhone), new CommandParameter("OrganizationalUnit", "Users"), new CommandParameter("PasswordNeverExpires") } ); var results = ps.Invoke(); foreach (var obj in results) Console.WriteLine(obj.ToString()); if (ps.Streams.Error.Count > 0) { foreach (var err in ps.Streams.Error) Console.WriteLine("ERROR: {0}", err.ToString()); }
