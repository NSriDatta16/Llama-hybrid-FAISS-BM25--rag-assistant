[site]: stackoverflow
[post_id]: 1686753
[parent_id]: 1686655
[tags]: 
The answer to your question is is yes , I'll explain. Consider common storage types, i.e. size_t, int64_t, etc. These are decided (defined in most cases) at compile time depending on the architecture that you are building on. Don't have them? Fear not, the compiler figured out the underlying meaning of int and how unsigned effects it. Once the standard C headers figure out the desired word length, everything just adjusts to your system. Unless, of course, you happen to be cross compiling, then they are decided (or defined) by whatever architecture you specified. In short, your compiler (well, mostly preprocessor) is going to adjust types to fit the target architecture. Be it the one you are using, or the one you are cross compiling for. That is if I understand your question correctly. This is one of the few 'magic' abstractions that the language provides and part of the reason why its often called 'portable assembly'.
