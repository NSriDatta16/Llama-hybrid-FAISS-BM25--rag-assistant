[site]: crossvalidated
[post_id]: 187404
[parent_id]: 187335
[tags]: 
It is difficult to be certain without knowing your actual methodology (e.g. cross-validation method, performance metric, data splitting method, etc.). Generally speaking though, training error will almost always underestimate your validation error. However it is possible for the validation error to be less than the training. You can think of it two ways: Your training set had many 'hard' cases to learn Your validation set had mostly 'easy' cases to predict That is why it is important that you really evaluate your model training methodology. If you don't split your data for training properly your results will lead to confusing, if not simply incorrect, conclusions. I think of model evaluation in four different categories: Underfitting – Validation and training error high Overfitting – Validation error is high, training error low Good fit – Validation error low, slightly higher than the training error Unknown fit - Validation error low, training error 'high' I say 'unknown' fit because the result is counter intuitive to how machine learning works. The essence of ML is to predict the unknown. If you are better at predicting the unknown than what you have 'learned', AFAIK the data between training and validation must be different in some way. This could mean you either need to reevaluate your data splitting method, adding more data, or possibly changing your performance metric (are you actually measuring the performance you want?). EDIT To address the OP's reference to a previous python lasagne question . This suggests that you have sufficient data to not require cross-validation and simply have your training, validation, and testing data subsets. Now, if you look at the lasagne tutorial you can see that the same behavior is seen at the top of the page. I would find it hard to believe the authors would post such results if it was strange but instead of just assuming they are correct let's look further. The section of most interest to us here is in the training loop section, just above the bottom you will see how the loss parameters are calculated. The training loss is calculated over the entire training dataset . Likewise, the validation loss is calculated over the entire validation dataset . The training set is typically at least 4 times as large as the validation (80-20). Given that the error is calculated over all samples, you could expect up to approximately 4X the loss measure of the validation set. You will notice, however, that the training loss and validation loss are approaching one another as training continues. This is intentional as if your training error begins to get lower than your validation error you would be beginning to overfit your model!!! I hope this clarifies these errors.
