[site]: stackoverflow
[post_id]: 2918285
[parent_id]: 2918234
[tags]: 
Yes there is, at least sort of, but it isn't a good idea. In C/C++ all a function pointer is, is an address in memory. So if you somehow where able to find the address of this function you could call it. Let me ask some questions though, how do you know this DLL contains this function? Do you have the source code? Otherwise I don't know how you could know for certain that this function exists or if it is safe to call. But if you have the source code, then just expose the function. If the DLL writer didn't expose this function, they never expect you to call it and can change/remove the implementation at any time. Warnings aside, you can find the function address if you have debug symbols or a MAP file you can find the offset in the DLL. If you don't have anything but the DLL, then there is no way to know where that function exists in the DLL - it is not stored in the DLL itself. Once you have the offset you can then insert that into the code like so: const DWORD_PTR funcOffset = 0xDEADBEEF; typedef void (*UnExportedFunc)(); .... void CallUnExportedFunc() { // This will get the DLL base address (which can vary) HMODULE hMod = GetModuleHandle("My.dll"); // Calcualte the acutal address DWORD_PTR funcAddress = (DWORD_PTR)hMod + funcOffset; // Cast the address to a function poniter UnExportedFunc func = (UnExportedFunc)funcAddress; // Call the function func(); } Also realize that the offset of this function WILL CHANGE EVERY TIME the DLL is rebuilt so this is very fragile and let me say again, not a good idea.
