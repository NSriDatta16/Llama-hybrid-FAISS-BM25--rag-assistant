[site]: crossvalidated
[post_id]: 182982
[parent_id]: 182952
[tags]: 
I recommend a MLP (Multi-layer perceptron) for the simple reason that your classification problem is rather straight forward, and thus the standard architecture will do. Besides most libraries only implement MLP's, and also most research goes into MLP's as they are the default network type for most problems. At last MLP's are most flexible in their design. The most common approach to train a neural network is via some form of gradient descent. However a secondary approach is to apply so-called near evolution. In this case the network parameters are encoded as genes, and the resulting chromosomes are evolved using for example a genetic algorithm. Note that euro evolution requires you to specify a fitness function, and although you can use the cross entropy loss or a similar function that takes into account your labels, the results are (depending on your encoding scheme) usually inferior to using a gradient based method. Neuroevolution is commonly applied in which target labels are not readily available, such as in reinforcement learning problems. To summarise, just use a MLP for your problem, as it is the simplest and most common architecture (which thus makes it the most supported one). Do not use neuro-evolution for you problem as it will likely yield inferior performance compared to gradient based approaches.
