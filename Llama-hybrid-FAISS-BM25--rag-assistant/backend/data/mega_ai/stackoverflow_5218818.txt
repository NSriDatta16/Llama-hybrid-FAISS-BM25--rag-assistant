[site]: stackoverflow
[post_id]: 5218818
[parent_id]: 5216436
[tags]: 
As long as your design involves storing all the weights for all the combinations, there is no way you can avoid the storage problem. A reasonable space optimization can be achieved only by optimizing your design itself. questzen below suggests some good approaches. The sparse matrix approach might work initially but can get useless as more and more users get connected. It would be better to identify fixed buckets(ranges) of weights instead of absolute weight values for instance. Alternately, see if you can discard the fully-connected-mesh topology and adopt something like a sparsely connected clusters or a hierarchy etc. If so, then each such cluster can be given an Id and you can have weights for each user with his/her own cluster (a degree of belonging') and weights for a cluster-to-cluster connection. Weight for the connection from user-1 in cluster-1 to user-2 in cluster-2 could then be derived as a function of the inter-cluster weights and the users's 'degree of belonging' to their own clusters.
