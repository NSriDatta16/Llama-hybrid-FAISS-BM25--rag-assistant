[site]: stackoverflow
[post_id]: 4056056
[parent_id]: 4055794
[tags]: 
your main focus imo, should be to abstract your storage solution from your storage mechanism. Decide what methods you'll need SaveData,LoadData,GetSavedDataList,DeleteItem ... then create an interface IStorage . This way, you can write a number of different solutions, local+binary/remote+WCF, but keep the core of your application logic decoupled from the storage solution. your core logic shouldnt care where it saves/loads the information from. Really, what storage solution you use, is up to you. Each have their own pros and cons, and its impossible for anyone to give you a 100% correct answer on which will be the best for you. In the end of the day, you're going to end up with 3 main pieces of work. Storing the data locally, transfering the data to a remote server, storing the data in the remote location. Storing it locally could be as simple as keeping an XML file for metadata, and binary files for the images. You say you dont want to install a local DB, is this a DB engine, or any DB solution, would it be possible to use something like MsAccess/SQL CE etc, as it would make the overall design a little better? For your remote storage, you could write a webservice that transfers an object, with the image data, and tags etc, your local system wouldnt have to know any different if you design your code well with good abstraction/decoupling, and have the webservice(on the server side), persist the data to a database using LINQ. There are many ways to skin this cat, no doubt you'll get plenty of other advice from the rest of the SO community.
