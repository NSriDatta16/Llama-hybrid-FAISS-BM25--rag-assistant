[site]: stackoverflow
[post_id]: 1332247
[parent_id]: 1245530
[tags]: 
I'm trying to solve this exact same problem myself right at the moment for an application that I am migrating from VB6 to VB.NET. The owner-drawn combo control I have in VB6 sets the height of the drop-down through a SetWindowPos API call in response to the WM_CTLCOLORLISTBOX message on the combo control, which gives us access to the HWnd for the drop-down list of the combo control. The following code was added to my class that inherits from ComboBox and seems to do the trick, but still needs testing. I'm not sure it's the most elegant way of doing this either. Obviously you'll need to change the line that sets the newHeight variable, but this should give you the general idea. Private Structure RECT Public Left As Integer 'x position Of upper-left corner Public Top As Integer 'y position Of upper-left corner Public Right As Integer 'x position Of lower-right corner Public Bottom As Integer 'y position Of lower-right corner End Structure Private Declare Function GetWindowRect Lib "user32" _ (ByVal hwnd As Integer, ByRef lpRect As RECT) As Integer Private Declare Sub SetWindowPos Lib "user32" _ (ByVal hwnd As Integer, ByVal hWndInsertAfter As Integer, _ ByVal X As Integer, ByVal Y As Integer, _ ByVal cx As Integer, ByVal cy As Integer, _ ByVal wFlags As Integer) Private Const SWP_NOZORDER As Integer = &H4 Private Const SWP_NOACTIVATE As Integer = &H10 Private Const SWP_FRAMECHANGED As Integer = &H20 Private Const SWP_NOOWNERZORDER As Integer = &H200 Private _hwndDropDown As Integer = 0 Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message) Const WM_CTLCOLORLISTBOX As Integer = &H134 If m.Msg = WM_CTLCOLORLISTBOX Then If _hwndDropDown = 0 Then _hwndDropDown = m.LParam.ToInt32 Dim r As RECT GetWindowRect(m.LParam.ToInt32, r) 'height of four items plus 2 pixels for the border in my test Dim newHeight As Integer = 4 * MyBase.ItemHeight + 2 SetWindowPos(m.LParam.ToInt32, 0, _ r.Left, _ r.Top, _ MyBase.DropDownWidth, _ newHeight, _ SWP_FRAMECHANGED Or _ SWP_NOACTIVATE Or _ SWP_NOZORDER Or _ SWP_NOOWNERZORDER) End If End If MyBase.WndProc(m) End Sub Protected Overrides Sub OnDropDownClosed(ByVal e As System.EventArgs) _hwndDropDown = 0 MyBase.OnDropDownClosed(e) End Sub
