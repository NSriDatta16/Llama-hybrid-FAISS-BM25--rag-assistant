[site]: stackoverflow
[post_id]: 4666292
[parent_id]: 4651870
[tags]: 
This can be done (pretty elegantly) with a tool like Pyparsing : from pyparsing import Group, Literal, Optional, Word import string code = Group(Optional(Literal("c"), default='') + Word(string.digits) + Optional(Literal(","), default='')) parser = Literal("start:") + OneOrMore(code) + Literal(";") # Read lines from file: with open('lines.txt', 'r') as f: for line in f: try: result = parser.parseString(line) codes = [c[1] for c in result[1:-1]] # Do something with teh codez... except ParseException exc: # Oh noes: string doesn't match! continue Cleaner than a regular expression, returns a list of codes (no need to string.split ), and ignores any extra characters in the line, just like your example.
