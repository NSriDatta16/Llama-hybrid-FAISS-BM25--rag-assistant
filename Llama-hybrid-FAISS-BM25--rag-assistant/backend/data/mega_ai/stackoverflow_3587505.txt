[site]: stackoverflow
[post_id]: 3587505
[parent_id]: 3584557
[tags]: 
OK, I'm just posting this answer for fun. The other solutions use variables to accumulate information iteratively. I wanted to try a functional solution, where the number of any table cell (or alternatively, the table cell for any number) could be known without iterating through any others. Here it is in javascript. I know, it's not pure functional programming, nor is it extremely elegant, but the computation of the number for each table cell is done without reference to prior iterations. So it's multi-core friendly. Now we just need somebody to do it in haskell. ;-) BTW this was written before the comment that the 1 should end up in a certain location that is not necessarily the northwest corner (still unspecified as of now). Since somebody mentioned the Ulam spiral, just for kicks I added code to put a red border around the primes (even though the spiral is inside out). Interestingly enough, there do seem to be diagonal streaks of primes, though I don't know if it's significantly different from the streaks you'd get with random odd numbers. The code: // http://stackoverflow.com/questions/3584557/logical-problem /* Return a square array initialized to the numbers 1...n2, arranged in a spiral */ function spiralArray(n2) { var n = Math.round(Math.sqrt(n2)); if (n * n != n2) { alert('' + n2 + ' is not a square.'); return 0; } var h = n / 2; var arr = new Array(n); var i, j; for (i = 0; i rc) { // going south offset = i - (n - j) + 1; } else if (rc > lr) { // going west offset = i - j; } else if (lr > lc) { // going north offset = n - i - 1 - j; } else { // going east offset = j - i + 1; } arr[i][j] = compr + compc + offset; } } return arr; } function isPrime(n) { // no fancy sieve... we're not going to be testing large primes. var lim = Math.floor(Math.sqrt(n)); var i; if (n == 2) return true; else if (n == 1 || n % 2 == 0) return false; for (i = 3; i '; var scale = 1 / (m * n); var i, j; for (i = 0; i '; for (j = 0; j ' + arr[i][j] + ' '; } s += ' '; } s += ' '; tableElt.innerHTML = s; } function tryIt(tableId) { var sizeElt = document.getElementById('size'); var size = parseInt(sizeElt.value); writeArray(spiralArray(size * size), 'spiral', size, size); } The HTML page to exercise it: td { text-align: right; font-weight: bold; } Size of spiral:
