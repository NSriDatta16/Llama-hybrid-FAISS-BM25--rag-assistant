[site]: stackoverflow
[post_id]: 5397656
[parent_id]: 5397297
[tags]: 
I was struggling with the same problem with CC.NET... I ended up ditching NANT and writing a custom CC.NET plugin that updates AssemblyInfo.cs for each project programatically. Implementing a CC.NET plugin is very simple. using System.Collections.Generic; using System.IO; using Exortech.NetReflector; using ThoughtWorks.CruiseControl.Core; namespace ccnet.AssemblyVersionUpdater.plugin { [ReflectorType("assemblyRevisioner")] public class AssemblyRevisioner : ITask { public AssemblyRevisioner() { } [ReflectorProperty("rootFolder", Required = true)] public string RootFolder { get; set; } public void Run(IIntegrationResult result) { foreach (var file in GetAssemblyInfoFiles(RootFolder)) { var tmp = file + ".tmp"; using (var sr = new StreamReader(file)) { using (var st = new StreamWriter(tmp)) { string line; var versionSet = false; var fileVersionSet = false; while ((line = sr.ReadLine()) != null) { if (!versionSet && line.StartsWith("[assembly: AssemblyVersion(")) { st.WriteLine("[assembly: AssemblyVersion(\"{0}\")]", result.Label); versionSet = true; } else { if (!fileVersionSet && line.StartsWith("[assembly: AssemblyFileVersion(")) { st.WriteLine("[assembly: AssemblyFileVersion(\"{0}\")]", result.Label); fileVersionSet = true; } else { st.WriteLine(line); } } st.Flush(); } st.Close(); } sr.Close(); } File.SetAttributes(file, FileAttributes.Normal); File.Copy(tmp, file, true); File.Delete(tmp); } } private static IEnumerable GetAssemblyInfoFiles(string b) { var result = new List (); var stack = new Stack (); stack.Push(b); while (stack.Count > 0) { var dir = stack.Pop(); try { result.AddRange(Directory.GetFiles(dir, "AssemblyInfo.cs")); foreach (var dn in Directory.GetDirectories(dir)) { stack.Push(dn); } } catch { } } return result; } } } Compile the DLL and place it in the CruiseControl.NET\server folder. CC.NET needs to be restarted for the plugin to install. Then in the appropriate CC.NET config file: E:\Build\Source\Project1 ... This code edits AssemblyInfo.cs "in place" and replaces the version number with one from CC.NET before the project is built. I'm sure there are more elegant ways to increment the version number but this has been working fine for me.
