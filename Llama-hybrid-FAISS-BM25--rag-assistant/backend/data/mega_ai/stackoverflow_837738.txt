[site]: stackoverflow
[post_id]: 837738
[parent_id]: 836875
[tags]: 
In general you can't rely on any type of ABI in C++ beyond standard C bindings. But Depending on how many assumptions you make, you can use more and more of C++ in your interface. I found this great article on steps to make your API's turn into a stable ABI. For instance, never pass Standard C++ Library (or Boost) datatypes across your interface; it might break even with a small bug fix to the library. Some examples of the issues to watch out for when publishing an ABI compatible API are: Windows Debug heap . You have to be sure that all allocations and deallocations are on the same side of a "module" (that is, executable or DLL). Fragile Binary Interface problem. Even if both sides of your system consistently use the same compiler and libraries, you have to be careful in C++ about what you publish in your .h files, and where allocations happen. If you follow the linked article, you will find solutions for these and other issues. Edit : I also found an interesting article published by Microsoft which describes how COM interfaces work, by taking a C++ project and turning it into COM. It's my belief that one of the primary reasons that Microsoft developed COM was to solve the Fragile Binary Interface problem that C++ has, so they can ship DLLs with publish object oriented APIs.
