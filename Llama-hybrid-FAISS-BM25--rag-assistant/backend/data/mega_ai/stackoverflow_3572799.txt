[site]: stackoverflow
[post_id]: 3572799
[parent_id]: 3572640
[tags]: 
If the file is in text format, you may be able to fit it in memory just by converting things to integers as you read them in, since an integer stored as characters may take more space than an integer stored as an integer, depending on the size of the integers and the type of text file. EDIT: You edited your original question; I can see now that you can't read them into memory, see below. If you can't read them into memory, this is what I came up with: Figure out how many integers you have. You may know this from the start. If not, then it only takes one pass through the file. Let's say this is S. Use your 2G of memory to find the x largest integers (however many you can fit). You can do one pass through the file, keeping the x largest in a sorted list of some sort, discarding the rest as you go. Now you know the x-th largest integer. You can discard all of these except for the x-th largest, which I'll call x1. Do another pass through, finding the next x largest integers less than x1, the least of which is x2. I think you can see where I'm going with this. After a few passes, you will have read in the (S/2)-th largest integer (you'll have to keep track of how many integers you've found), which is your median. If S is even then you'll average the two in the middle.
