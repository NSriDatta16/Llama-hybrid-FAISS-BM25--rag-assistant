[site]: stackoverflow
[post_id]: 1011821
[parent_id]: 326880
[tags]: 
This is the question that requires JBDAVID's 10 commandments for Hardware design. Use Revision/Version Control, just like in Software. SVN and Hg are free. Require the code to pass syntax checking before check-in. A LINT tool is better. Use a full-strength Hardware Verification Language for design Verification. System-Verilog is nearly a safe choice. Track Bugs. Bugzilla and GNATS are free tools. FogBugz requires a little $. Use Assertions to catch issues with incorrect use. The Coverage Triad makes for a stable design: Measure Code coverage, Functional coverage and Assertion coverage in both simulation and formal tools. Power is King: use CPF or UPF to capture, enforce and verify your Power-Intent. the real design is often mixed signal, Use a Mixed-Signal language to verify the analog with the digital. Verilog-AMS is one such solution. But don't go overboard. Realnumber modeling can accomplish most of the functional aspects of mixed-signal behavior. Use Hardware Acceleration to validate the Software that has to work with the silicon! Syntax Aware text editors for your HDL/HVL are a minimum requirement for developer IDE.
