[site]: stackoverflow
[post_id]: 3761840
[parent_id]: 3761267
[tags]: 
Disclaimer: Please note that I do not advocate trying to parse arbitrary HTML with regular expressions or simple substring matches. The solution below is for this specific problem , which appears to be purposely limited to make parsing possible with simple methods. In general, I agree with the consensus: To parse HTML, use an HTML parser. That said . . . Given that nested tags aren't allowed, and assuming that there aren't any HTML comments allowed, it should be relatively easy to do the following in a loop to find and eliminate all tags that have no corresponding . string inputText = GetHtmlText(); int scanPos = 0; int startTag = inputText.IndexOf(" ", scanPos); while (startTag != -1) { scanPos += 4; // Now look for a closing tag or another open tag int closeTag = inputText.IndexOf(" , scanPos); int nextStartTag = inputText.IndexOf(" ", scanPos); if (closeTag == -1 || nextStartTag The code assumes that the strings and cannot exist in the text except as actual paragraph open and closing tags. If you can make that guarantee, than the above (or something very similar) should work quite well. ADDED: Handling things like , etc., gets a little less sure. If you can guarantee that there won't be any > characters between the opening and the closing > , then you can modify the code above to search for as well as for , and if found then locate the closing > . It's a little bit messy, but not particularly difficult. All that said, I would not recommend this approach for parsing arbitrary HTML, because of the caveats I've already stated: it won't handle comments and it makes what are probably invalid assumptions about the format of the HTML in general. It also won't handle things like and , both of which are perfectly valid (and that I've encountered in the wild).
