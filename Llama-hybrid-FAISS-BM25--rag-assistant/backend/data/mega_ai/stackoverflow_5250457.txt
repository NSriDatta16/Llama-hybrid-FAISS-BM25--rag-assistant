[site]: stackoverflow
[post_id]: 5250457
[parent_id]: 5248383
[tags]: 
Please read up on database techniques, especially Normal Form and "Indices". IMHO, your code and concepts are overly complicated. Simplifying the design simplifies the code. Simplifying the code improves readability, robustness and correctness Index Tables. There are two primary concerns in your requirements: Searching for data and fetching the data. In most applications, searching for data will consume more time than fetching the data. So, the primary objective is to make the searching as efficient as possible. Most databases put the data somewhere and create Index Tables . The Index Table is a data structure that makes finding the data easier (and faster). An example of an Index Table is the std::map container. For a given key , it will return a value . The trick is to make the value a link, handle or pointer to the data correlated to the key. If your data is small enough, you can simplify this to placing the data into the index table. Organizing the Data If your application spends a lot of time searching or fetching data, it is probably Data Oriented , or Data Driven . In either case the data is important, so change the program design around accessing the data. In database theory, there is discussion of Normal Forms . These are techniques for simplifying (reducing duplications) the data and making the fetching easier. The Development Plan I highly suggest you put the data into a simple container, like std::vector , and start working with the index tables. Once the index tables are implemented, your program will run better . If the program has poor performance, change the data's structure from std::vector to something easier to access. Check out this reply: At what point is it worth using a database?
