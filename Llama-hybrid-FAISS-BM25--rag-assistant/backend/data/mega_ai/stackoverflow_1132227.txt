[site]: stackoverflow
[post_id]: 1132227
[parent_id]: 1132145
[tags]: 
The simple answer is - you don't have code to do anything in mousePressed() or mouseReleased(). There are lots of other problems in the code though... Simplest solution I could come up with - public class Client extends JApplet { private MouseInputAdapter myMouseListener = new MyMouseListener(); public void init() { // usually a very bad idea, but needed here // since you want to move things around manually setLayout(null); // assuming this will get used often, so making it a method. addLabelForImage(getImage(getCodeBase(), "okay.png")); } private void addLabelForImage(Image image) { ImageIcon icon = new ImageIcon(image); JLabel l = new JLabel(icon); add(l); l.setSize(l.getPreferredSize()); // you'll probably want some way to calculate initial position // of each label based on number of images, size of images, // size of applet, etc. - just defaulting to 100,100 now. l.setLocation(100, 100); l.addMouseListener(myMouseListener); l.addMouseMotionListener(myMouseListener); } // Made this a MouseInputAdapter because I assume you may want to handle // other types of mouse events later... private static class MyMouseListener extends MouseInputAdapter { @Override public void mouseDragged(MouseEvent e) { // when the mouse is dragged over a the component this listener is // attached to (ie - one of the labels) convert the point of the mouse // event from the internal component coordinates (0,0 is upper right // corner of each label), to it's parent's coordinates (0,0 is upper // right corner of the applet), and set the components location to // that point. Component theLabel = e.getComponent(); Container theApplet = theLabel.getParent(); Point labelPoint = e.getPoint(); Point appletPoint = SwingUtilities.convertPoint( theLabel, labelPoint, theApplet ); theLabel.setLocation(appletPoint); } } }
