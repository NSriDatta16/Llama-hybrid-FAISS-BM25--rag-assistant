[site]: stackoverflow
[post_id]: 1142125
[parent_id]: 1140117
[tags]: 
If you always or at least often use the same blur settings you might gain speed by doing the filtering in frequency domain instead of the spatial domain. Precaclulate your filter image G(u,v), which is a 2D gaussian Apply fourier transform to your input image f(x,y)->F(u,v) Filter by multiplication: H(u,v) = F(u,v) .* G(u,v) (pixelwise multiplication, not matrix multiplication) Transform your filtered image back into the spatial domain by inverse fourier transform: H(u,v) -> h(x,y) The pros of this approach is that pixel-wise multiplication should be pretty fast compared to averaging a neighborhood. So if you process a lot of images this might help. The downside is that I have no idea how fast you can do fourier transforms on the iPhone so this might very well be much slower than other implementations. Other than that I guess since the iPhone has OpenGL support you could maybe use its texturing functions/drawing to do it. Sorry to say though that I am no OpenGL expert and can't really give any practical advice as how that is done.
