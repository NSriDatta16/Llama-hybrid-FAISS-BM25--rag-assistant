[site]: stackoverflow
[post_id]: 4956297
[parent_id]: 4955808
[tags]: 
I'm writing an app that makes heavy use a web service to provide the data to display on screen. I do all downloading in an NSOperation that runs inside a NSOperationQueue of a singleton "data manager" class. The NSOperation does a "performSelectorOnMainThread" to the data manager singleton when the download is complete, the data manager stores the new data, and posts a NSNotification that it has new data available. Any UIViewController that cares about the data updates in that particular manager registers for that update notification. With this structure, the app UI runs very smoothly, no hiccups or stalls. Using the same sort of organization, it's very easy to create a "LazyUIImageView" class that downloads its image in an NSOperation (and could show an activity indicator while waiting for image download to complete). Tables with LazyUIImageView scroll smoothly, and when the image data finally arrive, the images just "pop" right in to view.
