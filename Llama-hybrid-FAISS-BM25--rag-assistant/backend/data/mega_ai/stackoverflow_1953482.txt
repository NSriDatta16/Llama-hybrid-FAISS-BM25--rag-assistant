[site]: stackoverflow
[post_id]: 1953482
[parent_id]: 1953113
[tags]: 
This is rather a hard selector for jQuery to match. You are asking it to do quite a lot of unnecessary work. Whereas standard CSS selectors can allow you to leverage the browser's fast CSS matching implementation in newer browsers that have querySelectorAll , custom jQuery selectors are always going to be slow. I would suggest that if you are having speed problems you would probably be better off writing the matching code as explicit JavaScript yourself rather than shoehorning it into selectors. Using explicit matching code also means you can lose the ugliness of the string concatenation into the selector Contains('" + forenameVal + "') , which will go wrong when special chars such as ' are present in the input name. ' is quite often present in real-world names. eg. (untested): var forenameVal= $('#txtForename').val().toUpperCase(); var surnameVal= $('#txtSurname').val().toUpperCase(); var table= document.getElementById('table'); for (var i= table.rows.length; i-->0;) { var row= table.rows[i]; row.className= ( row.cells[0].firstChild.data.toUpperCase().indexOf(forenameVal)!==-1 && row.cells[1].firstChild.data.toUpperCase().indexOf(surnameVal)!==-1 )? '' : 'hidden'; } Note this relies on each name cell having a single Text node child to get the data from. If that's not the case (a name cell may contain other content, or no content at all, not even whitespace) you would have to use $(row.cells[0]).text() instead, but this will also be slower. It also relies a className to key hiddenness (you'd put .hidden { display: none; } in the stylesheet) to avoid some of the difficulties with hiding table rows. You could instead turn it into an if (...) $(row).show(); else $(row).hide(); but again this makes jQuery do a little more work.
