[site]: stackoverflow
[post_id]: 890342
[parent_id]: 890292
[tags]: 
I would probably start by concentrating on the commonalities among those language that you already know somewhat, i.e. namely the C syntax, classes and encapsulation from Java/C#, and from there on it's mostly a matter of the different types in C, and well pointers of course, as well as manual memory management. A pretty good multimedia introduction (flash video with animations) to the C-family of programming languages is provided by Bruce Eckel's Thinking in C . Once you got these basics sorted, I would recommend to concentrate on getting to grips with the STL and eventually boost. Also, one thing that might be worth a try in order to get started actually using your new knowledge, might be to start splitting your future projects into distinct modules, where certain components/parts could possibly be implemented in C++. This encourages modular design and will provide for a way to actually learn new things and apply your knowledge step by step. This could be done for example by planning to implement one tiny part of a new project as a DLL or in managed C++ code. And in cases where you find that you cannot directly use/embed C++ components, you could still try to follow a C++ oriented approach, deliberately sacrificing some of those Java/C# facilities that you know are not available in C++. In other words, there's usually a common denominator between platforms and languages, in network programming it's for example BSD style sockets, on Windows there's often the possibility to make use of the Win32 API.
