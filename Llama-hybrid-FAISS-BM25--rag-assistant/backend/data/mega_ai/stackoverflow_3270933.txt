[site]: stackoverflow
[post_id]: 3270933
[parent_id]: 3270863
[tags]: 
There are a couple of problems with your code: You are looping four million times instead of until a condition is true. You have repeated code in the body of your loop. Most people when they start learning Python learn only imperative programming. This is not surprising because Python is an imperative language. But Python also supports functional programming to a certain extent and for this sort of exercise a functional programming approach is more enlightening in my opinion. First define a generator that generates all the Fibonacci numbers: def fib(): a = b = 1 while True: yield a a, b = b, a + b To use this generator we can import a few useful functions from itertools. To print the first few numbers use islice : from itertools import ifilter, islice, takewhile for x in islice(fib(), 5): print x 1 1 2 3 5 To find only the even numbers we can use ifilter to produce a new generator: def is_even(x): return x % 2 == 0 evenfibs = ifilter(is_even, fib()) for x in islice(evenfibs, 5): print x 2 8 34 144 610 To fetch numbers from the generator until a number exceeds four million use takewhile : for x in takewhile(lambda x: x To solve the problem you can use sum: sum(list(takewhile(lambda x: x I hope this shows that a functional programming approach is not difficult and is a more elegant way to solve certain types of problem.
