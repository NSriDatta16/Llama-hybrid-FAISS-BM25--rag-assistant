[site]: stackoverflow
[post_id]: 3363100
[parent_id]: 3362915
[tags]: 
I'll go against the popular opinion and say that Haskell is NOT a good first programming language for the typical first-time programmer. I don't think it is as approachable for a raw beginner as imperative languages like Ruby. The reason for this, is that people do not think about the world in a functional manner. When they see a car driving down the street, they see the same car, with ever-changing mutable state. They don't see a series of slightly different immutable cars. If you check out other SO questions , you'll see that Haskell is pretty much never mentioned as a good choice for a beginner. However, if you are a mathematician, or already know enough about programming to understand the value of functional programming, I think Haskell is a fine choice. So to summarize, I think Haskell is a perfect fit for you, but not a good fit for the typical beginner. EDIT: Thanks for the insightful comments. Owen's point that people think in a multi-paradigm manner is very true. This strengthens my belief that a multi-paradigm language like Ruby would be easier to pick up, and has the added benefit of exposing the student to both imperative and functional thinking. Haskell is decidedly not multi-paradigm. Chuck mentioned Haskell's sophisticated type system which is another great point. While I personally prefer statically typed languages, using a dynamic language allows a beginner to ignore that piece of the puzzle until they are curious enough to find out what is going on behind the scenes. Haskell's type system, while elegant, is in your face from day 1.
