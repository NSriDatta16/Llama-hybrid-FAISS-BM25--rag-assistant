[site]: stackoverflow
[post_id]: 3182931
[parent_id]: 3182678
[tags]: 
ok, most importantly, don't reinvent the wheel! Spend some time researching libraries which you can easily leverage: For logging I highly recommend Log4Net . For testing nUnit For mocking, Rhino . Also, take a look at Inversion of Control Containers, I recommend Castle Windsor . For indexing I recommend Solr (on top of Lucene). Next, write some wrappers: These should be the entry point of you API (common library, but think of it as an API). Focus on abstracting all the libraries you use internally in your API, so if you don't want to use Log4Net, or Castle Windsor anymore, you can by writing well structured abstractions and concentrating on loosely coupled design patterns. Adopt Domain Driven Development: Think of API(s) as Domains and modular abstractions that internally use other common APIs like you common Data Access library. Suggestions: I'd start with a super flexible general DAL library, that makes it super easy to access any type of data and multiple storage mediums. I'd use Fluent nHibernate for the relational DB stuff, and I'd have all the method calls into the you data access implement LINQ, as it's a c# language feature. using LINQ to query DBs, Indexes, files, xml etc.
