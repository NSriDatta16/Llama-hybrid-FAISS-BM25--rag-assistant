[site]: crossvalidated
[post_id]: 454272
[parent_id]: 453230
[tags]: 
I'm no expert but I'll try to give a shot at your question. If I understand it correctly, you have a sample of datapoints d but you don't know the parameters of the distribution that generated it. You want to know how extreme the value x is in that sample. So you have: set.seed(1234) d To know how extreme x is you could simply check where x ranks in d and turn the rank into a percentage: sum(d You could then bootstrap d and get some confidence interval for the ranking of x : score Bayesian approach A Bayesian approach could go along these lines. x is anywhere between 0% and 100% of d (i.e. x can be anywhere between being the lowest or largest value of d .) Since this range is between 0 and 1, we use a Beta prior to describe our guess for where x could be. For example, choose: alpha Then we consider the values of d $ x as "number of successes" and those d $>$ x as "number of failures". I.e. our data comes from a binomial distribution. In this case updating the prior becomes very simple since the posterior is just $Beta(alpha + successes, beta + failures)$ (reference needed, please Google it up). So in our case we have: succ x) posterior We can use the posterior distribution and the updated parameters to plot the results: plot(seq(0, 1, by= 0.01), posterior, type= 'l', xlim= c(0, 1), col= 'red', ylab= 'Density', xlab= 'x') points(seq(0, 1, by= 0.01), prior, type= 'l', col= 'blue') hist(d, freq= FALSE, add= TRUE, breaks= 20) legend(x= 'topright', legend= c('prior', 'posterior', 'data'), col= c('blue', 'red', 'black'), lty= 'solid') You could sample from the posterior distribution to get an estimate of how extreme x is: mean(rbeta(10000, alpha + succ, beta + fail)) # ~ 10% Hope this is correct and makes sense - I'd like to hear other views on the problem...
