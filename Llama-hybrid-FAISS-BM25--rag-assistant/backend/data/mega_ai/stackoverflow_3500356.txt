[site]: stackoverflow
[post_id]: 3500356
[parent_id]: 3499798
[tags]: 
First some nitpicking ;-) you should be more careful about the types that you are using. In some places you seem to assume that ulong is 64 bit wide, use uint64_t there. And also for all other types, rethink carefully what you expect of them and use the appropriate type. The optimization that I could see is integer division. Your code does that a lot, this is probably the most expensive thing you are doing. Division of small integers ( uint32_t ) maybe much more efficient than by big ones. In particular for uint32_t there is an assembler instruction that does division and modulo in one go, called divl . If you use the appropriate types your compiler might do that all for you. But you'd better check the assembler (option -S to gcc) as somebody already said. Otherwise it is easy to include some little assembler fragments here and there. I found something like that in some code of mine: register uint32_t a asm("eax") = 0; register uint32_t ret asm("edx") = 0; asm("divl %4" : "=a" (a), "=d" (ret) : "0" (a), "1" (ret), "rm" (divisor)); As you can see this uses special registers eax and edx and stuff like that...
