[site]: stackoverflow
[post_id]: 1964422
[parent_id]: 1963507
[tags]: 
To answer your specific questions: Q1: "Am I correct that python dicts suffer from linear access times with such inputs?" A1: If you mean that average lookup time is O(N) where N is the number of entries in the dict, then it is highly likely that you are wrong. If you are correct, the Python community would very much like to know under what circumstances you are correct, so that the problem can be mitigated or at least warned about. Neither "sample" code nor "simplified" code are useful. Please show actual code and data that reproduce the problem. The code should be instrumented with things like number of dict items and number of dict accesses for each P where P is the number of points in the key (2 Q2: "As far as I know, sets have guaranteed logarithmic access times. How can I simulate dicts using sets(or something similar) in Python?" A2: Sets have guaranteed logarithmic access times in what context? There is no such guarantee for Python implementations. Recent CPython versions in fact use a cut-down dict implementation (keys only, no values), so the expectation is average O(1) behaviour. How can you simulate dicts with sets or something similar in any language? Short answer: with extreme difficulty, if you want any functionality beyond dict.has_key(key) .
