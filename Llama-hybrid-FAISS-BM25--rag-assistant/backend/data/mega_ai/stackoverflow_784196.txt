[site]: stackoverflow
[post_id]: 784196
[parent_id]: 783198
[tags]: 
I assume from your question that a "resource" is an entity in your system that has some "tag" entities associated with it. If my assumption is correct, here's a vanilla DAO interface, let me know if this is what you're thinking: public interface ResourceDAO { void store(Resource resource); void remove(Resource resource); List findResources(QueryCriteria criteria); void addTagsToResource(Resource resource, Set tags); } The idea here is that you would implement this interface for whatever data storage mechanism you have available, and the application would access it via this interface. Instances of implementation classes would be obtained from a factory. Does this fit with what you're thinking? The other aspect of the problem you mention is having to contend with multiple different TagTypes that require different behavior depending on the type (requiring "TagValue instanceof Type" conditionals). The Visitor pattern may handle this for you in an elegant way.
