[site]: stackoverflow
[post_id]: 5153780
[parent_id]: 5066194
[tags]: 
I have solved the problem, sortof. It does give some overhead: too many records are being retrieved from the database. But only duplicates, so hopefully caching will solve most of that overhead. The query I now use is deceivingly simple. var categorieenContractenData = from c in contractenData select c.CategorieënItem; This doesn't give me a single set of CategorieItems, but a set of sets of CategorieItems, some of which can be duplicates. Then I loop through each entry with a double foreach loop, and put the items in three data structures for easy retrieval. This means that to fill each of the three dropdowns I only have to do one linq-query. I expect some real-life data in the database by the end of the week, so then I'm going to test if it's fast enough. If not, I'm going to have to make an extra list (filled by eventreceivers). Full code: private void ensureLoadData(Intermediair.IntermediairDataContext idctx) { if (dataLoaded) return; meldingtypes = new SortedList (); categorieen = new SortedList >(); contracten = new SortedList >>(); IQueryable contractenData = from c in (from l in idctx.Locaties where l.Id == selectedLocatieId select l ).SingleOrDefault().ContractenItem select c; var categorieenContractenData = from c in contractenData select c.CategorieënItem; foreach (EntitySet categorieenPerContract in categorieenContractenData) { foreach (Intermediair.CategorieënItem categorie in categorieenPerContract) { if (!meldingtypes.ContainsKey(categorie.Meldingtype.Titel)) { meldingtypes.Add(categorie.Meldingtype.Titel, categorie.Meldingtype.Id); categorieen.Add(categorie.Meldingtype.Id, new SortedList ()); contracten.Add(categorie.Meldingtype.Id, new SortedList >()); } if (!categorieen[categorie.Meldingtype.Id].ContainsKey(categorie.Titel)) { categorieen[categorie.Meldingtype.Id].Add(categorie.Titel, categorie.Id); contracten[categorie.Meldingtype.Id].Add(categorie.Id, new SortedList ()); foreach (Intermediair.ContractenItem contract in categorie.Contract) { contracten[categorie.Meldingtype.Id][categorie.Id].Add(contract.Titel, contract.Id); } } } } dataLoaded = true; }
