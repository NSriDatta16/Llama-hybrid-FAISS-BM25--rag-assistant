[site]: stackoverflow
[post_id]: 3746742
[parent_id]: 
[tags]: 
Trying to count instances of deriving classes, type_id doesn't work

I want to count all the instances of derivers from my class, I'm trying to do it like so: .h file: #ifndef _Parant #define _Parant #include class Parant { public: Parant(); virtual ~Parant(); static void PrintInstances(); private: static void AddInstance(const char* typeName); static std::map InstanceCounter; }; #endif .cpp file: #include "Parant.h" #include #include using namespace std; Parant::Parant() { AddInstance(typeid(this).raw_name()); } Parant::~Parant() { } std::map Parant::InstanceCounter; void Parant::AddInstance(const char* typeName) { InstanceCounter[typeName]++; } void Parant::PrintInstances() { for(map ::iterator i = InstanceCounter.begin(); i != InstanceCounter.end(); i++) { cout first second I have two inheritors that look like this (the cpp contains empty implementations): #pragma once #include "parant.h" class ChildA : public Parant { public: ChildA(void); virtual ~ChildA(void); }; and this is the main function: int main() { ChildA a; ChildB b; ChildA a1; Parant::PrintInstances(); .... The result I get is: typename: .PAVParant@@ ;; count: 3 Why doesn't it work? I changed it to AddInstance(typeid(*this).raw_name()); of course it still doesn't work, though now I understand why... can I get it to work?
