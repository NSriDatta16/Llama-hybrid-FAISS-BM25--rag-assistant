[site]: stackoverflow
[post_id]: 4918236
[parent_id]: 4918144
[tags]: 
I can think of two approaches. Firstly, have each constructor for a complex instruction store its address in a set, and check this before casting. Secondly, if you can define youir own allocator for all the objects, and store the necessary tag field before the object. I've seen both approaches used very sucessfully in production code. Here's the set approach: #include #include // Can't be touched! struct simple_instr { }; struct ComplexInstruction : simple_instr { ComplexInstruction(const simple_instr& simple) ; ~ComplexInstruction(); bool isHead; bool isTail; bool isPreHeader; }; std::set complexInstructions; ComplexInstruction::ComplexInstruction(const simple_instr& simple) : simple_instr(simple) { complexInstructions.insert(this); } ComplexInstruction::~ComplexInstruction() { complexInstructions.erase(this); } ComplexInstruction* tryCast(simple_instr* instr) { ComplexInstruction* ret = 0; if (complexInstructions.find(instr) != complexInstructions.end()) ret = static_cast (instr); return ret; } int test() { simple_instr si; ComplexInstruction* siCast = tryCast(&si); assert(!siCast); ComplexInstruction ci(si); ComplexInstruction* ciCast = tryCast(&ci); assert(ciCast); return 0; } The allocator approach is on these lines: enum InstructionType { eSimple, eComplex } ; simple_instr* createSimple() { // Highly naive - MUST make sure on alignment. size_t storage = sizeof(InstructionType) + sizeof(simple_instr); void* raw = malloc(storage); InstructionType* header = reinterpret_cast (raw); *header = eSimple; simple_instr* ret = reinterpret_cast (header + 1); return ret; } Add your own code for the Complex, and make sure to add corresponding destroyers. Just thought of another possible approach. Perhaps too obvious and you have already considered this, but is there any value you can use for simple_instr to flag that it is really complex? If so, you can write: ComplexInstruction* tryCast(simple_instr* instr) { ComplexInstruction* ret = 0; if (hasComplexFlag(instr)) ret = static_cast (instr); return ret; }
