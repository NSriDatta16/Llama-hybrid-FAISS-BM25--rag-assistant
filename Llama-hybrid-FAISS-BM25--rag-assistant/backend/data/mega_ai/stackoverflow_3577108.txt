[site]: stackoverflow
[post_id]: 3577108
[parent_id]: 1319891
[tags]: 
The J programming language facilitates programs such as moving average. Indeed, there are fewer characters in (+/ % #)\ than in their label, 'moving average.' For the values specified in this question (including the name 'values') here is a straightforward way to code this: values=: 2 4 7 6 3 8 12 9 4 1 4 (+/ % #)\ values 4.75 5 6 7.25 8 8.25 6.5 We can describe this by using labels for components. periods=: 4 average=: +/ % # moving=: \ periods average moving values 4.75 5 6 7.25 8 8.25 6.5 Both examples use exactly the same program. The only difference is the use of more names in the second form. Such names can help readers who don't know the J primaries. Let's look a bit further into what's going on in the subprogram, average . +/ denotes summation (Σ) and % denotes division (like the classical sign ÷). Calculating a tally (count) of items is done by # . The overall program, then, is the sum of values divided by the tally of values: +/ % # The result of the moving-average calculation written here does not include the leading zeros expected in the original question. Those zeros are arguably not part of the intended calculation. The technique used here is called tacit programming. It is pretty much the same as the point-free style of functional programming.
