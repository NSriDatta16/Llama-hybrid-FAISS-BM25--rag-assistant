[site]: stackoverflow
[post_id]: 2309563
[parent_id]: 2309441
[tags]: 
Imagine stack as void* stack = malloc(1.000.000); Now, this memory block is managed internally by the compiler and the CPU. It is a shared piece of memory. Every function can use it to store temporary objects there. That's called automatic storage . You cannot delete parts of that memory because its purpose is to be used again again. If you explicitly delete memory, that memory returns back to the system, and you don't want that to happen in a shared memory. In a way, automatic objects are also get deleted . When an object gets out of scope the compiler places an invisible call to object's destructor and the memory is available again.
