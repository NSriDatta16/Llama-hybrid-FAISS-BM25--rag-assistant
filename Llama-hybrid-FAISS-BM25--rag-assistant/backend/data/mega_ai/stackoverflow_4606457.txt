[site]: stackoverflow
[post_id]: 4606457
[parent_id]: 1139098
[tags]: 
I just implemented a TCP-MD5 connection class in Ruby, and thought this code snippet might save anyone else the effort (at least anyone who is doing it on Linux, where the facility is undocumented). This was just from looking at headers and experimenting; hopefully the Ruby isn't too scary for people writing in other languages. class TCPMD5Socket TCP_MD5SIG_MAXKEYLEN family = Socket.const_get(IPAddr.new(host).ipv4? ? "AF_INET" : "AF_INET6") super(family, Socket::SOCK_STREAM, 0) # struct tcp_md5sig { # struct __kernel_sockaddr_storage tcpm_addr; /* address associated */ # __u16 __tcpm_pad1; /* zero */ # __u16 tcpm_keylen; /* key length */ # __u32 __tcpm_pad2; /* zero */ # __u8 tcpm_key[TCP_MD5SIG_MAXKEYLEN]; /* key (binary) */ # }; tcp_md5sig_buffer = [ Socket.pack_sockaddr_in(port, host), 0, password.length, 0, password ].pack("a128SSLa#{TCP_MD5SIG_MAXKEYLEN}") setsockopt(IPPROTO_TCP, TCP_MD5SIG, tcp_md5sig_buffer) connect(Socket.pack_sockaddr_in(port, host)) end end This won't work on anything but Linux 2.6.20 onwards, but at least if you're on FreeBSD instead, it's described in a man page .
