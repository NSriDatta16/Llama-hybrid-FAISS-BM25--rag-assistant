[site]: stackoverflow
[post_id]: 5669733
[parent_id]: 5666429
[tags]: 
If I were you, I would bring the logic for the platform out, and store it in a class. (Ideally you would do this for the birdie object as well). I have created an example below. The movieclips on the stage should extend Platform rather than MovieClip so they invoke the methods at the bottom. // Use vectors if you know all the items are going to be the same type var platforms:Vector. = new []; for (var c:int = numChildren - 1; c >= 0; c--){ var child:DisplayObject = getChildAt(c); // You shouldn't check against names (as per the original post). Because // names should be unique if (child is Platform){ platforms.push(child); // This could be random so each platform has a different range // This means platform 1 could go from y 30 to y 400, platform 2 // could go from y 60 to y 200, etc child.setRange(25, 400); } } this.addEventListener(Event.ENTER_FRAME, gameLoop); // Have an overall game loop function gameLoop(e:Event):void { // Loop over the platforms platforms.forEach(function(item:Platform, i:int, a:Vector. ):void { // Hit test function in the class means you only have to pass in one mc // rather than the points and a boolean if(item.hitTest(birdie)) { birdtelleryvertrager=0; birdtellery = 0; birdie.y-=14; } // Removed the movement logic, this should be kept out of the game loop // plus how much better does this read? item.move(); }); } Then in a class location somewhere, like in a folder game/activeObjects // A class for the platform stored else where package game.activeObjects { import flash.display.MovieClip; /** * */ public class Platform extends MovieClip { private const SPEED:Number = 2; private var _direction:int = 1; private var _minimumHeight:Number = 25; private var _maximumHeight:Number = 350; public function Platform() { } public function setRange(minimumHeight:Number, maximumHeight:Number) { _minimumHeight = minimumHeight; _maximumHeight = maximumHeight; } public function move():void { this.y += SPEED * _direction; if(this.y = _maximumHeight) { _direction = -1; } } public function hitTest(mc:MovieClip):Boolean { return hitTestPoint(mc.x,mc.y,true); } } }
