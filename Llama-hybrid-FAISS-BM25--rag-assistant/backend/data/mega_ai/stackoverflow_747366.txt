[site]: stackoverflow
[post_id]: 747366
[parent_id]: 718887
[tags]: 
When you use a projection, the return type becomes Object or Object[] instead of the criteria type. You have to use a transformer. Here is a simple ResultTransformer: private class ProjectionTransformer implements ResultTransformer { private String[] propertysList; private Class classObj; /** * @param propertysList */ public ProjectionTransformer(String[] propertysList) { this.classObj = persistentClass; this.propertysList = propertysList; } /** * @param classObj * @param propertysList */ public ProjectionTransformer(Class classObj, String[] propertysList) { this.classObj = classObj; this.propertysList = propertysList; } @SuppressWarnings("unchecked") public List transformList(List arg0) { return arg0; } public Object transformTuple(Object[] resultValues, String[] arg1) { Object retVal = null; try { retVal = Class.forName(classObj.getName()).newInstance(); int dot = -1; for (int i = 0; i 0) { propertysList[i] = propertysList[i].substring(0, dot); } PropertyUtils.setProperty(retVal, propertysList[i], resultValues[i]); } } catch (Exception e) {// convert message into a runtimeException, don't need to catch throw new RuntimeException(e); } return retVal; } } Here's how you use it: ProjectionList pl = (...) String[] projection = new String[]{"Id","Description","Bid.Amount"}; crit.setProjection(pl).setResultTransformer(new ProjectionTransformer(projection)); I have not tested it for relations (eg: Bid.Amount).
