[site]: stackoverflow
[post_id]: 2716854
[parent_id]: 2716710
[tags]: 
What you describe is effectively memoization . Most common functions can be memoized by defining a decorator. A (overly simplified) example: def memoized(f): cache={} def memo(*args): if args in cache: return cache[args] else: ret=f(*args) cache[args]=ret return ret return memo @memoized def time_consuming_method(): # lots_of_computing_time to come up with the_result return the_result Edit: From Mike Graham's comment and the OP's update, it is now clear that values need to be cached over different runs of the program. This can be done by using some of of persistent storage for the cache (e.g. something as simple as using Pickle or a simple text file, or maybe using a full blown database, or anything in between). The choice of which method to use depends on what the OP needs. Several other answers already give some solutions to this, so I'm not going to repeat that here.
