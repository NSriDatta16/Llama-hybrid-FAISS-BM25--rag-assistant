[site]: stackoverflow
[post_id]: 4262118
[parent_id]: 
[tags]: 
Considering Porting App from .NET to Erlang - need advice

I am looking at Erlang for a future version of a distributed soft-real-time hosted web-based telephony app (i.e. Erlang looks like absolutely the perfect choice for this kind of app). I come from a .NET background and the current version of this app uses a combination of C#, WCF and JQuery to deliver the service. I now need Erlang to allow me to add extra 9s to my up-time and to allow me to get more bang for my server bucks. Previously I'd set up a development process here combining VS.NET, GIT, TeamCity and auto-deployment of MSI files to the various environments we maintain. It's not perfect, but we're all now pretty comfortable with it. I'm wondering whether a process like we have is even appropriate for such a radically different technology stack (LYME)? I'm confident that all of the programming challenges we previously solved using .NET can be better solved in less code with Erlang, so I'm completely sold on the language choice. What I don't yet understand from reading the Pragmatic and O'Reilly books on Erlang, is how I should adapt my software engineering and application life-cycle management (ALM) processes to suit the new platform. I see that in-place code updates could make my (and my testing and ops team's) life much easier (compared to the god-awful misery of trying to deploy MSI files across a windows network) but I am not sure how things should change when I use Erlang. How would you: do continuous integration in Erlang (is it commonly used?) use it during a QA cycle (we often run concurrent topic branches using GIT, that get their own mini-QA cycle, so they all get deployed into a test environment) build and distribute your code to DEV, TEST, UAT, STAGING, and PROD environments integrate code generation phases into your build cycle (we currently use MSBUILD + T4 templates) centralize logging for a bunch of different servers (we currently use Log4Net, MSMQ, etc) do alerting with tools like SCOM determine whether someone/something has misconfigured your production servers allow production hot-fixes only after adequate QA (only by authorized personnel) profile the performance (computation and communication) of your apps interact with windows-based active directory servers I guess I need to know what worked for you and why! What tools and frameworks did you use? What did you try that failed? What would you do differently if you could start over, knowing what you know now?
