[site]: crossvalidated
[post_id]: 25509
[parent_id]: 25506
[tags]: 
I think I'm in a fairly similar place, but I'll take a stab. I started out as a sociology graduate student and, once I had completed all of the stats courses available through my department, wandered into some grad-level courses from the stats department at my university. It was a revelation; the way that the stats professors approached problems was radically different from my soc professors - much more intuitive and inspiring than what I had learned before, much less formulaic, and dependent on a lot of things that either I hadn't been taught or hadn't managed to learn in my more foundational courses. I had to teach myself a lot of things over again just to keep up, and I still worry that I haven't truly nailed those foundational concepts down. In the intervening four or five years, I've spent a great deal of time reading widely - blogs, this site, and some standout textbooks have been really helpful. But that self-learning has limits, the greatest of which isn't that I haven't sat through some lectures in school but rather that it's been four or five years since I've worked closely with somebody who actually knew any more than I did. This site is my primary source of getting my incorrect notions shot down. That scares me, to the point that I'm planning on applying to MS programs in biostats this fall - to take some interesting courses, definitely, but also because I just want somebody to run roughshod over my ideas and find out what I've really learned. In contrast, I've been teaching myself R over roughly the same period and under the same conditions. Until I helped found an R user group about a year and a half ago, I also didn't really have anyone to point out blatantly stupid constructs in my code. But I don't feel nearly the same anxiety about my code, in large part because programming ultimately comes down to a question of whether something works. I don't mean to diminish the challenges there - I've been on StackOverflow long enough to know that, for real software developers, there's a huge amount of expertise that goes into making something that's elegant, performant, maintainable, adaptable, and easy-to-use. But software is ultimately judged on how well it performs its function. As you say, statistics has almost the reverse problem - modern stats software makes it relatively easy to crank out complex models, but in many cases we don't have good systems in place for ensuring that those models are worth a damn. It's difficult to recreate many published analyses, and reproducing previously-published studies from scratch isn't as glamorous as making new discoveries (apply scare quotes as you see fit). I almost always know when my programs are junk, but I'm never entirely certain that my models are good. So... as in programming, I think self-learning is essential. But I also think it's critically important to have a mentor or peer around who will kick around ideas with you, expose you to new thinking, and kick your ass when necessary. Formal education is one way to meet people like that. Whether it's an efficient one depends more on your circumstances...
