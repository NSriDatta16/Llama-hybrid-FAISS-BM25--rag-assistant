[site]: stackoverflow
[post_id]: 5621282
[parent_id]: 
[tags]: 
Pizza, Threading, Waiting, Notifying. What does it mean?

I have two methods (in C#): List CookPizza(List ); List DeliverPizza(List ); These operations have no common objects (aside from the pizzas that are passed from one to the other), and are thread-safe. They each take several seconds to execute and they each use different resources (oven vs car). As such, I want to run them at the same time. How do I organize the threading with these constraints: I know all of the Orders at the start (say, I have 100,000 of them). An Order can consist of multiple Pizzas and I don't know how many Pizzas are in any Order until after those Pizzas are cooked. (wierd I know). Generally an Order has 1 Pizza, but there can be as many as 10. The number of active Pizzas should not generally exceed 100. This includes Pizzas freshly cooked and Pizzas being delivered. This is a soft limit, so I can exceed it some (for example, when a big Order was cooked). The hard limit is probably closer to 500. Both of the operations are more efficient when they are given a lot of work. Generally, CookPizza is most efficient when given at least 20 Orders. Deliver Pizza is most efficient when given at least 50 Pizzas. That is to say, I will see performance degrade if I give fewer items to those methods than those amounts. It's fine to use fewer items if that's all that is left. The main issue I'm stuggling with is how the methods may need to wait on each other. DeliverPizza might need to wait around for CookPizza to complete 50. CookPizza might need to wait around for DeliverPizza to reduce the number of active Pizzas to 100.
