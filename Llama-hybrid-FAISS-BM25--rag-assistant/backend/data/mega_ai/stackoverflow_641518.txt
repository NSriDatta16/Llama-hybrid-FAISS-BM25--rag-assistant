[site]: stackoverflow
[post_id]: 641518
[parent_id]: 640838
[tags]: 
You can store the credentials on the machine (or transfer, use, then remove them.) You can transfer the credentials over a secure channel (e.g. using scp with non-interactive authentication e.g. key pair) so that you would not need to perform any custom encryption (only make sure that permissions are properly set to 0400 on the key file at all times, e.g. set the permissions on the master files and use scp -p ) If the above does not answer your question, please provide more specific details re. what your setup is and what you are trying to achieve. Are EC2 actions to be initiated on multiple nodes from a central location? Is SSH available between the multiple nodes and the central location? Etc. EDIT Have you considered parameterizing your AMI , requiring those who instantiate your AMI to first populate the user data ( ec2-run-instances -f user-data-file ) with their AWS keys? Your AMI can then dynamically retrieve these per-instance parameters from http://169.254.169.254/1.0/user-data . UPDATE OK, here goes a security-minded comparison of the various approaches discussed so far: Security of data when stored in the AMI user-data unencrypted low clear-text data is accessible to any user who manages to log onto the AMI and has access to telnet , curl , wget , etc. (can access clear-text http://169.254.169.254/1.0/user-data ) you are vulnerable to proxy request attacks (e.g. attacker asks the Apache that may or may not be running on the AMI to get and forward the clear-text http://169.254.169.254/1.0/user-data ) Security of data when stored in the AMI user-data and encrypted (or decryptable) with easily obtainable key low easily-obtainable key (password) may include: key hard-coded in a script inside an ABI (where the ABI can be obtained by an attacker) key hard-coded in a script on the AMI itself, where the script is readable by any user who manages to log onto the AMI any other easily obtainable information such as public keys, etc. any private key (its public key may be readily obtainable) given an easily-obtainable key (password), the same problems identified in point 1 apply, namely: the decrypted data is accessible to any user who manages to log onto the AMI and has access to telnet , curl , wget , etc. (can access clear-text http://169.254.169.254/1.0/user-data ) you are vulnerable to proxy request attacks (e.g. attacker asks the Apache that may or may not be running on the AMI to get and forward the encrypted http://169.254.169.254/1.0/user-data , ulteriorly descrypted with the easily-obtainable key) Security of data when stored in the AMI user-data and encrypted with not easily obtainable key average the encrypted data is accessible to any user who manages to log onto the AMI and has access to telnet , curl , wget , etc. (can access encrypted http://169.254.169.254/1.0/user-data ) an attempt to decrypt the encrypted data can then be made using brute-force attacks Security of data when stored on the AMI, in a secured location (no added value for it to be encrypted) higher the data is only accessible to one user, the user who requires the data in order to operate e.g. file owned by user:user with mask 0600 or 0400 attacker must be able to impersonate the particular user in order to gain access to the data additional security layers, such as denying the user direct log-on (having to pass through root for interactive impersonation) improves security So any method involving the AMI user-data is not the most secure, because gaining access to any user on the machine (weakest point) compromises the data. This could be mitigated if the S3 credentials were only required for a limited period of time (i.e. during the deployment process only), if AWS allowed you to overwrite or remove the contents of user-data when done with it (but this does not appear to be the case.) An alternative would be the creation of temporary S3 credentials for the duration of the deployment process, if possible (compromising these credentials, from user-data , after the deployment process is completed and the credentials have been invalidated with AWS, no longer poses a security threat.) If the above is not applicable (e.g. S3 credentials needed by deployed nodes indefinitely) or not possible (e.g. cannot issue temporary S3 credentials for deployment only) then the best method remains to bite the bullet and scp the credentials to the various nodes, possibly in parallel, with the correct ownership and permissions.
