[site]: datascience
[post_id]: 44697
[parent_id]: 
[tags]: 
Word classification (not text classification) using NLP

I have been trying to extract Person name and Company name out of string. But, I have been facing lot of difficulties. I have a dataset of names and a dataset of company names. In the string, I wish to classify each word as “Name”, “Company Names” or “Other”. In case classification of three classes is difficult, I can compromise on this by using POS tagger as a filter and using only nouns for “Person name” and “Company name” (and manually sift through the resultant data if necessary). Please note that I have tried several POS taggers. None of them have worked well out of the box for all (international) names and company names. (Stanford NER, NLTK, Google API or even MeaningCloud) I read through literature. I got few ideas about POS tagging. But, literally every literature out there focuses mostly on CNN at character level and I was unable to understand why that is necessary. (Please note: I can only post two links as a newbie. So, I am not able to share the links of several research papers I read. Also, I have never worked much with CNNs.) I googled “word classification” and I got almost no results. There are few results for “word clustering”. But, I felt that few algorithms may not work after trying few things. See the image below for more details. (I found CNN based character sequence stuffs instead of word classification) In the image above, I have tried two-character and three-character set. I tried to observe audio inflection patterns in the characters and then get a score based on it. But, as we can observe, there can be no hyperplane splitting the data. I have just used the ascii value of three characters from the database. For example, if database has name “Prasad”, I would convert that to “pra”, “ras”, “asa”, “sad” and then check against a database of three-character set. I would get the sum of the frequencies of these sequences from company name database and human name database, normalise, get confidence measure and then, work through this. But, this is failing badly too. For example, if the string is “Prasad is a software engineer of X”, I would wish to have the following response: (‘Prasad’, ‘name’) (‘software’, ‘other’) (‘engineer’, ‘other’) (‘X’, ‘company’) (X is a multicharacter string. Assume any single word company name) I will definitely ignore any words with less than three characters. I can understand one typical question as to why I may not consider word level n-gram. It is because, I do not have proper training data. I am not sure if relationship extraction between words can be done. Main question: Is this possible to do and get more than 80% accuracy? (with or without CNN) and how? Sub-questions: 1. Is there any tutorial for three class naive bayes classifier (for person, company, others) neatly explained with table and data as in https://www.analyticsvidhya.com/blog/2017/09/naive-bayes-explained/ ? 3. I tried phonetics and failed. I used many of the preprocessing algorithms and tried Soundex, Leveinshtein’s distance, metaphone etc as in http://home.iitk.ac.in/~ankitkr/projects/phoneme/report.pdf . They all failed badly. Is there any way to extract most important phonetics of a word? Why can’t word classification be recommended? Almost every library uses word embedding and then proceeds from there. But, why is the research so sparse on word classification (atleast in the first page of Google)? Should I proceed with text-to-speech and then using some sort of audio signatures in frequency transform? I know that it is computationally expensive. But, is this the way to go about it if we need higher accuracy? 7. Why is my three character set approach failing so badly? Is it due to false positives and false negatives? In that case, should I stick to Naive Bayes? Are there any other algorithms that I can apply? (after looking at my data, I lost all hopes of hyperplanes) Thanks for your time and consideration. References: "what machine/deep learning/ nlp techniques are used to classify a given words as name, mobile number, address, email, state, county, city etc" datascience stackexchange. (I found no answer which I understood and implemented them well. Similarly, "Appropriate algorithm for string (not document) classification?" (I was not able to figure out TF IDF approach for "Prasad is a software engineer of X") EDIT: Questions 1, 3 and 7 have been considered "solved" after checking comments of @ShamitVerma. As algorithms are of higher interest, this question has been edited.
