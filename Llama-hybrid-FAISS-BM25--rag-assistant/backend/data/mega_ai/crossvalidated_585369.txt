[site]: crossvalidated
[post_id]: 585369
[parent_id]: 566473
[tags]: 
Sir, for your use-case, you can ditch the clean CTs. You must train an object detection model, in which you'll first have to get the images marked up, i.e., draw bounding boxes around the nodules in each image, and then use this dataset to train the model. Now, a lot of this stuff can get complex very fast, so here's the clean road. Decide the training service you'll use first, i.e., if you're a developer and wish to code it up yourself, you might want to go for the tensorflow object detection api, or the Tensorflow Tflite Model Maker, depending on your use-case. If you don't have much coding experience, however, there's a simpler (yet effective) way to achieve a well performing model. I'm referencing the GCP here, short for Google Cloud Platform. It is built for similar use-cases as yours, where the person has basic knowledge about what machine learning is and what it can be used for, but can't (or don't wish to) do extensive and complex programming by themselves. Just go to the Google Cloud Console, and create a fresh project for yourself. In the search bar, search for Vertex AI. When it pops up, you can go to the Vertex Dashboard, and enable the service. Once the service is all set up, you'll see all the steps ahead pretty clearly. Create a dataset, in which you'll have to upload the images to the cloud, after which you'll be given a choice to either mark the images yourself, or schedule a labeling job (where a person will label the images for you, charging you at a pre-determined rate). Once the labeling is done, all you have to do is kick off the training process based on your desired settings. There are explanations for the fields, I guess, if you wish to modify something, although afaik the defaults are all good. Having completed the training, just deploy the model to an endpoint (single-button task, from the models page), and your model is ready to go. Cheers!
