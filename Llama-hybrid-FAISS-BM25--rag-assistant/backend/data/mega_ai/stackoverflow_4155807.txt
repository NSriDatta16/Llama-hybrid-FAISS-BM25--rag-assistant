[site]: stackoverflow
[post_id]: 4155807
[parent_id]: 
[tags]: 
Sieve of Eratosthenes in Java: A Puzzle and some optimization

I did a quick implementation of the SoE algo in Java (code at the end). The output on my dual core AMD processor is: Allocation: 31 Meat: 10140 Listing: 10171 Preparing end: 10187 The "Meat" section consumes the Maximum amount of time, as expected. One observation I had was that using Math.pow(variable, 2) is slower than (variable * variable) . I think other than the function jump, there might be other overheads. Does Math.pow(x, 2) have optimizations for powers of 2, 3 etc? I ask because there are some user contributed Java libraries out there with much faster multiplication algos than Java's native ones. Here are my questions: What arithmetic optimizations can you suggest to the Meat section? Is there any way I can avoid the modulus operator altogether? The function does not work when start == end. If I do sieve(4, 4), the returned array is of length 1: [4]. What am I doing wrong? It should return [] (basically new int(0)). What are some of the fast number/maths related Java libraries you know? Thanks for reading. Finally Here's the code I wrote: Not GangOfFour/TopCoder quality, but not too pathetic either (I hope!, and code formatting at SO is sort of....weird?): import java.util.ArrayList; import java.util.Iterator; import java.util.List; public class Sieve { public static void main(String[] args) { /* small test */ int[] primes = sieve(1, 1000000); } /** * returns an array of prime integers * in the given range * * @param start range start * @param end range end * @return */ private static int[] sieve(int start, int end) { long startTime = System.currentTimeMillis(); /* some basic range checks */ if(end runningPrime*runningPrime; runningPrime++) { for (int i = runningPrime; i Thanks for all the feedback. This is the fixed version below (until someone manages to break it again :) import java.util.ArrayList; import java.util.Iterator; import java.util.List; public class Sieve { public static void main(String[] args) { /* small test */ int[] primes = sieve(2, 5); System.out.println("Number of primes: " + primes.length); for (int i : primes) { System.out.println(i); } } /** * returns an array of prime integers * in the given range * * @param start range start * @param end range end * @return */ private static int[] sieve(int start, int end) { long startTime = System.currentTimeMillis(); /* some basic range checks */ if(end = runningPrime*runningPrime; runningPrime++) { for (int i = 0; i
