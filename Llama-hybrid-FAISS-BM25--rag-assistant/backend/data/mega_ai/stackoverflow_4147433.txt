[site]: stackoverflow
[post_id]: 4147433
[parent_id]: 
[tags]: 
NServiceBus: Message level encryption

I have the requirement that the content of all messages must be encrypted in some way. For the actual encryption, I can probably leverage the built in X.509 encryption. However, I'm wondering what the best way to do message level encryption is, without having to modify the messages themselves (so no WireEncryptedString ). I can see that the latest version in development will offer some more support for this in the form of IMutateOutgoingMessages , IMutateIncomingMessages and IMapOutgoingTransportMessages . Especially the last one is interesting as it gets passed a Stream that I'll be able to encrypt in its entirety (right?). I've seen this approach used here and he correctly mentions that there is no IMapIncomingTransportMessages , so how would I go about decrypting the encrypted message on the receiving side without modifying NServiceBus code, or is that currently the only option until that gets fleshed out? However, that's the future version of NServiceBus and I don't think it's a good idea to use that in a production scenario right now. How would I go about doing this in 2.0? To me, the best way seems to be to write a custom EncryptedSerializer that gets passed in IMessageSerializer and basically just wraps the Serialize and Deserialize methods of that IMessageSerializer . What I currently have: public class EncryptedSerializer : IMessageSerializer { [Inject] public MessageSerializer Serializer { get; set; } public IMessage[] Deserialize(System.IO.Stream stream) { // decrypt magic happens here return Serializer.Deserialize(stream); } public void Serialize(IMessage[] messages, System.IO.Stream stream) { Serializer.Serialize(messages, stream); // encrypt magic happens here } } But I can't figure out how to setup the NServiceBus configuration that it gets passed in an XmlSerializer that is correctly configured/injected as well. I've looked at the .XmlSerializer() extension method and tried to replicate that, but with no luck. And ideally, I would want to have just a IMessageSerializer instead of the concrete XML serializer, but that's of lesser concern. I use Ninject and the Ninject object builder for NServiceBus from here: gist.github.com/326321. But I'm not sure if that's important.
