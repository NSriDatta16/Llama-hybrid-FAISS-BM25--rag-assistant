[site]: stackoverflow
[post_id]: 549730
[parent_id]: 549600
[tags]: 
I see several fundamental differences between backups and version control: Backups only store the latest version, or, even if they store multiple versions, they don't store every version. A VCS does store every version, That backup version is often out of date, because backups don't record every change, while VCSs do, VCSs allow to pursue multiple alternative versions of the same change at the same time (i.e. branching). However, the single most important difference between backups and VCS is that, in a VCS, changes have meaning . In a backup, a new version is made, because some computer somewhere decided that it was x hours since the last backup; the change itself is completely meaningless . In a VCS, a new version is made, because some human decided that this version has its own meaning , its own identity, different from all the other versions. So, in a backup, all versions are equal (more precisely: they are equally meaningless), whereas in a VCS all versions are special (they have their own unique meanings). In a VCS, changes have an actual history , where one event led to another, in a backup there's just a string of unrelated events. Closely related to this, is the notion of change metadata . In a VCS, every change has an author , a timestamp and, most importantly, a commit message . This commit message records why the change was made, in other words, it records the "meaning" I wrote about in the previous paragraph. The commit history and especially the commit messages are the most important data in a VCS repository, not the actual code itself! This metadata is completely absent in a backup.
