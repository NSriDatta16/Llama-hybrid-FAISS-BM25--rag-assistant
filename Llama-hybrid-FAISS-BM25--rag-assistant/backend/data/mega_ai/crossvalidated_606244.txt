[site]: crossvalidated
[post_id]: 606244
[parent_id]: 606191
[tags]: 
It seems you have some confusions in your code and description of the algorithm. I suggest you look at wikipedia and learn the terminology therein. (e.g. "acceptance ratio", not using the Hastings ratios) Some problems with your code/attempt/proposed solution: The proposal will only give values to the right of the current position. Having a proposal that is 'close' to the target distribution is sensible in rejection sampling, but not in MC-sampling like metropolis hastings. I think you are mixing the two concepts. Step 5 computes a ratio of points, not of probabilities The histogram is not normalized, but also use some sample weights which you never explained what they were. It also plots ``accepted'' points, not all points. You are not clear about the distinction. You should plot accepted proposals and all the duplications due to rejection. The target distribution has finite support that you do not enforce. It is also not normalized (may be a problem, may not be) I have attached a simple MH implementation. Noteworhy things: Does not account for burn-in - there will be some transient in the beginning. The step length is not tuned - I don't know if it rejects too much or not. It may be inefficient. The proposal kernel (gaussian) is symmetric, so the acceptance ratio can be simplified. I kept it in the full form to make it simpler to extend the code. I suggest you take a starter code (like mine, or from somewhere else on the internet) and change some piece here, instead of implementing it from scratch the first time. MCMC is always tricky to debug, and having a working prototype to play with helps. import numpy as np import matplotlib.pyplot as plt import scipy.integrate np.random.seed(0) # define the target density def p_pdf_unnormalized(x): return np.exp(-2.475/x)/x**6 if 0
