[site]: stackoverflow
[post_id]: 253712
[parent_id]: 253587
[tags]: 
There is a different between code coverage and testing coverage. You should attempt to ensure that your code is adequately tested rather than having 100% code coverage. Consider the following code: public float reciprocal (float ex) { return (1.0 / ex) ; } If you ran one test that passed in a value of 1.0 then you would get 100% code coverage (branch and statement) with all passes. The code obviously has a defect. Measuring test coverage is more difficult and one that comes from becoming a better developer and tester. With respect to hashCode specifically, a truist would say that you should have a seperate unit test for that method. I personally would ensure that it is include in at least one unit-integration test and would not test each accessor/modifier directly. The return on your investment is often too low to justify the effort. This is assuming of course that you havea unit test that ensure you are generating the correct hash code.
