[site]: stackoverflow
[post_id]: 4118270
[parent_id]: 4060143
[tags]: 
I played around with this a bit and was not able to find the correct combination that worked with a .def file. However, I was able to forward both functions and data via the following pragmas in the source of the forwarding DLL: #pragma comment(linker,"/export:_data=org.data,DATA") #pragma comment(linker,"/export:_func=org.func") Note I had to use the decorated data and function names. Below are the files for a complete example: org.c int data = 5; int func(int a) { return a * 2; } org.def EXPORTS data DATA func fwd.c #pragma comment(linker,"/export:_data=org.data,DATA") #pragma comment(linker,"/export:_func=org.func") int func2(int a) { return a + 2; } fwd.def EXPORTS func2 example.c #include __declspec(dllimport) int data; __declspec(dllimport) int func(int a); __declspec(dllimport) int func2(int a); int main() { printf("data=%d func(5)=%d func2(5)=%d\n",data,func(5),func2(5)); return 0; } makefile all: example.exe org.dll example.exe: example.c fwd.dll cl /W4 example.c /link fwd.lib org.dll: org.c cl /LD /W4 org.c org.def fwd.dll: fwd.c cl /LD /W4 fwd.c fwd.def clean: del *.exe *.dll *.obj *.exp *.lib
