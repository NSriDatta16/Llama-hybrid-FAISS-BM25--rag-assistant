[site]: stackoverflow
[post_id]: 4890974
[parent_id]: 4517386
[tags]: 
I do something like this to download files with GWT In the server side: public static void sendFileToClient(String path, String filename, int contentLen, HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException { String ua = request.getHeader("User-Agent").toLowerCase(); boolean isIE = ((ua.indexOf("msie 6.0") != -1) || (ua .indexOf("msie 7.0") != -1)) ? true : false; String encName = URLEncoder.encode(filename, "UTF-8"); // Derived from Squirrel Mail and from // http://www.jspwiki.org/wiki/BugSSLAndIENoCacheBug if (request.isSecure()) { response.addHeader("Pragma", "no-cache"); response.addHeader("Expires", "-1"); response.addHeader("Cache-Control", "no-cache"); } else { response.addHeader("Cache-Control", "private"); response.addHeader("Pragma", "public"); } if (isIE) { response.addHeader("Content-Disposition", "attachment; filename=\"" + encName + "\""); response.addHeader("Connection", "close"); response.setContentType("application/force-download; name=\"" + encName + "\""); } else { response.addHeader("Content-Disposition", "attachment; filename=\"" + encName + "\""); response.setContentType("application/octet-stream; name=\"" + encName + "\""); if (contentLen > 0) response.setContentLength(contentLen); } try { FileInputStream zipIn = new FileInputStream(new File(path)); ServletOutputStream out = response.getOutputStream(); response.setBufferSize(8 * 1024); int bufSize = response.getBufferSize(); byte[] buffer = new byte[bufSize]; BufferedInputStream bis = new BufferedInputStream(zipIn, bufSize); int count; while ((count = bis.read(buffer, 0, bufSize)) != -1) { out.write(buffer, 0, count); } bis.close(); zipIn.close(); out.flush(); out.close(); } catch (FileNotFoundException e) { System.out.println("File not found"); } catch (IOException e) { System.out.println("IO error"); } } I have a servlet that expects for an id and then I get the related file path and I serve it to the browser with the above code. In the client side: public class DownloadIFrame extends Frame implements LoadHandler, HasLoadHandlers { public static final String DOWNLOAD_FRAME = "__gwt_downloadFrame"; public DownloadIFrame(String url) { super(); setSize("0px", "0px"); setVisible(false); RootPanel rp = RootPanel.get(DOWNLOAD_FRAME); if (rp != null) { addLoadHandler(this); rp.add(this); setUrl(url); } else openURLInNewWindow(url); } native void openURLInNewWindow(String url) /*-{ $wnd.open(url); }-*/; public HandlerRegistration addLoadHandler(LoadHandler handler) { return addHandler(handler, LoadEvent.getType()); } public void onLoad(LoadEvent event) { } } In you hosted page add this Iframe Then to download a file put something like this: btnDownload.addClickHandler(new ClickHandler() { public void onClick(ClickEvent arg0) { String url = GWT.getModuleBaseURL() + "/downloadServlet?id=[FILE_ID]"; new DownloadIFrame(url); } }); I hope this helps you. Happy coding!
