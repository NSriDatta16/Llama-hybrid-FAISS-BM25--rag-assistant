[site]: stackoverflow
[post_id]: 4468613
[parent_id]: 
[tags]: 
Rails: preserving callbacks when subclassing IntegrationTest

I have a Rails 3 app that uses subdomains to separate different use cases. Normal webapp requests go to www., mobile access goes to m., and requests for the JSON api are directed api.. My integration tests fall down these same divisions. Additionally, all of my webapp integration tests use the same setup code, the mobile integration tests use different setup code, and the api tests have their own setup steps. I want to implement a few subclasses of ActionDispatch::IntegrationTest , one for each "class" of integration test, to DRY up the code: WebappIntegrationTest These subclasses would each have setup and teardown methods that would handle preparing the test environment to run against that particular scenario. However, I still want the ability to define setup and teardown steps in each individual test class. That is to say, I want to be able to do this: class IntegrationTests::Webapp::AccountTest Each test in this class would then execute both the AccountTest setup AND the WebappIntegrationTest setup. The class-specific setups need to be optional, but the subdomain-specific setups need to execute every time, regardless of whether there is a class-specific setup defined. Here are a few approaches I have considered: I can't name both setup methods "setup" and have them both run... the AccountTest setup would clobber the WebappIntegrationTest setup. I could have WebappIntegrationTest implement setup, and then declare a new callback for AccountTest to optionally implement, call it "setup_extension"... but I don't want to change the API: I want new developers to be able to continue defining "setup" in the test files, oblivious to the fact that there is another setup being called upstream. I considered using alias_method_chain to stick the WebappIntegrationTest setup in the middle of the callback's method chain but (a) I couldn't get it to work (ruby threw and error saying it couldn't find the setup_with_x method at all), and (b) I believe that in this solution, the WebappIntegrationTest would only get called if AccountTest implemented setup, which I can't count on for all test files (though I might be wrong on this point) Hopefully that explanation is clear enough... Any thoughts on an elegant way to pull the shared setup code into the subdomain-specific base classes (with setup code that runs for every test of that type) while preserving the API (the ability for test classes to optionally implement their own method called "setup" in addition)?
