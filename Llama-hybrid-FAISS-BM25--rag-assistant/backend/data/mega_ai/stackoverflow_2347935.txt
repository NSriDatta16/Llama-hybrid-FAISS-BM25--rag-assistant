[site]: stackoverflow
[post_id]: 2347935
[parent_id]: 
[tags]: 
Microsoft Visual C# 2008 Reducing number of loaded dlls

How can I reduce the number of loaded dlls When debugging in Visual C# 2008 Express Edition? When running a visual C# project in the debugger I get an OutOfMemoryException due to fragmentation of 2GB virtual address space and we assume that the loaded dlls might be the reason for the fragmentation. Brian Rasmussen, you made my day! :) His proposal of "disabling the visual studio hosting process" solved the problem. (for more information see history of question-development below) Hi, I need two big int-arrays to be loaded in memory with ~120 million elements (~470MB) each, and both in one Visual C# project. When I'm trying to instantiate the 2nd Array I get an OutOfMemoryException. I do have enough total free memory and after doing a web-search I thought my problem is that there aren't big enough contiguous free memory blocks on my system. BUT! - when I'm instantiating only one of the arrays in one Visual C# instance and then open another Visual C# instance, the 2nd instance can instantiate an array of 470MB. (Edit for clarification: In the paragraph above I meant running it in the debugger of Visual C#) And the task-manager shows the corresponding memory usage-increase just as you would expect it. So not enough contiguous memory blocks on the whole system isn't the problem. Then I tried running a compiled executable that instantiates both arrays which works also (memory usage 1GB) Summary: OutOfMemoryException in Visual C# using two big int arrays, but running the compiled exe works (mem usage 1GB) and two separate Visual C# instances are able to find two big enough contiguous memory blocks for my big arrays, but I need one Visual C# instance to be able to provide the memory. Update: First of all special thanks to nobugz and Brian Rasmussen, I think they are spot on with their prediction that "the Fragmentation of 2GB virtual address space of the process" is the problem. Following their suggestions I used VMMap and listdlls for my short amateur-analysis and I get: * 21 dlls listed for the "standalone"-exe. (the one that works and uses 1GB of memory.) * 58 dlls listed for vshost.exe-version. (the version which is run when debugging and that throws the exception and only uses 500MB) VMMap showed me the biggest free memory blocks for the debugger version to be 262,175,167,155,108MBs. So VMMap says that there is no contiguous 500MB block and according to the info about free blocks I added ~9 smaller int-arrays which added up to more than 1,2GB memory usage and actually did work. So from that I would say that we can call "fragmentation of 2GB virtual address space" guilty. From the listdll-output I created a small spreadsheet with hex-numbers converted to decimal to check free areas between dlls and I did find big free space for the standalone version inbetween (21) dlls but not for the vshost-debugger-version (58 dlls). I'm not claiming that there can't be anything else between and I'm not really sure if what I'm doing there makes sense but it seems consistent with VMMaps analysis and it seems as if the dlls alone already fragment the memory for the debugger-version. So perhaps a solution would be if I would be able to reduce the number of dlls used by the debugger. 1. Is that possible? 2. If yes how would I do that?
