[site]: stackoverflow
[post_id]: 2293531
[parent_id]: 2289642
[tags]: 
As others have already mentioned here C++ supports more than one programming paradigm. Probably the most noticable is mixing classes and objects together with "global" functions which is easily possible within the same file and context. But in my opinion there is enough OOP paradigm in C++ to use the language to learn OOP. It is much more important to have a good guide for OOP itself. Such a guide will teach you to use the object oriented elements in C++ and how and for what purpose and it won't tell you anything about C-style functions you could also create in C++. For your decision what language to choose I'd recommend to look a bit further into the future what you actually want to do in programming. If it is web or rich UI desktop development you will have more use of Java or C#, is it rather something closer to system development, C++ might be the better choice. OOP you can learn with C++ and Java, C# or other languages as well. For me it is a bit like the question: "I want to learn how to translate texts from my native language into other languages. What second language shall I learn? Icelandic or Swahili?" For this decision it might be more important whether you hate cold or hot climates. (At least I would consider this as more important than the arguments some linguists will probably have to prefer one of the languages.) I think it is true that for instance C# will FORCE you much more than C++ to write OOP code but it does it only in terms of the language SYNTAX. But OOP is more about semantics and that is rather language independent. There is no semantic difference between sin(0.5) (a function without class context in C/C++) and Math.Sin(0.5) (a class method in C#). If you end up in C# to create lots of static classes something went wrong with learning OOP although you follow (necessarily) an object oriented syntax. So my two cents: Try to find additional programming goals you have beyond learning OOP and add these goals to your decision for the language you want to dive in. Only for learning OOP C++ as an example language is fine and some other languages as well. I need to add: I've said this from a "pragmatic" viewpoint presuming that you actually want to work and to create software with what you've learned. If you have a kind of pure scientific, structural interest my arguments might be all wrong. Then maybe the purest of all OO languages (Smalltalk?, probably not C++) is the right choice, no matter who actually "speaks" this language and for what purpose.
