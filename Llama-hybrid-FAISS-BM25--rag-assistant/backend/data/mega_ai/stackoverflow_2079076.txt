[site]: stackoverflow
[post_id]: 2079076
[parent_id]: 
[tags]: 
Better way to port Java into Python?

After several hours of working on porting this program over, it appears to finally be in a working state. However, I was wondering if anyone knew of a better way or more complete way of porting Java servlets over into Python. The beginning of the Python script contains a lot of support code to make it easier to port the program line-by-line directly into Python. Does anyone know of a better way to go about this? Java // -------------------------------------------------------- // File: Hello.java // Description: A simple "Hello World" servlet // -------------------------------------------------------- import javax.servlet.*; import javax.servlet.http.*; import java.io.*; import java.util.*; import sun.servlet.http.HttpServer; public class Hello extends HttpServlet { int count; public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // setup response response.setContentType("text/html"); PrintWriter out = response.getWriter(); // send response out.println(" "); out.println(" Stephen Paul Chappell (SPC) "); out.println(" :) (ZTD) Zero The Dragon :( "); String name = request.getParameter("NAME"); if (name != null && !name.equals("")) { out.println(" Hello, " + name + " "); } else { out.println(); if (name != null && name.equals("")) { out.println(" You didn't enter your name. Please enter your name. "); } else { out.println(" What's your name? "); } out.println(" "); out.println(" "); out.println(); out.println(" Enter your name: "); out.println(" "); out.println(); out.println(" "); } String color = request.getParameter("FAVCOLOR"); if (color != null) { out.println(" Why, " + color + " is my favorite color too! "); } count++; out.println("This page has been hit " + count + " time(s)."); out.print(" "); } // start web server public static void main(String[] args) throws Exception { HttpServer.main(args); } } Python import urllib.parse import http.server import cgitb import sys import io ################################################################################ class HttpServlet(http.server.BaseHTTPRequestHandler): __debug = False @staticmethod def debug(value): HttpServlet.__debug = value def do_GET(self): if self.path == '/favicon.ico': self.send_error(404) return request = HttpServletRequest(self.path) response = HttpServletResponse() try: self.service(request, response) except Exception: if HttpServlet.__debug: self.send_response(500) self.send_header('Content-type', 'text/html') self.end_headers() klass, value, trace = sys.exc_info() html = cgitb.html((klass, value, trace.tb_next)) self.wfile.write(html.encode()) else: self.send_error(500) else: self.send_response(200) self.send_header('Content-type', response._type) self.end_headers() self.wfile.write(response._value) def service(self, request, response): raise NotImplementedError() ################################################################################ class HttpServletRequest: def __init__(self, path): query = urllib.parse.urlparse(path).query self.__dict = urllib.parse.parse_qs(query, True) def getParameter(self, name): return self.__dict.get(name, [None])[0] ################################################################################ class HttpServletResponse: def __init__(self): self.__content_type = 'text/plain' self.__print_writer = PrintWriter() def setContentType(self, content_type): self.__content_type = content_type def getWriter(self): return self.__print_writer @property def _type(self): return self.__content_type @property def _value(self): return self.__print_writer.getvalue().encode() ################################################################################ class PrintWriter(io.StringIO): print = io.StringIO.write def println(self, string): self.write(string + '\r\n') ################################################################################ class HttpServer(http.server.HTTPServer): @staticmethod def main(RequestHandlerClass, port=80): server = HttpServer(('', port), RequestHandlerClass) socket = server.socket.getsockname() print('Serving HTTP on', socket[0], 'port', socket[1], '...') try: server.serve_forever() except KeyboardInterrupt: print('Keyboard interrupt received: EXITING') server.server_close() ################################################################################ ################################################################################ ## --------------------------------------------------------- ## File: Hello.py ## Description: A simple "Hello World" servlet ## --------------------------------------------------------- class Hello(HttpServlet): count = 0 def service(self, request, response): # Setup for a response. response.setContentType('text/html') out = response.getWriter() # Send an appropriate response. out.println('''\ Java to Python servlet Stephen Paul Chappell (SPC) :) (ZTD) Zero The Dragon :( ''') name = request.getParameter('NAME') if name: out.println('''\ Hello, {}! '''.format(name)) else: if name == '': out.println('''\ You did not enter your name. Please enter your name. ''') else: out.println('''\ What is your name? ''') out.println('''\ About Yourself Enter your name: ''') color = request.getParameter('FAVCOLOR') if color: out.println('''\ Why, {} is my favorite color too! '''.format(color)) Hello.count += 1 out.println('''\ This page has been hit {} times.'''.format(Hello.count)) out.print('''\ ''') # Start the web server. def main(): HttpServlet.debug(True) HttpServer.main(Hello) ################################################################################ if __name__ == '__main__': main() In case anyone is wondering what the purpose of this project is, the original Java program was given as an introductory exercise in freshman-level computer-science course. Since then, it has been about six years since I have worked with Java and am going through the old programs, porting them over to Python for the challenge and learning experience. Porting the servlets are presenting extra difficulties.
