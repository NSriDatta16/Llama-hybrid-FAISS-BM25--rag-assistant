[site]: stackoverflow
[post_id]: 5122995
[parent_id]: 5122864
[tags]: 
I think methods such as GoodValues and BadValues make good sense, but I wouldn't implement them as extension methods to IEnumerable types because they don't make sense for all IEnumerable types. So I would make a quick little class (maybe called GoodBadList) that inherits from IEnumerable and offers the two methods I mentioned. Those methods would, for each value in the list, look both forward and backward until a transition is found, determine which direction the transition is in and use that to either return or reject that value in the resulting list. I know it's fun to write elegant LINQ statements, but it's more fun to have an entire elegant solution which includes writing a class when it makes sense. This GoodBadList is a concept that seems to exist in your domain, so I would put it in bits. What do you think?
