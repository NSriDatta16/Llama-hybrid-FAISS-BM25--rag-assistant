[site]: stackoverflow
[post_id]: 4395051
[parent_id]: 4394932
[tags]: 
The way you've written your stream read -- it could result in a partial read, since just one call to read is not guaranteed to return all the bytes that the stream may eventually produce. Try Apache commons IOUtils#toByteArray(InputStream), or include your own simple utility method: public static final byte[] readBytes(final InputStream is) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream(Short.MAX_VALUE); byte[] b = new byte[Short.MAX_VALUE]; int len = 0; while ((len = is.read(b)) != -1) { baos.write(b, 0, len); } return baos.toByteArray(); } As for your organizational concerns... there is no simple+reliable way to to get a "directory listing" of the contents of a package. Packages may be defined across multiple classpath entries, spanning JARs and folders and even network resources. If the packages in question are contained within a single JAR, you could consider consider something like what is described here: http://www.rgagnon.com/javadetails/java-0513.html A more reliable and portable way might be to maintain a text file that contains a list of the images to load. Load the list as a resource, then use the list to loop and load all images listed in the text file.
