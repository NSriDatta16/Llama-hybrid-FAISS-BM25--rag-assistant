[site]: stackoverflow
[post_id]: 292970
[parent_id]: 265213
[tags]: 
One thing on Sony Ericsson. Don't give them so much credit. They take (image_width x image_height x bytes_per_pixel) of memory as well when loading images. From the SE J2ME developer doc, " All images are stored in phone memory in a 16-bit per pixel RGB format, possibly with a 1-bit or 8-bit per pixel alpha channel. " So, at least 2 bytes. The difference is that Sony Ericsson phones (I can't speak for Nokia) have a separate memory block for images that gets filled first before loading images in the heap (you can see this by wrapping the load with Runtime.getRuntime().freeMemory()...the heap size will increase by only a couple of bytes, which is the size of the new Object). This isn't defending Motorola's as I certain had my troubles porting from SE phones to Motorola's, but it's not because SE was able to figure out a way to store images in heap in a much more optimized way. Motorola just stores everything in the heap, and that's why you run out faster. The smaller images is a good idea, not only during the decoder part, but from a heap fragmentation point of view. It will allow the images to fit in smaller blocks of memory instead of a large continuous block.
