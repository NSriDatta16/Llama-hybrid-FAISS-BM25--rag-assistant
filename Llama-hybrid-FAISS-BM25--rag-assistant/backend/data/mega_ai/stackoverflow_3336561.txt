[site]: stackoverflow
[post_id]: 3336561
[parent_id]: 
[tags]: 
ruby on rails architecture model, view and DTOs

I am a .NET guy and I try to understand the concept behind Rails and its Active Record stuff. As I can see in all examples they always assume that your view is a 1:1 copy of your model. In reality frequently that´s not true. Like a view that holds a customer and contact person(s) that are not related to that customer. User should be able to edit both (customer and contact person(s) in one view e.g.) In every example I see that they bind the view directly to ONE activerecord object. All the stuff like the model, validation and so on bind to one object that is mapped directly to the database. Could a Rails guy explain what´s an elegant way to work with Active Record in real life applications in complex model situations? In the first moment I was thinking about DTOs but I could not imagine that this is the way to go with Rails.
