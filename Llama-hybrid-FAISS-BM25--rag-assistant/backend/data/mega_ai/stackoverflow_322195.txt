[site]: stackoverflow
[post_id]: 322195
[parent_id]: 321787
[tags]: 
Just use NIO. It's designed for this specific purpose. ByteBuffer and IntBuffer will do what you need quickly, efficiently, and elegantly. It'll handle big/little endian conversion, "direct" buffers for high performance IO, and you can even mix data types into the byte buffer. Convert integers into bytes: ByteBuffer bbuffer = ByteBuffer.allocate(4*theIntArray.length); IntBuffer ibuffer = bbuffer.asIntBuffer(); //wrapper--doesn't allocate more memory ibuffer.put(theIntArray); //add your int's here; can use //array if you want byte[] rawBytes = bbuffer.array(); //returns array backed by bbuffer-- //i.e. *doesn't* allocate more memory Convert bytes into integers: ByteBuffer bbuffer = ByteBuffer.wrap(rawBytes); IntBuffer ibuffer = bbuffer.asIntBuffer(); while(ibuffer.hasRemaining()) System.out.println(ibuffer.get()); //also has bulk operators
