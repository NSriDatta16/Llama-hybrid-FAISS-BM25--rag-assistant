[site]: stackoverflow
[post_id]: 4134960
[parent_id]: 4134482
[tags]: 
The logically simplest way taking your question as given would just be: StringBuffer which; if (category.equals("game")) which=gameList; else if (category.equals("apps")) which=appList; else if (category.equals("movie")) which=movieList; else ... some kind of error handling ... which.delete(); As Jon Skeet noted, if the list is big or dynamic you probably want to use a map rather than an if/else/if. That said, I'd encourage you to use integer constant or an enum rather than a String. Like: enum ListType {GAME, APP, MOVIE}; void deleteList(ListType category) { if (category==GAME) ... etc ... In this simple example, if this is all you'd ever do with it, it wouldn't matter much. But I'm working on a system now that uses String tokens for this sort of thing all over the place, and it creates a lot of problems. Suppose you call the function and by mistake you pass in "app" instead of "apps", or "Game" instead of "game". Or maybe you're thinking you added handling for "song" yesterday but in fact you went to lunch instead. This will successfully compile, and you won't have any clue that there's a problem until run-time. If the program does not throw an error on an invalid value but instead takes some default action, you could have a bug that's difficult to track down. But with an enum, if you mis-spell the name or try to use one that isn't defined, the compiler will immediately alert you to the error. Suppose that some functions take special action for some of these options but not others. Like you find yourself writing if (category.equals("app")) getSpaceRequirements(); and that sort of thing. Then someone reading the program sees a reference to "app" here, a reference to "game" 20 lines later, etc. It could be difficult to determine what all the possible values are. Any given function might not explicitly reference them all. But with an enum, they're all neatly in one place.
