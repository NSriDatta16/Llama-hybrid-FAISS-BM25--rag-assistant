[site]: crossvalidated
[post_id]: 230764
[parent_id]: 
[tags]: 
Need help with difficult multi-objective regression problem

In short: I'm trying to find out how one goes about solving for regression coefficients when the problem has the following setup: There is a date column, d , which groups the records. Each record is the representation of a custom manufacturing job, and is described by two independent variables, x and y , both discrete and bounded on some interval $[1, n]$. So there are a finite number of different 'custom' configurations a job may take on. x and y , along with an error term $\epsilon$, determine completely the job's completion time, t . Unfortunately in the dataset we do not have job-level time data. Instead, we have the total number of man-hours needed to complete all the jobs that were worked each day. The problem is to solve for the regression coeffecients for x and y , such that the estimated time for any one particular job can be found, while only having available the daily total man-hours. I generated some toy data to illustrate- d is the 'date' column; x and y are sampled with replacement from 1:10 and 10:100 , respectively; t , which is not actually available in the real dataset, but which I included to hopefully make things clearer, is calculated as: $t = 5x + .8y + N(0, 1)$ And then t_agg , which is the only thing we'd have in the actual dataset, is the sum of all the t values for each value of d . Here are the first few rows: d x y t t_agg 1 1 3 68 68.9 217.0 2 1 4 25 40.8 217.0 3 1 7 50 74.7 217.0 4 1 2 29 32.6 217.0 5 2 9 68 98.8 296.5 6 2 1 47 44.1 296.5 7 2 4 24 40.8 296.5 8 2 6 12 40.0 296.5 9 2 4 64 72.8 296.5 10 3 4 56 64.0 163.2 11 3 1 92 80.1 163.2 12 3 1 17 19.1 163.2 13 4 4 20 34.5 212.2 14 4 1 57 51.6 212.2 15 4 8 19 57.4 212.2 16 4 8 34 68.7 212.2 So, if we only had d , x , y , and t_agg , how could we go about configuring this regression, with one added catch : Setting aside the linearity of this example dataset, where we can simply sum the x and y values for each day, then regress against t_agg - I instead have a dataset that is not quite so easy to work with in this way. Instead of: $t=5x+.8y+N(0,1)$ My data is approximated more closely by the following: $t=Factor(x) + (Factor(x):y) + \epsilon$ x and y are both still left-bounded and discrete, and follow approximately the same ranges (still 1:10 for x , y is more like 10:500), but there is non-linearity that prevents me from simply summing the values for each day and regressing against the total time. My approach right now is to aggregate the date column, say by quarters (Q1, Q2, etc.), and then one-hot encode every job in the dataset (2-3 years total) according to its level in x , so that there would be 10 different 'categories' of jobs. Each job would retain its y field, which is a covariate and not a factor. By decreasing the granularity of the date field, I'd hope to have enough records in each subgroup that every level in x would be represented multiple times, and with differing values of y . Having the set of subgroups, along with one-hot encoded x levels, would then allow me to sum through each subgroup in the same way we could sum using the linear toy dataset above (no?) If the columns were x1 , x2 , x3 , and so on, followed by x1y , x2y , x3y , etc, then it seems each 'job type' (i.e. levels of x ) would have its own coefficients for both the level of x itself, and the coefficient to multiply y by for each level of x . If that's the case, am I wrong to think that I could sum and regress against the sum of all man-hours per subgroup to get very coarse estimates for the coefficients? From there my hope was to use these estimates and their standard errors to set priors for coefficient estimates and run MCMC regressions at the monthly level, and maybe even at the daily level. This is what I meant by 'multi-objective' in the title; I'm not sure if I've used it correctly, but it seems to me a matter of making the coefficients 'fit' as well as they can across multiple levels of aggregation, so that the error must be minimized according to several different functions at once. Any guidance or corrections to my approach would be much appreciated, thank you.
