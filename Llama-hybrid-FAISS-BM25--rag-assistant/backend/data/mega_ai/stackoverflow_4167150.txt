[site]: stackoverflow
[post_id]: 4167150
[parent_id]: 
[tags]: 
In the Concurrency Runtime, can I use parallel_invoke or task_group with non-const function objects?

I'm using the Concurrency Runtime with Visual C++ 2010, and am interested in the capabilities of parallel_invoke and task_group (parts of the PPL or Parallel Patterns Library ). I'd like to be able to start two parallel actions via function objects (rather than lambda functions or function pointers), but I can't get the code to compile, because of an error: error C3848: expression having type 'const C' would lose some const-volatile qualifiers in order to call 'void C::operator ()(void)' But if I make the C::operator()() const, then I lose a lot of the benefits of a function object, namely, that its state is mutable and maintained internally between calls. Am I missing something here? Is there a way that I could invoke non-const function objects in parallel? BTW, I realize that I could use the Asynchronous Agents Library , and derive the classes from the Concurrency::agent class, but please consider that beyond the scope of this question (in part due to the lack of exception handling and cancellation options). I'm just interested in what I can do with the PPL, and while there are examples with lambda functions and function pointers, I couldn't find or create any examples with function objects that do more than a parallel "Hello World". I'm looking for something that really takes advantage of function objects, and, if possible, also concurrent containers.
