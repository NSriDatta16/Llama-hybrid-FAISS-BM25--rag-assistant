[site]: stackoverflow
[post_id]: 883731
[parent_id]: 883644
[tags]: 
Assuming Linux/Unix like system ... I've found out that it's much easier and beneficial to go the other way round. Try using 'simple' editor like vim and for C++ just Makefiles to compile using gcc and linker. I've started using that at uni and 5> years and couple of companies later it's still the easiest and most flexible option because you have quick access to all settings in one simple file. Even when you switch to IDE later on you will know what to look for if things don't work because you will know the basics for example what are the steps to go from source file to object file and link to binary executable, how to handle libraries and so on. These things change between IDE's and are often complicated to trace and modify. You can start with simple makefile and keep improving it over years. It's easy to copy it to your project directory and update file names - for C++ the compilation process will be fairly standard between projects. I highly encourage you to consider this option. I've learned a lot doing it that way and you have a backup plan when you IDE just wouldn't work. I keep one generic Makefile that compiles main.cpp into executable. To compile something quickly I just copy it into directory and make . My current workflow is to open all files in project directory (flat file system) with vim ( vim *.cpp *.hpp ), edit, compile with :mak (or :mak -C .. debug ) from within vim to invoke the Makefile stored in relevant directory, after compiling it'll jump to first warning/error, use :cn to go over errors, fix what's needed, open errors in separate window with :cope (close with :clo or unload file with :bd , jump between split windows with ctrl-w ctrl-w or ctrl-ww - hold ctrl and press w twice) ... Vim has syntax highlighting millions of other features, I'm using tags (or ctags) to navigate code from within vim and so on.
