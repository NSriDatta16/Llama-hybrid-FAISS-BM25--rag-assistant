[site]: stackoverflow
[post_id]: 3066180
[parent_id]: 3062310
[tags]: 
Using nodes for custom data has quite some additional benefits besides easy edit/update/delete functionality: possible categorization via taxonomy implicit 'ownership' via author tracking implicit tracking of creation/modification time basic access control by default, expandable by a huge selection of modules flexible query generation/listing/filtering via views possible ad hoc extensions/annotations via CCK fields possible definition of workflows, actions and the like a huge number of hooks to programmatically intercept/adjust almost every usage aspect/scenario commenting, voting, rating and tons of other functionality provided by all contributed modules that work on/with nodes ... Given all this, I'd say you need a very good reason to not use nodes to store data in Drupal. Nodes are simply the fundamental building blocks for just about everything in the Drupal ecosystem, and the overhead of removing some unwanted default 'features' seems pretty small in comparison to the gains. That said, one possible reason/argument to handle data separate from the node system might be if that data is directly aimed at annotating other nodes (think taxonomy). But since you can easily reference nodes from other nodes (with lots of different options on how to do this), the argument is not to strong. Another (much stronger) argument would be data integrity - Drupal is not very strong (to put it politely) concerning normalized, relational data storage, referential integrity, transaction handling and other related topics. If you have requirements in that direction, you might have no choice but to skip the node concept and create and maintain a separate data island within the system on your own.
