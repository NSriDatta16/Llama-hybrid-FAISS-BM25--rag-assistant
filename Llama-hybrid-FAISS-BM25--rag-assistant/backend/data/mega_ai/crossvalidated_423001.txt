[site]: crossvalidated
[post_id]: 423001
[parent_id]: 422996
[tags]: 
The easiest way to implement model like y ~ m1*x + m2*x*microbiome + b would be to replace microbiome with a dense neural network y ~ m1*x + m2*x*nn(microbiome) + b so that the neural network nn would reduce dimensionality (to single or multiple dimensions, depending of number of units in the output layer) and do the feature engineering for you. The nice part is that it would let you to keep the assumed form of the model, but the neural network would deal with the extra features for you. This can be easily done in frameworks like Keras, that are designed to deal with large datasets and scale nicely. In Keras, this would translate to something like the model definition below. To understand the code, you would probably need to dive deeper into Keras, but hopefully many tutorials are available online. from keras.models import Model from keras.layers import Input, Dense, multiply, concatenate x_inp = Input(shape=(1,)) microbiome_inp = Input(shape=(k,)) # 3-layer neural network nn = Dense(200, activation='relu')(microbiome_inp) nn = Dense(50, activation='relu')(nn) nn = Dense(1)(nn) # x*nn(microbiome) mul = multiply([x_inp, nn]) # m1*x + m2*x*nn(microbiome) + b conc = concatenate([x_inp, mul]) out = Dense(1)(conc) model = Model(inputs=[x_inp, microbiome_inp], outputs=out) model.compile(optimizer='adam', loss='mean_squared_error') model.fit([x, microbiome], y)
