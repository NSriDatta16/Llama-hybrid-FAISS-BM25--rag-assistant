[site]: stackoverflow
[post_id]: 2042012
[parent_id]: 1995144
[tags]: 
I'm posting this as another answer instead of adding this to my other post because it approaches the problem from a different angle. Here I am assuming that all your mp3s are in the same folder. The problem you are facing is due to sloppy coding on the part of whoever made the media-player thing that wordpress uses. What happens is that the player runs on the visiting user's machine, and actually downloads the mp3 and plays it locally. The problem arises because the player does not provide any useful headers at all: the useragent is that of your browser, the referrer is blank, etc. As such, it is completely impossible to tell if the request is coming from the player, or from a browser that clicked your link in an audio search engine. Really, the only way to protect your mp3s from being indexed is to change the link as often as possible. Which is precisely the plan. In a nutshell, here is what we are going to do: change the path to your mp3s. This stays SECRET. create a script to proxy for the mp3s, which requires a valid key which changes every hour change all your uses of the mp3 player to use the mp3 proxy script but with a placeholder key create a script to proxy for your webserver, which replaces the key placeholder with the actual key use .htaccess to rewrite all requests to your server to use the webserver proxy script. The upshot of all of this is that your user experience will not change, but if a crawler crawls your links, they will only be valid until midnight of that day, at which point requests to that url will result in a snippy message (or even an mp3 of you asking them to please not download your stuff). Ready? OK, lets go! Step 1: First things first, make sure you renamed your mp3s folder! This will break all existing links (and failing to do this will mean all the links already crawled will remain valid). Secondly, create a robots.txt file to stop google and other search engines from indexing your mp3s folder. Now, create a file in your root directory called mp3serve.php with the following contents: What this does is it takes the filename of an MP3 and a key of some kind, and serves the file contents if the key is valid. Note that this script: makes no checks at all that $file points to what you expect it to, other than the fact that it tries to make sure it will only ever return mp3 files. does not return valid headers for mp3 files - they'll render as text in a browser. This is easy to fix but the correct header eludes me for the moment... and anyway the wordpress mp3 player doesn't care, so it's all good :) Step 2: Now for the slightly tricky part: we have to rewrite the links dynamically. The easiest way to do this is to write a "local-proxy" thing, which really is a lot easier than it sounds. What we will do is write a script that gets what your page would have outputted and corrects the mp3 links. In my example we will edit all of your articles with mp3s in them, but if you want to get fancy this is not completely necessary. First, edit all of your articles with mp3-players in them. You could automate this, but unless WP has a "find/replace in all articles" function I would advise against it for the sole reason that you might screw up and destroy your articles. In any case, edit them and replace the mp3 links in the players from /path/to/mp3s/ .mp3 to /mp3serve.php?file= &key=[{mp3_file_key}] Now, create another php script in your root directory called proxyviewer.php with the following contents: Step 3: Now for the last part: set up your .htaccess file to redirect all requests from http://yoursite/some/request/here to http://yoursite/proxyviewer.php?req=some/request/here Unfortunately I'm really not good with .htaccess files so I won't be able to give you the exact code, but I imagine it shouldn't be too hard to do. Congrats, you're done! Disclaimer: Please note that the code in here is not production-level code. First of all, I haven't tested it at all - although unless there's a typo somewhere they should all work, I would advise you to look through them carefully before going live with them. I have been fairly careful not to allow any Bad Things to happen, but it doesn't do any serious checking, and it's the wee hours of the morning here so I may have overlooked something.
