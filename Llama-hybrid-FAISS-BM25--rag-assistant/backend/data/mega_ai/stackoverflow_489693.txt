[site]: stackoverflow
[post_id]: 489693
[parent_id]: 489317
[tags]: 
This sounds like a good opportunity to do some OOP: say you have some classes for representing your items public class Item { public string Name{ get; set; } // Here put all the properties that are common to all items. } public class Cupcake : Item { // By inheriting from Item, it will have Name // along with anything else you define there public bool HasFrosting{ get; set; } // Put whatever else Cupcake needs here } public class Baloon : Item { public Color MyColor{ get; set; } } Then in your application code // From your post, I can't tell where you're getting // your items, so I'll just put a placeholder here for now. // I assume this returns all kinds of items: // Cupcakes, Baloons, and other fun stuff Item[] items = GetItemsFromSomewhere(); int cupcakeCount = GetCupcakeCount(items); ... public int GetCupcakeCount( Item[] items ) { int cupcakeCount = 0; // This is the code for checking types of items // you could use a LINQ statement or whatever you like // but i just put a foreach loop here for simplicity foreach( Item item in items ) { // Check the types of each object, if(item is Cupcake) ++cupcakeCount; } return cupcakeCount; } Even if you can do this another way, consider OOP since it seems that you need to distinguish between types of objects and compare them. This might be a good way to accurately represent your system.
