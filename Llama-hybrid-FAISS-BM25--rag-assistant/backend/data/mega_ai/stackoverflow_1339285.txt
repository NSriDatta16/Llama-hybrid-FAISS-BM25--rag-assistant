[site]: stackoverflow
[post_id]: 1339285
[parent_id]: 1339215
[tags]: 
By "go crazy" I assume you mean: >>> Game(10000) # stuff skipped RuntimeError: maximum recursion depth exceeded in cmp You could start at the bottom instead -- a crude change would be: # after defining Game() for i in range(10000): Game(i) # Now this will work: print Game(10000) This is because, if you start with a high number, you have to recurse a long way before you reach the bottom (0), so your memoization decorator doesn't help the way it should. By starting from the bottom, you ensure that every recursive call hits the dictionary of results immediately. You probably use extra space, but you don't recurse far. You can turn any recursive function into an iterative function by using a loop and a stack -- essentially running the call stack by hand. See this question or this quesstion , for example, for some discussion. There may be a more elegant loop-based solution here, but it doesn't leap out to me.
