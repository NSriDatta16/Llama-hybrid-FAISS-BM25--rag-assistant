[site]: stackoverflow
[post_id]: 3957556
[parent_id]: 3957532
[tags]: 
I love this answer from Stephan Schmidt. He clearly explains about this: http://codemonkeyism.com/java-interview-questions-mutliple-inheritance/ (link defunct). Does Java support multiple inheritance? Well, obviously Java does not have multiple inheritance in the classical sense of the word. So the right answer should be “no”, or “no, but” or “yes, but”. From there one can explore several ways. Mostly I start by asking if the Java language designers were too stupid to implement multiple inheritance? Why did the C++ guys implement it then? We mostly land at the Diamond Anti-Pattern then: In object-oriented programming languages with multiple inheritance and knowledge organization, the diamond problem is an ambiguity that arises when two classes B and C inherit from A, and class D inherits from both B and C. If a method in D calls a method defined in A (and does not override the method), and B and C have overridden that method differently, then from which class does it inherit: B, or C? The other way to explore is how Java “emulates” multiple inheritance? The answer, which might already have surfaced, ist Interfaces. We then usually discuss interfaces in Java, if, when and how the candidate has used them in the past. What are interfaces good for, does he like them? I can explore how good he is at modelling and sometimes make him draw a diagram with interfaces. We go on with problems of interfaces in Java, and what happens when two interfaces have the same static fields and a class implements both – some kind of “multiple inheritance” in Java: public interface I1 { String NAME = "codemonkeyism"; } public interface I2 { String NAME = "stephan"; } public class C implements I1, I2 { public static void main(String[] args) { System.out.println(NAME); } } Staying true, the language designer decided that this does not work in Java: C.java:3: reference to NAME is ambiguous, both variable NAME in I1 and variable NAME in I2 match System.out.println(NAME); ^ 1 error There are many more ways to explore with the candidate, e.g. what are the modifiers of interface methods. Are mixins or traits a better solution to the diamond problem than interfaces? Or are they just as bad as multiple inheritance? As I’m no longer very fond of inheritance and think most uses are a code smell, one can also discuss the down side of inheritance – tight coupling for example – with the candidate. Why? Why do I ask this question and what do I learn from it? Inheritance is a very basic concept in OO and should be understood by every Java developer. Reflection on his work and going beyond knowing the syntax is an essential trait also, therefor the multiple inheritance question. I prefer questions that spawn many opportunities to explore. The inheritance question is one of them: Mutliple inheritance, language design, code smells, solutions, interfaces, role based development.
