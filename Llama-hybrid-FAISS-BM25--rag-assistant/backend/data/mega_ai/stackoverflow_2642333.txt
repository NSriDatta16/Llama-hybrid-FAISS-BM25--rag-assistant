[site]: stackoverflow
[post_id]: 2642333
[parent_id]: 2642199
[tags]: 
Except for really simple cases (e.g. a label that shows the value of a slider) my experience has been to stay away from inter-component signal/slot connections inside Qt Designer. Rather, have the component firing the signal of interest connect to a slog defined in the top level QWidget class you're subclassing (i.e. QMainWidow , etc... let's just call it the Form class). You can also go the other way: if you have a custom signal in the Form class, you can connect it with Qt Designer to one of the public widget slots. To be specific using your example: I'm going to assume that you have subclassed QMainWindow and QGraphicsView . Let's call the subclasses RobotMainWindow and RobotView . RobotMainWindow contains the QLineEdit fields and RobotView . The way you specify RobotView in Qt Designer is to insert a QWidget and use the Promote to... feature to tell Qt that the QWidget should be replaced at compile time with your custom RobotView . Name the QLineEdit fields edit1 , edit2 ... edit6 . In the Qt Designer signal/slot editor define slots in RobotMainWindow to be called when the value in a QLineEdit changes. There are some more elegant ways of doing this, but for simplicity let's say you define 6 slots named setValue1(float) , setValue2(float) , etc. In the source code for RobotMainWindow , go declare and define these slots, such that they update your arm, shoulder, whatever. Also in the source code, define a signal valueChanged() (or multiple for each field, your choice). Have the slots you defined emit valueChanged() . Back in Qt Designer you can now link the appropriate signal from each QLineEdit to the corresponding slot in RobotMainWindow . Back in the signal/slot editor add the valueChanged() signal to the RobotMainWindow (so Qt Designer knows about it). Connect this signal to a new slot in RobotView , using the procedure above, so it can update the rendering. Repeat all of this for handling changes from RobotView to the editing fields (via RobotMainWindow . In short, I think you'll find everything more straight-forward if your route the signals through your Form subclass (which I think of as the Controller in MVC parlance).
