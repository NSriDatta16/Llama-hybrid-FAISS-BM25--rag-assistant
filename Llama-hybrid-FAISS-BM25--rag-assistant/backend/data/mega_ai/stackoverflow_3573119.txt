[site]: stackoverflow
[post_id]: 3573119
[parent_id]: 3509264
[tags]: 
The data-binding syntax has two problems: first it's a little weirder for your designer vs. using plain text, and second it requires the designer to remember to invert the "if" test in your "else" block. The first problem may annoy your designer a little, but the second problem is much more severe, because it forces your designer to think like a programmer (inverting boolean logic!) and makes every if/else block into a possible bug you need to test for after your designer hands over a template. My suggestion: use data-binding syntax, but fix the more severe problem by creating custom controls that only require data-binding test code on the If control, but not on the Else control. Sure your designers will have to type a few more characters, but the other more severe problems won't apply and your performance won't suffer as it would if you had to dynamically compile code each time your page ran. Here's an example I coded up to illustrate: protected void Page_Load(object sender, EventArgs e) { DataBind(); } "> This should be visible (in "if" area) This should not be visible (in "else" area) "> This should not be visible (in "if" area) This should be visible (in "else" area) Here's the underlying controls, which are simply wrappers around asp:Literal : using System; using System.Web.UI; using System.Web.UI.WebControls; [assembly: TagPrefix("ElseTest", "ElseTest")] namespace ElseTest { // simply renames a literal to allow blocks of data-bound-visibility [ToolboxData(" ")] public class IfControl : Literal { } [ToolboxData(" ")] public class ElseControl : Literal { public override bool Visible { get { // find previous control (which must be an IfControl). // If it's visible, we're not (and vice versa) for (int i = Parent.Controls.IndexOf(this)-1; i >= 0; i--) { Control c = Parent.Controls[i]; if (c is IfControl) return !c.Visible; // found it! render children if the if control is not visible else if (c is Literal) { // literals with only whitespace are OK. everything else is an error between if and then Literal l = c as Literal; string s = l.Text.Trim(); if (s.Length > 0) throw new ArgumentException("ElseControl must be immediately after an IfControl"); } } throw new ArgumentException("ElseControl must be immediately after an IfControl"); } set { throw new ArgumentException("Visible property of an ElseControl is read-only"); } } } } If you want it more concise, you can easily shorten the tag name (by changing the class names and/or tag prefix). You can also create a new property (e.g. "test") to use instead of "Visible". If you really want to get rid of the , there are likley many different tricks you can use to leverage CodeDOM or other ways to dynamically compile code, although performance will be a challenge since you'll probably end up dynamically compiling code each time the page runs, it may introduce pesky security issues, and more. I'd stay away from that.
