[site]: crossvalidated
[post_id]: 553639
[parent_id]: 552922
[tags]: 
In this instance, and in general, what we are doing is shuffling the data into a random ordering. This has the effect of assigning each observation to one of the treatment groups at random, or, for a continuous variable, randomly reordering the observations with respect to the continuous variable breaks the relationship between the response matrix and the continuous variable. Essentially, if we can obtain as large or larger effects (in this case as large or large values of the pesudo F statistic) as the observed data when we randomly rearrange the data, when we break the relationship between the response and the covariate ( Treatment ), then the observed relationship between the response and the covariate can't be that unusual. Here's what happening at a practical level library("permute") N This generates a random reordering of the data without any constraints: perm [1] 6 3 5 10 9 1 7 8 2 4 The original ordering of the data yields these values mat [,1] [,2] [,3] [1,] 0.1507817 0.31292668 0.14325239 [2,] 0.4788075 0.83181473 0.67879989 [3,] 0.6731145 0.58719983 0.36393428 [4,] 0.6053172 0.96058628 0.78253971 [5,] 0.5558196 0.09028268 0.95510673 [6,] 0.6410584 0.12864230 0.62377573 [7,] 0.8655038 0.38801779 0.07103316 [8,] 0.1785595 0.94336794 0.14048756 [9,] 0.3062665 0.07136178 0.61135580 [10,] 0.5292014 0.34035315 0.44388200 and the permuted object looks like this mat[perm, ] [,1] [,2] [,3] [1,] 0.6410584 0.12864230 0.62377573 [2,] 0.6731145 0.58719983 0.36393428 [3,] 0.5558196 0.09028268 0.95510673 [4,] 0.5292014 0.34035315 0.44388200 [5,] 0.3062665 0.07136178 0.61135580 [6,] 0.1507817 0.31292668 0.14325239 [7,] 0.8655038 0.38801779 0.07103316 [8,] 0.1785595 0.94336794 0.14048756 [9,] 0.4788075 0.83181473 0.67879989 [10,] 0.6053172 0.96058628 0.78253971 Assuming we have our covariate (your sample_data(physeq_shime3)$Treatment ) we do not reorder it and relate it to the now permuted response matrix using the same test procedure as applied to the actual data; in your case it is a PERMANOVA. So now we'd do ## pseudo code! PERMANOVA(mat[perm, ] ~ Treatment) We compute the test statistic, in this case it is a pseudo F statistic F.Model (ratio of variance explained to residual variance), and record that number. We repeat this a lot of times, storing the new values of the test statistic each time we permute the data. Taken together, all these values of the test statistic yield a distribution of the test statistic under the null hypothesis of no relationship between response and covariate. We add the observed test statistic, the one shown in the output from the function with the observed ordering of the data, to this null distribution of test statistic (under the null hypothesis the observed ordering of the data is just one possible arrangement of the data like all the others). If the observed value of the test statistic lies in the extreme tails of the permuted / null distribution (i.e. if it is unusually large (or small)) then we might conclude that the observed ordering of the data yields a result that is unlikely to be observed if the null hypothesis were true. If the likelihood (probability really) of the observed statistic under the null is sufficiently low (unlikely) then we might conclude that the null hypothesis (of no relationship) is unlikely to be correct and we may choose to reject it in favour of the alternative hypothesis that there is an effect of the covariate. I think you are misunderstanding what PERMANOVA does. We are not computing distances to centroids. What we are doing is computing the centroid for each group defined by Treatment . This is the same as the group mean but just in many dimensions. If the sums of squared distances about the centroid are larger relative to the residual (or total) variance then the grouping variable may be important as it explains a lot of the variation in the data. Hence using as a test statistic the ratio of explained to residual variance. PERMANOVA is not used in biodiversity work; PERMDISP is used in that setting for beta diversity. In PERMDISP we are focusing on the the spread of the points about their group centroid and asking if the average of those distances from group centroids differ or not between groups. As we are focused on dispersions , the function in {vegan} for this is betadisper() .
