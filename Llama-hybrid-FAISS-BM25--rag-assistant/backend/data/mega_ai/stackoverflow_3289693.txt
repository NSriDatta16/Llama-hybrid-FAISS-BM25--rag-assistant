[site]: stackoverflow
[post_id]: 3289693
[parent_id]: 3288438
[tags]: 
The normal way of implementing a sorting algorithm would be to implement a static method, e.g. take a look at the source code for Arrays.sort(). You can overload this method with diferent implementations for different parameter types (e.g. objects that implement comparable vs. provide your own comparator vs. primitive arrays etc.) Here's one I wrote earlier: public static void swap(T[] a, int x, int y) { T t=a[x]; a[x]=a[y]; a[y]=t; } public static > void mergeInOrder(T[] src, T[] dst, int p1, int p2, int p3, int p4) { if (src[p2].compareTo(src[p3]) p4) { System.arraycopy(src,i1,dst,di,p2-i1+1); break; } } } System.arraycopy(dst, p1, src, p1, (p4-p1)+1); } public static > void mergeSort(T[] src, T[] dst, int start, int end) { if (start+1>=end) { if (start>=end) return; if (src[start].compareTo(src[end])>0) { swap(src,start,end); } return; } int middle=(start+end)/2; mergeSort(src,dst,start, middle); mergeSort(src,dst,middle+1, end); mergeInOrder(src,dst,start,middle,middle+1,end); } private static ThreadLocal []> mergeSortTemp=new ThreadLocal []>(); @SuppressWarnings("unchecked") public static > void mergeSort(T[] src) { int length=src.length; Comparable [] temp=mergeSortTemp.get(); if ((temp==null)||(temp.length However, I can think of two good reasons to implement a sorting algorithm as a class where you generate your own instance: It lets you polymorphically pass around instances of sorting algorithms - this could be useful if e.g. you were creating a collection of sorting algorithms and wanted to run lots of benchmarks on them for example. You can have private state in the sorter instance - this is useful for some sorting algorithms, e.g. having some pre-allocated arrays for temporary storage, and it makes sense to put it in a class instance if you want to be able to simultaneously use different sort instances from multiple threads - a static method implementation would need some form of synchronisation (e.g. see the use of the ThreadLocal in the code above).
