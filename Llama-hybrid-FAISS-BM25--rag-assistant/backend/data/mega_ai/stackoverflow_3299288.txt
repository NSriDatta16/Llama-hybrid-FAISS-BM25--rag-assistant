[site]: stackoverflow
[post_id]: 3299288
[parent_id]: 3292719
[tags]: 
I'm not an expert in Jackrabbit versioning, but as far as I know there is no easy way to locate such a node unless you know some of it's data. If you do know, then you can use a query and navigate to the next parent that is an instance of javax.jcr.version.Version, and restore it. If you don't know, then you need to iterate over the version storage and print all the data. You could filter out nodes that are not deleted, but otherwise it's a manual job because the path of a node is not stored in the version storage (unless you add a property that contains the path). Here is an example on how to list all nodes in the version storage. It will restore the last javax.jcr.version.Version it finds: import javax.jcr.Node; import javax.jcr.NodeIterator; import javax.jcr.Property; import javax.jcr.PropertyIterator; import javax.jcr.Session; import javax.jcr.SimpleCredentials; import javax.jcr.version.Version; import javax.jcr.version.VersionManager; import org.apache.jackrabbit.core.TransientRepository; public class TestRestoreDeleted { public static void main(String... args) throws Exception { TransientRepository rep = new TransientRepository(); Session s = rep.login( new SimpleCredentials("", new char[0])); try { // clear the repository first if (s.getRootNode().hasNode("test")) { s.getRootNode().getNode("test").remove(); s.save(); } // add test/t1 and check in the change Node test = s.getRootNode().addNode("test"); Node t1 = test.addNode("t1"); t1.addMixin("mix:versionable"); s.save(); VersionManager vm = s.getWorkspace(). getVersionManager(); for(int i=0; i
