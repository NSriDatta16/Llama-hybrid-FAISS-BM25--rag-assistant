[site]: stackoverflow
[post_id]: 2062341
[parent_id]: 2062325
[tags]: 
This is normally done using an R-tree data structure dbs like mysql or postgresql have GIS modules that use an r-tree under the hood to quickly retrieve locations within a certain proximity to a point on a map. From http://en.wikipedia.org/wiki/R-tree : R-trees are tree data structures that are similar to B-trees, but are used for spatial access methods, i.e., for indexing multi-dimensional information; for example, the (X, Y) coordinates of geographical data. A common real-world usage for an R-tree might be: "Find all museums within 2 kilometres (1.2 mi) of my current location". The data structure splits space with hierarchically nested, and possibly overlapping, minimum bounding rectangles (MBRs, otherwise known as bounding boxes, i.e. "rectangle", what the "R" in R-tree stands for). The Priority R-Tree (PR-tree) is a variant that has a maximum running time of: "O((N/B)^(1-1/d)+T/B) I/Os, where N is the number of d-dimensional (hyper-) rectangles stored in the R-tree, B is the disk block size, and T is the output size." In practice most real-world queries will have a much quicker average case run time. fyi, in addition to the other great code posted, there's some cool stuff like SpatiaLite and SQLite R-tree module
