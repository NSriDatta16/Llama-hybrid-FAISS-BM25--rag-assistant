[site]: datascience
[post_id]: 37310
[parent_id]: 37262
[tags]: 
OK, it sounds like you are trying to encode the position and velocity of a variable number of objects into each training example. One way to do this is with two feature planes per training example as channel inputs to a convolutional neural network. The first feature plane encodes the x-component of velocity for each object at that object's position, and the second does the same for the y-component. Since you said positions are with respect to the observer, I'll assume the observer is always in the same location, so there is no need to add any additional information to the inputs. I'll also assume that two objects cannot be in the same place. For example let's say you're in a 3x3 world and you have objects at (0,1) and (2,2) with velocities (3,2) and (1,7) respectively. This input example could be encoded as: [ 0 0 0 3 0 0 0 0 1 ] [ 0 0 0 2 0 0 0 0 7 ] As you can see the input size is always the same regardless of how many objects are present. More objects will just lead to more non-zero entries. I suggested a conv net since they work especially well with spatial problems, but if you want to try a vanilla neural network first then you can flatten your input shape from (m,3,3,2) to (m,12).
