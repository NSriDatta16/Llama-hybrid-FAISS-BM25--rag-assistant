[site]: stackoverflow
[post_id]: 238702
[parent_id]: 
[tags]: 
How to deal gracefully with null foreign keys in Linq to SQL?

In my database, Concessions have a many-to-one relationship with Firms (each Concession has a FirmID). SqlMetal has captured this relationship and generated the appropriate classes, so that each Concession has a Firm element. I'm binding against a query (simplified here) that returns a list of Concessions along with information about the corresponding Firm: From c as Concession in Db.Concessions _ Select _ c.ConcessionID, _ c.Title, _ c.Firm.Title The problem is that in some cases a Concession has not been assigned to a Firm (c.FirmID is null), so c.Firm is nothing and I get Object not set to an instance etc. I can get around this by doing a join as follows: From c As Concession In Db.Concessions _ Join f As Firm In Db.Firms On f.FirmID Equals c.FirmID _ Select _ c.ConcessionID, _ c.Title, _ Firm_Title = f.Title This doesn't throw an error when FirmID is null (Firm_Title is just an empty string), but it's not elegant: it's not object-oriented, and it doesn't leverage all of the relational intelligence that Linq to SQL has already captured. Is there a more graceful way to deal with this situation?
