[site]: stackoverflow
[post_id]: 873356
[parent_id]: 
[tags]: 
Challenges in writing wrappers for C++ functions so that they can be used from C code

I am now writing wrappers for C++ functions, such that they can be used from C code. The idea is to compile the cpp files using g++ and the c files using gcc, then link them together (!), but exposing ONLY those functions that are needed, to the C programs, by making them available in a header file 'test.h' (or maybe test.hpp?), like so: (Note how I do not expose function 'vector Tokenize(const string& str,const string& delimiters)') test.h: /* Header can be read by both C+ and C compilers, just the way we want! */ #ifndef TEST_H #define TEST_H #ifdef __cplusplus extern "C" { #endif #if defined(__STDC__) || defined(__cplusplus) extern int TokenizeC(const char* text, const char* delim, char ***output); /* ANSI C prototypes */ extern void reclaim2D(char ***store, unsigned int itemCount); #endif #ifdef __cplusplus } #endif #endif /* TEST_H */ test.cpp: #include #include #include #include #include "test.h" using namespace std; vector Tokenize(const string& str,const string& delimiters) { vector tokens; string::size_type delimPos = 0, tokenPos = 0, pos = 0; if(str.length() s = Tokenize(text, delim); // There will always be a trailing element, that will be blank as we keep a trailing delimiter (correcting this issue would not be worth the time, so this is a quick workaround) assert(s.back().length() == 0); // This will be nop'ed in release build s.pop_back(); (*output) = (char **)malloc(s.size() * sizeof(char *)); for(vector ::size_type x = 0; x = 0; --x) { free((*output)[x]); (*output)[x] = NULL; } return -2; } } return x; /* Return the number of tokens if sucessful */ } void reclaim2D(char ***store, unsigned int itemCount) { for (int x = 0; itemCount poc.c: #include #include "test.h" int main() { const char *text = "-2--4--6-7-8-9-10-11-", *delim = "-"; char **output = NULL; int c = TokenizeC(text, delim, &output); printf("[*]%d\n", c); for (int x = 0; x Do you notice something wrong? For starters, when I ran this program, I got "Unsatisfied code symbol '__gxx_personality_v0'" Thankfully, there is something here : What is __gxx_personality_v0 for? Once I ran g++ with options " -fno-exceptions -fno-rtti", the output now fails with "Unsatisfied data symbol '_ZNSs4_Rep20_S_empty_rep_storageE'" Ofcourse, the two environments (the one to compile - HP-UX B.11.23 ia64 and the one to run the binary on - HP-UX B.11.31 ia64) have different library versions (but same architecture), and this should not be a reason for the errors. I would also like to test out the case marked by "// TODO : HOW to test this scenario?", but that can wait for now. Any pointers?
