[site]: stackoverflow
[post_id]: 354521
[parent_id]: 354045
[tags]: 
It seems to me that if you want arbitrary precision then you are going to need an undefined number of bits to represent the mantissa. That means that some sort of array allocation strategy is going to be necessary for the mantissa. You could craft your own here, but BigInteger does it fairly efficiently and it works You need to specify what the smallest (non-zero) value you need to represent is. This will be 10^-(2^n), where n+1 is the number of bits you allocate to the exponent. With BigDecimal this is 10^-(2^31). You could use an arbitrary size exponent, but that range should be enough for anybody. So what you need is an unbounded integer mantissa to give you the arbitrary precision, and a fixed size exponent, depending on what you want your minimum representable value to be. Essentially this is BigDecimal; the only change is you will use some smaller object rather than the int used by BigDecimal. I would doubt whether the space savings are worth it. I would think that BigDecimal is going to do what you need with barely any more memory usage than any solution you craft yourself. Of course you could choose a maximum number of significant figures that you will need; then you need fixed size storage for both mantissa and exponent, and that's a whole lot less storage. Just use a fixed number of longs as the mantissa.
