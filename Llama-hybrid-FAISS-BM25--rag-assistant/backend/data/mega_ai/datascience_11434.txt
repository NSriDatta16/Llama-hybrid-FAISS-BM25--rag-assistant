[site]: datascience
[post_id]: 11434
[parent_id]: 10972
[tags]: 
This is something I've experimented with substantially. Predicting the compressive strength of concrete based on it's mix design is a great example, and fairly challenging - I used the concrete compressive strength dataset available at the UCI ML repository to help me better understand how to manipulate ML algorithms to get good predictive results. Here's a guy who took the same data set and used BigML's tools to do an analysis. I've also used ML to predict payitem bid prices on highway construction contracts to help improve cost estimation. For example, I set out to determine the unit price for a specific item, like guardrail, that contractors are likely to bid given a contract's location, time of year, total value, relevant cost indices, etc. It took a lot of time and experimentation, but I achieved surprisingly good predictive results. Regarding your specific topics of interest, I imagine you'll have to just do a lot of searching and reviewing master's theses on related topics, taking time to learn the mathematical models and theories that they employ. If you want to know where to get started, my learning path involved the following: Learning whatever I could about neural networks and machine learning theory (guys like Jeff Heaton proved helpful, here) Taking Andrew Ng's Machine Learning course on Coursera. Downloading and getting to know the R scripting language Reading whitepapers / theses on applying ML to specific applications. Developing a solid, rigorous understanding of basic statistics theory, especially linear regression. There's a lot of different ways to approach the topic, though. Websites like BigML.com are a good way to get your feet wet doing ML without having a rigorous mathematical / statistical understanding, but it'll only get you so far. In the end, you'll really need to devote time to getting your head wrapped around the math and programming in languages like R or Python. It's also important to remember that while ML seems to favor complexity over simplicity (in many cases non-linear problems benefit from novel and sometimes non-intuitive approaches), sometimes the simplest approach is best. It's really a question of how accurate the final model really needs to be.
