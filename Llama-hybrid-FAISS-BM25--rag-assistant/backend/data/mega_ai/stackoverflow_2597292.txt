[site]: stackoverflow
[post_id]: 2597292
[parent_id]: 2377255
[tags]: 
I just wanted to share my implementation using the example from above. I'm populating properties that are organized into key / value pairs in my database. In my example I store each property as a key value pair in a Dictionary. Each item in the Dictionary will contain a string key such as "Color" and a MultiSelectList with values like DataValueField="1", DataTextField="Black" etc... VewModel Code public Dictionary Properties { get; private set; } private void SetProperties() { this.Properties = new Dictionary (); foreach(InventoryItemProperty property in new InventoryItemPropertyRepository().FindAllInventoryItemProperties()) { this.Properties.Add(property.Key.Name, new MultiSelectList(property.Values, "Id", "Value")); } } View markup "> " name="inventoryItemPropertyValues" value=" " /> "> Controller Action code // // POST: /Admin/InventoryItems/Create [HttpPost] public ActionResult Create(InventoryItem inventoryItem, int[] inventoryItemPropertyValues) { try { inventoryItem.Created = DateTime.Now; inventoryItem.LastUpdated = inventoryItem.Created; this.inventoryItemRepository.Add(inventoryItem); this.inventoryItemRepository.Save(); if(inventoryItemPropertyValues != null) { SaveInventoryItemPropertyValues(inventoryItem.Id, inventoryItemPropertyValues); } return RedirectToAction("Details", new { id = inventoryItem.Id }); } catch { throw; //return View(); } } private void SaveInventoryItemPropertyValues(int inventoryItemId, int[] inventoryItemPropertyValues) { for(int i = 0; i
