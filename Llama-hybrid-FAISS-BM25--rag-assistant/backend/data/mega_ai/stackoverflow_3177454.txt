[site]: stackoverflow
[post_id]: 3177454
[parent_id]: 3177431
[tags]: 
This model you are describing is a form of trust escrow, where multiple clients trust a third party to handle user authentication. See the Kerberos distributed security system. The Kerberos protocol and its web-application implementation, Stanford WebAuth, have a few advantages over what you describe: There is no need to send the token from A to B+C when a user logs in. Instead, A (the "KDC" in Kerberos terms) shares a secret with B (a "Kerberized server") and one with C only at the initial setup of the trust relationship. The token cannot be intercepted as it is never sent in the clear from A to the user. If you do not need full-fledged Kerberos authentication, which can be complex to implement, I'd encourage a model like this: User Joe authenticates to A, preferably using a challenge-response protocol which doesn't involve sending Joe's password to A A cryptographically signs Joe's username, the current time, and some randomly-generated garbage B and C accept users within the specified time frame who can present packages signed by A containing their username and the appropriate time This is a basic authentication-token protocol. It's flawed in several ways, but is still better than sending the user password around.
