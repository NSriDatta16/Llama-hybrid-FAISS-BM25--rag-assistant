[site]: stackoverflow
[post_id]: 568604
[parent_id]: 568561
[tags]: 
Hehe, well... web browsers are different, I'd say that what goes well with Firefox usually goes well with the standard but that's not entirely true either. According to the xhtml1-strict.dtd only can be child of . I suggest you get yourself an designer which knows about the standards. These are formal specifications that you can verify your HTML with. Paragraph. List item. Another list item. List paragraph. But back to your question (which by the way is a pain to answer). There are many cases where you would define non-zero margin and padding. I tend to prefer additional margin when padding isn't needed, and then pad when margin doesn't work. Every situation is different and you'll need to know when one is preferred. I won't go into details, because I think you're on the right track here. Keep experimenting and I know you'll get it. But do keep in mind that web browsers do things differently. I'm not sure about that collapsing margin thing, but white-space sometimes counts as margin. If a bunch of elements occur without white-space in between them that's sometimes different than if there where no white-space. Again, it's a lot to take in so I won't go into the specifics, but you'll need know about these things and you'll get this knowledge by practicing. The paragraph and list margins by default are not the same cross browsers, when you start doing all that layout you'll want to define a set of base CSS rules for your page. And if you want help on what margins to set I suggest you take a look at the canons of page construction . p { margin: 1em 0; } ul { margin: 1em 0; } ul > li { margin: 1em 0; } The above rules are just an example but what they do is that they ensure that the top and bottom margins for paragraphs and list items are the same despite browser. Things like this is what makes your page look the same cross browsers. Keep testing out things and read the excellent CSS blogs out there. Ask for help when you run into the really obscure edge cases. These people have spent a great deal of time trying to solve and your time is better spent learning how they did it than reinventing the wheel.
