[site]: stackoverflow
[post_id]: 5190836
[parent_id]: 5190807
[tags]: 
No. Unit tests don't attempt to prove correctness in the general case. They should test specific examples . The idea is to pick enough representative examples that if there is an error it will probably be found by one or more of the tests, but you can't be sure to catch all errors this way. For example if you were unit testing an add function you might test some positive numbers, some negative, some large numbers and some small, but using this approach alone you'd be lucky to find the case where this implementation doesn't work: int add(int a, int b) { if (a == 1234567 && b == 2461357) { return 42; } return a + b; } You would however be able to spot this error by combining unit testing and code coverage . However even with 100% code coverage there can be logical errors which didn't get caught by any tests. It is possible to prove code for correctness. It is called formal verification , but it's not what unit tests are for. It's also expensive to do for all but the most simple software so it is rarely done in practice.
