[site]: stackoverflow
[post_id]: 4719877
[parent_id]: 4719788
[tags]: 
Hmm, yes you can store the "cookie" which is the term I'd use for the "user details" you're describing inside your application (BTW I think another term for the "cookie" is an "authentication ticket".) However, typically a user won't have permission to modify the exe which they are running. And, there's great support in the framework for storing information outside the application... I think you're best storing this in some sort of private area which only the user of your C# program can see. Check out Isolated Storage for this. And perhaps encrypt it too. Say you have a string which represents the data you want to save called state (you could serialize a serializable class to a string.) You can save it like so: private static IsolatedStorageFile _isoStore = IsolatedStorageFile.GetStore(IsolatedStorageScope.User | IsolatedStorageScope.Assembly, null, null); String state = "my Secret String"; using (IsolatedStorageFileStream oStream = new IsolatedStorageFileStream(C_CREDENTIALS_FILENAME, FileMode.Create, _isoStore)) { Byte[] stateBytes = Encoding.Unicode.GetBytes(state); Byte[] encryptedBytes = ProtectedData.Protect(stateBytes, null, DataProtectionScope.CurrentUser); oStream.Write(encryptedBytes, 0, encryptedBytes.Length); C_CREDENTIAL_FILENAME is the name of the file you want to store the information in. To get it back try something like this: string[] fileNames = _isoStore.GetFileNames(C_CREDENTIALS_FILENAME); if (fileNames.Any(item => item == C_CREDENTIALS_FILENAME)) { //it exists using (IsolatedStorageFileStream iStream = new IsolatedStorageFileStream(C_CREDENTIALS_FILENAME, FileMode.Open, _isoStore)) { Byte[] unEncryptedBytes = ProtectedData.Unprotect(iStream.ToArray(), null, DataProtectionScope.CurrentUser); String unEncryptedXml = Encoding.Unicode.GetString(unEncryptedBytes); } } else { //it doesn't exist return null; } }
