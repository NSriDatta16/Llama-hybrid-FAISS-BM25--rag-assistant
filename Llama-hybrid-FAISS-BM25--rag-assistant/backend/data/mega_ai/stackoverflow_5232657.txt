[site]: stackoverflow
[post_id]: 5232657
[parent_id]: 5228328
[tags]: 
Here's a full solution. It's pretty straightforward, so I'll leave out a full explanation. Ask me in the comments if there's anything you can't figure out yourself. (Using eval to do the actual evaluation might not be what you want in your exercise/project. Look up "meta-circular interpreter" for another way.) (defun apply-env (exp env) (reduce (lambda (exp bdg) (subst (cadr bdg) (car bdg) exp)) env :initial-value exp)) (defun try-eval (exp) (if (atom exp) exp (let ((exp (mapcar #'try-eval exp))) (if (every #'numberp (cdr exp)) (eval exp) exp)))) (defun evalexp (exp env) (try-eval (apply-env exp env)))
