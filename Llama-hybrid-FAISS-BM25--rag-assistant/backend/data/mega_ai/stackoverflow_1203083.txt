[site]: stackoverflow
[post_id]: 1203083
[parent_id]: 1195230
[tags]: 
For a couple years I was aware of and dabbled in writing unit tests. What allowed me to really engage unit testing was when I started working on an open source project with impressive test coverage. It really struck me that the way I was writing software was 'on the wrong side of history'. You mentioned many tools whose advertised capabilities excite you, and were wondering how to put them together. I think these questions are addressed very well by "xUnit Test Patterns", from Addison-Wesley ( http://xunitpatterns.com/ ). This book allowed me to pull together all those tools and techniques I'd read about in the past. The book may better serve an audience who also appreciates other books like the Gang of Four's Design Patterns, Refactoring, and Refactoring to Patterns. These books are also great, though they did not have so direct a change in how I coded after I read them. The presentation of XUnit Test Patterns though reflects the style of the books. They can be hard to read at first as they tend to cross reference chapters in arbitrary directions. I think they're very solid though. The GoF presented categories of patterns- creational, structural, and behavioral. These categories serve as a way to associate and contrast the patterns being explained. By associating test design patterns with the typical lifetime of a unit test, XUnit Test patterns also weaves together a range of techniques available for unit testing. The same steps are also used to associate and contrast various tools used for building unit tests. It will help with the high level view, and go into actual implementation. My only criticism of XUnit Test Patterns is how much text they use to criticize NUnit. NUnit is a fine piece of programming, to its author's credit NUNit us mentioned so prominently in what I think will become a classic book.
