[site]: stackoverflow
[post_id]: 464613
[parent_id]: 461896
[tags]: 
My two cents on trying to avoid synchronization problems from the start â€” watch out for the following issues/smells: When writing code, always know in which thread you're in . When designing a class or API for reuse, always ask yourself whether the code has to be thread-safe . It's better to make a deliberate decision, and document that your unit is not thread-safe, than to put in unwise synchronization with potential for deadlock. Invocations of new Thread() are a smell . Use dedicated ExecutorServices instead, which force you to think about your application's overall threading concept (see 1) and encourage others to follow it. Know and use library classes (like AtomicBoolean et al , synchronized Collections, etc). Again: make a conscious decision on whether thread-safety is important in a given context, don't just use them blindly.
