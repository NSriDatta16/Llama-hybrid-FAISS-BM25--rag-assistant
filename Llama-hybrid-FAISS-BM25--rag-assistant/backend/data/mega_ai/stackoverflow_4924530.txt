[site]: stackoverflow
[post_id]: 4924530
[parent_id]: 
[tags]: 
Collapse Multiple Records Into a Single Record With Multiple Columns

In a program I'm maintaining we were given a massive (~500 lines) SQL statement by the customer. It is used for generating flat files with fixed length records for transmitting data to another big business. Since its a massive flat file its not relational and the standard normal forms of data are collapsed. So, if you have a record that can have multiple codes associated, in this case upto 19, they all have be written into single line, but seperate fields, in the flat file. Note: this example is simplified. The data might look like this, with three tables: RECORDS record_id firstname lastname -------------------------------- 123 Bob Schmidt 324 George Washington 325 Ronald Reagan 290 George Clooney CODE_TABLE code_id code_cd code_txt -------------------------------- 5 3 President 2 4 Actor 3 7 Plumber CODES_FOR_RECORDS record_id code_cd ------------------- 123 7 325 3 290 4 324 3 325 4 123 4 This needs to produce records like: firstname lastname code1 code2 code3 Bob Schmidt Actor Plumber NULL George Washington President NULL NULL Ronald Reagon Actor President NULL George Clooney Actor NULL NULL The portion of the current query we were given looks like this, but with 19 code columns instead of the 5: select x.record_id, max(case when x.rankk = 1 then code_txt end) as CodeColumn1, max(case when x.rankk = 2 then code_txt end) as CodeColumn2, max(case when x.rankk = 3 then code_txt end) as CodeColumn3, max(case when x.rankk = 4 then code_txt end) as CodeColumn4, max(case when x.rankk = 5 then code_txt end) as CodeColumn5, from ( select r.record_id, ct.code_txt as ctag , dense_rank() over (partition by r.record_id order by cfr.code_id) as rankk from records as r codes_for_records as cfr, code_table as ct where r.record_id = cfr.record_id and ct.code_cd = cfr.code_cd and cfr.code_cd is not null and ct.code_txt not like '%V%' ) as x where x.record_id is not null group by x.record_id I trimmed down things for simplicties sake, but the actual statment includes an inner query and a join and more where conditions, but that should get the idea across. My brain is telling me there has to be a better way, but I'm not an SQL expert. We are using DB2 v8 if that helps. And the codes have to be in seperate columns, so no coalescing things into a single string. Is there a cleaner solution than this? Update: I ended up just refacorting the original query, it sill uses the ugly MAX() business, but overall the query is much more readable due to reworking other parts.
