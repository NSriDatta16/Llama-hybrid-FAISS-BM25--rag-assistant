[site]: stackoverflow
[post_id]: 927969
[parent_id]: 927884
[tags]: 
That really depends on what kind of application you have and what you want to do with it. Web applications primarily have the following advantages: True platform independence - if a browser is available for the platform, your application will run on it. Of course in practice it's not quite as simple as that, but compared to desktop applications it is essentially a non-issue. Easy Deployment - Upload the latest version to the server, et voila - deployment done. That's all it takes. No manual updating, no downloads, nothing Global Availability - browser + internet connection = access to your application. Secrecy - if you consider this a plus. What I mean is that most of your precious code stays on your server and you don't have to worry about evil people reverse engineering your stuff ;) User Control - You decide who has access to your service and who doesn't. No need to worry about software piracy, serial numbers and all that nasty stuff. On the flip side you have these issues: Integration - Your app runs of the server, and there really isn't a way to interface with local applications (or even files). Copy&Pasting between a web app and a local program isn't really doable, for instance. This of course also includes accessing local hardware like USB dongles, or whatever you can come up with. Connectivity - No internet, no service. There are some ways to alleviate this problem with local caches and such, but the bottom is that without a internet connection you are SOL. Performance - If your application is performance heavy then having ten thousand users run it on your server at the same time may require an expensive server farm. You probably don't want to implement SETI@home as a web application. GUIs - You can do amazing GUIs with Flash and JavaScript these days, but it still isn't the same as a real Desktop GUI (drag'n'drop between a browser and other applications immediately comes to mind). The right-click context menu is a classic issue. Do you display the browser's menu, or do you try to suppress it and show your own? It's a lose/lose-situation. Responsibility/TCO - It's your server, so you have to pay for it and make sure it runs smoothly and backups are made. A desktop app is shipped 'as is', and if the user's hard drive crashes it's not your problem. Web apps are a whole different story here. So what does this all mean? It all depends. Figure out what issues are most important for you. Edit: Sorry, I just read that you specifically asked about monetizing your app. You should've mentioned that in the body of your question, too ;) But I think I partially answered that anyway, at least I tried to.
