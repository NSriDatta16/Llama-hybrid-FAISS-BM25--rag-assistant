[site]: stackoverflow
[post_id]: 5462907
[parent_id]: 5462022
[tags]: 
My solution: struct colon_separated_only: std::ctype { colon_separated_only(): std::ctype (get_table()) {} static std::ctype_base::mask const* get_table() { typedef std::ctype cctype; static const cctype::mask *const_rc= cctype::classic_table(); static cctype::mask rc[cctype::table_size]; std::memcpy(rc, const_rc, cctype::table_size * sizeof(cctype::mask)); rc[':'] = std::ctype_base::space; return &rc[0]; } }; struct table_t { std::string key; std::string first; std::string last; std::string rank; std::string additional; }; int main() { std::string buf = "44:william:adama:commander:stuff\n33:luara:roslin:president:data\n"; stringstream s(buf); s.imbue(std::locale(std::locale(), new colon_separated_only())); table_t t; std::vector data; while ( s >> t.key >> t.first >> t.last >> t.rank >> t.additional ) { data.push_back(t); } for(size_t i = 0 ; i Output: 44 william adama commander stuff 33 luara roslin president data Online Demo : http://ideone.com/JwZuk The technique I used here is described in my another solution to different question: Elegant ways to count the frequency of words in a file
