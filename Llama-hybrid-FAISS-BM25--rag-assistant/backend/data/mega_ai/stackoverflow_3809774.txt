[site]: stackoverflow
[post_id]: 3809774
[parent_id]: 3807518
[tags]: 
Since you are only using base64 to obfuscate the string, you could just obfuscate it with something else, like rot13 (or your own simple letter substitution function). So, urlencode(str_rot13($str)) to encode and str_rot13(urldecode($str)) to decode. Or, to just have a shorter base64-encoded string, you could compress the string before base64 encoding it: base64_encode(gzencode($str, 9)) and gzdecode(base64_decode($str)) to decode. Or, if this is primarily a security issue (you don't mind people seeing the URL, you just want to keep people from hacking it) you could pass these parameters with normal querystring variables, but with a hash appended to prevent tampering. i.e.: function getHash($url, $width, $height) { $secret = 'abcdefghijklmnopqrstuvwxyz whatever you want etc.'; return sha1($url . $width . $height . $secret); } // So use this hash to to construct your URL querystring: $hash = getHash($url, $width, $height); $urlQuerystring = '?url='.urlencode($url).'&width='.(int) $width. '&height='.(int) $height.'&hash='.$hash; // Then in your code that processes the URL, check the hash first if ($hash != getHash($url, $width, $height)) // URL is invalid (Off topic: People are saying you should use POST instead of GET. If all these URLs are doing is fetching screenshots from your database to display (i.e. a search lookup), then GET is fine and correct. But if calling these URLs is actually performing an action like going to another site, making and storing the screenshot, then that's a POST. As their names suggest, GET is for retrieval; POST is for submitting data. If you were to use GET on an expensive operation like making the screenshot, you could end up DOSing your own site when Google etc. index these URLs.)
