[site]: stackoverflow
[post_id]: 5521141
[parent_id]: 5521039
[tags]: 
generally, it is best to use an instance variable which is not allocated dynamically. you can be sure it exists when the object uses it it will require less overall memory it is less likely to fail copy/move is simpler to implement (it's often automatic) storage is automatic (smart pointer implementations are not necessarily thread safe) sometimes, you'll need to allocate it dynamically. typically, you'll know when to do this: lazy initialization (sometimes it's necessary... it's also a really bad idea in some cases) polymorphism decoupling (e.g. using PIMPL to reduce build dependencies) shared memory (e.g. it's ref-counted) its physical size is large. even when the physical size is large, it's often better to to force the clients to allocate the container on the heap by making the constructors private. wrt your example: the text in the text objects is likely allocated dynamically - the text object itself likely consumes a few words. if it's only a few words and there is no need to allocate it dynamically, definitely avoid dynamic allocation. when you choose dynamic, always use some form of smart pointer. good luck!
