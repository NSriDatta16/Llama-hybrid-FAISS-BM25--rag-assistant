[site]: crossvalidated
[post_id]: 201367
[parent_id]: 
[tags]: 
Best classifier machine-learning model for data with few samples

What machine-learning algorithm do you use if you have an attribute matrix that was rows = samples and cols = attributes and a target vector that matched the attributes to a specific classifier? Would I want something like a neural network? Unfortunately, I have many more attributes than samples but only categories to classify (i.e. 0,1, and 2). Considering this, what would be the best algorithm to use for a dataset like the one below? Values will be positive floats. My data looks something like the DataFrames below. I'm trying to use the attributes to predict the target. I use Python for everything so I was going to try sklearn or tensorflow . In the end, I would like to have a model that predict the classifier and ALSO to be able to output the important variables that were useful in the model prediction. import pandas as pd DF_attributes = pd.DataFrame([ [0.1, 12, 0.3, 0.4, 3.4], [0.3, 15, 0.2, 0.7, 6.9], [0.5, 10, 0.8, 0.4, 5.3], [0.6, 13, 0.5, 0.5, 6.3], [0.4, 11, 0.8, 0.4, 7.3], [0.3, 11, 0.4, 0.5, 6.3] ],index=["s1","s2","s3","s4","s5","s6"],columns=["att_1","att_2","att_3","att_4","att_5"]) SR_target = pd.Series([0,0,1,0,2,1],index=["s1","s2","s3","s4","s5","s6"]) att_1 att_2 att_3 att_4 att_5 s1 0.1 12 0.3 0.4 3.4 s2 0.3 15 0.2 0.7 6.9 s3 0.5 10 0.8 0.4 5.3 s4 0.6 13 0.5 0.5 6.3 s5 0.4 11 0.8 0.4 7.3 s6 0.3 11 0.4 0.5 6.3 s1 0 s2 0 s3 1 s4 0 s5 2 s6 1 dtype: int64
