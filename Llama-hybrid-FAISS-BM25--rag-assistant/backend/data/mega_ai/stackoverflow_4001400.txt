[site]: stackoverflow
[post_id]: 4001400
[parent_id]: 4001268
[tags]: 
A couple of observations: On on hand: 1. You never got time to do it. If you treat re-factoring as something separate from coding (instead of an intrinsic part of coding decently), and if you can't manage time, then yeah, you'll never have time for it. "Context switching" is mentally expensive (difficult to leave what you're doing in the middle of it). See previous point above. Refactoring is an active component of good coding practices. If you separate the two as if they were two different tasks, then 1) your coding practices need improvement/maturing, and 2) you will engage in severe context switching if your code is in a severe need of refactoring (again, code quality.) It's usually isn't an easy task. Only if the code you produce is not amenable to refactoring. That is, code that is hard to refactor exhibits one or more of the following (list is not universally inclusive): High cyclomatic complexity , No single responsibility per class (or procedure), High coupling and/or poor low cohesion (aka poor LCOM metrics ), poor structure Not following the SOLID principles . No adherence to the Law of Demeter when appropriate. Excessive adherence to the Law of Demeter when inappropriate. Programming against implementations instead of interfaces. There's always the fear you'll break something that's now working. Testing? Verification? Analysis? Any of these before being checked into source control (and certainly before being delivered to the users)? On the other: 1. Using that code is error-prone. Only if it has never tested/verified and/or if there is no clear understanding of the conditions and usage patterns under which the potentially error-prone code operates acceptably. Over time you might realize that if you would have refactored the code the first time you saw it - That would have save you time on the long run. That realization should not occur over time. Good engineering and work ethics calls for that realization to occur when the artifact (being hardware or software) is in the making. So my question is - Practically - When do you decide it's time to refactor your code? Practically , when I'm coding; I detect an area that needs improvement (or something that needs correction after a change on requirements or expectations); and I get an opportunity to improve it without sacrificing a deadline. If I cannot re-factor at that moment, I simply document the perceived defect and create a workable, realistic plan to revisit the artifact for refactoring. In real life, there will be moments that we'll code some ugly kludge just to get things running, or because we are drained and tired or whatever. It's reality. Our job is to make sure that those incidents do not pile up and remain unattended. And the key to this is to refactor as you code, keep the code simple and with a good, simple and elegant structure. And by "elegant" I don't mean "smart-ass" or esoteric, but that displays what is typically considered readable, simple, composable attributes (and mathematical attributes when they apply practically.) Good code lends itself to refactoring; it displays good metrics; its structure resembles both computer science function composition and mathematical function composition ; it has a clear responsibility; it makes its invariants, pre and post-conditions evident; and so on and so on. Hope it helps.
