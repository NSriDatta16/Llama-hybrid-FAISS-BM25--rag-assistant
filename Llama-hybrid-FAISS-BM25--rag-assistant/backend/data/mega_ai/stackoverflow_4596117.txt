[site]: stackoverflow
[post_id]: 4596117
[parent_id]: 1867107
[tags]: 
To do this in WorkFlow, you have to create a Custom Activity. There's quite a good article about it here For this specific activity you need to create and Activity project (change it from .Net 4 Client profile to .Net 4 ) and reference Microsoft.Build.Framework and Microsoft.Build.Utilities.v4.0 from the GAC and then Microsoft.Web.Publishing.Tasks from %programfiles%\msbuild\Microsoft\VisualStudio\v10.0\WebApplications (%programfiles(x86)% if you're on a 64bit system). When that's done, you add these two classes: First, there's a stub: internal class BuildEngineStub : IBuildEngine { public bool BuildProjectFile(string projectFileName, string[] targetNames, System.Collections.IDictionary globalProperties, System.Collections.IDictionary targetOutputs) { throw new NotImplementedException(); } public int ColumnNumberOfTaskNode { get { throw new NotImplementedException(); } } public bool ContinueOnError { get { throw new NotImplementedException(); } } public int LineNumberOfTaskNode { get { throw new NotImplementedException(); } } public void LogCustomEvent(CustomBuildEventArgs e) { } public void LogErrorEvent(BuildErrorEventArgs e) { } public void LogMessageEvent(BuildMessageEventArgs e) { } public void LogWarningEvent(BuildWarningEventArgs e) { } public string ProjectFileOfTaskNode { get { throw new NotImplementedException(); } } } Then theres the activity class it self: [BuildActivity(HostEnvironmentOption.Agent)] public sealed class WebConfigTransform : CodeActivity { private const string WEB_CONFIG = "Web.config"; private const string WEB_CONFIG_TRANSFORM_FORMAT = "Web.{0}.config"; private IBuildEngine _buildEngine { get { return new BuildEngineStub(); } } [RequiredArgument] public InArgument TransformationName { get; set; } [RequiredArgument] public InArgument SourceFolder { get; set; } [RequiredArgument] public InArgument DestinationFolder { get; set; } protected override void Execute(CodeActivityContext context) { var transformationName = context.GetValue(this.TransformationName); var sourceFolder = context.GetValue(this.SourceFolder); var destinationFolder = context.GetValue(this.DestinationFolder); var source = Path.Combine(sourceFolder, WEB_CONFIG); var destination = Path.Combine(destinationFolder, WEB_CONFIG); var destinationbackup = string.Format("{0}.bak", destination); var transform = Path.Combine(sourceFolder, string.Format(WEB_CONFIG_TRANSFORM_FORMAT, transformationName)); if(!File.Exists(source)) throw new ArgumentException("Web.config file doesn't exist in SourceFolder"); if (!File.Exists(transform)) throw new ArgumentException("Web.config transformation doesn't exist in SourceFolder"); if (File.Exists(destination)) { File.Copy(destination, destinationbackup); File.Delete(destination); } var transformation = new TransformXml(); transformation.Source = new TaskItem(source); transformation.Destination = new TaskItem(destination); transformation.Transform = new TaskItem(transform); transformation.BuildEngine = _buildEngine; if (transformation.Execute()) { File.Delete(destinationbackup); } else { File.Copy(destinationbackup, destination); File.Delete(destinationbackup); } } } The reason for the BuildEngineStub is that the TransformXml class uses it to do logging. The only thing you need to be careful about is that the TransformXml.Execute function locks the source configuration file until the build process is finished.
