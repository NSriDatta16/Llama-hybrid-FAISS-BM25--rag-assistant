[site]: stackoverflow
[post_id]: 2239685
[parent_id]: 2238421
[tags]: 
I have played around a little with XSLT, and have delved deeper into the functional languages Lisp, Scheme, and Haskell. From what little I've seen, I'm not sure that XSLT as it's commonly used will teach you that much about functional languages. You may learn a few tricks, but in my opinion, JavaScript is a better analogue to what you'll see in untyped functional languages. Wikipedia backs me up on this one: As a language, XSLT is influenced by functional languages, and by text-based pattern matching languages like SNOBOL and awk. Its most direct predecessor was ISO DSSSL, a language that performed the same function for full SGML that XSLT performs for XML. Many of the standards committee that developed XSLT had previously worked on DSSSL, including James Clark. XSLT can also be considered Turing-complete template processor. In other words, it borrows a lot from functional languages, but also borrows from templating languages like awk and SGML. So yes, it's a functional language, in the same not-entirely-obvious way that C++ templates are a functional language . But there's no easily-mapped line from learning XSLT to Scheme or Haskell. Also, don't underestimate how different functional languages can be from each other. Lisp and Scheme are both so loosely typed as to feel essentially typeless. I think of these languages as being like the Mandarin Chinese of programming languages, with an essentially fluid, context-based syntax. Haskell, on the other hand, is so strongly typed that it confuses even experienced programmers. It also reaches beyond its lambda-calculus roots to borrow concepts from abstract algebra and Category theory, making it a bit mind-boggling to learn for non-math types. But none of this is meant to discourage you. By all means, learn a functional language. They will change your approach to programming in ways you'd never suspect.
