[site]: stackoverflow
[post_id]: 5367595
[parent_id]: 
[tags]: 
How to decode audio via FFmpeg in Android

I am writing a player for Android with FFmpeg compiled for Android NDK. I could open the file through FFmpeg and wrote this: av_register_all(); char* str = (*env) -> GetStringUTFChars(env, argv, 0); __android_log_print(ANDROID_LOG_INFO, "HelloNDK!", str, str); if (av_open_input_file (&pFormatCtx, str, NULL, 0, NULL) != 0) return -2; // Couldn't open file // Retrieve stream information if (av_find_stream_info(pFormatCtx) nb_streams; i++) { if (pFormatCtx->streams[i]->codec->codec_type == CODEC_TYPE_AUDIO && audioStream streams[audioStream]->codec; // Set audio settings from codec info aCodec = avcodec_find_decoder(aCodecCtx->codec_id); if (!aCodec) { fprintf (stderr, "Unsupported codec! \n"); return -1; } avcodec_open (aCodecCtx, aCodec); How can I now decode the audio and return it to the Java program? Maybe somebody could give me an example EDIT: When using avcodec_decode_audio3 Get the following: 03-22 07:54:00.988: INFO / DEBUG (31): * * * * * * * * * * * * ** * * * * 03-22 07:54:00.988: INFO / DEBUG (31): Build fingerprint: 'generic / sdk / generic /: 2.2/FRF91/43546: eng / test-keys' 03-22 07:54:00.988: INFO / DEBUG (31): pid: 435, tid: 435>>> org.libsdl.app Can I use avcodec_decode_audio2? I have in recent days has reached the following code: AVFormatContext * pFormatCtx; int i, videoStream, audioStream; AVCodecContext * pCodecCtx; AVCodec * pCodec; AVFrame * pFrame; AVPacket packet; int frameFinished; float aspect_ratio; AVCodecContext * aCodecCtx; AVCodec * aCodec; AVCodecContext * c = NULL; int out_size, len; int16_t * audio_buf; uint8_t * outbuf; uint8_t inbuf [AUDIO_INBUF_SIZE + FF_INPUT_BUFFER_PADDING_SIZE]; av_register_all (); char * str = (* env) -> GetStringUTFChars (env, argv, 0); if (av_open_input_file (& pFormatCtx, str, NULL, 0, NULL)! = 0) return -150; if (av_find_stream_info (pFormatCtx) nb_streams; i + +) { if (pFormatCtx-> streams [i] -> codec-> codec_type == CODEC_TYPE_VIDEO & & videoStream streams [i] -> codec-> codec_type == CODEC_TYPE_AUDIO & & audioStream streams [audioStream] -> codec; aCodec = avcodec_find_decoder (aCodecCtx-> codec_id); if (! aCodec) { fprintf (stderr, "Unsupported codec! \ n"); return -45; } avcodec_open (aCodecCtx, aCodec); c = avcodec_alloc_context (); packet_queue_init (& audioq); while (av_read_frame (pFormatCtx, & packet)> = 0) { if (packet.stream_index == videoStream) { } Else if (packet.stream_index == audioStream) { packet_queue_put (& audioq, & packet); int len1, data_size; data_size = 417; len1 = avcodec_decode_audio2 (aCodecCtx, (int16_t *) audio_buf, & data_size, packet.data, packet.size); return packet.size; } Else { av_free_packet (& packet); } } return 0; In this case, when the avcodec_decode_audio2 I got -1. What I did wrong? Note: When I drove int data_size = 417; then DEBUG does not appear and the function returns -1, but when I drive a: int data_size = AVCODEC_MAX_AUDIO_FRAME_SIZE * 2; then vyskakievaet DEBUG in your function so in my own! How can this be solved? EDIT2: My new code: JNIEXPORT jint JNICALL Java_org_libsdl_app_SDLActivity_main( JNIEnv* env, jobject obj, int argc, jstring argv, jbyteArray array) { AVFormatContext *pFormatCtx; int i, videoStream, audioStream; AVCodecContext *pCodecCtx; AVCodec *pCodec; AVFrame *pFrame; AVPacket packet; int frameFinished; float aspect_ratio; AVCodecContext *aCodecCtx; AVCodec *aCodec; SDL_Overlay *bmp; SDL_Surface *screen; SDL_Rect rect; SDL_Event event; SDL_AudioSpec wanted_spec, spec; AVCodecContext *c= NULL; int out_size, len; int16_t *audio_buf; uint8_t *outbuf; uint8_t inbuf[AUDIO_INBUF_SIZE + FF_INPUT_BUFFER_PADDING_SIZE]; char *pAudioBuffer = (char *) av_malloc (AVCODEC_MAX_AUDIO_FRAME_SIZE * 2); av_register_all(); char *str = (*env)->GetStringUTFChars(env, argv, 0); if(av_open_input_file(&pFormatCtx, str, NULL, 0, NULL)!=0) return -150; // Couldn't open file if(av_find_stream_info(pFormatCtx)nb_streams; i++) { if(pFormatCtx->streams[i]->codec->codec_type==CODEC_TYPE_VIDEO && videoStream streams[i]->codec->codec_type==CODEC_TYPE_AUDIO && audioStream streams[audioStream]->codec; aCodec = avcodec_find_decoder(aCodecCtx->codec_id); if(!aCodec) { fprintf(stderr, "Unsupported codec!\n"); return -45; } avcodec_open(aCodecCtx, aCodec); c=avcodec_alloc_context(); packet_queue_init(&audioq); while (av_read_frame(pFormatCtx, &packet)>= 0) { if (aCodecCtx->codec_type == AVMEDIA_TYPE_AUDIO) { int data_size = AVCODEC_MAX_AUDIO_FRAME_SIZE * 2; int size=packet.size; while(size > 0) { int len = avcodec_decode_audio3(aCodecCtx, (int16_t *) pAudioBuffer, &data_size, &packet); jbyte *bytes = (*env)->GetByteArrayElements(env, array, NULL); memcpy(bytes, (int16_t *) pAudioBuffer, size); (*env)->ReleaseByteArrayElements(env, array, bytes, 0); size = packet.size-len; } } } return 5; }
