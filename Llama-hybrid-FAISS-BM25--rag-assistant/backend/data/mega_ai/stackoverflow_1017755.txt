[site]: stackoverflow
[post_id]: 1017755
[parent_id]: 
[tags]: 
C++ static const variable and destruction

I have encountered a strange behavior with a simple C++ class. classA.h class A { public: A(); ~A(); static const std::string CONST_STR; }; classA.cpp #include "classA.h" #include const std::string A::CONST_STR("some text"); A::A() { assert(!CONST_STR.empty()); //OK } A::~A() { assert(!CONST_STR.empty()); //fails } main.cpp #include #include std::auto_ptr g_aStuff; int main() { //do something ... g_aStuff = std::auto_ptr (new A()); //do something ... return 0; } I'd expect access violations or anything similar, but I'd never expect that the content of the static const string could change. Does anyone here have a good explanation what happens in that code? thanks, Norbert
