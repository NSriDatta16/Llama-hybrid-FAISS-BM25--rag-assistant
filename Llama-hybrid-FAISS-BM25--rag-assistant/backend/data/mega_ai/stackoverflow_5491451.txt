[site]: stackoverflow
[post_id]: 5491451
[parent_id]: 5491376
[tags]: 
I'm no PRISM/MEF guru but if I were attacking this problem I'd take a slightly different approach and add a tad more decoupling. Essentially you want the ViewModels of your windows (Shell and Popup) to communicate - windows ( Views ) should only communicate with the user and update properties (in a decoupled, model-bound fashion) on their ViewModels . Once you're in this position then Shell's ViewModel can request the user information (say from a property) of Popup's ViewModel . Though, of course, they are not the ViewModels of either Shell nor Popup - they are merely ViewModels that these Views happen to be bound to :) Purists would go even further and talk about message queues between the various communicating parties but one step at a time, methinks. Dan Edit Following Michael's comment: As I said I'm not expert in PRISM but I think it depends how far you want to go with the decoupling. There's nothing stopping the Client ViewModel creating and showing the popup and then querying the popup's ViewModel for data before disposing of it. It's not pure MVVM because your Client ViewModel is doing some fairly direct communication with the Popup and its ViewModel but it will work and it's not that big a sin. I would go with a pragmatic approach in cases such as this where a natural dependency exists anyway. You still have the separation of View and ViewModel. I imagine there are folks here who can instruct on a more decoupled approach - which I would also be interested in reading about.
