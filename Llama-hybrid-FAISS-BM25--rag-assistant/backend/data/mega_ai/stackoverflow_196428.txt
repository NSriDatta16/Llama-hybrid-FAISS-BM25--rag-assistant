[site]: stackoverflow
[post_id]: 196428
[parent_id]: 196424
[tags]: 
The second example is bad. You're taking a lot of overhead to catch an exception when, as you demonstrate, it's just as easy to prevent the exception in the first place. Plus you also assume you know why that exception was thrown - if there was some other exception, like say an out of memory or something, you're reporting it as a "field not found" even if it wasn't. Keep in mind that try / catch in languages like C++ and Java are very expensive because of all the state they have to save and restore. Python, on the other hand, has very cheap exceptions and they positively encourage you to use a try / except for simple validation. But even so, catching everything and pretending it's one type of exception is still bad.
