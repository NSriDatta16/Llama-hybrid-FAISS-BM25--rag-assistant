[site]: stackoverflow
[post_id]: 750309
[parent_id]: 749712
[tags]: 
although PHP does not support method overloading the way you have experienced in other languages, say Java. but you CAN have method overloading in PHP, but the definition method is different. if you want to have different functionality for a given method, with different set of parameters in PHP, you can do something like this: class myClass { public function overloadedMethod() { // func_num_args() is a build-in function that returns an Integer. // the number of parameters passed to the method. if ( func_num_args() > 1 ) { $param1 = func_get_arg(0); $param2 = func_get_arg(1); $this->_overloadedMethodImplementation2($param1,$param2) } else { $param1 = func_get_arg(0); $this->_overloadedMethodImplementation1($param1) } } protected function _overloadedMethodImplementation1($param1) { // code 1 } protected function _overloadedMethodImplementation2($param1,$param2) { // code 2 } } there could be cleaner implementation, but this is just a sample. PHP supports inheritance and interfaces. so you can have polymorphism using them. you can have an interface like this: // file: MyBackupInterface.php interface MyBackupInterface { // saves the data on a reliable storage public function saveData(); public function setData(); } // file: myBackupAbstract.php require_once 'MyBackupInterface.php'; class MyBackupAbstract implements MyBackupInterface { protected $_data; public function setData($data) { $this->_data= $data; } // there is no abstract modifier in PHP. so le'ts avoid this class to be used in other ways public function __construct() { throw new Exception('this class is abstract. you can not instantiate it'); } } // file: BackupToDisk.php require_once 'MyBackupAbstract.php'; class BackupToDisk extends MyBackupAbstract { protected $_savePath; // implement other methods ... public function saveData() { // file_put_contents() is a built-in function to save a string into a file. file_put_contents($this->_savePath, $this->_data); } } // file: BackupToWebService.php require_once 'MyBackupAbstract.php'; class BackupToWebService extends MyBackupAbstract { protected $_webService; // implement other methods ... public function saveData() { // suppose sendData() is implemented in the class $this->sendData($this->_data); } } now in your application, you might use it like this: // file: saveMyData.php // some code to populate $myData $backupSolutions = array( new BackupToDisk('/tmp/backup') , new BackupToWebService('webserviceURL') ); foreach ( $backupSolutions as $bs ) { $bs->setData($myData); $bs->saveData(); } you are right, PHP is not strong typed language, we never mentioned that any of your $backupSolutions would be a 'MyBackupAbstract' or 'MyBackupInterface', but that would not stop us from having the nature of polymorphism which is different functionality over using the same methods.
