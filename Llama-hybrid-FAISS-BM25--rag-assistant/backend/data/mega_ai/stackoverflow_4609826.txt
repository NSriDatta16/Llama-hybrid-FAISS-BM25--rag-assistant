[site]: stackoverflow
[post_id]: 4609826
[parent_id]: 4608860
[tags]: 
Have you tried using Async.Parallel ? That is, rather than Async.Start each subdirectory, just combine the subdirectory tasks into a single async via Async.Parallel . Then you end up with a (nested) fork-join task that you can RunSynchronously and await the final result. EDIT Here is some approximate code, that shows the gist, if not the full detail: open System.IO let agent = MailboxProcessor.Start(fun mbox -> async { while true do let! msg = mbox.Receive() printfn "%s" msg }) let rec traverse dir = async { agent.Post(dir) let subDirs = Directory.EnumerateDirectories(dir) return! [for d in subDirs do yield traverse d] |> Async.Parallel |> Async.Ignore } traverse "d:\\" |> Async.RunSynchronously // now all will be traversed, // though Post-ed messages to agent may still be in flight EDIT 2 Here is the waiting version that uses replies: open System.IO let agent = MailboxProcessor.Start(fun mbox -> async { while true do let! dir, (replyChannel:AsyncReplyChannel ) = mbox.Receive() printfn "%s" dir replyChannel.Reply() }) let rec traverse dir = async { let r = agent.PostAndAsyncReply(fun replyChannel -> dir, replyChannel) let subDirs = Directory.EnumerateDirectories(dir) do! [for d in subDirs do yield traverse d] |> Async.Parallel |> Async.Ignore do! r // wait for Post to finish } traverse "c:\\Projects\\" |> Async.RunSynchronously // now all will be traversed to completion
