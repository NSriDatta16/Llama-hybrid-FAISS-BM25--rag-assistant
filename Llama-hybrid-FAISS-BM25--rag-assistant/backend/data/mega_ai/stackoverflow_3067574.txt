[site]: stackoverflow
[post_id]: 3067574
[parent_id]: 
[tags]: 
function's return address is different from its supposed value, buffer overflow, HELP PLEASE

Good day everyone! I am trying to understand how buffer overflow works. Right now, I’m in the process of determining the address of a function’s return address which I’m supposed to change to perform a buffer overflow attack. I’ve written a simple program based from an example I’ve read in the internet. What this program does is it creates an integer pointer to store the address of the function's return address in the stack. To do this, (granted I understand how a function/program variables get organized in the stack), I add 8 to the buffer variable’s address and set it as the value of ret. I’m not doing anything here that would change the address contained in the location of func’s return address. UPDATE: I've modified the program a bit, so it prints the stack address of func's parameter a. As you can see, the distance between a and buffer is about 8 bytes, so that would probably mean, based from the stack layout, that saved FP and old EIP (func return address) is in between. Am I right? Here's the program: void func( int a){ char buffer[3]; int *ret; ret = buffer + 11; // this is the configuratio which made the whole program works... This now points to the address containing func's return address printf (" address of a is %d\n", &a); printf ("address of buffer is %x\n", buffer); printf ("address of ret is %x\n", ret); printf ("value of ret is %x\n", (*ret)); } void main(){ int num; num = 0; func(num); num = 1; printf("Num now is %d", num); } Output of the program when gets excecuted: alt text http://img20.imageshack.us/img20/2034/72783404.png As you can see, I’m printing the address of the variables buffer and ret. I’ve added an additional statement printing the value of the ret variable (supposed location of func return address, so this should print the address of the next instruction which will get executed after func returns from execution). Here is the dump which shows the supposed address of the instruction to be executed after func returns. (Underlined in green) As you can see, that value is way different from the value printed contained in the variable ret. alt text http://img717.imageshack.us/img717/8273/assemblycodecopy.png My question is, why are they different? (of course in the assumption that what I’ve done are all correct). Else, what have I done wrong? Is my understanding of the program’s runtime stack wrong? Please, help me understand this. My project is due nextweek and I’ve barely touched it yet. I’m sorry if I’m being demanding, I badly need your help.
