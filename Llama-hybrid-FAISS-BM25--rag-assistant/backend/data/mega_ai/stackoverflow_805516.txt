[site]: stackoverflow
[post_id]: 805516
[parent_id]: 805496
[tags]: 
Its not a Gang of Four design pattern, but the generally accepted solution when it is absolutely necessary to store data that is redundant to a calculation is to lazy-load it, and then keep a boolean value to describe whether it is still valid. In other words: class Person { List myPets; float averageAge; boolean isAgeValid = false; float getAverageAge() { if(isAgeValid) return averageAge; else ...calculate age, save it in averageAge, set bool to true, and return derived float... } //all list operations should mark the bool false void Add(Pet p) { myPets.Add(p); isAgeValid=false; } }
