[site]: crossvalidated
[post_id]: 114675
[parent_id]: 
[tags]: 
Standard errors of the fitted values of a time series regression

I really want to understand how the math is working here. I am trying to get the standard error of the fitted values for a time series regression model. In the non-time series regression, I know I can take the transpose of the data multiplied by the variance - covariance matrix of the model coefficients and then multiply by the data values again to get the standard errors of the fitted values. But I'm not sure how to do this when I am including an autoregressive term. require(forecast) require(tserieS) Response variable Sablects Covariates my.xreg In my actual data, values are normalized so I set the intercept equal to zero here. m4 The predict function will give me standard errors on my in-sample prediction (the fitted values of my model). my.se Now to compare the output of my.se, I want to do this mathematically but I don't know what to use for the values of the ar2 term. I use 1's as a placeholder to demonstrate that my output does not equal the values from my.se above C I think this value should equal the first value in my.se, but is not producing the same value as my.se sqrt(t(C[1, ]) %*% vcov(m4) %*% C[1, ]) Also, I'm not so great with matrix multiplication but here is my work around for getting all of the se values. se.output Specify that the max number of i is equal to number of rows of C . for(i in 1:nrow(C)){ # Loop through your multiplication for each row (i) of `C`. For each iteration, save the new data into the new row of se.output se.output[i]
