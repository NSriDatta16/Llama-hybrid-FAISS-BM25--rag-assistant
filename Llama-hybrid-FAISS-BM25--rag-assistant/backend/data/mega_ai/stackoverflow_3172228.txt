[site]: stackoverflow
[post_id]: 3172228
[parent_id]: 
[tags]: 
How to use php function to report form abuse

I have a contact form on my website, and everything works like a charm. I am using a anti-injection validation script, that I suspect is supposed to send a notification when somebody attempts to use header injection. I have tested this thouroghly and cannot determine why it will not notify me on the event of an abuse. The script is below. \r\n\r\n"; @mail ( $report_to ,"[ABUSE] mailinjection @ " . $_SERVER['HTTP_HOST'] . " by " . $ip ,"Stopped possible mail-injection @ " . $_SERVER['HTTP_HOST'] . " by " . $ip . " (" . date('d/m/Y H:i:s') . ")\r\n\r\n" . "*** IP/HOST\r\n" . $ip . "\r\n\r\n" . "*** USER AGENT\r\n" . $ua . "\r\n\r\n" . "*** REFERER\r\n" . $rf . "\r\n\r\n" . "*** REQUEST URI\r\n" . $ru . "\r\n\r\n" . "*** REQUEST METHOD\r\n" . $rm . "\r\n\r\n" . "*** SUSPECT\r\n--\r\n" . $value . "\r\n--" ,$headers ); } // Check 1 //First, make sure the form was posted from a browser. // For basic web-forms, we don't care about anything // other than requests from a browser: if(!isset($_SERVER['HTTP_USER_AGENT'])) { die('Forbidden - You are not authorized to view this page (0)'); exit; } // Cek 2 // Make sure the form was indeed POST'ed: // (requires your html form to use: action="post") if(!$_SERVER['REQUEST_METHOD'] == "POST") { die('Forbidden - You are not authorized to view this page (1)'); exit; } // Host names from where the form is authorized // to be posted from: $authHosts = array("cover.com"); // Where have we been posted from? $fromArray = parse_url(strtolower($_SERVER['HTTP_REFERER'])); // Test to see if the $fromArray used www to get here. $wwwUsed = strpos($fromArray['host'], "www."); // Make sure the form was posted from an approved host name. if(!in_array(($wwwUsed === false ? $fromArray['host'] : substr(stristr($fromArray['host'], '.'), 1)), $authHosts)) { logbad("Form was not posted from an approved host name"); die(' Forbidden - You are not authorized to view this page (2)'); exit; } // Attempt to defend against header injections: $badStrings = array("content-type:", "mime-version:", "content-transfer-encoding:", "multipart/mixed", "charset=", "bcc:", "cc:"); // Loop through each POST'ed value and test if it contains // one of the $badStrings: foreach($_POST as $k => $v) { foreach($badStrings as $v2) { if(strpos(strtolower($v), $v2) !== false) { logbad($v); die(' Form processing cancelled: string (`'.$v.'`) contains text portions that are potentially harmful to this server. Your input has not been sent! Please use your browser\'s `back`-button to return to the previous page and try rephrasing your input. '); exit; } } } // Made it past spammer test, free up some memory // and continuing the rest of script: unset($k, $v, $v2, $badStrings, $authHosts, $fromArray, $wwwUsed); /* If e-mail is not valid show error message */ $addr_spec = '([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c'. '\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d'. '\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)'. '(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e'. '\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|'. '\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c\\x00'. '-\\x7f)*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28'. '\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d'. '\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff'. ']|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20'. '\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40'. '\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-'. '\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*'; if (!preg_match("!^$addr_spec$!", $email)) { show_error("E-mail address not valid"); } if (strtolower($_POST['code']) != 'rowingcover') {die('The following error occured: Wrong anti-spam code. Go back ');} /* Let's prepare the message for the e-mail */ $message = "Cover.com Contact Form From: $subject $email Message $form "; /* Send the message using mail() function */ mail($myemail, $subject, $message, "From: $email"); /* Redirect visitor to the thank you page */ header('Location: contact_received.html'); exit(); /* Functions we used */ function check_input($data, $problem='') { $data = trim($data); $data = stripslashes($data); $data = htmlspecialchars($data); if ($problem && strlen($data) == 0) { show_error($problem); } return $data; } function show_error($myError) { ?> Please correct the following error: Go back I am relatively new to php, so any help would be much appreciated. Thanks, Matt
