[site]: crossvalidated
[post_id]: 235157
[parent_id]: 
[tags]: 
Improve results for feature extraction using a Neural Network

I'm working with data which is a vector which contains a blob, and I want to locate the width of the blob. This is an example of a dataset This is only an exercise to see how well I can implement a Neural Network (NN) to replace my current code - which works just fine - and it seems like a very simple problem. By fitting the background and the edges of the blob my manual implementation can identify the width of the blob with an accuracy of around 1/3 of a pixel. I can also acquire all the training data I want, but at the moment I'm working with 33000 training samples. I picked MATLAB as my tool of modelling because I had it installed and it was really fast to setup my first prototype network. My first step was to create a simple feedforward network with a single hidden layer and 20 neurons. After I trained the network, and I ran the trained network on the data to see how it looked. I didn't label my figures properly, but here is the raw result. The first plot is the expected result which was found by my old code. The second plot is the result of running the data through my neural network, and the last is the difference between them. It is clear that the NN is doing something right, but typically off by around 8 pixels. Which is quite a lot. My next attempt was to make a deeper model. I created one with 3 hidden layers, with 20, 10 and 5 neurons and ran it on a different dataset (because I didn't remember which dataset I used the first time). Again the results showed that the NN worked. In some areas of the dataset it is definitely performing better, and in some regions it looks like it performs the same. (Again, first: expected. second: calculated using my NN, third: difference) I then tried running the model on some brand new data. The results are much worse, but the general trend of the plot is correct. Question: Is this the kind of performance I should be expect with this amount of data, and how well should I expect a NN to perform in this task? I haven't been able to find any published papers on a problem which I think fitted my use case. Personally I do not understand why the network can't perform better - the problem seems to simple. Taking max and min of the first derivative would yield much better results. Is there any way to know if my network performs like this because it is to narrow? too shallow? or I have to few data points? NB: The data was of course normalized to unit variance and zero mean.
