[site]: datascience
[post_id]: 80255
[parent_id]: 80175
[tags]: 
First, let me point that knowing how to use PyTorch is not enough to work with neural networks. Second, your data points have about 450 elements from which 405 are binary (solid object or not), neural networks will require you to place then as real elements for training, dealing with floating points where you could make a faster processing using models that can deal with this kind of data. After training you can speed up predictions by changing the implementation of your layers to avoid the trivial multiplications with 1 and 0. Third, neural networks are not a silver bullet, you should try simpler models first, just to check it you actually need the power of a neural network and it's non-linearity. Check some alternatives and guides for time-series analysis . I woul go with a Random Forest or a decision tree, you should be able to make them fairly simple and then do an analysis of what's relevant for solving your problem. That said: First Step: Your data is composed of vectors that can be flattened to $R^{450}$ ( $15 \times (3 \times 3 \times 3 + 3)$ ) which is a fairly small vector, few fully connected layers (two or three should be enough) may solve your problem, that should be your first try (in neural network). Second Step If that doesn't suffice, you can try more complex models: Your data has the following format: $P = (x,y,z,t)$ , which is the position of a player in time. $D_{geo}(P) \in R^{3 \times 3 \times 3}$ , which is a tensor describing their surroundings. Since, $P$ resembles a time-series, LSMTs are usually indicated for this kind of analysis. Since you plan on using fixed time-steps, a CNN could be used, keeping data format as a tensor ( $T \in R^{3 \times 3 \times 3 \times t}$ ) and using few CNN layers to extract information from the geographical information and only then joining the positions with it (assuming you want a fast processing model). The actual shape of your CNN layers could will have to be tunned with a grid search.
