[site]: stackoverflow
[post_id]: 1314097
[parent_id]: 1308986
[tags]: 
So Mark has a good point, but let's say we want to avoid multiple tags tables, and the inherent redundancy with the tags themselves. we could: **Create a single Tags Table:** Tags { TagsID, TenantID, Name, CreatorID } **Documents:** TagMap_Documents { TagMap_DocumentsID, DocID, TagID } Documents { DocID, Location/Blob, ... } **Photos:** TagMap_Photos { TagMap_PhotosID, PhotoID, TagID } Photos { PhotoID, URL, PhotoBlob ... } Now we've introduced a new issue - the Tags table is denormalized. In Mark's scenario and in my own, here, we've introduced the generation of multiple tag names per tenant and creator, or of overloaded tenant and creator fields (multiple ID's in a single record). To fix that, we can: shift the entity and user context to the TagMap tables, and join to more than three tables. I think that this would be more efficient than what I laid out in my initial post because we've distributed the content. Create a single Tags Table: Tags { TagsID, Name } Leverage Tenant and User Tables Tenant { TenantID, Name, ... } Users { UserID, Name, ... } Documents: TagMap_Documents { TagMap_DocumentsID, DocID, TagID, TenantID, CreatorID } Documents { DocID, Location/Blob, private(bit), ... } Photos: TagMap_Photos { TagMap_PhotosID, PhotoID, TagID, TenantID, CreatorID } Photos { PhotoID, URL, PhotoBlob, private(bit), ... } shift the entity and user context to the content tables (documents, photos). The issue here is that the tags themselves are not entity or user specific, which can create noise in auto-completion/suggestion. Create a single Tags Table: Tags { TagsID, Name } Documents: TagMap_Documents { TagMap_DocumentsID, DocID, TagID } Documents { DocID, Location/Blob, TenantID, CreatorID, private(bit), ... } Photos: TagMap_Photos { TagMap_PhotosID, PhotoID, TagID } Photos { PhotoID, URL, PhotoBlob, TenantID, CreatorID, private(bit), ... } Looking for the silver bullet here, might require more thought than the entire hunt ;) If it wasn't then we wouldn't be having any fun then, anyway :)
