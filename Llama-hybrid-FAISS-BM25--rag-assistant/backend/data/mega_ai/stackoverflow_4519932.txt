[site]: stackoverflow
[post_id]: 4519932
[parent_id]: 
[tags]: 
Android List View

I am having a main Layout that is not having a list view and on button i am pop up a window in that pop up window i am having a button namely Add Event if i click Add Event button i vil raise another pop up in that there is a List View,. I wanna to list some string Array values in Pop up layout but if i have declare List in Pop up Layout i am getting error but if i create List ID in Main layout i am getting List View in Main Layout but what i want is that i wanna to display my List inside the Pop up layout... HERE is my Code... PLACE i am getting Error =-------------------------------------------------------------- setListAdapter(new ArrayAdapter (Main.this, android.R.layout.simple_list_item_1, mStrings)); getListView().setTextFilterEnabled(true); public class Main extends ListActivity implements OnClickListener { // String name, id_val, title_val, date_val, desc_val, link_val, linkname_val,name_val; // String[] PROJECTION = { BaseColumns._ID, Constants.TITLE}; // String[] FROM = { Constants.TITLE}; // int[] TO = { R.id.event_txt}; // private String[] mStrings = { "Abbaye de Belloc", "Abbaye du Mont des Cats", "Abertam", "Abondance", "Ackawi", "Bresse Bleu", "Brick", "Brie", "Brie de Meaux", "Brie de Melun", "Brillat-Savarin", "Brin", "Brin d' Amour", "Brin d'Amour", "Brinza (Burduf Brinza)", "Briquette de Brebis", "Briquette du Forez", "Broccio", "Broccio Demi-Affine", "Brousse du Rove", "Bruder Basil", "Brusselae Kaas (Fromage de Bruxelles)", "Bryndza", "Buchette d'Anjou", "Buffalo", "Burgos", "Butte", "Butterkase", "Button (Innes)", "Buxton Blue", "Cabecou", "Caboc", "Cabrales", "Cachaille", "Caciocavallo", "Caciotta", "Caerphilly", "Cairnsmore", "Calenzana", "Cambazola", "Camembert de Normandie", "Four Herb Gouda", "Fourme d' Ambert", "Fourme de Haute Loire", "Fourme de Montbrison", "Washed Rind Cheese (Australian)", "Waterloo", "Weichkaese", "Wellington", "Wensleydale", "White Stilton", "Whitestone Farmhouse", "Wigmore", "Woodside Cabecou", "Xanadu", "Xynotyro", "Yarg Cornish", "Yarra Valley Pyramid", "Yorkshire Blue", "Zamorano", "Zanetti Grana Padano", "Zanetti Parmigiano Reggiano"}; // ContentValues values = new ContentValues(); private final String[] months = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }; private static final String tag = "Main"; private Button selectedDayMonthYearButton; private Button currentMonth; private ImageView prevMonth; private ImageView nextMonth; private GridView calendarView; private GridCellAdapter adapter; private Calendar _calendar; private int month, year; private final DateFormat dateFormatter = new DateFormat(); private static final String dateTemplate = "MMMM yyyy"; private PopupWindow pw,pw1; TextView txt1; static ViewHolder holder; String title; private void getRequestParameters() { Intent intent = getIntent(); if (intent != null) { Bundle extras = intent.getExtras(); if (extras != null) { if (extras != null) { Log.d(tag, "+++++----------------->" + extras.getString("params")); } } } } /** Called when the activity is first created. */ @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.simple_calendar_view); _calendar = Calendar.getInstance(Locale.getDefault()); month = _calendar.get(Calendar.MONTH); Log.v("Months", ""+month); year = _calendar.get(Calendar.YEAR); Log.v("YEAR", ""+year); selectedDayMonthYearButton = (Button) this.findViewById(R.id.selectedDayMonthYear); selectedDayMonthYearButton.setText("Selected: "); prevMonth = (ImageView) this.findViewById(R.id.prevMonth); prevMonth.setOnClickListener(this); currentMonth = (Button) this.findViewById(R.id.currentMonth); currentMonth.setText(dateFormatter.format(dateTemplate, _calendar.getTime())); nextMonth = (ImageView) this.findViewById(R.id.nextMonth); nextMonth.setOnClickListener(this); calendarView = (GridView) this.findViewById(R.id.calendar); // Initialised adapter = new GridCellAdapter(getApplicationContext(), R.id.day_gridcell, month, year); adapter.notifyDataSetChanged(); calendarView.setAdapter(adapter); } @Override public void onClick(View v) { if (v == prevMonth) { if (month = 11) { month = 0; year++; } else { month++; } adapter = new GridCellAdapter(getApplicationContext(), R.id.day_gridcell, month, year); _calendar.set(year, month, _calendar.get(Calendar.DAY_OF_MONTH)); currentMonth.setText(months[_calendar.get(Calendar.MONTH)] + "-" +_calendar.get(Calendar.YEAR)); //currentMonth.setText(_calendar.getTime().toString()); adapter.notifyDataSetChanged(); calendarView.setAdapter(adapter); } } // Inner Class public class GridCellAdapter extends BaseAdapter implements OnClickListener { final ClipboardManager clipBoard = (ClipboardManager)getSystemService(CLIPBOARD_SERVICE); private static final String tag = "GridCellAdapter"; private final Context _context; private final List list; private final String[] weekdays = new String[] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" }; private final int[] daysOfMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }; private final int month, year; int daysInMonth, prevMonthDays; private final int currentDayOfMonth; private Button gridcell; // Days in Current Month public GridCellAdapter(Context context, int textViewResourceId, int month, int year) { super(); this._context = context; this.list = new ArrayList (); this.month = month; this.year = year; Log.d(tag, "Month: " + month + " " + "Year: " + year); Calendar calendar = Calendar.getInstance(); currentDayOfMonth = calendar.get(Calendar.DAY_OF_MONTH); printMonth(month, year); } public String getItem(int position) { return list.get(position); } @Override public int getCount() { return list.size(); } private void printMonth(int mm, int yy) { // The number of days to leave blank at // the start of this month. int trailingSpaces = 0; int leadSpaces = 0; int daysInPrevMonth = 0; int prevMonth = 0; int prevYear = 0; int nextMonth = 0; int nextYear = 0; GregorianCalendar cal = new GregorianCalendar(yy, mm, currentDayOfMonth); // Days in Current Month daysInMonth = daysOfMonth[mm]; int currentMonth = mm; if (currentMonth == 11) { prevMonth = 10; daysInPrevMonth = daysOfMonth[prevMonth]; nextMonth = 0; prevYear = yy; nextYear = yy + 1; } else if (currentMonth == 0) { prevMonth = 11; prevYear = yy - 1; nextYear = yy; daysInPrevMonth = daysOfMonth[prevMonth]; nextMonth = 1; } else { prevMonth = currentMonth - 1; nextMonth = currentMonth + 1; nextYear = yy; prevYear = yy; daysInPrevMonth = daysOfMonth[prevMonth]; } // Compute how much to leave before before the first day of the // month. // getDay() returns 0 for Sunday. trailingSpaces = cal.get(Calendar.DAY_OF_WEEK) - 1; if (cal.isLeapYear(cal.get(Calendar.YEAR)) && mm == 1) { ++daysInMonth; } // Trailing Month days for (int i = 0; i (Main.this, android.R.layout.simple_list_item_1, mStrings)); getListView().setTextFilterEnabled(true); } }); layout1.findViewById(R.id.event_bttn2).setOnClickListener(new OnClickListener(){ @Override public void onClick(View v) { // TODO Auto-generated method stub pw1.dismiss(); pw.dismiss(); } }); final EditText et=(EditText)layout1.findViewById(R.id.event_edit_txt); layout1.findViewById(R.id.event_bttn1).setOnClickListener(new OnClickListener(){ @Override public void onClick(View v) { // TODO Auto-generated method stub Log.v("GET TEXT",""+et.getText()); clipBoard.setText(et.getText()); Log.v("SET TEXT",""+clipBoard.getText()); //gridcell.getId(); title=clipBoard.getText()+""; Log.v("title",""+title); } }); } } static class ViewHolder { TextView text1; } }
