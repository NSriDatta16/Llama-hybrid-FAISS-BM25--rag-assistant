[site]: stackoverflow
[post_id]: 4282795
[parent_id]: 4281627
[tags]: 
It looks like what you are really wanting is a CompareValidator instead of what you are using. Rewrite your 3rd IF block so that it looks like this: if (!String.IsNullOrEmpty(TextBox2.Text) && !String.IsNullOrEmpty(TextBox1.Text)) { Response.Write("Executing Block 3"); ValidationTB.Text = null; CompareValidator CompareValidator1 = new CompareValidator(); CompareValidator1.Enabled = true; CompareValidator1.ErrorMessage = "Bad range of dates"; CompareValidator1.Display = ValidatorDisplay.Dynamic; CompareValidator1.Operator = ValidationCompareOperator.LessThan; CompareValidator1.Type = ValidationDataType.Date; CompareValidator1.ControlToCompare = TextBox2.ID; CompareValidator1.ControlToValidate = TextBox1.ID; Panel1.Controls.Add(CompareValidator1); CompareValidator1.Validate(); } This should give you the desired result. Now... lets talk about some other things going on here. First, unless you are just doing this as a proof of concept, then I highly encourage you to use the validators in a standard way . Nothing you are doing here requires that you add these validators in dynamically. Everything you want to accomplish can be achieved by simply adding the validators in the markup. Second, your Event Handler for the text changed event is probably not going to do what you want. As it stands right now, it will fire too late in the page lifecycle to catch errors before your Page_Load event. Your current code will throw an exception if I enter "Blah" into both of the text boxes because it will attempt to convert those to DateTime types. Lastly, when assigning ID's of existing controls you should use the ID property of that control instead of the Magic Strings you are using now. In this way you won't have to worry about changing the ID in multiple places if you decide to change it in markup. Anyway, I hope this helps.
