[site]: stackoverflow
[post_id]: 4299506
[parent_id]: 
[tags]: 
GLSL branching behaviour

I have a rather simple fragment shader with a branch and I'm a bit unsure how it is handled by the GLSL compiler and how it would affect performance. uniform sampler2D sampler; uniform vec2 texSize; uniform vec2 targetSize; void main() { vec4 color; if(texSize == targetSize) color = texture2DNearest(sampler, gl_TexCoord[0]); else color = texture2DBicubic(sampler, gl_TexCoord[0]); gl_FragColor = color; } I have read from an AMDs document that sometimes both branches are executed, which would not be a good idea in this case. Without further information nor access to disassembly I'm unsure what to think about this, and how to avoid it if it is a problem? And also from my understanding a branch based on a uniform variable will not incur any significant overhead since it is constant over a single pass?
