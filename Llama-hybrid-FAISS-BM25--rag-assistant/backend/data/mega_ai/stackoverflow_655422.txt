[site]: stackoverflow
[post_id]: 655422
[parent_id]: 655326
[tags]: 
I'd use a loop, but just for fun: IEnumerable AverageClumps(Queue lots, int clumpSize) { while (lots.Any()) { var portion = Math.Min(clumpSize, lots.Count); yield return Enumerable.Range(1, portion).Aggregate(TimeSpan.Zero, (t, x) => t.Add(lots.Dequeue()), (t) => new TimeSpan(t.Ticks / portion)); } } } That only examines each element once, so the performance is a lot better than the other LINQ offerings. Unfortunately, it mutates the queue, but maybe it's a feature and not a bug? It does have the nice bonus of being an iterator, so it gives you the averages one at a time.
