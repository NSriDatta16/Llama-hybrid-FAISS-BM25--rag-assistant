[site]: stackoverflow
[post_id]: 1806199
[parent_id]: 1800983
[tags]: 
Java's numbers internally are always in network byte order, even on systems where the native integers/doubles are not. This means that you can convert any number coming in to Java with any of the base input streams that do this kind of conversion - that implement java.io.DataInput. ByteBuffer also works if you are using a java.nio.Channel but there you can change the endianness ( ByteBuffer.order() ), though the default is correct for network byte ordering and Java internal storage. By the way, I think you mean to use htons but in the example you show ntohs . Sending from C++ you want to convert h ost order to n etwork order. Receiving from Java (or any client) your server would convert back using ntohs .
