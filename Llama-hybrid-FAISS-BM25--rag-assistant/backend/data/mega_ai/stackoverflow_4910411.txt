[site]: stackoverflow
[post_id]: 4910411
[parent_id]: 
[tags]: 
Why doesn't this D2006 code to fade a PNG Image work?

This question springs from an earlier one. Most of the code is from suggested answers that probably worked in later versions of Delphi. In D2006 I don't get the full range of opacity, and the transparent part of the image shows as white. Image is from http://upload.wikimedia.org/wikipedia/commons/6/61/Icon_attention_s.png . It is loaded from the PNGImageCollection into the TImage at run-time because I have found you have to do this as the image doesn't remain intact after the DFM is saved. For the purposes of demonstrating the behaviour you probably don't need the PNGImageCollection and can just load the PNG image into the TImage at design time and then run it from the IDE. There are four buttons on the form - each one sets a different value of opacity. Opacity=0 works fine (paintbox image is not visible, opacity=16 looks OK except for the white background, opacity=64, 255 are similar - the opacity seems to saturate at around 10%. Any ideas as to what's up? unit Unit18; interface uses Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms, Dialogs, ExtCtrls, pngimage, StdCtrls, Spin, PngImageList; type TAlphaBlendForm = class(TForm) PaintBox1: TPaintBox; Image1: TImage; PngImageCollection1: TPngImageCollection; Button1: TButton; Button2: TButton; Button3: TButton; Button4: TButton; procedure PaintBox1Paint(Sender: TObject); procedure FormCreate(Sender: TObject); procedure Button1Click(Sender: TObject); procedure Button2Click(Sender: TObject); procedure Button3Click(Sender: TObject); procedure Button4Click(Sender: TObject); private FOpacity : Integer ; FBitmap : TBitmap ; { Private declarations } public { Public declarations } end; var AlphaBlendForm: TAlphaBlendForm; implementation {$R *.dfm} procedure TAlphaBlendForm.Button1Click(Sender: TObject); begin FOpacity:= 0 ; PaintBox1.Invalidate; end; procedure TAlphaBlendForm.Button2Click(Sender: TObject); begin FOpacity:= 16 ; PaintBox1.Invalidate; end; procedure TAlphaBlendForm.Button3Click(Sender: TObject); begin FOpacity:= 64 ; PaintBox1.Invalidate; end; procedure TAlphaBlendForm.Button4Click(Sender: TObject); begin FOpacity:= 255 ; PaintBox1.Invalidate; end; procedure TAlphaBlendForm.FormCreate(Sender: TObject); begin Image1.Picture.Assign (PngImageCollection1.Items [0].PNGImage) ; FBitmap := TBitmap.Create; FBitmap.Assign(Image1.Picture.Graphic);//Image1 contains a transparent PNG FBitmap.PixelFormat := pf32bit ; PaintBox1.Width := FBitmap.Width; PaintBox1.Height := FBitmap.Height; end; procedure TAlphaBlendForm.PaintBox1Paint(Sender: TObject); var fn: TBlendFunction; begin fn.BlendOp := AC_SRC_OVER; fn.BlendFlags := 0; fn.SourceConstantAlpha := FOpacity; fn.AlphaFormat := AC_SRC_ALPHA; Windows.AlphaBlend( PaintBox1.Canvas.Handle, 0, 0, PaintBox1.Width, PaintBox1.Height, FBitmap.Canvas.Handle, 0, 0, FBitmap.Width, FBitmap.Height, fn ); end; end. ** This code (using graphics32 TImage32) almost works ** unit Unit18; interface uses Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms, Dialogs, ExtCtrls, pngimage, StdCtrls, Spin, PngImageList, GR32_Image; type TAlphaBlendForm = class(TForm) Button1: TButton; Button2: TButton; Button3: TButton; Button4: TButton; Image321: TImage32; procedure Button1Click(Sender: TObject); procedure Button2Click(Sender: TObject); procedure Button3Click(Sender: TObject); procedure Button4Click(Sender: TObject); private { Private declarations } public { Public declarations } end; var AlphaBlendForm: TAlphaBlendForm; implementation {$R *.dfm} procedure TAlphaBlendForm.Button1Click(Sender: TObject); begin Image321.Bitmap.MasterAlpha := 0 ; end; procedure TAlphaBlendForm.Button2Click(Sender: TObject); begin Image321.Bitmap.MasterAlpha := 16 ; end; procedure TAlphaBlendForm.Button3Click(Sender: TObject); begin Image321.Bitmap.MasterAlpha := 64 ; end; procedure TAlphaBlendForm.Button4Click(Sender: TObject); begin Image321.Bitmap.MasterAlpha := 255 ; end; end. ** (UPDATE) This code (using graphics32 TImage32) DOES work ** The following code is successful in assigning a PNG image to the Graphics32.TImage32 at run-time. The PNG image with alpha channel is loaded into a TPNGImageCollection (really useful component as it allows mixtures of images of arbitrary size) at design time. On form creation it is written to a stream, then read from the stream into the Image32 using LoadPNGintoBitmap32 . Once this is done I can control the opacity by assigning to TImage32.Bitmap.MasterAlpha. No bothering with OnPaint handlers. procedure TAlphaBlendForm.FormCreate(Sender: TObject); var FStream : TMemoryStream ; AlphaChannelUsed : boolean ; begin FStream := TMemoryStream.Create ; try PngImageCollection1.Items [0].PngImage.SaveToStream (FStream) ; FStream.Position := 0 ; LoadPNGintoBitmap32 (Image321.Bitmap, FStream, AlphaChannelUsed) ; finally FStream.Free ; end; end ;
