[site]: stackoverflow
[post_id]: 4469071
[parent_id]: 4469006
[tags]: 
Your Unit sounds like an ActiveRecord . While you could, in theory, have your Units collection do something like this: public function refreshAll() { foreach ($this->units as $unit) { if ($unit->isModified) { $unit->update() } } } I strongly discourage to do so because that would result in one query per Unit instance. Roundtrips to the database are most often a bottleneck. Just imagine you have to update a couple hundred or even thousand of instances. A better approach would be to just collect all the queries required in the next transaction and issue them in one request, e.g. something like public function refreshAll() { $sql = ''; foreach ($this->units as $unit) { if ($unit->isModified) { $sql .= $unit->getSql(); } } // these are dummy method calls. // i dont know if postgres supports transactions or multiqueries $this->dbAdapter->startTransaction(); $this->dbAdapter->multiQuery($sql); $this->dbAdapter->commitOrRollback(); } Another option would be to use a dedicated Unit of Work pattern. Excerpts at Google Books: Unit of Work in Martin Fowler's POEAA Unit of Work in Matt Zandstra's PHP Objects, Patterns and Practice Note that when using a Unit of Work, your also might want to consider to remove the database access code from your Unit instances completely (remove the ActiveRecord), because you are shifting the responsibility to save your objects into other classes then (which is good).
