[site]: stackoverflow
[post_id]: 3163175
[parent_id]: 3162896
[tags]: 
I'd need to see the full code for your form to really answer this (can you include it?) but here are some initial thoughts: Is FriendForm a subclass of django.forms.ModelForm ? If so, there's no need to override the save method -- especially since all you're doing here is getting the returned new object, saving it (again), and returning it (again) -- additional processing with no additional benefit. If FriendForm isn't a subclass of ModelForm , how is it bound to database data? What class is it inheriting from? UPDATE: ModelForms aren't connected directly to the database -- they are a shortcut for creating HTML forms for interacting with database models -- i.e. classes inheriting from django.models.Model . You do that by creating a Meta class within your ModelForm . With a ModelForm , you don't need to manually specify the fields (django does that automatically for you) unless you want to override specific behaviors. You do have to tell django which database Model you're like to use. If you've already defined a database Model , use it; if not, try this: # in models.py from django import models class Friend(models.Model): first_name = models.CharField( "see to adjust your syntax" ) ... your other fields ... # in forms.py from django.forms import ModelForm from my_project.my_app.models import Friend class FriendForm(ModelForm): class Meta: model = Friend That's it! Now your FriendForm should work properly. See http://docs.djangoproject.com/en/dev/topics/forms/modelforms/ for more information on using ModelForm s. Alternatively, you don't need to use a ModelForm at all. You could add the following save method to your existing FriendForm : def save(self): if self.is_valid(): from myproject.myapp.models import Friend new_friend = Friend(**self.cleaned_data) new_friend.save() return new_friend ... the essence here is that you're importing the Friend model, which encapsulates the database storage behaviors. This is basically what the ModelForm creates automatically for you, but not as robust -- so I recommend using ModelForm .
