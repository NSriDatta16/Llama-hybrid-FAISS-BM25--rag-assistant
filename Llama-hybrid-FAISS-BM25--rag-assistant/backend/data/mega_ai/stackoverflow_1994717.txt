[site]: stackoverflow
[post_id]: 1994717
[parent_id]: 1994702
[tags]: 
I don't think this is necessarily true. In Java (I can't comment on C#) a thread maps directly to a native thread. From here : The Java HotSpotâ„¢ virtual machine currently associates each Java thread with a unique native thread. The relationship between the Java thread and the native thread is stable and persists for the lifetime of the Java thread. plus you have the additional high level constructs such as the Executor framework. Going forwards, functional languages (such as F# and Scala) encourage immutability, which contribute to a safer threaded environment. There may well be scenarios where a low-level language offers more control (as for most requirements), but I suspect those will be fairly specialised situations. You have to balance that against the safety/productivity that the higher-level languages offer. EDIT : From your comments supplementing the question, this may relate to running a garbage collector and consequent garbage-collection pauses and the impact on providing real-time performance and predictability. Threading in C/C++ may well offer some benefits in this area since a garbage collection cycle is not going to kick off during some critical time-dependent code. For this reason (amongst others) Java can't be considered as a real-time platform.
