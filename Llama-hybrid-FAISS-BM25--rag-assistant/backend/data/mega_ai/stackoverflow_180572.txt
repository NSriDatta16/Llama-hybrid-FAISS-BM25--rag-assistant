[site]: stackoverflow
[post_id]: 180572
[parent_id]: 
[tags]: 
What is the best practice in defining a soap service (generic vs. specific operation)?

My situation is as follows: I have a normalized database, in which I hold geographic information about airports. The structure is: airport --is in--> city --is in--> country --is in--> continent Now I want to let users administrate this data, without giving them direct access to the database. We need to offer this administration interface via a web service. Now, when it comes to designing the service, we ran into the discussion about how to define the operations. We came up with different solutions: Solution A: specific operations For each of the four tables (airport, city, country, continent) we define 3 operations: insert get update This would lead to 12 operations with 2 request/response objects = 24 objects To create an all new airport with all dependencies, at least 4 requests would be necessary. Solution B: generic There is only one operation, which is controlled via parameters. This operation is capable of creating everything needed to administer the database. The operation would decide what needs to be done and executes it. If an error occures, it will roll back everything. ==> 1 Operation = 2 highly complex request/response-objects Solution C: Meet in the middle 1 One generic operation per table, which is capable of executing get, insert, update, just like solution B, but focused on one table each. ==> 4 operations = 8 complex request/response-objects Solution D: Meet in the middle 2 One generic operation per action (get, insert, delete), which can work on each table and resolve dependencies. ==> 3 operations = 6 slightly more complex request/response-objects Example Since this was rather abstract, hier a simplified example for request-objects for creating (JFK/New York/USA/North America): Solution A: Request 1/4: North America Request 2/4: USA Request 3/4: New York Request 4/4: JFK Solution B: Request 1/1: USA JFK North America New York Solution C: Request 1/4: USA Request 2/4: JFK Request 3/4: North America Request 4/4: New York Solution D: Request 1/1: Solution D seems rather elegant for me, therefore I tried to put this in XSD: Code: A corresponding request would then look like follows: Now my question: Is this really the best solution available? Is the XSD enough to understand, what is going on?
