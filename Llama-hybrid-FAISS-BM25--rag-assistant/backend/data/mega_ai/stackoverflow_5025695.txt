[site]: stackoverflow
[post_id]: 5025695
[parent_id]: 5013127
[tags]: 
As stated previously, SQLite, JavaDB and SimpleDB are good examples. I would add Berkeley DB to the list. Berkleley DB is well documented, has been around for several years, has several available APIs as well as multiple access methods like HASH, QUEUE and RECNO in addition to the traditional B-tree. Berkeley DB is a key/value database library written in C. Berkeley DB XML is an XML database library written in C++ on top of Berkeley DB. Berkeley DB Java Edition is a 100% Java key/value database library. All of them are available under a GPL-like license and the source code is included in the distribution . Berkeley DB's SQL API incorporates the SQLite API, basically implementing the BDB key/value pair data store underneath the SQLite query layer. Berkeley DB was also the first data storage implementation underneath MySQL, again taking a SQL query layer and storing the data in a simple key/data value data format. It's certainly an interesting way of looking at the problem -- if you have a flexible, fast, scalable, reliable data store, you can then layer any type of API or data representation/abstraction on top of it. This is exactly what Berkeley DB does, providing a choice between the core key/value pair data storage or XML, SQL, Java Collections or a POJO-like Persistence Layer on top of the base key/value pair infrastructure. Berkeley DB is about as close to a "pure" data storage engine as you're going to find. It makes no assumptions about structure, content or the format of the data being stored. It allows the upper layers to provide those abstractions while the lower layer focused on fast, scalable, reliable storage. That's one of the reasons why Berkeley DB is so widely used -- it's simplicity and focus makes it very fast, reliable and scalable. Disclaimer: I'm one of the Product Managers for Berkeley DB, so clearly I'm a little biased. But, I've also been working on database products for 25 years and I know a little about DBMS internals. :-) Good luck in your research. Dave
