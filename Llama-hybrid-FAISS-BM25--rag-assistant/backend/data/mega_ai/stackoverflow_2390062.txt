[site]: stackoverflow
[post_id]: 2390062
[parent_id]: 2388870
[tags]: 
Compared to "any key-value store", the key features for ZODB would be automatic integration of attribute changes with real ACID transactions, and clean, "arbitrary" references to other persistent objects. The ZODB is bigger than just the FileStorage used by default in Zope: The RelStorage backend lets you put your data in an RDBMS which can be backed up, replicated, etc. using standard tools. ZEO allows easy scaling of appservers and off-line jobs. The two-phase commit support allows coordinating transactions among multiple databases, including RDBMSes (assuming that they provide a TPC-aware layer). Easy hierarchy based on object attributes or containment: you don't need to write recursive self-joins to emulate it. Filesystem-based BLOB support makes serving large files trivial to implement. Overall, I'm very happy using ZODB for nearly any problem where the shape of the data is not obviously "square".
