[site]: stackoverflow
[post_id]: 2503615
[parent_id]: 2503444
[tags]: 
One advantage of TDD is that you end up writing code that is easier to write tests for. Writing code first and then the tests can result in code that superficially works the same, but is much harder to write 100% coverage tests for. Each case is likely to be different It might make sense to have a decorator to check whether a particular parameter is None (or some other unexpected value) if you use it in a bunch of places. Maybe it is appropriate to use the Null pattern - if the code is blowing up because you are setting the initial value to None, you could instead set the initial value to a null version of the object. More and more wrappers can add up to quite a performance hit though, so it's always better to write code from the start that avoids the corner cases
