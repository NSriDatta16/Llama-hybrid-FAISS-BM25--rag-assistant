[site]: stackoverflow
[post_id]: 4114588
[parent_id]: 4113964
[tags]: 
Depending on how much storage you have available, you can take a lookup-table approach. For instance, if you can spend 256 bytes, then the following function does it for a single uint32_t : static const int table[256] = { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 0, 0, }; int func(uint32_t b, int i) { b = (b > 24) & 0xFF] + 24 - (31-i) : table[(b >> 16) & 0xFF] + 16 - (31-i); } else { return ((b & 0xFF00) != 0xFF00) ? table[(b >> 8) & 0xFF] + 8 - (31-i) : table[(b >> 0) & 0xFF] + 0 - (31-i); } } I'm sure this can be optimised further. For instance, there are certainly ways to eliminate the expensive conditional branches; you can use the fact that boolean conditions evaluate to either 1 or 0 , and use them as multiplicands. If you have 64kB available, then you do this on 16-bit chunks at a time, and so on. Of course, doing random access on a large table might bring caching effects into play, so you'll need to experiment, and profile.
