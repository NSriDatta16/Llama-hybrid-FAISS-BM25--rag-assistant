[site]: stackoverflow
[post_id]: 868677
[parent_id]: 868592
[tags]: 
Let's take a step back and look at the overall architecture. In this scenario, you would typically have the TreeView display the data, a class type that represents the data, and the file/database/etc. as the storage for the data. The pattern should be that you load the data from the file/database/etc. into the custom class type that represents the entity. Next, you would bind that source to the TreeView (either using WPF binding or manually binding). Let's say you want each node in the tree to represent a music album. You would create a MusicAlbum class that is maybe composed of an Artist, album title, album date, SongList, etc. This data is serialized to and from a file/database/etc. Next, you bind that data to the TreeView. WPF supports binding directly to lists of custom objects or you can manually configure the binding. If you are newer to development, you might want to consider manually binding since it is a little easier to configure, and it will give you good practice. As far as the storage is concerned, I would recommend either a database (like SQLite) or an XML file. Since you are learning to develop, I recommend starting with an XML file. This is a good way of representing data and doesn't require the same overhead in complexity that a database does. If you were taking this to a production level, I would definitely recommend a database. EDIT: The question itself is a little vague so you might want to be more specific as to what you are exactly asking for. Do you want code samples of TreeView binding or are you wanting guidance or overall structure?
