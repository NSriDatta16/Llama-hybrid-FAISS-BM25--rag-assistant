[site]: stackoverflow
[post_id]: 285357
[parent_id]: 285286
[tags]: 
How many sets will you have? Something that might work if they aren't too sparse is: Iterate over the first element of all arrays counting how common each string is. Whichever element is the most common is selected. Check each element of all arrays for said string. If it exists in any element other than the first of an array, the first element of its parent array is selected and goto step 3. Remove the selected element from the first element of all arrays/trees and add it to the end of your output list. Goto 1 until all elements are removed. If you dumped the arrays into b-trees the element search could be pretty fast. You may also be able to further speed up step 3 by playing with the order of the arrays. I'm still thinking about that. If the arrays are very sparse the only thing I can think of is to use some kind of supervised machine learning to try to determine the proper method for ordering.
