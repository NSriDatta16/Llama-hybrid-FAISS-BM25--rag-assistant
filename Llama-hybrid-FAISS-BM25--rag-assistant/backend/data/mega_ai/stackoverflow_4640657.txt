[site]: stackoverflow
[post_id]: 4640657
[parent_id]: 4640542
[tags]: 
I would actually disagree with Sarfraz and say that you should avoid using and tags in your page body as much as possible. The advantages of moving your JS to an external file are endless. The most obvious include: leveraging on browser caching - if you just write code in your body, that's extra kilobytes of data that need to be loaded for every page. If it's a universal function, you're wasting precious load time. If it were in an external file, most modern browsers cache that file and only request a new version so often. This decreases server load as well (less requests) Furthermore, if you ARE using a similar script on multiple pages, what happens if you need to make a change :(. Now you're running around searching for every instance of a tag to make a change. Having all your code centrally located and universal allows for ONE change and DONE Versioning - if you use version control (GIT, SVN, etc), it's much easier to track and revert one file (if you made a mistake or accidentally lost code) than all of them CSS share a similar story. Again, with caching and centralized storage, and reusability. It's even more important, however, for styles to match on a website. From a UI standpoint, you don't want your fonts changing from page-to-page and you don't want to edit 40 pages every time you want to add a new style. As far as having the JS in the document because you are using AJAX loaded content, I suggest you look into .bind and .live . They let you attach handlers to existing and future instances of a DOMObject. For example: $('.class').live('click', function(){ alert('I was clicked!'); }); This will apply to any object that existed at page load AND objects that are later created. The following code will NOT - it only applies to objects created on load: $('.class').click(function(){ alert('I was clicked!'); });
