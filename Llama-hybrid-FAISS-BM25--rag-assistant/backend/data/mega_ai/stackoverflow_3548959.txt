[site]: stackoverflow
[post_id]: 3548959
[parent_id]: 3548668
[tags]: 
The delivery mechanism doesn't matter - you can do this in asp.net or a desktop application without consuming a ridiculous amount of memory. The general principle is that you need to access the data as a stream instead of loading it into memory all at once. When you handle streamed data, you only deal with a subset of your results at any given time. When you move to the next record in a stream, you're signaling that you're finished with the previous record, so the .NET runtime can reclaim the memory used manipulate it. In C# this means using a DataReader (normally obtained via IDbCommand.ExecuteReader ). A typical fragment that writes directly to the HttpResponse stream using a data reader might look like this (though you can databind to them as well): using(IDataReader reader = dataAccessLayer.GetData()) { if (! reader.IsClosed) { // Send writes to the client immediately // reader.Read advances the reader to the next record in the // result set and discards the current record while (reader.Read()) { // Do something with the record - this just writes the first // column to the response stream. Response.Write(reader[0]); // Send the content to the client immediately, even if the content // is buffered. The only data in memory at any given time is the // row you're working on. Response.Flush(); } } }
