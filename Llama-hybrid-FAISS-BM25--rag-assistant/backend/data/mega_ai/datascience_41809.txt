[site]: datascience
[post_id]: 41809
[parent_id]: 9702
[tags]: 
I guess you want to extract all the logic followed by the different trees to end up on the final regressor. For that, you need to extract first the logic of each tree and then extract how those paths are followed. Scikit learn can provide that through .decision_path(X), with X some dataset to predict. From here you'll get an idea on how the random forest predicts and what logic is followed at each step. Once you extracted the decision_path, you can use Tree Interpreter to obtain the "formula" of the Random Forest you trained. I am not familiar with this Tree Interpreter, but it seems to work directly on the modeler you have trained, i.e., from treeinterpreter import treeinterpreter as ti # fit a scikit-learn's regressor model rf = RandomForestRegressor() rf.fit(trainX, trainY) prediction, bias, contributions = ti.predict(rf, testX)
