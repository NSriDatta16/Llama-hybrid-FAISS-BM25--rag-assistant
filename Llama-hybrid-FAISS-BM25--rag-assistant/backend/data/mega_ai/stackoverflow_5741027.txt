[site]: stackoverflow
[post_id]: 5741027
[parent_id]: 5740976
[tags]: 
c++ doesn't allow declaring a whole class as static Of course it does. class RandomClass { public: RandomClass() { srand(time(0)); } int NextInt(int high, int low) { return (rand() % (high - low)) + low; } } RandomClass Random; //Global variable "Random" has static storage duration //C# needs to explicitly allow this somehow because C# does not have global variables, //which is why it allows applying the static keyword to a class. But this is not C#, //and we have globals here. ;) Really though, there's no reason to put this in a class. C++ does not force you to put everything in classes -- for good reason. In C# you are forced to put everything into a class and declare things in static methods and such, but that is not ideomatic C++ . You really can't just take ideomatic C# code, and write that in C++, and expect it to work well. They are very different languages with very different requirements and programming characteristics. If you want an ideomatic C++ way to do this, don't make a class at all. Call srand inside your main , and define a function that does your clamping: int RandomInteger(int high, int low) { return (std::rand() % (high - low)) + low; } EDIT : Of course, it would be better for you to use the new random number generation facility and uniform_int_distribution to get your clamped range instead of rand . See rand() considered harmful .
