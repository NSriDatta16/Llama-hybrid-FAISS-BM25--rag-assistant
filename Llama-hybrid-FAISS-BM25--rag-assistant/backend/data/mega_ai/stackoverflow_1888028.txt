[site]: stackoverflow
[post_id]: 1888028
[parent_id]: 1887111
[tags]: 
Do you mean you have a Y-shape, like this: list1: A -> B -> C -> D -> E -> F list2: X -> Y -> Z -> E -> F Where A .. Z are singly-linked list nodes. We want to find the "merge point" E, which is defined to be the first node appearing in both lists. Is that correct? If so, then I would attach the last node of list2 (F) to the first node of list2 (X). This turns list2 into a loop: list2 : X -> Y -> Z -> E -> F -> X -> ... But more importantly: list1 : A -> B -> C -> D -> E -> F -> X -> Y -> Z -> E -> ... This reduces the question to a previously-solved problem , which can be solved in O(n) time and O(1) additional storage. But reading your question, another possibility is that by "merge" you mean "insert". So you have two lists like this: list1: A -> B -> C list2: D -> E -> F and then another completely separate list: list3: A -> B -> D -> E -> F -> C where this time, A .. F are the values contained in the list, not the nodes themselves. If the values are all different, you just need to search list3 for D (or for the later of D and A, if you don't know which list it was that was copied into the other). Which seems like a pointless question. If values can be repeated, then you have to check for the full sequence of list2 inside list3. But just because you find "DEF" doesn't mean that's where list2 was inserted - maybe "DEF" already occurred several times in list1 beforehand, and you've just found the first of those. For instance if I insert "DEF" into "ABCDEF", and the result is "ABCDEFDEF", then did I insert at index 3 or at index 6? There's no way to tell, so the question can't be answered. So, in conclusion, I don't understand the question. But I might have answered it anyway.
