[site]: stackoverflow
[post_id]: 3871342
[parent_id]: 3871241
[tags]: 
You should note that the User object is serialized when you put it in the session of your app. User LoginUser = new User(); It has some consequences: 1) the User class must be serializable. 2) When you will access the object later, (see Oded answer), it will be deserialized from the session: You won't keep the same reference. User loginUser = new User(); loginUser.Name="user1"; Session["User"] = LoginUser; loginUser.Name = "user2"; var loginUser2 = (User)Session["User"]; => loginUser2.Nam contains "user1"; Why does it work this way? When you put an object in the session, the .NET framework will store it somewhere, (perhaps in server memory, in a file or in a DB depending upon the session storage mecanism). To persist your object, it will be serialized (transformed into a sequence of bytes). The serialization process is described in MSDN . The serialization process is quite parametrable, and the subject is quite large. Too large to be covered in this post in fact. To make a serializable class, you can simply add the Serializable attribute to the class, and ensure that all the class fields or properties are serializables too. [Serializable] public class MyClass { public string Field{get,set} }
