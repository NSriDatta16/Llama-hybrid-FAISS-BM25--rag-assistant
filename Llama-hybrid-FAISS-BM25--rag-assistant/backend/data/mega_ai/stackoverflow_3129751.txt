[site]: stackoverflow
[post_id]: 3129751
[parent_id]: 3127060
[tags]: 
Most multi-tenant applications in the SAAS world seem to run on a single database using a unique identifier (client or account id) to keep data separate. It is pretty simple to code and it works. You can create tests and and auditing to your deployment process to ensure that data remains private. However, I would also suggest having a look at Postgresql schemas. Using a schema lets you have a single database "split" into a number of unique schemas with controlled access. More details here: Should I use multiple databases? . As to the second part of your question regarding the number of instances - it is really going to depend on the app itself and how much RAM it is using. 100 read/writes operations a day is so small as to be irrelevant, so RAM is the operant factor. An "average" Rails app will use anything from 20-100mb per instance, so a 2GB server should be able to run quite a few. Of course, your deployment will become quite complicated as you will need to run within a virtual-hosting environment to get this setup effectively. My vote would definitely be for a single app.
