[site]: stackoverflow
[post_id]: 4888627
[parent_id]: 4888228
[tags]: 
You want to leverage @XmlElementRef this is corresponds to the XML schema concept of substitution groups which corresponds to your question. Step 1 - Using @XmlElementRef The fruitList property is annotated with @XmlElementRef: import java.util.ArrayList; import java.util.List; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlElementRef; import javax.xml.bind.annotation.XmlRootElement; @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class Project { @XmlAttribute private String name; @XmlElementRef private List fruitList = new ArrayList (); } Step 2 - Annotate Apple and Orange with @XmlRootElement import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class Apple extends Fruit { @XmlAttribute private String appleKey; } and import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class Orange extends Fruit { @XmlAttribute private String orangeKey; } Demo Code The following code can be used to demonstrate the solution: import java.io.File; import javax.xml.bind.JAXBContext; import javax.xml.bind.Marshaller; import javax.xml.bind.Unmarshaller; public class Demo { public static void main(String[] args) throws Exception { JAXBContext jc = JAXBContext.newInstance(Project.class, Apple.class, Orange.class); Unmarshaller unmarshaller = jc.createUnmarshaller(); Project project = (Project) unmarshaller.unmarshal(new File("input.xml")); Marshaller marshaller = jc.createMarshaller(); marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true); marshaller.marshal(project, System.out); } } For More Information: http://bdoughan.blogspot.com/2010/11/jaxb-and-inheritance-using-substitution.html
