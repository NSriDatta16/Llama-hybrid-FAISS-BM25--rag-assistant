[site]: stackoverflow
[post_id]: 5352221
[parent_id]: 5348327
[tags]: 
import re pat = re.compile('(?!\.)' '.+' '\.' '(?:(? . EDIT: You are right, ridgerunner, [^.] is better than (?!\.) : it's more readable, more logic and slightly faster, -4 % (I tested) . I also compared '(?!\.).+?\.(?:EXE|(? ( there is .+? instead of .+ ) With this RE, execution is longer. The additional time depends of the number of dots in the tested names. On names like '78999.abc.juty.123.dat' it is around 15 % longer, and on names like '123.dat' it's 3 % longer. I think the reason is that the regex motor examine after each reading of a character if the read character is a dot or not. On the contrary, with '.+\.' the regex motor goes until the end, and then come back to search the last dot. I think it is a correct explanation because, if the RE '(?!\.).+?\.(?:EXE|(? is tested on names like '123.teybertyhbeythbeytberyetynetynetnyetnydat' , the time is again longer (+ 30 %) . I realized that my RE is very similar to the Ignacio's one, and I wondered why I wrote this RE as it seems to have no particular interest. In fact, at the beginning, my idea was to write '(?!\.).+?(? and then I wrote another string. By the way, with this abandonned RE , the execution time is 25 % longer on short names and 74 % longer on long names. Finally, when I tested the execution times, Ignacio's solution is 25 % longer on short names ( '123.dat' ) and 47 % longer on long names ( '78999.abc.juty.123.dat' ) Best regex is then pat = re.compile('[^.]' '.+' '\.' '(?:(? I let '.+' , not replaced by '.*' , because there must be at least 4 characters in the name if we want the name to end with '.exe' or '.EXE'
