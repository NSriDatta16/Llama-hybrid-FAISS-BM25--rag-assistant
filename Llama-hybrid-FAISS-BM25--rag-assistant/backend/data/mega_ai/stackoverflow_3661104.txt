[site]: stackoverflow
[post_id]: 3661104
[parent_id]: 3189898
[tags]: 
Obviously (as no one answered) there is no such a thing to use out of the box. So I had to come up with one myself. To create the commandline file I copied net.sourceforge.cobertura.util.CommandLineBuilder ( source ) which has addArg() , saveArgs() and getCommandLineFile() methods. To execute the commandline with that file I used org.codehaus.plexus.util.cli.Commandline as commonly used in MOJOs. Commandline cl = new Commandline(); cl.setExecutable( COMMAND_CLASS ); cl.createArg().setValue( TASK_CLASS ); CommandLineBuilder builder = new CommandLineBuilder( "macker" ); for ( Iterator/* */it = options.iterator(); it.hasNext(); ) { builder.addArg( (String) it.next() ); } builder.saveArgs(); String commandsFile = builder.getCommandLineFile(); cl.createArg().setValue( commandsFile ); StringStreamConsumer stdout = new StringStreamConsumer(); StringStreamConsumer stderr = new StringStreamConsumer(); int exitCode = CommandLineUtils.executeCommandLine( cl, stdout, stderr ); The "other" side has to unpack the arguments. I wrote a small class CommandLineFile ( source ) for that. String className = args[0]; Class clazz = Class.forName( className ); Method main = clazz.getMethod( "main", new Class[] { String[].class } ); List/* */lines = new ArrayList/* */(); Reader in = new InputStreamReader( new FileInputStream( args[1] ), "UTF-8" ); try { lines = IOUtils.readLines( in ); } finally { in.close(); } main.invoke( null, new Object[] { lines.toArray( new String[lines.size()] ) } ); The only problem that remained is the need for CommandLineFile to be on the classpath. But that is another story... All used classes are generic and open source. So they could be used for any forking problem.
