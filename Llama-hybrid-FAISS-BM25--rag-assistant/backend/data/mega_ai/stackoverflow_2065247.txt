[site]: stackoverflow
[post_id]: 2065247
[parent_id]: 2065105
[tags]: 
This is because 1 is a immutable datatype in python, i.e. you can't change the value of it. To make it work like a pointer, you need a mutable datatype as storage, which you can do yourself with a class definition class Mutable(object): pass a = Mutable() a.value = 1 d = {'a':a} a.value = 3 d['a'].value equals 3 at this point. If you really want, you can overload operators etc. so that you get the same semantics as for normal integers, but I'd suggest you instead take a look at some functional programming patterns to see why immutable types are nice.
