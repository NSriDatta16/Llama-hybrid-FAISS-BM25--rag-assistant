[site]: stackoverflow
[post_id]: 3506366
[parent_id]: 3506299
[tags]: 
In order: Laziness is the property of only evaluating expressions as you need to, rather than when you possibly could. A lazy list is one which could possibly be infinite. Obviously attempting to evaluate an infinite list would be a bad idea if the evaluation were not lazy. I'm not sure what "non-vicious" means, but I think you'll find that having the value "2" as a known prime provides a base case for the recursion, i.e. it provides a particular input upon which the program will terminate. Writing a recursive function (or indeed a set of mutually recursive functions) usually involves reducing some input value towards this base case in successive steps of application. For reference, program fragments of this shape are usually called mutually recursive . The term "circular reference" is not one you'd really apply in this case.
