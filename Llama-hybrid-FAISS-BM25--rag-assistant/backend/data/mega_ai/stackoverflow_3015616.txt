[site]: stackoverflow
[post_id]: 3015616
[parent_id]: 3015311
[tags]: 
Your code wrong at C side also. __inout annotation just tell compiler you can change buffer to which "c" argument pointed. But pointer itself located in stack and does not return to caller if you modified "c" argument. Your declaration may look like: extern "C" { TRADITIONALDLL_API int TestStrRef( __inout char** c) { int rc = strlen(*c); std::cout >" And C# side: [DllImport("MyDll.dll", SetLastError = true)] static extern int TestStrRef(ref IntPtr c); { String abc = "InOut string"; IntPtr ptrOrig = Marshal.StringToHGlobalAnsi(abc) IntPtr ptr = ptrOrig; // Because IntPtr is structure, ptr contains copy of ptrOrig int len = TestStrRef(ref ptr); Marshal.FreeHGlobal(ptrOrig); // You need to free memory located to abc' native copy string newAbc = Marshal.PtrToStringAnsi(ptr); // You cannot free memory pointed by ptr, because it pointed to literal string located in dll code. }
