[site]: stackoverflow
[post_id]: 2624747
[parent_id]: 2624695
[tags]: 
The memory for i is taken from the stack , or what in C is sometimes called "automatic storage." The contents of memory allocated from the stack are no longer valid after the function declaring that storage has returned. For example, your isGoal() function allocates stack storage for the variable i and the storage exists only until the point in time when isGoal() returns. The reason you see the address of i , &i has already existed during your program is that the stack memory area is continually reused. Prior to what you see in gdb, you have stored the address of a stack variable in node->path->next . To obtain memory which remains valid after the allocating function has returned, you must use malloc() and free() to obtain what is called "dynamic memory" or, sometimes, memory from the "heap."
