[site]: stackoverflow
[post_id]: 4190580
[parent_id]: 4190513
[tags]: 
For a start, I don't think it's a good idea to be giving common.h to the compiler in the makefile: @$(CC) $(C_FLAGS) -c sgbd_server.c common.h This would be better as just: @$(CC) $(C_FLAGS) -c sgbd_server.c Header files are usually incorporated with just an #include . You appear to be telling the compiler to try and compile common.h as a standalone C file. That's one difference between the client and server compile commands and you should fix it. The only other thing I can suggest is that you may not be getting the header files you think you're getting. Start by putting the line: #error Urk! in common.h at the top of your common.h and ensure the build fails there. If not, then that file is coming from somewhere else. You may also want to do the same thing with your sgbd_server.h file as well. Based on your edit: I found some .ghc files sitting in my source folder. Since they are not cleaned by make clean, I deleted manually those files. Guess what? No warning. What are those files and why are they created? These are, assuming ghc was a typo and you meant gch , pre-compiled headers generated by gcc , at least in part to speed up the compilation process. Rather than having to process a header file many times during a build (once per source file that includes it), pre-compiling it once and using the pre-compiled version is a lot more efficient. I think this was most likely cause by the fact that you included common.h on your compiler command line when you did the server. By default, header files given directly to gcc will be turned into pre-compiled header files and used in preference after that point. To test this, I created a qq.h file and executed gcc qq.h and out popped qq.h.gch . It's quite likely, given that deleting them solved your problem, that these files were somehow causing your issues (be that the presence of pre-compiled headers older than the real headers or something else entirely). There's a good chance that your compile line: @$(CC) $(C_FLAGS) -c sgbd_server.c common.h would first compile the server program, including the old precompiled header, then make a new precompiled header out of the newer header file. That's probably why a change to common.h had no (immediate) effect. You would have to make ; touch common.h ; make to ensure the newer pre-compiled header file was used in the server program. Whether you want to track it back to the root cause and get a proper explanation is a matter of taste - there's a school of thought that you should sometimes just record how you fixed it and not worry too much, lest you become entangled in the very nature of reality itself. Not me of course, I'm the personality type that will attempt to track my problems back to the individual sub-atomic particle that caused it, but sometimes pragmatism requires me to let it go :-)
