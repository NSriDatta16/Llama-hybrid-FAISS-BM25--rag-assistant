[site]: stackoverflow
[post_id]: 4827328
[parent_id]: 
[tags]: 
gcc inline asm embedding pointer to .rodata in .text, x86

I'm trying to embed a pointer to a string in the code section using inline assembler. But gcc is adding a $ to the start of the symbol name, causing a link error. Here is a minimal example, static const char str[] = "bar"; int main() { __asm__ __volatile__ ( "jmp 0f\n\t" ".long %0\n\t" "0:" : : "i" ( str ) ); return 0; } building with gcc -Wall -save-temps test.c -o test gives the error test.o: In function `main': test.c:(.text+0x6): undefined reference to `$str' looking at the .s temp file, can see the additional $ prepended to str .file "test.c" .section .rodata .type str, @object .size str, 4 str: .string "bar" .text .globl main .type main, @function main: .LFB0: .cfi_startproc pushq %rbp .cfi_def_cfa_offset 16 movq %rsp, %rbp .cfi_offset 6, -16 .cfi_def_cfa_register 6 #APP # 4 "test.c" 1 jmp 0f .long $str 0: # 0 "" 2 #NO_APP movl $0, %eax leave ret .cfi_endproc .LFE0: .size main, .-main .ident "GCC: (Ubuntu/Linaro 4.4.4-14ubuntu5) 4.4.5" .section .note.GNU-stack,"",@progbits Think i am doing this the correct way, as the same approach works on ppc gcc, b 0f .long str 0: Then again, maybe it is just "luck" it works for ppc. Is the issue because $ is used as a prefix for immediates when using the AT&T synax ? In this simple example, i can work around the issue by hardcoding the symbol name, "str", in the inline assembler, but really need it to be an input constraint to the inline assembler. Does anyone have any ideas on how to get this working on x86 targets ? Thanks, - Luke
