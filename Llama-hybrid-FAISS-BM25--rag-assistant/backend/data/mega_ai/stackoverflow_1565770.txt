[site]: stackoverflow
[post_id]: 1565770
[parent_id]: 1565510
[tags]: 
I don't see how you can achieve this using an unmodified "vanilla" Hash - I'd expect that you'd need to get into the internals in order to make partitioning into some kind of bulk memory-copying operation. How good is your C? I'd be more inclined to look into partitioning instead of creating a Hash in the first place, especially if the only reason for the 200K-item Hash existing in the first place is to be subdivided. EDIT: After thinking about it at the gym... The problem with finding some existing solution is that someone else needs to have (a) experienced the pain, (b) had the technical ability to address it and (c) felt community-friendly enough to have released it into the wild. Oh, and for your OS platform. What about using a B-Tree instead of a Hash? Hold your data sorted by key and it can be traversed by memcpy(). B-Tree retrieval is O(log N), which isn't much of a hit against Hash most of the time. I found something here which might help, and I'd expect there'd only be a little duck-typing wrapper needed to make it quack like a Hash. Still gonna need those C/C++ skills, though. (Mine are hopelessly rusty).
