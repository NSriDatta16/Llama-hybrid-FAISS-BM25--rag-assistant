[site]: stackoverflow
[post_id]: 5642732
[parent_id]: 5628993
[tags]: 
Rather than looking for other libraries, how about looking for a better way to compute the width of mixed-size/style text? float width = ColumText.getWidth(phrase); Phrase extends ArrayList with various text layout functions and attributes. Paragraph extends Phrase. Each chunk has a specific Font with its own color, size, and underlying PDF font. Each chunk has its own "text rise" to adjust its baseline. What version of iText are you using? ColumnText has been around for Quite Some Time. So you want kerning between normal & superscript letters? That doesn't sound like a very good idea to me. Kerning is an adjustment so 'T' can overhang "j" for example. Kerning values assume a shared baseline and font size. You'll never share a baseline, and almost certainly have different font sizes when dealing with superscript text. And even if you decide it's a good idea to use those values (and I'd disagree), do you kern in the base text's point size, or the superscript's font size? My point is that I think your goal here (kerned superscript/subscript text boundaries with normal text) is going to result in worse layout, not better. Or am I misunderstanding you? Let me re-read your comment: But when you also want to position it this text that includes superscript on the page you need to use PdfContentByte. Not entirely sure what you mean there. If you want to place text in an arbitrary location on the page, yes, you're pretty much required to use PdfContentByte . When using it I did not find the way to print complex text that includes superscript at once. All the text in a given "show text" command must share the same font/size/color/etc. That's the way PDF works, its not some limitation of iText. I think it only allows to print one text chunk in the time. Correct. So I cannot measure text with superscript taking kerning into account and then put it on the some position on the page You need to add all the widths of the different chunks together. I can't believe kerning between normal and superscript text is a good idea, but a PDF sample showing the problem could persuade me otherwise. It seems to me you need to use BaseFont.getWidthPointKerned(String text, float fontSize) . Superscript, subscript, or normal, it's all about the point size and font. And if you Absolutely Insist, you can use BaseFont.getKerning(int c1, int c2) to get the kerning value between any two letters within the same font , and use that to determine inter-chunk kerning. Another way to draw text with iText & PdfContentByte is with ColumnText . I believe iText uses ColumnText when laying out paragraphs, but I'd have to go look at the code to be sure. At any rate, your code might look something like this: ColumnText colTx = new ColumnText(contByte); // paragraphs are phrases. colTx.addText(phraseWithSuperAndSubScriptStuff); colTx.setSimpleColumn(llx, lly, urx, ury); colTx.go();
