[site]: stackoverflow
[post_id]: 4289009
[parent_id]: 4288214
[tags]: 
DTrace can do this, but only in the iPhone Simulator (it's supported by Snow Leopard, but not yet by iOS). I have two writeups about this technology on MacResearch here and here where I walk through some case studies of using DTrace to look for specific methods and when they are called. For example, I created the following DTrace script to measure the number of times methods were called on classes with the CP prefix, as well as total up the time spent in those methods: #pragma D option quiet #pragma D option aggsortrev dtrace:::BEGIN { printf("Sampling Core Plot methods ... Hit Ctrl-C to end.\n"); starttime = timestamp; } objc$target:CP*::entry { starttimeformethod[probemod,probefunc] = timestamp; methodhasenteredatleastonce[probemod,probefunc] = 1; } objc$target:CP*::return /methodhasenteredatleastonce[probemod,probefunc] == 1/ { this->executiontime = (timestamp - starttimeformethod[probemod,probefunc]) / 1000; @overallexecutions[probemod,probefunc] = count(); @overallexecutiontime[probemod,probefunc] = sum(this->executiontime); @averageexecutiontime[probemod,probefunc] = avg(this->executiontime); } dtrace:::END { milliseconds = (timestamp - starttime) / 1000000; normalize(@overallexecutiontime, 1000); printf("Ran for %u ms\n", milliseconds); printf("%30s %30s %20s %20s %20s\n", "Class", "Method", "Total CPU time (ms)", "Executions", "Average CPU time (us)"); printa("%30s %30s %20@u %20@u %20@u\n", @overallexecutiontime, @overallexecutions, @averageexecutiontime); } This generates the following nicely formatted output: Class Method Total CPU time (ms) Executions Average CPU time (us) CPLayer -drawInContext: 6995 352 19874 CPPlot -drawInContext: 5312 88 60374 CPScatterPlot -renderAsVectorInContext: 4332 44 98455 CPXYPlotSpace -viewPointForPlotPoint: 3208 4576 701 CPAxis -layoutSublayers 2050 44 46595 CPXYPlotSpace -viewCoordinateForViewLength:linearPlotRange:plotCoordinateValue: 1870 9152 ... While you can create and run DTrace scripts from the command line, probably your best bet would be to create a custom instrument in Instruments and fill in the appropriate D code within that instrument. You can then easily run that against your application in the Simulator. Again, this won't work on the device, but if you just want statistics on the number of times something is called, and not the duration it runs for, this might do the job.
