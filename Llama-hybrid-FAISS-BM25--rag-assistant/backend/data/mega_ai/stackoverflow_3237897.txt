[site]: stackoverflow
[post_id]: 3237897
[parent_id]: 3237562
[tags]: 
After some playing around the best method I can think of is like so: Create a file called SingletonBase.php and include it in root of your script! The code is abstract class SingletonBase { private static $storage = array(); public static function Singleton($class) { if(isset(self::$storage[$class])) { return self::$storage[$class]; } return self::$storage[$class] = new $class(); } public static function storage() { return self::$storage; } } Then for any class you want to make a singleton just add this small single method. public static function Singleton() { return SingletonBase::Singleton(get_class()); } Here is a small example: include 'libraries/SingletonBase.resource.php'; class Database { //Add that singleton function. public static function Singleton() { return SingletonBase::Singleton(get_class()); } public function run() { echo 'running...'; } } $Database = Database::Singleton(); $Database->run(); And you can just add this singleton function in any class you have and it will only create 1 instance per class. Just another idea you can also do if(class_exists('Database')) { $Database = SingletonBase::Singlton('Database'); } and at the end of your script you can do some dfebugging if you need too, at the end of your script you can just do foreach(SingletonBase::storage () as $name => $object) { if(method_exists("debugInfo",$object)) { debug_object($name,$object,$object->debugInfo()); } } so this method will be great for a debugger to get access to all classes and object states that have been initialized
