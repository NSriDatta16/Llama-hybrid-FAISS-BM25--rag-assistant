[site]: stackoverflow
[post_id]: 5587069
[parent_id]: 5586889
[tags]: 
I suggest you look into the Entity-Attribute-Value model . This offers great flexibility with regards to changes to the logical schema and with regards to cardinality. Various EAV implementations and particulars are discussed in stackoverflow postings , maybe you can start with this one because it generally covers the type of questions asked here. For example when the application evolves and requires additional kinds of preferences, the physical schema (the supporting SQL tables) do not have to be modified at all, the new preference becomes an entry in the Attribute table. The main drawbacks with the EAV model are the slightly more complicated table structure and also loss of efficiency (say with million plus entities). With plain relational model, the data model more readily apparent in the database [physical] schema. Le loss of efficiency comes mainly from the fact that the Values table only stores one Attribute value at a time (preventing the creation of combined indexes etc) and can get rather big, relative to the number of records which would be required for storing the same data in plain relational form. Edit (regarding performance) I've been relatively successful with data instances of up to 4 million rows each/most with a dozen attributes on average. The precise "mileage" we can get out of this varies with the sparsity of the data and the relative selectivity of some attribute values. There are several "tricks of the trade" which improve performance, at the cost of further complicating the implementation: storing the most commonly shared, singled-value, attributes within the Entity table rather than (or in addition to) the Values table. using multiple Value tables. Such "partitions" can be driven by data type, Range of Attribute IDs...
