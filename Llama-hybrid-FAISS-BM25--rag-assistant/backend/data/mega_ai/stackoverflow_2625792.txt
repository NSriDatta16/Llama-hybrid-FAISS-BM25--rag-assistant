[site]: stackoverflow
[post_id]: 2625792
[parent_id]: 2624440
[tags]: 
It may help to break this task down a bit differently. There are two key parts to this task: 1) finding the starting point of potential sub-string matches and 2) testing whether that starting point is indeed a matching sub-string. Therefore, implement this as two functions. First , create a function that determines if two strings are exactly alike. This should be relatively easy to code, just compare first letter with first letter, second with second, etc. If you find two that don't match, return false. If you make it to the end of one of the strings, return true. If you are allowed to use strncmp , then this would simply be (strncmp(a, b, strlen(b)) == 0) (assuming b is always the shorter string). Second, create a function that loops through a string, looking for a certain letter. Whenever it finds that letter, it calls a function and passes a pointer to that letter in the string. In other words, if you called my_function("This is a sample string", 's') , then the function should walk through the string, find all four instances of the letter 's' and call a function using a pointer to that letter in the string. In this case, the function you will call is the function described in the previous paragraph. Using this breakdown, you will return "true" as soon as any of the calls to the sub-function return "true", or you will return "false" if you make it to the end of the input string.
