[site]: stackoverflow
[post_id]: 4563258
[parent_id]: 4563160
[tags]: 
Well, there are a couple of things I notice right off the bat here. First off, you talk about needing to be able to do things with your own code. If you are the copyright holder, you can do pretty much anything you damn well please with your own code. The license is for other people, not for you. Also, disclaiming any responsibility for what the code may do to other folks is pretty much boilerplate with any license. That being said, I've found in my work I can get by with the use of only 3 different kinds of licenses, depending on my needs. Full on GPL Benifits: Nobody can ever take any of the code propreitary (without coming to me for a relicense). They can still use it and charge people, but since they'd have to license the result GPL, that wouldn't be particularly practical. The reason is that any of their users could give away all the free copies they like. The sources are avilable for anybody to contribute to, so I might not have to find and fix every damn bug and write every new feature myself. Drawbacks: None of the code is usable in a properitary app I use this typically for stand-alone apps. GPL with linking exceptions This is basically what it says; GPL with an exception that meerly linking against (or #including) the code does not render the entire result GPL. Here's an example from the Classpath library . Benifits: Nobody can ever take the code itself proprietary. The code can be used in a proprietary product without making the whole closed-source product open-source. Only the GPL-licensed stuff has to stay GPL. Drawbacks: The facility itself can never be expanded into a proprietary facility. Generally a plus in my book, but it does deter some people from using it. I use this typically for helper facilities and API's . Public Domain This means anyone can do anything they like with this code, including making a tiny tweak, slapping their own copyright on it and calling it theirs. Benifits: Anybody can feel free to use it however they like. Drawbacks: No protection from the code getting "stolen" by a proprietary software seller. Impossible to do in may jurisdictions (a permissive BSD I understand can be a good alternative there). I use this when I'm publishing something incomplete that I really want someone else to take over, or when publishing something that is supposed to be a reference implementation for a standard library. Now in a case like yours what I would do is either: Use GPL with the linking exceptions for the library. That will allow everyone (including you) to use the library in a proprietary application, but the library itself will always stay Free. Use GPL, and insist that contributions from others have their copyrights assigned back to you. This allows you full rights to make your own proprietary app using other people's contributions, and doesn't allow anyone else (including those contributors) that same right. Kinda cheesy in my book, and will probably discourage outside contributors. However, only the most successful Free Software projects get any outside contributors anyway. So it may not be that much of a loss. It came to my attention recently that Bruce Perens (one of the founders of OSI) actually made a blog post a year earlier that made the exact same point . He picked two different licenses than I did for the latter two though. He picked LGPL for the intermediate license, which I think is a mistake on his part. However, he picked the Apache License 2.0 for the latter license, and I think he may have a point on that one. The benefit you get from using Apache over straight Public Domain is that you are better protected from patent lawsuits. That isn't something poor little me really has to worry about, but your company is a different matter entirely.
