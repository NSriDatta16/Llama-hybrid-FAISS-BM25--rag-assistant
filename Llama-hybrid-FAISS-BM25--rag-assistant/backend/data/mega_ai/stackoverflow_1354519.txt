[site]: stackoverflow
[post_id]: 1354519
[parent_id]: 1354312
[tags]: 
The second method is the decidedly more idiomatic Flash way of handing things. AS3 has the event model build right into EventDispatcher and all DisplayObjects inherit from it. That means any Bitmap , Sprite or MovieClip immediately knows if it is clicked. Think of the Flash Player as your controller. When I do MVC in Flash I almost never write a controller because the Flash Player does it for you. You're wasting cycles determining what was clicked on when the Flash Player already knows. var s:Sprite = new Sprite(); s.addEventListener(MouseEvent.CLICK, handleMouseClick); function handleMouseClick(event:MouseEvent):void { // do what you want when s is clicked } I'd probably not directly access a controller from inside a sprite (probably in the view). Instead I would dispatch an event (probably a specific custom event that matched the circumstance). Make your decisions on how many times per-frame something happens. Responding to a user interaction (e.g. mouse-click) usually gives you the freedom not to worry about the overhead in event systems. Finally - the reason I suggest this has nothing to do with some Ivory Tower concept of OOD or OOP. Principles such as these exist to help you not constrain you. When it comes down to a matter of pragmatics, go with the easiest solution that won't cause you headaches down the line. Sometimes that means doing OOP, sometimes it means functional, sometimes it means imperative.
