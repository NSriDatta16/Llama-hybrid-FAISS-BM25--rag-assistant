[site]: crossvalidated
[post_id]: 563192
[parent_id]: 562874
[tags]: 
Bootstrap is a generic and simple method for your question. assume your raw data like this: randomization unit is user_id: each user have a consistent treatment and may have multiple visits/transactions, ending with a purchase or not y can be purchase amount or is purchased(0/1) library(boot) library(tidyverse) df_raw 1 1 0 0 2 1 0 100 3 1 0 0 4 2 1 30 5 3 0 0 6 3 0 0 7 4 0 0 8 5 1 10 9 5 1 0 10 6 0 0 # This is a little different from the standard bootstrap t-test, which fixes the A/B group sample size, but more like a case resample bootstrap regression get_stat % # we resample user not transaction, for the randomization unit is user inner_join(df_user[inds, ], by = 'user_id') %>% summarise( # transaction level transaction_cnt_0 = sum(if_else(treat == 0, 1, 0)), transaction_cnt_1 = sum(if_else(treat == 1, 1, 0)), # user level user_cnt_0 = n_distinct(if_else(treat == 0, user_id, NA_real_)), user_cnt_1 = n_distinct(if_else(treat == 1, user_id, NA_real_)), y0 = sum(if_else(treat == 0, y, 0)), y1 = sum(if_else(treat == 1, y, 0)), # y0 = max(if_else(treat == 0, y, 0)), # y1 = max(if_else(treat == 1, y, 0)), # average sales per user diff_user = y1 / user_cnt_1 - y0 / user_cnt_0, # average sales per transaction diff_transaction = y1 / transaction_cnt_1 - y0 / transaction_cnt_0 ) %>% pull(diff_user) } boot_res # if you hava a large sample, this may hava compute problems # boot.ci(boot_res, type = 'bca') boot.ci(boot_res, type = 'basic') ```
