[site]: stackoverflow
[post_id]: 3670389
[parent_id]: 3670266
[tags]: 
If you can't rotate in Z, then you can only shoot a cube at the same Z height that the gun is at. This makes things a lot simpler because you can sort your cubes by Z and throw away any that are too high or too low (this will take log(N) time in the number of cubes if they can be at fractional heights; if they're all the same height and all at the same height as each other, you just index into that portion of the array). Now you need to draw a line from the gun through the grid and find out which cube it hits first. The way to do this is with a vector along the line of the gun: v = (cos(angle), sin(angle)) and find each boundary where that line crosses an integer in either X or Y. If we are at (x0,y0) to start with and travel in direction v then we will hit (assuming cos(angle) > 0) ceil(x0), ceil(x0+1), ... at times (ceil(x0)-x0)/cos(angle), (ceil(x1)-x1)/cos(angle), ... and similarly for y0 and sin(angle) . Now you just walk down the list of times--which will take you into a new square--and the first time you encounter a cube, you hit it. If the cube array is not gigantic, this whole thing should take only a few microseconds on a decent processor (maybe a few hundred or so on an embedded processor).
