[site]: datascience
[post_id]: 28503
[parent_id]: 28491
[tags]: 
Keeping the values as zeros will introduce some bias to your network. Given, you have this corner effect for the majority of your dataset, you do not want the network to identify a high probability of making the corners black. Thus, you should fill them, you can extend the edge, do a reflection, wrapping. You can also do some more complex function, like take average of a few patches in your image then place them in the missing areas. Keras has a very nice function that can do all this for you. import numpy as np from keras.datasets import mnist from keras.preprocessing.image import ImageDataGenerator import matplotlib.pyplot as plt %matplotlib inline # load data (X_train, y_train), (X_test, y_test) = mnist.load_data() X_train = X_train.astype('float32') # set up your data generator datagen = ImageDataGenerator( featurewise_center=True, featurewise_std_normalization=True, rotation_range=15, width_shift_range=0.2, height_shift_range=0.2, shear_range=0.2, zoom_range=0.2, horizontal_flip=True, vertical_flip = False) # Fit the generator using your data datagen.fit(X_train.reshape((len(X_train), 28, 28, 1))) # Black images image = X_train[5] plt.imshow(image, cmap='gray') plt.show() plt.figure(figsize=(12,12)) plt.subplot(4, 4, 1) plt.imshow(image.reshape((28,28)), cmap='gray') for j in range(15): augmented = datagen.random_transform(image.reshape((28,28,1))) plt.subplot(4, 4, j+2) plt.imshow(augmented.reshape((28,28)), cmap='gray') plt.tight_layout() plt.show() # White images image = -1*X_train[5] plt.imshow(image, cmap='gray') plt.show() plt.figure(figsize=(12,12)) plt.subplot(4, 4, 1) plt.imshow(image.reshape((28,28)), cmap='gray') for j in range(15): augmented = datagen.random_transform(image.reshape((28,28,1))) plt.subplot(4, 4, j+2) plt.imshow(augmented.reshape((28,28)), cmap='gray') plt.tight_layout() plt.show()
