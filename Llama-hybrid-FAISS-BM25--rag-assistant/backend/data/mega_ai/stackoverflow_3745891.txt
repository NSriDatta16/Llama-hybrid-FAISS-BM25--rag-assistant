[site]: stackoverflow
[post_id]: 3745891
[parent_id]: 3745831
[tags]: 
The first thing is: Do server-side caching anyway, using Memcache or Redis or whatever. So you're defended against three machines doing the requests. But you knew that. I think you're onto the right thing with cookies, frankly (but see below for a more modern option) — they are shared by all window instances, easily queried, etc. Your polling logic could look something like this: On polling interval: Look at content cookie: Is it fresher than what you have? If so, use it and you're done. Look at status cookie; is someone else actively polling (e.g., cookie is set and not stale)? If yes, come back in a second. Set status cookie: I'm actively polling at (now). Do request On response: If the new data is newer than the (possibly updated) contents of the content cookie, set the content cookie to the new data Clear status cookie if you're the one who set it Basically, the status cookie acts as a semaphore indicating to all window instances that someone, somewhere is on the job of updating the content. Your content cookie might contain the content directly, or if your content is large-ish and you're worried about running into limits, you could have each page have a hidden iframe, each with a unique name, and have your Ajax update write the output to the iframe. The content cookie would publish the name of the most up-to-date iframe, and other windows seeing that there's fresh content could use window.open to get at that iframe (since window.open doesn't open a window if you use the name of an existing one). Be alert to race conditions. Although JavaScript within any given page is single-threaded (barring the explicit use of web workers ), you can't expect that JavaScript in the other windows is necessarily running on the same thread (it is on some browsers, not on others — heck, on Chrome it's not even the same process ). I also don't know that there's any guarantee of atomicity in writing cookies, so you'll want to be vigilant. Now, HTML5 defines some useful inter-document communication mechanisms , and so you might consider looking to see if those exist and using them before falling back on this cookie approach, since they'll work in modern browsers today but not in older browsers you're probably having to deal with right now. Still, on the browsers that support it, great! Web storage might also be an option worth investigating as an aspect of the above, but your clients will almost certainly have to give your app permissions and it's also a fairly new thing.
