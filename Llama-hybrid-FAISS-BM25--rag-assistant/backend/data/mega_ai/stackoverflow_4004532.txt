[site]: stackoverflow
[post_id]: 4004532
[parent_id]: 4001944
[tags]: 
I have used data-warehousing technique here, hence the dim and fact table names. dimDate is so-called date dimension, one row per a date. dimCandidate has all candidate data, new and old records. In data-warehousing terms this is called type 2 dimension. One candidate can have several rows in this table, only one of them having r_status = 'current'. Fields , r_valid_from date , r_valid_to date , r_version integer -- (1, 2, 3,..) , r_status varchar(10) -- (expired, current) describe a record (row) status. Each time a candidate status changes, a new row is inserted and the pervious row's r_valid_to and r_status are modified. CandidateFullName is a business (natural) key and has to uniquely identify a candidate. No two candidates can have the same CandidateFullName . Note that the CandidateKey uniquely identifies a row in the table, while CandidateFullName uniquely identifies a candidate. dimVoter has voter data, new and old records -- just like the dimCandidate . dimCampaign describes campaign details, this is so-called type one dimension, does not hold historical data. factRating has the Rating measure. Normaly this would be enough, but there is the reqirement to interpolate the missing data for a day; for that, an aggregate table aggDailyRating is introduced. At the end of a day, a scheduled job aggregates ratings for the day. This job takes care of the data-interpolation requirement. This way the aggregate table has one row for each date-(valid) candidate-campaign combination. Note that voter is not included in the combination, data is aggregated over all voters. Any reporting is done on the aggregate table, for example -- -- monthy rating for years 2009-2010 -- for candidate john_smith_256 -- select CalendarYear , MonthNumber , avg(DailyRating) as AverageRating from aggDailyRating as f join dimDate as d on d.DateKey = f.DateKey join dimCandidate as c on c.CandidateKey = f.CandidateKey where CandidateFullName = 'john_smith_256' and CalendarYear between 2009 and 2010 group by CalendarYear, MonthNumber order by CalendarYear desc, MonthNumber desc ;
