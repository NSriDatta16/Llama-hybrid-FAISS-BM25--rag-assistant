[site]: stackoverflow
[post_id]: 16381
[parent_id]: 16340
[tags]: 
The hash code of an object does not need to be unique. The checking rule is: Are the hash codes equal? Then call the full (slow) Equals method. Are the hash codes not equal? Then the two items are definitely not equal. All you want is a GetHashCode algorithm that splits up your collection into roughly even groups - it shouldn't form the key as the HashTable or Dictionary<> will need to use the hash to optimise retrieval. How long do you expect the data to be? How random? If lengths vary greatly (say for files) then just return the length. If lengths are likely to be similar look at a subset of the bytes that varies. GetHashCode should be a lot quicker than Equals , but doesn't need to be unique. Two identical things must never have different hash codes. Two different objects should not have the same hash code, but some collisions are to be expected (after all, there are more permutations than possible 32 bit integers).
