[site]: stackoverflow
[post_id]: 5116043
[parent_id]: 
[tags]: 
Merging sorted arrays, what is the optimum time complexity?

I have m arrays, every array is of length n. Each array is sorted. I want to create a single array of length m*n, containing all the values of the previous arrays (including repeating values), sorted. I have to merge these arrays.. I think the optimum time complexity is m*n*log(m) Here's the sketch of the algorithm.. I create a support array H of lenth m, containing all the values of the first element of each array. I then sort this array (m log m), and move the min value to the output array. I then replace the moved value with the next one, from the array it was taken. Actually I don't replace it, but I insert it in the right (sorted) position. This take log m I think. And I repeat this for all m*n values... therefore m*n*log m My question.. can you think of a more efficient algorithm? If mnlogm is actually optimum, can you at least think of a simpler, more elegant algorith?
