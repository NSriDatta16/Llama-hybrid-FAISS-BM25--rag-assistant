[site]: stackoverflow
[post_id]: 4766837
[parent_id]: 4717535
[tags]: 
Work your way through this article to make sure you don't have any misunderstanding of what the setup resources do, how they work, and how you can troubleshoot them. Once you've done that, from everything you've said on this question thread it sounds like you're getting your resource "installed", but that your install script never runs. My guess is that the version number you used in //0.0.1 is your version number mysql4-install-0.0.1.php didn't match up with the version of your module ?.?.? Those should match for the script to run. I think Magento is smart enough to run previous versions if it finds them, but the code in the setup resources is the kind that's hard to follow, so I always make sure they match. Regardless, here's how you can see which file(s) magento is trying to run when it runs your setup resource. Delete any entries from core_resource related to your module. Clear your cache. Then find the following locations in the setup class app/code/core/Mage/Core/Model/Resource/Setup.php : protected function _modifyResourceDb($actionType, $fromVersion, $toVersion) { ... $sqlFilesDir = Mage::getModuleDir('sql', $modName).DS.$this->_resourceName; if (!is_dir($sqlFilesDir) || !is_readable($sqlFilesDir)) { return false; } ... $sqlDir->close(); if (empty($arrAvailableFiles)) { return false; } ... $arrModifyFiles = $this->_getModifySqlFiles($actionType, $fromVersion, $toVersion, $arrAvailableFiles); if (empty($arrModifyFiles)) { return false; } and then modify them to add some temporary debugging exceptions if (!is_dir($sqlFilesDir) || !is_readable($sqlFilesDir)) { throw new Exception("$sqlFilesDir not found"); return false; } ... if (empty($arrAvailableFiles)) { throw new Exception("No files found to run"); return false; } ... $arrModifyFiles = $this->_getModifySqlFiles($actionType, $fromVersion, $toVersion, $arrAvailableFiles); if (empty($arrModifyFiles)) { throw new Exception("No valid upgrade files found to run for "); return false; } throw new Exception("If you're getting here, we have a file. Remove your exceptions here and place one in your installer to make sure it's the one you think it is."); Reload the page and you'll get exception text complaining about whatever Magento can't find. That should be enough to help you track down which installer script Magento is trying to run, but failing to find. Just remember to delete your module's row in core_resource and to clear your cache. (Magento caches which modules need to check for an install/upgrade) If that doesn't work, start digging into the logic of applyAllDataUpdates and figure out why the class isn't including your installer file.
