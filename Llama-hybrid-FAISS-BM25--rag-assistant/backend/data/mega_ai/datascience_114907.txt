[site]: datascience
[post_id]: 114907
[parent_id]: 64235
[tags]: 
I would reccomend you to try this classical additive or multiplicative decomposition approach from professor Hyndmann ( link to the chapter of his book , where he talks about this specifically https://otexts.com/fpp2/classical-decomposition.html ) ; it is very easy to implement in python. To summarise the approach (for additive): Take the Moving average of order Q to extract the trend from your data. trend = MA(Q) Do y-trend = detrended_y To estimate the seasonal component for each season, simply average the detrended values for that season. For example, with monthly data, the seasonal component for March is the average of all the detrended March values in the data. These seasonal component values are then adjusted to ensure that they add to zero. The seasonal component is obtained by stringing together these monthly values, and then replicating the sequence for each year of data. This gives the seasonal component. If you want, get the residual by doing y-trend-seaonsal_component=residual . If you need some guidance performing the implementation please let me know and I'll post it as well.
