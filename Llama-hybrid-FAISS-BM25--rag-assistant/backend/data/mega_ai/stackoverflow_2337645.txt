[site]: stackoverflow
[post_id]: 2337645
[parent_id]: 2337279
[tags]: 
yes both the repository and the factory make sense. a few comments about the factory: i'd remove the switch ($type) and create methods for each type of Votable object. so instead of VotingRepositoryFactory::createVotingRepository( 'comment' ); i'd prefer VotingRepositoryFactory::createCommentVotingRepository(); the reason being that it's easy to forget to add a new case to the switch, while (i'm not sure about php, but) compiled languages will tell you when a called method is missing. also remembering what strings you can send into the factory method as $type is hard, while most intelligent IDEs will tell you what methods exist on a class/object. another idea would be to add a singleton that could be called like VotingRepositoryFactory::Instance->createCommentVotingRepository(); . the "Instance" could then be a DatabaseVotingRepositoryFactory or a FakeVotingRepositoryFactory (for unit testing) or any other implementation of a VotingRepositoryFactory. that way you could easily replace the implementation of the VotingRepositoryFactory if you want to write unit tests or switch to some other storage system. just a few ideas..
