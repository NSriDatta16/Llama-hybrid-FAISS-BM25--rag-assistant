[site]: stackoverflow
[post_id]: 4574536
[parent_id]: 3637668
[tags]: 
Since both are formally programming languages, what you can do in one, you can do in the other. Actually it is a design emphasis issue. Shell languages are designed for interactive use, while scripting languages aren't. The basic difference in the design is the storage of data between commands and the scope of variables. In Bash, etc. you have to jump through hoops to store a value (for example, commands like set a='something' ), while in languages like Python you simply use an assignment statement ( a = 'something' ). When using the values in a shell language you have to tell the language that your want the value of the variable, while in scripting languages you have to tell the language when you want the immediate value of the string. This has effects when used interactively. In a scripting language where ls was defined as a command a = some_value ls a*b (What does a mean? Does this mean some_value * (whatever b is) or do you mean 'a'anystring'b'?. In a scripting language the default is what is stored in memory for a.) ls 'a*b' Now means what the Unix ls a*b means. In a Bash-like language set a=some_value ls a*b means what the Unix ls a*b means. ls $a*b uses an explicit recall of the value of a. Scripting languages make it easy to store and recall values and hard to have a transient scope on a value. Shell languages make it possible to store and recall values, but have a trivially transient scope per command.
