[site]: stackoverflow
[post_id]: 1184363
[parent_id]: 1184181
[tags]: 
In short JSON is a decent interop option, in particular for javascript. If it suffices, what's the point of XML? For more complex data, json is less advantageous in my mind. XML may be less "efficient", but I've rarely had any issue with that - but the forced naming of elements in xml means that it's often a lot easy to debug - this is in particular true for projects that span several organisations - B2B interop, say. XML has better tooling in the form of XSLT, XSD, integration into many languages (VB.NET's native XML, say, and LINQ to XML), and it's more naturally "open" - it's easier to extend XML with a new element without disrupting the old schema, whereas a list in json contains unnamed items, making functional collisions more likely. Of course, you can work around all these things in JSON, but that requires foresight and planning effort. Finally, though most languages have decent XML support, javascript in particular does not, making building XML something a pain unless you use a few helper functions (The DOM does not win any design prizes here). In short; I use XML for all data-interchange and likely to be longer-term complex API's, and json specifically for lightweight client server stuff where a strict API isn't needed and thus xml's imperfect match to OO and slightly heavier weight transmission are a drag that's not matched by any of it's benefits. If you're going to do a quick bit of AJAX updating, JSON works fine and lets you avoid the OO/XML impedance mismatch (and the smaller serialization is icing on the cake). I've never worked on a large-enough application where the bandwidth savings of JSON made an impact, but if you're google or microsoft, I'm sure that's a significant benefit too (and you'll probably need to spend oodles on planning and foresight anyhow, since any API you release will quickly become a dependancy anyhow.)
