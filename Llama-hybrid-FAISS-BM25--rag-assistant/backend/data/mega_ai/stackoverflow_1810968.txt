[site]: stackoverflow
[post_id]: 1810968
[parent_id]: 1771350
[tags]: 
You can certainly create a Java-language stored procedure and put it into PostgreSQL. But why not keep it simple and debuggable until you know you have your messaging scheme working perfectly? If I were doing this (I am actually doing something similar) here's what I'd do. (1) create an "outbound message" table with columns for the payload and other info for your JMS messages. I'd put a timestamp column in each row. (2) write a database trigger for each item that you want to generate a message. Have the trigger INSERT a row into your "outbound message" table. (3) unit test (1) and (2) by looking at the contents of your outbound message table as you change stuff in your database that should generate messages. (4) write yourself a simple but high-performance Java JDBC client program that will query this outbound message table, send a JMS message for each row, and then DELETE it. Order the rows in your query by timestamp to preserve your message order. To get it to be high performance you'll need to do a good job with PreparedStatement objects and other aspects of heap management. (5) Unit test (4) by running it a few times while message-generating changes are happening to your data base. (6) set up this program to repeat operation (6) several times a minute, while using a single persistent JDBC connection. Queries to a small or empty table aren't very expensive, so this won't smack down your table server. (7) system test this whole setup. (8) figure out how to start your Java program from your crontab or your startup script. When you get all this working you'll have a functioning messaging / notification system ready for systems integration. More importantly, you'll know exactly what you want your Java message-originating software to do. Once you're up and running, if the latency of your messages or the database overhead proves to be a big problem, then you can migrate your Java program into a stored procedure. Note also that there are message-origination bindings for PERL and other languages built into the Apache ActiveMQ package, so you have some choices about how you implement your message-originating agent. This approach happens to have two advantages: you aren't critically dependent on postgreSQL's distinctive stored-procedure scheme, and you aren't putting code with external communications dependencies into your table server. Good luck.
