[site]: stackoverflow
[post_id]: 5584788
[parent_id]: 
[tags]: 
Is there a more elegant way to conditionally insert into a std::map of std::maps?

I have nested containers std::map > and want to populate them properly, either inserting a new sub map or appending to the sub map if the integer key exists. So I came up with something like the following example: int n = ...; int m = ...; obj get_some_random_obj(int i, int j); // returns some object std::map > container; // prepopulated container // insert some new obj's. Create a new sub map if key i is not found in container, // append to existing sub map otherwise for(int i = 0; i >::iterator found = container.find(i); obj newobj = get_some_random_obj(i,j); std::pair newpair(j, newobj); if(found != container.end()) { found->second.insert(newpair); } else { std::map newmap; newmap.insert(newpair); container.insert(std::make_pair(i, newmap)); } } } Two questions: Is there a more elegant (more efficient?) way to write this? How can one make the above code more abstract, so that it becomes possible to populate containers with type std::map with U and T arbitrary types? I have tried to come up with a template function, but couldn't get it to work at all. Thank you for your help!
