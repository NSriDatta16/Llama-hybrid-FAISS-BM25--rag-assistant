[site]: stackoverflow
[post_id]: 391382
[parent_id]: 390693
[tags]: 
While I fully agree that that is ugly markup, I think using the ugly view syntax to write off ASP.NET MVC as a whole is not fair. The view syntax has gotten the least attention from Microsoft, and I am fully expecting something to be done about it soon. Other answers have discussed the benefits of MVC as a whole, so I will focus on the view syntax: The encouragement to use Html.ActionLink and other methods that generate HTML is a step in the wrong direction. This smacks of server controls, and, to me, is solving a problem that doesn't exist. If we are going to generate tags from code, then why bother using HTML at all? We can just use DOM or some other model and build up our content in the controller. Ok, that sounds bad, doesn't it? Oh yes, separation of concerns, that is why we have a view. I think the correct direction is to make the view syntax as much like HTML as possible. Remember, a well designed MVC should not only give you separation of code from content, it should let you streamline your production by having people who are expert in layout work on the views (even though they do not know ASP.NET), and then later as a developer you can step in and make the view mockup actually dynamic. This can only be done if if the view syntax looks very much like HTML, so that the layout folks can use DreamWeaver or whatever the current popular layout tool is. You might be building dozens of sites at once, and need to scale in this way for efficiency of production. Let me give an example of how I could see the view "language" working: sample previous subject sample next subject This has several advantages: looks better more concise no funky context switching betwen HTML and tags easy to understand keywords that are self-explanatory (even a non-programmer could do this - good for parallelization) as much logic moved back into controller (or model) as possible no generated HTML - again, this makes it very easy for someone to come in and know where to style something, without having to mess around with Html. methods the code has sample text in it that renders when you load the view as plain HTML in a browser (again, good for layout people) So, what exactly does this syntax do? mvc:inner="" - whatever is in the quotes gets evaluated and the inner HTML of the tag gets replaced with the resulting string. (Our sample text gets replaced) mvc:outer="" - whatever is in the quotes gets evaluated and the outer HTML of the tag gets replaced with the resulting string. (Again, sample text gets replaced.) {} - this is used for inserting output inside of attributes, similar to mvc:if="" - insde the qoutes is the boolean expression to be evaulated. The close of the if is where the HTML tag gets closed. mvc:else mcv:elseif="" - ... mvc:foreach
