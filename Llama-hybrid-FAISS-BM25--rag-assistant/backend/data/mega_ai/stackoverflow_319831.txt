[site]: stackoverflow
[post_id]: 319831
[parent_id]: 249159
[tags]: 
App.Config CAN be changed...however it exists in a location akin to HKEY___LOCAL_MACHINE i.e. the average user has read-only access. So you will need to change it as an administrator - best time would be during installation, where you're (supposed to be) installing with enhanced permissions. So create an Installer class, use a Custom Action in the setup project to pass in the user's choices (e.g. "/svr=[SERVER] /db=[DB] /uilevel=[UILEVEL]") and, in the AfterInstall event, change the App.Config file using something like: Public Shared Property AppConfigSetting(ByVal SettingName As String) As Object Get Return My.Settings.PropertyValues(SettingName) End Get Set(ByVal value As Object) Dim AppConfigFilename As String = String.Concat(System.Reflection.Assembly.GetExecutingAssembly.Location, ".config") If (My.Computer.FileSystem.FileExists(AppConfigFilename)) Then Dim AppSettingXPath As String = String.Concat("/configuration/applicationSettings/", My.Application.Info.AssemblyName, ".My.MySettings/setting[@name='", SettingName, "']/value") Dim AppConfigXML As New System.Xml.XmlDataDocument With AppConfigXML .Load(AppConfigFilename) Dim DataNode As System.Xml.XmlNode = .SelectSingleNode(AppSettingXPath) If (DataNode Is Nothing) Then Throw New Xml.XmlException(String.Format("Application setting not found ({0})!", AppSettingXPath)) Else DataNode.InnerText = value.ToString End If .Save(AppConfigFilename) End With Else Throw New IO.FileNotFoundException("App.Config file not found!", AppConfigFilename) End If End Set End Property
