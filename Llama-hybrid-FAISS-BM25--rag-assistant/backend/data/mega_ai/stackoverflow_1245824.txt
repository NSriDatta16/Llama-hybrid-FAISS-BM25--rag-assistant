[site]: stackoverflow
[post_id]: 1245824
[parent_id]: 1226821
[tags]: 
Have you looked at Groovy AOP ? There's very little documentation , but it allows you to define pointcuts and advice in a conceptually similar way as for AspectJ. Have a look at the unit tests for some more examples The example below will match all calls to all woven types and apply the advice before proceeding: // aspect MyAspect class MyAspect { static aspect = { //match all calls to all calls to all types in all packages def pc = pcall("*.*.*") //apply around advice to the matched calls around(pc) { ctx -> println ctx.args[0] println ctx.args.length return proceed(ctx.args) } } } // class T class T { def test() { println "hello" } } // Script starts here weave MyAspect.class new T().test() unweave MyAspect.class
