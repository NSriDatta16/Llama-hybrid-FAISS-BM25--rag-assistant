[site]: stackoverflow
[post_id]: 2050130
[parent_id]: 2049964
[tags]: 
When a JSF form "doesn't work", this is usually an indication that something (usually a component, validator or converter) has instructed the lifecycle that some of the input is invalid and that it should stop processing and re-render the view. This prevents junk data getting into your model and stops your business logic from acting on invalid input. alt text http://java.sun.com/javaee/5/docs/tutorial/backup/update3/doc/images/jsfIntro-lifecycle.gif Figure from JEE5 Tuorial This will be down some way to the configuration of your view and the logic of any code you've plugged into it. As Slartibartfast says , adding a tag to the view will often inform you of which components triggered this response. Configuring a PhaseListener is often useful during debugging to tell you which phases completed during a request. public void action () { System.err.println ("ACTION"); } This action method should return a String : public String action () { System.err.println ("ACTION"); return null; } Some implementations tolerate a void return type, but it contravenes the spec. The action attribute must be bound to an application action as defined in the spec : Application Actions ... The method must be public. The method must take no parameters. The method must return Object. The action method will be called by the default ActionListener implementation, as described in Section 7.1.1 “ActionListener Property” above. Its responsibility is to perform the desired application actions, and then return a logical “outcome” (represented as a String) that can be used by a NavigationHandler in order to determine which view should be rendered next.
