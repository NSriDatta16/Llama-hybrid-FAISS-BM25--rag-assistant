[site]: stackoverflow
[post_id]: 2890604
[parent_id]: 2890598
[tags]: 
It is working right. That's how list initializers work. I believe 6.7.8.10 of the C99 standard covers this: If an object that has automatic storage duration is not initialized explicitly, its value is indeterminate. If an object that has static storage duration is not initialized explicitly, then: if it has pointer type, it is initialized to a null pointer; if it has arithmetic type, it is initialized to (positive or unsigned) zero; if it is an aggregate, every member is initialized (recursively) according to these rules; if it is a union, the first named member is initialized (recursively) according to these rules. If you need to make all the elements in an array the same non-zero value, you'll have to use a loop or memset . Also note that, unless you really know what you're doing, vectors are preferred over arrays in C++ : Here's what you need to realize about containers vs. arrays: Container classes make programmers more productive. So if you insist on using arrays while those around are willing to use container classes, you'll probably be less productive than they are (even if you're smarter and more experienced than they are!). Container classes let programmers write more robust code. So if you insist on using arrays while those around are willing to use container classes, your code will probably have more bugs than their code (even if you're smarter and more experienced). And if you're so smart and so experienced that you can use arrays as fast and as safe as they can use container classes, someone else will probably end up maintaining your code and they'll probably introduce bugs. Or worse, you'll be the only one who can maintain your code so management will yank you from development and move you into a full-time maintenance role â€” just what you always wanted! There's a lot more to the linked question; give it a read.
