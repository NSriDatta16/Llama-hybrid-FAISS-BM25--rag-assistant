[site]: stackoverflow
[post_id]: 4199742
[parent_id]: 4199083
[tags]: 
Here is a stripped down version of a DeviceChangeEvents notification class I wrote some time ago, though I never fully completed it. I stripped out everything except the PortArrived event as it's quite fugly otherwise. using System; using System.ComponentModel; using System.Diagnostics; using System.Runtime.InteropServices; using System.Windows.Forms; public sealed class PortArrivalEventArgs : EventArgs { public string Name { get; private set; } public PortArrivalEventArgs(string name) { Name = name; } } public static class DeviceChangeEvents { #region Events #region PortArrived private static object PortArrivedEvent = new Object(); public static event EventHandler PortArrived { add { AddEvent(PortArrivedEvent, value); } remove { RemoveEvent(PortArrivedEvent, value); } } private static void FirePortArrived(IntPtr lParam) { EventHandler handler = (EventHandler )events[PortArrivedEvent]; if (handler != null) { string portName = Marshal.PtrToStringAuto((IntPtr)((long)lParam + 12)); handler(null, new PortArrivalEventArgs(portName)); } } #endregion #endregion #region Internal private static EventHandlerList events = new EventHandlerList(); private static MessageWindow messageWindow = null; private static void AddEvent(object key, Delegate value) { events.AddHandler(key, value); if (messageWindow == null) messageWindow = new MessageWindow(); } private static void RemoveEvent(object key, Delegate value) { events.RemoveHandler(key, value); // In the more complete version of DeviceChangedEvents, System.ComponentModel.EventHandlerList // is replaced by an identical event storage object which exposes a count of the number of // handlers installed. It also removes empty handler stubs. Both of these are required // to safely destroy the message window when the last handler is removed. //if (messageWindow != null && events.Count == 0) // messageWindow.DestroyHandle(); } #endregion private sealed class MessageWindow : NativeWindow { public MessageWindow() { CreateParams cp = new CreateParams(); cp.Caption = GetType().FullName; // NOTE that you cannot use a "message window" for this broadcast message //if (Environment.OSVersion.Platform == PlatformID.Win32NT) // cp.Parent = (IntPtr)(-3); // HWND_MESSAGE //Debug.WriteLine("Creating MessageWindow " + cp.Caption); CreateHandle(cp); } const int WM_DESTROY = 0x02; const int WM_DEVICECHANGE = 0x219; enum DBT { DEVICEARRIVAL = 0x8000, } protected override void WndProc(ref Message m) { if (m.Msg == WM_DESTROY) { messageWindow = null; } else if (m.Msg == WM_DEVICECHANGE) { DBT changeType = (DBT)m.WParam; int deviceType = m.LParam == IntPtr.Zero ? 0 : Marshal.ReadInt32(m.LParam, 4); Debug.WriteLine(String.Format("WM_DEVICECHANGE changeType = {0}, deviceType = {1}", changeType, deviceType)); switch (changeType) { case DBT.DEVICEARRIVAL: switch (deviceType) { case 3: // DBT_DEVTYP_PORT FirePortArrived(m.LParam); break; } break; } } base.WndProc(ref m); } } }
