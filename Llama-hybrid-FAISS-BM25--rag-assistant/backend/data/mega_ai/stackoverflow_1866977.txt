[site]: stackoverflow
[post_id]: 1866977
[parent_id]: 1866343
[tags]: 
Any reason for duplicating the entire list? How about: >>> def pred(item, haystack="XN"): ... return any(needle in item for needle in haystack) ... >>> lst = ['AAT', 'XAC', 'ANT', 'TTA'] >>> idx = 0 >>> while idx >> lst ['AAT', 'TTA'] I know that list comprehensions are all the rage these days, but if the list is long we don't want to duplicate it without any reason right? You can take this to the next step and create a nice utility function: >>> def remove_if(coll, predicate): ... idx = len(coll) - 1 ... while idx >= 0: ... if predicate(coll[idx]): ... del coll[idx] ... idx = idx - 1 ... return coll ... >>> lst = ['AAT', 'XAC', 'ANT', 'TTA'] >>> remove_if(lst, pred) ['AAT', 'TTA'] >>> lst ['AAT', 'TTA']
