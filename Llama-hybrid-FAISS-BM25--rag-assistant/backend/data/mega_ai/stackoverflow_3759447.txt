[site]: stackoverflow
[post_id]: 3759447
[parent_id]: 3759081
[tags]: 
You can't do this kind of thing with the ASP.NET Membership Provider, that is, write custom updates to the tables. If it were that easy, less people would have issues/problems with it. =) Don't even bother adding the ASP.NET Membership SQL Tables onto your EDMX - you won't know the relationships or how the tables really work together. Forget about trying to represent it as a "Model". My advice is don't try and bind to the MembershipProvider as a Model (i.e dont create a strongly typed view), just call the Membership methods directly from your controller. This is where we start to miss the 'drag and drop' of Web Forms, can't drop on a ChangePassword control. =) Your best bet would be to create a regular view (not strongly typed), then have regular buttons that post to your controller methods. Don't try and pass through the object as a model, get the fields in the Request.Form collection. [HttpPost] public ActionResult ChangePassword() { string userName = Request.Form["userName"]; string passWord = Request.Form["passWord"]; MembershipProvider.ChangePassword(userName, password); return View("ChangePasswordSuccess"); } The above code would be (roughly) the equivalent of passing through a strongly typed User object, changing the password and calling UpdateModel. Of course, you could implement your own membership provider, but i dont believe implementing a custom provider just to make your code "easier" should be the driver, because unless coded properly (which is not easy to do), you compromise a lot of the built-in security features and wealth of account management options of the ASP.NET Membership provider that we take for granted.
