[site]: stackoverflow
[post_id]: 4758021
[parent_id]: 4755948
[tags]: 
You say you're new to python are you new to PHP too? I don't know Symphony or CakePHP so I can't comment on them. I know a tiny bit about Zend. A couple of years ago I was in a similar position and went for django and I haven't regretted it. What I like about django is the following Python is a much cleaner programming language than php. Easier to learn well and easier to remember how to use. django gives you an 'ORM" an Object - Relational Model. You construct your data model in python using particular django objects. When you run a script 'syncdb' it builds your database tables for you. You also get a very powerful and straightforward way to query the database and fetch lists of objects from your database (Query objects). These query objects plug straight into python's very elegant way with lists. If the database queries django builds for you aren't fast enough you can both find that out through django and then customise them to be more efficient. Python has a very good test framework that django has extended well -- writing unit tests is as easy as it can be. The interactive shell: it is easy to be in your application with a command line and instant access to all your code. It is worth installing django-command-extensions . The test server: It is easy to run a test server so that you can run and debug your code. Fantastic documentation. Django and python both have really great online documentation. good extensions for django and python. I've mentioned django-command extensions, other ones you may want to use are piston which offers restful services. haystack which allows you to index your content using lucene (much faster and more flexible than mysql's native indexing) It comes with an admin system. One of the advantages of the ORM is that because django knows all about your data it can build you a very good cms almost out the box. It's hard to think of disadvantages, python and django are not as widely used as php and Zend so finding people to employ may be a bit harder. However, I think you appreciate and can work well with python and django if you're a well trained programmer which maybe means python and django people more reliably know what they're doing. It definitely gets my vote anyway.
