[site]: stackoverflow
[post_id]: 4192146
[parent_id]: 4191824
[tags]: 
This sounds like homework :-) You're working with 2 things here: Arbitrarily named elements that you need to apply an XSLT template to, and Determining what type of content an element has (either text or an XML fragment). You want to use a template that can match elements in your XML arbitrarily (i.e. not elements with a specific name). will match all elements in your XML document. When you encounter an element, you need to create a table: Now we want to work out whether we're dealing with an XML fragment (an element) or a piece of text. To do this we match on node() . Remember that a node can be an element, text, whitespace, processing instruction or a comment in an XML document. When you've matched a node, you want to create a new table row and display the name of the current node: You then need to work out whether the node is a text node or not. You can use an or an . I tend to prefer the latter. If it's a text node, display the value of the text otherwise treat the node like an XML fragment and call our initial template again (this is the recursive part). ... ... Here's the final solution. I'm using the mode attribute on the template because an element is also a node in an XML document and would match both as well as . Using the mode attribute removes the ambiguity.
