[site]: stackoverflow
[post_id]: 1829639
[parent_id]: 
[tags]: 
How can I use a custom type for keys in a boost::unordered_map?

I'm using Boost's implementation of a hash map in a project right now, and I'm trying to implement a custom type for keys. I have four unsigned integers which I'd like to combine into a single 128-bit datatype to use as a key. I've created a struct with a 32-bit integer array of four elements, which serves as my storage. To be honest, I'm not sure how Boost's hash map works, so I'm not sure what I'm doing here, but I followed the Boost documentation ( http://www.boost.org/doc/libs/1_37_0/doc/html/hash/custom.html ) for extending boost::hash, and I created a hash function, as well as a custom comparison operator. I have this custom type defined in a header. This is my code: #ifndef INT128_H_ #define INT128_H_ // Custom 128-bit datatype used to store and compare the results of a weakened hash operation. struct int128 { unsigned int storage[4]; /* Assignment operation that takes a 32-bit integer array of four elements. This makes assignment of values a shorter and less painful operation. */ void operator=(const unsigned int input[4]) { for(int i = 0; i hasher; unsigned long long hashVal = input.storage[0]; for(int i = 1; i Now when I actually use this type in Boost's unordered map, my code compiles, but fails to link. The linker claims that I have a symbol defined multiple times in several object files. I'd really like to get my 128-bit type working with this map. Any tips on what I'm screwing up, or a better way to do this?
