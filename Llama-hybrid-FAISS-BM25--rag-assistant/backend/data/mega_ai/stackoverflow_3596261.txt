[site]: stackoverflow
[post_id]: 3596261
[parent_id]: 3571940
[tags]: 
It's because you write SubClass.prototype = new Class("proto_class"); you are creating a prototype of one instance of Class . What you want is to create a sub-class that inherits from its parent's prototype. As David Flanagan shows in his JavaScript: The Definitive Guide (ยง 9.5), you have to use a helper function to create a new object with a specified prototype: function heir(p) { function f(){} // dummy constructor function f.prototype = p; // specify prototype object we want return new f(); // create and return new object } (Crockford calls this function Object.create , after the so-called ES5 object constructor property , but please don't do this, as this can be misleading .) Within the SubClass constructor, you have to call the Class constructor with this set to the current object: function SubClass() { // call the parent's constructor with // `this` set to the current scope Class.call(this, "proto_class"); } And last, but not least, you only reset Class.asdf2 once, but not in the constructor function of Class or SubClass . So add this.asdf2 = []; to one of the constructors. The complete code now reads: function heir(p) { function f(){} // dummy constructor function f.prototype = p; // specify prototype object we want return new f(); // create and return new object } function Class(asdf) { if (typeof asdf != 'undefined') this.asdf = asdf; } Class.prototype.asdf = "default_asdf"; Class.prototype.asdf2 = []; Class.prototype.change_asdf = function() { this.asdf = "changed_asdf"; this.asdf2.push("changed_asdf2"); } function SubClass() { // call the parent's constructor with // `this` set to the current scope Class.call(this, "proto_class"); this.asdf2 = []; } SubClass.prototype = heir(Class.prototype); SubClass.prototype.constructor = SubClass; test1 = new SubClass(); alert("test1 asdf: " + test1.asdf + " " + test1.asdf2); test1.change_asdf(); alert("test1 asdf: " + test1.asdf + " " + test1.asdf2); test2 = new SubClass(); alert("test2 asdf: " + test2.asdf + " " + test2.asdf2);
