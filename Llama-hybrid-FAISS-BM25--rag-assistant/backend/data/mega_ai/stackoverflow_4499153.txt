[site]: stackoverflow
[post_id]: 4499153
[parent_id]: 3282365
[tags]: 
Your code for setting the mandatory integrity label on the pipe achieves this successfully. However, because your security descriptor doesn't define a DACL, your pipe is being created with the default one. It is the DACL which is causing the low integrity client to fail when trying to connect to the pipe created by your high integrity server. You need to fix the DACL in the server before opening the listener. Rather than trying to construct the full descriptor using P/Invoke code before creating the pipe, which is pretty hard to get right, I'd suggest leveraging the System.IO.Pipes classes to do it in managed code as a separate step after the pipe is created, like this: // Fix up the DACL on the pipe before opening the listener instance // This won't disturb the SACL containing the mandatory integrity label NamedPipeServerStream handleForSecurity = null; try { handleForSecurity = new NamedPipeServerStream("NamedPipe/Test", PipeDirection.InOut, -1, PipeTransmissionMode.Byte, PipeOptions.None, 0, 0, null, System.IO.HandleInheritability.None, PipeAccessRights.ChangePermissions); PipeSecurity ps = handleForSecurity.GetAccessControl(); PipeAccessRule aceClients = new PipeAccessRule( new SecurityIdentifier(WellKnownSidType.AuthenticatedUserSid, null), // or some other group defining the allowed clients PipeAccessRights.ReadWrite, AccessControlType.Allow); PipeAccessRule aceOwner = new PipeAccessRule( WindowsIdentity.GetCurrent().Owner, PipeAccessRights.FullControl, AccessControlType.Allow); ps.AddAccessRule(aceClients); ps.AddAccessRule(aceOwner); handleForSecurity.SetAccessControl(ps); } finally { if (null != handleForSecurity) handleForSecurity.Close(); handleForSecurity = null; } This works for me, with the rest of your code unchanged.
