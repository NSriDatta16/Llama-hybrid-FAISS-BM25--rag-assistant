[site]: stackoverflow
[post_id]: 744837
[parent_id]: 744417
[tags]: 
There is no simple, generic solution to a complex, meticulous problem. You can't have both simple storage and simple app logic at the same time. Either the database structure must be complex, or else your app must be complex as it interprets the data. I outline five solution to this general problem in " product table, many kind of product, each product have many parameters ." For your situation, I would lean toward Concrete Table Inheritance or Serialized LOB (the XML solution). The reason that XML might be a good solution is that: You don't need to use SQL to pick out individual fields; you're always going to display the whole form. Your XML can annotate fields for data type, user interface control, etc. But of course you need to add code to parse and validate the XML. You should use an XML schema to help with this. In which case you're just replacing one technology for enforcing data organization (RDBMS) with another (XML schema). You could also use an RDF solution instead of an RDBMS. In RDF, metadata is queriable and extensible, and you can model entities with "facts" about them. For example: Payment code XYZ contains attribute TradeCredit (Net-30, Net-60, etc.) Attribute TradeCredit is of type CalendarInterval Type CalendarInterval is displayed as a drop-down .. and so on Re your comments: Yeah, I am wary of any solution that uses XML. To paraphrase Jamie Zawinski : Some people, when confronted with a problem, think "I know, I'll use XML." Now they have two problems. Another solution would be to invent a little Domain-Specific Language to describe your forms. Use that to generate the user-interface. Then use the database only to store the values for form data instances.
