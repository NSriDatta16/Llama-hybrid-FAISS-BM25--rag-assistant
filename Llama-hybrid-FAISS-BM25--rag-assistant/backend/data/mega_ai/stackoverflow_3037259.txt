[site]: stackoverflow
[post_id]: 3037259
[parent_id]: 3037203
[tags]: 
A static field is shared across all instances of the same type . Foo and Foo are two different types. This can be proven by the following line of code: // this prints "False" Console.WriteLine(typeof(Foo ) == typeof(Foo )); As for where this is documented, the following is found in section 1.6.5 Fields of the C# Language Specification (for C# 3): A static field identifies exactly one storage location. No matter how many instances of a class are created, there is only ever one copy of a static field. As stated before; Foo and Foo are not the same class; they are two different classes constructed from the same generic class. How this happens is outlined in section 4.4 of the above mentioned document: A generic type declaration, by itself, denotes an unbound generic type that is used as a “blueprint” to form many different types, by way of applying type arguments.
