[site]: stackoverflow
[post_id]: 2783918
[parent_id]: 2783489
[tags]: 
There is probably a more elegant, pythonic way to handle this than using pointers. Could you provide a little more context into what you are trying to do. Based on what you've given so far, I would subclass the built-in list type and have it store an alternative version of itself. Override the list methods to operate on itself, and the alternative version of itself where it makes sense. Where it doesn't make sense, like in the sort() function, define a second function for the alternate list. This only really makes sense if the sort is unreasonably expensive; otherwise, I would just maintain one list and sort on demand. class MyList(list): def __init__(self, li): super(MyList, self).__init__(li) self.altlist = list(li) def append(self, x): super(MyList, self).append(x) self.altlist.append(x) def sortalt(self): ... ...
