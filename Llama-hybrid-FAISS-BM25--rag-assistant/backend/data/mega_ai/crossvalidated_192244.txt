[site]: crossvalidated
[post_id]: 192244
[parent_id]: 187768
[tags]: 
Macro averaging technique works well for precision, sensitivity, and specificity. But when I tried it for MCC it did not give proper results. For more details on multiclass MCC calculations see: Jurman G, Riccadonna S, Furlanello C (2012) " A Comparison of MCC and CEN Error Measures in Multi-Class Prediction ". PLoS ONE 7(8): e41882. doi:10.1371/journal.pone.0041882 Jurman, Giuseppe, and Cesare Furlanello. "A unifying view for performance measures in multi-class prediction." arXiv preprint arXiv:1008.2908 (2010). The following code worked for me: % the confusion matrix at input is given by matrix cm_svm_array mcc_numerator=0;count=1; % limits klm=1 TO n SUM(ckk.cml - clk.ckm) for k = 1:1:length(cm_svm_array) for l=1:1:length(cm_svm_array) for m=1:1:length(cm_svm_array) mcc_numerator1(count) = (cm_svm_array(k,k) *cm_svm_array(m,l))- (cm_svm_array(l,k)*cm_svm_array(k,m)) mcc_numerator=mcc_numerator+mcc_numerator1(count) count=count+1; end end end mcc_denominator_1=0 ; count=1; for k=1:1:length(cm_svm_array) mcc_den_1_part1=0; for l=1:1:length(cm_svm_array) mcc_den_1_part1= mcc_den_1_part1+cm_svm_array(l,k); end mcc_den_1_part2=0; for f=1:1:length(cm_svm_array) if f ~=k for g=1:1:length(cm_svm_array) mcc_den_1_part2= mcc_den_1_part2+cm_svm_array(g,f); end end end mcc_denominator_1=(mcc_denominator_1+(mcc_den_1_part1*mcc_den_1_part2)); end mcc_denominator_2=0; count=1; for k=1:1:length(cm_svm_array) mcc_den_2_part1=0; for l=1:1:length(cm_svm_array) mcc_den_2_part1= mcc_den_2_part1+cm_svm_array(k,l); end mcc_den_2_part2=0; for f=1:1:length(cm_svm_array) if f ~=k for g=1:1:length(cm_svm_array) mcc_den_2_part2= mcc_den_2_part2+cm_svm_array(f,g); end end end mcc_denominator_2=(mcc_denominator_2+(mcc_den_2_part1*mcc_den_2_part2)); end mcc = (mcc_numerator)/((mcc_denominator_1^0.5)*(mcc_denominator_2^0.5))
