[site]: stackoverflow
[post_id]: 1547225
[parent_id]: 1547124
[tags]: 
I have a way that might work. I take no credit for this - I found this method on the web, and forgot to save the address. In my project I needed to bind a few checkboxes to a flag enum. To help, I found an implementation of a simple value converter to facilitate two way binding. It's not generic, and a single instance of a converter can only work with one target (meaning one instance of a value and its group of checkboxes) at a time. The converter uses a stored reference to the value as a way to convert back, so if you try to reuse it between separate object instances it won't work. That said, this is the only use i had for something like this and it worked like a charm. The converter: /// /// Provides for two way binding between a TestErrors Flag Enum property and a boolean value. /// TODO: make this more generic and add it to the converter dictionary if possible /// public class TestActionFlagValueConverter : IValueConverter { private TestErrors target; public TestActionFlagValueConverter() { } public object Convert(object value, Type targetType, object parameter, CultureInfo culture) { TestErrors mask = (TestErrors)parameter; this.target = (TestErrors)value; return ((mask & this.target) != 0); } public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) { this.target ^= (TestErrors)parameter; return this.target; } } In xaml it is used thusly: In your case you might place this into your datacell template (though obviously you probably prefer to use a combobox ragther than a simple stackpanel. Make sure to instantiate the converter close to your checkbox group container to make sure they have their own instance of the converter. Edit: Here, I made a little test project to demonstrate using this in a combobox with a datagrid, it's based off the default WPF application - just make sure to reference the WPF toolkit. Here is the Window1.xaml file: And here is the Window1.xaml.cs file codebehind. using System; using System.Globalization; using System.Windows; using System.Windows.Data; namespace FlagEnumTest { /// /// Interaction logic for Window1.xaml /// public partial class Window1 : Window { public Window1() { InitializeComponent(); } } [Flags] public enum TestErrors { NoError = 0x0, PowerFailure = 0x1, OpenCondition = 0x2, } public class TestObject { public TestErrors Errors { get; set; } } /// /// Provides for two way binding between a TestErrors Flag Enum property and a boolean value. /// TODO: make this more generic and add it to the converter dictionary if possible /// public class TestErrorConverter : IValueConverter { private TestErrors target; public object Convert(object value, Type targetType, object parameter, CultureInfo culture) { TestErrors mask = (TestErrors)parameter; this.target = (TestErrors)value; return ((mask & this.target) != 0); } public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) { this.target ^= (TestErrors)parameter; return this.target; } } } By default the datagrid will create its own representation of the column as well as my mandated templated one, so you can see the text representation as well as the checkbox one. The flag enum confuses the default text representation, but you can still see that the binding is working correctly (check both, then uncheck the one you checked last - string value changes to the other one, not 0).
