[site]: stackoverflow
[post_id]: 3884276
[parent_id]: 3884183
[tags]: 
A POST or PUT request to update the display order should not return back anything, except for the status code that indicates the status of the request. You should issue a separate GET request to receive the new list of top 15/25/50/etc products: If a new resource is created, the origin server MUST inform the user agent via the 201 (Created) response. If an existing resource is modified, either the 200 (OK) or 204 (No Content) response codes SHOULD be sent to indicate successful completion of the request. If the resource could not be created or modified with the Request-URI, an appropriate error response SHOULD be given that reflects the nature of the problem. From: Section 9.6 of the HTTP 1.1 Specification You may also be interested in checking out the HTTP Spec (Sections 9.5 and 9.6) and the following Stack Overflow post: Is it ok by REST to return content after POST? That said, I can think of two ways to update the display order of the products: Send a move-up or move-down request for a particular product_id. This request can be invoked whenever an up/down button is clicked. Send the complete order_rank list for a whole category. I believe the latter is more practical, but you may want to expose both operations. For the first approach the POST verb seems appropriate, but for the second one I would use a PUT . For the first approach, I would imagine URIs like the following: POST /products/{productId}/move-up POST /products/{productId}/move-down The above suggests that we're creating a "move-up" or a "move-down" command. The verb POST means "create" and the noun (the action) is "move-up" or "move-down" command, which acts on a particular product_id. For the second approach, I would see a URI like the following: PUT /categories/{categoryId}/order-rank To which we can pass a JSON/XML/etc representation for each product_id with the order_rank number. The verb PUT means "update" and the noun is the "order-rank" for a particular category_id.
