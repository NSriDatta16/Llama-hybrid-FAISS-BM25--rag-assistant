[site]: stackoverflow
[post_id]: 5011382
[parent_id]: 626648
[tags]: 
I ran into this problem over and over again with my first Spring-WS/Castor web service. As far as I can tell, somewhere along the line some component extracts the payload in a non-namespace-aware way. In other words, a node like doPlaceHoldRequest becomes the root of an XML document without inheriting the top-level namespace declaration, and in the two cases above, that leads to one that is in the namespace you want, and one that is not - so one validates fine against your schema, and the other does not. The best solution seems to be to cover all the bases. Make your XSD have elementFormDefault="qualified", to require all your elements to be in a namespace. Then specify an ns-uri and an ns-prefix in every map-to element in your Castor mapping. The result is a little heavier, with all the namespace prefixes, but it seems to make it a lot less fragile when it comes to lazy clients and undocumented behavior in server components. JAX-WS return empty lists makes a good point, too. org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor is worth having to validate what comes in and out.
