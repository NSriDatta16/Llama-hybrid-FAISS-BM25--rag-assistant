[site]: stackoverflow
[post_id]: 1442606
[parent_id]: 1442228
[tags]: 
You need to do some basic profiling of your code and the algorithms it uses. Memcache is like adding salt to a recipe: you need to add it to the right part or you don't get the benefit and instead gets in the way. In PHP, there are several types of caching that can improve performance of your web pages, and memcache is only one of them. If you have lots of identical queries, you can turn the query cache on in your database. If you have many pages connecting with little query traffic, you would benefit from connection pooling (this caches the TCP connection) and thread caching in the DB (this caches CPU resources on the DB). If you are throwing lots of data around, particularly strings and big arrays or objects, you can start thinking about references and updating your string handling that doesn't involve unnecessary re-copying (e.g. concatenating strings in a loop is expensive - add them to an array and implode it once at the end). This can be a big performance and memory improvement. If you have lots of queries getting the same information over and over again in one page, you need to improve your data storage layer. This will allow you to make one query to get a row and then re-use the data throughout the page instead of fetching it again. (This is usually the best reason to go from a hotch-potch of arbitrary SQL to an object persistence layer.) Note that this may involve a considerble re-architect of the app. You can add caching of object data to your object layer - this will benefit everything that uses that sort of object, which can be a big win. This is a good point for memcache, and the application code doesn't even have to know. Just be careful of data lifetimes and if or how it is updated early. If you have lots of pages making the same somewhat expensive query (even by proxy through a data-access layer), then you can cache that for a few seconds. It doesn't have to be to memcache, but that is a good choice. Finally, if you have lots of files that never change, you can use a separate server that only servers static files. This gives your execution environment more room to execute code and you can tune the static files servers to be good at returning files fast. This can be a big win for perception of website performance. IMO, caching should improve rather than enable your application.
