[site]: stackoverflow
[post_id]: 2831194
[parent_id]: 2831175
[tags]: 
There isn't a way to define structural types that has a particular function. There is a library that adds duck typing support to C# that can be found here . This is the example from Duck Typing project. Please note the the duck typing happens at runtime and can fail . It is my understanding also that this library generates proxies for the types that are duck typed, which is far cry from the elegant compile-time support that is enjoyed in Scala. This is most likely as good as it gets with this generation of C#. public interface ICanAdd { int Add(int x, int y); } // Note that MyAdder does NOT implement ICanAdd, // but it does define an Add method like the one in ICanAdd: public class MyAdder { public int Add(int x, int y) { return x + y; } } public class Program { void Main() { MyAdder myAdder = new MyAdder(); // Even though ICanAdd is not implemented by MyAdder, // we can duck cast it because it implements all the members: ICanAdd adder = DuckTyping.Cast (myAdder); // Now we can call adder as you would any ICanAdd object. // Transparently, this call is being forwarded to myAdder. int sum = adder.Add(2, 2); } } This is the C# way of achieving the same thing using the good ol boring interfaces. interface IPressable { void Press(); } class Foo { void Bar(IPressable pressable) { pressable.Press(); } } class Thingy : IPressable, IPushable, etc { public void Press() { } } static class Program { public static void Main() { pressable = new Thingy(); new Foo().Bar(pressable); } }
