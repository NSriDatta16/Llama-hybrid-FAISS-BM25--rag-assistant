[site]: stackoverflow
[post_id]: 867738
[parent_id]: 867628
[tags]: 
In response to your comment, I'd suggest you to read up on Feature branches on the CodePlex website. Scenario 4 â€“ Branch for Feature In this scenario, you create a development branch, perform work in that branch, and then merge your work back into your main source tree. You organize your development branches based on product features. The following is a physical view showing branching for feature development: My Team Project Development -> Isolated development branch container Feature A -> Feature branch Source Feature B -> Feature branch Source Feature C -> Feature branch Source Main -> Main Integration branch Source We are alos moving from SS to TFS in the near future. As I perceive it, we are going to keep our SS repository online and start fresh over in TFS . Our framework probably will get its own project in TFS . Project specific shared units will need to get merged from time to time. The way you structure your repository depends on your specific situation. Every branch scenario has its specific advantages and drawbacks. How many projects How many developers Are the developers dedicated Do you need concurrent hot fixes Do you need service packs Take a look at the CodePlex branching guide for all the information you need to make an informed decision about your TFS structure. Print out the cheat sheets and pin them to your wall for quick reference. Before executing on your branch plan, pay attention to this cautionary message - every branch you create does have a cost so make sure you get some value from it. The mechanics of branching in TFS are simplified to a single right click branch command. However, the total cost of branching is paid by reduced code velocity to main, merge conflicts and additional testing can be expensive.
