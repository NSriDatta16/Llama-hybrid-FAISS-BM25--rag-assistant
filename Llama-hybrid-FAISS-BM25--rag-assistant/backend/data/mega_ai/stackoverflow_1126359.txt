[site]: stackoverflow
[post_id]: 1126359
[parent_id]: 1122612
[tags]: 
The hackery referred to by Laurence: You can do it in one list comprehension, it just ends up being AWFUL python. Unreadable python. Terrible python. I only present the following as a curiosity, not as an actual answer. Don't do this in code you actually want to use, only if you fancy having a play with the inner workings on python. So, 3 approaches: Helping List 1 1: Using a helping list, answer ends up in the helping list. This appends values to the list being iterated over until you've reached the value you want to stop at. A = [10] print [None if A[-1] == 1 else A.append(A[-1]/2) if (A[-1]%2==0) else A.append(3*A[-1]+1) for i in A] print A result: [None, None, None, None, None, None, None] [10, 5, 16, 8, 4, 2, 1] Helping List 2 2: Using a helping list, but with the result being the output of the list comprehension. This mostly relies on list.append(...) returning None , not None evaluating as True and True being considered 1 for the purposes of arithmetic. Sigh. A=[10] print [A[0]*(not A.append(A[0])) if len(A) == 1 else 1 if A[-1] == 2 else (A[-1]/2)*(not A.append(A[-1]/2)) if (A[-1]%2==0) else (3*A[-1]+1)*(not A.append(3*A[-1]+1)) for i in A] result: [10, 5, 16, 8, 4, 2, 1] Referencing the List Comprehension from within 3: Not using a helping list, but referring back to the list comprehension as it's being built. This is a bit fragile, and probably wont work in all environments. If it doesn't work, try running the code on its own: from itertools import chain, takewhile initialValue = 10 print [i if len(locals()['_[1]']) == 0 else (locals()['_[1]'][-1]/2) if (locals()['_[1]'][-1]%2==0) else (3*locals()['_[1]'][-1]+1) for i in takewhile(lambda x:x>1, chain([initialValue],locals()['_[1]']))] result: [10, 5, 16, 8, 4, 2, 1] So, now forget that you read this. This is dark, dark and dingy python. Evil python. And we all know python isn't evil. Python is lovely and nice. So you can't have read this, because this sort of thing can't exist. Good good.
