[site]: stackoverflow
[post_id]: 3783058
[parent_id]: 3783016
[tags]: 
That's not the formal syntax of a typedef, it's just one of the patterns which it can take. In the C standard 6.7.1, typedef is syntactically defined as a storage-class specifier (like extern or static ). It modifies a declaration, so that the declaration declares a type alias instead of an object. typedef isn't either a function or an operator, so notions of "argument", "operand" or "overloading" don't apply to it. It just tells the compiler what kind of declaration you're making. In C++, typedef is syntactically defined as a decl-specifier , it is not a storage-class-specifier . storage-class-specifiers are also decl-specifiers , and so is friend . I don't think this makes any practical difference, it's another way of saying the same thing C says, but it's 7.1 of the C++ standard if you want to have a look for yourself. I confess it's baffling me for the time being.
