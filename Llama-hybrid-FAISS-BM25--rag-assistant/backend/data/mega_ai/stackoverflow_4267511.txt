[site]: stackoverflow
[post_id]: 4267511
[parent_id]: 4267459
[tags]: 
It's not passed in the way that you are doing it. You would have to do. import types me.say_hi = types.MethodType(say_hi, me, Person) for it to work. When python instantiates a class, it essentially carries out the above procedure for each of the class methods. When you 'monkey-patch' a method onto an object in the way that you were trying to do it, it's not a bound method and just exists as a function in instance.__dict__ . Calling it is no different than calling any other function. If you want to stick a method on an instance, you have to manually make it a method as shown above. If you were to do class Person(object): pass def say_hi(self): print 'hii' Person.say_hi = say_hi me = Person() me.say_hi() then it would work because Python will create the method for you. Chris Morgan put up an answer that shows this one in action. It's good stuff.
