[site]: stackoverflow
[post_id]: 5675660
[parent_id]: 5674868
[tags]: 
In tune with a pure JavaScript implementation, here's my take on the problem: function createElement(type, attributes, parent){ var node = document.createElement(type); for (i in attributes){ node.setAttribute(i, attributes[i]) } if (parent && parent.__proto__.appendChild){ parent.appendChild(node) } return node; } And you use it like this: createElement("span", { "id": "theID", "class": "theClass", "title": "theAttribute"}, document.getElementById("theParent")) I kept one of your initial requirements: append the node to some other element and also return it. I particularly like RobG's second example with the fragment. Definitely something I'd try if I were using plain strings to represent HTML. If it doesn't warrant the use-case, it doesn't always make sense to import a JS framework. jQuery is no exception. Should you decide more complex workflows are needed, that's your warrant! ;)
