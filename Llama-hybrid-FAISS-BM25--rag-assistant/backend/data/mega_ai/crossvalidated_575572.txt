[site]: crossvalidated
[post_id]: 575572
[parent_id]: 
[tags]: 
Why am I getting 100% accuracy for SVM, Random-forest Classifier and Logistic Regression?

I'm using an existing disease prediction model to build a chatbot. While I was referring to the model I realized that it has an accuracy of 100%. I'm not quite sure how and why the accuracy is 100%. I've attached herewith the link to the code I'm referring to - https://www.geeksforgeeks.org/disease-prediction-using-machine-learning/ I would be glad if someone could give me some insight on how the accuracy is 100%. Below is the code from cgi import test import pandas as pd import numpy as np import matplotlib.pyplot as plt from scipy.stats import mode from sklearn.preprocessing import LabelEncoder from sklearn.model_selection import train_test_split, cross_val_score from sklearn.svm import SVC from sklearn.ensemble import RandomForestClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score, confusion_matrix import pickle import requests import json import seaborn as sns # Reading the train.csv by removing the last column since it's an empty column DATA_PATH = "D:/Diabetdeck-V3/flask-server/dataset/Training.csv" data = pd.read_csv(DATA_PATH).dropna(axis = 1) # Checking whether the dataset is balanced or not disease_counts = data["prognosis"].value_counts() temp_df = pd.DataFrame({ "Disease": disease_counts.index, "Counts": disease_counts.values }) plt.figure(figsize = (18,8)) sns.barplot(x = "Disease", y = "Counts", data = temp_df) plt.xticks(rotation=90) plt.show() # Encoding the target value into numerical value using LabelEncoder encoder = LabelEncoder() data["prognosis"] = encoder.fit_transform(data["prognosis"]) X = data.iloc[:,:-1] y = data.iloc[:, -1] X_training_data, X_testing_data, y_training_data, y_testing_data =train_test_split( X, y, test_size = 0.2, random_state = 24) print(f"Train: {X_training_data.shape}, {y_training_data.shape}") print(f"Test: {X_testing_data.shape}, {y_testing_data.shape}") # Defining scoring metric for k-fold cross validation def cv_scoring(estimator, X, y): return accuracy_score(y, estimator.predict(X)) # Initializing Models models = { "SVC":SVC(), "Logistic Regression":LogisticRegression(), "Random Forest":RandomForestClassifier(random_state=18) } # Producing cross validation score for the models for model_name in models: model = models[model_name] scores = cross_val_score(model, X, y, cv = 10, n_jobs = -1, scoring = cv_scoring) print("=="*30) print(model_name) print(f"Scores: {scores}") print(f"Mean Score: {np.mean(scores)}") # Training and testing SVM Classifier svm_model = SVC() svm_model.fit(X_training_data, y_training_data) preds = svm_model.predict(X_testing_data) # pickle.dump(svm_model, open('model.pkl','wb')) print(f"Accuracy on train data by SVM Classifier\ : {accuracy_score(y_training_data, svm_model.predict(X_training_data))*100}") print(f"Accuracy on test data by SVM Classifier\ : {accuracy_score(y_testing_data, preds)*100}") cf_matrix = confusion_matrix(y_testing_data, preds) plt.figure(figsize=(12,8)) sns.heatmap(cf_matrix, annot=True) plt.title("Confusion Matrix for SVM Classifier on Test Data") plt.show() # Training and testing Logistic Regression lr_model = LogisticRegression(C=0.1, penalty='l2', solver='liblinear') lr_model.fit(X_training_data, y_training_data) lr_model.score(X_training_data, y_training_data) preds = lr_model.predict(X_testing_data) # pickle.dump(lr_model, open('model.pkl','wb')) print(f"Accuracy on train data by Logistic Regression\ : {accuracy_score(y_training_data, lr_model.predict(X_training_data))*100}") print(f"Accuracy on test data by Logistic Regression\ : {accuracy_score(y_testing_data, preds)*100}") cf_matrix = confusion_matrix(y_testing_data, preds) plt.figure(figsize=(12,8)) sns.heatmap(cf_matrix, annot=True) plt.title("Confusion Matrix for Logistic Regression on Test Data") plt.show() # Training and testing Random Forest Classifier rf_model = RandomForestClassifier(random_state=18) rf_model.fit(X_training_data, y_training_data) preds = rf_model.predict(X_testing_data) # pickle.dump(rf_model, open('model.pkl','wb')) print(f"Accuracy on train data by Random Forest Classifier\ : {accuracy_score(y_training_data, rf_model.predict(X_training_data))*100}") print(f"Accuracy on test data by Random Forest Classifier\ : {accuracy_score(y_testing_data, preds)*100}") cf_matrix = confusion_matrix(y_testing_data, preds) plt.figure(figsize=(12,8)) sns.heatmap(cf_matrix, annot=True) plt.title("Confusion Matrix for Random Forest Classifier on Test Data") plt.show() # Training the models on whole data final_svm_model = SVC() final_lr_model = LogisticRegression() final_rf_model = RandomForestClassifier(random_state=18) final_svm_model.fit(X, y) pickle.dump(final_svm_model, open('D:/Diabetdeck-V3/flask-server/Model/save/svm/finalsvmmodel.h5', 'wb')) final_lr_model.fit(X, y) pickle.dump(final_lr_model, open('D:/Diabetdeck-V3/flask-server/Model/save/lr/finallrmodel.h5', 'wb')) final_rf_model.fit(X, y) pickle.dump(final_rf_model, open('D:/Diabetdeck-V3/flask-server/Model/save/rf/finalrfmodel.h5', 'wb')) # Reading the test data test_data = pd.read_csv("D:/Diabetdeck-V3/flask-server/dataset/Testing.csv").dropna(axis=1) test_X = test_data.iloc[:, :-1] test_Y = encoder.transform(test_data.iloc[:, -1]) # Making prediction by take mode of predictions made by all the classifiers svm_preds = final_svm_model.predict(test_X) lr_preds = final_lr_model.predict(test_X) rf_preds = final_rf_model.predict(test_X) final_preds = [mode([i,j,k])[0][0] for i,j, k in zip(svm_preds, lr_preds, rf_preds)] print(f"Accuracy on Test dataset by the combined model\ : {accuracy_score(test_Y, final_preds)*100}") cf_matrix = confusion_matrix(test_Y, final_preds) plt.figure(figsize=(12,8)) sns.heatmap(cf_matrix, annot = True) plt.title("Confusion Matrix for Combined Model on Test Dataset") plt.show() symptoms = X.columns.values # Creating a symptom index dictionary to encode the input symptoms into numerical form symptom_index = {} for index, value in enumerate(symptoms): symptom = " ".join([i.capitalize() for i in value.split("_")]) symptom_index[symptom] = index data_dict = { "symptom_index":symptom_index, "predictions_classes":encoder.classes_ } pickle.dump(data_dict, open('D:/Diabetdeck-V3/flask-server/Model/save/data_dictionary/datadictionary.h5', 'wb')) Link to dataset here
