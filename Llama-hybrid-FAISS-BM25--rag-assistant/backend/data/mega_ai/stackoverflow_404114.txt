[site]: stackoverflow
[post_id]: 404114
[parent_id]: 403865
[tags]: 
C#: I was trying to find something more elegant - but this should do the trick for now... //Set up our array of integers int[] items = { 1, 3, 5, 7 }; //Figure out how many bitmasks we need... //4 bits have a maximum value of 15, so we need 15 masks. //Calculated as: // (2 ^ ItemCount) - 1 int len = items.Length; int calcs = (int)Math.Pow(2, len) - 1; //Create our array of bitmasks... each item in the array //represents a unique combination from our items array string[] masks = Enumerable.Range(1, calcs).Select(i => Convert.ToString(i, 2).PadLeft(len, '0')).ToArray(); //Spit out the corresponding calculation for each bitmask foreach (string m in masks) { //Get the items from our array that correspond to //the on bits in our mask int[] incl = items.Where((c, i) => m[i] == '1').ToArray(); //Write out our mask, calculation and resulting sum Console.WriteLine( "[{0}] {1}={2}", m, String.Join("+", incl.Select(c => c.ToString()).ToArray()), incl.Sum() ); } Outputs as: [0001] 7=7 [0010] 5=5 [0011] 5+7=12 [0100] 3=3 [0101] 3+7=10 [0110] 3+5=8 [0111] 3+5+7=15 [1000] 1=1 [1001] 1+7=8 [1010] 1+5=6 [1011] 1+5+7=13 [1100] 1+3=4 [1101] 1+3+7=11 [1110] 1+3+5=9 [1111] 1+3+5+7=16
