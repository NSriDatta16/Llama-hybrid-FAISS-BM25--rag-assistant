[site]: stackoverflow
[post_id]: 3653424
[parent_id]: 3653412
[tags]: 
Put the typedef in a place where it makes sense. Putting it at the top would mean that you inject the alias at global namespace scope. Putting it inside the class may mean that it is world viewable or viewable only to members (and/or subclasses thereof) depending on the nearest access specifier (or private if there aren't any). If clients of the class doesn't need to know about this alias mark it as private. If you put it inside the class: Do note however that outside of the class you will need to fully qualify the name as Timing::MessageP or else need a using Timing::MessageP directive in scope. Also, full qualification can be done only once the class has been defined (you cannot create aliases for incomplete types -- forward declaring Timing will thus not work). class Timing { public: Timing() {} private: struct Message { Agent *_agent; double _val; }; MessageP* _msgArr; int _waitingMsgs; }; typedef Timing::Message* MessageP; // okay
