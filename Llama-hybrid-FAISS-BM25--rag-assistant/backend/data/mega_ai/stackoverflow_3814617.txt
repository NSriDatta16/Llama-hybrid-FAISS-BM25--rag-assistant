[site]: stackoverflow
[post_id]: 3814617
[parent_id]: 3814516
[tags]: 
add { } is a construct much like get { } for properties, except add works on events. You're defining custom functionality here when adding delegates to an event. In this case, this method body prevents consecutive duplicates (i.e. you can't register the same method/handler twice in a row ). So in this example: public void HandlerUserChanged(object o, UserChangedEventArgs args) { // some code } public void HandlerUserChanged2(object o, UserChangedEventArgs args) { // some code } Later: UserChanged += HandleUserChanged; UserChanged += HandleUserChanged; UserChanged(this, new UserChangedEventArgs()); The method HandleUserChanged will only fire once, even though you registered it twice. A normal event (without the add { } ) would invoke the function twice. However: UserChanged += HandleUserChanged; UserChanged += HandleUserChanged2; UserChanged += HandleUserChanged; UserChanged(this, new UserChangedEventArgs()); Will allow HandleUserChanged to fire twice, because the last-registered handler isn't ever the one being added. The == operator on events works on the LAST handler. (Thankyou to Matthew for bringing that to attention)
