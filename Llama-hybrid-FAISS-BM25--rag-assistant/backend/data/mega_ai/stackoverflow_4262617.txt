[site]: stackoverflow
[post_id]: 4262617
[parent_id]: 682429
[tags]: 
There is a slightly simpler workaround that works with LINQ to Entities: var result = from entry in table where entry.something == value || (value == null && entry.something == null) select entry; This works becasuse, as AZ noticed, LINQ to Entities special cases x == null (i.e. an equality comparison against the null constant) and translates it to x IS NULL. We are currently considering changing this behavior to introduce the compensating comparisons automatically if both sides of the equality are nullable. There are a couple of challenges though: This could potentially break code that already depends on the existing behavior. The new translation could affect the performance of existing queries even when a null parameter is seldom used. In any case, whether we get to work on this is going to depend greatly on the relative priority our customers assign to it. If you care about the issue, I encourage you to vote for it in our new Feature Suggestion site: https://data.uservoice.com .
