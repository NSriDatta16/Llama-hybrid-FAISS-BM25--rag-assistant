[site]: stackoverflow
[post_id]: 3414735
[parent_id]: 3414404
[tags]: 
Short answer: "Yes" with an "If," long answer: "No" with a "But." These days I tend to miss controller-level unit tests in favour of strong unit-test coverage of models and business objects and functional-test coverage with Cucumber. The assumption here is that the controllers are very light-weight objects routing data into underlying models that encapsulate the vast majority of business logic. However, I still do tend to have some very light coverage of some of the control flow at the controller level. It just tends to be more of a sanity-check. One of the issues with controller-level testing is that you often either have to mock or generate a large number of models and objects in order to test effectively. Given this, I find it more valuable to push these tests up into the functional layers where the style of testing allows you to more efficiently express these dependencies (either by explicitly following the steps required to generate them through your application itself or through a system like Cucumber's declarative rules).
