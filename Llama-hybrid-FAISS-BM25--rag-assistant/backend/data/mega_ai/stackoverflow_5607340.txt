[site]: stackoverflow
[post_id]: 5607340
[parent_id]: 5607016
[tags]: 
What you are referring to is generally called client affinity. Basically, you cookie the client so that the load balancer knows which farmed application server to send a request to. Since the get and post will propagate the cookie, the queries for one user will always go to the same server. You can learn more about some of the config (using Apache as the reverse proxy to Tomcat) here: http://docs.codehaus.org/display/JETTY/Configuring+mod_proxy That said, using a shared storage is often lighter if you don't have a significant farm of backend processors. For example, with a few machines, using memcached as a lightweight storage for the status info is not a bad idea, and one that I have used successfully for both session data and status data. Note also that using a reverse proxy solves the SSL issue (where you can't see the cookie with a hardware load balancer because of the encryption). The RP encodes/decodes and proxies to a backend server. Apache's mod_proxy is a common choice, though nginx is up and coming. You can also alternatively use IP-based affinity. However, I learned that was a bad idea the hard way once, when I realized that the entirety of a very large urban school system reads as one IP because of their filtering system :)
