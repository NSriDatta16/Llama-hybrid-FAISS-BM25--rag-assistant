[site]: stackoverflow
[post_id]: 3493807
[parent_id]: 3493769
[tags]: 
The sTestStruct is not stored in one consecutive are of memory and sizeof(sTestStruct) is not directly related to the size of the records in the file. The numbers members is a reference to an array which you allocate youself in your reading code. But you can easily specify the record size in code since it is a constant value. This code will seek to the record at index . You can then read one record using the body of your loop. const Int32 RecordSize = (2 + 128)*sizeof(Int32) + sizeof(Boolean); fileStream.Seek(RecordSize * index, SeekOrigin.Begin); If you have many different fixed sized records and you are afraid that manually entering the record size for each record is error prone you could devise a scheme based on reflection and custom attributes. Create an attribute to define the size of arrays: [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] sealed class ArraySizeAttribute : Attribute { public ArraySizeAttribute(Int32 length) { Length = length; } public Int32 Length { get; private set; } } Use the attribute on your record type: private struct sTestStruct { public int numberOne; public int numberTwo; [ArraySize(128)] public int[] numbers; // This is ALWAYS 128 ints long. public bool trueFalse; } You can then compute the size of the record using this sample code: Int32 GetRecordSize(Type recordType) { return recordType.GetFields().Select(fieldInfo => GetFieldSize(fieldInfo)).Sum(); } Int32 GetFieldSize(FieldInfo fieldInfo) { if (fieldInfo.FieldType.IsArray) { // The size of an array is the size of the array elements multiplied by the // length of the array. var arraySizeAttribute = (ArraySizeAttribute) Attribute.GetCustomAttribute(fieldInfo, typeof(ArraySizeAttribute)); if (arraySizeAttribute == null) throw new InvalidOperationException("Missing ArraySizeAttribute on array."); return GetTypeSize(fieldInfo.FieldType.GetElementType())*arraySizeAttribute.Length; } else return GetTypeSize(fieldInfo.FieldType); } Int32 GetTypeSize(Type type) { if (type == typeof(Int32)) return 4; else if (type == typeof(Boolean)) return 1; else throw new InvalidOperationException("Unexpected type."); } Use it like this: var recordSize = GetRecordSize(typeof(sTestStruct)); fileStream.Seek(recordSize * index, SeekOrigin.Begin); You will probably have to expand a little on this code to use it in production.
