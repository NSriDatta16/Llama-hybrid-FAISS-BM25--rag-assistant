[site]: stackoverflow
[post_id]: 1881054
[parent_id]: 
[tags]: 
Swing question / JTree / custom tree model

I'm having a problem and hope, someone knows what's going wrong and why and is able to give me the explanation of what I'm missing out right now to make that thing work as suggested. I have a JTree which is build upon a custom TreeModel ("WRTreeModel", see below). The data structure this model shall be used for is build of an root object which contains some fields and furthermore a list which is backed by the "ArrayListModel" shown below. The tree looks fine when I build it using the WRTreeModel. I'm able to expand and collapse the nodes which represent the lists and fields contained in the objects. I can expand and collapse these lists and see their contents as well and so on. Now I want to remove a child of one of the lists and - as I already know - do it by removing it from the model calling the remove method of the ArrayListModel. To make the WRTreeModel aware of that remove, the first thing is to call its fireIntervalRemoved method is called, so far so good. In the WRTreeModels inner class ArrayModelListener the intervalRemoved method prepares the call of fireTreeNodesRemoved which then builds a TreeEvent which is forwarded to all registered TreeModelListeners (and therefore the JTree which registers itself automaticall when it's connected to the model). Now I would expect that the tree reflects the change and updates it's internal and visual representation to show the new state. Unfortunately this doesn't seem to work that way. Something happens. But when I click on the node I just have changed some EventHandler-Exceptions are thrown. Obviously something got really confused. I know it's not easy to answer such a question on the fly but I would really appreciate a fast answer. It would also be of help, if someone knew websites explaining the use of custom tree models (not on DefaultMutableTreeNode or any given implementation based class) and how the event handling and updating of the JTree works. With best regards, Thomas Arts public class ArrayListModel extends ArrayList implements ListModel { ... public E remove(int index) { fireIntervalRemoved(index, index); E removedElement = super.remove(index); return removedElement; } ... } public class WRTreeModel extends LogAndMark implements TreeModel { class ArrayModelListener implements ListDataListener { ... @Override public void intervalRemoved(ListDataEvent e) { int[] indices = new int[e.getIndex1() - e.getIndex0() + 1]; for (int i = e.getIndex0(); i )e.getSource()).subList(e.getIndex0(), e.getIndex1()+1).toArray()); } ... } public Object[] getPathToRoot(Object child) { ArrayList ret = new ArrayList (); if (child == null) return ret.toArray(); ret.add(root); if (child == root) return ret.toArray(); int childType = 0; if (child instanceof List && ((List) child).get(0) instanceof Einleitungsstelle) { childType = 1; } if (child instanceof Einleitungsstelle) { childType = 2; } if (child instanceof List && ((List) child).get(0) instanceof Messstelle) { childType = 3; } if (child instanceof Messstelle) { childType = 4; } if (child instanceof List && ((List) child).get(0) instanceof Ueberwachungswert) { childType = 5; } if (child instanceof Ueberwachungswert) { childType = 6; } if (child instanceof List && ((List) child).get(0) instanceof Selbstueberwachungswert) { childType = 7; } if (child instanceof Selbstueberwachungswert) { childType = 8; } switch (childType) { // List of ESTs case 1: { ret.add(child); break; } // EST case 2: { List listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); ret.add(child); break; } // List of MSTs case 3: { List listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { if (child == einleitungsstelle.getListOfMST()) { ret.add(einleitungsstelle); break; } } ret.add(child); break; } // MST case 4: { List listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { if (child == einleitungsstelle.getListOfMST()) { ret.add(einleitungsstelle.getListOfMST()); break; } } ret.add(child); break; } // List of UEWs case 5: { List listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { ArrayListModel listOfMST = einleitungsstelle.getListOfMST(); if (child == listOfMST) { ret.add(listOfMST); for (Messstelle messstelle : listOfMST) { if (child == messstelle.getListOfUEW()) { ret.add(messstelle.getListOfUEW()); break; } } break; } } break; } // UEW case 6: { List listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { ArrayListModel listOfMST = einleitungsstelle.getListOfMST(); if (child == listOfMST) { ret.add(listOfMST); for (Messstelle messstelle : listOfMST) { if (child == messstelle.getListOfUEW()) { ret.add(messstelle.getListOfUEW()); break; } } break; } } ret.add(child); break; } // List of SUEWs case 7: { List listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { ArrayListModel listOfMST = einleitungsstelle.getListOfMST(); if (child == listOfMST) { ret.add(listOfMST); for (Messstelle messstelle : listOfMST) { if (child == messstelle.getListOfSUEW()) { ret.add(messstelle.getListOfSUEW()); break; } } break; } } break; } // SUEW case 8: { List listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { ArrayListModel listOfMST = einleitungsstelle.getListOfMST(); if (child == listOfMST) { ret.add(listOfMST); for (Messstelle messstelle : listOfMST) { if (child == messstelle.getListOfSUEW()) { ret.add(messstelle.getListOfSUEW()); break; } } break; } } ret.add(child); break; } default: ret = null; } return ret.toArray(); } } ... protected void fireTreeNodesRemoved(Object changed, Object path[], int childIndecies[], Object children[]) { TreeModelEvent event = new TreeModelEvent(this, path, childIndecies, children); synchronized (listeners) { for (Enumeration e = listeners.elements(); e.hasMoreElements();) { TreeModelListener tml = (TreeModelListener) e.nextElement(); tml.treeNodesRemoved(event); } } } ... }
