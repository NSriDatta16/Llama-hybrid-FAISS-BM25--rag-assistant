[site]: stackoverflow
[post_id]: 1787243
[parent_id]: 1178173
[tags]: 
First, what your suggesting is possible and you certainly know your subject. You also know that the trade-off of not using back-referencing implementations is memory. If you control your environment enough this is likely a reasonable approach. The only thing I will comment on before continuing is that I would encourage you to question the choice of using RegEx. You are clearly more familiar with your specific problem and what your trying to solve so only you can answer the question. I don't think ANTLR would be a good alternative; however, A home-brew rules engine (if limited in scope) can be highly tuned to your specific needs. It all depends on your specific problem. For those reading this and 'missing the point', here is some background reading: Regular Expression Matching Can Be Simple And Fast From the same site, there are a number of implementations linked on this page . The gist of the entire discussion of the above article is that the best answer is to use both. To that end, the only widely used implementation I'm aware of is the one used by the TCL language. As I understand it was originally written by Henry Spencer and it employs this hybrid approach. There have been a few attempts at porting it to a c library, though I'm not aware of any that are in wide use. Walter Waldo's and Thomas Lackner's are both mentioned and linked here . Also mentioned is the boost library though I'm not sure of the implementation. You can also look at the TCL code itself (linked from their site ) and work from there. In short, I'd go with TRE or Plan 9 as these are both actively supported. Obviously none of these are C#/.Net and I'm not aware of one that is.
