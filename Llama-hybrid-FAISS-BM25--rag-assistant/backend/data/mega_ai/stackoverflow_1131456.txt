[site]: stackoverflow
[post_id]: 1131456
[parent_id]: 
[tags]: 
Understanding F# Value Restriction Errors

I don't understand how the Value Restriction in F# works. I've read the explanation in the wiki as well as the MSDN documentation . What I don't understand is: Why, for example, this gives me a Value Restriction error (Taken from this question): let toleq (e:float ) a b = (abs ( a - b ) ) But ths doesn't: let toleq e (a:float ) b = (abs ( a - b ) ) This is generalized all right... let is_bigger a b = a but this isn't (it is specified as int): let add a b = a + b Why functions with implicit parameters generate Value Restriction: this: let item_count = List.fold (fun acc _ -> 1 + acc) 0 vs this: let item_count l = List.fold (fun acc _ -> 1 + acc) 0 l (Mind you, if I do use this function in a code fragment the VR error will be gone, but then the function will be specified to the type I used it for, and I want it to be generalized) How does it work? (I'm using the latest F#, v1.9.6.16)
