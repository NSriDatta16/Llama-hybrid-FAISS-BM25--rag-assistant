[site]: crossvalidated
[post_id]: 560766
[parent_id]: 
[tags]: 
Matrix Values to Probabilities with Logistic Regression

I have a Non Negative Matrix Factorization algorithm and I'm calculating the A-hat matrix from it. Rows of the matrix are customers, columns are my products and values are the occurrences of product views. Fitting the data to the model and I calculate the R matrix as follow. model = NMF( n_components=100 ) W = model.fit_transform( input_matrix ) H = model.components_ R = np.dot( W, H ) Then I want to calculate the probabilities to this matrix. Currently I can calculate them by normalizing the matrix with the following code row_sums= R.sum(axis=1) probabilities= R / row_sums[:, np.newaxis] But its not 100% correct way to calculate the probabilities. The correct way is to run a logistic regression algorithm to generate them. How to do that?
