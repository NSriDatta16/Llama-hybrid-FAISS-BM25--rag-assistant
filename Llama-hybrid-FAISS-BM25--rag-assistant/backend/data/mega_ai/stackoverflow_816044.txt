[site]: stackoverflow
[post_id]: 816044
[parent_id]: 816018
[tags]: 
It depends on what you're testing. Dependency Injection solves the problem of testing your class, without having to worry about it's dependencies on outside services (which may fail, not have test data, or otherwise be unsuitable for a unit test). You wouldn't mock a value object (or a string, int, etc.) just to test that your class correctly constructed it and called the difference operator...that's all part of the implementation and isn't really relevant to testing it. You would, however, test that your getRelativeTimeDifferencePhrase correctly returns "24 hours ago" when passed 60 * 60 * 24 seconds . You will then realize that your hard coding time() leads to a fragile test - as you can't predict with enough accuracy what time() will return when your code runs. This will lead to a RealTimeService , which will introduce a seam that you can control. Having your class instantiate a RealTimeService will leave you no way to inject your MockTimeService - so that you can hard code what time() it is, so you then will end up passing an ITimeService to your constructor. Now, you have dependency injection. ;)
