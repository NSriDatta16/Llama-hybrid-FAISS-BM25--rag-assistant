[site]: stackoverflow
[post_id]: 1009430
[parent_id]: 877295
[tags]: 
The first thing I think of is a bit more efficient and (IMO) a bit more elegant, but still too much typing. Actually, it's about equivalent to kcwu's. c = reduce(lambda(d, k): [d.update({k: d.get(k, 0) + b[k]}), d][1], b, a.copy()) It's really a shame that dict.update doesn't return self . I guess it's not the Python way. If it did, the [..., d][1] trick would be unnecessary. Perl: "Easy things are easy, hard things are possible" %a = (a => 1, b => 2); %b = (b => 3, c => 2); %c = (%a, map {$_ => $a{$_} + $b{$_}} keys %b); Haskell: "Easy things are hard, hard things are easy" "Hard things are easy, the impossible just happened" import qualified Data.Map as M a = M.fromList [('a', 1), ('b', 2)] b = M.fromList [('b', 3), ('c', 2)] c = M.unionWith (+) a b
