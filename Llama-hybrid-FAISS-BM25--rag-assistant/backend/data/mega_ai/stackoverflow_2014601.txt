[site]: stackoverflow
[post_id]: 2014601
[parent_id]: 2014545
[tags]: 
For PHPs internal deprecated functions, just add E_STRICT to error_reporting . For userland functions to raise Notice or Warning about deprecated functions, I'd suggest the developer who took the time to add the @deprecated annotation also triggers an E_USER_DEPRECATED warning, e.g. function getFoo(){ trigger_error(__FUNCTION__ . 'is deprecated', E_USER_DEPRECATED ); return getBar(); } I am not aware if any of the available QA tools can automatically detect if code contains deprecated method calls. Those are your best bet though. You shouldn't need to be concerned about removing deprecated methods or functions if you are using TDD with 100% code coverage. Your automated tests will simply fail and you will know where to look.
