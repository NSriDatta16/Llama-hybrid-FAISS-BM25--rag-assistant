[site]: stackoverflow
[post_id]: 488825
[parent_id]: 488670
[tags]: 
My python is a little bit rusty (anyone can feel free to edit this code to make corrections, if I've messed up the syntax somehow), but here goes.... def movingAverageExponential(values, alpha, epsilon = 0): if not 0 This function moves backward, from the end of the list to the beginning, calculating the exponential moving average for each value by working backward until the weight coefficient for an element is less than the given epsilon. At the end of the function, it reverses the values before returning the list (so that they're in the correct order for the caller). (SIDE NOTE: if I was using a language other than python, I'd create a full-size empty array first and then fill it backwards-order, so that I wouldn't have to reverse it at the end. But I don't think you can declare a big empty array in python. And in python lists, appending is much less expensive than prepending, which is why I built the list in reverse order. Please correct me if I'm wrong.) The 'alpha' argument is the decay factor on each iteration. For example, if you used an alpha of 0.5, then today's moving average value would be composed of the following weighted values: today: 1.0 yesterday: 0.5 2 days ago: 0.25 3 days ago: 0.125 ...etc... Of course, if you've got a huge array of values, the values from ten or fifteen days ago won't contribute very much to today's weighted average. The 'epsilon' argument lets you set a cutoff point, below which you will cease to care about old values (since their contribution to today's value will be insignificant). You'd invoke the function something like this: result = movingAverageExponential(values, 0.75, 0.0001)
