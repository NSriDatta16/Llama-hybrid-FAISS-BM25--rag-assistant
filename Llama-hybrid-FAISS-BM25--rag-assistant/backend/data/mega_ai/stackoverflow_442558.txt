[site]: stackoverflow
[post_id]: 442558
[parent_id]: 442322
[tags]: 
I would really enjoy if certain deprecated features were removed - for example, if the Date object was truly made immutable I would be very happy. As it is, if you're writing an immutable class you can't assume Dates are immutable and have to defensively copy them, for instance, and you can't reliably use them as keys in Hashmaps (since in both cases, other code can mutate the Date regardless of whether the methods are annotated as deprecated or not). When it comes to adding new language features, I don't fully understand the backwards compatibility mantra. To my mind, it isn't that big a deal if code written for a previous version needs some tweaks to run in a later version. In fact there is precedent for this anyway; between 1.5 and 1.6, extra methods were added to the ResultSet interface, and so code that would compile and run under Java 1.5 wouldn't even compile under 1.6. Considering legacy apps, is it reasonable for someone to expect an application that hasn't been updated in 5 years to run perfectly on the latest version of the JVM? If organisations are still using Java 1.4 and applications that were written for it, do they really care what goes into Java 7? Breaking backwards compatibility does not mean that all previous versions of JVMs will become broken as well. If the app is targeted at an earlier version, one can just run it on that version of the JVM with no worries. Most importantly, as time goes by and people use Java, mistakes and feature gaps become evident, and correcting/implementing those would be a major boon. Being straightjacketed when trying to improve the language because of what came before if unfortunate, and in my view not a fundamental requirement. Of course, there would need to be some thought towards the upgrade path. To suddenly change ints to Integers, for example, would require masses of tedious code changes for everyone (as well as having to add extra null checks, etc.). However, adding a new feature that happens to break backwards compatibility (e.g. closures), or removing methods that have been deprecated for years, will have little effect on existing code. (If you've been using deprecated methods then tough, you should have removed them before but now you're forced to!)
