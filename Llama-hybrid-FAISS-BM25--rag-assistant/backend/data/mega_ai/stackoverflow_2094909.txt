[site]: stackoverflow
[post_id]: 2094909
[parent_id]: 2087601
[tags]: 
Silverlight is different enough from AIR and from Prism that the comparison here could get very muddled. I'm not really qualified to speak on JavaFX, but I'm familiar enough with the other three to know that I wouldn't compare them directly. Silverlight is a browser plugin with some very interesting capabilities that can come into play when its taken out of the browser. From a deployment side, a single app is developed, which can be run inside a webpage (always the default) or installed to the desktop, although applications that are designed for installation may be severely restricted (or potentially non-functional) until they are installed. Probably the best comparison is to the combination of Flash and AIR, with the advantage of offering a solution to applications that benefit from a more hybrid solution (the transition from web to desktop is a simple path for a consumer, who can try the application and then install it seamlessly for perhaps more functionality). AIR is the desktop side of Adobe's development platform; the installed side of Flash. As Simon mentions, it has serious roots in the design community and is probably a very attractive solution for Flash developers looking to leverage their existing Actionscript knowledge and expand beyond the restrictions of an in-browser application. I've heard AIR referred to as a 'Twitter client platform', which is unfair in spirit (even if it is reflective of it's most common usage) , though it does point to the fact that data visualization is probably the biggest strength that AIR has. Silverlight does this as well, but also has more robust libraries for manipulating data, which is less simple (in my opinion) in Actionscript. Prism is new, which gives it all of the advantages of promising things and all of the drawbacks of not having delivered them yet. Perhaps HTML5 will provide a superior way of handling everything that current browser plugins do, but this is not true as of now and it's hard to imagine anyone assuming that support on an application that they're planning to deploy today. Prism's strength is in taking existing web pages out of the browser, adding some functionality and losing the browser based restrictions, but it's still hard (if not impossible) to say what applications designed for Prism will offer. Simon's point about HTML5 is a good one; the base language was never designed for application development and it shows. Personally, I'm a Silverlight developer, mostly because it made use of my existing knowledge of C# and the .net libraries. I've met AIR developers who are in the same boat, having come from Flash development. I would imagine that a serious HTML/CSS/Javascript developer might feel the same way about Prism and I think that the idea of learning a foreign language and a new set of libraries and a new platform is daunting enough (unless your intent is just to learn something completely new) that leveraging existing skills might be the simplest way to 'compare' these technologies and choose between them. Chances are, if you're a web developer and you need to get something done, you'll find that one of the four you listed feels more at home and there always seem to be workarounds for parts of the platform that are lacking. I've found that the easiest way to get new features on a platform is to claim they can't be done and wait to be proven wrong.
