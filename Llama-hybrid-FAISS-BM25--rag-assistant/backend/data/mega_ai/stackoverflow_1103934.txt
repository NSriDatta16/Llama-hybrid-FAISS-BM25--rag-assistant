[site]: stackoverflow
[post_id]: 1103934
[parent_id]: 1103370
[tags]: 
The MVP pattern will give you that logical separation, but mostly I believe that MVP`s strength lies in writing testable code. I would recommend reading Uncle Bob`s (Robert C Martin ) book called Agile Principles, Patterns and practices. Also I believe that you don`t necessarily need to use a pattern like MVP to logically separate your business logic from your UI layer. If properly structured, all your business logic would then reside in a business layer, which is total disconnected from your UI layer. You can then use several interfaces, like WinForms, WebForms or WebService or even WPF, to the same business layer without having to rewrite any business logic, validation, authorization rules ect. In this case I would recommend reading Rocky Lhotka's book called Expert C# Business Objects. This book is an easy read and he explains how to separate logical layers. Also his goal is to keep UI code to minimum.
