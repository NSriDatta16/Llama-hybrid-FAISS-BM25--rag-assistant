[site]: stackoverflow
[post_id]: 621215
[parent_id]: 601692
[tags]: 
This is my attempt to solve this problem in-place without extra memory. It is a O(n) algorithm. The algorithm by jpalecek is quite intelligent but not intuitive to read, at least not for me. I've tried it out and it works but I haven't had the time to understand why and comments would be great. The algorithm by Gracenotes is great as long as the array isn't too big. If the data is large, one may have to create the array dynamically. The basic idea in my algorithm is to update the array by following the chain of index and value pairs. For example index 0 maps to value 3. By using value 3 as the index you will find the next pair which is index 3 in the array and value 1. Essentially I save the next index and value pair and update the previous index and pair value until I am done the chain. If you can make it more efficient, elegant or better overall, I would be interested. I've compiled and tested the code below but haven't used any other test input. I've left in debug output for those who wish to try it out and better understand how it works. // Array print routine. void printArray (const char * str_p,int a[], int n) { printf ("%s\n", str_p); for (int i = 0; i
