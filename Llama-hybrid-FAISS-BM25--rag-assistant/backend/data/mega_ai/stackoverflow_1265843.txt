[site]: stackoverflow
[post_id]: 1265843
[parent_id]: 1265666
[tags]: 
macros are evil :p Seriously, consider using inlined template functions instead setting a pointer to NULL after deallocation tends to mask errors encourages if (ptr != NULL) checks as a flow control mechanism. Personally, I consider this a code smell along the lines of void foo(int arg) being replaced with void foo(int arg, bool doAdvancedThings=false) encourages usage of raw pointers to memory that needs to be deleted - shared_ptr and its relatives should always be used for ownership, raw pointers can be used for other access encourages looking at a pointer variable after deallocation, even worse using if (ptr != NULL) instead of if (ptr) ... comparing pointers is another code smell
