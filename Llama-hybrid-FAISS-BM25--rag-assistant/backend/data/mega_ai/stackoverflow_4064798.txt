[site]: stackoverflow
[post_id]: 4064798
[parent_id]: 4064464
[tags]: 
You might consider using something like this, though be careful -- there are plenty of things that can go wrong. For example, '12034 Riverside Road' would be misinterpreted to be Riverside city, with zipcode 12034. One way to avoid such a mistake would be to enumerate all the forms an address can take, and then use pyparsing or regex to try to match those forms. Another problem with the code below is that it forms two possibly gigantic regexps (if the zipcode and/or city files are very large). I'm not sure how the code would perform under such a condition. We can think about how to rework the code if this proves to be a problem. import re import itertools as it with open('zipcode','r') as z: zipcode_pat=re.compile('({0})'.format('|'.join(line.rstrip() for line in z)), re.IGNORECASE) with open('city','r') as c: city_pat=re.compile('({0})'.format('|'.join(line.rstrip() for line in c)), re.IGNORECASE) def gitone(seq): for match in seq: if match: yield match.group(1) else: yield 'Missing' with open('address','r') as f: f1,f2=it.tee(f,2) zipcodes=gitone(zipcode_pat.search(line) for line in f1) cities=gitone(city_pat.search(line) for line in f2) for city,zipcode in it.izip(cities,zipcodes): print('{c} {z}'.format(c=city,z=zipcode)) # Riverside 12034 # Santa clara 93453 # Missing Missing # O'Fallon Missing
