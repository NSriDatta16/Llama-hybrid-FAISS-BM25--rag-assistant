[site]: stackoverflow
[post_id]: 605494
[parent_id]: 605480
[tags]: 
The approach I used was a simple brute force solution. The algorithm followed these basic steps: Count the frequency of each number in the file. In the same pass, compute the total amount of numbers in the file and determine the greatest number as maxNumber. Compute the probability of each number as its frequency divided by the total amount of numbers in the file. Determine "optimalStop" as equal to log2(maxNumber). This is the ideal number of bits that should be used to represent maxNumber as in Shannon information theory and therefore a reasonable estimate of the optimal maximum amount of bits used in the encoding of a particular number. For every "start" value from 1 to "optimalStop" repeat step 5 - 7: For every "step" value from 1 to ("optimalStop" - "start") / 2, repeat step 6 & 7: Calculate the "stop" value closest to "optimalStop" that satisfies stop = start + step * i for some integer i. Compute the average number of bits that would be used by this encoding. This can be calculated as each number's probability multiplied by its bit length in the given encoding. Pick the encoding with the lowest average number of bits.
