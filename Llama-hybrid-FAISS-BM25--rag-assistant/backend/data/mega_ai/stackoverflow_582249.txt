[site]: stackoverflow
[post_id]: 582249
[parent_id]: 581182
[tags]: 
In Common Lisp: (let ((a 3)) (mapcar (lambda (b) (+ a b)) (list 1 2 3 4))) -> (4 5 6 7) In above form the lambda function is passed DOWNWARD. When called by the higher-order function MAPCAR (which gets a function and a list of values as arguments, and then applies the function to each element of the list and returns a list of the results), the lambda function still refers to the variable 'a' from the LET expression. But it happens all within the LET expression. Compare above with this version: (mapcar (let ((a 3)) (lambda (b) (+ a b))) (list 1 2 3 4)) Here the lambda function is returned from the LET. UPWARD a bit. It then gets passed to the MAPCAR. When MAPCAR calls the lambda function, its surrounding LET is no longer executing - still the function needs to reference the variable 'a' from the LET.
