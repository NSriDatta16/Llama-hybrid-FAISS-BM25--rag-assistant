[site]: stackoverflow
[post_id]: 2862240
[parent_id]: 2861762
[tags]: 
that sure seems like a more elegant solution, especially given I haven't used ScheduledExecutorService before. But I'm still struggling to put all the pieces together though! I'm not sure if and when worker invoked for its 45sec countdown? Also, my intention is for such a worker to restart the countdown once it encounters a line of stdout, essentially resetting the countdown to a fresh 45sec window. Does that help clarify. While I work to incorporate ScheduledExecutorService into my solution, here's the entire sample code i've been using to replicate it using the threads. Lemme know if I you get it to sooner than I can. I am able to invoke a thread on every newline of stdout I come across, but cannot gracefully handle the case when no interruption occurs for the declared time window :( Hope the comments in the code detailed enough to convey my intentions, else pls let me know and I could clarify: import java.io.BufferedReader; import java.io.FileDescriptor; import java.io.FileInputStream; import java.io.InputStream; import java.io.InputStreamReader; import java.nio.channels.Channels; public class InterruptInput { static BufferedReader in = new BufferedReader( new InputStreamReader( Channels.newInputStream( (new FileInputStream(FileDescriptor.in)).getChannel()))); boolean TimeUp = false; public static void main(String args[]) { try { System.out.println("Enter lines of input (user ctrl+Z Enter to terminate):"); System.out.println("(Input thread will be interrupted in 10 sec.)"); // interrupt input in 10 sec String line = in.readLine(); while ((line.compareTo("") != 0)) { System.out.println("Read line:'"+line+"'"); TimeOut ti = new TimeOut(); Thread t = new Thread(ti); t.start(); if((line = in.readLine()) != null) { t.interrupt(); } } System.out.println("outside the while loop"); } catch (Exception ex) { System.out.println(ex.toString()); // printStackTrace(); } } public static class TimeOut extends Thread { int sleepTime = 10000; private volatile Thread threadToInterrupt; public TimeOut() { // interrupt thread that creates this TimeOut. threadToInterrupt = Thread.currentThread(); setDaemon(true); } public void run() { System.out.println("starting a new run of the sleep thread!!"); try { sleep(10000); // wait 10 sec } catch(InterruptedException ex) {/*ignore*/ System.out.println("TimeOut thread interrupted!!"); //I need to exit here if possible w.out executing //everything after the catch block } //only intend to come here when the 10sec wait passes //without interruption. Not sure if its plausible System.out.println("went through TimeOut without interruption"); //TimeUp = true; } } }
