[site]: stackoverflow
[post_id]: 1395933
[parent_id]: 
[tags]: 
What strategy should be used when exposing c++ to Lua

I have a c++ library which has functionality exposed to Lua, and am seeking opinions on the best ways to organise my lua code. The library is a game engine, with a component based Game Object system. I want to be able to write some of these components as classes in Lua. I am using LuaBind, so I can do this but there are some implementation choices I must make, and would like to know how others have done it. Should I have just one global lua_State, or one per object, one per scene, etc? This sounds like a lot of memory overhead, but will keep everything nice and separate. Should I have one GLOBALS table, or one per object, which can be put in place before a call to a member? This would seem to minimize the chances of some class deciding to use globals, and another accidentally overwriting it, with less memory overhead than having many lua_States. Or should I just bung everything in the one globals table? Another question involves the lua code ittself. Two strategies occur... Firstly shoving all class definitions in one place, loading them when the application launches, Secondly putting one class definition per file, and simply making sure that file is loaded when I need to instance it. I'd appreciate anyone's thoughts on this, thanks.
