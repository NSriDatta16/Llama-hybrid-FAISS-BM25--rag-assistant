[site]: stackoverflow
[post_id]: 3573479
[parent_id]: 
[tags]: 
How to create a Generic DAO class using Hibernate Context sessions

I'm trying to implement a Generic DAO using the Hibernates Context Sessions. Following was my shot:| import java.io.Serializable; public interface GenericDao { /** Persist the newInstance object into database */ ID create(T newInstance); /** * Retrieve an object that was previously persisted to the database using * the indicated id as primary key */ T read(ID primaryKey); /** Save changes made to a persistent object. */ void update(T transientObject); /** Remove an object from persistent storage in the database */ void delete(T persistentObject); } import java.io.Serializable; import org.hibernate.Session; import org.hibernate.SessionFactory; import org.hibernate.Transaction; import org.springframework.transaction.annotation.Transactional; @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl implements GenericDao { private SessionFactory sessionFactory; public void setSessionFactory(final SessionFactory sessionFactory) { this.sessionFactory = sessionFactory; } @Override public ID create(final T newInstance) { ID id = null; final Session session = sessionFactory.openSession(); final Transaction tx = session.beginTransaction(); try { id = (ID) session.save(newInstance); tx.commit(); session.close(); } catch (final Exception e) { if (tx != null) { tx.rollback(); } e.printStackTrace(); } finally { if (session.isOpen()) { session.close(); } } return id; } @Override public T read(final ID primaryKey) { T id = null; final Session session = sessionFactory.openSession(); final Transaction tx = session.beginTransaction(); try { id = (T) session.get(T, primaryKey); tx.commit(); session.close(); } catch (final Exception e) { if (tx != null) { tx.rollback(); } e.printStackTrace(); } finally { if (session.isOpen()) { session.close(); } } return id; } @Override public void update(final T transientObject) { final Session session = sessionFactory.openSession(); final Transaction tx = session.beginTransaction(); try { session.saveOrUpdate(transientObject); tx.commit(); session.close(); } catch (final Exception e) { if (tx != null) { tx.rollback(); } e.printStackTrace(); } finally { if (session.isOpen()) { session.close(); } } } @Override public void delete(final T persistentObject) { final Session session = sessionFactory.openSession(); final Transaction tx = session.beginTransaction(); try { session.delete(persistentObject); tx.commit(); session.close(); } catch (final Exception e) { if (tx != null) { tx.rollback(); } e.printStackTrace(); } finally { if (session.isOpen()) { session.close(); } } } } applicationContext: Ours is a new application which we are trying to implement using Spring 3.0.3 and Hibernate 3.5.5. Q1. Although I did implement it and is working, did I do in the correct way? Q2. How can I implement find() operation using generics? id = (T) session.get(T, primaryKey); This line is giving compilation error. UPDATE : The error is because the first param is of type Class . public Object get(Class clazz, Serializable id) throws HibernateException Q3. How to convert T to T.class ?
