[site]: stackoverflow
[post_id]: 437390
[parent_id]: 437309
[tags]: 
It would help if you mentioned your platform and language, but generally it sounds like you are describing Model-View-Controller . Your "GUI" object(s) are the View. This is where you keep all the rendering logic for your user interface. User interactions with the View are handled by the Controller. The Controller is a thin layer of event handles. User interaction calls methods on the Controller, which then routes them to the Model. Your "non-GUI" object(s) are the Model. This is the object that contains business logic and whose state is ultimately updated by clicking buttons on your GUI. You mention "embedding" references between the objects. This is not necessary as long as events in your GUI can be routed by some mechanism to your Controller. This design pattern is useful because it separates your UI logic from your business logic. You can "snap on" a new Views very easily because there is very little event wiring between the View and the controller. The Wikipedia article has more information and links to implementation examples.
