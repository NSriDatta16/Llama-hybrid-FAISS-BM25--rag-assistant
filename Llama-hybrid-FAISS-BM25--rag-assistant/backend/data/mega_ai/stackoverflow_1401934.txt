[site]: stackoverflow
[post_id]: 1401934
[parent_id]: 1400590
[tags]: 
You really made my day buddy... Since an already trained neural network won't be much different than a regular state machine, there is no point writing a neural network VM for a deterministic instruction set. It might be interesting to train such a VM with multiple instruction sets or an unknown set. However, I doubt it will be practical to execute such a training and even a %99 correct interpreter will be of any use for conventional bytecode. The only use of a neural network VM I can think of is executing a program that contains fuzzy logic constructs or AI algorithm heuristics. Some silly stack machine example to demonstrate the idea: push [x1] push [y1] ;start coord push [x2] push [y2] ;end coord pushmap [map] ;some struct stepastar ;push the next step of A* heuristics to accumulator and update the map pop ;do sth with is and pop stepastar ;next step again ... ;stack top is a map reward ;we liked the coordinate. reinforce the heuristic stepastar ... ;stack top is a map punish ;we didn't like the next coordinate. try something different There is no explict heuristic here. Just assume we keep all state in *map including the heuristic algorithm. You see it looks silly and not completely context sensitive but a neural network is of no value if it doesn't learn online.
