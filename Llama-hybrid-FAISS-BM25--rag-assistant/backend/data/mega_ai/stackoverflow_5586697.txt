[site]: stackoverflow
[post_id]: 5586697
[parent_id]: 2216610
[tags]: 
I think a simpler solution is to create a superview that intercepts all the touches and decides what to do. Then in IB, you make your view an instance of PianoView, and make all the keys subviews. Each key would have a tag that identifies which key it is, so PianoView knows what note to play. PianoView has a currentView property which keeps track of the last view in touchesMoved so it doesn't keep trying to play the same key. I have a keyboard with similar but different requirements, and this approach works well. The sample code below intercepts touches in hitTest:withEvent: . Then, in the touches* methods, it uses UIView's default implementation of hitTest:withEvent: to determine which key is being played. You'll have to modify it a bit if you want to support playing keys simultaneously with multi-touch. @implementation PianoView -(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event { // intercept touches if ([self pointInside:point withEvent:event]) { return self; } return nil; } -(void) touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event { UIView* view = [super hitTest: [[touches anyObject] locationInView: self] withEvent: nil]; // highlight subview under touch if (view != nil && view != self) { if ([view isKindOfClass:[UIButton class]]) { [(UIControl *)view setHighlighted:YES]; } [self setCurrentView:view]; [self playKey:view]; } } -(void) touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event { // un-highlight everything for (UIView *subview in [self subviews]) { if ([subview isKindOfClass:[UIButton class]]) { [(UIControl *)subview setHighlighted:NO]; } } [self stopPlaying]; [self setCurrentView:nil]; } -(void) touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event { UIView* view = [super hitTest: [[touches anyObject] locationInView: self] withEvent: nil]; if (view != [self currentView]) { UIView *oldKey = [self currentView]; // un-highlight if ([oldKey isKindOfClass:[UIButton class]]) { [(UIControl *)oldKey setHighlighted:NO]; } if ([view isKindOfClass:[UIButton class]]) { [(UIControl *)view setHighlighted:YES]; } [self stopPlaying]; [self playKey:view]; [self setCurrentView:view]; } } -(void) touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event { UIView* view = [super hitTest: [[touches anyObject] locationInView: self] withEvent: nil]; for (UIView *subview in [self subviews]) { if ([subview isKindOfClass:[UIButton class]]) { [(UIControl *)subview setHighlighted:NO]; } } [self stopPlaying]; [self setCurrentView:nil]; } @end
