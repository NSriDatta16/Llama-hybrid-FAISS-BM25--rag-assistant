[site]: stackoverflow
[post_id]: 3531234
[parent_id]: 
[tags]: 
How do I produce a collection of game entities from another collection without producing garbage?

I've been playing around with XNA a lot lately and I've also been reading quite a bit about garbage collection in games. I think I've done a reasonable job of reducing the amount of garbage by using pooling and avoiding a dependence on foreach. Right now I have my base game entities stored in a KeyedCollection that allows me to iterate over all entities (like a List) and reference an entity by key (like a Dictionary). I would like to be able to query my collection and return another collection without producing garbage each query. I've included a sample of the concept below because I think I'm better at coding them I am at explaining... /// /// Defines a sample entity. /// public class SampleEntity { public uint Id; public Vector2 Position; } /// /// Defines a collection of sample entities. /// public class EntityCollection : KeyedCollection { /// /// Return the key for the supplied item. /// protected override uint GetKeyForItem(SampleEntity item) { return item.Id; } } /// /// Defines the sample game class. /// public class GameSample { /// /// Create a new instance of the GameSample class. /// public GameSample() { Entities = new EntityCollection(); } /// /// Get the collection of game entities. /// public EntityCollection Entities { get; private set; } /// /// Return the collection of entities within a radius of the supplied point. /// public List Query(Vector2 center, float radius) { List results = new List () // BAD, BAD, BAD!!!!! // // add the entities to the results collection // return results; } } This (overly simplified) example would produce a heck of a lot of garbage because it creates a new List object every call. I've also played with creating a global results list and clearing every call but that seems ugly. /// /// Return the collection of entities within a radius of the specified point. /// public List Query(Vector2 center, float radius) { _globalResults.Clear(); // // add the entities to the global results collection // return _globalResults; } Am I just missing something? Is there a more elegant solution out there I'm just not aware of.
