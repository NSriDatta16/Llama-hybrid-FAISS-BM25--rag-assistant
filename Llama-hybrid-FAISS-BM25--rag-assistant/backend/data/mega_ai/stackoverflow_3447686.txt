[site]: stackoverflow
[post_id]: 3447686
[parent_id]: 3447512
[tags]: 
It seems to me you are performing a segmentation of some sort. You could try doing this with an adaptive algorithm, which sets the threshold itself by calculating some average values of points. This particular algorithm assumes that the boundary points represent the background, while the rest of the points represent the object. Here's the algorithm: calculate u1 -> the grayscale average of boundary points calculate u2 -> the grayscale average of all other points T_old = 0 T_new = (u1 + u2) / 2 while (T_new != T_old) //you might want to modify this by introducing an epsilon value, something like // if T_new near T_old (abs(T_new-T_old)>1) u1 = grayscale average of points where grayscale intensity is lower than T_new u2 = grayscale average of points where grayscale intensity is higher or equal to T_new T_old =T _new T_new = (u1 + u2) / 2 end threshold = T_new This should find the near optimum threshold for a grayscale image.
