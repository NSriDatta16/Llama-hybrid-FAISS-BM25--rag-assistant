[site]: stackoverflow
[post_id]: 1142941
[parent_id]: 1142848
[tags]: 
Don't design your bytecode it is unnecessary! I would recommend looking into LLVM and GNU Lightning that do alot of the hard-work for you and just demand you create an AST-like schema for translation after you have annotated things out and resolved scope and so on. The dragon book also includes some sections on bytecode. The Art of Computer Programming might also help as the Mix language states some (dated) but important design decisions. Really, your intermediate code should be: Something that you wrote to be an efficient intermediate form that allows for popular optimization algorithms and translation to a backend without loss of semantics through bad translation and the like: A well known and used IR that you can use other tools to translate to machine code. Even if you use the .NET/Mono setup as IR then if it suites your needs then great. It is all about your requirements, don't design your own IR/bytecode unless you need to. If something else fits, use it! You don't need to maintain it!
