[site]: stackoverflow
[post_id]: 2217080
[parent_id]: 
[tags]: 
Is Ruby 1.9.1 actually ready and faster for a new Rails deployment?

I'm not going to make this into a Rails vs Framework X discussion, there's plenty of those already. After seriously contemplating what framework I'm going to use for my next deployment, I decided it's very difficult to pass up the out of the box REST exposure Rails gives you for minimal work back. This is something that requires slightly more work in Django, and considering I'm putting mostly emphasis on the API portion of the app, Rails makes more sense this time around. Considering how important it is for me to write an app that contains heterogeneous clients (iphone/android/tablets) that can access (not just web browsers), I need to be able to build RESTful APIs with minimal resistance from whatever framework I'm using. My question is, is Rails ready to handle not a Twitter sized app, but something that does roughly 75,000 unique hits a day? Does Ruby 1.9.1 really improve things? There's plenty of nightmare stories and equally as many success stories depending on who you ask. Joel Spolsky (one of the founders of stackoverflow.com), believes Ruby itself is just not ready for prime time because it's still considerably slower than other interpreted languages. I'm not worried about getting to Twitter's size (that's a problem I wish to have one day), but on the same token, I do have a site with an average of 75,000 unique users a day. I'm wondering what kind of scaling issues I'll run into by deciding to use Ruby 1.9.1 + latest Rails (CPU costs + memory footprint) as part of my API stack vs. just taking the time to actually do a little extra work in Django to build a RESTful API. As Joel mentions in his article, I don't want to buy 100 servers when I can buy 10. I would love to be convinced as to why Rails is now ready to meet my requirements.
