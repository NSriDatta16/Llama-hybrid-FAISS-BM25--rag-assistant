[site]: crossvalidated
[post_id]: 259965
[parent_id]: 259862
[tags]: 
I have not personally worked with this type of movement prediction, but in my experience with other problems I typically remove features that are simple linear transformations of others. The reason I do this is because a linear transformation of a linear transformation is just another linear transformation. So, if we start with 2 features, add a third feature that is a linear transformation of the first 2, and then pass these features through a linear classifier, the result will still be a linear transformation of the first 2 features. In addition, linear dependence between features can harm non-neural network classifiers that need to estimate covariance matrices, causing these matrices to become non-full-rank. However, it can be useful to include non-linear transformations of the original features. This could be a way of including expert knowledge in the model, which could be quite important if you do not have a lot of training data. For classifiers that do not calculate linear transformations (such as decision trees and random forests), I think it's possible that including linear feature transformations might help. If the decision tree splits on a single feature at a time (such as the popular C4.5 algorithm), you are given the training algorithm the option of splitting the data using linear transformations instead of just the raw features.
