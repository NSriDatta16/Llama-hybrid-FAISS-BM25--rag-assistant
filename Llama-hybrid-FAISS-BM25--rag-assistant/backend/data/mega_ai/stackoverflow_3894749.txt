[site]: stackoverflow
[post_id]: 3894749
[parent_id]: 3880587
[tags]: 
With an if statement, you don't have to do anything if you don't want to move. Also, don't forget about the radius of the circle, and don't forget about checking for the value being to small, not just too big: // If the new position is if (this.ox + dx = 0 + radius && // and not too far left this.oy + dy >= 0 + radius) // and not too far up { // ... then move this.attr({cx: this.ox + dx, cy: this.oy + dy}); } // else nothing jsFiddle example But I like to use min and max more: var nowX, nowY, w = ..., h=..., r=..., move = function (dx, dy) { // move will be called with dx and dy // restrict movement of circle to within boundaries // You can combine the following 4 lines into 2 or even 1, // but I left it as 4 for readability. nowX = Math.max(0 + r, this.ox + dx); nowY = Math.max(0 + r, this.oy + dy); nowX = Math.min(w - r, nowX); nowY = Math.min(h - r, nowY); this.attr({cx: nowX, cy: nowY}); } So, here's a full working example (jsFiddle) window.onload = function() { var nowX, nowY, w = 300, h=300, r=30, R = Raphael("canvas", w, h), c = R.circle(100, 100, r).attr({ fill: "hsb(.8, 1, 1)", stroke: "none", opacity: .5, cursor: "move" }); var start = function () { // storing original coordinates this.ox = this.attr("cx"); this.oy = this.attr("cy"); this.attr({opacity: 1}); }, move = function (dx, dy) { // move will be called with dx and dy // restrict movement of circle to within boundaries nowX = Math.max(0 + r, this.ox + dx); nowY = Math.max(0 + r, this.oy + dy); nowX = Math.min(w - r, nowX); nowY = Math.min(h - r, nowY); this.attr({cx: nowX, cy: nowY}); }, up = function () { // restoring state this.attr({opacity: .5}); }; c.drag(move, start, up); };â€‹
