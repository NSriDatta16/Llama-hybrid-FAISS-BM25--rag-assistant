[site]: stackoverflow
[post_id]: 616848
[parent_id]: 616414
[tags]: 
Tests will help, if you need to make changes. According to Feathers (Feathers, Working Effectively with Legacy Code , p. 3) there are four reasons for changes: Adding a feature Fixing a bug Improving design Optimizing resource usage When there is the need for change, you want to be confident that you don't break anything. To be more precise: You don't want to break any behavior (Hunt, Thomas, Pragmatic Unit Testing in C# with NUnit , p. 31). With unit testing in place you can do changes with much more confidence, because they would (provided they are programmed properly) capture changes in behavior. That's the benefit of unit tests. It would be difficult to make unit tests for the class you gave as an example, because unit tests also requires a certain structure of the code under test . One reason I see is that the class is doing too much. Any unit tests you will apply on that class will be quite brittle. Minor change may make your unit tests blow up and you will end up wasting much time with fixing problems in your test code instead of your production code. To reap the benefits of unit tests requires to change the production code. Just applying unit tests principles, without considering this will not give you the positive unit testing experience. How to get the positive unit testing experience? Be openminded for it and learn. I would recommend you Working Effectively with Legacy Code for an existing code basis (as that piece of code you gave above). For an easy kick start into unit testing try Pragmatic Unit Testing in C# with NUnit . The real eye opener for me was xUnit Test Patterns: Refactoring Test Code . Good luck in you journey!
