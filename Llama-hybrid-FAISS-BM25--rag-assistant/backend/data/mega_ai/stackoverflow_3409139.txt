[site]: stackoverflow
[post_id]: 3409139
[parent_id]: 3409025
[tags]: 
Yes, that's right. Who is generating what .lib file? A static library is normally generated by the lib utility. A library for a dll is normally generated by the linker. You resolve Windows symbols by linking with the right libraries. Again, by linking against the appropriate library (e.g., kernel32.lib, gdi32.lib and user32.lib for the three DLLs you mentioned). It's not statically linked. You link against the library. In the case of a library for a DLL (such as those listed above) the linker uses that to embed a record into the executable that tells the loader which DLL to use to resolve those symbols. The .lib files are in the lib subdirectory of wherever you installed the SDK (typically something like C:\Program Files\Microsoft SDKs\Windows\v6.0A . Normally the SDK installer will add those where necessary so you don't have to explicitly specify that directory when linking from the command line or within Visual Studio. There are a few, though it's open to question whether they're really an improvement. One possibility is to use a pragma to tell the linker to use a particular library: #pragma comment(lib, "ws2_32.lib") This is particularly useful in a header if it uses functions that depend on a particular library.
