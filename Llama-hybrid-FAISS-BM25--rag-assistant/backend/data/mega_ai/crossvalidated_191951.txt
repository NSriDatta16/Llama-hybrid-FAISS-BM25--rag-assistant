[site]: crossvalidated
[post_id]: 191951
[parent_id]: 
[tags]: 
What are the internal differences between classification and regression neural networks?

I am quite new to neural networks, so please forgive any stupidity I express. This question asks why the rounded output of a regression model is not similar to the output of a classification model and also asks how a measure of confidence in outputs can be extracted from a classification model. I am using skflow and TensorFlow to test regression and classification models on a simple dataset provided by sklearn (the iris dataset). I am creating the models by specifying a similar architecture for each of them. When I train the models on the dataset, I note that the classifier seems to massively outperform the regressor in the way that I have specified things. Why is the performance so different? How wrong am I to try to convert the regressor to a classifier by rounding its output? How could a classifier express its individual outputs together with a measure of its confidence in these individual outputs? My code is as follows: #!/usr/bin/env python from __future__ import division import random import numpy import sklearn import sklearn.datasets import sklearn.metrics import skflow def main(): epochs = 10000 random.seed(42) dataset = sklearn.datasets.load_iris() # Create regression and classification models. model_regression = skflow.TensorFlowDNNRegressor( hidden_units = [200, 300, 300, 300, 200], n_classes = 0, learning_rate = 0.1, steps = epochs ) model_classification = skflow.TensorFlowDNNClassifier( hidden_units = [200, 300, 300, 300, 200], n_classes = 3, learning_rate = 0.1, steps = epochs ) # Train. model_regression.fit(dataset.data, dataset.target) model_classification.fit(dataset.data, dataset.target) # Print a listing of the target, the regression prediction rounded and the # classification prediction. print( "target", "regression prediction rounded", "classification prediction" ) for target, prediction_regression, prediction_classification in zip( dataset.target, list(model_regression.predict(dataset.data)), list(model_classification.predict(dataset.data)) ): print( target, int(round(float(prediction_regression[0]))), prediction_classification ) # Calculate the prediction accuracies for the regression rounded and the # classification. regression_predictions_rounded = numpy.array([ round(value) for value in model_regression.predict(dataset.data) ]) score_regression = sklearn.metrics.accuracy_score( regression_predictions_rounded, dataset.target ) score_classification = sklearn.metrics.accuracy_score( model_classification.predict(dataset.data), dataset.target ) print("regression prediction accuracy on training dataset: {percentage}".format( percentage = 100 * score_regression )) print("classification prediction accuracy on training dataset: {percentage}".format( percentage = 100 * score_classification )) if __name__ == "__main__": main()
