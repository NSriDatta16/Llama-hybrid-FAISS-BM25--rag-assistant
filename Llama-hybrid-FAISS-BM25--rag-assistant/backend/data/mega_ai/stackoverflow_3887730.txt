[site]: stackoverflow
[post_id]: 3887730
[parent_id]: 3887188
[tags]: 
Method-Based Query: To implement this in lambda we need to leverage Queryable.GroupJoin : var query = context.ProcessNames .GroupJoin(context.Usages .Where(u => u.Datetime >= new DateTime(2010, 1, 8) ) && u.Datetime pn.Id, u => u.ProcessNameId, (pn, usages) => new { Name = pn.Name, Sum = usages.Sum(u => u.Amount) }); Query Expression: And the very same query in query expression syntax: var query = from pn in context.ProcessNames join u in context.Usages .Where(u => u.Datetime >= new DateTime(2010, 1, 8) ) && u.Datetime u.Amount) }; Check the Generated SQL: To verify that these queries give you your desired Sql command at runtime you can do this: string sqlCommand = ((ObjectQuery)query).ToTraceString(); More Examples: For some good examples on GroupJoin, please take a look at these: Method-Based Query Syntax Examples: Join Operators Query Expression Syntax Examples: Join Operators
