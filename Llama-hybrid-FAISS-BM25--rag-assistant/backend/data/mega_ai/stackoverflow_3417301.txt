[site]: stackoverflow
[post_id]: 3417301
[parent_id]: 3416457
[tags]: 
The substitution modifiers for for variable references also allow for using the ~ expansions. See for command reference . By using "%%~x" you should get a properly quoted parameter, similar to how bash handles "$@" . @echo off setlocal enableextensions for %%x in (%*) do ( echo "%%~x" ) The characters , and ; can be used to separate command parameters. See command shell overview . Thus you have to put quotes around file names that contain these characters. If you drag a file from the Explorer onto the .bat, Explorer will only quote the file correctly if it has a white space character in its path. E.g., D:\a,b,c.exe will not be quoted by Explorer and thus will be parsed as three separate arguments by cmd.exe. To make the script work with drag and drop from the Explorer for these freak cases, you can use the following (ugly) work-around: @echo off setlocal enableextensions enabledelayedexpansion set "args=%*" set "args=%args:,=:comma:%" set "args=%args:;=:semicolon:%" for %%x in (%args%) do ( set "filepath=%%~x" set "filepath=!filepath::comma:=,!" set "filepath=!filepath::semicolon:=;!" echo "!filepath!" ) The script introduces a helper variable args , where each occurrence of a troublesome character is replaced with a placeholder (note that the colon character itself cannot be used in a file name under Windows). The body of the for loop uses another helper variable filepath which undos the transformation to produce the original path.
