[site]: stackoverflow
[post_id]: 3067221
[parent_id]: 3014855
[tags]: 
If your customer wants to understand impact, you need to model what the artifacts are, what information flows between them, and how the parts of company interact with the artifacts. You might consider building an SADT model. Boxes in SADT models represent processes. Labelled data input arcs show what [possibly compound] information/resources is fed into a process; labelled output arcs show data/resources produced by it. Control arcs indicate "large" signals that control the processing. Resource/mechanism arcs show what resources are required to carry off the process (e.g., hardware systems, networks, ...). For your task, you would treat applications and company activities as SADT processes (the boxes). Data in/out and control arcs connect applications (SADT boxes) to other SADT boxes, or to external data sources and sinks (internal departments, staff, sales, shipping, e.g, corporate stakeholders). Thus you can model the information flows through the company via the various applications and what information they consume/process/produce/use, and what agents produce/use the data. (Doing all this is called "Structured Analysis"). [For sophisticated SADT models, each process box can be usefully recursively decomposed into sub SADT diagrams. I don't think you need this to model just the application dependencies; you don't need to know how the applications work inside unless they are truly complex and separating dataflows matter.] Any change to informaiton input/output, deletion of an application would then have an obvious correspondence in the SADT diagram, and thus would lead to a better understanding of what the consequences are. Its a big undertaking to this this right, and you'll have to work to keep it up to date, which is likely the place it will fail unless everybody is signed up for the long run. For those of you that have not tried using SADT, it is a remarkably simple system to grasp (this matches other answer's dictum keep it simple ), and remarkably effective at breaking up complex processing tasks into chunks where you can see (and actually communicate) essentially everything, even to managers! A key to making SADT work is to avoid being sloppy; define the arcs and nodes carefully and do not skip information sources or sinks. If you do that, SADT pays handsomely. [ Most whiteboard box and arrow diagrams are awful: you can't tell what is really an action, what is really data, or if all the information is actually shown and who uses it]. IMHO it is interesting to note that SADT models capture the intuition behind colored Petri nets , which model arbitrarily complex asynchronous computations, a generalizaton of Petri nets , which are a generalization of finite state automata.
