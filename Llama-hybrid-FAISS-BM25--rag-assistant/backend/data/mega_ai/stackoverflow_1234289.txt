[site]: stackoverflow
[post_id]: 1234289
[parent_id]: 1234283
[tags]: 
I feel that the line between "component-oriented" and "object-oriented" is very blurry and in most cases it is safe to assume that they are the same thing. That being said (and given the fact that I am unaware of your knowledge about object-oriented programming) I submit this excellent Wikipedia article for you to read: Object-oriented programming (OOP) is a programming paradigm that uses "objects" – data structures consisting of datafields and methods – and their interactions to design applications and computer programs. Programming techniques may include features such as information hiding, data abstraction, encapsulation, modularity, polymorphism, and inheritance. It was not commonly used in mainstream software application development until the early 1990s. Many modern programming languages now support OOP. You may also want to read Component-based software engineering which applies similar concepts across an entire system: Component-based software engineering (CBSE) (also known as component-based development (CBD)) is a branch of software engineering, the priority of which is the separation of concerns in respect of the wide-ranging functionality available throughout a given software system. This practice brings about an equally wide-ranging degree of benefits in both the short-term and the long-term for the software itself and the organisation that sponsors it. Components are considered to be part of the starting platform for service orientation throughout software engineering, for example Web Services, and more recently, Service-Oriented Architecture (SOA) - whereby a component is converted into a service and subsequently inherits further characteristics beyond that of an ordinary component.
