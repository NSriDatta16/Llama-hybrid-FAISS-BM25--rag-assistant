[site]: stackoverflow
[post_id]: 4204263
[parent_id]: 4203417
[tags]: 
WoLpH already listed the resonable possibilities and pointed to (probably) the best of them as a solution. So I will only elaborate on it. If you need to handle this: originating page -> form page -> originating page then in reality it will look like this: originating page --[GET]--> form page --[POST/submision]--> form page(2) --[GET/redirect]--> originating page . This means, that form page(2) stage has to somehow know where to redirect user and the only reasonable choices you have here is to use session (with the drawback mentioned by WoLpH ) or to pass it in POST, possibly as a hidden field. Regarding the first GET and passing next URL into form page , you can either pass it in the query string (which you find unelegant), or you can extract it from HTTP_REFERER header - which won't work for more paranoid users like me. You can also do a mixed stuff here, i.e. add next= into the query string if and only if user hasn't turned off HTTP_REFERER in her browser. Then most users won't see any ugly stuff in URLs. Note that all these things can be automated, i.e. you can write your links as: When inject_next_url injects sth like: next={{ context['request'].get_full_path() }} only if HTTP_REFERER is not present. Then, in form handler you can use some generic extract_next_url(request) function, that looks for next URL in one of: query string, HTTP_REFERER, request.POST, or more consise - in one of: HTTP_REFERER, request.REQUEST
