[site]: crossvalidated
[post_id]: 287591
[parent_id]: 
[tags]: 
Implementing Metropolis-Hastings algorithm

I want to use this algorithm as a black-box, I'll be implementing it either in Python or R, but I don’t really understand it well to be able to turn it into a program. How do we choose the initial values for parameters? What exactly is q(x t , ·) & q(y,x), I understand these are probabilities, but how do we calculate them? and what function is f(y)? and finally, Do I use the average of the values in the output vectors for each parameter? Thanks in advance! Metropolis-Hasting Algorithm for parameter estimation P – total no. of parameters N – total no. of iterations t – iteration variable Initialize the parameter vector x0 = {x 0 1 , x 0 2 , …, X 0 P } For iteration t = 1, 2, . . . N do Generate a candidate ‘y’ for next sample i.e. draw from the distribution q(xt, ·) Calculate acceptance ratio α(x t , y) using α(x, y) = min⁡{1,(f(y) q(y,x))/(f(x) q(x,y) ) } Draw u ~ U[0, 1] i.e. Uniform Distribution Accept/Reject state depending on acceptance ratio If u t , y) x t+1 = y // accept the proposal else x t+1 = x t // reject the proposal Save x t 1 , x t 2 ,…, x t P Return {x 1 1 , x 2 1 , …., x N 1 } {x 1 2 , x 2 2 , …., x N 2 } . . {x 1 P , x 2 P , …., x N P } EDIT1: My question seeks a clear-cut translation of, let's say, α(x, y) = min⁡{1,(f(y) q(y,x))/(f(x) q(x,y) ) } How does this look like in a program? what exactly is the meaning of q(x, y)? how does the function look like? without any terminologies related to probability or statistics. Apologies if I was not clear before. EDIT2: How should the functions 'proposal_func' & 'alpha_func' be implemented? (if rest of the program looks fine) values
