[site]: stackoverflow
[post_id]: 1258404
[parent_id]: 
[tags]: 
Verifying a signature in java using a certificates public key

I'm looking to convert some C# code to the equivalent in Java. The C# code takes some string content, and a signature (generated using the private key, on a seperate machine) and combined with the public key it verifies the signature matches, providing a level of assurance that the request has not been tampered with. public bool VerifySignature(string content, byte[] signatureBytes, AsymmetricAlgorithm publicKey) { var hash = new MD5CryptoServiceProvider(); byte[] dataBuffer = Encoding.ASCII.GetBytes(content); var cs = new CryptoStream(Stream.Null, hash, CryptoStreamMode.Write); cs.Write(dataBuffer, 0, dataBuffer.Length); cs.Close(); var deformatter = new RSAPKCS1SignatureDeformatter(publicKey); deformatter.SetHashAlgorithm("MD5"); return deformatter.VerifySignature(hash, signatureBytes); } The public key itself is an X509 Certificate - constructed from a .cer file, stored as assembly resource i.e. byte[] data; // data is read from a resource stream. var publicKey = new X509Certificate2(data, "", X509KeyStorageFlags.MachineKeySet).PublicKey.Key What I'm looking to do is emulate this functionality in Java, so I can verify the signature generated by some code in C#... I've started investigating the crypto functionality of Java, but I'm a bit of a java noob. Here's what I've come up with so far: byte[] certContents=null; byte[] signature=null; String contents = "abc"; // load cert CertificateFactory factory = CertificateFactory.getInstance("X.509"); X509Certificate cert = (X509Certificate) factory.generateCertificate(new ByteArrayInputStream(certContents)); // grab public key RSAPublicKey publicKey = (RSAPublicKey)cert.getPublicKey(); // get sha1 hash for contents Mac mac = Mac.getInstance("HmacSHA1"); mac.update(contents.getBytes()); byte[] hash = mac.doFinal(); // get cipher Cipher cipher = Cipher.getInstance("RSA"); cipher.init(Cipher.DECRYPT_MODE, publicKey); // verify signature of contents matches signature passed to method somehow (and this is where I'm stuck) Can anyone provide any insight into how I can verify the signature - or provide links to some resources which might explain the java.crypto and java.security.cert usage better then the run of the mill java docs.
