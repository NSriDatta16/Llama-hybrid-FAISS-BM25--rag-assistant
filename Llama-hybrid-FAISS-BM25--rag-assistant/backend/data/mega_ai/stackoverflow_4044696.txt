[site]: stackoverflow
[post_id]: 4044696
[parent_id]: 4044107
[tags]: 
Why do you need a Calendar in your Stock class? I think using a Date to represent a point in time is fine. This seems to be what you want, because you want the Calendar object in the a stock to be immutable, which the Date class should be, if you ignore the deprecated methods. You can use a temporary Calendar when you need to do time operations on a Date outside the Stock class: Calendar calendar = Calendar.getInstance(); calendar.setTime(stock.getDate()); System.out.println(calendar.getYear()); Like this you can still store a Date in your Stock class, which should have the best performance when only store and retrieve Stock objects from a data storage. If you do several operations at once you can also reuse the same Calendar object. If you don't like the Calendar interface you could still use Joda Time to do the time operations. You can probably convert dates to and from Joda Time if needed, to do time operations, and still store Date objects in your Stock class.
