[site]: stackoverflow
[post_id]: 4175817
[parent_id]: 4175754
[tags]: 
The most elegant solution I've seen for this problem yet is Sean Barrett's writefv , used in his tiny image-writing library stb_image_write available here . He only implements a few primitives (and no error handling), but the same approach can be extended to what is basically a binary printf (and for reading, you can do the same to get a binary scanf ). Very elegant and tidy! In fact, the whole thing is so simple, I might as well include it here: static void writefv(FILE *f, const char *fmt, va_list v) { while (*fmt) { switch (*fmt++) { case ' ': break; case '1': { unsigned char x = (unsigned char) va_arg(v, int); fputc(x,f); break; } case '2': { int x = va_arg(v,int); unsigned char b[2]; b[0] = (unsigned char) x; b[1] = (unsigned char) (x>>8); fwrite(b,2,1,f); break; } case '4': { stbiw_uint32 x = va_arg(v,int); unsigned char b[4]; b[0]=(unsigned char)x; b[1]=(unsigned char)(x>>8); b[2]=(unsigned char)(x>>16); b[3]=(unsigned char)(x>>24); fwrite(b,4,1,f); break; } default: assert(0); return; } } } and here is how he writes truecolor .BMP files using it: static int outfile(char const *filename, int rgb_dir, int vdir, int x, int y, int comp, void *data, int alpha, int pad, const char *fmt, ...) { FILE *f; if (y (definition of write_pixels elided since it's pretty tangential here)
