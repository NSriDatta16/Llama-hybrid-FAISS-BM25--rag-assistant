[site]: stackoverflow
[post_id]: 1274072
[parent_id]: 1273939
[tags]: 
I have two opinions. You must be clear on the meaning of these "polymorphic" entities. Are they semantically different and separate? Even if they look the same, you may not want to put them into the same table if they serve different purposes. If a Matter is truly, semantically fungible between Arrangements and Issues, then I'd suggest using a form of "Mapping" tables: Arrangement(ID) Matters(ID) Issues(ID) ArragementMatters (FK_ArrangementID, FK_MatterID) IssueMatters (FK_IssueID, FK_MatterID) You can continue this pattern throughout the "polymorphic" tables. You can add a unique constraint on FK_MatterID columns if required. It's easy to write queries: Select * from Arrangement a inner join ArrangementMatters am on am.FK_arrangementID = a.ID inner join Matters m on m.ID = am.FK_matterID to get all your Matters associated with Arrangements. On the other hand, if a Matter under and Arrangement is NOT semantically fungible and only has the same schema, then I'd suggest creating completely separate tables: Arrangement(ID) ArrangementMatters(ID, FK_ArrangementID) Issues(ID) IssueMatters(ID, FK_IssueID) This conveys the distinction to the world. It gives you a lot of benefits if you can separate your concerns. (i.e. Maybe you have lots of heavy usage of IssueMatters vs. ArrangementMatters - you can optimize the indexes and table layout independently.) A query is also simpler: Select * from Arrangement a inner join Matters m on m.FK_arrangementID = a.ID
