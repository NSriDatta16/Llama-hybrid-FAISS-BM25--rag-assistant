[site]: stackoverflow
[post_id]: 238921
[parent_id]: 238878
[tags]: 
My personal answer, in a nutshell: the core-class patching hammer should be at the bottom of your toolbox . There are a lot of other techniques available to you, and in almost all cases they are sufficient, cleaner, and more sustainable . It really depends on the environment in which you are coding, though. If it's a personal project - sure, patch to your heart's content! The problems begin to arise when you are working on a large codebase over a long period of time with a large group of programmers. In the organization I work for, which has Ruby codebases of over 100KLOC and and twenty or so developers, we have started to crack down pretty hard on monkey patching, because we've seen it lead to head-scratching, man-hour wasting behavior far too often. At this point we pretty much only tolerate it for temporarily patching third-party code which either hasn't yet incorporated or won't incorporate our source patches.
