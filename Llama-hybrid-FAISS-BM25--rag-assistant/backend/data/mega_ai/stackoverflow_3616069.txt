[site]: stackoverflow
[post_id]: 3616069
[parent_id]: 3615789
[tags]: 
I think you would be best off creating a set of command classes that map to the API points of the mainmodule.cpp. Once they are in place, you will need to refactor the existing code base to access these API points via the command classes, once that's done, you are free to refactor each command's implementation into a new class structure. Of course, with a single class of 11 KLOC the code in there is probably highly coupled and brittle, but creating individual command classes will help much more than any other proxy/facade strategy. I don't envy the task, but as time goes on this problem will only get worse if it's not tackled. Update I'd suggest that the Command pattern is preferable to a Facade. Maintaining/organizing a lot of different Command classes over a (relatively) monolithic Facade is preferable. Mapping a single Facade onto a 11 KLOC file will probably need to be broken up into a few different groups itself. Why bother trying to figure out these facade groups? With the Command pattern you will be able to group and organise these small classes organically, so you have a lot more flexibility. Of course, both options are better than the single 11 KLOC and growing, file.
