[site]: stackoverflow
[post_id]: 2380144
[parent_id]: 2380071
[tags]: 
Open the file in binary mode, and write "unformatted" data to the disc. fstream myFile; ... myFile.open ("mydata.bin", ios:: in | ios::out | ios::binary); ... class Data { int key; double value; char[10] desc; }; Data x; myFile.seekp (location1); myFile.write ((char*)&x, sizeof (Data)); EDIT: The OP added the "Output data needs to be in text format, whether tab or comma separated." constraint. If your application is CPU bound, the formatting of output is an overhead that you do not need. Binary data is much faster to write and read than ascii, is smaller on the disc (e.g. there are fewer total bytes written with binary than with ascii), and because it is smaller it is faster to move around a network (including a network mounted file system). All indicators point to binary as a good overall optimization. Viewing the binary data can be done after the run with a simple utility that will dump the data to ascii in whatever format is needed. I would encourage some version information be added to the resulting binary data to ensure that changes in the format of the data can be handled in the dump utility. Moving from binary to ascii, and then quibbling over the relative performance of printf versus iostreams is likely not the best use of your time.
