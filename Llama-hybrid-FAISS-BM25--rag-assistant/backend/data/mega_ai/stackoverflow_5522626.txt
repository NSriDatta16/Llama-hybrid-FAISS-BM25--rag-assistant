[site]: stackoverflow
[post_id]: 5522626
[parent_id]: 
[tags]: 
Separating public interface from implementation details

I have to design a Font class that will have multiple implementations spanning platforms or different libraries (Win32 GDI or FreeType for example). So essentially there will be single shared header/interface file and multiple .cpp implementations (selected during build time). I would prefer to keep the public interface (header file) clean from any implementation details, but this usually is hard to achieve. A font object has to drag some sort of a private state - like a handle in GDI, or FreeType face object internally. In C++ , what is the best way to track private implementation details? Should I use static data in implementation files? Edit: Found this great article on the subject: Separating Interface and Implementation in C++ . p.s. I recall in Objective-C there are private categories that allow you to define a class extension in your private implementation file making quite elegant solution.
