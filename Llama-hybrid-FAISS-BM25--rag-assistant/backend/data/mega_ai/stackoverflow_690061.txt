[site]: stackoverflow
[post_id]: 690061
[parent_id]: 687718
[tags]: 
I still have not figured out how to do this directly. To get on with my life, I wrote a stored procedure which called the function: set ANSI_NULLS ON set QUOTED_IDENTIFIER ON go ALTER PROCEDURE [dbo].[mh_getSchemaVersion] @schemaVer VARCHAR(256) OUTPUT AS select @schemaVer = CAST( (select value from fn_listextendedproperty(default, default, default, default, default, default, default) where name=N'schemaVersion') AS varchar(256) ) return @@ROWCOUNT ...and then called thst sproc from my ADO/C++ code: _CommandPtr cmd; cmd.CreateInstance(__uuidof(Command)); cmd->ActiveConnection = cnn; cmd->PutCommandText("mh_getSchemaVersion")_l _variant_t schemaVar; _ParameterPtr schemaVarParam = cmd->CreateParameter("@schemaVer", adVarChar, adParamOutput, 256); cmd->GetParameters()->Append((IDispatch*)schemaVarParam); cmd->Execute(NULL, NULL, adCmdStoredProc); std::string v = (const char*)(_bstr_t)schemaVarParam->GetValue(); ver->hasVersion_ = true; ...which works, but I didn't want to have to deploy a new stored procedure. So if anyone can come up with a solution to the original problem and show me how to call the system function directly from ADO/C++, I will accept that as the answer. Otherwise I'll just accept this.
