[site]: stackoverflow
[post_id]: 1523302
[parent_id]: 1519980
[tags]: 
There are two possibilities: The size of the content that you are fetching is a significant proportion of the available heap space, and your algorithm requires 2 or 3 times the size in working storage during the reading / concatenation process. In this case, increasing the heap space is a reasonable workaround. The algorithm is actually using O(N^2) space to do the concatenation using apply . It is not inconceivable that the implementation of apply is recursive and that the clojure compiler / JIT compiler are producing recursive code with lots of references to intermediate strings. In this case, increasing the heap space is a poor workaround. Either way, I'd start by replacing (apply str (line-seq buffer)) with a more efficient alternative (see @Brian's answer, and my comment on @tomjen's answer) ... and only worry about the heap usage if it is still an issue. (I suspect that it won't be.)
