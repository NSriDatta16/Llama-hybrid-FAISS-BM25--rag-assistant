[site]: stackoverflow
[post_id]: 199458
[parent_id]: 198047
[tags]: 
I have used www.dhtmlgoodies.com 's drag-drop-folder tree to do this. it's not the latest most up-to-date mootools/jquery/yourfavoriteframework javascript, but you don't have to look at that, it does it's job nicely as a component, and comes with a nice set of images. I created a little mootools 1.1 wrapper class: window.addEvent('domready', function() { document.Treeview = new TreeView(); }); TreeView = new Class({ initialize: function() { treeObj = new JSDragDropTree(); treeObj.setTreeId('treeview'); treeObj.initTree(); treeObj.showHideNode(true, 'node0'); $$('.hiddennode').each(function(elm) { elm.setStyle('display','none'); }); this.currentItem = false; }, saveValues: function() { saveString = treeObj.getNodeOrders(); new Ajax('./menuitem/save', {postBody: 'order='+saveString, onComplete:function(){window.Growl(this.transport.responseText)}, multiple:false}).request(); }, addItem: function() { new Ajax('./menuitem/add', {update:'editPanel'}).request(); }, loadMenuItem: function(id) { this.currentItem = id; new Ajax('./menuitem/edit/'+id, {update:'editPanel', onComplete:function(){new ScrollDing('editPanel');}}).request(); }, removeItem: function() { if(!this.currentItem) { alert('please select a menu item to delete.'); } else { if(confirm('Are you sure you want to delete this menu item?')) { // multiple: true is my little extension to mootools's Ajax class. // It expects a JSON object with keys corresponding to element ID's // and updates their innerHTML new Ajax('./menuitem/delete/'+this.currentItem, {multiple:true}).request(); this.currentItem = false; } } } }); There's a PHP class that does the basic setup. I've simplified some things for the example, but this should get you started. ofcourse you will have to adjust it to use RoR :-P /** * * @package Pork * @author SchizoDuckie * @copyright SchizoDuckie 2008 */ class TreeMenu { private $menuItems, $output; function __construct() { global $db; $input = $db->fetchAll("SELECT * FROM menu ORDER BY intparent, intOrder"); for ($i=0; $i menuItems[ $array->intParent ][ ] = $array; } } function hasSubItems($node) { return (array_key_exists($node, $this->menuItems) && sizeof($this->menuItems[$node]) > 0) ? true : false; } function displaytree($start=0, $noSiblings=false) { $output .= " "; for ($i=0; $i menuItems[$start]); $i++) { $item = $this->menuItems[$start][$i]; $siblings = ($noSiblings) ? " " : ''; $output .= " ID_Menu}'{$siblings}> ID_Menu});return false;'>{$item->strMenuItem} "; if ($this->hasSubItems($item->ID_Menu)) { $output .= $this->displayTree($item->ID_Menu, $noSiblings); } $output .= " "; } $output .= " "; return($output); } function getTreeInnerHTML() { return(" Root {$this->displaytree()} "); function display() { global $_TPL; $_TPL['styles'][] = './includes/drag-drop-folder-tree.css'; $_TPL['scripts'][]= './includes/drag-drop-folder-tree.js'; $_TPL['scripts'][]= './includes/pork.foldertree.js'; return (" {$this->getTreeInnerHTML()} "); } } usage: $tv = new TreeView(); $_TPL['menu'] = $tv->display(); Here's also the examples for changing the order and what the add and edit and delete functions do (simplified ofcourse). JsObject is just a wrapper with a display function and __get and __set function that die()'s with a json_encoded array. Very handy for ajax requests ;) displayEditor('Add Menu Item', "multiple:true")); break; case 'edit': $item = new menuItem($_URI[2]); $_SESSION['currentMenuItem'] = $_URI[2]; die($item->displayEditor('Edit MenuItem', 'multiple:true')); break; case 'delete': $item = new menuItem($_URI[2]); $item->deleteYourSelf(); $js = new jsObject(); $js->editPanel = 'Menu Item '.$item->menuItem.' has been deleted.'; $menu = new Menu(); $js->treeview = $menu->getTreeInnerHTML(); $js->script = "document.Treeview = new TreeView();"; $js->display(); break; case 'save': $items = explode(",",$_POST['order']); for($i=0;$i query("update menu set intParent='{$tokens[1]}', intOrder='{$i}' where ID_Menu='{$tokens[0]}'"); } die('Saved the new order!'); break; } break; } ?> There you have it, one tutorial with readable, self-explanatory code. It's not RoR, and not Prototype, but this should get you started right?
