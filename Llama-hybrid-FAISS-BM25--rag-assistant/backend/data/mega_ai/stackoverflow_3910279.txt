[site]: stackoverflow
[post_id]: 3910279
[parent_id]: 
[tags]: 
C: Each child process reads alternate lines

I'm training a typical map-reduce architecture (in O.S. classes) and I'm free to decide how the master process will tell its N child processes to parse a log. So, I'm kind of stuck in these two possibilities: count the number of rows and give X rows for each map OR each map reads the line of its ID and the next line to read= current_one+number_of_existent_maps E.g.: with 3 maps, each one is going to read these lines: Map1: 1, 4, 7, 10, 13 Map2: 2, 5, 8, 11, 14 Map3: 3, 6, 9, 12, 15 I have to do this in order to out-perform a single process that parses the entire log file, so the way I split the job between child processes has to be consistent with this objective. Which one do you think is best? How can I do the scanf or fgets to adapt to 1) or 2)? I would be happy with some example code for 2), because the fork/pipes are not my problem :P RE-EDIT: I'm not encouraged to use select here, only between map procs and the reduce process that will be monitoring the reads. I have restrictions now and : I want each process to read total_lines/N lines each. But it seems like I have to make map procs open the file and then read the respective lines. So here are my doubts: 1- Is it bad or even possible to make every procs open the file simultaneously or almost simultaneously? How will that help in speeding up? 2- If it isn't possible to do that, I will have a parent opening the file (instead of each child doing that)that sends a struct with min and max limit and then the map procs will read whatever the lines they are responsible for, process them and give the reduce process a result (this doesn't matter for the problem now). How can I divide correctly the number of lines by N maps and putting them to read at the same time? I think fseek() may be a good weapon, but I don't know HOW I can use it. Help, please!
