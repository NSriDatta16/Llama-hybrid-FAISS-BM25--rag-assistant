[site]: stackoverflow
[post_id]: 5448371
[parent_id]: 
[tags]: 
JSF composite component with backing bean

I'm trying to get a composite component working with it's own backing bean, using the example on p375 from the Core JSF 3 book, but just get an NPE. The problem seems to be at the start of encodeBegin(), Date date = (Date) getValue() returns null. If I'm honest I don't really understand where the value of the component is supposed to be getting stored, I specify it as a java.util.Date using cc:attribute type=, but I don't really understand how this: public Object getSubmittedValue() { return this; } - which is going to return an instance of an InputDateBean class - results in a Date. I am generally good and confused by how this is supposed to work. Unlike the book example I am trying to the use backing component for temporary storage, so when the day is input I try to store it in #{cc.day}, in the book they use an application scoped bean for some reason. Thanks for any help. I am using Mojarra 2.1. inputDate.xhtml InputDateBean.java package uk.co.myco.jsfbeans.sqcc; import java.io.IOException; import java.util.Calendar; import java.util.Date; import javax.faces.component.FacesComponent; import java.util.GregorianCalendar; import javax.faces.application.FacesMessage; import javax.faces.component.NamingContainer; import javax.faces.component.UIInput; import javax.faces.context.FacesContext; import javax.faces.convert.ConverterException; import uk.co.myco.general.SQLog; import uk.co.myco.jsfbeans.helper.Messages; @FacesComponent(value = "uk.co.myco.jsfbeans.sqcc.InputDateBean") public class InputDateBean extends UIInput implements NamingContainer { private int day = 0, month = 0, year = 0; public InputDateBean() { } @Override public String getFamily() { return "javax.faces.NamingContainer"; } @Override public void encodeBegin(FacesContext context) throws IOException { Date date = (Date) getValue(); Calendar cal = new GregorianCalendar(); cal.setTime(date); UIInput dayComponent = (UIInput) findComponent("day"); UIInput monthComponent = (UIInput) findComponent("month"); UIInput yearComponent = (UIInput) findComponent("year"); dayComponent.setValue(cal.get(Calendar.DATE)); monthComponent.setValue(cal.get(Calendar.MONTH) + 1); yearComponent.setValue(cal.get(Calendar.YEAR)); super.encodeBegin(context); } @Override public Object getSubmittedValue() { return this; } @Override protected Object getConvertedValue(FacesContext context, Object newSubmittedValue) throws ConverterException { UIInput dayComponent = (UIInput) findComponent("day"); UIInput monthComponent = (UIInput) findComponent("month"); UIInput yearComponent = (UIInput) findComponent("year"); int lday = (Integer) dayComponent.getValue(); int lmonth = (Integer) monthComponent.getValue(); int lyear = (Integer) yearComponent.getValue(); if (isValidDate(lday, lmonth, lyear)) { return new GregorianCalendar(lyear, lmonth - 1, lday).getTime(); } else { FacesMessage message = Messages.getMessage("util.messages", "invalidDate", null); message.setSeverity(FacesMessage.SEVERITY_ERROR); throw new ConverterException(message); } } // getters & setters & isValidDate() removed }
