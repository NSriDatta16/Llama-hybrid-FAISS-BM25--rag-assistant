[site]: stackoverflow
[post_id]: 5512747
[parent_id]: 5512587
[tags]: 
Having a data file and an index file would be the general base idea for such an implementation, but you'd pretty much find yourself dealing with data fragmentation upon repeated data updates/deletion, etc. This kind of project, in itself, should be a separate project and should not be part of your main application. However, essentially, a database is what you need as it is specifically designed for such operations and use cases and will also allow you to search, sort, and extend (alter) your data structure without having to refactor an in-house (custom) solution. May I suggest you to download Apache Derby and create a local embedded database (derby does it for you want you create a new embedded connection at run-time). It will not only be faster than anything you'll write yourself, but will make your application easier to maintain. Apache Derby is a single jar file that you can simply include and distribute with your project (check the license if any legal issue may apply in your app). There is no need for a database server or third party software; it's all pure Java. Bottom line as that it all depends on how large is your application, if you need to share the data across many clients, if speed is a critical aspect of your app, etc. For a stand-alone, single user project, I recommend Apache Derby. For a n-tier application, you might want to look into MySQL , PostgreSQL or ( hrm ) even Oracle . Using already made and tested solutions is not only smart, but will cut down your development time (and maintenance efforts). Cheers.
