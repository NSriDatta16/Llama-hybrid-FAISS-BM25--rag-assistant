[site]: stackoverflow
[post_id]: 2059527
[parent_id]: 2058146
[tags]: 
In one real-life use, a postscript generator class has a "current_font" state, used as the font for any operations which draw text. Sometimes a function needs to set the font temporarily, but then have it go back to the way it was. We could just use a temporary variable to save and restore the font: def draw_body old_font = ps.get_font ps.set_font('Helvetica 10') draw_top_section draw_bottom_section ps.set_font(old_font) end But by the third time you've done that you'll want to stop repeating yourself. So let's let the ps object save and restore the font for us: class PS def save_font old_font = get_font end def restore_font set_font(old_font) end end Now the caller becomes: def draw_body ps.save_font ps.set_font('Helvetica 10') draw_top_section draw_bottom_section ps.restore_font end That works fine, until we use the same pattern inside one of the subroutines called by draw_page: def draw_top_section ps.save_font ps.set_font('Helvetica-bold 14') # draw the title ps.restore_font # draw the paragraph end When draw_top_section calls "save_font", it clobbers the font that was saved by draw_page. It's time to use a stack: def PS def push_font font_stack.push(get_font) end def pop_font set_font(font_stack.pop) end end And in the callers: def draw_top_section ps.push_font ps.set_font('Helvetica-bold 14') # draw the title ps.pop_font # draw the body end There are further refinements possible, such as having the PS class automatically save and restore the font, but it's not necessary to go into those to see the value of a stack.
