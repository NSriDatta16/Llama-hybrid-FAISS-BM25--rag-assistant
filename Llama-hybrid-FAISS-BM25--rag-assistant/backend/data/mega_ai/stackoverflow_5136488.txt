[site]: stackoverflow
[post_id]: 5136488
[parent_id]: 5135979
[tags]: 
What I've done in the past is use HTTP headers to send back messages to the AJAX requester (the XMLHTTPRequest object). You will not get a full binding and validation support this way, but it's a simple way to pass messages. Another option that will give you the full power of Spring binding and validation is as follows. I'm assuming you're submitting a form via AJAX. You could do the standard spring binding and validation, and in the case of an error, send back and replace the form with the exception messages next to the problem input. This way you can leverage the full power of Spring binding and validation while getting the AJAX goodness that you want. This would require you to separate your form into a separate JSP page, so you could just return that form on AJAX submission and error. In response the comment My issue is just how to access the BindingErrors from a JSP if I'm using an AbstractCommandController. Ajax isn't really that important in the equation. I just didn't want to use a formController because it didn't make sense. I think you can simply set a variable in your model like this: ModelAndView.addObject(this.getCommandName(), errors) This would be done in AbstractCommandController's protected abstract ModelAndView handle( HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception method. Be sure the name of the model attribute is the name of your command (set in the setCommandName method). This is untested and from memory.
