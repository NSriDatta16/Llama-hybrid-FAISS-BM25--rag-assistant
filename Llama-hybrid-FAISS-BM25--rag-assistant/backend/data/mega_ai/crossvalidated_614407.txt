[site]: crossvalidated
[post_id]: 614407
[parent_id]: 614198
[tags]: 
First, as you are using survfit() to fit your lung1 data, your simulations aren't using any information about a Weibull fit to those data. Second, the "standard" Weibull parameterization used by Wikipedia and by dweibull() in R differs from that used by survreg() or flexsurvreg() as you try in another question , providing a good deal of potential confusion. Third, if you want to get smooth estimates over time, then you have to ask for them. It seems that your simulations here and in related questions ask for some type of point estimate or random sample from the distribution rather than a smooth curve. Random samples from the event distribution are OK and are used for things like power analysis in complex designs. For your application you would need, however, a lot of random samples from each set of new random Weibull parameters to put together to get the estimated survival curves you want. That's unnecessary, as with a parametric fit (unlike the time-series estimates you've used in other work) there is a simple closed form for the survival curve, providing the basis for the continuous predictions that you want. In the "standard" parameterization used by Wikipedia and by dweibull() in R, the Weibull survival function is: $$ S(x) = \exp\left( -\left(\frac{x}{\lambda} \right)^k \right),$$ where $\lambda$ is the standard "scale" and $k$ is the standard "shape." Neither survreg() nor flexsurvreg() (which calls survreg() for this type of model) fits the model based on that parameterization. Although flexsurvreg() can report coefficients and standard errors in that parameterization, the internal storage that you access with functions like coef() and vcov() uses a different parameterization. To get the "standard" scale, you need to exponentiate the linear predictor returned by a fit based on survreg() . If there are no covariates, then that's just exp(Intercept) . To get the "standard" shape, you need to take the inverse of the survreg_scale . The coefficient stored by survreg() or flexsurvreg is the log of survreg_scale , so you can get the "standard shape" via exp(-log(survreg_scale)) . Further complicating things is that survreg() , unlike flexsurvreg() , doesn't return log(scale) via the coef() function. You can, however, get that along with the other coefficients by asking for model$icoef , which returns all coefficients in the same order that they appear in vcov() . The following function returns the survival curve for a Weibull fit from survreg() . The survregCoefs argument should be a vector with the first component the linear predictor and the second the log(scale) from survreg() . weibCurve Fit a Weibull distribution to the data and compare the fit to the raw data: ## fit Weibull fit1 Then you can sample from the distribution of coefficient estimates and repeat the following as frequently as you like to see the variability in estimates (assuming that the Weibull model is correct for the data). I set a seed for reproducibility. set.seed(2423) ## repeat the following as needed to add randomized predictions for late times. ## I did both 5 times to get the posted plot. newCoef That leads to the following plot. Another approach to getting the variability of projections into the future from the model is to get a distribution of "remaining useful life" values for multiple random samples of Weibull coefficient values, conditional upon survival to your last observation time (500 here). This page shows the formula.
