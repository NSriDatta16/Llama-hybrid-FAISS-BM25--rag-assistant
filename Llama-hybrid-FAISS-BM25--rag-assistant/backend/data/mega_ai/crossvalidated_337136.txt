[site]: crossvalidated
[post_id]: 337136
[parent_id]: 
[tags]: 
Variable kernel density estimation for geographic features?

I am seeking advice on whether variable kernel density estimation is an appropriate approach for the following problem (apologies for the long explanation): I am trying to identify water sources where animals drink, using hourly location data from satellite-tracked animals. I have written an algorithm that identifies track locations associated with drinking behavior, based on characteristics of the track. Let's call those "indicator points". They rarely fall exactly on a water source because the collars only report once per hour. For each cluster of "indicator points," I want to determine a) whether a water source exists and b) the location and shape of the water feature. I think this means that I want to create a probability density map for water features on a 2D gridded landscape, using some sort of kernel density estimation. The challenge is, it doesn’t make sense to use a global function across the entire landscape because I need the sensitivity of the kernel function to vary. If 5 or 6 points fall in a tight cluster, I want that to be sufficient to indicate with high probability that a water source exists. However, there are sometimes as many as 250 points at a given water source. Any kind of global comparison between small and large clusters will either relegate the small clusters to low probabilities or cause the large clusters to turn into gigantic blobs. In large clusters, I would like to “reduce the sensitivity” of the function so that the additional information from the large number of points is used to map the shape of the water feature more accurately. I am new to kernel density estimation, but it seems from my reading that variable kernel density estimation might be the right approach. A) Am I on the right track? and B) I note that there are two alternatives: “balloon” estimates which are point-based, and “sample-based estimates”, and I am confused as to which would be more appropriate (the R library ks has examples of both).
