[site]: stackoverflow
[post_id]: 4872304
[parent_id]: 
[tags]: 
C# factory - is upcast a must?

Does the C# factory pattern require an upcast? I want God in class library G to create an Adam in class library A without making G dependant on A. God produces Adams for consumption by Eve in class library E, and it's OK for Eve to know and depend on Adam. (edit - this sample keeps getting better and better :) The solution I could think of is having an AdamFactory in A. This way AdamFactory knows Adam and can easily create it (possibly by just calling Adam's constructor). God receives an AdamFactory and can order it to CreateAdam. Now, because God isn't allowed to know Adam, AdamFacotry's CreateAdam must return an object, and this requires Eve to up-cast the object returned by AdamFactory to an Adam. This will work, I think. However, I feel uneasy about up-casting as it's a no-no. Is this really a must? P.S. - No Blasphemy intended, and I apologize if someone's feelings were hurt. It seemed better to use God and Adam instead of Creator and Created because the two latter words are too similar to each other. Edit: Re interfaces suggestion. Let's assume Adam has two methods: ProvideLove, ProvideFood and ProvideProtection (we're keeping this sample kis-safe :). Eve uses Adam for these two purposes, but of course God doesn't. So why provide God with the knowledge that AdamFactor returns something that implements an IAdam and not just an object? I don't get it! Edit: The working code (with everybody in the same library, which my goal is to separate to different libraries) looks something like this: Adam God.LoadAdam(AdamID theAdamID) var adam = new Adam(theAdamId, this) Adam.Adam(AdamID theAdamID, God theGod) _god = theGod _mind = theGod.LoadMind(theAdamId, this) Mind God.LoadMind (AdamID theAdamID, Adam theAdam) var mind = new Mind (theAdam) var mindId = new minId(theAdamId) mind.DeserializeFromFile(minId) Mind.Mind (Adam theAdam) _adam = theAdam
