[site]: stackoverflow
[post_id]: 4830357
[parent_id]: 4826580
[tags]: 
So you basically have two choices, each outlined by unwind and ammoQ respectively: (1) Write a server and do the socket/protocol work etc., yourself. You can minimize some of the pain by using solutions like Google's protocol buffers. (2) use an existing middleware solution like (a) message queues or (b) an RPC mechanism like CORBA and its many alternatives Either is probably more work than you anticipated. So really you have to answer this yourself. How serious is your project? How varied is your hardware? How likely is the hardware and software configuration to change in the future? If this is more than a learning or pet project you are going to be bored with in a month or two then an existing middleware solution is probably the way to go. The downside is there is a somewhat intimidating learning curve. You can go the RPC route with CORBA , ICE , or whatever the Java solutions are these days (RMI? EJB?), and a bunch of others. This is an elegant solution since your calls to the remote encryption machine appear to your SystemA as simple function calls and the middleware handles the data issues and sockets. But you aren't going to learn them in a weekend. Personally I would look to see if a message queue solution like AMQP would work for you first. There is less of a learning curve than RPC.
