[site]: stackoverflow
[post_id]: 1704262
[parent_id]: 1704058
[tags]: 
For me, it's dependent on the situation. If it's a uniquely named method/class (i.e., not process() or something like that), and you're going to use it a lot , then save typing and just do from foo import MyClass . If you're importing multiple things from one module, it's probably better to just import the module, and do module.bar, module.foo, module.baz , etc., to keep the namespace clean. You also said It has been said that this form helps avoid circular import errors or at least makes the django import system less fragile. It was pointed out that Django's own code seems to prefer "from x import y" over "import x". I don't see how one way or the other would help prevent circular imports. The reason is that even when you do from x import y , ALL of x is imported. Only y is brought into the current namespace, but the entire module x is processed. Try out this example: In test.py, put the following: def a(): print "a" print "hi" def b(): print "b" print "bye" Then in 'runme.py', put: from test import b b() Then just do python runme.py You'll see the following output: hi bye b So everything in test.py was run, even though you only imported b
