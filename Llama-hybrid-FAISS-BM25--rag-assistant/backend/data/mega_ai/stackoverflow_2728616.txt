[site]: stackoverflow
[post_id]: 2728616
[parent_id]: 2727436
[tags]: 
Two potential answers. Pick whichever you like better: In Perl, this is indicated by the module's POD. There's no way of marking it programmatically, so you need to rely on the documentation instead. Any method can die , or at least any nontrivial method. It's going to call something else, which probably calls something else, etc., so the only way to guarantee that no exception will be thrown is to trace down through all the levels of (potential) calls to verify that there's nothing there that might die . Much more pragmatic to just assume that exceptions are always a possibility and code accordingly. Edited to add: As a general rule, Perl5 and static code analysis don't really get along all that well. My understanding is that this is one of the motivations behind the language redesign in Perl6, so you may have better luck there.
