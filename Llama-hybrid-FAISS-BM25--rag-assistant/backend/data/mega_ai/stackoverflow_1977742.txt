[site]: stackoverflow
[post_id]: 1977742
[parent_id]: 
[tags]: 
Inter-thread communication. How to send a signal to another thread

In my application I have two threads a "main thread" which is busy most of the time an "additional thread" which sends out some HTTP request and which blocks until it gets a response. However, the HTTP response can only be handled by the main thread, since it relies on it's thread-local-storage and on non-threadsafe functions. I'm looking for a way to tell the main thread when a HTTP response was received and the corresponding data. The main thread should be interrupted by the additional thread and process the HTTP response as soon as possible, and afterwards continue working from the point where it was interrupted before. One way I can think about is that the additional thread suspends the main thread using SuspendThread , copies the TLS from the main thread using some inline assembler, executes the response-processing function itself and resumes the main thread afterwards. Another way in my thoughts is, setting a break point onto some specific address in the second threads callback routine, so that the main thread gets notified when the second threads instruction pointer steps on that break point - and therefore - has received the HTTP response. However, both methods don't seem to be nicely at all, they hurt even if just thinking about them, and they don't look really reliable. What can I use to interrupt my main thread , saying it that it should be polite and process the HTTP response before doing anything else? Answers without dependencies on libraries are appreciated, but I would also take some dependency, if it provides some nice solution. Following question (regarding the QueueUserAPC solution) was answered and explained that there is no safe method to have a push -behaviour in my case.
