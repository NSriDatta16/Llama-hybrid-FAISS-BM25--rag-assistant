[site]: stackoverflow
[post_id]: 4964621
[parent_id]: 4964596
[tags]: 
Create your own class. That's the Java way. Unless the class is a private inner class, you should define it with private fields and getter / setter methods to access and update them. Or if you don't need to update the fields, only setter methods. (This may sound a bit heavy-weight from a C/C++ perspective, but getters and setters tend to pay off in the long term, and the JIT compiler typically inlines the calls anyway.) You shouldn't worry about memory management. The Java garbage collector will automatically get rid of any instances that become inaccessible. In most situations, it is best to just let the GC handle the problem. There are alternatives (though not good ones, IMO): Use a generic map type such as HashMap or Properties to represent the objects as name value pairs. This is a bad choice from lots of standpoints: performance is poor, you don't have a definite API (for your "objects"), and your code is more fragile. Use an array or list type. This is even worse, because you don't even have "names" for the fields. Don't reify the data packets at all, but pass the bits around separately. Ughh ...
