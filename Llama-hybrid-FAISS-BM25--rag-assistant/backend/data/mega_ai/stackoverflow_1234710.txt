[site]: stackoverflow
[post_id]: 1234710
[parent_id]: 1233486
[tags]: 
You're correct about moving GetAgentFromDatabase() into a separate class. Here's how I redefined AgentRepository : public class AgentRepository { private IAgentDataProvider m_provider; public AgentRepository( IAgentDataProvider provider ) { m_provider = provider; } public Agent GetAgent( int agentId ) { Agent agent = null; using( IDataReader agentDataReader = m_provider.GetAgent( agentId ) ) { if( agentDataReader.Read() ) { agent = new Agent(); // set agent properties later } } return agent; } } where I defined the IAgentDataProvider interface as follows: public interface IAgentDataProvider { IDataReader GetAgent( int agentId ); } So, AgentRepository is the class under test. We'll mock IAgentDataProvider and inject the dependency. (I did it with Moq , but you can easily redo it with a different isolation framework). [TestFixture] public class AgentRepositoryTest { private AgentRepository m_repo; private Mock m_mockProvider; [SetUp] public void CaseSetup() { m_mockProvider = new Mock (); m_repo = new AgentRepository( m_mockProvider.Object ); } [TearDown] public void CaseTeardown() { m_mockProvider.Verify(); } [Test] public void AgentFactory_OnEmptyDataReader_ShouldReturnNull() { m_mockProvider .Setup( p => p.GetAgent( It.IsAny () ) ) .Returns ( id => GetEmptyAgentDataReader() ); Agent agent = m_repo.GetAgent( 1 ); Assert.IsNull( agent ); } [Test] public void AgentFactory_OnNonemptyDataReader_ShouldReturnAgent_WithFieldsPopulated() { m_mockProvider .Setup( p => p.GetAgent( It.IsAny () ) ) .Returns ( id => GetSampleNonEmptyAgentDataReader() ); Agent agent = m_repo.GetAgent( 1 ); Assert.IsNotNull( agent ); // verify more agent properties later } private IDataReader GetEmptyAgentDataReader() { return new FakeAgentDataReader() { ... }; } private IDataReader GetSampleNonEmptyAgentDataReader() { return new FakeAgentDataReader() { ... }; } } (I left out the implementation of class FakeAgentDataReader , which implements IDataReader and is trivial -- you only need to implement Read() and Dispose() to make the tests work.) The purpose of AgentRepository here is to take IDataReader objects and turn them into properly formed Agent objects. You can expand the above test fixture to test more interesting cases. After unit-testing AgentRepository in isolation from the actual database, you will need unit tests for a concrete implementation of IAgentDataProvider , but that's a topic for a separate question. HTH
