[site]: stackoverflow
[post_id]: 2401809
[parent_id]: 
[tags]: 
Designing WCF data contracts and operations

I'm starting to design a wcf service bus that is small now but will grow as our business grow so I'm concerned about some grwoing problems and also trying not to YAGNI too much. It's a e-commerce platform. The problem is I'm having too many second thoughts about where to put stuff. I will give a scenario to demonstrate all my questions. We have an e-commerce website that sells products and ultimately deliveries them. For this we have a PlaceOrder service which, among other parameters, expects an Address object that in this context (our website placing an order) is made of City, Street and ZipCode. We also do business with partners that use our platform only to sell products. They take care of the delivery. For this scenario we have a PlaceOrderForPartner service that, among other objects, expects an Address object. However, in this context (partner placing an order) the Address object is made of different information that is relevant only to a order placed by partner. Given this scenario I have several questions: 1) How to organize this DataContracts objects in namespaces and folders in my Solution? I thought about having a folder per-context (Partner, Customer, etc) to keep the services and the DataContracts. So I would have - MySolution.sln - Partner (folder) - PartnetService.svc - DataContracts (folder) - Address - Customer (folder) - Customer.svc - DataContracts (folder) - Address Using this way I would have a namespace to place all my context-specific datacontracts. 2) What about service design? Should I create a service for each one that might place and order and create a PlaceOrder method inside it like this: Partner.svc/PlaceOrder Customer.svc/PlaceOrder or create an Order service with PlaceOrderForPartner and PlaceInternalOrder like this: Order.svc/PlaceOrderForPartner Order.svc/PlaceOrderForCustomer 3) Assuming that I pick the first option in the last question, what should I do with the operations that are made on the order and common to Partner and Customer? 4) Should I put DataContracts and Service definition in the same assembly? One for each? Everything with the service implementation? 5) How to name input and output messages for operations? Should I use the entities themselves or go for OperationNameRequest and OperationNameResponse template? Bottom line my great question is: How to "organize" the datacontracts and services involved in a service creation? Thanks in advance for any thoughts on this!
