[site]: stackoverflow
[post_id]: 5282385
[parent_id]: 5282129
[tags]: 
I assume you can do this in 'not so elegant' imperative way with NSArray and NSSet . For functional approach used in LINQ solution you can either 1) google for some Objective-C functional lib - http://www.google.com/search?q=functional+programming+objective-c or 2) implement required functions - Intersect , Zip , Count , Sum . Intersect(a1, a2) . Make sets from your arrays and make intersection with objectsPassingTest: . Zip(block, a1, a2) . Iterate max(a1.count, a2.count) and push into answer array result of calling block on corresponding array elements. Count(predicate, array) is Sum((x -> predicate(x) ? 1 : 0), array) Sum(block, array) is Foldl((x, sum -> sum + block(x)), 0, array) Foldl(block, init, array) is id result = init; for (id obj in array) { result = block(result, obj); } I believe no matter what approach you select result will be ugly as hell. Objective-C just isn't that kind of language.
