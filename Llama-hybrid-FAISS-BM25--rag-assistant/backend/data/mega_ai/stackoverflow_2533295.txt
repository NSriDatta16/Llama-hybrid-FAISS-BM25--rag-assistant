[site]: stackoverflow
[post_id]: 2533295
[parent_id]: 2533278
[tags]: 
I assume you mean Constants ? One big reason against using those in PHP is the fact that if a constant was not defined, PHP will interpret it as a string value and throw only a notice, not a fatal error as it - in my humble opinion - should. define("NUMBER_OF_PAGES", 1); echo NUMBER_OF_PAGES; // outputs "1" echo NUMBR_OF_PAGES; // outputs literally "NUMBER_OF_PAGES" and throws // Notice: Use of undefined constant NUMBR_OF_PAGES - // assumed 'NUMBR_OF_PAGES' in xyz // constant() is a workaround but it takes away a lot // of a constant's elegance IMO: echo constant("NUMBER_OF_PAGES"); // Returns "1" echo constant("NUMBR_OF_PAGES"); // Returns null this makes the use of constants somewhat error-prone, especially in older applications that trigger dozens or hundreds of E_NOTICE messages by using less-than-perfect coding practices (but nothing anywhere near as bad as using an undefined constant) and make it hard to detect errors. The cleaner your application, the less of a problem this becomes, because dealing with (and noticing) E_NOTICE level messages becomes possible. Still, an undefined constant should be a fatal error in my mind, and I regard this a design error. IDEs with lookup functions can ease the problem somewhat, and help avoid typos. There is also the function constant() that will return NULL if given a non-existent constant name. (See the code above.) Concrete usage examples: WordPress list of constants Joomla constants Constants are often used to define the current path and / or URL: define("APP_WEBROOT", "http://www.mydomain.com/appname"); define("APP_WEBROOT_PATH", "/var/www/mydomain/appname"); or to define global settings: define("MAX_PAGES", 100); define("MAX_ITEMS_PER_PAGE", 250);
