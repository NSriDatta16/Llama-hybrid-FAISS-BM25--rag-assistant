[site]: stackoverflow
[post_id]: 855171
[parent_id]: 
[tags]: 
How to validate that some template does *not* compile for given argument types?

I'm writing a smart ptr template which is intended to be instantiated only for a given base class and its subclasses, which provides boost::shared_ptr-like implicit conversions to variants MyPtr of the template MyPtr has long as the conversion is valid from T* to U* (valid base class and const-compatible). This was working fine in vs2005, but not with g++ on linux so my colleague changed it there, but doing so it broke the const-correctness. My problem is that I want to unit test that some conversions are not valid (assign MyPtr to MyPtr for example), resulting in the file not compiling ! But you can't have a file not compiling in the solution... If there some VS-specific #pragma or some SFINAE trick that could test a given construct is NOT valid and therefore doesn't compile? Thanks, --DD
