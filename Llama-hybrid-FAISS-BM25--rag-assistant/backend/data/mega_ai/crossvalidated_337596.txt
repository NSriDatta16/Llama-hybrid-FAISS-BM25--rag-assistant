[site]: crossvalidated
[post_id]: 337596
[parent_id]: 
[tags]: 
K-fold cross validation without randomness

For my research purposes, I am trying to eliminate the randomness in k-fold cross validation. My goal is to conduct cross validation where the first 10% from the dataset is the first fold so that the order of the instances prediction results is printed as their order in the dataset. And the final result after the 10 folds cross validation is the average of the 10 rounds. I tried to modify the following code posted by weka as follows: package pkg10foldcrossvalidation; import java.io.BufferedReader; import java.io.FileReader; import java.util.ArrayList; import java.util.Arrays; import weka.core.Instances; import weka.classifiers.bayes.NaiveBayes; import weka.core.Utils; import weka.classifiers.Classifier; import weka.classifiers.Evaluation; import weka.classifiers.evaluation.Prediction; public class CrossValidationSingleRunNB { public static void main(String[] args) throws Exception { // loads data and set class index BufferedReader br = null; br = new BufferedReader(new FileReader("C:\\Prediction Results on the testing set\\Dataset.arff")); Instances data = new Instances(br); data.setClassIndex(data.numAttributes() - 1); br.close(); // classifier NaiveBayes cls = new NaiveBayes(); String[] options = {"-D"}; cls.setOptions(options); cls.buildClassifier(data); System.out.println(cls.getCapabilities()); System.out.println(cls.globalInfo()); System.out.println(Arrays.toString(cls.getOptions())); System.out.println(cls.listOptions()); System.out.println(cls.useKernelEstimatorTipText()+"\n"); System.out.println(cls.getUseKernelEstimator()); // other options int seed = 0; int folds = 10; Instances Data = new Instances(data); // perform cross-validation Evaluation eval = new Evaluation(Data); ArrayList predictions; int counter =1; String plus ="+"; String minus ="-"; for (int n = 0; n But I am not sure about the correctness of this approach, does it really reflect the goal I'm trying to do? Thank you
