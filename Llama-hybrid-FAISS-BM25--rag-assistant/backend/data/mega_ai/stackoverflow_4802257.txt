[site]: stackoverflow
[post_id]: 4802257
[parent_id]: 
[tags]: 
Call a specific class method in Java (without polymorphism)

I'm having a problem in Java. I have a method that can be extended. The problem is, that this method calls other methods of the class, and these can be extended as well. Consider the following class: public class Foo { protected int xLast; public updateMe(int x, int y) { updateX(x); } protected updateX(int x) { this.xLast = x; } } This class is extended by the following class: public class Bar extends Foo { protected int xAverage = 0; protected int xCount = 0; protected int y; public updateMe(int x, int y) { super.updateMe(x, y); updateX(x); updateY(x); } protected updateX(int x) { this.xAverage = (this.xAverage * this.xCount) + x; this.xCount++; this.xAverage /= xCount; } protected updateY(int y) { this.y = y; } } And also by this class: public class Abc extends Foo { } When I do the following: Foo myBar = new Bar(); myBar.updateMe(1, 2); The Foo.updateX method is not called, but the Bar.updateX method is called twice. There are several solutions, some don't work well or are quite ugly: In Bar.updateX call super.updateX . This will cause both updateX methods to be called twice. Remove the updateX call in Foo.updateMe , forcing the extending classes to call super.updateX . This will cause the class Abc to have useless code that it doesn't need, or else the Abc class will not call updateX at all. Rename the methods so that they do not override each other. This will work, but is not safe (in the future this might be forgotten and lead to problems) and is not enforced by the language. I am aware that this is somewhat of a code-smell, but I see no better way to do this. Basically I am looking to do something like this: in Foo.updateMe I would like to call Foo.updateX specifically, and not just the polymorph-ed updateX . I believe that something like the new method keyword in C# can solve my problems, but Java doesn't appear to have one, or any other way to accomplish this. Edit: In the end I chose just to rename the offending method. I have a just one method that causes this problem, and the solution suggested here, although sound from a design point-of-view will make this particular code harder to understand and maintain.
