[site]: stackoverflow
[post_id]: 5205695
[parent_id]: 5205599
[tags]: 
Your first login process is correct and up to todays security standards with the only exception that you may want to choose another hashing function over sha1. Sha1 is very quick and therefore brute force attacks to crack a hash are faster. So if your hashes (database) and token (source code) get leaked, the passwords can be cracked. One countermesure is to use a slower hashing function (see Jims answer for an article about that) But the best of course would be not to leak your hashes in the first time. A possibility for the remember me function is to let the user keep the session cookie for longer. For example Magento and Zend Auth does this. This is however very ugly because you are likely to get hundrets of thousands of sessions stored on your servers, even for users that never return. The far more elegant way is to store this information client side. Sidenote: Of course you shouldnt put too many cookies on the client because they get transmitted with every page request. But a login cookie is a very valid case to do so. A good practice is to store the login cookie at the client side and populate the server session with data saved in a database at login which is marked in a session. This way you eliminiate continous database requests and have a good user data registry. Of course write has to be done to the database and session directly or better to the database and then somehow flushed to the application (full or incrementally). Putting the hash in a client cookie isnt like "plaintext". However its ugly and awful and insecure on many levels. There are some different approaches but they mostly involve some hashing again. The most common and easy one is something like to put a cookie with user_id=john and user_token=HASH($userid.$appsecret) on the client. Or to store them as one in one cookie. This is kinda secure but I prefer the following method: Generate a string that holds: userid ; user agent ; first two ip segments ; current timestamp ; your application secret token Run it through a good hashing function and store a cookie at the users client that looks like auth=userid;timestamp;hash-of-the-above When the client logs in via cookie you re construct taht string from above but take the timestamp and user id from the cookie. Generate the hash and see if it matches. Then you have validated that it is the cookie you generated for that ip adress segment and this user agent at the specified time Sidenote: first two ip segments rarely changes with dynamic isps. you can leave them away too, its for extra security. What is the main advantage of thsi method? The client or you can invalidate all login cookies by setting a timestamp. Only cookise that have been generated afterwards are accepted. You can also implement a timeout. This is good if you want to "remote logout" form a public computer where you forgot to log out or something. I think functionality is very important and with this method you dont have to keep track of single login cookies (like google does). Hope this helps you. You can scale this method to any level of security you like and adjust it to your needs.
