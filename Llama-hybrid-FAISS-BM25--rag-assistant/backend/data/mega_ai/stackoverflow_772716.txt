[site]: stackoverflow
[post_id]: 772716
[parent_id]: 771995
[tags]: 
The question is actually not language agnostic at all. In some languages you could easily decorate the classes. But let's stick to Java. Even there I say "it depends". An apparent thing we would like to do is some sort of auto-discovery of the handlers. For example, annotate your handlers with a @Handler(handles=PojoA.class) annotation, then scan for all classes annotated with @Handler (either the messy way that basically requires the class files to be loaded or using something like Scannotation). If you are running in a context such as Spring, an even more interesting option arises. You can get all beans implementing a certain interface, such as the following: public interface Handler { void handle(T object); } and then find them in your dispatcher code: Collection handlers = applicationContext.getBeansofType(Handler.class).values(); for (Handler handler : handlers) { Method handleMethod = handler.getClass().getMethod("handle", Object.class); Class type = handleMethod.getParameterTypes()[0]; register(type, handler); } (admittedly, the code above is untested) I realize I go out of the boundaries here. My point is that the elegance of the solution depends on your language of choice, what external tools you are willing to use and what framework you are using.
