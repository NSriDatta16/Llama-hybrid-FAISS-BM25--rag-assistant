[site]: stackoverflow
[post_id]: 732240
[parent_id]: 732069
[tags]: 
You ought to have two classes: a monomial class that abstracts a single term with a coefficient and exponent and a polynomial that has a list of monomials as private data member. The monomial will only allow you to add or subtract terms whose exponents are equal; the result will be a monomial that has that same exponent and the sum or difference of the coefficients. The result from the mul and div methods will also be a monomial that has the product or quotient of coefficients as its coefficient and the sum or different of exponents as its exponent. The polynomial methods will iterate over its list of monomials to perform the arithmetic operations. I agree with the comment that discourages you from extending a container like linked list. This is best expressed as a polynomial HAS-A list of monomials rather than IS-A list of monomials. It's a subtle, important difference. One advantage of HAS-A is that it will allow you to change the data structure you use to store the monomials without affecting clients. Array, list, map - your user doesn't care, as long as you uphold the contract. I don't know if there's an advantage in treating monomials and polynomials the same, but if there is you'll want an interface defining common methods and a GoF Composite pattern.
