[site]: stackoverflow
[post_id]: 5135252
[parent_id]: 4607361
[tags]: 
Your question is a bit confused - I'm not sure what you mean "what's the best way to grant access to this group now" in the context of the initial few paragraphs. Nested groups are dead simple. If you're using the groupOfNames objectClass, just add another member attribute to your parent group, with the value being the DN of the child group. From your pseudo-code: # Assuming your "groups" OU already exists... # First create the child groups dn: cn=project-name development,ou=groups,dc=example,dc=com objectclass: groupofnames cn: project-name development member: cn=Robert Smith,ou=people,dc=example,dc=com member: cn=Jane Doe,ou=people,dc=example,dc=com member: cn=server1$,ou=servers,dc=example,dc=com dn: cn=project-name staging,ou=groups,dc=example,dc=com objectclass: groupofnames cn: project-name development member: cn=Jane Doe,ou=people,dc=example,dc=com member: cn=server2$,ou=servers,dc=example,dc=com # Now create the parent group dn: 'project-name,ou=groups,dc=example,dc=com' objectclass: groupofnames member: cn=Robert Smith,ou=people,dc=example,dc=com member: cn=project-name staging,ou=groups,dc=example,dc=com member: cn=project-name development,ou=groups,dc=example,dc=com Hiearchy within OUs is really only to separate your LDAP tree into "logical" segments based on the structure of your organisation. So, for example, you could stick all your groups for managing the "Development Department" in their own OU, so it's nice and clear what they pertain to. Objects can reference each other, and nest quite happily, by referencing each other with appropriate attributes (in this case, member ).
