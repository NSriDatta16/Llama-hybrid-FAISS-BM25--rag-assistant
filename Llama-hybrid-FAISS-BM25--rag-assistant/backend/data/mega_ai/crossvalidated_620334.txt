[site]: crossvalidated
[post_id]: 620334
[parent_id]: 
[tags]: 
How do you calculate descriptive statistics before and after matching multiply imputed datasets?

I'm trying to find the best way to calculate descriptive statistics following matching on a dataset with missing values (handled using multiple imputation). The purpose is to present this data as "Table 1" in a medical journal article. Using the mice::selfreport dataset as an example: library(mice) library(miceadds) library(MatchThem) # Create new outcome variable from reported bmi (br) selfreport $obese br, breaks = c(0, 30, 60), labels = c("Not obese", "Obese"), right = FALSE) # Impute datasets I appreciate that using summary() on a mimids class object gives me the means (though not standard deviations) of only one of the imputed (unmatched) datasets: summary(models) Summarizing | dataset: #1 Call: matchthem(formula = obese ~ age + sex + edu, datasets = datasets, method = "cem", cutpoints = list(age = c(30, 40, 50)), k2k = FALSE) Summary of Balance for All Data: Means Treated Means Control Std. Mean Diff. Var. Ratio eCDF Mean eCDF Max age 46.3333 41.3021 0.4100 0.669 0.0915 0.1866 sexFemale 0.6343 0.5151 0.2474 . 0.1192 0.1192 sexMale 0.3657 0.4849 -0.2474 . 0.1192 0.1192 eduLow 0.4045 0.3438 0.1237 . 0.0607 0.0607 eduMiddle 0.4013 0.3529 0.0986 . 0.0484 0.0484 eduHigh 0.1942 0.3033 -0.2758 . 0.1091 0.1091 Summary of Balance for Matched Data: Means Treated Means Control Std. Mean Diff. Var. Ratio eCDF Mean eCDF Max Std. Pair Dist. age 46.3333 47.1995 -0.0706 0.8012 0.0241 0.0897 0.4716 sexFemale 0.6343 0.6343 0.0000 . 0.0000 0.0000 0.0000 sexMale 0.3657 0.3657 -0.0000 . 0.0000 0.0000 0.0000 eduLow 0.4045 0.4045 0.0000 . 0.0000 0.0000 0.0000 eduMiddle 0.4013 0.4013 0.0000 . 0.0000 0.0000 0.0000 eduHigh 0.1942 0.1942 0.0000 . 0.0000 0.0000 0.0000 Sample Sizes: Control Treated All 1751. 309 Matched (ESS) 1324.81 309 Matched 1751. 309 Unmatched 0. 0 Discarded 0. 0 And I understand that pooling means and standard deviations after multiple imputation is possible. So for example, to pool the mean and SD of age of unmatched obese and non-obese participants: datasets_long $age), sd(x$ age)))) print("Non obese mean, SD") print(Reduce("+",pool_mean)/length(pool_mean), digits = 3) pool_mean $age), sd(x$ age)))) print("Obese mean, SD") print(Reduce("+",pool_mean)/length(pool_mean), digits = 3) }) [1] "Non obese mean, SD" [1] 41.3 15.0 [1] "Obese mean, SD" [1] 46.3 12.3 Any insight or suggestions on the following questions would be extremely appreciated: Is it possible to also pool the frequencies of the categorical predictor variables (sex and education level, as well as others not used in the matching model) in the unmatched cohort? Is it possible to calculate similar descriptive statistics for the pooled matched cohort? Update My partial solution to calculating descriptive statistics for the pooled matched cohort. Only managed to get it to work for 1:1 matching. Frequencies and descriptive statistics in the matched cohort are pooled averages across imputations models Extract all imputed datasets, excluding unmatched observations models_long Sample size of matched cohort models_long %>% group_by(.imp) %>% summarise(Freq = n() / 2) %>% pull() %>% summary() Min. 1st Qu. Median Mean 3rd Qu. Max. 309 309 309 309 309 309 Baseline characteristics of continuous variables of matched cohort local({ variable [1] "Not obese mean, SD" [1] 46.3 12.2 [1] "Obese mean, SD" [1] 46.3 12.3 Baseline characteristics of categorical variables of matched cohort models_long %>% group_by(obese, etn) %>% summarise(n = n(), Freq = n()/5, Percent = n()/(3090/2) * 100) %>% mutate(across(c(Freq, Percent), ~ num(.x, digits = 1))) `summarise()` has grouped output by 'obese'. You can override using the `.groups` argument. # A tibble: 4 Ã— 5 # Groups: obese [2] obese etn n Freq Percent 1 Not obese Autochtone 1211 242.2 78.4 2 Not obese Allochtone 334 66.8 21.6 3 Obese Autochtone 891 178.2 57.7 4 Obese Allochtone 654 130.8 42.3 Chi-square test (if required) local({ # Conduct a chi-square test in each imputed dataset, and save as vector dk % group_by(.imp) %>% summarise(Xsquared = chisq.test(etn, obese)$statistic) %>% pull(Xsquared) ## Obtain degree of freedom df % dplyr::filter(.imp == 1) %>% summarise(df = chisq.test(etn, obese)$parameter) %>% pull(df) # Pool the chi-square tests miceadds::micombine.chisquare(dk, df, display = TRUE, version = 1) }) Combination of Chi Square Statistics for Multiply Imputed Data Using 5 Imputed Data Sets F(1, 6.31)=5.316 p=0.05851
