[site]: stackoverflow
[post_id]: 555824
[parent_id]: 555807
[tags]: 
Having 100% code coverage is not that great as one may think of it. Consider a trival example: double Foo(double a, double b) { return a / b; } Even a single unit test will raise code coverage of this method to 100%, but the said unit test will not tell us what code is working and what code is not. This might be a perfectly valid code, but without testing edge conditions (such as when b is 0.0 ) unit test is inconclusive at best. Code coverage only tells us what was executed by our unit tests, not whether it was executed correctly. This is an important distinction to make. Just because a line of code is executed by a unit test, does not necessarily mean that that line of code is working as intended. Listen to this for an interesting discussion.
