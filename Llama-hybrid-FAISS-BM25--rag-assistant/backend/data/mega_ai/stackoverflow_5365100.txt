[site]: stackoverflow
[post_id]: 5365100
[parent_id]: 5364979
[tags]: 
A regexp string is made of regexp and modifiers (like i, m). Since they are both part of a single string, there is a mandatory delimiter between them - a single character, like a pipe, a slash, semicolon. Since you can use any symbol, you have to declare which one you will be using. The choice is declared with the first char of your regexp string. if it is /, then the delimiter will be /. If it is |, then the delimiter will be |. So these are perfectly equivalent (regexp 'test', modifier 'i'): preg_match("/test/i"); preg_match("|test|i"); preg_match(":test:i"); if you use your delimiter earlier, PHP interprets the next char as a modifier. This is what happened to you (since you began with [, PHP interpreted ] as a delimiter and _ as a modifier). The pattern you are looking for is: $pattern = '/^\d+_\d+$/'; Note the ^ and $ ! Omitting these (as most of the other answers do) is a huge error (because it allows any string before and after the matched part; if you forgot the ^, -20_1 would also match, because it has a valid substring: 20_1).
