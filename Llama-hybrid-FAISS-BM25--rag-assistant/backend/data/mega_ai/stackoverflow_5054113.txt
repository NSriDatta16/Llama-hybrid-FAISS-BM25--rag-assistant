[site]: stackoverflow
[post_id]: 5054113
[parent_id]: 
[tags]: 
Android Fragment Duplication

I'm trying out the new class in android Honeycomb preview, and I've got a small issue. I am making a baseball scoring app, and I want the buttons on the left (Action Menu) to switch the "Action Pane" on the right, which I've set up as a fragment. I'd like the buttons' onClickListener() to call a Fragment Transaction to swap it out. So far it works, EXCEPT that when the app loads, it creates the default fragment, but when I hit a button, instead of REPLACING the default fragment, it creates a whole new one next to it. I've looked for hours, and I can't see what I'm doing wrong... Keep in mind I'm new to java/android/programming, so I might be missing something that's painfully obvious. hc_test.java (main activity) package com.pte.hc_test; import android.app.Activity; import android.app.Fragment; import android.app.FragmentTransaction; import android.os.Bundle; import android.view.View; import android.widget.Button; public class hc_test extends Activity { /** Called when the activity is first created. */ /* declare class-level variables */ // private LinearLayout touchPad; // private TextView touchCoordText; private Button pitchButton; private Button hitButton; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); pitchButton = (Button)findViewById(R.id.actionButton1); hitButton = (Button)findViewById(R.id.actionButton2); pitchButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { swapFragment(actionType.PITCH_ACTION); } }); hitButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { swapFragment(actionType.HIT_ACTION); } }); } private void swapFragment(int myType){ Fragment f = new actionFragment(myType); // Execute a transaction, replacing any existing // fragment with this one inside the frame. FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.replace(R.id.actionFragment, f); ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN); ft.addToBackStack(null); ft.commit(); } } main.xml actionFragment.java package com.pte.hc_test; import android.app.Fragment; import android.content.Context; import android.os.Bundle; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.LinearLayout; import android.widget.TableLayout; import android.widget.TableRow; import android.widget.TextView; public class actionFragment extends Fragment { // class variables int mActivityType; // default (null) constructor public actionFragment(){ Log.v("PTE", "null constructor"); } public actionFragment(int n){ mActivityType = n; Log.v("PTE", "explicit constructor (" + n + ")"); } @Override public void onCreate(Bundle saved){ super.onCreate(saved); if (saved != null){ mActivityType = saved.getInt("Type"); } Log.v("PTE", "FIRE: actionFragment.onCreate()"); } @Override public void onSaveInstanceState(Bundle toSave){ toSave.putInt("Type", mActivityType); Log.v("PTE", "FIRE: actionFragment.onSaveInstanceState()"); } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState){ Log.v("PTE", "FIRE: actionFragment.onCreateView()"); Log.v("PTE", "with mActivityType == " + mActivityType); try { Log.v("PTE", "with onCreateView()'s container = " + container.toString()); } catch (Exception e) { Log.v("PTE", "could not convert container to string. Must be null"); Log.v("PTE", e.toString()); } Context c = getActivity().getApplicationContext(); LinearLayout actionPane = new LinearLayout(c); switch (mActivityType) { case actionType.PITCH_ACTION: Log.v("PTE", "FIRE: actionFragment.pitchPane()"); // instantiate all the required views // parent container TextView topLabel = new TextView(c); TableLayout strikeZone = new TableLayout(c); ImageView image = new ImageView(c); // set properties for each view actionPane.setOrientation(LinearLayout.VERTICAL); topLabel.setText("top Label Text"); // create the strike zone table for(int i=1; i
