[site]: stackoverflow
[post_id]: 2915584
[parent_id]: 2915399
[tags]: 
camelCase? No, we don't put any restrictions on names, except that spaces tend to be discouraged. The content is what matters, not the presentation. As long as the name is clearly defined what it does, we're happy. I think the biggest change you can make is to put all your projects in a single repo at the top level. We don't use branches or tags directories as we have many hundreds of projects, each divided up into versioned groups (ie we have a base platform that is versioned, and a lot of plugins that live underneath each base version number) eg: base v1 +--- moduleA +----moduleB base v2 +--- moduleA +----moduleB We've thought about putting a tag branch underneath each of the module directories, but we nearly always deal with the head version, so its not an issue for us. We regularly merge changes from older base version modules to the new - eg make a change to moduleA for base v1, the changes are merged into base v2's moduleA. We don't go backwards unless necessary. Every module has a release note with it, that describe the version number and the changes. The log comment has some of the description and version number in there. This makes it very easy to get previous versions out without having to have lots of tag branches that are uniquely named. If we did start using tag branches (its been suggested) then we'd make a full path copy into the /tags directory), we'd still merge onto a single tag branch and put a log comment marking the release number, we just have too many modules to manage them as 1 tag folder per branch. And no, we never make changes to historical revisions - if a customer needs new functionality, they have to upgrade to the latest version (which is never a problem until they change the base platform version) We don't use branches either, as we tend to work on the head version of each module, if we do need a branch for a major set of changes, we will branch at the base level, so we'd create a "base v2 - performance" branch and branch everything. This makes it easy to group a lot of changes together, as it works out that way best for us. Branching individual modules would incur too much clutter in the repo - as we have a couple of hundred, it'd be easy to lose track of them if we had branches per module. Yes, we make changes on the trunk, but this is ok with our workflow - things don't get committed until they're ready to go. All changes that are made to the older base versions are bug fixes only, and we have too many modules to manage them in a full dev-test-release cycle. We fix, if it proves to be a bad fix, we fix again. We sometimes change this approach for bigger developments and create a branch on a branches folder (off the root). The branch path re-creates the path to the original module (so its easy to tell which it is, and merging back is as easy as changing /branches to /trunk at the beginning of the path). The only issue we've come across in this system is when we put a module in a web app's project (redmine). We wanted to have a single redmine project for all versions of a module, but our layout was such that it became a bit difficult to give a root to the repository. If we could associate a repo path with each version in redmine, then this limitation would disappear. Its not necessarily the best for everyone, and I'd recommend using branches more, but this works for us (partly as it was the way we worked in a previous source control system that was "safe" and didn't support branches/merging).
