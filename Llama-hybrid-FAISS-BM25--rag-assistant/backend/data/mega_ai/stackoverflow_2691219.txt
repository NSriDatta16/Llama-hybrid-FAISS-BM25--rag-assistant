[site]: stackoverflow
[post_id]: 2691219
[parent_id]: 2690311
[tags]: 
Your post is a little unclear, but I think you're running into the Magento limitation of only being able to override classes that are at the bottom of the inheritance chain. Here's how Magento's override system works. I'm going to use models as an example, but it applies to helpers and blocks as well. When Magento needs to instantiate an overridable class, it doesn't use the new keyword. $foo = new FooBar(); instead, a static factory method is called on global Mage object. $foo = Mage::getModel('foo/bar'); What getModel does is turn the string "foo/bar" into an actual class name. It does this based on a series of rules, one of which is to check all module configuration for any overrides. Once the class name is determined, an object is instantiated. This works decently, but it means you may only override the instantiation of a class. There's no way to override methods on parent classes, as those methods are inherited via the normal PHP mechanism. Clarification : So, let's say you have a class Foo which extends Bar class Bar { public function example() { } } class Foo extends Bar { public function example() { return parent::example(); } } and you override class Bar with something like //magento configured ot use Baz in place of Bar class Baz { } When someone instantiates a Foo object and calls the example method, parent will resolves to class Bar, even though you've overridden class Bar in the Magento config.
