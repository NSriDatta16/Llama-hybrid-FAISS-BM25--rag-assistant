[site]: stackoverflow
[post_id]: 1320400
[parent_id]: 1320293
[tags]: 
Funny I just read the sqlite3 documentation on this about an hour ago. So you're in luck :) See the doc yourself (Scroll to the bottom, 64-bit ROWIDs section). Here's the excerpt: To minimize storage space, the 64-bit rowid is stored as a variable length integer. Rowids between 0 and 127 use only a single byte. Rowids between 0 and 16383 use just 2 bytes. Up to 2097152 uses three bytes. And so forth. Negative rowids are allowed but they always use nine bytes of storage and so their use is discouraged. When rowids are generated automatically by SQLite, they will always be non-negative. 3rd party edit I was suprised that the Id -column despite being created as an int column was mapped to long as well CREATE TABLE "Example" ( "Id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, "Foo" TEXT NULL, "SomeDate" DATETIME NULL ) the explanation is also in the 64-bit ROWID section Every row of a table has a unique rowid. If the table defines a column with the type "INTEGER PRIMARY KEY" then that column becomes an alias for the rowid. But with or without an INTEGER PRIMARY KEY column, every row still has a rowid. In SQLite version 3.0, the rowid is a 64-bit signed integer.
