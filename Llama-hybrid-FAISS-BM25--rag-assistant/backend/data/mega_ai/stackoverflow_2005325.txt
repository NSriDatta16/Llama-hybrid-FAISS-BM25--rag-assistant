[site]: stackoverflow
[post_id]: 2005325
[parent_id]: 2005160
[tags]: 
Perhaps the compiler is trying to put all the arguments to the intrinsic into registers at once. You don't want to access that many variables at once without organizing them. Rather than declare a separate identifier for each sample, try putting them into a char[16] . The compiler will promote the 16 values to registers as it sees fit, as long as you don't take the address of anything within the array. You can add an __aligned__ tag (or whatever VC++ uses) and maybe avoid the intrinsic altogether. Otherwise, calling the intrinsic with ( sample[15], sample[14], sample[13] â€¦ sample[0] ) should make the compiler's job easier or at least do no harm. Edit: I'm pretty sure you're fighting a register spill but that suggestion will probably just store the bytes individually, which isn't what you want. I think my advice is to interleave your final attempt (using MakeFourCC) with the read operations, to make sure it's scheduled correctly and with no round-trips to the stack. Of course, inspection of object code is the best way to ensure that. Essentially, you are streaming data into the register file and then streaming it back out. You don't want to overload it before it's time to flush the data.
