[site]: stackoverflow
[post_id]: 428394
[parent_id]: 428183
[tags]: 
Well, I don't like code that appears to get a list of orders and then process them, and then stop processing them when an error occurs, when surely it should skip that order and move to the next? The only thing to completely fail on is when the database (source of orders, destination of preorders) dies. I think that the entire logic is a bit funky really, but maybe that's because I don't have experience in the language you are using. try { // Get all of the orders here // Either in bulk, or just a list of the new order ids that you'll call the DB // each time for, i'll use the former for clarity. List orders = getNewOrders(); // If no new orders, we will cry a little and look for a new job if (orders != null && orders.size() > 0) { for (Order o : orders) { try { for (OrderItem i : o.getOrderItems()) { if (checkInventory(i)) { // Reserve that item for this order preOrder(o, i); } else { // Out of stock, call the magic out of stock function failOrderItem(o, i); } } } catch (OrderProcessingException ope) { // log error and flag this order as requiring attention and // other things relating to order processing errors that aren't database related } } } else { shedTears(); } } catch (SQLException e) { // Database Error, log and flag to developers for investigation }
