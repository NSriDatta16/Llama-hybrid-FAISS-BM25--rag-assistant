[site]: stackoverflow
[post_id]: 5351811
[parent_id]: 5351405
[tags]: 
First things first, you have a leak in the code you presented. Remove the two calls to retain . Second, you are in the classic problem of having multiple switches/if..else chains based on the same information. This screams for an OO solution. First create a TableSection class: @interface TableSection : NSObject { } @property (nonatomic, copy) NSString* header; @property (nonatomic, copy) NSArray* rows; - (NSInteger)numberOfRows; - (UITableViewCell*)cellInTableView: (UITableView*)tableView forRow: (NSInteger)row; @end @implementation TableSection @synthesize header; @synthesize rows; - (void)dealloc { [header release]; [rows release]; [super dealloc]; } - (NSInteger)numberOfRows { return rows.count; } - (UITableViewCell*)cellInTableView: (UITableView*)tableView forRow: (NSInteger)row { // create/reuse, setup and return a UITableViewCell } @end Now in your TableViewController @interface MyViewController : UITableViewController { } @property (nonatomic, retain) NSArray* tableSections; @end @implementation MyViewController - (void)dealloc { [tableSections release]; [super dealloc]; } - (void)viewDidLoad { TableSection* section1 = [[TableSection alloc] init]; [section1 setRows: [NSArray arrayWithObjects: @"Send SMS", @"Reports", nil]]; TableSectlion* section2 = [[TableSection alloc] init]; [section2 setRows: [NSArray arrayWithObjects: @"Accounts", nil]]; [self setTableSections: [NSArray arrayWithObjects: section1, section2, nil]]; [section2 release]; [section1 release]; } - (void)viewDidUnload { [self setTableSections: nil]; } #pragma mark UITableViewDataSource - (NSInteger)numberOfSectionsInTableView: (UITableView*)tableView { return self.tableSections.count; } - (NSInteger)tableView: (UITableView*)tableView numberOfRowsInSection: (NSInteger)section { return [[self.tableSections objectAtIndex: section] numberOfRows]; } - (UITableViewCell*)tableView: (UITableView*)tableView cellForRowAtIndexPath: (NSIndexPath*)indexPath { return [[self.tableSections objectAtIndex: indexPath.section] cellInTableView: tableView forRow: indexPath.row]; } - (NSString*)tableView: (UITableView*)tableView titleForHeaderInSection: (NSInteger)section { return [[self.tableSections objectAtIndex: section] header]; } @end
