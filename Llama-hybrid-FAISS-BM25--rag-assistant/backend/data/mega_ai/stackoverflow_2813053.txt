[site]: stackoverflow
[post_id]: 2813053
[parent_id]: 2465317
[tags]: 
The answers involving an initializer function f will do O(n^2) work for square nxn Matrix. Ideally, this task should be O(n), since there are just less than 3*n entries to be filled. Suppose also that you want a resulting Matrix without any special (eg. band) storage or indexing function (so that you can later write to any part of it arbitrarily). And suppose also that you don't want to get around such an issue by wrapping the band structure Matrix with another generic Matrix() call which would double the temp memory used and produce collectible garbage. Here are two ways to do it (without applying f to each entry in an O(n^2) manner, or using a separate do-loop). The first one involves creation of the three bands as temps (which is garbage to be collected, but at least not n^2 size of it). M:=Matrix(100,[[-1$99],[2$100],[-1$99]],scan=band[1,1]); This second way uses a routine which walks M and populates it with just the three scalar values (hence not needing the 3 band lists explicitly). M:=Matrix(100): ArrayTools:-Fill(100,2,M,0,100+1); ArrayTools:-Fill(99,-1,M,1,100+1); ArrayTools:-Fill(99,-1,M,100,100+1); Note that ArrayTools:-Fill is a compiled external routine, and so in principal might well be faster than an interpreted Maple language (proper) method. It would be especially fast for a Matrix M with a hardware datatype such as 'float[8]'. By the way, the reason that the arrow procedure above failed with error "invalid arrow procedure" is likely that it was entered in 2D Math mode. The 2D Math parser of Maple 13 does not understand the if...then...end syntax as the body of an arrow operator. Alternatives (apart from writing f as a proc like someone else answered) is to enter f (unedited) in 1D Maple notation mode, or to edit f to use the operator form of if . Perhaps the operator form of if here requires a nested if to handle the elif. For example, f := (i,j) -> `if`(i=j,2,`if`(abs(i-j)=1,-1,0)); Matrix(100,f);
