[site]: stackoverflow
[post_id]: 5727744
[parent_id]: 5724164
[tags]: 
you can walk the returned elements form Request.HTML like so: http://jsfiddle.net/dimitar/NF2jz/1139/ new Request.HTML({ url: '/echo/html/', data: { html: data, delay: 1 }, method: 'post', onComplete: function() { // first, only get elements that have an id and are divs // this may be slow as it looks for ALL els returned, depends on your // fragment var filtered = this.response.elements.filter(function(el) { return el.get("id") && el.get("tag") == "div"; }); // This wil be even faster, working with your response fragment // where your els are children of the first node: // get div els where id is set via Slick var filtered = this.response.tree[0].getElements("div[id]"); filtered.each(function(el) { // get the id var id = el.get("id"); // remove the id from the element so dom selector works correctly el.set("id", null); // look for dom element that matches var target = document.id(id); // if found, update html if (target) target.set("html", el.get("html")); }); } }).send(); as Tim Weink from mootools-core likes to point out, I have a nasty habit of using undocumented mootools features that fall outside of the public API, such as accessing this.response directly where I should use the named arguments instead. Keep it in mind and look at the documentation on which argument will match this.response.elements or this.response.tree - in the unlikely event that mootools change their API and make that unavailable.
