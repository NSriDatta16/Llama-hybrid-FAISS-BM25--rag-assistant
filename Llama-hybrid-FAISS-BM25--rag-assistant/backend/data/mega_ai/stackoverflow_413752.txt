[site]: stackoverflow
[post_id]: 413752
[parent_id]: 413713
[tags]: 
It seems to me like you actually have a pretty good idea of what you need to do. Using Subversion (or other VCS) is a must. Although it might be wise to setup a separate SVN repository for your work-related code rather than using a personal one. You can integrate Subversion with Eclipse using a plugin like Subclipse, which I've found works pretty well. I'd definitely use Ant or Maven - my preference is Ant because it's more flexible, and I think it would suit your development style more than Maven as well. But you might also want to look into Apache Ivy , which handles dependency-management. Basically you set up an ant task which runs your compile, build and deployment steps - so that when you create a final JAR package you can be sure that it's been unit tested as that is part of your ant script. The best way to get started with ant is to look at some examples, and read through the manual . As for unit testing - you can gradually build up with unit testing. I would recommend using JUnit in conjunction with a code coverage tool such as Cobertura (which is easy to set up) - it will help you to understand how much code your tests are covering and is an indicator about how effective your tests are. It may also be worth your while setting up something like Trac - it's important to be able to keep track of bugs, and a wiki is surprisingly useful for documentation. In other words, all of this sounds like you're on the right lines, you just need to get started using some of these tools!
