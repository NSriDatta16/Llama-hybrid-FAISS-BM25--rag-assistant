[site]: stackoverflow
[post_id]: 1457885
[parent_id]: 1457796
[tags]: 
Where to put use? use occurs at compile time, so it doesn't matter where you put it. At least from a purely pragmatic, 'will it work', point of view. Because it happens at compile time use will always be executed, even if you put it in a conditional. Never do this: if( $foo eq 'foo' ) { use SomeModule } In my experience, it is best to put all your use statements at the top of the file. It makes it easy to see what is being loaded and what your dependencies are. Update: As brian d foy points out , things compiled before the use statement will not be affected by it. So, the location can matter. For a typical module, location does not matter, however, if it does things that affect compilation (for example it imports functions that have prototypes), the location could matter. Also, Chas Owens points out that it can affect compilation. Modules that are designed to alter compilation are called pragmas. Pragmas are, by convention, given names in all lower-case. These effects apply only within the scope where the module is used. Chas uses the integer pragma as an example in his answer. You can also disable a pragma or module over a limited scope with the keyword no . use strict; use warnings; my $foo; print $foo; # Generates a warning { no warnings 'unitialized`; # turn off warnings for working with uninitialized values. print $foo; # No warning here } print $foo; # Generates a warning Indirect object syntax In your example code you have my $obj = new ObjectX; . This is called indirect object syntax, and it is best avoided as it can lead to obscure bugs. It is better to use this form: my $obj = ObjectX->new; Why is your test script slow on the server? There is no way to tell with the info you have provided. But the easy way to find out is to profile your code and see where the time is being consumed. NYTProf is another popular profiling tool you may want to check out. Best practices Check out Perl Best Practices , and the quick reference card. This page has a nice run down of Damian Conway's OOP advice from PBP . Also, you may wish to consider using Moose . If the long script startup time is acceptable in your usage, then Moose is a huge win.
