[site]: stackoverflow
[post_id]: 1743249
[parent_id]: 
[tags]: 
LINQ / SQL Performace problem with a very long list

In our database we have a table with more then 100000 entries but most of the time we only need a part of it. We do this with a very simple query. items.AddRange(from i in this where i.ResultID == resultID && i.AgentID == parentAgentID orderby i.ChangeDate descending select i); After this Query we get a List with up to 500 items. But even from this result we only need the newest and following item. My coworker did this very simple with: items[0]; items[1]; Works fine since the query result is already ordered by date. But the overall performance is very poor. Takes some seconds even. My idea was to add a .Take(2) at the end of the query but my coworker said this will make no difference. items.AddRange((from i in resultlist where i.ResultID == resultID && i.AgentID == parentAgentID orderby i.ChangeDate descending select i).Take(2)); We haven't tried this yet and we are still looking for additional ways to speed things up. But database programming is not our strong side and any advice would be great. Maybe we can even make some adjustments to the database itself? We use a SQL Compact Database.
