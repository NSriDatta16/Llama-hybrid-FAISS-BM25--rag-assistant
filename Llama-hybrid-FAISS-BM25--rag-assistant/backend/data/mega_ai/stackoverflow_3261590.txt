[site]: stackoverflow
[post_id]: 3261590
[parent_id]: 3260162
[tags]: 
Since you are using dependency injection, you should try to use the wiring that is provided out of the box from the DI framework in question rather than writing your own factories. The current problem can be solved using SpringPropertyPlaceHolder and a simple convention around the naming of the DAOs in the spring configuration file. Steps: 1. First use some naming convention to name the Ids of your individual DAOs and configure them in the spring file. Ex: Here we are saying that all Hibernate Daos begin with hibernate and all ibatis Daos begin with ibatis etc. 2.Next configure the consumer of the Daos. Make sure that the wiring is dynamic depending on properties. 3.After that configure Spring Property place holder in your spring file. classpath:/path/to/app.properties 4.Finally you write the app.properties with the single line. daoImpl=hibernate # choose hibernate implementations. Now, the daoImpl would get replaced by "hibernate". The other advantage of this technique is that SpringPropertyPlaceHolder can also obtain properties from the environment which it can use in preference to the app.properties (depends on a configuration parameter look up the javadocs for details) Hence you can configure your app behavior using environment properties as well which can be pretty powerful. Alternative 2: You can also use Maven Profiles to achieve similar behavior. Maven has the ability to "filter" your resources - in this case it would replace placeholders with some strings depending on the maven profile that it is executing under. You can leverage this feature to generate app packages (jars, ears etc.) that work with a given implementation (like hibernate,ibatis etc). Obviously, this is less flexible than the PropertyPlaceHolder approach but can be preferable under certain conditions.
