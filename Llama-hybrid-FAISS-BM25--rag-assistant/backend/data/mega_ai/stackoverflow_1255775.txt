[site]: stackoverflow
[post_id]: 1255775
[parent_id]: 
[tags]: 
Default argument promotions in C function calls

Setup I have a few questions about the default argument promotions when calling a function in C. Here's section 6.5.2.2 "Function calls" Paragraphs 6, 7, and 8 from the C99 standard (pdf) (emphasis added and broken into lists for ease of reading): Paragraph 6 If the expression that denotes the called function has a type that does not include a prototype , the integer promotions are performed on each argument, and arguments that have type float are promoted to double . These are called the default argument promotions . If the number of arguments does not equal the number of parameters, the behavior is undefined. If the function is defined with a type that includes a prototype , and either the prototype ends with an ellipsis ( , ... ) or the types of the arguments after promotion are not compatible with the types of the parameters, the behavior is undefined. If the function is defined with a type that does not include a prototype , and the types of the arguments after promotion are not compatible with those of the parameters after promotion, the behavior is undefined, except for the following cases: one promoted type is a signed integer type, the other promoted type is the corresponding unsigned integer type, and the value is representable in both types; both types are pointers to qualified or unqualified versions of a character type or void . Paragraph 7 If the expression that denotes the called function has a type that does include a prototype , the arguments are implicitly converted, as if by assignment, to the types of the corresponding parameters, taking the type of each parameter to be the unqualified version of its declared type. The ellipsis notation in a function prototype declarator causes argument type conversion to stop after the last declared parameter. The default argument promotions are performed on trailing arguments. Paragraph 8 No other conversions are performed implicitly; in particular, the number and types of arguments are not compared with those of the parameters in a function definition that does not include a function prototype declarator . What I know The default argument promotions are char and short to int / unsigned int and float to double The optional arguments to variadic functions (like printf ) are subject to the default argument promotions For the record, my understanding of a function prototype is this: void func(int a, char b, float c); // Function prototype void func(int a, char b, float c) { /* ... */ } // Function definition Question I'm having a really hard time groking all of this. Here are some questions I have: Do prototyped and non-prototyped functions' behavior really differ so much, such as with regard to default promotions and implicit conversions? When do default argument promotions occur? Is it always? Or is it just in special cases (like with variadic functions)? Does it depend on whether a function is prototyped?
