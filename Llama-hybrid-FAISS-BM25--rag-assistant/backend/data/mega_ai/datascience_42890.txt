[site]: datascience
[post_id]: 42890
[parent_id]: 39937
[tags]: 
I think the main thing you would need to worry about is how to extract meaningful account metadata. But this is your dataset and you probably know the details about it well enough now. There are some details about bot hunting account features / metadata that may be useful from this blackhat paper, looking for things like "Number of tweets relative to account age" and "Average hours tweeted per day" which would presumably features you would have to engineer yourself out of your tweet/account metadata. When it comes to integrating them into your model, you want to do something like concatenating features into single layers in the model. You didn't specify a language here, and the above link is in R, but the basic code snippet is pretty readable about how to concatenate embedded categorical vectors with other features. embedding_size_weekday=3 embedding_size_bridge=2 ## 1 inp1 % layer_embedding(input_dim = 7+1, output_dim = embedding_size_weekday, input_length = 1, name="embedding_weekday") %>% layer_flatten() embedding_out2 % layer_embedding(input_dim = 4+1, output_dim = embedding_size_bridge, input_length = 1, name="embedding_bridge") %>% layer_flatten() ## 3 combined_model % layer_dense(units=32, activation = "relu") %>% layer_dropout(0.3) %>% layer_dense(units=10, activation = "relu") %>% layer_dropout(0.15) %>% layer_dense(units=1) ## 4 model % compile(loss = "mean_squared_error", optimizer = "sgd", metric="accuracy") summary(model) In terms of what the actual keras code for layering multiple inputs should look like, I think the docs have a nice example of your different options: (Probably best to experiment here to find out what works for you) import keras input1 = keras.layers.Input(shape=(16,)) x1 = keras.layers.Dense(8, activation='relu')(input1) input2 = keras.layers.Input(shape=(32,)) x2 = keras.layers.Dense(8, activation='relu')(input2) # equivalent to added = keras.layers.add([x1, x2]) added = keras.layers.Add()([x1, x2]) out = keras.layers.Dense(4)(added) model = keras.models.Model(inputs=[input1, input2], outputs=out) # two inputs
