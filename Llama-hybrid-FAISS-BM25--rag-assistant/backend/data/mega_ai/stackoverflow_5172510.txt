[site]: stackoverflow
[post_id]: 5172510
[parent_id]: 
[tags]: 
Should I choose F# to develop a distributed server platform?

I am currently in the research phase for a new distributed server framework that will be used for real time simulations (20,000+ clients). We had made a decision to use C#/.NET as our platform, but someone recently passed me some articles on F# and, from the surface, it looks like a great tool to use in developing the server. I am looking for some thoughts from someone who has used F# to solve large, real world, problems. Is F# a good tool for this? What are the pitfalls? We are dealing with lots of interacting messages and a lot of changing state, although that will likely live in a DB cloud of some kind. Functional programming seems to shine in dealing with massive parallelism and distributed computing, but seems to discourage changing any kind of state. Is F# going to stick around? It concerns me that it is so new and I don’t want to tie myself to a dying platform (J# anyone?)… Are there any large, real world solutions (preferably servers) that are using F#? Does F# work well with large teams of engineers? I am sure the answer to this is a simple yes, but I am still very unfamiliar with the language/tools. Thank you for your time.
