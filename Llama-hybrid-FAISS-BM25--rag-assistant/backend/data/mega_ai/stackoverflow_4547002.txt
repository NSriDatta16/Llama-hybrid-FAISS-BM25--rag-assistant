[site]: stackoverflow
[post_id]: 4547002
[parent_id]: 4546825
[tags]: 
By reading your first paragraph, I am sensing that you are trying to mix business exceptions (ItemNotFoundException, UserNotAuthorizedException) with class level assertions (checking arguments, application state, null pointers). Business Exceptions are like the contracts to the API and should be meaningful to the business like you have. It is better to create and throw them from where they belong. This not only is a good encapsulation but PRESERVES the correct stack trace thus helping to debug the problem easier. Assertions are mainly for internal logic verification and are there to find the logic errors, developers mistakes etc early in the test cycle than in the production. Ideally assertions are turned ON while development and testing and turned OFF in production. Preconditions, Postconditions and Invariants are 3 kinds of assertion categories. Learn more about Design By Contract . There is no real need to move the assertion checks to utility methods. Plan to use the Java's built-in assert keyword and enable them during development and testing. My suggestion for you is to use assert keyword for invariants and postcondition checks and use google-guava's Preconditions for checking preconditions. If you see that there are common validations being performed at multiple places then it is better to encapsulate them into its own class for e.g. AgeValidator, SalaryVaidator etc (DRY principle). Again no need to build your own framework here, use the standard java spec JSR 303 Bean Validation .
