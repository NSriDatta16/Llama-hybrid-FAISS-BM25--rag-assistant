[site]: stackoverflow
[post_id]: 1774518
[parent_id]: 1772069
[tags]: 
Traditional layering is only part of the solution. Since that was your question, though, I know many very large sites that layer by presentation, business logic and data access. However, there's much more that you could / should do, including: Tiering and division-of-labor: partition business logic between the web tier and the data tier in a maintainable way (usually implies using stored procedures instead of dynamic SQL) Refactoring your application. In many sites, pages get large and unmanageable due to insufficient attention to continual refactoring. Use approaches such as custom user controls, Master pages, common page base class, ASP.NET skins, page adapters, control adapters, HttpModules, etc, to move your application-wide logic into centrally manageable locations. Careful adherence to OO design principles. Strategic use of events to help ensure consistent separation of concern.
