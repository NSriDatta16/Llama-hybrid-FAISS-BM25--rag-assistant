[site]: stackoverflow
[post_id]: 3273055
[parent_id]: 3272998
[tags]: 
I have actually done this before, so I can give you the exact code :D This is only the drawing part, you implement the touch events (in a separate class, otherwise remove the self.userInteractionEnabled = NO; in .m file The BOOL dragged tells the LineView if the line should be drawn. LineView.h #import @interface LineView : UIView { CGPoint start; CGPoint end; BOOL dragged; } @property CGPoint start, end; @property BOOL dragged; @end LineView.m #import "LineView.h" @implementation LineView @synthesize start, end, dragged; - (id)initWithFrame:(CGRect)frame { if (self = [super initWithFrame: frame]) { self.userInteractionEnabled = NO; self.backgroundColor = [UIColor clearColor]; } return self; } #pragma mark Setters -(void) setStart: (CGPoint) s { start = s; [self setNeedsDisplay]; } -(void) setEnd: (CGPoint) e { end = e; [self setNeedsDisplay]; } #define LINE_COLOR [UIColor redColor] #define CIRCLE_COLOR [UIColor redColor] #define LINE_WIDTH 5 #define CIRCLE_RADIUS 10 - (void)drawRect:(CGRect)rect { CGContextRef c = UIGraphicsGetCurrentContext(); if(dragged) { [LINE_COLOR setStroke]; CGContextMoveToPoint(c, start.x, start.y); CGContextAddLineToPoint(c, end.x, end.y); CGContextSetLineWidth(c, LINE_WIDTH); CGContextClosePath(c); CGContextStrokePath(c); [CIRCLE_COLOR setFill]; CGContextAddArc(c, start.x, start.y, CIRCLE_RADIUS, 0, M_PI*2, YES); CGContextClosePath(c); CGContextFillPath(c); CGContextAddArc(c, end.x, end.y, CIRCLE_RADIUS, 0, M_PI*2, YES); CGContextClosePath(c); CGContextFillPath(c); } } - (void)dealloc { [super dealloc]; } @end
