[site]: stackoverflow
[post_id]: 4948730
[parent_id]: 4947954
[tags]: 
In my opinion, you are correct that is probably the tag you will use most often to explain what exactly your method is meant to do. But if your methods have good, useful names, then expect that most developers will use that to make some assumptions about how the method should behave. For example, they assume that calling "GetName" probably has no side effects, and returns the name of the instance, regardless of what the comments say. With that in mind, rather than writing paragraphs about what the method should be doing, I tend to focus my comments on any "gotcha"s that I am aware of, knowing that if someone uses my code, and it's not working the way they think it should, the first thing they will do is look at the documentation hoping for some guidance. Below are just a few examples of how I've used the various tags. - Indicate that a return value may be null. Describe semantic difference between returning null vs. string.Empty - Great for explaining "gotcha"s, e.g. "The reader must be in a ready state, and the cursor positioned at the correct position to begin reading. The caller is responsible for closing the reader after this method completes." I usually add these comments as needed after fussing with an API for half an hour before realizing some silly detail that wasn't obvious. - Good APIs should be easy to use, but sometimes you can't help it. This is great for giving guidance on how the method was intended to be used (although you can't guarantee that's how it will be used). See example below. var token = m_caller.GetAuthToken(); var result = m_caller.Call(method, token); I'm sure there are hundreds of other examples I could dream up, but I hope that helps get you pointed in the right direction!
