[site]: stackoverflow
[post_id]: 5340921
[parent_id]: 5337416
[tags]: 
I have done something similar recently and approached it as a 3 step process. There may be a more Rails way of doing this, but this way worked for me and was painless. I used an iterative approach and took advantage of the fact that MongoDB is actually a very relational friendly document storage system. I started with a relational setup using Mongoid's Relational Associations (bottom of page) syntax of references_many and referenced_in. Once things were working I refactored iteratively into a more document oriented approach. 1. Dump the existing database straight to MongoDB I used my existing models to brute force dump the SQL tables and data into parallel MongoDB documents. I just slammed everything I had into them without worrying about naming or relationships; a strict 1:1 mapping of tables to collections. This was a one time process for me. Once everything is here steps 2 and 3 takes this data and transforms it into the structure that I wanted. I could also change my models as I no longer needed to interact with the relational system. You may want to create some sort of copy of the existing models in case you need to go back to this step for any reason. 2. Migrate the data For the next step I went with a custom ruby shell app. Again there may be a better way to do this with Rails features, but I went with a straight forward transaction script style approach. I used the raw MongoDB Ruby driver , read the database created in step 1, and transformed the source collections into the shapes that I wanted. I used a separate database for the destination from the one created in step 1 because I iteratively modified this script to become more and more document oriented as I refactored my model in step 3. 3. Refactor models as needed I refactored my model to run against the database created in step 2, made my tests pass, and then went back to the script in step 2 and made changes to make the database more document oriented. I iterated over steps 2 and 3 until I had refactored my model and document layouts until I had a final result.
