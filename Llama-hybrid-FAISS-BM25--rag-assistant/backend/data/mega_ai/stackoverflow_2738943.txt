[site]: stackoverflow
[post_id]: 2738943
[parent_id]: 2737125
[tags]: 
I posted a demo for you here. Basically this cycles through each droppable position, so if you have a lot of them, it could really slow down mouse movement. Oh, and I added two variables you can adjust if you want to increase the proximity to the droppable. Adjust the xmargin and ymargin variables as desired. CSS .draggable { width: 90px; height: 90px; padding: 0.5em; position: relative; top: 0; left: 0; z-index: 2; } .droppable { width: 120px; height: 120px; padding: 0.5em; position: absolute; z-index: 1; } #drop1 { top: 150px; left: 300px; } #drop2 { top: 400px; left: 100px; } HTML Drag me to my target Drop here Drop here Script $(function(){ var xmargin = 10, ymargin = 10, drag = $('.draggable'), drop = $('.droppable'), dgw = drag.outerWidth() + xmargin, dgh = drag.outerHeight() + ymargin, pos = []; drop .droppable({ //hoverClass: 'ui-state-active', drop: function(event, ui) { $(this).addClass('ui-state-highlight').find('p').html('Dropped!'); } }) // set up droppable coordinates array (left, top, right, bottom) for each element .each(function(i){ var dropzone = drop.eq(i); var l = dropzone.position().left, t = dropzone.position().top, r = l + dropzone.outerWidth() + xmargin, b = t + dropzone.outerHeight() + ymargin; pos.push([l,t,r,b]); }); drag .draggable() // bind to drag event, or this could be placed inside the draggable function .bind( "drag", function(event,ui){ var l = ui.offset.left, t = ui.offset.top; // cycle through each droppable and compare current postion to droppable array drop.each(function(i){ if ( ( l + dgw ) > pos[i][0] && l pos[i][1] && t
