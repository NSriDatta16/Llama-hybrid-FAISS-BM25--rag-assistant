[site]: stackoverflow
[post_id]: 4727825
[parent_id]: 
[tags]: 
LINQ in Business Layer paging / sorting gridview in User layer

I have a gridview in my user layer that uses a business layer method as its datasource, and I want the gridview to support paging and sorting. When I returned an Ienumerable from the method, it will bring back all of the data. If I use Take/Skip to bring back only a page's worth, the gridview doesn't realize that there are many pages of data. When I change the Ienumerable to an IQueryable, the DataBind() fails because the data has already been disposed of. I think this problem has something to do with when the query actually executes and it may have to do with the filters I am applying to the query (see below). User Layer Code: grdSelectedQuestionaires.DataSource = assessment.FilteredAssessmentList(filter); grdSelectedQuestionaires.DataBind(); Business Layer Code: public IQueryable FilteredAssessmentList(AssessmentSearchFilter filter) { using (PAQcDataLayerDataContext dc = new PAQcDataLayerDataContext()) { var rows = ( from a in dc.vPAQSummaries select new Assessment() { PAQNumber = a.PAQNumber.Trim(), CustomerID = (int)a.CustomerID, Department = a.Department.Trim(), CustomerName = a.CustomerName.Trim(), DOTNumber = a.DOTNumber.Trim(), OrgName = a.OrgName.Trim(), DateEntered = a.DateEntered, GroupNumber = a.GroupNumber.Trim(), JobTitle = a.JobTitle.Trim(), FileNames = a.FileNames.Trim(), AnalystType = a.AnalystType.ToString(), Incumbents = a.Incumbents, }); // Filter by Customer ID if (filter.CustomerID > 0) { rows = rows.Where(r => r.CustomerID == filter.CustomerID); } else { rows = rows.Where(r => r.CustomerID != null); } // Filter by DOT Number if (!string.IsNullOrEmpty(filter.DOTNumberFrom)) { if (string.IsNullOrEmpty(filter.DOTNumberTo)) { rows = rows.Where(r => r.DOTNumber == filter.DOTNumberFrom); } else { rows = rows.Where(r => r.DOTNumber.CompareTo(filter.DOTNumberFrom) >= 0 && r.DOTNumber.CompareTo(filter.DOTNumberTo) r.OrgName.StartsWith(filter.OrgName)); } // Filter by Group if (!string.IsNullOrEmpty(filter.GroupNumberFrom)) { if (!string.IsNullOrEmpty(filter.GroupNumberTo)) { rows = rows.Where(r => r.GroupNumber == filter.GroupNumberFrom); } else { rows = rows.Where(r => r.GroupNumber.CompareTo(filter.GroupNumberFrom) >= 0 && r.GroupNumber.CompareTo(filter.GroupNumberTo) 0) { rows = rows.Skip(filter.Skip); } if (filter.Take > 0) { rows = rows.Take(filter.Take); } else { rows = rows.Take(100); } return rows.Distinct(); } } }
