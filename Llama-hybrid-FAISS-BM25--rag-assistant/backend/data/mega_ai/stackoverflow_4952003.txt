[site]: stackoverflow
[post_id]: 4952003
[parent_id]: 
[tags]: 
Is it a good habit to run in debug mode?

I saw a comment on another question (I forget which one) encouraging the asker to avoid testing his/her code in the debug harness unless strictly necessary, citing something to the effect of it acting as a crutch. There's certainly something to be said for developing the skill to deduce the cause of bugs without "direct" evidence. I'm quite a fan of debuggers myself (in fact, I tend to only run without if strictly necessary), but I got to thinking about the relative merits of each approach. Debugger Pros Starting with the obvious, takes less time to zero in on faults, exceptions and crashes Tracing provides a nice alternative to littering your code with commented-out print statements Performance overhead can give you extra wiggle room, i.e. if your program is responsive while debugging, it will almost definitely be so in the wild Debugger Cons Performance overhead can make iterations slower (Edit) Tunnel Vision : Debugging the symptom can distract you from deducing the cause when the crash occurs long after or far from the defect It may "help" you by initializing variables or otherwise masking bugs, leading to surprises later on Conversely, there's the odd bug that only crops up in a debug configuration; tracking it down may be a waste of effort (though, this is often indicative of a deeper, subtler problem that is worth fixing) These are general, of course--it varies wildly with language, environment and situation--but what are some other considerations?
