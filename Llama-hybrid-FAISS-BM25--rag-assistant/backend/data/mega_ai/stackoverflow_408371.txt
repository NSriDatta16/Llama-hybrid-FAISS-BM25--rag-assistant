[site]: stackoverflow
[post_id]: 408371
[parent_id]: 408316
[tags]: 
One very useful usage it to make test cases clearer, not only for the business analyst but for yourself/your team. When time passes and you've forgotten what the exact test case was all about, having LOP is very helpful. You can have the spec at hand, and even document the rules in source code comments, but those artifacts don't get executed. Code is! You can also make the program very clear, but more clearer than a "language oriented" description would be almost impossible. Consider this fictional fragment. NOTE Is not that java is LOP but there are some frameworks that whose intention is to do something like the following, that is, make a test case easier to follow. package a; import static a.Help.*; public class Test { public void test(){ Object value = ""; Object obtained = ""; assert that( expected( value , isEqualTo( obtained ) ) ); } } This is a very simple example. The value in this code is the line that gets executed says what the test is all about: assert that( expected( value , isEqualTo( obtained ) ) ); That is very clear, it reads: assert that expected value is equal to obtained Well this is very simple. But you can have any kind of business rule an just read it literally. assert client mortgage is processed when it reach... etc. etc Martin Fowler explains about this and mention Hamcrest a framework to do this. Here's the link ( I'm not completely sure if this where he talks about Hamcrest or is it another one :P sorry )
