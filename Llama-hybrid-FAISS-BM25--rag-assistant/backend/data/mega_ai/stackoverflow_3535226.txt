[site]: stackoverflow
[post_id]: 3535226
[parent_id]: 
[tags]: 
Linq to SQL vs Entity Data Model: Getting a stored proc to run

Was I was previously messing with Silverlight and RIA, I was using a an ADO.NET Entity Data Model and domain context. I'm teaching myself how to run a stored procedure from RIA, and could not get it to work with the previous setup so I then started to try out using the LINQ to SQL method. I did the following: Added the DBML Drag and dropped my table and example stored proc Saved the DBML and built and rebuilt the solution and project files. Create a Domain Service and attempt to add the dbml. Here is my DBML Here is my error. The Available DataContext/ObjectContext classes list shows up empty. I have rebuilt many times and even have restarted visual studio. So here are my questions: Is there an easy way to do a stored proc with ADO.Net that I was missing therfore I could skip adding a LINQtoSQL class. Am I missing something really simple to add the dbml class and add a stored proc that way. CODE ZipCodeDataClasses.dbml.layout ZipCodeDataClasses.designer.cs #pragma warning disable 1591 //------------------------------------------------------------------------------ // // This code was generated by a tool. // Runtime Version:4.0.30319.1 // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // //------------------------------------------------------------------------------ namespace StoredProcedureTest.Web { using System.Data.Linq; using System.Data.Linq.Mapping; using System.Data; using System.Collections.Generic; using System.Reflection; using System.Linq; using System.Linq.Expressions; using System.ComponentModel; using System; [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ZIPCODES")] public partial class ZipCodeDataClassesDataContext : System.Data.Linq.DataContext { private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource(); #region Extensibility Method Definitions partial void OnCreated(); #endregion public ZipCodeDataClassesDataContext() : base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ZIPCODESConnectionString"].ConnectionString, mappingSource) { OnCreated(); } public ZipCodeDataClassesDataContext(string connection) : base(connection, mappingSource) { OnCreated(); } public ZipCodeDataClassesDataContext(System.Data.IDbConnection connection) : base(connection, mappingSource) { OnCreated(); } public ZipCodeDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : base(connection, mappingSource) { OnCreated(); } public ZipCodeDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : base(connection, mappingSource) { OnCreated(); } public System.Data.Linq.Table ZipCodes { get { return this.GetTable (); } } [global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_GetCityByZip")] public int sp_GetCityByZip([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ZIP", DbType="NVarChar(10)")] string zIP, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Return", DbType="NVarChar(26)")] ref string @return) { IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), zIP, @return); @return = ((string)(result.GetParameterValue(1))); return ((int)(result.ReturnValue)); } } [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ZipCodes")] public partial class ZipCode { private string _City; private string _State; private int _Zip; public ZipCode() { } [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(25)")] public string City { get { return this._City; } set { if ((this._City != value)) { this._City = value; } } } [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(2)")] public string State { get { return this._State; } set { if ((this._State != value)) { this._State = value; } } } [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="Int NOT NULL")] public int Zip { get { return this._Zip; } set { if ((this._Zip != value)) { this._Zip = value; } } } } } #pragma warning restore 1591
