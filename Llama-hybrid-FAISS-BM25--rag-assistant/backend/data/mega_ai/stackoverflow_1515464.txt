[site]: stackoverflow
[post_id]: 1515464
[parent_id]: 1515295
[tags]: 
In your MouseDown event, determining whether the click has occurred within your rectangle is easy: if (rect.Contains(e.Location)) { // the user has clicked inside your rectangle } Drawing the "X" on the form is also easy: Graphics g = this.CreateGraphics(); g.DrawString("X", this.Font, SystemBrushes.WindowText, (float)e.X, (float)e.Y); However, the "X" in this case will not be persistent, meaning that if you drag another form over your form and then move it away, the "X" will not be there anymore. To draw a persistent "X", create a form-level Point variable like this: private Point? _Xlocation = null; Use your MouseDown event to set this variable if the user clicks in your Rectangle: if (rect.Contains(e.Location)) { _Xlocation = e.Location; this.Invalidate(); // this will fire the Paint event } Then, in your form's Paint event, draw the "X": if (_Xlocation != null) { e.Graphics.DrawString("X", this.Font, SystemBrushes.WindowText, (float)e.X, (float)e.Y); } else { e.Graphics.Clear(this.BackColor); } If you want the "X" to then disappear when the user lets go of the mouse button, just put this code in the MouseUp event: _Xlocation = null; this.Invalidate(); You can make this as much more complicated as you like. With this code, the "X" will be drawn just below and to the right of wherever you click on the form. If you want the "X" to be centered on the click location, you can use the Graphics object's MeasureString method to determine how high and how wide the "X" will be, and offset the DrawString location accordingly.
