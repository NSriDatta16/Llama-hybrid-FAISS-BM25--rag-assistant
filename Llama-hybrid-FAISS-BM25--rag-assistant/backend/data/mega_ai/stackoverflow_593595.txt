[site]: stackoverflow
[post_id]: 593595
[parent_id]: 593590
[tags]: 
The two are not the same. An architecture is more referring to modules (groups of classes). Encapsulation refers to hiding the inner workings of a class. You can have both if you design your system well enough. What you might need to be careful about is in clearly defining the separation of responsibility. As long as you are clear about what each module/layer is for, and specific about what each class does (and what each method of the class does), then you should be able to have a good design. I'm just speculating here, but you may be interested in the facade design pattern when designing an interface to a module. With respect to your comment below, the logic should definitely be in the employee class itself. I would question the logic in having a separate layer for business objects. It is often a temptation to define classes like "Employee" because they model real-world objects or concepts. However, your motivation for defining a class should not be "modelling a real-world object". You should define the purpose of your module (why do you have a business logic layer? To contain all the business logic.) and then put what you need in there. If the "Employee" class is the class that needs to calculate business logic, then it should go in the business logic class. If not, then it should go in your business objects class (whatever that's for). If it needs to do two different things, and thus could fit in two layers, then consider separating it into two classes - remember that your objects don't need to model real-world things. Robert C Martin suggests defining your classes such that the boundaries of the classes are the boundaries of purpose.
