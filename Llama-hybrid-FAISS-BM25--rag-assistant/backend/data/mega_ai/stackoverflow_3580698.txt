[site]: stackoverflow
[post_id]: 3580698
[parent_id]: 
[tags]: 
Managed DirectX Camera Issue

I am a bit new to the DirectX library and I am wondering if anyone can help me with a camera issue. In my main form I load a set of polygon data representing a 3D object and then pass that polygon data to another form and want to draw the polygon as a triangle list. Unfortunately I cannot seem to get the camera to either 1) Have the proper viewing frustum or 2) Get the camera to properly focus and size the image. The polygon data is being loaded as world coordinate data. Below is the code that initializes the secondary form, directx, camera, etc. #region Public Members /// /// Default Constructor. /// public STLViewer() { // Set the form size, form text, icon this.ClientSize = new Size(500, 500); this.Text = "Object Name: " + stlFile.SolidName + ", Polygon Count: " + stlFile.GetPolygons().Count; this.Icon = RetrieveFormIcon(); // Change our drawing style so there is no drawing happening outside our main form this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.Opaque, true); // Get our vertex data in a prepared format verts = PrepareObjectForRender(); } /// /// This function is responsible for retrieving the specified /// icon from the assembly. /// /// Form icon private Icon RetrieveFormIcon() { Assembly assembly = Assembly.GetExecutingAssembly(); Stream str = assembly.GetManifestResourceStream(icon); return new Icon(str); } #endregion #region Main Line public static void Main() { // Create our form object STLViewer stlViewer = new STLViewer(); // Initialize D3D if (stlViewer.InitializeDirect3D() == false) { MessageBox.Show("Could not initialize Direct3D.", "Error"); return; } // Display our form stlViewer.Show(); // Main message loop while (stlViewer.Created) { // Keep rendering the image until the form is terminated //stlViewer.Render(); // Handle aall events here: keyboard, mouse, etc. Application.DoEvents(); } } #endregion #region Rendering protected override void OnPaint(PaintEventArgs e) { if (directXDevice.RenderState.FillMode == FillMode.Solid) { directXDevice.RenderState.FillMode = FillMode.WireFrame; } // Clear the window to black directXDevice.Clear(ClearFlags.Target, Color.Black, 1.0f, 0); // Setup the camera for viewing SetupCamera(); // Begin the rendering process directXDevice.BeginScene(); // Set the vertext format directXDevice.VertexFormat = CustomVertex.PositionColored.Format; // Draw our vertices directXDevice.DrawUserPrimitives(PrimitiveType.TriangleList, stlFile.GetPolygons().Count, verts); // End rendering and present the drawing to the screen directXDevice.EndScene(); directXDevice.Present(); // Force our form to refresh its viewing area this.Invalidate(); } /// /// This function is responsible for rendering the image /// to the screen. /// private void Render() { // IF we cannot connect to a device then return if (directXDevice == null) { return; } // Get our vertex data in a prepared format CustomVertex.PositionColored[] verts = PrepareObjectForRender(); // Clear the window to black directXDevice.Clear(ClearFlags.Target, Color.Black, 1.0f, 0); // Setup the camera for viewing SetupCamera(); // Begin the rendering process directXDevice.BeginScene(); // Set the vertext format directXDevice.VertexFormat = CustomVertex.PositionColored.Format; // Draw our vertices directXDevice.DrawUserPrimitives(PrimitiveType.TriangleList, stlFile.GetPolygons().Count, verts); // End rendering and present the drawing to the screen directXDevice.EndScene(); directXDevice.Present(); } /// /// This function is responsible for creating the necessary /// DirectX objects, setting the vertices and normals, colors /// and/or materials for the object so we can draw it in the /// form. /// private CustomVertex.PositionColored[] PrepareObjectForRender() { // List to hold our colored vertices List vertices = new List (); // List to hold our polygons, contained within the STL file List polygons = stlFile.GetPolygons(); // Create a custom vertex that will be used to hold our vertices CustomVertex.PositionColored custVert = new CustomVertex.PositionColored(); // Iterate through our polygons and pulled a vertex list for (int i = 0; i
