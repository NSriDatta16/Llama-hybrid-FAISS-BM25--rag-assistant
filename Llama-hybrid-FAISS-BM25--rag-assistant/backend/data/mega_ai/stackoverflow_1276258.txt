[site]: stackoverflow
[post_id]: 1276258
[parent_id]: 1275624
[tags]: 
In recent versions of Maven you can activate the debugger by running mvnDebug rather than mvn , the mvnDebug bat/sh file sets MVN__DEBUG_OPTS and passes them to the java.exe. The values passed are: set MAVEN_DEBUG_OPTS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 If that isn't sufficient, this may work (note I've not yet tested this, I'll update once I have). Maven reads properties prefixed with "env." from the environment, you may be able to set environment variables by prefixing with the same. i.e.: dev -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 Update: The surefire plugin allows you to specify system properties to be used during test execution. The configuration is as follows: org.apache.maven.plugins maven-surefire-plugin 2.4.2 propertyName propertyValue If none of those work for you, it is possible to write a small plugin configured in your profile that binds to the initialize phase and sets your variables. The plugin would have configuration like this: name.seller.rich maven-environment-plugin 0.0.1 set-properties initialize set-properties -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 during execution the plugin would set each passed property using System.setProperty(). If the first two aren't suitable or don't work this should address your issue.
