[site]: stackoverflow
[post_id]: 761372
[parent_id]: 758473
[tags]: 
My advice: get comfortable with lots of different frameworks, and know how to get your hands dirty and write it yourself, too. You'll develop some favorite ways to work, but you'll get a good understanding for what the tools can do, and what they can't. And you'll also develop an eye for when is the right time to use a framework, and when is the right time not to. I've found that JSF and Facelets are definitely worth the hassle, if you can survive the learning curve. It's pretty steep, but when you figure it out, it's very easy to work with. They make managing session and application scope objects much easier to deal with than just raw JSP and servlets, and I've found that I can write cleaner Java when I don't have to think about the web in the business logic. In general, I find that the frameworks help me to organize my thoughts (and by extension, my code) in a consistent, easy to understand way. Facelets, in particular, is my favorite web template engine. I love the fact that my pages are valid XML, and that I don't have scriptlets all over the place. It makes the code much cleaner and easier to follow if you know the framework. There's that learning curve again. By the way, adding AJAX to Facelets is easy if you use something like RichFaces or IceFaces. They have pre-built ajax components that you can easily add to your application. That said, it's not the best for all projects, YMMV, and so on. At the end of the day, using any framework is a judgment call. If it's not helping you solve your problem, then it's not worth it. Don't fight with your tools, use them correctly. If the tool is in your way, use a different tool. JSF and facelets are really not very good choices on a very small application. They don't really come into their own until you have a fairly complex domain model and complex business logic. Basically, you need the project to be complicated enough to overcome the amount of boilerplate code you need to write to get going.
