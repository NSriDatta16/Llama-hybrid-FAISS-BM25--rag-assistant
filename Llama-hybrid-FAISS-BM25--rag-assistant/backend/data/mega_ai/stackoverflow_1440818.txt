[site]: stackoverflow
[post_id]: 1440818
[parent_id]: 1440748
[tags]: 
Java's Scanner class (introduced in Java 1.5) might be a good place to start. Here's an example that I think does what you want (updated to include char counting capability) public class Test { public static void main(String[] args) { String[] data = new String[] { "(X)", "(p a b)", "(func (func2 a) (func3 X Y))", "(equal eve (mother cain))", "((b X) Y)", "((((b W) X) Y) Z)" }; for (String line:data) { int headIdx = 0; if (line.charAt(1) == '(') { headIdx = countBrackets(line); } else { String head = ""; Scanner s = new Scanner(line); s.useDelimiter("[)|(| ]"); head = s.next(); headIdx = line.indexOf(head) + head.length() - 1; } System.out.println(headIdx); } } private static int countBrackets(String line) { int bracketCount = 0; int charCount = 0; for (int i = 1; i Output: 1 1 4 5 5 13 It's not a very elegant solution, but regexes can't count (i.e. brackets). I'd be thinking about using a parser generator if there's any more complexity in there :)
