[site]: stackoverflow
[post_id]: 5729480
[parent_id]: 5729208
[tags]: 
Oh, since you mentioned WCF RIA I suppose your boss was talking about these patterns in terms of resource acquisition. You could also talk about laziness in terms of instantiation (objects), loading (shared libraries), state (object state initialization), evaluation (expressions not being evaluated until the result is used). Same thing probably applies to the other pattern names in different use cases. If its about resource management then... These are patterns related to object acquisition and are described in detail in [POSA3 Pattern Oriented Software Architecture: Patterns for Resource Management, vol 3][1]. Resource management (you can think objects but resource is a better term) is organized in four stages: lookup, acquisition, lifecycle and release. The patterns you are asking for are resource acquisition patterns. After you successfully lookup a resource, you have 4 strategies to choose from for acquiring the resource: explicit acquisition, when the resource is to be fully acquired when requested; this is no pattern but a normal usecase lazy acquisition, when the acquisition of the resource can be deferred in a later point in time, at the moment when the object properties are accessed (you will return a proxy object initially). eager acquisition strategy allows you do predictive resource acquisition (that is, you want to acquire immediately a set of resources that you know will be asked for in the lifecycle of initial resource being requested partial acquisition strategy allows you to do staged acquisition; think of big-memory/uknown-size objects, initially you will want to acquire the object only partially
