[site]: stackoverflow
[post_id]: 2096718
[parent_id]: 2096668
[tags]: 
I can hardly remember the last time I used either one directly. Mostly, they're useful for doing things like implementing your own container classes -- for example, if you want to allocate a node in a linked list, you have pointers between the nodes, and if you want to modify a pointer that's been passed to your function, you need either a reference or a pointer to that pointer. Of course, you can also use pointers to pointers to create pseudo-2D arrays as well. If you really need a square array they're not a particularly good choice, but if you want a "ragged array" (e.g. an array of strings, each of a potentially different length) it's useful. Pointers to pointers are nearly unavoidable in C, but in C++ the standard library already has container classes -- for example, if you want a dynamic array of dynamically-sized strings in C, nearly your only choice is to start with a char ** , and allocate the pieces dynamically. In C++, you usually want to use a std::vector instead. You still run into them when/if you decide to implement your own containers, but that's a fairly rare occurrence (at least that you have to start from raw pointers and such instead of building on top of existing containers).
