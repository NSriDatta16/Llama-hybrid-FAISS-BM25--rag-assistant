[site]: crossvalidated
[post_id]: 454712
[parent_id]: 
[tags]: 
My CNN model is predicting with 100% confidence and only one class

I am training my CNN image classification model with keras and tensorflow backend. It has two outputs: dog, cat. I trained it with 12k images per class and then convert it from .h5 to .mlmodel for Apples CoreML for use in my iOS application. After I train my model, in my app no matter what picture I give the model it predicts only one class and with 100% confidence. I once managed to get a picture that it predicted was 100% cat and 14% dog. But it mostly just predicts that it's a cat. I am stuck now as to why it is doing that. I hope that someone can help me figure this out. Here is my keras code: # importing libraries from keras.preprocessing.image import ImageDataGenerator from keras.models import Sequential from keras.layers import Conv2D, MaxPooling2D from keras.layers import Activation, Dropout, Flatten, Dense from keras import backend as K img_width, img_height = 224, 224 train_data_dir = 'data/train/' validation_data_dir = 'data/validate/' nb_train_samples = 100 nb_validation_samples = 20 epochs = 20 batch_size = 10 if K.image_data_format() == 'channels_first': input_shape = (3, img_width, img_height) else: input_shape = (img_width, img_height, 3) model = Sequential() model.add(Conv2D(32, (2, 2), input_shape = input_shape)) model.add(Activation('relu')) model.add(MaxPooling2D(pool_size =(2, 2))) model.add(Conv2D(32, (2, 2))) model.add(Activation('relu')) model.add(MaxPooling2D(pool_size =(2, 2))) model.add(Flatten()) model.add(Dense(32)) model.add(Activation('relu')) model.add(Dropout(0.5)) model.add(Dense(2)) model.add(Activation('sigmoid')) model.summary() model.compile(loss = 'sparse_categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy']) train_datagen = ImageDataGenerator() test_datagen = ImageDataGenerator() train_generator = train_datagen.flow_from_directory(train_data_dir, target_size =(img_width, img_height), batch_size = batch_size, class_mode ='binary') validation_generator = test_datagen.flow_from_directory( validation_data_dir, target_size =(img_width, img_height), batch_size = batch_size, class_mode ='binary') model.fit_generator(train_generator, steps_per_epoch = nb_train_samples // batch_size, epochs = epochs, validation_data = validation_generator, validation_steps = nb_validation_samples // batch_size) model.save('ModelsH5/catndog_small.h5') print("DONE")
