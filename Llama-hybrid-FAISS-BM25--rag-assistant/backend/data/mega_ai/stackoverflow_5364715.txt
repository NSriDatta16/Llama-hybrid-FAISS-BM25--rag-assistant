[site]: stackoverflow
[post_id]: 5364715
[parent_id]: 5364547
[tags]: 
There is a reason virtual is not the default for methods in C# [link to interview with Anders Hejlsberg]. Hejlsberg is actually talking about framework API design. He doesn't say anything about Line of Business applications. Therefore, his rules apply less in LOB applications. Since you're using an O/RM, you're probably writing a LOB appliation. often it is expressive to annotate my classes with sealed for all the usual reasons [link to Eric Lippert's blog]. You are referencing one of Eric Lippert's articles, who wrote that article in the context of his work at the C# compiler team. The general Framework Design Guidelines actually contain an opposite guideline: DO NOT seal classes without having a good reason to do so. [paragraph 6.3] In other words, what Eric Lippert is saying is not the common rule. Personally, when I am writing LOB applications, I actually seal my classes and write non-virtual methods whenever possible. However, this has nothing to do with the change of introducing breaking changes in a later release, because this is almost solely a framework design problem. No, I do this because it makes it easier for me to make assumptions about my code. In other words: it makes my code more maintainable. However, I have absolutely no problem what so ever unsealing a class or virtualizing a method when I need to do this. The main reason for me to do so is to allow my code to be testable. Apparently you need this flexibility too and since you are writing a LOB application, just be practical and remember that: They're More Like Guidelines Anyway
