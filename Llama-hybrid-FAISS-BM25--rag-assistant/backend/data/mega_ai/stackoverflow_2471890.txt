[site]: stackoverflow
[post_id]: 2471890
[parent_id]: 2471755
[tags]: 
I think BFS would usually be faster an average. Read the wiki pages for DFS and BFS . The reason I say BFS is faster is because it has the property of reaching nodes in order of their distance from your starting node. So if your graph has N nodes and you want to search for node N and node 1 , which is the node you start your search form, is linked to N , then you will find it immediately. DFS might expand the whole graph before this happens however. DFS will only be faster if you get lucky, while BFS will be faster if the nodes you search for are close to your starting node. In short, they both depend on the input, but I would choose BFS. DFS is also harder to code without recursion, which makes BFS a bit faster in practice, since it is an iterative algorithm. If you can normalize your nodes (number them from 1 to 10 000 and access them by number), then you can easily keep Exists[i] = true if node i is in the graph and false otherwise , giving you O(1) lookup time. Otherwise, consider using a hash table if normalization is not possible or you don't want to do it.
