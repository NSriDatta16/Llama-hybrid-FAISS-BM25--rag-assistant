[site]: stackoverflow
[post_id]: 5423512
[parent_id]: 5414777
[tags]: 
Create a movieclip - a vector shape inside each swf, that is the same shape as your clickable area. Set the alpha to 0% on the vector's fill color. Give it and instance name of something like activeArea , and assign your event listener to that instead of the outer shell moveiclip. Another approach that might work is to use hitTestObject() on a MOUSE_DOWN event, which would allow you to choose to ignore the transparency. EDIT Hard to tell exactly what you are trying to do without seeing it. I didn't actually compile this so I'm not sure if this will work just the way it is, but in theory it should be close. Its a slightly different approach than you are using. I used Loader() instead of SWFLoader, and cleaned up the idea a little bit. As a side note, you should avoid the use of root in as3. var _swfLoader:Loader; var loadimage = foreground_list[i].imagelocation + foreground_list[i].image; var loader:SWFLoader = new SWFLoader(loadimage,{container:tn_mc,x:current_tn_x,y:current_tn_y,name:current_name,alpha:1,width:current_tn_w,height:current_tn_h,rotation:0}); loader.load(); tn_mc.buttonMode = true; tn_mc.addEventListener( MouseEvent.MOUSE_DOWN, tn_down ); addChild( tn_mc ); function tn_down(e:MouseEvent):void { tn_mc.addEventListener( MouseEvent.MOUSE_UP, tn_up ); switch (MovieClip(this.root).PointerTool) { case "move" : stage.addEventListener(MouseEvent.MOUSE_UP, stage_up ); e.target.startDrag(); break; case "play" : _swfLoader = new Loader(); var req:URLRequest = new URLRequest(foreground_list.imagelocation + foreground_list.playimage); _swfLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, animationLoaded); _swfLoader.load(req); break; default : //Some other animation break; } } function tn_up(e:MouseEvent):void { tn_mc.removeEventListener( MouseEvent.MOUSE_UP, tn_up ); } function animationLoaded(evt:Event):void { _swfLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, animationLoaded); tn_mc.removeChildAt(0); var loadedSwf = evt.target.content; loadedSwf.x = foreground_list.setx; loadedSwf.y = foreground_list.sety; loadedSwf.width = foreground_list.setw; loadedSwf.height = foreground_list.seth; loadedSwf.rotation = 0; loadedSwf.addEventListener(MouseEvent.MOUSE_DOWN, onAnimationStart); // might wanna add theses to an array to keep track of them and run clean up later on // now add to some display list } function onAnimationStart(evt:MouseEvent):void { loadedSwf.addEventListener(MouseEvent.MOUSE_UP, onAnimationStop); // play your animation or whatever else evt.target.play(); } function onAnimationStop(evt:MouseEvent):void { loadedSwf.removeEventListener(MouseEvent.MOUSE_UP, onAnimationStop); // stop your animation or whatever else evt.target.stop(); }
