[site]: stackoverflow
[post_id]: 1528274
[parent_id]: 1527938
[tags]: 
The "obvious" way can be described as " key = random; while (key already selected) { key = random } ". It works , but the birthday paradox implies our odds of key collision increase at an alarming exponential rate in proportion to the number of keys already used. So, selecting a random key takes on average exponentially longer with each new key, and is very likely to get trapped in an infinite or arbitrarily long loop eventually. You're much better off generating your list of keys up front as follows: Hold a table UniqueKeys containing all the precomputed strings '00000' .. '99999' in addition to a keyOrder field which is always initialized to newId() on insert. keyOrder should be indexed. When you need to "generate" a string, you can SELECT TOP 1 key FROM UniqueKeys ORDER BY keyOrder , which will pull the next available key in nearly constant time. Now that you have a key, you can delete it from UniqueKeys to prevent it from being reused. Every six months, truncate and regenerate your UniqueKeys table. Advantage of this style is the relatively straightforward implementation, nearly constant time to generate the next key, and avoiding the nasty "check if exists in a loop" scenario described above.
