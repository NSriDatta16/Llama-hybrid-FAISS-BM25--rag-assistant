[site]: stackoverflow
[post_id]: 1253473
[parent_id]: 
[tags]: 
Is Implementing a HTTP, XML based CRUD Layer a good idea?

I'm making a CRUD "layer" for an application. This will be a simple CRUD application that, for example, stores User information, Favorite links etc. and not do operations on "fact-type" data. It's actually only to store things like Users, Permissions, Rules, Policies etc. that other parts of the application pick up to perform work. Overall, I want three things from this effort: (a) Single entry point to access CRUD functions (b) Ability to use any "client" to use the CRUD layer (c) "easy" extensibility of the CRUD where new object may be added and old objects may be changed (new fields added, nothing else removed or changed). A typical CRUD scenario? I'm thinking I should make a Java library, expose it to clients via "REST-type-URL" ( meaning just the REST-URL-way, like "users/delete/2" ) API via HTTP. This way, I can meet all 3 goals - CRUD layer can be on Linux, client can be in Windows. In the CRUD layer, I will be using various things to make this happen : ORM, a web-server and other tools. It seems the right way, but I can't help wondering that maybe this approach is too idealistic and may not work when I start implementing. Is what I'm thinking of doing some overly-simplistic view of cramming a set of API methods into a XML fragment? ( note that I'm not doing a XML-RPC, rather these XML fragments will be data only - and the XML will be sent to specific URLs such as users/update/2, which will process the XML after confirming that the XML contains information for a Users profile ) Am I right in my thinking? Does this idea have even a remote chance of working? Any help appreciated!
