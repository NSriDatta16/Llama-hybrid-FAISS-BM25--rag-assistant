[site]: stackoverflow
[post_id]: 903305
[parent_id]: 903300
[tags]: 
In this case, I'd just create an index on the GUID. Thousands of sessions a day is a completely trivial load for a modern database. Some notes: If you create the GUID index as non-clustered, the index will be small and probably be cached in memory. By default most databases cluster on primary key. A GUID column is larger than an integer. But this is hardly a big issue nowadays. And you need a GUID for the application. An index on a GUID is just like an index on a string, for example Last Name. That works efficiently. The B-tree of an index on a GUID is harder to balance than an index on an identity column. (But not harder than an index on Last Name.) This effect can be countered by starting with a low fill factor, and reorganizing the index in a weekly job. This is a micro-optimization for a databases that handle a million inserts an hour or more.
