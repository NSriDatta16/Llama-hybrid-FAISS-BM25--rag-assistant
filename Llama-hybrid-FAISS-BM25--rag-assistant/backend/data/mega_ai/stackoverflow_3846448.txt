[site]: stackoverflow
[post_id]: 3846448
[parent_id]: 
[tags]: 
Convert Drawing.Bitmap to Imaging.Metafile - Pixel Perfect

I'm trying to convert a Drawing.Bitmap to an Imaging.Metafile for the purposes of inserting the metafile into a Forms.RichTextBox . (For reference, embedding a bitmap in a metafile is the recommended practice for putting a bitmap into richtext (see Rich Text Format (RTF) Specification Version 1.9.1, p. 149.) Unfortunately it also appears to be the only way to embed an image into a Forms.RichTextBox, as I can't get any device-dependent or device-independent methods of inserting an bitmap into a RichTextBox to work.) Later, I must retrieve the pixel-data from the metafile. I require that the pixels of the metafile exactly match those of the bitmap. When I perform the conversion, however, the pixels are slightly altered. (Perhaps due to GDI Image Color Management (ICM)?) Here is my technique: public static Imaging.Metafile BitmapToMetafileViaGraphicsDrawImage(Forms.RichTextBox rtfBox, Drawing.Bitmap bitmap) { Imaging.Metafile metafile; using (IO.MemoryStream stream = new IO.MemoryStream()) using (Drawing.Graphics rtfBoxGraphics = rtfBox.CreateGraphics()) { IntPtr pDeviceContext = rtfBoxGraphics.GetHdc(); metafile = new Imaging.Metafile(stream, pDeviceContext); using (Drawing.Graphics imageGraphics = Drawing.Graphics.FromImage(metafile)) { //imageGraphics.DrawImage(bitmap, new Drawing.Rectangle(0, 0, bitmap.Width, bitmap.Height)); imageGraphics.DrawImageUnscaled(bitmap, new Drawing.Rectangle(0, 0, bitmap.Width, bitmap.Height)); } rtfBoxGraphics.ReleaseHdc(pDeviceContext); } return metafile; } In this case I access the pixels of the metafile in this way: metafile.Save(stream, Imaging.ImageFormat.Png); Bitmap bitmap = new Bitmap(stream, false); bitmap.GetPixel(x, y); I have also tried to use a BitBlt technique with no success. BitBlt technique: [System.Runtime.InteropServices.DllImportAttribute("gdi32.dll")] static extern int BitBlt( IntPtr hdcDest, // handle to destination DC (device context) int nXDest, // x-coord of destination upper-left corner int nYDest, // y-coord of destination upper-left corner int nWidth, // width of destination rectangle int nHeight, // height of destination rectangle IntPtr hdcSrc, // handle to source DC int nXSrc, // x-coordinate of source upper-left corner int nYSrc, // y-coordinate of source upper-left corner System.Int32 dwRop // raster operation code ); public static Imaging.Metafile BitmapToMetafileViaBitBlt(Forms.RichTextBox rtfBox, Drawing.Bitmap bitmap) { const int SrcCopy = 0xcc0020; Graphics bitmapGraphics = Graphics.FromImage(bitmap); IntPtr pBitmapDeviceContext = bitmapGraphics.GetHdc(); RectangleF rect = new RectangleF(new PointF(0, 0), new SizeF(bitmap.Width, bitmap.Height)); Imaging.Metafile metafile = new Imaging.Metafile(pBitmapDeviceContext, rect); Graphics metafileGraphics = Graphics.FromImage(metafile); IntPtr metafileDeviceContext = metafileGraphics.GetHdc(); BitBlt(pBitmapDeviceContext, 0, 0, bitmap.Width, bitmap.Height, metafileDeviceContext, 0, 0, SrcCopy); return metafile; } I'm not even sure this technique is correctly copying the pixel-data. This technique fails when I try to access the data in the metafile later: IntPtr h = metafile.GetHenhmetafile(); // ArgumentException "Parameter is not valid." byte[] data; uint size = GetEnhMetaFileBits(h, 0, out data); data = new byte[size]; GetEnhMetaFileBits(h, size, out data); stream = new IO.MemoryStream(data); How do I convert a bitmap into a metafile without altering the pixels, and then retrieve the pixel-data again later? Thank you! Setting Bitmap Resolution This is how I try to set the bitmap resolution so that the metafile's resolution matches: Drawing.Bitmap bitmap = new Drawing.Bitmap(width, height, Imaging.PixelFormat.Format32bppArgb); // Use 32-bit pixels so that each component (ARGB) matches up with a byte // Try setting the resolution to see if that helps with conversion to/from metafiles Drawing.Graphics rtfGraphics = rtfBox.CreateGraphics(); bitmap.SetResolution(rtfGraphics.DpiX, rtfGraphics.DpiY); // Set the pixel data ... // Return the bitmap return bitmap; The rtfBox is the same one sent to BitmapToMetafileViaGraphicsDrawImage.
