[site]: stackoverflow
[post_id]: 1920501
[parent_id]: 1919097
[tags]: 
The definition of a list in Erlang is given in the manual - specifically Section 2.10 In Erlang the only thing you really need to know about improper lists is how to avoid them, and the way to do that is very simple - it is all down to the first 'thing' that you are going to build your list on. The following all create proper lists: A = []. B = [term()]. C = [term(), term(), term()]. In all these cases the syntax ensures that there is a hidden 'empty' tail which matches to '[]' sort of at the end.... So from them the following operations all produce a proper list: X = [term() | A]. Y = [term() | B]. Z = [term() | C]. They are all operations which add a new head to a proper list. What makes is useful is that you can feed each of X , Y or Z into a function like: func([], Acc) -> Acc; func([H | T], Acc) -> NewAcc = do_something(H), func(T, [NewAcc | Acc]). And they will rip through the list and terminate on the top clause when the hidden empty list at the tail is all that is left. The problem comes when your base list has been improperly made, like so: D = [term1() | term2()]. % term2() is any term except a list This list doesn't have the hidden empty list as the terminal tail, it has a term... From here on downwards is mince as Robert Virding pointed out in the comments So how do you write a terminal clause for it? What makes it infuriating is that there is no way to see if a list is improper by inspecting it... print the damn thing out it looks good... So you end up creating an improper base list, doing some stuff on it, passing it around, and then suddenly kabloowie you have a crash miles from where the error is and you pull your hair and scream and shout... But you should be using the dialyzer to sniff these little beasts out for you. Apologies Following Robert's comment I tried printing out an improper list and, lo and behold, it is obvious: (arrian@localhost)5>A = [1, 2, 3, 4]. [1,2,3,4] (arrian@localhost)5> B = [1, 2, 3 | 4]. [1,2,3|4] (arrian@localhost)6> io:format("A is ~p~nB is ~p~n", [A, B]). A is [1,2,3,4] B is [1,2,3|4] I had spent some time hunting an improper list once and had convinced myself it was invsible, well Ah ken noo !
