[site]: stackoverflow
[post_id]: 4403908
[parent_id]: 4384346
[tags]: 
So, I wound up rolling my own solution to this. Not sure if it was the best or most elegant approach, but I actually just wound up: Abstracting all common environment stuff into env.rb Using Cucumber profiles which would require a specific environment file (such as firefox.rb) that required env.rb and then set the default driver for Capybara to the appropriate driver. Wrote a big ol' thor class with tasks that bundle up a bunch of cucumber commands and call out to run the bad boy with the proper profile. Wrote an 'all_browsers' task which bundles up the commands, then calls out to each specific driver task, so I can now have one task that runs any set of scenarios I supply on all the supported drivers. Working like a charm and I think might have actually wound up better in the end than anything I was trying above, as within the Thor file I was able to add things like a benchmarking option, as well as whether or not to split the feature run up into multiple threads. Still curious if anyone else came up with a solution for this though. cucumber.yaml: Here, the all_features file just does a glob of everything ending in .feature, because if I pulled in the entire features directory it would pull in everything beneath it, including all the profile files, etc, which isn't what I wanted since each profile file sets the default capybara driver to a different value. Once you specify -r as an option to cucumber, all autoloading of any file is halted. default: --format pretty chrome: --format pretty -r features/support/profiles/chrome.rb -r features/all_features -r features/step_definitions firefox: --format pretty -r features/support/profiles/firefox.rb -r features/all_features -r features/step_definitions celerity: --format pretty -r features/support/profiles/celerity.rb -r features/all_features -r features/step_definitions firefox.rb (the 'profile' file): require File.dirname(__FILE__) + "/../env.rb" Capybara.configure do |config| config.default_driver = :selenium_firefox end selenium_firefox.rb (where I register the driver, and set some tag capability which I've wound up not needing now, as the @selenium_firefox tag was part of my original attempt at this posted in the question): # Register a specific selenium driver for firefox Capybara.register_driver :selenium_firefox do |app| Capybara::Driver::Selenium.new(app, :browser => :firefox) end # Allows the use of a tag @selenium_firefox before a scenario to run it in selenium with firefox Before('@selenium_firefox') do Capybara.current_driver = :selenium_firefox end feature_runner.thor: require 'benchmark' class FeatureRunner :boolean, :default => true, :aliases => "-v" method_option :tags, :type => :string method_option :formatter, :type => :string method_option :other_cucumber_args, :type => :string } desc "all_drivers_runner", "Run features in all available browsers" method_option :benchmark, :type => :boolean, :default => false method_option :threaded, :type => :boolean, :default => true feature_runner_options.call # Set up common feature runner options defined above def all_drivers_runner if options[:threaded] feature_run = lambda { thread_pool = [] t = Thread.new do |n| invoke :firefox_runner end thread_pool Where everything wound up, in relation to the root directory: . |____cucumber.yml |____features | |____all_features.rb | |____google_search.feature | |____step_definitions | | |____google_steps.rb | | |____web_steps.rb | |____support | | |____custom_formatters | | | |____blah.rb | | |____env.rb | | |____paths.rb | | |____profiles | | | |____celerity.rb | | | |____chrome.rb | | | |____firefox.rb | | |____selenium_drivers | | | |____selenium_chrome.rb | | | |____selenium_firefox.rb | | | |____selenium_ie.rb | | | |____selenium_remote.rb | | |____selenium_drivers.rb |____tasks | |____feature_runner.thor | |____server_task.rb Output of thor -T feature_runner -------------- thor feature_runner:all_drivers_runner # Run features in all available browsers thor feature_runner:celerity_runner # Run features on celerity thor feature_runner:chrome_runner # Run features on chrome thor feature_runner:firefox_runner # Run features on firefox Now I can run something like: thor feature_runner:all_drivers_runner --benchmark This would run all features on all capybara drivers in a thread for each driver, benchmnarking the results. Or thor feature_runner:celerity_runner This would run all features only on celerity. But I can now also supply some other options to the thor command which get passed onto cucumber such as: --tags=@all_browsers --formatter=hotpants --other_cucumber_args="--dry-run --guess --etc" What a feature file can now look like: Feature: Start up browser @all_browsers Scenario: Search Google Given I am on the home page When I fill in the search bar with "Capybara" And I press "Search" Then I should see "Capybara" Seems like a lot of setup, but now if I tag a feature with @all_browsers, I can build out a suite to test against all capybara drivers, in a multi-threaded environment, with one thor command: thor feature_runner:all_drivers_runner --threaded --tags=@all_browsers Or build out a smoke test suite that runs in celerity: thor feature_runner:celerity_runner --tags=@smoke_test
