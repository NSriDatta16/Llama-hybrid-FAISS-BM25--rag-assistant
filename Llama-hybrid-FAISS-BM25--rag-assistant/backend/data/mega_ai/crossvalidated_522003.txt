[site]: crossvalidated
[post_id]: 522003
[parent_id]: 521257
[tags]: 
I dput() the data at the bottom in case someone wants to take a look. ARIMA has a hard time dealing with "long" seasonality, especially if you have only observed two seasonal cycles. "Forecasting with long seasonal periods" by Rob Hyndman is very enlightening reading. Note that the parameter seasonal=TRUE does not force auto.arima() to use a seasonal model, it only allows it. Use D=1 to force a seasonal model (see Seasonality not taken account of in auto.arima() ). Here is what happens then: > model_sarima model_sarima Series: arrivals ARIMA(2,1,1)(0,1,0)[180] Coefficients: ar1 ar2 ma1 0.0627 -0.2052 -0.7837 s.e. 0.0895 0.0827 0.0615 sigma^2 estimated as 116.5: log likelihood=-686.48 AIC=1380.96 AICc=1381.19 BIC=1393.73 > plot(forecast(model_sarima,h=100),las=1) As you see, we now have a quite different (and seasonal) model. Now the forecasts definitely look more, ahem, sophisticated. Whether they are more accurate is doubtful. For one, some of the point forecasts are negative, which you presumably do not want. Actually, the vast prediction intervals give a hint that auto.arima() does not think this forecast is very useful. Here is an equally dubious stlf forecast: plot(stlf(arrivals,h=100),las=1) An alternative would be to fit a smooth bump function to your two years of history, then extrapolate this forward. But whatever you do, before you forecast you should really think about that conspicuous drop at the end of your series, which is also visible in a seasonplot. Is this some fundamental change, and will your time series go back to normal, or not, and when? That kind of thinking about the drivers of your series can be far more useful than tweaking ARIMA models. seasonplot(arrivals,col=1:2,pch=19,las=1) legend("topright",lwd=1,pch=19,col=1:2,legend=2018:2019) Data: arrivals
