[site]: stackoverflow
[post_id]: 1410297
[parent_id]: 1406995
[tags]: 
Writing C++, you should maintain balance between reusability (e.g. reuse existing algorithms and data structures) and readability. onebyone was close, but his solution can be further improved: template struct average { T total; int count; mutable bool calculated; mutable T average_value; average & operator+=(T const & value) { total += value; ++count; calculated = false; } T value() const { if(!calculated) { calculated = true; average_value = total / count; } return average_value; } }; std::map > averages; BOOST_FOREACH(MYSTRUCT &element, v) { averages[element.a] += element.b; } BOOST_FOREACH(MYSTRUCT &element, v) { element.b = averages[element.a].value(); } Bonus points for having reusable "average" type.
