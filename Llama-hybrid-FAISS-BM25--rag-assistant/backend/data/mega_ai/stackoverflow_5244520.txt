[site]: stackoverflow
[post_id]: 5244520
[parent_id]: 
[tags]: 
C# Calculation of moving median of time series SortedList - improve performance?

I have a method that calculates the moving median value of a time series. Like a moving average, it use a fixed window or period (sometimes referred to as the look back period). If the period is 10, it will created an array of the first 10 values (0-9), then find the median value of them. It will repeat this, incrementing the window by 1 step (values 1-10 now) and so on... hence the moving part of this. This is process is exactly the same as a moving average. The median value is found by: Sorting the values of an array If there is an odd number of values in the array, take the mid value. The median of a sorted array of 5 values would be the 3rd value. If there is an even number of values in the array, take the two values on each side of the mid and average them. The median of a sorted array of 6 values would be the (2nd + 3rd) / 2. I have created a function that calculates this by populating a List , calling List<>.Sort() , and then finding the appropriate values. Computational it is correct, but I was wonder if there ws a way to improve the performance of this calculation. Perhaps by hand-rolling a sort on an double[] rather than using a list. My implementation is as follows: using System; using System.Collections.Generic; using System.Linq; using System.Text; namespace Moving_Median_TimeSeries { class Program { static void Main(string[] args) { // created a a sample test time series of 10 days DateTime Today = DateTime.Now; var TimeSeries = new SortedList (); for (int i = 0; i MovingMedian(SortedList TimeSeries, int period) { var result = new SortedList (); for (int i = 0; i = period - 1) { // add all of the values used in the calc to a list... var values = new List (); for (int x = i; x > i - period; x--) values.Add(TimeSeries.Values[x]); // ... and then sort the list
