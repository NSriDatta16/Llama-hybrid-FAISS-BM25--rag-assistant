[site]: stackoverflow
[post_id]: 2037794
[parent_id]: 2037765
[tags]: 
I would strongly recommend using UTF-8 internally in your application, using regular old char* or std::string for data storage. For interfacing with APIs that use a different encoding (ASCII, UTF-16, etc.), I'd recommend using libiconv , which is licensed under the LGPL. Example usage: class TempWstring { public: TempWstring(const char *str) { assert(sUTF8toUTF16 != (iconv_t)-1); size_t inBytesLeft = strlen(str); size_t outBytesLeft = 2 * (inBytesLeft + 1); // worst case mStr = new char[outBytesLeft]; char *outBuf = mStr; int result = iconv(sUTF8toUTF16, &str, &inBytesLeft, &outBuf, &outBytesLeft); assert(result == 0 && inBytesLeft == 0); } ~TempWstring() { delete [] mStr; } const wchar_t *Str() const { return (wchar_t *)mStr; } static void Init() { sUTF8toUTF16 = iconv_open("UTF-16LE", "UTF-8"); assert(sUTF8toUTF16 != (iconv_t)-1); } static void Shutdown() { int err = iconv_close(sUTF8toUTF16); assert(err == 0); } private: char *mStr; static iconv_t sUTF8toUTF16; }; iconv_t TempWstring::sUTF8toUTF16 = (iconv_t)-1; // At program startup: TempWstring::Init(); // At program termination: TempWstring::Shutdown(); // Now, to convert a UTF-8 string to a UTF-16 string, just do this: TempWstring x("Entr\xc3\xa9""e"); // "Entr√©e" const wchar_t *ws = x.Str(); // valid until x goes out of scope // A less contrived example: HWND hwnd = CreateWindowW(L"class name", TempWstring("UTF-8 window title").Str(), dwStyle, x, y, width, height, parent, menu, hInstance, lpParam);
