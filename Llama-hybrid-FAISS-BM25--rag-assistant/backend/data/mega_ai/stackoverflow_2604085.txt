[site]: stackoverflow
[post_id]: 2604085
[parent_id]: 926404
[tags]: 
I have started using the following practice: Create copy constructors in your classes but make them protected. The reason for this is that creating objects using the new operator can lead to various issues when working with derived objects. Create a Copyable interface as follows: public interface Copyable { public T copy(); } Have the copy method of classes implementing Copyable call the protected copy constructor. Derived classes can then call super.Xxx(obj_to_copy); to leverage the base class copy constructor and adding additional functionality as required. The fact that Java supports covariant return type makes this work. Derived classes simply implement the copy() method as appropriate and return a type-safe value for their particular class.
