[site]: stackoverflow
[post_id]: 2912382
[parent_id]: 2911924
[tags]: 
The java.util.Date class is a container that holds a number of milliseconds since 1 January 1970, 00:00:00 UTC. Note that class Date doesn't know anyting about timezones. Use class Calendar if you need to work with timezones. ( edit 19-Jan-2017: if you are using Java 8, use the new date and time API in package java.time ). Class Date is not really suited for holding an hour number (for example 13:00 or 18:00) without a date. It's simply not made for that purpose, so if you try to use it like that, as you seem to be doing, you'll run into a number of problems and your solution won't be elegant. If you forget about using class Date to store the working hours and just use integers, this will be much simpler: Date userDate = ...; TimeZone userTimeZone = ...; int companyWorkStartHour = 13; int companyWorkEndHour = 18; Calendar cal = Calendar.getInstance(); cal.setTime(userDate); cal.setTimeZone(userTimeZone); int hour = cal.get(Calendar.HOUR_OF_DAY); boolean withinCompanyHours = (hour >= companyWorkStartHour && hour If you also want to take minutes (not just hours) into account, you could do something like this: int companyWorkStart = 1300; int companyWorkEnd = 1830; int time = cal.get(Calendar.HOUR_OF_DAY) * 100 + cal.get(Calendar.MINUTE); boolean withinCompanyHours = (time >= companyWorkStart && time
