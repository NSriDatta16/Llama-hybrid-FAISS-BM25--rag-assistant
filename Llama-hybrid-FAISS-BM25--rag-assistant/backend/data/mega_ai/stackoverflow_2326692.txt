[site]: stackoverflow
[post_id]: 2326692
[parent_id]: 2326653
[tags]: 
As written, the class/methods are garbage. However, I can see a situation in which a similar pattern might be used legitimately: public interface IFileStorage { byte[] ReadBinaryFile(string fileName); void WriteBinaryFile(string fileName, byte[] fileContents); } public class LocalFileStorage : IFileStorage { ... } public class IsolatedFileStorage : IFileStorage { ... } public class DatabaseFileStorage : IFileStorage { ... } In other words, if you wanted to support different kinds of storage, then you might actually wrap very simple methods in order to implement a generic abstraction. As written, though, the class doesn't implement any interface, and the methods are static, so it's pretty much useless. If you're trying to support the above pattern, then refactor; otherwise, get rid of it.
