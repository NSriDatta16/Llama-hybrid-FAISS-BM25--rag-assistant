[site]: stackoverflow
[post_id]: 5098484
[parent_id]: 
[tags]: 
Populating a listview with images from the SD card (not a set amount of items in list)

Basically I'm trying to make a contact list like the one provided by Android. When populating the listview with items, using a SimpleCursorAdapter you can easily get all the names to appear in the R.id.textview of each item: private void fillData() { mCursor = mDbAdapter.fetchAllContacts(); startManagingCursor(mCursor); String[] from = new String[] {DBAdapter.KEY_NAME}; int[] to = new int[] {R.id.contact_name}; SimpleCursorAdapter contacts = new SimpleCursorAdapter(this, R.layout.contact_view, mCursor, from, to); this.setListAdapter(contacts); } Something like that. I've searched and found sample code for both getting images from online, or displaying a set number of images in the items (for instance you know you have 5 items so you get the 5 matching images). But I really don't know where I'd begin on getting images from my SD card, and displaying them in the proper item. The images are named according to the id of the contact, so I do have the means to call the proper image. A push in the right direction would be much appreciated, thank you! EDIT: @Jeff Gilfelt gave a great answer, but I went ahead and spoke too soon when saying I could figure out the rest on my own... haha. I have a default image declared in the xml for the contacts like Android does. When I implement the new Adapter, it like compresses the items into nothing, I figure because it finds an empty bitmap @ that location. So I did the following: @Override public void setViewImage(ImageView v, String id) { File root = Environment.getExternalStorageDirectory(); File path = new File(root, "path/images/thumbs/"+id+".jpg"); if(path.exists()) { Bitmap bitmap = BitmapStatic.getThumb(id); v.setImageBitmap(bitmap); } else { super.setViewImage(v, id); } } But this doesn't help either. Any ideas? EDIT2: Figured out the above problem. Simply go like this: else { Resources res = mContext.getResources(); Drawable drawable = res.getDrawable(R.drawable.default); v.setImageDrawable(drawable); } Hope this helps others! Remember for this solution you will have to add a Context member var, and the line mContext = context in the constructor.
