[site]: stackoverflow
[post_id]: 2207601
[parent_id]: 2207327
[tags]: 
The first drawback I see is that you need to grant your application service with ALTER rights. This implies that your security model needs careful attention as the application will be able to not only add fields but to drop and rename them as well and create some tables (at least for MySQL). Secondly, how would you distinct fields that are required per user? Or can the fields created by user A be accessed by user B? Note that the cardinality of the columns may also significantly grow. If every user adds 2 fields, we are already talking about 200 fields. Personally, I would use one of the two approaches or a mix of them: Using a serialized field I would add one text field to the table in which I would store a serialized dictionary or dictionaries: { user_1: {key1: val1, key2, val2,...}, user_2: {key1: val1, key2, val2,...}, ... } The drawback is that the values are not easily searchable. Using a multi-type name/value table fields table: user_id: int field_name: varchar(100) type: enum('INT', 'REAL', 'STRING') values table: field_id: int row_id: int # the main table row id int_value: int float_value: float text_value: text Of course, it requires a join and is a bit more complicated to implement but far more generic and, if indexed properly, quite efficient.
