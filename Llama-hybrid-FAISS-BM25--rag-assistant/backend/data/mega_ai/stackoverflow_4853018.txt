[site]: stackoverflow
[post_id]: 4853018
[parent_id]: 4850452
[tags]: 
My first inclination is to tell you that this one function getData is one of the most nasty and ugliest piece of code. You are asking how to unit test this. Well guess what my recommendation is going to be? Refactor. In order to refactor this code, you will need a coverage test . The reasons for refactoring are many: Dependency on third-party framework. Dependency on external service. getData has too many responsibilites. a. Login in to external service using third-party framework. b. Create query for external service. c. Parse query response from external service. How have you isolated your code from changes to either third-party framework and from external service? You really should take a look at Michael Feather's Book. Working Effectively with Legacy Code [EDIT] My point to you (spoiler coming), is that with this code you can never get a true unit test. It is because of the dependency on external service. The unit test has no control over the service or the data it returns. A unit test should be able to execute such that every time it executes it's outcome is consistent. With an external service this may not be the case. YOU HAVE NO CONTROL OVER WHAT THE EXTERNAL SERVICE RETURNS. What do you do if the service is down? Unit test FAIL . What if the results are returned changes? Unit test FAIL . Unit tests results must remain consistent from execution to execution. Otherwise it is not a unit test.
