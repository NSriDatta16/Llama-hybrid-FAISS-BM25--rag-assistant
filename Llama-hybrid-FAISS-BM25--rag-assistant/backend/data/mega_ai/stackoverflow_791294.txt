[site]: stackoverflow
[post_id]: 791294
[parent_id]: 787655
[tags]: 
Lots to report on here. I have some results, and am still looking for good answers. I've found a couple of tools that help: VisualVM (with BTrace , or the built in Trace) claims to help with tracing, but I haven't been able to find any tool that shows timing on method calls. YourKit is reputed to be useful; I've asked for an open source license. The most useful thing I found is Hibernate's built in statistics. If you set hibernate.generate_statistics true in your properties, you can send sessionFactory.getStatistics() , and see detailed statistics on what objects have been stored and retrieved and what affects the caches are having. I found one of the answers I wanted in the qeuryStatistics, which reports for each compiled query, the cache hits and misses, the number of times the query has run, how many rows were returned, and the average, max and min execution times. These timings made it abundantly clear where the time was going. I then did some reading on caching. Razenha's suggestion was right on. [I'll mark his answer as right for now.] I added hibernate.cache.use_query_cache true to my properties, and added query.setCacheable(true); to most of my queries. I also added to a few of my .hbm.xml files. Now most of my statistics are showing a vast predominance of cache hits, and the performance is vastly better. I'd still like some tools to help me trace execution timing so I can attack the worst problems rather than the most obvious, but this is a big help. Maybe one of the tracing tools above will turn out to help.
