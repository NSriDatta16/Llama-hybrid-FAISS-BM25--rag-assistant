[site]: stackoverflow
[post_id]: 5401202
[parent_id]: 5384294
[tags]: 
I encapsulate the image capturing into a class 'Capture', maybe you could give it a try. Below are main.cpp, capture.h and capture.cpp, enjoy it :) main.cpp #include "capture.h" #include using namespace std; int main(int argc, char* argv[]) { // --- read file --- // //Capture capture("test.wmv", windowSize, windowSize); // --- read camera --- // CvSize windowSize = cvSize(640, 480); Capture capture(2, windowSize, windowSize); while (1) { capture.captureNext(); for (int i = 0; i caputure.h #ifndef _CAPTURE_H_ #define _CAPTURE_H_ #include #include #include #include #include #include using namespace std; enum VIDEO_TYPE { CAMMERA = 0, VIDEOFILE }; class Capture { public: Capture(int num, CvSize dispSize, CvSize resolutionSize); Capture(string fileName, CvSize dispSize, CvSize resolutionSize); int channelNum; vector channelframeList; void captureNext(); ~Capture(); private: string m_fileName; vector m_channelList; CvSize m_resolutioSize; CvSize m_displaySize; void initChannelList(VIDEO_TYPE type); void initChannelImgList(CvSize sz); IplImage* getNextVideoFrame(CvCapture* pCapture); }; #endif capture.cpp #include "capture.h" Capture::Capture(int num, CvSize dispSize, CvSize resolutionSize) { channelNum = num; m_fileName = ""; m_resolutioSize = resolutionSize; m_channelList.resize(channelNum); channelframeList.resize(channelNum); initChannelList(CAMMERA); initChannelImgList(dispSize); } Capture::Capture(string fileName, CvSize dispSize, CvSize resolutionSize) { channelNum = 1; m_fileName = fileName; m_resolutioSize = resolutionSize; m_channelList.resize(channelNum); channelframeList.resize(channelNum); initChannelList(VIDEOFILE); initChannelImgList(dispSize); } void Capture::captureNext() { for (int i = 0; i
