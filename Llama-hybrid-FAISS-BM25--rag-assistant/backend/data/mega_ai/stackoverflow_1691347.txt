[site]: stackoverflow
[post_id]: 1691347
[parent_id]: 1691270
[tags]: 
My experience show next possible sources of bad requirements: Users / clients often don't know what they want. The possible way to handle this either means have good business analysts who could perform required analyze or have good ready product which could suit this user (or not). Analysts can't provide appropriate quality of requirements. Yes, it happens. Hire better analysts / technology experts but before failure, not after . Test requirements, analyze usage cases, draw state an sequence diagrams as early as possible to understand user cases coverage and so on. In other word this is related to general modelling. Well, there is possibility of bad translation from marketing requirements / model into technical specifications. Design quality problem (implementation can't meet requirements). What should be done to overcome these problems? Let's allow engineers to provide feedbacks, let's not close requirements and make them flexible as possible. Often even with generally good consistent requirements we face some low level hardware limitation on implementation stage and need to track changes back. From other side let's understand customers, not only technologies. I saw number of projects with large parts of work thrown away just because they look good for developers but not for customers. The better communications with customer you have the lower is possibility of such cases. My understanding is process should allow flexible requirements change during all the stages but from other side should make all of this work trackable and limit scope to minimum that required. The problem is to balance between all of this. At least my suggestion is we should move to shortest development cycles to lower all the risks.
