[site]: stackoverflow
[post_id]: 3923534
[parent_id]: 3922848
[tags]: 
In Java, the size of an array is not part of its type. Or to put it another way, all array types with a given base type are the same. Furthermore, you cannot a method signature that places restrictions on the size of an array typed parameter or result. This means that you are left with the coding the method to test (in your case) the length of the array it is about to return. This is probably not going to help you much, since I assume that you are trying leverage static typing to enforce the "tripleness" of your arrays. From this perspective @matt b's answer is on the money, though you could make do it in a way that still gives you arrays (of length 3): public class AdapterTriple { private Adapter[] adapters; /** * This constructor may throw an exception */ public AdapterTriple(Adapter[] adapters) { if (adapters.length != 3) { throw new IllegalArgumentException("array length is wrong"); } this.adapters = adapters; } /** * This constructor won't throw an exception (apart from Errors) */ public AdapterTriple(Adapter adapter1, Adapter adapter2, Adapter adapter3) { this.adapters = adapters = new Adapters[] { adapter1, adapter2, adapter3}; } /** * @return an array of 3 adapters. */ public Adapter[] { return adapters; } } In summary, you cannot enforce array size constraints statically in Java. You have to do it dynamically, but you can take steps to make runtime errors unlikely.
