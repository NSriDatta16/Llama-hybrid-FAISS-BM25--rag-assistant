[site]: stackoverflow
[post_id]: 100896
[parent_id]: 90002
[tags]: 
My answer to this conundrum is to have 100% line coverage of the code you can test and 0% line coverage of the code you can't test. My current practice in Python is to divide my .py modules into two folders: app1/ and app2/ and when running unit tests calculate the coverage of those two folders and visually check (I must automate this someday) that app1 has 100% coverage and app2 has 0% coverage. When/if I find that these numbers differ from standard I investigage and alter the design of the code so that coverage conforms to the standard. This does mean that I can recommend achieving 100% line coverage of library code. I also occasionally review app2/ to see if I could possible test any code there, and If I can I move it into app1/ Now I'm not too worried about the aggregate coverage because that can vary wildly depending on the size of the project, but generally I've seen 70% to over 90%. With python, I should be able to devise a smoke test which could automatically run my app while measuring coverage and hopefully gain an aggreagate of 100% when combining the smoke test with unittest figures.
