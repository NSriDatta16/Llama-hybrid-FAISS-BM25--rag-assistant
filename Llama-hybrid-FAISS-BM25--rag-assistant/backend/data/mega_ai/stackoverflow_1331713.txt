[site]: stackoverflow
[post_id]: 1331713
[parent_id]: 1331587
[tags]: 
This page explains a number of ways to annotate HTML in this manner, but none of them are very satisfactory. Still, they are pretty much all you've got. Although that page isn't a terribly good summary, there are errors and it misunderstands what ‘unobtrusive’ JavaScript means. For example it is in fact perfectly valid to put a script element inside body — just not directly inside a table element. You could put all the script fragments at the bottom of the table, or put each row in its own table, or even, with some limitations if you are intending to mutate the DOM, inside the row in question. Setting “id="comment-123"” then scanning for all rows with an id starting with ‘comment-’ is indeed good for your particular case. For setting non-identifying extra info attributes, you could use either HTML5 data-attributes or hack it into the classname using eg. “class="comment type-foo data-bar"”. Of course both IDs and classnames have their limits about what characters you can use, but it's possible to encode any string down to valid strings. For example, you could use a custom URL-style encoding to hide non-alphanumeric characters: ... function getClassAttr(el, name) { var prefix= name+'-'; var classes= el.className.split(' '); for (var i= classes.length; i-->0;) { if (classes[i].substring(0, prefix.length)==prefix) { var value= classes[i].substring(prefix.length); return decodeURIComponent(value.split('_').join('%')); } } return null; } var greeting= getClassAttr(tr, 'greeting'); // "Hello! ☺" You can even store complex non-string values in this way, by encoding them JavaScript or JSON strings then retrieving them using exec (or JSON.parse where available). However, if you are putting anything non-trivial in there it soon gets messy. That's where you may prefer comments. You can fit anything in here except the sequence '--', which is easily escaped if it happens to come up in a string. ... function getLastComment(node) { var results= []; for (var i= node.childNodes.length; i-->0;) if (node.childNodes[i]==8) return node.childNodes[i]; return null; } var user= getLastComment(tr).user; The summary warns that this may not be guaranteed to work because XML parsers may discard comments, but then DOM Level 3 LS parsers must keep them by default, and every browser and major XML library so far does.
