[site]: stackoverflow
[post_id]: 5667846
[parent_id]: 
[tags]: 
Struts2 select tag save and recall issue

I am getting confused trying to use the struts2 tag. I have followed several examples and they all seem to have the same usage pattern, but this doesn't work for me (below is all of the code that is relevant). Basically, the struts2 select drop down allows me to display the initial list and save the value, but does not get displayed correctly when I bring the page up to edit the object. Once the page is displayed, all select values display the default instead of the expected value. If I modify the select value and save the page again, it will correctly save the value. Somewhere, the tag is not properly setting the SELECTED value of the option list. I am able to view the correct change being persisted to the database, so I know the action is correctly receiving the object. I believe the problem lies somewhere within the line of the JSP, but I may be wrong. It seems like all of the pieces of this page work except for setting the proper value of the drop down when the object is recalled. Where I expect this public class MemberAction extends AbstractAction { private static final long serialVersionUID = 1L; private Service lifeInsuranceStatusService; // Code removed for brevity... public List getLifeInsuranceStatuses() { return lifeInsuranceStatusService.getObjects().getResponse(); } public Service getLifeInsuranceStatusService() { return lifeInsuranceStatusService; } public void setLifeInsuranceStatusService(Service lifeInsuranceStatusService) { this.lifeInsuranceStatusService = lifeInsuranceStatusService; } } My JSP page looks like the following: "> Add Life Insurance Coverage... And my model looks like: public class Member extends Person { private static final long serialVersionUID = 1L; private List lifeInsuranceCoverages; public List getLifeInsuranceCoverages() { if (lifeInsuranceCoverages == null) { lifeInsuranceCoverages = new ArrayList (); } return lifeInsuranceCoverages; } public LifeInsuranceCoverage getActiveLifeInsuranceCoverage() { if (lifeInsuranceCoverages == null || lifeInsuranceCoverages.size() lifeInsuranceCoverages) { this.lifeInsuranceCoverages = lifeInsuranceCoverages; for (LifeInsuranceCoverage lifeInsuranceCoverage : this.lifeInsuranceCoverages) { lifeInsuranceCoverage.setMember(this); } } public void addLifeInsuranceCoverage(LifeInsuranceCoverage lifeInsuranceCoverage) { lifeInsuranceCoverage.setMember(this); getLifeInsuranceCoverages().add(lifeInsuranceCoverage); } public void removeLifeInsuranceCoverage(LifeInsuranceCoverage lifeInsuranceCoverage) { getLifeInsuranceCoverages().remove(lifeInsuranceCoverage); lifeInsuranceCoverage.setMember(null); } } ... and ... public class LifeInsuranceCoverage extends AbstractDomainObject { private static final long serialVersionUID = 1L; private Member member; private LifeInsuranceStatus lifeInsuranceStatus; public LifeInsuranceStatus getLifeInsuranceStatus() { return lifeInsuranceStatus; } public void setLifeInsuranceStatus(LifeInsuranceStatus lifeInsuranceStatus) { this.lifeInsuranceStatus = lifeInsuranceStatus; } public Member getMember() { return member; } public void setMember(Member member) { this.member = member; } } ... and ... public class LifeInsuranceStatus extends AbstractDomainObject { private static final long serialVersionUID = 1L; private String status; public String getStatus() { return status; } public void setStatus(String status) { this.status = status; } } ... and also ... public abstract class AbstractDomainObject implements DomainObject { private static final long serialVersionUID = 1L; private Long oid; public Long getOid() { return oid; } public void setOid(Long oid) { this.oid = oid; } }
