[site]: stackoverflow
[post_id]: 4496287
[parent_id]: 4496245
[tags]: 
In the last case (class C), you create a property called "a" the first time the magic method is called; thereafter the magic method won't be called, it will just access the property; this is why it isn't as slow as the first case, class A. The next question is why is case B slower than case C. I'm guessing that it's happening at the OS level; I reversed the test order so that it tests C B A rather than A B C and suddenly test case C is slower than B, so I'm reasonably certain that the performance win there is outside of PHP; from my reasoning in the first paragraph, it stands to reason that all other things being equal test case C should be fractionally slower than test case B (as there will be one call to the magic method, then all the rest are equal). Note also that (for me anyway) in this example A is always faster than B on 5.2.10 and on 5.3.3. EDIT I think that the question title is distracting from interesting issue here; the performance differences (whatever they are) are unrelated to the magic __get method. The following example illustrates this more simply, without bothering about the __get confusing things. Instead we create the dynamic property in the constructor; then the only difference is whether the property is declared first (e.g. public $a ) or created dynamically when the value is assigned. $className = $argv[1]; class A { public function __construct() { $this->a = 5; } } class B extends A { public $a; } $a = new $className; $start = microtime(true); for ($i=0; $i a; $end = microtime(true); echo (($end - $start) * 1000) ." msec\n";
