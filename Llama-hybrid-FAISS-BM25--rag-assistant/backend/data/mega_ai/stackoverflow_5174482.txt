[site]: stackoverflow
[post_id]: 5174482
[parent_id]: 5174127
[tags]: 
Disclaimer: I have not ever used PhantomReference. However, I did read this article and this javadoc page , and so "Is adding it to a list like this needed? [...] (maybe the Game.phantomReferenceQueue keeps a reference to it?)": As per the javadoc page: "Reference queues, to which registered reference objects are appended by the garbage collector after the appropriate reachability changes are detected.". So I believe that no, you shouldn't add it the List, since the Queue will automatically have it added by the garbage collector. I think you have to rephrase a little bit your question - I don't understand what the List is for, i.e. I don't understand the last paragraph. But if you're using the list in order to know if the phantomReference is gc'ed then no, you should not be using the list at all, that's what the ReferenceQueue is there for. Moreover, the List will prevent the phantomReference from being gc'ed! Edit: Read the title of your post again. To answer the title question by itself: No, because a PhantomReference enters the ReferenceQueue after it has been gc'ed - so by definition it cannot be stopped from being gc'ed. To quote the first link: "The only use for such a reference [note: he means PhantomReference] is keeping track of when it gets enqueued into a ReferenceQueue, as at that point you know the object to which it pointed is dead" Edit #2: I also think your code is wrong in that you should be initialising the phantom reference as follows (see a simple example here ): PhantomReference scenePhantomRef = new PhantomReference(scene, phantomQueue); where scene is the ScenePhantomReference from your code (i.e. you should refactor your code so that ScenePhantomReference is name e.g. Scene , you instantiate it as scene and then use the line above to get a handle on a PhantomReference for that object).
