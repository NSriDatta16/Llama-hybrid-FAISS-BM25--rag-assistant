[site]: stackoverflow
[post_id]: 3203695
[parent_id]: 3203664
[tags]: 
arrayList == null if there are no instance of the class ArrayList assigned to the variable arrayList (note the upercase for classes and the lowercase for variables). If, at anytime, you do arrayList = new ArrayList() then arrayList != null because is pointing to an instance of the class ArrayList If you want to know if the list is empty, do if(arrayList != null && !arrayList.isEmpty()) { //has items here. The fact that has items does not mean that the items are != null. //You have to check the nullity for every item } else { // either there is no instance of ArrayList in arrayList or the list is empty. } If you don't want null items in your list, I'd suggest you to extend the ArrayList class with your own, for example: public class NotNullArrayList extends ArrayList{ @Override public boolean add(Object o) { if(o==null) throw new IllegalArgumentException("Cannot add null items to the list"); else return super.add(o); } } Or maybe you can extend it to have a method inside your own class that re-defines the concept of "empty List". public class NullIsEmptyArrayList extends ArrayList{ @Override public boolean isEmpty() if(super.isEmpty()) return true; else{ //Iterate through the items to see if all of them are null. //You can use any of the algorithms in the other responses. Return true if all are null, false otherwise. //You can short-circuit to return false when you find the first item not null, so it will improve performance. } } The last two approaches are more Object-Oriented, more elegant and reusable solutions. Updated with Jeff suggestion IAE instead of NPE.
