[site]: stackoverflow
[post_id]: 836824
[parent_id]: 836699
[tags]: 
Couple of things: Most PHP projects that utilize a database connection represent that database using a [Singleton pattern][1], if you aren't sure what this is, read up on it. Typically I define my database connections in a configuration file which can easily be changed between environments (development, stage, production). I'll then instantiate my database connection in a bootstrap file using the aforementioned Singleton pattern and configuration file. My models will typically completely abstract the database/table data store, for each model I'll do something like this: bootstrap.php $config = load_config_data(ENVIRONMENT); Db::setDefaultAdapter($config['database']); Model/Table/User.php class Table_User extends Db_Table { // Table name protected $_name = 'user'; /* Do a bunch of database specific stuff */ } Model/User.php update( array('username'=>$username), Db::quoteInto('userid = ?', $userid) ); } } This is pretty much an introduction to the [Model][2] in the [Zend Framework MVC][3], I would check it out for some ideas on how to organize your code (or save yourself some trouble and actually use the [framework][4].) [1]: https://www.php.net/singleton [2]: http://framework.zend.com/manual/en/zend.db.table.html [3]: http://framework.zend.com/manual/en/zend.controller.html [4]: http://framework.zend.com
