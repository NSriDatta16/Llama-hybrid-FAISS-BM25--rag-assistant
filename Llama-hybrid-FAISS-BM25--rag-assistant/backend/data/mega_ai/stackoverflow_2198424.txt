[site]: stackoverflow
[post_id]: 2198424
[parent_id]: 2194201
[tags]: 
What do you get by an F# immutable data that you don't get from a C# immutable data? F# allows you to easily make modified copies of immutable data, this is very tedious and time consuming to from C#. Consider creating a record in F#: type Person = { FirstName: string; MiddleName: string; LastName: string } let me = { FirstName = "Robert"; MiddleName = "Frederick"; LastName = "Pickering" } Say I wanted alter the last name field, in F# I can do this by making a copy using the "with" keyword: let me' = { me with LastName = "Townson" } If you wanted to do this in C# you'd have to create methods that copied each field into a new structure and there's a strong possibility you'd get the fields mixed up. There are other suitable advantages to do with collections. For example C# supports the immutable ReadOnlyCollection. However each time you want to add a new item to this collection you must make a copy of the whole collections. F# build in list allows you to just add a new item to the end of the list without making a copy of it, i.e. newly the resulting list will actually share most of the old list. i.e.: let myList = [3; 2; 1] let myList' = 4 :: myList When creating "myList'", the whole of "myList" is preserved unchanged and "4" is added to it's head to create "myList'".
