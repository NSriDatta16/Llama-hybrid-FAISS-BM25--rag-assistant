[site]: stackoverflow
[post_id]: 4193016
[parent_id]: 4192969
[tags]: 
Strings like that (from the code) could be " interned ". This means all instances of "ABC" point to the same object. Even across AppDomain s you can point to the same object (thx Steven for the tip). If you have a lot of string-mutexes, from different locations, but with the same text, they could all lock on the same object. The intern pool conserves string storage. If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of String that have identical values. It's better to use: private static readonly object mutex = new object(); Also, since your string is not const or readonly , you can change it. So (in theory) it is possible to lock on your mutex . Change mutex to another reference, and then enter a critical section because the lock uses another object/reference. Example: private static string mutex = "1"; private static string mutex2 = "1"; // for 'lock' mutex2 and mutex are the same private static void CriticalButFlawedMethod() { lock(mutex) { mutex += "."; // Hey, now mutex points to another reference/object // You are free to re-enter ... } }
