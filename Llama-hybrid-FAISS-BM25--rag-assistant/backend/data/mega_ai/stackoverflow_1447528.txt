[site]: stackoverflow
[post_id]: 1447528
[parent_id]: 1447474
[tags]: 
When testing GUI or database code with mocks, what are you really testing? I usually try to separate my business logic, display logic, and database access. Most of my GUI unit tests deal with business logic. Here's a pseudocode example: // Production code in class UserFormController: void changeUserNameButtonClicked() { String newName = nameTextBox.getText(); if (StringUtils.isEmpty(newName)) { errorBox.showError("User name may not be empty !"); } else { User user = engine.getCurrentUser(); user.name = newName; engine.saveUser(user); } } // Test code in UserFormControllerTest: void testValidUserNameChange() { nameTextBox = createMock(TextBox.class); expect(nameTextBox.getText()).andReturn("fred"); engine = createMock(Engine.class); User user = createMock(user); user.setName("fred"); expectLastCall(); expect(engine.getCurrentUser()).andReturn(user); engine.saveUser(user); expectLastCall(); replay(user, engine, nameTextBox); UserFormController controller = new UserFormController(); controller.setNameTextBox(nameTextBox); controller.setEngine(engine); controller.changeUserNameButtonClicked(); verify(user, engine, nameTextBox); } void testEmptyUserNameChange() { nameTextBox = createMock(TextBox.class); errorBox = createMock(ErrorBox.class); expect(nameTextBox.getText()).andReturn(""); errorBox.showError("User name may not be empty !"); expectLastCall(); replay(nameTextBox, errorBox); UserFormController controller = new UserFormController(); controller.setNameTextBox(nameTextBox); controller.setErrorBox(errorBox); controller.changeUserNameButtonClicked(); verify(nameTextBox, errorBox); } This ensures that, regardless of how broken my database and GUI code may be, at least the logic that controls the user name change works correctly. If you organize your GUI code into a set of individual controls (or widgets or form elements or whatever they're called in your GUI framework), you can test them in a similar way. But ultimately, like you said, these unit tests won't give you the whole picture. To get that, you need to do what others have suggested: create a real database, with a "golden set" of data, and run integration/functional tests against it. But, IMO, such tests are out of scope for TDD, because setting them up is usually pretty time-consuming.
