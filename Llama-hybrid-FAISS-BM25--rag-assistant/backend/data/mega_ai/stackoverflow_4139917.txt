[site]: stackoverflow
[post_id]: 4139917
[parent_id]: 
[tags]: 
Checking if Linked List is palindromic

Consider a linked list whose nodes are chars, so the list represents a string. How do you write a recursive routine to check whether the string is a palindrome such that the the said function starts unwinding the stack when it processes the character(s) at the middle of the string? For example, suppose that my string is "madam". My recursive function looks something like: bool isPalin(const node *startnode, const node *currentnode, const node *midpoint, ...); When currentnode->data == 'd' , the stack has to unwind. I was asked this question for an interview; at the moment I can't think of any use for this question except as a very hard puzzle. First thoughts: A very obvious (if inelegant) way is to: Compute the midpoint of the list first. If currentnode is "before" midpoint , push former into a stack manually. This can be decided by maintaining a counter. Otherwise, unwind the manually maintained stack at every step of the recursion, and compare with the current character. Any better ideas or fresh insights?
