[site]: stackoverflow
[post_id]: 4940811
[parent_id]: 4940782
[tags]: 
Databases are built to handle similar data as a set together. What you want is a single user-data-table, with multiple users in the same table split by user_id. You might want to further normalize that though, so that it stores: user date type units 1 3/1/2010 dollars 10.00 1 3/1/2010 miles 5 1 3/1/2010 temp 54 2 3/1/2010 dollars 20.00 2 3/1/2010 miles 15 1 3/12/2010 miles 5 1 3/12/2010 temp 55 etc Or even further if the user+date makes a specific trip trip-table tripid user date ========= ======== ========= 1 1 3/1/2010 type-table typeid description ========= ============ 1 dollars 2 miles etc trip-data tripid type units ========= ======== ======= 1 1 10.00 1 2 5 etc However , if you will always (or almost always) show your data in the form as entered, with the data pivoted on all the input columns (like a spreadsheet), then you would be better off sticking to the un-normalised form for brevity, programmability and performance. could end up with a gigantic table that needs to be combed to find rows with requested user id's Assuming you employ indexes properly and judiciously, modern RDBMS are built to handle gigantic amounts of data. The indexes allow the queries to seek only the data it needs, so there is normally little penalty in keeping it all in one table.
