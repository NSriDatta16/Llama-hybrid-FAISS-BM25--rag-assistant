[site]: stackoverflow
[post_id]: 4188625
[parent_id]: 4147966
[tags]: 
Using Ray's code as a starting point, I've written some code that works, but isn't entirely elegant. XAML: ... DelayingMultiConverter: internal class DelayingMultiConverter : IMultiValueConverter, INotifyPropertyChanged { private object undelayedValue; private object delayedValue; private DispatcherTimer timer; private int changeCount; public int ChangeCount { get { return this.changeCount; } private set { this.changeCount = value; this.NotifyPropertyChanged("ChangeCount"); } } public IMultiValueConverter Converter { get; set; } public CultureInfo ConverterCulture { get; set; } public object ConverterParameter { get; set; } public TimeSpan Delay { get { return this.timer.Interval; } set { this.timer.Interval = value; } } public DelayingMultiConverter() { this.timer = new DispatcherTimer(); this.timer.Tick += Timer_Tick; } public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture) { object newValue = Converter.Convert( values.Take(values.Length - 1).ToArray(), targetType, ConverterParameter, ConverterCulture ?? culture); if (!object.Equals(newValue, undelayedValue)) { undelayedValue = newValue; timer.Stop(); timer.Start(); } return delayedValue; } public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) { return Converter.ConvertBack(value, targetTypes, ConverterParameter, ConverterCulture ?? culture) .Concat(new object[] { ChangeCount }).ToArray(); } public event PropertyChangedEventHandler PropertyChanged; private void NotifyPropertyChanged(string info) { if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(info)); } } private void Timer_Tick(object sender, EventArgs e) { timer.Stop(); delayedValue = undelayedValue; ChangeCount++; } }
