[site]: crossvalidated
[post_id]: 505754
[parent_id]: 
[tags]: 
comparing distribution of values to a fixed estimate

This is obviously a partial duplicate of statistical test to compare a distribution of values versus a fixed number but I hope with greater explanation of what I'm trying to do to get a more defined answer short question: I have a distribution of responses to task a and I want to compare these to the fit of a logistic regression of responses to a very similar task b. I obviously have the individual responses to a so can calculate the mean, standard deviation, sem of the dependent variable, etc. For task b, I only have the fitted estimate of dependent variable and the error of this fit. It feels I want to use some t-statistic but I wanted to check if this is right and also get a better understanding of the thought process to get there. longer question: It might be easier if I make up a relevant example and also give synthetic data. Let's say I am interested in finding out the value of two bars of chocolate (one low quality, one high quality) to my friend. For simplicity, I'll call him F. At first I give him repeated choices between the chocolates and some dollar amount (between 0 and $1 in 20cent increments). F's choices are noisy and so over choices we get a nice psychometric curve on choices # ground truth value_low_quality % #generate distributions data.frame(x = ., y1 = 1-pnorm(., value_low_quality, 0.25), y2 = 1-pnorm(., value_high_quality, 0.3)) %>% #melt data gather("group", "percent_choice_chocolate", - x) %>% mutate(chocolate_quality = case_when( group == "y1" ~ "low quality", group == "y2" ~ "high quality" )) %>% rename(dollars_offered = x) %>% select(chocolate_quality, dollars_offered, percent_choice_chocolate) %>% #make choices into individual trials group_by(chocolate_quality, dollars_offered) %>% group_split() %>% map_df(function(d) { trial_data % slice(rep(1, each = n)) n_choose_choc = round(d$percent_choice_chocolate * n) choices and to plot these choices as a binary response with a fitted curve binomial_smooth we can infer the value of each chocolate as the dollar amount for which F chooses either the chocolate or the dollars 50% of the time (line). I can calculate this point using the MASS package p.dose function , here I've pulled the raw code out of these just in case my understanding of what this function does is incorrect. choice_values % filter(chocolate_quality == q) #model model So that is all fine and good and I have my point estimate of the value of each chocolate. The next day I'm still curious so I ask F to do a further 200 trials where on each he states how much he would be willing to pay (WTP) for each bar of chocolate #more synthetic data wtp_data I've added a deviation for the bids for the high value chocolate so we have one group where values/distributions from both tasks are effectively equal (h0 - no difference in estimates) and one where the values/distributions are unequal (h1), or at least approaching h1. The actual result here doesn't matter. If I then plot the values I can see the how these estimates of values compare p2 And we can see the similarity in estimates for the low quality chocolate and the deviation for the high quality chocolate. But I'm not sure how to statistically examine these differences.
