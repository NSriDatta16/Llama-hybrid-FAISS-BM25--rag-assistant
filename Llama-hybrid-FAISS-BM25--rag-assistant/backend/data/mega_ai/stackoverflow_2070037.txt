[site]: stackoverflow
[post_id]: 2070037
[parent_id]: 2069949
[tags]: 
It is not exactly clear what you are looking for. The structure of the first cycle (the "character array" version) is determined by the fact that you are not working with an abstract character array, but rather working with a C-string residing in that array. A C-string is a sequence of characters (in an array) terminated by a zero character. This zero character is what terminates your first cycle. There's no problem with using an explicit pointer to work with a double array. You are doing it yourself in your second example (albeit with errors). If your double array specifically contains a sequence of double values terminated by a 0.0 value, then your double cycle might even look exactly as your char cycle. double *ptr = someArray; while (*ptr != 0.0) cout But normally it won't be the case. Zero-terminated double arrays is not something that is used very often in practice. Normally you'll know the size of your array, which means that the iteration will be organized differently. There are many different ways to do it, so it is largely a matter of personal taste. Here are several examples double *ptr; for (unsigned n = ARRAY_SIZE, ptr = someArray; n > 0; --n, ++ptr) cout or for (double *ptr = someArray, *ptr_end = ptr + ARRAY_SIZE; ptr != ptr_end; ++ptr) cout or double *ptr; for (unsigned i = 0, ptr = someArray; i and so on.
