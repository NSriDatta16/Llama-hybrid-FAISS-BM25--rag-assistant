[site]: stackoverflow
[post_id]: 3015581
[parent_id]: 3015335
[tags]: 
Whenever you pass a string of HTML to any of jQuery's methods, this is what happens: A temporary element is created, let's call it x. x's innerHTML is set to the string of HTML that you've passed. Then jQuery will transfer each of the produced nodes (that is, x's childNodes ) over to a newly created document fragment, which it will then cache for next time. It will then return the fragment's childNodes as a fresh DOM collection. Note that it's actually a lot more complicated than that, as jQuery does a bunch of cross-browser checks and various other optimisations. E.g. if you pass just to jQuery() , jQuery will take a shortcut and simply do document.createElement('div') . EDIT : To see the sheer quantity of checks that jQuery performs, have a look here , here and here . innerHTML is generally the faster approach, although don't let that govern what you do all the time. jQuery's approach isn't quite as simple as element.innerHTML = ... -- as I mentioned, there are a bunch of checks and optimisations occurring. The correct technique depends heavily on the situation. If you want to create a large number of identical elements, then the last thing you want to do is create a massive loop, creating a new jQuery object on every iteration. E.g. the quickest way to create 100 divs with jQuery: jQuery(Array(101).join(' ')); There are also issues of readability and maintenance to take into account. This: $(' ' + content + ' '); ... is a lot harder to maintain than this: $(' ', { id: someID, className: 'foobar', html: content });
