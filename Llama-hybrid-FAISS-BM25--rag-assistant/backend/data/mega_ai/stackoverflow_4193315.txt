[site]: stackoverflow
[post_id]: 4193315
[parent_id]: 4191023
[tags]: 
Shouldn't that be Character has_many :stats has_many :abilities, through => :stats Ability has_many :stats has_many :characters, through => :stats Stat belongs_to :character belongs_to :ability ? Also, is it Person or Character? You refer variously to both. (I'm going to go with Character in my answer) I think you've fallen foul of the "I'll try to make a simplified version of my schema in order to attempt to illustrate a problem but instead make things more complex and muddle the issue by screwing it up so it doesn't make sense" syndrome. Anyway, there's a couple of issues i can see: 1) first thing is that you're adding all the possible abilities to a character as soon as they're created. This is silly - they should start out with no abilities by default and then you create join table records (stats) for the ones they do have (by ticking checkboxes in the form). 2) A simple way to manipulate join records like this is to leverage the "ability_ids=" method that the has_many :abilities macro gives you - referred to as "collection_ids=" in the api http://railsbrain.com/api/rails-2.3.2/doc/index.html?a=M001885&name=has_many In other words, if you say @character.ability_ids = [1,12,30] then that will make joins between that character and abilities 1, 12 and 30 and delete any other joins between that character and abilities not in the above list. Combine this with the fact that form field names ending in [] put their values into an array, and you can do the following: #controller def new @character = Character.new @abilities = Ability.all end #form #subsequent controller (create action) @character = Character.new(params[:character]) #totally standard code Notice that there's no mention of stats here at all. We specify the associations we want between characters and abilities and let rails handle the joins.
