[site]: crossvalidated
[post_id]: 549806
[parent_id]: 67907
[tags]: 
fabee's answer was complete. I am just adding a generic function that can be used in Python that I've created and tested for my projects (with a sample code) import numpy as np import pandas as pd import matplotlib.pyplot as plt def reconstruct_orig(sm_x:np.ndarray, win_size:int=7): """reconstructing from original data Args: sm_x (np.ndarray): smoothed array (remove any NaN from the edge) win_size (int, optional): moving average window size. Defaults to 7. Returns: [type]: [description] """ ''' ''' arr_size = sm_x.shape[0]+win_size # get A and its inverse A = (np.tril(np.ones((arr_size,arr_size)),-1) - np.tril(np.ones((arr_size,arr_size)),-(win_size+1)))/win_size A = A[win_size:,:] pA = np.linalg.pinv(A) #pseudo inverse return np.dot(pA, sm_x) if __name__=="__main__": # np.random.seed(1) nmax= 100 t=np.linspace(0,10,num=nmax) raw_x = pd.Series(np.sin(t)+ 0.2*np.random.normal(0,1, size=nmax)) # create original data sm_x = raw_x.rolling(7, center=False).mean().dropna() # smooth data re_x = reconstruct_orig(sm_x, win_size=7) # reconstruct data plt.plot(raw_x,'x',label='original x') plt.plot(sm_x,label='averaged x') plt.plot(re_x,'.', label='reconstructed x') plt.legend() plt.show()
