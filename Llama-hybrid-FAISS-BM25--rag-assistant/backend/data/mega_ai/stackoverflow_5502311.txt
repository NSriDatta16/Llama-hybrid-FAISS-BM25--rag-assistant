[site]: stackoverflow
[post_id]: 5502311
[parent_id]: 5499464
[tags]: 
As you note, Informix does not have 'OUT' parameters really; it returns values. In regular ESQL/C, you treat a list of output values symmetrically with a list of input values; I would expect to do the same with this code, therefore. Whatever technique you use to pass 2 arguments to the function is likely - but by no means guaranteed - to be how you get multiple returned values. In case of doubt, treat it as you would treat a SELECT statement that returns multiple rows. That is, do the analogues of: PREPARE s FROM "EXECUTE PROCEDURE test_out2(?)"; DECLARE c CURSOR FOR s; OPEN c USING :input_value; while (sqlca.sqlcode == 0) { FETCH c INTO :out_value1, :out_value2; if (sqlca.sqlcode != 0) break; ...use values... } CLOSE c; FREE c; FREE s; I would recommend using ODBC over OIC++. The OIC++ interface is built on top of another library, DMI, which in turn is built on top of another library that accesses the DBMS - I forget whether it is ESQL/C or ODBC based, or one of the core libraries those are built on. Using unixODBC as your driver manager and an appropriate ODBC driver makes more sense to me than using OIC++. I've no real idea how that looks in OIC++; I've never used it, but only done some cursory maintenance of it. On the whole, you would be best advised not to use OIC++ for new work. Informix continues to distribute it for backwards compatibility rather than to encourage new use.
