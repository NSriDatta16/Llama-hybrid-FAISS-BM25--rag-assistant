[site]: stackoverflow
[post_id]: 4209359
[parent_id]: 
[tags]: 
Storing floats in NSMutableArray gives unexpected results

I am writing a method which calculates the average time interval between a series of events (specifically, button tapping in iPhone). Since the number of time intervals I want to average might change during the program's life-cycle, I am storing the time readings in an object named tapTimes of type NSMutableArray so I don't have to worry about managing the array size. When I store the time readings as doubles, everything works ok (for simplicity, in the following example I am interested only in one time interval): CFAbsoluteTime time = CFAbsoluteTimeGetCurrent(); [tapTimes addObject:[NSNumber numberWithDouble:(double)time]]; [tapTimes removeObjectAtIndex:0]; double deltaT = [[tapTimes objectAtIndex:1] doubleValue] - [[tapTimes objectAtIndex:0] doubleValue]; Which, for tapping every second or so, gives (the first value is just the first time reading since the array is initialized with zeros): deltaT 311721948.947153 deltaT 1.023200 deltaT 1.080004 deltaT 1.055961 deltaT 1.087942 deltaT 1.080074 However, if I store floats: CFAbsoluteTime time = CFAbsoluteTimeGetCurrent(); [tapTimes addObject:[NSNumber numberWithFloat:(float)time]]; [tapTimes removeObjectAtIndex:0]; float deltaT = [[tapTimes objectAtIndex:1] floatValue] - [[tapTimes objectAtIndex:0] floatValue]; Then I get unexpected results for deltaT : deltaT 311721760.000000 deltaT 0.000000 deltaT 0.000000 deltaT 0.000000 deltaT 0.000000 deltaT 32.000000 deltaT 0.000000 deltaT 0.000000 deltaT 0.000000 Any idea what goes wrong? (I am doing mt first steps in Objective-c/cocoa, so I hope the answer is not too trivial :))
