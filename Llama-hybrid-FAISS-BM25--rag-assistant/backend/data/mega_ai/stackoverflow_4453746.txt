[site]: stackoverflow
[post_id]: 4453746
[parent_id]: 
[tags]: 
Refactoring to avoid duplicate code

I'm trying to factor out some repetitive code, but it starts to smell funky now. Say I start out with this not quite right, but you catch my drift: public virtual OrganisationEntity Get(int id) { SqlCommand command = new SqlCommand(); command.CommandText = @"SELECT t.Id, t.Description FROM Organisation t Where t.Id = @Id"; command.Parameters.Add("@id", SqlDbType.Int).Value = id; List entities = new List (); SqlDataReader reader = Database.ExecuteQuery(command, ConnectionName.Dev); while (reader.Read()) { OrganisationEntityMapper mapper = Mapper; entities = mapper.MapAll(reader); } return entities.First (); } It's pretty obvious every other Get(int id) methode has, apart from the query the same form, so my next step would be to make a base class, RepositoryBase looking like: public abstract class RepositoryBase where T : new() { /// /// /// public abstract EntityMapperBase Mapper { get; } public virtual T Get(int id) { List entities = new List (); SqlDataReader reader = Database.ExecuteQuery(Command, ConnectionName); while (reader.Read()) { EntityMapperBase mapper = Mapper; entities = mapper.MapAll(reader); } return entities.First (); } } To add some generic funkyness, but this is also where it gets ugly. First of all, Database.ExecuteQuery expects a SqlCommand and an enum, so I though, ok, then I'll add 2 properties, which I'll just fire up with some stuff. THen I realize I don't need the int id parameter here anymore, since I construct the query in a subclass, so I might as well pass the command and connectionName as parameters, I want the connectionName to be dependend of the OrganisationRepository anyway (others need another string): public class OrganisationRepository : RepositoryBase { protected override EntityMapperBase Mapper { get { return new OrganisationMapper(); } } public override OrganisationEntity Get(int id) { SqlCommand command = new SqlCommand(); command.CommandText = @"SELECT t.Id, t.Description FROM Organisation t Where t.Id = @Id"; command.Parameters.Add("@id", SqlDbType.Int).Value = id; return base.Get(command, ConnectionName.Dev); } } But, oops, ofcourse, now the method signatures aren't in sync anymore... oops! So, basically I'm wondering. It just feels nasty, but don't know exactly why. On one hand I'd like to factor out repetetive code as much as possible, but now it leaves me with this! How do I refactor this to (more) proper OO? Should I just forget factoring out the query strings and write alot of duplicate?
