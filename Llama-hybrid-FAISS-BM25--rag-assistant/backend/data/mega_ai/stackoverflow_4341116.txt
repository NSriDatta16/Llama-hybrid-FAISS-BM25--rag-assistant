[site]: stackoverflow
[post_id]: 4341116
[parent_id]: 
[tags]: 
Succinct MooseX::Declare method signature validation errors

I've been a proponent of adopting Moose (and MooseX::Declare) at work for several months. The style it encourages will really help the maintainability of our codebase, but not without some initial cost of learning new syntax, and especially in learning how to parse type validation errors. I've seen discussion online of this problem, and thought I'd post a query to this community for: a) known solutions b) discussion of what validation error messages should look like c) propose a proof of concept that implements some ideas I'll also contact the authors, but I've seen some good discussion this forum too, so I thought I'd post something public. #!/usr/bin/perl use MooseX::Declare; class Foo { has 'x' => (isa => 'Int', is => 'ro'); method doit( Int $id, Str :$z, Str :$y ) { print "doit called with id = " . $id . "\n"; print "z = " . $z . "\n"; print "y = " . $y . "\n"; } method bar( ) { $self->doit(); # 2, z => 'hello', y => 'there' ); } } my $foo = Foo->new( x => 4 ); $foo->bar(); Note the mismatch in the call to Foo::doit with the method's signature. The error message that results is: Validation failed for 'MooseX::Types::Structured::Tuple[MooseX::Types::Structured::Tuple[Object,Int],MooseX::Types::Structured::Dict[z,MooseX::Types::Structured::Optional[Str],y,MooseX::Types::Structured::Optional[Str]]]' failed with value [ [ Foo=HASH(0x2e02dd0) ], { } ], Internal Validation Error is: Validation failed for 'MooseX::Types::Structured::Tuple[Object,Int]' failed with value [ Foo{ x: 4 } ] at /usr/local/share/perl/5.10.0/MooseX/Method/Signatures/Meta/Method.pm line 441 MooseX::Method::Signatures::Meta::Method::validate('MooseX::Method::Signatures::Meta::Method=HASH(0x2ed9dd0)', 'ARRAY(0x2eb8b28)') called at /usr/local/share/perl/5.10.0/MooseX/Method/Signatures/Meta/Method.pm line 145 Foo::doit('Foo=HASH(0x2e02dd0)') called at ./type_mismatch.pl line 15 Foo::bar('Foo=HASH(0x2e02dd0)') called at ./type_mismatch.pl line 20 I think that most agree that this is not as direct as it could be. I've implemented a hack in my local copy of MooseX::Method::Signatures::Meta::Method that yields this output for the same program: Validation failed for '[[Object,Int],Dict[z,Optional[Str],y,Optional[Str]]]' failed with value [ [ Foo=HASH(0x1c97d48) ], { } ] Internal Validation Error: '[Object,Int]' failed with value [ Foo{ x: 4 } ] Caller: ./type_mismatch.pl line 15 (package Foo, subroutine Foo::doit) The super-hacky code that does this is if (defined (my $msg = $self->type_constraint->validate($args, \$coerced))) { if( $msg =~ /MooseX::Types::Structured::/ ) { $msg =~ s/MooseX::Types::Structured:://g; $msg =~ s/,.Internal/\n\nInternal/; $msg =~ s/failed.for./failed for\n\n /g; $msg =~ s/Tuple//g; $msg =~ s/ is: Validation failed for/:/; } my ($pkg, $filename, $lineno, $subroutine) = caller(1); $msg .= "\n\nCaller: $filename line $lineno (package $pkg, subroutine $subroutine)\n"; die $msg; } [Note: With a few more minutes of crawling the code, it looks like MooseX::Meta::TypeConstraint::Structured::validate is a little closer to the code that should be changed. In any case, the question about the ideal error message, and whether anyone is actively working on or thinking about similar changes stands.] Which accomplishes 3 things: 1) Less verbose, more whitespace (I debated including s/Tuple//, but am sticking with it for now) 2) Including calling file/line (with brittle use of caller(1)) 3) die instead of confess -- since as I see it the main advantage of confess was finding the user's entry point into the typechecking anyway, which we can achieve in less verbose ways Of course I don't actually want to support this patch. My question is: What is the best way of balancing completeness and succinctness of these error messages, and are there any current plans to put something like this in place?
