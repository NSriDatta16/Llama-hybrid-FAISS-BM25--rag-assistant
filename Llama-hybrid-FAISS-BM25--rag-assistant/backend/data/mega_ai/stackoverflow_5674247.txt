[site]: stackoverflow
[post_id]: 5674247
[parent_id]: 5672724
[tags]: 
You should try to accomplish this (an AccordionView-like behavior) using ViewFlipper with RelativeLayout children and attached OnTouchListeners on the header s. It worked for me. Sample application main.xml //inside res/layouts androidManifest.xml //activity declaration only AccordionSample.java //your main activity import android.app.Activity; import android.os.Bundle; import android.view.MotionEvent; import android.view.View; import android.widget.Button; import android.widget.ViewFlipper; public class AccordionSample extends Activity implements View.OnTouchListener { private float oldTouchValue; private ViewFlipper flipper; private Button currentButton; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); flipper = (ViewFlipper)findViewById(R.id.flipper); findViewById(R.id.btn_prev).setOnTouchListener(this); findViewById(R.id.btn_next).setOnTouchListener(this); } private boolean onButtonTouchEvent(MotionEvent touchevent) { if (currentButton == null) return false; switch (touchevent.getAction()) { case MotionEvent.ACTION_DOWN: { oldTouchValue = touchevent.getY(); break; } case MotionEvent.ACTION_UP: { float currentY = touchevent.getY(); final float diff = oldTouchValue - currentY; if ((diff Bottom flipper.setInAnimation(AccordionAnimation.inFromTopAnimation()); flipper.setOutAnimation(AccordionAnimation.outToBottomAnimation()); flipper.showNext(); } else if ((diff > 100) && (currentButton.getId() == R.id.btn_next)) { //Bottom --> Up flipper.setInAnimation(AccordionAnimation.inFromBottomAnimation()); flipper.setOutAnimation(AccordionAnimation.outToTopAnimation()); flipper.showPrevious(); } break; } } currentButton = null; return true; } @Override public boolean onTouch(View v, MotionEvent event) { currentButton = (Button)v; final boolean result = this.onButtonTouchEvent(event); return result; } } AccordionAnimation.java //for the up and down sliding import android.view.animation.AccelerateInterpolator; import android.view.animation.Animation; import android.view.animation.TranslateAnimation; public class AccordionAnimation { public static Animation inFromBottomAnimation() { Animation inFromBottom = new TranslateAnimation(Animation.RELATIVE_TO_PARENT, 0.0f, Animation.RELATIVE_TO_PARENT, 0.0f, Animation.RELATIVE_TO_PARENT, +1.0f, Animation.RELATIVE_TO_PARENT, 0.0f); inFromBottom.setDuration(350); inFromBottom.setInterpolator(new AccelerateInterpolator()); return inFromBottom; } public static Animation outToTopAnimation() { Animation outtoTop = new TranslateAnimation(Animation.RELATIVE_TO_PARENT, 0.0f, Animation.RELATIVE_TO_PARENT, 0.0f, Animation.RELATIVE_TO_PARENT, 0.0f, Animation.RELATIVE_TO_PARENT, -1.0f); outtoTop.setDuration(350); outtoTop.setInterpolator(new AccelerateInterpolator()); return outtoTop; } public static Animation inFromTopAnimation() { Animation inFromTop = new TranslateAnimation(Animation.RELATIVE_TO_PARENT, 0.0f, Animation.RELATIVE_TO_PARENT, 0.0f, Animation.RELATIVE_TO_PARENT, -1.0f, Animation.RELATIVE_TO_PARENT, 0.0f); inFromTop.setDuration(350); inFromTop.setInterpolator(new AccelerateInterpolator()); return inFromTop; } public static Animation outToBottomAnimation() { Animation outtoBottom = new TranslateAnimation(Animation.RELATIVE_TO_PARENT, 0.0f, Animation.RELATIVE_TO_PARENT, 0.0f, Animation.RELATIVE_TO_PARENT, 0.0f, Animation.RELATIVE_TO_PARENT, +1.0f); outtoBottom.setDuration(350); outtoBottom.setInterpolator(new AccelerateInterpolator()); return outtoBottom; } } strings.xml //inside res/values Slide down to see the first panel Slide up to see the second panel Lorem ipsum dolor sit amet... Sed ut perspiciatis unde omnis iste... AccordionSample Edit If you'd like to split your different views into different layout xmls, say first_view.xml and second view.xml, you should modify your onCreate method: flipper = (ViewFlipper)findViewById(R.id.flipper); LayoutInflater inflater = getLayoutInflater(); final View firstView = inflater.inflate(R.layout.first_view, flipper, false); flipper.addView(firstView); final View secondView = inflater.inflate(R.layout.second_view, flipper, false); flipper.addView(secondView); firstView.findViewById(R.id.btn_next).setOnTouchListener(this); secondView.findViewById(R.id.btn_prev).setOnTouchListener(this); Edit or more elegantly and efficiently, simply just include the layout xmls you've created for the different views into your main.xml : where the layout/flipping_view_1.xml contains the first RelativeLayout , and the layout/flipping_view_2.xml contains the second RelativeLayout of the ViewFlipper inside your original main.xml. To learn more about the reusability of android layouts, and layout techniques overall, you should take a look at Romain Guy's great post covering layout tricks .
