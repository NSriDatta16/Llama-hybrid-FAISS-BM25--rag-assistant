[site]: stackoverflow
[post_id]: 1428053
[parent_id]: 
[tags]: 
How to workaround the XmlSerialization issue with type name aliases (in .NET)?

I have a collection of objects and for each object I have its type FullName and either its value (as string) or a subtree of inner objects details (again type FullName and value or a subtree). For each root object I need to create a piece of XML that will be xml de-serializable. The problem with XmlSerializer is that i.e. following object int age = 33; will be serialized to 33 At first this seems to be perfectly ok, however when working with reflection you will be using System.Int32 as type name and int is an alias and this 33 will not deserialize. Now additional complexity comes from the fact that I need to handle any possible data type. So solutions that utilize System.Activator.CreateInstance(..) and casting won't work unless I go down the path of code gen & compilation as a way of achieving this (which I would rather avoid) Notes: A quick research with .NET Reflector revealed that XmlSerializer uses internal class TypeScope , look at its static constructor to see that it initializes an inner HashTable with mappings. So the question is what is the best (and I mean elegant and solid) way to workaround this sad fact?
