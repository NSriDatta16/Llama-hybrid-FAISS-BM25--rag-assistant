[site]: stackoverflow
[post_id]: 1063537
[parent_id]: 1063524
[tags]: 
One simple solution would be to add a boolean member to your form that is, e.g., true when the button says "Go" and false when the button says "Stop". Then, in your button's event handler, check that boolean value. If the value is true , then start your operation and set the value to false when you change the button's text to say "stop". Vice-versa for the other case. :) There are other techniques that I might prefer if this were production code, perhaps including considering the design of the form more carefully, but as this is clearly a learning exercise I believe that a simple boolean flag indicating the current state of the form is just what you're looking for. Note that I would strongly discourage you from checking the value of the button text to determine what state the object is in. Whenever possible, as a general rule of good design, you want your visual state to be "decoupled" from your underlying object's state. That is to say, your visual widgets can depend on your underlying objects, but your underlying objects should not depend on your visual widgets. If you tested the text of the button, your underlying logic would depend on your visual state and that would violate this general rule. If your problem is related to the fact that you can't cancel the operation while it's being performed, you'll want to look into using a BackgroundWorker to perform your long-running activity.
