[site]: stackoverflow
[post_id]: 3411830
[parent_id]: 3411803
[tags]: 
There's a fairly good chance that any decent compiler will detect common sub-expressions and optimise them for you. However, I would still opt for a temporary variable if it improved the readability of my code, despite the fact that it introduced extra storage (though minimal). I consider maintainability of code far more important than a tiny storage hit. By way of (contrived) example, I would probably replace a whole lot of: item[last_item-1].id = 14860; item[last_item-1].name.first = "pax"; item[last_item-1].name.last = "diablo"; calls with: tItem lastItem = &(item[last_item-1]); lastItem->id = 14860; : : : // and so on. As to interpreted languages, I have less information on that. I know quite a bit about how to optimise assembly code (though nowhere near as much as the demigods that write compilers, which is why I normally leave it to them). I know somewhat less about the virtual machines running inside most interpreters. But I would still code for readability. I don't want to see a bucketload of $employees[$i][$phone]['Home']['number'] snippets stuck in my code. I would rather add $homePhone = $employees[$i][$phone]['Home']['number']; in there somewhere and just use $homePhone from that point onward.
