[site]: stackoverflow
[post_id]: 3663825
[parent_id]: 3663063
[tags]: 
OK, let's solve question 2 step by step: (1) Inner join sets and probes on their individual elements. This way we'll see how do test sets and probe sets relate (which sets have what elements in common with which probe): SELECT e.set_no AS [test set], m.set_no AS [probe set], e.elem [common element] FROM @elements e JOIN @multi_probe m ON e.elem = m.elem Result: test set probe set common element ----------- ----------- -------------- 1 3 A 1 1 B 1 3 B 1 1 C 1 2 C 1 3 C 1 1 F 1 2 F 2 3 A 2 1 B 2 3 B 2 1 C 2 2 C 2 3 C 3 1 F 3 2 F 4 1 B 4 3 B 4 1 C 4 2 C 4 3 C 4 1 F 4 2 F 5 1 F 5 2 F (2) Count how many common elements between each test set and probe set (inner joins mean we already left the "no matches" aside) SELECT e.set_no AS [test set], m.set_no AS [probe set], COUNT(*) AS [common element count] FROM @elements e JOIN @multi_probe m ON e.elem = m.elem GROUP BY e.set_no, m.set_no ORDER BY e.set_no, m.set_no Result: test set probe set common element count ----------- ----------- -------------------- 1 1 3 1 2 2 1 3 3 2 1 2 2 2 1 2 3 3 3 1 1 3 2 1 4 1 3 4 2 2 4 3 2 5 1 1 5 2 1 (3) Bring the counts of the test set and probe set on each row (subqueries may not be the most elegant) SELECT e.set_no AS [test set], m.set_no AS [probe set], COUNT(*) AS [common element count], (SELECT COUNT(*) FROM @elements e1 WHERE e1.set_no = e.set_no) AS [test set count], (SELECT COUNT(*) FROM @multi_probe m1 WHERE m1.set_no = m.set_no) AS [probe set count] FROM @elements e JOIN @multi_probe m ON e.elem = m.elem GROUP BY e.set_no, m.set_no ORDER BY e.set_no, m.set_no Result: test set probe set common element count test set count probe set count ----------- ----------- -------------------- -------------- --------------- 1 1 3 6 3 1 2 2 6 2 1 3 3 6 3 2 1 2 3 3 2 2 1 3 2 2 3 3 3 3 3 1 1 3 3 3 2 1 3 2 4 1 3 3 3 4 2 2 3 2 4 3 2 3 3 5 1 1 1 3 5 2 1 1 2 (4) Find the solution: only retain those test sets and probe sets that have the same number of elements AND this number is also the number of common elements, i.e. the test set and the probe set are identical SELECT e.set_no AS [test set], m.set_no AS [probe set] FROM @elements e JOIN @multi_probe m ON e.elem = m.elem GROUP BY e.set_no, m.set_no HAVING COUNT(*) = (SELECT COUNT(*) FROM @elements e1 WHERE e1.set_no = e.set_no) AND (SELECT COUNT(*) FROM @elements e1 WHERE e1.set_no = e.set_no) = (SELECT COUNT(*) FROM @multi_probe m1 WHERE m1.set_no = m.set_no) ORDER BY e.set_no, m.set_no Result: test set probe set ----------- ----------- 2 3 4 1 Excuse the @ s instead of # s, I like table variables better :)
