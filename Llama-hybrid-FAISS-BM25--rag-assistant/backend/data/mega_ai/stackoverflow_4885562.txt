[site]: stackoverflow
[post_id]: 4885562
[parent_id]: 
[tags]: 
Pinch-to-zoom on huge images?

I found this Pinch-to-zoom example at http://forums.create.msdn.com Here is the xaml: And the cs source: public partial class GestureSample : PhoneApplicationPage { double initialAngle; double initialScale; public GestureSample() { InitializeComponent(); } private void OnTap(object sender, GestureEventArgs e) { transform.TranslateX = transform.TranslateY = 0; } private void OnDoubleTap(object sender, GestureEventArgs e) { transform.ScaleX = transform.ScaleY = 1; } private void OnHold(object sender, GestureEventArgs e) { transform.TranslateX = transform.TranslateY = 0; transform.ScaleX = transform.ScaleY = 1; transform.Rotation = 0; } private void OnDragStarted(object sender, DragStartedGestureEventArgs e) { image.Opacity = 0.3; } private void OnDragDelta(object sender, DragDeltaGestureEventArgs e) { transform.TranslateX += e.HorizontalChange; transform.TranslateY += e.VerticalChange; } private void OnDragCompleted(object sender, DragCompletedGestureEventArgs e) { image.Opacity = 1.0; } private void OnPinchStarted(object sender, PinchStartedGestureEventArgs e) { Point point0 = e.GetPosition(image, 0); Point point1 = e.GetPosition(image, 1); Point midpoint = new Point((point0.X + point1.X) / 2, (point0.Y + point1.Y) / 2); image.RenderTransformOrigin = new Point(midpoint.X / image.ActualWidth, midpoint.Y / image.ActualHeight); initialAngle = transform.Rotation; initialScale = transform.ScaleX; image.Opacity = 0.8; } private void OnPinchDelta(object sender, PinchGestureEventArgs e) { transform.Rotation = initialAngle + e.TotalAngleDelta; transform.ScaleX = transform.ScaleY = initialScale * e.DistanceRatio; } private void OnPinchCompleted(object sender, PinchGestureEventArgs e) { image.Opacity = 1.0; } private void OnFlick(object sender, FlickGestureEventArgs e) { flickData.Text = string.Format("{0} Flick: Angle {1} Velocity {2},{3}", e.Direction, Math.Round(e.Angle), e.HorizontalVelocity, e.VerticalVelocity); } } It works pretty well for small images (less then 2000x2000 pixels). But in my example, i have this huge metro map ( http://www.vasttrafik.se/upload/Linjekartor_hogupplost/Goteborg2010/Linjen%C3%A4tskarta-101212.png or vector http://www.vasttrafik.se/upload/Linjekartor_hogupplost/Goteborg2010/Linjen%C3%A4tskarta-101212.pdf ). It would be even nicer if the user could scale a vector image but even importing such a huge vector is a serious performance issue. Maybe i could split the image up into several "multi-scale images" and use this http://dotnetbyexample.blogspot.com/2010/08/windows-phone-7-multi-touch-panzoom.html , but i don't really know how to use his class :( Any ideas? How would you guys solve this problem? Thanks Richard
