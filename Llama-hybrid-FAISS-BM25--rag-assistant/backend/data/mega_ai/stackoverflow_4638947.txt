[site]: stackoverflow
[post_id]: 4638947
[parent_id]: 4637425
[tags]: 
One of the rule of PHP is " Share nothing ". That means every PHP process is independant and shares nothing with the others. So if you want to break your execution on several PHP process you'll have to store the data somewhere. It can be a memcached storage, or a database , or the session , as you want. Then you'll need to ' fork ' your PHp process. They're solutions available to get this done on the server side. IMHO this is all hacks. Dangerous and not minded in the PHP/web way. With the exception of ' work queues ' tools. I think the nicest way is to break your task with ajax . This will allow you a clean user interface and will avoid any long response timeout in the web process. i.e. show a 'working zone' to you user, then ask in ajax for next step of the job (first one), get response (in server side stor you response), then ask for next step, store new response and respond , next step, etc. You can even add a 'stop that stuff' function on the client side. You can check as well for 'php work queue' on google.
