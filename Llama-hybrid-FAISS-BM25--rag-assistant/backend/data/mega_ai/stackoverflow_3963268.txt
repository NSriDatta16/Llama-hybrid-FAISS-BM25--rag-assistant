[site]: stackoverflow
[post_id]: 3963268
[parent_id]: 3958056
[tags]: 
I've drawn up your model so I could better understand it - hopefully I got it right. My problem now is to identify the aggregate roots I'd have thought that the child parts of the aggregate knew who their parent was; and considering that (if I understand you correctly) a Rule can't exist without a parent RuleSet the surely you can map them back; the same goes for all other classes. Or should I make each rule entity its own aggregate root? No - don't confuse implementation challenges with the model. So then I can do performant queries such as garageRuleRepository.GetRulesByRuleSetAndGarage(RuleSet ruleSet, Garage garage). Hmmm - maybe. If we know a Rule or RuleSet we should know which Garage it ultimately belongs to, so you shouldn't need to pass the RuleSet in. Otherwise I will end up which very large collections within my aggregate root that I cannot query correctly. On the one hand you can load up a the full object graph for a Garage and place it in memory, or, you can load only part of the graph and use a LazyLoad based implementation to get information if and when it's needed. This depends on your applications architecture; if you have the memory to store a full graph and getting data was an expensive task (i.e - you only want t do it as little as possible) then maybe the former way is better; if memory is scarce but getting information isn't a burden then perhaps the latter. Your model based on your original question: My Suggesed model: Garages and Organisations both own a RuleSet, which is made up of any number of rules; I don't think having Garages (etc) bound direcly to a Rule is what you actually mean / or want. I've subtyped the RuleSets as you might want to have different logic applied at that level.
