[site]: stackoverflow
[post_id]: 1891701
[parent_id]: 1862097
[tags]: 
From an architecture perspective, you'll get the best performance by splitting the solution into two pieces: a database server, and an image server . You would do this both in order to keep row sizes small, and also to separate your transactional environment from content. Relational databases in the vein of SQL Server and mysql will support big BLOBs but aren't optimized for them. Most people equate "image server" to "web server" because they work on web applications and therefore have a de facto image repository (a directory on a local disk). However, this does not have to be the case. Images can be served from any location over any protocol. You mentioned a C#/.NET platform and an intranet. Can we assume a Windows environment, possibly Active Directory? If so, a plain vanilla file server could be your image server. Set up a file share, set read/create (but not modify/delete) permissions on it for all users of this app, store the UNC path somewhere in the database (so you don't have to redeploy the app if you decide to relocate it), and have your client application generate a unique, relative path using something reliable like a Guid . It's not as elegant as a web service (which is my preferred approach), nor quite as maintenance-free as the pure-database approach, but my impression of this topic is that you're on a tight budget with a short delivery deadline, and a Windows or NFS file server is cheaper, easier, and faster to set up and maintain (including backups) than a full-fledged web server, so it might be just what you're looking for here. Most businesses already have a file server, so usually this won't require any new infrastructure whatsoever. But even if you don't, I've seen file servers run off old reconditioned workstations - it's not fancy, but in a low-traffic environment it gets the job done. If you choose this approach, I would suggest some kind of directory structure on the file share to simplify backups, archiving, etc. For example: \\ImageServer\MyAppRepository\yyyy-mm\{image-file-name-or-guid}.{ext} . Hope that helps.
