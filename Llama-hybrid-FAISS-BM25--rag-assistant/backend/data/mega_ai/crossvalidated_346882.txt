[site]: crossvalidated
[post_id]: 346882
[parent_id]: 
[tags]: 
GAM negative deviance explained for Poisson model fitted with REML

I am fitting time series of neuron spike data with a Poisson GAM. I am fitting it with the following call: gam3.formula = "sig089a ~ reward + s(time.from.release, k=c(30), id=0) + s(time.from.next.press, k=c(30), id=0) + s(wrist.extensors, bs='tp', k=c(5),fx=F) + s(wrist.flexors, bs='tp',k=c(5),fx=F) + s(biceps, bs='tp',k=c(5),fx=F) + s(triceps, bs='tp',k=c(5),fx=F) + s(lag1, bs='tp', k=c(5),fx=F) + s(lag2, bs='tp', k=c(5),fx=F) + s(lag3, bs='tp', k=c(5),fx=F) + s(lag4, bs='tp', k=c(5),fx=F) + s(lag5, bs='tp', k=c(5),fx=F)" gam3.formula = as.formula(gam3.formula) gam3 = bam(gam3.formula, data=new.data, family=poisson(), select=T) All variables except for reward are continuous variables. rewards is a factor with two different levels. lag1 to lag5 are lagged versions of sig089a . The model completes with no problem with the default GCV method: > summary(gam3) Family: poisson Link function: log Formula: sig089a ~ reward + s(time.from.release, k = c(30), id = 0) + s(time.from.next.press, k = c(30), id = 0) + s(wrist.extensors, bs = "tp", k = c(5), fx = F) + s(wrist.flexors, bs = "tp", k = c(5), fx = F) + s(biceps, bs = "tp", k = c(5), fx = F) + s(triceps, bs = "tp", k = c(5), fx = F) + s(lag1, bs = "tp", k = c(5), fx = F) + s(lag2, bs = "tp", k = c(5), fx = F) + s(lag3, bs = "tp", k = c(5), fx = F) + s(lag4, bs = "tp", k = c(5), fx = F) + s(lag5, bs = "tp", k = c(5), fx = F) Parametric coefficients: Estimate Std. Error z value Pr(>|z|) (Intercept) 2.19980 0.75146 2.927 0.00342 ** reward0 -0.01100 0.01514 -0.726 0.46756 --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Approximate significance of smooth terms: edf Ref.df Chi.sq p-value s(time.from.release) 1.748e+01 25 1061.985 I can see this model's deviance explained is 11.4%. According to this post , GAM fitting using the default GCV smootheness can suffer from under-smoothing and REML is more robust to under-fitting. So I did the same call with REML, I then got: Parametric coefficients: Estimate Std. Error z value Pr(>|z|) (Intercept) 2.19983 0.75144 2.927 0.00342 ** reward0 -0.01098 0.01513 -0.726 0.46812 --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Approximate significance of smooth terms: edf Ref.df Chi.sq p-value s(time.from.release) 17.484203 25 1061.972 Now the Deviance explained is negative at -169%. Plot and inspecting the smooth terms I don't see any difference. As far as I can tell fitting with GCV vs. fitting with REML here simply made Deviance explained negative. Why does this happen and does this say something about my model specification?
