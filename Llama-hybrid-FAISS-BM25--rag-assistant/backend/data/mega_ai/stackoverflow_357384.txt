[site]: stackoverflow
[post_id]: 357384
[parent_id]: 345698
[tags]: 
Anti-patterns Software design anti-patterns Abstraction inversion : Not exposing implemented functionality required by users, so that they re-implement it using higher level functions Ambiguous viewpoint: Presenting a model (usually OOAD) without specifying its viewpoint Big ball of mud: A system with no recognizable structure Blob: Generalization of God object from object-oriented design Gas factory: An unnecessarily complex design Input kludge: Failing to specify and implement handling of possibly invalid input Interface bloat: Making an interface so powerful that it is extremely difficult to implement Magic pushbutton: Coding implementation logic directly within interface code, without using abstraction. Race hazard: Failing to see the consequence of different orders of events Railroaded solution: A proposed solution that while poor, is the only one available due to poor foresight and inflexibility in other areas of the design Re-coupling: Introducing unnecessary object dependency Stovepipe system: A barely maintainable assemblage of ill-related components Staralised schema: A database schema containing dual purpose tables for normalised and datamart use Object-oriented design anti-patterns Anemic Domain Model: The use of domain model without any business logic which is not OOP because each object should have both attributes and behaviors BaseBean: Inheriting functionality from a utility class rather than delegating to it Call super: Requiring subclasses to call a superclass's overridden method Circle-ellipse problem: Subtyping variable-types on the basis of value-subtypes Empty subclass failure: Creating a class that fails the "Empty Subclass Test" by behaving differently from a class derived from it without modifications God object: Concentrating too many functions in a single part of the design (class) Object cesspool: Reusing objects whose state does not conform to the (possibly implicit) contract for re-use Object orgy: Failing to properly encapsulate objects permitting unrestricted access to their internals Poltergeists: Objects whose sole purpose is to pass information to another object Sequential coupling: A class that requires its methods to be called in a particular order Singletonitis: The overuse of the singleton pattern Yet Another Useless Layer: Adding unnecessary layers to a program, library or framework. This became popular after the first book on programming patterns. Yo-yo problem: A structure (e.g., of inheritance) that is hard to understand due to excessive fragmentation
