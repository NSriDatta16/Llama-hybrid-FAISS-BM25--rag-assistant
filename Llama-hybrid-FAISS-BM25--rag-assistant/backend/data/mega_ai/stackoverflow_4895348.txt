[site]: stackoverflow
[post_id]: 4895348
[parent_id]: 4895283
[tags]: 
When you define a free-standing function, "this" refers to the global window object. When that is the case, you might as well just use the global variable explicitly to avoid any chance of "this" from being usurped from .apply() or .call()... provided that is the desired behavior. function run(arg) { window.ran = window.ran || false; if (!window.ran) init(); /* code */ window.ran = true; } As a side note, if you define a function as a property of an object, "this" refers to the owning object. Note that "this" is a reference to a function's owner, and the owner depends on the context. EDIT: also, as a followup to @Anurag's suggestion, is this unsuitable? var run = (function createRun() { var ran = false; return function(arg) { if (!ran) init; // code ran = true; }; })(); run(arg);
