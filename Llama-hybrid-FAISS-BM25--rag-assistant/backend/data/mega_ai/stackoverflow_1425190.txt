[site]: stackoverflow
[post_id]: 1425190
[parent_id]: 1425084
[tags]: 
The best way I can think of is to create your own custom AppView and have all your controllers use that: class myController extends AppController { var view = 'AppView'; ... } Then, somewhere in your AppView, you'd want to do something like: function __construct(&$controller, $register){ parent::__construct($controller,$register); $this->addScript(' controller . '/' . $this->action . '.js"> '); } But I'd take a step back and think about a few things, first. How big are your scripts, on average? Is the overhead of an external script call (before the script is cached by the client) better than adding a few hundred bytes to your main output stream (by just sticking the script into the page, inline)? Perhaps you'd be better of somewhere in the middle -- split your scripts up by controller, but not action. That way, after the first visit to any action, the client has all scripts for all actions. This way, you avoid a big initial download for all the application's script, but you avoid adding N http round-trips (where N is the number of actions a brand new user visits). Another way to approach the problem is to do it all in javascript. Just figure out a lazy-loading scheme. So your app just loads a very small loader.js, and that script figures out which other javascript sources to pull in. Note: I've never tested my extend-the-view hack, but I bet it'll work if you really want to do this.
