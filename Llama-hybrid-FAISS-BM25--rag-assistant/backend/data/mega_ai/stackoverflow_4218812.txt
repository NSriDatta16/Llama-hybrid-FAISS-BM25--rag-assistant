[site]: stackoverflow
[post_id]: 4218812
[parent_id]: 
[tags]: 
MVVM Listbox Update Content Maintain Selected Item Silverlight

I've been reading a lot about MVVM (using Laurent Bugnion's library in specific) and I'm constantly struggling to determine how to do things in MVVM that were otherwise easy with code behind. Here's just one example where I suspect I'm doing things the hard way. If anyone has the time to read all this, perhaps they can comment on the sanity of my approach. :) I have a list box bound to a ViewModel like so: The ItemSource is an ObservableCollection of Fruit objects: public class Fruit { public string Name { get; set; } public int Quantity { get; set; } public Fruit() { } public Fruit(string name, int quantity) { this.Name = name; this.Quantity = quantity; } } It is defined in the ViewModel as: // Property FruitBasket public const string FruitBasketPropertyName = "FruitBasket"; private ObservableCollection _fruitBasket = null; public ObservableCollection FruitBasket { get { return _fruitBasket; } set { if (_fruitBasket == value) return; _fruitBasket = value; // Update bindings, no broadcast RaisePropertyChanged(FruitBasketPropertyName); } } The bound SelectedItem property is as such: //Property SelectedFruit public const string SelectedFruitPropertyName = "SelectedFruit"; private Fruit _selectedFruit = null; public Fruit SelectedFruit { get { return _selectedFruit; } set { if (_selectedFruit == value) return; var oldValue = _selectedFruit; _selectedFruit = value; // Update bindings, no broadcast RaisePropertyChanged(SelectedFruitPropertyName); } } Then, the list is populated on the construction of the ViewModel. Now, I add a RelayCommand to a button on the presentation page that executes a method which increments the quantity of the selected item. Note that I am not using the parameter yet, but "Bob" is a placeholder for some changes for later. Here's the code for the command: // Property addMoreCommand public RelayCommand addMoreCommand { get; private set; } ... //Init relays (this is in the constructor) addMoreCommand = new RelayCommand(AddFruit, CanExecute); ... public void AddFruit() { //Increment the fruit SelectedFruit.Quantity++; //Save the previous selected item Fruit oldSelectedItem = SelectedFruit; //We have to have a new list in order to get the list box to refresh FruitBasket = new ObservableCollection (FruitBasket); //Reselect SelectedFruit = oldSelectedItem; } public bool CanExecute() { return true; //for now } Now this does work, but I have some problems with it: First, I feel like there are a lot of conditions that have to come together for this to work and I wonder if I'll get so lucky trying to move some Telerik Drag and Drop code into MVVM. Second, it seems like a pretty poor performance approach to recreate the list like that. Lastly, it seems like this would be easier in code behind (though I'm not 100% certain I still won't have to rebuild that list). Does anyone have any thoughts on my approach or perhaps even... suggestions to make things easier? Am I just missing something obvious here? Thanks -Driodilate :]
