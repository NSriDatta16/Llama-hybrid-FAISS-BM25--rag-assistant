[site]: datascience
[post_id]: 92860
[parent_id]: 
[tags]: 
Modeling Scaled Residuals

I found a good model for a time series forecasting problem I have but it doesn't allow for covariates, which I need to include a few of (date-based events). The approach I came up with to deal with this was to run a regular linear regression on the events and the dependent variable and then feed the residual training errors from the regression into a time series forecasting model (Theta to be exact). The time series model would then project the "predicted" error and I would simply adjust my linear regression forecast using that forecast. This seems to work in theory and somewhat in practice, but I'm having issues transforming the residuals to conform to the requirements of the Theta model implementation (it requires non-negative numbers). My approach was simply to scale the residuals (min/max), forecast them, then inverse scale them and add to the regression predictions based only the on event features. The issue seems to be the scale I pick actually effects the forecast results for some reason (see code below). Any reason why this is the case? trian = nc[:wl] test = nc[wl:] wl = wl + stride lr = LinearRegression() model = lr.fit(trian[['business_builder_bonus']], trian['new_clients']) preds = model.predict(trian[['business_builder_bonus']]) actuals = trian['new_clients'] residuals = actuals - preds #Residuals mms = MinMaxScaler(feature_range=(1, 2)) r = mms.fit_transform(residuals.values.reshape(-1, 1)) r = pd.Series(r.flatten()) tf = ThetaForecaster(sp = 12) tf.fit(r) t = tf.predict(1) pred = model.predict(test[['business_builder_bonus']])[0] adj = mms.inverse_transform(t.values.reshape(-1, 1))[0] adj_pred = pred + adj print(adj_pred)
