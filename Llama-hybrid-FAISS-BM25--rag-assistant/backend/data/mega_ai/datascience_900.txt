[site]: datascience
[post_id]: 900
[parent_id]: 700
[tags]: 
I think hierarchical clustering would be more time efficient in your case (with a single dimension). Depending on your task, you may implement something like this: Having N datapoints d i with their 1-dimension value x i : Sort datapoints based on their x i value. Calculate distances between adjacent datapoints (N-1 distances). Each distance must be assigned a pair of original datapoints (d i , d j ). Sort distances in descending order to generate list of datapoint pairs (d i , d j ), starting from the closest one. Iteratively unite datapoints (d i , d j ) into clusters, starting from beginning of the list (the closest pair). (Depending on current state of d i and d j , uniting them means: (a) creating new cluster for two unclustered datapoints, (b) adding a datapoint to existing cluster and (c) uniting two clusters.) Stop uniting, if the distance is over some threshold. Create singleton clusters for datapoints which did not get into clusters. This algorithm implements single linkage clustering. It can be tuned easily to implement average linkage. Complete linkage will be less efficient, but maybe easier ones will give good results depending on your data and task. I believe for 200K datapoints it must take under second, if you use proper data structures for above operations.
