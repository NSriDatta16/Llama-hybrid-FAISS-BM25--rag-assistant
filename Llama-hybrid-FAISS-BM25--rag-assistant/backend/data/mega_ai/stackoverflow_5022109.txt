[site]: stackoverflow
[post_id]: 5022109
[parent_id]: 
[tags]: 
mvvm friendly approach to pan/zoom gestures

My application is along the lines of a standard Bing map example where I'm essentially placing objects at defined x,y locations in the canvas and rendering them. Instead of a Bing map acting as the background on my canvas I actually have a bunch of line/path directives to draw the underlying content and need the placed objects to "stick" to this underlying content as the user pans/zooms. I'm using the mvvm framework (specifically MVVM light) and want the final solution to be mvvm-friendly but for now need to solve the issue of my objects not sticking to the underlying "map" when the user pans/translates. My main view looks like: and I've got various data templates defined for the various types of LocationViewModels (RestaurantViewModel, ParkingGarageViewModel, etc..) to render each location appropriately at the desired x, y location using their view. right now, the code behind in my main view looks like: private void manipulatingStarting(object sender, System.Windows.Input.ManipulationStartingEventArgs e) { // just let the user pan/translate for now e.Mode = System.Windows.Input.ManipulationModes.Translate; } private void manipulationDelta(object sender, System.Windows.Input.ManipulationDeltaEventArgs e) { MatrixTransform transform = viewContent.RenderTransform as MatrixTransform; if (transform != null) { Matrix matrix = transform.Matrix; matrix.Translate(e.DeltaManipulation.Translation.X, e.DeltaManipulation.Translation.Y); transform.Matrix = matrix; e.Handled = true; } } this is allowing the user to pan/translate the MapView content but the objects from the ItemsControl bound to the canvas aren't moving with the user's gestures. Do I need to somehow hook up the manipulation event to update the relative (x,y) of each of the items in the ItemsControl?
