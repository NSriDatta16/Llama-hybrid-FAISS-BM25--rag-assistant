[site]: stackoverflow
[post_id]: 3906233
[parent_id]: 3899285
[tags]: 
I think your transition will have two-parts: Get used to running GNU/Linux, or another free software OS, as a user . Even though I'm not a professional programmer myself, I'll allow myself to imagine how hard it must be to change OS and frameworks when you're used to doing something one way all day long for many years. Don't underestimate this! Make sure to spend some time getting comfortable with your OS as a user -- having an extra layer of unfamiliarity will probably only upset and annoy you. The actual developer stuff. I'll focus on point 1, since others have already answered 2 well. Some unordered thoughts follow. Make sure that you recognize that 1. will take time. You didn't become a Windows poweruser in a few weeks or even months, did you? As has been mentioned by others, a nice way to save time while doing this is starting to use the OS as your day-to-day one. Don't keep it far away on a VPS! Use it for browsing SO, use it for sending e-mail, use it for learning. Only then is it natural to start using it for developing. There is nothing like actually having a real problem to learn the tools neccessary to fix said problem. I'm sure you know this very well from your job :-) Get acquainted with the differences of philosophy between Windows and your new OS. I'll mention two examples worth investigating and learning more about right away: 1: In GNU/Linux, a central package manager usually handles (almost) all of the software on your system. It takes care of updates and security fixes, and make sure you don't get a system full of cruft. For Debian/Ubuntu, the system is called apt, and there's tonnes you can read about it. 2: With such a nice package manager in place, shared libraries and dependencies in general can be handled properly -- there is no need for every piece of software to drag along with it everything it needs. Yes, disk space is cheap, but the Linux/BSD way is certainly a more Ã¦sthetically pleasing way of doing things. As a developer, you probably have at least some interest in the general workings of the system, so get more than rudamentary familiarity with how your new OS works. I'm not talking about code-level stuff here, I'm talking about how it all "hangs together". For a developer such as yourself, a nice introduction could probably be had by trying to package a piece of software for your distro of choice (for Debian/Ubuntu, there is a nice guide ). To sum it all up: Take it slowly, and recognize that you didn't learn to be efficient in your current setting overnight. Treat it all like learning a very unrelated foreign language. As for the actual developer stuff, point 2, you'll certainly discover that Python (and probably Ruby, which I'm not familiar with) feels much more at home in your new OS than in your old. Edit: Another point I might add is that you should use the fact that you're a programmer in two ways. Firstly, when asking for help from other free software users, you'll tend to feel much more welcome if your question can be phrased in a technically accurate manner. Secondly, use the source, Luke ; although it's not always a practical solution, don't forget that having the source code freely available and modifiable can be a real advantage for someone who's a good programmer.
