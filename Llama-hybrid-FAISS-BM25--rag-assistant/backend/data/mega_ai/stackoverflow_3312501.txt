[site]: stackoverflow
[post_id]: 3312501
[parent_id]: 3311388
[tags]: 
One problem with your question: You provided no actual rendering/texture generation code. Would I be better off using some other approach? The simplest thing you can do is to make sure your textures have sizes equal to power of two. I.e. instead of 1024x768 use 1024x1024, and use only part of that texture. Explanation: although most of modern hardware supports non-pow2 textures, they are sometimes treated as "special case", and using such texture MAY produce performance drop on some hardware. I assumed OpenGL could do zillions of polygons a second. Is there something I am missing here? Yes, you're missing one important thing. There are few things that limit GPU performance: 1. System memory to video memory transfer rate (probably not your case - only for dynamic textures\geometry when data changes every frame). 2. Computation cost. (If you write a shader with heavy computations, it will be slow). 3. Fill rate (how many pixels program can put on screen per second), AFAIK depends on memory speed on modern GPUs. 4. Vertex processing rate (not your case) - how many vertices GPU can process per second. 5. Texture read rate (how many texels per second GPU can read), on modern GPUs depends on GPU memory speed. 6. Texture read caching (not your case) - i.e. in fragment shader you can read texture few hundreds times per pixel with little performance drop IF coordinates are very close to each other (i.e. almost same texel in each read) - because results are cached. But performance will drop significantly if you'll try to access 100 randomly located texels for every pixels. All those characteristics are hardware dependent. I.e., depending on some hardware you may be able to render 1500000 polygons per frame (if they take a small amount of screen space), but you can bring fps to knees with 100 polygons if each polygon fills entire screen, uses alpha-blending and is textured with a highly-detailed texture. If you think about it, you may notice that there are a lot of videocards that can draw a landscape, but fps drops when you're doing framebuffer effects (like blur, HDR, etc). Also, you may get performance drop with textured surfaces if you have built-in GPU. When I fried PCIEE slot on previous motherboard, I had to work with built-in GPU (NVidia 6800 or something). Results weren't pleasant. While GPU supported shader model 3.0 and could use relatively computationally expensive shaders, fps rapidly dropped each time when there was a textured object on screen. Obviously happened because built-in GPU used part of system memory as video memory, and transfer rates in "normal" GPU memory and system memory are different.
