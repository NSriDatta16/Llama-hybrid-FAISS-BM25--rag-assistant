[site]: stackoverflow
[post_id]: 1575552
[parent_id]: 
[tags]: 
Process 40M of documents (and index) as fast as possible

Have a good day. So my problem is basically this, I need to process 37.800.000 files. Each "file" is really more than that, what I have is: 37.800.000 XML documents. More than 120.000.000 of Tiff images. Each of the XML documents reference one or more Tiff images and provides a set of common keywords for the images it represent. What I need to build is a system that parse each one of the XML files (wich not only have ther keywords I need, but a lot of garbage). For each of the files it needs to store the index on a database (as columns) and the path of the images (also in the database), the path only because I don't think is a good idea to store also the images inside. The final purpose is that users can search the db using the index keywords and the system loads the image or images associated with that index. I already build the parser using XPath, and also define the schema of the db (wich is simple). But I'm stucked with two things, that causes my system to work very slow and ocassionally throws SQLExceptions: I guess that, in order to don't full the pc memory while processing files I need a kind of pagination code but inverse, in order to send the corresponding the items to the db (as, say, packages every 1000 documents), so, how to implement that is the first of my problems. Second one is that the XML files are not consecutive named, so I need to deal with duplicates like this way: when trying to index and existing image or images (By looking if its unique keyname is also in the db), i need to compare that image index date, with the latest indexed image to see wich of duplicates must go ( system's only matter about the latest index, by looking on the index file date keyword). Anyone have an idea of how to solve this? I'm working with Java for the parser and JSP for the images search portal, also using MySQL. Thank's in advance. This is the structure of one of the Index file. The Image file is inside the "dwFileName" attribute of the "FileInfo" element. The file name of the current index document is "DW5BasketFileName". If there are several images with this same index, there are more index files that are equals except for the extension (it starts with 001 and keep counting. The average size of every document is 4KB. 36919 1 1 2 DIGITAD1 0 ESCANER1 2009-07-23T21:41:18 2009-07-24T14:36:03 10186028 85091039325 DYMINSKI MORALES JHONATAN OSCAR 1985-10-10T00:00:00 ESCANER1 2009-07-24T14:37:28 16 ESCANER1 2009-07-24T14:37:29 16 ESCANER1 2009-07-24T14:37:31 16 ESCANER1 2009-07-24T14:37:33 16 ESCANER1 2009-07-24T14:37:35
