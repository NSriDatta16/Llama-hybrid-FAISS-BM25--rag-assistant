[site]: stackoverflow
[post_id]: 3437749
[parent_id]: 3437731
[tags]: 
Unless you use fixed-size buffers in unsafe code, it will be a reference. In general, it doesn't matter whether a variable is contained within a struct or a class - or indeed whether it's a local variable: the type of the variable decides whether the value is a reference or whether it contains the data directly. Aside from the fixed-size buffers I've mentioned, arrays are always reference types in .NET. (There's also stackalloc which looks a bit like an array allocation - it allocates a block of memory on the stack. Again, this is only for use in unsafe code, and very rarely encountered in my experience.) In the example you've given (suitably adjusted to make it compile) Words would definitely be a reference. In particular, if you assign the value to refer to a particular array and then change the contents of that array, the changes will be visible via the struct's variable. (I'd also strongly recommend that you don't have public fields or mutable value types. Hopefully this was just for the sake of an example though :) EDIT: To answer the updated question, don't send data like that . It's a horribly fragile way of serializing anything. There are various better options: Use .NET binary serialization (also somewhat fragile in terms of versioning, and not cross-platform) Use XML serialization (probably overkill in this case) Use a third-party serialization framework (e.g. Thrift or Protocol Buffers) Hand-roll serialization with a "ToByteArray" or "WriteToStream" method in your class which serializes each value explicitly. You might want to use BinaryWriter for this.
