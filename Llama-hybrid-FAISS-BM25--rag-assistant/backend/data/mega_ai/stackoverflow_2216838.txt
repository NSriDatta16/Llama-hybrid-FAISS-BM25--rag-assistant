[site]: stackoverflow
[post_id]: 2216838
[parent_id]: 
[tags]: 
Serialization for document storage

I write a desktop application that can open / edit / save documents. Those documents are described by several objects of different types that store references to each other. Of course there is a Document class that that serves as the root of this data structure. The question is how to save this document model into a file. What I need: Support for recursive structures. It must be able to open files even if they were produced from slightly different classes. My users don't want to recreate every document after every release just because I added a field somewhere. It must deal with classes that are not known at compile time (for plug-in support). What I tired so far: XmlSerializer -> Fails the first and last criteria. BinarySerializer -> Fails the second criteria. DataContractSerializer : Similar to XmlSerializer but with support for cyclic (recursive) references. Also it was designed with (forward/backward) compatibility in mind: Data Contract Versioning . [edit] NetDataContractSerializer : While the DataContractSerializer still requires to know all types in advance (i.e. it can't work very well with inheritance), NetDataContractSerializer stores type information in the output. Other than that the two seem to be equivalent. [edit] protobuf-net : Didn't have time to experiment with it yet, but it seems similar in function to DataContractSerializer, but using a binary format. [edit] Handling of unknown types [edit] There seem two be two philosophies about what to do when the static and dynamic type differ (if you have a field of type object but a, lets say, Person-object in it). Basically the dynamic type must somehow get stored in the file. Use different XML tags for different dynamic types. But since the XML tag to be used for a particular class might not be equal to the class name, its only possible to go this route if the deserializer knows all possible types in advance (so that he can scan them for attributes). Store the CLR type (class name, assembly name & version) during serialization. Use this info during deserialization to instantiate the right class. The types must not be known prior to deserialization. The second one is simpler to use, but the resulting file will be CLR dependent (and less sensitive to code modifications). Thats probably why XmlSerializer and DataContractSerializer choose the first way. NetDataContractSerializer is not recomended because its using the second approch (So does BinarySerializer by the way). Any ideas?
