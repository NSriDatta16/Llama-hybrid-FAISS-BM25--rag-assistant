[site]: stackoverflow
[post_id]: 1870480
[parent_id]: 1870455
[tags]: 
You need to do it yourself, which on the other hand is not very hard: private void TreeView_AfterCheck(object sender, TreeViewEventArgs e) { SetChildrenChecked(e.Node, e.Node.Checked); } private void SetChildrenChecked(TreeNode treeNode, bool checkedState) { foreach (TreeNode item in treeNode.Nodes) { item.Checked = checkedState; } } This takes care of both checking and unchecking all children (regardless of how many levels down there may be child nodes). Update Expanded code sample that will also check/uncheck parent node if all of its child nodes are checked or unchecked manually (not thoroughly tested, could probably be done more elegantly): private void TreeView_AfterCheck(object sender, TreeViewEventArgs e) { SetChildrenChecked(e.Node, e.Node.Checked); if (e.Node.Parent != null) { bool setParentChecked = true; foreach (TreeNode node in e.Node.Parent.Nodes) { if (node.Checked != e.Node.Checked) { setParentChecked = false; break; } } if (setParentChecked) { e.Node.Parent.Checked = e.Node.Checked; } } } private void SetChildrenChecked(TreeNode treeNode, bool checkedState) { foreach (TreeNode item in treeNode.Nodes) { if (item.Checked != checkedState) { item.Checked = checkedState; } } } The if-block that is added in the SetChildrenChecked method will prevent a StackOverflowException in the case where you check a node with child nodes, they get checked, and when the last one is checked the parent (the one you clicked on) gets cecked and triggers the AfterCheck event again (which surprises me a bit; I would not expect the event to be raised when the Checked property value does not change but rather just gets assigned the same value it already had, but then again the event is called AfterCheck , not AfterCheckedChanged ).
