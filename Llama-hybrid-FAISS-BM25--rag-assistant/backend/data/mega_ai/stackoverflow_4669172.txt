[site]: stackoverflow
[post_id]: 4669172
[parent_id]: 4667903
[tags]: 
You seem to be asking two things here, how to test an exception and how to assert that a value matches either of two possible expected values. To test for an exception, you can either use a JUnit4 annotation: @Test(expected=MySystemException.class) public void testException() { amethod(); } or use a try-catch in your test: @Test public void testException() { try { amethod(); fail("MySystemException expected"); } catch (MySystemException e) { // Success! } } And if you have only one message, in the try-catch version you can assert that you got it with an AssertEquals in the catch block. The best testing would have separate tests for your two scenarios, and expect the correct single message. Better code might in fact have distinct exceptions for the two situations. But the need for a more complex assertion than simple equality does come up anyway, and there's an elegant solution for it in Hamcrest matchers. Using that for this situation, you could write something like (untested - don't trust my syntax completely): @Test public void testException() { try { amethod(); fail("MySystemException expected"); } catch (MySystemException e) { String expectedMessage1 = "An error occured due to case 1 being incorrect."; String expectedMessage2 = "An error occured as case 2 could not be found"; assertThat(e.getMessage(), anyOf(equalTo(expectedMessage1), equalTo(expectedMessage2))); } }
