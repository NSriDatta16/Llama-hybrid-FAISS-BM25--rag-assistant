[site]: stackoverflow
[post_id]: 1598344
[parent_id]: 1331630
[tags]: 
You should (almost) never overload a method with a boolean flag. There are a variety of reasons: To avoid confusion, methods should do one thing and one thing only. A boolean flag is a clear indication that a method does more than one thing (from Robert C. Martin ). Reading the code for such a method makes it unclear exactly what is happening. If I am new to the code I see: MethodA("This is a message", false); It is not entirely clear what false means without going to look at the code. This fails the principle that the intent of a method should be clear from its name alone. It is sometimes an unecessary binding to a binary choice when more than one choice might need to be added later. For example: let's say you have a method: public UpdateCustomer(String name, boolean isPremiumCustomer); If you later decide to add different categories of customer then you will have to refactor every line of code that calls this method. A better example in your situation is if you wanted to have a method such that you logged only if a debug flag was turned on. The alternative approaches are roughly as follows: Create a function with a different name. This is the approach you have taken and probably the one I prefer. In most cases it is enough to have a: doSomething and a doSomethingADifferentWay as in your example. If however you need a second method that takes a flag then you should consider option 2: Create an enum that describes the options. In your case this would be something like: enum EnableLogging { ENABLE_LOGGING, DISABLE_LOGGING } Then you write your code as: MethodA("A Message", DISABLE_LOGGING); Which is at least explicit. (Note: This solution comes from Item 40 in Effective Java 2nd Edition by Joshua Bloch, but applies equally well to other languages).
