[site]: stackoverflow
[post_id]: 4844547
[parent_id]: 4842921
[tags]: 
Algorithm that uses hashing takes 10-900 microseconds in Python (average: 200 median: 60): #!/usr/bin/env python import random L = frozenset(random.sample(xrange(2**31), 10**6)) print next(((a,b,a+b) for a in L for b in L if (a + b) in L), None) It is O(N**2) but it seems it is fast enough. For comparison, the amortized O(N) operation of creating the frozenset takes 270 milliseconds (1000 times slower then the search) and to create random list it takes 0.9 seconds . Note: random.sample doesn't return repeated elements if an input sequence contains unique elements therefore frozenset doesn't discard any elements in the above example. To solve the problem for a random sequence that allows repeated elements we should use two data structures: #!/usr/bin/env python import random L = [random.randrange(2**31) for _ in xrange(10**6)] S = frozenset(L) print len(L), len(S) print next(((a, b, a+b) for a in L for b in L if (a + b) in S), None) Output 1000000 999762 (2055933464, 83277289, 2139210753)
