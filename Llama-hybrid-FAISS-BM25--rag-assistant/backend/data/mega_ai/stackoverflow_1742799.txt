[site]: stackoverflow
[post_id]: 1742799
[parent_id]: 1742756
[tags]: 
The first thing that springs to mind is that it's slower to look up animals > zoos > tenants than simply animals > tenants . And most likely this is a lookup you will do often (for example, "get all animals for a certain tenant, regardless of zoo"). For small to mid-sized applications you can get away with a more normalized structure, but for the sake of efficiency, you should go with extraneous data (and generally speaking, multitenancy applications are not small). Just make sure it doesn't go "out of sync", which is a risk that comes with having redundant data. To answer your last paragraph, the reason is performance, pure and simple. Joins are no bad thing; they help you keep a piece of data in one place rather than three. It's definitely not to prevent bugs. Adding a tenant_id field to more tables will increase the risk of bugs (although for an id that never changes, it wouldn't be as much of an issue).
