[site]: stackoverflow
[post_id]: 1550370
[parent_id]: 
[tags]: 
C++: Polymorphic class template

Consider a class Calendar that stores a bunch of Date objects. The calendar is designed to hold a collection of any type of objects that inherit from Date. I thought the best way to do it is to have a class template such as template class Calendar{ ... } But it struck me that D can now in fact be any class. My question is now, how can I make sure that D is a subclass of the date object? I know how to do this is Java, but I'm still unfamiliar with the C++ syntax. The problem is very much similar to how some collections can only take a template variables that implement Comparable. The header would then look something like public class Calendar { ... } --------------------EDIT: ------------------------------------------ The template argument defines which actual day the calendar refers to. Different date types refer to the same day in different formats. For instance, if I make a Calendar it will be able to take dates in another Date format, say the Julian calendar, or any other date format and present them in Gregorian format. This enables for conversion between calendars in different date formats. So, if I have a Calendar I can easily convert it into a Calendar . Then the following is possible: Calendar cal; std::cout (cal); std::cout and outputs: These events are entered as dates in the Gregorian calendar 2009-12-25 Christmas 2010-01-01 Gregorian new year ---- And printed out as Julian dates 2009-12-13 Christmas 2009-12-19 Gregorian new year ------------- New edit: ---------------------- The last edit now makes more sense. I had a slight disagreement with the formatting. Thanks for all the answers. I'm a Computer Science student on my third year, and I'd say I'm fairly familiar with OO and related concepts like Polymorphism etc. The purpose of this post was to find out whether or not there was a way in C++ to express a condition for a template argument the same way that it is in Java and solve the problem in a concise, elegant and intuitive way.
