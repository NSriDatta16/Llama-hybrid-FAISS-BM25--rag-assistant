[site]: stackoverflow
[post_id]: 267535
[parent_id]: 267418
[tags]: 
I would hardly call it elegant, but here's my version of your code using only templates for computation (along with a test thing) -- #include template struct JunkDivBy5 { static int foo() { return N; } }; template struct Junk { template struct _JunkCond { enum { val = ( N1 != 1 && ( N1 - 1 ) % 5 == 0 ) ? 1 : 0 }; }; template struct _JunkBranch { /* Error */ }; template struct _JunkBranch { typedef JunkDivBy5 Type; }; template struct _JunkBranch { typedef Junk Type; }; static int foo() { return _JunkBranch ::val, N >::Type::foo(); } }; template <> struct Junk { static int foo() { return 0; } }; int main( int argc, char *argv[] ) { std::cout ::foo() ::foo() ::foo() ::foo()
