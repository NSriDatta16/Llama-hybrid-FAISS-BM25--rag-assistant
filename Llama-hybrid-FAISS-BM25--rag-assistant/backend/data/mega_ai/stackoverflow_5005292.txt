[site]: stackoverflow
[post_id]: 5005292
[parent_id]: 
[tags]: 
copying between interleaved openGL Vertex Buffer Objects

using opengl 3.3, radeon 3870HD, c++.. I got question about interleaved arrays of data. I got in my application structure in vector, which is send as data to buffer object. Something like this: struct data{ int a; int b; int c; }; std::vector datVec; ... glBufferData(GL_ARRAY_BUFFER, sizeof(data)*datVec.size(), &datVec[0], GL_DYNAMIC_DRAW); this is ok I use this thing very often. But what I create is interleaved array so data are like: a1,b1,c1,a2,b2,c2,a3,b3,c3 Now I send this thing down for processing in GPU and with transform feedback I read back into buffer for example b variables. So it looks like: bU1, bU2, bU3 I'd like to copy updated values into interleaved buffer, can this be done with some single command like glCopyBufferSubData? This one isn't suitable as it only takes offset and size not stride (probably it's something like memcpy in c++)... The result should look like: a1, bU1, c1, a2, bU2, c2, a3, bU3, c3 If not is there better approach than these 2 mine? map updated buffer, copy values into temp storage in app, unmap updated, map data buffer and itterating through it set new values separate buffers on constant buffer and variable buffer. constant will stay same over time but using glCopyBufferSubData the variable one can be updated in single call.. Thanks
