[site]: stackoverflow
[post_id]: 3639240
[parent_id]: 3639094
[tags]: 
I think efficiency is hardly a concern with only 10 strings, but maybe you don't want to rely on it only being ten. Concatenation of Strings creates a new String object in memory, since String objects are immutable. This also suggest other String operations may create new instances, like replace. Usually this is avoided by using StringBuilder. StringBuilder avoids this by using a buffer which it operates on; when the value of the StringBuilder is concatenated with another String the contents are added to the end of the buffer. However there are caveats, see this paragraph : Performance considerations [...] The performance of a concatenation operation for a String or StringBuilder object depends on how often a memory allocation occurs. A String concatenation operation always allocates memory, whereas a StringBuilder concatenation operation only allocates memory if the StringBuilder object buffer is too small to accommodate the new data. Consequently, the String class is preferable for a concatenation operation if a fixed number of String objects are concatenated. In that case, the individual concatenation operations might even be combined into a single operation by the compiler. A StringBuilder object is preferable for a concatenation operation if an arbitrary number of strings are concatenated; for example, if a loop concatenates a random number of strings of user input. So a (contrived) case like this should probably not be replaced with StringBuilder: string addressLine0 = Person.Street.Name + " " + Person.Street.Number + " Floor " + Person.Street.Floor; ...as the compiler might be able to reduce this to a more efficient form. It is also highly debatable if it would inefficient enough to matter in the greater scheme of things. Following Microsoft's recommendations you probably want to use StringBuilder instead (like the other highly adequate answers show.)
