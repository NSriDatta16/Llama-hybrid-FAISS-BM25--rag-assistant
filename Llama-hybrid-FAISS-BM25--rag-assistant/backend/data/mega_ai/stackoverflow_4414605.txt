[site]: stackoverflow
[post_id]: 4414605
[parent_id]: 
[tags]: 
How can Linux ptrace be unsafe or contain a race condition?

I'd like to implement a sandbox by ptrace() ing a process I start and all its children would create (including grandchildren etc.). The ptrace() parent process, i.e. the supervisor. would be a simple C or Python program, and conceptually it would limit filesystem access (based on the path name and the access direction (read or write) and socket access (e.g. disallowing socket creation). What should I pay attention to so that the ptrace() d process and its children (recursively) won't be able to bypass the sandbox? Is there anything special the supervisor should do at fork() time to avoid race conditions? Is it possible to read the filename arguments of e.g. rename() from child process without a race condition? Here is what I've already planned to do: PTRACE_O_TRACEFORK | PTRACE_O_TRACEVFORK | PTRACE_O_TRACECLONE to avoid (some) race coditions when fork() ing disallow all system calls by default, and compose a whitelist of allowed system calls make sure that the *at() system call variants (such as openat ) are properly protected What else should I pay attention to?
