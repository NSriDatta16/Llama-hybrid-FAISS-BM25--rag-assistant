[site]: stackoverflow
[post_id]: 3461123
[parent_id]: 3461010
[tags]: 
You can't really do it in Java. All the answers mentioning finalizers are really not what you're after. The best you can do is enqueue a PhantomReference in a ReferenceQueue and poll until you get the reference. final ReferenceQueue rq = new ReferenceQueue(); final PhantomReference phantom = new PhantomReference( referenceToObjectYouWantToTrack, rq ); You want to read Peter Kofler's answer here (it explains what a PhantomReference is): Have you ever used Phantom reference in any project? Very interesting read here: http://www.kdgregory.com/index.php?page=java.refobj Basically, I'm using a PhantomReference in a project where a very special kind of cache needs to be computed once, when the software is installed. To efficiently compute this (disk-based) cache, a gigantic amount of memory is needed (the more the better). I'm using a PhantomReference to track "nearly exactly" when that gigantic amount of memory is released.
