[site]: stackoverflow
[post_id]: 1889957
[parent_id]: 1889076
[tags]: 
Before deciding whether to use the tag or not, you need to understand how it works, what it can be used for and what the implications are and finally outweigh the advantages/disadvantages. The tag mainly eases creating relative links in templating languages as you don't need to worry about the current context in every link. You can do for example ... ... home faq contact ... instead of ... home faq contact ... Please note that the value ends with a slash, otherwise it will be interpreted relative to the last path. As to browser compatibility, this causes only problems in IE. The tag is in HTML specified as not having an end tag , so it's legit to just use without an end tag. However IE6 thinks otherwise and the entire content after the tag is in such case placed as child of the element in the HTML DOM tree. This can cause at first sight unexplainable problems in Javascript/jQuery/CSS, i.e. the elements being completely unreachable in specific selectors like html>body , until you discover in the HTML DOM inspector that there should be a base (and head ) in between. A common IE6 fix is using an IE conditional comment to include the end tag: If you don't care about the W3 Validator, or when you're on HTML5 already, then you can just self-close it, every webbrowser supports it anyway: Closing the tag also instantly fixes the insanity of IE6 on WinXP SP3 to request resources with an relative URI in src in an infinite loop. Another potential IE problem will manifest when you use a relative URI in the tag, such as or . This will fail in IE6/7/8. This is however not exactly browser's fault; using relative URIs in the tag is namely at its own wrong. The HTML4 specification stated that it should be an absolute URI, thus starting with the http:// or https:// scheme. This has been dropped in HTML5 specification . So if you use HTML5 and target HTML5 compatible browsers only, then you should be all fine by using a relative URI in the tag. As to using named/hash fragment anchors like , query string anchors like and path fragment anchors like , with the tag you're basically declaring all relative links relative to it, including those kind of anchors. None of the relative links are relative to the current request URI anymore (as would happen without the tag). This may in first place be confusing for starters. To construct those anchors the right way, you basically need to include the URI, hash fragment query string path fragment where ${uri} basically translates to $_SERVER['REQUEST_URI'] in PHP, ${pageContext.request.requestURI} in JSP, and #{request.requestURI} in JSF. Noted should be that MVC frameworks like JSF have tags reducing all this boilerplate and removing the need for . See also a.o. What URL to use to link / navigate to other JSF pages .
