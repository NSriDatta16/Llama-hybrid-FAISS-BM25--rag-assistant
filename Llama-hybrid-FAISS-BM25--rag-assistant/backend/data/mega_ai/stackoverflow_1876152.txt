[site]: stackoverflow
[post_id]: 1876152
[parent_id]: 1875947
[tags]: 
The declaration is pretty much useless and quite different from the original intent. Compilers have taken much more liberty wrt what and what not to inline (IMO). It's a hint to the compiler, using it will help you and have the intended significance only sometimes. If you need to write performance critical programs, do not rely on the compiler (knowledge of performance & optimization is not learned in a day). There's usually a way to override the compiler's judgement (not just hint at your preference), to force inlining. This is the way I declare a function/method inline, more than 95% of the time (knowing also when it is implicit). If/When you know you'd need to know how to inline properly, then employ force-inlining as well, but do learn when and how to use it. Inlining is not a silver bullet to better performance; it can have negative effects. Abuse of inlining can have some scary consequences in extreme cases, but usually performance is a little worse and binaries are larger when used improperly. Proper use of inlining can have considerably positive results. Inlining is also helpful to remove symbols which would otherwise be exported, reducing the binary, depending on the number of instances and size. Another thing: You'll get different linkage with C++.
