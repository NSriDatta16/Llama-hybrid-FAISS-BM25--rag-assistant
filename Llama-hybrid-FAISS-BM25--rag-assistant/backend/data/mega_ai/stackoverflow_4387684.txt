[site]: stackoverflow
[post_id]: 4387684
[parent_id]: 
[tags]: 
WP7 - XmlException - Data at the root level is invalid

Having trouble working out why my xml updates are failing on IsolatedStorage and was wondering if anyone else has had a similar problem. I'm trying to update a file by iterating through all certain nodes and updating them individually. For some reason, it fails half way through and then states the data is invalid at root level and that the invalid data is at the end of the file??? The code is as follows: I make a call to the Update method for every exercise: foreach (var exercise in program.Exercises) { UpdateExercise(program, exercise, true); } Which uses a static property and calls the data source's Update method: public void UpdateExercise(WorkoutProgram program, Exercise entity, bool isConversionUpdate) { ProgramDataSource.Update(program, entity, isConversionUpdate); } This method is then called and fails after a few loops at this line: 'root = XElement.Load(XmlReader.Create(fs));' public void Update(WorkoutProgram program, Exercise exercise, bool isConversionUpdate) { SetupProgramSource(program); XElement root; if (!isConversionUpdate) exercise.ChangeDate = DateTime.Now; using (var store = IsolatedStorageFile.GetUserStoreForApplication()) { if (!store.FileExists(_exerciseFile)) { throw new NotFoundException("The file does not exist!"); } using (var fs = store.OpenFile(_exerciseFile, FileMode.Open, FileAccess.Read)) { root = XElement.Load(XmlReader.Create(fs)); var element = root.Element("Exercises").Elements("Exercise").Where(e => e.Element("ID").Value.ToLower().Equals(exercise.ID.ToString().ToLower())).Single(); element.SetElementValue("Description", exercise.Description); element.SetElementValue("Name", exercise.Name); var exerciseChanges = element.Element("ExerciseChanges"); if (exercise is AnaerobicExercise) { var anaerobicExercise = exercise as AnaerobicExercise; element.SetElementValue("Reps", anaerobicExercise.Repetitions); element.SetElementValue("Sets", anaerobicExercise.Sets); element.Element("Weight").SetElementValue("Amount", anaerobicExercise.Weight.Amount); element.Element("Weight").SetElementValue("Measurement", anaerobicExercise.Weight.Measurement); ... } if (exercise is AerobicExercise) { var aerobicExercise = exercise as AerobicExercise; element.SetElementValue("Distance", aerobicExercise.Distance); element.Element("Duration").SetAttributeValue("hours", aerobicExercise.Duration.Hours); element.Element("Duration").SetAttributeValue("minutes", aerobicExercise.Duration.Minutes); element.Element("Duration").SetAttributeValue("seconds", aerobicExercise.Duration.Seconds); element.SetElementValue("Measurement", aerobicExercise.Measurement); if (!isConversionUpdate) { var exerciseChange = exercise.Changes.OfType ().FirstOrDefault(ec => ec.ChangeDate.Date == exercise.ChangeDate.Date); if (exerciseChange != null) { var changesElement = exerciseChanges.Elements("Changes").First(x => x.Attribute("id").Value.ToLower().Equals(exerciseChange.ID.ToString().ToLower())); changesElement.SetAttributeValue("hours", aerobicExercise.Duration.Hours); changesElement.SetAttributeValue("minutes", aerobicExercise.Duration.Minutes); changesElement.SetAttributeValue("seconds", aerobicExercise.Duration.Seconds); changesElement.SetAttributeValue("distance", aerobicExercise.Distance); var change = exercise.Changes.OfType ().First(ec => ec.ChangeDate.Date == exercise.ChangeDate.Date); change.Duration = aerobicExercise.Duration; change.Distance = aerobicExercise.Distance; } else { var changeDate = new XAttribute("changeDate", string.Format("{0:dd/MM/yyyy}", aerobicExercise.ChangeDate)); var typeAttribute = new XAttribute("type", "Aerobic"); var hoursAttribute = new XAttribute("hours", aerobicExercise.Duration.Hours); var minutesAttribute = new XAttribute("minutes", aerobicExercise.Duration.Minutes); var secondsAttribute = new XAttribute("seconds", aerobicExercise.Duration.Seconds); var distanceAttribute = new XAttribute("distance", aerobicExercise.Distance); var changesElement = new XElement("Changes"); exerciseChange = WorkoutManagerEntityFactory.GetEntityChange (); var idAttribute = new XAttribute("id", exerciseChange.ID.ToString()); changesElement.Add(idAttribute, typeAttribute, hoursAttribute, minutesAttribute, secondsAttribute, distanceAttribute, changeDate); exerciseChanges.Add(changesElement); exerciseChange.ChangeDate = aerobicExercise.ChangeDate; exerciseChange.Distance = aerobicExercise.Distance; exerciseChange.Duration = aerobicExercise.Duration; aerobicExercise.Changes.Add(exerciseChange); } } else { foreach (var aerobicExerciseChange in exercise.Changes.OfType ()) { var changesElement = exerciseChanges.Elements("Changes").First(x => x.Attribute("id").Value.ToLower().Equals(aerobicExerciseChange.ID.ToString().ToLower())); changesElement.SetAttributeValue("hours", aerobicExercise.Duration.Hours); changesElement.SetAttributeValue("minutes", aerobicExercise.Duration.Minutes); changesElement.SetAttributeValue("seconds", aerobicExercise.Duration.Seconds); changesElement.SetAttributeValue("distance", aerobicExercise.Distance); var change = exercise.Changes.OfType ().First(ec => ec.ID == aerobicExerciseChange.ID); change.Duration = aerobicExercise.Duration; change.Distance = aerobicExercise.Distance; } } } } using (var fs = store.OpenFile(_exerciseFile, FileMode.Open, FileAccess.Write)) { root.Save(fs); } } } The XML (reduced version with most exercise nodes removed): 2eec20d2-a278-11df-bc86-00138f82a706 Main workout program for general all over fitness 6E391E75-E75C-49CA-95FC-FEDF03D3ED1A Treadmill Run With a bar-bell on your back, feet shoulder width apart, back straight, knees slightly bent and in line with the feet, slowly go down and then back up. Squats develop power and strength. 4 Kilometres 2eec20c5-a278-11df-bc86-00138f82a706 Squats With a bar-bell on your back, feet shoulder width apart, back straight, knees slightly bent and in line with the feet, slowly go down and then back up. Squats develop power and strength. 10 130 Kilograms 1 2eec20d1-a278-11df-bc86-00138f82a706 Abs With a bar-bell on your back, feet shoulder width apart, back straight, knees slightly bent and in line with the feet, slowly go down and then back up. Squats develop power and strength. 15 0 Kilograms 1 The encoding is UTF-8 without BOM. Anyone seen this before? All thoughts are appreciated (even ones saying my code's crap and needs refactoring). EDIT: Problem with adding: InvalidOperationException - The Parent is missing: private static XElement GetExerciseElement(Exercise entity) { var exerciseElement = new XElement("Exercise"); if (entity is AnaerobicExercise) { var anaerobicExercise = entity as AnaerobicExercise; var exerciseTypeAttribute = new XAttribute("exerciseType", "Anaerobic"); var amountElement = new XElement("Amount", anaerobicExercise.Weight.Amount); var measurementElement = new XElement("Measurement", anaerobicExercise.Weight.Measurement); var weightElement = new XElement("Weight"); var nameElement = new XElement("Name", anaerobicExercise.Name); var descriptionElement = new XElement("Description", anaerobicExercise.Description); var repsElement = new XElement("Reps", anaerobicExercise.Repetitions); var setsElement = new XElement("Sets", anaerobicExercise.Sets); var idElement = new XElement("ID", anaerobicExercise.ID); var exerciseChangesElement = new XElement("ExerciseChanges"); weightElement.Add(amountElement, measurementElement); var exerciseChange = new AnaerobicExerciseChange { ChangeDate = entity.ChangeDate, Amount = anaerobicExercise.Weight.Amount, Sets = anaerobicExercise.Sets, Repetitions = anaerobicExercise.Repetitions }; entity.Changes.Add(exerciseChange); exerciseElement.Add(exerciseTypeAttribute, idElement, nameElement, descriptionElement, repsElement, weightElement, setsElement); exerciseChangesElement.ReplaceWith(GetExerciseChanges(entity, exerciseElement, exerciseChange)); exerciseElement.Add(exerciseChangesElement); } This line in particular: exerciseChangesElement.ReplaceWith(GetExerciseChanges(entity, exerciseElement, exerciseChange));
