[site]: stackoverflow
[post_id]: 2360808
[parent_id]: 2360724
[tags]: 
The "advantage" of from xyz import * as opposed to other forms of import is that it imports everything (well, almost... [see (a) below] everything) from the designated module under the current module. This allows using the various objects (variables, classes, methods...) from the imported module without prefixing them with the module's name . For example >>> from math import * >>>pi 3.141592653589793 >>>sin(pi/2) >>>1.0 This practice (of importing * into the current namespace) is however discouraged because it provides the opportunity for namespace collisions (say if you had a variable name pi prior to the import) may be inefficient, if the number of objects imported is big doesn't explicitly document the origin of the variable/method/class (it is nice to have this "self documentation" of the program for future visit into the code) Typically we therefore limit this import * practice to ad-hoc tests and the like. As pointed out by @Denilson-SÃ¡-Maia, some libraries such as (e.g. pygame) have a sub-module where all the most commonly used constants and functions are defined and such sub-modules are effectively designed to be imported with import * . Other than with these special sub-modules, it is otherwise preferable to ...: explicitly import a few objects only >>>from math import pi >>>pi >>>3.141592653589793 >>> sin(pi/2) Traceback (most recent call last): File " ", line 1, in NameError: name 'sin' is not defined or import the module under its own namespace (or an alias thereof, in particular if this is a long name, and the program references its objects many times) >>>import math >>>math.pi >>>3.141592653589793 etc.. >>>import math as m #bad example math being so short and standard... >>>m.pi >>>3.141592653589793 etc.. See the Python documentation on this topic (a) Specifically, what gets imported with from xyz import * ? if xyz module defines an __all__ variable, it will import all the names defined in this sequence, otherwise it will import all names, except these which start with an underscore. Note Many libraries have sub-modules . For example the standard library urllib includes sub-modules like urllib.request , urllib.errors , urllib.response etc. A common point of confusion is that from urllib import * would import all these sub-modules. That is NOT the case : one needs to explicitly imports these separately with, say, from urllib.request import * etc. This incidentally is not specific to import * , plain import will not import sub-modules either (but of course, the * which is often a shorthand for "everything" may mislead people in thinking that all sub-modules and everything else would be imported).
