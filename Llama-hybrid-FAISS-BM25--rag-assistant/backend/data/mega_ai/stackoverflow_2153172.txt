[site]: stackoverflow
[post_id]: 2153172
[parent_id]: 2146483
[tags]: 
If I understand your situation, there is nothing in your requirements that make things as complex as you seem to be making them. You're also putting way too much emphasis on the merits of automatic vs. manual merging (more on that later). CVS branches would have been another matter, but not with the way SVN handles "branches" (i.e., it doesn't). You could have a primary (unstable or stable) development line and create branches for each customer or release (or both). As features are validated, they either get merged back to the main line so later branches can include those changes or you always merge unidirectionally from a parent branch. Nothing requires you to close the branch and the merge is no less automated than it would have been to support your first (chaotic) diagram given you have multiple concurrent development lines. The requirement that you only merge forward sounds like you just need to merge subset revisions from the main line, revisions after a given branch revision. Doing your merges this way will let you merge changes from arbitrary branches back to the main line as often as you like (as they are confirmed with your customers) and can be applied forward with confidence that only validated changes are getting applied. You can set up automatic merging to track that copy revision (see --stop-on-copy and range-based merges). Release branches then pick up sets of confirmed changes that have occurred from a given point forward. SVN doesn't "track merges" any more than it supports branches (which it doesn't, they are just lightweight copies). You tell it (or svnmerge tells it) ranges to merge and it applies those changes. You can get the effect that you're contractually required to support, regardless. To answer your posed questions: I don't think the model you proposed is very effective. To the contrary, it has increased potential for feature tracking chaos as you may have to scan branches for changes and merge forward multiple times. Moreover, it will undoubtedly confuse developers familiar with SVN and more traditional SVN organizational structures. Sure. That should be fairly independent of the structure you chose too. You're going to need/want to keep track of your revision points regardless (perhaps via some simple scripting at worse). Sure. Branches have effectively no cost in SVN on the server side. The client side has a cost if you do entire root checkouts but that is generally a dumb thing to do regardless. Similarly, there's no problem ignoring/deleting a branch. It's just another change to the global revision hierarchy like any other copy/delete/rename/etc. That should work regardless of the "branching" organizational structure put in place. It sounds like there is a maybe little bit of misunderstanding on what it means to be a "branch" in SVN. You should be able to set up what you want and perform 'manual' merges with relative ease regardless and then later set up automatic merging after a few customer updates so you can understand your merge steps a little better. Cheers!
