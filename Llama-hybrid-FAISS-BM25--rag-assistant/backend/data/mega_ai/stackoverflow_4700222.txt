[site]: stackoverflow
[post_id]: 4700222
[parent_id]: 
[tags]: 
MsTest noob - how to set up testing infrastructure the right way

We are a MSFT shop with a far-reaching MSDN license. After many years of doing things wrong, we finally have to start doing automated testing. My group is the Guinea pigs at this. We need to create what was not there before. We looked at the multitude of options out there. Some people get by just fine with open-source alternatives such as CC.Net , Bamboo , MbUnit , etc. We want to give MsTest , CodedUI , Team Build a good try ... might as well because of MSDN licensing and MSFT focus. The plus and minus of doing things the MSFT way is that MSFT makes monolithic things. You have got to install various tools that play with each other nicely, but with outsiders - not necessarily. The plus is that when things are done correctly, it should all function rather smoothly. There is the option of gated check-ins, of using TFS to store the reports, etc. Frankly, I am confused by all of the options. Our traditional build system was hacked together with a bunch of perl, batch scripts, executables, but now the build team switched to Team Build, which ought to be cleaner, but for the most part it is just a wrapper to the same old perl crap. I am inclined to hack things together for testing too, because I can at least see what the pieces are. So, I envision the poor man's version as: * A dedicated fast computer to run tests * Some script to copy build files (test code as well as product code) over to that computer. * A batch/perl script which would run mstest.exe from command line and execute a few test batches on some by-category filter within some test dlls (the product is so huge, that we do want to organize tests by various categories). * Some script which will invoke the latter script remotely from the build server using psexec.exe (http://technet.microsoft.com/en-us/sysinternals/bb897553), as well as grabbing the xml output from a shared drive, and then sending out an email with results to those who are interested. This can probably work, but then I have to worry about how well error handling can work with so many potential points of failure. It would be nice to configure things the "right way", taking advantage of whatever MSFT has cooked up. I am just not sure where to turn for a good guide. Have you done something like this? Eventually we will want to have a farm of test computers, if we are to run out of the allotted time. Something else of concern is - for coded ui tests to succeed, I think a user has to be logged in, so I am not sure if psexec will be of much help here. Can you share your positive/negative experience, point me to a good guide perhaps? Thanks!
