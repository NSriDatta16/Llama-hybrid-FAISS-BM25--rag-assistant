[site]: stackoverflow
[post_id]: 2773933
[parent_id]: 2771407
[tags]: 
Sorry, I have no solution to your concrete custom Grid problem, but I only have a suggestion how you could do it easier (and, I suppose, how it is meant by the WPF designers). Actually, a Grid is not a control to arrange items . It is a Panel which arranges Controls . So, I suppose, this is (one of) the reason(s) why you are getting into trouble with your solution. What I would use instead, is an ItemsControl (e.g. a ListBox ) with a Canvas as ItemsPanel . Now, you define appropriate properties in your WorkItem (or WorkItemViewModel ) class like XPos and YPos which will be databound to the Canvas.Left and Canvas.Top properties like this: You can then use this item style by assigning the ItemContainerStyle property of the ListBox : ItemContainerStyle="{StaticResource WorkItemStyle}" I do not know how to implement the drag and drop stuff because I have never done that, but obviously you have already done it for your custom Grid , so it should not be a big problem to use it in a ListBox as well. However, if you update the properties of your WorkItem , it should automatically reposition the element. Also, if you add/remove an item to/from your collection ( WorkItemsProperty ), it will automatically be added/removed because the ListBox is data-bound to the collection. You might have to change your WorkItemStyle depending on your scenario. For example, if the ListBox is resized at runtime, you might have to make the positions relative to the container's (Canvas') size. Therefore, you would need a MultiBinding instead of the simple Binding . But that's another story... Now, it is your decision whether you can still move to this approach or whether your Grid is almost finished and you are not willing to change. I know it is hard, but in my eyes, the above approach is the cleaner (and easier!) one!
