[site]: stackoverflow
[post_id]: 3042844
[parent_id]: 3042817
[tags]: 
My question is, Is recycling the tempList2 arraylist object correct? I don't quite know what you mean by "recycling". This doesn't appear to be a case where the application is recycling objects in an attempt to avoid allocating new objects. (That is the normal meaning of "recycling" in Java.) If getXYZ is called multiple times with the same tempList2 object, then this is simply a way of aggregating stuff into a single list. The fact that getXYZ returns an ArrayList leaves open the possibility that the method implementation may be changed to return a different ArrayList instance. That's not a problem per se , but it might be if the caller doesn't assign the result of the call appropriately. If getXYZ is only called once for any given tempList2 object, then this looks a bit strange. In summary, this code looks a bit fishy, and is fragile if someone changes the implementation of getXYZ . However, it is not down-right wrong, and there may be some good reason (or historical reason) for doing things this way that is not apparent in the small chunks of code you included in the question. EDIT - in response to this comment (inlined to make it readable) Actually, the reason for the above code is, I wanted to avoid creating two arraylist objects. For ex: the conventional method would be ArrayList tempList2 = new ArrayList(); tempList2 = getXYZ(tempList1); //method getXYZ getXYZ(ArrayList tempList1) { ArrayList tempList = new ArrayList(); //INSTANTIATED ONLY ONCE //does some logic and adds objects into tempList return tempList; } The real conventional way of doing this would be: ArrayList tempList2 = getXYZ(tempList1); or ArrayList tempList2; // some intermediate lines tempList2 = getXYZ(tempList1); Neither of these require creating the unnecessary ArrayList instance of your approach, and neither require passing 2 ArrayList instances into the getXYZ method.
