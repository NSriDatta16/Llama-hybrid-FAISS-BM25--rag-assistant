[site]: crossvalidated
[post_id]: 407887
[parent_id]: 407852
[tags]: 
It seems to me that you have a multi-level study with 2 random grouping factors: participant and store (presuming you are not only interested in the 5 participants and the 27 stores included in your study, but rather view the 5 participants as representative of a larger set of participants and the 27 stores as representative of a larger set of stores). The 2 random grouping factors are fully crossed , since each participant "visits" each store. For each participant-by-store combination, you obtain a single value of your binary outcome variable, which will tell you whether the participant will make the purchase (1) or will not make the purchase (0). One possible way to analyze the data from your participants would be via a mixed effects binary logistic regression model which will include (at a minimum) a random participant effect and a random store effect. To that end, you would first have to store your data in long format, along these lines: Participant Store Outcome StoreDecor CustomerService Price 1 1 0 High Friendly Low . . 1 Medium Minimal High . . etc. . . 1 27 . . . . . . 5 1 . . . . . . 5 27 To fit the a mixed effects binary logistic regression model to the data specified in this format (Data), you could use the glmer() function from the lme4 package: library(lme4) Data $Participant Participant) Data $Store Store) model This model allows for a 3-way interaction between your predictor variables and uses dummy variable coding for capturing the fixed effects of these variables. However, note that you might want to use deviation coding in your setting, as explained here: http://www.mypolyuweb.hk/~sjpolit/coding_schemes.html and here: enter link description here The above model will produce subject-specific fixed effects for your predictor variables (e.g., effects which refer to a 'typical' participant visiting a 'typical' store). If you are interested in population-level fixed effects for your predictor variables, you could fit your model using the brm() function in the brms package. However, that will put you in a Bayesian setting.
