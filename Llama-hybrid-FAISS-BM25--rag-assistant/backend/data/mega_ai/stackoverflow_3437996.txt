[site]: stackoverflow
[post_id]: 3437996
[parent_id]: 3437962
[tags]: 
It sounds like you're attempting to test that invoking a particular method on a class doesn't modify any of its fields. This is a somewhat odd test case, but it's entirely possible to write a clear test for it. For other "side effects", like invoking other external methods, it's a bit harder. You could replace local references with test stubs and verify that they weren't invoked, but you still won't catch static method calls this way. Still, it's trivial to verify by inspection that you're not doing anything like that in your code, and sometimes that has to be good enough. Here's one way to test that there are no side effects in a call: public void test_MyFunction_hasNoSideEffects() { MyClass systemUnderTest = makeMyClass(); MyClass copyOfOriginalState = systemUnderTest.clone(); systemUnderTest.myFunction(); assertEquals(systemUnderTest, copyOfOriginalState); //Test equals() method elsewhere } It's somewhat unusual to try to prove that a method is truly side effect free. Unit tests generally attempt to prove that a method behaves correctly and according to contract, but they're not meant to replace examining the code. It's generally a pretty easy exercise to check whether a method has any possible side effects. If your method never sets a field's value and never calls any non-functional methods, then it's functional. Testing this at runtime is tricky. What might be more useful would be some sort of static analysis. Perhaps you could create a @Functional annotation, then write a program that would examine the classes of your program for such methods and check that they only invoke other @Functional methods and never assign to fields. Randomly googling around, I found somebody's master's thesis on exactly this topic. Perhaps he has working code available. Still, I will repeat that it is my advice that you focus your attention elsewhere. While you CAN mostly prove that a method has no side effects at all, it may be better in many cases to quickly verify this by visual inspection and focus the remainder of your time on other, more basic tests.
