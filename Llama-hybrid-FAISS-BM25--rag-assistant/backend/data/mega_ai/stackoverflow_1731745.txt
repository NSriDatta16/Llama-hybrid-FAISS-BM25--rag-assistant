[site]: stackoverflow
[post_id]: 1731745
[parent_id]: 1731333
[tags]: 
A scalar always holds a single element. Whatever is in a scalar variable is always a scalar. A reference is a scalar value. If you want to know if it is a reference, you can use ref . If you want to know the reference type, you can use the reftype routine from Scalar::Util . If you want to know if it is an object, you can use the blessed routine from Scalar::Util . You should never care what the blessed package is, though. UNIVERSAL has some methods to tell you about an object: if you want to check that it has the method you want to call, use can ; if you want to see that it inherits from something, use isa ; and if you want to see it the object handles a role, use DOES . If you want to know if that scalar is actually just acting like a scalar but tied to a class, try tied . If you get an object, continue your checks. If you want to know if it looks like a number, you can use looks_like_number from Scalar::Util . If it doesn't look like a number and it's not a reference, it's a string. However, all simple values can be strings. In v5.36, the builtin pragma has created_as_number and created_as_string , which really mean that the last thing that operator on the value was numeric or stringy. There's also is_bool to check if the values are the distinguished booleans true or false (and not just any true or false value in the normal Perl way). If you need to do something more fancy, you can use a module such as Params::Validate .
