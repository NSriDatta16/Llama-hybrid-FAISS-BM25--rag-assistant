[site]: stackoverflow
[post_id]: 3967064
[parent_id]: 
[tags]: 
Generic Arithmetic in Java

I have a filter class wherein the user must declare the type (e.g. Filter , Filter etc). The class then implements a moving average filter so objects within the class must be added. My question is how to do this? I'm sorry if the answer is simple but I've muddled myself up by thinking about it too much I think :p. public abstract class FilterData { private final List mFilter; private T mFilteredValue; // current filtered value protected Integer mSize = 10; private T mUnfilteredValue; // current unfiltered value public FilterData() { mFilter = new ArrayList (); } public FilterData(int size) { mSize = size; mFilter = new ArrayList (mSize); } public abstract T add(final T pFirstValue, final T pSecondValue); @SuppressWarnings("unchecked") public T filter(T currentVal) { T filteredVal; mUnfilteredValue = currentVal; push(currentVal); T totalVal = (T) (new Integer(0)); int numNonZeros = 1; for (int i = 0; i getFilterStream() { return mFilter; } public T getUnfilteredValue() { return mUnfilteredValue; } public void push(T currentVal) { mFilter.add(0, currentVal); if (mFilter.size() > mSize) mFilter.remove(mFilter.size() - 1); } public void resizeFilter(int newSize) { if (mSize > newSize) { int numItemsToRemove = mSize - newSize; for (int i = 0; i Am I right to include the abstract Add method and if so, how should I extend the class correctly to cover primitive types (e.g. Float, Double, Integer etc.) Thanks Chris EDIT: Apologies for being unclear. This is not homework I'm afraid, those days are long behind me. I'm quite new to Java having come from a C++ background (hence the expectation of easy operator overloading). As for the "push" method. I apologise for the add method in there, that is simply add a value to a list, not the variable addition I was referring to (made a note to change the name of my method then!). The class is used to provide an interface to construct a List of a specified length, populate it with variables and obtain an average over the last 'x' frames to iron out any spikes in the data. When a new item is added to the FilterData object, it is added to the beginning of the List and the last object is removed (provided the List has reached the maximum allowed size). So, to provide a continual moving average, I must summate and divide the values in the List. However, to perform this addition, I will have to find a way to add the objects together. (It is merely a helper class so I want to make it as generic as possible). Does that make it any clearer? (I'm aware the code is very Mickey Mouse but I wanted to make it as clear and simple as possible).
