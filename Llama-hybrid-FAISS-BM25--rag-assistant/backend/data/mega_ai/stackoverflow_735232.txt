[site]: stackoverflow
[post_id]: 735232
[parent_id]: 735131
[tags]: 
An "opaque type" is a type where you don't have a full definition for the struct or class . In C, C++ and Objective-C, you can tell the compiler that a type will be defined later by using a forward declaration: // forward declaration of struct in C, C++ and Objective-C struct Foo; // forward declaration of class in C++: class Bar; // forward declaration of class in Objective-C: @class Baz; The compiler doesn't have enough information to let you do anything directly with the struct or class except declare pointers to it, but this is frequently all you need to do. This allows library and framework creators to hide implementation details. Users of a library or framework then call helper functions to create, manipulate and destroy instances of a forward declared struct or class . For example, a framework creator could create these functions for struct Foo : struct Foo *createFoo(void); void addNumberToFoo(struct Foo *foo, int number); void destroyFoo(struct Foo *foo); As part of the Core Foundation framework, Apple makes common Objective-C classes like NSString , NSArray and NSBundle available to C programmers through opaque types. C programmers use pointers and helper functions to create, manipulate and destroy instances of these Objective-C classes. Apple calls this "toll-free bridging". They follow a common naming convention: "CF" prefix + class name + "Ref" suffix , where "CF" stands for "Core Foundation" and "Ref" is short for "Reference", meaning it's a pointer.
