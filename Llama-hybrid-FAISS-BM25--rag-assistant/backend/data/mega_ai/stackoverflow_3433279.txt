[site]: stackoverflow
[post_id]: 3433279
[parent_id]: 3429199
[tags]: 
Some source code constructs you can keep an eye out for are: Functions that don't do bounds checking. Evan covered it pretty well. Input validation & sanitization, or lack thereof. NULL pointer dereferencing fork()s, execve()s, pipe()s, system() called with non-static parameters (or worse, with user input). Objects shared between threads with inappropriate storage durations (pointers to automatic variables or even "dead" objects in thread-local storage). When dealing with file manipulation, make sure correct variable types are used for the return results of functions. Make sure they're checked for errors. Make no assumptions about the implementation - permissions of created files, uniqueness of filenames, etc. Poor sources of randomness (for encryption, communication, etc.) should be avoided. Simple or obvious mistakes (perhaps out of carelessness) should be fixed anyway. You never know what's exploitable, unless it is. Also, are the data protected ? Well, if you don't care, that's fine. :-) Some tools that you can consider are: valgrind : exposes memory flaws, which in large applications are usually critical. splint : a static checker fuzzing frameworks RATS : a free, open-source tool. Its authors' company was acquired by Fortify.
