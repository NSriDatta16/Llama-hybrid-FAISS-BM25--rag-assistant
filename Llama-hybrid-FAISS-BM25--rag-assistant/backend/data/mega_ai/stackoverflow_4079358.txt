[site]: stackoverflow
[post_id]: 4079358
[parent_id]: 4073190
[tags]: 
@lazerscience is absolutely correct. You should tweak your models, since you are setting up a de facto many-to-many relationship; doing so will allow you to leverage more features of the admin interface & so forth. Additionally, regardless, there is no need to go to raw() , since this can be done entirely via normal usage of the Django ORM. Something like: class LadderPlayer(models.Model): player = models.ForeignKey(User, unique=True) position = models.IntegerField(unique=True) challenges = models.ManyToManyField("self", symmetrical=False, through='Match') class Match(models.Model): date = models.DateTimeField() challenger = models.ForeignKey(LadderPlayer) challengee = models.ForeignKey(LadderPlayer) should be all you need to change in the models. You then should be able to do a query like player_of_interest = LadderPlayer.objects.filter(pk=some_id) matches_of_interest = \ Match.objects.filter(Q(challenger__pk=some_id)|Q(challengee__pk=some_id)) to get all the information of interest about the player in question. Note that you'll need to have from django.db.models import Q to use that. If you want exactly the same info you're presenting with your example query, I believe it'd be easiest to split the queries into separate ones for getting the challenger & challengee lists -- for example, something like: challengers = LadderPlayer.objects.filter(challenges__challengee__pk=poi_id) challenged_by = LadderPlayer.objects.filter(challenges__challenger__pk=poi_id) will get the two relevant query sets for the player of interest (w/ a primary key of poi_id ). If there's some particular reason you don't want the de facto many-to-many relationship to become a de jure one, you can change those to something along the lines of challenger = LadderPlayer.objects.filter(match__challengee__pk=poi_id) challenged_by = LadderPlayer.objects.filter(match__challenger_pk=poi_id) So the suggestion for the model change is merely to help leverage existing tools, and to make explicit a relationship which you are currently having occur implicitly. Based on how you want use it, you might want to do something like pl_tuple = () for p in LadderPlayer.objects.all(): challengers = LadderPlayer.objects.filter(challenges__challengee__pk=p.id) challenged_by = LadderPlayer.objects.filter(challenges__challenger__pk=p.id) pl_tuple += (p.id, p.position, challengers, challenged_by) context_dict['ladder_players'] = pl_tuple in your view to prepare the data for your template. Regardless, you should probably be doing your query through the Django ORM instead of using raw() in this case.
