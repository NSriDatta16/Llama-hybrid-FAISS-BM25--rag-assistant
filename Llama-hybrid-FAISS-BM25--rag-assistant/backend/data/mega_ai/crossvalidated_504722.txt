[site]: crossvalidated
[post_id]: 504722
[parent_id]: 
[tags]: 
Setting reward function in environment for simple deep reinforcement learning problem

So I posted this on Stackoverflow yesterday, but then realized this would probably be the more proper place to post this question. I am currently experimenting with deep reinforcement learning and am trying to set up my environment. The environment is meant to simulate raw material purchasing and the way I have things set up are as follows: you are making purchasing decisions for the next 10 weeks(so 10 steps). The quantity available at the start of the simulation is 100,000 pounds of the material Each week, you are using 40,000 pounds of the material You can only buy 195,000 pounds at a time This is relevant for the question as well, so after the purchasing decision (buy or not), the days of material on hand is calculated as follows: days_on_hand = quantity_available/weekly_usage/7 My question is in regards to the reward function. I would like to minimize days of material on hand over the entirety of the 10 weeks, so I set up the reward function as being -1*days_on_hand so that in trying to maximize the reward function, we are then minimizing the days of material on hand. Additionally, I put a very large penalty if the quantity available at each given step goes below zero. Is this a viable way to set up a reward function? If not, what would be a better option. Any advice is greatly appreciated! Also, I have left the code here if you would like to see it. start_qty= 100000 sim_weeks = 10 purchase_mult = 195000 forecast_qty = 40000 class ResinEnv(Env): def __init__(self): # Actions we can take: buy 0, buy 1x, self.action_space = Discrete(2) # purchase array space... self.observation_space = Box(low=np.array([-1000000]), high=np.array([1000000])) # Set start qty self.state = start_qty # Set purchase length self.purchase_length = sim_weeks #self.current_step = 1 def step(self, action): # Apply action #this gives us qty_available at the end of the week self.state-=forecast_qty #see if we need to buy self.state += (action*purchase_mult) #now calculate the days on hand from this: days = self.state/forecast_qty/7 # Reduce weeks left to purchase by 1 week self.purchase_length -= 1 #self.current_step+=1 # Calculate reward: reward is the negative of days_on_hand if self.state ```
