[site]: stackoverflow
[post_id]: 1602215
[parent_id]: 1601913
[tags]: 
What is the probability that during your code's maintenance some junior employee will break the part of code that runs "controller calls such and such method in particular order"? What is the cost to your organization if such a thing occurs - in production outage, debugging/fixing/re-testing/re-release, legal/financial risk, reputation risk, etc...? Now, multiply #1 and #2 and check whether your reluctance to achieve a reasonable amount of test coverage is worth the risk. Sometimes, it will not be (this is why in testing there's a concept of a point of diminishing returns). E.g. if you maintain a web app that is not production critical and has 100 users who have a workaround if the app is broken (and/or can do easy and immediate rollback), then spending 3 months doing full testing coverage of that app is probably non-sensical. If you work on an app where a minor bug can have multi-million-dollar or worse consequences (think space shuttle software, or guidance system for a cruise missile), then the thorough testing with complete coverage becomes a lot more sensical. Also, i'm not sure if i'm reading too much into your question but you seem to be implying that having mocking-enabled unit testing somehow excluds application/integration functional testing. If that is the case, you are right to object to such a notion - the two testing approaches must co-exist.
