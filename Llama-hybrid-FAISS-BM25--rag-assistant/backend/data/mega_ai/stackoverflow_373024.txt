[site]: stackoverflow
[post_id]: 373024
[parent_id]: 372988
[tags]: 
IIRC, the rule of thumb is that an index can is used only for lookups that use all columns from some point and to the left. For example, an index on columns (a,b,c,d) could be used if you query on (a), (a,b), (a,b,c) or (a,b,c,d) but not on (a,c) for example. This is a result of the way indexes are built; the left most column is indexed, then for each value of that column an index is created for the next column and so forth. Edit: as BQ points out, the DBMS can scan over the full ' a ' portion of the index and do a lookup into the ' b ' part (I didn't known that was actual done). However this is not as fast as an index that can use the rule as described above (OTOH it can be faster than a full table scan). Personally, I don't think that should be intentionally leveraged. If perf is enough of a concern for a given query that you are considering what indexes are needed, you might as well give it the right ones.
