[site]: crossvalidated
[post_id]: 618750
[parent_id]: 
[tags]: 
How can I normalize features while preserving information about the original values?

I am trying to feed a neural network information about a stock (100s of features concerning price, MA, volume etc.). To ensure training stability, I normalize the features to have mean of 0.0 and a standard deviation of 1.0 . However, I thought that for stock prices, the absolute prices of the instrument would also be relevant. One way I can think of this is the psychological effect of "round numbers" , meaning we like to see clean numbers as important markers. So for an asset values 99.78€ currently, the 100€ marker will likely be an important driving factor for the price development. However, the information of those possible markers gets lost when normalizing each feature to fit a normal distribution. How can I set up the features to not lose this viable information that gets lost when normalizing? My initial thought was to supply the model with the important zones by providing them as extra features (e.g. the first round number above and below, say 100€ and 99€ for the example above). But this adds extra (perhaps unneeded) complexity for the model. What are your suggestions? Am I missing an important aspect here?
