[site]: stackoverflow
[post_id]: 103285
[parent_id]: 102084
[tags]: 
DirectCast DirectCast is a marvel. On the surface, it works similar to the CType operator in that it converts an object from one type into another. However, it works by a much stricter set of rules. CType 's actual behaviour is therefore often opaque and it's not at all evident which kind of conversion is executed. DirectCast only supports two distinct operations: Unboxing of a value type, and upcasting in the class hierarchy. Any other cast will not work (e.g. trying to unbox an Integer to a Double ) and will result in a compile time/runtime error (depending on the situation and what can be detected by static type checking). I therefore use DirectCast whenever possible, as this captures my intent best: depending on the situation, I either want to unbox a value of known type or perform an upcast. End of story. Using CType , on the other hand, leaves the reader of the code wondering what the programmer really intended because it resolves to all kinds of different operations, including calling user-defined code. Why is this a hidden feature? The VB team has published a guideline 1 that discourages the use of DirectCast (even though it's actually faster!) in order to make the code more uniform. I argue that this is a bad guideline that should be reversed: Whenever possible, favour DirectCast over the more general CType operator. It makes the code much clearer. CType , on the other hand, should only be called if this is indeed intended, i.e. when a narrowing CType operator (cf. operator overloading ) should be called. 1) I'm unable to come up with a link to the guideline but I've found Paul Vick's take on it (chief developer of the VB team): In the real world, you're hardly ever going to notice the difference, so you might as well go with the more flexible conversion operators like CType, CInt, etc. (EDIT by Zack: Learn more here: How should I cast in VB.NET? )
