[site]: stackoverflow
[post_id]: 3654056
[parent_id]: 3648807
[tags]: 
Found an answer to use XMLReader instance to read XHTML source that includes named entities like &nbsp; without throwing an XmlException To start I copied the following XML sample directly from W3C's page: XHTML 1.0 in XML Schema, section 1.5. Using DTD and XML Schema together in support of bringing in the named entity chars and having Schema based validation at the same time: ]> ... and am substituting XHTML fragments e.g. xhtml stuff into the location of ... in the above sample. This successfully mixes DTD (to reference named entities) with Schema validation. The XMLReader no longer throws an XMLExeption when a named entity is encountered. Success! The C#.NET code that processes the above sample using System; using System.IO; using System.Xml; The core logic follows. Note : This is copied and pasted verbatim. Some of the settings might be frivolous or redundant so you can tweak to achieve various other mileage. XmlReaderSettings settingsXRdr = new XmlReaderSettings(); settingsXRdr.ProhibitDtd = false; settingsXRdr.CheckCharacters = true; settingsXRdr.ConformanceLevel = ConformanceLevel.Document; settingsXRdr.IgnoreProcessingInstructions = false; settingsXRdr.IgnoreComments = false; settingsXRdr.XmlResolver = new CustomXmlResolver(); settingsXRdr.ValidationType = ValidationType.DTD; // This is a format string; notice the placeholder {0} where the fragment will be injected: string mixFmtString1 = @" ]> {0} "; // Inject any well-formed fragment via the second argument string xhtml = string.Format(mixFmtString1, " Xhtml fragment w/named entity: &nbsp; "); // Creates a validating reader (derived type) because of the above settings) XmlReader rdr = XmlReader.Create(new StringReader(xhtml), settingsXRdr); // Reads the entire XHTML document (validating it along the way). while (rdr.Read()) { // Do whatever you want here for each piece processed. var dummy = rdr.NodeType.ToString(); // Access a string value for fun. // If you just want validation to occur then leave this an empty code block. } Note: This solution uses the Strict template for XHTML so certain deprecated tags like will fail the reader. You might want to reformulate the referenced items to point to the more forgiving loose XHTML template . Related/useful resources from along the way: Similar problem, solved a different way: Reference to undeclared entity exception while working with XML
