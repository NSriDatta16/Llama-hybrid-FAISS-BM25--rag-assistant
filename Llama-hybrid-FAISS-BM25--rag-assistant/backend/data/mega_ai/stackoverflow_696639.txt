[site]: stackoverflow
[post_id]: 696639
[parent_id]: 695811
[tags]: 
One of the largest pitfalls of code coverage is that people just talk about code coverage without actually specifying what type of code coverage they are talking about. The characteristics of C0, C1, C2 and even higher levels of code coverage are very different, so just talking about "code coverage" doesn't even make sense. For example, achieving 100% full path coverage is pretty much impossible. If your program has n decision points, you need 2 n tests (and depending on the definition, every single bit in a value is a decision point, so to achieve 100% full path coverage for an extremely simple function that just adds two int s, you need 18446744073709551616 tests). If you only have one loop, you already need infinitely many tests. OTOH, achieving 100% C0 coverage is trivial. Another important thing to remember, is that code coverage does not tell you what code was tested. It only tells you what code was run ! You can try it out yourself: take a codebase that has 100% code coverage. Remove all the assertions from the tests. Now the codebase still has 100% coverage, but does not test a single thing! So, code coverage does not tell you what's tested, only what's not tested.
