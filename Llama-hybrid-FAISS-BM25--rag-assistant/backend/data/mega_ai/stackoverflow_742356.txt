[site]: stackoverflow
[post_id]: 742356
[parent_id]: 742354
[tags]: 
Strings literals C# supports two forms of string literals: regular string literals and verbatim string literals . A regular string literal consists of zero or more characters enclosed in double quotes, as in "hello", and may include both simple escape sequences (such as \t for the tab character) and hexadecimal and Unicode escape sequences. A verbatim string literal consists of an @ character followed by a double-quote character, zero or more characters, and a closing double-quote character. A simple example is @"hello". In a verbatim string literal, the characters between the delimiters are interpreted verbatim, the only exception being a quote-escape-sequence. In particular, simple escape sequences and hexadecimal and Unicode escape sequences are not processed in verbatim string literals. A verbatim string literal may span multiple lines. Example 1: @"C:\Path\File.zip" == "C:\\Path\\File.zip" // where "C:\\Path\\File.zip" // regular string literal @"C:\Path\File.zip" // verbatim string literal Note : In verbatim string literals you should escape double quotes. Example 2: @"He said: ""Hello""" == "He said: \"Hello\"" More info here : string (C# Reference) at MSDN String literals at MSDN String Basics (C# Programming Guide) at MSDN Working with Strings in C# Strings in .NET and C# Identifiers The prefix "@" enables the use of keywords as identifiers, which is useful when interfacing with other programming languages. The character @ is not actually part of the identifier, so the identifier might be seen in other languages as a normal identifier, without the prefix. An identifier with an @ prefix is called a verbatim identifier. Use of the @ prefix for identifiers that are not keywords is permitted, but strongly discouraged as a matter of style. Example: class @class { public static void @static(bool @bool) { if (@bool) System.Console.WriteLine("true"); else System.Console.WriteLine("false"); } } class Class1 { static void M() { cl\u0061ss.st\u0061tic(true); } }
