[site]: stackoverflow
[post_id]: 4831096
[parent_id]: 4830951
[tags]: 
Should be pretty simple: s = s.replace(/_([^_]*)_/g, ' $1 '); The regex is straightforward: (...) - capturing group, so $1 takes what's between the underscores [^_]* - some characters that are not underscores. To the next question: It's hard to tell whether _..._ is a good choice or not, it greatly depends on your typical data. For example, if _ is common within your code you may have to escape it, which adds complexity. The next one should fit your new rules: s = s.replace(/(^|\s)_([^_\s]+)_(?!\S)/g, ' $1 '); This one is a little confusing. It should work according to your rules (though it also work near the start/end of the string, where you may not have a whitespace). Here's what we've got: (^|\s) - The first group is now the whitespcae, or the start of the line. JavaScript doesn't support lookbehind, so this will have to do. _ ([^_\s]+) - Main group - match characters that are not underscores or spaces. _ (?!\S) - negative lookahead - check that the next character is not (not a space) - the double negative is there to make it work before the end of the string, it could have been (?=\s|$) if you are more comfortable with it. An extra advantage of lookahead here is that it doesn't capture the last space. If you have two code words, for example _hello_ _world_ , they will both be replaces. If we used (\s|$) , as with the space before the word, the first match would have consumed the space, and the second word could not have been matched.
