[site]: stackoverflow
[post_id]: 1121855
[parent_id]: 913555
[tags]: 
The only moderately useful thread I've seen on this topic is here: http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/709d97e06b373786 I think Matchu's solution is probably the correct one with a quick review of the attachment_fu code. I'd love it if Matchu could share a patch or a snippet of his modified save_attachment? method. I'm about to dig into this on my own, since this has become a problem for me and it'll probably be less work than replacing attachment_fu entirely... Update With Matchu's outline, I came up with a short (if inelegant) solution that seems to work after light testing. I modifed save_attachment? in attachment_fu/attachment_fu.rb: def save_attachment? return false unless (thumbnail || !full_filename || @active_upload) #added File.file?(temp_path.to_s) end ... to check the conditions Matchu laid out. I couldn't come up with an elegant way to tell whether data had been passed along to the uploaded_data= setter method (if anyone has a better way to do this, I'm all ears; I'm still a ruby/rails noob) so I also added a line to uploaded_data= to set the global variable @active_upload: def uploaded_data=(file_data) return nil if file_data.nil? || file_data.size == 0 self.content_type = file_data.content_type self.filename = file_data.original_filename if respond_to?(:filename) @active_upload=true # added if file_data.is_a?(StringIO) file_data.rewind self.temp_data = file_data.read else self.temp_path = file_data end end Hope that helps, and if anyone has a more elegant way to handle what I did there with the global variable, I'd love to hear it.
