[site]: crossvalidated
[post_id]: 438728
[parent_id]: 
[tags]: 
Mean absolute percentage error returning NAN in PyTorch

I'm using mean absolute percentage error (MAPE) as a loss function for an RNN, however during training I start getting NaN values. I first used MAPE to calculate error between sequences of 3D coordinates, and while the values were incredibly high, they weren't NaN. I then tried using MAPE to calculate the error for the deltas of the coordinates (the differences between each pair of coordinate sets). It was during this point that I started getting NaN values for loss. I also used relative percent difference (RPD), which sometimes gives a NaN for loss when calculating on the deltas. Here is the code I wrote to implement MAPE and RPD (for both the coordinates and their deltas/diffs): def MAPELoss(output, target): return torch.mean(torch.abs((target - output) / target)) def RPDLoss(output, target): return torch.mean(torch.abs(target - output) / ((torch.abs(target) + torch.abs(output)) / 2)) def MAPELoss_Diff(output, target): output = output[1:] - output[:-1] target = target[1:] - target[:-1] return torch.mean(torch.abs((target - output) / target)) def RPDLoss_Diff(output, target): output = output[1:] - output[:-1] target = target[1:] - target[:-1] return torch.mean(torch.abs(target - output) / ((torch.abs(target) + torch.abs(output)) / 2)) Looking at the above code, I don't see why the loss functions for diff lead to NaN values (rarely for RPD but MAPE converges to NaN quickly). I printed inside the functions and it seems that the NaN values come from the output parameter, meaning my model is starting to predict NaN during training. When I initially looked this up, a common reason was exploding gradients but I'm not sure why this loss function would lead to that. As for why I'm using MAPE and RPD in the first place, the coordinates are normalized to a 1x1x1 bounding box, so all their values will be For context, I'm trying to make a sequence to sequence LSTM model to predict human pose (a series of 3D coordinates). I need the poses to move to show motion, hence why I figured trying to calculate loss on the pose deltas.
