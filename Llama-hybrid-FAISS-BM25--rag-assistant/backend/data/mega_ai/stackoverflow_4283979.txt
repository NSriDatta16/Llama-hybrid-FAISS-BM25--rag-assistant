[site]: stackoverflow
[post_id]: 4283979
[parent_id]: 4283842
[tags]: 
This is actually moving towards Sixth Normal Form, it is just that people like you who do not have the academic or experiential background do not know the (a) name for it and (b) the rules and the caveats. Such people have implemented what is commonly know as Entity-Attribute-Value or EAV. If it is done properly, it is fine, and there are many thousands of medical system out there carrying diagnostic and dosage info in such tables. If it is not, then it is one dog's breakfast to use and maintain. First make sure you have Product in true and full 5NF. Always use full Declarative Referential Integrity; CHECK constraints and RULES . Never put all that into one table with a VARCHAR() for Value. Always use the correct (applicable) DataTypes. That means you will have several tables, one each per DataType, and there is no loss of control or integrity. Likewise any Associative tables (where there is a multiple reference to another table [eg. Vendor] ) must be separate. I am providing a Data Model which has the full control discussed; it includes a simple catalogue which can be used for verification as well as navigation. You need to add every CHECK Constraint and RULE to ensure that the data and referential Integrity is not lost. That means, eg: for the CPUSpeed column, which is stored in ProductDecimal , CHECK that it is in the proper range of values for each sub- Product table CHECK that the DataType is correct for the ProductType-ColumnNo combination This structure is way better than most EAV, and not quite the full 6NF. . Keep all the mandatory columns in Product ; use the sub-Product tables for optional columns only. For each such (eg Product ) table, you need to create a View (dotted line), which will construct the 5NF rows from the EAV/6NF tables. You may have several Views: Product_CPU , Product_Disk . Do not update via the View. Keep all your updates transactional, in a stored proc, and insert or update each of the columns (ie. the Product and sub-Product tables which are applicable, for each particular ProductType ) together. Gigantic ? Commercial databases (not the freeware) have no problems with large tables or joins. This is actually a very efficient structure, and allows very fast searches, because the tables are in fact column-oriented (not row-oriented). If the population is gigantic, then it is gigantic, do your own arithmetic. You need one more table, a Lookup table for Property (or Attribute). That is part of the catalogue, and based on ProductType The better solution is to go for full, formal Sixth Normal Form. Not necessary if you have only one or a few tables that require optional columns. To be clear: Sixth Normal Form is The Row consists of the Primary Key and, at most, one Attribute. This is 6NF (for at least the Product table cluster), then Normalised again (Not in the Normal Form sense) by DataType, to reduce the no of tables (otherwise you would have one table per Attribute). This retains full Rdb control (FKs, constraints, etc); whereas the common EAV types don't bother with the DRI and control. This also has the rudiments of a catalogue. Link to Product Cluster Data Model Link to IDEF1X Notation for those who are unfamiliar with the Relational Modelling Standard. Update You might be interested in this ▶5NF 6NF Discussion◀ . I will write it up at some point.
