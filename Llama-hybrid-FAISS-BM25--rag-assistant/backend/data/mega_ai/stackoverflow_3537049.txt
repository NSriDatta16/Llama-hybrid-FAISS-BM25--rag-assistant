[site]: stackoverflow
[post_id]: 3537049
[parent_id]: 3534334
[tags]: 
Windows Azure Development Fabric will not run as Windows Service out-of-the box . The only way to keep actual service portable and capable of running in Console, WinService or Azure Worker is to design in such abstraction from the start . Once you have proper abstractions, your cloud application becomes quite flexible. For example you could even write unit tests like these: [Test] public void Test() { Host.Initialize(); Host.Start(); var client = Host.Resolve (); client.Send(new Hello {Word = "World"}); client.Send(new Hello {Word = Rand.String.NextText(6000, 6000)}); client.Send(new Bye {Word = "Earth"}); SystemUtil.Sleep(50.Seconds()); Host.Stop(); } or if .NET 4.0 TPL is used: [Test] public void Test() { using (var host = BuildHost()) { host.Initialize(); var client = host.Resolve (); client.Send(new Hello { Word = "World" }); client.Send(new Hello { Word = Rand.String.NextText(6000, 6000) }); client.Send(new Bye { Word = "Earth" }); using (var cts = new CancellationTokenSource()) { var task = host.Start(cts.Token); SystemUtil.Sleep(10.Seconds()); cts.Cancel(true); task.Wait(5.Seconds()); } } } similar wiring will be in the Console, WindowsService, Azure Host or mono daemon on Linux. And if you keep storage properly abstracted as well, then there will be no need to actually use Azure Storage (either development or production) for the tests, efficiently using local file storage or in-memory representations where it fits. Basically, designing cloud architecture to be portable from the start, simplifies a lot of things down the road, reducing development and maintenance costs. NB: test snippets are taken from Lokad.CQRS for Windows Azure Guidance and Framework
