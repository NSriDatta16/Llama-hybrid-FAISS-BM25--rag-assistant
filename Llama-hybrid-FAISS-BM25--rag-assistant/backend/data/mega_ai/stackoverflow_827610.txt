[site]: stackoverflow
[post_id]: 827610
[parent_id]: 827145
[tags]: 
When I first started with DDD, I also wrestled with the Context + Domain + Module + Model organization of things as well. DDD is really meant to be a guide to building your domain models. Once I stopped trying to sub-organize my Contexts and boundies, and started thinking of what really is shared between entities - things started to fit together better. I actually do not use contexts, unless it is a completely different application (app = context). Just my preference. But, I do have Modules that only share base abstracts and interfaces common throughout code (IRepository, IComponent, etc). The catch is, DDD says that Modules can share entities between modules - but, only on a very limited scale (you really don't want to do it often). With that in mind, I would get away from using contexts and move to a "what really am I trying to accomplish, what do these models have in common). Here's what I would think, reading your question (if I understand them). Person() is a base entity. It has ID and Name. PlayerSkill() is a Value Object, that is accessable from Person().PlayerSkill. Contact() is an entity that inherits Person(), so it inherits ID and Name, and has additional Contact properties you want. Now, I just tore up your domain. I know. You can use a hybird approach as well: Person() is a base entity. It has ID and Name. Player() inherits Person(), applies Skill() and other VOs. Contact() inherits Person(), applies Address() and other VOs.
