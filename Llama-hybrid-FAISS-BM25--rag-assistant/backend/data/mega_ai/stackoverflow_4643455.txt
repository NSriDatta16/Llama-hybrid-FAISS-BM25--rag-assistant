[site]: stackoverflow
[post_id]: 4643455
[parent_id]: 4588921
[tags]: 
You can achieve this by hosting a WCF Service from within the Windows Service. The client can then make web-service calls to the WCF Service, which can then make calls into the Windows Service as required. The below steps assume you want to keep the WCF service in a separate project - this is slightly more difficult than keeping both components in the Windows Service project, but might keep the code a bit more organized. Start with two projects – WcfService1 and WindowsService1. Create a class named MyServiceWorker which performs the work of the Windows Service. Add a reference in WindowsService1 to WcfService1. Define an interface named IMyServiceWorker in WcfService1. This should define the operations on the worker class, and should be implemented by MyServiceWorker in WindowsService1. In WcfService1.Service1, add “public static IMyServiceWorker myServiceWorker”. In the WindowsService OnStart() method, create a MyServiceWorker, and pass it to WcfService1.Service1.myServiceWorker. Open/start MyServiceWorker, then open the WcfService. Here are the key bits of code for the WcfService: public interface IMyServiceWorker { void ejectCD(); void volumeUp(); void volumeDown(); } public class Service1 : IService1 { //this is the reference to your Windows Service. public static IMyServiceWorker WindowsServiceWorker; public void ejectCD() { WindowsServiceWorker.ejectCD(); } public void volumeUp() { WindowsServiceWorker.volumeUp(); } public void volumeDown() { WindowsServiceWorker.volumeDown(); } } And here is the code for the WindowsService: public class MyServiceWorker:IMyServiceWorker { //You will need to implement these methods. public void ejectCD() { throw new NotImplementedException(); } public void volumeUp() { throw new NotImplementedException(); } public void volumeDown() { throw new NotImplementedException(); } internal void Open() { throw new NotImplementedException(); } }
