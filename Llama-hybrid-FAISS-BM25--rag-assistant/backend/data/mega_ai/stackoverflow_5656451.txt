[site]: stackoverflow
[post_id]: 5656451
[parent_id]: 
[tags]: 
Help with making NSURLConnection in a custom class

Hey all, I'm trying to use Yahoo's PlaceFinder to do reverse geocoding for an app I'm making. Problem is I need to use the NSURLConnection to call to my database. So I decided to make a custom class that is initialized with the user's latitude and longitude, and only store a string variable containing the state the user is in. Update the following code now works fine.... Here is the .h #import #import "CJSONDeserializer.h" @interface StateFinder : NSObject { NSString *userState; NSURLConnection *connection; } -(id)initwithLatitude:(NSString *)latitude andLongitude:(NSString *)longitude; @property (nonatomic, retain) NSString *userState; @property (nonatomic, retain) NSURLConnection *connection; @end and the .m #import "StateFinder.h" @implementation StateFinder @synthesize userState; @synthesize connection; -(id)initwithLatitude:(NSString *)latitude andLongitude:(NSString *)longitude { if(self = [super init]) { NSString *lat = latitude; NSString *lon = longitude; NSString *stateURLFinder = [NSString stringWithFormat:@"http://where.yahooapis.com/geocode?q=%@,+%@&gflags=R&flags=J&appid=zqoGxo7k", lat, lon]; //NSLog(stateURLFinder); NSURL *stateURL = [NSURL URLWithString:stateURLFinder]; NSURLRequest *request = [[NSURLRequest alloc] initWithURL: stateURL]; connection = [[NSURLConnection alloc] initWithRequest:request delegate:self]; [request release]; } return self; } -(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response { NSLog(@"didReceiveResponse"); } - (void)connectionDidFinishLoading:(NSURLConnection *)connection { NSLog(@"didFinishLoading"); } - (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error { NSLog(@"didFailWithError"); } - (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data { // Store incoming data into a string NSString *jsonString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]; NSLog(jsonString); // Yes, this is incomplete, but I was waiting for the method to fire before going // any further. This will at least show me the JSON data being returned from yahoo // in string format so I can output it to the console via NSLog } - (void)dealloc { [userState release]; [connection release]; [super dealloc]; } @end This is the current code I'm using and it works fine. All I did was include the connectionDidFinishLoading and didFailWithError methods to the original code. With regards to the connection being released before it was made, I used the code above as is without the previously mentioned methods and neither didReceiveData/didReceiveResponse would hit. It wasn't until those 2 methods were included that the methods began getting called. Not sure how, not sure why, but that was the only change among all of those suggested that worked. Big thanks to @Jiva DeVoe , @XJones , @jlehr and @Aby for all the tips/hints/suggestions!
