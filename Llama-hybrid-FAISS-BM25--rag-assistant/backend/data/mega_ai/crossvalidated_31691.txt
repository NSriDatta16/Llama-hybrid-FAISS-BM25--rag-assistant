[site]: crossvalidated
[post_id]: 31691
[parent_id]: 31666
[tags]: 
The question asks how to find the amount by which one time series ("expansion") lags another ("volume") when the series are sampled at regular but different intervals. In this case both series exhibit reasonably continuous behavior, as the figures will show. This implies (1) little or no initial smoothing may be needed and (2) resampling can be as simple as linear or quadratic interpolation. Quadratic may be slightly better due to the smoothness. After resampling, the lag is found by maximizing the cross-correlation , as shown in the thread, For two offset sampled data series, what is the best estimate of the offset between them? . To illustrate , we can use the data supplied in the question, employing R for the pseudocode. Let's begin with the basic functionality, cross-correlation and resampling: cor.cross This is a crude algorithm: an FFT-based calculation would be faster. But for these data (involving about 4000 values) it's good enough. resample I downloaded the data as a comma-separated CSV file and stripped its header. (The header caused some problems for R which I didn't care to diagnose.) data NB This solution assumes each series of data is in temporal order with no gaps in either one. This allows it to use indexes into the values as proxies for time and to scale those indexes by the temporal sampling frequencies to convert them to times. It turns out that one or both of these instruments drifts a little over time. It's good to remove such trends before proceeding. Also, because there is a tapering of the volume signal at the end, we should clip it out. n.clip I resample the less -frequent series in order to get the most precision out of the result. e.frequency Now the cross-correlation can be computed--for efficiency we search only a reasonable window of lags--and the lag where the maximum value is found can be identified. lag.max The output tells us that expansion lags volume by 1.85 seconds. (If the last 3.5 seconds of data weren't clipped, the output would be 1.84 seconds.) It's a good idea to check everything in several ways, preferably visually. First, the cross-correlation function : plot(time.range * (1/v.frequency), data.cor, type="l", lwd=2, xlab="Lag (seconds)", ylab="Correlation") points(i * (1/v.frequency), max(data.cor), col="Red", cex=2.5) Next, let's register the two series in time and plot them together on the same axes . normalize It looks pretty good! We can get a better sense of the registration quality with a scatterplot , though. I vary the colors by time to show the progression. colors We're looking for the points to track back and forth along a line: variations from that reflect nonlinearities in the time-lagged response of expansion to volume. Although there are some variations, they are pretty small. Yet, how these variations change over time may be of some physiological interest. The wonderful thing about statistics, especially its exploratory and visual aspect, is how it tends to create good questions and ideas along with useful answers.
