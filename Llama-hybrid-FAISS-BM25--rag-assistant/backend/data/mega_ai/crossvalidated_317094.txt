[site]: crossvalidated
[post_id]: 317094
[parent_id]: 
[tags]: 
Named Entity Recognition using Keras and Tensorflow - Overfitting

I am trying to write a Named Entity Recognition model using Keras and Tensorflow. I am training on a data that is has (Person,Products,Location,Others). Amongst these entities, the dataset is imbalanced with "Others" entity being a majority class. As a result when I run predictions on my neural network with I am getting results that are biased to the the "Others" entity.. I want to know how to reduce the model from overfitting. Any approaches? I am sharing code for your reference. TRAINING PHASE import numpy as np from keras.models import Sequential from keras.layers.recurrent import LSTM from keras.layers.core import Activation, Dense from keras.layers.wrappers import TimeDistributed from keras.preprocessing.sequence import pad_sequences from keras.layers.embeddings import Embedding from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix, accuracy_score, precision_recall_fscore_support raw = open('taggedcontent.txt', 'r').readlines() all_x = [] point = [] for line in raw: stripped_line = line.strip().split(' ') point.append(stripped_line) if line == '\n': all_x.append(point[:-1]) point = [] all_x = all_x[:-1] lengths = [len(x) for x in all_x] print ('Input sequence length range: ', max(lengths), min(lengths)) short_x = [x for x in all_x if len(x) VALIDATION PHASE x = "Google Microsoft Trump Pepsi" X = x..strip().split(' ') words = list(set(all_text)) word2ind = {word: index for index, word in enumerate(words)} X_enc = [[word2ind[c] for c in x] for x in X] X_enc = pad_sequences(X_enc, maxlen=3258) pred = model.predict_classes(X_enc) The predictions are completely biased to "Others" entity. Should I be creating a new word2ind in the predictions phase or should I be reusing it from the tra.ining phase. How can change this code to avoid overfitting and any suggestions. I also want to be using a Reinforcement or Online learning at the end of this model, so that Misclassified instances are reinforced into the model to achieve an accurate model. How can I use reinforcement learning in NLP use cases? Help is appreciated.
