[site]: stackoverflow
[post_id]: 4136549
[parent_id]: 4136457
[tags]: 
We have the repos in the DAL. The BLL references the repositories via an interface - so the repositories are tied to the DAL but decoupled from the BLL. I don't know of any reason why the repositories couldn't be directly in the BLL. We've got them in the DAL as we don't put ANY logic in them. We then have "Managers" in the BLL which wrap the repositories and handle entity-specific logic. FWIW we actually have a generic Repository(Of IEntity) and use unity to instantiate the appropriate repository as required - it's very compact and quite elegant. All our POCO entities implement IEntity which contains Id , CreatedDate , etc. which are common to ALL our entities. This gives some other benefits when you need to handle any type of entity generically - CreatedDate is set by the repository when CreateInstance() is called, ModifiedDate is set by the context itself when it commits an entity with a state of Modified We keep entities in a separate project - The DAL needs to be able to reference them, as does the BLL. You don't want them in the DAL as swapping the DAL out would cause issues. You can't put them in the BLL or you get a circular reference. Configuration for the entities can live in the DAL as it's data source-specific. We try to stick to the BLL taking in primitives and returning entities. Be careful about keeping entities in the UI for too long, especially in a web app as you may have a different context under the DAL by the time you return the entity to the BLL for processing (ie across requests stored in session or similar) this can result in all kinds of fun attaching/detaching entities from contexts and loses you some benefits like change tracking. Hope that helps but if you want any clarification, let me know
