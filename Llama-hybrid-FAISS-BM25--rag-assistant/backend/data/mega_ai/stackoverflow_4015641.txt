[site]: stackoverflow
[post_id]: 4015641
[parent_id]: 
[tags]: 
how to dynamically create methods to operate on class objects initialized at runtime

I have a class, say class AddElement{ int a,b,c; } With methods to set/get a,b,c... My question is definitely a logic question - say I implement AddElement as follows: int Value=1; Value+=AddElement.get_a()+AddElement.get_b()+AddElement.get_b(); Now imagine I want to do the above except 'a,b,c' are now arrays, and instead of 'adding' I do scalar addition. At runtime sometimes I need 'a' but not 'b' or 'c', so I could rewrite as: Value+=AddElement.get_a(); (Of course the += is overloaded to represent a scalar addition... and Value is the same size as a) - Other times I might only need b or c to be added etc... Is there a way to go about selecting which elements, a,b,c, I want to initialize and later use at runtime? ( i.e. I don't want to malloc a huge array if I'm not going to use it). In the end I need a class that has a,b,c and then methods that can operate on any combination of a,b, or c - having the user define what methods they need at runtime (via some kind of flag, or config file). Currently I'm doing the following: Value+=AddElement.get_a()*FlagA+AddElement.get_b()*FlagB+AddElement.get_c()*FlagC; where FlagA=1 if you want to use 'a' in the addition or 0 if you don't want it to be included (The same for FlagB and FlagC). This is costly if the array 'a' is very large. I'm probably just not thinking hard enough, but this problem has been bothering me. If you need me to better define the issue I will try, but I believe this is enough to get my point across. Edit 2 I also forgot to add that I can't use any conditionals during the implementation of the addition (this is going to be used in a CUDA kernel and I can't have any thread diverngance - I was hoping to avoid mentioning CUDA since this is entirely a c++ question) Edit 3 I believe what I need to do is use virtual functions. I want to call the function in the same manner, except have it execute a case specific function. Edit 4 I would appreciate if someone took a look at my solution - maybe its too 'exotic' and there's a simpler method to accomplish the same end. Thanks for all the suggestions! Edit 5 Thanks to another user I looked at the Strategic Design Pattern - and this is exactly the solution I used for this problem. I had never heard of that before and ended up rethinking a problem that has already been done (took a while for someone to mention something about it). So the solution: Determine Algorithm at Runtime = Strategic Design Pattern.
