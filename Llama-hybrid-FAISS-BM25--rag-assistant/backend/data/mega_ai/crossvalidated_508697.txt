[site]: crossvalidated
[post_id]: 508697
[parent_id]: 
[tags]: 
k-Fold evaluation across periodic data

I am currently working on code to predict a customers next order on a B2B eCommerce site. The data has already been reduced down to a basic how much get orders for each part each week (with zero logically indicating no orders that week). As being relatively new to AI/Machine learning I may well not be using the correct approach, but based on the output I require I believe I have narrowed the field down a little. I have previously tried running individual linear regressions on dates of orders to predict next date of order, and similar then to predict quantity on next date, which had some limited success. I am currently using the code below to try and predict the next few order values. import numpy as np from sklearn.linear_model import LinearRegression def main(): data = np.array([4,0,0,5,0,0,3,0,0,4,0,0,0,5,0,0,5,0,0,5,0,0,4,0,0,4,0,5,0,0,5,0,5,0,0,5,0,0,4,0,0,5,0,0,3,0,0,5,0,4,0,4,0,5,0,0,4,0,0,5]) X=[] training_window=30 for i in range(len(data) - training_window): X.append(data[i:i+training_window]) y=data[training_window:] model = LinearRegression() model.fit(X,y) test = np.array([data[-training_window:]]) results =np.copy(data) for predictions in range(10): result = int(np.round_(model.predict(test))[0]) if result The first few results (i.e. three weeks of not ordering is a reasonable occurance) seem sensible. However the first predicted quantity is 34, an order of magnitude out of line. The next prediction being >100. Neither of which seem logical. Since I fall into the "trained by youTube" category, with my background being in databases rather than AI/ML I'm at a bit of a loss. The data here is an actual clients purchase history for a specific part rather than random data is represents a "real world" use case. My data sets are also smaller than I'd like, being time limited as many of the models that may have applied in a pre-covid environment have changed significantly. Any guideance as to assumptions I have made here that are incorrect or better approaches that are well known to the more experienced users would be greatly appreciated.
