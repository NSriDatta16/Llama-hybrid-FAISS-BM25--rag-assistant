[site]: datascience
[post_id]: 49357
[parent_id]: 49345
[tags]: 
Well, the first thing you need to consider about bar codes/QR Codes is that they are usually black with white background. If T-Shirts or Unique tags are been used, they should follow this pattern (or any one). You should be able to easily detect these. Take for example this image processing class at the end there is a bar-code example, which here I reproduce: 0 - Given a image: 1 - You can binarize by converting to grayscale and then performing adaptive threshoulding, which is basically a clustering algorithm for pixels: 2 - Then you can filter blobs by eccentricity 3 - Then by major axis: 4 - And finally by orientation This is a basic algorithm for segmenting bar-codes on hard surfaces. A T-shirt will render distorted bar-codes, but if you can narrow down the search region by detecting probable bar-codes in binary images you probably will get a large speed-up for then use of more complex algorithms such as the ones you propose. Suggestions: 1 - Add a FCN to regenerate image distorted by T-Shirt surface before step (3) in the previous algorithm 2 - Train a CNN to detect bar-code blobs on binary images (substituting steps 2,3 and 4) Update I will add another answer since you changed a bit the question by giving examples. Your unique identifiers seen to be compose of a fixed center (equal to all identifiers) with concentric arcs of 3 different radius $r_1 and the arcs with radius $r_2$ and $r_3$ are punctured with holes that are supposed to make them different from in each identifier. You can use threshoulding and Hough transform to identify the circles, you can use the center as reference to calculate the angular distance between the holes. Then you can differ an identifier from another by: Counting holes and then Analyzing their angular distance You can also use the arcs to predict/calculate the transformations suffered by the identifier by image distortions (rotation, shifting, non-linear transformation) and correct them.
