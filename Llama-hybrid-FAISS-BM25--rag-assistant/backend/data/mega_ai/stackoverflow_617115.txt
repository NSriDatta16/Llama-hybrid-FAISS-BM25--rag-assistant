[site]: stackoverflow
[post_id]: 617115
[parent_id]: 617062
[tags]: 
Don't forget the following issues/corner-cases that you will be facing if you go down your proposed route: Users can use Ctrl - V or Shift - Insert to paste "invalid" values in (That second one is a little trickier to catch) ... but users probably should be allowed to paste legal values into the control Users can right click, paste invalid values in using the default context-menu Even if you've tried to fix the previous issue by giving the textbox its own context menu, users can right-click outside your control, hold down the right button, drag over your textbox and let go to access the default context-menu (and paste in invalid values) Whatever key processing you do shouldn't disable key combinations like Alt - F4 , etc. (And yes, you will break this if you set SuppressKeyPress for everything that isn't a valid digit) Users should probably be able to enter partial values (e.g. "-." , as they begin to type "-.23" ) without your textbox punishing them Numbers like "-.1e-2" could be considered legal A user could feasibly enter a value which contains only digits, but which would overflow a float The worst one of all: Some other mysterious corner case that your users will find after you've shipped (!!) The moral? It's can be very tricky to do what you're suggesting. You probably either want to do a combination of the following: Use a control that someone that knows all the corner cases built (like microsoft) Do basic validation in the TextChanged event (and doing something passive, like changing the textbox background color) Save the validation until you actually try to use the value they've typed in Use the system libraries to Parse the user's value for you
