[site]: stackoverflow
[post_id]: 5250508
[parent_id]: 5250403
[tags]: 
They don't have to touch your client-side code -- they could just sniff and implement your Websocket protocol and write a tiny agent that pretends to be a human player. Update: The problem has a few parts, and I don't have answers off the top of my head, but the various options could be evaluated with these questions in mind: How far are you willing to go to prevent cheating? If you only care about casual cheating, how many barriers are enough to discourage the casual cheater? The intermediate Javascript programmer? A serious expert? Weighing this against the benefits of cheating, is there anything of real value at stake, like cash and prizes, or just reputation? How do you get a high confidence that a human is providing inputs to your game? For example, with a good enough computer vision library I could model your game on a separate machine feed inputs to the computer pretending to be the mouse, but this has a high relative cost (not worth my time). How can you create a chain of trust in your protocol such that knowledge of (2) can be passed to the server, and that your server is relatively confident your client code is sending the messages? Sure many of the roadblocks you throw up can be side-stepped, but what is the cost to the player and you? See " Attrition warfare ".
