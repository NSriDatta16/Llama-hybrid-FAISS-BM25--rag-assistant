[site]: stackoverflow
[post_id]: 2054485
[parent_id]: 2054281
[tags]: 
I wrote my own CF framework as well. It was worth it because the framework does exactly what I want, how I want, and is very flexible. Here's what I recommend: Create a UDF library so you can use CFScript wherever possible. Have a debug template that pretty-prints all important data and queries at the bottom of every HTML response. I also use my debug template to email user-generated errors to myself with all relevant request, history and query data. have a function that lets you do queries inside CFScript. Have companion functions to protect the string from SQL injection attacks (sample below). Divide each request into an area and a path (eg. /area/path/to/template). This lets you do custom logic based on where in the site the user is. It's amazing how useful this locality information can be to customising a site. Don't do like Mach-ii and setup the site in an XML file. Just put templates in the relevant place and load them from index.cfm based on the request. On any page that uses more than a couple of lines of setup code put all the code in a seperate template and cfinclude it at the top of your page. This means you can give the page to a graphic designer with less risk of them screwing it up or getting lost. Include the entire framework with every site. It's tempting to try and link individual sites to a common framework directory (ie, via symlinks, aliases or service calls) but in practice your framework will evolve along different paths as clients will want specific customisations that would break your other sites. Always make simplicity paramount. You don't want to mangle the environment so much that you can't include templates from other projects (like the connectors that come with WYSIWYG editors). Your rule of thumb should be that another Coldfusion programmer could begin using your framework within an hour without you holding their hand. Put ALL your framework variables into a single struct so you don't pollute your scopes with framework vars. It also helps other users know the difference between a framework variable and a template variable. I use fw.scope.varname for every single variable that will be visible from a page template (ie, request and variable scopes). Use CFC's! I can't begin to tell you how much they assist in keeping your code organised. I generally instantiate all my CFC's at the start of every request so I can easily access their their members from CFScript using the form fw.mycfc.mymethod() CFScript SQL function example: sql("SELECT * FROM "#fsafe(this.table)#" WHERE "#fsafe(my.field)#"='#vsafe(my.value)#';", my.cache_mins); Where fsafe protects table/field names and vsafe protects strings from SQL injection (by escaping double or single quotes)
