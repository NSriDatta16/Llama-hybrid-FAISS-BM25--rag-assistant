[site]: stackoverflow
[post_id]: 1490286
[parent_id]: 
[tags]: 
"Pinnacle" of Encapsulation - Question Regarding Advice from Effective C++

Item 23 of Effective C++ states: Prefer non-member non-friend functions to member functions. The whole purpose of the item was to encourage encapsulation, as well as package flexibility and functional extensibility, but my question is how far do you go when it comes to taking this advice? For example, you could have your class, your private data members, and then take a minimalist approach by reducing public functions to only accessors and/or mutators for your private data members. Then, every single other function could be a non-member function. However, would you be willing to increase encapsulation at the possible sacrifice of code clarity with accessors and mutators all over the place? Where is the line drawn?
