[site]: stackoverflow
[post_id]: 3602135
[parent_id]: 3595811
[tags]: 
Hey folks, Nikolay, the author of RightJS is in here. Thanks to Anurag, he described RightJS pretty well. And couple of notes though. You actually already can mix the String#on and calls by name just as you described "div.boo".on('click', 'toggleClass', 'marked'); Then in RightJS2 which is going to have the RC2 release right about tomorrow you'll be able to do things like "div.boo".onClick('toggleClass'); "div.boo".observes('click'); // true "div.boo".stopObserving('click'); And you also will be able to use any custom events with those, just like that "div.boo".on('something', 'addClass', 'something-happened'); Custom events in RightJS2 bubble, have targets and everything you need. Then about the dom wrappers and Calendar , yes elements and widgets will be in the same hierarchy of dom-wrappers and you will be able to toss them around just like that $(document.body).insert(new Calednar(...)); You also will be able to manipulate with them on the dom level using direct access to the raw dom-object, like that var calendar = new Calendar(); document.body.appendChild(calendar._); BTW: Patrick. If you by any chance use Rails, you should also check out the right-rails plugin, there are quite a few really nice things on JavaScript and Rails integration. Then if you ask about the genuine feeling working with RightJS, I would say it depends. RightJS was build for server-side folks who used to work with classes and objects, there are quite a few things for quick and agile development to solve the easy problems the easy way, but to get the most of it you need think in objects. If you also happened to have experience with Prototype or Ruby, most of the things should be pretty familiar, I tried to reuse as much method names as I could. If all you know is jQuery, some things might look a bit strange from the beginning, but I saw several guys who happily migrated from jQuery. So I guess you'll be fine. As for the code readability, imho it absolutely kicks ass. Readability was one of the primary concerns in RightJS development, you can read most of the code just like a plain English "div.zing".on('click', 'toggleClass', 'marked'); $('my-element').update('with some text').highlight(); $$('li').each('onClick', 'toggleClass', 'marked'); And so one. Check this page, if you haven't yet http://rightjs.org/philosophy This is about it. Ask if you have any more questions.
