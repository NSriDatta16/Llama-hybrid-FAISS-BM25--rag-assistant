[site]: datascience
[post_id]: 112331
[parent_id]: 112316
[tags]: 
Voting districts can be matched to ZIP codes by their coordinates. To get an approximate result I suggest the following algorithm: Calculate voting district coordinates by averaging its polygon coordinates. Add data about ZIP code coordinates. I downloaded it here . Match voting districts to the closest ZIPs. Python implementation import pandas as pd import numpy as np import json from scipy import spatial import math def load_precincts_geojson(): return json.load(open('./precincts-with-results.geojson')) def load_zip_coordinates(): df = pd.read_csv('./uszips.csv') return df[['zip', 'lat', 'lng']] def get_geo_id_coordinates_from_geojson(geojson): recs = [] for item in geojson['features']: all_coordinates = flatten_coordinates(item['geometry']['coordinates']) coordinates = np.array(flatten_coordinates(item['geometry']['coordinates'])) rec = { 'geo_id': item['properties']['GEOID'], 'lat': np.mean(coordinates[:, 1]), 'lng': np.mean(coordinates[:, 0]) } recs.append(rec) return pd.DataFrame(recs) def flatten_coordinates(arr): if type(arr[0]) != list: return [arr] result = [] for sub_arr in arr: for coord in flatten_coordinates(sub_arr): result.append(coord) return result def get_closest_location_indexes(left_df, right_df): result = [] left_sphere_coordinates = [ location_sphere_coordinates(row['lat'], row['lng']) for _index, row in left_df.iterrows() ] right_sphere_coordinates = [ location_sphere_coordinates(row['lat'], row['lng']) for _index, row in right_df.iterrows() ] # kd-tree much more faster than pairwise comparison tree = spatial.KDTree(right_sphere_coordinates) for left_coordinate in left_sphere_coordinates: _dist, index = tree.query(left_coordinate) result.append(index) return result def location_sphere_coordinates(lat, lng): lat = math.radians(lat) lng = math.radians(lng) x = np.cos(lng) * np.sin(lat) y = np.sin(lng) * np.sin(lat) z = np.cos(lat) return (x, y, z) precincts_geojson = load_precincts_geojson() precincts_coordinates = get_geo_id_coordinates_from_geojson(precincts_geojson) zip_coordinates = load_zip_coordinates() closest_zip_indexes = get_closest_location_indexes(precincts_coordinates, zip_coordinates) geo_id_to_zip = pd.DataFrame({ 'geo_id': precincts_coordinates['geo_id'], 'zip': np.array(zip_coordinates['zip'])[closest_zip_indexes] })
