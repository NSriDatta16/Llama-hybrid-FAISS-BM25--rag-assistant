[site]: stackoverflow
[post_id]: 1638520
[parent_id]: 1638394
[tags]: 
Part of the decision to make something a member or non-member also has to do with complexity and managing complexity. For example, if there are 20 or fewer functions that need to be associated with a class, then why not make them all member functions. However, when the number runs to 100 or several hundred, it often helps to organize those functions into groups and create a pseudo-class that either stores an instance variable of the other class, or serves as a holder for class/static functions that operate on the other class. For example, one might have a document object, but an editor class that operates on it and contains the editing functions, rather than having all the editing functions on the document. There are no hard or fast rules - just principles, such as encapsulate, manage complexity, reduce dependencies. Some of these involve tradeoffs, and have to be analyzed in the context of the problem to which they are being applied.
