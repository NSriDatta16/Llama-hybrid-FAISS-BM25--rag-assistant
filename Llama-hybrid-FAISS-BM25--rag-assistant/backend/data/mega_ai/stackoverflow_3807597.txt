[site]: stackoverflow
[post_id]: 3807597
[parent_id]: 3807174
[tags]: 
First question, do you really need to do this? Assuming admin users can access all projects, the typical approach to something like this would be to give admins a dropdown on the frontend that lists all projects and allows them to switch between them. Once they've selected one this selection is stored in their session and they can view data as if they were logged in as one of those users. They can then switch between projects at will. If you really need two logins, this certainly should be possible. By default Zend_Auth uses the class Zend_Auth_Storage_Session for storing the result of authentication in the session. This class uses the session namespace 'Zend_Auth' by default (i.e. the data is being stored in $_SESSION['Zend_Auth'] ), so when your frontend user successfully logs into the admin their session auth data is being overwritten by the result of the admin auth. So what you want to do is get Zend_Auth_Storage_Session to use a different namespace for the admin logins (or a custom namespace for each). In theory you should be able to do something like this: public function loginAction() { $auth = Zend_Auth::getInstance(); if (...) { // check some condition that returns true for admin logins // setup storage with custom admin namespace (can be any string) $authStorage = new Zend_Auth_Storage_Session('Yourapp_Admin_Auth'); } else { // use defaults $authStorage = new Zend_Auth_Storage_Session(); } $auth->setStorage($authStorage); // carry on login as normal [...] } so, what this is doing is getting Zend_Auth to use $_SESSION['Yourapp_Admin_Auth'] for admin logins and the default $_SESSION['Zend_Auth'] for frontend ones.
