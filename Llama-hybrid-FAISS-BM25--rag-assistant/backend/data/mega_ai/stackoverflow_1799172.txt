[site]: stackoverflow
[post_id]: 1799172
[parent_id]: 1798441
[tags]: 
You can use CGPathApply to iterate through the elements in a path. It's a little bit more complex than just a one-liner but if you package it up in a simple helper function, it might be useful for you. Here is one version that creates a new path and transforms it: typedef struct { CGMutablePathRef path; CGAffineTransform transform; } PathTransformInfo; static void PathTransformer(void *info, const CGPathElement *element) { PathTransformInfo *transformerInfo = info; switch (element->type) { case kCGPathElementMoveToPoint: CGPathMoveToPoint(transformerInfo->path, &transformerInfo->transform, element->points[0].x, element->points[0].y); break; case kCGPathElementAddLineToPoint: CGPathAddLineToPoint(transformerInfo->path, &transformerInfo->transform, element->points[0].x, element->points[0].y); break; case kCGPathElementAddQuadCurveToPoint: CGPathAddQuadCurveToPoint(transformerInfo->path, &transformerInfo->transform, element->points[0].x, element->points[0].y, element->points[1].x, element->points[1].y); break; case kCGPathElementAddCurveToPoint: CGPathAddCurveToPoint(transformerInfo->path, &transformerInfo->transform, element->points[0].x, element->points[0].y, element->points[1].x, element->points[1].y, element->points[2].x, element->points[2].y); break; case kCGPathElementCloseSubpath: CGPathCloseSubpath(transformerInfo->path); break; } } To use it you would do (this is the part I would put inside a helper function): PathTransformInfo info; info.path = CGPathCreateMutable(); info.transform = CGAffineTransformMakeScale(2, 1); CGPathApply(originalPath, &info, PathTransformer); The transformed path is in info.path at this point.
