[site]: crossvalidated
[post_id]: 619770
[parent_id]: 
[tags]: 
Modify normal TCN to seq2seq TCN for binary classification

I'm working in PyTorch and I would like to use a Temporal Convolutional Neural Network (TCN) to perform binary classification for each timestep of an input sequence, therefore a Sequence-to-Sequence (Seq2Seq) TCN. I'm considering the TCN PyTorch implementation defined here and here which is used in this MNIST example to perform a multiclass classification, with 10 classes, since the MNIST dataset contains 10 digits (0-9). Each image of the MNIST dataset is 28 x 28, therefore. A tensor of shape (B, 1, 28, 28) , where B is the batch size, is reshaped as (B, 1, 784) and it is forwarded as input to the network, which produces an output of shape (B, 10) since there are 10 classes. In my case, I extracted 40 MFCC (acoustic features) for every timestep of an audio input. In order to pass a batch of tensors (each one containing 40 MFCC for 1500 timesteps) to the network, I reshaped a tensor of shape (B, 1, 1500, 40) to a tensor of shape (B, 1, 60000) . Since I'm interested in binary classification, I set n_classes equal to 1 (instead of 10, as in the example) and I replaced softmax in this line with return F.sigmoid(o) , and I obtain an output of shape (B, 1) . Since I would like a prediction for each of the 1500 timesteps, I would like an output of shape (B, 1500) . How should I modify the TCN implementation to achieve a TCN Sequence-to-Sequence (TCN Seq2Seq)?
