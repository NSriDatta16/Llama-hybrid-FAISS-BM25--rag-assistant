[site]: stackoverflow
[post_id]: 3103782
[parent_id]: 
[tags]: 
Rule of thumb to test the equality of two doubles in C#?

Let's say I have some code that does some floating point arithmetic and stores the values in doubles. Because some values can't be represented perfectly in binary, how do I test for equality to a reasonable degree of certainty? How do I determine what "reasonable" means? Can double.Epsilon be used in some way? Update Couple things. As @ho1 pointed out, the documentation for double.Epsilon points out that, when it comes to comparing two doubles for equality, you are probably going to want a value much greater than epsilon. Here is the relevant paragraph from the documentation: Two apparently equivalent floating-point numbers might not compare equal because of differences in their least significant digits. For example, the C# expression, (double)1/3 == (double)0.33333, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits. If you create a custom algorithm that determines whether two floating-point numbers can be considered equal, you must use a value that is greater than the Epsilon constant to establish the acceptable absolute margin of difference for the two values to be considered equal. (Typically, that margin of difference is many times greater than Epsilon .) -- http://msdn.microsoft.com/en-us/library/system.double.epsilon.aspx ...but the question is, how many times greater?? In case it would affect your answer, my particular situation involves geometry calculations (such as dot products and cross products using points and vectors). In some cases, you reach different conclusions based on whether A == B , A > B , or A , so I'm looking for a good rule of thumb for how to determine the size of the equivalence window.
