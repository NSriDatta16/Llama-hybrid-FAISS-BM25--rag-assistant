[site]: stackoverflow
[post_id]: 1401769
[parent_id]: 1394636
[tags]: 
Going by the strict definition of unit testing used by Glen Beck and co, it could well actually be a bad idea to create unit tests in your situation. What you definitely and unarguably need for a library to be used by anyone outside shouting range of your workstation is a full set of user-level API system tests. Ones that exercise the complete system in the same way client code would, not piece-by-piece in isolation. Once you have those, then depending on: execution time (influenced by your language and nature of what you are doing). internal hidden complexity size of the API number of simultaneous developers on the library build time it could well be that you can set up a complete set of system tests that covers everything that needs covering and executes in seconds. You could supplement this by a small set of focused unit tests on the lowest-level and most complex 10% of the code, but full coverage of everything at unit level could well be wasted effort. Note: in the case of a system that is a library, a unit test tool like Junit is perfectly well suited to creating such complete-system tests. So a lot of people would end up calling them unit tests. Which is fine, as long as you don't fall for the argument that giving them that name changes anything about the way they should work. The qualities that make good unit tests not only do not apply, they may well be actively harmful.
