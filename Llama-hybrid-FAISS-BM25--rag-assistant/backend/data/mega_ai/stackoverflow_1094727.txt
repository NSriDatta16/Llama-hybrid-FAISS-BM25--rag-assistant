[site]: stackoverflow
[post_id]: 1094727
[parent_id]: 1092783
[tags]: 
Don't import System.FilePath.Posix if you don't need to. System.FilePath exports System.FilePath.Posix or System.FilePath.Windows according to the platform you're compiling on. Your words2 implementation is fine, but lacks any explanation as to why it does what it does. This is more self-explanatory, and the efficiency difference is not significant. alphaWords = words . map (\c -> if isAlpha c then c else ' ') Little improvements in searchWords : - wordsPerFile - liftM (wordsWithSuffix suffix) (readFile x)) + wordsPerFile Type annotations inside let constructs are not common unless the typechecker really needs assistance... though if I were paying attention to them I wouldn't have made my earlier mistake of trying to move isSearchable :) Also, in main , I would change this: - putStrLn $ unlines words + mapM_ putStrLn words I'm not familiar with the modules exposed by MissingH; is System.IO.HVFS.Utils.recurseDir lazy? If not, adding System.IO.Unsafe.unsafeInterleaveIO may help with memory consumption when traversing a large directory tree.
