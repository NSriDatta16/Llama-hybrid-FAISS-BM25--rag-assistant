[site]: stackoverflow
[post_id]: 1498811
[parent_id]: 
[tags]: 
Implementing IEquatable where T is an interface

I have a domain model that is trivially represented by the following. IMyInterface ClassA : IMyInterface ClassB : IMyInterface What I want is to implement IEquatable in such a way that I can write code something like. if(dynamicallyCreatedInstanceOfClassA == dynamicallyCreatedinstanceOfClassB) { // Do something relevant } My first inclination was to have IMyInterface implement IEquatable but of course I can't actually do the implementing in IMyInterface. I would have to do that in ClassA and ClassB. What strikes me as wrong with this solution is that the implementations of IEquatable in ClassA and ClassB will be exactly, line for line the same. Is there an elegant way to accomplish this? When ClassC comes along I don't want to have to copy and past 50 lines of duplicated IEquatable code. I have considered using an abstract base class instead of an interface, but in this scenario IMyInterface really just describes actions the class will perform and not what the class is. ClassA and ClassB don't share many similarities except they can both perform the actions in the IMyInterface contract. Any insights are helpful, and thank you for your time.
