[site]: stackoverflow
[post_id]: 2110907
[parent_id]: 2110104
[tags]: 
You could perhaps do it by getting the innerHTML , changing the character whose offset you're looking for, and then re-parsing and diffing the resulting text nodes to find the one where the changed data ended up. eg. function findTextFromMarkupIndex(el1, ix) { // make comparison element var el2= document.createElement(el1.tagName); // replace any other use of * in its HTML out of the way var html= el1.innerHTML.split('*').join('x'); // insert a * at the given index in HTML el2.innerHTML= html.substring(0, ix)+'*'+html.substring(ix); // search the resulting DOM for the * and return the matching descandent from the original return findTextInComparison(el1, el2, '*'); } function findTextInComparison(el1, el2, text) { for (var i= 0; i Untested but should work, for characters in text content anyway. You could extend it to also look inside attribute values if you needed to, but you couldn't do index points inside markup such as an element or entity/character reference. For that to work, you'd essentially need to write an entire HTML parser. This sounds like an unusual requirement, what exactly are you trying to do? Indexes within innerHTML can be quite fragile as the exact format of markup output for this property is not at all standardised.
