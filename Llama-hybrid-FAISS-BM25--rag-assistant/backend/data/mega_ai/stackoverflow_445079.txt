[site]: stackoverflow
[post_id]: 445079
[parent_id]: 444654
[tags]: 
Two things here, from my perspective. It's not outrageous to expect the exception itself to contain information about the value of i, or less specifically about the context it was evaluated in and what went wrong. For a trivial example, I would never just throw a straight InvalidArgumentException ; rather, I would ensure I passed an accurate description into the constructor, such as public void doStuff(int arg) { if (arg This might not expilictly log the value of i, but in most cases you're going to be able to understand what the problem was with your input that caused the error. This is an argument in favour of exception chaining too - if you catch, wrap and rethrow exceptions at every conceptual level, then each wrapping can add its own relevant variables that are too high up to be seen or understood by the fundamental low-level error. Alternatively, if things are really too abstracted for your myCall function to know what is going on, then I find that logging at a higher verbosity level before making the call works well, e.g. try { for ( int i = 0 ; i } catch ( Exception exception ) { Log( "Failure ! Maybe in myCall() ? Don't know. i's value ? No clue." ); } This way, if something does go wrong you can inspect your high-verbosity debug log and find what i was just before the call that threw the exception.
