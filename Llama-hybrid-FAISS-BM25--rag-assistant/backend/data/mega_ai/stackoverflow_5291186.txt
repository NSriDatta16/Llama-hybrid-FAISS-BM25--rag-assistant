[site]: stackoverflow
[post_id]: 5291186
[parent_id]: 
[tags]: 
Side effects of PHP's serialize as hash function

I'm looking to create a sort of HashMap class in PHP. For the sake of being able to build upon PHP's associative array functionality, I have a hash function, which should be able to take any variable (primitive or object) and turn it into a string for use as an array key. For this hash function, I am thinking of using serialize() , but I noticed that PHP calls __sleep() on an object when that function is called. I'm assuming this could be problematic. Am I right? If so, what can I use to get a hash of either a primitive data type or of an object? I did look at spl_object_hash() , but its results seem less than unique, as it uses reference locations, which appear to be reused? Any thoughts? Thanks Update: If anyone's interested, this is (roughly speaking) what I ended up with. The Collection interface can be ignored. Any improvements welcome, of course. Oh, and there isn't a remove method yet. data = new \SplObjectStorage(); $this->hashes = array(); } public function add($key, $value) { // var_dump($this->hash($key)); $this->data->offsetSet($this->hash($key), $value); } private function hash($key) { if (!is_object($key)) { if (isset($this->hashes[$key])) { return $this->hashes[$key]; } else { $obj = new PrimitiveAsObject(serialize($key)); return ($this->hashes[$key] = $obj); } } else { return $key; } } public function get($key) { $key = $this->hash($key); if ($this->data->contains($key)) { return $this->data->offsetGet($key); } else { return null; } } } class PrimitiveAsObject { private $val; public function __construct($v) { $this->val = $v; } }
