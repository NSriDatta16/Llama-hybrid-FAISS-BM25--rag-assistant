[site]: crossvalidated
[post_id]: 353682
[parent_id]: 
[tags]: 
Regression algorithm for weak correlated target and features

I have a regression problem in hand. Dataset have 20 predictors and 1 target. Target is continuous and predictors are both categorical and continous. I performed a correlation test between continous predictors and target and found very week to negligible linear relation. #selecting numeric / continous variables numCols Here Absenteeism.in.hours is my target. My question is how should i approach this kind of data. What can be an appropriate machine learning technique for regression in this case. Structure of my dataset is > str(employee_data_Imputed) 'data.frame': 740 obs. of 21 variables: $ ID : Factor w/ 36 levels "1","2","3","4",..: 11 36 3 7 11 3 10 20 14 1 ... $ Reason.for.absence : Factor w/ 28 levels "1","2","3","4",..: 26 20 23 7 23 23 22 23 19 22 ... $ Month.of.absence : Factor w/ 12 levels "1","2","3","4",..: 7 7 7 7 7 7 7 7 7 7 ... $ Day.of.the.week : Factor w/ 5 levels "2","3","4","5",..: 2 2 3 4 4 5 5 5 1 1 ... $ Seasons : Factor w/ 4 levels "1","2","3","4": 1 1 1 1 1 1 1 1 1 1 ... $ Transportation.expense : num 289 118 179 279 289 179 361 260 155 235 ... $ Distance.from.Residence.to.Work: num 36 13 51 5 36 51 52 50 12 11 ... $ Service.time : num 13 18 18 14 13 18 3 11 14 14 ... $ Age : num 33 50 38 39 33 38 28 36 34 37 ... $ Work.load.Average.day : num 239554 239554 239554 239554 239554 ... $ Hit.target : num 97 97 97 97 97 97 97 97 97 97 ... $ Disciplinary.failure : Factor w/ 2 levels "0","1": 1 2 1 1 1 1 1 1 1 1 ... $ Education : Factor w/ 4 levels "1","2","3","4": 1 1 1 1 1 1 1 1 1 3 ... $ Son : num 2 1 0 2 2 0 1 4 2 1 ... $ Social.drinker : Factor w/ 2 levels "0","1": 2 2 2 2 2 2 2 2 2 1 ... $ Social.smoker : Factor w/ 2 levels "0","1": 1 1 1 2 1 1 1 1 1 1 ... $ Pet : num 1 0 0 0 1 0 4 0 0 1 ... $ Weight : num 90 98 89 68 90 89 80 65 95 88 ... $ Height : num 172 178 170 168 172 170 172 168 196 172 ... $ Body.mass.index : num 30 31 31 24 30 31 27 23 25 29 ... $ Absenteeism.time.in.hours : num 4 0 2 4 2 2 8 4 8 8 ...
