[site]: stackoverflow
[post_id]: 2906254
[parent_id]: 2903991
[tags]: 
While it can be annoying when used as an anti-piracy measure, I can see there might be some instances where it'd be legitimate, so: function disableCopyPaste(elm) { // Disable cut/copy/paste key events elm.onkeydown = interceptKeys // Disable right click events elm.oncontextmenu = function() { return false } } function interceptKeys(evt) { evt = evt||window.event // IE support var c = evt.keyCode var ctrlDown = evt.ctrlKey||evt.metaKey // Mac support // Check for Alt+Gr (http://en.wikipedia.org/wiki/AltGr_key) if (ctrlDown && evt.altKey) return true // Check for ctrl+c, v and x else if (ctrlDown && c==67) return false // c else if (ctrlDown && c==86) return false // v else if (ctrlDown && c==88) return false // x // Otherwise allow return true } I've used event.ctrlKey rather than checking for the key code as on most browsers on Mac OS X Ctrl / Alt "down" and "up" events are never triggered, so the only way to detect is to use event.ctrlKey in the e.g. c event after the Ctrl key is held down. I've also substituted ctrlKey with metaKey for macs. Limitations of this method: Opera doesn't allow disabling right click events Drag and drop between browser windows can't be prevented as far as I know. The edit -> copy menu item in e.g. Firefox can still allow copy/pasting. There's also no guarantee that for people with different keyboard layouts/locales that copy/paste/cut are the same key codes (though layouts often just follow the same standard as English), but blanket "disable all control keys" mean that select all etc will also be disabled so I think that's a compromise which needs to be made.
