[site]: stackoverflow
[post_id]: 4133540
[parent_id]: 4132132
[tags]: 
It is possible to pickle class instances. If I knew what classes your application uses, then I could subvert them. A contrived example: import subprocess class Command(object): def __init__(self, command): self._command = self._sanitize(command) @staticmethod def _sanitize(command): return filter(lambda c: c in string.letters, command) def run(self): subprocess.call('/usr/lib/myprog/%s' % self._command, shell=True) Now if your program creates Command instances and saves them using pickle, and I could subvert or inject into that storage, then I could run any command I choose by setting self._command directly. In practice my example should never pass for secure code anyway. But note that if the sanitize function is secure, then so is the entire class, apart from the possible use of pickle from untrusted data breaking this. Therefore, there exist programs which are secure but can be made insecure by the inappropriate use of pickle. The danger is that your pickle-using code could be subverted along the same principle but in innocent-looking code where the vulnerability is far less obvious. The best thing to do is to always avoid using pickle to load untrusted data.
