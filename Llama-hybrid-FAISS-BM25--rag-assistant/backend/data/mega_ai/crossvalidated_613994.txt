[site]: crossvalidated
[post_id]: 613994
[parent_id]: 613718
[tags]: 
In general, problems like this can be solved by writing out the likelihood function: the likelihood of seeing a particular set of observations as a function of the parameters of the CDF, which I presume is Gaussian with parameters $\mu$ and $\sigma$ . In R, this would look as follows likelihood_function = function(parameters, asking_price, number_asked){ mu = parameters[1] sigma = parameters[2] # Probability of any one person accepting the asking price p_accept = pnorm(asking_price, mu, sigma, lower.tail = T) # Number of people asked BEFORE someone accepts # follows geometric distribution (pdf = p_accept * (1 - p_accept)^number), number_of_rejections = number_asked - 1 loglikelihood = dgeom(number_of_rejections, p_accept, log = T) loglikelihood_adj = loglikelihood + 1e-6 # Add tiny correction to prevent underflow sum(loglikelihood_adj) } You can then use optimisation to find the parameters that maximise this function: the maximum-likelihood parameters. starting_values = c(mu = 50, sigma = 100) result = optim(starting_values, likelihood_function, asking_price = data$asking_price, number_asked = data$number_asked, control = list(fnscale = -1)) # Find max, not min result$par You can find plenty of information on this site on how to calculate the uncertainty around these estimates, e.g. using Fisher information, or Bayesian methods. While we're here, the code below simulates data from the model you describe. library(tidyverse) true_pars = c(mu = 10, sigma = 10) simulate_trials = function(n_trials, mu, sigma){ # Distribution of asking prices is uniform [0, 100] asking_price = round(runif(n_trials, 0, 100)) # Probability of any one person accepting the asking price p_accept = pnorm(asking_price, mu, sigma, lower.tail = T) # Number of people asked BEFORE someone accepts # follows geometric distribution (pdf = p_accept * (1 - p_accept)^number), number_of_rejections = rgeom(n_trials, prob = p_accept) # so total number asked is that +1 number_asked = number_of_rejections + 1 data.frame(asking_price, p_accept, number_asked) %>% arrange(asking_price) } data = simulate_trials(1000, true_pars[1], true_pars[2]) # ggplot(data, aes(asking_price, p_accept)) + geom_path() ggplot(data, aes(asking_price, number_asked)) + stat_smooth() + scale_y_log10()
