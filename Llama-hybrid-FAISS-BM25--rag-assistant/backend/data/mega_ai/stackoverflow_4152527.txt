[site]: stackoverflow
[post_id]: 4152527
[parent_id]: 4152436
[tags]: 
The standard approach varies from system to system depending to the architecture and domain. How the server finds out that the client is down? I think you don't need callbacks, since you send the notifications and can detect that the client is unreachable. For example: send a notification to the client; if success, goto 1; else erase all the notifications in the queue for the client, set a flag to not collect events for the client. When a client is connected: unset the flag; start sending notifications Or even a simpler approach: erase the notification queue for the client when it connects before initializing the conversation; run a low-priority thread to erase all the notifications for all the clients which are older then X, to clean notifications for the client which will never come back. Update after the original author comments It strongly depends on how things are organized in your system. Assuming: The server starts a thread (let's call it "agent") to serve a client, a thread per client. The agent exits when the clients shuts down the session properly or goes down. there is a private (which is not shared among agents/clients) record set for each client there is a shared list of current clients which is used by another component (not an ordinary agent, let's call it "dispatcher") to distribute records for clients. solution: 1. the server starts an agent and registers the client just connected to list of clients. The dispatcher gets notified that a new client arrived. 2. the agent consumes the records until client is connected. On client's shutdown and/or failure the agents unregisters the client and cleans the record set. If things in your system aren't organized in the way described above, please provide some details.
