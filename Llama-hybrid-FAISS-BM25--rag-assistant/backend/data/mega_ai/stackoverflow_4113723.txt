[site]: stackoverflow
[post_id]: 4113723
[parent_id]: 4070744
[tags]: 
So, being as the weather isn't very nice outside I've had a go at answering my own question and implementing the 'workaround' described in my reply to westsider. The idea is to hold a 'mapping' array (just a simple 7 slot int array) which will map the section the tableview will ask for to the underlying fetchedresultscontroller section. Each array slot will have the appropriate section index or '-1' where there are no underlying sections (and where a 'No Booking' cell should be shown instead). So, my refetchResults method becomes: - (void)refetchResults { // Create the fetch request for the entity. NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init]; NSEntityDescription *entity = [NSEntityDescription entityForName:@"Booking" inManagedObjectContext:self.managedObjectContext]; [fetchRequest setEntity:entity]; // Limit to this weeks data [fetchRequest setPredicate: [NSPredicate predicateWithFormat:@"(date >= %@) && (date The mapping is set in the following method. This is called whenever the mapping needs to be refreshed - for example when I get callbacks from the fetchedresultscontroller for items that have been added/deleted/etc. - (void)updateFRCMap { // Set mapping table for seven days of week to appropriate section in frc for (int idx=0;idx 0) { // Look at first booking of section to get date NSDate *date = [(Booking *)[self.fetchedResultsController objectAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:sidx]] date]; // Decide on array index by difference in firstDate and booking date int idx = (int)[date timeIntervalSinceDate:firstDate]/86400; // Set map frcMap[idx] = sidx; } } } This can probably be optimised a bit but works OK for now. I suspect it might suffer GMT/BST clock change problems which will need fixing ... not that clock change problems are all that urgent, eh Apple? ;P After that it's just a case of using the mapping array when responding to the tableview: #pragma mark - #pragma mark Table view data source // Gets the booking from the fetchedResultsController using a remapped indexPath - (Booking *)bookingForMappedIndexPath:(NSIndexPath *)indexPath { return (Booking *)[self.fetchedResultsController objectAtIndexPath: [NSIndexPath indexPathForRow:indexPath.row inSection:frcMap[indexPath.section]]]; } - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView { return 7; // 7 days viewed } - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { // Rows in section or 1 if no section if (frcMap[section] != -1) { id sectionInfo = [[self.fetchedResultsController sections] objectAtIndex:frcMap[section]]; return [sectionInfo numberOfObjects]; } else { return 1; } } - (UITableViewCell *)tableView:(UITableView *)_tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { static NSString *CellIdentifier = @"RegularCell"; UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier]; if (cell == nil) { cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier] autorelease]; } // Configure the cell. [self configureCell:cell atIndexPath:indexPath]; return cell; } - (void)configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath { // If no actual bookings for section then its a blank cell if (frcMap[indexPath.section] == -1) { // Configure a blank cell. cell.textLabel.text = @"No Bookings"; cell.detailTextLabel.text = @""; cell.textLabel.font = [UIFont systemFontOfSize:16]; cell.textLabel.textColor = [UIColor lightGrayColor]; cell.accessoryType = UITableViewCellAccessoryNone; cell.selectionStyle = UITableViewCellSelectionStyleNone; } else { // Regular cell Booking *booking = [self bookingForMappedIndexPath:indexPath]; cell.textLabel.text = booking.desc; cell.detailTextLabel.text = [NSString stringWithFormat:@"%@ %@", booking.location, booking.detail]; cell.textLabel.font = [UIFont systemFontOfSize:14]; cell.textLabel.textColor = [UIColor darkTextColor]; cell.detailTextLabel.font = [UIFont systemFontOfSize:12]; cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator; cell.selectionStyle = UITableViewCellSelectionStyleBlue; } } Any comments or better ways of writing this are very much welcome :)
