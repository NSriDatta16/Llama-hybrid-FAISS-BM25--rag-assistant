[site]: stackoverflow
[post_id]: 4430744
[parent_id]: 4427720
[tags]: 
I'd say that there is a great difference between developing applications independently and working as part of a team that is all familiar with Silverlight/WPF. It's quite true that you can design a UI with drag and drop, assign properties with the visual designer, and then write all the code behind you need in a XAML based framework and barely notice a difference between it and the Winforms experience you're used to. What would undoubtedly be different would be the process of working with other people who are familiar with all of the concepts and patterns that have become standard in the WPF/Silverlight world: Binding, Commands, Styles, Dependency Properties, etc. If your work needs to integrate with theirs, you'll have a problem if you ignore the differences in the two platforms. Which doesn't mean that Winforms experience is useless. All of the logic is still there, all of the same server side code still needs to be written and there's probably half a dozen other places where the kind of UI you're working with doesn't matter in the least. And probably the best way to learn about Silverlight or WPF is to have a real project to work with where you can ease into making some of the new ideas work with some of the same logic that you're used to. A lot of the question comes down to the quality of the programmer, regardless of the experience you've had. Of course if I wanted someone to maintain an existing WPF app, I'd want a programmer with that kind of experience, but I'd happily take someone who wrote good Winforms code and was willing to learn a new paradigm if I was looking to develop new applications or putting an entirely new team together. It would be a mistake to think that Winforms experience is 'good enough' in most cases where a Silverlight/WPF programmer is called for, in the same way that C++ experience is not 'good enough' if I need an experienced C# programmer. There are enough differences conceptually that you'd need to show at least a willingness to make the paradigm shift and probably some familiarity with the concepts that are core to the new technology. That said, good code is good code and I don't think anyone should be dismissed for lack of experience with a particular technology alone.
