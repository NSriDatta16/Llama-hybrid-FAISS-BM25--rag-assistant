[site]: stackoverflow
[post_id]: 422198
[parent_id]: 419379
[tags]: 
This question doesn't have an elegant answer, in my opinion. The options are callable objects, default values, and attribute hacks. Callable objects are the right answer, but they bring in a lot of structure for what would be a single "static" declaration in another language. Default values are a minor change to the code, but it's kludgy and can be confusing to a new python programmer looking at your code. I don't like them because their existence isn't hidden from anyone who might be looking at your API. I generally go with an attribute hack. My preferred method is: def myfunct(): if not hasattr(myfunct, 'state'): myfunct.state = list() # access myfunct.state in the body however you want This keeps the declaration of the state in the first line of the function where it belongs, as well as keeping myfunct as a function. The downside is you do the attribute check every time you call the function. This is almost certainly not going to be a bottleneck in most code.
