[site]: stackoverflow
[post_id]: 4559522
[parent_id]: 4559467
[tags]: 
Keep in mind that with standard RNGs (random number generators) your will get very even distribution of values. Given enough 'random' values you will get average results, as you have discovered. For the population of your database, I would consider this approach: Select a random number that will act as the average score for the movie. Then, generate a set of random numbers in the upper bound of that average. For example, if you randomly generate a 7, generate random numbers between 5 and 9. Then throw in a couple of values from 1 through 6 and 8 through 10 to give the appearance of outliers. EDIT: This answer might be what you're looking for, complete with code in Java. Even Distribution Example: Your code is likely similar to the following: public class EvenDistribution { private static Random random = new Random(); public static void main(String[] args) { int maxValue = 20; int[] distribution = new int[maxValue]; int iterations = 1000; for (int i = 0; i This class had the following output: 1: 47 2: 45 3: 59 4: 52 5: 54 6: 52 7: 49 8: 49 9: 49 10: 48 11: 40 12: 43 13: 42 14: 61 15: 43 16: 55 17: 47 18: 55 19: 64 20: 46 The distribution is very even. 19 looks a little abnormal, but overall we can say that this method of RNG produces predictable results. Using the Math Uncommons library mentioned above, I used the similar code, using the GaussianGenerator . public class RandomDistribution { private static MersenneTwisterRNG random = new MersenneTwisterRNG(); private static GaussianGenerator gen = new GaussianGenerator(7, 3, random); public static void main(String[] args) { int maxValue = 20; int[] distribution = new int[maxValue]; int iterations = 1000; for (int i = 0; i It produced the following output: 1: 19 2: 27 3: 41 4: 68 5: 110 6: 111 7: 125 8: 138 9: 125 10: 85 11: 64 12: 32 13: 32 14: 14 15: 5 16: 2 17: 1 18: 0 19: 1 20: 0 Seems like this library would be very good for what you are trying to accomplish.
