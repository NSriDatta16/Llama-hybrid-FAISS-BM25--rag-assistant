[site]: stackoverflow
[post_id]: 4785221
[parent_id]: 
[tags]: 
Avoid key violation on insert in EF

I'm using Entity Framework 4 and SQL Server 2008 R2. I have a situation where I would like to insert a record whos primary key fields might match an existing record. Rather than raise and error, I'd like to have the existing record silently updated with the new data. My current implementation is something like this: // Calculate primary key fields. DateTime endDate = periodTime.AddMinutes(periodMins); int meterId = pipe.MeterId; // Try to load a matching record. ProfileDatum lpRec = context.ProfileData.FirstOrDefault(rec => rec.MeterId == meterId && rec.EndDate == endDate); // If it could not be loaded, create a new one. if (lpRec == null) { lpRec = new ProfileDatum() {MeterId = meterId, EndDate = endDate}; // Save the object in the context. context.ProfileData.AddObject(lpRec); } // Fill lpRec. This works, but it's pretty awful in efficiency, readability and elegance. Sticking with the Entity Framework and SQL Server 2008 R2, is there any way to do something like MySQL's "on duplicate key update" where I proceed as if creating a new record each time and have the database update when there's a primary key violation? Or perhaps there is there some other elegant approach? Efficiency is nice but secondary in this case; it's simplicity I'm after. It would be great to be able to write it as follows and omit client-side checking: // Assign primary key fields. var lpRec = new ProfileDatum() { MeterId = pipe.MeterId, EndDate = periodTime.AddMinutes(periodMins) }; // Fill lpRec. // Save the object in the context. context.ProfileData.AddObject(lpRec); Thanks in advance for any help, even if it's to say that my existing implementation is the best way.
