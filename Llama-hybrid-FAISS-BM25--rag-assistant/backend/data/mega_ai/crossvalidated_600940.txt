[site]: crossvalidated
[post_id]: 600940
[parent_id]: 
[tags]: 
how to improve logistic regression model in python

I have 1 million raw data points, and I dropped 2 independent variable because the have over 80% missing value. All my variables are categorical except for "age" which I scaled between -1 and 1. Remaining were turned into dummy variables. i want both of the F1 scores to be high [0.94093409 0.56259895] specially in the 0.5625 here is my features sex: 1 for female and 2 for male. age: of the patient. classification: covid test findings. Values 1-3 mean that the patient was diagnosed with covid in different degrees. 4 or higher means that the patient is not a carrier of covid or that the test is inconclusive. patient type: type of care the patient received in the unit. 1 for returned home and 2 for hospitalization. pneumonia: whether the patient already have air sacs inflammation or not. pregnancy: whether the patient is pregnant or not. diabetes: whether the patient has diabetes or not. copd: Indicates whether the patient has Chronic obstructive pulmonary disease or not. asthma: whether the patient has asthma or not. inmsupr: whether the patient is immunosuppressed or not. hypertension: whether the patient has hypertension or not. cardiovascular: whether the patient has heart or blood vessels related disease. renal chronic: whether the patient has chronic renal disease or not. other disease: whether the patient has other disease or not. obesity: whether the patient is obese or not. tobacco: whether the patient is a tobacco user. usmr: Indicates whether the patient treated medical units of the first, second or third level. medical unit: type of institution of the National Health System that provided the care. intubed: whether the patient was connected to the ventilator. icu: Indicates whether the patient had been admitted to an Intensive Care Unit. date died: If the patient died indicate the date of death, and 9999-99-99 otherwise. #Creating the dependent variable “DEATH” covid['DEATH']= np.where(covid['DATE_DIED']=="9999-99-99",0,1) covid['DEATH'].value_counts() print('Data Shape :', covid.shape) covid.info() #Number of Unique Values by column for col in covid.columns : print('{: {:>10}'.format(col, len(covid[col].unique()))) #Percentage of missing values print('Percentage of missing values') for col in covid.columns : print('{: {:>10.2f}%'.format(col, len(covid[(covid[col]==98) | (covid[col]==99) | (covid[col]==97)])/len(covid)*100)) covid['INTUBED'].value_counts() covid['ICU'].value_counts() covid['PREGNANT'].value_counts() #Getting rid of the missing values of features except "INTUBED", "PREGNANT", "ICU"¶ cols = ['PNEUMONIA','DIABETES', 'COPD', 'ASTHMA', 'INMSUPR','HIPERTENSION', 'OTHER_DISEASE', 'CARDIOVASCULAR', 'OBESITY','RENAL_CHRONIC', 'TOBACCO'] for col in cols : covid = covid[(covid[col] == 1)|(covid[col] == 2)] # Converting process according to inference above covid.PREGNANT = covid.PREGNANT.replace(97,2) # Getting rid of the missing values covid = covid[(covid.PREGNANT == 1) | (covid.PREGNANT == 2)] covid.drop(columns=["INTUBED","ICU","DATE_DIED"], inplace=True) from pandas.core.indexing import convert_from_missing_indexer_tuple from sklearn.preprocessing import RobustScaler scaler = RobustScaler() covid.AGE = scaler.fit_transform(covid.AGE.values.reshape(-1,1)) #dummy corr=covid.corr() #Creation of the first line in spearman correlation matrix: corr["first line"]=["USMER","MEDICAL_UNIT","PATIENT_TYPE", "PNEUMONIA","AGE","PREGNANT","DIABETES","COPD","ASTHMA","INMSUPR","HIPERTENSION","OTHER_DISEASE","CARDIOVASCULAR","OBESITY","RENAL_CHRONIC","TOBACCO","CLASIFFICATION_FINAL","GENDER","DEATH"] corr1=0 var=[] while (corr1 0.1 or corr["DEATH"][corr1] the results are Percentage of missing values USMER => 0.00% MEDICAL_UNIT => 0.00% PATIENT_TYPE => 0.00% DATE_DIED => 0.00% INTUBED => 81.62% PNEUMONIA => 1.53% AGE => 0.03% PREGNANT => 50.28% DIABETES => 0.32% COPD => 0.29% ASTHMA => 0.28% INMSUPR => 0.32% HIPERTENSION => 0.30% OTHER_DISEASE => 0.48% CARDIOVASCULAR => 0.29% OBESITY => 0.29% RENAL_CHRONIC => 0.29% TOBACCO => 0.31% CLASIFFICATION_FINAL => 0.00% ICU => 81.64% GENDER => 0.00% DEATH => 0.00% Logistic regression model accuracy:0.94 Logistic Regression F1 Score : [0.96769158 0.51907982] precision before undersampling : 0.93 recall before undersampling : 0.94 Logistic Regression Accuracy after undersampling : 0.8959226207949275 Logistic Regression F1 Score after undersampling : [0.94093409 0.56259895] precision after undersampling : 0.95 recall after undersampling : 0.90 and I did a Random Forest model that also had poor results. I only did under sampling on training set because I do not want my model to be biased. Help me if you have another method or another machine learning model that will improve the results i will be grateful.
