[site]: stackoverflow
[post_id]: 1833698
[parent_id]: 1833373
[tags]: 
The key question is whether it's the simple retrieval of the data that's important or the aggregating and searching through it. Ie// What are you using the data FOR? If it's just data (ie// it's just some random text/binary), I wouldn't bother with a database at all. Just slap it in a series of files, strip it of encoding and use grep / sed / awk / LISP to move through it without any labels. Data is only really useful for search / retrieve operations rather then deep trending. If it's a single row or element of data (like a Stack Overflow question or comment), I'd consider either the NOSQL patterns (essentially, just lookups) or an OODB. If it's the relations that are important, I'd model it like a graph, with edges and nodes. Nodes contain data, edges contain relationships. I'd be tempted at that point to implement it manually using disk based pointers. If it's the sets of data (ie// considering characteristics of the data together) that are important, I'd think long and hard about the key groupings and design the relational database tables that way. If the design needed to change to accommodate new information and sets, then I'd manipulate the table structures to better model it when I learned about the new requirements. Much data can be indexed using the multidimensional format with (time, space, label) as the key and (attribute set, aggregatable characteristics, data) as the payload. Attributes map to dimensions and can be "rolled up" with the aggregatable characteristics (counts, sums, max/min, avg, stdev, etc...). Your question is a little vague without the why though, and it's the why that's critical to figuring out the design.
