[site]: stackoverflow
[post_id]: 3231431
[parent_id]: 813556
[tags]: 
As I see it there are a couple key aspects to what you are asking about. I don't think it is language specific, and you used a java app as an example so I hope you don't mind me not talking specifically about Java. Failover/HA : This is where you identify your SPoF - Single Points of Failure. Examples include hardcoded addresses as you mentioned, but also applications that store data in non-replicable means such as a local disk. Other items might be caching DNS lookups for "too long", not re-establishing severed connections, looking for specific hardware information (such as MAC addresses, CPUIDs, dongles, partition labels, MB or drive serial numbers, etc.). I've seen all of these as problems leading to unnecessary workarounds to get BCP/DR functional. Data Integrity : How is the data stored? Does it use a custom format/structure? If so is there a "dump and restore" mechanism? Does the service need to stop servicing clients, or does it degrade it's service to do backups? Does it write data to a device asynchronously and if so how often is it "flushed" to disk (sometimes this is up to the app, others not so much)? File locking, memory-to-persistent storage timeframes and capabilities are also part of this. Essentially look at what would cause you to have to work around. Then look at how that came abut and you'll probably start developing two important bits of knowledge: Patterns to use to improve BCP/DR, and as you mentioned, AntiPatterns that cause problems. Injecting these types of questions into the development process, as early as is feasible will help your developers derive the patterns and anti-patterns you are looking for. Often just asking the questions prevents the problems.
