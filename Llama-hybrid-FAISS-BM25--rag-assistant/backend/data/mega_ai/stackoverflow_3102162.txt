[site]: stackoverflow
[post_id]: 3102162
[parent_id]: 3101864
[tags]: 
require 'digest/sha2' class String def sha512 Digest::SHA2.new(512).hexdigest(encode('UTF-16LE')) end end 'hello'.sha512 # => '5165d592a6afe59f80d07436e35bd…5748578fc63ac91f8f95b6c140b93' As with all my code snippets on StackOverflow, I always assume the latest version of Ruby. Here's one that also works with Ruby 1.8: require 'iconv' require 'digest/sha2' class String def sha512(src_enc='UTF-8') Digest::SHA2.new(512).hexdigest(Iconv.conv(src_enc, 'UTF-16LE', self)) end end 'hello'.sha512 # => '5165d592a6afe59f80d07436e35bd…5748578fc63ac91f8f95b6c140b93' Note that in this case, you have to know and tell Ruby about the encoding the string is in explicitly. In Ruby 1.9, Ruby always knows what encoding a string is in, and will convert it accordingly, when required. I chose UTF-8 as default encoding because it is backwards-compatible with ASCII, is the standard encoding on the internet and also otherwise widely used. However, for example both .NET and Java use UTF-16LE, not UTF-8. If your string is not UTF-8 or ASCII-encoded, you will have to pass in the encoding name into the sha512 method. Off-Topic: 9 lines of code reduced to 1. I love Ruby! Well, actually that is a little bit unfair. You could have written it something like this: var messageBytes = new UnicodeEncoding().GetBytes(str); var hashValue = new System.Security.Cryptography.SHA512Managed(). ComputeHash(messageBytes); return hashValue.Aggregate ("", (s, b) => s += string.Format("{0:x2}", b) ); Which is really only 3 lines (broken into 5 for StackOverflow's layout) and most importantly gets rid of that ugly 1950s-style explicit for loop for a nice 1960s-style fold (aka. reduce aka. inject aka. Aggregate aka. inject:into: … it's all the same). There's probably an even more elegant way to write this, but a) I don't actually know C# and .NET and b) this question is about Ruby. Focus, Jörg, focus! :-) Aaand … found it: return string.Join("", from b in hashValue select string.Format("{0:x2}", b)); I knew there had to be an equivalent to Ruby's Enumerable#join somewhere, I just was looking in the wrong place.
