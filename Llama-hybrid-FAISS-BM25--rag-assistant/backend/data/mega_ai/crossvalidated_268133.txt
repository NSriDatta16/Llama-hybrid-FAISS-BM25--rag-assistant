[site]: crossvalidated
[post_id]: 268133
[parent_id]: 
[tags]: 
How do I compare short alphanumerical text and classify the outcome with Machine Learning?

I have an adjudication automation problem. I have many lists of different instruments, each with a set of specifications. These specifications were sent to vendors that tender on the instruments. I receive back information from the vendors specifying what they can provide. I now need to compare the requirement with what they can supply and label the comparison of each specification with a "C" for compliance, "NC" for non-compliance, "PC" for partially compliant, "N/A" for not applicable and "INA" for information not available. The judgement cannot be made with a simple comparison as the judgement may depend on some of the other specification fields of the instrument. The specifications are mostly text, but sometimes numbers as well. Here is an example of a table with some data: Limmited Data Example I want to transform the text into features, but I have difficulty in determining the best route: The one way that I want to proceed is to vectorize the strings by tokenizing and a bag of words, but I do not know if this will generalise well because of the comparative nature of the test. So I thought I would then create 3 bags of words; one for the spec value, one for the vendor-value-and one for the line number(which is alphanumerical) and stack the vectors together as a feature vector The second way I am considering is doing several similarity tests between the specified value and the vendor provided value and use the outcomes of the similarity tests as features for training. How should I typically start with such a classification? I want to complete this problem in C#
