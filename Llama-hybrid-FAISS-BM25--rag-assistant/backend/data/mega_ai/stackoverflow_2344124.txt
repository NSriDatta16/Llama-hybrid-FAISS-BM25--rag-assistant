[site]: stackoverflow
[post_id]: 2344124
[parent_id]: 2344081
[tags]: 
Although this is subjective and argumentative, there is evidence that you can write a successful NLP project in python like NLTK . They also have a comparison of NLP functionality in different languages : (Quoting from the comparison) Many programming languages have been used for NLP. As explained in the Preface, we have chosen Python because we believe it is well-suited to the special requirements of NLP. Here we present a brief survey of several programming languages, for the simple task of reading a text and printing the words that end with ing. We begin with the Python version, which we believe is readily interpretable, even by non Python programmers: import sys for line in sys.stdin: for word in line.split(): if word.endswith('ing'): print word [...] The C programming language is a highly-efficient low-level language that is popular for operating system and networking software: #include #include int main(int argc, char **argv) { int i = 0; int c = 1; char buffer[1024]; while (c != EOF) { c = fgetc(stdin); if ( (c >= '0' && c = 'a' && c = 'A' && c 2 && (strncmp(buffer+i-3, "ing", 3) == 0 || strncmp(buffer+i-3, "ING", 3) == 0 ) ) { buffer[i] = 0; puts(buffer); } i = 0; } } return 0; } Edit: I didn't include comparable code in C++/Boost, so I add a code sample that does something similar, although not identical from the Boost documentation . Note that this isn't the cleanest version. // char_sep_example_1.cpp #include #include #include int main() { std::string str = ";;Hello|world||-foo--bar;yow;baz|"; typedef boost::tokenizer > tokenizer; boost::char_separator sep("-;|"); tokenizer tokens(str, sep); for (tokenizer::iterator tok_iter = tokens.begin(); tok_iter != tokens.end(); ++tok_iter) std::cout "; std::cout
