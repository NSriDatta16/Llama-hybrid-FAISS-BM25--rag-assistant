[site]: stackoverflow
[post_id]: 3618086
[parent_id]: 3618066
[tags]: 
Try not to include "Agent.h" in Timing.h but include a forward reference instead: #ifndef _Timing_h #define _Timing_h class Agent; class Timing{ private: typedef struct Message{ Agent* _agent; //I get here a compilation problem double _id; }Message; typedef struct MessageArr{ }MessageArr; public: Timing(); ~Timing(); }; #endif You can include Agent.h in the timing.cpp file. This way you remove the circular reference and you reduce the coupling between the classes. Since you don't use the class Timing in your class Agent , you can remove this include as well (but this might be a copy mistake from your shortened example). Basically - whenever you need either the size of an object or some of it's functionality, you must include its header file. If you don't need it (e.g. if you use only pointers to this object or references), you should not. This reduces compile time (especially for large projects) For the 1 instance problem - check your favorite design patterns book (e.g. the GoF ). The singleton pattern might be what you need.
