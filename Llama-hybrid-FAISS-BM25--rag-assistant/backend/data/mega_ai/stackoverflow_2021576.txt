[site]: stackoverflow
[post_id]: 2021576
[parent_id]: 2019825
[tags]: 
Edit after clarification: It appears you don't want to use RegionManager at all, which is fine. What I would suggest then is this: Create an interface for your Modules to use to register view creation methods: public interface IViewRegistry { void RegisterMainView(Func ViewCreationDelegate); } Your modules will use this like this: public MyModule : IModule { IViewRegistry _registry; public MyModule(IViewRegistry registry) { _registry = registry; } public void Initialize() { _registry.RegisterMainView(() => { var vm = new MyViewModel(); var view = new MyView(); var view.DataContext = vm; return view; }); } } Then in your shell, you first implement the view registry (this is a simplification... you'd probably want something more robust) public ViewRegistry : IViewRegistry { public static List > ViewFactories { get { return _viewFactories; } } static List > _viewFactories = new List >(); public void RegisterMainView(Func viewFactory) { _viewFactories.Add(viewFactory); } } And lastly, here's how your shell would show that stuff. Here's its ViewModel first: public ShellViewModel : ViewModel { public ObservableCollection MainViews { ... } public ShellViewModel() { MainViews = new ObservableCollection (ViewRegistry.Select(factory => factory())); } } And here's your View (look ma, no RegionManager!): The region manager sort of attempts to give you everything I've written here, plus a lot of extensibility points, but if you don't like RegionManager or you find it doesn't fit your needs for some reason, this is how you would do this in Silverlight without it. Further Edits: After some more commentary from the OP, I think I understand that the OP just wants to show a view within another view without having to use RegionManager. It appears the OP is using RegionManager to show every view on the screen, which is probably overkill. The scenario I was given included an Address View and associated ViewModel being used from a different parent control. This is what I do (whether right or wrong): Blah blah blah some other stuff... blah blah And here's the parent view's viewModel: public ParentViewModel : ViewModel { public AddressViewModel AddressVM { ... } public ParentViewModel() { AddressVM = new AddressViewModel(); } } That's it. This prevents you from having to work too hard to show these views. RegionManager is really appropriate for decoupling the parent container view from the subview, but if both of these live in the same place (same module / assembly) there is no reason to use RegionManager to show these views.
