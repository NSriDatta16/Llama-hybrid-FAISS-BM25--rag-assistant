[site]: stackoverflow
[post_id]: 4771818
[parent_id]: 
[tags]: 
Is this a good/preferable pattern to Azure Queue construction for a T4 template?

I'm building a T4 template that will help people construct Azure queues in a consistent and simple manner. I'd like to make this self-documenting, and somewhat consistent. First I made the queue name at the top of the file, the queue names have to be in lowercase so I added ToLower() The public constructor uses the built-in StorageClient API's to access the connection strings. I've seen many different approaches to this, and would like to get something that works in almost all situations. (ideas? do share) I dislike the unneeded HTTP requests to check if the queues have been created so I made is a static bool . I didn't implement a Lock(monitorObject) since I don't think one is needed. Instead of using a string and parsing it with commas (like most MSDN documentation) I'm serializing the object when passing it into the queue. For further optimization I'm using a JSON serializer extension method to get the most out of the 8k limit. Not sure if an encoding will help optimize this any more Added retry logic to handle certain scenarios that occur with the queue (see html link) Q: Is "DataContext" appropriate name for this class? Q: Is it a poor practice to name the Queue Action Name in the manner I have done? What additional changes do you think I should make? public class AgentQueueDataContext { // Queue names must always be in lowercase // Is named like a const, but isn't one because .ToLower won't compile... static string AGENT_QUEUE_ACTION_NAME = "AgentQueueActions".ToLower(); static bool QueuesWereCreated { get; set; } DataModel.SecretDataSource secDataSource = null; CloudStorageAccount cloudStorageAccount = null; CloudQueueClient cloudQueueClient = null; CloudQueue queueAgentQueueActions = null; static AgentQueueDataContext() { QueuesWereCreated = false; } public AgentQueueDataContext() : this(false) { } public AgentQueueDataContext(bool CreateQueues) { // This pattern of setting up queues is from: // ttp://convective.wordpress.com/2009/11/15/queues-azure-storage-client-v1-0/ // this.cloudStorageAccount = CloudStorageAccount.FromConfigurationSetting("DataConnectionString"); this.cloudQueueClient = cloudStorageAccount.CreateCloudQueueClient(); this.secDataSource = new DataModel.SecretDataSource(); queueAgentQueueActions = cloudQueueClient.GetQueueReference(AGENT_QUEUE_ACTION_NAME); if (QueuesWereCreated == false || CreateQueues) { queueAgentQueueActions.CreateIfNotExist(); QueuesWereCreated = true; } } // This is the method that will be spawned using ThreadStart public void CheckQueue() { while (true) { try { CloudQueueMessage msg = queueAgentQueueActions.GetMessage(); bool DoRetryDelayLogic = false; if (msg != null) { // Deserialize using JSON (allows more data to be stored) AgentQueueEntry actionableMessage = msg.AsString.FromJSONString (); switch (actionableMessage.ActionType) { case AgentQueueActionEnum.EnrollNew: { // Add to break; } case AgentQueueActionEnum.LinkToSite: { // Link within Agent itself // Link within Site break; } case AgentQueueActionEnum.DisableKey: { // Disable key in site // Disable key in AgentTable (update modification time) break; } default: { break; } } // // Only delete the message if the requested agent has been missing for // at least 10 minutes // if (DoRetryDelayLogic) { if (msg.InsertionTime != null) if (msg.InsertionTime
