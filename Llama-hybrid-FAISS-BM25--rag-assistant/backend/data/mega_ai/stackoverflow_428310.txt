[site]: stackoverflow
[post_id]: 428310
[parent_id]: 428183
[tags]: 
As far as I can see this is an example of cascade steps where second and third one will be executed if first and first and second are valid, i.e. return hasFailed==false. This code can be made much more elegant using Template Method and Decorator design pattern. You need one interface, concrete implementation, abstract class and several subclasses of the abstract class. public interface Validator { public boolean isValid(); } public class GetNewOrders implements Validator { public boolean isValid() { // same code as your GetNewOrders method } } public abstract class AbstractValidator implements Validator { private final Validator validator; public AbstractValidator(Validator validator) { this.validator = validator; } protected boolean predicate(); protected boolean isInvalid(); public final boolean isValid() { if (!this.validator.isValid() && predicate() && isInvalid()) return false; return true; } } public class CheckInventory extends AbstractValidator { public CheckInventory(Validator validator) { super(validator); } @Override public boolean predicate() { return true; } @Override public boolean isInvalid() { // same code as your CheckInventory method } } public class PreOrder extends AbstractValidator { public CheckInventory(Validator validator) { super(validator); } @Override public boolean predicate() { return true; } @Override public boolean isInvalid() { // same code as your PreOrder method } } Now your method can look much more elegant: public void MyMethod() { bool success = false; try { Validator validator = new GetNewOrders(); validator = new CheckInventory(validator); validator = new PreOrder(validator); success = validator.isValid(); } finally { if (!success) { // do something } } } Validator object can be created in one line, but I prefer this style since it makes obvious the order of validation. Creating new validation link in the chain is matter of subclassing AbstractValidator class and implementation of predicate and isInvalid methods.
