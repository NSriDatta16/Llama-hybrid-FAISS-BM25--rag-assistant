[site]: stackoverflow
[post_id]: 1640905
[parent_id]: 
[tags]: 
Add-Type error Meta File could not be found

I've create a basic C# class that implements Microsoft.Data.Schema.ScriptDom and Microsoft.Data.Schema.ScriptDom.Sql interface. These two assemblies are part of Visual Studio Database Edition (VSDB) and are the parsing/scripting API's. You can parse SQL text and output a format SQL script. For more information about VSDB assemblies, see this blog post . Since they are redistributable, I've included both assemblies and the PowerShell script here : #requires -version 2 add-type -path .\Microsoft.Data.Schema.ScriptDom.dll add-type -path .\Microsoft.Data.Schema.ScriptDom.Sql.dll $Source = @" using System; using System.Collections.Generic; using System.Linq; using System.Text; using Microsoft.Data.Schema.ScriptDom; using Microsoft.Data.Schema.ScriptDom.Sql; using System.IO; public class SQLParser { private IScriptFragment fragment; public SQLParser(SqlVersion sqlVersion, bool quotedIdentifier, string inputScript) { switch (sqlVersion) { case SqlVersion.Sql80: SQLParser80 (quotedIdentifier, inputScript); break; case SqlVersion.Sql90: SQLParser90 (quotedIdentifier, inputScript); break; case SqlVersion.Sql100: SQLParser100 (quotedIdentifier, inputScript); break; } } private void SQLParser100 (bool quotedIdentifier, string inputScript) { TSql100Parser parser = new TSql100Parser(quotedIdentifier); Parse(parser, inputScript); } private void SQLParser90 (bool quotedIdentifier, string inputScript) { TSql90Parser parser90 = new TSql90Parser(quotedIdentifier); Parse(parser90, inputScript); } private void SQLParser80 (bool quotedIdentifier, string inputScript) { TSql80Parser parser80 = new TSql80Parser(quotedIdentifier); Parse(parser80, inputScript); } private void Parse(TSql100Parser parser, string inputScript) { IList errors; using (StringReader sr = new StringReader(inputScript)) { fragment = parser.Parse(sr, out errors); } if (errors != null && errors.Count > 0) { StringBuilder sb = new StringBuilder(); foreach (var error in errors) { sb.AppendLine(error.Message); sb.AppendLine("offset " + error.Offset.ToString()); } throw new ArgumentException("InvalidSQLScript", sb.ToString()); } } private void Parse(TSql90Parser parser, string inputScript) { IList errors; using (StringReader sr = new StringReader(inputScript)) { fragment = parser.Parse(sr, out errors); } if (errors != null && errors.Count > 0) { StringBuilder sb = new StringBuilder(); foreach (var error in errors) { sb.AppendLine(error.Message); sb.AppendLine("offset " + error.Offset.ToString()); } throw new ArgumentException("InvalidSQLScript", sb.ToString()); } } private void Parse(TSql80Parser parser, string inputScript) { IList errors; using (StringReader sr = new StringReader(inputScript)) { fragment = parser.Parse(sr, out errors); } if (errors != null && errors.Count > 0) { StringBuilder sb = new StringBuilder(); foreach (var error in errors) { sb.AppendLine(error.Message); sb.AppendLine("offset " + error.Offset.ToString()); } throw new ArgumentException("InvalidSQLScript", sb.ToString()); } } public IScriptFragment Fragment { get { return fragment; } } } "@ $refs = @("Microsoft.Data.Schema.ScriptDom","Microsoft.Data.Schema.ScriptDom.Sql") add-type -ReferencedAssemblies $refs -TypeDefinition $Source -Language CSharpVersion3 -passThru I'm using PowerShell V2 add-type to create a runtime type. I've tested the script on 3 different machines. On one machine the script works as expected on the other two machines the following error is produced. Both referenced assemblies are placed in the same folder as the PowerShell script. Any ideas on what I'm doing wrong? PS C:\Users\u00\bin> .\SQLParser.ps1 Add-Type : (0) : Metadata file 'Microsoft.Data.Schema.ScriptDom.dll' could not be found (1) : using System; At C:\Users\u00\bin\SQLParser.ps1:125 char:9 + add-type
