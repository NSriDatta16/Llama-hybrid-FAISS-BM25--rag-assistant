[site]: stackoverflow
[post_id]: 1713773
[parent_id]: 1713697
[tags]: 
Like most programming languages looping is inherently parallelizable as long as you follow a couple rules, this is known as Data Parallelism No mutation of shared state in the loop One iteration of the loop cannot depend on the outcome of another iteration Any looping constructs could be parallelized in XSLT fairly easily. With similar rules against mutation and dependencies you really could parallelize most of an XSLT transformation in a kind of a task based parallelism. First, fragment the document whole into tasks, segmented at XSLT command and text node boundaries; each task should be assigned a sequential index according to it's position in the document (top to bottom). Next, scatter the tasks to distinct XSLT processing functions each running on different threads; these processors will all need to be initialized with the same global state (variables, constants, etc...). Finally, once all the transformations are complete, the controlling thread should gather the results (transformed strings) in index order and assemble them into the finished document.
