[site]: datascience
[post_id]: 87613
[parent_id]: 87582
[tags]: 
If you want to focus on the outliers wrt the class, you can do as follows: Using Isolation Forest import pandas as pd import numpy as np from sklearn.datasets import load_iris from sklearn.preprocessing import StandardScaler, FunctionTransformer from sklearn.model_selection import train_test_split from sklearn.ensemble import IsolationForest from sklearn.decomposition import PCA from sklearn.pipeline import Pipeline import plotly.express as px X, y = load_iris(return_X_y= True) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .2, random_state = 42) out_model = Pipeline([("model", IsolationForest(random_state= 42))]).fit(X_train) visualizer = Pipeline([("scaler",StandardScaler()), ("decomposer",PCA(n_components= 3)), ("framer", FunctionTransformer(lambda x: pd.DataFrame(x, columns = ["p1","p2","p3"])))]).fit(X_train) outliers = out_model.predict(X_train) X3D = visualizer.transform(X_train) px.scatter_3d(data_frame=X3D, x = "p1", y = "p2", z = "p3", color = y_train, symbol=outliers ) pd.crosstab(index = y_train, columns= outliers, margins= True, normalize= 0 ) Output: We can see that ~ 35% of observations that belong to class 2 are marked as outliers This is a good starting point to analyze the reasons behind this. Hope it helps
