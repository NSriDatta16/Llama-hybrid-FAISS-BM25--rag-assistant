[site]: crossvalidated
[post_id]: 503518
[parent_id]: 503469
[tags]: 
Consider a $k$ -sided die and suppose we observe the counts $\mathbf{n} \equiv (n_1,...,n_k)$ with $n = \sum n_i$ total rolls. Suppose that the sequence of die-rolls is exchangeable, so that the counts of the outcome come from a multinomial distribution with probability vector $\mathbf{p} \equiv (p_1,...,p_k)$ . Under these conditions we have $\mathbf{n}/n \rightarrow \mathbf{p}$ (from the law of large numbers ) and so the way we determine the probabilities is to roll the die a large number of times and take the sample proportions as estimates of the probabilities. If you would like to do this with some formal statistical modelling, this inference problem is handled quite well by using Bayesian analysis with a Dirichlet prior for the true probabilities for your die, which leads to the Multinomial-Dirichlet model. Since there is no prior information suggesting bias in the die, we can stipulate a prior that is exchangeable with $n_0 > 0$ "pseudo data-points" in the prior. The model is: $$\begin{align} \mathbf{n}|\mathbf{p} &\sim \text{Multinomial}(n, \mathbf{p}), \\[12pt] \mathbf{p} &\sim \text{Dirichlet} \Big( \frac{n_0}{k} \cdot \mathbf{1} \Big). \\[6pt] \end{align}$$ Given an observed vector of counts $\mathbf{n}$ we then have the posterior distribution: $$\mathbf{p}|\mathbf{n} \sim \text{Dirichlet} \Big( \frac{n_0}{k} \cdot \mathbf{1} + \mathbf{n} \Big).$$ For a reasonable choice of the prior strength $n_0$ , and a substantial sample size, this posterior ought to give you a reasonable inference for the probability vector $\mathbf{p}$ . The Dirichlet distribution is programming in R in various packages (see e.g., here ), so it is simple to obtain the density values for any input and generate the posterior density as a function. Example: Suppose we have a six-sided die with true underlying probabilities: $$\mathbf{p} = (0.12, \ 0.11, \ 0.13, \ 0.12, \ 0.15, \ 0.37).$$ Here we will conduct a simulation where we roll this die $n=400$ times and derive the resulting posterior distribution, which we program as the function posterior . (Here we use a prior with $n_0 = 10$ pseudo-data points.) #Generate simulated data set.seed(1) n
