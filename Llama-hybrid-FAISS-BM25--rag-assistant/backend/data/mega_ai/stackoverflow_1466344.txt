[site]: stackoverflow
[post_id]: 1466344
[parent_id]: 1466282
[tags]: 
Consider this def make_b( a, seed ): yield seed for a,b in zip( a[:-1], a[1:] ): seed= someFunction( seed, a, b ) yield seed Which lets you do this a = xrange(10) b= list(make_b(a,something)) Note that you can often use this: b = make_b(a) Instead of actually creating b as a list. b as a generator function saves you considerable storage (and some time) because you may not really need a list object in the first place. Often, you only need something iterable. Similarly for a . It does not have to be a list , merely something iterable -- like a generator function with a yield statement.
