[site]: crossvalidated
[post_id]: 256612
[parent_id]: 256494
[tags]: 
Some general answers: Using the Poisson distribution to estimate the mean parameter requires relatively weak assumption, essentially only that our model for the mean (expected value) of the response variable y given the explanatory variables x is correctly specified. With the default log-link this is $$E(y | x) = exp(x b)$$ We can use this to predict the mean for a new observation given a new set of explanatory variables. We can also get standard errors and confidence intervals for the prediction of the mean. However, when we want the entire predictive distribution we need the assumption that we have a correctly specified distribution for the response. statsmodels does not have much of built-in support for goodness of fit tests for distributions outside the normal distribution case, especially not for discrete distribution like Bernoulli, Binomial or Poisson. However, it is easy to get the predictive distribution using the scipy.stats distributions. For example a sequence to get the results for Poisson could be from scipy import stats import statsmodels.api as sm results = sm.Poisson(y, x).fit() mean_predicted = results.predict() # or use a new x prob_2more = stats.poisson.sf(2 - 1, mean_predicted).mean() # average over x in sample freq_2more = (y > 2 - 1).mean() # sample average or similar probability and frequency for observing y=2 given the x or predicted mean for each observation: prob_2_obs = stats.poisson.pmf(2, mean_predicted) Note: 2 - 1 in sf is used because of the weak inequality in sf(k)=Prob(y > k) The pmf could be used to create an analog of a classification table comparing predicted versus empirical counts. related code: The first is essentially doing what I explained for sm.Poisson https://github.com/statsmodels/statsmodels/blob/master/statsmodels/discrete/discrete_model.py#L2691 and not yet available Vuong test for comparing model (not yet in statsmodels) https://gist.github.com/jseabold/6617976#file-zip_model-py-L5 Caveat: The above predictions ignore parameter uncertainty, i.e. they don't take into account that our parameters for the mean of the Poisson distribution are estimated. We can use simulation to get the distribution of the predicted Poisson probabilities, but I didn't manage to come up with an API for it, it has to be simulated for each x in the prediction and produces a large collection of numbers, i.e. a distribution over distributions for each explanatory set x. technical aside: statsmodels has 3 versions for Poisson that all produce the same results but have different extras, sm.Poisson (from discrete_model), GLM with family Poisson and GEE with family Poisson and independence or singleton clusters as in your case. I used Poisson above because it is easier to type, i.e. no family or extras to include.
