[site]: stackoverflow
[post_id]: 1649010
[parent_id]: 1646372
[tags]: 
Try to explain references with figures , as pure text sometimes don't get through to most people. Many resources and books on the topic, do try to explain through figures as it is difficult to relate allocation through verbal communication alone (this is mostly an issue of attention span for most people). At least try to point out how objects relate to each other, a simple example would be a simple reference. Given: class A { B b = new B(); } class B { int mine = 1; } When instantiating class A as object a from some context the following figure will illustrate how it will all look in the heap. The point of the illustration is to show how the different objects relate to each other and have a mental model for how the heap works. +-A-----+ a: *---->| | | | +-B--------+ | b: *--+-->| | | | | mine: 1 | +-------+ | | +----------+ Also try to explain the difference between heap and stack allocation. Calling a method with parameters. Simple example would be something like this: Given the following method: public void doSomething(B b) { int doMine = b.mine + 1; } When calling doSomething and letting it do it's stuff, at the end doSomething 's stack will look something like below. The point showing that objects do not directly reside inside a stack, but it is just referred to an object in the heap and objects are shared through references. whoever called doSomething * | v +-doSomething-+ +-B--------+ | b: *--------+-->| | |-------------| | mine: 1 | | doMine: 2 | +----------+ +-------------+ Another illustrative example would be illustrating an array which is an object, and a multidimensional array contains an array of arrays.
