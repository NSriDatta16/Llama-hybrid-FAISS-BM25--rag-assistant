[site]: stackoverflow
[post_id]: 1663044
[parent_id]: 1653046
[tags]: 
Since I wrote the MSDN article you are referring to, I guess I have to answer this one. First, I anticipated this question and that's why I wrote a blog post that shows a more or less real use case for ExpandoObject: Dynamic in C# 4.0: Introducing the ExpandoObject . Shortly, ExpandoObject can help you create complex hierarchical objects. For example, imagine that you have a dictionary within a dictionary: Dictionary dict = new Dictionary (); Dictionary address = new Dictionary (); dict["Address"] = address; address["State"] = "WA"; Console.WriteLine(((Dictionary )dict["Address"])["State"]); The deeper the hierarchy, the uglier the code. With ExpandoObject, it stays elegant and readable. dynamic expando = new ExpandoObject(); expando.Address = new ExpandoObject(); expando.Address.State = "WA"; Console.WriteLine(expando.Address.State); Second, as was already pointed out, ExpandoObject implements INotifyPropertyChanged interface which gives you more control over properties than a dictionary. Finally, you can add events to ExpandoObject like here: class Program { static void Main(string[] args) { dynamic d = new ExpandoObject(); // Initialize the event to null (meaning no handlers) d.MyEvent = null; // Add some handlers d.MyEvent += new EventHandler(OnMyEvent); d.MyEvent += new EventHandler(OnMyEvent2); // Fire the event EventHandler e = d.MyEvent; e?.Invoke(d, new EventArgs()); } static void OnMyEvent(object sender, EventArgs e) { Console.WriteLine("OnMyEvent fired by: {0}", sender); } static void OnMyEvent2(object sender, EventArgs e) { Console.WriteLine("OnMyEvent2 fired by: {0}", sender); } } Also, keep in mind that nothing is preventing you from accepting event arguments in a dynamic way. In other words, instead of using EventHandler , you can use EventHandler which would cause the second argument of the handler to be dynamic .
