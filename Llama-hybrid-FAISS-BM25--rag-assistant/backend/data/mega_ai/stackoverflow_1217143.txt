[site]: stackoverflow
[post_id]: 1217143
[parent_id]: 
[tags]: 
Multiple language components/classes [OOP/Patterns/IoC/DI]

I have several components for which there exists different versions, depending on the language used by the system (configurable, and can be changed at runtime). For example, I have an interface ("component") for Tokenizer , and two concrete implementations for english and chinese, like so: public interface Tokenizer { List tokenize(String s); } public class EnglishTokenizer implements Tokenizer { List tokenize(String s) { ... }; } public interface ChineseTokenizer implements Tokenizer { List tokenize(String s) { ... }; } Now, in many classes of my code, I need to get a language specific implementation of some of those components ( Tokenizer , Parser , and many others), and I was wondering what's the most elegant way to achieve this? I thought of using one of the following approaches: Each component (such as Tokenizer ), would have a factory (singleton) that, given a language enum , would return the appropriate language specific implementation, like so (this would require many factories): public enum TokenizerFactory { SINGLETON; private Map cache; public getTokenizer(Language) { return cache.get(Language); } } Have a (quite large) Language class, that would be instantiated with a specific language enum , and would have many different methods to get the language specific components. Then, at runtime, I could easily switch between languages (which is one of my goals). Like so: public class Language { public Language(LanguageEnum) {/* load language specific components*/}; public Tokenizer getTokenizer() {/* language specific tokenizer */}; public Parser getParser() {/* language specific parser */}; } What is the most appropriate way to achieve what I'm trying to do? How can I improve my code?
