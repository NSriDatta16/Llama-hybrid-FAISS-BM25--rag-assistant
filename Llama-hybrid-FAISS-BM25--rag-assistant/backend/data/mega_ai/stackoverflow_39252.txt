[site]: stackoverflow
[post_id]: 39252
[parent_id]: 27607
[tags]: 
In the upcoming version of the C++ standard , I could not find any explicit restriction with respect to the fact that a predicate should always return the same value for the same input. I looked into section 25 (paragraphs 7 to 10). Methods returning values that may change from one call to another, as in your case, should be volatile (from 7.1.6.1/11: "volatile is a hint to the implementation to avoid aggressive optimization involving the object because the value of the object might be changed by means undetectable by an implementation"). Predicates "shall not apply any non-constant function through the dereferenced iterators" (paragraphs 7 and 8). I take this to mean that they are not required to use non-volatile methods, and that your use-case is thus ok with respect to the standard. If the wording was "predicates should apply const functions..." or something like that, then I would have concluded that 'const volatile' functions were not ok. But this is not the case.
