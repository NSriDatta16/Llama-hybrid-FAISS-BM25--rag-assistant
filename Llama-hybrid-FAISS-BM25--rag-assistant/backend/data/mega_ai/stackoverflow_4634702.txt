[site]: stackoverflow
[post_id]: 4634702
[parent_id]: 
[tags]: 
IoC in the "real world" - how to handle many classes?

I now have a good understanding of DI and IoC containers, but I'm unsure how to handle the real-world aspects of having dozens of classes in multiple "modules" (DLLs, whatever). Nearly all of the examples I've seen of IoC make use of maybe a handful of classes and manually set up the container in the Main method (or Global.asax if a web app) which is crazy for large-scale apps as you would have hundreds of lines just using the For ().Use () syntax to set everything up. I've done a bit of research and this seems to be the purpose of the Registry (StructureMap) and Kernel (Ninject) classes (those are the two IoC containers I'm familiar with so they're mentioned here - I'm sure other IoC containers have similar things). Now, my question is are you intended to create a different Registry (I've been playing with StructureMap so I'll stick with that nomenclature) that corresponds to each grouping in your app (e.g. Repositories, Entities, Services) in let's say an "Infrastructure" class library, and then wire up those classes in the main application entry point? I suppose you could go further and have one registry for each aggregate (to use the DDD term) and then wire all of those up in even broader registry classes that encompass an entire section of an application (e.g. The CRM part of a larger LOB app might have several aggregates by itself, so you'd have one registry wiring up each aggregate, and then a larger registry that combines all the aggregate registries.. I hope that made sense!) For a basic example: // MyApp.Infrastructure class ServiceRegistry : Registry { public ServiceRegistry() { For ().Use (); // other services... } } class RepositoryRegistry: Registry { public RepositoryRegistry() { For ().Use (); // other repositories... } } // other registry files e.g. for Entities // Global.asax or Program.cs or whatever entry point ObjectFactory.Initialize(x => { x.AddRegistry (); x.AddRegistry (); // other registries }); Is this the preferred way of handling real-world apps that may have dozens, if not hundreds, of classes logically organized?
