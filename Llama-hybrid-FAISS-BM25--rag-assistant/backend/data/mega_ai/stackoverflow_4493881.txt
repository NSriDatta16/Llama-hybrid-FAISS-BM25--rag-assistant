[site]: stackoverflow
[post_id]: 4493881
[parent_id]: 
[tags]: 
TabControl.SelectedIndex being changed, but SelectedIndexChanged even not firing

All, I have a TabControl in an application that started behaving strangely. Some background... This program was converted from VB6 to VB .NET 2008, and used to refer to forms using their class names. In other words, I might have a form class called frmFoo. In the code for the program you might see: frmFoo.Show() or frmFoo.UserDefinedProperty = True During some recent changes, I created variables to represent instances of my forms much like these: Public MyForm as frmFoo MyForm = New frmFoo MyForm.Show() In doing so, I also removed code from the form's Load event handler and put it in the form's constructor. When the form loads, or when a document is loaded and should influence the TabControl's selected index, something like the following will not necessarily fire the SelectedIndexChanged event. MyForm.tbsForm.SelectedIndex = ValueReadFromFile ...or... MyForm.tbsForm.Tabs(ValueReadFromFile).Select Sorry to be so wordy, but there's more. If I open the form and look at the TabControl to verify that it's been set properly, everything works like it's supposed to. The misbehaving TabControl is contained within another TabControl, so I have to click the parent TabControl to see it. If I can see it, and run a test, the test always works. If I can't see it, and run a test, the first test I run will not fire the event. ...paging Dr. Heisenberg... It's almost as if the control has to be initialized first by changing the value or making it visible onscreen...I'm totally lost on this one. It's the most unusual behavior I've ever seen. And everything worked perfectly before I began using variables to represent forms and placed the Load event code into the form constructors. Can anyone help, or at least put me out of my misery? SH -------------------------------------------------------------- Edit #2 I just performed a test after having attempted to eliminate some of the variability in the behavior. But I wanted to confirm the previously-stated behavior. I opened the program and read a file. This file contained a value that should have triggered the event handler. Without making the control visible, I can change the SelectedIndex property of the tab control without the event firing. I closed the program down again, and reopened it. This time, selected the parent tab that allowed the child tab (the one whose event I'm concerned with) to become visible. I then selected a different tab in the parent control, meaning that the child control was no longer visible. When I opened the same file as before, it fired the event. I'm tempted to implement a flag that confirms that the control has been repainted or whether the parent tab has been displayed. I may have to fire the event in code if the flag isn't set. I want to reiterate that everything worked when the program referred to the forms by their class names and much of the arrangement of controls on the forms was done in the load event. Now the program creates variables and the arrangement of the controls is done in the form's constructor. I'm sure this has something to do with the problem I'm having, but I can't understand how. Any wisdom to share?
