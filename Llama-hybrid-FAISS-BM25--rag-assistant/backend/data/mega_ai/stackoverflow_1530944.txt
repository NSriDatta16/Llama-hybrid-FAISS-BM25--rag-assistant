[site]: stackoverflow
[post_id]: 1530944
[parent_id]: 1530868
[tags]: 
Background: You asked for a "simple explanation" which suggests: You want a no-nonsense overview without jargon You want something that will help you learn from the beginning You have discovered that no two people ever answer the question the same way , and it's confusing. That's the reason you are here asking for a simple explanation. Yes? Short No-Jargon Answer: Many introductory explanations jump quickly into "OOP real world" examples. Those can tend to confuse more than help, so feel free to ignore that for now. You can think of source code simply as "chunks" of functionality, that just happen to be saved to individual files. There are different ways of organizing those "chunks"; depending on things like conventions of the programming language, the background and training of the developer(s), or just plain old personal preference. OOP and Procedural programming are simply two main, generally-recognized methodologies, for how to organize and arrange those "chunks" of code. Long No-Jargon Answer: Procedural vs OOP is just one aspect of a fundamental issue of computer programming: how to make your code easy to understand and a piece of cake to professionally maintain . You can actually write "Procedural" code that follows some of the principles of OOP, so the two are not necessarily opposites. Your understanding will really grow once you learn other object-oriented programming languages , among which, PHP is a "new kid on the block". Here is a quick overview of what you will learn as you build experience: You can write PHP source code that does useful tasks You can organize useful tasks into "chunks" of code You can think of "chunks" of code independently of the individual files where they are saved Sometimes those "chunks" of code will behave differently based on parameters you pass in Chunks of code that accept parameters are called "Functions" Functions can be "chunked" together, and there are different ways of doing this: For example: you could have just one big PHP file with all the functions you have ever written in your entire life, listed in alphabetical order by function name For example: you could have multiple PHP files with functions that are chunked together by subject matter [e.g., functions for doing basic string manipulation, functions for processing arrays, functions for file input/output, etc] OOP is a special way of "chunking" Functions together into a "Class" A Class is just another level of "chunking" code together so that you can treat it as a unified whole A Class can be thought of as a "chunking" of methods and properties methods are simply functions that are logically related to one another in some meaningful way. The words "method" and "function" are basically two different terms for the same thing. properties are simply data values that are related to the class. These are values that are intentionally non-isolated to any individual function, because more than one of the functions in the class should have access to them. For example : if your class has a bunch of methods for doing astronomy, properties of the class might be the values for certain famous numbers that all astronomy methods need to know about (like Pi, the speed of light, the distance between specific planets, etc.). This is where most OOP explanations get confusing because they branch off into " real world examples " which can quickly get off-topic . Often, "real world" is a euphemism for the ontological perspectives of a particular individual or group. That tends to be useful only once you already understand the concept well enough to teach it to someone else. To understand OOP without confusion, you can skip the "real world" examples for now, and just focus on the code. A Class is simply a way to store functions (aka methods) and properties (aka data) as PHP code in one or more related "chunks" where each individual "chunk" deals with a specific topic or piece of functionality. That's all you need to know in order to get started. A Class is useful because it allows you to organize your code at a very high level in a way that makes it easy for you to understand, use, and maintain. When someone has written a lot of functions, and organized them into a lot of Classes, and gotten those to work together in some cool way, they package the whole thing together and call it a "Framework" . A Framework is just the next-highest level of "chunking" (including coding style and conventions) that one or more people agree on because they like the way the code is organized and it suits their working style, preferences, values, plans for world domination, etc. See also OOP appeal
