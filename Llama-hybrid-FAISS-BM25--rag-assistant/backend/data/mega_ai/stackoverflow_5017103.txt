[site]: stackoverflow
[post_id]: 5017103
[parent_id]: 5017019
[tags]: 
The values in the table's primary key need to be unique. (Otherwise one couldn't "key" off of them, since a single key would identify multiple records.) Just to give you a little additional information, note that a primary key is a clustered index. This means that the table is physically sorted on the disk by this index. (Thus, there can be only one clustered index per table.) So be careful with primary keys like this. If you plan on inserting records with arbitrarily-arranged strings as a primary key, each insert will re-sort the table. As the table grows, this will impact performance. For this reason a primary key is usually simply an auto-incrementing integer field. (An integer is the native word size of the host and naturally easy to calculate and is about the "fastest" piece of data one can have.) You can add a unique constraint to non-key columns to maintain that restriction on the data. Thus, you could have a primary key that is used primarily for data storage purposes and doesn't actually have an intuitive human-readable meaning to the data being stored. And in another column store a unique identifier that would mean something about the business data, such as an identifying string. This has the added design benefit of separating "business logic" (the identifying label) from "persistence logic" (the database's primary key).
