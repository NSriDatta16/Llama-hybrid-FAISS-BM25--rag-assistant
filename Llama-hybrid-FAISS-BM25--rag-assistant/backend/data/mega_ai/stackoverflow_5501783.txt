[site]: stackoverflow
[post_id]: 5501783
[parent_id]: 
[tags]: 
C# Ensure that custom cast uses the sub type of a super type when iterating over list of super type

I have the following code. My intention that this custom object can be cast to type Int32 using the syntax i = (int) obj; where 'obj' is of type 'SubClass'. The operator for the cast is defined in each SubType of the abstract SuperType, and is also defined in the abstract SuperType. Since the operator in the abstract super type cannot be marked as virtual, a cast from the super type intentionally causes an exception to be thrown. If I try to cast within a foreach loop, where the loop iterates over a list of type 'SuperType' C# attempts to cast using the operator on the SuperType (and throws the programmed exception), where I want it to cast using the operator I was hoping that it would cast using the sub type. I'm probably going about this the hard way, but am interested now as to whether I can achieve this in what I felt was an elegant solution. Any advice appreciated! // Loop... foreach (PriceIndexAction objs in objList) { int i = (int) action; } // SuperClass.. public abstract class SuperClass { protected SuperClass( DateTime p1, int p2, int p3, int p4 ) { .... } public static implicit operator Int32(PriceIndexAction obj) { throw new InvalidCastException( "No cast to System.Int32 exists for the abstract class PriceIndexAction."); } } // SubClass.. public class SubClass : SuperClass { public SubClass(DateTime p1, int p2 ) : base( p1, p2, 1, 2 ) { .... } public static implicit operator Int32(SubClass obj) { return 2; } }`enter code here`
