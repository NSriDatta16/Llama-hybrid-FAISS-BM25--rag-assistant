[site]: stackoverflow
[post_id]: 813369
[parent_id]: 812717
[tags]: 
The Technical Report on C++ Performance is a great guide for this sort of thing. Note that it has a section on embedded programming concerns! Also, ++ on the mention of Embedded C++ in the answers. The standard is not 100% to my tastes, but it is a good bit of reference when deciding what parts of C++ you might drop. While programming for small platforms, we disable exceptions and RTTI, avoided virtual inheritance, and paid close attention to the number of virtual functions we have lying around. Your friend is the linker map, though: check it frequently, and you'll spot sources of code and static memory bloat quickly. After that, the standard dynamic memory usage considerations apply: in an environment as restricted as the one you mention, you may want to not use dynamic allocations at all. Sometimes you can get away with memory pools for small dynamic allocs, or "frame-based" allocation where you preallocate a block and throw out the whole thing later.
