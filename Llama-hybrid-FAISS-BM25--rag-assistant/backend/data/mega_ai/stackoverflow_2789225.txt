[site]: stackoverflow
[post_id]: 2789225
[parent_id]: 2788713
[tags]: 
New answer: You can investigate this problem using symbolic equations, which gives me the correct answers: >> clear all %# Clear all existing variables >> format long %# Display more digits of precision >> syms Jm d omegan G J %# Your symbolic variables >> a = ((Jm*(d*omegan)^2)/(G*J)-2).*eye(4)+... %# Create the matrix a diag([2 1 1],1)+... diag([1 1 2],-1); >> solns = solve(det(a),'omegan') %# Solve for where the determinant is 0 solns = 0 0 (G*J*Jm)^(1/2)/(Jm*d) -(G*J*Jm)^(1/2)/(Jm*d) -(2*(G*J*Jm)^(1/2))/(Jm*d) (2*(G*J*Jm)^(1/2))/(Jm*d) (3^(1/2)*(G*J*Jm)^(1/2))/(Jm*d) -(3^(1/2)*(G*J*Jm)^(1/2))/(Jm*d) >> solns = subs(solns,{G,J,Jm,d},{8e7,77,10540,140/3}) %# Substitute values solns = 0 0 16.381862247021893 -16.381862247021893 -32.763724494043785 32.763724494043785 28.374217734436371 -28.374217734436371 I think you either just weren't choosing values in your loop close enough to the solutions for omegan or your threshold for how close the determinant is to zero is too strict. When I plug in the given values to a , along with omegan = 16.3819 (which is the closest value to one solution your loop produces), I get this: >> det(subs(a,{omegan,G,J,Jm,d},{16.3819,8e7,77,10540,140/3})) ans = 2.765476845475786e-005 Which is still larger in absolute amplitude than 1e-10.
