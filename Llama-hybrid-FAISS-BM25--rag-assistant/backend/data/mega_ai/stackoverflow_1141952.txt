[site]: stackoverflow
[post_id]: 1141952
[parent_id]: 1141872
[tags]: 
I am going to make the assumption both of these are implemented as nibs, and are in a UITabBarController. I think you are confusing the concept of a class and an instance. A class is (roughly speaking) a description of some code and state. You can use that description to create an instance of that class (which is referred to as instantiation). Every instance of that class is unique and separate, if you modify one instance it does not effect the others. Okay, so why I am going into this? Well, FirstViewController and SecondViewController are classes, not instances. The nib files you have describe the configuration of a particular instance of those controllers, and when it is loaded it instantiates the the controller with those settings. What you are doing in UpdateSecondView is creating ANOTHER SecondViewController, setting a value in it, then immediately disposing of it. What you need to do is set the value in the instance of SecondViewController that is being built when the nib is loaded. Without actually seeing your nibs and exactly how things are laid out I can't give you an an exact explanation of what you need to do, but the basic gist is you want to make an instance variable in FirstViewController and hook that up to the appropriate instance of SecondViewController, than use that to modify that instance of SecondViewController like this: //Updated @interface @interface FirstViewController : UIViewController { IBOutlet UIButton *btnView; IBOutlet SecondViewController *secondViewController; } @property (nonatomic, retain) SecondViewController *secondViewController; @end //Updated @implementation -(IBAction)UpdateSecondView:(id)sender { [self.secondViewController UpdateText:@"Testing"]; } Now if you just run the with the above changes it won't work (because secondViewController will not be set), so like I said before you will need to have some piece of your code that has knowledge of both instances hook it up. You can potentially do that in the nib for the UITabBarController that is housing the both by dragging a link to the new IBOulet there, or you could do it programmatically somewhere else.
