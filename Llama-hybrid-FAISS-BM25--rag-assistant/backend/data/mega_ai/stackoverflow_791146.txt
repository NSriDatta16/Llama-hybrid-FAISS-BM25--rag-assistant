[site]: stackoverflow
[post_id]: 791146
[parent_id]: 791131
[tags]: 
Your implementation is problematic because you're replacing the entire prototype object, losing the properties of the inherited function prototype and it would also break, or at least make it more difficult, the ability to make use of inheritance later on if you wrote other classes the same way. A method more suited to Javascript would be: var MyClass = function (storeThis) { this.storage = storeThis } MyClass.prototype.getStorage = function (){ return this.storage; } MyClass.prototype.setStorage = function (newStorage){ this.storage = newStorage; } Use it: var myInstance = new MyClass("sup"); alert("myInstance storage: " + myInstance.getStorage()); myInstance.setStroage("something else"); As for the 'new' keyword and Crawford's problems with it, I can't really answer, because I haven't read the book, but I can see how you could create a new object by calling any function with the new keyword, including functions that are supposed to be methods of a class. And when someone says something, such as a design pattern, is more 'expressive', he or she generally means that the design pattern is clear and simple to understand as to what it is achieving and how.
