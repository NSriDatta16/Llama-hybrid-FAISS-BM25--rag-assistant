[site]: crossvalidated
[post_id]: 614174
[parent_id]: 
[tags]: 
Permutation test for comparing sets of correlations

I would like to compare two sets of n=100 Pearson correlation coefficients. In particular, I would like to test whether the means of these two sets of correlations differ significantly. After some research online, I found a lot of recommendations for comparing individual pairs of correlations coefficients but only one thread that seems to discuss the setting I'm interested in, i.e. comparing sets of correlation coefficients. In this thread, one suggestion is to run a t-test on the Fisher-Z-transformed correlation coefficients. However, another suggestion is to run a permutation test. The second suggestion has not gotten any attention, however, I find it interesting because it seems more flexible than a t-test. Therefore, I would like to use a permutation test. Now my question is: In the above-described setting is it necessary to perform the permutation test on the Fisher-Z-transformed correlations, or can I equivalently run it on the "raw" correlations? In Python code, what I would like to do is this: def get_permutation_statistics(x, y, n_permutations=50_000): rng = np.random.default_rng() statistics = np.zeros(n_permutations) total = np.hstack((x, y)) for i in tqdm(range(n_permutations)): shuffled = rng.permuted(total) x_p, y_p = np.split(shuffled, 2) assert x_p.shape == y_p.shape mean_diff = np.mean(x_p) - np.mean(y_p) statistics[i] = mean_diff.item() return statistics # observed difference init_mean_diff = np.mean(x) - np.mean(y) # permutation statistics statistics = get_permutation_statistics(x, y) # get p-value (two-tailed) p = np.sum(np.abs(statistics) > np.abs(init_mean_diff)) / n_permutations where x and y are two 1-dim. arrays containing the correlation coefficients, either "raw" or Fisher-Z-transformed.
