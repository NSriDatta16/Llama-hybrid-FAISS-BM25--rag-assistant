[site]: stackoverflow
[post_id]: 2695594
[parent_id]: 2677532
[tags]: 
You should read this question: Javascript as a functional language There are lots of useful links, including: Use functional programming techniques to write elegant JavaScript The Little JavaScripter Higher-Order JavaScript Eloquent JavaScript, Chapter 6: Functional Programming Now, for my opinion. A lot of people misunderstand JavaScript , possibly because its syntax looks like most other programming languages (where Lisp/Haskell/OCaml look completely different). JavaScript is not object-oriented, it is actually a prototype-based language . It doesn't have classes or classical inheritance so shouldn't really be compared to Java or C++. JavaScript can be better compared to a Lisp; it has closures and first-class functions. Using them you can create other functional programming techniques, such as partial application (currying). Let's take an example (using sys.puts from node.js): var external; function foo() { external = Math.random() * 1000; } foo(); sys.puts(external); To get rid of global side effects, we can wrap it in a closure: (function() { var external; function foo() { external = Math.random() * 1000; } foo(); sys.puts(external); })(); Notice that we can't actually do anything with external or foo outside of the scope. They're completely wrapped up in their own closure, untouchable. Now, to get rid of the external side-effect: (function() { function foo() { return Math.random() * 1000; } sys.puts(foo()); })(); In the end, the example is not purely-functional because it can't be. Using a random number reads from the global state (to get a seed) and printing to the console is a side-effect. I also want to point out that mixing functional programming with objects is perfectly fine. Take this for example: var Square = function(x, y, w, h) { this.x = x; this.y = y; this.w = w; this.h = h; }; function getArea(square) { return square.w * square.h; } function sum(values) { var total = 0; values.forEach(function(value) { total += value; }); return total; } sys.puts(sum([new Square(0, 0, 10, 10), new Square(5, 2, 30, 50), new Square(100, 40, 20, 19)].map(function(square) { return getArea(square); }))); As you can see, using objects in a functional language can be just fine. Some Lisps even have things called property lists which can be thought of as objects. The real trick to using objects in a functional style is to make sure that you don't rely on their side effects but instead treat them as immutable. An easy way is whenever you want to change a property, just create a new object with the new details and pass that one along, instead (this is the approach often used in Clojure and Haskell). I strongly believe that functional aspects can be very useful in JavaScript but ultimately, you should use whatever makes the code more readable and what works for you.
