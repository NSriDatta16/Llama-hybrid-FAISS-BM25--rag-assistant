[site]: stackoverflow
[post_id]: 3935685
[parent_id]: 3935620
[tags]: 
Looping is time-consuming, but there's no way to do what you want other than going over the target string repeatedly. What you can do is optimize by checking the smallest strings first, and work your way up. For example, if the target string doesn't contain abc , it can't possibly contain abcdef . Other optimizations off the top of my head: Don't continue to check for a match after a non-matching character is hit, though in Java you can let the computer worry about this. Don't check to see if something is a match if there aren't enough characters left in the target string for a match to be possible. If you need speed and have lots of space, you might be able to break the target string up into a fancy data structure like a trie for better results, though I don't have an exact algorithm in mind. Another storage-is-not-a-problem solution: decompose the target into every possible substring and store the results in a HashSet .
