[site]: datascience
[post_id]: 81404
[parent_id]: 
[tags]: 
Binary classification of 2d vectors with neural networks

I'm trying to make a neural network learn a 2D shape. I have an $n\times m$ grid of points with a binary function defined on it, equal to $1$ when the point is in the shape and $0$ when it isn't. I want my network to accept as input two numbers, $x$ and $y$ , and tell me with a single binary output if the point $(x, y)$ is in the shape or not. Ultimately I'd like to have a largeish image and a somewhat complicated shape (say an disc with a hole in it) and train the network on a random collection of points, but for now I'm working with a small image, an axis-aligned rectangle, and I'm training the network on every pixel in the image. My problem is that my network doesn't work at all. I got the Keras tutorial working and it reaches accuracy of over 90% within ten epochs, however with my code the training looks like this: Epoch 1/10 17/17 [==============================] - 0s 932us/step - loss: 14.4782 - accuracy: 0.0506 Epoch 2/10 17/17 [==============================] - 0s 757us/step - loss: 14.4782 - accuracy: 0.0506 Epoch 3/10 17/17 [==============================] - 0s 722us/step - loss: 14.4782 - accuracy: 0.0506 Epoch 4/10 17/17 [==============================] - 0s 696us/step - loss: 14.4782 - accuracy: 0.0506 Epoch 5/10 17/17 [==============================] - 0s 653us/step - loss: 14.4782 - accuracy: 0.0506 Epoch 6/10 17/17 [==============================] - 0s 655us/step - loss: 14.4782 - accuracy: 0.0506 Epoch 7/10 17/17 [==============================] - 0s 656us/step - loss: 14.4782 - accuracy: 0.0506 Epoch 8/10 17/17 [==============================] - 0s 677us/step - loss: 14.4782 - accuracy: 0.0506 Epoch 9/10 17/17 [==============================] - 0s 751us/step - loss: 14.4782 - accuracy: 0.0506 Epoch 10/10 17/17 [==============================] - 0s 777us/step - loss: 14.4782 - accuracy: 0.0506 50/50 - 0s - loss: 14.4773 - accuracy: 0.0506 Not only does it not converge, the accuracy doesn't move at all. I tried 100 epochs and had the same results. My code: import tensorflow as tf from tensorflow import keras from tensorflow.keras.layers import Flatten, Dense import numpy as np import matplotlib.pyplot as pyplot def get_coordinate_map(width, height): ones = np.ones((height, width)) offset = np.array([(width / 2) * ones, (height / 2) * ones]) coordinates = np.indices((height, width)) - offset return coordinates.reshape(2, width * height).T def get_rectangle(width, height, rectangle_width, rectangle_height): ones = np.ones((height, width)) offset = np.array([(width / 2) * ones, (height / 2) * ones]) coordinates = np.indices((height, width)) - offset flat_coordinates = coordinates.reshape(2, width * height) rectangle = [] x1, x2 = -rectangle_width / 2, rectangle_width / 2 y1, y2 = -rectangle_height / 2, rectangle_height / 2 for x, y in flat_coordinates.T: if x1 And since my get_***() functions are probably difficult to read, here's picture of the image generated by get_rectangle() : I'm doing this for the purposes of learning about neural networks, so I'm not interested in solutions involving using a different kind of ML technique altogether. My question is why I'm getting such strikingly unhelpful behavior and if this kind of binary classification of low dimensional data is even possible with a neural net.
