[site]: stackoverflow
[post_id]: 5658980
[parent_id]: 
[tags]: 
Determining System.Net.Mail.SmtpClient.Send result

I am trying to summarize the outcomes from System.Net.Mail.SmtpClient.Send using an enum. This is so I know whether I should retry sending the email and hopefully prevent duplicate emails being sent. public enum MailSendStatus { None, Sent, ErrorCannotSend, TryAgain, SentMaybe } I have caught all the exceptions from Send and split out the SmtpException.StatusCode s from http://msdn.microsoft.com/en-us/library/system.net.mail.smtpstatuscode(v=vs.80).aspx . Does the breakdown look right? Or is there a better way to do this? try { smtp.Send(msg); } catch (ArgumentNullException e) { return MailSendStatus.ErrorCannotSend; } catch (ObjectDisposedException e) { return MailSendStatus.ErrorCannotSend; } catch (InvalidOperationException e) { return MailSendStatus.ErrorCannotSend; } catch (SmtpFailedRecipientsException e) { return MailSendStatus.ErrorCannotSend; } catch (SmtpException e) { switch(e.StatusCode) { case SmtpStatusCode.BadCommandSequence: case SmtpStatusCode.MailboxNameNotAllowed: case SmtpStatusCode.HelpMessage: case SmtpStatusCode.SyntaxError: case SmtpStatusCode.SystemStatus: return MailSendStatus.ErrorCannotSend; case SmtpStatusCode.CannotVerifyUserWillAttemptDelivery: case SmtpStatusCode.UserNotLocalWillForward: return MailSendStatus.SentMaybe; case SmtpStatusCode.ClientNotPermitted: case SmtpStatusCode.CommandNotImplemented: case SmtpStatusCode.CommandParameterNotImplemented: case SmtpStatusCode.CommandUnrecognized: case SmtpStatusCode.ExceededStorageAllocation: case SmtpStatusCode.GeneralFailure: case SmtpStatusCode.InsufficientStorage: case SmtpStatusCode.LocalErrorInProcessing: case SmtpStatusCode.MailboxBusy: case SmtpStatusCode.MailboxUnavailable: case SmtpStatusCode.MustIssueStartTlsFirst: case SmtpStatusCode.ServiceClosingTransmissionChannel: case SmtpStatusCode.ServiceNotAvailable: case SmtpStatusCode.ServiceReady: case SmtpStatusCode.StartMailInput: case SmtpStatusCode.TransactionFailed: case SmtpStatusCode.UserNotLocalTryAlternatePath: return MailSendStatus.TryAgain; case SmtpStatusCode.Ok: break; } } catch (Exception e) { return MailSendStatus.SentMaybe; } return MailSendStatus.Sent;
