[site]: stackoverflow
[post_id]: 4401966
[parent_id]: 4401657
[tags]: 
This applies across all types of libraries. Not just SRP. Organization of classes/functions can be a headache, but really there are only a few things you need to bear in mind. Plan. Define and keep a proper naming convention for files, classes, folders, methods/functions and variables. Break your classes into name spaces or at least into sub-folders by the major muscle groups of the system. Document: internally (good comments, file headings, and public method lists) and externally (wiki, readmes, excel, something) By 2 I mean: /library/muscleGroup/useType_nameOfClass.php for files/folders where useType is something like "factory" "abstract" "data / dto" or whatever patterns you are using. Then, in each file the class should be the exact same thing as nameOfClass and each method name should strictly follow a pattern. [Action][on what][with what conditions] and keep a list of actions and 'on whats' and stick to them RELIGIOUSLY. Do that, and you can't duplicate functionality, since you can easily find the right classes and methods for the things you want. Since they have logical names like Get_User_ById and Get_Transactions_ByNewest or Combine_Ingredients_FromRecipes . That last one might have a comment above it like: // Combines many recipes into one ingredient list // $recipes = an array of recipe objects // returns an array of ingredient objects with their correct quantities List of sample Actions: (should be pretty generic and apply to any application) Get Set Delete Move Merge Combine List of sample "On What"s: (should be application specific) User Ingredient Recipe Measurement Permission Brand Ad
