[site]: stackoverflow
[post_id]: 603371
[parent_id]: 603357
[tags]: 
I know you said you didn't want to wrap it and pass it as a collection, but there are two ways you can do this with minimal hassle, so I'll post them in case you weren't aware of one. You could use params on your method: public void Average(params Point2[] points) after which you can call it with any number of arguments, or with an array: Average(P1); Average(P2, P3, P4); Average(); // this one becomes an empty array in the method Point[] array = new Point[] { P1, P2, P3, P4 }; Average(array); Or alternately, you can use short array syntax to wrap up your object: Average({ P1 }); // this is legal C# for making an array with 1 element EDIT: After reading your note, I would suggest that a params array is the clearest way to do what you want. The only real downside to it is that you can't pass in an IEnumerable (or other collections like a List ) without first calling ToArray() , because it only takes actual arrays.
