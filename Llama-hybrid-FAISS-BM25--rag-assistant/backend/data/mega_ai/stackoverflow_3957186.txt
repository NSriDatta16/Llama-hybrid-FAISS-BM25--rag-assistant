[site]: stackoverflow
[post_id]: 3957186
[parent_id]: 3956589
[tags]: 
Short form: $(document).delegate('.tabs-nav li a.load-fragment', 'mouseenter', function (ev) { var _link = $(this), _div = _link.data('dynDiv'); if (_div) return; var newDiv = $(' ').hide() .addClass('dynamic') .load(_link.attr('href')+' #tabs-container', function () { var onLoad = _link.data('dynOnLoad'); if (onLoad) onLoad(this); _link.data('dynLoaded', true); }) .appendTo('#column2'); _link.data('dynDiv', newDiv); }); $(document).delegate('.tabs-nav li a.load-fragment', 'click', function (ev) { var _link = $(this), _div = _link.data('dynDiv'), onLoad = function () { $('#column2 .dynamic').hide(); _div.show(); }; if (!_link.data('dynLoaded')) _link.data('dynOnLoad', onLoad); else onLoad(); }); I went with the load on mouseenter because it's a trade off between front-loading on dom ready (which can hinder page load time) and loading on click (which can hinder the user experience). Predictvely loading on the mouseenter gets you most of both worlds, and $(document).delegate lets you put the script in the head, so you can live without the flash of unbehaviored content. It does require a little inter-event communication to avoid displaying the content before it's potentially ready, but what's a little .data() between friends?
