[site]: stackoverflow
[post_id]: 597394
[parent_id]: 597267
[tags]: 
Object Oriented Programming in lay speak: Everything in your program is a thing (Object). This thing has properties that explain it (size, shape, color, etc.) The programmer asks the thing to do stuff/answer questions: Make your size big (setSize) or What's your size (getSize) The thing takes care of adjusting its properties only when you ask it to (call a method). You cannot directly examine or change thing's properties. You can only examine or change the properties thing lets you see. Therefore, thing can ensure properties are viewed and changed properly. This prevents the programmer from telling thing its size is red . If you directly tell thing to make its size red it should refuse (red isn't a valid size). Additonally, it allows things to manage the side effects of changing its properties. Suppose thing's originalSize is big . If I just change thing's size to small , I have to remember to tell thing that it is no longer its originalSize . If I ask thing to change its size to small it will change its size to small AND change the originalSize to false. Now when I ask thing if it is its originalSize it will respond with a no. Essentially this allows you to package your data and functions together making things more modular/compartmentalized. This allows you to better organize code and more easily reuse code. OOP isn't anything super special, just a way to better organize your code. Not critical at the beginner level, but critical to larger projects. Within an Object's functions things generally become more procedural like a beginner is used to.
