[site]: stackoverflow
[post_id]: 1365340
[parent_id]: 884017
[tags]: 
I made some helper classes so I could use the DataGrid as a kind of DataTable. In other words, I wanted the formatting, sorting, and polished look of the DataGrid without having to pre-fab some classes beforehand. The main reason I wanted this was for a testing suite, I wanted to be able to create an arbitrary number of columns and at runtime. Here's what I got public class DataRow { internal List Items = new List (); public object this[string value] { get { return Items[Convert.ToInt32(value)]; } } public string GetString(int index) { return Items[index].ToString(); } public object GetObject(int index) { return Items[index]; } public DataRow(params object[] values) { if (values == null || values.Length Rows = new List (); private DataRow headers; public GridConstructor(DataRow head) { headers = head; } public void BuildInto(DataGrid grid) { grid.AutoGenerateColumns = false; grid.Columns.Clear(); int totalCols = 0; Type headType = headers.GetType(); for (int i = 0; i Putting this together, this is a sample use: void SimpleTest_Loaded(object sender, RoutedEventArgs e) { DataRow headers = new DataRow("Level", "Weapon Type", "vs None", "vs Leather", "vs Studded", "vs Brigandine"); GridConstructor gridConstructor = new GridConstructor(headers); var weaponType = "Slash"; for (int level = 1; level And the output: alt text http://quiteabnormal.com/images/codeSample.jpg Please note that the grid coloring is from universal styles set on the page. If you use the GridConstructor.BuildInto() method you can specify a grid you've pre-formatted yourself in Blend or somesuch. Just one thing, the GridConstructor makes some assumptions about the column's initial settings. You can change the class to make it more customizable if you like, but this is what I needed so I wanted to be able to make it without fuss.
