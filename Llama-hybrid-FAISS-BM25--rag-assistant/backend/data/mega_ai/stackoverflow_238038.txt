[site]: stackoverflow
[post_id]: 238038
[parent_id]: 237733
[tags]: 
Good rule of thumb is if you use same piece three times, and it's obviously possible to generalize it, than make it a procedure/function/library. However, as I am getting older, and also more experienced as a professional developer, I am more inclined to see code reuse as not always the best idea, for two reasons: It's difficult to anticipate future needs, so it's very hard to define APIs so you would really use them next time. It can cost you twice as much time - once you make it more general just so that second time you are going to rewrite it anyway. It seems to me that especially Java projects of late are prone to this, they seem to be always rewritten in the framework du jour, just to be more "easier to integrate" or whatever in the future. In a larger organization (I am a member of one), if you have to rely on some external team (either in-house or 3rd party), you can have a problem. Your future then depends on their funding and their resources. So it can be a big burden to use foreign code or library. In a similar fashion, if you share a piece of code to some other team, they can then expect that you will maintain it. Note however, these are more like business reasons, so in open source, it's almost invariably a good thing to be reusable.
