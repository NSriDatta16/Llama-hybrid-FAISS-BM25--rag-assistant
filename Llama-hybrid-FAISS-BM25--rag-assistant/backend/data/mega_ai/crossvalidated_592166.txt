[site]: crossvalidated
[post_id]: 592166
[parent_id]: 16710
[tags]: 
This is actually a very important post because it refers to two crucial milestones in preprocessing and I would like to point out that the semantics of the word standardization are very heterogenous - while some may have a linear transformation in mind, others would refer to the workhorse scalers used in sklearn. This post made me reflect upon the implications of using the scalers. This short exercise with the iris data from sklearn demonstates some of the above mentioned statements and adds another aspect: linear correlations do not change after a simple linear transformation by multiplication, or after scaling using linear scalers. VIF does not change after a simple multiplication by a constant, but it changes substantially if we apply scalers. linear correlations may change if we apply nonlinear scalers, like power transform. The latter is very important because nonlinear change both i) VIF and ii) linear correlations. Therefore I would like to add that standardization may have implications for correlations if nonlinear scalers are applied. Sorry if the Python code below is clumsy, but I think that it is worth taking a closer look at the implications of scaling. import math from sklearn import preprocessing import pandas as pd from sklearn.datasets import load_iris import copy as cp from statsmodels.stats.outliers_influence import variance_inflation_factor ### VIF for original data iris_data = load_iris() iris_source = pd.DataFrame(data = iris_data['data'], columns = iris_data['feature_names']) iris_cols = iris_source.columns.str.strip("(cm)") iris_df = cp.deepcopy(iris_source) iris_df.set_axis(iris_cols , axis=1,inplace=True) vif_data = pd.DataFrame() vif_data['Features'] = iris_df.columns vif_data['VIF'] = [variance_inflation_factor(iris_df.values, i) for i in range(len(iris_df.columns))] corrmat_orig = pd.DataFrame(round(iris_df.corr(), 4)) ### Applying linear transformation by constant multiplication iris_df_lintrans=cp.deepcopy(iris_df) iris_df_lintrans['sepal length ']=iris_df['sepal length ']*10 iris_df_lintrans['sepal width ']=iris_df['sepal width ']*50 vif_data_lintrans = pd.DataFrame() vif_data_lintrans['Features'] = iris_df_lintrans.columns vif_data_lintrans['VIF'] = [variance_inflation_factor(iris_df_lintrans.values, i) for i in range(len(iris_df_lintrans.columns))] corrmat_lintrans = pd.DataFrame(round(iris_df_lintrans.corr(), 4)) ### Applying workhorse sklearn scalers, except nonlinear ones from sklearn.preprocessing import StandardScaler, MinMaxScaler scaler = MinMaxScaler() ### can try MinMaxScaler or any other linear scaler iris_scaler=scaler.fit(iris_df_lintrans) iris_transformed=pd.DataFrame(iris_scaler.transform(iris_df_lintrans), columns=iris_df_lintrans.columns) vif_data_scaled = pd.DataFrame() vif_data_scaled['Features'] = iris_transformed.columns vif_data_scaled['VIF'] = [variance_inflation_factor(iris_transformed.values, i) for i in range(len(iris_transformed.columns))] vif_data_compare = pd.DataFrame() vif_data_compare['Features'] = iris_transformed.columns vif_data_compare['VIF_orig'] = vif_data['VIF'] vif_data_compare['VIF_lintrans'] = vif_data_lintrans['VIF'] vif_data_compare['VIF_scaled']= vif_data_scaled['VIF'] corrmat_scaled = pd.DataFrame(round(iris_transformed.corr(), 4)) ### Print VIF for each case - VIF unachnged after multiplication but decreases after scaling using "workhorse" sklearn scalers print('─' * 100) print(vif_data_compare) print('─' * 100) ### Print correlation matrix for each case - no changes print(corrmat_orig) print('─' * 100) print(corrmat_lintrans) print('─' * 100) print(corrmat_scaled) print('─' * 100) ### Nonlinear scalers may distort linear correlations ### Applying nonlinear PowerTransformer sklearn scaler from sklearn.preprocessing import StandardScaler, MinMaxScaler, PowerTransformer scaler = PowerTransformer() ### can try MinMaxScaler or any other linear scaler iris_scaler=scaler.fit(iris_df_lintrans) iris_transformed=pd.DataFrame(iris_scaler.transform(iris_df_lintrans), columns=iris_df_lintrans.columns) vif_data_scaled = pd.DataFrame() vif_data_scaled['Features'] = iris_transformed.columns vif_data_scaled['VIF'] = [variance_inflation_factor(iris_transformed.values, i) for i in range(len(iris_transformed.columns))] vif_data_compare = pd.DataFrame() vif_data_compare['Features'] = iris_transformed.columns vif_data_compare['VIF_orig'] = vif_data['VIF'] vif_data_compare['VIF_lintrans'] = vif_data_lintrans['VIF'] vif_data_compare['VIF_scaled']= vif_data_scaled['VIF'] corrmat_scaled = pd.DataFrame(round(iris_transformed.corr(), 4)) print('─' * 100) print(corrmat_scaled) print('─' * 100)
