[site]: stackoverflow
[post_id]: 5479625
[parent_id]: 5479319
[tags]: 
You can't really just make a "grid of threads", since you have to organize threads into blocks and you can have a maximum of 512 threads per block. However, you could effectively do this by using 1 thread per block, which will result in a X by Y grid of 1x1 blocks. However, this will result in pretty terrible performance due to several factors: According to the CUDA Programming Guide, a SM can handle a maximum of 8 blocks at any time. This will limit you to 8 threads per SM, which isn't enough to fill even a single warp. If you have, say, 48 CUDA cores, you will only be able to handle 384 threads at any given time. With only 8 threads available on a SM, there will be too few warps to hide memory latencies. The GPU will spend most of its time waiting for memory accesses to complete, rather than doing any computations. You will be unable to coalesce memory reads and writes, resulting in poor memory bandwidth usage. You will be effectively unable to leverage shared memory, as this is a shared resource between threads in a block. While having to ensure correctness for threads in a block is annoying, your performance will be vastly better than your "grid of threads" idea.
