[site]: stackoverflow
[post_id]: 1681080
[parent_id]: 1680756
[tags]: 
Although possibly related with a very small database as suggested in other response, the problem is more likely tied to the FILLFACTOR . The ALTER INDEX statement shown does not explicitly mention the FILLFACTOR, and hence the rebuilt is done on the basis of the current fillfactor value, leaving a fragmentation that should approximate this factor. (It is rarely an exact match because a given index entry cannot be split between two nodes, hence making each node possibly leave more or less room than the fillfactor would require; indeed in some cases, this would require an fractional number of bytes... but let's not stray from the real issue...) You can inquire the current fillfactor value for a given index by looking in the sys.indexes table, with a query similar to SELECT * FROM sys.indexes WHERE object_id IN ( SELECT object_id FROM sys.objects WHERE name = 'myTableName') Alternatively if you run a modified version of the ALTER INDEX snipped shown, where ... FILLFACTOR = 100 ... is added in the "WITH" option, I suspect the fragmentation reported will match your expectation. For sake of clarity, the PAD_INDEX option only instructs SQL to leave some space in the intermediate nodes of the index, these therefore will not incur any "fragmentation", but the leaf nodes will. This said... It may be a good idea to leave a certain amount of fillfactor , in order to delay in onset of fragmentation as new data is inserted into the table.
