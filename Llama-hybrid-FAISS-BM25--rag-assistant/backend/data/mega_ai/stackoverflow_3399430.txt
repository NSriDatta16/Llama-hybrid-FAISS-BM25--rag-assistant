[site]: stackoverflow
[post_id]: 3399430
[parent_id]: 3380498
[tags]: 
Last weekend, I was asking myself the same question to port my toy language to the JVM. I spend only few hours searching information,so take this references with a grain of salt. Language Implementation Patterns . I hate antlr but this book looks very good. If you dont like antlr neither, there is a very good about parsing "Parsing Techniques. A Practical Guide." Learn to build configuration file readers, data readers, model-driven code generators, source-to-source translators, source analyzers, and interpreters. You don’t need a background in computer science—ANTLR creator Terence Parr demystifies language implementation by breaking it down into the most common design patterns. Pattern by pattern, you’ll learn the key skills you need to implement your own computer languages. Chapter 10 cover in 30 pages (to fast IMO) this topics. But there are other chapter that probably you will be interested. 10 Building Bytecode Interpreters 10.1 Programming Bytecode Interpreters . . 10.2 Defining an Assembly Language Syntax 10.3 Bytecode Machine Architecture . . . . . 10.4 Where to Go from Here . . . . . . . . . . P.26. Bytecode Assembler . . . . . . . . . . . P.27. Stack-Based Bytecode Interpreter . . . P.28. Register-Based Bytecode Interpreter http://pragprog.com/titles/tpdsl/language-implementation-patterns The Implementation of Lua 5.0 This is a great paper about register- based bytecode machines. Go an read it even for the sake of it. Lisp in Small Pieces. This book teach how to write a 2 schme compailers that compile to C. So many lessons can be learned from this book. I own a copy of this book and it is really good for anyone interesting is lisp, but maybe not your cup of tea. This is a comprehensive account of the semantics and the implementation of the whole Lisp family of languages, namely Lisp, Scheme and related dialects. It describes 11 interpreters and 2 compilers ... http://www.amazon.com/Lisp-Small-Pieces-Christian-Queinnec/dp/0521562473 Check the Dalvik7 VM, a register-based VM. The DVM operates on bytecodes that are transformed from the Java Class files compiled by a Java compiler. There is a mailing list about the topic, jvm-languages. Are you planning to upload the code to anyplace? I would like to take a look.
