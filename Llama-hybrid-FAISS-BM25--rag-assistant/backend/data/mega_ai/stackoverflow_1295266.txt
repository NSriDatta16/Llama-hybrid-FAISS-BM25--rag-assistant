[site]: stackoverflow
[post_id]: 1295266
[parent_id]: 1290924
[tags]: 
- (void)viewDidLoad { [super viewDidLoad]; // create a soap Message which is given in your required web service NSString *soapMessage=@" \n" " \n" " \n" " \n" " \n" " "; // create a url to your asp.net web service. NSURL *tmpURl=[NSURL URLWithString:[NSString stringWithFormat:@"http://192.168.32.10/Itavema/Admin/Itavema_Service.asmx"]]; // create a request to your asp.net web service. NSMutableURLRequest *theRequest=[NSMutableURLRequest requestWithURL:tmpURl]; // add http content type - to your request [theRequest addValue:@"text/xml; charset=utf-8" forHTTPHeaderField:@"Content-Type"]; // add SOAPAction - webMethod that is going to be called [theRequest addValue:@"http://tempuri.org/GetCategory" forHTTPHeaderField:@"SOAPAction"]; // count your soap message lenght - which is required to be added in your request NSString *msgLength=[NSString stringWithFormat:@"%i",[soapMessage length]]; // add content length [theRequest addValue:msgLength forHTTPHeaderField:@"Content-Length"]; // set method - post [theRequest setHTTPMethod:@"POST"]; // set http request - body [theRequest setHTTPBody:[soapMessage dataUsingEncoding:NSUTF8StringEncoding]]; // establish connection with your request & here delegate is self, so you need to implement connection's methods NSURLConnection *con=[[NSURLConnection alloc] initWithRequest:theRequest delegate:self]; // if connection is established if(con) { myWebData=[[NSMutableData data] retain]; // here -> NSMutableData *myWebData; -> declared in .h file } } // a method when connection receives response from asp.net web server -(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response { [myWebData setLength: 0]; } // when web-service sends data to iPhone -(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data { [myWebData appendData:data]; } // when there is some error with web service -(void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error { [connection release]; } // when connection successfully finishes -(void)connectionDidFinishLoading:(NSURLConnection *)connection { // check out your web-service retrieved data on log screen NSString *theXML = [[NSString alloc] initWithBytes: [myWebData mutableBytes] length:[myWebData length] encoding:NSUTF8StringEncoding]; NSLog(@"%@",theXML); [theXML release]; // if parser isn't nil. here NSXMLParser *myXMLParser; in .h file if( myXMLParser ) { [myXMLParser release]; } // supply your responded data to xmlParser - xmlParser will parse xmlData & then you can use it myXMLParser = [[NSXMLParser alloc] initWithData: myWebData]; // here delegate self means implement xmlParse methods [myXMLParser setDelegate: self]; [myXMLParser setShouldResolveExternalEntities: YES]; // parse method - will invoke xmlParserMethods [myXMLParser parse]; [connection release]; [myWebData release]; } //#pragma mark xmlParser // suppose myData is the xmlData // this function will read " " & tag attributes -(void)parser:(NSXMLParser*)parser didStartElement:(NSString*)elementName namespaceURI:(NSString*)namespaceURI qualifiedName:(NSString*)qualifiedName attributes:(NSDictionary*)attributeDict { if([elementName isEqualToString:@"GetCategoryResult"]) { // here categoryArray is NSMutable array declared in .h file. // init your array when root element / document element is found CategoryArray=[[NSMutableArray alloc]init]; } else if([elementName isEqualToString:@"Prop_Category"]) { aCategory=[[Category alloc] init]; // if a tag has attribues like //aCategory.ID=[attributeDict objectForKey:@"id"]; } } // suppose myData is the xmlData // this function will read "myData" & tag attributes -(void)parser:(NSXMLParser*)parser foundCharacters:(NSString*)string { // here currentElementValue is an NSMutableString declared in .h file // store read characters in that mutable string & then add to your object. if(!currentElementValue) { currentElementValue=[[NSMutableString alloc] initWithString:string]; } else { [currentElementValue appendString:string]; } } // suppose myData is the xmlData // this function will read " " & tag attributes -(void)parser:(NSXMLParser*)parser didEndElement:(NSString*)elementName namespaceURI:(NSString*)namespaceURI qualifiedName:(NSString*)qualifiedName { if([elementName isEqualToString:@"GetCategoryResult"]) { // if end of root element is found- i.e. end of your xml file. return; } else if([elementName isEqualToString:@"Prop_Category"]) { // end of a single data element // suppose // 10 // // // when we found we have finished entire category object. // here we have an object aCategory -> created custom class "Category" // CategoryClass -> NSString *name; NSInteger id; // Note: "important" //->class variables must be same as tag // now after reading entire object add to your mutable array // now this mutable array can be used for Table, UIPicker [CategoryArray addObject:aCategory]; [aCategory release]; aCategory=nil; [CategoryTable reloadData]; } else { // which is equivalent to aCategory.id=10 & aCategory.name=@"sagar" [aCategory setValue:currentElementValue forKey:elementName]; // remove previously read data [currentElementValue release]; currentElementValue=nil; } }
