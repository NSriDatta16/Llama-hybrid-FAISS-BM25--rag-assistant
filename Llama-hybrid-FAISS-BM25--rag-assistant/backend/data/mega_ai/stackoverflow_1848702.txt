[site]: stackoverflow
[post_id]: 1848702
[parent_id]: 
[tags]: 
Storing XSLT in SQL Server 2005 with xml type?

I have a lot of XSL files in my ASP.NET web app. A lot. I generate a bunch of AJAX HTML responses using this kind of generic transform method: public void Transform(XmlDocument xml, string xslPath) { ... XslTransform myXslTrans = new XslTransform(); myXslTrans.Load(xslPath); myXslTrans.Transform(xml,null, HttpContext.Current.Response.Output); } I'd like to move the XSL definitions into SQL Server, using a column of type xml. I would store an entire XSL file in a single row in SQL, and each XSL is self-contained (no imports). I would read out the XSL definition from SQL into my XslTransform object. Something like this: public void Transform(XmlDocument xml, string xslKey) { ... SqlCommand cmd = new SqlCommand("GetXslDefinition"); cmd.AddParameter("@xslKey", SqlDbType.VarChar).Value = xslKey; // where the result set has a single column of XSL: " ..." ... SqlDataReader dr = cmd.ExecuteReader(); if(dr.Read()) { SqlXml xsl = dr.GetSqlXml(0); XslTransform myXslTrans = new XslTransform(); myXslTrans.Load(xsl.CreateReader()); myXslTrans.Transform(xml,null, HttpContext.Current.Response.Output); } } It seems like a straightforward way to: add metadata to each XSL, like lastUsed, useCount, etc. bulk update/search capabilities prevent lots of disk access avoid referencing relative paths and organizing files allow XSL changes without redeploying (I could even write an admin page that selects/updates the XSL in the database) Has anyone tried this before? Are there any caveats? EDIT Caveats that responders have listed: disk access isn't guaranteed to diminish this will break xsl:includes
