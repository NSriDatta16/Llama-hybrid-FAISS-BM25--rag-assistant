[site]: stackoverflow
[post_id]: 4989134
[parent_id]: 4989021
[tags]: 
Update: I am leaving the first answer as is and adding the new code here. I see that there are multiple issues with your code. here is the updated one. cls function getACLS ([string]$path, [int]$max, [int]$current) { $dirs = Get-ChildItem -Path $path | Where { $_.psIsContainer } $acls = Get-Acl -Path $path $security = @() foreach ($acl in $acls.Access) { $security += ($acl.IdentityReference, $acl.FileSystemRights) } if ($current -lt $max) { if ($dirs) { foreach ($dir in $dirs) { $newPath = $dir.FullName $security getACLS $newPath $max ($current+1) } } } elseif ($current -eq $max ) { Write-Host max return $security } } $results = getACLS "C:\Scripts" 2 0 If you see above, I am not using return. I just throw the object from the GetACLs function. Also, I modified it to return on $security for testing purpose. I can see the all ACLs in $results. I changed the first if condition to if ($current -lt $max). It should not be if ($current -le $max). Let me know if this what you are looking for. I can continue to optimize this. ==========================================OLD============================================= Return will exit the function. I am not providing the complete solution here but want to give you an idea about how this can be changed. You can use PS Custom object to capture the information you need. For example, function GetItem { $itemsArray = @() Get-ChildItem C:\Scripts | ForEach-Object { $itemsObject = New-Object PSObject Add-Member -InputObject $itemsObject -MemberType NoteProperty -Name "FullName" -Value $_.FullName Add-Member -InputObject $itemsObject -MemberType NoteProperty -Name "Name" -Value $_.Name $itemsArray += $itemsObject } return $itemsArray } This way you can return the object once it is completely built with the information you need.
