[site]: stackoverflow
[post_id]: 4694849
[parent_id]: 4693792
[tags]: 
I would highly recommend that before you look in to scaling out session that you first evaluate whether session was even needed in the first place. Session variables are serialized and deserialized for every single page load whether the page uses that data or not. ( EDIT : Craig pointed out that you have some level of control over this in .net 4 http://msdn.microsoft.com/en-us/library/system.web.sessionstate.sessionstatebehavior.aspx However, this still has drawbacks, see comments to this answer.) For single server instances this is okay as you are just pulling it from the local memory of your web server. The load on these apps tend to be pretty small so caching user specific information locally makes sense. However, as soon as you move storage of session to another server you have increased the network requirements and page load times of your application. Namely, every page will result in the session data to be moved from the remote server, across the network wire, and into memory of the web server. At this point you have to ask yourself: is the load to pull this information from the database server directly as necessary more than pulling it from the session server every single time? There are few instances where pulling it from the database server as needed takes longer or results in more traffic than grabbing it from a remote session server. Bearing in mind that a lot of people set up their database server(s) to also be session servers and you start to see why use of session doesn't make any sense. The only time I would consider using session for load balanced web apps is if the time to acquire the data exceeded a "reasonable" amount of time. For example, if you have a really complex query to return a single value and this query would have to be run for lots of pages. But even then there are better ways that reduce the complexity of dealing with remote session data.
