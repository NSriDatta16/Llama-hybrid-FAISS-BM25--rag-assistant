[site]: stackoverflow
[post_id]: 5508717
[parent_id]: 5506453
[tags]: 
This is a great question because it cuts right to the heart of how message-based systems--and specifically how NServiceBus--can solve a lot of pain. You're definitely headed in the right direction for A and B--just subscribe to the appropriate message and then forward/push the data to your customer using the mechanism that they've chosen. If they're offline, no big deal, the message-based system handles failures more gracefully than others. Interestingly enough, customer C can be served in almost exactly the same way as A and B, but with a few extra steps. To start, just setup another NSB endpoint that subscribes to the appropriate messages and then writes them out to persistent storage using the desired structure indicated by customer C. You can write the messages out to a local database, to JSON files, or even to Amazon S3 blobs. From there you just need to setup some kind of HTTP endpoint (not using NServiceBus) that allows the customer to query and retrieve the appropriate data. If you're using S3 and giving out JSON blobs, you may not even need to setup an HTTP server--just let Amazon do all the work. Another really cool side effect of this is that if future customers D and E decide they want to poll as well, but they need slightly different formats from each other and from customer C, you can accommodate them by setting up another handler that writes out files (or DB inserts) according to the format they dictate--all without changing how your system behaves.
