[site]: stackoverflow
[post_id]: 1044009
[parent_id]: 390930
[tags]: 
A more elegant solution would be to write your own Authorization action filter, either by extending [Authorize], or implementing IAuthorizationFilter, as follows: public class AuthorizeOwnerAttribute: FilterAttribute, IAuthorizationFilter { #region IAuthorizationFilter Members public void OnAuthorization(AuthorizationContext filterContext) { // add logic here that compares the currently logged in user, to the owner of the profile that is being edited // get currently logged in user info from filterContext.HttpContext.User.Identity; // get profile being edited from filterContext.RouteData or filterContext.Something } #endregion } I'm not sure on what the actual logic would be that goes into the OnAuthorization method, but my comments should give you a starting point. You'd have to Google to find out more - how to redirect the user to a different view, or whether to throw an strongly typed exception that is handled somewhere else (maybe in a [HandleError] attribute).
