[site]: stackoverflow
[post_id]: 1950275
[parent_id]: 1608939
[tags]: 
i think javier's answer makes the most sense. if you want to test the theory out, then check out the node javascript project. Node is based on Google's v8 engine which compiles javascript to machine code and is as fast as c for certain tasks. It is also based on libev and is designed to be completely non-blocking, meaning you don't have to worry about context switching between threads (everything runs on a single event loop). It is very similar to erlang in that respect. Writing high performance servers in javascript is now really, really easy with node. You could also, with a little bit of effort, write your custom code in c and create bindings for node to call into it to do your actual processing (look at the node source to see how to do this - documentation is a little sketchy at the moment). as an uglier alternative, you could build your custom c code as an application and use stdin/stdout to communicate with it. I've tested node myself with upwards of 150k connections with absolutely no issues (of course you will need some serious hardware if all these connections are going to be communicating at once). A TCP connection in node.js on average uses only 2-3k of memory so you could theoretically handle 350-500k connections per 1GB of RAM. Note - Node.js is not currently supported on windows, but it is only at an early stage of development and i'd imagine it will be ported at some stage. Note 2 - you will have to ensure the code you are calling into from Node does not block
