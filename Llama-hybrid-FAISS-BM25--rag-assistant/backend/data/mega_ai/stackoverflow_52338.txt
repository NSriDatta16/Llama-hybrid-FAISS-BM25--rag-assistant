[site]: stackoverflow
[post_id]: 52338
[parent_id]: 52176
[tags]: 
Boolean algebra is fundamental to understanding control structures and refactoring. For example, I've seen many bugs caused by programmers who didn't know (or couldn't use) deMorgan's law. As another example, how many programmers immediately recognize that if (condition-1) { if (condition-2) { action-1 } else { action-2 } else { action-2 } can be rewritten as if (condition-1 and condition-2) { action-1 } else { action-2 } Discrete mathematics and combinatorics are tremendously helpful in understanding the performance of various algorithms and data structures. As mentioned by Baltimark, mathematical induction is very useful in reasoning about loops and recursion. Set theory is the basis of relational databases and SQL. By way of analogy, let me point out that carpenters routinely use a variety of rule-of-thumb techniques in constructing things like roofs and stairs. However, a knowledge of geometry allows you to solve problems for which you don't have a "canned" rule of thumb. It's like learning to read via phonetics versus sight-recognition of a basic vocabulary. 90+% of the time there's not much difference. But when you run into an unfamiliar situation, it's VERY nice to have the tools to work out the solution yourself. Finally, the rigor/precision required by mathematics is very useful preparation for programming, regardless of specific technique. Again, many of the bugs in programming (or even specifications) that I've seen in my career have sloppy thinking at their root cause.
