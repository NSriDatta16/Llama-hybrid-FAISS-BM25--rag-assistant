[site]: stackoverflow
[post_id]: 3861477
[parent_id]: 3767708
[tags]: 
Here's what I've done. In your DragDrop code, subscribe to the PreviewMouseLeftButtonDown . If the item you are already clicking on is selected, then set e.Handled to true. In my sample below, I identify a part of the list box item as a drag grip (with bumps) so that I can distinguish between the item and a drag surface. I just had to get the list box item data template and the drag and drop behavior to agree on a name of the drag grip element. The PreviewMouseLeftButtonDown from my work in progress: private void ItemsControl_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e) { dragStartPoint = e.GetPosition(null); ItemsControl itemsControl = this.AssociatedObject as ItemsControl; if (itemsControl != null) { this.sourceItemContainer = itemsControl.ContainerFromElement((Visual)e.OriginalSource) as FrameworkElement; } // If this is an multiple or extended selection list box, and on a drag grip, then ensure the item being hit is selected // This prevents the ItemsControl from using this MouseDown to change selection, except over a selected item's drag grip. if ((this.IsMultipleSelectionListBox() == true) && (this.IsOriginalSourceDragGrip(e) != false) && (this.IsSourceListBoxItemSelected() == true)) { e.Handled = true; } }
