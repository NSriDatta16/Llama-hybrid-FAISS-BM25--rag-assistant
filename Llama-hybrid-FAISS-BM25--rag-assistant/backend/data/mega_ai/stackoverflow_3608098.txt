[site]: stackoverflow
[post_id]: 3608098
[parent_id]: 
[tags]: 
F# is an open source, functional-first programming language which empowers users and organizations to tackle complex computing problems with simple, maintainable and robust code. It is used in a wide range of application areas and is available across multiple platforms. F# runs on Linux, Mac OS X, Windows as well as HTML5 and GPUs. F# is free to use and has an OSI-approved open-source license. F# is supported by industry leading companies providing professional tools, and by an active open source community. The F# Software Foundation promotes and advances the F# language and supports the F# community F# slack has an active community for F# questions and other topics of interest To contribute visit the F# GitHub Organization and join the F# Open Source mailing list . Microsoft Visual F# provides professional Visual Studio tooling for F# TryF# provides interactive web-based tutorials that introduce F# The Learning F# page provides information about tutorials and books. To install and run F# on various platforms including Windows, Linux, Mac, HTML5 and others, visit the Using F# page . For more information, see also Getting Started with F# . Formal F# language specifications can be found on the F# Software Foundation website: F# Language specification For idiomatic coding conventions and styles, please read F# Component Design Guidelines . To search for F# operators such as "?" (dynamic operator) in StackOverflow, you can use http://symbolhound.com/ . Free F# Programming Resources F Sharp Programming in Wikibooks Real World Functional Programming (MSDN Chapters) FSharp for Fun and Profit an excellent on-line resource Visual F# Development Portal Rosetta Code If you are familiar with another programming language such as Java or C# and want to leverage that knowledge to understand how to do the same in a different language then Rosetta Code list many common programming tasks and the solutions in many different programming languages . Most task are done for F# but not all. Lambda Calculus Since F# is based on functional programming and functional programming is based on lambda calculus. An Introduction To Functional Programming Through Lambda Calculus by Greg Michaelson Functional Programming Introduction to Functional Programming by John Harrison The code is ML, but F# started from ML and the ML in the book can easily be converted to F#. The Conception, Evolution, and Application of Functional Programming Languages by Paul Hudak Introduces many concepts of functional programming not found in imperative programming. Chat Room Stack Overflow chat room for F# Stack Overflow F# Tutorial Data structures and collections List What's the reason of using ; in F# lists instead of ,? Does appending a list to another list in F# incur copying of underlying objects or just the pointers? Merge two lists Idiomatic way to "merge" multiple lists of the same length in F#? Projecting a list of lists efficiently in F# Sequence When to use a sequence in F# as opposed to a list? Sequence vs LazyList Is it possible to match with decomposed sequences in F#? Array Why does F# prefer lists over arrays? List, Array or what else? How do I add two numeric arrays in F# Is there a method for adding a tail to an array that is more effective than append in F#? List comprehension list comprehension in F# List comprehension vs high-order functions in F# How do I translate this Haskell to F#? Tuples and records Accessing a specific member in a F# tuple F#. Tuple or not F# Records: Dangerous, only for limited use, or well used functionality? F# record member evaluation Discriminated unions Shared cases in F# discriminated unions Enum vs non-member discriminated union Purpose of a single case discriminated union Concise pattern match on single case discriminated union in F# Enumeration Enum (flags) member composed of other members Working around incomplete pattern matching on enums What is the syntax to assign multiple enum values to a property in F#? Pattern matching Explaining pattern matching vs switch How does pattern matching work behind the scenes in F#? Pattern matching on the beginning of a string in f# Is it possible to match with decomposed sequences in F#? Recursion Mutually recursive functions/types How to have two methods calling each other? Can discriminated unions refer to each other? Tail recursion How do I know if a function is tail recursive in F# F# tail recursion and why not write a while loop? While or Tail Recursion in F#, what to use when? How can I implement a tail-recursive list append? Combine memoization and tail-recursion Type inference Why is F#'s type inference so fickle? Functions with generic parameter types Why can't F#'s type inference handle this? Forcing F# type inference on generics and interfaces to stay loose Hindley Milner Type Inference in F# Type handling Does F# documentation have a way to search for functions by their types? How to read F# type signatures? F# Type Annotation For Lists Error handling CLR vs OCaml exception overhead F# exception handling constructs Option vs Exception in exception handling Namespaces and modules What the difference between a namespace and a module in F#? F#, namespaces, modules, fs and fsx F# code organization: types & modules DIfference between Modules and Namespaces in F# Is it possible to pass parameters to F# modules? Classes and inheritance How to make F# infer common base type? Does F# inherit every type from Object? When does an F# type need to be initialised using new? Active patterns Active patterns and member constraint F# Active Pattern List.filter or equivalent F# Pattern Matching with when clause FizzBuzz with Active Patterns Units of measure How are units of measure represented? How to specify union clause with generic unit of measure in F#? Fractional power of units of measures in F# Generic numbers F# Static Member Type Constraints How to write a function for generic numbers? Complete, efficient NumericLiteral module implementation Does F# have generic arithmetic support? Computation expressions Why do F# computation expressions require a builder object (rather than a class)? How to implement delay in the maybe computation builder? F# Computation Expressions: How to use `for` to return a `seq`? Defining new keywords in F#'s computation expression How do I change the Rx Builder implementation to fix the stack overflow exception? Asynchronous workflows Task Parallel Library vs Async Workflows Understanding F# Asynchronous Programming Why shouldn't I use F# asynchronous workflows for parallelism? Best practices to parallelize using async workflow F# Interactive F# interactive - how to see all the variables defined in current session Out of memory exception for a matrix fsx script referencing a dll referencing many dll F# - Keep F# interactive from posting output Performance optimization Why is this F# code so slow? FSharp runs my algorithm slower than Python F# seems slower than other languages... what can I do to speed it up? Why is using a sequence so much slower than using a list in this example Use of `inline` in F# F# vs. C# Best approach for designing F# libraries for use from both F# and C# What task is best done in a functional programming style? C# / F# Performance comparison F# and other functional programming languages F# changes to OCaml Object-oriented programming in a purely functional programming context? How would I translate a Haskell type class into F#? Official Logo:
