[site]: stackoverflow
[post_id]: 4074154
[parent_id]: 
[tags]: 
When should the Singleton pattern NOT be used? (Besides the obvious)

I know well that you want to use Singleton to provide a global point of access to some state or service. The benefits of the Singleton pattern do not need to be enumerated in this question. What I am interested in are the situations when Singleton might seem like a good choice at first, but might come back to bite you. Time and time again, I've seen authors in books and posters on SO say that the Singleton pattern is often a very bad idea. The Gang of Four states that you'll want to use Singleton when: there must be exactly one instance of a class, and it must be accessible to clients from a well-known access point. when the sole instance should be extensible by subclassing, and clients should be able to use an extended instance without modifying their code. These points, while certainly notable, are not the practical ones which I seek. Does anyone have a set of rules or caveats that you use to assess whether you're really, really sure you want to use a Singleton?
