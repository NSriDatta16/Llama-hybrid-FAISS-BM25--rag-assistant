[site]: stackoverflow
[post_id]: 305219
[parent_id]: 305064
[tags]: 
Well, answering myself here to sum up, in case someone else finds this page looking for info. As MSalters advised, the security cookie code can be stolen from the CRT source, but doing that I found that the /GS- compiler flag can be used to avoid the security stuff altogether. As SoapBox said, the API functions need to be __stdcall , as well as the entry point does. I fixed the entry point issue with linker command line flag /entry:wmain . And finally, as Tomek pointed out, the API functions gotta be in extern C! So: #pragma comment(lib, "kernel32.lib") typedef int(*FARPROC)(); extern "C" { void* __stdcall LoadLibraryW( wchar_t* lpLibFileName ); FARPROC __stdcall GetProcAddress( void* hModule, char* lpProcName ); int __stdcall FreeLibrary( void* hLibModule ); typedef int (__stdcall *f_MessageBoxW_t)( unsigned long hWnd, wchar_t* lpText, wchar_t* lpCaption, unsigned long uType); f_MessageBoxW_t fnMsg; void* hUser; }; int __stdcall wmain(int argc, wchar_t* argv[]) { hUser = LoadLibraryW( L"user32.dll" ); fnMsg = (f_MessageBoxW_t)GetProcAddress( hUser, "MessageBoxW" ); fnMsg( 0, L"foo", L"bar", 0 ); FreeLibrary( hUser ); return 0; }
