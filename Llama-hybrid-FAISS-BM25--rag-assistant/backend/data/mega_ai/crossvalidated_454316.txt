[site]: crossvalidated
[post_id]: 454316
[parent_id]: 
[tags]: 
Unable to get calibrated predictions from logistic regression with imbalanced data

I'm trying to run some experiments and benchmark different calibration options and one thing I noticed is that the logistic regression output is not giving me calibrated predictions when my data is not balanced. This surprised me given that there is a lot of theoretical evidence why the output should be well calibrated. Could someone explain why I am seeing these results? You can find the code and the output below. from sklearn.datasets import make_classification from sklearn.linear_model import LogisticRegression from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier from sklearn.model_selection import train_test_split from sklearn.calibration import calibration_curve from sklearn.metrics import (brier_score_loss, precision_score, recall_score, roc_auc_score, f1_score) import matplotlib.pyplot as plt from sklearn.preprocessing import MinMaxScaler X, y = make_classification(n_samples=100000, n_features=2, n_informative=2, n_redundant=0, n_clusters_per_class = 1, weights=[0.98, 0.02], class_sep=1, random_state=0) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.5, stratify=y, random_state = 42) scaler = MinMaxScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) lr = LogisticRegression(fit_intercept=True) rf = RandomForestClassifier() gbm = GradientBoostingClassifier() estimators = { 'Logistic Regression': lr, 'Random Forest': rf, 'GBM': gbm } plt.figure(figsize=(8, 8)) plt.title("Two informative features", fontsize='small') plt.scatter(X_train[:, 0], X_train[:, 1], marker='o', c=y_train, s=25, edgecolor='k') plt.show() def plot_calibration_curve(estimators, fig_index): """Plot calibration curve for est w/o and with calibration. """ fig = plt.figure(fig_index, figsize=(10, 10)) ax1 = plt.subplot2grid((3, 1), (0, 0), rowspan=2) ax2 = plt.subplot2grid((3, 1), (2, 0)) ax1.plot([0, 1], [0, 1], "k:", label="Perfectly calibrated") for name, clf in estimators.items(): clf.fit(X_train, y_train) y_pred = clf.predict(X_test) if hasattr(clf, "predict_proba"): prob_pos = clf.predict_proba(X_test)[:, 1] else: # use decision function prob_pos = clf.decision_function(X_test) prob_pos = \ (prob_pos - prob_pos.min()) / (prob_pos.max() - prob_pos.min()) clf_score = brier_score_loss(y_test, prob_pos, pos_label=y.max()) print("%s:" % name) print("\tBrier: %1.3f" % (clf_score)) print("\tPrecision: %1.3f" % precision_score(y_test, y_pred)) print("\tRecall: %1.3f" % recall_score(y_test, y_pred)) print("\tF1: %1.3f\n" % f1_score(y_test, y_pred)) print("\tAUC: %1.3f\n" % roc_auc_score(y_test, y_pred)) fraction_of_positives, mean_predicted_value = \ calibration_curve(y_test, prob_pos, n_bins=10) ax1.plot(mean_predicted_value, fraction_of_positives, "s-", label="%s (%1.3f)" % (name, clf_score)) ax2.hist(prob_pos, range=(0, 1), bins=10, label=name, histtype="step", lw=2) ax1.set_ylabel("Fraction of positives") ax1.set_ylim([-0.05, 1.05]) ax1.legend(loc="lower right") ax1.set_title('Calibration plots (reliability curve)') ax2.set_xlabel("Mean predicted value") ax2.set_ylabel("Count") ax2.legend(loc="upper center", ncol=2) plt.tight_layout() plot_calibration_curve(estimators, 1) plt.show()
