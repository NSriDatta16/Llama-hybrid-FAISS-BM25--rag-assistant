[site]: stackoverflow
[post_id]: 3308816
[parent_id]: 3307960
[tags]: 
Here's an option but it won't be pretty. It sounds like you need to associate a long lived object (the stateful object to your backend tier) with individual users. You could store this object in Application state and associate it with the users Session state with a key. You'd need to provide a wrapper to keep track of them all. When the session dies you could capture the event and destroy the backend object. Application state is a key/value store just like Session. You can access through HttpContext.Application The big downfall to this is that the objects you put in there stick around until you destroy them so your wrapper and session destroying code need to be spot on. Other than that this might be a quick way to get up and running. Like I said, it won't be optimal, but it'll probably work. More info on implications: http://msdn.microsoft.com/en-us/library/bf9xhdz4(VS.71).aspx EDIT: You could also make this work in a web farm environment. Store the information needed to recreate your stateful legacy object in Session state which can be shared between the machines using the built in SQL Provider. If a user bounces to a server where the object doesn't exist your Application state wrapper can just recreate it from the Session state info. This just leaves how to clean up the stateful object on servers where it isn't needed. In your retrieval wrapper update a hashtable or something with the access time each time the given stateful object is accessed. Have a periodic cleanup routine in th wrapper detroy the stateful objects that haven't been accessed since a little more than the session timeout value of your web app.
