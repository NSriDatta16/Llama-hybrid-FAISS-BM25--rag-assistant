[site]: stackoverflow
[post_id]: 312308
[parent_id]: 312302
[tags]: 
You can use std::stack to implement a stack. If you're looking for the homework answer, keep an array of data items (or pointers to them). This array could grow or shrink as the stack grows or shrinks. The grow/shrink factor* determines how much you care for speed or size optimization. *By grow/shrink factor, I mean how many elements you add or remove when you grow or shrink. These are naturally power-of-two values or multiples as you can just add or multiply by an easy number (e.g. += 4096, *= 2). Using large values helps prevent stack resizing, which results in faster code, but consumes more memory. Smaller values have an opposite effect, and can even cause memory fragmentation on non-MMU systems (like some portable devices). For an implementation which uses buckets, this is basically your bucket size. For the stack, you can use a linked list, a linked list with buckets, an alloc'd array (using malloc/realloc/free), std::vector, or other linear structures. If you care about code size, use std::stack (duh) or std::vector as your starting point. However, since most C++ compilers compile these as bulky sets of functions, you'll probably roll out a light class using a malloc'd array.
