[site]: stackoverflow
[post_id]: 1282034
[parent_id]: 1281752
[tags]: 
List indexing and zip() are your friends. Here's my answer for your more specific question: I might want to add the current element to the element two steps behind it. Is there a way to do this without resorting to explicit indices? arr = range(10) [i+j for i,j in zip(arr[:-2], arr[2:])] You can also use the module numpy if you intend to work on numerical arrays. For example, the above code can be more elegantly written as: import numpy narr = numpy.arange(10) narr[:-2] + narr[2:] Adding the nth element to the (n-2)th element is equivalent to adding the mth element to the (m+2) element (for the mathematically inclined, we performed the substitution n->m+2). The range of n is [2, len(arr)) and the range of m is [0, len(arr)-2). Note the brackets and parenthesis. The elements from 0 to len(arr)-3 (you exclude the last two elements) is indexed as [:-2] while elements from 2 to len(arr)-1 (you exclude the first two elements) is indexed as [2:]. I assume that you already know list comprehensions.
