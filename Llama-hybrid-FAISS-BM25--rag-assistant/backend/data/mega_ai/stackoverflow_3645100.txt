[site]: stackoverflow
[post_id]: 3645100
[parent_id]: 3644979
[tags]: 
Follow earlier suggestions. Eliminate any duplicate or almost duplicate code by creating functions. Organize by functionality and dependency. Modules should have as little inter-dependency as possible. Follow SOLID Principles and other design patterns and practices (all of which can be implemented in some degree in C). I like to use a top-down decomposition of the code. For example: main() { Initialize(); Introduce(); while (some_condition) { DoSomething(); DoSomethingElse(); } SayGoodbye(); Shutdown(); } The main() should be short and to the point and give you a quick overview of what the program does from a high-level. Each of these functions can be broken down in a similar way. This should continue until the lowest level functions have a single, focused purpose (logical modularity). These functions can be put into additional .c/.h files to have physical modularity. Good luck!
