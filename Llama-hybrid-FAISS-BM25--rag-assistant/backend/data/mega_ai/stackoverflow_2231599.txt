[site]: stackoverflow
[post_id]: 2231599
[parent_id]: 2136544
[tags]: 
I never did fully figure out how to get this to work. However, I did find a solution. An ugly, hackish solution that I'm not proud of. But it worked. In the interest of posterity, here's what I finally did. For each of the (10ish) calls I needed to make, I simply captured the SOAP call via fiddler, and then wrote a quick search-n-replace routine public string Newrule(string ruleName, DecisionSet decisionSet) { var soapString = " " + " " + " &lt;SEARCHINFO_LIST&gt;&lt;SEARCH_INFO action=&quot;add&quot; status=&quot;3&quot; " + "name=&quot;" + ruleName + "&quot; mask=&quot;0&quot; DecisionSet_id=&quot;" + decisionSet.Id + "&quot; DecisionSet_protected=&quot;N&quot; " + "condition_protected=&quot;N&quot;&gt;&lt;CONDITIONS/&gt;&lt;EXPRESSIONS/&gt;&lt;/SEARCH_INFO&gt;&lt;/SEARCHINFO_LIST&gt;" + " "; var headerUrl = "http://tempuri.org/action/DecisionSet.SetCondition"; var serviceUrl = "/webservice/DecisionSet.WSDL"; var result = sender.MakeRequest(soapString, serviceUrl, headerUrl,null); var idSearch = @"SEARCH_INFO id=&quot;(\d+)&quot;"; var ruleId = Regex.Match(result, idSearch).Groups[1].Value; return ruleId; } This called a simple routine to make an http call with the appropriate headers. Inelegant, but it worked. public string MakeRequest(string requestString, string serviceUrl, string headerUrl, string useragent) { string query = requestString.Replace(@" ", " "+secret+" "); query = query.Replace(@" ", " " + secret + " "); HttpWebRequest req = (HttpWebRequest)WebRequest.Create(server + serviceUrl); //if (proxy != null) req.Proxy = new WebProxy(proxy, true); req.Headers.Add("SOAPAction", headerUrl); if (useragent == null) req.UserAgent = "SOAP Toolkit 3.0"; else { req.UserAgent = useragent; } req.ContentType = "text/xml;charset=\"utf-8\""; req.Accept = "text/xml"; req.Method = "POST"; Stream stm = req.GetRequestStream(); StreamWriter sw = new StreamWriter(stm); sw.Write(query); sw.Flush(); stm.Close(); WebResponse resp = req.GetResponse(); stm = resp.GetResponseStream(); StreamReader r = new StreamReader(stm); string response = (r.ReadToEnd()); return response; }
