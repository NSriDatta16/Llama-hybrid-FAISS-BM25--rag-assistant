[site]: stackoverflow
[post_id]: 3884027
[parent_id]: 3883992
[tags]: 
You don't need an initializer (static constructor). if agencyId is an integer, try This public static class AgentDescriptions { private static readonly Dictionary dic = new Dictionary (); public static int GetId(int agencyId) { if (!dic.ContainsKey(agencyId)) Adic.dd(agencyId, GetIDFromDB(agencyID)); return dic[agencyId]; } // ... and use it like this: if (something == AgentDescriptions.GetId(agencyId)) //Blah(); or, if agencyId is a string, or you want to use strings like "P1", "P2" etc as keys, then public static class AgentDescriptions { private static readonly Dictionary dic = new Dictionary (); public static int GetId(string agencyId) { if (!dic.ContainsKey(agencyId)) Adic.dd(agencyId, GetIDFromDB(agencyID)); return dic[agencyId]; } // ... and use it like this: if (something == AgentDescriptions.GetId("P1") //Blah(); if the list of Agencies is fixed, you can add preconfigured static members to retrieve the Id for those agencies... public static class AgentDescriptions { private static readonly Dictionary dic = new Dictionary (); public static int P1 { get { return GetId("P1"); } } public static int P2 { get { return GetId("P2"); } } public static int P3 { get { return GetId("P3"); } } public static int GetId(string agencyId) { if (!dic.ContainsKey(agencyId)) dic.Add(agencyId, 12); return dic[agencyId]; } and use it like this: if (something == AgentDescriptions.P1) //Blah();
