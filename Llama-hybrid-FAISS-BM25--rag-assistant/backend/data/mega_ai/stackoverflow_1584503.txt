[site]: stackoverflow
[post_id]: 1584503
[parent_id]: 1584127
[tags]: 
Sorry for not answering straight but ... are you sure you have the exact balance in your testing? I wonder if you are not testing too much ? Do you really need to test a function that merely delegates to another? Returns only for the tests I agree with you when you write you don't want to add return values that are useful only for the tests , not for production. This clutters your API, making it less clear, which is a huge cost in the end. Also, your return value could seem correct to the test, but nothing says that the implementation is returning the return value that corresponds to the implementation, so the test is probably not proving anything anyway... Costs Note that testing has an initial cost , the cost of writing the test. If the implementation is very easy, the risk of failure is ridiculously low, but the time spend testing still accumulates (over hundred or thousands cases, it ends up being pretty serious). But more than that, each time you refactor your production code, you will probably have to refactor your tests also. So the maintenance cost of your tests will be high . Testing the implementation Testing what a method does (what other methods it calls, etc) is critized, just like testing a private method... There are several points made: this is fragile and costly : any code refactoring will break the tests, so this increases the maintenance cost Testing a private method does not bring much safety to your production code, because your production code is not making that call. It's like verifying something you won't actually need. When a code delegates effectively to another, the implementation is so simple that the risk of mistakes is very low, and the code almost never changes, so what works once (when you write it) will never break ...
