[site]: stackoverflow
[post_id]: 5443785
[parent_id]: 5418620
[tags]: 
Gosh, I'm not sure I'm the one to answer this, but since I've been around these waters enough times, I may have an incomplete idea of things to look at. First of all, the response times is pretty subjective. Meaning, it's good enough if it's good enough for you. From my experience, pages resembling your description seem to take about as much time as what you're describing. So, you're not orders of magnitude off in either direction. If you want to optimize your view renders with your current architecture, your next step is here , I think. Greg Pollack does a great job breaking this stuff down for you and will make sure you're on track. You'll be sure to get your assets cached and your stack fine-tuned. That'll be your most practical general advice. If you're willing to look at your deployment architecture, Ilya Grigorik raises some great questions in this article and then answers them with Goliath . If your bottlenecks are speeding up your server-client round trip, that's probably the approach to do. I try to pay attention to anything Aaron Patterson says about performance, like in this talk . He's going to teach general optimization ideas, most of them for your server-side code. You may catch a few things that relate to your current problem. I was pulled aside by a former co-worker at MWRC this year and told that I'm absolutely nuts if I'm not building with JRuby these days. It's a bit of a commitment, and I've resisted making major changes like that until I have truly painful response times, which I don't, and it doesn't sound like you're having either. However, JRuby's a very mainstream thing to do now, and you and I will likely embrace this for some projects at some point in the future. So, bottom line, I think you're in the realm of a spry app as you are. I think I'd work down these resources in the order I presented them.
