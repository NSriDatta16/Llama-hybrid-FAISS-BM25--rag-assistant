[site]: stackoverflow
[post_id]: 4769192
[parent_id]: 
[tags]: 
Using vertex buffers in jogl, crash when too many triangles

I have written a simple application in Java using Jogl which draws a 3d geometry. The camera can be rotated by dragging the mouse. The application works fine, but drawing the geometry with glBegin(GL_TRIANGLE) ... calls ist too slow. So I started to use vertex buffers. This also works fine until the number of triangles gets larger than 1000000. If that happens, the display driver suddenly crashes and my montior gets dark. Is there a limit of how many triangles fit in the buffer? I hoped to get 1000000 triangles rendered at a reasonable frame rate. I have no idea on how to debug this problem. The nasty thing is that I have to reboot Windows after each launch, since I have no other way to get my display working again. Could anyone give me some advice? The vertices, triangles and normals are stored in arrays float[][] m_vertices, int[][] m_triangles, float[][] m_triangleNormals. I initialized the buffer with: // generate a VBO pointer / handle if (m_vboHandle Then, the scene gets rendered with: gl.glBindBuffer(GL.GL_ARRAY_BUFFER, m_vboHandle); gl.glEnableClientState(GL2.GL_VERTEX_ARRAY); gl.glEnableClientState(GL2.GL_NORMAL_ARRAY); gl.glVertexPointer(3, GL.GL_FLOAT, 6*4, 0); gl.glNormalPointer(GL.GL_FLOAT, 6*4, 3*4); gl.glDrawArrays(GL.GL_TRIANGLES, 0, 3*m_triangles.length); gl.glDisableClientState(GL2.GL_VERTEX_ARRAY); gl.glDisableClientState(GL2.GL_NORMAL_ARRAY); gl.glBindBuffer(GL.GL_ARRAY_BUFFER, 0);
