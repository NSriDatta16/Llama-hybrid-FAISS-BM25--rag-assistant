[site]: crossvalidated
[post_id]: 626181
[parent_id]: 
[tags]: 
VECM predict gives forecasting results that lag behind actual data

I am using Python's statsmodels.tsa.vector_ar.vecm.VECM to estimate VECM models and generate pseudo out-of-sample forecasts with the .predict() function to compare with actual data. For example, I would stop training data at 2012Q4 and compute a one-quarter-ahead forecast for 2013Q1. Then I would increase training data to 2013Q1, compute a one-quarter-ahead forecast for 2013Q2, and do so so-on-so-forth recursively until I have a time series of one-quarter-ahead forecasts (say from 2013Q1 to 2018Q1). Then I plot this forecast time series with actual data. However, my forecasts appear to have a lag with the actual data. What might be the reason this is the case? I attach part of my code and the graph below. # Try end dates from 2012Q4 to 2017Q4 and recursively estimate out-of-sample forecasts end_dates = pd.date_range(start='2012-11-30', end='2017-12-01', freq='Q-Feb') + pd.DateOffset(months=0, days=1) forecasts = np.empty((len(end_dates))) for t in range(len(end_dates)): end_date = end_dates[t] timeseries_train = long_run_data.loc[:end_date, ['INV', 'TQ3', 'INC', 'CRE']] model = VECM(timeseries_train, deterministic={"ci"}, k_ar_diff=2, coint_rank=1) vecm_res = model.fit() forecast = vecm_res.predict(steps=1)[0, 0] forecasts[t] = forecast forecast_index = pd.date_range(start='2013-02-28', end="2018-03-01", freq="Q-Feb")+ pd.DateOffset(months=0, days=1) forecast_df = pd.DataFrame({'INV': forecasts},index=forecast_index) plt.figure(figsize=(12, 6)) plt.plot(long_run_data.index, long_run_data.loc[:, 'INV'], label='Actual investment') plt.plot(forecast_df.index, forecast_df.loc[:, 'INV'], label='INV Forecast', linestyle='--') plt.xlabel('Date') plt.ylabel('Value') plt.legend() plt.grid(True) plt.show()
