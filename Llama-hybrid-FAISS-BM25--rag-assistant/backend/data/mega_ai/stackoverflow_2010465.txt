[site]: stackoverflow
[post_id]: 2010465
[parent_id]: 2010307
[tags]: 
if the code is working and there is no need to touch it, i wouldn't refactor. i only refactor very problematic cases if i anyway have to touch them (either for extending them for functionality or bug-fixing). I favor the pragmatic way: Only (in 95%) touch, what you change. Some first thoughts on your specific problem (though in detail it is difficult without knowing the code): start to group instance variables, these groups will then be target to do 'extract class' when having grouped these variables you hopefully can group some methods, which also be moved when doing 'extract class' often there are many methods which aren't using any fields. make them static (they most likely are helper methods, which can be extracted to helper-classes. in case non-related instance fields are mixed in many methods, do loads of 'extract method' use automatic refactoring tools as much as possible, because you most likely have no tests in place and automation is more safe. Regarding your other concrete questions. is worth it (or do you) refactor methods with 10 or so arguments so that they are more readable? definetely. 10 parameters are too many to grasp for us humans. most likely the method is doing too much. are there best practices on how long methods should be ? How long do you usually keep them? it depends... on preferences. i stated some things on this thread (though the question was PHP). still i would apply these numbers/metrics to any language. are monolithic classes bad ? it depends, what you mean with monolithic. if you mean many instance variables, endless methods, a lot of if/else complexity, yes. also have a look at a real gem (to me a must have for every developer): working effectively with legacy code
