[site]: stackoverflow
[post_id]: 3291156
[parent_id]: 3289190
[tags]: 
Another possible design is to store the relationship between the nodes in the Graph object rather than embedding this information in the Node objects. If you still want to operate from the Node classes, you can pass an interface for the Graph to the Nodes so that they can provide 'convenience' functions like GetParents(), GetChildren(), AddParent(), AddChild() that call the appropriate public Graph functions. The idea here is that the Nodes shouldn't be responsible for managing Graph operations; this should be the Graph's responsibility. One simple implementation is an adjacency matrix. This is an NxN boolean array where N is the number of nodes and the contents of A[i,j] indicates whether there is a link from node i to node j. This makes updating parent/child relationships O(1) (simply set/reset a flag) and makes enumerating parents and children for a given node O(N). The downside is that you use O(N^2) space. This is a good approach if you want to mutate the graph frequently. It also generalizes to a weighted graph if you store weights instead of flags. You can use a 'list of lists' type of approach if you want to conserve space. This is really only beneficial if the number of links is much smaller than the number of nodes (i.e. the graph is sparsely connected) and the number of nodes is large.
