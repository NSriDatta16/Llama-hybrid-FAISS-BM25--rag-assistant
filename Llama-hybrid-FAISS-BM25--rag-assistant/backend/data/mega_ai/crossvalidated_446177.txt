[site]: crossvalidated
[post_id]: 446177
[parent_id]: 
[tags]: 
Approximation of chained functions

Say we want to approximate a set of $n$ continuous functions $f_n(g(x))=y$ where $x \in \mathbb{R}^d, y \in \mathbb{R}, g(x) \in \mathbb{R}^m$ by fitting them to $n$ different datasets $(X, Y)_n$ sampled from $f_n(g(x))=y$ respectively. It's not possible to sample from a function $f_n$ or from the function $g$ directly. A straightforward way to do this would be to just fit $n$ different models using only data from the respective dataset. But it seems to be wasteful to discard information from e.g. $(X, Y)_1$ when fitting $f_2(g(x))=y$ as $(X, Y)_1$ contains information about $g$ . Would it also be possible to fit $n$ models approximating $f_n$ and one model approximating $g$ ? How would one go about this? Maybe using some kind of neural network with shared parameters? Maybe there is also a Bayesian approach? Can someone point me to some literature where problems like these are talked about? I ask because exploiting this kind of known structure seems to be extremely helpful for reducing the amount of needed training data.
