[site]: stackoverflow
[post_id]: 754048
[parent_id]: 753909
[tags]: 
Yes, this is possible. The django middleware docs for process_request indicate that: def process_request(self, request) request is an HttpRequest object. This method is called on each request, before Django decides which view to execute. process_request() should return either None or an HttpResponse object. If it returns None, Django will continue processing this request, executing any other middleware and, then, the appropriate view. If it returns an HttpResponse object, Django won't bother calling ANY other request, view or exception middleware, or the appropriate view; it'll return that HttpResponse. The HttpRequest object has a path attribute that will give you the URL that was requested. If you prefer, however, note that you can also extend Django's system for authentication backends to populate the user in the request with permissions based on any arbitrary criteria, such as perhaps your hand-rolled permissions scheme. This way, you can leverage the default authentication decorators ( @permission_required and @user_passes_test ), and other apps/the admin site will be able to honour your permissions as well. The User object and permissions created do not need to reside in Django's user/permission tables, and can be created virtually on login; I've had a fair amount of success with this. See Writing an authentication backend if this appeals.
