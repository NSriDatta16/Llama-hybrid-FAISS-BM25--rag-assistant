[site]: stackoverflow
[post_id]: 755410
[parent_id]: 751688
[tags]: 
I was able to solve my problem in a slightly different way. Let me first recap what my situation is again: I have two droppable div objects that are very close to each other on the screen I have a draggable div, that does not have a unique ID. This draggable can be dropped on my droppables time and time again (i.e. it doesn't get consumed, if that makes any sense) When a draggable is on top of two droppables, currently the jquery behaviour is that the draggable will hit both droppables. This is an undesired effect for me. My expected behaviour: the draggable should fall on the first droppable only, and should not get triggered for any other subsequent droppable which is around. var tsArray = new Array(); $('.droppable').droppable({ drop : function() { for (var i = 0; i ev.timeStamp) { return; } } tsArray.length = 0; // Empty it for performance tsArray.push(ev.timeStamp); // Do any logic you require here }); The basic idea is that when a draggable is dropped on two droppables, the event timeStamp of each droppable event are very close to each other. They are milliseconds apart. I simply do a check to ensure that there is a substantial time difference between them.
