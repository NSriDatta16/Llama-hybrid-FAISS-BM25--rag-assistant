[site]: stackoverflow
[post_id]: 3960186
[parent_id]: 3958399
[tags]: 
Lucene stores its numeric stuff as a trie; a SQL implementation will probably store it as a b-tree or an r-tree. The way Lucene stores its trie and SQL uses an R-tree are pretty similar, and I would be surprised if you saw a huge difference (unless you leveraged some of the scalability that comes from Solr). As a general question of the performance of Lucene vs. SQL fulltext, a good study I've found is: Jing, Y., C. Zhang, and X. Wang. “An Empirical Study on Performance Comparison of Lucene and Relational Database.” In Communication Software and Networks, 2009. ICCSN'09. International Conference on, 336-340. IEEE, 2009. First, when executing exact query, the performance of Lucene is much better than that of unindexed-RDB, while is almost same as that of indexed-RDB. Second, when the wildcard query is a prefix query, then the indexed-RDB and Lucene both perform very well still by leveraging the index... Third, for combinational query, Lucene performs smoothly and usually costs little time, while the query time of RDB is related to the combinational search conditions and the number of indexed fields. If some fields in the combinational condition haven’t been indexed, search will cost much more time. Fourth, the query time of Lucene and unindexed-RDB has relations with the record complexity, but the indexed-RDB is nearly independent of it. In short, if you are doing a search like "select * where x = y", it doesn't matter which you use. The more clauses you add in (x = y OR (x = z AND y = x)...) the better Lucene becomes. They don't really mention this, but a huge advantage of Lucene is all the built-in functionality: stemming, query parsing etc.
