[site]: stackoverflow
[post_id]: 4579137
[parent_id]: 
[tags]: 
Is there an Objective-C algorithm like `transform` of the C++ STL?

My goal is to have an array that contains all filenames of a specific extension, but without the extension. There's an elegant solution to get all filenames of a specific extension using a predicate filter and instructions on how to split a path into filename and extension , but to combine them I would have to write a loop (not terrible, but not elegant either). Is there a way with Objective-C (may be similar to the predicate mechanism) to apply some function to every element of an array and put the results in a second array, like the transform algorithm of the C++ STL does? What I'd like to write: // let's pretend 'anArray' was filled by querying the filesystem and not hardcoded NSArray* anArray = [[NSArray alloc] initWithObjects:@"one.ext", @"two.ext", nil]; // that's what I liked to write (pseudo code) NSArray* transformed = [anArray transform: stringByDeletingPathExtension]; // Yuji's answer below proposes this (which may be as close as you can get // to my wish with Objective C) NSArray* transformed = [anArray my_arrayByApplyingBlock:^(id x){ return [x stringByDeletingPathExtension]; }];
