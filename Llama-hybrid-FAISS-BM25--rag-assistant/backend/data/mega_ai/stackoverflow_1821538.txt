[site]: stackoverflow
[post_id]: 1821538
[parent_id]: 1820411
[tags]: 
When declaring your field layout for the infragistics data grid, you can use UnboundField instead of Field. This class exposes the BindingPath and BindingMode properties for the underlying binding. Using this technique, you can get rid of the real time update and you shouldn't need a custom control template. My thoughts on moving logic to the VM: Create a one way binding of the grid's DataSource and the nViewModel.List. ApplyChanges can then call: BindingOperations.GetBindingExpressionBase(dependencyObject, dependencyProperty).UpdateTarget(); to force the target property DataSource to refresh. Unfortunately, this ties your VM to the binding but results in no code in your view. A big problem here is that if you have this delayed binding scenario, ApplyChanges is something that will really need some IoC into the View because only the View would know how to really do the update (be it using Bindings or whatever). In the end, something along the chain will be managing two instances of a list: the instance in the view and the actual instance in the VM. In this particular scenario, the delayed update seems to be a behavior of the View. However, the UpdateChanges command on the VM actually couples that behavior to the VM, in which case, I'd say it makes sense to store the two list instances in your VM. Hope this helps.
