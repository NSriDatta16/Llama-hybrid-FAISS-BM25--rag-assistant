[site]: stackoverflow
[post_id]: 2535719
[parent_id]: 2513312
[tags]: 
Thanks for the hint. This is what I ended up doing: .CPP file ------------------------ #include #include static std::stringstream buffer; static std::streambuf * savedBuffer = NULL; extern "C" __declspec(dllexport) bool Redirect() { if (savedBuffer) { return false; } std::streambuf * buf(std::cerr.rdbuf()); std::cerr.rdbuf(buffer.rdbuf()); // This two lines are for illustration purposes only! std::cerr .CS file ------------------------------------------ public static class Redirector { // PRIVATE ------------------------------------------------------------ private const String LibraryName = "MyCpp.dll"; [DllImport(LibraryName, CharSet = CharSet.Ansi)] private static extern IntPtr getCerr(); // PUBLIC ------------------------------------------------------------- [DllImport(LibraryName, CharSet = CharSet.Ansi)] public static extern bool Redirect(); [DllImport(LibraryName, CharSet = CharSet.Ansi)] public static extern void Revert(); [DllImport(LibraryName, CharSet = CharSet.Ansi)] internal static extern void freeCharPtr(IntPtr ptr); public static string GetCerr() { IntPtr temp = getCerr(); string result = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(temp); freeCharPtr(temp); return result; } } NUnit Test ----------------------- [Test] // [Ignore] public void TestRedirect() { Redirector.Redirect(); // Call more functions that output to std::cerr here. Redirector.Revert(); System.Console.WriteLine(Redirector.GetCerr()); } The freeCharPtr() stuff is necessary to free the allocated memory from _strdup(), since I could not work out (if it's even possible) how to marshal an std::string. Note: This is not thread safe!
