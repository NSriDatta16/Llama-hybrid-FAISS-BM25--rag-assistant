[site]: stackoverflow
[post_id]: 4086188
[parent_id]: 4086138
[tags]: 
String Constants Just use the + operator and break the string up into human-readable lines. The compiler will pick up that the strings are constant and concatenate them at compile time. See the MSDN C# Programming Guide here . e.g. const string myVeryLongString = "This is the opening paragraph of my long string. " + "Which is split over multiple lines to improve code readability, " + "but is in fact, just one long string."; IL_0003: ldstr "This is the opening paragraph of my long string. Which is split over multiple lines to improve code readability, but is in fact, just one long string." String Variables Note that when using string interpolation to substitute values into your string, that the $ character needs to precede each line where a substitution needs to be made: var interpolatedString = "This line has no substitutions. " + $" This line uses {count} widgets, and " + $" {CountFoos()} foos were found."; However, this has the negative performance consequence of multiple calls to string.Format and eventual concatenation of the strings (marked with *** ) IL_002E: ldstr "This line has no substitutions. " IL_0033: ldstr " This line uses {0} widgets, and " IL_0038: ldloc.0 // count IL_0039: box System.Int32 IL_003E: call System.String.Format *** IL_0043: ldstr " {0} foos were found." IL_0048: ldloc.1 // CountFoos IL_0049: callvirt System.Func .Invoke IL_004E: box System.Int32 IL_0053: call System.String.Format *** IL_0058: call System.String.Concat *** Although you could either use $@ to provide a single string and avoid the performance issues, unless the whitespace is placed inside {} (which looks odd, IMO), this has the same issue as Neil Knight's answer, as it will include any whitespace in the line breakdowns: var interpolatedString = $@"When breaking up strings with `@` it introduces The injected whitespace is easy to spot: IL_002E: ldstr "When breaking up strings with `@` it introduces An alternative is to revert to string.Format . Here, the formatting string is a single constant as per my initial answer: const string longFormatString = "This is the opening paragraph of my long string with {0} chars. " + "Which is split over multiple lines to improve code readability, " + "but is in fact, just one long string with {1} widgets."; And then evaluated as such: string.Format(longFormatString, longFormatString.Length, CountWidgets()); However this can still be tricky to maintain given the potential separation between the formatting string and the substitution tokens.
