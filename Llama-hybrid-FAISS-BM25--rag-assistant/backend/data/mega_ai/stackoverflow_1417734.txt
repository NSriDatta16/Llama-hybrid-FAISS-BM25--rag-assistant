[site]: stackoverflow
[post_id]: 1417734
[parent_id]: 1370385
[tags]: 
I have projects set up with aspectj-maven-plugin for compilation and using cobertura-maven-plugin for code coverage. For compile-time weaving this works fine when running mvn site , although the tests are compiled/run twice to allow for Cobertura weaving. Running mvn site with the configuration below results in the following output: [INFO] Preparing surefire-report:report [INFO] [aspectj:compile {execution: compile_with_aspectj}] ... [INFO] [compiler:compile] [INFO] Nothing to compile - all classes are up to date ... [INFO] [compiler:testCompile {execution: test-compile}] [INFO] Compiling 8 source files to C:\test\aop-test [INFO] [aspectj:test-compile {execution: test-compile_with_aspectj}] ... [INFO] [surefire:test] ... [INFO] Preparing cobertura:cobertura [INFO] [aspectj:compile {execution: compile_with_aspectj}] ... [INFO] [compiler:compile] [INFO] Nothing to compile - all classes are up to date [INFO] [cobertura:instrument] [INFO] Cobertura 1.8 - GNU GPL License (NO WARRANTY) - See COPYRIGHT file Instrumenting 11 files to C:\test\aop-test\generated-classes\cobertura Cobertura: Saved information on 11 classes. Instrument time: 250ms [INFO] Instrumentation was successful. [INFO] [compiler:testCompile {execution: test-compile}] [INFO] Nothing to compile - all classes are up to date [INFO] [aspectj:test-compile {execution: test-compile_with_aspectj}] ... [INFO] [surefire:test] ... Cobertura: Coverage data file C:\test\aop-test\cobertura.ser either does not exist or is not readable. Creating a new data file. Cobertura: Saved information on 8 classes. My configuration is included below. Regarding the Cobertura warnings of your aspects, one thing you can try is moving the body of advice execution to java types rather than defining it in the aspects. For example, rather than doing this: before(Throwable e, Object subject): handlers(e, subject) { Log logger = getTraceLog(subject.getClass()); //code to trace exception handling ... } Instead you can delegate the implementation to a Java type, so there is little code in the aspect to process: before(Throwable e, Object subject): handlers(e, subject) { Log logger = getTraceLog(subject.getClass()); //get helper type and delegate processing to that type. getFormatterHelper().traceErrorHandling(logger, thisJoinPoint, e); } My configuration for aspectj and cobertura plugins: ... org.codehaus.mojo aspectj-maven-plugin 1.2 compile_with_aspectj compile 1.5 test-compile_with_aspectj test-compile 1.5 aspectj aspectjtools 1.6.4 ... ... org.codehaus.mojo cobertura-maven-plugin 2.1 html xml target/site/cobertura
