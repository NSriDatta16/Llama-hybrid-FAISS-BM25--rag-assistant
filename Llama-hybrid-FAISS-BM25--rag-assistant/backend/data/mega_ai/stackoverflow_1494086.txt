[site]: stackoverflow
[post_id]: 1494086
[parent_id]: 1493003
[tags]: 
It is difficult to say whether AsyncTask will make things less verbose, since we don't know the verbosity of your current implementation. For me, AsyncTask means I don't have to worry about cleaning up threads myself (e.g., post some sort of kill job to a LinkedBlockingQueue my background thread is waiting on). It also eliminates the custom Job classes I used to create for using with LinkedBlockingQueues . And, it simplifies a bit doing final work back on the UI thread. In your case, with a remote service, the UI thread issue is less critical, since the activity needs to handle that itself. I don't see what the difference is between your #2 and your last paragraph. In both cases, your service will call the callback object, which will use something like runOnUiThread() to arrange for the work to be done on the UI thread. AFAIK, the only two ways to have a service doing any sort of asynchronous work let the client know that work is done is by a broadcast Intent or a callback object. Broadcast Intents are convenient but public (i.e., other code can watch for them). I suspect I probably have not helped much here, but I just don't know enough of your scenario to provide greater detail.
