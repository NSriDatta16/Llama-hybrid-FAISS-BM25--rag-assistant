[site]: stackoverflow
[post_id]: 3278284
[parent_id]: 3277840
[tags]: 
How do experienced Haskell developers name things, and organize them into modules, to avoid this type of situation? I've only worked with a few experienced Haskell developers, and they do awful stuff like data Foo a = Foo { foo_value :: a } data Bar a = Bar { bar_value :: a } or even data Apocalypse a = A { ap_value :: a } In general, I have the feeling that a lot of old-time Haskellers don't like qualified names and really want to pretend that the world has just one big name space, straight out of the dark ages. (There was a time that C compilers had the same restrictions on field names, which is why the mode in a struct stat is called st_mode and not just plain mode .) You can overload names with type classes, but the experienced developers I know don't like gratuitous type classes. I can never figure out when they think a type class will be gratuitous or not. I hope that one day Haskell people will come to terms with a hierarchical name space and will start using qualified names. As God intended.
