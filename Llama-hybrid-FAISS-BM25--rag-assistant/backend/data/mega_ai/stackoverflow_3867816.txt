[site]: stackoverflow
[post_id]: 3867816
[parent_id]: 3866369
[tags]: 
If things are really consistent, like textFirstName, you can use some built in functions. Mapper.Initialize(cfg => cfg.RecognizePrefixes(new[] { "text" })); Otherwise, you'll need to write your own INamingConvention class that looks something like this.. class DTONaming : INamingConvention { #region INamingConvention Members public string SeparatorCharacter { get { return string.Empty; } } public Regex SplittingExpression { get { return new Regex(""); } } #endregion } Then you can register that with automapper. Mapper.Initialize(cfg => cfg.SourceMemberNamingConvention = new DTONaming()); And AutoMapper will use this for any mappings, so if you need to restrict the registration of these prefixes or custom naming objects you may need to initialize and re-initialize it or something. I doubt the naming scheme would have consequences though. Edit With your recent additions you will be using a SourceMemberNameTransformer instead. This allows you to write a function that converts the names yourself. Mapper.Initialize(cfg => cfg.SourceMemberNameTransformer = ConvertNames); private static string ConvertNames(string inputString) { var sections = inputString.Split('_'); // transform the sections into w/e you need return inputString; }
