[site]: stackoverflow
[post_id]: 1394738
[parent_id]: 1374896
[tags]: 
Some textbooks define I as mere alias for ((S K) K) . In this case they are identical (as terms) per definitionem . To prove their equality (as functions), we need only to prove that equality is reflexive, which can be achieved by a reflexivity axiom scheme: Proposition `` E = E '' is deducible ( Reflexivity axiom scheme, instantiated for each possible terms denoted here by metavariable E ) Thus, I suppose in the followings, that Your questions investigates another approach: when combinator I is not defined as a mere alias for compound term ((S K) K) , but introduced as a standalone basic combinator constant on its own, whose operational semantics is declared explicitly by axiom scheme ``( I E ) = E '' is deducible ( I-axiom scheme) I suppose Your question asks whether we can deduce formally (remaining inside the system), that such a standalone-defined I behaves exactly as ((S K) K) , when used as functions in reductions? I think we can, but we must resort to stronger tools. I conjecture that the usual axiom schemes are not enough, we have to declare also the extensionality property (equality of functions), that's the main point. If we want to formalize extensionality as an axiom, we have to augment our object language with free variables . I think, we have to adopt such an approach for building combinatory logic, that we have to allow also the use of variables in the object langauge. Oof course, I mean "just" free valuables. Using bound variables would be cheating, we have to remain inside the realm of combinatory logic. Using free varaibles is not cheating, it's a honest tool. Thus, we can do the formal proof You required. Besides the straightforward equality axioms and rules of inference (transitivity, reflexivity, symmetry, Leibniz rules), we must add an extensionality rule of inference for equality. Here is the point where free variables matter. In Csörnyei 2007: 157-158, I have found the following approach. I think this way the proof can be done. Some remarks: Most of the axioms are in fact axiom schemes , consisting of infinitely many axiom instances. The instances must be instantiated for for every possible E , F , G terms. Here, I use italics for metavariables. The superficial infinite nature of axiom schemes won't raise computability problems, because they can be tackled in a finite time: our axiom system is recursive . It means that a clever parser can decide in a finite time (moreover, very effectively), whether a given proposition is an instance of an axiom scheme, or not. Thus, the usage of axiom schemes does not raise neither theoretical nor practical problems. Now let us seem our framework: Language ALPHABET Constants : The following three are called constants: K , S , I . I added the constant I only because Your question presupposes that we have not defined the combinator I as an mere alias/macro for compound term S K K , but it is a standalone constant on its own. I shall denote constants by boldface roman capitals. Sign of application : A sign @ of ``application'' is enough (prefix notation with arity 2). As syntactic sugar, I use here parantheses instead of the explicit application sign: I shall use the explicit both opening ( and closing ) signs. Variables : Although combinator logic does not make use of bound variables, scope etc, but we can introduce free variables. I suspect, they are not only syntactic sugar, they can strengthen the deduction system, too. I conjecture, that Your question will require their usage. Any enumerable infinite set (disjoint of the constants and parenthesis signs) will serve as the alphabet of variables, I will denote them here with unformatted roman lowercase letters x, y, z... TERMS Terms are defined inductively: Any constant is a term Any variable is a term If E is a term, and F is a term too, then also ( E F ) is a term I sometimes use practical conventions as syntactic sugar, e.g. write E F G H instead of ((( E F ) G ) H ). Deduction Conversion axiom schemes: `` K E F = E '' is deducible ( K-axiom scheme) `` S F G H = F H ( G H )'' is deducible ( S-axiom scheme) `` I E = E '' is deducible ( I-axiom scheme) I added the third conversion axiom ( I rule) only because Your question presupposes that we have not defined the combinator I as an alias/macro for S K K . Equality axiom schemes and rules of inference `` E = E '' is deducible ( Reflexivity axiom) If " E = F " is deducible, then " F = E " is also deducible ( Symmetry rule of inference) If " E = F " is deducible, and " F = G " is deducible too, then also " E = G " is reducible ( Transitivity rule) If " E = F " is deducible, then " E G = F G " is also deducible ( Leibniz rule I ) If " E = F " is deducible, then " G E = G F " is also deducible ( Leibniz rule II ) Question Now let us investigate Your question. I conjecture that the deduction system defined so far is not strong enough to prove Your question. Is proposition " I = S K K " deducible? The problem is, that we have to prove the equivalence of functions. We regard two functions equivalent if they behave the same way. Functions act so that they are applied to arguments. We should prove that both functions act the same way if applied to each possible arguments. Again, the problem with infinity! I suspect, axioms schemes can't help us here. Something like If E F = G F is deducible, then also E = G is deducible would fail to do the job: we can see that this does not yield what we want. Using it, we can prove that `` I E = S K K E '' is deducible for each E term instance, but these results are only separated instances of, and cannot be used as a whole for further deductions. We have only concrete results (infinitely many), not being able to summarize them: it holds for E := K holds for E := S it holds for E := K K . . . ... we cannot summarize these fragmented result instances into a single great result, stating extensionality! We cannot pour these low-value fragment into the funnel a rule of inference that would melt them together into a single more valuable result. We have to augment the power of our deduction system. We have to find a formal tool that can grasps the problem. Your questions leads to extensionality, and I think, declaring extensionality needs that we can pose propositions that hold for *****arbitrary***** instances. That's why I think we must allow free variables inside our object language. I conjecture that the following additional rule of inference will do the work: If variable x is not part of terms neither E nor F , and statement ( E x) = ( F x) is deducible, then E = F is also deducible ( Extensionality rule of inference) The hard thing in this axiom, easily leading to confusion: x is an object variables, fully emancipated and respected parts of our object language, while E and G are meta variables, not parts of the object language, but used only for a concise notation of axiom schemes. (Remark: More precisely, the extensionality rule of inference should be formalized in a more careful way, introducing a meta variable x over all possible object variables x, y, z..., and also another kind of meta variable E over all possible term instances . But this distinction among the two kinds of metavariables plus the object variables is not so didactic here, it does not affect Your question too much.) Proof Let us prove now the proposition that `` I = S K K ''. Steps for left-hand side: proposition `` I x = x'' is an instance of I-axiom scheme with instatiation [ E := x] Steps for right-hand side: Proposition " S K K x = K x ( K x)" is an instance of S-axiom scheme with instantiations [ E := K , F := K , G := x], thus it is deducible Proposition " K x ( K x) = x" is an instance of K-axiom scheme with instantiations [ E := x, F := K x], thus it is deducible Transitivity of equality: Statement " S K K x = K x ( K x)" matches the first premise of transitivity rule of inference, and statement " K x ( K x) = x" matches the second premise of this rule of inference. The instantiations are [ E := S K K x, F := K x ( K x), G = x]. Thus the conclusion holds too: E = G . Rewriting the conclusion with the same instantiations, we get statement " S K K x = x", thus, this is deducible. Symmetry of equality: Using " S K K x = x", we can infer "x = S K K x" Transitivity of equality: Using " I x = x" and "x = S K K x", we can infer " I x = S K K x" Now we have paved the way for the crucial point: Proposition " I x = S K K x" matches with the first premise of Extension rule of inference: ( E x) = ( F x), with instantiations [ E := I , F := S K K ]. Thus the conclusion must also hold, that is, " E = F " with the same instantiations ([ E := I , F := S K K ]), yielding proposition " I = S K K ", quod erat demonstrandum. Csörnyei, Zoltán (2007): Lambda-kalkulus. A funkcionális programozás alapjai. Budapest: Typotex. ISBN-978-963-9664-46-3.
