[site]: stackoverflow
[post_id]: 4150288
[parent_id]: 
[tags]: 
Preferred method for Materialized Views (Summary Tables) with MySQL

I am developing a project at work for which I need to create and maintain Summary Tables for performance reasons. I believe the correct term for this is Materialized Views . I have 2 main reasons to do this: Denormalization I normalized the tables as much as possible. So there are situations where I would have to join many tables to pull data. We work with MySQL Cluster, which has pretty poor performance when it comes to JOIN's. So I need to create Denormalized Tables that can run faster SELECT's. Summarize Data For example, I have a Transactions table with a few million records. The transactions come from different websites. The application needs to generate a report will display the daily or monthly transaction counts, and total revenue amounts per website. I don't want the report script to calculate this every time, so I need to generate a Summary Table that will have a breakdown by [site,date]. That is just one simple example. There are many different kinds of summary tables I need to generate and maintain. In the past I have done these things by writing several cron scripts to keep each summary table updated. But in this new project, I am hoping to implement a more elegant and proper solution. I would prefer a PHP based solution, as I am not a server administrator, and I feel the most comfortable when I can control everything through my application code. Solutions that I have considered: Copying VIEW's If the resulting table can be represented as a single SELECT query, I can generate a VIEW. Since they are slow, there can be a cronjob that copies this VIEW into a real table. However, some of these SELECT queries can be so slow that it's not acceptable even for cronjobs. It is not very efficient to recreate the whole summary data, if older rows are not even being updated much. Custom Cronjobs for each Summary Table This is the solution I have used before, but now I am trying to avoid it if possible. If there will be many summary tables, it can be messy to maintain. MySQL Triggers It is possible to add triggers to the main tables so that every time there is an INSERT, UPDATE or DELETE, the summary tables get updated accordingly. There would be no cronjobs and the summaries would be in real time. However if there is ever a need to rebuild a summary table from scratch, it would have to be done with another solution (probably #1 above). Using ORM Hooks/Triggers I am using Doctrine as my ORM. There is a way to add event listeners that will trigger stuff on INSERT/UPDATE/DELETE, which in turn can update the summary tables. In a sense this solution is similar to #3 above, but I will have better control over these triggers since they will be implemented in PHP. Implementation Considerations: Complete Rebuilds I want to avoid having to rebuild the summary tables, for efficiency, and only update for new data. But in case something goes wrong, I need the capability to rebuild the summary table from scratch using existing data on the main tables. Ignoring UPDATE/DELETE on Old Data Some summaries can assume that older records will never be updated or deleted, but only new records will be inserted. The summary process can save a lot of work by making the assumption that it doesn't need to check for updates on older data. But of course this won't apply to all tables. Keeping a Log Let's assume that I won't have access to, or do not want to use the binary MySQL logs. For summarizing new data, the summary process just needs to remember the last primary key id's for the last records it summarized. Next time it runs, it can summarize everything after that id. However, to keep track of older records that have been updated/deleted, it needs another log so it can go back and re-summarize that data. I would appreciate any kind of strategies, suggestions or links that can help. Thank you!
