[site]: stackoverflow
[post_id]: 1279099
[parent_id]: 1276638
[tags]: 
I prefer the startIndex , endIndex variant ( substring ) because String.substring() operates the same way in Java and I feel it makes me more efficient to stick to the same concepts in whatever language I use most often (when possible). If I were doing more C# work, I might use the other variant more because that is how String.Substring() works in C#. To answer your comment about JavaScript having both, it looks like substr() was added to browsers after substring() ( reference - it seems that although substr() was part of JavaScript 1.0, most browser vendors didn't implement it until later). This suggests to me that even the implementers of the early language recognized the duplication of functionality. I'd suggest substring() came first in an attempt to leverage the Java Script trademark. Regardless, it seems that they recognized this duplication in ECMA-262 and took some small steps toward removing it: substring() : ECMA Version: ECMA-262 substr() : ECMA Version: None, although ECMA-262 ed. 3 has a non-normative section suggesting uniform semantics for substr Personally I wouldn't mind a substring() where the second parameter can be negative, which would return the characters between the first parameter and the length of the string minus the second parameter. Of course you can already achieve that more explicitly and I imagine the design would be confusing to many developers: String s1 = "The quick brown fox jumps over the lazy dog"; String s2 = s1.substring(20, -13); // "jumps over"
