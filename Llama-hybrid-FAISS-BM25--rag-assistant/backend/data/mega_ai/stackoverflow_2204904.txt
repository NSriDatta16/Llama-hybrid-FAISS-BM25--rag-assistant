[site]: stackoverflow
[post_id]: 2204904
[parent_id]: 2204807
[tags]: 
A model can be anything that stores the data. In the web app I'm working on there are several tables for contacts, their addresses which groups they belong to and so on. It's probably best to split them up by types, I should have made a group model but you don't strictly have to do this. MVC relates to 3d games quite well, MVC is not only for information systems. Consider this: In 3d graphics the model is map, the polygons and their positions and colours. The view is the camera from which the scene is viewed, a position, zoom and direction. The controller interprets the keyboard and mouse and manipulates both the camera(view) and scene(model). If this were a shooter game then if: A user pushes the forward button, the controller moves the camera forward. A user pushes the throw grenade button, controller adds a grenade to the scene. The view is presentation, the model is storage/structure and the controller is an in between which tells the view what to display and how to display it based on the state of the system. Generally you put all the formatting in a view, data in models and logic into controllers.
