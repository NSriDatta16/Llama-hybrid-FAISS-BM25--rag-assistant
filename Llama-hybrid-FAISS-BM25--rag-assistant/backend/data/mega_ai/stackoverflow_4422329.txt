[site]: stackoverflow
[post_id]: 4422329
[parent_id]: 4411172
[tags]: 
Before beginning, I want to clarify that the answer provided by Hans Passant already explains exactly the same thing I am about to. So, if you find this helpful, you should upvote his answer. However, it seems from the comment exchange that you aren't quite understanding what he's trying to say. Perhaps I can do a little better job explaining it, and maybe you'll have an easier time if understanding what's going on if you saw precisely what you had to change in your code. Let's start out by assessing the current situation: Your textbox that is part of userControl11 changes color properly when the user starts dragging the trackbar. However, the second textbox that is part of Form1 does not turn back to white after you finish dragging the trackbar. Your user control already raises two custom events StartDrag and EndDrag , with names that obviously indicate the current state. In Form1 , you're handling the user control's StartDrag event and changing the color of the second textbox to red. But, instead of handling the EndDrag event to change the color back to white, you're handling the MouseUp event. This is why it's not working, and what Hans's answer was trying to tell you. Instead, your form's code should look like this: public partial class Form1 : Form { public Form1() { InitializeComponent(); this.userControl11.EndDrag += new MyTrackbar.UserControl1.EndDragHandler(this.userControl11_EndDrag); } private void userControl11_StartDrag() { // Works textBox1.BackColor = Color.Red; } private void userControl11_EndDrag() { // Now also works! textBox1.BackColor = Color.White; } } You already understand that you need to handle the custom StartDrag event that you've raised, so it seems simple enough that you'd also need to handle the EndDrag event to achieve the desired effect. But then, you might ask, "Why does the MouseUp event work inside of the user control, but not work inside of the form?!?" I assume this is what you're trying to argue is a bug in the .NET Framework. (Hint: It's far less likely that any of us will discover a true bug in the Framework than one of us is confused about why we're seeing the behavior that we are, or simply missing something obvious.) The reason is because, inside the user control, you're handling the MouseUp event raised by the trackbar control ( trackBar1 ). But that event does not propagate upwards. Just because the trackbar control raises the MouseUp event does not mean that the user control that contains it raises the same event. You seem to already know that with regards to the MouseDown event, and it's exactly the same thing with the MouseUp event. No need to file a bug report with Microsoft, and no need for anyone to get their feelings hurt.
