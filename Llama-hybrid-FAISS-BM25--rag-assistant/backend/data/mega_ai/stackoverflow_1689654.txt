[site]: stackoverflow
[post_id]: 1689654
[parent_id]: 1668098
[tags]: 
This may be a bit oversimplified so far as actual math, but meant as an intuitive guide to Runge Kutta integration. Given some quantity at some time t1 , we want to know the quantity at another time t2 . With a first-order differential equation, we can know the rate of change of that quantity at t1 . There is nothing else we can know for sure; the rest is guessing. Euler integration is the simplest way to guess: linearly extrapolate from t1 to t2, using the precisely known rate of change at t1 . This usually gives a bad answer. If t2 is far from t1, this linear extrapolation will fail to match any curvature in the ideal answer. If we take many small steps from t1 to t2 , we'll have the problem of subtraction of similar values. Roundoff errors will ruin the result. So we refine our guess. One way is to go ahead and do this linear extrapolation anyway, then hoping it's not too far off from truth, use the differential equation to compute an estimate of the rate of change at t2 . This, averaged with the (accurate) rate of change at t1 , better represents the typical slope of the true answer between t1 and t2 . We use this to make a fresh linear extrapolation from to t1 to t2 . It's not obvious if we should take the simple average, or give more weight to the rate at t1 , without doing the math to estimate errors, but there is a choice here. In any case, it's a better answer than Euler gives. Perhaps better, make our initial linear extrapolation to a point in time midway between t1 and t2 , and use the differential equation to compute the rate of change there. This gives roughly as good an answer as the average just described. Then use this for a linear extrapolation from t1 to t2 , since our purpose it to find the quantity at t2 . This is the midpoint algorithm. You can imagine using the mid-point estimate of the rate of change to make another linear extrapolation of the quantity from t1 to the midpoint. With the differential equation we get an better estimate of the slope there. Using this, we end by extrapolating from t1 all the way to t2 where we want an answer. This is the Runge Kutta algorithm. Could we do a third extrapolation to the midpoint? Sure, it's not illegal, but detailed analysis shows diminishing improvement, such that other sources of error dominate the final result. Runge Kutta applies the differential equation to the intial point t1, twice to the midpoint, and once at the final point t2. The in-between points are a matter of choice. It is possible to use other points between t1 and t2 for making those improved estimates of the slope. For example, we could use t1 , a point one third the way toward t2, another 2/3 the way toward t2 , and at t2 . The weights for the average of the four derivatives will be different. In practice this doesn't really help, but might have a place in testing since it ought to give the same answer but will provide a different set of round off errors.
