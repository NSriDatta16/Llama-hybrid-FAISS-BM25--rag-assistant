[site]: stackoverflow
[post_id]: 1354669
[parent_id]: 1354537
[tags]: 
Actually, you can do nearly all you want. In C language (unlike C++, for example), the functions in shared objects are referenced merely by their names. So, to find--and, what is most important, to call --the proper function, you don't need its full signature. You only need its name! It's both an advantage and disadvantage --but that's the nature of a language you chose. Let me demonstrate, how it works. #include typedef void* (*arbitrary)(); // do not mix this with typedef void* (*arbitrary)(void); !!! int main() { arbitrary my_function; // Introduce already loaded functions to runtime linker's space void* handle = dlopen(0,RTLD_NOW|RTLD_GLOBAL); // Load the function to our pointer, which doesn't know how many arguments there sould be *(void**)(&my_function) = dlsym(handle,"something"); // Call something via my_function (void) my_function("I accept a string and an integer!\n",(int)(2*2)); return 0; } In fact, you can call any function that way. However, there's one drawback. You actually need to know the return type of your function in compile time . By default, if you omit void* in that typedef, int is assumed as return type--and, yes, it's a correct C code. The thing is that the compiler needs to know the size of the return type to operate the stack properly. You can workaround it by tricks, for example, by pre-declaring several function types with different sizes of return types in advance and then selecting which one you actually are going to call. But the easier solution is to require functions in your plugin to return void* or int always; the actual result being returned via pointers given as arguments. What you must ensure is that you always call the function with the exact number and types of arguments it's supposed to accept. Pay closer attention to difference between different integer types (your best option would be to explicitly cast arguments to them). Several commenters reported that the code above is not guaranteed to work for variadic functions (such as printf ).
