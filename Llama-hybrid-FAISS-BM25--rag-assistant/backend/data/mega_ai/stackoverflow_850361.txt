[site]: stackoverflow
[post_id]: 850361
[parent_id]: 850096
[tags]: 
As Tormod suggested, the preferable methods would be changing the collection to an ObservableCollection, or implementing INotifyCollectionChanged in the collection would take care of refreshing the UI. However, if those options aren't available, then you can 'force' a refresh by using INotifyPropertyChanged in whatever class contains the collection. We then will be treating the list just like a regular property, and using the setter to notify on changes. To do this it requires re-assigning the reference, which is why using something like an ObservableCollection is preferred, as well as raising the PropertyChanged event. Here is a quick sample showing how this can be done with just a standard generic List: public partial class Window1 : Window, INotifyPropertyChanged { public Window1() { InitializeComponent(); this.Names = new List () { "Mike", "Robert" }; this.DataContext = this; } private IList myNames; public IList Names { get { return this.myNames; } set { this.myNames = value; this.NotifyPropertyChanged("Names"); } } private void OnAddName(object sender, RoutedEventArgs e) { Names.Add("Kevin"); Names = Names.ToList(); } public event PropertyChangedEventHandler PropertyChanged; private void NotifyPropertyChanged(String info) { if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(info)); } } } Xaml:
