[site]: stackoverflow
[post_id]: 692836
[parent_id]: 689436
[tags]: 
Here's how I would handle it: class Person { string Name { get; set; } IList Roles { get; private set; } } class Role { string Name { get; set; } string Description { get; set; } IList Members { get; private set; } } class Project { string Name { get; set; } string Description { get; set; } IList Members { get; private set; } } class ProjectMember { Project Project { get; private set; } Person Person { get; set; } Role Role { get; set; } } The ProjectMember class brings them all together. This model gives you the flexibility to assign the same Person to different Projects with different Roles (e.g. he might be a Developer on ProjectA, and a Tester on ProjectB). Please don't create role specific classes - that lesson has been learnt already. I've created a sample app to demonstrate this (it includes relationships too): Run " bin\debug\RolesRelationshipsSample.exe " Double-click the library icons to create entities Drag/drop them to assign the appropriate relationships Feel free to play with the code. Hope you find it useful.
