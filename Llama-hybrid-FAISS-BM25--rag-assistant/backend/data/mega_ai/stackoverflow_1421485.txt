[site]: stackoverflow
[post_id]: 1421485
[parent_id]: 
[tags]: 
template class, implementation code causing linking issues

I currently have a program where my main code is in a file main.cpp. Main.cpp includes a header file "class.h" that declares a class that is used within main.cpp. Also in main.cpp I have function declarations that declare the functions I use within main.cpp. The code for these functions is in a separate .cpp file fucntions.cpp. Like main.cpp, functions.cpp also includes class.h as the class type is used within the functions. class.h contains the class declaration only. The implementation code for class.h is in a separate .cpp file classimplementation.cpp. It all works fine until I try to make the class in class.h a template class. Then I get linking problems. Research and testing has shown me that this is because the definition of the template class functions needs to reside in class.h with the declaration. I therefore took the required code out of classimplementations.cpp and put it into class.h. This did solve my original linking issues but instead I get more linking errors that seem to be telling me I am trying to redefine the functions that I moved to into class.h. This I think is because class.h is being called by main.cpp and again by functions.cpp. Therefore the functions in class.h are being defined twice: Error 41 error LNK2005: "public: __thiscall RecordPocket::RecordPocket(int)" (??0?$RecordPocket@VT@@@@QAE@H@Z) already defined in classimplementation.obj functions.obj I know that class implementation code should really be kept out of include files but due to the template class limitation of having to keep the class functions local I appear (in my novice mind) to have no choice. Has anyone been in this scenario and can offer any advice. I have tried surrounding the functions I moved from classimplementation.cpp to class.h with the standard ifndef CLASSIMP , #define CLASSIMP code and PRAGMA ONCE but neither make any difference. If all else fails I will move the functions from functions.cpp into main.cpp so that class.h gets called just the once but I’d rather find out what I’m doing wrong as I’m sure it will happen again.
