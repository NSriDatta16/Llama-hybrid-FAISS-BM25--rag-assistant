[site]: stackoverflow
[post_id]: 5715077
[parent_id]: 
[tags]: 
Good practices for leveled debugging and error handling

For debugging my code (low-level problem) I would like to use different levels of debugging, in order to vary how hard my code might reject certain things. So far I have always been using something like this: enum error_level { el_neglegable = 0, el_notable_to_log = 10, el_notable_to_print = 100, el_terminate_program = 1000, /* you can fragment the levels even more, of course */ }; void inline process_error( error_level error ) { if( error >= el_notable_to_print ) printf("A notable error has occured!\n"); if( error >= el_terminate_program ) exit(); /* you can build in more queries like this, of course */ } This is only a variation of the theme, but now you have a picture of what I mean. I would like to learn about better practices to employ different levels of debugging, depending on how much I want to remove errors from my program. Question: Do know you good guidelines, practices and the like, in order to achieve a code that is more maintainable and allows for such a debugging model?
