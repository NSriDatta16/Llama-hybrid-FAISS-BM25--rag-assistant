[site]: stackoverflow
[post_id]: 5480755
[parent_id]: 5480579
[tags]: 
cookies There are a number of limitations to data storage in cookies that are going to make them less than ideal as a caching solution and probably not worth the effort: Cookies are limited in number and size per domain. For example in IE , each cookie is limited to 4kb and a there can be a maximum of 20 cookies per domain. Cookies get sent to the server with every request. If you are storing 80kb of data in cookies that will make every request (including requests that are for non-dynamic resources on the same host) quite large. Cookies are per-user (see below) $_SESSION Caching data in the $_SESSION is much more reasonable since the only increase in back-and-forth traffic is the single small session-id cookie header. The big downside with caching in the $_SESSION array is that the session-data is separate for each client. With your other caching back-ends (APC, Memcache, etc), data is shared and available for requests from every client. The issue this raises is that with per-client session caches, there is no easy way to clear or update a value from other clients' session-data, resulting in stale caches. Conclusion While per-client caches are reasonable things generally, the difference in operation model between them and the other shared-storage cache back-ends you mention (APC, memcache, etc) mean that many applications that are expecting a shared-storage cache will likely break when presented with a per-client cache. Both types of cache have their place, but confusing which type is being used can be a recipe for problems. Personally, I would skip session data and cookies as caching backends unless you specifically are building a per-client caching system. In that case I would skip on cookies and just implement session storage.
