[site]: stackoverflow
[post_id]: 2219335
[parent_id]: 2218743
[tags]: 
Your description is very interesting, and your suspicion -- that pre-optimizing by making the ThreeDPoint class immutable has ruined your performance -- sounds correct. You're basically substituting changing the guts of an object (mutable) with swapping the entire object out, and assuming that the gc and runtime will like that better. As you said, the instantiations and gc calls are what's gumming up the works now. So you've got only a few possibilities: You're holding onto some references somewhere, or creating way more of these objects than you want, and that is killing your performance By reducing the number of times the gc fires, you might be able to help your performance. I doubt this, but at least you can try it out . The mutable design was better. Not in theory, but the Flash engine sees it that way. If this problem is really interesting to you, reduce it to its core elements (mutable vs. unmutable, lots of object creations vs. mutation) and demonstrate your hunches in some test runs. Then post the results back here so we can all be smarter. My guess : it's a clear case of trying to do favors for the Flash Engine that are not helpful. Edit: Reading your first paragraph better I realize that you're doing it for design reasons in your program. If that is the case, unfortunately real-time programming is where OO design meets up with the harsh reality of the runtime engine.
