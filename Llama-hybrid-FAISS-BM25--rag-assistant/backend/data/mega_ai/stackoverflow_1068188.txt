[site]: stackoverflow
[post_id]: 1068188
[parent_id]: 1066544
[tags]: 
A controller- or mediator-class are often used in applications, but this has a little "smell" to me. Such classes can fast become so-called "God-classes" which know everything, when all other classes are just data-containers. This kind of design is warned against! There is a good book about OO-Design which includes this warning and other really good principles. I can also recommend for OO-Design in general the articles of "Uncle Bob" Robert C. Martin . You should look in "Design Principles" and here specially the first articles. Those are invaluable ressources to understand, how Classes should be designed -- I think also decoupling by eventing and other things is handled there. With this armament, you will be much better prepared for the design. Your design could also be started by thinking, what activities should be done by which objects. Objects which tent to collect all activities are smelling like God-classes -- avoid them! Objects which tent to have no activities at all are smelling as not needed at all -- the boxes "World" and "Game" are somewhat smelling in this direction unless they really carry some functionality that no other object can carry. When you create some thoughts, how the world is working -- the design might be very easy. Such thinking like the "Environment" as an association can be made here. But also different modelling is possible. How about this (Just a guess!): Why must your rooms be objects alltogether? You could also have a World-Object that just contains a 2D-Array with slots for the objects contained in the room (including the user-object??). This could ease things up, when you have a big "World". But of course, rooms as objects have the advantage, that unlimited objects (Enemies, users, Items) can be contained in them easily. So first, you might begin thinking about that, then if you have an Item class or a "Takeable" class ... and so on. Hope this helps a little bit -- don't hesitate to ask.
