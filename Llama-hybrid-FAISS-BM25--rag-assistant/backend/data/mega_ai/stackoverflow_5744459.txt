[site]: stackoverflow
[post_id]: 5744459
[parent_id]: 5729850
[tags]: 
I'm going to improve my code with the help of @Sven, @Henry and @Robert. @Sven answered the question, so he earns the reputation for this question, but - as highlighted by him and others -there is a more efficient way of doing what I want. This involves using a python list, which allows appending with a performance penalty of O(1) whereas numpy.append() has a performance penalty of O(N**2) . Afterwards, the list is converted to a numpy array: Suppose i is either of type a or b : > a = np.arange(27).reshape(3,9) > b = np.arange(9) > a.shape (3, 9) > b.shape (9,) Initialise list and append all read data, e.g. if data appear in order 'aaba'. > mList = [] > for i in [a,a,b,a]: mList.append(i) Your mList will look like this: > mList [array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8], [ 9, 10, 11, 12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24, 25, 26]]), array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8], [ 9, 10, 11, 12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24, 25, 26]]), array([0, 1, 2, 3, 4, 5, 6, 7, 8]), array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8], [ 9, 10, 11, 12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24, 25, 26]])] finally, vstack the list to form a numpy array: > result = np.vstack(mList[:]) > result.shape (10, 9) Thanks again for valuable help.
