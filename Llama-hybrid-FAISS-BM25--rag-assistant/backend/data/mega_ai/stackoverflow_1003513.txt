[site]: stackoverflow
[post_id]: 1003513
[parent_id]: 1003338
[tags]: 
A lot of these guidelines speak to the "quality attributes" of good software design (i.e. maintainability, reliability, reusability, testability, expandability, debugability, interoperability, and what other -ilities you can name). Often people create code that works fine at the time but may not be the best choice when considering all the quality attributes (in the sense of "where can this software go in the future " or "someone else has to use this code, too"). For example: 2.29 Avoid using the ternary conditional operator I have no problem with ternary expressions, per se , but by writing code such as: int result = CheckMethod() ? OnTrueDoThis() : OnFalseDoThat() ... you are saying, "I have a conditional that, if true (or false), you can do one and only one thing ." The whole construct discourages expandability . You have to recreate the construct (with an if..else statement). Similarly... 2.31 Avoid function calls in Boolean conditional statements. Assign into local variables and check on them. You called a function and essentially "discarded" the results for later use. If that information is needed later, either the function would have to be called again or the structure of the code would have to be rewritten. It would also make checking or logging the results (for future debugging) more difficult.
