[site]: stackoverflow
[post_id]: 1484231
[parent_id]: 1484168
[tags]: 
Do you see the mouseMoved method being invoked at all? The way this is written, the mouseMoved method is a member of PaintSurface, but PaintSurface is not a MouseMotionListener. Implementing 'MouseMotionListener' will force it to implement mouseMoved and mouseDragged . After you have done that, you can add your PaintSurface to itself as a MouseMotionListener . Alternatively, you could move the mouseMoved method inside the MouseMotionAdapter anonymous class that you have already defined: //paintSurface constructor .... this.addMouseMotionListener(new MouseMotionAdapter() { public void mouseDragged(MouseEvent e) { endDrag = new Point(e.getX(), e.getY()); repaint(); }//end mouseDragged //TRY THIS CODE :-) public void mouseMoved(MouseEvent e) { startDrag = new Point(e.getX(), e.getY()); if (triangles.contains(startDrag)) setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR)); else setCursor(Cursor.getDefaultCursor()); }// end mouseMoved });//end this.addMouseMotionListener }//end paintSurface EDIT (in response to your comment): It would appear that your conditional if (triangles.contains(startDrag)) depends on the List finding a Point that considers itself equal to the passed in Point . As far as I can tell from looking at the code in Polygon (it doesnt override the equals method, so it takes the implementation from Object ), you will not be able to perform this test 'successfully.' You will need to iterate over your Polygon s in your triangles collection and perform a contains operation on each in turn. EDIT 2: You are probably over-thinking this a bit. In order to implement the suggestion 'to iterate over your Polygon s in your triangles collection...' you could do something like the following: public void mouseMoved(MouseEvent e) { startDrag = new Point(e.getX(), e.getY()); Cursor cursor = Cursor.getDefaultCursor(); //you have a List , so you can use this enhanced for loop for (Polygon p : triangles) { if (p.contains(startDrag)) {//Polygon has a 'contains(Point)' method cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR); break; //you've found a hit, break from the loop } } setCursor(cursor); }// end mouseMoved You could also consider not setting the cursor with every mouse movement. For that, you can put a test in to check the type of the current cursor and the type of the cursor that your mouse movement is intending to set, and only set it if there is a change: if (cursor.getType() != getCursor().getType()) { setCursor(cursor); }
