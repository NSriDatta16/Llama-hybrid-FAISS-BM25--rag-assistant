[site]: stackoverflow
[post_id]: 1641152
[parent_id]: 1640472
[tags]: 
As a XML splitter, VTD-XML is ideally suited for this task... it is also more memory efficient than DOM. The key method that simplify coding is VTDNav's getElementFragment()... below is the Java code for split input.xml into out0.xml and out1.xml text1 text2 into text1 and text2 using XPath /a/b The code import java.io.*; import com.ximpleware.*; public class split { public static void main(String[] argv) throws Exception{ VTDGen vg = new VTDGen(); if (vg.parseFile("c:/split/input.xml", true)){ VTDNav vn = vg.getNav(); AutoPilot ap = new AutoPilot(vn); ap.selectXPath("/a/b"); int i=-1,k=0; byte[] ba = vn.getXML().getBytes(); while((i=ap.evalXPath())!=-1){ FileOutputStream fos = new FileOutputStream("c:/split/out"+k+".xml"); fos.write(" ".getBytes()); long l = vn.getElementFragment(); fos.write(ba, (int)l, (int)(l>>32)); fos.write(" ".getBytes()); k++; } } } } For further reading, please visit http://www.devx.com/xml/Article/36379
