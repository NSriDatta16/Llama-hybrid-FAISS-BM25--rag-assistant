[site]: stackoverflow
[post_id]: 477224
[parent_id]: 476959
[tags]: 
If you are looking for confidence, the alternative to proving programs is testing them. This is easier to understand and can be automated. It also allows for the class of programs for which proofs are mathematically not possible, as described above. Above all, no proof is a substitute for passing acceptance tests:* Just because a program really does do what it says it does, doesn't mean it does what the user wants it to do. Unless you can prove that what it says it does is what the user says they want. Which you then have to prove is what they really want , because, being a user, they almost certainly don't know what they want. etc. Reductio ad absurdum. *not to mention unit, coverage, functional, integration and all the other kinds of tests. Hope this helps you on your path.
