[site]: stackoverflow
[post_id]: 4097126
[parent_id]: 
[tags]: 
T-SQL Is a sub query for an Update restriction Atomic with the update?

I've got a simple queue implementation in MS Sql Server 2008 R2. Here's the essense of the queue: CREATE TABLE ToBeProcessed ( Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, [Priority] INT DEFAULT(100) NOT NULL, IsBeingProcessed BIT default (0) NOT NULL, SomeData nvarchar(MAX) NOT null ) I want to atomically select the top n rows ordered by the priority and the id where IsBeingProcessed is false and update those rows to say they are being processed. I thought I'd use a combination of Update, Top, Output and Order By but unfortunately you can't use top and order by in an Update statement. So I've made an in clause to restrict the update and that sub query does the order by (see below). My question is, is this whole statement atomic, or do I need to wrap it in a transaction? DECLARE @numberToProcess INT = 2 CREATE TABLE #IdsToProcess ( Id BIGINT NOT null ) UPDATE ToBeProcessed SET ToBeProcessed.IsBeingProcessed = 1 OUTPUT INSERTED.Id INTO #IdsToProcess WHERE ToBeProcessed.Id IN ( SELECT TOP(@numberToProcess) ToBeProcessed.Id FROM ToBeProcessed WHERE ToBeProcessed.IsBeingProcessed = 0 ORDER BY ToBeProcessed.Id, ToBeProcessed.Priority DESC) SELECT * FROM #IdsToProcess DROP TABLE #IdsToProcess Here's some sql to insert some dummy rows: INSERT INTO ToBeProcessed (SomeData) VALUES (N''); INSERT INTO ToBeProcessed (SomeData) VALUES (N''); INSERT INTO ToBeProcessed (SomeData) VALUES (N''); INSERT INTO ToBeProcessed (SomeData) VALUES (N''); INSERT INTO ToBeProcessed (SomeData) VALUES (N'');
