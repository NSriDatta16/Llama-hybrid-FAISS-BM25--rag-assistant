[site]: stackoverflow
[post_id]: 4233803
[parent_id]: 4233338
[tags]: 
This isn't pretty and may not be as reliable as you wish, but you could loop (or better, use a timer event?) calling the Windows EnumWindows function looking for title bars that match what you'd expect Excel to show for this file. (Obviously, this is an Excel-specific solution.) For example, look for a title bar that contains the word "Excel" and your file name, which is what Excel shows in the title bar. There may be holes in this approach that make it fragile. In fact, I'm a bit hesitant to post this since I don't think the solution is particularly robust. However, if you have no other way to solve your problem, this might work... Google "EnumWindows Delphi" for sample code. ... on further thought,below is another way. As Jeroen noted, you could use an API to Excel. If you're doing a lot of these calls, then put the CreateOLEObject and unAssigned assignment outside the function might make it less heavy. (And you'll need some try...except blocks in case Excel is no longer running, etc.) This solution, too, is Excel-specific and clumsy, IMO. I don't know if there might be circumstances (like a File, Dialog box open in Excel?) that would cause this to return erroneous result. So, basically, I'm saying, here are two relatively weak approaches that are specific to Excel and may not always work. (When I say it that way, I'd almost rather just delete this entire post... But, maybe it'll give you some ideas on how you want to proceed.) This code is not tested, but similar code has worked for me in the past: uses ComObj; function FindWorkbook( Workbookname: String):boolean; var ExcelOLE: Variant; WorkbookNumber: Integer; begin Result := FALSE; ExcelOLE := CreateOLEObject('Excel.Application'); try for WorkbookNumber := 1 to ExcelOLE.Workbooks.Count do if UpperCase(WorkbookName) = UpperCase(ExcelOLE.Workbooks[WorkbookNumber].Name) then Result := TRUE; finally ExcelOLE := unAssigned; end; end;
