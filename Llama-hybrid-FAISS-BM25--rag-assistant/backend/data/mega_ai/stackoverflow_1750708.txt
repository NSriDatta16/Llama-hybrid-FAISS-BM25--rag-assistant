[site]: stackoverflow
[post_id]: 1750708
[parent_id]: 1750343
[tags]: 
If the patterns are fairly random, you can precompute the location of n-prefixes of strings. Instead of going over all options for n-prefixes, just use the actual ones in the 1GB string - there will be less than 1Gig of those. Use as big a prefix as fits in your memory, I don't have 16GB RAM to check but a prefix of 4 could work (at least in a memory-efficient data structures), if not try 3 or even 2. For a random 1GB string and random 1KB patterns, you should get a few 10s of locations per prefix if you use 3-byte prefixes, but 4-byte prefixes should get you an average of 0 or 1 , so lookup should be fast. Precompute Locations def find_all(pattern, string): cur_loc = 0 while True: next_loc = string.find(pattern, cur_loc) if next_loc Look up a pattern def find_pattern(pattern): prefix = pattern[:PREFIX_SIZE] # optimization - big prefixes will result in many misses if prefix not in precomputed_indices: return -1 for loc in precomputed_indices[prefix]: if big_string[loc:loc+CHUNK_SIZE] == pattern: return loc return -1
