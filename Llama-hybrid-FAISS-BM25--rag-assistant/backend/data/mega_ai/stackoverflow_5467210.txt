[site]: stackoverflow
[post_id]: 5467210
[parent_id]: 5467160
[tags]: 
It's worth considering whether the style of client usage can usefully be improved using the additional features of C++. You can often trivially wrap C functions for a more C++-style experience. For example: objects may be able to: cleanly encapsulate data returned by some function calls that is then used as inputs to later calls, making its storage and usage more implicit provide some guarantees about the correct sequencing of construction (initialisation), usage and destruction (clean-up) namespaces can help group and disambiguate the identifiers operator overloading can allow operations on types to be notated more like mathematical or logical expression, (e.g. x = a + b instead of x = add(a, b) ) exceptions might reduce the number of places in the client code where error values have to be explicitly checked for and handled (useful if this error-related code is currently obfuscating the program logic) if any of the functions implement generic functionality via void*s, then templates could be provided as a front end, automating the conversion to and from the void* type This just off-the-top-of-my-head stuff... it's much easier to give concrete answers if you show a representative sample of the functions. And of course, as you say you have the C source code, you can try compiling it with the C++ compiler, which would give you the option of avoiding "extern C" and a bit of the pollution of the global namespace, as well as adding much of the above not as wrappers but as tweaks to the existing code: may save you time and make maintainence easier.
