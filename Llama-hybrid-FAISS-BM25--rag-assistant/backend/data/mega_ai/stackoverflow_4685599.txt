[site]: stackoverflow
[post_id]: 4685599
[parent_id]: 4685563
[tags]: 
Thanks to Java 8 you don't need to do the steps below to pass a function to a method, that's what lambdas are for, see Oracle's Lambda Expression tutorial . The rest of this post describes what we used to have to do in the bad old days in order to implement this functionality. Typically you declare your method as taking some interface with a single method, then you pass in an object that implements that interface. An example is in commons-collections, where you have interfaces for Closure, Transformer, and Predicate, and methods that you pass implementations of those into. Guava is the new improved commons-collections, you can find equivalent interfaces there. So for instance, commons-collections has org.apache.commons.collections.CollectionUtils, which has lots of static methods that take objects passed in, to pick one at random, there's one called exists with this signature: static boolean exists(java.util.Collection collection, Predicate predicate) It takes an object that implements the interface Predicate , which means it has to have a method on it that takes some Object and returns a boolean. So I can call it like this: CollectionUtils.exists(someCollection, new Predicate() { public boolean evaluate(Object object) { return ("a".equals(object.toString()); } }); and it returns true or false depending on whether someCollection contains an object that the predicate returns true for. Anyway, this is just an example, and commons-collections is outdated. I just forget the equivalent in Guava.
