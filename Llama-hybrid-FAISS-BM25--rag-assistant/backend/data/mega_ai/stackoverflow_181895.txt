[site]: stackoverflow
[post_id]: 181895
[parent_id]: 180413
[tags]: 
There is one really good reason why you want to use stubs/mocks instead of real classes. I.e. to make your unit test's (pure unit test) class under test isolated from everything else. This property is extremely useful and the benefits for keeping tests isolated are plentiful: Tests run faster because they don't need to call the real class implementation. If the implementation is to run against file system or relational database then the tests will become sluggish. Slow tests make developers not run unit tests as often. If you're doing Test Driven Development then time hogging tests are together a devastating waste of developers time. It will be easier to track down problems if the test is isolated to the class under test. In contrast to a system test it will be much more difficult to track down nasty bugs that are not apparently visible in stack traces or what not. Tests are less fragile on changes done on external classes/interfaces because you're purely testing the class that is under test. Low fragility is also an indication of low coupling, which is a good software engineering. You're testing against external behaviour of a class rather than the internal implementation which is more useful when deciding code design. Now if you want to use real class in your test, that's fine but then it is NOT a unit test. You're doing a integration test instead, which is useful for the purpose of validating requirements and overall sanity check . Integration tests are not run as often as unit tests, in practice it is mostly done before committing to favorite code repository, but is equally important. The only thing you need to have in mind is the following: Mocks and stubs are for unit tests. Real classes are for integration/system tests.
