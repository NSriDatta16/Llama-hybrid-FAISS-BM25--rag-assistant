[site]: stackoverflow
[post_id]: 139827
[parent_id]: 139580
[tags]: 
@zvrba: You do not even have to sort the list. When traversing the list the second time just move all items with less the average workload to the end of the list (you can keep a pointer to the last item at your first traversal). The order does not have to be perfect, it just changes when the iterators have to be augmented or decreased in your last step. See previous answer The last step would look something like: In the second step keep a pointer to the first item with less than average workload in child2 (to prevent the necessity to have a double link list). for each child in list { if child2 == nil then assert("Error in logic"); while child.workload > avg + 1 { sendwork(child, child2, min(avg + 1 - child2.workload, child.workload - (avg + 1))) if child2.workload == avg + 1 then child2 = child2.next; } }
