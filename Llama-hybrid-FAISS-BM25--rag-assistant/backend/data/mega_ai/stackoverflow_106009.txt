[site]: stackoverflow
[post_id]: 106009
[parent_id]: 94011
[tags]: 
The solutions that purpose the usage of a boolean field are the right direction. But the field must be volatile. The Java Language Spec says : "For example, in the following (broken) code fragment, assume that this.done is a non- volatile boolean field: while (!this.done) Thread.sleep(1000); The compiler is free to read the field this.done just once, and reuse the cached value in each execution of the loop. This would mean that the loop would never terminate, even if another thread changed the value of this.done." As far as I remember "Java Concurrency in Pratice" purposes to use the interrupt() and interrupted() methods of java.lang.Thread.
