[site]: stackoverflow
[post_id]: 1796170
[parent_id]: 1796055
[tags]: 
You are right that reflection can be opposed to any number of good design principles, but it can also be an essential building block that you can use to support good design principles - e.g. software that can be extended by plugins, inversion of control, etc. If you're worried that it represents a capability that should be discouraged, you may have a point. But it's not as convenient to use as true language features, so it is easier to do things the right way. If you think reflection ought to be impossible , you're dreaming! In C++ there is no reflection as such. But there is an underlying "object model" that the compiler-generated machine code uses to access the structure of objects (and virtual functions). So a C++ programmer can break encapsulation in the same way. class RealClass { private: int m_secret; }; class FakeClass { public: int m_notSecret; }; We can take a pointer to an object of type RealClass and simply cast it to FakeClass and access the "private" member. Any restricted system has to be implemented on top of a more flexible system, so it is always possible to circumvent it. If reflection wasn't provided as a BCL feature, someone could add it with a library using unsafe code. In some languages there are ways to encapsulate data so that it is not possible within the language to get at the data except in certain prescribed ways. But it will always be possible to cheat if you can find a way to escape out of the language. An extreme example would be scoped variables in JavaScript: (function() { var x = 5; myGetter = function() { return x; }; mySetter = function(v) { x = v; }; })(); After that executes, the global namespace contains two functions, myGetter and mySetter , which are the only way to access the value of x . Javascript has no reflective ability to get at x any other way. But it has to run in some kind of host interpreter (e.g. in the browser), and so there is certainly some horrible way to manipulate x . A memory corruption bug in a plugin could do it by accident!
