[site]: stackoverflow
[post_id]: 5686501
[parent_id]: 
[tags]: 
Models + Database design

What I want to accomplish: Images that should be either single or in albums Browseable list of albums and single pictures with page numbering Not show images inside albums on browse, only album cover My approach so far has been: Models that represent a single image, and single album One database table content containing id, title, thumbnailFile and imageFile etc. One database table album with album id, album title etc. One database table album_content mapping what content is inside what album One database table browse with ids for albums, and ids for content not inside album + copied attributes used for thumbnail preview and sorting (filenames,titles,views,date etc.) Paginator utilizing the latter table only, while view is utilizing the model pointing to content table I don't think the above is too bad regarding speed, but I don't find it particulary elegant, and I'm looking for a better way to do it, and hopefully shrink the amount of elements to cache/invalidate. So far I've been thinking something along the lines of: Only having one copy of data in the database (combine content, album and browse somehow and still be able to quicly count and sort the dataset by date,views etc.) Stay away from joins on any sortable/order by column Treat all images as a single model instance, also inside albums My main problem here is that albums have dates, views etc. independant of the content inside it, and I wish to order by the date of content not inside albums + the date of albums which should have a unique identifier. Albums also have colums not relevant for content. Is there a good way to solve this? * Edit : For speed, I think I'm stuck with the separate browse table. Is there a way to have Zend dbTable reference the view column of browse album and content so that onUpdate in either album or content is utilizing the CASCADE logic in Zend to update both tables?
