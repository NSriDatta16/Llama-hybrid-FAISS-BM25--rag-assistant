[site]: stackoverflow
[post_id]: 1037073
[parent_id]: 1036868
[tags]: 
Not sure how to do this in .NET, but in regular Win32 programming, the object that implements the IDataObject interface can optionally implement the IAsyncOperation interface as well. The IDropTarget can then use that interface to perform the drag-n-drop in a background thread so that the source and target are not blocked during the actual transfer. The only gotcha is that the target, not the source, decides whether to take advantage of this or not. The alternative is to use an "optimized move" transfer, where the IDataObject provides the filenames and the IDropTarget moves the files directly. MSDN has details on that: Handling Shell Data Transfer Scenarios . Of course, this still means you have to download the files before beginning the drag-n-drop. There really is no way to perform a drag-n-drop to determine the target and then perform the download afterwards. What you could do, though, is have the IDataObject hold CFSTR_FILEDESCRIPTOR and CFSTR_FILECONTENTS entries (described here: Shell Clipboard Formats ), where the CFSTR_FILEDESCRIPTOR is filled in from information you used to populate your ListView, and the CFSTR_FILECONTENTS uses IStream interfaces whose implementations perform the download during the actual drop operation rather than prior to it. At least that way, you are only downloading the files that the target actually wants and can skip the rest. Couple that with IAsyncOperation, and that may give you the final effect you are looking for.
