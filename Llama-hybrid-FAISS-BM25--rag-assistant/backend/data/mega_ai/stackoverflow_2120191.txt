[site]: stackoverflow
[post_id]: 2120191
[parent_id]: 2119708
[tags]: 
I'm writing this to be more pragmatic than technically correct. It's enough to give you the general idea of what you're after. Is writing them any different than a normal C++ program, minus the main() function? For a static library, there's really not much difference. For a dynamic library, the most likely difference you'll need to be aware of is that you may need to export the symbols you want to be available outside your library. Basically everything you don't export is invisible to users of your library. Exactly how you export, and whether you even need to by default, depends on your compiler. For a dynamic library you also need to have all symbols resolved, which means the library can't depend on a function or variable that comes from outside the library. If my library uses a function called foo(), I need to include foo() in my library by writing it myself or by linking to another library that supplies it. I can't use foo() and just assume the user of my library will supply it. The linker won't know how to call a foo() that doesn't yet exist. How does the compiled program get to be a library? It's obviously not an executable, so how do I turn, say 'test.cpp' into 'test.dll'? It's similar to how you turn test.cpp into test.exe - compile and link. You pass options to the compiler to tell it whether to create an executable, a static library, or a dynamic library. Once I get it to its format, how do I include it in another program? In your source code, you include header files necessary to use the library, much as you would include a header file for code that's not in a library. You'll also need to include the library on your link line, telling the linker where to find the library. For many systems, creating a dynamic library generates two files, the shared library and a link library. It's the link library that you include on the link line. Is there a standard place to put them, so that whatever compilers/linkers need them can find them easily? There is an environment variable that tells the linker where to look for libraries. The name of that variable is different from one system to another. You can also tell the linker about additional places to look. What is the difference (technically and practically) between a dynamic and static library? A static library gets copied into the thing it is linked to. An executable will include a copy of the static library and can be run on another machine without also copying the static library. A dynamic library stays in a separate file. The executable loads that separate file when it runs. You have to distribute a copy of the dynamic library with your program or it won't run. You can also replace the dynamic library with a new version, and as long as the new library has the same interface it will still run with the old executable. It also may save space if several executables use the same dynamic library. In fact dynamic libraries are often called shared libraries. How would I use third party libraries in my code Same as you would use one you created yourself, as described above.
