[site]: stackoverflow
[post_id]: 2741789
[parent_id]: 2741401
[tags]: 
It's hard to quantify 1 even when it's clearly true. A poor measure but the best I can come up with is the comparative gzipped size of the code: http://shootout.alioth.debian.org/u64/benchmark.php?test=all&lang=yarv&lang2=java The ruby code contains half the "information" of the Java code. I've done a few years of rails, and plenty of other frameworks, but it's near impossible to quantify, since I've never written the same project in two languages/frameworks. The one thing that isn't accounted for in the graph though is that Ruby can't have compiler time checking, so you generally have to have better test coverage in order to have confidence in the code you're deploying. Ruby performance has come leaps and bounds in terms of performance. It's still bad when you compare it to just about anything, but for a web front end, it honestly doesn't matter that much. JRuby is faster than Ruby (1.8.x) but still an order of magnitude away from a statically typed JVM language (scala/java etc). Honestly, Rails is damn slow for a framework. The computational heaviness helps allow an insane rate of development though. For a front end, it doesn't really matter that much either. Your front end framework/language choice is only going to add maybe 10s of milliseconds to each request. If you your app does anything significant with data at all, the front end presentation/calls aren't going to take the majority of the request time. It's pretty much all about trade offs and what does/doesn't matter. Computational speed of your front end language honestly isn't that important, and the productivity boost of a "slower" language such as ruby generally outweighs the things you give up.
