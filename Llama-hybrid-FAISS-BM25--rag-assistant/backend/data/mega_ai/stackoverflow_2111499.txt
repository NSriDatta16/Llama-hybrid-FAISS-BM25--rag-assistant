[site]: stackoverflow
[post_id]: 2111499
[parent_id]: 1950003
[tags]: 
I prefer to be explicit about what each and every cpp file needs. I find it's easier in the long run and that it prevents 'common' headers from causing files to be rebuilt when they don't need to be. As a project grows, having a strict 'include only what you need' policy can help keep build times down. The price of this is a little thought when you're initially building a new class. I often have header files just for a single enum or typedef and I even go as far as having a special build configuration which builds without precompiled headers and (since I work with Visual Studio) use #pragma hdrstop to define my precompiled headers rather than having every file need to include a common file for this purpose. Over the years I've found this to work very well at keeping build times down and allowing code to be moved around (out into libraries or across into other projects) or built for test harnesses. I view common headers as unnecessary coupling which should be removed and, to be honest, a sign of laziness and lack of attention to detail.
