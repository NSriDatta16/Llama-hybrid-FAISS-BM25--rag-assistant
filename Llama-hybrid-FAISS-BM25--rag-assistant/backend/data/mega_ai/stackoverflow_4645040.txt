[site]: stackoverflow
[post_id]: 4645040
[parent_id]: 4644821
[tags]: 
Omu, Darn the 30k limit here :). had to add the constrint class as a seperate answer. grr.. // // SubSonic - http://subsonicproject.com // // The contents of this file are subject to the New BSD // License (the "License"); you may not use this file // except in compliance with the License. You may obtain a copy of // the License at http://www.opensource.org/licenses/bsd-license.php // // Software distributed under the License is distributed on an // "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or // implied. See the License for the specific language governing // rights and limitations under the License. // using System; using System.Collections; using System.ComponentModel; using System.Data; using SubSonic.Extensions; namespace SubSonic.Query { /// /// Where, And, Or /// public enum ConstraintType { /// /// WHERE operator /// Where, /// /// AND operator /// And, /// /// OR Operator /// Or } /// /// SQL Comparison Operators /// public enum Comparison { Equals, NotEquals, Like, NotLike, GreaterThan, GreaterOrEquals, LessThan, LessOrEquals, Blank, Is, IsNot, In, NotIn, OpenParentheses, CloseParentheses, BetweenAnd, StartsWith, EndsWith } /// /// Summary for the SqlComparison class /// public class SqlComparison { public const string BLANK = " "; public const string EQUAL = " = "; public const string GREATER = " > "; public const string GREATER_OR_EQUAL = " >= "; public const string IS = " IS "; public const string IS_NOT = " IS NOT "; public const string LESS = " "; public const string NOT_LIKE = " NOT LIKE "; } /// /// A Class for handling SQL Constraint generation /// public class Constraint { /// /// The query that this constraint is operating on /// public SqlQuery query; public Constraint() {} #region Factory methods /// /// Initializes a new instance of the class. /// /// The condition. /// Name of the constraint column. public Constraint(ConstraintType condition, string constraintColumnName) { Condition = condition; ColumnName = constraintColumnName; QualifiedColumnName = constraintColumnName; ConstructionFragment = constraintColumnName; } /// /// Initializes a new instance of the class. /// /// The condition. /// Name of the constraint column. /// Name of the constraint qualified column. public Constraint(ConstraintType condition, string constraintColumnName, string constraintQualifiedColumnName) { Condition = condition; ColumnName = constraintColumnName; QualifiedColumnName = constraintQualifiedColumnName; ConstructionFragment = constraintColumnName; } /// /// Initializes a new instance of the class. /// /// The condition. /// Name of the constraint column. /// Name of the constraint qualified column. /// The constraint construction fragment. public Constraint(ConstraintType condition, string constraintColumnName, string constraintQualifiedColumnName, string constraintConstructionFragment) { Condition = condition; ColumnName = constraintColumnName; QualifiedColumnName = constraintQualifiedColumnName; ConstructionFragment = constraintConstructionFragment; } /// /// Initializes a new instance of the class. /// /// The condition. /// Name of the constraint column. /// The SQL query. public Constraint(ConstraintType condition, string constraintColumnName, SqlQuery sqlQuery) { Condition = condition; ColumnName = constraintColumnName; QualifiedColumnName = constraintColumnName; ConstructionFragment = constraintColumnName; query = sqlQuery; } /// /// Initializes a new instance of the class. /// /// The condition. /// Name of the constraint column. /// Name of the constraint qualified column. /// The constraint construction fragment. /// The SQL query. public Constraint(ConstraintType condition, string constraintColumnName, string constraintQualifiedColumnName, string constraintConstructionFragment, SqlQuery sqlQuery) { Condition = condition; ColumnName = constraintColumnName; QualifiedColumnName = constraintQualifiedColumnName; ConstructionFragment = constraintConstructionFragment; query = sqlQuery; } /// /// Wheres the specified column name. /// /// Name of the column. /// public static Constraint Where(string columnName) { return new Constraint(ConstraintType.Where, columnName); } /// /// Ands the specified column name. /// /// Name of the column. /// public static Constraint And(string columnName) { return new Constraint(ConstraintType.And, columnName); } /// /// Ors the specified column name. /// /// Name of the column. /// public static Constraint Or(string columnName) { return new Constraint(ConstraintType.Or, columnName); } #endregion #region props /// /// Gets or sets the name of the table. /// /// The name of the table. private string _tableName = String.Empty; private ConstraintType condition = ConstraintType.Where; private string parameterName; /// /// Gets or sets the condition. /// /// The condition. public ConstraintType Condition { get { return condition; } set { condition = value; } } public string TableName { get { return _tableName; } set { _tableName = value; } } /// /// Gets or sets the name of the column. /// /// The name of the column. public string ColumnName { get; set; } /// /// Gets or sets the fully qualified name of the column. /// /// The name of the column. public string QualifiedColumnName { get; set; } /// /// Gets or sets the string fragment used when assembling the text of query. /// /// The construction fragment. public string ConstructionFragment { get; set; } /// /// Gets or sets the comparison. /// /// The comparison. public Comparison Comparison { get; set; } /// /// Gets or sets the parameter value. /// /// The parameter value. public object ParameterValue { get; set; } /// /// Gets or sets the start value. /// /// The start value. public object StartValue { get; set; } /// /// Gets or sets the end value. /// /// The end value. public object EndValue { get; set; } /// /// Gets or sets the in values. /// /// The in values. public IEnumerable InValues { get; set; } /// /// Gets or sets the in select. /// /// The in select. public SqlQuery InSelect { get; set; } /// /// Gets or sets the name of the parameter. /// /// The name of the parameter. public string ParameterName { get { return parameterName ?? ColumnName; } set { parameterName = value; } } /// /// Gets or sets the type of the db. /// /// The type of the db. public DbType DbType { get; set; } /// /// Gets or sets a value indicating whether this constraint is an Aggregate. /// /// /// true if this instance is aggregate; otherwise, false . /// public bool IsAggregate { get; set; } /// /// Gets the comparison operator. /// /// The comp. /// public static string GetComparisonOperator(Comparison comp) { string sOut; switch(comp) { case Comparison.Blank: sOut = SqlComparison.BLANK; break; case Comparison.GreaterThan: sOut = SqlComparison.GREATER; break; case Comparison.GreaterOrEquals: sOut = SqlComparison.GREATER_OR_EQUAL; break; case Comparison.LessThan: sOut = SqlComparison.LESS; break; case Comparison.LessOrEquals: sOut = SqlComparison.LESS_OR_EQUAL; break; case Comparison.Like: sOut = SqlComparison.LIKE; break; case Comparison.NotEquals: sOut = SqlComparison.NOT_EQUAL; break; case Comparison.NotLike: sOut = SqlComparison.NOT_LIKE; break; case Comparison.Is: sOut = SqlComparison.IS; break; case Comparison.IsNot: sOut = SqlComparison.IS_NOT; break; case Comparison.OpenParentheses: sOut = "("; break; case Comparison.CloseParentheses: sOut = ")"; break; case Comparison.In: sOut = " IN "; break; case Comparison.NotIn: sOut = " NOT IN "; break; default: sOut = SqlComparison.EQUAL; break; } return sOut; } #endregion /// /// Determines whether the specified is equal to the current . /// /// The to compare with the current . /// /// true if the specified is equal to the current ; otherwise, false. /// /// The parameter is null. [EditorBrowsable(EditorBrowsableState.Never)] public override bool Equals(object obj) { if(obj is Constraint) { Constraint compareTo = (Constraint)obj; return compareTo.ParameterName.Matches(parameterName) && compareTo.ParameterValue.Equals(ParameterValue); } return base.Equals(obj); } /// /// Serves as a hash function for a particular type. /// /// /// A hash code for the current . /// [EditorBrowsable(EditorBrowsableState.Never)] public override int GetHashCode() { return base.GetHashCode(); } /// /// Creates a LIKE statement. /// /// The val. /// public SqlQuery Like(string val) { Comparison = Comparison.Like; ParameterValue = val; DbType = query.GetConstraintDbType(TableName, ColumnName, val); query.Constraints.Add(this); return query; } /// /// Creates a LIKE statement and appends a wildcard to the end of the passed-in value. /// /// The val. /// public SqlQuery StartsWith(string val) { return StartsWith(val, "%"); } public SqlQuery StartsWith(string val, string wildCard) { Comparison = Comparison.Like; ParameterValue = String.Format("{0}{1}", val, wildCard); DbType = query.GetConstraintDbType(TableName, ColumnName, val); query.Constraints.Add(this); return query; } /// /// Creates a LIKE statement and appends a wildcard to the end of the passed-in value. /// /// The val. /// The wild card. /// public SqlQuery EndsWith(string val, string wildCard) { Comparison = Comparison.Like; ParameterValue = String.Format("{0}{1}", wildCard, val); DbType = query.GetConstraintDbType(TableName, ColumnName, val); query.Constraints.Add(this); return query; } /// /// Creates a LIKE statement and appends a wildcard to the end of the passed-in value. /// /// The val. /// public SqlQuery EndsWith(string val) { return EndsWith(val, "%"); } /// /// Creates a NOT LIKE statement /// /// The val. /// public SqlQuery NotLike(string val) { Comparison = Comparison.NotLike; ParameterValue = val; DbType = query.GetConstraintDbType(TableName, ColumnName, val); query.Constraints.Add(this); return query; } /// /// Determines whether [is greater than] [the specified val]. /// /// The val. /// public SqlQuery IsGreaterThan(object val) { Comparison = Comparison.GreaterThan; ParameterValue = val; DbType = query.GetConstraintDbType(TableName, ColumnName, val); query.Constraints.Add(this); return query; } /// /// Determines whether [is greater than] [the specified val]. /// /// The val. /// public SqlQuery IsGreaterThanOrEqualTo(object val) { Comparison = Comparison.GreaterOrEquals; ParameterValue = val; DbType = query.GetConstraintDbType(TableName, ColumnName, val); query.Constraints.Add(this); return query; } /// /// Specifies a SQL IN statement using a nested Select statement /// /// The select query. /// public SqlQuery In(SqlQuery selectQuery) { //validate that there is only one column in the columnlist if(selectQuery.SelectColumnList.Length == 0 || selectQuery.SelectColumnList.Length > 1) throw new InvalidOperationException("You must specify a column to return for the IN to be valid. Use Select(\"column\") to do this"); InSelect = selectQuery; Comparison = Comparison.In; query.Constraints.Add(this); return query; } /// /// Specifies a SQL IN statement /// /// Value array /// public SqlQuery In(IEnumerable vals) { InValues = vals; Comparison = Comparison.In; query.Constraints.Add(this); return query; } /// /// Specifies a SQL IN statement /// /// Value array /// public SqlQuery In(params object[] vals) { InValues = vals; Comparison = Comparison.In; query.Constraints.Add(this); return query; //this is trickery, since every time we send in a Select query, it will call this method //so we need to evaluate it, and call In(Select) //I don't like this hack, but don't see a way around it /* if(vals.Length > 0) { if(vals[0].ToString().StartsWith("SELECT")) { Select s = (Select)vals[0]; query = In(s); } else { InValues = vals; Comparison = Comparison.In; query.Constraints.Add(this); } } return query;*/ } /// /// Specifies a SQL IN statement using a nested Select statement /// /// The select query. /// public SqlQuery NotIn(SqlQuery selectQuery) { //validate that there is only one column in the columnlist if(selectQuery.SelectColumnList.Length == 0 || selectQuery.SelectColumnList.Length > 1) throw new InvalidOperationException("You must specify a column to return for the IN to be valid. Use Select(\"column\") to do this"); InSelect = selectQuery; Comparison = Comparison.NotIn; query.Constraints.Add(this); return query; } /// /// Specifies a SQL Not IN statement /// /// Value array /// public SqlQuery NotIn(IEnumerable vals) { InValues = vals; Comparison = Comparison.NotIn; query.Constraints.Add(this); return query; } /// /// Specifies a SQL NOT IN statement /// /// Value array /// public SqlQuery NotIn(params object[] vals) { InValues = vals; Comparison = Comparison.NotIn; query.Constraints.Add(this); return query; /* if(vals.Length > 0) { if(vals[0].ToString().StartsWith("SELECT")) { Select s = (Select)vals[0]; query = NotIn(s); } else { InValues = vals; Comparison = Comparison.NotIn; query.Constraints.Add(this); } } return query;*/ } /// /// Determines whether [is less than] [the specified val]. /// /// The val. /// public SqlQuery IsLessThan(object val) { Comparison = Comparison.LessThan; ParameterValue = val; DbType = query.GetConstraintDbType(TableName, ColumnName, val); query.Constraints.Add(this); return query; } /// /// Determines whether [is less than] [the specified val]. /// /// The val. /// public SqlQuery IsLessThanOrEqualTo(object val) { Comparison = Comparison.LessOrEquals; ParameterValue = val; DbType = query.GetConstraintDbType(TableName, ColumnName, val); query.Constraints.Add(this); return query; } /// /// Determines whether [is not null] [the specified val]. /// /// public SqlQuery IsNotNull() { Comparison = Comparison.IsNot; ParameterValue = DBNull.Value; query.Constraints.Add(this); return query; } /// /// Determines whether the specified val is null. /// /// public SqlQuery IsNull() { Comparison = Comparison.Is; ParameterValue = DBNull.Value; query.Constraints.Add(this); return query; } /// /// Determines whether [is between and] [the specified val1]. /// /// The val1. /// The val2. /// public SqlQuery IsBetweenAnd(object val1, object val2) { Comparison = Comparison.BetweenAnd; StartValue = val1; EndValue = val2; DbType = query.GetConstraintDbType(TableName, ColumnName, val1); query.Constraints.Add(this); return query; } /// /// Determines whether [is equal to] [the specified val]. /// /// The val. /// public SqlQuery IsEqualTo(object val) { Comparison = Comparison.Equals; ParameterValue = val; DbType = query.GetConstraintDbType(TableName, ColumnName, val); query.Constraints.Add(this); return query; } /// /// Determines whether [is not equal to] [the specified val]. /// /// The val. /// public SqlQuery IsNotEqualTo(object val) { Comparison = Comparison.NotEquals; ParameterValue = val; DbType = query.GetConstraintDbType(TableName, ColumnName, val); query.Constraints.Add(this); return query; } } } join with previous answer and cook for 2 seconds... sorry this 'answer' is so verbose, this is all normally wrapped in subsonic, so is a one liner for me.
