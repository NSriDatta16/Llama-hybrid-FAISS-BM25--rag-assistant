[site]: stackoverflow
[post_id]: 1543656
[parent_id]: 1543536
[tags]: 
While, by today's standards, the server's specs are not impressive, I have run fairly complicated stuff concurrently on similar hardware. However, I used a very barebones, run only what is necessary FreeBSD configuration. (Similar to what you can achieve using ArchLinux). I suspect you did not do a lot of custom configuration, and accepted Ubuntu defaults which may be too heavy for those specs. Currently, I am playing around with a Linode 360 and performance is fine. Now, all this is meant to state the obvious: We need information that you have which you have not shared with us. Web server configuration, memory footprint of the script + interpreter, how many files are open etc etc. Either try to provide the smallest script that still exhibits the problem or provide more information. Update: Now that I see you are using mod_perl : 1) Have you made sure all libraries needed by the script were preloaded at server start? 2) Are you getting any variable won't stay shared messages in the log? 3) Have you read mod_perl Performance ? ( Chapter 10: Sharing Memory might be especially relevant). In general, you should preload common libraries at the start of the Apache server. As a very simplified rule of thumb, the more stuff stays shared, the more you can get out of your server. See Startup File in Practical mod_perl . Plus, I think 35MB per server is a little much. I think you could cut that down if you eliminated unneeded modules from the Apache configuration. However, even if you could not, say all that 35MB is shared, plus the maximum child process is 50MB, you should be able to accommodate about 20 clients at a time. I just noticed the script you are testing. Really, try preloading CGI at server startup by adding the following lines to your startup.pl : use strict; use warnings; use CGI(); Second, change that script to #!/usr/bin/perl use strict; use warnings; use CGI (); $| = 1; handle_request(); sub handle_request { my $cgi = CGI->new; my $content = "5 second delay...\n"; print $cgi->header('text/plain'), $content; sleep(5); } Note that you were never sending the header in the original script (I also hate calling a CGI instance $query so I took the liberty of changing that as well). See also Perl Reference . Report back the memory usage after that. Finally, why are you sleeping 5 seconds? AFAIK, Apache's default time out for a script is 3 seconds.
