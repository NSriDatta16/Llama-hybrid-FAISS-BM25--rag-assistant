[site]: stackoverflow
[post_id]: 4399914
[parent_id]: 
[tags]: 
When does using C# structs (value types) sacrifice performance?

I have been playing with structs as a mechanism to implicitly validate complex value objects, as well as generic structs around more complex classes to ensure valid values. I am a little ignorant as to the performance consequences, so I am hoping you all can help me out. For example, if I were to do something like injecting a domain object into a value type wrapper, would that cause problems ? Why? I understand the difference between value types and reference types, and my goal here is to leverage the different behavior of value types. What exactly do I need to look into in order to do this responsibly? Here is an extremely basic idea of something I was thinking. public struct NeverNull where T: class, new() { private NeverNull(T reference) { _reference = reference; } private T _reference; public T Reference { get { if(_reference == null) { _reference = new T(); } return _reference; } set { _reference = value; } } public static implicit operator NeverNull (T reference) { return new NeverNull (reference); } public static implicit operator T(NeverNull value) { return value.Reference; } }
