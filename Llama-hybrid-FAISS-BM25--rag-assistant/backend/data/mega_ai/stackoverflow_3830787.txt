[site]: stackoverflow
[post_id]: 3830787
[parent_id]: 3830727
[tags]: 
import itertools def windows(iterable, length=2): return itertools.izip(*(itertools.islice(it,n,None) for n,it in enumerate(itertools.tee(iterable,length)))) itemList = ["a","b","c","d","e","f","g","h"] for group in windows(itemList,length=3): print('_'.join(group)) SilentGhost's elegant list comprehension is better for this problem. But just to explain why I'm not deleting this post: You may one day want to generate windows from an iterator which is not a list. Since you can't take the length of an iterator without consuming it, (and also since some iterators may be infinite), and since taking slices from an iterator always return new values, you can't use the list comprehension ['_'.join(itemList[i:i+3]) for i in range(len(itemList)-2)] in this case. Then the windows function is actually useful. For example: def itemList(): for x in range(8): yield str(x) for group in windows(itemList(),length=3): print('_'.join(group)) yields 0_1_2 1_2_3 2_3_4 3_4_5 4_5_6 5_6_7
