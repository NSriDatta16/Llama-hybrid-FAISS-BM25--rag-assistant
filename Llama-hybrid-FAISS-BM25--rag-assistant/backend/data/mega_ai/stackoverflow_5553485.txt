[site]: stackoverflow
[post_id]: 5553485
[parent_id]: 5552644
[tags]: 
Update Couldn't help but running the same benchmarks on my home PC (linux 32bit, Q9550) with mono 2.8.2 as well just for fun : [mono] /tmp @ dmcs MonteCarlo.cs [mono] /tmp @ time mono ./MonteCarlo.exe Yo Approx: 392711899/500000000 => Pi: 3.141695192 real 0m28.109s user 0m27.966s sys 0m0.152s [mono] /tmp @ dmcs MonteCarlo.cs # #define PARALLEL added [mono] /tmp @ time mono ./MonteCarlo.exe Yo Approx: 392687018/500000000 => Pi: 3.141496144 real 0m8.139s user 0m31.506s sys 0m0.064s So yes, it does seem to scale as expected. Thanks for letting me actually put this to 'use' on mono. It was on my 'TODO' list for too long, and it works like a charm! Original post I just timed it using mono 2.8.2 on a dualcore (E5300) windows XP Using the parallel version (#define PARALLEL) it ran in 40s Using the sequential version (not defining PARALLEL) it took about 45s. So I'm not seeing your measured overhead; or at least I'm not seeing a slowdown. I'm also missing the speedup, like you do. In the parallel run I saw both CPUs pegged at 100%, whereas the singlethreaded version used approx. 50% of both CPUs average. #define PARALLEL using System; using System.IO; using System.Text.RegularExpressions; using System.Collections.Concurrent; using System.Threading.Tasks; namespace test { class MainClass { const int _numInterations = 50000; const int _dartsPerIter = 10000; protected static int ThrowDarts (int iterations) { Random random = new Random (); int dartsInsideCircle = 0; for (int iteration = 0; iteration results = new ConcurrentBag (); int result = 0; // initialise each thread by setting it's hit count to 0 //in the body, we throw one dart and see whether it hit or not // finally, we sum (in a thread-safe way) all the hit counts of each thread together #if PARALLEL Parallel.For (0, _numInterations, () => 0, (iteration, state, localState) => localState + ThrowDarts (_dartsPerIter), results.Add); #else for (var i =0; i Pi: {2}", inside, _numInterations * _dartsPerIter, (4.0*inside)/(1.0*_numInterations*_dartsPerIter)); } } }
