[site]: stackoverflow
[post_id]: 4653905
[parent_id]: 4653496
[tags]: 
I am super glad to hear you using feature branches - go you :) After that, there are two ways to keep things tidy, and one thing that just helps your brain work better. 1) For each branch you are actively working on, make a local branch. You want to do this because you want to be able to rebase what everyone else is doing. Without the rebase you'll have a bunch of commits representing merges that really don't add anything to the history. You can rebase the branch which is remote, however this is discouraged as rebasing rewrites history, and should two people do it at the same time - it gets hairy and really hard to follow. Early on in projects I usually just work off master . So I create a master_local which does not track anything (git branch master_local). When people make changes I want or need (git pull), while having master_local checked out, just rebase (git rebase master). And the tip to keep your brain working well - merge your local branch into the tracking/remote feature branch often. The longer you keep things separated the more you'll have to remember, the larger your merge will be, the more others will be complaining that you're not working, etc. ;) 2) If you have large features and many people, you'll have tons of commits per feature branch. Once these features are ready to get to master you just don't need to see all of it. And if you want to revert the feature out you don't want to revert several hundred patches. The answer to all of this is to squash your commits down to 1 single commit. This way master is a nice and short list of the features contained therein. (http://www.gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html)
