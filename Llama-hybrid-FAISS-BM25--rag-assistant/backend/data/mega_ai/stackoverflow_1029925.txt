[site]: stackoverflow
[post_id]: 1029925
[parent_id]: 1018259
[tags]: 
The solution by bug-a-lot is intriguing - I didnlt think to use priorities. Instead, I made use of the different phases of the event process. The problem for me was to decide whether the arrow keys should advance or retreat one character within the given text field, or jump to the next or previous field in the form. First, I override the stage's event handling for the keys: stage.addEventListener(KeyboardEvent.KEY_UP, typing); // Sneak in before the normal processing handles right and left arrow keystrokes. stage.addEventListener(KeyboardEvent.KEY_DOWN, pretyping, true, 10); Note that I will process each key twice - before the system does it's wizardry (pretyping is called before the KEY_DOWN) so I can see where the caret is before Flash moves it, and after the system handles it (with typing, called after KEY_UP). /** Capture prior state of text field so we can later tell if user should tab to next field or previous field. */ private function pretyping(evt:KeyboardEvent):void { var keyString:String = Configuration.getKeyString(evt); if (isFocusInTextBox()) { var tf:TextField = getFocus() as TextField; capturePhaseCaret = tf.caretIndex; } } getKeyString is a method of mine - all it does is turn those codes into convenient mnemonics. And isFocusInTextBox is a call to my focus manager - I replaced the standard focus manager to overcome other Flash issues. I just need to know if the thing is a text field or not. Next I have to process the key after Flash has already moved the caret and maybe even jumped to a new field, and by looking at the prior state, decide what Flash did and undo it and then do what ought to happen. My function "typing" has a lot of stuff not needed for this discussion, but the important thing it does is call allowKeyMapping. allowKeyMapping decides if the user entered forward arrow (or down arrow) from the last character position in the text field, or entered backward arrow from the beginning. If so, "typing" will tab to the next or previous field, respectively. /** Prefer default behavior and do not allow certain kestrokes to be reinterpreted by key mappings, such as left and right cursor keys in text boxes. */ private function allowKeyMapping(keyString:String) { var allow:Boolean; // If focus is in a text field, allow right arrow to advance to next field only if caret is at end of text. // Conversely, allow left arrow to back up to previous field only if caret is at beginning of text. // The trick is that the normal processing of keystrokes by TextFields occurs before this method is called, // so we need to know the caret position from before the key was pressed, which we have stored in capturePhaseCaret, set in pretyping. if (isDragging) { allow = false; } else if (isFocusInTextBox()) { var tf:TextField = getFocus() as TextField; if (keyString == Configuration.LEFT_CURSOR_KEY) { allow = tf.caretIndex == 0 && capturePhaseCaret == 0; } else if (keyString == Configuration.RIGHT_CURSOR_KEY) { allow = tf.caretIndex == tf.text.length && capturePhaseCaret == tf.text.length; } else { allow = true; } } else { allow = true; } return allow; } I am sorry I do not have a compact example prepared. I just thought it important to emphasize that you can get around Flash's penchant for doing things for you whether you want them to happen or not.
