[site]: stackoverflow
[post_id]: 4408904
[parent_id]: 4408584
[tags]: 
Do you have to bind to this object after you've created it? If not then you can create an "persistent AnonymousType" class that stores the values in a dictionary and returns the property values with a method like: string lastName AnonType.GetValue ("LastName"); int age AnonType.GetValue ("Age"); Here is a link to an excellent example . The author also has an example where he creates the "AnonymousType" from a datatable. I have worked on a variation of this where I provide the ability to query a list of "AnonymousType" with the following syntax: // Here's the query var dept13 = anonAgents.AsQueryable() .Where(x => x.Has("Department", Compare.Equal, 13); // Here is how the List is constructed private static AnonymousType ProvisionAgent(string name, int department) { return AnonymousType.Create(new { Name = name, Department = department }); } private List CreateAnonAgentList() { var anonAgents = new List (); // Dave and Cal are in Department 13 anonAgents.Add(AnonymousType.Create(CreateAgentAnonType("Dan Jacobs", 13, 44))); anonAgents.Add(AnonymousType.Create(CreateAgentAnonType("Calvin Jones", 13, 60))); // Leasing = Dept 45 anonAgents.Add(AnonymousType.Create(CreateAgentAnonType("Stanley Schmidt", 45, 36))); anonAgents.Add(AnonymousType.Create(CreateAgentAnonType("Jeff Piper", 45, 32))); anonAgents.Add(AnonymousType.Create(CreateAgentAnonType("Stewart Blum", 45, 41))); anonAgents.Add(AnonymousType.Create(CreateAgentAnonType("Stuart Green", 45, 38))); // HR = Dept 21 anonAgents.Add(AnonymousType.Create(CreateAgentAnonType("Brian Perth", 21, 25))); anonAgents.Add(AnonymousType.Create(CreateAgentAnonType("Katherine McDonnel", 21, 23))); return anonAgents; }
