[site]: stackoverflow
[post_id]: 3570030
[parent_id]: 3569680
[tags]: 
To answer your last question first :) The OrderBy's have no meaning here, because after you sort the players, you put the list inside a CollectionView with a grouping which promptly sorts it by Team (since the grouping is on Team). To get them in the proper order, you can sort them by Team before putting them inside the ListCollectionView. However, this will put them in alphabetical order - and not exactly the order you wanted. You need to implement IComparable and put that in your sort method - i've rewritten your method a bit (I am not so good at that Linq-form - so, bear with me :)): You made it a bit harder on yourself by introducing a few unnecessary things - I've tried to root them out. private void get_server(string addr) { var loc = "http://ukcs.gameme.com/api/serverinfo/" + addr + "//players"; var doc = XDocument.Load(@loc); var server = doc.Descendants("player") .Select(player => new Player { name =player.Element("name").Value, team=player.Element("team").Value, frags=player.Element("kills").Value +":" +player.Element("deaths").Value, rank=int.Parse(player.Element("rank").Value) }) .OrderBy(p => p.team,new CustomSort()) .ThenBy(p => p.rank).ToList(); var collection = new ListCollectionView(server); collection.GroupDescriptions.Add(new PropertyGroupDescription("team")); player_list.ItemsSource = collection; } public class CustomSort : IComparer { public int Compare(string x, string y) { if (x.Equals(y)) return 0; if (y.Equals("None") || x.Equals("Blue")) return 1; if (x.Equals("None") || y.Equals("Blue")) return -1; if (x.Equals("Red")|| y.Equals("Spectator")) return -1; return 1; // y == "Red" and x == "Spectator" } } Hope this helps!
