[site]: crossvalidated
[post_id]: 524768
[parent_id]: 
[tags]: 
Train neural network on chess data

I have been working on a chess-engine with a friend of mine which is playing at a very high level (around 3300 ELO). We are currently looking for ways to improve the engine and an existing idea which is actually not used by any other engine is the following: Inside the engine, we are going to look through all the moves which can be played by either side. It does matter in which order these moves are searched. Ideally the best moves are searched first. The idea here is to use a neural network which has 12*64 inputs. This coresponds to the encoded chess position. 12 for the 12 different pieces where the first 6 are for the side to move and the other 6 are the opponents pieces. The 64 comes from the amount of squares on the board. The output of the network is a 64x64 vector which will contain a score for a move from one square to another. So let's say we are given some position, the engine would go through all the moves and retreive the score from the output of the network. Afterwards, all moves will be sorted. For this purpose I have generated a set of 94 million chess positions which contains the best move. Currently I am training using Adam with a batch size of 8192. As my Loss I am simply using the mean squared error. This seems to be problematic because all outputs seem to shift towards 0 (because 64x64-1 outputs should be 0 and only 1 output should equal 1). I am wondering what could be a good aproach to train such a network. I assume some different loss function would help with this problem.
