[site]: stackoverflow
[post_id]: 873288
[parent_id]: 873126
[tags]: 
Ok, answering my own question here just to try and get a bit of feedback I had on the tentative solution I worked out before posting here: Each node stores a "path fragment", this is the entire path to itself so far. 0) set current vertex to the starting vertex 1) Generate all path fragments from this vertex and add them to a priority queue 2) Take the fragment off the top off the priority queue, and set the current vertex to the ending vertex of that path 3) If the current vertex is the target vertex, then return the path 4) goto 1 I'm not sure this will find the best path though, I think the exit condition in step three is a little ambitious. I can't think of a better exit condition though, since this algorithm doesn't close vertices (a vertex can be referenced in as many path fragments as it likes) you can't just wait until all vertices are closed (like Dijkstra's for example)
