[site]: stackoverflow
[post_id]: 2391519
[parent_id]: 2389448
[tags]: 
In addition to the answers you have received, you can pre-initialize the capacity of the StringBuilder or StringBuffer . This reduces the number of times that the internal array must be recopied as it is expanded. Since you do not know the exact capacity needed you can make an estimate of the average size of each element and multiple by the number of elements. private static final int ESTIMATE_ELEM_SIZE = 8; public static String join(Collection col, char delim) { int len = col.size(); if (len == 0) return ""; StringBuilder buf = new StringBuilder(ESTIMATE_ELEM_SIZE * len); for (Object elem : col) { buf.append(elem).append(delim); } return buf.substring(0, buf.length() - 1); } This shows some techniques others have shared: use StringBuilder , do not put if check within loop, and use foreach enhanced loop. I would also recommend changing the first parameter to the most generic type that makes sense so it is more reusable. In this case, since you really do not need indexes to address each element, this can specify a Collection . Note there is also no need to cast to String since StringBuilder.append() will convert the element to a String if necessary. This allows you to use this with collections containing other kinds of objects other than strings.
