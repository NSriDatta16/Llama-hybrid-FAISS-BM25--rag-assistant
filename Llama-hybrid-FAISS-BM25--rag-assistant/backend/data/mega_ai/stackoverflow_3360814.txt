[site]: stackoverflow
[post_id]: 3360814
[parent_id]: 1966771
[tags]: 
I don't like :bufdo solutions as this command always messes up the current windows organisation. In normal time, I'd use lh#buffer#jump() that jumps to the window where the named buffer is opened if it is already opened, or opens the window otherwise. function! s:Run0() call lh#buffer#jump('/path/to/pro12.exe.output', 'vsp') silent exe '!ls' endfunction Given the requested "to define a function which would open a vertical split" , we could simply use: function! s:Run1() let bn = bufnr('/path/to/pro12.exe.output') if bn >= 0 exe 'bw '.bn endif silent exe '!pro12' vsp /path/to/pro12.exe.output endfunction nnoremap Âµ :call Run1() Last thing. If as I suspect pro12 writes to stdout (the standard output, i.e. ~ the console), the last two lines of the function shall become: vsp /path/to/pro12.exe.output r!pro12 The "/path/to/pro12.exe.output" may be replaced with anything unique. Typically, I'd use a scratch buffer with a unique name having "pro12 result" in it. PS: if in the function (this is important) you add a nnoremap q :bw you'll be able to simply quit the output window simply by hitting q , from within the output window.
