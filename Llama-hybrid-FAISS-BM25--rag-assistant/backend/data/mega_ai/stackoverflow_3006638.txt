[site]: stackoverflow
[post_id]: 3006638
[parent_id]: 2999437
[tags]: 
It sounds like the best strategy (going forward) is to branch-on-project. If Dev1 and Dev2 are working on fundamentally different things, they should each have their own branch of the code. Keep in mind that everything in TFS is stored as deltas and pointers, so you aren't massively increasing the size of your repository by doing this. Until the file changes, the new branch is only a pointer to the original file, then when the file is checked in, only the delta is stored. In your current situation, you're doing what's called a "cherry-pick" merge. This is not a fun thing to do (as you are finding out), and it is prone to PEBKAC errors. For this reason, cherry-pick merges are strongly discouraged. However, if you do need to do cherry-pick merges, you can put some control around by merging by changeset (instead of latest). To do this, identify the changesets that Dev1 has checked into your Dev branch, then merge those changesets into your mainline branch. You'll need to do it in order from oldest to newest to be sure to get all of the files. Your best bet, if you are going to do this, will be to either write a utility to do it, or move down to the TF.EXE command line, so you can batch your merges together. Remember to do your merges in a clean workspace, and you can batch up all of your merges before you check in. The key lesson you are learning here is that your branching strategy/methodology is one of the most important things about SCM (in general). We migrated from StarTeam to TFS a little over a year and a half ago, and when we did, we spent approximately 4 months revising our branching approach until we came up with something that fit our environment and our development processes.
