[site]: stackoverflow
[post_id]: 5067119
[parent_id]: 5066954
[tags]: 
An ArrayList is a good implementation if you need to store your objects in a list. A good alternative for a collection of books: a Map implementation. This is useful if every book can be identified by a unique key (name, ISBN number, ...) and you use that key to "get" a book from the collection. A book is an object on its on and should be modeled with a Book class. So if you want to store books in list structure, this would be OK: List books = new ArrayList (); books.add(new Book("Robert C. Martin","Clean Code")); books.add(new Book("Joshua Bloch","Effective Java")); For a map, a code fragment could look like this: Map books = new HashMap (); books.put("978-0132350884", new Book("Robert C. Martin","Clean Code")); books.put("978-0321356680", new Book("Joshua Bloch","Effective Java")); Edit - finding a book and updating the price With a list, you have to iterate through the list until you find the object that represents the book you're looking for. It's easier with the map shown above, if you always can use the ISBN, for example. With the list, it goes like this: List books = getBooks(); // get the books from somewhere for (Book book:books) { if (matchesSearchCriteria(book)) { // some method to identify a book, placeholder! book.setPrice(newPrice); // modify the books price break; } }
