[site]: stackoverflow
[post_id]: 1969826
[parent_id]: 1969087
[tags]: 
Not trying to defend Django (that is not my job! :-)) just trying to give you some pointers on your list of limitations... as of december 2009 no model validation What exactly do you mean by this? Validation is available at the form level... And you can always override the save() method to implement whatever logic you desire and stop the save operation... Can you give an example of a scenario? the templating system is only good as far as you don't need custom template tags the idea to separate the design from the logic seemed good, it is frustrating, that I cannot sum 2 numbers in the view Add two numbers? That said, you are not married to Django's templating system. You can use, for instance, Jinja2 . the template language is not designer friendly Uhhh... Why? Most designers I worked with had no problem working with template languages way more complex than Django's... Could you give an example of what you see as unfriendly? Maybe there is a work-around. the stack trace of an ex in a custom template tag is useless (if used with python 2.6). There is a patch for it, but it will go into django just in 1.2 I haven't experienced this stack trace issue you discuss. You can always install the patch until Django 1.2 is around though. So it seems you have a solution available. django's orm (to connect to legacy systems) cannot handle blob fields If you are dealing with the need to store files in the database, maybe you should look at the django-storages ' DatabaseStorage. cannot handle multi-column pk fields This, alongside with multiple database support, are the areas of real need of improvement - I agree. I suppose you could not use models (just straight SQL) for models that have the multi-column pk requirement (yes, it would kill the admin, but it is doable). Frankly - I don't have that problem in my models because I prefer surrogate primary keys - if a legacy model is on my way, I add a surrogate primary key to it - all the legacy code should continue to work and Django will be happy. But I do have complete control over the database tables, which might not be your case. Multi-column primary keys are medium priority for the 1.2 release . Multidb is high priority for 1.2 release . The 1.2 release is expected by March 2010 . Sure, the date is not written in stone. Given my experience with other frameworks, I would rather work around my issues and stick to Django.
