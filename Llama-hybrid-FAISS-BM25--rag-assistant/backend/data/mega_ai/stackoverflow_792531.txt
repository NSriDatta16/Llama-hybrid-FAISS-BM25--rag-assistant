[site]: stackoverflow
[post_id]: 792531
[parent_id]: 
[tags]: 
C#: How to Implement and use a NotNull and CanBeNull attribute

I want to let programmers and myself know that a method does not want null and if you do send null to it anyways, the result will not be pretty. There is a NotNullAttribute and a CanBeNullAttribute in Lokad Shared Libraries , in the Lokad.Quality namespace. But how does that work? I looked at the source-code of those two attributes, and it looks like this: [AttributeUsage(AttributeTargets.Method | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.Delegate | AttributeTargets.Field, AllowMultiple = false, Inherited = true)] [NoCodeCoverage] public sealed class NotNullAttribute : Attribute { } [AttributeUsage(AttributeTargets.Method | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.Delegate | AttributeTargets.Field, AllowMultiple = false, Inherited = true)] [NoCodeCoverage] public sealed class CanBeNullAttribute : Attribute { } Two empty classes inheriting from Attribute . How are they used? Do you have to look up xml-documentation and know that it is there? Cause I tried to both make my own copy of the attribute and to use the Lokad version, but when I tried to send a null directly in, I got no message. Neither from ReSharper nor from VS. Which I kind of expected actually. But how are they used? Can I somehow make VS generate warnings for me if I try to send something that is null in there? Or is it just used in some kind of testing framework? Or?
