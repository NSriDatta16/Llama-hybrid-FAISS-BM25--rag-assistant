[site]: stackoverflow
[post_id]: 748783
[parent_id]: 748503
[tags]: 
I have worked on both Green field project with fully unit tested code bases and large C++ applications that have grown over many years and with many different developers on them. Honestly, I would not bother an attempt to get a legacy code base to the state where units tests and test first development can add a lot of value. Once a legacy code base gets to a certain size and complexity getting it to the point where unit test coverage provides you with a lot of benefits becomes a task equivalent to a full rewrite. The main problem is that as soon as you start refactoring for testability you will begin introducing bugs. And only once you get high test coverage can you expect all those new bugs to be found and fixed. That means that you either go very slowly and carefully and you do not get the benefits of a well unit tested code base until years from now. (probably never since mergers etc happen.) In the mean time you are probably introducing some new bugs with no apparent value to the end user of the software. Or you go fast but have an unstable code base until all you have reached high test coverage of all your code. (So you end up with 2 branches, one in production, one for the unit-tested version.) Of cause this all a matter of scale for some projects a rewrite might just take a few weeks and can certainly be worth it.
