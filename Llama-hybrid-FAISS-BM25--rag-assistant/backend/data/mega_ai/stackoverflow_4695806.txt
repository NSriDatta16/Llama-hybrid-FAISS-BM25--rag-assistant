[site]: stackoverflow
[post_id]: 4695806
[parent_id]: 
[tags]: 
Finding the maximum number of child nodes in a tree

First, I should make it clear that this is required for an academic project. I am trying to find the maximum number of child nodes for any node in a tree, using Common Lisp. My current code is shown below - I'm not 100% on the logic of it, but I feel it should work, however it isn't giving me the required result. (defun breadth (list y) (setf l y) (mapcar #'(lambda (element) (when (listp element) (when (> (breadth element (length element)) l) (setf l (breadth element (length element))) ))) list) l) (defun max-breadth(list) (breadth list (length list)) ) As an example, running (max-breadth '(a ( (b (c d)) e) (f g (h i) j))) should return 4. Edit: Trace results and actual return values, forgot these: CG-USER(13): (max-breadth '(a ( (b (c d)) e) (f g (h i) j))) 0[6]: (BREADTH (A ((B (C D)) E) (F G (H I) J)) 3) 1[6]: (BREADTH ((B (C D)) E) 2) 2[6]: (BREADTH (B (C D)) 2) 3[6]: (BREADTH (C D) 2) 3[6]: returned 2 2[6]: returned 2 1[6]: returned 2 1[6]: (BREADTH (F G (H I) J) 4) 2[6]: (BREADTH (H I) 2) 2[6]: returned 2 1[6]: returned 2 0[6]: returned 2 2 Does anyone have any ideas where I'm going wrong? I suspect it's related to the second conditional, but I'm not sure.
