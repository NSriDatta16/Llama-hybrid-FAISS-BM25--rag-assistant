[site]: stackoverflow
[post_id]: 1283763
[parent_id]: 1283725
[tags]: 
The index of recipes to ingredients is very good. But it also makes your recipe table seem pointless. A recipe is made up of 4 things: A list of ingredients. The quantity of each ingredient. The name of the recipe. The preparation and cooking instructions (what might be considered the actual recipe). So if you have a table that indexes the recipe index number to the ingredient index number, you don't really need to list each ingredient index number within the recipe itself. You could, in fact, have your recipe/ingredient index have two more columns, one for the quantity of the ingredient (a simple floating number between .1 and 100, let's say), and another column for the units for that quantity (ounces, tablespoons, cups, etc.) which, based on your other tables, I imagine you would want to be a integer which ties to a table of possible measurements. Speaking of, you would also want to have a measurement called something like "self", for instances of the ingredient being "eggs" and quantity being "3" so that it would resolve to "3 eggs" without the need for ounces or cups. Also, you mention that "0 will be used" but in what situation does a recipe call for 0 of something? Just curious. So the result would be: #table of recipes names id int(32) name char(32) #table of ingredients id int(32) ingredient char(32) #table of instructions id int(32) rec_id int(32) #foreign key for recipes instruct text #table of units id int(32) unit (text) #table of recipe-ingredients id int(32) rec_id int(32) #foreign key for recipes igred_id (32) #foreign key for ingredient quant float(5, 2) #amount per ingred unit_id int (32) Now you can do a query for any or all ingredients checked off, it can return the index of the recipes that match, you output this as a list to the user. The user selects the recipe that gets their attention, which triggers a query for the recipe instructions and another query for the recipe ingredients (which already has the amounts in the same table).
