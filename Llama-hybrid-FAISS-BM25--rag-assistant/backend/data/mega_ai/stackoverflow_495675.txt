[site]: stackoverflow
[post_id]: 495675
[parent_id]: 
[tags]: 
Standardized approach to digital signatures of files via .NET

I am building a system for distributing packages (.zip archives) created by different organizations. I'd like a way to verify that the publisher of a package is indeed who they claim to be, and that the file has not been tampered with. To verify the publisher, a system similar to what is used by web browsers is required - e.g., my application contacts the root certificate authorities, who verify the identity. In other words, the 'green bar' :) I'm guessing the package creation would work like this: Author creates zip package Author hashes package and signs the hash It is re-packaged, with: A header containing the signed hash, and the public certificate A body containing the contents of the zip file Package opening would work like this: Take the body of the data Hash it using the same algorithm Decrypt the package's hash using the public key from the certificate Compare the two hashes - we now have integrity Contact the root CAs to verify the identity This way, I have verified the identity, and also verified the contents (the contents themselves do not need to be encrypted - the goal is verification, not privacy). So my questions are: Is the above the correct way to approach it? What hashing algorithm do people normally use? I assume it should be one-way. Would you just choose one (MD5, SHA1, SHA2?) or is it more normal to support a variety and let the package author tell you which one they used (e.g., the header of the document contains the name of the hashing function). How do you work with the root CA's? Is this the job of the X509Store class, or are there additional steps involved? What kind of certificates are involved here? The same kind of certificates used to sign .NET assemblies? (Code-signing certificates?) Lastly, if an organization does not have a paid-for certificate and instead decide to use a self-issued certificate, I assume I can still verify the hashes (for the sake of data integrity) without having to install stuff into the computer's certificate stores or any magic like that (in these cases, I'd just display: "Published by XYZ Co. (Unverified)". Is this correct? I have found plenty of links on how to use the X509 and RSACryptoServiceProvider, so I can probably figure the code out, I guess I'm more interested in the process and knowing I'm using the right techniques.
