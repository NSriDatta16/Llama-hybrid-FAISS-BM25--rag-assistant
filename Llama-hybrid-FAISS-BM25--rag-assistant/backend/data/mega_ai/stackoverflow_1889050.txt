[site]: stackoverflow
[post_id]: 1889050
[parent_id]: 1888368
[tags]: 
Simulated annealing , closely related to Markov Chain Monte Carlo (MCMC) . The variant you probably want is Metropolis-Hastings . When you get the hang of it, it's quite nice. Possibly there are some ways to optimize it because your inputs and result are all integers. It is compute-intensive and may require some tuning, but it is quite robust, and I'm not sure other methods could do any better. Here's some brain-dead code to do it: const int n = 100; // length of vector to optimize int a[n]; // the vector to optimize double P(a){..} // Get the probability of vector a. // This is the function to optimize. // for a large number of a samples for (i = 0; i Ways to tweak it are to widen or narrow the proposal distribution, so it takes larger or smaller steps, or you can have it initially take larger steps and then smaller steps. What you're looking for is a percentage of steps that are kept that is neither too high nor too low. You probably want to have a "burn-in" phase of an initial 1k or so samples that you throw away, while it hunts for the area of the mode. And by all means, profile P. It needs to be as fast as possible. Here's my favorite way to do that.
