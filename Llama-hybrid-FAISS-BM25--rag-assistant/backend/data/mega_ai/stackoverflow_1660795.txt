[site]: stackoverflow
[post_id]: 1660795
[parent_id]: 1660501
[tags]: 
long hash = string.hashCode(); Yes, the top 32 bits will be 0, but you will probably run out of hardware resources before you run into problems with hash collisions. The hashCode in String is quite efficient and well tested. Update I think the above satisfies the simplest thing which could possibly work , however, I agree with @sfussenegger idea of extending the existing String hashCode. In addition to having a good hashCode for your String, you may want to consider rehashing the hash code in your implementation. If your storage is used by other developers, or used with other types, this can help distributed your keys. For example, Java's HashMap is based on power-of-two length hash tables, so it adds this function to ensure the lower bits are sufficiently distributed. h ^= (h >>> 20) ^ (h >>> 12); return h ^ (h >>> 7) ^ (h >>> 4);
