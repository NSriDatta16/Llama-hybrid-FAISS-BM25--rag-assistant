[site]: stackoverflow
[post_id]: 3189446
[parent_id]: 3161649
[tags]: 
I haven't worked with handle objects, but in general, there is per-mxarray overhead in saving and loading, so optimizing MAT files is a matter of converting the data in them to a form with fewer mxarrays. An mxarray is a single-level array structure. For example: strs = {'foo', 'bar', 'baz'}; The strs array contains 4 mxarrays: one cell array and 3 char arrays. To speed up saving and loading, try doing this when saving, and the inverse when loading. - Convert cellstr to 2-D char - Convert record-organized structs and objects to planar-organized - Eliminate redundant objects by storing a canonical set of values in one array and replacing object instances with indexes in to that array. (This is probably not relevant for handles, which inherently behave this way.) "Record-organized" means an array of N things is represented as an N-long array of structs with scalar fields; "planar-organized" means it's represented as a scalar struct containing N-long arrays in its fields. See if you can convert your in-memory object graph to a normalized form that fits in a few large primitive arrays, similar to how you might store it in SQL. The object properties for all the objects in one set of arrays, and the handle relationships as (id, id) tuples held in numeric arrays, maybe using indexes into the property arrays as your object ids. A saveobj and loadobj defined at the "top" class in your object graph could do the conversion. Also, if you are using network file systems, try doing your saving and loading on a local filesystem with temporary copies. For reading, copy the MAT file to tempdir and then load() from there; for writing, save() to tempdir and then copy it to the network drive. In my experience, save() and load() are substantially faster with local I/O, enough that it's a big net win (2x-3x speedup) even with the time to do the copies. Use tempname() to pick temp files. With the profiler, are you using the "-timer real" option? By default, "profile" shows CPU time, and this is I/O-centric stuff. With "-timer real", you should see those other 180 seconds of wall time attributed to save() and load(). Unfortunately, since they're builtins, the profiler won't let you see inside them, and that might not help much.
