[site]: stackoverflow
[post_id]: 2759449
[parent_id]: 2759304
[tags]: 
hehehe. At first I read that your friend was saying that a Circle should be an Ellipse and wrote a long tirade about why they were full of it. You should listen to your friend, except that I hope they're not saying that a SparseMatrix "is-a" MatrixBase. The term means different things in the real world vs. the modeling world. In the modeling world, "is-a" means following the Liskov Substitution Principle (look it up!). Alternatively it means that SparseMatrix must follow the contract of MatrixBase in that member functions must not require any extra preconditions and must meet no less postconditions. I don't know exactly how this applies to the matrix issue but if you look into the terms I used in the previous paragraph (LSP and Design by Contract) then you should be well on your way toward learning the answer to your problem. One way that might apply in your case is to take the various commonalities across your hierarchy and make them abstract interfaces. Then inherit from these interfaces in those classes that respond to them correctly. This would allow you to write functions that should allow common use and yet still retain separation where there is too much variation.
