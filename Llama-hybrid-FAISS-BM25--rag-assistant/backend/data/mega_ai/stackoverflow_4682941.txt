[site]: stackoverflow
[post_id]: 4682941
[parent_id]: 4682889
[tags]: 
There are two ways to answer this question: Are there cases where float == float gives the correct result? Are there cases where float == float is acceptable coding? The answer to (1) is: Yes, sometimes. But it's going to be fragile, which leads to the answer to (2): No. Don't do that. You're begging for bizarre bugs in the future. As for a call of the form foo(BAR) : In that particular case the comparison will return true, but when you are writing foo you don't know (and shouldn't depend on) how it is called. For example, calling foo(BAR) will be fine but foo(BAR * 2.0 / 2.0) (or even maybe foo(BAR * 1.0) depending on how much the compiler optimises things away) will break. You shouldn't be relying on the caller not performing any arithmetic! Long story short, even though a == b will work in some cases you really shouldn't rely on it. Even if you can guarantee the calling semantics today maybe you won't be able to guarantee them next week so save yourself some pain and don't use == . To my mind, float == float is never* OK because it's pretty much unmaintainable. *For small values of never.
