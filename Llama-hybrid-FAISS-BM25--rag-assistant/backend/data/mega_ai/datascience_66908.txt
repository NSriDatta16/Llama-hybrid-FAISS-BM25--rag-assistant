[site]: datascience
[post_id]: 66908
[parent_id]: 66577
[tags]: 
I have a similar use-case and a working product based on tensorflow object-detection api and pytesseract for OCR. On top of the extracted text, I perform regex for validation of the extracted information and cleaning it to meet requirements of other processes. Steps : 1. Annotate images with some tool like labelimg . I annotated a set of 1K images, similar to yours, with 23 different classes. The dataset is unbalanced with some classes appearing almost in every image to some classes appearing in only as few as 60. However, there are ways to ensure that this imbalance does not affect the performance of the network. 2. Choose a model from tf model zoo (I use this frcnn model) and retrain the last two layers using transfer learning. 3. Export the inference graph , perform object detection to identify the region of interest, and run OCR on the region of interest to extract the text. I'd recommend storing the extracted data in a dictionary with class of the object as key and the extracted text as value. 4. Finally, have regex validate the text in the extracted field and perform any manipulation/transformation that is necessary. The trained model can be deployed to production with help of tfserving . The same trained network can be deployed into a mobile app as well - look for tutorials on tensorflowlite for this. Hope my answer helps you! I had a tough (but interesting) time gathering the knowledge required to get a production grade product that currently serves hundreds of request everyday. I would recommend reading completely all the links I have shared in this answer, and feel free for more questions. Good luck!
