[site]: crossvalidated
[post_id]: 228416
[parent_id]: 226699
[tags]: 
In order to better understand the problem I think it is worth explaining the main idea of how order-preserving cryptography works. Imagine that we have column vector $\mathbf{x}$ than we want to encrypt. The encryption function is $f(\cdot)$ and it is monotonically increasing, and potentially with varying slope. The cipher text of $\mathbf{x}$ is $\mathbf{y}=f(\mathbf{x})$, and has the following properties if $x_1 \geq x_2$ then $y_1 \geq y_2$ if $x_2 = x_2$ then $y_2 = y_2$ (this is usually prevented) $d(x_1,x_2) \neq d(y_1,y_2)$ if $d(x_1,x_2) \geq d(x_3,x_4)$ does not give information about $d(y_1,y_2)$, and $d(y_3,y_4)$ The second property can be prevented by adding noise to $\mathbf{x}$. For example if $x_i$ is an integer between $[0,9]$. Then, $\hat{\mathbf{x}}=10\times\mathbf{x}+\mathbf{n}$, where $\mathbf{n}$ is vector a of random integer between $[0,9]$. This transformation preserves the ordering in $\hat{\mathbf{y}}=f(\hat{\mathbf{x}})$, but removes the identification of attributes with the same value. Given that I think you should stick to tree based classifiers such as random forest.
