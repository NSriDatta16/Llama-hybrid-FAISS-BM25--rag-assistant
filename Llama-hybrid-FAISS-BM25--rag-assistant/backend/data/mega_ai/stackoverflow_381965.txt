[site]: stackoverflow
[post_id]: 381965
[parent_id]: 381918
[tags]: 
Consider this - it's a far more elegant way of achieving what you're trying to do - and that is removing items from your original list that appear in your target list. Consider the following lists: Dim OriginalList As New List(Of String)(New String() {"a", "b", "c", "d"}) Dim TargetList As New List(Of String)(New String() {"a", "b", "c"}) And here's how I'd remove all the items from the original that appear in the target... OriginalList.RemoveAll(Function(OriginalItem) TargetList.Contains(OriginalItem)) Which in C# would be written: OriginalList.RemoveAll(OriginalItem => TargetList.Contains(OriginalItem)); The less code you use to achieve a task, the less chance that coding bugs could be introduced. Side Note: This is very similar to an algorithm to test subsets. If you want to find out if set A is a subset of B, then you can iterate through B removing any corresponding items from A. Once you've finished iterating through B, if there are any items left in A, then it wasn't a subset of B. If there are no items left, then it was a subset of B.
