[site]: crossvalidated
[post_id]: 501754
[parent_id]: 
[tags]: 
GLMMadaptive - Hessian matrix problem Hurdle Beta Model

Data: I have a percentage (or proportion see paragraph below) outcome dataset with a high number of zero's. I have therefore attempted to run a hurdle beta model using the GLMMadaptive package in R. I would like to predict this percentage outcome that is measured in two groups of animals: one heterogeneous genotype group (het) and one wildtype group (wt). For each animal, this outcome is measured in 5 subsequent sessions (one day apart), each session contains 42 measurements. As discussed in the comments below, the outcome (or response variable) is not a continuous percentage, but rather a proportion. As it reflects the number of miss steps out of the total number of steps taken during 1 trial. The number of total steps per trial varies, though these absolute numbers are not known (not in the dataset). So I, therefore, see no option to convert this model to a count model. The data divided over the genotypes and sessions looks like this: Model: For the model I would like to test an interaction between genotype and session in the fixed part, both the zero-inflated and the beta part. To account for the multiple measurements per animal within a session, the random part contains random intercepts per animal ID. The code looks like this: mixed_model(fixed = perc~Genotype*Session, random =~1|MouseIdentifier, data=data1, family=hurdle.beta.fam(), na.action=na.exclude, zi_fixed=~Genotype*Session, zi_random=~1|MouseIdentifier, n_phis = 1) PROBLEM: This model gives me the error concerning the Hessian matrix: "Hessian matrix at convergence is not positive definite; unstable solution." If I look at the summary of the model, I see that the fixed effects coefficients are showing a lot NaN values, in contrast to the Zero-part coefficients: Solutions attempted: I've tried to add penalized = T to the model code, as I thought that the NaNs in the fixed part could be a sign of separation, this improved it slightly, as there were more coefficients calculated, though not all. But it still contained some NaNs and thus still gave me the error. I tried to simplify the model: remove the interaction, remove either predictor (Genotype or Session). Though the error remained. I also tried to simplify the Session variable. Genotype only has two levels, so can't be meaningfully simplified. I went from 5 sessions, to 2 sessions, with sessions 1,2 and 3 now being session 1 and session 4 and 5 being session 2. This improved it the most, only the intercept in the fixed part gives NaNs now. Though still the SEs of the other coefficients are minuscule and the error remains obviously. Adding the penalized = T argument did not further improve this: QUESTION: Is there any other way I could attempt to improve this hessian matrix situation? Is there an error in my code that I'm overlooking? Are there alternative glmms? Any input would be highly appreciated! Thank you!
