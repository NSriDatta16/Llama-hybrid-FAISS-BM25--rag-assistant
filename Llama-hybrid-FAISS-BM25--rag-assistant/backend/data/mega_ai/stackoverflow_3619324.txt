[site]: stackoverflow
[post_id]: 3619324
[parent_id]: 245963
[tags]: 
As pointed Jeff the tool NDepend can help to find unused methods, fields and types. To elaborate a bit, NDepend proposes to write Code Rule over LINQ Query (CQLinq) . Around 200 default code rules are proposed, 3 of them being dedicated to unused/dead code detection Basically such a rule to detect unused method for example looks like: // Dead Methods warnif count > 0 from m in Application.Methods where !m.MethodsCallingMe.Any() select m But this rule is naive and will return trivial false positives. There are many situations where a method is never called yet it is not unused (entry point, class constructor, finaliser...) this is why the 3 default rules are more elaborated: Potentially dead Types (hence detect unused class, struct, interface, delegate...) Potentially dead Methods Potentially dead Fields NDepend integrates in Visual Studio 2022, 2019, 2017,2015, 2013, 2012, 2010, thus these rules can be checked/browsed/edited right inside the IDE . The tool can also be integrated into your CI process and it can build reports that will show rules violated and culprit code elements. NDepend has also a VS Team Services extension . If you click these 3 links above toward the source code of these rules, you'll see that the ones concerning types and methods are a bit complex. This is because they detect not only unused types and methods, but also types and methods used only by unused dead types and methods (recursive). This is static analysis , hence the prefix Potentially in the rule names. If a code element is used only through reflection, these rules might consider it as unused which is not the case. In addition to using these 3 rules, I'd advise measuring code coverage by tests and striving for having full coverage. Often, you'll see that code that cannot be covered by tests, is actually unused/dead code that can be safely discarded. This is especially useful in complex algorithms where it is not clear if a branch of code is reachable or not. Disclaimer: I work for NDepend.
