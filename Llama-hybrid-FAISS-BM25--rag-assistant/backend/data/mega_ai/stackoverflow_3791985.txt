[site]: stackoverflow
[post_id]: 3791985
[parent_id]: 3790610
[tags]: 
Our team does something similar to this, so here's some ideas: we use a really high level begin/rescue transaction to make sure we don't get into weird half loaded states: begin ActiveRecord::Base.transaction do ...try to load a data source... end rescue ...error handling... end Email/page yourself when certain errors occur. We use exception_notifier but if you're sitting on Heroku the Exceptional plugin also seems like a good option. I've also heard of people having success w/ hoptoad Capturing state is VERY important for troubleshooting issues. Something that's worked quite well for us is GMail. Our loaders effectively have two phases: capture data and send it to our gmail account log into gmail, download latest data and parse it The second phase is the complex one, and if it fails a developer can simply log into the gmail account and easily inspect the failed message. This process has some limitations (per email and per mailbox storage limits, two phase pipeline, etc.) and we started out doing it because we had no other option, but it's proven shockingly resilient and convenient. Keep email in mind as a cheap/easy way to store noncritical state. We didn't start out thinking of using it that way and are now really glad we do. Logging into GMail feels better than digging through log files. Build a dashboard UI. We have a simple dashboard with a grid of sources by day that looks like this . Each box is colored either red or green based on whether the load for that source on that day succeeded. You can go one step further and set up a monitor on this UI (mon.itor.us or equivalent) that alarms if some error threshold is met.
