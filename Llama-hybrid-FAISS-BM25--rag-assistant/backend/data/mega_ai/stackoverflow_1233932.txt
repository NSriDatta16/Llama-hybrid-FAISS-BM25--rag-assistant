[site]: stackoverflow
[post_id]: 1233932
[parent_id]: 1233486
[tags]: 
The problem here is deciding what is SUT and what is Test. With your example you are trying to Test the Select() method and therefore want to isolate that from the database. You have several choices, Virtualise the GetAgentFromDatabase() so you can provide a derived class with code to return the correct values, in this case creating an object that provides IDataReaderFunctionaity without talking to the DB i.e. class MyDerivedExample : YourUnnamedClass { protected override IDataReader GetAgentFromDatabase() { return new MyDataReader({"AgentId", "1"}, {"FirstName", "Fred"}, ...); } } As Gishu suggested instead of using IsA relationships (inheritance) use HasA (object composition) where you once again have a class that handles creating a mock IDataReader , but this time without inheriting. However both of these result in lots of code that simply defines a set of results that we be returned when queried. Admittedly we can keep this code in the Test code, instead of our main code, but its an effort. All you are really doing is define a result set for particular queries, and you know whatâ€™s really good at doing that... A database I used LinqToSQL a while back and discovered that the DataContext objects have some very useful methods, including DeleteDatabase and CreateDatabase . public const string UnitTestConnection = "Data Source=.;Initial Catalog=MyAppUnitTest;Integrated Security=True"; [FixtureSetUp()] public void Setup() { OARsDataContext context = new MyAppDataContext(UnitTestConnection); if (context.DatabaseExists()) { Console.WriteLine("Removing exisitng test database"); context.DeleteDatabase(); } Console.WriteLine("Creating new test database"); context.CreateDatabase(); context.SubmitChanges(); } Consider it for a while. The problem with using a database for unit tests is that the data will change. Delete your database and use your tests to evolve your data that can be used in future tests. There are two things to be careful of Make sure your tests run in the correct order. The MbUnit syntax for this is [DependsOn("NameOfPreviousTest")] . Make sure only one set of tests is running against a particular database.
