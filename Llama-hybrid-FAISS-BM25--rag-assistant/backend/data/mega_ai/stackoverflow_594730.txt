[site]: stackoverflow
[post_id]: 594730
[parent_id]: 
[tags]: 
Overriding static variables when subclassing

I have a class, lets call it A, and within that class definition I have the following: static QPainterPath *path; Which is to say, I'm declaring a static (class-wide) pointer to a path object; all instances of this class will now have the same shared data member. I would like to be able to build upon this class, subclassing it into more specialised forms, layering behaviour, and with each class having its own unique path object (but not having to repeat the boring bits like calculating bounding boxes or calling the painting routines). If I subclass it to create a class F (for example), I want F to use the inherited drawing routines from A, but to use the static (class-wide) path object declared in F. I have tried having the declaration above in the private section (and repeating it in the derived class F), and tried having it in the protected section, all with no joy. I can sort of see why this is happening: void A::paint() { this->path... is referring to A::path instead of F::path, even when the object is of class F. Is there an elegant way to get round this, and allow each class to maintain a static path object, while still using drawing code defined in the base class, and having all classes (except perhaps the base class) be real and instantiatable?
