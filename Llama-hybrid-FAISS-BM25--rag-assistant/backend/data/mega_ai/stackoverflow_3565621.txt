[site]: stackoverflow
[post_id]: 3565621
[parent_id]: 
[tags]: 
JAXB: Mapping separate date and time elements to one property

I'm working with a XML structure that looks like this: 20100825 141500 ABC 20100825 153000 123 20100825 154500 And I want to map date and time to a single Date or Calendar property in my bean. Is this possible using jaxb annotations? The class javax.xml.bind.annotation.adapters.XmlAdapter looks like it might be able to do this, but I have to admit I don't fully understand its javadoc. A workaround would be to create additional setters for the date and time strings that set the corresponding values in a Calendar property like this: private Calendar calendar; public void setDate(String date) { if (calendar == null) { calendar = new GregorianCalendar(); } calendar.set(YEAR, Integer.parseIn(date.substring(0, 4))); calendar.set(MONTH, Integer.parseIn(date.substring(4, 6))-1); calendar.set(DAY_OF_MONTH, Integer.parseIn(date.substring(6, 8))); } // Similar code for setTime The problem (apart from the additional code) is that I can't always guarantee that the date is set before the time value, but I can't think of a specific example where this might give worng results. Any examples for an annotation based solution or improvements / counter examples for the code above are appreciated. Edit: I went with the second answer given by Blaise Doughan , but modified his DateAttributeTransformer to be more flexible and not expect the field name to contain the string "DATE". The field names are taken from the XmlWriterTransformer annotations on the field: @Override public Object buildAttributeValue(Record record, Object instance, Session session) { try { String dateString = null; String timeString = null; String dateFieldName = null; String timeFieldName = null; // TODO: Proper Exception handling try { XmlWriteTransformers wts = instance.getClass().getDeclaredField(mapping.getAttributeName()).getAnnotation(XmlWriteTransformers.class); for (XmlWriteTransformer wt : wts.value()) { String fieldName = wt.xpath(); if (wt.transformerClass() == DateFieldTransformer.class) { dateFieldName = fieldName; } else { timeFieldName = fieldName; } } } catch (NoSuchFieldException ex) { throw new RuntimeException(ex); } catch (SecurityException ex) { throw new RuntimeException(ex); } for(DatabaseField field : mapping.getFields()) { XMLField xfield = (XMLField)field; if(xfield.getXPath().equals(dateFieldName)) { dateString = (String) record.get(field); } else { timeString = (String) record.get(field); } } return yyyyMMddHHmmss.parseObject(dateString + timeString); } catch(ParseException e) { throw new RuntimeException(e); } }
