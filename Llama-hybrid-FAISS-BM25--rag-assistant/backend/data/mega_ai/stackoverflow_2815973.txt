[site]: stackoverflow
[post_id]: 2815973
[parent_id]: 2815956
[tags]: 
Look at what you have inside the Select and ForEach method calls: options.Attributes[i] = new EntityCodeKey { EntityCode = objEntityCode[i].EntityCodes , OrganizationCode = Constants.ORGANIZATION_CODE }; This is essentially an Action -- that is, code that does something but doesn't return something. This is why it makes sense within ForEach but not Select -- Select expects (in this case) a Func -- code that returns something (of some type T ). Since you are simply assigning Attributes[i] to a new EntityCodeKey , this code does not fall under the umbrella of what you would normally find within a Select call. Note that technically , the above code actually would return something -- namely, the value stored in options.Attributes[i] -- if you removed the semicolon from the end. Why? Two reasons: A single-line lambda expression (not terminating in a semi-colon) returns whatever it evaluates to. This is why something like person => person.Name can actually be interpreted as a Func . An assignment operation evaluates to the assigned value. This is why you can write x = y = z -- because y = z actually evalutes to the newly assigned value of y . So it's true: your code, sans semi-colon, would actually evaluate to options.Attributes[i] . But writing the code in this way would be, in my opinion anyway, pretty confusing.
