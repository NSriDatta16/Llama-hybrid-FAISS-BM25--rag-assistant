[site]: stackoverflow
[post_id]: 3064073
[parent_id]: 3063987
[tags]: 
Your storage data type is insufficient to store all the information you want to report. You could get there by using a vector for count storage but you'd have to do a lot of book-keeping to make sure you actually insert a 0 when a word is not encountered and create the vector with the right size when a new word is encountered. Not a trivial task. You could switch your count part to a map of numbers, first being line and second being count... That would reduce the complexity of your code but wouldn't exactly be the most efficient method. At any rate, you can't do what you need to do with just a std::map Edit: just thought of an alternative version that would be easier to generate but harder to report with: std::vector >. For each new line in a file you'd generate a new map and push it onto the vector. You could create a helper type set to contain all the words that appear in a file to use in your reporting. That's probably how I'd do it anyway except I'd encapsulate all that crap in a class so that I'd just do something like: my_counter.word_appearance(word,line_no);
