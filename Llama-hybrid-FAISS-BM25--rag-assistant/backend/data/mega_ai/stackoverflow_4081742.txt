[site]: stackoverflow
[post_id]: 4081742
[parent_id]: 4081328
[tags]: 
Storing DDL by object type is a reasonable approach-- anything is likely to be easier to navigate than a monolithic SQL script. Personally, though, I'd much rather have DDL organized by function. If you're building an accounting system, for example, you probably have a series of objects to manage accounts payable and a separate set of objects to manage accounts receivable along with some core objects for managing the general ledger accounts. That would lead to something along the lines of database/ general_ledger/ tables/ packages/ sequences/ accounts_receivable/ tables/ packages/ sequences/ accounts_payable/ tables/ packages/ sequences As the system gets more complex, that hierarchy would naturally get deeper over time. This sort of approach would more naturally mirror the way non-database code is stored in source control. You wouldn't have a single directory of Java classes in a directory structure like middle_tier/ java/ Foo.java Bar.java You would organize the classes that implement the same sorts of business logic together and separate from the classes that implement different bits of business logic.
