[site]: stackoverflow
[post_id]: 2316895
[parent_id]: 2316865
[tags]: 
EDIT - In response to your question edit In order to be able to select the curve itself to move the control points, I would suggest that Bezier curves are definitely not the way forward - you would have to solve the equation in reverse in order to find the right control point locations. You would also find that in some cases it's actually not possible to move the control points to make the curve go where you want. If you were using B-Splines, then you could simply insert a new control point at the point on the curve closest to where the user has clicked, and then move the new control point. So, effectively, you'd be adding a new control point. Original text Assuming you already have an implementation of a bezier curve which, given a set of control points (typically three for Bezier but can be as many as you want) can produce a set of points to be joined with lines on the display device (typically you use the 0 >= u parametric equation), then this is easy. Your control points determine where the curve goes, so you simply need to implement selection feedback and drag/drop on those control points. If you're looking for exact point matching, however, bezier curves are not ideal since they only pass through the first and last control points. And the more points you add to the curve, the less accurate they become. B-Splines would be better, and variations of these are what you actually see in photoshop et al.
