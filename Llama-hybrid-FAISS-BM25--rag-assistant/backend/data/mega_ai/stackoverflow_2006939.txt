[site]: stackoverflow
[post_id]: 2006939
[parent_id]: 2004931
[tags]: 
The real reason is not the performance reason -- that will be measured in billionths of a second, if it has any effect at all. The real reason is that an instance method which makes no use of its instance is logically a design flaw. Suppose I wrote you a method: class C { public int DoubleIt(int x, string y, Type z) { return x * 2; } } Is this a well-designed method? No. It takes all kinds of information in which it then ignores and does not use to compute the result or execute a side effect. Why force the caller to pass in an unnecessary string and type? Now, notice that this method also takes in a C, in the form of the "this" passed into the call. That is also ignored. This method should be static, and take one parameter. A well-designed method takes in exactly the information it needs to compute its results and execute its side effects, no more, no less. Resharper is telling you that you have a design flaw in your code: you have a method that is taking in information that it is ignoring. Either fix the method so that it starts using that information, or stop passing in useless data by making the method static. Again, the performance concern is a total red herring; you'll never notice a difference that small unless what you're doing takes on the order of a handful of processor cycles. The reason for the warning is to call your attention to a logical design flaw. Getting the program logic right is far more important than shaving off a nanosecond here and there.
