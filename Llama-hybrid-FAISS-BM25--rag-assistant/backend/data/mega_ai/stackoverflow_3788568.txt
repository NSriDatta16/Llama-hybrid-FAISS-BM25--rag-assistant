[site]: stackoverflow
[post_id]: 3788568
[parent_id]: 3787960
[tags]: 
What is it, specifically, that makes Haskell's type system It has been engineered for the past decade to be both flexible -- as a logic for property verification -- and powerful. Haskell's type system has been developed over the years to encourage a relatively flexible, expressive static checking discipline, with several groups of researchers identifying type system techniques that enable powerful new classes of compile-time verification. Scala's is relatively undeveloped in that area. That is, Haskell/GHC provides a logic that is both powerful and designed to encourage type level programming. Something fairly unique in the world of functional programming. Some papers that give a flavor of the direction the engineering effort on Haskell's type system has taken: Fun with type functions Associated types with class Fun with functional dependencies
