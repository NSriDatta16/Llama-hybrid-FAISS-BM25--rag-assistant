[site]: stackoverflow
[post_id]: 5297904
[parent_id]: 5297775
[tags]: 
The problem's inherent in the design, if I understand the requirement correctly. The first BitBlt() copies the previous contents on to the buffer, then you draw the line, and then you apply the changes to the screen, which gives the exact results you described. This way you're only adding graphics rather than replacing, and you see several lines instead of one. If you want to display a line that's being dragged by the mouse, you need to first fill the back-buffer with whatever background you had in mind (call it the constant-data ), and paint on it the relevant graphics (call it changing-data ) every mouse move. Anyway, I believe that commenting that first BitBlt() should do the trick. Also, you're selecting a brush before calling the line functions, which use a pen . Shouldn't that call come before calling FloodFill() ? EDIT: Use a third buffer to hold the most recent data as suggested in my comment to yours. In your "mouse-up" handler, finally draw the new line on that buffer. So you read from that buffer in your mouse-move handler and on-paint handler, and write to it in the mouse-up handler, when the user is finally sure how he wants his line drawn.
