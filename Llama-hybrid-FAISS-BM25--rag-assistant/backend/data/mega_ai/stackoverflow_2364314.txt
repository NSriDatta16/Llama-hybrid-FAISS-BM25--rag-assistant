[site]: stackoverflow
[post_id]: 2364314
[parent_id]: 1612767
[tags]: 
Nisus - would you be willing to post the entire source code for your utility somewhere? that would really be helpful. thanks! Never mind.... I edited the apache definition file to only contain entries with defined extensions, then extended the code to load in the types/extensions from the text file at run time. Not elegant perhaps but sure beats creating/maintaining 630 lines of source code for the mime types. [in the constructor for MimeTypeCollection instead of this stuff: this.Add(new mimeTypeInfo("application/applixware",new List(new[] { ".aw" })));] // import mime/extension definition list to facilitate maintenance string dir = AppDomain.CurrentDomain.BaseDirectory; using (TextReader streamReader = new StreamReader(Path.Combine(dir, "MimeDefinitions.txt"))) { string input; while ((input = streamReader.ReadLine()) != null) { if (input.Substring(0, 1) != "#") { // text line format ::= [contenttype] [space delimited list of extensions, without dot] string contentType = input.Group("0\t1"); string extensionList = input.Group("1\t1"); string[] extensions = extensionList.Split(" ".ToCharArray()); List extensionSet = new List (); foreach (string term in extensions) { extensionSet.Add("."+term); } this.Add(new mimeTypeInfo(contentType, extensionSet)); } } } I also found that the Init() method would be called and the _extensions and _mime members would not be completely initialized so I changed it to read: if (_extensions == null || _mimes == null || _mimes.Count != this.Count) Anyway, I now how a class that can handle the external defs and local registry I needed. Thanks!
