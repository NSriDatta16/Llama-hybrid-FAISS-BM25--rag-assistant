[site]: stackoverflow
[post_id]: 2341427
[parent_id]: 2341256
[tags]: 
I have used this technique for a particular web application. I have mixed feelings about this approach. One pro is that this is really convenient for simple requirements. Another pro is that it is really easy to translate a database schema change in a change in the XML format, since everything is in one place. I found there are cons too. When your target XML gets more complex, has more nested structures then this solution can get rapidly out of hand. Consider for example this (taken from http://msdn.microsoft.com/en-us/library/ms345137(SQL.90).aspx#forxml2k5_topic5 ): SELECT CustomerID as "CustomerID", (SELECT OrderID as "OrderID" FROM Orders "Order" WHERE "Order".CustomerID = Customer.CustomerID FOR XML AUTO, TYPE), (SELECT DISTINCT LastName as "LastName" FROM Employees Employee JOIN Orders "Order" ON "Order".EmployeeID = Employee.EmployeeID WHERE Customer.CustomerID = "Order".CustomerID FOR XML AUTO, TYPE) FROM Customers Customer FOR XML AUTO, TYPE So essentially, you see that you begin writing SQL to mirror the structure of the XML output. And if you think about it, this is a bad thing - you're mixing the data retrieval logic with presentation logic - the fact that the presentation is in this case representation in a data exchange format, really does not change the fact that you're mixing two different things, making both of them harder. For example, it is quite possible that the requirements for the exact structure of the XML change over time, whereas the actual associated data requirements remain unchanged. Then you would be rewriting queries even though there is nothing wrong with the actual dataset you are already retrieving. That's a code smell if you ask me. Another consideration is performance/query tuning. I cannot say I have done much benchmarking of these types of queries, but I would typically avoid correlated subqueries like this whenever I can...and now, just because of this syntactic sugar, I would suddenly throw that overboard because of the convenience of generating XML with no intermediary language? I don't think it's a good idea. So in short, I would use this technique if I could considerably simplify things. But if I could anticipate that I would need an intermediary language anyway to generate all the XML structures I need, I would choose to not use this technique at all. If you are going to generate XML, do it all in one place, don't put some in the query and some in your program because it will become a nightmare to manage change and maintain it.
