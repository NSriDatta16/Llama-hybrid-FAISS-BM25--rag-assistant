[site]: stackoverflow
[post_id]: 1851978
[parent_id]: 
[tags]: 
Reading in and Writing out

I have written a program in Java to read in a text file of some metadata from images. They contain names and a long list of them sometimes over 4000 names. Unfortunately, many of these names are the same and so I wrote a program that takes the list in a .txt file and gets rid of the duplicates and outputs the new cleaned up and alphabetically sorted list to an output txt file. Additionally, the program adds HTML list tags to each name so that I can copy paste them wherever I need to. Example text file: Chatty Little Kitty Chatty Little Kitty Bearly Nuf Taz Got Lil Pepto However, it seems to not be working properly as I still have duplicates in my output file. However, the code I wrote, to me seems correct which is why I am asking if there is an issue with how I'm setting up my reads and writes. My Code: * This program takes in a text file that has a bunch of words listed. It then creates a single alphabetically * organized html list from that data. It also strips the data of dupblicates. */ import java.io.*; import java.util.Arrays; public class readItWriteIt { public static void main(String args[]) { int MAX = 10000; String[] lines = new String[MAX]; boolean valid = true; try{ //Set up Input FileInputStream fstream = new FileInputStream("test.txt"); DataInputStream in = new DataInputStream(fstream); BufferedReader br = new BufferedReader(new InputStreamReader(in)); String strLine; //Set up Output FileWriter ostream = new FileWriter("out.txt"); BufferedWriter out = new BufferedWriter(ostream); //counters int count = 0; int second_count = 0; //start reading in lines from the file while ((strLine = br.readLine()) != null){ //check to make sure that there aren't duplicates. If a line is the same as another line //set boolean valid to false else set to true. if((second_count++ > 0) && (count > 0)){ for(int i=0; i " + newlines[i] + " "); out.newLine(); } //close I/O in.close(); out.close(); }catch (Exception e){//Catch exception if any System.err.println("Error: " + e.getMessage()); } } } I wrote it like this import java.util.HashSet; import java.util.Set; import java.io.*; import java.util.Arrays; public class converter { public static void main(String[] args) { try{ //Set up Input FileInputStream fstream = new FileInputStream("test.txt"); DataInputStream in = new DataInputStream(fstream); BufferedReader br = new BufferedReader(new InputStreamReader(in)); String strLine; //Set up Output FileWriter ostream = new FileWriter("out.txt"); BufferedWriter out = new BufferedWriter(ostream); Set lines = new HashSet(); boolean result; while ((strLine = br.readLine()) != null){ result = lines.add(strLine.trim()); } String[] newlines = new String[lines.size()]; lines.toArray(newlines); Arrays.sort(newlines); //write it out to file in alphabetical order along with the list syntax for html for(int i = 0; i " + newlines[i] + " "); out.newLine(); } out.close(); in.close(); }catch (Exception e){//Catch exception if any System.err.println("Error: " + e.getMessage()); } } } But thanks to ewernli its now much more efficient.
