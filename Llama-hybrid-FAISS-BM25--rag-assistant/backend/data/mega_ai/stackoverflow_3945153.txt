[site]: stackoverflow
[post_id]: 3945153
[parent_id]: 3944808
[tags]: 
You can just change your function definition to take in an extra parameter that represents the size of the object passed in. Then just pass the size down. So your new function declarations looks like this: void (*func)(void* arg, size_t size) void doStuff(void *arg, size_t size) { somebool = *(bool*)arg; memcpy( arg, myStorage, size ); } void makeIt() { bool a = true; container->createTimedEvent(doStuff,(void*)&a,sizeof(bool), 5); } Then you can pass variables that are still on the stack and memcpy them in the timed event class. The only problem is that you don't know the type any more... but that's what happens when you cast to void* Hope that helps.
