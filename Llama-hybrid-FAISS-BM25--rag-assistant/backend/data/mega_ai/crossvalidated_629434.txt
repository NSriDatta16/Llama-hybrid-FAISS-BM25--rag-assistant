[site]: crossvalidated
[post_id]: 629434
[parent_id]: 
[tags]: 
Looking for an efficient way to calculate the correlation of different time series

I have 6 temperature sensors (columns) located at different places. Each one offers a measurement each hour. I have $168$ measurements (rows). I am working on python and I have already used the function numpy.corrcoeff(my_data) to obtain the correlation of the whole time series (a $6\times 6$ matrix). I want to calculate the correlation coefficient between the sensors at shifted times. To do that, I have generated a code in which I remove the first n rows of a sensors 1 and 2 and the last $n$ rows of sensors $3$ to $6$ . Then, I have calculated the correlation matrix using $168-n$ rows and the function numpy.corrcoeff(my_data_shifted) . I have also used cross_correlation_aux=np.correlate(my_data[sensor1], np.roll(my_data[sensor2], shift=n)) and two nested for loops to generate a vector cross_correlation appending all cross correlations and finding the maximum as optimal_shift=np.argmax(cross_correlation) I am looking for further alternatives to calculate the correlation shifted between times and sensors. Can someone please suggest me further alternatives to do this?
