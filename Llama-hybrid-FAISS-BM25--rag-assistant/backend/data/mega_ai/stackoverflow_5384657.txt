[site]: stackoverflow
[post_id]: 5384657
[parent_id]: 
[tags]: 
When, why and how to use wrappers?

I'm talking about wrappers for third-party libraries. Until recently I was trying to provide a general enough wrapper so I could easily switch libraries if needed. This however proved to be nearly impossible since libraries can vary greatly even in terms of how basic concepts are handled. So the question came to me why one should use wrappers at all. (In the past I have been encouraged by experienced coders to write wrappers for 3rd-party libs.) I came to the following conclusions; please tell me if they are wrong or if you have anything to add. If the library isn't widely used in the application (e.g. used by only one or two classes), don't write a wrapper at all, just use it directly. (Especially if it's a portable lib.) When you do write wrappers don't think you can make one-size-fit-all wrapper. Write something appropriate for the strengths of the lib. ... But in some cases you can still generalize the wrapper enough so that it'll be somewhat easier to switch libraries. (E.g.: most graphics libraries use images and fonts.) Wrappers are useful for when the library offers more functionality than you need. You can hide the unneeded functionality in the wrapper. In the case of C libs (if you're using C++), you can also write a wrapper to help you with automatic memory management. What do you think are the (dis)advantages of using wrappers, and how should they be used properly?
