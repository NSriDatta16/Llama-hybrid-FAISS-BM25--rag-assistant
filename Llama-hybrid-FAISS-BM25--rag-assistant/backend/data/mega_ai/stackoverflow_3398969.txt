[site]: stackoverflow
[post_id]: 3398969
[parent_id]: 3398744
[tags]: 
It isn't great, but this might work: public abstract class Organism : IDisposable { private static readonly List LiveOrganisms = new List (); private event EventHandler onBorn; public void InvokeBorn(EventArgs e) { foreach (var liveOrganism in LiveOrganisms .Where(liveOrganism => liveOrganism.onBorn != null)) { liveOrganism.onBorn(this, e); } } public event EventHandler Born { add { onBorn += value; } remove { onBorn -= value; } } protected Organism() { LiveOrganisms.Add(this); } public void Dispose() { LiveOrganisms.Remove(this); } }
