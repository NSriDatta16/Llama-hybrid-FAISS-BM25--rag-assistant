[site]: stackoverflow
[post_id]: 3542383
[parent_id]: 3542056
[tags]: 
Not sure if it is up-to-date, but I found this reference on xml.coverpages.org , which linked to a local archive copy of the DTD WDDX DTD From: http://www.codebits.com/wddx/wddx_0090.dtd.txt Date: 1998-09-28 a string -12.456 1998-06-12T04:32:12 10 second element a string -12.456 John Doe Jane Doe 34 31 It defines a root level object that is a structure (also known as an associative array) of six properties: - s which is the string 'a string', - n which is the number -12.456, - d which is the date-time value June 12, 1998 4:32:12am, - b which is the boolean value true, - a which is an array of two elements (10 and 'second element'), - obj which is a structure with two properties s and n, and - r which is a recordset of two rows with fields NAME and AGE. Basic data types: WDDX supports the following basic data types: boolean (true/false), number, date-time, and string. Numbers are internally represented with floating point numbers. Because of differences between WDDX-enabled languages, the range of numbers has been restricted to 3.4E+/-38. The precision has been restricted to 7 digits after the decimal point. These requirements are consistent with a 4-byte floating point representation. Date-time values are encoded according to the full form of ISO8601. Timezone information will be successfully parsed and used to convert to a local data-time value. Efforts should me made to ensure that the internal representation of date-time values does not suffer from Y2K problems and covers a sufficient range of date-time values. Strings can be of arbitrary length and must not contain embedded nulls. Complex data types: WDDX supports the following complex data types: arrays, structures, and recordsets. Arrays are integer-indexed collections of objects of arbitrary type. The starting index value is usually 0 with the notable exception of CFML whose arrays have an initial index value of 1. Because of these differences working with array indices can lead to non-portable data. Structures are string-indexed collections of object of arbitrary type. In many languages they are known as associative arrays. Structures contain one or more variables. Because some of the languages supported by WDDX are not case-sensitive, no two variable names can differ only by their case. Recordsets are tabular data encapsulations: a set of named fields with the same number of rows of data. Only simple data types can be stored in recordsets. For tabular data storage of complex data types, an array of structures should be used. Because some of the languages supported by WDDX are not case-sensitive, no two field names can differ only by their case. Data type comparisons: The following table compares the basic WDDX data types with those of languages/technologies commonly used on the Web. WDDX Type COM Java Type ECMAScript Type ************** ************* **************** *************** boolean boolean boolean boolean number float? float? number dateTime DATE ?? Date string BSTR java.lang.String string array VARIANT array ?? Array struct IWDDXStruct ?? Object recordset IWDDXRecordset ?? WddxRecordset More on data types: WDDX provides no notion of a null object. Null objects should be serialized to empty strings. Upon deserialization it is up to the component performing the operation to determine whether and where should empty strings be deserialized to null values. WDDX serializes data using a model of pure aggregation. It has no mechanism for handling object references. Aliased references will result in multiple object instances being deserialized. WDDX serialization applied to a data structure that has cyclical references will most likely result in infinite iteration/recursion, depending on the serializer implementation. -->
