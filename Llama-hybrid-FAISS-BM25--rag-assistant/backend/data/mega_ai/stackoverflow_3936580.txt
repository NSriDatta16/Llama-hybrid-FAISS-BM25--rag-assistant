[site]: stackoverflow
[post_id]: 3936580
[parent_id]: 3936488
[tags]: 
This is meant as a standard to define unique locations for java source code. It is convention to follow this package structure, which is why you see it everywhere. It's not required to do it that way - you can name your packages whatever you want. It is very commonplace to follow this convention, however. package prefix.organization.project.ClassName; package prefix.organization.project.package.ClassName; package prefix.organization.project.package.subpackage.ClassName; When storing Java source code files, each part of the package name translates into a subdirectory. So the same three classes shown above would be located in the corresponding directories off the main classpath. prefix/organization/project/ClassName.java prefix/organization/project/package/ClassName.java prefix/organization/project/package/subpackage/ClassName.java When compiling by hand, be sure that the main classpath directory is the current directory or is within the classpath in order that the source code files can be found. As for the src/main/java part of it, it seems this comes from Maven. I've never used that software. I don't understand why they would need so many, since my projects (I use Eclipse) just have a src folder there instead.
