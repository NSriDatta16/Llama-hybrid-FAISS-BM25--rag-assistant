[site]: stackoverflow
[post_id]: 4931738
[parent_id]: 4484430
[tags]: 
The preferred way to do this is to use the command pattern as you already mentionend. I.e. to bind to an ICommand implementation via a dependency property. Dependency properties are actually implemented by a static backing property which implements the dependency stuff used by the framework. Unfortunately the way MS decided to implement the backing property is - well, not optimal to say the least. It is hooked up to the public, non-static property you bind to in xaml - by means of a hardcoded string... I don't remember where but I found a quite elegant solution to the static/non-static relationship which uses a lambda expression to do the mapping thus completely removing the hardcoded, error prone string mapping. If you still need it I can send you some more info on this. You know where to reach me :-) Another concern you will need to adress is to abstract away the implementation of the view to maintain testability.
