[site]: stackoverflow
[post_id]: 2682019
[parent_id]: 2678600
[tags]: 
If you have a list of terms and want to find rows where a field matches one of them, then you could use the in_() method: terms = ['term1', 'term2', 'term3'] query.filter(Cls.field.in_(terms)) If you want to do something more complex, then or_() and and_() take ClauseElement objects as parameters. ClauseElement and its subclasses basically represent the SQL AST of your query. Typically, you create clause elements by invoking a comparison operator on Column or InstrumentedAttribute objects: # Create the clause element clause = (users_table.columns['name'] == "something") # you can also use the shorthand users_table.c.name # The clause is a binary expression ... print(type(clause)) # # ... that compares a column for equality with a bound value. print(type(clause.left), clause.operator, type(clause.right)) # , , # # str() compiles it to SQL print(str(clause)) # users.name = ? # You can also do that with ORM attributes clause = (User.name == "something") print(str(clause)) # users.name = ? You can handle clause elements representing your conditions like any Python objects, put them into lists, compose them into other clause elements, etc. So you can do something like this: # Collect the separate conditions to a list conditions = [] for term in terms: conditions.append(User.name == term) # Combine them with or to a BooleanClauseList condition = or_(*conditions) # Can now use the clause element as a predicate in queries query = query.filter(condition) # or to view the SQL fragment print(str(condition)) # users.name = ? OR users.name = ? OR users.name = ?
