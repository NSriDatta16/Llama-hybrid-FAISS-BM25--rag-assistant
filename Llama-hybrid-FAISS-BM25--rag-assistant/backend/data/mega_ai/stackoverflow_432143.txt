[site]: stackoverflow
[post_id]: 432143
[parent_id]: 
[tags]: 
Multiple inheritance in C++ leading to difficulty overriding common functionality

In a C++ physics simulation, I have a class called Circle, and Square. These are Shapes, and have a method called push(), which applies force to it. There is then a special case of Circle, call it SpecialCircle, in which push() should exhibit slightly different properties. But in fact, there is also SpecialSquare() which should exhibit the same force properties. So I'd like to have an abstract base class called Shape which takes care of Circles and Squares, but then I'd also like an abstract base class called Special, which applies special properties to force(). What's the best way to design this class structure? So far, I've got: class Shape { virtual void push(); }; class Circle : public Shape {}; class Square : public Shape {}; class Special { virtual void push(); }; class SpecialCircle : public Circle, Special {}; class SpecialSquare : public Square, Special {}; Of course, the above won't compile, since Special::push() and Shape::push() conflict. I get "error: request for member ‘push’ is ambiguous", as expected. How can I re-organize my class structure so that Circle and Square can share certain properties with each other, but SpecialCircle and SpecialSquare can still inherit from Shape, and also inherit modified functionality from Special? Thanks. ps., is this the diamond inheritance problem?
