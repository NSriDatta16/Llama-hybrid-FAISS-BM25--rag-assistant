[site]: crossvalidated
[post_id]: 395158
[parent_id]: 190427
[tags]: 
Testing contrasts of factorial variables is notoriously difficult in R. Most of the things that go on beneath the surface in friendlier programs like SPSS must be spelled out specifically in R. This is both a bad and a good thing. Bad because it takes you a long time to learn how, but good because your understanding is vastly improved as a result. I don't know where the Mon-Fri factor comes from. But, using the treat 1-5 levels from the original dataset supplied, I want to take issue with something @StatNoodle wrote in their (mostly excellent) answer. To do this we need to make the treatment variable a factor and specify the contr.sum set of contrasts. df $treatment treatment) contrasts(df $treatment) treatment) [,1] [,2] [,3] [,4] treat1 1 0 0 0 treat2 0 1 0 0 treat3 0 0 1 0 treat4 0 0 0 1 treat5 -1 -1 -1 -1 I want to clarify that this set of contrasts, does not compare treat1 to treat5, treat2 to treat5, treat3 to treat5 and treat4 to treat5. It is deviation coding (see here ) and compares the mean for each of treatments 1 to 4 to the grand mean , that is the mean of all five groups . This is easy to show if we just get the means for each level (sumDF And calculate the grand mean by taking the average of the group means (grandMean Now run an lm() to get the coefficients to compare to the descriptive means contLM The intercept is our grand mean, 7.9868 . The treatment1 coefficient is the average of scores for the treat1 group minus the grand mean 6.130-7.9868 = -1.8568 . The treatment2 coefficient is the average of scores for the treat2 group minus the grand mean 6.528-7.9868 = -1.4588 . The treatment3 coefficient is the average of scores for the treat3 group minus the grand mean 7.966-7.9868 = -0.0208 . The treatment4 coefficient is the average of scores for the treat4 group minus the grand mean 8.744-7.9868 = 0.7572 . There is no coefficient comparing the treat5 group to the grand mean (it is taken out of the matrix by the row of -1 s). If you want to compare the average of each group to a reference group, use the default treatment coding... (contLM ...which if you do the arithmetic on the descriptive means above will show that intercept is the average of scores in treat1 , the treatment2 coefficient the difference between the mean score in treat2 and the mean score in treat1 , the treatment3 coefficient the difference between the mean score of treat3 and the mean score of treat1 etc. Answers to Questions If you want to perform custom (i.e. non-default) contrasts in R I would strongly recommend using a package designed specifically for such things. The lsmeans package is excellent. library(lsmeans) First get a reference grid using the lsmeans() function (lsm The values in the lsmean column of the output are covariate adjusted means for each group. The descending order of these coeffcients - treat1 first to treat5 last` - is important because we use these relative positions to specify what contrasts we wish to test. Then specify the contrast you want in a list. We want to test the first four treatments (positions 1 to 4) to treat5 (fifth position). contr We then pass this list into the lsmeans::contrast() function contrast(lsm, contr) contrast estimate SE df t.ratio p.value treats1-4 vs treat5 12.896 1.380496 20 9.342 This will yield the correct t ratio for the contrasts (square this value if you want the F ratio) and the correct p value. But notice that the estimate is not what we would expect if we perform the procedure manually on the raw group means, subtracting the mean for treat5 from the average mean scores across groups 1 to 4. mean(c(6.130, 6.528, 7.966, 8.744)) - 10.566 [1] -3.224 In fact it the coefficient is out by a factor of exactly 4 4*-3.224 [1] -12.896 To get accurate estimates we need to transform the contrast coefficients so each of the two sides of the contrast sum to |1| and the two sides together sum to 0. contr2 A great feature of lsmeans is that you can pass multiple contrasts into the list contr3 These custom contrasts should answer all of your questions, with accurate estimates. Note the transformed coefficients for the polynomial linear trend contrasts. These sorts of transformations require all kinds of weird voodoo which mostly go on under the hood in SPSS (and which I delved into briefly a few years ago, see here ) but are necessary to get accurate estimates. In this case we divide the trend coefficients by their squared sum, then multiply by the incremental change across coefficients (they increase by 1 each time), thus c(-2, -1, 0, 1, 2)/(sum(c(-2, -1, 0, 1, 2)^2))*1 [1] -0.2 -0.1 0.0 0.1 0.2 We can verify that this estimate of rate of change across groups, 1.109 , is accurate because if we transform the treatment factor to a numerical variable df$treatNum And then run the regression lm(score ~ treatNum, df) Coefficients: (Intercept) treatNum 4.660 1.109 The coefficient is exactly the same as the estimate returned by the polynomial trend contrast in the contr list, and also matches the rate of increase across factors we can see if we graph score against the numerical treatment variable ggplot(df, aes(treatNum, score)) + geom_line(stat = "summary", fun.y = "mean") + geom_smooth(method = "lm") UPDATE: the lsmeans package has been superseded by the emmeans package but they were created by the same person and do more or less the same thing.
