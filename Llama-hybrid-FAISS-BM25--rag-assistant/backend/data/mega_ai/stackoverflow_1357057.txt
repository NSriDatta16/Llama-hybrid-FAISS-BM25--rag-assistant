[site]: stackoverflow
[post_id]: 1357057
[parent_id]: 1356896
[tags]: 
As noted in the comment to pavium's answer , you have two choices: Secure the key Secure the decryption algorithm Unfortunately, if you must resort to embedding both the key and the algorithm within the code, neither is truly secret, so you're left with the (far weaker) alternative of security through obscurity . In other words, as you mentioned, you need a clever way to hide either or both of them inside your executable. Here are some options, though you need to remember that none of these is truly secure according to any cryptographic best practices, and each has its drawbacks: Disguise your key as a string that would normally appear within the code. One example would be the format string of a printf() statement, which tends to have numbers, letters, and punctuation. Hash some or all of the code or data segments on startup, and use that as the key. (You'll need to be a bit clever about this to ensure the key doesn't change unexpectedly!) This has a potentially desirable side-effect of verifying the hashed portion of your code each time it runs. Generate the key at run-time from something that is unique to (and constant within) the system for example, by hashing the MAC address of a network adapter. Create the key by choosing bytes from other data. If you have static or global data, regardless of type ( int , char , etc. ), take a byte from somewhere within each variable after it's initialized (to a non-zero value, of course) and before it changes. Please let us know how you solve the problem! Edit: You commented that you're refactoring existing code, so I'll assume you can't necessarily choose the key yourself. In that case, follow a 2-step process: Use one of the above methods to encrypt the key itself, then use that key to decrypt the users' data.
