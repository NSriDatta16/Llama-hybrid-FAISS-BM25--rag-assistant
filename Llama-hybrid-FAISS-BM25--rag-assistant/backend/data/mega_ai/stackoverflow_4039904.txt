[site]: stackoverflow
[post_id]: 4039904
[parent_id]: 4039729
[tags]: 
Here's an example implementation using LINQ-to-Objects on strings: var conditions = new Func [] { s => s.Length s.Count(c => c == 'o') > 2, // more than 2 'o's s => s == "fooo", // is "fooo" s => s.Contains('b'), // contains 'b' }; var words = new[] { "foo", "fooo", "foooo", "bar", "barr", "bazooo" }; var query = words.Select(Word => new { Word, Percentage = conditions.Average(c => c(Word) ? 1M : 0M) }) .Where(p => p.Percentage > 0) // keep words matches some conditions .OrderByDescending(p => p.Percentage) // order by the percentage .ThenBy(p => p.Word); // then order in alphabetical order In retrospect, I think this example might work with LINQ-to-SQL too (with some tweaks on the conditions array). This was just a quick example but you can certainly expand on the idea even more.
