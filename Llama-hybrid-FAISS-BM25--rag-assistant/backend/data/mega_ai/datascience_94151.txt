[site]: datascience
[post_id]: 94151
[parent_id]: 51348
[tags]: 
If the data has an index column and you insert or delete a row, you change all the data following this row (as you change their indices). Consequently, their unique identifiers computed by train_test_split change, and the split will not be consistent after data updates. One way to overcome this problem is to append new data to the old and never delete a record (as mentioned in the book Hands-On Machine Learning with Scikit... ). Don't forget, we are assuming the random number generator is seeded. crc32(np.int64(identifier)) = create a hash from a given value crc32(np.int64(identifier)) & 0xffffffff = make sure the hash value does not exceed 2^32 (or 4294967296). Check the following simplified example for better understanding. 18 & 0xf = ? 18 in binary 0b10010 0xf in binary 0b1111 to make it of the same length as the previous number, we append a 0 to the left side. So 0xf in binary 0b01111 . Now, we can do the bitwise and operation 0b10010 & 0b01111 = 0b00010 = 3 . So & 0xf ensures that the output is never above 15. Now, reflect on the original code to understand it properly. crc32(np.int64(identifier)) & 0xffffffff . This line returns True or False . Let test_ratio be 0.2. Then, any hash value less than 0.2 * 4294967296 returns True and will be added to the test set; otherwise, it returns False and will be added to the training set.
