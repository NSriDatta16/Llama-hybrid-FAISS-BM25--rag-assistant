[site]: stackoverflow
[post_id]: 3730623
[parent_id]: 3730544
[tags]: 
if((flag & ReallyBigEnum.AnotherOption) != 0) { ... } UPDATED: The above obviously work only if you're testing a single bit. If you want to test multiple bits, then something else is required, depending on whether you are checking for all bits or any bit. Testing that any of a set of bits is set For this case, just use a variant of the single bit version. if((flag & (ReallyBigEnum.FirstOption | ReallyBigEnum.AnotherOption)) != 0) { ... } Testing that all of a set of bits is set For this case to achive clarity and reliability, I suggest creating a constant that contains all of the bits. const int ReallyBigEnum WickedAwesomeOptions = ReallyBigEnum.FirstOption | ReallyBigEnum.AnotherOption; ... if (flag & WickedAwesomeOptions == WickedAwesomeOptions) { ... } Some of the redundancy is still there, but it is not fragile or confusing, and it is easy to maintain. If the bit combination applies broadly, then you can add it to the enum itself. [Flags] enum ReallyBigEnum { FirstOption = 1, AnotherOption = 2, WickedAwesomeOptions = FirstOption | AnotherOption, } .... if (flag & ReallyBigEnum.WickedAwesomeOptions == ReallyBigEnum.WickedAwesomeOptions) { ... }
