[site]: stackoverflow
[post_id]: 2553779
[parent_id]: 2547486
[tags]: 
Exception/error handling in (web) applications is a sensitive subject. Some may opt for throwing hard exceptions and catching them in a single place, others may opt for passing around a collection of error messages. I myself prefer throwing exceptions. This is more clear and concise and better reuseable, maintainable and testable. Design a Validator interface with a validate() method which throws ValidatorException . Implement the desired validators accordingly. Collect the validators and run them one by one in a try/catch block and collect the exceptions there. E.g. Map messages = new HashMap (); for (Validator validator : validators) { try { validator.validate(value); } catch (ValidatorException e) { messages.add(fieldname, e.getMessage()); } } And then usually forward the request back to the same page (where you entered the form) and display the error message somewhere next to the input fields or in top or bottom of the form. That's more user-friendly than a different error page which would require the user to click one more button/link to get the form back and the user has to remember/figure what the error actually was. All standard error messages can of course be stored in an enum , or more preferably in an external resource file, e.g. a properties file. This way it's easier to maintain and also easier to add multiple languages to your webapp. For unrecoverable errors, such as a dead database or a bug in the code (runtime errors, internal server errors, etc), I'd just let the exception go through all the layers so that you can "catch" it by a generic and custom error page which you can define as in web.xml . You can define a separate error page for each type of Exception and/or HTTP status code. This all is by the way also how the average MVC framework works.
