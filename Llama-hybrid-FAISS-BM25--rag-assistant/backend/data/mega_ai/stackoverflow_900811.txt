[site]: stackoverflow
[post_id]: 900811
[parent_id]: 900715
[tags]: 
You might find this poll (long but) interesting... http://www.java-forums.org/new-java/7315-what-you-using-write-your-code.html We've been running a co-op (i.e. cadette) program for the last five (or so) years. Here's a list of stuff (in no particular order) that co-ops are clueless about that we really really wish they knew "the basics of" when they arrived: Testing - Everyone tests, but (IMHO) few do so really effectively. Myself included. Team development - How to work together on a codebase which is bigger than anyone. Understanding legacy systems - Hey, this code is twice is my age? WTF? Project management - That dark arts of delivering quality on time and on budget. Business analysis - BA's are full of it! You at-least need to know enough to smell the effluent. Known when to say NO - Practice saying this in front of a mirror: "No sir, I'm sorry, you really can't have this Ferrarri for the price of a second-hand mini." The technology really is the easy bit. Having said that, your first position is likely to be as a code-monkey... so the more tecken ze spreken, the more likely you are to get a foot in the door. So I suggest Tackle the J2EE 1.4 Tutorial ... also look at a web-app MVC framework like Struts 1 or (better) JSF; and ... also look at Hibernate - the psuedo standard persistence layer. ... also look at "early" DHTML - manipulating a html-DOM with javascript. ... also look at Swing, Applets, but try not to drown in it. then (and only then) tackle the J2EE 1.5 Tutorial (EJB3) . I'm still in the process myself. I've been at it for two months. Anymore than two hours at-a-time makes my brain hurt, a lot... you can teach an old dog new tricks, you just have to do it slowly. Like already stated: Every position will have it's own technology set... two people sitting next to each other may use vastly different product groups. What I advise you to learn instead of "all the techs" is the process of learning technologies, and the considerations in selecting appropriate technologies to suit a particular problem, and organisation. The best thing you can do to improve your chances of actually getting that job is to join a "Young IT Professionals" group (like this one in Australia )... they'll probably do a "mock interview" day... constructive criticism (as apposed to spoonfeeding) will improve your job applications, your CV, and your interviewability. Hanging-out with a bunch of people who shre your interests is informative, and fun. You'll miss that "brain stimulation" in the break between uni and IT work. On the recession thing... I graduated B.Bus(Computing) a month after the dot-com bubble burst. I worked in a supermarket, drove a cab, delivered pizza, did some builders labouring, flogged PC's, vended bad financial advise to people who can't add-up for ${nameless_charlitans}, flogged anti-virus software, tutored at the local TAFE college, got a few short-term contracts writing software for a big accounting firm... then I started voluntarily fixing up the PC's at my local employment exchange (I was there waiting for appointments for hours-on-end anyway, and it was better than doing nothing)... The IT-dude there got me an interview with "a mate" (i.e. my job was never advertised), and the rest is history. Funny how stuff works out. I feel for ya', just please don't take the knock-backs personally... you're likely to get a lot of them... it's just how the game is played. Cheers. Keith.
