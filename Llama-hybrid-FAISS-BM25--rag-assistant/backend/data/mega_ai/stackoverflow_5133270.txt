[site]: stackoverflow
[post_id]: 5133270
[parent_id]: 5132786
[tags]: 
Seref, I agree that XML Schema isn't really suitable as a basis for information modelling unless XML documents are your only or primary way to represent information and even then it depends. I also agree with @denisk that a relational model, as used for databases, seems a better idea. I don't see how protocol buffers help; they are similarly bound to a particular serialization technique. You are considering object metamodels (.NET or Java); they are more expressive, but they are designed for in-memory data representation, so they would be suitable if that is your primary way to represent information from which everything else is derived. Also, as you mention, language specific features (such as generics) will tie you to that language or create translation issues. If you want to go that way, UML may be a better basis. The best approach depends on your requirements. What problems can you resolve with generics? What assumptions and strong wishes can you state regarding how your information is stored, serialized, and accessed from application code? E.g. will storage be distributed or in a central database? May different applications, even in different languages, access the same information, even at the same time? Etc.
