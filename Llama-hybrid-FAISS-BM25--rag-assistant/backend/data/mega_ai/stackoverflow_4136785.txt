[site]: stackoverflow
[post_id]: 4136785
[parent_id]: 
[tags]: 
Define variables in template based on user being staff or not

I'm trying to display an HTML table of values with about 20 columns where say staff users see one subset of columns, and non-staff users see another subset of columns. I may want to define further types of users later. Now right now I have three static header rows so the template looks like Col A {% if user.is_staff %} Col B {% endif %} ... {% if not user.is_staff %} Col K {% endif %} Col A second header {% if user.is_staff %} Col B second header {% endif %} ... {% if not user.is_staff %} Col K second header {% endif %} Col A third header ... {% for obj in object_list %} {{ obj.col_a }} {% if user.is_staff %} {{ obj.col_b }} {% endif %} ... {% if not user.is_staff %} {{ obj.col_k }} {% endif %} {% endfor %} However, I find non-DRY as every time, if I want to change if a user-type can see a column, I have to change it in 4 places. Or if I want to define multiple different classes of users, I'd have to have complicated if statements. I'd prefer something like {% if show_col_a %} {{obj.col_a }} {{% endif %} Where I can define at the top of the template (or possibly in the view) that user.is_staff can see show_col_a. Is something like this possible? I'm using a generic view (object_list). Maybe modify all users to have attributes user.show_col_a somehow and do {% if user.show_col_a %}? I'm not sure how to add boolean attributes to users. EDIT: May want multiple users with custom views (e.g., staff_view; admin_view, unprivileged, etc.), so if statements would get unwieldy. A cell's contents is typically more complicated than {{ obj.col_b }}; tried simplifying problem to get to the point. E.g.: {% if obj.custom_address %} {{ obj.custom_address.webprint|safe }} {% else %} {{ obj.business.address.webprint|safe }} {% endif %} Also while multiple templates would work with a simple switch like: {% if user.is_staff %} {% include "template_staff.html" %} {% else %}{% if user.is_admin %} {% include "template_admin.html" %} {% else %} {% include "template_other.html" %} {% endif %} {% endif %} I find its not DRY at all; e.g., every edit to a template has to be replicated in three template. I guess I could make a script that read generates the three templates from some super_template outside of django but its getting very inelegant.
