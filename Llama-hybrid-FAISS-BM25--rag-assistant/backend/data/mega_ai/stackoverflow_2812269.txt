[site]: stackoverflow
[post_id]: 2812269
[parent_id]: 2811469
[tags]: 
I suggest two techniques: Move the structure members into local variables at the beginning. Perform like operations together. These techniques may not make a difference, but they are worth trying. Before making any changes, print the assembly language first. This will give you a baseline for comparison. Here's the code: Base dist2(const Point& p) const { // Load the cache with data values. register x1 = p.x; register y1 = p.y; register z1 = p.z; // Perform subtraction together x1 = x - x1; y1 = y - y1; z1 = z - z2; // Perform multiplication together x1 *= x1; y1 *= y1; z1 *= z1; // Perform final sum x1 += y1; x1 += z1; // Return the final value return x1; } The other alternative is to group by dimension. For example, perform all 'X' operations first, then Y and followed by Z . This may show the compiler that pieces are independent and it can delegate to another core or processor. If you can't get any more performance out of this function, you should look elsewhere as other people have suggested. Also read up on Data Driven Design . There are examples where reorganizing the loading of data can speed up performance over 25%. Also, you may want to investigate using other processors in the system. For example, the BOINC Project can delegate calculations to a graphics processor. Hope this helps.
