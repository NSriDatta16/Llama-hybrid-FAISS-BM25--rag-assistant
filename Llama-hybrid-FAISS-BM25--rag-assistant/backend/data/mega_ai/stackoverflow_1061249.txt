[site]: stackoverflow
[post_id]: 1061249
[parent_id]: 1061231
[tags]: 
This isn't so much an architecture issue as a nitty-gritty class design issue. Implementation inheritance has two areas of difficulty: the fragile base class problem and the static nature of inheritance relationships. The classic alternative in this case is the decorator pattern of interface implementation with composition: the new object contains a reference to the lower-level object it wraps, and forwards calls to it, with perhaps some calls wrapped or replaced outright. A single wrapper class can have its instances wrap different underlying service implementations, and the wrapper is much less likely to be broken by the fragile base class problem because it has no access to protected members.
