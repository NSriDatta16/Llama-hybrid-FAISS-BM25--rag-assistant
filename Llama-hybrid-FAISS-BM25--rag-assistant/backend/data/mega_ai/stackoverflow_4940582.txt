[site]: stackoverflow
[post_id]: 4940582
[parent_id]: 4927971
[tags]: 
Here's a solution using sre_parse import re from sre_parse import parse pattern = r'^page/(?P [-\w]+)/(?P [0-9]+)/$' regex = re.compile(pattern) matches = regex.match('page/slug-name/5/') params = matches.groupdict() print params >> {'page_id': '5', 'slug': 'slug-name'} lookup = dict((v,k) for k, v in regex.groupindex.iteritems()) frags = [chr(i[1]) if i[0] == 'literal' else str(params[lookup[i[1][0]]]) \ for i in parse(pattern) if i[0] != 'at'] print ''.join(frags) >> page/slug-name/5/ This works by grabbing the raw opcodes via parse(), dumping the positional opcodes (they have 'at' for a first param), replacing the named groups, and concatenating the frags when it's done.
