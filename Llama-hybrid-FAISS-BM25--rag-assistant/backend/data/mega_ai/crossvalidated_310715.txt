[site]: crossvalidated
[post_id]: 310715
[parent_id]: 
[tags]: 
Hidden layers neural networks

So I am designing a neural network which will decide which way a character should move and look. I was thinking of breaking it into two different networks one for movement and one for direction. So for movement the network will be given 5 booleans and 4 ints. Representing: is it allowed to move, can it move forward, back, left and right, current x and y along with target point x and y. It will then output 2 results which signify the movement in either the x and y direction. For direction facing, I will enter x and y coordinates for the player, the x and y coordinates for a target and if the target is visible. If target is visible its output will be an angle from the current player to the target. I am using dlib, with cuDNN and a gtx1070. So my question is, what sized network will I be needing and is it possible to calculate it given the library and my hardware. I am more then happy to run the processing for more then a week. Thanks alot! output_type expected_output(sample_type sample) { output_type to_return; if(sample(ALLOWED_TO_MOVE) > 0) { to_return(MOVEMENTY) = 0; to_return(MOVEMENTX) = 0; return to_return; } if (sample(CAN_MOVE_Left) && !sample(CAN_MOVE_RIGHT)) { to_return(MOVEMENTX) = LEFT; } else if(sample(CAN_MOVE_RIGHT) && !sample(CAN_MOVE_Left)) { to_return(MOVEMENTX) = RIGHT; } else if (!sample(CAN_MOVE_RIGHT) && !sample(CAN_MOVE_Left)) { to_return(MOVEMENTX) = NONE; } else { if(sample(PLAYERX) > sample(TARGETX)) to_return(MOVEMENTX) = LEFT; else to_return(MOVEMENTX) = RIGHT; } if (sample(CAN_MOVE_FORWARD) && !sample(CAN_MOVE_BACK)) { to_return(MOVEMENTY) = UP; } else if (sample(CAN_MOVE_BACK) && !sample(CAN_MOVE_FORWARD)) { to_return(MOVEMENTY) = BACK; } else if (!sample(CAN_MOVE_BACK) && !sample(CAN_MOVE_FORWARD)) { to_return(MOVEMENTY) = NONE; } else { if (sample(PLAYERY) > sample(TARGETY)) to_return(MOVEMENTY) = UP; else to_return(MOVEMENTY) = BACK; } return to_return; }
