[site]: stackoverflow
[post_id]: 5013401
[parent_id]: 
[tags]: 
Problem with GWT connector in a straight ended connection

I am trying to make a straight ended connection between widgets.But when I am doing so, the orientation of my connector is coming wrong.Its always coming parallel to the required one.Also , it is independent of the connecting widgets i.e when I move my widget, my connector does not move.Snippet of my code is given as : Link to snapshot of the problem: http://goo.gl/JUEmJ public class DragNDropPage { SyncCurrentUser cu = SyncCurrentUser.getUser(); private AbsolutePanel area = new AbsolutePanel(); HorizontalPanel toolsPanel = new HorizontalPanel(); AbsolutePanel canvas = new AbsolutePanel(); DragController toolboxDragController; Label startLabel = new Label("START"); Label stopLabel = new Label("STOP"); Label activityLabel = new Label("ACTIVITY"); Label processLabel = new Label("PROCESS"); Button stopDrag = new Button("Done Dragging"); Button saveButton = new Button("Save"); PickupDragController dragController = new PickupDragController(area, true); AbsolutePositionDropController dropController = new AbsolutePositionDropController(area); private List selected = new ArrayList (); private List onCanvas = new ArrayList (); private List connections = new ArrayList (); private CActivity[] aItems; private CProcess[] pItems; MyHandler handler = new MyHandler(); int mouseX,mouseY; String style; public DragNDropPage() { toolboxDragController = new ToolboxDragController(dropController, dragController); RootPanel.get("rightbar").add(area); area.setSize("575px", "461px"); area.add(toolsPanel); toolsPanel.setSize("575px", "37px"); toolsPanel.add(startLabel); startLabel.setSize("76px", "37px"); toolboxDragController.makeDraggable(startLabel); toolsPanel.add(stopLabel); stopLabel.setSize("66px", "37px"); toolboxDragController.makeDraggable(stopLabel); toolsPanel.add(activityLabel); activityLabel.setSize("82px", "36px"); toolboxDragController.makeDraggable(activityLabel); toolsPanel.add(processLabel); processLabel.setSize("85px", "36px"); toolboxDragController.makeDraggable(processLabel); stopDrag.addClickHandler(handler); toolsPanel.add(stopDrag); stopDrag.setWidth("114px"); saveButton.addClickHandler(handler); toolsPanel.add(saveButton); area.add(canvas, 0, 36); canvas.setSize("575px", "425px"); Event.addNativePreviewHandler(new Event.NativePreviewHandler() { @Override public void onPreviewNativeEvent(NativePreviewEvent event) { //46 is the key code for Delete Button if(event.getNativeEvent().getKeyCode() == 46 && !selected.isEmpty()) { for (Iterator i = selected.listIterator(); i.hasNext();) { Widget w = (Widget) i.next(); UIObjectConnector.unwrap(w); i.remove(); w.removeFromParent(); onCanvas.remove(i); } } } }); aItems = cu.currentUser.getcActivity(); pItems = cu.currentUser.getcProcess(); } private class ToolboxDragController extends PickupDragController { public ToolboxDragController(final DropController dropController, final DragController nodesDragController) { super(area ,false); setBehaviorDragProxy(true); registerDropController(dropController); addDragHandler(new DragHandlerAdapter(){ public void onPreviewDragEnd(DragEndEvent event) throws VetoDragException { Widget node = (Widget) event.getSource(); int left = event.getContext().desiredDraggableX; int top = event.getContext().desiredDraggableY; AbsolutePanel panel = (AbsolutePanel) dropController.getDropTarget(); createConnector((Label) node, panel, left, top); throw new VetoDragException(); } }); } } protected UIObjectConnector createConnector(Label proxy, AbsolutePanel panel, int left, int top) { Widget w; String str = proxy.getText(); if(str.equals("START") || str.equals("STOP")){ w = new Label(proxy.getText()){ public void onBrowserEvent(Event event) { if( DOM.eventGetType(event) == 4 && DOM.eventGetCtrlKey(event)){ select(this); } super.onBrowserEvent(event); } }; w.getElement().setClassName("dnd-start-stop"); } else{ w = new ListBox(){ public void onBrowserEvent(Event event) { if( DOM.eventGetType(event) == 4 && DOM.eventGetCtrlKey(event)){ select(this); } super.onBrowserEvent(event); } }; if(str.equals("ACTIVITY")){ getAItems((ListBox)w); //w.getElement().addClassName("dnd-activity"); } else if(str.equals("PROCESS")){ getPItems((ListBox)w); //w.getElement().addClassName("dnd-process"); } } onCanvas.add(w); left -= panel.getAbsoluteLeft(); top -= panel.getAbsoluteTop(); //panel.add(w,10,10); panel.add(w, left, top); dragController.makeDraggable(w); return UIObjectConnector.wrap(w); } private void getAItems(ListBox w) { for(int i=0;i i = onCanvas.listIterator();i.hasNext();){ Widget w = (Widget) i.next(); dragController.makeNotDraggable(w); } name.setText("Continue"); } else { for(Iterator i = onCanvas.listIterator();i.hasNext();){ Widget w = (Widget) i.next(); dragController.makeDraggable(w); } name.setText("Done Dragging"); } } else{ } } } }
