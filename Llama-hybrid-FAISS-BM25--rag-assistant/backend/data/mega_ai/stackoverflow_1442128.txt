[site]: stackoverflow
[post_id]: 1442128
[parent_id]: 
[tags]: 
Multiple Windows in PyQt4

I have a PyQt program used to visualize some python objects. I would like to do display multiple objects, each in its own window. What is the best way to achieve multi-window applications in PyQt4? Currently I have the following: from PyQt4 import QtGui class MainWindow(QtGui.QMainWindow): windowList = [] def __init__(self, animal): pass def addwindow(self, animal) win = MainWindow(animal) windowList.append(win) if __name__=="__main__": import sys app = QtGui.QApplication(sys.argv) win = QMainWindow(dog) win.addWindow(fish) win.addWindow(cat) app.exec_() However, this approach is not satisfactory, as I am facing problems when I try to factor out the MultipleWindows part in its own class. For example: class MultiWindows(QtGui.QMainWindow): windowList = [] def __init__(self, param): raise NotImplementedError() def addwindow(self, param) win = MainWindow(param) # How to call the initializer of the subclass from here? windowList.append(win) class PlanetApp(MultiWindows): def __init__(self, planet): pass class AnimalApp(MultiWindows): def __init__(self, planet): pass if __name__=="__main__": import sys app = QtGui.QApplication(sys.argv) win = PlanetApp(mercury) win.addWindow(venus) win.addWindow(jupiter) app.exec_() The above code will call the initializer of the MainWindow class, rather than that of the appropriate subclass, and will thus throw an exception. How can I call the initializer of the subclass? Is there a more elegant way to do this?
