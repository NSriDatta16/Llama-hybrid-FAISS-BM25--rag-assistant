[site]: crossvalidated
[post_id]: 561132
[parent_id]: 561126
[tags]: 
I will be answering this as someone who has spent a LOT of time in the last few years working on financial time series prediction. However, I am not a professional (I do it on my own time etc.) Generally, you want to go in increasing order of complexity in your models (if this isn't intuitive, I'll be happy to explain why). So, have you tried an AR, ARMA or ARIMA model? If not, I would recommend by starting with those. There are packages that will do it quickly and easily. I'll tell you now, though - chances are, it will not yield accurate results. But seriously, give it a good try first. Once you've tried the basic, auto-regressive time series models like I listed above, move on to more complex things, like LTSM. However, I would personally advise against using LTSM for a few reasons: LTSM has a huge number of parameters to train, and if you're working with stock data (especially daily frequency), you don't have more than a few tens of thousands of data points at best. That may seem like a lot, but take a look at how many parameters your LTSM is trying to optimize. Unless your network is very small, the number will be rather high compared to the number of data points you have. If you insist on trying LTSM, I would recommend trying to find higher frequency data. LTSM takes a long time to train (inconvenient) Like Demetri noted in a comment, that differenced series looks a lot like white noise, which it probably nearly is (most financial time series are damn near white noise). For this reason, I would be genuinely extremely surprised and impressed if you found an accurate model by just feeding in price data like it seems you currently are. Financial data is extremely noisy, there generally just isn't enough signal for your model to pick up on. Of course, maybe I'm just a bit jaded. So, here's what I would do: Go back to basics, try ARIMA-style autoregressive model. Try ARCH/GARCH model, which is better adapted for time-series with heteroskedastic (not evenly distributed) volatility like your see in your time series (sometimes lots of volatility, sometimes little). Try LTSM (smaller network) If you have found a useful/predictive model in steps 1-3, that's extremely impressive and to me, surprising. If not, then you need to start doing some serious feature engineering. If you're unfamiliar with the concept, do some googling. Essentially, there is almost certainly not enough signal in the raw (financial) time series data for any model to pick up on. You will need to create variables from the raw data in order to better highlight different aspects of the data (think technical indicators) that a model (linear regression, logistic regression, randomforest etc.) might be able to pick up on. Bonus tip: I have personally found that it's MUCH easier to find strategies by linear regression and by "eyeballing" a bunch of charts before writing a program that can execute based on a pattern you visually noticed, rather than by ML models. There is just an insane amount of challenge to consider when working with ML in the financial data. Final note: You commented to Demetri that the LTSM works well on the original time series. I would HIGHLY recommend you take a much closer look. I can almost promise that the LTSM isn't working well on the original, but that it's doing what most auto-regressive models do when there's no signal to be found - they say for every prediction that the next value will be equal to the previous. When this happens, it will APPEAR as if the model is doing well. You'll plot the predictions vs. actual and it'll look really close, the R^2 will be great but in reality, there's no predictive value - it's just replicating past values because it can't do any better. Perhaps I'm cynical/jaded, but I can almost promise you that's what you have going on with the LTSM on raw price data. As mentioned - using ML for price prediction is extraordinarily challenging.
