[site]: stackoverflow
[post_id]: 1312358
[parent_id]: 1312275
[tags]: 
As is frequently the case, "It Depends". I tend to ask myself some of the following questions: Are there unit tests for the existing code? Is refactoring the code an acceptable risk for my project? Is the author still available to clarify any questions I might have about the code? Will my employer consider the time spent on changing existing, functioning code to be an acceptable use of my time? And so on... But assuming that I have the capacity to do so, refactoring is preferential as the up front cost of fixing the code now will likely save me a lot of time and effort later in maintenance and development time. There are other benefits as well, including the fact that the more clean and well maintained you keep your code base, the more likely other developers are to keep it that way. The Pragmatic Programmer calls this the Broken Window Theory .
