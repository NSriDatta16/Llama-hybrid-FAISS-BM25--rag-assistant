[site]: stackoverflow
[post_id]: 4846449
[parent_id]: 
[tags]: 
How do I structure my database so that two tables that constitute the same "element" link to another?

I read up on database structuring and normalization and decided to remodel the database behind my learning thingie to reduce redundancy. I have different types of entries that can be learned. Gap texts /cloze tests (one text, many gaps) and simple known-unknown (one question, one answer) types. Now I'm in a bit of a pickle: gaps need exactly the same columns in the user table as question-answer types but they need less columns than question-answer types (all that info is in the clozetests table) I'm wishing for a " magic " foreign key that can point both to the gap and the terms table. Of course their ids would overlap though. I don't like having both a term_id and gap_id in the user_terms, that seems unelegant (but is the most elegant I can come up with after googling for a while, not knowing what name this pickle goes by). I don't want a user_gaps analogue to user_terms , because then I'd be in the same pickle when it comes to the table user_terms_answers . I put up this cardboard cutout collage of my schema. I didn't remove the stuff that isn't relevant for this question, but I can do that if anyone's confusion can be remedied like that. I think it looks super tidy already. Tidier than my mental concept of this at least. Did I say any help would be greatly appreciated? Answerers might find themselves adulated for their wisdom. Background story if you care, it's not really relevant to the question. Before remodeling I had them all in one table (because I added the gap texts in a hurry), so that the gap texts were "normal" items without answers, while the gaps where items without questions. The application linked them together. Edit I added an answer after SO coughed up some helpful posts. I'm not yet 100% satisfied. I try to write views for common queries to this set up now and again I feel like I'll have to pull application logic for something that is database turf.
