[site]: stackoverflow
[post_id]: 1867297
[parent_id]: 1867217
[tags]: 
I'm not sure you'll be able to get an elegant way of figuring this out, because it's always going to be ambigious if you can't tell it where the data is from. For example, the numbers 1.234 and 1,234 are both valid numbers, but without establishing what the symbols mean you won't be able to tell which is which. Personally, I would write a function which attempted to do a "best guess" based on some rules... If the number contains , BEFORE . , then , must be for thousands and . must be for decimals If the number contains . BEFORE , , then . must be for thousands and , must be for decimals If there are >1 , symbols, the thousand separator must be , If there are >1 . symbols, the thousand separator must be . If there is only 1 , how many numbers follow it? If it's NOT 3, then it must be the decimal separator (same rule for . ) If there are 3 numbers separating it (e.g. 1,234 and 1.234), perhaps you could put this number aside and parse other numbers on the same page to try and figure out if they use different separators, then come back to it? Once you've figured out the decimal separate, remove any thousand separators (not needed for parsing the number) and ensure the decimal separator is . in the string you are parsing. Then you can pass this into Double.TryParse
