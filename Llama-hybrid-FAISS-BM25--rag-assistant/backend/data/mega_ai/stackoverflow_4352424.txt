[site]: stackoverflow
[post_id]: 4352424
[parent_id]: 4350484
[tags]: 
I've never used Granados, but that library's SSH2UserAuthKey class has a FromSECSHStyleStream method that loads a user's authentication key from an arbitrary Stream (which could be a MemoryStream if you want to load the key directly from memory). It seems like this would let you bypass the filesystem for key storage. Rebex.Net has a SshPrivateKey class constructor that can load from a byte[] ; this should also let you avoid the filesystem. While I haven't checked the other libraries, it seems likely that all of them would provide methods to load a key from a byte[] , MemoryStream , or unsigned char* , with convenience methods that load directly from a file. These APIs don't solve the problem of how the private key will actually be stored, though. You could password-protect it (this seems a fairly common approach with SSH private keys) or use the ProtectedData class to encrypt it with the current Windows user's credentials.
