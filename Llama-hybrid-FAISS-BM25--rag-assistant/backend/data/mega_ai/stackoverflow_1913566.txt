[site]: stackoverflow
[post_id]: 1913566
[parent_id]: 1912971
[tags]: 
I've just deployed my IronPython Point-of-Sales service application at the beginning of this month. The service application is a RESTful http server serving query & transactional request to .NET WinForms client. With help of some remoting library, the service application is purely implemented in IronPython. In my opinion, Python is undoubtly the best language to code complex business logics. Here are my reasons. The language is very expressive. I could come up with endless ideas for internal DSL that make my business logic shorter and simpler to understand. It's interactive. Trouble-shooting and logic testing can be done interactively. It's dynamic. It's freedom. No xml configuration. No plumbing. No compile. I can work in my favorite editor. Most skeptics alway mention "code-completion" and "debugger". Well I miss them sometimes. However, I'm aware that I deliberately gave up those conveniences in favor to, a much more important factor, comprehensibility. With proper unit-testing and logging, I'd pick IronPython over any languages for my business logics. updated: Sometimes, I experiment and log user issues with Ironpython Script that act as if being a client like this: >> from boon.service import client >> CASH_PAYMENT_TYPE = '000000011' >> cl = client.Client('http://pos-server/bin?posB2K') >> cl.connect('user', 'password') >> order = cl.workspace('pos.Order') >> order.load('1312') >> payments = order.dataset.Tables['POS_PAYMENTS'] >> payments.Rows[0]['PAYMENT_TYPE_ID'] = CASH_PAYMENT_TYPE >> order.save() Sometimes, I investigate bugs by scripting server object like this: >> from boon import pos >> pos.register_pos_service(debug=True) >> from boon.service import get_instance >> possvc = get_instance('pos') >> print possvc.store['POS_PAYMENTS'] \ .. .where(lambda r: r.POS_HD_ID == 1312) \ .. .include('PAYMENT_TYPE_ID', 'PAY_AMT') \ .. .list() [('000000011', 1520)] You may find the code not too elegance since I prefer to based my work on ADO.NET DataSet. It's simpler for Windoows Forms client, however.
