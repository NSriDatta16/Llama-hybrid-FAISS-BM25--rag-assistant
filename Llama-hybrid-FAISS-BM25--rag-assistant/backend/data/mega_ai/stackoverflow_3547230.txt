[site]: stackoverflow
[post_id]: 3547230
[parent_id]: 3542236
[tags]: 
At least as far as sequences go, clojure is pretty damned lazy without needed to be told. Here, modelling your address-retrieval as counting, try: (defn addresses [person-id] (iterate #(do (println %) (inc %)) person-id)) (defn person [id] (merge {:addresses (addresses id)} {:name "john"})) (def people (map person (range 100))) So far it won't have printed anything, but if you say: (doall (take 5 (:addresses (nth people 10)))) Then you should see the printing happen in exactly the cases that need to happen to count up five in the tenth place. I'd imagine that might be the sort of behaviour you want? So get your address lookup to produce a lazy sequence (map, filter, reduce will all do)
