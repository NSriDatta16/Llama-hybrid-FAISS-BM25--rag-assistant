[site]: stackoverflow
[post_id]: 4442732
[parent_id]: 4442525
[tags]: 
Using this.DataContext will work , but it's fragile and horrible and not a good way to design your application. If I were to consume your user control and write this xaml: ... then your control will break, regardless of whether the Car property is correctly set or not. That's not very pretty. A more robust approach is to mark your UserControl element in Xaml with an x:Name , and use ElementName in your binding. So, your control looks something like this: Now, if you want to set DataContext on the Grid (using DataContext="{Binding Car, ElementName=control}" ), you can get the benefit of datacontext in a more robust way. However, for any of this to work, you need to be exposing your car field as a property, rather than just as a field. You also need to implement INotifyPropertyChanged so that the UI realises when you change the value of the property, though you can work around this temporarily by setting car before you call InitializeComponent() in your constructor.
