[site]: stackoverflow
[post_id]: 4941406
[parent_id]: 
[tags]: 
Deepclone issue with child object need deep serializing

I've got an issue when implementing DeepClone by serialization/deserialization way. The fact: I want my class OwnDataset to have its deepclone instance, by 2 below common procedures - constructor and GetObjectData declared: protected OwnDataSet(SerializationInfo info, StreamingContext context) : base(info, context) { DSType = DataSetType.Standard; Attributes = new OwnAttributeList( (List ) info.GetValue("Attributes", typeof (List ))); IsLinkedDS = info.GetBoolean("IsLinkedDS"); PCAForScores = (PCA)info.GetValue("PCAForScores", typeof(PCA)); Levels = (string[])info.GetValue("Levels", typeof(string[])); } [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) { base.GetObjectData(info, context); info.AddValue("Attributes", new List (Attributes), typeof(List )); info.AddValue("IsLinkedDS", IsLinkedDS); info.AddValue("PCAForScores", PCAForScores); info.AddValue("Levels", Levels); } Please be noticed that the OwnDataset has its properities. One of them named "Attributes", whose type is OwnAttributeList - a collection of OwnAttribute objects. When calling to get the deepclone instance of an OwnDataset, in the constructor, all properties whose type is simple such as IsLinkedDS (boolean), Levels (string[]) ... got out successfully. OK. But for more complex typed object, such as Atttributes (typed OwnAttributeList), got out incorrectly (number of element in the collection is still right but each of elements are NULL) ! Anyone experienced in this case please help me or give me some hints. Do I forgot something ? Thanks for your attention & waiting for your help.
