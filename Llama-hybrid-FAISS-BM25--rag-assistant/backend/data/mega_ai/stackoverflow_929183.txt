[site]: stackoverflow
[post_id]: 929183
[parent_id]: 924047
[tags]: 
I'm upvoting Paul Fisher's answer but I would like to offer my own anyway, partly because I feel I have more than 600 characters' worth of commentary to add. ;) I like that his answer seemed to put at least as much emphasis on making things easy for the user as it did on making things easy for the programmer. I believe we should put the users first to the greatest extent that we can. Ideally, you'd make a mock-up of various solutions and ask actual building industry users (who deal with imperial units) to try them out and give you feedback, but for now you're asking us, not actual users, so... I am also leaning toward the two-field UI. Personally, I would make the parser handle both decimal and fractional input (allowing either '11.25' or '11 1/4'). You'll have to figure out what to do when they pick something that's not a binary fraction, like 5/7 (when they probably meant 5/8, for example). As for storage, I guess you could go with millimeters, as long as it's a float. I'd be more comfortable storing inches, because if your values are all multiples of 64ths of an inch, you shouldn't have rounding issues. I agree with Pax that it's important to be able to give it back to the user in imperial units, complete with reduced fractions. (Maybe it's a big assumption I'm making about the building industry. For all I know, they normalize everything to 64ths, and are happier to see '11 16/64' than '11 1/4'!)
