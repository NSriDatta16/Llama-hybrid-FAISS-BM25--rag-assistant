[site]: stackoverflow
[post_id]: 1721704
[parent_id]: 
[tags]: 
How best to retrieve and update these objects in NHibernate?

I previously asked a question regarding modeling of a situation with Users, Items, and UserRatings. In my example UserRatings are associated with one User and one Item. A good answer was provided by Nathan Fisher and I've included the model he suggested below. But I now have a question regarding retrieval of these objects . The model links the entities by holding references to the entities.My question is, how best do I retrieve a particular UserRating to be updated? In this situation I would have the userID (from the asp.net auth session), and the itemID (from the URL). Also, there could be 1000s of ratings per user or item. Back in the old school this would be as simple as one update query 'where x = userID and y=itemID. Easy. However the best way to accomplish this in NHibernate using a proper object model is not so clear. A) I understand that I could create a repository method GetRatingByUserAndItem, and pass it both a User and Item object, which it would do an HQL/criteria query on to retrieve the Rating object. However to do this I assume that I would first need to retrieve User and the Item from the ORM before passing these back to the ORM in the query. I would then get the UserRating object, update it, and then have the ORM persist the changes. This seems ridiculously inefficent to me, compared to the old school method. B) Maybe I could just new-up the UserRating object, and do a createorupdate type call the ORM (not sure on exact syntax). This would be better, but presumably I would still need to first retrieve the User and Item, which is still pretty inefficient. C) Perhaps I should just retrieve the User (or the Item) from the ORM, and find the correct UserRating from its UserRatings collection. However, if I do that, how do I make sure that I'm not retrieving all of the UserRatings related to that User (or Item), but just the one related to the specific item and specific user? D) It occured to me that I could just drop the full-blown references to User and Item from UserRating in the model, and instead have primitive references (UserID and ItemID). This would allow me to do something as simple as the oldschool method. Very tempting, but this just doesn't seem right to me - not very Object Oriented (and surely that's the main reason we are using an ORM in the first place!) So, can anyone offer some sage advice? Am I on the right track with any of the options above? Or is there a better way that I have not considered? Thanks in advace for your help! :) UPDATE: I've just posted a bounty for this, and understand this better, I would also like to know, using a similar approach, how best to perform the following queries : Retrieve all the Items which a user had NOT rated. Retrieve the Item(s) and Item rating(s) which the user had rated the lowest. The Model follows below: public class User { public virtual int UserId { get; set; } public virtual string UserName { get; set; } public virtual IList Ratings { get; set; } } public class Item { public virtual int ItemId { get; set; } public virtual string ItemName { get; set; } public virtual IList Ratings { get; set; } } public class UserRating { public virtual User User { get; set; } public virtual Item Item { get; set; } public virtual Int32 Rating { get; set; } }
