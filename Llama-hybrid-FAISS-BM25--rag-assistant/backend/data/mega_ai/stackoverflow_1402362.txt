[site]: stackoverflow
[post_id]: 1402362
[parent_id]: 1402250
[tags]: 
I would write this as: - (void) testCall: (int *) aMatrice; Doing so allows you to avoid multiple mallocs and the math to calculate a single offset in a linear array based on x, y coordinates in a 2D array is trivial. It also avoids the multiple mallocs implied by int** and the limitations of 2D array syntax perpetuated by the language. So, if you wanted a 4x5 array, you might do: #define WIDTH 4 #define HEIGHT 5 #define INDEXOF(x,y) ((y*WIDTH) + x) int *myArray = malloc(sizeof(int) * 5 * ELEMS_PER_ROW); You could then initialize the array linearly or with a nested for loop: for(int x=0; x And you would pass it to the method like: [foo testCall: myArray]; Though you might want to also carry along the width and the height or, better yet, create a IntMatrix subclass of NSObject that wraps all of the pointer arithmetic and storage beyond a nice clean API. (all code typed into SO)
