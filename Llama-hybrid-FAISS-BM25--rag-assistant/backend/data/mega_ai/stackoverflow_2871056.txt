[site]: stackoverflow
[post_id]: 2871056
[parent_id]: 2871030
[tags]: 
For the first case: alist = string.split(', ') result = ', '.join(sorted(alist + [addition])) For the second case: alist = string.split(', ') result = ', '.join(sorted(alist + [addition], key=lambda s: s.split(':', 1)[1])) If you have many thousands of items in the list, the first case might show measurable performance improvement if you're willing to go to the much-greater complication of bisect.insort ; but that doesn't support a key= , so the extra complication in the second case would be staggering and probably not even buy you any performance. The kind of optimizations mentioned in the last paragraphs are worth considering only if a profile of your whole application shows that this operation is a crucial bottleneck for it (and if it is, you'd gain much more speed by keeping this data structure as a list of words, ', ' -joining it only at need presumably for output purposes, rather than splitting up and rejoining thousands and thousands of times for the kind of extremely long lists where such optimizations might possibly be warranted).
