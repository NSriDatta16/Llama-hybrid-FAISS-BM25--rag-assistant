[site]: stackoverflow
[post_id]: 4423448
[parent_id]: 
[tags]: 
Need help coming up with a Cake sorting algorithm in Java

OK here is what I have to do As an employee of MCI (Mammoth Cakes Incorporated), it is your job to create extremely large layered birthday cakes. A layered birthday cake is made by taking small circular cakes layers and stacking them on top of each other. To perform your job, you stand in front of a big conveyor belt while layers of varying sizes pass in front of you. When you see one you like, you may take it off the conveyor belt and add it to your cake. You may add as many layers to your cake as you would like, as long as you follow these rules: Once a layer is added to your cake it cannot be moved. (It messes up the icing.) Thus, layers can only be added to the top of your cake. Each layer passes in front of you only once. You may take it or leave it. If you take it, you must add it to the top of your cake. If you leave it, it will move on down the conveyor belt, never to return. Each layer in your cake must be at least as small as the layer below. You cannot place a larger layer on top of a smaller one. You will be told in advance the diameters (in inches) of the layers coming down the conveyor belt. Your job is to create the tallest cake possible using those layers. For example, suppose the following list represents the diameters of the layers coming down the conveyor belt: 8 16 12 6 6 10 5 Suppose you take the first layer (with a diameter of 8”) for your cake. That means you may not take the second layer (since you already have a layer of size 8”, and 16” > 8”). Similarly, you could not take the third layer, but you could take the fourth layer (since 6” Following that, you could also take the fifth layer (the rule is simply that the layer on top cannot be larger; it can be the same size). Proceeding in this fashion we can create a cake with a height of 4 layers: 8 6 6 5 However, if we had let the first layer go on by and started with the second layer, we could create a cake with a height of 5: 16 12 6 6 5 Your program will process multiple input sets, one per line. Each line will begin with an integer N, followed by N positive integers representing the sizes of the cake layers in the order that they will be arriving on the conveyor belt. N will always be a non-negative integer, 0 N 100,000. Each layer will have a diameter between 1 and 100,000, inclusive. A line where N = 0 marks the end of the input Sample Input 7 8 16 12 6 6 10 5 10 45 25 40 38 20 10 32 25 18 30 10 10 9 8 7 6 5 4 3 2 1 0 Sample Output 5 6 10 Question: Find the tallest layer of Cakes Here is what I have written so far: import java.io.*; import java.util.*; public class cake { private static String line; private static ArrayList storage = new ArrayList(); private static Integer highestStack = 0; public static void main(String [] args)throws IOException { FileReader fin = new FileReader("cake.in"); BufferedReader infile = new BufferedReader(fin); FileWriter fout = new FileWriter("cake.out"); BufferedWriter outfile = new BufferedWriter(fout); line = infile.readLine(); do { String[] temp = line.split(" "); String number; for(int j = temp.length-1; j!=0; j--) { if(Integer.parseInt(temp[j])
