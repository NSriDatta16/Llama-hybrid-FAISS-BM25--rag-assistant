[site]: stackoverflow
[post_id]: 2695500
[parent_id]: 2695182
[tags]: 
I don't know about 'better', but the more usual way in functional languages would not be to add indices to label each element (your MapIndexed) but instead to just run along each list: Map[#1[[2]] &, Sort[GatherBy[ Thread[ {#1, #2} &[clusterIndices, points]], #1[[1]] &], #1[[1]][[1]] Most people brought up in Lisp/ML/etc will write the Thread function out instantly is the way to implement the zip ideas from those languages. I added in the Sort because it looks like your implementation will run into trouble if clusterIndices = {2[...,2],1,...} . On the other hand, I would still need to add in a line to fix the problem that if clusterIndices has a 3 but no 2, the output indices will be wrong. It is not clear from your fragment how you are intending to retrieve things though. I reckon you will find list processing much easier if you refresh yourself with a hobby project like building a simple CAS in a language like Haskell where the syntax is so much more suited to functional list processing than Mathematica.
