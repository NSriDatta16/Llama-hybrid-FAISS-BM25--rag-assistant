[site]: stackoverflow
[post_id]: 4514955
[parent_id]: 
[tags]: 
Address book database design: denormalize?

I'm designing a contact manager/address book-like application but can't settle on the database design. In my current setup I have a Contact, which has Addresses, Phonenumbers, Emails, and Organizations. All contact properties are currently separate tables with a fk to the Contact table. Needless to say a contact can have any number of these properties. Now, I find myself joining all these tables together if I want to read contacts into the app. Since no filters, reverse lookups, sorts etc. are performed on the related tables, isn't it a better/simpler solution to just store the related fields as json-encoded lists on direct properties of the Contact table? E.g., instead of a Contact with a fk to a phonenumber table with 3 entries, just encode all phonenumbers and store them into a field of the Contact table? Any insights really appreciated! (fyi I'm using Django although that doesn't really matter)
