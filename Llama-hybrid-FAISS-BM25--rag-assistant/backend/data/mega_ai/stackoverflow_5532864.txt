[site]: stackoverflow
[post_id]: 5532864
[parent_id]: 
[tags]: 
Thread.setName(name) caveats

I have a multi threaded client server application which uses Sockets. When a new connection is found, further execution is transferred to a new thread using the new Executors thread pool. I want to log the client id in all logging statements for that client. The problem is that I don't want to modify method signatures just to pass the client id. The solutions that I thought of are: Using ThreadLocal to hold client value. In run(), I can set the client id into Thread using Thread.currentThread().setName(clientId); First one should work. But I like second option because a. I can find the client id from the debugger b. The logger library can be configured to show thread name. So no changes would be required to the log statements and it would also work for loggers inside libraries. What are the caveats for using thread.setName() apart from those mentioned in the javadoc? How does it affect performance? The peak frequency of calling thread.setName() would be about 200 per second and average about 0.3 per second.
