[site]: crossvalidated
[post_id]: 560046
[parent_id]: 560036
[tags]: 
First thing to note is that there are $KN(N-1)/2$ Bernoulli trials to simulate, not $KN(N-1)$ since we are dealing with unique pairs of $N$ teams. For instance, if there were only 2 teams then clearly only $K$ games would be played, not $2K$ . Now, among each pair of teams, we can simulate all $K$ games by using a $Binomial(K,.5)$ distribution instead of performing $K$ separate $Bernoulli(.5)$ simulations. Unfortunately, I do not think we could do better due to the following reason. Let $S_{ij}$ denote the number of games that Team $i$ won against Team $j$ . As mentioned before, we can simulate this by setting $S_{ij} \sim Binomial(K,.5)$ . Now we do not need to simulate $S_{ji}$ after simulating $S_{ij}$ since the number of games Team $j$ won against Team $i$ is $K-S_{ij}$ . Therefore, we could simulate $N(N-1)/2$ random variables ( $\{S_{ij}: i ). Now it may be asked if we can simulate less. For instance, when $N=3$ we could simulate $S_{12}, S_{13},$ and $S_{23}$ . Let $S_i$ denote the number of games Team $i$ won in total. Now the number of games that Team 1 won is $S_1 = S_{12} + S_{13}$ . Hence, one may be led to opine that it is possible to simulate $S_1$ as a $Binomial(2K,.5)$ distribution. Then we would need only simulate $S_{23}$ , saving a single simulation call. Unfortunately, it would be impossible to solve for $S_2=(K-S_{12})+S_{23}$ and $S_3=(K-S_{13}) + (K-S_{23})$ , since given $S_1 \ne 0$ we would not be able to recover $S_{12}$ and $S_{13}$ . I recommend initiating an $N\times N$ matrix with zeroes along the main diagonal. Call this $\boldsymbol{X} = (x_{ij})$ , with $x_{ij}$ denoting the element in the $i$ th row and $j$ th column. Next simulate the $N(N-1)/2$ random variables $S_{ij} \sim Binomial(K,.5)$ for $i and set $x_{ij}=S_{ij}$ . Thus you will have a strictly upper-triangular matrix. Next define a strictly lower triangular $N\times N$ matrix, $\boldsymbol{Y}$ , where each element equals $K$ . Then define the matrix $\boldsymbol{Z} = \boldsymbol{Y} - \boldsymbol{X}^{\prime} + \boldsymbol{X}$ . The row sums of $\boldsymbol{Z}$ will give you $S_1, \cdots S_N$ . Here is some R code which performs quite quickly for $N$ as large as $10,000$ . For larger $N$ , there may be storage issues with the matrices and the $N(N-1)/2$ length vector of Binomial random variables. library(Matrix) set.seed(555) K = 10 N = 3 X = diag(rep(0,N)) Y = X S = rbinom(choose(N,2),K,.5) up.index=which(upper.tri(X)) X[up.index] = S low.index=which(lower.tri(X)) Y[low.index] = K Z = Y-t(X)+X team.points = rowSums(Z)
