[site]: stackoverflow
[post_id]: 1648150
[parent_id]: 1647826
[tags]: 
Consider that if you're handling database updates, your MySQL performance is what, IMO, needs attention. I would expand the test harness like so: run mytop on the dbserver run ab (apache bench) from a client, like your desktop run top or vmstat on the webserver And watch for these things: updates to the table forcing reads to wait (MyISAM engine) high load on the webserver (could indicate low memory conditions on webserver) high disk activity on webserver, possibly from logging or other web requests causing random seeking of uncached files memory growth of your apache processes. If your result sets are getting transformed into large associative arrays, or getting serialized/deserialized, these can become expensive memory allocation operations. Your code might need to avoid calls like mysql_fetch_assoc() and start fetching one row at a time. I often wrap my db queries with a little profiler adapter that I can toggle to log unusually query times, like so: function query( $sql, $dbcon, $thresh ) { $delta['begin'] = microtime( true ); $result = $dbcon->query( $sql ); $delta['finish'] = microtime( true ); $delta['t'] = $delta['finish'] - $delta['begin']; if( $delta['t'] > $thresh ) error_log( "query took {$delta['t']} seconds; query: $sql" ); return $result; } Personally, I prefer using xcache to APC, because I like the diagnostics page it comes with. Chart your performance over time. Track the number of concurrent connections and see if that correlates to performance issues. You can grep the number of http connections from netstat from a cronjob and log that for analysis later. Consider enabling your mysql query cache, too.
