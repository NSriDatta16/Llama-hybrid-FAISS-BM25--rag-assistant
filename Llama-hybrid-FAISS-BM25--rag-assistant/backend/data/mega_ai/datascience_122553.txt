[site]: datascience
[post_id]: 122553
[parent_id]: 122548
[tags]: 
I think what you are looking for is something like crepes: https://github.com/henrikbostrom/crepes that seems to do what you are exactly asking (providing p-values). I stumbled upon this while looking at method to calibrate the models (i.e. fitting some spline on outputs). The code below provide what you ask on a sklearn random forest: from sklearn.datasets import fetch_openml from sklearn.model_selection import train_test_split from crepes import WrapClassifier from sklearn.ensemble import RandomForestClassifier dataset = fetch_openml(name="qsar-biodeg", parser="auto") X = dataset.data.values.astype(float) y = dataset.target.values X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5) X_prop_train, X_cal, y_prop_train, y_cal = train_test_split(X_train, y_train, test_size=0.25) rf = WrapClassifier(RandomForestClassifier(n_jobs=-1)) rf.fit(X_prop_train, y_prop_train) rf.calibrate(X_cal, y_cal) rf.predict_p(X_test) Notice that we need to split the data in three to make sure the calibration is performed separately. Regarding other implementation (tf/keras - pytorch) I don't know if this is compatible - I think not -. I have also found a venn-abers implementation that doesn't seems to need access to the model.
