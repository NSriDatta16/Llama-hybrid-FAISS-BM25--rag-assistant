[site]: stackoverflow
[post_id]: 4201869
[parent_id]: 4198281
[tags]: 
It's important to understand what each of those lines of code does. They are not all the same and they are not necessarily redundant. One thing that will help is to use the correct terminology — for example, with NSObject *myObject; you're probably referring to an instance variable declaration. First and foremost, a @property declaration in an @interface lets you say that instances of a class expose a piece of state. It doesn't say much about the implementation of that state, only that it's exposed by instances of your class and the API contract (memory management, atomicity, methods) for the state. The @synthesize directive tells the compiler to create or use a specific instance variable as storage for a declared @property . This does not need to be how you provide storage for a property. For example, Core Data provides its own storage for modeled properties, so you use @dynamic for those instead. You also don't need to use an instance variable with the same name as your @property — to extend your example above, you might name your instance variable myObject_ while naming your property object and that's perfectly fine. Finally, you send the instance variable -release in -dealloc — for an object-type property marked retain or copy — because you've said you'll manage its memory. You're not releasing the property , you're releasing the storage . If you implemented the storage some other way, you'd clean it up some other way.
