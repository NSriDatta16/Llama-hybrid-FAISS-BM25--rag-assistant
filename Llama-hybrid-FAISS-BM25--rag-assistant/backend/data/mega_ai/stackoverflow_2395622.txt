[site]: stackoverflow
[post_id]: 2395622
[parent_id]: 2395585
[tags]: 
Model View Controller separation is a nice one, though standard with most frameworks. It greatly improves code readability, separation of tasks, testability, optimization later on, and maintainability in the future. The ability to utilize a templating language of your choice. This allows you to balance speed, simplicity, and extensibility according to your own needs and habits. Widget library integration (e.g. to ToscaWidgets) is a bonus, providing automated server-side (and with certain add-ons client-side) validation and type coercion. The framework should encourage structured projects. A variety of deployment options; pure WSGI, FastCGI, etc. Note that the frameworks (off the top of my head) that meet these criteria are quite varied: WebCore (I’m biased, it’s mine. ;) TurboGears (I’ve used this one a lot on previous projects; it’s pretty good!) Django (I hesitate to mention this one, but it’s quite popular.) It also depends on how low-level you want to get and how comfortable you are with the support base. WebCore and TurboGears utilize standard WSGI middleware layers and provide helpful accessors for shared features, while Django takes the “batteries included” approach. The pure WSGI approach is much easier to customize, while Django has a huge userbase. These are a few of my thoughts, and I’ll probably update my answer as I think of more things.
