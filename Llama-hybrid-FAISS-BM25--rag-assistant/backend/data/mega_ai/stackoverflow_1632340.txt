[site]: stackoverflow
[post_id]: 1632340
[parent_id]: 1631087
[tags]: 
Here's a way to do it in a single pass through the list: collectDups[l_] := Block[{i}, i[n_]:= (i[n] = n; Unevaluated@Sequence[]); i /@ l] For example: collectDups[{1, 1, 6, 1, 3, 4, 4, 5, 4, 4, 2, 2}] --> {1, 1, 4, 4, 4, 2} If you want the list of unique duplicates -- {1, 4, 2} -- then wrap the above in DeleteDuplicates , which is another single pass through the list ( Union is less efficient as it also sorts the result). collectDups[l_] := DeleteDuplicates@Block[{i}, i[n_]:= (i[n] = n; Unevaluated@Sequence[]); i /@ l] Will Robertson's solution is probably better just because it's more straightforward, but I think if you wanted to eek out more speed, this should win. But if you cared about that, you wouldn't be programming in Mathematica! :)
