[site]: datascience
[post_id]: 29046
[parent_id]: 20249
[tags]: 
A couple of vocab words: layer: An entire set of receptive units with shared weights that creates a convolutional feature map Unit: a single nxn neighborhood filter operator in a given layer of a CNN (say 3x3 or 5x5, whatever given filter size you are using) stride length: The distance, or padding, in between the center of every unit of a layer In a convolutional layer, the convolution operation can be thought of like a sliding window, in which the filter from a given layer is applied to the top left corner patch of pixels, then slid to the left 1 horizontal stride length and repeated until the end of the row, then it hops down 1 vertical stride length and starts again, and so on and so forth. This is implemented in a CNN as a 2D grid of units, all sharing the same weights for convolution (this produces the same result as a sliding window). The RCL takes the sliding window concept of convolution and adds memory to it, so the filter within each unit will be modified based on the response of the previous unit. The time step means how many strides back you want to directly include in the calculation of the current filter. So, if I have an RCL with a filter size of 5x5, and a stride of 1 for an image size of 100x100, a single convolutional layer (assuming it is padded for the filter radius) will have a grid of 100x100 units. Utilizing a time step of N means that you will include response results from the previous N units on the grid to calculate the new unit response (or, more accurately, the unit weights in backprop).
