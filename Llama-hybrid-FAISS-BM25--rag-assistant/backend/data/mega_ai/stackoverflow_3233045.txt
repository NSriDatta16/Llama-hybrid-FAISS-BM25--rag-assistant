[site]: stackoverflow
[post_id]: 3233045
[parent_id]: 3232582
[tags]: 
The reason that you cannot pass the temporary as argument to swap is that the argument is passed by non-const reference. And temporaries can only be bound by const-references. This is spread over §8.5.3, with the appropriate being in paragraph 5, second bullet: §8.5.3 A reference to type “cv1 T1” is initialized by an expression of type “cv2 T2” as follows: [bullet one, does not apply here: binding to non-const ref ] Otherwise, the reference shall be to a non-volatile const type (i.e., cv1 shall be const). The reason why writing the call in the opposite direction works is that the standard allows to call mutating member functions on temporary objects. §3.10/10 An lvalue for an object is necessary in order to modify the object except that an rvalue of class type can also be used to modify its referent under certain circumstances. [Example: a member function called for an object (9.3) can modify the object. ] The line of reasoning that you request for the future is that, while you can modify a temporary through it's own functions, you cannot pass it to a function or method that could modify it (pass by non-const reference)
