[site]: stackoverflow
[post_id]: 1861560
[parent_id]: 
[tags]: 
Sorting in grid panel

var store = new FMP.AspNetJsonStore({ fields: [ { name: 'AssetID' }, { name: 'AssociationID' }, { name: 'Image' }, { name: 'StatusName' }, { name: 'ModelName' }, { name: 'IPAddress' }, { name: 'InScope', type: 'boolean' }, { name: 'ServicePlanName' }, { name: 'PricePlanName' }, { name: 'PricePlanDescription' }, { name: 'Program' }, { name: 'ServicePlanID' }, { name: 'Customer' }, { name: 'Black', type: 'float' }, { name: 'Cyan', type: 'float' }, { name: 'Magenta', type: 'float' }, { name: 'Yellow', type: 'float' }, { name: 'BlackPct' }, { name: 'CyanPct' }, { name: 'MagentaPct' }, { name: 'YellowPct' }, { name: 'PrinterMarkerSupplies' }, { name: 'PageCount' }, { name: 'BlackImpressions' }, { name: 'ColorImpressions' }, { name: 'PricePlanID' }, { name: 'ResponsibilityForAction' }, { name: 'PrinterSerialNumber' } ], totalProperty: "TotalCount", autoLoad: { params: { start: 0, limit: myPageSize} }, //autoLoad: true, proxy: new Ext.data.HttpProxy({ // Call web service method using GET syntax url: 'GetPrintersGrid.asmx/buildGrid', // Ask for Json response headers: { 'Content-type': 'application/json' }, method: "GET" }), remoteSort: true, //sortInfo: { field: 'PageCount', direction: "DESC" }, groupField: 'Customer', root: 'Records' }); store.setDefaultSort('PageCount', 'DESC'); I am using a webservice to sort this. I am getting an error {"Message":"Invalid JSON primitive: DESC.","StackTrace":" at System.Web.Script.Serialization.JavaScriptObjectDeserializer.DeserializePrimitiveObject()\r\n at System.Web.Script.Serialization.JavaScriptObjectDeserializer.DeserializeInternal(Int32 depth)\r\n at System.Web.Script.Serialization.JavaScriptObjectDeserializer.BasicDeserialize(String input, Int32 depthLimit, JavaScriptSerializer serializer)\r\n at System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(JavaScriptSerializer serializer, String input, Type type, Int32 depthLimit)\r\n at System.Web.Script.Services.RestHandler.GetRawParamsFromGetRequest(HttpContext context, JavaScriptSerializer serializer, WebServiceMethodData methodData)\r\n at System.Web.Script.Services.RestHandler.GetRawParams(WebServiceMethodData methodData, HttpContext context)\r\n at System.Web.Script.Services.RestHandler.ExecuteWebServiceCall(HttpContext context, WebServiceMethodData methodData)","ExceptionType":"System.ArgumentException"} Can anyone help me in this issue I am using Ext.ux.AspWebServiceProxy class and used this proxy class in the store.Also defined the webservice in the user control in scriptmanager proxy Iam getting an error saying GetPrintersGrid is undefined.Iam using the follwing example for reference. http://osman.in/aspnet/using-extjs-grid-with-aspnet-ajax-wcf-webservices-c/ Can you please help me in this issue. /// Ext.namespace('Ext.ux'); Ext.ux.AspWebServiceProxy = function(conn) { Ext.ux.AspWebServiceProxy.superclass.constructor.call(this); Ext.apply(this, conn); }; Ext.extend(Ext.ux.AspWebServiceProxy, Ext.data.DataProxy, { load : function (params, reader, callback, scope, arg) { var userContext = { callback: callback, reader: reader, arg: arg, scope: scope }; var proxyWrapper = this; //Handles the response we get back from the web service call var webServiceCallback = function(response, context, methodName) { proxyWrapper.loadResponse(response, userContext, methodName); } var serviceParams = []; //Convert the params into an array of values so that they can be used in the call (note assumes that the properties on the object are in the correct order) for (var property in params) { serviceParams.push(params[property]); } //Add the webservice callback handlers serviceParams.push(webServiceCallback); serviceParams.push(this.handleErrorResponse); //Make the actual ASP.Net web service call this.webServiceProxyMethod.apply(this.webServiceProxy, serviceParams); }, handleErrorResponse : function(response, userContext, methodName) { alert("Error while calling method: " + methodName + "\n" + response.get_message()); }, loadResponse : function (response, userContext, methodName) { var result = userContext.reader.readRecords(response); userContext.callback.call(userContext.scope, result, userContext.arg, true); } }); var dataStore = new Ext.data.Store( { //Note that I have renamed the web service proxy class proxy: new Ext.ux.AspWebServiceProxy( { webServiceProxy: GetPrintersGrid, webServiceProxyMethod: GetPrintersGrid.buildGrid }), remoteSort: true });
