[site]: stackoverflow
[post_id]: 4342728
[parent_id]: 4342601
[tags]: 
I came across a rather unusual way to build an object of a class in this blog : http://marchwicki.pl/blog/2010/11/building-a-pojo-in-an-elegant-way/ . This is the builder design pattern with a fluent interface . As you see from the article, the two ideas are complementary and often used together (which I've seen some call a "fluent builder" ), so much so, that they are often confused as the same thing: The builder pattern abstracts and simplifies the construction of a complex object into simpler steps. The builder pattern is discussed in the "Gang of Four"'s Design Patterns book Joshua Bloch talks about builders as Item 2 in his book Effective Java A fluent interface is an API-style that uses contexts and method chaining to improve the readability of code. See Martin Fowler's post about fluent interfaces: http://www.martinfowler.com/bliki/FluentInterface.html Note that you can use the builder pattern without a fluent interface (e.g. a builder with simple setters). You can also use the fluent interface idea in more contexts than just builders (e.g. to improve the readability of a set of overloaded methods with many parameters and parameter variations). Is this a good way to do this? This "fluent builder" seems highly accepted as "a good way to do this" (at least based on the number of articles and blog posts I've seen proselytizing the idea). What are the benefits? Each idea has its own distinct advantages/benefits. For example, see: Builder - When would you use the Builder Pattern? Fluent Interface - What's a fluent interface?
