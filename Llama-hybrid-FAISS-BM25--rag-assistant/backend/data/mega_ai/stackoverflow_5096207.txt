[site]: stackoverflow
[post_id]: 5096207
[parent_id]: 5095525
[tags]: 
I would like to recommend using javascript in a functional style which can be helped by abstractions like coffeescript and underscore.js . Also minimising the cross module interaction and relying on an event driven code is a great way to keep your entire project organized. I defiantly like the way that backbone.js handles the module-view weak coupling by having view's bind the change events on modules. Functional event based code is great for macro structure. I would also advice coupling javascript to the DOM. (Again backbone.js has a great example of how the model is completely dom independant and even the views aren't dependant on the dom. For all you care the views could be shooting data down a WebSocket) I'm personally also a fan of having one central file manager rather then having a complicated require/include structure on every page. Load javascript modules from your central loader based on a page by page feature detection. (See here for an example of a central file manager). I would also like to advocate the growing possibility of good re-use through node.js . There are quite a few people working on porting browser code verbatim to node.js or copying node.js code verbatim to the browser. (see YUI3 running on nodejs , node.js in the browser , commonJS in the browser Admittedly most of these are WIP and not stable.)
