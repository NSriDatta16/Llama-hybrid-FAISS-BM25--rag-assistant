[site]: stackoverflow
[post_id]: 1186859
[parent_id]: 1186775
[tags]: 
There is no indexing in persistent storage. You can save and retrieve arrays of Persistable objects. On example, Contact Persistable: public class Contact implements Persistable{ int mId; String mAdress; String mName; public Contact( int id, String adress, String name ){ mId = id; mAdress = adress; mName = name; } } Mail Persistable: public class Mail implements Persistable{ String mMessage = null; int mSenderId = -1; int[] mReceiverIdList = null; public Mail(String message, int senderId, int[] receiverIdList){ mMessage = message; mSenderId = senderId; mReceiverIdList = receiverIdList; } } Some Helper class: public class PersistentStoreHelper{ static PersistentObject contactStore = PersistentStore .getPersistentObject( 0xf140775afcb94f90L ); static PersistentObject mailStore = PersistentStore .getPersistentObject( 0xd43b0423228ff7c0L ); public static void saveContacts( Contact[] contacts ){ saveObject( contactStore, contacts ); } public static void saveMails( Mail[] mails ){ saveObject( mailStore, mails ); } public static Contact[] retrieveContacts(){ return ( Contact[] )retrieveObject( contactStore ); } public static Mail[] retrieveMails(){ return ( Mail[] )retrieveObject( mailStore ); } public static void saveObject( PersistentObject store, Object object ){ synchronized( store ){ store.setContents( object ); store.commit(); } } public static Object retrieveObject( PersistentObject store ){ Object result = null; synchronized( store ){ result = store.getContents(); } return result; } } And sample of using: class Scr extends MainScreen implements FieldChangeListener{ ButtonField mBtnInit = null; BasicEditField mInputSenderId = null; BasicEditField mInputReceiverId = null; ButtonField mBtnSearch = null; VerticalFieldManager mMailsList = null; public Scr(){ mBtnInit = new ButtonField( "Init Persistenet Storage", ButtonField.CONSUME_CLICK ); mBtnInit.setChangeListener( this ); add( mBtnInit ); mInputSenderId = new BasicEditField( "sender id:", "43" ); add( mInputSenderId ); mInputReceiverId = new BasicEditField( "receiver id:", "12" ); add( mInputReceiverId ); mBtnSearch = new ButtonField( "Search", ButtonField.CONSUME_CLICK ); mBtnSearch.setChangeListener( this ); add( mBtnSearch ); mMailsList = new VerticalFieldManager(); add( mMailsList ); } public Vector getMailByIds( int senderId, int recepientId ){ Vector result = new Vector(); Mail[] mails = PersistentStoreHelper.retrieveMails(); for( int i = 0; i "; String to = "To: "; for( int j = 0; j ; "; } to = to.substring( 0, to.length() - 2 ); String msg = "Message: " + mail.mMessage; mMailsList.add( new LabelField( from ) ); mMailsList.add( new LabelField( to ) ); mMailsList.add( new LabelField( msg ) ); } } } } Read BlackBerry Java Application - Core - Development Guide - Persistent Storage Also you can read riccomini - code blackberry persistent store
