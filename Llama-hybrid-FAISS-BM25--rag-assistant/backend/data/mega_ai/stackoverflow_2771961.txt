[site]: stackoverflow
[post_id]: 2771961
[parent_id]: 2771880
[tags]: 
You will never be certain that your unit test covers all eventualities, so it's more or less your personal measure as to how extensively you test and also what exactly. Your unit test should at least test the border cases, which you're not doing there. What happens when you try to delete an Apple with an invalid id? What happens if you have an empty list, what if you delete the first/last item, etc. In general, I don't see much point in testing a single special case as you do above. Instead I always try run a bunch of tests, which in your example case suggests a slightly different approach: First, write a checker method. You can do this as soon as you know that you will have a list of fruits and that in this list all fruits will have successive IDs (it's like testing if the list is sorted). No code for deletion has to be written for that, plus you can later reuse it f.ex. in unit-testing insertion code. Then, create a bunch of different (maybe random) test lists (empty size, average size, large size). This also requires no prior code for deletion. Finally, run specific deletions for each of the test lists (delete with invalid id, delete id 1, delete last id, delete random id) and check the result with your checker method. At this point you should at least know the interface for your deletion method, but it does not need to have been written already. @Update with respect to comment: The checker method is more of a consistency check on the datastructure. In your example, all fruits in the list have successive IDs, so that's checked. If you have a DAG structure, you might want to check its acyclicity, etc. Testing whether deletion of ID x worked depends on whether it was present in the list at all, and whether your application distinguishes the case of a failed deletion due to invalid ID from a successful one (as either way there is no such ID left in the end). Clearly, you also want to verify that a deleted ID is no longer present in the list (though that is not part of what I meant with the checker method - instead I thought it obvious enough to omit).
