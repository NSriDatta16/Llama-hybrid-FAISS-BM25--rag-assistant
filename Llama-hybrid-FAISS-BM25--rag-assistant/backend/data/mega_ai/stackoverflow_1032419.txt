[site]: stackoverflow
[post_id]: 1032419
[parent_id]: 223771
[tags]: 
This is what worked for me: linking the sources into separate libraries. (My problem was not with creating a program but one/many libraries.) I then linked (successfully) one program with the two libraries I created. I had two sets of functions (with one depending on the other) in the same source file, and declared in the same single header file. Then I tried to separate the two function sets in two header+source files. I tried with both #pragma once and include guards with #ifndef ... #define ... #endif. I also defined the variables and functions as extern in the header files. As Steve Fallows pointed out, the problem isn't with the compilation but rather with linkage. In my particular problem, I could get away with having two sets of functions, each in its own source file, compiling and then linking into two separate libraries . g++ -o grandfather.o -c grandfather.cpp g++ -o father.o -c father.cpp g++ -fPIC -shared -o libgf.so grandfather.o g++ -fPIC -shared -o libfather.so father.o This forces me to link my programs with both libgf.so and libfather.so. In my particular case it makes no difference; but otherwise I couldn't get them to work together.
