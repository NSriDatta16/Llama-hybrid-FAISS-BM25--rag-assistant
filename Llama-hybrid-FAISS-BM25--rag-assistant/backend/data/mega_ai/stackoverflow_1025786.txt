[site]: stackoverflow
[post_id]: 1025786
[parent_id]: 1025777
[tags]: 
First, I don't think the snippet is valid, because DownloadString returns (as expected) a String. Now, do I understand right that it works correctly when you use DownloadData and incorrectly when you use DownloadString? That makes sense because it is not valid to decode Gzip data as Unicode. EDIT: Okay, the ToBase64String and FromBase64String should be okay. But if you can avoid it and pass the byte[] directly, that would be good. public static int ImportStatHistoryXML(Person tempPerson, Campus tempCampus, byte[] compressedFile) { Then you would get rid of the first line of the function (the decode from base64). Note we're renaming encryptedFile to compressedFile. The line: memStream.ReadByte(); should not be there. You are reading a byte and discarding it. If everything is as we expect that byte is 0x1F, part of the gzip magic number. Then, I think you're using the wrong gzip class. You want GZipStream . It is constructed like: GZipStream stream = new GZipStream(memStream, CompressionMode.Decompress); Then, you use StreamReader directly on that: StreamReader sr = new StreamReader(stream); It would help if you knew the encoding, but hopefully the default will be correct. Then it seems correct from there. So, overall we get the below. public static int ImportStatHistoryXML(Person tempPerson, Campus tempCampus, byte[] compressedFile) { MemoryStream memStream = new MemoryStream(compressedFile); GZipStream gzStream = new GZipStream(memStream, CompressionMode.Decompress); StreamReader sr = new StreamReader(gzStream); string decompressed = sr.ReadToEnd(); DataSet tempSet = new DataSet(); StringReader xmlReader = new StringReader(decompressed); tempSet.ReadXml(xmlReader); DataTable statTable = tempSet.Tables["Stats"]; //... }
