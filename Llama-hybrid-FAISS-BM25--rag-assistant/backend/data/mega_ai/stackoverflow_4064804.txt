[site]: stackoverflow
[post_id]: 4064804
[parent_id]: 4038088
[tags]: 
I will answer my own question after more research. It seems that the website that I having the issue with is returning something incorrect where IE, FF, and URLOpenPullStream do not recognize it as valid gzip content. The headers appear to be fine, e.g. HTTP/1.1 200 OK Content-Type: text/html; charset=iso-8859-1 Content-Encoding: none Server: Microsoft-IIS/6.0 MSNSERVER: H: COL102-W41 V: 15.4.317.921 D: 2010-09-21T20:29:43 Vary: Accept-Encoding Content-Encoding: gzip Content-Length: 4258 Date: Wed, 27 Oct 2010 20:48:15 GMT Connection: keep-alive Set-Cookie: xidseq=4; domain=.live.com; path=/ Set-Cookie: LD=; domain=.live.com; expires=Wed, 27-Oct-2010 19:08:15 GMT; path=/ Cache-Control: no-cache, no-store Pragma: no-cache Expires: -1 Expires: -1 but URLOpenPullStream just downloaded it in raw compressed format, IE reports an error if you try to access the site, and FF shows garbage. After doing a test with a site that does return valid gzip content, e.g. www.webcompression.org, then IE, FF, and URLOpenPullStream worked fine. So, it appears that URLOpenPullStream does support gzip content. In this case, it was transparent. In OnDataAvailable, I received the uncompressed data, and in the OnResponse, the headers did not show the Content-Encoding as gzip. Unfortunately, this still did not solve my problem. I resolved by checking the response headers in OnResponse event. If the Content-Encoding was gzip, then I set a flag and when the download was complete, then used zlib gzip routines to uncompress the content. This seemed to work fine. This should be fine for my rare case since typically I should never receive a Content-Encoding : gzip in the OnResponse headers since the URLOpenPullStream handles the uncompress transparently. Dunno :)
