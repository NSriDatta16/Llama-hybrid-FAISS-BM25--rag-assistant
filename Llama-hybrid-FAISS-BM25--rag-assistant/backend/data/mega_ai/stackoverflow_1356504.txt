[site]: stackoverflow
[post_id]: 1356504
[parent_id]: 1356430
[tags]: 
I think that this is a difficult question that has no hard and fast answer. A key to one answer is to analyze Aggregates and Associations as discussed in Domain-Driven Design . The point is that either you load the children together with the parent or you load them separately. When you load them together with the parent (Product in your example), the parent controls all access to the children, including retrieval and write operations. A corrolary to this is that there must be no repository for the children - data access is managed by the parent's repository. So to answer one of your questions: "why do I need this collection in Product at all?" Maybe you don't, but if you do, that would mean that Items would always be loaded when you load a Product. You could implement a Max method that would simply find the Max by looking over all Items in the list. That may not be the most performant implementation, but that would be the way to do it if Product was an Aggregate Root. What if Product is not an Aggregate Root? Well, the first thing to do is to remove the Items property from Product. You will then need some sort of Service that can retrieve the Items associated with the Product. Such a Service could also have a GetMaxItemSmth method. Something like this: public class ProductService { private readonly IItemRepository itemRepository; public ProductService (IItemRepository itemRepository) { this.itemRepository = itemRepository; } public IEnumerable GetMaxItemSmth(Product product) { var max = this.itemRepository.GetMaxItemSmth(product); // Do something interesting here return max; } } That is pretty close to your extension method, but with the notable difference that the repository should be an instance injected into the Service. Static stuff is never good for modeling purposes. As it stands here, the ProductService is a pretty thin wrapper around the Repository itself, so it may be redundant. Often, however, it turns out to be a good place to add other interesting behavior, as I have tried to hint at with my code comment.
