[site]: stackoverflow
[post_id]: 3598645
[parent_id]: 3597989
[tags]: 
Returning the value is probably the best solution, but here is another one. You can pass an object to the function that functions as scope and your value will be set as property of this object. This is done often if you have a method to load external scripts to not pollute the global namespace: function setMyType(scope){ if ( $(this).is(".whatever") ){ scope.myType = typeOne; } else if ( $(this).is(".something") ){ scope.myType = typeTwo; } } which would be used like: var scope = {}; setMyType(scope); //now scope.myType contains your value I don't encourage you to use this method in your situation (returning the value makes much more sense and is easier to understand) but it is worth mentioning it.
