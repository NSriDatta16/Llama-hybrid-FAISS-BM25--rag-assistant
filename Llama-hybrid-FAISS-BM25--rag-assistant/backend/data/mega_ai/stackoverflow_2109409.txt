[site]: stackoverflow
[post_id]: 2109409
[parent_id]: 2109166
[tags]: 
"State of the art" is what you make it to be. I do understand where you are coming from, however. I was in a position similar to you with a previous employer. I would be willing to bet that there are a few things that you can do to bridge the gap. Start refactoring. A green-field approach is seldom attractive to those who sign the checks, unless there is an organization effort to do so. As a developer/architect, it can be very frustrating to work in a "legacy" codebase. Identify the contention points and what the better way would be to address the problem. Write unit tests to ensure that any changes are non-breaking. It may be a good idea to use something like a proxy pattern to isolate the new code from the old code. Delegation through such a class will let you structure the new code how you see fit. Take the opportunity to create a new assembly that houses application architecture functionalities. If you plan it right, you can start using this application architecture to refactor other parts of the codebase in a fairly non-invasive fashion. Solicit feedback. If you do not like the code, chances are - the rest of the team will have his/her issues, as well. Find out what parts of the code they absolutely dread and why. Chances are different people will dislike different areas and provide insight that no one person is going to provide. Create a clear action plan, and figure out how it could have been done better. This will give you an idea of what direction to take. Code reviews. If you aren't doing them, you need to start. Correct issues in the code going forward so that the team does not continually add to the heartache. It also provides a good opportunity to say, "We put something in place to make this easier. Look at how you could do this with the new application architecture..." Educate. No matter how cutting-edge and clean and pristine something might be, under deadlines, people will revert to however it can be done quickest. Make sure to provide opportunity for refactoring and communicate better ways to accomplish things. Adopt better tooling. Things like ReSharper are priceless and can generally be argued to the powers that be about the productivity gains. Not to go down a ReSharper rat hole, but look at the plugin for StyleCop, and the ones called Agent Johnson and Agent Smith. Reach out to the interwebs and find good starting points for things you are trying to accomplish. Codeplex is a treasure trove of projects to make any architect's life easier. Don't give up. It is really easy to get frustrated. Stick to your guns, but don't be a tyrant about things. I followed a very similar approach to this, and it works. Eventually you build up a solid framework to build off of, and new projects start by being built with it. It becomes second nature to use, and the developers will enjoy refactoring code to make things more concise, stable, and "cutting-edge".
