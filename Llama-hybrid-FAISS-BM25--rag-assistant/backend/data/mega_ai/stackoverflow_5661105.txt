[site]: stackoverflow
[post_id]: 5661105
[parent_id]: 5660874
[tags]: 
First define a declare a delegate like this - @protocol IconDownloaderDelegate; Then create a delegate object like this - @interface IconDownloader : NSObject { NSIndexPath *indexPathInTableView; id delegate; NSMutableData *activeDownload; NSURLConnection *imageConnection; } Declare a property for it - @property (nonatomic, assign) id delegate; Define it - @protocol IconDownloaderDelegate - (void)appImageDidLoad:(NSIndexPath *)indexPath; @end Then you can call methods on this delegate - [delegate appImageDidLoad:self.indexPathInTableView]; Here is the complete source code of the image downloader class - .h file - @class AppRecord; @class RootViewController; @protocol IconDownloaderDelegate; @interface IconDownloader : NSObject { AppRecord *appRecord; NSIndexPath *indexPathInTableView; id delegate; NSMutableData *activeDownload; NSURLConnection *imageConnection; } @property (nonatomic, retain) AppRecord *appRecord; @property (nonatomic, retain) NSIndexPath *indexPathInTableView; @property (nonatomic, assign) id delegate; @property (nonatomic, retain) NSMutableData *activeDownload; @property (nonatomic, retain) NSURLConnection *imageConnection; - (void)startDownload; - (void)cancelDownload; @end @protocol IconDownloaderDelegate - (void)appImageDidLoad:(NSIndexPath *)indexPath; @end .m file - #import "IconDownloader.h" #import "MixtapeInfo.h" #define kAppIconHeight 48 #define TMP NSTemporaryDirectory() @implementation IconDownloader @synthesize appRecord; @synthesize indexPathInTableView; @synthesize delegate; @synthesize activeDownload; @synthesize imageConnection; #pragma mark - (void)dealloc { [appRecord release]; [indexPathInTableView release]; [activeDownload release]; [imageConnection cancel]; [imageConnection release]; [super dealloc]; } - (void)startDownload { self.activeDownload = [NSMutableData data]; // alloc+init and start an NSURLConnection; release on completion/failure NSURLConnection *conn = [[NSURLConnection alloc] initWithRequest: [NSURLRequest requestWithURL: [NSURL URLWithString:appRecord.mixtape_image]] delegate:self]; self.imageConnection = conn; [conn release]; } - (void)cancelDownload { [self.imageConnection cancel]; self.imageConnection = nil; self.activeDownload = nil; } #pragma mark - #pragma mark Download support (NSURLConnectionDelegate) - (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data { [self.activeDownload appendData:data]; } - (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error { // Clear the activeDownload property to allow later attempts self.activeDownload = nil; // Release the connection now that it's finished self.imageConnection = nil; } - (void)connectionDidFinishLoading:(NSURLConnection *)connection { // Set appIcon and clear temporary data/image UIImage *image = [[UIImage alloc] initWithData:self.activeDownload]; self.appRecord.mixtape_image_obj = image; self.activeDownload = nil; [image release]; // Release the connection now that it's finished self.imageConnection = nil; // call our delegate and tell it that our icon is ready for display [delegate appImageDidLoad:self.indexPathInTableView]; } @end and here is how we use it - #import "IconDownloader.h" @interface RootViewController : UITableViewController { NSArray *entries; // the main data model for our UITableView NSMutableDictionary *imageDownloadsInProgress; // the set of IconDownloader objects for each app } in .m file - - (void)startIconDownload:(AppRecord *)appRecord forIndexPath:(NSIndexPath *)indexPath { IconDownloader *iconDownloader = [imageDownloadsInProgress objectForKey:indexPath]; if (iconDownloader == nil) { iconDownloader = [[IconDownloader alloc] init]; iconDownloader.appRecord = appRecord; iconDownloader.indexPathInTableView = indexPath; iconDownloader.delegate = self; [imageDownloadsInProgress setObject:iconDownloader forKey:indexPath]; [iconDownloader startDownload]; [iconDownloader release]; } } here is delegate gets called automatically - // called by our ImageDownloader when an icon is ready to be displayed - (void)appImageDidLoad:(NSIndexPath *)indexPath { IconDownloader *iconDownloader = [imageDownloadsInProgress objectForKey:indexPath]; if (iconDownloader != nil) { UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:iconDownloader.indexPathInTableView]; // Display the newly loaded image cell.imageView.image = iconDownloader.appRecord.appIcon; } }
