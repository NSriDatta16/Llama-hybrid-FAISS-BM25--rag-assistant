[site]: stackoverflow
[post_id]: 1514771
[parent_id]: 1512605
[tags]: 
Generally speaking, there are four ways that a child object can obtain the value of a parent object's property, in order of ascending complexity: Set the value in the child object at construction. Advantage: simple as all get-out. Disadvantages: If the parent property changes, the child gets out of sync; can be a memory hog if you have a lot of child objects, since each one has its own copy of the value. Maintain a reference to the parent as a property of the child. Advantages: Pretty simple; the property value is current whenever the child asks for it. Disadvantages: Problematic if you disconnect a child from its parent, or assign it to a new one; often a good idea to implement a collection class whose Add and Remove methods manage the parent-child relationship; since child objects retain a reference to the parent object, the parent object can't be disposed until there are no more child objects. Use an event to dispatch property-changed notifications from the parent to the children. Advantages: Child objects don't need to know anything about the parent's implementation details, or even if there is a parent, Disadvantages: Complicated; can perform poorly if there are a lot of child objects and the parent property changes frequently; initializing the child property can be inelegant; child objects won't get disposed if they don't unsubscribe from the event. Use composition (e.g. data-binding), so that a third class is responsible for mediating updates between the parent and child. Advantages: Extremely flexible; simple to use, once you understand the composition infrastructure - it's essentially why WPF will one day conquer the earth. Disadvantages: Has all of the disadvantages of approach #3 and then some; generally too complicated to be worth building your own infrastructure if you don't have a really, really good reason (which, generally speaking, you don't); using existing infrastructure (e.g. WinForms or WPF binding objects) requires understanding and implementing a fair amount of plumbing (e.g. INotifyPropertyChanged or, God help you, dependency properties).
