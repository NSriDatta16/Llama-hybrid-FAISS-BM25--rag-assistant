[site]: stackoverflow
[post_id]: 3402849
[parent_id]: 1324398
[tags]: 
I had a Window that I wanted to give just a glass boarder (no title bar and non-resizable) and ran into the same problem as you. You cannot accomplish this just by setting the Window's style. My solution was to set ResizeMode="CanResize" and WindowStyle="None" then handle the WM_NCHITTEST event to convert resizable border hits to non-resizable border hits. It was also necessary to modify the Window's style to disable maximizing and minimizing (using Windows shortcuts) and the system menu: private void Window_SourceInitialized(object sender, EventArgs e) { System.Windows.Interop.HwndSource source = (System.Windows.Interop.HwndSource)PresentationSource.FromVisual(this); source.AddHook(new System.Windows.Interop.HwndSourceHook(HwndSourceHook)); IntPtr hWnd = new System.Windows.Interop.WindowInteropHelper(this).Handle; IntPtr flags = GetWindowLongPtr(hWnd, -16 /*GWL_STYLE*/); SetWindowLongPtr(hWnd, -16 /*GWL_STYLE*/, new IntPtr(flags.ToInt64() & ~(0x00010000L /*WS_MAXIMIZEBOX*/ | 0x00020000L /*WS_MINIMIZEBOX*/ | 0x00080000L /*WS_SYSMENU*/))); } private static IntPtr HwndSourceHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled) { switch (msg) { case 0x0084 /*WM_NCHITTEST*/: IntPtr result = DefWindowProc(hwnd, msg, wParam, lParam); if (result.ToInt32() >= 10 /*HTLEFT*/ && result.ToInt32() This gives you a Window in Windows 7 suitable for notification area flyouts (e.g. the clock or volume flyouts). BTW, you can reproduce the shading at the bottom of the flyout by creating a control of height 44 and setting it's background:
