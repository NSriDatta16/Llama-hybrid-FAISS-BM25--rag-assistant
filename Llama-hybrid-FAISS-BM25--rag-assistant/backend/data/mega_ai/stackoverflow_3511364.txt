[site]: stackoverflow
[post_id]: 3511364
[parent_id]: 573979
[tags]: 
Ok, after struggling for a long time with the stupid pickerview in iOS 4, I've decided to change my control into simple table: here is the code: ComboBoxView.m = which is actually looks more like pickerview. // // ComboBoxView.m // iTrophy // // Created by Gal Blank on 8/18/10. // #import "ComboBoxView.h" #import "AwardsStruct.h" @implementation ComboBoxView @synthesize displayedObjects; #pragma mark - #pragma mark Initialization /* - (id)initWithStyle:(UITableViewStyle)style { // Override initWithStyle: if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad. if ((self = [super initWithStyle:style])) { } return self; } */ #pragma mark - #pragma mark View lifecycle /* - (void)viewDidLoad { [super viewDidLoad]; // Uncomment the following line to display an Edit button in the navigation bar for this view controller. // self.navigationItem.rightBarButtonItem = self.editButtonItem; } */ /* - (void)viewWillAppear:(BOOL)animated { [super viewWillAppear:animated]; } */ /* - (void)viewDidAppear:(BOOL)animated { [super viewDidAppear:animated]; } */ /* - (void)viewWillDisappear:(BOOL)animated { [super viewWillDisappear:animated]; } */ /* - (void)viewDidDisappear:(BOOL)animated { [super viewDidDisappear:animated]; } */ /* // Override to allow orientations other than the default portrait orientation. - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation { // Return YES for supported orientations return (interfaceOrientation == UIInterfaceOrientationPortrait); } */ #pragma mark - #pragma mark Table view data source - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView { // Return the number of sections. return 1; } - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { // Return the number of rows in the section. self.tableView.separatorStyle = UITableViewCellSeparatorStyleSingleLine; return [[self displayedObjects] count]; } // Customize the appearance of table view cells. - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { NSString *MyIdentifier = [NSString stringWithFormat:@"MyIdentifier %i", indexPath.row]; UITableViewCell *cell = (UITableViewCell *)[tableView dequeueReusableCellWithIdentifier:MyIdentifier]; if (cell == nil) { cell = [[[UITableViewCell alloc] initWithFrame:CGRectZero reuseIdentifier:MyIdentifier] autorelease]; //cell.contentView.frame = CGRectMake(0, 0, 230.0,16); UILabel *label = [[[UILabel alloc] initWithFrame:CGRectMake(0, 5, 230.0,19)] autorelease]; VivatAwardsStruct *vType = [displayedObjects objectAtIndex:indexPath.row]; NSString *section = [vType awardType]; label.tag = 1; label.font = [UIFont systemFontOfSize:17.0]; label.text = section; label.textAlignment = UITextAlignmentCenter; label.baselineAdjustment = UIBaselineAdjustmentAlignCenters; label.adjustsFontSizeToFitWidth=YES; label.textColor = [UIColor blackColor]; //label.autoresizingMask = UIViewAutoresizingFlexibleHeight; [cell.contentView addSubview:label]; //UIImage *image = nil; label.backgroundColor = [UIColor whiteColor]; //image = [awards awardImage]; //image = [image imageScaledToSize:CGSizeMake(32.0, 32.0)]; //[cell setAccessoryType:UITableViewCellAccessoryDisclosureIndicator]; //UIImageView *imageView = [[UIImageView alloc] initWithImage:image]; //cell.accessoryView = imageView; //[imageView release]; } return cell; } /* // Override to support conditional editing of the table view. - (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath { // Return NO if you do not want the specified item to be editable. return YES; } */ /* // Override to support editing the table view. - (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath { if (editingStyle == UITableViewCellEditingStyleDelete) { // Delete the row from the data source [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:YES]; } else if (editingStyle == UITableViewCellEditingStyleInsert) { // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view } } */ /* // Override to support rearranging the table view. - (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath { } */ /* // Override to support conditional rearranging of the table view. - (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath { // Return NO if you do not want the item to be re-orderable. return YES; } */ #pragma mark - #pragma mark Table view delegate - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath { // Navigation logic may go here. Create and push another view controller. /* *detailViewController = [[ alloc] initWithNibName:@" " bundle:nil]; // ... // Pass the selected object to the new view controller. [self.navigationController pushViewController:detailViewController animated:YES]; [detailViewController release]; */ } #pragma mark - #pragma mark Memory management - (void)didReceiveMemoryWarning { // Releases the view if it doesn't have a superview. [super didReceiveMemoryWarning]; // Relinquish ownership any cached data, images, etc that aren't in use. } - (void)viewDidUnload { // Relinquish ownership of anything that can be recreated in viewDidLoad or on demand. // For example: self.myOutlet = nil; } - (void)dealloc { [super dealloc]; } @end Here is the .h file for that: // // ComboBoxView.h // iTrophy // // Created by Gal Blank on 8/18/10. // #import @interface ComboBoxView : UITableViewController { NSMutableArray *displayedObjects; } @property (nonatomic, retain) NSMutableArray *displayedObjects; @end now, in the ViewController where I had Apple UIPickerView I replaced with my own ComboBox view and made it size what ever I wish. ComboBoxView *mypickerholder = [[ComboBoxView alloc] init]; [mypickerholder.view setFrame:CGRectMake(50, 220, 230, 80)]; [mypickerholder setDisplayedObjects:awardTypesArray]; that's it, now the only thing is left is to create a member variable in the combobox view that will hold current row selection, and we are good to go. Enjoy everyone.
