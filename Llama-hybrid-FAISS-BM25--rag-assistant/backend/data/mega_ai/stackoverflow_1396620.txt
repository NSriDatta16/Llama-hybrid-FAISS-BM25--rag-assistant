[site]: stackoverflow
[post_id]: 1396620
[parent_id]: 1156644
[tags]: 
The key question is to ask why is the domain model anemic? Near-total absence of business logic, as in an application which is primarily an assemblage of CRUD screens ? Service-oriented architecture in which the 'domain objects' are in fact simple structures data transfer objects ? Political or pragmatic considerations such as code ownership or forward/backward compatibility that excessively impede refactoring? Applying procedural/relational design in an otherwise object-oriented language? In any case, if I were to pick a simple rule of thumb for the boundary between domain model logic and service logic, it would be that interacting with related objects is fine within the domain, while accessing the "outside world" (user interface, web services, etc) probably doesn't belong in the domain model.
