[site]: stackoverflow
[post_id]: 3127213
[parent_id]: 3127107
[tags]: 
I don't think there is a perfect solution to this problem. Basically, the amount of "wasted" space at the end of each line and paragraph depends very much on the text in question. Character widths and kerning cause minor differences on average (but major differences in the worst case). So you have to go by some heuristic. If possible, have you software "guess" a font size, test if the text fits or not (how this is done depends on what language/API you're using), and if not, adjust up or down slightly. Here's a possible heuristic: #numBreaks is the number of line breaks in the text #numChars is the number of chars (excluding breaks) in the text #avgCharWidth and lineHeight (pixels) are derived from font size #avgWrapWidth is the width of the container minus a bit to #account for the wasted space on the right. I would suggest: #avgWrapWidth = realWidth - avgCharWidth * 6 totalLength = numChars * avgCharWidth numLines = totalLength / avgWrapWidth + numBreaks textHeight = numLines * lineHeight textHeight is the height (in pixels) that the text is expected to take if wrapped to the container. You could binary search through your font sizes to find one with the best estimated height.
