[site]: stackoverflow
[post_id]: 3868741
[parent_id]: 3836096
[tags]: 
My solution to this problem was to use ANTLR's Lexer without the parser and filter out stuff that I'm not interested in. Here's what I came up with (it also looks for globally defined variables as well as imports): lexer grammar ECMAScriptLexer; options {filter=true;} @lexer::header { package com.classactionpl.mojo.javascript; } @members { int scopeLevel = 0; } IMPORTDOC : '/**' .* IMPORT .* (IMPORT)* '*/' ; fragment IMPORT : '@import' WS groupId=GAVID ':' artifactId=GAVID {System.out.println("found import: " + $groupId.text + ":" + $artifactId.text);} ; fragment GAVID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9'|'.')* ; COMMENT : '/*' .* '*/' ; SL_COMMENT : '//' .* '\n' ; ENTER_SCOPE : '{' {++scopeLevel;} ; EXIT_SCOPE : '}' {--scopeLevel;} ; WINDOW_VAR : 'window.' name=ID WS? value=(';' | '=') ~('=') { System.out.println("found window var " + $name.text + " = " + ($value == ';')); } ; GLOBAL_VAR : 'var' WS name=ID WS? value=(';' | '=') ~('=') { if (scopeLevel == 0) { System.out.println("found global var " + $name.text + " = " + ($value == ';')); } } ; fragment ID : ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')* ; fragment WS : (' '|'\t'|'\n')+ ;
