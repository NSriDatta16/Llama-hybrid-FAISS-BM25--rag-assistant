[site]: stackoverflow
[post_id]: 1303114
[parent_id]: 1303047
[tags]: 
This covers the bases. Notice the use of sudo for things that needed more privileges. We configured sudo to allow those commands for that user without needing a password typed. Also, keep in mind that you should run ssh-agent to make this "make sense". But all in all, it works really well. Running deploy-control httpd configtest will check the apache configuration on all the remote servers. #!/usr/local/bin/python import subprocess import sys # The user@host: for the SourceURLs (NO TRAILING SLASH) RemoteUsers = [ "deploy@host1.example.com", "deploy@host2.appcove.net", ] ################################################################################################### # Global Variables Arg = None # Implicitly verified below in if/else Command = tuple(sys.argv[1:]) ResultList = [] ################################################################################################### for UH in RemoteUsers: print "-"*80 print "Running %s command on: %s" % (Command, UH) #---------------------------------------------------------------------------------------------- if Command == ('httpd', 'configtest'): CommandResult = subprocess.call(('ssh', UH, 'sudo /sbin/service httpd configtest')) #---------------------------------------------------------------------------------------------- elif Command == ('httpd', 'graceful'): CommandResult = subprocess.call(('ssh', UH, 'sudo /sbin/service httpd graceful')) #---------------------------------------------------------------------------------------------- elif Command == ('httpd', 'status'): CommandResult = subprocess.call(('ssh', UH, 'sudo /sbin/service httpd status')) #---------------------------------------------------------------------------------------------- elif Command == ('disk', 'usage'): CommandResult = subprocess.call(('ssh', UH, 'df -h')) #---------------------------------------------------------------------------------------------- elif Command == ('uptime',): CommandResult = subprocess.call(('ssh', UH, 'uptime')) #---------------------------------------------------------------------------------------------- else: print print "#"*80 print print "Error: invalid command" print HelpAndExit() #---------------------------------------------------------------------------------------------- ResultList.append(CommandResult) print ################################################################################################### if any(ResultList): print "#"*80 print "#"*80 print "#"*80 print print "ERRORS FOUND. SEE ABOVE" print sys.exit(0) else: print "-"*80 print print "Looks OK!" print sys.exit(1)
