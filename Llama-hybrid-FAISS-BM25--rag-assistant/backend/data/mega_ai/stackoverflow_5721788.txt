[site]: stackoverflow
[post_id]: 5721788
[parent_id]: 5721532
[tags]: 
The result of a new expression does not have to be at the same address passed to the placement new operator. And, you are not guaranteed that the size required to allocate an array is strictly the size of a single element times the number of elements. 5.3.4: A new-expression passes the amount of space requested to the allocation function as the first argument of type std::size_t . That argument shall be no less than the size of the object being created; it may be greater than the size of the object being created only if the object is an array . So, the more correct version of your code would be: void *ppstorage= malloc(sizeof(vector )*20); pp= new (ppstorage) vector [20]; for(int i = 0; i (); Although you will almost certainly write past the end of ppstorage . The compiler has to store the count of the array somewhere to properly destruct each element, and for MSVC that is stored before the address returned by the new expression. In theory, you could overload operator new[] to get the actual allocation size of an array: void *operator new[](size_t *allocation_size, size_t size) { *allocation_size= size; return nullptr; } But I have never tried this.
