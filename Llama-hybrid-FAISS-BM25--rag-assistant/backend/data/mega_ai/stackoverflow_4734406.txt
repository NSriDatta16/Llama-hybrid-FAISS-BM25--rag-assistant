[site]: stackoverflow
[post_id]: 4734406
[parent_id]: 
[tags]: 
Elegant alternatives to the weird multiple inheritance

I can not say that this is a question, but more of an opinion request and I am sure many others could benefit from clarifying this issue. Here is my practical case: I have an abstract class called DataExchangeService and a lot of sub-classes that extend this one (this is the base CONTROLLER class in my MVC Framework). The administration modules that handle data definiton (Users,Types,Sections etc) they all have the add,edit,delete,list methods with 100% similarity in most cases. I know that because I replicate them by using only search and replace. Now the thing is not all my DateExchangeService sub-classes handle data definiton so there are enough cases where I don't need the CRUD methods. Multiple inheritance would define these CRUD methods and their behaviour in another class and would extend both these classes where it is needed, but I really do think it is tricky stuff and I do not use it (+PHP doesn't have such functionality). So what would be the best practice? Here are the approaches that crossed my mind: CASE A Define a CRUDHandler class that has all these methods parametrized. Create a property of CRUDHandler type where it is needed and also implement the CRUD interface that will force me to use these methods. In the bodies of the implemented methods I add something like this: public function edit($params) { $this->params = $params; $this->CRUDHandler->handle("edit", $this); } (In PHP this can be done with the __call() magic method.) CASE B Define class CRUDHandler as extending the base DataExchangeService. When defining a specific type of DataExchangeService (for example UsersExchangeService) instead of extending DataExchangeService you extend CRUDHandler, this way you get all you want when it is needed. So, are there any other opinions on this MultiInheritance approach? Thanks
