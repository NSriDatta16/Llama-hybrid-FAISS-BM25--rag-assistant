[site]: stackoverflow
[post_id]: 44789
[parent_id]: 
[tags]: 
How well do common programming tasks translate to GPUs?

I have recently begun working on a project to establish how best to leverage the processing power available in modern graphics cards for general programming. It seems that the field general purpose GPU programming (GPGPU) has a large bias towards scientific applications with a lot of heavy math as this fits well with the GPU computational model. This is all good and well, but most people don't spend all their time running simulation software and the like so we figured it might be possible to create a common foundation for easily building GPU-enabled software for the masses. This leads to the question I would like to pose; What are the most common types of work performed by programs? It is not a requirement that the work translates extremely well to GPU programming as we are willing to accept modest performance improvements (Better little than nothing, right?). There are a couple of subjects we have in mind already: Data management - Manipulation of large amounts of data from databases and otherwise. Spreadsheet type programs (Is somewhat related to the above). GUI programming (Though it might be impossible to get access to the relevant code). Common algorithms like sorting and searching. Common collections (And integrating them with data manipulation algorithms) Which other coding tasks are very common? I suspect a lot of the code being written is of the category of inventory management and otherwise tracking of real 'objects'. As I have no industry experience I figured there might be a number of basic types of code which is done more often than I realize but which just doesn't materialize as external products. Both high level programming tasks as well as specific low level operations will be appreciated.
