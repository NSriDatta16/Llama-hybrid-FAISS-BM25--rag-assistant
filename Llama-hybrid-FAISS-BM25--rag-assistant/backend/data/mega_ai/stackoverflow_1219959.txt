[site]: stackoverflow
[post_id]: 1219959
[parent_id]: 1219943
[tags]: 
Check out the factory pattern . The factory is a means of creating objects by providing parameters, and getting objects back that adhere to a common interface. The implementation, however, is determined by the factory. The calling code does not need to know this. By encapsulating the object construction in another object (the factory), the mechanics of selecting the particular object to build is abstracted away from the calling code. You can easily provide further subclasses at a later date by only modifying the factory itself. So in your example code, the buildMe() method is a form of factory. It takes some parameter specifying what's required to be built - a Room or a ReceptionDesk . Both these would implement the same interface (a HospitalComponent ?) and the calling code would then place that component within the hospital. You can add further subclasses of HospitalComponent to the factory (an OperatingTheatre ?) and the calling code doesn't have to change. It's worth investigating design patterns (in this scenario, check out this list of creational patterns ) to understand different ways of using objects to solve common problems, and for how to communicate your solutions with other people. The Gang-of-Four book is the bible for this subject.
