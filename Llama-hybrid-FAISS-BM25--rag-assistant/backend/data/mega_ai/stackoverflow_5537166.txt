[site]: stackoverflow
[post_id]: 5537166
[parent_id]: 5536798
[tags]: 
The other answers tell you how to do this and will work well, but there are some potential problems with this approach: compile time may be significantly increased as more headers need to read in and processed. a change to any header file will mean all code using your global header file would be rebuilt, even if it didn't actually use the parts that were changed. makes it harder to see the project as a collection of smaller problems and sub-systems. potential for function/variable name clashes and shadowing (especially in C with no namespaces to limit the scope) A better solution is to organise your project properly. Break it down into sub-systems and libraries which have headers exposing a useful limited interface to the rest of the system, whilst keeping the implementation details internal to the library/sub-system/module.
