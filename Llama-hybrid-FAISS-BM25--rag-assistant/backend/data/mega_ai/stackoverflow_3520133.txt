[site]: stackoverflow
[post_id]: 3520133
[parent_id]: 
[tags]: 
Object-Oriented Callbacks for C++?

Is there some library that allows me to easily and conveniently create Object-Oriented callbacks in c++? the language Eiffel for example has the concept of "agents" which more or less work like this: class Foo{ public: Bar* bar; Foo(){ bar = new Bar(); bar->publisher.extend(agent say(?,"Hi from Foo!", ?)); bar->invokeCallback(); } say(string strA, string strB, int number){ print(strA + " " + strB + " " + number.out); } } class Bar{ public: ActionSequence publisher; Bar(){} invokeCallback(){ publisher.call("Hi from Bar!", 3); } } output will be: Hi from Bar! 3 Hi from Foo! So - the agent allows to to capsule a memberfunction into an object, give it along some predefined calling parameters (Hi from Foo), specify the open parameters (?), and pass it to some other object which can then invoke it later. Since c++ doesn't allow to create function pointers on non-static member functions, it seems not that trivial to implement something as easy to use in c++. i found some articles with google on object oriented callbacks in c++, however, actually i'm looking for some library or header files i simply can import which allow me to use some similarily elegant syntax. Anyone has some tips for me? Thanks!
