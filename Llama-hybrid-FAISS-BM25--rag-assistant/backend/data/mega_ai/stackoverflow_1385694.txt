[site]: stackoverflow
[post_id]: 1385694
[parent_id]: 1384647
[tags]: 
My view of Haxe, Warning the following paragraphs are very philosophical (Practical ones are further down): As someone who has been open to many programming languages over my short time programming and someone who simply moves on when I feel something isn't working for me; I find that Haxe is something that I just can't progress from, I just cant 'better it'. I had found in the past that the amount of time I spend writing in one particular language relates to two key factors, how much I need to use that language to get the result and how easy I find that language to grasp. But with Haxe the grasping period was much shorter, and I attribute this to my small build-up of knowledge in a variety of languages. Until Haxe I had never found one that really suited me and that just felt right, they were either to hard to understand or just plain useless; well at least useless from my perspective. Haxe had allowed me to be a lot more expressive with how I write, I don't mean the 'expressive' as in the quality that everyone talks about languages having I meant the ability to just have an idea and run with it, to try something out the way I feel is right. Whether it succeeds or totally fails. Haxe has been a very easy learning curve for me, with my general background in c style languages and AS2/3, and I have not really had any trouble picking it up. One thing that always stymied my progression with a new language was understanding the concept behind that particular syntax/framework, but even once I had passed that hurdle I would often find that the language was in itself either limited, limiting or both. With Haxe I'm neither limited nor am I finding the language itself to limit me. With Haxe there is no glass ceiling, but the is a glass floor, in that there is no limit to what you can do but you can clearly see how you got there Picking up Haxe isn't like picking up some sticks and making fire, but nor is it like going out and buying a oxyacetylene set and starting a fire with that. In that sense Haxe is closer to a match, that you can reuse. It follows almost all of the conversions of something that your used to but adds useful new features. But to do so it doesn't reinvent the wheel entirely, it just fixes the rotten bits. (ok fewer analogies in the next paragraph) Practical things: The language is simple easy and standardised, whilst still allowing the programmer to go as far as they like. Your can write a very high level piece of code or go and fiddle with the little bits and pieces (to a serious degree on some platforms) Haxe doesn't dictate what you can and can't do on any one platform, it gives (or plans to give you) full access to everything, but where it can it adds a standardised way of doing things. The mailing list is very helpful and responsive and the forum is even picking up pace now. The language is constantly being changed (in minor ways) with new things added in every release. There are very few real bugs coming through for the main API and even fewer for the compiler. Every one talks openly about the language its direction and the direction they suggest for Haxe (and or course why it should take that direction) And finally Haxe isn't some big private venture by a large (or even small) company to make money out of you as a developer, instead it is created for all developers to use, build upon and improve. And that is why I feel Haxe is where I want to be. (now to go back to coding)
