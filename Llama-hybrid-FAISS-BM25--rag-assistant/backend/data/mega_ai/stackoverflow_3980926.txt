[site]: stackoverflow
[post_id]: 3980926
[parent_id]: 3980879
[tags]: 
Maybe something like: template struct has_element_type { typedef char yes[1]; typedef char no[2]; template static yes& test(typename C::element_type*); template static no& test(...); static const bool value = sizeof(test (0)) == sizeof(yes); }; template struct is_const { static const bool value = false; }; template struct is_const { static const bool value = true; }; template // true -> const struct value_type_switch; template struct value_type_switch { typedef const typename T::value_type type; }; template struct value_type_switch { typedef typename T::value_type type; }; template // true -> has element_type struct element_type_switch; template struct element_type_switch { typedef typename T::element_type type; }; template struct element_type_switch { typedef typename value_type_switch ::value>::type type; }; template struct element { typedef typename element_type_switch ::value>::type type; }; This should of course be split up and organized.
