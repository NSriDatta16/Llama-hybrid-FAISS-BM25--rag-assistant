[site]: stackoverflow
[post_id]: 1675336
[parent_id]: 1675204
[tags]: 
Since you are looking to set up the architecture for many different games, that's a good place to try your hand at implementing a factory and/or abstract factory pattern. That way, when you ask for a new instance of a game, you can decouple your code from which particular game is being started through requesting a new instance of a game from the factory. I want to caution you that design patterns don't automatically make your code "better". Don't get me wrong, design patterns are extremely useful for complex systems and creating reusable, extensible code bases (not to mention creating better organization and clarity) but they should only be applied when it makes sense. Trying to apply design patterns everywhere in your code will most likely lead to implementing patterns that don't fit your particular problem or are overkill in terms of complexity. Writing a factory to generate instances of a hello world string in a hello world application clear is clearly overkill. Writing factories to hand out pre-configured socket connections in a large enterprise client/server architecture is a more natural fit. Your application probably falls somewhere in the middle, and its up to you to figure out whether or not design patterns will be helpful in your specific project.
