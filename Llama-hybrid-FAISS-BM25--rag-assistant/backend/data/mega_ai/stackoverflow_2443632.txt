[site]: stackoverflow
[post_id]: 2443632
[parent_id]: 2443077
[tags]: 
What you want to do is perfectly acceptable, it just isn't typical. When you use Visual Studio to generate a WinForms project, it creates one form for you and generates a call to Application.Run(new Form1()). For this version of the Run() method, your application will exit when the "main form" (the one passed to Run(), in this case Form1) closes. There are three overloads (versions) of Application.Run(). For your purposes, you need to use a different overload: Application.Run(ApplicationContext) When you use this overload of Run(), you get to control when the application exits. In a nutshell, here's one way you could do it: Create a class which inherits ApplicationContext. In its constructor: Create your form. Subscribe to its Closing and Closed events. Show your form. In your FormClosing event handler, get the data from the form. In your FormClosed event handler, do whatever you want to do with the data, and then exit the thread (or do something else). Here's a crude example, but I will leave out the code for the form itself. Assume the form simply has one TextBox which has its Modifiers property set to Public. (This is NOT an elegant way to get data from a form, but that part is up to you). namespace Me.MyDemo { static class Program { [STAThread] static void Main() { MyApplicationContext ac = new MyApplicationContext(); Application.Run(ac); } class MyApplicationContext : ApplicationContext { string _text = ""; public MyApplicationContext() { Form1 f1 = new Form1(); f1.FormClosing += new FormClosingEventHandler(f1_FormClosing); f1.FormClosed += new FormClosedEventHandler(f1_FormClosed); Console.WriteLine("I am here. Showing form in 1 second..."); Thread.Sleep(1000); f1.Show(); } void f1_FormClosing(object sender, FormClosingEventArgs e) { _text = (sender as Form1).textBox1.Text; } void f1_FormClosed(object sender, FormClosedEventArgs e) { Console.WriteLine("You wrote: " + _text); Console.WriteLine("I will go away in 2 seconds..."); Thread.Sleep(2000); ExitThread(); } } } } Of course, you don't have to exit the thread. You can leave it running if there are other things for your program to do. It will just run as a windowless process. Just remember that you're responsible for eventually ending it. For more help, look at the documentation for the System.Windows.Forms.Application class, and the ApplicationContext class. For getting the data from your form, there are many ways to approach this. The simple way is to just give your form some public properties. A more sophisticated way would be to create a data class and use data-bound controls on your form.
