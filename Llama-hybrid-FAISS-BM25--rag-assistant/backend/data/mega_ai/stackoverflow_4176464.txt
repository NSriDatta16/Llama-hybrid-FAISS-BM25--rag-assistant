[site]: stackoverflow
[post_id]: 4176464
[parent_id]: 
[tags]: 
Why are all iterations in a loop parallelized using OpenMP schedule(dynamic) given to one thread? (MSVS 2010)

Direct Question: I've got a simple loop with, what can be, a computationally intensive function. Let's assume that each iteration takes the same amount of time (so load balancing should be easy). #pragma omp parallel { #pragma omp for schedule(dynamic) for ( int i=0; i Why are all of the iterations assigned to a single thread? I can add a: std::cout and it prints a bunch of zeros with only the last iteration assigned to thread 1. My System: I must support cross compiling. So I'm using gcc 4.4.3 & 4.5.0 and they both work as expected, but for MS 2010, I see the above behavior where 29 iterations are assigned to thread 0 and one iteration is assigned to thread 1. Really Odd: It took me a bit to realize that this might simply be a scheduling problem. I google'd and found this website , which if you skip to the bottom has an example with what must be auto-generated output. All iterations using dynamic and guided scheduling are assigned to thread zero??!? Any guidance would be greatly appreciated!!
