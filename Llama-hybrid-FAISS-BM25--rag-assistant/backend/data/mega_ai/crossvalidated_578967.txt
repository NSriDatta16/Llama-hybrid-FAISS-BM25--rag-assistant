[site]: crossvalidated
[post_id]: 578967
[parent_id]: 578963
[tags]: 
You could frame your problem as follows: You have a set of N time series $c_i \to c_j \to \ldots \to c_k$ to which you fit a single time series model $M$ . Then, given your set of codes, you want to order them such that your model $M$ gives them the highest probability. So there are two steps, first fitting the model and second the ordering. Fitting the model: There are many possible models you could try, e.g. a simple Markov chain or some Hidden Markov model . The ordering: Now, if your set of codes contains $K$ codes, you would have to apply your model to $K!$ possible orderings to find the one that gives the highest probability. I don't know how large your sets are, but this becomes impossible quite quickly (e.g. $10! = 3628800$ ). Thus, if your set of codes is large, you should think about some greedy approach. For example, if you have as model a Markov chain, you could first find the most likely consecutive pair in your set, then attach to the front and end the most likely codes from the rest of your set, and then continue in this way to grow the chain. A more general approach, using Bayesian optimization is described here . In this paper, you find pointers to other methods. In general, this is a field of active research and you might even want to search on google scholar for e.g. "optimization over permutations". Note that the choice of a good optimization over your permutation space depends on the objective function, i.e. the model $M$ you have fitted. Different models would lead to different preferable optimization schemes. The paper mentioned above, using Bayesian optimization, is a more general approach, so while applicable, there might be better techniques.
