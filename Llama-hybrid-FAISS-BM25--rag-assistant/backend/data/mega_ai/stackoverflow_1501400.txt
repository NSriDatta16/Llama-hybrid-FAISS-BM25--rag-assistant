[site]: stackoverflow
[post_id]: 1501400
[parent_id]: 1501338
[tags]: 
It depends. The thing I like about C++ is that in some ways, it is a more expressive and yes, more elegant, language than C#. It enables some really nice abstractions (such as generic programming or RAII) that just can't be duplicated in C#. In those ways, it's an eye-opener. Of course, so are functional languages. So is Python. All of them are worth learning, even if you write all your code in C# now and forever. Of course, C++ is also an overcomplicated mess, and a far more error-prone language than pretty much anything else. And if you don't know it really well, then it will explode in your face when you least expect it. Of course, plenty of people will shout PERFORMANCE! when you ask why you should learn C++. I won't. Because in many common cases, C# is going to be as fast or faster as your C++ code. This old exchange between Raymond Chen and Rico Mariani illustrates the performance characteristics of both platforms pretty well. C++ has the potential to be extremely fast. But it also has a lot of subtle performance pitfalls that mean that most of the time , unless you're some kind of omniscient code-god, your code is going to be less efficient than the equivalent C#. If you have an interest in programming languages, C++ is a wonderful example of the theory of evolution. ;) It hasn't grown according to some great predefined plan. It has always improved and adapted one step at a time, according to what would make the language better right now . As a result it is huge, bloated, overly complex, but it is also more expressive than something strictly designed according to a single person's vision, such as C#. C# is designed with an unhealthy obsession with OOP, because that was the cool thing when it was designed. In C++, OOP sort of drifted out towards the periphery, not so much as a conscious design decision, but because better alternatives turned up. It's a fun language. And I'd recommend learning it just for the sake of becoming a better programmer. But I'm not convinced that you'll need to actually use it. Of course it will make certain tasks easier (native interop, or programming small programs which for one reason or another can't assume that the .NET framework is installed), but for most cases, you probably won't need it. That leaves the "become a better programmer" argument, and while that is a valid argument, it is also true for other languages. You should definitely also know a functional language. And Python, or a similar pragmatic, high-level "make it easy for the programmer" kind of language.
