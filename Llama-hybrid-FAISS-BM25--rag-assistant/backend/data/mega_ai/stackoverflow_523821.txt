[site]: stackoverflow
[post_id]: 523821
[parent_id]: 356275
[tags]: 
Code reuse is an extremely important issue - where code is not reused, projects take longer and are harder for new team members to get into. However, writing reusable code takes longer. Personally, I try to write all my code in a reusable way, this takes longer, but it results in the fact that most of my code has become official infrastructures in my organization and that new projects based on these infrastructures take significantly less time. The danger in reusing code, is if the reused code is not written as an infrastructure - in a general and encapsulated manner with as few as possible assumptions and as much as possible documentation and unit testing, that the code can end up doing unexpected things. Also, if bugs are found and fixed, or features added, these changes are rarely returned to the source code, resulting in different versions of the reused code, that no one knows of or understands. The solution is: 1. To design and write the code with not only one project in mind, but to think of future requirements and try to make the design flexible enough to cover them with minimal code change. 2. To enclose the code within libraries that are to be used as-is and not modified within using projects. 3. To allow users to view and modify the code of of the library withing its solution (not within the using project's solution). 4. To design future projects to be based on the existing infrastructures, making changes to the infrastructures as necessary. 5. To charge maintaining the infrastructure to all projects, thus keeping the infrastructure funded.
