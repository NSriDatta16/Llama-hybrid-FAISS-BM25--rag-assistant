[site]: stackoverflow
[post_id]: 2275786
[parent_id]: 2275634
[tags]: 
You should be able to subclass UIWebView and override those methods. You may have to override all of the touch methods, though, - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event; - (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event; - (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event; - (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event EDIT: Ah, I see your errors now. They are because those things don't apply to the UIWebView like they did to the parent (which you already know...) Since UIWebView is a UIView, you should be able to replace [touch locationInView:self.view] with [touch locationInView:self] To get to the parent's tab bar controller, though, you'll have to design a different way to do it. You could pass a reference to the parent to your UIWebView subclass and expose a method on the parent for changing which tab is active, for instance: In your subclass, add a property for the parent tab bar controller: UITabBarController *parent; When creating your UIWebView subclass and adding it to the tab bar controller, also set the parent: webView.parent = self; If you're setting this up in Interface Builder, make the parent an IBOutlet and hook it up through IB. In your tab bar controller view, add a method that changes the selected controller. You could use named constants for the view you want to switch to, or methods that describe exactly what you are switching to, but for simplicity, you'd do something conceptually similar this: - (void) switchToView: (int)viewNumber { self.tabBarController.selectedViewController = [self.tabBarController.viewControllers objectAtIndex:viewNumber]; } then call [parent switchToView:2] in your code. Another and arguably better way is to use NSNotification s, registering the parent as a listener.
