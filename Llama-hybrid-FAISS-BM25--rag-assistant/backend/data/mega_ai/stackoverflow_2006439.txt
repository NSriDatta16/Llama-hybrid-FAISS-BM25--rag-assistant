[site]: stackoverflow
[post_id]: 2006439
[parent_id]: 2005759
[tags]: 
First things first. Your code uses list concatenation to add stuff to the list. It is better to use the .append() method of lists. Also, the last loop could iterate directly on the objects instead of using an index. It is more elegant and easy to understand this way. The pseudo-code below is equivalent to yours, but with the above corrections applied: from visual import * stars = [] galaxies = [] for i in range(10): stars.append(sphere(...)) for j in range(20): galaxies.append(sphere(...)) for star, galaxy, starpos, galaxypos in zip(stars, galaxies, position, G_position): star.pos = starpos galaxy.pos = galaxypos With that out of the way, I can explain how visual works. Visual module updates the screen as soon as the object is changed. The animation is done by that alteration, in realtime, there's no need for a show() or start_animation() - it happens as it goes. An example you can run on python command line: >>> from visual import sphere >>> s = sphere() That line creates a sphere, and a window, and shows the sphere in the window already!!! >>> s.x = -100 That line changes the sphere position on x axis to -100 . The change happens immediatelly on the screen. Just after this line runs, you see the sphere appear to the left of the window. So the animation happens by changing the values of the objects.
