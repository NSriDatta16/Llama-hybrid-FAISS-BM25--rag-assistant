[site]: stackoverflow
[post_id]: 3125164
[parent_id]: 
[tags]: 
Is CoreData typically used as the Model or is it an implementation detail of the Infrastructure?

I would like to use a Sqlite datbase in an iphone application. The example in the book I am reading has the controllers directly calling into CoreData objects. Coming from MVC/MVP in .NET to me this is akin to opening a SQL Connection in a button event handler. I would typically have a repository that handled the details of retrieving/persisting the model. 1) Is it the norm to use CoreData functionality directly in a Controller? 2) Is extracting my domain model into separate classes that get translated back and forth to the persistence layer not a good idea on the iPhone (in regards to performance, memory, expected project organization, etc)? 3) Will creating a repository layer work well on an iPhone? Going with the SmallTalk background Objective-C and the MVC approach of iPhone applications I was expecting to leverage Domain Models, Repositories, IoC, etc. Is that just not realistic? Are the author and I just on different pages? Thanks for any input.
