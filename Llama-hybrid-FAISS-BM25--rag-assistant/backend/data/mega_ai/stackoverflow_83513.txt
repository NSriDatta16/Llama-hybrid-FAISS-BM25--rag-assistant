[site]: stackoverflow
[post_id]: 83513
[parent_id]: 83117
[tags]: 
You will need to pass some structure to the data access layer that identifies the current "activity". You might already have an "Activity"-class that makes sense, you might use a Logger-instance as Sunny suggested or you might use a third structure to keep track of the activity-context. In any case, since your "activity" is processed across multiple threads you cannot use thread-local-storage for keeping track of the current "activity", like most of the other current answers suggest. You will need to pass it around explicitly. I would suggest making a small facade on top of log4j that expands the interface with methods like void debug(Activity activity, String message); and passing the activity-context into this from the data access layer. You will need to make some modification to the data access layer to allow you to pass the current activity to it, but how best to do that depends strongly on the current interface. If you use the Workspace-pattern, you might just need to add a setActivity() method on the Workspace-class, but other interface-pattern might require you to add an Activity parameter to all methods. If you for some reason is unable or unwilling to change the data access layer, you might of course store the activity-context in thread-local-storage before invoking the data access layer and retrieve it just before spawning the sub-threads or enqueing the jobs in the data access layer. That is a workable solution, but is it a bit dangerous to pass information around in that way.
