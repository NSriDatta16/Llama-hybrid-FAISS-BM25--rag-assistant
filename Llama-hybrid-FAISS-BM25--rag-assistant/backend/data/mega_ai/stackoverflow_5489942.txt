[site]: stackoverflow
[post_id]: 5489942
[parent_id]: 5485405
[tags]: 
I went through a similar process of trying to use Graph for everything, and found that it it does not replace Combinatorica and GraphPlot . The best use for Graph is to use it as a container type to store vertices + edges + coordinates. For example, most of the functions from "Algorithmic Graph Theory" of Combinatorica tutorial are not available for new Graph objects. When I talked with a WRI developer on Graph project, my understanding was providing all of Combinatorica functions for Graph is not a priority because the design goal is to provide methods that solve tasks in algorithmic agnostic way. For instance, you may have method to find vertex cover and graph coloring for new Graph object, but for algorithmic specific tasks like Brelaz coloring and Greedy Vertex Cover, you may always have to defer to Combinatorica . In addition to multi-graphs, some graph layouts are not available for Graph objects. You can not fix some vertex coordinates and let automatic layout do the rest. Also, layout of LayeredGraphPlot is not available and is sometimes preferred over Graph 's LayeredDrawing . The way to get the best of 3 worlds is to use Graph objects as main vehicle for graph storage and make wrappers for GraphPlot , Combinatorica and GraphUtilities functions that accept Graph objects Some use cases: You need some algorithm from Combinatorica or GraphUtilities -- make a wrapper someAlgorithm that takes Graph object, converts it to list of edges or Combinatorica graph ( GraphUtilities'ToCombinatoricaGraph is helpful), runs the algorithm, converts it back to Graph object, taking care to set correct GraphStyle and VertexCoordinates from the original graph object. Because of conflicts, make sure Combinatorica and GraphUtilities are not on context path, I do it using $Pre You need some custom graph plot like here , or the multi-edge graph -- make a wrapper function someGraphPlot that accepts Graph object, converts it to correct representation, then uses GraphPlot or perhaps creates a temporary Graph object with custom vertex/edge shapes for the purpose of this one plot. Note that you can attach properties to edges using SetProperty so you can store your multigraphs in Graph that way. You want to use one of GraphPlot layouts and store coordinates in Graph -- use function like here to get vertex coordinates from GraphPlot layout, and store them in Graph object using VertexCoordinates Here's a notebook demonstrating these use cases and a few others
