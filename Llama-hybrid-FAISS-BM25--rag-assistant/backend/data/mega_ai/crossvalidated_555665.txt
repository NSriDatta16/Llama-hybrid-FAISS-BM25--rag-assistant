[site]: crossvalidated
[post_id]: 555665
[parent_id]: 
[tags]: 
How do I get the stationary distribution of a Markov chain matrix from SVD?

I have a matrix that represents a Markov chain. M = np.array([ [0, 0.25, 0.25, 0.25, 0.25], [0.2, 0.2, 0.2, 0.2, 0.2], [0, 0.5, 0, 0, 0.5], [0, 0.333, 0.333, 0, 0.333], [0, 1, 0, 0, 0] ]) To compute the stationary distribution, I use the Power Method, within a few iterations, I get convergence. np.diag(M.dot(M).dot(M).dot(M).dot(M).dot(M).dot(M).dot(M).dot(M).dot(M)) And the output is array([0.08759149, 0.43795601, 0.1459856 , 0.10948932, 0.2189781 ]) Based on this SO post , I can also use np.linalg.eig() to compute the stationary distribution from U based on the index of the eigenvalue in S closest to 1. The output is the same as with the Power Method. S, U = np.linalg.eig(M.T) (U[:,np.isclose(S, 1)][:,0] / U[:,np.isclose(S, 1)][:,0].sum()).real I have been reading that SVD can also be used to find the stationary distribution. U, S, V = np.linalg.svd(M.T) However, no matter how I try, I cannot get the same result as with the Power method or np.linalg.eig() . U[:,0] / U[:,0].sum() # array([0.0233, 0.5642, 0.1184, 0.0589, 0.2350]) U[0,:] / U[0,:].sum() # array([0.5836, 0.4079, -0.4530, -0.4341, 0.8956]) Any ideas on what I'm doing wrong?
