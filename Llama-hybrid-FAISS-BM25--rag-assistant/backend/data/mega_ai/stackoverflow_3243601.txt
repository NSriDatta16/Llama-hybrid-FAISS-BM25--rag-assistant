[site]: stackoverflow
[post_id]: 3243601
[parent_id]: 3235428
[tags]: 
It looks like you have it pretty close. You're scheduling a selector on the touch end, computing the velocity, and moving the sprite according to that velocity until it damps out, so all the mechanical pieces are there. What looks iffy is the physics. For instance, you're doing some odd things with the speed to slow the ball down which aren't going to look realistic at all. What you want to do is find the "velocity vector" for the sprite when the finger is lifted. While you can attempt to do an instantaneous velocity for this, I've found that it works better to sample a few cycles back and average over them to get a final speed. Then, once you've got that vector (it will look like an x and y speed, like you have now), you want to dampen the speed by doing something like this (untested pseudocode ahead): float speed = sqrt( speedx * speedx + speedy * speedy ); if (speed == 0) { // kill motion here, unschedule or do whatever you need to } // Dampen the speed. float newSpeed = speed * .9; if (newSpeed This will keep the ball going in the same direction as when it was released, slowing down gradually until it stops. For more information, especially if you want to do some bouncing or anything, google for an introduction to vector algebra.
