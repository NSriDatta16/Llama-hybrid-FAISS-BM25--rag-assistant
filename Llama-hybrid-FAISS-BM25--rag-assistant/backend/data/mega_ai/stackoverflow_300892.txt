[site]: stackoverflow
[post_id]: 300892
[parent_id]: 292711
[tags]: 
There are several ways to do it: Stick to one version of Dojo and use it consistently. Move modified code to your own namespace and include it from there. Effectively it is a forking of an existing DojoX module. All code syncing and back porting is your responsibility. Pay attention to the rest of Dojo â€” if it changes in such a way that it breaks your forked version, be ready to patch your module as well. Copy modified files somewhere and include/require them before the original file is required. To illustrate the latter technique imagine that there is one file I want to patch located in dojox/charting/abc.js: dojo.provide("dojox.charting.abc"); // the rest of the file ... I can copy it to my directory as, say, my/patched_abc.js, and make it look like that: dojo.provide("my.patched_abc"); // now I include the rest of the file with my modifications dojo.provide("dojox.charting.abc"); // the rest of the file ... In my code that uses dojox.charting I include it like that: dojo.require("my.patched_abc"); // now I can include dojox.charting, // which will use my patched dojox.charting.abc module dojo.require("dojox.charting.Chart2D"); // the rest of the file ... Just be careful to avoid circular "require" statements. This technique works very well for backports and minor customizations. If your changes are more extensive than that, you should consider writing your own module.
