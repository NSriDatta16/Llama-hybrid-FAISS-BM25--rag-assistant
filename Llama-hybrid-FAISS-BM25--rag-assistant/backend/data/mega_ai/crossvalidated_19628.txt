[site]: crossvalidated
[post_id]: 19628
[parent_id]: 19459
[tags]: 
Here's what I was suggesting in R code. I don't know what software you're working with, but at the very least you can download R for free and run the script pretty easily just to see what I was talking about and then create your own version. If you were in R, a lot of the loops could be replaced with the "rollapply" function in the "zoo" package. But this way the code is self contained. What I've done is created three time series: 1. Simple signal, where the next value at point (i+1) correlates with the preceding value (i). 2. Signal based on the first so they should correlate highly but have different amplitudes 3. A random signal made with Gaussian noise What this does leave out is phase shifts, that is, if a person a starts moving and then person b starts moving after but in time with, this method will underestimate the correlation. This can be rectified by including a number of time shifts. Or, possibly by increasing the length of time for the rolling average (acts like a low pass filter). Of course there are other methods which might be more suitable, but those are based on oscillating signals, e.g., you could use wavelets for a time-frequency decomposition and then calculate a between person phase-locking across a number of frequencies. Then create phase and coherence maps. If you think this might be more what you're after, I have scripts for that too, but you may want to look into dedicated packages in matlab or R. Before applying, you'd probably need to take a couple of random samples from your videos, or perhaps even a "training" video and see what parameters give you the information that you're looking for. Then apply this to your actual samples. E.g., changing the length of the rolling average, playing with phase shifts, adjusting the weighting parameter. You could even get boostrapped CIs if you wanted. Here's the R script: #highly correlated series rl
