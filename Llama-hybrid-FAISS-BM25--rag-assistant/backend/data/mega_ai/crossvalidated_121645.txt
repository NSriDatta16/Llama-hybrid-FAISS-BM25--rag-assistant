[site]: crossvalidated
[post_id]: 121645
[parent_id]: 
[tags]: 
Borgatti Key Player Problem (KPP) in Python

Has anyone come across any Python implementation of Borgatti's proposed Key Player Problem (KPP) algorithms? I'm interested in solutions using NetworkX and particularly interested in implementations of KPP-NEG. Here's my implementation of KPP-POS in Python using NetworkX: # Total number of nodes n = len(mod_G.nodes) denominator = n * (n - 1) # Summation of distance sum_of_distance = 0.0 # Compute shortest path for ALL pairs of nodes distance_matrix = nx.all_pairs_shortest_path_length(mod_G) for source, destinations in distance_matrix.items(): for destination, length in destinations.items(): if not source == destination: sum_of_distance += 1 / length # Calculate degree of fragmentation degree_of_fragmentation = (2 * sum_of_distance) / denominator return degree_of_fragmentation Reference: http://www.bebr.ufl.edu/sites/default/files/Borgatti%20-%202006%20-%20Identifying%20sets%20of%20key%20players%20in%20a%20social%20networ.pdf I'm also interested in Python implementations of Schwartz and Rouselle (2009)'s "network capital" and "intelligence_worth" algorithms too. Reference: http://link.springer.com/article/10.1007/s12117-008-9046-9
