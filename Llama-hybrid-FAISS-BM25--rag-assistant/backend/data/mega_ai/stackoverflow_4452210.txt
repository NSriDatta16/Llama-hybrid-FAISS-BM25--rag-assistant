[site]: stackoverflow
[post_id]: 4452210
[parent_id]: 4441692
[tags]: 
To address the root element aspect you could do will need to leverage @XmlRegistry and @XmlElementDecl. This will give us multiple possible root elements for the TransactionAdd class: import javax.xml.bind.JAXBElement; import javax.xml.bind.annotation.XmlElementDecl; import javax.xml.bind.annotation.XmlRegistry; import javax.xml.namespace.QName; @XmlRegistry public class ObjectFactory { @XmlElementDecl(name="InvoiceAdd") JAXBElement createInvoiceAdd(TransactionAdd invoiceAdd) { return new JAXBElement (new QName("InvoiceAdd"), TransactionAdd.class, invoiceAdd); } @XmlElementDecl(name="SalesOrderAdd") JAXBElement createSalesOrderAdd(TransactionAdd salesOrderAdd) { return new JAXBElement (new QName("SalesOrderAdd"), TransactionAdd.class, salesOrderAdd); } } Your TransactionAdd class will look something like the following. The interesting thing to note is that we will make the txnType property @XmlTransient. import java.util.List; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlTransient; public class TransactionAdd { private String txnDate; private String refNumber; private String txnType; private List lines; @XmlElement(name="TxnDate") public String getTxnDate() { return txnDate; } public void setTxnDate(String txnDate) { this.txnDate = txnDate; } @XmlElement(name="RefNumber") public String getRefNumber() { return refNumber; } public void setRefNumber(String refNumber) { this.refNumber = refNumber; } @XmlTransient public String getTxnType() { return txnType; } public void setTxnType(String txnType) { this.txnType = txnType; } public List getLines() { return lines; } public void setLines(List lines) { this.lines = lines; } } Then we need to supply a little logic outside the JAXB operation. For an unmarshal we will use the local part of the root element name to populate the txnType property. For a marshal we will use the value of the txnType property to create the appropriate JAXBElement. import java.io.File; import javax.xml.bind.JAXBContext; import javax.xml.bind.JAXBElement; import javax.xml.bind.Marshaller; import javax.xml.bind.Unmarshaller; public class Demo { public static void main(String[] args) throws Exception { JAXBContext jc = JAXBContext.newInstance(TransactionAdd.class, ObjectFactory.class); File xml = new File("src/forum107/input1.xml"); Unmarshaller unmarshaller = jc.createUnmarshaller(); JAXBElement je = (JAXBElement ) unmarshaller.unmarshal(xml); TransactionAdd ta = je.getValue(); ta.setTxnType(je.getName().getLocalPart()); JAXBElement jeOut; if("InvoiceAdd".equals(ta.getTxnType())) { jeOut = new ObjectFactory().createInvoiceAdd(ta); } else { jeOut = new ObjectFactory().createSalesOrderAdd(ta); } Marshaller marshaller = jc.createMarshaller(); marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true); marshaller.marshal(jeOut, System.out); } } To Do I will look into addressing the lines property next.
