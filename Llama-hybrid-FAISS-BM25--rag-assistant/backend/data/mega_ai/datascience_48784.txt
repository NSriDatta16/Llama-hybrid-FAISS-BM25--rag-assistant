[site]: datascience
[post_id]: 48784
[parent_id]: 
[tags]: 
Machine learning model to predict the best candidate

Problem: I would like to build a machine learning model that can predict the best candidate from any given set. What could be a good architecture for such a model? Given: I have several training examples, each of which consists of: - a set of candidates. - a descriptor for the set as a whole. - a label that tells which one of those candidates is the best in that set. Details: - I will have around 10K such sets. - The number of candidates in every set may be different (may vary roughly from 10 to 100) - Every set is unordered. - The descriptor of each set is currently a fixed length one-hot vector. I'm open to add more features to it though. - Each candidate is represented by a fixed length feature vector. (However in future, the number of features describing each candidate may also differ for every candidate). What I tried but didn't work: One approach I tried was a simple MLP that takes one candidate as input and outputs whether or not the candidate is the best. But since this MLP wouldn't know which set the candidate belongs to, it fails in situations where a candidate is the best in one set but the same candidate is not the best in another set. To get into some more specifics, in my current problem, each candidate is a 2D polygon with a fixed number of line segments. Labelling on the training examples is being done manually to pick the most good looking polygon in a given set of polylines. Each polygon is described by an array of (x,y) coordinates. One problem I face is that I don't have a natural starting point for a polygon to begin it's array of (x,y) coordinates from. Currently I'm choosing the starting point to be the one with the minimum value of x+y and going counterclockwise from there. Currently each 2D polygon has the same number of segments. But I would soon need to support polygons with varying number of segments. In future, I would like to extend this ML model to 3D polyhedrons too, but I don't know how to even build a feature vector to describe for 3D polyhedron yet. I guess that's a problem for another day.
