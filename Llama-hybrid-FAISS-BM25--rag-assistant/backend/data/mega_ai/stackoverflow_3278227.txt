[site]: stackoverflow
[post_id]: 3278227
[parent_id]: 
[tags]: 
Binary communications protocol parser design for serial data

I'm revisiting a communications protocol parser design for a stream of bytes (serial data, received 1 byte at a time). The packet structure (can't be changed) is: || Start Delimiter (1 byte) | Message ID (1 byte) | Length (1 byte) | Payload (n bytes) | Checksum (1 byte) || In the past I have implemented such systems in a procedural state-machine approach. As each byte of data arrives, the state machine is driven to see where/if the incoming data fits into a valid packet a byte at a time, and once a whole packet has been assembled, a switch statement based on the Message ID executes the appropriate handler for the message. In some implementations, the parser/state machine/message handler loop sits in its own thread so as not to burden the serial data received event handler, and is triggered by a semaphore indicating bytes have been read. I'm wondering if there is a more elegant solution to this common problem, exploiting some of the more modern language features of C# and OO design. Any design patterns that would solve this problem? Event-driven vs polled vs combination? I'm interested to hear your ideas. Thanks. Prembo.
