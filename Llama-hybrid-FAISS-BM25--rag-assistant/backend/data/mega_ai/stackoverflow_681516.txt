[site]: stackoverflow
[post_id]: 681516
[parent_id]: 455210
[tags]: 
I had the same probleam and finally found solution working for me. You have to provide 2 different document providers - first extending FileDocumentProvider for files inside your workbench, and second extending TextFileDocumentProvider for other resources outside your workspace. Then you register the right provider acording to the input in your editors doSetInput method like this: private IDocumentProvider createDocumentProvider(IEditorInput input) { if(input instanceof IFileEditorInput){ return new XMLTextDocumentProvider(); } else if(input instanceof IStorageEditorInput){ return new XMLFileDocumentProvider(); } else { return new XMLTextDocumentProvider(); } } @Override protected final void doSetInput(IEditorInput input) throws CoreException { setDocumentProvider(createDocumentProvider(input)); super.doSetInput(input); } then in your new document provider (extending TextFileDocumentProvider) insert somethnig like this: protected FileInfo createFileInfo(Object element) throws CoreException { FileInfo info = super.createFileInfo(element); if(info==null){ info = createEmptyFileInfo(); } IDocument document = info.fTextFileBuffer.getDocument(); if (document != null) { /* register your partitioner and other things here same way as in your fisrt document provider */ } return info; } This works for me :) Finally I have to mention, that I'm not so clever and that I copied this solution from project Amateras (Opensource HTML editor plugin for eclipse)
