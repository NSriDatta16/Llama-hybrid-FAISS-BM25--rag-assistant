[site]: stackoverflow
[post_id]: 822257
[parent_id]: 822014
[tags]: 
note that even if you're arguing for prototype-based OOP, you call it 'prototypal', and class-based OOP just 'OOP'. so, you yourself suffer from this bias, thinking OOP=>classes, prototypes => something else. and since most people think that OOP is the right way no matter the problem, then prototypes must be inferior. so, to answer your question, it's two factors: a bad definition: "OOP => classes" propaganda: "it must be OOP, or you're not worthy" since you're still bounded by the first, you try to explain that prototypes are an exception of the second. much easier is to correct them: there are many ways to do objects, classes are just the easiest one for static languages. most people are taught to program with static languages, and most of them try to use any language just like the first one they learned. there are many ways to structure a programming solution, OOP are great at some and lousy at others.
