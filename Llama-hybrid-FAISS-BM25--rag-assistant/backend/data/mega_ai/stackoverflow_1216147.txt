[site]: stackoverflow
[post_id]: 1216147
[parent_id]: 1192004
[tags]: 
The biggest factor in your assembly organization should be your dependency graph, at a class as well as an assembly level. Assemblies should not have circular references. That should be pretty obvious to start. The classes that have the most dependencies on each other should be in a single assembly. If a class A depends on class B, and while B may not depend directly on A, it is unlikely to be ever used apart from A, then they should share an assembly. You can also use assemblies to enforce separation of concerns - having your GUI code in one assembly while your business logic resides in another will provide some level of enforcement of your business logic being agnostic of your GUI. Assembly separation based on where the code will be run is another point to consider - common code between executables should (generally) be in a common assembly, rather than having one .exe refer directly to another. Perhaps one of the more important things you can use assemblies for is to differentiate between public APIs, and objects used internally to enable the public APIs to work. By putting an API in a separate assembly, you can enforce the opaqueness of its API.
