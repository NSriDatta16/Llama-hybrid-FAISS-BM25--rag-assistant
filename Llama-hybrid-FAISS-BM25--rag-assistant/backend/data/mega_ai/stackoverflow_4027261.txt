[site]: stackoverflow
[post_id]: 4027261
[parent_id]: 4025629
[tags]: 
As I mentioned in a comment below, I want to remove them from the pom because even though they are in my local Maven repository, while maven is building the project it always says it is trying to download each of these local dependencies, adding extra time onto each build cycle. You aren't showing any trace illustrating the exact problem (this usually helps) but unless your local dependencies are SNAPSHOT dependencies (and that would be a bad choice for manually installed artifacts), I don't think your description of the behavior is accurate. I was hoping to copy these jars to a location where they will be found by the build process but without Maven trying to download any resources each time. My guess is that the dependencies are just missing a .pom file, which is what Maven is trying to download. You can tell Maven to generate this pom for you when installing a JAR in your local repository using: mvn install:install-file -Dfile=your-artifact-1.0.jar \ [-DgroupId=org.some.group] \ [-DartifactId=your-artifact] \ [-Dversion=1.0] \ [-Dpackaging=jar] \ [-DgeneratePom=true] Regardless of how horrible it may seem, I find Maven's behavior here more horrible. Using system scope dependencies doesn't seem horrible, it is an horrible and discouraged practice and should be avoided in 99,999% of the cases. Quoting the provided link: system: This dependency is required in some phase of your project's lifecycle, but is system-specific. Use of this scope is discouraged: This is considered an "advanced" kind of feature and should only be used when you truly understand all the ramifications of its use, which can be extremely hard if not actually impossible to quantify. This scope by definition renders your build non-portable. It may be necessary in certain edge cases. The system scope includes the element which points to the physical location of this dependency on the local machine. It is thus used to refer to some artifact expected to be present on the given local machine an not in a repository; and whose path may vary machine-to-machine. The systemPath element can refer to environment variables in its path: ${JAVA_HOME} for instance. Just use Maven the right way and you won't have problems. With system scoped dependencies (why on earth people keep suggesting to abuse them?!), I predict more troubles later. As you correctly guessed, the htmlunit that is in my local maven repository does not have pom files. I also can't remember how I installed it. So I'm not crazy :) Obviously, my suggestion is to fix the problem and to provide the missing .pom files. If you don't want to reinstall the artifacts (so that Maven could generate them), you can create the .pom manually. A simple file like this would suffice: 4.0.0 ze.groupId some-artifact-id X.Y.Z But please, don't switch to system scoped dependencies, this will do more harm than good on the long run. You may be asking why I am using version 2.8 - well, it contains some patches that are essential for my project. You certainly have good reasons and I won't even discuss them. (...) I get an error during the build that says "command line too long": That's unfortunate, and you should report this problem to datanucleus.
