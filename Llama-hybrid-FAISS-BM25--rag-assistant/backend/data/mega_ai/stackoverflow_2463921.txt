[site]: stackoverflow
[post_id]: 2463921
[parent_id]: 2463769
[tags]: 
I think you underuse your controller. Controller has access to the view as you said, but actually you only use it to retrieve data from the model. It is perfectly valid to fill view from the controller with controller originated data, especially in validation process of incoming data. In your case, the Model could still be responsible from accepting data pre-parsed from the controller. The functional scope of your model may vary from dumb/data storage to intelligent entity with parameter validating methods. The controller has for role to act as a semantic frontier between view & model. view data may be expressed in view oriented semantics,model has its own semantics (like date format) In your case "6 days ago" is a value ,related to date view field (field being the real view oriented semantics of the container holding the string "6 days ago") 3 options for you: having a smart model & trivial controller , model being responsible to return "invalid value" return code to the controller if value is not compatible with model date ingestion method. having a smart controller & trivial model, letting the controller do all the parsing relatively smart controller & relatively smart model (the best option). Each acting in a specific semantic field. ie : the controller parses syntax errors , transforms date to comply with the model interface,while the model handles logical errors based on the date value it receives. In all error cases, the controller is responsible to fill the view with data, whether they come from model's or controller's parsing. Since the controller first received the incoming data, it is free to update the view with incoming data + related error info , not only model originated data.
