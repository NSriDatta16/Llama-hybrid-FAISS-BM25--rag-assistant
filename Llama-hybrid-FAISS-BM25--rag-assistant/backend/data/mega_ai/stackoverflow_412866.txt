[site]: stackoverflow
[post_id]: 412866
[parent_id]: 36504
[tags]: 
I don't know whether it will catch on or not, but from my investigations, a functional language is almost certainly worth learning, and will make you a better programmer. Just understanding referential transparency makes a lot of design decisions so much easierâ€”and the resulting programs much easier to reason about. Basically, if you run into a problem, then it tends to only be a problem with the output of a single function, rather than a problem with an inconsistent state, which could have been caused by any of the hundreds of classes/methods/functions in an imperative language with side effects. The stateless nature of functional programming (FP) maps more naturally to the stateless nature of the web, and thus functional languages lend themselves more easily to more elegant, RESTful web applications. Contrast with Java and .NET frameworks that need to resort to horribly ugly hacks like VIEWSTATE and SESSION keys to maintain application state, and maintain the (occasionally quite leaky) abstraction of a stateful imperative language, on an essentially stateless functional platform like the web. And also, the more stateless your application, the more easily it can lend itself to parallel processing. Terribly important for the web, if your website happens to get popular. It's not always straightforward to just add more hardware to a site to get better performance.
