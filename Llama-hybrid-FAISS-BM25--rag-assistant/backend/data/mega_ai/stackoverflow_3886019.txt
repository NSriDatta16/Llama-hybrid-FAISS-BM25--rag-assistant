[site]: stackoverflow
[post_id]: 3886019
[parent_id]: 3885933
[tags]: 
Nothing wrong with that. It's even good to do something like that to avoid code duplication. An alternative would be to create a base class that implements the logic common to both views and then create two subclasses, one for each views, that implements the things that differentiates it from the other view. Both ways are fine. The base class way is probably more "clean" from a theoretic point of view, but if the differences aren't very big your pragmatic one-class-for-both-views isn't bad either.
