[site]: stackoverflow
[post_id]: 2083736
[parent_id]: 2083721
[tags]: 
I tend to the following simplified pattern: if its only used by one class and likely to stay that way, put it in the implementation file in an anonymous namespace. if it is of use for more then one class and doesn't need access to a class' internal state, put it in a namespace. if it needs access to the class internal state, make it a member function of course. But opinions differ and in the end probably the guide-lines of your employer are the final ones. Edit: ... Of course its not that simple, but as you mentioned Scott Meyers already covered the details. As for the organizational problem: If you put helper functions in anonymous namespaces, they are already mostly decoupled from the class - if you then later decide to reuse them, it shouldn't be too hard to pull them out in a common namespace. At this point you should also have a better view on the organization that fits, which can sometimes be hard in advance.
