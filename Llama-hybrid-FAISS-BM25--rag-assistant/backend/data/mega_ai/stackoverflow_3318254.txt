[site]: stackoverflow
[post_id]: 3318254
[parent_id]: 3318244
[tags]: 
One thing to check would be the GAC (global assembly cache). You can do that by opening windows explorer and typing in c:\windows\assembly in the address bar (assuming your OS is installed on the c drive). It may be getting the assembly from the GAC instead. Other things to do would be to clean the solution and do a rebuild all to make sure you don't have any old assembly references. Also, if this is a web application, it always helps to stop IIS and then go clean out the C:\WINDOWS\Microsoft.NET\Framework\framework_version\Temporary ASP.NET Files folder. TIP The other thing to use is the .Net reflector . You can see what dependencies the assembly has, and you need to make sure they are all present on the target machine. The way to do this is to install the reflector, then run it, then drag your assembly into it and you can see the assembly's dependencies. You need to make sure every one of those dependency dll's is available on the target machine, and also, the version number must be correct if they are signed assemblies. TIP2 Note that sometimes you get issues where assembly A is bound against version xxx of assembly B, and assembly C is bound against version yyy of assembly B. In other words, 2 different assemblies in your project are bound against different versions of the same assembly. This is the modern day version of DLL Hell. The way to hack around this is to use assembly rebinding. You can read about it here .
