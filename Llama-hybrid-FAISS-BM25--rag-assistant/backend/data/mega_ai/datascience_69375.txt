[site]: datascience
[post_id]: 69375
[parent_id]: 
[tags]: 
Serializing a trained classification model into a set of actionable insights

I'm looking for ways to convert a trained classification model into a list of insights based on the resulting parameters of the model. To make an example, let's assume we trained a decision tree to predict a binary outcome (0 or 1). We ended up with a simple tree that has 7 nodes (A - root, B / C - level 1, D / E - level 2 from B, F / G level 2 from C). From this model, I want to build a list with all combinations of decisions (e.g. A -> B, A -> C, A -> B -> D, etc.) and a couple of parameters to prioritize the classification power of each decision: Confidence : The purity of the current decision (e.g., what percentage of the classified data falls under the predicted class, "0" or "1") Support : The fraction of the entire data set covered by the current decision Here are the sample rows of my list, assuming that: A -> B is "Feature N > 5", 80% - 0 / 20% - 1, covers 100% of records B -> D is "Feature K (column separator is "|") Decision | Conditions | Confidence | Support A -> B | Feature N > 5 | 80% - 0 | 100% A -> B -> D | Feature N > 5 & Feature K Such a list would allow me to quickly find the most impactful decisions by comparing them across confidence and support, and understand exactly what conditions are in play for the prioritized decisions. The second part gives me great insight to act on the findings. The use case seems common enough to hope for some packaged solutions, but I would appreciate any guidance on how a Python beginner can approach this task from scratch. A bonus question I have is whether we can extend this to a random forest model?
