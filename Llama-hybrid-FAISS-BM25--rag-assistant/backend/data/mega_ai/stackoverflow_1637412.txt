[site]: stackoverflow
[post_id]: 1637412
[parent_id]: 1634248
[tags]: 
I would go with three-table Kimball star ( Date, Employee, Schedule ), because sooner or later you will be asked to create (demanding) reports out of this. Who worked most nights? Who worked most weekends? Who never works weekends? Why am I always scheduled Friday afternoon? On which day of a week are certain employees most likely not to show up? Etc, etc... Tables would be: TABLE dimDate ( KeyDate , FullDate , DayOfWeek , DayNumberInWeek , IsHoliday ,... more here ) You can pre-fill dimDate table for 10 years, or so -- may need to tweak the "IsHoliday" column from time to time. Employee table also changes (relatively) rarely. TABLE dimEmployee ( KeyEmployee , FirstName , LastName , Age , ... more here ) Schedule table is where you would fill-in the work schedule, I have also suggested "HoursOfWork" for each shift, this way it is easy to aggregate hours in reports, like: "How many hours did John Doe work last year on holidays?" TABLE factSchedule ( KeySchedule -- surrogate PK , KeyDate -- FK to dimDate table , KeyEmployee -- FK to dimEmployee table , Shift -- shift number (degenerate dimension) , HoursOfWork -- number of work hours in that shift ) Instead of having the surrogate KeySchedule, you could also combine KeyDate, KeyEmployee and Shift into a composite primary key to make sure you can not schedule same person on the same shift the same day. Check this on the application layer if the surrogate key is used. When querying, join tables like: SELECT SUM(s.HoursOfWork) FROM factSchedule AS s JOIN dimDate AS d ON s.KeyDate = d.KeyDate JOIN dimEmployee AS e ON s.KeyEmployee = e.KeyEmployee WHERE e.FirstName='John' AND e.LastName='Doe' AND d.Year = 2009 AND d.IsHoliday ='Yes'; If using MySQL it is OK to use MyISAM for storage engine and implement your foreign keys (FK) as "logical only" -- use the application layer to take care of referential integrity. Hope this helps.
