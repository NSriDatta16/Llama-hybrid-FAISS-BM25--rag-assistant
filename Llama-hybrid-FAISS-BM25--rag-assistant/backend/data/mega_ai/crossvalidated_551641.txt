[site]: crossvalidated
[post_id]: 551641
[parent_id]: 
[tags]: 
can a trained tensorflow neural network make predictions on data without annotations?

I have effectively trained a sequential neural network using tensorflow on an annotated NER corpus. I'm trying to understand how I can feed unannotated data into the model so I can get predicted named entity tags for each token in the unnanotated dataset. In the notebook for the annotated data, the cell handling predictions looks like the block below. x_test is a list of lists where each ksub-list is a sentence (a list of tokens) from the corpus, i.e,, [['Hello, I, am, driving.], ['I, live, in, the mountains.]]. Essentially, the block below takes a random sentence from x_test and shows true and predicted tags for each word in that sentence. i = np.random.randint(0, x_test.shape[0]) print("This is sentence:",i) p = model.predict(np.array([x_test[i]])) p = np.argmax(p, axis=-1) print("{:15}{:5}\t {}\n".format("Word", "True", "Pred")) print("-" *30) for w, true, pred in zip(x_test[i], y_test[i], p[0]): print("{:15}{}\t{}".format(words[w-1], tags[true], tags[pred])) However, when I try to modify this for my unannotated data (attempt below), I'm seeing that the predicted tag values don't correspond to the dictionary of tag values created from the annotated dataset, and I get an "IndexError: list index out of range". Why would this happen?
