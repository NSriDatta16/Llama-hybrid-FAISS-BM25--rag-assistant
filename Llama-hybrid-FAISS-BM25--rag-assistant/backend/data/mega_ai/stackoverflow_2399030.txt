[site]: stackoverflow
[post_id]: 2399030
[parent_id]: 2398297
[tags]: 
I'm using a singleton pattern for the datacontext in my web application "Singleton" can mean many different things in this context. Is it single-instance per request? Per session? Per thread? Per AppDomain ( static instance)? The implications of all of these are drastically different. A "singleton" per request (stored in the HttpContext ) is fine. A singleton per session is discouraged, but can be made to work. A singleton per thread may appear to work but is likely to result in unexpected and difficult-to-debug behaviour. A singleton per Application or AppDomain is a disaster waiting to happen. so that I dont have to instantiate it every time Creating a DataContext is very, very cheap. The metadata is globally cached, and connections aren't created until you actually execute a query. There is no reason to try to optimize away the construction of a DataContext instance. however I'm not sure how web applications work, does IIS open a thread for every user connected? IIS uses a different thread for every request, but a single request may use multiple threads, and the threads are taken from the Thread Pool, which means that ultimately the same user will have requests on many different threads, and conversely, different users will share the same thread over multiple requests and an extended period of time. That is why I mention above that you cannot rely on a Thread-Local Singleton. if so, what would happend if my singleton is not thread safe? Very bad things. Anything that you cache globally in an ASP.NET application either needs to be made thread safe or needs to be locked while it is in use. Also, is it OK to use a singleton pattern for the datacontext? Thanks. A DataContext is not thread-safe, and in this case, even if you lock the DataContext while it is in use (which is already a poor idea), you can still run into cross-thread/cross-request race conditions. Don't do this. DataContext instances should be confined to the scope of a single method when possible, using the using clause. The next best thing is to store them in the HttpContext . If you must, you can store one in the Session, but there are many things you need to be aware of (see this question I answered recently on the ObjectContext - almost all of the same principles apply to a DataContext ). But above all, do not create "global" singleton instances of a DataContext in an ASP.NET application. You will deeply regret it later.
