[site]: datascience
[post_id]: 122603
[parent_id]: 
[tags]: 
integration of Feature Selection in Pipeline

I have noticed integrating feature selection in a pipeline alters results. Pipeline 1 gives slightly different results with pipeline 2. Why should this be so? Pipeline 2 # Integrate selection in pipeline select = SelectPercentile(score_func=chi2, percentile=50) pipeline_selection = make_pipeline( FunctionTransformer(preprocess_data), encode_transformer, poly_transformer, select, LogisticRegression(max_iter=10000) ) # Define the parameter grid for grid search param_grid = { 'logisticregression__C': [0.001, 0.01, 0.1, 1, 10, 100], 'logisticregression__penalty': ['l1','l2'], 'logisticregression__solver': ['liblinear', 'saga','newton-cg'] } # Create the logistic regression grid search object with cross-validation grid_search = GridSearchCV(pipeline_selection, param_grid, cv=5,return_train_score=True) grid_search.fit(X_train, y_train) # Get the best parameters and best score best_params = grid_search.best_params_ best_score = grid_search.best_score_ print("Best Parameters:", best_params) print("Best Score:", best_score) Pipeline 1 encode_transformer = make_column_transformer( (OneHotEncoder(), ['Sex','Pclass','Title']), (MinMaxScaler(), ['Age']), (FunctionTransformer(boxcox_transform), ['Fare']), ) # Create the polynomial transformer poly_transformer = PolynomialFeatures(degree=2, include_bias=False) # Create the pipeline by chaining the column transformers pipeline = make_pipeline( FunctionTransformer(preprocess_data), encode_transformer, poly_transformer ) poly_transformed_df = pipeline.fit_transform(X_train) select = SelectPercentile(score_func=chi2, percentile=50) best = select.fit(poly_transformed_df, y_train) X_train_poly_selected = select.transform(poly_transformed_df) parameters = { 'C': [0.001, 0.01, 0.1, 1, 10, 100], 'penalty': ['l2'], 'solver': ['liblinear', 'saga','newton-cg'] } clf = GridSearchCV(LogisticRegression(max_iter=1000), parameters, cv=5, return_train_score=False) clf.fit(X_train_poly_selected, y_train) print(clf.best_params_) print(clf.best_score_)
