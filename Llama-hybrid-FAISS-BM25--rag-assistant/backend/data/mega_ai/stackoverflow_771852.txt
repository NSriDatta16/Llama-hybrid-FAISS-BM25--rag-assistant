[site]: stackoverflow
[post_id]: 771852
[parent_id]: 771816
[tags]: 
In using-the-subprocess-module , there is an explicit paragraph: The executable argument specifies the program to execute. It is very seldom needed: Usually, the program to execute is defined by the args argument. If shell=True, the executable argument specifies which shell to use. On Unix, the default shell is /bin/sh. On Windows, the default shell is specified by the COMSPEC environment variable. Windows example - the shell ( cmd.exe ) command date -t will not be recognized without the shell: >>> p=subprocess.Popen(["date", "/t"], stdout=subprocess.PIPE) Traceback (most recent call last): File " ", line 1, in File "C:\Python26\lib\subprocess.py", line 595, in __init__ errread, errwrite) File "C:\Python26\lib\subprocess.py", line 804, in _execute_child startupinfo) WindowsError: [Error 2] The system cannot find the file specified >>> Using a shell, all is well: >>> p=subprocess.Popen(["date", "/t"], shell=True, stdout=subprocess.PIPE) >>> p.communicate() ('Wed 04/22/2009 \r\n', None) >>>
