[site]: stackoverflow
[post_id]: 4328505
[parent_id]: 
[tags]: 
Designing For Lookup Values

I am wondering what the protocol is in your development shop or project for dealing with lookup values, such as countries of the world or states in the United States of America. I have seen it done in two different ways: at one place I worked our lookups were all stored in a database table with the prefix "L_" and had the following columns: id, code, desc, ordersequence. So, for example, for countries of the world we would have a table like: CREATE TABLE L_Countries( CountryID INT IDENTITY(1,1) PRIMARY KEY, CountryCode VARCHAR(10) NOT NULL, CountryDesc VARCHAR(50) NOT NULL, OrderSequence INT NULL ) More recently I have seen an example where lookups are baked into Enumerations, for example: enum Countries { Croatia = 1, Slovenia = 2, Serbia = 3, // and so on } In the event that these are originating from a database table, there is a utility that will generate the C# code for the enumeration. Otherwise someone just takes the time to hardcode all the entries using the assumption that the values are not likely to change . For the numeric values in the enumeration, they are hardcoded based on the ID column in the corresponding lookup table in the database if it exists, or just hardcoded based on entry starting from 1. The argument for the former approach which, admittedly, I favor, is that it is quite flexible giving the option for using codes or full descriptions, manipulating order, and making changes without having to recompile. Although the option to generate code from them is possible, a big advantage is that they remain true "lookups" when relegated to the database. Finally, the way they can be used is flexible: as values in a Dictionary collection or generating ASP.NET ListItems or html combobox elements with server side code. Arguments I have heard for the latter is that values will not change, and that there is overhead in having to retrieve lookup values from the database even if they are cached at the application level. By hardcoding them or generating an Enum, they are available without the penalty of database retrieval. My questions are as follows: Which option makes more sense to you or, if your answer is "it depends," can you give a scenario where the hardcoded enumerations are better than a database lookup across an entire application? Are there other ways that you have seen which are an elegant solution to dealing with lookups? I have worked on an application where there was a single table for all the lookups (it included a "lookupname" column) as an example. How does your alternate approach compare to the above two approaches?
