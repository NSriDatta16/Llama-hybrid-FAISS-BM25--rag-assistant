[site]: stackoverflow
[post_id]: 1540033
[parent_id]: 1539959
[tags]: 
Generics provide performance and runtime-memory advantages over non-generic equivalents. For example, compare the following. ArrayList arrayList = new ArrayList(new Byte[] { 1, 2, 3, 4, 5, 6, 7, 8} ); vs List byteList = new List { 1, 2, 3, 4, 5, 6, 7, 8 }; The ArrayList will contain an internal storage of object[] which with each element pointing to a byte. The ideal memory for this part of the list with 32 bit pointers is therefore 8 * 4 + 8 = 40 bytes. I say ideal 'cause it's actually worse since the boxed bytes will have some additional overhead, although I don't know exactly how much. The List implementation will instead contain byte[] which will require just one pointer to the array plus the 8 bytes, for a total of 12 bytes of memory without the boxing overhead, whatever that is. In addition to the memory differences, there is also the performance cost of boxing/unboxing the values. The difference is less for reference types, but even there you'll have a cost penalty for casting constantly when taking data out of the non-generic type. These differences are real, but will have immeasurable impact on most applications. The real advantage of generics is greater reliability of compile-time verification and simpler code that results from using typed values. In my opinion it's best to use generics whenever appropriate and possible. Sam
