[site]: stackoverflow
[post_id]: 738651
[parent_id]: 738629
[tags]: 
Here is the detailed explanation of why " Random.nextInt(n) is both more efficient and less biased than Math.random() * n " from the Sun forums post that Gili linked to: Math.random() uses Random.nextDouble() internally. Random.nextDouble() uses Random.next() twice to generate a double that has approximately uniformly distributed bits in its mantissa, so it is uniformly distributed in the range 0 to 1-(2^-53). Random.nextInt(n) uses Random.next() less than twice on average- it uses it once, and if the value obtained is above the highest multiple of n below MAX_INT it tries again, otherwise is returns the value modulo n (this prevents the values above the highest multiple of n below MAX_INT skewing the distribution), so returning a value which is uniformly distributed in the range 0 to n-1. Prior to scaling by 6, the output of Math.random() is one of 2^53 possible values drawn from a uniform distribution. Scaling by 6 doesn't alter the number of possible values, and casting to an int then forces these values into one of six 'buckets' (0, 1, 2, 3, 4, 5), each bucket corresponding to ranges encompassing either 1501199875790165 or 1501199875790166 of the possible values (as 6 is not a disvisor of 2^53). This means that for a sufficient number of dice rolls (or a die with a sufficiently large number of sides), the die will show itself to be biased towards the larger buckets. You will be waiting a very long time rolling dice for this effect to show up. Math.random() also requires about twice the processing and is subject to synchronization.
