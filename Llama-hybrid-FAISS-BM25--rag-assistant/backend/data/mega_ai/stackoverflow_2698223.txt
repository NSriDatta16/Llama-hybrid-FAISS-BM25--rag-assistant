[site]: stackoverflow
[post_id]: 2698223
[parent_id]: 2655861
[tags]: 
I've implemented exactly this using (my own) Attribute on the Fluent mapping file to dictate which DB the entity belongs in. I've also got a concept of a 'default' database, and mapping files without an attribute are assumed to reside in the default DB (it may cut down on the number of classes you need to decorate). I then have initialisation code which creates a Session Factory per database, and for each, uses reflection to find all ClassMap classes,examines the attribute to determine which DB it belongs to, and registers each ClassMap accordingly. A mapping file example: [FluentNHibernateDatabase("MySecurityDatabase")] public class SystemUserMap : ClassMap { public SystemUserMap() { Id(x => x.SystemUserId); Map(x => x.LoginId); Map(x => x.LoginPassword); Map(x => x.UserFirstName); Map(x => x.UserSurname); References(x => x.UserOrganisation, "OrganisationId"); } } Obviously I've defined a list of the DBs that are referenced/used. My implementation works so far as I've taken it, but I've hit a snag (that I hope someone can help out with): I've asked my question here: How to identify a particular entity's Session Factory with Fluent NHibernate and Multiple Databases
