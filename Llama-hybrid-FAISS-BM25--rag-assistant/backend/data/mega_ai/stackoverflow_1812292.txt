[site]: stackoverflow
[post_id]: 1812292
[parent_id]: 1812259
[tags]: 
This default constructs the new objects and assigns them (or would, if the Begin() returned T* and not const T* , see dribeas' answer), it might be more efficient if you used raw storage and constructed the new objects in place. Also as GetSize() , Begin() and End() aren't const they can't be called on the parameter v . template StdVector ::StdVector(const StdVector &v) : _pos(0), _size(v.GetSize()), _items(new T[_size]){ std::copy(v.Begin(), v.End(), Begin()); } The if statement is redundant. delete[] on a NULL pointer is fine. Also, is there any point to it being virtual? It doesn't look like this is a class designed to be derived from. template StdVector ::~StdVector(){ if (_items != NULL) delete[] _items; } SetSize destroys all the objects and creates new ones. This may be 'surprising' behaviour. Also, if the new throws, the object will be left pointing at deallocated memory. Again, the if guarding the delete is redundant. template void StdVector ::SetSize(int size){ if (_items != NULL) delete[] _items; _pos = 0; _size = size; _items = new T[_size]; } What's the point of this? It appears to do the same as Begin . It's not even a const method. template const T * StdVector ::ConstIterator(){ return _items; } Doesn't this attempt copy to _items which has just been deleted (again see the points about Begin() returning const T* and about Begin() and End() not being const)? template StdVector & StdVector ::operator=(const StdVector &v){ if (this != &v){ delete[] _items; std::copy(v.Begin(), v.End(), Begin()); } return *this; } What exception class is this? std::exception doesn't have a constructor that takes a const char* . You should also throw exception objects, not pointers to dynamically allocated exception objects. Cleaning up dynamically allocated exceptions which are 'thrown' by pointer is almost impossible to do robustly. template void StdVector ::Add(const T &item){ if (_pos == _size) throw new exception("Already at max size!!!"); _items[_pos++] = item; }
