[site]: stackoverflow
[post_id]: 987322
[parent_id]: 987081
[tags]: 
Many agile techniques work great solo: User interviews and stories: If you don't know what your users want, why would your software be useful? A simple spec: Or even just be a mission statement. "Let people broadcast short messages to their subscriber lists." "Use in-degree to sort internet search results." "Let people collaboratively answer programming questions." Whatever. A strictly-ordered todo list: Helpful to keep you from drowning in thoughts. Tangents log: A good to-do list has a "to-don't" component, so you don't obsess over things you aren't going to do (yet). YAGNI: Stay on target. This is very important when working by yourself, because no one is there to tell you "No! Don't reinvent dynamic typing in Java! Get back to the project." To-don't lists help with this. Test-driven development: Writing tests forces you to think about the end result, rather than getting bogged down in implementation details. You'll get bogged down enough anyway; no need to make it worse. Frequent releases: Make yourself stick to deadlines. "We'll have a feature-complete version that includes user stories 1-4 by Friday. It won't connect to the network or save data to disk, but XYZ..." User testing: Have your buddies look at what you're making on a decently frequent schedule -- maybe once a month, maybe every week, depending on how many friends you have and how much beer/pizza you want to feed them. Pay very close attention to what they say and do and think when using the software. And other things that only seem like they make sense in big projects can help a lot: Source control: Install git . It's bone simple. Use it. Don't obsess over it. Off-site backups: Y'know. In case of house fires or floods. A blog: But you're only allowed to write there when a release comes out. ;) Also helps you build an audience for your product before it even ships. Hope this helps! Solo programming on a large project can be very daunting.
