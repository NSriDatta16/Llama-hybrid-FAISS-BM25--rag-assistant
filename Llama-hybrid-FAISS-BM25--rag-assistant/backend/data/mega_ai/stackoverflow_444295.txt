[site]: stackoverflow
[post_id]: 444295
[parent_id]: 444245
[tags]: 
I like Jimmy's answer a lot, but I feel I need to add something to it. The key to the whole thing is the "able" in IProcess able . It indicates a capability (or property, but meaning "intrinsic quality", not in the sense of C# properties) of the object that implements the interface. IAnimal is probably not a good example for an interface, but IWalkable might be a good interface to have if your system has many things that can walk. You might have classes derived from Animal such as Dog, Cow, Fish, Snake. The first two would probably implement IWalkable, the latter two don't walk, so they wouldn't. Now you ask "why not just have another superclass, WalkingAnimal, that Dog and Cow derive from?". The answer is when you have something completely outside the inheritance tree that also can walk, such as a robot. Robot would implement IWalkable, but probably wouldn't derive from Animal. If you want a list of things that can walk, you type it as IWalkable and you can put all walking animals plus robots in the list. Now replace IWalkable with something more software-y like IPersistable, and the analogy becomes much closer to what you'd see in a real program.
