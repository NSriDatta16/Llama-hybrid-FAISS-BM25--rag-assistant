[site]: stackoverflow
[post_id]: 5448335
[parent_id]: 
[tags]: 
Testing in Lisp

I am new to Lisp, and I am learning Scheme through the SICP videos. One thing that seems not to be covered (at least at the point where I am) is how to do testing in Lisp. In usual object oriented programs there is a kind of horizontal separation of concerns: methods are tied to the object they act upon, and to decompose a problem you need to fragment it in the construction of several objects that can be used side by side. In Lisp (at least in Scheme), a different kind of abstraction seems prevalent: in order to attack a problem you design a hierarchy of domain specific languages, each of which is buil upon the previous one and acts at a coarser level of detail and higher level of abstraction. (Of course this is a very rough description, and objects can be used vertically, or even as building blocks of DSLs.) I was wondering whether this has some effect on testing best practices. So the quetsion is two-fold: What are the best practices while testing in Lisp? Are unit tests as fundamental as in other languages? What are the main test frameworks (if any) for Lisp? Are there mocking frameworks as well? Of course this will depend on the dialect, but I'd be interested in answers for Scheme, CL, Clojure or other Lisps.
