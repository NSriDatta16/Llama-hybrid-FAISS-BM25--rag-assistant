[site]: crossvalidated
[post_id]: 268987
[parent_id]: 
[tags]: 
nls() function in R not fitting well when calculating Kd

I'm trying to calculate Kd with the following R code but my model is clearly wrong (see image). How has nls() converged so poorly? How can I use it to find a better fit for my data? Why does lm() work so much better? # log plot plot(log10(binding_data$ligand_uM),binding_data$fraction_bound) # 1.2 2.5 5.2 10.5 21.1 42.1 73.2 111.3 185.5 256.9 325.7 392.0 binding_data$ligand_uM # 0.00 0.01 0.02 0.03 0.04 0.15 0.42 0.80 0.97 1.00 1.01 0.99 binding_data$fraction_bound L |t|) #Kd 62.82 18.22 3.447 0.00546 ** nonlinear_model2 %>% summary() # plot nonlinear model lines(log10(binding_data$ligand_uM),predict(nonlinear_model2)) # half_max = 0.505 half_max % summary() %>% coefficients() %>% .[1] Kd_r My fit looks better when I use lm() with a 4th degree polynomial (below), but I want to use the equation for Kd, rather than a 4th degree poly... I don't understand why the nls() approach fails and lm() succeeds. # 1.2 2.5 5.2 10.5 21.1 42.1 73.2 111.3 185.5 256.9 325.7 392.0 binding_data$ligand_uM # 0.00 0.01 0.02 0.03 0.04 0.15 0.42 0.80 0.97 1.00 1.01 0.99 binding_data$fraction_bound # log plot plot(log10(binding_data$ligand_uM),binding_data$fraction_bound) # create model of the form Y = (1)x + (2)x^2 + (3)x^3 + (4)x^4 + (Intercept) nonlinear_model % summary() # plot nonlinear model lines(log10(binding_data$ligand_uM),predict(nonlinear_model)) # half_max = half_max
