[site]: stackoverflow
[post_id]: 4743646
[parent_id]: 4743469
[tags]: 
Google has a demo that demonstrates this methodology you're referring to. It's the Autoshoppe Demo for Google App Engine. Although it's Java, the concepts also apply to .NET applications. The app contains plain vanilla HTML pages with .html extensions. There is no server side view technologies to complicate an HTML programmer's life. The HTML pages use JavaScript AJAX to interact with REST Web Services built using Spring 3.0, which interact with a datastore. The request data is passed as JSON in the request The response data is returned as JSON in the response. What this means is that anyone can build a user interface on top of this API, or you could create a .NET project that interacts with that data. REST is a great architecture for creating extensible, layered services. I think the reason this technique is not widely used is because many people are stuck on view technologies that encourage developers to use the view technology vendor's markup in the HTML, such as ASP files (or JSP for Java). It's a practice that has been around for awhile because fundamentally the writers of these frameworks are engineers, not web designers and UI designers. It also takes a fairly strong understanding of REST to see the advantages this method offers, and junior developers sometimes struggle with these concepts. If you were to tackle this in .NET, using the AutoShoppe demo as a guideline, you would most likely want to use an object mapper that can convert your JSON to a .NET object and back to JSON. This is a much cleaner approach than trying to parse JSON yourself. The advantages of this RESTful approach is that your content, behavior, and presentation are completely, 100% separate to the point where you could give your web programmer the HTML files and he/she could run them completely outside of the .NET environment. Your designers can then use their tools and focus on their strengths, not ever having to install, configure, or run Visual Studio.NET. In fact, the files would run right from the desktop. EDIT : Perhaps a disadvantage is that there isn't much support for this in many MVC frameworks, mostly because it's a new concept. The bridge between the client side and the server side currently must be written by the developer. In the AutoShoppe demo, the developers wrote a prototype class in JavaScript to handle converting data into JSON before sending to the server, and they had to write JavaScript code to marshall the JSON into JavaScript objects and manipulate that data back into HTML. On the server side, they did use an Object Mapper to deserialize the JSON to objects. Most of the complexity was on the server. The advantages of turning the server side component into a 100% reusable RESTful service that designers and clients can easily interact with may outweight the disadvantages, depending on the scenario. A good example may be for a service where your clients are encouraged to code their own user interfaces or have full control over product whitelabeling. This is one of many reasons why I won't use server side view technologies .
