[site]: stackoverflow
[post_id]: 4609648
[parent_id]: 4609016
[tags]: 
I wrote about this sometime back. Check 'er out if you'd like: http://www.weirdlover.com/2010/07/01/the-big-boy-mvc-series-part-22-whoop/ Add a reference to Automapper Create a base ViewModel class: public abstract class MappedTo { public MappedTo() { Mapper.CreateMap(GetType(), typeof(T)); } public T Convert() { return (T)Mapper.Map(this, this.GetType(), typeof(T)); } } Create a ViewModel class that inherits from the aforementioned base. Specify which DTO you'd like to map your ViewModel to: class AddressViewModel : MappedTo { public string Line1 { get; set; } public string City { get; set; } public string State { get; set; } } AutoMapper should handle the rest: static void Main(string[] args) { AddressViewModel addressVm = new AddressViewModel { Line1 = "555 Honolulu Street", City = "Honolulu", State = "HI" }; Address address = addressVm.Convert(); Console.WriteLine(address.Line1); Console.WriteLine(address.City); Console.WriteLine(address.State); Console.ReadLine(); } If you want to get fancy, you can create another ViewModel base calss that allows you to pass in your own TypeConverter : public abstract class MappedTo { public MappedTo() { Mapper.CreateMap(GetType(), typeof(T)).ConvertUsing(typeof(TConverter)); } public T Convert() { return (T)Mapper.Map(this, this.GetType(), typeof(T)); } } Then, you can convert from your ViewModel to your DTO however you see fit: public class AddressConverter : TypeConverter { protected override Address ConvertCore(AddressViewModel source) { return new Address { Line1 = source.Line1 + " foo", City = source.City + " foo", State = source.State + " foo" }; } }
