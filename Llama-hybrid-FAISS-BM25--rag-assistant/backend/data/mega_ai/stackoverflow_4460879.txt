[site]: stackoverflow
[post_id]: 4460879
[parent_id]: 4460232
[tags]: 
I think this has some what to do with understanding push vs. pull style processing than just comparing xsl:for-each or xsl:template match="..." . You often see programmers from another discipline using a lot of xsl:if , xsl:choose and for-loops when the problem could have been solved in a more elegant XSLTish way. But to the question: In my opinion , if you consider using xsl:for-each instead of processing the data with xsl:apply-templates you need to rethink. There are cases where a for-loop is suitable in XSLT, but whenever a matching template would do the same, templates are the way to go. In my experience, you can usually do most xsl:for-each with an xsl:apply-templates instead. Some benefits as I see it of using matching templates over a for-loop are: The stylesheets are easier to maintain and extend especially if source data changes. As @chiborg mentions, templates can be reused since they are not built into a specific template. Together with xsl:next-match in XSLT 2.0 you can chain templates together in powerful ways. You don't have to mimic behavior already built in to all XSLT processors, that is; use xsl:apply-templates and let the processor work for you. Also, I find it easier to understand and debug a push style stylesheet. If you divide your stylesheet info small templates which do one or a few things and write specific matching patterns it's easy to see which template is doing what and trace the source of the problem.
