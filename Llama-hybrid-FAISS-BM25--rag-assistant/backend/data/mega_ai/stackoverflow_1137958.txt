[site]: stackoverflow
[post_id]: 1137958
[parent_id]: 1135370
[tags]: 
Working across multiple databases in this way is a non-trivial task. Frankly, 2TB is right at the very top end of what is achievable with these products (unless you are using Sybase IQ - which you didn't mention). If you are doing data warehousing or reporting from this data then you might want to reconsider you product choices. {It would be easier to give you advice if you explained why you want to load 2TB of test data. Also, why these databases? "Tricks" that work for loading in Oracle will be different for Sybase. Anyway here's my generic advice…} First, review your DDL and completely remove any and all constraints and auto incrementing values. The DB spends a lot of CPU and IO cycles checking these values when you're doing any kind of insert, so get rid of them. It will be faster to reapply them later anyway, if necessary. Second, generate a 1 column table for each column that you want to have in your final table. For instance, if this is an address table, you might have: First_Name, Last_Name, Address_1, etc. Populate each of this tables with a small sample of the values you expect in the real data, say 10 rows per table. Now for the magic: you cross join all of these 1-column tables together in a cartesian product. This will give you 1 row for every possible combination of your 1 column tables and thus "inflate" them to the size you require. Example Query: (syntax may vary per db) SELECT * FROM First_Name CROSS JOIN Last_Name CROSS JOIN Address_1 … CROSS JOIN Post_Code You can calculate how much data will be generated by multiplying the row counts. 10 tables w/ 10 rows = 10^10 = 10,000,000,000 = 10 billion rows Then multiple your rows count by the average row size to get a total data volume, excluding db overhead. (128 byte rows * 10 billion rows) / 1024^4 (Terabyte) = 1.164 Terabytes of sample data. The Easy Way Download a trial copy of Benchmark Factory from Quest. This will allow you to push several different benchmark data sets into your database and run them. Not cheap though if you want to keep using it.
