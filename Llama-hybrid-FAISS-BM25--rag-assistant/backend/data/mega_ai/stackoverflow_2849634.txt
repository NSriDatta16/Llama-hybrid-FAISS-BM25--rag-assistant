[site]: stackoverflow
[post_id]: 2849634
[parent_id]: 
[tags]: 
Copy Paste vs. Reference

My question is in regard to referencing open source frameworks. There are many of them for many different purposes. I personally leverage several of them in a single project. For example: Unity CAL/Prism ValidationAspects EnterpriseLibrary Logging EnterpriseLibrary Exception Handling EnterpriseLibrary Caching Caliburn All of these frameworks have helped greatly from a development effort perspective. There are however some negative aspects involved: Tons of dlls (15 from the above list). Application level (non-common assemblies and new assemblies) must reference many core dlls, which can be confusing) and tons of different namespaces are involved. Deployment of said tons of dlls can get problematic (I sometimes use ILMerge to alleviate this and the above problems, but let's put that aside for now). Open source project lifetime - open source projects come and go, so if any of these become no longer actively maintained, it can be concerning if there are internal bugs that need fixing or enhancements we want. Obfuscation of "how to do things". We don't actively leverage every part of the above frameworks. In fact, several of these frameworks have overlap and provide redundant components and functionality. In terms of development, this can be confusing. We want a consistent implementation that is straightforward and easy to understand across our code base. Having multiple areas that do the same thing in different ways can be troublesome in this respect. This is probably one of my biggest concerns. You're in big trouble if these frameworks reference different versions of other assemblies (ie. one internally references Unity 1.1 and another Unity 2.0). The alternative? Include the source code in a common dll for your project(s) (ie. MyProject.Common). Let's put aside the issue of adherence to license requirements for the time being. This has several negative implications too: It's not as easy to leverage updates released by the framework's provider - you need to update your source code. Encapsulation of functionality - it's easier to break this paradigm when the source code is all in your hands. So, I know people probably have lots of opinions on this...and I'd like to hear them. Thanks.
