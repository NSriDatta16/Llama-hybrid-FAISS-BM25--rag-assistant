[site]: stackoverflow
[post_id]: 3275649
[parent_id]: 3275601
[tags]: 
C++ standard in its [list.modifiers] section says that any list insertion operation "does not affect the validity of iterators and references", and any removal operation "invalidates only the iterators and references to the erased elements". So keeping iterators around would be safe . Keeping iterators inside the objects also seems sane . Especially if you don't call them iterators, but rather name like FooManagerHandlers , which are processed by removal function in an opaque way. Indeed, you do not store "iterators", you store " representatives " of objects in an organized structure. These representatives are used to define a position of an object inside that structure. This is a separate, quite a high-level concept, and there's nothing illogical in implementing it. However, the point of using lists is not just O(1) insert/remove, but also keeping elements in an order . If you don't need any order, then you would probably find hash tables more useful.
