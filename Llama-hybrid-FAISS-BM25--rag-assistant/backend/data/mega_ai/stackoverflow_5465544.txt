[site]: stackoverflow
[post_id]: 5465544
[parent_id]: 5456959
[tags]: 
If the data will be as uniform as the example you provided (i.e. just note elements, with a fixed number of fields) You might be able to get away with having one big table in the Word document, with columns for to , from , heading , body , etc. Then, you could parse it out in Python using one of the methods described in this question and output your custom XML. Since .docx files are XML already, that may or may not make your job simpler. If the data are going to be more complex, one idea might be using Word styles to map text to the correct tags. You could make a custom style for each tag, which would be quick and easy for the user to click (and perhaps have a different color and/or font). Then when parsing the document you could filter everything based on the paragraph style applied. I'm thinking this route would be painful, though. Another option might be writing the document in a structured syntax like YAML , which is easy enough to read/write by hand and you could parse just from saving the file as plaintext, e.g. # plaintext_export.txt ------------------ Notes: - From: Somebody To: Somebody-else Heading: This is a heading Message: > Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. - From: Another guy To: Me Heading: Huh? Message: > Some other message content. Parsing would be as simple as: >>> import yaml >>> from pprint import pprint >>> with open("plaintext_export.txt", 'r') as f: ... data = yaml.load(f) ... >>> pprint(data) {'Notes': [{'From': 'Somebody', 'Heading': 'This is a heading', 'Message': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit , sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n', 'To': 'Somebody-else'}, {'From': 'Another guy', 'Heading': 'Huh?', 'Message': 'Some other message content.\n', 'To': 'Me'}]}
