[site]: stackoverflow
[post_id]: 2501246
[parent_id]: 2501130
[tags]: 
That's a huge mistake to use threads. Try to avoid using threads if you have other solutions ! In your case, just use an asynchronous NSURLConnection which will take care of downloading your image while not slowing your app ;) Here is part of the code : - (void) startDownload { self.activeDownload = [NSMutableData data]; NSURLConnection *conn = [[NSURLConnection alloc] initWithRequest: [NSURLRequest requestWithURL: [NSURL URLWithString:@"blablabla"]] delegate:self]; self.imageConnection = conn; [conn release]; } #pragma mark - #pragma mark Download support (NSURLConnectionDelegate) - (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data { [self.activeDownload appendData:data]; } - (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error { NSLog(@"ERROR DOWNLOADING"); // Clear the activeDownload property to allow later attempts self.activeDownload = nil; // Release the connection now that it's finished self.imageConnection = nil; } - (void)connectionDidFinishLoading:(NSURLConnection *)connection { NSLog(@"FINISH DOWNLOAD"); UIImage *image = [[UIImage alloc] initWithData:self.activeDownload]; self.activeDownload = nil; self.imageConnection = nil; //do whatever you want with your image [image release]; }
