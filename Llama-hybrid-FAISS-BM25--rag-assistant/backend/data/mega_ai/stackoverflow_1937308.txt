[site]: stackoverflow
[post_id]: 1937308
[parent_id]: 1937301
[tags]: 
You can't - period. You cannot use anonymous types outside their own scope, e.g. you cannot return them as return values from a method. If you need to return them, you need to define a new concrete class instead of the anonymous type, and use that in the place of the anonymous type. See Rick Strahl's blog post on the scoping of anonymous types, and see the MSDN docs here which clearly state: An anonymous type has method scope. To pass an anonymous type, or a collection that contains anonymous types, outside a method boundary, you must first cast the type to object. However, this defeats the strong typing of the anonymous type. If you must store your query results or pass them outside the method boundary, consider using an ordinary named struct or class instead of an anonymous type. OK, sure - there are dirty awful hacks to indeed return anonymous types. But if Microsoft's MSDN AND Jon Skeet discourage that practice, then - just don't do it . By definition and intention, anonymous types are bound to the method they're defined in. UPDATE for chobo2: I don't know what your datatypes are - just guessing - but assuming "prefix" is an int and "marks" is a decimal, you could define a new class: public class ReturnValue { int prefix { get; set; } decimal Marks { get; set; } } and then your code would be a method that returns a List : public List thisIsAtest() { DbContext.Table.Where(u => u.Table.UserId == userId && u.OutOFF != 0) .GroupBy(u => new { u.Table.Prefix }) .Select(group => new ReturnValue { prefix = group.Key, Marks = group .Sum(item => (item.Mark * item.Weight) / item.OutOFF) }) .ToList(); } The key here is: in your .Select method, instead of creating a new instance of an anonymous type: .Select(group => new { prefix = group.Key, marks = .... } you create an instance of a concrete type: .Select(group => new ReturnValue { prefix = group.Key, marks = .... } This way, you'll have a concrete class ReturnValue - name that anything you like - and then you can easily return a list of that type, and use that type elsewhere, too.
