[site]: stackoverflow
[post_id]: 3590891
[parent_id]: 2724045
[tags]: 
I suggest taking a dump of the process when the exception occurs. In the same place where you are logging the exception call the MakeDumpFile() method as below. This assumes you have Debugging Tools For Windows installed on the problematic machine. private static void MakeDumpFile() { int pid = Process.GetCurrentProcess().Id; Console.WriteLine("Creating dump for pid " + pid); //path to adplus executable; ensure you have Debugging tools installed; string program = @"C:\Program Files (x86)\Debugging Tools for Windows (x86)\adplus.exe"; //args for adplus; ensure the crashdump folder exists! string args = string.Format(@"-hang -p {0} -o c:\crashdump", pid); var startInfo = new ProcessStartInfo(program, args); startInfo.UseShellExecute = false; startInfo.ErrorDialog = false; startInfo.CreateNoWindow = true; startInfo.RedirectStandardOutput = true; var process = Process.Start(startInfo); Console.WriteLine("The following is output from adplus"); Console.WriteLine(process.StandardOutput.ReadToEnd()); Console.WriteLine("Finished creating dump."); } Navigate to the dump dir and you should see a new folder with a file in it named FULLDUMP_something_.dmp. If you are on .NET4 you can simply drag this into VS2010 and check out all the threads or use parallel threads to see what is going on (this is awesome!) If on NET3.5 or earlier you will need to use windbg to analyse. Use the following command ~*e !clrstack to print the callstack of all managed threads. If you need more help getting windbg going post back or google for a tutorial.
