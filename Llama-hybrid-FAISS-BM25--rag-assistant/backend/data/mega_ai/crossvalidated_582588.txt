[site]: crossvalidated
[post_id]: 582588
[parent_id]: 582055
[tags]: 
Use the temperatures to sort your data (from low to high temperatures). Then, run a test for structural breaks (e.g. cusum, or Bai-Perron) on the random numbers (as if they were a time series). If the software you use to run the structural break tests asks you to frame your model as a regression model, then make it a regression of the random numbers on a constant only. Under the null hypothesis that temperatures have no effect, which you want to test, the sorting has no impact on the distribution of the test statistic. Therefore any test for structural breaks provides valid inferences. Both cusum and Bai-Perron (mentioned above) detect the breakpoint (in your case the temperature threshold) automatically, so that you do not have to pick it with a separate optimization (that would affect the distribution of the test statistic). Here is the R code for breakpoint detection with the Bai and Perron method (apologies, I am not very familiar with R). In this example, the breakpoint is detected almost perfectly by the algorithm. n_obs temperature_threshold) { random_numbers[j] $random_numbers ~ 1, 0.01, 1) estimated_threshold temperatures[results$breakpoints] print(paste0("Threshold estimated with Bai and Perron's method: ", estimated_threshold)) And here is the code for testing the null hypothesis of absence of breakpoints: f_statistics = Fstats(df $random_numbers ~ 1, 0.01) test_H0_no_breakpoints = sctest(f_statistics, "supF") print(paste0("P-value for the null hypothesis of no breakpoints: ", test_H0_no_breakpoints$ p.value)) P.S.: the idea of using methods for breakpoint detection in time series to tackle non-linearities in non-time-series data is not new. It goes back at least to West, M. and J. Harrison (1997), Bayesian forecasting and dynamic models, Second Edition, Springer Verlag, New York.
