[site]: stackoverflow
[post_id]: 4245248
[parent_id]: 4243831
[tags]: 
Again using recursion a tested solution, though probably not the most elegant code. (note it returns the number of each coin to use rather than repeating the actual coin ammount n times). public class CoinPerm { @Test public void QuickTest() throws Exception { int ammount = 15; int coins[] = {1,6,7}; ArrayList solutionList = SolvePerms(ammount, coins); for (solution sol : solutionList) { System.out.println(sol); } assertTrue("Wrong number of solutions " + solutionList.size(),solutionList.size() == 6); } public ArrayList SolvePerms(int ammount, int coins[]) throws Exception { ArrayList solutionList = new ArrayList (); ArrayList emptyList = new ArrayList (); solution CurrentSolution = new solution(emptyList); GetPerms(ammount, coins, CurrentSolution, solutionList); return solutionList; } private void GetPerms(int ammount, int coins[], solution CurrentSolution, ArrayList mSolutions) throws Exception { int currentCoin = coins[0]; if (currentCoin mNumberOfCoins; solution(ArrayList anumberOfCoins) { mNumberOfCoins = anumberOfCoins; } @Override public String toString() { if (mNumberOfCoins != null && mNumberOfCoins.size() > 0) { String retval = mNumberOfCoins.get(0).toString(); for (int i = 1; i ) mNumberOfCoins.clone()); } public void add(int i) { mNumberOfCoins.add(i); } } }
