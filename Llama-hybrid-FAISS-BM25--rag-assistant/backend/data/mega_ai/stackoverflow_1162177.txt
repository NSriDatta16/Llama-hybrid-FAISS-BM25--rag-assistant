[site]: stackoverflow
[post_id]: 1162177
[parent_id]: 1158396
[tags]: 
Lua is totally optimized for exactly this sort of embedding. A good starting point is Roberto Ierusalimschy's book Programming in Lua ; you can get the previous edition free online . How does your script know about the properties of your C object? Imagine for a moment your object is defined like this: typedef struct my_object *Object; Object some_object; What does your C code know about the properties of that object? Almost nothing, that's what. All you can do is Pass around pointers to an object, put them in data structures, etc. Call functions that actually know what's inside a struct my_object . Lua gets access to C objects in exactly the same way: indirectly through functions: You make API calls to put a pointer to the object on Lua's stack, from which it can go into Lua data structures, variables, or anywhere else in the Lua universe. You define functions that know about the object's internals, and you export those functions to Lua. There is a lot of stuff in the "auxiliary library" to help you. Don't overlook it! All of this is explained with crystal clarity in the third part of Roberto's book, which includes examples. One fine point is You have the choice of allocating the memory yourself ("light userdata") or having Lua allocate the memory. It's generally better to have Lua allocate the memory because it can then free the object automatically when it's no longer needed, and you can also associated a Lua metatable , which allows you (among other tricks) to allow the object to participate in standard Lua operations like looking up fields, not just function calls. A final note: althought it's possible to use SWIG or toLua or other tools to try to generate code to connect C and Lua, I urge you to write the code yourself, by hand. It's actually quite easy to to, and it's the only way to understand what's really going on.
