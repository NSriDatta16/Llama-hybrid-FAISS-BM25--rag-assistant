[site]: stackoverflow
[post_id]: 1262494
[parent_id]: 262238
[tags]: 
In addition to the size and performance considerations of setting the size of a varchar (and possibly more important, as storage and processing get cheaper every second), the disadvantage of using varchar(255) "just because" is reduced data integrity . Defining maximum limits for strings is a good thing to do to prevent longer than expected strings from entering the RDBMS and causing buffer overruns or exceptions/errors later when retrieving and parsing values from the database that are longer (more bytes) than expected. For example, if you have a field that accepts two-character strings for country abbreviations then you have no conceivable reason to expect your users (in this context, programmers) to input full country names. Since you don't want them to enter "Antigua and Barbuda" (AG) or "Heard Island and McDonald Islands" (HM), you don't allow it at the database layer. Also, it is likely some programmers have not yet RTFMed the design documentation ( which surely exists ) to know not to do this. Set the field to accept two characters and let the RDBMS deal with it (either gracefully by truncating or ungracefully by rejecting their SQL with an error). Examples of real data that has no reason to exceed a certain length: Canadian Postal Codes are of the format A1A1A1 and are always 6 characters in length, even for Santa Claus (6 characters excludes the space that can be specified for legibility). email addresses - up to 64 bytes before the @, up to 255 bytes after. Never more, lest you break the Internet. North American Phone Numbers are never more than 10 digits (excluding the country code). Computers running (recent versions of) Windows cannot have computer names longer than 63 bytes , though more than 15 is not recommended and will break your Windows NT server farm. State abbreviations are 2 characters (like the country codes exampled above) UPS tracking numbers are either 18-, 12-, 11-, or 9-characters long. The 18-character numbers start with "1Z" and the 11-character numbers start with "T" which makes you wonder how they deliver all those packages if they don't know the difference between letters and numbers. And so on... Take the time to think about your data and its limits. If you're a architect, developer, or programmer, it's your job , after all. By using a varchar(n) instead of varchar(255) you eliminate the problem where users (end-users, programmers, other programs) enter unexpectedly long data that will come back to haunt your code later. And I didn't say you shouldn't also implement this restriction in the business logic code used by your application.
