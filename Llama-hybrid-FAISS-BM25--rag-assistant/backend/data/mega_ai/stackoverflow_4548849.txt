[site]: stackoverflow
[post_id]: 4548849
[parent_id]: 4548757
[tags]: 
First off, 3 Billion is an upper bound. Most likely you'll have a lot fewer real world combinations. That said... The number one thing here is to have good indexes. The second thing is to have enough ram in the server (and cpu power) to handle the types of queries you might be doing. So, what are your queries going to be like? My guess is that your products are going to be grouped / classified in some way. If this is an ordering system then this means queries at that level will probably only return maybe a few hundred products at a time. After product selection, you'll load things like associated parts for the selected product(s). Again, this will result in less than 50 records returned per product. Quite small. The amount of data for finish types aren't that great either. Even if this is just a reference system the amount of data being utilized in any one query isn't that great. So really what we're left with is just physical storage and RAM. The physical storage will have to be large enough to store the data. Probably on the order of a 1GB or so; which is still pretty small. For RAM you'll want enough to let SQL server keep the relevant tables in memory. If the physical size is about right then I'd say a 8GB system is just fine with maybe a quad processor depending on load. They're cheap, so have two. You mention 500 users, but what are the work load types of those users? Are they all on constantly at the same time? How often are they querying the server? How much data do they need at once? These questions will lead you to figuring out the actual number of queries per second (and the type) that the DB hardware will need to support. As a side note, your calculations are way off. As an example, you shouldn't multiply the total number of finish options by the total number of products/parts. I seriously doubt that there exists any part with 2000 paint color choices. A better way of calculating this out is going to be to see what the MEAN number of finish options a part has times the MEAN number of parts a given product has. Then you'll have a closer idea to the number of possible combinations. But that's just a useless data point as this number really has little meaning given the potential queries anyway...
