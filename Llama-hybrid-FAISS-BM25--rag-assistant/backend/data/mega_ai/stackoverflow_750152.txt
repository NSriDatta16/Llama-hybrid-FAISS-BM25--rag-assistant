[site]: stackoverflow
[post_id]: 750152
[parent_id]: 750064
[tags]: 
I'm currently a software engineering consultant. Familiarity with the following list of things helped me get an interview and an offer right out of college. Note: HTML, XHTML, CSS... these are just markup languages, and chances are they'll barely be glanced at if you put them on a resume. Flash (not so much) and Java are more impressive, but you might want to look into the following additional topics/technologies to really spice up that resume: Get comfortable with OO (Object-Oriented) principles (inheritance, polymorphism, abstract vs concrete classes, encapsulation, etc.) Java is a great open-source beginner programming language. I'm primarily a .NET developer so I tend to favor that, but I started with Java in my college days and picked up on it very quickly .NET 2.0, 3.5 -- C# and VB.NET (LINQ, lambda expressions, anonymous methods, etc.) -- You can start with the Express edition of Visual Studio, but may eventually want to get the full version Move on to higher level programming concepts such as Design Patterns (MVC/MVP, Command, Facade, Adapter, the list goes on and on) -- I'd recommend the Gang of Four book (Google will tell you which book it is) Database Management Systems Learn SQL, be comfortable JOINing, using GROUP BY and HAVING clauses, and familiarize yourself with aggregate functions Tackle DB design concepts (relational modeling especially) Start with the free ones, like MySQL or PostgreSQL, then... Focus on Microsoft SQL Server or Oracle (these are the big cats) Go deeper with things like Normal Forms, data warehousing (OLAP, MOLAP, ROLAP, cubes, etc.) Testing: look into unit testing and test-driven development Software quality assurance - defect prevention techniques, etc. (this goes along with some of the points mentioned below) Look into methodologies like Waterfall, Agile, and XP (eXtreme programming), perhaps even PSP and TSP Learn to use Source/version control systems such as CVS, SVN, and VSS (Microsofts, unfortunately not free -- the first two are) You could get really crazy and learn about static code analysis, but definitely look into code reviews and code inspections EDIT: I thought I'd give you some books to check out (no particular order): Introduction to Algorithms, 2nd ed. Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein, 2002. Artificial Intelligence: Structures and Strategies for Complex Problem Solving, 5th edition. George F. Luger, 2005. A First Book of Visual C++. Gary J. Bronson, 2000. An Introduction to Object-Oriented Programming with Java, 3rd edition (Java 1.5) update. C. Thomas Wu, 2004. Mathematical Structures for Computer Science, 5th edition. Judith L. Gersting, 2003. Mastering the Requirements Process, 2nd edition. Suzanne Robertson and James Robertson, 2006. Data Management: Databases and Organizations, 5th edition. Richard T. Watson, 2006. Software Quality Engineering: Testing, Quality Insurance, and Quantifiable Improvement, 1st edition. Jeff Tian, 2005. Artificial Intelligence: A Modern Approach, 2nd edition. Stuart Russell and Peter Norvig, 2003. Software Architecture in Practice, 2nd edition. Len Bass, Paul Clements, and Rick Kazman, 2003. Unit Testing in Java: How Tests Drive the Code, 1st edition. Johannes Link and Peter Frohlich, 2003. Practical PostgreSQL, 1st edition. John C. Worsley and Joshua D. Drake, 2002. PSP: A Self-Improvement Process for Software Engineers, 1st edition. Watts S. Humphrey, 2005. TSPi: Introduction to the Team Software Process, 1st edition. Watts S. Humphrey, 2000. I guess that's all I have for now. If you can get these things down, your skill set should be pretty solid, and you'll be on your way towards being another member of the software engineering world. I'm not sure that anything you do on your own will give you the same level of knowledge as college courses, but I'm sure this is a good start. This is a hefty list; don't be surprised if obtaining these skills takes a couple of years. As far as your graphic design skills, depending on the type of job you find yourself in, they may be more important than your programming skills. On top of either skill sets, make sure your soft skills are polished and that you are confident in your work.
