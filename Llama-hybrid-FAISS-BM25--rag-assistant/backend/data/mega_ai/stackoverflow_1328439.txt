[site]: stackoverflow
[post_id]: 1328439
[parent_id]: 1328143
[tags]: 
1. How should we proceed with work? If the team is new to configuration management, your short term goal should be to let them work in a controlled manner with MINIMAL interference to their work. This means you need to split your personal configuration goals into short and long term goals. Be prepared to redefine you long term goals as the team learns! 2. Right now our environment, is not organized as it should be. A good configuration manager will always think this. The last thing you want to do is to give the perception that you prefer process over "real work" so keep moving and think evolution here, not revolution. Just like software, defining team process needs a "plan" and good communication. 3. I am also trying to get Trac working for our group. Good move. Initially, TRAC will allow your developers to see what is going on. But, it also has tickets, milestones, revision, priorities and a heap of other confusing tools that might baffle your developers. So, at first, use trac as a view of the svn timeline and a convenient diffing tool. Introduce tickets/milestones etc when they are comfortable with the toolset itself, and be prepared to never use these if they don't get/need it. 4. What should we do each person work on there own branch? Merge the changes back to the trunk when they are done? Eventually, maybe. But have you defined the problem that brancing/merging will solve for you? Remember, your team may not ever hit these kind of problems. My recommendation here is to wait until you face a problem and then solve it as a team under your guidance. 5. Or allow them to work off the Trunk and hopefully Teamcity would catch bad stuff? At first, yes. Then introduce all the good stuff you know about CM when you have problems, not before. Remember - You're building a software product, not a great configuration management system. So, keep it simple, and only use tools/processes that let you build a better product as a team. You've obviously learned the value of configuration management along the way, so let your developers learn too. Guide them, don't force process on them. Start with the obvious stuff ("SVN lets us share the code in a controlled way") and go from there using your experience. Good luck!
