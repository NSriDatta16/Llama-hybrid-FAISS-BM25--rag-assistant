[site]: crossvalidated
[post_id]: 631266
[parent_id]: 
[tags]: 
How to calculate weighted mean when your sample is unweighted, but you know your population

Lets say I have the following sample data. person_id gender age_group cluster buys sells gender_age 0 1 F Y 1 8 4.5 F_Y 1 2 F O 2 12 4.8 F_O 2 3 F O 3 10 5.1 F_O 3 4 F O 1 13 5.5 F_O 4 5 M Y 2 14 3.8 M_Y 5 6 M Y 3 7 5.2 M_Y 6 7 M Y 2 5 5.8 M_Y 7 8 M O 1 16 4.7 M_O 8 9 M Y 2 12 4.5 M_Y where M denotes Male , F denotes Female , Y denotes Young and O denotes Old . I also have the population gender-age_group distribution which is the following gender age_group percentage 0 F O 0.16 1 F Y 0.18 2 M O 0.16 3 M Y 0.50 which means that in my population I have 0.16 + 0.18 = 34% Females , 18% Young Females , 50% Old Males etc. I would like to calculate the weighted buys and sells , for each of the gender-age_group splits. I have thought of 2 ways: Calculate the average e.g. buys for each gender-age_group split, for the Old Females that would be (12+10+13) / 3 = 11.6667 and then multiply this with the respective factor ( percentage ) from my population table, which for the Old Females would be 0.16 . So the end weighted_buys for the Old Females would be 11.6667 * 0.16 For each person_id in my sample data, obtain a post-stratification weight using iterative raking by using e.g. weightipy or quantipy , I would end up with something like this person_id gender age_group cluster buys sells gender_age weights 0 1 F Y 1 8 4.5 F_Y 1.620 1 2 F O 2 12 4.8 F_O 0.480 2 3 F O 3 10 5.1 F_O 0.480 3 4 F O 1 13 5.5 F_O 0.480 4 5 M Y 2 14 3.8 M_Y 1.125 5 6 M Y 3 7 5.2 M_Y 1.125 6 7 M Y 2 5 5.8 M_Y 1.125 7 8 M O 1 16 4.7 M_O 1.440 8 9 M Y 2 12 4.5 M_Y 1.125 and then for the Old Females the weighted_buys would be (12*0.480+10*0.480+13*0.480) / (0.480+0.480+0.480) Which way is the correct one ?
