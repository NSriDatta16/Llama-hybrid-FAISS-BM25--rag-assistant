[site]: crossvalidated
[post_id]: 412172
[parent_id]: 
[tags]: 
Multi-armed bandit epsilon greedy

This is the code from a lecture from the Artificial Intelligence Reinforcement Learning in Python course on Udemy to implement the multi-armed bandit epsilon greedy. m is the true mean and mean is the estimated mean. I don't understand why in the pull function we need to add the new random number to the true mean. We know the real parameters, so there is no need to solve the problem. import numpy as np import matplotlib.pyplot as plt class Bandit: def __init__(self, m): self.m = m self.mean = 0 self.N = 0 def pull(self): return np.random.randn() + self.m def update(self, x): self.N += 1 self.mean = (1 - 1.0/self.N)*self.mean + 1.0/self.N*x def run_experiment(m1, m2, m3, eps, N): bandits = [Bandit(m1), Bandit(m2), Bandit(m3)] data = np.empty(N) for i in range(N): # epsilon greedy p = np.random.random() if p
