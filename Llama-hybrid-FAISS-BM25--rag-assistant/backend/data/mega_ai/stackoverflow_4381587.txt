[site]: stackoverflow
[post_id]: 4381587
[parent_id]: 4354214
[tags]: 
Read Test Driven Development: By Example for a thorough explanation. A summary is: You don't write all of your tests before you write your code; you write one test, run it to be sure it fails (if it passes before you write the code, you have a bad test), then code enough to make it run. Now you know you have that functionality written and tested. At this point you refactor (if there is any refactoring to do), then move on to write the next test. The advantage is that by adding small pieces of functionality with tests, you end up with both a full suite of tests and a slim, well-organized design. The claim is that this design will be better than what you probably would have written had you not used test-first design (and there is some evidence to back this up).
