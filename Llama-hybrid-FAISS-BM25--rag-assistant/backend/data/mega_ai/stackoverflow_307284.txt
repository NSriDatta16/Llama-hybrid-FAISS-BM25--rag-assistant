[site]: stackoverflow
[post_id]: 307284
[parent_id]: 307232
[tags]: 
I use interfaces and casting to control the mutability of beans. I don't see a good reason to complicate my domain objects with methods like getImmutableInstance() and getMutableInstance() . Why not just make use of inheritance and abstraction? e.g. public interface User{ long getId(); String getName(); int getAge(); } public interface MutableUser extends User{ void setName(String name); void setAge(int age); } Here's what the client of the code will be doing: public void validateUser(User user){ if(user.getName() == null) ... } public void updateUserAge(MutableUser user, int age){ user.setAge(age); } Does it answer your question? yc
