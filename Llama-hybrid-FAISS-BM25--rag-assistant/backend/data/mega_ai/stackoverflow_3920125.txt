[site]: stackoverflow
[post_id]: 3920125
[parent_id]: 3789621
[tags]: 
The best compromise (yes I said compromise) between features, documentation, and community, is Yii. I will give you a simple exercise wich I think is representative of the general experience you will have with each respective framework: try to implement htmlpurifyer in Yii, kohana, etc. (I wanted to implement it for real, not as an exerise, but I think the experience is representative). With google I found a topic on the yii forum about htmlpurifyer. I also found one in the kohana forum. At first glance no big difference, but once you actually try to implement and use it, aaaa, big difference. In yii it is all served up on a silver platter, including htmlpurifier configurations . In kohana , there is a module on github for it, but it is missing configurations for htmlpurifier, and missing examples of how you actually purify a variable - try figuring that one out on your own. In codeigniter, you will probably have to do everything from scratch. Kohana has cleaner coding style / architecture, but the lack of documewntation is crippling (this could be solved if you arent shy about using their forum... EVERY DAY - THIS IS NOT A JOKE). You will make fast progress for a while in your develpopment with kohana and be really impressed an pleased with it, and then hit a deadspot in the documentation (including google), and all the time you gained untill now, and all thew joy will be tripply lost on the issue you hit because of the lack of documentation. This problem will never go away in my opinion (unfortunately), because alot of the contributions from the community to Kohana (modules and stuff) are made in github style, with the only documentation being a short introduction (at best). In order for this problem to go away, the devs would have to encourage somehow the contributors to up their documentation standard. But this isnt going to happen because the devs themselves use the same style of contribution to kohana (github projects with sparse documentation). So even if tthey fix the main documentation, and make it 100% bulletproof, there will still be the comunity contributions which will have bad docs, or you will have to create the whole module from scratch yourself.
