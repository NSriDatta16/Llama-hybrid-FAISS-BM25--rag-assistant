[site]: stackoverflow
[post_id]: 1192251
[parent_id]: 1192147
[tags]: 
As you have already figured out, the core component of such games is the match simulation engine. As Spence said so , you want that simulation to "look right" rather than to "be right". I worked on a rugby game simulation some time ago and there's an approach that works quite well. Your match is a finite state machine. Each game phase is a state, has an outcome which translates to a phase transition or changes in game state (score, replacements, ...). Add in a event/listener system to handle things that are not strictly related to the structure of the game you're simulating and you have a good structure (everytime something happens in your simulation, a foul for instance, fire an event; the listeners can be a comment-generation system or an AI responsible for teams' strategies). You can start with a rough simulation engine that handles things at a team level using an average of your players' stats and then move on to something more detailed that's simulating things at a player level. I think that kind of iterative approach suits a game simulation very well because you want it to look right, and as soon as an element looks right you can stop iterating on it and work on another part of your system. Random is of course part of the game because as you said so, you don't want games to be too predictable. A very simple thing to do is to have virtual dice rolls against a player and team statistics when they are performing a particular action (throwing the ball for instance). Edit: I make the assumption that we're talking about management games like Hattrick , where you're managing a roster and simulating game results rather than 2D/3D graphical simulations.
