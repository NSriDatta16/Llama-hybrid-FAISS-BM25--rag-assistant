[site]: crossvalidated
[post_id]: 6384
[parent_id]: 6380
[tags]: 
You've already got an answer as to how to use more than one core, but the real problem is with the way you have written your loops. Never extend your result vector/object at each iteration of a loop . If you do this, you force R to copy your result vector/object and extend it which all takes time. Instead, preallocate enough storage space before you start the loop and fill in as you go along. Here is an example: set.seed(1) p1 Or you can do these things via apply() : system.time({ p1max2 But note that this is no faster than doing the loop properly and sometimes slower. However, always be on the lookout for vectorised code. You can do row sums and means using rowSums() and rowMeans() which are quicker than either the loop or apply versions: system.time({ p1max3 If I were a betting man, I would have money on the third approach I mention beating foreach() or the other multi-core options in a speed test on your matrix because they would have to speed things up considerably to justify the overhead incurred in setting up the separate processes that are farmed out the the different CPU cores. Update: Following the comment from @shabbychef is it faster to do the sums once and reuse in the computation of the mean? system.time({ p1max4 Not in this test run, but this is far from exhaustive...
