[site]: stackoverflow
[post_id]: 5322787
[parent_id]: 5321779
[tags]: 
you're on the right track with using StyleSheet.LoadTagStyle() . basically it's a four step process: get the HTML in a string instantiate a StyleSheet object and call StyleSheet.LoadTagStyle() for each style you want. call HTMLWorker.ParseToList() add the IElement (s) returned from above call to the Document object. here's a simple HTTP handler : using System; using System.Collections.Generic; using System.IO; using System.Text; using System.Web; using iTextSharp.text.html; using iTextSharp.text.html.simpleparser; using iTextSharp.text; using iTextSharp.text.pdf; public class styles : IHttpHandler { public void ProcessRequest (HttpContext context) { HttpResponse Response = context.Response; Response.ContentType = "application/pdf"; string Html = @" h1 A paragraph one two three "; StyleSheet styles = new StyleSheet(); styles.LoadTagStyle(HtmlTags.H1, HtmlTags.FONTSIZE, "16"); styles.LoadTagStyle(HtmlTags.P, HtmlTags.FONTSIZE, "10"); styles.LoadTagStyle(HtmlTags.P, HtmlTags.COLOR, "#ff0000"); styles.LoadTagStyle(HtmlTags.UL, HtmlTags.INDENT, "10"); styles.LoadTagStyle(HtmlTags.LI, HtmlTags.LEADING, "16"); using (Document document = new Document()) { PdfWriter.GetInstance(document, Response.OutputStream); document.Open(); List objects = HTMLWorker.ParseToList( new StringReader(Html), styles ); foreach (IElement element in objects) { document.Add(element); } } } public bool IsReusable { get { return false; } } } you need version 5.0.6 to run the code above. support for parsing HTML has been greatly improved. if you want to see what tags are supported by the current version, see the SVN for the HtmlTags class .
