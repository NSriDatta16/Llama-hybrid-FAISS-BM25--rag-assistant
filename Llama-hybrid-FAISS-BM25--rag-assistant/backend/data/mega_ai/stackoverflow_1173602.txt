[site]: stackoverflow
[post_id]: 1173602
[parent_id]: 1173487
[tags]: 
It's not clear what it is that you find unclear, so let's discuss it all: The enum values have been given explicit numerical values. Each enum value is always represented as a numerical value for the underlying storage, but if you want to be sure what that numerical value is you have to specify it. The numbers are written in hexadecimal notation, this is often used when you want the numerical values to contain a single set bit for masking. It's easier to see that the value has only one bit set when it's written as 0x8000 than when it's written as 32768. In your example it's not as obvious as you have only two values, but for bit filtering each value represents a single bit so that each value is twice as large as the previous: public enum Filter { First = 0x0001, Second = 0x0002, Third = 0x0004, Fourth = 0x0008 } You can use such an enum to filter out single bits in a value: If ((num & Filter.First) != 0 && (num & Filter.Third) != 0) { Console.WriteLine("First and third bits are set."); }
