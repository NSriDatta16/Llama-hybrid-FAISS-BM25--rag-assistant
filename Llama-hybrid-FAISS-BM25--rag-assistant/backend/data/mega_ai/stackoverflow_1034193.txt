[site]: stackoverflow
[post_id]: 1034193
[parent_id]: 1033552
[tags]: 
In my view, there are two approaches to learning functional programming: Use a more pure functional language like Scheme (a Lisp) or Haskell that will force you to break out of a procedural mindset right away; or Use a pragmatic functional language like F# that also offers more familiar, but less functional, constructs to help you ease your way into it. In either case, you'll get more out of the learning experience if you can do something useful with the language. It sounds like you have motivation for Lisp (Emacs) and F# (.NET interop), so I would be take a look at both and see what captures your attention. Ultimately there's more value in understanding functional programming concepts (higher order functions, no side effects, tail recursion, etc) than any one language. And once you learn those concepts, it will be much easier to pick up new languages and apply the techniques in other languages (like the increasingly functional C#). Along those lines, you might be interested in Functional Programming for the Real World .
