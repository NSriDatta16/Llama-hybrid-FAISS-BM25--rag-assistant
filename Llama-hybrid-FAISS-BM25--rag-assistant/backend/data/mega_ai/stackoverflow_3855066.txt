[site]: stackoverflow
[post_id]: 3855066
[parent_id]: 3852877
[tags]: 
First off, about not activating the leftTimer if the rightTouch is not released. You could set up two Global Touches. So, if [touch locationInView:self.view] position blah is > 250 globalRightTouch = touch. Same for left. THen when you hit the right side - you assign the touch to the global Right, and the ship starts to move right -- then you touch the left side simultaneously -- so another touches began thing starts - so you assign it to the globalLeftTouch. Then you can go something like: if(!globalRightTouch){start leftTimer) and vise versa. In your touhcesEnded function - you are telling the leftTimer to kill if it is not null on touches end - so even if you have your left touch down still -- you are telling both timers to kill on any touch release. You just need to be a little more specific with your touches ended. Then in your touches ended code you need to go something along the following: UITouch *touch = [[event allTouches] anyObject]; if (rightTimer != nil && touch == globalRightTouch){ //Kill the timer that goes right upon touch removal [rightTimer invalidate]; rightTimer = nil; if(globalLeftTouch) leftTimerStartFunction //I dont know what your variables are sorry } if (leftTimer != nil && touch == globalLeftTouch){ //Kill the timer that goes left on touch removal [leftTimer invalidate]; leftTimer = nil; if(globalRightTouch){ rightTimerStartFunction //I dont know what you variables are sorry } } } so essentially you want to say - If I let go of a touch - check which one it is and kill the timer for that touch if it is not null and if there is another touch currently on the screen - start the timer for that side. Hope this helps, Cheers, Michael
