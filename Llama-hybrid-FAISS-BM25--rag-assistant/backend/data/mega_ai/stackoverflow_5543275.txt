[site]: stackoverflow
[post_id]: 5543275
[parent_id]: 5543146
[tags]: 
A branch always costs virtually nothing to create inside the same repo (technically speaking it depends on what you put in the branch, but I'm sure that was clear to begin with). When cloning the repo, you could end up with twice the storage requirements (both for the packs and for the working tree). However, this could lead you to believe that cloning repositories is necessarily a suboptimal thing. Let me tell you why that isn't always true/ A repo is actually just a collection of branch refs. A branch actually (as in deep-copying) takes as much as a repo, except for the blobs in commits unique for a specific branch. (Usually not much difference there). Locally, you can clone a repo at virtually no extra cost because it can be hardlinked (within the same filesystem, that is). Also the cost incurred by having another working tree can be avoided by cloning into a bare repo (e.g. by using git clone --mirror ). WITHIN A PROJECT In my opinion, a repo corresponds to a 'player' in distributed workflow. Players can be 'natural persons' or 'role proxies'. I have central repo (with web connectivity so I can work from anywhere pushing and pulling) work repo (one per workstation; with the ephemeral and temp branches that are associated with ProofOfConcept-ing, merging, micro-committing etc.) a backup repo [ perhaps a github clone for pull-requests if the upstream devs are on github ] In practice only 3-4 types of branches are shared across all repo's (master, maint, testing, unstable). OUTSIDE A PROJECT Of course, a project wil have it's own repo (most of the time). I am starting to lean towards using submodules because it seems more flexible than heterogenous branches (i.e. different projects in separate branches of the same repo) One big boon of having a single repo is that it will be very smooth to switch it's associated working tree from one branch to another. To be fair this difference can be worked arounnd in two directions: you can switch your working tree to a branch from another repository by adding it as a remote you can have a separate (even bare) repo work with a 'non-local' working tree by overriding the GIT_WORKTREE environment variables You see, when you look at it this way, a repo starts to be a collection of branches, with a more or less convential association to a single working tree. The conventions are where the real differences emerge: you usually use repo's to manage sets of branches and different working tree.
