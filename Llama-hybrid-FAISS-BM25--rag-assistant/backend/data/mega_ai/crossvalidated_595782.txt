[site]: crossvalidated
[post_id]: 595782
[parent_id]: 595768
[tags]: 
model.summary() yields nan in some of the trend variables: ... initial_trend nan b.0 False damping_trend nan phi False ... So it looks like there is a trend-related problem. Looking at your call model = ExponentialSmoothing(..) etc. shows that one of the parameters is nan , specifically damping_trend . Your code contains a comment that this should be None since damped_trend is set , but precisely when we want to use a dampened trend, we need to specify by how much we dampen, so this parameter needs to be between 0 and 1. If we set damping_trend=0.5 and then refit model = ExponentialSmoothing(..) etc. and re-forecast, we get non- nan forecasts: model.forecast(60) Out[24]: 2021-07-31 8807.417748 2021-08-31 6355.072201 2021-09-30 6120.073955 2021-10-31 6465.294132 2021-11-30 6351.564278 2021-12-31 6265.477816 2022-01-31 6742.345887 Incidentally, I just fed your data into R, which has much better facilities for time series forecasting with the forecast and the fable package. Applying ets() to your training data suggests a model with multiplicative error, no trend and no seasonality. Plotting your data reveals that there is a huge change in variability just at the end of the training data, indicated by a red vertical line in the plot below. Something fundamentally changed the data generating process at this time. I would be very careful about fitting a model to the initial period and applying it to the whole dataset for forecasting. Likely enough, the best forecast would be the historical average of the data after about April or June 2020, with very wide prediction intervals. R code: train_data
