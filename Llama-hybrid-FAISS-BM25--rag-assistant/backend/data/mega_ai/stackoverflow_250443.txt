[site]: stackoverflow
[post_id]: 250443
[parent_id]: 249500
[tags]: 
Is it possible to do a completely different approach - using templates and meta-programming techniques? If you're not constrained to not using templates, this could provide an elegant solution. Only ImprovedShape and ImprovedSquare change: template class ImprovedShape : public ShapePolicy { public: virtual double GetArea(); ImprovedShape(void); virtual ~ImprovedShape(void); protected: ShapePolicy shape; //... }; and the ImprovedSquare becomes: class ImprovedSquare : public ImprovedShape { public: ImprovedSquare(void); ~ImprovedSquare(void); // ... }; You'll avoid the diamond inheritance, getting both the inheritance from your original Shape (through the policy class) as well as the added functionality you want.
