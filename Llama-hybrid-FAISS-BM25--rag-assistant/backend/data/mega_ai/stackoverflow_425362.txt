[site]: stackoverflow
[post_id]: 425362
[parent_id]: 
[tags]: 
LINQ to XML updates - how does it handle multiple concurrent readers/writers?

I have an old system that uses XML for it's data storage. I'm going to be using the data for another mini-project and wanted to use LINQ to XML for querying/updating the data; but there's 2 scenarios that I'm not sure whether I need to handle myself or not: 1- If I have something similar to the following code, and 2 people happen to hit the Save() at the same time? Does LINQ to XML wait until the file is available again before saving, or will it just throw? I don't want to put locks in unless I need to :) // I assume the next line doesn't lock the file XElement doc = XElement.Load("Books.xml"); XElement newBook = new XElement("Book", new XAttribute("publisher", "My Publisher"), new XElement("author", "Me"))); doc.Add(newBook); // What happens if two people try this at the same time? doc.Save("Books.xml"); 2- If I Load() a document, add a entry under a particular node, and then hit Save(); what happens if another user has already added a value under that node (since I hit my Load()) or even worse, deleted the node? Obviously I can workaround these issues, but I couldn't find any documentation that could tell me whether I have to or not, and the first one at least would be a bit of a pig to test reliably.
