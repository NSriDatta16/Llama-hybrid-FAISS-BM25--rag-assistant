[site]: stackoverflow
[post_id]: 2770202
[parent_id]: 2770075
[tags]: 
Here's a fast algorithm in psedudocode. assert keys, input are sorted pos = beginning of keys for i in input pos = keys.find(pos, i) # find() starts search at position pos if not_found(pos) then return false ++pos return true This algorithm, assuming the keys and the input are sorted to begin with, performs in O(n+m), n and m being the count of keys and input. I'll leave it for you to translate that to Ruby, but pay close attention to the find() function; it must start its search at the position found in the previous iteration, not at the start of keys. Otherwise you're down to O(n^2+m), n the count of keys.
