[site]: stackoverflow
[post_id]: 1787496
[parent_id]: 1787474
[tags]: 
1) Loop unrolling. You save a jump, comparison, and increment every iteration if you don't actually loop. 2) Avoid double-indirection. It's usually faster to perform arithmetic that retrieval, so a[y*height + x] is usually faster than a[y][x]. Plus a one-dimensional array of size MxN saves M (or N) words worth of pointers compared to a rectangular matrix of dimensions MxN. 3) Use ridiculous assembly optimizations whenever possible. For instance, on the x86 architecture, you can use the BSWAP instruction to swap bytes in one operation instead of the normal temp=a; a=b; b=temp; pattern. And of course, don't forget: 4) Don't do bounds checking or error handling. That having been said, I'd avoid all of these except (2) in practice.
