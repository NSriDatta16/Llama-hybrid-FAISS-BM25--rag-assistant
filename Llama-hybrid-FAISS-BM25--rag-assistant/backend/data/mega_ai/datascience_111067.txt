[site]: datascience
[post_id]: 111067
[parent_id]: 110745
[tags]: 
I suggest that you implement a model of your physical device on top of an automatic differentiation package, like Tensorflow or Pytorch. This would be similar to how a neural network would be implemented, but instead of using generic computational blocks like convolutional layers, you would directly implement your transfer function. This very same thing is done in the article Deep learning with transfer functions: new applications in system identification ( code here ), aiming at system identification. If you are able to implement it with differentiable operators, then you can just fit the unknown parameters to the data from the real device. You can also incorporate into your model stochastic elements (e.g. adding Gaussian noise to specific parts) to allow for the non-idealities of the physical system that you mentioned.
