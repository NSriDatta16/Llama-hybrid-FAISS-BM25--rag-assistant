[site]: stackoverflow
[post_id]: 1404005
[parent_id]: 1403927
[tags]: 
The primary key is a logical concept in relational database theory - it's a key (and typically also an index) which is designed to uniquely identify any of your rows. Therefore it must be unique and it cannot be NULL. The clustering key is a storage-physical concept of SQL Server specifically. It's a special index that isn't just used for lookups etc., but also defines the physical structure of your data in your table. In a printed phonebook in Western European culture (except maybe for Iceland ), the clustered index would be "LastName, FirstName". Since the clustering index defines your physical data layout, you can only ever have one of those (or none - not recommended, though). Requirements for a clustering key are: must be unique (if not, SQL Server will add a 4-byte "uniqueifier") should be stable (never changing) should be as small as possible (INT is best) should be ever-increasing (think: IDENTITY) SQL Server makes your primary key the clustering key by default - but you can change that if you need to. Also, mind you: the columns that make up the clustering key will be added to each and every entry of each and every non-clustered index on your table - so you want to keep your clustering key as small as possible. This is because the clustering key will be used to do the "bookmark lookup" - if you found an entry in a non-clustered index (e.g. a person by their social security number) and now you need to grab the entire row of data to get more details, you need to do a lookup, and for this, the clustering key is used. There's a great debate about what makes a good or useful clustering and/or primary key - here's a few excellent blog posts to read about this: all of Kimberly Tripp's Indexing blog posts are a must-read GUIDs as primary key and/or clustering key The Clustered index debate continues.... Marc
