[site]: stackoverflow
[post_id]: 3560981
[parent_id]: 3560921
[tags]: 
There's no reason that I can think of to manually call Dispose() , other than in another implementation of Dispose() (for example in a class you've created that implements IDisposable ) when you can wrap an object in a using block. The using block puts the creation and disposal of the object in a try/catch/finally block to pretty much gaurantee that the object will be disposed of correctly. The compiler is more reliable than me. Or you. =) MSDN documents the using statement and calls out where you can obtain the C# language specification where you can review section 8.13 "The using statement" (at least in the v4.0 reference it's 8.13) that gives a comprehensive explanation of the using statement and how to use it. The fifth paragraph gives the following: A using statement is translated into three parts: acquisition, usage, and disposal. Usage of the resource is implicitly enclosed in a try statement that includes a finally clause. This finally clause disposes of the resource. If a null resource is acquired, then no call to Dispose is made, and no exception is thrown.
