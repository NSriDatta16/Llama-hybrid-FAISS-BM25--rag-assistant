[site]: stackoverflow
[post_id]: 3442329
[parent_id]: 3441940
[tags]: 
I've been trying to optimize on that one for years. My best solution so far goes like this: don't use a root block, the layout will implement the root layout don't expect the user to understand the difference between and and therefor treat everything as a simple break as it is less confusing and more ms-word-like only allow expected elements This would be the init code . remove_linebreaks : false, force_br_newlines : true, force_p_newlines : false, convert_newlines_to_brs : false, forced_root_block : false valid_elements: "h1,h2,h3,br,b,a,i,u,strong/b,em/i,u/span,strike/span,span,span[style],"+ "sub,sup,a[href|name|anchor|target|title],ul,ol,li,p,object[classid|width|height|codebase|*],"+ "param[name|value|_value],embed[type|width|height|src|*],"+ "img[style|longdesc|usemap|src|border|alt=|title|hspace|vspace|width|height|align]", And then I have the following post-process function to remove all and convert all to this has been the most stable copy-paste solution I've been able to dev. This is the post-process function : setup : function(ed) { ed.onPostProcess.add(function(ed, o) { // Remove all paragraphs and replace with BR o.content = o.content.replace(/ ]+>| /g, ''); o.content = o.content.replace(/ /g, ' '); }); }, Do notice that all this is just Javascript filtering and the user will be able to pass all that non-desired code to the server in a snap. Even though this setup is probably intended for end-admin setups also use strip_tags on the server side as someone somewhere will probably be able to by-pass-it. Hope it helps!
