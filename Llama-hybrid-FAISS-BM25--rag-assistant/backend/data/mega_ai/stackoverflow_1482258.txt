[site]: stackoverflow
[post_id]: 1482258
[parent_id]: 1482117
[tags]: 
This is happening because you're adding a new batView each time a touch begins. One way to fix this is to add the batView once, such as in a superview's or a view controller's init method. If you only want the batView to appear when a touch occurs, you can start it hidden via: // during initialization batView.hidden = YES; Since you're always doing the same animation each time, you might as well set up your animation parameters at the same time, instead of repeating that same set up with each touch: // still during initialization NSArray* imageArray = /* set up your image array */; batView.animationImages = imageArray; batView.animationDuration = 0.7; Now, when a touch occurs, you can handle it by starting the animation: // Within touchesBegan: ... // Start the batView animation. batView.hidden = NO; if (![batView isAnimating]) [batView startAnimating]; // Hide the animation when it's done. [self performSelector:@selector(hideBat) withObject:nil afterDelay:0.71]; } // Later: - (void) hideBat { batView.hidden = YES; } You might want to do something different in hideBat if you don't always want it to disappear right after a single animation. For example, if you want to always repeat an animation until the user stops clicking, you could set up an NSTimer object to go off as soon as there has been no user touches for at least 0.7 seconds. Each time the user touches the screen again, you can reset this timer. Reference: UIImageView docs , which includes brief descriptions of the animation methods.
