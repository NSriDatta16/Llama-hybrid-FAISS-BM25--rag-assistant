[site]: stackoverflow
[post_id]: 2743513
[parent_id]: 2741593
[tags]: 
The problem really is not in TDD, nor Python. First of all, TDD does not give you a proof that when all your tests pass, your application is good. Imagine e.g. multiplyBy2() function, which can be tested with input 1,2,3 and output 2,4,8 and now imagine, you implemented multiplyBy2 as squaring. All your tests pass, you have 100% code coverage and your implementation is wrong. You have to understand, that TDD can only give you assurance, that once your test fails, something is wrong with your app, nothing more, nothing less. So as suggested in other answer, the problem is in that you do not have test that fails. If you had used some statically typed language, compiler would do that test for you and complain about using non-existent method. This does not mean you should use statically typed language, it just means you need to write more tests in dynamically typed language. If you are interested in enforcing correctness of the code, you should look at design by contract for ensuring correctness at least during runtime and formal specifications to have proofs for at least some algorithms, but this is I guess quite far from standard coding.
