[site]: stackoverflow
[post_id]: 4000465
[parent_id]: 4000141
[tags]: 
You can't create anything that's truly global in Python - that is, something that's magically available to any module no matter what. But it hardly matters once you understand how modules and importing work. Typically, you create classes and organize them into modules. Then you import them into whatever module needs them, which adds the class to the module's symbol table. So for instance, you might create a module called weapons.py , and create a WeaponBase class in it, and then Axe and Broadsword classes derived from WeaponsBase . Then, in any module that needed to use weapons, you'd put import weapons at the top of the file. Once you do this, weapons.Axe returns the Axe class, weapons.Broadsword returns the Broadsword class, and so on. You could also use: from weapons import Axe, Broadsword which adds Axe and Broadsword to the module's symbol table, allowing code to do pretty much exactly what you are saying you want it to do. You can also use from weapons import * but this generally is not a great idea for two reasons. First, it imports everything in the module whether you're going to use it or not - WeaponsBase , for instance. Second, you run into all kinds of confusing problems if there's a function in weapons that's got the same name as a function in the importing module. There are a lot of subtleties in the import system. You have to be careful to make sure that modules don't try to import each other, for instance. And eventually your project gets large enough that you don't want to put all of its modules in the same directory, and you'll have to learn about things like __init__.py . But you can worry about that down the road.
