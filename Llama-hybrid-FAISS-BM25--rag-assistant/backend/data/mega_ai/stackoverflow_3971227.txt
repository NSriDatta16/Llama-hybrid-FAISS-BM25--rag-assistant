[site]: stackoverflow
[post_id]: 3971227
[parent_id]: 3970763
[tags]: 
You should always have view models even if they are 1:1. There are practical reasons rather than database layer coupling which I'll focus on. The problem with domain, entity framework, nhibernate or linq 2 sql models as your view classes is you cannot handle contextual validation well. For example given a user class: When a person signs up on your site they get a User screen, you then: Validate Name Validate Email Validate Password Exists When an admin edits a user's name they get a User screen, you then: Validate Name Validate Email Now expose contextual validation via FluentValidation, DataAnnotations Attributes, or even custom IsValid() methods on business classes and validate just Name and Email changes. You can't. You need to represent different contexts as different view models because validation on those models changes depending on the screen representation. Previously in MVC 1 you could get around this by simple not posting fields you didn't want validated. In MVC 2 this has changed and now every part of a model gets validated, posted or not. Robert Harvey pointed out another good point. How does your user Entity Framework display a screen and validate double password matching?
