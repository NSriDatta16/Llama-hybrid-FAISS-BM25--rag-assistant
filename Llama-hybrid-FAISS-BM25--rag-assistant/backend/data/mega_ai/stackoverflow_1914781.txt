[site]: stackoverflow
[post_id]: 1914781
[parent_id]: 1907409
[tags]: 
If you really want to store primes as numbers and one of questions, stopping you is "prime numbers can not be broken down into factors", there are another thing: store it in list of modulus of any number ordered by sequence. Small example: 2831781 == 2*100^3 + 83*100^2 + 17*100^1 + 81*100^0 List is: 81, 17, 83, 2 In real application is useful to split by modulus of 2^32 (32-bits integers), specially if prime numbers in processing application stored as byte arrays. Storage in DB: create table PRIMES ( PRIME_ID NUMBER not null, PART_ORDER NUMBER(20) not null, PRIME_PART_VALUE NUMBER not null ); alter table PRIMES add constraint PRIMES_PK primary key (PRIME_ID, PART_ORDER) using index; insert for example above (1647 is for example only): insert into primes(PRIME_ID, PART_ORDER, PRIME_PART_VALUE) values (1647, 0, 81); insert into primes(PRIME_ID, PART_ORDER, PRIME_PART_VALUE) values (1647, 1, 17); insert into primes(PRIME_ID, PART_ORDER, PRIME_PART_VALUE) values (1647, 2, 83); insert into primes(PRIME_ID, PART_ORDER, PRIME_PART_VALUE) values (1647, 3, 82); prime_id value can be assigned from oracle sequence ... create sequence seq_primes start with 1 increment by 1; Get ID of next prime number to insert: select seq_primes.nextval from dual; select prime number content with specified id: select PART_ORDER, PRIME_PART_VALUE from primes where prime_id = 1647 order by part_order
