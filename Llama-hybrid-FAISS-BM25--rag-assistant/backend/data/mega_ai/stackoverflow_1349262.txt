[site]: stackoverflow
[post_id]: 1349262
[parent_id]: 1341507
[tags]: 
It can be a good idea, as part of a balanced approach to testing. The disadvantages that soru notes are valid, but these may or may not be a big deal, depending on the project. Execution Speed: GUI automation using an external tool is typically very slow. An embedded scripting engine, while not as fast as compile-time unit tests, will be much faster than GUI tests. Not reinventing the wheel: When creating GUI test frameworks, you often have to replicate application logic in the test code. With a scripting engine, you can simply call the code directly. Headless Execution: With GUI test automation, the agent you execute the test on will require a GUI desktop, which has certain limitations when attempting to farm out test jobs to other machines (need to be logged on interactively, screen not locked, etc...) When coding to the API with a scripting engine, this is not an issue. That having been said, one additional drawback to automated testing via an embedded scripting engine, is that it can be cumbersome to author the tests. The test author needs to know the application model, and the application model needs to support the scripting. Classes and methods need to be exposed to the scripting engine, and this support may be spotty, depending on the project, or part of the project you are trying to test. In my experience, this leads to digging through the source code to figure out what classes / methods need to be invoked in order to write the test (although, as a tester, digging through the source code ain't such a bad idea).
