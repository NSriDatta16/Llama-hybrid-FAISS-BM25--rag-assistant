[site]: stackoverflow
[post_id]: 1484061
[parent_id]: 1484021
[tags]: 
Depends. If you use bit fields, then you let the compiler worry about how to store the data (bitfields are pretty much completely implementation-defined), which means that: It might use more space than necessary, and Accessing each member will be done efficiently. The compiler will typically organize the layout of the struct so that the second assumption holds, at the cost of total size of the struct. The compiler will probably insert padding between each member, to ease access to each field. On the other hand, if you just store everything in a single unsigned long (or an array of chars), then it's up to you to implement efficient access, but you have a guarantee of the layout. It will take up a fixed size, and there will be no padding. And that means that copying the value around may get less expensive. And it'll be more portable (assuming you use a fixed-size int type instead of just unsigned int ).
