[site]: stackoverflow
[post_id]: 3876585
[parent_id]: 1345065
[tags]: 
The best solution is the one offered by Bill Karwin. I recently had to solve this in a relatively large resultset (1000 rows with 12 columns each needing this type of "show me last non-null value if this value is null on the current row") and using the update method with a top 1 select for the previous known value (or subquery with a top 1 ) ran super slow. I am using SQL 2005 and the syntax for a variable replacement is slightly different than mysql: UPDATE mytable SET @n = COALESCE(number, @n), number = COALESCE(number, @n) ORDER BY date The first set statement updates the value of the variable @n to the current row's value of 'number' if the 'number' is not null (COALESCE returns the first non-null argument you pass into it) The second set statement updates the actual column value for 'number' to itself (if not null) or the variable @n (which always contains the last non NULL value encountered). The beauty of this approach is that there are no additional resources expended on scanning the temporary table over and over again... The in-row update of @n takes care of tracking the last non-null value. I don't have enough rep to vote his answer up, but someone should. It's the most elegant and best performant.
