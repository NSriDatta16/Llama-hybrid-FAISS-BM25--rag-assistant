[site]: stackoverflow
[post_id]: 4123063
[parent_id]: 
[tags]: 
Arbitrary computation in Scheme macro

Scheme macros, at least the syntax-case variety, are said to allow arbitrary computation on the code to be transformed. However (both in the general case and in the specific case I'm currently looking at) this requires the computation to be specified in terms of recursive functions. When I try various variants of this, I get e.g. main.scm:32:71: compile: unbound identifier in module (in the transformer environment, which does not include the run-time definition) in: expand-vars (The implementation is Racket, if it matters.) The upshot seems to be that you can't define named functions until after macro processing. I suppose I could resort to the Y combinator, but I figure it's worth asking first whether there's a better approach?
