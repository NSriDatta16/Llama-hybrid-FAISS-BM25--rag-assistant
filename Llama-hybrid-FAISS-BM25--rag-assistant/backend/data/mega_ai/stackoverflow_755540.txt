[site]: stackoverflow
[post_id]: 755540
[parent_id]: 
[tags]: 
Enterprise, Systems and Application Architecture (Best Practice?)

I am currently tasked with creating a documented, consistent Architecture guide for software development. We have a lot of smart people doing the right things, but just not consistently and repeatably. We are using Microsoftâ€™s Application Architecture Guide 2.0 as a starting point. Hence coming up with an Application Architecture is fairly (I won't say easy) straight forward. Possibly because I have a couple of years experience as a developer so I have a pretty good understanding of this realm and there are also loads of examples and guidance. Since our organisation has a couple of applications that form 1 or more systems which we then install "at" clients... we thought it would make sense to create a System Architecture and an Enterprise Architecture as well. And this is where the problems start. There is no consistent guidance out there. If you search for "System Architecture Examples", the stuff that you get back is so different that I am wondering if there is a "Standard" way to do this. From my (Limited - clearly) understanding of it all, the System Architecture is an abstraction of 1 or more application architectures depicting how they work together to form a system. Furthermore, an Enterprise Architecture is a further abstraction showing how your system(s) fit into a organisations Enterprise and how it interacts with the Business processes, IT Strategy and how it Integrats into other systems in the enterprise. Do I have it completely wrong? Are there any standards out there (and where can I find them)? Should there be standards, or would a "good" System Architecture simply be any document in any format which is clearly and easily understandable and useful to its readers? What would the seasoned Architects think of that approach though? I don't want to simply list a set of SOA related patterns that may be useful... I'd like to make it a little more focused to what we do, which is the build financial solutions on a Service Orientated Architecture. Update: What about TOGAF(9) . Does anyone have experience with it at all and is it worth the effort of trying to understand it in detail.
