[site]: stackoverflow
[post_id]: 4727405
[parent_id]: 4385260
[tags]: 
You can create a generic 'hideKeyboard' method in which you can include all text fields that can be first responders. For example, -(void) hideKeyboard { [textFieldName resignFirstResponder]; [textFieldSurname resignFirstResponder]; for (UITextField * txtField in arrTextFields) { [txtField resignFirstResponder]; } } Then, at various sections in your class, depending on the functionality required, call; [self hideKeyBoard]; This simple method means you won't need to keep track of the individual item that 'has the focus' / first responder status. How to touch any part of the screen to make the keyboard go away To touch somewhere outside the UITableView and have the keyboard disappear, place an invisible button on top of the 'touch area' that you want to respond to. Then, simply call [self hideKeyboard] from the touch event for that invisible button. Using IB, drag a new rounded button onto your view, then size it to take up the full size of the screen. Next,drag the button up or down the controls list in the IB document window so that button is behind all text fields and buttons, but in front of anything else (like images etc.). Finally, change the type of the button to 'Custom' to make it invisible, but still respond to events. Now all you have to do is to connect the new button's 'touch up inside' event to trigger the 'hideKeyboard' method. Additionally, see this post for a brilliant solution to dismiss the keyboard when the above solution doesn't work : stackoverflow question 1823317
