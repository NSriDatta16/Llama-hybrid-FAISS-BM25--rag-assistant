[site]: stackoverflow
[post_id]: 814556
[parent_id]: 814476
[tags]: 
The biggest pain with LINQ is that (with database backends) you can't use it over a repository interface without it being a leaky abstraction . LINQ is fantastic within a layer (especially the DAL etc), but since different providers support different things, you can't rely on Expression > or IQueryable features working the same for different implementations. As examples, between LINQ-to-SQL and Entity Framework: EF doesn't support Single() EF will error if you Skip / Take / First without an explicit OrderBy EF doesn't support UDFs etc. The LINQ provider for ADO.NET Data Services supports different combinations. This makes mocking and other abstractions unsafe. But: for in-memory (LINQ-to-Objects), or in a single layer/implementation... fantastic. Some more thoughts here: Pragmatic LINQ .
