[site]: stackoverflow
[post_id]: 3988607
[parent_id]: 3987845
[tags]: 
Admittedly this answer is leveraging on other answers to this question, but I thought it would be helpful to make some of the suggestions more explicit. The class RequestReportsCalculatingStoredProcedure I would rename to RequestReports. The StoredProcedure portion to me seems to be an implementation detail that is nobody else's business. I am not sure what the word Calculating brings to the table so I removed that also. The enumeration RequestReportStoredProcedureType I would rename to ReportPlan as that seemed to fit the context best (ReportType is also a possibility). The additional wordiness was removed similar to the reasons the class that encompasses it was renamed. I left it inside the class as it seems to provide some context, and with the names shortened this seemed like a good idea. The suggestions to remove the algorithm parameter from the method calls since it can be derived from an already passed parameter seemed like a good one. Given these changes the code would then look like the following: switch((RequestReports.ReportPlan)Enum.Parse(typeof(RequestReports.ReportPlan), ihdType.Value)) { //REF:This can (but should it?) be refactored through strategy pattern case RequestReports.ReportPlan.WithEffects: Object reportPlan = RequestReports.ReportPlanWithEffects(requestNo); grvEconomicCriteria.DataSource = RequestReports.ReportsDataParser(reportPlan); break; case RequestReports.ReportPlan.WithEffectsForFacts: DateTime factDate; try { factDate = Convert.ToDateTime(ihdDate.Value); } catch(FormatException) { Object reportPlan2 = RequestReports.ReportPlanWithEffectsForFacts(requestNo, DateTime.MinValue); grvEconomicCriteria.DataSource = RequestReports.ReportsDataParser(reportPlan2); break; } Object reportPlan3 = RequestReports.ReportPlanWithEffectsForFacts(requestNo, factDate); grvEconomicCriteria.DataSource = RequestReports.ReportsDataParser(reportPlan3); break; default: break; }
