[site]: stackoverflow
[post_id]: 3148360
[parent_id]: 3148071
[tags]: 
How can I find out the last character from a string? Your technique with str[strlen(str) - 1] is fine. As pointed out, you should avoid repeated, unnecessary calls to strlen and store the results. I somehow think that, this is not the correct way because strlen has to iterate over the characters to get the length. So this operation will have a O(n) complexity. Repeated calls to strlen can be a bane of C programs. However, you should avoid premature optimization. If a profiler actually demonstrates a hotspot where strlen is expensive, then you can do something like this for your literal string case: const char test[] = "foo"; sizeof test // 4 Of course if you create 'test' on the stack, it incurs a little overhead (incrementing/decrementing stack pointer), but no linear time operation involved. Literal strings are generally not going to be so gigantic. For other cases like reading a large string from a file, you can store the length of the string in advance as but one example to avoid recomputing the length of the string. This can also be helpful as it'll tell you in advance how much memory to allocate for your character buffer. I have a string and need to append a char to it. How can i do that? strcat accepts only char*. If you have a char and cannot make a string out of it (char* c = "a"), then I believe you can use strncat (need verification on this): char ch = 'a'; strncat(str, &ch, 1); In the above code,delimiter is a local variable which gets destroyed after foo returned. Is it OK to append it to variable output? Yes: functions like strcat and strcpy make deep copies of the source string. They don't leave shallow pointers behind, so it's fine for the local data to be destroyed after these operations are performed. If I am concatenating two null terminated strings, will strcat append two null terminating characters to the resultant string? No, strcat will basically overwrite the null terminator on the dest string and write past it, then append a new null terminator when it's finished.
