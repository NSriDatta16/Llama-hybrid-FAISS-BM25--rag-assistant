[site]: stackoverflow
[post_id]: 2488945
[parent_id]: 2488273
[tags]: 
It looks you're not using a primary key on your campuscomplaint table, and using the various data fields as the identifier. Since you say the data's inserted fine, you have to look at how you're retrieving it: $userid = $_GET['userid']; $secname = $_GET['secname']; $subject = $_GET['subject']; $comment = $_GET['comment']; and then using these as your WHERE clause in the SQL query: $queryDetail = " SELECT * FROM campuscomplaint " . " WHERE subject = '" . $subject . "' AND comment = '" . $comment . "' "; For one, this is vulnerable to SQL injection, and any $subject or $comment that contains single quotes will break the query. You are not checking to see if the query succeeded by calling mysql_error() after the mysql_query() call. Also consider that you're retrieving these record "identifiers" from a GET query. These do have a limited length (different for various browsers). What if someone's comment is 10 kilobytes of data, but the browser will only send 1024 characters? Even if the database query succeeds, it will return no data because the comment fields will never match. Let's say that the query string is limited to 100 characters (just for example purposes). You generate a list of complaints that looks something like this: View complaint Now remember, our query string is limited to 32 characters, so when the user clicks on the link, this is what will be sent to the server: GET http://www.example.com/viewcomplaint.php?userid=7&secname=12&subject=This class sucks!!!&comment=Who hired this professor? He doesn't know a and you'll end up with the following "identifiers" $userid= 7; $secname = 12; $subject = "This class sucks!!!"; $comment = "Who hired this professor? He doesn't know a"; Notice how the $comment has been cut off. It will never match what is stored in the database, so your retrieval query will fail. Furthermore, notice that there is a single quote in it ( doesn't ). Inserting $comment into your query verbatim will now cause an SQL syntax error because of the imbalanced single-quote. Add an auto_incrementing primary key field to your campuscomplaint table, like this: ALTER TABLE campuscomplaint ADD id int unsigned not null auto_increment primary key; and then all your complains can be identified by a single number, and you can retrieve them like this: $id = (int)$_GET['id']; // force $id to be a number. better than just blindly using the value in a query $query = "SELECT * FROM campuscomplaint WHERE id = $id;"; $result = mysql_query($query); if (mysql_error()) { // did the query fail? Say why! die("MySQL query failed! Error cause: " . mysql_error()); } etc.... The use of a numeric identifier will easily keep your query string very short (unless the people registering complaints file so many you get up into numbers hundreds or thousands of digits long).
