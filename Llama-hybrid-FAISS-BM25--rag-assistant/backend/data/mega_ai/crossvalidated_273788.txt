[site]: crossvalidated
[post_id]: 273788
[parent_id]: 
[tags]: 
Generate "degrading" Markovian Time series?

Any idea of how to generate time series with degrading markovian property. It is easy to generate sequence with pure markovian property. Here is an example : dset = np.array(xrange(0,101,10)) np.random.shuffle(dset) list(dset) * 50 In this sequence it is guaranteed that a state depend only on the previous state i.e markovian. The question is how to generate sequence with say 90% guaranteed markovian property ? or 50% or 20% ? The idea is to be able to test my models with different "markovian" series and see how well it behaves and what is the critical threshold after which the model definitely need modification or replacement. .... looking for way to make it less markovian in a controlled measurable way ! if this is possible! Here is my thinking, lets examine the two sequences below : 1 2 3 4 5 1 2 3 4 5 1 1 2 3 4 5 1 1 2 3 4 5 The first one is markovian, because we can predict the next state based on the current state. The second one for the cases of 2,3,4 and 5 it is markovian, but for the case 1 we need to know two previous states i.e. non-markovian. I want to be able to generate sequences where I can provide parameter that specifies the percentage (probably) of the cases which are non-markovian. (Currently this is the lowest common approach i can think of, but probably there are more complex scenarios). The other way to think about is as way of testing let say Reinfocment learning. We know that it requires MDP i.e. markovian. How would you approach a test of RL by slithgly relaxing the MDP requirments, by generating worse and worse sequence to measure the degradation of algorithm or model performance.
