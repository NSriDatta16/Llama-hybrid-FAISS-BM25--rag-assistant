[site]: stackoverflow
[post_id]: 1952201
[parent_id]: 
[tags]: 
Display progress bar while doing some work in C#?

I want to display a progress bar while doing some work, but that would hang the UI and the progress bar won't update. I have a WinForm ProgressForm with a ProgressBar that will continue indefinitely in a marquee fashion. using(ProgressForm p = new ProgressForm(this)) { //Do Some Work } Now there are many ways to solve the issue, like using BeginInvoke , wait for the task to complete and call EndInvoke . Or using the BackgroundWorker or Threads . I am having some issues with the EndInvoke, though that's not the question. The question is which is the best and the simplest way you use to handle such situations, where you have to show the user that the program is working and not unresponsive, and how do you handle that with simplest code possible that is efficient and won't leak, and can update the GUI. Like BackgroundWorker needs to have multiple functions, declare member variables, etc. Also you need to then hold a reference to the ProgressBar Form and dispose of it. Edit : BackgroundWorker is not the answer because it may be that I don't get the progress notification, which means there would be no call to ProgressChanged as the DoWork is a single call to an external function, but I need to keep call the Application.DoEvents(); for the progress bar to keep rotating. The bounty is for the best code solution for this problem. I just need to call Application.DoEvents() so that the Marque progress bar will work, while the worker function works in the Main thread, and it doesn't return any progress notification. I never needed .NET magic code to report progress automatically, I just needed a better solution than : Action exec = DoSomethingLongAndNotReturnAnyNotification; IAsyncResult result = exec.BeginInvoke(path, parameters, null, null); while (!result.IsCompleted) { Application.DoEvents(); } exec.EndInvoke(result); that keeps the progress bar alive (means not freezing but refreshes the marque)
