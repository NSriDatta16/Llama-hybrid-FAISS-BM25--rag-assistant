[site]: stackoverflow
[post_id]: 1356356
[parent_id]: 1355877
[tags]: 
Depending on whether you can make Perform a template function or not, you can choose to pass the map by (const) reference: void Perform( const std::map (& map)[50] ) pass a pointer and a size (the C way) create a template that automatically deduces the size of the array This is a code fragment illustrating all three of them. #include // number 50 hard coded: bad practice! void Perform( const std::map (& maps ) [50] ) {} // C-style array passing: pointer and size void Perform( const std::map * p_maps, size_t numberofmaps ){} // 'modern' C++: deduce the map size from the argument. template void TPerform( const std::map (& maps)[N] ) {} int main() { std::map m [ 50 ]; Perform( m ); Perform( m, 50 ); TPerform( m ); }
