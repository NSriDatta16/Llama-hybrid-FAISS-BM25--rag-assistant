[site]: stackoverflow
[post_id]: 2548551
[parent_id]: 2542573
[tags]: 
I don't think the above answer heads in the right direction. To begin, Zend Framework is often called a 'component library', because it has many loosely coupled components that you can use more or less independently. Source: Zend Framework & MVC Introduction Assuming that standard use will include both the suggested MVC structure and zftool for project creation is a bad assumption because many projects hand-pick a subset of Zend components to minimize the now 45MB class footprint. Instead, lets look at a point Thomas hinted at in his answer above: Also, the library directory will usually contain a directory called 'Zend'. And now from Zend's Programmer's Reference Guide: Zend Framework standardizes on a class naming convention whereby the names of the classes directly map to the directories in which they are stored. The root level directory ... is the "Zend/" directory ... All Zend Framework classes are stored hierarchically under these root directories.. Class names may only contain alphanumeric characters. Numbers are permitted in class names but are discouraged in most cases. Underscores are only permitted in place of the path separator; the filename "Zend/Db/Table.php" must map to the class name "Zend_Db_Table". Important: Code that must be deployed alongside Zend Framework libraries but is not part of the standard or extras libraries (e.g. application code or libraries that are not distributed by Zend) must never start with "Zend_" or "ZendX_". Source: Naming Conventions A better suggestion would be to check for the root directory '/Zend', however this excludes any projects where the developer has decided to forgo the above suggestions and has thrown Zend class files into some global library directory. The best guess would be to recursively glob all the files in a project's directory looking for class names that match the suggested pseudo namespace (Zend_ ...).
