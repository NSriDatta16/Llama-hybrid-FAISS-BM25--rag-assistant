[site]: stackoverflow
[post_id]: 5028897
[parent_id]: 5028824
[tags]: 
If the required sub-matrices are known at the time the 'master' matrix is created, and if they form a partition of the master, it's possible to create a composite matrix class somewhat like this: // supposing an IMatrix interface (pure virtual members only) class template struct CompositeMatrix : public IMatrix { typedef std::vector *> tMatrices; tMatrices submatrices; T& element( size_t row, size_t column ) { return findsubmatrix( row, column )->element( row, column ); } // find algorithm implementing 'chain of responsibility-like' pattern. PlainMatrix * findsubmatrix( size_t row, size_t col ) { for( tMatrices::iterator it = submatrices.begin() ; it != submatrices.end() ; ++it) { if( it->contains( row,col ) ) return *it; } return NULL; } }; The 'PlainMatix' can be organized in a memory-efficient way.
