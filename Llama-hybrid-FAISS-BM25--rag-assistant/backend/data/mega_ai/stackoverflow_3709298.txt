[site]: stackoverflow
[post_id]: 3709298
[parent_id]: 
[tags]: 
Removing code duplication

I am trying to create a little functional programming library for Java (just to scratch my own itch). While defining the higher-order functions for List s, Set s and Map s I have come across this problem: The functions that take a collection, and return a collection of same type have almost the same implementation, and yet have to be redefined for each of the data structure - List s, Set s, and Map s. For example, here is the implementation of map function for List s, and Set s: public static List map( List xs, Func1 transformer ) { List ys = new ArrayList (); for(A a : xs) { ys.add(transformer.apply(a)); } return ys; } public static Set map( Set xs, Func1 transformer ) { Set ys = new HashSet (); for(A a : xs) { ys.add(transformer.apply(a)); } return ys; } A filter function: public static List filter( List xs, Func1 predicate ) { List ys = new ArrayList (); for(A a : xs) { if(predicate.apply(a)) { ys.add(a); } } return ys; } public static Set filter( Set xs, Func1 predicate ) { Set ys = new HashSet (); for(A a : xs) { if(predicate.apply(a)) { ys.add(a); } } return ys; } As can be seen from this example, the bodies of the implementations for Set and List are almost the same. There are lot many functions like map and filter in my library, and each of those is defined thrice for each type of collections I am interested in (i.e. List , Set , and Map ). This leads to a lot of code duplication, and code smell. I wanted to know whether there's some way in Java that would help me avoid all the code duplication. Any help will be greatly appreciated. Thanks. EDIT: Func1 is an interface defined as: interface Func1 { public B apply(A a); }
