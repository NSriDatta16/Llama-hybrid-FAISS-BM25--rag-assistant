[site]: stackoverflow
[post_id]: 267418
[parent_id]: 
[tags]: 
Elegant template specialization

Is there an elegant way to specialize a template based on one of its template parameters? Ie. template struct Junk { static int foo() { // stuff return Junk ::foo(); } }; // compile error: template argument '(size * 5)' involves template parameter(s) template struct Junk { static int foo() { // stuff return N; } }; template<> struct Junk { static int foo() { // stuff return 0; } }; Ie. I am trying to specialize a template based on the parameter being divisible by 5. The only way I can seem to do it is like below: template struct JunkDivisibleBy5 { static int foo() { // stuff return N; } }; template struct Junk { static int foo() { // stuff if ((N - 1) % 5 == 0 && N != 1) return JunkDivisibleBy5 ::foo(); else return Junk ::foo(); } }; template<> struct Junk { static int foo() { // stuff return 0; } }; But this is significantly less elegant, and also necessitates instantiation of all templates even if the template argument shouldn't require it.
