[site]: stackoverflow
[post_id]: 4513139
[parent_id]: 4512135
[tags]: 
Public Class Form1 'This just shows some concepts of threading. 'it isn't intended to do anything 'requires a Button, and two Labels ' Private Sub Button1_Click(ByVal sender As System.Object, _ ByVal e As System.EventArgs) _ Handles Button1.Click 'starts / stops a test thread 'isRun = 0 no thread running, start one 'isRun = 1 thread running, stop it If Threading.Interlocked.Read(isRun) = 0L Then 'start thread Threading.Interlocked.Increment(isRun) t = New Threading.Thread(AddressOf showTime) 'simple threading app - display time about twice per second t.IsBackground = True 'from a background thread t.Start() Else 'stop thread Threading.Interlocked.Exchange(isRun, 0L) t.Join() 'wait for thread to end Threading.Monitor.Enter(listLock) intervalList.Clear() 'clear the list Threading.Monitor.Exit(listLock) Label1.Text = "Stop" Label2.Text = "" End If End Sub Dim t As Threading.Thread Dim intervalList As New List(Of Double) Dim listLock As New Object Dim isRun As Long = 0L Private Sub showTime() Dim dlgt As New UpdLblDel(AddressOf UpdateLabel) 'delegate for UI access Dim lastDateTime As DateTime = Nothing Do Dim d As DateTime = DateTime.Now If lastDateTime <> Nothing Then 'record difference of times - check sleep interval Threading.Monitor.Enter(listLock) intervalList.Add((d - lastDateTime).TotalMilliseconds) Threading.Monitor.Exit(listLock) End If lastDateTime = DateTime.Now dlgt.BeginInvoke(d, Nothing, Nothing) 'update the UI - note immediate return Threading.Thread.Sleep(500) 'sleep for approx. 500 ms. Loop While Threading.Interlocked.Read(isRun) = 1L End Sub Delegate Sub UpdLblDel(ByVal theTime As Object) Private Sub UpdateLabel(ByVal theTime As Object) If Threading.Interlocked.Read(isRun) = 1L Then If Label1.InvokeRequired Then 'prevent cross-thread errors Label1.BeginInvoke(New UpdLblDel(AddressOf UpdateLabel), theTime) Exit Sub Else Label1.Text = CType(theTime, DateTime).ToString("HH:mm:ss.f") 'show the time from the background thread End If If Threading.Interlocked.Read(intervalList.Count) >= 10L Then 'take average Threading.Monitor.Enter(listLock) Dim avg As Double = intervalList.Sum / intervalList.Count 'sum all of the intervals / count intervalList.Clear() 'clear the list intervalList.Add(avg) 'forward the average Label2.Text = avg.ToString("n2") 'show average Threading.Monitor.Exit(listLock) End If End If End Sub End Class
