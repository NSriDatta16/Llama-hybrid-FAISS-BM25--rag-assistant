[site]: stackoverflow
[post_id]: 8637
[parent_id]: 8472
[tags]: 
A method that I have developed and which seems to work perfectly (although I probably don't get as much comment spam as you), is to have a hidden field and fill it with a bogus value e.g.: I then have a piece of JavaScript which updates the value every second with the number of seconds the page has been loaded for: var antiSpam = function() { if (document.getElementById("antiSpam")) { a = document.getElementById("antiSpam"); if (isNaN(a.value) == true) { a.value = 0; } else { a.value = parseInt(a.value) + 1; } } setTimeout("antiSpam()", 1000); } antiSpam(); Then when the form is submitted, If the antispam value is still "lalalala", then I mark it as spam. If the antispam value is an integer, I check to see if it is above something like 10 (seconds). If it's below 10, I mark it as spam, if it's 10 or more, I let it through. If AntiSpam = A Integer If AntiSpam >= 10 Comment = Approved Else Comment = Spam Else Comment = Spam The theory being that: A spam bot will not support JavaScript and will submit what it sees If the bot does support JavaScript it will submit the form instantly The commenter has at least read some of the page before posting The downside to this method is that it requires JavaScript, and if you don't have JavaScript enabled, your comment will be marked as spam, however, I do review comments marked as spam, so this is not a problem. Response to comments @MrAnalogy: The server side approach sounds quite a good idea and is exactly the same as doing it in JavaScript. Good Call. @AviD: I'm aware that this method is prone to direct attacks as I've mentioned on my blog . However, it will defend against your average spam bot which blindly submits rubbish to any form it can find.
