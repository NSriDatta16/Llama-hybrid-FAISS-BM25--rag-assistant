[site]: datascience
[post_id]: 123170
[parent_id]: 123082
[tags]: 
Below there is a working example based on the approach I just described in my comment: # pip install transformers from sklearn.cluster import KMeans from transformers import BertTokenizer, BertModel import torch import numpy as np import pandas as pd from sklearn.decomposition import PCA import matplotlib.pyplot as plt plt.style.use("seaborn-whitegrid") # Example question and answers question = "What would you do during a picnic?" answers = [ "Eat burger", "Drink a beer", "Play football", "Play soccer", "Enjoy a root beer", "Swallow a steak", "Eat a salad", "Something else" ] # Load pre-trained BERT model and tokenizer tokenizer = BertTokenizer.from_pretrained('bert-base-uncased') model = BertModel.from_pretrained('bert-base-uncased') # Tokenize and generate embeddings for the question question_tokens = tokenizer(question, return_tensors='pt', padding='max_length', max_length=128, truncation=True) with torch.no_grad(): question_embedding = model(**question_tokens).last_hidden_state.mean(dim=1).numpy() # Tokenize and generate embeddings for answers and concatenate with question embedding answer_embeddings = [] for answer in answers: answer_tokens = tokenizer(answer, return_tensors='pt', padding='max_length', max_length=128, truncation=True) with torch.no_grad(): answer_embedding = model(**answer_tokens).last_hidden_state.mean(dim=1).numpy() joint_embedding = np.concatenate((question_embedding, answer_embedding), axis=1) answer_embeddings.append(joint_embedding) # Perform k-means clustering k = 3 # Number of clusters kmeans = KMeans(n_clusters=k) X = np.array(answer_embeddings).reshape(len(answers), -1) cluster_labels = kmeans.fit_predict(X) # Print clustering results for i, answer in enumerate(answers): print(f"Answer: {answer} | Cluster: {cluster_labels[i]}") df =pd.DataFrame(X, columns = [f"dim_{x}" for x in range(X.shape[1])]) pca= PCA(n_components=2).fit(df) X2D = pca.transform(df) colors =["red","blue","black"] for i, answer in enumerate(answers): plt.scatter(X2D[i][0], X2D[i][0], color=colors[cluster_labels[i]], label=f'Cluster {cluster_labels[i]}') plt.text(X2D[i][0] + i*.1, X2D[i][0] + i*.1, answer, fontsize=8, ha='right', va='bottom') plt.title(f"{question}"); Outputs: Hope it helps!
