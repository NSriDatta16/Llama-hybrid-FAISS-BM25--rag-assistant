[site]: stackoverflow
[post_id]: 5620357
[parent_id]: 5619462
[tags]: 
Contrary to popular belief, an int overflow results in undefined behavior. This means that once a + b overflows, it doesn't make sense to use this value (or do anything else, for that matter). The wrap-around is just what most machines happen to do in case of overflow, but they might as well explode. To check whether an int overflow will occur when adding two non-negative integers a and b , you can do the following: if (INT_MAX - b This is due to the fact that if a + b > INT_MAX , then INT_MAX - b , but INT_MAX - b can not overflow. You will have to pay special attention to the case where b is negative, which is left as an exercise for the reader ;) Regarding your actual goal: 1024-bit numbers suffer from exactly the same overall issues as 32-bit numbers. It might be more promising to choose a completely different approach, e.g. representing numbers as, say, linked lists of digits, using a very large base B. Usually, B is chosen such that B = sqrt(INT_MAX) , so multiplication of digits doesn't overflow the machine's int type. This way, you can represent arbitrarily large numbers, where "arbitrary" means "only limited by the amount of main memory available".
