[site]: crossvalidated
[post_id]: 239926
[parent_id]: 
[tags]: 
How to Implement a Neural Network for **Multidimensional** Input Classification?

I'm trying to build a neural network which can classify inputs with multiple dimensions. This is different from problems like image classification where the input is multidimensional, and the input matrix may be flattened and fed to the network. In this problem, each dimension of the input describes a different property. For example, let's say that the inputs to the network are Gaussian distributions where each input can be described using a (mean, variance) tuple. In contrast to image classification where all the elements of the matrix are intensities of the pixels, in these problems, each of the elements of the tuples describe a different dimension/property of the problem which is not related to the other. Can these properties be mixed/flattened and applied to a single neural network. Can neural networks solve problems like this? If yes, how? Another example: A solution to MNIST handwritten digits classification is to flatten the input image to a vector of 784 points and apply it to a neural network. Assume that the problem is slightly modified and instead of intensity of a pixel, its mean and variance are provided. The resulting flattened matrix will be a 2 x 784 matrix instead of a vector, but the output is still a single digit from 0 to 9. How can I apply this input matrix to a neural network while I know that each dimension is describing a different property?
