[site]: stackoverflow
[post_id]: 397897
[parent_id]: 397753
[tags]: 
So it may be impossible to give you a complete answer about "best practices" without knowing more about your domain, but I can tell you that you may be setting yourself up for disaster by thinking about the implementation details this early. If you're like me then you were taught that good OOD/OOP is meticulously detailed and involves BDUF . It wasn't until later in my career that I found out this is the reason so many projects become egregiously unmaintainable later on down the road. Assumptions are made about how the project might work, instead of allowing the design to emerge naturally from how the code is actually going to be used. Simply stated: You need to being doing BDD / TDD (Behavior/Test Driven Development). Start with a rough domain model sketched out, but avoid too much detail. Pick a functional area that you want to get started with. Preferably at the top of the model, or one the user will be interacting with. Brainstorm on expected functionality that the unit should have and make a list. Start the TDD cycle on that unit and then refactor aggressively as you go. What you will end up with is exactly what you do need, and nothing you don't (most of the time). You gain the added benefit of having full test coverage so you can refactor later on down the road without worrying about breaking stuff :) I know I haven't given you any code here, but that is because anything I give you will probably be wrong, and then you will be stuck with it. Only you know how the code is actually going to be used, and you should start by writing the code in that way. TDD focuses on how the code should look, and then you can fill in the implementation details as you go. A full explanation of this is beyond the scope of this post, but there are a myriad of resources available online as well as a number of books that are excellent resources for beginning the practice of TDD. These two guys should get you off to a good start. Martin Fowler Kent Beck
