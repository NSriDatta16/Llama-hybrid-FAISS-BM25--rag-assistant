[site]: stackoverflow
[post_id]: 3561481
[parent_id]: 
[tags]: 
Mocking, Unit Testing (NUnit) setup problem with HttpHandler

This post relates to two other posts, here and here . I'm new to Unit Testing & Mocking. I have a test fixture that is trying to mock a HttpContext object including the response and request. I think the test code is not setup properly, as after calling the handler I get an error immediately. There error I am getting is: UnitTests.UADHandlerFixture.Request_Is_Object: System.NullReferenceException : Object reference not set to an instance of an object. at Abstract.BaseHttpHandler.get_Request() in BaseHttpHandler.cs:line 21 at Abstract.BaseHttpHandler.get_IsRequestFromUAD() in BaseHttpHandler.cs:line 23 at Handlers.UADTimeHttpHandler.ProcessRequest(HttpContextBase context) in UADTimeHttpHandler.cs:line 19 at UnitTests.UADHandlerFixture.Request_Is_Object() in UADHttpHanderTests.cs:line 47 The test code is this: [TestFixture] public class UADHandlerFixture { private Mock _mockHttpContext; private Mock _mockHttpRequest; private Mock _mockHttpResponse; private UADTimeHttpHandler _handler; private WindsorContainer _container; [SetUp] public void Init() { _mockHttpRequest = new Mock (); _mockHttpResponse = new Mock (); _mockHttpContext = new Mock (); _container = new WindsorContainer(); _container.AddComponent (); _container.AddComponent (); _mockHttpContext.SetupGet(x => x.Application[0]).Returns(_container); _mockHttpContext.SetupGet(x => x.Request).Returns(_mockHttpRequest.Object); _mockHttpContext.SetupGet(x => x.Response).Returns(_mockHttpResponse.Object); _handler = new UADTimeHttpHandler(); } [Test] public void Request_Is_Object() { _handler.ProcessRequest(_mockHttpContext.Object); } } Handler: public class UADTimeHttpHandler : BaseHttpHandler { public override void ProcessRequest(HttpContextBase context) { if (IsRequestFromUAD) { Logger.Log("Log stuff"); DataRepository.Write("DB stuff"); ReturnResponse(HttpStatusCode.OK, DateTime.Now.ToString()); } else ReturnResponse(HttpStatusCode.BadRequest); } } BaseHandler: public abstract class BaseHttpHandler : IHttpHandler { private HttpContext _httpContext; private ILogger _logger; private IDataRepository _dataRepository; protected ILogger Logger { get { return _logger; } } protected IDataRepository DataRepository { get { return _dataRepository; } } protected HttpContext Context { get { return _httpContext; } } protected HttpRequest Request { get { return _httpContext.Request; } } protected HttpResponse Response { get { return _httpContext.Response; } } protected bool IsRequestFromUAD { get { return Request.UserAgent == null ? false : Request.UserAgent.Equals("UAD"); } } public virtual bool IsReusable { get { return false; } } public void ProcessRequest(HttpContext context) { WindsorContainer container = (WindsorContainer)context.Application[0]; _logger = container.Resolve (); _dataRepository = container.Resolve (); _httpContext = context; ProcessRequest(new HttpContextWrapper(context)); } protected virtual void ReturnResponse(HttpStatusCode httpStatus) { Response.StatusCode = (int)httpStatus; } protected virtual void ReturnResponse(HttpStatusCode httpStatus, string response) { Response.StatusCode = (int)httpStatus; Response.Write(response); } protected virtual string GetInputStream() { using (var reader = new StreamReader(Request.InputStream)) { return reader.ReadToEnd(); } } public abstract void ProcessRequest(HttpContextBase context); }
