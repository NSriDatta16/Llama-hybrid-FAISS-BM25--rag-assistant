[site]: stackoverflow
[post_id]: 3326625
[parent_id]: 3326599
[tags]: 
If you're storing a value type (int, float, double, etc - or any struct), ArrayList will cause boxing on every storage and unboxing on every element access. This can be a significant hit to performance. In addition, there is a complete lack of type safety with ArrayList. Since everything is stored as "object", there's an extra burden on you, as a developer, to keep it safe. In addition, if you want the behavior of storing objects, you can always use List . There is no disadvantage to this over ArrayList, and it has one large (IMO) advantage: It makes your intent (storing an untyped object) clear from the start. ArrayList really only exists, and should only be used, for .NET 1.1 code. There really is no reason to use it in .NET 2+.
