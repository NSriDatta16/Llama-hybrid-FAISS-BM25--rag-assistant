[site]: crossvalidated
[post_id]: 117609
[parent_id]: 
[tags]: 
How can I optimize coefficients of an arbitrary model?

This might be terribly easy but I'm probably lacking the keywords to search for. Assume the following (dummy) data: condition session assumed_score final_score 1 1 110 95 1 2 90 95 1 3 80 95 1 4 120 95 1 5 130 95 2 1 80 77 2 2 90 77 2 3 80 77 2 4 50 77 2 5 90 77 3 1 60 35 3 2 40 35 3 3 30 35 3 4 30 35 3 5 40 35 In each testing condition, there are people taking part in 5 (or more, or less) sessions. They perform a task in each session. After all sessions, they give a final score ( final_score ) to their tasks. This is the ground truth. But we also (based on some measure) have assumed scores for each of the individual test sessions ( assumed_score ), based on observation of the test participants. Now, I would like to be able—in the future—to predict the final score from the assumed scores. So, one "dumb" model would be to just average them: $$avg_i = \frac{1}{N} \sum assumed_{ni}$$ where $N$ is the number of sessions and $i$ is the condition. So now I have the averages, and I can build a simple linear model: $$final = \beta_0 + \beta_1 avg$$ I could do this in R like so, and get a model that should fit the assumed scores to the final scores with least squares: d = ddply(d, .(condition), transform, avg = mean(assumed_score)) lm(final_score ~ avg, data = d) This works, because there are no coefficients in the average. But what if I wanted a more complex model? Say I'd like to give more weight on the sessions that have a lower score. Then my model would be: $$final = \beta_0 + \left( \frac{1}{N} \sum_{n=1}^{N} assumed_n^{\beta} \right)^{\frac{1}{\beta}} $$ So here, I'd need to find an optimal parameter $\beta$ to fit my final scores against the assumed scores. But I have no idea how to do that with R.. I could try a fixed $\beta$, and then do: custom nice, this has lower R^2! But that's hardly a good option to find a good value of $\beta$ without trying it manually. How should I proceed?
