[site]: stackoverflow
[post_id]: 2993240
[parent_id]: 2919292
[tags]: 
I strongly disagree with many of the posters here - I think it IS the task of a good manager to care about the mind-set of your employees and to get them to embrace what you're - all together - trying to achieve as a team (or for the company). I'd go even further: if you "force" your software engineers to do as they are told because you have the means to do so (quoting "The tool is called work contract"), you will - at best - get avarage results. You need to motivate your people to get the best out of them (and real motivation is usually not fear of losing a job, but I guess that's old news ;-). I'm also managing a team of developers, and I usually aproach them on a "personal needs" basis - some guys need to talk a whole lot about new ideas, not necessarily in meetings which most developers do not like (I have more good exeriences concerning coffee-break or after-work beer talks than with official meeting), others need a simple short one-time talk, still other want you to "hold their hand" and simply be there for all the questions that arise during a change, and still others continue to be skeptical for a long time (you usually can get them with persistance, patience and some humor). Maybe my viewpoint is very European, but I (and my company) highly value employees who question the things they are told to do and not blindly follow the policies. So, to sum it up: the "tools" I use are mainly communication, and encouraging people to "let's try something new" (which usually works out if you react to the concerns arising) - it also helps to get the mayor players on your train first, because others with less strong opinion then usually tend to follow ("if our guru xy is doing that, it can't be such a bad idea"). Very important: just be there when people have doubts or questions, and hear them out & offer solutions (or really explain why you do not consider their point). Many things turn up only once you're on your way to changing something (e.g we're currently transitioning from the waterfall model to a scrum model that will fit our development structure), and don't be afraid to try things as long as you're able and willing to explain them.
