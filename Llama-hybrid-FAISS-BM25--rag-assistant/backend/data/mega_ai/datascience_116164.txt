[site]: datascience
[post_id]: 116164
[parent_id]: 
[tags]: 
How do I train an ML model that can rank pairs?

Consider that I have a dataset consisting of a list of pairs of the titles of blogposts of the form [(title_1_A, title_1_B), (title_2_A, title_2_B), ..., (title_n_A, title_n_B)] . For each pair, I have labeled data on which title had a higher clickthrough rate. In some cases, this would be the A variant, and in other cases, the B variant. So there is an associated list containing all the winning variants in sequence - so something like [A, A, B, A, ..., B, B, A] . I was wondering what modeling approaches I can use to train something to learn the winning variant, i.e. given a pair of the form (title_k_A, title_k_B) , it would be able to produce one of A or B, having seen all the other examples in the training data above. I am interested more in what models and approaches I can use, rather than how to featurize the titles themselves (for instance, I could use a tf-idf approach, or transformer-based embeddings, etc.). I am also don't believe that building a regression model by concatenating all of the titles title_k_x into a dataset and regressing on the click through rate would work since each title is on completely different topics and content. I am interested to solve the problem: given small variations on two titles that are closely related, which title will have a higher click through rate. One thought that come to mind: concatenate the embeddings of titleA and titleB, into a single vector (preserving that order) and then feeding it into an NN that has two output nodes of probabilities $(p, 1-p)$ where $p$ is the probability that A is the winning variant.
