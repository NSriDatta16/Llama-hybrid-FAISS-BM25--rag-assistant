[site]: stackoverflow
[post_id]: 3115803
[parent_id]: 3102758
[tags]: 
This is possible in LINQ to SQL if you create a (single) typed DataContext that contains table classes for objects in both databases. This designer won't help you here, so you have to create some of the table classes manually. In other words, use the VS designer to create a typed DataContext for your primary database, then manually add classes for the tables in the other database that you wish to access: [Table (Name = "OtherDatabase.dbo.lookup")] public class Lookup { ... } Edit: In LINQPad Premium edition, you can now do cross-database queries with SQL Server - in one of two ways. The simplest is the drag-and-drop approach: hold down the Ctrl key while dragging additional databases from the Schema Explorer to the query editor. To access those additional databases in your queries, use database.table notation, e.g., Northwind.Regions.Take(100). The databases that you query must reside on the same server. The second approach is to list the extra database(s) that you want to query in the connection properties dialog. This dialog also lets you choose databases from linked servers . Here's how to proceed: Add a new LINQ to SQL connection. Choose Specify New or Existing Database and choose the primary database that you want to query. Click the Include Additional Databases checkbox and pick the extra database(s) you want to include. You can also choose databases from linked servers in this dialog. You can now do cross-database queries. These are properly optimized insofar as joins will occur on the server rather than the client.
