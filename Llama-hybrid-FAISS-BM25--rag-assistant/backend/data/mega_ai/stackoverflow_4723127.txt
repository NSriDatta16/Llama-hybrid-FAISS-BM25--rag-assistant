[site]: stackoverflow
[post_id]: 4723127
[parent_id]: 4721054
[tags]: 
1a) My first question is what is the best way to write a query to find all the articles associated with a given tag? select ArtID -- if only IDs are required from ArticleTags where TagID=1 -- or use the text (where tagtitle='x') select A.* from ArticleTags T inner join Articles A on A.ArtID = T.ArtID where T.TagID=1 1b) In real life, I will need to find articles with multiple tags -- has tags 1,3 and 8 select T1.ArtID from ArticleTags T1 inner join ArticleTags T2 on T1.ArtID = T2.ArtID and T2.TagID = 3 inner join ArticleTags T3 on T1.ArtID = T3.ArtID and T3.TagID = 8 where T1.TagID=1 -- or use the text (tagtitle='x') on each filter In some cases, this form works faster. This or the preceeding one can be joined to get the article records. select ArtID from ( select T1.ArtID from ArticleTags T1 where T1.TagID=1 union all select T2.ArtID from ArticleTags T2 where T2.TagID=3 union all select T3.ArtID from ArticleTags T3 where T3.TagID=8 ) X group by ArtID having count(ArtID) = 3 1c) and it would be nice to also find articles that are NOT associated with a particular tag. select A.* from Articles A left join ArticleTags T on T.ArtID = A.ArtID and T.TagTitle = 'nomatch' where T.ArtID is null 2) My second question is about whether or not my Tags table should have an int PK? Does it make more sense to use the TagTitle as the primary key? I am firmly in the camp that says each table should have a sequential, meaningless integer ID. It reduces space of storage (FK from other tables) and int lookup / range merging is always faster than varchar.
