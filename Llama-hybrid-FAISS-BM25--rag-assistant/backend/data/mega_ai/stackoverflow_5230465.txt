[site]: stackoverflow
[post_id]: 5230465
[parent_id]: 5229736
[tags]: 
Strictly speaking: no. When you store black(i.e. color #000000), you cannot recover the previous contents. You can however store your data elsewhere, e.g. inside the meta-data, but I wonder what good that would do. I suspect you only want your image to look like black to the naked eye. That can be done at a cost (either in size, loss of information or visibility). There are some things you could do, just intuitively: Very lossy: just put all colors to a color very near to black, but according to the contents of your image, you just put a slightly brighter or darker black at positions where your image is brighter/darker. That way the image seems black, but you can recover some information (not an exact replica of the original, obviously). In this way I expect you to be able to store 1 or 2 bits per pixel per color (instead of 8 as in the original image) Just a small extension on the previous principle. If you want perfect reconstruction and allow for your image size to grow, that is possible. You just map 1 pixel in the original image to 4, 9, 16, ... pixels in the "black" image. E.g. if you choose 9 pixels, you store the first bit plane of the original image in the first set of pixels, second bit plane in the second set, ... (and the 9th set of pixels is just pitch black). You can of course devise some scheme to mix the pixels around, such that only looking at the bit planes of your almost black image will yield little visual clue. In reconstructing the image, you will have to reverse this. Obviously, these examples are just quick ways to do such a thing, anyone familiar with steganography will know these tricks (and of course better techniques) and might try them out to reverse them if they suspect something.
