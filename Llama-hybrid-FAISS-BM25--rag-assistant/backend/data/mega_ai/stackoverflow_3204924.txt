[site]: stackoverflow
[post_id]: 3204924
[parent_id]: 
[tags]: 
Numeric Representations Without Machine Primitives

Synopsis Post examples in any language of a type that represents integers without making direct use of machine integers. Include mappings to and from the user-defined type. Points for efficiency in space and/or time. Original Question In the comments of a certain rather bold answer to a question about object-oriented programming, I stated my belief that machine primitives are not objects, but was unable to really substantiate that claim, in the same way that the poster of that answer was unable to substantiate his claims about the universality and fundamental nature of object-oriented philosophy. So that got me to thinking. In C++, a language in which machine primitives do not participate in the class hierarchy, is it possible to define an object type—say, Integer —that does not make use of a machine primitive to store its value? There is this beautiful bit of template hackery that implements Church numerals. Unfortunately, since the conversions between whole numbers and Church numerals occurs strictly at compile time, there's no way to get around using machine integers for, say, user input. So what I'm looking for is a runtime equivalent of the above, though not necessarily using Church numerals, with reasonable space requirements, that can be implemented in a language such as C++ without higher-order functions. I'd like to see examples in other languages, as well, especially those that make use of fun dynamic typing tricks. Pointers and function pointers shall not count as primitives as long as the stored address is used strictly as such and not for its integral value. Bonus points for accommodating all integers (i.e., not just whole numbers), and super bonus points for devising a system in which floating-point numbers can also be implemented. To avoid any unpleasantness down the line, and to encourage polite discussion, I'm making this a community wiki question from the start.
