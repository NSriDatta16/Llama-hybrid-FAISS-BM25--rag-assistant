[site]: stackoverflow
[post_id]: 2041076
[parent_id]: 2040998
[tags]: 
Beware, you're doing it wrong multiple times. Even though you could use the global statement to change a global (it is discouraged since it's better to use function parameters and return values), that would NOT change other already assigned values. E.g. even though you reassign ID, you would NOT reassign project. Also: your functions return nothing, there's no point in assigning a name to their return value, and it's a BAD habit using an all-uppercase name (ID) for a variable since it's a convention to use them for constants. This should clarify you the way global works: myid = '' project = ("Yep"+myid) #ID added with no value which I later want to change def mutate_id(): global myid myid = "YES" def mutate_project(): global project project = ("YEP" + myid) if __name__ == '__main__': print "myid", myid print "project ", project print mutate_id() print "myid", myid print "project ", project print mutate_project() print "myid", myid print "project ", project print But the best way is to do WITHOUT globals: def get_new_id(old): return "YES" def get_new_project(old): return ("YEP" + myid) if __name__ == '__main__': myid = '' project = ("Yep"+myid) print "myid", myid print "project ", project print myid = get_new_id(myid) print "myid", myid print "project ", project print project = get_new_project(project) print "myid", myid print "project ", project print This will make all code interaction clear, and prevent issues related to global state change.
