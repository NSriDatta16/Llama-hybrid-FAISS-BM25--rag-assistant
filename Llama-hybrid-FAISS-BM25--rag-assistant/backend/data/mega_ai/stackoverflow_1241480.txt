[site]: stackoverflow
[post_id]: 1241480
[parent_id]: 1223546
[tags]: 
The solution I arrived at was this: Create a new ASP.NET web form (I called mine BinaryData.aspx) to serve as a placeholder for the PDF. In the code behind, the only method should be Page_Load, which looks like: protected void Page_Load(object sender, System.EventArgs e) { //Set the appropriate ContentType. Response.ContentType = "Application/pdf"; Response.AppendHeader("Pragma", "no-cache"); Response.AppendHeader("Cache-Control", "no-cache"); //Get the physical path to the file. string FilePath = (string)Session["fileLocation"]; if ( FilePath != null ) { string FileName = Path.GetFileName(FilePath); Response.AppendHeader("Content-Disposition", "attachment; filename="+FileName); //Write the file directly to the HTTP content output stream. Response.WriteFile(FilePath); Response.End(); } } The PDF is passed in to the page through the Session variable named "fileLocation". So, all I have to is set that variable, and then call Response.Redirect("BinaryData.aspx") . It doesn't automatically print, but it triggers the download of the PDF without leaving the current page (which is good enough for me).
