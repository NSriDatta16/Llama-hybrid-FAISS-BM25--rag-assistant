[site]: stackoverflow
[post_id]: 3029009
[parent_id]: 3028961
[tags]: 
In my opinion, the whole program is questionable. The choices of how things are divided into functions is kind of dopey, and it's documented like a class project, not like real system. The documentation kind of obscures the overall mediocre organization. The entire program shows a bias towards verbosity over clarity. The construct '''\ is frequently seen. The point of the triple quote construct is that carriage returns and newlines work just fine. There is no need to \ escape the newline. I will tackle functions I see specific problems in as examples: Whether or not get_message should exist in that form is debatable. The entire function can be replaced by one line. def get_message(): "Gets and returns text entered by the user (until EOF)." return sys.stdin.read() The way main , run_interface_loop , get_character and FUNC interact is confusing and not the best way to handle the problem. In particular, catching SystemExit isn't really a great way to signal your program's end in this case. def main(): encode_map, decode_map = load_key(KEY_FILE) run_interface_loop(encode_map, decode_map) save_key(KEY_FILE, encode_map) def run_interface_loop(): exit_picked = False while not exit_picked: print ''' MENU ==== (1) Encode (2) Decode (3) Custom (4) Finish''' choice = sys.stdin.readline() if choice == '': break # EOF was reached, no more asking the user for stuff choice = choice.strip() if choice == '1': encode(encode_map, decode_map) # This reads until EOF exit_picked = True # and so we might as well exit elif choice == '2': decode(encode_map, decode_map) exit_picked = True # Same here elif choice == '3': encode_map, decode_map = custom() elif choice == '4': exit_picked = True else: print "%s isn't a valid choice, try again." % (choice,)
