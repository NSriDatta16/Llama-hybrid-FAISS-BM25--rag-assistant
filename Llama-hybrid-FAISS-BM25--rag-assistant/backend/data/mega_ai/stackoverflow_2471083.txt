[site]: stackoverflow
[post_id]: 2471083
[parent_id]: 2470904
[tags]: 
Also, don't get too hung up on 100% test coverage. The goal is to fully test your application, not get perfect scores in Devel::Cover. See Ovid's posts on the subject: More on 100% Test Coverage 100% Test Coverage? In your case, it looks like you don't cover all the branches, so you don't get perfect scores. You need to tests that exercise both sides of that || . You're getting 33% percent coverage because you only handle one-third of the cases for that line. The HTML report from Devel::Cover shows you the truth table and which cases you are missing. The truth table shows you the possible states that you have to cover for the branching. A 1 shows you a condition which is true, 0 shows you a condition that is false, and X shows you a condition you won't reach. You have to test all combinations that can execute. Since the || is a short-circuit operator, you don't have to test conditions once one of them passes: 0 || 1 connect to database fails and croak succeeds 0 || 0 connect to database fails and croak fails (unlikely) 1 || X connect to database succeeds, so short circuit This is a bit unrelated to your particular problem, but I find it comes up often in these problems. Although Effective Perl Programming is a month of so away from hitting the shelves, Josh McAdams spent quite a bit of time talking about dependency injection in Perl. If you're having a tough time testing your code, you usually have a design problem. If you're internally generating database objects in subroutines, for instance, you are painting yourself into a corner. That's why it might be hard to test. This may not be the problem in your case, but it's something to think about.
