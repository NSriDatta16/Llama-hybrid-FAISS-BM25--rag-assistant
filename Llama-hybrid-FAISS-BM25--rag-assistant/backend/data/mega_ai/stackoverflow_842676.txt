[site]: stackoverflow
[post_id]: 842676
[parent_id]: 841792
[tags]: 
In mathematics y=f(x) always gives you the same value y for a given x . ALWAYS, it doesn't matter if there's a moon eclipse, or Saturn is not aligned with Mars. In mathematics, functions does not have side effects. That means that if you resolve function f(x) , and then resolve function g(x) , the first function does not have any influence on the second one at all. If g(2) is defined such that it will give you back a 4 , nothing in the world can make g(2) suddenly give you back an 8 , it's just not possible. The value of a function only depends on the values of it's parameters. But with typical programs, that rule is broken almost all the time; it's very common for many functions to have side effects. Imperative and Object Oriented languages strongly encourage that kind of programming. With pure functional languages, that kind of problems are easier to avoid. In a functional language a function has the same property of a mathematical function, called "referential transparency" , which means that you can replace a call to a function with it's know value, and the program will continue to compute correctly; if the value of a function with a given parameter is already known, it is not necessary that the function executes it's body since a function cannot have side effects. This is useful for proving the correctness of a function, and also very helpful for optimization. The following Wikipedia article may be of interest: Referential transparency (computer science)
