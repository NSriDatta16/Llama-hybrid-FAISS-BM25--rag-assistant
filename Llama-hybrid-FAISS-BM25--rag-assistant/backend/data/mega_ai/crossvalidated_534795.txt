[site]: crossvalidated
[post_id]: 534795
[parent_id]: 
[tags]: 
Understanding bidirectional LSTM in Keras for time series prediction

I am trying to implement a bidirectional LSTM in Keras. I have used a TimeSeries generator that takes 24 timesteps of a feature vector (from t0 to t23) and outputs a single prediction vector at timestep t24 (it doesn't return sequences). To predict timestep t25, timestep t1 to t24 are used, and so on. I originally trained a unidirectional LSTM and, to make it a biLSTM, I simply wrapped it in a Bidirectional layer. However, I don't understand what's actually happening under the hood. Is the network using data from timestep t0 until t23 for the forward pass, and t49 to t25 for the the backward pass? In this case, how would the model know to use timesteps t49 to t25, if all it sees is an input matrix of shape [n_timesteps = 24, n_features]? Or is it using t0 to t23 for the forward pass and t23 to t0 for the backward pass? In this case, how would the backward pass help, if it has not seen future timesteps? For reference, here is the code: from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator from tensorflow.keras.models import Sequential from tensorflow.keras.layers import LSTM, Dense, Bidirectional from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint import tensorflow_addons as tfa train_data_gen = TimeseriesGenerator(train_data, train_labels, length=24, sampling_rate=1, batch_size=1) val_data_gen = TimeseriesGenerator(val_data, val_labels, length=24, sampling_rate=1, batch_size=1) test_data_gen = TimeseriesGenerator(test_data, test_labels, length=24, sampling_rate=1, batch_size=1) model = Sequential() model.add(Bidirectional(LSTM(units = 10))) model.add(Dense(units = 182)) model.compile(optimizer='adam', loss = 'mean_squared_error', metrics = [tfa.metrics.RSquare(y_shape=(182,))]) # here I am leaving out the part where I define my callbacks, because it is not relevant to the thread history = model.fit(train_data_gen, epochs = 500, validation_data = val_data_gen, callbacks = callbacks) ```
