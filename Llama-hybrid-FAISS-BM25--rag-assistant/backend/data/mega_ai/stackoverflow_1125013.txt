[site]: stackoverflow
[post_id]: 1125013
[parent_id]: 1124979
[tags]: 
Such a wide topic, which does depend on what you want to optimise for. But the basics: indexes. A good indexing strategy is important, indexing the right columns that are frequently queried on/ordered by is important. However, the more indexes you add, the slower your INSERTs and UPDATEs will be so there is a trade-off. maintenance. Keep indexes defragged and statistics up to date optimised queries. Identify queries that are slow (using profiler/built-in information available from SQL 2005 onwards) and see if they could be written more efficiently (e.g. avoid CURSORs, used set-based operations where possible parameterisation/SPs. Use parameterised SQL to query the db instead of adhoc SQL with hardcoded search values. This will allow better execution plan caching and reuse. start with a normalised database schema, and then de-normalise if appropriate to improve performance 80,000 records is not much so I'll stop there (large dbs, with millions of data rows, I'd have suggested partitioning the data)
