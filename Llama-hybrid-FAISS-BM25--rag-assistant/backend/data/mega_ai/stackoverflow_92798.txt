[site]: stackoverflow
[post_id]: 92798
[parent_id]: 92638
[tags]: 
You can't make a service robust in this way - if the bank account is a single point of failure then when (not if) it fails, you lose. A bank account can't exist without a legal entity to own it, but that's just a detail here - other failures are that Amazon might pull SC2, or raise the price, or make an incompatible API change, or be bribed by your rival or ordered by a court to remove your app. Ross Anderson has published an initial description of the requirements for an "eternity service" for data storage. The broad principle is to distribute it across as many people as possible, and ensure that they all have solid incentives to keep the service running, and to keep specific data live. It has to be resilient against as many as possible participants dropping out, and against as many as possible participants "going rogue" and trying to subvert it. He only gives broad outlines in the paper I read, and a few specific techniques that might be useful, but that was over 10 years ago. You might find further research if you look. http://www.cl.cam.ac.uk/~rja14/eternity/eternity.html
