[site]: crossvalidated
[post_id]: 291021
[parent_id]: 
[tags]: 
many-to-many OR many-to-one for RNN t+1 prediction

When designing RNN's to predict the next time-step ahead, I've come across architectures where you train with say n timesteps as input and n timesteps as output (at t+1). input: (X(1), X(2)...X(n)) outputs: (X(2), X(3)...X(n+1)) . So you have a many-to-many architecture - e.g. here . I've also seen for the same kind of problems a many-to-one architecture: input: (X(1), X(2)...X(n)) output: (X(n+1)) . My question is, what are the advantages and disadvantages of each? Is one generally favoured? I'd presume that since when predicting you already have the timesteps 0 to n there's no benefit in predicting them and therefore no benefit in including them in your loss fn during training, but maybe it helps set the internal state of the RNN correctly?
