[site]: stackoverflow
[post_id]: 248951
[parent_id]: 247209
[tags]: 
Inspired by earlier posts I made a copy of Rakefile and vendor directories distributed with WysiHat (a RTE mentioned by changelog) and made a few modifications to include code-checking with JSLint and minification with YUI Compressor . The idea is to use Sprockets (from WysiHat) to merge multiple JavaScripts into one file, check syntax of the merged file with JSLint and minify it with YUI Compressor before distribution. Prerequisites Java Runtime ruby and rake gem You should know how to put a JAR into Classpath Now do Download Rhino and put the JAR ("js.jar") to your classpath Download YUI Compressor and put the JAR (build/yuicompressor-xyz.jar) to your classpath Download WysiHat and copy "vendor" directory to the root of your JavaScript project Download JSLint for Rhino and put it inside the "vendor" directory Now create a file named "Rakefile" in the root directory of the JavaScript project and add the following content to it: require 'rake' ROOT = File.expand_path(File.dirname(__FILE__)) OUTPUT_MERGED = "final.js" OUTPUT_MINIFIED = "final.min.js" task :default => :check desc "Merges the JavaScript sources." task :merge do require File.join(ROOT, "vendor", "sprockets") environment = Sprockets::Environment.new(".") preprocessor = Sprockets::Preprocessor.new(environment) %w(main.js).each do |filename| pathname = environment.find(filename) preprocessor.require(pathname.source_file) end output = preprocessor.output_file File.open(File.join(ROOT, OUTPUT_MERGED), 'w') { |f| f.write(output) } end desc "Check the JavaScript source with JSLint." task :check => [:merge] do jslint_path = File.join(ROOT, "vendor", "jslint.js") sh 'java', 'org.mozilla.javascript.tools.shell.Main', jslint_path, OUTPUT_MERGED end desc "Minifies the JavaScript source." task :minify => [:merge] do sh 'java', 'com.yahoo.platform.yui.compressor.Bootstrap', '-v', OUTPUT_MERGED, '-o', OUTPUT_MINIFIED end If you done everything correctly, you should be able to use the following commands in your console: rake merge -- to merge different JavaScript files into one rake check -- to check the syntax of your code (this is the default task, so you can simply type rake ) rake minify -- to prepare minified version of your JS code On source merging Using Sprockets, the JavaScript pre-processor you can include (or require ) other JavaScript files. Use the following syntax to include other scripts from the initial file (named "main.js", but you can change that in the Rakefile): (function() { //= require "subdir/jsfile.js" //= require "anotherfile.js" // some code that depends on included files // note that all included files can be in the same private scope })(); And then... Take a look at Rakefile provided with WysiHat to set the automated unit testing up. Nice stuff :) And now for the answer This does not answer the original question very well. I know and I'm sorry about that, but I've posted it here because I hope it may be useful to someone else to organize their mess. My approach to the problem is to do as much object-oriented modelling I can and separate implementations into different files. Then the handlers should be as short as possible. The example with List singleton is also nice one. And namespaces... well they can be imitated by deeper object structure. if (typeof org === 'undefined') { var org = {}; } if (!org.hasOwnProperty('example')) { org.example = {}; } org.example.AnotherObject = function () { // constructor body }; I'm not big fan of imitations, but this can be helpful if you have many objects that you would like to move out of the global scope.
