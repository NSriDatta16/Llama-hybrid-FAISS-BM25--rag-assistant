[site]: stackoverflow
[post_id]: 3494604
[parent_id]: 3468795
[tags]: 
You could create a custom html extensions class and overload the CheckBoxFor method like below. The method evaluates the metadata.Model to the value passed into it (like U.S. State). You can get the checkbox value/s from the FormCollection in the ControllerAction: public ActionResult Edit(FormCollection formCollection) { // Get the value(s) string checkBox = formCollection["State"]; // perform validation .... } Example assumes a keyvaluepair generic list model.State, null, element.Key) %> HtmlExtensions.cs using System; using System.Linq; using System.Linq.Expressions; using System.Web.Mvc; using System.Web.Routing; public static class HtmlExtensions { /// /// Checks the box for. /// /// The type of the model. /// The type of the value. /// The HTML. /// The expression. /// Checkbox public static MvcHtmlString CheckBoxFor (this HtmlHelper html, Expression > expression) { return CheckBoxFor(html, expression, new RouteDirection()); } /// /// Checks the box for. /// /// The type of the model. /// The type of the value. /// The HTML. /// The expression. /// The HTML attributes. /// Checkbox public static MvcHtmlString CheckBoxFor (this HtmlHelper html, Expression > expression, object htmlAttributes) { return CheckBoxFor(html, expression, htmlAttributes, ""); } /// /// Checks the box for. /// /// The type of the model. /// The type of the value. /// The HTML. /// The expression. /// The HTML attributes. /// The checked value. /// Checkbox public static MvcHtmlString CheckBoxFor (this HtmlHelper html, Expression > expression, object htmlAttributes, string checkedValue) { ModelMetadata metadata = ModelMetadata.FromLambdaExpression(expression, html.ViewData); string htmlFieldName = ExpressionHelper.GetExpressionText(expression); TagBuilder tag = new TagBuilder("input"); tag.Attributes.Add("type", "checkbox"); tag.Attributes.Add("name", metadata.PropertyName); if (!string.IsNullOrEmpty(checkedValue)) { tag.Attributes.Add("value", checkedValue); } else { tag.Attributes.Add("value", metadata.Model.ToString()); } if (htmlAttributes != null) { tag.MergeAttributes(new RouteValueDictionary(htmlAttributes)); } if (metadata.Model.ToString() == checkedValue) { tag.Attributes.Add("checked", "checked"); } return MvcHtmlString.Create(tag.ToString(TagRenderMode.SelfClosing)); } } While I'm at it, here's my list of United States to complete code: /// /// United States dictionary. /// /// List of United States public static List > UnitedStatesDictionary() { var arrList = new List >(); arrList.Add(new KeyValuePair ("AL", "Alabama")); arrList.Add(new KeyValuePair ("AK", "Alaska")); arrList.Add(new KeyValuePair ("AZ", "Arizona" )); arrList.Add(new KeyValuePair ("AR", "Arkansas" )); arrList.Add(new KeyValuePair ("CA", "California" )); arrList.Add(new KeyValuePair ("CO", "Colorado" )); arrList.Add(new KeyValuePair ("CT", "Connecticut" )); arrList.Add(new KeyValuePair ("DE", "Delaware" )); arrList.Add(new KeyValuePair ("DC", "District Of Columbia" )); arrList.Add(new KeyValuePair ("FL", "Florida" )); arrList.Add(new KeyValuePair ("GA", "Georgia" )); arrList.Add(new KeyValuePair ("HI", "Hawaii" )); arrList.Add(new KeyValuePair ("ID", "Idaho" )); arrList.Add(new KeyValuePair ("IL", "Illinois" )); arrList.Add(new KeyValuePair ("IN", "Indiana" )); arrList.Add(new KeyValuePair ("IA", "Iowa" )); arrList.Add(new KeyValuePair ("KS", "Kansas" )); arrList.Add(new KeyValuePair ("KY", "Kentucky" )); arrList.Add(new KeyValuePair ("LA", "Louisiana" )); arrList.Add(new KeyValuePair ("ME", "Maine" )); arrList.Add(new KeyValuePair ("MD", "Maryland" )); arrList.Add(new KeyValuePair ("MA", "Massachusetts" )); arrList.Add(new KeyValuePair ("MI", "Michigan" )); arrList.Add(new KeyValuePair ("MN", "Minnesota" )); arrList.Add(new KeyValuePair ("MS", "Mississippi" )); arrList.Add(new KeyValuePair ("MO", "Missouri" )); arrList.Add(new KeyValuePair ("MT", "Montana" )); arrList.Add(new KeyValuePair ("NE", "Nebraska" )); arrList.Add(new KeyValuePair ("NV", "Nevada" )); arrList.Add(new KeyValuePair ("NH", "New Hampshire" )); arrList.Add(new KeyValuePair ("NJ", "New Jersey" )); arrList.Add(new KeyValuePair ("NM", "New Mexico" )); arrList.Add(new KeyValuePair ("NY", "New York" )); arrList.Add(new KeyValuePair ("NC", "North Carolina" )); arrList.Add(new KeyValuePair ("ND", "North Dakota" )); arrList.Add(new KeyValuePair ("OH", "Ohio" )); arrList.Add(new KeyValuePair ("OK", "Oklahoma" )); arrList.Add(new KeyValuePair ("OR", "Oregon" )); arrList.Add(new KeyValuePair ("PA", "Pennsylvania" )); arrList.Add(new KeyValuePair ("RI", "Rhode Island" )); arrList.Add(new KeyValuePair ("SC", "South Carolina" )); arrList.Add(new KeyValuePair ("SD", "South Dakota" )); arrList.Add(new KeyValuePair ("TN", "Tennessee" )); arrList.Add(new KeyValuePair ("TX", "Texas" )); arrList.Add(new KeyValuePair ("UT", "Utah" )); arrList.Add(new KeyValuePair ("VT", "Vermont" )); arrList.Add(new KeyValuePair ("VA", "Virginia" )); arrList.Add(new KeyValuePair ("WA", "Washington" )); arrList.Add(new KeyValuePair ("WV", "West Virginia" )); arrList.Add(new KeyValuePair ("WI", "Wisconsin" )); arrList.Add(new KeyValuePair ("WY", "Wyoming" )); return arrList; }
