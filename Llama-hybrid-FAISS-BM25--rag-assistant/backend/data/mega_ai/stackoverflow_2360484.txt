[site]: stackoverflow
[post_id]: 2360484
[parent_id]: 2360035
[tags]: 
I don't know the Infragistics model, so my apologies if this is inapposite, but here's how I implement this with regular items controls - tab control, list box, whatever. Create a container view model class that includes an observable collection of items and exposes a SelectedItem property. Make the container class the data context of the items control. Bind the items control's SelectedItem property to the container class's. Hook the item objects up to the PropertyChanged event of the container . So now when the selected item in the UI changes, the container view model notifies all of the items that SelectedItem has changed. Each item object's event handler can determine for itself whether or not it's now the selected item. The item objects thus don't know any implementation details of the UI - you can unit test your classes outside of a UI and the logic will still work correctly.
