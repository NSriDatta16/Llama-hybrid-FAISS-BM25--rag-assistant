[site]: stackoverflow
[post_id]: 5345396
[parent_id]: 
[tags]: 
Getting a related model class from auth.models.User

I'm working on an app that has three "profile" models types. Each of these models has a foreign key to the contrib.auth.models User model. I would like to have a single sign on for each model type and provide a redirect via classmethod depending on which "profile" model type is related to the logged in user. Here's some pseudo-code to illustrate what I would like to do: from django.contrib.auth import authenticate, login from django.http import HttpResponse, HttpresponseRedirect from lib.forms import Loginform #extends the built-in AuthenticationForm def login_user(request): if request.method == 'POST': form = LoginForm(data=request.POST) if form.is_valid(): cleaned_data = form.cleaned_data user = authenticate(username=cleaned_data.get('username'), \ password=cleaned_data.get('password')) if user: login(request, user) #Determine the content type of the model related to the user #get the correct redirect value from an @classmethod #called: after_login_redirect for that type and... return HttpResponseRedirect(klass.after_login_redirect()) else: response = form.errors_as_json() return HttpResponse(json.dumps(response, ensure_ascii=False), \ mimetype='application/json') Is it possible to leverage the ContentTypes framework to do this? or am I better off just writing a class resolver that loops over an array of the "profile" classes? I'm not seeing a way I can do this with ContentTypes from the User class, unless someone knows a workaround. Thanks in advance, Brandon
