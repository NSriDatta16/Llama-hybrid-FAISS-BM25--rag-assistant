[site]: stackoverflow
[post_id]: 5533219
[parent_id]: 5532864
[tags]: 
What are the caveats for using thread.setName() apart from those mentioned in the javadoc? How does it affect performance? The peak frequency of calling thread.setName() would be about 200 per second and average about 0.3 per second. Performance should not be a significant issue. Thread.setName() does a security check and then copies / sets an attribute. The security check should be cheap unless your code is privileged code running in a security sandbox that forbids unprivileged calls to the Thread.setName() method. In Java 9 and later, setName is going to tell the OS to change the native thread's name. For Linux, Solaris, AIX and BSD (e.g. MacOS) this is done via a call to pthread_setname_np which makes a syscall under the hood. With Windows, it does some weird thing with the Windows debugger ... and only works if there is a debugger already attached. In Java 8, no attempt is made to change the native thread name. The only other caveat I can think of is that thread names changing all of the time could be confusing if you are trying to debug threading behavior; e.g. looking at thread dumps, etc.o
