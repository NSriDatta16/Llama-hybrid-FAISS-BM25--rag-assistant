[site]: stackoverflow
[post_id]: 4807100
[parent_id]: 4807042
[tags]: 
If I understand your question correctly, you want to be able to declare which property to update by giving the AddOne method a lambda expression. In this case, it's possible -- you can write an extension method that takes an Expression , retrieves from this expression the property access expression, and uses Reflection to update that property on the A object. The following is a very rough prototype of the above: public static void AddOne (this S x, Expression > expr) { if (expr.Body.NodeType != ExpressionType.MemberAccess) throw new InvalidOperationException(); MemberExpression memberExpr = expr.Body as MemberExpression; switch (memberExpr.Member.MemberType) { case MemberTypes.Field: { FieldInfo field = memberExpr.Member as FieldInfo; ulong value = Convert.ToUInt64(field.GetValue(x)); ++value; field.SetValue(x, Convert.ChangeType(value, field.FieldType)); break; } case MemberTypes.Property: { PropertyInfo prop = memberExpr.Member as PropertyInfo; ulong value = Convert.ToUInt64(prop.GetValue(x, null)); ++value; prop.SetValue(x, Convert.ChangeType(value, prop.PropertyType), null); break; } default: throw new InvalidOperationException(); } }
