[site]: stackoverflow
[post_id]: 525814
[parent_id]: 525658
[tags]: 
Traditionally, in a large IT services company, a tester's role tends to vary slightly with the nature of the development process adopted. Traditional waterfall or iterative projects tend to involve testers designing test plans, writing test cases and clarifying requirements during that process, executing them (both manual and automated) and clearing the app for production moves. They also regression-test other apps that could be potentially impacted. For most part, they do not ever look at code but in some special cases, they do validate database entries, especially in scenarios where batch jobs or other legacy systems are involved. Agile projects on the other hand are increasingly causing a blurring between the responsibilities of a tester and a developer. With frameworks like Rails or Django, the developer has a much better view of the "big picture" than ever before, so it generally does not make sense to have a large, dedicated, purely testing team. And with a perpetual beta philosophy, a good part of the testing is done by actual end users. So a much leaner, more dev-savvy testing team tends to help Agile projects (at least inside enterprises). Amongst other things, it helps when testers can put together scripts to automate regular test cases instead of having to rely on expensive tools (like Win/Loadrunner) On an average, a tester's motivation levels tend to be lower than developers. At least in my organization, a lot of testers want to "grow up" to be developers, although some of them do understand that becoming a QA/Assurance consultant is a career in its own right.
