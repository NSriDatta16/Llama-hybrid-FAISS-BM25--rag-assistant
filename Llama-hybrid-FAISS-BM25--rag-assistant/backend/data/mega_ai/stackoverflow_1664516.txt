[site]: stackoverflow
[post_id]: 1664516
[parent_id]: 565264
[tags]: 
I know this is an old question, but in a similar situation (50k+ legacy ASP pages that need to display in a .NET framework), I did the following. Created a rewrite engine (HttpModule) which catches all incoming requests and looks for anything that is from the old site. (in a separate class - keep things organized!) use WebClient or HttpRequest, etc to open a connection to the old server and download the rendered HTML. Use the HTML agility toolkit ( very slick) to extract the content that I'm interested in - in our case, this is always inside if a div with the class "bdy". Throw this into a cache - a SQL table in this example. Each hit checks the cache and either a)retrieves the page and builds the cache entry, or b) just gets the page from the cache. An aspx page built specifically for displaying legacy content receives the rewrite request and displays the relevant content from the legacy page inside of an asp literal control. The cache is there for performance - since the first request for a given page has a minimum of two hits - one from the browser to the new server, one from the new server to the old server - I store cachable data on the new server so that subsequent requests don't have to go back to the old server. We also cache images, css, scripts, etc. It gets messy when you have to handle forms, cookies, etc, but these can all be stored in your cache and passed through to the old server with each request if necessary. I also store content expiration dates and other headers that I get back from the legacy server and am sure to pass those back to the browser when rendering the cached page. Just remember to take as content-agnostic an approach as possible. You're effectively building an in-page web proxy that lets IIS render old ASP the way it wants, and manipulating the output. Works very well - I have all of the old pages working seamlessly within our ASP.NET app. This saved us a solid year of development time that would have been required if we had to touch every legacy asp page. Good luck!
