[site]: stackoverflow
[post_id]: 5207253
[parent_id]: 5207224
[tags]: 
You should say more about why you care about the size of the dictionary in bytes, because the answer might be different depending. In general, the "size" of an NSDictionary's footprint in memory is not something you can see or care about. It abstracts its storage mechanism from the programmer, and uses some form of overhead beyond the actual data it's storing. You can, however, serialize the dictionary to NSData. If the contents of the dictionary are only "primitive" types like NSNumber, NSString, NSArray, NSData, NSDictionary, you can use the NSPropertyListSerialization class to turn it into a binary property list, which will be about the most compact byte representation of its contents that you can get: NSDictionary * myDictionary = /* ... */; NSData * data = [NSPropertyListSerialization dataFromPropertyList:myDictionary format:NSPropertyListBinaryFormat_v1_0 errorDescription:NULL]; NSLog(@"size: %d", [data length]); If it contains other custom objects, you could use NSKeyedArchiver to archive it to an NSData, but this will be significantly larger and requires the cooperation of your custom classes.
