[site]: stackoverflow
[post_id]: 2125674
[parent_id]: 
[tags]: 
What is the effect of type synonyms on instances of type classes? What does the TypeSynonymInstances pragma in GHC do?

I'm reading Real World Haskell Pg 151, and I've stared at the following passage for over an hour: Recall that String is a synonym for [Char], which in turn is the type [a] where Char is substituted for the type parameter a. According to Haskell 98's rules, we are not allowed to supply a type in place of a type parameter when we write an instance. In other words, it would be legal for us to write an instance for [a], but not for [Char]. 16 comments 5335 It simply isn't sinking in. Staring at the the (free not pirated) copy of RWH chapter 6 I see a lot of other people are really suffering with this. I still don't understand it from the comments... Firstly, everything about this confuses me, so please if you feel you can explain anything about this passage, or TypeSynonymInstances please do. Here is my problem: Int is a data constructor String is a data constructor AND type synonym Now I can't answer these questions: Why would a type synonym preclude the making the type a member of a type class (I'm looking for some reason which probably relates to compilation or implimentation of a type synonym)? Why did the designers of the language, not want this syntax (I'm asking for reasoning not extensive theory or unicode math symbols). I see this line "the type [a] where Char is substituted for the type parameter a" , and I want to know why I can't substitute it for this "the type a where Int is substituted for the type parameter a" . Thanks!
