[site]: stackoverflow
[post_id]: 867543
[parent_id]: 867471
[tags]: 
If every single word you can squeeze out of the storage is critical, then I have to recommend optimizing the struct by hand. A tool could arrange the members optimally for you, but it doesn't know, for example, that this value here that you're storing in 16 bits actually never goes above 1024, so you could steal the upper 6 bits for this value over here ... So a human will almost certainly beat a robot on this job. [Edit] But it seems like you really don't want to hand-optimize your structs for each architecture. Maybe you really have a great many architectures to support? I do think this problem isn't amenable to a general solution, but you might be able to encode your domain knowledge into a custom Perl/Python/something script that generates the struct definition for each architecture. Also, if all your members have sizes that are powers of two, then you will get optimal packing simply by sorting members by size (largest first.) In that case, you can just use good old-fashioned macro-based struct-building - something like this: #define MYSTRUCT_POINTERS \ Something* m_pSomeThing; \ OtherThing* m_pOtherThing; #define MYSTRUCT_FLOATS \ FLOAT m_aFloat; \ FLOAT m_bFloat; #if 64_BIT_POINTERS && 64_BIT_FLOATS #define MYSTRUCT_64_BIT_MEMBERS MYSTRUCT_POINTERS MYSTRUCT_FLOATS #else if 64_BIT_POINTERS #define MYSTRUCT_64_BIT_MEMBERS MYSTRUCT_POINTERS #else if 64_BIT_FLOATS #define MYSTRUCT_64_BIT_MEMBERS MYSTRUCT_FLOATS #else #define MYSTRUCT_64_BIT_MEMBERS #endif // blah blah blah struct MyStruct { MYSTRUCT_64_BIT_MEMBERS MYSTRUCT_32_BIT_MEMBERS MYSTRUCT_16_BIT_MEMBERS MYSTRUCT_8_BIT_MEMBERS };
