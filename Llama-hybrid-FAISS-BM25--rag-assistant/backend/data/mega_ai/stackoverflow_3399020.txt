[site]: stackoverflow
[post_id]: 3399020
[parent_id]: 3398714
[tags]: 
Bit arrays have been used in 3D games such as Quake (and possibly Doom, can't recall) to represent all the surfaces that are visible from a given location (floor sector). It works something like this: Given a complex 3D scene, number all the surfaces (triangles) sequentially. The count of surfaces is the size of the bit vector assigned to every floor sector. For each floor sector (region of the floor map), use ray tracing to determine which surfaces are visible from that floor sector. If a surface is visible, set it's corresponding bit in the floor sector's bit array to 1 (floorsector.bitarray[surface_index] = 1). This bit array per floor sector can be precalculated when the level is built, saving a significant amount of CPU time when running the game. When the player/viewpoint is in a given sector and facing a particular direction, the rendering engine need only consider the surfaces marked in the floor sector's bit array. Since the view camera (frustrum) is looking only in one direction at a time, only a portion of the surfaces marked in the floor sector's bit array will actually need to be rendered on the screen, but the bit array reduces the number of surfaces that need to be tested at runtime by several orders of magnitude. A complex, large game level may have tens of millions of distinct surface tiles, but only a few thousand surface tiles are visible from any given location (floor sector) in the level. Furthermore, the number of surfaces visible from a given location tends to remain about the same regardless of how large the level is. This technique of precalculating surface visibility essentially enables arbitrarily huge game levels with little or no impact on realtime rendering. Since these visibility bit arrays tend to be "clumpy" (1 bits not distributed uniformly across the array), the arrays can be compressed further for storage on disk using "zero compression" - RLE compression to drop all the zero bytes. This precalculated surface visibility bit array technique is what makes huge levels possible in Quake and other more recent games, compared to earlier rendering engines in, say, Castle Wolfenstein where the levels had to be kept relatively small to avoid bogging down the renderer at runtime. Storing the visible surface indices as a bit vector and using zero compression on top of that results in massive compression of a large amount of sparse data.
