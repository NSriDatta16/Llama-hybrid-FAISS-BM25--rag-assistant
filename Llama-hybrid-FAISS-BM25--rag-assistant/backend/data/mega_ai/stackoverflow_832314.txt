[site]: stackoverflow
[post_id]: 832314
[parent_id]: 831893
[tags]: 
There are good reasons to generate your own mipmaps. However, the quality of the downsampling is not one of them. Game and graphic programmers have experimented with all kinds of downsampling algorithms in the past. In the end it turned out that the very simple "average four pixels"-method gives the best results. Also more advanced methods are in theory mathematical more correct they tend to take a lot of sharpness out of the mipmaps. This gives a flat look (Try it!). For some (to me not understandable) reason the simple average method seems to have the best tradeoff between antialiasing and keeping the mipmaps sharp. However, you may want to calculate your mipmaps with gamma-correction. OpenGL does not do this on it's own. This can make a real visual difference, especially for darker textures. Doing so is simple. Instead of averaging four values together like this: float average (float a, float b, float c, float d) { return (a+b+c+d)/4 } Do this: float GammaCorrectedAverage (float a, float b, float c, float d) { // assume a gamma of 2.0 In this case we can just square // the components. return sqrt ((a*a+b*b+c*c+d*d)/4) } This code assumes your color components are normalized to be in the range of 0 to 1.
