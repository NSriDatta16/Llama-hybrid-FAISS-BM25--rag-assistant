[site]: stackoverflow
[post_id]: 543319
[parent_id]: 
[tags]: 
How to return XML in ASP.NET?

I have encountered many half-solutions to the task of returning XML in ASP.NET. I don't want to blindly copy & paste some code that happens to work most of the time, though; I want the right code, and I want to know why it's right. I want criticism; I want information; I want knowledge; I want understanding. Below are code fragments, in order of increasing complexity, representing some of the partial solutions I've seen, including some of the further questions each one causes, and which I'd like to have answered here. A thorough answer must address why we must have or must not have any of the following things, or else explain why it's irrelevant. Response.Clear(); Response.ContentType = "text/xml"; Response.ContentEncoding = Encoding.UTF8; Response.ContentEncoding = Encoding.UTF16; Response.ContentType = "text/xml; charset=utf-8"; Response.ContentType = "text/xml; charset=utf-16"; Response.End() Using an aspx with the front-file guts ripped out Using an ashx file In the end, imagine you need to write the contents of a helper function like this: /// Use this call inside your (Page_Xxx) method to write the ///xml to the web client. /// See for https://stackoverflow.com/questions/543319/how-to-return-xml-in-asp-net ///for proper usage. public static void ReturnXmlDocumentToWebClient( XmlDocument document, Page page) { ... } Every solution I see starts with taking an empty aspx page, and trimming all the HTML out of the front file (which causes warnings in Visual Studio): Next we use the Page_Load event to write to the output: protected void Page_Load(object sender, EventArgs e) { String xml = " Hello, world! "; Response.Write(xml); } Do we need to change the ContentType to "text/xml" ? I.e.: protected void Page_Load(object sender, EventArgs e) { String xml = " Hello, world! "; Response.ContentType = "text/xml"; Response.Write(xml); } Do we need to call Response.Clear first? protected void Page_Load(object sender, EventArgs e) { String xml = " Hello, world! "; Response.Clear(); Response.ContentType = "text/xml"; Response.Write(xml); } Do we really need to call that? Doesn't Response.Clear make the prior step of making sure that the code in the front file was empty (not even a space or a carriage return) outside of the unnecessary? Does Response.Clear make it more robust, in case someone left a blank line or space in the code-front file? Is using ashx the same as a blank aspx main file, because it's understood that it's not going to output HTML? Do we need to call Response.End ? I.e.: protected void Page_Load(object sender, EventArgs e) { String xml = " Hello, world! "; Response.Clear(); Response.ContentType = "text/xml"; Response.Write(xml); Response.End(); } What else could possibly happen after Response.Write that needs us to end the response right now ? Is the content-type of text/xml sufficient, or should it instead be text/xml; charset=utf-8 ? protected void Page_Load(object sender, EventArgs e) { String xml = " Hello, world! "; Response.Clear(); Response.ContentType = "text/xml; charset=utf-8"; Response.Write(xml); Response.End(); } Or should it specifically not be that? Does having a charset in the content type, but not setting the property, screw up the server? Why not some other content type, e.g.: UTF-8 utf-16 UTF-16 Should the charset be specified in Response.ContentEncoding ? protected void Page_Load(object sender, EventArgs e) { String xml = " Hello, world! "; Response.Clear(); Response.ContentType = "text/xml"; Response.ContentEncoding = Encoding.UTF8; Response.Write(xml); Response.End(); } Is using Response.ContentEncoding better than jamming it into Response.ContentType ? Is it worse? Is the former supported? Is the latter? I don't actually want to write a String out; I want to write out an XmlDocument . Someone suggests I can use the XmlWriter : protected void Page_Load(object sender, EventArgs e) { XmlDocument xml = GetXmlDocumentToShowTheUser(); Response.Clear(); Response.ContentType = "text/xml"; Response.ContentEncoding = Encoding.UTF8; using (TextWriter textWriter = new StreamWriter( Response.OutputStream, Encoding.UTF8)) { XmlTextWriter xmlWriter = new XmlTextWriter(textWriter); // Write XML using xmlWriter //TODO: How to do this? } } Note the use of Response.OutputStream , rather than Response.Write . Is this good? Bad? Better? Worse? Faster? Slower? More memory intensive? Less memory intensive? I read that you should render the XML in the pageâ€™s Render() method to avoid problems with chunking encountered when using Page_Load(). What is chunking ? What are the problems with chunking, and how does using using Page_Render eliminate them? I don't want to write the contents of my XmlDocument object into a string and then write that because that wastes memory. That is, any of these would be bad: Response.Write(doc.ToString()); Response.Write(doc.InnerXml); xmlWrite.WriteString(doc.ToString()); xmlWrite.WriteString(doc.InnerXml); Similar Questions How to return XML in ASP.NET References How Return XML From ASPX in ASP.NET 1.1 Writing XML output to an ASP.NET webpage How do you output XML from ASP.NET? Creating an ASHX handler in ASP.NET
