[site]: stackoverflow
[post_id]: 4059523
[parent_id]: 4058496
[tags]: 
In my line of work - which is embedded, by the way - I am constantly switching back & forth between C and C++. When I'm in C, I miss from C++: templates (including but not limited to STL containers). I use them for things like special counters, buffer pools, etc. (built up my own library of class templates & function templates that I use in different embedded projects) very powerful standard library destructors, which of course make RAII possible (mutexes, interrupt disable, tracing, etc.) access specifiers, to better enforce who can use (not see) what I use inheritance on larger projects, and C++'s built-in support for it is much cleaner & nicer than the C "hack" of embedding the base class as the first member (not to mention automatic invocation of constructors, init. lists, etc.) but the items listed above are the ones I miss the most. Also, probably only about a third of the embedded C++ projects I work on use exceptions, so I've become accustomed to living without them, so I don't miss them too much when I move back to C. On the flip side, when I move back to a C project with a significant number of developers, there are whole classes of C++ problems that I'm used to explaining to people which go away. Mostly problems due to the complexity of C++, and people who think they know what's going on, but they're really at the "C with classes" part of the C++ confidence curve . Given the choice, I'd prefer using C++ on a project, but only if the team is pretty solid on the language. Also of course assuming it's not an 8K Î¼C project where I'm effectively writing "C" anyway.
