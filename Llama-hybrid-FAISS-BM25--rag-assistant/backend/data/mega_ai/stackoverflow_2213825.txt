[site]: stackoverflow
[post_id]: 2213825
[parent_id]: 
[tags]: 
How to get lg2 of a number that is 2^k

What is the best solution for getting the base 2 logarithm of a number that I know is a power of two ( 2^k ). (Of course I know only the value 2^k not k itself.) One way I thought of doing is by subtracting 1 and then doing a bitcount: lg2(n) = bitcount( n - 1 ) = k, iff k is an integer 0b10000 - 1 = 0b01111, bitcount(0b01111) = 4 But is there a faster way of doing it (without caching)? Also something that doesn't involve bitcount about as fast would be nice to know? One of the applications this is: suppose you have bitmask 0b0110111000 and value 0b0101010101 and you are interested of (value & bitmask) >> number of zeros in front of bitmask (0b0101010101 & 0b0110111000) >> 3 = 0b100010 this can be done with using bitcount value & bitmask >> bitcount((bitmask - 1) xor bitmask) - 1 or using lg2 value & bitmask >> lg2(((bitmask - 1) xor bitmask) + 1 ) - 2 For it to be faster than bitcount without caching it should be faster than O(lg(k)) where k is the count of storage bits.
