[site]: stackoverflow
[post_id]: 759432
[parent_id]: 759314
[tags]: 
MVC has been around for a while. It's a time tested and proven pattern . Many frameworks leverage the MVC Pattern . Martin Fowler has deconstructed the MVC into: Supervising Presenter and Passive View . Architect Christopher Alexander said it best: Each pattern describes a problem which occurs over and over again in our environment and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice. I'm not sure why you would want to move from MVC. Is there a problem you are encountering that MVC does not eloquently solve? To give you a better answer we need to know more about your problem domain . Things to take into account when considering patterns/architecture : If you are building something with a Myspace type architecture you'll need a robust architecture (MVC). If you are creating a simple crud interface via the web - almost anything will do. For .Net Web forms (I am assuming web, since you didn't say thick or web client) which is not MVC, it was a nightmare maintaining them. Web Forms applications that lived more that a couple years tended to become big balls of mud . Even then developers discovered ways to use MVC with web forms . Ironically, the lack of MVC architecture in ASP.NET web forms was one of the driving complaints that lead to the development of ASP.Net MVC framework . From experience if you don't use some MVCesk approach, your solutions become hard to maintain and bloated. These applications will die a slow painful death. If your solutions are small one-off projects, the by all means throw something together. Heck there are tools that will generate everything from the screens to the data access layer. Whatever works to get the job done.
