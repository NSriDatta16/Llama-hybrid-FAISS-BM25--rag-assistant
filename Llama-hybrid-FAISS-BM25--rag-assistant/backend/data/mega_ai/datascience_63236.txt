[site]: datascience
[post_id]: 63236
[parent_id]: 63219
[tags]: 
If you would ask for code suggestion please specify your framework in the future. I am assuming you are using Keras I can make you a minimum viable implementation of your case. from sklearn.base import ClassifierMixin, BaseEstimator class CNN_model(ClassifierMixin, BaseEstimator) : def __init__(**model_params) : """ define model parameters within this init function """ self.model = # Use the params above and make a keras model and store it in this variable self.model.compile(loss= , optimizer = , metrics=[]) # Please fill-in the appropriate loss and metrics def fit(X,y) : self.model.fit(X,y, training_params) # You specify everything in training_params e.g. epoch, callbacks(which includes early stopping) return self def predict(X) : return self.model.predict(X) So basically the code above makes a custom instance of sklearn estimator, which if you are succesfully build can be combined with GridSearchCV.
