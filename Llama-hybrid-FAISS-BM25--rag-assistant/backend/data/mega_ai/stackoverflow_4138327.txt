[site]: stackoverflow
[post_id]: 4138327
[parent_id]: 3111992
[tags]: 
It makes a huge difference if you're in a JavaEE container. More than personal preference, you're much better off if you follow the second approach with a few modifications. In the first case, you're creating your own connection pool and do not profit from the existing connection pool in the container. Thus even if you configured your container to, say, a max of 20 simultaneous connections to the database, you can't guarantee this max as this new connection pool is not restrained by your configuration. Also, you don't profit from any monitoring tools your container provides you . In the second case, you're also creating your own connection pool , with the same disadvantages as above. However, you can isolate the definition of this spring bean and only use it in test runs. Your best bet is to look up the container's connection pool via JNDI . Then you are sure to respect the data source configurations from the container. Use this for running tests. ..... Use this when deploying to a JavaEE container Remember to set the JEE schema Although Tomcat is not a full JavaEE container, it does manage data sources via JNDI, so this answer still applies.
