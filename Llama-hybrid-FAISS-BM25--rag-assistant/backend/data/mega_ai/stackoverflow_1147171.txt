[site]: stackoverflow
[post_id]: 1147171
[parent_id]: 1140684
[tags]: 
I personally never managed to get the headers the way I wanted them when using the SoapHeader class. To be more flexible you should perhaps take a custom SoapClient class into consideration. As I answered in another question on SO you can structure the SOAP message to your needs when overriding SoapClient::__doRequest() . That way you can insert XML fragments at will. class My_SoapClient extends SoapClient { protected function __doRequest($request, $location, $action, $version) { /* * $request is a XML string representation of the SOAP request * that can e.g. be loaded into a DomDocument to make it modifiable. */ $domRequest = new DOMDocument(); $domRequest->loadXML($request); // modify XML using the DOM API, e.g. get the -tag // and add your custom headers $xp = new DOMXPath($domRequest); $xp->registerNamespace('s', 'http://www.w3.org/2003/05/soap-envelope'); $headers = $xp->query('/s:Envelope/s:Header'); if ($headers->length == 0) { $envelope = $xp->query('/s:Envelope')->item(0); $header = $domRequest->createElementNS('http://www.w3.org/2003/05/soap-envelope', 's:Header'); $envelope->appendChild($header); } else { $header = $headers->item(0); } // now add your custom header $requestServerVersion = $domRequest->createElementNS('T_NAMSPACE', 't:RequestServerVersion'); $requestServerVersion->setAttribute('Version', 'Exchange2007_SP1'); $header->appendChild($requestServerVersion); $request = $domRequest->saveXML(); return parent::__doRequest($request, $location, $action, $version); } } T_NAMSPACE must be changed to the correct namespace of prefix t .
