[site]: stackoverflow
[post_id]: 2731638
[parent_id]: 2730117
[tags]: 
I suggest using the length of the word and the first letters as the first two items in the search. Let the data be organized to support this algorithm. First, let us define a container for all the words that are the same length: typedef std::vector Word_Container; This data structure shall be sorted, so that a binary search can be used. Next, an index table will be created. The index table will be of the form word length, pointer to word container >: typedef std::map Index_Table; And finally have an array of index tables, using the first letter of the word as an index: Index_Table alpha_array[26]; // ASCII A - Z. The algorithm is then: Calculate index into alpha_array : index = word[0] - 'A'; Use index to get associated index table: Index_Table& table = alpha_array[index]; Use length of the word as the key for the table lookup, to get word container: Word_Container * p_word_container = table[word.length()]; Search container for exact word: bool found = false; if (p_word_container) { found = std::binary_search(p_word_container->begin(), p_word_container->end(), word); } There are more efficient, but complex, methods for searching a dictionary for a word. The above algorithm has a benefit of a quick "escape" points where the word doesn't exist. This concept can be extended to database tables.
