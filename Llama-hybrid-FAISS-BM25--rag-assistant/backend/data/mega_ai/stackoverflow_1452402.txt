[site]: stackoverflow
[post_id]: 1452402
[parent_id]: 1452369
[tags]: 
I'm quoting below some parts of the conclusion of NoSQL: If Only It Was That Easy (the article is more about scalability but still contains interesting things that apply to your context): [...] The real thing to point out is that if you are being held back from making something super awesome because you can’t choose a database, you are doing it wrong. If you know mysql, just use it. Optimize when you actually need to. Use it like a k/v store, use it like a rdbms, but for god sake, build your killer app! None of this will matter to most apps. Facebook still uses MySQL, a lot. Wikipedia uses MySQL, a lot. FriendFeed uses MySQL, a lot. NoSQL is a great tool, but it’s certainly not going to be your competitive edge, it’s not going to make your app hot, and most of all, your users won’t give a shit about any of this. What am I going to build my next app on? Probably Postgres. Will I use NoSQL? Maybe. I might also use Hadoop and Hive. I might keep everything in flat files. Maybe I’ll start hacking on Maglev. I’ll use whatever is best for the job. If I need reporting, I won’t be using any NoSQL. If I need caching, I’ll probably use Tokyo Tyrant. If I need ACIDity, I won’t use NoSQL. If I need a ton of counters, I’ll use Redis. If I need transactions, I’ll use Postgres. If I have a ton of a single type of documents, I’ll probably use Mongo. If I need to write 1 billion objects a day, I’d probably use Voldemort. If I need full text search, I’d probably use Solr. If I need full text search of volatile data, I’d probably use Sphinx. [...] So if a non ACID storage system is an option, I'd look at Voldemort . If not, without more specific informations, I can't say if one DBMS is really better than another for write-intensive applications. Actually, I think it's more a matter of design/architecture/tuning and tend to agree with the author: 1) use the one you know the most 2) which one you choose won't matter to most apps.
