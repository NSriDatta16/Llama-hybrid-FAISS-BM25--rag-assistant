[site]: stackoverflow
[post_id]: 3905398
[parent_id]: 
[tags]: 
C# cannot call overloaded non-generic method from generic method

I have some legacy code with a method foo which has 700+ overloads: [DllImport("3rdparty.dll")] protected static extern void foo(int len, ref structA obj); [DllImport("3rdparty.dll")] protected static extern void foo(int len, ref structB obj); [DllImport("3rdparty.dll")] protected static extern void foo(int len, ref structC obj); //and 700 similar overloads for foo... I'd like to expose these overloaded methods through a single method using generics: public void callFoo (int len) where T : new() //ensure an empty constructor so it can be activated { T obj = Activator.CreateInstance (); //foo expects obj to be empty, and fills it with data foo(len, ref obj); //...do stuff with obj... } Unfortunately this returns the errors: " The best overloaded method match for 'foo(int, ref StructA)' has some invalid arguments " and " cannot convert from 'ref T' to 'ref StructA' ". Is there an elegant way to achieve this?
