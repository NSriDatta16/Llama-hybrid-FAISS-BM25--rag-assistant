[site]: datascience
[post_id]: 74230
[parent_id]: 74228
[tags]: 
Using dependency parsing alone will not give you what you need. You may be able to get your answer by interpreting the dependency tree. For instance, in this case ABC-EFG GROUP Inc. is a pobj of between , which could infer that it is party 1. In this particular case, the dependency parsing isn't fully correct and party 2 ( Rob Cummins ) is difficult to find. I would recommend you try the following things: It seems that the parties are either organization or people, so you could narrow down your candidates to proper nouns and you could use NER to see whether any ORG or PER are detected. That will not tell you exactly whether they are the parties, but they could give you useful hints. In this case, it feels like a plain regular expression could work. Whatever proper noun occurs after between seems to be party 1, and whatever follows and seems to be party 2. Of course, a regular expression would only work for cases written with the same pattern, but it is always wise to consider. Perhaps, you are already a fair amount of your scenarios with a solution that will always work. You could also use the presence of words like "between" and "and" as a feature. If you don't have a lot of training examples, you could take a look at libraries like mimesis and faker . They allow you to generate company names, addresses, people names, etc.
