[site]: stackoverflow
[post_id]: 3373265
[parent_id]: 3373188
[tags]: 
I'd use a decorator, like so: from functools import wraps class withBeforeAfter(object): def __init__(self, before, after): self.before = before self.after = after def __call__(self, wrappedCall): @wraps(wrappedCall) def wrapCall(*args, **kwargs): try: self.before() r = wrappedCall(*args, **kwargs) finally: self.after() return r return wrapCall # to use it: @withBeforeAfter(myBefore, myAFter) def myFunc(...): ... # or: def myFunc(...): ... # later... myFunc = withBeforeAfter(myBefore, myAfter)(myFunc)
