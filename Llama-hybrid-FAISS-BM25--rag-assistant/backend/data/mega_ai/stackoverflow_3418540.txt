[site]: stackoverflow
[post_id]: 3418540
[parent_id]: 3418430
[tags]: 
Something like: var input = "BN,ST,A1,303,601,BN,ST,A2,303,621,BN,WC,A3,303,641,"; var splitted = input.Split(','); var cols = 5; var rows = splitted.Length / cols; var arr = new string[rows, cols]; for (int row = 0; row I will try find a more elegant solution. Properly with some functional-style over it. Update: Just find out it is not actually what you needs. With this you get a 2D array with 3 rows and 5 columns. This however will give you 3 lines. They do not have a ending ','. Do you want that? Do you always want to print it out? Or do you want to have access to the different lines?: var splitted = input.Split(new [] { ','}, StringSplitOptions.RemoveEmptyEntries); var lines = from item in splitted.Select((part, i) => new { part, i }) group item by item.i / 5 into g select string.Join(",", g.Select(a => a.part)); Or by this rather large code. But I have often needed a "Chunk" method so it may be reusable. I do not know whether there is a build-in "Chunk" method - couldn't find it. public static class LinqExtensions { public static IEnumerable > Chunks (this IEnumerable xs, int size) { int i = 0; var curr = new List (); foreach (var x in xs) { curr.Add(x); if (++i % size == 0) { yield return curr; curr = new List (); } } } } Usage: var lines = input.Split(',').Chunks(5).Select(list => string.Join(",", list));
