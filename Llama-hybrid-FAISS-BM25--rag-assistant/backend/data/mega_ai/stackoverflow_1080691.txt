[site]: stackoverflow
[post_id]: 1080691
[parent_id]: 
[tags]: 
Determing longest repeating cycle in a decimal expansion

Today I encountered this article about decimal expansion and I was instantaneously inspired to rework my solution on Project Euler Problem 26 to include this new knowledge of math for a more effecient solution (no brute forcing). In short the problem is to find the value of d ranging 1-1000 that would maximize the length of the repeating cycle in the expression "1/d". Without making any further assumptions about the problem that could further improve the effecienty of solving the problem I decided to stick with 10^s=10^(s+t) (mod n) which allows me for any value of D to find the longest repeating cycle (t) and the starting point for the cycle (s). The problem is that eksponential part of the equation, since this will generate extremely large values before they're reduced by using modulus. No integral value can handle this large values, and the floating point data types seemes to be calculating wrong. I'm using this code currently: Private Function solveDiscreteLogarithm(ByVal D As Integer) As Integer Dim NumberToIndex As New Dictionary(Of Long, Long)() Dim maxCheck As Integer = 1000 For index As Integer = 1 To maxCheck If (Not NumberToIndex.ContainsKey((10 ^ index) Mod D)) Then NumberToIndex.Add((10 ^ index) Mod D, index) Else Return index - NumberToIndex((10 ^ index) Mod D) End If Next Return -1 End Function which at some point will compute "(10^47) mod 983" resulting in 783 which is not the correct result. The correct result should have been 732. I'm assuming it's because I'm using integral data types and it's causing overflow. I tried using double instead, but that gave even stranger results. So what are my options?
