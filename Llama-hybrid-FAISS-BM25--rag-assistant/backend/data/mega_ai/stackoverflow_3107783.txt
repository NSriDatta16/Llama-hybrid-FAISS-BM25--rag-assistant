[site]: stackoverflow
[post_id]: 3107783
[parent_id]: 
[tags]: 
How to detect end of Right drag of TControl?

edit: VCL has no problem around right dragging and the sample program below works perfect. A mouse gesture utility causes the problem. (Perhaps it hooks & intercept WM_RBUTTONUP event...) I want to detect end of right-dragging on the control. For left-dragging, I can use MouseUp event, but it doesn't occur after right dragging. On the test program below(put a memo on the right side of the form and drag form), I want to reset mouse cursor after right dragging. How can I achieve this ? (WM_RBUTTONUP doesn't come.) unit Unit1; interface uses Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms, Dialogs, StdCtrls; type TForm1 = class(TForm) Memo1: TMemo; procedure FormMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer); procedure FormMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer); procedure FormMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer); procedure WMRButtonUp(var Message: TWMRButtonUp); message WM_RBUTTONUP; private { Private declarations } public { Public declarations } end; var Form1: TForm1; implementation {$R *.dfm} function ShiftStateToStr(Shift: TShiftState): string; begin if ssShift in Shift then Result := Result + 'S-'; if ssCtrl in Shift then Result := Result + 'C-'; if ssAlt in Shift then Result := Result + 'A-'; if ssDouble in Shift then Result := Result + 'D-'; if ssLeft in Shift then Result := Result + 'L'; if ssRight in Shift then Result := Result + 'R'; if ssMiddle in Shift then Result := Result + 'M'; end; function MouseButtonToStr(Btn: TMouseButton): string; begin if Btn = mbLeft then Result := 'Left' else if Btn = mbRight then Result := 'Right' else if Btn = mbMiddle then Result := 'Middle'; end; procedure TForm1.FormMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer); begin SetCapture(Handle); Memo1.Lines.Add(Format('Down(Btn=%s, Shift=[%s])', [MouseButtonToStr(Button), ShiftStateToStr(Shift)])); if Button = mbLeft then Screen.Cursor := crDrag else if Button = mbRight then Screen.Cursor := crSize; end; procedure TForm1.FormMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer); begin Memo1.Lines.Add(Format('Move(Shift=[%s])', [ShiftStateToStr(Shift)])); end; procedure TForm1.FormMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer); begin ReleaseCapture; Memo1.Lines.Add(Format('Up(Btn=%s, Shift=[%s])', [MouseButtonToStr(Button), ShiftStateToStr(Shift)])); Screen.Cursor := crDefault; end; procedure TForm1.WMRButtonUp(var Message: TWMRButtonUp); begin Memo1.Lines.Add('WMRbuttonUp'); inherited; end; end.
