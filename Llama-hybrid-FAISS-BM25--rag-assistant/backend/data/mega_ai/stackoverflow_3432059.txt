[site]: stackoverflow
[post_id]: 3432059
[parent_id]: 3431976
[tags]: 
From the documentation on delay() : Set a timer to delay execution of subsequent items in the queue In other words, delay() stops the execution of any animations (such as sliding, fading and other animations) for the given amount of time. After the duration specified has passed, it resumes the animations. What happens in your original case is this: Your notice shows You click on close Notice is animated and fades out What happens when you add the delay code: Your notice shows. It then adds a delay on 10 seconds. This will prevent any animations from running for the next 10 seconds It adds fadeOut(1000, function(){$(this).remove();}); to the queue of animations (this will be the next animation to be run after the 10 seconds of delay is up) You click on close. The closing animation is queued as number 2 in the queue, after the first fadeOut you added previously. In other words, it is not run, since you still have set a delay The delay of 10 seconds passes Your first animation, fadeOut(1000, function(){$(this).remove();}); , is run - removing the notice Your second animation (the one fired by clicking on close) is run. Since you've already removed the notice in the last animation, it has no use The solution. Use setTimeout to set a timeout for the closing animation if you haven't clicked on the close link before its timeout delay has passed See accepted answer. Leaving my answer for the history books function addNotice(notice) { var notice = $(' ') .append(' ') .append(' close ') .append($(' ').html($(notice))) .hide() .appendTo('#message_box') .fadeIn(1000) /* Close the timeout after 10 seconds */ setTimeout(function() { notice.fadeOut(1000, function(){$(this).remove();}); }, 10000); } Edit: Mike's answer was more elegant in this case. I don't really like using setTimeout , though if you were to use other animations on the notice, using delay could make some problems.
