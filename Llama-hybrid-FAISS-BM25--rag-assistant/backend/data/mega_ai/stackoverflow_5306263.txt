[site]: stackoverflow
[post_id]: 5306263
[parent_id]: 
[tags]: 
Would returning a Lazy from a method be a good idea for deferring the cost of opening a FileStream?

I have a scenario where I want to clearly convey that it's the caller's responsibility for disposing a stream while at the same time preventing the caller from discovering the underlying file's path -- the caller shouldn't know that the stream came from the file system. Also, the caller isn't going to need the stream until later on, so I probably don't need to open it immediately. Given that, I thought that it might be a good idea to leverage Lazy for this purpose, as in: public Lazy GetContent(string key) { string path = GetFilePath(key); return new Lazy(() => File.OpenRead(path)); } Am I over-thinking this? Should I just return a Stream instead?
