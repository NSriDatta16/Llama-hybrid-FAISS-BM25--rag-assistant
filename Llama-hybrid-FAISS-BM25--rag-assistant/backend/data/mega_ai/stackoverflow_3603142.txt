[site]: stackoverflow
[post_id]: 3603142
[parent_id]: 3602073
[tags]: 
You need to run the run loop. If you just order the window in and then exit, that's exactly what will happen: The window will appear, and then (five seconds later) your program will exit. You can run the run loop by telling the application (which you create but don't otherwise use) to run . On the main thread of a Cocoa app, sleep is always the wrong answer. The same goes for its Cocoa cousins, +[NSThread sleepUntilDate:] and +[NSThread sleepForTimeInterval:] . The run loop will let you tell it to run for a fixed amount of time, but that won't get the application running; you do need to send the application the run message, which provides no opportunity to exit after a fixed interval. The solution there is to first create an NSTimer object whose target is the application and whose selector is @selector(terminate:) . Create it scheduled and non-repeating, with the interval set to five seconds. (Creating it scheduled means you don't need to schedule it separately—it is already ready to go from the moment you create it.) Then, send the application the run message. Five seconds later, the run loop will fire the timer, which will tell the application to terminate itself. This is assuming that you actually have a good reason to make your application quit after five seconds. As noted by Yuji, every window in modern Cocoa should use NSBackingStoreBuffered . And don't forget to release what you have created; you currently are forgetting that in the case of the view. See the Memory Management Programming Guide for Cocoa . Once you have this working, I suggest moving toward a more typical architecture for this application: Create a subclass of NSObject, and make an instance of that class your application's delegate. Put the window and its WebView into a nib, and have the app delegate create a window controller to load and own the contents of that nib. The app delegate should also be responsible for loading the page into the WebView and for setting up the self-termination timer. Finally, create a nib to hold your application's main menu (the contents of the menu bar) and the application delegate. Interface Builder has a template for the first part; you create the app delegate object by dragging a blank Object in from the Library, setting its class on the ⌘6 Inspector, and dragging the connection from the application to the object. Then, you can reduce main to the single line that Xcode's project templates put in it: return NSApplicationMain(argc, argv); . Doing all this will help your understanding of Cocoa, as well as your maintenance of the application—cramming everything into main will not scale. You should also read the Cocoa Fundamentals Guide , if you haven't already.
