[site]: stackoverflow
[post_id]: 545784
[parent_id]: 545601
[tags]: 
What you mention should be obvious to any developer but they tend to forget that as soon as they start typing. From my experience, these guidelines will help you improve: Write automatic unit tests Have an automatic build system which builds the whole product ready for production overnight Aim for a code coverage in the tests between 80% and 90% Important note: these are guidelines , not rules . Guidelines work in a changing environment while rules don't. Reasoning: When you write a test, you need to abstract your classes. You automatically begin to hide in inner details because anything else would make your tests more complex. The nightly build system will help you notice bugs within 24h or less. If you find something broken in morning on which you were working yesterday, chances are you can still remember what you were working on. This will make it much easier to find and fix the problem. As for the code coverage: You will need 20% of the time to write tests that cover 80% of your code and 80% to write tests for the next 10% and 1000% of the time (ten times) to get 100% (or rather 99.999%). If you actually get that far, every code change will break so many tests that you will stop testing. In the end, 80-90% coverage will get you much better ROI. I also suggest to read this: Thoughts on Developer Testing
