[site]: stackoverflow
[post_id]: 56894
[parent_id]: 56867
[tags]: 
Well, Josh Bloch said himself in Effective Java 2d : Prefer interfaces over abstract classes Some main points: Existing classes can be easily retrofitted to implement a new interface . All you have to do is add the required methods if they don’t yet exist and add an implements clause to the class declaration. Interfaces are ideal for defining mixins . Loosely speaking, a mixin is a type that a class can implement in addition to its “primary type” to declare that it provides some optional behavior. For example, Comparable is a mixin interface that allows a class to declare that its instances are ordered with respect to other mutually comparable objects. Interfaces allow the construction of nonhierarchical type frameworks . Type hierarchies are great for organizing some things, but other things don’t fall neatly into a rigid hierarchy. Interfaces enable safe, powerful functionality enhancements via the wrap- per class idiom. If you use abstract classes to define types, you leave the programmer who wants to add functionality with no alternative but to use inheritance. Moreover, you can combine the virtues of interfaces and abstract classes by providing an abstract skeletal implementation class to go with each nontrivial interface that you export. On the other hand, interfaces are very hard to evolve. If you add a method to an interface it'll break all of it's implementations. PS.: Buy the book. It's a lot more detailed.
