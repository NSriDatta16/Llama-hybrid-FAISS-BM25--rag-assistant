[site]: stackoverflow
[post_id]: 4659890
[parent_id]: 4654202
[tags]: 
Ok, Now that you have provided some details, Here is the answer for you. There are multiple ways to do this. one: using GUI Once you place the JTable component on the GUI designer, Right-click on the table cells( white area of the JTable ) From popup menu, choose "Table Contents.." - this shows a customizer dialog. Choose "Custom code" in "Table Model" tab. Place the following code to the text box: new javax.swing.table.DefaultTableModel( new Object [][] { {"Vinod","MCA","Computer"}, {"Deepak","PGDCA","History"}, {"Ranjan","M.SC.","Biology"}, {"Radha","BCA","Computer"}}, new String [] {"Name","Course","Subject"}) Save your changes. (Now notice that the jTable may not display properly on your designer, but that is OK) two: using code fragments Once you place the JTable component on the GUI designer, Right-click on the table cells( white area of the JTable ) From popup menu, choose properties - this shows property settings On the properties dialog, switch to code from top buttons ( properties, binding,events,code) on the grid, click on the edit button(marked '...') against "After All-set Code" option. This will allow you to edit some code after table is all set. Place the following code in to that editor (assuming your table's name is jTable1) jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object [][] { {"Vinod","MCA","Computer"}, {"Deepak","PGDCA","History"}, {"Ranjan","M.SC.","Biology"}, {"Radha","BCA","Computer"} }, new String [] { "Name","Course","Subject" })); jTable1.getTableHeader().setBackground(java.awt.Color.yellow); note: this covers the color change as well, so better control here. Save your changes
