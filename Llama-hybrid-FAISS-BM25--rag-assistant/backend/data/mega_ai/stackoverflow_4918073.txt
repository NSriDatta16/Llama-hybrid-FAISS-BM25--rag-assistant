[site]: stackoverflow
[post_id]: 4918073
[parent_id]: 4918027
[tags]: 
Food for thought. How many records are you caching, how big are the tables? How much mid-tier resources can be reserved for caching? How many of each type data exists? How fast filtering on the client side will be? How often does the data change? how often is it changed by the same application instance? how often is it changed by other applications or server side jobs? What is your cache invalidation policy? What happens if you return stale data? Can you/Should you leverage active cache invalidation, like SqlDependency or LinqToCache ? If the dataset is large then filtering on the client side will be slow and you'll need to cache two separate results (no need for a third if ALL is the union of the other two). If the data changes often then caching will return stale items frequently w/o a proactive cache invalidation in place. Active cache invalidation is achievable in the mid-tier if you control all the updates paths and there is only one mid-tier instance application, but becomes near really hard if one of those prerequisites is not satisfied.
