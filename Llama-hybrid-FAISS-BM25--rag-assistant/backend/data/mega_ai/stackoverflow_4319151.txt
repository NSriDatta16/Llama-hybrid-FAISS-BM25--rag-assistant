[site]: stackoverflow
[post_id]: 4319151
[parent_id]: 4317988
[tags]: 
The IEEE-754 standard requires that so called "basic operations" (which include addition, multiplication, division and square root) are correctly rounded . This means that there is a unique allowed answer, and it is the closest representable floating-point number to the so-called "infinitely precise" result of the operation. In double-precision, numbers have 53 binary digits of precision, so the correct answer is the exact answer rounded to 53 significant digits. As Rick Regan showed in his answer, this is exactly the result that you got. The answers to your questions are: Question 1: Is this huge amount of error allowed? Yes, but it is quite misleading to call this error "huge". The fact is that there is no double-precision value that could be returned that would have a smaller error. Question 2: Does that mean, that every basic operation should have an error No. It means that every basic operation should be rounded to the (unique) closest representable floating-point number according to the current rounding mode. This is not quite the same as saying that the relative error is bounded by machine epsilon. Question 3: Which result do you obtain with your x86 hardware and gcc + libc? The same answer you did, because sqrt is correctly rounded on any reasonable platform.
