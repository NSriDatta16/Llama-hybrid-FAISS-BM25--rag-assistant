[site]: stackoverflow
[post_id]: 5370889
[parent_id]: 5370785
[tags]: 
Why not make a table with 3 columns (you can add a primary column in addition if you'd like). I see you as needing the following: A column named, say, "day", with a type of DateTime A column named, say, "itemId", with type of Int, which is how you'll know what item was clicked A column named, say, "clicks", with a type of Int, which will be your counter So lets say our table was named, "clickTracking". You can do, "insert into clickTracking set day = date_format(now(),"%Y-%m-%d"), itemId = 1, clicks = clicks + 1 on duplicate key update clicks = clicks + 1;" I've attached some example mySQL below, with a primary key. I find the data easier to work with, if I have an auto_increment field, but it is not a requirement. mysql> create table clickTracking (id int unsigned not null primary key auto_increment,day datetime not null, itemId int unsigned not null, clicks int unsigned not null); Query OK, 0 rows affected (0.00 sec) mysql> create unique index item on clickTracking (day,itemId); Query OK, 0 rows affected (0.00 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql> insert into clickTracking set day = date_format(now(),"%Y-%m-%d"), itemId = 1, clicks = clicks + 1 on duplicate key update clicks = clicks + 1; Query OK, 1 row affected (0.00 sec) mysql> insert into clickTracking set day = date_format(now(),"%Y-%m-%d"), itemId = 1, clicks = clicks + 1 on duplicate key update clicks = clicks + 1; Query OK, 2 rows affected (0.00 sec) mysql> insert into clickTracking set day = date_format(now(),"%Y-%m-%d"), itemId = 1, clicks = clicks + 1 on duplicate key update clicks = clicks + 1; Query OK, 2 rows affected (0.00 sec) mysql> insert into clickTracking set day = date_format(now(),"%Y-%m-%d"), itemId = 2, clicks = clicks + 1 on duplicate key update clicks = clicks + 1; Query OK, 1 row affected (0.00 sec) mysql> select * from clickTracking; +----+---------------------+--------+--------+ | id | day | itemId | clicks | +----+---------------------+--------+--------+ | 1 | 2011-03-20 00:00:00 | 1 | 3 | | 2 | 2011-03-20 00:00:00 | 2 | 1 | +----+---------------------+--------+--------+ 2 rows in set (0.00 sec) There are quiet a few ways to do this. I've provided one possible solution. I prefer this method, because it makes reports easy to make, and has a minimal amount of storage on the server. I would recommend making an additional table of "items", that corresponds to the itemId here.
