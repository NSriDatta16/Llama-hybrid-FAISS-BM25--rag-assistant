[site]: datascience
[post_id]: 32701
[parent_id]: 
[tags]: 
Combine Pandas DataFrames with year columns

I'm struggling to find the most efficient way to combine multiple dataframes with columns that are years and country names for the index. As an example: GDP.csv 1900 1901 1902 USA 500 600 700 MEX 400 500 600 CAN 300 400 500 lifeEx.csv 1900 1901 1902 USA 50 60 70 MEX 40 50 60 CAN 30 40 50 I can list the dataframes and use concat to combine them, but this makes it awkward to access each dataframe. pieces = {'GDP': GDP, 'lifeEx': lifeEx} result = pd.concat(pieces) This will show me the value for one dataframe, country, and year. However, I cannot easily list all the data from all countries for a given year. print(result.loc['GDP','USA'].loc['1900']) Ideally, I think I want to use groupby() to sort the data by country, year, indicator (GDP, life expectancy, ...), or some combination of these. However, I don't see a clear way to do this. I also considered iterating over the dataframe to create a year column. However, this is not very efficient. The result would be a file that looks like this, with country and year being the key: GDP.csv year GDP USA 1900 500 USA 1901 600 USA 1902 700 MEX 1900 400 MEX 1901 500 MEX 1902 600 CAN 1900 300 CAN 1901 400 CAN 1902 500 After transforming the data like this, I could combine the dataframes using the country and year as the key. Since the column heading GDP would be unique for each data set, these columns would extend the dataframs rather than being added together. What is a more elegant solution to this problem?
