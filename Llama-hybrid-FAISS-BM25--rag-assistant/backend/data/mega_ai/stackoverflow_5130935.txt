[site]: stackoverflow
[post_id]: 5130935
[parent_id]: 5130872
[tags]: 
1.) You are assigning a new UIButton to a temporary variable. It is just an assignment. The assignment doesn't retain, so you have no memory leak. 2.) You can make a method that returns a partially configured button, then just set the different parts: - (UIButton *)myButton { UIButton *tempButton = [UIButton buttonWithType:UIButtonTypeRoundedRect]; tempButton.opaque = true; tempButton.backgroundColor = [UIColor whiteColor]; tempButton.titleLabel.font = [UIFont fontWithName:@"Helvitica-Bold" size:15];; [tempButton setTitleColor:[UIColor magentaColor] forState:UIControlStateNormal]; return tempButton; } .... IButton *tempButton = [self myButton]; [tempButton setTitle:@"button 1 title" forState:UIControlStateNormal]; tempButton.frame = CGRectMake(81, 136, 159, 37); [self.view addSubview:tempButton]; tempButton = [self myButton]; tempButton.frame = CGRectMake(81, 254, 159, 37); [tempButton setTitle:@"button 2 title" forState:UIControlStateNormal]; [self.view addSubview:tempButton]; Since you've given your buttons unique tags, you don't need to assign to iVArs like self.button1, self.button2, you can just use [self.view viewForTag: ] to retrieve the correct subview. But, as the other guy says, if you do use 'self.button1 = ', the button is retained, and you'll need to release in your dealloc, and worry about calls to -[view didUnload] -- if you don't release there, then you'll have pointers to buttons that are no longer in the view.
