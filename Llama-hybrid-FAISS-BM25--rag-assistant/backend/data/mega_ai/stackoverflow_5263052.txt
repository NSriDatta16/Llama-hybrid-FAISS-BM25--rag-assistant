[site]: stackoverflow
[post_id]: 5263052
[parent_id]: 
[tags]: 
My(SQL) selecting random rows, novel way, help to evaluate how good is it?

I again run into problem of selecting random subset of rows. And as many probably know ORDER BY RAND() is quite inefficient, or at least thats the consensus. I have read that mysql generates random value for every row in table, then filters then orders by these random values and then returns set. The biggest performance impact seems to be from the fact that there as many random numbers generated as there are rows in a table. So i was looking for possibly better way to return random subset of results for such query: SELECT id FROM WHERE LIMIT 10; Of course simplest and easiest way to do what i want would be the one witch I try to avoid: SELECT id FROM WHERE ORDER BY RAND() LIMIT 10; (a) Now after some thinking i came up with other option for this task: SELECT id FROM WHERE ( ) AND RAND() > x LIMIT 10; (b) (Of course we can use instead of > ) Here we take x from range 0.0 - 1.0 . Now I'm not exactly sure how MySQL handles this but my guess is that it first selects rows matching (using index[es]?) and then generates random value and sees if it should return or discard row. But what do i know:) thats why i ask here. So some observations about this method: first it does not guarantee that asked number of rows will be returned even if there is much more matching rows than needed, especially true for x values close to 1.0 (or close to 0.0 if we use ) returned object don't really have random ordering, they are just objects selected randomly, order by index used or by the way they are stored(?) (of course this might not matter in some cases at all) we probably need to choose x according to size of result set, since if we have large result set and x is lets say 0.1 , it will be very likely that only some random first results will be returned most of the time; on the other hand if have small result set and choose large x it is likely that we might get less object than we want, although there are enough of them Now some words about performance. I did a little testing using jmeter. has about 20k rows, and there are about 2-3k rows matching . I wrote simple PHP script that executes query and print_r 's the result. Then I setup test using jmeter that starts 200 threads, so that is 200 requests per second, and requests said PHP script. I ran it until about 3k requests were done (average response time stabilizes well before this). Also I executed all queries with SQL_NO_CACHE to prevent query cache having some effect. Average response times were: ~30ms for query (a) 13-15ms for query (b) with x = 0.1 17-20ms for query (b) with x = 0.9 , as expected larger x is slower since it has to discard more rows So my questions are: what do you think about this method of selecting random rows? Maybe you have used it or tried it and see that it did not work out? Maybe you can better explain how MySQL handles such query? What could be some caveats that I'm not aware of? EDIT: I probably was not clear enough, the point is that i need random rows of query not simply table, thus I included and there are quite some. Moreover table is guaranteed to have gaps in id, not that it matters much since this is not random rows from table but from query, and there will be quite a lot such queries so those suggestions involving querying table multiple times do not sound appealing. will vary at least a bit between requests, meaning that there will be requests with different conditions.
