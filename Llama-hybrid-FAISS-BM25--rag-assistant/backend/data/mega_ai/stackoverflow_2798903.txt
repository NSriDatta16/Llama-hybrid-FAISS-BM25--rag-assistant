[site]: stackoverflow
[post_id]: 2798903
[parent_id]: 2798803
[tags]: 
Name of settings folder: ~/.foo/ -- this is well and good, but how do I keep my working copy and my development copy separate? Have a default of ~/.foo , and an option (for example --config-directory ) that you can use to override the default while developing. If my program needs to maintain and update library of data (gps tracklog data in this case) where should this directory be? If your script is running under a normal user account, this will have to be somewhere in the user's home directory; elsewhere, you'll have no write permissions. Perhaps ~/.foo/tracklog or something? Again, add a command line option, and also an option in the configuration file, to override this. I'm not a fan of your ~/gpsdata default; I don't want my home directory cluttered with all sorts of directories that programs created without my consent. You see this happen on Windows a lot, and it's really annoying. (Saved games in My Documents? Get out of here!) The program needs a data "inbox" that is a folder that the user can dump files, then run the script to process these files. I was thinking ~/gpsdata/in/ ? As stated above, I'd prefer ~/.foo/inbox . Also with command-line option and configuration file option to change this. But do you really need an inbox? If the user needs to run the script manually over some files, it might be better just to accept those file names on the command line. They could just be processed wherever, without having to move them to a "magic" location. Where should the script its self go? This is usually up to the packaging system of the particular OS you're running on. When installing from source, /usr/local/bin is a sensible default that won't interfere with package managers. Is there a simple way to do a really basic encryption on a file like this to deter idiots armed with notepad? Yes, there is. But it's better not to, because it creates a false sense of security. Without a master password or something, secure storage is not possible! Pidgin, for example, explicitly stores passwords in plain text, so that users won't make any false assumptions about their passwords being stored "securely". So it's best just to store them in plain text, complain if the file is world-readable, and add a clear note to the manual to warn the user what's going on. Bottom line: don't try to reinvent the wheel. There have been thousands of scripts and programs that faced the same issues; most of them ended up adopting the same conventions, and for good reasons. Look at what they do, and mimic them instead of reinventing the wheel.
