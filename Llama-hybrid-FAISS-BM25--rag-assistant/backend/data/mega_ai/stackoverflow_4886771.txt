[site]: stackoverflow
[post_id]: 4886771
[parent_id]: 4885363
[tags]: 
I can see debate rages in the other answers, but I'm not sure if it's possible to come to a good solution without examining your example in more depth. Firstly, you have three classes, the Roll, the Parser creating the stickers and the stickers themselves (divided into the derived classes). Perhaps there's another class implementing some business logic that you haven't mentioned? It might be worth describing... The first question is: Given that some class is responsible for attaching the stickers to the roll (the Parser class?), can you leave the roll entirely ambivalent to which stickers it's receiving, and place your logic elsewhere? Is the logic of what to do when sticker is of type X really something for the roll to know about, given that it's not the roll that's going out and getting the stickers? The second is: How polymorphic ARE your stickers? Do they have different methods? Do they have different properties? Or are they similar enough that you can just put a label on a StickerBase class? The third is: Should it be up to the stickers to tell the roll what to do? I.E. should the roll be calling the method sticker.TellMeWhatToDoNextPlease() (implemented as a virtual method and ovveridden in the derived classes of sticker) - especially as the roll isn't responsible for what people are trying to stick on it. You could ask the same question of the class that's responsible for putting the stickers on the roll. You could train a monkey to do it and let the roll figure it out, or you could put your logic there, (if it's where the stickers are being made it should already know what it's making) and let the roll accept what it's stuck with. Basically - what controls your process? The roll of paper getting stickers stuck on it, the stickers themselves, or whatever makes and sticks the stickers?
