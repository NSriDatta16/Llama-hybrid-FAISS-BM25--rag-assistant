[site]: stackoverflow
[post_id]: 5289178
[parent_id]: 5288507
[tags]: 
You can generate any sort and amount of code in most modern Prolog environment using term expansion , with some help from the universal operator . The following example works for SWI: term_expansion(gen_tellme(N), Terms) :- findall((tellme(F) :- tellme(X)), (between(1, N, I), atom_concat(friend, I, Fi), F =.. [Fi, X]), Terms). gen_tellme(25). % generates 25 copies of the tellme clause. That said, embedding information into the predicate name, i.e., the friend number, is generally not a good design. Why not rewrite the code using friend(N, X) , where N is the number?
