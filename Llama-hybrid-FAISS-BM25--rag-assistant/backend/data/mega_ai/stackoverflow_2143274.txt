[site]: stackoverflow
[post_id]: 2143274
[parent_id]: 2142979
[tags]: 
I would assume memcached has some mechanism for handling read and write conflicts. This issue will only matter on a very high traffic site. Edit: Found a question "Is_memcached_atomic?" in the memcached FAQ : All individual commands sent to memcached are absolutely atomic. If you send a set and a get in parallel, against the same object, they will not clober each other. They will be serialized and one will be executed before the other. Even in threaded mode, all commands are atomic. If they are not, it's a bug :) I don't think the issue you describe will be much of a problem. Without going into the Rails internals, it is still possible in a multiple-vm Rails environment that there may be a cache miss, but the worst case scenario is simply that the fragment is generated by requests that happen to have the timing exactly right. Unless you fragment is hugely expensive (seconds rather than milliseconds) and your traffic and infrastructure is massive (multiple rails instances, hundreds of requests a second), I doubt it will be an issue.
