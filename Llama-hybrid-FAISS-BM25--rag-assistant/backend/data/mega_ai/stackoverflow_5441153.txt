[site]: stackoverflow
[post_id]: 5441153
[parent_id]: 5440688
[tags]: 
I think I found an O(log^2(p + q)) algorithm. To avoid confusion in the next paragraph, a "query" refers to when the guesser gives the challenger a guess, and the challenger responds "bigger" or "smaller". This allows me to reserve the word "guess" for something else, a guess for p + q that is not asked directly to the challenger. The idea is to first find p + q, using the algorithm you describe in your question: guess a value k, if k is too small, double it and try again. Then once you have an upper and lower bound, do a standard binary search. This takes O(log(p+q)T) queries, where T is an upper bound for the number of queries it takes to check a guess. Let's find T. We want to check all fractions r/s with r + s We will never guess a value of k greater than 2(p + q). Hence we can take T = O(log(p+q)). When we guess the correct value for k (i.e., k = p + q), we will submit the query p/q to the challenger in the course of checking our guess for k, and win the game. Total number of queries is then O(log^2(p + q)).
