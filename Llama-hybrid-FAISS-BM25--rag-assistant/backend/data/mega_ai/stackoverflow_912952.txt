[site]: stackoverflow
[post_id]: 912952
[parent_id]: 38239
[tags]: 
Another good option is Scilab . It has graphic modules Ã  la LabVIEW , it has its own programming language and you can also embed Fortran and C code, for example. It's being used in public and private sectors, including big industrial companies. And it's free. About versioning, some prefer Mercurial , as it gives more liberties managing and defining the repositories. I have no experience with it, however. For plotting I use Matplotlib . I will soon have to make animations, and I've seen good results using MEncoder . Here is an example including an audio track. Finally, I suggest going modular, this is, trying to keep main pieces of code in different files, so code revision, understanding, maintenance and improvement will be easier. I have written, for example, a Python module for file integrity testing, another for image processing sequences, etc. You should also consider developing with the use a debugger that allows you to check variable contents at settable breakpoints in the code, instead using print lines. I have used Eclipse for Python and Fortran developing (although I got a false bug compiling a Fortran short program with it, but it may have been a bad configuration) and I'm starting to use the Eric IDE for Python. It allows you to debug, manage versioning with SVN , it has an embedded console, it can do refactoring with Bicycle Repair Man (it can use another one, too), you have Unittest, etc. A lighter alternative for Python is IDLE , included with Python since version 2.3. As a few hints, I also suggest: Not using single-character variables. When you want to search appearances, you will get results everywhere. Some argue that a decent IDE makes this easier, but then you will depend on having permanent access to the IDE. Even using ii, jj and kk can be enough, although this choice will depend on your language. (Double vowels would be less useful if code comments are made in Estonian, for instance). Commenting the code from the very beginning. For critical applications sometimes it's better to rely on older language/compiler versions (major releases), more stable and better debugged. Of course you can have more optimized code in later versions, fixed bugs, etc, but I'm talking about using Fortran 95 instead of 2003, Python 2.5.4 instead of 3.0, or so. (Specially when a new version breaks backwards compatibility.) Lots of improvements usually introduce lots of bugs. Still, this will depend on specific application cases! Note that this is a personal choice, many people could argue against this. Use redundant and automated backup! (With versioning control).
