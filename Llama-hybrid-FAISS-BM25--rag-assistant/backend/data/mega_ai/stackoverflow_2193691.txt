[site]: stackoverflow
[post_id]: 2193691
[parent_id]: 2186739
[tags]: 
When sitting down with members of my team and scoping out the components of a piece of functionality they have assigned to them, they tend to work from top to bottom because they feel more comfortable starting by defining what they need through that approach. We employ a TDD approach to development, and when writing their tests, the developers typically start by writing a unit test for their new controller action, dictating what its behaviour should be and from that typically work out the dependencies required. This might involve creating new classes/methods and they do that as well as creating the interfaces and passing the interfaces into the controller (heavy use of IOC). That gives them the next level of interfaces to write tests against, and the same approach is then taken of writing the tests first, working out any necessary dependencies (and creating them if necessary). Tests can still be written against mocked up versions of those interfaces, so there is no need to go writing your implementation until you've also written the tests against those interfaces. This means we have 100% coverage from top to bottom and the result is often a well thought out solution to a problem. When I approach a problem, I'll often start from the bottom because I already have it all mapped out in my head and on paper, but I can see the benefits of the above approach - less likely to end up falling into the YAGNI trap and you end up with only the code you need.
