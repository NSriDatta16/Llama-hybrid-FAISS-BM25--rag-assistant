[site]: crossvalidated
[post_id]: 636150
[parent_id]: 
[tags]: 
Determining an efficient index on sample sets

Context: I have an ever-growing data set of samples. (It consists of around $500$ samples currently.) Each sample in this set is an $m \times 3$ matrix where the $m$ rows represent $m$ different measurement sites and each row holds a $3$ -dimensional vector that is measured at that site. The same measurement sites are used for all samples. The number of sites $m$ is also around $500$ . Since measurement sites have some logical spatial distribution it is expected that measurements on nearby sites will be correlated. Problem: I want to determine a good "index" such that, given a new sample, this index helps to find a nearby sample in the given set. ( The nearest is not a requirement, nor can it be expected.) The idea is to determine a small subset of the $m$ measurement sites such that it is sufficient to take measurements only at this subset. (Since measurements are not free, it is preferred to use as little measurement sites for an index as possible.) Then nearby samples can be located using some spatial data structure (e.g., an R-tree or kd-tree) on this limited set of measurements. As an extreme example and motivation: suppose measurements at two measurement sites would be identical for all samples, then clearly not both sites would be needed in this index. Question: How would you go about determining a good index? Simply trying out all possible sets and pick one by some cross validation method would not scale very well. My approach so far: Whiten the samples per measurement site. Flatten each sample into a single $3m$ -dimensional vector. Use PCA to find a number $m'$ of components that capture a high portion of the variation in the samples. Then select $m''$ (at least $m'/3$ ) measurement sites such that the projection onto these sites is closest to the projection onto the $m'$ components provided by PCA. Also, something like multi-variate CCA seems to be somehow relevant, but at the moment I do not know how (or even which version of CCA) to apply to this problem. Suggestions or pointers would be highly appreciated!
