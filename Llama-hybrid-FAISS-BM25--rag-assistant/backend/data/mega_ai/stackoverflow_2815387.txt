[site]: stackoverflow
[post_id]: 2815387
[parent_id]: 2815083
[tags]: 
No matter which algorithm you choose, you have a tradeoff between speed and memory consumption. If you can afford ~ O(N*L) memory (where N is the size of your dictionary and L is the average length of a word), you can try this very fast algorithm. For simplicity, will assume latin alphabet with 26 letters and MAX_LEN as the max length of word. Create a 2D array of sets of integers, set table[26][MAX_LEN]. For each word in you dictionary, add the word index to the sets in the positions corresponding to each of the letters of the word. For example, if "orange" is the 12345-th word in the dictionary, you add 12345 to the sets corresponding to [o][0], [r][1], [a][2], [n][3], [g][4], [e][5]. Then, to retrieve words corresponding to "or..ge", you find the intersection of the sets at [o][0], [r][1], [g][4], [e][5].
