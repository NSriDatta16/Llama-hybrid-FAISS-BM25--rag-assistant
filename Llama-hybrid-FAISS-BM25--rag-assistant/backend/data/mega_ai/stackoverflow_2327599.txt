[site]: stackoverflow
[post_id]: 2327599
[parent_id]: 2327498
[tags]: 
This reminds me of the REST vs. SOA debate, albeit on a smaller physical scale. If I understand you correctly, right now you have calls like device->DoThing(); device->DoOtherThing(); and then sometimes I get a callback like callback->DoneThing(ThingResult&); callback->DoneOtherTHing(OtherThingResult&) I suggest that the user is the key component here. Do the current library users like the interface at the level it is designed? Is the interface consistent, even if it is large? You seem to want to propose device->Do(ThingAndOtherThingParameters&) callback->Done(ThingAndOtherThingResult&) so to have a single entry point with more complex data. The downside from a library user perspective may that now I have to use a manual switch() or other type statement to tell what really happened. While the dispatching to the appropriate result callback used to be done for me, now you have made it a burden upon the library user. Unless this bought me as a user some level of flexibility, that I as as user wanted I would consider this a step backwards. For your part as an implementor, one suggestion would be to go to the generic form internally, and then offer both interfaces externally. Perhaps the old specific interface could even be auto-generated somehow. Good Luck.
