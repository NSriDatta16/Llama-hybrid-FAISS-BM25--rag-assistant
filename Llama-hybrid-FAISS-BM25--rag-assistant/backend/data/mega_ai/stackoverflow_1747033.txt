[site]: stackoverflow
[post_id]: 1747033
[parent_id]: 174968
[tags]: 
I agree with Robert Martin's quote in Clean Code ( as cited above ): the fewer parameters the better. More than 5-7 parameters and method calls become pretty hard to comprehend. Things get especially bad if some of the parameters are optional (and so take null values), or if all the parameters have the same type (making it even harder to figure out which parameter is which). If you can bundle parameters into cohesive domain objects like Customer and Account, your code will be much more pleasant to work with. There is an edge case: if you have a method call that takes a variable number of parameters which form a logical set , there's less cognitive overhead having more parameters. For example you may need a method that specifies a number of HTTP request retries, in terms of the number of milliseconds between retries. Three retries at 1s, 2s, and 3s intervals could be specified as: retries(1000, 2000, 3000) In this limited case, adding more parameters to a call doesn't increase the mental overload that much. Another consideration is if your language supports named parameter lists and allows you to leave out optional parameters. Larger named parameter lists are easier to comprehend than larger unnamed parameter lists. But I'd still err on the side of fewer rather than more parameters.
