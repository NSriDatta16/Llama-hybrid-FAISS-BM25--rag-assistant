[site]: stackoverflow
[post_id]: 799578
[parent_id]: 773184
[tags]: 
A safe way to do is to sandbox the alleged function while testing its type: function isFunction(expr) { function sandboxTemplate() { var window, document, alert; // etc. try { return typeof $expr$ == "function"; } catch (e) { return false; } } try { var sandbox = new Function( sandboxTemplate.toString().replace("$expr$", expr) + "return sandboxTemplate()"); return sandbox(); } catch (e) { return false; } } function test(expr) { document.write(" \"" + expr + "\" is " + (isFunction(expr) ? "" : "not ") + " a function "); } /* Let's do some testing */ function realFunction() { } test("realFunction"); // exists! test("notHere"); // non-existent test("alert('Malicious')"); // attempt to execute malicious code! test("syntax error {"); // attempt to blow us up! The output: "realFunction" is a function "notHere" is not a function "alert('Malicious')" is not a function "syntax error {" is not a function The sandboxing code could be written in a more concise manner but I like using "template" functions instead of embedding JS code as string literals. And oh, this does it nicely without using eval -- though one can argue that using a Function constructor is no different than an eval .
