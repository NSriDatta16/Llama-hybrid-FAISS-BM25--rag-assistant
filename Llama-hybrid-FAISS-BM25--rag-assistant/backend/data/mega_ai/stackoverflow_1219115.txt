[site]: stackoverflow
[post_id]: 1219115
[parent_id]: 
[tags]: 
Refactoring Windows Forms Application

I am developing a windows forms application. It was basically evovled with a mix of BDUP and prototyping. I have about 1500 lines of code (excluding IDE generated partial class... 1465 to be exact) in the form and the form has 6 tabs (9 subtabs). Does not have more than 10 controls in each form so multiple form solution would be an overkill. I have a set of entity classes that when serialized give me an XML representation that I store in an XML file. I've encapsulated this with a Repository pattern so I could move the storage to a database in future. The form uses the entity classes (for save/edit) and the Repo factory (add, retrieve and save). Now, my problem is that much of the 1500 lines of code deals with interaction between UI elements (making a choice in a Combo disables some elements, or displays different items in a grid, handle tab transitions (next/back buttons), loading menus (each distinct item in the xml file repository becomes a menu item), new/edit mode etc (I've three distinct sets of new/edit on the same form). What would be best approach here to move the element interaction out? Let's say, I may decide to make it web-based UI in future. More importantly what are the composite refactorings I can apply? What patterns I should refactor to / towards? Thanks for helping out. Note: I'm reading Refactoring to Patterns... Specifically I wanted to have a "howto"/tips on Refactoring to MVC...
