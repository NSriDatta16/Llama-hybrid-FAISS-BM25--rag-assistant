[site]: stackoverflow
[post_id]: 4427586
[parent_id]: 4423817
[tags]: 
In your Application, I am confused with ArtifactId since, I see you have give as "example" where as you are passing your argument as "simple" . Here is the simple example for creating a new artifact. 1. Create a new project and pom.xml for the archetype artifact An example pom.xml for an archetype artifact looks as follows: 4.0.0 my.groupId my-archetype-id 1.0-SNAPSHOT jar All you need to specify is a groupId, artifactId and version. These three parameters will be needed later for invoking the archetype via archetype:create from the commandline. 2. Create the archetype descriptor The archetype descriptor is a file called archetype.xml which must be located in the src/main/resources/META-INF/maven/ directory. An example of an archetype descriptor can be found in the quickstart archetype: quickstart src/main/java/App.java src/test/java/AppTest.java The tag should be the same as the artifactId in the archetype pom.xml. An optional true tag makes it possible to run the archetype:create even on existing projects. The , , , and tags represent the different sections of the project: = src/main/java = src/main/resources = src/test/java = src/test/resources = src/site and can contain elements that specify a source file. and can contain elements that specify a resource file. Place other resources such as the ones in the src/main/webapp directory inside the tag. At this point one can only specify individual files to be created but not empty directories. Thus the quickstart archetype shown above defines the following directory structure: archetype |-- pom.xml `-- src `-- main `-- resources |-- META-INF | `-- maven | `--archetype.xml `-- archetype-resources |-- pom.xml `-- src |-- main | `-- java | `-- App.java `-- test `-- java `-- AppTest.java 3. Create the prototype files and the prototype pom.xml The next component of the archetype to be created is the prototype pom.xml. Any pom.xml will do, just don't forget to the set artifactId and groupId as variables ( ${artifactId} / ${groupId} ). Both variables will be initialized from the commandline when calling archetype:create. An example for a prototype pom.xml is: 4.0.0 ${groupId} ${artifactId} ${version} jar A custom project http://www.myorganization.org junit junit 3.8.1 test 4. Install the archetype and run the archetype plugin Now you are ready to install the archetype: mvn install Now that you have created an archetype, you can try it on your local system by using the following command. In this command, you need to specify the full information about the archetype you want to use (its groupId, its artifactId, its version) and the information about the new project you want to create (artifactId and groupId). Don't forget to include the version of your archetype (if you don't include the version, you archetype creation may fail with a message that version:RELEASE was not found) mvn archetype:create \ -DarchetypeGroupId= \ -DarchetypeArtifactId= \ -DarchetypeVersion= \ -DgroupId= \ -DartifactId= Once you are happy with the state of your archetype, you can deploy (or submit it to ibiblio) it as any other artifact and the archetype will then be available to any user of Maven. Alternative way to start creating your Archetype Instead of manually creating the directory structure needed for an archetype, simply use mvn archetype:create -DgroupId=[your project's group id] -DartifactId=[your project's artifact id] -DarchetypeArtifactId=maven-archetype-archetype Afterwhich, you can now customize the contents of the archetype-resources directory, and archetype.xml, then, proceed to Step#4 (Install the archetype and run the archetype plugin).
