[site]: stackoverflow
[post_id]: 1567630
[parent_id]: 1566936
[tags]: 
A more permanent solution is to subclass float : >>> class prettyfloat(float): def __repr__(self): return "%0.2f" % self >>> x [1.290192, 3.0002, 22.119199999999999, 3.4110999999999998] >>> x = map(prettyfloat, x) >>> x [1.29, 3.00, 22.12, 3.41] >>> y = x[2] >>> y 22.12 The problem with subclassing float is that it breaks code that's explicitly looking for a variable's type. But so far as I can tell, that's the only problem with it. And a simple x = map(float, x) undoes the conversion to prettyfloat . Tragically, you can't just monkey-patch float.__repr__ , because float 's immutable. If you don't want to subclass float , but don't mind defining a function, map(f, x) is a lot more concise than [f(n) for n in x]
