[site]: stackoverflow
[post_id]: 1608932
[parent_id]: 1608854
[tags]: 
I don't have an answer specifically to your question, but I would like to point out that the white list vs black list approach not just "nice". It's important. Very important. When it comes to security, every little thing is important. Remember that with cross-site scripting and cross-site request forgery , even if your site is not showing sensitive data, a hacker could infect your site by injecting javascript and use it to get sensitive data from another site. So doing it right is critical. OWASP guidelines specify using a white list approach . PCI Compliance guidelines also specify this in coding standards (since they refer tot he OWASP guidelines). Also, the newer version of the AntiXss library has a nice new function: .GetSafeHtmlFragment() which is nice for those cases where you want to store HTML in the database and have it displayed to the user as HTML. Also, as for the "bug", if you're coding properly and following all the security guidelines, you're using parameterized stored procedures, so the single quotes will be handled correctly, If you're not coding properly, no off the shelf library is going to protect you fully. The AntiXss library is meant to be a tool to be used, not a substitute for knowledge. Relying on the library to do it right for you would be expecting a really good paintbrush to turn out good paintings without a good artist. Edit - Added As asked in the question, an example of where the anti xss will protect you and HttpUtility will not: HttpUtility.HtmlEncode and Server. HtmlEncode do not prevent Cross Site Scripting That's according to the author, though. I haven't tested it personally. It sounds like you're up on your security guidelines, so this may not be something I need to tell you, but just in case a less experienced developer is out there reading this, the reason I say that the white-list approach is critical is this. Right now, today, HttpUtility.HtmlEncode may successfully block every attack out there, simply by removing/encoding and > , plus a few other "known potentially unsafe" characters, but someone is always trying to think of new ways of breaking in. Allowing only known-safe (white list) content is a lot easier than trying to think of every possible unsafe bit of input an attacker could possibly throw at you (black-list approach).
