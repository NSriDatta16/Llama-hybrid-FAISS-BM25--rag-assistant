[site]: stackoverflow
[post_id]: 1101769
[parent_id]: 1082453
[tags]: 
((M) k).getClass() gives K. Why is that? It was casted to the more general M! A useful analogy (that I got from Bill Venners' site artima.com) that may help clear the confusion is that the difference between classes and objects is like the difference between an architect's blueprint and the actual house that is built. The blueprint exists on paper and is a concept, while the house exists in real life. You can have more than one house built to the same blueprint. How is that relevant to this question? Let's say there's a McMansion blueprint and a McMansionWithHeatedPool blueprint. A McMansionWithHeatedPool is an extension of a McMansion with a heated pool. Now, if you see a real McMansionWithHeatedPool , for that object: Conceptually (i.e., if you look at the architect's blueprints), you would see that a McMansionWithHeatedPool is clearly also a McMansion . Hence the upcast is allowed. (For the same reason, a McMansion object cannot be type cast into a McMansionWithHeatedPool : no heated pool!) (( McMansion ) k).getClass() gives McMansionWithHeatedPool because k is still a McMansionWithHeatedPool . The type cast is on the expression, not on the object.
