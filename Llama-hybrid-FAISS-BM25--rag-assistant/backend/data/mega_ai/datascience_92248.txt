[site]: datascience
[post_id]: 92248
[parent_id]: 92237
[tags]: 
A simple representation of the problem in terms of a genetic algorithm could be something like this: A gene represents a chemical and the values it takes represent the proportion of the chemical in the drug An individual is a combination of N genes/chemicals, each with their particular proportion A cross-over is the combination of the genes of two individuals A and B, either by picking randomly the value of either A or B for each gene or by some other kind of aggregation. A mutation is the random modification of a gene to a different proportion. The standard genetic algorithm works like this: Randomly pick a set of say 100 individuals (first generation) Calculate the "performance" of every individual, i.e. evaluate how good this particular combination of chemicals proportions is. Select say the top 10 individuals according to their performance, then produce the next generation of 100 individuals by cross-over among these top 10. Optionally add some random mutations to the new individuals' genes. Iterate again from step 2. Keep iterating unless some stop condition is satisfied, for example the average performance over the last 5 generations doesn't increase anymore. As far as I understand the task, the main problem is the evaluation in step 2: if there is no automatic way to evaluate the performance of a combination of chemicals, it's impossible to use the genetic algorithm. In theory the evaluation doesn't need to be automatic, one could imagine doing a manual experiment for every individual, but that means performing thousands of experiments, a lot of them probably useless.
