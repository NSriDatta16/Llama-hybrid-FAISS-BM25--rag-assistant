[site]: stackoverflow
[post_id]: 1739948
[parent_id]: 1738658
[tags]: 
Consider the merge function within mergesort. During the merge process, you are of course comparing elements with one another. Convince yourself that, if you're merging 2 sorted lists A and B, and if both lists contain the same value x, then it will happen that the two identical elements will be compared with one another. If you want a proof, my approach would be to show that if there is a case where two identical elements are not compared, then one or both of the lists are in fact unsorted. Proof by contradiction, baby! So you can easily detect cases whereby there are two identical elements in two lists being merged. Next, convince yourself that if there are two identical elements in two lists not being merged just now, that eventually they will be merged together and the identical elements will be detected. That's basically a proof by induction --- if nothing else, clearly the very last merge (merging sorted lists of length n/2 and n/2 into the final list of length n) will bring those elements together. Lastly, convince yourself that there cannot exist a singular list with two of the same element, if you recurse to the n = 1 or n = 0 case. This is again inductive-ish because of course any larger list will first have to survive the "filtering" process described in the first big paragraph. If you are convinced of those three things, then it will be apparent that Steven's or Tim's solutions are quite suitable.
