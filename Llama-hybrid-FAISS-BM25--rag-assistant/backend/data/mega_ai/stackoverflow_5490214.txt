[site]: stackoverflow
[post_id]: 5490214
[parent_id]: 
[tags]: 
Method design - clarity or multifunction

I've made a class in both Java and C# that allows me to perform SQL queries, as an example I have a method called Delete which accepts several parameters; public static int Delete(String table, String column, String operand, Object value) I have the value as an Object type as I may want to delete rows based on String, Integers or booleans, this means the method is flexible enough to support the different types. I then append additional " ' " characters to the query depending on whether it is a string or not by using the instanceof test in Java (or .GetType in C#) Crude example: if (value instanceof String) { System.out.println("It's a String"); } else { System.out.println("It's not a String"); } When implementing the rest of the class I began to think to myself whether the previously mentioned method is an ideal way or whether I should implement additional methods for specific data types, one to accomodate String, another for Integer and so on. If I went about implementing this then it would mean that there would be additional methods with mimnimal difference in logic, however each method only has one purpose making them simple to follow and document. On the other hand if I keep it the way it is then there is a lot less code to be produced and maintained, it can manage any type of Delete statement (in terms of data types) and there only needs to be a few if statements to determine the type of object that was passed in via the parameter. Which is the best approach to follow from a object-orientated / best code practices point of view? Thanks for the information!
