[site]: stackoverflow
[post_id]: 4648502
[parent_id]: 349951
[tags]: 
I had to research this recently, so found this old question that was begging for a more complete answer. Just to be totally explicit: TSQL does not (by itself) have the ability to launch other TSQL operations asynchronously . That doesn't mean you don't still have a lot of options (some of them mentioned in other answers): Custom application : Write a simple custom app in the language of your choice, using asynchronous methods. Call a SQL stored proc on each application thread. SQL Agent jobs : Create multiple SQL jobs, and start them asynchronously from your proc using sp_start_job . You can check to see if they have finished yet using the undocumented function xp_sqlagent_enum_jobs as described in this excellent article by Gregory A. Larsen. (Or have the jobs themselves update your own JOB_PROGRESS table as Chris suggests.) You would literally have to create separate job for each parallel process you anticipate running, even if they are running the same stored proc with different parameters. OLE Automation : Use sp_oacreate and sp_oamethod to launch a new process calling the other stored proc as described in this article , also by Gregory A. Larsen. DTS Package : Create a DTS or SSIS package with a simple branching task flow. DTS will launch tasks in individual spids. Service Broker : If you are on SQL2005+, look into using Service Broker CLR Parallel Execution : Use the CLR commands Parallel_AddSql and Parallel_Execute as described in this article by Alan Kaplan (SQL2005+ only). Scheduled Windows Tasks : Listed for completeness, but I'm not a fan of this option. I don't have much experience with Service Broker or CLR, so I can't comment on those options. If it were me, I'd probably use multiple Jobs in simpler scenarios, and a DTS/SSIS package in more complex scenarios. One final comment : SQL already attempts to parallelize individual operations whenever it can*. This means that running 2 tasks at the same time instead of after each other is no guarantee that it will finish sooner. Test carefully to see whether it actually improves anything or not. We had a developer that created a DTS package to run 8 tasks at the same time. Unfortunately, it was only a 4-CPU server :) *Assuming default settings. This can be modified by altering the server's Maximum Degree of Parallelism or Affinity Mask, or by using the MAXDOP query hint.
