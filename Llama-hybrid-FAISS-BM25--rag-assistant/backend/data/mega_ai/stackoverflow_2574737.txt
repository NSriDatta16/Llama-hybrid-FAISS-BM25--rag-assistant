[site]: stackoverflow
[post_id]: 2574737
[parent_id]: 2574725
[tags]: 
but people say is bad practice. Who says this? At the very least, that’s a controversial statement. It seems to be all the rage at the moment, and many prominent C# blogs use it extensively. The advantage over using a constructor is that it’s more readable since the code clearly shows which properties get assigned what values. Compare: var x = new Something { Foo = 1, Bar = 2 }; with var x = new Something(1, 2); Furthermore, if no appropriate constructor is present, the code is more concise than manually assigning to properties: var x = new Something(); x.Foo = 1; x.Bar = 2; Personally, I prefer immutable objects (i.e. objects that, once created, cannot be changed). Unfortunately, the initializer blocks cannot be used in conjunction with such objects ( at the moment ) because to make this pattern work the object has to have property setters, which an immutable object doesn’t have. But as long as the object used isn’t immutable I don’t see a compelling reason against using the initializer notation.
