[site]: stackoverflow
[post_id]: 3087439
[parent_id]: 
[tags]: 
does free always (portably) frees & reserve memory for the process or returns to the OS

I have read that free() "generally" does not return memory to the OS. Can we portably make use of this feature of free(). For example,is this portable? /* Assume I know i would need memory equivalent to 10000 integers at max during the lifetime of the process */ unsigned int* p = malloc(sizeof(unsigned int) * 10000); if ( p == NULL) return 1; free(p); /* Different points in the program */ unsigned int* q = malloc(sizeof(unsigned int) * 5); /* No need to check for the return value of malloc */ I am writing a demo where I would know in advance how many call contexts to support. Is it feasible to allocate "n" number of "call contexts" structures in advance and then free them immediately. Would that guarantee that my future malloc calls would not fail? Does this give me any advantage with regards to efficiency? I am thinking one less "if" check plus would memory management work better if a large chunk was initially acquired and is now available with free. Would this cause less fragmentation?
