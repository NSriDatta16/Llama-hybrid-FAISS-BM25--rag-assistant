[site]: stackoverflow
[post_id]: 1301211
[parent_id]: 1301149
[tags]: 
This works: import collections data= [ {'x': 1.0, 'y': 0.5, 'z': 0.25 }, {'w': 0.5, 'x': 0.2 } ] tally = collections.defaultdict(lambda: (0.0, 0)) for d in data: for k,v in d.items(): sum, count = tally[k] tally[k] = (sum+v, count+1) results = {} for k, v in tally.items(): t = tally[k] results[k] = t[0]/t[1] print results I don't know if it's faster than yours, since you haven't posted your code. {'y': 0.5, 'x': 0.59999999999999998, 'z': 0.25, 'w': 0.5} I tried in tally to avoid storing all the values again, simply accumulating the sum and count I'd need to compute the average at the end. Often, the time bottleneck in a Python program is in the memory allocator, and using less memory can help a lot with speed.
