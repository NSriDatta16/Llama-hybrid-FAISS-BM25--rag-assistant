[site]: stackoverflow
[post_id]: 3893093
[parent_id]: 3892961
[tags]: 
A few points: Don't use strings. You might even be able to make them work here with some contortions on *_StringAndSize() functions, but it won't be what you want. You should store your data in a custom data structure (or a buffer) that is just a sequence of bytes (do you really want clients performing string operations on this data in Python?). If your object really is a buffer object, you should use the Buffer API . Your imported module has a refcount of 2 because it's being held in sys.modules (for efficiency for the next time you try to import it). Never decref references you don't own or you'll crash your program. The Importing Modules section of the documentation should really cover this, but it doesn't. It's pretty expensive to initialize Python and tear it down every time you do these operations. You should try to reorganize your use case such that you can call Py_Initialize only once when your application starts (or the first time it needs Python), and then only call Py_Finalize when your application is definitely done with Python, or when it quits. You're being very lazy with error checking - most of the Python C/API functions can return NULL to indicate that an exception has been thrown, and you're almost never checking this value. If something fails you're going to start crashing in very odd places. You can read about this in the Exception Handling section of the C/API manual.
