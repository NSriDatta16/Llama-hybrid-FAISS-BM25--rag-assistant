[site]: stackoverflow
[post_id]: 1978490
[parent_id]: 1978438
[tags]: 
Uhh, I don't know why everyone suggests serializing the array. I say, the best way is to actually fit it into your database schema. I have no idea (and you gave no clues) about the actual semantic meaning of the data in your array, but there are generally two ways of storing sequences like that create table mydata ( id int not null auto_increment primary key, field1 int not null, field2 int not null, ... fieldN int not null ) This way you are storing your array in a single row. create table mydata ( id int not null auto_increment primary key, ... ) create table myotherdata ( id int not null auto_increment primary key, mydata_id int not null, sequence int not null, data int not null ) The disadvantage of the first method is, obviously, that if you have many items in your array, working with that table will not be the most elegant thing. It is also impractical (possible, but quite inelegant as well - just make the columns nullable) to work with sequences of variable length. For the second method, you can have sequences of any length, but of only one type. You can, of course, make that one type varchar or something and serialize the items of your array. Not the best thing to do, but certainly better, than serializing the whole array, right? Either way, any of this methods gets a clear advantage of being able to access an arbitrary element of the sequence and you don't have to worry about serializing arrays and ugly things like that. As for getting it back. Well, get the appropriate row/sequence of rows with a query and, well, use a loop .. right?
