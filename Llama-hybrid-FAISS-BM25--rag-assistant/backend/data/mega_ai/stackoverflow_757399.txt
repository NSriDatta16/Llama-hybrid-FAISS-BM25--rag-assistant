[site]: stackoverflow
[post_id]: 757399
[parent_id]: 757246
[tags]: 
how's it going? Is there a reason you don't have object containers that represent a row in your database? Creating a custom object is much easier to deal with in other tiers of your solution. So, going with this approach, there are two very viable solutions to your problems. Say you have a custom object that represents a Product in your database. You'd define the object like this: public class Product { public int ProductID { get; set; } public string Name { get; set; } public byte[] Image { get; set; } } And you'd fill a collection of of Products (Collection) like this: var collection = new Collection (); using (var reader = command.ExecuteReader()) { while (reader.Read()) { var product = new Product(); int ordinal = reader.GetOrdinal("ProductID"); if (!reader.IsDBNull(ordinal) { product.ProductID = reader.GetInt32(ordinal); } ordinal = reader.GetOrdinal("Name"); if (!reader.IsDBNull(ordinal)) { product.Name = reader.GetString(ordinal); } ordinal = reader.GetOrdinal("Image"); if (!reader.IsDBNull(ordinal)) { var sqlBytes = reader.GetSqlBytes(ordinal); product.Image = sqlBytes.Value; } collection.Add(product); } } Notice that I'm retrieving a value via the reader's Get x where x is the type that I want to retrieve from the column. This is Microsoft's recommended way of retrieving data for a column per http://msdn.microsoft.com/en-us/library/haa3afyz.aspx (second paragraph) because the retrieved value doesn't have to be boxed into System.Object and unboxed into a primitive type. Since you mentioned that this method will be called many, many times, in an ASP.NET application, you may want to reconsider such a generic approach as this. The method you use to return a NameValueCollection is very non-performant in this scenario (and arguably in many other scenarios). Not to mention that you convert each database column to a string without accounting for the current user's Culture, and Culture is an important consideration in an ASP.NET application. I'd argue that this NameValueCollection shouldn't be used in your other development efforts as well. I could go on and on about this, but I'll save you my rants. Of course, if you're going to be creating objects that directly map to your tables, you might as well look into LINQ to SQL or the ADO.NET Entity Framework . You'll be happy you did.
