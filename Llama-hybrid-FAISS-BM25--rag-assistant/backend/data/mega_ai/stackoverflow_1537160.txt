[site]: stackoverflow
[post_id]: 1537160
[parent_id]: 1537084
[tags]: 
When I tried compiling this under 10.6 with gcc 4.2.1 , it compiled with the following warning: main.m:12: warning: class 'ITunesFinder' does not implement the 'NSNetServiceBrowserDelegate' protocol I suspect this is the same issue you describe, but with a more descriptive diagnostic coming from the compiler (maybe a more recent version than yours?). You can address this warning by adding the protocol to the interface declaration in the header: @interface ITunesFinder : NSObject The reason the warning was issued is that the setDelegate: method has the following signature: - (void)setDelegate:(id )delegate; which simply means it can take any object that implements the formal NSNetServiceBrowserDelegate protocol. Since your class interface didn't explicitly declare this, the compiler warns you of the fact. It should still work at runtime, provided the actual methods are provided when the delegate messages are actually sent. is it possible to write this example without using the delegate class? No, the delegate class is the way you receive event notifications. I am also a little confused by the class implementation, the book does not describe what this is based on, or for that matter what Categories, Protocols or Delegates do, nor how they work. The NSNetServiceBrowserDelegate protocol defines a set of methods that your class needs to implement. You can think of it just like an interface in Java or a virtual base class in C++. The difference in Objective-C (which doesn't support multiple inheritance) is that you don't inherit from the interface you are trying to implement, you merely declare the fact that your particular class implements these methods according to the protocol. Now protocols are used for a variety of things, and a very common pattern in Cocoa is to use them for callbacks. So here, your ITunesFinder is implementing the browser protocol in a way such that the NSNetServiceBrowser knows how to call your class (which it has never seen before!) in order to provide browser notifications. These delegates are often used to delegate behaviour from a framework class to one of your classes, to allow you to easily customise things without lots of subclassing, and to receive notifications of events (typically before and after something interesting). It's a very elegant model. The Apple documentation is very good on this subject: Basics of Protocols Objective-C Protocols Cocoa delegates
