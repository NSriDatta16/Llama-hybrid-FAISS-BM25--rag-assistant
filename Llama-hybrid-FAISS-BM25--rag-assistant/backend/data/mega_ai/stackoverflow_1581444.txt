[site]: stackoverflow
[post_id]: 1581444
[parent_id]: 1578502
[tags]: 
You might check out Exception Handling Action Policies App Block for .NET for this case (curcuit breaker or simple sleep-and-retry-forever might do work). This application block was helpful in scenarios, where connectivity between elements of the distributed system is unreliable and subject to various failures. One of the advantages is that such action policies for an entire application could be configured in place and then injected into the appropriate classes via Inversion of Control . For example: var policy = ActionPolicy .Handle () .CircuitBreaker(1.Minutes(), 2); var recordSet = policy .Get(() => remoteRepository.GetRecords(someCriteria)); Lokad.Cloud (for Azure) open source project uses same policies from Lokad Shared Libraries. NB: Action policies are compatible with RetryPolicies of the Azure Storage: var policy = ActionPolicy.Handle ().Retry(5); queueService.RetryPolicy = policy.Do;
