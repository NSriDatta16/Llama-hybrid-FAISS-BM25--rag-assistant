[site]: stackoverflow
[post_id]: 2476009
[parent_id]: 2475744
[tags]: 
Take for example a database like Cassandra with the following features: Decentralized: Every node in the cluster is identical. There are no network bottlenecks. There are no single points of failure . Elastic: Read and write throughput both increase linearly as new machines are added, with no downtime or interruption to applications. Fault Tolerant: Data is automatically replicated to multiple nodes for fault-tolerance. Replication across multiple data centers is supported. Failed nodes can be replaced with no downtime . Consistent , Eventually: Cassandra implements an eventually consistent model and includes sophisticated features such as Hinted Handoff and Read Repair to minimize inconsistency windows. Highly Availabile: Writes and reads offer a tunable ConsistencyLevel , all the way from "writes never fail" to "block for all replicas to be readable," with the quorum level in the middle. I think you could hold a semester of lectures on just solving problems encountered creating such a system and/or making it high-performance. As a bonus, the topic is of wide interest (anyone writing applications for the web, basically) and already partly known so you have a good chance to capture the attention of a crowd of developers.
