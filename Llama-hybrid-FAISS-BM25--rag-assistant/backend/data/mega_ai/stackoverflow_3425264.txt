[site]: stackoverflow
[post_id]: 3425264
[parent_id]: 
[tags]: 
A Faster / More Scalable Approach to Twitter OAuth Dance in Rails?

I'm running a Rails app on the Heroku Stack (complete with Memcached, DJ Asynchronous workers, MongoDB persistent storage). Right now we use Twitter Oauth as the only authentication option on our site. (We plan to branch out to FB connect, OpenID, and/or Email/password eventually). Ruby/Rails apps, as you probably know, don't support concurrency out of the box. On Heroku, you can spin up additional app instances (dynos), which increase your concurrency (concurrency capability = number of dynos), but each one costs $36/month. In general, this hasn't been a problem, because the average request on the site takes EXCEPT for Twitter OAuth. The OAuth-related requests to Twitter take, on average, around 3,500 ms. So basically, when anyone logs in an entire app instance gets held up for 3-4 seconds. Is there any decent way to mitigate this? Would it be weird to put these actions in asynchronous DJ workers? It could make logging in a little slower, but at least if a bunch of people are logging in at once and/or Twitter is being really slow, these processes do not affect the rest of the app / other web requests? Any other ideas?
