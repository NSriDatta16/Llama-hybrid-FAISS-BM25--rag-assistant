[site]: stackoverflow
[post_id]: 2529574
[parent_id]: 2529282
[tags]: 
The big mistakes: The square brackets substitute the result of the script inside it and not its output. The puts commands sends strings to stdout (or a file) and doesn't save them for processing later. The curly braces totally quash all substitutions inside them. The fixes are to use list commands to build the description to use with ldap::add . For example: set formValues {} lappend formValues cn "[ncgi::value givenName] [ncgi::value sn]" ### Might need this instead; it depends on how you want to do the construction # lappend formValues cn [list [ncgi::value givenName] [ncgi::value sn]] lappend formValues displayName "[ncgi::value givenName] [ncgi::value sn]" foreach {key value} [ncgi::nvlist] { ### Could also use {$value ne ""} here if {[string length $value] != 0} { lappend formValues $key $value } } lappend formValues objectClass top lappend formValues objectClass person lappend formValues objectClass organizationalPerson lappend formValues objectClass inetOrgPerson ::ldap::add $handle $dn $formValues Also, if those keys are coming from a form, you should add more validation to stop malicious users from adding unexpected extras like additional objectClass es. An ounce of prevention is worth a hundredweight of cure.
