[site]: stackoverflow
[post_id]: 5410089
[parent_id]: 5386378
[tags]: 
You can make this work by moving the non-translatable code to a different location in your Java project. Remember, GWT translates Java to javascript and runs in the browser. The GWT compiler targets anything beneath the module's client/ directory, that is. As no.good.at.coding mentioned, javascript lacks the java.io* and java.net* packages, so GWT can't make that part of your code into js. However, you can use any library you want if you move the code into server-side .java files under server/rpc/ and expose it as a service. To wire up server-side rpc services with GWT, you will need to create a synchronous and asynchronous interface for your service, plus the implementation, e.g. (not checked for typos): // rpc service interface, UrlGetServiceRpc.java: @RemoteServiceRelativePath("urlget.rpc") public interface UrlGetServiceRpc extends RemoteService { String getPage(String url); } // async version of the interface, UrlGetServiceRpcAsync.java: public interface UrlGetServiceRpcAsync { void getPage(string url, AsyncCallback async); } // implementation of the service, UrlGetServiceRpcImpl.java: @Override public string getPage(string url) { // return page fetched using your code above. } // now in your page's module file... class level field: private UrlGetServiceRpc urlGetSvc; // in your page's constructor: this.urlGetSvc = GWT.create(UrlGetServiceRpc.class); // and when you want to display the html: this.someWidget.setHtml(urlGetAsync.getPage("foo.com/goodreading.html")); There are probably errors in the above, but it should get the general idea across. I also omit the import statements for incompatible packages from my GWT modules (client/* pages), and instead I use fully-qualified references in my methods (java.net.URL instead of just URL). This confines the scope of the non-GWTable package to the method level, and helps make sure the GWT compiler won't see the imports and whine. Now you can also do get the html and display it asynchronously, by declaring the service as private UrlGetServiceRpcAsync urlSvc; in your page, then calling the Async overload of the method. That's a bit beyond the scope of this question though; Google's " Communicating with a Server " article is a great place to start with understanding what runs where in a GWT app, and how to isolate things into the right layer.
