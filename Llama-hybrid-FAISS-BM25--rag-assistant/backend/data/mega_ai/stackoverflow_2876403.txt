[site]: stackoverflow
[post_id]: 2876403
[parent_id]: 2876091
[tags]: 
Perl's most popular test 'framework' is a test results format known as TAP (Test Anything Protocol) which is a set of strings that look like: ok 1 - Imported correctly ok 2 - foo() takes two arguments not ok 3 - foo() throws an error if passed no arguments Any script that can generate these strings counts as a Perl test. You can use Test::More to generate TAP for various conditions - checking if a variable is equal to a value, checking if a module imported correctly, or if two structures (arrays/hashes) are identical. But in true Perl spirit, there's more than one way to do it, and there are other approaches (e.g. Test::Class , which looks a bit like JUnit!) A simple example of a test script (they usually end in .t , e.g. foo.t ) use strict; use warnings; use Test::More tests => 3; # Tell Test::More you intend to do 3 tests my $foo = 3; ok(defined $foo, 'foo is defined'); is($foo, 3, 'foo is 3'); $foo++; is($foo, 4, 'incremented foo'); You can use Test::Harness (commonly invoked as prove from the shell) to run a series of tests in sequence, and get a summary of which ones passed or failed. Test::More can also do some more complex stuff, like mark tests as TODO (don't expect them to pass, but run them just in case) or SKIP (these tests are broken/optional, don't run them). You can declare the number of tests you expect to run, so if your test script dies half-way, this can be detected. Once you begin to do more complex testing, you might find some other CPAN modules useful - here are a few examples, but there are many ( many ) more: Test::Exception - test that your code throws an error/doesn't throw any errors Test::Warn - test that your code does/doesn't generate warnings Test::Deep - deeply compare objects. They don't have to be identical - you can ignore array ordering, use regexes, ignore classes of objects etc. Test::Pod - make sure your script has POD (documentation), and that it is valid Test::Pod::Coverage - make sure that your POD documents all the methods/functions in your modules Test::DBUnit - test database interactions Test::MockObject - make pretend objects to control the environment of your tests
