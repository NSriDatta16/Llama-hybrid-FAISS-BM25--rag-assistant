[site]: stackoverflow
[post_id]: 5466500
[parent_id]: 5466491
[tags]: 
Use the FileUpload control . For example (modified from the linked MSDN article), if you just want a simple form which uploads a file to a path on the server, you can start with something like this: protected void UploadFileAction_Click(object sender, EventArgs e) { var fileStoragePath = Server.MapPath("~/Uploads"); if (fileUploader.HasFile) { fileUploader.SaveAs(Path.Combine(fileStoragePath, fileUploader.FileName)); outputLabel.Text = string.Format( "File Name: {0} File Size: {1}kb Content Type: {2}", fileUploader.PostedFile.FileName, fileUploader.PostedFile.ContentLength, fileUploader.PostedFile.ContentType ); } else outputLabel.Text = "You have not specified a file."; } Upload A File &nbsp; The FileUpload control ends up rendering to a simple (but with more attributes set, of course) on the client, as part of the overall ASP.NET form element management like any other server-side form control. In your question, you specifically mention uploading an "image." While this code may get you there, you might also be implicitly asking a second question which is, "How can I ensure that the uploaded file is an image?" If so, you have a few options outlined very well in the answers to this question as well as this one (which refers to more answers on other questions, it's a popular topic). As always, server-side validation is necessary even though client-side validation is still recommended for a good UX. Never implicitly trust the client-side validation, always validate user input on the server as well.
