[site]: stackoverflow
[post_id]: 1570003
[parent_id]: 1515947
[tags]: 
I would like to expand on Darien's answer. I think that ANTLR brings something to the table that few other lexer/parser tools provide (at least to my knowledge). If you would like to create a DSL which ultimately generates Java and C# code, ANTLR really shines. ANTLR provides four fundamental components: Lexer Grammar (break down input streams into tokens) Parser Grammar (organize tokens into an abstract syntax tree) Tree Grammar (walk the abstract syntax tree and pipe the metadata into a template engine) StringTemplate (a template engine based on functional programming principles) Your lexer,parser, and tree grammars can remain independent of your final generated language. In fact, the StringTemplate engine supports logical groups of template definitions. It even provides for interface inheritance of template groups. This means you can have third parties use your ANTLR parser to create say python, assembly, c, or ruby, when all you initially provided was java and C# output. The output language of your DSL can easily be extended as requirements change over time. To get the most out of ANTLR you will want to read the following: The Definitive ANTLR Reference: Building Domain-Specific Languages Language Implementation Patterns: Create Your Own Domain-Specific and General Programming Languages
