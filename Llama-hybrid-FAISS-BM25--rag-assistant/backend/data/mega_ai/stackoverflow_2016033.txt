[site]: stackoverflow
[post_id]: 2016033
[parent_id]: 2015947
[tags]: 
The key thing about metrics is knowing what you are using them for. Are you using them as a tool for improvement, a tool for reward, a tool for punishment, etc. It sounds like you're planning to use them as a tool for improvement. The number one principle when setting metrics is to keep the information relevant so that the person receiving it can use it to make a decision. Most likely a senior manager cannot dictate the micro level of whether you need more tests, less complexity, etc. But a team leader can do that. Therefore, I don't believe a measure of code coverage is going to be useful to management beyond the individual team. At the macro level, the organisation is probably interested in: Cost of delivery Timeliness of delivery Scope of delivery & external quality Internal quality won't be high on their list of things to cover off. It's a development team's mission to make it clear that internal quality (maintainability, test coverage, self-documenting code, etc) is a key factor in achieving the other three. Therefore you should target metrics to more senior managers which cover off those three such as: Overall Velocity (note that comparing velocity between teams is often artificial) Expected vs Actual scope delivered to agreed timelines Number of production defects (possibly per capita) And measure things like code coverage, code complexity, cut 'n' paste score (code repetition using flay or similar), method length, etc at a team level where the recipients of the information can really make a difference.
