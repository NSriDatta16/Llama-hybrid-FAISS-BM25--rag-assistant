[site]: stackoverflow
[post_id]: 3585515
[parent_id]: 3569261
[tags]: 
Here's a basic GLUT example (written on OS X, adapt as needed) that generates two checkerboard textures, loads a shader with two samplers and combines them by tinting each (one red, one blue) and blending. See if this works for you: #include #include #include #include #include #define kTextureDim 64 GLuint t1; GLuint t2; /* adapted from the red book */ GLuint makeCheckTex() { GLubyte image[kTextureDim][kTextureDim][4]; // RGBA storage for (int i = 0; i 0) { GLchar* log = (GLchar*)malloc(logLength); glGetShaderInfoLog(shader, logLength, &logLength, log); printf("Shader compile log:\n%s\n", log); free(log); } glAttachShader(program, shader); glLinkProgram(program); glGetProgramiv(program, GL_INFO_LOG_LENGTH, &logLength); if (logLength > 0) { GLchar* log = (GLchar*)malloc(logLength); glGetProgramInfoLog(program, logLength, &logLength, log); printf("Program link log:\n%s\n", log); free(log); } GLuint t1Location = glGetUniformLocation(program, "tex1"); GLuint t2Location = glGetUniformLocation(program, "tex2"); glUniform1i(t1Location, 0); glUniform1i(t2Location, 1); glUseProgram(program); } void init() { glClearColor(0.0, 0.0, 0.0, 0.0); glEnable(GL_DEPTH_TEST); glShadeModel(GL_FLAT); t1 = makeCheckTex(); t2 = makeCheckTex(); loadShader(); } void display() { glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); glLoadIdentity(); glActiveTexture(GL_TEXTURE0); glEnable(GL_TEXTURE_2D); glBindTexture(GL_TEXTURE_2D, t1); glActiveTexture(GL_TEXTURE1); glBindTexture(GL_TEXTURE_2D, t2); glBegin(GL_QUADS); //lower left glTexCoord2f(0, 0); glVertex2f(-1.0, -1.0); //upper left glTexCoord2f(0, 1.0); glVertex2f(-1.0, 1.0); //upper right glTexCoord2f(1.0, 1.0); glVertex2f(1.0, 1.0); //lower right glTexCoord2f(1.0, 0); glVertex2f(1.0, -1.0); glEnd(); glutSwapBuffers(); } void reshape(int w, int h) { glViewport(0, 0, w, h); glMatrixMode(GL_PROJECTION); glLoadIdentity(); glOrtho(-2, 2, -2, 2, -2, 2); glMatrixMode(GL_MODELVIEW); glLoadIdentity(); } int main(int argc, char **argv) { glutInit(&argc, argv); glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH | GLUT_RGBA); glutInitWindowSize(512, 512); glutInitWindowPosition(0, 0); glutCreateWindow("GLSL Texture Blending"); glutReshapeFunc(reshape); glutDisplayFunc(display); glutIdleFunc(display); init(); glutMainLoop(); return 0; } Hopefully the result will look something like this (you can comment out the glUseProgram call to see the first texture drawn without the shader):
