[site]: stackoverflow
[post_id]: 4322145
[parent_id]: 4315417
[tags]: 
It's unfortunate this question didn't draw more attention, but I guess the large chunk of code didn't help much (that and the fact that template metaprogramming is not so popular). Anyway, you're right, it's a similar issue. The problem is that the views in fusion do not copy the arguments, they only keep references to them. This allows you to modify the original arguments by their intermediate. The trouble is that in C++ you are authorized to bind a temporary to a const-reference, and the temporary lifetime is extended to that of the reference. However this behavior is not transitive, which has caused a heapload of troubles. (Clang will attempt to diagnose those situations, unfortunately the first patch failed :p) So here your problem is located in one single line: return boost::fusion::zip(fieldNames (), constRefFields(obj)); fieldNames () creates a temporary, that is bound to a const-reference, it's lifetime is extended until the end of the expression: ; when you return the view, the temporary lifetime has expired, you're holding onto a dangling reference Quick fix: make fieldNames () have a local static variable and return a reference to this variable, this will fix the lifetime issue. I still haven't understood what you were attempting though, so I can't really give "more sensible" advice :)
