[site]: stackoverflow
[post_id]: 168920
[parent_id]: 168886
[tags]: 
Frankly, I'm not sure why this is needed. Your dev/test environments should be private, behind your firewall, and not accessible from the web. Your developers should be trusted, and you have legal recourse against them if they fail to live up to your trust. I think the real question should be "Should I scramble the data?", and the answer is (in my mind) 'no'. If you're sending it offsite for some reason, or you have to have your environments web-accessible, or if you're paranoid, I would implement a random switch. Rather than build a temp table, run switches between each location and a random row in the table, swapping one piece of data at a time. The end result will be a table with all the same data, but with it randomly reorganized. It should also be faster than your temp table, I believe. It should be simple enough to implement the Fisher-Yates Shuffle in SQL...or at least in a console app that reads the db and writes to the target. Edit (2): Off-the cuff answer in T-SQL: declare @name varchar(50) set @name = (SELECT lastName from person where personID = (random id number) Update person set lastname = @name WHERE personID = (person id of current row) Wrap this in a loop, and follow the guidelines of Fisher-Yates for modifying the random value constraints, and you'll be set.
