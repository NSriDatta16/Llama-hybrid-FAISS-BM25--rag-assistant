[site]: stackoverflow
[post_id]: 1961595
[parent_id]: 
[tags]: 
WPF Draggable Panel Class

I'm trying to write a panel class from this two resources: WPF: how to make the (0,0) in center inside a Canvas http://www.codeproject.com/KB/WPF/DraggingElementsInCanvas.aspx The panel class will have two attached properties "X" and "Y" and if any element gives x and y to be zero then it will be placed on the center of the Panel. The panel will also let the user to drag things around . Please help me write this class. I'm very new to WPF. This is how far I've come. Now I tried to implement this but its not working, if you can help me implement the GetTop,GetLeft,GetBottom,GetRight functions which are not by default defined in panel class and which are neccessary. If these 4 methods are present then dragging functions can be implemented here. using System; using System.Linq; using System.Windows; using System.ComponentModel; using System.Windows.Controls; using System.Windows.Media; namespace SmartERP.Elements { public class SmartCanvas : Panel { public static readonly DependencyProperty TopProperty; public static readonly DependencyProperty LeftProperty; public static readonly DependencyProperty BottomProperty; public static readonly DependencyProperty RightProperty; static SmartCanvas() { TopProperty = DependencyProperty.Register("Top", typeof(double), typeof(SmartCanvas), new PropertyMetadata(0.0)); LeftProperty = DependencyProperty.Register("Left", typeof(double), typeof(SmartCanvas), new PropertyMetadata(0.0)); BottomProperty = DependencyProperty.Register("Bottom", typeof(double), typeof(SmartCanvas), new PropertyMetadata(0.0)); RightProperty = DependencyProperty.Register("Right", typeof(double), typeof(SmartCanvas), new PropertyMetadata(0.0)); } public double Top { get { return (double)base.GetValue(TopProperty); } set { base.SetValue(TopProperty, value); } } public double Bottom { get { return (double)base.GetValue(BottomProperty); } set { base.SetValue(BottomProperty, value); } } public double Left { get { return (double)base.GetValue(LeftProperty); } set { base.SetValue(LeftProperty, value); } } public double Right { get { return (double)base.GetValue(RightProperty); } set { base.SetValue(RightProperty, value); } } private double GetTop(UIElement element) { return (double)this.GetValue(TopProperty); } private double GetLeft(UIElement element) { return (double)this.GetValue(LeftProperty); } private double GetBottom(UIElement element) { return (double)this.GetValue(BottomProperty); } private double GetRight(UIElement element) { return (double)this.GetValue(RightProperty); } protected override Size ArrangeOverride(Size arrangeSize) { Point middle = new Point(arrangeSize.Width / 2, arrangeSize.Height / 2); foreach (UIElement element in base.InternalChildren) { if (element == null) { continue; } double x = 0.0; double y = 0.0; double left = GetLeft(element); if (!double.IsNaN(left)) { x = left; } double top = GetTop(element); if (!double.IsNaN(top)) { y = top; } element.Arrange(new Rect(new Point(middle.X + x, middle.Y + y), element.DesiredSize)); } return arrangeSize; } } }
