[site]: stackoverflow
[post_id]: 1920004
[parent_id]: 1919372
[tags]: 
You are perhaps already aware of the usefulness of passing functions to other functions, for example, providing a sort() routine with a comparison function, and the obvious examples of map() and filter() and so on. Likewise, it is often useful to receive functions as a result from another function. The most common usage is for closures , but currying is also common. A central benefit of a closure is being able to create a new function at runtime that contains all the temporal information required for its execution at that point in time. In language implementations that don't support closures, such state management is usually done, arguably less elegantly, via classes: object instance variables are set, and then later read when needed. Closures provide a means to bundle the state with the action. So as a basic point of understanding, it may help to think of nested functions as a way to write on-the-spot functions to perform very specific actions where the details of those actions will be known at runtime, but you only want to execute that action at some later time. There are other things that can be done with nested functions, but you have to start somewhere.
