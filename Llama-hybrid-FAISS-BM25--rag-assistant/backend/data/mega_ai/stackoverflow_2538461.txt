[site]: stackoverflow
[post_id]: 2538461
[parent_id]: 2529596
[tags]: 
There are many ways to accomplish this. With Silverlight though, there are few more challenges with layout and drawing the connecting lines. In WPF, I'd consider using an adorner layer and rendering the lines that way. However, Silverlight doesn't directly have an adorner layer, but it could be emulated (although in my suggestion below, I'm suggesting an alternative approach to adorners). Here's one way I'd consider solving the problem and solving the problem. It doesn't appear that the MouseDragElementBehavior has any events that would indicate when an element is moving or has moved to a new location. There also appear to be some major dragging bugs when the dragged object is set to contained within a canvas, so I'm not sure I'd use it. I'd create my own draggable surface (derive from Panel ). You'd need to implement your own mouse handling, and a custom panel with a MeasureOverride and ArrangeLayout override. See this for more information about layout in Silverlight. Simulating a canvas like dragging experience is relatively easy as there aren't too many challenges with measuring or arrangement really. You'd need to create either attached properties with the location of the shape, or actually add the location to the shape object. I'd probably go with the latter if it makes sense to have those values directly stored in your shape objects. to make things draggable, you'll need to attach to a shape's mousedown/up and capture the mouse and do some simple dragging logic. Optionally Add an event when things are being dragged and have completed being dragged. when controls are removed from the panel, make sure you unwire any events you've attached so they are released during GC Create a second custom panel (or user control). This panel would be placed underneath the first dragging panel. The purpose of this panel would be to be bound to your connection objects (it will also need access to the original object positions of course, either directly or indirectly). If you make it a panel, you could add lines per the connections and locations of the objects. You'll need to wire up to either the event I mentioned above, or directly to the a X,Y property changing event on the shape so that you can update the line objects as the shapes move. or You could use a usercontrol and/or writeablebitmap to draw the lines. I'd suggest taking a look at the simple WriteableBitmapEx extension classes on Codeplex as it includes a simple line drawing algorithm. You would need to invalidate the bitmap and redraw the connections each time the shapes are updated.
