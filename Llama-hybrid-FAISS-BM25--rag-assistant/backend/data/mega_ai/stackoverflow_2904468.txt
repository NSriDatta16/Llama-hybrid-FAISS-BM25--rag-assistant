[site]: stackoverflow
[post_id]: 2904468
[parent_id]: 2904411
[tags]: 
I have been on both sides of the fence about this. My rule of thumb is: If one of these lists changes, will I have to do changes to the code, too? (e.g..: in your case, if someone writes "yet another browser" tomorrow, will I need to write code that caters for it?) If the answer is "most probably yes" or "definitely" you can leave it inside code. In all other cases (even just a "maybe, 50%-50%) you better put it in the DB, or at the very least a property file. And please consider this, too: if you expect to have to provide statistics based on this data (e.g.: "how many users use Explorer") you better put it in the DB anyway: it becomes part of your domain data and therefore it must be there. About the "domain data" part. The information stored in your DB is the "domain data" of your application. It is, in a sense, a (hopefully consistent) representation of what your application is about - it represents the "known universe" for your application. If you agree to this definition, then you must also accept that it does not make sense to have 99.9% of your "reality" in the DB, and 0.1% outside of it - if nothing else, it makes some operations cumbersome (if you only store the smallint you can't create meaningful reports without either post-processing them using the class to decode "1" into "Firefox" or providing some other key for the end-user). It also makes impossible for you to leverage some inherent DB techniques like foreign key (if you just use a smallint without correlating it to any other table, who guarantees that "10" is an acceptable value in your domain?)
