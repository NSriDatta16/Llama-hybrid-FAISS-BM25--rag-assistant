[site]: stackoverflow
[post_id]: 4922173
[parent_id]: 
[tags]: 
Java thread safety of list

I have a List, which is to be used either in thread-safe context or in a non thread-safe one. Which one will it be, is impossible to determine in advance. In such special case, whenever the list enters non-thread-safe context, I wrap it using Collections.synchronizedList(...) But I don't want to wrap it, if doesn't enter non-thread-safe context. F.e., because list is huge and used intensively. I've read about Java, that its optimization policy is strict about multi-threading - if you don't synchronize your code correctly, it is not guaranteed to be executed correctly in inter-thread context - it can reorganize code significantly, providing consistency in context of only one thread (see http://java.sun.com/docs/books/jls/third_edition/html/memory.html#17.3 ). F.e., op1; op2; op3; may be reorganized in op3; op2; op1; , if it produces same result (in one-thread context). Now I wonder, if I fill my list before wrapping it by synchronizedList, then wrap it up, then use by different thread , - is there a possibility, that different thread will see this list filled only partially or not filled at all? Might JVM postpone (1) till after (3)? Is there a correct and fast way to make (big) List being non-thread-safe to become thread-safe?
