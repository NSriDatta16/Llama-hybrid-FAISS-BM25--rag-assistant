[site]: stackoverflow
[post_id]: 2565831
[parent_id]: 2565727
[tags]: 
Several answers here suggest using strncat() over strcat() ; I'd suggest that strncat() (and strncpy() ) should also be avoided. It has problems that make it difficult to use correctly and lead to bugs: the length parameter to strncat() is related to (but not quite exactly - see the 3rd point) the maximum number of characters that can be copied to the destination rather than the size of the destination buffer. This makes strncat() more difficult to use than it should be, particularly if multiple items will be concatenated to the destination. it can be difficult to determine if the result was truncated (which may or may not be important) it's easy to have an off-by-one error. As the C99 standard notes, "Thus, the maximum number of characters that can end up in the array pointed to by s1 is strlen(s1)+n+1 " for a call that looks like strncat( s1, s2, n) strncpy() also has an issue that can result in bugs you try to use it in an intuitive way - it doesn't guarantee that the destination is null terminated. To ensure that you have to make sure you specifically handle that corner case by dropping a '\0' in the buffer's last location yourself (at least in certain situations). I'd suggest using something like OpenBSD's strlcat() and strlcpy() (though I know that some people dislike those functions; I believe they're far easier to use safely than strncat() / strncpy() ). Here's a little of what Todd Miller and Theo de Raadt had to say about problems with strncat() and strncpy() : There are several problems encountered when strncpy() and strncat() are used as safe versions of strcpy() and strcat() . Both functions deal with NUL-termination and the length parameter in different and non-intuitive ways that confuse even experienced programmers. They also provide no easy way to detect when truncation occurs. ... Of all these issues, the confusion caused by the length parameters and the related issue of NUL-termination are most important. When we audited the OpenBSD source tree for potential security holes we found rampant misuse of strncpy() and strncat() . While not all of these resulted in exploitable security holes, they made it clear that the rules for using strncpy() and strncat() in safe string operations are widely misunderstood. OpenBSD's security audit found that bugs with these functions were "rampant". Unlike gets() , these functions can be used safely, but in practice there are a lot of problems because the interface is confusing, unintuitive and difficult to use correctly. I know that Microsoft has also done analysis (though I don't know how much of their data they may have published), and as a result have banned (or at least very strongly discouraged - the 'ban' might not be absolute) the use of strncat() and strncpy() (among other functions). Some links with more information: http://www.usenix.org/events/usenix99/full_papers/millert/millert_html/ http://en.wikipedia.org/wiki/Off-by-one_error#Security_implications http://blogs.msdn.com/michael_howard/archive/2004/10/29/249713.aspx http://blogs.msdn.com/michael_howard/archive/2004/11/02/251296.aspx http://blogs.msdn.com/michael_howard/archive/2004/12/10/279639.aspx http://blogs.msdn.com/michael_howard/archive/2006/10/30/something-else-to-look-out-for-when-reviewing-code.aspx
