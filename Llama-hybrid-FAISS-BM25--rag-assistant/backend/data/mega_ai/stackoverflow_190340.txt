[site]: stackoverflow
[post_id]: 190340
[parent_id]: 189878
[tags]: 
This is a shortened version of my full URI validation pattern, based on the specification . I wrote this because the specification allows many characters never included in any validation pattern I've found on the web. You'll see that the user/pass (and in the second pattern, path and query string) are far more permissive than you'd have thought. /^(https?|ftp):\/\/(?# protocol )(([a-z0-9$_\.\+!\*\'\(\),;\?&=-]|%[0-9a-f]{2})+(?# username )(:([a-z0-9$_\.\+!\*\'\(\),;\?&=-]|%[0-9a-f]{2})+)?(?# password )@)?(?# auth requires @ )((([a-z0-9][a-z0-9-]*[a-z0-9]\.)*(?# domain segments AND )[a-z]{2}[a-z0-9-]*[a-z0-9](?# top level domain OR )|(\d|[1-9]\d|1\d{2}|2[0-4][0-9]|25[0-5]\.){3}(?# )(\d|[1-9]\d|1\d{2}|2[0-4][0-9]|25[0-5])(?# IP address ))(:\d+)?(?# port ))\/?$/i And since I've taken the time to break this out to be somewhat more readable, here is the complete pattern: /^(https?|ftp):\/\/(?# protocol )(([a-z0-9$_\.\+!\*\'\(\),;\?&=-]|%[0-9a-f]{2})+(?# username )(:([a-z0-9$_\.\+!\*\'\(\),;\?&=-]|%[0-9a-f]{2})+)?(?# password )@)?(?# auth requires @ )((([a-z0-9][a-z0-9-]*[a-z0-9]\.)*(?# domain segments AND )[a-z]{2}[a-z0-9-]*[a-z0-9](?# top level domain OR )|(\d|[1-9]\d|1\d{2}|2[0-4][0-9]|25[0-5]\.){3}(?# )(\d|[1-9]\d|1\d{2}|2[0-4][0-9]|25[0-5])(?# IP address ))(:\d+)?(?# port ))(((\/+([a-z0-9$_\.\+!\*\'\(\),;:@&=-]|%[0-9a-f]{2})*)*(?# path )(\?([a-z0-9$_\.\+!\*\'\(\),;:@&=-]|%[0-9a-f]{2})*)(?# query string )?)?)?(?# path and query string optional )(#([a-z0-9$_\.\+!\*\'\(\),;:@&=-]|%[0-9a-f]{2})*)?(?# fragment )$/i Note that some (all?) javascript implementations do not support comments in regular expressions.
