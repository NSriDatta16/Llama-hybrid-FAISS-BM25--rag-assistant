[site]: stackoverflow
[post_id]: 3811546
[parent_id]: 3811513
[tags]: 
Four options for you: Option 0 Go read Sean Hogan's answer , he pointed out that this can be done with delegation ( doh! ) and I put together an example implementation. Option 1 You can make the href of the links "#" until jQuery is loaded, and then (if appropriate) change it to what it really should be. You can store what the href should be in a data- attribute, e.g.: blah Then: jQuery(function($) { $("a[data-href]").each(function() { var $this = $(this); $this.attr("href", $this.attr("data-href")); }); }); Again, that last bit only if you really need to make the href an href. If you're handling the click via JavaScript, no need to. If validation is a significant part of your development cycle, it's important to note that attributes in the form data-xyz are invalid in HTML4 and before (browsers don't actually care, but again, if you use validation...). They become valid as of HTML5. Option 2 Use inline onclick attributes to intercept the click prior to jQuery loading and basically say "Sorry, one moment". So in a script tag at the top of your file: function sorryLoading() { alert("Sorry, the page is still loading, one moment please."); return false; } ...and then on the links: blah ...then remove the onclick on jQuery load: jQuery(function($) { $("a.sorry").removeClass('sorry').attr("onclick", "").click(yourRealClickHandler); }); (You can leave the last bit — the click call — off if they don't all have the same click handler.) I've used a class above to differentiate between these links and others that might have an inline onclick (otherwise, surprisingly the selector "a[onclick]" actually works on Chrome, Opera, and Firefox for Linux and IE6 and IE8 on Windows). Option 3 Since it sounds like you want the page to be non-functional until jQuery loads, here's another approach: Make sure that the script tag for jQuery is in the head section of your page (not at the bottom, where I'd normally recommend putting it). At the very bottom of your page, just before closing the body tag, hook up your click handlers without wrapping them in a jQuery.ready call (or any of its shortcuts). The reason is this: #1 will ensure that jQuery itself is loaded prior to the page being rendered, and #2 will hook up the handlers as soon as possible . Google recommends using a tag at the end of the page like that (rather than a ready function or similar) and says that at that point, the DOM elements will be ready to be discovered. Separately, of course, you want to ensure that the time during which the links don't do what the user expects is absolutely as brief as possible by doing all of the page-load optimization stuff you can. Clicking a link and not having it do what it looks like it does makes for a poor user experience.
