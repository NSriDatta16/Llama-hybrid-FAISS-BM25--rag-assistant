[site]: stackoverflow
[post_id]: 279235
[parent_id]: 279158
[tags]: 
I think this would work. public class Car { private Engine engine; public virtual Engine CarEngine { get { return engine;} } public StartEngine() { CarEngine.Start(); } } public class Engine { public virtual void Start() { Console.Writeline("Vroom"); } } public class TurboEngine : Engine { public override void Start() { Console.Writeline("Vroom pSHHHHHHH"); } // TurboEngine Only method public double BoostPressure() { } } public class Ferrari : Car { private TurboEngine engine; public override Engine CarEngine { return engine; } } Ferrari = car new Ferrari(); // Will call Start on TurboEngine() car.StartEngine(); // Upcast to get TurboEngine stuff Console.WriteLine(car.CarEngine as TurboEngine).BoostPressure();
