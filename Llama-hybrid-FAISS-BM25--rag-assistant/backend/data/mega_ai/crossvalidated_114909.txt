[site]: crossvalidated
[post_id]: 114909
[parent_id]: 114852
[tags]: 
The spread of something approaching a bound will naturally tend to decrease. For something bounded below by 0, what's below the mean can't get more than the mean away, and something above it, if it's not to pull the mean up, then can't tend to be very far away (that is, the average value above the mean must equal the average value below it). In other words, as you approach the bound, the mean deviation must decrease (and the standard deviation will tend to do the same, unless the skewness becomes sufficiently more severe). As a result, the decreasing spread is to be expected. A similar argument can be made to suggest that continuous distributions approaching a bound from above will often tend to be right skew; it's common to see that, but possible to construct situations where it doesn't happen. Presumably your $x$ is something related to time. A suitable model will be one that models the mean, the spread, and if possible the skewness. A common choice for this sort of data would be a gamma GLM with a log-link (the log-link picks up the exponential decay with a linear predictor in time); the gamma has spread proportional to mean, and can be more or less skew. It's not completely clear what you want to obtain, but you can extract a fair bit of information from such a model, and also check its reasonableness via a number of model diagnostics. These are very easy to fit in R. Depending on exactly what you're collecting, it's possible your data will exhibit some time-dependence, so you may need a more sophisticated model; you can do a quick assessment of dependence by looking at say a time-series plot and autocorrelation of some form of standardized residual. Illustration of what I mean about some of the data being negative: I'll generate data twice - once with set.seed(127) rather than 123, so we get positive data with your code, and a second time to show you how to do it so as to produce only positive answers. set.seed(127) x giving: > summary(gamfit) Call: glm(formula = y ~ x, family = Gamma(link = log)) Deviance Residuals: Min 1Q Median 3Q Max -2.77677 -0.40078 -0.00537 0.29472 1.01420 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) 0.671939 0.094734 7.093 2.06e-10 *** x -0.029218 0.001629 -17.940 to get a more plausible model, simulate data with a specified mean from a distribution that is already restricted to be positive, such as a lognormal, or gamma (there are many other choices): set.seed(127) x One useful set of diagnostic displays is obtained by plotting the result of fitting the glm: plot(gamfit) If you do par(mfrow=c(2,2)) first you get a nice display on a single page. === An alternative would be to work on the log-scale with linear models.
