[site]: stackoverflow
[post_id]: 2589446
[parent_id]: 2587663
[tags]: 
Extending JChronic may be your best bet. I think, given the responses to this question , it's unlikely that a pre-built library for this exists (though it seems like such a thing could be useful... I'm guessing that the major use-cases for parsing natural language dates would be even more useful if they had the ability to extract additional data from user-supplied strings). Implementation-wise, probably the most straight-forward thing to do is to extend JChronic, since, it supports quite a significant part of your use-case, but more over as you can see from the unit test extraneous information should already be ignored by the framework. Fortunately, too, if you look at the main class , it should not be too hard to extend / modify / wrap the parse() method to support a custom scanner for an event title. (My own preference of these would be to wrap the framework rather than fork and modify it, as that allows you to benefit from any improvements to the underlying code more easily). Ultimately, what may prove the most straight-forward way of doing this is to generate a regex-parser that ignores most of what JChronic tries to capture (and this would mean becoming deeply familiar with the JChronic source code). The key to successfully implementing this, as with any NLP-type project is to have as many examples as you can possibly get, preferrably as automated unit tests (ultimately, even if the test cases test duplicate the same functionality many times, it is better to have more examples than fewer). Fortunately, since we're talking about natural language, such test cases should be particularly easy to get, since even non-programmer friends, family, etc. should be able to provide you with "event descriptions" (or whatever you want to call them). You'll also want to especially focus on edge cases where the date-parsing bit might interfere with the location / title parsing bit (for example in "sigur r√≥s at 8pm" the "at" is clearly part of the time whereas in "party at phoebe's saturday" it clearly isn't). I realize I said quite a bit about JChronic, but I feel that it's a natural choice for your problem as it already covers much of the "hard part" of parsing natural-language "appointments", i.e., the fuzziness of our language that we use about time, and is already implemented in the language you are targetting.
