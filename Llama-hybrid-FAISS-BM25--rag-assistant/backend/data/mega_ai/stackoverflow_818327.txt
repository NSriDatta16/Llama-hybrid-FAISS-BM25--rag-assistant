[site]: stackoverflow
[post_id]: 818327
[parent_id]: 
[tags]: 
JAXB: How should I marshal complex nested data structures?

I have several complex data structures like Map > Set > Set > > Map > > and so on (more complex data structures) Note: In my case it doesn't really matter if I use Set or List. Now I know that JAXB let me define XmlAdapter 's, that's fine, but I don't want to define an XmlAdapter for every of the given data structures (it would be just too much copy-and-paste code). I tried to achieve my goal by declaring two generalizing XmlAdapters: one for Map: MapAdapter one for Set: SetAdapter The problem : JAXB complains as following: javax.xml.bind.JAXBException: class java.util.Collections$UnmodifiableMap nor any of its super class is known to this context. Here is my adapter class: import java.util.*; import javax.xml.bind.annotation.*; import javax.xml.bind.annotation.adapters.*; public class Adapters { public final static class MapAdapter extends XmlAdapter , Map > { @XmlType @XmlRootElement public final static class Adapter { @XmlElement protected List > key = new LinkedList >(); private Adapter() { } public Adapter(Map original) { for (Map.Entry entry : original.entrySet()) { key.add(new MyEntry (entry)); } } } @XmlType @XmlRootElement public final static class MyEntry { @XmlElement protected K key; @XmlElement protected V value; private MyEntry() { } public MyEntry(Map.Entry original) { key = original.getKey(); value = original.getValue(); } } @Override public Adapter marshal(Map obj) { return new Adapter (obj); } @Override public Map unmarshal(Adapter obj) { throw new UnsupportedOperationException("unmarshalling is never performed"); } } } Here is my JUnit test case: import java.io.*; import java.util.*; import javax.xml.bind.*; import javax.xml.bind.annotation.*; import javax.xml.bind.annotation.adapters.*; import org.junit.*; import static java.lang.System.*; public class SomeTest { @Test public void _map2() throws Exception { Map > dataStructure = new HashMap >(); Map inner1 = new HashMap (); Map inner2 = new HashMap (); dataStructure.put("a", inner1); dataStructure.put("b", inner1); inner1.put("a1", "1"); inner1.put("a2", "2"); inner2.put("b1", "1"); inner2.put("b2", "2"); JAXBContext context = JAXBContext.newInstance(Adapters.XMap.class, Adapters.XCount.class, Adapters.XEntry.class); Marshaller marshaller = context.createMarshaller(); marshaller.setProperty(Marshaller.JAXB_FRAGMENT, true); marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true); marshaller.setAdapter(new Adapters.MapAdapter()); StringWriter sw = new StringWriter(); marshaller.marshal(dataStructure, sw); out.println(sw.toString()); } }
