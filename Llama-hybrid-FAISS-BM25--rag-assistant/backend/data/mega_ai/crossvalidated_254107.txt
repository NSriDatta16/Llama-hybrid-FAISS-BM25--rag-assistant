[site]: crossvalidated
[post_id]: 254107
[parent_id]: 
[tags]: 
Why are optimization algorithms defined in terms of other optimization problems?

I am doing some research on optimization techniques for machine learning, but I am surprised to find large numbers of optimization algorithms are defined in terms of other optimization problems. I illustrate some examples in the following. For example https://arxiv.org/pdf/1511.05133v1.pdf Everything looks nice and good but then there is this $\text{argmin}_x$ in the $z^{k+1}$ update....so what is the algorithm that solves for the $\text{argmin}$? We don't know, and it doesn't say. So magically we are to solve another optimization problem which is find the minimizing vector so that the inner product is at minimum - how can this be done? Take another example: https://arxiv.org/pdf/1609.05713v1.pdf Everything looks nice and good until you hit that proximal operator in the middle of the algorithm, and what is the definition of that operator? Boom: Now pray tell, how do we solve this $\text{argmin}_x$ in the proximal operator? It doesn't say. In any case, that optimization problem looks hard (NP HARD) depending on what $f$ is. Can someone please enlighten me as to: Why are so many optimization algorithms defined in terms of other optimization problems? (Wouldn't this be some sort of chicken and egg problem: to solve problem 1, you need to solve problem 2, using method of solving problem 3, which relies on solving problem ....) How do you solve these optimization problems that are embedded in these algorithms? For example, $x^{k+1} = \text{argmin}_x \text{really complicated loss function}$, how to find the minimizer on the right hand side? Ultimately, I am puzzled as to how these algorithms can be numerically implemented. I recognize that adding and multiplying vectors are easy operations in python, but what about $\text{argmin}_x$, is there some function (script) that magically gives you the minimizer to a function? (Bounty: can anyone reference a paper for which the authors make clear the algorithm for the sub-problem embedded in the high level optimization algorithm?)
