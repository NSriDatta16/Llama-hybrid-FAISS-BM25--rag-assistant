[site]: crossvalidated
[post_id]: 386400
[parent_id]: 379673
[tags]: 
Here is a very simple approach. It calculates the probabilities for complete labels and then distributes values from incomplete labels accordingly. This solution is easy to grasp, though it does not take all information into account. def impute_labels(df, target_cols=None, count_cols=None, missing_label='N'): ''' Missing label imputation. ''' new_rows = [] try: df, organism = _strip_timetable(df) except: pass if target_cols is None: target_cols = df.index.names if count_cols is None: count_cols = list(df.columns.get_level_values(0)) df = df.reset_index() for i in range(len(df)): row = df.iloc[i].copy() row[target_cols] cols_with_missing = row[target_cols].str.contains(missing_label) cols_with_missing = list(cols_with_missing[cols_with_missing.values].index) N = len(cols_with_missing) candidates = _get_candidates(row, cols_with_missing) priors = _get_priors(df, target_cols, count_cols, candidates) count = row.loc[count_cols] try: priors = pd.DataFrame(data=np.outer(priors, count), index=priors.index, columns=count.index) except: return priors, count new_rows.append(priors) df_new = pd.concat(new_rows) df_new = df_new.reset_index().groupby(target_cols).sum() return df_new.round(0).astype(int) def _get_candidates(row, cols_with_missing): candidates = [] N = len(cols_with_missing) for comb in product(['S', 'R'], repeat=N): for c, v in zip(cols_with_missing, comb): row.loc[c] = v candidate = row.copy() candidates.append(candidate) return candidates def _get_priors(df, target_cols, count_cols, candidates): priors = df.set_index(target_cols)\ .reindex(pd.DataFrame(candidates)[target_cols+count_cols]\ .set_index(target_cols).index) if len(count_cols) > 1: priors = priors.sum(axis=1).to_frame() priors = (priors / priors.sum()).fillna(0) priors = priors[priors.values != 0] return priors Here is a test case. def test__impute_labels(): df = pd.DataFrame({'AMP': ['R', 'R', 'S', 'N'], 'CZ': ['N', 'S', 'R', 'N'], 'Counts': [1, 10, 90, 1100], 'Counts2': [0, 0, 0, 1000]}).set_index(['AMP', 'CZ']) expected = pd.DataFrame({'AMP': ['R', 'S'], 'CZ': ['S', 'R'], 'Counts': [121, 1080], 'Counts2': [100, 900]}).set_index(['AMP', 'CZ']) result = impute_labels(df, ['AMP', 'CZ'], ['Counts', 'Counts2']) assert result.equals(expected), result
