[site]: stackoverflow
[post_id]: 3339814
[parent_id]: 
[tags]: 
How can you encrypt users' data server-side without ruining the experience?

Many users – myself included – would like the security of having everything they do on a web service encrypted. That is, they don't won't any one at the web service to be able to look at their: posts, info, tasks, etc... This is also major complaint in this discussion of an otherwise cool service: http://news.ycombinator.com/item?id=1549115 Since this data needs to be recoverable, some sort of two-way encryption is required. But unless you're prompting the user for the encryption key on every request, this key will need to be stored on the server, and the point of encrypting the data is basically lost. What is a way to securely encrypt user data without degrading the user experience (asking for some key on every request)? -- UPDATE -- From @Borealid's answer, I've focused on two possibilities: challenge-response protocols, where no data (password included) is sent in the "clear", and non-challenge-response protocols, where data (password included) is sent in the "clear" (although over HTTPS). Challenge-response protocols (specifically SRP: http://srp.stanford.edu/ ) It seems that its implementation would need to rely on either a fully AJAX site or using web storage. This is so the browser can persist the challenge-response data during encryption and also the encryption key between different "pages". (I'm assuming after authentication is completed I would send them back the encrypted encryption key, which they would decrypt client-side to obtain the real encryption key.) The problem is that I'm either: fully AJAX, which I don't like because I love urls and don't won't a user to live exclusively on a single url, or I have to store data encryption keys in web storage, which based on http://dev.w3.org/html5/webstorage/ will persist even after the browser is closed and could be a security vulnerability In addition, as SRP takes more than one request ( http://srp.stanford.edu/design.html ), there needs to be some persistence on the server-side. This is just another difficulty. Traditionally If I'm ok transmitting passwords and data in the clear (although over HTTPS), then the client-side issues above are not present. On registration, I'll generate a random unique encryption key for the user, and encrypt it using their password and a random salt. In the database, I'll store the user's password hash and salt (through bcrypt), encrypted encryption key, encryption key salt, and encryption iv. After an authentication, I'll also need to use their password to decrypt the encryption key so that they may view and enter new data. I store this encryption key only temporarily and delete it when they explicitly "log out". The problems with this approach is that (like @Borealid points out) evil sysadmins can still look at your data when you are logged in. I'm also not sure how to store the encryption keys when users are logged in. If they are in the same data store, a stolen database would reveal all data of those who were logged in at the time of theft. Is there a better in-memory data store for storing these encryption keys (and challenge data during an SRP authentication)? Is this something Redis would be good for?
