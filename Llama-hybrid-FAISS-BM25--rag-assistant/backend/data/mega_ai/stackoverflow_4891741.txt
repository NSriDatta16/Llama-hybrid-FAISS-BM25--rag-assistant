[site]: stackoverflow
[post_id]: 4891741
[parent_id]: 4891620
[tags]: 
The problem is that A.h includes main.h , which includes B.h , which tries to use A . The good way to organize your files would be this: main.h: // not needed main.cpp: #include "B.h" // for using class B int main( int argc, char* args[]) { B test; } A.h: #ifndef A_H #define A_H // no includes needed ATM class A { //... }; #endif B.h: #ifndef B_H #define B_H #include "A.h" // for using class A class B { //public functions... } #endif That way, B.h is self-contained and can be used without having to include anything else before it. That's very important as soon as your project grows above the toy level it is at now. Why would anyone trying to use what header x.h provides need to know to also include f.h , m.h , and u.h ?
