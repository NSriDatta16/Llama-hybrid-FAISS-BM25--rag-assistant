[site]: stackoverflow
[post_id]: 5689588
[parent_id]: 5689463
[tags]: 
In 12.2 paragraph 5 of N3126=10-0116 it's said that: The second context [ in which temporaries are destroyed at a different point than the end of the full-expression ] is when a reference is bound to a temporary. The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference except ... and then follows a list of four special cases (ctor-inizializers, reference parameters, returned value, new initializer). So (in this version) seems to me that clang is correct because you're binding the reference to a subobject of a temporary. EDIT Thinking to the base sub-object of an object this also seems to be the only reasonable behavior. The alternative would mean doing a slicing in: Derived foo(); ... void bar() { Base& x = foo(); // not very different from foo().b; ... } Actually after making a little experiment seems indeed that g++ differentiates between a member sub-object and a base sub-object, but I don't understand where this differentiation is made in the standard. The following is the test program I used and where it's clearly visible the different handling of the two cases... ( B is Base, D is Derived and C is composed). #include struct B { B() { std::cout The output I get with g++ (Ubuntu/Linaro 4.4.4-14ubuntu5) 4.4.5 is Before calling bar() Before calling foo() B{0xbf9f86ec}::B() D{0xbf9f86ec}::D() After calling foo() D{0xbf9f86ec}::doit() After calling b.doit() B{0xbf9f86e8}::B() C{0xbf9f86e8}::C() B{0xbf9f86e4}::B(const B& 0xbf9f86e8) C{0xbf9f86e8}::~C() B{0xbf9f86e8}::~B() After binding to .b B{0xbf9f86e4}::doit() After calling b2.doit() B{0xbf9f86e4}::~B() D{0xbf9f86ec}::~D() B{0xbf9f86ec}::~B() After calling bar() In my opinion this is either a bug in g++ or a bug in what the c++ standard mandates if this is really the expected behavior or a possible acceptable behavior (but I must tell that I didn't really think about it a lot, this is just a feeling that something is wrong with this differentiation).
