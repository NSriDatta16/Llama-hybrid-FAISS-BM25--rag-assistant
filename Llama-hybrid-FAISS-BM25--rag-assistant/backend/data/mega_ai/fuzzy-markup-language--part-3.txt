ag is used. The attributes used by the <Rule> tag are: name, connector, operator and weight. The name attribute permits to identify the rule; connector is used to define the logical operator used to connect the different clauses in antecedent part (and/or); operator defines the algorithm to use for chosen connector; weight defines the importance of rule during inference engine step. The definition of antecedent and consequent rule part is obtained by using <Antecedent> and <Consequent> tags. <Clause> tag is used to model the fuzzy clauses in antecedent and consequent part. This tag use the attribute modifier to describe a modification to term used in the clause. The possible values for this attribute are: above, below, extremely, intensify, more or less, norm, not, plus, slightly, somewhat, very, none. To complete the definition of fuzzy clause the nested <Variable> and <Term> tags have to be used. A sequence of <Rule> tags realizes a fuzzy rule base. As example, consider a Mamdani rule composed by (food is rancid) OR (service is very poor) as antecedent and tip is cheap as consequent. The antecedent part is formed by two clauses: (food is rancid) and (service is poor). The first antecedent clause uses food as variable and rancid as fuzzy term, whereas, the second antecedent clause uses service as a variable, poor as fuzzy term and very as modifier; the consequent clause uses tip as a fuzzy variable and cheap as a fuzzy term. The complete rule is: IF (food is rancid) OR (service is very poor) THEN (tip is cheap). Let us see how FML defines a rule base with this rule. Now, let us see a Takagi-Sugeno-Kang system that regulates the same issue. The most important difference with Mamdani system is the definition of a different output variable tip. The <TSKVariable> tag is used to define an output variable that can be used in a rule of a Tsk system. This tag has the same attributes of a Mamdani output variable except for the domainleft and domainright attribute because a variable of this kind (called tsk-variable) hasn't a universe of discourse. The nested <TSKTerm> tag represents a linear function and so it is completely different from <FuzzyTerm>. The <TSKValue> tag is used to define the coefficients of linear function. The following crunch of FML code shows the definition of output variable tip in a Tsk system. The FML definition of rule base component in a Tsk system doesn't change a lot. The only different thing is that the <Clause> tag doesn't have the modifier attribute. As example, consider a tsk rule composed by (food is rancid) OR (service is very poor) as antecedent and, as consequent, tip=1.9+5.6*food+6.0*service that can be written as tip is cheap in an implicitly way. So the rule can be written in this way: IF (food is rancid) OR (service is very poor) THEN (tip is cheap). Let us see how FML defines a rule base with this rule. FML Grammar The FML tags used to build a fuzzy controller represent the set of lexemes used to create fuzzy expressions. However, in order to realize a well-formed XML-based language, an FML context-free grammar is necessary and described in the following. The FML context-free grammar is modeled by XML file in the form of a XML Schema Document (XSD) which expresses the set of rules to which a document must conform in order to be considered a valid FML document. Based on the previous definition, a portion of the FML XSD regarding the knowledge base definition is given below. FML Synthesis Since an FML program realizes only a static view of a fuzzy system, the so-called eXtensible Stylesheet Language Translator (XSLT) is provided to change this static view to a computable version. In particular, the XSLT technology is used convert a fuzzy controller description into a general-purpose computer language to be computed on several hardware platforms. Currently, a XSLT converting FML program in runnable Java code has been implemented. In this way, thanks to the transparency capabilities provided by Java