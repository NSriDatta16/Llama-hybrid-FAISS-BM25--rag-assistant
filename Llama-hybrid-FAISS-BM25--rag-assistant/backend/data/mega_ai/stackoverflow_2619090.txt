[site]: stackoverflow
[post_id]: 2619090
[parent_id]: 2619008
[tags]: 
Depends what you mean by "clean" here. The whole thing would benefit immensely from basic indentation - pretty much, moving your existing whitespace to somewhere where it's more productive. (Your line breaks seem pretty inconsistently distributed, for one.) Indentation and line break consistency greatly boost code readability. On the next level of style, I see why you have the need to assign a ton of variables there, given that you're working with the raw MySQL functions. If you plan to stick with that system, at least assign the variables in a sensible order, not to mention that I made a few other changes and notes below. // Let's just strip all non-numerics from the card number so that we can validate it. $cc = preg_replace('/[^0-9]/', '', $_GET['Credit_Card_Number']); if(strlen($cc) != 12) { // The card number is invalid; go back to form and try again. } $last4 = substr($cc, -4); // A negative start value is cleaner. $accountid = $_SESSION['user_id']; $amount = mysql_real_escape_string($_GET['amount']); $credits = mysql_real_escape_string($_GET['custom3']); // note: don't trust that users won't change the ipAddress parameter before submitting $ipaddress = mysql_real_escape_string($_GET['ipAddress']); $orderid = (int) $_GET['order_id']; $product = mysql_real_escape_string($_GET['product1Name']); I broke the variable assignments into three blocks. The first is for data transformation, the second is for fetching data from non-GET sources, and the third is basic assignment from $_GET variables, sorted into alphabetical order. The assignments now are much more structured, and it is easy to find any given line. (This is, of course, not by any means a standard way of breaking things up; it's just what made sense here.) That's all that matters about good code - that it's easy for you to maintain. Do whatever works best for you, but I suspect that, in the long run, code readability and organized variable assignments work well. Also, as others have mentioned, consider using something like PDO for database operations, which allows you to use prepared statements and avoid all those escaping functions. You may also want to look into an ORM like Doctrine , or perhaps a full-fledged framework . Using more powerful tools has a higher learning curve, but also lead to more productivity once proficient in OOP.
