[site]: crossvalidated
[post_id]: 628473
[parent_id]: 
[tags]: 
Classification problem: Choosing medication to prevent side effects based on patient characteristics

I need your help to solve a classification problem. Typically, we have independent variables and we try to predict a target variable. I have a different type of problem to solve. In my case, let's take a simple example. Suppose I have a database with 6 variables: "white_blood_cells," "age," "weight," "gender," "medication," and "side_effects." "Medication" contains 0 and 1 for the type of medication, and "side_effects" contains 0 and 1 for no side effects or yes. I would like to create a classification model that examines the patient's characteristics ("white_blood_cells," "age," "weight," "gender") and provides the correct value of "medication" such that "side_effects" = 0. I'm not sure if there are tools available for this kind of problem, and I haven't found much information online. ChatGPT hasn't been very helpful either. The solution I've tried, though I'm not sure if it's valid, is as follows: I divided my database into two parts: "side_effects" = 0 and "side_effects" = 1. I created two random forest models to predict "medication." The first model, where the database is "side_effects" = 0, predicts either medication 0 or 1. This would mean that this medication should be chosen to avoid side effects. The second model, where the database is "side_effects" = 1, predicts either medication 0 or 1. This would imply that this medication causes side effects. Then, I added the predict_proba from the first model to the smaller one from the second model to choose the correct medication. Here is a part of my code: # first model NoSide_df = df[df['side_effect'] == 0] # Séparation des caractéristiques (X) et de la variable cible (y) X = NoSide_df[["white_blood_cells," "age," "weight," "gender"]] y = NoSide_df['medication'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) modelNoSide = RandomForestClassifier(random_state=42) modelNoSide.fit(X_train, y_train) # second model Side_df = df[df['side_effect'] == 1] # Séparation des caractéristiques (X) et de la variable cible (y) X = Side_df[["white_blood_cells," "age," "weight," "gender"]] y = Side_df['medication'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) modelNoSide = RandomForestClassifier(random_state=42) modelSide.fit(X_train, y_train) # prediction for first model prediction_medicamentNoside = modelNoSide.predict(new_data) proba_prediction_medicamentNoside = modelNoSide.predict_proba(new_data) probability_class_NOSide0 = proba_prediction_medicamentNoside[0, 0] probability_class_NoSide1 = proba_prediction_medicamentNoside[0, 1] # prediction for second model prediction_medicamentSide = modelSide.predict(new_data) proba_prediction_medicamentSide = modelSide.predict_proba(new_data) probability_class_Side0 = proba_prediction_medicamentSide[0, 0] probability_class_Side1 = proba_prediction_medicamentSide[0, 1] #prediction combined # Probabilités maximales des deux modèles max_probability_modelNoSide = max(probability_class_NOSide0, probability_class_NoSide1) min_probability_modelSide = min(probability_class_Side0, probability_class_Side1) # Moyenne des probabilités maximales average_max_probability = (max_probability_modelNoSide + min_probability_modelSide) / 2.0 if probability_class_NOSide0 > probability_class_NoSide1: # Affichage de la moyenne des probabilités maximales print("medicament = 0 n'a pas d'effet indesirbale pour ce groupe ", average_max_probability,"\n", "medicament = 1 n'a pas d'effet indesirbale pour ce groupe ", 1-average_max_probability,) else: print("medicament = 1 n'a pas d'effet indesirbale pour ce groupe ", average_max_probability,"\n", "medicament = 0 n'a pas d'effet indesirbale pour ce groupe ", 1-average_max_probability,) Could you please help me with this approach or suggest a better way to solve this problem? Thanks!
