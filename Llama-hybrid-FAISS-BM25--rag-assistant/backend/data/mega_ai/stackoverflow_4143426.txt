[site]: stackoverflow
[post_id]: 4143426
[parent_id]: 4133546
[tags]: 
After digging around for a couple of days I am starting to understand a bit more about embedded compilers. I wasn't really sure of the difference between arm-elf-gcc installed via MacPorts and the arm-unknown-linux toolchain I had installed on my Linux box. I just came across a pdf titled " An introduction to the GNU compiler " which contains the following paragraph: Important: Using the GNU Compiler to create your executable is not quite the same as using the GNU Linker, arm-elf-ld, yourself. The reason is that the GNU Compiler automatically links a number of standard system libraries into your executable. These libraries allow your program to interact with an operating system, to use the standard C library functions, to use certain language features and operations (such as division), and so on. If you wish to see exactly which libraries are being linked into the executable, you should pass the verbose flag -v to the compiler. This has important implications for embedded systems! Such systems do not usually have an operating system. This means that linking in the system libraries is almost always meaningless: if there is no operating system, for example, then calling the standard printf function does not make much sense. So when I get back to my dev machine later I will determine the libraries linked in with the Linux build and add them to the arm-elf-gcc build. I'll update this when I have more information but I just want to document my findings in case any one else has these problems.
