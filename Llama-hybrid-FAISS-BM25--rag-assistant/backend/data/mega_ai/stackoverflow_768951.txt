[site]: stackoverflow
[post_id]: 768951
[parent_id]: 766475
[tags]: 
There is no way to do this in Objective-C currently. Apple has published some work on their efforts to add blocks (really more like lambda closures than anonymous classes) to the language. You would likely be able to do something similar to the anonymous delegate with those. In the mean time, most Cocoa programmers add the delegate methods to a separate category on the delegate class. This helps to keep the code more organized. In the .m file for the class in your example, I would do something like this: @interface MyClass (UIActionSheetDelegate) - (void)actionSheet:(UIActionSheet*)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex; @end @implementation MyClass //... normal stuff here @end @implementation MyClass (UIActionSheetDelegate) - (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex{ if (buttonIndex == 0){ [[Settings sharedSettings] removeItemAtIndex:/*need index variable here*/]; [drinksTable reloadData]; } } @end Xcode's method popup in the editor window will separate the category's declaration and implementation from the main class'.
