[site]: stackoverflow
[post_id]: 3047175
[parent_id]: 3043012
[tags]: 
I think your code is mostly fine. The only thing I can see that's inefficient at a glance is your Fibonacci checking -- you're recomputing the Fibonacci sequence every time, duplicating a lot of work. It'd make more sense to compute the array of Fibonacci numbers once, up to the maximum value in your input set, and then just check each value to see if it's in that array. Also, you can simplify your hash initialization at the top by passing a value to Hash.new -- this will become the default value for any key it hasn't seen yet. So you could simply do: h = Hash.new(0) STDIN.each {|n| h[n.to_i] += 1} Otherwise, no problems with the individual computations. What strikes me as "un-Rubylike" is simply having one spaghetti script that computes half a dozen different things and spits them back out. It'd be more elegant to wrap each of those different mathematical functions into a method, and put those methods into a module. And then your script can just include the module, call the methods with your hash, and output whatever it needs.
