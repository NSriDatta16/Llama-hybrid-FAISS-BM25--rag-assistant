[site]: stackoverflow
[post_id]: 3358012
[parent_id]: 3357614
[tags]: 
I would have expected the type of "a | b" to be an unsigned char, as both operands are unsigned char, My reading of some beginner C books in past left the impression that bitwise operators were left in the language solely for the purpose of the system programming and generally should be avoided. The operators are performed by the CPU itself. CPU uses for operands registers (which are surely larger than char) and thus compiler cannot know how much bits of a register would be affected by the operation. To not to loose the full result of the operation, compiler upcasts the result to the proper operation. AFAICT. Why is the language designed so that the result is an int, or is this implementation dependent? Bit-level representation of data types is in fact implementation defined. That might be the reason why apparently bit-wise operations are also implementation defined. Though C99 defines in 6.2.6.2 Integer types how they should appear and behave (and later how bitwise operations should work) the particular chapter gives a lot of freedom to the implementation.
