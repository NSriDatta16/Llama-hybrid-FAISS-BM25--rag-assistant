[site]: stackoverflow
[post_id]: 1015203
[parent_id]: 1013088
[tags]: 
If you have the source of the D7 dll, you can change the exported function to make the ShortString function to return PChar. You can create new functions that call the original ones and do the typecast - that's the easiest path. If you follow this path do the same to the Integer and Cardinal types (cast them to LongInt and LongWord, respectively). Some code below (I imagine that mages like mr Hausladen have a more elegant approach, but this works :-) ) var SInput: ShortString; POutput: PAnsiChar; Tam: Integer; pt: Pointer; begin SInput := 'Alphabet'; //ShortString pt := @SInput[1]; // Points to the first char of the string; Tam := (Length(SInput))+1; // Size the string POutput := StrAlloc(tam); // Allocate; CopyMemory(POutput,pt,tam); // Do the copy POutput[tam-1] := #0; // Put the null to finish MessageBox(0, POutput, 'Algo', MB_ICONWARNING or MB_OK); StrDispose(POutput); end; This works because internally ShortString is a array [0..255] of Char. I don't have an D2009 at hand to see if the SizeOf(char) must be changed to SizeOf(AnsiChar). BUT the principle is the same: allocate the PAnsiChar, get the Pointer to the first the char of the ShortString and do Copy (in this case I've done with CopyMemory) to the PAnsiChar. And put the null in its' place. Or you can go the mghie's way and create a wrapper and do the casts there.
