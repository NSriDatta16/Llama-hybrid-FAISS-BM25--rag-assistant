[site]: stackoverflow
[post_id]: 3887167
[parent_id]: 3885725
[tags]: 
There's also a setStatus(int) method that you can call with any code, and then you can write your own html body. This is close, except that you can't specify the http response message. Is there any reason why you would not use response.setStatus(500) to set the HTTP status code, followed by writing to the response's output stream? This is how "writing to the response body" is achieved at the lowest level. Here's an example: public class ErrorServlet extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 500 error resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); resp.getWriter().print(" Oops an error happened! "); resp.getWriter().print(" Something bad happened uh-oh! "); resp.getWriter().println(" "); } } web.xml: myerror brown.testservlet.ErrorServlet myerror /myErrorPage And the output: $ curl -I http://localhost:8080/testservlet/myErrorPage HTTP/1.1 500 Internal Server Error Content-Length: 108 Server: Jetty(6.1.16) $ curl -v http://localhost:8080/testservlet/myErrorPage * About to connect() to localhost port 8080 (#0) * Trying 127.0.0.1... connected * Connected to localhost (127.0.0.1) port 8080 (#0) > GET /testservlet/myErrorPage HTTP/1.1 > User-Agent: curl/7.20.0 (i686-pc-mingw32) libcurl/7.20.0 OpenSSL/0.9.8k zlib/1.2.3 > Host: localhost:8080 > Accept: */* > Oops an error happened! Something bad happened uh-oh! * Connection #0 to host localhost left intact * Closing connection #0
