[site]: stackoverflow
[post_id]: 4379602
[parent_id]: 4379570
[tags]: 
I'd say that your approach sounds good - it is a reasonably efficient way to do it and it will be clear to the reader what you are doing. However a slightly less elegant but possibly faster alternative is to use the start parameter of the find function. i = 0 while True: j = word.find('a', i) if j == -1: break print word[:j] + word[j+1:] i = j + 1 The find function is likely to be highly optimized in C, so this may give you a performance improvement compared to iterating over the characters in the string yourself in Python. Whether you want to do this though depends on whether you are looking for efficiency or elegance. I'd recommend going for the simple and clear approach first, and only optimizing it if performance profiling shows that efficiency is an important issue. Here are some performance measurements showing that the code using find can run faster: >>> method1='[s[:key] + s[key+1:] for key,val in enumerate(s) if val == "a"]' >>> method2=''' result=[] i = 0 while True: j = s.find('a', i) if j == -1: break result.append(s[:j] + s[j+1:]) i = j + 1 ''' >>> timeit.timeit(method1, init, number=100000) 2.5391986271997666 >>> timeit.timeit(method2, init, number=100000) 1.1471052885212885
