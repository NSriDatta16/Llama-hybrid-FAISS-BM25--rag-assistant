[site]: stackoverflow
[post_id]: 5418890
[parent_id]: 5418474
[tags]: 
That’s not possible using VBScript, unless you want to dynamically generate the code for a class, including the properties, save that to file, and then execute that file as a script. This is so much easier to do using JScript. Since Windows Scripting can handle JScript as well as VBScript, I’d recommend going that way. If you definitely need VBScript, the best you can go for is a Scripting.Dictionary that would contain the properties as keys: Dim dicUser dicUser = CreateObject("Scripting.Dictionary") dicUser("FirstName") = objUser.FirstName which would allow you to access the first name as follows: dicUser("FirstName") Update If you want to write a function which creates a dictionary and returns that, this is how to do it in VBScript: Function RememberTheUser(Request) Dim dicResult Set dicResult = CreateObject("Scripting.Dictionary") dicResult("FirstName") = Request.GetTheFirstName Set RememberTheUser = dicResult End Function Which can then be assigned to some other variable: Dim dicUser ' in the main section of the script, this means it's a global variable Sub onPreCreate(Request) ' ... Set dicUser = RememberTheUser(Request) ' ... End Sub Sub onSomethingLater() WScript.Echo dicUser("FirstName") ' It's still accessible here End Sub In JScript, it’s a lot easier: just create a new object, and tack on new properties. function readObject(dataSource) { var result = {}; result.source = dataSource; result.firstName = dataSource.firstName; result['lastName'] = dataSource.FunctionThatGetsLastName(); } Note that in JScript, object properties can be accessed using the object.property notation, but also through the object['property'] notation, which is very useful when you have dynamically-named properties. ( 'property' in the second notation is a string, and can be replaced by any expression that returns a string).
