[site]: stackoverflow
[post_id]: 843999
[parent_id]: 843807
[tags]: 
We are in the early days of multitouch technologies. Without the correct software tools, there is no advantage to multitouch. Having said that, there is currently no advantage to using multitouch displays. In the days of coding on console, vi and emacs were popular. When graphical environments and computer mice became popular, they were incorporated into the next generation of programming environments. If multitouch displays catch on, there is every reason to think that developer tools will be outfitted with touch controls and gestures. There are some things for which I can imagine multitouch being used in an IDE. In all probability, these features will never come to fruition. Context-sensitive touch buttons. While "clicking" (first finger touch) on code you've selected, a number of buttons appear on the left or right edge of the screen. While holding the first finger down, press one of these buttons with a finger from the other hand. This reduces the fatigue of mouse-selecting a block of code and moving all the way up to the toolbar to click a tiny buttonâ€”all on the left or right hand. The buttons that appear should be big enough for easy tapping, and only those that are common and applicable to selected code should appear. Suppose I press the "change indent" button. Now I use a single finger to drag the code left and right to choose its indentation level. Simultaneous manipulation of multiple controls. Have two files to merge after a major refactor and built-in diff is bamboozled? Scroll the two versions of the file independently with one finger on each hand. Gestures. Scroll with two fingers on the screen. Perhaps undo by drawing a three-quarter circle counterclockwise starting at the three o'clock position with six fingers. This stuff isn't going to be perfect at first, but scrolling is promising. Having a way to avoid aiming for the little scroll bar and not giving your middle finger arthritis from major scrolling operations on the little wheel is a good thing. Make no mistake: this will take some time to catch on. Also, as with every technology, most developers will start off trying to exploit the technology to the point where usability suffers. Finally, when it does stabilize and become useful, you may not actually want to use it. People who use vim like vim more than Visual Studio, but some vim users do like using vim as a GUI. People who like Visual Studio will probably use Visual Studio more than whatever touch-based development environment comes along, but eventually Visual Studio will start adding touch features.
