[site]: stackoverflow
[post_id]: 5395991
[parent_id]: 5388667
[tags]: 
Let's work into a simple example. B B1 B2 | \ / D D On the left, we find a class derived from a single bass. Clearly reasonable in OO design for having an is-a relationship respecting the Liskov Substitution Principal. On the right, both B1 and B2 are independent bases of D , and D can be accessed polymorphically using a B1* or B2* (or references). Hopefully we can accept that this is also a valid OO design (despite Sun deeming it too stressfully mind-bending for Java programmers ;-P). Then consider having some base functionality factored out of both B1 and B2 and made reusable: say they both operate on an arbitrary list of numbers to which they can reasonably grant direct/ public access: Container Container \ / B1 B2 \ / D If this isn't clicking yet, perhaps: Container Container \ / Ages Heights \ / Population It is reasonable to say that Ages is-a Container , though it might add some convenient functionality like average , min , max , num_teenagers . Same for Heights , possibly sporting a different set of convenience functions. Clearly a Population can reasonably be substituted for an Ages or Heights collection (e.g. size_t num_adults(Ages&); if (num_adults(my_population)) ... ). The point here is that each supporting container isn't meant to have a 1:1 relationship with further-derived classes like Population ; rather, it's meant to be exactly 1:1 with its immediately-derived class . Again, whether composition or inheritance is used is an interface design decision, but it's not necessarily invalid to expose the containers publicly in this way. (If there's concern about maintaining Population invariants such as Ages::empty() == Heights::empty() the data-mutating functions of Container might be made protected while const member functions were public .) As you observe, Population does not have an unambiguous is-a relationship with Container and code may need explicit disambiguation. That's appropriate. Of course, it's also possible and reasonable for Population to derive from Container if it stores some other set of numbers, but that would be independent of the indirectly inherited containers. My question is, other than "This isn't really an is-a relationship, I used naughtily used public inheritance as a syntactic convenience when it wasn't conceptually valid" I see no issue with the is-a relationships or conceptual validity of the above, if you do please explain.... "I never need to refer polymorphically to the base class from the most-derived class so the incredibly small overhead isn't worth it" I think it's clear I'm just doing data modelling based on natural object relationships, not some dubious optimisation. The supporting container class factored out of the bases is actually used and must be independent in each.
