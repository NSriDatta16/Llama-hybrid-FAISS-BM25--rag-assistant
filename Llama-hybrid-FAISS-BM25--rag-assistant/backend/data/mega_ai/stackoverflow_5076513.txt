[site]: stackoverflow
[post_id]: 5076513
[parent_id]: 5076375
[tags]: 
Step 1. You need to create a tree structure from a table in memory from, this should be simple. Checkout this question here: Most efficient way of creating tree from adjacency list Here is some code for your multi root case (I did not want to modify the parent values to some bogus value, therefore the virtual root and its immediate children will have parent = null, but that doe not matter for traversing the tree, since you have Children and IsRoot): public class Branch { public Branch() { Children = new List (); } public bool IsRoot { get; set; } public int? BranchId { get; set; } public int? ParentId { get; set; } public List Children { get; set; } public int ProductCount { get; set; } public int HasBranchChildren { get; set; } public string Name { get; set; } //other data } public class BranchTreeHelper { public Branch MakeTree() { var virtualRoot = new Branch() { BranchId = null, ParentId = null, IsRoot = true }; // get the data from db, just disregard the properties: Children and IsRoot flage List branchList = GetDataFromDB(); var branchDict = branchList.ToDictionary(i => i.BranchId.Value, i => i); foreach(var branch in branchList) { if(branch.ParentId.HasValue) { branchDict[branch.ParentId.Value].Children.Add(branch); } else { virtualRoot.Children.Add(branch); } } return virtualRoot; } } Step 2. Sadly MS made it difficult, by not offering a simple generic way to bind to hierarchical data. But luckily others have created code that can. Use this to bind your new tree structure to a tree view: http://ohds.codeplex.com/ From the project homepage: ObjectHierarchicalDataSource is to hierarchical data sources what ObjectDataSource is to tabular data sources. It enables the page developer to declaratively bind hierarchical controls such as Menu and TreeView to almost any object graph. You could create you're own custom implementation of IHierarchicalDataSource but I would strongly advise against that since this is cumbersome and error prone. Option 2: If you do not want to use third party user controls the checkout this generic implementation of IHierarchicalDataSource this again can be bound to any hierarchical ASP.NET control: http://elegantcode.com/2008/04/06/aspnet-hierarchicaldatasourcet/
