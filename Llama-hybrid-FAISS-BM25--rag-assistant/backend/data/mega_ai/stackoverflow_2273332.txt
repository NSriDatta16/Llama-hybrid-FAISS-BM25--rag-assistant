[site]: stackoverflow
[post_id]: 2273332
[parent_id]: 2220939
[tags]: 
Presumably you are going to post the editable content back to a server. Therefore, you shouldn't really care whether you have paragraph or break tags in place while the user is editing, because you can parse the HTML before submission (or on the server, if you like) and replace instances of paragraphs with breaks. This keeps the UNDO queue in operation for the user, but lets you have your HTML as clean as you want it. I'll further presume that you're going to know exactly which DIV elements are going to be contentEditable. Before the form is submitted, you can run each contentEditable div through a function like this: function cleanContentEditableDiv(div) { var htmlString = div.innerHTML; htmlString = htmlString.replace(/ /gim," "); htmlString = htmlString.replace(/ /gim,""); return htmlString; } And you call this in a loop (which iterates through all contentEditable DIVs, using an array I will call ceDivs), like this: ceDivs[i].contentEditable = false; // to make sure IE doesn't try to coerce the contents again and then: ceDivs[i].innerHTML = cleanContentEditableDiv(ceDivs[i]); An improvement on this (especially if you don't want to do this right at submit time), might be to clean the contents of each such div any other time you like (onblur, whatever) and assign the contents of each ceDiv to its own invisible form element for later submission. Used in combination with your own CSS suggestion above, this might work for you. It doesn't preserve your literal requirements to the letter (i.e., it doesn't get Javascript to make IE behave differently than it has been coded under the covers to behave) but for all practical purposes the effect is the same. The users get what they want and you get what you want. While you're at it you may also want to clean space strings in IE as well. If the user types multiple spaces (as some still do after periods), what is inserted by IE is not [space][space] but [space]&nbsp;, an initial space character (String.fromCharCode(32)) plus as many &nbsp; entities as there are left in the space run.
