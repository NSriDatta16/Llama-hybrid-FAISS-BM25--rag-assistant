[site]: stackoverflow
[post_id]: 392180
[parent_id]: 388189
[tags]: 
YouTube and the general ubiquity of Flash video entrenched the Flash player into over 95% of the browsers that are accessing the public Internet. Incorporating Flex GUI for form design with widgets and an extremely well designed GUI SDK was a major turning point for the Flash player. Flex 2 and Flashplayer 9 were the tipping points of when this technology really jelled. Enterprise developers began to quickly realize that this technology was just the right approach for doing their applications. (At JavaOne in 2006, Adobe Flex 2 was the most impressive and pivatol technology that I saw there.) The Flash runtime has just enough stuff to run RIA GUI well in a web browser sandbox setting - Java applets required the full JRE (about 16 MB). The Flash runtime was a much leaner and smarter design for its intended purpose. (Sun has only now begun to remedy this for Java via their JavaFX and redesigned JRE that can download a few MB as sufficient to run a web applet. They don't have anything like YouTube Flash video to drive their installations, though.) Writing Flex RIA applications is a very leveraged experience compared to writing old-school web HTML/JavaScript AJAX apps. Can achieve a great deal more and have less effort to accomplish such. Adobe bolstered Flex with other important pieces, such as BlazeDS (and now they're cooperating with SpringSource to make BlazeDS and Spring-Framework a smoother integration). The single-thread GUI in combination to async service calls (or messaging), and ActionScript3 closures is great programming model: Flex Async I/O vs Java and C# Explicit Threading Likewise, Adobe Flex has a great implementation of properties, events, and databinding. A declarative language, ala MXML, is indeed a better approach to describing a form (what is essentially the view in the MVC pattern). It is more concise than equivalent imperative ActionScript code that would accomplish the same thing, and thus clearer. The hierarchical structure of MXML script tends to naturally match well to the panel/widget construction of views as well. With Flex RIA approach, the MVC pattern can be implemented completely on the client tier. Web frameworks that implemented MVC in the middle-tier - with the presentation layer executing in the remote client-tier, was a fundamentally flawed approach to MVC. MVC should be done right at the tier that is directly user-facing. (Once again, Adobe Flex does things right architecturally.) Despite that HTML/DOM/JavaScript is considered the pervasive standard of the Internet web, the Adobe Flash player is actually a more ubiquitous and consistent standard - spanning different browsers and operating system platforms. The HTML/DOM/JavaScript standard is in actuality a fragmented mess that grows more fragmented everyday as Google and Microsoft drive different directions on things regarding the web browser. Adobe Flash player ends up being a wonderful end-run around this dilemma. It's a great programming experience for the coders and has sufficient ubiquity for the business suits. Adobe is smartly well supporting the major platforms of Windows, Mac OS X, and Linux. They pay special attention to the Linux platform. This will pay off in the long term as developers are already settling on Linux to do their development from, and it's used extensively for servers hosting their middle-tier. Adobe's recent 64-bit Flash player for Linux is just a marvel. They already have AIR 1.5 available on Linux. They are doing a decent job there of supporting the platform that the developers care about.
