[site]: stackoverflow
[post_id]: 288132
[parent_id]: 
[tags]: 
How do I encourage code sharing and limit the bug tracking overhead while maintaining flexibility in my releases?

How are you tracking changes, testing effort for bugs that impact multiple artifacts released separately? Code sharing is good because it reduces the total number of paths through the code which means more impact for fewer changes and less bugs (or more bugs addressed with fewer changes). For example, we may build a search tool and an indexer that use the same file handling package or model package. We need to be able to ensure that changes get tested in all the right components and track which changes were included with which released tools. We also don't want to be forced to release the change in all applications at the same time. Goal: one bug to be tested, scheduled tracked independently against each released application. With automated systems that understand the architecture guiding us to make the right choices. Bug Split Release Scenario: We may release a patch of the search tool that contains a performance fix in a util library. Critical for the search tool, the fix is less visible in the indexer so it can wait until the next maintenance release. We want the one bug to be scheduled-tracked-released with the search patch and deferred for the indexer's next maintenance release. So, when I create a bug in our tracking system (JIRA) I want it to magically become multiple objects. primary issue describing the problem and tracking the development work a set of tasks that allow me to track testing effort and for me to track how this issue has been released for each application it impacts. How can we make the user experience of code sharing low effort to encourage more of it without becoming blind to what changes impacted which releases or forcing people to enter many duplicate bugs? I'm sure that large scale projects from Eclipse to linux distros have faced this kind of problem and wonder how they have solved it (I'm going to poke around on them next). Do any of you have experience with this kind of situation and how have you approached it?
