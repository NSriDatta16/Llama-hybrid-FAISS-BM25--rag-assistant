[site]: stackoverflow
[post_id]: 2927150
[parent_id]: 2926961
[tags]: 
I know you said you didn't want to have to get it from the context xml, but I can't see an easy and non-fragile way around it. In Spring 2.0 and greater you can use the element to reference a property of another bean. Let's say your DataSource is declared like so (note: I'm going to use the p-namespace throughout for brevity): I'm assuming that your JdbcTemplate is being used by some data access object. Let's say it looks like this: public class SimpleDao implements ExampleDao { private JdbcTemplate jdbcTemplate; public void setDataSource(DataSource dataSource) { this.jdbcTemplate = new JdbcTemplate(dataSource); } } So the Spring config to construct this DAO is like so: Now to our problem: how to get the JdbcUrl property into our DAO? Let's add a setter: public class SimpleDao implements ExampleDao { private String jdbcUrl; // ... public void setJdbcUrl(String jdbcUrl) { this.jdbcUrl = jdbcUrl; } // ... And finally we inject this using the aforementioned element: The URL is available from the bean named dataSource using getJdbcUrl (note that this is on the concrete DataSource, not the interface), so the property-path element tells Spring to get the value from there and use it as the value for the DAO's property. This isn't too much code (it's one setter and one extra property) and you're guaranteed to always have the same value injected into both beans.
