[site]: stackoverflow
[post_id]: 3871875
[parent_id]: 1027981
[tags]: 
I know its been a few months since the question was asked, however I feel obliged to mention a (long-standing?) solution that I stumbled accross. It does do away with the entire xmldeclaration, and all you need to dois re-write just the declaration you need by writting a proccesing instruction. XmlFragmentWriter - Omiting the Xml Declaration and the XSD and XSI namespaces And here is the class in VB Imports System.Xml Imports System.IO Imports System.Text Class XmlFragmentWriter Inherits XmlTextWriter Public Sub New(ByVal w As TextWriter) MyBase.New(w) End Sub Public Sub New(ByVal w As Stream, ByVal encoding As Encoding) MyBase.New(w, encoding) End Sub Public Sub New(ByVal filename As String, ByVal encoding As Encoding) MyBase.New(New FileStream(filename, FileMode.Create, FileAccess.Write, FileShare.None), encoding) End Sub Private _skip As Boolean = False Public Overrides Sub WriteStartAttribute(ByVal prefix As String, ByVal localName As String, ByVal ns As String) ' STEP 1 - Omits XSD and XSI declarations. ' From Kzu - http://weblogs.asp.net/cazzu/archive/2004/01/23/62141.aspx If prefix = "xmlns" AndAlso (localName = "xsd" OrElse localName = "xsi") Then _skip = True Return End If MyBase.WriteStartAttribute(prefix, localName, ns) End Sub Public Overrides Sub WriteString(ByVal text As String) If _skip Then Return End If MyBase.WriteString(text) End Sub Public Overrides Sub WriteEndAttribute() If _skip Then ' Reset the flag, so we keep writing. _skip = False Return End If MyBase.WriteEndAttribute() End Sub Public Overrides Sub WriteStartDocument() ' STEP 2: Do nothing so we omit the xml declaration. End Sub End Class and the usage here: Dim f As New XmlSerializer(GetType(OFXg)) Dim w As New XmlFragmentWriter("c:\books1.xml", Nothing) w.Formatting = Formatting.Indented w.WriteProcessingInstruction("xml", "version=""1.0""") f.Serialize(w, RTofx) w.Close() Of Course the OFXg class is an XMLSerializable
