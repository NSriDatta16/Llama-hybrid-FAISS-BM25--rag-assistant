[site]: stackoverflow
[post_id]: 685156
[parent_id]: 
[tags]: 
C#: implicit operator and extension methods

I am trying to create a PredicateBuilder class which wraps an Expression > and provides some methods to easily build up an expression with various And and Or methods. I thought it would be cool if I could use this PredicateBuilder as an Expression > directly, and thought this could be done by having an implicit operator method thing. Stripped down version of the class looks like this: class PredicateBuilder { public Expression > Predicate { get; protected set; } public PredicateBuilder(bool initialPredicate) { Predicate = initialPredicate ? (Expression >) (x => true) : x => false; } public static implicit operator Expression >( PredicateBuilder expressionBuilder) { return expressionBuilder.Predicate; } } Then, just as a test, I have this extention method in a static class: public static void PrintExpression (this Expression > expression) { Console.WriteLine(expression); } In my head, I should then be able to do these: var p = new PredicateBuilder (true); p.PrintExpression(); PredicateExtensions.PrintExpression(p); However none of them work. For the first one, the extension method is not found. And for the second, it says that The type arguments for method 'ExtravagantExpressions.PredicateHelper.PrintExpression(System.Linq.Expressions.Expression>)' cannot be inferred from the usage. Try specifying the type arguments explicitly. So I tried the following, which worked: PredicateExtensions.PrintExpression (p); Also, this works, of course: ((Expression >) p).PrintExpression(); But yeah... why don't the others work? Have I misunderstood something about how this implicit operator thing works?
