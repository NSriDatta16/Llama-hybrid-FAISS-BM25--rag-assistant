[site]: stackoverflow
[post_id]: 5162454
[parent_id]: 5161962
[tags]: 
Just did simple test on primitive type, and looks like your code sample #2 is fastest in this case (updated): [TestFixture] public class SandboxTesting { #region Setup/Teardown [SetUp] public void SetUp() { _iterations = 10000000; } [TearDown] public void TearDown() {} #endregion private int _iterations; private void SetCollectionSize(int size) { _collection = new Collection (); for(int i = 0; i _collection; private void AnyFirst() { if(_collection.Any()) { int? firstItem = _collection.First(); var x = firstItem; } } private void NullCheck() { int? firstItem = _collection.FirstOrDefault(); if (firstItem != null) { var x = firstItem; } } private void ForLoop() { foreach(int firstItem in _collection) { var x = firstItem; break; } } private void TryGetFirst() { int? firstItem; if (_collection.TryGetFirst(out firstItem)) { var x = firstItem; } } private TimeSpan AverageTimeMethodExecutes(Action func) { // clean up GC.Collect(); GC.WaitForPendingFinalizers(); GC.Collect(); // warm up func(); var watch = Stopwatch.StartNew(); for (int i = 0; i (this IEnumerable seq, out T value) { foreach(T elem in seq) { value = elem; return true; } value = default(T); return false; } } AnyFirst NonEmpty: 00:00:00.0000262 seconds EmptySet: 00:00:00.0000174 seconds ForLoop NonEmpty: 00:00:00.0000158 seconds EmptySet: 00:00:00.0000151 seconds NullCheck NonEmpty: 00:00:00.0000088 seconds EmptySet: 00:00:00.0000064 seconds TryGetFirst NonEmpty: 00:00:00.0000177 seconds EmptySet: 00:00:00.0000172 seconds
