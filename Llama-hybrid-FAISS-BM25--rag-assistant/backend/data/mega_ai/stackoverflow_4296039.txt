[site]: stackoverflow
[post_id]: 4296039
[parent_id]: 4289164
[tags]: 
Why do you have an attribute table ? Attributes are columns, not tables. The website link tells us nothing. The whole idea of a database is that you join the many small tables, as required, for each query, so you need to get used to that. Sure, it gives you a grid, but a short and sweet one, without Nulls. What you are trying to do is avoid tables; go with just one massive grid, which is full of Nulls. (snip) Do not prefix your attribute names (column names) with the table name, that is redundant. This will become clear to you when you start writing SQL which uses more than one table: then you can use the table name or an alias to prefix any column names that are ambiguous. The exception is the PK, which is rendered fully, and used in that form wherever it is an FK. Browse the site, and read some SQL questions. After doing that, later on, you can think about if you want strength and defense to be attributes (columns) of type ; or not. Et cetera. Responses to Comments 30 Nov 10 . Excellent, you understand your data. Right. Now I understand why you had an Attribute table. Please make sure those 10 examples are representative, I am looking at them closely. Type:Gem Name:Emberspark Pendant ... Or, is NeckMiscellaneous a type ? Is Unique a true ItemType ? I think Not Action.Display "Please return to a Season Organizer" Where are the Attrinutes for AttackPower and HitRating ? . How many different types of items (of 35,000) are there, ala my Product Cluster example. Another way of stating that question is, how many variations are there. I mean, meaningfully, not 3500 Items รท 8 Attributes ? Will the item_attributes change without a release of s/w (eg. a new Inner Strength attribute) ? Per Item, what Attributes are repeating (more than one); so far I see only Action ? It is a game, so you need a db that is tight and very fast, maybe fully memory resident, right. No Nulls. No VAR Anything. Shortest Datatypes. Never Duplicate Anything (Don't Repeat Yourself). Are you happy with bits (booleans) and vectors ? Do you need to easily translate those regexes into SQL, or are you happy with a serious slog for each (ie. once you get them working in SQL they are pretty stable and then you don't mess with it, unless you find a bug) (no sarcasm, serious question) ? 6.1 Or maybe it is the other way round: the db is disk-resident; you load it into memory once; you run the regexes on that during gameplay; occasionally writing to disk. Therefore there is no need to translate the regexes to SQL ? Here's a Data Model of where I am heading, this not at all certain; it will be modulated by your answers. To be clear: Sixth Normal Form is The Row consists of the Primary Key and, at most, one Attribute. I have drawn (6.1) not (6), because your data reinforces my belief that you need a pure 6NF Relational database My Product Cluster Data Model , the better-than-EAV example, is 6NF, then Normalised again (Not in the Normal Form sense) by DataType, to reduce no of tables, which you have already seen. (EAV people usually go for one or a few gigantic tables.) This is straight 5NF, with only the 2 tables on the right in 6NF. Link to Game Data Model Link to IDEF1X Notation for those who are unfamiliar with the Relational Modelling Standard. Response to Edit #2 05 Dec 10 1.1. Ok, corrected. 1.2. Then IsUnique is an Indicator (boolean) for Item. 1.3. Action. I understand. So Where are you going to store it ? 1.4. NeckMiscellaneous means that item is in both categories of Neck and Misc . That means two separate Item.Name=Emberspark Pendant , each with a different Category. . 2. and 5. So you do need fast fast memory-resident db. That's why I am trying to get you across the line, away from GridLand, into RelationalLand. . 3. Ok, we stay with Fifth Normal Form, no need for 6NF or the Product Cluster (tables per Datatype). Sofar the Values are all Integers. . 4. I can see additionally: Level , RequiredLevel , IsUnique , BindsPickedUp , BindsEquipped . . 5. Bits are booleans { 0 | 1 }. Vectors are required for (Relational) projections. We will get to them later. . 6. Ok, you've explained, You are not translating regular expressions to SQL. (Slog means hard labour). . 7. What is Category.ParentId ? Parent Category ? That has not come up before. . 8. Attribute.GeneratedId ? Please evaluate the Data Model (Updated). I have a few more columns, in addition to what you have in yours. If there is anything you do not understand in the Data Model, ask a specific question. You've read the Notation document, right ? I have Action as a table, with ItemAction holding the Value : Equip: increase attack power by 28 is Action.Name = Increase attack power by and ItemAction.Value =28.
