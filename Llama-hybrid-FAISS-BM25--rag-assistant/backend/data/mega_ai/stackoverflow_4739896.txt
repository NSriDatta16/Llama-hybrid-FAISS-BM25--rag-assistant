[site]: stackoverflow
[post_id]: 4739896
[parent_id]: 
[tags]: 
Preserve line breaks inside tags using DOMXPath?

I'm currently using PHP and DOMXPath to get the contents of all of the elements of a web page: loadHTML($html); $xpath = new DOMXPath($doc); $paragraphs = $xpath->evaluate("/html/body//p"); foreach ($paragraphs as $paragraph){ echo $paragraph->textContent . " "; } My problem is that the string resulting from textContent does not respect tags that exist within those elements. Instead it removes the line break and pushes words together that would normally be on separate lines. For example: Sample HTML: Some happy talk goes here talking about our great product. We would love for you to buy it! Random information and what not Isn't that cool? Current Output from PHP above: Some happy talk about our great product.We would love for you to buy it! Random information and what notIsn't that cool? I have tried $paragraphs = $doc->getElementsByTagName("p"); as well and it gives me the same thing. Is there a way to make DOMXPath/DOMDocument preserve the line breaks? I need to be able to separate each of the words within a paragraph, and the current output disallows that. If there is an alternative method for retrieving the string within elements while preserving or '\n' that would also be great. EDIT Upon further investigation the HTML in question is actually a list of anchors separated by tags but with no actual line breaks: Classic Checking Interest Checking Premium Checking Savings Plans Money Market Accounts CDs IRAs Turns out that this works properly with the original HTML given. UPDATE: Solved With the help of @ircmaxell's answer, and the comments left by @netcoder and @Gordon this has been solved, it's not very elegant but it will do for now. Example: foreach ($paragraphs as $paragraph){ $p_text = new DOMDocument(); $p_text->loadHTML(str_ireplace(array(" ", " "), "\r\n", DOMinnerHTML($paragraph))); //Do whatever, in this case get all of the words in an array. $words = explode(" ", str_ireplace(array(",", ".", "&", ":", "-", "\r\n"), " ", $p_text->textContent)); print_r($words); } This makes use of DOMinnerHTML (as suggested by @netcoder) to replace the instances of with "\r\n" (as suggested by @ircmaxell), which can then be evaluated post textContent. Obviously there's some room for improvement, but it has solved my current issue. Thanks for the help everyone, Ben
