[site]: stackoverflow
[post_id]: 4785583
[parent_id]: 
[tags]: 
C++ STL set of classes - compiler error error C2664

Newbie programmer here trying to work out his homework. I'm trying to use a STL set of classes, but the compiler complains about my code. car.h #include #include #include #include class Car { private: std::string plateNumber; std::string description; std::string dateIn; std::string timeIn; public: Car() {}; ~Car() {}; Car(std::string plate, std::string desc) { plateNumber = plate; description = desc; }; void setPlateNumber(std::string plate) ; std::string getPlateNumber() const; void setDesc(std::string desc); void setTimeDateIn() ; std::string getTimeIn() const; std::string getDateIn() const; std::string getDesc() const; friend std::ostream & operator #include #include #include "car.h" void carEnters(std::set g); void carLeaves(std::set g); void displayContents(std::set g); int main () { char choice [80]; // initialize the sets and iterators std::set garage; do // Loop until user quits { std::cout g) { // Car enters garage std::cout > plate; std::cin.ignore(); std::set ::iterator findPlate; Car* lookup = new Car; lookup->setPlateNumber(plate); findPlate = g.find(*lookup); if (findPlate != g.end()) // Add car to garage { Car *currentCar = new Car ; // Set car parameters std::cout : " setDesc(desc); currentCar->setTimeDateIn(); currentCar->setPlateNumber(plate); g.insert(currentCar); } else // Plate is already in garage set { std::cout g) { std::string plate; std::cout > plate; std::cin.ignore(); // Find car's plate number in the garage set // for (findPlate=garageSet.begin(); findPlate !=garageSet.end(); findPlate++) std::set ::iterator findPlate; Car lookup(plate,""); findPlate = g.find(lookup); if (findPlate != g.end()) { // Display time in and then remove car from set of cars std::cout garage) { // function displays current contents of the parking garage. std::set ::iterator carIndex; std::cout getPlateNumber() getDateIn() getTimeIn() getDesc() The error I get from the compiler is this: xmemory(208): error C2664: 'Car::Car(const Car &)' : cannot convert parameter 1 from 'Car *' to 'const Car &' Reason: cannot convert from 'Car *' to 'const Car' No constructor could take the source type, or constructor overload resolution was ambiguous I'm not sure where I'm going wrong, would some please point out how my overload is incorrect? Thanks
