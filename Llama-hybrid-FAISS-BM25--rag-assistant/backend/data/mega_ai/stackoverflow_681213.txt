[site]: stackoverflow
[post_id]: 681213
[parent_id]: 681192
[tags]: 
You can create a general "zip" function taking iterators to both vectors, and a convertor functor and an output iterator: template void zip( at_It1 from1, const at_It1 to1, at_It2 from2, const at_It2 to2, at_Transform tranformer, at_Out& av_Out ) { while( from1 != to1 ) { av_Out = transformer( *from1, *from2 ); ++av_Out; ++from1; ++from2; } } struct DoubleToComplex { complex operator()( const double d1, const double d2 ) const { return complex ( d1, d2 ); } }; zip( vA.begin(), vA.end(), vB.begin(), vB.end(), DoubleToComplex(), std::back_inserter( vTarget ) ); And I wish there were such a function in the STL...
