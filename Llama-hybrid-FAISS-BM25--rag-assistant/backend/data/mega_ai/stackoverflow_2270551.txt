[site]: stackoverflow
[post_id]: 2270551
[parent_id]: 
[tags]: 
DataView hides spawning ComboBox

I posted this at the Ext forums a couple of days ago, but no response, so maybe better luck here. I currently have a combo box loading data from php through ajax. Everything works fine except that when my results are returned, the DataView covers the ComboBox (fig 2.) I have included the relevant code below, so any help would be greatly appreciated. I may be wrong, but I think I've eliminated CSS problems, as the DataView element is rendered with an absolute position. alt text http://img.skitch.com/20100216-8t4pmbc3e6mydqqrac9qm9ucj.jpg fig 1. alt text http://img.skitch.com/20100216-n5t44g8rua7fawkwjrj49fk7t4.jpg fig 2. var dataStore = new Ext.data.JsonStore({ url: '/ajaxGateway.php', root: 'data', baseParams: { useClass: 'App_GeoIP_GeoIP', useMethod: 'getLocationsStartingWith' }, fields: [ {name:'text', mapping:'TITLE'}, {name:'stateName', mapping:'STATE_NAME'}, {name:'regionHierarchy', mapping:'REGION_HIERARCHY'}, {name:'id', mapping:'ID', type:'int'}, {name:'lat', mapping:'LATITUDE', type:'float'}, {name:'lng', mapping:'LONGITUDE', type:'float'} ] }); _ var resultTpl = new Ext.XTemplate( ' ', ' {text}, {stateName} ', ' ' ); _ var locationBasedRulesTree = new Ext.tree.TreePanel({ title: 'Location Based Regions', height: 329, width: 480, autoScroll: true, useArrows: true, animate: false, rootVisible: false, frame: true, enableDrag: true, root: new Ext.tree.AsyncTreeNode({ id:'custom_root' }), tbar: new Ext.Toolbar(), listeners: { listenersHandlers...: function(){} } }); _ locationBasedRulesTree.getTopToolbar().addField( new Ext.form.ComboBox({ store: dataStore, displayField: 'text', typeAhead: false, loadingText: 'Finding...', blankText: "Search for a Place...", width: (Ext.isIE6) ? 155:200, hideTrigger: true, forceSelection: true, selectOnFocus:true, tpl: resultTpl, itemSelector: 'div.search-item', enableKeyEvents: true, onSelect: function(record) { selectHandler...(); }, listeners: { keypress : function(comboBox, event) { keypressHandler...(); } } }) );
