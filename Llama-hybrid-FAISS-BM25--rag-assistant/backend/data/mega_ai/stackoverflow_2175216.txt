[site]: stackoverflow
[post_id]: 2175216
[parent_id]: 885937
[tags]: 
From a post by Robert Martin in comp.object : Association represents the ability of one instance to send a message to another instance. This is typically implemented with a pointer or reference instance variable, although it might also be implemented as a method argument, or the creation of a local variable. //[Example:] //|A|----------->|B| class A { private: B* itsB; }; Aggregation [...] is the typical whole/part relationship. This is exactly the same as an association with the exception that instances cannot have cyclic aggregation relationships (i.e. a part cannot contain its whole). //[Example:] //|Node|<>-------->|Node| class Node { private: vector itsNodes; }; The fact that this is aggregation means that the instances of Node cannot form a cycle. Thus, this is a Tree of Nodes not a graph of Nodes. Composition [...] is exactly like Aggregation except that the lifetime of the 'part' is controlled by the 'whole'. This control may be direct or transitive. That is, the 'whole' may take direct responsibility for creating or destroying the 'part', or it may accept an already created part, and later pass it on to some other whole that assumes responsibility for it. //[Example:] //|Car| -------->|Carburetor| class Car { public: virtual ~Car() {delete itsCarb;} private: Carburetor* itsCarb };
