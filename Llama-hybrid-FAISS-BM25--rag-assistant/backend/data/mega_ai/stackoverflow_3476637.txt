[site]: stackoverflow
[post_id]: 3476637
[parent_id]: 3476590
[tags]: 
I do not think it would break the language, but yes, it could break some existing code (and the breakage would be probably hard to detect at the compiler level). There exists a lot more code written in C and C++ than you and I together can imagine (some of it may be even written by terrorists). Relying on "proposition that (short)-1 > (unsigned)1 " may be done unintentionally by someone. There exists a lot of C code dealing with complex bit manipulation and similar things. It is quite possible some programmer may be using the current comparison behaviour in such code. (Other people have already provided nice examples of such code, and a the code is even simpler than I would expect). Current solution is to warn on such comparisons instead, and leave the solution to the programmer, which I think is in a spirit how C and C++ works. Also, solving it on a compiler level would incur a performance penalty, and this is something C and C++ programmers are extremely sensitive at. Two tests instead of one might seem like a minor issue to you, but there is probably plenty of C code where this would be an issue. It could be solved e.g. by forcing the previous behaviour by using explicit casts to a common data type - but this again would require programmer attention, therefore it is no better than a simple warning.
