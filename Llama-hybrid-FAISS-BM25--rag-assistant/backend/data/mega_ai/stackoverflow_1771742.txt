[site]: stackoverflow
[post_id]: 1771742
[parent_id]: 1771336
[tags]: 
Your problem is that you chose a bad clustered key. Nobody is ever interested in retrieving one particular log value by ID. I your system is like anything else I've seen, then all queries are going to ask for: all counters for all servers over a range of dates specific counter values over all servers for a range of dates all counters for one server over a range of dates specific counter for specific server over a range of dates Given the size of the table, all your non-clustered indexes are useless. They are all going to hit the index tipping point , guaranteed, so they might just as well not exists. I assume all your non-clustered index are defined as a simple index over the field in the name, with no include fields. I'm going to pretend I actually know your requirements. You must forget common sense about storage and actually duplicate all your data in every non-clustered index. Here is my advice: Drop the clustered index on [id], is a as useless as is it gets. Organize the table with a clustered index (logfile_it, test_id, timestamp). Non-clusterd index on (test_id, logfile_id, timestamp) include (value) NC index on (logfile_id, timestamp) include (value) NC index on (test_id, timestamp) include (value) NC index on (timestamp) include (value) Add maintenance tasks to reorganize all indexes periodically as they are prone to fragmentation The clustered index covers the query 'history of specific counter value at a specific machine'. The non clustered indexes cover various other possible queries (all counters at a machine over time, specific counter across all machines over time etc). You notice I did not comment anything about your query script. That is because there isn't anything in the world you can do to make the queries run faster over the table structure you have. Now one thing you shouldn't do is actually implement my advice. I said I'm going to pretend I know your requirements. But I actually don't. I just gave an example of a possible structure. What you really should do is study the topic and figure out the correct index structure for your requirements: General Index Design Guidelines . Index Design Basics Index with Included Columns Query Types and Indexes Also a google on 'covering index' will bring up a lot of good articles. And of course, at the end of the day storage is not free so you'll have to balance the requirement to have a non-clustered index on every possible combination with the need to keep the size of the database in check. Luckly you have a very small and narrow table, so duplicating it over many non-clustered index is no big deal. Also I wouldn't be concerned about insert performance, 120 counters at 15 seconds each means 8-9 inserts per second, which is nothing.
