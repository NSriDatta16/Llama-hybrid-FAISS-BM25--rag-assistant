[site]: stackoverflow
[post_id]: 1822862
[parent_id]: 1822762
[tags]: 
This is issue is only indirectly related to yacc, as you seem to have properly determined. (All yacc does is match input strings to strings in your grammar.) So, you get to do all the symbol management and all other semantic processing in code. You have any data structure you can imagine at your disposal. Some thoughts to get organized with: You could create new symbol tables as you enter nested scopes, and then simply perform multiple lookups in an outward direction until you find a given symbol. You could use a single table and tag each symbol with its originating lexical level. You would then need to handle duplicate symbols that differ only in lexical level and would need a lookup that could return multiple symbols, but you would need only a single table. If you don't plan on keeping all the symbols after exiting a scope then this might be more trouble than its worth. If you do this, you might want to keep a separate stack containing a root pointer to links that thread all the symbols in a given scope together.
