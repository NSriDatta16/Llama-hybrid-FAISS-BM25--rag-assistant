[site]: stackoverflow
[post_id]: 5505076
[parent_id]: 5504237
[tags]: 
It's tricky to be very precise without knowing much about what exactly you're modelling, but here goes... As you've noted, there's at least two strategies to get the "mutable instance copies of a prototype" functionality you want: 1) When creating an instance based on a prototype, completely copy the instance data from the prototype. No link between them thereafter. PRO: faster access to the instance data with less logic involved. CON 1: Any update to your prototype will not make it into the instances. e.g. if you have the address of a company wrong in the prototype. CON 2: you're duplicating database data -- to a certain extent -- wasteful if you have huge records. 2) When creating an instance based on a prototype, store a reference to the 'parent' record, i.e. the prototype, and then only store updated fields in the actual instance. PRO 1: Updates to prototype get reflected in all instances. PRO 2: More efficient use of storage space (less duplication of data) CON: more logic around pulling an instance from the database. In summary: there's not any magical solution I can think of that gets you the best of both of these worlds. They're both valid strategies, depending on your exact problem and constraints (runtime speed versus storage size, for example). If you go for 2), I certainly don't think it's a disaster -- particularly if you model things well and find out the best most efficient way to structure things in core data.
