[site]: stackoverflow
[post_id]: 489367
[parent_id]: 489317
[tags]: 
Use the params keyword to pass a variable number of arguments: private static void HowMayItems (params T[] values) { foreach (T val in values) { //Query how many items here.. } } Also you can create a Predicate and pass it a params filter. In the method you could return the union of all results. Somthing like this: public class Item { public string Name { get; set; } } public class ItemFilter { public string Name { get; set; } public ItemFilter(string name) { Name = name; } public bool FilterByName(Item i) { return i.Name.Equals(Name); } } public class ItemsTest { private static List HowMayItems(List l,params ItemFilter[] values) { List results= new List (); foreach(ItemFilter f in values){ Predicate p = new Predicate (f.FilterByName); List subList = l.FindAll(p); results.Concat(subList); } return results; } } EDIT: OK, how about my mixed nuts version :): public enum ItemTypes{ Balloon, Cupcake, WaterMelon //Add the rest of the 26 items here... } public class ItemFilter { private ItemTypes Type { get; set; } public ItemFilter(ItemTypes type) { Type = type; } public bool FilterByType(ItemTypes type) { return this.Type == type; } } public class PicnicTable { private List Items; public PicnicTable() { Items = new List (); } public void AddItem(ItemTypes item) { Items.Add(item); } public int HowMayItems(ItemTypes item) { ItemFilter filter = new ItemFilter(item); Predicate p = new Predicate (filter.FilterByType); List result = Items.FindAll(p); return result.Count; } } public class ItemsTest { public static void main(string[] args) { PicnicTable table = new PicnicTable(); table.AddItem(ItemTypes.Balloon); table.AddItem(ItemTypes.Cupcake); table.AddItem(ItemTypes.Balloon); table.AddItem(ItemTypes.WaterMelon); Console.Out.WriteLine("How Many Cupcakes?: {0}", table.HowMayItems(ItemTypes.Cupcake)); } }
