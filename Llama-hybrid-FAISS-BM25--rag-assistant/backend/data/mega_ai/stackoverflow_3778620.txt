[site]: stackoverflow
[post_id]: 3778620
[parent_id]: 3778443
[tags]: 
As Bernard says above, you need to do testing. If you are developing in Java, you can use JUnit (NUnit works similarly in .Net). Unit testing is just the beginning though, you might look at code coverage tools to give you an indication of how complete your unit testing is (open source tools EMMA and Cobertura provide this for Java). You might also use hudson to automatically execute these tests whenever a change is checked into your source tree (hudson will give you an indication of how stable your developments are, lots of fluctuations in test case pass rates indicate that you're making lots of breaking changes for example). After that, you could look at something like Findbugs for Java to spot dodgy practices. If you are using Eclipse for Java development you can get the metrics plugin to perform various other pieces of analysis on your code but you need to know what these metrics actually indicate. Ultimately, the quality of your product will be defined by whether you can reliably introduce changes that achieve their aim without causing regressions. The tools above are just the beginning, it takes a long time to become good at testing (I'm not there myself) but if you introduce the tools and practices to your organisation you can work on it from there.
