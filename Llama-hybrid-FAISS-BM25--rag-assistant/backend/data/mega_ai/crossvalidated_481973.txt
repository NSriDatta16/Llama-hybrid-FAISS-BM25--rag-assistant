[site]: crossvalidated
[post_id]: 481973
[parent_id]: 
[tags]: 
Linear Changepoint Model with LASSO

I was experimenting with time series data specifically using fourier basis functions and fitting with a LASSO. I then decided to try just connecting the first point with another point and that point to the final point and see what that gave me. So the X matrix is built like this (definitely not efficient): import quandl import matplotlib.pyplot as plt import numpy as np import pandas as pd data = quandl.get("BITSTAMP/USD") y = data['Low'] y = y[-730:] n_changepoints = 25 array_splits = np.array_split(np.array(y),n_changepoints) y = np.array(y) initial_point = y[0] final_point = y[-1] changepoints = np.zeros(shape=(len(y),n_changepoints)) for i in range(n_changepoints): moving_point = array_splits[i][-1] if i == 0: len_splits = len(array_splits[i]) else: len_splits = len(np.concatenate(array_splits[:i+1]).ravel()) slope = (moving_point - initial_point)/(len_splits) if i != n_changepoints - 1: reverse_slope = (final_point - moving_point)/(len(y) - len_splits) reverse_slope = reverse_slope#*.5 changepoints[0:len_splits, i] = slope * (1+np.array(list(range(len_splits)))) changepoints[len_splits:, i] = changepoints[len_splits-1, i] + reverse_slope * (1+np.array(list(range((len(y) - len_splits))))) plt.plot(y - y[0]) plt.plot(changepoints) plt.show() Then if I fit it with the lasso and some random alpha I get something like this: from sklearn.linear_model import Lasso lasso_model = Lasso(alpha = 10000).fit(changepoints, y) fitted = lasso_model.predict(changepoints) plt.plot(y) plt.plot(fitted) plt.show() It now looks like a trend changepoint model reminiscent of the output from fbprophet. And when I then combine the fourier terms with these and fit the lasso and do some tuning I end up with some fairly reasonable results that are in line with something like fbprophet. So my main question is, what is this idea of connecting the points (i.e. using the derivative) related to? From some research it looks like it is just some spline stuff but I am obviously new to this area and would love some direction! Edit with fuller implementation and follow up question based on answer: It can be found here along with a quick example. Really going for something that at its core is feature engineering that is passed off to a simple fit for a linear regression, here it is a GLM with lasso regularization with the goal of resembling something from fbProphet. So is this approach of the 'weighted' matrix a consistent one or is it definitely going to be worse than using another set of linear piecewise functions? Example output with those fourier basis functions:
