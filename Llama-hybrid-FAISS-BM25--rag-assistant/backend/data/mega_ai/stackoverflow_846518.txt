[site]: stackoverflow
[post_id]: 846518
[parent_id]: 
[tags]: 
GetPhysicalMonitorsFromHMONITOR returned handle is always null

On the Media Foundation SDK there is the GetPhysicalMonitorsFromHMONITOR function that I am trying to implement using C# but with no luck ... In the returned PHYSICAL_MONITOR[], the function returns the string description of the monitor but for some mysterious reasons, the hPhysicalMonitor handle remains at 0. I have generated the signatures with P/Invoke Interop Assistant with minor modifications. Does the PHYSICAL_MONITOR structure or anything else needs further tuning ? Thank you. using System; using System.Runtime.InteropServices; using System.Windows.Forms; using WindowsFormsApplication1; namespace WindowsFormsApplication1 { public partial class Form1 : Form { public enum MC_DISPLAY_TECHNOLOGY_TYPE { MC_SHADOW_MASK_CATHODE_RAY_TUBE, MC_APERTURE_GRILL_CATHODE_RAY_TUBE, MC_THIN_FILM_TRANSISTOR, MC_LIQUID_CRYSTAL_ON_SILICON, MC_PLASMA, MC_ORGANIC_LIGHT_EMITTING_DIODE, MC_ELECTROLUMINESCENT, MC_MICROELECTROMECHANICAL, MC_FIELD_EMISSION_DEVICE, } [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)] public struct PHYSICAL_MONITOR { public IntPtr hPhysicalMonitor; [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)] public string szPhysicalMonitorDescription; } #region Imports [DllImport("user32.dll", EntryPoint = "MonitorFromWindow")] public static extern IntPtr MonitorFromWindow( [In] IntPtr hwnd, uint dwFlags); [DllImport("dxva2.dll", EntryPoint = "GetMonitorTechnologyType")] [return: MarshalAs(UnmanagedType.Bool)] public static extern bool GetMonitorTechnologyType( IntPtr hMonitor, ref MC_DISPLAY_TECHNOLOGY_TYPE pdtyDisplayTechnologyType); [DllImport("dxva2.dll", EntryPoint = "GetMonitorCapabilities")] [return: MarshalAs(UnmanagedType.Bool)] public static extern bool GetMonitorCapabilities( IntPtr hMonitor, ref uint pdwMonitorCapabilities, ref uint pdwSupportedColorTemperatures); [DllImport("dxva2.dll", EntryPoint = "DestroyPhysicalMonitors")] [return: MarshalAs(UnmanagedType.Bool)] public static extern bool DestroyPhysicalMonitors( uint dwPhysicalMonitorArraySize, ref PHYSICAL_MONITOR[] pPhysicalMonitorArray); [DllImport("dxva2.dll", EntryPoint = "GetNumberOfPhysicalMonitorsFromHMONITOR")] [return: MarshalAs(UnmanagedType.Bool)] public static extern bool GetNumberOfPhysicalMonitorsFromHMONITOR( IntPtr hMonitor, ref uint pdwNumberOfPhysicalMonitors); [DllImport("dxva2.dll", EntryPoint = "GetPhysicalMonitorsFromHMONITOR")] [return: MarshalAs(UnmanagedType.Bool)] public static extern bool GetPhysicalMonitorsFromHMONITOR( IntPtr hMonitor, uint dwPhysicalMonitorArraySize, [Out] PHYSICAL_MONITOR[] pPhysicalMonitorArray); #endregion public Form1() { InitializeComponent(); } private void Form1_Load(object sender, EventArgs e) { // Get monitor handle. uint dwFlags = 0u; IntPtr ptr = MonitorFromWindow(Handle, dwFlags); // Get number of physical monitors. uint pdwNumberOfPhysicalMonitors = 0u; bool b1 = GetNumberOfPhysicalMonitorsFromHMONITOR(ptr, ref pdwNumberOfPhysicalMonitors); if (b1) { // Get physical monitors. uint dwPhysicalMonitorArraySize = 0u; dwPhysicalMonitorArraySize = pdwNumberOfPhysicalMonitors; PHYSICAL_MONITOR[] pPhysicalMonitorArray = new PHYSICAL_MONITOR[dwPhysicalMonitorArraySize]; //NOTE : Handles remain null ! bool b2 = GetPhysicalMonitorsFromHMONITOR(ptr, dwPhysicalMonitorArraySize, pPhysicalMonitorArray); if (pPhysicalMonitorArray[0].hPhysicalMonitor == IntPtr.Zero) { throw new Exception("ERROR !"); } // Monitor has capabilities to do that ? if (b2) { uint pdwMonitorCapabilities = 0u; uint pdwSupportedColorTemperatures = 0u; bool b3 = GetMonitorCapabilities( ptr, ref pdwMonitorCapabilities, ref pdwSupportedColorTemperatures); // If yes, get technology type. if (b3) { MC_DISPLAY_TECHNOLOGY_TYPE type = MC_DISPLAY_TECHNOLOGY_TYPE.MC_SHADOW_MASK_CATHODE_RAY_TUBE; bool b4 = GetMonitorTechnologyType(ptr, ref type); if (b4) { // Do work. } else { throw new Exception("Couldn't get monitor technology type."); } } else { throw new Exception("Couldn't get monitor capabilities."); } } else { throw new Exception("The monitor doesn't have the required capabilities."); } bool b5 = DestroyPhysicalMonitors(dwPhysicalMonitorArraySize, ref pPhysicalMonitorArray); if (!b5) { throw new Exception("Couldn't destroy physical monitors."); } } else { throw new Exception("Couldn't get number of physical monitors."); } } } }
