[site]: stackoverflow
[post_id]: 2623873
[parent_id]: 2620697
[tags]: 
Resources don't drive Interface design How you organise your domain model should not be a major influencer on the GUI design and vice-versa. What if we want to edit all the projects at once on the same webpage? Then you probably should provide widgets for each and POST each update sequentially. You can use AJAX to make this a nice experience for the end user Right now we do "/company/1/projects/multiedit", "/company/1/projects/multupdate"- but as you can see, it's not rest. And that's fine unless you need to be RESTful - do you? Is your application for external use or for an internal business process? There's a lot more to REST than organisation of resources - nested or otherwise. You should also be concerned with the navigation from resource representations. If you really feel that you need to be RESTful and if you believe (as you mention in the comment below) that the state of all projects and employees needs to be atomically updated then you should 1. Introduce new container resources "Employees" and "Projects" to model the association between a Company and a set of "Employee" and between a Company and a set of "Project". 2. In response to a GET on Company you must include URIs for the Employees and Projects resources (i.e. a total of two URIs). 3. In response to a GET on Employees or Projects you should either return the state of all underlying resources or URIs for each so that their state may be determined. 4. When updating the Employees you must resend all of the state of the underlying resources (presumably in one huge ). The new state completely replaces the old state, That last step is a lot of overhead - you should reconsider the constraint that its an "all or nothing update." Remember that this is nothing to do with REST - what you've done is expose an invariant in your business logic to the service interface . Personally I'd: 1. do everything I could to remove that invariant from the presentation layer 2. model the resources in a non-nested way - it's more flexible and REST has nothing to say about URIs except that every resource should have one 3. introduce the Employees and Projects resources to model the association between company and employee and project 4. have the representation of the company return the URIs for the Projects and for the Employees (two again). 5. have each employee and project representation contain a to the relevant company 6. design the UI so that it can display a list of projects / employees for a company and allow each to be updated individually 7. batch all of the POSTs together and send them via AJAX on a common button press It is worth taking a look at the excellent screencasts that Ryan Bates has made on nested resources but don't forget that nested resources aren't a core part of REST - to quote Roy Fielding What matters is that every important resource have a URI, therein allowing representations of that resource to be obtained using GET. Enough said - good luck! Chris
