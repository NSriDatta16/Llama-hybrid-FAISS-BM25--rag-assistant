[site]: stackoverflow
[post_id]: 2017571
[parent_id]: 2017510
[tags]: 
There is a much better way, which is using structs to set the structures. This is usually how network packets are built on a low level. For example, say you have packets which have an id, length, flag byte, and data, you'd do something like this: struct packet_header { int id; byte length; byte flags; }; byte my_packet[] = new byte[100]; packet_header *header = &my_packet; header->id = 20; header->length = 10; // This can be set automatically by a function, maybe? // etc. header++; // Header now points to the data section. Do note that you're going to have to make sure that the structures are "packed", i.e. when you write byte length , it really takes up a byte. Usually, you'd achieve this using something like #pragma pack or similar (you'll have to read about your compiler's pragma settings). Also, note that you should probably use functions to do common operations. For example, create a function which gets as input the size, data to send, and other information, and fills out the packet header and data for you. This way, you can perform calculations about the actual size you want to write in the length field, you can calculate the CRC inside the function, etc. Edit: This is a C-centric way of doing things, which is the style of a lot of networking code. A more C++-centric (object oriented) approach could also work, but I'm less familiar with them.
