[site]: stackoverflow
[post_id]: 953755
[parent_id]: 77632
[tags]: 
Don't forget that generics aren't just used by classes, they can also be used by methods. For example, take the following snippet: private T logAndReturn(T t) { logThrowable(t); // some logging method that takes a Throwable return t; } It is simple, but can be used very elegantly. The nice thing is that the method returns whatever it was that it was given. This helps out when you are handling exceptions that need to be re-thrown back to the caller: ... } catch (MyException e) { throw logAndReturn(e); } The point is that you don't lose the type by passing it through a method. You can throw the correct type of exception instead of just a Throwable , which would be all you could do without generics. This is just a simple example of one use for generic methods. There are quite a few other neat things you can do with generic methods. The coolest, in my opinion, is type inferring with generics. Take the following example (taken from Josh Bloch's Effective Java 2nd Edition): ... Map myMap = createHashMap(); ... public Map createHashMap() { return new HashMap (); } This doesn't do a lot, but it does cut down on some clutter when the generic types are long (or nested; i.e. Map > ).
