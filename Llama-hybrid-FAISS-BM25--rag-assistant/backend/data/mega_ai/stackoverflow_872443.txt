[site]: stackoverflow
[post_id]: 872443
[parent_id]: 872233
[tags]: 
People are used to it. When it was invented, every language was ugly as hell. Back then, C gained popularity for sucking less. (and perhaps for being more down-to-earth than LISP). Today, other languages reuse the syntax because it's familiar to programmers. I don't think there's much more to it than that. I prefer braces over begin/end (although the braces are a pain on many non-english keyboards), but there are still a lot of quirks of C syntax that could be done better. C++ is discovering that the return type might just fit better after the parameters (C++0x is allowing that syntax because it works better with other new features like decltype). And most functional languages have realized that the parentheses around the parameters are often not necessary. For that matter, explicit typing often isn't necessary either. But most languages inherit that from C because "that's the syntax". Type first, then variable/function name. And let's not even get into the abomination that is function pointers. Surely we can find a more elegant syntax for their types. Or try typedef'ing an array type. Then there is the quirky choice of operators. Why not just use "and" instead of &&? C's syntax isn't nice. It does the job, and we're so used to it that it's probably here to stay. But it's not "good".
