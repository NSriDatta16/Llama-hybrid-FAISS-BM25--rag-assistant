[site]: crossvalidated
[post_id]: 151342
[parent_id]: 151200
[tags]: 
It seems to me that your lsmeans statement asks for pairwise comparisons of all combinations of the two factors, which is probably more than you need, and potentially confusing for that reason. A specification like pairwise ~ weeks | type would do pairwise comparisons of the weeks, for each type. But If you're looking specifically at changes, I think a smaller number of custom contrasts would be preferable. First, I suggest getting the LS means alone in an object, and doing the contrasts separately. This isn't absolutely necessary, it's just cleaner: lsm = lsmeans(results_full, ~ weeks | type) lsm I'm assuming there are six different weeks -- if not, you need to adapt the following. One possibility is to test the changes between two consecutive weeks: jumps = list(j12 = c(-1,1,0,0,0,0), j23 = c(0,-1,1,0,0,0), j34 = c(0,0,-1,1,0,0), j45 = c(0,0,0,-1,1,0), j46 = c(0,0,0,0,-1,1)) contrast(lsm, jumps, adjust = "mvt") The "mvt" adjustment adjusts the P values appropriately for picking out the maximum of these contrasts -- i.e., finding where is the biggest change. (You need to have the mvtnorm package installed; and be warned that the adjusted P values are obtained by simulation, so only the first 3 or so digits are trustworthy.) An alternative is to compare the average of all data before with the average of all data after: mean.chg = list(m12 = c(-1, 1/5,1/5,1/5,1/5,1/5), m23 = c(-1/2,-1/2, 1/4,1/4,1/4,1/4), m34 = c(-1/3,-1/3,-1/3, 1/3,1/3,1/3), m45 = c(-1/4,-1/4,-1/4,-1/4, 1/2,1/2), m56 = c(-1/5,-1/5,-1/5,-1/5,-1/5, 1)) contrast(lsm, mean.chg, adjust = "mvt") You probably should pick one of these approaches and go with it, so you're not accused of shopping for the results you want. Or, combine the lists, and the mvt adjustment will penalize you appropriately for testing 10 contrasts instead of 5. PS - I don't think I made any typos in the untested code above, but it's possible, so be careful.
