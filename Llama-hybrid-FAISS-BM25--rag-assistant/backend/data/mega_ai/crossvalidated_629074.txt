[site]: crossvalidated
[post_id]: 629074
[parent_id]: 627708
[tags]: 
here np.random.seed(seed=0) ps = [] for _ in range(1_000): did_df = build_exp_data() model = smf.ols('Y ~ is_post + is_treatment + post_x_treatment', data=did_df) model_fit = model.fit() p = model_fit.pvalues.iloc[-1] ps.append(p) false_positive_rate = (np.array(ps) since there is no causal effect, this is under null distribution, the nominal alpha level or nominal false alarm rate is 0.05, but the actual false positive rate is 0.13. this method is the so-called native method: you get a false positive rate is over 2.6 times related to 0.05, but not as extreme as Spotify R&D. simply average method # average method 1 ps = [] for _ in range(1_000): did_df = build_exp_data() did_df = did_df.groupby(['unit', 'is_post', 'is_treatment', 'post_x_treatment'], as_index = False).mean() model = smf.ols('Y ~ is_post + is_treatment + post_x_treatment', data=did_df) model_fit = model.fit() p = model_fit.pvalues.iloc[-1] ps.append(p) false_positive_rate = (np.array(ps) here you get the actual false positive rate is 0.009, this is too conservative or you can try this # average method and regression adjust ps = [] for _ in range(1_000): did_df = build_exp_data() did_df = did_df.groupby(['unit', 'is_post', 'is_treatment', 'post_x_treatment'], as_index = False).mean() did_df = did_df.pivot(index=['unit', 'is_treatment'], columns='is_post', values='Y').rename(columns={0.0:'Y_bef', 1.0: 'Y'}).reset_index() model = smf.ols('Y ~ Y_bef + is_treatment', data=did_df) model_fit = model.fit() p = model_fit.pvalues.iloc[-1] ps.append(p) false_positive_rate = (np.array(ps) here you get 0.047, which is close to the nominal false positive rate. or # average method and did ps = [] for _ in range(1_000): did_df = build_exp_data() did_df = did_df.groupby(['unit', 'is_post', 'is_treatment', 'post_x_treatment'], as_index = False).mean() did_df = did_df.pivot(index=['unit', 'is_treatment'], columns='is_post', values='Y').rename(columns={0.0:'Y_bef', 1.0: 'Y'}).reset_index() model = smf.ols('Y - Y_bef ~ + is_treatment', data=did_df) model_fit = model.fit() p = model_fit.pvalues.iloc[-1] ps.append(p) false_positive_rate = (np.array(ps)
