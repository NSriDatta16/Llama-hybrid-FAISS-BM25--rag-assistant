[site]: stackoverflow
[post_id]: 4891118
[parent_id]: 4890964
[tags]: 
There's only one way I know of - doing it the hard way... You can query the element the mouse is hovering over and set the hint like this: procedure TForm2.CheckListBox1MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer); var hintItem : Integer; point : TPoint; begin point.X := X; point.Y := y; hintItem := CheckListBox1.ItemAtPos(point,true); if hintItem >= 0 then begin CheckListBox1.Hint := CheckListBox1.Items[hintItem]; CheckListBox1.ShowHint := true; end else begin CheckListBox1.Hint := ''; CheckListBox1.ShowHint := false; end; end; A little more tweaking would make it even more elegant. I for one would only hide the hint on MouseMove and start (or reset) a timer to redisplay it. So it will appear when the mouse didn't move for a while and will immediately disappear when you start moving the mouse. This would be the behaviour one expects from windows. My implementation as given above will be kind of unusual, because the hint stays visible even if you move your mouse. This is because the mouse doesn't leave the element (TCheckListBox). Oh, another thing: You should also make the hint disappear on MouseLeave.
