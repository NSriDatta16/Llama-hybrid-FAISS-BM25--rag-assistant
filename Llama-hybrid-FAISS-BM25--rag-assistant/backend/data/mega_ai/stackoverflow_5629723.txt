[site]: stackoverflow
[post_id]: 5629723
[parent_id]: 
[tags]: 
Dynamically-Generated Anchor HREF That Calls A Function Not Working

I apologize if this kind of question has already been asked but I have looked through "Related Questions" and I don't think anything in here matches with mine, so please bear with me as I try to present my problem and how am I going to go about this, so here I go. Okay, I will refer you my screenshot. Two of my tables have been generated by using Javascript and one is static and I didn't comment out the tbody tags within a listModulesWithinScene table. http://img852.imageshack.us/i/haildstabletable.jpg/ (click in the link to view the image) Here's my cut-down version of my HTML code for those who are interested. I'm pretty much new to this website, even though I do lurk through here from search engine (Google). Home Page Lights and Devices Module ID# Module Name Status Action AB.CD.EF 2x Floor Lamp 75% Toggle Set AB.CD.EE Bedside Fan ON Toggle --> Scenes Scene Name Action Welcome Home Toggle All Lights Off Toggle --> Lights and Devices Within Scene Module ID# Scene Name Level 1 2x Floor Lamp 50% Now, let me go ahead and describe my problem. So anyway, I want to call a function that's in the part of the code: // Create a new anchor tag and name it "List." var a_set = document.createElement("a"); a_set.href = "javascript:ListAllModulesWithinScene(listScenes_row" + r + "_toggle"; a_set.id = "listScenes_row" + r + "_set"; a_set.appendChild(document.createTextNode("List")); I want javascript:ListAllModulesWithinScene(...) that is inside quotes to call the function (ListAllModulesWithinScene(sceneName)) in PageSpecific/Home.js, but nothing happens if I click the List link; so far, it's not working. This is the function that I'm trying to call. function ListAllModulesWithinScene(sceneName) {alert("test"); /* The part of the code that I took out fills up the table with the list of modules that are part of the scene, each module having different levels/settings. */ } The expected result is that I want to see the alert message box just to make sure it works before I call out the code to generate the rows of data like say... function ListAllModulesWithinScene(sceneName) { /*listModulesWithinScene = document.getElementById("listModulesWithinScene"); // Delete the tbody tag if it does not exist and create a enw tbody tag. if(listModulesWithinScene.getElementsByTagName("tbody") != null) listModulesWithinScene.removeChild("tbody"); var listModulesWithinScene_tBody = document.createElement("tbody"); var xmlRows = xmlObj.childNodes[2].getElementsByTagName("Scene"); for (var r = 0; r 0) { var row = document.createElement("tr"); for (var msr = 0; msr In order to help get a better ideal of how my tables are generated, I want to post my entire code. I could provide more details about my problem but that's all I can provide for now. This is the XMLReaderWriter.js file that I currently have. /* When it comes to loading and saving an XML file, it helps to try to keep the XML file organized and well-formed, so it's best to not to modify the XML file UNLESS you know what you're doing. The structure of an XML file is as follows: It's a long documentation, but it helps to understand what this XML structure is all about. */ // Not for Internet Explorer 6 or below. var xmlDoc; var xmlObj; // For HTML tables ( ) var listModules; var listScenes; var listModulesWithinScene; // For HTML text boxes var inputLongitude; var inputLatitude; function LoadXML() { // ActiveXObject will have to be checked first to see if it's defined. Otherwise, if you // try to check XMLHttpRequest first, even if Internet Explorer supports it, you will get // "Access Denied" in Internet Explorer and perhaps not in Firefox. if (window.ActiveXObject) { xmlDoc = new ActiveXObject("Microsoft.XMLDOM"); xmlDoc.async = false; xmlDoc.load("HomeAutomationInterface.xml"); PopulateFromXML(); } else { // If this is the only code in this function, then you will need to put all your // project in the server, since Internet Explorer has a "Same Origin Policy" which // I believe that the open method with "GET" causes a problem in Internet Explorer // but did not cause a problem in Firefox. In order to rectify the problem, the code // inside if(window.ActiveXObject) makes use of ActiveX. xmlDoc = new XMLHttpRequest(); xmlDoc.open("GET", "HomeAutomationInterface.xml", null) xmlDoc.send(null); if (xmlDoc.status == 200) { xmlDoc = xmlDoc.responseXML; PopulateFromXML(); } } } function PopulateFromXML() { listModules = document.getElementById( "listModules").getElementsByTagName("tbody"); // Gather the text fields for location data. inputLongitude = document.getElementById("inputLongitude") inputLatitude = document.getElementById("inputLatitude") // Firefox's DOM Parser treats whitespaces as text nodes, including // line breaks. removeWhitespace(xmlDoc.documentElement); // Send the document's root element to the XML Object variable. xmlObj = xmlDoc.documentElement; // Perform the checks and populate the tables // and any other elements that are needed. if (xmlObj.tagName == "HomeAutomationInterface") { // Check to be sure the first node is the "Setup" node. It contains the // location node. if ((xmlObj.childNodes[0].tagName == "Setup") && (xmlObj.childNodes[0].childNodes[0].tagName == "Location")) { // Copy the data from one of the attributes to the respective text boxes. inputLongitude.value = xmlObj.childNodes[0] .childNodes[0].getAttribute("longitude"); inputLatitude.value = xmlObj.childNodes[0] .childNodes[0].getAttribute("latitude"); } // The second node within the root element is Modules node. // This will be implemented. if (xmlObj.childNodes[1].tagName == "Modules") { //TODO: Implement the XML-to-Table translation that gets info // about modules. listModules = document.getElementById("listModules"); var listModules_tBody = document.createElement("tbody"); var xmlRows = xmlObj.childNodes[1].getElementsByTagName("Module"); for (var r = 0; r 0; ) { var child = node.childNodes[i]; if (child.nodeType === 3 && child.data.match(/^\s*$/)) node.removeChild(child); if (child.nodeType === 1) removeWhitespace(child); } } And now as for my background information, I'm doing this as my project for COP2822 (Scripting for the Web), so it's only Javascript and not server-side, so I have endured a lot of pain, but was able to make it through, so my experience with Javascript is well worth it in the end. I did have some experience with Javascript before I take COP2822, though.
