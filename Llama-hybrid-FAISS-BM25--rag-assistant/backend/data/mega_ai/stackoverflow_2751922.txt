[site]: stackoverflow
[post_id]: 2751922
[parent_id]: 2751882
[tags]: 
A* Search Take a look at the A* pathfinding algorithm. It's essentially the standard approach for stuff like this. Amit Patel's write up on pathfinding for games has a pretty good introduction to A* as well as popular variants of the algorithm. You'll find a C# implementation here , and here Dynamic A* Let's say the terrain you'll be searching is not known ahead of time, but rather is discovered as the agent explores its environment. If your agent comes across a previously unknown obstacle, you could just update the agent's map of the terrain and then re-run A* to find a new path to the goal that routes around the obstruction. While a workable solution, rerunning the planning algorithm from scratch every time you find a new obstacle results in a sizable amount of redundant computation. For example, once you're around the obstacle, it might be that the most efficient route to the goal follows the one you were planning on taking before you discovered the obstacle. By just rerunning A*, you'll need to recompute this section of the previous path. You can avoid this by using Dynamic A* (D*) . Since it keeps track of previously computed paths, when the agent finds a new obstacle, the system only needs to compute new routes in the area around the obstacle. After that, it can just reuse existing paths.
