[site]: stackoverflow
[post_id]: 1517691
[parent_id]: 1517342
[tags]: 
Install the latest py2app , then make a new directory -- cd to it -- in it make a HelloWorld.py file such as: # generic Python imports import datetime import os import sched import sys import tempfile import threading import time # need PyObjC on sys.path...: for d in sys.path: if 'Extras' in d: sys.path.append(d + '/PyObjC') break # objc-related imports import objc from Foundation import * from AppKit import * from PyObjCTools import AppHelper # all stuff related to the repeating-action thesched = sched.scheduler(time.time, time.sleep) def tick(n, writer): writer(n) thesched.enter(20.0, 10, tick, (n+1, writer)) fd, name = tempfile.mkstemp('.txt', 'hello', '/tmp'); print 'writing %r' % name f = os.fdopen(fd, 'w') f.write(datetime.datetime.now().isoformat()) f.write('\n') f.close() def schedule(writer): pool = NSAutoreleasePool.alloc().init() thesched.enter(0.0, 10, tick, (1, writer)) thesched.run() # normally you'd want pool.drain() here, but since this function never # ends until end of program (thesched.run never returns since each tick # schedules a new one) that pool.drain would never execute here;-). # objc-related stuff class TheDelegate(NSObject): statusbar = None state = 'idle' def applicationDidFinishLaunching_(self, notification): statusbar = NSStatusBar.systemStatusBar() self.statusitem = statusbar.statusItemWithLength_( NSVariableStatusItemLength) self.statusitem.setHighlightMode_(1) self.statusitem.setToolTip_('Example') self.statusitem.setTitle_('Example') self.menu = NSMenu.alloc().init() menuitem = NSMenuItem.alloc().initWithTitle_action_keyEquivalent_( 'Quit', 'terminate:', '') self.menu.addItem_(menuitem) self.statusitem.setMenu_(self.menu) def writer(self, s): self.badge.setBadgeLabel_(str(s)) if __name__ == "__main__": # prepare and set our delegate app = NSApplication.sharedApplication() delegate = TheDelegate.alloc().init() app.setDelegate_(delegate) delegate.badge = app.dockTile() delegate.writer(0) # on a separate thread, run the scheduler t = threading.Thread(target=schedule, args=(delegate.writer,)) t.setDaemon(1) t.start() # let her rip!-) AppHelper.runEventLoop() Of course, in your real code, you'll be performing your own periodic actions every 3 minutes (rather than writing a temp file every 20 seconds as I'm doing here), doing your own status updates (rather than just showing a counter of the number of files written so far), etc, etc, but I hope this example shows you a viable starting point. Then in Terminal.App cd to the directory containing this source file, py2applet --make-setup HelloWorld.py , python setup.py py2app -A -p PyObjC . You now have in subdirectory dist a directory HelloWorld.app ; open dist and drag the icon to the Dock, and you're all set (on your own machine -- distributing to other machines may not work due to the -A flag, but I had trouble building without it, probably due to mis-installed egg files laying around this machine;-). No doubt you'll want to customize your icon &c. This doesn't do the "extra credit" thingy you asked for -- it's already a lot of code and I decided to stop here (the extra credit thingy may warrant a new question). Also, I'm not quite sure that all the incantations I'm performing here are actually necessary or useful; the docs are pretty latitant for making a pyobjc .app without Xcode, as you require, so I hacked this together from bits and pieces of example code found on the net plus a substantial amount of trial and error. Still, I hope it helps!-)
