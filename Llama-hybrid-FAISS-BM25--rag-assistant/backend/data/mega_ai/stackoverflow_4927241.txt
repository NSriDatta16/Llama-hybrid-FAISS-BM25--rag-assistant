[site]: stackoverflow
[post_id]: 4927241
[parent_id]: 4924912
[tags]: 
I believe that the intention of the standard has always been to allow a function to be made inline by having at least one declaration including the inline specifier but there was some uncertainty about when it was too late to add the first inline declaration. Was after the definition too late, or after the first call? My reasoning for this is two fold, first the examples in 7.1.1, although non-normative and principally about storage class specifiers, suggest that inline isn't required on every declaration. Secondly this defect report DR 317 from 2001 (voted in in 2005) which adds the "If the definition of a function appears in a translation unit before its first declaration as inline, the program is ill-formed." sentence. It is clear from the conversation that it was intented that inline isn't required on every declaration, specifically in the case of a member function defined explicitly inline but outside of the class body where the original declaration didn't have an explicit inline . (That defect report also contains my mantra that inline is "more than a hint".) Of course, as soon as a function with external linkage is an inline function due to one or more declarations including the inline specifier in one translation unit it must be declared inline in all translation units according to the rest of paragraph 7.1.2/4. In the example in the question I believe that the intention is that foo is an inline function and that it is valid code although the normative text of the standard seems to me to be less clear than it could be.
