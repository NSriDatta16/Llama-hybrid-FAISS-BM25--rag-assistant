[site]: stackoverflow
[post_id]: 4906282
[parent_id]: 4906255
[tags]: 
'foo evaluates to the symbol FOO. #'foo evaluates to the function bound to the name FOO. In Lisp a symbol can be called as a function when the symbol FOO has a function binding. Here CAR is a symbol that has a function binding. But this does not work: (flet ((foo (a) (+ a 42))) (mapcar 'foo '(1 2 3 4 5))) That's because FOO as a symbol does not access the local lexical function and the Lisp system will complain when foo is not a function defined elsewhere. We need to write: (flet ((foo (a) (+ a 42))) (mapcar #'foo '(1 2 3 4 5))) Here the (function foo) or its shorthand notation #'foo refers to the lexical local function FOO. Note also that in (funcall #'foo ...) vs. (funcall 'foo ...) The later might do one more indirection, since it needs to lookup the function from the symbol, while #'foo denotes the function directly. Summary : If a symbol has a function binding, calling a function through the symbol works.
