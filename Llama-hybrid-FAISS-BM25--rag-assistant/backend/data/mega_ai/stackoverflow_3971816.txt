[site]: stackoverflow
[post_id]: 3971816
[parent_id]: 3927536
[tags]: 
I recently ran across this problem myself when developing a game for the iPhone. I was using UIButtons to hold game tiles, then stylized them with transparent images, background colors and text. It all worked well for a small number of tiles. Once we got to about 50, however, the performance dropped significantly. After scouring Google I discovered that others had experienced the same problem. It seems the iPhone struggles with lots of transparent buttons onscreen at once. Not sure if it's a bug in the UIButton code or just a limitation of the graphics hardware on the device, but either way, it's beyond your control as a programmer. My solution was to draw the board by hand using Core Graphics. It seemed daunting at first, but in reality it was pretty easy. I just placed one big UIImageView on my ViewController in Interface Builder, made it an IBOutlet so I could alter it from Objective-C, then constructed the image with Core Graphics. Since a UIImageView doesn't handle taps, I used the touchesBegan method of my UIViewController, and then triangulated the x/y coordinates of the touch to the precise tile on my game board. The board now renders in less than a tenth of a second. Bingo! If you need sample code, just let me know. UPDATE: Here's a simplified version of the code I'm using. Should be enough for you to get the gist. // CoreGraphicsTestViewController.h // CoreGraphicsTest #import @interface CoreGraphicsTestViewController : UIViewController { UIImageView *testImageView; } @property (retain, nonatomic) IBOutlet UIImageView *testImageView; -(void) drawTile: (CGContextRef) ctx row: (int) rowNum col: (int) colNum isPressed: (BOOL) tilePressed; @end ... and the .m file ... // CoreGraphicsTestViewController.m // CoreGraphicsTest #import "CoreGraphicsTestViewController.h" #import #import @implementation CoreGraphicsTestViewController @synthesize testImageView; int iTileSize; int iBoardSize; - (void)viewDidLoad { int iRow; int iCol; iTileSize = 75; iBoardSize = 3; [testImageView setBounds: CGRectMake(0, 0, iBoardSize * iTileSize, iBoardSize * iTileSize)]; CGRect rect = CGRectMake(0.0f, 0.0f, testImageView.bounds.size.width, testImageView.bounds.size.height); UIGraphicsBeginImageContext(rect.size); CGContextRef context = UIGraphicsGetCurrentContext(); for (iRow = 0; iRow = 0) && (location.y >= 0) && (location.x
