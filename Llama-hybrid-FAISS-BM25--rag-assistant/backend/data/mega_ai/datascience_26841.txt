[site]: datascience
[post_id]: 26841
[parent_id]: 26836
[tags]: 
It's really dependent on the problem you are solving. Neural network layers attempt to get more and more abstract representations of your input, tailored towards your output. So the factors that influence your output need to be able to be represented well at each abstraction level. Each abstraction level represents more and more non-linear interactions between your inputs and hopefully less and less noise. Let's take convolutional neural networks as an example, because it's slightly easier to interpret what is happening. The first levels are looking for small patterns while the later levels are looking for combinations of these smaller patterns that are relevant. If there are a lot of different small patterns that are relevant for your task but the later layers are only looking for a few different combinations of these filters your 3rd example would be appropriate. On the other hand, if you have some edge detectors and then some basic shapes in the first few abstraction layers, but you are trying to distinguish between 1000 classes that are all built up from these basic shapes, then you would need a more extreme variant of the second example. The first example is somewhere in between.
