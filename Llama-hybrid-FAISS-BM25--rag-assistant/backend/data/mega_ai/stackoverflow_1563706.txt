[site]: stackoverflow
[post_id]: 1563706
[parent_id]: 1557845
[tags]: 
I'm going to turn this question on its head and name a beautiful API for a library whose standard API is mostly ugly: the Haskell bindings for OpenGL. These are the reasons: Instead of lumping everything into a small number of headers, the library is organized logically into discrete modules, whose contents parallel the structure of the OpenGL specification. This makes browsing the documentation a pleasant experience. Pairs of "begin/end" functions are replaced by higher-order procedures. For example, instead of pushMatrix(); doSomeStuff(); doSomeMoreStuff(); popMatrix(); you'd say preservingMatrix $ do doSomeStuff doSomeMoreStuff The syntax of the bindings enforces the conventions of the library, instead of making you do it by hand. This works for the drawing primitives of quads, triangles, lines, etc. as well. All of this is exception-safe, of course. Getters and setters are replaced by idiomatic "StateVars", making reading and writing a more symmetric operation. Multiple versions of functions replaced by polymorphism and extra datatypes. Instead of calling, say, glVertex2f with two float values, you call vertex with a value of type Vertex2 GLFloat . References: API Reference The HaskellWiki page on OpenGL Beautiful Code, Compelling Evidence (pdf) Praise from Scott Dillard , quoted in Beautiful Code, Compelling Evidence
