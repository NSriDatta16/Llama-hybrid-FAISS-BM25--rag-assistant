[site]: stackoverflow
[post_id]: 3347670
[parent_id]: 2999931
[tags]: 
What you have along with the update looks about right. So, as I see it, you have users, and each user has a master list of contacts. A user also has further lists for organizing contacts within the master list. Each contact has their name and contact information along with several companies they have worked for, plus they must keep track of their current company. Keeping the companies in a separate table was a good idea. Normally a text field would work, but because you plan to use companies more as individual entities, a separate table works best. I feel like I'm repeating what you have, but I'll put what seems the best setup. I'm just writing the following with my conventions (an underscore means one to many): *user* id [int PK], ... *user_contact* id [int PK], user [int FK (user)], currentCompany [int FK (company)] ... *user_contact_company* id [int PK], contact [int FK (user_contact)], company [int FK (company)], startDate [date], endDate [date] ... *user_contactList* id [int PK], user [int FK (user)] ... *user_contactList_contact* id [int PK], contactList [int FK (user_contactList)], contact [int FK (contact)] ... *company* id [int PK] ... Then, for a basic grouping: SELECT * FROM `user_contact` WHERE `user` = GROUP BY `currentCompany` But I don't think that would work the way you'd like, so you could have two queries: SELECT DISTINCT `currentCompany` FROM `user_contact` WHERE `user` = Then for every company: SELECT * FROM `user_contact` WHERE `company` = There are many other ways to do this, depending on how you're planning to implement it. For example, you could just do an ORDER BY, so all the companies are grouped together, and then your code that's displaying the companies can see if the current company is different than the previous company, and make the right distinction. As for company positions, you could consider either doing text or referencing another table, depending on how you're using it. If you're going to do sorts, such that "Project Manager" will be grouped with other "Project Manager"s, then it should be in another table, otherwise someone might pick a different name than Project Manager, or make a name lowercase, even though they're semantically the same.
