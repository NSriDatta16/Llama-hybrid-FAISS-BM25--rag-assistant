[site]: stackoverflow
[post_id]: 772070
[parent_id]: 771801
[tags]: 
The word you're looking for is orthogonality . The settings are not orthogonal, as they can't vary independently. As to how to handle showing these properties, the completely generic way to do it (and your problem may not warrant the coding cost of this genericicity) would be to give each control an expression that references the other controls, where if the complete expression evaluates to true (or false), the control is disabled in the view. Easier to code would be a control that exposed an isDisabled() method, which you could override as necessary. Here's a short Java example, which leverages Java anonymous classes to do the hard work. It assumes there's already a Control class, with a booleanValue() getter that converts it to a boolean, and that since AutoDisabledControl is-a Control, it can be used as a drop-in replacement for a Control: public class AutoDisabledControl extends Control { public isDisabled() { return false ; } } ..... usage .... // control1 is never disabled final Control1 = new AutoDisabledControl() ; // Control2 is disabled if control1 is false final Control2 = new AutoDisabledControl() { public isDisabled() { return control1.booleanValue() == false; } }; // conntrol 3 is enabled only if control1 and control2 are true final Control1 = new AutoDisabledControl() { public isDisabled() { return ! ( control1.booleanValue() && control2.booleanValue()) ; }; Naturally, in the View's display, it checks each control's isDisabled() , and disables the ones that return true; when a Control's value is changed, the view redisplays. I'm assuming some sort of MVC Pattern.
