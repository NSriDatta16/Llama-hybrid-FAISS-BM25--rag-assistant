[site]: stackoverflow
[post_id]: 109831
[parent_id]: 103669
[tags]: 
The answers to this question do make for some interesting reading - it seems that we can't get good convergence on what defines an expert here. What hope is there going to be in a broader forum like a jobs fair? :-) But to put my own 2 cents in... I think there's two kinds of C expert. There's the expert in the academic sense (as in "could write their own compiler", "has written papers"). There's the pragmatic expert. I would like to define this as "someone who can write elegant C code that anyone can understand". I would take one of the latter over the former in a heartbeat. If you've got a chunk of code written by an expert that is so brittle that can only be read and understood by another expert then for all intents that code is unmaintainable. It's all very nice that the author of this code remembers the intricacies of type conversions in the middle of expressions, but it's much better if the code has been written so that it's completely unambiguous. Projects usually have enough technical challenge without adding the need for all team members to have memorized the C'99 standard.
