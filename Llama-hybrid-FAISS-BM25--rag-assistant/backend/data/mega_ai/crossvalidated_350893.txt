[site]: crossvalidated
[post_id]: 350893
[parent_id]: 335274
[tags]: 
So the code that corresponds to IsolationForest in 0.19.1 can be found here. This makes your problem a lot more manageable and a lot less confusing since what currently lives on sklearn's master branch is quite different from the 0.19.1 release. In this version, we can recover the underlying scores directly, since decision_function gives them to us like this: /// do the work for calculating the path lengths across the ensemble /// scores = 2 ** (-depths.mean(axis=1) / _average_path_length(self.max_samples_)) return 0.5 - scores scores is calculated exactly as you'd expect from the original paper . To recover what we want, we simply have to do the following: model = sklearn.ensemble.IsolationForest() model.fit(data) sklearn_score_anomalies = model.decision_function(data_to_predict) original_paper_score = [-1*s + 0.5 for s in sklearn_score_anomalies] Very important note going forward: this will not be default behavior for decision_function in future releases of scikit-learn, so assess the docs for later releases to see what you have to do to recover the original score from your model!! Hope this helped!
