CAD defpart list was a set of generic classes that can be instantiated with specific properties depending upon what was represented. This defpart list was extendible via composited parts that represented domain entities. Along with the part-subpart relations, ICAD supported generic relations via the object modeling abilities of Lisp. Example applications of ICAD range from a small collection of defparts that represents a part or component to a larger collection that represents an assembly. In terms of power, an ICAD system, when fully specified, can generate thousands of instances of parts on a major assembly design. One example of an application driving thousands of instances of parts is that of an aircraft wing – where fastener type and placement may number in the thousands, each instance requiring evaluation of several factors driving the design parameters. Futures (KBE, etc.) One role for ICAD may be serving as the defining prototype for KBE which would require that we know more about what occurred the past 15 years (much information is tied up behind corporate firewalls and under proprietary walls). With the rise of functional programming languages (an example is Haskell) in the markets, perhaps some of the power attributable to Lisp may be replicated. See also Functional programming Knowledge-based systems Orphaned technology Faculty of Aerospace Engineering, Delft University of Technology References External links Practical issues of AI (1994) - Switlik, J.M. (based upon ICAD project) ICAD Surfacing Project—Switlik, J.M. Geometric/Knowledge Modeling Challenges Research group that used to work with ICAD: Systems Engineering and Aircraft Design, Faculty of Aerospace Engineering, Delft University of Technology, The Netherlands Free book on Knowledge Technologies by Nick Milton. Check Chapter 3 on KBE by Gianfranco La Rocca (TU Delft)