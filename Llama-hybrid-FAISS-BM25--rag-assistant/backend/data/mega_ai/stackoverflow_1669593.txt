[site]: stackoverflow
[post_id]: 1669593
[parent_id]: 1288856
[tags]: 
That's correct. The ids are padded using :file_system storage. Instead of renaming all your files, you can alter the s3 backend module to use padded numbers as well. Copy the partitioned_path method from file_system_backend.rb and put it in s3_backend.rb . def partitioned_path(*args) if respond_to?(:attachment_options) && attachment_options[:partition] == false args elsif attachment_options[:uuid_primary_key] # Primary key is a 128-bit UUID in hex format. Split it into 2 components. path_id = attachment_path_id.to_s component1 = path_id[0..15] || "-" component2 = path_id[16..-1] || "-" [component1, component2] + args else path_id = attachment_path_id if path_id.is_a?(Integer) # Primary key is an integer. Split it after padding it with 0. ("%08d" % path_id).scan(/..../) + args else # Primary key is a String. Hash it, then split it into 4 components. hash = Digest::SHA512.hexdigest(path_id.to_s) [hash[0..31], hash[32..63], hash[64..95], hash[96..127]] + args end end end Modify s3_backend.rb 's full_filename method to use the partitioned_path . def full_filename(thumbnail = nil) File.join(base_path, *partitioned_path(thumbnail_name_for(thumbnail))) end attachment_fu will now create paths with the same names as it did with the file_system backend, so you can just copy your files over to s3 without renaming everything.
