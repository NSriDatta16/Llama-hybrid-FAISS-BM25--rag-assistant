[site]: stackoverflow
[post_id]: 1320346
[parent_id]: 1319490
[tags]: 
Singletons are bad, m'kay? ;) Or, more to the point, global data (especially mutable global data) is generally not a good thing. It makes classes difficult to test and debug. Small scope is good scope. One option is to look at an IoC Container library (aka a DI framework). IoC = Inversion of Control DI = Dependency Injection (or Inversion) Basically you can set up constructors on your classes that need access to the global data and add a parameter of your "singleton" type - except it's not a singleton, just a Plain Old Object (or interface). Then you tell the Container that your "global data" class has a long lifespan, and use the Container to create your other objects. You won't use the "new" keyword much anymore. The benefit is that the Container will automagically wire everything up for you, creating one and only one instance of the global class and injecting it in to all of the other constructed objects. Here's an (incomplete) list of the libraries/frameworks for .NET: IoC Container Benchmark Ninject's another one. I use Unity, but that doesn't mean it's the best for you. Here's another list: http://elegantcode.com/2009/01/07/ioc-libraries-compared/
