[site]: stackoverflow
[post_id]: 3040888
[parent_id]: 2980268
[tags]: 
I think it would be better to pass the object with the logic to the container class and let it invoke the method. For instance, if the Scheduler is the class with the logic, Person the class with the collections, and SchedulePref the collection I would rather have: Person { - preferences: Preference[] + scheduleWith( scheduler: Scheduler ) { preferences.each ( pref: Preference ) { scheduler.schedule( pref ) } } } And in the client Client { main() { scheduler = SchoolScheduler.new person = Person.withId( 123 ) person.scheduleWith( scheduler ) } } And have a subclass for the concrete Scheduler having a different algorithm each. It would be like receive the block, but instead of exposing the internals of the holder ( Person ) and the internals of the logic (the Scheduler ) you pass the function also encapsulated in the "logic class ( the Scheduler ) Think about this. If you get sick you take a pill, and internally, you may think of it acting in your internals ( may be, internally you know some pill must go to the lungs and not to the liver etc. ) The other way it would be like: Give me all your organs and then you do something on them outside of the body. That's not something good.
