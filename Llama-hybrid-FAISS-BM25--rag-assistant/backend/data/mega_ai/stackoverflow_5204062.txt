[site]: stackoverflow
[post_id]: 5204062
[parent_id]: 5203457
[tags]: 
Q1: Yes. We have one there. Q2: Have to create a JNI layer (more code to maintain) Have to maintain c/c++ code in addition to Java (no problem if you have people versed in both) More chances for FC due to pointer manipulation in the c/c++ code (happens with groups that have experience in Java, but not so much in c/c++ - real-life experience) Slightly more complicated build process (need to setup an environment to build the native code, e.g. cygwin, build both ARM v5 and v7, package them). The NDK has good templates for that, though. Make use of the C/C++ experience in your team. Picking up Java (the language - syntax) is no big deal. Understanding the subtleties of the JRE and the framework take more time. See the last paragraph below. You didn't ask, but here we go: the big advantage of having native code is the opportunity to share the same code base across different platforms (e.g. iOS and Android). Finally, an arguable advantage: there are more opportunities to optimize the native C/C++ code than the Java code, depending on your team background. Please don't flame this point. This is based on the experience or our app. We have experienced C/C++ people who can fine tune memory usage (e.g. save on memory allocation) and write fast C/C++ code. An experienced Java team may write an app that is just as fast, for all I know.
