[site]: stackoverflow
[post_id]: 288956
[parent_id]: 288877
[tags]: 
If you want to do function logging for the sake of debugging you may want to look into the Xdebug extension. There's no good way to intercept function calls at at runtime, and any automated interception will add great runtime overhead. Using XDebug you could instead turn it on as-needed, as well as get lots of other stuff ( XDebug is thus used with PHPUnit to do unit testing and coverage analysis. ) Xdebug PHPUnit The Problem with __call __call may look to be a fun solution to the problem, but there are 3 problems with this, namely Significant Execution Overhead. your doing __call --> call_user_func_array , which will literally add not one, but two function calls to every execution. Backtraces become indecipherable: The actual function you were trying to call gets lost in a sea of __call and call_user_func_array making backtracing exceedingly hard, especially if your backtraces come with their arguent lists included. Stupid Hidden Functions: You're going back to PHP4 style "hiding" of functions by prefixing them with _ to stop the user directly calling it or seeing it, because if the function name happens to be named what they wan't, the __call wont trigger, so you have already got a whole class full of really horrible function names, which developers will be tempted to call directly anyway in various places. ( And if you want to get rid of __call later, you will have to rename all these functions as to not break the code! ) Thus, if you are utilising php code to implement this will result in epically horrible code, that any future user of your codebase will NOT want to work with. You are far better getting something ( like Xdebug ) that can be added transparently when you need it, and save greatly polluting your code.
