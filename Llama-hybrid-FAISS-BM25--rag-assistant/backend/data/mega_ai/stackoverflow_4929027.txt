[site]: stackoverflow
[post_id]: 4929027
[parent_id]: 
[tags]: 
Slow AD properties retrieval in C#

Hi all I'm porting over my VBScript over to C#. And I ran into a problem that Active Directory properties retrieval is much slower in C#. This is my incomplete C# code foreach(string s in dictLast.Keys) { if(s.Contains("/")) str = s.Insert(s.IndexOf('/'), "\\"); else str = s; dEntry = new DirectoryEntry("LDAP://" + str); strUAC = dEntry.Properties["userAccountControl"].Value.ToString(); cmd.CommandText = "INSERT INTO [NOW](readTime) VALUES(\"" + test.Elapsed.Milliseconds.ToString() + "\")"; cmd.ExecuteNonQuery(); test.Reset(); test.Start(); } If I comment out this line. strUAC = dEntry.Properties["userAccountControl"].Value.ToString(); It runs at 11 secs. But if I don't, it runs at 2mins 35 secs. The number of records are 3700. On average each record runs at 50 secs. I'm using the Stopwatch Class. My VBscript runs at only 39 secs (Using difference of Time). With each record either a 0 or 15 milliseconds. I'm using the difference of Timer(). Here's my VBscript strAttributes = "displayName, pwdLastSet, whenCreated, whenChanged, userAccountControl" For Each strUser In objList.Keys prevTime = Timer() strFilter = "(sAMAccountName=" & strUser & ")" strQuery = strBase & ";" & strFilter & ";" & strAttributes & ";subtree" adoCommand.CommandText = strQuery Set adoRecordset = adoCommand.Execute On Error Resume Next If (adoRecordset.Fields("displayName") = null) Then strCN = "-" Else strCN = adoRecordset.Fields("displayName") End If If (Err.Number <> 0) Then MsgBox(strUser) End If strCr8 = DateAdd("h", 8, adoRecordset.Fields("whenCreated")) strUAC = adoRecordset.Fields("userAccountControl") If (strUAC AND ADS_UF_DONT_EXPIRE_PASSWD) Then strPW = "Never expires" Else If (TypeName(adoRecordset.Fields("pwdLastSet").Value) = "Object") Then Set objDate = adoRecordset.Fields("pwdLastSet").Value dtmPwdLastSet = Integer8Date(objDate, lngBias) Else dtmPwdLastSet = #1/1/1601# End If If (dtmPwdLastSet = #1/1/1601#) Then strPW = "Must Change at Next Logon" Else strPW = DateAdd("d", sngMaxPwdAge, dtmPwdLastSet) End If End If retTime = Timer() - prevTime If (objList.Item(strUser) = #1/1/1601#) Then Wscript.Echo strCN & ";" & strUser & ";" & strPW & ";" & strCr8 & ";" & ObjChange.Item(strUser) & ";0;" & strUAC & ";" & retTime Else Wscript.Echo strCN & ";" & strUser & ";" & strPW & ";" & strCr8 & ";" & ObjChange.Item(strUser) & ";" & objList.Item(strUser) & ";" & strUAC & ";" & retTime End If Next Any ideas what's the problem? Please tell me if I'm not giving enough information. Thank you. DirectorySearcher way. 1 min 8 secs. dEntry = new DirectoryEntry("LDAP://" + strDNSDomain); string[] strAttr = {"userAccountControl"}; foreach(string s in dictLast.Keys) { if(s.Contains("/")) str = s.Insert(s.IndexOf('/'), "\\"); else str = s; ds = new DirectorySearcher(de, "(sAMAccountName=" + s + ")", strAttr, SearchScope.Subtree); ds.PropertiesToLoad.Add("userAccountControl"); SearchResult rs = ds.FindOne(); strUAC = rs.Properties["userAccountControl"][0].ToString(); cmd.CommandText = "INSERT INTO [NOW](readTime) VALUES(\"" + test.Elapsed.Milliseconds.ToString() + "\")"; cmd.ExecuteNonQuery(); test.Reset(); test.Start(); } where strDNSDomain is the defaultNamingContext. I've tried with domain name but it runs worse, at 3 mins 30 secs. Looking at someone else's code. Would there be a difference if we omit the domain part? using (var LDAPConnection = new DirectoryEntry("LDAP://domain/dc=domain,dc=com", "username", "password")) And just use "LDAP://dc=domain,dc=com" instead. Work around. Instead of binding each user and getting the properties. I stored all the properties in the first search for lastLogon instead. And output using StreamWriter.
