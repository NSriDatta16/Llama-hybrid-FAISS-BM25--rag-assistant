[site]: stackoverflow
[post_id]: 902466
[parent_id]: 869324
[tags]: 
Larger and more distributed or more flexible teams need stricter coding and testing standards, small teams can (and should) use less. Continuous testing is invaluable regardless of team size. What should vary is the amount of testing based on project maturity and component criticality. For new products periodic demonstrations are great for morale and are adequate for delivering progress feel to management. For mature and shipping products at minimum periodic acceptance testing of major features will track a product's readiness for release. For major system interfaces unit testing is illustrative and helps avoid surprises. When working with contracted sub-projects unit tests are better than documentation and critical to avoid finger-pointing delays. Test-first development is a worthy experiment for the heavy lifting pieces of code. If your most valuable asset is your technology then it should be extremely thoroughly tested. Detailed statistical control indicators are an unnecessary overhead: early release of incomplete software is a better indication of progress. Statistical control indicators are vital to early identification of project overrun, but they are best left in the hands of the "Agile Coach" or "Scrum Master" either permanently or until the entire team becomes disciplined at producing accurate accounting of progress and delays. When effectively applied, agile development practices should produce stories and tasks which are small enough that they are completed in hours to days. Effective management of the "planning game" and feedback resulting in individual task overrun can minimize the overhead of estimation and collecting progress data. Finally, a historical record of customer (and/or management) decisions and an accounting of where time (days) was actually spent in reaction to these decisions will lead the way to improving both engineering and business process. A "swim lane" or "gantt" chart of blocked development and time spent will show how "but we're agile" is no excuse for rash business decisions. Ideally developers should be close to the customer with no specialised intermediate roles. Additional roles should only be used if customers are specialised in a way that stops developers from also being users. For once I agree! Separate dev and management meetings work well to separate concerns. Iterations should be flexible unless it benefits coordination of releases with other departments or other processes. Agile iterations are a valuable development rhythm for establishing a continuously releasable product. The ends of iterations are when feature decisions can be implemented and source control changes can be made to branch off features which won't make the target. However this practice may be difficult for teams to implement when iterations to not meet up with business needs. Iterations should be scheduled around business needs like demos and promotions. Developers should be able to easily and regularly communicate but meetings should be infrequent (monthly and weekly, rather than daily). Monday / Thursday standup meetings are a great idea. However it needs a hard 15-30 minute cap. Split the meeting as needed to reduce the time. Separate concerns to avoid wasting developer time. An office dog can help keep people attentive during meetings. A few barks is better than people nodding off or texting. Pair programming should only be used for training and investigational tasks. Pair programming, unit testing, merciless refactoring, and test driven practices are some of the most difficult agile skills for teams for adopt. The benefits of pair programming are to increase awareness and knowledge and prevent work from being done in isolation where bad decisions and assumptions can linger and cascade.
