[site]: stackoverflow
[post_id]: 130841
[parent_id]: 130614
[tags]: 
The short answer is that there shouldn't be a way since a Dictionary "Represents a collection of keys and values." which does not imply any sort of ordering. Any hack you might find is outside the definition of the class and may be liable to change. You should probably first ask yourself if a Dictionary is really called for in this situation, or if you can get away with using a List of KeyValuePairs. Otherwise, something like this might be useful: public class IndexableDictionary : Dictionary { private SortedDictionary _sortedKeys; public IndexableDictionary() { _sortedKeys = new SortedDictionary (); } public new void Add(T1 key, T2 value) { _sortedKeys.Add(_sortedKeys.Count + 1, key); base.Add(key, value); } private IEnumerable > Enumerable() { foreach (T1 key in _sortedKeys.Values) { yield return new KeyValuePair (key, this[key]); } } public new IEnumerator > GetEnumerator() { return Enumerable().GetEnumerator(); } public KeyValuePair this[int index] { get { return new KeyValuePair (_sortedKeys[index], base[_sortedKeys[index]]); } set { _sortedKeys[index] = value.Key; base[value.Key] = value.Value; } } } With client code looking something like this: static void Main(string[] args) { IndexableDictionary fooDict = new IndexableDictionary (); fooDict.Add("One", "One"); fooDict.Add("Two", "Two"); fooDict.Add("Three", "Three"); // Print One, Two, Three foreach (KeyValuePair kvp in fooDict) Console.WriteLine(kvp.Value); KeyValuePair temp = fooDict[1]; fooDict[1] = fooDict[2]; fooDict[2] = temp; // Print Two, One, Three foreach (KeyValuePair kvp in fooDict) Console.WriteLine(kvp.Value); Console.ReadLine(); } UPDATE: For some reason it won't let me comment on my own answer. Anyways, IndexableDictionary is different from OrderedDictionary in that "The elements of an OrderedDictionary are not sorted in any way." So foreach's would not pay attention to the numerical indices It is strongly typed, so you don't have to mess around with casting things out of DictionaryEntry structs
