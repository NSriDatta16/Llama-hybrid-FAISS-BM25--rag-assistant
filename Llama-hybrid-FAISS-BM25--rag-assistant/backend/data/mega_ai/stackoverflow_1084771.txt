[site]: stackoverflow
[post_id]: 1084771
[parent_id]: 941584
[tags]: 
This is for the most part my answer that pertains to this topic, submitted first to a similar question here . All operations with integral numbers smaller than Int32 are rounded up to 32 bits before calculation by default. The reason why the result is Int32 is simply to leave it as it is after calculation. If you check the MSIL arithmetic opcodes, the only integral numeric type they operate with are Int32 and Int64. It's "by design". If you desire the result back in Int16 format, it is irrelevant if you perform the cast in code, or the compiler (hypotetically) emits the conversion "under the hood". For example, to do Int16 arithmetic: short a = 2, b = 3; short c = (short) (a + b); The two numbers would expand to 32 bits, get added, then truncated back to 16 bits, which is how MS intended it to be. The advantage of using short (or byte) is primarily storage in cases where you have massive amounts of data (graphical data, streaming, etc.)
