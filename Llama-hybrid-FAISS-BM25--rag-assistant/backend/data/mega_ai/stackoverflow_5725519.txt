[site]: stackoverflow
[post_id]: 5725519
[parent_id]: 5719248
[tags]: 
I'll answer your question by showing you the math but you need to convert it to codes yourself. First, you need to decide (you probably did) how long (in points) does a touch need to move to increase the power of the throw from 0 to 1. Let's refer to this value as D. Then, let's refer to the coordinate where the touch began as Tx and Ty. Then, when the touch moved to new coordinate Ux and Uy, you the distance the touch has moved from (Tx, Ty) using formula: E = sqrt( pow( Ux - Tx, 2 ) + pow( Uy - Ty, 2 ) ) And you calculate the power using formula: P = E / D Up to this point I think your code is already doing all these calculations. But what's coming next is how you would handle if player still moves the touch exceeding the distance D from the touch began point, that is to say that E > D . First, put an IF block: if (E > D) { ... } So, now you want to modify Tx and Ty values (i.e. the touch began point) so that the distance from the current touch position to that coordinate is D. Here's the magic formula: angle = atan2( Uy - Ty, Ux - Tx ) Ty = Uy - D * sin( angle ) Tx = Ux - D * cos( angle ) At this point you might want to modify the power value to 1: P = 1 E = D And that's it! The formula will move the touch began point towards the current touch position to maintain the condition of E . Naturally the case where the player moves the touch towards the touch began point is taken care of. Good luck!
