[site]: stackoverflow
[post_id]: 791890
[parent_id]: 791256
[tags]: 
Where is an extension method, this is not a method implemented by the interface IQueriable. Look at the members of IQueriable: http://msdn.microsoft.com/en-us/library/system.linq.iqueryable_members.aspx An extension method is static and can't be mocked. IMO, there is no need to mock Where , because it's part of the language. You should only mock the repository. Edit, Example: [TestFixture] public class ServiceClassTester { private ServiceClass _service; private IRepository _repository; private IQueryable _actionQuery; [SetUp] public void SetUp() { _service = new ServiceClass(_repository); // set up the actions. There is probably a more elegant way than this. _actionQuery = (new List () { ActionA, ActionB }).AsQueryable(); // setup the repository _repository = MockRepository.GenerateMock (); _repository.Stub(x => x.Query ()).Return(_actionQuery); } [Test] public void heres_a_test() { // act var actions = _service.GetAvailableActions(); // assert Assert.AreEqual(1, actions.Count()); // more asserts on he result of the tested method } } Note: you don't need to expect the call, because your method depends on the return value of the mock. If it wouldn't call it, it would fail on the asserts. This makes your test easier to maintain.
