[site]: crossvalidated
[post_id]: 533371
[parent_id]: 533306
[tags]: 
The main problem with hyperparameter choices is that is very hard to tell what should work for any specific problem. You should try a range of each value, with big jumps (factors of 2 to 5) to search multiple possibilities. That said, I think the following could be a problem: Epsilon: reduces from 1.0 to 0.0 over 100 iterations. This decay is too fast, and too extreme. In Q learning you should always have some small epsilon value whilst learning and set to zero only for tests. With a zero epsilon you stop exploring behaviour, and that significantly reduces the chance that the agent will find better actions than the ones it already has already decided on as "best". I would suggest reduces from 1.0 to 0.05 over 100,000 iterations, remaining at 0.05 after that. A rule of thumb I use for myself is that there should always be some reasonable but small probability of completing a trajectory taking only greedy actions, but that the "typcial" trajectory may have one or two experimental actions in expectation. So in your case with fixed episode length of 36, a minimum $\epsilon = 0.05$ would be ok - it would make $0.96^{36} \approx 0.16$ of your trajectories greedy with respect to current Q values, and the expected number of exploratory actions is 1.8. The following may affect stability: Size of experience replay buffer: 2,000. I would pick maybe 10,000 or 100,000 initially. Q learning can still learn from older off-policy data, and there is some benefit from keeping older, worse experiences around to address catastrophic forgetting. Batch size: 500. This should probably be smaller. It should definitely be small compared to the replay memory, otherwise you risk catasrophic forgetting by learning with a huge bias towards recent experiences only. Perhaps start at 25 or 50, and experiment with increasing it later on. Larger numbers are good for reducing variance if your learning data is has lots of noise, but try to keep the value under 1% of replay memeory size.
