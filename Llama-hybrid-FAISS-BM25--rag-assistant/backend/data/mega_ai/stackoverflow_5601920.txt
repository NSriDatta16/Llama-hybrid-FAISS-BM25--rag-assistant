[site]: stackoverflow
[post_id]: 5601920
[parent_id]: 
[tags]: 
What are your best practices when using an MVC-based web framework?

A few general questions to those who are well-versed in developing web-based applications. Question 1: How do you avoid the problem of "dependency carrying"? From what I understand, the first point of object retrieval should happen in your controller's action method. From there, you can use a variety of models, classes, services, and components that can require certain objects. How do you avoid the need to pass an object to another just because an object it uses requires it? I'd like to avoid going to the database/cache to get the data again, but I also don't want to create functions that require a ton of parameters. Should the controller action be the place where you create every object that you'll eventually need for the request? Question 2: What data do you store in the session? My understanding is that you should generally only store things like user id, email address, name, and access permissions. What if you have data that needs to be analyzed for every request when a user is logged in? Should you store the entire user object in the cache versus the session? Question 3: Do you place your data-retrieval methods in the model itself or in a separate object that gets the data and returns a model? What are the advantages to this approach? Question 4: If your site is driven by a user id, how do you unit test your code base? Is this why you should have all of your data-retrieval methods in a centralized place so you can override it in your unit tests? Question 5: Generally speaking, do you unit test your controllers? I have heard many say that it's a difficult and even a bad practice. What is your opinion of it? What exactly do you test within your controllers? Any other tidbits of information that you'd like to share regarding best practices are welcome! I'm always willing to learn more.
