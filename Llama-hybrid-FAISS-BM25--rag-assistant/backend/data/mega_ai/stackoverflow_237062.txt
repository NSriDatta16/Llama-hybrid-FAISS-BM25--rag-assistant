[site]: stackoverflow
[post_id]: 237062
[parent_id]: 236744
[tags]: 
I would try to go with Test Driven Development. This will give you many things: You will get a pretty good unit test coverage (I'm not saying that unit test coverage is important). Developers will have more confidence that the code is really working (see * later for more information) You will be able to refactor the code more easily (because you have the tests). [*] - Kent Beck in this area mentions Influence diagrams. In influence diagrams an arrow between nodes means that an increase in the first node implies an increase in the second node. An arrow with a circle means that an increase in the first node implies a decrease in the second node. -----> [Stress] [RunTests] The more stress you feel, the less testing you will do. The less testing you do, the more errors you will make. The more errors you make, the more stress you feel. Repeat... How to solve this circle that leads to stressed developers not trusting their own code after a while? Test first development changes the influence diagram: [TestFirst] [Stress] The more you do test first development, less stress you feel. The less stress you feel, the more tests first development you do. This leads to better testing code developed by developers who trust their code.
