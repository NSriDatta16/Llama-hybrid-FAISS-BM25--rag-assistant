[site]: stackoverflow
[post_id]: 4433186
[parent_id]: 
[tags]: 
Sorting A text file

/* Program that reads a sequence of words from keyboard and prints the list of words without duplicates and sorted in ascending lexicographic order. The input words are written one per line and the sequence is terminated by an empty line. The program works with at most MAX words, each at most MAXL characters long. Longer words are truncated and words in excess are ignored. */ #include #include #define MAXL 80 /* maximum word length */ #define MAX 100 /* maximum number of words */ /* word storage */ char storage[MAX][MAXL]; char *words[MAX]; void init(char *pnt[], char matr[][MAXL], int max); int read_words (char *s[], int max); void sort_strings (char *s[], int len); void swap_char_pnt(char **xp, char **yp); void print_words(char *s[], int n); int find (char *s[], char w[], int n); main() { int nw; /* actual number of words */ /* initialize array of pointers */ init(words, storage, MAX); /* read and store words */ printf("Enter words one per line\n"); nw = read_words(words, MAX); printf("\nList of unsorted words:\n"); print_words(words, nw); /* sort words */ sort_strings(words, nw); /* print words */ printf("\nList of sorted words:\n"); print_words(words, nw); } /* initializes an array of pointers to the rows of a matrix of characters max is the number of pointers to initialize */ void init(char *pnt[], char matr[][MAXL], int max) { int i; for (i=0; i 0) { /* swap */ swap_char_pnt(&s[i], &s[i+1]); swaps=1; } } } void swap_char_pnt(char **xp, char **yp) { char *temp; temp = *xp; *xp = *yp; *yp = temp; } void print_words(char *s[], int n) { int i; for (i=0; i What Can i Do to Sort Text File in Ascending Order of Strings.
