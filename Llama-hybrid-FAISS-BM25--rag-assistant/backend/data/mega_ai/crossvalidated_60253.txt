[site]: crossvalidated
[post_id]: 60253
[parent_id]: 60109
[tags]: 
What the function does: In essence, the function generates new pseudorandom response (i.e., $Y$) data from a model of your data. The model being used is a standard frequentist model. As is customary, it is assuming that your $X$* data are known constants--they are not sampled in any way. What I see as the important feature of this function is that it is incorporating uncertainty about the estimated parameters. * Note that you have to manually add a vector of $1$'s as the leftmost column of your $X$ matrix before inputting it to the function, unless you want to suppress the intercept (which is generally not a good idea). What was the point of this function: I don't honestly know. It could have been part of a Bayesian MCMC routine, but it would only have been one piece--you would need more code elsewhere to actually run a Bayesian analysis. I don't feel sufficiently expert on Bayesian methods to comment definitively on this, but the function doesn't 'feel' to me like what would typically be used. It could also have been used in simulation-based power analyses. (See my answer here: Simulation of logistic regression power analysis - designed experiments , for information on this type of thing.) It is worth noting that power analyses based on prior data that do not take the uncertainty of the parameter estimates into account are often optimistic. (I discuss that point here: Desired effect size vs. expected effect size .) If you want to use this function: As @whuber notes in the comments, this function will be inefficient. If you want to use this to do (for example) power analyses, I would split the function into two new functions. The first would read in your data and output the parameters and the uncertainties. The second new function would generate the new pseudorandom $Y$ data. The following is an example (although it may be possible to improve it further): simulationParameters
