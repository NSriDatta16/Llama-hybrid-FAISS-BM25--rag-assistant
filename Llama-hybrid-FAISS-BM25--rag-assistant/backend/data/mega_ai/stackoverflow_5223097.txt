[site]: stackoverflow
[post_id]: 5223097
[parent_id]: 4036764
[tags]: 
Just answering my own question. Short answer - yes, I was right with my assumptions ;) I took a look at JavaScriptMVC , and noticed one simple thing I missed, a simple function can be developed which will create javascript object based on form (they have function called formParams which performs this type of converting). This way my controller is simplified: InfoController = { ... onFormSubmit: function() { ... var info = $infoForm.formParams(); InfoModel.save( info ); } } Now it does not look that complicated, and its advantage is that there is one place (model) which knows how to save data (validation; url to send; some other stuff like add this entity to client side 'storage'; firing an event that something new is going to be created; whatever else according to our needs), and if I have one more place, or control flow to perform this operation again I won't write this code again, and it does not depend on presentation (is it form, or just set of inputs, wizard etc.). Also Model becomes quite reusable. Actually before using this approach we had something similar, but it was not that structured (among different presentations for my application which can run javascript).
