[site]: stackoverflow
[post_id]: 3376999
[parent_id]: 3376786
[tags]: 
Getters and setters are good for encapsulation . In general, you do not want to blindly provide getters and setters for all fields that do nothing more than return the value or set the value. You should think about what part of the state of the class you want to expose to the outside, and you control that by implementing the appropriate getters and setters. It's often a good idea to make classes immutable - in that case, you wouldn't be providing setters at all, just getters. Unfortunately, working with properties in Java is cumbersome because Java doesn't have any language support for them. In other programming languages (C#, Ruby, Scala, ...) you can access properties in a more elegant way, for example you'd write object.name and it would below the covers call object.getName() , or you'd write object.name = ... and it would call object.setName(...) . See Uniform Access Principle . I don't know exactly what your code for the board class looks like, but unless you'd want to set a whole row of tiles at once, I see no point in creating a setter method that sets the whole array. If you'd just need to set a tile at a certain row and column, I'd create a setter that takes two coordinate arguments, and let the board class handle the complexity of arrays-within-arrays.
