[site]: stackoverflow
[post_id]: 2435762
[parent_id]: 2435525
[tags]: 
[1] document.forms[0].elements[0]; " No-omg-never! " comes to mind when I see this method of element access. The problem with this is that it assumes that the DOM is a normal data structure (e.g.: an array) wherein the element order is static, consistent or reliable in anyway. We know that 99.9999% of the time, that this is not the case. Reordering or input elements within the form, adding another form to the page before the form in question, or moving the form in question are all cases where this code breaks. Short story: this is very fragile. As soon as you add or move something, it's going to break. [2] document.myForm.foo; I'm with Sergey ILinsky on this: Access arbitrary elements by referring to their id attribute: document.getElementById("myform"); Access named form elements by name, relative to their parent form element: document.getElementById("myform").foo; My main issue with this method is that the name attribute is useless when applied to a form. The name is not passed to the server as part of the POST/GET and doesn't work for hash style bookmarks. [3] document.getElementById('foo'); In my opinion, this is the most preferable method. Direct access is the most concise and clear method. [4] document.getElementById('myForm').foo; In my opinion, this is acceptable, but more verbose than necessary. Method #3 is preferable. I just so happened to be watch a video from Douglas Crockford and he weighed in on this very subject. The point of interest is at -12:00. To summarize: Document collections (document.anchor, document.form, etc) are obsolete and irrelevant (method 1). The name attribute is used to name things, not to access them. It is for naming things like windows, input fields, and anchor tags. "ID is the thing that you should use to uniquely identify an element so that you can get access to it. They (name and ID) used to be interchangeable, but they aren't anymore." So there you have it. Semantically, this makes the most sense.
