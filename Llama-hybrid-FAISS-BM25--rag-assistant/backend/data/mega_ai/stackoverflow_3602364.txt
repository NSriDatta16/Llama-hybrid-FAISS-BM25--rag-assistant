[site]: stackoverflow
[post_id]: 3602364
[parent_id]: 1271341
[tags]: 
Have a look at the 82 code metrics definitions supported by the tool NDepend integrated in Visual Studio 2012, 2010 and 2008. Disclaimer: I am one of the developers of the tool Notice that these code metrics can be composed through CQLinq queries and rules to define your own custom code metrics. For example, one popular code metric other than Cyclomatic Complexity is the C.R.A.P metric . Basically, the C.R.A.P define crappy code as complex methods (with high Cyclomatic Complexity ), poorly covered by tests. The default CQLinq rule to define the C.R.A.P metric is: // C.R.A.P method code metric // Change Risk Analyzer and Predictor (i.e. CRAP) code metric // This code metric helps in pinpointing overly complex and untested code. // Reference: http://www.artima.com/weblogs/viewpost.jsp?thread=215899 // Formula: CRAP(m) = comp(m)^2 * (1 â€“ cov(m)/100)^3 + comp(m) warnif count > 0 from m in JustMyCode.Methods // Don't match too short methods where m.NbLinesOfCode > 10 let CC = m.CyclomaticComplexity let uncov = (100 - m.PercentageCoverage) / 100f let CRAP = (CC * CC * uncov * uncov * uncov) + CC where CRAP != null && CRAP > 30 orderby CRAP descending, m.NbLinesOfCode descending select new { m, CRAP, CC, uncoveredPercentage = uncov*100, m.NbLinesOfCode }
