[site]: stackoverflow
[post_id]: 4525747
[parent_id]: 4525730
[tags]: 
You certainly can't create a type derived from decimal , as it's a struct - and you can't create subtypes of structs. You could create your own Currency struct which contained a decimal, though. You'd want to overload all the arithmetic operators to basically perform the arithmetic on the contained decimal values and then round appropriately. For example: public struct Currency { private readonly decimal value; public Currency(decimal value) { this.value = decimal.Round(value, 2); } public override string ToString() { return value.ToString(); } public static Currency operator+(Currency left, Currency right) { return new Currency(left.value + right.value); } public static Currency operator-(Currency left, Currency right) { return new Currency(left.value - right.value); } public static Currency operator/(Currency left, int right) { return new Currency(left.value / right); } } class Test { static void Main() { Currency currency = new Currency(15); Console.WriteLine(currency / 10); // Prints 1.5 Console.WriteLine(currency / 100); // Prints 0.15 Console.WriteLine(currency / 1000); // Prints 0.2 } } (Obviously there's a lot more needed here - in particular you'll want to override GetHashCode and Equals , implement IEquatable etc.) Is this definitely what you want though? I thought it was more common to keep as much precision as you could during intermediate operations, and only round at the last moment, e.g. for storage in a database or display to a user.
