[site]: stackoverflow
[post_id]: 4181228
[parent_id]: 4181178
[tags]: 
Don't #include "stdafx.h" in your library's public header file. By public header file, I mean the header file that clients of your library would #include . Instead, only define the absolute minimum, and preferably use 100% portable code in this file. Also avoid using the STL if your library is going to be used by different compilers or platforms. So suppose you have a public header file my_library.h which is implemented in gizmo.cpp . You would have the following: gizmo.cpp #include "stdafx.h" #include "my_library.h" int GizmoTronic() { // ... return 42; } Also, off-topic, but use macro guards and not #pragma once which is not part of the C++ language, and therefore isn't supported by all compilers. It is a bad habit to get in to. EDIT: As for the question of DWORD and string not being defined when your header is #include -ed, I have 3 suggestions: 1) Only use portable datatypes. That is, datatypes defined by the Standard. DWORD is a microsoft invention (from decades ago). It is not part of the language, and it is not portable. Instead, use unsigned long or something else suitable. 2) Don't use string in your library's public interface if your library is going to be used by code compiled with a compiler other than yours. The reason is because string is defined completely in header files, so each compiler potentially has it's own implementation. One compiler's string might look different from another's. 3) Assuming #2 doesn't apply, feel free to #include any necesarry headers from the Standard Library at the top of your header. If you use string in your public interface, #include in your header. (Just please do not using namespace std ). Your header should be self-contained. EDIT2: Here is how I would declare your function: void MyFunc(unsigned long a, const char* b);
