[site]: stackoverflow
[post_id]: 5077037
[parent_id]: 
[tags]: 
How to access boost::variant members from Spirit::Qi rule?

I can't find a proper way how to access members of boost::variant using boost::phoenix in my Spirit-Qi grammar. Here is simple an example what Iâ€™m trying to achieve. (my whole grammar is much more complex, this is simple fragment where I'm testing mentioned problem). namespace ph = boost::phoenix; typedef boost::variant VariantType; typedef std::list TlstVariants; rule rule1; rule1 = qi::eps [ ph::push_back(qi::_r1, ph::construct (2)) ] >> qi::eps [ ph::get (ph::back(qi::_r1)) = ph::val(3) ] //THIS IS EXAMPLE OF WHAT I NEED ; TlstVariants lstVals; ExecuteParser("5",rule1( ph::ref(lstVals) )); BOOST_FOREACH( VariantType &val, lstVals ) { std::cout But I can't find any phoenix::get<> or any similar method to access boost::variant using Phoenix. Reason why I need phoenix::get<> is because I need to insert variant to list with specific type and then pass this specific type as reference to the child rule as inherited attribute: qi::rule rule_child; rule = qi::lit("test") [ph::push_back(sp::_r1, ph::construct ())] > qi::lit('(') > rule_child( ph::get (ph::back(sp::_r1)) ) > qi::lit(')') ... Is there any way how to achieve behavior like this? Thank for any reply Rick
