[site]: stackoverflow
[post_id]: 2796215
[parent_id]: 2796205
[tags]: 
The controller is your logic, the model is your data, and the view is your output. So, this is the controller: $model = new UserDB(); $user = $model->getUser("Chacha102"); $view = new UserPage($user->getName(), $user->getEmail()); echo $view->getHTML(); The model is the UserDB class which will give me my data. The view is the UserPage that I give the data from the model to, and it will then output that page. As you can see, the controller doesn't do much in this example, because you are simply getting user data and displaying it. That is the beauty of MVC. The controller doesn't have to deal with the User SQL or HTML stuff, it just grabs the data and passes it to the view. Also, the view doesn't know anything about the model, and the model doesn't know anything about the view. Therefore, you can chance the implementation of either, and it won't affect the other. Relating more to your example, you have the view correct, but you have mixed your controller and model. You could relieve this by: Controller: $model = new NumberToWord(); $word = $model->getWord($a); $this->output->addContent($word); $this->output->displayContent(); Model: class NumberToWord{ public function getWord($number) { if($number == 2){ return 'two'; } else{ return 'not two'; } } } And keep your same output
