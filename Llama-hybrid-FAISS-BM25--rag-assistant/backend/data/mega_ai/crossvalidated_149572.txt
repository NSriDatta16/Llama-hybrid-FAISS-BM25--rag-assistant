[site]: crossvalidated
[post_id]: 149572
[parent_id]: 149122
[tags]: 
I suggest that you encode your data so that yes, no, and absent are all represented. If you have prepared your data with rows for voters and columns for votes, and encoded yes, no, and missing as 1, 0, 9, you can use sklearn.preprocessing.OneHotEncoder to map this into a feature space with columns for yes, no, and missing: import sklearn.preprocessing X = sklearn.preprocessing.OneHotEncoder().fit_transform(observed_votes) import sklearn.decomposition X_2d = sklearn.decomposition.PCA(n_components=2).fit_transform(X.toarray()) plt.plot(X_2d[:,0], X_2d[:,1], 'o') Here is an IPython Notebook that simulates some data for the observed_votes so you can see how I'm thinking of organizing things.
