[site]: stackoverflow
[post_id]: 4110947
[parent_id]: 4110866
[tags]: 
If your model is really "responsible" for the constants you should stick them there. You can create class methods to access them without creating a new object instance: class Card Alternatively, you can create class variables and an accessor. This is however discouraged as class variables might act kind of surprising with inheritance and in multi-thread environments. class Card The two options above allow you to change the returned array on each invocation of the accessor method if required. If you have true a truly unchangeable constant, you can also define it on the model class: class Card You could also create global constants which are accessible from everywhere in an initializer like in the following example. This is probably the best place, if your colours are really global and used in more than one model context. # put this into config/initializers/my_constants.rb COLOURS = ['white', 'blue'].freeze # accessible as a top-level constant this time COLOURS Note: when we define constants above, often we want to freeze the array. That prevents other code from later (inadvertently) modifying the array by e.g. adding a new element. Once an object is frozen, it can't be changed anymore.
