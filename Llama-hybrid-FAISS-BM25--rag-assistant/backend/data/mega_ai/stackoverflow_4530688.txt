[site]: stackoverflow
[post_id]: 4530688
[parent_id]: 4530611
[tags]: 
As for your second problem: Traceback (most recent call last): File " ", line 1, in File "C:\Python31\lib\pickle.py", line 1365, in load encoding=encoding, errors=errors).load() EOFError After you have read the contents of the file, the file pointer will be at the end of the file - there will be no further data to read. You have to rewind the file so that it will be read from the beginning again: file.seek(0) What you usually want to do though, is to use a context manager to open the file and read data from it. This way, the file will be automatically closed after the block finishes executing, which will also help you organize your file operations into meaningful chunks. Historical note: cPickle is a faster implementation of the pickle module in C that will be used automatically in python 3.x. But in python 2.x it cPickle required explicit calls: In [1]: import _pickle as cPickle In [2]: d = {"a": 1, "b": 2} In [4]: with open(r"someobject.pickle", "wb") as output_file: ...: cPickle.dump(d, output_file) ...: # pickle_file will be closed at this point, preventing your from accessing it any further In [5]: with open(r"someobject.pickle", "rb") as input_file: ...: e = cPickle.load(input_file) ...: In [7]: print e ------> print(e) {'a': 1, 'b': 2}
