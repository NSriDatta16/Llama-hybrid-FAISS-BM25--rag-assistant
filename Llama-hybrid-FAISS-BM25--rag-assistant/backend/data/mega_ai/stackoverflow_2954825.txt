[site]: stackoverflow
[post_id]: 2954825
[parent_id]: 2954791
[tags]: 
Well, assuming that there is nothing to be done about the declaration of the mutable object class, one could leverage reflection ( Class . newIntance() and Class . getFields() ) to create a new object and copy field values. You could also implement deep copying in this manner. If the class supports serialization, then another hackish approach would be to serialize the object and then save a deserialized copy. If it is possible to fix the design of the mutable object, though, that would be a better approach. Edit For the particular example that you've given, Romain's answer does what you want. If you have a general mutable object that doesn't provide a mechanism for copying it and for which the type may not be known until later, then the reflection approach is how one would implement a copy mechanism.
