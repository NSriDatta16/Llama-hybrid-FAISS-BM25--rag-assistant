[site]: stackoverflow
[post_id]: 3592326
[parent_id]: 3592116
[tags]: 
Under the circumstances, I'd probably use a DIB section (which you create with CreateDIBSection ). A DIB section is a bitmap that allows you to access the contents directly as an array, but still use it with all the usual GDI functions. I think that'll give you the best performance of anything based on GDI. If you need better, then @Kornel is basically correct -- you'll need to switch to something that has more direct support for hardware acceleration (DirectX or OpenGL -- though IMO, OpenGL is a much better choice for the job than DirectX). Given that you're currently doing the calculation in OpenCL and depositing the output in a color buffer, OpenGL would be the really obvious choice. In particular, you can have OpenCL deposit the output in an OpenGL texture, then you have OpenGL draw a quad using that texture. Alternatively, since you're just putting the output on screen anyway, you could just do the calculation in an OpenGL fragment shader (or, of course, a DirectX pixel shader), so you wouldn't put the output into memory off-screen just so you can copy the result onto the screen. If memory serves, the Orange book has a Mandelbrot shader as one of its examples.
