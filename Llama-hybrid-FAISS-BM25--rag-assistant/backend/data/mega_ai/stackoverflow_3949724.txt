[site]: stackoverflow
[post_id]: 3949724
[parent_id]: 3949618
[tags]: 
First of all, what does it mean for 2 concepts to be orthogonal ? It means that the two concepts do not have contrasting ideas or are not incompatible with each other. FP encourages immutability and purity as much as possible. and OO seems like something that is built for state and mutation(a slightly organized version of imperative programming?). And I do realize that objects can be immutable. But OO seems to imply state/change to me. They seem like opposites. How does it affect their orthogonality ? A language like Scala makes it easy to do OO and FP both, does this affect the orthogonality of the 2 methods ? OO is about encapsulation, object composition, data abstraction, polymorphism via subtyping, and controlled mutation when necessary (immutability is encouraged in OO as well). FP is about function composition, control abstraction, and constrained polymorphism (aka parametric polymorphism). Thus the two ideas are not contradictory. They both provide you with different kinds of powers and abstraction mechanisms, which are certainly possible to have in one language. In fact, this is the thesis on which Scala was built! In his Scala Experiment talk at Google, Martin Odersky explains it very well how he believes the two concepts - OO and FP - are orthogonal to each other and how Scala unifies the two paradigms elegantly and seamlessly into a new paradigm popularly known in Scala community as object-functional paradigm. Must watch talk for you. :-) Other examples of object-functional languages: OCaml , F# , Nemerle .
