[site]: stackoverflow
[post_id]: 3945973
[parent_id]: 
[tags]: 
Why does a local variable lose its value when defining a method with define_method?

Trying to follow along with a metaprogramming screencast from pragpub and ran into some problems because of changes in Ruby since the release of screencast. Hard to explain the problem w/o the code, so here's that: class Discounter def discount(*skus) expensive_discount_calculation(*skus) end private def expensive_discount_calculation(*skus) puts "Expensive calculation for #{skus.inspect}" skus.inject {|m, n| m + n } end end def memoize(obj, method) ghost = class Problem: The local variable in the method memorize should only change (by taking the return value from Discounter#discount) if it is being passed different arguments than it previously was. For example I expect the output from running the code above to look like: Expensive calculation for [1, 2, 3] 6 6 Expensive calculation for [2, 3, 4] 9 9 But this is the actual output: Expensive calculation for [1, 2, 3] 6 Expensive calculation for [1, 2, 3] 6 Expensive calculation for [2, 3, 4] 9 Expensive calculation for [2, 3, 4] 9 Why isn't the local variable persisting across the calls? What am I missing to make this code work? Thanks
