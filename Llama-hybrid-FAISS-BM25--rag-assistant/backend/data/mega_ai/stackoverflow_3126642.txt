[site]: stackoverflow
[post_id]: 3126642
[parent_id]: 3108270
[tags]: 
Those are all fine books. I might suggest also adding "Software Requirements 2" and "Peopleware: Productive Projects and Teams" (I haven't yet read Peopleware; it's been on my todo list for a while, I'm afraid.) But I'm afraid there is no substitute for experience; if you pay attention to what your team has quoted in the past, what it actually took to deliver, and try to find the reasons why you were right or wrong for the pieces you were right or wrong on, you'll learn how to be better. In my experience, it never hurts to try breaking down the large problem into smaller problems. Iterate. When you think you've finally got pieces that will take .5 to 1 programmer-day, then you're reaching the point where I have had the best success when estimating time. Of course, you have to keep in mind the programmers working for you: Alice might code a shippable solution in half a day, Bob might take a day, and Charlie might take two days to get there, with an hour from Bob for code review. Knowing your programmer's strengths and weaknesses will also take experience.
