[site]: stackoverflow
[post_id]: 3773334
[parent_id]: 3771424
[tags]: 
The following code handles varying counts properly, and also detects extra data ... in other words, it's rather robust. It could be improved by explicit messages (1) if the file is empty (2) if the header line is empty. Another possibility is testing explicitly for "NA" , and issuing an error message if a field is neither "NA" nor floatable. >>> import sys, StringIO >>> >>> data = """\ ... Jim Joe Billy Bob ... 1 2 3 x ... 2 x x x 666 ... ... 3 4 5 x ... """ >>> >>> def get_averages(f): ... headers = f.readline().split() ... ncols = len(headers) ... sumx0 = [0] * ncols ... sumx1 = [0.0] * ncols ... lino = 1 ... for line in f: ... lino += 1 ... values = line.split() ... for colindex, x in enumerate(values): ... if colindex >= ncols: ... print >> sys.stderr, "Extra data %r in row %d, column %d" % (x, lino, colindex+1) ... continue ... try: ... value = float(x) ... except ValueError: ... continue ... sumx0[colindex] += 1 ... sumx1[colindex] += value ... print headers ... print sumx1 ... print sumx0 ... averages = [ ... total / count if count else None ... for total, count in zip(sumx1, sumx0) ... ] ... print averages Edit add here: ... return headers, averages ... >>> sio = StringIO.StringIO(data) >>> get_averages(sio) Extra data '666' in row 3, column 5 ['Jim', 'Joe', 'Billy', 'Bob'] [6.0, 6.0, 8.0, 0.0] [3, 2, 2, 0] [2.0, 3.0, 4.0, None] >>> Edit Normal usage: with open('myfile.text') as mf: hdrs, avgs = get_averages(mf)
