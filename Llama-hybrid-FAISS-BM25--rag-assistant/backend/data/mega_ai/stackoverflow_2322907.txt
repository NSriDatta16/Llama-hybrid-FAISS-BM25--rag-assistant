[site]: stackoverflow
[post_id]: 2322907
[parent_id]: 2317184
[tags]: 
Use XMLFOREST instead of XMLELEMENT if there is the possibility that the column could be NULL and you don't want an empty element tag when that happens. So, for topics, you'd replace its XMLELEMENT function with XMLFOREST( Topic.value AS "topic" ) There is a problem with the way you've included two XMLAGG functions in the same SELECT statement. If you have just one XMLAGG in your statement, there's no problem, since the GROUP BY on the parent key will neatly collapse the child entries that are specified inside XMLAGG. However, when you specify more than one XMLAGG function inside the same SELECT, the query produces a Cartesian product internally, so in this case, you'll see repeating items inside each group returned by XMLAGG. The example you gave with there being only zero or one topics for a project does not demonstrate this problem, but if a project had two topics and three tags, you'd see each topic repeated three times, and each tag repeated twice. To prevent this, you'll need to relocate each XMLAGG to a subquery or a common table expression that produces a single XML fragment so you can safely reference it from the main query. Below is an example that pushes the XMLAGG down into common table expressions. It also gets rid of the need for XMLFOREST, since XMLAGG won't produce any results for an empty input set. WITH topicxml( projectid, xmlfragment ) AS ( SELECT topic.projectid, XMLAGG( XMLELEMENT( NAME "topic", topic.value ) ORDER BY topic.value) FROM mydb.topic topic GROUP BY topic.projectid ), tagxml ( projectid, xmlfragment ) AS ( SELECT projectid, XMLAGG( XMLELEMENT( NAME "tag", tag.value ) ORDER BY tag.value) FROM mydb.tag tag GROUP BY tag.projectid ) SELECT XMLSERIALIZE ( CONTENT XMLELEMENT( NAME "project", XMLATTRIBUTES( p.id AS "id" ), XMLELEMENT( NAME "title", p.title ), XMLELEMENT( NAME "description", p.description ), XMLCONCAT( topicxml.xmlfragment, tagxml.xmlfragment ) ) AS VARCHAR(2000) ) FROM mydb.project p LEFT OUTER JOIN topicxml ON topicxml.projectid = p.id LEFT OUTER JOIN tagxml ON tagxml.projectid = p.id ;
