[site]: crossvalidated
[post_id]: 407556
[parent_id]: 407548
[tags]: 
For image processing, the natural choice of model is a convolutional neural network. CNNs are fairy straightforward to implement in Keras, which you can install for Python or R (which will use Python under the hood). There are tutorials online about how to implement CNNs. This one looks good: https://towardsdatascience.com/building-a-convolutional-neural-network-cnn-in-keras-329fbbadc5f5 . I'll copy the most important code pieces here. This should give a feel for how to do it in Python. #create model model = Sequential() #add model layers model.add(Conv2D(64, kernel_size=3, activation=’relu’, input_shape=(28,28,1))) model.add(Conv2D(32, kernel_size=3, activation=’relu’)) model.add(Flatten()) model.add(Dense(10, activation=’softmax’)) #compile model using accuracy to measure model performance model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) #train the model model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=3) #predict first 4 images in the test set model.predict(X_test[:4]) #actual results for first 4 images in test set y_test[:4] The implementation in R will have different syntax, but it follows the same idea. This "sequential" model in Keras makes it pretty easy to tweak the neural network layers to your heart's content.
