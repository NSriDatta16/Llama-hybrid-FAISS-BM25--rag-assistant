[site]: stackoverflow
[post_id]: 3614484
[parent_id]: 3614418
[tags]: 
Quoting your code: // if user loads applet online conn = DriverManager.getConnection("jdbc:mysql://localhost:4464/jsfdan_mystikdan", "jsfdan_muser", "test"); An applet is a program running on the user's machine, where the browser is. Thus, localhost refers to the user's machine at this stage. Chances are that most users aren't running MySQL on their own machine, that even if they were, it wouldn't be the one your applet is after and that it would get out of the applet's sandboxed environment anyway. EDIT (after discussion in comments): From the discussions and the comments in the previous related questions, it looks like you're trying to connect directly to your MySQL server from an application (applet) distributed to clients that could be anywhere, which is usually the wrong approach. You were concerned about posting your username/password in your examples. That's only a minor problem compared with what could happen if you distributed your applet widely: anyone then could easily look at the traffic sent by your application to your MySQL server and get the username/password. Most MySQL servers are blocked from external access, mostly because they don't provide suitable access control on their own compared with the access requirements of the overall application. This is not always the case, but the access control on INSERT/SELECT/UPDATE operations on their own are often too crude to represent the functional purpose of the overall application. With most services that use a database, the user-management and access control is done at the application level, not at the database level. This is particularly the case when you're using a shared provider that creates a database and a user account for your entire application to use, even if you want multiple users. The typical workaround for this is do develop another service (typically a web-service) that your client will call, providing suitable authentication and usage context for the various operations you'd want the client to perform on the data. I'm not sure if your hosting service lets you run Java services, but cheaper hosting providers tend to let you run PHP, Perl and/or Python services, so you could write a service in one of those languages and have your applet be a client that talk to them. Explaining how to write web services is probably out of scope of this question/answer. In general, you'll probably come across 3 categories: REST-style web-services (it's an architectural style, guided by the notion of resources and representations), XML-RPC (often called "REST" by mistake, where you send fragments of XML to some web-page that will call a function/method and give you some results in return; you might be able to do the same with JSON) and SOAP (where you'll probably get more tools but might also be more bloated depending on what you're comfortable with). There have been on-going debates as to which is better, but it's up to you to investigate and choose what you think is better for your application. It will probably depend on what can be deployed on your host.
