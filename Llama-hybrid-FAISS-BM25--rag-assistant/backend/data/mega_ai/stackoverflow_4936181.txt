[site]: stackoverflow
[post_id]: 4936181
[parent_id]: 4935934
[tags]: 
Entity Framework and NHibernate are both what are called Object / Relational Mappers. They both generate a layer that bridges the gap between objects and databases (sometimes called Object Relational Impedance Mismatch ). I cannot recommend using an OR/M enough. Either one is good; NHibernate has a bit of an edge in security, but it does seem to have a steeper learning curve. I personally use Entity Framework, but it truly is just a matter of preference. Both of the frameworks have a provision for when you just can't get done what you need to get done with the tool, and you can call back in and execute a stored procedure directly, so you're safe in that regard. LINQ2SQL is a more database oriented technology, but it qualifies as an OR/M. I would skip straight to EF. EF was part of .Net 3.5 SP1, found here . Here's an example of some code to retrieve a customer from a database using EF: using (var ctx = new DBEntities()) { var employee = (from e in ctx.Employees where e.User.UserName == userName select e).FirstOrDefault(); } Another reason to use an OR/M, in my opinion, is that they tend to promote a design view of your code to be a first class artifact. What I mean by this is that you end up with a nice graphical view of the relationships between your entities (because the editor is drag and drop) that you won't abandon when you end up short on time. Here's MS's link on getting started: http://msdn.microsoft.com/en-us/library/bb386876.aspx . HTH.
