[site]: stackoverflow
[post_id]: 4361820
[parent_id]: 3488153
[tags]: 
I assume that by "seekg" you mean seekoff and seekpos . The straightforward way to implement members seekoff and seekpos of your COMStreambuf is to wrap the Seek method of the IStream interface. For example, something like this should work: // COMStreambuf.cpp COMStreambuf::pos_type COMStreambuf::seekoff(COMStreambuf::off_type off_, std::ios_base::seekdir way_, std::ios_base::openmode which_) { union { LARGE_INTEGER liMove; ULARGE_INTEGER uliMove; }; liMove.QuadPart = off_; DWORD dwOrigin = STREAM_SEEK_SET; if (way_ == std::ios_base::cur) { dwOrigin = STREAM_SEEK_CUR; } else if (way_ == std::ios_base::end) { dwOrigin = STREAM_SEEK_END; } else { assert(way_ == std::ios_base::beg); dwOrigin = STREAM_SEEK_SET; uliMove.QuadPart = off_; } ULARGE_INTEGER uliNewPosition; if (which_ & std::ios_base::in) { if (which_ & std::ios_base::out) return pos_type(off_type(-1)); HRESULT hres = streamIn->Seek(liMove, dwOrigin, &uliNewPosition); if (hres != S_OK) return pos_type(off_type(-1)); setg(eback(), egptr(), egptr()); } else if (which_ & std::ios_base::out) { HRESULT hres = streamOut->Seek(liMove, dwOrigin, &uliNewPosition); if (hres != S_OK) return pos_type(off_type(-1)); setp(pbase(), epptr(), epptr()); } else { return pos_type(off_type(-1)); } return pos_type(uliNewPosition.QuadPart); } COMStreambuf::pos_type COMStreambuf::seekpos(COMStreambuf::pos_type sp_, std::ios_base::openmode which_) { return seekoff(off_type(sp_), std::ios_base::beg, which_); } In this listing, after setting the position of streamIn I call: setg(eback(), egptr(), egptr()); After a seek, sputbackc or sungetc will operate on old data. You may want to consider whether this makes sense for your application and do something different.
