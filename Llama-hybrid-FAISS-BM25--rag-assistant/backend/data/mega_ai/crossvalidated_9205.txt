[site]: crossvalidated
[post_id]: 9205
[parent_id]: 9182
[tags]: 
You might have a look at the betadisper() function in the vegan package. The function implements the PERMDISP2 procedure (Anderson, 2006) for the analysis of multivariate homogeneity of group dispersions. An example using your data might be the following: require(vegan) distance F) Groups 3 223.28 74.427 0.3523 999 0.84 Residuals 5 1056.34 211.268 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Apple Avocado Banana Orange Apple 8.0000e-03 8.5600e-01 0.004 Avocado 9.2864e-31 7.9800e-01 0.008 Banana 6.2093e-01 5.6617e-01 0.797 Orange 1.5060e-31 4.0863e-27 5.6544e-01 Below I have inserted a plot of groups and distances to the group centroid [ plot(model )], and a boxplot of the distances to centroid for each group [ boxplot(model) ]. Hope this helps. References Anderson, M. J. (2006) Distance-based tests for homogeneity of multivariate dispersions. Biometrics 62(1): 245â€“253. Edit On a second thought I would recommend also a more descriptive approach using linear discriminant analysis (LDA) that could help not only to visualise the spread of objects around their group centroids, but also to find the features that contribute to this configuration. The ade4 package contains the versatile function discrimin() that does this as follows: require(ade4) discr Note that the LDA is based on a PCA (function dudi.pca() ) of the data so you will need to consider its properties when applying it to your task. The top left plot represents the coefficients of the linear discriminant functions on the first two axes of the DA. The "Cos(variates, canonical variates)" plot shows the covariances between the object properties projected on the first two axes. Then, on the bottom left is the eigenvalue screeplot demonstrating the contribution of each axis to the variation. The main plot, "Scores and Classes", shows the projections of the individuals on the plane defied by the axes of the DA. Groups are displayed by ellipses where the centers are the means and the ellipses show the variance within the objects. All plots are the result of the plot(discr) command. A randomisation test (and plot via plot(randtest.discrimin(discr)) ) of the eigenvalue significance is also available: randtest.discrimin(discr) Monte-Carlo test Call: randtest.discrimin(xtest = discr) Observation: 0.5074292 Based on 999 replicates Simulated p-value: 0.052 Alternative hypothesis: greater Std.Obs Expectation Variance 1.549410152 0.376074589 0.007187167
