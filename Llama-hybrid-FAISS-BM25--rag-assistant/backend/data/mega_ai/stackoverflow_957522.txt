[site]: stackoverflow
[post_id]: 957522
[parent_id]: 
[tags]: 
WPF Force rebind

I have an object that can't inherit DependencyObject OR use NotifyPropertyChanged, and I've binded it to quite a few controls, so when the properties change, I don't want to go to each control and change it's value on the code, so I'm thinking there must be a way to tell the XAML to "Rebind" all that it's bound to with one or two lines of code, instead of going: label1.Content = myObject.DontNotifyThis; label2.Content = myObject.DontNotifyThisEither; label3.Content = myObject.DontEvenThinkOfNotifyingThis; label4.Content = myObject.NotSoFastPal; So on, so forth... This is an oversimplified example: XAML: C#: using System.Windows; namespace StackOverflowTests { /// /// Interaction logic for Window1.xaml /// public partial class Window1 : Window { Weather weather = new Weather("Cloudy", "60F", "25%"); public Window1() { InitializeComponent(); this.DataContext = weather; } private void window1_Loaded(object sender, RoutedEventArgs e) { weather.Status = "Sunny"; weather.Temperature = "80F"; weather.Humidity = "3%"; } } class Weather { public string Status { get; set; } public string Temperature { get; set; } public string Humidity { get; set; } public Weather(string status, string temperature, string humidity) { this.Status = status; this.Temperature = temperature; this.Humidity = humidity; } } } I found a way to do it, but it's not elegant at all, and unfortunatelly, I can't just set the DataContext to a new instance of weather, it needs to be the SAME reference (that's why I set it to null so it changes): private void window1_Loaded(object sender, RoutedEventArgs e) { weather.Status = "Sunny"; weather.Temperature = "80F"; weather.Humidity = "3%"; // bad way to do it Weather w = (Weather)this.DataContext; this.DataContext = null; this.DataContext = w; } Thanks in advance!
