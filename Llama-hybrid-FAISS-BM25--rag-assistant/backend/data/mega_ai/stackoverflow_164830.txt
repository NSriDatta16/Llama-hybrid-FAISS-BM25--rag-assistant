[site]: stackoverflow
[post_id]: 164830
[parent_id]: 163796
[tags]: 
Here's an XSLT 2.0 method. Assuming that $docs contains a sequence of document nodes that you want to scan, you want to create one line for each element that appears in the documents. You can use to do that: ... Then you want to find out the stats for that element amongst the documents. First, find the documents have an element of that name in them: Second, you need a sequence of the number of elements of that name in each of the documents: And now you can do the calculations. Average, minimum and maximum can be calculated with the avg() , min() and max() functions. The percentage is simply the number of documents that contain the element divided by the total number of documents, formatted. Putting that together: * % &#xA; What I haven't done here is indented the lines according to the depth of the element. I've just ordered the elements alphabetically to give you statistics. Two reasons for that: first, it's significantly harder (like too involved to write here) to display the element statistics in some kind of structure that reflects how they appear in the documents, not least because different documents may have different structures. Second, in many markup languages, the precise structure of the documents can't be known (because, for example, sections can nest within sections to any depth). I hope it's useful none the less. UPDATE: Need the XSLT wrapper and some instructions for running XSLT? OK. First, get your hands on Saxon 9B . You'll need to put all the files you want to analyse in a directory. Saxon allows you to access all the files in that directory (or its subdirectories) using a collection using a special URI syntax . It's worth having a look at that syntax if you want to search recursively or filter the files that you're looking at by their filename. Now the full XSLT: * % &#xA; And to run it you would do something like: > java -jar path/to/saxon.jar -it:main -o:report.txt dir=file:///path/to/your/directory?select=*.xml This tells Saxon to start the process with the template named main , to set the dir parameter to file:///path/to/your/directory?select=*.xml and send the output to report.txt .
