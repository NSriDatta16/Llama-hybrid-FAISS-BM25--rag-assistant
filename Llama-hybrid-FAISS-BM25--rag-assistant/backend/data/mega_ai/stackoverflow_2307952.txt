[site]: stackoverflow
[post_id]: 2307952
[parent_id]: 2307933
[tags]: 
In your case, you need to be concerned about alignment whenever it might change the layout of your structure. There are two options to make your code more portable. First, most compilers have extended attributes or preprocessor directives that will allow you to pack the structure into minimum space. This option potentially misaligns some of the fields within the structure, which might reduce performance, but will guarantee that it is laid out the same on any machine you build it for. Check your compiler for its documentation about #pragma pack() . In GCC you can use __attribute__((__packed__)) . Second, you can add explicit padding to your structure. This option allows you to maintain the performance properties of the original structure, but will make it unambiguous about how the structure is laid out. For example: struct s { u_int8_t field1; u_int8_t pad0[3]; u_int16_t field2; u_int8_t pad1[2]; u_int32_t field3; };
