[site]: stackoverflow
[post_id]: 2759990
[parent_id]: 2759440
[tags]: 
Don't. You are looking for "the bottleneck", right? It's probably not in the function where you think it is. This is the method I rely on, for any language or OS. If the problem is in that function, it will tell you. If it is somewhere else, it will tell you. @downvoter: What's the problem? If you are concerned about speed of application startup, manually take samples during application startup. The alternative in a profiler is to run it over the whole time and then try to figure out which part of the timeline was the startup. And since much of the time is spent in user-wait, when you don't want samples, you put it in CPU-sampling mode. The trouble with that is, you don't see things like I/O time spent loading dlls, querying DNS, etc., which can be dominant during startup. Then there's the whole issue of presentation silliness like "hot path", where the true time-taker can easily hide . In case you're asking "How can I examine thousands of stack samples?" the answer is you don't need to . If the startup is noticeably slow, it is because it is spending some large fraction of its time doing something it doesn't need to do - some fraction like, say, 30%, to be conservative. That means you will see it, on average, once every 3.33 samples. Since you need to see it two or more times to know it is a problem, on average you need 6.67 samples. The bigger the problem is, the fewer samples you need. (If it's 90%, you only need 2/0.9 = 2.2 samples.) If you examine 20 samples, you will see any problem costing more than about 10%, and if you fix it, any smaller problems take a larger percent - they are amplified by the speedup ratio, so they are easier to find on the next go-around. Here's the math.
