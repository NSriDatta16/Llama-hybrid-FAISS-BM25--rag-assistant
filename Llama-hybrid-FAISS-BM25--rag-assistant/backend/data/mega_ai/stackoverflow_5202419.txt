[site]: stackoverflow
[post_id]: 5202419
[parent_id]: 5194604
[tags]: 
In general I tend to prefer XPath based solutions for their concision and versatility but, honestly, in your case, I don't think using XPath will bring a lot to your signature . Here is why: Code elegance Your code is nice and compact and it will not get any better with an XPath expression. Memory footprint Unless your input XML configuration file is huge (a kind of oxymoron) and the DOM parsing would entail a large memory footprint, for which there is no proof that using XPath would be a decisive cure, I would stick with DOM. Execution Speed On such a simple XML tree, execution speed should be comparable. If there would be a difference, it would probably be in TinyXml's advantage because of the collocation of the freq and level tags under a given node. Libraries and external references That's the decisive point. The leading XPath engine in the C++ world is XQilla . It supports XQuery (therefore both XPath 1.0 and 2.0) and is backed by Oracle because it's developed by the group responsible for Berkeley DB products (including precisely Berkeley DB XML â€“ which uses XQilla ). The problem for C++ developers wishing to use XQilla is that they have several alternatives use Xerces 2 and XQilla 2.1 litter your code with casts. use XQilla 2.2+ and use Xerces 3 (no casts needed here) use TinyXPath nicely integrated with TinyXml but for which there however are a number of limitations (no support for namespaces for instance) mix Xerces and tinyXml In summary, in your case switching to XPath just for the sake of it, would bring little benefit if any. Yet, XPath is a very powerful tool in today's developer toolbox and no one can ignore it. If you just wish to practice on a simple example, yours is as good as any. Then, I'd keep in mind the points above and probably use TinyXPath anyway.
