[site]: stackoverflow
[post_id]: 3968943
[parent_id]: 3968913
[tags]: 
It seems from your code snippet that getSameInstance() returns a SubClass . In this case the simplest solution is SubClass objectB = getSameInstance(); objectB.functionOne(); objectB.functionOther(); No casts, no worries :-) As others have rightly noted, the primary concern should be code readability and simplicity, not performance. Optimize only when you know that you need to, and have proven (using a profiler) where the bottleneck is within your code. Even in this case, micro-optimization is rarely useful in Java. An additional note: calling the same method twice can be problematic if the method is heavy (in which case you are effectively making your code slower, not faster), or has side effects (in which case the behaviour of your program may noticeably change). And btw in this line of your code snippet SuperClass objectA = (SuperClass) getSameInstance(); there is absolutely no need to upcast the returned value to SuperClass - a superclass reference can always point to a subclass object. (I guess that such an upcast would be omitted by the compiler anyway, so it makes no difference in the bytecode.) Update You still haven't published the declaration of the method I asked for. But from your explanation I presume it should look something like public Shape getSomeRandomShape(); is this correct? This would btw mean that your 2nd original code snippet (with the getSameInstance() call) is incorrect - the casts should be the opposite way. You managed to confuse me with it, so you got a confusing answer :-) Also in the latest examples, you don't need to cast the returned value to a (Shape) , since it is already a Shape . The cast is just cluttering your code. Similarly, the many casts in the 2nd example of your UPDATE 2 are making the code hard to read. I would prefer the first version, with two references ( not pointers btw - Java has no pointers). And I care only about code readability here - as others have already noted, you should really, really not waste your time thinking about the cost of casts . Just focus on making your code as simple and readable as possible . You would most likely never ever going to notice the tiniest bit of difference between the performance of the two code snippets you show above (unless maybe if they are executed in a tight loop millions of times - but then, I guess, the JIT would optimize the casts away anyway). However, you will notice the difference it takes in time to understand one code snippet versus the other, for someone who is new to this code - or someone who has forgotten the details already, which could be you in about 6 months.
