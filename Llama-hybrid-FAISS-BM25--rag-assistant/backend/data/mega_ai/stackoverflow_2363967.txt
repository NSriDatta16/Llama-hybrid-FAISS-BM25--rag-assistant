[site]: stackoverflow
[post_id]: 2363967
[parent_id]: 2363801
[tags]: 
If there are a very large number of such classes, all having that same pattern, and you frequently have to update their definitions, consider using code generation to automatically spit out the C# source files for all the classes, so that you don't have to manually maintain them. The input to the code generator would just be a simple text file format that you can easily parse, stating the names and types of the properties needed in each class. If there are just a small number of them, or the definitions change very infrequently during your development process, then it's unlikely to be worth the effort, in which case you may as well maintain them by hand. Update: This is probably way over the top for a simple example, but it was fun to figure out! In Visual Studio 2008, if you add a file called CodeGen.tt to your project and then paste this stuff into it, you'll have the makings of a code generation system: notBlank = str => str.Trim() != string.Empty; var classes = src.Split(';').Where(notBlank).Select(c => c.Split(':')) .Select(c => new { Name = c.First().Trim(), Properties = c.Skip(1).First().Split(',').Select(p => p.Split(' ').Where(notBlank)) .Select(p => new { Type = p.First(), Name = p.Skip(1).First() }) }); #> // Do not edit this file by hand! It is auto-generated. namespace Generated { class { public bool IsDirty { get; private set; } private _storage ; public { get { return _storage ; } set { IsDirty = true; _storage = value; } } } } There's a simple string literal called src in which you declare the classes you need, in a simple format: Foo: string Prop1, int Prop2; Bar: string FirstName, string LastName, int Age; So you can easily add hundreds of similar declarations. Whenever you save your changes, Visual Studio will execute the template and produce CodeGen.cs as output, which contains the C# source for the classes, complete with the IsDirty logic. You can change the template of what is produced by altering the last section, where it loops through the model and produces the code. If you've used ASP.NET, it's similar to that, except generating C# source instead of HTML.
