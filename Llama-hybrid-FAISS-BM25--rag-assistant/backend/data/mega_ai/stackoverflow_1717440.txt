[site]: stackoverflow
[post_id]: 1717440
[parent_id]: 
[tags]: 
Another neural network knight's tour conundrum

I've done my best to make a simple java implementation of the neural network knight's tour finder but I'm completely stumped as to why it fails to work.. there are 6 classes, 3 for the GUI which im pretty sure works fine, and 3 to deal with the actual logic etc. If you are wondering, this is inspired by Yacoby's python offering He had a problem with the implementation also, although I don't think I'm making the same mistake.. I appreciate its not super coding, but any suggestions gratefully received Neuron class: package model; import java.util.Random; public class Neuron { boolean oldActive=true,active=true; //ie part of the solution int state=0,previousState=0; public Square s1,s2; public Neuron(Square s1,Square s2){ this.s1=s1;this.s2=s2; //status of the neuron is initialised randomly oldActive=active= (new Random()).nextInt(2)==1?true:false; } public int activeNeighbours(){ //discount this neuron if it is active int s=0;if(isActive()){s=-2;} for(Object o:s1.neurons) if(((Neuron)o).isActive())s++; for(Object o:s2.neurons) if(((Neuron)o).isActive())s++; return s; } public boolean hasChanged(){ return oldActive != active||previousState != state; } public boolean isActive(){return active;} public void updateState(){ previousState=state; state+=2-activeNeighbours(); } public void updateOutput(){ oldActive=active; if (state>3) active=true; else if(state Square class: package model; import java.util.Vector; public class Square { Vector neurons=new Vector();//neurons which connect to this square public int col; public int row; public Square(int row, int col){ this.col=col; this.row=row; } /** * creates a neuron which links this square with the square s, * then tells both squares about it, * also returns the neuron for inclusion in the global list. * * @param s * @return neuron n, or null */ public Neuron link(Square s){ for(Object o: neurons) //discounts the link if it has already been created if (((Neuron)o).s1==s ||((Neuron)o).s2==s)return null; Neuron n=new Neuron(this,s); neurons.add(n); s.neurons.add(n); return n; } } Control class: package model; import java.util.Vector; import gui.Board; public class Control { Board b; //the graphic board Vector neurons=new Vector(); //all 168 neurons Square[][] squares=new Square[8][8]; int[][] moves={ {-2,-2, 2, 2,-1,-1, 1, 1}, { 1,-1, 1,-1, 2,-2, 2,-2}}; public Control(Board b){ this.b=b; //create 64 squares for(int row=0;row 0){ for(Object o:neurons)((Neuron)o).updateState();//update all the states for(Object o:neurons)((Neuron)o).updateOutput();//then all the outputs counter--; if(isStable())break; } dl(); //draw the neurons when the solution is found/attempt abandoned } /** * draws the lines (active neurons) on the graphic display */ private void dl(){ b.clear(); for(Object o:neurons) b.drawLine((Neuron)o); b.repaint(); } /** * Identify all of the squares legal to move to from this one - link with a neuron, * then add the neuron to the collection * * @param s */ private void findMoves(Square s){ for (int i=0;i =0 && row =0 && col the GUI classes: - Board class: package gui; import java.util.Vector; import javax.swing.JFrame; import model.Neuron; /** * sets up the graphic representation of the chess board, and draws on the neurons as required * @param x * @param y * @param squareSize */ public class Board extends JFrame { Vector lines=new Vector(); int squareSize; public Board(int x, int y,int squareSize){ //initialize dimensions etc super("there."); setDefaultCloseOperation(EXIT_ON_CLOSE); setBounds(x,y,squareSize*8+8,squareSize*8+30); this.setLayout(null); this.setVisible(true); this.squareSize=squareSize; //draw the squares drawSquares(); repaint(); } private void drawSquares(){ for(int i=0;i } GuiSquare class: package gui; import java.awt.*; public class GuiSquare extends Component{ int row,col; int x; int y; int size; public GuiSquare(int row,int col,int size){ this.row=row;this.col=col;this.size=size; y=row*size; x=col*size; setBounds(x,y,size,size); setBackground((row+col)%2==0?Color.white:Color.black); } public void paint(Graphics g){ g.setColor(getBackground()); g.fillRect(0,0, size-1, size-1); g.setColor(Color.gray); g.drawString(""+((row*8)+col), size/2, size/2); } } Line class: package gui; import java.awt.*; public class Line extends Component{ int x1,y1,x2,y2; int x,y,w,h; public Line(int a,int b, int squareSize){ setBackground(Color.blue); x1=((a%8)*squareSize)+(squareSize/2); y1=((a/8)*squareSize)+(squareSize/2); x2=((b%8)*squareSize)+(squareSize/2); y2=((b/8)*squareSize)+(squareSize/2); if(x1
