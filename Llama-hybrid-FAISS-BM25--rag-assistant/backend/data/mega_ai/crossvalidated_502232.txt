[site]: crossvalidated
[post_id]: 502232
[parent_id]: 
[tags]: 
How many combinations and how to find a (standard?) distribution that matches?

Take a string ABCDE and insert dots in it according to these rules: First and last character must not be a dot. 0-4 dots A dot may not follon upon another dot. In other words, a dot must always be preceded by a letter. Valid strings: ABCDE AB.CD.E A.B.C.D.E Invalid strings: .ABCDE ABC..DE With 0 dots, only one combination is possible (ABCDE), with 1 dot four combinations are possible (A.BCDE, AB.CDE and so on). With 2 dots I think there are 6 possible combinations: A.B.CDE A.BC.DE A.BCD.E AB.C.DE AB.CD.E ABC.D.E 3 dots: A.B.C.DE A.B.CD.E A.BC.D.E AB.C.D.E 4 dots - 1 combination. If I made this right, the total number of combination with a 5 character long string to start with is 1 + 4 + 6 + 4 + 1 = 16 (for a 4 character string it is 8, 3 character -> 4). It seems the formula to calculate the number of possible combinations is 2^(n-1) where n is the number of characters in the initial string. What kind of distribution is this? I want to create random numbers distributed like this (that is, if I draw 16 numbers between 0 and 4, on average 6 of them must be 2, 4 of them 1, and 4 of them 3 and so on) in Java. And, if you have a longer string (the actual string I work with is 16 letters), how do you calculate the number of combinations you get if you, e.g., insert 5 dots into these 16 letters according to the rules above?
