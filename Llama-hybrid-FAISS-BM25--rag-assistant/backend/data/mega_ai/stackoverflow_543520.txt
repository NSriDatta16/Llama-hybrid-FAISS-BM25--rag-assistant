[site]: stackoverflow
[post_id]: 543520
[parent_id]: 542620
[tags]: 
If you "add a field to an interface", it stops being an interface and becomes a base class. That might be bad or it might not be, depending on your preferences. The pattern of using an interface and avoiding base classes with member variable is quite fine. It is especially useful in situations where you pass an interface to another part of a system. But without a specific context, there is no absolute rule saying "thou must use an interface as one's base class". Using a private member variable in your base class may be a fine first approximation to the functionality you are looking for. Another solution, using a private function defined in the derived class, is more verbose and by that fact alone may make your code harder to understand (though, if everyone in your organization is doing this, that would not be an issue). It depends on what you would like to accomplish. It also depends on what standard is used in your organization, in your application or even on what language you are using (if you use a language with getters and setters, you can more easily replace member variables at a later time, for example). Whether a member variable is static or not is a separate issue. You should make a member static if and only it doesn't change over the life of the class. "Top Speed" sounds like it fit this criteria. Some languages, like c++, have the concept of "static functions", whose results don't change. I suppose you could use this as well but I find this added concept too confusing to be worthwhile.
