[site]: stackoverflow
[post_id]: 5606986
[parent_id]: 5606862
[tags]: 
Well, I think the answer is more qualified than it would seem. Most coding practices suggest keeping code blocks small, so from that angle, it really comes down to "how big is the entire block"? But I would consider this according to intent of the code. For example: foreach (widgets) if (widget is red) put in left bin if (widget is blue) put in center bin if (widget is green) put in right bin vs: if (making widgets red) foreach (widgets) put in left bin if (making widgets blue) foreach (widgets) put in center bin if (making widgets green) foreach (widgets) put in right bin Each structure is telling a different story about your intent. In the first case, we are iterating over widgets and making decisions on each, while in the latter case we're iterating over decisions in an unrolled loop and making changes to the widgets. This of course makes more sense for else-if cases, but in general, if you can make a statement about a block of code easily (eg, in this loop, I sort widgets by color) without having to write a paragraph, it's the most understandable code, and that's the goal of best practices to begin with. Of course, performance is also an issue. I guess performance and best practices are uneasy friends. If you're hitting the DB for the iteration to get each row, or if the iteration is over thousands of entries, it's sometimes necessary to write less-intent-oriented code that reduces the slowest action to a minimum. It's not the first consideration, but writing efficient code requires one to look at things from all the angles and make compromises, so the rules are not so hard and fast.
