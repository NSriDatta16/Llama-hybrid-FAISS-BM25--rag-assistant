[site]: stackoverflow
[post_id]: 1967320
[parent_id]: 1205577
[tags]: 
My goal is no untested code revealed by rcov and heckle. When you get all the coverage you can get with rcov, then you can run the code through heckle. Heckle modifies your code and shows you which modifications were not caught by tests. rspec knows about heckle. After installing the heckle gem: "spec foo_spec.rb -H Foo". Oh, and if you get a bizarre error, install version 1.2.2 of ruby2ruby instead of 1.2.4. Here's heckle complaining about a function I thought I had fully specified: The following mutations didn't cause test failures: --- original +++ mutation def model_matches?(substring) - s = substring.gsub(/\./, ".") + s = substring.gsub(/\033!\032\002l\}\?V\010d\}\r\-\fyg,a\*jFT\003_"ga\016\020ufN\0066/, ".") s = substring.gsub(/\*/, ".*") s = "^#{s}$" Regexp.new(s, "i").=~(@model) end --- original +++ mutation def model_matches?(substring) - s = substring.gsub(/\./, ".") + s = substring.gsub(/\./, "\023GA3w+h-#z$?I;a\"k0n^r$\005io#l\023H1M{\034m") s = substring.gsub(/\*/, ".*") s = "^#{s}$" Regexp.new(s, "i").=~(@model) end --- original +++ mutation def model_matches?(substring) - s = substring.gsub(/\./, ".") + s = nil s = substring.gsub(/\*/, ".*") s = "^#{s}$" Regexp.new(s, "i").=~(@model) end --- original +++ mutation def model_matches?(substring) s = substring.gsub(/\./, ".") s = substring.gsub(/\*/, ".*") s = "^#{s}$" - Regexp.new(s, "i").=~(@model) + Regexp.new(s, "v\022").=~(@model) end How cool is that? The only things I've found that are truly difficult to get full test coverage for are tests involving concurrency, esp. race conditions. Trying to prove that a mutex or a critical section must be in place can be difficult. Sometimes you can do it. Sometimes, you just have to shrug your shoulders, put in the line of code you don't know how to test, and move on.
