[site]: stackoverflow
[post_id]: 3660058
[parent_id]: 
[tags]: 
Merge two STL vectors with an alternation pattern

I have two STL vectors A and B and need to merge them into a third one, where the elements should be ordered in a way, that every nth element in the output vector should be of vector B. My current code looks something like this: std::vector a(10, 4); std::vector b(10, 8); std::vector c; static const std::size_t STEP(3); std::vector ::const_iterator bIt = b.begin(); for(std::vector ::const_iterator aIt = a.begin(); aIt != a.end(); ++aIt) { c.push_back(*aIt); if((c.size() + 1) % STEP == 0) { c.push_back(*bIt); ++bIt; //assume b is large enough } } The vector c now looks like: 4 4 8 4 4 8 ... This works fine, but I'm curious if there isn't a more elegant solution. Is there any way use a STL algorithm instead of my hand-written loops?
