[site]: stackoverflow
[post_id]: 4111249
[parent_id]: 4104736
[tags]: 
check out Thibault Imbert's SMTP Mailer . the download (latest version 0.9) includes source files, a library .swc and a sample application for Flash (with frame script). Update here's the frame script that is included with the 0.9 release of SMTP Mailer: import org.bytearray.smtp.mailer.SMTPMailer; import org.bytearray.smtp.encoding.JPEGEncoder; import org.bytearray.smtp.encoding.PNGEnc; import org.bytearray.smtp.events.SMTPEvent; import flash.utils.ByteArray; import flash.display.BitmapData; import flash.display.Bitmap; import flash.events.*; // create the socket connection to any SMTP socket // use your ISP SMTP var myMailer:SMTPMailer = new SMTPMailer (smtp_txt.text, 25); // register events // event dispatched when mail is successfully sent myMailer.addEventListener(SMTPEvent.MAIL_SENT, onMailSent); // event dispatched when mail could not be sent myMailer.addEventListener(SMTPEvent.MAIL_ERROR, onMailError); // event dispatched when SMTPMailer successfully connected to the SMTP server myMailer.addEventListener(SMTPEvent.CONNECTED, onConnected); // event dispatched when SMTP server disconnected the client for different reasons myMailer.addEventListener(SMTPEvent.DISCONNECTED, onDisconnected); // event dispatched when the client has authenticated successfully myMailer.addEventListener(SMTPEvent.AUTHENTICATED, onAuthSuccess); // event dispatched when the client could not authenticate myMailer.addEventListener(SMTPEvent.BAD_SEQUENCE, onAuthFailed); // take the snapshot var myBitmap:BitmapData = new BitmapData ( stage.stageWidth, stage.stageHeight ); // encode as JPEG with quality 100 var myEncoder = new JPEGEncoder( 100 ); send_btn.addEventListener (MouseEvent.CLICK, onClick); message_txt.text = " Picture file attached ! :) "; function onClick ( pEvt:MouseEvent ) { // replace this by any DisplayObject myBitmap.draw ( this ); var myCapStream:ByteArray = myEncoder.encode ( myBitmap ); // sends HTML email //myMailer.sendHTMLMail ( from_txt.text, to_txt.text, subject_txt.text, " Picture from HTML :) "); // send HTML email with picture file attached myMailer.sendAttachedMail ( from_txt.text, to_txt.text, subject_txt.text, message_txt.text, myCapStream, "image.jpg"); } function onAuthFailed ( pEvt:SMTPEvent ):void { status_txt.htmlText = "Authentication Error"; } function onAuthSuccess ( pEvt:SMTPEvent ):void { status_txt.htmlText = "Authentication OK !"; } function onConnected ( pEvt:SMTPEvent ):void { status_txt.htmlText = "Connected : \n\n" + pEvt.result.message; status_txt.htmlText += "Code : \n\n" + pEvt.result.code; } function onMailSent ( pEvt:SMTPEvent ) { // when data available, read it status_txt.htmlText = "Mail sent :\n\n" + pEvt.result.message; status_txt.htmlText += "Code : \n\n" + pEvt.result.code; } function onMailError ( pEvt:SMTPEvent ):void { status_txt.htmlText = "Error :\n\n" + pEvt.result.message; status_txt.htmlText += "Code : \n\n" + pEvt.result.code; } function onDisconnected ( pEvt:SMTPEvent ):void { status_txt.htmlText = "User disconnected :\n\n" + pEvt.result.message; status_txt.htmlText += "Code : \n\n" + pEvt.result.code; } function socketErrorHandler ( pEvt:IOErrorEvent ) { // when data available, read it status_txt.htmlText = "Connection error !"; }
