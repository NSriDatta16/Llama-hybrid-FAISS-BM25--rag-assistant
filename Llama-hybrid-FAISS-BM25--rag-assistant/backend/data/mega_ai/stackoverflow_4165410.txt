[site]: stackoverflow
[post_id]: 4165410
[parent_id]: 4165201
[tags]: 
The way described in the blog is actually very simple and elegant. And you can reuse the controller method to get the response in JSON, XML etc... What you do is you simply annotate the method with @ResponseBody and include a JSON jar in your project. I myself use maven and do this by adding this dependency: org.codehaus.jackson jackson-mapper-asl 1.5.4 The beauty in this is then that the controller method can return a POJO (preferrably a DTO) and the mapper will map this to JSON, as long as the request to the server has the right headers with accept-encoding: application/json (or whatever it was). It even translates incoming requests with the right content-type to the dto type in the method signature. Beautiful! Example of a method: @RequestMapping(value ="/service/status", method = RequestMethod.GET) public @ResponseBody Status getServiceStatus() { return new Status("Online", 60, "Nothing to report"); } Using this approach you can reuse your methods (I use this for a REST api) for JSON, Web Services etc...
