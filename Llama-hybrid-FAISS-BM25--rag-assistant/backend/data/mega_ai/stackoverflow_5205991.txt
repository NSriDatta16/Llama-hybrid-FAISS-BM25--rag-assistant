[site]: stackoverflow
[post_id]: 5205991
[parent_id]: 
[tags]: 
What are the best practices for combining analyzers in Lucene?

I have a situation where I'm using a StandardAnalyzer in Lucene to index text strings as follows: public void indexText(String suffix, boolean includeStopWords) { StandardAnalyzer analyzer = null; if (includeStopWords) { analyzer = new StandardAnalyzer(Version.LUCENE_30); } else { // Get Stop_Words to exclude them. Set stopWords = (Set ) Stop_Word_Listener.getStopWords(); analyzer = new StandardAnalyzer(Version.LUCENE_30, stopWords); } try { // Index text. Directory index = new RAMDirectory(); IndexWriter w = new IndexWriter(index, analyzer, true, IndexWriter.MaxFieldLength.UNLIMITED); this.addTextToIndex(w, this.getTextToIndex()); w.close(); // Read index. IndexReader ir = IndexReader.open(index); Text_TermVectorMapper ttvm = new Text_TermVectorMapper(); int docId = 0; ir.getTermFreqVector(docId, PropertiesFile.getProperty(text), ttvm); // Set output. this.setWordFrequencies(ttvm.getWordFrequencies()); w.close(); } catch(Exception ex) { logger.error("Error message\n", ex); } } private void addTextToIndex(IndexWriter w, String value) throws IOException { Document doc = new Document(); doc.add(new Field(text), value, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES)); w.addDocument(doc); } Which works perfectly well but I would like to combine this with stemming using a SnowballAnalyzer as well. This class also has two instance variables shown in a constructor below: public Text_Indexer(String textToIndex) { this.textToIndex = textToIndex; this.wordFrequencies = new HashMap (); } Can anyone tell me how best to achieve this with the code above? Thanks Mr Morgan.
