[site]: stackoverflow
[post_id]: 3696061
[parent_id]: 3695832
[tags]: 
I'm expecting the value '15-JUL-1980' to be inserted for each row IF I DO NOT set its value. Actually, the creationTime will never be part of the SQL INSERT statement even if you set a value because of the insertable = false . But its not working as expected. Am I doing anything wrong here? What is not working exactly ? Can you show the DDL script for the table? What DML INSERT statement is performed exactly? Does Oracle set the default appropriately? Don't you get it back in the entity after the insert? When does it fail? Just in case, aren't you missing a Temporal annotation on the creationTime ? According to the JPA 1.0 spec: 9.1.20 Temporal Annotation The Temporal annotation must be specified for persistent fields or properties of type java.util.Date and java.util.Calendar . It may only be specified for fields or properties of these types. I would add a @Temporal(TemporalType.DATE) . Not sure this will solve the issue though but answering the above questions might help to diagnose the issue. I want Hibernate to set the default value when ever I'm trying to insert. The table i've shown is a dummy table which I created for testing/learnig purpose. The Original table is a legacy one and it does not have the 'DEFAULT' attribute set. Sorry about the confusion. The columnDefinition element of the Column annotation is used to specify the SQL fragment that is used when generating the DDL for the column , that's all. If you don't use the JPA provider to generate the DDL and if your table doesn't have any DEFAULT defined, nothing will happen. So in your case, I would probably use a lifecyle callback and set the date if null during PrePersist : @Entity public class Account { ... @PrePersist protected void setCreationDateIfRequired() { if (getCreationDate() == null) { setCreationDate(...); } } } Reference JPA 1.0 Specification Section 3.5.1 "Lifecycle Callback Methods"
