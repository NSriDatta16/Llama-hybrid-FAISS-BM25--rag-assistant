[site]: stackoverflow
[post_id]: 845447
[parent_id]: 
[tags]: 
Winsock uncontrollably spawns several, persistent threads

I'm designing a networking framework which uses WSAEventSelect for asynchronous operations. I spawn one thread for every 64th socket due to the max 64 events per thread limitation, and everything works as expected except for one thing: Threads keep getting spawned uncontrollably by Winsock during connect and disconnect, threads that won't go away. With the current design of the framework, two threads should be running when only a few sockets are active. And as expected, two threads are running in total. However, when I connect with a few sockets (1-5 sockets), an additional 3 threads are spawn which persist until I close the application. Also, when I lose connection on any of the sockets, 2 more threads are spawned (also persisting until closure). That's 7 threads in total, 5 of which I have no idea what they are there for. If they are required by Winsock for connecting or whatever and then disappeared, that would be fine. But it bothers me that they persist until I close my application. Is there anyone who could shed some light on this? Possibly a solution to avoid these threads or force them to close when no connections are active? (Application is written in C++ with Win32 and Winsock 2.2) Information from Process Explorer: Expected threads: MyApp.exe!WinMainCRTStartup MyApp.exe!Netfw::NetworkThread::ThreadProc Unexpected threads: ntdll.dll!RtlpUnWaitCriticalSection+0x2dc mswsock.dll+0x7426 ntdll.dll!RtlGetCurrentPeb+0x155 ntdll.dll!RtlGetCurrentPeb+0x155 ntdll.dll!RtlGetCurrentPeb+0x155 All of the unexpected threads have call stacks with calls to functions such as ntkrnlpa.exe!IoSetCompletionRoutineEx+0x46e which probably means it is a part of the notification mechanism.
