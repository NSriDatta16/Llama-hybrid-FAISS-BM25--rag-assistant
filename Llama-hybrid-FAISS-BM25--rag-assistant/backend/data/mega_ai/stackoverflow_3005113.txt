[site]: stackoverflow
[post_id]: 3005113
[parent_id]: 2844397
[tags]: 
If you want to make sure the label fits in the rectangle both width and height wise you can try different font size on the label to see if one will fit. This snippet starts at 300 pt and tries to fit the label in the targeted rectangle by reducing the font size. - (void) sizeLabel: (UILabel *) label toRect: (CGRect) labelRect { // Set the frame of the label to the targeted rectangle label.frame = labelRect; // Try all font sizes from largest to smallest font size int fontSize = 300; int minFontSize = 5; // Fit label width wize CGSize constraintSize = CGSizeMake(label.frame.size.width, MAXFLOAT); do { // Set current font size label.font = [UIFont fontWithName:label.font.fontName size:fontSize]; // Find label size for current font size CGRect textRect = [[label text] boundingRectWithSize:constraintSize options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName: label.font} context:nil]; CGSize labelSize = textRect.size; // Done, if created label is within target size if( labelSize.height minFontSize); } I think the above explains what goes on. A faster implementation could use caching and argarcians binary search as follows + (CGFloat) fontSizeForString: (NSString*) s inRect: (CGRect) labelRect { // Cache repeat queries static NSMutableDictionary* mutableDict = nil; static dispatch_once_t onceToken; dispatch_once(&onceToken, ^{ mutableDict = [NSMutableDictionary dictionary]; }); NSString* key = [NSString stringWithFormat:@"%@_%d_%d", s, (int) labelRect.size.width, (int) labelRect.size.height]; NSNumber* value = [mutableDict objectForKey:key]; if (value) return value.doubleValue; // Set the frame of the label to the targeted rectangle UILabel* label = [[UILabel alloc] init]; label.text = s; label.frame = labelRect; // Hopefully between 5 and 300 CGFloat theSize = (CGFloat) [self binarySearchForFontSizeForLabel:label withMinFontSize:5 withMaxFontSize:300 withSize:label.frame.size]; [mutableDict setObject:@(theSize) forKey:key]; return theSize; } + (NSInteger)binarySearchForFontSizeForLabel:(UILabel *)label withMinFontSize:(NSInteger)minFontSize withMaxFontSize:(NSInteger)maxFontSize withSize:(CGSize)size { // If the sizes are incorrect, return 0, or error, or an assertion. if (maxFontSize = (size.height + 10) && labelSize.width >= (size.width + 10) && labelSize.height size.height || labelSize.width > size.width) { return [self binarySearchForFontSizeForLabel:label withMinFontSize:minFontSize withMaxFontSize:fontSize - 1 withSize:size]; } else { return [self binarySearchForFontSizeForLabel:label withMinFontSize:fontSize + 1 withMaxFontSize:maxFontSize withSize:size]; } }
