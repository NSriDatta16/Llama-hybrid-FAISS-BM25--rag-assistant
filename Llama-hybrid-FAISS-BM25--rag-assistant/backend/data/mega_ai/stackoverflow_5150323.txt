[site]: stackoverflow
[post_id]: 5150323
[parent_id]: 5149567
[tags]: 
If you're worried about incurring the overhead of loading all the Person objects then maybe don't load them until you actually need the data - such as via the Lazy Load approach. If you needed to populate a list of "People" but didn't want to bring back ALL their data - only the stuff needed for the list (say ID, First and last name) then do only that - maybe using the Person object isn't the right way to go as it's too heavy? What I tend to do is have a concept in mind (like person) and have two classes that represent them: - A lightweight class designed for lists, etc, typically read-only. - A "full featured" object for when performing operations on a "Person". Architecturally there's nothing wrong with what you're doing but it's strictly OO based - its not concerned with implications of data retrieval in terms of physical limitations that might be placed on you by the environment the software will actually run in. basically the approach you have is great but is based on a "per class" approach rather than a set-based one.
