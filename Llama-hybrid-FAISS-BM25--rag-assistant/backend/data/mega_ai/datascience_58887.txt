[site]: datascience
[post_id]: 58887
[parent_id]: 38604
[tags]: 
I think your architecture here is too naive. However, I was able to reproduce same low accuracy with a good CNN architecture i.e. my model was using softmax instead of sigmoid for MNIST dataset. model = models.Sequential() model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape= (28,28,1))) model.add(layers.MaxPooling2D((2,2))) model.add(layers.Conv2D(64, (3,3), activation='relu')) model.add(layers.MaxPooling2D((2,2))) model.add(layers.Conv2D(64, (3,3), activation='relu')) #Flaten the 3D conv-net to 1D for the Dense layers model.add(layers.Flatten()) model.add(layers.Dense(64, activation='relu')) model.add(layers.Dense(10, activation='softmax'))` Even then, I was getting a very low accuracy. However, region for my low accuracy was not architecture of CNN. Rather the shape of X i.e. input array. In your case shape of X_train and X_test. X_train = X_train.reshape(-1,28,28,1) X_train = X_train.reshape(-1,28,28,1) Upon, reshaping the train and test array. My accuracy shot to 99+. Please try reshaping your input array along with better architecture.
