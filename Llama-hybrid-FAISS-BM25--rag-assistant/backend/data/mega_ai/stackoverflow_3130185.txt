[site]: stackoverflow
[post_id]: 3130185
[parent_id]: 3130104
[tags]: 
In my opinion, C++ as a language is so complex that understanding of it is still evolving. I'm still discovering new programming techniques. And C is no longer a good introduction to C++. In fact, becoming too steeped in C will teach you bad C++ habits and will tend to blind you to some of the really useful things in C++. For example, in C++, I consider pointers to be more important than in Java, but not nearly so much as in C. There is no magic book you can read or formula you can follow to learn to think in C++. You have to practice with the concepts. Write your own programs that use them, even if they are just toys. Here is my personal list of important C++ ideas that you should practice with and grow used to using: Using swap (and in C++0x the move constructor and assignment operator) to write code with a strong exception guarantee. Template metaprogramming (templates are basically a functional language inside of C++ who's output is a C++ program). The RAII idiom (RAII stands for resource acquisition is initialization) - this is something in C++ that is fundamentally different from Java, and very important to understand. And, related to RAII, the concept that objects of non-primitive types are routinely created without using new . You create objects directly on the stack or refer to them by inclusion rather than by reference. This is a huge, but subtle difference from Java. Iterators - what the non-Javaesque use of pointers has turned into for the most part And really, pointers that aren't used as iterators are just the same as variables of non-primitive types (i.e. stuff derived from Object ) in Java, except for the lack of garbage collection.
