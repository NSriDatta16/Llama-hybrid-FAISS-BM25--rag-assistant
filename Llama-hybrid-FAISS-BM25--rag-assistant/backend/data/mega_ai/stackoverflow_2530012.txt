[site]: stackoverflow
[post_id]: 2530012
[parent_id]: 2529441
[tags]: 
Lets take a look at example advanced diff from git history (in commit 1088261f in git.git repository ): diff --git a/builtin-http-fetch.c b/http-fetch.c similarity index 95% rename from builtin-http-fetch.c rename to http-fetch.c index f3e63d7..e8f44ba 100644 --- a/builtin-http-fetch.c +++ b/http-fetch.c @@ -1,8 +1,9 @@ #include "cache.h" #include "walker.h" -int cmd_http_fetch(int argc, const char **argv, const char *prefix) +int main(int argc, const char **argv) { + const char *prefix; struct walker *walker; int commits_on_stdin = 0; int commits; @@ -18,6 +19,8 @@ int cmd_http_fetch(int argc, const char **argv, const char *prefix) int get_verbosely = 0; int get_recover = 0; + prefix = setup_git_directory(); + git_config(git_default_config, NULL); while (arg Lets analyze this patch line by line. The first line diff --git a/builtin-http-fetch.c b/http-fetch.c is a "git diff" header in the form diff --git a/file1 b/file2 . The a/ and b/ filenames are the same unless rename/copy is involved (like in our case). The --git is to mean that diff is in the "git" diff format. Next are one or more extended header lines. The first three similarity index 95% rename from builtin-http-fetch.c rename to http-fetch.c tell us that the file was renamed from builtin-http-fetch.c to http-fetch.c and that those two files are 95% identical (which was used to detect this rename). The last line in extended diff header, which is index f3e63d7..e8f44ba 100644 tell us about mode of given file ( 100644 means that it is ordinary file and not e.g. symlink, and that it doesn't have executable permission bit), and about shortened hash of preimage (the version of file before given change) and postimage (the version of file after change). This line is used by git am --3way to try to do a 3-way merge if patch cannot be applied itself. Next is two-line unified diff header --- a/builtin-http-fetch.c +++ b/http-fetch.c Compared to diff -U result it doesn't have from-file-modification-time nor to-file-modification-time after source (preimage) and destination (postimage) file names. If file was created the source is /dev/null ; if file was deleted, the target is /dev/null . If you set diff.mnemonicPrefix configuration variable to true, in place of a/ and b/ prefixes in this two-line header you can have instead c/ , i/ , w/ and o/ as prefixes, respectively to what you compare; see git-config(1) Next come one or more hunks of differences; each hunk shows one area where the files differ. Unified format hunks starts with line like @@ -1,8 +1,9 @@ or @@ -18,6 +19,8 @@ int cmd_http_fetch(int argc, const char **argv, ... It is in the format @@ from-file-range to-file-range @@ [header] . The from-file-range is in the form - , , and to-file-range is + , . Both start-line and number-of-lines refer to position and length of hunk in preimage and postimage, respectively. If number-of-lines not shown it means that it is 1. The optional header shows the C function where each change occurs, if it is a C file (like -p option in GNU diff), or the equivalent, if any, for other types of files. Next comes the description of where files differ. The lines common to both files begin with a space character. The lines that actually differ between the two files have one of the following indicator characters in the left print column: '+' -- A line was added here to the first file. '-' -- A line was removed here from the first file. So, for example, first chunk #include "cache.h" #include "walker.h" -int cmd_http_fetch(int argc, const char **argv, const char *prefix) +int main(int argc, const char **argv) { + const char *prefix; struct walker *walker; int commits_on_stdin = 0; int commits; means that cmd_http_fetch was replaced by main , and that const char *prefix; line was added. In other words, before the change, the appropriate fragment of then 'builtin-http-fetch.c' file looked like this: #include "cache.h" #include "walker.h" int cmd_http_fetch(int argc, const char **argv, const char *prefix) { struct walker *walker; int commits_on_stdin = 0; int commits; After the change this fragment of now 'http-fetch.c' file looks like this instead: #include "cache.h" #include "walker.h" int main(int argc, const char **argv) { const char *prefix; struct walker *walker; int commits_on_stdin = 0; int commits; There might be \ No newline at end of file line present (it is not in example diff). As Donal Fellows said it is best to practice reading diffs on real-life examples, where you know what you have changed. References: git-diff(1) manpage , section "Generating patches with -p" (diff.info)Detailed Unified node, "Detailed Description of Unified Format".
