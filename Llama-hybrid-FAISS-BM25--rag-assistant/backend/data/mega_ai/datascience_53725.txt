[site]: datascience
[post_id]: 53725
[parent_id]: 53697
[tags]: 
This is less a question of finding the best regression model and parameters than of feature engineering . You have 3 id columns and 1 date column with which you try to do regression. The only column which is somewhat metric is the date column and I don't expect it to contain enough information for a solid regression. Also, I assume you have many trucks which drive to many cities, which means after dummy-encoding, you will have a large amount of dummy-variables. Feature Engineering Feature engineering is a very broad topic which cannot be covered in one SE-post. However, here are two simple rules of thumb: Aggregate categorical columns which have many categories and use different ways to aggregate them (e.g. aggregate cities by region, but also aggregate them by size, and so on). Don't look at id-columns as features, but more as ids. Use them to join additional datasets. For example, from the truck-id, you can probably get more information about the truck (model, type, ...) and about the driver (experience, ...). Also, from the city-id, you can get a whole lot of information (distance between cities, size/population of the city, weather, ...). Here are some naive suggestions for additional features: The month and the weekday (maybe the season as well) Time of the day in a few categories ( afternoon , night , ...) If there are many cities, remove the city-id column and aggregate it by region, size, or whatever makes sense to you. Also, if there are many trucks, remove the truck-id column and aggregate it as well (e.g. by truck-type , delivery-type , drivers years of employment , or whatever data you can get). The estimated road distance between the current city and the city in which the truck was before The size of the road network of the destination-city / city of origin The weather at the respective time and place ( rain , snow , sunny , ...) The delay which the truck has had on its last delivery These are just some suggestions. Use whatever features make sense to you and use whatever additional data you can find. Maybe, run a decision tree on your new dataset and inspect the feature importances. That will give you a glimpse of what features are the most promising for further feature engineering. Finding the best model When you're done with feature engineering, then you can think about finding the best model. For this data size, I would suggest ElasticNet and Lasso, but I would definitely give a decision tree, random forest and xgboost a try. Also, think about dividing the target-variable into several categories and to do classification instead of regression. That could also be suitable for your use-case.
