[site]: stackoverflow
[post_id]: 411031
[parent_id]: 410623
[tags]: 
I'm fairly certain that there isn't a one-shot clever way to construct this hash. My inclination would be to just be explicit and state what I'm doing: hash = {} array.each{|x| hash[x] = nil} It doesn't look particularly elegant, but it's clear, and does the job. FWIW, your original suggestion (under Ruby 1.8.6 at least) doesn't seem to work. I get an "ArgumentError: odd number of arguments for Hash" error. Hash.[] expects a literal, even-lengthed list of values: Hash[a, 1, b, 2] # => {a => 1, b => 2} so I tried changing your code to: hash = Hash[*array.map {|x| [x, nil]}.flatten] but the performance is dire: #!/usr/bin/ruby -w require 'benchmark' array = (1..100_000).to_a Benchmark.bm(15) do |x| x.report("assignment loop") {hash = {}; array.each{|e| hash[e] = nil}} x.report("hash constructor") {hash = Hash[*array.map {|e| [e, nil]}.flatten]} end gives user system total real assignment loop 0.440000 0.200000 0.640000 ( 0.657287) hash constructor 4.440000 0.250000 4.690000 ( 4.758663) Unless I'm missing something here, a simple assignment loop seems the clearest and most efficient way to construct this hash.
