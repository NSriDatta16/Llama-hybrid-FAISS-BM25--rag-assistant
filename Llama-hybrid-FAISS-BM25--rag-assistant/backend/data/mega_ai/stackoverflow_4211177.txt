[site]: stackoverflow
[post_id]: 4211177
[parent_id]: 4179086
[tags]: 
The two XML files aren't the same, in file-1 uso is qualified under ex so it is under "urn:iso.org:standard:10303:part(28):version(2):xmlschema:common" namespace, while in second it is not and is under default namespace. In class 'iso_10303_28' property uos of type uos which means that XmlSerializer will expect elements with name 'uos' (by default) under the same namespace as that of iso_10303_28 and 'xsi:type' 'uos' as described by class 'uos'- under the same - "urn:iso.org:standard:10303:part(28):version(2):xmlschema:common" namespace. So this explains why you get null in second xml. If you have no control over xml - and should you be able to deserialize either of them, try following Type uos has no knowledge of type uos1 unless specified by XmlInclude attribute. I think what you've additionally added an XmlInclude attribute on uos class to include uos1 as a known type. If not - the serializer won't de-serialize first file. If not - you should do that as below [System.Xml.Serialization.XmlInclude(typeof(uos1))] [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso.org:standard:10303:part(28):version(2):xmlschema:common")] public partial class uos { } You can add XmlElement attributes for property iso_10303_28.uos to accept names under either namespace - and use a choice identifier or use 'uos[]' as type instead of 'uos'. With choice identifier - it can be done as [System.Xml.Serialization.XmlRootAttribute(Namespace = "urn:iso.org:standard:10303:part(28):version(2):xmlschema:common", IsNullable = false)] public partial class iso_10303_28 { private uos uosField; public enum uosChoice { [XmlEnum("http://www.iai-tech.org/ifcXML/IFC2x3/FINAL:uos")] uos, [XmlEnum("urn:iso.org:standard:10303:part(28):version(2):xmlschema:common:uos")] uos1 } [XmlIgnore] public uosChoice uosChoiceField; [XmlChoiceIdentifier("uosChoiceField")] [XmlElement(ElementName = "uos", Namespace = "http://www.iai-tech.org/ifcXML/IFC2x3/FINAL", Type = typeof(uos1))] [XmlElement(ElementName = "uos", Namespace = "urn:iso.org:standard:10303:part(28):version(2):xmlschema:common")] public uos uos { get { return this.uosField; } set { this.uosField = value; } } } EDIT: To parse Items correctly, modify uos1 like this [System.Xml.Serialization.XmlTypeAttribute(TypeName = "uos", Namespace = "http://www.iai-tech.org/ifcXML/IFC2x3/FINAL")] [System.Xml.Serialization.XmlRootAttribute("uos", Namespace = "http://www.iai-tech.org/ifcXML/IFC2x3/FINAL", IsNullable = false)] public partial class uos1 : uos { private Entity[] itemsField; /// [XmlElement(ElementName = "Entity", Namespace = "urn:iso.org:standard:10303:part(28):version(2):xmlschema:common", Type = typeof(Entity))] [XmlElement(ElementName = "IfcOrganization", Namespace = "http://www.iai-tech.org/ifcXML/IFC2x3/FINAL", Type = typeof(IfcOrganization))] [XmlElement(ElementName = "IfcCartesianPoint", Namespace = "http://www.iai-tech.org/ifcXML/IFC2x3/FINAL", Type = typeof(IfcCartesianPoint))] [XmlElement(ElementName = "IfcDirection", Namespace = "http://www.iai-tech.org/ifcXML/IFC2x3/FINAL", Type = typeof(IfcDirection))] public Entity[] Items { get { return this.itemsField; } set { this.itemsField = value; } } } [System.Xml.Serialization.XmlTypeAttribute(TypeName = "IfcOrganization", Namespace = "http://www.iai-tech.org/ifcXML/IFC2x3/FINAL")] public class IfcOrganization : Entity { } [System.Xml.Serialization.XmlTypeAttribute(TypeName = "IfcCartesianPoint", Namespace = "http://www.iai-tech.org/ifcXML/IFC2x3/FINAL")] public class IfcCartesianPoint : Entity { } [System.Xml.Serialization.XmlTypeAttribute(TypeName = "IfcDirection", Namespace = "http://www.iai-tech.org/ifcXML/IFC2x3/FINAL")] public class IfcDirection : Entity { } [XmlInclude(typeof(IfcOrganization))] [XmlInclude(typeof(IfcCartesianPoint))] [XmlInclude(typeof(IfcDirection))] [System.Xml.Serialization.XmlTypeAttribute(TypeName = "Entity", Namespace = "urn:iso.org:standard:10303:part(28):version(2):xmlschema:common")] public class Entity { }
