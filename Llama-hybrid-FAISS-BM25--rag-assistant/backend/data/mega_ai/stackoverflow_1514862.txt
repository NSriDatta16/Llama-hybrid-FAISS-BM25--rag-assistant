[site]: stackoverflow
[post_id]: 1514862
[parent_id]: 1514706
[tags]: 
I have implemented a similar thing a few years ago (.NET Framework 1.1 based, if I recall correctly). Key elements of that implementation were: We created an extended Form class that exposed some specific functionality, such as an interface for extracting user commands that would invoke the UI. The main application would scan the dll's in the application directory and inspect them (using Reflection ) to find any classes based on our special Form class, and extract information out of them to build menu structures that would invoke the commands. When a user invoked a command that would lead to a form being displayed, it was created (using Activator.CreateInstance ), stripped from form borders and embedded into a container (in our case a TabPage in a TabControl , in your case most likely an "empty" MDI Child form in your application). This all worked out fairly well I think (I actually think that the framework is still being maintained and used within the company it was created for). You may want to keep an eye at memory management. For instance, since an assembly cannot be unloaded, if that is a requirement you will need to load external assemblies into separate AppDomains. Also pay attention to any event handlers that are attached dynamically when child window UI's are loaded, so that they are properly detached when the UI's are unloaded.
