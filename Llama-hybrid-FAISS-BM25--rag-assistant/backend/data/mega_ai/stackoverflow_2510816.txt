[site]: stackoverflow
[post_id]: 2510816
[parent_id]: 2510755
[tags]: 
If you define an alphabet of characters, you can just convert to base 10, do an average, and convert back to base-N where N is the size of the alphabet. alphabet = 'abcdefghijklmnopqrstuvwxyz' def enbase(x): n = len(alphabet) if x Edit : Based on comments and other answers, you might want to handle strings of different lengths by appending the first letter of the alphabet to the shorter word until they're the same length. This will result in the "average" falling between the two inputs in a lexicographical sort. Code changes and new outputs below. def pad(x, n): p = alphabet[0] * (n - len(x)) return '%s%s' % (x, p) def average(a, b): n = max(len(a), len(b)) a = debase(pad(a, n)) b = debase(pad(b, n)) return enbase((a + b) / 2) print average('a', 'z') #m print average('aa', 'zz') #mz print average('aa', 'az') #m (equivalent to ma) print average('cat', 'doggie') #cumqec print average('google', 'microsoft') #jlilzyhcw print average('microsoft', 'google') #jlilzyhcw
