[site]: stackoverflow
[post_id]: 866217
[parent_id]: 866127
[tags]: 
I don't think that this is easily possible. You could drop ObjectDatasource and roll it on your own or hack around it. Maybe use a [ThreadLocal] static variable in that class and let MethodA put the value into that variable? MethodB could read it. And a [ThreadLocal] private DataSet m_cachedAtoB=null; public static void Reset() { m_cachedAtoB=null; } Call Reset() from the start of your page so that each thread that is recycled by ASP.NET will not leave old stale data for the next request. Did I mention that this is a hack? Better solution: It seems like that MethodB does not take a parameter. So whatever it is that MethodB queries, let MethodA fetch it and push it into a HttpCache. What I did was that my backend returend a quite big (10 tables) complete dataset to the webservers with all static data. There I had a class that had also things like your MehtodA and MehtodB. But they always fetched the dataset. GetDataSet() queried the cahce and if it was missing queried the webservice and put it in the cahce. Every of my MethodA methods simply used LINQ to get stuff from the big dataset. Of course that only works with static data...
