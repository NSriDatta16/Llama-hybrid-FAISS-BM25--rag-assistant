[site]: stackoverflow
[post_id]: 1417993
[parent_id]: 1416694
[tags]: 
You can make it a shortest path problem, but unlike what Fragsworth said, you don't need to change the algorithm, just how you present the data. Each node in your graph is a single cell in your 2D array, and you connect the nodes according to your list, with weight set to 10 - cellValue. you don't connect nodes that doesn't follow the rules (you won't connect b[4] to a[5] because it's not in the list "order"). Examples : c[0] connect to c[1] with weight 9 (10 - c[1] value that is 1) => this is the option to choose "C" c[0] connect to a[1] with weight 9 (10 - a[1] value that is 1) => this is the option to choose "A" b[2] connect to b[3] with weight 8 (10 - b[3] value that is 2) => this is the option to choose "B" b[2] connect to d[3] with weight 5 (10 - d[3] value that is 5) => this is the option to choose "D" The only problem you got is to get rid of the option that you chose "CCCCC..." all the way, that is countered by referring the second "C" of your "CABDC" list as (C2) and only connect it from the D nodes (or other C2 nodes) in your example. Now you run a any standard shortest path algorithm (without having to change it) starting from c[0] and ending at c2[n], because the weights are the opposite on the value, the shortest path you get will be the sum of the max values.
