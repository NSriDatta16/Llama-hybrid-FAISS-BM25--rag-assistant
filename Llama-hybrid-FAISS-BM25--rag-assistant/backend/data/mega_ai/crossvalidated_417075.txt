[site]: crossvalidated
[post_id]: 417075
[parent_id]: 417033
[tags]: 
Your comment makes it sound like you will: Model each category as binomial, and Construct confidence intervals for each category individually. In the case this is what you plan to do, let me first say this is not appropriate. This will create confidence hypercubes (?) which will be to liberal in their coverage (i.e. they will include parts of parameter space which they should not). In order to properly create confidence sets, you will need the covariance matrix for the proportions. Since the last frequency can be deduced from the first 3 (because they have to sum to 1, so knowing the first 3 determines the last), we can ignore it and just work with the first 3. For a quadrinomial distribution, the covariance matrix is for the first three frequencies is... $$\mathbf{\Sigma}(\pi)=\left[\begin{array}{ccc}{\pi_{1}\left(1-\pi_{1}\right)} & {-\pi_{1} \pi_{2}} & {-\pi_{1} \pi_{3}} \\ {-\pi_{1} \pi_{2}} & {\pi_{2}\left(1-\pi_{2}\right)} & {-\pi_{2} \pi_{3}} \\ {-\pi_{1} \pi_{3}} & {-\pi_{2} \pi_{3}} & {\pi_{3}\left(1-\pi_{3}\right)}\end{array}\right]$$ Let $\hat{\boldsymbol{\pi}} = [\hat{\pi}_1, \hat{\pi}_2, \hat{\pi}_3]$ be a vector of estimated category frequencies. To determine if a proposed frequency vector, $\boldsymbol{\pi}_p$ lies in your confidence region, compute $$S = N\cdot(\boldsymbol{\pi}_p - \hat{\boldsymbol{\pi}})^T \Sigma^{-1}(\hat{\boldsymbol{\pi}}) (\boldsymbol{\pi}_p - \hat{\boldsymbol{\pi}})$$ where $N$ is the size of your sample. If $S , then the proposed vector of frequencies lies within the confidence region. Else, it does not. (At least, I think I did the math right here, its been a long time since I've done this sort of asymptotic work, so if someone could please correct me if needed). Here is some code to implement this in R. library(onehot) #Random seed for reproducibility set.seed(0) #True frequencies p = c(0.4, 0.3, 0.15, 0.15) #Sample size N = 100 #Draw samples x = sample(1:4, N, replace = T, prob = p) #Observed frequencies pi_hat = as.numeric(table(x)/N) #Construct the covariance matrix d = data.frame(x = factor(x)) encoder = onehot(d) Sigma = cov(predict(encoder,d)) #Only need the first 3 Sigma = Sigma[1:3, 1:3] pi_hat = pi_hat[1:3] #Does true frequency lie in region? S = N*t(p[1:3] - pi_hat)%*%solve(Sigma) %*% (p[1:3] - pi_hat) S I'm not sure what you are using to compute the confidence regions, but if you are using R, there is likely a package to do this.
