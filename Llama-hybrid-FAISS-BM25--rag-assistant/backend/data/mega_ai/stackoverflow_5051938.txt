[site]: stackoverflow
[post_id]: 5051938
[parent_id]: 5051003
[tags]: 
You're essentially performing a JOIN operation. There are 3 types of join algorithms in common use - nested loop, hash, and merge. Your code is using the nested loop algorithm - which seems appropriate for table sizes of 10 and 5, unless one or both are already sorted (in which case, a merge join may be more appropriate). I can't imagine this being a bottleneck in any real-world application - but, we can possibly improve it a little bit with some assumptions. Let's start by hoisting variables, to ensure they're not being recalculated (the JIT-optimizer will probably do this automatically, but it doesn't hurt): int chkBoxCount = chkboxListWorkTypes.Items.Count; foreach (DataRow dr in dtResult.Rows) { string rowValue = dr["WorkTypeID"].ToString(); for (var i = 0; i On the assumption that rowValue is a string, let's use a cast: int chkBoxCount = chkboxListWorkTypes.Items.Count; foreach (DataRow dr in dtResult.Rows) { string rowValue = (string)dr["WorkTypeID"]; for (var i = 0; i Since we're never unselecting a checkbox, and a bool compare should be faster on average than a string compare: int chkBoxCount = chkboxListWorkTypes.Items.Count; foreach (DataRow dr in dtResult.Rows) { string rowValue = (string)dr["WorkTypeID"]; for (var i = 0; i Assuming each checkbox value is unique, we can stop iterating when we've found a result: int chkBoxCount = chkboxListWorkTypes.Items.Count; foreach (DataRow dr in dtResult.Rows) { string rowValue = (string)dr["WorkTypeID"]; for (var i = 0; i Since you have 10 rows, and 5 checkboxes - we should reverse the loops. Since we break on the inner loop when value is found, making the inner loop the larger of the 2 is more efficient: int chkBoxCount = chkboxListWorkTypes.Items.Count; for (var i = 0; i Assuming you don't care about culture or case sensitive comparisons, we can use OrdinalIgnoreCase: int chkBoxCount = chkboxListWorkTypes.Items.Count; for (var i = 0; i That's about the best I can do. I'd be surprised if there was any measurable difference on such a small dataset. So, here's what you should really do: var workTypeIds = dtResult.Rows.Cast ().Select(dr => (string)dr["WorkTypeId"]); foreach (var chk in chkBoxListWorkTypes) { if (workTypeIds.Contains(chk.Value)) { chk.Selected = true; } } Or, with an Each extension: var workTypeIds = dtResult.Rows.Cast ().Select(dr => (string)dr["WorkTypeId"]); chkBoxListWorkTypes.Where(c => workTypeIds.Contains(c.Value)).Each(c => c.Selected = true); which may be slightly slower, but reads a lot better IMO.
