[site]: stackoverflow
[post_id]: 2847433
[parent_id]: 2847199
[tags]: 
Wicket's built in AJAX support is always stateful and thus accessed with changing URLs. If your designers aren't planning to use Wicket's JS library, it's pretty straightforward to mount a JSON page: public class JsonReturningPage extends WebPage { public JsonReturningPage(PageParameters params) { String json = "{foo: 4711}"; IRequestTarget t = new StringRequestTarget("application/json", "UTF-8", json); getRequestCycle().setRequestTarget(t); } } Alternatively, you could also implement your own AbstractRequestTargetUrlCodingStrategy to directly return an IRequestTarget from IRequestTarget decode(RequestParameters params) and mount it in your application. Regarding JS files, I'd try to educate them to use one file per component. This certainly has the advantage of less copy-paste code and simpler maitenance. Additionally, I'd certainly discourage JS in Java code. It's normally only needed to pass data or config to JS , either as variable definitions or method calls. As this data is typically in Java and JS is written by designers, it's time for designers and programmers to team up.
