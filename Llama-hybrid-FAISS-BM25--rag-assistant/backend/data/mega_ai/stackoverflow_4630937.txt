[site]: stackoverflow
[post_id]: 4630937
[parent_id]: 4630437
[tags]: 
Assuming you can put the files somewhere more permanent than /tmp, storing and accessing uploaded files outside the public directory is possible using the :url and :path parameters, along with a bit of configuration work. An example extracted from code I wrote recently (it's modified enough that it might not work if you copy it verbatim): app/models/picture.rb # Define the attachment has_attached_file :image, :styles => {:large => ["700", :jpg], :thumb => ["100x100>", :gif]}, :url => "/asset/picture/:id/:style/:basename.:extension", :path => ":base/picture/:id/:style/:basename.:extension" config/initializers/storage.rb # Configure common attachment storage # This approach allows more flexibility in defining, and potentially moving, # a common storage root for multiple models. If unneeded, just replace # :base in the :path parameter with the actual path Paperclip.interpolates :base do |attachment, style| /path/to/persistent/storage # A relative path from the Rails.root directory should work as well end app/controllers/pictures_controller.rb # Make the attachment accessible def asset instance = Picture.find(params[:id]) params[:style].gsub!(/\.\./, '') #check permissions before delivering asset? send_file instance.image.path(params[:style].intern), :type => instance.image_content_type, :disposition => 'inline' end config/routes.rb # Add the necessary route match '/asset/picture/:id/:style/:basename.:extension', :to => 'pictures#asset' app/views/pictures/show.html.erb Note this is all Rails 3 syntax. A handful of changes would be needed to use it in Rails 2.x, but hopefully you get the, um, picture.
