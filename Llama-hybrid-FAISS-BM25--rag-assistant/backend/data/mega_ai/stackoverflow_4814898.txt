[site]: stackoverflow
[post_id]: 4814898
[parent_id]: 4814808
[tags]: 
You can use the lock statement, to enter a critical section with mutual exclusion. The lock will use the object's reference to differentiate one critical section from another, you must have the same reference for all your lock if it accesses to the same elements. // Define an object which can be locked in your class. object locker = new object(); // Add around your critical sections the following : lock (locker) { /* ... */ } That will change your code to : int currentNumber = provider.GetCurrentNumber(); lock (locker) { if(provider.CanPassNumber(false, currentNumber)) { currentNumber++; provider.SetNumber(currentNumber); } } And : if(condition) { lock (locker) { provider.SetNumber(numberToSet); } }
