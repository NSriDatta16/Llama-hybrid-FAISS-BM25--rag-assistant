[site]: stackoverflow
[post_id]: 4128060
[parent_id]: 4127955
[tags]: 
Here is an OLD post from Eric Gunnerson that talks about inlining. The gist is that the jitter decides whether or a function is to be inlined. My understanding is that you can "encourage" inlining to some degree by writing small functions, but I don't know how reliable that really is. Here is another link from a question here on SO that asks a similar question. Many good links are included. Here is an excerpt from one of the links from the second link I posted: A short and simple method that is frequently used can be in-lined into the calling code. Currently, the JIT is documented (perhaps "blogged about" would be more precise here) to inline methods that are less than 32 bytes in length, do not contain any complex branching logic, and do not contain any exception handling-related mechanisms. See David Notario's blog for some additional information on this topic (note that it is not entirely relevant for CLR 2.0). I suppose that counts as a rough guideline of when a method might be inlined, but I don't think that you can say that if a method does meet the criteria above that it will be inlined. On a side note, you can force a function to NOT be inlined l ike this: [MethodImpl(MethodImplOptions.NoInlining)] public void DoNotInlineMe() { Console.WriteLine("Hello from non-inlined method"); }
